   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"usb_regs.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.SetCNTR,"ax",%progbits
  16              		.align	1
  17              		.global	SetCNTR
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	SetCNTR:
  24              	.LFB0:
  25              		.file 1 "usb_lib/usb_regs.c"
   1:usb_lib/usb_regs.c **** /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
   2:usb_lib/usb_regs.c **** * File Name          : usb_regs.c
   3:usb_lib/usb_regs.c **** * Author             : MCD Application Team
   4:usb_lib/usb_regs.c **** * Version            : V2.2.1
   5:usb_lib/usb_regs.c **** * Date               : 09/22/2008
   6:usb_lib/usb_regs.c **** * Description        : Interface functions to USB cell registers
   7:usb_lib/usb_regs.c **** ********************************************************************************
   8:usb_lib/usb_regs.c **** * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
   9:usb_lib/usb_regs.c **** * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
  10:usb_lib/usb_regs.c **** * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
  11:usb_lib/usb_regs.c **** * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
  12:usb_lib/usb_regs.c **** * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
  13:usb_lib/usb_regs.c **** * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  14:usb_lib/usb_regs.c **** *******************************************************************************/
  15:usb_lib/usb_regs.c **** 
  16:usb_lib/usb_regs.c **** /* Includes ------------------------------------------------------------------*/
  17:usb_lib/usb_regs.c **** #include "usb_lib.h"
  18:usb_lib/usb_regs.c **** 
  19:usb_lib/usb_regs.c **** /* Private typedef -----------------------------------------------------------*/
  20:usb_lib/usb_regs.c **** /* Private define ------------------------------------------------------------*/
  21:usb_lib/usb_regs.c **** /* Private macro -------------------------------------------------------------*/
  22:usb_lib/usb_regs.c **** /* Private variables ---------------------------------------------------------*/
  23:usb_lib/usb_regs.c **** /* Extern variables ----------------------------------------------------------*/
  24:usb_lib/usb_regs.c **** /* Private function prototypes -----------------------------------------------*/
  25:usb_lib/usb_regs.c **** /* Private functions ---------------------------------------------------------*/
  26:usb_lib/usb_regs.c **** 
  27:usb_lib/usb_regs.c **** /*******************************************************************************
  28:usb_lib/usb_regs.c **** * Function Name  : SetCNTR.
  29:usb_lib/usb_regs.c **** * Description    : Set the CNTR register value.
  30:usb_lib/usb_regs.c **** * Input          : wRegValue: new register value.
  31:usb_lib/usb_regs.c **** * Output         : None.
  32:usb_lib/usb_regs.c **** * Return         : None.
  33:usb_lib/usb_regs.c **** *******************************************************************************/
  34:usb_lib/usb_regs.c **** void SetCNTR(u16 wRegValue)
  35:usb_lib/usb_regs.c **** {
  26              		.loc 1 35 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  36:usb_lib/usb_regs.c ****   _SetCNTR(wRegValue);
  32              		.loc 1 36 0
  33 0000 014B     		ldr	r3, .L2
  34 0002 1860     		str	r0, [r3]
  37:usb_lib/usb_regs.c **** }
  35              		.loc 1 37 0
  36 0004 7047     		bx	lr
  37              	.L3:
  38 0006 00BF     		.align	2
  39              	.L2:
  40 0008 405C0040 		.word	1073765440
  41              		.cfi_endproc
  42              	.LFE0:
  44              		.section	.text.GetCNTR,"ax",%progbits
  45              		.align	1
  46              		.global	GetCNTR
  47              		.syntax unified
  48              		.thumb
  49              		.thumb_func
  50              		.fpu softvfp
  52              	GetCNTR:
  53              	.LFB1:
  38:usb_lib/usb_regs.c **** 
  39:usb_lib/usb_regs.c **** /*******************************************************************************
  40:usb_lib/usb_regs.c **** * Function Name  : GetCNTR.
  41:usb_lib/usb_regs.c **** * Description    : returns the CNTR register value.
  42:usb_lib/usb_regs.c **** * Input          : None.
  43:usb_lib/usb_regs.c **** * Output         : None.
  44:usb_lib/usb_regs.c **** * Return         : CNTR register Value.
  45:usb_lib/usb_regs.c **** *******************************************************************************/
  46:usb_lib/usb_regs.c **** u16 GetCNTR(void)
  47:usb_lib/usb_regs.c **** {
  54              		.loc 1 47 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  48:usb_lib/usb_regs.c ****   return(_GetCNTR());
  59              		.loc 1 48 0
  60 0000 014B     		ldr	r3, .L5
  61 0002 1868     		ldr	r0, [r3]
  49:usb_lib/usb_regs.c **** }
  62              		.loc 1 49 0
  63 0004 80B2     		uxth	r0, r0
  64 0006 7047     		bx	lr
  65              	.L6:
  66              		.align	2
  67              	.L5:
  68 0008 405C0040 		.word	1073765440
  69              		.cfi_endproc
  70              	.LFE1:
  72              		.section	.text.SetISTR,"ax",%progbits
  73              		.align	1
  74              		.global	SetISTR
  75              		.syntax unified
  76              		.thumb
  77              		.thumb_func
  78              		.fpu softvfp
  80              	SetISTR:
  81              	.LFB2:
  50:usb_lib/usb_regs.c **** 
  51:usb_lib/usb_regs.c **** /*******************************************************************************
  52:usb_lib/usb_regs.c **** * Function Name  : SetISTR.
  53:usb_lib/usb_regs.c **** * Description    : Set the ISTR register value.
  54:usb_lib/usb_regs.c **** * Input          : wRegValue: new register value.
  55:usb_lib/usb_regs.c **** * Output         : None.
  56:usb_lib/usb_regs.c **** * Return         : None.
  57:usb_lib/usb_regs.c **** *******************************************************************************/
  58:usb_lib/usb_regs.c **** void SetISTR(u16 wRegValue)
  59:usb_lib/usb_regs.c **** {
  82              		.loc 1 59 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 0
  85              		@ frame_needed = 0, uses_anonymous_args = 0
  86              		@ link register save eliminated.
  87              	.LVL1:
  60:usb_lib/usb_regs.c ****   _SetISTR(wRegValue);
  88              		.loc 1 60 0
  89 0000 014B     		ldr	r3, .L8
  90 0002 1860     		str	r0, [r3]
  61:usb_lib/usb_regs.c **** }
  91              		.loc 1 61 0
  92 0004 7047     		bx	lr
  93              	.L9:
  94 0006 00BF     		.align	2
  95              	.L8:
  96 0008 445C0040 		.word	1073765444
  97              		.cfi_endproc
  98              	.LFE2:
 100              		.section	.text.GetISTR,"ax",%progbits
 101              		.align	1
 102              		.global	GetISTR
 103              		.syntax unified
 104              		.thumb
 105              		.thumb_func
 106              		.fpu softvfp
 108              	GetISTR:
 109              	.LFB3:
  62:usb_lib/usb_regs.c **** 
  63:usb_lib/usb_regs.c **** /*******************************************************************************
  64:usb_lib/usb_regs.c **** * Function Name  : GetISTR
  65:usb_lib/usb_regs.c **** * Description    : Returns the ISTR register value.
  66:usb_lib/usb_regs.c **** * Input          : None.
  67:usb_lib/usb_regs.c **** * Output         : None.
  68:usb_lib/usb_regs.c **** * Return         : ISTR register Value
  69:usb_lib/usb_regs.c **** *******************************************************************************/
  70:usb_lib/usb_regs.c **** u16 GetISTR(void)
  71:usb_lib/usb_regs.c **** {
 110              		.loc 1 71 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		@ link register save eliminated.
  72:usb_lib/usb_regs.c ****   return(_GetISTR());
 115              		.loc 1 72 0
 116 0000 014B     		ldr	r3, .L11
 117 0002 1868     		ldr	r0, [r3]
  73:usb_lib/usb_regs.c **** }
 118              		.loc 1 73 0
 119 0004 80B2     		uxth	r0, r0
 120 0006 7047     		bx	lr
 121              	.L12:
 122              		.align	2
 123              	.L11:
 124 0008 445C0040 		.word	1073765444
 125              		.cfi_endproc
 126              	.LFE3:
 128              		.section	.text.GetFNR,"ax",%progbits
 129              		.align	1
 130              		.global	GetFNR
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 134              		.fpu softvfp
 136              	GetFNR:
 137              	.LFB4:
  74:usb_lib/usb_regs.c **** 
  75:usb_lib/usb_regs.c **** /*******************************************************************************
  76:usb_lib/usb_regs.c **** * Function Name  : GetFNR
  77:usb_lib/usb_regs.c **** * Description    : Returns the FNR register value.
  78:usb_lib/usb_regs.c **** * Input          : None.
  79:usb_lib/usb_regs.c **** * Output         : None.
  80:usb_lib/usb_regs.c **** * Return         : FNR register Value
  81:usb_lib/usb_regs.c **** *******************************************************************************/
  82:usb_lib/usb_regs.c **** u16 GetFNR(void)
  83:usb_lib/usb_regs.c **** {
 138              		.loc 1 83 0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              		@ link register save eliminated.
  84:usb_lib/usb_regs.c ****   return(_GetFNR());
 143              		.loc 1 84 0
 144 0000 014B     		ldr	r3, .L14
 145 0002 1868     		ldr	r0, [r3]
  85:usb_lib/usb_regs.c **** }
 146              		.loc 1 85 0
 147 0004 80B2     		uxth	r0, r0
 148 0006 7047     		bx	lr
 149              	.L15:
 150              		.align	2
 151              	.L14:
 152 0008 485C0040 		.word	1073765448
 153              		.cfi_endproc
 154              	.LFE4:
 156              		.section	.text.SetDADDR,"ax",%progbits
 157              		.align	1
 158              		.global	SetDADDR
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 162              		.fpu softvfp
 164              	SetDADDR:
 165              	.LFB5:
  86:usb_lib/usb_regs.c **** 
  87:usb_lib/usb_regs.c **** /*******************************************************************************
  88:usb_lib/usb_regs.c **** * Function Name  : SetDADDR
  89:usb_lib/usb_regs.c **** * Description    : Set the DADDR register value.
  90:usb_lib/usb_regs.c **** * Input          : wRegValue: new register value.
  91:usb_lib/usb_regs.c **** * Output         : None.
  92:usb_lib/usb_regs.c **** * Return         : None.
  93:usb_lib/usb_regs.c **** *******************************************************************************/
  94:usb_lib/usb_regs.c **** void SetDADDR(u16 wRegValue)
  95:usb_lib/usb_regs.c **** {
 166              		.loc 1 95 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170              		@ link register save eliminated.
 171              	.LVL2:
  96:usb_lib/usb_regs.c ****   _SetDADDR(wRegValue);
 172              		.loc 1 96 0
 173 0000 014B     		ldr	r3, .L17
 174 0002 1860     		str	r0, [r3]
  97:usb_lib/usb_regs.c **** }
 175              		.loc 1 97 0
 176 0004 7047     		bx	lr
 177              	.L18:
 178 0006 00BF     		.align	2
 179              	.L17:
 180 0008 4C5C0040 		.word	1073765452
 181              		.cfi_endproc
 182              	.LFE5:
 184              		.section	.text.GetDADDR,"ax",%progbits
 185              		.align	1
 186              		.global	GetDADDR
 187              		.syntax unified
 188              		.thumb
 189              		.thumb_func
 190              		.fpu softvfp
 192              	GetDADDR:
 193              	.LFB6:
  98:usb_lib/usb_regs.c **** 
  99:usb_lib/usb_regs.c **** /*******************************************************************************
 100:usb_lib/usb_regs.c **** * Function Name  : GetDADDR
 101:usb_lib/usb_regs.c **** * Description    : Returns the DADDR register value.
 102:usb_lib/usb_regs.c **** * Input          : None.
 103:usb_lib/usb_regs.c **** * Output         : None.
 104:usb_lib/usb_regs.c **** * Return         : DADDR register Value
 105:usb_lib/usb_regs.c **** *******************************************************************************/
 106:usb_lib/usb_regs.c **** u16 GetDADDR(void)
 107:usb_lib/usb_regs.c **** {
 194              		.loc 1 107 0
 195              		.cfi_startproc
 196              		@ args = 0, pretend = 0, frame = 0
 197              		@ frame_needed = 0, uses_anonymous_args = 0
 198              		@ link register save eliminated.
 108:usb_lib/usb_regs.c ****   return(_GetDADDR());
 199              		.loc 1 108 0
 200 0000 014B     		ldr	r3, .L20
 201 0002 1868     		ldr	r0, [r3]
 109:usb_lib/usb_regs.c **** }
 202              		.loc 1 109 0
 203 0004 80B2     		uxth	r0, r0
 204 0006 7047     		bx	lr
 205              	.L21:
 206              		.align	2
 207              	.L20:
 208 0008 4C5C0040 		.word	1073765452
 209              		.cfi_endproc
 210              	.LFE6:
 212              		.section	.text.SetBTABLE,"ax",%progbits
 213              		.align	1
 214              		.global	SetBTABLE
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 218              		.fpu softvfp
 220              	SetBTABLE:
 221              	.LFB7:
 110:usb_lib/usb_regs.c **** 
 111:usb_lib/usb_regs.c **** /*******************************************************************************
 112:usb_lib/usb_regs.c **** * Function Name  : SetBTABLE
 113:usb_lib/usb_regs.c **** * Description    : Set the BTABLE.
 114:usb_lib/usb_regs.c **** * Input          : wRegValue: New register value.
 115:usb_lib/usb_regs.c **** * Output         : None.
 116:usb_lib/usb_regs.c **** * Return         : None.
 117:usb_lib/usb_regs.c **** *******************************************************************************/
 118:usb_lib/usb_regs.c **** void SetBTABLE(u16 wRegValue)
 119:usb_lib/usb_regs.c **** {
 222              		.loc 1 119 0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 0
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226              		@ link register save eliminated.
 227              	.LVL3:
 120:usb_lib/usb_regs.c ****   _SetBTABLE(wRegValue);
 228              		.loc 1 120 0
 229 0000 4FF6F873 		movw	r3, #65528
 230 0004 014A     		ldr	r2, .L23
 231 0006 0340     		ands	r3, r3, r0
 232 0008 1360     		str	r3, [r2]
 121:usb_lib/usb_regs.c **** }
 233              		.loc 1 121 0
 234 000a 7047     		bx	lr
 235              	.L24:
 236              		.align	2
 237              	.L23:
 238 000c 505C0040 		.word	1073765456
 239              		.cfi_endproc
 240              	.LFE7:
 242              		.section	.text.GetBTABLE,"ax",%progbits
 243              		.align	1
 244              		.global	GetBTABLE
 245              		.syntax unified
 246              		.thumb
 247              		.thumb_func
 248              		.fpu softvfp
 250              	GetBTABLE:
 251              	.LFB8:
 122:usb_lib/usb_regs.c **** 
 123:usb_lib/usb_regs.c **** /*******************************************************************************
 124:usb_lib/usb_regs.c **** * Function Name  : GetBTABLE.
 125:usb_lib/usb_regs.c **** * Description    : Returns the BTABLE register value.
 126:usb_lib/usb_regs.c **** * Input          : None.
 127:usb_lib/usb_regs.c **** * Output         : None.
 128:usb_lib/usb_regs.c **** * Return         : BTABLE address.
 129:usb_lib/usb_regs.c **** *******************************************************************************/
 130:usb_lib/usb_regs.c **** u16 GetBTABLE(void)
 131:usb_lib/usb_regs.c **** {
 252              		.loc 1 131 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              		@ link register save eliminated.
 132:usb_lib/usb_regs.c ****   return(_GetBTABLE());
 257              		.loc 1 132 0
 258 0000 014B     		ldr	r3, .L26
 259 0002 1868     		ldr	r0, [r3]
 133:usb_lib/usb_regs.c **** }
 260              		.loc 1 133 0
 261 0004 80B2     		uxth	r0, r0
 262 0006 7047     		bx	lr
 263              	.L27:
 264              		.align	2
 265              	.L26:
 266 0008 505C0040 		.word	1073765456
 267              		.cfi_endproc
 268              	.LFE8:
 270              		.section	.text.SetENDPOINT,"ax",%progbits
 271              		.align	1
 272              		.global	SetENDPOINT
 273              		.syntax unified
 274              		.thumb
 275              		.thumb_func
 276              		.fpu softvfp
 278              	SetENDPOINT:
 279              	.LFB9:
 134:usb_lib/usb_regs.c **** 
 135:usb_lib/usb_regs.c **** /*******************************************************************************
 136:usb_lib/usb_regs.c **** * Function Name  : SetENDPOINT
 137:usb_lib/usb_regs.c **** * Description    : Setthe Endpoint register value.
 138:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 139:usb_lib/usb_regs.c **** *                  wRegValue.
 140:usb_lib/usb_regs.c **** * Output         : None.
 141:usb_lib/usb_regs.c **** * Return         : None.
 142:usb_lib/usb_regs.c **** *******************************************************************************/
 143:usb_lib/usb_regs.c **** void SetENDPOINT(u8 bEpNum, u16 wRegValue)
 144:usb_lib/usb_regs.c **** {
 280              		.loc 1 144 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              		@ link register save eliminated.
 285              	.LVL4:
 145:usb_lib/usb_regs.c ****   _SetENDPOINT(bEpNum, wRegValue);
 286              		.loc 1 145 0
 287 0000 8000     		lsls	r0, r0, #2
 288              	.LVL5:
 289 0002 00F18040 		add	r0, r0, #1073741824
 290 0006 00F5B840 		add	r0, r0, #23552
 291 000a 0160     		str	r1, [r0]
 146:usb_lib/usb_regs.c **** }
 292              		.loc 1 146 0
 293 000c 7047     		bx	lr
 294              		.cfi_endproc
 295              	.LFE9:
 297              		.section	.text.GetENDPOINT,"ax",%progbits
 298              		.align	1
 299              		.global	GetENDPOINT
 300              		.syntax unified
 301              		.thumb
 302              		.thumb_func
 303              		.fpu softvfp
 305              	GetENDPOINT:
 306              	.LFB10:
 147:usb_lib/usb_regs.c **** 
 148:usb_lib/usb_regs.c **** /*******************************************************************************
 149:usb_lib/usb_regs.c **** * Function Name  : GetENDPOINT
 150:usb_lib/usb_regs.c **** * Description    : Return the Endpoint register value.
 151:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 152:usb_lib/usb_regs.c **** * Output         : None.
 153:usb_lib/usb_regs.c **** * Return         : Endpoint register value.
 154:usb_lib/usb_regs.c **** *******************************************************************************/
 155:usb_lib/usb_regs.c **** u16 GetENDPOINT(u8 bEpNum)
 156:usb_lib/usb_regs.c **** {
 307              		.loc 1 156 0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 311              		@ link register save eliminated.
 312              	.LVL6:
 157:usb_lib/usb_regs.c ****   return(_GetENDPOINT(bEpNum));
 313              		.loc 1 157 0
 314 0000 8000     		lsls	r0, r0, #2
 315              	.LVL7:
 316 0002 00F18040 		add	r0, r0, #1073741824
 317 0006 00F5B840 		add	r0, r0, #23552
 318 000a 0068     		ldr	r0, [r0]
 158:usb_lib/usb_regs.c **** }
 319              		.loc 1 158 0
 320 000c 80B2     		uxth	r0, r0
 321 000e 7047     		bx	lr
 322              		.cfi_endproc
 323              	.LFE10:
 325              		.section	.text.SetEPType,"ax",%progbits
 326              		.align	1
 327              		.global	SetEPType
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 331              		.fpu softvfp
 333              	SetEPType:
 334              	.LFB11:
 159:usb_lib/usb_regs.c **** 
 160:usb_lib/usb_regs.c **** /*******************************************************************************
 161:usb_lib/usb_regs.c **** * Function Name  : SetEPType
 162:usb_lib/usb_regs.c **** * Description    : sets the type in the endpoint register.
 163:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 164:usb_lib/usb_regs.c **** *                  wType: type definition.
 165:usb_lib/usb_regs.c **** * Output         : None.
 166:usb_lib/usb_regs.c **** * Return         : None.
 167:usb_lib/usb_regs.c **** *******************************************************************************/
 168:usb_lib/usb_regs.c **** void SetEPType(u8 bEpNum, u16 wType)
 169:usb_lib/usb_regs.c **** {
 335              		.loc 1 169 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              		@ link register save eliminated.
 340              	.LVL8:
 170:usb_lib/usb_regs.c ****   _SetEPType(bEpNum, wType);
 341              		.loc 1 170 0
 342 0000 8000     		lsls	r0, r0, #2
 343              	.LVL9:
 344 0002 00F18040 		add	r0, r0, #1073741824
 345 0006 00F5B840 		add	r0, r0, #23552
 346 000a 0368     		ldr	r3, [r0]
 347 000c 23F4EC43 		bic	r3, r3, #30208
 348 0010 23F07003 		bic	r3, r3, #112
 349 0014 1943     		orrs	r1, r1, r3
 350              	.LVL10:
 351 0016 89B2     		uxth	r1, r1
 352 0018 0160     		str	r1, [r0]
 171:usb_lib/usb_regs.c **** }
 353              		.loc 1 171 0
 354 001a 7047     		bx	lr
 355              		.cfi_endproc
 356              	.LFE11:
 358              		.section	.text.GetEPType,"ax",%progbits
 359              		.align	1
 360              		.global	GetEPType
 361              		.syntax unified
 362              		.thumb
 363              		.thumb_func
 364              		.fpu softvfp
 366              	GetEPType:
 367              	.LFB12:
 172:usb_lib/usb_regs.c **** 
 173:usb_lib/usb_regs.c **** /*******************************************************************************
 174:usb_lib/usb_regs.c **** * Function Name  : GetEPType
 175:usb_lib/usb_regs.c **** * Description    : Returns the endpoint type.
 176:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 177:usb_lib/usb_regs.c **** * Output         : None.
 178:usb_lib/usb_regs.c **** * Return         : Endpoint Type
 179:usb_lib/usb_regs.c **** *******************************************************************************/
 180:usb_lib/usb_regs.c **** u16 GetEPType(u8 bEpNum)
 181:usb_lib/usb_regs.c **** {
 368              		.loc 1 181 0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372              		@ link register save eliminated.
 373              	.LVL11:
 182:usb_lib/usb_regs.c ****   return(_GetEPType(bEpNum));
 374              		.loc 1 182 0
 375 0000 8000     		lsls	r0, r0, #2
 376              	.LVL12:
 377 0002 00F18040 		add	r0, r0, #1073741824
 378 0006 00F5B840 		add	r0, r0, #23552
 379 000a 0068     		ldr	r0, [r0]
 183:usb_lib/usb_regs.c **** }
 380              		.loc 1 183 0
 381 000c 00F4C060 		and	r0, r0, #1536
 382 0010 7047     		bx	lr
 383              		.cfi_endproc
 384              	.LFE12:
 386              		.section	.text.SetEPTxStatus,"ax",%progbits
 387              		.align	1
 388              		.global	SetEPTxStatus
 389              		.syntax unified
 390              		.thumb
 391              		.thumb_func
 392              		.fpu softvfp
 394              	SetEPTxStatus:
 395              	.LFB13:
 184:usb_lib/usb_regs.c **** 
 185:usb_lib/usb_regs.c **** /*******************************************************************************
 186:usb_lib/usb_regs.c **** * Function Name  : SetEPTxStatus
 187:usb_lib/usb_regs.c **** * Description    : Set the status of Tx endpoint.
 188:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 189:usb_lib/usb_regs.c **** *                  wState: new state.
 190:usb_lib/usb_regs.c **** * Output         : None.
 191:usb_lib/usb_regs.c **** * Return         : None.
 192:usb_lib/usb_regs.c **** *******************************************************************************/
 193:usb_lib/usb_regs.c **** void SetEPTxStatus(u8 bEpNum, u16 wState)
 194:usb_lib/usb_regs.c **** {
 396              		.loc 1 194 0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 400              		@ link register save eliminated.
 401              	.LVL13:
 402              	.LBB4:
 195:usb_lib/usb_regs.c ****   _SetEPTxStatus(bEpNum, wState);
 403              		.loc 1 195 0
 404 0000 8000     		lsls	r0, r0, #2
 405              	.LVL14:
 406 0002 00F18040 		add	r0, r0, #1073741824
 407 0006 00F5B840 		add	r0, r0, #23552
 408 000a 0368     		ldr	r3, [r0]
 409 000c CA06     		lsls	r2, r1, #27
 410 000e 23F4E043 		bic	r3, r3, #28672
 411 0012 23F04003 		bic	r3, r3, #64
 412 0016 9BB2     		uxth	r3, r3
 413              	.LVL15:
 414 0018 48BF     		it	mi
 415 001a 83F01003 		eormi	r3, r3, #16
 416              	.LVL16:
 417 001e 8A06     		lsls	r2, r1, #26
 418 0020 48BF     		it	mi
 419 0022 83F02003 		eormi	r3, r3, #32
 420              	.LVL17:
 421 0026 0360     		str	r3, [r0]
 422              	.LBE4:
 196:usb_lib/usb_regs.c **** }
 423              		.loc 1 196 0
 424 0028 7047     		bx	lr
 425              		.cfi_endproc
 426              	.LFE13:
 428              		.section	.text.SetEPRxStatus,"ax",%progbits
 429              		.align	1
 430              		.global	SetEPRxStatus
 431              		.syntax unified
 432              		.thumb
 433              		.thumb_func
 434              		.fpu softvfp
 436              	SetEPRxStatus:
 437              	.LFB14:
 197:usb_lib/usb_regs.c **** 
 198:usb_lib/usb_regs.c **** /*******************************************************************************
 199:usb_lib/usb_regs.c **** * Function Name  : SetEPRxStatus
 200:usb_lib/usb_regs.c **** * Description    : Set the status of Rx endpoint.
 201:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 202:usb_lib/usb_regs.c **** *                  wState: new state.
 203:usb_lib/usb_regs.c **** * Output         : None.
 204:usb_lib/usb_regs.c **** * Return         : None.
 205:usb_lib/usb_regs.c **** *******************************************************************************/
 206:usb_lib/usb_regs.c **** void SetEPRxStatus(u8 bEpNum, u16 wState)
 207:usb_lib/usb_regs.c **** {
 438              		.loc 1 207 0
 439              		.cfi_startproc
 440              		@ args = 0, pretend = 0, frame = 0
 441              		@ frame_needed = 0, uses_anonymous_args = 0
 442              		@ link register save eliminated.
 443              	.LVL18:
 444              	.LBB5:
 208:usb_lib/usb_regs.c ****   _SetEPRxStatus(bEpNum, wState);
 445              		.loc 1 208 0
 446 0000 8000     		lsls	r0, r0, #2
 447              	.LVL19:
 448 0002 00F18040 		add	r0, r0, #1073741824
 449 0006 00F5B840 		add	r0, r0, #23552
 450 000a 0368     		ldr	r3, [r0]
 451 000c CA04     		lsls	r2, r1, #19
 452 000e 23F48043 		bic	r3, r3, #16384
 453 0012 23F07003 		bic	r3, r3, #112
 454 0016 9BB2     		uxth	r3, r3
 455              	.LVL20:
 456 0018 48BF     		it	mi
 457 001a 83F48053 		eormi	r3, r3, #4096
 458              	.LVL21:
 459 001e 8A04     		lsls	r2, r1, #18
 460 0020 48BF     		it	mi
 461 0022 83F40053 		eormi	r3, r3, #8192
 462              	.LVL22:
 463 0026 0360     		str	r3, [r0]
 464              	.LBE5:
 209:usb_lib/usb_regs.c **** }
 465              		.loc 1 209 0
 466 0028 7047     		bx	lr
 467              		.cfi_endproc
 468              	.LFE14:
 470              		.section	.text.SetDouBleBuffEPStall,"ax",%progbits
 471              		.align	1
 472              		.global	SetDouBleBuffEPStall
 473              		.syntax unified
 474              		.thumb
 475              		.thumb_func
 476              		.fpu softvfp
 478              	SetDouBleBuffEPStall:
 479              	.LFB15:
 210:usb_lib/usb_regs.c **** 
 211:usb_lib/usb_regs.c **** /*******************************************************************************
 212:usb_lib/usb_regs.c **** * Function Name  : SetDouBleBuffEPStall
 213:usb_lib/usb_regs.c **** * Description    : sets the status for Double Buffer Endpoint to STALL
 214:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 215:usb_lib/usb_regs.c **** *                  bDir: Endpoint direction.
 216:usb_lib/usb_regs.c **** * Output         : None.
 217:usb_lib/usb_regs.c **** * Return         : None.
 218:usb_lib/usb_regs.c **** *******************************************************************************/
 219:usb_lib/usb_regs.c **** void SetDouBleBuffEPStall(u8 bEpNum, u8 bDir)
 220:usb_lib/usb_regs.c **** {
 480              		.loc 1 220 0
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 0
 483              		@ frame_needed = 0, uses_anonymous_args = 0
 484              		@ link register save eliminated.
 485              	.LVL23:
 486              	.LBB6:
 487              	.LBB7:
 157:usb_lib/usb_regs.c **** }
 488              		.loc 1 157 0
 489 0000 8000     		lsls	r0, r0, #2
 490              	.LVL24:
 491 0002 00F18040 		add	r0, r0, #1073741824
 492 0006 00F5B840 		add	r0, r0, #23552
 493              	.LBE7:
 494              	.LBE6:
 221:usb_lib/usb_regs.c ****   u16 Endpoint_DTOG_Status;
 222:usb_lib/usb_regs.c ****   Endpoint_DTOG_Status = GetENDPOINT(bEpNum);
 223:usb_lib/usb_regs.c ****   if (bDir == EP_DBUF_OUT)
 495              		.loc 1 223 0
 496 000a 0129     		cmp	r1, #1
 497              	.LBB9:
 498              	.LBB8:
 157:usb_lib/usb_regs.c **** }
 499              		.loc 1 157 0
 500 000c 0368     		ldr	r3, [r0]
 501              	.LVL25:
 502              	.LBE8:
 503              	.LBE9:
 504              		.loc 1 223 0
 505 000e 05D1     		bne	.L51
 224:usb_lib/usb_regs.c ****   { /* OUT double buffered endpoint */
 225:usb_lib/usb_regs.c ****     _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPRX_DTOG1);
 506              		.loc 1 225 0
 507 0010 23F48053 		bic	r3, r3, #4096
 508              	.L53:
 226:usb_lib/usb_regs.c ****   }
 227:usb_lib/usb_regs.c ****   else if (bDir == EP_DBUF_IN)
 228:usb_lib/usb_regs.c ****   { /* IN double buffered endpoint */
 229:usb_lib/usb_regs.c ****     _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPTX_DTOG1);
 509              		.loc 1 229 0
 510 0014 1B04     		lsls	r3, r3, #16
 511 0016 1B0C     		lsrs	r3, r3, #16
 512 0018 0360     		str	r3, [r0]
 513              	.L50:
 230:usb_lib/usb_regs.c ****   }
 231:usb_lib/usb_regs.c **** }
 514              		.loc 1 231 0
 515 001a 7047     		bx	lr
 516              	.L51:
 227:usb_lib/usb_regs.c ****   { /* IN double buffered endpoint */
 517              		.loc 1 227 0
 518 001c 0229     		cmp	r1, #2
 519 001e FCD1     		bne	.L50
 229:usb_lib/usb_regs.c ****   }
 520              		.loc 1 229 0
 521 0020 23F01003 		bic	r3, r3, #16
 522 0024 F6E7     		b	.L53
 523              		.cfi_endproc
 524              	.LFE15:
 526              		.section	.text.GetEPTxStatus,"ax",%progbits
 527              		.align	1
 528              		.global	GetEPTxStatus
 529              		.syntax unified
 530              		.thumb
 531              		.thumb_func
 532              		.fpu softvfp
 534              	GetEPTxStatus:
 535              	.LFB16:
 232:usb_lib/usb_regs.c **** 
 233:usb_lib/usb_regs.c **** /*******************************************************************************
 234:usb_lib/usb_regs.c **** * Function Name  : GetEPTxStatus
 235:usb_lib/usb_regs.c **** * Description    : Returns the endpoint Tx status.
 236:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 237:usb_lib/usb_regs.c **** * Output         : None.
 238:usb_lib/usb_regs.c **** * Return         : Endpoint TX Status
 239:usb_lib/usb_regs.c **** *******************************************************************************/
 240:usb_lib/usb_regs.c **** u16 GetEPTxStatus(u8 bEpNum)
 241:usb_lib/usb_regs.c **** {
 536              		.loc 1 241 0
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 0
 539              		@ frame_needed = 0, uses_anonymous_args = 0
 540              		@ link register save eliminated.
 541              	.LVL26:
 242:usb_lib/usb_regs.c ****   return(_GetEPTxStatus(bEpNum));
 542              		.loc 1 242 0
 543 0000 8000     		lsls	r0, r0, #2
 544              	.LVL27:
 545 0002 00F18040 		add	r0, r0, #1073741824
 546 0006 00F5B840 		add	r0, r0, #23552
 547 000a 0068     		ldr	r0, [r0]
 243:usb_lib/usb_regs.c **** }
 548              		.loc 1 243 0
 549 000c 00F03000 		and	r0, r0, #48
 550 0010 7047     		bx	lr
 551              		.cfi_endproc
 552              	.LFE16:
 554              		.section	.text.GetEPRxStatus,"ax",%progbits
 555              		.align	1
 556              		.global	GetEPRxStatus
 557              		.syntax unified
 558              		.thumb
 559              		.thumb_func
 560              		.fpu softvfp
 562              	GetEPRxStatus:
 563              	.LFB17:
 244:usb_lib/usb_regs.c **** 
 245:usb_lib/usb_regs.c **** /*******************************************************************************
 246:usb_lib/usb_regs.c **** * Function Name  : GetEPRxStatus
 247:usb_lib/usb_regs.c **** * Description    : Returns the endpoint Rx status.
 248:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 249:usb_lib/usb_regs.c **** * Output         : None.
 250:usb_lib/usb_regs.c **** * Return         : Endpoint RX Status
 251:usb_lib/usb_regs.c **** *******************************************************************************/
 252:usb_lib/usb_regs.c **** u16 GetEPRxStatus(u8 bEpNum)
 253:usb_lib/usb_regs.c **** {
 564              		.loc 1 253 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 0
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568              		@ link register save eliminated.
 569              	.LVL28:
 254:usb_lib/usb_regs.c ****   return(_GetEPRxStatus(bEpNum));
 570              		.loc 1 254 0
 571 0000 8000     		lsls	r0, r0, #2
 572              	.LVL29:
 573 0002 00F18040 		add	r0, r0, #1073741824
 574 0006 00F5B840 		add	r0, r0, #23552
 575 000a 0068     		ldr	r0, [r0]
 255:usb_lib/usb_regs.c **** }
 576              		.loc 1 255 0
 577 000c 00F44050 		and	r0, r0, #12288
 578 0010 7047     		bx	lr
 579              		.cfi_endproc
 580              	.LFE17:
 582              		.section	.text.SetEPTxValid,"ax",%progbits
 583              		.align	1
 584              		.global	SetEPTxValid
 585              		.syntax unified
 586              		.thumb
 587              		.thumb_func
 588              		.fpu softvfp
 590              	SetEPTxValid:
 591              	.LFB18:
 256:usb_lib/usb_regs.c **** 
 257:usb_lib/usb_regs.c **** /*******************************************************************************
 258:usb_lib/usb_regs.c **** * Function Name  : SetEPTxValid
 259:usb_lib/usb_regs.c **** * Description    : Valid the endpoint Tx Status.
 260:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 261:usb_lib/usb_regs.c **** * Output         : None.
 262:usb_lib/usb_regs.c **** * Return         : None.
 263:usb_lib/usb_regs.c **** *******************************************************************************/
 264:usb_lib/usb_regs.c **** void SetEPTxValid(u8 bEpNum)
 265:usb_lib/usb_regs.c **** {
 592              		.loc 1 265 0
 593              		.cfi_startproc
 594              		@ args = 0, pretend = 0, frame = 0
 595              		@ frame_needed = 0, uses_anonymous_args = 0
 596              		@ link register save eliminated.
 597              	.LVL30:
 598              	.LBB10:
 266:usb_lib/usb_regs.c ****   _SetEPTxStatus(bEpNum, EP_TX_VALID);
 599              		.loc 1 266 0
 600 0000 8000     		lsls	r0, r0, #2
 601              	.LVL31:
 602 0002 00F18040 		add	r0, r0, #1073741824
 603 0006 00F5B840 		add	r0, r0, #23552
 604 000a 0368     		ldr	r3, [r0]
 605 000c 23F4E043 		bic	r3, r3, #28672
 606 0010 23F04003 		bic	r3, r3, #64
 607 0014 9BB2     		uxth	r3, r3
 608              	.LVL32:
 609 0016 83F03003 		eor	r3, r3, #48
 610              	.LVL33:
 611 001a 0360     		str	r3, [r0]
 612              	.LBE10:
 267:usb_lib/usb_regs.c **** }
 613              		.loc 1 267 0
 614 001c 7047     		bx	lr
 615              		.cfi_endproc
 616              	.LFE18:
 618              		.section	.text.SetEPRxValid,"ax",%progbits
 619              		.align	1
 620              		.global	SetEPRxValid
 621              		.syntax unified
 622              		.thumb
 623              		.thumb_func
 624              		.fpu softvfp
 626              	SetEPRxValid:
 627              	.LFB19:
 268:usb_lib/usb_regs.c **** 
 269:usb_lib/usb_regs.c **** /*******************************************************************************
 270:usb_lib/usb_regs.c **** * Function Name  : SetEPRxValid
 271:usb_lib/usb_regs.c **** * Description    : Valid the endpoint Rx Status.
 272:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 273:usb_lib/usb_regs.c **** * Output         : None.
 274:usb_lib/usb_regs.c **** * Return         : None.
 275:usb_lib/usb_regs.c **** *******************************************************************************/
 276:usb_lib/usb_regs.c **** void SetEPRxValid(u8 bEpNum)
 277:usb_lib/usb_regs.c **** {
 628              		.loc 1 277 0
 629              		.cfi_startproc
 630              		@ args = 0, pretend = 0, frame = 0
 631              		@ frame_needed = 0, uses_anonymous_args = 0
 632              		@ link register save eliminated.
 633              	.LVL34:
 634              	.LBB11:
 278:usb_lib/usb_regs.c ****   _SetEPRxStatus(bEpNum, EP_RX_VALID);
 635              		.loc 1 278 0
 636 0000 8000     		lsls	r0, r0, #2
 637              	.LVL35:
 638 0002 00F18040 		add	r0, r0, #1073741824
 639 0006 00F5B840 		add	r0, r0, #23552
 640 000a 0368     		ldr	r3, [r0]
 641 000c 23F48043 		bic	r3, r3, #16384
 642 0010 23F07003 		bic	r3, r3, #112
 643 0014 9BB2     		uxth	r3, r3
 644              	.LVL36:
 645 0016 83F44053 		eor	r3, r3, #12288
 646              	.LVL37:
 647 001a 0360     		str	r3, [r0]
 648              	.LBE11:
 279:usb_lib/usb_regs.c **** }
 649              		.loc 1 279 0
 650 001c 7047     		bx	lr
 651              		.cfi_endproc
 652              	.LFE19:
 654              		.section	.text.SetEP_KIND,"ax",%progbits
 655              		.align	1
 656              		.global	SetEP_KIND
 657              		.syntax unified
 658              		.thumb
 659              		.thumb_func
 660              		.fpu softvfp
 662              	SetEP_KIND:
 663              	.LFB20:
 280:usb_lib/usb_regs.c **** 
 281:usb_lib/usb_regs.c **** /*******************************************************************************
 282:usb_lib/usb_regs.c **** * Function Name  : SetEP_KIND
 283:usb_lib/usb_regs.c **** * Description    : Clear the EP_KIND bit.
 284:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 285:usb_lib/usb_regs.c **** * Output         : None.
 286:usb_lib/usb_regs.c **** * Return         : None.
 287:usb_lib/usb_regs.c **** *******************************************************************************/
 288:usb_lib/usb_regs.c **** void SetEP_KIND(u8 bEpNum)
 289:usb_lib/usb_regs.c **** {
 664              		.loc 1 289 0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 0
 667              		@ frame_needed = 0, uses_anonymous_args = 0
 668              		@ link register save eliminated.
 669              	.LVL38:
 290:usb_lib/usb_regs.c ****   _SetEP_KIND(bEpNum);
 670              		.loc 1 290 0
 671 0000 8000     		lsls	r0, r0, #2
 672              	.LVL39:
 673 0002 00F18040 		add	r0, r0, #1073741824
 674 0006 00F5B840 		add	r0, r0, #23552
 675 000a 0368     		ldr	r3, [r0]
 676 000c 23F4E043 		bic	r3, r3, #28672
 677 0010 23F07003 		bic	r3, r3, #112
 678 0014 43F48073 		orr	r3, r3, #256
 679 0018 9BB2     		uxth	r3, r3
 680 001a 0360     		str	r3, [r0]
 291:usb_lib/usb_regs.c **** }
 681              		.loc 1 291 0
 682 001c 7047     		bx	lr
 683              		.cfi_endproc
 684              	.LFE20:
 686              		.section	.text.ClearEP_KIND,"ax",%progbits
 687              		.align	1
 688              		.global	ClearEP_KIND
 689              		.syntax unified
 690              		.thumb
 691              		.thumb_func
 692              		.fpu softvfp
 694              	ClearEP_KIND:
 695              	.LFB21:
 292:usb_lib/usb_regs.c **** 
 293:usb_lib/usb_regs.c **** /*******************************************************************************
 294:usb_lib/usb_regs.c **** * Function Name  : ClearEP_KIND
 295:usb_lib/usb_regs.c **** * Description    : set the  EP_KIND bit.
 296:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 297:usb_lib/usb_regs.c **** * Output         : None.
 298:usb_lib/usb_regs.c **** * Return         : None.
 299:usb_lib/usb_regs.c **** *******************************************************************************/
 300:usb_lib/usb_regs.c **** void ClearEP_KIND(u8 bEpNum)
 301:usb_lib/usb_regs.c **** {
 696              		.loc 1 301 0
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 0
 699              		@ frame_needed = 0, uses_anonymous_args = 0
 700              		@ link register save eliminated.
 701              	.LVL40:
 302:usb_lib/usb_regs.c ****   _ClearEP_KIND(bEpNum);
 702              		.loc 1 302 0
 703 0000 8000     		lsls	r0, r0, #2
 704              	.LVL41:
 705 0002 00F18040 		add	r0, r0, #1073741824
 706 0006 00F5B840 		add	r0, r0, #23552
 707 000a 0368     		ldr	r3, [r0]
 708 000c 23F4E243 		bic	r3, r3, #28928
 709 0010 23F07003 		bic	r3, r3, #112
 710 0014 1B04     		lsls	r3, r3, #16
 711 0016 1B0C     		lsrs	r3, r3, #16
 712 0018 0360     		str	r3, [r0]
 303:usb_lib/usb_regs.c **** }
 713              		.loc 1 303 0
 714 001a 7047     		bx	lr
 715              		.cfi_endproc
 716              	.LFE21:
 718              		.section	.text.Clear_Status_Out,"ax",%progbits
 719              		.align	1
 720              		.global	Clear_Status_Out
 721              		.syntax unified
 722              		.thumb
 723              		.thumb_func
 724              		.fpu softvfp
 726              	Clear_Status_Out:
 727              	.LFB64:
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 0
 730              		@ frame_needed = 0, uses_anonymous_args = 0
 731              		@ link register save eliminated.
 732 0000 FFF7FEBF 		b	ClearEP_KIND
 733              		.cfi_endproc
 734              	.LFE64:
 736              		.section	.text.Set_Status_Out,"ax",%progbits
 737              		.align	1
 738              		.global	Set_Status_Out
 739              		.syntax unified
 740              		.thumb
 741              		.thumb_func
 742              		.fpu softvfp
 744              	Set_Status_Out:
 745              	.LFB60:
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 0
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749              		@ link register save eliminated.
 750 0000 FFF7FEBF 		b	SetEP_KIND
 751              		.cfi_endproc
 752              	.LFE60:
 754              		.section	.text.SetEPDoubleBuff,"ax",%progbits
 755              		.align	1
 756              		.global	SetEPDoubleBuff
 757              		.syntax unified
 758              		.thumb
 759              		.thumb_func
 760              		.fpu softvfp
 762              	SetEPDoubleBuff:
 763              	.LFB62:
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 0, uses_anonymous_args = 0
 767              		@ link register save eliminated.
 768 0000 FFF7FEBF 		b	SetEP_KIND
 769              		.cfi_endproc
 770              	.LFE62:
 772              		.section	.text.ClearEPDoubleBuff,"ax",%progbits
 773              		.align	1
 774              		.global	ClearEPDoubleBuff
 775              		.syntax unified
 776              		.thumb
 777              		.thumb_func
 778              		.fpu softvfp
 780              	ClearEPDoubleBuff:
 781              	.LFB66:
 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 0
 784              		@ frame_needed = 0, uses_anonymous_args = 0
 785              		@ link register save eliminated.
 786 0000 FFF7FEBF 		b	ClearEP_KIND
 787              		.cfi_endproc
 788              	.LFE66:
 790              		.section	.text.GetTxStallStatus,"ax",%progbits
 791              		.align	1
 792              		.global	GetTxStallStatus
 793              		.syntax unified
 794              		.thumb
 795              		.thumb_func
 796              		.fpu softvfp
 798              	GetTxStallStatus:
 799              	.LFB26:
 304:usb_lib/usb_regs.c **** /*******************************************************************************
 305:usb_lib/usb_regs.c **** * Function Name  : Clear_Status_Out
 306:usb_lib/usb_regs.c **** * Description    : Clear the Status Out of the related Endpoint
 307:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 308:usb_lib/usb_regs.c **** * Output         : None.
 309:usb_lib/usb_regs.c **** * Return         : None.
 310:usb_lib/usb_regs.c **** *******************************************************************************/
 311:usb_lib/usb_regs.c **** void Clear_Status_Out(u8 bEpNum)
 312:usb_lib/usb_regs.c **** {
 313:usb_lib/usb_regs.c ****   _ClearEP_KIND(bEpNum);
 314:usb_lib/usb_regs.c **** }
 315:usb_lib/usb_regs.c **** /*******************************************************************************
 316:usb_lib/usb_regs.c **** * Function Name  : Set_Status_Out
 317:usb_lib/usb_regs.c **** * Description    : Set the Status Out of the related Endpoint
 318:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 319:usb_lib/usb_regs.c **** * Output         : None.
 320:usb_lib/usb_regs.c **** * Return         : None.
 321:usb_lib/usb_regs.c **** *******************************************************************************/
 322:usb_lib/usb_regs.c **** void Set_Status_Out(u8 bEpNum)
 323:usb_lib/usb_regs.c **** {
 324:usb_lib/usb_regs.c ****   _SetEP_KIND(bEpNum);
 325:usb_lib/usb_regs.c **** }
 326:usb_lib/usb_regs.c **** /*******************************************************************************
 327:usb_lib/usb_regs.c **** * Function Name  : SetEPDoubleBuff
 328:usb_lib/usb_regs.c **** * Description    : Enable the double buffer feature for the endpoint.
 329:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 330:usb_lib/usb_regs.c **** * Output         : None.
 331:usb_lib/usb_regs.c **** * Return         : None.
 332:usb_lib/usb_regs.c **** *******************************************************************************/
 333:usb_lib/usb_regs.c **** void SetEPDoubleBuff(u8 bEpNum)
 334:usb_lib/usb_regs.c **** {
 335:usb_lib/usb_regs.c ****   _SetEP_KIND(bEpNum);
 336:usb_lib/usb_regs.c **** }
 337:usb_lib/usb_regs.c **** /*******************************************************************************
 338:usb_lib/usb_regs.c **** * Function Name  : ClearEPDoubleBuff
 339:usb_lib/usb_regs.c **** * Description    : Disable the double buffer feature for the endpoint.
 340:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 341:usb_lib/usb_regs.c **** * Output         : None.
 342:usb_lib/usb_regs.c **** * Return         : None.
 343:usb_lib/usb_regs.c **** *******************************************************************************/
 344:usb_lib/usb_regs.c **** void ClearEPDoubleBuff(u8 bEpNum)
 345:usb_lib/usb_regs.c **** {
 346:usb_lib/usb_regs.c ****   _ClearEP_KIND(bEpNum);
 347:usb_lib/usb_regs.c **** }
 348:usb_lib/usb_regs.c **** /*******************************************************************************
 349:usb_lib/usb_regs.c **** * Function Name  : GetTxStallStatus
 350:usb_lib/usb_regs.c **** * Description    : Returns the Stall status of the Tx endpoint.
 351:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 352:usb_lib/usb_regs.c **** * Output         : None.
 353:usb_lib/usb_regs.c **** * Return         : Tx Stall status.
 354:usb_lib/usb_regs.c **** *******************************************************************************/
 355:usb_lib/usb_regs.c **** u16 GetTxStallStatus(u8 bEpNum)
 356:usb_lib/usb_regs.c **** {
 800              		.loc 1 356 0
 801              		.cfi_startproc
 802              		@ args = 0, pretend = 0, frame = 0
 803              		@ frame_needed = 0, uses_anonymous_args = 0
 804              		@ link register save eliminated.
 805              	.LVL42:
 357:usb_lib/usb_regs.c ****   return(_GetTxStallStatus(bEpNum));
 806              		.loc 1 357 0
 807 0000 8000     		lsls	r0, r0, #2
 808              	.LVL43:
 809 0002 00F18040 		add	r0, r0, #1073741824
 810 0006 00F5B840 		add	r0, r0, #23552
 811 000a 0068     		ldr	r0, [r0]
 812 000c 00F03000 		and	r0, r0, #48
 358:usb_lib/usb_regs.c **** }
 813              		.loc 1 358 0
 814 0010 A0F11003 		sub	r3, r0, #16
 815 0014 5842     		rsbs	r0, r3, #0
 816 0016 5841     		adcs	r0, r0, r3
 817 0018 7047     		bx	lr
 818              		.cfi_endproc
 819              	.LFE26:
 821              		.section	.text.GetRxStallStatus,"ax",%progbits
 822              		.align	1
 823              		.global	GetRxStallStatus
 824              		.syntax unified
 825              		.thumb
 826              		.thumb_func
 827              		.fpu softvfp
 829              	GetRxStallStatus:
 830              	.LFB27:
 359:usb_lib/usb_regs.c **** /*******************************************************************************
 360:usb_lib/usb_regs.c **** * Function Name  : GetRxStallStatus
 361:usb_lib/usb_regs.c **** * Description    : Returns the Stall status of the Rx endpoint.
 362:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 363:usb_lib/usb_regs.c **** * Output         : None.
 364:usb_lib/usb_regs.c **** * Return         : Rx Stall status.
 365:usb_lib/usb_regs.c **** *******************************************************************************/
 366:usb_lib/usb_regs.c **** u16 GetRxStallStatus(u8 bEpNum)
 367:usb_lib/usb_regs.c **** {
 831              		.loc 1 367 0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 0
 834              		@ frame_needed = 0, uses_anonymous_args = 0
 835              		@ link register save eliminated.
 836              	.LVL44:
 368:usb_lib/usb_regs.c ****   return(_GetRxStallStatus(bEpNum));
 837              		.loc 1 368 0
 838 0000 8000     		lsls	r0, r0, #2
 839              	.LVL45:
 840 0002 00F18040 		add	r0, r0, #1073741824
 841 0006 00F5B840 		add	r0, r0, #23552
 842 000a 0068     		ldr	r0, [r0]
 843 000c 00F44050 		and	r0, r0, #12288
 369:usb_lib/usb_regs.c **** }
 844              		.loc 1 369 0
 845 0010 A0F58053 		sub	r3, r0, #4096
 846 0014 5842     		rsbs	r0, r3, #0
 847 0016 5841     		adcs	r0, r0, r3
 848 0018 7047     		bx	lr
 849              		.cfi_endproc
 850              	.LFE27:
 852              		.section	.text.ClearEP_CTR_RX,"ax",%progbits
 853              		.align	1
 854              		.global	ClearEP_CTR_RX
 855              		.syntax unified
 856              		.thumb
 857              		.thumb_func
 858              		.fpu softvfp
 860              	ClearEP_CTR_RX:
 861              	.LFB28:
 370:usb_lib/usb_regs.c **** /*******************************************************************************
 371:usb_lib/usb_regs.c **** * Function Name  : ClearEP_CTR_RX
 372:usb_lib/usb_regs.c **** * Description    : Clear the CTR_RX bit.
 373:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 374:usb_lib/usb_regs.c **** * Output         : None.
 375:usb_lib/usb_regs.c **** * Return         : None.
 376:usb_lib/usb_regs.c **** *******************************************************************************/
 377:usb_lib/usb_regs.c **** void ClearEP_CTR_RX(u8 bEpNum)
 378:usb_lib/usb_regs.c **** {
 862              		.loc 1 378 0
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 0
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 866              		@ link register save eliminated.
 867              	.LVL46:
 379:usb_lib/usb_regs.c ****   _ClearEP_CTR_RX(bEpNum);
 868              		.loc 1 379 0
 869 0000 8000     		lsls	r0, r0, #2
 870              	.LVL47:
 871 0002 00F18040 		add	r0, r0, #1073741824
 872 0006 00F5B840 		add	r0, r0, #23552
 873 000a 0368     		ldr	r3, [r0]
 874 000c 23F07003 		bic	r3, r3, #112
 875 0010 1B05     		lsls	r3, r3, #20
 876 0012 1B0D     		lsrs	r3, r3, #20
 877 0014 0360     		str	r3, [r0]
 380:usb_lib/usb_regs.c **** }
 878              		.loc 1 380 0
 879 0016 7047     		bx	lr
 880              		.cfi_endproc
 881              	.LFE28:
 883              		.section	.text.ClearEP_CTR_TX,"ax",%progbits
 884              		.align	1
 885              		.global	ClearEP_CTR_TX
 886              		.syntax unified
 887              		.thumb
 888              		.thumb_func
 889              		.fpu softvfp
 891              	ClearEP_CTR_TX:
 892              	.LFB29:
 381:usb_lib/usb_regs.c **** /*******************************************************************************
 382:usb_lib/usb_regs.c **** * Function Name  : ClearEP_CTR_TX
 383:usb_lib/usb_regs.c **** * Description    : Clear the CTR_TX bit.
 384:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 385:usb_lib/usb_regs.c **** * Output         : None.
 386:usb_lib/usb_regs.c **** * Return         : None.
 387:usb_lib/usb_regs.c **** *******************************************************************************/
 388:usb_lib/usb_regs.c **** void ClearEP_CTR_TX(u8 bEpNum)
 389:usb_lib/usb_regs.c **** {
 893              		.loc 1 389 0
 894              		.cfi_startproc
 895              		@ args = 0, pretend = 0, frame = 0
 896              		@ frame_needed = 0, uses_anonymous_args = 0
 897              		@ link register save eliminated.
 898              	.LVL48:
 390:usb_lib/usb_regs.c ****   _ClearEP_CTR_TX(bEpNum);
 899              		.loc 1 390 0
 900 0000 8000     		lsls	r0, r0, #2
 901              	.LVL49:
 902 0002 00F18040 		add	r0, r0, #1073741824
 903 0006 00F5B840 		add	r0, r0, #23552
 904 000a 0368     		ldr	r3, [r0]
 905 000c 23F4E143 		bic	r3, r3, #28800
 906 0010 23F07003 		bic	r3, r3, #112
 907 0014 1B04     		lsls	r3, r3, #16
 908 0016 1B0C     		lsrs	r3, r3, #16
 909 0018 0360     		str	r3, [r0]
 391:usb_lib/usb_regs.c **** }
 910              		.loc 1 391 0
 911 001a 7047     		bx	lr
 912              		.cfi_endproc
 913              	.LFE29:
 915              		.section	.text.ToggleDTOG_RX,"ax",%progbits
 916              		.align	1
 917              		.global	ToggleDTOG_RX
 918              		.syntax unified
 919              		.thumb
 920              		.thumb_func
 921              		.fpu softvfp
 923              	ToggleDTOG_RX:
 924              	.LFB30:
 392:usb_lib/usb_regs.c **** /*******************************************************************************
 393:usb_lib/usb_regs.c **** * Function Name  : ToggleDTOG_RX
 394:usb_lib/usb_regs.c **** * Description    : Toggle the DTOG_RX bit.
 395:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 396:usb_lib/usb_regs.c **** * Output         : None.
 397:usb_lib/usb_regs.c **** * Return         : None.
 398:usb_lib/usb_regs.c **** *******************************************************************************/
 399:usb_lib/usb_regs.c **** void ToggleDTOG_RX(u8 bEpNum)
 400:usb_lib/usb_regs.c **** {
 925              		.loc 1 400 0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              		@ link register save eliminated.
 930              	.LVL50:
 401:usb_lib/usb_regs.c ****   _ToggleDTOG_RX(bEpNum);
 931              		.loc 1 401 0
 932 0000 8000     		lsls	r0, r0, #2
 933              	.LVL51:
 934 0002 00F18040 		add	r0, r0, #1073741824
 935 0006 00F5B840 		add	r0, r0, #23552
 936 000a 0368     		ldr	r3, [r0]
 937 000c 23F4E043 		bic	r3, r3, #28672
 938 0010 23F07003 		bic	r3, r3, #112
 939 0014 1B04     		lsls	r3, r3, #16
 940 0016 1B0C     		lsrs	r3, r3, #16
 941 0018 43F48043 		orr	r3, r3, #16384
 942 001c 0360     		str	r3, [r0]
 402:usb_lib/usb_regs.c **** }
 943              		.loc 1 402 0
 944 001e 7047     		bx	lr
 945              		.cfi_endproc
 946              	.LFE30:
 948              		.section	.text.ToggleDTOG_TX,"ax",%progbits
 949              		.align	1
 950              		.global	ToggleDTOG_TX
 951              		.syntax unified
 952              		.thumb
 953              		.thumb_func
 954              		.fpu softvfp
 956              	ToggleDTOG_TX:
 957              	.LFB31:
 403:usb_lib/usb_regs.c **** /*******************************************************************************
 404:usb_lib/usb_regs.c **** * Function Name  : ToggleDTOG_TX
 405:usb_lib/usb_regs.c **** * Description    : Toggle the DTOG_TX bit.
 406:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 407:usb_lib/usb_regs.c **** * Output         : None.
 408:usb_lib/usb_regs.c **** * Return         : None.
 409:usb_lib/usb_regs.c **** *******************************************************************************/
 410:usb_lib/usb_regs.c **** void ToggleDTOG_TX(u8 bEpNum)
 411:usb_lib/usb_regs.c **** {
 958              		.loc 1 411 0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 0
 961              		@ frame_needed = 0, uses_anonymous_args = 0
 962              		@ link register save eliminated.
 963              	.LVL52:
 412:usb_lib/usb_regs.c ****   _ToggleDTOG_TX(bEpNum);
 964              		.loc 1 412 0
 965 0000 8000     		lsls	r0, r0, #2
 966              	.LVL53:
 967 0002 00F18040 		add	r0, r0, #1073741824
 968 0006 00F5B840 		add	r0, r0, #23552
 969 000a 0368     		ldr	r3, [r0]
 970 000c 23F4E043 		bic	r3, r3, #28672
 971 0010 23F07003 		bic	r3, r3, #112
 972 0014 1B04     		lsls	r3, r3, #16
 973 0016 1B0C     		lsrs	r3, r3, #16
 974 0018 43F04003 		orr	r3, r3, #64
 975 001c 0360     		str	r3, [r0]
 413:usb_lib/usb_regs.c **** }
 976              		.loc 1 413 0
 977 001e 7047     		bx	lr
 978              		.cfi_endproc
 979              	.LFE31:
 981              		.section	.text.ClearDTOG_RX,"ax",%progbits
 982              		.align	1
 983              		.global	ClearDTOG_RX
 984              		.syntax unified
 985              		.thumb
 986              		.thumb_func
 987              		.fpu softvfp
 989              	ClearDTOG_RX:
 990              	.LFB32:
 414:usb_lib/usb_regs.c **** /*******************************************************************************
 415:usb_lib/usb_regs.c **** * Function Name  : ClearDTOG_RX.
 416:usb_lib/usb_regs.c **** * Description    : Clear the DTOG_RX bit.
 417:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 418:usb_lib/usb_regs.c **** * Output         : None.
 419:usb_lib/usb_regs.c **** * Return         : None.
 420:usb_lib/usb_regs.c **** *******************************************************************************/
 421:usb_lib/usb_regs.c **** void ClearDTOG_RX(u8 bEpNum)
 422:usb_lib/usb_regs.c **** {
 991              		.loc 1 422 0
 992              		.cfi_startproc
 993              		@ args = 0, pretend = 0, frame = 0
 994              		@ frame_needed = 0, uses_anonymous_args = 0
 995              		@ link register save eliminated.
 996              	.LVL54:
 423:usb_lib/usb_regs.c ****   _ClearDTOG_RX(bEpNum);
 997              		.loc 1 423 0
 998 0000 8000     		lsls	r0, r0, #2
 999              	.LVL55:
 1000 0002 00F18040 		add	r0, r0, #1073741824
 1001 0006 00F5B840 		add	r0, r0, #23552
 1002 000a 0368     		ldr	r3, [r0]
 1003 000c 5B04     		lsls	r3, r3, #17
 1004 000e 09D5     		bpl	.L70
 1005              		.loc 1 423 0 is_stmt 0 discriminator 1
 1006 0010 0368     		ldr	r3, [r0]
 1007 0012 23F4E043 		bic	r3, r3, #28672
 1008 0016 23F07003 		bic	r3, r3, #112
 1009 001a 1B04     		lsls	r3, r3, #16
 1010 001c 1B0C     		lsrs	r3, r3, #16
 1011 001e 43F48043 		orr	r3, r3, #16384
 1012 0022 0360     		str	r3, [r0]
 1013              	.L70:
 424:usb_lib/usb_regs.c **** }
 1014              		.loc 1 424 0 is_stmt 1
 1015 0024 7047     		bx	lr
 1016              		.cfi_endproc
 1017              	.LFE32:
 1019              		.section	.text.ClearDTOG_TX,"ax",%progbits
 1020              		.align	1
 1021              		.global	ClearDTOG_TX
 1022              		.syntax unified
 1023              		.thumb
 1024              		.thumb_func
 1025              		.fpu softvfp
 1027              	ClearDTOG_TX:
 1028              	.LFB33:
 425:usb_lib/usb_regs.c **** /*******************************************************************************
 426:usb_lib/usb_regs.c **** * Function Name  : ClearDTOG_TX.
 427:usb_lib/usb_regs.c **** * Description    : Clear the DTOG_TX bit.
 428:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 429:usb_lib/usb_regs.c **** * Output         : None.
 430:usb_lib/usb_regs.c **** * Return         : None.
 431:usb_lib/usb_regs.c **** *******************************************************************************/
 432:usb_lib/usb_regs.c **** void ClearDTOG_TX(u8 bEpNum)
 433:usb_lib/usb_regs.c **** {
 1029              		.loc 1 433 0
 1030              		.cfi_startproc
 1031              		@ args = 0, pretend = 0, frame = 0
 1032              		@ frame_needed = 0, uses_anonymous_args = 0
 1033              		@ link register save eliminated.
 1034              	.LVL56:
 434:usb_lib/usb_regs.c ****   _ClearDTOG_TX(bEpNum);
 1035              		.loc 1 434 0
 1036 0000 8000     		lsls	r0, r0, #2
 1037              	.LVL57:
 1038 0002 00F18040 		add	r0, r0, #1073741824
 1039 0006 00F5B840 		add	r0, r0, #23552
 1040 000a 0368     		ldr	r3, [r0]
 1041 000c 5B06     		lsls	r3, r3, #25
 1042 000e 09D5     		bpl	.L75
 1043              		.loc 1 434 0 is_stmt 0 discriminator 1
 1044 0010 0368     		ldr	r3, [r0]
 1045 0012 23F4E043 		bic	r3, r3, #28672
 1046 0016 23F07003 		bic	r3, r3, #112
 1047 001a 1B04     		lsls	r3, r3, #16
 1048 001c 1B0C     		lsrs	r3, r3, #16
 1049 001e 43F04003 		orr	r3, r3, #64
 1050 0022 0360     		str	r3, [r0]
 1051              	.L75:
 435:usb_lib/usb_regs.c **** }
 1052              		.loc 1 435 0 is_stmt 1
 1053 0024 7047     		bx	lr
 1054              		.cfi_endproc
 1055              	.LFE33:
 1057              		.section	.text.SetEPAddress,"ax",%progbits
 1058              		.align	1
 1059              		.global	SetEPAddress
 1060              		.syntax unified
 1061              		.thumb
 1062              		.thumb_func
 1063              		.fpu softvfp
 1065              	SetEPAddress:
 1066              	.LFB34:
 436:usb_lib/usb_regs.c **** /*******************************************************************************
 437:usb_lib/usb_regs.c **** * Function Name  : SetEPAddress
 438:usb_lib/usb_regs.c **** * Description    : Set the endpoint address.
 439:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 440:usb_lib/usb_regs.c **** *                  bAddr: New endpoint address.
 441:usb_lib/usb_regs.c **** * Output         : None.
 442:usb_lib/usb_regs.c **** * Return         : None.
 443:usb_lib/usb_regs.c **** *******************************************************************************/
 444:usb_lib/usb_regs.c **** void SetEPAddress(u8 bEpNum, u8 bAddr)
 445:usb_lib/usb_regs.c **** {
 1067              		.loc 1 445 0
 1068              		.cfi_startproc
 1069              		@ args = 0, pretend = 0, frame = 0
 1070              		@ frame_needed = 0, uses_anonymous_args = 0
 1071              		@ link register save eliminated.
 1072              	.LVL58:
 446:usb_lib/usb_regs.c ****   _SetEPAddress(bEpNum, bAddr);
 1073              		.loc 1 446 0
 1074 0000 8000     		lsls	r0, r0, #2
 1075              	.LVL59:
 1076 0002 00F18040 		add	r0, r0, #1073741824
 1077 0006 00F5B840 		add	r0, r0, #23552
 1078 000a 0368     		ldr	r3, [r0]
 1079 000c 23F4E043 		bic	r3, r3, #28672
 1080 0010 23F07003 		bic	r3, r3, #112
 1081 0014 1B04     		lsls	r3, r3, #16
 1082 0016 1B0C     		lsrs	r3, r3, #16
 1083 0018 1943     		orrs	r1, r1, r3
 1084              	.LVL60:
 1085 001a 0160     		str	r1, [r0]
 447:usb_lib/usb_regs.c **** }
 1086              		.loc 1 447 0
 1087 001c 7047     		bx	lr
 1088              		.cfi_endproc
 1089              	.LFE34:
 1091              		.section	.text.GetEPAddress,"ax",%progbits
 1092              		.align	1
 1093              		.global	GetEPAddress
 1094              		.syntax unified
 1095              		.thumb
 1096              		.thumb_func
 1097              		.fpu softvfp
 1099              	GetEPAddress:
 1100              	.LFB35:
 448:usb_lib/usb_regs.c **** /*******************************************************************************
 449:usb_lib/usb_regs.c **** * Function Name  : GetEPAddress
 450:usb_lib/usb_regs.c **** * Description    : Get the endpoint address.
 451:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 452:usb_lib/usb_regs.c **** * Output         : None.
 453:usb_lib/usb_regs.c **** * Return         : Endpoint address.
 454:usb_lib/usb_regs.c **** *******************************************************************************/
 455:usb_lib/usb_regs.c **** u8 GetEPAddress(u8 bEpNum)
 456:usb_lib/usb_regs.c **** {
 1101              		.loc 1 456 0
 1102              		.cfi_startproc
 1103              		@ args = 0, pretend = 0, frame = 0
 1104              		@ frame_needed = 0, uses_anonymous_args = 0
 1105              		@ link register save eliminated.
 1106              	.LVL61:
 457:usb_lib/usb_regs.c ****   return(_GetEPAddress(bEpNum));
 1107              		.loc 1 457 0
 1108 0000 8000     		lsls	r0, r0, #2
 1109              	.LVL62:
 1110 0002 00F18040 		add	r0, r0, #1073741824
 1111 0006 00F5B840 		add	r0, r0, #23552
 1112 000a 0068     		ldr	r0, [r0]
 458:usb_lib/usb_regs.c **** }
 1113              		.loc 1 458 0
 1114 000c 00F00F00 		and	r0, r0, #15
 1115 0010 7047     		bx	lr
 1116              		.cfi_endproc
 1117              	.LFE35:
 1119              		.section	.text.SetEPTxAddr,"ax",%progbits
 1120              		.align	1
 1121              		.global	SetEPTxAddr
 1122              		.syntax unified
 1123              		.thumb
 1124              		.thumb_func
 1125              		.fpu softvfp
 1127              	SetEPTxAddr:
 1128              	.LFB36:
 459:usb_lib/usb_regs.c **** /*******************************************************************************
 460:usb_lib/usb_regs.c **** * Function Name  : SetEPTxAddr
 461:usb_lib/usb_regs.c **** * Description    : Set the endpoint Tx buffer address.
 462:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 463:usb_lib/usb_regs.c **** *                  wAddr: new address.
 464:usb_lib/usb_regs.c **** * Output         : None.
 465:usb_lib/usb_regs.c **** * Return         : None.
 466:usb_lib/usb_regs.c **** *******************************************************************************/
 467:usb_lib/usb_regs.c **** void SetEPTxAddr(u8 bEpNum, u16 wAddr)
 468:usb_lib/usb_regs.c **** {
 1129              		.loc 1 468 0
 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 0
 1132              		@ frame_needed = 0, uses_anonymous_args = 0
 1133              		@ link register save eliminated.
 1134              	.LVL63:
 469:usb_lib/usb_regs.c ****   _SetEPTxAddr(bEpNum, wAddr);
 1135              		.loc 1 469 0
 1136 0000 064B     		ldr	r3, .L83
 1137 0002 4908     		lsrs	r1, r1, #1
 1138              	.LVL64:
 1139 0004 1B68     		ldr	r3, [r3]
 1140 0006 4900     		lsls	r1, r1, #1
 1141 0008 9BB2     		uxth	r3, r3
 1142 000a 03EBC000 		add	r0, r3, r0, lsl #3
 1143              	.LVL65:
 1144 000e 00F10050 		add	r0, r0, #536870912
 1145 0012 00F54050 		add	r0, r0, #12288
 1146 0016 4000     		lsls	r0, r0, #1
 1147 0018 0160     		str	r1, [r0]
 470:usb_lib/usb_regs.c **** }
 1148              		.loc 1 470 0
 1149 001a 7047     		bx	lr
 1150              	.L84:
 1151              		.align	2
 1152              	.L83:
 1153 001c 505C0040 		.word	1073765456
 1154              		.cfi_endproc
 1155              	.LFE36:
 1157              		.section	.text.SetEPRxAddr,"ax",%progbits
 1158              		.align	1
 1159              		.global	SetEPRxAddr
 1160              		.syntax unified
 1161              		.thumb
 1162              		.thumb_func
 1163              		.fpu softvfp
 1165              	SetEPRxAddr:
 1166              	.LFB37:
 471:usb_lib/usb_regs.c **** /*******************************************************************************
 472:usb_lib/usb_regs.c **** * Function Name  : SetEPRxAddr
 473:usb_lib/usb_regs.c **** * Description    : Set the endpoint Rx buffer address.
 474:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 475:usb_lib/usb_regs.c **** *                  wAddr: new address.
 476:usb_lib/usb_regs.c **** * Output         : None.
 477:usb_lib/usb_regs.c **** * Return         : None.
 478:usb_lib/usb_regs.c **** *******************************************************************************/
 479:usb_lib/usb_regs.c **** void SetEPRxAddr(u8 bEpNum, u16 wAddr)
 480:usb_lib/usb_regs.c **** {
 1167              		.loc 1 480 0
 1168              		.cfi_startproc
 1169              		@ args = 0, pretend = 0, frame = 0
 1170              		@ frame_needed = 0, uses_anonymous_args = 0
 1171              		@ link register save eliminated.
 1172              	.LVL66:
 481:usb_lib/usb_regs.c ****   _SetEPRxAddr(bEpNum, wAddr);
 1173              		.loc 1 481 0
 1174 0000 054B     		ldr	r3, .L86
 1175 0002 4908     		lsrs	r1, r1, #1
 1176              	.LVL67:
 1177 0004 1B68     		ldr	r3, [r3]
 1178 0006 4900     		lsls	r1, r1, #1
 1179 0008 9BB2     		uxth	r3, r3
 1180 000a 03EBC000 		add	r0, r3, r0, lsl #3
 1181              	.LVL68:
 1182 000e 034B     		ldr	r3, .L86+4
 1183 0010 0344     		add	r3, r3, r0
 1184 0012 5B00     		lsls	r3, r3, #1
 1185 0014 1960     		str	r1, [r3]
 482:usb_lib/usb_regs.c **** }
 1186              		.loc 1 482 0
 1187 0016 7047     		bx	lr
 1188              	.L87:
 1189              		.align	2
 1190              	.L86:
 1191 0018 505C0040 		.word	1073765456
 1192 001c 04300020 		.word	536883204
 1193              		.cfi_endproc
 1194              	.LFE37:
 1196              		.section	.text.GetEPTxAddr,"ax",%progbits
 1197              		.align	1
 1198              		.global	GetEPTxAddr
 1199              		.syntax unified
 1200              		.thumb
 1201              		.thumb_func
 1202              		.fpu softvfp
 1204              	GetEPTxAddr:
 1205              	.LFB38:
 483:usb_lib/usb_regs.c **** /*******************************************************************************
 484:usb_lib/usb_regs.c **** * Function Name  : GetEPTxAddr
 485:usb_lib/usb_regs.c **** * Description    : Returns the endpoint Tx buffer address.
 486:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 487:usb_lib/usb_regs.c **** * Output         : None.
 488:usb_lib/usb_regs.c **** * Return         : Rx buffer address.
 489:usb_lib/usb_regs.c **** *******************************************************************************/
 490:usb_lib/usb_regs.c **** u16 GetEPTxAddr(u8 bEpNum)
 491:usb_lib/usb_regs.c **** {
 1206              		.loc 1 491 0
 1207              		.cfi_startproc
 1208              		@ args = 0, pretend = 0, frame = 0
 1209              		@ frame_needed = 0, uses_anonymous_args = 0
 1210              		@ link register save eliminated.
 1211              	.LVL69:
 492:usb_lib/usb_regs.c ****   return(_GetEPTxAddr(bEpNum));
 1212              		.loc 1 492 0
 1213 0000 054B     		ldr	r3, .L89
 1214 0002 1B68     		ldr	r3, [r3]
 1215 0004 9BB2     		uxth	r3, r3
 1216 0006 03EBC000 		add	r0, r3, r0, lsl #3
 1217              	.LVL70:
 1218 000a 00F10050 		add	r0, r0, #536870912
 1219 000e 00F54050 		add	r0, r0, #12288
 1220 0012 4000     		lsls	r0, r0, #1
 493:usb_lib/usb_regs.c **** }
 1221              		.loc 1 493 0
 1222 0014 0088     		ldrh	r0, [r0]
 1223 0016 7047     		bx	lr
 1224              	.L90:
 1225              		.align	2
 1226              	.L89:
 1227 0018 505C0040 		.word	1073765456
 1228              		.cfi_endproc
 1229              	.LFE38:
 1231              		.section	.text.GetEPRxAddr,"ax",%progbits
 1232              		.align	1
 1233              		.global	GetEPRxAddr
 1234              		.syntax unified
 1235              		.thumb
 1236              		.thumb_func
 1237              		.fpu softvfp
 1239              	GetEPRxAddr:
 1240              	.LFB39:
 494:usb_lib/usb_regs.c **** /*******************************************************************************
 495:usb_lib/usb_regs.c **** * Function Name  : GetEPRxAddr.
 496:usb_lib/usb_regs.c **** * Description    : Returns the endpoint Rx buffer address.
 497:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 498:usb_lib/usb_regs.c **** * Output         : None.
 499:usb_lib/usb_regs.c **** * Return         : Rx buffer address.
 500:usb_lib/usb_regs.c **** *******************************************************************************/
 501:usb_lib/usb_regs.c **** u16 GetEPRxAddr(u8 bEpNum)
 502:usb_lib/usb_regs.c **** {
 1241              		.loc 1 502 0
 1242              		.cfi_startproc
 1243              		@ args = 0, pretend = 0, frame = 0
 1244              		@ frame_needed = 0, uses_anonymous_args = 0
 1245              		@ link register save eliminated.
 1246              	.LVL71:
 503:usb_lib/usb_regs.c ****   return(_GetEPRxAddr(bEpNum));
 1247              		.loc 1 503 0
 1248 0000 044B     		ldr	r3, .L92
 1249 0002 1B68     		ldr	r3, [r3]
 1250 0004 9BB2     		uxth	r3, r3
 1251 0006 03EBC000 		add	r0, r3, r0, lsl #3
 1252              	.LVL72:
 1253 000a 034B     		ldr	r3, .L92+4
 1254 000c 0344     		add	r3, r3, r0
 1255 000e 5B00     		lsls	r3, r3, #1
 504:usb_lib/usb_regs.c **** }
 1256              		.loc 1 504 0
 1257 0010 1888     		ldrh	r0, [r3]
 1258 0012 7047     		bx	lr
 1259              	.L93:
 1260              		.align	2
 1261              	.L92:
 1262 0014 505C0040 		.word	1073765456
 1263 0018 04300020 		.word	536883204
 1264              		.cfi_endproc
 1265              	.LFE39:
 1267              		.section	.text.SetEPTxCount,"ax",%progbits
 1268              		.align	1
 1269              		.global	SetEPTxCount
 1270              		.syntax unified
 1271              		.thumb
 1272              		.thumb_func
 1273              		.fpu softvfp
 1275              	SetEPTxCount:
 1276              	.LFB40:
 505:usb_lib/usb_regs.c **** /*******************************************************************************
 506:usb_lib/usb_regs.c **** * Function Name  : SetEPTxCount.
 507:usb_lib/usb_regs.c **** * Description    : Set the Tx count.
 508:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 509:usb_lib/usb_regs.c **** *                  wCount: new count value.
 510:usb_lib/usb_regs.c **** * Output         : None.
 511:usb_lib/usb_regs.c **** * Return         : None.
 512:usb_lib/usb_regs.c **** *******************************************************************************/
 513:usb_lib/usb_regs.c **** void SetEPTxCount(u8 bEpNum, u16 wCount)
 514:usb_lib/usb_regs.c **** {
 1277              		.loc 1 514 0
 1278              		.cfi_startproc
 1279              		@ args = 0, pretend = 0, frame = 0
 1280              		@ frame_needed = 0, uses_anonymous_args = 0
 1281              		@ link register save eliminated.
 1282              	.LVL73:
 515:usb_lib/usb_regs.c ****   _SetEPTxCount(bEpNum, wCount);
 1283              		.loc 1 515 0
 1284 0000 044B     		ldr	r3, .L95
 1285 0002 1B68     		ldr	r3, [r3]
 1286 0004 9BB2     		uxth	r3, r3
 1287 0006 03EBC000 		add	r0, r3, r0, lsl #3
 1288              	.LVL74:
 1289 000a 034B     		ldr	r3, .L95+4
 1290 000c 0344     		add	r3, r3, r0
 1291 000e 5B00     		lsls	r3, r3, #1
 1292 0010 1960     		str	r1, [r3]
 516:usb_lib/usb_regs.c **** }
 1293              		.loc 1 516 0
 1294 0012 7047     		bx	lr
 1295              	.L96:
 1296              		.align	2
 1297              	.L95:
 1298 0014 505C0040 		.word	1073765456
 1299 0018 02300020 		.word	536883202
 1300              		.cfi_endproc
 1301              	.LFE40:
 1303              		.section	.text.SetEPCountRxReg,"ax",%progbits
 1304              		.align	1
 1305              		.global	SetEPCountRxReg
 1306              		.syntax unified
 1307              		.thumb
 1308              		.thumb_func
 1309              		.fpu softvfp
 1311              	SetEPCountRxReg:
 1312              	.LFB41:
 517:usb_lib/usb_regs.c **** /*******************************************************************************
 518:usb_lib/usb_regs.c **** * Function Name  : SetEPCountRxReg.
 519:usb_lib/usb_regs.c **** * Description    : Set the Count Rx Register value.
 520:usb_lib/usb_regs.c **** * Input          : *pdwReg: point to the register.
 521:usb_lib/usb_regs.c **** *                  wCount: the new register value.
 522:usb_lib/usb_regs.c **** * Output         : None.
 523:usb_lib/usb_regs.c **** * Return         : None.
 524:usb_lib/usb_regs.c **** *******************************************************************************/
 525:usb_lib/usb_regs.c **** void SetEPCountRxReg(u32 *pdwReg, u16 wCount)
 526:usb_lib/usb_regs.c **** {
 1313              		.loc 1 526 0
 1314              		.cfi_startproc
 1315              		@ args = 0, pretend = 0, frame = 0
 1316              		@ frame_needed = 0, uses_anonymous_args = 0
 1317              		@ link register save eliminated.
 1318              	.LVL75:
 1319              	.LBB12:
 527:usb_lib/usb_regs.c ****   _SetEPCountRxReg(dwReg, wCount);
 1320              		.loc 1 527 0
 1321 0000 3E29     		cmp	r1, #62
 1322 0002 0AD9     		bls	.L98
 1323              		.loc 1 527 0 is_stmt 0 discriminator 1
 1324 0004 4B09     		lsrs	r3, r1, #5
 1325              	.LVL76:
 1326 0006 C906     		lsls	r1, r1, #27
 1327              	.LVL77:
 1328 0008 04BF     		itt	eq
 1329 000a 03F1FF33 		addeq	r3, r3, #-1
 1330              	.LVL78:
 1331 000e 9BB2     		uxtheq	r3, r3
 1332              	.LVL79:
 1333 0010 9B02     		lsls	r3, r3, #10
 1334              	.LVL80:
 1335 0012 43F40043 		orr	r3, r3, #32768
 1336              	.L105:
 1337              		.loc 1 527 0 discriminator 8
 1338 0016 0360     		str	r3, [r0]
 1339              	.LBE12:
 528:usb_lib/usb_regs.c **** }
 1340              		.loc 1 528 0 is_stmt 1 discriminator 8
 1341 0018 7047     		bx	lr
 1342              	.LVL81:
 1343              	.L98:
 1344              	.LBB13:
 527:usb_lib/usb_regs.c ****   _SetEPCountRxReg(dwReg, wCount);
 1345              		.loc 1 527 0 discriminator 2
 1346 001a 4B08     		lsrs	r3, r1, #1
 1347              	.LVL82:
 1348 001c CA07     		lsls	r2, r1, #31
 1349 001e 48BF     		it	mi
 1350 0020 0133     		addmi	r3, r3, #1
 1351              	.LVL83:
 1352 0022 9B02     		lsls	r3, r3, #10
 1353              	.LVL84:
 1354 0024 F7E7     		b	.L105
 1355              	.LBE13:
 1356              		.cfi_endproc
 1357              	.LFE41:
 1359              		.section	.text.SetEPRxCount,"ax",%progbits
 1360              		.align	1
 1361              		.global	SetEPRxCount
 1362              		.syntax unified
 1363              		.thumb
 1364              		.thumb_func
 1365              		.fpu softvfp
 1367              	SetEPRxCount:
 1368              	.LFB42:
 529:usb_lib/usb_regs.c **** /*******************************************************************************
 530:usb_lib/usb_regs.c **** * Function Name  : SetEPRxCount
 531:usb_lib/usb_regs.c **** * Description    : Set the Rx count.
 532:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 533:usb_lib/usb_regs.c **** *                  wCount: the new count value.
 534:usb_lib/usb_regs.c **** * Output         : None.
 535:usb_lib/usb_regs.c **** * Return         : None.
 536:usb_lib/usb_regs.c **** *******************************************************************************/
 537:usb_lib/usb_regs.c **** void SetEPRxCount(u8 bEpNum, u16 wCount)
 538:usb_lib/usb_regs.c **** {
 1369              		.loc 1 538 0
 1370              		.cfi_startproc
 1371              		@ args = 0, pretend = 0, frame = 0
 1372              		@ frame_needed = 0, uses_anonymous_args = 0
 1373              		@ link register save eliminated.
 1374              	.LVL85:
 1375              	.LBB14:
 539:usb_lib/usb_regs.c ****   _SetEPRxCount(bEpNum, wCount);
 1376              		.loc 1 539 0
 1377 0000 0D4B     		ldr	r3, .L115
 1378 0002 0E4A     		ldr	r2, .L115+4
 1379 0004 1B68     		ldr	r3, [r3]
 1380              	.LBB15:
 1381 0006 3E29     		cmp	r1, #62
 1382              	.LBE15:
 1383 0008 9BB2     		uxth	r3, r3
 1384 000a 03EBC000 		add	r0, r3, r0, lsl #3
 1385              	.LVL86:
 1386 000e 0244     		add	r2, r2, r0
 1387 0010 4FEA4202 		lsl	r2, r2, #1
 1388              	.LVL87:
 1389              	.LBB16:
 1390 0014 0AD9     		bls	.L107
 1391              		.loc 1 539 0 is_stmt 0 discriminator 1
 1392 0016 4B09     		lsrs	r3, r1, #5
 1393              	.LVL88:
 1394 0018 C806     		lsls	r0, r1, #27
 1395 001a 04BF     		itt	eq
 1396 001c 03F1FF33 		addeq	r3, r3, #-1
 1397              	.LVL89:
 1398 0020 9BB2     		uxtheq	r3, r3
 1399              	.LVL90:
 1400 0022 9B02     		lsls	r3, r3, #10
 1401              	.LVL91:
 1402 0024 43F40043 		orr	r3, r3, #32768
 1403              	.LVL92:
 1404              	.L114:
 1405              		.loc 1 539 0 discriminator 8
 1406 0028 1360     		str	r3, [r2]
 1407              	.LBE16:
 1408              	.LBE14:
 540:usb_lib/usb_regs.c **** }
 1409              		.loc 1 540 0 is_stmt 1 discriminator 8
 1410 002a 7047     		bx	lr
 1411              	.LVL93:
 1412              	.L107:
 1413              	.LBB18:
 1414              	.LBB17:
 539:usb_lib/usb_regs.c ****   _SetEPRxCount(bEpNum, wCount);
 1415              		.loc 1 539 0 discriminator 2
 1416 002c 4B08     		lsrs	r3, r1, #1
 1417              	.LVL94:
 1418 002e C907     		lsls	r1, r1, #31
 1419              	.LVL95:
 1420 0030 48BF     		it	mi
 1421 0032 0133     		addmi	r3, r3, #1
 1422              	.LVL96:
 1423 0034 9B02     		lsls	r3, r3, #10
 1424              	.LVL97:
 1425 0036 F7E7     		b	.L114
 1426              	.L116:
 1427              		.align	2
 1428              	.L115:
 1429 0038 505C0040 		.word	1073765456
 1430 003c 06300020 		.word	536883206
 1431              	.LBE17:
 1432              	.LBE18:
 1433              		.cfi_endproc
 1434              	.LFE42:
 1436              		.section	.text.GetEPTxCount,"ax",%progbits
 1437              		.align	1
 1438              		.global	GetEPTxCount
 1439              		.syntax unified
 1440              		.thumb
 1441              		.thumb_func
 1442              		.fpu softvfp
 1444              	GetEPTxCount:
 1445              	.LFB43:
 541:usb_lib/usb_regs.c **** /*******************************************************************************
 542:usb_lib/usb_regs.c **** * Function Name  : GetEPTxCount
 543:usb_lib/usb_regs.c **** * Description    : Get the Tx count.
 544:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 545:usb_lib/usb_regs.c **** * Output         : None
 546:usb_lib/usb_regs.c **** * Return         : Tx count value.
 547:usb_lib/usb_regs.c **** *******************************************************************************/
 548:usb_lib/usb_regs.c **** u16 GetEPTxCount(u8 bEpNum)
 549:usb_lib/usb_regs.c **** {
 1446              		.loc 1 549 0
 1447              		.cfi_startproc
 1448              		@ args = 0, pretend = 0, frame = 0
 1449              		@ frame_needed = 0, uses_anonymous_args = 0
 1450              		@ link register save eliminated.
 1451              	.LVL98:
 550:usb_lib/usb_regs.c ****   return(_GetEPTxCount(bEpNum));
 1452              		.loc 1 550 0
 1453 0000 054B     		ldr	r3, .L118
 1454 0002 1B68     		ldr	r3, [r3]
 1455 0004 9BB2     		uxth	r3, r3
 1456 0006 03EBC000 		add	r0, r3, r0, lsl #3
 1457              	.LVL99:
 1458 000a 044B     		ldr	r3, .L118+4
 1459 000c 0344     		add	r3, r3, r0
 1460 000e 5B00     		lsls	r3, r3, #1
 1461 0010 1868     		ldr	r0, [r3]
 551:usb_lib/usb_regs.c **** }
 1462              		.loc 1 551 0
 1463 0012 C0F30900 		ubfx	r0, r0, #0, #10
 1464 0016 7047     		bx	lr
 1465              	.L119:
 1466              		.align	2
 1467              	.L118:
 1468 0018 505C0040 		.word	1073765456
 1469 001c 02300020 		.word	536883202
 1470              		.cfi_endproc
 1471              	.LFE43:
 1473              		.section	.text.GetEPRxCount,"ax",%progbits
 1474              		.align	1
 1475              		.global	GetEPRxCount
 1476              		.syntax unified
 1477              		.thumb
 1478              		.thumb_func
 1479              		.fpu softvfp
 1481              	GetEPRxCount:
 1482              	.LFB44:
 552:usb_lib/usb_regs.c **** /*******************************************************************************
 553:usb_lib/usb_regs.c **** * Function Name  : GetEPRxCount
 554:usb_lib/usb_regs.c **** * Description    : Get the Rx count.
 555:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 556:usb_lib/usb_regs.c **** * Output         : None.
 557:usb_lib/usb_regs.c **** * Return         : Rx count value.
 558:usb_lib/usb_regs.c **** *******************************************************************************/
 559:usb_lib/usb_regs.c **** u16 GetEPRxCount(u8 bEpNum)
 560:usb_lib/usb_regs.c **** {
 1483              		.loc 1 560 0
 1484              		.cfi_startproc
 1485              		@ args = 0, pretend = 0, frame = 0
 1486              		@ frame_needed = 0, uses_anonymous_args = 0
 1487              		@ link register save eliminated.
 1488              	.LVL100:
 561:usb_lib/usb_regs.c ****   return(_GetEPRxCount(bEpNum));
 1489              		.loc 1 561 0
 1490 0000 054B     		ldr	r3, .L121
 1491 0002 1B68     		ldr	r3, [r3]
 1492 0004 9BB2     		uxth	r3, r3
 1493 0006 03EBC000 		add	r0, r3, r0, lsl #3
 1494              	.LVL101:
 1495 000a 044B     		ldr	r3, .L121+4
 1496 000c 0344     		add	r3, r3, r0
 1497 000e 5B00     		lsls	r3, r3, #1
 1498 0010 1868     		ldr	r0, [r3]
 562:usb_lib/usb_regs.c **** }
 1499              		.loc 1 562 0
 1500 0012 C0F30900 		ubfx	r0, r0, #0, #10
 1501 0016 7047     		bx	lr
 1502              	.L122:
 1503              		.align	2
 1504              	.L121:
 1505 0018 505C0040 		.word	1073765456
 1506 001c 06300020 		.word	536883206
 1507              		.cfi_endproc
 1508              	.LFE44:
 1510              		.section	.text.SetEPDblBuffAddr,"ax",%progbits
 1511              		.align	1
 1512              		.global	SetEPDblBuffAddr
 1513              		.syntax unified
 1514              		.thumb
 1515              		.thumb_func
 1516              		.fpu softvfp
 1518              	SetEPDblBuffAddr:
 1519              	.LFB45:
 563:usb_lib/usb_regs.c **** /*******************************************************************************
 564:usb_lib/usb_regs.c **** * Function Name  : SetEPDblBuffAddr
 565:usb_lib/usb_regs.c **** * Description    : Set the addresses of the buffer 0 and 1.
 566:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 567:usb_lib/usb_regs.c **** *                  wBuf0Addr: new address of buffer 0.
 568:usb_lib/usb_regs.c **** *                  wBuf1Addr: new address of buffer 1.
 569:usb_lib/usb_regs.c **** * Output         : None.
 570:usb_lib/usb_regs.c **** * Return         : None.
 571:usb_lib/usb_regs.c **** *******************************************************************************/
 572:usb_lib/usb_regs.c **** void SetEPDblBuffAddr(u8 bEpNum, u16 wBuf0Addr, u16 wBuf1Addr)
 573:usb_lib/usb_regs.c **** {
 1520              		.loc 1 573 0
 1521              		.cfi_startproc
 1522              		@ args = 0, pretend = 0, frame = 0
 1523              		@ frame_needed = 0, uses_anonymous_args = 0
 1524              	.LVL102:
 1525 0000 10B5     		push	{r4, lr}
 1526              		.cfi_def_cfa_offset 8
 1527              		.cfi_offset 4, -8
 1528              		.cfi_offset 14, -4
 574:usb_lib/usb_regs.c ****   _SetEPDblBuffAddr(bEpNum, wBuf0Addr, wBuf1Addr);
 1529              		.loc 1 574 0
 1530 0002 0B4C     		ldr	r4, .L124
 1531 0004 C000     		lsls	r0, r0, #3
 1532              	.LVL103:
 1533 0006 2368     		ldr	r3, [r4]
 1534 0008 4908     		lsrs	r1, r1, #1
 1535              	.LVL104:
 1536 000a 9BB2     		uxth	r3, r3
 1537 000c 0344     		add	r3, r3, r0
 1538 000e 03F10053 		add	r3, r3, #536870912
 1539 0012 03F54053 		add	r3, r3, #12288
 1540 0016 5B00     		lsls	r3, r3, #1
 1541 0018 4900     		lsls	r1, r1, #1
 1542 001a 1960     		str	r1, [r3]
 1543 001c 2368     		ldr	r3, [r4]
 1544 001e 5208     		lsrs	r2, r2, #1
 1545              	.LVL105:
 1546 0020 9BB2     		uxth	r3, r3
 1547 0022 1844     		add	r0, r0, r3
 1548 0024 034B     		ldr	r3, .L124+4
 1549 0026 5200     		lsls	r2, r2, #1
 1550 0028 0344     		add	r3, r3, r0
 1551 002a 5B00     		lsls	r3, r3, #1
 1552 002c 1A60     		str	r2, [r3]
 575:usb_lib/usb_regs.c **** }
 1553              		.loc 1 575 0
 1554 002e 10BD     		pop	{r4, pc}
 1555              	.L125:
 1556              		.align	2
 1557              	.L124:
 1558 0030 505C0040 		.word	1073765456
 1559 0034 04300020 		.word	536883204
 1560              		.cfi_endproc
 1561              	.LFE45:
 1563              		.section	.text.SetEPDblBuf0Addr,"ax",%progbits
 1564              		.align	1
 1565              		.global	SetEPDblBuf0Addr
 1566              		.syntax unified
 1567              		.thumb
 1568              		.thumb_func
 1569              		.fpu softvfp
 1571              	SetEPDblBuf0Addr:
 1572              	.LFB68:
 1573              		.cfi_startproc
 1574              		@ args = 0, pretend = 0, frame = 0
 1575              		@ frame_needed = 0, uses_anonymous_args = 0
 1576              		@ link register save eliminated.
 1577 0000 FFF7FEBF 		b	SetEPTxAddr
 1578              		.cfi_endproc
 1579              	.LFE68:
 1581              		.section	.text.SetEPDblBuf1Addr,"ax",%progbits
 1582              		.align	1
 1583              		.global	SetEPDblBuf1Addr
 1584              		.syntax unified
 1585              		.thumb
 1586              		.thumb_func
 1587              		.fpu softvfp
 1589              	SetEPDblBuf1Addr:
 1590              	.LFB70:
 1591              		.cfi_startproc
 1592              		@ args = 0, pretend = 0, frame = 0
 1593              		@ frame_needed = 0, uses_anonymous_args = 0
 1594              		@ link register save eliminated.
 1595 0000 FFF7FEBF 		b	SetEPRxAddr
 1596              		.cfi_endproc
 1597              	.LFE70:
 1599              		.section	.text.GetEPDblBuf0Addr,"ax",%progbits
 1600              		.align	1
 1601              		.global	GetEPDblBuf0Addr
 1602              		.syntax unified
 1603              		.thumb
 1604              		.thumb_func
 1605              		.fpu softvfp
 1607              	GetEPDblBuf0Addr:
 1608              	.LFB72:
 1609              		.cfi_startproc
 1610              		@ args = 0, pretend = 0, frame = 0
 1611              		@ frame_needed = 0, uses_anonymous_args = 0
 1612              		@ link register save eliminated.
 1613 0000 FFF7FEBF 		b	GetEPTxAddr
 1614              		.cfi_endproc
 1615              	.LFE72:
 1617              		.section	.text.GetEPDblBuf1Addr,"ax",%progbits
 1618              		.align	1
 1619              		.global	GetEPDblBuf1Addr
 1620              		.syntax unified
 1621              		.thumb
 1622              		.thumb_func
 1623              		.fpu softvfp
 1625              	GetEPDblBuf1Addr:
 1626              	.LFB74:
 1627              		.cfi_startproc
 1628              		@ args = 0, pretend = 0, frame = 0
 1629              		@ frame_needed = 0, uses_anonymous_args = 0
 1630              		@ link register save eliminated.
 1631 0000 FFF7FEBF 		b	GetEPRxAddr
 1632              		.cfi_endproc
 1633              	.LFE74:
 1635              		.section	.text.SetEPDblBuffCount,"ax",%progbits
 1636              		.align	1
 1637              		.global	SetEPDblBuffCount
 1638              		.syntax unified
 1639              		.thumb
 1640              		.thumb_func
 1641              		.fpu softvfp
 1643              	SetEPDblBuffCount:
 1644              	.LFB50:
 576:usb_lib/usb_regs.c **** /*******************************************************************************
 577:usb_lib/usb_regs.c **** * Function Name  : SetEPDblBuf0Addr
 578:usb_lib/usb_regs.c **** * Description    : Set the Buffer 1 address.
 579:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number
 580:usb_lib/usb_regs.c **** *                  wBuf0Addr: new address.
 581:usb_lib/usb_regs.c **** * Output         : None.
 582:usb_lib/usb_regs.c **** * Return         : None.
 583:usb_lib/usb_regs.c **** *******************************************************************************/
 584:usb_lib/usb_regs.c **** void SetEPDblBuf0Addr(u8 bEpNum, u16 wBuf0Addr)
 585:usb_lib/usb_regs.c **** {
 586:usb_lib/usb_regs.c ****   _SetEPDblBuf0Addr(bEpNum, wBuf0Addr);
 587:usb_lib/usb_regs.c **** }
 588:usb_lib/usb_regs.c **** /*******************************************************************************
 589:usb_lib/usb_regs.c **** * Function Name  : SetEPDblBuf1Addr
 590:usb_lib/usb_regs.c **** * Description    : Set the Buffer 1 address.
 591:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number
 592:usb_lib/usb_regs.c **** *                  wBuf1Addr: new address.
 593:usb_lib/usb_regs.c **** * Output         : None.
 594:usb_lib/usb_regs.c **** * Return         : None.
 595:usb_lib/usb_regs.c **** *******************************************************************************/
 596:usb_lib/usb_regs.c **** void SetEPDblBuf1Addr(u8 bEpNum, u16 wBuf1Addr)
 597:usb_lib/usb_regs.c **** {
 598:usb_lib/usb_regs.c ****   _SetEPDblBuf1Addr(bEpNum, wBuf1Addr);
 599:usb_lib/usb_regs.c **** }
 600:usb_lib/usb_regs.c **** /*******************************************************************************
 601:usb_lib/usb_regs.c **** * Function Name  : GetEPDblBuf0Addr
 602:usb_lib/usb_regs.c **** * Description    : Returns the address of the Buffer 0.
 603:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 604:usb_lib/usb_regs.c **** * Output         : None.
 605:usb_lib/usb_regs.c **** * Return         : None.
 606:usb_lib/usb_regs.c **** *******************************************************************************/
 607:usb_lib/usb_regs.c **** u16 GetEPDblBuf0Addr(u8 bEpNum)
 608:usb_lib/usb_regs.c **** {
 609:usb_lib/usb_regs.c ****   return(_GetEPDblBuf0Addr(bEpNum));
 610:usb_lib/usb_regs.c **** }
 611:usb_lib/usb_regs.c **** /*******************************************************************************
 612:usb_lib/usb_regs.c **** * Function Name  : GetEPDblBuf1Addr
 613:usb_lib/usb_regs.c **** * Description    : Returns the address of the Buffer 1.
 614:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 615:usb_lib/usb_regs.c **** * Output         : None.
 616:usb_lib/usb_regs.c **** * Return         : Address of the Buffer 1.
 617:usb_lib/usb_regs.c **** *******************************************************************************/
 618:usb_lib/usb_regs.c **** u16 GetEPDblBuf1Addr(u8 bEpNum)
 619:usb_lib/usb_regs.c **** {
 620:usb_lib/usb_regs.c ****   return(_GetEPDblBuf1Addr(bEpNum));
 621:usb_lib/usb_regs.c **** }
 622:usb_lib/usb_regs.c **** /*******************************************************************************
 623:usb_lib/usb_regs.c **** * Function Name  : SetEPDblBuffCount
 624:usb_lib/usb_regs.c **** * Description    : Set the number of bytes for a double Buffer
 625:usb_lib/usb_regs.c **** *                  endpoint.
 626:usb_lib/usb_regs.c **** * Input          : bEpNum,bDir, wCount
 627:usb_lib/usb_regs.c **** * Output         : None.
 628:usb_lib/usb_regs.c **** * Return         : None.
 629:usb_lib/usb_regs.c **** *******************************************************************************/
 630:usb_lib/usb_regs.c **** void SetEPDblBuffCount(u8 bEpNum, u8 bDir, u16 wCount)
 631:usb_lib/usb_regs.c **** {
 1645              		.loc 1 631 0
 1646              		.cfi_startproc
 1647              		@ args = 0, pretend = 0, frame = 0
 1648              		@ frame_needed = 0, uses_anonymous_args = 0
 1649              	.LVL106:
 632:usb_lib/usb_regs.c ****   _SetEPDblBuffCount(bEpNum, bDir, wCount);
 1650              		.loc 1 632 0
 1651 0000 0129     		cmp	r1, #1
 631:usb_lib/usb_regs.c ****   _SetEPDblBuffCount(bEpNum, bDir, wCount);
 1652              		.loc 1 631 0
 1653 0002 10B5     		push	{r4, lr}
 1654              		.cfi_def_cfa_offset 8
 1655              		.cfi_offset 4, -8
 1656              		.cfi_offset 14, -4
 1657              		.loc 1 632 0
 1658 0004 2BD1     		bne	.L131
 1659              	.LBB19:
 1660              		.loc 1 632 0 is_stmt 0 discriminator 1
 1661 0006 254C     		ldr	r4, .L150
 1662 0008 C000     		lsls	r0, r0, #3
 1663              	.LVL107:
 1664 000a 2168     		ldr	r1, [r4]
 1665              	.LVL108:
 1666 000c 244B     		ldr	r3, .L150+4
 1667 000e 89B2     		uxth	r1, r1
 1668 0010 0144     		add	r1, r1, r0
 1669 0012 0B44     		add	r3, r3, r1
 1670              	.LBB20:
 1671 0014 3E2A     		cmp	r2, #62
 1672              	.LBE20:
 1673 0016 4FEA4301 		lsl	r1, r3, #1
 1674              	.LVL109:
 1675              	.LBB21:
 1676 001a 19D9     		bls	.L132
 1677              		.loc 1 632 0 discriminator 3
 1678 001c 5309     		lsrs	r3, r2, #5
 1679              	.LVL110:
 1680 001e 12F01F0F 		tst	r2, #31
 1681 0022 04BF     		itt	eq
 1682 0024 03F1FF33 		addeq	r3, r3, #-1
 1683              	.LVL111:
 1684 0028 9BB2     		uxtheq	r3, r3
 1685              	.LVL112:
 1686 002a 9B02     		lsls	r3, r3, #10
 1687              	.LVL113:
 1688 002c 43F40043 		orr	r3, r3, #32768
 1689              	.LVL114:
 1690              	.L148:
 1691              		.loc 1 632 0 discriminator 10
 1692 0030 0B60     		str	r3, [r1]
 1693              	.LBE21:
 1694              	.LBE19:
 1695              	.LBB23:
 1696 0032 2368     		ldr	r3, [r4]
 1697 0034 1B49     		ldr	r1, .L150+8
 1698              	.LVL115:
 1699 0036 9BB2     		uxth	r3, r3
 1700 0038 1844     		add	r0, r0, r3
 1701 003a 0144     		add	r1, r1, r0
 1702              	.LBB24:
 1703 003c 3E2A     		cmp	r2, #62
 1704              	.LBE24:
 1705 003e 4FEA4101 		lsl	r1, r1, #1
 1706              	.LVL116:
 1707              	.LBB25:
 1708 0042 1FD8     		bhi	.L139
 1709              		.loc 1 632 0 discriminator 17
 1710 0044 5308     		lsrs	r3, r2, #1
 1711              	.LVL117:
 1712 0046 D207     		lsls	r2, r2, #31
 1713              	.LVL118:
 1714 0048 48BF     		it	mi
 1715 004a 0133     		addmi	r3, r3, #1
 1716              	.LVL119:
 1717 004c 9B02     		lsls	r3, r3, #10
 1718              	.LVL120:
 1719 004e 22E0     		b	.L149
 1720              	.LVL121:
 1721              	.L132:
 1722              	.LBE25:
 1723              	.LBE23:
 1724              	.LBB27:
 1725              	.LBB22:
 1726              		.loc 1 632 0 discriminator 4
 1727 0050 5308     		lsrs	r3, r2, #1
 1728              	.LVL122:
 1729 0052 12F0010F 		tst	r2, #1
 1730 0056 18BF     		it	ne
 1731 0058 0133     		addne	r3, r3, #1
 1732              	.LVL123:
 1733 005a 9B02     		lsls	r3, r3, #10
 1734              	.LVL124:
 1735 005c E8E7     		b	.L148
 1736              	.LVL125:
 1737              	.L131:
 1738              	.LBE22:
 1739              	.LBE27:
 1740              		.loc 1 632 0 discriminator 2
 1741 005e 0229     		cmp	r1, #2
 1742 0060 0FD1     		bne	.L130
 1743              		.loc 1 632 0 discriminator 11
 1744 0062 0E4C     		ldr	r4, .L150
 1745 0064 C000     		lsls	r0, r0, #3
 1746              	.LVL126:
 1747 0066 2168     		ldr	r1, [r4]
 1748              	.LVL127:
 1749 0068 0D4B     		ldr	r3, .L150+4
 1750 006a 89B2     		uxth	r1, r1
 1751 006c 0144     		add	r1, r1, r0
 1752 006e 0B44     		add	r3, r3, r1
 1753 0070 5B00     		lsls	r3, r3, #1
 1754 0072 1A60     		str	r2, [r3]
 1755 0074 2368     		ldr	r3, [r4]
 1756 0076 9BB2     		uxth	r3, r3
 1757 0078 1844     		add	r0, r0, r3
 1758 007a 0A4B     		ldr	r3, .L150+8
 1759 007c 0344     		add	r3, r3, r0
 1760 007e 5B00     		lsls	r3, r3, #1
 1761 0080 1A60     		str	r2, [r3]
 1762              	.LVL128:
 1763              	.L130:
 633:usb_lib/usb_regs.c **** }
 1764              		.loc 1 633 0 is_stmt 1
 1765 0082 10BD     		pop	{r4, pc}
 1766              	.LVL129:
 1767              	.L139:
 1768              	.LBB28:
 1769              	.LBB26:
 632:usb_lib/usb_regs.c ****   _SetEPDblBuffCount(bEpNum, bDir, wCount);
 1770              		.loc 1 632 0 discriminator 16
 1771 0084 5309     		lsrs	r3, r2, #5
 1772              	.LVL130:
 1773 0086 D006     		lsls	r0, r2, #27
 1774 0088 04BF     		itt	eq
 1775 008a 03F1FF33 		addeq	r3, r3, #-1
 1776              	.LVL131:
 1777 008e 9BB2     		uxtheq	r3, r3
 1778              	.LVL132:
 1779 0090 9B02     		lsls	r3, r3, #10
 1780              	.LVL133:
 1781 0092 43F40043 		orr	r3, r3, #32768
 1782              	.LVL134:
 1783              	.L149:
 632:usb_lib/usb_regs.c ****   _SetEPDblBuffCount(bEpNum, bDir, wCount);
 1784              		.loc 1 632 0 is_stmt 0 discriminator 23
 1785 0096 0B60     		str	r3, [r1]
 1786              	.LBE26:
 1787              	.LBE28:
 1788              		.loc 1 633 0 is_stmt 1 discriminator 23
 1789 0098 F3E7     		b	.L130
 1790              	.L151:
 1791 009a 00BF     		.align	2
 1792              	.L150:
 1793 009c 505C0040 		.word	1073765456
 1794 00a0 02300020 		.word	536883202
 1795 00a4 06300020 		.word	536883206
 1796              		.cfi_endproc
 1797              	.LFE50:
 1799              		.section	.text.SetEPDblBuf0Count,"ax",%progbits
 1800              		.align	1
 1801              		.global	SetEPDblBuf0Count
 1802              		.syntax unified
 1803              		.thumb
 1804              		.thumb_func
 1805              		.fpu softvfp
 1807              	SetEPDblBuf0Count:
 1808              	.LFB51:
 634:usb_lib/usb_regs.c **** /*******************************************************************************
 635:usb_lib/usb_regs.c **** * Function Name  : SetEPDblBuf0Count
 636:usb_lib/usb_regs.c **** * Description    : Set the number of bytes in the buffer 0 of a double Buffer
 637:usb_lib/usb_regs.c **** *                  endpoint.
 638:usb_lib/usb_regs.c **** * Input          : bEpNum, bDir,  wCount
 639:usb_lib/usb_regs.c **** * Output         : None.
 640:usb_lib/usb_regs.c **** * Return         : None.
 641:usb_lib/usb_regs.c **** *******************************************************************************/
 642:usb_lib/usb_regs.c **** void SetEPDblBuf0Count(u8 bEpNum, u8 bDir, u16 wCount)
 643:usb_lib/usb_regs.c **** {
 1809              		.loc 1 643 0
 1810              		.cfi_startproc
 1811              		@ args = 0, pretend = 0, frame = 0
 1812              		@ frame_needed = 0, uses_anonymous_args = 0
 1813              		@ link register save eliminated.
 1814              	.LVL135:
 644:usb_lib/usb_regs.c ****   _SetEPDblBuf0Count(bEpNum, bDir, wCount);
 1815              		.loc 1 644 0
 1816 0000 0129     		cmp	r1, #1
 1817 0002 1BD1     		bne	.L153
 1818              	.LBB29:
 1819              		.loc 1 644 0 is_stmt 0 discriminator 1
 1820 0004 134B     		ldr	r3, .L162
 1821 0006 1449     		ldr	r1, .L162+4
 1822              	.LVL136:
 1823 0008 1B68     		ldr	r3, [r3]
 1824              	.LBB30:
 1825 000a 3E2A     		cmp	r2, #62
 1826              	.LBE30:
 1827 000c 9BB2     		uxth	r3, r3
 1828 000e 03EBC000 		add	r0, r3, r0, lsl #3
 1829              	.LVL137:
 1830 0012 0144     		add	r1, r1, r0
 1831 0014 4FEA4101 		lsl	r1, r1, #1
 1832              	.LVL138:
 1833              	.LBB31:
 1834 0018 0AD9     		bls	.L154
 1835              		.loc 1 644 0 discriminator 3
 1836 001a 5309     		lsrs	r3, r2, #5
 1837              	.LVL139:
 1838 001c D006     		lsls	r0, r2, #27
 1839 001e 04BF     		itt	eq
 1840 0020 03F1FF33 		addeq	r3, r3, #-1
 1841              	.LVL140:
 1842 0024 9BB2     		uxtheq	r3, r3
 1843              	.LVL141:
 1844 0026 9B02     		lsls	r3, r3, #10
 1845              	.LVL142:
 1846 0028 43F40043 		orr	r3, r3, #32768
 1847              	.LVL143:
 1848              	.L161:
 1849              		.loc 1 644 0 discriminator 10
 1850 002c 0B60     		str	r3, [r1]
 1851 002e 7047     		bx	lr
 1852              	.LVL144:
 1853              	.L154:
 1854              		.loc 1 644 0 discriminator 4
 1855 0030 5308     		lsrs	r3, r2, #1
 1856              	.LVL145:
 1857 0032 D207     		lsls	r2, r2, #31
 1858              	.LVL146:
 1859 0034 48BF     		it	mi
 1860 0036 0133     		addmi	r3, r3, #1
 1861              	.LVL147:
 1862 0038 9B02     		lsls	r3, r3, #10
 1863              	.LVL148:
 1864 003a F7E7     		b	.L161
 1865              	.LVL149:
 1866              	.L153:
 1867              	.LBE31:
 1868              	.LBE29:
 1869              		.loc 1 644 0 discriminator 2
 1870 003c 0229     		cmp	r1, #2
 1871 003e 08D1     		bne	.L152
 1872              		.loc 1 644 0 discriminator 11
 1873 0040 044B     		ldr	r3, .L162
 1874 0042 1B68     		ldr	r3, [r3]
 1875 0044 9BB2     		uxth	r3, r3
 1876 0046 03EBC000 		add	r0, r3, r0, lsl #3
 1877              	.LVL150:
 1878 004a 034B     		ldr	r3, .L162+4
 1879 004c 0344     		add	r3, r3, r0
 1880 004e 5B00     		lsls	r3, r3, #1
 1881 0050 1A60     		str	r2, [r3]
 1882              	.L152:
 645:usb_lib/usb_regs.c **** }
 1883              		.loc 1 645 0 is_stmt 1
 1884 0052 7047     		bx	lr
 1885              	.L163:
 1886              		.align	2
 1887              	.L162:
 1888 0054 505C0040 		.word	1073765456
 1889 0058 02300020 		.word	536883202
 1890              		.cfi_endproc
 1891              	.LFE51:
 1893              		.section	.text.SetEPDblBuf1Count,"ax",%progbits
 1894              		.align	1
 1895              		.global	SetEPDblBuf1Count
 1896              		.syntax unified
 1897              		.thumb
 1898              		.thumb_func
 1899              		.fpu softvfp
 1901              	SetEPDblBuf1Count:
 1902              	.LFB52:
 646:usb_lib/usb_regs.c **** /*******************************************************************************
 647:usb_lib/usb_regs.c **** * Function Name  : SetEPDblBuf1Count
 648:usb_lib/usb_regs.c **** * Description    : Set the number of bytes in the buffer 0 of a double Buffer
 649:usb_lib/usb_regs.c **** *                  endpoint.
 650:usb_lib/usb_regs.c **** * Input          : bEpNum,  bDir,  wCount
 651:usb_lib/usb_regs.c **** * Output         : None.
 652:usb_lib/usb_regs.c **** * Return         : None.
 653:usb_lib/usb_regs.c **** *******************************************************************************/
 654:usb_lib/usb_regs.c **** void SetEPDblBuf1Count(u8 bEpNum, u8 bDir, u16 wCount)
 655:usb_lib/usb_regs.c **** {
 1903              		.loc 1 655 0
 1904              		.cfi_startproc
 1905              		@ args = 0, pretend = 0, frame = 0
 1906              		@ frame_needed = 0, uses_anonymous_args = 0
 1907              		@ link register save eliminated.
 1908              	.LVL151:
 656:usb_lib/usb_regs.c ****   _SetEPDblBuf1Count(bEpNum, bDir, wCount);
 1909              		.loc 1 656 0
 1910 0000 0129     		cmp	r1, #1
 1911 0002 1BD1     		bne	.L165
 1912              	.LBB32:
 1913              		.loc 1 656 0 is_stmt 0 discriminator 1
 1914 0004 134B     		ldr	r3, .L174
 1915 0006 1449     		ldr	r1, .L174+4
 1916              	.LVL152:
 1917 0008 1B68     		ldr	r3, [r3]
 1918              	.LBB33:
 1919 000a 3E2A     		cmp	r2, #62
 1920              	.LBE33:
 1921 000c 9BB2     		uxth	r3, r3
 1922 000e 03EBC000 		add	r0, r3, r0, lsl #3
 1923              	.LVL153:
 1924 0012 0144     		add	r1, r1, r0
 1925 0014 4FEA4101 		lsl	r1, r1, #1
 1926              	.LVL154:
 1927              	.LBB34:
 1928 0018 0AD9     		bls	.L166
 1929              		.loc 1 656 0 discriminator 3
 1930 001a 5309     		lsrs	r3, r2, #5
 1931              	.LVL155:
 1932 001c D006     		lsls	r0, r2, #27
 1933 001e 04BF     		itt	eq
 1934 0020 03F1FF33 		addeq	r3, r3, #-1
 1935              	.LVL156:
 1936 0024 9BB2     		uxtheq	r3, r3
 1937              	.LVL157:
 1938 0026 9B02     		lsls	r3, r3, #10
 1939              	.LVL158:
 1940 0028 43F40043 		orr	r3, r3, #32768
 1941              	.LVL159:
 1942              	.L173:
 1943              		.loc 1 656 0 discriminator 10
 1944 002c 0B60     		str	r3, [r1]
 1945 002e 7047     		bx	lr
 1946              	.LVL160:
 1947              	.L166:
 1948              		.loc 1 656 0 discriminator 4
 1949 0030 5308     		lsrs	r3, r2, #1
 1950              	.LVL161:
 1951 0032 D207     		lsls	r2, r2, #31
 1952              	.LVL162:
 1953 0034 48BF     		it	mi
 1954 0036 0133     		addmi	r3, r3, #1
 1955              	.LVL163:
 1956 0038 9B02     		lsls	r3, r3, #10
 1957              	.LVL164:
 1958 003a F7E7     		b	.L173
 1959              	.LVL165:
 1960              	.L165:
 1961              	.LBE34:
 1962              	.LBE32:
 1963              		.loc 1 656 0 discriminator 2
 1964 003c 0229     		cmp	r1, #2
 1965 003e 08D1     		bne	.L164
 1966              		.loc 1 656 0 discriminator 11
 1967 0040 044B     		ldr	r3, .L174
 1968 0042 1B68     		ldr	r3, [r3]
 1969 0044 9BB2     		uxth	r3, r3
 1970 0046 03EBC000 		add	r0, r3, r0, lsl #3
 1971              	.LVL166:
 1972 004a 034B     		ldr	r3, .L174+4
 1973 004c 0344     		add	r3, r3, r0
 1974 004e 5B00     		lsls	r3, r3, #1
 1975 0050 1A60     		str	r2, [r3]
 1976              	.L164:
 657:usb_lib/usb_regs.c **** }
 1977              		.loc 1 657 0 is_stmt 1
 1978 0052 7047     		bx	lr
 1979              	.L175:
 1980              		.align	2
 1981              	.L174:
 1982 0054 505C0040 		.word	1073765456
 1983 0058 06300020 		.word	536883206
 1984              		.cfi_endproc
 1985              	.LFE52:
 1987              		.section	.text.GetEPDblBuf0Count,"ax",%progbits
 1988              		.align	1
 1989              		.global	GetEPDblBuf0Count
 1990              		.syntax unified
 1991              		.thumb
 1992              		.thumb_func
 1993              		.fpu softvfp
 1995              	GetEPDblBuf0Count:
 1996              	.LFB76:
 1997              		.cfi_startproc
 1998              		@ args = 0, pretend = 0, frame = 0
 1999              		@ frame_needed = 0, uses_anonymous_args = 0
 2000              		@ link register save eliminated.
 2001 0000 FFF7FEBF 		b	GetEPTxCount
 2002              		.cfi_endproc
 2003              	.LFE76:
 2005              		.section	.text.GetEPDblBuf1Count,"ax",%progbits
 2006              		.align	1
 2007              		.global	GetEPDblBuf1Count
 2008              		.syntax unified
 2009              		.thumb
 2010              		.thumb_func
 2011              		.fpu softvfp
 2013              	GetEPDblBuf1Count:
 2014              	.LFB78:
 2015              		.cfi_startproc
 2016              		@ args = 0, pretend = 0, frame = 0
 2017              		@ frame_needed = 0, uses_anonymous_args = 0
 2018              		@ link register save eliminated.
 2019 0000 FFF7FEBF 		b	GetEPRxCount
 2020              		.cfi_endproc
 2021              	.LFE78:
 2023              		.section	.text.GetEPDblBufDir,"ax",%progbits
 2024              		.align	1
 2025              		.global	GetEPDblBufDir
 2026              		.syntax unified
 2027              		.thumb
 2028              		.thumb_func
 2029              		.fpu softvfp
 2031              	GetEPDblBufDir:
 2032              	.LFB55:
 658:usb_lib/usb_regs.c **** /*******************************************************************************
 659:usb_lib/usb_regs.c **** * Function Name  : GetEPDblBuf0Count
 660:usb_lib/usb_regs.c **** * Description    : Returns the number of byte received in the buffer 0 of a double
 661:usb_lib/usb_regs.c **** *                  Buffer endpoint.
 662:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 663:usb_lib/usb_regs.c **** * Output         : None.
 664:usb_lib/usb_regs.c **** * Return         : Endpoint Buffer 0 count
 665:usb_lib/usb_regs.c **** *******************************************************************************/
 666:usb_lib/usb_regs.c **** u16 GetEPDblBuf0Count(u8 bEpNum)
 667:usb_lib/usb_regs.c **** {
 668:usb_lib/usb_regs.c ****   return(_GetEPDblBuf0Count(bEpNum));
 669:usb_lib/usb_regs.c **** }
 670:usb_lib/usb_regs.c **** /*******************************************************************************
 671:usb_lib/usb_regs.c **** * Function Name  : GetEPDblBuf1Count
 672:usb_lib/usb_regs.c **** * Description    : Returns the number of data received in the buffer 1 of a double
 673:usb_lib/usb_regs.c **** *                  Buffer endpoint.
 674:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 675:usb_lib/usb_regs.c **** * Output         : None.
 676:usb_lib/usb_regs.c **** * Return         : Endpoint Buffer 1 count.
 677:usb_lib/usb_regs.c **** *******************************************************************************/
 678:usb_lib/usb_regs.c **** u16 GetEPDblBuf1Count(u8 bEpNum)
 679:usb_lib/usb_regs.c **** {
 680:usb_lib/usb_regs.c ****   return(_GetEPDblBuf1Count(bEpNum));
 681:usb_lib/usb_regs.c **** }
 682:usb_lib/usb_regs.c **** /*******************************************************************************
 683:usb_lib/usb_regs.c **** * Function Name  : GetEPDblBufDir
 684:usb_lib/usb_regs.c **** * Description    : gets direction of the double buffered endpoint
 685:usb_lib/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 686:usb_lib/usb_regs.c **** * Output         : None.
 687:usb_lib/usb_regs.c **** * Return         : EP_DBUF_OUT, EP_DBUF_IN,
 688:usb_lib/usb_regs.c **** *                  EP_DBUF_ERR if the endpoint counter not yet programmed.
 689:usb_lib/usb_regs.c **** *******************************************************************************/
 690:usb_lib/usb_regs.c **** EP_DBUF_DIR GetEPDblBufDir(u8 bEpNum)
 691:usb_lib/usb_regs.c **** {
 2033              		.loc 1 691 0
 2034              		.cfi_startproc
 2035              		@ args = 0, pretend = 0, frame = 0
 2036              		@ frame_needed = 0, uses_anonymous_args = 0
 2037              		@ link register save eliminated.
 2038              	.LVL167:
 692:usb_lib/usb_regs.c ****   if ((u16)(*_pEPRxCount(bEpNum) & 0xFC00) != 0)
 2039              		.loc 1 692 0
 2040 0000 0D49     		ldr	r1, .L182
 2041 0002 C000     		lsls	r0, r0, #3
 2042              	.LVL168:
 2043 0004 0B68     		ldr	r3, [r1]
 2044 0006 9BB2     		uxth	r3, r3
 2045 0008 C218     		adds	r2, r0, r3
 2046 000a 0C4B     		ldr	r3, .L182+4
 2047 000c 1344     		add	r3, r3, r2
 2048 000e 5B00     		lsls	r3, r3, #1
 2049 0010 1B68     		ldr	r3, [r3]
 2050 0012 13F47C4F 		tst	r3, #64512
 2051 0016 0DD1     		bne	.L180
 693:usb_lib/usb_regs.c ****     return(EP_DBUF_OUT);
 694:usb_lib/usb_regs.c ****   else if (((u16)(*_pEPTxCount(bEpNum)) & 0x03FF) != 0)
 2052              		.loc 1 694 0
 2053 0018 0B68     		ldr	r3, [r1]
 2054 001a 9BB2     		uxth	r3, r3
 2055 001c 1844     		add	r0, r0, r3
 2056 001e 084B     		ldr	r3, .L182+8
 2057 0020 0344     		add	r3, r3, r0
 2058 0022 5B00     		lsls	r3, r3, #1
 2059 0024 1B68     		ldr	r3, [r3]
 2060 0026 C3F30903 		ubfx	r3, r3, #0, #10
 2061 002a 002B     		cmp	r3, #0
 695:usb_lib/usb_regs.c ****     return(EP_DBUF_IN);
 696:usb_lib/usb_regs.c ****   else
 697:usb_lib/usb_regs.c ****     return(EP_DBUF_ERR);
 2062              		.loc 1 697 0
 2063 002c 14BF     		ite	ne
 2064 002e 0220     		movne	r0, #2
 2065 0030 0020     		moveq	r0, #0
 2066 0032 7047     		bx	lr
 2067              	.L180:
 693:usb_lib/usb_regs.c ****     return(EP_DBUF_OUT);
 2068              		.loc 1 693 0
 2069 0034 0120     		movs	r0, #1
 698:usb_lib/usb_regs.c **** }
 2070              		.loc 1 698 0
 2071 0036 7047     		bx	lr
 2072              	.L183:
 2073              		.align	2
 2074              	.L182:
 2075 0038 505C0040 		.word	1073765456
 2076 003c 06300020 		.word	536883206
 2077 0040 02300020 		.word	536883202
 2078              		.cfi_endproc
 2079              	.LFE55:
 2081              		.section	.text.FreeUserBuffer,"ax",%progbits
 2082              		.align	1
 2083              		.global	FreeUserBuffer
 2084              		.syntax unified
 2085              		.thumb
 2086              		.thumb_func
 2087              		.fpu softvfp
 2089              	FreeUserBuffer:
 2090              	.LFB56:
 699:usb_lib/usb_regs.c **** /*******************************************************************************
 700:usb_lib/usb_regs.c **** * Function Name  : FreeUserBuffer
 701:usb_lib/usb_regs.c **** * Description    : free buffer used from the application realizing it to the line
 702:usb_lib/usb_regs.c ****                    toggles bit SW_BUF in the double buffered endpoint register
 703:usb_lib/usb_regs.c **** * Input          : bEpNum, bDir
 704:usb_lib/usb_regs.c **** * Output         : None.
 705:usb_lib/usb_regs.c **** * Return         : None.
 706:usb_lib/usb_regs.c **** *******************************************************************************/
 707:usb_lib/usb_regs.c **** void FreeUserBuffer(u8 bEpNum, u8 bDir)
 708:usb_lib/usb_regs.c **** {
 2091              		.loc 1 708 0
 2092              		.cfi_startproc
 2093              		@ args = 0, pretend = 0, frame = 0
 2094              		@ frame_needed = 0, uses_anonymous_args = 0
 2095              		@ link register save eliminated.
 2096              	.LVL169:
 709:usb_lib/usb_regs.c ****   if (bDir == EP_DBUF_OUT)
 2097              		.loc 1 709 0
 2098 0000 0129     		cmp	r1, #1
 2099 0002 0FD1     		bne	.L185
 710:usb_lib/usb_regs.c ****   { /* OUT double buffered endpoint */
 711:usb_lib/usb_regs.c ****     _ToggleDTOG_TX(bEpNum);
 2100              		.loc 1 711 0
 2101 0004 8000     		lsls	r0, r0, #2
 2102              	.LVL170:
 2103 0006 00F18040 		add	r0, r0, #1073741824
 2104 000a 00F5B840 		add	r0, r0, #23552
 2105 000e 0368     		ldr	r3, [r0]
 2106 0010 23F4E043 		bic	r3, r3, #28672
 2107 0014 23F07003 		bic	r3, r3, #112
 2108 0018 1B04     		lsls	r3, r3, #16
 2109 001a 1B0C     		lsrs	r3, r3, #16
 2110 001c 43F04003 		orr	r3, r3, #64
 2111              	.L187:
 712:usb_lib/usb_regs.c ****   }
 713:usb_lib/usb_regs.c ****   else if (bDir == EP_DBUF_IN)
 714:usb_lib/usb_regs.c ****   { /* IN double buffered endpoint */
 715:usb_lib/usb_regs.c ****     _ToggleDTOG_RX(bEpNum);
 2112              		.loc 1 715 0
 2113 0020 0360     		str	r3, [r0]
 2114              	.L184:
 716:usb_lib/usb_regs.c ****   }
 717:usb_lib/usb_regs.c **** }
 2115              		.loc 1 717 0
 2116 0022 7047     		bx	lr
 2117              	.LVL171:
 2118              	.L185:
 713:usb_lib/usb_regs.c ****   { /* IN double buffered endpoint */
 2119              		.loc 1 713 0
 2120 0024 0229     		cmp	r1, #2
 2121 0026 FCD1     		bne	.L184
 715:usb_lib/usb_regs.c ****   }
 2122              		.loc 1 715 0
 2123 0028 8000     		lsls	r0, r0, #2
 2124              	.LVL172:
 2125 002a 00F18040 		add	r0, r0, #1073741824
 2126 002e 00F5B840 		add	r0, r0, #23552
 2127 0032 0368     		ldr	r3, [r0]
 2128 0034 23F4E043 		bic	r3, r3, #28672
 2129 0038 23F07003 		bic	r3, r3, #112
 2130 003c 1B04     		lsls	r3, r3, #16
 2131 003e 1B0C     		lsrs	r3, r3, #16
 2132 0040 43F48043 		orr	r3, r3, #16384
 2133 0044 ECE7     		b	.L187
 2134              		.cfi_endproc
 2135              	.LFE56:
 2137              		.section	.text.ToWord,"ax",%progbits
 2138              		.align	1
 2139              		.global	ToWord
 2140              		.syntax unified
 2141              		.thumb
 2142              		.thumb_func
 2143              		.fpu softvfp
 2145              	ToWord:
 2146              	.LFB57:
 718:usb_lib/usb_regs.c **** 
 719:usb_lib/usb_regs.c **** /*******************************************************************************
 720:usb_lib/usb_regs.c **** * Function Name  : ToWord
 721:usb_lib/usb_regs.c **** * Description    : merge two byte in a word.
 722:usb_lib/usb_regs.c **** * Input          : bh: byte high, bl: bytes low.
 723:usb_lib/usb_regs.c **** * Output         : None.
 724:usb_lib/usb_regs.c **** * Return         : resulted word.
 725:usb_lib/usb_regs.c **** *******************************************************************************/
 726:usb_lib/usb_regs.c **** u16 ToWord(u8 bh, u8 bl)
 727:usb_lib/usb_regs.c **** {
 2147              		.loc 1 727 0
 2148              		.cfi_startproc
 2149              		@ args = 0, pretend = 0, frame = 0
 2150              		@ frame_needed = 0, uses_anonymous_args = 0
 2151              		@ link register save eliminated.
 2152              	.LVL173:
 728:usb_lib/usb_regs.c ****   u16 wRet;
 729:usb_lib/usb_regs.c ****   wRet = (u16)bl | ((u16)bh << 8);
 730:usb_lib/usb_regs.c ****   return(wRet);
 731:usb_lib/usb_regs.c **** }
 2153              		.loc 1 731 0
 2154 0000 41EA0020 		orr	r0, r1, r0, lsl #8
 2155              	.LVL174:
 2156 0004 7047     		bx	lr
 2157              		.cfi_endproc
 2158              	.LFE57:
 2160              		.section	.text.ByteSwap,"ax",%progbits
 2161              		.align	1
 2162              		.global	ByteSwap
 2163              		.syntax unified
 2164              		.thumb
 2165              		.thumb_func
 2166              		.fpu softvfp
 2168              	ByteSwap:
 2169              	.LFB58:
 732:usb_lib/usb_regs.c **** /*******************************************************************************
 733:usb_lib/usb_regs.c **** * Function Name  : ByteSwap
 734:usb_lib/usb_regs.c **** * Description    : Swap two byte in a word.
 735:usb_lib/usb_regs.c **** * Input          : wSwW: word to Swap.
 736:usb_lib/usb_regs.c **** * Output         : None.
 737:usb_lib/usb_regs.c **** * Return         : resulted word.
 738:usb_lib/usb_regs.c **** *******************************************************************************/
 739:usb_lib/usb_regs.c **** u16 ByteSwap(u16 wSwW)
 740:usb_lib/usb_regs.c **** {
 2170              		.loc 1 740 0
 2171              		.cfi_startproc
 2172              		@ args = 0, pretend = 0, frame = 0
 2173              		@ frame_needed = 0, uses_anonymous_args = 0
 2174              		@ link register save eliminated.
 2175              	.LVL175:
 741:usb_lib/usb_regs.c ****   u8 bTemp;
 742:usb_lib/usb_regs.c ****   u16 wRet;
 743:usb_lib/usb_regs.c ****   bTemp = (u8)(wSwW & 0xff);
 744:usb_lib/usb_regs.c ****   wRet =  (wSwW >> 8) | ((u16)bTemp << 8);
 2176              		.loc 1 744 0
 2177 0000 C3B2     		uxtb	r3, r0
 2178 0002 000A     		lsrs	r0, r0, #8
 2179              	.LVL176:
 745:usb_lib/usb_regs.c ****   return(wRet);
 746:usb_lib/usb_regs.c **** }
 2180              		.loc 1 746 0
 2181 0004 40EA0320 		orr	r0, r0, r3, lsl #8
 2182 0008 7047     		bx	lr
 2183              		.cfi_endproc
 2184              	.LFE58:
 2186              		.text
 2187              	.Letext0:
 2188              		.file 2 "usb_lib/usb_type.h"
 2189              		.file 3 "usb_lib/usb_regs.h"
 2190              		.file 4 "usb_lib/usb_core.h"
 2191              		.file 5 "usb_lib/usb_init.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_regs.c
     /tmp/ccT6ScAQ.s:16     .text.SetCNTR:0000000000000000 $t
     /tmp/ccT6ScAQ.s:23     .text.SetCNTR:0000000000000000 SetCNTR
     /tmp/ccT6ScAQ.s:40     .text.SetCNTR:0000000000000008 $d
     /tmp/ccT6ScAQ.s:45     .text.GetCNTR:0000000000000000 $t
     /tmp/ccT6ScAQ.s:52     .text.GetCNTR:0000000000000000 GetCNTR
     /tmp/ccT6ScAQ.s:68     .text.GetCNTR:0000000000000008 $d
     /tmp/ccT6ScAQ.s:73     .text.SetISTR:0000000000000000 $t
     /tmp/ccT6ScAQ.s:80     .text.SetISTR:0000000000000000 SetISTR
     /tmp/ccT6ScAQ.s:96     .text.SetISTR:0000000000000008 $d
     /tmp/ccT6ScAQ.s:101    .text.GetISTR:0000000000000000 $t
     /tmp/ccT6ScAQ.s:108    .text.GetISTR:0000000000000000 GetISTR
     /tmp/ccT6ScAQ.s:124    .text.GetISTR:0000000000000008 $d
     /tmp/ccT6ScAQ.s:129    .text.GetFNR:0000000000000000 $t
     /tmp/ccT6ScAQ.s:136    .text.GetFNR:0000000000000000 GetFNR
     /tmp/ccT6ScAQ.s:152    .text.GetFNR:0000000000000008 $d
     /tmp/ccT6ScAQ.s:157    .text.SetDADDR:0000000000000000 $t
     /tmp/ccT6ScAQ.s:164    .text.SetDADDR:0000000000000000 SetDADDR
     /tmp/ccT6ScAQ.s:180    .text.SetDADDR:0000000000000008 $d
     /tmp/ccT6ScAQ.s:185    .text.GetDADDR:0000000000000000 $t
     /tmp/ccT6ScAQ.s:192    .text.GetDADDR:0000000000000000 GetDADDR
     /tmp/ccT6ScAQ.s:208    .text.GetDADDR:0000000000000008 $d
     /tmp/ccT6ScAQ.s:213    .text.SetBTABLE:0000000000000000 $t
     /tmp/ccT6ScAQ.s:220    .text.SetBTABLE:0000000000000000 SetBTABLE
     /tmp/ccT6ScAQ.s:238    .text.SetBTABLE:000000000000000c $d
     /tmp/ccT6ScAQ.s:243    .text.GetBTABLE:0000000000000000 $t
     /tmp/ccT6ScAQ.s:250    .text.GetBTABLE:0000000000000000 GetBTABLE
     /tmp/ccT6ScAQ.s:266    .text.GetBTABLE:0000000000000008 $d
     /tmp/ccT6ScAQ.s:271    .text.SetENDPOINT:0000000000000000 $t
     /tmp/ccT6ScAQ.s:278    .text.SetENDPOINT:0000000000000000 SetENDPOINT
     /tmp/ccT6ScAQ.s:298    .text.GetENDPOINT:0000000000000000 $t
     /tmp/ccT6ScAQ.s:305    .text.GetENDPOINT:0000000000000000 GetENDPOINT
     /tmp/ccT6ScAQ.s:326    .text.SetEPType:0000000000000000 $t
     /tmp/ccT6ScAQ.s:333    .text.SetEPType:0000000000000000 SetEPType
     /tmp/ccT6ScAQ.s:359    .text.GetEPType:0000000000000000 $t
     /tmp/ccT6ScAQ.s:366    .text.GetEPType:0000000000000000 GetEPType
     /tmp/ccT6ScAQ.s:387    .text.SetEPTxStatus:0000000000000000 $t
     /tmp/ccT6ScAQ.s:394    .text.SetEPTxStatus:0000000000000000 SetEPTxStatus
     /tmp/ccT6ScAQ.s:429    .text.SetEPRxStatus:0000000000000000 $t
     /tmp/ccT6ScAQ.s:436    .text.SetEPRxStatus:0000000000000000 SetEPRxStatus
     /tmp/ccT6ScAQ.s:471    .text.SetDouBleBuffEPStall:0000000000000000 $t
     /tmp/ccT6ScAQ.s:478    .text.SetDouBleBuffEPStall:0000000000000000 SetDouBleBuffEPStall
     /tmp/ccT6ScAQ.s:527    .text.GetEPTxStatus:0000000000000000 $t
     /tmp/ccT6ScAQ.s:534    .text.GetEPTxStatus:0000000000000000 GetEPTxStatus
     /tmp/ccT6ScAQ.s:555    .text.GetEPRxStatus:0000000000000000 $t
     /tmp/ccT6ScAQ.s:562    .text.GetEPRxStatus:0000000000000000 GetEPRxStatus
     /tmp/ccT6ScAQ.s:583    .text.SetEPTxValid:0000000000000000 $t
     /tmp/ccT6ScAQ.s:590    .text.SetEPTxValid:0000000000000000 SetEPTxValid
     /tmp/ccT6ScAQ.s:619    .text.SetEPRxValid:0000000000000000 $t
     /tmp/ccT6ScAQ.s:626    .text.SetEPRxValid:0000000000000000 SetEPRxValid
     /tmp/ccT6ScAQ.s:655    .text.SetEP_KIND:0000000000000000 $t
     /tmp/ccT6ScAQ.s:662    .text.SetEP_KIND:0000000000000000 SetEP_KIND
     /tmp/ccT6ScAQ.s:687    .text.ClearEP_KIND:0000000000000000 $t
     /tmp/ccT6ScAQ.s:694    .text.ClearEP_KIND:0000000000000000 ClearEP_KIND
     /tmp/ccT6ScAQ.s:719    .text.Clear_Status_Out:0000000000000000 $t
     /tmp/ccT6ScAQ.s:726    .text.Clear_Status_Out:0000000000000000 Clear_Status_Out
     /tmp/ccT6ScAQ.s:737    .text.Set_Status_Out:0000000000000000 $t
     /tmp/ccT6ScAQ.s:744    .text.Set_Status_Out:0000000000000000 Set_Status_Out
     /tmp/ccT6ScAQ.s:755    .text.SetEPDoubleBuff:0000000000000000 $t
     /tmp/ccT6ScAQ.s:762    .text.SetEPDoubleBuff:0000000000000000 SetEPDoubleBuff
     /tmp/ccT6ScAQ.s:773    .text.ClearEPDoubleBuff:0000000000000000 $t
     /tmp/ccT6ScAQ.s:780    .text.ClearEPDoubleBuff:0000000000000000 ClearEPDoubleBuff
     /tmp/ccT6ScAQ.s:791    .text.GetTxStallStatus:0000000000000000 $t
     /tmp/ccT6ScAQ.s:798    .text.GetTxStallStatus:0000000000000000 GetTxStallStatus
     /tmp/ccT6ScAQ.s:822    .text.GetRxStallStatus:0000000000000000 $t
     /tmp/ccT6ScAQ.s:829    .text.GetRxStallStatus:0000000000000000 GetRxStallStatus
     /tmp/ccT6ScAQ.s:853    .text.ClearEP_CTR_RX:0000000000000000 $t
     /tmp/ccT6ScAQ.s:860    .text.ClearEP_CTR_RX:0000000000000000 ClearEP_CTR_RX
     /tmp/ccT6ScAQ.s:884    .text.ClearEP_CTR_TX:0000000000000000 $t
     /tmp/ccT6ScAQ.s:891    .text.ClearEP_CTR_TX:0000000000000000 ClearEP_CTR_TX
     /tmp/ccT6ScAQ.s:916    .text.ToggleDTOG_RX:0000000000000000 $t
     /tmp/ccT6ScAQ.s:923    .text.ToggleDTOG_RX:0000000000000000 ToggleDTOG_RX
     /tmp/ccT6ScAQ.s:949    .text.ToggleDTOG_TX:0000000000000000 $t
     /tmp/ccT6ScAQ.s:956    .text.ToggleDTOG_TX:0000000000000000 ToggleDTOG_TX
     /tmp/ccT6ScAQ.s:982    .text.ClearDTOG_RX:0000000000000000 $t
     /tmp/ccT6ScAQ.s:989    .text.ClearDTOG_RX:0000000000000000 ClearDTOG_RX
     /tmp/ccT6ScAQ.s:1020   .text.ClearDTOG_TX:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1027   .text.ClearDTOG_TX:0000000000000000 ClearDTOG_TX
     /tmp/ccT6ScAQ.s:1058   .text.SetEPAddress:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1065   .text.SetEPAddress:0000000000000000 SetEPAddress
     /tmp/ccT6ScAQ.s:1092   .text.GetEPAddress:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1099   .text.GetEPAddress:0000000000000000 GetEPAddress
     /tmp/ccT6ScAQ.s:1120   .text.SetEPTxAddr:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1127   .text.SetEPTxAddr:0000000000000000 SetEPTxAddr
     /tmp/ccT6ScAQ.s:1153   .text.SetEPTxAddr:000000000000001c $d
     /tmp/ccT6ScAQ.s:1158   .text.SetEPRxAddr:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1165   .text.SetEPRxAddr:0000000000000000 SetEPRxAddr
     /tmp/ccT6ScAQ.s:1191   .text.SetEPRxAddr:0000000000000018 $d
     /tmp/ccT6ScAQ.s:1197   .text.GetEPTxAddr:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1204   .text.GetEPTxAddr:0000000000000000 GetEPTxAddr
     /tmp/ccT6ScAQ.s:1227   .text.GetEPTxAddr:0000000000000018 $d
     /tmp/ccT6ScAQ.s:1232   .text.GetEPRxAddr:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1239   .text.GetEPRxAddr:0000000000000000 GetEPRxAddr
     /tmp/ccT6ScAQ.s:1262   .text.GetEPRxAddr:0000000000000014 $d
     /tmp/ccT6ScAQ.s:1268   .text.SetEPTxCount:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1275   .text.SetEPTxCount:0000000000000000 SetEPTxCount
     /tmp/ccT6ScAQ.s:1298   .text.SetEPTxCount:0000000000000014 $d
     /tmp/ccT6ScAQ.s:1304   .text.SetEPCountRxReg:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1311   .text.SetEPCountRxReg:0000000000000000 SetEPCountRxReg
     /tmp/ccT6ScAQ.s:1360   .text.SetEPRxCount:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1367   .text.SetEPRxCount:0000000000000000 SetEPRxCount
     /tmp/ccT6ScAQ.s:1429   .text.SetEPRxCount:0000000000000038 $d
     /tmp/ccT6ScAQ.s:1437   .text.GetEPTxCount:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1444   .text.GetEPTxCount:0000000000000000 GetEPTxCount
     /tmp/ccT6ScAQ.s:1468   .text.GetEPTxCount:0000000000000018 $d
     /tmp/ccT6ScAQ.s:1474   .text.GetEPRxCount:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1481   .text.GetEPRxCount:0000000000000000 GetEPRxCount
     /tmp/ccT6ScAQ.s:1505   .text.GetEPRxCount:0000000000000018 $d
     /tmp/ccT6ScAQ.s:1511   .text.SetEPDblBuffAddr:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1518   .text.SetEPDblBuffAddr:0000000000000000 SetEPDblBuffAddr
     /tmp/ccT6ScAQ.s:1558   .text.SetEPDblBuffAddr:0000000000000030 $d
     /tmp/ccT6ScAQ.s:1564   .text.SetEPDblBuf0Addr:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1571   .text.SetEPDblBuf0Addr:0000000000000000 SetEPDblBuf0Addr
     /tmp/ccT6ScAQ.s:1582   .text.SetEPDblBuf1Addr:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1589   .text.SetEPDblBuf1Addr:0000000000000000 SetEPDblBuf1Addr
     /tmp/ccT6ScAQ.s:1600   .text.GetEPDblBuf0Addr:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1607   .text.GetEPDblBuf0Addr:0000000000000000 GetEPDblBuf0Addr
     /tmp/ccT6ScAQ.s:1618   .text.GetEPDblBuf1Addr:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1625   .text.GetEPDblBuf1Addr:0000000000000000 GetEPDblBuf1Addr
     /tmp/ccT6ScAQ.s:1636   .text.SetEPDblBuffCount:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1643   .text.SetEPDblBuffCount:0000000000000000 SetEPDblBuffCount
     /tmp/ccT6ScAQ.s:1793   .text.SetEPDblBuffCount:000000000000009c $d
     /tmp/ccT6ScAQ.s:1800   .text.SetEPDblBuf0Count:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1807   .text.SetEPDblBuf0Count:0000000000000000 SetEPDblBuf0Count
     /tmp/ccT6ScAQ.s:1888   .text.SetEPDblBuf0Count:0000000000000054 $d
     /tmp/ccT6ScAQ.s:1894   .text.SetEPDblBuf1Count:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1901   .text.SetEPDblBuf1Count:0000000000000000 SetEPDblBuf1Count
     /tmp/ccT6ScAQ.s:1982   .text.SetEPDblBuf1Count:0000000000000054 $d
     /tmp/ccT6ScAQ.s:1988   .text.GetEPDblBuf0Count:0000000000000000 $t
     /tmp/ccT6ScAQ.s:1995   .text.GetEPDblBuf0Count:0000000000000000 GetEPDblBuf0Count
     /tmp/ccT6ScAQ.s:2006   .text.GetEPDblBuf1Count:0000000000000000 $t
     /tmp/ccT6ScAQ.s:2013   .text.GetEPDblBuf1Count:0000000000000000 GetEPDblBuf1Count
     /tmp/ccT6ScAQ.s:2024   .text.GetEPDblBufDir:0000000000000000 $t
     /tmp/ccT6ScAQ.s:2031   .text.GetEPDblBufDir:0000000000000000 GetEPDblBufDir
     /tmp/ccT6ScAQ.s:2075   .text.GetEPDblBufDir:0000000000000038 $d
     /tmp/ccT6ScAQ.s:2082   .text.FreeUserBuffer:0000000000000000 $t
     /tmp/ccT6ScAQ.s:2089   .text.FreeUserBuffer:0000000000000000 FreeUserBuffer
     /tmp/ccT6ScAQ.s:2138   .text.ToWord:0000000000000000 $t
     /tmp/ccT6ScAQ.s:2145   .text.ToWord:0000000000000000 ToWord
     /tmp/ccT6ScAQ.s:2161   .text.ByteSwap:0000000000000000 $t
     /tmp/ccT6ScAQ.s:2168   .text.ByteSwap:0000000000000000 ByteSwap

NO UNDEFINED SYMBOLS
