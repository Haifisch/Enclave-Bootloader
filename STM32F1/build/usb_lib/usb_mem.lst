   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"usb_mem.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.UserToPMABufferCopy,"ax",%progbits
  16              		.align	1
  17              		.global	UserToPMABufferCopy
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	UserToPMABufferCopy:
  24              	.LFB0:
  25              		.file 1 "usb_lib/usb_mem.c"
   1:usb_lib/usb_mem.c **** /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
   2:usb_lib/usb_mem.c **** * File Name          : usb_mem.c
   3:usb_lib/usb_mem.c **** * Author             : MCD Application Team
   4:usb_lib/usb_mem.c **** * Version            : V2.2.1
   5:usb_lib/usb_mem.c **** * Date               : 09/22/2008
   6:usb_lib/usb_mem.c **** * Description        : Utility functions for memory transfers to/from PMA
   7:usb_lib/usb_mem.c **** ********************************************************************************
   8:usb_lib/usb_mem.c **** * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
   9:usb_lib/usb_mem.c **** * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
  10:usb_lib/usb_mem.c **** * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
  11:usb_lib/usb_mem.c **** * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
  12:usb_lib/usb_mem.c **** * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
  13:usb_lib/usb_mem.c **** * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  14:usb_lib/usb_mem.c **** *******************************************************************************/
  15:usb_lib/usb_mem.c **** 
  16:usb_lib/usb_mem.c **** /* Includes ------------------------------------------------------------------*/
  17:usb_lib/usb_mem.c **** #include "usb_lib.h"
  18:usb_lib/usb_mem.c **** 
  19:usb_lib/usb_mem.c **** /* Private typedef -----------------------------------------------------------*/
  20:usb_lib/usb_mem.c **** /* Private define ------------------------------------------------------------*/
  21:usb_lib/usb_mem.c **** /* Private macro -------------------------------------------------------------*/
  22:usb_lib/usb_mem.c **** /* Private variables ---------------------------------------------------------*/
  23:usb_lib/usb_mem.c **** /* Extern variables ----------------------------------------------------------*/
  24:usb_lib/usb_mem.c **** /* Private function prototypes -----------------------------------------------*/
  25:usb_lib/usb_mem.c **** /* Private functions ---------------------------------------------------------*/
  26:usb_lib/usb_mem.c **** /*******************************************************************************
  27:usb_lib/usb_mem.c **** * Function Name  : UserToPMABufferCopy
  28:usb_lib/usb_mem.c **** * Description    : Copy a buffer from user memory area to packet memory area (PMA)
  29:usb_lib/usb_mem.c **** * Input          : - pbUsrBuf: pointer to user memory area.
  30:usb_lib/usb_mem.c **** *                  - wPMABufAddr: address into PMA.
  31:usb_lib/usb_mem.c **** *                  - wNBytes: no. of bytes to be copied.
  32:usb_lib/usb_mem.c **** * Output         : None.
  33:usb_lib/usb_mem.c **** * Return         : None	.
  34:usb_lib/usb_mem.c **** *******************************************************************************/
  35:usb_lib/usb_mem.c **** void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
  36:usb_lib/usb_mem.c **** {
  26              		.loc 1 36 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  37:usb_lib/usb_mem.c ****   u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  38:usb_lib/usb_mem.c ****   u32 i, temp1, temp2;
  39:usb_lib/usb_mem.c ****   u16 *pdwVal;
  40:usb_lib/usb_mem.c ****   pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
  32              		.loc 1 40 0
  33 0000 01F10051 		add	r1, r1, #536870912
  34              	.LVL1:
  37:usb_lib/usb_mem.c ****   u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  35              		.loc 1 37 0
  36 0004 0132     		adds	r2, r2, #1
  37              	.LVL2:
  38              		.loc 1 40 0
  39 0006 01F54051 		add	r1, r1, #12288
  37:usb_lib/usb_mem.c ****   u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  40              		.loc 1 37 0
  41 000a 5210     		asrs	r2, r2, #1
  42              	.LVL3:
  43              		.loc 1 40 0
  44 000c 4900     		lsls	r1, r1, #1
  45              	.LVL4:
  46              	.L2:
  41:usb_lib/usb_mem.c ****   for (i = n; i != 0; i--)
  47              		.loc 1 41 0 discriminator 1
  48 000e 02B9     		cbnz	r2, .L3
  42:usb_lib/usb_mem.c ****   {
  43:usb_lib/usb_mem.c ****     temp1 = (u16) * pbUsrBuf;
  44:usb_lib/usb_mem.c ****     pbUsrBuf++;
  45:usb_lib/usb_mem.c ****     temp2 = temp1 | (u16) * pbUsrBuf << 8;
  46:usb_lib/usb_mem.c ****     *pdwVal++ = temp2;
  47:usb_lib/usb_mem.c ****     pdwVal++;
  48:usb_lib/usb_mem.c ****     pbUsrBuf++;
  49:usb_lib/usb_mem.c ****   }
  50:usb_lib/usb_mem.c **** }
  49              		.loc 1 50 0
  50 0010 7047     		bx	lr
  51              	.L3:
  52              	.LVL5:
  53 0012 30F8023B 		ldrh	r3, [r0], #2	@ unaligned
  54              	.LVL6:
  41:usb_lib/usb_mem.c ****   for (i = n; i != 0; i--)
  55              		.loc 1 41 0 discriminator 3
  56 0016 013A     		subs	r2, r2, #1
  57              	.LVL7:
  46:usb_lib/usb_mem.c ****     pdwVal++;
  58              		.loc 1 46 0 discriminator 3
  59 0018 21F8043B 		strh	r3, [r1], #4	@ movhi
  60              	.LVL8:
  61 001c F7E7     		b	.L2
  62              		.cfi_endproc
  63              	.LFE0:
  65              		.section	.text.PMAToUserBufferCopy,"ax",%progbits
  66              		.align	1
  67              		.global	PMAToUserBufferCopy
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu softvfp
  73              	PMAToUserBufferCopy:
  74              	.LFB1:
  51:usb_lib/usb_mem.c **** /*******************************************************************************
  52:usb_lib/usb_mem.c **** * Function Name  : PMAToUserBufferCopy
  53:usb_lib/usb_mem.c **** * Description    : Copy a buffer from user memory area to packet memory area (PMA)
  54:usb_lib/usb_mem.c **** * Input          : - pbUsrBuf    = pointer to user memory area.
  55:usb_lib/usb_mem.c **** *                  - wPMABufAddr = address into PMA.
  56:usb_lib/usb_mem.c **** *                  - wNBytes     = no. of bytes to be copied.
  57:usb_lib/usb_mem.c **** * Output         : None.
  58:usb_lib/usb_mem.c **** * Return         : None.
  59:usb_lib/usb_mem.c **** *******************************************************************************/
  60:usb_lib/usb_mem.c **** void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
  61:usb_lib/usb_mem.c **** {
  75              		.loc 1 61 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              	.LVL9:
  62:usb_lib/usb_mem.c ****   u32 n = (wNBytes + 1) >> 1;/* /2*/
  63:usb_lib/usb_mem.c ****   u32 i;
  64:usb_lib/usb_mem.c ****   u32 *pdwVal;
  65:usb_lib/usb_mem.c ****   pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
  66:usb_lib/usb_mem.c ****   for (i = n; i != 0; i--)
  80              		.loc 1 66 0
  81 0000 0023     		movs	r3, #0
  61:usb_lib/usb_mem.c ****   u32 n = (wNBytes + 1) >> 1;/* /2*/
  82              		.loc 1 61 0
  83 0002 10B5     		push	{r4, lr}
  84              		.cfi_def_cfa_offset 8
  85              		.cfi_offset 4, -8
  86              		.cfi_offset 14, -4
  65:usb_lib/usb_mem.c ****   for (i = n; i != 0; i--)
  87              		.loc 1 65 0
  88 0004 01F10051 		add	r1, r1, #536870912
  89              	.LVL10:
  62:usb_lib/usb_mem.c ****   u32 n = (wNBytes + 1) >> 1;/* /2*/
  90              		.loc 1 62 0
  91 0008 0132     		adds	r2, r2, #1
  92              	.LVL11:
  65:usb_lib/usb_mem.c ****   for (i = n; i != 0; i--)
  93              		.loc 1 65 0
  94 000a 01F54051 		add	r1, r1, #12288
  62:usb_lib/usb_mem.c ****   u32 n = (wNBytes + 1) >> 1;/* /2*/
  95              		.loc 1 62 0
  96 000e 5210     		asrs	r2, r2, #1
  97              	.LVL12:
  65:usb_lib/usb_mem.c ****   for (i = n; i != 0; i--)
  98              		.loc 1 65 0
  99 0010 4900     		lsls	r1, r1, #1
 100              	.LVL13:
 101              	.L5:
 102              		.loc 1 66 0 discriminator 1
 103 0012 9A42     		cmp	r2, r3
 104 0014 00D1     		bne	.L6
  67:usb_lib/usb_mem.c ****   {
  68:usb_lib/usb_mem.c ****     *(u16*)pbUsrBuf++ = *pdwVal++;
  69:usb_lib/usb_mem.c ****     pbUsrBuf++;
  70:usb_lib/usb_mem.c ****   }
  71:usb_lib/usb_mem.c **** }
 105              		.loc 1 71 0
 106 0016 10BD     		pop	{r4, pc}
 107              	.L6:
 108              	.LVL14:
  68:usb_lib/usb_mem.c ****     pbUsrBuf++;
 109              		.loc 1 68 0 discriminator 3
 110 0018 51F82340 		ldr	r4, [r1, r3, lsl #2]
 111 001c 20F81340 		strh	r4, [r0, r3, lsl #1]	@ movhi
 112              	.LVL15:
 113 0020 0133     		adds	r3, r3, #1
 114              	.LVL16:
 115 0022 F6E7     		b	.L5
 116              		.cfi_endproc
 117              	.LFE1:
 119              		.text
 120              	.Letext0:
 121              		.file 2 "usb_lib/usb_type.h"
 122              		.file 3 "usb_lib/usb_core.h"
 123              		.file 4 "usb_lib/usb_regs.h"
 124              		.file 5 "usb_lib/usb_init.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_mem.c
     /tmp/ccCx0aEE.s:16     .text.UserToPMABufferCopy:0000000000000000 $t
     /tmp/ccCx0aEE.s:23     .text.UserToPMABufferCopy:0000000000000000 UserToPMABufferCopy
     /tmp/ccCx0aEE.s:66     .text.PMAToUserBufferCopy:0000000000000000 $t
     /tmp/ccCx0aEE.s:73     .text.PMAToUserBufferCopy:0000000000000000 PMAToUserBufferCopy

NO UNDEFINED SYMBOLS
