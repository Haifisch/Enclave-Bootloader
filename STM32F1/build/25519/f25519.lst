   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"f25519.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.f25519_load,"ax",%progbits
  16              		.align	1
  17              		.global	f25519_load
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	f25519_load:
  24              	.LFB1:
  25              		.file 1 "25519/f25519.c"
   1:25519/f25519.c **** /* Arithmetic mod p = 2^255-19
   2:25519/f25519.c ****  * Daniel Beer <dlbeer@gmail.com>, 5 Jan 2014
   3:25519/f25519.c ****  *
   4:25519/f25519.c ****  * This file is in the public domain.
   5:25519/f25519.c ****  */
   6:25519/f25519.c **** 
   7:25519/f25519.c **** #include "f25519.h"
   8:25519/f25519.c **** 
   9:25519/f25519.c **** const uint8_t f25519_zero[F25519_SIZE] = {0};
  10:25519/f25519.c **** const uint8_t f25519_one[F25519_SIZE] = {1};
  11:25519/f25519.c **** 
  12:25519/f25519.c **** void f25519_load(uint8_t *x, uint32_t c)
  13:25519/f25519.c **** {
  26              		.loc 1 13 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32 0000 431E     		subs	r3, r0, #1
  33 0002 C21C     		adds	r2, r0, #3
  34              	.LVL1:
  35              	.L2:
  14:25519/f25519.c **** 	int i;
  15:25519/f25519.c **** 
  16:25519/f25519.c **** 	for (i = 0; i < sizeof(c); i++) {
  36              		.loc 1 16 0 discriminator 1
  37 0004 9342     		cmp	r3, r2
  38 0006 06D1     		bne	.L3
  17:25519/f25519.c **** 		x[i] = c;
  18:25519/f25519.c **** 		c >>= 8;
  19:25519/f25519.c **** 	}
  20:25519/f25519.c **** 
  21:25519/f25519.c **** 	for (; i < F25519_SIZE; i++)
  22:25519/f25519.c **** 		x[i] = 0;
  39              		.loc 1 22 0
  40 0008 0022     		movs	r2, #0
  41 000a 1F30     		adds	r0, r0, #31
  42              	.LVL2:
  43              	.L4:
  44              		.loc 1 22 0 is_stmt 0 discriminator 2
  45 000c 03F8012F 		strb	r2, [r3, #1]!
  46              	.LVL3:
  21:25519/f25519.c **** 		x[i] = 0;
  47              		.loc 1 21 0 is_stmt 1 discriminator 2
  48 0010 8342     		cmp	r3, r0
  49 0012 FBD1     		bne	.L4
  23:25519/f25519.c **** }
  50              		.loc 1 23 0
  51 0014 7047     		bx	lr
  52              	.LVL4:
  53              	.L3:
  17:25519/f25519.c **** 		x[i] = c;
  54              		.loc 1 17 0 discriminator 3
  55 0016 03F8011F 		strb	r1, [r3, #1]!
  56              	.LVL5:
  18:25519/f25519.c **** 	}
  57              		.loc 1 18 0 discriminator 3
  58 001a 090A     		lsrs	r1, r1, #8
  59              	.LVL6:
  60 001c F2E7     		b	.L2
  61              		.cfi_endproc
  62              	.LFE1:
  64              		.section	.text.f25519_eq,"ax",%progbits
  65              		.align	1
  66              		.global	f25519_eq
  67              		.syntax unified
  68              		.thumb
  69              		.thumb_func
  70              		.fpu softvfp
  72              	f25519_eq:
  73              	.LFB3:
  24:25519/f25519.c **** 
  25:25519/f25519.c **** void f25519_normalize(uint8_t *x)
  26:25519/f25519.c **** {
  27:25519/f25519.c **** 	uint8_t minusp[F25519_SIZE];
  28:25519/f25519.c **** 	uint16_t c;
  29:25519/f25519.c **** 	int i;
  30:25519/f25519.c **** 
  31:25519/f25519.c **** 	/* Reduce using 2^255 = 19 mod p */
  32:25519/f25519.c **** 	c = (x[31] >> 7) * 19;
  33:25519/f25519.c **** 	x[31] &= 127;
  34:25519/f25519.c **** 
  35:25519/f25519.c **** 	for (i = 0; i < F25519_SIZE; i++) {
  36:25519/f25519.c **** 		c += x[i];
  37:25519/f25519.c **** 		x[i] = c;
  38:25519/f25519.c **** 		c >>= 8;
  39:25519/f25519.c **** 	}
  40:25519/f25519.c **** 
  41:25519/f25519.c **** 	/* The number is now less than 2^255 + 18, and therefore less than
  42:25519/f25519.c **** 	 * 2p. Try subtracting p, and conditionally load the subtracted
  43:25519/f25519.c **** 	 * value if underflow did not occur.
  44:25519/f25519.c **** 	 */
  45:25519/f25519.c **** 	c = 19;
  46:25519/f25519.c **** 
  47:25519/f25519.c **** 	for (i = 0; i + 1 < F25519_SIZE; i++) {
  48:25519/f25519.c **** 		c += x[i];
  49:25519/f25519.c **** 		minusp[i] = c;
  50:25519/f25519.c **** 		c >>= 8;
  51:25519/f25519.c **** 	}
  52:25519/f25519.c **** 
  53:25519/f25519.c **** 	c += ((uint16_t)x[i]) - 128;
  54:25519/f25519.c **** 	minusp[31] = c;
  55:25519/f25519.c **** 
  56:25519/f25519.c **** 	/* Load x-p if no underflow */
  57:25519/f25519.c **** 	f25519_select(x, minusp, x, (c >> 15) & 1);
  58:25519/f25519.c **** }
  59:25519/f25519.c **** 
  60:25519/f25519.c **** uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
  61:25519/f25519.c **** {
  74              		.loc 1 61 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              	.LVL7:
  62:25519/f25519.c **** 	uint8_t sum = 0;
  79              		.loc 1 62 0
  80 0000 0023     		movs	r3, #0
  61:25519/f25519.c **** 	uint8_t sum = 0;
  81              		.loc 1 61 0
  82 0002 30B5     		push	{r4, r5, lr}
  83              		.cfi_def_cfa_offset 12
  84              		.cfi_offset 4, -12
  85              		.cfi_offset 5, -8
  86              		.cfi_offset 14, -4
  87 0004 421E     		subs	r2, r0, #1
  88 0006 0139     		subs	r1, r1, #1
  89              	.LVL8:
  90 0008 1F30     		adds	r0, r0, #31
  91              	.LVL9:
  92              	.L7:
  63:25519/f25519.c **** 	int i;
  64:25519/f25519.c **** 
  65:25519/f25519.c **** 	for (i = 0; i < F25519_SIZE; i++)
  66:25519/f25519.c **** 		sum |= x[i] ^ y[i];
  93              		.loc 1 66 0 discriminator 3
  94 000a 12F8014F 		ldrb	r4, [r2, #1]!	@ zero_extendqisi2
  95              	.LVL10:
  96 000e 11F8015F 		ldrb	r5, [r1, #1]!	@ zero_extendqisi2
  65:25519/f25519.c **** 		sum |= x[i] ^ y[i];
  97              		.loc 1 65 0 discriminator 3
  98 0012 9042     		cmp	r0, r2
  99              		.loc 1 66 0 discriminator 3
 100 0014 84EA0504 		eor	r4, r4, r5
 101 0018 43EA0403 		orr	r3, r3, r4
 102              	.LVL11:
  65:25519/f25519.c **** 		sum |= x[i] ^ y[i];
 103              		.loc 1 65 0 discriminator 3
 104 001c F5D1     		bne	.L7
  67:25519/f25519.c **** 
  68:25519/f25519.c **** 	sum |= (sum >> 4);
 105              		.loc 1 68 0
 106 001e 43EA1313 		orr	r3, r3, r3, lsr #4
 107              	.LVL12:
 108 0022 03F0FF03 		and	r3, r3, #255
 109              	.LVL13:
  69:25519/f25519.c **** 	sum |= (sum >> 2);
 110              		.loc 1 69 0
 111 0026 43EA9303 		orr	r3, r3, r3, lsr #2
 112              	.LVL14:
  70:25519/f25519.c **** 	sum |= (sum >> 1);
 113              		.loc 1 70 0
 114 002a 43EA5303 		orr	r3, r3, r3, lsr #1
 115              	.LVL15:
  71:25519/f25519.c **** 
  72:25519/f25519.c **** 	return (sum ^ 1) & 1;
 116              		.loc 1 72 0
 117 002e D843     		mvns	r0, r3
 118              	.LVL16:
  73:25519/f25519.c **** }
 119              		.loc 1 73 0
 120 0030 00F00100 		and	r0, r0, #1
 121 0034 30BD     		pop	{r4, r5, pc}
 122              		.cfi_endproc
 123              	.LFE3:
 125              		.section	.text.f25519_select,"ax",%progbits
 126              		.align	1
 127              		.global	f25519_select
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu softvfp
 133              	f25519_select:
 134              	.LFB4:
  74:25519/f25519.c **** 
  75:25519/f25519.c **** void f25519_select(uint8_t *dst,
  76:25519/f25519.c **** 		   const uint8_t *zero, const uint8_t *one,
  77:25519/f25519.c **** 		   uint8_t condition)
  78:25519/f25519.c **** {
 135              		.loc 1 78 0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 139              	.LVL17:
  79:25519/f25519.c **** 	const uint8_t mask = -condition;
 140              		.loc 1 79 0
 141 0000 5B42     		negs	r3, r3
 142              	.LVL18:
  78:25519/f25519.c **** 	const uint8_t mask = -condition;
 143              		.loc 1 78 0
 144 0002 70B5     		push	{r4, r5, r6, lr}
 145              		.cfi_def_cfa_offset 16
 146              		.cfi_offset 4, -16
 147              		.cfi_offset 5, -12
 148              		.cfi_offset 6, -8
 149              		.cfi_offset 14, -4
 150              		.loc 1 79 0
 151 0004 DBB2     		uxtb	r3, r3
 152              	.LVL19:
 153 0006 4E1E     		subs	r6, r1, #1
 154 0008 013A     		subs	r2, r2, #1
 155              	.LVL20:
 156 000a 0138     		subs	r0, r0, #1
 157              	.LVL21:
 158 000c 1F31     		adds	r1, r1, #31
 159              	.LVL22:
 160              	.L10:
  80:25519/f25519.c **** 	int i;
  81:25519/f25519.c **** 
  82:25519/f25519.c **** 	for (i = 0; i < F25519_SIZE; i++)
  83:25519/f25519.c **** 		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 161              		.loc 1 83 0 discriminator 3
 162 000e 16F8015F 		ldrb	r5, [r6, #1]!	@ zero_extendqisi2
 163              	.LVL23:
 164 0012 12F8014F 		ldrb	r4, [r2, #1]!	@ zero_extendqisi2
  82:25519/f25519.c **** 		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 165              		.loc 1 82 0 discriminator 3
 166 0016 8E42     		cmp	r6, r1
 167              		.loc 1 83 0 discriminator 3
 168 0018 84EA0504 		eor	r4, r4, r5
 169 001c 04EA0304 		and	r4, r4, r3
 170 0020 84EA0504 		eor	r4, r4, r5
 171 0024 00F8014F 		strb	r4, [r0, #1]!
 172              	.LVL24:
  82:25519/f25519.c **** 		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 173              		.loc 1 82 0 discriminator 3
 174 0028 F1D1     		bne	.L10
  84:25519/f25519.c **** }
 175              		.loc 1 84 0
 176 002a 70BD     		pop	{r4, r5, r6, pc}
 177              		.cfi_endproc
 178              	.LFE4:
 180              		.section	.text.f25519_normalize,"ax",%progbits
 181              		.align	1
 182              		.global	f25519_normalize
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu softvfp
 188              	f25519_normalize:
 189              	.LFB2:
  26:25519/f25519.c **** 	uint8_t minusp[F25519_SIZE];
 190              		.loc 1 26 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 32
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              	.LVL25:
 195 0000 0246     		mov	r2, r0
 196 0002 10B5     		push	{r4, lr}
 197              		.cfi_def_cfa_offset 8
 198              		.cfi_offset 4, -8
 199              		.cfi_offset 14, -4
  32:25519/f25519.c **** 	x[31] &= 127;
 200              		.loc 1 32 0
 201 0004 C17F     		ldrb	r1, [r0, #31]	@ zero_extendqisi2
  26:25519/f25519.c **** 	uint8_t minusp[F25519_SIZE];
 202              		.loc 1 26 0
 203 0006 88B0     		sub	sp, sp, #32
 204              		.cfi_def_cfa_offset 40
  32:25519/f25519.c **** 	x[31] &= 127;
 205              		.loc 1 32 0
 206 0008 CB09     		lsrs	r3, r1, #7
 207 000a D800     		lsls	r0, r3, #3
 208              	.LVL26:
 209 000c 1844     		add	r0, r0, r3
  33:25519/f25519.c **** 
 210              		.loc 1 33 0
 211 000e 01F07F01 		and	r1, r1, #127
  32:25519/f25519.c **** 	x[31] &= 127;
 212              		.loc 1 32 0
 213 0012 03EB4003 		add	r3, r3, r0, lsl #1
 214              	.LVL27:
  33:25519/f25519.c **** 
 215              		.loc 1 33 0
 216 0016 D177     		strb	r1, [r2, #31]
 217              	.LVL28:
 218 0018 02F11F00 		add	r0, r2, #31
 219 001c 511E     		subs	r1, r2, #1
 220              	.LVL29:
 221              	.L13:
  36:25519/f25519.c **** 		x[i] = c;
 222              		.loc 1 36 0 discriminator 3
 223 001e 11F8014F 		ldrb	r4, [r1, #1]!	@ zero_extendqisi2
 224 0022 2344     		add	r3, r3, r4
 225              	.LVL30:
  35:25519/f25519.c **** 		c += x[i];
 226              		.loc 1 35 0 discriminator 3
 227 0024 8842     		cmp	r0, r1
  37:25519/f25519.c **** 		c >>= 8;
 228              		.loc 1 37 0 discriminator 3
 229 0026 0B70     		strb	r3, [r1]
  38:25519/f25519.c **** 	}
 230              		.loc 1 38 0 discriminator 3
 231 0028 C3F30F23 		ubfx	r3, r3, #8, #16
 232              	.LVL31:
  35:25519/f25519.c **** 		c += x[i];
 233              		.loc 1 35 0 discriminator 3
 234 002c F7D1     		bne	.L13
  47:25519/f25519.c **** 		c += x[i];
 235              		.loc 1 47 0
 236 002e 0021     		movs	r1, #0
  45:25519/f25519.c **** 
 237              		.loc 1 45 0
 238 0030 1323     		movs	r3, #19
 239              	.LVL32:
 240              	.L14:
  48:25519/f25519.c **** 		minusp[i] = c;
 241              		.loc 1 48 0 discriminator 3
 242 0032 505C     		ldrb	r0, [r2, r1]	@ zero_extendqisi2
 243 0034 0344     		add	r3, r3, r0
 244              	.LVL33:
  49:25519/f25519.c **** 		c >>= 8;
 245              		.loc 1 49 0 discriminator 3
 246 0036 0DF80130 		strb	r3, [sp, r1]
  47:25519/f25519.c **** 		c += x[i];
 247              		.loc 1 47 0 discriminator 3
 248 003a 0131     		adds	r1, r1, #1
 249              	.LVL34:
 250 003c 1F29     		cmp	r1, #31
  50:25519/f25519.c **** 	}
 251              		.loc 1 50 0 discriminator 3
 252 003e C3F30F23 		ubfx	r3, r3, #8, #16
 253              	.LVL35:
  47:25519/f25519.c **** 		c += x[i];
 254              		.loc 1 47 0 discriminator 3
 255 0042 F6D1     		bne	.L14
  53:25519/f25519.c **** 	minusp[31] = c;
 256              		.loc 1 53 0
 257 0044 D17F     		ldrb	r1, [r2, #31]	@ zero_extendqisi2
 258              	.LVL36:
  57:25519/f25519.c **** }
 259              		.loc 1 57 0
 260 0046 1046     		mov	r0, r2
  53:25519/f25519.c **** 	minusp[31] = c;
 261              		.loc 1 53 0
 262 0048 8039     		subs	r1, r1, #128
 263 004a 0B44     		add	r3, r3, r1
 264              	.LVL37:
 265 004c 9BB2     		uxth	r3, r3
 266              	.LVL38:
  54:25519/f25519.c **** 
 267              		.loc 1 54 0
 268 004e 8DF81F30 		strb	r3, [sp, #31]
  57:25519/f25519.c **** }
 269              		.loc 1 57 0
 270 0052 6946     		mov	r1, sp
 271 0054 DB0B     		lsrs	r3, r3, #15
 272              	.LVL39:
 273 0056 FFF7FEFF 		bl	f25519_select
 274              	.LVL40:
  58:25519/f25519.c **** 
 275              		.loc 1 58 0
 276 005a 08B0     		add	sp, sp, #32
 277              		.cfi_def_cfa_offset 8
 278              		@ sp needed
 279 005c 10BD     		pop	{r4, pc}
 280              		.cfi_endproc
 281              	.LFE2:
 283              		.section	.text.f25519_add,"ax",%progbits
 284              		.align	1
 285              		.global	f25519_add
 286              		.syntax unified
 287              		.thumb
 288              		.thumb_func
 289              		.fpu softvfp
 291              	f25519_add:
 292              	.LFB5:
  85:25519/f25519.c **** 
  86:25519/f25519.c **** void f25519_add(uint8_t *r, const uint8_t *a, const uint8_t *b)
  87:25519/f25519.c **** {
 293              		.loc 1 87 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297              	.LVL41:
 298 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 299              		.cfi_def_cfa_offset 20
 300              		.cfi_offset 4, -20
 301              		.cfi_offset 5, -16
 302              		.cfi_offset 6, -12
 303              		.cfi_offset 7, -8
 304              		.cfi_offset 14, -4
 305 0002 441E     		subs	r4, r0, #1
 306              		.loc 1 87 0
 307 0004 2746     		mov	r7, r4
  88:25519/f25519.c **** 	uint16_t c = 0;
 308              		.loc 1 88 0
 309 0006 0023     		movs	r3, #0
 310 0008 4D1E     		subs	r5, r1, #1
 311 000a 013A     		subs	r2, r2, #1
 312              	.LVL42:
 313 000c 1F31     		adds	r1, r1, #31
 314              	.LVL43:
 315              	.L18:
  89:25519/f25519.c **** 	int i;
  90:25519/f25519.c **** 
  91:25519/f25519.c **** 	/* Add */
  92:25519/f25519.c **** 	for (i = 0; i < F25519_SIZE; i++) {
  93:25519/f25519.c **** 		c >>= 8;
  94:25519/f25519.c **** 		c += ((uint16_t)a[i]) + ((uint16_t)b[i]);
 316              		.loc 1 94 0 discriminator 3
 317 000e 15F8016F 		ldrb	r6, [r5, #1]!	@ zero_extendqisi2
 318              	.LVL44:
 319 0012 12F801CF 		ldrb	ip, [r2, #1]!	@ zero_extendqisi2
  92:25519/f25519.c **** 		c >>= 8;
 320              		.loc 1 92 0 discriminator 3
 321 0016 8D42     		cmp	r5, r1
 322              		.loc 1 94 0 discriminator 3
 323 0018 6644     		add	r6, r6, ip
 324 001a 06EB1323 		add	r3, r6, r3, lsr #8
 325              	.LVL45:
  95:25519/f25519.c **** 		r[i] = c;
 326              		.loc 1 95 0 discriminator 3
 327 001e 07F8013F 		strb	r3, [r7, #1]!
 328              	.LVL46:
  92:25519/f25519.c **** 		c >>= 8;
 329              		.loc 1 92 0 discriminator 3
 330 0022 F4D1     		bne	.L18
  96:25519/f25519.c **** 	}
  97:25519/f25519.c **** 
  98:25519/f25519.c **** 	/* Reduce with 2^255 = 19 mod p */
  99:25519/f25519.c **** 	r[31] &= 127;
 331              		.loc 1 99 0
 332 0024 C27F     		ldrb	r2, [r0, #31]	@ zero_extendqisi2
 100:25519/f25519.c **** 	c = (c >> 7) * 19;
 333              		.loc 1 100 0
 334 0026 C3F3CF13 		ubfx	r3, r3, #7, #16
 335              	.LVL47:
  99:25519/f25519.c **** 	c = (c >> 7) * 19;
 336              		.loc 1 99 0
 337 002a 02F07F02 		and	r2, r2, #127
 338 002e 00F81F2F 		strb	r2, [r0, #31]!
 339              	.LVL48:
 340              		.loc 1 100 0
 341 0032 03EBC302 		add	r2, r3, r3, lsl #3
 342 0036 03EB4203 		add	r3, r3, r2, lsl #1
 343 003a 9BB2     		uxth	r3, r3
 344              	.LVL49:
 345              	.L19:
 101:25519/f25519.c **** 
 102:25519/f25519.c **** 	for (i = 0; i < F25519_SIZE; i++) {
 103:25519/f25519.c **** 		c += r[i];
 346              		.loc 1 103 0 discriminator 3
 347 003c 14F8012F 		ldrb	r2, [r4, #1]!	@ zero_extendqisi2
 348              	.LVL50:
 349 0040 1344     		add	r3, r3, r2
 350              	.LVL51:
 351 0042 9BB2     		uxth	r3, r3
 352              	.LVL52:
 102:25519/f25519.c **** 		c += r[i];
 353              		.loc 1 102 0 discriminator 3
 354 0044 A042     		cmp	r0, r4
 104:25519/f25519.c **** 		r[i] = c;
 355              		.loc 1 104 0 discriminator 3
 356 0046 2370     		strb	r3, [r4]
 105:25519/f25519.c **** 		c >>= 8;
 357              		.loc 1 105 0 discriminator 3
 358 0048 4FEA1323 		lsr	r3, r3, #8
 359              	.LVL53:
 102:25519/f25519.c **** 		c += r[i];
 360              		.loc 1 102 0 discriminator 3
 361 004c F6D1     		bne	.L19
 106:25519/f25519.c **** 	}
 107:25519/f25519.c **** }
 362              		.loc 1 107 0
 363 004e F0BD     		pop	{r4, r5, r6, r7, pc}
 364              		.cfi_endproc
 365              	.LFE5:
 367              		.section	.text.f25519_sub,"ax",%progbits
 368              		.align	1
 369              		.global	f25519_sub
 370              		.syntax unified
 371              		.thumb
 372              		.thumb_func
 373              		.fpu softvfp
 375              	f25519_sub:
 376              	.LFB6:
 108:25519/f25519.c **** 
 109:25519/f25519.c **** void f25519_sub(uint8_t *r, const uint8_t *a, const uint8_t *b)
 110:25519/f25519.c **** {
 377              		.loc 1 110 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 0
 380              		@ frame_needed = 0, uses_anonymous_args = 0
 381              	.LVL54:
 382 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 383              		.cfi_def_cfa_offset 24
 384              		.cfi_offset 4, -24
 385              		.cfi_offset 5, -20
 386              		.cfi_offset 6, -16
 387              		.cfi_offset 7, -12
 388              		.cfi_offset 8, -8
 389              		.cfi_offset 14, -4
 390 0004 441E     		subs	r4, r0, #1
 391              		.loc 1 110 0
 392 0006 2746     		mov	r7, r4
 111:25519/f25519.c **** 	uint32_t c = 0;
 112:25519/f25519.c **** 	int i;
 113:25519/f25519.c **** 
 114:25519/f25519.c **** 	/* Calculate a + 2p - b, to avoid underflow */
 115:25519/f25519.c **** 	c = 218;
 393              		.loc 1 115 0
 394 0008 DA25     		movs	r5, #218
 395 000a 4E1E     		subs	r6, r1, #1
 396 000c 02F1FF3C 		add	ip, r2, #-1
 397 0010 01F11E0E 		add	lr, r1, #30
 398              	.LVL55:
 399              	.L23:
 116:25519/f25519.c **** 	for (i = 0; i + 1 < F25519_SIZE; i++) {
 117:25519/f25519.c **** 		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
 400              		.loc 1 117 0 discriminator 3
 401 0014 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 402 0018 1CF8018F 		ldrb	r8, [ip, #1]!	@ zero_extendqisi2
 403 001c 03F57F43 		add	r3, r3, #65280
 404 0020 A3EB0803 		sub	r3, r3, r8
 405 0024 2B44     		add	r3, r3, r5
 406              	.LVL56:
 116:25519/f25519.c **** 	for (i = 0; i + 1 < F25519_SIZE; i++) {
 407              		.loc 1 116 0 discriminator 3
 408 0026 7645     		cmp	r6, lr
 118:25519/f25519.c **** 		r[i] = c;
 409              		.loc 1 118 0 discriminator 3
 410 0028 07F8013F 		strb	r3, [r7, #1]!
 119:25519/f25519.c **** 		c >>= 8;
 411              		.loc 1 119 0 discriminator 3
 412 002c 4FEA1325 		lsr	r5, r3, #8
 413              	.LVL57:
 116:25519/f25519.c **** 	for (i = 0; i + 1 < F25519_SIZE; i++) {
 414              		.loc 1 116 0 discriminator 3
 415 0030 F0D1     		bne	.L23
 120:25519/f25519.c **** 	}
 121:25519/f25519.c **** 
 122:25519/f25519.c **** 	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
 416              		.loc 1 122 0
 417 0032 D27F     		ldrb	r2, [r2, #31]	@ zero_extendqisi2
 418              	.LVL58:
 419 0034 CB7F     		ldrb	r3, [r1, #31]	@ zero_extendqisi2
 420 0036 9B1A     		subs	r3, r3, r2
 421 0038 2B44     		add	r3, r3, r5
 422              	.LVL59:
 123:25519/f25519.c **** 	r[31] = c & 127;
 423              		.loc 1 123 0
 424 003a 03F07F02 		and	r2, r3, #127
 425 003e 00F81F2F 		strb	r2, [r0, #31]!
 426              	.LVL60:
 124:25519/f25519.c **** 	c = (c >> 7) * 19;
 427              		.loc 1 124 0
 428 0042 1322     		movs	r2, #19
 429 0044 DB09     		lsrs	r3, r3, #7
 430              	.LVL61:
 431 0046 5343     		muls	r3, r2, r3
 432              	.LVL62:
 433              	.L24:
 125:25519/f25519.c **** 
 126:25519/f25519.c **** 	for (i = 0; i < F25519_SIZE; i++) {
 127:25519/f25519.c **** 		c += r[i];
 434              		.loc 1 127 0 discriminator 3
 435 0048 14F8012F 		ldrb	r2, [r4, #1]!	@ zero_extendqisi2
 436              	.LVL63:
 437 004c 1344     		add	r3, r3, r2
 438              	.LVL64:
 126:25519/f25519.c **** 		c += r[i];
 439              		.loc 1 126 0 discriminator 3
 440 004e A042     		cmp	r0, r4
 128:25519/f25519.c **** 		r[i] = c;
 441              		.loc 1 128 0 discriminator 3
 442 0050 2370     		strb	r3, [r4]
 129:25519/f25519.c **** 		c >>= 8;
 443              		.loc 1 129 0 discriminator 3
 444 0052 4FEA1323 		lsr	r3, r3, #8
 445              	.LVL65:
 126:25519/f25519.c **** 		c += r[i];
 446              		.loc 1 126 0 discriminator 3
 447 0056 F7D1     		bne	.L24
 130:25519/f25519.c **** 	}
 131:25519/f25519.c **** }
 448              		.loc 1 131 0
 449 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 450              		.cfi_endproc
 451              	.LFE6:
 453              		.section	.text.f25519_neg,"ax",%progbits
 454              		.align	1
 455              		.global	f25519_neg
 456              		.syntax unified
 457              		.thumb
 458              		.thumb_func
 459              		.fpu softvfp
 461              	f25519_neg:
 462              	.LFB7:
 132:25519/f25519.c **** 
 133:25519/f25519.c **** void f25519_neg(uint8_t *r, const uint8_t *a)
 134:25519/f25519.c **** {
 463              		.loc 1 134 0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 0
 466              		@ frame_needed = 0, uses_anonymous_args = 0
 467              	.LVL66:
 468 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 469              		.cfi_def_cfa_offset 20
 470              		.cfi_offset 4, -20
 471              		.cfi_offset 5, -16
 472              		.cfi_offset 6, -12
 473              		.cfi_offset 7, -8
 474              		.cfi_offset 14, -4
 475 0002 441E     		subs	r4, r0, #1
 476              		.loc 1 134 0
 477 0004 2646     		mov	r6, r4
 135:25519/f25519.c **** 	uint32_t c = 0;
 136:25519/f25519.c **** 	int i;
 137:25519/f25519.c **** 
 138:25519/f25519.c **** 	/* Calculate 2p - a, to avoid underflow */
 139:25519/f25519.c **** 	c = 218;
 478              		.loc 1 139 0
 479 0006 DA23     		movs	r3, #218
 480 0008 4A1E     		subs	r2, r1, #1
 481 000a 01F11E07 		add	r7, r1, #30
 482              	.LVL67:
 483              	.L28:
 140:25519/f25519.c **** 	for (i = 0; i + 1 < F25519_SIZE; i++) {
 141:25519/f25519.c **** 		c += 65280 - ((uint32_t)a[i]);
 484              		.loc 1 141 0 discriminator 3
 485 000e 12F8015F 		ldrb	r5, [r2, #1]!	@ zero_extendqisi2
 486 0012 C5F57F45 		rsb	r5, r5, #65280
 487 0016 2B44     		add	r3, r3, r5
 488              	.LVL68:
 140:25519/f25519.c **** 	for (i = 0; i + 1 < F25519_SIZE; i++) {
 489              		.loc 1 140 0 discriminator 3
 490 0018 BA42     		cmp	r2, r7
 142:25519/f25519.c **** 		r[i] = c;
 491              		.loc 1 142 0 discriminator 3
 492 001a 06F8013F 		strb	r3, [r6, #1]!
 143:25519/f25519.c **** 		c >>= 8;
 493              		.loc 1 143 0 discriminator 3
 494 001e 4FEA1323 		lsr	r3, r3, #8
 495              	.LVL69:
 140:25519/f25519.c **** 	for (i = 0; i + 1 < F25519_SIZE; i++) {
 496              		.loc 1 140 0 discriminator 3
 497 0022 F4D1     		bne	.L28
 144:25519/f25519.c **** 	}
 145:25519/f25519.c **** 
 146:25519/f25519.c **** 	c -= ((uint32_t)a[31]);
 498              		.loc 1 146 0
 499 0024 CA7F     		ldrb	r2, [r1, #31]	@ zero_extendqisi2
 500 0026 9B1A     		subs	r3, r3, r2
 501              	.LVL70:
 147:25519/f25519.c **** 	r[31] = c & 127;
 502              		.loc 1 147 0
 503 0028 03F07F02 		and	r2, r3, #127
 504 002c 00F81F2F 		strb	r2, [r0, #31]!
 505              	.LVL71:
 148:25519/f25519.c **** 	c = (c >> 7) * 19;
 506              		.loc 1 148 0
 507 0030 1322     		movs	r2, #19
 508 0032 DB09     		lsrs	r3, r3, #7
 509              	.LVL72:
 510 0034 5343     		muls	r3, r2, r3
 511              	.LVL73:
 512              	.L29:
 149:25519/f25519.c **** 
 150:25519/f25519.c **** 	for (i = 0; i < F25519_SIZE; i++) {
 151:25519/f25519.c **** 		c += r[i];
 513              		.loc 1 151 0 discriminator 3
 514 0036 14F8012F 		ldrb	r2, [r4, #1]!	@ zero_extendqisi2
 515              	.LVL74:
 516 003a 1344     		add	r3, r3, r2
 517              	.LVL75:
 150:25519/f25519.c **** 		c += r[i];
 518              		.loc 1 150 0 discriminator 3
 519 003c A042     		cmp	r0, r4
 152:25519/f25519.c **** 		r[i] = c;
 520              		.loc 1 152 0 discriminator 3
 521 003e 2370     		strb	r3, [r4]
 153:25519/f25519.c **** 		c >>= 8;
 522              		.loc 1 153 0 discriminator 3
 523 0040 4FEA1323 		lsr	r3, r3, #8
 524              	.LVL76:
 150:25519/f25519.c **** 		c += r[i];
 525              		.loc 1 150 0 discriminator 3
 526 0044 F7D1     		bne	.L29
 154:25519/f25519.c **** 	}
 155:25519/f25519.c **** }
 527              		.loc 1 155 0
 528 0046 F0BD     		pop	{r4, r5, r6, r7, pc}
 529              		.cfi_endproc
 530              	.LFE7:
 532              		.section	.text.f25519_mul__distinct,"ax",%progbits
 533              		.align	1
 534              		.global	f25519_mul__distinct
 535              		.syntax unified
 536              		.thumb
 537              		.thumb_func
 538              		.fpu softvfp
 540              	f25519_mul__distinct:
 541              	.LFB8:
 156:25519/f25519.c **** 
 157:25519/f25519.c **** void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
 158:25519/f25519.c **** {
 542              		.loc 1 158 0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 0
 545              		@ frame_needed = 0, uses_anonymous_args = 0
 546              	.LVL77:
 547 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 548              		.cfi_def_cfa_offset 28
 549              		.cfi_offset 4, -28
 550              		.cfi_offset 5, -24
 551              		.cfi_offset 6, -20
 552              		.cfi_offset 7, -16
 553              		.cfi_offset 8, -12
 554              		.cfi_offset 9, -8
 555              		.cfi_offset 14, -4
 159:25519/f25519.c **** 	uint32_t c = 0;
 160:25519/f25519.c **** 	int i;
 161:25519/f25519.c **** 
 162:25519/f25519.c **** 	for (i = 0; i < F25519_SIZE; i++) {
 556              		.loc 1 162 0
 557 0004 0024     		movs	r4, #0
 558              	.LBB2:
 163:25519/f25519.c **** 		int j;
 164:25519/f25519.c **** 
 165:25519/f25519.c **** 		c >>= 8;
 166:25519/f25519.c **** 		for (j = 0; j <= i; j++)
 167:25519/f25519.c **** 			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 168:25519/f25519.c **** 
 169:25519/f25519.c **** 		for (; j < F25519_SIZE; j++)
 170:25519/f25519.c **** 			c += ((uint32_t)a[j]) *
 171:25519/f25519.c **** 			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 559              		.loc 1 171 0
 560 0006 4FF0260E 		mov	lr, #38
 561              	.LBE2:
 159:25519/f25519.c **** 	uint32_t c = 0;
 562              		.loc 1 159 0
 563 000a 2346     		mov	r3, r4
 564 000c 01F11F0C 		add	ip, r1, #31
 565              	.LVL78:
 566              	.L36:
 567              	.LBB3:
 165:25519/f25519.c **** 		for (j = 0; j <= i; j++)
 568              		.loc 1 165 0
 569 0010 1B0A     		lsrs	r3, r3, #8
 570              	.LVL79:
 571 0012 4D1E     		subs	r5, r1, #1
 572 0014 1619     		adds	r6, r2, r4
 573 0016 6718     		adds	r7, r4, r1
 574              	.LVL80:
 575              	.L33:
 167:25519/f25519.c **** 
 576              		.loc 1 167 0 discriminator 3
 577 0018 15F8018F 		ldrb	r8, [r5, #1]!	@ zero_extendqisi2
 578 001c 16F80199 		ldrb	r9, [r6], #-1	@ zero_extendqisi2
 166:25519/f25519.c **** 			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 579              		.loc 1 166 0 discriminator 3
 580 0020 BD42     		cmp	r5, r7
 167:25519/f25519.c **** 
 581              		.loc 1 167 0 discriminator 3
 582 0022 09FB0833 		mla	r3, r9, r8, r3
 583              	.LVL81:
 166:25519/f25519.c **** 			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 584              		.loc 1 166 0 discriminator 3
 585 0026 F7D1     		bne	.L33
 586 0028 02F12007 		add	r7, r2, #32
 587              	.L34:
 169:25519/f25519.c **** 			c += ((uint32_t)a[j]) *
 588              		.loc 1 169 0 discriminator 1
 589 002c AC45     		cmp	ip, r5
 590 002e 16D1     		bne	.L35
 172:25519/f25519.c **** 
 173:25519/f25519.c **** 		r[i] = c;
 591              		.loc 1 173 0 discriminator 2
 592 0030 0355     		strb	r3, [r0, r4]
 593              	.LBE3:
 162:25519/f25519.c **** 		int j;
 594              		.loc 1 162 0 discriminator 2
 595 0032 0134     		adds	r4, r4, #1
 596              	.LVL82:
 597 0034 202C     		cmp	r4, #32
 598 0036 EBD1     		bne	.L36
 174:25519/f25519.c **** 	}
 175:25519/f25519.c **** 
 176:25519/f25519.c **** 	r[31] &= 127;
 599              		.loc 1 176 0
 600 0038 C27F     		ldrb	r2, [r0, #31]	@ zero_extendqisi2
 601              	.LVL83:
 177:25519/f25519.c **** 	c = (c >> 7) * 19;
 602              		.loc 1 177 0
 603 003a DB09     		lsrs	r3, r3, #7
 604              	.LVL84:
 176:25519/f25519.c **** 	c = (c >> 7) * 19;
 605              		.loc 1 176 0
 606 003c 02F07F02 		and	r2, r2, #127
 607 0040 C277     		strb	r2, [r0, #31]
 608              		.loc 1 177 0
 609 0042 1322     		movs	r2, #19
 610 0044 5343     		muls	r3, r2, r3
 611              	.LVL85:
 612 0046 421E     		subs	r2, r0, #1
 613 0048 1F30     		adds	r0, r0, #31
 614              	.LVL86:
 615              	.L37:
 178:25519/f25519.c **** 
 179:25519/f25519.c **** 	for (i = 0; i < F25519_SIZE; i++) {
 180:25519/f25519.c **** 		c += r[i];
 616              		.loc 1 180 0 discriminator 3
 617 004a 12F8011F 		ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 618              	.LVL87:
 619 004e 0B44     		add	r3, r3, r1
 620              	.LVL88:
 179:25519/f25519.c **** 		c += r[i];
 621              		.loc 1 179 0 discriminator 3
 622 0050 9042     		cmp	r0, r2
 181:25519/f25519.c **** 		r[i] = c;
 623              		.loc 1 181 0 discriminator 3
 624 0052 1370     		strb	r3, [r2]
 182:25519/f25519.c **** 		c >>= 8;
 625              		.loc 1 182 0 discriminator 3
 626 0054 4FEA1323 		lsr	r3, r3, #8
 627              	.LVL89:
 179:25519/f25519.c **** 		c += r[i];
 628              		.loc 1 179 0 discriminator 3
 629 0058 F7D1     		bne	.L37
 183:25519/f25519.c **** 	}
 184:25519/f25519.c **** }
 630              		.loc 1 184 0
 631 005a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 632              	.LVL90:
 633              	.L35:
 634              	.LBB4:
 171:25519/f25519.c **** 
 635              		.loc 1 171 0 discriminator 2
 636 005e 17F8016D 		ldrb	r6, [r7, #-1]!	@ zero_extendqisi2
 170:25519/f25519.c **** 			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 637              		.loc 1 170 0 discriminator 2
 638 0062 15F8018F 		ldrb	r8, [r5, #1]!	@ zero_extendqisi2
 171:25519/f25519.c **** 
 639              		.loc 1 171 0 discriminator 2
 640 0066 0EFB06F6 		mul	r6, lr, r6
 170:25519/f25519.c **** 			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 641              		.loc 1 170 0 discriminator 2
 642 006a 08FB0633 		mla	r3, r8, r6, r3
 643              	.LVL91:
 644 006e DDE7     		b	.L34
 645              	.LBE4:
 646              		.cfi_endproc
 647              	.LFE8:
 649              		.section	.text.f25519_mul,"ax",%progbits
 650              		.align	1
 651              		.global	f25519_mul
 652              		.syntax unified
 653              		.thumb
 654              		.thumb_func
 655              		.fpu softvfp
 657              	f25519_mul:
 658              	.LFB9:
 185:25519/f25519.c **** 
 186:25519/f25519.c **** void f25519_mul(uint8_t *r, const uint8_t *a, const uint8_t *b)
 187:25519/f25519.c **** {
 659              		.loc 1 187 0
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 32
 662              		@ frame_needed = 0, uses_anonymous_args = 0
 663              	.LVL92:
 664 0000 30B5     		push	{r4, r5, lr}
 665              		.cfi_def_cfa_offset 12
 666              		.cfi_offset 4, -12
 667              		.cfi_offset 5, -8
 668              		.cfi_offset 14, -4
 669 0002 0446     		mov	r4, r0
 670 0004 89B0     		sub	sp, sp, #36
 671              		.cfi_def_cfa_offset 48
 188:25519/f25519.c **** 	uint8_t tmp[F25519_SIZE];
 189:25519/f25519.c **** 
 190:25519/f25519.c **** 	f25519_mul__distinct(tmp, a, b);
 672              		.loc 1 190 0
 673 0006 6846     		mov	r0, sp
 674              	.LVL93:
 675 0008 FFF7FEFF 		bl	f25519_mul__distinct
 676              	.LVL94:
 677              	.LBB7:
 678              	.LBB8:
 679              		.file 2 "25519/f25519.h"
   1:25519/f25519.h **** /* Arithmetic mod p = 2^255-19
   2:25519/f25519.h ****  * Daniel Beer <dlbeer@gmail.com>, 8 Jan 2014
   3:25519/f25519.h ****  *
   4:25519/f25519.h ****  * This file is in the public domain.
   5:25519/f25519.h ****  */
   6:25519/f25519.h **** 
   7:25519/f25519.h **** #ifndef F25519_H_
   8:25519/f25519.h **** #define F25519_H_
   9:25519/f25519.h **** 
  10:25519/f25519.h **** #include <stdint.h>
  11:25519/f25519.h **** #include <string.h>
  12:25519/f25519.h **** 
  13:25519/f25519.h **** /* Field elements are represented as little-endian byte strings. All
  14:25519/f25519.h ****  * operations have timings which are independent of input data, so they
  15:25519/f25519.h ****  * can be safely used for cryptography.
  16:25519/f25519.h ****  *
  17:25519/f25519.h ****  * Computation is performed on un-normalized elements. These are byte
  18:25519/f25519.h ****  * strings which fall into the range 0 <= x < 2p. Use f25519_normalize()
  19:25519/f25519.h ****  * to convert to a value 0 <= x < p.
  20:25519/f25519.h ****  *
  21:25519/f25519.h ****  * Elements received from the outside may greater even than 2p.
  22:25519/f25519.h ****  * f25519_normalize() will correctly deal with these numbers too.
  23:25519/f25519.h ****  */
  24:25519/f25519.h **** #define F25519_SIZE		32
  25:25519/f25519.h **** 
  26:25519/f25519.h **** /* Identity constants */
  27:25519/f25519.h **** extern const uint8_t f25519_zero[F25519_SIZE];
  28:25519/f25519.h **** extern const uint8_t f25519_one[F25519_SIZE];
  29:25519/f25519.h **** 
  30:25519/f25519.h **** /* Load a small constant */
  31:25519/f25519.h **** void f25519_load(uint8_t *x, uint32_t c);
  32:25519/f25519.h **** 
  33:25519/f25519.h **** /* Copy two points */
  34:25519/f25519.h **** static inline void f25519_copy(uint8_t *x, const uint8_t *a)
  35:25519/f25519.h **** {
  36:25519/f25519.h **** 	memcpy(x, a, F25519_SIZE);
 680              		.loc 2 36 0
 681 000c 6A46     		mov	r2, sp
 682 000e 2346     		mov	r3, r4
 683 0010 08AD     		add	r5, sp, #32
 684              	.LVL95:
 685              	.L42:
 686 0012 1446     		mov	r4, r2
 687 0014 03CC     		ldmia	r4!, {r0, r1}
 688 0016 AC42     		cmp	r4, r5
 689 0018 1860     		str	r0, [r3]	@ unaligned
 690 001a 5960     		str	r1, [r3, #4]	@ unaligned
 691 001c 2246     		mov	r2, r4
 692 001e 03F10803 		add	r3, r3, #8
 693 0022 F6D1     		bne	.L42
 694              	.LBE8:
 695              	.LBE7:
 191:25519/f25519.c **** 	f25519_copy(r, tmp);
 192:25519/f25519.c **** }
 696              		.loc 1 192 0
 697 0024 09B0     		add	sp, sp, #36
 698              		.cfi_def_cfa_offset 12
 699              	.LVL96:
 700              		@ sp needed
 701 0026 30BD     		pop	{r4, r5, pc}
 702              		.cfi_endproc
 703              	.LFE9:
 705              		.section	.text.f25519_mul_c,"ax",%progbits
 706              		.align	1
 707              		.global	f25519_mul_c
 708              		.syntax unified
 709              		.thumb
 710              		.thumb_func
 711              		.fpu softvfp
 713              	f25519_mul_c:
 714              	.LFB10:
 193:25519/f25519.c **** 
 194:25519/f25519.c **** void f25519_mul_c(uint8_t *r, const uint8_t *a, uint32_t b)
 195:25519/f25519.c **** {
 715              		.loc 1 195 0
 716              		.cfi_startproc
 717              		@ args = 0, pretend = 0, frame = 0
 718              		@ frame_needed = 0, uses_anonymous_args = 0
 719              	.LVL97:
 720 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 721              		.cfi_def_cfa_offset 20
 722              		.cfi_offset 4, -20
 723              		.cfi_offset 5, -16
 724              		.cfi_offset 6, -12
 725              		.cfi_offset 7, -8
 726              		.cfi_offset 14, -4
 727 0002 441E     		subs	r4, r0, #1
 728              		.loc 1 195 0
 729 0004 2746     		mov	r7, r4
 196:25519/f25519.c **** 	uint32_t c = 0;
 730              		.loc 1 196 0
 731 0006 0023     		movs	r3, #0
 732 0008 4D1E     		subs	r5, r1, #1
 733 000a 1F31     		adds	r1, r1, #31
 734              	.LVL98:
 735              	.L45:
 197:25519/f25519.c **** 	int i;
 198:25519/f25519.c **** 
 199:25519/f25519.c **** 	for (i = 0; i < F25519_SIZE; i++) {
 200:25519/f25519.c **** 		c >>= 8;
 201:25519/f25519.c **** 		c += b * ((uint32_t)a[i]);
 736              		.loc 1 201 0 discriminator 3
 737 000c 15F8016F 		ldrb	r6, [r5, #1]!	@ zero_extendqisi2
 738              	.LVL99:
 739 0010 5643     		muls	r6, r2, r6
 199:25519/f25519.c **** 		c >>= 8;
 740              		.loc 1 199 0 discriminator 3
 741 0012 8D42     		cmp	r5, r1
 742              		.loc 1 201 0 discriminator 3
 743 0014 06EB1323 		add	r3, r6, r3, lsr #8
 744              	.LVL100:
 202:25519/f25519.c **** 		r[i] = c;
 745              		.loc 1 202 0 discriminator 3
 746 0018 07F8013F 		strb	r3, [r7, #1]!
 747              	.LVL101:
 199:25519/f25519.c **** 		c >>= 8;
 748              		.loc 1 199 0 discriminator 3
 749 001c F6D1     		bne	.L45
 203:25519/f25519.c **** 	}
 204:25519/f25519.c **** 
 205:25519/f25519.c **** 	r[31] &= 127;
 750              		.loc 1 205 0
 751 001e C27F     		ldrb	r2, [r0, #31]	@ zero_extendqisi2
 752              	.LVL102:
 753 0020 02F07F02 		and	r2, r2, #127
 754 0024 00F81F2F 		strb	r2, [r0, #31]!
 755              	.LVL103:
 206:25519/f25519.c **** 	c >>= 7;
 756              		.loc 1 206 0
 757 0028 DA09     		lsrs	r2, r3, #7
 758              	.LVL104:
 207:25519/f25519.c **** 	c *= 19;
 759              		.loc 1 207 0
 760 002a 1323     		movs	r3, #19
 761 002c 5343     		muls	r3, r2, r3
 762              	.LVL105:
 763              	.L46:
 208:25519/f25519.c **** 
 209:25519/f25519.c **** 	for (i = 0; i < F25519_SIZE; i++) {
 210:25519/f25519.c **** 		c += r[i];
 764              		.loc 1 210 0 discriminator 3
 765 002e 14F8012F 		ldrb	r2, [r4, #1]!	@ zero_extendqisi2
 766              	.LVL106:
 767 0032 1344     		add	r3, r3, r2
 768              	.LVL107:
 209:25519/f25519.c **** 		c += r[i];
 769              		.loc 1 209 0 discriminator 3
 770 0034 A042     		cmp	r0, r4
 211:25519/f25519.c **** 		r[i] = c;
 771              		.loc 1 211 0 discriminator 3
 772 0036 2370     		strb	r3, [r4]
 212:25519/f25519.c **** 		c >>= 8;
 773              		.loc 1 212 0 discriminator 3
 774 0038 4FEA1323 		lsr	r3, r3, #8
 775              	.LVL108:
 209:25519/f25519.c **** 		c += r[i];
 776              		.loc 1 209 0 discriminator 3
 777 003c F7D1     		bne	.L46
 213:25519/f25519.c **** 	}
 214:25519/f25519.c **** }
 778              		.loc 1 214 0
 779 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 780              		.cfi_endproc
 781              	.LFE10:
 783              		.section	.text.f25519_inv__distinct,"ax",%progbits
 784              		.align	1
 785              		.global	f25519_inv__distinct
 786              		.syntax unified
 787              		.thumb
 788              		.thumb_func
 789              		.fpu softvfp
 791              	f25519_inv__distinct:
 792              	.LFB11:
 215:25519/f25519.c **** 
 216:25519/f25519.c **** void f25519_inv__distinct(uint8_t *r, const uint8_t *x)
 217:25519/f25519.c **** {
 793              		.loc 1 217 0
 794              		.cfi_startproc
 795              		@ args = 0, pretend = 0, frame = 32
 796              		@ frame_needed = 0, uses_anonymous_args = 0
 797              	.LVL109:
 798 0000 70B5     		push	{r4, r5, r6, lr}
 799              		.cfi_def_cfa_offset 16
 800              		.cfi_offset 4, -16
 801              		.cfi_offset 5, -12
 802              		.cfi_offset 6, -8
 803              		.cfi_offset 14, -4
 804 0002 0D46     		mov	r5, r1
 805 0004 0446     		mov	r4, r0
 806 0006 88B0     		sub	sp, sp, #32
 807              		.cfi_def_cfa_offset 48
 218:25519/f25519.c **** 	uint8_t s[F25519_SIZE];
 219:25519/f25519.c **** 	int i;
 220:25519/f25519.c **** 
 221:25519/f25519.c **** 	/* This is a prime field, so by Fermat's little theorem:
 222:25519/f25519.c **** 	 *
 223:25519/f25519.c **** 	 *     x^(p-1) = 1 mod p
 224:25519/f25519.c **** 	 *
 225:25519/f25519.c **** 	 * Therefore, raise to (p-2) = 2^255-21 to get a multiplicative
 226:25519/f25519.c **** 	 * inverse.
 227:25519/f25519.c **** 	 *
 228:25519/f25519.c **** 	 * This is a 255-bit binary number with the digits:
 229:25519/f25519.c **** 	 *
 230:25519/f25519.c **** 	 *     11111111... 01011
 231:25519/f25519.c **** 	 *
 232:25519/f25519.c **** 	 * We compute the result by the usual binary chain, but
 233:25519/f25519.c **** 	 * alternate between keeping the accumulator in r and s, so as
 234:25519/f25519.c **** 	 * to avoid copying temporaries.
 235:25519/f25519.c **** 	 */
 236:25519/f25519.c **** 
 237:25519/f25519.c **** 	/* 1 1 */
 238:25519/f25519.c **** 	f25519_mul__distinct(s, x, x);
 808              		.loc 1 238 0
 809 0008 0A46     		mov	r2, r1
 810 000a 6846     		mov	r0, sp
 811              	.LVL110:
 812 000c FFF7FEFF 		bl	f25519_mul__distinct
 813              	.LVL111:
 239:25519/f25519.c **** 	f25519_mul__distinct(r, s, x);
 814              		.loc 1 239 0
 815 0010 2A46     		mov	r2, r5
 816 0012 6946     		mov	r1, sp
 817 0014 2046     		mov	r0, r4
 818 0016 FFF7FEFF 		bl	f25519_mul__distinct
 819              	.LVL112:
 820 001a F826     		movs	r6, #248
 821              	.LVL113:
 822              	.L50:
 240:25519/f25519.c **** 
 241:25519/f25519.c **** 	/* 1 x 248 */
 242:25519/f25519.c **** 	for (i = 0; i < 248; i++) {
 243:25519/f25519.c **** 		f25519_mul__distinct(s, r, r);
 823              		.loc 1 243 0 discriminator 3
 824 001c 2246     		mov	r2, r4
 825 001e 2146     		mov	r1, r4
 826 0020 6846     		mov	r0, sp
 827 0022 FFF7FEFF 		bl	f25519_mul__distinct
 828              	.LVL114:
 244:25519/f25519.c **** 		f25519_mul__distinct(r, s, x);
 829              		.loc 1 244 0 discriminator 3
 830 0026 2A46     		mov	r2, r5
 831 0028 6946     		mov	r1, sp
 832 002a 2046     		mov	r0, r4
 833 002c FFF7FEFF 		bl	f25519_mul__distinct
 834              	.LVL115:
 242:25519/f25519.c **** 		f25519_mul__distinct(s, r, r);
 835              		.loc 1 242 0 discriminator 3
 836 0030 013E     		subs	r6, r6, #1
 837              	.LVL116:
 838 0032 F3D1     		bne	.L50
 245:25519/f25519.c **** 	}
 246:25519/f25519.c **** 
 247:25519/f25519.c **** 	/* 0 */
 248:25519/f25519.c **** 	f25519_mul__distinct(s, r, r);
 839              		.loc 1 248 0
 840 0034 2246     		mov	r2, r4
 841 0036 2146     		mov	r1, r4
 842 0038 6846     		mov	r0, sp
 843 003a FFF7FEFF 		bl	f25519_mul__distinct
 844              	.LVL117:
 249:25519/f25519.c **** 
 250:25519/f25519.c **** 	/* 1 */
 251:25519/f25519.c **** 	f25519_mul__distinct(r, s, s);
 845              		.loc 1 251 0
 846 003e 6A46     		mov	r2, sp
 847 0040 6946     		mov	r1, sp
 848 0042 2046     		mov	r0, r4
 849 0044 FFF7FEFF 		bl	f25519_mul__distinct
 850              	.LVL118:
 252:25519/f25519.c **** 	f25519_mul__distinct(s, r, x);
 851              		.loc 1 252 0
 852 0048 2A46     		mov	r2, r5
 853 004a 2146     		mov	r1, r4
 854 004c 6846     		mov	r0, sp
 855 004e FFF7FEFF 		bl	f25519_mul__distinct
 856              	.LVL119:
 253:25519/f25519.c **** 
 254:25519/f25519.c **** 	/* 0 */
 255:25519/f25519.c **** 	f25519_mul__distinct(r, s, s);
 857              		.loc 1 255 0
 858 0052 6A46     		mov	r2, sp
 859 0054 6946     		mov	r1, sp
 860 0056 2046     		mov	r0, r4
 861 0058 FFF7FEFF 		bl	f25519_mul__distinct
 862              	.LVL120:
 256:25519/f25519.c **** 
 257:25519/f25519.c **** 	/* 1 */
 258:25519/f25519.c **** 	f25519_mul__distinct(s, r, r);
 863              		.loc 1 258 0
 864 005c 2246     		mov	r2, r4
 865 005e 2146     		mov	r1, r4
 866 0060 6846     		mov	r0, sp
 867 0062 FFF7FEFF 		bl	f25519_mul__distinct
 868              	.LVL121:
 259:25519/f25519.c **** 	f25519_mul__distinct(r, s, x);
 869              		.loc 1 259 0
 870 0066 2A46     		mov	r2, r5
 871 0068 6946     		mov	r1, sp
 872 006a 2046     		mov	r0, r4
 873 006c FFF7FEFF 		bl	f25519_mul__distinct
 874              	.LVL122:
 260:25519/f25519.c **** 
 261:25519/f25519.c **** 	/* 1 */
 262:25519/f25519.c **** 	f25519_mul__distinct(s, r, r);
 875              		.loc 1 262 0
 876 0070 2246     		mov	r2, r4
 877 0072 2146     		mov	r1, r4
 878 0074 6846     		mov	r0, sp
 879 0076 FFF7FEFF 		bl	f25519_mul__distinct
 880              	.LVL123:
 263:25519/f25519.c **** 	f25519_mul__distinct(r, s, x);
 881              		.loc 1 263 0
 882 007a 2A46     		mov	r2, r5
 883 007c 6946     		mov	r1, sp
 884 007e 2046     		mov	r0, r4
 885 0080 FFF7FEFF 		bl	f25519_mul__distinct
 886              	.LVL124:
 264:25519/f25519.c **** }
 887              		.loc 1 264 0
 888 0084 08B0     		add	sp, sp, #32
 889              		.cfi_def_cfa_offset 16
 890              		@ sp needed
 891 0086 70BD     		pop	{r4, r5, r6, pc}
 892              		.cfi_endproc
 893              	.LFE11:
 895              		.section	.text.f25519_inv,"ax",%progbits
 896              		.align	1
 897              		.global	f25519_inv
 898              		.syntax unified
 899              		.thumb
 900              		.thumb_func
 901              		.fpu softvfp
 903              	f25519_inv:
 904              	.LFB12:
 265:25519/f25519.c **** 
 266:25519/f25519.c **** void f25519_inv(uint8_t *r, const uint8_t *x)
 267:25519/f25519.c **** {
 905              		.loc 1 267 0
 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 32
 908              		@ frame_needed = 0, uses_anonymous_args = 0
 909              	.LVL125:
 910 0000 30B5     		push	{r4, r5, lr}
 911              		.cfi_def_cfa_offset 12
 912              		.cfi_offset 4, -12
 913              		.cfi_offset 5, -8
 914              		.cfi_offset 14, -4
 915 0002 0446     		mov	r4, r0
 916 0004 89B0     		sub	sp, sp, #36
 917              		.cfi_def_cfa_offset 48
 268:25519/f25519.c **** 	uint8_t tmp[F25519_SIZE];
 269:25519/f25519.c **** 
 270:25519/f25519.c **** 	f25519_inv__distinct(tmp, x);
 918              		.loc 1 270 0
 919 0006 6846     		mov	r0, sp
 920              	.LVL126:
 921 0008 FFF7FEFF 		bl	f25519_inv__distinct
 922              	.LVL127:
 923              	.LBB11:
 924              	.LBB12:
 925              		.loc 2 36 0
 926 000c 6A46     		mov	r2, sp
 927 000e 2346     		mov	r3, r4
 928 0010 08AD     		add	r5, sp, #32
 929              	.LVL128:
 930              	.L53:
 931 0012 1446     		mov	r4, r2
 932 0014 03CC     		ldmia	r4!, {r0, r1}
 933 0016 AC42     		cmp	r4, r5
 934 0018 1860     		str	r0, [r3]	@ unaligned
 935 001a 5960     		str	r1, [r3, #4]	@ unaligned
 936 001c 2246     		mov	r2, r4
 937 001e 03F10803 		add	r3, r3, #8
 938 0022 F6D1     		bne	.L53
 939              	.LBE12:
 940              	.LBE11:
 271:25519/f25519.c **** 	f25519_copy(r, tmp);
 272:25519/f25519.c **** }
 941              		.loc 1 272 0
 942 0024 09B0     		add	sp, sp, #36
 943              		.cfi_def_cfa_offset 12
 944              	.LVL129:
 945              		@ sp needed
 946 0026 30BD     		pop	{r4, r5, pc}
 947              		.cfi_endproc
 948              	.LFE12:
 950              		.section	.text.f25519_sqrt,"ax",%progbits
 951              		.align	1
 952              		.global	f25519_sqrt
 953              		.syntax unified
 954              		.thumb
 955              		.thumb_func
 956              		.fpu softvfp
 958              	f25519_sqrt:
 959              	.LFB14:
 273:25519/f25519.c **** 
 274:25519/f25519.c **** /* Raise x to the power of (p-5)/8 = 2^252-3, using s for temporary
 275:25519/f25519.c ****  * storage.
 276:25519/f25519.c ****  */
 277:25519/f25519.c **** static void exp2523(uint8_t *r, const uint8_t *x, uint8_t *s)
 278:25519/f25519.c **** {
 279:25519/f25519.c **** 	int i;
 280:25519/f25519.c **** 
 281:25519/f25519.c **** 	/* This number is a 252-bit number with the binary expansion:
 282:25519/f25519.c **** 	 *
 283:25519/f25519.c **** 	 *     111111... 01
 284:25519/f25519.c **** 	 */
 285:25519/f25519.c **** 
 286:25519/f25519.c **** 	/* 1 1 */
 287:25519/f25519.c **** 	f25519_mul__distinct(r, x, x);
 288:25519/f25519.c **** 	f25519_mul__distinct(s, r, x);
 289:25519/f25519.c **** 
 290:25519/f25519.c **** 	/* 1 x 248 */
 291:25519/f25519.c **** 	for (i = 0; i < 248; i++) {
 292:25519/f25519.c **** 		f25519_mul__distinct(r, s, s);
 293:25519/f25519.c **** 		f25519_mul__distinct(s, r, x);
 294:25519/f25519.c **** 	}
 295:25519/f25519.c **** 
 296:25519/f25519.c **** 	/* 0 */
 297:25519/f25519.c **** 	f25519_mul__distinct(r, s, s);
 298:25519/f25519.c **** 
 299:25519/f25519.c **** 	/* 1 */
 300:25519/f25519.c **** 	f25519_mul__distinct(s, r, r);
 301:25519/f25519.c **** 	f25519_mul__distinct(r, s, x);
 302:25519/f25519.c **** }
 303:25519/f25519.c **** 
 304:25519/f25519.c **** void f25519_sqrt(uint8_t *r, const uint8_t *a)
 305:25519/f25519.c **** {
 960              		.loc 1 305 0
 961              		.cfi_startproc
 962              		@ args = 0, pretend = 0, frame = 128
 963              		@ frame_needed = 0, uses_anonymous_args = 0
 964              	.LVL130:
 965 0000 70B5     		push	{r4, r5, r6, lr}
 966              		.cfi_def_cfa_offset 16
 967              		.cfi_offset 4, -16
 968              		.cfi_offset 5, -12
 969              		.cfi_offset 6, -8
 970              		.cfi_offset 14, -4
 971 0002 A0B0     		sub	sp, sp, #128
 972              		.cfi_def_cfa_offset 144
 306:25519/f25519.c **** 	uint8_t v[F25519_SIZE];
 307:25519/f25519.c **** 	uint8_t i[F25519_SIZE];
 308:25519/f25519.c **** 	uint8_t x[F25519_SIZE];
 309:25519/f25519.c **** 	uint8_t y[F25519_SIZE];
 310:25519/f25519.c **** 
 311:25519/f25519.c **** 	/* v = (2a)^((p-5)/8) [x = 2a] */
 312:25519/f25519.c **** 	f25519_mul_c(x, a, 2);
 973              		.loc 1 312 0
 974 0004 0222     		movs	r2, #2
 305:25519/f25519.c **** 	uint8_t v[F25519_SIZE];
 975              		.loc 1 305 0
 976 0006 0546     		mov	r5, r0
 977              		.loc 1 312 0
 978 0008 10A8     		add	r0, sp, #64
 979              	.LVL131:
 305:25519/f25519.c **** 	uint8_t v[F25519_SIZE];
 980              		.loc 1 305 0
 981 000a 0E46     		mov	r6, r1
 982              		.loc 1 312 0
 983 000c FFF7FEFF 		bl	f25519_mul_c
 984              	.LVL132:
 985              	.LBB15:
 986              	.LBB16:
 287:25519/f25519.c **** 	f25519_mul__distinct(s, r, x);
 987              		.loc 1 287 0
 988 0010 10AA     		add	r2, sp, #64
 989              	.LVL133:
 990 0012 1146     		mov	r1, r2
 991 0014 6846     		mov	r0, sp
 992 0016 FFF7FEFF 		bl	f25519_mul__distinct
 993              	.LVL134:
 288:25519/f25519.c **** 
 994              		.loc 1 288 0
 995 001a 10AA     		add	r2, sp, #64
 996              	.LVL135:
 997 001c 6946     		mov	r1, sp
 998 001e 18A8     		add	r0, sp, #96
 999              	.LVL136:
 1000 0020 FFF7FEFF 		bl	f25519_mul__distinct
 1001              	.LVL137:
 1002 0024 F824     		movs	r4, #248
 1003              	.LVL138:
 1004              	.L56:
 292:25519/f25519.c **** 		f25519_mul__distinct(s, r, x);
 1005              		.loc 1 292 0
 1006 0026 18AA     		add	r2, sp, #96
 1007              	.LVL139:
 1008 0028 1146     		mov	r1, r2
 1009 002a 6846     		mov	r0, sp
 1010 002c FFF7FEFF 		bl	f25519_mul__distinct
 1011              	.LVL140:
 293:25519/f25519.c **** 	}
 1012              		.loc 1 293 0
 1013 0030 10AA     		add	r2, sp, #64
 1014              	.LVL141:
 1015 0032 6946     		mov	r1, sp
 1016 0034 18A8     		add	r0, sp, #96
 1017              	.LVL142:
 1018 0036 FFF7FEFF 		bl	f25519_mul__distinct
 1019              	.LVL143:
 291:25519/f25519.c **** 		f25519_mul__distinct(r, s, s);
 1020              		.loc 1 291 0
 1021 003a 013C     		subs	r4, r4, #1
 1022              	.LVL144:
 1023 003c F3D1     		bne	.L56
 297:25519/f25519.c **** 
 1024              		.loc 1 297 0
 1025 003e 18AA     		add	r2, sp, #96
 1026              	.LVL145:
 1027 0040 1146     		mov	r1, r2
 1028 0042 6846     		mov	r0, sp
 1029 0044 FFF7FEFF 		bl	f25519_mul__distinct
 1030              	.LVL146:
 300:25519/f25519.c **** 	f25519_mul__distinct(r, s, x);
 1031              		.loc 1 300 0
 1032 0048 6A46     		mov	r2, sp
 1033 004a 6946     		mov	r1, sp
 1034 004c 18A8     		add	r0, sp, #96
 1035              	.LVL147:
 1036 004e FFF7FEFF 		bl	f25519_mul__distinct
 1037              	.LVL148:
 301:25519/f25519.c **** }
 1038              		.loc 1 301 0
 1039 0052 10AA     		add	r2, sp, #64
 1040              	.LVL149:
 1041 0054 18A9     		add	r1, sp, #96
 1042              	.LVL150:
 1043 0056 6846     		mov	r0, sp
 1044 0058 FFF7FEFF 		bl	f25519_mul__distinct
 1045              	.LVL151:
 1046              	.LBE16:
 1047              	.LBE15:
 313:25519/f25519.c **** 	exp2523(v, x, y);
 314:25519/f25519.c **** 
 315:25519/f25519.c **** 	/* i = 2av^2 - 1 */
 316:25519/f25519.c **** 	f25519_mul__distinct(y, v, v);
 1048              		.loc 1 316 0
 1049 005c 6A46     		mov	r2, sp
 1050 005e 6946     		mov	r1, sp
 1051 0060 18A8     		add	r0, sp, #96
 1052 0062 FFF7FEFF 		bl	f25519_mul__distinct
 1053              	.LVL152:
 317:25519/f25519.c **** 	f25519_mul__distinct(i, x, y);
 1054              		.loc 1 317 0
 1055 0066 18AA     		add	r2, sp, #96
 1056 0068 10A9     		add	r1, sp, #64
 1057 006a 08A8     		add	r0, sp, #32
 1058 006c FFF7FEFF 		bl	f25519_mul__distinct
 1059              	.LVL153:
 318:25519/f25519.c **** 	f25519_load(y, 1);
 1060              		.loc 1 318 0
 1061 0070 18A8     		add	r0, sp, #96
 1062 0072 0121     		movs	r1, #1
 1063 0074 FFF7FEFF 		bl	f25519_load
 1064              	.LVL154:
 319:25519/f25519.c **** 	f25519_sub(i, i, y);
 1065              		.loc 1 319 0
 1066 0078 08A9     		add	r1, sp, #32
 1067 007a 18AA     		add	r2, sp, #96
 1068 007c 0846     		mov	r0, r1
 1069 007e FFF7FEFF 		bl	f25519_sub
 1070              	.LVL155:
 320:25519/f25519.c **** 
 321:25519/f25519.c **** 	/* r = avi */
 322:25519/f25519.c **** 	f25519_mul__distinct(x, v, a);
 1071              		.loc 1 322 0
 1072 0082 3246     		mov	r2, r6
 1073 0084 6946     		mov	r1, sp
 1074 0086 10A8     		add	r0, sp, #64
 1075 0088 FFF7FEFF 		bl	f25519_mul__distinct
 1076              	.LVL156:
 323:25519/f25519.c **** 	f25519_mul__distinct(r, x, i);
 1077              		.loc 1 323 0
 1078 008c 08AA     		add	r2, sp, #32
 1079 008e 10A9     		add	r1, sp, #64
 1080 0090 2846     		mov	r0, r5
 1081 0092 FFF7FEFF 		bl	f25519_mul__distinct
 1082              	.LVL157:
 324:25519/f25519.c **** }
 1083              		.loc 1 324 0
 1084 0096 20B0     		add	sp, sp, #128
 1085              		.cfi_def_cfa_offset 16
 1086              		@ sp needed
 1087 0098 70BD     		pop	{r4, r5, r6, pc}
 1088              		.cfi_endproc
 1089              	.LFE14:
 1091              		.global	f25519_one
 1092              		.global	f25519_zero
 1093              		.section	.rodata.f25519_one,"a",%progbits
 1096              	f25519_one:
 1097 0000 01       		.byte	1
 1098 0001 00000000 		.space	31
 1098      00000000 
 1098      00000000 
 1098      00000000 
 1098      00000000 
 1099              		.section	.rodata.f25519_zero,"a",%progbits
 1102              	f25519_zero:
 1103 0000 00000000 		.space	32
 1103      00000000 
 1103      00000000 
 1103      00000000 
 1103      00000000 
 1104              		.text
 1105              	.Letext0:
 1106              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1107              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1108              		.file 5 "/usr/arm-none-eabi/include/sys/lock.h"
 1109              		.file 6 "/usr/arm-none-eabi/include/sys/_types.h"
 1110              		.file 7 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 1111              		.file 8 "/usr/arm-none-eabi/include/sys/reent.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 f25519.c
     /tmp/ccgw6nhw.s:16     .text.f25519_load:0000000000000000 $t
     /tmp/ccgw6nhw.s:23     .text.f25519_load:0000000000000000 f25519_load
     /tmp/ccgw6nhw.s:65     .text.f25519_eq:0000000000000000 $t
     /tmp/ccgw6nhw.s:72     .text.f25519_eq:0000000000000000 f25519_eq
     /tmp/ccgw6nhw.s:126    .text.f25519_select:0000000000000000 $t
     /tmp/ccgw6nhw.s:133    .text.f25519_select:0000000000000000 f25519_select
     /tmp/ccgw6nhw.s:181    .text.f25519_normalize:0000000000000000 $t
     /tmp/ccgw6nhw.s:188    .text.f25519_normalize:0000000000000000 f25519_normalize
     /tmp/ccgw6nhw.s:284    .text.f25519_add:0000000000000000 $t
     /tmp/ccgw6nhw.s:291    .text.f25519_add:0000000000000000 f25519_add
     /tmp/ccgw6nhw.s:368    .text.f25519_sub:0000000000000000 $t
     /tmp/ccgw6nhw.s:375    .text.f25519_sub:0000000000000000 f25519_sub
     /tmp/ccgw6nhw.s:454    .text.f25519_neg:0000000000000000 $t
     /tmp/ccgw6nhw.s:461    .text.f25519_neg:0000000000000000 f25519_neg
     /tmp/ccgw6nhw.s:533    .text.f25519_mul__distinct:0000000000000000 $t
     /tmp/ccgw6nhw.s:540    .text.f25519_mul__distinct:0000000000000000 f25519_mul__distinct
     /tmp/ccgw6nhw.s:650    .text.f25519_mul:0000000000000000 $t
     /tmp/ccgw6nhw.s:657    .text.f25519_mul:0000000000000000 f25519_mul
     /tmp/ccgw6nhw.s:706    .text.f25519_mul_c:0000000000000000 $t
     /tmp/ccgw6nhw.s:713    .text.f25519_mul_c:0000000000000000 f25519_mul_c
     /tmp/ccgw6nhw.s:784    .text.f25519_inv__distinct:0000000000000000 $t
     /tmp/ccgw6nhw.s:791    .text.f25519_inv__distinct:0000000000000000 f25519_inv__distinct
     /tmp/ccgw6nhw.s:896    .text.f25519_inv:0000000000000000 $t
     /tmp/ccgw6nhw.s:903    .text.f25519_inv:0000000000000000 f25519_inv
     /tmp/ccgw6nhw.s:951    .text.f25519_sqrt:0000000000000000 $t
     /tmp/ccgw6nhw.s:958    .text.f25519_sqrt:0000000000000000 f25519_sqrt
     /tmp/ccgw6nhw.s:1096   .rodata.f25519_one:0000000000000000 f25519_one
     /tmp/ccgw6nhw.s:1102   .rodata.f25519_zero:0000000000000000 f25519_zero
     /tmp/ccgw6nhw.s:1098   .rodata.f25519_one:0000000000000001 $d
     /tmp/ccgw6nhw.s:1103   .rodata.f25519_zero:0000000000000000 $d

NO UNDEFINED SYMBOLS
