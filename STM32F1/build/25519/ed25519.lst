   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"ed25519.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.ed25519_project,"ax",%progbits
  16              		.align	1
  17              		.global	ed25519_project
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	ed25519_project:
  24              	.LFB3:
  25              		.file 1 "25519/ed25519.c"
   1:25519/ed25519.c **** /* Edwards curve operations
   2:25519/ed25519.c ****  * Daniel Beer <dlbeer@gmail.com>, 9 Jan 2014
   3:25519/ed25519.c ****  *
   4:25519/ed25519.c ****  * This file is in the public domain.
   5:25519/ed25519.c ****  */
   6:25519/ed25519.c **** 
   7:25519/ed25519.c **** #include "ed25519.h"
   8:25519/ed25519.c **** 
   9:25519/ed25519.c **** /* Base point is (numbers wrapped):
  10:25519/ed25519.c ****  *
  11:25519/ed25519.c ****  *     x = 151122213495354007725011514095885315114
  12:25519/ed25519.c ****  *         54012693041857206046113283949847762202
  13:25519/ed25519.c ****  *     y = 463168356949264781694283940034751631413
  14:25519/ed25519.c ****  *         07993866256225615783033603165251855960
  15:25519/ed25519.c ****  *
  16:25519/ed25519.c ****  * y is derived by transforming the original Montgomery base (u=9). x
  17:25519/ed25519.c ****  * is the corresponding positive coordinate for the new curve equation.
  18:25519/ed25519.c ****  * t is x*y.
  19:25519/ed25519.c ****  */
  20:25519/ed25519.c **** const struct ed25519_pt ed25519_base = {
  21:25519/ed25519.c **** 	.x = {
  22:25519/ed25519.c **** 		0x1a, 0xd5, 0x25, 0x8f, 0x60, 0x2d, 0x56, 0xc9,
  23:25519/ed25519.c **** 		0xb2, 0xa7, 0x25, 0x95, 0x60, 0xc7, 0x2c, 0x69,
  24:25519/ed25519.c **** 		0x5c, 0xdc, 0xd6, 0xfd, 0x31, 0xe2, 0xa4, 0xc0,
  25:25519/ed25519.c **** 		0xfe, 0x53, 0x6e, 0xcd, 0xd3, 0x36, 0x69, 0x21
  26:25519/ed25519.c **** 	},
  27:25519/ed25519.c **** 	.y = {
  28:25519/ed25519.c **** 		0x58, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
  29:25519/ed25519.c **** 		0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
  30:25519/ed25519.c **** 		0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
  31:25519/ed25519.c **** 		0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66
  32:25519/ed25519.c **** 	},
  33:25519/ed25519.c **** 	.t = {
  34:25519/ed25519.c **** 		0xa3, 0xdd, 0xb7, 0xa5, 0xb3, 0x8a, 0xde, 0x6d,
  35:25519/ed25519.c **** 		0xf5, 0x52, 0x51, 0x77, 0x80, 0x9f, 0xf0, 0x20,
  36:25519/ed25519.c **** 		0x7d, 0xe3, 0xab, 0x64, 0x8e, 0x4e, 0xea, 0x66,
  37:25519/ed25519.c **** 		0x65, 0x76, 0x8b, 0xd7, 0x0f, 0x5f, 0x87, 0x67
  38:25519/ed25519.c **** 	},
  39:25519/ed25519.c **** 	.z = {1, 0}
  40:25519/ed25519.c **** };
  41:25519/ed25519.c **** 
  42:25519/ed25519.c **** const struct ed25519_pt ed25519_neutral = {
  43:25519/ed25519.c **** 	.x = {0},
  44:25519/ed25519.c **** 	.y = {1, 0},
  45:25519/ed25519.c **** 	.t = {0},
  46:25519/ed25519.c **** 	.z = {1, 0}
  47:25519/ed25519.c **** };
  48:25519/ed25519.c **** 
  49:25519/ed25519.c **** /* Conversion to and from projective coordinates */
  50:25519/ed25519.c **** void ed25519_project(struct ed25519_pt *p,
  51:25519/ed25519.c **** 		     const uint8_t *x, const uint8_t *y)
  52:25519/ed25519.c **** {
  26              		.loc 1 52 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              		.cfi_def_cfa_offset 16
  33              		.cfi_offset 4, -16
  34              		.cfi_offset 5, -12
  35              		.cfi_offset 6, -8
  36              		.cfi_offset 14, -4
  37              		.loc 1 52 0
  38 0002 1646     		mov	r6, r2
  39 0004 0446     		mov	r4, r0
  40              	.LBB6:
  41              	.LBB7:
  42              		.file 2 "25519/f25519.h"
   1:25519/f25519.h **** /* Arithmetic mod p = 2^255-19
   2:25519/f25519.h ****  * Daniel Beer <dlbeer@gmail.com>, 8 Jan 2014
   3:25519/f25519.h ****  *
   4:25519/f25519.h ****  * This file is in the public domain.
   5:25519/f25519.h ****  */
   6:25519/f25519.h **** 
   7:25519/f25519.h **** #ifndef F25519_H_
   8:25519/f25519.h **** #define F25519_H_
   9:25519/f25519.h **** 
  10:25519/f25519.h **** #include <stdint.h>
  11:25519/f25519.h **** #include <string.h>
  12:25519/f25519.h **** 
  13:25519/f25519.h **** /* Field elements are represented as little-endian byte strings. All
  14:25519/f25519.h ****  * operations have timings which are independent of input data, so they
  15:25519/f25519.h ****  * can be safely used for cryptography.
  16:25519/f25519.h ****  *
  17:25519/f25519.h ****  * Computation is performed on un-normalized elements. These are byte
  18:25519/f25519.h ****  * strings which fall into the range 0 <= x < 2p. Use f25519_normalize()
  19:25519/f25519.h ****  * to convert to a value 0 <= x < p.
  20:25519/f25519.h ****  *
  21:25519/f25519.h ****  * Elements received from the outside may greater even than 2p.
  22:25519/f25519.h ****  * f25519_normalize() will correctly deal with these numbers too.
  23:25519/f25519.h ****  */
  24:25519/f25519.h **** #define F25519_SIZE		32
  25:25519/f25519.h **** 
  26:25519/f25519.h **** /* Identity constants */
  27:25519/f25519.h **** extern const uint8_t f25519_zero[F25519_SIZE];
  28:25519/f25519.h **** extern const uint8_t f25519_one[F25519_SIZE];
  29:25519/f25519.h **** 
  30:25519/f25519.h **** /* Load a small constant */
  31:25519/f25519.h **** void f25519_load(uint8_t *x, uint32_t c);
  32:25519/f25519.h **** 
  33:25519/f25519.h **** /* Copy two points */
  34:25519/f25519.h **** static inline void f25519_copy(uint8_t *x, const uint8_t *a)
  35:25519/f25519.h **** {
  36:25519/f25519.h **** 	memcpy(x, a, F25519_SIZE);
  43              		.loc 2 36 0
  44 0006 0246     		mov	r2, r0
  45              	.LVL1:
  46              	.LBE7:
  47              	.LBE6:
  48              		.loc 1 52 0
  49 0008 0D46     		mov	r5, r1
  50              	.LBB9:
  51              	.LBB8:
  52              		.loc 2 36 0
  53 000a 0B46     		mov	r3, r1
  54 000c 2031     		adds	r1, r1, #32
  55              	.LVL2:
  56              	.L2:
  57 000e 53F8040B 		ldr	r0, [r3], #4	@ unaligned
  58 0012 8B42     		cmp	r3, r1
  59 0014 42F8040B 		str	r0, [r2], #4	@ unaligned
  60 0018 F9D1     		bne	.L2
  61              	.LVL3:
  62              	.LBE8:
  63              	.LBE9:
  64              	.LBB10:
  65              	.LBB11:
  66 001a 3346     		mov	r3, r6
  67 001c 04F12002 		add	r2, r4, #32
  68              	.LVL4:
  69 0020 06F12001 		add	r1, r6, #32
  70              	.LVL5:
  71              	.L3:
  72 0024 53F8040B 		ldr	r0, [r3], #4	@ unaligned
  73 0028 8B42     		cmp	r3, r1
  74 002a 42F8040B 		str	r0, [r2], #4	@ unaligned
  75 002e F9D1     		bne	.L3
  76              	.LVL6:
  77              	.LBE11:
  78              	.LBE10:
  53:25519/ed25519.c **** 	f25519_copy(p->x, x);
  54:25519/ed25519.c **** 	f25519_copy(p->y, y);
  55:25519/ed25519.c **** 	f25519_load(p->z, 1);
  79              		.loc 1 55 0
  80 0030 04F16000 		add	r0, r4, #96
  81 0034 0121     		movs	r1, #1
  82 0036 FFF7FEFF 		bl	f25519_load
  83              	.LVL7:
  56:25519/ed25519.c **** 	f25519_mul__distinct(p->t, x, y);
  84              		.loc 1 56 0
  85 003a 3246     		mov	r2, r6
  86 003c 2946     		mov	r1, r5
  87 003e 04F14000 		add	r0, r4, #64
  57:25519/ed25519.c **** }
  88              		.loc 1 57 0
  89 0042 BDE87040 		pop	{r4, r5, r6, lr}
  90              		.cfi_restore 14
  91              		.cfi_restore 6
  92              		.cfi_restore 5
  93              		.cfi_restore 4
  94              		.cfi_def_cfa_offset 0
  95              	.LVL8:
  56:25519/ed25519.c **** 	f25519_mul__distinct(p->t, x, y);
  96              		.loc 1 56 0
  97 0046 FFF7FEBF 		b	f25519_mul__distinct
  98              	.LVL9:
  99              		.cfi_endproc
 100              	.LFE3:
 102              		.section	.text.ed25519_unproject,"ax",%progbits
 103              		.align	1
 104              		.global	ed25519_unproject
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu softvfp
 110              	ed25519_unproject:
 111              	.LFB4:
  58:25519/ed25519.c **** 
  59:25519/ed25519.c **** void ed25519_unproject(uint8_t *x, uint8_t *y,
  60:25519/ed25519.c **** 		       const struct ed25519_pt *p)
  61:25519/ed25519.c **** {
 112              		.loc 1 61 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 32
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              	.LVL10:
 117 0000 70B5     		push	{r4, r5, r6, lr}
 118              		.cfi_def_cfa_offset 16
 119              		.cfi_offset 4, -16
 120              		.cfi_offset 5, -12
 121              		.cfi_offset 6, -8
 122              		.cfi_offset 14, -4
 123 0002 1446     		mov	r4, r2
 124 0004 0646     		mov	r6, r0
 125 0006 0D46     		mov	r5, r1
 126 0008 88B0     		sub	sp, sp, #32
 127              		.cfi_def_cfa_offset 48
  62:25519/ed25519.c **** 	uint8_t z1[F25519_SIZE];
  63:25519/ed25519.c **** 
  64:25519/ed25519.c **** 	f25519_inv__distinct(z1, p->z);
 128              		.loc 1 64 0
 129 000a 02F16001 		add	r1, r2, #96
 130              	.LVL11:
 131 000e 6846     		mov	r0, sp
 132              	.LVL12:
 133 0010 FFF7FEFF 		bl	f25519_inv__distinct
 134              	.LVL13:
  65:25519/ed25519.c **** 	f25519_mul__distinct(x, p->x, z1);
 135              		.loc 1 65 0
 136 0014 6A46     		mov	r2, sp
 137 0016 2146     		mov	r1, r4
 138 0018 3046     		mov	r0, r6
 139 001a FFF7FEFF 		bl	f25519_mul__distinct
 140              	.LVL14:
  66:25519/ed25519.c **** 	f25519_mul__distinct(y, p->y, z1);
 141              		.loc 1 66 0
 142 001e 6A46     		mov	r2, sp
 143 0020 04F12001 		add	r1, r4, #32
 144 0024 2846     		mov	r0, r5
 145 0026 FFF7FEFF 		bl	f25519_mul__distinct
 146              	.LVL15:
  67:25519/ed25519.c **** 
  68:25519/ed25519.c **** 	f25519_normalize(x);
 147              		.loc 1 68 0
 148 002a 3046     		mov	r0, r6
 149 002c FFF7FEFF 		bl	f25519_normalize
 150              	.LVL16:
  69:25519/ed25519.c **** 	f25519_normalize(y);
 151              		.loc 1 69 0
 152 0030 2846     		mov	r0, r5
 153 0032 FFF7FEFF 		bl	f25519_normalize
 154              	.LVL17:
  70:25519/ed25519.c **** }
 155              		.loc 1 70 0
 156 0036 08B0     		add	sp, sp, #32
 157              		.cfi_def_cfa_offset 16
 158              		@ sp needed
 159 0038 70BD     		pop	{r4, r5, r6, pc}
 160              		.cfi_endproc
 161              	.LFE4:
 163              		.section	.text.ed25519_pack,"ax",%progbits
 164              		.align	1
 165              		.global	ed25519_pack
 166              		.syntax unified
 167              		.thumb
 168              		.thumb_func
 169              		.fpu softvfp
 171              	ed25519_pack:
 172              	.LFB5:
  71:25519/ed25519.c **** 
  72:25519/ed25519.c **** /* Compress/uncompress points. We compress points by storing the x
  73:25519/ed25519.c ****  * coordinate and the parity of the y coordinate.
  74:25519/ed25519.c ****  *
  75:25519/ed25519.c ****  * Rearranging the curve equation, we obtain explicit formulae for the
  76:25519/ed25519.c ****  * coordinates:
  77:25519/ed25519.c ****  *
  78:25519/ed25519.c ****  *     x = sqrt((y^2-1) / (1+dy^2))
  79:25519/ed25519.c ****  *     y = sqrt((x^2+1) / (1-dx^2))
  80:25519/ed25519.c ****  *
  81:25519/ed25519.c ****  * Where d = (-121665/121666), or:
  82:25519/ed25519.c ****  *
  83:25519/ed25519.c ****  *     d = 370957059346694393431380835087545651895
  84:25519/ed25519.c ****  *         42113879843219016388785533085940283555
  85:25519/ed25519.c ****  */
  86:25519/ed25519.c **** 
  87:25519/ed25519.c **** static const uint8_t ed25519_d[F25519_SIZE] = {
  88:25519/ed25519.c **** 	0xa3, 0x78, 0x59, 0x13, 0xca, 0x4d, 0xeb, 0x75,
  89:25519/ed25519.c **** 	0xab, 0xd8, 0x41, 0x41, 0x4d, 0x0a, 0x70, 0x00,
  90:25519/ed25519.c **** 	0x98, 0xe8, 0x79, 0x77, 0x79, 0x40, 0xc7, 0x8c,
  91:25519/ed25519.c **** 	0x73, 0xfe, 0x6f, 0x2b, 0xee, 0x6c, 0x03, 0x52
  92:25519/ed25519.c **** };
  93:25519/ed25519.c **** 
  94:25519/ed25519.c **** void ed25519_pack(uint8_t *c, const uint8_t *x, const uint8_t *y)
  95:25519/ed25519.c **** {
 173              		.loc 1 95 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 32
 176              		@ frame_needed = 0, uses_anonymous_args = 0
 177              	.LVL18:
 178 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 179              		.cfi_def_cfa_offset 20
 180              		.cfi_offset 4, -20
 181              		.cfi_offset 5, -16
 182              		.cfi_offset 6, -12
 183              		.cfi_offset 7, -8
 184              		.cfi_offset 14, -4
 185 0002 89B0     		sub	sp, sp, #36
 186              		.cfi_def_cfa_offset 56
 187              	.LVL19:
 188              		.loc 1 95 0
 189 0004 1546     		mov	r5, r2
 190              	.LBB16:
 191              	.LBB17:
 192              		.loc 2 36 0
 193 0006 6A46     		mov	r2, sp
 194              	.LVL20:
 195              	.LBE17:
 196              	.LBE16:
 197              		.loc 1 95 0
 198 0008 0646     		mov	r6, r0
 199              	.LBB19:
 200              	.LBB18:
 201              		.loc 2 36 0
 202 000a 0B46     		mov	r3, r1
 203 000c 1746     		mov	r7, r2
 204 000e 01F1200C 		add	ip, r1, #32
 205              	.LVL21:
 206              	.L8:
 207 0012 1446     		mov	r4, r2
 208 0014 1868     		ldr	r0, [r3]	@ unaligned
 209 0016 5968     		ldr	r1, [r3, #4]	@ unaligned
 210 0018 0833     		adds	r3, r3, #8
 211 001a 03C4     		stmia	r4!, {r0, r1}
 212 001c 6345     		cmp	r3, ip
 213 001e 2246     		mov	r2, r4
 214 0020 F7D1     		bne	.L8
 215              	.LVL22:
 216              	.LBE18:
 217              	.LBE19:
  96:25519/ed25519.c **** 	uint8_t tmp[F25519_SIZE];
  97:25519/ed25519.c **** 	uint8_t parity;
  98:25519/ed25519.c **** 
  99:25519/ed25519.c **** 	f25519_copy(tmp, x);
 100:25519/ed25519.c **** 	f25519_normalize(tmp);
 218              		.loc 1 100 0
 219 0022 3846     		mov	r0, r7
 220 0024 FFF7FEFF 		bl	f25519_normalize
 221              	.LVL23:
 222              	.LBB20:
 223              	.LBB21:
 224              		.loc 2 36 0
 225 0028 2A46     		mov	r2, r5
 226 002a 3346     		mov	r3, r6
 227              	.LBE21:
 228              	.LBE20:
 101:25519/ed25519.c **** 	parity = (tmp[0] & 1) << 7;
 229              		.loc 1 101 0
 230 002c 9DF80040 		ldrb	r4, [sp]	@ zero_extendqisi2
 231              	.LBB24:
 232              	.LBB22:
 233              		.loc 2 36 0
 234 0030 05F12001 		add	r1, r5, #32
 235              	.LBE22:
 236              	.LBE24:
 237              		.loc 1 101 0
 238 0034 E401     		lsls	r4, r4, #7
 239 0036 E4B2     		uxtb	r4, r4
 240              	.LVL24:
 241              	.L9:
 242              	.LBB25:
 243              	.LBB23:
 244              		.loc 2 36 0
 245 0038 52F8040B 		ldr	r0, [r2], #4	@ unaligned
 246 003c 8A42     		cmp	r2, r1
 247 003e 43F8040B 		str	r0, [r3], #4	@ unaligned
 248 0042 F9D1     		bne	.L9
 249              	.LVL25:
 250              	.LBE23:
 251              	.LBE25:
 102:25519/ed25519.c **** 
 103:25519/ed25519.c **** 	f25519_copy(c, y);
 104:25519/ed25519.c **** 	f25519_normalize(c);
 252              		.loc 1 104 0
 253 0044 3046     		mov	r0, r6
 254 0046 FFF7FEFF 		bl	f25519_normalize
 255              	.LVL26:
 105:25519/ed25519.c **** 	c[31] |= parity;
 256              		.loc 1 105 0
 257 004a F37F     		ldrb	r3, [r6, #31]	@ zero_extendqisi2
 258 004c 1C43     		orrs	r4, r4, r3
 259              	.LVL27:
 260 004e F477     		strb	r4, [r6, #31]
 106:25519/ed25519.c **** }
 261              		.loc 1 106 0
 262 0050 09B0     		add	sp, sp, #36
 263              		.cfi_def_cfa_offset 20
 264              		@ sp needed
 265 0052 F0BD     		pop	{r4, r5, r6, r7, pc}
 266              		.cfi_endproc
 267              	.LFE5:
 269              		.section	.text.ed25519_try_unpack,"ax",%progbits
 270              		.align	1
 271              		.global	ed25519_try_unpack
 272              		.syntax unified
 273              		.thumb
 274              		.thumb_func
 275              		.fpu softvfp
 277              	ed25519_try_unpack:
 278              	.LFB6:
 107:25519/ed25519.c **** 
 108:25519/ed25519.c **** uint8_t ed25519_try_unpack(uint8_t *x, uint8_t *y, const uint8_t *comp)
 109:25519/ed25519.c **** {
 279              		.loc 1 109 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 96
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              	.LVL28:
 284              	.LBB28:
 285              	.LBB29:
 286              		.loc 2 36 0
 287 0000 0B46     		mov	r3, r1
 288              	.LBE29:
 289              	.LBE28:
 290              		.loc 1 109 0
 291 0002 70B5     		push	{r4, r5, r6, lr}
 292              		.cfi_def_cfa_offset 16
 293              		.cfi_offset 4, -16
 294              		.cfi_offset 5, -12
 295              		.cfi_offset 6, -8
 296              		.cfi_offset 14, -4
 110:25519/ed25519.c **** 	const int parity = comp[31] >> 7;
 297              		.loc 1 110 0
 298 0004 D57F     		ldrb	r5, [r2, #31]	@ zero_extendqisi2
 299              	.LVL29:
 109:25519/ed25519.c **** 	const int parity = comp[31] >> 7;
 300              		.loc 1 109 0
 301 0006 0446     		mov	r4, r0
 302 0008 98B0     		sub	sp, sp, #96
 303              		.cfi_def_cfa_offset 112
 304              	.LBB31:
 305              	.LBB30:
 306              		.loc 2 36 0
 307 000a 02F12000 		add	r0, r2, #32
 308              	.LVL30:
 309              	.L13:
 310 000e 52F8046B 		ldr	r6, [r2], #4	@ unaligned
 311 0012 8242     		cmp	r2, r0
 312 0014 43F8046B 		str	r6, [r3], #4	@ unaligned
 313 0018 F9D1     		bne	.L13
 314              	.LVL31:
 315              	.LBE30:
 316              	.LBE31:
 111:25519/ed25519.c **** 	uint8_t a[F25519_SIZE];
 112:25519/ed25519.c **** 	uint8_t b[F25519_SIZE];
 113:25519/ed25519.c **** 	uint8_t c[F25519_SIZE];
 114:25519/ed25519.c **** 
 115:25519/ed25519.c **** 	/* Unpack y */
 116:25519/ed25519.c **** 	f25519_copy(y, comp);
 117:25519/ed25519.c **** 	y[31] &= 127;
 317              		.loc 1 117 0
 318 001a 05F07F03 		and	r3, r5, #127
 319 001e CB77     		strb	r3, [r1, #31]
 118:25519/ed25519.c **** 
 119:25519/ed25519.c **** 	/* Compute c = y^2 */
 120:25519/ed25519.c **** 	f25519_mul__distinct(c, y, y);
 320              		.loc 1 120 0
 321 0020 0A46     		mov	r2, r1
 322 0022 10A8     		add	r0, sp, #64
 323              	.LVL32:
 324 0024 FFF7FEFF 		bl	f25519_mul__distinct
 325              	.LVL33:
 121:25519/ed25519.c **** 
 122:25519/ed25519.c **** 	/* Compute b = (1+dy^2)^-1 */
 123:25519/ed25519.c **** 	f25519_mul__distinct(b, c, ed25519_d);
 326              		.loc 1 123 0
 327 0028 10A9     		add	r1, sp, #64
 328 002a 08A8     		add	r0, sp, #32
 329 002c 1C4A     		ldr	r2, .L15
 330 002e FFF7FEFF 		bl	f25519_mul__distinct
 331              	.LVL34:
 124:25519/ed25519.c **** 	f25519_add(a, b, f25519_one);
 332              		.loc 1 124 0
 333 0032 1C4A     		ldr	r2, .L15+4
 334 0034 08A9     		add	r1, sp, #32
 335 0036 6846     		mov	r0, sp
 336 0038 FFF7FEFF 		bl	f25519_add
 337              	.LVL35:
 125:25519/ed25519.c **** 	f25519_inv__distinct(b, a);
 338              		.loc 1 125 0
 339 003c 6946     		mov	r1, sp
 340 003e 08A8     		add	r0, sp, #32
 341 0040 FFF7FEFF 		bl	f25519_inv__distinct
 342              	.LVL36:
 126:25519/ed25519.c **** 
 127:25519/ed25519.c **** 	/* Compute a = y^2-1 */
 128:25519/ed25519.c **** 	f25519_sub(a, c, f25519_one);
 343              		.loc 1 128 0
 344 0044 10A9     		add	r1, sp, #64
 345 0046 6846     		mov	r0, sp
 346 0048 164A     		ldr	r2, .L15+4
 347 004a FFF7FEFF 		bl	f25519_sub
 348              	.LVL37:
 129:25519/ed25519.c **** 
 130:25519/ed25519.c **** 	/* Compute c = a*b = (y^2-1)/(1-dy^2) */
 131:25519/ed25519.c **** 	f25519_mul__distinct(c, a, b);
 349              		.loc 1 131 0
 350 004e 08AA     		add	r2, sp, #32
 351 0050 6946     		mov	r1, sp
 352 0052 10A8     		add	r0, sp, #64
 353 0054 FFF7FEFF 		bl	f25519_mul__distinct
 354              	.LVL38:
 132:25519/ed25519.c **** 
 133:25519/ed25519.c **** 	/* Compute a, b = +/-sqrt(c), if c is square */
 134:25519/ed25519.c **** 	f25519_sqrt(a, c);
 355              		.loc 1 134 0
 356 0058 10A9     		add	r1, sp, #64
 357 005a 6846     		mov	r0, sp
 358 005c FFF7FEFF 		bl	f25519_sqrt
 359              	.LVL39:
 135:25519/ed25519.c **** 	f25519_neg(b, a);
 360              		.loc 1 135 0
 361 0060 6946     		mov	r1, sp
 362 0062 08A8     		add	r0, sp, #32
 363 0064 FFF7FEFF 		bl	f25519_neg
 364              	.LVL40:
 136:25519/ed25519.c **** 
 137:25519/ed25519.c **** 	/* Select one of them, based on the compressed parity bit */
 138:25519/ed25519.c **** 	f25519_select(x, a, b, (a[0] ^ parity) & 1);
 365              		.loc 1 138 0
 366 0068 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 367 006c 08AA     		add	r2, sp, #32
 368 006e 83EAD513 		eor	r3, r3, r5, lsr #7
 369 0072 03F00103 		and	r3, r3, #1
 370 0076 6946     		mov	r1, sp
 371 0078 2046     		mov	r0, r4
 372 007a FFF7FEFF 		bl	f25519_select
 373              	.LVL41:
 139:25519/ed25519.c **** 
 140:25519/ed25519.c **** 	/* Verify that x^2 = c */
 141:25519/ed25519.c **** 	f25519_mul__distinct(a, x, x);
 374              		.loc 1 141 0
 375 007e 2246     		mov	r2, r4
 376 0080 2146     		mov	r1, r4
 377 0082 6846     		mov	r0, sp
 378 0084 FFF7FEFF 		bl	f25519_mul__distinct
 379              	.LVL42:
 142:25519/ed25519.c **** 	f25519_normalize(a);
 380              		.loc 1 142 0
 381 0088 6846     		mov	r0, sp
 382 008a FFF7FEFF 		bl	f25519_normalize
 383              	.LVL43:
 143:25519/ed25519.c **** 	f25519_normalize(c);
 384              		.loc 1 143 0
 385 008e 10A8     		add	r0, sp, #64
 386 0090 FFF7FEFF 		bl	f25519_normalize
 387              	.LVL44:
 144:25519/ed25519.c **** 
 145:25519/ed25519.c **** 	return f25519_eq(a, c);
 388              		.loc 1 145 0
 389 0094 10A9     		add	r1, sp, #64
 390 0096 6846     		mov	r0, sp
 391 0098 FFF7FEFF 		bl	f25519_eq
 392              	.LVL45:
 146:25519/ed25519.c **** }
 393              		.loc 1 146 0
 394 009c 18B0     		add	sp, sp, #96
 395              		.cfi_def_cfa_offset 16
 396              		@ sp needed
 397 009e 70BD     		pop	{r4, r5, r6, pc}
 398              	.LVL46:
 399              	.L16:
 400              		.align	2
 401              	.L15:
 402 00a0 00000000 		.word	.LANCHOR0
 403 00a4 00000000 		.word	f25519_one
 404              		.cfi_endproc
 405              	.LFE6:
 407              		.section	.text.ed25519_add,"ax",%progbits
 408              		.align	1
 409              		.global	ed25519_add
 410              		.syntax unified
 411              		.thumb
 412              		.thumb_func
 413              		.fpu softvfp
 415              	ed25519_add:
 416              	.LFB7:
 147:25519/ed25519.c **** 
 148:25519/ed25519.c **** /* k = 2d */
 149:25519/ed25519.c **** static const uint8_t ed25519_k[F25519_SIZE] = {
 150:25519/ed25519.c **** 	0x59, 0xf1, 0xb2, 0x26, 0x94, 0x9b, 0xd6, 0xeb,
 151:25519/ed25519.c **** 	0x56, 0xb1, 0x83, 0x82, 0x9a, 0x14, 0xe0, 0x00,
 152:25519/ed25519.c **** 	0x30, 0xd1, 0xf3, 0xee, 0xf2, 0x80, 0x8e, 0x19,
 153:25519/ed25519.c **** 	0xe7, 0xfc, 0xdf, 0x56, 0xdc, 0xd9, 0x06, 0x24
 154:25519/ed25519.c **** };
 155:25519/ed25519.c **** 
 156:25519/ed25519.c **** void ed25519_add(struct ed25519_pt *r,
 157:25519/ed25519.c **** 		 const struct ed25519_pt *p1, const struct ed25519_pt *p2)
 158:25519/ed25519.c **** {
 417              		.loc 1 158 0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 256
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 421              	.LVL47:
 422 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 423              		.cfi_def_cfa_offset 24
 424              		.cfi_offset 4, -24
 425              		.cfi_offset 5, -20
 426              		.cfi_offset 6, -16
 427              		.cfi_offset 7, -12
 428              		.cfi_offset 8, -8
 429              		.cfi_offset 14, -4
 430 0004 1546     		mov	r5, r2
 431 0006 0C46     		mov	r4, r1
 432 0008 0646     		mov	r6, r0
 433 000a C0B0     		sub	sp, sp, #256
 434              		.cfi_def_cfa_offset 280
 159:25519/ed25519.c **** 	/* Explicit formulas database: add-2008-hwcd-3
 160:25519/ed25519.c **** 	 *
 161:25519/ed25519.c **** 	 * source 2008 Hisil--Wong--Carter--Dawson,
 162:25519/ed25519.c **** 	 *     http://eprint.iacr.org/2008/522, Section 3.1
 163:25519/ed25519.c **** 	 * appliesto extended-1
 164:25519/ed25519.c **** 	 * parameter k
 165:25519/ed25519.c **** 	 * assume k = 2 d
 166:25519/ed25519.c **** 	 * compute A = (Y1-X1)(Y2-X2)
 167:25519/ed25519.c **** 	 * compute B = (Y1+X1)(Y2+X2)
 168:25519/ed25519.c **** 	 * compute C = T1 k T2
 169:25519/ed25519.c **** 	 * compute D = Z1 2 Z2
 170:25519/ed25519.c **** 	 * compute E = B - A
 171:25519/ed25519.c **** 	 * compute F = D - C
 172:25519/ed25519.c **** 	 * compute G = D + C
 173:25519/ed25519.c **** 	 * compute H = B + A
 174:25519/ed25519.c **** 	 * compute X3 = E F
 175:25519/ed25519.c **** 	 * compute Y3 = G H
 176:25519/ed25519.c **** 	 * compute T3 = E H
 177:25519/ed25519.c **** 	 * compute Z3 = F G
 178:25519/ed25519.c **** 	 */
 179:25519/ed25519.c **** 	uint8_t a[F25519_SIZE];
 180:25519/ed25519.c **** 	uint8_t b[F25519_SIZE];
 181:25519/ed25519.c **** 	uint8_t c[F25519_SIZE];
 182:25519/ed25519.c **** 	uint8_t d[F25519_SIZE];
 183:25519/ed25519.c **** 	uint8_t e[F25519_SIZE];
 184:25519/ed25519.c **** 	uint8_t f[F25519_SIZE];
 185:25519/ed25519.c **** 	uint8_t g[F25519_SIZE];
 186:25519/ed25519.c **** 	uint8_t h[F25519_SIZE];
 187:25519/ed25519.c **** 
 188:25519/ed25519.c **** 	/* A = (Y1-X1)(Y2-X2) */
 189:25519/ed25519.c **** 	f25519_sub(c, p1->y, p1->x);
 435              		.loc 1 189 0
 436 000c 01F12008 		add	r8, r1, #32
 437 0010 0A46     		mov	r2, r1
 438              	.LVL48:
 439 0012 10A8     		add	r0, sp, #64
 440              	.LVL49:
 441 0014 4146     		mov	r1, r8
 442              	.LVL50:
 190:25519/ed25519.c **** 	f25519_sub(d, p2->y, p2->x);
 443              		.loc 1 190 0
 444 0016 05F12007 		add	r7, r5, #32
 189:25519/ed25519.c **** 	f25519_sub(d, p2->y, p2->x);
 445              		.loc 1 189 0
 446 001a FFF7FEFF 		bl	f25519_sub
 447              	.LVL51:
 448              		.loc 1 190 0
 449 001e 2A46     		mov	r2, r5
 450 0020 3946     		mov	r1, r7
 451 0022 18A8     		add	r0, sp, #96
 452 0024 FFF7FEFF 		bl	f25519_sub
 453              	.LVL52:
 191:25519/ed25519.c **** 	f25519_mul__distinct(a, c, d);
 454              		.loc 1 191 0
 455 0028 18AA     		add	r2, sp, #96
 456 002a 10A9     		add	r1, sp, #64
 457 002c 6846     		mov	r0, sp
 458 002e FFF7FEFF 		bl	f25519_mul__distinct
 459              	.LVL53:
 192:25519/ed25519.c **** 
 193:25519/ed25519.c **** 	/* B = (Y1+X1)(Y2+X2) */
 194:25519/ed25519.c **** 	f25519_add(c, p1->y, p1->x);
 460              		.loc 1 194 0
 461 0032 2246     		mov	r2, r4
 462 0034 4146     		mov	r1, r8
 463 0036 10A8     		add	r0, sp, #64
 464 0038 FFF7FEFF 		bl	f25519_add
 465              	.LVL54:
 195:25519/ed25519.c **** 	f25519_add(d, p2->y, p2->x);
 466              		.loc 1 195 0
 467 003c 2A46     		mov	r2, r5
 468 003e 3946     		mov	r1, r7
 469 0040 18A8     		add	r0, sp, #96
 470 0042 FFF7FEFF 		bl	f25519_add
 471              	.LVL55:
 196:25519/ed25519.c **** 	f25519_mul__distinct(b, c, d);
 472              		.loc 1 196 0
 473 0046 18AA     		add	r2, sp, #96
 474 0048 10A9     		add	r1, sp, #64
 475 004a 08A8     		add	r0, sp, #32
 476 004c FFF7FEFF 		bl	f25519_mul__distinct
 477              	.LVL56:
 197:25519/ed25519.c **** 
 198:25519/ed25519.c **** 	/* C = T1 k T2 */
 199:25519/ed25519.c **** 	f25519_mul__distinct(d, p1->t, p2->t);
 478              		.loc 1 199 0
 479 0050 05F14002 		add	r2, r5, #64
 480 0054 04F14001 		add	r1, r4, #64
 481 0058 18A8     		add	r0, sp, #96
 482 005a FFF7FEFF 		bl	f25519_mul__distinct
 483              	.LVL57:
 200:25519/ed25519.c **** 	f25519_mul__distinct(c, d, ed25519_k);
 484              		.loc 1 200 0
 485 005e 18A9     		add	r1, sp, #96
 486 0060 10A8     		add	r0, sp, #64
 487 0062 1E4A     		ldr	r2, .L18
 488 0064 FFF7FEFF 		bl	f25519_mul__distinct
 489              	.LVL58:
 201:25519/ed25519.c **** 
 202:25519/ed25519.c **** 	/* D = Z1 2 Z2 */
 203:25519/ed25519.c **** 	f25519_mul__distinct(d, p1->z, p2->z);
 490              		.loc 1 203 0
 491 0068 05F16002 		add	r2, r5, #96
 492 006c 04F16001 		add	r1, r4, #96
 493 0070 18A8     		add	r0, sp, #96
 494 0072 FFF7FEFF 		bl	f25519_mul__distinct
 495              	.LVL59:
 204:25519/ed25519.c **** 	f25519_add(d, d, d);
 496              		.loc 1 204 0
 497 0076 18AA     		add	r2, sp, #96
 498 0078 1146     		mov	r1, r2
 499 007a 1046     		mov	r0, r2
 500 007c FFF7FEFF 		bl	f25519_add
 501              	.LVL60:
 205:25519/ed25519.c **** 
 206:25519/ed25519.c **** 	/* E = B - A */
 207:25519/ed25519.c **** 	f25519_sub(e, b, a);
 502              		.loc 1 207 0
 503 0080 6A46     		mov	r2, sp
 504 0082 08A9     		add	r1, sp, #32
 505 0084 20A8     		add	r0, sp, #128
 506 0086 FFF7FEFF 		bl	f25519_sub
 507              	.LVL61:
 208:25519/ed25519.c **** 
 209:25519/ed25519.c **** 	/* F = D - C */
 210:25519/ed25519.c **** 	f25519_sub(f, d, c);
 508              		.loc 1 210 0
 509 008a 10AA     		add	r2, sp, #64
 510 008c 18A9     		add	r1, sp, #96
 511 008e 28A8     		add	r0, sp, #160
 512 0090 FFF7FEFF 		bl	f25519_sub
 513              	.LVL62:
 211:25519/ed25519.c **** 
 212:25519/ed25519.c **** 	/* G = D + C */
 213:25519/ed25519.c **** 	f25519_add(g, d, c);
 514              		.loc 1 213 0
 515 0094 10AA     		add	r2, sp, #64
 516 0096 18A9     		add	r1, sp, #96
 517 0098 30A8     		add	r0, sp, #192
 518 009a FFF7FEFF 		bl	f25519_add
 519              	.LVL63:
 214:25519/ed25519.c **** 
 215:25519/ed25519.c **** 	/* H = B + A */
 216:25519/ed25519.c **** 	f25519_add(h, b, a);
 520              		.loc 1 216 0
 521 009e 6A46     		mov	r2, sp
 522 00a0 08A9     		add	r1, sp, #32
 523 00a2 38A8     		add	r0, sp, #224
 524 00a4 FFF7FEFF 		bl	f25519_add
 525              	.LVL64:
 217:25519/ed25519.c **** 
 218:25519/ed25519.c **** 	/* X3 = E F */
 219:25519/ed25519.c **** 	f25519_mul__distinct(r->x, e, f);
 526              		.loc 1 219 0
 527 00a8 28AA     		add	r2, sp, #160
 528 00aa 20A9     		add	r1, sp, #128
 529 00ac 3046     		mov	r0, r6
 530 00ae FFF7FEFF 		bl	f25519_mul__distinct
 531              	.LVL65:
 220:25519/ed25519.c **** 
 221:25519/ed25519.c **** 	/* Y3 = G H */
 222:25519/ed25519.c **** 	f25519_mul__distinct(r->y, g, h);
 532              		.loc 1 222 0
 533 00b2 38AA     		add	r2, sp, #224
 534 00b4 30A9     		add	r1, sp, #192
 535 00b6 06F12000 		add	r0, r6, #32
 536 00ba FFF7FEFF 		bl	f25519_mul__distinct
 537              	.LVL66:
 223:25519/ed25519.c **** 
 224:25519/ed25519.c **** 	/* T3 = E H */
 225:25519/ed25519.c **** 	f25519_mul__distinct(r->t, e, h);
 538              		.loc 1 225 0
 539 00be 38AA     		add	r2, sp, #224
 540 00c0 20A9     		add	r1, sp, #128
 541 00c2 06F14000 		add	r0, r6, #64
 542 00c6 FFF7FEFF 		bl	f25519_mul__distinct
 543              	.LVL67:
 226:25519/ed25519.c **** 
 227:25519/ed25519.c **** 	/* Z3 = F G */
 228:25519/ed25519.c **** 	f25519_mul__distinct(r->z, f, g);
 544              		.loc 1 228 0
 545 00ca 30AA     		add	r2, sp, #192
 546 00cc 28A9     		add	r1, sp, #160
 547 00ce 06F16000 		add	r0, r6, #96
 548 00d2 FFF7FEFF 		bl	f25519_mul__distinct
 549              	.LVL68:
 229:25519/ed25519.c **** }
 550              		.loc 1 229 0
 551 00d6 40B0     		add	sp, sp, #256
 552              		.cfi_def_cfa_offset 24
 553              		@ sp needed
 554 00d8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 555              	.LVL69:
 556              	.L19:
 557              		.align	2
 558              	.L18:
 559 00dc 00000000 		.word	.LANCHOR1
 560              		.cfi_endproc
 561              	.LFE7:
 563              		.section	.text.ed25519_double,"ax",%progbits
 564              		.align	1
 565              		.global	ed25519_double
 566              		.syntax unified
 567              		.thumb
 568              		.thumb_func
 569              		.fpu softvfp
 571              	ed25519_double:
 572              	.LFB8:
 230:25519/ed25519.c **** 
 231:25519/ed25519.c **** void ed25519_double(struct ed25519_pt *r, const struct ed25519_pt *p)
 232:25519/ed25519.c **** {
 573              		.loc 1 232 0
 574              		.cfi_startproc
 575              		@ args = 0, pretend = 0, frame = 224
 576              		@ frame_needed = 0, uses_anonymous_args = 0
 577              	.LVL70:
 578 0000 70B5     		push	{r4, r5, r6, lr}
 579              		.cfi_def_cfa_offset 16
 580              		.cfi_offset 4, -16
 581              		.cfi_offset 5, -12
 582              		.cfi_offset 6, -8
 583              		.cfi_offset 14, -4
 584 0002 0D46     		mov	r5, r1
 585 0004 0446     		mov	r4, r0
 586 0006 B8B0     		sub	sp, sp, #224
 587              		.cfi_def_cfa_offset 240
 233:25519/ed25519.c **** 	/* Explicit formulas database: dbl-2008-hwcd
 234:25519/ed25519.c **** 	 *
 235:25519/ed25519.c **** 	 * source 2008 Hisil--Wong--Carter--Dawson,
 236:25519/ed25519.c **** 	 *     http://eprint.iacr.org/2008/522, Section 3.3
 237:25519/ed25519.c **** 	 * compute A = X1^2
 238:25519/ed25519.c **** 	 * compute B = Y1^2
 239:25519/ed25519.c **** 	 * compute C = 2 Z1^2
 240:25519/ed25519.c **** 	 * compute D = a A
 241:25519/ed25519.c **** 	 * compute E = (X1+Y1)^2-A-B
 242:25519/ed25519.c **** 	 * compute G = D + B
 243:25519/ed25519.c **** 	 * compute F = G - C
 244:25519/ed25519.c **** 	 * compute H = D - B
 245:25519/ed25519.c **** 	 * compute X3 = E F
 246:25519/ed25519.c **** 	 * compute Y3 = G H
 247:25519/ed25519.c **** 	 * compute T3 = E H
 248:25519/ed25519.c **** 	 * compute Z3 = F G
 249:25519/ed25519.c **** 	 */
 250:25519/ed25519.c **** 	uint8_t a[F25519_SIZE];
 251:25519/ed25519.c **** 	uint8_t b[F25519_SIZE];
 252:25519/ed25519.c **** 	uint8_t c[F25519_SIZE];
 253:25519/ed25519.c **** 	uint8_t e[F25519_SIZE];
 254:25519/ed25519.c **** 	uint8_t f[F25519_SIZE];
 255:25519/ed25519.c **** 	uint8_t g[F25519_SIZE];
 256:25519/ed25519.c **** 	uint8_t h[F25519_SIZE];
 257:25519/ed25519.c **** 
 258:25519/ed25519.c **** 	/* A = X1^2 */
 259:25519/ed25519.c **** 	f25519_mul__distinct(a, p->x, p->x);
 260:25519/ed25519.c **** 
 261:25519/ed25519.c **** 	/* B = Y1^2 */
 262:25519/ed25519.c **** 	f25519_mul__distinct(b, p->y, p->y);
 588              		.loc 1 262 0
 589 0008 05F12006 		add	r6, r5, #32
 259:25519/ed25519.c **** 
 590              		.loc 1 259 0
 591 000c 0A46     		mov	r2, r1
 592 000e 6846     		mov	r0, sp
 593              	.LVL71:
 594 0010 FFF7FEFF 		bl	f25519_mul__distinct
 595              	.LVL72:
 596              		.loc 1 262 0
 597 0014 3246     		mov	r2, r6
 598 0016 3146     		mov	r1, r6
 599 0018 08A8     		add	r0, sp, #32
 600 001a FFF7FEFF 		bl	f25519_mul__distinct
 601              	.LVL73:
 263:25519/ed25519.c **** 
 264:25519/ed25519.c **** 	/* C = 2 Z1^2 */
 265:25519/ed25519.c **** 	f25519_mul__distinct(c, p->z, p->z);
 602              		.loc 1 265 0
 603 001e 05F16002 		add	r2, r5, #96
 604 0022 1146     		mov	r1, r2
 605 0024 10A8     		add	r0, sp, #64
 606 0026 FFF7FEFF 		bl	f25519_mul__distinct
 607              	.LVL74:
 266:25519/ed25519.c **** 	f25519_add(c, c, c);
 608              		.loc 1 266 0
 609 002a 10AA     		add	r2, sp, #64
 610 002c 1146     		mov	r1, r2
 611 002e 1046     		mov	r0, r2
 612 0030 FFF7FEFF 		bl	f25519_add
 613              	.LVL75:
 267:25519/ed25519.c **** 
 268:25519/ed25519.c **** 	/* D = a A (alter sign) */
 269:25519/ed25519.c **** 	/* E = (X1+Y1)^2-A-B */
 270:25519/ed25519.c **** 	f25519_add(f, p->x, p->y);
 614              		.loc 1 270 0
 615 0034 3246     		mov	r2, r6
 616 0036 2946     		mov	r1, r5
 617 0038 20A8     		add	r0, sp, #128
 618 003a FFF7FEFF 		bl	f25519_add
 619              	.LVL76:
 271:25519/ed25519.c **** 	f25519_mul__distinct(e, f, f);
 620              		.loc 1 271 0
 621 003e 20AA     		add	r2, sp, #128
 622 0040 1146     		mov	r1, r2
 623 0042 18A8     		add	r0, sp, #96
 624 0044 FFF7FEFF 		bl	f25519_mul__distinct
 625              	.LVL77:
 272:25519/ed25519.c **** 	f25519_sub(e, e, a);
 626              		.loc 1 272 0
 627 0048 18A9     		add	r1, sp, #96
 628 004a 6A46     		mov	r2, sp
 629 004c 0846     		mov	r0, r1
 630 004e FFF7FEFF 		bl	f25519_sub
 631              	.LVL78:
 273:25519/ed25519.c **** 	f25519_sub(e, e, b);
 632              		.loc 1 273 0
 633 0052 18A9     		add	r1, sp, #96
 634 0054 08AA     		add	r2, sp, #32
 635 0056 0846     		mov	r0, r1
 636 0058 FFF7FEFF 		bl	f25519_sub
 637              	.LVL79:
 274:25519/ed25519.c **** 
 275:25519/ed25519.c **** 	/* G = D + B */
 276:25519/ed25519.c **** 	f25519_sub(g, b, a);
 638              		.loc 1 276 0
 639 005c 6A46     		mov	r2, sp
 640 005e 08A9     		add	r1, sp, #32
 641 0060 28A8     		add	r0, sp, #160
 642 0062 FFF7FEFF 		bl	f25519_sub
 643              	.LVL80:
 277:25519/ed25519.c **** 
 278:25519/ed25519.c **** 	/* F = G - C */
 279:25519/ed25519.c **** 	f25519_sub(f, g, c);
 644              		.loc 1 279 0
 645 0066 10AA     		add	r2, sp, #64
 646 0068 28A9     		add	r1, sp, #160
 647 006a 20A8     		add	r0, sp, #128
 648 006c FFF7FEFF 		bl	f25519_sub
 649              	.LVL81:
 280:25519/ed25519.c **** 
 281:25519/ed25519.c **** 	/* H = D - B */
 282:25519/ed25519.c **** 	f25519_neg(h, b);
 650              		.loc 1 282 0
 651 0070 08A9     		add	r1, sp, #32
 652 0072 30A8     		add	r0, sp, #192
 653 0074 FFF7FEFF 		bl	f25519_neg
 654              	.LVL82:
 283:25519/ed25519.c **** 	f25519_sub(h, h, a);
 655              		.loc 1 283 0
 656 0078 30A9     		add	r1, sp, #192
 657 007a 6A46     		mov	r2, sp
 658 007c 0846     		mov	r0, r1
 659 007e FFF7FEFF 		bl	f25519_sub
 660              	.LVL83:
 284:25519/ed25519.c **** 
 285:25519/ed25519.c **** 	/* X3 = E F */
 286:25519/ed25519.c **** 	f25519_mul__distinct(r->x, e, f);
 661              		.loc 1 286 0
 662 0082 20AA     		add	r2, sp, #128
 663 0084 18A9     		add	r1, sp, #96
 664 0086 2046     		mov	r0, r4
 665 0088 FFF7FEFF 		bl	f25519_mul__distinct
 666              	.LVL84:
 287:25519/ed25519.c **** 
 288:25519/ed25519.c **** 	/* Y3 = G H */
 289:25519/ed25519.c **** 	f25519_mul__distinct(r->y, g, h);
 667              		.loc 1 289 0
 668 008c 30AA     		add	r2, sp, #192
 669 008e 28A9     		add	r1, sp, #160
 670 0090 04F12000 		add	r0, r4, #32
 671 0094 FFF7FEFF 		bl	f25519_mul__distinct
 672              	.LVL85:
 290:25519/ed25519.c **** 
 291:25519/ed25519.c **** 	/* T3 = E H */
 292:25519/ed25519.c **** 	f25519_mul__distinct(r->t, e, h);
 673              		.loc 1 292 0
 674 0098 30AA     		add	r2, sp, #192
 675 009a 18A9     		add	r1, sp, #96
 676 009c 04F14000 		add	r0, r4, #64
 677 00a0 FFF7FEFF 		bl	f25519_mul__distinct
 678              	.LVL86:
 293:25519/ed25519.c **** 
 294:25519/ed25519.c **** 	/* Z3 = F G */
 295:25519/ed25519.c **** 	f25519_mul__distinct(r->z, f, g);
 679              		.loc 1 295 0
 680 00a4 28AA     		add	r2, sp, #160
 681 00a6 20A9     		add	r1, sp, #128
 682 00a8 04F16000 		add	r0, r4, #96
 683 00ac FFF7FEFF 		bl	f25519_mul__distinct
 684              	.LVL87:
 296:25519/ed25519.c **** }
 685              		.loc 1 296 0
 686 00b0 38B0     		add	sp, sp, #224
 687              		.cfi_def_cfa_offset 16
 688              		@ sp needed
 689 00b2 70BD     		pop	{r4, r5, r6, pc}
 690              		.cfi_endproc
 691              	.LFE8:
 693              		.section	.text.ed25519_smult,"ax",%progbits
 694              		.align	1
 695              		.global	ed25519_smult
 696              		.syntax unified
 697              		.thumb
 698              		.thumb_func
 699              		.fpu softvfp
 701              	ed25519_smult:
 702              	.LFB9:
 297:25519/ed25519.c **** 
 298:25519/ed25519.c **** void ed25519_smult(struct ed25519_pt *r_out, const struct ed25519_pt *p,
 299:25519/ed25519.c **** 		   const uint8_t *e)
 300:25519/ed25519.c **** {
 703              		.loc 1 300 0
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 256
 706              		@ frame_needed = 0, uses_anonymous_args = 0
 707              	.LVL88:
 708 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 709              		.cfi_def_cfa_offset 24
 710              		.cfi_offset 4, -24
 711              		.cfi_offset 5, -20
 712              		.cfi_offset 6, -16
 713              		.cfi_offset 7, -12
 714              		.cfi_offset 8, -8
 715              		.cfi_offset 14, -4
 716 0004 C0B0     		sub	sp, sp, #256
 717              		.cfi_def_cfa_offset 280
 718              	.LVL89:
 719              		.loc 1 300 0
 720 0006 0646     		mov	r6, r0
 721 0008 0F46     		mov	r7, r1
 722 000a 9046     		mov	r8, r2
 723              	.LBB37:
 724              	.LBB38:
 725              		.file 3 "25519/ed25519.h"
   1:25519/ed25519.h **** /* Edwards curve operations
   2:25519/ed25519.h ****  * Daniel Beer <dlbeer@gmail.com>, 9 Jan 2014
   3:25519/ed25519.h ****  *
   4:25519/ed25519.h ****  * This file is in the public domain.
   5:25519/ed25519.h ****  */
   6:25519/ed25519.h **** 
   7:25519/ed25519.h **** #ifndef ED25519_H_
   8:25519/ed25519.h **** #define ED25519_H_
   9:25519/ed25519.h **** 
  10:25519/ed25519.h **** #include "f25519.h"
  11:25519/ed25519.h **** 
  12:25519/ed25519.h **** /* This is not the Ed25519 signature system. Rather, we're implementing
  13:25519/ed25519.h ****  * basic operations on the twisted Edwards curve over (Z mod 2^255-19):
  14:25519/ed25519.h ****  *
  15:25519/ed25519.h ****  *     -x^2 + y^2 = 1 - (121665/121666)x^2y^2
  16:25519/ed25519.h ****  *
  17:25519/ed25519.h ****  * With the positive-x base point y = 4/5.
  18:25519/ed25519.h ****  *
  19:25519/ed25519.h ****  * These functions will not leak secret data through timing.
  20:25519/ed25519.h ****  *
  21:25519/ed25519.h ****  * For more information, see:
  22:25519/ed25519.h ****  *
  23:25519/ed25519.h ****  *     Bernstein, D.J. & Lange, T. (2007) "Faster addition and doubling on
  24:25519/ed25519.h ****  *     elliptic curves". Document ID: 95616567a6ba20f575c5f25e7cebaf83.
  25:25519/ed25519.h ****  *
  26:25519/ed25519.h ****  *     Hisil, H. & Wong, K K. & Carter, G. & Dawson, E. (2008) "Twisted
  27:25519/ed25519.h ****  *     Edwards curves revisited". Advances in Cryptology, ASIACRYPT 2008,
  28:25519/ed25519.h ****  *     Vol. 5350, pp. 326-343.
  29:25519/ed25519.h ****  */
  30:25519/ed25519.h **** 
  31:25519/ed25519.h **** /* Projective coordinates */
  32:25519/ed25519.h **** struct ed25519_pt {
  33:25519/ed25519.h **** 	uint8_t		x[F25519_SIZE];
  34:25519/ed25519.h **** 	uint8_t		y[F25519_SIZE];
  35:25519/ed25519.h **** 	uint8_t		t[F25519_SIZE];
  36:25519/ed25519.h **** 	uint8_t		z[F25519_SIZE];
  37:25519/ed25519.h **** };
  38:25519/ed25519.h **** 
  39:25519/ed25519.h **** extern const struct ed25519_pt ed25519_base;
  40:25519/ed25519.h **** extern const struct ed25519_pt ed25519_neutral;
  41:25519/ed25519.h **** 
  42:25519/ed25519.h **** /* Convert between projective and affine coordinates (x/y in F25519) */
  43:25519/ed25519.h **** void ed25519_project(struct ed25519_pt *p,
  44:25519/ed25519.h **** 		     const uint8_t *x, const uint8_t *y);
  45:25519/ed25519.h **** 
  46:25519/ed25519.h **** void ed25519_unproject(uint8_t *x, uint8_t *y,
  47:25519/ed25519.h **** 		       const struct ed25519_pt *p);
  48:25519/ed25519.h **** 
  49:25519/ed25519.h **** /* Compress/uncompress points. try_unpack() will check that the
  50:25519/ed25519.h ****  * compressed point is on the curve, returning 1 if the unpacked point
  51:25519/ed25519.h ****  * is valid, and 0 otherwise.
  52:25519/ed25519.h ****  */
  53:25519/ed25519.h **** #define ED25519_PACK_SIZE	F25519_SIZE
  54:25519/ed25519.h **** 
  55:25519/ed25519.h **** void ed25519_pack(uint8_t *c, const uint8_t *x, const uint8_t *y);
  56:25519/ed25519.h **** uint8_t ed25519_try_unpack(uint8_t *x, uint8_t *y, const uint8_t *c);
  57:25519/ed25519.h **** 
  58:25519/ed25519.h **** /* Add, double and scalar multiply */
  59:25519/ed25519.h **** #define ED25519_EXPONENT_SIZE	32
  60:25519/ed25519.h **** 
  61:25519/ed25519.h **** /* Prepare an exponent by clamping appropriate bits */
  62:25519/ed25519.h **** static inline void ed25519_prepare(uint8_t *e)
  63:25519/ed25519.h **** {
  64:25519/ed25519.h **** 	e[0] &= 0xf8;
  65:25519/ed25519.h **** 	e[31] &= 0x7f;
  66:25519/ed25519.h **** 	e[31] |= 0x40;
  67:25519/ed25519.h **** }
  68:25519/ed25519.h **** 
  69:25519/ed25519.h **** /* Order of the group generated by the base point */
  70:25519/ed25519.h **** static inline void ed25519_copy(struct ed25519_pt *dst,
  71:25519/ed25519.h **** 				const struct ed25519_pt *src)
  72:25519/ed25519.h **** {
  73:25519/ed25519.h **** 	memcpy(dst, src, sizeof(*dst));
 726              		.loc 3 73 0
 727 000c 1C49     		ldr	r1, .L24
 728              	.LVL90:
 729 000e 8022     		movs	r2, #128
 730              	.LVL91:
 731 0010 6846     		mov	r0, sp
 732              	.LVL92:
 733 0012 FFF7FEFF 		bl	memcpy
 734              	.LVL93:
 735              	.LBE38:
 736              	.LBE37:
 301:25519/ed25519.c **** 	struct ed25519_pt r;
 302:25519/ed25519.c **** 	int i;
 303:25519/ed25519.c **** 
 304:25519/ed25519.c **** 	ed25519_copy(&r, &ed25519_neutral);
 305:25519/ed25519.c **** 
 306:25519/ed25519.c **** 	for (i = 255; i >= 0; i--) {
 737              		.loc 1 306 0
 738 0016 FF25     		movs	r5, #255
 739              	.LVL94:
 740              	.L22:
 741              	.LBB39:
 307:25519/ed25519.c **** 		const uint8_t bit = (e[i >> 3] >> (i & 7)) & 1;
 742              		.loc 1 307 0 discriminator 3
 743 0018 EB10     		asrs	r3, r5, #3
 744 001a 18F80340 		ldrb	r4, [r8, r3]	@ zero_extendqisi2
 745 001e 05F00703 		and	r3, r5, #7
 746 0022 1C41     		asrs	r4, r4, r3
 308:25519/ed25519.c **** 		struct ed25519_pt s;
 309:25519/ed25519.c **** 
 310:25519/ed25519.c **** 		ed25519_double(&r, &r);
 747              		.loc 1 310 0 discriminator 3
 748 0024 6946     		mov	r1, sp
 749 0026 6846     		mov	r0, sp
 750 0028 FFF7FEFF 		bl	ed25519_double
 751              	.LVL95:
 307:25519/ed25519.c **** 		const uint8_t bit = (e[i >> 3] >> (i & 7)) & 1;
 752              		.loc 1 307 0 discriminator 3
 753 002c 04F00104 		and	r4, r4, #1
 754              	.LVL96:
 311:25519/ed25519.c **** 		ed25519_add(&s, &r, p);
 755              		.loc 1 311 0 discriminator 3
 756 0030 3A46     		mov	r2, r7
 757 0032 6946     		mov	r1, sp
 758 0034 20A8     		add	r0, sp, #128
 759 0036 FFF7FEFF 		bl	ed25519_add
 760              	.LVL97:
 312:25519/ed25519.c **** 
 313:25519/ed25519.c **** 		f25519_select(r.x, r.x, s.x, bit);
 761              		.loc 1 313 0 discriminator 3
 762 003a 2346     		mov	r3, r4
 763 003c 20AA     		add	r2, sp, #128
 764 003e 6946     		mov	r1, sp
 765 0040 6846     		mov	r0, sp
 766 0042 FFF7FEFF 		bl	f25519_select
 767              	.LVL98:
 314:25519/ed25519.c **** 		f25519_select(r.y, r.y, s.y, bit);
 768              		.loc 1 314 0 discriminator 3
 769 0046 08A9     		add	r1, sp, #32
 770 0048 0846     		mov	r0, r1
 771 004a 2346     		mov	r3, r4
 772 004c 28AA     		add	r2, sp, #160
 773 004e FFF7FEFF 		bl	f25519_select
 774              	.LVL99:
 315:25519/ed25519.c **** 		f25519_select(r.z, r.z, s.z, bit);
 775              		.loc 1 315 0 discriminator 3
 776 0052 18A9     		add	r1, sp, #96
 777 0054 0846     		mov	r0, r1
 778 0056 2346     		mov	r3, r4
 779 0058 38AA     		add	r2, sp, #224
 780 005a FFF7FEFF 		bl	f25519_select
 781              	.LVL100:
 316:25519/ed25519.c **** 		f25519_select(r.t, r.t, s.t, bit);
 782              		.loc 1 316 0 discriminator 3
 783 005e 10A9     		add	r1, sp, #64
 784 0060 2346     		mov	r3, r4
 785 0062 30AA     		add	r2, sp, #192
 786 0064 0846     		mov	r0, r1
 787 0066 FFF7FEFF 		bl	f25519_select
 788              	.LVL101:
 789              	.LBE39:
 306:25519/ed25519.c **** 		const uint8_t bit = (e[i >> 3] >> (i & 7)) & 1;
 790              		.loc 1 306 0 discriminator 3
 791 006a 15F1FF35 		adds	r5, r5, #-1
 792              	.LVL102:
 793 006e D3D2     		bcs	.L22
 794              	.LVL103:
 795              	.LBB40:
 796              	.LBB41:
 797              		.loc 3 73 0
 798 0070 8022     		movs	r2, #128
 799 0072 6946     		mov	r1, sp
 800 0074 3046     		mov	r0, r6
 801 0076 FFF7FEFF 		bl	memcpy
 802              	.LVL104:
 803              	.LBE41:
 804              	.LBE40:
 317:25519/ed25519.c **** 	}
 318:25519/ed25519.c **** 
 319:25519/ed25519.c **** 	ed25519_copy(r_out, &r);
 320:25519/ed25519.c **** }
 805              		.loc 1 320 0
 806 007a 40B0     		add	sp, sp, #256
 807              		.cfi_def_cfa_offset 24
 808              	.LVL105:
 809              		@ sp needed
 810 007c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 811              	.LVL106:
 812              	.L25:
 813              		.align	2
 814              	.L24:
 815 0080 00000000 		.word	.LANCHOR2
 816              		.cfi_endproc
 817              	.LFE9:
 819              		.global	ed25519_neutral
 820              		.global	ed25519_base
 821              		.section	.rodata.ed25519_base,"a",%progbits
 824              	ed25519_base:
 825 0000 1A       		.byte	26
 826 0001 D5       		.byte	-43
 827 0002 25       		.byte	37
 828 0003 8F       		.byte	-113
 829 0004 60       		.byte	96
 830 0005 2D       		.byte	45
 831 0006 56       		.byte	86
 832 0007 C9       		.byte	-55
 833 0008 B2       		.byte	-78
 834 0009 A7       		.byte	-89
 835 000a 25       		.byte	37
 836 000b 95       		.byte	-107
 837 000c 60       		.byte	96
 838 000d C7       		.byte	-57
 839 000e 2C       		.byte	44
 840 000f 69       		.byte	105
 841 0010 5C       		.byte	92
 842 0011 DC       		.byte	-36
 843 0012 D6       		.byte	-42
 844 0013 FD       		.byte	-3
 845 0014 31       		.byte	49
 846 0015 E2       		.byte	-30
 847 0016 A4       		.byte	-92
 848 0017 C0       		.byte	-64
 849 0018 FE       		.byte	-2
 850 0019 53       		.byte	83
 851 001a 6E       		.byte	110
 852 001b CD       		.byte	-51
 853 001c D3       		.byte	-45
 854 001d 36       		.byte	54
 855 001e 69       		.byte	105
 856 001f 21       		.byte	33
 857 0020 58       		.byte	88
 858 0021 66       		.byte	102
 859 0022 66       		.byte	102
 860 0023 66       		.byte	102
 861 0024 66       		.byte	102
 862 0025 66       		.byte	102
 863 0026 66       		.byte	102
 864 0027 66       		.byte	102
 865 0028 66       		.byte	102
 866 0029 66       		.byte	102
 867 002a 66       		.byte	102
 868 002b 66       		.byte	102
 869 002c 66       		.byte	102
 870 002d 66       		.byte	102
 871 002e 66       		.byte	102
 872 002f 66       		.byte	102
 873 0030 66       		.byte	102
 874 0031 66       		.byte	102
 875 0032 66       		.byte	102
 876 0033 66       		.byte	102
 877 0034 66       		.byte	102
 878 0035 66       		.byte	102
 879 0036 66       		.byte	102
 880 0037 66       		.byte	102
 881 0038 66       		.byte	102
 882 0039 66       		.byte	102
 883 003a 66       		.byte	102
 884 003b 66       		.byte	102
 885 003c 66       		.byte	102
 886 003d 66       		.byte	102
 887 003e 66       		.byte	102
 888 003f 66       		.byte	102
 889 0040 A3       		.byte	-93
 890 0041 DD       		.byte	-35
 891 0042 B7       		.byte	-73
 892 0043 A5       		.byte	-91
 893 0044 B3       		.byte	-77
 894 0045 8A       		.byte	-118
 895 0046 DE       		.byte	-34
 896 0047 6D       		.byte	109
 897 0048 F5       		.byte	-11
 898 0049 52       		.byte	82
 899 004a 51       		.byte	81
 900 004b 77       		.byte	119
 901 004c 80       		.byte	-128
 902 004d 9F       		.byte	-97
 903 004e F0       		.byte	-16
 904 004f 20       		.byte	32
 905 0050 7D       		.byte	125
 906 0051 E3       		.byte	-29
 907 0052 AB       		.byte	-85
 908 0053 64       		.byte	100
 909 0054 8E       		.byte	-114
 910 0055 4E       		.byte	78
 911 0056 EA       		.byte	-22
 912 0057 66       		.byte	102
 913 0058 65       		.byte	101
 914 0059 76       		.byte	118
 915 005a 8B       		.byte	-117
 916 005b D7       		.byte	-41
 917 005c 0F       		.byte	15
 918 005d 5F       		.byte	95
 919 005e 87       		.byte	-121
 920 005f 67       		.byte	103
 921 0060 01       		.byte	1
 922 0061 00       		.byte	0
 923 0062 00000000 		.space	30
 923      00000000 
 923      00000000 
 923      00000000 
 923      00000000 
 924              		.section	.rodata.ed25519_d,"a",%progbits
 925              		.set	.LANCHOR0,. + 0
 928              	ed25519_d:
 929 0000 A3       		.byte	-93
 930 0001 78       		.byte	120
 931 0002 59       		.byte	89
 932 0003 13       		.byte	19
 933 0004 CA       		.byte	-54
 934 0005 4D       		.byte	77
 935 0006 EB       		.byte	-21
 936 0007 75       		.byte	117
 937 0008 AB       		.byte	-85
 938 0009 D8       		.byte	-40
 939 000a 41       		.byte	65
 940 000b 41       		.byte	65
 941 000c 4D       		.byte	77
 942 000d 0A       		.byte	10
 943 000e 70       		.byte	112
 944 000f 00       		.byte	0
 945 0010 98       		.byte	-104
 946 0011 E8       		.byte	-24
 947 0012 79       		.byte	121
 948 0013 77       		.byte	119
 949 0014 79       		.byte	121
 950 0015 40       		.byte	64
 951 0016 C7       		.byte	-57
 952 0017 8C       		.byte	-116
 953 0018 73       		.byte	115
 954 0019 FE       		.byte	-2
 955 001a 6F       		.byte	111
 956 001b 2B       		.byte	43
 957 001c EE       		.byte	-18
 958 001d 6C       		.byte	108
 959 001e 03       		.byte	3
 960 001f 52       		.byte	82
 961              		.section	.rodata.ed25519_k,"a",%progbits
 962              		.set	.LANCHOR1,. + 0
 965              	ed25519_k:
 966 0000 59       		.byte	89
 967 0001 F1       		.byte	-15
 968 0002 B2       		.byte	-78
 969 0003 26       		.byte	38
 970 0004 94       		.byte	-108
 971 0005 9B       		.byte	-101
 972 0006 D6       		.byte	-42
 973 0007 EB       		.byte	-21
 974 0008 56       		.byte	86
 975 0009 B1       		.byte	-79
 976 000a 83       		.byte	-125
 977 000b 82       		.byte	-126
 978 000c 9A       		.byte	-102
 979 000d 14       		.byte	20
 980 000e E0       		.byte	-32
 981 000f 00       		.byte	0
 982 0010 30       		.byte	48
 983 0011 D1       		.byte	-47
 984 0012 F3       		.byte	-13
 985 0013 EE       		.byte	-18
 986 0014 F2       		.byte	-14
 987 0015 80       		.byte	-128
 988 0016 8E       		.byte	-114
 989 0017 19       		.byte	25
 990 0018 E7       		.byte	-25
 991 0019 FC       		.byte	-4
 992 001a DF       		.byte	-33
 993 001b 56       		.byte	86
 994 001c DC       		.byte	-36
 995 001d D9       		.byte	-39
 996 001e 06       		.byte	6
 997 001f 24       		.byte	36
 998              		.section	.rodata.ed25519_neutral,"a",%progbits
 999              		.set	.LANCHOR2,. + 0
 1002              	ed25519_neutral:
 1003 0000 00       		.byte	0
 1004 0001 00000000 		.space	31
 1004      00000000 
 1004      00000000 
 1004      00000000 
 1004      00000000 
 1005 0020 01       		.byte	1
 1006 0021 00       		.byte	0
 1007 0022 00000000 		.space	30
 1007      00000000 
 1007      00000000 
 1007      00000000 
 1007      00000000 
 1008 0040 00       		.byte	0
 1009 0041 00000000 		.space	31
 1009      00000000 
 1009      00000000 
 1009      00000000 
 1009      00000000 
 1010 0060 01       		.byte	1
 1011 0061 00       		.byte	0
 1012 0062 00000000 		.space	30
 1012      00000000 
 1012      00000000 
 1012      00000000 
 1012      00000000 
 1013              		.text
 1014              	.Letext0:
 1015              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/machine/_d
 1016              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/_stdin
 1017              		.file 6 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/lock.h
 1018              		.file 7 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/_types
 1019              		.file 8 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/lib/gcc/arm-none-eabi/7.3.1/incl
 1020              		.file 9 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/reent.
 1021              		.file 10 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ed25519.c
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:16     .text.ed25519_project:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:23     .text.ed25519_project:0000000000000000 ed25519_project
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:103    .text.ed25519_unproject:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:110    .text.ed25519_unproject:0000000000000000 ed25519_unproject
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:164    .text.ed25519_pack:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:171    .text.ed25519_pack:0000000000000000 ed25519_pack
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:270    .text.ed25519_try_unpack:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:277    .text.ed25519_try_unpack:0000000000000000 ed25519_try_unpack
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:402    .text.ed25519_try_unpack:00000000000000a0 $d
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:408    .text.ed25519_add:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:415    .text.ed25519_add:0000000000000000 ed25519_add
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:559    .text.ed25519_add:00000000000000dc $d
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:564    .text.ed25519_double:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:571    .text.ed25519_double:0000000000000000 ed25519_double
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:694    .text.ed25519_smult:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:701    .text.ed25519_smult:0000000000000000 ed25519_smult
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:815    .text.ed25519_smult:0000000000000080 $d
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:1002   .rodata.ed25519_neutral:0000000000000000 ed25519_neutral
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:824    .rodata.ed25519_base:0000000000000000 ed25519_base
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:923    .rodata.ed25519_base:0000000000000062 $d
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:928    .rodata.ed25519_d:0000000000000000 ed25519_d
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:965    .rodata.ed25519_k:0000000000000000 ed25519_k
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cc5d2YtL.s:1004   .rodata.ed25519_neutral:0000000000000001 $d

UNDEFINED SYMBOLS
f25519_load
f25519_mul__distinct
f25519_inv__distinct
f25519_normalize
f25519_add
f25519_sub
f25519_sqrt
f25519_neg
f25519_select
f25519_eq
f25519_one
memcpy
