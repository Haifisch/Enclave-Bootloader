   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"c25519.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.xc_diffadd,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	xc_diffadd:
  23              	.LFB3:
  24              		.file 1 "25519/c25519.c"
   1:25519/c25519.c **** /* Curve25519 (Montgomery form)
   2:25519/c25519.c ****  * Daniel Beer <dlbeer@gmail.com>, 18 Apr 2014
   3:25519/c25519.c ****  *
   4:25519/c25519.c ****  * This file is in the public domain.
   5:25519/c25519.c ****  */
   6:25519/c25519.c **** 
   7:25519/c25519.c **** #include "c25519.h"
   8:25519/c25519.c **** 
   9:25519/c25519.c **** const uint8_t c25519_base_x[F25519_SIZE] = {9};
  10:25519/c25519.c **** 
  11:25519/c25519.c **** /* Double an X-coordinate */
  12:25519/c25519.c **** static void xc_double(uint8_t *x3, uint8_t *z3,
  13:25519/c25519.c **** 		      const uint8_t *x1, const uint8_t *z1)
  14:25519/c25519.c **** {
  15:25519/c25519.c **** 	/* Explicit formulas database: dbl-1987-m
  16:25519/c25519.c **** 	 *
  17:25519/c25519.c **** 	 * source 1987 Montgomery "Speeding the Pollard and elliptic
  18:25519/c25519.c **** 	 *   curve methods of factorization", page 261, fourth display
  19:25519/c25519.c **** 	 * compute X3 = (X1^2-Z1^2)^2
  20:25519/c25519.c **** 	 * compute Z3 = 4 X1 Z1 (X1^2 + a X1 Z1 + Z1^2)
  21:25519/c25519.c **** 	 */
  22:25519/c25519.c **** 	uint8_t x1sq[F25519_SIZE];
  23:25519/c25519.c **** 	uint8_t z1sq[F25519_SIZE];
  24:25519/c25519.c **** 	uint8_t x1z1[F25519_SIZE];
  25:25519/c25519.c **** 	uint8_t a[F25519_SIZE];
  26:25519/c25519.c **** 
  27:25519/c25519.c **** 	f25519_mul__distinct(x1sq, x1, x1);
  28:25519/c25519.c **** 	f25519_mul__distinct(z1sq, z1, z1);
  29:25519/c25519.c **** 	f25519_mul__distinct(x1z1, x1, z1);
  30:25519/c25519.c **** 
  31:25519/c25519.c **** 	f25519_sub(a, x1sq, z1sq);
  32:25519/c25519.c **** 	f25519_mul__distinct(x3, a, a);
  33:25519/c25519.c **** 
  34:25519/c25519.c **** 	f25519_mul_c(a, x1z1, 486662);
  35:25519/c25519.c **** 	f25519_add(a, x1sq, a);
  36:25519/c25519.c **** 	f25519_add(a, z1sq, a);
  37:25519/c25519.c **** 	f25519_mul__distinct(x1sq, x1z1, a);
  38:25519/c25519.c **** 	f25519_mul_c(z3, x1sq, 4);
  39:25519/c25519.c **** }
  40:25519/c25519.c **** 
  41:25519/c25519.c **** /* Differential addition */
  42:25519/c25519.c **** static void xc_diffadd(uint8_t *x5, uint8_t *z5,
  43:25519/c25519.c **** 		       const uint8_t *x1, const uint8_t *z1,
  44:25519/c25519.c **** 		       const uint8_t *x2, const uint8_t *z2,
  45:25519/c25519.c **** 		       const uint8_t *x3, const uint8_t *z3)
  46:25519/c25519.c **** {
  25              		.loc 1 46 0
  26              		.cfi_startproc
  27              		@ args = 16, pretend = 0, frame = 128
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  30 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  31              		.cfi_def_cfa_offset 20
  32              		.cfi_offset 4, -20
  33              		.cfi_offset 5, -16
  34              		.cfi_offset 6, -12
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 1F46     		mov	r7, r3
  38 0004 0646     		mov	r6, r0
  39 0006 0C46     		mov	r4, r1
  40 0008 1546     		mov	r5, r2
  41 000a A1B0     		sub	sp, sp, #132
  42              		.cfi_def_cfa_offset 152
  47:25519/c25519.c **** 	/* Explicit formulas database: dbl-1987-m3
  48:25519/c25519.c **** 	 *
  49:25519/c25519.c **** 	 * source 1987 Montgomery "Speeding the Pollard and elliptic curve
  50:25519/c25519.c **** 	 *   methods of factorization", page 261, fifth display, plus
  51:25519/c25519.c **** 	 *   common-subexpression elimination
  52:25519/c25519.c **** 	 * compute A = X2+Z2
  53:25519/c25519.c **** 	 * compute B = X2-Z2
  54:25519/c25519.c **** 	 * compute C = X3+Z3
  55:25519/c25519.c **** 	 * compute D = X3-Z3
  56:25519/c25519.c **** 	 * compute DA = D A
  57:25519/c25519.c **** 	 * compute CB = C B
  58:25519/c25519.c **** 	 * compute X5 = Z1(DA+CB)^2
  59:25519/c25519.c **** 	 * compute Z5 = X1(DA-CB)^2
  60:25519/c25519.c **** 	 */
  61:25519/c25519.c **** 	uint8_t da[F25519_SIZE];
  62:25519/c25519.c **** 	uint8_t cb[F25519_SIZE];
  63:25519/c25519.c **** 	uint8_t a[F25519_SIZE];
  64:25519/c25519.c **** 	uint8_t b[F25519_SIZE];
  65:25519/c25519.c **** 
  66:25519/c25519.c **** 	f25519_add(a, x2, z2);
  43              		.loc 1 66 0
  44 000c DDE92612 		ldrd	r1, r2, [sp, #152]
  45              	.LVL1:
  46 0010 10A8     		add	r0, sp, #64
  47              	.LVL2:
  48 0012 FFF7FEFF 		bl	f25519_add
  49              	.LVL3:
  67:25519/c25519.c **** 	f25519_sub(b, x3, z3); /* D */
  50              		.loc 1 67 0
  51 0016 DDE92812 		ldrd	r1, r2, [sp, #160]
  52 001a 18A8     		add	r0, sp, #96
  53 001c FFF7FEFF 		bl	f25519_sub
  54              	.LVL4:
  68:25519/c25519.c **** 	f25519_mul__distinct(da, a, b);
  55              		.loc 1 68 0
  56 0020 18AA     		add	r2, sp, #96
  57 0022 10A9     		add	r1, sp, #64
  58 0024 6846     		mov	r0, sp
  59 0026 FFF7FEFF 		bl	f25519_mul__distinct
  60              	.LVL5:
  69:25519/c25519.c **** 
  70:25519/c25519.c **** 	f25519_sub(b, x2, z2);
  61              		.loc 1 70 0
  62 002a DDE92612 		ldrd	r1, r2, [sp, #152]
  63 002e 18A8     		add	r0, sp, #96
  64 0030 FFF7FEFF 		bl	f25519_sub
  65              	.LVL6:
  71:25519/c25519.c **** 	f25519_add(a, x3, z3); /* C */
  66              		.loc 1 71 0
  67 0034 DDE92812 		ldrd	r1, r2, [sp, #160]
  68 0038 10A8     		add	r0, sp, #64
  69 003a FFF7FEFF 		bl	f25519_add
  70              	.LVL7:
  72:25519/c25519.c **** 	f25519_mul__distinct(cb, a, b);
  71              		.loc 1 72 0
  72 003e 18AA     		add	r2, sp, #96
  73 0040 10A9     		add	r1, sp, #64
  74 0042 08A8     		add	r0, sp, #32
  75 0044 FFF7FEFF 		bl	f25519_mul__distinct
  76              	.LVL8:
  73:25519/c25519.c **** 
  74:25519/c25519.c **** 	f25519_add(a, da, cb);
  77              		.loc 1 74 0
  78 0048 08AA     		add	r2, sp, #32
  79 004a 6946     		mov	r1, sp
  80 004c 10A8     		add	r0, sp, #64
  81 004e FFF7FEFF 		bl	f25519_add
  82              	.LVL9:
  75:25519/c25519.c **** 	f25519_mul__distinct(b, a, a);
  83              		.loc 1 75 0
  84 0052 10AA     		add	r2, sp, #64
  85 0054 1146     		mov	r1, r2
  86 0056 18A8     		add	r0, sp, #96
  87 0058 FFF7FEFF 		bl	f25519_mul__distinct
  88              	.LVL10:
  76:25519/c25519.c **** 	f25519_mul__distinct(x5, z1, b);
  89              		.loc 1 76 0
  90 005c 18AA     		add	r2, sp, #96
  91 005e 3946     		mov	r1, r7
  92 0060 3046     		mov	r0, r6
  93 0062 FFF7FEFF 		bl	f25519_mul__distinct
  94              	.LVL11:
  77:25519/c25519.c **** 
  78:25519/c25519.c **** 	f25519_sub(a, da, cb);
  95              		.loc 1 78 0
  96 0066 08AA     		add	r2, sp, #32
  97 0068 6946     		mov	r1, sp
  98 006a 10A8     		add	r0, sp, #64
  99 006c FFF7FEFF 		bl	f25519_sub
 100              	.LVL12:
  79:25519/c25519.c **** 	f25519_mul__distinct(b, a, a);
 101              		.loc 1 79 0
 102 0070 10AA     		add	r2, sp, #64
 103 0072 1146     		mov	r1, r2
 104 0074 18A8     		add	r0, sp, #96
 105 0076 FFF7FEFF 		bl	f25519_mul__distinct
 106              	.LVL13:
  80:25519/c25519.c **** 	f25519_mul__distinct(z5, x1, b);
 107              		.loc 1 80 0
 108 007a 18AA     		add	r2, sp, #96
 109 007c 2946     		mov	r1, r5
 110 007e 2046     		mov	r0, r4
 111 0080 FFF7FEFF 		bl	f25519_mul__distinct
 112              	.LVL14:
  81:25519/c25519.c **** }
 113              		.loc 1 81 0
 114 0084 21B0     		add	sp, sp, #132
 115              		.cfi_def_cfa_offset 20
 116              		@ sp needed
 117 0086 F0BD     		pop	{r4, r5, r6, r7, pc}
 118              		.cfi_endproc
 119              	.LFE3:
 121              		.section	.text.c25519_smult,"ax",%progbits
 122              		.align	1
 123              		.global	c25519_smult
 124              		.syntax unified
 125              		.thumb
 126              		.thumb_func
 127              		.fpu softvfp
 129              	c25519_smult:
 130              	.LFB4:
  82:25519/c25519.c **** 
  83:25519/c25519.c **** void c25519_smult(uint8_t *result, const uint8_t *q, const uint8_t *e)
  84:25519/c25519.c **** {
 131              		.loc 1 84 0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 264
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135              	.LVL15:
 136 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 137              		.cfi_def_cfa_offset 36
 138              		.cfi_offset 4, -36
 139              		.cfi_offset 5, -32
 140              		.cfi_offset 6, -28
 141              		.cfi_offset 7, -24
 142              		.cfi_offset 8, -20
 143              		.cfi_offset 9, -16
 144              		.cfi_offset 10, -12
 145              		.cfi_offset 11, -8
 146              		.cfi_offset 14, -4
  85:25519/c25519.c **** 	/* Current point: P_m */
  86:25519/c25519.c **** 	uint8_t xm[F25519_SIZE];
  87:25519/c25519.c **** 	uint8_t zm[F25519_SIZE] = {1};
 147              		.loc 1 87 0
 148 0004 0124     		movs	r4, #1
  84:25519/c25519.c **** 	/* Current point: P_m */
 149              		.loc 1 84 0
 150 0006 8A46     		mov	r10, r1
 151 0008 C7B0     		sub	sp, sp, #284
 152              		.cfi_def_cfa_offset 320
  84:25519/c25519.c **** 	/* Current point: P_m */
 153              		.loc 1 84 0
 154 000a 0592     		str	r2, [sp, #20]
 155              		.loc 1 87 0
 156 000c 0021     		movs	r1, #0
 157              	.LVL16:
 158 000e 2022     		movs	r2, #32
 159              	.LVL17:
  84:25519/c25519.c **** 	/* Current point: P_m */
 160              		.loc 1 84 0
 161 0010 8346     		mov	fp, r0
 162              		.loc 1 87 0
 163 0012 0EA8     		add	r0, sp, #56
 164              	.LVL18:
 165 0014 FFF7FEFF 		bl	memset
 166              	.LVL19:
  88:25519/c25519.c **** 
  89:25519/c25519.c **** 	/* Predecessor: P_(m-1) */
  90:25519/c25519.c **** 	uint8_t xm1[F25519_SIZE] = {1};
 167              		.loc 1 90 0
 168 0018 2022     		movs	r2, #32
 169 001a 0021     		movs	r1, #0
 170 001c 16A8     		add	r0, sp, #88
  87:25519/c25519.c **** 
 171              		.loc 1 87 0
 172 001e 8DF83840 		strb	r4, [sp, #56]
 173              		.loc 1 90 0
 174 0022 FFF7FEFF 		bl	memset
 175              	.LVL20:
  91:25519/c25519.c **** 	uint8_t zm1[F25519_SIZE] = {0};
 176              		.loc 1 91 0
 177 0026 2022     		movs	r2, #32
 178 0028 0021     		movs	r1, #0
 179 002a 1EA8     		add	r0, sp, #120
  90:25519/c25519.c **** 	uint8_t zm1[F25519_SIZE] = {0};
 180              		.loc 1 90 0
 181 002c 8DF85840 		strb	r4, [sp, #88]
 182              		.loc 1 91 0
 183 0030 FFF7FEFF 		bl	memset
 184              	.LVL21:
 185              	.LBB7:
 186              	.LBB8:
 187              		.file 2 "25519/f25519.h"
   1:25519/f25519.h **** /* Arithmetic mod p = 2^255-19
   2:25519/f25519.h ****  * Daniel Beer <dlbeer@gmail.com>, 8 Jan 2014
   3:25519/f25519.h ****  *
   4:25519/f25519.h ****  * This file is in the public domain.
   5:25519/f25519.h ****  */
   6:25519/f25519.h **** 
   7:25519/f25519.h **** #ifndef F25519_H_
   8:25519/f25519.h **** #define F25519_H_
   9:25519/f25519.h **** 
  10:25519/f25519.h **** #include <stdint.h>
  11:25519/f25519.h **** #include <string.h>
  12:25519/f25519.h **** 
  13:25519/f25519.h **** /* Field elements are represented as little-endian byte strings. All
  14:25519/f25519.h ****  * operations have timings which are independent of input data, so they
  15:25519/f25519.h ****  * can be safely used for cryptography.
  16:25519/f25519.h ****  *
  17:25519/f25519.h ****  * Computation is performed on un-normalized elements. These are byte
  18:25519/f25519.h ****  * strings which fall into the range 0 <= x < 2p. Use f25519_normalize()
  19:25519/f25519.h ****  * to convert to a value 0 <= x < p.
  20:25519/f25519.h ****  *
  21:25519/f25519.h ****  * Elements received from the outside may greater even than 2p.
  22:25519/f25519.h ****  * f25519_normalize() will correctly deal with these numbers too.
  23:25519/f25519.h ****  */
  24:25519/f25519.h **** #define F25519_SIZE		32
  25:25519/f25519.h **** 
  26:25519/f25519.h **** /* Identity constants */
  27:25519/f25519.h **** extern const uint8_t f25519_zero[F25519_SIZE];
  28:25519/f25519.h **** extern const uint8_t f25519_one[F25519_SIZE];
  29:25519/f25519.h **** 
  30:25519/f25519.h **** /* Load a small constant */
  31:25519/f25519.h **** void f25519_load(uint8_t *x, uint32_t c);
  32:25519/f25519.h **** 
  33:25519/f25519.h **** /* Copy two points */
  34:25519/f25519.h **** static inline void f25519_copy(uint8_t *x, const uint8_t *a)
  35:25519/f25519.h **** {
  36:25519/f25519.h **** 	memcpy(x, a, F25519_SIZE);
 188              		.loc 2 36 0
 189 0034 5346     		mov	r3, r10
 190 0036 06AC     		add	r4, sp, #24
 191              	.LVL22:
 192 0038 0AF12005 		add	r5, r10, #32
 193              	.LVL23:
 194              	.L3:
 195 003c 2246     		mov	r2, r4
 196 003e 1868     		ldr	r0, [r3]	@ unaligned
 197 0040 5968     		ldr	r1, [r3, #4]	@ unaligned
 198 0042 0833     		adds	r3, r3, #8
 199 0044 03C2     		stmia	r2!, {r0, r1}
 200 0046 AB42     		cmp	r3, r5
 201 0048 1446     		mov	r4, r2
 202 004a F7D1     		bne	.L3
 203              	.LVL24:
 204              	.LBE8:
 205              	.LBE7:
  92:25519/c25519.c **** 
  93:25519/c25519.c **** 	int i;
  94:25519/c25519.c **** 
  95:25519/c25519.c **** 	/* Note: bit 254 is assumed to be 1 */
  96:25519/c25519.c **** 	f25519_copy(xm, q);
  97:25519/c25519.c **** 
  98:25519/c25519.c **** 	for (i = 253; i >= 0; i--) {
 206              		.loc 1 98 0
 207 004c 4FF0FD08 		mov	r8, #253
 208              	.LBB9:
  99:25519/c25519.c **** 		const int bit = (e[i >> 3] >> (i & 7)) & 1;
 100:25519/c25519.c **** 		uint8_t xms[F25519_SIZE];
 101:25519/c25519.c **** 		uint8_t zms[F25519_SIZE];
 102:25519/c25519.c **** 
 103:25519/c25519.c **** 		/* From P_m and P_(m-1), compute P_(2m) and P_(2m-1) */
 104:25519/c25519.c **** 		xc_diffadd(xm1, zm1, q, f25519_one, xm, zm, xm1, zm1);
 209              		.loc 1 104 0
 210 0050 1EAF     		add	r7, sp, #120
 211              	.LVL25:
 212              	.L4:
  99:25519/c25519.c **** 		const int bit = (e[i >> 3] >> (i & 7)) & 1;
 213              		.loc 1 99 0 discriminator 3
 214 0052 059A     		ldr	r2, [sp, #20]
 215 0054 4FEAE803 		asr	r3, r8, #3
 216 0058 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 217              		.loc 1 104 0 discriminator 3
 218 005a 0EAD     		add	r5, sp, #56
 219 005c 06AC     		add	r4, sp, #24
 220              	.LVL26:
 221 005e 0DF15809 		add	r9, sp, #88
  99:25519/c25519.c **** 		const int bit = (e[i >> 3] >> (i & 7)) & 1;
 222              		.loc 1 99 0 discriminator 3
 223 0062 08F00703 		and	r3, r8, #7
 224 0066 1E41     		asrs	r6, r6, r3
 225              		.loc 1 104 0 discriminator 3
 226 0068 5246     		mov	r2, r10
 227 006a 394B     		ldr	r3, .L7
 228 006c 3946     		mov	r1, r7
 229 006e 4846     		mov	r0, r9
 230 0070 CDE90297 		strd	r9, r7, [sp, #8]
 231 0074 0195     		str	r5, [sp, #4]
 232 0076 0094     		str	r4, [sp]
 233 0078 FFF7FEFF 		bl	xc_diffadd
 234              	.LVL27:
 235              	.LBB10:
 236              	.LBB11:
  27:25519/c25519.c **** 	f25519_mul__distinct(z1sq, z1, z1);
 237              		.loc 1 27 0 discriminator 3
 238 007c 2246     		mov	r2, r4
 239 007e 2146     		mov	r1, r4
 240 0080 26A8     		add	r0, sp, #152
 241 0082 FFF7FEFF 		bl	f25519_mul__distinct
 242              	.LVL28:
  28:25519/c25519.c **** 	f25519_mul__distinct(x1z1, x1, z1);
 243              		.loc 1 28 0 discriminator 3
 244 0086 2A46     		mov	r2, r5
 245 0088 2946     		mov	r1, r5
 246 008a 2EA8     		add	r0, sp, #184
 247 008c FFF7FEFF 		bl	f25519_mul__distinct
 248              	.LVL29:
  29:25519/c25519.c **** 
 249              		.loc 1 29 0 discriminator 3
 250 0090 2A46     		mov	r2, r5
 251 0092 2146     		mov	r1, r4
 252 0094 36A8     		add	r0, sp, #216
 253 0096 FFF7FEFF 		bl	f25519_mul__distinct
 254              	.LVL30:
  31:25519/c25519.c **** 	f25519_mul__distinct(x3, a, a);
 255              		.loc 1 31 0 discriminator 3
 256 009a 2EAA     		add	r2, sp, #184
 257 009c 26A9     		add	r1, sp, #152
 258 009e 3EA8     		add	r0, sp, #248
 259 00a0 FFF7FEFF 		bl	f25519_sub
 260              	.LVL31:
  32:25519/c25519.c **** 
 261              		.loc 1 32 0 discriminator 3
 262 00a4 3EAA     		add	r2, sp, #248
 263 00a6 1146     		mov	r1, r2
 264 00a8 2046     		mov	r0, r4
 265 00aa FFF7FEFF 		bl	f25519_mul__distinct
 266              	.LVL32:
  34:25519/c25519.c **** 	f25519_add(a, x1sq, a);
 267              		.loc 1 34 0 discriminator 3
 268 00ae 294A     		ldr	r2, .L7+4
 269 00b0 36A9     		add	r1, sp, #216
 270 00b2 3EA8     		add	r0, sp, #248
 271 00b4 FFF7FEFF 		bl	f25519_mul_c
 272              	.LVL33:
  35:25519/c25519.c **** 	f25519_add(a, z1sq, a);
 273              		.loc 1 35 0 discriminator 3
 274 00b8 3EAA     		add	r2, sp, #248
 275 00ba 1046     		mov	r0, r2
 276 00bc 26A9     		add	r1, sp, #152
 277 00be FFF7FEFF 		bl	f25519_add
 278              	.LVL34:
  36:25519/c25519.c **** 	f25519_mul__distinct(x1sq, x1z1, a);
 279              		.loc 1 36 0 discriminator 3
 280 00c2 3EAA     		add	r2, sp, #248
 281 00c4 1046     		mov	r0, r2
 282 00c6 2EA9     		add	r1, sp, #184
 283 00c8 FFF7FEFF 		bl	f25519_add
 284              	.LVL35:
  37:25519/c25519.c **** 	f25519_mul_c(z3, x1sq, 4);
 285              		.loc 1 37 0 discriminator 3
 286 00cc 3EAA     		add	r2, sp, #248
 287 00ce 36A9     		add	r1, sp, #216
 288 00d0 26A8     		add	r0, sp, #152
 289 00d2 FFF7FEFF 		bl	f25519_mul__distinct
 290              	.LVL36:
  38:25519/c25519.c **** }
 291              		.loc 1 38 0 discriminator 3
 292 00d6 0422     		movs	r2, #4
 293 00d8 26A9     		add	r1, sp, #152
 294 00da 2846     		mov	r0, r5
 295 00dc FFF7FEFF 		bl	f25519_mul_c
 296              	.LVL37:
 297              	.LBE11:
 298              	.LBE10:
 105:25519/c25519.c **** 		xc_double(xm, zm, xm, zm);
 106:25519/c25519.c **** 
 107:25519/c25519.c **** 		/* Compute P_(2m+1) */
 108:25519/c25519.c **** 		xc_diffadd(xms, zms, xm1, zm1, xm, zm, q, f25519_one);
 299              		.loc 1 108 0 discriminator 3
 300 00e0 1B4B     		ldr	r3, .L7
  99:25519/c25519.c **** 		uint8_t xms[F25519_SIZE];
 301              		.loc 1 99 0 discriminator 3
 302 00e2 06F00106 		and	r6, r6, #1
 303              	.LVL38:
 109:25519/c25519.c **** 
 110:25519/c25519.c **** 		/* Select:
 111:25519/c25519.c **** 		 *   bit = 1 --> (P_(2m+1), P_(2m))
 112:25519/c25519.c **** 		 *   bit = 0 --> (P_(2m), P_(2m-1))
 113:25519/c25519.c **** 		 */
 114:25519/c25519.c **** 		f25519_select(xm1, xm1, xm, bit);
 304              		.loc 1 114 0 discriminator 3
 305 00e6 F6B2     		uxtb	r6, r6
 306              	.LVL39:
 108:25519/c25519.c **** 
 307              		.loc 1 108 0 discriminator 3
 308 00e8 CDE902A3 		strd	r10, r3, [sp, #8]
 309 00ec 4A46     		mov	r2, r9
 310 00ee 3B46     		mov	r3, r7
 311 00f0 3EA9     		add	r1, sp, #248
 312 00f2 36A8     		add	r0, sp, #216
 313 00f4 CDE90045 		strd	r4, r5, [sp]
 314 00f8 FFF7FEFF 		bl	xc_diffadd
 315              	.LVL40:
 316              		.loc 1 114 0 discriminator 3
 317 00fc 3346     		mov	r3, r6
 318 00fe 2246     		mov	r2, r4
 319 0100 4946     		mov	r1, r9
 320 0102 4846     		mov	r0, r9
 321 0104 FFF7FEFF 		bl	f25519_select
 322              	.LVL41:
 115:25519/c25519.c **** 		f25519_select(zm1, zm1, zm, bit);
 323              		.loc 1 115 0 discriminator 3
 324 0108 3346     		mov	r3, r6
 325 010a 2A46     		mov	r2, r5
 326 010c 3946     		mov	r1, r7
 327 010e 3846     		mov	r0, r7
 328 0110 FFF7FEFF 		bl	f25519_select
 329              	.LVL42:
 116:25519/c25519.c **** 		f25519_select(xm, xm, xms, bit);
 330              		.loc 1 116 0 discriminator 3
 331 0114 3346     		mov	r3, r6
 332 0116 36AA     		add	r2, sp, #216
 333 0118 2146     		mov	r1, r4
 334 011a 2046     		mov	r0, r4
 335 011c FFF7FEFF 		bl	f25519_select
 336              	.LVL43:
 117:25519/c25519.c **** 		f25519_select(zm, zm, zms, bit);
 337              		.loc 1 117 0 discriminator 3
 338 0120 3346     		mov	r3, r6
 339 0122 3EAA     		add	r2, sp, #248
 340 0124 2946     		mov	r1, r5
 341 0126 2846     		mov	r0, r5
 342 0128 FFF7FEFF 		bl	f25519_select
 343              	.LVL44:
 344              	.LBE9:
  98:25519/c25519.c **** 		const int bit = (e[i >> 3] >> (i & 7)) & 1;
 345              		.loc 1 98 0 discriminator 3
 346 012c 18F1FF38 		adds	r8, r8, #-1
 347              	.LVL45:
 348 0130 8FD2     		bcs	.L4
 118:25519/c25519.c **** 	}
 119:25519/c25519.c **** 
 120:25519/c25519.c **** 	/* Freeze out of projective coordinates */
 121:25519/c25519.c **** 	f25519_inv__distinct(zm1, zm);
 349              		.loc 1 121 0
 350 0132 2946     		mov	r1, r5
 351 0134 3846     		mov	r0, r7
 352 0136 FFF7FEFF 		bl	f25519_inv__distinct
 353              	.LVL46:
 122:25519/c25519.c **** 	f25519_mul__distinct(result, zm1, xm);
 354              		.loc 1 122 0
 355 013a 2246     		mov	r2, r4
 356 013c 3946     		mov	r1, r7
 357 013e 5846     		mov	r0, fp
 358 0140 FFF7FEFF 		bl	f25519_mul__distinct
 359              	.LVL47:
 123:25519/c25519.c **** 	f25519_normalize(result);
 360              		.loc 1 123 0
 361 0144 5846     		mov	r0, fp
 362 0146 FFF7FEFF 		bl	f25519_normalize
 363              	.LVL48:
 124:25519/c25519.c **** }
 364              		.loc 1 124 0
 365 014a 47B0     		add	sp, sp, #284
 366              		.cfi_def_cfa_offset 36
 367              		@ sp needed
 368 014c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 369              	.LVL49:
 370              	.L8:
 371              		.align	2
 372              	.L7:
 373 0150 00000000 		.word	f25519_one
 374 0154 066D0700 		.word	486662
 375              		.cfi_endproc
 376              	.LFE4:
 378              		.global	c25519_base_x
 379              		.section	.rodata.c25519_base_x,"a",%progbits
 382              	c25519_base_x:
 383 0000 09       		.byte	9
 384 0001 00000000 		.space	31
 384      00000000 
 384      00000000 
 384      00000000 
 384      00000000 
 385              		.text
 386              	.Letext0:
 387              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/machine/_d
 388              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/_stdin
 389              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/lock.h
 390              		.file 6 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/_types
 391              		.file 7 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/lib/gcc/arm-none-eabi/7.3.1/incl
 392              		.file 8 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/reent.
 393              		.file 9 "25519/c25519.h"
 394              		.file 10 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 c25519.c
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccWj5clN.s:16     .text.xc_diffadd:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccWj5clN.s:22     .text.xc_diffadd:0000000000000000 xc_diffadd
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccWj5clN.s:122    .text.c25519_smult:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccWj5clN.s:129    .text.c25519_smult:0000000000000000 c25519_smult
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccWj5clN.s:373    .text.c25519_smult:0000000000000150 $d
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccWj5clN.s:382    .rodata.c25519_base_x:0000000000000000 c25519_base_x
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccWj5clN.s:384    .rodata.c25519_base_x:0000000000000001 $d

UNDEFINED SYMBOLS
f25519_add
f25519_sub
f25519_mul__distinct
memset
f25519_mul_c
f25519_select
f25519_inv__distinct
f25519_normalize
f25519_one
