   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"fprime.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.raw_add,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	raw_add:
  23              	.LFB1:
  24              		.file 1 "25519/fprime.c"
   1:25519/fprime.c **** /* Arithmetic in prime fields
   2:25519/fprime.c ****  * Daniel Beer <dlbeer@gmail.com>, 10 Jan 2014
   3:25519/fprime.c ****  *
   4:25519/fprime.c ****  * This file is in the public domain.
   5:25519/fprime.c ****  */
   6:25519/fprime.c **** 
   7:25519/fprime.c **** #include "fprime.h"
   8:25519/fprime.c **** 
   9:25519/fprime.c **** const uint8_t fprime_zero[FPRIME_SIZE] = {0};
  10:25519/fprime.c **** const uint8_t fprime_one[FPRIME_SIZE] = {1};
  11:25519/fprime.c **** 
  12:25519/fprime.c **** static void raw_add(uint8_t *x, const uint8_t *p)
  13:25519/fprime.c **** {
  25              		.loc 1 13 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  14:25519/fprime.c **** 	uint16_t c = 0;
  30              		.loc 1 14 0
  31 0000 0023     		movs	r3, #0
  13:25519/fprime.c **** 	uint16_t c = 0;
  32              		.loc 1 13 0
  33 0002 30B5     		push	{r4, r5, lr}
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0004 421E     		subs	r2, r0, #1
  39 0006 0139     		subs	r1, r1, #1
  40              	.LVL1:
  41 0008 1F30     		adds	r0, r0, #31
  42              	.LVL2:
  43              	.L2:
  15:25519/fprime.c **** 	int i;
  16:25519/fprime.c **** 
  17:25519/fprime.c **** 	for (i = 0; i < FPRIME_SIZE; i++) {
  18:25519/fprime.c **** 		c += ((uint16_t)x[i]) + ((uint16_t)p[i]);
  44              		.loc 1 18 0 discriminator 3
  45 000a 12F8014F 		ldrb	r4, [r2, #1]!	@ zero_extendqisi2
  46              	.LVL3:
  47 000e 11F8015F 		ldrb	r5, [r1, #1]!	@ zero_extendqisi2
  17:25519/fprime.c **** 		c += ((uint16_t)x[i]) + ((uint16_t)p[i]);
  48              		.loc 1 17 0 discriminator 3
  49 0012 9042     		cmp	r0, r2
  50              		.loc 1 18 0 discriminator 3
  51 0014 2C44     		add	r4, r4, r5
  52 0016 2344     		add	r3, r3, r4
  53              	.LVL4:
  19:25519/fprime.c **** 		x[i] = c;
  54              		.loc 1 19 0 discriminator 3
  55 0018 1370     		strb	r3, [r2]
  20:25519/fprime.c **** 		c >>= 8;
  56              		.loc 1 20 0 discriminator 3
  57 001a C3F30F23 		ubfx	r3, r3, #8, #16
  58              	.LVL5:
  17:25519/fprime.c **** 		c += ((uint16_t)x[i]) + ((uint16_t)p[i]);
  59              		.loc 1 17 0 discriminator 3
  60 001e F4D1     		bne	.L2
  21:25519/fprime.c **** 	}
  22:25519/fprime.c **** }
  61              		.loc 1 22 0
  62 0020 30BD     		pop	{r4, r5, pc}
  63              		.cfi_endproc
  64              	.LFE1:
  66              		.section	.text.prime_msb,"ax",%progbits
  67              		.align	1
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu softvfp
  73              	prime_msb:
  74              	.LFB3:
  23:25519/fprime.c **** 
  24:25519/fprime.c **** static void raw_try_sub(uint8_t *x, const uint8_t *p)
  25:25519/fprime.c **** {
  26:25519/fprime.c **** 	uint8_t minusp[FPRIME_SIZE];
  27:25519/fprime.c **** 	uint16_t c = 0;
  28:25519/fprime.c **** 	int i;
  29:25519/fprime.c **** 
  30:25519/fprime.c **** 	for (i = 0; i < FPRIME_SIZE; i++) {
  31:25519/fprime.c **** 		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
  32:25519/fprime.c **** 		minusp[i] = c;
  33:25519/fprime.c **** 		c = (c >> 8) & 1;
  34:25519/fprime.c **** 	}
  35:25519/fprime.c **** 
  36:25519/fprime.c **** 	fprime_select(x, minusp, x, c);
  37:25519/fprime.c **** }
  38:25519/fprime.c **** 
  39:25519/fprime.c **** /* Warning: this function is variable-time */
  40:25519/fprime.c **** static int prime_msb(const uint8_t *p)
  41:25519/fprime.c **** {
  75              		.loc 1 41 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              		@ link register save eliminated.
  80              	.LVL6:
  42:25519/fprime.c **** 	int i;
  43:25519/fprime.c **** 	uint8_t x;
  44:25519/fprime.c **** 
  45:25519/fprime.c **** 	for (i = FPRIME_SIZE - 1; i >= 0; i--)
  81              		.loc 1 45 0
  82 0000 1F23     		movs	r3, #31
  83              	.LVL7:
  84              	.L6:
  46:25519/fprime.c **** 		if (p[i])
  85              		.loc 1 46 0
  86 0002 C25C     		ldrb	r2, [r0, r3]	@ zero_extendqisi2
  87 0004 12B9     		cbnz	r2, .L5
  45:25519/fprime.c **** 		if (p[i])
  88              		.loc 1 45 0 discriminator 2
  89 0006 13F1FF33 		adds	r3, r3, #-1
  90              	.LVL8:
  91 000a FAD2     		bcs	.L6
  92              	.LVL9:
  93              	.L5:
  47:25519/fprime.c **** 			break;
  48:25519/fprime.c **** 
  49:25519/fprime.c **** 	x = p[i];
  94              		.loc 1 49 0
  95 000c C25C     		ldrb	r2, [r0, r3]	@ zero_extendqisi2
  96              	.LVL10:
  50:25519/fprime.c **** 	i <<= 3;
  97              		.loc 1 50 0
  98 000e D800     		lsls	r0, r3, #3
  99              	.LVL11:
 100              	.L7:
  51:25519/fprime.c **** 
  52:25519/fprime.c **** 	while (x) {
 101              		.loc 1 52 0
 102 0010 0AB9     		cbnz	r2, .L8
  53:25519/fprime.c **** 		x >>= 1;
  54:25519/fprime.c **** 		i++;
  55:25519/fprime.c **** 	}
  56:25519/fprime.c **** 
  57:25519/fprime.c **** 	return i - 1;
  58:25519/fprime.c **** }
 103              		.loc 1 58 0
 104 0012 0138     		subs	r0, r0, #1
 105              	.LVL12:
 106 0014 7047     		bx	lr
 107              	.LVL13:
 108              	.L8:
  53:25519/fprime.c **** 		x >>= 1;
 109              		.loc 1 53 0
 110 0016 5208     		lsrs	r2, r2, #1
 111              	.LVL14:
  54:25519/fprime.c **** 	}
 112              		.loc 1 54 0
 113 0018 0130     		adds	r0, r0, #1
 114              	.LVL15:
 115 001a F9E7     		b	.L7
 116              		.cfi_endproc
 117              	.LFE3:
 119              		.section	.text.shift_n_bits,"ax",%progbits
 120              		.align	1
 121              		.syntax unified
 122              		.thumb
 123              		.thumb_func
 124              		.fpu softvfp
 126              	shift_n_bits:
 127              	.LFB4:
  59:25519/fprime.c **** 
  60:25519/fprime.c **** /* Warning: this function may be variable-time in the argument n */
  61:25519/fprime.c **** static void shift_n_bits(uint8_t *x, int n)
  62:25519/fprime.c **** {
 128              		.loc 1 62 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              	.LVL16:
 133 0000 10B5     		push	{r4, lr}
 134              		.cfi_def_cfa_offset 8
 135              		.cfi_offset 4, -8
 136              		.cfi_offset 14, -4
  63:25519/fprime.c **** 	uint16_t c = 0;
 137              		.loc 1 63 0
 138 0002 0024     		movs	r4, #0
 139 0004 421E     		subs	r2, r0, #1
 140 0006 1F30     		adds	r0, r0, #31
 141              	.LVL17:
 142              	.L11:
  64:25519/fprime.c **** 	int i;
  65:25519/fprime.c **** 
  66:25519/fprime.c **** 	for (i = 0; i < FPRIME_SIZE; i++) {
  67:25519/fprime.c **** 		c |= ((uint16_t)x[i]) << n;
 143              		.loc 1 67 0 discriminator 3
 144 0008 12F8013F 		ldrb	r3, [r2, #1]!	@ zero_extendqisi2
 145              	.LVL18:
 146 000c 8B40     		lsls	r3, r3, r1
 147 000e 2343     		orrs	r3, r3, r4
 148 0010 1BB2     		sxth	r3, r3
 149              	.LVL19:
  66:25519/fprime.c **** 		c |= ((uint16_t)x[i]) << n;
 150              		.loc 1 66 0 discriminator 3
 151 0012 9042     		cmp	r0, r2
  68:25519/fprime.c **** 		x[i] = c;
 152              		.loc 1 68 0 discriminator 3
 153 0014 1370     		strb	r3, [r2]
  69:25519/fprime.c **** 		c >>= 8;
 154              		.loc 1 69 0 discriminator 3
 155 0016 C3F30724 		ubfx	r4, r3, #8, #8
 156              	.LVL20:
  66:25519/fprime.c **** 		c |= ((uint16_t)x[i]) << n;
 157              		.loc 1 66 0 discriminator 3
 158 001a F5D1     		bne	.L11
  70:25519/fprime.c **** 	}
  71:25519/fprime.c **** }
 159              		.loc 1 71 0
 160 001c 10BD     		pop	{r4, pc}
 161              		.cfi_endproc
 162              	.LFE4:
 164              		.section	.text.fprime_load,"ax",%progbits
 165              		.align	1
 166              		.global	fprime_load
 167              		.syntax unified
 168              		.thumb
 169              		.thumb_func
 170              		.fpu softvfp
 172              	fprime_load:
 173              	.LFB5:
  72:25519/fprime.c **** 
  73:25519/fprime.c **** void fprime_load(uint8_t *x, uint32_t c)
  74:25519/fprime.c **** {
 174              		.loc 1 74 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178              		@ link register save eliminated.
 179              	.LVL21:
 180 0000 431E     		subs	r3, r0, #1
 181 0002 C21C     		adds	r2, r0, #3
 182              	.LVL22:
 183              	.L14:
  75:25519/fprime.c **** 	int i;
  76:25519/fprime.c **** 
  77:25519/fprime.c **** 	for (i = 0; i < sizeof(c); i++) {
 184              		.loc 1 77 0 discriminator 1
 185 0004 9342     		cmp	r3, r2
 186 0006 06D1     		bne	.L15
  78:25519/fprime.c **** 		x[i] = c;
  79:25519/fprime.c **** 		c >>= 8;
  80:25519/fprime.c **** 	}
  81:25519/fprime.c **** 
  82:25519/fprime.c **** 	for (; i < FPRIME_SIZE; i++)
  83:25519/fprime.c **** 		x[i] = 0;
 187              		.loc 1 83 0
 188 0008 0022     		movs	r2, #0
 189 000a 1F30     		adds	r0, r0, #31
 190              	.LVL23:
 191              	.L16:
 192              		.loc 1 83 0 is_stmt 0 discriminator 2
 193 000c 03F8012F 		strb	r2, [r3, #1]!
 194              	.LVL24:
  82:25519/fprime.c **** 		x[i] = 0;
 195              		.loc 1 82 0 is_stmt 1 discriminator 2
 196 0010 8342     		cmp	r3, r0
 197 0012 FBD1     		bne	.L16
  84:25519/fprime.c **** }
 198              		.loc 1 84 0
 199 0014 7047     		bx	lr
 200              	.LVL25:
 201              	.L15:
  78:25519/fprime.c **** 		x[i] = c;
 202              		.loc 1 78 0 discriminator 3
 203 0016 03F8011F 		strb	r1, [r3, #1]!
 204              	.LVL26:
  79:25519/fprime.c **** 	}
 205              		.loc 1 79 0 discriminator 3
 206 001a 090A     		lsrs	r1, r1, #8
 207              	.LVL27:
 208 001c F2E7     		b	.L14
 209              		.cfi_endproc
 210              	.LFE5:
 212              		.section	.text.fprime_eq,"ax",%progbits
 213              		.align	1
 214              		.global	fprime_eq
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 218              		.fpu softvfp
 220              	fprime_eq:
 221              	.LFB9:
  85:25519/fprime.c **** 
  86:25519/fprime.c **** static inline int min_int(int a, int b)
  87:25519/fprime.c **** {
  88:25519/fprime.c **** 	return a < b ? a : b;
  89:25519/fprime.c **** }
  90:25519/fprime.c **** 
  91:25519/fprime.c **** void fprime_from_bytes(uint8_t *n,
  92:25519/fprime.c **** 		       const uint8_t *x, size_t len,
  93:25519/fprime.c **** 		       const uint8_t *modulus)
  94:25519/fprime.c **** {
  95:25519/fprime.c **** 	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
  96:25519/fprime.c **** 	const int preload_bytes = preload_total >> 3;
  97:25519/fprime.c **** 	const int preload_bits = preload_total & 7;
  98:25519/fprime.c **** 	const int rbits = (len << 3) - preload_total;
  99:25519/fprime.c **** 	int i;
 100:25519/fprime.c **** 
 101:25519/fprime.c **** 	memset(n, 0, FPRIME_SIZE);
 102:25519/fprime.c **** 
 103:25519/fprime.c **** 	for (i = 0; i < preload_bytes; i++)
 104:25519/fprime.c **** 		n[i] = x[len - preload_bytes + i];
 105:25519/fprime.c **** 
 106:25519/fprime.c **** 	if (preload_bits) {
 107:25519/fprime.c **** 		shift_n_bits(n, preload_bits);
 108:25519/fprime.c **** 		n[0] |= x[len - preload_bytes - 1] >> (8 - preload_bits);
 109:25519/fprime.c **** 	}
 110:25519/fprime.c **** 
 111:25519/fprime.c **** 	for (i = rbits - 1; i >= 0; i--) {
 112:25519/fprime.c **** 		const uint8_t bit = (x[i >> 3] >> (i & 7)) & 1;
 113:25519/fprime.c **** 
 114:25519/fprime.c **** 		shift_n_bits(n, 1);
 115:25519/fprime.c **** 		n[0] |= bit;
 116:25519/fprime.c **** 		raw_try_sub(n, modulus);
 117:25519/fprime.c **** 	}
 118:25519/fprime.c **** }
 119:25519/fprime.c **** 
 120:25519/fprime.c **** void fprime_normalize(uint8_t *x, const uint8_t *modulus)
 121:25519/fprime.c **** {
 122:25519/fprime.c **** 	uint8_t n[FPRIME_SIZE];
 123:25519/fprime.c **** 
 124:25519/fprime.c **** 	fprime_from_bytes(n, x, FPRIME_SIZE, modulus);
 125:25519/fprime.c **** 	fprime_copy(x, n);
 126:25519/fprime.c **** }
 127:25519/fprime.c **** 
 128:25519/fprime.c **** uint8_t fprime_eq(const uint8_t *x, const uint8_t *y)
 129:25519/fprime.c **** {
 222              		.loc 1 129 0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 0
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226              	.LVL28:
 130:25519/fprime.c **** 	uint8_t sum = 0;
 227              		.loc 1 130 0
 228 0000 0023     		movs	r3, #0
 129:25519/fprime.c **** 	uint8_t sum = 0;
 229              		.loc 1 129 0
 230 0002 30B5     		push	{r4, r5, lr}
 231              		.cfi_def_cfa_offset 12
 232              		.cfi_offset 4, -12
 233              		.cfi_offset 5, -8
 234              		.cfi_offset 14, -4
 235 0004 421E     		subs	r2, r0, #1
 236 0006 0139     		subs	r1, r1, #1
 237              	.LVL29:
 238 0008 1F30     		adds	r0, r0, #31
 239              	.LVL30:
 240              	.L19:
 131:25519/fprime.c **** 	int i;
 132:25519/fprime.c **** 
 133:25519/fprime.c **** 	for (i = 0; i < FPRIME_SIZE; i++)
 134:25519/fprime.c **** 		sum |= x[i] ^ y[i];
 241              		.loc 1 134 0 discriminator 3
 242 000a 12F8014F 		ldrb	r4, [r2, #1]!	@ zero_extendqisi2
 243              	.LVL31:
 244 000e 11F8015F 		ldrb	r5, [r1, #1]!	@ zero_extendqisi2
 133:25519/fprime.c **** 		sum |= x[i] ^ y[i];
 245              		.loc 1 133 0 discriminator 3
 246 0012 9042     		cmp	r0, r2
 247              		.loc 1 134 0 discriminator 3
 248 0014 84EA0504 		eor	r4, r4, r5
 249 0018 43EA0403 		orr	r3, r3, r4
 250              	.LVL32:
 133:25519/fprime.c **** 		sum |= x[i] ^ y[i];
 251              		.loc 1 133 0 discriminator 3
 252 001c F5D1     		bne	.L19
 135:25519/fprime.c **** 
 136:25519/fprime.c **** 	sum |= (sum >> 4);
 253              		.loc 1 136 0
 254 001e 43EA1313 		orr	r3, r3, r3, lsr #4
 255              	.LVL33:
 256 0022 03F0FF03 		and	r3, r3, #255
 257              	.LVL34:
 137:25519/fprime.c **** 	sum |= (sum >> 2);
 258              		.loc 1 137 0
 259 0026 43EA9303 		orr	r3, r3, r3, lsr #2
 260              	.LVL35:
 138:25519/fprime.c **** 	sum |= (sum >> 1);
 261              		.loc 1 138 0
 262 002a 43EA5303 		orr	r3, r3, r3, lsr #1
 263              	.LVL36:
 139:25519/fprime.c **** 
 140:25519/fprime.c **** 	return (sum ^ 1) & 1;
 264              		.loc 1 140 0
 265 002e D843     		mvns	r0, r3
 266              	.LVL37:
 141:25519/fprime.c **** }
 267              		.loc 1 141 0
 268 0030 00F00100 		and	r0, r0, #1
 269 0034 30BD     		pop	{r4, r5, pc}
 270              		.cfi_endproc
 271              	.LFE9:
 273              		.section	.text.fprime_select,"ax",%progbits
 274              		.align	1
 275              		.global	fprime_select
 276              		.syntax unified
 277              		.thumb
 278              		.thumb_func
 279              		.fpu softvfp
 281              	fprime_select:
 282              	.LFB10:
 142:25519/fprime.c **** 
 143:25519/fprime.c **** void fprime_select(uint8_t *dst,
 144:25519/fprime.c **** 		   const uint8_t *zero, const uint8_t *one,
 145:25519/fprime.c **** 		   uint8_t condition)
 146:25519/fprime.c **** {
 283              		.loc 1 146 0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287              	.LVL38:
 147:25519/fprime.c **** 	const uint8_t mask = -condition;
 288              		.loc 1 147 0
 289 0000 5B42     		negs	r3, r3
 290              	.LVL39:
 146:25519/fprime.c **** 	const uint8_t mask = -condition;
 291              		.loc 1 146 0
 292 0002 70B5     		push	{r4, r5, r6, lr}
 293              		.cfi_def_cfa_offset 16
 294              		.cfi_offset 4, -16
 295              		.cfi_offset 5, -12
 296              		.cfi_offset 6, -8
 297              		.cfi_offset 14, -4
 298              		.loc 1 147 0
 299 0004 DBB2     		uxtb	r3, r3
 300              	.LVL40:
 301 0006 4E1E     		subs	r6, r1, #1
 302 0008 013A     		subs	r2, r2, #1
 303              	.LVL41:
 304 000a 0138     		subs	r0, r0, #1
 305              	.LVL42:
 306 000c 1F31     		adds	r1, r1, #31
 307              	.LVL43:
 308              	.L22:
 148:25519/fprime.c **** 	int i;
 149:25519/fprime.c **** 
 150:25519/fprime.c **** 	for (i = 0; i < FPRIME_SIZE; i++)
 151:25519/fprime.c **** 		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 309              		.loc 1 151 0 discriminator 3
 310 000e 16F8015F 		ldrb	r5, [r6, #1]!	@ zero_extendqisi2
 311              	.LVL44:
 312 0012 12F8014F 		ldrb	r4, [r2, #1]!	@ zero_extendqisi2
 150:25519/fprime.c **** 		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 313              		.loc 1 150 0 discriminator 3
 314 0016 8E42     		cmp	r6, r1
 315              		.loc 1 151 0 discriminator 3
 316 0018 84EA0504 		eor	r4, r4, r5
 317 001c 04EA0304 		and	r4, r4, r3
 318 0020 84EA0504 		eor	r4, r4, r5
 319 0024 00F8014F 		strb	r4, [r0, #1]!
 320              	.LVL45:
 150:25519/fprime.c **** 		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 321              		.loc 1 150 0 discriminator 3
 322 0028 F1D1     		bne	.L22
 152:25519/fprime.c **** }
 323              		.loc 1 152 0
 324 002a 70BD     		pop	{r4, r5, r6, pc}
 325              		.cfi_endproc
 326              	.LFE10:
 328              		.section	.text.raw_try_sub,"ax",%progbits
 329              		.align	1
 330              		.syntax unified
 331              		.thumb
 332              		.thumb_func
 333              		.fpu softvfp
 335              	raw_try_sub:
 336              	.LFB2:
  25:25519/fprime.c **** 	uint8_t minusp[FPRIME_SIZE];
 337              		.loc 1 25 0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 32
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 341              	.LVL46:
 342 0000 30B5     		push	{r4, r5, lr}
 343              		.cfi_def_cfa_offset 12
 344              		.cfi_offset 4, -12
 345              		.cfi_offset 5, -8
 346              		.cfi_offset 14, -4
  30:25519/fprime.c **** 		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
 347              		.loc 1 30 0
 348 0002 0025     		movs	r5, #0
  25:25519/fprime.c **** 	uint8_t minusp[FPRIME_SIZE];
 349              		.loc 1 25 0
 350 0004 0246     		mov	r2, r0
  27:25519/fprime.c **** 	int i;
 351              		.loc 1 27 0
 352 0006 2B46     		mov	r3, r5
  25:25519/fprime.c **** 	uint8_t minusp[FPRIME_SIZE];
 353              		.loc 1 25 0
 354 0008 89B0     		sub	sp, sp, #36
 355              		.cfi_def_cfa_offset 48
 356              	.LVL47:
 357              	.L25:
  31:25519/fprime.c **** 		minusp[i] = c;
 358              		.loc 1 31 0 discriminator 3
 359 000a 545D     		ldrb	r4, [r2, r5]	@ zero_extendqisi2
 360 000c 485D     		ldrb	r0, [r1, r5]	@ zero_extendqisi2
 361 000e 241A     		subs	r4, r4, r0
 362 0010 E31A     		subs	r3, r4, r3
 363              	.LVL48:
 364 0012 9BB2     		uxth	r3, r3
 365              	.LVL49:
  32:25519/fprime.c **** 		c = (c >> 8) & 1;
 366              		.loc 1 32 0 discriminator 3
 367 0014 0DF80530 		strb	r3, [sp, r5]
  30:25519/fprime.c **** 		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
 368              		.loc 1 30 0 discriminator 3
 369 0018 0135     		adds	r5, r5, #1
 370              	.LVL50:
 371 001a 202D     		cmp	r5, #32
  33:25519/fprime.c **** 	}
 372              		.loc 1 33 0 discriminator 3
 373 001c C3F30023 		ubfx	r3, r3, #8, #1
 374              	.LVL51:
  30:25519/fprime.c **** 		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
 375              		.loc 1 30 0 discriminator 3
 376 0020 F3D1     		bne	.L25
  36:25519/fprime.c **** }
 377              		.loc 1 36 0
 378 0022 6946     		mov	r1, sp
 379              	.LVL52:
 380 0024 1046     		mov	r0, r2
 381 0026 FFF7FEFF 		bl	fprime_select
 382              	.LVL53:
  37:25519/fprime.c **** 
 383              		.loc 1 37 0
 384 002a 09B0     		add	sp, sp, #36
 385              		.cfi_def_cfa_offset 12
 386              		@ sp needed
 387 002c 30BD     		pop	{r4, r5, pc}
 388              		.cfi_endproc
 389              	.LFE2:
 391              		.section	.text.fprime_from_bytes,"ax",%progbits
 392              		.align	1
 393              		.global	fprime_from_bytes
 394              		.syntax unified
 395              		.thumb
 396              		.thumb_func
 397              		.fpu softvfp
 399              	fprime_from_bytes:
 400              	.LFB7:
  94:25519/fprime.c **** 	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
 401              		.loc 1 94 0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 0
 404              		@ frame_needed = 0, uses_anonymous_args = 0
 405              	.LVL54:
 406 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 407              		.cfi_def_cfa_offset 32
 408              		.cfi_offset 4, -32
 409              		.cfi_offset 5, -28
 410              		.cfi_offset 6, -24
 411              		.cfi_offset 7, -20
 412              		.cfi_offset 8, -16
 413              		.cfi_offset 9, -12
 414              		.cfi_offset 10, -8
 415              		.cfi_offset 14, -4
  94:25519/fprime.c **** 	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
 416              		.loc 1 94 0
 417 0004 0446     		mov	r4, r0
  95:25519/fprime.c **** 	const int preload_bytes = preload_total >> 3;
 418              		.loc 1 95 0
 419 0006 1846     		mov	r0, r3
 420              	.LVL55:
  94:25519/fprime.c **** 	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
 421              		.loc 1 94 0
 422 0008 1546     		mov	r5, r2
 423 000a 0E46     		mov	r6, r1
 424 000c 1F46     		mov	r7, r3
  95:25519/fprime.c **** 	const int preload_bytes = preload_total >> 3;
 425              		.loc 1 95 0
 426 000e FFF7FEFF 		bl	prime_msb
 427              	.LVL56:
 428 0012 EB00     		lsls	r3, r5, #3
 429              	.LVL57:
 430 0014 0138     		subs	r0, r0, #1
 431              	.LVL58:
 432              	.LBB5:
 433              	.LBB6:
  88:25519/fprime.c **** }
 434              		.loc 1 88 0
 435 0016 9842     		cmp	r0, r3
 436 0018 A8BF     		it	ge
 437 001a 1846     		movge	r0, r3
 438              	.LVL59:
 439              	.LBE6:
 440              	.LBE5:
 101:25519/fprime.c **** 
 441              		.loc 1 101 0
 442 001c 2022     		movs	r2, #32
  98:25519/fprime.c **** 	int i;
 443              		.loc 1 98 0
 444 001e A3EB0008 		sub	r8, r3, r0
  96:25519/fprime.c **** 	const int preload_bits = preload_total & 7;
 445              		.loc 1 96 0
 446 0022 4FEAE00A 		asr	r10, r0, #3
 447              	.LVL60:
  97:25519/fprime.c **** 	const int rbits = (len << 3) - preload_total;
 448              		.loc 1 97 0
 449 0026 00F00709 		and	r9, r0, #7
 450              	.LVL61:
 101:25519/fprime.c **** 
 451              		.loc 1 101 0
 452 002a 0021     		movs	r1, #0
 453              	.LVL62:
 454 002c 2046     		mov	r0, r4
 455 002e FFF7FEFF 		bl	memset
 456              	.LVL63:
 103:25519/fprime.c **** 		n[i] = x[len - preload_bytes + i];
 457              		.loc 1 103 0
 458 0032 0023     		movs	r3, #0
 104:25519/fprime.c **** 
 459              		.loc 1 104 0
 460 0034 A5EB0A02 		sub	r2, r5, r10
 461 0038 3244     		add	r2, r2, r6
 462              	.LVL64:
 463              	.L28:
 103:25519/fprime.c **** 		n[i] = x[len - preload_bytes + i];
 464              		.loc 1 103 0 discriminator 1
 465 003a 5345     		cmp	r3, r10
 466 003c 18DB     		blt	.L29
 106:25519/fprime.c **** 		shift_n_bits(n, preload_bits);
 467              		.loc 1 106 0
 468 003e B9F1000F 		cmp	r9, #0
 469 0042 0ED0     		beq	.L36
 108:25519/fprime.c **** 	}
 470              		.loc 1 108 0
 471 0044 013D     		subs	r5, r5, #1
 472              	.LVL65:
 107:25519/fprime.c **** 		n[0] |= x[len - preload_bytes - 1] >> (8 - preload_bits);
 473              		.loc 1 107 0
 474 0046 4946     		mov	r1, r9
 475 0048 2046     		mov	r0, r4
 108:25519/fprime.c **** 	}
 476              		.loc 1 108 0
 477 004a A5EB0A05 		sub	r5, r5, r10
 478              	.LVL66:
 107:25519/fprime.c **** 		n[0] |= x[len - preload_bytes - 1] >> (8 - preload_bits);
 479              		.loc 1 107 0
 480 004e FFF7FEFF 		bl	shift_n_bits
 481              	.LVL67:
 108:25519/fprime.c **** 	}
 482              		.loc 1 108 0
 483 0052 735D     		ldrb	r3, [r6, r5]	@ zero_extendqisi2
 484 0054 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 485 0056 C9F10809 		rsb	r9, r9, #8
 486              	.LVL68:
 487 005a 43FA09F3 		asr	r3, r3, r9
 488 005e 1343     		orrs	r3, r3, r2
 489 0060 2370     		strb	r3, [r4]
 490              	.LVL69:
 491              	.L36:
 111:25519/fprime.c **** 		const uint8_t bit = (x[i >> 3] >> (i & 7)) & 1;
 492              		.loc 1 111 0 discriminator 3
 493 0062 08F1FF38 		add	r8, r8, #-1
 494              	.LVL70:
 495 0066 B8F1000F 		cmp	r8, #0
 496 006a 05DA     		bge	.L32
 118:25519/fprime.c **** 
 497              		.loc 1 118 0
 498 006c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 499              	.LVL71:
 500              	.L29:
 104:25519/fprime.c **** 
 501              		.loc 1 104 0 discriminator 3
 502 0070 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 503 0072 E154     		strb	r1, [r4, r3]
 103:25519/fprime.c **** 		n[i] = x[len - preload_bytes + i];
 504              		.loc 1 103 0 discriminator 3
 505 0074 0133     		adds	r3, r3, #1
 506              	.LVL72:
 507 0076 E0E7     		b	.L28
 508              	.LVL73:
 509              	.L32:
 510              	.LBB7:
 112:25519/fprime.c **** 
 511              		.loc 1 112 0 discriminator 3
 512 0078 4FEAE803 		asr	r3, r8, #3
 513 007c F55C     		ldrb	r5, [r6, r3]	@ zero_extendqisi2
 114:25519/fprime.c **** 		n[0] |= bit;
 514              		.loc 1 114 0 discriminator 3
 515 007e 2046     		mov	r0, r4
 112:25519/fprime.c **** 
 516              		.loc 1 112 0 discriminator 3
 517 0080 08F00703 		and	r3, r8, #7
 114:25519/fprime.c **** 		n[0] |= bit;
 518              		.loc 1 114 0 discriminator 3
 519 0084 0121     		movs	r1, #1
 112:25519/fprime.c **** 
 520              		.loc 1 112 0 discriminator 3
 521 0086 1D41     		asrs	r5, r5, r3
 114:25519/fprime.c **** 		n[0] |= bit;
 522              		.loc 1 114 0 discriminator 3
 523 0088 FFF7FEFF 		bl	shift_n_bits
 524              	.LVL74:
 115:25519/fprime.c **** 		raw_try_sub(n, modulus);
 525              		.loc 1 115 0 discriminator 3
 526 008c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 112:25519/fprime.c **** 
 527              		.loc 1 112 0 discriminator 3
 528 008e 05F00105 		and	r5, r5, #1
 529              	.LVL75:
 115:25519/fprime.c **** 		raw_try_sub(n, modulus);
 530              		.loc 1 115 0 discriminator 3
 531 0092 1D43     		orrs	r5, r5, r3
 532              	.LVL76:
 533 0094 2570     		strb	r5, [r4]
 116:25519/fprime.c **** 	}
 534              		.loc 1 116 0 discriminator 3
 535 0096 3946     		mov	r1, r7
 536 0098 2046     		mov	r0, r4
 537 009a FFF7FEFF 		bl	raw_try_sub
 538              	.LVL77:
 539 009e E0E7     		b	.L36
 540              	.LBE7:
 541              		.cfi_endproc
 542              	.LFE7:
 544              		.section	.text.fprime_normalize,"ax",%progbits
 545              		.align	1
 546              		.global	fprime_normalize
 547              		.syntax unified
 548              		.thumb
 549              		.thumb_func
 550              		.fpu softvfp
 552              	fprime_normalize:
 553              	.LFB8:
 121:25519/fprime.c **** 	uint8_t n[FPRIME_SIZE];
 554              		.loc 1 121 0
 555              		.cfi_startproc
 556              		@ args = 0, pretend = 0, frame = 32
 557              		@ frame_needed = 0, uses_anonymous_args = 0
 558              	.LVL78:
 559 0000 30B5     		push	{r4, r5, lr}
 560              		.cfi_def_cfa_offset 12
 561              		.cfi_offset 4, -12
 562              		.cfi_offset 5, -8
 563              		.cfi_offset 14, -4
 564 0002 0446     		mov	r4, r0
 565 0004 89B0     		sub	sp, sp, #36
 566              		.cfi_def_cfa_offset 48
 124:25519/fprime.c **** 	fprime_copy(x, n);
 567              		.loc 1 124 0
 568 0006 0B46     		mov	r3, r1
 569 0008 2022     		movs	r2, #32
 570 000a 0146     		mov	r1, r0
 571              	.LVL79:
 572 000c 6846     		mov	r0, sp
 573              	.LVL80:
 574 000e FFF7FEFF 		bl	fprime_from_bytes
 575              	.LVL81:
 576              	.LBB10:
 577              	.LBB11:
 578              		.file 2 "25519/fprime.h"
   1:25519/fprime.h **** /* Arithmetic in prime fields
   2:25519/fprime.h ****  * Daniel Beer <dlbeer@gmail.com>, 10 Jan 2014
   3:25519/fprime.h ****  *
   4:25519/fprime.h ****  * This file is in the public domain.
   5:25519/fprime.h ****  */
   6:25519/fprime.h **** 
   7:25519/fprime.h **** #ifndef FPRIME_H_
   8:25519/fprime.h **** #define FPRIME_H_
   9:25519/fprime.h **** 
  10:25519/fprime.h **** #include <stdint.h>
  11:25519/fprime.h **** #include <string.h>
  12:25519/fprime.h **** 
  13:25519/fprime.h **** /* Maximum size of a field element (or a prime). Field elements are
  14:25519/fprime.h ****  * always manipulated and stored in normalized form, with 0 <= x < p.
  15:25519/fprime.h ****  * You can use normalize() to convert a denormalized bitstring to normal
  16:25519/fprime.h ****  * form.
  17:25519/fprime.h ****  *
  18:25519/fprime.h ****  * Operations are constant with respect to the value of field elements,
  19:25519/fprime.h ****  * but not with respect to the modulus.
  20:25519/fprime.h ****  *
  21:25519/fprime.h ****  * The modulus is a number p, such that 2p-1 fits in FPRIME_SIZE bytes.
  22:25519/fprime.h ****  */
  23:25519/fprime.h **** #define FPRIME_SIZE		32
  24:25519/fprime.h **** 
  25:25519/fprime.h **** /* Useful constants */
  26:25519/fprime.h **** extern const uint8_t fprime_zero[FPRIME_SIZE];
  27:25519/fprime.h **** extern const uint8_t fprime_one[FPRIME_SIZE];
  28:25519/fprime.h **** 
  29:25519/fprime.h **** /* Load a small constant */
  30:25519/fprime.h **** void fprime_load(uint8_t *x, uint32_t c);
  31:25519/fprime.h **** 
  32:25519/fprime.h **** /* Load a large constant */
  33:25519/fprime.h **** void fprime_from_bytes(uint8_t *x,
  34:25519/fprime.h **** 		       const uint8_t *in, size_t len,
  35:25519/fprime.h **** 		       const uint8_t *modulus);
  36:25519/fprime.h **** 
  37:25519/fprime.h **** /* Copy an element */
  38:25519/fprime.h **** static inline void fprime_copy(uint8_t *x, const uint8_t *a)
  39:25519/fprime.h **** {
  40:25519/fprime.h **** 	memcpy(x, a, FPRIME_SIZE);
 579              		.loc 2 40 0
 580 0012 6A46     		mov	r2, sp
 581 0014 2346     		mov	r3, r4
 582 0016 08AD     		add	r5, sp, #32
 583              	.LVL82:
 584              	.L38:
 585 0018 1446     		mov	r4, r2
 586 001a 03CC     		ldmia	r4!, {r0, r1}
 587 001c AC42     		cmp	r4, r5
 588 001e 1860     		str	r0, [r3]	@ unaligned
 589 0020 5960     		str	r1, [r3, #4]	@ unaligned
 590 0022 2246     		mov	r2, r4
 591 0024 03F10803 		add	r3, r3, #8
 592 0028 F6D1     		bne	.L38
 593              	.LBE11:
 594              	.LBE10:
 126:25519/fprime.c **** 
 595              		.loc 1 126 0
 596 002a 09B0     		add	sp, sp, #36
 597              		.cfi_def_cfa_offset 12
 598              	.LVL83:
 599              		@ sp needed
 600 002c 30BD     		pop	{r4, r5, pc}
 601              		.cfi_endproc
 602              	.LFE8:
 604              		.section	.text.fprime_add,"ax",%progbits
 605              		.align	1
 606              		.global	fprime_add
 607              		.syntax unified
 608              		.thumb
 609              		.thumb_func
 610              		.fpu softvfp
 612              	fprime_add:
 613              	.LFB11:
 153:25519/fprime.c **** 
 154:25519/fprime.c **** void fprime_add(uint8_t *r, const uint8_t *a, const uint8_t *modulus)
 155:25519/fprime.c **** {
 614              		.loc 1 155 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 0
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 618              	.LVL84:
 619 0000 38B5     		push	{r3, r4, r5, lr}
 620              		.cfi_def_cfa_offset 16
 621              		.cfi_offset 3, -16
 622              		.cfi_offset 4, -12
 623              		.cfi_offset 5, -8
 624              		.cfi_offset 14, -4
 625              		.loc 1 155 0
 626 0002 0446     		mov	r4, r0
 627 0004 1546     		mov	r5, r2
 156:25519/fprime.c **** 	raw_add(r, a);
 628              		.loc 1 156 0
 629 0006 FFF7FEFF 		bl	raw_add
 630              	.LVL85:
 157:25519/fprime.c **** 	raw_try_sub(r, modulus);
 631              		.loc 1 157 0
 632 000a 2946     		mov	r1, r5
 633 000c 2046     		mov	r0, r4
 158:25519/fprime.c **** }
 634              		.loc 1 158 0
 635 000e BDE83840 		pop	{r3, r4, r5, lr}
 636              		.cfi_restore 14
 637              		.cfi_restore 5
 638              		.cfi_restore 4
 639              		.cfi_restore 3
 640              		.cfi_def_cfa_offset 0
 641              	.LVL86:
 157:25519/fprime.c **** 	raw_try_sub(r, modulus);
 642              		.loc 1 157 0
 643 0012 FFF7FEBF 		b	raw_try_sub
 644              	.LVL87:
 645              		.cfi_endproc
 646              	.LFE11:
 648              		.section	.text.fprime_sub,"ax",%progbits
 649              		.align	1
 650              		.global	fprime_sub
 651              		.syntax unified
 652              		.thumb
 653              		.thumb_func
 654              		.fpu softvfp
 656              	fprime_sub:
 657              	.LFB12:
 159:25519/fprime.c **** 
 160:25519/fprime.c **** void fprime_sub(uint8_t *r, const uint8_t *a, const uint8_t *modulus)
 161:25519/fprime.c **** {
 658              		.loc 1 161 0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 0
 661              		@ frame_needed = 0, uses_anonymous_args = 0
 662              	.LVL88:
 663 0000 70B5     		push	{r4, r5, r6, lr}
 664              		.cfi_def_cfa_offset 16
 665              		.cfi_offset 4, -16
 666              		.cfi_offset 5, -12
 667              		.cfi_offset 6, -8
 668              		.cfi_offset 14, -4
 669              		.loc 1 161 0
 670 0002 0446     		mov	r4, r0
 671 0004 0E46     		mov	r6, r1
 672 0006 1546     		mov	r5, r2
 162:25519/fprime.c **** 	raw_add(r, modulus);
 673              		.loc 1 162 0
 674 0008 1146     		mov	r1, r2
 675              	.LVL89:
 676 000a FFF7FEFF 		bl	raw_add
 677              	.LVL90:
 163:25519/fprime.c **** 	raw_try_sub(r, a);
 678              		.loc 1 163 0
 679 000e 3146     		mov	r1, r6
 680 0010 2046     		mov	r0, r4
 681 0012 FFF7FEFF 		bl	raw_try_sub
 682              	.LVL91:
 164:25519/fprime.c **** 	raw_try_sub(r, modulus);
 683              		.loc 1 164 0
 684 0016 2946     		mov	r1, r5
 685 0018 2046     		mov	r0, r4
 165:25519/fprime.c **** }
 686              		.loc 1 165 0
 687 001a BDE87040 		pop	{r4, r5, r6, lr}
 688              		.cfi_restore 14
 689              		.cfi_restore 6
 690              		.cfi_restore 5
 691              		.cfi_restore 4
 692              		.cfi_def_cfa_offset 0
 693              	.LVL92:
 164:25519/fprime.c **** 	raw_try_sub(r, modulus);
 694              		.loc 1 164 0
 695 001e FFF7FEBF 		b	raw_try_sub
 696              	.LVL93:
 697              		.cfi_endproc
 698              	.LFE12:
 700              		.section	.text.fprime_mul,"ax",%progbits
 701              		.align	1
 702              		.global	fprime_mul
 703              		.syntax unified
 704              		.thumb
 705              		.thumb_func
 706              		.fpu softvfp
 708              	fprime_mul:
 709              	.LFB13:
 166:25519/fprime.c **** 
 167:25519/fprime.c **** void fprime_mul(uint8_t *r, const uint8_t *a, const uint8_t *b,
 168:25519/fprime.c **** 		const uint8_t *modulus)
 169:25519/fprime.c **** {
 710              		.loc 1 169 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 32
 713              		@ frame_needed = 0, uses_anonymous_args = 0
 714              	.LVL94:
 715 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 716              		.cfi_def_cfa_offset 36
 717              		.cfi_offset 4, -36
 718              		.cfi_offset 5, -32
 719              		.cfi_offset 6, -28
 720              		.cfi_offset 7, -24
 721              		.cfi_offset 8, -20
 722              		.cfi_offset 9, -16
 723              		.cfi_offset 10, -12
 724              		.cfi_offset 11, -8
 725              		.cfi_offset 14, -4
 726 0004 1F46     		mov	r7, r3
 727 0006 89B0     		sub	sp, sp, #36
 728              		.cfi_def_cfa_offset 72
 729              		.loc 1 169 0
 730 0008 8946     		mov	r9, r1
 731 000a 9246     		mov	r10, r2
 170:25519/fprime.c **** 	int i;
 171:25519/fprime.c **** 
 172:25519/fprime.c **** 	memset(r, 0, FPRIME_SIZE);
 732              		.loc 1 172 0
 733 000c 0021     		movs	r1, #0
 734              	.LVL95:
 735 000e 2022     		movs	r2, #32
 736              	.LVL96:
 169:25519/fprime.c **** 	int i;
 737              		.loc 1 169 0
 738 0010 0446     		mov	r4, r0
 739              		.loc 1 172 0
 740 0012 FFF7FEFF 		bl	memset
 741              	.LVL97:
 173:25519/fprime.c **** 
 174:25519/fprime.c **** 	for (i = prime_msb(modulus); i >= 0; i--) {
 742              		.loc 1 174 0
 743 0016 3846     		mov	r0, r7
 744 0018 FFF7FEFF 		bl	prime_msb
 745              	.LVL98:
 746 001c 0546     		mov	r5, r0
 747              	.LVL99:
 748              	.LBB15:
 749              	.LBB16:
 750              	.LBB17:
 751              		.loc 2 40 0
 752 001e 04F1200B 		add	fp, r4, #32
 753              	.LVL100:
 754              	.L43:
 755              	.LBE17:
 756              	.LBE16:
 757              	.LBE15:
 758              		.loc 1 174 0 discriminator 1
 759 0022 002D     		cmp	r5, #0
 760 0024 02DA     		bge	.L45
 175:25519/fprime.c **** 		const uint8_t bit = (b[i >> 3] >> (i & 7)) & 1;
 176:25519/fprime.c **** 		uint8_t plusa[FPRIME_SIZE];
 177:25519/fprime.c **** 
 178:25519/fprime.c **** 		shift_n_bits(r, 1);
 179:25519/fprime.c **** 		raw_try_sub(r, modulus);
 180:25519/fprime.c **** 
 181:25519/fprime.c **** 		fprime_copy(plusa, r);
 182:25519/fprime.c **** 		fprime_add(plusa, a, modulus);
 183:25519/fprime.c **** 
 184:25519/fprime.c **** 		fprime_select(r, r, plusa, bit);
 185:25519/fprime.c **** 	}
 186:25519/fprime.c **** }
 761              		.loc 1 186 0
 762 0026 09B0     		add	sp, sp, #36
 763              		.cfi_remember_state
 764              		.cfi_def_cfa_offset 36
 765              		@ sp needed
 766 0028 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 767              	.LVL101:
 768              	.L45:
 769              		.cfi_restore_state
 770              	.LBB22:
 175:25519/fprime.c **** 		const uint8_t bit = (b[i >> 3] >> (i & 7)) & 1;
 771              		.loc 1 175 0 discriminator 3
 772 002c EB10     		asrs	r3, r5, #3
 773 002e 1AF80360 		ldrb	r6, [r10, r3]	@ zero_extendqisi2
 178:25519/fprime.c **** 		raw_try_sub(r, modulus);
 774              		.loc 1 178 0 discriminator 3
 775 0032 0121     		movs	r1, #1
 175:25519/fprime.c **** 		const uint8_t bit = (b[i >> 3] >> (i & 7)) & 1;
 776              		.loc 1 175 0 discriminator 3
 777 0034 05F00703 		and	r3, r5, #7
 178:25519/fprime.c **** 		raw_try_sub(r, modulus);
 778              		.loc 1 178 0 discriminator 3
 779 0038 2046     		mov	r0, r4
 175:25519/fprime.c **** 		const uint8_t bit = (b[i >> 3] >> (i & 7)) & 1;
 780              		.loc 1 175 0 discriminator 3
 781 003a 1E41     		asrs	r6, r6, r3
 178:25519/fprime.c **** 		raw_try_sub(r, modulus);
 782              		.loc 1 178 0 discriminator 3
 783 003c FFF7FEFF 		bl	shift_n_bits
 784              	.LVL102:
 179:25519/fprime.c **** 
 785              		.loc 1 179 0 discriminator 3
 786 0040 3946     		mov	r1, r7
 787 0042 2046     		mov	r0, r4
 788 0044 FFF7FEFF 		bl	raw_try_sub
 789              	.LVL103:
 790              	.LBB20:
 791              	.LBB18:
 792              		.loc 2 40 0 discriminator 3
 793 0048 6A46     		mov	r2, sp
 794 004a 2346     		mov	r3, r4
 795 004c 9046     		mov	r8, r2
 796              	.LBE18:
 797              	.LBE20:
 175:25519/fprime.c **** 		const uint8_t bit = (b[i >> 3] >> (i & 7)) & 1;
 798              		.loc 1 175 0 discriminator 3
 799 004e 06F00106 		and	r6, r6, #1
 800              	.LVL104:
 801              	.L44:
 802              	.LBB21:
 803              	.LBB19:
 804              		.loc 2 40 0 discriminator 3
 805 0052 9446     		mov	ip, r2
 806 0054 1868     		ldr	r0, [r3]	@ unaligned
 807 0056 5968     		ldr	r1, [r3, #4]	@ unaligned
 808 0058 0833     		adds	r3, r3, #8
 809 005a ACE80300 		stmia	ip!, {r0, r1}
 810 005e 5B45     		cmp	r3, fp
 811 0060 6246     		mov	r2, ip
 812 0062 F6D1     		bne	.L44
 813              	.LVL105:
 814              	.LBE19:
 815              	.LBE21:
 182:25519/fprime.c **** 
 816              		.loc 1 182 0 discriminator 3
 817 0064 3A46     		mov	r2, r7
 818 0066 4946     		mov	r1, r9
 819 0068 4046     		mov	r0, r8
 820 006a FFF7FEFF 		bl	fprime_add
 821              	.LVL106:
 184:25519/fprime.c **** 	}
 822              		.loc 1 184 0 discriminator 3
 823 006e 3346     		mov	r3, r6
 824 0070 4246     		mov	r2, r8
 825 0072 2146     		mov	r1, r4
 826 0074 2046     		mov	r0, r4
 827 0076 FFF7FEFF 		bl	fprime_select
 828              	.LVL107:
 829              	.LBE22:
 174:25519/fprime.c **** 		const uint8_t bit = (b[i >> 3] >> (i & 7)) & 1;
 830              		.loc 1 174 0 discriminator 3
 831 007a 013D     		subs	r5, r5, #1
 832              	.LVL108:
 833 007c D1E7     		b	.L43
 834              		.cfi_endproc
 835              	.LFE13:
 837              		.section	.text.fprime_inv,"ax",%progbits
 838              		.align	1
 839              		.global	fprime_inv
 840              		.syntax unified
 841              		.thumb
 842              		.thumb_func
 843              		.fpu softvfp
 845              	fprime_inv:
 846              	.LFB14:
 187:25519/fprime.c **** 
 188:25519/fprime.c **** void fprime_inv(uint8_t *r, const uint8_t *a, const uint8_t *modulus)
 189:25519/fprime.c **** {
 847              		.loc 1 189 0
 848              		.cfi_startproc
 849              		@ args = 0, pretend = 0, frame = 64
 850              		@ frame_needed = 0, uses_anonymous_args = 0
 851              	.LVL109:
 852 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 853              		.cfi_def_cfa_offset 24
 854              		.cfi_offset 4, -24
 855              		.cfi_offset 5, -20
 856              		.cfi_offset 6, -16
 857              		.cfi_offset 7, -12
 858              		.cfi_offset 8, -8
 859              		.cfi_offset 14, -4
 860 0004 90B0     		sub	sp, sp, #64
 861              		.cfi_def_cfa_offset 88
 862              	.LVL110:
 863              		.loc 1 189 0
 864 0006 1446     		mov	r4, r2
 865              	.LBB28:
 866              	.LBB29:
 867              		.loc 2 40 0
 868 0008 1346     		mov	r3, r2
 869 000a 6A46     		mov	r2, sp
 870              	.LVL111:
 871              	.LBE29:
 872              	.LBE28:
 873              		.loc 1 189 0
 874 000c 0646     		mov	r6, r0
 875 000e 0F46     		mov	r7, r1
 876 0010 9446     		mov	ip, r2
 877              	.LBB31:
 878              	.LBB30:
 879              		.loc 2 40 0
 880 0012 04F1200E 		add	lr, r4, #32
 881              	.LVL112:
 882              	.L48:
 883 0016 1546     		mov	r5, r2
 884 0018 1868     		ldr	r0, [r3]	@ unaligned
 885 001a 5968     		ldr	r1, [r3, #4]	@ unaligned
 886 001c 0833     		adds	r3, r3, #8
 887 001e 03C5     		stmia	r5!, {r0, r1}
 888 0020 7345     		cmp	r3, lr
 889 0022 2A46     		mov	r2, r5
 890 0024 F7D1     		bne	.L48
 891              	.LVL113:
 892              	.LBE30:
 893              	.LBE31:
 190:25519/fprime.c **** 	uint8_t pm2[FPRIME_SIZE];
 191:25519/fprime.c **** 	uint16_t c = 2;
 192:25519/fprime.c **** 	int i;
 193:25519/fprime.c **** 
 194:25519/fprime.c **** 	/* Compute (p-2) */
 195:25519/fprime.c **** 	fprime_copy(pm2, modulus);
 196:25519/fprime.c **** 	for (i = 0; i < FPRIME_SIZE; i++) {
 894              		.loc 1 196 0
 895 0026 0022     		movs	r2, #0
 191:25519/fprime.c **** 	int i;
 896              		.loc 1 191 0
 897 0028 0221     		movs	r1, #2
 898              	.LVL114:
 899              	.L49:
 197:25519/fprime.c **** 		c = modulus[i] - c;
 900              		.loc 1 197 0 discriminator 3
 901 002a A35C     		ldrb	r3, [r4, r2]	@ zero_extendqisi2
 902 002c 5B1A     		subs	r3, r3, r1
 903 002e 9BB2     		uxth	r3, r3
 904              	.LVL115:
 198:25519/fprime.c **** 		pm2[i] = c;
 905              		.loc 1 198 0 discriminator 3
 906 0030 0CF80230 		strb	r3, [ip, r2]
 196:25519/fprime.c **** 		c = modulus[i] - c;
 907              		.loc 1 196 0 discriminator 3
 908 0034 0132     		adds	r2, r2, #1
 909              	.LVL116:
 910 0036 202A     		cmp	r2, #32
 199:25519/fprime.c **** 		c >>= 8;
 911              		.loc 1 199 0 discriminator 3
 912 0038 4FEA1321 		lsr	r1, r3, #8
 913              	.LVL117:
 196:25519/fprime.c **** 		c = modulus[i] - c;
 914              		.loc 1 196 0 discriminator 3
 915 003c F5D1     		bne	.L49
 200:25519/fprime.c **** 	}
 201:25519/fprime.c **** 
 202:25519/fprime.c **** 	/* Binary exponentiation */
 203:25519/fprime.c **** 	fprime_load(r, 1);
 916              		.loc 1 203 0
 917 003e 0121     		movs	r1, #1
 918              	.LVL118:
 919 0040 3046     		mov	r0, r6
 920 0042 FFF7FEFF 		bl	fprime_load
 921              	.LVL119:
 204:25519/fprime.c **** 
 205:25519/fprime.c **** 	for (i = prime_msb(modulus); i >= 0; i--) {
 922              		.loc 1 205 0
 923 0046 2046     		mov	r0, r4
 924 0048 FFF7FEFF 		bl	prime_msb
 925              	.LVL120:
 926 004c 0546     		mov	r5, r0
 927              	.LVL121:
 928              	.LBB32:
 929              	.LBB33:
 930              	.LBB34:
 931              		.loc 2 40 0
 932 004e 0DF14008 		add	r8, sp, #64
 933              	.LVL122:
 934              	.L50:
 935              	.LBE34:
 936              	.LBE33:
 937              	.LBE32:
 938              		.loc 1 205 0 discriminator 1
 939 0052 002D     		cmp	r5, #0
 940 0054 02DA     		bge	.L54
 206:25519/fprime.c **** 		uint8_t r2[FPRIME_SIZE];
 207:25519/fprime.c **** 
 208:25519/fprime.c **** 		fprime_mul(r2, r, r, modulus);
 209:25519/fprime.c **** 
 210:25519/fprime.c **** 		if ((pm2[i >> 3] >> (i & 7)) & 1)
 211:25519/fprime.c **** 			fprime_mul(r, r2, a, modulus);
 212:25519/fprime.c **** 		else
 213:25519/fprime.c **** 			fprime_copy(r, r2);
 214:25519/fprime.c **** 	}
 215:25519/fprime.c **** }
 941              		.loc 1 215 0
 942 0056 10B0     		add	sp, sp, #64
 943              		.cfi_remember_state
 944              		.cfi_def_cfa_offset 24
 945              	.LVL123:
 946              		@ sp needed
 947 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 948              	.LVL124:
 949              	.L54:
 950              		.cfi_restore_state
 951              	.LBB37:
 208:25519/fprime.c **** 
 952              		.loc 1 208 0
 953 005c 2346     		mov	r3, r4
 954 005e 3246     		mov	r2, r6
 955 0060 3146     		mov	r1, r6
 956 0062 08A8     		add	r0, sp, #32
 957 0064 FFF7FEFF 		bl	fprime_mul
 958              	.LVL125:
 210:25519/fprime.c **** 			fprime_mul(r, r2, a, modulus);
 959              		.loc 1 210 0
 960 0068 10AB     		add	r3, sp, #64
 961 006a 03EBE503 		add	r3, r3, r5, asr #3
 962 006e 13F8403C 		ldrb	r3, [r3, #-64]	@ zero_extendqisi2
 963 0072 05F00702 		and	r2, r5, #7
 964 0076 1341     		asrs	r3, r3, r2
 965 0078 DB07     		lsls	r3, r3, #31
 966 007a 07D5     		bpl	.L51
 211:25519/fprime.c **** 		else
 967              		.loc 1 211 0
 968 007c 2346     		mov	r3, r4
 969 007e 3A46     		mov	r2, r7
 970 0080 08A9     		add	r1, sp, #32
 971 0082 3046     		mov	r0, r6
 972 0084 FFF7FEFF 		bl	fprime_mul
 973              	.LVL126:
 974              	.L52:
 975              	.LBE37:
 205:25519/fprime.c **** 		uint8_t r2[FPRIME_SIZE];
 976              		.loc 1 205 0 discriminator 2
 977 0088 013D     		subs	r5, r5, #1
 978              	.LVL127:
 979 008a E2E7     		b	.L50
 980              	.L51:
 981              	.LVL128:
 982              	.LBB38:
 983              	.LBB36:
 984              	.LBB35:
 985              		.loc 2 40 0
 986 008c 3246     		mov	r2, r6
 987 008e 0DF1200C 		add	ip, sp, #32
 988              	.LVL129:
 989              	.L53:
 990 0092 6346     		mov	r3, ip
 991 0094 03CB     		ldmia	r3!, {r0, r1}
 992 0096 4345     		cmp	r3, r8
 993 0098 1060     		str	r0, [r2]	@ unaligned
 994 009a 5160     		str	r1, [r2, #4]	@ unaligned
 995 009c 9C46     		mov	ip, r3
 996 009e 02F10802 		add	r2, r2, #8
 997 00a2 F6D1     		bne	.L53
 998 00a4 F0E7     		b	.L52
 999              	.LBE35:
 1000              	.LBE36:
 1001              	.LBE38:
 1002              		.cfi_endproc
 1003              	.LFE14:
 1005              		.global	fprime_one
 1006              		.global	fprime_zero
 1007              		.section	.rodata.fprime_one,"a",%progbits
 1010              	fprime_one:
 1011 0000 01       		.byte	1
 1012 0001 00000000 		.space	31
 1012      00000000 
 1012      00000000 
 1012      00000000 
 1012      00000000 
 1013              		.section	.rodata.fprime_zero,"a",%progbits
 1016              	fprime_zero:
 1017 0000 00000000 		.space	32
 1017      00000000 
 1017      00000000 
 1017      00000000 
 1017      00000000 
 1018              		.text
 1019              	.Letext0:
 1020              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/machine/_d
 1021              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/_stdin
 1022              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/lib/gcc/arm-none-eabi/7.3.1/incl
 1023              		.file 6 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/lock.h
 1024              		.file 7 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/_types
 1025              		.file 8 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/reent.
 1026              		.file 9 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fprime.c
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:16     .text.raw_add:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:22     .text.raw_add:0000000000000000 raw_add
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:67     .text.prime_msb:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:73     .text.prime_msb:0000000000000000 prime_msb
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:120    .text.shift_n_bits:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:126    .text.shift_n_bits:0000000000000000 shift_n_bits
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:165    .text.fprime_load:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:172    .text.fprime_load:0000000000000000 fprime_load
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:213    .text.fprime_eq:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:220    .text.fprime_eq:0000000000000000 fprime_eq
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:274    .text.fprime_select:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:281    .text.fprime_select:0000000000000000 fprime_select
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:329    .text.raw_try_sub:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:335    .text.raw_try_sub:0000000000000000 raw_try_sub
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:392    .text.fprime_from_bytes:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:399    .text.fprime_from_bytes:0000000000000000 fprime_from_bytes
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:545    .text.fprime_normalize:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:552    .text.fprime_normalize:0000000000000000 fprime_normalize
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:605    .text.fprime_add:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:612    .text.fprime_add:0000000000000000 fprime_add
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:649    .text.fprime_sub:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:656    .text.fprime_sub:0000000000000000 fprime_sub
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:701    .text.fprime_mul:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:708    .text.fprime_mul:0000000000000000 fprime_mul
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:838    .text.fprime_inv:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:845    .text.fprime_inv:0000000000000000 fprime_inv
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:1010   .rodata.fprime_one:0000000000000000 fprime_one
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:1016   .rodata.fprime_zero:0000000000000000 fprime_zero
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:1012   .rodata.fprime_one:0000000000000001 $d
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//cck6zEt0.s:1017   .rodata.fprime_zero:0000000000000000 $d

UNDEFINED SYMBOLS
memset
