   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"sha512.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.sha512_block,"ax",%progbits
  19              		.align	2
  20              		.global	sha512_block
  21              		.thumb
  22              		.thumb_func
  24              	sha512_block:
  25              	.LFB4:
  26              		.file 1 "25519/sha512.c"
   1:25519/sha512.c **** /* SHA512
   2:25519/sha512.c ****  * Daniel Beer <dlbeer@gmail.com>, 22 Apr 2014
   3:25519/sha512.c ****  *
   4:25519/sha512.c ****  * This file is in the public domain.
   5:25519/sha512.c ****  */
   6:25519/sha512.c **** 
   7:25519/sha512.c **** #include "sha512.h"
   8:25519/sha512.c **** 
   9:25519/sha512.c **** const struct sha512_state sha512_initial_state = { {
  10:25519/sha512.c **** 	0x6a09e667f3bcc908LL, 0xbb67ae8584caa73bLL,
  11:25519/sha512.c **** 	0x3c6ef372fe94f82bLL, 0xa54ff53a5f1d36f1LL,
  12:25519/sha512.c **** 	0x510e527fade682d1LL, 0x9b05688c2b3e6c1fLL,
  13:25519/sha512.c **** 	0x1f83d9abfb41bd6bLL, 0x5be0cd19137e2179LL,
  14:25519/sha512.c **** } };
  15:25519/sha512.c **** 
  16:25519/sha512.c **** static const uint64_t round_k[80] = {
  17:25519/sha512.c **** 	0x428a2f98d728ae22LL, 0x7137449123ef65cdLL,
  18:25519/sha512.c **** 	0xb5c0fbcfec4d3b2fLL, 0xe9b5dba58189dbbcLL,
  19:25519/sha512.c **** 	0x3956c25bf348b538LL, 0x59f111f1b605d019LL,
  20:25519/sha512.c **** 	0x923f82a4af194f9bLL, 0xab1c5ed5da6d8118LL,
  21:25519/sha512.c **** 	0xd807aa98a3030242LL, 0x12835b0145706fbeLL,
  22:25519/sha512.c **** 	0x243185be4ee4b28cLL, 0x550c7dc3d5ffb4e2LL,
  23:25519/sha512.c **** 	0x72be5d74f27b896fLL, 0x80deb1fe3b1696b1LL,
  24:25519/sha512.c **** 	0x9bdc06a725c71235LL, 0xc19bf174cf692694LL,
  25:25519/sha512.c **** 	0xe49b69c19ef14ad2LL, 0xefbe4786384f25e3LL,
  26:25519/sha512.c **** 	0x0fc19dc68b8cd5b5LL, 0x240ca1cc77ac9c65LL,
  27:25519/sha512.c **** 	0x2de92c6f592b0275LL, 0x4a7484aa6ea6e483LL,
  28:25519/sha512.c **** 	0x5cb0a9dcbd41fbd4LL, 0x76f988da831153b5LL,
  29:25519/sha512.c **** 	0x983e5152ee66dfabLL, 0xa831c66d2db43210LL,
  30:25519/sha512.c **** 	0xb00327c898fb213fLL, 0xbf597fc7beef0ee4LL,
  31:25519/sha512.c **** 	0xc6e00bf33da88fc2LL, 0xd5a79147930aa725LL,
  32:25519/sha512.c **** 	0x06ca6351e003826fLL, 0x142929670a0e6e70LL,
  33:25519/sha512.c **** 	0x27b70a8546d22ffcLL, 0x2e1b21385c26c926LL,
  34:25519/sha512.c **** 	0x4d2c6dfc5ac42aedLL, 0x53380d139d95b3dfLL,
  35:25519/sha512.c **** 	0x650a73548baf63deLL, 0x766a0abb3c77b2a8LL,
  36:25519/sha512.c **** 	0x81c2c92e47edaee6LL, 0x92722c851482353bLL,
  37:25519/sha512.c **** 	0xa2bfe8a14cf10364LL, 0xa81a664bbc423001LL,
  38:25519/sha512.c **** 	0xc24b8b70d0f89791LL, 0xc76c51a30654be30LL,
  39:25519/sha512.c **** 	0xd192e819d6ef5218LL, 0xd69906245565a910LL,
  40:25519/sha512.c **** 	0xf40e35855771202aLL, 0x106aa07032bbd1b8LL,
  41:25519/sha512.c **** 	0x19a4c116b8d2d0c8LL, 0x1e376c085141ab53LL,
  42:25519/sha512.c **** 	0x2748774cdf8eeb99LL, 0x34b0bcb5e19b48a8LL,
  43:25519/sha512.c **** 	0x391c0cb3c5c95a63LL, 0x4ed8aa4ae3418acbLL,
  44:25519/sha512.c **** 	0x5b9cca4f7763e373LL, 0x682e6ff3d6b2b8a3LL,
  45:25519/sha512.c **** 	0x748f82ee5defb2fcLL, 0x78a5636f43172f60LL,
  46:25519/sha512.c **** 	0x84c87814a1f0ab72LL, 0x8cc702081a6439ecLL,
  47:25519/sha512.c **** 	0x90befffa23631e28LL, 0xa4506cebde82bde9LL,
  48:25519/sha512.c **** 	0xbef9a3f7b2c67915LL, 0xc67178f2e372532bLL,
  49:25519/sha512.c **** 	0xca273eceea26619cLL, 0xd186b8c721c0c207LL,
  50:25519/sha512.c **** 	0xeada7dd6cde0eb1eLL, 0xf57d4f7fee6ed178LL,
  51:25519/sha512.c **** 	0x06f067aa72176fbaLL, 0x0a637dc5a2c898a6LL,
  52:25519/sha512.c **** 	0x113f9804bef90daeLL, 0x1b710b35131c471bLL,
  53:25519/sha512.c **** 	0x28db77f523047d84LL, 0x32caab7b40c72493LL,
  54:25519/sha512.c **** 	0x3c9ebe0a15c9bebcLL, 0x431d67c49c100d4cLL,
  55:25519/sha512.c **** 	0x4cc5d4becb3e42b6LL, 0x597f299cfc657e2aLL,
  56:25519/sha512.c **** 	0x5fcb6fab3ad6faecLL, 0x6c44198c4a475817LL,
  57:25519/sha512.c **** };
  58:25519/sha512.c **** 
  59:25519/sha512.c **** static inline uint64_t load64(const uint8_t *x)
  60:25519/sha512.c **** {
  61:25519/sha512.c **** 	uint64_t r;
  62:25519/sha512.c **** 
  63:25519/sha512.c **** 	r = *(x++);
  64:25519/sha512.c **** 	r = (r << 8) | *(x++);
  65:25519/sha512.c **** 	r = (r << 8) | *(x++);
  66:25519/sha512.c **** 	r = (r << 8) | *(x++);
  67:25519/sha512.c **** 	r = (r << 8) | *(x++);
  68:25519/sha512.c **** 	r = (r << 8) | *(x++);
  69:25519/sha512.c **** 	r = (r << 8) | *(x++);
  70:25519/sha512.c **** 	r = (r << 8) | *(x++);
  71:25519/sha512.c **** 
  72:25519/sha512.c **** 	return r;
  73:25519/sha512.c **** }
  74:25519/sha512.c **** 
  75:25519/sha512.c **** static inline void store64(uint8_t *x, uint64_t v)
  76:25519/sha512.c **** {
  77:25519/sha512.c **** 	x += 7;
  78:25519/sha512.c **** 	*(x--) = v;
  79:25519/sha512.c **** 	v >>= 8;
  80:25519/sha512.c **** 	*(x--) = v;
  81:25519/sha512.c **** 	v >>= 8;
  82:25519/sha512.c **** 	*(x--) = v;
  83:25519/sha512.c **** 	v >>= 8;
  84:25519/sha512.c **** 	*(x--) = v;
  85:25519/sha512.c **** 	v >>= 8;
  86:25519/sha512.c **** 	*(x--) = v;
  87:25519/sha512.c **** 	v >>= 8;
  88:25519/sha512.c **** 	*(x--) = v;
  89:25519/sha512.c **** 	v >>= 8;
  90:25519/sha512.c **** 	*(x--) = v;
  91:25519/sha512.c **** 	v >>= 8;
  92:25519/sha512.c **** 	*(x--) = v;
  93:25519/sha512.c **** }
  94:25519/sha512.c **** 
  95:25519/sha512.c **** static inline uint64_t rot64(uint64_t x, int bits)
  96:25519/sha512.c **** {
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
  98:25519/sha512.c **** }
  99:25519/sha512.c **** 
 100:25519/sha512.c **** void sha512_block(struct sha512_state *s, const uint8_t *blk)
 101:25519/sha512.c **** {
  27              		.loc 1 101 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 400
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33 0000 2DE9F00F 		push	{r4, r5, r6, r7, r8, r9, r10, fp}
  34              		.cfi_def_cfa_offset 32
  35              		.cfi_offset 4, -32
  36              		.cfi_offset 5, -28
  37              		.cfi_offset 6, -24
  38              		.cfi_offset 7, -20
  39              		.cfi_offset 8, -16
  40              		.cfi_offset 9, -12
  41              		.cfi_offset 10, -8
  42              		.cfi_offset 11, -4
  43 0004 E4B0     		sub	sp, sp, #400
  44              		.cfi_def_cfa_offset 432
  45              		.loc 1 101 0
  46 0006 0C46     		mov	r4, r1
  47 0008 3390     		str	r0, [sp, #204]
  48 000a 01F1800C 		add	ip, r1, #128
  49 000e 42AD     		add	r5, sp, #264
  50              	.LVL1:
  51              	.L3:
  52              	.LBB56:
  53              	.LBB57:
  63:25519/sha512.c **** 	r = *(x++);
  54              		.loc 1 63 0
  55 0010 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
  64:25519/sha512.c **** 	r = (r << 8) | *(x++);
  56              		.loc 1 64 0
  57 0012 0021     		movs	r1, #0
  58 0014 020E     		lsrs	r2, r0, #24
  59 0016 0302     		lsls	r3, r0, #8
  60 0018 1192     		str	r2, [sp, #68]
  61 001a 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
  62 001c 1093     		str	r3, [sp, #64]
  63              	.LVL2:
  64 001e DDE91067 		ldrd	r6, [sp, #64]
  65 0022 3943     		orrs	r1, r1, r7
  66 0024 3043     		orrs	r0, r0, r6
  65:25519/sha512.c **** 	r = (r << 8) | *(x++);
  67              		.loc 1 65 0
  68 0026 0F02     		lsls	r7, r1, #8
  69 0028 47EA1067 		orr	r7, r7, r0, lsr #24
  70 002c 0602     		lsls	r6, r0, #8
  71              	.LVL3:
  72 002e 0021     		movs	r1, #0
  73 0030 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
  74 0032 3943     		orrs	r1, r1, r7
  75 0034 3043     		orrs	r0, r0, r6
  66:25519/sha512.c **** 	r = (r << 8) | *(x++);
  76              		.loc 1 66 0
  77 0036 4FEA0128 		lsl	r8, r1, #8
  78 003a 48EA1069 		orr	r9, r8, r0, lsr #24
  79 003e 4FEA002A 		lsl	r10, r0, #8
  80 0042 CDF83490 		str	r9, [sp, #52]
  81 0046 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
  82 0048 CDF830A0 		str	r10, [sp, #48]
  83              	.LVL4:
  84 004c 0021     		movs	r1, #0
  85 004e DDE90C23 		ldrd	r2, [sp, #48]
  86 0052 1943     		orrs	r1, r1, r3
  87 0054 1043     		orrs	r0, r0, r2
  67:25519/sha512.c **** 	r = (r << 8) | *(x++);
  88              		.loc 1 67 0
  89 0056 0B02     		lsls	r3, r1, #8
  90 0058 43EA1068 		orr	r8, r3, r0, lsr #24
  91 005c 4FEA0029 		lsl	r9, r0, #8
  92 0060 CDF83C80 		str	r8, [sp, #60]
  93 0064 2079     		ldrb	r0, [r4, #4]	@ zero_extendqisi2
  94 0066 CDF83890 		str	r9, [sp, #56]
  95              	.LVL5:
  96 006a 0021     		movs	r1, #0
  97 006c DDE90EAB 		ldrd	r10, [sp, #56]
  98 0070 41EA0B01 		orr	r1, r1, fp
  99 0074 40EA0A00 		orr	r0, r0, r10
  68:25519/sha512.c **** 	r = (r << 8) | *(x++);
 100              		.loc 1 68 0
 101 0078 4FEA012B 		lsl	fp, r1, #8
 102 007c 4BEA106B 		orr	fp, fp, r0, lsr #24
 103 0080 4FEA002A 		lsl	r10, r0, #8
 104              	.LVL6:
 105 0084 0021     		movs	r1, #0
 106 0086 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 107 0088 41EA0B01 		orr	r1, r1, fp
 108 008c 40EA0A00 		orr	r0, r0, r10
  69:25519/sha512.c **** 	r = (r << 8) | *(x++);
 109              		.loc 1 69 0
 110 0090 4FEA0129 		lsl	r9, r1, #8
 111 0094 49EA1069 		orr	r9, r9, r0, lsr #24
 112 0098 4FEA0028 		lsl	r8, r0, #8
 113              	.LVL7:
 114 009c 0021     		movs	r1, #0
 115 009e A079     		ldrb	r0, [r4, #6]	@ zero_extendqisi2
 116 00a0 41EA0901 		orr	r1, r1, r9
 117 00a4 40EA0800 		orr	r0, r0, r8
  70:25519/sha512.c **** 	r = (r << 8) | *(x++);
 118              		.loc 1 70 0
 119 00a8 0B02     		lsls	r3, r1, #8
 120 00aa 43EA1063 		orr	r3, r3, r0, lsr #24
 121 00ae 0202     		lsls	r2, r0, #8
 122              	.LVL8:
 123 00b0 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 124 00b2 0021     		movs	r1, #0
 125              	.LBE57:
 126              	.LBE56:
 102:25519/sha512.c **** 	uint64_t w[16];
 103:25519/sha512.c **** 	uint64_t a, b, c, d, e, f, g, h;
 104:25519/sha512.c **** 	int i;
 105:25519/sha512.c **** 
 106:25519/sha512.c **** 	for (i = 0; i < 16; i++) {
 107:25519/sha512.c **** 		w[i] = load64(blk);
 108:25519/sha512.c **** 		blk += 8;
 127              		.loc 1 108 0
 128 00b4 0834     		adds	r4, r4, #8
 129              	.LVL9:
 130              	.LBB59:
 131              	.LBB58:
  70:25519/sha512.c **** 	r = (r << 8) | *(x++);
 132              		.loc 1 70 0
 133 00b6 1043     		orrs	r0, r0, r2
 134 00b8 1943     		orrs	r1, r1, r3
 135              	.LBE58:
 136              	.LBE59:
 106:25519/sha512.c **** 	for (i = 0; i < 16; i++) {
 137              		.loc 1 106 0
 138 00ba 6445     		cmp	r4, ip
 107:25519/sha512.c **** 		w[i] = load64(blk);
 139              		.loc 1 107 0
 140 00bc E5E90201 		strd	r0, [r5, #8]!
 106:25519/sha512.c **** 	for (i = 0; i < 16; i++) {
 141              		.loc 1 106 0
 142 00c0 A6D1     		bne	.L3
 109:25519/sha512.c **** 	}
 110:25519/sha512.c **** 
 111:25519/sha512.c **** 	/* Load state */
 112:25519/sha512.c **** 	a = s->h[0];
 113:25519/sha512.c **** 	b = s->h[1];
 143              		.loc 1 113 0
 144 00c2 339B     		ldr	r3, [sp, #204]
 114:25519/sha512.c **** 	c = s->h[2];
 145              		.loc 1 114 0
 146 00c4 339D     		ldr	r5, [sp, #204]
 113:25519/sha512.c **** 	b = s->h[1];
 147              		.loc 1 113 0
 148 00c6 D3E90223 		ldrd	r2, [r3, #8]
 149              	.LVL10:
 112:25519/sha512.c **** 	a = s->h[0];
 150              		.loc 1 112 0
 151 00ca 3399     		ldr	r1, [sp, #204]
 113:25519/sha512.c **** 	b = s->h[1];
 152              		.loc 1 113 0
 153 00cc CDE93623 		strd	r2, [sp, #216]
 154              		.loc 1 114 0
 155 00d0 D5E90445 		ldrd	r4, [r5, #16]
 156              	.LVL11:
 112:25519/sha512.c **** 	a = s->h[0];
 157              		.loc 1 112 0
 158 00d4 D1E90001 		ldrd	r0, [r1]
 113:25519/sha512.c **** 	b = s->h[1];
 159              		.loc 1 113 0
 160 00d8 CDE90C23 		strd	r2, [sp, #48]
 115:25519/sha512.c **** 	d = s->h[3];
 116:25519/sha512.c **** 	e = s->h[4];
 117:25519/sha512.c **** 	f = s->h[5];
 118:25519/sha512.c **** 	g = s->h[6];
 161              		.loc 1 118 0
 162 00dc 339A     		ldr	r2, [sp, #204]
 114:25519/sha512.c **** 	c = s->h[2];
 163              		.loc 1 114 0
 164 00de CDE93845 		strd	r4, [sp, #224]
 165              		.loc 1 118 0
 166 00e2 02F13003 		add	r3, r2, #48
 167 00e6 D3E90023 		ldrd	r2, [r3]
 114:25519/sha512.c **** 	c = s->h[2];
 168              		.loc 1 114 0
 169 00ea CDE90E45 		strd	r4, [sp, #56]
 115:25519/sha512.c **** 	d = s->h[3];
 170              		.loc 1 115 0
 171 00ee 339F     		ldr	r7, [sp, #204]
 172              		.loc 1 118 0
 173 00f0 40AC     		add	r4, sp, #256
 112:25519/sha512.c **** 	a = s->h[0];
 174              		.loc 1 112 0
 175 00f2 8946     		mov	r9, r1
 176              		.loc 1 118 0
 177 00f4 C4E90023 		strd	r2, [r4]
 115:25519/sha512.c **** 	d = s->h[3];
 178              		.loc 1 115 0
 179 00f8 D7E90667 		ldrd	r6, [r7, #24]
 112:25519/sha512.c **** 	a = s->h[0];
 180              		.loc 1 112 0
 181 00fc CDE93401 		strd	r0, [sp, #208]
 182              	.LVL12:
 116:25519/sha512.c **** 	e = s->h[4];
 183              		.loc 1 116 0
 184 0100 DDF8CCB0 		ldr	fp, [sp, #204]
 117:25519/sha512.c **** 	f = s->h[5];
 185              		.loc 1 117 0
 186 0104 3399     		ldr	r1, [sp, #204]
 119:25519/sha512.c **** 	h = s->h[7];
 187              		.loc 1 119 0
 188 0106 339C     		ldr	r4, [sp, #204]
 115:25519/sha512.c **** 	d = s->h[3];
 189              		.loc 1 115 0
 190 0108 CDE93A67 		strd	r6, [sp, #232]
 191              	.LVL13:
 116:25519/sha512.c **** 	e = s->h[4];
 192              		.loc 1 116 0
 193 010c DBE908AB 		ldrd	r10, [fp, #32]
 194              		.loc 1 119 0
 195 0110 04F13805 		add	r5, r4, #56
 196 0114 D5E90045 		ldrd	r4, [r5]
 115:25519/sha512.c **** 	d = s->h[3];
 197              		.loc 1 115 0
 198 0118 CDE92A67 		strd	r6, [sp, #168]
 199              		.loc 1 119 0
 200 011c 42AE     		add	r6, sp, #264
 201              	.LVL14:
 112:25519/sha512.c **** 	a = s->h[0];
 202              		.loc 1 112 0
 203 011e 8046     		mov	r8, r0
 120:25519/sha512.c **** 
 121:25519/sha512.c **** 	for (i = 0; i < 80; i++) {
 204              		.loc 1 121 0
 205 0120 4FF0000C 		mov	ip, #0
 117:25519/sha512.c **** 	f = s->h[5];
 206              		.loc 1 117 0
 207 0124 D1E90A01 		ldrd	r0, [r1, #40]
 208              	.LVL15:
 118:25519/sha512.c **** 	g = s->h[6];
 209              		.loc 1 118 0
 210 0128 1F46     		mov	r7, r3
 117:25519/sha512.c **** 	f = s->h[5];
 211              		.loc 1 117 0
 212 012a CDE93E01 		strd	r0, [sp, #248]
 213 012e CDE91401 		strd	r0, [sp, #80]
 119:25519/sha512.c **** 	h = s->h[7];
 214              		.loc 1 119 0
 215 0132 5B46     		mov	r3, fp
 216 0134 C6E90045 		strd	r4, [r6]
 217 0138 2046     		mov	r0, r4
 118:25519/sha512.c **** 	g = s->h[6];
 218              		.loc 1 118 0
 219 013a 1646     		mov	r6, r2
 119:25519/sha512.c **** 	h = s->h[7];
 220              		.loc 1 119 0
 221 013c 2946     		mov	r1, r5
 222              	.LVL16:
 223 013e 5246     		mov	r2, r10
 116:25519/sha512.c **** 	e = s->h[4];
 224              		.loc 1 116 0
 225 0140 CDE93CAB 		strd	r10, [sp, #240]
 226              	.LVL17:
 227 0144 CDF840C0 		str	ip, [sp, #64]
 119:25519/sha512.c **** 	h = s->h[7];
 228              		.loc 1 119 0
 229 0148 C246     		mov	r10, r8
 230              	.LVL18:
 231 014a CB46     		mov	fp, r9
 232 014c 9046     		mov	r8, r2
 118:25519/sha512.c **** 	g = s->h[6];
 233              		.loc 1 118 0
 234 014e CDE91267 		strd	r6, [sp, #72]
 119:25519/sha512.c **** 	h = s->h[7];
 235              		.loc 1 119 0
 236 0152 CDE92C01 		strd	r0, [sp, #176]
 237 0156 9946     		mov	r9, r3
 238 0158 6246     		mov	r2, ip
 239 015a 18E0     		b	.L5
 240              	.LVL19:
 241              	.L9:
 242              	.LBB60:
 122:25519/sha512.c **** 		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
 123:25519/sha512.c **** 		const uint64_t wi = w[i & 15];
 124:25519/sha512.c **** 		const uint64_t wi15 = w[(i + 1) & 15];
 125:25519/sha512.c **** 		const uint64_t wi2 = w[(i + 14) & 15];
 126:25519/sha512.c **** 		const uint64_t wi7 = w[(i + 9) & 15];
 127:25519/sha512.c **** 		const uint64_t s0 =
 128:25519/sha512.c **** 			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 129:25519/sha512.c **** 		const uint64_t s1 =
 130:25519/sha512.c **** 			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 131:25519/sha512.c **** 
 132:25519/sha512.c **** 		/* Round calculations */
 133:25519/sha512.c **** 		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
 134:25519/sha512.c **** 		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
 135:25519/sha512.c **** 		const uint64_t ch = (e & f) ^ ((~e) & g);
 136:25519/sha512.c **** 		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 137:25519/sha512.c **** 		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 138:25519/sha512.c **** 		const uint64_t temp2 = S0 + maj;
 139:25519/sha512.c **** 
 140:25519/sha512.c **** 		/* Update round state */
 141:25519/sha512.c **** 		h = g;
 142:25519/sha512.c **** 		g = f;
 143:25519/sha512.c **** 		f = e;
 144:25519/sha512.c **** 		e = d + temp1;
 243              		.loc 1 144 0
 244 015c DDE91245 		ldrd	r4, [sp, #72]
 245              	.LVL20:
 246 0160 DDE90E67 		ldrd	r6, [sp, #56]
 247 0164 CDE92C45 		strd	r4, [sp, #176]
 248 0168 DDE91445 		ldrd	r4, [sp, #80]
 249 016c CDE92A67 		strd	r6, [sp, #168]
 250 0170 DDE90C67 		ldrd	r6, [sp, #48]
 251 0174 CDE91245 		strd	r4, [sp, #72]
 252              	.LVL21:
 253 0178 CDE90E67 		strd	r6, [sp, #56]
 254              	.LVL22:
 255 017c CDE91489 		strd	r8, [sp, #80]
 256              	.LVL23:
 257 0180 9046     		mov	r8, r2
 258              	.LVL24:
 259 0182 109A     		ldr	r2, [sp, #64]
 260              	.LVL25:
 261 0184 CDE90CAB 		strd	r10, [sp, #48]
 262              	.LVL26:
 263 0188 9946     		mov	r9, r3
 145:25519/sha512.c **** 		d = c;
 146:25519/sha512.c **** 		c = b;
 147:25519/sha512.c **** 		b = a;
 148:25519/sha512.c **** 		a = temp1 + temp2;
 264              		.loc 1 148 0
 265 018a 8246     		mov	r10, r0
 266              	.LVL27:
 267 018c 8B46     		mov	fp, r1
 268              	.LVL28:
 269              	.L5:
 123:25519/sha512.c **** 		const uint64_t wi = w[i & 15];
 270              		.loc 1 123 0 discriminator 2
 271 018e 64AB     		add	r3, sp, #400
 272 0190 03EBC205 		add	r5, r3, r2, lsl #3
 273              	.LBB61:
 274              	.LBB62:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 275              		.loc 1 97 0 discriminator 2
 276 0194 4FEA9842 		lsr	r2, r8, #18
 277 0198 42EA8932 		orr	r2, r2, r9, lsl #14
 278 019c 1692     		str	r2, [sp, #88]
 279              	.LBE62:
 280              	.LBE61:
 281              	.LBB66:
 282              	.LBB67:
 283 019e 4FEA9832 		lsr	r2, r8, #14
 284 01a2 42EA8942 		orr	r2, r2, r9, lsl #18
 285 01a6 1892     		str	r2, [sp, #96]
 286              	.LBE67:
 287              	.LBE66:
 288              	.LBB71:
 289              	.LBB63:
 290 01a8 4FEA9942 		lsr	r2, r9, #18
 291              	.LBE63:
 292              	.LBE71:
 124:25519/sha512.c **** 		const uint64_t wi15 = w[(i + 1) & 15];
 293              		.loc 1 124 0 discriminator 2
 294 01ac 0CF1010C 		add	ip, ip, #1
 295              	.LVL29:
 296              	.LBB72:
 297              	.LBB64:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 298              		.loc 1 97 0 discriminator 2
 299 01b0 42EA8832 		orr	r2, r2, r8, lsl #14
 300              	.LBE64:
 301              	.LBE72:
 124:25519/sha512.c **** 		const uint64_t wi15 = w[(i + 1) & 15];
 302              		.loc 1 124 0 discriminator 2
 303 01b4 0CF00F04 		and	r4, ip, #15
 304              	.LBB73:
 305              	.LBB65:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 306              		.loc 1 97 0 discriminator 2
 307 01b8 1792     		str	r2, [sp, #92]
 308              	.LBE65:
 309              	.LBE73:
 310              	.LBB74:
 311              	.LBB68:
 312 01ba 4FEA9932 		lsr	r2, r9, #14
 313              	.LBE68:
 314              	.LBE74:
 124:25519/sha512.c **** 		const uint64_t wi15 = w[(i + 1) & 15];
 315              		.loc 1 124 0 discriminator 2
 316 01be 03EBC401 		add	r1, r3, r4, lsl #3
 317              	.LBB75:
 318              	.LBB69:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 319              		.loc 1 97 0 discriminator 2
 320 01c2 42EA8842 		orr	r2, r2, r8, lsl #18
 321              	.LBE69:
 322              	.LBE75:
 124:25519/sha512.c **** 		const uint64_t wi15 = w[(i + 1) & 15];
 323              		.loc 1 124 0 discriminator 2
 324 01c6 51E92001 		ldrd	r0, [r1, #-128]
 325              	.LBB76:
 326              	.LBB70:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 327              		.loc 1 97 0 discriminator 2
 328 01ca 1992     		str	r2, [sp, #100]
 329              	.LBE70:
 330              	.LBE76:
 128:25519/sha512.c **** 			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 331              		.loc 1 128 0 discriminator 2
 332 01cc C609     		lsrs	r6, r0, #7
 124:25519/sha512.c **** 		const uint64_t wi15 = w[(i + 1) & 15];
 333              		.loc 1 124 0 discriminator 2
 334 01ce 1094     		str	r4, [sp, #64]
 335              	.LBB77:
 336              	.LBB78:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 337              		.loc 1 97 0 discriminator 2
 338 01d0 4FEAC852 		lsl	r2, r8, #23
 339              	.LBE78:
 340              	.LBE77:
 341              	.LBB84:
 342              	.LBB85:
 343 01d4 4408     		lsrs	r4, r0, #1
 344              	.LBE85:
 345              	.LBE84:
 128:25519/sha512.c **** 			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 346              		.loc 1 128 0 discriminator 2
 347 01d6 46EA4167 		orr	r7, r6, r1, lsl #25
 348              	.LBB91:
 349              	.LBB86:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 350              		.loc 1 97 0 discriminator 2
 351 01da 44EAC174 		orr	r4, r4, r1, lsl #31
 352              	.LBE86:
 353              	.LBE91:
 354              	.LBB92:
 355              	.LBB79:
 356 01de 42EA5922 		orr	r2, r2, r9, lsr #9
 357 01e2 0CF10D03 		add	r3, ip, #13
 358              	.LBE79:
 359              	.LBE92:
 128:25519/sha512.c **** 			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 360              		.loc 1 128 0 discriminator 2
 361 01e6 0897     		str	r7, [sp, #32]
 362              	.LBB93:
 363              	.LBB87:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 364              		.loc 1 97 0 discriminator 2
 365 01e8 2294     		str	r4, [sp, #136]
 366              	.LBE87:
 367              	.LBE93:
 368              	.LBB94:
 369              	.LBB80:
 370 01ea 1A92     		str	r2, [sp, #104]
 371              	.LBE80:
 372              	.LBE94:
 373              	.LBB95:
 374              	.LBB96:
 375 01ec 040A     		lsrs	r4, r0, #8
 376              	.LBE96:
 377              	.LBE95:
 125:25519/sha512.c **** 		const uint64_t wi2 = w[(i + 14) & 15];
 378              		.loc 1 125 0 discriminator 2
 379 01ee 64AF     		add	r7, sp, #400
 380 01f0 03F00F03 		and	r3, r3, #15
 381              	.LBB101:
 382              	.LBB81:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 383              		.loc 1 97 0 discriminator 2
 384 01f4 4FEAC952 		lsl	r2, r9, #23
 385              	.LBE81:
 386              	.LBE101:
 387              	.LBB102:
 388              	.LBB97:
 389 01f8 44EA0164 		orr	r4, r4, r1, lsl #24
 390              	.LBE97:
 391              	.LBE102:
 392              	.LBB103:
 393              	.LBB88:
 394 01fc 4E08     		lsrs	r6, r1, #1
 395              	.LBE88:
 396              	.LBE103:
 125:25519/sha512.c **** 		const uint64_t wi2 = w[(i + 14) & 15];
 397              		.loc 1 125 0 discriminator 2
 398 01fe 07EBC303 		add	r3, r7, r3, lsl #3
 399              	.LBB104:
 400              	.LBB82:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 401              		.loc 1 97 0 discriminator 2
 402 0202 42EA5822 		orr	r2, r2, r8, lsr #9
 403              	.LBE82:
 404              	.LBE104:
 128:25519/sha512.c **** 			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 405              		.loc 1 128 0 discriminator 2
 406 0206 CF09     		lsrs	r7, r1, #7
 407              	.LBB105:
 408              	.LBB89:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 409              		.loc 1 97 0 discriminator 2
 410 0208 46EAC076 		orr	r6, r6, r0, lsl #31
 411              	.LBE89:
 412              	.LBE105:
 413              	.LBB106:
 414              	.LBB98:
 415 020c 2494     		str	r4, [sp, #144]
 416              	.LBE98:
 417              	.LBE106:
 418              	.LBB107:
 419              	.LBB83:
 420 020e 1B92     		str	r2, [sp, #108]
 421              	.LBE83:
 422              	.LBE107:
 423              	.LBB108:
 424              	.LBB99:
 425 0210 090A     		lsrs	r1, r1, #8
 426              	.LBE99:
 427              	.LBE108:
 125:25519/sha512.c **** 		const uint64_t wi2 = w[(i + 14) & 15];
 428              		.loc 1 125 0 discriminator 2
 429 0212 53E92023 		ldrd	r2, [r3, #-128]
 130:25519/sha512.c **** 			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 430              		.loc 1 130 0 discriminator 2
 431 0216 9409     		lsrs	r4, r2, #6
 432 0218 0A94     		str	r4, [sp, #40]
 433              	.LVL30:
 128:25519/sha512.c **** 			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 434              		.loc 1 128 0 discriminator 2
 435 021a 0997     		str	r7, [sp, #36]
 436              	.LBB109:
 437              	.LBB90:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 438              		.loc 1 97 0 discriminator 2
 439 021c 2396     		str	r6, [sp, #140]
 440              	.LBE90:
 441              	.LBE109:
 442              	.LBB110:
 443              	.LBB100:
 444 021e 41EA0061 		orr	r1, r1, r0, lsl #24
 445 0222 2591     		str	r1, [sp, #148]
 446              	.LBE100:
 447              	.LBE110:
 128:25519/sha512.c **** 			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 448              		.loc 1 128 0 discriminator 2
 449 0224 DDE92267 		ldrd	r6, [sp, #136]
 450 0228 DDE90801 		ldrd	r0, [sp, #32]
 451              	.LVL31:
 452 022c 4F40     		eors	r7, r7, r1
 130:25519/sha512.c **** 			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 453              		.loc 1 130 0 discriminator 2
 454 022e 0A99     		ldr	r1, [sp, #40]
 128:25519/sha512.c **** 			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 455              		.loc 1 128 0 discriminator 2
 456 0230 4640     		eors	r6, r6, r0
 130:25519/sha512.c **** 			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 457              		.loc 1 130 0 discriminator 2
 458 0232 41EA8361 		orr	r1, r1, r3, lsl #26
 459 0236 0A91     		str	r1, [sp, #40]
 460              	.LBB111:
 461              	.LBB112:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 462              		.loc 1 97 0 discriminator 2
 463 0238 D10C     		lsrs	r1, r2, #19
 464 023a 41EA4331 		orr	r1, r1, r3, lsl #13
 465 023e 2691     		str	r1, [sp, #152]
 466              	.LBE112:
 467              	.LBE111:
 468              	.LBB114:
 469              	.LBB115:
 470 0240 4FEA8A71 		lsl	r1, r10, #30
 471 0244 41EA9B01 		orr	r1, r1, fp, lsr #2
 472 0248 1C91     		str	r1, [sp, #112]
 473              	.LBE115:
 474              	.LBE114:
 475              	.LBB119:
 476              	.LBB120:
 477 024a 4FEA1A71 		lsr	r1, r10, #28
 478 024e 41EA0B11 		orr	r1, r1, fp, lsl #4
 479 0252 1E91     		str	r1, [sp, #120]
 480              	.LBE120:
 481              	.LBE119:
 127:25519/sha512.c **** 		const uint64_t s0 =
 482              		.loc 1 127 0 discriminator 2
 483 0254 DDE92401 		ldrd	r0, [sp, #144]
 484 0258 7040     		eors	r0, r0, r6
 485 025a 7940     		eors	r1, r1, r7
 486 025c CDE93001 		strd	r0, [sp, #192]
 134:25519/sha512.c **** 		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
 487              		.loc 1 134 0 discriminator 2
 488 0260 DDE91867 		ldrd	r6, [sp, #96]
 130:25519/sha512.c **** 			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 489              		.loc 1 130 0 discriminator 2
 490 0264 9909     		lsrs	r1, r3, #6
 491 0266 0B91     		str	r1, [sp, #44]
 134:25519/sha512.c **** 		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
 492              		.loc 1 134 0 discriminator 2
 493 0268 DDE91601 		ldrd	r0, [sp, #88]
 494 026c 7040     		eors	r0, r0, r6
 495 026e 7940     		eors	r1, r1, r7
 496 0270 0CF10804 		add	r4, ip, #8
 497 0274 DDE91A67 		ldrd	r6, [sp, #104]
 498 0278 4640     		eors	r6, r6, r0
 499 027a 4F40     		eors	r7, r7, r1
 500 027c CDE92E67 		strd	r6, [sp, #184]
 149:25519/sha512.c **** 
 150:25519/sha512.c **** 		/* w[wrap(i)] becomes w[i + 16] */
 151:25519/sha512.c **** 		w[i & 15] = wi + s0 + wi7 + s1;
 501              		.loc 1 151 0 discriminator 2
 502 0280 DDE93001 		ldrd	r0, [sp, #192]
 126:25519/sha512.c **** 		const uint64_t wi7 = w[(i + 9) & 15];
 503              		.loc 1 126 0 discriminator 2
 504 0284 64AF     		add	r7, sp, #400
 505              	.LVL32:
 506 0286 04F00F04 		and	r4, r4, #15
 507              	.LVL33:
 508 028a 07EBC404 		add	r4, r7, r4, lsl #3
 509              	.LVL34:
 510              		.loc 1 151 0 discriminator 2
 511 028e 55E92067 		ldrd	r6, [r5, #-128]
 512 0292 8019     		adds	r0, r0, r6
 513 0294 41EB0701 		adc	r1, r1, r7
 514 0298 CDE93001 		strd	r0, [sp, #192]
 515 029c 54E92001 		ldrd	r0, [r4, #-128]
 516 02a0 DDE93067 		ldrd	r6, [sp, #192]
 517              	.LBB124:
 518              	.LBB113:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 519              		.loc 1 97 0 discriminator 2
 520 02a4 DC0C     		lsrs	r4, r3, #19
 521 02a6 44EA4234 		orr	r4, r4, r2, lsl #13
 522 02aa 2794     		str	r4, [sp, #156]
 523              	.LBE113:
 524              	.LBE124:
 525              	.LBB125:
 526              	.LBB126:
 527 02ac D400     		lsls	r4, r2, #3
 528 02ae 44EA5374 		orr	r4, r4, r3, lsr #29
 529 02b2 DB00     		lsls	r3, r3, #3
 530              	.LBE126:
 531              	.LBE125:
 532              		.loc 1 151 0 discriminator 2
 533 02b4 8019     		adds	r0, r0, r6
 534              	.LBB129:
 535              	.LBB127:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 536              		.loc 1 97 0 discriminator 2
 537 02b6 43EA5273 		orr	r3, r3, r2, lsr #29
 538              	.LBE127:
 539              	.LBE129:
 540              		.loc 1 151 0 discriminator 2
 541 02ba 41EB0701 		adc	r1, r1, r7
 542              	.LBB130:
 543              	.LBB128:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 544              		.loc 1 97 0 discriminator 2
 545 02be 2894     		str	r4, [sp, #160]
 546 02c0 2993     		str	r3, [sp, #164]
 547              	.LBE128:
 548              	.LBE130:
 130:25519/sha512.c **** 			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 549              		.loc 1 130 0 discriminator 2
 550 02c2 DDE92667 		ldrd	r6, [sp, #152]
 551 02c6 DDE90A23 		ldrd	r2, [sp, #40]
 552              	.LVL35:
 553 02ca 5640     		eors	r6, r6, r2
 554 02cc 5F40     		eors	r7, r7, r3
 555              	.LVL36:
 129:25519/sha512.c **** 		const uint64_t s1 =
 556              		.loc 1 129 0 discriminator 2
 557 02ce DDE92823 		ldrd	r2, [sp, #160]
 558 02d2 5640     		eors	r6, r6, r2
 559              		.loc 1 151 0 discriminator 2
 560 02d4 8219     		adds	r2, r0, r6
 129:25519/sha512.c **** 		const uint64_t s1 =
 561              		.loc 1 129 0 discriminator 2
 562 02d6 87EA0307 		eor	r7, r7, r3
 563              		.loc 1 151 0 discriminator 2
 564 02da 41EB0703 		adc	r3, r1, r7
 565 02de CDE93023 		strd	r2, [sp, #192]
 135:25519/sha512.c **** 		const uint64_t ch = (e & f) ^ ((~e) & g);
 566              		.loc 1 135 0 discriminator 2
 567 02e2 DDE91201 		ldrd	r0, [sp, #72]
 568 02e6 DDE91423 		ldrd	r2, [sp, #80]
 569 02ea 20EA0800 		bic	r0, r0, r8
 570 02ee 02EA0802 		and	r2, r2, r8
 571 02f2 03EA0903 		and	r3, r3, r9
 572 02f6 21EA0901 		bic	r1, r1, r9
 573 02fa 5040     		eors	r0, r0, r2
 574 02fc 5940     		eors	r1, r1, r3
 575              	.LBB131:
 576              	.LBB116:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 577              		.loc 1 97 0 discriminator 2
 578 02fe 4FEA8B73 		lsl	r3, fp, #30
 579              	.LBE116:
 580              	.LBE131:
 136:25519/sha512.c **** 		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 581              		.loc 1 136 0 discriminator 2
 582 0302 DDE92E67 		ldrd	r6, [sp, #184]
 583              	.LBB132:
 584              	.LBB117:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 585              		.loc 1 97 0 discriminator 2
 586 0306 43EA9A03 		orr	r3, r3, r10, lsr #2
 587              	.LBE117:
 588              	.LBE132:
 136:25519/sha512.c **** 		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 589              		.loc 1 136 0 discriminator 2
 590 030a 8019     		adds	r0, r0, r6
 591 030c 41EB0701 		adc	r1, r1, r7
 592              	.LBB133:
 593              	.LBB118:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 594              		.loc 1 97 0 discriminator 2
 595 0310 1D93     		str	r3, [sp, #116]
 596              	.LBE118:
 597              	.LBE133:
 136:25519/sha512.c **** 		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 598              		.loc 1 136 0 discriminator 2
 599 0312 55E92067 		ldrd	r6, [r5, #-128]
 600              	.LBB134:
 601              	.LBB135:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 602              		.loc 1 97 0 discriminator 2
 603 0316 4FEA4A63 		lsl	r3, r10, #25
 604              	.LBE135:
 605              	.LBE134:
 136:25519/sha512.c **** 		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 606              		.loc 1 136 0 discriminator 2
 607 031a 3618     		adds	r6, r6, r0
 608 031c 47EB0107 		adc	r7, r7, r1
 609              	.LBB141:
 610              	.LBB136:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 611              		.loc 1 97 0 discriminator 2
 612 0320 43EADB13 		orr	r3, r3, fp, lsr #7
 613              	.LBE136:
 614              	.LBE141:
 615              	.LBB142:
 616              	.LBB121:
 617 0324 4FEA1B72 		lsr	r2, fp, #28
 618              	.LBE121:
 619              	.LBE142:
 137:25519/sha512.c **** 		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 620              		.loc 1 137 0 discriminator 2
 621 0328 DDE90C01 		ldrd	r0, [sp, #48]
 622              	.LBB143:
 623              	.LBB122:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 624              		.loc 1 97 0 discriminator 2
 625 032c 42EA0A12 		orr	r2, r2, r10, lsl #4
 626              	.LBE122:
 627              	.LBE143:
 628              	.LBB144:
 629              	.LBB137:
 630 0330 2093     		str	r3, [sp, #128]
 631              	.LBE137:
 632              	.LBE144:
 136:25519/sha512.c **** 		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 633              		.loc 1 136 0 discriminator 2
 634 0332 CDE92E67 		strd	r6, [sp, #184]
 137:25519/sha512.c **** 		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 635              		.loc 1 137 0 discriminator 2
 636 0336 DDE90E67 		ldrd	r6, [sp, #56]
 637              	.LBB145:
 638              	.LBB138:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 639              		.loc 1 97 0 discriminator 2
 640 033a 4FEA4B63 		lsl	r3, fp, #25
 641              	.LBE138:
 642              	.LBE145:
 137:25519/sha512.c **** 		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 643              		.loc 1 137 0 discriminator 2
 644 033e 4F40     		eors	r7, r7, r1
 645 0340 5349     		ldr	r1, .L10
 646              	.LBB146:
 647              	.LBB123:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 648              		.loc 1 97 0 discriminator 2
 649 0342 1F92     		str	r2, [sp, #124]
 650              	.LBE123:
 651              	.LBE146:
 652              	.LBB147:
 653              	.LBB139:
 654 0344 43EADA13 		orr	r3, r3, r10, lsr #7
 655              	.LBE139:
 656              	.LBE147:
 137:25519/sha512.c **** 		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 657              		.loc 1 137 0 discriminator 2
 658 0348 4640     		eors	r6, r6, r0
 659              	.LBB148:
 660              	.LBB140:
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
 661              		.loc 1 97 0 discriminator 2
 662 034a 2193     		str	r3, [sp, #132]
 663 034c 01EBCC04 		add	r4, r1, ip, lsl #3
 664              	.LBE140:
 665              	.LBE148:
 133:25519/sha512.c **** 		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
 666              		.loc 1 133 0 discriminator 2
 667 0350 DDE91C23 		ldrd	r2, [sp, #112]
 668 0354 DDE91E01 		ldrd	r0, [sp, #120]
 669 0358 4240     		eors	r2, r2, r0
 670 035a 4B40     		eors	r3, r3, r1
 671 035c DDE92001 		ldrd	r0, [sp, #128]
 672 0360 5040     		eors	r0, r0, r2
 673 0362 5940     		eors	r1, r1, r3
 674 0364 CDE90001 		strd	r0, [sp]
 675              		.loc 1 151 0 discriminator 2
 676 0368 DDE93023 		ldrd	r2, [sp, #192]
 136:25519/sha512.c **** 		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 677              		.loc 1 136 0 discriminator 2
 678 036c DDE92E01 		ldrd	r0, [sp, #184]
 679              		.loc 1 151 0 discriminator 2
 680 0370 45E92023 		strd	r2, [r5, #-128]
 681              	.LVL37:
 136:25519/sha512.c **** 		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 682              		.loc 1 136 0 discriminator 2
 683 0374 A4F10805 		add	r5, r4, #-8
 684 0378 D5E90045 		ldrd	r4, [r5]
 137:25519/sha512.c **** 		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 685              		.loc 1 137 0 discriminator 2
 686 037c DDE90C23 		ldrd	r2, [sp, #48]
 136:25519/sha512.c **** 		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 687              		.loc 1 136 0 discriminator 2
 688 0380 0019     		adds	r0, r0, r4
 689 0382 41EB0501 		adc	r1, r1, r5
 137:25519/sha512.c **** 		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 690              		.loc 1 137 0 discriminator 2
 691 0386 06EA0A06 		and	r6, r6, r10
 692 038a 07EA0B07 		and	r7, r7, fp
 693 038e DDE90E45 		ldrd	r4, [sp, #56]
 694 0392 1440     		ands	r4, r4, r2
 695 0394 1D40     		ands	r5, r5, r3
 696 0396 7440     		eors	r4, r4, r6
 697 0398 7D40     		eors	r5, r5, r7
 136:25519/sha512.c **** 		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 698              		.loc 1 136 0 discriminator 2
 699 039a DDE92C67 		ldrd	r6, [sp, #176]
 700 039e 8019     		adds	r0, r0, r6
 701 03a0 41EB0701 		adc	r1, r1, r7
 702              	.LVL38:
 138:25519/sha512.c **** 		const uint64_t temp2 = S0 + maj;
 703              		.loc 1 138 0 discriminator 2
 704 03a4 DDE90023 		ldrd	r2, [sp]
 705 03a8 A418     		adds	r4, r4, r2
 706 03aa 45EB0305 		adc	r5, r5, r3
 707              	.LVL39:
 144:25519/sha512.c **** 		e = d + temp1;
 708              		.loc 1 144 0 discriminator 2
 709 03ae DDE92A23 		ldrd	r2, [sp, #168]
 710 03b2 1218     		adds	r2, r2, r0
 711 03b4 43EB0103 		adc	r3, r3, r1
 712              	.LVL40:
 148:25519/sha512.c **** 		a = temp1 + temp2;
 713              		.loc 1 148 0 discriminator 2
 714 03b8 0019     		adds	r0, r0, r4
 715              	.LVL41:
 716 03ba 41EB0501 		adc	r1, r1, r5
 717              	.LVL42:
 718              	.LBE60:
 121:25519/sha512.c **** 	for (i = 0; i < 80; i++) {
 719              		.loc 1 121 0 discriminator 2
 720 03be BCF1500F 		cmp	ip, #80
 721 03c2 7FF4CBAE 		bne	.L9
 722 03c6 1446     		mov	r4, r2
 723              	.LVL43:
 724 03c8 1D46     		mov	r5, r3
 725 03ca 0246     		mov	r2, r0
 726              	.LVL44:
 727 03cc 0B46     		mov	r3, r1
 728 03ce 4046     		mov	r0, r8
 729              	.LVL45:
 730 03d0 4946     		mov	r1, r9
 731 03d2 D046     		mov	r8, r10
 732              	.LVL46:
 733 03d4 D946     		mov	r9, fp
 734 03d6 8246     		mov	r10, r0
 735              	.LVL47:
 736 03d8 8B46     		mov	fp, r1
 737 03da 2046     		mov	r0, r4
 738 03dc 2946     		mov	r1, r5
 152:25519/sha512.c **** 	}
 153:25519/sha512.c **** 
 154:25519/sha512.c **** 	/* Store state */
 155:25519/sha512.c **** 	s->h[0] += a;
 739              		.loc 1 155 0
 740 03de DDE93445 		ldrd	r4, [sp, #208]
 741 03e2 A418     		adds	r4, r4, r2
 742 03e4 45EB0305 		adc	r5, r5, r3
 156:25519/sha512.c **** 	s->h[1] += b;
 743              		.loc 1 156 0
 744 03e8 DDE93667 		ldrd	r6, [sp, #216]
 745 03ec 16EB0806 		adds	r6, r6, r8
 746 03f0 47EB0907 		adc	r7, r7, r9
 157:25519/sha512.c **** 	s->h[2] += c;
 747              		.loc 1 157 0
 748 03f4 DDE93823 		ldrd	r2, [sp, #224]
 749 03f8 DDE90C89 		ldrd	r8, [sp, #48]
 750 03fc 18EB0208 		adds	r8, r8, r2
 751 0400 49EB0309 		adc	r9, r9, r3
 155:25519/sha512.c **** 	s->h[0] += a;
 752              		.loc 1 155 0
 753 0404 CDE90645 		strd	r4, [sp, #24]
 158:25519/sha512.c **** 	s->h[3] += d;
 754              		.loc 1 158 0
 755 0408 DDE90E45 		ldrd	r4, [sp, #56]
 159:25519/sha512.c **** 	s->h[4] += e;
 756              		.loc 1 159 0
 757 040c DDE93C23 		ldrd	r2, [sp, #240]
 156:25519/sha512.c **** 	s->h[1] += b;
 758              		.loc 1 156 0
 759 0410 CDE90467 		strd	r6, [sp, #16]
 158:25519/sha512.c **** 	s->h[3] += d;
 760              		.loc 1 158 0
 761 0414 DDE93A67 		ldrd	r6, [sp, #232]
 762 0418 A419     		adds	r4, r4, r6
 763 041a 45EB0705 		adc	r5, r5, r7
 764              		.loc 1 159 0
 765 041e 8018     		adds	r0, r0, r2
 766 0420 41EB0301 		adc	r1, r1, r3
 160:25519/sha512.c **** 	s->h[5] += f;
 161:25519/sha512.c **** 	s->h[6] += g;
 767              		.loc 1 161 0
 768 0424 40AF     		add	r7, sp, #256
 160:25519/sha512.c **** 	s->h[5] += f;
 769              		.loc 1 160 0
 770 0426 DDE93E23 		ldrd	r2, [sp, #248]
 771 042a 12EB0A02 		adds	r2, r2, r10
 772 042e 43EB0B03 		adc	r3, r3, fp
 773              		.loc 1 161 0
 774 0432 D7E90067 		ldrd	r6, [r7]
 158:25519/sha512.c **** 	s->h[3] += d;
 775              		.loc 1 158 0
 776 0436 CDE90245 		strd	r4, [sp, #8]
 777              		.loc 1 161 0
 778 043a DDE91445 		ldrd	r4, [sp, #80]
 162:25519/sha512.c **** 	s->h[7] += h;
 779              		.loc 1 162 0
 780 043e 0DF5847B 		add	fp, sp, #264
 161:25519/sha512.c **** 	s->h[6] += g;
 781              		.loc 1 161 0
 782 0442 A419     		adds	r4, r4, r6
 155:25519/sha512.c **** 	s->h[0] += a;
 783              		.loc 1 155 0
 784 0444 DDF8CCC0 		ldr	ip, [sp, #204]
 785              	.LVL48:
 161:25519/sha512.c **** 	s->h[6] += g;
 786              		.loc 1 161 0
 787 0448 45EB0705 		adc	r5, r5, r7
 788              		.loc 1 162 0
 789 044c DBE900AB 		ldrd	r10, [fp]
 790 0450 DDE91267 		ldrd	r6, [sp, #72]
 791 0454 16EB0A06 		adds	r6, r6, r10
 792 0458 47EB0B07 		adc	r7, r7, fp
 157:25519/sha512.c **** 	s->h[2] += c;
 793              		.loc 1 157 0
 794 045c CCE90489 		strd	r8, [ip, #16]
 155:25519/sha512.c **** 	s->h[0] += a;
 795              		.loc 1 155 0
 796 0460 DDE906AB 		ldrd	r10, [sp, #24]
 158:25519/sha512.c **** 	s->h[3] += d;
 797              		.loc 1 158 0
 798 0464 DDE90289 		ldrd	r8, [sp, #8]
 155:25519/sha512.c **** 	s->h[0] += a;
 799              		.loc 1 155 0
 800 0468 CCE900AB 		strd	r10, [ip]
 156:25519/sha512.c **** 	s->h[1] += b;
 801              		.loc 1 156 0
 802 046c DDE904AB 		ldrd	r10, [sp, #16]
 158:25519/sha512.c **** 	s->h[3] += d;
 803              		.loc 1 158 0
 804 0470 CCE90689 		strd	r8, [ip, #24]
 156:25519/sha512.c **** 	s->h[1] += b;
 805              		.loc 1 156 0
 806 0474 CCE902AB 		strd	r10, [ip, #8]
 159:25519/sha512.c **** 	s->h[4] += e;
 807              		.loc 1 159 0
 808 0478 CCE90801 		strd	r0, [ip, #32]
 160:25519/sha512.c **** 	s->h[5] += f;
 809              		.loc 1 160 0
 810 047c CCE90A23 		strd	r2, [ip, #40]
 161:25519/sha512.c **** 	s->h[6] += g;
 811              		.loc 1 161 0
 812 0480 CCE90C45 		strd	r4, [ip, #48]
 813              		.loc 1 162 0
 814 0484 CCE90E67 		strd	r6, [ip, #56]
 163:25519/sha512.c **** }
 815              		.loc 1 163 0
 816 0488 64B0     		add	sp, sp, #400
 817              		@ sp needed
 818 048a BDE8F00F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp}
 819              	.LVL49:
 820 048e 7047     		bx	lr
 821              	.L11:
 822              		.align	2
 823              	.L10:
 824 0490 00000000 		.word	.LANCHOR0
 825              		.cfi_endproc
 826              	.LFE4:
 828              		.section	.text.sha512_final,"ax",%progbits
 829              		.align	2
 830              		.global	sha512_final
 831              		.thumb
 832              		.thumb_func
 834              	sha512_final:
 835              	.LFB5:
 164:25519/sha512.c **** 
 165:25519/sha512.c **** void sha512_final(struct sha512_state *s, const uint8_t *blk,
 166:25519/sha512.c **** 		  size_t total_size)
 167:25519/sha512.c **** {
 836              		.loc 1 167 0
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 128
 839              		@ frame_needed = 0, uses_anonymous_args = 0
 840              	.LVL50:
 841 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 842              		.cfi_def_cfa_offset 32
 843              		.cfi_offset 4, -32
 844              		.cfi_offset 5, -28
 845              		.cfi_offset 6, -24
 846              		.cfi_offset 7, -20
 847              		.cfi_offset 8, -16
 848              		.cfi_offset 9, -12
 849              		.cfi_offset 10, -8
 850              		.cfi_offset 14, -4
 168:25519/sha512.c **** 	uint8_t temp[SHA512_BLOCK_SIZE] = {0};
 851              		.loc 1 168 0
 852 0004 8025     		movs	r5, #128
 167:25519/sha512.c **** {
 853              		.loc 1 167 0
 854 0006 A0B0     		sub	sp, sp, #128
 855              		.cfi_def_cfa_offset 160
 167:25519/sha512.c **** {
 856              		.loc 1 167 0
 857 0008 1446     		mov	r4, r2
 858 000a 8246     		mov	r10, r0
 859 000c 0F46     		mov	r7, r1
 860              		.loc 1 168 0
 861 000e 6846     		mov	r0, sp
 862              	.LVL51:
 863 0010 2A46     		mov	r2, r5
 864              	.LVL52:
 865 0012 0021     		movs	r1, #0
 866              	.LVL53:
 867 0014 FFF7FEFF 		bl	memset
 868              	.LVL54:
 169:25519/sha512.c **** 	const size_t last_size = total_size & (SHA512_BLOCK_SIZE - 1);
 170:25519/sha512.c **** 
 171:25519/sha512.c **** 	if (last_size)
 869              		.loc 1 171 0
 870 0018 14F07F06 		ands	r6, r4, #127
 871              	.LVL55:
 872 001c 1ED1     		bne	.L16
 172:25519/sha512.c **** 		memcpy(temp, blk, last_size);
 173:25519/sha512.c **** 	temp[last_size] = 0x80;
 873              		.loc 1 173 0
 874 001e 8DF80050 		strb	r5, [sp]
 875              	.L14:
 174:25519/sha512.c **** 
 175:25519/sha512.c **** 	if (last_size > 111) {
 176:25519/sha512.c **** 		sha512_block(s, temp);
 177:25519/sha512.c **** 		memset(temp, 0, sizeof(temp));
 178:25519/sha512.c **** 	}
 179:25519/sha512.c **** 
 180:25519/sha512.c **** 	/* Note: we assume total_size fits in 61 bits */
 181:25519/sha512.c **** 	store64(temp + SHA512_BLOCK_SIZE - 8, total_size << 3);
 876              		.loc 1 181 0
 877 0022 E200     		lsls	r2, r4, #3
 878              	.LVL56:
 879              	.LBB149:
 880              	.LBB150:
  79:25519/sha512.c **** 	v >>= 8;
 881              		.loc 1 79 0
 882 0024 140A     		lsrs	r4, r2, #8
 883              	.LVL57:
  81:25519/sha512.c **** 	v >>= 8;
 884              		.loc 1 81 0
 885 0026 260A     		lsrs	r6, r4, #8
 886              	.LVL58:
  79:25519/sha512.c **** 	v >>= 8;
 887              		.loc 1 79 0
 888 0028 0025     		movs	r5, #0
 889              	.LVL59:
  83:25519/sha512.c **** 	v >>= 8;
 890              		.loc 1 83 0
 891 002a 4FEA1628 		lsr	r8, r6, #8
 892              	.LBE150:
 893              	.LBE149:
 182:25519/sha512.c **** 	sha512_block(s, temp);
 894              		.loc 1 182 0
 895 002e 5046     		mov	r0, r10
 896 0030 6946     		mov	r1, sp
 897              	.LBB152:
 898              	.LBB151:
  78:25519/sha512.c **** 	*(x--) = v;
 899              		.loc 1 78 0
 900 0032 8DF87F20 		strb	r2, [sp, #127]
  80:25519/sha512.c **** 	*(x--) = v;
 901              		.loc 1 80 0
 902 0036 8DF87E40 		strb	r4, [sp, #126]
  82:25519/sha512.c **** 	*(x--) = v;
 903              		.loc 1 82 0
 904 003a 8DF87D60 		strb	r6, [sp, #125]
 905              	.LVL60:
  84:25519/sha512.c **** 	*(x--) = v;
 906              		.loc 1 84 0
 907 003e 8DF87C80 		strb	r8, [sp, #124]
 908              	.LVL61:
  86:25519/sha512.c **** 	*(x--) = v;
 909              		.loc 1 86 0
 910 0042 8DF87B50 		strb	r5, [sp, #123]
 911              	.LVL62:
  88:25519/sha512.c **** 	*(x--) = v;
 912              		.loc 1 88 0
 913 0046 8DF87A50 		strb	r5, [sp, #122]
 914              	.LVL63:
  90:25519/sha512.c **** 	*(x--) = v;
 915              		.loc 1 90 0
 916 004a 8DF87950 		strb	r5, [sp, #121]
 917              	.LVL64:
  92:25519/sha512.c **** 	*(x--) = v;
 918              		.loc 1 92 0
 919 004e 8DF87850 		strb	r5, [sp, #120]
 920              	.LBE151:
 921              	.LBE152:
 922              		.loc 1 182 0
 923 0052 FFF7FEFF 		bl	sha512_block
 924              	.LVL65:
 183:25519/sha512.c **** }
 925              		.loc 1 183 0
 926 0056 20B0     		add	sp, sp, #128
 927              		@ sp needed
 928 0058 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 929              	.LVL66:
 930              	.L16:
 172:25519/sha512.c **** 		memcpy(temp, blk, last_size);
 931              		.loc 1 172 0
 932 005c 3946     		mov	r1, r7
 933 005e 6846     		mov	r0, sp
 934 0060 3246     		mov	r2, r6
 935 0062 FFF7FEFF 		bl	memcpy
 936              	.LVL67:
 173:25519/sha512.c **** 	temp[last_size] = 0x80;
 937              		.loc 1 173 0
 938 0066 0DEB0503 		add	r3, sp, r5
 939 006a 3344     		add	r3, r3, r6
 175:25519/sha512.c **** 	if (last_size > 111) {
 940              		.loc 1 175 0
 941 006c 6F2E     		cmp	r6, #111
 173:25519/sha512.c **** 	temp[last_size] = 0x80;
 942              		.loc 1 173 0
 943 006e 03F8805C 		strb	r5, [r3, #-128]
 175:25519/sha512.c **** 	if (last_size > 111) {
 944              		.loc 1 175 0
 945 0072 D6D9     		bls	.L14
 176:25519/sha512.c **** 		sha512_block(s, temp);
 946              		.loc 1 176 0
 947 0074 5046     		mov	r0, r10
 948 0076 6946     		mov	r1, sp
 949 0078 FFF7FEFF 		bl	sha512_block
 950              	.LVL68:
 177:25519/sha512.c **** 		memset(temp, 0, sizeof(temp));
 951              		.loc 1 177 0
 952 007c 6846     		mov	r0, sp
 953 007e 2A46     		mov	r2, r5
 954 0080 0021     		movs	r1, #0
 955 0082 FFF7FEFF 		bl	memset
 956              	.LVL69:
 957 0086 CCE7     		b	.L14
 958              		.cfi_endproc
 959              	.LFE5:
 961              		.section	.text.sha512_get,"ax",%progbits
 962              		.align	2
 963              		.global	sha512_get
 964              		.thumb
 965              		.thumb_func
 967              	sha512_get:
 968              	.LFB6:
 184:25519/sha512.c **** 
 185:25519/sha512.c **** void sha512_get(const struct sha512_state *s, uint8_t *hash,
 186:25519/sha512.c **** 		unsigned int offset, unsigned int len)
 187:25519/sha512.c **** {
 969              		.loc 1 187 0
 970              		.cfi_startproc
 971              		@ args = 0, pretend = 0, frame = 104
 972              		@ frame_needed = 0, uses_anonymous_args = 0
 973              	.LVL70:
 974 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 975              		.cfi_def_cfa_offset 36
 976              		.cfi_offset 4, -36
 977              		.cfi_offset 5, -32
 978              		.cfi_offset 6, -28
 979              		.cfi_offset 7, -24
 980              		.cfi_offset 8, -20
 981              		.cfi_offset 9, -16
 982              		.cfi_offset 10, -12
 983              		.cfi_offset 11, -8
 984              		.cfi_offset 14, -4
 188:25519/sha512.c **** 	int i;
 189:25519/sha512.c **** 
 190:25519/sha512.c **** 	if (offset > SHA512_BLOCK_SIZE)
 985              		.loc 1 190 0
 986 0004 802A     		cmp	r2, #128
 187:25519/sha512.c **** {
 987              		.loc 1 187 0
 988 0006 9BB0     		sub	sp, sp, #108
 989              		.cfi_def_cfa_offset 144
 187:25519/sha512.c **** {
 990              		.loc 1 187 0
 991 0008 1490     		str	r0, [sp, #80]
 992 000a 0F91     		str	r1, [sp, #60]
 993              		.loc 1 190 0
 994 000c 7BD8     		bhi	.L17
 191:25519/sha512.c **** 		return;
 192:25519/sha512.c **** 
 193:25519/sha512.c **** 	if (len > SHA512_BLOCK_SIZE - offset)
 995              		.loc 1 193 0
 996 000e C2F18001 		rsb	r1, r2, #128
 997              	.LVL71:
 998 0012 9942     		cmp	r1, r3
 999 0014 28BF     		it	cs
 1000 0016 1946     		movcs	r1, r3
 194:25519/sha512.c **** 		len = SHA512_BLOCK_SIZE - offset;
 195:25519/sha512.c **** 
 196:25519/sha512.c **** 	/* Skip whole words */
 197:25519/sha512.c **** 	i = offset >> 3;
 1001              		.loc 1 197 0
 1002 0018 D008     		lsrs	r0, r2, #3
 1003              	.LVL72:
 198:25519/sha512.c **** 	offset &= 7;
 199:25519/sha512.c **** 
 200:25519/sha512.c **** 	/* Skip/read out bytes */
 201:25519/sha512.c **** 	if (offset) {
 1004              		.loc 1 201 0
 1005 001a 12F00702 		ands	r2, r2, #7
 1006              	.LVL73:
 1007 001e 0D91     		str	r1, [sp, #52]
 1008              	.LVL74:
 197:25519/sha512.c **** 	i = offset >> 3;
 1009              		.loc 1 197 0
 1010 0020 0E90     		str	r0, [sp, #56]
 1011              	.LVL75:
 1012              		.loc 1 201 0
 1013 0022 1592     		str	r2, [sp, #84]
 1014 0024 72D1     		bne	.L32
 1015              	.LVL76:
 1016              	.L20:
 202:25519/sha512.c **** 		uint8_t tmp[8];
 203:25519/sha512.c **** 		unsigned int c = 8 - offset;
 204:25519/sha512.c **** 
 205:25519/sha512.c **** 		if (c > len)
 206:25519/sha512.c **** 			c = len;
 207:25519/sha512.c **** 
 208:25519/sha512.c **** 		store64(tmp, s->h[i++]);
 209:25519/sha512.c **** 		memcpy(hash, tmp + offset, c);
 210:25519/sha512.c **** 		len -= c;
 211:25519/sha512.c **** 		hash += c;
 212:25519/sha512.c **** 	}
 213:25519/sha512.c **** 
 214:25519/sha512.c **** 	/* Read out whole words */
 215:25519/sha512.c **** 	while (len >= 8) {
 1017              		.loc 1 215 0 discriminator 1
 1018 0026 0D9D     		ldr	r5, [sp, #52]
 1019 0028 072D     		cmp	r5, #7
 1020 002a 69D9     		bls	.L21
 1021 002c A5F10803 		sub	r3, r5, #8
 1022 0030 DB08     		lsrs	r3, r3, #3
 1023 0032 0E98     		ldr	r0, [sp, #56]
 1024 0034 149C     		ldr	r4, [sp, #80]
 1025 0036 9C46     		mov	ip, r3
 1026 0038 8444     		add	ip, ip, r0
 1027 003a 0A93     		str	r3, [sp, #40]
 1028 003c 04F10803 		add	r3, r4, #8
 1029 0040 03EBCC0C 		add	ip, r3, ip, lsl #3
 1030 0044 04EBC000 		add	r0, r4, r0, lsl #3
 1031              		.loc 1 215 0 is_stmt 0
 1032 0048 0F99     		ldr	r1, [sp, #60]
 1033 004a CDF840C0 		str	ip, [sp, #64]
 1034 004e 1290     		str	r0, [sp, #72]
 1035              	.LVL77:
 1036              	.L23:
 216:25519/sha512.c **** 		store64(hash, s->h[i++]);
 1037              		.loc 1 216 0 is_stmt 1
 1038 0050 129C     		ldr	r4, [sp, #72]
 1039 0052 F4E80223 		ldrd	r2, [r4], #8
 1040 0056 CDE90623 		strd	r2, [sp, #24]
 1041              	.LVL78:
 1042              	.LBB153:
 1043              	.LBB154:
  79:25519/sha512.c **** 	v >>= 8;
 1044              		.loc 1 79 0
 1045 005a 069D     		ldr	r5, [sp, #24]
 1046 005c DDF81CC0 		ldr	ip, [sp, #28]
 1047 0060 2A0A     		lsrs	r2, r5, #8
 1048              	.LVL79:
 1049 0062 42EA0C62 		orr	r2, r2, ip, lsl #24
 1050 0066 4FEA1C23 		lsr	r3, ip, #8
 1051              	.LVL80:
  81:25519/sha512.c **** 	v >>= 8;
 1052              		.loc 1 81 0
 1053 006a 100A     		lsrs	r0, r2, #8
 1054              	.LBE154:
 1055              	.LBE153:
 1056              		.loc 1 216 0
 1057 006c 1294     		str	r4, [sp, #72]
 1058              	.LBB157:
 1059              	.LBB155:
  81:25519/sha512.c **** 	v >>= 8;
 1060              		.loc 1 81 0
 1061 006e 40EA0364 		orr	r4, r0, r3, lsl #24
 1062 0072 1D0A     		lsrs	r5, r3, #8
  83:25519/sha512.c **** 	v >>= 8;
 1063              		.loc 1 83 0
 1064 0074 4FEA142A 		lsr	r10, r4, #8
 1065 0078 4AEA056A 		orr	r10, r10, r5, lsl #24
  81:25519/sha512.c **** 	v >>= 8;
 1066              		.loc 1 81 0
 1067 007c 0494     		str	r4, [sp, #16]
  83:25519/sha512.c **** 	v >>= 8;
 1068              		.loc 1 83 0
 1069 007e 4FEA152B 		lsr	fp, r5, #8
  85:25519/sha512.c **** 	v >>= 8;
 1070              		.loc 1 85 0
 1071 0082 4FEA1A24 		lsr	r4, r10, #8
 1072 0086 44EA0B64 		orr	r4, r4, fp, lsl #24
  81:25519/sha512.c **** 	v >>= 8;
 1073              		.loc 1 81 0
 1074 008a 0595     		str	r5, [sp, #20]
 1075              	.LVL81:
  87:25519/sha512.c **** 	v >>= 8;
 1076              		.loc 1 87 0
 1077 008c 260A     		lsrs	r6, r4, #8
  85:25519/sha512.c **** 	v >>= 8;
 1078              		.loc 1 85 0
 1079 008e 4FEA1B25 		lsr	r5, fp, #8
 1080              	.LVL82:
  87:25519/sha512.c **** 	v >>= 8;
 1081              		.loc 1 87 0
 1082 0092 46EA0566 		orr	r6, r6, r5, lsl #24
 1083 0096 2F0A     		lsrs	r7, r5, #8
 1084              	.LVL83:
  89:25519/sha512.c **** 	v >>= 8;
 1085              		.loc 1 89 0
 1086 0098 4FEA1628 		lsr	r8, r6, #8
 1087 009c 48EA0768 		orr	r8, r8, r7, lsl #24
 1088 00a0 4FEA1729 		lsr	r9, r7, #8
 1089              	.LVL84:
  91:25519/sha512.c **** 	v >>= 8;
 1090              		.loc 1 91 0
 1091 00a4 4FEA1820 		lsr	r0, r8, #8
 1092 00a8 40EA096C 		orr	ip, r0, r9, lsl #24
 1093 00ac 4FEA1920 		lsr	r0, r9, #8
 1094 00b0 0990     		str	r0, [sp, #36]
  82:25519/sha512.c **** 	*(x--) = v;
 1095              		.loc 1 82 0
 1096 00b2 9DF81000 		ldrb	r0, [sp, #16]	@ zero_extendqisi2
  91:25519/sha512.c **** 	v >>= 8;
 1097              		.loc 1 91 0
 1098 00b6 CDF820C0 		str	ip, [sp, #32]
  82:25519/sha512.c **** 	*(x--) = v;
 1099              		.loc 1 82 0
 1100 00ba 4871     		strb	r0, [r1, #5]
  92:25519/sha512.c **** 	*(x--) = v;
 1101              		.loc 1 92 0
 1102 00bc 9DF820C0 		ldrb	ip, [sp, #32]	@ zero_extendqisi2
  78:25519/sha512.c **** 	*(x--) = v;
 1103              		.loc 1 78 0
 1104 00c0 9DF81800 		ldrb	r0, [sp, #24]	@ zero_extendqisi2
  90:25519/sha512.c **** 	*(x--) = v;
 1105              		.loc 1 90 0
 1106 00c4 81F80180 		strb	r8, [r1, #1]
 1107              	.LVL85:
  78:25519/sha512.c **** 	*(x--) = v;
 1108              		.loc 1 78 0
 1109 00c8 C871     		strb	r0, [r1, #7]
  88:25519/sha512.c **** 	*(x--) = v;
 1110              		.loc 1 88 0
 1111 00ca 8E70     		strb	r6, [r1, #2]
  86:25519/sha512.c **** 	*(x--) = v;
 1112              		.loc 1 86 0
 1113 00cc CC70     		strb	r4, [r1, #3]
  84:25519/sha512.c **** 	*(x--) = v;
 1114              		.loc 1 84 0
 1115 00ce 81F804A0 		strb	r10, [r1, #4]
  80:25519/sha512.c **** 	*(x--) = v;
 1116              		.loc 1 80 0
 1117 00d2 8A71     		strb	r2, [r1, #6]
 1118              	.LBE155:
 1119              	.LBE157:
 215:25519/sha512.c **** 	while (len >= 8) {
 1120              		.loc 1 215 0
 1121 00d4 1298     		ldr	r0, [sp, #72]
 1122              	.LBB158:
 1123              	.LBB156:
  92:25519/sha512.c **** 	*(x--) = v;
 1124              		.loc 1 92 0
 1125 00d6 01F808CB 		strb	ip, [r1], #8
 1126              	.LVL86:
 1127              	.LBE156:
 1128              	.LBE158:
 215:25519/sha512.c **** 	while (len >= 8) {
 1129              		.loc 1 215 0
 1130 00da DDF840C0 		ldr	ip, [sp, #64]
 1131 00de 6045     		cmp	r0, ip
 1132 00e0 B6D1     		bne	.L23
 1133 00e2 0E98     		ldr	r0, [sp, #56]
 1134 00e4 0A99     		ldr	r1, [sp, #40]
 1135              	.LVL87:
 1136 00e6 0F9C     		ldr	r4, [sp, #60]
 1137 00e8 0D9D     		ldr	r5, [sp, #52]
 1138 00ea 4B1C     		adds	r3, r1, #1
 1139 00ec 00F1010C 		add	ip, r0, #1
 1140 00f0 6144     		add	r1, r1, ip
 1141 00f2 04EBC304 		add	r4, r4, r3, lsl #3
 1142 00f6 05F00705 		and	r5, r5, #7
 1143 00fa 0E91     		str	r1, [sp, #56]
 1144 00fc 0F94     		str	r4, [sp, #60]
 1145 00fe 0D95     		str	r5, [sp, #52]
 1146              	.L21:
 217:25519/sha512.c **** 		hash += 8;
 218:25519/sha512.c **** 		len -= 8;
 219:25519/sha512.c **** 	}
 220:25519/sha512.c **** 
 221:25519/sha512.c **** 	/* Read out bytes */
 222:25519/sha512.c **** 	if (len) {
 1147              		.loc 1 222 0
 1148 0100 0D9B     		ldr	r3, [sp, #52]
 1149 0102 002B     		cmp	r3, #0
 1150 0104 73D1     		bne	.L33
 1151              	.L17:
 223:25519/sha512.c **** 		uint8_t tmp[8];
 224:25519/sha512.c **** 
 225:25519/sha512.c **** 		store64(tmp, s->h[i]);
 226:25519/sha512.c **** 		memcpy(hash, tmp, len);
 227:25519/sha512.c **** 	}
 228:25519/sha512.c **** }
 1152              		.loc 1 228 0
 1153 0106 1BB0     		add	sp, sp, #108
 1154              		@ sp needed
 1155 0108 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1156              	.LVL88:
 1157              	.L32:
 1158              	.LBB159:
 208:25519/sha512.c **** 		store64(tmp, s->h[i++]);
 1159              		.loc 1 208 0
 1160 010c 149C     		ldr	r4, [sp, #80]
 1161 010e 04EBC003 		add	r3, r4, r0, lsl #3
 1162 0112 D3E90023 		ldrd	r2, [r3]
 1163              	.LBB160:
 1164              	.LBB161:
  79:25519/sha512.c **** 	v >>= 8;
 1165              		.loc 1 79 0
 1166 0116 140A     		lsrs	r4, r2, #8
 1167 0118 44EA0364 		orr	r4, r4, r3, lsl #24
 1168 011c 1D0A     		lsrs	r5, r3, #8
  81:25519/sha512.c **** 	v >>= 8;
 1169              		.loc 1 81 0
 1170 011e 210A     		lsrs	r1, r4, #8
 1171              	.LVL89:
 1172 0120 41EA056C 		orr	ip, r1, r5, lsl #24
 1173 0124 4FEA152E 		lsr	lr, r5, #8
  83:25519/sha512.c **** 	v >>= 8;
 1174              		.loc 1 83 0
 1175 0128 4FEA1C21 		lsr	r1, ip, #8
  81:25519/sha512.c **** 	v >>= 8;
 1176              		.loc 1 81 0
 1177 012c CDF828C0 		str	ip, [sp, #40]
  83:25519/sha512.c **** 	v >>= 8;
 1178              		.loc 1 83 0
 1179 0130 41EA0E6C 		orr	ip, r1, lr, lsl #24
  81:25519/sha512.c **** 	v >>= 8;
 1180              		.loc 1 81 0
 1181 0134 CDF82CE0 		str	lr, [sp, #44]
  85:25519/sha512.c **** 	v >>= 8;
 1182              		.loc 1 85 0
 1183 0138 4FEA1C21 		lsr	r1, ip, #8
  83:25519/sha512.c **** 	v >>= 8;
 1184              		.loc 1 83 0
 1185 013c 4FEA1E2E 		lsr	lr, lr, #8
 1186 0140 CDF840C0 		str	ip, [sp, #64]
  85:25519/sha512.c **** 	v >>= 8;
 1187              		.loc 1 85 0
 1188 0144 41EA0E6C 		orr	ip, r1, lr, lsl #24
  83:25519/sha512.c **** 	v >>= 8;
 1189              		.loc 1 83 0
 1190 0148 CDF844E0 		str	lr, [sp, #68]
  87:25519/sha512.c **** 	v >>= 8;
 1191              		.loc 1 87 0
 1192 014c 4FEA1C20 		lsr	r0, ip, #8
  85:25519/sha512.c **** 	v >>= 8;
 1193              		.loc 1 85 0
 1194 0150 4FEA1E2E 		lsr	lr, lr, #8
  87:25519/sha512.c **** 	v >>= 8;
 1195              		.loc 1 87 0
 1196 0154 40EA0E60 		orr	r0, r0, lr, lsl #24
 1197 0158 4FEA1E21 		lsr	r1, lr, #8
  78:25519/sha512.c **** 	*(x--) = v;
 1198              		.loc 1 78 0
 1199 015c 8DF86720 		strb	r2, [sp, #103]
  89:25519/sha512.c **** 	v >>= 8;
 1200              		.loc 1 89 0
 1201 0160 020A     		lsrs	r2, r0, #8
 1202 0162 42EA0162 		orr	r2, r2, r1, lsl #24
 1203 0166 0B0A     		lsrs	r3, r1, #8
  85:25519/sha512.c **** 	v >>= 8;
 1204              		.loc 1 85 0
 1205 0168 CDF848C0 		str	ip, [sp, #72]
  91:25519/sha512.c **** 	v >>= 8;
 1206              		.loc 1 91 0
 1207 016c 150A     		lsrs	r5, r2, #8
 1208 016e 45EA036C 		orr	ip, r5, r3, lsl #24
  80:25519/sha512.c **** 	*(x--) = v;
 1209              		.loc 1 80 0
 1210 0172 8DF86640 		strb	r4, [sp, #102]
  86:25519/sha512.c **** 	*(x--) = v;
 1211              		.loc 1 86 0
 1212 0176 9DF84850 		ldrb	r5, [sp, #72]	@ zero_extendqisi2
  84:25519/sha512.c **** 	*(x--) = v;
 1213              		.loc 1 84 0
 1214 017a 9DF84040 		ldrb	r4, [sp, #64]	@ zero_extendqisi2
  91:25519/sha512.c **** 	v >>= 8;
 1215              		.loc 1 91 0
 1216 017e CDF818C0 		str	ip, [sp, #24]
  85:25519/sha512.c **** 	v >>= 8;
 1217              		.loc 1 85 0
 1218 0182 CDF84CE0 		str	lr, [sp, #76]
 1219              	.LBE161:
 1220              	.LBE160:
 203:25519/sha512.c **** 		unsigned int c = 8 - offset;
 1221              		.loc 1 203 0
 1222 0186 DDF854C0 		ldr	ip, [sp, #84]
 1223              	.LBB166:
 1224              	.LBB162:
  82:25519/sha512.c **** 	*(x--) = v;
 1225              		.loc 1 82 0
 1226 018a 9DF828E0 		ldrb	lr, [sp, #40]	@ zero_extendqisi2
  84:25519/sha512.c **** 	*(x--) = v;
 1227              		.loc 1 84 0
 1228 018e 8DF86440 		strb	r4, [sp, #100]
  86:25519/sha512.c **** 	*(x--) = v;
 1229              		.loc 1 86 0
 1230 0192 8DF86350 		strb	r5, [sp, #99]
 1231 0196 0D9C     		ldr	r4, [sp, #52]
  92:25519/sha512.c **** 	*(x--) = v;
 1232              		.loc 1 92 0
 1233 0198 9DF81850 		ldrb	r5, [sp, #24]	@ zero_extendqisi2
  82:25519/sha512.c **** 	*(x--) = v;
 1234              		.loc 1 82 0
 1235 019c 8DF865E0 		strb	lr, [sp, #101]
  88:25519/sha512.c **** 	*(x--) = v;
 1236              		.loc 1 88 0
 1237 01a0 8DF86200 		strb	r0, [sp, #98]
  91:25519/sha512.c **** 	v >>= 8;
 1238              		.loc 1 91 0
 1239 01a4 4FEA132E 		lsr	lr, r3, #8
  90:25519/sha512.c **** 	*(x--) = v;
 1240              		.loc 1 90 0
 1241 01a8 8DF86120 		strb	r2, [sp, #97]
 1242              	.LBE162:
 1243              	.LBE166:
 208:25519/sha512.c **** 		store64(tmp, s->h[i++]);
 1244              		.loc 1 208 0
 1245 01ac 0E98     		ldr	r0, [sp, #56]
 209:25519/sha512.c **** 		memcpy(hash, tmp + offset, c);
 1246              		.loc 1 209 0
 1247 01ae 159A     		ldr	r2, [sp, #84]
 1248              	.LBB167:
 1249              	.LBB163:
  92:25519/sha512.c **** 	*(x--) = v;
 1250              		.loc 1 92 0
 1251 01b0 1AA9     		add	r1, sp, #104
 1252              	.LBE163:
 1253              	.LBE167:
 203:25519/sha512.c **** 		unsigned int c = 8 - offset;
 1254              		.loc 1 203 0
 1255 01b2 CCF10803 		rsb	r3, ip, #8
 1256 01b6 9C42     		cmp	r4, r3
 1257 01b8 38BF     		it	cc
 1258 01ba 2346     		movcc	r3, r4
 1259              	.LBB168:
 1260              	.LBB164:
  92:25519/sha512.c **** 	*(x--) = v;
 1261              		.loc 1 92 0
 1262 01bc 01F8085D 		strb	r5, [r1, #-8]!
 1263              	.LBE164:
 1264              	.LBE168:
 208:25519/sha512.c **** 		store64(tmp, s->h[i++]);
 1265              		.loc 1 208 0
 1266 01c0 00F1010C 		add	ip, r0, #1
 210:25519/sha512.c **** 		len -= c;
 1267              		.loc 1 210 0
 1268 01c4 E41A     		subs	r4, r4, r3
 209:25519/sha512.c **** 		memcpy(hash, tmp + offset, c);
 1269              		.loc 1 209 0
 1270 01c6 1144     		add	r1, r1, r2
 1271 01c8 0F98     		ldr	r0, [sp, #60]
 1272 01ca 1A46     		mov	r2, r3
 210:25519/sha512.c **** 		len -= c;
 1273              		.loc 1 210 0
 1274 01cc 0D94     		str	r4, [sp, #52]
 1275              	.LVL90:
 209:25519/sha512.c **** 		memcpy(hash, tmp + offset, c);
 1276              		.loc 1 209 0
 1277 01ce 0293     		str	r3, [sp, #8]
 1278 01d0 CDF80CC0 		str	ip, [sp, #12]
 1279              	.LBB169:
 1280              	.LBB165:
  91:25519/sha512.c **** 	v >>= 8;
 1281              		.loc 1 91 0
 1282 01d4 CDF81CE0 		str	lr, [sp, #28]
 1283              	.LVL91:
 1284              	.LBE165:
 1285              	.LBE169:
 209:25519/sha512.c **** 		memcpy(hash, tmp + offset, c);
 1286              		.loc 1 209 0
 1287 01d8 FFF7FEFF 		bl	memcpy
 1288              	.LVL92:
 211:25519/sha512.c **** 		hash += c;
 1289              		.loc 1 211 0
 1290 01dc 0F9C     		ldr	r4, [sp, #60]
 1291 01de 029B     		ldr	r3, [sp, #8]
 208:25519/sha512.c **** 		store64(tmp, s->h[i++]);
 1292              		.loc 1 208 0
 1293 01e0 DDF80CC0 		ldr	ip, [sp, #12]
 211:25519/sha512.c **** 		hash += c;
 1294              		.loc 1 211 0
 1295 01e4 1C44     		add	r4, r4, r3
 1296 01e6 0F94     		str	r4, [sp, #60]
 1297              	.LVL93:
 208:25519/sha512.c **** 		store64(tmp, s->h[i++]);
 1298              		.loc 1 208 0
 1299 01e8 CDF838C0 		str	ip, [sp, #56]
 1300              	.LVL94:
 1301 01ec 1BE7     		b	.L20
 1302              	.LVL95:
 1303              	.L33:
 1304              	.LBE159:
 1305              	.LBB170:
 225:25519/sha512.c **** 		store64(tmp, s->h[i]);
 1306              		.loc 1 225 0
 1307 01ee 149C     		ldr	r4, [sp, #80]
 1308 01f0 0E9D     		ldr	r5, [sp, #56]
 1309 01f2 04EBC50C 		add	ip, r4, r5, lsl #3
 1310 01f6 DCE90001 		ldrd	r0, [ip]
 1311 01fa CDE90401 		strd	r0, [sp, #16]
 1312              	.LVL96:
 1313              	.LBB171:
 1314              	.LBB172:
  79:25519/sha512.c **** 	v >>= 8;
 1315              		.loc 1 79 0
 1316 01fe 4FEA102A 		lsr	r10, r0, #8
 1317 0202 4AEA016A 		orr	r10, r10, r1, lsl #24
 1318 0206 0599     		ldr	r1, [sp, #20]
  81:25519/sha512.c **** 	v >>= 8;
 1319              		.loc 1 81 0
 1320 0208 4FEA1A28 		lsr	r8, r10, #8
  79:25519/sha512.c **** 	v >>= 8;
 1321              		.loc 1 79 0
 1322 020c 4FEA112B 		lsr	fp, r1, #8
 1323              	.LVL97:
  81:25519/sha512.c **** 	v >>= 8;
 1324              		.loc 1 81 0
 1325 0210 48EA0B68 		orr	r8, r8, fp, lsl #24
 1326 0214 4FEA1B29 		lsr	r9, fp, #8
 1327              	.LVL98:
  83:25519/sha512.c **** 	v >>= 8;
 1328              		.loc 1 83 0
 1329 0218 4FEA1826 		lsr	r6, r8, #8
 1330 021c 46EA0966 		orr	r6, r6, r9, lsl #24
 1331 0220 4FEA1927 		lsr	r7, r9, #8
 1332              	.LVL99:
  85:25519/sha512.c **** 	v >>= 8;
 1333              		.loc 1 85 0
 1334 0224 340A     		lsrs	r4, r6, #8
 1335 0226 44EA0764 		orr	r4, r4, r7, lsl #24
 1336 022a 3D0A     		lsrs	r5, r7, #8
 1337              	.LVL100:
  87:25519/sha512.c **** 	v >>= 8;
 1338              		.loc 1 87 0
 1339 022c 200A     		lsrs	r0, r4, #8
 1340 022e 40EA0560 		orr	r0, r0, r5, lsl #24
 1341 0232 290A     		lsrs	r1, r5, #8
 1342              	.LVL101:
  89:25519/sha512.c **** 	v >>= 8;
 1343              		.loc 1 89 0
 1344 0234 030A     		lsrs	r3, r0, #8
 1345 0236 43EA016C 		orr	ip, r3, r1, lsl #24
 1346 023a 4FEA112E 		lsr	lr, r1, #8
  91:25519/sha512.c **** 	v >>= 8;
 1347              		.loc 1 91 0
 1348 023e 4FEA1C23 		lsr	r3, ip, #8
  78:25519/sha512.c **** 	*(x--) = v;
 1349              		.loc 1 78 0
 1350 0242 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
  89:25519/sha512.c **** 	v >>= 8;
 1351              		.loc 1 89 0
 1352 0246 CDF818C0 		str	ip, [sp, #24]
  91:25519/sha512.c **** 	v >>= 8;
 1353              		.loc 1 91 0
 1354 024a 43EA0E6C 		orr	ip, r3, lr, lsl #24
 1355 024e CDF810C0 		str	ip, [sp, #16]
  78:25519/sha512.c **** 	*(x--) = v;
 1356              		.loc 1 78 0
 1357 0252 8DF86720 		strb	r2, [sp, #103]
  88:25519/sha512.c **** 	*(x--) = v;
 1358              		.loc 1 88 0
 1359 0256 8DF86200 		strb	r0, [sp, #98]
  92:25519/sha512.c **** 	*(x--) = v;
 1360              		.loc 1 92 0
 1361 025a 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
  90:25519/sha512.c **** 	*(x--) = v;
 1362              		.loc 1 90 0
 1363 025e 9DF81800 		ldrb	r0, [sp, #24]	@ zero_extendqisi2
 1364              	.LVL102:
  92:25519/sha512.c **** 	*(x--) = v;
 1365              		.loc 1 92 0
 1366 0262 1AA9     		add	r1, sp, #104
  90:25519/sha512.c **** 	*(x--) = v;
 1367              		.loc 1 90 0
 1368 0264 8DF86100 		strb	r0, [sp, #97]
  89:25519/sha512.c **** 	v >>= 8;
 1369              		.loc 1 89 0
 1370 0268 CDF81CE0 		str	lr, [sp, #28]
 1371              	.LVL103:
  80:25519/sha512.c **** 	*(x--) = v;
 1372              		.loc 1 80 0
 1373 026c 8DF866A0 		strb	r10, [sp, #102]
  91:25519/sha512.c **** 	v >>= 8;
 1374              		.loc 1 91 0
 1375 0270 4FEA1E2E 		lsr	lr, lr, #8
  82:25519/sha512.c **** 	*(x--) = v;
 1376              		.loc 1 82 0
 1377 0274 8DF86580 		strb	r8, [sp, #101]
  84:25519/sha512.c **** 	*(x--) = v;
 1378              		.loc 1 84 0
 1379 0278 8DF86460 		strb	r6, [sp, #100]
  86:25519/sha512.c **** 	*(x--) = v;
 1380              		.loc 1 86 0
 1381 027c 8DF86340 		strb	r4, [sp, #99]
 1382              	.LBE172:
 1383              	.LBE171:
 226:25519/sha512.c **** 		memcpy(hash, tmp, len);
 1384              		.loc 1 226 0
 1385 0280 0F98     		ldr	r0, [sp, #60]
 1386              	.LBB175:
 1387              	.LBB173:
  92:25519/sha512.c **** 	*(x--) = v;
 1388              		.loc 1 92 0
 1389 0282 01F8082D 		strb	r2, [r1, #-8]!
 1390              	.LBE173:
 1391              	.LBE175:
 226:25519/sha512.c **** 		memcpy(hash, tmp, len);
 1392              		.loc 1 226 0
 1393 0286 0D9A     		ldr	r2, [sp, #52]
 1394              	.LBB176:
 1395              	.LBB174:
  91:25519/sha512.c **** 	v >>= 8;
 1396              		.loc 1 91 0
 1397 0288 CDF814E0 		str	lr, [sp, #20]
 1398              	.LBE174:
 1399              	.LBE176:
 226:25519/sha512.c **** 		memcpy(hash, tmp, len);
 1400              		.loc 1 226 0
 1401 028c FFF7FEFF 		bl	memcpy
 1402              	.LVL104:
 1403              	.LBE170:
 1404              		.loc 1 228 0
 1405 0290 1BB0     		add	sp, sp, #108
 1406              		@ sp needed
 1407 0292 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1408              		.cfi_endproc
 1409              	.LFE6:
 1411              		.global	sha512_initial_state
 1412 0296 00BF     		.section	.rodata.sha512_initial_state,"a",%progbits
 1413              		.align	3
 1416              	sha512_initial_state:
 1417 0000 08C9BCF3 		.word	-205731576
 1418 0004 67E6096A 		.word	1779033703
 1419 0008 3BA7CA84 		.word	-2067093701
 1420 000c 85AE67BB 		.word	-1150833019
 1421 0010 2BF894FE 		.word	-23791573
 1422 0014 72F36E3C 		.word	1013904242
 1423 0018 F1361D5F 		.word	1595750129
 1424 001c 3AF54FA5 		.word	-1521486534
 1425 0020 D182E6AD 		.word	-1377402159
 1426 0024 7F520E51 		.word	1359893119
 1427 0028 1F6C3E2B 		.word	725511199
 1428 002c 8C68059B 		.word	-1694144372
 1429 0030 6BBD41FB 		.word	-79577749
 1430 0034 ABD9831F 		.word	528734635
 1431 0038 79217E13 		.word	327033209
 1432 003c 19CDE05B 		.word	1541459225
 1433              		.section	.rodata.round_k,"a",%progbits
 1434              		.align	3
 1435              		.set	.LANCHOR0,. + 0
 1438              	round_k:
 1439 0000 22AE28D7 		.word	-685199838
 1440 0004 982F8A42 		.word	1116352408
 1441 0008 CD65EF23 		.word	602891725
 1442 000c 91443771 		.word	1899447441
 1443 0010 2F3B4DEC 		.word	-330482897
 1444 0014 CFFBC0B5 		.word	-1245643825
 1445 0018 BCDB8981 		.word	-2121671748
 1446 001c A5DBB5E9 		.word	-373957723
 1447 0020 38B548F3 		.word	-213338824
 1448 0024 5BC25639 		.word	961987163
 1449 0028 19D005B6 		.word	-1241133031
 1450 002c F111F159 		.word	1508970993
 1451 0030 9B4F19AF 		.word	-1357295717
 1452 0034 A4823F92 		.word	-1841331548
 1453 0038 18816DDA 		.word	-630357736
 1454 003c D55E1CAB 		.word	-1424204075
 1455 0040 420203A3 		.word	-1560083902
 1456 0044 98AA07D8 		.word	-670586216
 1457 0048 BE6F7045 		.word	1164996542
 1458 004c 015B8312 		.word	310598401
 1459 0050 8CB2E44E 		.word	1323610764
 1460 0054 BE853124 		.word	607225278
 1461 0058 E2B4FFD5 		.word	-704662302
 1462 005c C37D0C55 		.word	1426881987
 1463 0060 6F897BF2 		.word	-226784913
 1464 0064 745DBE72 		.word	1925078388
 1465 0068 B196163B 		.word	991336113
 1466 006c FEB1DE80 		.word	-2132889090
 1467 0070 3512C725 		.word	633803317
 1468 0074 A706DC9B 		.word	-1680079193
 1469 0078 942669CF 		.word	-815192428
 1470 007c 74F19BC1 		.word	-1046744716
 1471 0080 D24AF19E 		.word	-1628353838
 1472 0084 C1699BE4 		.word	-459576895
 1473 0088 E3254F38 		.word	944711139
 1474 008c 8647BEEF 		.word	-272742522
 1475 0090 B5D58C8B 		.word	-1953704523
 1476 0094 C69DC10F 		.word	264347078
 1477 0098 659CAC77 		.word	2007800933
 1478 009c CCA10C24 		.word	604807628
 1479 00a0 75022B59 		.word	1495990901
 1480 00a4 6F2CE92D 		.word	770255983
 1481 00a8 83E4A66E 		.word	1856431235
 1482 00ac AA84744A 		.word	1249150122
 1483 00b0 D4FB41BD 		.word	-1119749164
 1484 00b4 DCA9B05C 		.word	1555081692
 1485 00b8 B5531183 		.word	-2096016459
 1486 00bc DA88F976 		.word	1996064986
 1487 00c0 ABDF66EE 		.word	-295247957
 1488 00c4 52513E98 		.word	-1740746414
 1489 00c8 1032B42D 		.word	766784016
 1490 00cc 6DC631A8 		.word	-1473132947
 1491 00d0 3F21FB98 		.word	-1728372417
 1492 00d4 C82703B0 		.word	-1341970488
 1493 00d8 E40EEFBE 		.word	-1091629340
 1494 00dc C77F59BF 		.word	-1084653625
 1495 00e0 C28FA83D 		.word	1034457026
 1496 00e4 F30BE0C6 		.word	-958395405
 1497 00e8 25A70A93 		.word	-1828018395
 1498 00ec 4791A7D5 		.word	-710438585
 1499 00f0 6F8203E0 		.word	-536640913
 1500 00f4 5163CA06 		.word	113926993
 1501 00f8 706E0E0A 		.word	168717936
 1502 00fc 67292914 		.word	338241895
 1503 0100 FC2FD246 		.word	1188179964
 1504 0104 850AB727 		.word	666307205
 1505 0108 26C9265C 		.word	1546045734
 1506 010c 38211B2E 		.word	773529912
 1507 0110 ED2AC45A 		.word	1522805485
 1508 0114 FC6D2C4D 		.word	1294757372
 1509 0118 DFB3959D 		.word	-1651133473
 1510 011c 130D3853 		.word	1396182291
 1511 0120 DE63AF8B 		.word	-1951439906
 1512 0124 54730A65 		.word	1695183700
 1513 0128 A8B2773C 		.word	1014477480
 1514 012c BB0A6A76 		.word	1986661051
 1515 0130 E6AEED47 		.word	1206759142
 1516 0134 2EC9C281 		.word	-2117940946
 1517 0138 3B358214 		.word	344077627
 1518 013c 852C7292 		.word	-1838011259
 1519 0140 6403F14C 		.word	1290863460
 1520 0144 A1E8BFA2 		.word	-1564481375
 1521 0148 013042BC 		.word	-1136513023
 1522 014c 4B661AA8 		.word	-1474664885
 1523 0150 9197F8D0 		.word	-789014639
 1524 0154 708B4BC2 		.word	-1035236496
 1525 0158 30BE5406 		.word	106217008
 1526 015c A3516CC7 		.word	-949202525
 1527 0160 1852EFD6 		.word	-688958952
 1528 0164 19E892D1 		.word	-778901479
 1529 0168 10A96555 		.word	1432725776
 1530 016c 240699D6 		.word	-694614492
 1531 0170 2A207157 		.word	1467031594
 1532 0174 85350EF4 		.word	-200395387
 1533 0178 B8D1BB32 		.word	851169720
 1534 017c 70A06A10 		.word	275423344
 1535 0180 C8D0D2B8 		.word	-1194143544
 1536 0184 16C1A419 		.word	430227734
 1537 0188 53AB4151 		.word	1363258195
 1538 018c 086C371E 		.word	506948616
 1539 0190 99EB8EDF 		.word	-544281703
 1540 0194 4C774827 		.word	659060556
 1541 0198 A8489BE1 		.word	-509917016
 1542 019c B5BCB034 		.word	883997877
 1543 01a0 635AC9C5 		.word	-976659869
 1544 01a4 B30C1C39 		.word	958139571
 1545 01a8 CB8A41E3 		.word	-482243893
 1546 01ac 4AAAD84E 		.word	1322822218
 1547 01b0 73E36377 		.word	2003034995
 1548 01b4 4FCA9C5B 		.word	1537002063
 1549 01b8 A3B8B2D6 		.word	-692930397
 1550 01bc F36F2E68 		.word	1747873779
 1551 01c0 FCB2EF5D 		.word	1575990012
 1552 01c4 EE828F74 		.word	1955562222
 1553 01c8 602F1743 		.word	1125592928
 1554 01cc 6F63A578 		.word	2024104815
 1555 01d0 72ABF0A1 		.word	-1578062990
 1556 01d4 1478C884 		.word	-2067236844
 1557 01d8 EC39641A 		.word	442776044
 1558 01dc 0802C78C 		.word	-1933114872
 1559 01e0 281E6323 		.word	593698344
 1560 01e4 FAFFBE90 		.word	-1866530822
 1561 01e8 E9BD82DE 		.word	-561857047
 1562 01ec EB6C50A4 		.word	-1538233109
 1563 01f0 1579C6B2 		.word	-1295615723
 1564 01f4 F7A3F9BE 		.word	-1090935817
 1565 01f8 2B5372E3 		.word	-479046869
 1566 01fc F27871C6 		.word	-965641998
 1567 0200 9C6126EA 		.word	-366583396
 1568 0204 CE3E27CA 		.word	-903397682
 1569 0208 07C2C021 		.word	566280711
 1570 020c C7B886D1 		.word	-779700025
 1571 0210 1EEBE0CD 		.word	-840897762
 1572 0214 D67DDAEA 		.word	-354779690
 1573 0218 78D16EEE 		.word	-294727304
 1574 021c 7F4F7DF5 		.word	-176337025
 1575 0220 BA6F1772 		.word	1914138554
 1576 0224 AA67F006 		.word	116418474
 1577 0228 A698C8A2 		.word	-1563912026
 1578 022c C57D630A 		.word	174292421
 1579 0230 AE0DF9BE 		.word	-1090974290
 1580 0234 04983F11 		.word	289380356
 1581 0238 1B471C13 		.word	320620315
 1582 023c 350B711B 		.word	460393269
 1583 0240 847D0423 		.word	587496836
 1584 0244 F577DB28 		.word	685471733
 1585 0248 9324C740 		.word	1086792851
 1586 024c 7BABCA32 		.word	852142971
 1587 0250 BCBEC915 		.word	365543100
 1588 0254 0ABE9E3C 		.word	1017036298
 1589 0258 4C0D109C 		.word	-1676669620
 1590 025c C4671D43 		.word	1126000580
 1591 0260 B6423ECB 		.word	-885112138
 1592 0264 BED4C54C 		.word	1288033470
 1593 0268 2A7E65FC 		.word	-60457430
 1594 026c 9C297F59 		.word	1501505948
 1595 0270 ECFAD63A 		.word	987167468
 1596 0274 AB6FCB5F 		.word	1607167915
 1597 0278 1758474A 		.word	1246189591
 1598 027c 8C19446C 		.word	1816402316
 1599              		.text
 1600              	.Letext0:
 1601              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q3\\arm-none-eabi\\include\\mach
 1602              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q3\\arm-none-eabi\\include\\stdi
 1603              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q3\\lib\\gcc\\arm-none-eabi\\4.8
 1604              		.file 5 "25519/sha512.h"
DEFINED SYMBOLS
                            *ABS*:00000000 sha512.c
C:\Users\haifisch\AppData\Local\Temp\ccLkRVNB.s:19     .text.sha512_block:00000000 $t
C:\Users\haifisch\AppData\Local\Temp\ccLkRVNB.s:24     .text.sha512_block:00000000 sha512_block
C:\Users\haifisch\AppData\Local\Temp\ccLkRVNB.s:824    .text.sha512_block:00000490 $d
C:\Users\haifisch\AppData\Local\Temp\ccLkRVNB.s:829    .text.sha512_final:00000000 $t
C:\Users\haifisch\AppData\Local\Temp\ccLkRVNB.s:834    .text.sha512_final:00000000 sha512_final
C:\Users\haifisch\AppData\Local\Temp\ccLkRVNB.s:962    .text.sha512_get:00000000 $t
C:\Users\haifisch\AppData\Local\Temp\ccLkRVNB.s:967    .text.sha512_get:00000000 sha512_get
C:\Users\haifisch\AppData\Local\Temp\ccLkRVNB.s:1416   .rodata.sha512_initial_state:00000000 sha512_initial_state
C:\Users\haifisch\AppData\Local\Temp\ccLkRVNB.s:1413   .rodata.sha512_initial_state:00000000 $d
C:\Users\haifisch\AppData\Local\Temp\ccLkRVNB.s:1434   .rodata.round_k:00000000 $d
C:\Users\haifisch\AppData\Local\Temp\ccLkRVNB.s:1438   .rodata.round_k:00000000 round_k
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memset
memcpy
