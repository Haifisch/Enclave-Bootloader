   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"sha512.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.store64,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	store64:
  23              	.LFB2:
  24              		.file 1 "25519/sha512.c"
   1:25519/sha512.c **** /* SHA512
   2:25519/sha512.c ****  * Daniel Beer <dlbeer@gmail.com>, 22 Apr 2014
   3:25519/sha512.c ****  *
   4:25519/sha512.c ****  * This file is in the public domain.
   5:25519/sha512.c ****  */
   6:25519/sha512.c **** 
   7:25519/sha512.c **** #include "sha512.h"
   8:25519/sha512.c **** 
   9:25519/sha512.c **** const struct sha512_state sha512_initial_state = { {
  10:25519/sha512.c **** 	0x6a09e667f3bcc908LL, 0xbb67ae8584caa73bLL,
  11:25519/sha512.c **** 	0x3c6ef372fe94f82bLL, 0xa54ff53a5f1d36f1LL,
  12:25519/sha512.c **** 	0x510e527fade682d1LL, 0x9b05688c2b3e6c1fLL,
  13:25519/sha512.c **** 	0x1f83d9abfb41bd6bLL, 0x5be0cd19137e2179LL,
  14:25519/sha512.c **** } };
  15:25519/sha512.c **** 
  16:25519/sha512.c **** static const uint64_t round_k[80] = {
  17:25519/sha512.c **** 	0x428a2f98d728ae22LL, 0x7137449123ef65cdLL,
  18:25519/sha512.c **** 	0xb5c0fbcfec4d3b2fLL, 0xe9b5dba58189dbbcLL,
  19:25519/sha512.c **** 	0x3956c25bf348b538LL, 0x59f111f1b605d019LL,
  20:25519/sha512.c **** 	0x923f82a4af194f9bLL, 0xab1c5ed5da6d8118LL,
  21:25519/sha512.c **** 	0xd807aa98a3030242LL, 0x12835b0145706fbeLL,
  22:25519/sha512.c **** 	0x243185be4ee4b28cLL, 0x550c7dc3d5ffb4e2LL,
  23:25519/sha512.c **** 	0x72be5d74f27b896fLL, 0x80deb1fe3b1696b1LL,
  24:25519/sha512.c **** 	0x9bdc06a725c71235LL, 0xc19bf174cf692694LL,
  25:25519/sha512.c **** 	0xe49b69c19ef14ad2LL, 0xefbe4786384f25e3LL,
  26:25519/sha512.c **** 	0x0fc19dc68b8cd5b5LL, 0x240ca1cc77ac9c65LL,
  27:25519/sha512.c **** 	0x2de92c6f592b0275LL, 0x4a7484aa6ea6e483LL,
  28:25519/sha512.c **** 	0x5cb0a9dcbd41fbd4LL, 0x76f988da831153b5LL,
  29:25519/sha512.c **** 	0x983e5152ee66dfabLL, 0xa831c66d2db43210LL,
  30:25519/sha512.c **** 	0xb00327c898fb213fLL, 0xbf597fc7beef0ee4LL,
  31:25519/sha512.c **** 	0xc6e00bf33da88fc2LL, 0xd5a79147930aa725LL,
  32:25519/sha512.c **** 	0x06ca6351e003826fLL, 0x142929670a0e6e70LL,
  33:25519/sha512.c **** 	0x27b70a8546d22ffcLL, 0x2e1b21385c26c926LL,
  34:25519/sha512.c **** 	0x4d2c6dfc5ac42aedLL, 0x53380d139d95b3dfLL,
  35:25519/sha512.c **** 	0x650a73548baf63deLL, 0x766a0abb3c77b2a8LL,
  36:25519/sha512.c **** 	0x81c2c92e47edaee6LL, 0x92722c851482353bLL,
  37:25519/sha512.c **** 	0xa2bfe8a14cf10364LL, 0xa81a664bbc423001LL,
  38:25519/sha512.c **** 	0xc24b8b70d0f89791LL, 0xc76c51a30654be30LL,
  39:25519/sha512.c **** 	0xd192e819d6ef5218LL, 0xd69906245565a910LL,
  40:25519/sha512.c **** 	0xf40e35855771202aLL, 0x106aa07032bbd1b8LL,
  41:25519/sha512.c **** 	0x19a4c116b8d2d0c8LL, 0x1e376c085141ab53LL,
  42:25519/sha512.c **** 	0x2748774cdf8eeb99LL, 0x34b0bcb5e19b48a8LL,
  43:25519/sha512.c **** 	0x391c0cb3c5c95a63LL, 0x4ed8aa4ae3418acbLL,
  44:25519/sha512.c **** 	0x5b9cca4f7763e373LL, 0x682e6ff3d6b2b8a3LL,
  45:25519/sha512.c **** 	0x748f82ee5defb2fcLL, 0x78a5636f43172f60LL,
  46:25519/sha512.c **** 	0x84c87814a1f0ab72LL, 0x8cc702081a6439ecLL,
  47:25519/sha512.c **** 	0x90befffa23631e28LL, 0xa4506cebde82bde9LL,
  48:25519/sha512.c **** 	0xbef9a3f7b2c67915LL, 0xc67178f2e372532bLL,
  49:25519/sha512.c **** 	0xca273eceea26619cLL, 0xd186b8c721c0c207LL,
  50:25519/sha512.c **** 	0xeada7dd6cde0eb1eLL, 0xf57d4f7fee6ed178LL,
  51:25519/sha512.c **** 	0x06f067aa72176fbaLL, 0x0a637dc5a2c898a6LL,
  52:25519/sha512.c **** 	0x113f9804bef90daeLL, 0x1b710b35131c471bLL,
  53:25519/sha512.c **** 	0x28db77f523047d84LL, 0x32caab7b40c72493LL,
  54:25519/sha512.c **** 	0x3c9ebe0a15c9bebcLL, 0x431d67c49c100d4cLL,
  55:25519/sha512.c **** 	0x4cc5d4becb3e42b6LL, 0x597f299cfc657e2aLL,
  56:25519/sha512.c **** 	0x5fcb6fab3ad6faecLL, 0x6c44198c4a475817LL,
  57:25519/sha512.c **** };
  58:25519/sha512.c **** 
  59:25519/sha512.c **** static inline uint64_t load64(const uint8_t *x)
  60:25519/sha512.c **** {
  61:25519/sha512.c **** 	uint64_t r;
  62:25519/sha512.c **** 
  63:25519/sha512.c **** 	r = *(x++);
  64:25519/sha512.c **** 	r = (r << 8) | *(x++);
  65:25519/sha512.c **** 	r = (r << 8) | *(x++);
  66:25519/sha512.c **** 	r = (r << 8) | *(x++);
  67:25519/sha512.c **** 	r = (r << 8) | *(x++);
  68:25519/sha512.c **** 	r = (r << 8) | *(x++);
  69:25519/sha512.c **** 	r = (r << 8) | *(x++);
  70:25519/sha512.c **** 	r = (r << 8) | *(x++);
  71:25519/sha512.c **** 
  72:25519/sha512.c **** 	return r;
  73:25519/sha512.c **** }
  74:25519/sha512.c **** 
  75:25519/sha512.c **** static inline void store64(uint8_t *x, uint64_t v)
  76:25519/sha512.c **** {
  25              		.loc 1 76 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
  77:25519/sha512.c **** 	x += 7;
  78:25519/sha512.c **** 	*(x--) = v;
  79:25519/sha512.c **** 	v >>= 8;
  31              		.loc 1 79 0
  32 0000 110A     		lsrs	r1, r2, #8
  78:25519/sha512.c **** 	v >>= 8;
  33              		.loc 1 78 0
  34 0002 C271     		strb	r2, [r0, #7]
  35              	.LVL1:
  80:25519/sha512.c **** 	*(x--) = v;
  36              		.loc 1 80 0
  37 0004 8171     		strb	r1, [r0, #6]
  38              	.LVL2:
  81:25519/sha512.c **** 	v >>= 8;
  39              		.loc 1 81 0
  40 0006 110C     		lsrs	r1, r2, #16
  82:25519/sha512.c **** 	*(x--) = v;
  83:25519/sha512.c **** 	v >>= 8;
  41              		.loc 1 83 0
  42 0008 120E     		lsrs	r2, r2, #24
  43              	.LVL3:
  84:25519/sha512.c **** 	*(x--) = v;
  44              		.loc 1 84 0
  45 000a 0271     		strb	r2, [r0, #4]
  85:25519/sha512.c **** 	v >>= 8;
  86:25519/sha512.c **** 	*(x--) = v;
  87:25519/sha512.c **** 	v >>= 8;
  46              		.loc 1 87 0
  47 000c 1A0A     		lsrs	r2, r3, #8
  86:25519/sha512.c **** 	v >>= 8;
  48              		.loc 1 86 0
  49 000e C370     		strb	r3, [r0, #3]
  88:25519/sha512.c **** 	*(x--) = v;
  50              		.loc 1 88 0
  51 0010 8270     		strb	r2, [r0, #2]
  89:25519/sha512.c **** 	v >>= 8;
  52              		.loc 1 89 0
  53 0012 1A0C     		lsrs	r2, r3, #16
  90:25519/sha512.c **** 	*(x--) = v;
  91:25519/sha512.c **** 	v >>= 8;
  54              		.loc 1 91 0
  55 0014 1B0E     		lsrs	r3, r3, #24
  82:25519/sha512.c **** 	v >>= 8;
  56              		.loc 1 82 0
  57 0016 4171     		strb	r1, [r0, #5]
  58              	.LVL4:
  90:25519/sha512.c **** 	*(x--) = v;
  59              		.loc 1 90 0
  60 0018 4270     		strb	r2, [r0, #1]
  61              	.LVL5:
  92:25519/sha512.c **** 	*(x--) = v;
  62              		.loc 1 92 0
  63 001a 0370     		strb	r3, [r0]
  93:25519/sha512.c **** }
  64              		.loc 1 93 0
  65 001c 7047     		bx	lr
  66              		.cfi_endproc
  67              	.LFE2:
  69              		.section	.text.sha512_block,"ax",%progbits
  70              		.align	1
  71              		.global	sha512_block
  72              		.syntax unified
  73              		.thumb
  74              		.thumb_func
  75              		.fpu softvfp
  77              	sha512_block:
  78              	.LFB4:
  94:25519/sha512.c **** 
  95:25519/sha512.c **** static inline uint64_t rot64(uint64_t x, int bits)
  96:25519/sha512.c **** {
  97:25519/sha512.c **** 	return (x >> bits) | (x << (64 - bits));
  98:25519/sha512.c **** }
  99:25519/sha512.c **** 
 100:25519/sha512.c **** void sha512_block(struct sha512_state *s, const uint8_t *blk)
 101:25519/sha512.c **** {
  79              		.loc 1 101 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 368
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              	.LVL6:
  84 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  85              		.cfi_def_cfa_offset 36
  86              		.cfi_offset 4, -36
  87              		.cfi_offset 5, -32
  88              		.cfi_offset 6, -28
  89              		.cfi_offset 7, -24
  90              		.cfi_offset 8, -20
  91              		.cfi_offset 9, -16
  92              		.cfi_offset 10, -12
  93              		.cfi_offset 11, -8
  94              		.cfi_offset 14, -4
  95 0004 DDB0     		sub	sp, sp, #372
  96              		.cfi_def_cfa_offset 408
  97 0006 3AAE     		add	r6, sp, #232
  98 0008 01F18007 		add	r7, r1, #128
  99              	.LVL7:
 100              	.L3:
 101              	.LBB46:
 102              	.LBB47:
  67:25519/sha512.c **** 	r = (r << 8) | *(x++);
 103              		.loc 1 67 0
 104 000c 0025     		movs	r5, #0
 105 000e 0B68     		ldr	r3, [r1]	@ unaligned
 106 0010 0C79     		ldrb	r4, [r1, #4]	@ zero_extendqisi2
 107 0012 1BBA     		rev	r3, r3
 108              	.LVL8:
 109 0014 4FEA1369 		lsr	r9, r3, #24
 110 0018 45EA090B 		orr	fp, r5, r9
  68:25519/sha512.c **** 	r = (r << 8) | *(x++);
 111              		.loc 1 68 0
 112 001c 0025     		movs	r5, #0
  67:25519/sha512.c **** 	r = (r << 8) | *(x++);
 113              		.loc 1 67 0
 114 001e 4FEA0328 		lsl	r8, r3, #8
 115              	.LVL9:
 116 0022 44EA080A 		orr	r10, r4, r8
  68:25519/sha512.c **** 	r = (r << 8) | *(x++);
 117              		.loc 1 68 0
 118 0026 4FEA0B23 		lsl	r3, fp, #8
 119 002a 43EA1A63 		orr	r3, r3, r10, lsr #24
 120 002e 45EA030B 		orr	fp, r5, r3
  69:25519/sha512.c **** 	r = (r << 8) | *(x++);
 121              		.loc 1 69 0
 122 0032 0025     		movs	r5, #0
  68:25519/sha512.c **** 	r = (r << 8) | *(x++);
 123              		.loc 1 68 0
 124 0034 4C79     		ldrb	r4, [r1, #5]	@ zero_extendqisi2
 125 0036 4FEA0A22 		lsl	r2, r10, #8
 126              	.LVL10:
 127 003a 44EA020A 		orr	r10, r4, r2
  69:25519/sha512.c **** 	r = (r << 8) | *(x++);
 128              		.loc 1 69 0
 129 003e 4FEA0B23 		lsl	r3, fp, #8
 130 0042 43EA1A63 		orr	r3, r3, r10, lsr #24
 131 0046 45EA030B 		orr	fp, r5, r3
  70:25519/sha512.c **** 
 132              		.loc 1 70 0
 133 004a 0025     		movs	r5, #0
  69:25519/sha512.c **** 	r = (r << 8) | *(x++);
 134              		.loc 1 69 0
 135 004c 8C79     		ldrb	r4, [r1, #6]	@ zero_extendqisi2
 136 004e 4FEA0A22 		lsl	r2, r10, #8
 137              	.LVL11:
 138 0052 44EA020A 		orr	r10, r4, r2
  70:25519/sha512.c **** 
 139              		.loc 1 70 0
 140 0056 4FEA0B2B 		lsl	fp, fp, #8
 141 005a CC79     		ldrb	r4, [r1, #7]	@ zero_extendqisi2
 142 005c 4BEA1A6B 		orr	fp, fp, r10, lsr #24
 143              	.LBE47:
 144              	.LBE46:
 102:25519/sha512.c **** 	uint64_t w[16];
 103:25519/sha512.c **** 	uint64_t a, b, c, d, e, f, g, h;
 104:25519/sha512.c **** 	int i;
 105:25519/sha512.c **** 
 106:25519/sha512.c **** 	for (i = 0; i < 16; i++) {
 107:25519/sha512.c **** 		w[i] = load64(blk);
 108:25519/sha512.c **** 		blk += 8;
 145              		.loc 1 108 0
 146 0060 0831     		adds	r1, r1, #8
 147              	.LVL12:
 148              	.LBB49:
 149              	.LBB48:
  70:25519/sha512.c **** 
 150              		.loc 1 70 0
 151 0062 4FEA0A2A 		lsl	r10, r10, #8
 152              	.LVL13:
 153 0066 4AEA0402 		orr	r2, r10, r4
 154 006a 4BEA0503 		orr	r3, fp, r5
 155              	.LBE48:
 156              	.LBE49:
 106:25519/sha512.c **** 		w[i] = load64(blk);
 157              		.loc 1 106 0
 158 006e B942     		cmp	r1, r7
 107:25519/sha512.c **** 		blk += 8;
 159              		.loc 1 107 0
 160 0070 E6E90223 		strd	r2, [r6, #8]!
 106:25519/sha512.c **** 		w[i] = load64(blk);
 161              		.loc 1 106 0
 162 0074 CAD1     		bne	.L3
 109:25519/sha512.c **** 	}
 110:25519/sha512.c **** 
 111:25519/sha512.c **** 	/* Load state */
 112:25519/sha512.c **** 	a = s->h[0];
 113:25519/sha512.c **** 	b = s->h[1];
 114:25519/sha512.c **** 	c = s->h[2];
 115:25519/sha512.c **** 	d = s->h[3];
 116:25519/sha512.c **** 	e = s->h[4];
 117:25519/sha512.c **** 	f = s->h[5];
 118:25519/sha512.c **** 	g = s->h[6];
 119:25519/sha512.c **** 	h = s->h[7];
 120:25519/sha512.c **** 
 121:25519/sha512.c **** 	for (i = 0; i < 80; i++) {
 163              		.loc 1 121 0
 164 0076 4FF0000A 		mov	r10, #0
 112:25519/sha512.c **** 	b = s->h[1];
 165              		.loc 1 112 0
 166 007a D0E90034 		ldrd	r3, [r0]
 167 007e CDE90E34 		strd	r3, [sp, #56]
 168              	.LVL14:
 113:25519/sha512.c **** 	c = s->h[2];
 169              		.loc 1 113 0
 170 0082 D0E90234 		ldrd	r3, [r0, #8]
 171              	.LVL15:
 112:25519/sha512.c **** 	b = s->h[1];
 172              		.loc 1 112 0
 173 0086 DDE90EBC 		ldrd	fp, [sp, #56]
 113:25519/sha512.c **** 	c = s->h[2];
 174              		.loc 1 113 0
 175 008a CDE91034 		strd	r3, [sp, #64]
 176              	.LVL16:
 114:25519/sha512.c **** 	d = s->h[3];
 177              		.loc 1 114 0
 178 008e D0E90434 		ldrd	r3, [r0, #16]
 179              	.LVL17:
 180 0092 CDE91234 		strd	r3, [sp, #72]
 181              	.LVL18:
 115:25519/sha512.c **** 	e = s->h[4];
 182              		.loc 1 115 0
 183 0096 D0E90634 		ldrd	r3, [r0, #24]
 184              	.LVL19:
 185 009a CDE91434 		strd	r3, [sp, #80]
 186              	.LVL20:
 116:25519/sha512.c **** 	f = s->h[5];
 187              		.loc 1 116 0
 188 009e D0E90834 		ldrd	r3, [r0, #32]
 189              	.LVL21:
 190 00a2 CDE91634 		strd	r3, [sp, #88]
 191              	.LVL22:
 117:25519/sha512.c **** 	g = s->h[6];
 192              		.loc 1 117 0
 193 00a6 D0E90A34 		ldrd	r3, [r0, #40]
 194              	.LVL23:
 116:25519/sha512.c **** 	f = s->h[5];
 195              		.loc 1 116 0
 196 00aa DDE91689 		ldrd	r8, [sp, #88]
 117:25519/sha512.c **** 	g = s->h[6];
 197              		.loc 1 117 0
 198 00ae CDE91834 		strd	r3, [sp, #96]
 199              	.LVL24:
 118:25519/sha512.c **** 	h = s->h[7];
 200              		.loc 1 118 0
 201 00b2 D0E90C34 		ldrd	r3, [r0, #48]
 202              	.LVL25:
 203 00b6 CDE91A34 		strd	r3, [sp, #104]
 204              	.LVL26:
 119:25519/sha512.c **** 
 205              		.loc 1 119 0
 206 00ba D0E90E34 		ldrd	r3, [r0, #56]
 207              	.LVL27:
 208 00be CDE91C34 		strd	r3, [sp, #112]
 209              	.LVL28:
 210 00c2 0D4B     		ldr	r3, .L7
 211              	.LVL29:
 212 00c4 2693     		str	r3, [sp, #152]
 213 00c6 DDE91C34 		ldrd	r3, [sp, #112]
 214 00ca CDE92234 		strd	r3, [sp, #136]
 118:25519/sha512.c **** 	h = s->h[7];
 215              		.loc 1 118 0
 216 00ce DDE91A34 		ldrd	r3, [sp, #104]
 217 00d2 CDE90A34 		strd	r3, [sp, #40]
 117:25519/sha512.c **** 	g = s->h[6];
 218              		.loc 1 117 0
 219 00d6 DDE91834 		ldrd	r3, [sp, #96]
 220 00da CDE90834 		strd	r3, [sp, #32]
 115:25519/sha512.c **** 	e = s->h[4];
 221              		.loc 1 115 0
 222 00de DDE91434 		ldrd	r3, [sp, #80]
 223 00e2 CDE92434 		strd	r3, [sp, #144]
 114:25519/sha512.c **** 	d = s->h[3];
 224              		.loc 1 114 0
 225 00e6 DDE91234 		ldrd	r3, [sp, #72]
 226 00ea CDE90434 		strd	r3, [sp, #16]
 113:25519/sha512.c **** 	c = s->h[2];
 227              		.loc 1 113 0
 228 00ee DDE91034 		ldrd	r3, [sp, #64]
 229 00f2 CDE90234 		strd	r3, [sp, #8]
 230 00f6 01E0     		b	.L8
 231              	.L9:
 232              		.align	2
 233              	.L7:
 234 00f8 F8FFFFFF 		.word	.LANCHOR0-8
 235              	.L8:
 236              	.LVL30:
 237              	.L4:
 238              	.LBB50:
 122:25519/sha512.c **** 		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
 123:25519/sha512.c **** 		const uint64_t wi = w[i & 15];
 239              		.loc 1 123 0 discriminator 3
 240 00fc 0AF00F0E 		and	lr, r10, #15
 241 0100 5CAB     		add	r3, sp, #368
 242 0102 03EBCE03 		add	r3, r3, lr, lsl #3
 243 0106 2793     		str	r3, [sp, #156]
 244 0108 A3F18004 		add	r4, r3, #-128
 245 010c D4E90034 		ldrd	r3, [r4]
 246 0110 CDE91E34 		strd	r3, [sp, #120]
 247              	.LVL31:
 248              	.LBB51:
 249              	.LBB52:
  97:25519/sha512.c **** }
 250              		.loc 1 97 0 discriminator 3
 251 0114 4FEA9834 		lsr	r4, r8, #14
 252 0118 44EA8944 		orr	r4, r4, r9, lsl #18
 253 011c 2894     		str	r4, [sp, #160]
 254 011e 4FEA9934 		lsr	r4, r9, #14
 255 0122 44EA8844 		orr	r4, r4, r8, lsl #18
 256 0126 2994     		str	r4, [sp, #164]
 257              	.LBE52:
 258              	.LBE51:
 259              	.LBB53:
 260              	.LBB54:
 261 0128 4FEA9844 		lsr	r4, r8, #18
 262              	.LBE54:
 263              	.LBE53:
 124:25519/sha512.c **** 		const uint64_t wi15 = w[(i + 1) & 15];
 264              		.loc 1 124 0 discriminator 3
 265 012c 0AF1010A 		add	r10, r10, #1
 266              	.LVL32:
 267              	.LBB59:
 268              	.LBB55:
  97:25519/sha512.c **** }
 269              		.loc 1 97 0 discriminator 3
 270 0130 44EA8934 		orr	r4, r4, r9, lsl #14
 271 0134 2A94     		str	r4, [sp, #168]
 272              	.LBE55:
 273              	.LBE59:
 274              		.loc 1 124 0 discriminator 3
 275 0136 5CAA     		add	r2, sp, #368
 276 0138 0AF00F03 		and	r3, r10, #15
 277              	.LVL33:
 278              	.LBB60:
 279              	.LBB56:
  97:25519/sha512.c **** }
 280              		.loc 1 97 0 discriminator 3
 281 013c 4FEA9944 		lsr	r4, r9, #18
 282              	.LBE56:
 283              	.LBE60:
 284              		.loc 1 124 0 discriminator 3
 285 0140 02EBC303 		add	r3, r2, r3, lsl #3
 286              	.LBB61:
 287              	.LBB57:
  97:25519/sha512.c **** }
 288              		.loc 1 97 0 discriminator 3
 289 0144 44EA8834 		orr	r4, r4, r8, lsl #14
 290              	.LBE57:
 291              	.LBE61:
 292              		.loc 1 124 0 discriminator 3
 293 0148 53F8802C 		ldr	r2, [r3, #-128]
 294              	.LBB62:
 295              	.LBB58:
  97:25519/sha512.c **** }
 296              		.loc 1 97 0 discriminator 3
 297 014c 2B94     		str	r4, [sp, #172]
 298              	.LBE58:
 299              	.LBE62:
 300              		.loc 1 124 0 discriminator 3
 301 014e 53F87C3C 		ldr	r3, [r3, #-124]
 302              	.LBB63:
 303              	.LBB64:
  97:25519/sha512.c **** }
 304              		.loc 1 97 0 discriminator 3
 305 0152 4FEAC954 		lsl	r4, r9, #23
 306 0156 44EA5824 		orr	r4, r4, r8, lsr #9
 307 015a 2D94     		str	r4, [sp, #180]
 308              	.LBE64:
 309              	.LBE63:
 310              		.loc 1 124 0 discriminator 3
 311 015c 0093     		str	r3, [sp]
 312              	.LVL34:
 313              	.LBB68:
 314              	.LBB65:
  97:25519/sha512.c **** }
 315              		.loc 1 97 0 discriminator 3
 316 015e 4FEAC854 		lsl	r4, r8, #23
 317              	.LBE65:
 318              	.LBE68:
 125:25519/sha512.c **** 		const uint64_t wi2 = w[(i + 14) & 15];
 319              		.loc 1 125 0 discriminator 3
 320 0162 0AF10D03 		add	r3, r10, #13
 321              	.LVL35:
 124:25519/sha512.c **** 		const uint64_t wi15 = w[(i + 1) & 15];
 322              		.loc 1 124 0 discriminator 3
 323 0166 0792     		str	r2, [sp, #28]
 324              	.LVL36:
 325              	.LBB69:
 326              	.LBB66:
  97:25519/sha512.c **** }
 327              		.loc 1 97 0 discriminator 3
 328 0168 44EA5924 		orr	r4, r4, r9, lsr #9
 329              	.LBE66:
 330              	.LBE69:
 331              		.loc 1 125 0 discriminator 3
 332 016c 5CAA     		add	r2, sp, #368
 333 016e 03F00F03 		and	r3, r3, #15
 126:25519/sha512.c **** 		const uint64_t wi7 = w[(i + 9) & 15];
 127:25519/sha512.c **** 		const uint64_t s0 =
 128:25519/sha512.c **** 			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 129:25519/sha512.c **** 		const uint64_t s1 =
 130:25519/sha512.c **** 			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 131:25519/sha512.c **** 
 132:25519/sha512.c **** 		/* Round calculations */
 133:25519/sha512.c **** 		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
 134:25519/sha512.c **** 		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
 334              		.loc 1 134 0 discriminator 3
 335 0172 DDE92867 		ldrd	r6, [sp, #160]
 125:25519/sha512.c **** 		const uint64_t wi2 = w[(i + 14) & 15];
 336              		.loc 1 125 0 discriminator 3
 337 0176 02EBC303 		add	r3, r2, r3, lsl #3
 338              	.LBB70:
 339              	.LBB67:
  97:25519/sha512.c **** }
 340              		.loc 1 97 0 discriminator 3
 341 017a 2C94     		str	r4, [sp, #176]
 342              	.LBE67:
 343              	.LBE70:
 344              		.loc 1 134 0 discriminator 3
 345 017c DDE92A12 		ldrd	r1, [sp, #168]
 346 0180 4E40     		eors	r6, r6, r1
 347 0182 5740     		eors	r7, r7, r2
 348 0184 DDE92C45 		ldrd	r4, [sp, #176]
 349 0188 7440     		eors	r4, r4, r6
 350 018a 7D40     		eors	r5, r5, r7
 351 018c 2146     		mov	r1, r4
 125:25519/sha512.c **** 		const uint64_t wi2 = w[(i + 14) & 15];
 352              		.loc 1 125 0 discriminator 3
 353 018e 53E920E3 		ldrd	lr, r3, [r3, #-128]
 354              	.LVL37:
 355              		.loc 1 134 0 discriminator 3
 356 0192 2A46     		mov	r2, r5
 357              	.LVL38:
 135:25519/sha512.c **** 		const uint64_t ch = (e & f) ^ ((~e) & g);
 136:25519/sha512.c **** 		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 358              		.loc 1 136 0 discriminator 3
 359 0194 269E     		ldr	r6, [sp, #152]
 360 0196 F6E90245 		ldrd	r4, [r6, #8]!
 361 019a 2696     		str	r6, [sp, #152]
 362 019c DDE91E67 		ldrd	r6, [sp, #120]
 363 01a0 3619     		adds	r6, r6, r4
 364 01a2 6F41     		adcs	r7, r7, r5
 135:25519/sha512.c **** 		const uint64_t ch = (e & f) ^ ((~e) & g);
 365              		.loc 1 135 0 discriminator 3
 366 01a4 DDE90845 		ldrd	r4, [sp, #32]
 367 01a8 04EA0804 		and	r4, r4, r8
 368              		.loc 1 136 0 discriminator 3
 369 01ac 8E19     		adds	r6, r1, r6
 135:25519/sha512.c **** 		const uint64_t ch = (e & f) ^ ((~e) & g);
 370              		.loc 1 135 0 discriminator 3
 371 01ae 05EA0905 		and	r5, r5, r9
 372 01b2 2146     		mov	r1, r4
 373              		.loc 1 136 0 discriminator 3
 374 01b4 42EB0707 		adc	r7, r2, r7
 135:25519/sha512.c **** 		const uint64_t ch = (e & f) ^ ((~e) & g);
 375              		.loc 1 135 0 discriminator 3
 376 01b8 2A46     		mov	r2, r5
 377 01ba DDE90A45 		ldrd	r4, [sp, #40]
 378 01be 24EA0804 		bic	r4, r4, r8
 379 01c2 25EA0905 		bic	r5, r5, r9
 380 01c6 6140     		eors	r1, r1, r4
 381              		.loc 1 136 0 discriminator 3
 382 01c8 8C19     		adds	r4, r1, r6
 135:25519/sha512.c **** 		const uint64_t ch = (e & f) ^ ((~e) & g);
 383              		.loc 1 135 0 discriminator 3
 384 01ca 82EA0502 		eor	r2, r2, r5
 385              		.loc 1 136 0 discriminator 3
 386 01ce 42EB0705 		adc	r5, r2, r7
 387 01d2 DDE92267 		ldrd	r6, [sp, #136]
 388 01d6 3619     		adds	r6, r6, r4
 389              	.LBB71:
 390              	.LBB72:
  97:25519/sha512.c **** }
 391              		.loc 1 97 0 discriminator 3
 392 01d8 4FEA1B74 		lsr	r4, fp, #28
 393 01dc 44EA0C14 		orr	r4, r4, ip, lsl #4
 394 01e0 2E94     		str	r4, [sp, #184]
 395 01e2 4FEA1C74 		lsr	r4, ip, #28
 396 01e6 44EA0B14 		orr	r4, r4, fp, lsl #4
 397 01ea 2F94     		str	r4, [sp, #188]
 398              	.LBE72:
 399              	.LBE71:
 400              	.LBB73:
 401              	.LBB74:
 402 01ec 4FEA8C74 		lsl	r4, ip, #30
 403 01f0 44EA9B04 		orr	r4, r4, fp, lsr #2
 404 01f4 3194     		str	r4, [sp, #196]
 405 01f6 4FEA8B74 		lsl	r4, fp, #30
 406 01fa 44EA9C04 		orr	r4, r4, ip, lsr #2
 407 01fe 3094     		str	r4, [sp, #192]
 408              	.LBE74:
 409              	.LBE73:
 410              		.loc 1 136 0 discriminator 3
 411 0200 6F41     		adcs	r7, r7, r5
 412              	.LVL39:
 133:25519/sha512.c **** 		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
 413              		.loc 1 133 0 discriminator 3
 414 0202 DDE92E12 		ldrd	r1, [sp, #184]
 415 0206 DDE93045 		ldrd	r4, [sp, #192]
 416 020a 6140     		eors	r1, r1, r4
 417              	.LBB75:
 418              	.LBB76:
  97:25519/sha512.c **** }
 419              		.loc 1 97 0 discriminator 3
 420 020c 4FEA4C64 		lsl	r4, ip, #25
 421              	.LBE76:
 422              	.LBE75:
 133:25519/sha512.c **** 		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
 423              		.loc 1 133 0 discriminator 3
 424 0210 6A40     		eors	r2, r2, r5
 425              	.LBB79:
 426              	.LBB77:
  97:25519/sha512.c **** }
 427              		.loc 1 97 0 discriminator 3
 428 0212 44EADB14 		orr	r4, r4, fp, lsr #7
 429              	.LBE77:
 430              	.LBE79:
 133:25519/sha512.c **** 		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
 431              		.loc 1 133 0 discriminator 3
 432 0216 CDE90C12 		strd	r1, [sp, #48]
 433              	.LBB80:
 434              	.LBB78:
  97:25519/sha512.c **** }
 435              		.loc 1 97 0 discriminator 3
 436 021a 3394     		str	r4, [sp, #204]
 437 021c 4FEA4B64 		lsl	r4, fp, #25
 438 0220 44EADC14 		orr	r4, r4, ip, lsr #7
 439 0224 3294     		str	r4, [sp, #200]
 440              	.LBE78:
 441              	.LBE80:
 133:25519/sha512.c **** 		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
 442              		.loc 1 133 0 discriminator 3
 443 0226 DDE93212 		ldrd	r1, [sp, #200]
 444 022a DDE90C45 		ldrd	r4, [sp, #48]
 445 022e 6140     		eors	r1, r1, r4
 446 0230 6A40     		eors	r2, r2, r5
 447 0232 CDE90C12 		strd	r1, [sp, #48]
 137:25519/sha512.c **** 		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 448              		.loc 1 137 0 discriminator 3
 449 0236 DDE90245 		ldrd	r4, [sp, #8]
 450 023a DDE90412 		ldrd	r1, [sp, #16]
 451 023e 4C40     		eors	r4, r4, r1
 452 0240 5540     		eors	r5, r5, r2
 453 0242 04EA0B04 		and	r4, r4, fp
 454 0246 05EA0C05 		and	r5, r5, ip
 455 024a CDE92045 		strd	r4, [sp, #128]
 456 024e DDE90212 		ldrd	r1, [sp, #8]
 457 0252 DDE90445 		ldrd	r4, [sp, #16]
 458 0256 2140     		ands	r1, r1, r4
 459 0258 2A40     		ands	r2, r2, r5
 460 025a DDE92045 		ldrd	r4, [sp, #128]
 461 025e 4C40     		eors	r4, r4, r1
 462 0260 5540     		eors	r5, r5, r2
 138:25519/sha512.c **** 		const uint64_t temp2 = S0 + maj;
 463              		.loc 1 138 0 discriminator 3
 464 0262 DDE90C12 		ldrd	r1, [sp, #48]
 465 0266 0919     		adds	r1, r1, r4
 466 0268 6A41     		adcs	r2, r2, r5
 467 026a 0C46     		mov	r4, r1
 468 026c 1546     		mov	r5, r2
 469              	.LVL40:
 139:25519/sha512.c **** 
 140:25519/sha512.c **** 		/* Update round state */
 141:25519/sha512.c **** 		h = g;
 142:25519/sha512.c **** 		g = f;
 143:25519/sha512.c **** 		f = e;
 144:25519/sha512.c **** 		e = d + temp1;
 470              		.loc 1 144 0 discriminator 3
 471 026e DDE92412 		ldrd	r1, [sp, #144]
 472 0272 8919     		adds	r1, r1, r6
 473 0274 7A41     		adcs	r2, r2, r7
 474 0276 CDE92012 		strd	r1, [sp, #128]
 475              	.LVL41:
 145:25519/sha512.c **** 		d = c;
 146:25519/sha512.c **** 		c = b;
 147:25519/sha512.c **** 		b = a;
 148:25519/sha512.c **** 		a = temp1 + temp2;
 476              		.loc 1 148 0 discriminator 3
 477 027a 3119     		adds	r1, r6, r4
 478              	.LVL42:
 479 027c 47EB0502 		adc	r2, r7, r5
 480 0280 CDE90C12 		strd	r1, [sp, #48]
 481              	.LVL43:
 482              	.LBB81:
 483              	.LBB82:
  97:25519/sha512.c **** }
 484              		.loc 1 97 0 discriminator 3
 485 0284 079A     		ldr	r2, [sp, #28]
 486 0286 5408     		lsrs	r4, r2, #1
 487              	.LVL44:
 488 0288 009A     		ldr	r2, [sp]
 489 028a 44EAC274 		orr	r4, r4, r2, lsl #31
 490 028e 3494     		str	r4, [sp, #208]
 491 0290 5408     		lsrs	r4, r2, #1
 492 0292 079A     		ldr	r2, [sp, #28]
 493 0294 44EAC274 		orr	r4, r4, r2, lsl #31
 494 0298 3594     		str	r4, [sp, #212]
 495              	.LBE82:
 496              	.LBE81:
 497              	.LBB83:
 498              	.LBB84:
 499 029a 140A     		lsrs	r4, r2, #8
 500 029c 009A     		ldr	r2, [sp]
 501 029e 44EA0264 		orr	r4, r4, r2, lsl #24
 502 02a2 3694     		str	r4, [sp, #216]
 503 02a4 140A     		lsrs	r4, r2, #8
 504 02a6 079A     		ldr	r2, [sp, #28]
 505 02a8 44EA0264 		orr	r4, r4, r2, lsl #24
 506 02ac 3794     		str	r4, [sp, #220]
 507              	.LBE84:
 508              	.LBE83:
 128:25519/sha512.c **** 		const uint64_t s1 =
 509              		.loc 1 128 0 discriminator 3
 510 02ae DDE93612 		ldrd	r1, [sp, #216]
 511              	.LVL45:
 512 02b2 DDE93445 		ldrd	r4, [sp, #208]
 513 02b6 4C40     		eors	r4, r4, r1
 514 02b8 2146     		mov	r1, r4
 515 02ba 079C     		ldr	r4, [sp, #28]
 516 02bc 5540     		eors	r5, r5, r2
 517 02be E609     		lsrs	r6, r4, #7
 518              	.LVL46:
 519 02c0 009C     		ldr	r4, [sp]
 520 02c2 46EA4466 		orr	r6, r6, r4, lsl #25
 521 02c6 E709     		lsrs	r7, r4, #7
 127:25519/sha512.c **** 			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 522              		.loc 1 127 0 discriminator 3
 523 02c8 81EA0604 		eor	r4, r1, r6
 524 02cc 7D40     		eors	r5, r5, r7
 149:25519/sha512.c **** 
 150:25519/sha512.c **** 		/* w[wrap(i)] becomes w[i + 16] */
 151:25519/sha512.c **** 		w[i & 15] = wi + s0 + wi7 + s1;
 525              		.loc 1 151 0 discriminator 3
 526 02ce DDE91E12 		ldrd	r1, [sp, #120]
 527 02d2 0919     		adds	r1, r1, r4
 528 02d4 6A41     		adcs	r2, r2, r5
 529 02d6 0C46     		mov	r4, r1
 530 02d8 1546     		mov	r5, r2
 126:25519/sha512.c **** 		const uint64_t s0 =
 531              		.loc 1 126 0 discriminator 3
 532 02da 0AF10802 		add	r2, r10, #8
 533 02de 5CA9     		add	r1, sp, #368
 534 02e0 02F00F02 		and	r2, r2, #15
 535              	.LVL47:
 536 02e4 01EBC202 		add	r2, r1, r2, lsl #3
 537              	.LVL48:
 538              		.loc 1 151 0 discriminator 3
 539 02e8 52E92067 		ldrd	r6, [r2, #-128]
 540 02ec 3119     		adds	r1, r6, r4
 541 02ee 47EB0502 		adc	r2, r7, r5
 542 02f2 CDE90012 		strd	r1, [sp]
 543              	.LVL49:
 544              	.LBB85:
 545              	.LBB86:
  97:25519/sha512.c **** }
 546              		.loc 1 97 0 discriminator 3
 547 02f6 4FEADE42 		lsr	r2, lr, #19
 548 02fa 42EA4332 		orr	r2, r2, r3, lsl #13
 549 02fe 3892     		str	r2, [sp, #224]
 550 0300 DA0C     		lsrs	r2, r3, #19
 551 0302 42EA4E32 		orr	r2, r2, lr, lsl #13
 552 0306 3992     		str	r2, [sp, #228]
 553              	.LBE86:
 554              	.LBE85:
 555              	.LBB87:
 556              	.LBB88:
 557 0308 DA00     		lsls	r2, r3, #3
 558 030a 42EA5E72 		orr	r2, r2, lr, lsr #29
 559 030e 3B92     		str	r2, [sp, #236]
 560 0310 4FEACE02 		lsl	r2, lr, #3
 561 0314 42EA5372 		orr	r2, r2, r3, lsr #29
 562 0318 3A92     		str	r2, [sp, #232]
 563              	.LBE88:
 564              	.LBE87:
 130:25519/sha512.c **** 
 565              		.loc 1 130 0 discriminator 3
 566 031a DDE93A45 		ldrd	r4, [sp, #232]
 567 031e DDE93812 		ldrd	r1, [sp, #224]
 568 0322 6140     		eors	r1, r1, r4
 569 0324 4FEA9E14 		lsr	r4, lr, #6
 570 0328 44EA8364 		orr	r4, r4, r3, lsl #26
 571 032c 6A40     		eors	r2, r2, r5
 129:25519/sha512.c **** 			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 572              		.loc 1 129 0 discriminator 3
 573 032e 84EA0106 		eor	r6, r4, r1
 130:25519/sha512.c **** 
 574              		.loc 1 130 0 discriminator 3
 575 0332 9D09     		lsrs	r5, r3, #6
 129:25519/sha512.c **** 			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 576              		.loc 1 129 0 discriminator 3
 577 0334 85EA0207 		eor	r7, r5, r2
 578              		.loc 1 151 0 discriminator 3
 579 0338 279B     		ldr	r3, [sp, #156]
 580              	.LVL50:
 581 033a DDE90045 		ldrd	r4, [sp]
 582 033e A419     		adds	r4, r4, r6
 583 0340 7D41     		adcs	r5, r5, r7
 584              	.LBE50:
 121:25519/sha512.c **** 		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
 585              		.loc 1 121 0 discriminator 3
 586 0342 BAF1500F 		cmp	r10, #80
 587              	.LBB89:
 588              		.loc 1 151 0 discriminator 3
 589 0346 43E92045 		strd	r4, [r3, #-128]
 590              	.LVL51:
 591 034a DDE90434 		ldrd	r3, [sp, #16]
 592 034e CDE92434 		strd	r3, [sp, #144]
 593 0352 DDE90A34 		ldrd	r3, [sp, #40]
 594 0356 CDE92234 		strd	r3, [sp, #136]
 595              	.LBE89:
 121:25519/sha512.c **** 		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
 596              		.loc 1 121 0 discriminator 3
 597 035a 42D1     		bne	.L5
 152:25519/sha512.c **** 	}
 153:25519/sha512.c **** 
 154:25519/sha512.c **** 	/* Store state */
 155:25519/sha512.c **** 	s->h[0] += a;
 598              		.loc 1 155 0
 599 035c DDE90C23 		ldrd	r2, [sp, #48]
 600 0360 DDE90E45 		ldrd	r4, [sp, #56]
 601 0364 A418     		adds	r4, r4, r2
 602 0366 5D41     		adcs	r5, r5, r3
 156:25519/sha512.c **** 	s->h[1] += b;
 603              		.loc 1 156 0
 604 0368 DDE91023 		ldrd	r2, [sp, #64]
 605 036c 12EB0B02 		adds	r2, r2, fp
 606 0370 43EB0C03 		adc	r3, r3, ip
 155:25519/sha512.c **** 	s->h[1] += b;
 607              		.loc 1 155 0
 608 0374 C0E90045 		strd	r4, [r0]
 157:25519/sha512.c **** 	s->h[2] += c;
 609              		.loc 1 157 0
 610 0378 DDE90245 		ldrd	r4, [sp, #8]
 156:25519/sha512.c **** 	s->h[1] += b;
 611              		.loc 1 156 0
 612 037c C0E90223 		strd	r2, [r0, #8]
 613              		.loc 1 157 0
 614 0380 DDE91223 		ldrd	r2, [sp, #72]
 615 0384 1219     		adds	r2, r2, r4
 616 0386 6B41     		adcs	r3, r3, r5
 617 0388 C0E90423 		strd	r2, [r0, #16]
 158:25519/sha512.c **** 	s->h[3] += d;
 618              		.loc 1 158 0
 619 038c DDE90445 		ldrd	r4, [sp, #16]
 620 0390 DDE91423 		ldrd	r2, [sp, #80]
 621 0394 1219     		adds	r2, r2, r4
 622 0396 6B41     		adcs	r3, r3, r5
 623 0398 C0E90623 		strd	r2, [r0, #24]
 159:25519/sha512.c **** 	s->h[4] += e;
 624              		.loc 1 159 0
 625 039c DDE92045 		ldrd	r4, [sp, #128]
 626 03a0 DDE91623 		ldrd	r2, [sp, #88]
 627 03a4 1219     		adds	r2, r2, r4
 628 03a6 6B41     		adcs	r3, r3, r5
 629 03a8 C0E90823 		strd	r2, [r0, #32]
 160:25519/sha512.c **** 	s->h[5] += f;
 630              		.loc 1 160 0
 631 03ac DDE91823 		ldrd	r2, [sp, #96]
 161:25519/sha512.c **** 	s->h[6] += g;
 632              		.loc 1 161 0
 633 03b0 DDE90845 		ldrd	r4, [sp, #32]
 160:25519/sha512.c **** 	s->h[5] += f;
 634              		.loc 1 160 0
 635 03b4 12EB0802 		adds	r2, r2, r8
 636 03b8 43EB0903 		adc	r3, r3, r9
 637 03bc C0E90A23 		strd	r2, [r0, #40]
 638              		.loc 1 161 0
 639 03c0 DDE91A23 		ldrd	r2, [sp, #104]
 640 03c4 1219     		adds	r2, r2, r4
 641 03c6 6B41     		adcs	r3, r3, r5
 642 03c8 C0E90C23 		strd	r2, [r0, #48]
 162:25519/sha512.c **** 	s->h[7] += h;
 643              		.loc 1 162 0
 644 03cc DDE90A45 		ldrd	r4, [sp, #40]
 645 03d0 DDE91C23 		ldrd	r2, [sp, #112]
 646 03d4 1219     		adds	r2, r2, r4
 647 03d6 6B41     		adcs	r3, r3, r5
 648 03d8 C0E90E23 		strd	r2, [r0, #56]
 163:25519/sha512.c **** }
 649              		.loc 1 163 0
 650 03dc 5DB0     		add	sp, sp, #372
 651              		.cfi_remember_state
 652              		.cfi_def_cfa_offset 36
 653              		@ sp needed
 654 03de BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 655              	.LVL52:
 656              	.L5:
 657              		.cfi_restore_state
 658 03e2 DDE90834 		ldrd	r3, [sp, #32]
 659              	.LVL53:
 660 03e6 CDE90889 		strd	r8, [sp, #32]
 661              	.LVL54:
 662              	.LBB90:
 144:25519/sha512.c **** 		d = c;
 663              		.loc 1 144 0
 664 03ea DDE92089 		ldrd	r8, [sp, #128]
 665              	.LVL55:
 666              	.LBE90:
 667 03ee CDE90A34 		strd	r3, [sp, #40]
 668 03f2 DDE90234 		ldrd	r3, [sp, #8]
 669 03f6 CDE902BC 		strd	fp, [sp, #8]
 670              	.LVL56:
 671              	.LBB91:
 148:25519/sha512.c **** 
 672              		.loc 1 148 0
 673 03fa DDE90CBC 		ldrd	fp, [sp, #48]
 674              	.LVL57:
 675              	.LBE91:
 676 03fe CDE90434 		strd	r3, [sp, #16]
 677 0402 7BE6     		b	.L4
 678              		.cfi_endproc
 679              	.LFE4:
 681              		.section	.text.sha512_final,"ax",%progbits
 682              		.align	1
 683              		.global	sha512_final
 684              		.syntax unified
 685              		.thumb
 686              		.thumb_func
 687              		.fpu softvfp
 689              	sha512_final:
 690              	.LFB5:
 164:25519/sha512.c **** 
 165:25519/sha512.c **** void sha512_final(struct sha512_state *s, const uint8_t *blk,
 166:25519/sha512.c **** 		  size_t total_size)
 167:25519/sha512.c **** {
 691              		.loc 1 167 0
 692              		.cfi_startproc
 693              		@ args = 0, pretend = 0, frame = 128
 694              		@ frame_needed = 0, uses_anonymous_args = 0
 695              	.LVL58:
 696 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 697              		.cfi_def_cfa_offset 20
 698              		.cfi_offset 4, -20
 699              		.cfi_offset 5, -16
 700              		.cfi_offset 6, -12
 701              		.cfi_offset 7, -8
 702              		.cfi_offset 14, -4
 703 0002 1446     		mov	r4, r2
 704 0004 A1B0     		sub	sp, sp, #132
 705              		.cfi_def_cfa_offset 152
 706              		.loc 1 167 0
 707 0006 0646     		mov	r6, r0
 708 0008 0F46     		mov	r7, r1
 168:25519/sha512.c **** 	uint8_t temp[SHA512_BLOCK_SIZE] = {0};
 709              		.loc 1 168 0
 710 000a 8022     		movs	r2, #128
 711              	.LVL59:
 712 000c 0021     		movs	r1, #0
 713              	.LVL60:
 714 000e 6846     		mov	r0, sp
 715              	.LVL61:
 716 0010 FFF7FEFF 		bl	memset
 717              	.LVL62:
 169:25519/sha512.c **** 	const size_t last_size = total_size & (SHA512_BLOCK_SIZE - 1);
 170:25519/sha512.c **** 
 171:25519/sha512.c **** 	if (last_size)
 718              		.loc 1 171 0
 719 0014 14F07F05 		ands	r5, r4, #127
 720              	.LVL63:
 721 0018 04D0     		beq	.L11
 172:25519/sha512.c **** 		memcpy(temp, blk, last_size);
 722              		.loc 1 172 0
 723 001a 2A46     		mov	r2, r5
 724 001c 3946     		mov	r1, r7
 725 001e 6846     		mov	r0, sp
 726 0020 FFF7FEFF 		bl	memcpy
 727              	.LVL64:
 728              	.L11:
 173:25519/sha512.c **** 	temp[last_size] = 0x80;
 729              		.loc 1 173 0
 730 0024 8027     		movs	r7, #128
 731              	.LVL65:
 732 0026 20AB     		add	r3, sp, #128
 733 0028 2B44     		add	r3, r3, r5
 174:25519/sha512.c **** 
 175:25519/sha512.c **** 	if (last_size > 111) {
 734              		.loc 1 175 0
 735 002a 6F2D     		cmp	r5, #111
 173:25519/sha512.c **** 	temp[last_size] = 0x80;
 736              		.loc 1 173 0
 737 002c 03F8807C 		strb	r7, [r3, #-128]
 738              		.loc 1 175 0
 739 0030 08D9     		bls	.L12
 176:25519/sha512.c **** 		sha512_block(s, temp);
 740              		.loc 1 176 0
 741 0032 6946     		mov	r1, sp
 742 0034 3046     		mov	r0, r6
 743 0036 FFF7FEFF 		bl	sha512_block
 744              	.LVL66:
 177:25519/sha512.c **** 		memset(temp, 0, sizeof(temp));
 745              		.loc 1 177 0
 746 003a 3A46     		mov	r2, r7
 747 003c 0021     		movs	r1, #0
 748 003e 6846     		mov	r0, sp
 749 0040 FFF7FEFF 		bl	memset
 750              	.LVL67:
 751              	.L12:
 178:25519/sha512.c **** 	}
 179:25519/sha512.c **** 
 180:25519/sha512.c **** 	/* Note: we assume total_size fits in 61 bits */
 181:25519/sha512.c **** 	store64(temp + SHA512_BLOCK_SIZE - 8, total_size << 3);
 752              		.loc 1 181 0
 753 0044 E200     		lsls	r2, r4, #3
 754 0046 0023     		movs	r3, #0
 755 0048 1EA8     		add	r0, sp, #120
 756 004a FFF7FEFF 		bl	store64
 757              	.LVL68:
 182:25519/sha512.c **** 	sha512_block(s, temp);
 758              		.loc 1 182 0
 759 004e 6946     		mov	r1, sp
 760 0050 3046     		mov	r0, r6
 761 0052 FFF7FEFF 		bl	sha512_block
 762              	.LVL69:
 183:25519/sha512.c **** }
 763              		.loc 1 183 0
 764 0056 21B0     		add	sp, sp, #132
 765              		.cfi_def_cfa_offset 20
 766              		@ sp needed
 767 0058 F0BD     		pop	{r4, r5, r6, r7, pc}
 768              		.cfi_endproc
 769              	.LFE5:
 771              		.section	.text.sha512_get,"ax",%progbits
 772              		.align	1
 773              		.global	sha512_get
 774              		.syntax unified
 775              		.thumb
 776              		.thumb_func
 777              		.fpu softvfp
 779              	sha512_get:
 780              	.LFB6:
 184:25519/sha512.c **** 
 185:25519/sha512.c **** void sha512_get(const struct sha512_state *s, uint8_t *hash,
 186:25519/sha512.c **** 		unsigned int offset, unsigned int len)
 187:25519/sha512.c **** {
 781              		.loc 1 187 0
 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 8
 784              		@ frame_needed = 0, uses_anonymous_args = 0
 785              	.LVL70:
 188:25519/sha512.c **** 	int i;
 189:25519/sha512.c **** 
 190:25519/sha512.c **** 	if (offset > SHA512_BLOCK_SIZE)
 786              		.loc 1 190 0
 787 0000 802A     		cmp	r2, #128
 187:25519/sha512.c **** 	int i;
 788              		.loc 1 187 0
 789 0002 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
 790              		.cfi_def_cfa_offset 40
 791              		.cfi_offset 4, -32
 792              		.cfi_offset 5, -28
 793              		.cfi_offset 6, -24
 794              		.cfi_offset 7, -20
 795              		.cfi_offset 8, -16
 796              		.cfi_offset 9, -12
 797              		.cfi_offset 10, -8
 798              		.cfi_offset 14, -4
 187:25519/sha512.c **** 	int i;
 799              		.loc 1 187 0
 800 0006 8046     		mov	r8, r0
 801 0008 0E46     		mov	r6, r1
 802              		.loc 1 190 0
 803 000a 45D8     		bhi	.L16
 191:25519/sha512.c **** 		return;
 192:25519/sha512.c **** 
 193:25519/sha512.c **** 	if (len > SHA512_BLOCK_SIZE - offset)
 804              		.loc 1 193 0
 805 000c C2F18004 		rsb	r4, r2, #128
 806 0010 9C42     		cmp	r4, r3
 807 0012 28BF     		it	cs
 808 0014 1C46     		movcs	r4, r3
 809              	.LVL71:
 194:25519/sha512.c **** 		len = SHA512_BLOCK_SIZE - offset;
 195:25519/sha512.c **** 
 196:25519/sha512.c **** 	/* Skip whole words */
 197:25519/sha512.c **** 	i = offset >> 3;
 198:25519/sha512.c **** 	offset &= 7;
 199:25519/sha512.c **** 
 200:25519/sha512.c **** 	/* Skip/read out bytes */
 201:25519/sha512.c **** 	if (offset) {
 810              		.loc 1 201 0
 811 0016 12F00705 		ands	r5, r2, #7
 197:25519/sha512.c **** 	offset &= 7;
 812              		.loc 1 197 0
 813 001a 4FEAD207 		lsr	r7, r2, #3
 814              	.LVL72:
 815              		.loc 1 201 0
 816 001e 17D0     		beq	.L19
 817              	.LBB92:
 202:25519/sha512.c **** 		uint8_t tmp[8];
 203:25519/sha512.c **** 		unsigned int c = 8 - offset;
 818              		.loc 1 203 0
 819 0020 C5F10809 		rsb	r9, r5, #8
 820              	.LVL73:
 821 0024 A145     		cmp	r9, r4
 822 0026 28BF     		it	cs
 823 0028 A146     		movcs	r9, r4
 824              	.LVL74:
 204:25519/sha512.c **** 
 205:25519/sha512.c **** 		if (c > len)
 206:25519/sha512.c **** 			c = len;
 207:25519/sha512.c **** 
 208:25519/sha512.c **** 		store64(tmp, s->h[i++]);
 825              		.loc 1 208 0
 826 002a 07F1010A 		add	r10, r7, #1
 827              	.LVL75:
 828 002e 00EBC707 		add	r7, r0, r7, lsl #3
 829 0032 D7E90023 		ldrd	r2, [r7]
 830 0036 6846     		mov	r0, sp
 831              	.LVL76:
 832 0038 FFF7FEFF 		bl	store64
 833              	.LVL77:
 209:25519/sha512.c **** 		memcpy(hash, tmp + offset, c);
 834              		.loc 1 209 0
 835 003c 3046     		mov	r0, r6
 836 003e 4A46     		mov	r2, r9
 837 0040 0DEB0501 		add	r1, sp, r5
 838 0044 FFF7FEFF 		bl	memcpy
 839              	.LVL78:
 208:25519/sha512.c **** 		memcpy(hash, tmp + offset, c);
 840              		.loc 1 208 0
 841 0048 5746     		mov	r7, r10
 210:25519/sha512.c **** 		len -= c;
 842              		.loc 1 210 0
 843 004a A4EB0904 		sub	r4, r4, r9
 844              	.LVL79:
 211:25519/sha512.c **** 		hash += c;
 845              		.loc 1 211 0
 846 004e 4E44     		add	r6, r6, r9
 847              	.LVL80:
 848              	.L19:
 849 0050 08EBC709 		add	r9, r8, r7, lsl #3
 208:25519/sha512.c **** 		memcpy(hash, tmp + offset, c);
 850              		.loc 1 208 0
 851 0054 2546     		mov	r5, r4
 852              	.LVL81:
 853 0056 06EB040A 		add	r10, r6, r4
 854 005a 04E0     		b	.L20
 855              	.LVL82:
 856              	.L21:
 857              	.LBE92:
 212:25519/sha512.c **** 	}
 213:25519/sha512.c **** 
 214:25519/sha512.c **** 	/* Read out whole words */
 215:25519/sha512.c **** 	while (len >= 8) {
 216:25519/sha512.c **** 		store64(hash, s->h[i++]);
 858              		.loc 1 216 0
 859 005c F9E80223 		ldrd	r2, [r9], #8
 860 0060 FFF7FEFF 		bl	store64
 861              	.LVL83:
 217:25519/sha512.c **** 		hash += 8;
 218:25519/sha512.c **** 		len -= 8;
 862              		.loc 1 218 0
 863 0064 083D     		subs	r5, r5, #8
 864              	.LVL84:
 865              	.L20:
 215:25519/sha512.c **** 		store64(hash, s->h[i++]);
 866              		.loc 1 215 0
 867 0066 072D     		cmp	r5, #7
 868 0068 AAEB0500 		sub	r0, r10, r5
 869              	.LVL85:
 870 006c F6D8     		bhi	.L21
 871 006e 6FF00703 		mvn	r3, #7
 872 0072 E108     		lsrs	r1, r4, #3
 873 0074 03FB0144 		mla	r4, r3, r1, r4
 874 0078 06EBC106 		add	r6, r6, r1, lsl #3
 875 007c 0F44     		add	r7, r7, r1
 219:25519/sha512.c **** 	}
 220:25519/sha512.c **** 
 221:25519/sha512.c **** 	/* Read out bytes */
 222:25519/sha512.c **** 	if (len) {
 876              		.loc 1 222 0
 877 007e 5CB1     		cbz	r4, .L16
 878              	.LBB93:
 223:25519/sha512.c **** 		uint8_t tmp[8];
 224:25519/sha512.c **** 
 225:25519/sha512.c **** 		store64(tmp, s->h[i]);
 879              		.loc 1 225 0 discriminator 3
 880 0080 08EBC708 		add	r8, r8, r7, lsl #3
 881              	.LVL86:
 882 0084 D8E90023 		ldrd	r2, [r8]
 883 0088 6846     		mov	r0, sp
 884              	.LVL87:
 885 008a FFF7FEFF 		bl	store64
 886              	.LVL88:
 226:25519/sha512.c **** 		memcpy(hash, tmp, len);
 887              		.loc 1 226 0 discriminator 3
 888 008e 2246     		mov	r2, r4
 889 0090 6946     		mov	r1, sp
 890 0092 3046     		mov	r0, r6
 891 0094 FFF7FEFF 		bl	memcpy
 892              	.LVL89:
 893              	.L16:
 894              	.LBE93:
 227:25519/sha512.c **** 	}
 228:25519/sha512.c **** }
 895              		.loc 1 228 0
 896 0098 02B0     		add	sp, sp, #8
 897              		.cfi_def_cfa_offset 32
 898              		@ sp needed
 899 009a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 900              		.cfi_endproc
 901              	.LFE6:
 903              		.global	sha512_initial_state
 904              		.section	.rodata.round_k,"a",%progbits
 905              		.align	3
 906              		.set	.LANCHOR0,. + 0
 909              	round_k:
 910 0000 22AE28D7 		.word	-685199838
 911 0004 982F8A42 		.word	1116352408
 912 0008 CD65EF23 		.word	602891725
 913 000c 91443771 		.word	1899447441
 914 0010 2F3B4DEC 		.word	-330482897
 915 0014 CFFBC0B5 		.word	-1245643825
 916 0018 BCDB8981 		.word	-2121671748
 917 001c A5DBB5E9 		.word	-373957723
 918 0020 38B548F3 		.word	-213338824
 919 0024 5BC25639 		.word	961987163
 920 0028 19D005B6 		.word	-1241133031
 921 002c F111F159 		.word	1508970993
 922 0030 9B4F19AF 		.word	-1357295717
 923 0034 A4823F92 		.word	-1841331548
 924 0038 18816DDA 		.word	-630357736
 925 003c D55E1CAB 		.word	-1424204075
 926 0040 420203A3 		.word	-1560083902
 927 0044 98AA07D8 		.word	-670586216
 928 0048 BE6F7045 		.word	1164996542
 929 004c 015B8312 		.word	310598401
 930 0050 8CB2E44E 		.word	1323610764
 931 0054 BE853124 		.word	607225278
 932 0058 E2B4FFD5 		.word	-704662302
 933 005c C37D0C55 		.word	1426881987
 934 0060 6F897BF2 		.word	-226784913
 935 0064 745DBE72 		.word	1925078388
 936 0068 B196163B 		.word	991336113
 937 006c FEB1DE80 		.word	-2132889090
 938 0070 3512C725 		.word	633803317
 939 0074 A706DC9B 		.word	-1680079193
 940 0078 942669CF 		.word	-815192428
 941 007c 74F19BC1 		.word	-1046744716
 942 0080 D24AF19E 		.word	-1628353838
 943 0084 C1699BE4 		.word	-459576895
 944 0088 E3254F38 		.word	944711139
 945 008c 8647BEEF 		.word	-272742522
 946 0090 B5D58C8B 		.word	-1953704523
 947 0094 C69DC10F 		.word	264347078
 948 0098 659CAC77 		.word	2007800933
 949 009c CCA10C24 		.word	604807628
 950 00a0 75022B59 		.word	1495990901
 951 00a4 6F2CE92D 		.word	770255983
 952 00a8 83E4A66E 		.word	1856431235
 953 00ac AA84744A 		.word	1249150122
 954 00b0 D4FB41BD 		.word	-1119749164
 955 00b4 DCA9B05C 		.word	1555081692
 956 00b8 B5531183 		.word	-2096016459
 957 00bc DA88F976 		.word	1996064986
 958 00c0 ABDF66EE 		.word	-295247957
 959 00c4 52513E98 		.word	-1740746414
 960 00c8 1032B42D 		.word	766784016
 961 00cc 6DC631A8 		.word	-1473132947
 962 00d0 3F21FB98 		.word	-1728372417
 963 00d4 C82703B0 		.word	-1341970488
 964 00d8 E40EEFBE 		.word	-1091629340
 965 00dc C77F59BF 		.word	-1084653625
 966 00e0 C28FA83D 		.word	1034457026
 967 00e4 F30BE0C6 		.word	-958395405
 968 00e8 25A70A93 		.word	-1828018395
 969 00ec 4791A7D5 		.word	-710438585
 970 00f0 6F8203E0 		.word	-536640913
 971 00f4 5163CA06 		.word	113926993
 972 00f8 706E0E0A 		.word	168717936
 973 00fc 67292914 		.word	338241895
 974 0100 FC2FD246 		.word	1188179964
 975 0104 850AB727 		.word	666307205
 976 0108 26C9265C 		.word	1546045734
 977 010c 38211B2E 		.word	773529912
 978 0110 ED2AC45A 		.word	1522805485
 979 0114 FC6D2C4D 		.word	1294757372
 980 0118 DFB3959D 		.word	-1651133473
 981 011c 130D3853 		.word	1396182291
 982 0120 DE63AF8B 		.word	-1951439906
 983 0124 54730A65 		.word	1695183700
 984 0128 A8B2773C 		.word	1014477480
 985 012c BB0A6A76 		.word	1986661051
 986 0130 E6AEED47 		.word	1206759142
 987 0134 2EC9C281 		.word	-2117940946
 988 0138 3B358214 		.word	344077627
 989 013c 852C7292 		.word	-1838011259
 990 0140 6403F14C 		.word	1290863460
 991 0144 A1E8BFA2 		.word	-1564481375
 992 0148 013042BC 		.word	-1136513023
 993 014c 4B661AA8 		.word	-1474664885
 994 0150 9197F8D0 		.word	-789014639
 995 0154 708B4BC2 		.word	-1035236496
 996 0158 30BE5406 		.word	106217008
 997 015c A3516CC7 		.word	-949202525
 998 0160 1852EFD6 		.word	-688958952
 999 0164 19E892D1 		.word	-778901479
 1000 0168 10A96555 		.word	1432725776
 1001 016c 240699D6 		.word	-694614492
 1002 0170 2A207157 		.word	1467031594
 1003 0174 85350EF4 		.word	-200395387
 1004 0178 B8D1BB32 		.word	851169720
 1005 017c 70A06A10 		.word	275423344
 1006 0180 C8D0D2B8 		.word	-1194143544
 1007 0184 16C1A419 		.word	430227734
 1008 0188 53AB4151 		.word	1363258195
 1009 018c 086C371E 		.word	506948616
 1010 0190 99EB8EDF 		.word	-544281703
 1011 0194 4C774827 		.word	659060556
 1012 0198 A8489BE1 		.word	-509917016
 1013 019c B5BCB034 		.word	883997877
 1014 01a0 635AC9C5 		.word	-976659869
 1015 01a4 B30C1C39 		.word	958139571
 1016 01a8 CB8A41E3 		.word	-482243893
 1017 01ac 4AAAD84E 		.word	1322822218
 1018 01b0 73E36377 		.word	2003034995
 1019 01b4 4FCA9C5B 		.word	1537002063
 1020 01b8 A3B8B2D6 		.word	-692930397
 1021 01bc F36F2E68 		.word	1747873779
 1022 01c0 FCB2EF5D 		.word	1575990012
 1023 01c4 EE828F74 		.word	1955562222
 1024 01c8 602F1743 		.word	1125592928
 1025 01cc 6F63A578 		.word	2024104815
 1026 01d0 72ABF0A1 		.word	-1578062990
 1027 01d4 1478C884 		.word	-2067236844
 1028 01d8 EC39641A 		.word	442776044
 1029 01dc 0802C78C 		.word	-1933114872
 1030 01e0 281E6323 		.word	593698344
 1031 01e4 FAFFBE90 		.word	-1866530822
 1032 01e8 E9BD82DE 		.word	-561857047
 1033 01ec EB6C50A4 		.word	-1538233109
 1034 01f0 1579C6B2 		.word	-1295615723
 1035 01f4 F7A3F9BE 		.word	-1090935817
 1036 01f8 2B5372E3 		.word	-479046869
 1037 01fc F27871C6 		.word	-965641998
 1038 0200 9C6126EA 		.word	-366583396
 1039 0204 CE3E27CA 		.word	-903397682
 1040 0208 07C2C021 		.word	566280711
 1041 020c C7B886D1 		.word	-779700025
 1042 0210 1EEBE0CD 		.word	-840897762
 1043 0214 D67DDAEA 		.word	-354779690
 1044 0218 78D16EEE 		.word	-294727304
 1045 021c 7F4F7DF5 		.word	-176337025
 1046 0220 BA6F1772 		.word	1914138554
 1047 0224 AA67F006 		.word	116418474
 1048 0228 A698C8A2 		.word	-1563912026
 1049 022c C57D630A 		.word	174292421
 1050 0230 AE0DF9BE 		.word	-1090974290
 1051 0234 04983F11 		.word	289380356
 1052 0238 1B471C13 		.word	320620315
 1053 023c 350B711B 		.word	460393269
 1054 0240 847D0423 		.word	587496836
 1055 0244 F577DB28 		.word	685471733
 1056 0248 9324C740 		.word	1086792851
 1057 024c 7BABCA32 		.word	852142971
 1058 0250 BCBEC915 		.word	365543100
 1059 0254 0ABE9E3C 		.word	1017036298
 1060 0258 4C0D109C 		.word	-1676669620
 1061 025c C4671D43 		.word	1126000580
 1062 0260 B6423ECB 		.word	-885112138
 1063 0264 BED4C54C 		.word	1288033470
 1064 0268 2A7E65FC 		.word	-60457430
 1065 026c 9C297F59 		.word	1501505948
 1066 0270 ECFAD63A 		.word	987167468
 1067 0274 AB6FCB5F 		.word	1607167915
 1068 0278 1758474A 		.word	1246189591
 1069 027c 8C19446C 		.word	1816402316
 1070              		.section	.rodata.sha512_initial_state,"a",%progbits
 1071              		.align	3
 1074              	sha512_initial_state:
 1075 0000 08C9BCF3 		.word	-205731576
 1076 0004 67E6096A 		.word	1779033703
 1077 0008 3BA7CA84 		.word	-2067093701
 1078 000c 85AE67BB 		.word	-1150833019
 1079 0010 2BF894FE 		.word	-23791573
 1080 0014 72F36E3C 		.word	1013904242
 1081 0018 F1361D5F 		.word	1595750129
 1082 001c 3AF54FA5 		.word	-1521486534
 1083 0020 D182E6AD 		.word	-1377402159
 1084 0024 7F520E51 		.word	1359893119
 1085 0028 1F6C3E2B 		.word	725511199
 1086 002c 8C68059B 		.word	-1694144372
 1087 0030 6BBD41FB 		.word	-79577749
 1088 0034 ABD9831F 		.word	528734635
 1089 0038 79217E13 		.word	327033209
 1090 003c 19CDE05B 		.word	1541459225
 1091              		.text
 1092              	.Letext0:
 1093              		.file 2 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/machine/_d
 1094              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/_stdin
 1095              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/lib/gcc/arm-none-eabi/7.3.1/incl
 1096              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/lock.h
 1097              		.file 6 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/_types
 1098              		.file 7 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/reent.
 1099              		.file 8 "25519/sha512.h"
 1100              		.file 9 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 sha512.c
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccmAXePE.s:16     .text.store64:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccmAXePE.s:22     .text.store64:0000000000000000 store64
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccmAXePE.s:70     .text.sha512_block:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccmAXePE.s:77     .text.sha512_block:0000000000000000 sha512_block
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccmAXePE.s:234    .text.sha512_block:00000000000000f8 $d
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccmAXePE.s:240    .text.sha512_block:00000000000000fc $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccmAXePE.s:682    .text.sha512_final:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccmAXePE.s:689    .text.sha512_final:0000000000000000 sha512_final
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccmAXePE.s:772    .text.sha512_get:0000000000000000 $t
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccmAXePE.s:779    .text.sha512_get:0000000000000000 sha512_get
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccmAXePE.s:1074   .rodata.sha512_initial_state:0000000000000000 sha512_initial_state
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccmAXePE.s:905    .rodata.round_k:0000000000000000 $d
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccmAXePE.s:909    .rodata.round_k:0000000000000000 round_k
/var/folders/gy/ljsb_4sn10j121t6zk2d77mw0000gn/T//ccmAXePE.s:1071   .rodata.sha512_initial_state:0000000000000000 $d

UNDEFINED SYMBOLS
memset
memcpy
