
build/enclave_stage1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000f0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075e8  080000f0  080000f0  000080f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000470  20000000  080076d8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000130  20000470  08007b48  00010470  2**2
                  ALLOC
  4 .bss.bIntPackSOF 00000001  200005a0  08007c78  00010470  2**0
                  ALLOC
  5 .bss.bDeviceState 00000004  200005a4  08007c7c  00010470  2**2
                  ALLOC
  6 .bss.recvBuffer 00000800  200005a8  08007c80  00010470  2**2
                  ALLOC
  7 .bss.uploadBlockLen 00000002  20000da8  08008480  00010470  2**1
                  ALLOC
  8 .bss.thisBlockLen 00000002  20000daa  08008482  00010470  2**1
                  ALLOC
  9 .bss.userFirmwareLen 00000004  20000dac  08008484  00010470  2**2
                  ALLOC
 10 .bss.userUploadType 00000001  20000db0  08008488  00010470  2**0
                  ALLOC
 11 .bss.dfuAppStatus 00000008  20000db4  0800848c  00010470  2**2
                  ALLOC
 12 .bss.dfuBusy  00000001  20000dbc  08008494  00010470  2**0
                  ALLOC
 13 .bss.Data_Mul_MaxPacketSize 00000001  20000dbd  08008495  00010470  2**0
                  ALLOC
 14 .bss.__malloc_sbrk_start 00000004  20000dc0  08008498  00010470  2**2
                  ALLOC
 15 .bss.__malloc_free_list 00000004  20000dc4  0800849c  00010470  2**2
                  ALLOC
 16 .bss.heap_end.4246 00000004  20000dc8  080084a0  00010470  2**2
                  ALLOC
 17 ._usrstack    00000100  20000dcc  080084a4  00010470  2**0
                  ALLOC
 18 .comment      00000070  00000000  00000000  00010470  2**0
                  CONTENTS, READONLY
 19 .ARM.attributes 0000002f  00000000  00000000  000104e0  2**0
                  CONTENTS, READONLY
 20 .debug_aranges 00000868  00000000  00000000  00010510  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_info   0000b4fd  00000000  00000000  00010d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_abbrev 00002b3f  00000000  00000000  0001c275  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   00003fc5  00000000  00000000  0001edb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_frame  00001888  00000000  00000000  00022d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    00002317  00000000  00000000  00024604  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_loc    0000a0a8  00000000  00000000  0002691b  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_ranges 00001178  00000000  00000000  000309c8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20005000 	andcs	r5, r0, r0
 8000004:	08000b4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, fp}
 8000008:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800000c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000010:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000014:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000018:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
	...
 800002c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000030:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800003c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000040:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000044:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000048:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800004c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000050:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000054:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000058:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800005c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000060:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000064:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000068:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800006c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000070:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000074:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000078:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800007c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000080:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000084:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000088:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800008c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000090:	08000fa9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, sl, fp}
 8000094:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000098:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800009c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000a0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000a4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000a8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000ac:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000b0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000b4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000b8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000bc:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000c0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000c4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000c8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000cc:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000d0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000d4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000d8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000dc:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000e0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000e4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000e8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000ec:	f108f85f 			; <UNDEFINED> instruction: 0xf108f85f

Disassembly of section .text:

080000f0 <GPIO_DeInit>:
 80000f0:	b508      	push	{r3, lr}
 80000f2:	4b2f      	ldr	r3, [pc, #188]	; (80001b0 <GPIO_DeInit+0xc0>)
 80000f4:	4298      	cmp	r0, r3
 80000f6:	d01e      	beq.n	8000136 <GPIO_DeInit+0x46>
 80000f8:	4b2e      	ldr	r3, [pc, #184]	; (80001b4 <GPIO_DeInit+0xc4>)
 80000fa:	4298      	cmp	r0, r3
 80000fc:	d025      	beq.n	800014a <GPIO_DeInit+0x5a>
 80000fe:	4b2e      	ldr	r3, [pc, #184]	; (80001b8 <GPIO_DeInit+0xc8>)
 8000100:	4298      	cmp	r0, r3
 8000102:	d02c      	beq.n	800015e <GPIO_DeInit+0x6e>
 8000104:	4b2d      	ldr	r3, [pc, #180]	; (80001bc <GPIO_DeInit+0xcc>)
 8000106:	4298      	cmp	r0, r3
 8000108:	d033      	beq.n	8000172 <GPIO_DeInit+0x82>
 800010a:	4b2d      	ldr	r3, [pc, #180]	; (80001c0 <GPIO_DeInit+0xd0>)
 800010c:	4298      	cmp	r0, r3
 800010e:	d03a      	beq.n	8000186 <GPIO_DeInit+0x96>
 8000110:	4b2c      	ldr	r3, [pc, #176]	; (80001c4 <GPIO_DeInit+0xd4>)
 8000112:	4298      	cmp	r0, r3
 8000114:	d041      	beq.n	800019a <GPIO_DeInit+0xaa>
 8000116:	4b2c      	ldr	r3, [pc, #176]	; (80001c8 <GPIO_DeInit+0xd8>)
 8000118:	4298      	cmp	r0, r3
 800011a:	d000      	beq.n	800011e <GPIO_DeInit+0x2e>
 800011c:	bd08      	pop	{r3, pc}
 800011e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000122:	2101      	movs	r1, #1
 8000124:	f000 faac 	bl	8000680 <RCC_APB2PeriphResetCmd>
 8000128:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800012c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000130:	2100      	movs	r1, #0
 8000132:	f000 baa5 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 8000136:	2004      	movs	r0, #4
 8000138:	2101      	movs	r1, #1
 800013a:	f000 faa1 	bl	8000680 <RCC_APB2PeriphResetCmd>
 800013e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000142:	2004      	movs	r0, #4
 8000144:	2100      	movs	r1, #0
 8000146:	f000 ba9b 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 800014a:	2008      	movs	r0, #8
 800014c:	2101      	movs	r1, #1
 800014e:	f000 fa97 	bl	8000680 <RCC_APB2PeriphResetCmd>
 8000152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000156:	2008      	movs	r0, #8
 8000158:	2100      	movs	r1, #0
 800015a:	f000 ba91 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 800015e:	2010      	movs	r0, #16
 8000160:	2101      	movs	r1, #1
 8000162:	f000 fa8d 	bl	8000680 <RCC_APB2PeriphResetCmd>
 8000166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800016a:	2010      	movs	r0, #16
 800016c:	2100      	movs	r1, #0
 800016e:	f000 ba87 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 8000172:	2020      	movs	r0, #32
 8000174:	2101      	movs	r1, #1
 8000176:	f000 fa83 	bl	8000680 <RCC_APB2PeriphResetCmd>
 800017a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800017e:	2020      	movs	r0, #32
 8000180:	2100      	movs	r1, #0
 8000182:	f000 ba7d 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 8000186:	2040      	movs	r0, #64	; 0x40
 8000188:	2101      	movs	r1, #1
 800018a:	f000 fa79 	bl	8000680 <RCC_APB2PeriphResetCmd>
 800018e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000192:	2040      	movs	r0, #64	; 0x40
 8000194:	2100      	movs	r1, #0
 8000196:	f000 ba73 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 800019a:	2080      	movs	r0, #128	; 0x80
 800019c:	2101      	movs	r1, #1
 800019e:	f000 fa6f 	bl	8000680 <RCC_APB2PeriphResetCmd>
 80001a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80001a6:	2080      	movs	r0, #128	; 0x80
 80001a8:	2100      	movs	r1, #0
 80001aa:	f000 ba69 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 80001ae:	bf00      	nop
 80001b0:	40010800 	andmi	r0, r1, r0, lsl #16
 80001b4:	40010c00 	andmi	r0, r1, r0, lsl #24
 80001b8:	40011000 	andmi	r1, r1, r0
 80001bc:	40011400 	andmi	r1, r1, r0, lsl #8
 80001c0:	40011800 	andmi	r1, r1, r0, lsl #16
 80001c4:	40011c00 	andmi	r1, r1, r0, lsl #24
 80001c8:	40012000 	andmi	r2, r1, r0

080001cc <GPIO_AFIODeInit>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	2001      	movs	r0, #1
 80001d0:	4601      	mov	r1, r0
 80001d2:	f000 fa55 	bl	8000680 <RCC_APB2PeriphResetCmd>
 80001d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80001da:	2001      	movs	r0, #1
 80001dc:	2100      	movs	r1, #0
 80001de:	f000 ba4f 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 80001e2:	bf00      	nop

080001e4 <GPIO_Init>:
 80001e4:	78cb      	ldrb	r3, [r1, #3]
 80001e6:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ea:	f003 060f 	and.w	r6, r3, #15
 80001ee:	06db      	lsls	r3, r3, #27
 80001f0:	bf48      	it	mi
 80001f2:	788b      	ldrbmi	r3, [r1, #2]
 80001f4:	880a      	ldrh	r2, [r1, #0]
 80001f6:	bf48      	it	mi
 80001f8:	431e      	orrmi	r6, r3
 80001fa:	f012 0fff 	tst.w	r2, #255	; 0xff
 80001fe:	d026      	beq.n	800024e <GPIO_Init+0x6a>
 8000200:	6807      	ldr	r7, [r0, #0]
 8000202:	2300      	movs	r3, #0
 8000204:	2501      	movs	r5, #1
 8000206:	f04f 080f 	mov.w	r8, #15
 800020a:	e003      	b.n	8000214 <GPIO_Init+0x30>
 800020c:	3301      	adds	r3, #1
 800020e:	2b08      	cmp	r3, #8
 8000210:	d01b      	beq.n	800024a <GPIO_Init+0x66>
 8000212:	880a      	ldrh	r2, [r1, #0]
 8000214:	fa05 f403 	lsl.w	r4, r5, r3
 8000218:	4022      	ands	r2, r4
 800021a:	42a2      	cmp	r2, r4
 800021c:	d1f6      	bne.n	800020c <GPIO_Init+0x28>
 800021e:	009c      	lsls	r4, r3, #2
 8000220:	fa08 f904 	lsl.w	r9, r8, r4
 8000224:	fa06 f404 	lsl.w	r4, r6, r4
 8000228:	f891 c003 	ldrb.w	ip, [r1, #3]
 800022c:	ea27 0709 	bic.w	r7, r7, r9
 8000230:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8000234:	ea47 0704 	orr.w	r7, r7, r4
 8000238:	d034      	beq.n	80002a4 <GPIO_Init+0xc0>
 800023a:	f1bc 0f48 	cmp.w	ip, #72	; 0x48
 800023e:	f103 0301 	add.w	r3, r3, #1
 8000242:	bf08      	it	eq
 8000244:	6102      	streq	r2, [r0, #16]
 8000246:	2b08      	cmp	r3, #8
 8000248:	d1e3      	bne.n	8000212 <GPIO_Init+0x2e>
 800024a:	6007      	str	r7, [r0, #0]
 800024c:	880a      	ldrh	r2, [r1, #0]
 800024e:	2aff      	cmp	r2, #255	; 0xff
 8000250:	d925      	bls.n	800029e <GPIO_Init+0xba>
 8000252:	6847      	ldr	r7, [r0, #4]
 8000254:	2300      	movs	r3, #0
 8000256:	2501      	movs	r5, #1
 8000258:	f04f 0c0f 	mov.w	ip, #15
 800025c:	e003      	b.n	8000266 <GPIO_Init+0x82>
 800025e:	3301      	adds	r3, #1
 8000260:	2b08      	cmp	r3, #8
 8000262:	d01b      	beq.n	800029c <GPIO_Init+0xb8>
 8000264:	880a      	ldrh	r2, [r1, #0]
 8000266:	f103 0408 	add.w	r4, r3, #8
 800026a:	fa05 f404 	lsl.w	r4, r5, r4
 800026e:	4022      	ands	r2, r4
 8000270:	42a2      	cmp	r2, r4
 8000272:	d1f4      	bne.n	800025e <GPIO_Init+0x7a>
 8000274:	009c      	lsls	r4, r3, #2
 8000276:	fa0c f904 	lsl.w	r9, ip, r4
 800027a:	fa06 f804 	lsl.w	r8, r6, r4
 800027e:	78cc      	ldrb	r4, [r1, #3]
 8000280:	3301      	adds	r3, #1
 8000282:	2c28      	cmp	r4, #40	; 0x28
 8000284:	bf04      	itt	eq
 8000286:	6142      	streq	r2, [r0, #20]
 8000288:	78cc      	ldrbeq	r4, [r1, #3]
 800028a:	ea27 0709 	bic.w	r7, r7, r9
 800028e:	2c48      	cmp	r4, #72	; 0x48
 8000290:	bf08      	it	eq
 8000292:	6102      	streq	r2, [r0, #16]
 8000294:	2b08      	cmp	r3, #8
 8000296:	ea47 0708 	orr.w	r7, r7, r8
 800029a:	d1e3      	bne.n	8000264 <GPIO_Init+0x80>
 800029c:	6047      	str	r7, [r0, #4]
 800029e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002a2:	4770      	bx	lr
 80002a4:	6142      	str	r2, [r0, #20]
 80002a6:	e7b1      	b.n	800020c <GPIO_Init+0x28>

080002a8 <GPIO_StructInit>:
 80002a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80002ac:	2202      	movs	r2, #2
 80002ae:	2304      	movs	r3, #4
 80002b0:	8001      	strh	r1, [r0, #0]
 80002b2:	7082      	strb	r2, [r0, #2]
 80002b4:	70c3      	strb	r3, [r0, #3]
 80002b6:	4770      	bx	lr

080002b8 <GPIO_ReadInputDataBit>:
 80002b8:	6883      	ldr	r3, [r0, #8]
 80002ba:	4219      	tst	r1, r3
 80002bc:	bf0c      	ite	eq
 80002be:	2000      	moveq	r0, #0
 80002c0:	2001      	movne	r0, #1
 80002c2:	4770      	bx	lr

080002c4 <GPIO_ReadInputData>:
 80002c4:	6880      	ldr	r0, [r0, #8]
 80002c6:	b280      	uxth	r0, r0
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop

080002cc <GPIO_ReadOutputDataBit>:
 80002cc:	68c3      	ldr	r3, [r0, #12]
 80002ce:	4219      	tst	r1, r3
 80002d0:	bf0c      	ite	eq
 80002d2:	2000      	moveq	r0, #0
 80002d4:	2001      	movne	r0, #1
 80002d6:	4770      	bx	lr

080002d8 <GPIO_ReadOutputData>:
 80002d8:	68c0      	ldr	r0, [r0, #12]
 80002da:	b280      	uxth	r0, r0
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <GPIO_SetBits>:
 80002e0:	6101      	str	r1, [r0, #16]
 80002e2:	4770      	bx	lr

080002e4 <GPIO_ResetBits>:
 80002e4:	6141      	str	r1, [r0, #20]
 80002e6:	4770      	bx	lr

080002e8 <GPIO_WriteBit>:
 80002e8:	b90a      	cbnz	r2, 80002ee <GPIO_WriteBit+0x6>
 80002ea:	6141      	str	r1, [r0, #20]
 80002ec:	4770      	bx	lr
 80002ee:	6101      	str	r1, [r0, #16]
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop

080002f4 <GPIO_Write>:
 80002f4:	60c1      	str	r1, [r0, #12]
 80002f6:	4770      	bx	lr

080002f8 <GPIO_PinLockConfig>:
 80002f8:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
 80002fc:	6183      	str	r3, [r0, #24]
 80002fe:	6181      	str	r1, [r0, #24]
 8000300:	6183      	str	r3, [r0, #24]
 8000302:	6983      	ldr	r3, [r0, #24]
 8000304:	6983      	ldr	r3, [r0, #24]
 8000306:	4770      	bx	lr

08000308 <GPIO_EventOutputConfig>:
 8000308:	b410      	push	{r4}
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <GPIO_EventOutputConfig+0x1c>)
 800030c:	f64f 7280 	movw	r2, #65408	; 0xff80
 8000310:	681c      	ldr	r4, [r3, #0]
 8000312:	4022      	ands	r2, r4
 8000314:	4311      	orrs	r1, r2
 8000316:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
 800031a:	6018      	str	r0, [r3, #0]
 800031c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40010000 	andmi	r0, r1, r0

08000328 <GPIO_EventOutputCmd>:
 8000328:	4b01      	ldr	r3, [pc, #4]	; (8000330 <GPIO_EventOutputCmd+0x8>)
 800032a:	6018      	str	r0, [r3, #0]
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	4220001c 	eormi	r0, r0, #28

08000334 <GPIO_PinRemapConfig>:
 8000334:	b430      	push	{r4, r5}
 8000336:	2800      	cmp	r0, #0
 8000338:	4b18      	ldr	r3, [pc, #96]	; (800039c <GPIO_PinRemapConfig+0x68>)
 800033a:	f400 1240 	and.w	r2, r0, #3145728	; 0x300000
 800033e:	bfb4      	ite	lt
 8000340:	69db      	ldrlt	r3, [r3, #28]
 8000342:	685b      	ldrge	r3, [r3, #4]
 8000344:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8000348:	b284      	uxth	r4, r0
 800034a:	d01f      	beq.n	800038c <GPIO_PinRemapConfig+0x58>
 800034c:	02c2      	lsls	r2, r0, #11
 800034e:	d514      	bpl.n	800037a <GPIO_PinRemapConfig+0x46>
 8000350:	f3c0 4203 	ubfx	r2, r0, #16, #4
 8000354:	2503      	movs	r5, #3
 8000356:	fa05 f202 	lsl.w	r2, r5, r2
 800035a:	ea23 0302 	bic.w	r3, r3, r2
 800035e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000362:	b119      	cbz	r1, 800036c <GPIO_PinRemapConfig+0x38>
 8000364:	0d42      	lsrs	r2, r0, #21
 8000366:	0112      	lsls	r2, r2, #4
 8000368:	4094      	lsls	r4, r2
 800036a:	4323      	orrs	r3, r4
 800036c:	4a0b      	ldr	r2, [pc, #44]	; (800039c <GPIO_PinRemapConfig+0x68>)
 800036e:	2800      	cmp	r0, #0
 8000370:	bfb4      	ite	lt
 8000372:	61d3      	strlt	r3, [r2, #28]
 8000374:	6053      	strge	r3, [r2, #4]
 8000376:	bc30      	pop	{r4, r5}
 8000378:	4770      	bx	lr
 800037a:	0d42      	lsrs	r2, r0, #21
 800037c:	0112      	lsls	r2, r2, #4
 800037e:	fa04 f202 	lsl.w	r2, r4, r2
 8000382:	ea23 0302 	bic.w	r3, r3, r2
 8000386:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800038a:	e7ea      	b.n	8000362 <GPIO_PinRemapConfig+0x2e>
 800038c:	4a03      	ldr	r2, [pc, #12]	; (800039c <GPIO_PinRemapConfig+0x68>)
 800038e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000392:	6855      	ldr	r5, [r2, #4]
 8000394:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8000398:	6055      	str	r5, [r2, #4]
 800039a:	e7e2      	b.n	8000362 <GPIO_PinRemapConfig+0x2e>
 800039c:	40010000 	andmi	r0, r1, r0

080003a0 <GPIO_EXTILineConfig>:
 80003a0:	f001 0303 	and.w	r3, r1, #3
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	220f      	movs	r2, #15
 80003a8:	409a      	lsls	r2, r3
 80003aa:	fa00 f303 	lsl.w	r3, r0, r3
 80003ae:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80003b2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80003b6:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 80003ba:	6888      	ldr	r0, [r1, #8]
 80003bc:	ea20 0202 	bic.w	r2, r0, r2
 80003c0:	608a      	str	r2, [r1, #8]
 80003c2:	688a      	ldr	r2, [r1, #8]
 80003c4:	4313      	orrs	r3, r2
 80003c6:	608b      	str	r3, [r1, #8]
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop

080003cc <GPIO_ETH_MediaInterfaceConfig>:
 80003cc:	4b01      	ldr	r3, [pc, #4]	; (80003d4 <GPIO_ETH_MediaInterfaceConfig+0x8>)
 80003ce:	6018      	str	r0, [r3, #0]
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	422000dc 	eormi	r0, r0, #220	; 0xdc

080003d8 <RCC_DeInit>:
 80003d8:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <RCC_DeInit+0x38>)
 80003da:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <RCC_DeInit+0x3c>)
 80003dc:	6818      	ldr	r0, [r3, #0]
 80003de:	f44f 011f 	mov.w	r1, #10420224	; 0x9f0000
 80003e2:	f040 0001 	orr.w	r0, r0, #1
 80003e6:	6018      	str	r0, [r3, #0]
 80003e8:	6858      	ldr	r0, [r3, #4]
 80003ea:	4002      	ands	r2, r0
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80003f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	685a      	ldr	r2, [r3, #4]
 8000404:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	6099      	str	r1, [r3, #8]
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40021000 	andmi	r1, r2, r0
 8000414:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000

08000418 <RCC_HSEConfig>:
 8000418:	4b0c      	ldr	r3, [pc, #48]	; (800044c <RCC_HSEConfig+0x34>)
 800041a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	d008      	beq.n	8000442 <RCC_HSEConfig+0x2a>
 8000430:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8000434:	d104      	bne.n	8000440 <RCC_HSEConfig+0x28>
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	4770      	bx	lr
 8000440:	4770      	bx	lr
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	4770      	bx	lr
 800044c:	40021000 	andmi	r1, r2, r0

08000450 <RCC_WaitForHSEStartUp>:
 8000450:	b082      	sub	sp, #8
 8000452:	2300      	movs	r3, #0
 8000454:	4a0b      	ldr	r2, [pc, #44]	; (8000484 <RCC_WaitForHSEStartUp+0x34>)
 8000456:	9301      	str	r3, [sp, #4]
 8000458:	6813      	ldr	r3, [r2, #0]
 800045a:	039b      	lsls	r3, r3, #14
 800045c:	d40c      	bmi.n	8000478 <RCC_WaitForHSEStartUp+0x28>
 800045e:	9b01      	ldr	r3, [sp, #4]
 8000460:	3301      	adds	r3, #1
 8000462:	9301      	str	r3, [sp, #4]
 8000464:	9b01      	ldr	r3, [sp, #4]
 8000466:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800046a:	d1f5      	bne.n	8000458 <RCC_WaitForHSEStartUp+0x8>
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <RCC_WaitForHSEStartUp+0x34>)
 800046e:	6818      	ldr	r0, [r3, #0]
 8000470:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8000474:	b002      	add	sp, #8
 8000476:	4770      	bx	lr
 8000478:	9b01      	ldr	r3, [sp, #4]
 800047a:	3301      	adds	r3, #1
 800047c:	9301      	str	r3, [sp, #4]
 800047e:	9b01      	ldr	r3, [sp, #4]
 8000480:	e7f4      	b.n	800046c <RCC_WaitForHSEStartUp+0x1c>
 8000482:	bf00      	nop
 8000484:	40021000 	andmi	r1, r2, r0

08000488 <RCC_AdjustHSICalibrationValue>:
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <RCC_AdjustHSICalibrationValue+0x10>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000490:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000494:	6018      	str	r0, [r3, #0]
 8000496:	4770      	bx	lr
 8000498:	40021000 	andmi	r1, r2, r0

0800049c <RCC_HSICmd>:
 800049c:	4b01      	ldr	r3, [pc, #4]	; (80004a4 <RCC_HSICmd+0x8>)
 800049e:	6018      	str	r0, [r3, #0]
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	42420000 	submi	r0, r2, #0

080004a8 <RCC_PLLConfig>:
 80004a8:	4b03      	ldr	r3, [pc, #12]	; (80004b8 <RCC_PLLConfig+0x10>)
 80004aa:	685a      	ldr	r2, [r3, #4]
 80004ac:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80004b0:	4311      	orrs	r1, r2
 80004b2:	4308      	orrs	r0, r1
 80004b4:	6058      	str	r0, [r3, #4]
 80004b6:	4770      	bx	lr
 80004b8:	40021000 	andmi	r1, r2, r0

080004bc <RCC_PLLCmd>:
 80004bc:	4b01      	ldr	r3, [pc, #4]	; (80004c4 <RCC_PLLCmd+0x8>)
 80004be:	6018      	str	r0, [r3, #0]
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	42420060 	submi	r0, r2, #96	; 0x60

080004c8 <RCC_SYSCLKConfig>:
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <RCC_SYSCLKConfig+0x10>)
 80004ca:	685a      	ldr	r2, [r3, #4]
 80004cc:	f022 0203 	bic.w	r2, r2, #3
 80004d0:	4310      	orrs	r0, r2
 80004d2:	6058      	str	r0, [r3, #4]
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40021000 	andmi	r1, r2, r0

080004dc <RCC_GetSYSCLKSource>:
 80004dc:	4b02      	ldr	r3, [pc, #8]	; (80004e8 <RCC_GetSYSCLKSource+0xc>)
 80004de:	6858      	ldr	r0, [r3, #4]
 80004e0:	f000 000c 	and.w	r0, r0, #12
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40021000 	andmi	r1, r2, r0

080004ec <RCC_HCLKConfig>:
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <RCC_HCLKConfig+0x10>)
 80004ee:	685a      	ldr	r2, [r3, #4]
 80004f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80004f4:	4310      	orrs	r0, r2
 80004f6:	6058      	str	r0, [r3, #4]
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40021000 	andmi	r1, r2, r0

08000500 <RCC_PCLK1Config>:
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <RCC_PCLK1Config+0x10>)
 8000502:	685a      	ldr	r2, [r3, #4]
 8000504:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000508:	4310      	orrs	r0, r2
 800050a:	6058      	str	r0, [r3, #4]
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	andmi	r1, r2, r0

08000514 <RCC_PCLK2Config>:
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <RCC_PCLK2Config+0x10>)
 8000516:	685a      	ldr	r2, [r3, #4]
 8000518:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 800051c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000520:	6058      	str	r0, [r3, #4]
 8000522:	4770      	bx	lr
 8000524:	40021000 	andmi	r1, r2, r0

08000528 <RCC_ITConfig>:
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <RCC_ITConfig+0x14>)
 800052a:	781a      	ldrb	r2, [r3, #0]
 800052c:	b919      	cbnz	r1, 8000536 <RCC_ITConfig+0xe>
 800052e:	ea22 0000 	bic.w	r0, r2, r0
 8000532:	7018      	strb	r0, [r3, #0]
 8000534:	4770      	bx	lr
 8000536:	4310      	orrs	r0, r2
 8000538:	7018      	strb	r0, [r3, #0]
 800053a:	4770      	bx	lr
 800053c:	40021009 	andmi	r1, r2, r9

08000540 <RCC_USBCLKConfig>:
 8000540:	4b01      	ldr	r3, [pc, #4]	; (8000548 <RCC_USBCLKConfig+0x8>)
 8000542:	6018      	str	r0, [r3, #0]
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	424200d8 	submi	r0, r2, #216	; 0xd8

0800054c <RCC_ADCCLKConfig>:
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <RCC_ADCCLKConfig+0x10>)
 800054e:	685a      	ldr	r2, [r3, #4]
 8000550:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000554:	4310      	orrs	r0, r2
 8000556:	6058      	str	r0, [r3, #4]
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40021000 	andmi	r1, r2, r0

08000560 <RCC_LSEConfig>:
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <RCC_LSEConfig+0x1c>)
 8000562:	2200      	movs	r2, #0
 8000564:	2801      	cmp	r0, #1
 8000566:	701a      	strb	r2, [r3, #0]
 8000568:	701a      	strb	r2, [r3, #0]
 800056a:	d005      	beq.n	8000578 <RCC_LSEConfig+0x18>
 800056c:	2804      	cmp	r0, #4
 800056e:	d102      	bne.n	8000576 <RCC_LSEConfig+0x16>
 8000570:	2205      	movs	r2, #5
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	4770      	bx	lr
 8000576:	4770      	bx	lr
 8000578:	7018      	strb	r0, [r3, #0]
 800057a:	4770      	bx	lr
 800057c:	40021020 	andmi	r1, r2, r0, lsr #32

08000580 <RCC_LSICmd>:
 8000580:	4b01      	ldr	r3, [pc, #4]	; (8000588 <RCC_LSICmd+0x8>)
 8000582:	6018      	str	r0, [r3, #0]
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	42420480 	submi	r0, r2, #128, 8	; 0x80000000

0800058c <RCC_RTCCLKConfig>:
 800058c:	4b02      	ldr	r3, [pc, #8]	; (8000598 <RCC_RTCCLKConfig+0xc>)
 800058e:	6a1a      	ldr	r2, [r3, #32]
 8000590:	4310      	orrs	r0, r2
 8000592:	6218      	str	r0, [r3, #32]
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40021000 	andmi	r1, r2, r0

0800059c <RCC_RTCCLKCmd>:
 800059c:	4b01      	ldr	r3, [pc, #4]	; (80005a4 <RCC_RTCCLKCmd+0x8>)
 800059e:	6018      	str	r0, [r3, #0]
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	4242043c 	submi	r0, r2, #60, 8	; 0x3c000000

080005a8 <RCC_GetClocksFreq>:
 80005a8:	b410      	push	{r4}
 80005aa:	4a1f      	ldr	r2, [pc, #124]	; (8000628 <RCC_GetClocksFreq+0x80>)
 80005ac:	6853      	ldr	r3, [r2, #4]
 80005ae:	f003 030c 	and.w	r3, r3, #12
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d001      	beq.n	80005ba <RCC_GetClocksFreq+0x12>
 80005b6:	2b08      	cmp	r3, #8
 80005b8:	d021      	beq.n	80005fe <RCC_GetClocksFreq+0x56>
 80005ba:	491c      	ldr	r1, [pc, #112]	; (800062c <RCC_GetClocksFreq+0x84>)
 80005bc:	6001      	str	r1, [r0, #0]
 80005be:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <RCC_GetClocksFreq+0x80>)
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <RCC_GetClocksFreq+0x88>)
 80005c2:	6854      	ldr	r4, [r2, #4]
 80005c4:	f3c4 1403 	ubfx	r4, r4, #4, #4
 80005c8:	5d1c      	ldrb	r4, [r3, r4]
 80005ca:	40e1      	lsrs	r1, r4
 80005cc:	6041      	str	r1, [r0, #4]
 80005ce:	6854      	ldr	r4, [r2, #4]
 80005d0:	f3c4 2402 	ubfx	r4, r4, #8, #3
 80005d4:	5d1c      	ldrb	r4, [r3, r4]
 80005d6:	fa21 f404 	lsr.w	r4, r1, r4
 80005da:	6084      	str	r4, [r0, #8]
 80005dc:	6854      	ldr	r4, [r2, #4]
 80005de:	f3c4 24c2 	ubfx	r4, r4, #11, #3
 80005e2:	5d1c      	ldrb	r4, [r3, r4]
 80005e4:	40e1      	lsrs	r1, r4
 80005e6:	60c1      	str	r1, [r0, #12]
 80005e8:	6852      	ldr	r2, [r2, #4]
 80005ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005ee:	f3c2 3281 	ubfx	r2, r2, #14, #2
 80005f2:	4413      	add	r3, r2
 80005f4:	7c1b      	ldrb	r3, [r3, #16]
 80005f6:	fbb1 f1f3 	udiv	r1, r1, r3
 80005fa:	6101      	str	r1, [r0, #16]
 80005fc:	4770      	bx	lr
 80005fe:	6851      	ldr	r1, [r2, #4]
 8000600:	6853      	ldr	r3, [r2, #4]
 8000602:	f3c1 4183 	ubfx	r1, r1, #18, #4
 8000606:	03dc      	lsls	r4, r3, #15
 8000608:	f101 0102 	add.w	r1, r1, #2
 800060c:	d507      	bpl.n	800061e <RCC_GetClocksFreq+0x76>
 800060e:	6853      	ldr	r3, [r2, #4]
 8000610:	039b      	lsls	r3, r3, #14
 8000612:	d404      	bmi.n	800061e <RCC_GetClocksFreq+0x76>
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <RCC_GetClocksFreq+0x84>)
 8000616:	fb03 f101 	mul.w	r1, r3, r1
 800061a:	6001      	str	r1, [r0, #0]
 800061c:	e7cf      	b.n	80005be <RCC_GetClocksFreq+0x16>
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <RCC_GetClocksFreq+0x8c>)
 8000620:	fb03 f101 	mul.w	r1, r3, r1
 8000624:	6001      	str	r1, [r0, #0]
 8000626:	e7ca      	b.n	80005be <RCC_GetClocksFreq+0x16>
 8000628:	40021000 	andmi	r1, r2, r0
 800062c:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8000630:	20000000 	andcs	r0, r0, r0
 8000634:	003d0900 	eorseq	r0, sp, r0, lsl #18

08000638 <RCC_AHBPeriphClockCmd>:
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <RCC_AHBPeriphClockCmd+0x14>)
 800063a:	695a      	ldr	r2, [r3, #20]
 800063c:	b919      	cbnz	r1, 8000646 <RCC_AHBPeriphClockCmd+0xe>
 800063e:	ea22 0000 	bic.w	r0, r2, r0
 8000642:	6158      	str	r0, [r3, #20]
 8000644:	4770      	bx	lr
 8000646:	4310      	orrs	r0, r2
 8000648:	6158      	str	r0, [r3, #20]
 800064a:	4770      	bx	lr
 800064c:	40021000 	andmi	r1, r2, r0

08000650 <RCC_APB2PeriphClockCmd>:
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <RCC_APB2PeriphClockCmd+0x14>)
 8000652:	699a      	ldr	r2, [r3, #24]
 8000654:	b919      	cbnz	r1, 800065e <RCC_APB2PeriphClockCmd+0xe>
 8000656:	ea22 0000 	bic.w	r0, r2, r0
 800065a:	6198      	str	r0, [r3, #24]
 800065c:	4770      	bx	lr
 800065e:	4310      	orrs	r0, r2
 8000660:	6198      	str	r0, [r3, #24]
 8000662:	4770      	bx	lr
 8000664:	40021000 	andmi	r1, r2, r0

08000668 <RCC_APB1PeriphClockCmd>:
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <RCC_APB1PeriphClockCmd+0x14>)
 800066a:	69da      	ldr	r2, [r3, #28]
 800066c:	b919      	cbnz	r1, 8000676 <RCC_APB1PeriphClockCmd+0xe>
 800066e:	ea22 0000 	bic.w	r0, r2, r0
 8000672:	61d8      	str	r0, [r3, #28]
 8000674:	4770      	bx	lr
 8000676:	4310      	orrs	r0, r2
 8000678:	61d8      	str	r0, [r3, #28]
 800067a:	4770      	bx	lr
 800067c:	40021000 	andmi	r1, r2, r0

08000680 <RCC_APB2PeriphResetCmd>:
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <RCC_APB2PeriphResetCmd+0x14>)
 8000682:	68da      	ldr	r2, [r3, #12]
 8000684:	b919      	cbnz	r1, 800068e <RCC_APB2PeriphResetCmd+0xe>
 8000686:	ea22 0000 	bic.w	r0, r2, r0
 800068a:	60d8      	str	r0, [r3, #12]
 800068c:	4770      	bx	lr
 800068e:	4310      	orrs	r0, r2
 8000690:	60d8      	str	r0, [r3, #12]
 8000692:	4770      	bx	lr
 8000694:	40021000 	andmi	r1, r2, r0

08000698 <RCC_APB1PeriphResetCmd>:
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <RCC_APB1PeriphResetCmd+0x14>)
 800069a:	691a      	ldr	r2, [r3, #16]
 800069c:	b919      	cbnz	r1, 80006a6 <RCC_APB1PeriphResetCmd+0xe>
 800069e:	ea22 0000 	bic.w	r0, r2, r0
 80006a2:	6118      	str	r0, [r3, #16]
 80006a4:	4770      	bx	lr
 80006a6:	4310      	orrs	r0, r2
 80006a8:	6118      	str	r0, [r3, #16]
 80006aa:	4770      	bx	lr
 80006ac:	40021000 	andmi	r1, r2, r0

080006b0 <RCC_BackupResetCmd>:
 80006b0:	4b01      	ldr	r3, [pc, #4]	; (80006b8 <RCC_BackupResetCmd+0x8>)
 80006b2:	6018      	str	r0, [r3, #0]
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	42420440 	submi	r0, r2, #64, 8	; 0x40000000

080006bc <RCC_ClockSecuritySystemCmd>:
 80006bc:	4b01      	ldr	r3, [pc, #4]	; (80006c4 <RCC_ClockSecuritySystemCmd+0x8>)
 80006be:	6018      	str	r0, [r3, #0]
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	4242004c 	submi	r0, r2, #76	; 0x4c

080006c8 <RCC_MCOConfig>:
 80006c8:	4b01      	ldr	r3, [pc, #4]	; (80006d0 <RCC_MCOConfig+0x8>)
 80006ca:	7018      	strb	r0, [r3, #0]
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40021007 	andmi	r1, r2, r7

080006d4 <RCC_GetFlagStatus>:
 80006d4:	0943      	lsrs	r3, r0, #5
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d00b      	beq.n	80006f2 <RCC_GetFlagStatus+0x1e>
 80006da:	2b02      	cmp	r3, #2
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <RCC_GetFlagStatus+0x30>)
 80006de:	f000 001f 	and.w	r0, r0, #31
 80006e2:	bf0c      	ite	eq
 80006e4:	6a1b      	ldreq	r3, [r3, #32]
 80006e6:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
 80006e8:	fa23 f000 	lsr.w	r0, r3, r0
 80006ec:	f000 0001 	and.w	r0, r0, #1
 80006f0:	4770      	bx	lr
 80006f2:	4b04      	ldr	r3, [pc, #16]	; (8000704 <RCC_GetFlagStatus+0x30>)
 80006f4:	f000 001f 	and.w	r0, r0, #31
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	fa23 f000 	lsr.w	r0, r3, r0
 80006fe:	f000 0001 	and.w	r0, r0, #1
 8000702:	4770      	bx	lr
 8000704:	40021000 	andmi	r1, r2, r0

08000708 <RCC_ClearFlag>:
 8000708:	4b02      	ldr	r3, [pc, #8]	; (8000714 <RCC_ClearFlag+0xc>)
 800070a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800070c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
 8000712:	4770      	bx	lr
 8000714:	40021000 	andmi	r1, r2, r0

08000718 <RCC_GetITStatus>:
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <RCC_GetITStatus+0x10>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	4218      	tst	r0, r3
 800071e:	bf0c      	ite	eq
 8000720:	2000      	moveq	r0, #0
 8000722:	2001      	movne	r0, #1
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40021000 	andmi	r1, r2, r0

0800072c <RCC_ClearITPendingBit>:
 800072c:	4b01      	ldr	r3, [pc, #4]	; (8000734 <RCC_ClearITPendingBit+0x8>)
 800072e:	7018      	strb	r0, [r3, #0]
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	4002100a 	andmi	r1, r2, sl

08000738 <USART_DeInit>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <USART_DeInit+0x9c>)
 800073c:	4298      	cmp	r0, r3
 800073e:	d018      	beq.n	8000772 <USART_DeInit+0x3a>
 8000740:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <USART_DeInit+0xa0>)
 8000742:	4298      	cmp	r0, r3
 8000744:	d021      	beq.n	800078a <USART_DeInit+0x52>
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <USART_DeInit+0xa4>)
 8000748:	4298      	cmp	r0, r3
 800074a:	d02a      	beq.n	80007a2 <USART_DeInit+0x6a>
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <USART_DeInit+0xa8>)
 800074e:	4298      	cmp	r0, r3
 8000750:	d033      	beq.n	80007ba <USART_DeInit+0x82>
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <USART_DeInit+0xac>)
 8000754:	4298      	cmp	r0, r3
 8000756:	d000      	beq.n	800075a <USART_DeInit+0x22>
 8000758:	bd08      	pop	{r3, pc}
 800075a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800075e:	2101      	movs	r1, #1
 8000760:	f7ff ff9a 	bl	8000698 <RCC_APB1PeriphResetCmd>
 8000764:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000768:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800076c:	2100      	movs	r1, #0
 800076e:	f7ff bf93 	b.w	8000698 <RCC_APB1PeriphResetCmd>
 8000772:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000776:	2101      	movs	r1, #1
 8000778:	f7ff ff82 	bl	8000680 <RCC_APB2PeriphResetCmd>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000784:	2100      	movs	r1, #0
 8000786:	f7ff bf7b 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 800078a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800078e:	2101      	movs	r1, #1
 8000790:	f7ff ff82 	bl	8000698 <RCC_APB1PeriphResetCmd>
 8000794:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000798:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800079c:	2100      	movs	r1, #0
 800079e:	f7ff bf7b 	b.w	8000698 <RCC_APB1PeriphResetCmd>
 80007a2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80007a6:	2101      	movs	r1, #1
 80007a8:	f7ff ff76 	bl	8000698 <RCC_APB1PeriphResetCmd>
 80007ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007b0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80007b4:	2100      	movs	r1, #0
 80007b6:	f7ff bf6f 	b.w	8000698 <RCC_APB1PeriphResetCmd>
 80007ba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80007be:	2101      	movs	r1, #1
 80007c0:	f7ff ff6a 	bl	8000698 <RCC_APB1PeriphResetCmd>
 80007c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80007cc:	2100      	movs	r1, #0
 80007ce:	f7ff bf63 	b.w	8000698 <RCC_APB1PeriphResetCmd>
 80007d2:	bf00      	nop
 80007d4:	40013800 	andmi	r3, r1, r0, lsl #16
 80007d8:	40004400 	andmi	r4, r0, r0, lsl #8
 80007dc:	40004800 	andmi	r4, r0, r0, lsl #16
 80007e0:	40004c00 	andmi	r4, r0, r0, lsl #24
 80007e4:	40005000 	andmi	r5, r0, r0

080007e8 <USART_Init>:
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	8a03      	ldrh	r3, [r0, #16]
 80007ec:	88ca      	ldrh	r2, [r1, #6]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007f4:	4313      	orrs	r3, r2
 80007f6:	8203      	strh	r3, [r0, #16]
 80007f8:	8982      	ldrh	r2, [r0, #12]
 80007fa:	4604      	mov	r4, r0
 80007fc:	890b      	ldrh	r3, [r1, #8]
 80007fe:	8888      	ldrh	r0, [r1, #4]
 8000800:	460d      	mov	r5, r1
 8000802:	b292      	uxth	r2, r2
 8000804:	8949      	ldrh	r1, [r1, #10]
 8000806:	4303      	orrs	r3, r0
 8000808:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800080c:	430b      	orrs	r3, r1
 800080e:	f022 020c 	bic.w	r2, r2, #12
 8000812:	4313      	orrs	r3, r2
 8000814:	b29b      	uxth	r3, r3
 8000816:	81a3      	strh	r3, [r4, #12]
 8000818:	8aa3      	ldrh	r3, [r4, #20]
 800081a:	89aa      	ldrh	r2, [r5, #12]
 800081c:	b29b      	uxth	r3, r3
 800081e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000822:	b087      	sub	sp, #28
 8000824:	4313      	orrs	r3, r2
 8000826:	82a3      	strh	r3, [r4, #20]
 8000828:	a801      	add	r0, sp, #4
 800082a:	f7ff febd 	bl	80005a8 <RCC_GetClocksFreq>
 800082e:	89a1      	ldrh	r1, [r4, #12]
 8000830:	9a04      	ldr	r2, [sp, #16]
 8000832:	481a      	ldr	r0, [pc, #104]	; (800089c <USART_Init+0xb4>)
 8000834:	9b03      	ldr	r3, [sp, #12]
 8000836:	b209      	sxth	r1, r1
 8000838:	4284      	cmp	r4, r0
 800083a:	bf08      	it	eq
 800083c:	4613      	moveq	r3, r2
 800083e:	682a      	ldr	r2, [r5, #0]
 8000840:	2900      	cmp	r1, #0
 8000842:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000846:	bfb4      	ite	lt
 8000848:	0052      	lsllt	r2, r2, #1
 800084a:	0092      	lslge	r2, r2, #2
 800084c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000850:	4913      	ldr	r1, [pc, #76]	; (80008a0 <USART_Init+0xb8>)
 8000852:	fbb3 f3f2 	udiv	r3, r3, r2
 8000856:	fba1 5203 	umull	r5, r2, r1, r3
 800085a:	89a0      	ldrh	r0, [r4, #12]
 800085c:	0952      	lsrs	r2, r2, #5
 800085e:	b200      	sxth	r0, r0
 8000860:	2564      	movs	r5, #100	; 0x64
 8000862:	2800      	cmp	r0, #0
 8000864:	fb02 3315 	mls	r3, r2, r5, r3
 8000868:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800086c:	db0a      	blt.n	8000884 <USART_Init+0x9c>
 800086e:	011b      	lsls	r3, r3, #4
 8000870:	3332      	adds	r3, #50	; 0x32
 8000872:	fba1 5103 	umull	r5, r1, r1, r3
 8000876:	f3c1 1143 	ubfx	r1, r1, #5, #4
 800087a:	430a      	orrs	r2, r1
 800087c:	b292      	uxth	r2, r2
 800087e:	8122      	strh	r2, [r4, #8]
 8000880:	b007      	add	sp, #28
 8000882:	bd30      	pop	{r4, r5, pc}
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	3332      	adds	r3, #50	; 0x32
 8000888:	fba1 0103 	umull	r0, r1, r1, r3
 800088c:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8000890:	430a      	orrs	r2, r1
 8000892:	b292      	uxth	r2, r2
 8000894:	8122      	strh	r2, [r4, #8]
 8000896:	b007      	add	sp, #28
 8000898:	bd30      	pop	{r4, r5, pc}
 800089a:	bf00      	nop
 800089c:	40013800 	andmi	r3, r1, r0, lsl #16
 80008a0:	51eb851f 	mvnpl	r8, pc, lsl r5

080008a4 <USART_StructInit>:
 80008a4:	2300      	movs	r3, #0
 80008a6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80008aa:	220c      	movs	r2, #12
 80008ac:	6001      	str	r1, [r0, #0]
 80008ae:	8142      	strh	r2, [r0, #10]
 80008b0:	8083      	strh	r3, [r0, #4]
 80008b2:	80c3      	strh	r3, [r0, #6]
 80008b4:	8103      	strh	r3, [r0, #8]
 80008b6:	8183      	strh	r3, [r0, #12]
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop

080008bc <USART_ClockInit>:
 80008bc:	b430      	push	{r4, r5}
 80008be:	884d      	ldrh	r5, [r1, #2]
 80008c0:	880b      	ldrh	r3, [r1, #0]
 80008c2:	888c      	ldrh	r4, [r1, #4]
 80008c4:	8a02      	ldrh	r2, [r0, #16]
 80008c6:	432b      	orrs	r3, r5
 80008c8:	88c9      	ldrh	r1, [r1, #6]
 80008ca:	4323      	orrs	r3, r4
 80008cc:	b292      	uxth	r2, r2
 80008ce:	430b      	orrs	r3, r1
 80008d0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80008d4:	4313      	orrs	r3, r2
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	8203      	strh	r3, [r0, #16]
 80008da:	bc30      	pop	{r4, r5}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop

080008e0 <USART_ClockStructInit>:
 80008e0:	2300      	movs	r3, #0
 80008e2:	8003      	strh	r3, [r0, #0]
 80008e4:	8043      	strh	r3, [r0, #2]
 80008e6:	8083      	strh	r3, [r0, #4]
 80008e8:	80c3      	strh	r3, [r0, #6]
 80008ea:	4770      	bx	lr

080008ec <USART_Cmd>:
 80008ec:	8983      	ldrh	r3, [r0, #12]
 80008ee:	b929      	cbnz	r1, 80008fc <USART_Cmd+0x10>
 80008f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008f4:	041b      	lsls	r3, r3, #16
 80008f6:	0c1b      	lsrs	r3, r3, #16
 80008f8:	8183      	strh	r3, [r0, #12]
 80008fa:	4770      	bx	lr
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000902:	8183      	strh	r3, [r0, #12]
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <USART_ITConfig>:
 8000908:	f001 031f 	and.w	r3, r1, #31
 800090c:	b410      	push	{r4}
 800090e:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8000912:	2401      	movs	r4, #1
 8000914:	42a1      	cmp	r1, r4
 8000916:	fa04 f303 	lsl.w	r3, r4, r3
 800091a:	d010      	beq.n	800093e <USART_ITConfig+0x36>
 800091c:	2902      	cmp	r1, #2
 800091e:	bf0c      	ite	eq
 8000920:	3010      	addeq	r0, #16
 8000922:	3014      	addne	r0, #20
 8000924:	6804      	ldr	r4, [r0, #0]
 8000926:	b92a      	cbnz	r2, 8000934 <USART_ITConfig+0x2c>
 8000928:	ea24 0303 	bic.w	r3, r4, r3
 800092c:	6003      	str	r3, [r0, #0]
 800092e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	4323      	orrs	r3, r4
 8000936:	6003      	str	r3, [r0, #0]
 8000938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	300c      	adds	r0, #12
 8000940:	e7f0      	b.n	8000924 <USART_ITConfig+0x1c>
 8000942:	bf00      	nop

08000944 <USART_DMACmd>:
 8000944:	8a83      	ldrh	r3, [r0, #20]
 8000946:	b29b      	uxth	r3, r3
 8000948:	b91a      	cbnz	r2, 8000952 <USART_DMACmd+0xe>
 800094a:	ea23 0101 	bic.w	r1, r3, r1
 800094e:	8281      	strh	r1, [r0, #20]
 8000950:	4770      	bx	lr
 8000952:	4319      	orrs	r1, r3
 8000954:	8281      	strh	r1, [r0, #20]
 8000956:	4770      	bx	lr

08000958 <USART_SetAddress>:
 8000958:	8a03      	ldrh	r3, [r0, #16]
 800095a:	f023 030f 	bic.w	r3, r3, #15
 800095e:	041b      	lsls	r3, r3, #16
 8000960:	0c1b      	lsrs	r3, r3, #16
 8000962:	8203      	strh	r3, [r0, #16]
 8000964:	8a03      	ldrh	r3, [r0, #16]
 8000966:	b29b      	uxth	r3, r3
 8000968:	4319      	orrs	r1, r3
 800096a:	8201      	strh	r1, [r0, #16]
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <USART_WakeUpConfig>:
 8000970:	8983      	ldrh	r3, [r0, #12]
 8000972:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000976:	041b      	lsls	r3, r3, #16
 8000978:	0c1b      	lsrs	r3, r3, #16
 800097a:	8183      	strh	r3, [r0, #12]
 800097c:	8983      	ldrh	r3, [r0, #12]
 800097e:	b29b      	uxth	r3, r3
 8000980:	4319      	orrs	r1, r3
 8000982:	8181      	strh	r1, [r0, #12]
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <USART_ReceiverWakeUpCmd>:
 8000988:	8983      	ldrh	r3, [r0, #12]
 800098a:	b929      	cbnz	r1, 8000998 <USART_ReceiverWakeUpCmd+0x10>
 800098c:	f023 0302 	bic.w	r3, r3, #2
 8000990:	041b      	lsls	r3, r3, #16
 8000992:	0c1b      	lsrs	r3, r3, #16
 8000994:	8183      	strh	r3, [r0, #12]
 8000996:	4770      	bx	lr
 8000998:	b29b      	uxth	r3, r3
 800099a:	f043 0302 	orr.w	r3, r3, #2
 800099e:	8183      	strh	r3, [r0, #12]
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <USART_LINBreakDetectLengthConfig>:
 80009a4:	8a03      	ldrh	r3, [r0, #16]
 80009a6:	f023 0320 	bic.w	r3, r3, #32
 80009aa:	041b      	lsls	r3, r3, #16
 80009ac:	0c1b      	lsrs	r3, r3, #16
 80009ae:	8203      	strh	r3, [r0, #16]
 80009b0:	8a03      	ldrh	r3, [r0, #16]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	4319      	orrs	r1, r3
 80009b6:	8201      	strh	r1, [r0, #16]
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <USART_LINCmd>:
 80009bc:	8a03      	ldrh	r3, [r0, #16]
 80009be:	b929      	cbnz	r1, 80009cc <USART_LINCmd+0x10>
 80009c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009c4:	041b      	lsls	r3, r3, #16
 80009c6:	0c1b      	lsrs	r3, r3, #16
 80009c8:	8203      	strh	r3, [r0, #16]
 80009ca:	4770      	bx	lr
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d2:	8203      	strh	r3, [r0, #16]
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <USART_SendData>:
 80009d8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80009dc:	8081      	strh	r1, [r0, #4]
 80009de:	4770      	bx	lr

080009e0 <USART_ReceiveData>:
 80009e0:	8880      	ldrh	r0, [r0, #4]
 80009e2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80009e6:	4770      	bx	lr

080009e8 <USART_SendBreak>:
 80009e8:	8983      	ldrh	r3, [r0, #12]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	8183      	strh	r3, [r0, #12]
 80009f2:	4770      	bx	lr

080009f4 <USART_SetGuardTime>:
 80009f4:	8b03      	ldrh	r3, [r0, #24]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	8303      	strh	r3, [r0, #24]
 80009fa:	8b03      	ldrh	r3, [r0, #24]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8000a02:	8301      	strh	r1, [r0, #24]
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <USART_SetPrescaler>:
 8000a08:	8b03      	ldrh	r3, [r0, #24]
 8000a0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000a0e:	8303      	strh	r3, [r0, #24]
 8000a10:	8b03      	ldrh	r3, [r0, #24]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	4319      	orrs	r1, r3
 8000a16:	8301      	strh	r1, [r0, #24]
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <USART_SmartCardCmd>:
 8000a1c:	8a83      	ldrh	r3, [r0, #20]
 8000a1e:	b929      	cbnz	r1, 8000a2c <USART_SmartCardCmd+0x10>
 8000a20:	f023 0320 	bic.w	r3, r3, #32
 8000a24:	041b      	lsls	r3, r3, #16
 8000a26:	0c1b      	lsrs	r3, r3, #16
 8000a28:	8283      	strh	r3, [r0, #20]
 8000a2a:	4770      	bx	lr
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	f043 0320 	orr.w	r3, r3, #32
 8000a32:	8283      	strh	r3, [r0, #20]
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <USART_SmartCardNACKCmd>:
 8000a38:	8a83      	ldrh	r3, [r0, #20]
 8000a3a:	b929      	cbnz	r1, 8000a48 <USART_SmartCardNACKCmd+0x10>
 8000a3c:	f023 0310 	bic.w	r3, r3, #16
 8000a40:	041b      	lsls	r3, r3, #16
 8000a42:	0c1b      	lsrs	r3, r3, #16
 8000a44:	8283      	strh	r3, [r0, #20]
 8000a46:	4770      	bx	lr
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	8283      	strh	r3, [r0, #20]
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <USART_HalfDuplexCmd>:
 8000a54:	8a83      	ldrh	r3, [r0, #20]
 8000a56:	b929      	cbnz	r1, 8000a64 <USART_HalfDuplexCmd+0x10>
 8000a58:	f023 0308 	bic.w	r3, r3, #8
 8000a5c:	041b      	lsls	r3, r3, #16
 8000a5e:	0c1b      	lsrs	r3, r3, #16
 8000a60:	8283      	strh	r3, [r0, #20]
 8000a62:	4770      	bx	lr
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	f043 0308 	orr.w	r3, r3, #8
 8000a6a:	8283      	strh	r3, [r0, #20]
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <USART_OverSampling8Cmd>:
 8000a70:	8983      	ldrh	r3, [r0, #12]
 8000a72:	b919      	cbnz	r1, 8000a7c <USART_OverSampling8Cmd+0xc>
 8000a74:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a78:	8183      	strh	r3, [r0, #12]
 8000a7a:	4770      	bx	lr
 8000a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	8183      	strh	r3, [r0, #12]
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <USART_OneBitMethodCmd>:
 8000a8c:	8a83      	ldrh	r3, [r0, #20]
 8000a8e:	b929      	cbnz	r1, 8000a9c <USART_OneBitMethodCmd+0x10>
 8000a90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a94:	041b      	lsls	r3, r3, #16
 8000a96:	0c1b      	lsrs	r3, r3, #16
 8000a98:	8283      	strh	r3, [r0, #20]
 8000a9a:	4770      	bx	lr
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aa2:	8283      	strh	r3, [r0, #20]
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <USART_IrDAConfig>:
 8000aa8:	8a83      	ldrh	r3, [r0, #20]
 8000aaa:	f023 0304 	bic.w	r3, r3, #4
 8000aae:	041b      	lsls	r3, r3, #16
 8000ab0:	0c1b      	lsrs	r3, r3, #16
 8000ab2:	8283      	strh	r3, [r0, #20]
 8000ab4:	8a83      	ldrh	r3, [r0, #20]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	4319      	orrs	r1, r3
 8000aba:	8281      	strh	r1, [r0, #20]
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <USART_IrDACmd>:
 8000ac0:	8a83      	ldrh	r3, [r0, #20]
 8000ac2:	b929      	cbnz	r1, 8000ad0 <USART_IrDACmd+0x10>
 8000ac4:	f023 0302 	bic.w	r3, r3, #2
 8000ac8:	041b      	lsls	r3, r3, #16
 8000aca:	0c1b      	lsrs	r3, r3, #16
 8000acc:	8283      	strh	r3, [r0, #20]
 8000ace:	4770      	bx	lr
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	f043 0302 	orr.w	r3, r3, #2
 8000ad6:	8283      	strh	r3, [r0, #20]
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <USART_GetFlagStatus>:
 8000adc:	8803      	ldrh	r3, [r0, #0]
 8000ade:	4219      	tst	r1, r3
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2000      	moveq	r0, #0
 8000ae4:	2001      	movne	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <USART_ClearFlag>:
 8000ae8:	43c9      	mvns	r1, r1
 8000aea:	b289      	uxth	r1, r1
 8000aec:	8001      	strh	r1, [r0, #0]
 8000aee:	4770      	bx	lr

08000af0 <USART_GetITStatus>:
 8000af0:	b410      	push	{r4}
 8000af2:	f3c1 1342 	ubfx	r3, r1, #5, #3
 8000af6:	2401      	movs	r4, #1
 8000af8:	f001 021f 	and.w	r2, r1, #31
 8000afc:	42a3      	cmp	r3, r4
 8000afe:	fa04 f202 	lsl.w	r2, r4, r2
 8000b02:	d017      	beq.n	8000b34 <USART_GetITStatus+0x44>
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	bf0c      	ite	eq
 8000b08:	8a03      	ldrheq	r3, [r0, #16]
 8000b0a:	8a83      	ldrhne	r3, [r0, #20]
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	4013      	ands	r3, r2
 8000b10:	8802      	ldrh	r2, [r0, #0]
 8000b12:	b292      	uxth	r2, r2
 8000b14:	b153      	cbz	r3, 8000b2c <USART_GetITStatus+0x3c>
 8000b16:	0a09      	lsrs	r1, r1, #8
 8000b18:	2301      	movs	r3, #1
 8000b1a:	fa03 f101 	lsl.w	r1, r3, r1
 8000b1e:	4211      	tst	r1, r2
 8000b20:	bf0c      	ite	eq
 8000b22:	2000      	moveq	r0, #0
 8000b24:	2001      	movne	r0, #1
 8000b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	8983      	ldrh	r3, [r0, #12]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	4013      	ands	r3, r2
 8000b3a:	e7e9      	b.n	8000b10 <USART_GetITStatus+0x20>

08000b3c <USART_ClearITPendingBit>:
 8000b3c:	0a09      	lsrs	r1, r1, #8
 8000b3e:	2301      	movs	r3, #1
 8000b40:	408b      	lsls	r3, r1
 8000b42:	43db      	mvns	r3, r3
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	8003      	strh	r3, [r0, #0]
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b4e:	f000 b804 	b.w	8000b5a <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <LoopFillZerobss+0xe>)
	ldr	r3, [r3, r1]
 8000b54:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b56:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b58:	3104      	adds	r1, #4

08000b5a <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <LoopFillZerobss+0x12>)
	ldr	r3, =_edata
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <LoopFillZerobss+0x16>)
	adds	r2, r0, r1
 8000b5e:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b60:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b62:	f4ff aff6 	bcc.w	8000b52 <CopyDataInit>
	ldr	r2, =_sbss
 8000b66:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <LoopFillZerobss+0x1a>)
	b	LoopFillZerobss
 8000b68:	f000 b803 	b.w	8000b72 <LoopFillZerobss>

08000b6c <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b6c:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b6e:	f842 3b04 	str.w	r3, [r2], #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <LoopFillZerobss+0x1e>)
	cmp	r2, r3
 8000b74:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b76:	f4ff aff9 	bcc.w	8000b6c <FillZerobss>
/* Call the application's entry point.*/
	bl	main
 8000b7a:	f000 fa87 	bl	800108c <main>
	bx	lr
 8000b7e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000b80:	080076d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip, sp, lr}
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b84:	20000000 	andcs	r0, r0, r0
	ldr	r3, =_edata
 8000b88:	20000470 	andcs	r0, r0, r0, ror r4
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000b8c:	20000470 	andcs	r0, r0, r0, ror r4
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b90:	200005a0 	andcs	r0, r0, r0, lsr #11

08000b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b94:	f7ff bffe 	b.w	8000b94 <ADC1_2_IRQHandler>

08000b98 <nothingProc>:
}


/* dummy proc */
void nothingProc(void)
{
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <usbStatusIn>:
    bDeviceState = ATTACHED;
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
}

void usbStatusIn(void)
{
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <usbStatusOut>:
    return;
}

void usbStatusOut(void)
{
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <usbGetInterfaceSetting>:

RESULT usbGetInterfaceSetting(u8 interface, u8 altSetting)
{
    // alt setting 0 -> program RAM, alt setting 1 or higher -> FLASH
    if (interface > NUM_ALT_SETTINGS) {
        return USB_UNSUPPORT;
 8000ba4:	2803      	cmp	r0, #3
    }

    return USB_SUCCESS;
}
 8000ba6:	bf8c      	ite	hi
 8000ba8:	2002      	movhi	r0, #2
 8000baa:	2000      	movls	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <usbGetConfiguration>:
 * in the core but we are given these callbacks at the
 * application level
 *******************************************/

void usbGetConfiguration(void)
{
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <usbSetConfiguration>:
    /* nothing process */
}

void usbSetConfiguration(void)
{
    if (pInformation->Current_Configuration != 0) {
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <usbSetConfiguration+0x10>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	7a9b      	ldrb	r3, [r3, #10]
 8000bba:	b113      	cbz	r3, 8000bc2 <usbSetConfiguration+0xe>
        bDeviceState = CONFIGURED;
 8000bbc:	4b02      	ldr	r3, [pc, #8]	; (8000bc8 <usbSetConfiguration+0x14>)
 8000bbe:	2205      	movs	r2, #5
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	4770      	bx	lr
 8000bc4:	20000594 	mulcs	r0, r4, r5
 8000bc8:	200005a4 	andcs	r0, r0, r4, lsr #11

08000bcc <usbGetInterface>:
    }
}

void usbGetInterface(void)
{
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <usbSetInterface>:
    /* nothing process */
}

void usbSetInterface(void)
{
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <usbGetStatus>:
    /* nothing process */
}

void usbGetStatus(void)
{
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <usbClearFeature>:
    /* nothing process */
}

void usbClearFeature(void)
{
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <usbSetEndpointFeature>:
    /* nothing process */
}

void usbSetEndpointFeature(void)
{
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <usbSetDeviceFeature>:
    /* nothing process */
}

void usbSetDeviceFeature(void)
{
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <usbSetDeviceAddress>:
    /* nothing process */
}

void usbSetDeviceAddress(void)
{
    bDeviceState = ADDRESSED;
 8000be4:	4b01      	ldr	r3, [pc, #4]	; (8000bec <usbSetDeviceAddress+0x8>)
 8000be6:	2204      	movs	r2, #4
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	4770      	bx	lr
 8000bec:	200005a4 	andcs	r0, r0, r4, lsr #11

08000bf0 <usbReset>:
    usbEnbISR();
    bDeviceState = UNCONNECTED;
}

void usbReset(void)
{    
 8000bf0:	b538      	push	{r3, r4, r5, lr}
    dfuUpdateByReset();
 8000bf2:	f000 ff03 	bl	80019fc <dfuUpdateByReset>

    pInformation->Current_Configuration = 0;
 8000bf6:	4a21      	ldr	r2, [pc, #132]	; (8000c7c <usbReset+0x8c>)
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000bf8:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <usbReset+0x90>)

void usbReset(void)
{    
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 8000bfa:	6812      	ldr	r2, [r2, #0]
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000bfc:	681b      	ldr	r3, [r3, #0]

void usbReset(void)
{    
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 8000bfe:	2400      	movs	r4, #0
 8000c00:	7294      	strb	r4, [r2, #10]
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000c02:	79d8      	ldrb	r0, [r3, #7]

    _SetBTABLE(BTABLE_ADDRESS);
 8000c04:	491f      	ldr	r1, [pc, #124]	; (8000c84 <usbReset+0x94>)

    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
 8000c06:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <usbReset+0x98>)
void usbReset(void)
{    
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000c08:	7250      	strb	r0, [r2, #9]

    _SetBTABLE(BTABLE_ADDRESS);
 8000c0a:	600c      	str	r4, [r1, #0]

    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
 8000c0c:	6818      	ldr	r0, [r3, #0]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8000c0e:	4a1f      	ldr	r2, [pc, #124]	; (8000c8c <usbReset+0x9c>)
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];

    _SetBTABLE(BTABLE_ADDRESS);

    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
 8000c10:	f420 40ec 	bic.w	r0, r0, #30208	; 0x7600
 8000c14:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 8000c18:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8000c1c:	b280      	uxth	r0, r0
 8000c1e:	6018      	str	r0, [r3, #0]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);
 8000c20:	6818      	ldr	r0, [r3, #0]

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8000c22:	2540      	movs	r5, #64	; 0x40

    _SetBTABLE(BTABLE_ADDRESS);

    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
    _SetEPTxStatus(ENDP0, EP_TX_STALL);
 8000c24:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 8000c28:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8000c2c:	b280      	uxth	r0, r0
 8000c2e:	f080 0010 	eor.w	r0, r0, #16
 8000c32:	6018      	str	r0, [r3, #0]

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8000c34:	6808      	ldr	r0, [r1, #0]
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8000c36:	680b      	ldr	r3, [r1, #0]
 8000c38:	b281      	uxth	r1, r0
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000

    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
    _SetEPTxStatus(ENDP0, EP_TX_STALL);

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8000c40:	440a      	add	r2, r1
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8000c42:	f503 5340 	add.w	r3, r3, #12288	; 0x3000

    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
    _SetEPTxStatus(ENDP0, EP_TX_STALL);

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8000c46:	0052      	lsls	r2, r2, #1
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2180      	movs	r1, #128	; 0x80

    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
    _SetEPTxStatus(ENDP0, EP_TX_STALL);

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8000c4c:	6015      	str	r5, [r2, #0]
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);

    Clear_Status_Out(ENDP0);
 8000c4e:	4620      	mov	r0, r4
    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
    _SetEPTxStatus(ENDP0, EP_TX_STALL);

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8000c50:	6019      	str	r1, [r3, #0]

    Clear_Status_Out(ENDP0);
 8000c52:	f005 f889 	bl	8005d68 <Clear_Status_Out>

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <usbReset+0xa0>)
 8000c58:	4620      	mov	r0, r4
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8000c60:	f005 f8da 	bl	8005e18 <SetEPRxCount>
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);
 8000c64:	4620      	mov	r0, r4
 8000c66:	f005 f870 	bl	8005d4a <SetEPRxValid>

    bDeviceState = ATTACHED;
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <usbReset+0xa4>)
 8000c6c:	2201      	movs	r2, #1
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 8000c6e:	4620      	mov	r0, r4

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);

    bDeviceState = ATTACHED;
 8000c70:	601a      	str	r2, [r3, #0]
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
}
 8000c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);

    bDeviceState = ATTACHED;
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 8000c76:	f005 bd71 	b.w	800675c <SetDeviceAddress>
 8000c7a:	bf00      	nop
 8000c7c:	20000594 	mulcs	r0, r4, r5
 8000c80:	200002bc 			; <UNDEFINED> instruction: 0x200002bc
 8000c84:	40005c50 	andmi	r5, r0, r0, asr ip
 8000c88:	40005c00 	andmi	r5, r0, r0, lsl #24
 8000c8c:	20003004 	andcs	r3, r0, r4
 8000c90:	2000056c 	andcs	r0, r0, ip, ror #10
 8000c94:	200005a4 	andcs	r0, r0, r4, lsr #11

08000c98 <usbDataSetup>:
void usbStatusOut(void)
{
    return;
}

RESULT usbDataSetup(u8 request) {
 8000c98:	b538      	push	{r3, r4, r5, lr}
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    // handle dfu class requests
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 8000c9a:	4c17      	ldr	r4, [pc, #92]	; (8000cf8 <usbDataSetup+0x60>)
void usbStatusOut(void)
{
    return;
}

RESULT usbDataSetup(u8 request) {
 8000c9c:	4605      	mov	r5, r0
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    // handle dfu class requests
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ca6:	2b21      	cmp	r3, #33	; 0x21
 8000ca8:	d001      	beq.n	8000cae <usbDataSetup+0x16>
        (*CopyRoutine)(0);

        return USB_SUCCESS;
    }

    return USB_UNSUPPORT;
 8000caa:	2002      	movs	r0, #2
}
 8000cac:	bd38      	pop	{r3, r4, r5, pc}
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    // handle dfu class requests
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
        if (dfuUpdateByRequest()) {
 8000cae:	f000 fd39 	bl	8001724 <dfuUpdateByRequest>
 8000cb2:	2800      	cmp	r0, #0
 8000cb4:	d0f9      	beq.n	8000caa <usbDataSetup+0x12>
            // successfull state transition, handle the request
            switch (request) {
 8000cb6:	3d01      	subs	r5, #1
 8000cb8:	2d04      	cmp	r5, #4
 8000cba:	d8f6      	bhi.n	8000caa <usbDataSetup+0x12>
 8000cbc:	a301      	add	r3, pc, #4	; (adr r3, 8000cc4 <usbDataSetup+0x2c>)
 8000cbe:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8000cc2:	bf00      	nop
 8000cc4:	08000cf3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, sl, fp}
 8000cc8:	08000cef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, sl, fp}
 8000ccc:	08000ceb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, sl, fp}
 8000cd0:	08000cab 	stmdaeq	r0, {r0, r1, r3, r5, r7, sl, fp}
 8000cd4:	08000cd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, sl, fp}
            case(DFU_GETSTATUS):
                CopyRoutine = dfuCopyStatus;
                break;
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <usbDataSetup+0x64>)
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000cda:	6822      	ldr	r2, [r4, #0]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000cdc:	2400      	movs	r4, #0
        (*CopyRoutine)(0);
 8000cde:	4620      	mov	r0, r4
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000ce0:	6193      	str	r3, [r2, #24]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000ce2:	8254      	strh	r4, [r2, #18]
        (*CopyRoutine)(0);
 8000ce4:	4798      	blx	r3

        return USB_SUCCESS;
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
        if (dfuUpdateByRequest()) {
            // successfull state transition, handle the request
            switch (request) {
            case(DFU_GETSTATUS):
                CopyRoutine = dfuCopyStatus;
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <usbDataSetup+0x68>)
 8000cec:	e7f5      	b.n	8000cda <usbDataSetup+0x42>
                break;
            case(DFU_DNLOAD):
                CopyRoutine = dfuCopyDNLOAD;
                break;
            case(DFU_UPLOAD):
                CopyRoutine = dfuCopyUPLOAD;
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <usbDataSetup+0x6c>)
                break;
 8000cf0:	e7f3      	b.n	8000cda <usbDataSetup+0x42>
                break;
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
                break;
            case(DFU_DNLOAD):
                CopyRoutine = dfuCopyDNLOAD;
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <usbDataSetup+0x70>)
                break;
 8000cf4:	e7f1      	b.n	8000cda <usbDataSetup+0x42>
 8000cf6:	bf00      	nop
 8000cf8:	20000594 	mulcs	r0, r4, r5
 8000cfc:	08001a41 	stmdaeq	r0, {r0, r6, r9, fp, ip}
 8000d00:	08001a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp, ip}
 8000d04:	08001aa5 	stmdaeq	r0, {r0, r2, r5, r7, r9, fp, ip}
 8000d08:	08001a71 	stmdaeq	r0, {r0, r4, r5, r6, r9, fp, ip}

08000d0c <usbGetDeviceDescriptor>:
    return USB_SUCCESS;
}

u8 *usbGetDeviceDescriptor(u16 len)
{
    return Standard_GetDescriptorData(len, &usbDeviceDescriptorDFU);
 8000d0c:	4901      	ldr	r1, [pc, #4]	; (8000d14 <usbGetDeviceDescriptor+0x8>)
 8000d0e:	f005 bb25 	b.w	800635c <Standard_GetDescriptorData>
 8000d12:	bf00      	nop
 8000d14:	20000160 	andcs	r0, r0, r0, ror #2

08000d18 <usbGetConfigDescriptor>:
}

u8 *usbGetConfigDescriptor(u16 len)
{
    return Standard_GetDescriptorData(len, &usbConfigDescriptorDFU);
 8000d18:	4901      	ldr	r1, [pc, #4]	; (8000d20 <usbGetConfigDescriptor+0x8>)
 8000d1a:	f005 bb1f 	b.w	800635c <Standard_GetDescriptorData>
 8000d1e:	bf00      	nop
 8000d20:	200002bc 			; <UNDEFINED> instruction: 0x200002bc

08000d24 <usbGetStringDescriptor>:
}

u8 *usbGetStringDescriptor(u16 len)
{
    u8 strIndex = pInformation->USBwValue0;
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <usbGetStringDescriptor+0x18>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	789b      	ldrb	r3, [r3, #2]
    if (strIndex > STR_DESC_LEN) {
 8000d2a:	2b07      	cmp	r3, #7
 8000d2c:	d804      	bhi.n	8000d38 <usbGetStringDescriptor+0x14>
        return NULL;
    } else {
        return Standard_GetDescriptorData(len, &usbStringDescriptor[strIndex]);
 8000d2e:	4904      	ldr	r1, [pc, #16]	; (8000d40 <usbGetStringDescriptor+0x1c>)
 8000d30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8000d34:	f005 bb12 	b.w	800635c <Standard_GetDescriptorData>
    }
}
 8000d38:	2000      	movs	r0, #0
 8000d3a:	4770      	bx	lr
 8000d3c:	20000594 	mulcs	r0, r4, r5
 8000d40:	200000a8 	andcs	r0, r0, r8, lsr #1

08000d44 <usbGetFunctionalDescriptor>:

u8 *usbGetFunctionalDescriptor(u16 len)
{
    return Standard_GetDescriptorData(len, &usbFunctionalDescriptor);
 8000d44:	4901      	ldr	r1, [pc, #4]	; (8000d4c <usbGetFunctionalDescriptor+0x8>)
 8000d46:	f005 bb09 	b.w	800635c <Standard_GetDescriptorData>
 8000d4a:	bf00      	nop
 8000d4c:	200000f4 	strdcs	r0, [r0], -r4

08000d50 <usbNoDataSetup>:

    return USB_UNSUPPORT;
}

RESULT usbNoDataSetup(u8 request)
{
 8000d50:	b508      	push	{r3, lr}
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <usbNoDataSetup+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d5c:	2b21      	cmp	r3, #33	; 0x21
 8000d5e:	d001      	beq.n	8000d64 <usbNoDataSetup+0x14>
        // todo, keep track of the destination interface, often stored in wIndex
        if (dfuUpdateByRequest()) {
            return USB_SUCCESS;
        }
    }
    return USB_UNSUPPORT;
 8000d60:	2002      	movs	r0, #2
}
 8000d62:	bd08      	pop	{r3, pc}

RESULT usbNoDataSetup(u8 request)
{
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
        // todo, keep track of the destination interface, often stored in wIndex
        if (dfuUpdateByRequest()) {
 8000d64:	f000 fcde 	bl	8001724 <dfuUpdateByRequest>
 8000d68:	2800      	cmp	r0, #0
            return USB_SUCCESS;
 8000d6a:	bf0c      	ite	eq
 8000d6c:	2002      	moveq	r0, #2
 8000d6e:	2000      	movne	r0, #0
 8000d70:	bd08      	pop	{r3, pc}
 8000d72:	bf00      	nop
 8000d74:	20000594 	mulcs	r0, r4, r5

08000d78 <usbInit>:

    return USB_SUCCESS;
}

void usbInit(void)
{
 8000d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d7c:	b082      	sub	sp, #8
    dfuInit();
 8000d7e:	f000 fc81 	bl	8001684 <dfuInit>

    pInformation->Current_Configuration = 0;
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <usbInit+0x70>)
 8000d84:	2400      	movs	r4, #0
 8000d86:	681b      	ldr	r3, [r3, #0]
}

RESULT usbPowerOn(void)
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;
 8000d88:	4a18      	ldr	r2, [pc, #96]	; (8000dec <usbInit+0x74>)

void usbInit(void)
{
    dfuInit();

    pInformation->Current_Configuration = 0;
 8000d8a:	729c      	strb	r4, [r3, #10]
}

RESULT usbPowerOn(void)
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;
 8000d8c:	69d1      	ldr	r1, [r2, #28]

    _SetCNTR(CNTR_FRES);
 8000d8e:	4d18      	ldr	r5, [pc, #96]	; (8000df0 <usbInit+0x78>)
    _SetCNTR(0);
    _SetISTR(0);
 8000d90:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8000e00 <usbInit+0x88>

    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000d94:	4f17      	ldr	r7, [pc, #92]	; (8000df4 <usbInit+0x7c>)
RESULT usbPowerOn(void)
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;

    _SetCNTR(CNTR_FRES);
 8000d96:	2601      	movs	r6, #1
    _SetCNTR(0);
    _SetISTR(0);

    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000d98:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
}

RESULT usbPowerOn(void)
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;
 8000d9c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000da0:	61d1      	str	r1, [r2, #28]
    // present to host
#ifndef USB_DISC_HARDWIRED
#ifdef HAS_MAPLE_HARDWARE
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
#else
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 1);
 8000da2:	4815      	ldr	r0, [pc, #84]	; (8000df8 <usbInit+0x80>)
RESULT usbPowerOn(void)
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;

    _SetCNTR(CNTR_FRES);
 8000da4:	602e      	str	r6, [r5, #0]
    // present to host
#ifndef USB_DISC_HARDWIRED
#ifdef HAS_MAPLE_HARDWARE
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
#else
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 1);
 8000da6:	4632      	mov	r2, r6
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;

    _SetCNTR(CNTR_FRES);
    _SetCNTR(0);
 8000da8:	602c      	str	r4, [r5, #0]
    // present to host
#ifndef USB_DISC_HARDWIRED
#ifdef HAS_MAPLE_HARDWARE
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
#else
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 1);
 8000daa:	210c      	movs	r1, #12
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;

    _SetCNTR(CNTR_FRES);
    _SetCNTR(0);
    _SetISTR(0);
 8000dac:	f8c8 4000 	str.w	r4, [r8]

    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000db0:	803b      	strh	r3, [r7, #0]
    _SetCNTR(wInterrupt_Mask);
 8000db2:	602b      	str	r3, [r5, #0]
    // present to host
#ifndef USB_DISC_HARDWIRED
#ifdef HAS_MAPLE_HARDWARE
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
#else
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 1);
 8000db4:	f000 fa08 	bl	80011c8 <gpio_write_bit>

    pInformation->Current_Configuration = 0;
    usbPowerOn();

    _SetISTR(0);
    wInterrupt_Mask = ISR_MSK;
 8000db8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
    dfuInit();

    pInformation->Current_Configuration = 0;
    usbPowerOn();

    _SetISTR(0);
 8000dbc:	f8c8 4000 	str.w	r4, [r8]

void usbEnbISR(void)
{
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 8000dc0:	2214      	movs	r2, #20

    pInformation->Current_Configuration = 0;
    usbPowerOn();

    _SetISTR(0);
    wInterrupt_Mask = ISR_MSK;
 8000dc2:	803b      	strh	r3, [r7, #0]

    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
 8000dc4:	a801      	add	r0, sp, #4
    pInformation->Current_Configuration = 0;
    usbPowerOn();

    _SetISTR(0);
    wInterrupt_Mask = ISR_MSK;
    _SetCNTR(wInterrupt_Mask);
 8000dc6:	602b      	str	r3, [r5, #0]
void usbEnbISR(void)
{
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000dc8:	f88d 4005 	strb.w	r4, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000dcc:	f88d 4006 	strb.w	r4, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
 8000dd0:	f88d 6007 	strb.w	r6, [sp, #7]

void usbEnbISR(void)
{
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 8000dd4:	f88d 2004 	strb.w	r2, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
 8000dd8:	f000 fb82 	bl	80014e0 <nvicInit>
    wInterrupt_Mask = ISR_MSK;
    _SetCNTR(wInterrupt_Mask);

    // configure the cortex M3 private peripheral NVIC
    usbEnbISR();
    bDeviceState = UNCONNECTED;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <usbInit+0x84>)
 8000dde:	601c      	str	r4, [r3, #0]
}
 8000de0:	b002      	add	sp, #8
 8000de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000de6:	bf00      	nop
 8000de8:	20000594 	mulcs	r0, r4, r5
 8000dec:	40021000 	andmi	r1, r2, r0
 8000df0:	40005c40 	andmi	r5, r0, r0, asr #24
 8000df4:	20000598 	mulcs	r0, r8, r5
 8000df8:	40010800 	andmi	r0, r1, r0, lsl #16
 8000dfc:	200005a4 	andcs	r0, r0, r4, lsr #11
 8000e00:	40005c44 	andmi	r5, r0, r4, asr #24

08000e04 <setupUSB>:

static RCC_TypeDef *RCC_Blot = (RCC_TypeDef *)RCC;


void setupUSB (void)
{
 8000e04:	b530      	push	{r4, r5, lr}
    #ifndef USB_DISC_PIN  
    #define USB_DISC_PIN    12
    #endif

    // set up pin in host disconnected state
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
 8000e06:	4816      	ldr	r0, [pc, #88]	; (8000e60 <setupUSB+0x5c>)

static RCC_TypeDef *RCC_Blot = (RCC_TypeDef *)RCC;


void setupUSB (void)
{
 8000e08:	b083      	sub	sp, #12
    #ifndef USB_DISC_PIN  
    #define USB_DISC_PIN    12
    #endif

    // set up pin in host disconnected state
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
 8000e0a:	210c      	movs	r1, #12
 8000e0c:	2200      	movs	r2, #0
    SET_REG(GPIO_CR(USB_DISC_BANK, USB_DISC_PIN),
 8000e0e:	4c15      	ldr	r4, [pc, #84]	; (8000e64 <setupUSB+0x60>)
    #ifndef USB_DISC_PIN  
    #define USB_DISC_PIN    12
    #endif

    // set up pin in host disconnected state
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
 8000e10:	f000 f9da 	bl	80011c8 <gpio_write_bit>
    SET_REG(GPIO_CR(USB_DISC_BANK, USB_DISC_PIN),
 8000e14:	200c      	movs	r0, #12
 8000e16:	6825      	ldr	r5, [r4, #0]
 8000e18:	f000 fc16 	bl	8001648 <crMask>
 8000e1c:	4028      	ands	r0, r5
            | CR_OUTPUT_PP << CR_SHITF(USB_DISC_PIN)
        );

    // wait a while to make sure host disconnects us
    volatile u32 delay;
    for(delay = 256; delay; delay--);
 8000e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
    #define USB_DISC_PIN    12
    #endif

    // set up pin in host disconnected state
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
    SET_REG(GPIO_CR(USB_DISC_BANK, USB_DISC_PIN),
 8000e22:	f440 3580 	orr.w	r5, r0, #65536	; 0x10000
 8000e26:	6025      	str	r5, [r4, #0]
            | CR_OUTPUT_PP << CR_SHITF(USB_DISC_PIN)
        );

    // wait a while to make sure host disconnects us
    volatile u32 delay;
    for(delay = 256; delay; delay--);
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	9b01      	ldr	r3, [sp, #4]
 8000e2c:	b12b      	cbz	r3, 8000e3a <setupUSB+0x36>
 8000e2e:	9b01      	ldr	r3, [sp, #4]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	9b01      	ldr	r3, [sp, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f9      	bne.n	8000e2e <setupUSB+0x2a>
    #endif
#endif
#endif

  // initialize the usb application  
  wTransferSize = getFlashPageSize();
 8000e3a:	f000 fc17 	bl	800166c <getFlashPageSize>
  u8_usbConfigDescriptorDFU[41] = (wTransferSize & 0x00FF);
 8000e3e:	4c0a      	ldr	r4, [pc, #40]	; (8000e68 <setupUSB+0x64>)
  u8_usbConfigDescriptorDFU[42] = (wTransferSize & 0xFF00) >> 8;
  
  u8_usbFunctionalDescriptor[5] = (wTransferSize & 0x00FF);
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <setupUSB+0x68>)
    #endif
#endif
#endif

  // initialize the usb application  
  wTransferSize = getFlashPageSize();
 8000e42:	4d0b      	ldr	r5, [pc, #44]	; (8000e70 <setupUSB+0x6c>)
  u8_usbConfigDescriptorDFU[41] = (wTransferSize & 0x00FF);
 8000e44:	b2c1      	uxtb	r1, r0
  u8_usbConfigDescriptorDFU[42] = (wTransferSize & 0xFF00) >> 8;
 8000e46:	f3c0 2207 	ubfx	r2, r0, #8, #8
    #endif
#endif
#endif

  // initialize the usb application  
  wTransferSize = getFlashPageSize();
 8000e4a:	6028      	str	r0, [r5, #0]
  u8_usbConfigDescriptorDFU[41] = (wTransferSize & 0x00FF);
 8000e4c:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
  u8_usbConfigDescriptorDFU[42] = (wTransferSize & 0xFF00) >> 8;
 8000e50:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  
  u8_usbFunctionalDescriptor[5] = (wTransferSize & 0x00FF);
 8000e54:	7159      	strb	r1, [r3, #5]
  u8_usbFunctionalDescriptor[6] = (wTransferSize & 0xFF00) >> 8;  
 8000e56:	719a      	strb	r2, [r3, #6]

/* application function definitions */
void usbAppInit(void)
{
    // hook in to usb_core, depends on all those damn non encapsulated externs!
    USB_Init();
 8000e58:	f005 f8a8 	bl	8005fac <USB_Init>
  
  u8_usbFunctionalDescriptor[5] = (wTransferSize & 0x00FF);
  u8_usbFunctionalDescriptor[6] = (wTransferSize & 0xFF00) >> 8;  
  
  usbAppInit();
}
 8000e5c:	b003      	add	sp, #12
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	40010800 	andmi	r0, r1, r0, lsl #16
 8000e64:	40010804 	andmi	r0, r1, r4, lsl #16
 8000e68:	20000100 	andcs	r0, r0, r0, lsl #2
 8000e6c:	20000140 	andcs	r0, r0, r0, asr #2
 8000e70:	20000470 	andcs	r0, r0, r0, ror r4

08000e74 <usbDsbBus>:

    return USB_SUCCESS;
}

RESULT usbPowerOff(void) {
    _SetCNTR(CNTR_FRES);
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <usbDsbBus+0x2c>)
    _SetISTR(0);
 8000e76:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <usbDsbBus+0x30>)
 8000e78:	2100      	movs	r1, #0

    return USB_SUCCESS;
}

RESULT usbPowerOff(void) {
    _SetCNTR(CNTR_FRES);
 8000e7a:	2201      	movs	r2, #1
  usbAppInit();
}


void usbDsbBus(void)
{
 8000e7c:	b510      	push	{r4, lr}

    return USB_SUCCESS;
}

RESULT usbPowerOff(void) {
    _SetCNTR(CNTR_FRES);
 8000e7e:	601a      	str	r2, [r3, #0]
    _SetISTR(0);
    _SetCNTR(CNTR_FRES + CNTR_PDWN);
 8000e80:	2403      	movs	r4, #3
    return USB_SUCCESS;
}

RESULT usbPowerOff(void) {
    _SetCNTR(CNTR_FRES);
    _SetISTR(0);
 8000e82:	6001      	str	r1, [r0, #0]
    // act unplugged to host
#ifndef USB_DISC_HARDWIRED
#ifdef HAS_MAPLE_HARDWARE
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 1);
#else
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
 8000e84:	f500 402b 	add.w	r0, r0, #43776	; 0xab00
 8000e88:	460a      	mov	r2, r1
}

RESULT usbPowerOff(void) {
    _SetCNTR(CNTR_FRES);
    _SetISTR(0);
    _SetCNTR(CNTR_FRES + CNTR_PDWN);
 8000e8a:	601c      	str	r4, [r3, #0]
    // act unplugged to host
#ifndef USB_DISC_HARDWIRED
#ifdef HAS_MAPLE_HARDWARE
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 1);
#else
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
 8000e8c:	30bc      	adds	r0, #188	; 0xbc
 8000e8e:	210c      	movs	r1, #12
 8000e90:	f000 f99a 	bl	80011c8 <gpio_write_bit>
#endif
#endif

    // Disable USB clock
    RCC_Blot->APB1ENR &= ~RCC_APB1ENR_USB_CLK;
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <usbDsbBus+0x34>)
 8000e96:	69da      	ldr	r2, [r3, #28]
 8000e98:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000e9c:	61da      	str	r2, [r3, #28]
 8000e9e:	bd10      	pop	{r4, pc}
 8000ea0:	40005c40 	andmi	r5, r0, r0, asr #24
 8000ea4:	40005c44 	andmi	r5, r0, r4, asr #24
 8000ea8:	40021000 	andmi	r1, r2, r0

08000eac <usbResume>:
void usbResume(RESUME_STATE eResumeSetVal)
{
    u16 wCNTR;

    if (eResumeSetVal != RESUME_ESOF)
        ResumeS.eState = eResumeSetVal;
 8000eac:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <usbResume+0xc0>)

void usbResume(RESUME_STATE eResumeSetVal)
{
    u16 wCNTR;

    if (eResumeSetVal != RESUME_ESOF)
 8000eae:	2807      	cmp	r0, #7
    // undo power reduction handlers here
    _SetCNTR(ISR_MSK);
}

void usbResume(RESUME_STATE eResumeSetVal)
{
 8000eb0:	b410      	push	{r4}
    u16 wCNTR;

    if (eResumeSetVal != RESUME_ESOF)
        ResumeS.eState = eResumeSetVal;
 8000eb2:	bf18      	it	ne
 8000eb4:	7018      	strbne	r0, [r3, #0]

    switch (ResumeS.eState) {
 8000eb6:	781a      	ldrb	r2, [r3, #0]
 8000eb8:	2a05      	cmp	r2, #5
 8000eba:	d851      	bhi.n	8000f60 <usbResume+0xb4>
 8000ebc:	e8df f002 	tbb	[pc, r2]
 8000ec0:	38312315 	ldmdacc	r1!, {r0, r2, r4, r8, r9, sp}
 8000ec4:	785a0343 	ldmdavc	sl, {r0, r1, r6, r8, r9}^
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_ON;
        ResumeS.bESOFcnt = 10;
        break;
    case RESUME_ON:
        ResumeS.bESOFcnt--;
 8000ec8:	4928      	ldr	r1, [pc, #160]	; (8000f6c <usbResume+0xc0>)
 8000eca:	3a01      	subs	r2, #1
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	705a      	strb	r2, [r3, #1]
        if (ResumeS.bESOFcnt == 0) {
 8000ed0:	785b      	ldrb	r3, [r3, #1]
 8000ed2:	b93b      	cbnz	r3, 8000ee4 <usbResume+0x38>
            wCNTR = _GetCNTR();
 8000ed4:	4a26      	ldr	r2, [pc, #152]	; (8000f70 <usbResume+0xc4>)
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 8000ed6:	f64f 73ef 	movw	r3, #65519	; 0xffef
        ResumeS.bESOFcnt = 10;
        break;
    case RESUME_ON:
        ResumeS.bESOFcnt--;
        if (ResumeS.bESOFcnt == 0) {
            wCNTR = _GetCNTR();
 8000eda:	6814      	ldr	r4, [r2, #0]
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
            ResumeS.eState = RESUME_OFF;
 8000edc:	2006      	movs	r0, #6
    case RESUME_ON:
        ResumeS.bESOFcnt--;
        if (ResumeS.bESOFcnt == 0) {
            wCNTR = _GetCNTR();
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 8000ede:	4023      	ands	r3, r4
 8000ee0:	6013      	str	r3, [r2, #0]
            ResumeS.eState = RESUME_OFF;
 8000ee2:	7008      	strb	r0, [r1, #0]
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
        break;
    }
}
 8000ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ee8:	4770      	bx	lr
void usbResumeInit(void)
{
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
 8000eea:	4a21      	ldr	r2, [pc, #132]	; (8000f70 <usbResume+0xc4>)
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000eec:	f64f 71fb 	movw	r1, #65531	; 0xfffb
void usbResumeInit(void)
{
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
 8000ef0:	6810      	ldr	r0, [r2, #0]
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);

    // undo power reduction handlers here
    _SetCNTR(ISR_MSK);
 8000ef2:	f44f 443f 	mov.w	r4, #48896	; 0xbf00
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000ef6:	4001      	ands	r1, r0
        ResumeS.eState = eResumeSetVal;

    switch (ResumeS.eState) {
    case RESUME_EXTERNAL:
        usbResumeInit();
        ResumeS.eState = RESUME_OFF;
 8000ef8:	2006      	movs	r0, #6
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000efa:	6011      	str	r1, [r2, #0]

    // undo power reduction handlers here
    _SetCNTR(ISR_MSK);
 8000efc:	6014      	str	r4, [r2, #0]
        ResumeS.eState = eResumeSetVal;

    switch (ResumeS.eState) {
    case RESUME_EXTERNAL:
        usbResumeInit();
        ResumeS.eState = RESUME_OFF;
 8000efe:	7018      	strb	r0, [r3, #0]
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
        break;
    }
}
 8000f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f04:	4770      	bx	lr
void usbResumeInit(void)
{
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
 8000f06:	4a1a      	ldr	r2, [pc, #104]	; (8000f70 <usbResume+0xc4>)
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000f08:	f64f 71fb 	movw	r1, #65531	; 0xfffb
void usbResumeInit(void)
{
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
 8000f0c:	6810      	ldr	r0, [r2, #0]
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);

    // undo power reduction handlers here
    _SetCNTR(ISR_MSK);
 8000f0e:	f44f 443f 	mov.w	r4, #48896	; 0xbf00
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000f12:	4001      	ands	r1, r0
        usbResumeInit();
        ResumeS.eState = RESUME_OFF;
        break;
    case RESUME_INTERNAL:
        usbResumeInit();
        ResumeS.eState = RESUME_START;
 8000f14:	2004      	movs	r0, #4
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000f16:	6011      	str	r1, [r2, #0]

    // undo power reduction handlers here
    _SetCNTR(ISR_MSK);
 8000f18:	6014      	str	r4, [r2, #0]
        usbResumeInit();
        ResumeS.eState = RESUME_OFF;
        break;
    case RESUME_INTERNAL:
        usbResumeInit();
        ResumeS.eState = RESUME_START;
 8000f1a:	7018      	strb	r0, [r3, #0]
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
        break;
    }
}
 8000f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f20:	4770      	bx	lr
    case RESUME_INTERNAL:
        usbResumeInit();
        ResumeS.eState = RESUME_START;
        break;
    case RESUME_LATER:
        ResumeS.bESOFcnt = 2;
 8000f22:	2102      	movs	r1, #2
 8000f24:	7059      	strb	r1, [r3, #1]
        ResumeS.eState = RESUME_WAIT;
 8000f26:	2203      	movs	r2, #3
 8000f28:	701a      	strb	r2, [r3, #0]
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
        break;
    }
}
 8000f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f2e:	4770      	bx	lr
    case RESUME_LATER:
        ResumeS.bESOFcnt = 2;
        ResumeS.eState = RESUME_WAIT;
        break;
    case RESUME_WAIT:
        ResumeS.bESOFcnt--;
 8000f30:	785a      	ldrb	r2, [r3, #1]
 8000f32:	490e      	ldr	r1, [pc, #56]	; (8000f6c <usbResume+0xc0>)
 8000f34:	3a01      	subs	r2, #1
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	705a      	strb	r2, [r3, #1]
        if (ResumeS.bESOFcnt == 0)
 8000f3a:	785b      	ldrb	r3, [r3, #1]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1d1      	bne.n	8000ee4 <usbResume+0x38>
            ResumeS.eState = RESUME_START;
 8000f40:	2304      	movs	r3, #4
 8000f42:	700b      	strb	r3, [r1, #0]
 8000f44:	e7ce      	b.n	8000ee4 <usbResume+0x38>
        break;
    case RESUME_START:
        wCNTR = _GetCNTR();
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <usbResume+0xc4>)
        wCNTR |= CNTR_RESUME;
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_ON;
 8000f48:	2005      	movs	r0, #5
        ResumeS.bESOFcnt--;
        if (ResumeS.bESOFcnt == 0)
            ResumeS.eState = RESUME_START;
        break;
    case RESUME_START:
        wCNTR = _GetCNTR();
 8000f4a:	6814      	ldr	r4, [r2, #0]
        wCNTR |= CNTR_RESUME;
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_ON;
        ResumeS.bESOFcnt = 10;
 8000f4c:	210a      	movs	r1, #10
        ResumeS.bESOFcnt--;
        if (ResumeS.bESOFcnt == 0)
            ResumeS.eState = RESUME_START;
        break;
    case RESUME_START:
        wCNTR = _GetCNTR();
 8000f4e:	b2a4      	uxth	r4, r4
        wCNTR |= CNTR_RESUME;
        _SetCNTR(wCNTR);
 8000f50:	f044 0410 	orr.w	r4, r4, #16
 8000f54:	6014      	str	r4, [r2, #0]
        ResumeS.eState = RESUME_ON;
 8000f56:	7018      	strb	r0, [r3, #0]
        ResumeS.bESOFcnt = 10;
 8000f58:	7059      	strb	r1, [r3, #1]
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
        break;
    }
}
 8000f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f5e:	4770      	bx	lr
        }
        break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
 8000f60:	2206      	movs	r2, #6
 8000f62:	701a      	strb	r2, [r3, #0]
        break;
    }
}
 8000f64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000478 	andcs	r0, r0, r8, ror r4
 8000f70:	40005c40 	andmi	r5, r0, r0, asr #24

08000f74 <usbEnbISR>:
}
/***** end of USER STANDARD REQUESTS *****/


void usbEnbISR(void)
{
 8000f74:	b500      	push	{lr}
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <usbEnbISR+0x18>)
}
/***** end of USER STANDARD REQUESTS *****/


void usbEnbISR(void)
{
 8000f78:	b083      	sub	sp, #12
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 8000f7a:	a802      	add	r0, sp, #8
 8000f7c:	f840 3d04 	str.w	r3, [r0, #-4]!
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
 8000f80:	f000 faae 	bl	80014e0 <nvicInit>
}
 8000f84:	b003      	add	sp, #12
 8000f86:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f8a:	bf00      	nop
 8000f8c:	01000014 	tsteq	r0, r4, lsl r0

08000f90 <usbDsbISR>:

void usbDsbISR(void)
{
 8000f90:	b500      	push	{lr}
 8000f92:	b083      	sub	sp, #12
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 8000f94:	2314      	movs	r3, #20
 8000f96:	a802      	add	r0, sp, #8
 8000f98:	f840 3d04 	str.w	r3, [r0, #-4]!
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
    nvicInit(&NVIC_InitStructure);
 8000f9c:	f000 faa0 	bl	80014e0 <nvicInit>
}
 8000fa0:	b003      	add	sp, #12
 8000fa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fa6:	bf00      	nop

08000fa8 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    wIstr = _GetISTR();
 8000faa:	4b31      	ldr	r3, [pc, #196]	; (8001070 <USB_LP_CAN1_RX0_IRQHandler+0xc8>)
 8000fac:	4c31      	ldr	r4, [pc, #196]	; (8001074 <USB_LP_CAN1_RX0_IRQHandler+0xcc>)
 8000fae:	681b      	ldr	r3, [r3, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
 8000fb0:	4d31      	ldr	r5, [pc, #196]	; (8001078 <USB_LP_CAN1_RX0_IRQHandler+0xd0>)
    nvicInit(&NVIC_InitStructure);
}

void USB_LP_CAN1_RX0_IRQHandler(void)
{
    wIstr = _GetISTR();
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	8023      	strh	r3, [r4, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
 8000fb6:	8822      	ldrh	r2, [r4, #0]
 8000fb8:	882b      	ldrh	r3, [r5, #0]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	0412      	lsls	r2, r2, #16
 8000fbe:	d453      	bmi.n	8001068 <USB_LP_CAN1_RX0_IRQHandler+0xc0>
        CTR_LP(); /* low priority ISR defined in the usb core lib */
    }
#endif

#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
 8000fc0:	8822      	ldrh	r2, [r4, #0]
 8000fc2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000fc6:	4213      	tst	r3, r2
 8000fc8:	d145      	bne.n	8001056 <USB_LP_CAN1_RX0_IRQHandler+0xae>
    }
#endif


#if (ISR_MSK & ISTR_ERR)
    if (wIstr & ISTR_ERR & wInterrupt_Mask) {
 8000fca:	8822      	ldrh	r2, [r4, #0]
 8000fcc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8000fd0:	4213      	tst	r3, r2
 8000fd2:	d003      	beq.n	8000fdc <USB_LP_CAN1_RX0_IRQHandler+0x34>
        _SetISTR((u16)CLR_ERR);
 8000fd4:	4a26      	ldr	r2, [pc, #152]	; (8001070 <USB_LP_CAN1_RX0_IRQHandler+0xc8>)
 8000fd6:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 8000fda:	6011      	str	r1, [r2, #0]
    }
#endif


#if (ISR_MSK & ISTR_WKUP)
    if (wIstr & ISTR_WKUP & wInterrupt_Mask) {
 8000fdc:	8822      	ldrh	r2, [r4, #0]
 8000fde:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000fe2:	4213      	tst	r3, r2
 8000fe4:	d12e      	bne.n	8001044 <USB_LP_CAN1_RX0_IRQHandler+0x9c>
    }
#endif

    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_SUSP)
    if (wIstr & ISTR_SUSP & wInterrupt_Mask) {
 8000fe6:	8822      	ldrh	r2, [r4, #0]
 8000fe8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8000fec:	4213      	tst	r3, r2
 8000fee:	d00c      	beq.n	800100a <USB_LP_CAN1_RX0_IRQHandler+0x62>
}

void usbSuspend(void)
{
    u16 wCNTR;
    wCNTR = _GetCNTR();
 8000ff0:	4a22      	ldr	r2, [pc, #136]	; (800107c <USB_LP_CAN1_RX0_IRQHandler+0xd4>)
    wCNTR |= CNTR_FSUSP | CNTR_LPMODE;
    _SetCNTR(wCNTR);

    // run any power reduction handlers
    bDeviceState = SUSPENDED;
 8000ff2:	4d23      	ldr	r5, [pc, #140]	; (8001080 <USB_LP_CAN1_RX0_IRQHandler+0xd8>)
}

void usbSuspend(void)
{
    u16 wCNTR;
    wCNTR = _GetCNTR();
 8000ff4:	6817      	ldr	r7, [r2, #0]
        } else {
            // if not possible then resume after xx ms
            usbResume(RESUME_LATER);
        }
        // clear of the ISTR bit must be done after setting of CNTR_FSUSP
        _SetISTR((u16)CLR_SUSP);
 8000ff6:	491e      	ldr	r1, [pc, #120]	; (8001070 <USB_LP_CAN1_RX0_IRQHandler+0xc8>)
}

void usbSuspend(void)
{
    u16 wCNTR;
    wCNTR = _GetCNTR();
 8000ff8:	b2bf      	uxth	r7, r7
    wCNTR |= CNTR_FSUSP | CNTR_LPMODE;
    _SetCNTR(wCNTR);
 8000ffa:	f047 070c 	orr.w	r7, r7, #12

    // run any power reduction handlers
    bDeviceState = SUSPENDED;
 8000ffe:	2603      	movs	r6, #3
        } else {
            // if not possible then resume after xx ms
            usbResume(RESUME_LATER);
        }
        // clear of the ISTR bit must be done after setting of CNTR_FSUSP
        _SetISTR((u16)CLR_SUSP);
 8001000:	f24f 70ff 	movw	r0, #63487	; 0xf7ff
void usbSuspend(void)
{
    u16 wCNTR;
    wCNTR = _GetCNTR();
    wCNTR |= CNTR_FSUSP | CNTR_LPMODE;
    _SetCNTR(wCNTR);
 8001004:	6017      	str	r7, [r2, #0]

    // run any power reduction handlers
    bDeviceState = SUSPENDED;
 8001006:	602e      	str	r6, [r5, #0]
        } else {
            // if not possible then resume after xx ms
            usbResume(RESUME_LATER);
        }
        // clear of the ISTR bit must be done after setting of CNTR_FSUSP
        _SetISTR((u16)CLR_SUSP);
 8001008:	6008      	str	r0, [r1, #0]
    }
#endif


#if (ISR_MSK & ISTR_SOF)
    if (wIstr & ISTR_SOF & wInterrupt_Mask) {
 800100a:	8822      	ldrh	r2, [r4, #0]
 800100c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001010:	4213      	tst	r3, r2
 8001012:	d008      	beq.n	8001026 <USB_LP_CAN1_RX0_IRQHandler+0x7e>
        _SetISTR((u16)CLR_SOF);
 8001014:	4916      	ldr	r1, [pc, #88]	; (8001070 <USB_LP_CAN1_RX0_IRQHandler+0xc8>)
        bIntPackSOF++;
 8001016:	4a1b      	ldr	r2, [pc, #108]	; (8001084 <USB_LP_CAN1_RX0_IRQHandler+0xdc>)
#endif


#if (ISR_MSK & ISTR_SOF)
    if (wIstr & ISTR_SOF & wInterrupt_Mask) {
        _SetISTR((u16)CLR_SOF);
 8001018:	f64f 50ff 	movw	r0, #65023	; 0xfdff
 800101c:	6008      	str	r0, [r1, #0]
        bIntPackSOF++;
 800101e:	7811      	ldrb	r1, [r2, #0]
 8001020:	3101      	adds	r1, #1
 8001022:	b2c9      	uxtb	r1, r1
 8001024:	7011      	strb	r1, [r2, #0]
    }
#endif


#if (ISR_MSK & ISTR_ESOF)
    if (wIstr & ISTR_ESOF & wInterrupt_Mask) {
 8001026:	8822      	ldrh	r2, [r4, #0]
 8001028:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800102c:	4213      	tst	r3, r2
 800102e:	d100      	bne.n	8001032 <USB_LP_CAN1_RX0_IRQHandler+0x8a>
 8001030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _SetISTR((u16)CLR_ESOF);
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <USB_LP_CAN1_RX0_IRQHandler+0xc8>)
 8001034:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8001038:	601a      	str	r2, [r3, #0]
        // resume handling timing is made with ESOFs
        // request without change of the machine state
        usbResume(RESUME_ESOF); 
 800103a:	2007      	movs	r0, #7
    }
#endif

}
 800103c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#if (ISR_MSK & ISTR_ESOF)
    if (wIstr & ISTR_ESOF & wInterrupt_Mask) {
        _SetISTR((u16)CLR_ESOF);
        // resume handling timing is made with ESOFs
        // request without change of the machine state
        usbResume(RESUME_ESOF); 
 8001040:	f7ff bf34 	b.w	8000eac <usbResume>
#endif


#if (ISR_MSK & ISTR_WKUP)
    if (wIstr & ISTR_WKUP & wInterrupt_Mask) {
        _SetISTR((u16)CLR_WKUP);
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <USB_LP_CAN1_RX0_IRQHandler+0xc8>)
 8001046:	f64e 72ff 	movw	r2, #61439	; 0xefff
 800104a:	601a      	str	r2, [r3, #0]
        usbResume(RESUME_EXTERNAL);
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff ff2d 	bl	8000eac <usbResume>
 8001052:	882b      	ldrh	r3, [r5, #0]
 8001054:	e7c7      	b.n	8000fe6 <USB_LP_CAN1_RX0_IRQHandler+0x3e>
    }
#endif

#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
        _SetISTR((u16)CLR_RESET);
 8001056:	4a06      	ldr	r2, [pc, #24]	; (8001070 <USB_LP_CAN1_RX0_IRQHandler+0xc8>)
        Device_Property.Reset();
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <USB_LP_CAN1_RX0_IRQHandler+0xe0>)
    }
#endif

#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
        _SetISTR((u16)CLR_RESET);
 800105a:	f64f 31ff 	movw	r1, #64511	; 0xfbff
        Device_Property.Reset();
 800105e:	685b      	ldr	r3, [r3, #4]
    }
#endif

#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
        _SetISTR((u16)CLR_RESET);
 8001060:	6011      	str	r1, [r2, #0]
        Device_Property.Reset();
 8001062:	4798      	blx	r3
 8001064:	882b      	ldrh	r3, [r5, #0]
 8001066:	e7b0      	b.n	8000fca <USB_LP_CAN1_RX0_IRQHandler+0x22>
    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
        /* servicing of the endpoint correct transfer interrupt */
        /* clear of the CTR flag into the sub */
        CTR_LP(); /* low priority ISR defined in the usb core lib */
 8001068:	f004 fef6 	bl	8005e58 <CTR_LP>
 800106c:	882b      	ldrh	r3, [r5, #0]
 800106e:	e7a7      	b.n	8000fc0 <USB_LP_CAN1_RX0_IRQHandler+0x18>
 8001070:	40005c44 	andmi	r5, r0, r4, asr #24
 8001074:	20000474 	andcs	r0, r0, r4, ror r4
 8001078:	20000598 	mulcs	r0, r8, r5
 800107c:	40005c40 	andmi	r5, r0, r0, asr #24
 8001080:	200005a4 	andcs	r0, r0, r4, lsr #11
 8001084:	200005a0 	andcs	r0, r0, r0, lsr #11
 8001088:	20000014 	andcs	r0, r0, r4, lsl r0

0800108c <main>:
      uart_printf("%02x",hash[idx]);
   uart_printf("\n");
}

int main() 
{
 800108c:	b530      	push	{r4, r5, lr}
 800108e:	b085      	sub	sp, #20
	bool no_user_jump = FALSE;
	bool dont_wait=FALSE;
	
    systemReset(); // peripherals but not PC
 8001090:	f000 f946 	bl	8001320 <systemReset>
    setupCLK();
 8001094:	f000 f96c 	bl	8001370 <setupCLK>
    setupLEDAndButton();
 8001098:	f000 f9a0 	bl	80013dc <setupLEDAndButton>
    setupUSB();
 800109c:	f7ff feb2 	bl	8000e04 <setupUSB>
    setupFLASH();
 80010a0:	f000 f9a6 	bl	80013f0 <setupFLASH>
    uartInit();
 80010a4:	f000 f8f8 	bl	8001298 <uartInit>
    usbReset();
 80010a8:	f7ff fda2 	bl	8000bf0 <usbReset>
	uart_printf("\nBootloader init...\n");
 80010ac:	483a      	ldr	r0, [pc, #232]	; (8001198 <main+0x10c>)
 80010ae:	f000 f8d1 	bl	8001254 <uart_printf>

    if (readPin(GPIOB, 15) == 0x0)
 80010b2:	210f      	movs	r1, #15
 80010b4:	4839      	ldr	r0, [pc, #228]	; (800119c <main+0x110>)
 80010b6:	f000 f893 	bl	80011e0 <readPin>
 80010ba:	4605      	mov	r5, r0
	{
		no_user_jump = TRUE;
	} 

	uart_printf("checking chain...\n");
 80010bc:	4838      	ldr	r0, [pc, #224]	; (80011a0 <main+0x114>)
 80010be:	f000 f8c9 	bl	8001254 <uart_printf>
	ImageObjectHandle imageHandle;

    int ret = imageCheckFromAddress(&imageHandle, USER_CODE_FLASH0X8008000, 0);
 80010c2:	4938      	ldr	r1, [pc, #224]	; (80011a4 <main+0x118>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	a803      	add	r0, sp, #12
 80010c8:	f004 fd58 	bl	8005b7c <imageCheckFromAddress>
 80010cc:	4604      	mov	r4, r0
    
    uart_printf("image check ret: %X\n", ret);
 80010ce:	4601      	mov	r1, r0
 80010d0:	4835      	ldr	r0, [pc, #212]	; (80011a8 <main+0x11c>)
 80010d2:	f000 f8bf 	bl	8001254 <uart_printf>
	switch (ret)
 80010d6:	2c03      	cmp	r4, #3
 80010d8:	d020      	beq.n	800111c <main+0x90>
 80010da:	2c04      	cmp	r4, #4
 80010dc:	d04b      	beq.n	8001176 <main+0xea>
 80010de:	2c02      	cmp	r4, #2
 80010e0:	d056      	beq.n	8001190 <main+0x104>
			break;

		default:
			break;
	}
	strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);
 80010e2:	2300      	movs	r3, #0
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	4831      	ldr	r0, [pc, #196]	; (80011ac <main+0x120>)
 80010e8:	210d      	movs	r1, #13
 80010ea:	2205      	movs	r2, #5
 80010ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010f0:	f000 f880 	bl	80011f4 <strobePin>
 80010f4:	b9f5      	cbnz	r5, 8001134 <main+0xa8>

	int delay_count = 0;
	while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
	{

		strobePin(LED_BANK, LED_PIN, 1, BLINK_SLOW,LED_ON_STATE);
 80010f6:	2400      	movs	r4, #0
 80010f8:	482c      	ldr	r0, [pc, #176]	; (80011ac <main+0x120>)
 80010fa:	210d      	movs	r1, #13
 80010fc:	2201      	movs	r2, #1
 80010fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001102:	9400      	str	r4, [sp, #0]
 8001104:	f000 f876 	bl	80011f4 <strobePin>

		if (dfuUploadStarted()) 
 8001108:	f000 fce6 	bl	8001ad8 <dfuUploadStarted>
 800110c:	2800      	cmp	r0, #0
 800110e:	d0f3      	beq.n	80010f8 <main+0x6c>
		{
			uart_printf("DFU finished upload\n");
 8001110:	4827      	ldr	r0, [pc, #156]	; (80011b0 <main+0x124>)
 8001112:	f000 f89f 	bl	8001254 <uart_printf>
			dfuFinishUpload(); // systemHardReset from DFU once done
 8001116:	f000 fce5 	bl	8001ae4 <dfuFinishUpload>
 800111a:	e7ed      	b.n	80010f8 <main+0x6c>
    
    uart_printf("image check ret: %X\n", ret);
	switch (ret)
	{
		case kImageImageIsTrusted:
			uart_printf("Boot OK\n");
 800111c:	4825      	ldr	r0, [pc, #148]	; (80011b4 <main+0x128>)
 800111e:	f000 f899 	bl	8001254 <uart_printf>
			break;

		default:
			break;
	}
	strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);
 8001122:	2300      	movs	r3, #0
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	4821      	ldr	r0, [pc, #132]	; (80011ac <main+0x120>)
 8001128:	210d      	movs	r1, #13
 800112a:	2205      	movs	r2, #5
 800112c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001130:	f000 f860 	bl	80011f4 <strobePin>
      uart_printf("%02x",hash[idx]);
   uart_printf("\n");
}

int main() 
{
 8001134:	2406      	movs	r4, #6

	int delay_count = 0;
	while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
	{

		strobePin(LED_BANK, LED_PIN, 1, BLINK_SLOW,LED_ON_STATE);
 8001136:	2500      	movs	r5, #0
 8001138:	e001      	b.n	800113e <main+0xb2>
			break;
	}
	strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);

	int delay_count = 0;
	while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
 800113a:	3c01      	subs	r4, #1
 800113c:	d012      	beq.n	8001164 <main+0xd8>
	{

		strobePin(LED_BANK, LED_PIN, 1, BLINK_SLOW,LED_ON_STATE);
 800113e:	481b      	ldr	r0, [pc, #108]	; (80011ac <main+0x120>)
 8001140:	210d      	movs	r1, #13
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001148:	9500      	str	r5, [sp, #0]
 800114a:	f000 f853 	bl	80011f4 <strobePin>

		if (dfuUploadStarted()) 
 800114e:	f000 fcc3 	bl	8001ad8 <dfuUploadStarted>
 8001152:	2800      	cmp	r0, #0
 8001154:	d0f1      	beq.n	800113a <main+0xae>
		{
			uart_printf("DFU finished upload\n");
 8001156:	4816      	ldr	r0, [pc, #88]	; (80011b0 <main+0x124>)
 8001158:	f000 f87c 	bl	8001254 <uart_printf>
			dfuFinishUpload(); // systemHardReset from DFU once done
 800115c:	f000 fcc2 	bl	8001ae4 <dfuFinishUpload>
			break;
	}
	strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);

	int delay_count = 0;
	while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
 8001160:	3c01      	subs	r4, #1
 8001162:	d1ec      	bne.n	800113e <main+0xb2>
		}
	}

	if (no_user_jump == FALSE)
	{
		uart_printf("Jumping to OS.\n");
 8001164:	4814      	ldr	r0, [pc, #80]	; (80011b8 <main+0x12c>)
 8001166:	f000 f875 	bl	8001254 <uart_printf>
		jumpToUser((USER_CODE_FLASH0X8008000+0x84));	
 800116a:	4814      	ldr	r0, [pc, #80]	; (80011bc <main+0x130>)
 800116c:	f000 f964 	bl	8001438 <jumpToUser>
	}
	
	return 0;// Added to please the compiler
 8001170:	4620      	mov	r0, r4
 8001172:	b005      	add	sp, #20
 8001174:	bd30      	pop	{r4, r5, pc}
			uart_printf("Boot OK\n");
			no_user_jump = FALSE;
			break;

		case kImageImageMissingMagic:
			uart_printf("Firmware missing... waiting in DFU\n");
 8001176:	4812      	ldr	r0, [pc, #72]	; (80011c0 <main+0x134>)
 8001178:	f000 f86c 	bl	8001254 <uart_printf>
			break;

		default:
			break;
	}
	strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);
 800117c:	2300      	movs	r3, #0
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	480a      	ldr	r0, [pc, #40]	; (80011ac <main+0x120>)
 8001182:	210d      	movs	r1, #13
 8001184:	2205      	movs	r2, #5
 8001186:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800118a:	f000 f833 	bl	80011f4 <strobePin>
 800118e:	e7b2      	b.n	80010f6 <main+0x6a>
			uart_printf("Firmware missing... waiting in DFU\n");
			no_user_jump = TRUE;
			break;

		case kImageImageRejectSignature:
			uart_printf("Signature unverified... waiting in DFU\n");
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <main+0x138>)
 8001192:	f000 f85f 	bl	8001254 <uart_printf>
			no_user_jump = TRUE;
			break;
 8001196:	e7f1      	b.n	800117c <main+0xf0>
 8001198:	08007108 	stmdaeq	r0, {r3, r8, ip, sp, lr}
 800119c:	40010c00 	andmi	r0, r1, r0, lsl #24
 80011a0:	08007120 	stmdaeq	r0, {r5, r8, ip, sp, lr}
 80011a4:	08008000 	stmdaeq	r0, {pc}
 80011a8:	08007134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp, lr}
 80011ac:	40011000 	andmi	r1, r1, r0
 80011b0:	080071a4 	stmdaeq	r0, {r2, r5, r7, r8, ip, sp, lr}
 80011b4:	0800714c 	stmdaeq	r0, {r2, r3, r6, r8, ip, sp, lr}
 80011b8:	080071bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, ip, sp, lr}
 80011bc:	08008084 	stmdaeq	r0, {r2, r7, pc}
 80011c0:	08007158 	stmdaeq	r0, {r3, r4, r6, r8, ip, sp, lr}
 80011c4:	0800717c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip, sp, lr}

080011c8 <gpio_write_bit>:
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 80011c8:	2301      	movs	r3, #1
 80011ca:	fa03 f101 	lsl.w	r1, r3, r1
    u32 pinMask = 0x1 << (16 + pin);
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
 80011ce:	f1d2 0201 	rsbs	r2, r2, #1
 80011d2:	bf38      	it	cc
 80011d4:	2200      	movcc	r2, #0
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 80011d6:	0113      	lsls	r3, r2, #4
 80011d8:	4099      	lsls	r1, r3
 80011da:	6101      	str	r1, [r0, #16]
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop

080011e0 <readPin>:
}

bool readPin(u32 bank, u8 pin) {
    // todo, implement read
    if (GET_REG(GPIO_IDR(bank)) & (0x01 << pin)) {
 80011e0:	2301      	movs	r3, #1
 80011e2:	fa03 f101 	lsl.w	r1, r3, r1
 80011e6:	6882      	ldr	r2, [r0, #8]
 80011e8:	420a      	tst	r2, r1
        return TRUE;
    } else {
        return FALSE;
    }
}
 80011ea:	bf0c      	ite	eq
 80011ec:	2000      	moveq	r0, #0
 80011ee:	2001      	movne	r0, #1
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop

080011f4 <strobePin>:

void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
 80011f4:	b4f0      	push	{r4, r5, r6, r7}
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 80011f6:	2401      	movs	r4, #1
 80011f8:	fa04 f101 	lsl.w	r1, r4, r1
        return FALSE;
    }
}

void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
 80011fc:	f89d 6010 	ldrb.w	r6, [sp, #16]
    gpio_write_bit( bank,pin,1-onState);

    u32 c;
    while (count-- > 0) 
 8001200:	1e57      	subs	r7, r2, #1
    u32 pinMask = 0x1 << (16 + pin);
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
 8001202:	1b34      	subs	r4, r6, r4
 8001204:	4265      	negs	r5, r4
 8001206:	4165      	adcs	r5, r4
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 8001208:	012d      	lsls	r5, r5, #4
 800120a:	fa01 f505 	lsl.w	r5, r1, r5
 800120e:	f100 0410 	add.w	r4, r0, #16
 8001212:	6105      	str	r5, [r0, #16]
void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
    gpio_write_bit( bank,pin,1-onState);

    u32 c;
    while (count-- > 0) 
 8001214:	b2f8      	uxtb	r0, r7
 8001216:	b1a2      	cbz	r2, 8001242 <strobePin+0x4e>
 8001218:	f1d6 0201 	rsbs	r2, r6, #1
 800121c:	bf38      	it	cc
 800121e:	2200      	movcc	r2, #0
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	4091      	lsls	r1, r2
	{
        for (c = rate; c > 0; c--)
 8001224:	b17b      	cbz	r3, 8001246 <strobePin+0x52>
 8001226:	461a      	mov	r2, r3
		{
            asm volatile("nop");
 8001228:	bf00      	nop
    gpio_write_bit( bank,pin,1-onState);

    u32 c;
    while (count-- > 0) 
	{
        for (c = rate; c > 0; c--)
 800122a:	3a01      	subs	r2, #1
 800122c:	d1fc      	bne.n	8001228 <strobePin+0x34>
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 800122e:	6021      	str	r1, [r4, #0]
 8001230:	461a      	mov	r2, r3
		
        gpio_write_bit( bank,pin,onState);
		
        for (c = rate; c > 0; c--)
		{
            asm volatile("nop");
 8001232:	bf00      	nop
            asm volatile("nop");
        }
		
        gpio_write_bit( bank,pin,onState);
		
        for (c = rate; c > 0; c--)
 8001234:	3a01      	subs	r2, #1
 8001236:	d1fc      	bne.n	8001232 <strobePin+0x3e>
void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
    gpio_write_bit( bank,pin,1-onState);

    u32 c;
    while (count-- > 0) 
 8001238:	3801      	subs	r0, #1
 800123a:	b2c0      	uxtb	r0, r0
 800123c:	28ff      	cmp	r0, #255	; 0xff
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 800123e:	6025      	str	r5, [r4, #0]
void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
    gpio_write_bit( bank,pin,1-onState);

    u32 c;
    while (count-- > 0) 
 8001240:	d1f0      	bne.n	8001224 <strobePin+0x30>
		{
            asm volatile("nop");
        }
        gpio_write_bit( bank,pin,1-onState);
    }
}
 8001242:	bcf0      	pop	{r4, r5, r6, r7}
 8001244:	4770      	bx	lr
void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
    gpio_write_bit( bank,pin,1-onState);

    u32 c;
    while (count-- > 0) 
 8001246:	3801      	subs	r0, #1
 8001248:	b2c0      	uxtb	r0, r0
 800124a:	28ff      	cmp	r0, #255	; 0xff
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 800124c:	6021      	str	r1, [r4, #0]
 800124e:	6025      	str	r5, [r4, #0]
void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
    gpio_write_bit( bank,pin,1-onState);

    u32 c;
    while (count-- > 0) 
 8001250:	d1e8      	bne.n	8001224 <strobePin+0x30>
 8001252:	e7f6      	b.n	8001242 <strobePin+0x4e>

08001254 <uart_printf>:

    }
}

void uart_printf(const char *fmt, ...) // custom printf() function
{
 8001254:	b40f      	push	{r0, r1, r2, r3}
 8001256:	b510      	push	{r4, lr}
 8001258:	b0b4      	sub	sp, #208	; 0xd0
 800125a:	ab36      	add	r3, sp, #216	; 0xd8
 800125c:	f853 1b04 	ldr.w	r1, [r3], #4
}

void vprint(const char *fmt, va_list argp)
{
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 8001260:	a802      	add	r0, sp, #8
 8001262:	461a      	mov	r2, r3
}

void uart_printf(const char *fmt, ...) // custom printf() function
{
    va_list argp;
    va_start(argp, fmt);
 8001264:	9301      	str	r3, [sp, #4]
}

void vprint(const char *fmt, va_list argp)
{
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 8001266:	f005 fe09 	bl	8006e7c <vsiprintf>
 800126a:	2800      	cmp	r0, #0
 800126c:	dd0d      	ble.n	800128a <uart_printf+0x36>
  USARTx->DR = ch;  
}

void UU_PutString(USART_TypeDef* USARTx, uint8_t * str)
{
  while(*str != 0)
 800126e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8001272:	b151      	cbz	r1, 800128a <uart_printf+0x36>

//DebugLog
#ifdef DEBUG
void UU_PutChar(USART_TypeDef* USARTx, uint8_t ch)
{
  while(!(USARTx->SR & USART_SR_TXE));
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <uart_printf+0x40>)
 8001276:	a802      	add	r0, sp, #8
 8001278:	4614      	mov	r4, r2
 800127a:	8813      	ldrh	r3, [r2, #0]
 800127c:	061b      	lsls	r3, r3, #24
 800127e:	d5fc      	bpl.n	800127a <uart_printf+0x26>
  USARTx->DR = ch;  
 8001280:	80a1      	strh	r1, [r4, #4]
}

void UU_PutString(USART_TypeDef* USARTx, uint8_t * str)
{
  while(*str != 0)
 8001282:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8001286:	2900      	cmp	r1, #0
 8001288:	d1f7      	bne.n	800127a <uart_printf+0x26>
{
    va_list argp;
    va_start(argp, fmt);
    vprint(fmt, argp);
    va_end(argp);
}
 800128a:	b034      	add	sp, #208	; 0xd0
 800128c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001290:	b004      	add	sp, #16
 8001292:	4770      	bx	lr
 8001294:	40013800 	andmi	r3, r1, r0, lsl #16

08001298 <uartInit>:
    uart_printf(" |%s|\n", cs);
}


#endif
void uartInit(void) {
 8001298:	b570      	push	{r4, r5, r6, lr}
    USART_InitTypeDef USART_InitStructure;
    
    /* Enable peripheral clocks for USART1 on GPIOA */
    //RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
        RCC_APB2PeriphClockCmd(GPIOA, ENABLE);
 800129a:	4c1f      	ldr	r4, [pc, #124]	; (8001318 <uartInit+0x80>)
    uart_printf(" |%s|\n", cs);
}


#endif
void uartInit(void) {
 800129c:	b086      	sub	sp, #24
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    
    /* Enable peripheral clocks for USART1 on GPIOA */
    //RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 800129e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012a2:	2101      	movs	r1, #1
 80012a4:	f7ff f9d4 	bl	8000650 <RCC_APB2PeriphClockCmd>
        RCC_APB2PeriphClockCmd(GPIOA, ENABLE);
 80012a8:	4620      	mov	r0, r4
 80012aa:	2101      	movs	r1, #1
 80012ac:	f7ff f9d0 	bl	8000650 <RCC_APB2PeriphClockCmd>
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
        
    USART_Init(USART1, &USART_InitStructure);
 80012b0:	4d1a      	ldr	r5, [pc, #104]	; (800131c <uartInit+0x84>)
    
    /* PA9 = alternate function push/pull output */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
 80012b2:	4620      	mov	r0, r4
 80012b4:	a901      	add	r1, sp, #4
        RCC_APB2PeriphClockCmd(GPIOA, ENABLE);
    /* Configure PA9 and PA10 as USART1 TX/RX */
    
    /* PA9 = alternate function push/pull output */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80012b6:	2203      	movs	r2, #3
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80012b8:	2318      	movs	r3, #24
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
        RCC_APB2PeriphClockCmd(GPIOA, ENABLE);
    /* Configure PA9 and PA10 as USART1 TX/RX */
    
    /* PA9 = alternate function push/pull output */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 80012ba:	f44f 7600 	mov.w	r6, #512	; 0x200
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80012be:	f88d 2006 	strb.w	r2, [sp, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80012c2:	f88d 3007 	strb.w	r3, [sp, #7]
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
        RCC_APB2PeriphClockCmd(GPIOA, ENABLE);
    /* Configure PA9 and PA10 as USART1 TX/RX */
    
    /* PA9 = alternate function push/pull output */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 80012c6:	f8ad 6004 	strh.w	r6, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
 80012ca:	f7fe ff8b 	bl	80001e4 <GPIO_Init>
    
    /* PA10 = floating input */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
 80012ce:	4620      	mov	r0, r4
 80012d0:	a901      	add	r1, sp, #4
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
    
    /* PA10 = floating input */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80012d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80012d6:	2304      	movs	r3, #4
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
    
    /* PA10 = floating input */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80012d8:	f8ad 2004 	strh.w	r2, [sp, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80012dc:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
    
    /* Configure and initialize usart... */
    USART_InitStructure.USART_BaudRate = 115200;
 80012e0:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
    
    /* PA10 = floating input */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
 80012e4:	f7fe ff7e 	bl	80001e4 <GPIO_Init>
    
    /* Configure and initialize usart... */
    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80012e8:	2300      	movs	r3, #0
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80012ea:	220c      	movs	r2, #12
        
    USART_Init(USART1, &USART_InitStructure);
 80012ec:	a902      	add	r1, sp, #8
 80012ee:	4628      	mov	r0, r5
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
    
    /* Configure and initialize usart... */
    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80012f0:	f8ad 300c 	strh.w	r3, [sp, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80012f4:	f8ad 300e 	strh.w	r3, [sp, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 80012f8:	f8ad 3010 	strh.w	r3, [sp, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80012fc:	f8ad 3014 	strh.w	r3, [sp, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001300:	f8ad 2012 	strh.w	r2, [sp, #18]
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
    
    /* Configure and initialize usart... */
    USART_InitStructure.USART_BaudRate = 115200;
 8001304:	9402      	str	r4, [sp, #8]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
        
    USART_Init(USART1, &USART_InitStructure);
 8001306:	f7ff fa6f 	bl	80007e8 <USART_Init>
    
    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);   
 800130a:	4628      	mov	r0, r5
 800130c:	2101      	movs	r1, #1
 800130e:	f7ff faed 	bl	80008ec <USART_Cmd>
}
 8001312:	b006      	add	sp, #24
 8001314:	bd70      	pop	{r4, r5, r6, pc}
 8001316:	bf00      	nop
 8001318:	40010800 	andmi	r0, r1, r0, lsl #16
 800131c:	40013800 	andmi	r3, r1, r0, lsl #16

08001320 <systemReset>:

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <systemReset+0x40>)
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8001322:	4a10      	ldr	r2, [pc, #64]	; (8001364 <systemReset+0x44>)
    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);   
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8001324:	6818      	ldr	r0, [r3, #0]
    
    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);   
}

void systemReset(void) {
 8001326:	b410      	push	{r4}
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8001328:	f040 0001 	orr.w	r0, r0, #1
 800132c:	6018      	str	r0, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 800132e:	6814      	ldr	r4, [r2, #0]
 8001330:	490d      	ldr	r1, [pc, #52]	; (8001368 <systemReset+0x48>)
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 8001332:	480e      	ldr	r0, [pc, #56]	; (800136c <systemReset+0x4c>)
    USART_Cmd(USART1, ENABLE);   
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8001334:	4021      	ands	r1, r4
 8001336:	6011      	str	r1, [r2, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
 8001338:	6819      	ldr	r1, [r3, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 800133a:	2400      	movs	r4, #0
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
 800133c:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8001340:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001344:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
 8001346:	6819      	ldr	r1, [r3, #0]
 8001348:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800134c:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);
 800134e:	6813      	ldr	r3, [r2, #0]
 8001350:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001354:	6013      	str	r3, [r2, #0]

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 8001356:	6004      	str	r4, [r0, #0]
}
 8001358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40021000 	andmi	r1, r2, r0
 8001364:	40021004 	andmi	r1, r2, r4
 8001368:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000
 800136c:	40021008 	andmi	r1, r2, r8

08001370 <setupCLK>:

void setupCLK(void) {
	unsigned int StartUpCounter=0;
    /* enable HSE */
    SET_REG(RCC_CR, GET_REG(RCC_CR) | 0x00010001);
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <setupCLK+0x60>)
 8001372:	681a      	ldr	r2, [r3, #0]
    while ((GET_REG(RCC_CR) & 0x00020000) == 0); /* for it to come on */
 8001374:	4619      	mov	r1, r3
}

void setupCLK(void) {
	unsigned int StartUpCounter=0;
    /* enable HSE */
    SET_REG(RCC_CR, GET_REG(RCC_CR) | 0x00010001);
 8001376:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 800137a:	601a      	str	r2, [r3, #0]
    while ((GET_REG(RCC_CR) & 0x00020000) == 0); /* for it to come on */
 800137c:	680b      	ldr	r3, [r1, #0]
 800137e:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <setupCLK+0x60>)
 8001380:	0398      	lsls	r0, r3, #14
 8001382:	d5fb      	bpl.n	800137c <setupCLK+0xc>

    /* enable flash prefetch buffer */
    SET_REG(FLASH_ACR, 0x00000012);
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <setupCLK+0x64>)
 8001386:	2112      	movs	r1, #18
	
     /* Configure PLL */
#ifdef XTAL12M
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00110400); /* pll=72Mhz(x6),APB1=36Mhz,AHB=72Mhz */
#else
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x001D0400); /* pll=72Mhz(x9),APB1=36Mhz,AHB=72Mhz */
 8001388:	4813      	ldr	r0, [pc, #76]	; (80013d8 <setupCLK+0x68>)
    /* enable HSE */
    SET_REG(RCC_CR, GET_REG(RCC_CR) | 0x00010001);
    while ((GET_REG(RCC_CR) & 0x00020000) == 0); /* for it to come on */

    /* enable flash prefetch buffer */
    SET_REG(FLASH_ACR, 0x00000012);
 800138a:	6019      	str	r1, [r3, #0]
	
     /* Configure PLL */
#ifdef XTAL12M
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00110400); /* pll=72Mhz(x6),APB1=36Mhz,AHB=72Mhz */
#else
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x001D0400); /* pll=72Mhz(x9),APB1=36Mhz,AHB=72Mhz */
 800138c:	6803      	ldr	r3, [r0, #0]

#if !defined  (HSE_STARTUP_TIMEOUT) 
  #define HSE_STARTUP_TIMEOUT    ((unsigned int)0x0500)   /*!< Time out for HSE start up */
#endif /* HSE_STARTUP_TIMEOUT */   

    while ((GET_REG(RCC_CR) & 0x03000000) == 0 && StartUpCounter < HSE_STARTUP_TIMEOUT)
 800138e:	4611      	mov	r1, r2
	
     /* Configure PLL */
#ifdef XTAL12M
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00110400); /* pll=72Mhz(x6),APB1=36Mhz,AHB=72Mhz */
#else
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x001D0400); /* pll=72Mhz(x9),APB1=36Mhz,AHB=72Mhz */
 8001390:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001394:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001398:	6003      	str	r3, [r0, #0]
#endif	

    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x01000000); /* enable the pll */
 800139a:	6813      	ldr	r3, [r2, #0]
 800139c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013a0:	6013      	str	r3, [r2, #0]

#if !defined  (HSE_STARTUP_TIMEOUT) 
  #define HSE_STARTUP_TIMEOUT    ((unsigned int)0x0500)   /*!< Time out for HSE start up */
#endif /* HSE_STARTUP_TIMEOUT */   

    while ((GET_REG(RCC_CR) & 0x03000000) == 0 && StartUpCounter < HSE_STARTUP_TIMEOUT)
 80013a2:	680b      	ldr	r3, [r1, #0]
 80013a4:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
 80013a8:	d0fb      	beq.n	80013a2 <setupCLK+0x32>
	{
		// HSE has not started. Try restarting the processor
		systemHardReset(); 
	}
    /* Set SYSCLK as PLL */
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00000002);
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <setupCLK+0x68>)
 80013ac:	6819      	ldr	r1, [r3, #0]
    while ((GET_REG(RCC_CFGR) & 0x00000008) == 0); /* wait for it to come on */
 80013ae:	461a      	mov	r2, r3
	{
		// HSE has not started. Try restarting the processor
		systemHardReset(); 
	}
    /* Set SYSCLK as PLL */
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00000002);
 80013b0:	f041 0102 	orr.w	r1, r1, #2
 80013b4:	6019      	str	r1, [r3, #0]
    while ((GET_REG(RCC_CFGR) & 0x00000008) == 0); /* wait for it to come on */
 80013b6:	6813      	ldr	r3, [r2, #0]
 80013b8:	071b      	lsls	r3, r3, #28
 80013ba:	d5fc      	bpl.n	80013b6 <setupCLK+0x46>
	
    pRCC->APB2ENR |= 0B111111100;// Enable All GPIO channels (A to G)
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <setupCLK+0x60>)
 80013be:	699a      	ldr	r2, [r3, #24]
 80013c0:	f442 72fe 	orr.w	r2, r2, #508	; 0x1fc
 80013c4:	619a      	str	r2, [r3, #24]
	pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
 80013c6:	69da      	ldr	r2, [r3, #28]
 80013c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013cc:	61da      	str	r2, [r3, #28]
 80013ce:	4770      	bx	lr
 80013d0:	40021000 	andmi	r1, r2, r0
 80013d4:	40022000 	andmi	r2, r2, r0
 80013d8:	40021004 	andmi	r1, r2, r4

080013dc <setupLEDAndButton>:

}

void setupLEDAndButton (void) { 
  SET_REG(GPIO_CR(LED_BANK,LED_PIN),(GET_REG(GPIO_CR(LED_BANK,LED_PIN)) & crMask(LED_PIN)) | CR_OUTPUT_PP << CR_SHITF(LED_PIN));
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <setupLEDAndButton+0x10>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80013e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	4770      	bx	lr
 80013ec:	40011004 	andmi	r1, r1, r4

080013f0 <setupFLASH>:
}

void setupFLASH() {
    /* configure the HSI oscillator */
    if ((pRCC->CR & 0x01) == 0x00) {
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <setupFLASH+0x1c>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	07d2      	lsls	r2, r2, #31
 80013f6:	d403      	bmi.n	8001400 <setupFLASH+0x10>
        u32 rwmVal = pRCC->CR;
 80013f8:	681a      	ldr	r2, [r3, #0]
        rwmVal |= 0x01;
 80013fa:	f042 0201 	orr.w	r2, r2, #1
        pRCC->CR = rwmVal;
 80013fe:	601a      	str	r2, [r3, #0]
    }

    /* wait for it to come on */
    while ((pRCC->CR & 0x02) == 0x00) {}
 8001400:	4a02      	ldr	r2, [pc, #8]	; (800140c <setupFLASH+0x1c>)
 8001402:	6813      	ldr	r3, [r2, #0]
 8001404:	079b      	lsls	r3, r3, #30
 8001406:	d5fc      	bpl.n	8001402 <setupFLASH+0x12>
}   
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40021000 	andmi	r1, r2, r0

08001410 <uid_read>:

/* Read U_ID register */
void uid_read(struct u_id *id)
{
    id->off0 = MMIO16(U_ID + 0x0);
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <uid_read+0x1c>)
    id->off2 = MMIO16(U_ID + 0x2);
 8001412:	4a07      	ldr	r2, [pc, #28]	; (8001430 <uid_read+0x20>)
}   

/* Read U_ID register */
void uid_read(struct u_id *id)
{
    id->off0 = MMIO16(U_ID + 0x0);
 8001414:	8819      	ldrh	r1, [r3, #0]
    id->off2 = MMIO16(U_ID + 0x2);
    id->off4 = MMIO32(U_ID + 0x4);
 8001416:	3304      	adds	r3, #4
}   

/* Read U_ID register */
void uid_read(struct u_id *id)
{
    id->off0 = MMIO16(U_ID + 0x0);
 8001418:	8001      	strh	r1, [r0, #0]
    id->off2 = MMIO16(U_ID + 0x2);
 800141a:	8812      	ldrh	r2, [r2, #0]
    id->off4 = MMIO32(U_ID + 0x4);
 800141c:	681b      	ldr	r3, [r3, #0]
    id->off8 = MMIO32(U_ID + 0x8);
 800141e:	4905      	ldr	r1, [pc, #20]	; (8001434 <uid_read+0x24>)
/* Read U_ID register */
void uid_read(struct u_id *id)
{
    id->off0 = MMIO16(U_ID + 0x0);
    id->off2 = MMIO16(U_ID + 0x2);
    id->off4 = MMIO32(U_ID + 0x4);
 8001420:	6043      	str	r3, [r0, #4]
    id->off8 = MMIO32(U_ID + 0x8);
 8001422:	680b      	ldr	r3, [r1, #0]

/* Read U_ID register */
void uid_read(struct u_id *id)
{
    id->off0 = MMIO16(U_ID + 0x0);
    id->off2 = MMIO16(U_ID + 0x2);
 8001424:	8042      	strh	r2, [r0, #2]
    id->off4 = MMIO32(U_ID + 0x4);
    id->off8 = MMIO32(U_ID + 0x8);
 8001426:	6083      	str	r3, [r0, #8]
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	1ffff7e8 	svcne	0x00fff7e8
 8001430:	1ffff7ea 	svcne	0x00fff7ea
 8001434:	1ffff7f0 	svcne	0x00fff7f0

08001438 <jumpToUser>:

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 8001438:	4b20      	ldr	r3, [pc, #128]	; (80014bc <jumpToUser+0x84>)
 800143a:	2280      	movs	r2, #128	; 0x80

  usrMain();                                /* go! */
}


void jumpToUser(u32 usrAddr) {
 800143c:	b570      	push	{r4, r5, r6, lr}

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 800143e:	601a      	str	r2, [r3, #0]

  usrMain();                                /* go! */
}


void jumpToUser(u32 usrAddr) {
 8001440:	4604      	mov	r4, r0
    /* tear down all the dfu related setup */
    // disable usb interrupts, clear them, turn off usb, set the disc pin
    // todo pick exactly what we want to do here, now its just a conservative

    flashLock();
    usbDsbISR();
 8001442:	f7ff fda5 	bl	8000f90 <usbDsbISR>
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 8001446:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <jumpToUser+0x88>)
    rNVIC->ICER[1] = 0xFFFFFFFF;
    rNVIC->ICPR[0] = 0xFFFFFFFF;
    rNVIC->ICPR[1] = 0xFFFFFFFF;

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 8001448:	491e      	ldr	r1, [pc, #120]	; (80014c4 <jumpToUser+0x8c>)
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 800144a:	f04f 32ff 	mov.w	r2, #4294967295
    rNVIC->ICER[1] = 0xFFFFFFFF;
    rNVIC->ICPR[0] = 0xFFFFFFFF;
    rNVIC->ICPR[1] = 0xFFFFFFFF;

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 800144e:	2004      	movs	r0, #4
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 8001450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    rNVIC->ICER[1] = 0xFFFFFFFF;
 8001454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    rNVIC->ICPR[0] = 0xFFFFFFFF;
 8001458:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    rNVIC->ICPR[1] = 0xFFFFFFFF;
 800145c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 8001460:	6008      	str	r0, [r1, #0]
    flashLock();
    usbDsbISR();
    nvicDisableInterrupts();
	
#ifndef HAS_MAPLE_HARDWARE	
	usbDsbBus();
 8001462:	f7ff fd07 	bl	8000e74 <usbDsbBus>
    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);   
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <jumpToUser+0x90>)
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8001468:	4a18      	ldr	r2, [pc, #96]	; (80014cc <jumpToUser+0x94>)
    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);   
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 800146a:	6818      	ldr	r0, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 800146c:	4918      	ldr	r1, [pc, #96]	; (80014d0 <jumpToUser+0x98>)
    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);   
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 800146e:	f040 0001 	orr.w	r0, r0, #1
 8001472:	6018      	str	r0, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8001474:	6810      	ldr	r0, [r2, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 8001476:	4d17      	ldr	r5, [pc, #92]	; (80014d4 <jumpToUser+0x9c>)
    USART_Cmd(USART1, ENABLE);   
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8001478:	4001      	ands	r1, r0
 800147a:	6011      	str	r1, [r2, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
 800147c:	6819      	ldr	r1, [r3, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 800147e:	2600      	movs	r6, #0
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
 8001480:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8001484:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001488:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
 800148a:	6818      	ldr	r0, [r3, #0]
	usbDsbBus();
#endif
	
// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs
    SET_REG(AFIO_MAPR,(GET_REG(AFIO_MAPR) & ~AFIO_MAPR_SWJ_CFG) | AFIO_MAPR_SWJ_CFG_NO_JTAG_NO_SW);// Try to disable SWD AND JTAG so we can use those pins (not sure if this works).
 800148c:	4912      	ldr	r1, [pc, #72]	; (80014d8 <jumpToUser+0xa0>)

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
 800148e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8001492:	6018      	str	r0, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);
 8001494:	6813      	ldr	r3, [r2, #0]
  typedef void (*funcPtr)(void);
  u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */

  funcPtr usrMain = (funcPtr) jumpAddr;

  SET_REG(SCB_VTOR, (vu32) (usrAddr));
 8001496:	4811      	ldr	r0, [pc, #68]	; (80014dc <jumpToUser+0xa4>)
void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);
 8001498:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800149c:	6013      	str	r3, [r2, #0]

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 800149e:	602e      	str	r6, [r5, #0]
	usbDsbBus();
#endif
	
// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs
    SET_REG(AFIO_MAPR,(GET_REG(AFIO_MAPR) & ~AFIO_MAPR_SWJ_CFG) | AFIO_MAPR_SWJ_CFG_NO_JTAG_NO_SW);// Try to disable SWD AND JTAG so we can use those pins (not sure if this works).
 80014a0:	680b      	ldr	r3, [r1, #0]
 80014a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014aa:	600b      	str	r3, [r1, #0]
void setMspAndJump(u32 usrAddr) {
  // Dedicated function with no call to any function (appart the last call)
  // This way, there is no manipulation of the stack here, ensuring that GGC
  // didn't insert any pop from the SP after having set the MSP.
  typedef void (*funcPtr)(void);
  u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */
 80014ac:	6863      	ldr	r3, [r4, #4]

  funcPtr usrMain = (funcPtr) jumpAddr;

  SET_REG(SCB_VTOR, (vu32) (usrAddr));
 80014ae:	6004      	str	r4, [r0, #0]

  asm volatile("msr msp, %0"::"g"
               (*(volatile u32 *)usrAddr));
 80014b0:	6822      	ldr	r2, [r4, #0]

  funcPtr usrMain = (funcPtr) jumpAddr;

  SET_REG(SCB_VTOR, (vu32) (usrAddr));

  asm volatile("msr msp, %0"::"g"
 80014b2:	f382 8808 	msr	MSP, r2
               (*(volatile u32 *)usrAddr));

  usrMain();                                /* go! */
 80014b6:	4798      	blx	r3
 80014b8:	bd70      	pop	{r4, r5, r6, pc}
 80014ba:	bf00      	nop
 80014bc:	40022010 	andmi	r2, r2, r0, lsl r0
 80014c0:	e000e100 	and	lr, r0, r0, lsl #2
 80014c4:	e000e010 	and	lr, r0, r0, lsl r0
 80014c8:	40021000 	andmi	r1, r2, r0
 80014cc:	40021004 	andmi	r1, r2, r4
 80014d0:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000
 80014d4:	40021008 	andmi	r1, r2, r8
 80014d8:	40010004 	andmi	r0, r1, r4
 80014dc:	e000ed08 	and	lr, r0, r8, lsl #26

080014e0 <nvicInit>:
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <nvicInit+0x68>)
		pRCC->APB1ENR &= ~(RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
	}
    return flagSet;
}

void nvicInit(NVIC_InitTypeDef *NVIC_InitStruct) {
 80014e2:	b410      	push	{r4}
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 80014e4:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80014e6:	7844      	ldrb	r4, [r0, #1]
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 80014e8:	43db      	mvns	r3, r3
 80014ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80014ee:	210f      	movs	r1, #15
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
 80014f0:	f1c3 0204 	rsb	r2, r3, #4
    tmpsub = tmpsub >> tmppriority;
 80014f4:	40d9      	lsrs	r1, r3

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80014f6:	fa04 f202 	lsl.w	r2, r4, r2
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80014fa:	7884      	ldrb	r4, [r0, #2]

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80014fc:	7803      	ldrb	r3, [r0, #0]
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80014fe:	4021      	ands	r1, r4
 8001500:	4311      	orrs	r1, r2

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8001502:	f003 0203 	and.w	r2, r3, #3
 8001506:	00d2      	lsls	r2, r2, #3

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8001508:	24ff      	movs	r4, #255	; 0xff
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 800150a:	0109      	lsls	r1, r1, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 800150c:	4091      	lsls	r1, r2

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 800150e:	fa04 f202 	lsl.w	r2, r4, r2
 8001512:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8001516:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800151a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 800151e:	f8d3 4300 	ldr.w	r4, [r3, #768]	; 0x300
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
    tmppriority &= tmpmask;
 8001522:	4011      	ands	r1, r2
    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 8001524:	ea24 0202 	bic.w	r2, r4, r2
    tmppriority &= tmpmask;
    tmpreg |= tmppriority;
 8001528:	430a      	orrs	r2, r1

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 800152a:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 800152e:	7803      	ldrb	r3, [r0, #0]
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8001530:	2101      	movs	r1, #1
 8001532:	f003 021f 	and.w	r2, r3, #31
 8001536:	4091      	lsls	r1, r2
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8001538:	4a04      	ldr	r2, [pc, #16]	; (800154c <nvicInit+0x6c>)
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}
 8001540:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	and	lr, r0, r0, lsl #26
 800154c:	e000e100 	and	lr, r0, r0, lsl #2

08001550 <nvicDisableInterrupts>:

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <nvicDisableInterrupts+0x20>)
    rNVIC->ICER[1] = 0xFFFFFFFF;
    rNVIC->ICPR[0] = 0xFFFFFFFF;
    rNVIC->ICPR[1] = 0xFFFFFFFF;

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 8001552:	4908      	ldr	r1, [pc, #32]	; (8001574 <nvicDisableInterrupts+0x24>)
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
    rNVIC->ICER[1] = 0xFFFFFFFF;
    rNVIC->ICPR[0] = 0xFFFFFFFF;
    rNVIC->ICPR[1] = 0xFFFFFFFF;

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 8001558:	2004      	movs	r0, #4
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 800155a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    rNVIC->ICER[1] = 0xFFFFFFFF;
 800155e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    rNVIC->ICPR[0] = 0xFFFFFFFF;
 8001562:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    rNVIC->ICPR[1] = 0xFFFFFFFF;
 8001566:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 800156a:	6008      	str	r0, [r1, #0]
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000e100 	and	lr, r0, r0, lsl #2
 8001574:	e000e010 	and	lr, r0, r0, lsl r0

08001578 <systemHardReset>:

void systemHardReset(void) {
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;

    /* Reset  */
    rSCB->AIRCR = (u32)AIRCR_RESET_REQ;
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <systemHardReset+0xc>)
 800157a:	4a03      	ldr	r2, [pc, #12]	; (8001588 <systemHardReset+0x10>)
 800157c:	60da      	str	r2, [r3, #12]

    /*  should never get here */
    while (1) {
        asm volatile("nop");
 800157e:	bf00      	nop
 8001580:	e7fd      	b.n	800157e <systemHardReset+0x6>
 8001582:	bf00      	nop
 8001584:	e000ed00 	and	lr, r0, r0, lsl #26
 8001588:	05fa0004 	ldrbeq	r0, [sl, #4]!

0800158c <flashErasePage>:
    }
}

bool flashErasePage(u32 pageAddr) {
    u32 rwmVal = GET_REG(FLASH_CR);
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <flashErasePage+0x34>)
    rwmVal = FLASH_CR_PER;
    SET_REG(FLASH_CR, rwmVal);
 800158e:	2102      	movs	r1, #2

    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8001590:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <flashErasePage+0x38>)
    while (1) {
        asm volatile("nop");
    }
}

bool flashErasePage(u32 pageAddr) {
 8001592:	b410      	push	{r4}
    u32 rwmVal = GET_REG(FLASH_CR);
 8001594:	681c      	ldr	r4, [r3, #0]
    rwmVal = FLASH_CR_PER;
    SET_REG(FLASH_CR, rwmVal);
 8001596:	6019      	str	r1, [r3, #0]

    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8001598:	6813      	ldr	r3, [r2, #0]
 800159a:	07db      	lsls	r3, r3, #31
 800159c:	d4fc      	bmi.n	8001598 <flashErasePage+0xc>
    SET_REG(FLASH_AR, pageAddr);
 800159e:	4c0a      	ldr	r4, [pc, #40]	; (80015c8 <flashErasePage+0x3c>)
    SET_REG(FLASH_CR, FLASH_CR_START | FLASH_CR_PER);
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <flashErasePage+0x34>)
 80015a2:	2142      	movs	r1, #66	; 0x42
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80015a4:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <flashErasePage+0x38>)
    u32 rwmVal = GET_REG(FLASH_CR);
    rwmVal = FLASH_CR_PER;
    SET_REG(FLASH_CR, rwmVal);

    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
    SET_REG(FLASH_AR, pageAddr);
 80015a6:	6020      	str	r0, [r4, #0]
    SET_REG(FLASH_CR, FLASH_CR_START | FLASH_CR_PER);
 80015a8:	6019      	str	r1, [r3, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80015aa:	6813      	ldr	r3, [r2, #0]
 80015ac:	f013 0301 	ands.w	r3, r3, #1
 80015b0:	d1fb      	bne.n	80015aa <flashErasePage+0x1e>

    /* todo: verify the page was erased */

    rwmVal = 0x00;
    SET_REG(FLASH_CR, rwmVal);
 80015b2:	4a03      	ldr	r2, [pc, #12]	; (80015c0 <flashErasePage+0x34>)

    return TRUE;
}
 80015b4:	2001      	movs	r0, #1
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}

    /* todo: verify the page was erased */

    rwmVal = 0x00;
    SET_REG(FLASH_CR, rwmVal);
 80015b6:	6013      	str	r3, [r2, #0]

    return TRUE;
}
 80015b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40022010 	andmi	r2, r2, r0, lsl r0
 80015c4:	4002200c 	andmi	r2, r2, ip
 80015c8:	40022014 	andmi	r2, r2, r4, lsl r0

080015cc <flashWriteWord>:
    }

    return TRUE;
}

bool flashWriteWord(u32 addr, u32 word) {
 80015cc:	b430      	push	{r4, r5}
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;
 80015ce:	0c0a      	lsrs	r2, r1, #16
    }

    return TRUE;
}

bool flashWriteWord(u32 addr, u32 word) {
 80015d0:	b082      	sub	sp, #8
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
 80015d2:	b28c      	uxth	r4, r1
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;

    u32 rwmVal = GET_REG(FLASH_CR);
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <flashWriteWord+0x50>)
    return TRUE;
}

bool flashWriteWord(u32 addr, u32 word) {
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
 80015d6:	9400      	str	r4, [sp, #0]
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;
 80015d8:	9201      	str	r2, [sp, #4]

    u32 rwmVal = GET_REG(FLASH_CR);
    SET_REG(FLASH_CR, FLASH_CR_PG);
 80015da:	2401      	movs	r4, #1

    /* apparently we need not write to FLASH_AR and can
       simply do a native write of a half word */
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80015dc:	4a10      	ldr	r2, [pc, #64]	; (8001620 <flashWriteWord+0x54>)
bool flashWriteWord(u32 addr, u32 word) {
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;

    u32 rwmVal = GET_REG(FLASH_CR);
 80015de:	681d      	ldr	r5, [r3, #0]
    SET_REG(FLASH_CR, FLASH_CR_PG);
 80015e0:	601c      	str	r4, [r3, #0]

    /* apparently we need not write to FLASH_AR and can
       simply do a native write of a half word */
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80015e2:	6813      	ldr	r3, [r2, #0]
 80015e4:	07dc      	lsls	r4, r3, #31
 80015e6:	d4fc      	bmi.n	80015e2 <flashWriteWord+0x16>
    *(flashAddr + 0x01) = (vu16)hhWord;
 80015e8:	9b01      	ldr	r3, [sp, #4]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80015ea:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <flashWriteWord+0x54>)
    SET_REG(FLASH_CR, FLASH_CR_PG);

    /* apparently we need not write to FLASH_AR and can
       simply do a native write of a half word */
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
    *(flashAddr + 0x01) = (vu16)hhWord;
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	8043      	strh	r3, [r0, #2]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80015f0:	6813      	ldr	r3, [r2, #0]
 80015f2:	07db      	lsls	r3, r3, #31
 80015f4:	d4fc      	bmi.n	80015f0 <flashWriteWord+0x24>
    *(flashAddr) = (vu16)lhWord;
 80015f6:	9b00      	ldr	r3, [sp, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80015f8:	4a09      	ldr	r2, [pc, #36]	; (8001620 <flashWriteWord+0x54>)
    /* apparently we need not write to FLASH_AR and can
       simply do a native write of a half word */
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
    *(flashAddr + 0x01) = (vu16)hhWord;
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
    *(flashAddr) = (vu16)lhWord;
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	8003      	strh	r3, [r0, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 80015fe:	6813      	ldr	r3, [r2, #0]
 8001600:	07dc      	lsls	r4, r3, #31
 8001602:	d4fc      	bmi.n	80015fe <flashWriteWord+0x32>

    rwmVal &= 0xFFFFFFFE;
    SET_REG(FLASH_CR, rwmVal);
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <flashWriteWord+0x50>)
    *(flashAddr + 0x01) = (vu16)hhWord;
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
    *(flashAddr) = (vu16)lhWord;
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}

    rwmVal &= 0xFFFFFFFE;
 8001606:	f025 0201 	bic.w	r2, r5, #1
    SET_REG(FLASH_CR, rwmVal);
 800160a:	601a      	str	r2, [r3, #0]

    /* verify the write */
    if (*(vu32 *)addr != word) {
 800160c:	6800      	ldr	r0, [r0, #0]
        return FALSE;
    }

    return TRUE;
}
 800160e:	1a0b      	subs	r3, r1, r0
 8001610:	4258      	negs	r0, r3
 8001612:	4158      	adcs	r0, r3
 8001614:	b002      	add	sp, #8
 8001616:	bc30      	pop	{r4, r5}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40022010 	andmi	r2, r2, r0, lsl r0
 8001620:	4002200c 	andmi	r2, r2, ip

08001624 <flashLock>:

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 8001624:	4b01      	ldr	r3, [pc, #4]	; (800162c <flashLock+0x8>)
 8001626:	2280      	movs	r2, #128	; 0x80
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	4770      	bx	lr
 800162c:	40022010 	andmi	r2, r2, r0, lsl r0

08001630 <flashUnlock>:
}

void flashUnlock() {
    /* unlock the flash */
    SET_REG(FLASH_KEYR, FLASH_KEY1);
 8001630:	4b02      	ldr	r3, [pc, #8]	; (800163c <flashUnlock+0xc>)
 8001632:	4903      	ldr	r1, [pc, #12]	; (8001640 <flashUnlock+0x10>)
    SET_REG(FLASH_KEYR, FLASH_KEY2);
 8001634:	4a03      	ldr	r2, [pc, #12]	; (8001644 <flashUnlock+0x14>)
    SET_REG(FLASH_CR, 0x00000080);
}

void flashUnlock() {
    /* unlock the flash */
    SET_REG(FLASH_KEYR, FLASH_KEY1);
 8001636:	6019      	str	r1, [r3, #0]
    SET_REG(FLASH_KEYR, FLASH_KEY2);
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	4770      	bx	lr
 800163c:	40022004 	andmi	r2, r2, r4
 8001640:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 8001644:	cdef89ab 	stclgt	9, cr8, [pc, #684]!	; 80018f8 <dfuUpdateByRequest+0x1d4>

08001648 <crMask>:

// Used to create the control register masking pattern, when setting control register mode.
unsigned int crMask(int pin)
{
	unsigned int mask;
	if (pin>=8)
 8001648:	2807      	cmp	r0, #7
	{
		pin-=8;
 800164a:	bfc8      	it	gt
 800164c:	3808      	subgt	r0, #8
	}
	mask = 0x0F << (pin<<2);
 800164e:	230f      	movs	r3, #15
 8001650:	0080      	lsls	r0, r0, #2
 8001652:	fa03 f000 	lsl.w	r0, r3, r0
	return ~mask;
}	
 8001656:	43c0      	mvns	r0, r0
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop

0800165c <getFlashEnd>:

#define FLASH_SIZE_REG 0x1FFFF7E0
int getFlashEnd(void)
{
	unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register 
	return ((int)(*flashSize & 0xffff) * 1024) + 0x08000000;
 800165c:	4b02      	ldr	r3, [pc, #8]	; (8001668 <getFlashEnd+0xc>)
 800165e:	8818      	ldrh	r0, [r3, #0]
 8001660:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
}
 8001664:	0280      	lsls	r0, r0, #10
 8001666:	4770      	bx	lr
 8001668:	1ffff7e0 	svcne	0x00fff7e0

0800166c <getFlashPageSize>:

int getFlashPageSize(void)
{

	unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register 
	if ((*flashSize & 0xffff) > 128)
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <getFlashPageSize+0x14>)
 800166e:	881b      	ldrh	r3, [r3, #0]
	{
		return 0x800;
 8001670:	2b81      	cmp	r3, #129	; 0x81
	}
	else
	{
		return 0x400;
	}
}
 8001672:	bf34      	ite	cc
 8001674:	f44f 6080 	movcc.w	r0, #1024	; 0x400
 8001678:	f44f 6000 	movcs.w	r0, #2048	; 0x800
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	1ffff7e0 	svcne	0x00fff7e0

08001684 <dfuInit>:


volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
 8001684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dfuAppStatus.bStatus = OK;
 8001688:	4a19      	ldr	r2, [pc, #100]	; (80016f0 <dfuInit+0x6c>)
 800168a:	2300      	movs	r3, #0
    dfuAppStatus.bState = dfuIDLE;
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
 800168c:	f8df e07c 	ldr.w	lr, [pc, #124]	; 800170c <dfuInit+0x88>
 8001690:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8001710 <dfuInit+0x8c>
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
 8001694:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8001714 <dfuInit+0x90>
    thisBlockLen = 0;;
 8001698:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8001718 <dfuInit+0x94>
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 800169c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800171c <dfuInit+0x98>
 80016a0:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8001720 <dfuInit+0x9c>
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
 80016a4:	4f13      	ldr	r7, [pc, #76]	; (80016f4 <dfuInit+0x70>)
    code_copy_lock = WAIT;
 80016a6:	4d14      	ldr	r5, [pc, #80]	; (80016f8 <dfuInit+0x74>)
    dfuBusy = FALSE;
 80016a8:	4c14      	ldr	r4, [pc, #80]	; (80016fc <dfuInit+0x78>)
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
 80016aa:	2102      	movs	r1, #2

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 80016ac:	7013      	strb	r3, [r2, #0]
    userFirmwareLen = 0;
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
    code_copy_lock = WAIT;
 80016ae:	2603      	movs	r6, #3
volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
    dfuAppStatus.bwPollTimeout0 = 0x00;
 80016b0:	7053      	strb	r3, [r2, #1]
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
    code_copy_lock = WAIT;
    dfuBusy = FALSE;
    memset(sha256sum, 0xFF, sizeof(sha256sum));
 80016b2:	4813      	ldr	r0, [pc, #76]	; (8001700 <dfuInit+0x7c>)

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
 80016b4:	7093      	strb	r3, [r2, #2]
    dfuAppStatus.bwPollTimeout2 = 0x00;
 80016b6:	70d3      	strb	r3, [r2, #3]
    dfuAppStatus.bState = dfuIDLE;
 80016b8:	7111      	strb	r1, [r2, #4]
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
 80016ba:	7153      	strb	r3, [r2, #5]
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
    code_copy_lock = WAIT;
    dfuBusy = FALSE;
    memset(sha256sum, 0xFF, sizeof(sha256sum));
 80016bc:	21ff      	movs	r1, #255	; 0xff
 80016be:	2220      	movs	r2, #32
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
 80016c0:	f8cb 3000 	str.w	r3, [fp]
    thisBlockLen = 0;;
 80016c4:	f8aa 3000 	strh.w	r3, [sl]
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 80016c8:	f8c8 9000 	str.w	r9, [r8]
    userAppEnd = RAM_END;
 80016cc:	f8ce c000 	str.w	ip, [lr]
    userUploadType=DFU_UPLOAD_NONE;
 80016d0:	703b      	strb	r3, [r7, #0]
    code_copy_lock = WAIT;
 80016d2:	702e      	strb	r6, [r5, #0]
    dfuBusy = FALSE;
 80016d4:	7023      	strb	r3, [r4, #0]
    memset(sha256sum, 0xFF, sizeof(sha256sum));
 80016d6:	f005 f8be 	bl	8006856 <memset>
    memset(input, 0xFF, sizeof(input));
 80016da:	480a      	ldr	r0, [pc, #40]	; (8001704 <dfuInit+0x80>)
 80016dc:	21ff      	movs	r1, #255	; 0xff
 80016de:	225c      	movs	r2, #92	; 0x5c
 80016e0:	f005 f8b9 	bl	8006856 <memset>

    sha256_starts(&ctx);
}
 80016e4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    code_copy_lock = WAIT;
    dfuBusy = FALSE;
    memset(sha256sum, 0xFF, sizeof(sha256sum));
    memset(input, 0xFF, sizeof(input));

    sha256_starts(&ctx);
 80016e8:	4807      	ldr	r0, [pc, #28]	; (8001708 <dfuInit+0x84>)
 80016ea:	f001 bd3b 	b.w	8003164 <sha256_starts>
 80016ee:	bf00      	nop
 80016f0:	20000db4 			; <UNDEFINED> instruction: 0x20000db4
 80016f4:	20000db0 			; <UNDEFINED> instruction: 0x20000db0
 80016f8:	20000560 	andcs	r0, r0, r0, ror #10
 80016fc:	20000dbc 			; <UNDEFINED> instruction: 0x20000dbc
 8001700:	200004d8 	ldrdcs	r0, [r0], -r8
 8001704:	2000047c 	andcs	r0, r0, ip, ror r4
 8001708:	200004f8 	strdcs	r0, [r0], -r8
 800170c:	200002c4 	andcs	r0, r0, r4, asr #5
 8001710:	20005000 	andcs	r5, r0, r0
 8001714:	20000dac 	andcs	r0, r0, ip, lsr #27
 8001718:	20000daa 	andcs	r0, r0, sl, lsr #27
 800171c:	200002c8 	andcs	r0, r0, r8, asr #5
 8001720:	20000c00 	andcs	r0, r0, r0, lsl #24

08001724 <dfuUpdateByRequest>:
}

bool dfuUpdateByRequest(void) {
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 8001724:	4aa6      	ldr	r2, [pc, #664]	; (80019c0 <dfuUpdateByRequest+0x29c>)
    memset(input, 0xFF, sizeof(input));

    sha256_starts(&ctx);
}

bool dfuUpdateByRequest(void) {
 8001726:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 800172a:	2101      	movs	r1, #1

    u8 startState = dfuAppStatus.bState;
 800172c:	4ca5      	ldr	r4, [pc, #660]	; (80019c4 <dfuUpdateByRequest+0x2a0>)
}

bool dfuUpdateByRequest(void) {
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 800172e:	7011      	strb	r1, [r2, #0]

    u8 startState = dfuAppStatus.bState;
 8001730:	7923      	ldrb	r3, [r4, #4]
    dfuAppStatus.bStatus = OK;
 8001732:	2000      	movs	r0, #0
bool dfuUpdateByRequest(void) {
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;

    u8 startState = dfuAppStatus.bState;
 8001734:	b2db      	uxtb	r3, r3
    dfuAppStatus.bStatus = OK;
    
    /* often leaner to nest if's then embed a switch/case */
    /* but who the fuck cares? use a better compiler. we have space */
    if (startState == dfuIDLE)  {
 8001736:	2b02      	cmp	r3, #2
    memset(input, 0xFF, sizeof(input));

    sha256_starts(&ctx);
}

bool dfuUpdateByRequest(void) {
 8001738:	b083      	sub	sp, #12
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;

    u8 startState = dfuAppStatus.bState;
    dfuAppStatus.bStatus = OK;
 800173a:	7020      	strb	r0, [r4, #0]
    
    /* often leaner to nest if's then embed a switch/case */
    /* but who the fuck cares? use a better compiler. we have space */
    if (startState == dfuIDLE)  {
 800173c:	d021      	beq.n	8001782 <dfuUpdateByRequest+0x5e>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNLOAD_SYNC)         {
 800173e:	2b03      	cmp	r3, #3
 8001740:	d03a      	beq.n	80017b8 <dfuUpdateByRequest+0x94>
            dfuAppStatus.bState  = dfuDNLOAD_SYNC;
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else if (startState == dfuDNBUSY)              {
 8001742:	2b04      	cmp	r3, #4
 8001744:	d06b      	beq.n	800181e <dfuUpdateByRequest+0xfa>
            code_copy_lock = WAIT;
            dfuAppStatus.bState = dfuDNLOAD_IDLE;
        } else {
            dfuAppStatus.bState = dfuDNBUSY;
        }
    } else if (startState == dfuDNLOAD_IDLE)         {
 8001746:	2b05      	cmp	r3, #5
 8001748:	f000 8099 	beq.w	800187e <dfuUpdateByRequest+0x15a>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST_SYNC) {
 800174c:	2b06      	cmp	r3, #6
 800174e:	d070      	beq.n	8001832 <dfuUpdateByRequest+0x10e>
            dfuAppStatus.bState  = dfuMANIFEST_SYNC;
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else if (startState == dfuMANIFEST) {
 8001750:	2b07      	cmp	r3, #7
 8001752:	d073      	beq.n	800183c <dfuUpdateByRequest+0x118>
        /* device is in manifestation phase */

        /* should never receive request while in manifest! */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
        dfuAppStatus.bStatus = OK;
    } else if (startState == dfuMANIFEST_WAIT_RESET) {
 8001754:	2b08      	cmp	r3, #8
 8001756:	d06a      	beq.n	800182e <dfuUpdateByRequest+0x10a>
        /* device has programmed new firmware but needs external
           usb reset or power on reset to run the new code */

        /* consider timing out and self-resetting */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
    } else if (startState == dfuUPLOAD_IDLE) {
 8001758:	2b09      	cmp	r3, #9
 800175a:	f000 80c1 	beq.w	80018e0 <dfuUpdateByRequest+0x1bc>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else if (startState == dfuERROR)               {
 800175e:	2b0a      	cmp	r3, #10
 8001760:	d11e      	bne.n	80017a0 <dfuUpdateByRequest+0x7c>
        /* status is in error, awaiting DFU_CLRSTATUS request */
        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8001762:	4b99      	ldr	r3, [pc, #612]	; (80019c8 <dfuUpdateByRequest+0x2a4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	785b      	ldrb	r3, [r3, #1]
 8001768:	2b03      	cmp	r3, #3
 800176a:	f000 8117 	beq.w	800199c <dfuUpdateByRequest+0x278>
            /* todo, add routine to wait for last block write to finish */
            dfuAppStatus.bState  = dfuERROR;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 800176e:	2b05      	cmp	r3, #5
 8001770:	f000 8114 	beq.w	800199c <dfuUpdateByRequest+0x278>
            dfuAppStatus.bState  = dfuERROR;
        } else if (pInformation->USBbRequest == DFU_CLRSTATUS) {
 8001774:	2b04      	cmp	r3, #4
 8001776:	d113      	bne.n	80017a0 <dfuUpdateByRequest+0x7c>
            /* todo handle any cleanup we need here */
            dfuAppStatus.bState  = dfuIDLE;
 8001778:	2202      	movs	r2, #2
            dfuAppStatus.bStatus = OK;
 800177a:	2300      	movs	r3, #0
            dfuAppStatus.bState  = dfuERROR;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
            dfuAppStatus.bState  = dfuERROR;
        } else if (pInformation->USBbRequest == DFU_CLRSTATUS) {
            /* todo handle any cleanup we need here */
            dfuAppStatus.bState  = dfuIDLE;
 800177c:	7122      	strb	r2, [r4, #4]
            dfuAppStatus.bStatus = OK;
 800177e:	7023      	strb	r3, [r4, #0]
 8001780:	e012      	b.n	80017a8 <dfuUpdateByRequest+0x84>
    /* but who the fuck cares? use a better compiler. we have space */
    if (startState == dfuIDLE)  {
        /*  device running inside DFU mode */
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop

        if (pInformation->USBbRequest == DFU_DNLOAD) {
 8001782:	4d91      	ldr	r5, [pc, #580]	; (80019c8 <dfuUpdateByRequest+0x2a4>)
    
    /* often leaner to nest if's then embed a switch/case */
    /* but who the fuck cares? use a better compiler. we have space */
    if (startState == dfuIDLE)  {
        /*  device running inside DFU mode */
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop
 8001784:	7011      	strb	r1, [r2, #0]

        if (pInformation->USBbRequest == DFU_DNLOAD) {
 8001786:	6829      	ldr	r1, [r5, #0]
 8001788:	784a      	ldrb	r2, [r1, #1]
 800178a:	2a01      	cmp	r2, #1
 800178c:	f000 8085 	beq.w	800189a <dfuUpdateByRequest+0x176>
				}
            } else {
                dfuAppStatus.bState  = dfuERROR;
                dfuAppStatus.bStatus = errNOTDONE;
            }
        } else if (pInformation->USBbRequest == DFU_UPLOAD) {
 8001790:	2a02      	cmp	r2, #2
 8001792:	d057      	beq.n	8001844 <dfuUpdateByRequest+0x120>
				// However the code should never get here as only AlternateSetting 1 and 2 are allowed (see above)
					dfuAppStatus.bState  = dfuERROR;
					dfuAppStatus.bStatus = errWRITE;
					break;					
			}
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8001794:	2a06      	cmp	r2, #6
 8001796:	d052      	beq.n	800183e <dfuUpdateByRequest+0x11a>
            dfuAppStatus.bState  = dfuIDLE;
            dfuAppStatus.bStatus = OK;  /* are we really ok? we were just aborted */
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8001798:	2a03      	cmp	r2, #3
 800179a:	d048      	beq.n	800182e <dfuUpdateByRequest+0x10a>
    } else if (startState == dfuMANIFEST_SYNC) {
        /* device has received last block, waiting DFU_GETSTATUS request */
        if (pInformation->USBbRequest == DFU_GETSTATUS) {
            dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
            dfuAppStatus.bStatus = OK;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 800179c:	2a05      	cmp	r2, #5
 800179e:	d046      	beq.n	800182e <dfuUpdateByRequest+0x10a>
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else {
        /* some kind of error... */
        dfuAppStatus.bState  = dfuERROR;
 80017a0:	220a      	movs	r2, #10
        dfuAppStatus.bStatus = errSTALLEDPKT;
 80017a2:	230f      	movs	r3, #15
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else {
        /* some kind of error... */
        dfuAppStatus.bState  = dfuERROR;
 80017a4:	7122      	strb	r2, [r4, #4]
        dfuAppStatus.bStatus = errSTALLEDPKT;
 80017a6:	7023      	strb	r3, [r4, #0]
    }

    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
 80017a8:	7820      	ldrb	r0, [r4, #0]
}
 80017aa:	f1d0 0001 	rsbs	r0, r0, #1
 80017ae:	bf38      	it	cc
 80017b0:	2000      	movcc	r0, #0
 80017b2:	b003      	add	sp, #12
 80017b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNLOAD_SYNC)         {
        /* device received block, waiting for DFU_GETSTATUS request */
        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 80017b8:	4a83      	ldr	r2, [pc, #524]	; (80019c8 <dfuUpdateByRequest+0x2a4>)
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	7852      	ldrb	r2, [r2, #1]
 80017be:	2a03      	cmp	r2, #3
 80017c0:	d1ec      	bne.n	800179c <dfuUpdateByRequest+0x78>

            } 
			else 
			*/
			{
                dfuAppStatus.bState = dfuDNLOAD_IDLE;
 80017c2:	2205      	movs	r2, #5
        }
    } 
	else 
*/
	
	if (userUploadType == DFU_UPLOAD_FLASH_0X8008000) {
 80017c4:	4b81      	ldr	r3, [pc, #516]	; (80019cc <dfuUpdateByRequest+0x2a8>)
		userSpace = (u32 *)(USER_CODE_FLASH0X8008000 + userFirmwareLen);
 80017c6:	f8df 9214 	ldr.w	r9, [pc, #532]	; 80019dc <dfuUpdateByRequest+0x2b8>

            } 
			else 
			*/
			{
                dfuAppStatus.bState = dfuDNLOAD_IDLE;
 80017ca:	7122      	strb	r2, [r4, #4]
        }
    } 
	else 
*/
	
	if (userUploadType == DFU_UPLOAD_FLASH_0X8008000) {
 80017cc:	781b      	ldrb	r3, [r3, #0]
		userSpace = (u32 *)(USER_CODE_FLASH0X8008000 + userFirmwareLen);
 80017ce:	f8d9 7000 	ldr.w	r7, [r9]
        }
    } 
	else 
*/
	
	if (userUploadType == DFU_UPLOAD_FLASH_0X8008000) {
 80017d2:	2b04      	cmp	r3, #4
		userSpace = (u32 *)(USER_CODE_FLASH0X8008000 + userFirmwareLen);
 80017d4:	f107 6700 	add.w	r7, r7, #134217728	; 0x8000000
 80017d8:	bf0c      	ite	eq
 80017da:	f507 4700 	addeq.w	r7, r7, #32768	; 0x8000
	}
	else {
		userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);		
 80017de:	f507 5700 	addne.w	r7, r7, #8192	; 0x2000
	}

    flashErasePage((u32)(userSpace));

    for (i = 0; i < thisBlockLen; i = i + 4) {
 80017e2:	4e7b      	ldr	r6, [pc, #492]	; (80019d0 <dfuUpdateByRequest+0x2ac>)
	}
	else {
		userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);		
	}

    flashErasePage((u32)(userSpace));
 80017e4:	4638      	mov	r0, r7
 80017e6:	f7ff fed1 	bl	800158c <flashErasePage>

    for (i = 0; i < thisBlockLen; i = i + 4) {
 80017ea:	8833      	ldrh	r3, [r6, #0]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	b163      	cbz	r3, 800180a <dfuUpdateByRequest+0xe6>
 80017f0:	f8df 8204 	ldr.w	r8, [pc, #516]	; 80019f8 <dfuUpdateByRequest+0x2d4>
 80017f4:	2500      	movs	r5, #0
        /*if ((u32)(userSpace) >= 0x8008074)
        {
            sha256_update(&ctx, recvBuffer +i, sizeof(u32));
        }*/
        flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
 80017f6:	1978      	adds	r0, r7, r5
 80017f8:	f858 1005 	ldr.w	r1, [r8, r5]
 80017fc:	f7ff fee6 	bl	80015cc <flashWriteWord>
		userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);		
	}

    flashErasePage((u32)(userSpace));

    for (i = 0; i < thisBlockLen; i = i + 4) {
 8001800:	8833      	ldrh	r3, [r6, #0]
 8001802:	3504      	adds	r5, #4
 8001804:	b29b      	uxth	r3, r3
 8001806:	429d      	cmp	r5, r3
 8001808:	dbf5      	blt.n	80017f6 <dfuUpdateByRequest+0xd2>
            sha256_update(&ctx, recvBuffer +i, sizeof(u32));
        }*/
        flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
    }
    
    userFirmwareLen += thisBlockLen;
 800180a:	8832      	ldrh	r2, [r6, #0]
 800180c:	f8d9 3000 	ldr.w	r3, [r9]
 8001810:	b292      	uxth	r2, r2
 8001812:	441a      	add	r2, r3
    thisBlockLen = 0;
 8001814:	2300      	movs	r3, #0
            sha256_update(&ctx, recvBuffer +i, sizeof(u32));
        }*/
        flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
    }
    
    userFirmwareLen += thisBlockLen;
 8001816:	f8c9 2000 	str.w	r2, [r9]
    thisBlockLen = 0;
 800181a:	8033      	strh	r3, [r6, #0]
 800181c:	e7c4      	b.n	80017a8 <dfuUpdateByRequest+0x84>
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else if (startState == dfuDNBUSY)              {
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {
 800181e:	4a6d      	ldr	r2, [pc, #436]	; (80019d4 <dfuUpdateByRequest+0x2b0>)
 8001820:	7811      	ldrb	r1, [r2, #0]
 8001822:	2902      	cmp	r1, #2
 8001824:	d103      	bne.n	800182e <dfuUpdateByRequest+0x10a>

            dfuAppStatus.bwPollTimeout0 = 0x00;
            code_copy_lock = WAIT;
 8001826:	2103      	movs	r1, #3
        }
    } else if (startState == dfuDNBUSY)              {
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {

            dfuAppStatus.bwPollTimeout0 = 0x00;
 8001828:	7060      	strb	r0, [r4, #1]
            code_copy_lock = WAIT;
            dfuAppStatus.bState = dfuDNLOAD_IDLE;
 800182a:	2305      	movs	r3, #5
    } else if (startState == dfuDNBUSY)              {
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {

            dfuAppStatus.bwPollTimeout0 = 0x00;
            code_copy_lock = WAIT;
 800182c:	7011      	strb	r1, [r2, #0]
            dfuAppStatus.bState = dfuDNLOAD_IDLE;
 800182e:	7123      	strb	r3, [r4, #4]
 8001830:	e7ba      	b.n	80017a8 <dfuUpdateByRequest+0x84>
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST_SYNC) {
        /* device has received last block, waiting DFU_GETSTATUS request */
        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8001832:	4a65      	ldr	r2, [pc, #404]	; (80019c8 <dfuUpdateByRequest+0x2a4>)
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	7852      	ldrb	r2, [r2, #1]
 8001838:	2a03      	cmp	r2, #3
 800183a:	d1af      	bne.n	800179c <dfuUpdateByRequest+0x78>
        }
    } else if (startState == dfuMANIFEST) {
        /* device is in manifestation phase */

        /* should never receive request while in manifest! */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
 800183c:	2308      	movs	r3, #8
 800183e:	7123      	strb	r3, [r4, #4]
        dfuAppStatus.bStatus = OK;
 8001840:	7020      	strb	r0, [r4, #0]
 8001842:	e7b1      	b.n	80017a8 <dfuUpdateByRequest+0x84>
        } else if (pInformation->USBbRequest == DFU_UPLOAD) {
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
            
            /* record length of first block for calculating target
               address from wValue in consecutive blocks */
            uploadBlockLen = pInformation->USBwLengths.w;
 8001844:	4b64      	ldr	r3, [pc, #400]	; (80019d8 <dfuUpdateByRequest+0x2b4>)
 8001846:	88ca      	ldrh	r2, [r1, #6]
            } else {
                dfuAppStatus.bState  = dfuERROR;
                dfuAppStatus.bStatus = errNOTDONE;
            }
        } else if (pInformation->USBbRequest == DFU_UPLOAD) {
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8001848:	2009      	movs	r0, #9
 800184a:	7120      	strb	r0, [r4, #4]
            
            /* record length of first block for calculating target
               address from wValue in consecutive blocks */
            uploadBlockLen = pInformation->USBwLengths.w;
 800184c:	801a      	strh	r2, [r3, #0]
            thisBlockLen = uploadBlockLen; /* for this first block as well */
 800184e:	8818      	ldrh	r0, [r3, #0]
 8001850:	4a5f      	ldr	r2, [pc, #380]	; (80019d0 <dfuUpdateByRequest+0x2ac>)
 8001852:	b280      	uxth	r0, r0
 8001854:	8010      	strh	r0, [r2, #0]
            
            /* calculate where the data should be copied from */
            userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	8848      	ldrh	r0, [r1, #2]
 800185a:	b29b      	uxth	r3, r3
 800185c:	fb00 f003 	mul.w	r0, r0, r3
			
            switch(pInformation->Current_AlternateSetting) {
 8001860:	7b0b      	ldrb	r3, [r1, #12]
               address from wValue in consecutive blocks */
            uploadBlockLen = pInformation->USBwLengths.w;
            thisBlockLen = uploadBlockLen; /* for this first block as well */
            
            /* calculate where the data should be copied from */
            userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8001862:	4a5e      	ldr	r2, [pc, #376]	; (80019dc <dfuUpdateByRequest+0x2b8>)
			
            switch(pInformation->Current_AlternateSetting) {
 8001864:	2b01      	cmp	r3, #1
               address from wValue in consecutive blocks */
            uploadBlockLen = pInformation->USBwLengths.w;
            thisBlockLen = uploadBlockLen; /* for this first block as well */
            
            /* calculate where the data should be copied from */
            userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8001866:	6010      	str	r0, [r2, #0]
			
            switch(pInformation->Current_AlternateSetting) {
 8001868:	d032      	beq.n	80018d0 <dfuUpdateByRequest+0x1ac>
 800186a:	2b02      	cmp	r3, #2
 800186c:	d14c      	bne.n	8001908 <dfuUpdateByRequest+0x1e4>
				    userAppAddr = USER_CODE_FLASH0X8008000;
					userAppEnd = getFlashEnd();
					break;

				case 2: 
				    userAppAddr = USER_CODE_FLASH0X8002000;
 800186e:	4b5c      	ldr	r3, [pc, #368]	; (80019e0 <dfuUpdateByRequest+0x2bc>)
 8001870:	4a5c      	ldr	r2, [pc, #368]	; (80019e4 <dfuUpdateByRequest+0x2c0>)
 8001872:	601a      	str	r2, [r3, #0]
					userAppEnd = getFlashEnd();
 8001874:	f7ff fef2 	bl	800165c <getFlashEnd>
 8001878:	4b5b      	ldr	r3, [pc, #364]	; (80019e8 <dfuUpdateByRequest+0x2c4>)
 800187a:	6018      	str	r0, [r3, #0]
					break;
 800187c:	e794      	b.n	80017a8 <dfuUpdateByRequest+0x84>
        } else {
            dfuAppStatus.bState = dfuDNBUSY;
        }
    } else if (startState == dfuDNLOAD_IDLE)         {
        /* device is expecting dfu_dnload requests */
        if (pInformation->USBbRequest == DFU_DNLOAD) {
 800187e:	4b52      	ldr	r3, [pc, #328]	; (80019c8 <dfuUpdateByRequest+0x2a4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	785a      	ldrb	r2, [r3, #1]
 8001884:	2a01      	cmp	r2, #1
 8001886:	d03a      	beq.n	80018fe <dfuUpdateByRequest+0x1da>
                    default:
                        break;
                }
                flashLock();
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8001888:	2a06      	cmp	r2, #6
 800188a:	d003      	beq.n	8001894 <dfuUpdateByRequest+0x170>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 800188c:	2a03      	cmp	r2, #3
 800188e:	d001      	beq.n	8001894 <dfuUpdateByRequest+0x170>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8001890:	2a05      	cmp	r2, #5
 8001892:	d185      	bne.n	80017a0 <dfuUpdateByRequest+0x7c>
            } else {
                dfuAppStatus.bState  = dfuERROR;
                dfuAppStatus.bStatus = errNOTDONE;
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
            dfuAppStatus.bState  = dfuIDLE;
 8001894:	2302      	movs	r3, #2
 8001896:	7123      	strb	r3, [r4, #4]
 8001898:	e786      	b.n	80017a8 <dfuUpdateByRequest+0x84>
    if (startState == dfuIDLE)  {
        /*  device running inside DFU mode */
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop

        if (pInformation->USBbRequest == DFU_DNLOAD) {
            if (pInformation->USBwLengths.w > 0) {
 800189a:	88cb      	ldrh	r3, [r1, #6]
 800189c:	b19b      	cbz	r3, 80018c6 <dfuUpdateByRequest+0x1a2>
                userFirmwareLen = 0;
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
				switch(pInformation->Current_AlternateSetting) {
 800189e:	7b0b      	ldrb	r3, [r1, #12]
        /*  device running inside DFU mode */
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop

        if (pInformation->USBbRequest == DFU_DNLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                userFirmwareLen = 0;
 80018a0:	494e      	ldr	r1, [pc, #312]	; (80019dc <dfuUpdateByRequest+0x2b8>)
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 80018a2:	2203      	movs	r2, #3
				switch(pInformation->Current_AlternateSetting) {
 80018a4:	2b01      	cmp	r3, #1
        /*  device running inside DFU mode */
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop

        if (pInformation->USBbRequest == DFU_DNLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                userFirmwareLen = 0;
 80018a6:	6008      	str	r0, [r1, #0]
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 80018a8:	7122      	strb	r2, [r4, #4]
				switch(pInformation->Current_AlternateSetting) {
 80018aa:	d036      	beq.n	800191a <dfuUpdateByRequest+0x1f6>
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d130      	bne.n	8001912 <dfuUpdateByRequest+0x1ee>
						//flashErasePage((u32)USER_CODE_FLASH0X8002000);

						break;

					case 2:
						userUploadType = DFU_UPLOAD_FLASH_0X8002000;
 80018b0:	4946      	ldr	r1, [pc, #280]	; (80019cc <dfuUpdateByRequest+0x2a8>)
						userAppAddr = USER_CODE_FLASH0X8002000;
 80018b2:	4b4b      	ldr	r3, [pc, #300]	; (80019e0 <dfuUpdateByRequest+0x2bc>)
 80018b4:	4a4b      	ldr	r2, [pc, #300]	; (80019e4 <dfuUpdateByRequest+0x2c0>)
						//flashErasePage((u32)USER_CODE_FLASH0X8002000);

						break;

					case 2:
						userUploadType = DFU_UPLOAD_FLASH_0X8002000;
 80018b6:	2006      	movs	r0, #6
 80018b8:	7008      	strb	r0, [r1, #0]
						userAppAddr = USER_CODE_FLASH0X8002000;
 80018ba:	601a      	str	r2, [r3, #0]
						
                        /* make sure the flash is setup properly, unlock it */
                        setupFLASH();
 80018bc:	f7ff fd98 	bl	80013f0 <setupFLASH>
						flashUnlock();
 80018c0:	f7ff feb6 	bl	8001630 <flashUnlock>

						break;
 80018c4:	e770      	b.n	80017a8 <dfuUpdateByRequest+0x84>
                    }
                    
                    dfuAppStatus.bState  = dfuIDLE;
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
 80018c6:	220a      	movs	r2, #10
                dfuAppStatus.bStatus = errNOTDONE;
 80018c8:	2309      	movs	r3, #9
                    }
                    
                    dfuAppStatus.bState  = dfuIDLE;
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
 80018ca:	7122      	strb	r2, [r4, #4]
                dfuAppStatus.bStatus = errNOTDONE;
 80018cc:	7023      	strb	r3, [r4, #0]
 80018ce:	e76b      	b.n	80017a8 <dfuUpdateByRequest+0x84>
					userAppAddr = USER_CODE_RAM;
					userAppEnd = RAM_END;
					*/

				case 1:
				    userAppAddr = USER_CODE_FLASH0X8008000;
 80018d0:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <dfuUpdateByRequest+0x2bc>)
 80018d2:	4a46      	ldr	r2, [pc, #280]	; (80019ec <dfuUpdateByRequest+0x2c8>)
 80018d4:	601a      	str	r2, [r3, #0]
					userAppEnd = getFlashEnd();
 80018d6:	f7ff fec1 	bl	800165c <getFlashEnd>
 80018da:	4b43      	ldr	r3, [pc, #268]	; (80019e8 <dfuUpdateByRequest+0x2c4>)
 80018dc:	6018      	str	r0, [r3, #0]
					break;
 80018de:	e763      	b.n	80017a8 <dfuUpdateByRequest+0x84>

        /* consider timing out and self-resetting */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
    } else if (startState == dfuUPLOAD_IDLE) {
        /* device expecting further dfu_upload requests */
        if (pInformation->USBbRequest == DFU_UPLOAD) {
 80018e0:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <dfuUpdateByRequest+0x2a4>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	7853      	ldrb	r3, [r2, #1]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d031      	beq.n	800194e <dfuUpdateByRequest+0x22a>
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
                dfuAppStatus.bStatus = errNOTDONE;
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 80018ea:	2b06      	cmp	r3, #6
 80018ec:	d0d2      	beq.n	8001894 <dfuUpdateByRequest+0x170>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d002      	beq.n	80018f8 <dfuUpdateByRequest+0x1d4>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 80018f2:	2b05      	cmp	r3, #5
 80018f4:	f47f af54 	bne.w	80017a0 <dfuUpdateByRequest+0x7c>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 80018f8:	2309      	movs	r3, #9
 80018fa:	7123      	strb	r3, [r4, #4]
 80018fc:	e754      	b.n	80017a8 <dfuUpdateByRequest+0x84>
            dfuAppStatus.bState = dfuDNBUSY;
        }
    } else if (startState == dfuDNLOAD_IDLE)         {
        /* device is expecting dfu_dnload requests */
        if (pInformation->USBbRequest == DFU_DNLOAD) {
            if (pInformation->USBwLengths.w > 0) {
 80018fe:	88db      	ldrh	r3, [r3, #6]
 8001900:	b1b3      	cbz	r3, 8001930 <dfuUpdateByRequest+0x20c>
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 8001902:	2303      	movs	r3, #3
 8001904:	7123      	strb	r3, [r4, #4]
 8001906:	e74f      	b.n	80017a8 <dfuUpdateByRequest+0x84>

				default:
				// Roger Clark. 
				// Changed this to report error that its unable to write to this memory
				// However the code should never get here as only AlternateSetting 1 and 2 are allowed (see above)
					dfuAppStatus.bState  = dfuERROR;
 8001908:	220a      	movs	r2, #10
					dfuAppStatus.bStatus = errWRITE;
 800190a:	2303      	movs	r3, #3

				default:
				// Roger Clark. 
				// Changed this to report error that its unable to write to this memory
				// However the code should never get here as only AlternateSetting 1 and 2 are allowed (see above)
					dfuAppStatus.bState  = dfuERROR;
 800190c:	7122      	strb	r2, [r4, #4]
					dfuAppStatus.bStatus = errWRITE;
 800190e:	7023      	strb	r3, [r4, #0]
					break;					
 8001910:	e74a      	b.n	80017a8 <dfuUpdateByRequest+0x84>

						break;

					default:
					    // Roger Clark. Report error 
						dfuAppStatus.bState  = dfuERROR;
 8001912:	230a      	movs	r3, #10
 8001914:	7123      	strb	r3, [r4, #4]
						dfuAppStatus.bStatus = errWRITE;
 8001916:	7022      	strb	r2, [r4, #0]

						break;
 8001918:	e746      	b.n	80017a8 <dfuUpdateByRequest+0x84>
						userUploadType = DFU_UPLOAD_RAM;
						break;
						*/

					case 1:
					    userAppAddr = USER_CODE_FLASH0X8008000;
 800191a:	4931      	ldr	r1, [pc, #196]	; (80019e0 <dfuUpdateByRequest+0x2bc>)
 800191c:	4833      	ldr	r0, [pc, #204]	; (80019ec <dfuUpdateByRequest+0x2c8>)
						userUploadType = DFU_UPLOAD_FLASH_0X8008000;
 800191e:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <dfuUpdateByRequest+0x2a8>)
 8001920:	2204      	movs	r2, #4
						userUploadType = DFU_UPLOAD_RAM;
						break;
						*/

					case 1:
					    userAppAddr = USER_CODE_FLASH0X8008000;
 8001922:	6008      	str	r0, [r1, #0]
						userUploadType = DFU_UPLOAD_FLASH_0X8008000;
 8001924:	701a      	strb	r2, [r3, #0]
						
						/* make sure the flash is setup properly, unlock it */
						setupFLASH();
 8001926:	f7ff fd63 	bl	80013f0 <setupFLASH>
						flashUnlock();
 800192a:	f7ff fe81 	bl	8001630 <flashUnlock>
						
                        /* Clear lower memory so that we can check on cold boot, whether
                           the last upload was to 0x8002000 or 0x8005000 */
						//flashErasePage((u32)USER_CODE_FLASH0X8002000);

						break;
 800192e:	e73b      	b.n	80017a8 <dfuUpdateByRequest+0x84>
        if (pInformation->USBbRequest == DFU_DNLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
            } else {
                /* todo, support "disagreement" if device expects more data than this */
                dfuAppStatus.bState  = dfuMANIFEST_SYNC;
 8001930:	2306      	movs	r3, #6
                } else {
                    uart_printf("Signature unverified!\n");
                    dfuAppStatus.bState = dfuERROR;
                }*/
                ImageObjectHandle imageHandle;
                int ret = imageCheckFromAddress(&imageHandle, USER_CODE_FLASH0X8008000, 1);
 8001932:	a801      	add	r0, sp, #4
 8001934:	492d      	ldr	r1, [pc, #180]	; (80019ec <dfuUpdateByRequest+0x2c8>)
        if (pInformation->USBbRequest == DFU_DNLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
            } else {
                /* todo, support "disagreement" if device expects more data than this */
                dfuAppStatus.bState  = dfuMANIFEST_SYNC;
 8001936:	7123      	strb	r3, [r4, #4]
                } else {
                    uart_printf("Signature unverified!\n");
                    dfuAppStatus.bState = dfuERROR;
                }*/
                ImageObjectHandle imageHandle;
                int ret = imageCheckFromAddress(&imageHandle, USER_CODE_FLASH0X8008000, 1);
 8001938:	f004 f920 	bl	8005b7c <imageCheckFromAddress>
                switch (ret)
 800193c:	2803      	cmp	r0, #3
 800193e:	d034      	beq.n	80019aa <dfuUpdateByRequest+0x286>
 8001940:	2804      	cmp	r0, #4
 8001942:	d02e      	beq.n	80019a2 <dfuUpdateByRequest+0x27e>
 8001944:	2802      	cmp	r0, #2
 8001946:	d02c      	beq.n	80019a2 <dfuUpdateByRequest+0x27e>
                        break;

                    default:
                        break;
                }
                flashLock();
 8001948:	f7ff fe6c 	bl	8001624 <flashLock>
 800194c:	e72c      	b.n	80017a8 <dfuUpdateByRequest+0x84>
        /* consider timing out and self-resetting */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
    } else if (startState == dfuUPLOAD_IDLE) {
        /* device expecting further dfu_upload requests */
        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
 800194e:	88d3      	ldrh	r3, [r2, #6]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0b8      	beq.n	80018c6 <dfuUpdateByRequest+0x1a2>
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8001954:	4920      	ldr	r1, [pc, #128]	; (80019d8 <dfuUpdateByRequest+0x2b4>)
 8001956:	8855      	ldrh	r5, [r2, #2]
 8001958:	8808      	ldrh	r0, [r1, #0]
 800195a:	4a20      	ldr	r2, [pc, #128]	; (80019dc <dfuUpdateByRequest+0x2b8>)
 800195c:	b280      	uxth	r0, r0
 800195e:	fb05 f500 	mul.w	r5, r5, r0
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8001962:	481f      	ldr	r0, [pc, #124]	; (80019e0 <dfuUpdateByRequest+0x2bc>)
    } else if (startState == dfuUPLOAD_IDLE) {
        /* device expecting further dfu_upload requests */
        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8001964:	6015      	str	r5, [r2, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8001966:	6806      	ldr	r6, [r0, #0]
 8001968:	4d1f      	ldr	r5, [pc, #124]	; (80019e8 <dfuUpdateByRequest+0x2c4>)
 800196a:	f8d2 c000 	ldr.w	ip, [r2]
 800196e:	880f      	ldrh	r7, [r1, #0]
 8001970:	44b4      	add	ip, r6
 8001972:	b2bf      	uxth	r7, r7
 8001974:	682e      	ldr	r6, [r5, #0]
 8001976:	4467      	add	r7, ip
 8001978:	42b7      	cmp	r7, r6
 800197a:	d91a      	bls.n	80019b2 <dfuUpdateByRequest+0x28e>
                    thisBlockLen = uploadBlockLen;
                    dfuAppStatus.bState  = dfuUPLOAD_IDLE;
                } else {
                    /* if above comparison was just equal, thisBlockLen becomes zero
                    next time when USBWValue has been increased by one */
                    thisBlockLen = userAppEnd - userAppAddr - userFirmwareLen;
 800197c:	682d      	ldr	r5, [r5, #0]
 800197e:	6801      	ldr	r1, [r0, #0]
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	1a69      	subs	r1, r5, r1
 8001984:	1a89      	subs	r1, r1, r2
 8001986:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <dfuUpdateByRequest+0x2ac>)
 8001988:	b289      	uxth	r1, r1
 800198a:	8011      	strh	r1, [r2, #0]
                    
                    /* check for overflow due to USBwValue out of range */
                    if (thisBlockLen >= pInformation->USBwLengths.w) {
 800198c:	8811      	ldrh	r1, [r2, #0]
 800198e:	b289      	uxth	r1, r1
 8001990:	428b      	cmp	r3, r1
 8001992:	f63f af7f 	bhi.w	8001894 <dfuUpdateByRequest+0x170>
                        thisBlockLen = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	8013      	strh	r3, [r2, #0]
 800199a:	e77b      	b.n	8001894 <dfuUpdateByRequest+0x170>
        /* status is in error, awaiting DFU_CLRSTATUS request */
        if (pInformation->USBbRequest == DFU_GETSTATUS) {
            /* todo, add routine to wait for last block write to finish */
            dfuAppStatus.bState  = dfuERROR;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
            dfuAppStatus.bState  = dfuERROR;
 800199c:	230a      	movs	r3, #10
 800199e:	7123      	strb	r3, [r4, #4]
 80019a0:	e702      	b.n	80017a8 <dfuUpdateByRequest+0x84>
                        uart_printf("Uploaded signature verified!\n");
                        break;

                    case kImageImageMissingMagic:
                    case kImageImageRejectSignature:
                        uart_printf("Image unverified... wiped memory for clean reset.\n");
 80019a2:	4813      	ldr	r0, [pc, #76]	; (80019f0 <dfuUpdateByRequest+0x2cc>)
 80019a4:	f7ff fc56 	bl	8001254 <uart_printf>
                        break;
 80019a8:	e7ce      	b.n	8001948 <dfuUpdateByRequest+0x224>
                ImageObjectHandle imageHandle;
                int ret = imageCheckFromAddress(&imageHandle, USER_CODE_FLASH0X8008000, 1);
                switch (ret)
                {
                    case kImageImageIsTrusted:
                        uart_printf("Uploaded signature verified!\n");
 80019aa:	4812      	ldr	r0, [pc, #72]	; (80019f4 <dfuUpdateByRequest+0x2d0>)
 80019ac:	f7ff fc52 	bl	8001254 <uart_printf>
                        break;
 80019b0:	e7ca      	b.n	8001948 <dfuUpdateByRequest+0x224>
        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
                    thisBlockLen = uploadBlockLen;
 80019b2:	8809      	ldrh	r1, [r1, #0]
 80019b4:	4a06      	ldr	r2, [pc, #24]	; (80019d0 <dfuUpdateByRequest+0x2ac>)
 80019b6:	b289      	uxth	r1, r1
                    dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 80019b8:	2309      	movs	r3, #9
        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
                    thisBlockLen = uploadBlockLen;
 80019ba:	8011      	strh	r1, [r2, #0]
                    dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 80019bc:	7123      	strb	r3, [r4, #4]
 80019be:	e6f3      	b.n	80017a8 <dfuUpdateByRequest+0x84>
 80019c0:	20000dbc 			; <UNDEFINED> instruction: 0x20000dbc
 80019c4:	20000db4 			; <UNDEFINED> instruction: 0x20000db4
 80019c8:	20000594 	mulcs	r0, r4, r5
 80019cc:	20000db0 			; <UNDEFINED> instruction: 0x20000db0
 80019d0:	20000daa 	andcs	r0, r0, sl, lsr #27
 80019d4:	20000560 	andcs	r0, r0, r0, ror #10
 80019d8:	20000da8 	andcs	r0, r0, r8, lsr #27
 80019dc:	20000dac 	andcs	r0, r0, ip, lsr #27
 80019e0:	200002c8 	andcs	r0, r0, r8, asr #5
 80019e4:	08002000 	stmdaeq	r0, {sp}
 80019e8:	200002c4 	andcs	r0, r0, r4, asr #5
 80019ec:	08008000 	stmdaeq	r0, {pc}
 80019f0:	080071ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip, sp, lr}
 80019f4:	080071cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, ip, sp, lr}
 80019f8:	200005a8 	andcs	r0, r0, r8, lsr #11

080019fc <dfuUpdateByReset>:
    }

    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
}

void dfuUpdateByReset(void) {
 80019fc:	b508      	push	{r3, lr}
    u8 startState = dfuAppStatus.bState;
 80019fe:	4a0e      	ldr	r2, [pc, #56]	; (8001a38 <dfuUpdateByReset+0x3c>)
    userFirmwareLen = 0;
 8001a00:	480e      	ldr	r0, [pc, #56]	; (8001a3c <dfuUpdateByReset+0x40>)

    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 8001a02:	7913      	ldrb	r3, [r2, #4]
    userFirmwareLen = 0;
 8001a04:	2100      	movs	r1, #0

    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 8001a06:	b2db      	uxtb	r3, r3
    userFirmwareLen = 0;

    if (startState == appDETACH) {
 8001a08:	2b01      	cmp	r3, #1
    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
    userFirmwareLen = 0;
 8001a0a:	6001      	str	r1, [r0, #0]

    if (startState == appDETACH) {
 8001a0c:	d00a      	beq.n	8001a24 <dfuUpdateByReset+0x28>
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        nvicDisableInterrupts();
        usbEnbISR();
    } else if (startState == appIDLE || startState == dfuIDLE) {
 8001a0e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8001a12:	d006      	beq.n	8001a22 <dfuUpdateByReset+0x26>
        /* do nothing...might be normal usb bus activity */
    } else {
        /* we reset from the dfu, reset everything and startover,
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
 8001a14:	2302      	movs	r3, #2
 8001a16:	7113      	strb	r3, [r2, #4]
        dfuAppStatus.bStatus = OK;
 8001a18:	7011      	strb	r1, [r2, #0]

        systemHardReset();
    }
}
 8001a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
 8001a1e:	f7ff bdab 	b.w	8001578 <systemHardReset>
 8001a22:	bd08      	pop	{r3, pc}
void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
    userFirmwareLen = 0;

    if (startState == appDETACH) {
        dfuAppStatus.bState = dfuIDLE;
 8001a24:	2302      	movs	r3, #2
 8001a26:	7113      	strb	r3, [r2, #4]
        dfuAppStatus.bStatus = OK;
 8001a28:	7011      	strb	r1, [r2, #0]

        nvicDisableInterrupts();
 8001a2a:	f7ff fd91 	bl	8001550 <nvicDisableInterrupts>
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
    }
}
 8001a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (startState == appDETACH) {
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        nvicDisableInterrupts();
        usbEnbISR();
 8001a32:	f7ff ba9f 	b.w	8000f74 <usbEnbISR>
 8001a36:	bf00      	nop
 8001a38:	20000db4 			; <UNDEFINED> instruction: 0x20000db4
 8001a3c:	20000dac 	andcs	r0, r0, ip, lsr #27

08001a40 <dfuCopyState>:

void dfuUpdateByTimeout(void) {
}

u8 *dfuCopyState(u16 length) {
    if (length == 0) {
 8001a40:	b108      	cbz	r0, 8001a46 <dfuCopyState+0x6>
        pInformation->Ctrl_Info.Usb_wLength = 1;
        return NULL;
    } else {
        return (u8 *)(&(dfuAppStatus.bState));
 8001a42:	4803      	ldr	r0, [pc, #12]	; (8001a50 <dfuCopyState+0x10>)
    }
}
 8001a44:	4770      	bx	lr
void dfuUpdateByTimeout(void) {
}

u8 *dfuCopyState(u16 length) {
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = 1;
 8001a46:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <dfuCopyState+0x14>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	821a      	strh	r2, [r3, #16]
        return NULL;
 8001a4e:	4770      	bx	lr
 8001a50:	20000db8 			; <UNDEFINED> instruction: 0x20000db8
 8001a54:	20000594 	mulcs	r0, r4, r5

08001a58 <dfuCopyStatus>:
        return (u8 *)(&(dfuAppStatus.bState));
    }
}

u8 *dfuCopyStatus(u16 length) {
    if (length == 0) {
 8001a58:	b108      	cbz	r0, 8001a5e <dfuCopyStatus+0x6>
        pInformation->Ctrl_Info.Usb_wLength = 6;
        return NULL;
    } else {
        return (u8*)(&dfuAppStatus);
 8001a5a:	4803      	ldr	r0, [pc, #12]	; (8001a68 <dfuCopyStatus+0x10>)
    }
}
 8001a5c:	4770      	bx	lr
    }
}

u8 *dfuCopyStatus(u16 length) {
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = 6;
 8001a5e:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <dfuCopyStatus+0x14>)
 8001a60:	2206      	movs	r2, #6
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	821a      	strh	r2, [r3, #16]
        return NULL;
 8001a66:	4770      	bx	lr
 8001a68:	20000db4 			; <UNDEFINED> instruction: 0x20000db4
 8001a6c:	20000594 	mulcs	r0, r4, r5

08001a70 <dfuCopyDNLOAD>:
        return (u8*)(&dfuAppStatus);
    }
}


u8 *dfuCopyDNLOAD(u16 length) {
 8001a70:	b410      	push	{r4}
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <dfuCopyDNLOAD+0x28>)
    }
}


u8 *dfuCopyDNLOAD(u16 length) {
    if (length == 0) {
 8001a74:	b130      	cbz	r0, 8001a84 <dfuCopyDNLOAD+0x14>
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
        thisBlockLen = pInformation->USBwLengths.w;
        return NULL;
    } else {
        return ((u8 *)recvBuffer + pInformation->Ctrl_Info.Usb_wOffset);
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4808      	ldr	r0, [pc, #32]	; (8001a9c <dfuCopyDNLOAD+0x2c>)
 8001a7a:	8a5b      	ldrh	r3, [r3, #18]
    }
}
 8001a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
        thisBlockLen = pInformation->USBwLengths.w;
        return NULL;
    } else {
        return ((u8 *)recvBuffer + pInformation->Ctrl_Info.Usb_wOffset);
 8001a80:	4418      	add	r0, r3
    }
}
 8001a82:	4770      	bx	lr
}


u8 *dfuCopyDNLOAD(u16 length) {
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8001a84:	681b      	ldr	r3, [r3, #0]
        thisBlockLen = pInformation->USBwLengths.w;
 8001a86:	4c06      	ldr	r4, [pc, #24]	; (8001aa0 <dfuCopyDNLOAD+0x30>)
}


u8 *dfuCopyDNLOAD(u16 length) {
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8001a88:	88da      	ldrh	r2, [r3, #6]
 8001a8a:	8a59      	ldrh	r1, [r3, #18]
        thisBlockLen = pInformation->USBwLengths.w;
 8001a8c:	8022      	strh	r2, [r4, #0]
}


u8 *dfuCopyDNLOAD(u16 length) {
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8001a8e:	1a52      	subs	r2, r2, r1
 8001a90:	821a      	strh	r2, [r3, #16]
        thisBlockLen = pInformation->USBwLengths.w;
        return NULL;
    } else {
        return ((u8 *)recvBuffer + pInformation->Ctrl_Info.Usb_wOffset);
    }
}
 8001a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	20000594 	mulcs	r0, r4, r5
 8001a9c:	200005a8 	andcs	r0, r0, r8, lsr #11
 8001aa0:	20000daa 	andcs	r0, r0, sl, lsr #27

08001aa4 <dfuCopyUPLOAD>:

u8 *dfuCopyUPLOAD(u16 length) {
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = thisBlockLen - pInformation->Ctrl_Info.Usb_wOffset;
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <dfuCopyUPLOAD+0x24>)
        return ((u8 *)recvBuffer + pInformation->Ctrl_Info.Usb_wOffset);
    }
}

u8 *dfuCopyUPLOAD(u16 length) {
    if (length == 0) {
 8001aa6:	b140      	cbz	r0, 8001aba <dfuCopyUPLOAD+0x16>
        pInformation->Ctrl_Info.Usb_wLength = thisBlockLen - pInformation->Ctrl_Info.Usb_wOffset;
        return NULL;
    } else {
        return((u8*) userAppAddr + userFirmwareLen + pInformation->Ctrl_Info.Usb_wOffset);
 8001aa8:	4908      	ldr	r1, [pc, #32]	; (8001acc <dfuCopyUPLOAD+0x28>)
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <dfuCopyUPLOAD+0x2c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	6808      	ldr	r0, [r1, #0]
 8001ab2:	8a5b      	ldrh	r3, [r3, #18]
 8001ab4:	4410      	add	r0, r2
 8001ab6:	4418      	add	r0, r3
    }
}
 8001ab8:	4770      	bx	lr
    }
}

u8 *dfuCopyUPLOAD(u16 length) {
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = thisBlockLen - pInformation->Ctrl_Info.Usb_wOffset;
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <dfuCopyUPLOAD+0x30>)
 8001abe:	8811      	ldrh	r1, [r2, #0]
 8001ac0:	8a5a      	ldrh	r2, [r3, #18]
 8001ac2:	1a8a      	subs	r2, r1, r2
 8001ac4:	821a      	strh	r2, [r3, #16]
        return NULL;
 8001ac6:	4770      	bx	lr
 8001ac8:	20000594 	mulcs	r0, r4, r5
 8001acc:	200002c8 	andcs	r0, r0, r8, asr #5
 8001ad0:	20000dac 	andcs	r0, r0, ip, lsr #27
 8001ad4:	20000daa 	andcs	r0, r0, sl, lsr #27

08001ad8 <dfuUploadStarted>:
    dfuAppStatus.bState = newState;
}

bool dfuUploadStarted()
{
    return dfuBusy;
 8001ad8:	4b01      	ldr	r3, [pc, #4]	; (8001ae0 <dfuUploadStarted+0x8>)
 8001ada:	7818      	ldrb	r0, [r3, #0]
}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000dbc 			; <UNDEFINED> instruction: 0x20000dbc

08001ae4 <dfuFinishUpload>:

void dfuFinishUpload() {

    while (1)
	{
		__asm__ __volatile__ ("");
 8001ae4:	e7fe      	b.n	8001ae4 <dfuFinishUpload>
 8001ae6:	bf00      	nop

08001ae8 <ed25519_project>:
};

/* Conversion to and from projective coordinates */
void ed25519_project(struct ed25519_pt *p,
		     const uint8_t *x, const uint8_t *y)
{
 8001ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aea:	460d      	mov	r5, r1
void f25519_load(uint8_t *x, uint32_t c);

/* Copy two points */
static inline void f25519_copy(uint8_t *x, const uint8_t *a)
{
	memcpy(x, a, F25519_SIZE);
 8001aec:	f8d1 e000 	ldr.w	lr, [r1]
 8001af0:	684f      	ldr	r7, [r1, #4]
 8001af2:	68eb      	ldr	r3, [r5, #12]
 8001af4:	6889      	ldr	r1, [r1, #8]
 8001af6:	f8c0 e000 	str.w	lr, [r0]
 8001afa:	6047      	str	r7, [r0, #4]
 8001afc:	6081      	str	r1, [r0, #8]
 8001afe:	60c3      	str	r3, [r0, #12]
 8001b00:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8001b04:	696f      	ldr	r7, [r5, #20]
 8001b06:	69a9      	ldr	r1, [r5, #24]
 8001b08:	69eb      	ldr	r3, [r5, #28]
 8001b0a:	f8c0 e010 	str.w	lr, [r0, #16]
 8001b0e:	61c3      	str	r3, [r0, #28]
 8001b10:	6147      	str	r7, [r0, #20]
 8001b12:	6181      	str	r1, [r0, #24]
 8001b14:	f8d2 e000 	ldr.w	lr, [r2]
 8001b18:	6857      	ldr	r7, [r2, #4]
 8001b1a:	6891      	ldr	r1, [r2, #8]
 8001b1c:	4616      	mov	r6, r2
 8001b1e:	68d2      	ldr	r2, [r2, #12]
 8001b20:	f8c0 e020 	str.w	lr, [r0, #32]
 8001b24:	6247      	str	r7, [r0, #36]	; 0x24
 8001b26:	6281      	str	r1, [r0, #40]	; 0x28
 8001b28:	62c2      	str	r2, [r0, #44]	; 0x2c
 8001b2a:	69b1      	ldr	r1, [r6, #24]
 8001b2c:	69f2      	ldr	r2, [r6, #28]
 8001b2e:	f8d6 e010 	ldr.w	lr, [r6, #16]
 8001b32:	6977      	ldr	r7, [r6, #20]
 8001b34:	4604      	mov	r4, r0
 8001b36:	63a1      	str	r1, [r4, #56]	; 0x38
 8001b38:	63e2      	str	r2, [r4, #60]	; 0x3c
	f25519_copy(p->x, x);
	f25519_copy(p->y, y);
	f25519_load(p->z, 1);
 8001b3a:	3060      	adds	r0, #96	; 0x60
 8001b3c:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
 8001b40:	6367      	str	r7, [r4, #52]	; 0x34
 8001b42:	2101      	movs	r1, #1
 8001b44:	f000 fa84 	bl	8002050 <f25519_load>
	f25519_mul__distinct(p->t, x, y);
 8001b48:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	4632      	mov	r2, r6
}
 8001b50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		     const uint8_t *x, const uint8_t *y)
{
	f25519_copy(p->x, x);
	f25519_copy(p->y, y);
	f25519_load(p->z, 1);
	f25519_mul__distinct(p->t, x, y);
 8001b54:	f000 bbe2 	b.w	800231c <f25519_mul__distinct>

08001b58 <ed25519_unproject>:
}

void ed25519_unproject(uint8_t *x, uint8_t *y,
		       const struct ed25519_pt *p)
{
 8001b58:	b570      	push	{r4, r5, r6, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	4614      	mov	r4, r2
 8001b5e:	4606      	mov	r6, r0
 8001b60:	460d      	mov	r5, r1
	uint8_t z1[F25519_SIZE];

	f25519_inv__distinct(z1, p->z);
 8001b62:	4668      	mov	r0, sp
 8001b64:	f102 0160 	add.w	r1, r2, #96	; 0x60
 8001b68:	f000 fc1c 	bl	80023a4 <f25519_inv__distinct>
	f25519_mul__distinct(x, p->x, z1);
 8001b6c:	4630      	mov	r0, r6
 8001b6e:	4621      	mov	r1, r4
 8001b70:	466a      	mov	r2, sp
 8001b72:	f000 fbd3 	bl	800231c <f25519_mul__distinct>
	f25519_mul__distinct(y, p->y, z1);
 8001b76:	f104 0120 	add.w	r1, r4, #32
 8001b7a:	466a      	mov	r2, sp
 8001b7c:	4628      	mov	r0, r5
 8001b7e:	f000 fbcd 	bl	800231c <f25519_mul__distinct>

	f25519_normalize(x);
 8001b82:	4630      	mov	r0, r6
 8001b84:	f000 fa74 	bl	8002070 <f25519_normalize>
	f25519_normalize(y);
 8001b88:	4628      	mov	r0, r5
 8001b8a:	f000 fa71 	bl	8002070 <f25519_normalize>
}
 8001b8e:	b008      	add	sp, #32
 8001b90:	bd70      	pop	{r4, r5, r6, pc}
 8001b92:	bf00      	nop

08001b94 <ed25519_pack>:
	0x98, 0xe8, 0x79, 0x77, 0x79, 0x40, 0xc7, 0x8c,
	0x73, 0xfe, 0x6f, 0x2b, 0xee, 0x6c, 0x03, 0x52
};

void ed25519_pack(uint8_t *c, const uint8_t *x, const uint8_t *y)
{
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b96:	460f      	mov	r7, r1
 8001b98:	4605      	mov	r5, r0
 8001b9a:	4616      	mov	r6, r2
 8001b9c:	b089      	sub	sp, #36	; 0x24
 8001b9e:	6808      	ldr	r0, [r1, #0]
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6849      	ldr	r1, [r1, #4]
 8001ba6:	466c      	mov	r4, sp
 8001ba8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001baa:	6938      	ldr	r0, [r7, #16]
 8001bac:	6979      	ldr	r1, [r7, #20]
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	uint8_t tmp[F25519_SIZE];
	uint8_t parity;

	f25519_copy(tmp, x);
	f25519_normalize(tmp);
 8001bb4:	4668      	mov	r0, sp
 8001bb6:	f000 fa5b 	bl	8002070 <f25519_normalize>
 8001bba:	6830      	ldr	r0, [r6, #0]
 8001bbc:	6871      	ldr	r1, [r6, #4]
 8001bbe:	68b2      	ldr	r2, [r6, #8]
 8001bc0:	68f3      	ldr	r3, [r6, #12]
 8001bc2:	6028      	str	r0, [r5, #0]
 8001bc4:	6069      	str	r1, [r5, #4]
 8001bc6:	60aa      	str	r2, [r5, #8]
 8001bc8:	60eb      	str	r3, [r5, #12]
 8001bca:	6930      	ldr	r0, [r6, #16]
 8001bcc:	69f3      	ldr	r3, [r6, #28]
 8001bce:	6971      	ldr	r1, [r6, #20]
 8001bd0:	69b2      	ldr	r2, [r6, #24]
 8001bd2:	6128      	str	r0, [r5, #16]
 8001bd4:	61eb      	str	r3, [r5, #28]
 8001bd6:	6169      	str	r1, [r5, #20]
 8001bd8:	61aa      	str	r2, [r5, #24]
	parity = (tmp[0] & 1) << 7;

	f25519_copy(c, y);
	f25519_normalize(c);
 8001bda:	4628      	mov	r0, r5
	uint8_t tmp[F25519_SIZE];
	uint8_t parity;

	f25519_copy(tmp, x);
	f25519_normalize(tmp);
	parity = (tmp[0] & 1) << 7;
 8001bdc:	f89d 4000 	ldrb.w	r4, [sp]

	f25519_copy(c, y);
	f25519_normalize(c);
 8001be0:	f000 fa46 	bl	8002070 <f25519_normalize>
	uint8_t tmp[F25519_SIZE];
	uint8_t parity;

	f25519_copy(tmp, x);
	f25519_normalize(tmp);
	parity = (tmp[0] & 1) << 7;
 8001be4:	01e4      	lsls	r4, r4, #7

	f25519_copy(c, y);
	f25519_normalize(c);
	c[31] |= parity;
 8001be6:	7feb      	ldrb	r3, [r5, #31]
	uint8_t tmp[F25519_SIZE];
	uint8_t parity;

	f25519_copy(tmp, x);
	f25519_normalize(tmp);
	parity = (tmp[0] & 1) << 7;
 8001be8:	b2e4      	uxtb	r4, r4

	f25519_copy(c, y);
	f25519_normalize(c);
	c[31] |= parity;
 8001bea:	431c      	orrs	r4, r3
 8001bec:	77ec      	strb	r4, [r5, #31]
}
 8001bee:	b009      	add	sp, #36	; 0x24
 8001bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bf2:	bf00      	nop

08001bf4 <ed25519_try_unpack>:

uint8_t ed25519_try_unpack(uint8_t *x, uint8_t *y, const uint8_t *comp)
{
 8001bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bf8:	6817      	ldr	r7, [r2, #0]
 8001bfa:	6856      	ldr	r6, [r2, #4]
 8001bfc:	6895      	ldr	r5, [r2, #8]
 8001bfe:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8001c02:	4614      	mov	r4, r2
	const int parity = comp[31] >> 7;
 8001c04:	f894 801f 	ldrb.w	r8, [r4, #31]
 8001c08:	600f      	str	r7, [r1, #0]
 8001c0a:	604e      	str	r6, [r1, #4]
 8001c0c:	608d      	str	r5, [r1, #8]
 8001c0e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8001c12:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8001c16:	6927      	ldr	r7, [r4, #16]
 8001c18:	6966      	ldr	r6, [r4, #20]
 8001c1a:	69a5      	ldr	r5, [r4, #24]
	f25519_normalize(c);
	c[31] |= parity;
}

uint8_t ed25519_try_unpack(uint8_t *x, uint8_t *y, const uint8_t *comp)
{
 8001c1c:	b098      	sub	sp, #96	; 0x60
	uint8_t b[F25519_SIZE];
	uint8_t c[F25519_SIZE];

	/* Unpack y */
	f25519_copy(y, comp);
	y[31] &= 127;
 8001c1e:	f008 037f 	and.w	r3, r8, #127	; 0x7f
 8001c22:	f8c1 e01c 	str.w	lr, [r1, #28]
	f25519_normalize(c);
	c[31] |= parity;
}

uint8_t ed25519_try_unpack(uint8_t *x, uint8_t *y, const uint8_t *comp)
{
 8001c26:	4604      	mov	r4, r0
	uint8_t b[F25519_SIZE];
	uint8_t c[F25519_SIZE];

	/* Unpack y */
	f25519_copy(y, comp);
	y[31] &= 127;
 8001c28:	77cb      	strb	r3, [r1, #31]
	f25519_normalize(c);
	c[31] |= parity;
}

uint8_t ed25519_try_unpack(uint8_t *x, uint8_t *y, const uint8_t *comp)
{
 8001c2a:	460a      	mov	r2, r1
 8001c2c:	610f      	str	r7, [r1, #16]
 8001c2e:	614e      	str	r6, [r1, #20]
 8001c30:	618d      	str	r5, [r1, #24]
	/* Unpack y */
	f25519_copy(y, comp);
	y[31] &= 127;

	/* Compute c = y^2 */
	f25519_mul__distinct(c, y, y);
 8001c32:	a810      	add	r0, sp, #64	; 0x40

	/* Compute b = (1+dy^2)^-1 */
	f25519_mul__distinct(b, c, ed25519_d);
	f25519_add(a, b, f25519_one);
 8001c34:	4d1f      	ldr	r5, [pc, #124]	; (8001cb4 <ed25519_try_unpack+0xc0>)
	/* Unpack y */
	f25519_copy(y, comp);
	y[31] &= 127;

	/* Compute c = y^2 */
	f25519_mul__distinct(c, y, y);
 8001c36:	f000 fb71 	bl	800231c <f25519_mul__distinct>

	/* Compute b = (1+dy^2)^-1 */
	f25519_mul__distinct(b, c, ed25519_d);
 8001c3a:	a910      	add	r1, sp, #64	; 0x40
 8001c3c:	a808      	add	r0, sp, #32
 8001c3e:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <ed25519_try_unpack+0xc4>)
 8001c40:	f000 fb6c 	bl	800231c <f25519_mul__distinct>
	f25519_add(a, b, f25519_one);
 8001c44:	462a      	mov	r2, r5
 8001c46:	a908      	add	r1, sp, #32
 8001c48:	4668      	mov	r0, sp
 8001c4a:	f000 faf9 	bl	8002240 <f25519_add>
	f25519_inv__distinct(b, a);
 8001c4e:	a808      	add	r0, sp, #32
 8001c50:	4669      	mov	r1, sp
 8001c52:	f000 fba7 	bl	80023a4 <f25519_inv__distinct>

	/* Compute a = y^2-1 */
	f25519_sub(a, c, f25519_one);
 8001c56:	4668      	mov	r0, sp
 8001c58:	a910      	add	r1, sp, #64	; 0x40
 8001c5a:	462a      	mov	r2, r5
 8001c5c:	f000 fb14 	bl	8002288 <f25519_sub>

	/* Compute c = a*b = (y^2-1)/(1-dy^2) */
	f25519_mul__distinct(c, a, b);
 8001c60:	aa08      	add	r2, sp, #32
 8001c62:	a810      	add	r0, sp, #64	; 0x40
 8001c64:	4669      	mov	r1, sp
 8001c66:	f000 fb59 	bl	800231c <f25519_mul__distinct>

	/* Compute a, b = +/-sqrt(c), if c is square */
	f25519_sqrt(a, c);
 8001c6a:	4668      	mov	r0, sp
 8001c6c:	a910      	add	r1, sp, #64	; 0x40
 8001c6e:	f000 fe8f 	bl	8002990 <f25519_sqrt>
	f25519_neg(b, a);
 8001c72:	a808      	add	r0, sp, #32
 8001c74:	4669      	mov	r1, sp
 8001c76:	f000 fb2d 	bl	80022d4 <f25519_neg>

	/* Select one of them, based on the compressed parity bit */
	f25519_select(x, a, b, (a[0] ^ parity) & 1);
 8001c7a:	f89d 3000 	ldrb.w	r3, [sp]
 8001c7e:	aa08      	add	r2, sp, #32
 8001c80:	ea83 13d8 	eor.w	r3, r3, r8, lsr #7
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	4620      	mov	r0, r4
 8001c8a:	4669      	mov	r1, sp
 8001c8c:	f000 fa76 	bl	800217c <f25519_select>

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
 8001c90:	4621      	mov	r1, r4
 8001c92:	4622      	mov	r2, r4
 8001c94:	4668      	mov	r0, sp
 8001c96:	f000 fb41 	bl	800231c <f25519_mul__distinct>
	f25519_normalize(a);
 8001c9a:	4668      	mov	r0, sp
 8001c9c:	f000 f9e8 	bl	8002070 <f25519_normalize>
	f25519_normalize(c);
 8001ca0:	a810      	add	r0, sp, #64	; 0x40
 8001ca2:	f000 f9e5 	bl	8002070 <f25519_normalize>

	return f25519_eq(a, c);
 8001ca6:	4668      	mov	r0, sp
 8001ca8:	a910      	add	r1, sp, #64	; 0x40
 8001caa:	f000 fa19 	bl	80020e0 <f25519_eq>
}
 8001cae:	b018      	add	sp, #96	; 0x60
 8001cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cb4:	08007380 	stmdaeq	r0, {r7, r8, r9, ip, sp, lr}
 8001cb8:	08007340 	stmdaeq	r0, {r6, r8, r9, ip, sp, lr}

08001cbc <ed25519_add>:
	0xe7, 0xfc, 0xdf, 0x56, 0xdc, 0xd9, 0x06, 0x24
};

void ed25519_add(struct ed25519_pt *r,
		 const struct ed25519_pt *p1, const struct ed25519_pt *p2)
{
 8001cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cc0:	4614      	mov	r4, r2
 8001cc2:	b0c0      	sub	sp, #256	; 0x100
 8001cc4:	460d      	mov	r5, r1
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = (Y1-X1)(Y2-X2) */
	f25519_sub(c, p1->y, p1->x);
 8001cc6:	f101 0820 	add.w	r8, r1, #32
	0xe7, 0xfc, 0xdf, 0x56, 0xdc, 0xd9, 0x06, 0x24
};

void ed25519_add(struct ed25519_pt *r,
		 const struct ed25519_pt *p1, const struct ed25519_pt *p2)
{
 8001cca:	4606      	mov	r6, r0
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = (Y1-X1)(Y2-X2) */
	f25519_sub(c, p1->y, p1->x);
 8001ccc:	4641      	mov	r1, r8
 8001cce:	462a      	mov	r2, r5
 8001cd0:	a810      	add	r0, sp, #64	; 0x40
	f25519_sub(d, p2->y, p2->x);
 8001cd2:	f104 0720 	add.w	r7, r4, #32
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = (Y1-X1)(Y2-X2) */
	f25519_sub(c, p1->y, p1->x);
 8001cd6:	f000 fad7 	bl	8002288 <f25519_sub>
	f25519_sub(d, p2->y, p2->x);
 8001cda:	4639      	mov	r1, r7
 8001cdc:	4622      	mov	r2, r4
 8001cde:	a818      	add	r0, sp, #96	; 0x60
 8001ce0:	f000 fad2 	bl	8002288 <f25519_sub>
	f25519_mul__distinct(a, c, d);
 8001ce4:	a910      	add	r1, sp, #64	; 0x40
 8001ce6:	aa18      	add	r2, sp, #96	; 0x60
 8001ce8:	4668      	mov	r0, sp
 8001cea:	f000 fb17 	bl	800231c <f25519_mul__distinct>

	/* B = (Y1+X1)(Y2+X2) */
	f25519_add(c, p1->y, p1->x);
 8001cee:	a810      	add	r0, sp, #64	; 0x40
 8001cf0:	4641      	mov	r1, r8
 8001cf2:	462a      	mov	r2, r5
 8001cf4:	f000 faa4 	bl	8002240 <f25519_add>
	f25519_add(d, p2->y, p2->x);
 8001cf8:	a818      	add	r0, sp, #96	; 0x60
 8001cfa:	4639      	mov	r1, r7
 8001cfc:	4622      	mov	r2, r4
 8001cfe:	f000 fa9f 	bl	8002240 <f25519_add>
	f25519_mul__distinct(b, c, d);
 8001d02:	a910      	add	r1, sp, #64	; 0x40
 8001d04:	aa18      	add	r2, sp, #96	; 0x60
 8001d06:	a808      	add	r0, sp, #32
 8001d08:	f000 fb08 	bl	800231c <f25519_mul__distinct>

	/* C = T1 k T2 */
	f25519_mul__distinct(d, p1->t, p2->t);
 8001d0c:	a818      	add	r0, sp, #96	; 0x60
 8001d0e:	f105 0140 	add.w	r1, r5, #64	; 0x40
 8001d12:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8001d16:	f000 fb01 	bl	800231c <f25519_mul__distinct>
	f25519_mul__distinct(c, d, ed25519_k);
 8001d1a:	a810      	add	r0, sp, #64	; 0x40
 8001d1c:	a918      	add	r1, sp, #96	; 0x60
 8001d1e:	4a1e      	ldr	r2, [pc, #120]	; (8001d98 <ed25519_add+0xdc>)
 8001d20:	f000 fafc 	bl	800231c <f25519_mul__distinct>

	/* D = Z1 2 Z2 */
	f25519_mul__distinct(d, p1->z, p2->z);
 8001d24:	a818      	add	r0, sp, #96	; 0x60
 8001d26:	f105 0160 	add.w	r1, r5, #96	; 0x60
 8001d2a:	f104 0260 	add.w	r2, r4, #96	; 0x60
 8001d2e:	f000 faf5 	bl	800231c <f25519_mul__distinct>
	f25519_add(d, d, d);
 8001d32:	a818      	add	r0, sp, #96	; 0x60
 8001d34:	4601      	mov	r1, r0
 8001d36:	4602      	mov	r2, r0
 8001d38:	f000 fa82 	bl	8002240 <f25519_add>

	/* E = B - A */
	f25519_sub(e, b, a);
 8001d3c:	a908      	add	r1, sp, #32
 8001d3e:	466a      	mov	r2, sp
 8001d40:	a820      	add	r0, sp, #128	; 0x80
 8001d42:	f000 faa1 	bl	8002288 <f25519_sub>

	/* F = D - C */
	f25519_sub(f, d, c);
 8001d46:	a918      	add	r1, sp, #96	; 0x60
 8001d48:	aa10      	add	r2, sp, #64	; 0x40
 8001d4a:	a828      	add	r0, sp, #160	; 0xa0
 8001d4c:	f000 fa9c 	bl	8002288 <f25519_sub>

	/* G = D + C */
	f25519_add(g, d, c);
 8001d50:	a918      	add	r1, sp, #96	; 0x60
 8001d52:	aa10      	add	r2, sp, #64	; 0x40
 8001d54:	a830      	add	r0, sp, #192	; 0xc0
 8001d56:	f000 fa73 	bl	8002240 <f25519_add>

	/* H = B + A */
	f25519_add(h, b, a);
 8001d5a:	a908      	add	r1, sp, #32
 8001d5c:	466a      	mov	r2, sp
 8001d5e:	a838      	add	r0, sp, #224	; 0xe0
 8001d60:	f000 fa6e 	bl	8002240 <f25519_add>

	/* X3 = E F */
	f25519_mul__distinct(r->x, e, f);
 8001d64:	4630      	mov	r0, r6
 8001d66:	a920      	add	r1, sp, #128	; 0x80
 8001d68:	aa28      	add	r2, sp, #160	; 0xa0
 8001d6a:	f000 fad7 	bl	800231c <f25519_mul__distinct>

	/* Y3 = G H */
	f25519_mul__distinct(r->y, g, h);
 8001d6e:	f106 0020 	add.w	r0, r6, #32
 8001d72:	a930      	add	r1, sp, #192	; 0xc0
 8001d74:	aa38      	add	r2, sp, #224	; 0xe0
 8001d76:	f000 fad1 	bl	800231c <f25519_mul__distinct>

	/* T3 = E H */
	f25519_mul__distinct(r->t, e, h);
 8001d7a:	a920      	add	r1, sp, #128	; 0x80
 8001d7c:	aa38      	add	r2, sp, #224	; 0xe0
 8001d7e:	f106 0040 	add.w	r0, r6, #64	; 0x40
 8001d82:	f000 facb 	bl	800231c <f25519_mul__distinct>

	/* Z3 = F G */
	f25519_mul__distinct(r->z, f, g);
 8001d86:	f106 0060 	add.w	r0, r6, #96	; 0x60
 8001d8a:	a928      	add	r1, sp, #160	; 0xa0
 8001d8c:	aa30      	add	r2, sp, #192	; 0xc0
 8001d8e:	f000 fac5 	bl	800231c <f25519_mul__distinct>
}
 8001d92:	b040      	add	sp, #256	; 0x100
 8001d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d98:	08007220 	stmdaeq	r0, {r5, r9, ip, sp, lr}

08001d9c <ed25519_double>:

void ed25519_double(struct ed25519_pt *r, const struct ed25519_pt *p)
{
 8001d9c:	b570      	push	{r4, r5, r6, lr}
 8001d9e:	b0b8      	sub	sp, #224	; 0xe0
 8001da0:	4604      	mov	r4, r0

	/* A = X1^2 */
	f25519_mul__distinct(a, p->x, p->x);

	/* B = Y1^2 */
	f25519_mul__distinct(b, p->y, p->y);
 8001da2:	f101 0620 	add.w	r6, r1, #32
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = X1^2 */
	f25519_mul__distinct(a, p->x, p->x);
 8001da6:	460a      	mov	r2, r1
 8001da8:	4668      	mov	r0, sp
	/* Z3 = F G */
	f25519_mul__distinct(r->z, f, g);
}

void ed25519_double(struct ed25519_pt *r, const struct ed25519_pt *p)
{
 8001daa:	460d      	mov	r5, r1
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = X1^2 */
	f25519_mul__distinct(a, p->x, p->x);
 8001dac:	f000 fab6 	bl	800231c <f25519_mul__distinct>

	/* B = Y1^2 */
	f25519_mul__distinct(b, p->y, p->y);
 8001db0:	4631      	mov	r1, r6
 8001db2:	4632      	mov	r2, r6
 8001db4:	a808      	add	r0, sp, #32
 8001db6:	f000 fab1 	bl	800231c <f25519_mul__distinct>

	/* C = 2 Z1^2 */
	f25519_mul__distinct(c, p->z, p->z);
 8001dba:	f105 0160 	add.w	r1, r5, #96	; 0x60
 8001dbe:	460a      	mov	r2, r1
 8001dc0:	a810      	add	r0, sp, #64	; 0x40
 8001dc2:	f000 faab 	bl	800231c <f25519_mul__distinct>
	f25519_add(c, c, c);
 8001dc6:	a810      	add	r0, sp, #64	; 0x40
 8001dc8:	4601      	mov	r1, r0
 8001dca:	4602      	mov	r2, r0
 8001dcc:	f000 fa38 	bl	8002240 <f25519_add>

	/* D = a A (alter sign) */
	/* E = (X1+Y1)^2-A-B */
	f25519_add(f, p->x, p->y);
 8001dd0:	4632      	mov	r2, r6
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	a820      	add	r0, sp, #128	; 0x80
 8001dd6:	f000 fa33 	bl	8002240 <f25519_add>
	f25519_mul__distinct(e, f, f);
 8001dda:	a920      	add	r1, sp, #128	; 0x80
 8001ddc:	460a      	mov	r2, r1
 8001dde:	a818      	add	r0, sp, #96	; 0x60
 8001de0:	f000 fa9c 	bl	800231c <f25519_mul__distinct>
	f25519_sub(e, e, a);
 8001de4:	a818      	add	r0, sp, #96	; 0x60
 8001de6:	4601      	mov	r1, r0
 8001de8:	466a      	mov	r2, sp
 8001dea:	f000 fa4d 	bl	8002288 <f25519_sub>
	f25519_sub(e, e, b);
 8001dee:	a818      	add	r0, sp, #96	; 0x60
 8001df0:	4601      	mov	r1, r0
 8001df2:	aa08      	add	r2, sp, #32
 8001df4:	f000 fa48 	bl	8002288 <f25519_sub>

	/* G = D + B */
	f25519_sub(g, b, a);
 8001df8:	a908      	add	r1, sp, #32
 8001dfa:	466a      	mov	r2, sp
 8001dfc:	a828      	add	r0, sp, #160	; 0xa0
 8001dfe:	f000 fa43 	bl	8002288 <f25519_sub>

	/* F = G - C */
	f25519_sub(f, g, c);
 8001e02:	aa10      	add	r2, sp, #64	; 0x40
 8001e04:	a820      	add	r0, sp, #128	; 0x80
 8001e06:	a928      	add	r1, sp, #160	; 0xa0
 8001e08:	f000 fa3e 	bl	8002288 <f25519_sub>

	/* H = D - B */
	f25519_neg(h, b);
 8001e0c:	a908      	add	r1, sp, #32
 8001e0e:	a830      	add	r0, sp, #192	; 0xc0
 8001e10:	f000 fa60 	bl	80022d4 <f25519_neg>
	f25519_sub(h, h, a);
 8001e14:	a830      	add	r0, sp, #192	; 0xc0
 8001e16:	4601      	mov	r1, r0
 8001e18:	466a      	mov	r2, sp
 8001e1a:	f000 fa35 	bl	8002288 <f25519_sub>

	/* X3 = E F */
	f25519_mul__distinct(r->x, e, f);
 8001e1e:	4620      	mov	r0, r4
 8001e20:	a918      	add	r1, sp, #96	; 0x60
 8001e22:	aa20      	add	r2, sp, #128	; 0x80
 8001e24:	f000 fa7a 	bl	800231c <f25519_mul__distinct>

	/* Y3 = G H */
	f25519_mul__distinct(r->y, g, h);
 8001e28:	f104 0020 	add.w	r0, r4, #32
 8001e2c:	a928      	add	r1, sp, #160	; 0xa0
 8001e2e:	aa30      	add	r2, sp, #192	; 0xc0
 8001e30:	f000 fa74 	bl	800231c <f25519_mul__distinct>

	/* T3 = E H */
	f25519_mul__distinct(r->t, e, h);
 8001e34:	a918      	add	r1, sp, #96	; 0x60
 8001e36:	aa30      	add	r2, sp, #192	; 0xc0
 8001e38:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001e3c:	f000 fa6e 	bl	800231c <f25519_mul__distinct>

	/* Z3 = F G */
	f25519_mul__distinct(r->z, f, g);
 8001e40:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8001e44:	a920      	add	r1, sp, #128	; 0x80
 8001e46:	aa28      	add	r2, sp, #160	; 0xa0
 8001e48:	f000 fa68 	bl	800231c <f25519_mul__distinct>
}
 8001e4c:	b038      	add	sp, #224	; 0xe0
 8001e4e:	bd70      	pop	{r4, r5, r6, pc}

08001e50 <ed25519_smult>:

void ed25519_smult(struct ed25519_pt *r_out, const struct ed25519_pt *p,
		   const uint8_t *e)
{
 8001e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e54:	b0c0      	sub	sp, #256	; 0x100
 8001e56:	4680      	mov	r8, r0
 8001e58:	460f      	mov	r7, r1
 8001e5a:	4616      	mov	r6, r2

/* Order of the group generated by the base point */
static inline void ed25519_copy(struct ed25519_pt *dst,
				const struct ed25519_pt *src)
{
	memcpy(dst, src, sizeof(*dst));
 8001e5c:	4668      	mov	r0, sp
 8001e5e:	491c      	ldr	r1, [pc, #112]	; (8001ed0 <ed25519_smult+0x80>)
 8001e60:	2280      	movs	r2, #128	; 0x80
 8001e62:	f004 fcef 	bl	8006844 <memcpy>
	struct ed25519_pt r;
	int i;

	ed25519_copy(&r, &ed25519_neutral);

	for (i = 255; i >= 0; i--) {
 8001e66:	24ff      	movs	r4, #255	; 0xff
		const uint8_t bit = (e[i >> 3] >> (i & 7)) & 1;
 8001e68:	10e3      	asrs	r3, r4, #3
 8001e6a:	5cf5      	ldrb	r5, [r6, r3]
 8001e6c:	f004 0307 	and.w	r3, r4, #7
 8001e70:	411d      	asrs	r5, r3
		struct ed25519_pt s;

		ed25519_double(&r, &r);
 8001e72:	4668      	mov	r0, sp
 8001e74:	4669      	mov	r1, sp
 8001e76:	f7ff ff91 	bl	8001d9c <ed25519_double>
	int i;

	ed25519_copy(&r, &ed25519_neutral);

	for (i = 255; i >= 0; i--) {
		const uint8_t bit = (e[i >> 3] >> (i & 7)) & 1;
 8001e7a:	f005 0501 	and.w	r5, r5, #1
		struct ed25519_pt s;

		ed25519_double(&r, &r);
		ed25519_add(&s, &r, p);
 8001e7e:	a820      	add	r0, sp, #128	; 0x80
 8001e80:	4669      	mov	r1, sp
 8001e82:	463a      	mov	r2, r7
 8001e84:	f7ff ff1a 	bl	8001cbc <ed25519_add>

		f25519_select(r.x, r.x, s.x, bit);
 8001e88:	4668      	mov	r0, sp
 8001e8a:	4669      	mov	r1, sp
 8001e8c:	aa20      	add	r2, sp, #128	; 0x80
 8001e8e:	462b      	mov	r3, r5
 8001e90:	f000 f974 	bl	800217c <f25519_select>
		f25519_select(r.y, r.y, s.y, bit);
 8001e94:	a808      	add	r0, sp, #32
 8001e96:	4601      	mov	r1, r0
 8001e98:	aa28      	add	r2, sp, #160	; 0xa0
 8001e9a:	462b      	mov	r3, r5
 8001e9c:	f000 f96e 	bl	800217c <f25519_select>
		f25519_select(r.z, r.z, s.z, bit);
 8001ea0:	a818      	add	r0, sp, #96	; 0x60
 8001ea2:	4601      	mov	r1, r0
 8001ea4:	aa38      	add	r2, sp, #224	; 0xe0
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	f000 f968 	bl	800217c <f25519_select>
		f25519_select(r.t, r.t, s.t, bit);
 8001eac:	a810      	add	r0, sp, #64	; 0x40
 8001eae:	462b      	mov	r3, r5
	struct ed25519_pt r;
	int i;

	ed25519_copy(&r, &ed25519_neutral);

	for (i = 255; i >= 0; i--) {
 8001eb0:	3c01      	subs	r4, #1
		ed25519_add(&s, &r, p);

		f25519_select(r.x, r.x, s.x, bit);
		f25519_select(r.y, r.y, s.y, bit);
		f25519_select(r.z, r.z, s.z, bit);
		f25519_select(r.t, r.t, s.t, bit);
 8001eb2:	4601      	mov	r1, r0
 8001eb4:	aa30      	add	r2, sp, #192	; 0xc0
 8001eb6:	f000 f961 	bl	800217c <f25519_select>
	struct ed25519_pt r;
	int i;

	ed25519_copy(&r, &ed25519_neutral);

	for (i = 255; i >= 0; i--) {
 8001eba:	1c63      	adds	r3, r4, #1
 8001ebc:	d1d4      	bne.n	8001e68 <ed25519_smult+0x18>
 8001ebe:	4640      	mov	r0, r8
 8001ec0:	4669      	mov	r1, sp
 8001ec2:	2280      	movs	r2, #128	; 0x80
 8001ec4:	f004 fcbe 	bl	8006844 <memcpy>
		f25519_select(r.z, r.z, s.z, bit);
		f25519_select(r.t, r.t, s.t, bit);
	}

	ed25519_copy(r_out, &r);
}
 8001ec8:	b040      	add	sp, #256	; 0x100
 8001eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ece:	bf00      	nop
 8001ed0:	08007240 	stmdaeq	r0, {r6, r9, ip, sp, lr}

08001ed4 <edsign_verify>:
	memcpy(signature + 32, s, 32);
}
*/
uint8_t edsign_verify(const uint8_t *signature, const uint8_t *pub,
		      const uint8_t *message, size_t len)
{
 8001ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ed8:	4606      	mov	r6, r0
 8001eda:	460f      	mov	r7, r1
 8001edc:	b0e9      	sub	sp, #420	; 0x1a4
static void hash_message(uint8_t *z, const uint8_t *r, const uint8_t *a,
			 const uint8_t *m, size_t len)
{
	uint8_t block[SHA512_BLOCK_SIZE];

	memcpy(block, r, 32);
 8001ede:	6800      	ldr	r0, [r0, #0]
 8001ee0:	6871      	ldr	r1, [r6, #4]
	memcpy(signature + 32, s, 32);
}
*/
uint8_t edsign_verify(const uint8_t *signature, const uint8_t *pub,
		      const uint8_t *message, size_t len)
{
 8001ee2:	4698      	mov	r8, r3
 8001ee4:	4691      	mov	r9, r2
static void hash_message(uint8_t *z, const uint8_t *r, const uint8_t *a,
			 const uint8_t *m, size_t len)
{
	uint8_t block[SHA512_BLOCK_SIZE];

	memcpy(block, r, 32);
 8001ee6:	68f3      	ldr	r3, [r6, #12]
 8001ee8:	68b2      	ldr	r2, [r6, #8]
 8001eea:	ac48      	add	r4, sp, #288	; 0x120
 8001eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eee:	6930      	ldr	r0, [r6, #16]
 8001ef0:	6971      	ldr	r1, [r6, #20]
 8001ef2:	69b2      	ldr	r2, [r6, #24]
 8001ef4:	69f3      	ldr	r3, [r6, #28]
	memcpy(block + 32, a, 32);
 8001ef6:	f50d 7ea0 	add.w	lr, sp, #320	; 0x140
static void hash_message(uint8_t *z, const uint8_t *r, const uint8_t *a,
			 const uint8_t *m, size_t len)
{
	uint8_t block[SHA512_BLOCK_SIZE];

	memcpy(block, r, 32);
 8001efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	memcpy(block + 32, a, 32);
 8001efc:	6838      	ldr	r0, [r7, #0]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	68fb      	ldr	r3, [r7, #12]
extern const struct sha512_state sha512_initial_state;

/* Set up a new context */
static inline void sha512_init(struct sha512_state *s)
{
	memcpy(s, &sha512_initial_state, sizeof(*s));
 8001f04:	4d4f      	ldr	r5, [pc, #316]	; (8002044 <edsign_verify+0x170>)
 8001f06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001f0a:	6938      	ldr	r0, [r7, #16]
 8001f0c:	6979      	ldr	r1, [r7, #20]
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	ac28      	add	r4, sp, #160	; 0xa0
 8001f14:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
{
	struct sha512_state s;

	sha512_init(&s);

	if (len < SHA512_BLOCK_SIZE - prefix_size) {
 8001f28:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8001f2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f30:	d92a      	bls.n	8001f88 <edsign_verify+0xb4>
		memcpy(init_block + prefix_size, message, len);
		sha512_final(&s, init_block, len + prefix_size);
	} else {
		size_t i;

		memcpy(init_block + prefix_size, message,
 8001f32:	464c      	mov	r4, r9
 8001f34:	f50d 7eb0 	add.w	lr, sp, #352	; 0x160
 8001f38:	f109 0c40 	add.w	ip, r9, #64	; 0x40
 8001f3c:	6820      	ldr	r0, [r4, #0]
 8001f3e:	6861      	ldr	r1, [r4, #4]
 8001f40:	68a2      	ldr	r2, [r4, #8]
 8001f42:	68e3      	ldr	r3, [r4, #12]
 8001f44:	4675      	mov	r5, lr
 8001f46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f48:	3410      	adds	r4, #16
 8001f4a:	4564      	cmp	r4, ip
 8001f4c:	46ae      	mov	lr, r5
 8001f4e:	d1f5      	bne.n	8001f3c <edsign_verify+0x68>
		       SHA512_BLOCK_SIZE - prefix_size);
		sha512_block(&s, init_block);
 8001f50:	a828      	add	r0, sp, #160	; 0xa0
 8001f52:	a948      	add	r1, sp, #288	; 0x120
 8001f54:	f003 fa38 	bl	80053c8 <sha512_block>

		for (i = SHA512_BLOCK_SIZE - prefix_size;
 8001f58:	f1b8 0fbf 	cmp.w	r8, #191	; 0xbf
 8001f5c:	d970      	bls.n	8002040 <edsign_verify+0x16c>
		     i + SHA512_BLOCK_SIZE <= len;
 8001f5e:	24c0      	movs	r4, #192	; 0xc0

		memcpy(init_block + prefix_size, message,
		       SHA512_BLOCK_SIZE - prefix_size);
		sha512_block(&s, init_block);

		for (i = SHA512_BLOCK_SIZE - prefix_size;
 8001f60:	2140      	movs	r1, #64	; 0x40
 8001f62:	e001      	b.n	8001f68 <edsign_verify+0x94>
 8001f64:	4621      	mov	r1, r4
		     i + SHA512_BLOCK_SIZE <= len;
 8001f66:	462c      	mov	r4, r5
		     i += SHA512_BLOCK_SIZE)
			sha512_block(&s, message + i);
 8001f68:	4449      	add	r1, r9
 8001f6a:	a828      	add	r0, sp, #160	; 0xa0
		memcpy(init_block + prefix_size, message,
		       SHA512_BLOCK_SIZE - prefix_size);
		sha512_block(&s, init_block);

		for (i = SHA512_BLOCK_SIZE - prefix_size;
		     i + SHA512_BLOCK_SIZE <= len;
 8001f6c:	f104 0580 	add.w	r5, r4, #128	; 0x80
		     i += SHA512_BLOCK_SIZE)
			sha512_block(&s, message + i);
 8001f70:	f003 fa2a 	bl	80053c8 <sha512_block>

		memcpy(init_block + prefix_size, message,
		       SHA512_BLOCK_SIZE - prefix_size);
		sha512_block(&s, init_block);

		for (i = SHA512_BLOCK_SIZE - prefix_size;
 8001f74:	45a8      	cmp	r8, r5
 8001f76:	d2f5      	bcs.n	8001f64 <edsign_verify+0x90>
		     i + SHA512_BLOCK_SIZE <= len;
		     i += SHA512_BLOCK_SIZE)
			sha512_block(&s, message + i);

		sha512_final(&s, message + i, len + prefix_size);
 8001f78:	eb09 0104 	add.w	r1, r9, r4
 8001f7c:	f108 0240 	add.w	r2, r8, #64	; 0x40
 8001f80:	a828      	add	r0, sp, #160	; 0xa0
 8001f82:	f003 fc6b 	bl	800585c <sha512_final>
 8001f86:	e00a      	b.n	8001f9e <edsign_verify+0xca>
	struct sha512_state s;

	sha512_init(&s);

	if (len < SHA512_BLOCK_SIZE - prefix_size) {
		memcpy(init_block + prefix_size, message, len);
 8001f88:	4649      	mov	r1, r9
 8001f8a:	4642      	mov	r2, r8
 8001f8c:	a858      	add	r0, sp, #352	; 0x160
 8001f8e:	f004 fc59 	bl	8006844 <memcpy>
		sha512_final(&s, init_block, len + prefix_size);
 8001f92:	a828      	add	r0, sp, #160	; 0xa0
 8001f94:	a948      	add	r1, sp, #288	; 0x120
 8001f96:	f108 0240 	add.w	r2, r8, #64	; 0x40
 8001f9a:	f003 fc5f 	bl	800585c <sha512_final>
			sha512_block(&s, message + i);

		sha512_final(&s, message + i, len + prefix_size);
	}

	sha512_get(&s, init_block, 0, SHA512_HASH_SIZE);
 8001f9e:	a828      	add	r0, sp, #160	; 0xa0
 8001fa0:	a948      	add	r1, sp, #288	; 0x120
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2340      	movs	r3, #64	; 0x40
 8001fa6:	f003 fc9d 	bl	80058e4 <sha512_get>
	fprime_from_bytes(out_fp, init_block, SHA512_HASH_SIZE, ed25519_order);
 8001faa:	4b27      	ldr	r3, [pc, #156]	; (8002048 <edsign_verify+0x174>)
 8001fac:	a810      	add	r0, sp, #64	; 0x40
 8001fae:	a948      	add	r1, sp, #288	; 0x120
 8001fb0:	2240      	movs	r2, #64	; 0x40
 8001fb2:	f001 f807 	bl	8002fc4 <fprime_from_bytes>

static void sm_pack(uint8_t *r, const uint8_t *k)
{
	struct ed25519_pt p;

	ed25519_smult(&p, &ed25519_base, k);
 8001fb6:	a848      	add	r0, sp, #288	; 0x120
 8001fb8:	f106 0220 	add.w	r2, r6, #32
 8001fbc:	4923      	ldr	r1, [pc, #140]	; (800204c <edsign_verify+0x178>)
 8001fbe:	f7ff ff47 	bl	8001e50 <ed25519_smult>
static void pp(uint8_t *packed, const struct ed25519_pt *p)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];

	ed25519_unproject(x, y, p);
 8001fc2:	a820      	add	r0, sp, #128	; 0x80
 8001fc4:	a928      	add	r1, sp, #160	; 0xa0
 8001fc6:	aa48      	add	r2, sp, #288	; 0x120
 8001fc8:	f7ff fdc6 	bl	8001b58 <ed25519_unproject>
	ed25519_pack(packed, x, y);
 8001fcc:	a920      	add	r1, sp, #128	; 0x80
 8001fce:	4668      	mov	r0, sp
 8001fd0:	aa28      	add	r2, sp, #160	; 0xa0
 8001fd2:	f7ff fddf 	bl	8001b94 <ed25519_pack>

static uint8_t upp(struct ed25519_pt *p, const uint8_t *packed)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];
	uint8_t ok = ed25519_try_unpack(x, y, packed);
 8001fd6:	a948      	add	r1, sp, #288	; 0x120
 8001fd8:	463a      	mov	r2, r7
 8001fda:	a820      	add	r0, sp, #128	; 0x80
 8001fdc:	f7ff fe0a 	bl	8001bf4 <ed25519_try_unpack>

	ed25519_project(p, x, y);
 8001fe0:	a920      	add	r1, sp, #128	; 0x80

static uint8_t upp(struct ed25519_pt *p, const uint8_t *packed)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];
	uint8_t ok = ed25519_try_unpack(x, y, packed);
 8001fe2:	4605      	mov	r5, r0

	ed25519_project(p, x, y);
 8001fe4:	aa48      	add	r2, sp, #288	; 0x120
 8001fe6:	a828      	add	r0, sp, #160	; 0xa0
 8001fe8:	f7ff fd7e 	bl	8001ae8 <ed25519_project>
	/* sB = (ze + k)B = ... */
	sm_pack(lhs, signature + 32);

	/* ... = zA + R */
	ok &= upp(&p, pub);
	ed25519_smult(&p, &p, z);
 8001fec:	a828      	add	r0, sp, #160	; 0xa0
 8001fee:	4601      	mov	r1, r0
 8001ff0:	aa10      	add	r2, sp, #64	; 0x40
 8001ff2:	f7ff ff2d 	bl	8001e50 <ed25519_smult>

static uint8_t upp(struct ed25519_pt *p, const uint8_t *packed)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];
	uint8_t ok = ed25519_try_unpack(x, y, packed);
 8001ff6:	4632      	mov	r2, r6
 8001ff8:	a920      	add	r1, sp, #128	; 0x80
 8001ffa:	a818      	add	r0, sp, #96	; 0x60
 8001ffc:	f7ff fdfa 	bl	8001bf4 <ed25519_try_unpack>

	ed25519_project(p, x, y);
 8002000:	a918      	add	r1, sp, #96	; 0x60

static uint8_t upp(struct ed25519_pt *p, const uint8_t *packed)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];
	uint8_t ok = ed25519_try_unpack(x, y, packed);
 8002002:	4604      	mov	r4, r0

	ed25519_project(p, x, y);
 8002004:	aa20      	add	r2, sp, #128	; 0x80
 8002006:	a848      	add	r0, sp, #288	; 0x120
 8002008:	f7ff fd6e 	bl	8001ae8 <ed25519_project>

	/* ... = zA + R */
	ok &= upp(&p, pub);
	ed25519_smult(&p, &p, z);
	ok &= upp(&q, signature);
	ed25519_add(&p, &p, &q);
 800200c:	a828      	add	r0, sp, #160	; 0xa0
 800200e:	4601      	mov	r1, r0
 8002010:	aa48      	add	r2, sp, #288	; 0x120
 8002012:	f7ff fe53 	bl	8001cbc <ed25519_add>
static void pp(uint8_t *packed, const struct ed25519_pt *p)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];

	ed25519_unproject(x, y, p);
 8002016:	a818      	add	r0, sp, #96	; 0x60
 8002018:	a920      	add	r1, sp, #128	; 0x80
 800201a:	aa28      	add	r2, sp, #160	; 0xa0
 800201c:	f7ff fd9c 	bl	8001b58 <ed25519_unproject>
	ed25519_pack(packed, x, y);
 8002020:	a918      	add	r1, sp, #96	; 0x60
 8002022:	aa20      	add	r2, sp, #128	; 0x80
 8002024:	a808      	add	r0, sp, #32
 8002026:	f7ff fdb5 	bl	8001b94 <ed25519_pack>
	ok &= upp(&q, signature);
	ed25519_add(&p, &p, &q);
	pp(rhs, &p);

	/* Equal? */
	return ok & f25519_eq(lhs, rhs);
 800202a:	4668      	mov	r0, sp
 800202c:	a908      	add	r1, sp, #32
 800202e:	f000 f857 	bl	80020e0 <f25519_eq>

	/* sB = (ze + k)B = ... */
	sm_pack(lhs, signature + 32);

	/* ... = zA + R */
	ok &= upp(&p, pub);
 8002032:	4028      	ands	r0, r5
	ed25519_smult(&p, &p, z);
	ok &= upp(&q, signature);
 8002034:	f000 0001 	and.w	r0, r0, #1
	ed25519_add(&p, &p, &q);
	pp(rhs, &p);

	/* Equal? */
	return ok & f25519_eq(lhs, rhs);
}
 8002038:	4020      	ands	r0, r4
 800203a:	b069      	add	sp, #420	; 0x1a4
 800203c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

		memcpy(init_block + prefix_size, message,
		       SHA512_BLOCK_SIZE - prefix_size);
		sha512_block(&s, init_block);

		for (i = SHA512_BLOCK_SIZE - prefix_size;
 8002040:	2440      	movs	r4, #64	; 0x40
 8002042:	e799      	b.n	8001f78 <edsign_verify+0xa4>
 8002044:	080073a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, sp, lr}
 8002048:	08007360 	stmdaeq	r0, {r5, r6, r8, r9, ip, sp, lr}
 800204c:	080072c0 	stmdaeq	r0, {r6, r7, r9, ip, sp, lr}

08002050 <f25519_load>:

const uint8_t f25519_zero[F25519_SIZE] = {0};
const uint8_t f25519_one[F25519_SIZE] = {1};

void f25519_load(uint8_t *x, uint32_t c)
{
 8002050:	b410      	push	{r4}
	int i;

	for (i = 0; i < sizeof(c); i++) {
		x[i] = c;
		c >>= 8;
 8002052:	0c0a      	lsrs	r2, r1, #16
 8002054:	0a0c      	lsrs	r4, r1, #8
 8002056:	0e0b      	lsrs	r3, r1, #24
void f25519_load(uint8_t *x, uint32_t c)
{
	int i;

	for (i = 0; i < sizeof(c); i++) {
		x[i] = c;
 8002058:	7001      	strb	r1, [r0, #0]
 800205a:	7082      	strb	r2, [r0, #2]
 800205c:	7044      	strb	r4, [r0, #1]
 800205e:	70c3      	strb	r3, [r0, #3]
 8002060:	2100      	movs	r1, #0
 8002062:	3004      	adds	r0, #4
 8002064:	221c      	movs	r2, #28
		c >>= 8;
	}

	for (; i < F25519_SIZE; i++)
		x[i] = 0;
}
 8002066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800206a:	f004 bbf4 	b.w	8006856 <memset>
 800206e:	bf00      	nop

08002070 <f25519_normalize>:

void f25519_normalize(uint8_t *x)
{
 8002070:	b410      	push	{r4}
	uint8_t minusp[F25519_SIZE];
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
 8002072:	7fc4      	ldrb	r4, [r0, #31]
	for (; i < F25519_SIZE; i++)
		x[i] = 0;
}

void f25519_normalize(uint8_t *x)
{
 8002074:	b089      	sub	sp, #36	; 0x24
	uint8_t minusp[F25519_SIZE];
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
 8002076:	09e1      	lsrs	r1, r4, #7
 8002078:	00ca      	lsls	r2, r1, #3
	x[31] &= 127;
 800207a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	uint8_t minusp[F25519_SIZE];
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
 800207e:	440a      	add	r2, r1
	x[31] &= 127;

	for (i = 0; i < F25519_SIZE; i++) {
 8002080:	2300      	movs	r3, #0
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
	x[31] &= 127;
 8002082:	77c4      	strb	r4, [r0, #31]
	uint8_t minusp[F25519_SIZE];
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
 8002084:	eb01 0242 	add.w	r2, r1, r2, lsl #1
	x[31] &= 127;

	for (i = 0; i < F25519_SIZE; i++) {
		c += x[i];
 8002088:	5cc1      	ldrb	r1, [r0, r3]
 800208a:	440a      	add	r2, r1
		x[i] = c;
 800208c:	54c2      	strb	r2, [r0, r3]

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
	x[31] &= 127;

	for (i = 0; i < F25519_SIZE; i++) {
 800208e:	3301      	adds	r3, #1
 8002090:	2b20      	cmp	r3, #32
		c += x[i];
		x[i] = c;
		c >>= 8;
 8002092:	f3c2 220f 	ubfx	r2, r2, #8, #16

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
	x[31] &= 127;

	for (i = 0; i < F25519_SIZE; i++) {
 8002096:	d1f7      	bne.n	8002088 <f25519_normalize+0x18>
 8002098:	2300      	movs	r3, #0
 800209a:	2213      	movs	r2, #19
	 * value if underflow did not occur.
	 */
	c = 19;

	for (i = 0; i + 1 < F25519_SIZE; i++) {
		c += x[i];
 800209c:	5cc1      	ldrb	r1, [r0, r3]
 800209e:	440a      	add	r2, r1
		minusp[i] = c;
 80020a0:	f80d 2003 	strb.w	r2, [sp, r3]
	 * 2p. Try subtracting p, and conditionally load the subtracted
	 * value if underflow did not occur.
	 */
	c = 19;

	for (i = 0; i + 1 < F25519_SIZE; i++) {
 80020a4:	3301      	adds	r3, #1
 80020a6:	2b1f      	cmp	r3, #31
		c += x[i];
		minusp[i] = c;
		c >>= 8;
 80020a8:	f3c2 220f 	ubfx	r2, r2, #8, #16
	 * 2p. Try subtracting p, and conditionally load the subtracted
	 * value if underflow did not occur.
	 */
	c = 19;

	for (i = 0; i + 1 < F25519_SIZE; i++) {
 80020ac:	d1f6      	bne.n	800209c <f25519_normalize+0x2c>
		c += x[i];
		minusp[i] = c;
		c >>= 8;
	}

	c += ((uint16_t)x[i]) - 128;
 80020ae:	7fc1      	ldrb	r1, [r0, #31]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 80020b0:	2300      	movs	r3, #0
		c += x[i];
		minusp[i] = c;
		c >>= 8;
	}

	c += ((uint16_t)x[i]) - 128;
 80020b2:	3980      	subs	r1, #128	; 0x80
 80020b4:	440a      	add	r2, r1
 80020b6:	b292      	uxth	r2, r2

void f25519_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 80020b8:	f342 34c0 	sbfx	r4, r2, #15, #1
		minusp[i] = c;
		c >>= 8;
	}

	c += ((uint16_t)x[i]) - 128;
	minusp[31] = c;
 80020bc:	f88d 201f 	strb.w	r2, [sp, #31]

void f25519_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 80020c0:	b2e4      	uxtb	r4, r4
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 80020c2:	f81d 2003 	ldrb.w	r2, [sp, r3]
 80020c6:	5cc1      	ldrb	r1, [r0, r3]
 80020c8:	4051      	eors	r1, r2
 80020ca:	4021      	ands	r1, r4
 80020cc:	404a      	eors	r2, r1
 80020ce:	54c2      	strb	r2, [r0, r3]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 80020d0:	3301      	adds	r3, #1
 80020d2:	2b20      	cmp	r3, #32
 80020d4:	d1f5      	bne.n	80020c2 <f25519_normalize+0x52>
	c += ((uint16_t)x[i]) - 128;
	minusp[31] = c;

	/* Load x-p if no underflow */
	f25519_select(x, minusp, x, (c >> 15) & 1);
}
 80020d6:	b009      	add	sp, #36	; 0x24
 80020d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop

080020e0 <f25519_eq>:

uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
 80020e0:	ea40 0301 	orr.w	r3, r0, r1
 80020e4:	079b      	lsls	r3, r3, #30
 80020e6:	b4f0      	push	{r4, r5, r6, r7}
 80020e8:	d13c      	bne.n	8002164 <f25519_eq+0x84>
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		sum |= x[i] ^ y[i];
 80020ea:	6807      	ldr	r7, [r0, #0]
 80020ec:	6842      	ldr	r2, [r0, #4]
 80020ee:	684b      	ldr	r3, [r1, #4]
 80020f0:	680e      	ldr	r6, [r1, #0]
 80020f2:	6885      	ldr	r5, [r0, #8]
 80020f4:	688c      	ldr	r4, [r1, #8]
 80020f6:	ea82 0c03 	eor.w	ip, r2, r3
 80020fa:	407e      	eors	r6, r7
 80020fc:	68c2      	ldr	r2, [r0, #12]
 80020fe:	68cb      	ldr	r3, [r1, #12]
 8002100:	ea46 060c 	orr.w	r6, r6, ip
 8002104:	ea85 0c04 	eor.w	ip, r5, r4
 8002108:	6905      	ldr	r5, [r0, #16]
 800210a:	690c      	ldr	r4, [r1, #16]
 800210c:	ea46 0c0c 	orr.w	ip, r6, ip
 8002110:	ea82 0603 	eor.w	r6, r2, r3
 8002114:	6942      	ldr	r2, [r0, #20]
 8002116:	694b      	ldr	r3, [r1, #20]
 8002118:	ea4c 0c06 	orr.w	ip, ip, r6
 800211c:	6987      	ldr	r7, [r0, #24]
 800211e:	698e      	ldr	r6, [r1, #24]
 8002120:	406c      	eors	r4, r5
 8002122:	ea4c 0404 	orr.w	r4, ip, r4
 8002126:	4053      	eors	r3, r2
 8002128:	69c0      	ldr	r0, [r0, #28]
 800212a:	69c9      	ldr	r1, [r1, #28]
 800212c:	ea44 0203 	orr.w	r2, r4, r3
 8002130:	ea87 0406 	eor.w	r4, r7, r6
 8002134:	4322      	orrs	r2, r4
 8002136:	ea80 0301 	eor.w	r3, r0, r1
 800213a:	4313      	orrs	r3, r2
 800213c:	ea43 2213 	orr.w	r2, r3, r3, lsr #8
 8002140:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
 8002144:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 8002148:	ea42 6213 	orr.w	r2, r2, r3, lsr #24

	sum |= (sum >> 4);
 800214c:	ea42 1212 	orr.w	r2, r2, r2, lsr #4
	sum |= (sum >> 2);
 8002150:	ea42 0292 	orr.w	r2, r2, r2, lsr #2
	sum |= (sum >> 1);
 8002154:	ea42 0252 	orr.w	r2, r2, r2, lsr #1

	return (sum ^ 1) & 1;
 8002158:	f002 0001 	and.w	r0, r2, #1
}
 800215c:	f080 0001 	eor.w	r0, r0, #1
 8002160:	bcf0      	pop	{r4, r5, r6, r7}
 8002162:	4770      	bx	lr
uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 8002164:	2300      	movs	r3, #0
	f25519_select(x, minusp, x, (c >> 15) & 1);
}

uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
 8002166:	461a      	mov	r2, r3
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		sum |= x[i] ^ y[i];
 8002168:	5cc5      	ldrb	r5, [r0, r3]
 800216a:	5ccc      	ldrb	r4, [r1, r3]
uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 800216c:	3301      	adds	r3, #1
		sum |= x[i] ^ y[i];
 800216e:	406c      	eors	r4, r5
uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 8002170:	2b20      	cmp	r3, #32
		sum |= x[i] ^ y[i];
 8002172:	ea42 0204 	orr.w	r2, r2, r4
uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 8002176:	d1f7      	bne.n	8002168 <f25519_eq+0x88>
 8002178:	e7e8      	b.n	800214c <f25519_eq+0x6c>
 800217a:	bf00      	nop

0800217c <f25519_select>:
}

void f25519_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
 800217c:	b4f0      	push	{r4, r5, r6, r7}
 800217e:	1d04      	adds	r4, r0, #4
 8002180:	1d0f      	adds	r7, r1, #4
 8002182:	42b8      	cmp	r0, r7
 8002184:	bf38      	it	cc
 8002186:	42a1      	cmpcc	r1, r4
 8002188:	f102 0504 	add.w	r5, r2, #4
 800218c:	bf34      	ite	cc
 800218e:	2700      	movcc	r7, #0
 8002190:	2701      	movcs	r7, #1
 8002192:	42a8      	cmp	r0, r5
 8002194:	bf38      	it	cc
 8002196:	42a2      	cmpcc	r2, r4
 8002198:	bf34      	ite	cc
 800219a:	2400      	movcc	r4, #0
 800219c:	2401      	movcs	r4, #1
	const uint8_t mask = -condition;
 800219e:	425b      	negs	r3, r3
 80021a0:	4227      	tst	r7, r4
 80021a2:	b2de      	uxtb	r6, r3
 80021a4:	d03f      	beq.n	8002226 <f25519_select+0xaa>
 80021a6:	ea41 0302 	orr.w	r3, r1, r2
 80021aa:	4303      	orrs	r3, r0
 80021ac:	079b      	lsls	r3, r3, #30
 80021ae:	d13a      	bne.n	8002226 <f25519_select+0xaa>
 80021b0:	2300      	movs	r3, #0
 80021b2:	f366 0307 	bfi	r3, r6, #0, #8
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 80021b6:	680c      	ldr	r4, [r1, #0]
 80021b8:	6815      	ldr	r5, [r2, #0]
 80021ba:	f366 230f 	bfi	r3, r6, #8, #8
 80021be:	f366 4317 	bfi	r3, r6, #16, #8
 80021c2:	f366 631f 	bfi	r3, r6, #24, #8
 80021c6:	4065      	eors	r5, r4
 80021c8:	401d      	ands	r5, r3
 80021ca:	406c      	eors	r4, r5
 80021cc:	6004      	str	r4, [r0, #0]
 80021ce:	684c      	ldr	r4, [r1, #4]
 80021d0:	6855      	ldr	r5, [r2, #4]
 80021d2:	4065      	eors	r5, r4
 80021d4:	401d      	ands	r5, r3
 80021d6:	406c      	eors	r4, r5
 80021d8:	6044      	str	r4, [r0, #4]
 80021da:	688c      	ldr	r4, [r1, #8]
 80021dc:	6895      	ldr	r5, [r2, #8]
 80021de:	4065      	eors	r5, r4
 80021e0:	401d      	ands	r5, r3
 80021e2:	406c      	eors	r4, r5
 80021e4:	6084      	str	r4, [r0, #8]
 80021e6:	68cc      	ldr	r4, [r1, #12]
 80021e8:	68d5      	ldr	r5, [r2, #12]
 80021ea:	4065      	eors	r5, r4
 80021ec:	401d      	ands	r5, r3
 80021ee:	406c      	eors	r4, r5
 80021f0:	60c4      	str	r4, [r0, #12]
 80021f2:	690c      	ldr	r4, [r1, #16]
 80021f4:	6915      	ldr	r5, [r2, #16]
 80021f6:	4065      	eors	r5, r4
 80021f8:	401d      	ands	r5, r3
 80021fa:	406c      	eors	r4, r5
 80021fc:	6104      	str	r4, [r0, #16]
 80021fe:	694c      	ldr	r4, [r1, #20]
 8002200:	6955      	ldr	r5, [r2, #20]
 8002202:	4065      	eors	r5, r4
 8002204:	401d      	ands	r5, r3
 8002206:	406c      	eors	r4, r5
 8002208:	6144      	str	r4, [r0, #20]
 800220a:	698c      	ldr	r4, [r1, #24]
 800220c:	6995      	ldr	r5, [r2, #24]
 800220e:	4065      	eors	r5, r4
 8002210:	401d      	ands	r5, r3
 8002212:	406c      	eors	r4, r5
 8002214:	6184      	str	r4, [r0, #24]
 8002216:	69c9      	ldr	r1, [r1, #28]
 8002218:	69d2      	ldr	r2, [r2, #28]
}
 800221a:	bcf0      	pop	{r4, r5, r6, r7}
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 800221c:	404a      	eors	r2, r1
 800221e:	4013      	ands	r3, r2
 8002220:	4059      	eors	r1, r3
 8002222:	61c1      	str	r1, [r0, #28]
}
 8002224:	4770      	bx	lr
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 8002226:	2300      	movs	r3, #0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 8002228:	5ccc      	ldrb	r4, [r1, r3]
 800222a:	5cd5      	ldrb	r5, [r2, r3]
 800222c:	4065      	eors	r5, r4
 800222e:	4035      	ands	r5, r6
 8002230:	406c      	eors	r4, r5
 8002232:	54c4      	strb	r4, [r0, r3]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 8002234:	3301      	adds	r3, #1
 8002236:	2b20      	cmp	r3, #32
 8002238:	d1f6      	bne.n	8002228 <f25519_select+0xac>
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
}
 800223a:	bcf0      	pop	{r4, r5, r6, r7}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop

08002240 <f25519_add>:
{
	uint16_t c = 0;
	int i;

	/* Add */
	for (i = 0; i < F25519_SIZE; i++) {
 8002240:	2300      	movs	r3, #0
	for (i = 0; i < F25519_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
}

void f25519_add(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
 8002242:	b470      	push	{r4, r5, r6}
	uint16_t c = 0;
 8002244:	461c      	mov	r4, r3
	int i;

	/* Add */
	for (i = 0; i < F25519_SIZE; i++) {
		c >>= 8;
		c += ((uint16_t)a[i]) + ((uint16_t)b[i]);
 8002246:	5cce      	ldrb	r6, [r1, r3]
 8002248:	5cd5      	ldrb	r5, [r2, r3]
 800224a:	4435      	add	r5, r6
 800224c:	eb05 2414 	add.w	r4, r5, r4, lsr #8
		r[i] = c;
 8002250:	54c4      	strb	r4, [r0, r3]
{
	uint16_t c = 0;
	int i;

	/* Add */
	for (i = 0; i < F25519_SIZE; i++) {
 8002252:	3301      	adds	r3, #1
 8002254:	2b20      	cmp	r3, #32
 8002256:	d1f6      	bne.n	8002246 <f25519_add+0x6>
		r[i] = c;
	}

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
	c = (c >> 7) * 19;
 8002258:	f3c4 14cf 	ubfx	r4, r4, #7, #16
		c += ((uint16_t)a[i]) + ((uint16_t)b[i]);
		r[i] = c;
	}

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
 800225c:	7fc3      	ldrb	r3, [r0, #31]
	c = (c >> 7) * 19;
 800225e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
		c += ((uint16_t)a[i]) + ((uint16_t)b[i]);
		r[i] = c;
	}

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
 8002262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	c = (c >> 7) * 19;
 8002266:	eb04 0242 	add.w	r2, r4, r2, lsl #1
		c += ((uint16_t)a[i]) + ((uint16_t)b[i]);
		r[i] = c;
	}

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
 800226a:	77c3      	strb	r3, [r0, #31]
	c = (c >> 7) * 19;
 800226c:	b292      	uxth	r2, r2

	for (i = 0; i < F25519_SIZE; i++) {
 800226e:	2300      	movs	r3, #0
		c += r[i];
 8002270:	5cc1      	ldrb	r1, [r0, r3]
 8002272:	440a      	add	r2, r1
 8002274:	b292      	uxth	r2, r2
		r[i] = c;
 8002276:	54c2      	strb	r2, [r0, r3]

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002278:	3301      	adds	r3, #1
 800227a:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 800227c:	ea4f 2212 	mov.w	r2, r2, lsr #8

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002280:	d1f6      	bne.n	8002270 <f25519_add+0x30>
		c += r[i];
		r[i] = c;
		c >>= 8;
	}
}
 8002282:	bc70      	pop	{r4, r5, r6}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop

08002288 <f25519_sub>:

void f25519_sub(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
 8002288:	b470      	push	{r4, r5, r6}
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 800228a:	2300      	movs	r3, #0
{
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
 800228c:	24da      	movs	r4, #218	; 0xda
	for (i = 0; i + 1 < F25519_SIZE; i++) {
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
 800228e:	5ccd      	ldrb	r5, [r1, r3]
 8002290:	5cd6      	ldrb	r6, [r2, r3]
 8002292:	f505 457f 	add.w	r5, r5, #65280	; 0xff00
 8002296:	1bad      	subs	r5, r5, r6
 8002298:	442c      	add	r4, r5
		r[i] = c;
 800229a:	54c4      	strb	r4, [r0, r3]
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 800229c:	3301      	adds	r3, #1
 800229e:	2b1f      	cmp	r3, #31
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
 80022a0:	ea4f 2414 	mov.w	r4, r4, lsr #8
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 80022a4:	d1f3      	bne.n	800228e <f25519_sub+0x6>
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
 80022a6:	7fc9      	ldrb	r1, [r1, #31]
 80022a8:	7fd2      	ldrb	r2, [r2, #31]
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80022aa:	2300      	movs	r3, #0
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
 80022ac:	1a8a      	subs	r2, r1, r2
 80022ae:	4414      	add	r4, r2
	r[31] = c & 127;
	c = (c >> 7) * 19;
 80022b0:	09e2      	lsrs	r2, r4, #7
 80022b2:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
 80022b6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80022ba:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;
 80022bc:	eb02 0241 	add.w	r2, r2, r1, lsl #1

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 80022c0:	5cc1      	ldrb	r1, [r0, r3]
 80022c2:	440a      	add	r2, r1
		r[i] = c;
 80022c4:	54c2      	strb	r2, [r0, r3]

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80022c6:	3301      	adds	r3, #1
 80022c8:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 80022ca:	ea4f 2212 	mov.w	r2, r2, lsr #8

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80022ce:	d1f7      	bne.n	80022c0 <f25519_sub+0x38>
		c += r[i];
		r[i] = c;
		c >>= 8;
	}
}
 80022d0:	bc70      	pop	{r4, r5, r6}
 80022d2:	4770      	bx	lr

080022d4 <f25519_neg>:

void f25519_neg(uint8_t *r, const uint8_t *a)
{
 80022d4:	b410      	push	{r4}
	uint32_t c = 0;
	int i;

	/* Calculate 2p - a, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 80022d6:	2300      	movs	r3, #0
{
	uint32_t c = 0;
	int i;

	/* Calculate 2p - a, to avoid underflow */
	c = 218;
 80022d8:	22da      	movs	r2, #218	; 0xda
	for (i = 0; i + 1 < F25519_SIZE; i++) {
		c += 65280 - ((uint32_t)a[i]);
 80022da:	5ccc      	ldrb	r4, [r1, r3]
 80022dc:	f5c4 447f 	rsb	r4, r4, #65280	; 0xff00
 80022e0:	4422      	add	r2, r4
		r[i] = c;
 80022e2:	54c2      	strb	r2, [r0, r3]
	uint32_t c = 0;
	int i;

	/* Calculate 2p - a, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 80022e4:	3301      	adds	r3, #1
 80022e6:	2b1f      	cmp	r3, #31
		c += 65280 - ((uint32_t)a[i]);
		r[i] = c;
		c >>= 8;
 80022e8:	ea4f 2212 	mov.w	r2, r2, lsr #8
	uint32_t c = 0;
	int i;

	/* Calculate 2p - a, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 80022ec:	d1f5      	bne.n	80022da <f25519_neg+0x6>
		c += 65280 - ((uint32_t)a[i]);
		r[i] = c;
		c >>= 8;
	}

	c -= ((uint32_t)a[31]);
 80022ee:	7fc9      	ldrb	r1, [r1, #31]
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80022f0:	2300      	movs	r3, #0
		c += 65280 - ((uint32_t)a[i]);
		r[i] = c;
		c >>= 8;
	}

	c -= ((uint32_t)a[31]);
 80022f2:	1a52      	subs	r2, r2, r1
	r[31] = c & 127;
	c = (c >> 7) * 19;
 80022f4:	09d1      	lsrs	r1, r2, #7
		r[i] = c;
		c >>= 8;
	}

	c -= ((uint32_t)a[31]);
	r[31] = c & 127;
 80022f6:	f002 047f 	and.w	r4, r2, #127	; 0x7f
	c = (c >> 7) * 19;
 80022fa:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
		r[i] = c;
		c >>= 8;
	}

	c -= ((uint32_t)a[31]);
	r[31] = c & 127;
 80022fe:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;
 8002300:	eb01 0242 	add.w	r2, r1, r2, lsl #1

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002304:	5cc1      	ldrb	r1, [r0, r3]
 8002306:	440a      	add	r2, r1
		r[i] = c;
 8002308:	54c2      	strb	r2, [r0, r3]

	c -= ((uint32_t)a[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800230a:	3301      	adds	r3, #1
 800230c:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 800230e:	ea4f 2212 	mov.w	r2, r2, lsr #8

	c -= ((uint32_t)a[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002312:	d1f7      	bne.n	8002304 <f25519_neg+0x30>
		c += r[i];
		r[i] = c;
		c >>= 8;
	}
}
 8002314:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop

0800231c <f25519_mul__distinct>:

void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
 800231c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002320:	f04f 0800 	mov.w	r8, #0
	}
}

void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
 8002324:	4643      	mov	r3, r8
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002326:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	eb02 0508 	add.w	r5, r2, r8
		for (j = 0; j <= i; j++)
 8002330:	2400      	movs	r4, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002332:	5d0f      	ldrb	r7, [r1, r4]
 8002334:	f815 6901 	ldrb.w	r6, [r5], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002338:	3401      	adds	r4, #1
 800233a:	4544      	cmp	r4, r8
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800233c:	fb07 3306 	mla	r3, r7, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002340:	ddf7      	ble.n	8002332 <f25519_mul__distinct+0x16>
 8002342:	ea28 75e8 	bic.w	r5, r8, r8, asr #31
 8002346:	1c6c      	adds	r4, r5, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002348:	2c20      	cmp	r4, #32
 800234a:	d00f      	beq.n	800236c <f25519_mul__distinct+0x50>
 800234c:	ebc5 0608 	rsb	r6, r5, r8
 8002350:	3620      	adds	r6, #32
 8002352:	4416      	add	r6, r2
 8002354:	440d      	add	r5, r1
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002356:	f816 7d01 	ldrb.w	r7, [r6, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 800235a:	f815 cf01 	ldrb.w	ip, [r5, #1]!
 800235e:	fb09 f707 	mul.w	r7, r9, r7

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002362:	3401      	adds	r4, #1
 8002364:	2c20      	cmp	r4, #32
			c += ((uint32_t)a[j]) *
 8002366:	fb0c 3307 	mla	r3, ip, r7, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800236a:	d1f4      	bne.n	8002356 <f25519_mul__distinct+0x3a>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 800236c:	f800 3008 	strb.w	r3, [r0, r8]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002370:	f108 0801 	add.w	r8, r8, #1
 8002374:	f1b8 0f20 	cmp.w	r8, #32
 8002378:	d1d7      	bne.n	800232a <f25519_mul__distinct+0xe>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800237a:	7fc1      	ldrb	r1, [r0, #31]
	c = (c >> 7) * 19;
 800237c:	09db      	lsrs	r3, r3, #7
 800237e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002382:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002386:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800238a:	77c1      	strb	r1, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800238c:	2300      	movs	r3, #0
		c += r[i];
 800238e:	5cc1      	ldrb	r1, [r0, r3]
 8002390:	440a      	add	r2, r1
		r[i] = c;
 8002392:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002394:	3301      	adds	r3, #1
 8002396:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002398:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800239c:	d1f7      	bne.n	800238e <f25519_mul__distinct+0x72>
		c += r[i];
		r[i] = c;
		c >>= 8;
	}
}
 800239e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80023a2:	4770      	bx	lr

080023a4 <f25519_inv__distinct>:
		c >>= 8;
	}
}

void f25519_inv__distinct(uint8_t *r, const uint8_t *x)
{
 80023a4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80023a8:	2600      	movs	r6, #0
		c >>= 8;
	}
}

void f25519_inv__distinct(uint8_t *r, const uint8_t *x)
{
 80023aa:	b088      	sub	sp, #32
	}
}

void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
 80023ac:	4633      	mov	r3, r6
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80023ae:	f04f 0826 	mov.w	r8, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	1874      	adds	r4, r6, r1
		for (j = 0; j <= i; j++)
 80023b6:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80023b8:	5c8f      	ldrb	r7, [r1, r2]
 80023ba:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80023be:	3201      	adds	r2, #1
 80023c0:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80023c2:	fb07 3305 	mla	r3, r7, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80023c6:	ddf7      	ble.n	80023b8 <f25519_inv__distinct+0x14>
 80023c8:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
 80023cc:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80023ce:	2a20      	cmp	r2, #32
 80023d0:	d00e      	beq.n	80023f0 <f25519_inv__distinct+0x4c>
 80023d2:	1b35      	subs	r5, r6, r4
 80023d4:	3520      	adds	r5, #32
 80023d6:	440d      	add	r5, r1
 80023d8:	440c      	add	r4, r1
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80023da:	f815 7d01 	ldrb.w	r7, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80023de:	f814 cf01 	ldrb.w	ip, [r4, #1]!
 80023e2:	fb08 f707 	mul.w	r7, r8, r7

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80023e6:	3201      	adds	r2, #1
 80023e8:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 80023ea:	fb0c 3307 	mla	r3, ip, r7, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80023ee:	d1f4      	bne.n	80023da <f25519_inv__distinct+0x36>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80023f0:	f80d 3006 	strb.w	r3, [sp, r6]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80023f4:	3601      	adds	r6, #1
 80023f6:	2e20      	cmp	r6, #32
 80023f8:	d1db      	bne.n	80023b2 <f25519_inv__distinct+0xe>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80023fa:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 80023fe:	09db      	lsrs	r3, r3, #7
 8002400:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002404:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002408:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800240c:	f88d 401f 	strb.w	r4, [sp, #31]
 8002410:	af08      	add	r7, sp, #32
	c = (c >> 7) * 19;
 8002412:	466b      	mov	r3, sp

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002414:	781c      	ldrb	r4, [r3, #0]
 8002416:	4422      	add	r2, r4
		r[i] = c;
 8002418:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800241c:	42bb      	cmp	r3, r7
		c += r[i];
		r[i] = c;
		c >>= 8;
 800241e:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002422:	d1f7      	bne.n	8002414 <f25519_inv__distinct+0x70>
 8002424:	2500      	movs	r5, #0
 8002426:	eb0d 0205 	add.w	r2, sp, r5
 800242a:	462b      	mov	r3, r5
 800242c:	f102 091f 	add.w	r9, r2, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002430:	f04f 0826 	mov.w	r8, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	194c      	adds	r4, r1, r5
		for (j = 0; j <= i; j++)
 8002438:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800243a:	f81d c002 	ldrb.w	ip, [sp, r2]
 800243e:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002442:	3201      	adds	r2, #1
 8002444:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002446:	fb0c 3306 	mla	r3, ip, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800244a:	ddf6      	ble.n	800243a <f25519_inv__distinct+0x96>
 800244c:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002450:	2a1f      	cmp	r2, #31
 8002452:	d00e      	beq.n	8002472 <f25519_inv__distinct+0xce>
 8002454:	1aac      	subs	r4, r5, r2
 8002456:	3420      	adds	r4, #32
 8002458:	ae00      	add	r6, sp, #0
 800245a:	440c      	add	r4, r1
 800245c:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 800245e:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002462:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 8002466:	fb08 f606 	mul.w	r6, r8, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800246a:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) *
 800246c:	fb0c 3306 	mla	r3, ip, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002470:	d1f5      	bne.n	800245e <f25519_inv__distinct+0xba>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002472:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002474:	3501      	adds	r5, #1
 8002476:	2d20      	cmp	r5, #32
 8002478:	d1dc      	bne.n	8002434 <f25519_inv__distinct+0x90>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800247a:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 800247c:	09db      	lsrs	r3, r3, #7
 800247e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002482:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002486:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800248a:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800248c:	2300      	movs	r3, #0
		c += r[i];
 800248e:	5cc4      	ldrb	r4, [r0, r3]
 8002490:	4422      	add	r2, r4
		r[i] = c;
 8002492:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002494:	3301      	adds	r3, #1
 8002496:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002498:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800249c:	d1f7      	bne.n	800248e <f25519_inv__distinct+0xea>
 800249e:	f04f 0cf8 	mov.w	ip, #248	; 0xf8
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80024a2:	2526      	movs	r5, #38	; 0x26
 80024a4:	f10d 061f 	add.w	r6, sp, #31
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80024a8:	f04f 0900 	mov.w	r9, #0
 80024ac:	464b      	mov	r3, r9
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	eb09 0400 	add.w	r4, r9, r0
		for (j = 0; j <= i; j++)
 80024b4:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80024b6:	f810 a002 	ldrb.w	sl, [r0, r2]
 80024ba:	f814 8901 	ldrb.w	r8, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80024be:	3201      	adds	r2, #1
 80024c0:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80024c2:	fb0a 3308 	mla	r3, sl, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80024c6:	ddf6      	ble.n	80024b6 <f25519_inv__distinct+0x112>
 80024c8:	ea29 74e9 	bic.w	r4, r9, r9, asr #31
 80024cc:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80024ce:	2a20      	cmp	r2, #32
 80024d0:	d010      	beq.n	80024f4 <f25519_inv__distinct+0x150>
 80024d2:	ebc4 0809 	rsb	r8, r4, r9
 80024d6:	f108 0820 	add.w	r8, r8, #32
 80024da:	4480      	add	r8, r0
 80024dc:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80024de:	f818 ad01 	ldrb.w	sl, [r8, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80024e2:	f814 bf01 	ldrb.w	fp, [r4, #1]!
 80024e6:	fb05 fa0a 	mul.w	sl, r5, sl

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80024ea:	3201      	adds	r2, #1
 80024ec:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 80024ee:	fb0b 330a 	mla	r3, fp, sl, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80024f2:	d1f4      	bne.n	80024de <f25519_inv__distinct+0x13a>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80024f4:	f80d 3009 	strb.w	r3, [sp, r9]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80024f8:	f109 0901 	add.w	r9, r9, #1
 80024fc:	f1b9 0f20 	cmp.w	r9, #32
 8002500:	d1d5      	bne.n	80024ae <f25519_inv__distinct+0x10a>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002502:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002506:	09db      	lsrs	r3, r3, #7
 8002508:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800250c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002510:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002514:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002518:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 800251a:	781c      	ldrb	r4, [r3, #0]
 800251c:	4422      	add	r2, r4
		r[i] = c;
 800251e:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002522:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002524:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002528:	d1f7      	bne.n	800251a <f25519_inv__distinct+0x176>
 800252a:	f04f 0900 	mov.w	r9, #0
 800252e:	464b      	mov	r3, r9
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	eb01 0409 	add.w	r4, r1, r9
		for (j = 0; j <= i; j++)
 8002536:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002538:	f81d a002 	ldrb.w	sl, [sp, r2]
 800253c:	f814 8901 	ldrb.w	r8, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002540:	3201      	adds	r2, #1
 8002542:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002544:	fb0a 3308 	mla	r3, sl, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002548:	ddf6      	ble.n	8002538 <f25519_inv__distinct+0x194>
 800254a:	ea29 72e9 	bic.w	r2, r9, r9, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800254e:	2a1f      	cmp	r2, #31
 8002550:	d010      	beq.n	8002574 <f25519_inv__distinct+0x1d0>
 8002552:	ebc2 0409 	rsb	r4, r2, r9
 8002556:	3420      	adds	r4, #32
 8002558:	f10d 0800 	add.w	r8, sp, #0
 800255c:	440c      	add	r4, r1
 800255e:	4442      	add	r2, r8
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002560:	f814 8d01 	ldrb.w	r8, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002564:	f812 af01 	ldrb.w	sl, [r2, #1]!
 8002568:	fb05 f808 	mul.w	r8, r5, r8

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800256c:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) *
 800256e:	fb0a 3308 	mla	r3, sl, r8, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002572:	d1f5      	bne.n	8002560 <f25519_inv__distinct+0x1bc>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002574:	f800 3009 	strb.w	r3, [r0, r9]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002578:	f109 0901 	add.w	r9, r9, #1
 800257c:	f1b9 0f20 	cmp.w	r9, #32
 8002580:	d1d6      	bne.n	8002530 <f25519_inv__distinct+0x18c>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002582:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 8002584:	09db      	lsrs	r3, r3, #7
 8002586:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800258a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 800258e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002592:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002594:	2300      	movs	r3, #0
		c += r[i];
 8002596:	5cc4      	ldrb	r4, [r0, r3]
 8002598:	4422      	add	r2, r4
		r[i] = c;
 800259a:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800259c:	3301      	adds	r3, #1
 800259e:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 80025a0:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80025a4:	d1f7      	bne.n	8002596 <f25519_inv__distinct+0x1f2>
	/* 1 1 */
	f25519_mul__distinct(s, x, x);
	f25519_mul__distinct(r, s, x);

	/* 1 x 248 */
	for (i = 0; i < 248; i++) {
 80025a6:	f1bc 0c01 	subs.w	ip, ip, #1
 80025aa:	f47f af7d 	bne.w	80024a8 <f25519_inv__distinct+0x104>
 80025ae:	4663      	mov	r3, ip
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80025b0:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	eb00 040c 	add.w	r4, r0, ip
		for (j = 0; j <= i; j++)
 80025ba:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80025bc:	5c86      	ldrb	r6, [r0, r2]
 80025be:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80025c2:	3201      	adds	r2, #1
 80025c4:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80025c6:	fb06 3305 	mla	r3, r6, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80025ca:	ddf7      	ble.n	80025bc <f25519_inv__distinct+0x218>
 80025cc:	ea2c 74ec 	bic.w	r4, ip, ip, asr #31
 80025d0:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80025d2:	2a20      	cmp	r2, #32
 80025d4:	d00f      	beq.n	80025f6 <f25519_inv__distinct+0x252>
 80025d6:	ebc4 050c 	rsb	r5, r4, ip
 80025da:	3520      	adds	r5, #32
 80025dc:	4405      	add	r5, r0
 80025de:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80025e0:	f815 6d01 	ldrb.w	r6, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80025e4:	f814 8f01 	ldrb.w	r8, [r4, #1]!
 80025e8:	fb09 f606 	mul.w	r6, r9, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80025ec:	3201      	adds	r2, #1
 80025ee:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 80025f0:	fb08 3306 	mla	r3, r8, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80025f4:	d1f4      	bne.n	80025e0 <f25519_inv__distinct+0x23c>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80025f6:	f80d 300c 	strb.w	r3, [sp, ip]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80025fa:	f10c 0c01 	add.w	ip, ip, #1
 80025fe:	f1bc 0f20 	cmp.w	ip, #32
 8002602:	d1d7      	bne.n	80025b4 <f25519_inv__distinct+0x210>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002604:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002608:	09db      	lsrs	r3, r3, #7
 800260a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800260e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002612:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002616:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 800261a:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 800261c:	781c      	ldrb	r4, [r3, #0]
 800261e:	4422      	add	r2, r4
		r[i] = c;
 8002620:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002624:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002626:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800262a:	d1f7      	bne.n	800261c <f25519_inv__distinct+0x278>
 800262c:	2500      	movs	r5, #0
 800262e:	eb0d 0205 	add.w	r2, sp, r5
 8002632:	462b      	mov	r3, r5
 8002634:	f102 091f 	add.w	r9, r2, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002638:	f04f 0826 	mov.w	r8, #38	; 0x26
 800263c:	ac00      	add	r4, sp, #0
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	442c      	add	r4, r5
		for (j = 0; j <= i; j++)
 8002642:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002644:	f81d c002 	ldrb.w	ip, [sp, r2]
 8002648:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800264c:	3201      	adds	r2, #1
 800264e:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002650:	fb0c 3306 	mla	r3, ip, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002654:	ddf6      	ble.n	8002644 <f25519_inv__distinct+0x2a0>
 8002656:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800265a:	2a1f      	cmp	r2, #31
 800265c:	d00e      	beq.n	800267c <f25519_inv__distinct+0x2d8>
 800265e:	1aac      	subs	r4, r5, r2
 8002660:	ae00      	add	r6, sp, #0
 8002662:	3420      	adds	r4, #32
 8002664:	4434      	add	r4, r6
 8002666:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002668:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 800266c:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 8002670:	fb08 f606 	mul.w	r6, r8, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002674:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) *
 8002676:	fb0c 3306 	mla	r3, ip, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800267a:	d1f5      	bne.n	8002668 <f25519_inv__distinct+0x2c4>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 800267c:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 800267e:	3501      	adds	r5, #1
 8002680:	2d20      	cmp	r5, #32
 8002682:	d1db      	bne.n	800263c <f25519_inv__distinct+0x298>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002684:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 8002686:	09db      	lsrs	r3, r3, #7
 8002688:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800268c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002690:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002694:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002696:	2300      	movs	r3, #0
		c += r[i];
 8002698:	5cc4      	ldrb	r4, [r0, r3]
 800269a:	4422      	add	r2, r4
		r[i] = c;
 800269c:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800269e:	3301      	adds	r3, #1
 80026a0:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 80026a2:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80026a6:	d1f7      	bne.n	8002698 <f25519_inv__distinct+0x2f4>
 80026a8:	2600      	movs	r6, #0
 80026aa:	4633      	mov	r3, r6
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80026ac:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	198c      	adds	r4, r1, r6
		for (j = 0; j <= i; j++)
 80026b4:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80026b6:	f810 c002 	ldrb.w	ip, [r0, r2]
 80026ba:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80026be:	3201      	adds	r2, #1
 80026c0:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80026c2:	fb0c 3305 	mla	r3, ip, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80026c6:	ddf6      	ble.n	80026b6 <f25519_inv__distinct+0x312>
 80026c8:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
 80026cc:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80026ce:	2a20      	cmp	r2, #32
 80026d0:	d00e      	beq.n	80026f0 <f25519_inv__distinct+0x34c>
 80026d2:	1b35      	subs	r5, r6, r4
 80026d4:	3520      	adds	r5, #32
 80026d6:	440d      	add	r5, r1
 80026d8:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80026da:	f815 cd01 	ldrb.w	ip, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80026de:	f814 8f01 	ldrb.w	r8, [r4, #1]!
 80026e2:	fb09 fc0c 	mul.w	ip, r9, ip

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80026e6:	3201      	adds	r2, #1
 80026e8:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 80026ea:	fb08 330c 	mla	r3, r8, ip, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80026ee:	d1f4      	bne.n	80026da <f25519_inv__distinct+0x336>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80026f0:	f80d 3006 	strb.w	r3, [sp, r6]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80026f4:	3601      	adds	r6, #1
 80026f6:	2e20      	cmp	r6, #32
 80026f8:	d1da      	bne.n	80026b0 <f25519_inv__distinct+0x30c>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80026fa:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 80026fe:	09db      	lsrs	r3, r3, #7
 8002700:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002704:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002708:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800270c:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002710:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002712:	781c      	ldrb	r4, [r3, #0]
 8002714:	4422      	add	r2, r4
		r[i] = c;
 8002716:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800271a:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 800271c:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002720:	d1f7      	bne.n	8002712 <f25519_inv__distinct+0x36e>
 8002722:	2500      	movs	r5, #0
 8002724:	eb0d 0805 	add.w	r8, sp, r5
 8002728:	f108 091f 	add.w	r9, r8, #31
 800272c:	462b      	mov	r3, r5
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 800272e:	f04f 0826 	mov.w	r8, #38	; 0x26
 8002732:	ac00      	add	r4, sp, #0
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	442c      	add	r4, r5
		for (j = 0; j <= i; j++)
 8002738:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800273a:	f81d c002 	ldrb.w	ip, [sp, r2]
 800273e:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002742:	3201      	adds	r2, #1
 8002744:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002746:	fb0c 3306 	mla	r3, ip, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800274a:	ddf6      	ble.n	800273a <f25519_inv__distinct+0x396>
 800274c:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002750:	2a1f      	cmp	r2, #31
 8002752:	d00e      	beq.n	8002772 <f25519_inv__distinct+0x3ce>
 8002754:	1aac      	subs	r4, r5, r2
 8002756:	ae00      	add	r6, sp, #0
 8002758:	3420      	adds	r4, #32
 800275a:	4434      	add	r4, r6
 800275c:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 800275e:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002762:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 8002766:	fb08 f606 	mul.w	r6, r8, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800276a:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) *
 800276c:	fb0c 3306 	mla	r3, ip, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002770:	d1f5      	bne.n	800275e <f25519_inv__distinct+0x3ba>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002772:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002774:	3501      	adds	r5, #1
 8002776:	2d20      	cmp	r5, #32
 8002778:	d1db      	bne.n	8002732 <f25519_inv__distinct+0x38e>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800277a:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 800277c:	09db      	lsrs	r3, r3, #7
 800277e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002782:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002786:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800278a:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800278c:	2300      	movs	r3, #0
		c += r[i];
 800278e:	5cc4      	ldrb	r4, [r0, r3]
 8002790:	4422      	add	r2, r4
		r[i] = c;
 8002792:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002794:	3301      	adds	r3, #1
 8002796:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002798:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800279c:	d1f7      	bne.n	800278e <f25519_inv__distinct+0x3ea>
 800279e:	2600      	movs	r6, #0
 80027a0:	4633      	mov	r3, r6
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80027a2:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 80027a6:	0a1b      	lsrs	r3, r3, #8
 80027a8:	1984      	adds	r4, r0, r6
		for (j = 0; j <= i; j++)
 80027aa:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80027ac:	f810 c002 	ldrb.w	ip, [r0, r2]
 80027b0:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80027b4:	3201      	adds	r2, #1
 80027b6:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80027b8:	fb0c 3305 	mla	r3, ip, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80027bc:	ddf6      	ble.n	80027ac <f25519_inv__distinct+0x408>
 80027be:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
 80027c2:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80027c4:	2a20      	cmp	r2, #32
 80027c6:	d00e      	beq.n	80027e6 <f25519_inv__distinct+0x442>
 80027c8:	1b35      	subs	r5, r6, r4
 80027ca:	3520      	adds	r5, #32
 80027cc:	4405      	add	r5, r0
 80027ce:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80027d0:	f815 cd01 	ldrb.w	ip, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80027d4:	f814 8f01 	ldrb.w	r8, [r4, #1]!
 80027d8:	fb09 fc0c 	mul.w	ip, r9, ip

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80027dc:	3201      	adds	r2, #1
 80027de:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 80027e0:	fb08 330c 	mla	r3, r8, ip, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80027e4:	d1f4      	bne.n	80027d0 <f25519_inv__distinct+0x42c>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80027e6:	f80d 3006 	strb.w	r3, [sp, r6]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80027ea:	3601      	adds	r6, #1
 80027ec:	2e20      	cmp	r6, #32
 80027ee:	d1da      	bne.n	80027a6 <f25519_inv__distinct+0x402>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80027f0:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 80027f4:	09db      	lsrs	r3, r3, #7
 80027f6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80027fa:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 80027fe:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002802:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002806:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002808:	781c      	ldrb	r4, [r3, #0]
 800280a:	4422      	add	r2, r4
		r[i] = c;
 800280c:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002810:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002812:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002816:	d1f7      	bne.n	8002808 <f25519_inv__distinct+0x464>
 8002818:	2500      	movs	r5, #0
 800281a:	eb0d 0805 	add.w	r8, sp, r5
 800281e:	f108 091f 	add.w	r9, r8, #31
 8002822:	462b      	mov	r3, r5
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002824:	f04f 0826 	mov.w	r8, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002828:	0a1b      	lsrs	r3, r3, #8
 800282a:	194c      	adds	r4, r1, r5
		for (j = 0; j <= i; j++)
 800282c:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800282e:	f81d c002 	ldrb.w	ip, [sp, r2]
 8002832:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002836:	3201      	adds	r2, #1
 8002838:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800283a:	fb0c 3306 	mla	r3, ip, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800283e:	ddf6      	ble.n	800282e <f25519_inv__distinct+0x48a>
 8002840:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002844:	2a1f      	cmp	r2, #31
 8002846:	d00e      	beq.n	8002866 <f25519_inv__distinct+0x4c2>
 8002848:	1aac      	subs	r4, r5, r2
 800284a:	3420      	adds	r4, #32
 800284c:	ae00      	add	r6, sp, #0
 800284e:	440c      	add	r4, r1
 8002850:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002852:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002856:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 800285a:	fb08 f606 	mul.w	r6, r8, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800285e:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) *
 8002860:	fb0c 3306 	mla	r3, ip, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002864:	d1f5      	bne.n	8002852 <f25519_inv__distinct+0x4ae>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002866:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002868:	3501      	adds	r5, #1
 800286a:	2d20      	cmp	r5, #32
 800286c:	d1dc      	bne.n	8002828 <f25519_inv__distinct+0x484>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800286e:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 8002870:	09db      	lsrs	r3, r3, #7
 8002872:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002876:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 800287a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800287e:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002880:	2300      	movs	r3, #0
		c += r[i];
 8002882:	5cc4      	ldrb	r4, [r0, r3]
 8002884:	4422      	add	r2, r4
		r[i] = c;
 8002886:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002888:	3301      	adds	r3, #1
 800288a:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 800288c:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002890:	d1f7      	bne.n	8002882 <f25519_inv__distinct+0x4de>
 8002892:	2600      	movs	r6, #0
 8002894:	4633      	mov	r3, r6
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002896:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	1984      	adds	r4, r0, r6
		for (j = 0; j <= i; j++)
 800289e:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80028a0:	f810 c002 	ldrb.w	ip, [r0, r2]
 80028a4:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80028a8:	3201      	adds	r2, #1
 80028aa:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80028ac:	fb0c 3305 	mla	r3, ip, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80028b0:	ddf6      	ble.n	80028a0 <f25519_inv__distinct+0x4fc>
 80028b2:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
 80028b6:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80028b8:	2a20      	cmp	r2, #32
 80028ba:	d00e      	beq.n	80028da <f25519_inv__distinct+0x536>
 80028bc:	1b35      	subs	r5, r6, r4
 80028be:	3520      	adds	r5, #32
 80028c0:	4405      	add	r5, r0
 80028c2:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80028c4:	f815 cd01 	ldrb.w	ip, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80028c8:	f814 8f01 	ldrb.w	r8, [r4, #1]!
 80028cc:	fb09 fc0c 	mul.w	ip, r9, ip

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80028d0:	3201      	adds	r2, #1
 80028d2:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 80028d4:	fb08 330c 	mla	r3, r8, ip, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80028d8:	d1f4      	bne.n	80028c4 <f25519_inv__distinct+0x520>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80028da:	f80d 3006 	strb.w	r3, [sp, r6]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80028de:	3601      	adds	r6, #1
 80028e0:	2e20      	cmp	r6, #32
 80028e2:	d1da      	bne.n	800289a <f25519_inv__distinct+0x4f6>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80028e4:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 80028e8:	09db      	lsrs	r3, r3, #7
 80028ea:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80028ee:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 80028f2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80028f6:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 80028fa:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 80028fc:	781c      	ldrb	r4, [r3, #0]
 80028fe:	4422      	add	r2, r4
		r[i] = c;
 8002900:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002904:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002906:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800290a:	d1f7      	bne.n	80028fc <f25519_inv__distinct+0x558>
 800290c:	2500      	movs	r5, #0
 800290e:	eb0d 0205 	add.w	r2, sp, r5
 8002912:	462b      	mov	r3, r5
 8002914:	f102 081f 	add.w	r8, r2, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002918:	f04f 0c26 	mov.w	ip, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	194c      	adds	r4, r1, r5
		for (j = 0; j <= i; j++)
 8002920:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002922:	f81d 7002 	ldrb.w	r7, [sp, r2]
 8002926:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800292a:	3201      	adds	r2, #1
 800292c:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800292e:	fb07 3306 	mla	r3, r7, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002932:	ddf6      	ble.n	8002922 <f25519_inv__distinct+0x57e>
 8002934:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002938:	2a1f      	cmp	r2, #31
 800293a:	d00e      	beq.n	800295a <f25519_inv__distinct+0x5b6>
 800293c:	1aac      	subs	r4, r5, r2
 800293e:	3420      	adds	r4, #32
 8002940:	ae00      	add	r6, sp, #0
 8002942:	440c      	add	r4, r1
 8002944:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002946:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 800294a:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800294e:	fb0c f606 	mul.w	r6, ip, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002952:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002954:	fb07 3306 	mla	r3, r7, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002958:	d1f5      	bne.n	8002946 <f25519_inv__distinct+0x5a2>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 800295a:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 800295c:	3501      	adds	r5, #1
 800295e:	2d20      	cmp	r5, #32
 8002960:	d1dc      	bne.n	800291c <f25519_inv__distinct+0x578>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002962:	7fc1      	ldrb	r1, [r0, #31]
	c = (c >> 7) * 19;
 8002964:	09db      	lsrs	r3, r3, #7
 8002966:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800296a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 800296e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002972:	77c1      	strb	r1, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002974:	2300      	movs	r3, #0
		c += r[i];
 8002976:	5cc1      	ldrb	r1, [r0, r3]
 8002978:	440a      	add	r2, r1
		r[i] = c;
 800297a:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800297c:	3301      	adds	r3, #1
 800297e:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002980:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002984:	d1f7      	bne.n	8002976 <f25519_inv__distinct+0x5d2>
	f25519_mul__distinct(r, s, x);

	/* 1 */
	f25519_mul__distinct(s, r, r);
	f25519_mul__distinct(r, s, x);
}
 8002986:	b008      	add	sp, #32
 8002988:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop

08002990 <f25519_sqrt>:
	f25519_mul__distinct(s, r, r);
	f25519_mul__distinct(r, s, x);
}

void f25519_sqrt(uint8_t *r, const uint8_t *a)
{
 8002990:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
void f25519_mul_c(uint8_t *r, const uint8_t *a, uint32_t b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002994:	2300      	movs	r3, #0
	f25519_mul__distinct(s, r, r);
	f25519_mul__distinct(r, s, x);
}

void f25519_sqrt(uint8_t *r, const uint8_t *a)
{
 8002996:	b0a4      	sub	sp, #144	; 0x90
 8002998:	9002      	str	r0, [sp, #8]
 800299a:	9103      	str	r1, [sp, #12]
	f25519_copy(r, tmp);
}

void f25519_mul_c(uint8_t *r, const uint8_t *a, uint32_t b)
{
	uint32_t c = 0;
 800299c:	461a      	mov	r2, r3
 800299e:	ae14      	add	r6, sp, #80	; 0x50
 80029a0:	4608      	mov	r0, r1
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		c >>= 8;
		c += b * ((uint32_t)a[i]);
 80029a2:	5cc1      	ldrb	r1, [r0, r3]
 80029a4:	0049      	lsls	r1, r1, #1
 80029a6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
		r[i] = c;
 80029aa:	54f2      	strb	r2, [r6, r3]
void f25519_mul_c(uint8_t *r, const uint8_t *a, uint32_t b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80029ac:	3301      	adds	r3, #1
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d1f7      	bne.n	80029a2 <f25519_sqrt+0x12>
		c >>= 8;
		c += b * ((uint32_t)a[i]);
		r[i] = c;
	}

	r[31] &= 127;
 80029b2:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
	c >>= 7;
 80029b6:	09d2      	lsrs	r2, r2, #7
		c >>= 8;
		c += b * ((uint32_t)a[i]);
		r[i] = c;
	}

	r[31] &= 127;
 80029b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	c >>= 7;
	c *= 19;
 80029bc:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
		c >>= 8;
		c += b * ((uint32_t)a[i]);
		r[i] = c;
	}

	r[31] &= 127;
 80029c0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
	c >>= 7;
	c *= 19;
 80029c4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80029c8:	a81c      	add	r0, sp, #112	; 0x70
 80029ca:	4633      	mov	r3, r6

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 80029cc:	7819      	ldrb	r1, [r3, #0]
 80029ce:	440a      	add	r2, r1
		r[i] = c;
 80029d0:	f803 2b01 	strb.w	r2, [r3], #1

	r[31] &= 127;
	c >>= 7;
	c *= 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80029d4:	4283      	cmp	r3, r0
		c += r[i];
		r[i] = c;
		c >>= 8;
 80029d6:	ea4f 2212 	mov.w	r2, r2, lsr #8

	r[31] &= 127;
	c >>= 7;
	c *= 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80029da:	d1f7      	bne.n	80029cc <f25519_sqrt+0x3c>
 80029dc:	2400      	movs	r4, #0
 80029de:	4623      	mov	r3, r4
 80029e0:	f106 0c1f 	add.w	ip, r6, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80029e4:	2726      	movs	r7, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	1931      	adds	r1, r6, r4
		for (j = 0; j <= i; j++)
 80029ea:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80029ec:	f816 8002 	ldrb.w	r8, [r6, r2]
 80029f0:	f811 5901 	ldrb.w	r5, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80029f4:	3201      	adds	r2, #1
 80029f6:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80029f8:	fb08 3305 	mla	r3, r8, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80029fc:	ddf6      	ble.n	80029ec <f25519_sqrt+0x5c>
 80029fe:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002a02:	2a1f      	cmp	r2, #31
 8002a04:	d00d      	beq.n	8002a22 <f25519_sqrt+0x92>
 8002a06:	1aa1      	subs	r1, r4, r2
 8002a08:	3120      	adds	r1, #32
 8002a0a:	4431      	add	r1, r6
 8002a0c:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002a0e:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002a12:	f812 8f01 	ldrb.w	r8, [r2, #1]!
 8002a16:	fb07 f505 	mul.w	r5, r7, r5

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002a1a:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) *
 8002a1c:	fb08 3305 	mla	r3, r8, r5, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002a20:	d1f5      	bne.n	8002a0e <f25519_sqrt+0x7e>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002a22:	a904      	add	r1, sp, #16
 8002a24:	550b      	strb	r3, [r1, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002a26:	3401      	adds	r4, #1
 8002a28:	2c20      	cmp	r4, #32
 8002a2a:	d1dc      	bne.n	80029e6 <f25519_sqrt+0x56>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002a2c:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002a30:	09db      	lsrs	r3, r3, #7
 8002a32:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002a36:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002a3a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002a3e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8002a42:	af0c      	add	r7, sp, #48	; 0x30
	c = (c >> 7) * 19;
 8002a44:	ab04      	add	r3, sp, #16

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002a46:	7819      	ldrb	r1, [r3, #0]
 8002a48:	440a      	add	r2, r1
		r[i] = c;
 8002a4a:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002a4e:	42bb      	cmp	r3, r7
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002a50:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002a54:	d1f7      	bne.n	8002a46 <f25519_sqrt+0xb6>
 8002a56:	2400      	movs	r4, #0
 8002a58:	4623      	mov	r3, r4
 8002a5a:	f10d 0c2f 	add.w	ip, sp, #47	; 0x2f
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002a5e:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002a60:	0a1b      	lsrs	r3, r3, #8
 8002a62:	1931      	adds	r1, r6, r4
		for (j = 0; j <= i; j++)
 8002a64:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002a66:	f10d 0a10 	add.w	sl, sp, #16
 8002a6a:	f81a 9002 	ldrb.w	r9, [sl, r2]
 8002a6e:	f811 8901 	ldrb.w	r8, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002a72:	3201      	adds	r2, #1
 8002a74:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002a76:	fb09 3308 	mla	r3, r9, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002a7a:	ddf4      	ble.n	8002a66 <f25519_sqrt+0xd6>
 8002a7c:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002a80:	2a1f      	cmp	r2, #31
 8002a82:	d00d      	beq.n	8002aa0 <f25519_sqrt+0x110>
 8002a84:	1aa1      	subs	r1, r4, r2
 8002a86:	3120      	adds	r1, #32
 8002a88:	4431      	add	r1, r6
 8002a8a:	4452      	add	r2, sl
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002a8c:	f811 8d01 	ldrb.w	r8, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002a90:	f812 9f01 	ldrb.w	r9, [r2, #1]!
 8002a94:	fb05 f808 	mul.w	r8, r5, r8

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002a98:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) *
 8002a9a:	fb09 3308 	mla	r3, r9, r8, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002a9e:	d1f5      	bne.n	8002a8c <f25519_sqrt+0xfc>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002aa0:	5503      	strb	r3, [r0, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002aa2:	3401      	adds	r4, #1
 8002aa4:	2c20      	cmp	r4, #32
 8002aa6:	d1db      	bne.n	8002a60 <f25519_sqrt+0xd0>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002aa8:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002aac:	09db      	lsrs	r3, r3, #7
 8002aae:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002ab2:	f10d 0b90 	add.w	fp, sp, #144	; 0x90
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002ab6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002aba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002abe:	f88d 108f 	strb.w	r1, [sp, #143]	; 0x8f
 8002ac2:	f8cd b000 	str.w	fp, [sp]
	c = (c >> 7) * 19;
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	46dc      	mov	ip, fp

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002aca:	7819      	ldrb	r1, [r3, #0]
 8002acc:	440a      	add	r2, r1
		r[i] = c;
 8002ace:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002ad2:	4563      	cmp	r3, ip
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002ad4:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002ad8:	d1f7      	bne.n	8002aca <f25519_sqrt+0x13a>
 8002ada:	21f8      	movs	r1, #248	; 0xf8
 8002adc:	9101      	str	r1, [sp, #4]
 8002ade:	f100 051f 	add.w	r5, r0, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002ae2:	2126      	movs	r1, #38	; 0x26
 8002ae4:	f10d 042f 	add.w	r4, sp, #47	; 0x2f

		r[i] = c;
	}

	r[31] &= 127;
	c = (c >> 7) * 19;
 8002ae8:	f04f 0900 	mov.w	r9, #0
 8002aec:	464b      	mov	r3, r9
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	eb00 0809 	add.w	r8, r0, r9
		for (j = 0; j <= i; j++)
 8002af4:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002af6:	f810 b002 	ldrb.w	fp, [r0, r2]
 8002afa:	f818 a901 	ldrb.w	sl, [r8], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002afe:	3201      	adds	r2, #1
 8002b00:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002b02:	fb0b 330a 	mla	r3, fp, sl, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002b06:	ddf6      	ble.n	8002af6 <f25519_sqrt+0x166>
 8002b08:	ea29 72e9 	bic.w	r2, r9, r9, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002b0c:	2a1f      	cmp	r2, #31
 8002b0e:	d00f      	beq.n	8002b30 <f25519_sqrt+0x1a0>
 8002b10:	ebc2 0809 	rsb	r8, r2, r9
 8002b14:	f108 0820 	add.w	r8, r8, #32
 8002b18:	4480      	add	r8, r0
 8002b1a:	4402      	add	r2, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002b1c:	f818 ad01 	ldrb.w	sl, [r8, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002b20:	f812 bf01 	ldrb.w	fp, [r2, #1]!
 8002b24:	fb01 fa0a 	mul.w	sl, r1, sl

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002b28:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) *
 8002b2a:	fb0b 330a 	mla	r3, fp, sl, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002b2e:	d1f5      	bne.n	8002b1c <f25519_sqrt+0x18c>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002b30:	f10d 0810 	add.w	r8, sp, #16
 8002b34:	f808 3009 	strb.w	r3, [r8, r9]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002b38:	f109 0901 	add.w	r9, r9, #1
 8002b3c:	f1b9 0f20 	cmp.w	r9, #32
 8002b40:	d1d5      	bne.n	8002aee <f25519_sqrt+0x15e>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002b42:	f89d 802f 	ldrb.w	r8, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002b46:	09db      	lsrs	r3, r3, #7
 8002b48:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002b4c:	f008 087f 	and.w	r8, r8, #127	; 0x7f
	c = (c >> 7) * 19;
 8002b50:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002b54:	f88d 802f 	strb.w	r8, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002b58:	ab04      	add	r3, sp, #16

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002b5a:	f893 8000 	ldrb.w	r8, [r3]
 8002b5e:	4442      	add	r2, r8
		r[i] = c;
 8002b60:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002b64:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002b66:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002b6a:	d1f6      	bne.n	8002b5a <f25519_sqrt+0x1ca>
 8002b6c:	f04f 0900 	mov.w	r9, #0
 8002b70:	464b      	mov	r3, r9
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002b72:	0a1b      	lsrs	r3, r3, #8
 8002b74:	eb06 0809 	add.w	r8, r6, r9
		for (j = 0; j <= i; j++)
 8002b78:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002b7a:	f10d 0c10 	add.w	ip, sp, #16
 8002b7e:	f81c b002 	ldrb.w	fp, [ip, r2]
 8002b82:	f818 a901 	ldrb.w	sl, [r8], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002b86:	3201      	adds	r2, #1
 8002b88:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002b8a:	fb0b 330a 	mla	r3, fp, sl, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002b8e:	ddf4      	ble.n	8002b7a <f25519_sqrt+0x1ea>
 8002b90:	ea29 72e9 	bic.w	r2, r9, r9, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002b94:	2a1f      	cmp	r2, #31
 8002b96:	d00f      	beq.n	8002bb8 <f25519_sqrt+0x228>
 8002b98:	ebc2 0809 	rsb	r8, r2, r9
 8002b9c:	f108 0820 	add.w	r8, r8, #32
 8002ba0:	44b0      	add	r8, r6
 8002ba2:	4462      	add	r2, ip
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002ba4:	f818 ad01 	ldrb.w	sl, [r8, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002ba8:	f812 bf01 	ldrb.w	fp, [r2, #1]!
 8002bac:	fb01 fa0a 	mul.w	sl, r1, sl

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002bb0:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) *
 8002bb2:	fb0b 330a 	mla	r3, fp, sl, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002bb6:	d1f5      	bne.n	8002ba4 <f25519_sqrt+0x214>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002bb8:	f800 3009 	strb.w	r3, [r0, r9]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002bbc:	f109 0901 	add.w	r9, r9, #1
 8002bc0:	f1b9 0f20 	cmp.w	r9, #32
 8002bc4:	d1d5      	bne.n	8002b72 <f25519_sqrt+0x1e2>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002bc6:	f89d 808f 	ldrb.w	r8, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002bca:	09db      	lsrs	r3, r3, #7
 8002bcc:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002bd0:	f008 087f 	and.w	r8, r8, #127	; 0x7f
	c = (c >> 7) * 19;
 8002bd4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002bd8:	f88d 808f 	strb.w	r8, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002bdc:	4603      	mov	r3, r0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002bde:	f893 8000 	ldrb.w	r8, [r3]
 8002be2:	4442      	add	r2, r8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002be4:	f8dd 8000 	ldr.w	r8, [sp]
		c += r[i];
		r[i] = c;
 8002be8:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002bec:	4598      	cmp	r8, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002bee:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002bf2:	d1f4      	bne.n	8002bde <f25519_sqrt+0x24e>
	/* 1 1 */
	f25519_mul__distinct(r, x, x);
	f25519_mul__distinct(s, r, x);

	/* 1 x 248 */
	for (i = 0; i < 248; i++) {
 8002bf4:	9a01      	ldr	r2, [sp, #4]
 8002bf6:	3a01      	subs	r2, #1
 8002bf8:	9201      	str	r2, [sp, #4]
 8002bfa:	f47f af75 	bne.w	8002ae8 <f25519_sqrt+0x158>
 8002bfe:	4614      	mov	r4, r2
 8002c00:	4613      	mov	r3, r2
 8002c02:	f100 081f 	add.w	r8, r0, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002c06:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	1901      	adds	r1, r0, r4
		for (j = 0; j <= i; j++)
 8002c0c:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002c0e:	f810 a002 	ldrb.w	sl, [r0, r2]
 8002c12:	f811 9901 	ldrb.w	r9, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002c16:	3201      	adds	r2, #1
 8002c18:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002c1a:	fb0a 3309 	mla	r3, sl, r9, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002c1e:	ddf6      	ble.n	8002c0e <f25519_sqrt+0x27e>
 8002c20:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002c24:	2a1f      	cmp	r2, #31
 8002c26:	d00d      	beq.n	8002c44 <f25519_sqrt+0x2b4>
 8002c28:	1aa1      	subs	r1, r4, r2
 8002c2a:	3120      	adds	r1, #32
 8002c2c:	4401      	add	r1, r0
 8002c2e:	4402      	add	r2, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002c30:	f811 9d01 	ldrb.w	r9, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002c34:	f812 af01 	ldrb.w	sl, [r2, #1]!
 8002c38:	fb05 f909 	mul.w	r9, r5, r9

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002c3c:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002c3e:	fb0a 3309 	mla	r3, sl, r9, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002c42:	d1f5      	bne.n	8002c30 <f25519_sqrt+0x2a0>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002c44:	f10d 0a10 	add.w	sl, sp, #16
 8002c48:	f80a 3004 	strb.w	r3, [sl, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002c4c:	3401      	adds	r4, #1
 8002c4e:	2c20      	cmp	r4, #32
 8002c50:	d1da      	bne.n	8002c08 <f25519_sqrt+0x278>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002c52:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002c56:	09db      	lsrs	r3, r3, #7
 8002c58:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002c5c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002c60:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002c64:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002c68:	4653      	mov	r3, sl

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002c6a:	7819      	ldrb	r1, [r3, #0]
 8002c6c:	440a      	add	r2, r1
		r[i] = c;
 8002c6e:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002c72:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002c74:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002c78:	d1f7      	bne.n	8002c6a <f25519_sqrt+0x2da>
 8002c7a:	2400      	movs	r4, #0
 8002c7c:	4623      	mov	r3, r4
 8002c7e:	f10d 082f 	add.w	r8, sp, #47	; 0x2f
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002c82:	2526      	movs	r5, #38	; 0x26
 8002c84:	a904      	add	r1, sp, #16
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	4421      	add	r1, r4
		for (j = 0; j <= i; j++)
 8002c8a:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002c8c:	f10d 0c10 	add.w	ip, sp, #16
 8002c90:	f81c a002 	ldrb.w	sl, [ip, r2]
 8002c94:	f811 9901 	ldrb.w	r9, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002c98:	3201      	adds	r2, #1
 8002c9a:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002c9c:	fb0a 3309 	mla	r3, sl, r9, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002ca0:	ddf4      	ble.n	8002c8c <f25519_sqrt+0x2fc>
 8002ca2:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002ca6:	2a1f      	cmp	r2, #31
 8002ca8:	d00d      	beq.n	8002cc6 <f25519_sqrt+0x336>
 8002caa:	1aa1      	subs	r1, r4, r2
 8002cac:	3120      	adds	r1, #32
 8002cae:	4461      	add	r1, ip
 8002cb0:	4462      	add	r2, ip
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002cb2:	f811 9d01 	ldrb.w	r9, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002cb6:	f812 af01 	ldrb.w	sl, [r2, #1]!
 8002cba:	fb05 f909 	mul.w	r9, r5, r9

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002cbe:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002cc0:	fb0a 3309 	mla	r3, sl, r9, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002cc4:	d1f5      	bne.n	8002cb2 <f25519_sqrt+0x322>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002cc6:	5503      	strb	r3, [r0, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002cc8:	3401      	adds	r4, #1
 8002cca:	2c20      	cmp	r4, #32
 8002ccc:	d1da      	bne.n	8002c84 <f25519_sqrt+0x2f4>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002cce:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002cd2:	09db      	lsrs	r3, r3, #7
 8002cd4:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002cd8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002cdc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002ce0:	f88d 108f 	strb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002ce4:	4603      	mov	r3, r0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002ce6:	7819      	ldrb	r1, [r3, #0]
 8002ce8:	440a      	add	r2, r1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002cea:	9900      	ldr	r1, [sp, #0]
		c += r[i];
		r[i] = c;
 8002cec:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002cf0:	4299      	cmp	r1, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002cf2:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002cf6:	d1f6      	bne.n	8002ce6 <f25519_sqrt+0x356>
 8002cf8:	2400      	movs	r4, #0
 8002cfa:	4623      	mov	r3, r4
 8002cfc:	f100 081f 	add.w	r8, r0, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002d00:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	1931      	adds	r1, r6, r4
		for (j = 0; j <= i; j++)
 8002d06:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002d08:	f810 a002 	ldrb.w	sl, [r0, r2]
 8002d0c:	f811 9901 	ldrb.w	r9, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002d10:	3201      	adds	r2, #1
 8002d12:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002d14:	fb0a 3309 	mla	r3, sl, r9, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002d18:	ddf6      	ble.n	8002d08 <f25519_sqrt+0x378>
 8002d1a:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002d1e:	2a1f      	cmp	r2, #31
 8002d20:	d00d      	beq.n	8002d3e <f25519_sqrt+0x3ae>
 8002d22:	1aa1      	subs	r1, r4, r2
 8002d24:	3120      	adds	r1, #32
 8002d26:	4431      	add	r1, r6
 8002d28:	4402      	add	r2, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002d2a:	f811 9d01 	ldrb.w	r9, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002d2e:	f812 af01 	ldrb.w	sl, [r2, #1]!
 8002d32:	fb05 f909 	mul.w	r9, r5, r9

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002d36:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002d38:	fb0a 3309 	mla	r3, sl, r9, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002d3c:	d1f5      	bne.n	8002d2a <f25519_sqrt+0x39a>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002d3e:	aa04      	add	r2, sp, #16
 8002d40:	5513      	strb	r3, [r2, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002d42:	3401      	adds	r4, #1
 8002d44:	2c20      	cmp	r4, #32
 8002d46:	d1dc      	bne.n	8002d02 <f25519_sqrt+0x372>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002d48:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002d4c:	09db      	lsrs	r3, r3, #7
 8002d4e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002d52:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002d56:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002d5a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002d5e:	ab04      	add	r3, sp, #16

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002d60:	7819      	ldrb	r1, [r3, #0]
 8002d62:	440a      	add	r2, r1
		r[i] = c;
 8002d64:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002d68:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002d6a:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002d6e:	d1f7      	bne.n	8002d60 <f25519_sqrt+0x3d0>
 8002d70:	2400      	movs	r4, #0
 8002d72:	4623      	mov	r3, r4
 8002d74:	f10d 082f 	add.w	r8, sp, #47	; 0x2f
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002d78:	2526      	movs	r5, #38	; 0x26
 8002d7a:	a904      	add	r1, sp, #16
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	4421      	add	r1, r4
		for (j = 0; j <= i; j++)
 8002d80:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002d82:	f10d 0b10 	add.w	fp, sp, #16
 8002d86:	f81b a002 	ldrb.w	sl, [fp, r2]
 8002d8a:	f811 9901 	ldrb.w	r9, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002d8e:	3201      	adds	r2, #1
 8002d90:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002d92:	fb0a 3309 	mla	r3, sl, r9, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002d96:	ddf4      	ble.n	8002d82 <f25519_sqrt+0x3f2>
 8002d98:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002d9c:	2a1f      	cmp	r2, #31
 8002d9e:	d00d      	beq.n	8002dbc <f25519_sqrt+0x42c>
 8002da0:	1aa1      	subs	r1, r4, r2
 8002da2:	3120      	adds	r1, #32
 8002da4:	4459      	add	r1, fp
 8002da6:	445a      	add	r2, fp
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002da8:	f811 9d01 	ldrb.w	r9, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002dac:	f812 af01 	ldrb.w	sl, [r2, #1]!
 8002db0:	fb05 f909 	mul.w	r9, r5, r9

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002db4:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002db6:	fb0a 3309 	mla	r3, sl, r9, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002dba:	d1f5      	bne.n	8002da8 <f25519_sqrt+0x418>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002dbc:	5503      	strb	r3, [r0, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002dbe:	3401      	adds	r4, #1
 8002dc0:	2c20      	cmp	r4, #32
 8002dc2:	d1da      	bne.n	8002d7a <f25519_sqrt+0x3ea>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002dc4:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002dc8:	09db      	lsrs	r3, r3, #7
 8002dca:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002dce:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002dd2:	f8dd c000 	ldr.w	ip, [sp]
	c = (c >> 7) * 19;
 8002dd6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002dda:	f88d 108f 	strb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002dde:	4603      	mov	r3, r0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002de0:	7819      	ldrb	r1, [r3, #0]
 8002de2:	440a      	add	r2, r1
		r[i] = c;
 8002de4:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002de8:	459c      	cmp	ip, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002dea:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002dee:	d1f7      	bne.n	8002de0 <f25519_sqrt+0x450>
 8002df0:	2400      	movs	r4, #0
 8002df2:	4623      	mov	r3, r4
 8002df4:	f106 0c1f 	add.w	ip, r6, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002df8:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	1901      	adds	r1, r0, r4
		for (j = 0; j <= i; j++)
 8002dfe:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002e00:	f816 9002 	ldrb.w	r9, [r6, r2]
 8002e04:	f811 8901 	ldrb.w	r8, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002e08:	3201      	adds	r2, #1
 8002e0a:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002e0c:	fb09 3308 	mla	r3, r9, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002e10:	ddf6      	ble.n	8002e00 <f25519_sqrt+0x470>
 8002e12:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002e16:	2a1f      	cmp	r2, #31
 8002e18:	d00d      	beq.n	8002e36 <f25519_sqrt+0x4a6>
 8002e1a:	1aa1      	subs	r1, r4, r2
 8002e1c:	3120      	adds	r1, #32
 8002e1e:	4401      	add	r1, r0
 8002e20:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002e22:	f811 8d01 	ldrb.w	r8, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002e26:	f812 9f01 	ldrb.w	r9, [r2, #1]!
 8002e2a:	fb05 f808 	mul.w	r8, r5, r8

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002e2e:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) *
 8002e30:	fb09 3308 	mla	r3, r9, r8, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002e34:	d1f5      	bne.n	8002e22 <f25519_sqrt+0x492>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002e36:	553b      	strb	r3, [r7, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002e38:	3401      	adds	r4, #1
 8002e3a:	2c20      	cmp	r4, #32
 8002e3c:	d1dd      	bne.n	8002dfa <f25519_sqrt+0x46a>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002e3e:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
	c = (c >> 7) * 19;
 8002e42:	09db      	lsrs	r3, r3, #7
 8002e44:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002e48:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002e4c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002e50:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
	c = (c >> 7) * 19;
 8002e54:	463b      	mov	r3, r7

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002e56:	7819      	ldrb	r1, [r3, #0]
 8002e58:	440a      	add	r2, r1
		r[i] = c;
 8002e5a:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002e5e:	42b3      	cmp	r3, r6
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002e60:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002e64:	d1f7      	bne.n	8002e56 <f25519_sqrt+0x4c6>
 8002e66:	2300      	movs	r3, #0
void f25519_load(uint8_t *x, uint32_t c)
{
	int i;

	for (i = 0; i < sizeof(c); i++) {
		x[i] = c;
 8002e68:	2201      	movs	r2, #1
 8002e6a:	921c      	str	r2, [sp, #112]	; 0x70
 8002e6c:	931d      	str	r3, [sp, #116]	; 0x74
 8002e6e:	931e      	str	r3, [sp, #120]	; 0x78
 8002e70:	931f      	str	r3, [sp, #124]	; 0x7c
 8002e72:	9320      	str	r3, [sp, #128]	; 0x80
 8002e74:	9321      	str	r3, [sp, #132]	; 0x84
 8002e76:	9322      	str	r3, [sp, #136]	; 0x88
 8002e78:	9323      	str	r3, [sp, #140]	; 0x8c
 8002e7a:	22da      	movs	r2, #218	; 0xda
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
 8002e7c:	5cfc      	ldrb	r4, [r7, r3]
 8002e7e:	5cc1      	ldrb	r1, [r0, r3]
 8002e80:	f504 447f 	add.w	r4, r4, #65280	; 0xff00
 8002e84:	1a61      	subs	r1, r4, r1
 8002e86:	440a      	add	r2, r1
		r[i] = c;
 8002e88:	54fa      	strb	r2, [r7, r3]
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	2b1f      	cmp	r3, #31
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
 8002e8e:	ea4f 2212 	mov.w	r2, r2, lsr #8
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 8002e92:	d1f3      	bne.n	8002e7c <f25519_sqrt+0x4ec>
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
 8002e94:	f89d 404f 	ldrb.w	r4, [sp, #79]	; 0x4f
 8002e98:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
	r[31] = c & 127;
	c = (c >> 7) * 19;
 8002e9c:	463b      	mov	r3, r7
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
 8002e9e:	1a61      	subs	r1, r4, r1
 8002ea0:	4411      	add	r1, r2
	r[31] = c & 127;
	c = (c >> 7) * 19;
 8002ea2:	09ca      	lsrs	r2, r1, #7
 8002ea4:	eb02 04c2 	add.w	r4, r2, r2, lsl #3
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
 8002ea8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002eac:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
	c = (c >> 7) * 19;
 8002eb0:	eb02 0244 	add.w	r2, r2, r4, lsl #1

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002eb4:	7819      	ldrb	r1, [r3, #0]
 8002eb6:	440a      	add	r2, r1
		r[i] = c;
 8002eb8:	f803 2b01 	strb.w	r2, [r3], #1

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002ebc:	429e      	cmp	r6, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002ebe:	ea4f 2212 	mov.w	r2, r2, lsr #8

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002ec2:	d1f7      	bne.n	8002eb4 <f25519_sqrt+0x524>
 8002ec4:	2400      	movs	r4, #0
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002ec6:	f8dd 900c 	ldr.w	r9, [sp, #12]

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002eca:	4623      	mov	r3, r4
 8002ecc:	f10d 0c2f 	add.w	ip, sp, #47	; 0x2f
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002ed0:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002ed2:	0a1b      	lsrs	r3, r3, #8
 8002ed4:	eb09 0104 	add.w	r1, r9, r4
		for (j = 0; j <= i; j++)
 8002ed8:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002eda:	f10d 0b10 	add.w	fp, sp, #16
 8002ede:	f81b a002 	ldrb.w	sl, [fp, r2]
 8002ee2:	f811 8901 	ldrb.w	r8, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002ee6:	3201      	adds	r2, #1
 8002ee8:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002eea:	fb0a 3308 	mla	r3, sl, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002eee:	ddf4      	ble.n	8002eda <f25519_sqrt+0x54a>
 8002ef0:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002ef4:	2a1f      	cmp	r2, #31
 8002ef6:	d00d      	beq.n	8002f14 <f25519_sqrt+0x584>
 8002ef8:	1aa1      	subs	r1, r4, r2
 8002efa:	3120      	adds	r1, #32
 8002efc:	4449      	add	r1, r9
 8002efe:	445a      	add	r2, fp
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002f00:	f811 8d01 	ldrb.w	r8, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002f04:	f812 af01 	ldrb.w	sl, [r2, #1]!
 8002f08:	fb05 f808 	mul.w	r8, r5, r8

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f0c:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) *
 8002f0e:	fb0a 3308 	mla	r3, sl, r8, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f12:	d1f5      	bne.n	8002f00 <f25519_sqrt+0x570>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002f14:	5533      	strb	r3, [r6, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002f16:	3401      	adds	r4, #1
 8002f18:	2c20      	cmp	r4, #32
 8002f1a:	d1da      	bne.n	8002ed2 <f25519_sqrt+0x542>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002f1c:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
	c = (c >> 7) * 19;
 8002f20:	09db      	lsrs	r3, r3, #7
 8002f22:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002f26:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002f2a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002f2e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
	c = (c >> 7) * 19;
 8002f32:	4633      	mov	r3, r6

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002f34:	7819      	ldrb	r1, [r3, #0]
 8002f36:	440a      	add	r2, r1
		r[i] = c;
 8002f38:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002f3c:	4298      	cmp	r0, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002f3e:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002f42:	d1f7      	bne.n	8002f34 <f25519_sqrt+0x5a4>
 8002f44:	2000      	movs	r0, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	f106 081f 	add.w	r8, r6, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002f4c:	f04f 0c26 	mov.w	ip, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002f50:	0a1b      	lsrs	r3, r3, #8
 8002f52:	1839      	adds	r1, r7, r0
		for (j = 0; j <= i; j++)
 8002f54:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002f56:	5cb5      	ldrb	r5, [r6, r2]
 8002f58:	f811 4901 	ldrb.w	r4, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002f5c:	3201      	adds	r2, #1
 8002f5e:	4282      	cmp	r2, r0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002f60:	fb05 3304 	mla	r3, r5, r4, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002f64:	ddf7      	ble.n	8002f56 <f25519_sqrt+0x5c6>
 8002f66:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	d00d      	beq.n	8002f8a <f25519_sqrt+0x5fa>
 8002f6e:	1a81      	subs	r1, r0, r2
 8002f70:	3120      	adds	r1, #32
 8002f72:	4439      	add	r1, r7
 8002f74:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002f76:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002f7a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8002f7e:	fb0c f404 	mul.w	r4, ip, r4

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f82:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002f84:	fb05 3304 	mla	r3, r5, r4, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f88:	d1f5      	bne.n	8002f76 <f25519_sqrt+0x5e6>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002f8a:	9a02      	ldr	r2, [sp, #8]
 8002f8c:	5413      	strb	r3, [r2, r0]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002f8e:	3001      	adds	r0, #1
 8002f90:	2820      	cmp	r0, #32
 8002f92:	d1dd      	bne.n	8002f50 <f25519_sqrt+0x5c0>

		r[i] = c;
	}

	r[31] &= 127;
	c = (c >> 7) * 19;
 8002f94:	09db      	lsrs	r3, r3, #7
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002f96:	7fd1      	ldrb	r1, [r2, #31]
	c = (c >> 7) * 19;
 8002f98:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002f9c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002fa0:	9b02      	ldr	r3, [sp, #8]
 8002fa2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002fa6:	77d9      	strb	r1, [r3, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002fa8:	9902      	ldr	r1, [sp, #8]
 8002faa:	2300      	movs	r3, #0
		c += r[i];
 8002fac:	5cc8      	ldrb	r0, [r1, r3]
 8002fae:	4402      	add	r2, r0
		r[i] = c;
 8002fb0:	54ca      	strb	r2, [r1, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002fb6:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002fba:	d1f7      	bne.n	8002fac <f25519_sqrt+0x61c>
	f25519_sub(i, i, y);

	/* r = avi */
	f25519_mul__distinct(x, v, a);
	f25519_mul__distinct(r, x, i);
}
 8002fbc:	b024      	add	sp, #144	; 0x90
 8002fbe:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002fc2:	4770      	bx	lr

08002fc4 <fprime_from_bytes>:
}

void fprime_from_bytes(uint8_t *n,
		       const uint8_t *x, size_t len,
		       const uint8_t *modulus)
{
 8002fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fc8:	4691      	mov	r9, r2
 8002fca:	b08b      	sub	sp, #44	; 0x2c
 8002fcc:	4604      	mov	r4, r0
 8002fce:	460f      	mov	r7, r1
 8002fd0:	461d      	mov	r5, r3
static int prime_msb(const uint8_t *p)
{
	int i;
	uint8_t x;

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
 8002fd2:	221f      	movs	r2, #31
 8002fd4:	e003      	b.n	8002fde <fprime_from_bytes+0x1a>
 8002fd6:	f112 32ff 	adds.w	r2, r2, #4294967295
 8002fda:	f0c0 80b3 	bcc.w	8003144 <fprime_from_bytes+0x180>
		if (p[i])
 8002fde:	5cab      	ldrb	r3, [r5, r2]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f8      	beq.n	8002fd6 <fprime_from_bytes+0x12>
			break;

	x = p[i];
	i <<= 3;
 8002fe4:	00d2      	lsls	r2, r2, #3

	while (x) {
 8002fe6:	085b      	lsrs	r3, r3, #1
		x >>= 1;
		i++;
 8002fe8:	f102 0201 	add.w	r2, r2, #1
			break;

	x = p[i];
	i <<= 3;

	while (x) {
 8002fec:	d1fb      	bne.n	8002fe6 <fprime_from_bytes+0x22>
 8002fee:	3a02      	subs	r2, #2

void fprime_from_bytes(uint8_t *n,
		       const uint8_t *x, size_t len,
		       const uint8_t *modulus)
{
	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
 8002ff0:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
		x[i] = 0;
}

static inline int min_int(int a, int b)
{
	return a < b ? a : b;
 8002ff4:	4552      	cmp	r2, sl
 8002ff6:	bfb4      	ite	lt
 8002ff8:	4616      	movlt	r6, r2
 8002ffa:	4656      	movge	r6, sl
void fprime_from_bytes(uint8_t *n,
		       const uint8_t *x, size_t len,
		       const uint8_t *modulus)
{
	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
	const int preload_bytes = preload_total >> 3;
 8002ffc:	ea4f 08e6 	mov.w	r8, r6, asr #3
	const int preload_bits = preload_total & 7;
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);
 8003000:	4620      	mov	r0, r4
 8003002:	2100      	movs	r1, #0
 8003004:	2220      	movs	r2, #32
 8003006:	f003 fc26 	bl	8006856 <memset>

	for (i = 0; i < preload_bytes; i++)
 800300a:	f1b8 0f00 	cmp.w	r8, #0
		       const uint8_t *modulus)
{
	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
	const int preload_bytes = preload_total >> 3;
	const int preload_bits = preload_total & 7;
	const int rbits = (len << 3) - preload_total;
 800300e:	ebc6 0a0a 	rsb	sl, r6, sl
		       const uint8_t *x, size_t len,
		       const uint8_t *modulus)
{
	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
	const int preload_bytes = preload_total >> 3;
	const int preload_bits = preload_total & 7;
 8003012:	f006 0607 	and.w	r6, r6, #7
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 8003016:	dd42      	ble.n	800309e <fprime_from_bytes+0xda>
 8003018:	ebc8 0c09 	rsb	ip, r8, r9
 800301c:	eb07 030c 	add.w	r3, r7, ip
 8003020:	1d22      	adds	r2, r4, #4
 8003022:	1d19      	adds	r1, r3, #4
 8003024:	4293      	cmp	r3, r2
 8003026:	bf38      	it	cc
 8003028:	428c      	cmpcc	r4, r1
 800302a:	bf34      	ite	cc
 800302c:	2200      	movcc	r2, #0
 800302e:	2201      	movcs	r2, #1
 8003030:	f1b8 0f09 	cmp.w	r8, #9
 8003034:	bf94      	ite	ls
 8003036:	2200      	movls	r2, #0
 8003038:	f002 0201 	andhi.w	r2, r2, #1
 800303c:	2a00      	cmp	r2, #0
 800303e:	f000 8087 	beq.w	8003150 <fprime_from_bytes+0x18c>
 8003042:	ea43 0204 	orr.w	r2, r3, r4
 8003046:	0792      	lsls	r2, r2, #30
 8003048:	f040 8082 	bne.w	8003150 <fprime_from_bytes+0x18c>
 800304c:	ea4f 0298 	mov.w	r2, r8, lsr #2
 8003050:	2100      	movs	r1, #0
 8003052:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8003056:	4608      	mov	r0, r1
 8003058:	9501      	str	r5, [sp, #4]
		n[i] = x[len - preload_bytes + i];
 800305a:	585d      	ldr	r5, [r3, r1]
 800305c:	3001      	adds	r0, #1
 800305e:	4282      	cmp	r2, r0
 8003060:	5065      	str	r5, [r4, r1]
 8003062:	f101 0104 	add.w	r1, r1, #4
 8003066:	d8f8      	bhi.n	800305a <fprime_from_bytes+0x96>
 8003068:	45c3      	cmp	fp, r8
 800306a:	9d01      	ldr	r5, [sp, #4]
 800306c:	d017      	beq.n	800309e <fprime_from_bytes+0xda>
 800306e:	eb07 030b 	add.w	r3, r7, fp
 8003072:	f813 100c 	ldrb.w	r1, [r3, ip]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 8003076:	f10b 0301 	add.w	r3, fp, #1
 800307a:	4598      	cmp	r8, r3
		n[i] = x[len - preload_bytes + i];
 800307c:	f804 1022 	strb.w	r1, [r4, r2, lsl #2]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 8003080:	dd0d      	ble.n	800309e <fprime_from_bytes+0xda>
		n[i] = x[len - preload_bytes + i];
 8003082:	18fa      	adds	r2, r7, r3
 8003084:	f812 200c 	ldrb.w	r2, [r2, ip]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 8003088:	f10b 0b02 	add.w	fp, fp, #2
 800308c:	45d8      	cmp	r8, fp
		n[i] = x[len - preload_bytes + i];
 800308e:	54e2      	strb	r2, [r4, r3]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 8003090:	dd05      	ble.n	800309e <fprime_from_bytes+0xda>
		n[i] = x[len - preload_bytes + i];
 8003092:	eb07 030b 	add.w	r3, r7, fp
 8003096:	f813 300c 	ldrb.w	r3, [r3, ip]
 800309a:	f804 300b 	strb.w	r3, [r4, fp]

	if (preload_bits) {
 800309e:	b1be      	cbz	r6, 80030d0 <fprime_from_bytes+0x10c>
 80030a0:	2200      	movs	r2, #0
 80030a2:	4613      	mov	r3, r2
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c |= ((uint16_t)x[i]) << n;
 80030a4:	5ce1      	ldrb	r1, [r4, r3]
 80030a6:	40b1      	lsls	r1, r6
 80030a8:	430a      	orrs	r2, r1
 80030aa:	b292      	uxth	r2, r2
		x[i] = c;
 80030ac:	54e2      	strb	r2, [r4, r3]
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80030ae:	3301      	adds	r3, #1
 80030b0:	2b20      	cmp	r3, #32
		c |= ((uint16_t)x[i]) << n;
		x[i] = c;
		c >>= 8;
 80030b2:	ea4f 2212 	mov.w	r2, r2, lsr #8
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80030b6:	d1f5      	bne.n	80030a4 <fprime_from_bytes+0xe0>
	for (i = 0; i < preload_bytes; i++)
		n[i] = x[len - preload_bytes + i];

	if (preload_bits) {
		shift_n_bits(n, preload_bits);
		n[0] |= x[len - preload_bytes - 1] >> (8 - preload_bits);
 80030b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80030bc:	ebc8 0809 	rsb	r8, r8, r9
 80030c0:	f817 2008 	ldrb.w	r2, [r7, r8]
 80030c4:	f1c6 0608 	rsb	r6, r6, #8
 80030c8:	4132      	asrs	r2, r6
 80030ca:	7823      	ldrb	r3, [r4, #0]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	7023      	strb	r3, [r4, #0]
	}

	for (i = rbits - 1; i >= 0; i--) {
 80030d0:	f1ba 0a01 	subs.w	sl, sl, #1
 80030d4:	d433      	bmi.n	800313e <fprime_from_bytes+0x17a>
		const uint8_t bit = (x[i >> 3] >> (i & 7)) & 1;
 80030d6:	ea4f 03ea 	mov.w	r3, sl, asr #3
 80030da:	5cf8      	ldrb	r0, [r7, r3]
 80030dc:	f00a 0307 	and.w	r3, sl, #7
 80030e0:	4118      	asrs	r0, r3
}

/* Warning: this function may be variable-time in the argument n */
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
 80030e2:	2200      	movs	r2, #0
		shift_n_bits(n, preload_bits);
		n[0] |= x[len - preload_bytes - 1] >> (8 - preload_bits);
	}

	for (i = rbits - 1; i >= 0; i--) {
		const uint8_t bit = (x[i >> 3] >> (i & 7)) & 1;
 80030e4:	f000 0001 	and.w	r0, r0, #1
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80030e8:	4613      	mov	r3, r2
		c |= ((uint16_t)x[i]) << n;
 80030ea:	5ce1      	ldrb	r1, [r4, r3]
 80030ec:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
		x[i] = c;
 80030f0:	54e2      	strb	r2, [r4, r3]
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80030f2:	3301      	adds	r3, #1
 80030f4:	2b20      	cmp	r3, #32
		c |= ((uint16_t)x[i]) << n;
		x[i] = c;
		c >>= 8;
 80030f6:	ea4f 2212 	mov.w	r2, r2, lsr #8
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80030fa:	d1f6      	bne.n	80030ea <fprime_from_bytes+0x126>

	for (i = rbits - 1; i >= 0; i--) {
		const uint8_t bit = (x[i >> 3] >> (i & 7)) & 1;

		shift_n_bits(n, 1);
		n[0] |= bit;
 80030fc:	7823      	ldrb	r3, [r4, #0]
}

static void raw_try_sub(uint8_t *x, const uint8_t *p)
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
 80030fe:	2200      	movs	r2, #0

	for (i = rbits - 1; i >= 0; i--) {
		const uint8_t bit = (x[i >> 3] >> (i & 7)) & 1;

		shift_n_bits(n, 1);
		n[0] |= bit;
 8003100:	4303      	orrs	r3, r0
 8003102:	7023      	strb	r3, [r4, #0]
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003104:	4613      	mov	r3, r2
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
 8003106:	5ce0      	ldrb	r0, [r4, r3]
 8003108:	5ce9      	ldrb	r1, [r5, r3]
 800310a:	1a41      	subs	r1, r0, r1
 800310c:	1a8a      	subs	r2, r1, r2
 800310e:	b292      	uxth	r2, r2
		minusp[i] = c;
 8003110:	a802      	add	r0, sp, #8
 8003112:	54c2      	strb	r2, [r0, r3]
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003114:	3301      	adds	r3, #1
 8003116:	2b20      	cmp	r3, #32
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
 8003118:	f3c2 2200 	ubfx	r2, r2, #8, #1
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 800311c:	d1f3      	bne.n	8003106 <fprime_from_bytes+0x142>

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 800311e:	4252      	negs	r2, r2
 8003120:	b2d2      	uxtb	r2, r2
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 8003122:	2300      	movs	r3, #0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 8003124:	a802      	add	r0, sp, #8
 8003126:	5cc1      	ldrb	r1, [r0, r3]
 8003128:	5ce0      	ldrb	r0, [r4, r3]
 800312a:	4048      	eors	r0, r1
 800312c:	4010      	ands	r0, r2
 800312e:	4041      	eors	r1, r0
 8003130:	54e1      	strb	r1, [r4, r3]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 8003132:	3301      	adds	r3, #1
 8003134:	2b20      	cmp	r3, #32
 8003136:	d1f5      	bne.n	8003124 <fprime_from_bytes+0x160>
	if (preload_bits) {
		shift_n_bits(n, preload_bits);
		n[0] |= x[len - preload_bytes - 1] >> (8 - preload_bits);
	}

	for (i = rbits - 1; i >= 0; i--) {
 8003138:	f11a 3aff 	adds.w	sl, sl, #4294967295
 800313c:	d2cb      	bcs.n	80030d6 <fprime_from_bytes+0x112>

		shift_n_bits(n, 1);
		n[0] |= bit;
		raw_try_sub(n, modulus);
	}
}
 800313e:	b00b      	add	sp, #44	; 0x2c
 8003140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
 8003144:	f815 3c01 	ldrb.w	r3, [r5, #-1]
	i <<= 3;

	while (x) {
 8003148:	b14b      	cbz	r3, 800315e <fprime_from_bytes+0x19a>
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
 800314a:	f06f 0207 	mvn.w	r2, #7
 800314e:	e74a      	b.n	8002fe6 <fprime_from_bytes+0x22>
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 8003150:	2200      	movs	r2, #0
		n[i] = x[len - preload_bytes + i];
 8003152:	5c99      	ldrb	r1, [r3, r2]
 8003154:	54a1      	strb	r1, [r4, r2]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 8003156:	3201      	adds	r2, #1
 8003158:	4542      	cmp	r2, r8
 800315a:	d1fa      	bne.n	8003152 <fprime_from_bytes+0x18e>
 800315c:	e79f      	b.n	800309e <fprime_from_bytes+0xda>
			break;

	x = p[i];
	i <<= 3;

	while (x) {
 800315e:	f06f 0209 	mvn.w	r2, #9
 8003162:	e745      	b.n	8002ff0 <fprime_from_bytes+0x2c>

08003164 <sha256_starts>:
    (b)[(i) + 2] = (uint8) ( (n) >>  8 );       \
    (b)[(i) + 3] = (uint8) ( (n)       );       \
}

void sha256_starts( sha256_context *ctx )
{
 8003164:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x6A09E667;
    ctx->state[1] = 0xBB67AE85;
 8003168:	f8df c048 	ldr.w	ip, [pc, #72]	; 80031b4 <sha256_starts+0x50>
void sha256_starts( sha256_context *ctx )
{
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x6A09E667;
 800316c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80031b8 <sha256_starts+0x54>
    ctx->state[1] = 0xBB67AE85;
    ctx->state[2] = 0x3C6EF372;
 8003170:	4f0a      	ldr	r7, [pc, #40]	; (800319c <sha256_starts+0x38>)
    ctx->state[3] = 0xA54FF53A;
 8003172:	4e0b      	ldr	r6, [pc, #44]	; (80031a0 <sha256_starts+0x3c>)
    ctx->state[4] = 0x510E527F;
 8003174:	4d0b      	ldr	r5, [pc, #44]	; (80031a4 <sha256_starts+0x40>)
    ctx->state[5] = 0x9B05688C;
 8003176:	4c0c      	ldr	r4, [pc, #48]	; (80031a8 <sha256_starts+0x44>)
    ctx->state[6] = 0x1F83D9AB;
 8003178:	490c      	ldr	r1, [pc, #48]	; (80031ac <sha256_starts+0x48>)
    ctx->state[7] = 0x5BE0CD19;
 800317a:	4a0d      	ldr	r2, [pc, #52]	; (80031b0 <sha256_starts+0x4c>)
    (b)[(i) + 3] = (uint8) ( (n)       );       \
}

void sha256_starts( sha256_context *ctx )
{
    ctx->total[0] = 0;
 800317c:	2300      	movs	r3, #0
    ctx->total[1] = 0;

    ctx->state[0] = 0x6A09E667;
 800317e:	f8c0 8008 	str.w	r8, [r0, #8]
    ctx->state[1] = 0xBB67AE85;
    ctx->state[2] = 0x3C6EF372;
 8003182:	6107      	str	r7, [r0, #16]
    ctx->state[3] = 0xA54FF53A;
 8003184:	6146      	str	r6, [r0, #20]
    ctx->state[4] = 0x510E527F;
 8003186:	6185      	str	r5, [r0, #24]
    ctx->state[5] = 0x9B05688C;
 8003188:	61c4      	str	r4, [r0, #28]
{
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x6A09E667;
    ctx->state[1] = 0xBB67AE85;
 800318a:	f8c0 c00c 	str.w	ip, [r0, #12]
    ctx->state[2] = 0x3C6EF372;
    ctx->state[3] = 0xA54FF53A;
    ctx->state[4] = 0x510E527F;
    ctx->state[5] = 0x9B05688C;
    ctx->state[6] = 0x1F83D9AB;
 800318e:	6201      	str	r1, [r0, #32]
    ctx->state[7] = 0x5BE0CD19;
 8003190:	6242      	str	r2, [r0, #36]	; 0x24
    (b)[(i) + 3] = (uint8) ( (n)       );       \
}

void sha256_starts( sha256_context *ctx )
{
    ctx->total[0] = 0;
 8003192:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 8003194:	6043      	str	r3, [r0, #4]
    ctx->state[3] = 0xA54FF53A;
    ctx->state[4] = 0x510E527F;
    ctx->state[5] = 0x9B05688C;
    ctx->state[6] = 0x1F83D9AB;
    ctx->state[7] = 0x5BE0CD19;
}
 8003196:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800319a:	4770      	bx	lr
 800319c:	3c6ef372 	stclcc	3, cr15, [lr], #-456	; 0xfffffe38
 80031a0:	a54ff53a 	strbge	pc, [pc, #-1338]	; 8002c6e <f25519_sqrt+0x2de>	; <UNPREDICTABLE>
 80031a4:	510e527f 	tstpl	lr, pc, ror r2
 80031a8:	9b05688c 	blls	815d3e0 <_etext+0x155d08>
 80031ac:	1f83d9ab 	svcne	0x0083d9ab
 80031b0:	5be0cd19 	blpl	783661c <__Stack_Size+0x7835e1c>
 80031b4:	bb67ae85 	bllt	99eebd0 <_etext+0x19e74f8>
 80031b8:	6a09e667 	bvs	827cb5c <_etext+0x275484>

080031bc <sha256_process>:

void sha256_process( sha256_context *ctx, uint8 data[64] )
{
 80031bc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80031c0:	b09c      	sub	sp, #112	; 0x70
 80031c2:	9019      	str	r0, [sp, #100]	; 0x64
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
 80031c4:	9a19      	ldr	r2, [sp, #100]	; 0x64

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
 80031c6:	6980      	ldr	r0, [r0, #24]
    F = ctx->state[5];
 80031c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    G = ctx->state[6];
    H = ctx->state[7];
 80031ca:	9c19      	ldr	r4, [sp, #100]	; 0x64
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
 80031cc:	9e19      	ldr	r6, [sp, #100]	; 0x64
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
 80031ce:	9004      	str	r0, [sp, #16]
    F = ctx->state[5];
    G = ctx->state[6];
 80031d0:	6a12      	ldr	r2, [r2, #32]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
 80031d2:	69db      	ldr	r3, [r3, #28]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 80031d4:	ea4f 15b0 	mov.w	r5, r0, ror #6
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
 80031d8:	9819      	ldr	r0, [sp, #100]	; 0x64
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];
 80031da:	6a64      	ldr	r4, [r4, #36]	; 0x24
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
 80031dc:	68b6      	ldr	r6, [r6, #8]
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
 80031de:	9202      	str	r2, [sp, #8]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
 80031e0:	9303      	str	r3, [sp, #12]
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
 80031e2:	68c0      	ldr	r0, [r0, #12]
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
 80031e4:	9608      	str	r6, [sp, #32]
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];
 80031e6:	9401      	str	r4, [sp, #4]

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 80031e8:	9a04      	ldr	r2, [sp, #16]
 80031ea:	9c02      	ldr	r4, [sp, #8]
 80031ec:	9e03      	ldr	r6, [sp, #12]
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
 80031ee:	9007      	str	r0, [sp, #28]
    C = ctx->state[2];
 80031f0:	9819      	ldr	r0, [sp, #100]	; 0x64
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 80031f2:	ea85 25f2 	eor.w	r5, r5, r2, ror #11
 80031f6:	4bd0      	ldr	r3, [pc, #832]	; (8003538 <sha256_process+0x37c>)
 80031f8:	ea84 0206 	eor.w	r2, r4, r6
 80031fc:	9c04      	ldr	r4, [sp, #16]
 80031fe:	9e01      	ldr	r6, [sp, #4]
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
 8003200:	6900      	ldr	r0, [r0, #16]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 8003202:	784f      	ldrb	r7, [r1, #1]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003204:	ea85 6574 	eor.w	r5, r5, r4, ror #25
 8003208:	4433      	add	r3, r6
 800320a:	4022      	ands	r2, r4
 800320c:	9e08      	ldr	r6, [sp, #32]
 800320e:	9c07      	ldr	r4, [sp, #28]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 8003210:	f891 a000 	ldrb.w	sl, [r1]
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
 8003214:	9006      	str	r0, [sp, #24]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 8003216:	f891 c003 	ldrb.w	ip, [r1, #3]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 800321a:	eb03 0805 	add.w	r8, r3, r5
 800321e:	ea44 0006 	orr.w	r0, r4, r6
 8003222:	9b02      	ldr	r3, [sp, #8]
 8003224:	9c06      	ldr	r4, [sp, #24]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 8003226:	043f      	lsls	r7, r7, #16
 8003228:	f891 9002 	ldrb.w	r9, [r1, #2]
 800322c:	ea47 670a 	orr.w	r7, r7, sl, lsl #24
 8003230:	ea47 070c 	orr.w	r7, r7, ip
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003234:	405a      	eors	r2, r3
 8003236:	4020      	ands	r0, r4
 8003238:	9b07      	ldr	r3, [sp, #28]
 800323a:	9c08      	ldr	r4, [sp, #32]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 800323c:	ea47 2909 	orr.w	r9, r7, r9, lsl #8
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003240:	ea4f 06b6 	mov.w	r6, r6, ror #2
 8003244:	ea03 0504 	and.w	r5, r3, r4
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 8003248:	f891 a005 	ldrb.w	sl, [r1, #5]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 800324c:	ea86 3674 	eor.w	r6, r6, r4, ror #13
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 8003250:	790c      	ldrb	r4, [r1, #4]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 8003252:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 8003256:	9f19      	ldr	r7, [sp, #100]	; 0x64
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003258:	9b08      	ldr	r3, [sp, #32]
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 800325a:	697f      	ldr	r7, [r7, #20]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 800325c:	4328      	orrs	r0, r5
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 800325e:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8003262:	79cd      	ldrb	r5, [r1, #7]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003264:	ea86 56b3 	eor.w	r6, r6, r3, ror #22
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 8003268:	ea4a 6a04 	orr.w	sl, sl, r4, lsl #24
 800326c:	798c      	ldrb	r4, [r1, #6]
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 800326e:	9705      	str	r7, [sp, #20]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003270:	4430      	add	r0, r6
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 8003272:	ea4a 0a05 	orr.w	sl, sl, r5
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 8003276:	9e03      	ldr	r6, [sp, #12]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003278:	4442      	add	r2, r8
 800327a:	46bc      	mov	ip, r7
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 800327c:	9f04      	ldr	r7, [sp, #16]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 800327e:	444a      	add	r2, r9
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 8003280:	ea4a 2404 	orr.w	r4, sl, r4, lsl #8
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003284:	eb00 0b02 	add.w	fp, r0, r2
 8003288:	4494      	add	ip, r2
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 800328a:	940d      	str	r4, [sp, #52]	; 0x34
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 800328c:	9d03      	ldr	r5, [sp, #12]
 800328e:	9c08      	ldr	r4, [sp, #32]
 8003290:	ea86 0207 	eor.w	r2, r6, r7
 8003294:	9802      	ldr	r0, [sp, #8]
 8003296:	ea0c 0202 	and.w	r2, ip, r2
 800329a:	4ba8      	ldr	r3, [pc, #672]	; (800353c <sha256_process+0x380>)
 800329c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 80032a0:	ea4b 0704 	orr.w	r7, fp, r4
 80032a4:	406a      	eors	r2, r5
 80032a6:	ea0b 0504 	and.w	r5, fp, r4
 80032aa:	9c07      	ldr	r4, [sp, #28]
 80032ac:	4403      	add	r3, r0
 80032ae:	ea4f 18bc 	mov.w	r8, ip, ror #6
 80032b2:	ea4f 06bb 	mov.w	r6, fp, ror #2
 80032b6:	444b      	add	r3, r9
 80032b8:	ea88 28fc 	eor.w	r8, r8, ip, ror #11
 80032bc:	4027      	ands	r7, r4
 80032be:	ea86 367b 	eor.w	r6, r6, fp, ror #13
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 80032c2:	7a48      	ldrb	r0, [r1, #9]
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 80032c4:	ea88 687c 	eor.w	r8, r8, ip, ror #25
 80032c8:	ea86 56bb 	eor.w	r6, r6, fp, ror #22
 80032cc:	4413      	add	r3, r2
 80032ce:	432f      	orrs	r7, r5
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 80032d0:	7a0c      	ldrb	r4, [r1, #8]
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 80032d2:	4443      	add	r3, r8
 80032d4:	4437      	add	r7, r6
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 80032d6:	7acd      	ldrb	r5, [r1, #11]
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 80032d8:	441f      	add	r7, r3
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 80032da:	0400      	lsls	r0, r0, #16
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 80032dc:	970b      	str	r7, [sp, #44]	; 0x2c
 80032de:	9e06      	ldr	r6, [sp, #24]
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 80032e0:	9f04      	ldr	r7, [sp, #16]
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 80032e2:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 80032e6:	7a8c      	ldrb	r4, [r1, #10]
 80032e8:	4328      	orrs	r0, r5
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 80032ea:	441e      	add	r6, r3
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 80032ec:	ea8c 0907 	eor.w	r9, ip, r7
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 80032f0:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
 80032f4:	940e      	str	r4, [sp, #56]	; 0x38
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 80032f6:	9803      	ldr	r0, [sp, #12]
 80032f8:	ea06 0909 	and.w	r9, r6, r9
 80032fc:	4a90      	ldr	r2, [pc, #576]	; (8003540 <sha256_process+0x384>)
 80032fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003300:	ea89 0907 	eor.w	r9, r9, r7
 8003304:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8003306:	4402      	add	r2, r0
 8003308:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800330c:	ea43 080b 	orr.w	r8, r3, fp
 8003310:	ea4f 04b3 	mov.w	r4, r3, ror #2
 8003314:	443a      	add	r2, r7
 8003316:	ea03 070b 	and.w	r7, r3, fp
 800331a:	9b08      	ldr	r3, [sp, #32]
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 800331c:	7b48      	ldrb	r0, [r1, #13]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 800331e:	ea4f 15b6 	mov.w	r5, r6, ror #6
 8003322:	ea08 0803 	and.w	r8, r8, r3
 8003326:	ea84 347a 	eor.w	r4, r4, sl, ror #13
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 800332a:	7b0b      	ldrb	r3, [r1, #12]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 800332c:	ea84 54ba 	eor.w	r4, r4, sl, ror #22
 8003330:	ea85 25f6 	eor.w	r5, r5, r6, ror #11
 8003334:	ea48 0807 	orr.w	r8, r8, r7
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 8003338:	0400      	lsls	r0, r0, #16
 800333a:	7bcf      	ldrb	r7, [r1, #15]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 800333c:	ea85 6576 	eor.w	r5, r5, r6, ror #25
 8003340:	444a      	add	r2, r9
 8003342:	44a0      	add	r8, r4
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 8003344:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 8003348:	7b8c      	ldrb	r4, [r1, #14]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 800334a:	442a      	add	r2, r5
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 800334c:	433b      	orrs	r3, r7
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 800334e:	9d07      	ldr	r5, [sp, #28]
 8003350:	4490      	add	r8, r2
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 8003352:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 8003356:	4415      	add	r5, r2
 8003358:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 800335c:	7c4f      	ldrb	r7, [r1, #17]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 800335e:	4879      	ldr	r0, [pc, #484]	; (8003544 <sha256_process+0x388>)
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 8003360:	940f      	str	r4, [sp, #60]	; 0x3c
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 8003362:	9a04      	ldr	r2, [sp, #16]

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 8003364:	7c0b      	ldrb	r3, [r1, #16]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 8003366:	4410      	add	r0, r2
 8003368:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 800336a:	930a      	str	r3, [sp, #40]	; 0x28
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 800336c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800336e:	ea48 0402 	orr.w	r4, r8, r2
 8003372:	ea4f 02b8 	mov.w	r2, r8, ror #2

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 8003376:	f891 8013 	ldrb.w	r8, [r1, #19]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 800337a:	4403      	add	r3, r0
 800337c:	9309      	str	r3, [sp, #36]	; 0x24

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 800337e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 8003382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003384:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8003388:	ea86 0a0c 	eor.w	sl, r6, ip
 800338c:	ea03 0008 	and.w	r0, r3, r8
 8003390:	ea05 0a0a 	and.w	sl, r5, sl
 8003394:	ea82 3273 	eor.w	r2, r2, r3, ror #13
 8003398:	9b09      	ldr	r3, [sp, #36]	; 0x24

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 800339a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 800339e:	ea04 040b 	and.w	r4, r4, fp
 80033a2:	ea8a 0a0c 	eor.w	sl, sl, ip
 80033a6:	449a      	add	sl, r3
 80033a8:	ea4f 19b5 	mov.w	r9, r5, ror #6
 80033ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033ae:	4320      	orrs	r0, r4

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80033b0:	043f      	lsls	r7, r7, #16
 80033b2:	9c10      	ldr	r4, [sp, #64]	; 0x40
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80033b4:	ea89 29f5 	eor.w	r9, r9, r5, ror #11

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80033b8:	ea47 6708 	orr.w	r7, r7, r8, lsl #24
 80033bc:	f891 8012 	ldrb.w	r8, [r1, #18]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80033c0:	ea82 52b3 	eor.w	r2, r2, r3, ror #22

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80033c4:	4327      	orrs	r7, r4
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80033c6:	ea89 6975 	eor.w	r9, r9, r5, ror #25
 80033ca:	44d1      	add	r9, sl

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80033cc:	ea47 2808 	orr.w	r8, r7, r8, lsl #8
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80033d0:	4410      	add	r0, r2
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 80033d2:	7d4f      	ldrb	r7, [r1, #21]

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 80033d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80033d6:	4b5c      	ldr	r3, [pc, #368]	; (8003548 <sha256_process+0x38c>)
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80033d8:	4448      	add	r0, r9
 80033da:	9009      	str	r0, [sp, #36]	; 0x24
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 80033dc:	9712      	str	r7, [sp, #72]	; 0x48

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80033de:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 80033e2:	4443      	add	r3, r8
 80033e4:	ea4f 07b0 	mov.w	r7, r0, ror #2
 80033e8:	ea40 0802 	orr.w	r8, r0, r2
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 80033ec:	7d08      	ldrb	r0, [r1, #20]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80033ee:	9c08      	ldr	r4, [sp, #32]
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 80033f0:	9011      	str	r0, [sp, #68]	; 0x44

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 80033f2:	4463      	add	r3, ip
 80033f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80033f6:	444c      	add	r4, r9
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 80033f8:	930a      	str	r3, [sp, #40]	; 0x28
 80033fa:	ea85 0a06 	eor.w	sl, r5, r6
 80033fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003400:	ea08 0800 	and.w	r8, r8, r0
 8003404:	ea04 0a0a 	and.w	sl, r4, sl
 8003408:	980a      	ldr	r0, [sp, #40]	; 0x28
 800340a:	ea03 0c02 	and.w	ip, r3, r2
 800340e:	ea8a 0a06 	eor.w	sl, sl, r6
 8003412:	ea87 3773 	eor.w	r7, r7, r3, ror #13
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 8003416:	9b12      	ldr	r3, [sp, #72]	; 0x48

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8003418:	ea4f 19b4 	mov.w	r9, r4, ror #6
 800341c:	4482      	add	sl, r0
 800341e:	ea48 0c0c 	orr.w	ip, r8, ip
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 8003422:	9811      	ldr	r0, [sp, #68]	; 0x44

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8003424:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8003428:	ea89 29f4 	eor.w	r9, r9, r4, ror #11
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 800342c:	041a      	lsls	r2, r3, #16
 800342e:	7dcb      	ldrb	r3, [r1, #23]

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8003430:	ea89 6974 	eor.w	r9, r9, r4, ror #25
 8003434:	ea87 57b8 	eor.w	r7, r7, r8, ror #22
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 8003438:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800343c:	f891 8016 	ldrb.w	r8, [r1, #22]

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8003440:	44ca      	add	sl, r9
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 8003442:	431a      	orrs	r2, r3

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8003444:	44bc      	add	ip, r7
 8003446:	44d4      	add	ip, sl
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 8003448:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 800344c:	4b3f      	ldr	r3, [pc, #252]	; (800354c <sha256_process+0x390>)

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 800344e:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 8003452:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    GET_UINT32( W[6],  data, 24 );
 8003456:	7e4a      	ldrb	r2, [r1, #25]
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8003458:	4443      	add	r3, r8
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 800345a:	9212      	str	r2, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 800345c:	441e      	add	r6, r3
 800345e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003462:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003464:	ea02 0803 	and.w	r8, r2, r3
 8003468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800346a:	ea4c 0907 	orr.w	r9, ip, r7
 800346e:	ea4f 0cbc 	mov.w	ip, ip, ror #2

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8003472:	eb0a 000b 	add.w	r0, sl, fp
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8003476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003478:	ea84 0b05 	eor.w	fp, r4, r5
 800347c:	ea8c 3c73 	eor.w	ip, ip, r3, ror #13
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 8003480:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003482:	7e0f      	ldrb	r7, [r1, #24]
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8003484:	ea00 0b0b 	and.w	fp, r0, fp
 8003488:	ea8b 0b05 	eor.w	fp, fp, r5
 800348c:	ea09 0902 	and.w	r9, r9, r2
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 8003490:	041a      	lsls	r2, r3, #16
 8003492:	7ecb      	ldrb	r3, [r1, #27]
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8003494:	445e      	add	r6, fp
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 8003496:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
 800349a:	f891 b01a 	ldrb.w	fp, [r1, #26]
 800349e:	ea42 0703 	orr.w	r7, r2, r3
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80034a2:	ea49 0808 	orr.w	r8, r9, r8
 80034a6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 80034aa:	ea47 2b0b 	orr.w	fp, r7, fp, lsl #8
 80034ae:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80034b2:	ea8c 5cb9 	eor.w	ip, ip, r9, ror #22
 80034b6:	ea4f 1ab0 	mov.w	sl, r0, ror #6
 80034ba:	ea8a 2af0 	eor.w	sl, sl, r0, ror #11
 80034be:	44e0      	add	r8, ip
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80034c0:	4b23      	ldr	r3, [pc, #140]	; (8003550 <sha256_process+0x394>)
 80034c2:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80034c6:	ea8a 6a70 	eor.w	sl, sl, r0, ror #25
 80034ca:	4456      	add	r6, sl
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80034cc:	4463      	add	r3, ip
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80034ce:	44b0      	add	r8, r6
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80034d0:	441d      	add	r5, r3
 80034d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80034d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 80034d6:	f891 a01d 	ldrb.w	sl, [r1, #29]
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80034da:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80034de:	ea48 0909 	orr.w	r9, r8, r9
 80034e2:	ea4f 0cb8 	mov.w	ip, r8, ror #2
 80034e6:	ea08 0803 	and.w	r8, r8, r3
 80034ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 80034ec:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80034f0:	4432      	add	r2, r6
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80034f2:	ea80 0b04 	eor.w	fp, r0, r4
 80034f6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80034f8:	ea8c 3c73 	eor.w	ip, ip, r3, ror #13
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 80034fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80034fe:	7f0f      	ldrb	r7, [r1, #28]
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003500:	ea02 0b0b 	and.w	fp, r2, fp
 8003504:	ea8b 0b04 	eor.w	fp, fp, r4
 8003508:	ea09 0906 	and.w	r9, r9, r6
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 800350c:	041e      	lsls	r6, r3, #16
 800350e:	7fcb      	ldrb	r3, [r1, #31]
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003510:	445d      	add	r5, fp
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 8003512:	ea46 6607 	orr.w	r6, r6, r7, lsl #24
 8003516:	f891 b01e 	ldrb.w	fp, [r1, #30]
 800351a:	431e      	orrs	r6, r3
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 800351c:	ea4f 1ab2 	mov.w	sl, r2, ror #6
 8003520:	ea49 0808 	orr.w	r8, r9, r8
 8003524:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 8003528:	ea46 2b0b 	orr.w	fp, r6, fp, lsl #8
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 800352c:	ea8a 2af2 	eor.w	sl, sl, r2, ror #11
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 8003530:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8003534:	e00e      	b.n	8003554 <sha256_process+0x398>
 8003536:	bf00      	nop
 8003538:	428a2f98 	addmi	r2, sl, #152, 30	; 0x260
 800353c:	71374491 			; <UNDEFINED> instruction: 0x71374491
 8003540:	b5c0fbcf 	strblt	pc, [r0, #3023]	; 0xbcf	; <UNPREDICTABLE>
 8003544:	e9b5dba5 	ldmib	r5!, {r0, r2, r5, r7, r8, r9, fp, ip, lr, pc}
 8003548:	3956c25b 	ldmdbcc	r6, {r0, r1, r3, r4, r6, r9, lr, pc}^
 800354c:	59f111f1 	ldmibpl	r1!, {r0, r4, r5, r6, r7, r8, ip}^
 8003550:	923f82a4 	eorsls	r8, pc, #164, 4	; 0x4000000a
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003554:	ea8c 5cb9 	eor.w	ip, ip, r9, ror #22
 8003558:	ea8a 6a72 	eor.w	sl, sl, r2, ror #25
 800355c:	44aa      	add	sl, r5
 800355e:	44e0      	add	r8, ip
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 8003560:	4de9      	ldr	r5, [pc, #932]	; (8003908 <sha256_process+0x74c>)
 8003562:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 8003568:	4465      	add	r5, ip
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 800356a:	44d0      	add	r8, sl
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 800356c:	442c      	add	r4, r5
 800356e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003570:	4453      	add	r3, sl
 8003572:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 8003576:	f891 a021 	ldrb.w	sl, [r1, #33]	; 0x21
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 800357a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800357c:	ea48 0909 	orr.w	r9, r8, r9
 8003580:	ea4f 0cb8 	mov.w	ip, r8, ror #2
 8003584:	ea08 0805 	and.w	r8, r8, r5
 8003588:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 800358a:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 800358e:	ea82 0b00 	eor.w	fp, r2, r0
 8003592:	ea09 0906 	and.w	r9, r9, r6
 8003596:	ea8c 3c75 	eor.w	ip, ip, r5, ror #13
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 800359a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800359c:	f891 7020 	ldrb.w	r7, [r1, #32]
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80035a0:	ea03 0b0b 	and.w	fp, r3, fp
 80035a4:	ea4f 1ab3 	mov.w	sl, r3, ror #6
 80035a8:	ea49 0808 	orr.w	r8, r9, r8
 80035ac:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80035b0:	ea8b 0b00 	eor.w	fp, fp, r0
 80035b4:	ea8a 2af3 	eor.w	sl, sl, r3, ror #11
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80035b8:	042e      	lsls	r6, r5, #16
 80035ba:	f891 5023 	ldrb.w	r5, [r1, #35]	; 0x23
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80035be:	ea8a 6a73 	eor.w	sl, sl, r3, ror #25
 80035c2:	ea8c 5cb9 	eor.w	ip, ip, r9, ror #22
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80035c6:	ea46 6607 	orr.w	r6, r6, r7, lsl #24
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80035ca:	445c      	add	r4, fp
 80035cc:	4454      	add	r4, sl
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80035ce:	4335      	orrs	r5, r6
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80035d0:	44e0      	add	r8, ip
 80035d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80035d4:	f891 b022 	ldrb.w	fp, [r1, #34]	; 0x22
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80035d8:	44a0      	add	r8, r4
 80035da:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80035de:	4426      	add	r6, r4
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 80035e0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80035e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 80035e6:	f891 a025 	ldrb.w	sl, [r1, #37]	; 0x25
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 80035ea:	4fc8      	ldr	r7, [pc, #800]	; (800390c <sha256_process+0x750>)
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80035ec:	ea45 2b0b 	orr.w	fp, r5, fp, lsl #8
    GET_UINT32( W[9],  data, 36 );
 80035f0:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80035f4:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 80035f8:	ea83 0902 	eor.w	r9, r3, r2
 80035fc:	445f      	add	r7, fp
 80035fe:	ea4f 0abc 	mov.w	sl, ip, ror #2
 8003602:	ea4c 0b04 	orr.w	fp, ip, r4
 8003606:	ea0c 0c04 	and.w	ip, ip, r4
 800360a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800360c:	ea06 0909 	and.w	r9, r6, r9
 8003610:	ea89 0902 	eor.w	r9, r9, r2
 8003614:	4438      	add	r0, r7
 8003616:	ea8a 3a74 	eor.w	sl, sl, r4, ror #13
 800361a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 800361c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800361e:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 8003622:	ea4f 18b6 	mov.w	r8, r6, ror #6
 8003626:	4448      	add	r0, r9
 8003628:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800362c:	ea88 28f6 	eor.w	r8, r8, r6, ror #11
 8003630:	ea0b 0b07 	and.w	fp, fp, r7
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 8003634:	0427      	lsls	r7, r4, #16
 8003636:	f891 4027 	ldrb.w	r4, [r1, #39]	; 0x27
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 800363a:	ea88 6876 	eor.w	r8, r8, r6, ror #25
 800363e:	ea8a 5ab9 	eor.w	sl, sl, r9, ror #22
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 8003642:	ea47 6505 	orr.w	r5, r7, r5, lsl #24
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 8003646:	ea4b 0b0c 	orr.w	fp, fp, ip
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 800364a:	f891 7026 	ldrb.w	r7, [r1, #38]	; 0x26
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 800364e:	4440      	add	r0, r8
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 8003650:	432c      	orrs	r4, r5
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 8003652:	44d3      	add	fp, sl
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 8003654:	4dae      	ldr	r5, [pc, #696]	; (8003910 <sha256_process+0x754>)
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 8003656:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 800365a:	ea44 2707 	orr.w	r7, r4, r7, lsl #8
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 800365e:	4483      	add	fp, r0
 8003660:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 8003664:	443d      	add	r5, r7
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 8003666:	4481      	add	r9, r0
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 8003668:	442a      	add	r2, r5
 800366a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800366c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 800366e:	f891 a029 	ldrb.w	sl, [r1, #41]	; 0x29
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 8003672:	9714      	str	r7, [sp, #80]	; 0x50
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 8003674:	ea4b 0b00 	orr.w	fp, fp, r0
 8003678:	ea05 0700 	and.w	r7, r5, r0
 800367c:	980c      	ldr	r0, [sp, #48]	; 0x30
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 800367e:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 8003682:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003684:	ea86 0803 	eor.w	r8, r6, r3
 8003688:	ea0b 0b00 	and.w	fp, fp, r0
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 800368c:	9815      	ldr	r0, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 800368e:	ea09 0808 	and.w	r8, r9, r8
 8003692:	ea4f 1cb9 	mov.w	ip, r9, ror #6
 8003696:	ea4f 0ab4 	mov.w	sl, r4, ror #2
 800369a:	ea4b 0b07 	orr.w	fp, fp, r7
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 800369e:	f891 4028 	ldrb.w	r4, [r1, #40]	; 0x28
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80036a2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80036a4:	ea88 0803 	eor.w	r8, r8, r3
 80036a8:	ea8c 2cf9 	eor.w	ip, ip, r9, ror #11
 80036ac:	ea8a 3a75 	eor.w	sl, sl, r5, ror #13
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 80036b0:	0405      	lsls	r5, r0, #16
 80036b2:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80036b6:	ea8c 6c79 	eor.w	ip, ip, r9, ror #25
 80036ba:	ea8a 5ab7 	eor.w	sl, sl, r7, ror #22
 80036be:	4442      	add	r2, r8
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 80036c0:	ea45 6404 	orr.w	r4, r5, r4, lsl #24
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80036c4:	4462      	add	r2, ip
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 80036c6:	f891 802a 	ldrb.w	r8, [r1, #42]	; 0x2a
 80036ca:	4304      	orrs	r4, r0
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80036cc:	44d3      	add	fp, sl
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80036ce:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80036d0:	4493      	add	fp, r2
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80036d2:	4d90      	ldr	r5, [pc, #576]	; (8003914 <sha256_process+0x758>)
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80036d4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 80036d6:	ea44 2808 	orr.w	r8, r4, r8, lsl #8
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80036da:	ea4b 0c00 	orr.w	ip, fp, r0
 80036de:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80036e0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80036e4:	4445      	add	r5, r8
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80036e6:	4417      	add	r7, r2
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80036e8:	ea89 0a06 	eor.w	sl, r9, r6
 80036ec:	ea4f 04bb 	mov.w	r4, fp, ror #2
 80036f0:	442b      	add	r3, r5
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 80036f2:	f891 b02c 	ldrb.w	fp, [r1, #44]	; 0x2c
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80036f6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80036f8:	ea0c 0c00 	and.w	ip, ip, r0
 80036fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80036fe:	ea07 0a0a 	and.w	sl, r7, sl
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003702:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
 8003706:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 800370a:	ea05 0b00 	and.w	fp, r5, r0
 800370e:	ea8a 0a06 	eor.w	sl, sl, r6
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 8003712:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003716:	4453      	add	r3, sl
 8003718:	ea4f 18b7 	mov.w	r8, r7, ror #6
 800371c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8003720:	ea4c 0c0b 	orr.w	ip, ip, fp
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003724:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003728:	ea88 28f7 	eor.w	r8, r8, r7, ror #11
 800372c:	ea84 3475 	eor.w	r4, r4, r5, ror #13
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003730:	0412      	lsls	r2, r2, #16
 8003732:	f891 502f 	ldrb.w	r5, [r1, #47]	; 0x2f
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003736:	ea88 6877 	eor.w	r8, r8, r7, ror #25
 800373a:	ea84 54ba 	eor.w	r4, r4, sl, ror #22
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 800373e:	ea42 620b 	orr.w	r2, r2, fp, lsl #24
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003742:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003746:	f891 b02e 	ldrb.w	fp, [r1, #46]	; 0x2e
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 800374a:	4443      	add	r3, r8
 800374c:	44a4      	add	ip, r4
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 800374e:	432a      	orrs	r2, r5
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003750:	4c71      	ldr	r4, [pc, #452]	; (8003918 <sha256_process+0x75c>)
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003752:	eb0c 0803 	add.w	r8, ip, r3
 8003756:	449a      	add	sl, r3
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003758:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 800375c:	ea87 0c09 	eor.w	ip, r7, r9
 8003760:	445c      	add	r4, fp
 8003762:	ea0a 0c0c 	and.w	ip, sl, ip
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003766:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 800376a:	ea8c 0c09 	eor.w	ip, ip, r9
 800376e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003770:	4426      	add	r6, r4
 8003772:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003776:	f891 4030 	ldrb.w	r4, [r1, #48]	; 0x30
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 800377a:	4466      	add	r6, ip
 800377c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8003780:	ea48 0002 	orr.w	r0, r8, r2
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003784:	940c      	str	r4, [sp, #48]	; 0x30
 8003786:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 800378a:	ea00 000b 	and.w	r0, r0, fp
 800378e:	ea08 0b0c 	and.w	fp, r8, ip
 8003792:	ea4f 15ba 	mov.w	r5, sl, ror #6
 8003796:	ea4f 02b8 	mov.w	r2, r8, ror #2
 800379a:	ea40 000b 	orr.w	r0, r0, fp
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 800379e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80037a2:	f891 4033 	ldrb.w	r4, [r1, #51]	; 0x33
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 80037a6:	ea85 25fa 	eor.w	r5, r5, sl, ror #11
 80037aa:	ea82 3278 	eor.w	r2, r2, r8, ror #13
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 80037ae:	041b      	lsls	r3, r3, #16
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 80037b0:	ea85 657a 	eor.w	r5, r5, sl, ror #25
 80037b4:	ea82 52b8 	eor.w	r2, r2, r8, ror #22
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 80037b8:	ea43 630b 	orr.w	r3, r3, fp, lsl #24
 80037bc:	f891 b032 	ldrb.w	fp, [r1, #50]	; 0x32
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 80037c0:	442e      	add	r6, r5
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 80037c2:	4323      	orrs	r3, r4
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 80037c4:	4410      	add	r0, r2
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 80037c6:	4a55      	ldr	r2, [pc, #340]	; (800391c <sha256_process+0x760>)
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 80037c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 80037ca:	ea43 2b0b 	orr.w	fp, r3, fp, lsl #8
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 80037ce:	4430      	add	r0, r6
 80037d0:	9009      	str	r0, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 80037d2:	445a      	add	r2, fp
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 80037d4:	4434      	add	r4, r6
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 80037d6:	4491      	add	r9, r2
 80037d8:	ea8a 0607 	eor.w	r6, sl, r7
 80037dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037de:	4026      	ands	r6, r4
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 80037e0:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 80037e4:	407e      	eors	r6, r7
 80037e6:	ea4f 0cb2 	mov.w	ip, r2, ror #2
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 80037ea:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 80037ee:	ea8c 3c72 	eor.w	ip, ip, r2, ror #13
 80037f2:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 80037f6:	f891 2034 	ldrb.w	r2, [r1, #52]	; 0x34
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 80037fa:	44b1      	add	r9, r6
 80037fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80037fe:	ea40 0008 	orr.w	r0, r0, r8
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003802:	041b      	lsls	r3, r3, #16
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003804:	ea00 000b 	and.w	r0, r0, fp
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003808:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800380c:	f891 b037 	ldrb.w	fp, [r1, #55]	; 0x37
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003810:	ea06 0208 	and.w	r2, r6, r8
 8003814:	4310      	orrs	r0, r2
 8003816:	ea4f 15b4 	mov.w	r5, r4, ror #6
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 800381a:	f891 2036 	ldrb.w	r2, [r1, #54]	; 0x36
 800381e:	ea43 030b 	orr.w	r3, r3, fp
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003822:	ea85 25f4 	eor.w	r5, r5, r4, ror #11
 8003826:	ea8c 5cb6 	eor.w	ip, ip, r6, ror #22
 800382a:	ea85 6574 	eor.w	r5, r5, r4, ror #25
 800382e:	4484      	add	ip, r0
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003830:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003834:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003836:	44a9      	add	r9, r5
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003838:	9218      	str	r2, [sp, #96]	; 0x60
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 800383a:	eb0c 0b09 	add.w	fp, ip, r9
 800383e:	4448      	add	r0, r9
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003840:	4e37      	ldr	r6, [pc, #220]	; (8003920 <sha256_process+0x764>)
 8003842:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8003846:	ea84 020a 	eor.w	r2, r4, sl
 800384a:	444e      	add	r6, r9
 800384c:	4002      	ands	r2, r0
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 800384e:	f891 5039 	ldrb.w	r5, [r1, #57]	; 0x39
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003852:	ea82 020a 	eor.w	r2, r2, sl
 8003856:	443e      	add	r6, r7
 8003858:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800385a:	4416      	add	r6, r2
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 800385c:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003860:	ea4b 0307 	orr.w	r3, fp, r7
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003864:	042d      	lsls	r5, r5, #16
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003866:	ea03 0308 	and.w	r3, r3, r8
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 800386a:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 800386e:	ea0b 0207 	and.w	r2, fp, r7
 8003872:	4313      	orrs	r3, r2
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003874:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
 8003878:	f891 703a 	ldrb.w	r7, [r1, #58]	; 0x3a
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 800387c:	ea4f 1cb0 	mov.w	ip, r0, ror #6
 8003880:	ea4f 09bb 	mov.w	r9, fp, ror #2
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003884:	4315      	orrs	r5, r2
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003886:	ea8c 2cf0 	eor.w	ip, ip, r0, ror #11
 800388a:	ea89 397b 	eor.w	r9, r9, fp, ror #13
 800388e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003890:	ea8c 6c70 	eor.w	ip, ip, r0, ror #25
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003894:	ea45 2707 	orr.w	r7, r5, r7, lsl #8
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003898:	ea89 59bb 	eor.w	r9, r9, fp, ror #22
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 800389c:	970b      	str	r7, [sp, #44]	; 0x2c
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 800389e:	4466      	add	r6, ip
 80038a0:	4499      	add	r9, r3
 80038a2:	4432      	add	r2, r6
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 80038a4:	4b1f      	ldr	r3, [pc, #124]	; (8003924 <sha256_process+0x768>)
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 80038a6:	444e      	add	r6, r9
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 80038a8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80038ac:	ea80 0704 	eor.w	r7, r0, r4
 80038b0:	444b      	add	r3, r9
 80038b2:	4017      	ands	r7, r2
 80038b4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80038b8:	4067      	eors	r7, r4
 80038ba:	449a      	add	sl, r3
 80038bc:	44ba      	add	sl, r7
 80038be:	ea46 070b 	orr.w	r7, r6, fp
 80038c2:	ea06 030b 	and.w	r3, r6, fp
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 80038c6:	f891 503d 	ldrb.w	r5, [r1, #61]	; 0x3d
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 80038ca:	ea07 070c 	and.w	r7, r7, ip
 80038ce:	431f      	orrs	r7, r3
 80038d0:	ea4f 0cb6 	mov.w	ip, r6, ror #2
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 80038d4:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 80038d8:	ea8c 3c76 	eor.w	ip, ip, r6, ror #13
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 80038dc:	042d      	lsls	r5, r5, #16
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 80038de:	ea8c 5cb6 	eor.w	ip, ip, r6, ror #22
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 80038e2:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 80038e6:	f891 303f 	ldrb.w	r3, [r1, #63]	; 0x3f
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 80038ea:	ea4f 19b2 	mov.w	r9, r2, ror #6
 80038ee:	4467      	add	r7, ip
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 80038f0:	f891 c03e 	ldrb.w	ip, [r1, #62]	; 0x3e
 80038f4:	431d      	orrs	r5, r3
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 80038f6:	ea89 29f2 	eor.w	r9, r9, r2, ror #11
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 80038fa:	490b      	ldr	r1, [pc, #44]	; (8003928 <sha256_process+0x76c>)
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 80038fc:	ea45 2c0c 	orr.w	ip, r5, ip, lsl #8
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003900:	ea89 6972 	eor.w	r9, r9, r2, ror #25
 8003904:	e012      	b.n	800392c <sha256_process+0x770>
 8003906:	bf00      	nop
 8003908:	ab1c5ed5 	blge	871b464 <_etext+0x713d8c>
 800390c:	d807aa98 	stmdale	r7, {r3, r4, r7, r9, fp, sp, pc}
 8003910:	12835b01 	addne	r5, r3, #1024	; 0x400
 8003914:	243185be 	ldrtcs	r8, [r1], #-1470	; 0x5be
 8003918:	550c7dc3 	strpl	r7, [ip, #-3523]	; 0xdc3
 800391c:	72be5d74 	adcsvc	r5, lr, #116, 26	; 0x1d00
 8003920:	80deb1fe 	ldrshhi	fp, [lr], #30
 8003924:	9bdc06a7 	blls	77053c8 <__Stack_Size+0x7704bc8>
 8003928:	c19bf174 	orrsgt	pc, fp, r4, ror r1	; <UNPREDICTABLE>
 800392c:	44ca      	add	sl, r9
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 800392e:	4461      	add	r1, ip
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003930:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003934:	eb0a 0308 	add.w	r3, sl, r8
 8003938:	4457      	add	r7, sl
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 800393a:	440c      	add	r4, r1
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 800393c:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8003940:	991b      	ldr	r1, [sp, #108]	; 0x6c
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003942:	ea82 0900 	eor.w	r9, r2, r0
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003946:	448a      	add	sl, r1
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003948:	ea03 0909 	and.w	r9, r3, r9
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 800394c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 800394e:	ea89 0900 	eor.w	r9, r9, r0
 8003952:	ea4f 1cb3 	mov.w	ip, r3, ror #6
 8003956:	444c      	add	r4, r9
 8003958:	ea8c 2cf3 	eor.w	ip, ip, r3, ror #11
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 800395c:	ea4f 4971 	mov.w	r9, r1, ror #17
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003960:	ea47 0506 	orr.w	r5, r7, r6
 8003964:	ea4f 08b7 	mov.w	r8, r7, ror #2
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003968:	ea89 49f1 	eor.w	r9, r9, r1, ror #19
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 800396c:	ea8c 6c73 	eor.w	ip, ip, r3, ror #25
 8003970:	44a4      	add	ip, r4
 8003972:	ea05 050b 	and.w	r5, r5, fp
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003976:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003978:	ea88 3877 	eor.w	r8, r8, r7, ror #13
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 800397c:	ea89 2991 	eor.w	r9, r9, r1, lsr #10
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003980:	ea07 0106 	and.w	r1, r7, r6
 8003984:	ea88 58b7 	eor.w	r8, r8, r7, ror #22
 8003988:	430d      	orrs	r5, r1
 800398a:	4445      	add	r5, r8
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 800398c:	ea4f 18f4 	mov.w	r8, r4, ror #7
 8003990:	ea88 48b4 	eor.w	r8, r8, r4, ror #18
 8003994:	ea88 08d4 	eor.w	r8, r8, r4, lsr #3
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003998:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 800399a:	44d1      	add	r9, sl
 800399c:	49eb      	ldr	r1, [pc, #940]	; (8003d4c <sha256_process+0xb90>)
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 800399e:	4464      	add	r4, ip
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 80039a0:	44c8      	add	r8, r9
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 80039a2:	4465      	add	r5, ip
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 80039a4:	4441      	add	r1, r8
 80039a6:	ea83 0c02 	eor.w	ip, r3, r2
 80039aa:	ea4f 19b4 	mov.w	r9, r4, ror #6
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 80039ae:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 80039b2:	ea04 0c0c 	and.w	ip, r4, ip
 80039b6:	4408      	add	r0, r1
 80039b8:	ea89 21f4 	eor.w	r1, r9, r4, ror #11
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 80039bc:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 80039c0:	ea8c 0c02 	eor.w	ip, ip, r2
 80039c4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 80039c8:	44d1      	add	r9, sl
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 80039ca:	ea45 0807 	orr.w	r8, r5, r7
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 80039ce:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 80039d2:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 80039d6:	4460      	add	r0, ip
 80039d8:	4408      	add	r0, r1
 80039da:	ea08 0806 	and.w	r8, r8, r6
 80039de:	ea05 0107 	and.w	r1, r5, r7
 80039e2:	ea4f 0cb5 	mov.w	ip, r5, ror #2
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 80039e6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 80039ea:	ea8c 3c75 	eor.w	ip, ip, r5, ror #13
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 80039ee:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 80039f2:	ea48 0801 	orr.w	r8, r8, r1
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 80039f6:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 80039f8:	ea8c 5cb5 	eor.w	ip, ip, r5, ror #22
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 80039fc:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
 8003a00:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003a04:	44e0      	add	r8, ip
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003a06:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003a0a:	ea4f 1cf1 	mov.w	ip, r1, ror #7
 8003a0e:	ea8c 4cb1 	eor.w	ip, ip, r1, ror #18
 8003a12:	44d1      	add	r9, sl
 8003a14:	ea8c 0cd1 	eor.w	ip, ip, r1, lsr #3
 8003a18:	49cd      	ldr	r1, [pc, #820]	; (8003d50 <sha256_process+0xb94>)
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003a1a:	4483      	add	fp, r0
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003a1c:	44cc      	add	ip, r9
 8003a1e:	ea84 0903 	eor.w	r9, r4, r3
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003a22:	4480      	add	r8, r0
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003a24:	4461      	add	r1, ip
 8003a26:	ea4f 10bb 	mov.w	r0, fp, ror #6
 8003a2a:	ea0b 0909 	and.w	r9, fp, r9
 8003a2e:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8003a32:	ea89 0903 	eor.w	r9, r9, r3
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003a36:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003a3a:	440a      	add	r2, r1
 8003a3c:	ea80 21fb 	eor.w	r1, r0, fp, ror #11
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003a40:	980e      	ldr	r0, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003a42:	ea48 0a05 	orr.w	sl, r8, r5
 8003a46:	ea81 617b 	eor.w	r1, r1, fp, ror #25
 8003a4a:	444a      	add	r2, r9
 8003a4c:	ea4f 09b8 	mov.w	r9, r8, ror #2
 8003a50:	440a      	add	r2, r1
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003a52:	4484      	add	ip, r0
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003a54:	ea08 0105 	and.w	r1, r8, r5
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003a58:	980f      	ldr	r0, [sp, #60]	; 0x3c
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003a5a:	ea0a 0a07 	and.w	sl, sl, r7
 8003a5e:	ea89 3978 	eor.w	r9, r9, r8, ror #13
 8003a62:	ea89 59b8 	eor.w	r9, r9, r8, ror #22
 8003a66:	ea4a 0a01 	orr.w	sl, sl, r1
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003a6a:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003a6e:	44ca      	add	sl, r9
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003a70:	ea4f 1cf0 	mov.w	ip, r0, ror #7
 8003a74:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003a78:	ea8c 4cb0 	eor.w	ip, ip, r0, ror #18
 8003a7c:	ea8c 0cd0 	eor.w	ip, ip, r0, lsr #3
 8003a80:	ea4f 4179 	mov.w	r1, r9, ror #17
 8003a84:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003a86:	ea81 41f9 	eor.w	r1, r1, r9, ror #19
 8003a8a:	4484      	add	ip, r0
 8003a8c:	ea81 2199 	eor.w	r1, r1, r9, lsr #10
 8003a90:	48b0      	ldr	r0, [pc, #704]	; (8003d54 <sha256_process+0xb98>)
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003a92:	4416      	add	r6, r2
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003a94:	4461      	add	r1, ip
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003a96:	4492      	add	sl, r2
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003a98:	4408      	add	r0, r1
 8003a9a:	ea8b 0204 	eor.w	r2, fp, r4
 8003a9e:	ea4f 1cb6 	mov.w	ip, r6, ror #6
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003aa2:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003aa6:	4032      	ands	r2, r6
 8003aa8:	4403      	add	r3, r0
 8003aaa:	ea8c 20f6 	eor.w	r0, ip, r6, ror #11
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003aae:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003ab2:	4062      	eors	r2, r4
 8003ab4:	910d      	str	r1, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003ab6:	44e1      	add	r9, ip
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003ab8:	ea4a 0108 	orr.w	r1, sl, r8
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003abc:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003ac0:	ea80 6076 	eor.w	r0, r0, r6, ror #25
 8003ac4:	4413      	add	r3, r2
 8003ac6:	4403      	add	r3, r0
 8003ac8:	4029      	ands	r1, r5
 8003aca:	ea0a 0008 	and.w	r0, sl, r8
 8003ace:	ea4f 02ba 	mov.w	r2, sl, ror #2
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003ad2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003ad6:	ea82 327a 	eor.w	r2, r2, sl, ror #13
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003ada:	ea4f 19fc 	mov.w	r9, ip, ror #7
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003ade:	4301      	orrs	r1, r0
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003ae0:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003ae2:	ea82 52ba 	eor.w	r2, r2, sl, ror #22
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003ae6:	ea89 49bc 	eor.w	r9, r9, ip, ror #18
 8003aea:	ea89 09dc 	eor.w	r9, r9, ip, lsr #3
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003aee:	4411      	add	r1, r2
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003af0:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8003af4:	ea4f 4270 	mov.w	r2, r0, ror #17
 8003af8:	ea82 42f0 	eor.w	r2, r2, r0, ror #19
 8003afc:	44cc      	add	ip, r9
 8003afe:	ea82 2290 	eor.w	r2, r2, r0, lsr #10
 8003b02:	4895      	ldr	r0, [pc, #596]	; (8003d58 <sha256_process+0xb9c>)
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003b04:	441f      	add	r7, r3
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003b06:	4462      	add	r2, ip
 8003b08:	ea86 090b 	eor.w	r9, r6, fp
 8003b0c:	4410      	add	r0, r2
 8003b0e:	ea07 0909 	and.w	r9, r7, r9
 8003b12:	ea4f 1cb7 	mov.w	ip, r7, ror #6
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003b16:	4419      	add	r1, r3
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003b18:	920e      	str	r2, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003b1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003b1c:	ea89 090b 	eor.w	r9, r9, fp
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003b20:	9a18      	ldr	r2, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003b22:	4420      	add	r0, r4
 8003b24:	ea8c 2cf7 	eor.w	ip, ip, r7, ror #11
 8003b28:	ea41 040a 	orr.w	r4, r1, sl
 8003b2c:	ea8c 6c77 	eor.w	ip, ip, r7, ror #25
 8003b30:	4448      	add	r0, r9
 8003b32:	ea4f 09b1 	mov.w	r9, r1, ror #2
 8003b36:	4460      	add	r0, ip
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003b38:	441a      	add	r2, r3
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003b3a:	ea01 0c0a 	and.w	ip, r1, sl
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003b3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003b40:	ea04 0408 	and.w	r4, r4, r8
 8003b44:	ea89 3971 	eor.w	r9, r9, r1, ror #13
 8003b48:	ea89 59b1 	eor.w	r9, r9, r1, ror #22
 8003b4c:	ea44 040c 	orr.w	r4, r4, ip
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003b50:	920f      	str	r2, [sp, #60]	; 0x3c
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003b52:	444c      	add	r4, r9
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003b54:	ea4f 12f3 	mov.w	r2, r3, ror #7
 8003b58:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8003b5c:	ea82 42b3 	eor.w	r2, r2, r3, ror #18
 8003b60:	ea82 02d3 	eor.w	r2, r2, r3, lsr #3
 8003b64:	ea4f 4c79 	mov.w	ip, r9, ror #17
 8003b68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b6a:	ea8c 4cf9 	eor.w	ip, ip, r9, ror #19
 8003b6e:	4413      	add	r3, r2
 8003b70:	ea8c 2c99 	eor.w	ip, ip, r9, lsr #10
 8003b74:	4a79      	ldr	r2, [pc, #484]	; (8003d5c <sha256_process+0xba0>)
 8003b76:	449c      	add	ip, r3
 8003b78:	4462      	add	r2, ip
 8003b7a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003b7e:	4405      	add	r5, r0
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003b80:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003b84:	ea87 0306 	eor.w	r3, r7, r6
 8003b88:	4493      	add	fp, r2
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003b8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003b8c:	402b      	ands	r3, r5
 8003b8e:	ea4f 1cb5 	mov.w	ip, r5, ror #6
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003b92:	4404      	add	r4, r0
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003b94:	4073      	eors	r3, r6
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003b96:	444a      	add	r2, r9
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003b98:	ea8c 2cf5 	eor.w	ip, ip, r5, ror #11
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003b9c:	9210      	str	r2, [sp, #64]	; 0x40
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003b9e:	ea44 0001 	orr.w	r0, r4, r1
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003ba2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003ba4:	449b      	add	fp, r3
 8003ba6:	ea8c 6c75 	eor.w	ip, ip, r5, ror #25
 8003baa:	44dc      	add	ip, fp
 8003bac:	ea00 000a 	and.w	r0, r0, sl
 8003bb0:	ea04 0b01 	and.w	fp, r4, r1
 8003bb4:	ea4f 09b4 	mov.w	r9, r4, ror #2
 8003bb8:	ea89 3974 	eor.w	r9, r9, r4, ror #13
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003bbc:	ea4f 13f2 	mov.w	r3, r2, ror #7
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003bc0:	ea40 000b 	orr.w	r0, r0, fp
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003bc4:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003bc8:	ea89 59b4 	eor.w	r9, r9, r4, ror #22
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003bcc:	ea83 43b2 	eor.w	r3, r3, r2, ror #18
 8003bd0:	ea83 03d2 	eor.w	r3, r3, r2, lsr #3
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003bd4:	4448      	add	r0, r9
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003bd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003bd8:	ea4f 497b 	mov.w	r9, fp, ror #17
 8003bdc:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8003be0:	441a      	add	r2, r3
 8003be2:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 8003be6:	4b5e      	ldr	r3, [pc, #376]	; (8003d60 <sha256_process+0xba4>)
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003be8:	44e0      	add	r8, ip
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003bea:	4491      	add	r9, r2
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003bec:	4460      	add	r0, ip
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003bee:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8003bf2:	ea85 0c07 	eor.w	ip, r5, r7
 8003bf6:	444b      	add	r3, r9
 8003bf8:	ea4f 19b8 	mov.w	r9, r8, ror #6
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003bfc:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003c00:	ea08 0c0c 	and.w	ip, r8, ip
 8003c04:	441e      	add	r6, r3
 8003c06:	ea89 23f8 	eor.w	r3, r9, r8, ror #11
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003c0a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003c0e:	ea8c 0c07 	eor.w	ip, ip, r7
 8003c12:	ea40 0204 	orr.w	r2, r0, r4
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003c16:	44d9      	add	r9, fp
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003c18:	ea83 6378 	eor.w	r3, r3, r8, ror #25
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003c1c:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003c20:	4466      	add	r6, ip
 8003c22:	441e      	add	r6, r3
 8003c24:	400a      	ands	r2, r1
 8003c26:	ea00 0304 	and.w	r3, r0, r4
 8003c2a:	ea4f 0cb0 	mov.w	ip, r0, ror #2
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003c2e:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003c32:	ea8c 3c70 	eor.w	ip, ip, r0, ror #13
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003c36:	ea4f 19fb 	mov.w	r9, fp, ror #7
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003c3a:	431a      	orrs	r2, r3
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003c3e:	ea8c 5cb0 	eor.w	ip, ip, r0, ror #22
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003c42:	ea89 49bb 	eor.w	r9, r9, fp, ror #18
 8003c46:	ea89 09db 	eor.w	r9, r9, fp, lsr #3
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003c4a:	4462      	add	r2, ip
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003c4c:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8003c50:	ea4f 4c73 	mov.w	ip, r3, ror #17
 8003c54:	ea8c 4cf3 	eor.w	ip, ip, r3, ror #19
 8003c58:	44cb      	add	fp, r9
 8003c5a:	ea8c 2c93 	eor.w	ip, ip, r3, lsr #10
 8003c5e:	44dc      	add	ip, fp
 8003c60:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8003c64:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8003c68:	4b3e      	ldr	r3, [pc, #248]	; (8003d64 <sha256_process+0xba8>)
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003c6a:	4432      	add	r2, r6
 8003c6c:	44b2      	add	sl, r6
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003c6e:	ea88 0c05 	eor.w	ip, r8, r5
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003c72:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003c74:	444b      	add	r3, r9
 8003c76:	ea0a 0c0c 	and.w	ip, sl, ip
 8003c7a:	ea8c 0c05 	eor.w	ip, ip, r5
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003c7e:	ea4f 1bf6 	mov.w	fp, r6, ror #7
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003c82:	441f      	add	r7, r3
 8003c84:	ea4f 19ba 	mov.w	r9, sl, ror #6
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003c88:	ea8b 4bb6 	eor.w	fp, fp, r6, ror #18
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003c8c:	ea89 29fa 	eor.w	r9, r9, sl, ror #11
 8003c90:	4467      	add	r7, ip
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003c92:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003c96:	ea42 0300 	orr.w	r3, r2, r0
 8003c9a:	ea89 697a 	eor.w	r9, r9, sl, ror #25
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003c9e:	ea8b 0bd6 	eor.w	fp, fp, r6, lsr #3
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003ca2:	ea4f 06b2 	mov.w	r6, r2, ror #2
 8003ca6:	444f      	add	r7, r9
 8003ca8:	4023      	ands	r3, r4
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003caa:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8003cae:	44e3      	add	fp, ip
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003cb0:	ea86 3672 	eor.w	r6, r6, r2, ror #13
 8003cb4:	ea02 0c00 	and.w	ip, r2, r0
 8003cb8:	ea86 56b2 	eor.w	r6, r6, r2, ror #22
 8003cbc:	ea43 030c 	orr.w	r3, r3, ip
 8003cc0:	4433      	add	r3, r6
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003cc2:	ea4f 4c79 	mov.w	ip, r9, ror #17
 8003cc6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003cc8:	ea8c 4cf9 	eor.w	ip, ip, r9, ror #19
 8003ccc:	44b3      	add	fp, r6
 8003cce:	ea8c 2c99 	eor.w	ip, ip, r9, lsr #10
 8003cd2:	4e25      	ldr	r6, [pc, #148]	; (8003d68 <sha256_process+0xbac>)
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003cd4:	443b      	add	r3, r7
 8003cd6:	4439      	add	r1, r7
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003cd8:	44dc      	add	ip, fp
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003cda:	9f14      	ldr	r7, [sp, #80]	; 0x50
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003cdc:	ea8a 0908 	eor.w	r9, sl, r8
 8003ce0:	4466      	add	r6, ip
 8003ce2:	ea01 0909 	and.w	r9, r1, r9
 8003ce6:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8003cea:	4435      	add	r5, r6
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003cec:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8003cf0:	ea4f 1bf7 	mov.w	fp, r7, ror #7
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003cf4:	ea89 0908 	eor.w	r9, r9, r8
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003cf8:	ea8b 4bb7 	eor.w	fp, fp, r7, ror #18
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003cfc:	44a9      	add	r9, r5
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003cfe:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8003d00:	ea8b 0bdc 	eor.w	fp, fp, ip, lsr #3
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003d04:	ea43 0c02 	orr.w	ip, r3, r2
 8003d08:	ea03 0602 	and.w	r6, r3, r2
 8003d0c:	ea4f 17b1 	mov.w	r7, r1, ror #6
 8003d10:	ea0c 0c00 	and.w	ip, ip, r0
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003d14:	445d      	add	r5, fp
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003d16:	ea4f 0bb3 	mov.w	fp, r3, ror #2
 8003d1a:	ea87 27f1 	eor.w	r7, r7, r1, ror #11
 8003d1e:	ea8b 3b73 	eor.w	fp, fp, r3, ror #13
 8003d22:	ea4c 0c06 	orr.w	ip, ip, r6
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003d26:	9e11      	ldr	r6, [sp, #68]	; 0x44
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003d28:	ea87 6771 	eor.w	r7, r7, r1, ror #25
 8003d2c:	ea8b 5bb3 	eor.w	fp, fp, r3, ror #22
 8003d30:	44b9      	add	r9, r7
 8003d32:	44dc      	add	ip, fp
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003d34:	ea4f 4776 	mov.w	r7, r6, ror #17
 8003d38:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8003d3c:	ea87 47f6 	eor.w	r7, r7, r6, ror #19
 8003d40:	445d      	add	r5, fp
 8003d42:	ea87 2796 	eor.w	r7, r7, r6, lsr #10
 8003d46:	19ef      	adds	r7, r5, r7
 8003d48:	e010      	b.n	8003d6c <sha256_process+0xbb0>
 8003d4a:	bf00      	nop
 8003d4c:	e49b69c1 	ldr	r6, [fp], #2497	; 0x9c1
 8003d50:	efbe4786 	svc	0x00be4786
 8003d54:	0fc19dc6 	svceq	0x00c19dc6
 8003d58:	240ca1cc 	strcs	sl, [ip], #-460	; 0x1cc
 8003d5c:	2de92c6f 	stclcs	12, cr2, [r9, #444]!	; 0x1bc
 8003d60:	4a7484aa 	bmi	9d25010 <_etext+0x1d1d938>
 8003d64:	5cb0a9dc 	ldcpl	9, cr10, [r0], #880	; 0x370
 8003d68:	76f988da 	usatvc	r8, #25, sl, asr #17
 8003d6c:	9713      	str	r7, [sp, #76]	; 0x4c
 8003d6e:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8003d72:	4ee6      	ldr	r6, [pc, #920]	; (800410c <sha256_process+0xf50>)
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003d74:	44cc      	add	ip, r9
 8003d76:	444c      	add	r4, r9
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003d78:	ea81 050a 	eor.w	r5, r1, sl
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003d7c:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003d80:	445e      	add	r6, fp
 8003d82:	4025      	ands	r5, r4
 8003d84:	ea85 050a 	eor.w	r5, r5, sl
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003d88:	ea4f 17f9 	mov.w	r7, r9, ror #7
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003d8c:	44b0      	add	r8, r6
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003d8e:	ea87 47b9 	eor.w	r7, r7, r9, ror #18
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003d92:	ea4f 1bb4 	mov.w	fp, r4, ror #6
 8003d96:	44a8      	add	r8, r5
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003d98:	9d14      	ldr	r5, [sp, #80]	; 0x50
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003d9a:	ea8b 2bf4 	eor.w	fp, fp, r4, ror #11
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003d9e:	ea87 07d9 	eor.w	r7, r7, r9, lsr #3
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003da2:	ea4c 0603 	orr.w	r6, ip, r3
 8003da6:	ea8b 6b74 	eor.w	fp, fp, r4, ror #25
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003daa:	442f      	add	r7, r5
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003dac:	ea4f 05bc 	mov.w	r5, ip, ror #2
 8003db0:	44d8      	add	r8, fp
 8003db2:	ea0c 0903 	and.w	r9, ip, r3
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003db6:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003dba:	4016      	ands	r6, r2
 8003dbc:	ea85 357c 	eor.w	r5, r5, ip, ror #13
 8003dc0:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
 8003dc4:	ea46 0609 	orr.w	r6, r6, r9
 8003dc8:	442e      	add	r6, r5
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003dca:	ea4f 497b 	mov.w	r9, fp, ror #17
 8003dce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003dd0:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8003dd4:	442f      	add	r7, r5
 8003dd6:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 8003dda:	44b9      	add	r9, r7
 8003ddc:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8003de0:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8003de4:	4dca      	ldr	r5, [pc, #808]	; (8004110 <sha256_process+0xf54>)
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8003de6:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003dea:	4440      	add	r0, r8
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003dec:	ea84 0701 	eor.w	r7, r4, r1
 8003df0:	445d      	add	r5, fp
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003df2:	4446      	add	r6, r8
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003df4:	44aa      	add	sl, r5
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8003df6:	ea4f 18f9 	mov.w	r8, r9, ror #7
 8003dfa:	9d16      	ldr	r5, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003dfc:	4007      	ands	r7, r0
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8003dfe:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 8003e02:	ea88 48b9 	eor.w	r8, r8, r9, ror #18
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003e06:	404f      	eors	r7, r1
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8003e08:	ea88 08d5 	eor.w	r8, r8, r5, lsr #3
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003e0c:	4457      	add	r7, sl
 8003e0e:	ea46 0a0c 	orr.w	sl, r6, ip
 8003e12:	ea06 050c 	and.w	r5, r6, ip
 8003e16:	ea4f 19b0 	mov.w	r9, r0, ror #6
 8003e1a:	ea0a 0a03 	and.w	sl, sl, r3
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8003e1e:	44d8      	add	r8, fp
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003e20:	ea4f 0bb6 	mov.w	fp, r6, ror #2
 8003e24:	ea89 29f0 	eor.w	r9, r9, r0, ror #11
 8003e28:	ea8b 3b76 	eor.w	fp, fp, r6, ror #13
 8003e2c:	ea4a 0a05 	orr.w	sl, sl, r5
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8003e30:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003e32:	ea89 6970 	eor.w	r9, r9, r0, ror #25
 8003e36:	ea8b 5bb6 	eor.w	fp, fp, r6, ror #22
 8003e3a:	444f      	add	r7, r9
 8003e3c:	44da      	add	sl, fp
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8003e3e:	ea4f 4975 	mov.w	r9, r5, ror #17
 8003e42:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8003e46:	ea89 49f5 	eor.w	r9, r9, r5, ror #19
 8003e4a:	44d8      	add	r8, fp
 8003e4c:	ea89 2995 	eor.w	r9, r9, r5, lsr #10
 8003e50:	44c1      	add	r9, r8
 8003e52:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003e56:	44ba      	add	sl, r7
 8003e58:	443a      	add	r2, r7
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8003e5a:	4dae      	ldr	r5, [pc, #696]	; (8004114 <sha256_process+0xf58>)
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8003e5c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8003e5e:	ea80 0804 	eor.w	r8, r0, r4
 8003e62:	444d      	add	r5, r9
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8003e64:	ea4f 1bf7 	mov.w	fp, r7, ror #7
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8003e68:	ea02 0808 	and.w	r8, r2, r8
 8003e6c:	4429      	add	r1, r5
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8003e6e:	ea8b 4bb7 	eor.w	fp, fp, r7, ror #18
 8003e72:	9d16      	ldr	r5, [sp, #88]	; 0x58
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8003e74:	ea88 0804 	eor.w	r8, r8, r4
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8003e78:	ea8b 0bd7 	eor.w	fp, fp, r7, lsr #3
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8003e7c:	4488      	add	r8, r1
 8003e7e:	ea4a 0106 	orr.w	r1, sl, r6
 8003e82:	ea4f 19b2 	mov.w	r9, r2, ror #6
 8003e86:	ea01 010c 	and.w	r1, r1, ip
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8003e8a:	44ab      	add	fp, r5
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8003e8c:	ea4f 07ba 	mov.w	r7, sl, ror #2
 8003e90:	ea0a 0506 	and.w	r5, sl, r6
 8003e94:	ea89 29f2 	eor.w	r9, r9, r2, ror #11
 8003e98:	ea87 377a 	eor.w	r7, r7, sl, ror #13
 8003e9c:	4329      	orrs	r1, r5
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8003e9e:	9d14      	ldr	r5, [sp, #80]	; 0x50
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8003ea0:	ea89 6972 	eor.w	r9, r9, r2, ror #25
 8003ea4:	ea87 57ba 	eor.w	r7, r7, sl, ror #22
 8003ea8:	44c8      	add	r8, r9
 8003eaa:	4439      	add	r1, r7
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8003eac:	ea4f 4975 	mov.w	r9, r5, ror #17
 8003eb0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8003eb2:	ea89 49f5 	eor.w	r9, r9, r5, ror #19
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8003eb6:	4441      	add	r1, r8
 8003eb8:	4443      	add	r3, r8
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8003eba:	44bb      	add	fp, r7
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003ebc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8003ec0:	ea89 2995 	eor.w	r9, r9, r5, lsr #10
 8003ec4:	4f94      	ldr	r7, [pc, #592]	; (8004118 <sha256_process+0xf5c>)
 8003ec6:	44d9      	add	r9, fp
 8003ec8:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 8003ecc:	ea82 0500 	eor.w	r5, r2, r0
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003ed0:	ea4f 1bf8 	mov.w	fp, r8, ror #7
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8003ed4:	444f      	add	r7, r9
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003ed6:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8003eda:	401d      	ands	r5, r3
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003edc:	ea8b 4bb8 	eor.w	fp, fp, r8, ror #18
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8003ee0:	4427      	add	r7, r4
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003ee2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8003ee4:	4045      	eors	r5, r0
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003ee6:	ea8b 0bd9 	eor.w	fp, fp, r9, lsr #3
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8003eea:	ea41 090a 	orr.w	r9, r1, sl
 8003eee:	ea4f 18b3 	mov.w	r8, r3, ror #6
 8003ef2:	442f      	add	r7, r5
 8003ef4:	ea09 0906 	and.w	r9, r9, r6
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003ef8:	44a3      	add	fp, r4
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8003efa:	ea4f 05b1 	mov.w	r5, r1, ror #2
 8003efe:	ea01 040a 	and.w	r4, r1, sl
 8003f02:	ea88 28f3 	eor.w	r8, r8, r3, ror #11
 8003f06:	ea85 3571 	eor.w	r5, r5, r1, ror #13
 8003f0a:	ea49 0904 	orr.w	r9, r9, r4
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003f0e:	9c15      	ldr	r4, [sp, #84]	; 0x54
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8003f10:	ea88 6873 	eor.w	r8, r8, r3, ror #25
 8003f14:	ea85 55b1 	eor.w	r5, r5, r1, ror #22
 8003f18:	4447      	add	r7, r8
 8003f1a:	44a9      	add	r9, r5
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003f1c:	ea4f 4874 	mov.w	r8, r4, ror #17
 8003f20:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f22:	ea88 48f4 	eor.w	r8, r8, r4, ror #19
 8003f26:	44ab      	add	fp, r5
 8003f28:	ea88 2894 	eor.w	r8, r8, r4, lsr #10
 8003f2c:	44d8      	add	r8, fp
 8003f2e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8003f32:	eb07 040c 	add.w	r4, r7, ip
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003f36:	4d79      	ldr	r5, [pc, #484]	; (800411c <sha256_process+0xf60>)
 8003f38:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8003f3c:	44b9      	add	r9, r7
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003f3e:	ea83 0b02 	eor.w	fp, r3, r2
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8003f42:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003f44:	4465      	add	r5, ip
 8003f46:	ea04 0b0b 	and.w	fp, r4, fp
 8003f4a:	ea8b 0b02 	eor.w	fp, fp, r2
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8003f4e:	ea4f 18f7 	mov.w	r8, r7, ror #7
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003f52:	4428      	add	r0, r5
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8003f54:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003f56:	ea88 48b7 	eor.w	r8, r8, r7, ror #18
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003f5a:	4458      	add	r0, fp
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8003f5c:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003f60:	ea49 0c01 	orr.w	ip, r9, r1
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8003f64:	ea88 08d5 	eor.w	r8, r8, r5, lsr #3
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003f68:	ea4f 17b4 	mov.w	r7, r4, ror #6
 8003f6c:	ea09 0501 	and.w	r5, r9, r1
 8003f70:	ea0c 0c0a 	and.w	ip, ip, sl
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8003f74:	44d8      	add	r8, fp
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003f76:	ea4f 0bb9 	mov.w	fp, r9, ror #2
 8003f7a:	ea87 27f4 	eor.w	r7, r7, r4, ror #11
 8003f7e:	ea8b 3b79 	eor.w	fp, fp, r9, ror #13
 8003f82:	ea4c 0c05 	orr.w	ip, ip, r5
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8003f86:	9d16      	ldr	r5, [sp, #88]	; 0x58
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003f88:	ea87 6774 	eor.w	r7, r7, r4, ror #25
 8003f8c:	ea8b 5bb9 	eor.w	fp, fp, r9, ror #22
 8003f90:	4438      	add	r0, r7
 8003f92:	44dc      	add	ip, fp
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8003f94:	ea4f 4775 	mov.w	r7, r5, ror #17
 8003f98:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8003f9c:	ea87 47f5 	eor.w	r7, r7, r5, ror #19
 8003fa0:	44d8      	add	r8, fp
 8003fa2:	ea87 2795 	eor.w	r7, r7, r5, lsr #10
 8003fa6:	4d5e      	ldr	r5, [pc, #376]	; (8004120 <sha256_process+0xf64>)
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003fa8:	eb00 0b06 	add.w	fp, r0, r6
 8003fac:	4484      	add	ip, r0
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8003fae:	4447      	add	r7, r8
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8003fb0:	980c      	ldr	r0, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8003fb2:	ea84 0603 	eor.w	r6, r4, r3
 8003fb6:	443d      	add	r5, r7
 8003fb8:	ea0b 0606 	and.w	r6, fp, r6
 8003fbc:	405e      	eors	r6, r3
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8003fbe:	ea4f 18f0 	mov.w	r8, r0, ror #7
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8003fc2:	442a      	add	r2, r5
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8003fc4:	ea88 48b0 	eor.w	r8, r8, r0, ror #18
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8003fc8:	4432      	add	r2, r6
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8003fca:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003fcc:	ea88 05d0 	eor.w	r5, r8, r0, lsr #3
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8003fd0:	ea4c 0809 	orr.w	r8, ip, r9
 8003fd4:	9718      	str	r7, [sp, #96]	; 0x60
 8003fd6:	ea08 0801 	and.w	r8, r8, r1
 8003fda:	ea0c 0009 	and.w	r0, ip, r9
 8003fde:	ea4f 17bb 	mov.w	r7, fp, ror #6
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8003fe2:	4435      	add	r5, r6
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8003fe4:	ea4f 06bc 	mov.w	r6, ip, ror #2
 8003fe8:	ea87 27fb 	eor.w	r7, r7, fp, ror #11
 8003fec:	ea86 367c 	eor.w	r6, r6, ip, ror #13
 8003ff0:	ea48 0000 	orr.w	r0, r8, r0
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8003ff4:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8003ff8:	ea87 677b 	eor.w	r7, r7, fp, ror #25
 8003ffc:	ea86 56bc 	eor.w	r6, r6, ip, ror #22
 8004000:	443a      	add	r2, r7
 8004002:	4430      	add	r0, r6
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004004:	ea4f 4778 	mov.w	r7, r8, ror #17
 8004008:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800400a:	ea87 47f8 	eor.w	r7, r7, r8, ror #19
 800400e:	4435      	add	r5, r6
 8004010:	ea87 2898 	eor.w	r8, r7, r8, lsr #10
 8004014:	4e43      	ldr	r6, [pc, #268]	; (8004124 <sha256_process+0xf68>)
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8004016:	4492      	add	sl, r2
 8004018:	4410      	add	r0, r2
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 800401a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 800401c:	44a8      	add	r8, r5
 800401e:	ea8b 0204 	eor.w	r2, fp, r4
 8004022:	4446      	add	r6, r8
 8004024:	ea0a 0202 	and.w	r2, sl, r2
 8004028:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800402c:	4062      	eors	r2, r4
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 800402e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8004032:	ea4f 15f7 	mov.w	r5, r7, ror #7
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004036:	4433      	add	r3, r6
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004038:	ea85 45b7 	eor.w	r5, r5, r7, ror #18
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 800403c:	4413      	add	r3, r2
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 800403e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004040:	ea85 05d8 	eor.w	r5, r5, r8, lsr #3
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004044:	ea40 080c 	orr.w	r8, r0, ip
 8004048:	ea08 0809 	and.w	r8, r8, r9
 800404c:	ea00 060c 	and.w	r6, r0, ip
 8004050:	ea4f 17ba 	mov.w	r7, sl, ror #6
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004054:	4415      	add	r5, r2
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004056:	ea4f 02b0 	mov.w	r2, r0, ror #2
 800405a:	ea87 27fa 	eor.w	r7, r7, sl, ror #11
 800405e:	ea82 3270 	eor.w	r2, r2, r0, ror #13
 8004062:	ea48 0606 	orr.w	r6, r8, r6
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004066:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 800406a:	ea87 677a 	eor.w	r7, r7, sl, ror #25
 800406e:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 8004072:	443b      	add	r3, r7
 8004074:	4416      	add	r6, r2
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004076:	ea4f 4778 	mov.w	r7, r8, ror #17
 800407a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800407c:	ea87 47f8 	eor.w	r7, r7, r8, ror #19
 8004080:	4415      	add	r5, r2
 8004082:	ea87 2798 	eor.w	r7, r7, r8, lsr #10
 8004086:	4a28      	ldr	r2, [pc, #160]	; (8004128 <sha256_process+0xf6c>)
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004088:	4419      	add	r1, r3
 800408a:	441e      	add	r6, r3
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 800408c:	19ef      	adds	r7, r5, r7
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 800408e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004090:	ea8a 050b 	eor.w	r5, sl, fp
 8004094:	443a      	add	r2, r7
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004096:	ea4f 18f3 	mov.w	r8, r3, ror #7
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 800409a:	400d      	ands	r5, r1
 800409c:	4422      	add	r2, r4
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 800409e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80040a0:	970c      	str	r7, [sp, #48]	; 0x30
 80040a2:	ea85 050b 	eor.w	r5, r5, fp
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80040a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80040a8:	ea88 48b3 	eor.w	r8, r8, r3, ror #18
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80040ac:	ea4f 13b1 	mov.w	r3, r1, ror #6
 80040b0:	ea83 23f1 	eor.w	r3, r3, r1, ror #11
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80040b4:	ea88 08d4 	eor.w	r8, r8, r4, lsr #3
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80040b8:	442a      	add	r2, r5
 80040ba:	ea46 0500 	orr.w	r5, r6, r0
 80040be:	ea83 6471 	eor.w	r4, r3, r1, ror #25
 80040c2:	ea05 050c 	and.w	r5, r5, ip
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80040c6:	44b8      	add	r8, r7
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80040c8:	ea4f 03b6 	mov.w	r3, r6, ror #2
 80040cc:	ea06 0700 	and.w	r7, r6, r0
 80040d0:	ea83 3376 	eor.w	r3, r3, r6, ror #13
 80040d4:	432f      	orrs	r7, r5
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80040d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80040d8:	ea83 53b6 	eor.w	r3, r3, r6, ror #22
 80040dc:	4422      	add	r2, r4
 80040de:	441f      	add	r7, r3
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80040e0:	ea4f 4475 	mov.w	r4, r5, ror #17
 80040e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80040e6:	ea84 44f5 	eor.w	r4, r4, r5, ror #19
 80040ea:	4498      	add	r8, r3
 80040ec:	ea84 2495 	eor.w	r4, r4, r5, lsr #10
 80040f0:	4444      	add	r4, r8
 80040f2:	9409      	str	r4, [sp, #36]	; 0x24
 80040f4:	4b0d      	ldr	r3, [pc, #52]	; (800412c <sha256_process+0xf70>)
 80040f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80040f8:	4417      	add	r7, r2
 80040fa:	4491      	add	r9, r2
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80040fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80040fe:	ea81 020a 	eor.w	r2, r1, sl
 8004102:	442b      	add	r3, r5
 8004104:	ea09 0202 	and.w	r2, r9, r2
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004108:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800410a:	e011      	b.n	8004130 <sha256_process+0xf74>
 800410c:	983e5152 	ldmdals	lr!, {r1, r4, r6, r8, ip, lr}
 8004110:	a831c66d 	ldmdage	r1!, {r0, r2, r3, r5, r6, r9, sl, lr, pc}
 8004114:	b00327c8 	andlt	r2, r3, r8, asr #15
 8004118:	bf597fc7 	svclt	0x00597fc7
 800411c:	c6e00bf3 			; <UNDEFINED> instruction: 0xc6e00bf3
 8004120:	d5a79147 	strle	r9, [r7, #327]!	; 0x147
 8004124:	06ca6351 			; <UNDEFINED> instruction: 0x06ca6351
 8004128:	14292967 	strtne	r2, [r9], #-2407	; 0x967
 800412c:	27b70a85 	ldrcs	r0, [r7, r5, lsl #21]!
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004130:	ea82 020a 	eor.w	r2, r2, sl
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004134:	ea4f 18f4 	mov.w	r8, r4, ror #7
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004138:	445b      	add	r3, fp
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 800413a:	ea88 48b4 	eor.w	r8, r8, r4, ror #18
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 800413e:	4413      	add	r3, r2
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004142:	ea88 0bd5 	eor.w	fp, r8, r5, lsr #3
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004146:	ea47 0806 	orr.w	r8, r7, r6
 800414a:	ea08 0800 	and.w	r8, r8, r0
 800414e:	ea07 0506 	and.w	r5, r7, r6
 8004152:	ea4f 14b9 	mov.w	r4, r9, ror #6
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004156:	4493      	add	fp, r2
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004158:	ea4f 02b7 	mov.w	r2, r7, ror #2
 800415c:	ea84 24f9 	eor.w	r4, r4, r9, ror #11
 8004160:	ea82 3277 	eor.w	r2, r2, r7, ror #13
 8004164:	ea48 0505 	orr.w	r5, r8, r5
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004168:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 800416c:	ea84 6479 	eor.w	r4, r4, r9, ror #25
 8004170:	ea82 52b7 	eor.w	r2, r2, r7, ror #22
 8004174:	4423      	add	r3, r4
 8004176:	4415      	add	r5, r2
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004178:	ea4f 4478 	mov.w	r4, r8, ror #17
 800417c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800417e:	ea84 44f8 	eor.w	r4, r4, r8, ror #19
 8004182:	4493      	add	fp, r2
 8004184:	ea84 2498 	eor.w	r4, r4, r8, lsr #10
 8004188:	445c      	add	r4, fp
 800418a:	940a      	str	r4, [sp, #40]	; 0x28
 800418c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004190:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004192:	4af1      	ldr	r2, [pc, #964]	; (8004558 <sha256_process+0x139c>)
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004194:	449c      	add	ip, r3
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004196:	ea89 0b01 	eor.w	fp, r9, r1
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 800419a:	441d      	add	r5, r3
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 800419c:	4442      	add	r2, r8
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 800419e:	ea4f 13f4 	mov.w	r3, r4, ror #7
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80041a2:	ea0c 0b0b 	and.w	fp, ip, fp
 80041a6:	ea8b 0b01 	eor.w	fp, fp, r1
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80041aa:	ea83 43b4 	eor.w	r3, r3, r4, ror #18
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80041ae:	4452      	add	r2, sl
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80041b0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80041b4:	ea83 03d4 	eor.w	r3, r3, r4, lsr #3
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80041b8:	445a      	add	r2, fp
 80041ba:	ea45 0b07 	orr.w	fp, r5, r7
 80041be:	ea0b 0b06 	and.w	fp, fp, r6
 80041c2:	ea05 0407 	and.w	r4, r5, r7
 80041c6:	ea4f 18bc 	mov.w	r8, ip, ror #6
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80041ca:	449a      	add	sl, r3
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80041cc:	ea4f 03b5 	mov.w	r3, r5, ror #2
 80041d0:	ea88 28fc 	eor.w	r8, r8, ip, ror #11
 80041d4:	ea83 3375 	eor.w	r3, r3, r5, ror #13
 80041d8:	ea4b 0404 	orr.w	r4, fp, r4
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80041dc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80041e0:	ea88 687c 	eor.w	r8, r8, ip, ror #25
 80041e4:	ea83 53b5 	eor.w	r3, r3, r5, ror #22
 80041e8:	4442      	add	r2, r8
 80041ea:	441c      	add	r4, r3
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80041ec:	ea4f 487b 	mov.w	r8, fp, ror #17
 80041f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80041f2:	ea88 48fb 	eor.w	r8, r8, fp, ror #19
 80041f6:	449a      	add	sl, r3
 80041f8:	ea88 289b 	eor.w	r8, r8, fp, lsr #10
 80041fc:	44d0      	add	r8, sl
 80041fe:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004202:	4410      	add	r0, r2
 8004204:	4414      	add	r4, r2
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004206:	4bd5      	ldr	r3, [pc, #852]	; (800455c <sha256_process+0x13a0>)
 8004208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800420a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 800420e:	ea8c 0b09 	eor.w	fp, ip, r9
 8004212:	4413      	add	r3, r2
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004214:	ea4f 1af8 	mov.w	sl, r8, ror #7
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004218:	ea00 0b0b 	and.w	fp, r0, fp
 800421c:	440b      	add	r3, r1
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800421e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004220:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004222:	ea8b 0b09 	eor.w	fp, fp, r9
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004226:	ea8a 4ab8 	eor.w	sl, sl, r8, ror #18
 800422a:	ea8a 0ad1 	eor.w	sl, sl, r1, lsr #3
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 800422e:	445b      	add	r3, fp
 8004230:	ea44 0b05 	orr.w	fp, r4, r5
 8004234:	ea0b 0b07 	and.w	fp, fp, r7
 8004238:	ea04 0105 	and.w	r1, r4, r5
 800423c:	ea4f 18b0 	mov.w	r8, r0, ror #6
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004240:	4492      	add	sl, r2
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004242:	ea4f 02b4 	mov.w	r2, r4, ror #2
 8004246:	ea88 28f0 	eor.w	r8, r8, r0, ror #11
 800424a:	ea82 3274 	eor.w	r2, r2, r4, ror #13
 800424e:	ea4b 0101 	orr.w	r1, fp, r1
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004252:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004256:	ea88 6870 	eor.w	r8, r8, r0, ror #25
 800425a:	ea82 52b4 	eor.w	r2, r2, r4, ror #22
 800425e:	4443      	add	r3, r8
 8004260:	4411      	add	r1, r2
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004262:	ea4f 487b 	mov.w	r8, fp, ror #17
 8004266:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004268:	ea88 48fb 	eor.w	r8, r8, fp, ror #19
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 800426c:	441e      	add	r6, r3
 800426e:	4419      	add	r1, r3
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004270:	4492      	add	sl, r2
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004272:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004274:	ea88 289b 	eor.w	r8, r8, fp, lsr #10
 8004278:	4ab9      	ldr	r2, [pc, #740]	; (8004560 <sha256_process+0x13a4>)
 800427a:	44d0      	add	r8, sl
 800427c:	ea80 0b0c 	eor.w	fp, r0, ip
 8004280:	4442      	add	r2, r8
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004282:	ea4f 1af3 	mov.w	sl, r3, ror #7
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004286:	ea06 0b0b 	and.w	fp, r6, fp
 800428a:	ea8b 0b0c 	eor.w	fp, fp, ip
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 800428e:	ea8a 4ab3 	eor.w	sl, sl, r3, ror #18
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004292:	4491      	add	r9, r2
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004294:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004296:	ea8a 0ad3 	eor.w	sl, sl, r3, lsr #3
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800429a:	44d9      	add	r9, fp
 800429c:	ea41 0b04 	orr.w	fp, r1, r4
 80042a0:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80042a4:	ea0b 0b05 	and.w	fp, fp, r5
 80042a8:	ea4f 18b6 	mov.w	r8, r6, ror #6
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80042ac:	4492      	add	sl, r2
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 80042ae:	ea4f 03b1 	mov.w	r3, r1, ror #2
 80042b2:	ea01 0204 	and.w	r2, r1, r4
 80042b6:	ea88 28f6 	eor.w	r8, r8, r6, ror #11
 80042ba:	ea83 3371 	eor.w	r3, r3, r1, ror #13
 80042be:	ea4b 0202 	orr.w	r2, fp, r2
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80042c2:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 80042c6:	ea88 6876 	eor.w	r8, r8, r6, ror #25
 80042ca:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
 80042ce:	44c1      	add	r9, r8
 80042d0:	441a      	add	r2, r3
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80042d2:	ea4f 487b 	mov.w	r8, fp, ror #17
 80042d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80042d8:	ea88 48fb 	eor.w	r8, r8, fp, ror #19
 80042dc:	449a      	add	sl, r3
 80042de:	ea88 289b 	eor.w	r8, r8, fp, lsr #10
 80042e2:	44d0      	add	r8, sl
 80042e4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80042e8:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80042ec:	4b9d      	ldr	r3, [pc, #628]	; (8004564 <sha256_process+0x13a8>)
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 80042ee:	444a      	add	r2, r9
 80042f0:	444f      	add	r7, r9
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80042f2:	ea86 0800 	eor.w	r8, r6, r0
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80042f6:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80042fa:	445b      	add	r3, fp
 80042fc:	ea07 0808 	and.w	r8, r7, r8
 8004300:	ea88 0800 	eor.w	r8, r8, r0
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004304:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004308:	449c      	add	ip, r3
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 800430a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800430c:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004310:	44c4      	add	ip, r8
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004312:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004316:	ea42 0b01 	orr.w	fp, r2, r1
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 800431a:	ea8a 0ad3 	eor.w	sl, sl, r3, lsr #3
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 800431e:	ea0b 0b04 	and.w	fp, fp, r4
 8004322:	ea02 0301 	and.w	r3, r2, r1
 8004326:	ea4f 19b7 	mov.w	r9, r7, ror #6
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 800432a:	44c2      	add	sl, r8
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 800432c:	ea4f 08b2 	mov.w	r8, r2, ror #2
 8004330:	ea89 29f7 	eor.w	r9, r9, r7, ror #11
 8004334:	ea88 3872 	eor.w	r8, r8, r2, ror #13
 8004338:	ea4b 0303 	orr.w	r3, fp, r3
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 800433c:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004340:	ea89 6977 	eor.w	r9, r9, r7, ror #25
 8004344:	ea88 58b2 	eor.w	r8, r8, r2, ror #22
 8004348:	44cc      	add	ip, r9
 800434a:	4443      	add	r3, r8
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 800434c:	ea4f 497b 	mov.w	r9, fp, ror #17
 8004350:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8004354:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8004358:	44c2      	add	sl, r8
 800435a:	ea89 2b9b 	eor.w	fp, r9, fp, lsr #10
 800435e:	44d3      	add	fp, sl
 8004360:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8004570 <sha256_process+0x13b4>
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004364:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004368:	4465      	add	r5, ip
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 800436a:	ea87 0906 	eor.w	r9, r7, r6
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 800436e:	4463      	add	r3, ip
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004370:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004374:	ea4f 1cfa 	mov.w	ip, sl, ror #7
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004378:	44d8      	add	r8, fp
 800437a:	ea05 0909 	and.w	r9, r5, r9
 800437e:	ea4f 1bb5 	mov.w	fp, r5, ror #6
 8004382:	ea89 0906 	eor.w	r9, r9, r6
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004386:	ea8c 4cba 	eor.w	ip, ip, sl, ror #18
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 800438a:	4480      	add	r8, r0
 800438c:	ea8b 2bf5 	eor.w	fp, fp, r5, ror #11
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004390:	9811      	ldr	r0, [sp, #68]	; 0x44
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004392:	ea8b 6b75 	eor.w	fp, fp, r5, ror #25
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004396:	ea8c 0cda 	eor.w	ip, ip, sl, lsr #3
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 800439a:	44c8      	add	r8, r9
 800439c:	ea43 0a02 	orr.w	sl, r3, r2
 80043a0:	ea4f 09b3 	mov.w	r9, r3, ror #2
 80043a4:	44d8      	add	r8, fp
 80043a6:	ea0a 0a01 	and.w	sl, sl, r1
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80043aa:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80043ae:	4484      	add	ip, r0
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80043b0:	ea89 3973 	eor.w	r9, r9, r3, ror #13
 80043b4:	ea03 0002 	and.w	r0, r3, r2
 80043b8:	ea89 59b3 	eor.w	r9, r9, r3, ror #22
 80043bc:	ea4a 0000 	orr.w	r0, sl, r0
 80043c0:	4448      	add	r0, r9
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80043c2:	ea4f 4a7b 	mov.w	sl, fp, ror #17
 80043c6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80043ca:	ea8a 4afb 	eor.w	sl, sl, fp, ror #19
 80043ce:	44cc      	add	ip, r9
 80043d0:	ea8a 2a9b 	eor.w	sl, sl, fp, lsr #10
 80043d4:	44e2      	add	sl, ip
 80043d6:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80043da:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8004574 <sha256_process+0x13b8>
 80043de:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80043e2:	4440      	add	r0, r8
 80043e4:	4444      	add	r4, r8
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80043e6:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80043ea:	ea85 0807 	eor.w	r8, r5, r7
 80043ee:	44d9      	add	r9, fp
 80043f0:	ea04 0808 	and.w	r8, r4, r8
 80043f4:	ea88 0807 	eor.w	r8, r8, r7
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80043f8:	ea4f 1cfa 	mov.w	ip, sl, ror #7
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80043fc:	44b1      	add	r9, r6
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80043fe:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004400:	44c1      	add	r9, r8
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004402:	ea8c 4cba 	eor.w	ip, ip, sl, ror #18
 8004406:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 800440a:	ea40 0b03 	orr.w	fp, r0, r3
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 800440e:	ea8c 0cd6 	eor.w	ip, ip, r6, lsr #3
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004412:	ea0b 0b02 	and.w	fp, fp, r2
 8004416:	ea00 0603 	and.w	r6, r0, r3
 800441a:	ea4f 1ab4 	mov.w	sl, r4, ror #6
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 800441e:	44c4      	add	ip, r8
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004420:	ea4f 08b0 	mov.w	r8, r0, ror #2
 8004424:	ea8a 2af4 	eor.w	sl, sl, r4, ror #11
 8004428:	ea88 3870 	eor.w	r8, r8, r0, ror #13
 800442c:	ea4b 0606 	orr.w	r6, fp, r6
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004430:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004434:	ea88 58b0 	eor.w	r8, r8, r0, ror #22
 8004438:	ea8a 6a74 	eor.w	sl, sl, r4, ror #25
 800443c:	44ca      	add	sl, r9
 800443e:	4446      	add	r6, r8
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004440:	ea4f 497b 	mov.w	r9, fp, ror #17
 8004444:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8004448:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 800444c:	44c4      	add	ip, r8
 800444e:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 8004452:	44e1      	add	r9, ip
 8004454:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004458:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 800445c:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 8004460:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8004578 <sha256_process+0x13bc>
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004464:	4451      	add	r1, sl
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004466:	ea84 0905 	eor.w	r9, r4, r5
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 800446a:	4456      	add	r6, sl
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 800446c:	44e0      	add	r8, ip
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 800446e:	ea4f 1afb 	mov.w	sl, fp, ror #7
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004472:	ea01 0909 	and.w	r9, r1, r9
 8004476:	ea89 0905 	eor.w	r9, r9, r5
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 800447a:	ea8a 4abb 	eor.w	sl, sl, fp, ror #18
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 800447e:	4447      	add	r7, r8
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004480:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004484:	444f      	add	r7, r9
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004486:	ea8a 0adb 	eor.w	sl, sl, fp, lsr #3
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 800448a:	ea46 0900 	orr.w	r9, r6, r0
 800448e:	ea09 0903 	and.w	r9, r9, r3
 8004492:	ea4f 1cb1 	mov.w	ip, r1, ror #6
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004496:	44c2      	add	sl, r8
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004498:	ea4f 0bb6 	mov.w	fp, r6, ror #2
 800449c:	ea06 0800 	and.w	r8, r6, r0
 80044a0:	ea8c 2cf1 	eor.w	ip, ip, r1, ror #11
 80044a4:	ea8b 3b76 	eor.w	fp, fp, r6, ror #13
 80044a8:	ea49 0808 	orr.w	r8, r9, r8
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80044ac:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80044b0:	ea8b 5bb6 	eor.w	fp, fp, r6, ror #22
 80044b4:	ea8c 6c71 	eor.w	ip, ip, r1, ror #25
 80044b8:	44bc      	add	ip, r7
 80044ba:	44d8      	add	r8, fp
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80044bc:	ea4f 4779 	mov.w	r7, r9, ror #17
 80044c0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80044c4:	ea87 47f9 	eor.w	r7, r7, r9, ror #19
 80044c8:	44da      	add	sl, fp
 80044ca:	ea87 2999 	eor.w	r9, r7, r9, lsr #10
 80044ce:	44d1      	add	r9, sl
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80044d0:	4462      	add	r2, ip
 80044d2:	44e0      	add	r8, ip
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80044d4:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80044d8:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80044dc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80044e0:	4f21      	ldr	r7, [pc, #132]	; (8004568 <sha256_process+0x13ac>)
 80044e2:	ea81 0b04 	eor.w	fp, r1, r4
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80044e6:	ea4f 19fc 	mov.w	r9, ip, ror #7
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80044ea:	4457      	add	r7, sl
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80044ec:	ea89 49bc 	eor.w	r9, r9, ip, ror #18
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80044f0:	ea02 0b0b 	and.w	fp, r2, fp
 80044f4:	ea8b 0b04 	eor.w	fp, fp, r4
 80044f8:	443d      	add	r5, r7
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80044fa:	ea89 07dc 	eor.w	r7, r9, ip, lsr #3
 80044fe:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004502:	445d      	add	r5, fp
 8004504:	ea48 0b06 	orr.w	fp, r8, r6
 8004508:	ea0b 0b00 	and.w	fp, fp, r0
 800450c:	ea4f 1ab2 	mov.w	sl, r2, ror #6
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004510:	4467      	add	r7, ip
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004512:	ea08 0c06 	and.w	ip, r8, r6
 8004516:	ea8a 2af2 	eor.w	sl, sl, r2, ror #11
 800451a:	ea4b 0c0c 	orr.w	ip, fp, ip
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 800451e:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004522:	ea8a 6a72 	eor.w	sl, sl, r2, ror #25
 8004526:	44aa      	add	sl, r5
 8004528:	ea4f 09b8 	mov.w	r9, r8, ror #2
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 800452c:	ea4f 457b 	mov.w	r5, fp, ror #17
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004530:	ea89 3978 	eor.w	r9, r9, r8, ror #13
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004534:	ea85 45fb 	eor.w	r5, r5, fp, ror #19
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004538:	ea89 59b8 	eor.w	r9, r9, r8, ror #22
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 800453c:	ea85 2b9b 	eor.w	fp, r5, fp, lsr #10
 8004540:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004542:	44cc      	add	ip, r9
 8004544:	44d4      	add	ip, sl
 8004546:	4453      	add	r3, sl
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004548:	442f      	add	r7, r5
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 800454a:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 800454e:	4d07      	ldr	r5, [pc, #28]	; (800456c <sha256_process+0x13b0>)
 8004550:	44bb      	add	fp, r7
 8004552:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
 8004556:	e011      	b.n	800457c <sha256_process+0x13c0>
 8004558:	2e1b2138 	mrccs	1, 0, r2, cr11, cr8, {1}
 800455c:	4d2c6dfc 	stcmi	13, cr6, [ip, #-1008]!	; 0xfffffc10
 8004560:	53380d13 	teqpl	r8, #1216	; 0x4c0
 8004564:	650a7354 	strvs	r7, [sl, #-852]	; 0x354
 8004568:	a2bfe8a1 	adcsge	lr, pc, #10551296	; 0xa10000
 800456c:	a81a664b 	ldmdage	sl, {r0, r1, r3, r6, r9, sl, sp, lr}
 8004570:	766a0abb 			; <UNDEFINED> instruction: 0x766a0abb
 8004574:	81c2c92e 	bichi	ip, r2, lr, lsr #18
 8004578:	92722c85 	rsbsls	r2, r2, #34048	; 0x8500
 800457c:	ea82 0701 	eor.w	r7, r2, r1
 8004580:	445d      	add	r5, fp
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004582:	ea4f 19fa 	mov.w	r9, sl, ror #7
 8004586:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 800458a:	401f      	ands	r7, r3
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 800458c:	ea89 49ba 	eor.w	r9, r9, sl, ror #18
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004590:	442c      	add	r4, r5
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004592:	9d15      	ldr	r5, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004594:	404f      	eors	r7, r1
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004596:	ea89 09db 	eor.w	r9, r9, fp, lsr #3
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 800459a:	ea4c 0b08 	orr.w	fp, ip, r8
 800459e:	ea0b 0b06 	and.w	fp, fp, r6
 80045a2:	ea4f 1ab3 	mov.w	sl, r3, ror #6
 80045a6:	443c      	add	r4, r7
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80045a8:	44a9      	add	r9, r5
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80045aa:	ea4f 07bc 	mov.w	r7, ip, ror #2
 80045ae:	ea0c 0508 	and.w	r5, ip, r8
 80045b2:	ea8a 2af3 	eor.w	sl, sl, r3, ror #11
 80045b6:	ea87 377c 	eor.w	r7, r7, ip, ror #13
 80045ba:	ea4b 0505 	orr.w	r5, fp, r5
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80045be:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80045c2:	ea8a 6a73 	eor.w	sl, sl, r3, ror #25
 80045c6:	ea87 57bc 	eor.w	r7, r7, ip, ror #22
 80045ca:	4454      	add	r4, sl
 80045cc:	443d      	add	r5, r7
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80045ce:	ea4f 4a7b 	mov.w	sl, fp, ror #17
 80045d2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80045d4:	ea8a 4afb 	eor.w	sl, sl, fp, ror #19
 80045d8:	44b9      	add	r9, r7
 80045da:	ea8a 2a9b 	eor.w	sl, sl, fp, lsr #10
 80045de:	44ca      	add	sl, r9
 80045e0:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80045e4:	4420      	add	r0, r4
 80045e6:	4425      	add	r5, r4
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80045e8:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80045ec:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80045ee:	4fee      	ldr	r7, [pc, #952]	; (80049a8 <sha256_process+0x17ec>)
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80045f0:	ea4f 19fb 	mov.w	r9, fp, ror #7
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80045f4:	4427      	add	r7, r4
 80045f6:	ea83 0a02 	eor.w	sl, r3, r2
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80045fa:	ea89 49bb 	eor.w	r9, r9, fp, ror #18
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80045fe:	4439      	add	r1, r7
 8004600:	ea4f 1bb0 	mov.w	fp, r0, ror #6
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004604:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004606:	ea8b 2bf0 	eor.w	fp, fp, r0, ror #11
 800460a:	ea00 0a0a 	and.w	sl, r0, sl
 800460e:	ea8a 0a02 	eor.w	sl, sl, r2
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004612:	ea89 09d7 	eor.w	r9, r9, r7, lsr #3
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004616:	ea8b 6770 	eor.w	r7, fp, r0, ror #25
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 800461a:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 800461e:	4451      	add	r1, sl
 8004620:	ea45 0a0c 	orr.w	sl, r5, ip
 8004624:	ea0a 0a08 	and.w	sl, sl, r8
 8004628:	ea05 040c 	and.w	r4, r5, ip
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 800462c:	44d9      	add	r9, fp
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 800462e:	ea4f 0bb5 	mov.w	fp, r5, ror #2
 8004632:	ea8b 3b75 	eor.w	fp, fp, r5, ror #13
 8004636:	ea4a 0404 	orr.w	r4, sl, r4
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 800463a:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 800463e:	ea8b 5bb5 	eor.w	fp, fp, r5, ror #22
 8004642:	4439      	add	r1, r7
 8004644:	445c      	add	r4, fp
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004646:	ea4f 477a 	mov.w	r7, sl, ror #17
 800464a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800464e:	ea87 47fa 	eor.w	r7, r7, sl, ror #19
 8004652:	44d9      	add	r9, fp
 8004654:	ea87 2a9a 	eor.w	sl, r7, sl, lsr #10
 8004658:	4fd4      	ldr	r7, [pc, #848]	; (80049ac <sha256_process+0x17f0>)
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 800465a:	440c      	add	r4, r1
 800465c:	440e      	add	r6, r1
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 800465e:	44ca      	add	sl, r9
 8004660:	ea80 0103 	eor.w	r1, r0, r3
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004664:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004668:	4457      	add	r7, sl
 800466a:	4031      	ands	r1, r6
 800466c:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
 8004670:	4059      	eors	r1, r3
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004672:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8004676:	ea4f 1bf9 	mov.w	fp, r9, ror #7
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 800467a:	4417      	add	r7, r2
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 800467c:	ea8b 4bb9 	eor.w	fp, fp, r9, ror #18
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004680:	440f      	add	r7, r1
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004682:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8004684:	ea8b 0bda 	eor.w	fp, fp, sl, lsr #3
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004688:	ea44 0a05 	orr.w	sl, r4, r5
 800468c:	ea0a 0a0c 	and.w	sl, sl, ip
 8004690:	ea04 0205 	and.w	r2, r4, r5
 8004694:	ea4f 19b6 	mov.w	r9, r6, ror #6
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004698:	448b      	add	fp, r1
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 800469a:	ea4f 01b4 	mov.w	r1, r4, ror #2
 800469e:	ea89 29f6 	eor.w	r9, r9, r6, ror #11
 80046a2:	ea81 3174 	eor.w	r1, r1, r4, ror #13
 80046a6:	ea4a 0202 	orr.w	r2, sl, r2
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80046aa:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80046ae:	ea89 6976 	eor.w	r9, r9, r6, ror #25
 80046b2:	ea81 51b4 	eor.w	r1, r1, r4, ror #22
 80046b6:	444f      	add	r7, r9
 80046b8:	440a      	add	r2, r1
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80046ba:	ea4f 497a 	mov.w	r9, sl, ror #17
 80046be:	9910      	ldr	r1, [sp, #64]	; 0x40
 80046c0:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
 80046c4:	448b      	add	fp, r1
 80046c6:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 80046ca:	44d9      	add	r9, fp
 80046cc:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80046d0:	44b8      	add	r8, r7
 80046d2:	443a      	add	r2, r7
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80046d4:	49b6      	ldr	r1, [pc, #728]	; (80049b0 <sha256_process+0x17f4>)
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80046d6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80046d8:	ea86 0b00 	eor.w	fp, r6, r0
 80046dc:	4449      	add	r1, r9
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80046de:	ea4f 1af7 	mov.w	sl, r7, ror #7
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80046e2:	ea08 0b0b 	and.w	fp, r8, fp
 80046e6:	ea8b 0b00 	eor.w	fp, fp, r0
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80046ea:	ea8a 4ab7 	eor.w	sl, sl, r7, ror #18
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80046ee:	440b      	add	r3, r1
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80046f0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80046f2:	ea8a 0ad7 	eor.w	sl, sl, r7, lsr #3
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80046f6:	445b      	add	r3, fp
 80046f8:	ea42 0b04 	orr.w	fp, r2, r4
 80046fc:	ea0b 0b05 	and.w	fp, fp, r5
 8004700:	ea4f 19b8 	mov.w	r9, r8, ror #6
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004704:	448a      	add	sl, r1
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004706:	ea4f 07b2 	mov.w	r7, r2, ror #2
 800470a:	ea02 0104 	and.w	r1, r2, r4
 800470e:	ea89 29f8 	eor.w	r9, r9, r8, ror #11
 8004712:	ea87 3772 	eor.w	r7, r7, r2, ror #13
 8004716:	ea4b 0101 	orr.w	r1, fp, r1
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 800471a:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 800471e:	ea89 6978 	eor.w	r9, r9, r8, ror #25
 8004722:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 8004726:	444b      	add	r3, r9
 8004728:	4439      	add	r1, r7
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 800472a:	ea4f 497b 	mov.w	r9, fp, ror #17
 800472e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8004730:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8004734:	44ba      	add	sl, r7
 8004736:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 800473a:	44d1      	add	r9, sl
 800473c:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004740:	449c      	add	ip, r3
 8004742:	4419      	add	r1, r3
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004744:	4f9b      	ldr	r7, [pc, #620]	; (80049b4 <sha256_process+0x17f8>)
 8004746:	9b18      	ldr	r3, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004748:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 800474c:	ea88 0906 	eor.w	r9, r8, r6
 8004750:	441f      	add	r7, r3
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004752:	ea4f 1afb 	mov.w	sl, fp, ror #7
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004756:	ea0c 0909 	and.w	r9, ip, r9
 800475a:	4407      	add	r7, r0
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 800475c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800475e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004760:	ea89 0906 	eor.w	r9, r9, r6
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004764:	ea8a 4abb 	eor.w	sl, sl, fp, ror #18
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004768:	ea4f 1bbc 	mov.w	fp, ip, ror #6
 800476c:	ea8b 2bfc 	eor.w	fp, fp, ip, ror #11
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004770:	ea8a 0ad0 	eor.w	sl, sl, r0, lsr #3
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004774:	444f      	add	r7, r9
 8004776:	ea41 0902 	orr.w	r9, r1, r2
 800477a:	ea8b 607c 	eor.w	r0, fp, ip, ror #25
 800477e:	ea09 0904 	and.w	r9, r9, r4
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004782:	449a      	add	sl, r3
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004784:	ea4f 0bb1 	mov.w	fp, r1, ror #2
 8004788:	ea01 0302 	and.w	r3, r1, r2
 800478c:	ea8b 3b71 	eor.w	fp, fp, r1, ror #13
 8004790:	ea49 0303 	orr.w	r3, r9, r3
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004794:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004798:	ea8b 5bb1 	eor.w	fp, fp, r1, ror #22
 800479c:	4407      	add	r7, r0
 800479e:	445b      	add	r3, fp
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 80047a0:	ea4f 4079 	mov.w	r0, r9, ror #17
 80047a4:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 80047a8:	ea80 40f9 	eor.w	r0, r0, r9, ror #19
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80047ac:	443b      	add	r3, r7
 80047ae:	443d      	add	r5, r7
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 80047b0:	44da      	add	sl, fp
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 80047b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 80047b4:	ea80 2999 	eor.w	r9, r0, r9, lsr #10
 80047b8:	487f      	ldr	r0, [pc, #508]	; (80049b8 <sha256_process+0x17fc>)
 80047ba:	44d1      	add	r9, sl
 80047bc:	ea8c 0b08 	eor.w	fp, ip, r8
 80047c0:	4448      	add	r0, r9
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 80047c2:	ea4f 1af7 	mov.w	sl, r7, ror #7
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 80047c6:	ea05 0b0b 	and.w	fp, r5, fp
 80047ca:	ea8b 0b08 	eor.w	fp, fp, r8
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 80047ce:	ea8a 4ab7 	eor.w	sl, sl, r7, ror #18
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 80047d2:	4406      	add	r6, r0
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 80047d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80047d6:	ea8a 0ad7 	eor.w	sl, sl, r7, lsr #3
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 80047da:	445e      	add	r6, fp
 80047dc:	ea43 0b01 	orr.w	fp, r3, r1
 80047e0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 80047e4:	ea0b 0b02 	and.w	fp, fp, r2
 80047e8:	ea4f 19b5 	mov.w	r9, r5, ror #6
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 80047ec:	4482      	add	sl, r0
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 80047ee:	ea4f 07b3 	mov.w	r7, r3, ror #2
 80047f2:	ea03 0001 	and.w	r0, r3, r1
 80047f6:	ea89 29f5 	eor.w	r9, r9, r5, ror #11
 80047fa:	ea87 3773 	eor.w	r7, r7, r3, ror #13
 80047fe:	ea4b 0000 	orr.w	r0, fp, r0
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004802:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004806:	ea89 6975 	eor.w	r9, r9, r5, ror #25
 800480a:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
 800480e:	444e      	add	r6, r9
 8004810:	4438      	add	r0, r7
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004812:	ea4f 497b 	mov.w	r9, fp, ror #17
 8004816:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8004818:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 800481c:	44ba      	add	sl, r7
 800481e:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 8004822:	44d1      	add	r9, sl
 8004824:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004828:	4430      	add	r0, r6
 800482a:	4434      	add	r4, r6
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 800482c:	4f63      	ldr	r7, [pc, #396]	; (80049bc <sha256_process+0x1800>)
 800482e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004830:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004834:	4437      	add	r7, r6
 8004836:	ea85 0a0c 	eor.w	sl, r5, ip
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 800483a:	ea4f 1bf9 	mov.w	fp, r9, ror #7
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 800483e:	4447      	add	r7, r8
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004840:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004844:	ea04 0a0a 	and.w	sl, r4, sl
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004848:	ea8b 4bb9 	eor.w	fp, fp, r9, ror #18
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 800484c:	ea8a 0a0c 	eor.w	sl, sl, ip
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004850:	ea8b 0bd8 	eor.w	fp, fp, r8, lsr #3
 8004854:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004858:	4457      	add	r7, sl
 800485a:	ea40 0a03 	orr.w	sl, r0, r3
 800485e:	ea0a 0a01 	and.w	sl, sl, r1
 8004862:	ea00 0603 	and.w	r6, r0, r3
 8004866:	ea4f 19b4 	mov.w	r9, r4, ror #6
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 800486a:	44d8      	add	r8, fp
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 800486c:	ea4f 0bb0 	mov.w	fp, r0, ror #2
 8004870:	ea89 29f4 	eor.w	r9, r9, r4, ror #11
 8004874:	ea8b 3b70 	eor.w	fp, fp, r0, ror #13
 8004878:	ea4a 0606 	orr.w	r6, sl, r6
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 800487c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004880:	ea8b 5bb0 	eor.w	fp, fp, r0, ror #22
 8004884:	ea89 6974 	eor.w	r9, r9, r4, ror #25
 8004888:	44b9      	add	r9, r7
 800488a:	445e      	add	r6, fp
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 800488c:	ea4f 477a 	mov.w	r7, sl, ror #17
 8004890:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8004894:	ea87 47fa 	eor.w	r7, r7, sl, ror #19
 8004898:	44d8      	add	r8, fp
 800489a:	ea87 2a9a 	eor.w	sl, r7, sl, lsr #10
 800489e:	44c2      	add	sl, r8
 80048a0:	4f47      	ldr	r7, [pc, #284]	; (80049c0 <sha256_process+0x1804>)
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 80048a2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 80048a6:	444a      	add	r2, r9
 80048a8:	444e      	add	r6, r9
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 80048aa:	ea84 0905 	eor.w	r9, r4, r5
 80048ae:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 80048b2:	ea4f 1bf8 	mov.w	fp, r8, ror #7
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 80048b6:	4457      	add	r7, sl
 80048b8:	ea02 0909 	and.w	r9, r2, r9
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 80048bc:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 80048c0:	ea89 0905 	eor.w	r9, r9, r5
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 80048c4:	ea8b 4bb8 	eor.w	fp, fp, r8, ror #18
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 80048c8:	4467      	add	r7, ip
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 80048ca:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 80048ce:	444f      	add	r7, r9
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 80048d0:	ea8b 0bda 	eor.w	fp, fp, sl, lsr #3
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 80048d4:	ea46 0900 	orr.w	r9, r6, r0
 80048d8:	ea09 0903 	and.w	r9, r9, r3
 80048dc:	ea4f 18b2 	mov.w	r8, r2, ror #6
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 80048e0:	44e3      	add	fp, ip
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 80048e2:	ea4f 0ab6 	mov.w	sl, r6, ror #2
 80048e6:	ea06 0c00 	and.w	ip, r6, r0
 80048ea:	ea88 28f2 	eor.w	r8, r8, r2, ror #11
 80048ee:	ea8a 3a76 	eor.w	sl, sl, r6, ror #13
 80048f2:	ea49 0c0c 	orr.w	ip, r9, ip
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 80048f6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 80048fa:	ea8a 5ab6 	eor.w	sl, sl, r6, ror #22
 80048fe:	ea88 6872 	eor.w	r8, r8, r2, ror #25
 8004902:	44b8      	add	r8, r7
 8004904:	44d4      	add	ip, sl
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004906:	ea4f 4779 	mov.w	r7, r9, ror #17
 800490a:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 800490e:	ea87 47f9 	eor.w	r7, r7, r9, ror #19
 8004912:	ea87 2999 	eor.w	r9, r7, r9, lsr #10
 8004916:	44d3      	add	fp, sl
 8004918:	4f2a      	ldr	r7, [pc, #168]	; (80049c4 <sha256_process+0x1808>)
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 800491a:	44c4      	add	ip, r8
 800491c:	4441      	add	r1, r8
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 800491e:	44cb      	add	fp, r9
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004920:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004924:	445f      	add	r7, fp
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004926:	ea4f 1af8 	mov.w	sl, r8, ror #7
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 800492a:	443d      	add	r5, r7
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 800492c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 800492e:	ea82 0904 	eor.w	r9, r2, r4
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004932:	ea8a 4ab8 	eor.w	sl, sl, r8, ror #18
 8004936:	ea8a 0ad7 	eor.w	sl, sl, r7, lsr #3
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 800493a:	ea01 0909 	and.w	r9, r1, r9
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 800493e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004940:	ea4f 18b1 	mov.w	r8, r1, ror #6
 8004944:	ea89 0904 	eor.w	r9, r9, r4
 8004948:	ea88 28f1 	eor.w	r8, r8, r1, ror #11
 800494c:	444d      	add	r5, r9
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 800494e:	4457      	add	r7, sl
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004950:	ea4c 0906 	orr.w	r9, ip, r6
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004954:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004958:	ea88 6871 	eor.w	r8, r8, r1, ror #25
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 800495c:	9709      	str	r7, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 800495e:	44a8      	add	r8, r5
 8004960:	ea09 0900 	and.w	r9, r9, r0
 8004964:	ea0c 0506 	and.w	r5, ip, r6
 8004968:	ea4f 07bc 	mov.w	r7, ip, ror #2
 800496c:	ea87 377c 	eor.w	r7, r7, ip, ror #13
 8004970:	ea49 0505 	orr.w	r5, r9, r5
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004974:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004978:	ea87 57bc 	eor.w	r7, r7, ip, ror #22
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 800497c:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004980:	443d      	add	r5, r7
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004982:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 8004986:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8004988:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 800498c:	4445      	add	r5, r8
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 800498e:	44ba      	add	sl, r7
 8004990:	44d1      	add	r9, sl
 8004992:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004996:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 800499a:	4f0b      	ldr	r7, [pc, #44]	; (80049c8 <sha256_process+0x180c>)
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 800499c:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 80049a0:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 80049a4:	e012      	b.n	80049cc <sha256_process+0x1810>
 80049a6:	bf00      	nop
 80049a8:	c24b8b70 	subgt	r8, fp, #112, 22	; 0x1c000
 80049ac:	c76c51a3 	strbgt	r5, [ip, -r3, lsr #3]!
 80049b0:	d192e819 	orrsle	lr, r2, r9, lsl r8
 80049b4:	d6990624 	ldrle	r0, [r9], r4, lsr #12
 80049b8:	f40e3585 	vst3.32	{d3,d5,d7}, [lr], r5
 80049bc:	106aa070 	rsbne	sl, sl, r0, ror r0
 80049c0:	19a4c116 	stmibne	r4!, {r1, r2, r4, r8, lr, pc}
 80049c4:	1e376c08 	cdpne	12, 3, cr6, cr7, cr8, {0}
 80049c8:	2748774c 	strbcs	r7, [r8, -ip, asr #14]
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 80049cc:	4443      	add	r3, r8
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 80049ce:	444f      	add	r7, r9
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 80049d0:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 80049d4:	443c      	add	r4, r7
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 80049d6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 80049d8:	ea81 0802 	eor.w	r8, r1, r2
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 80049dc:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 80049e0:	ea03 0808 	and.w	r8, r3, r8
 80049e4:	ea4f 19b3 	mov.w	r9, r3, ror #6
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 80049e8:	ea8a 0ad7 	eor.w	sl, sl, r7, lsr #3
 80049ec:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 80049ee:	ea88 0802 	eor.w	r8, r8, r2
 80049f2:	ea89 29f3 	eor.w	r9, r9, r3, ror #11
 80049f6:	ea89 6973 	eor.w	r9, r9, r3, ror #25
 80049fa:	4444      	add	r4, r8
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 80049fc:	44ba      	add	sl, r7
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 80049fe:	ea45 080c 	orr.w	r8, r5, ip
 8004a02:	ea4f 07b5 	mov.w	r7, r5, ror #2
 8004a06:	444c      	add	r4, r9
 8004a08:	ea08 0806 	and.w	r8, r8, r6
 8004a0c:	ea05 090c 	and.w	r9, r5, ip
 8004a10:	ea87 3775 	eor.w	r7, r7, r5, ror #13
 8004a14:	ea87 57b5 	eor.w	r7, r7, r5, ror #22
 8004a18:	ea48 0809 	orr.w	r8, r8, r9
 8004a1c:	44b8      	add	r8, r7
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004a1e:	ea4f 497b 	mov.w	r9, fp, ror #17
 8004a22:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8004a24:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8004a28:	44ba      	add	sl, r7
 8004a2a:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 8004a2e:	44d1      	add	r9, sl
 8004a30:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004a34:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004a38:	4fe8      	ldr	r7, [pc, #928]	; (8004ddc <sha256_process+0x1c20>)
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004a3a:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004a3e:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004a42:	44a0      	add	r8, r4
 8004a44:	4420      	add	r0, r4
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004a46:	ea83 0401 	eor.w	r4, r3, r1
 8004a4a:	444f      	add	r7, r9
 8004a4c:	4004      	ands	r4, r0
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004a4e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004a52:	404c      	eors	r4, r1
 8004a54:	4417      	add	r7, r2
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004a56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004a58:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004a5c:	4427      	add	r7, r4
 8004a5e:	ea4f 19b0 	mov.w	r9, r0, ror #6
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004a62:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8004a64:	ea8a 0ad2 	eor.w	sl, sl, r2, lsr #3
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004a68:	ea89 29f0 	eor.w	r9, r9, r0, ror #11
 8004a6c:	ea48 0205 	orr.w	r2, r8, r5
 8004a70:	ea89 6970 	eor.w	r9, r9, r0, ror #25
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004a74:	4454      	add	r4, sl
 8004a76:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8004a7a:	9409      	str	r4, [sp, #36]	; 0x24
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004a7c:	444f      	add	r7, r9
 8004a7e:	ea02 020c 	and.w	r2, r2, ip
 8004a82:	ea08 0905 	and.w	r9, r8, r5
 8004a86:	ea4f 04b8 	mov.w	r4, r8, ror #2
 8004a8a:	ea84 3478 	eor.w	r4, r4, r8, ror #13
 8004a8e:	ea42 0209 	orr.w	r2, r2, r9
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004a92:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004a96:	ea84 54b8 	eor.w	r4, r4, r8, ror #22
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004a9a:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004a9e:	4422      	add	r2, r4
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004aa0:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 8004aa4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8004aa6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004aaa:	443a      	add	r2, r7
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004aac:	44a2      	add	sl, r4
 8004aae:	44d1      	add	r9, sl
 8004ab0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004ab4:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004ab8:	4cc9      	ldr	r4, [pc, #804]	; (8004de0 <sha256_process+0x1c24>)
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004aba:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004abe:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004ac2:	443e      	add	r6, r7
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004ac4:	444c      	add	r4, r9
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004ac6:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004aca:	4421      	add	r1, r4
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004acc:	9c11      	ldr	r4, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004ace:	ea80 0703 	eor.w	r7, r0, r3
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004ad2:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
 8004ad6:	ea8a 0ad4 	eor.w	sl, sl, r4, lsr #3
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004ada:	4037      	ands	r7, r6
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004adc:	9c10      	ldr	r4, [sp, #64]	; 0x40
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004ade:	ea4f 19b6 	mov.w	r9, r6, ror #6
 8004ae2:	405f      	eors	r7, r3
 8004ae4:	ea89 29f6 	eor.w	r9, r9, r6, ror #11
 8004ae8:	ea89 6976 	eor.w	r9, r9, r6, ror #25
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004aec:	4454      	add	r4, sl
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004aee:	440f      	add	r7, r1
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004af0:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004af4:	ea42 0108 	orr.w	r1, r2, r8
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004af8:	9409      	str	r4, [sp, #36]	; 0x24
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004afa:	444f      	add	r7, r9
 8004afc:	4029      	ands	r1, r5
 8004afe:	ea02 0908 	and.w	r9, r2, r8
 8004b02:	ea4f 04b2 	mov.w	r4, r2, ror #2
 8004b06:	ea84 3472 	eor.w	r4, r4, r2, ror #13
 8004b0a:	ea41 0109 	orr.w	r1, r1, r9
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004b0e:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004b12:	ea84 54b2 	eor.w	r4, r4, r2, ror #22
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004b16:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004b1a:	4421      	add	r1, r4
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004b1c:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 8004b20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004b22:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004b26:	4439      	add	r1, r7
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004b28:	44a2      	add	sl, r4
 8004b2a:	44d1      	add	r9, sl
 8004b2c:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004b30:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004b34:	4cab      	ldr	r4, [pc, #684]	; (8004de4 <sha256_process+0x1c28>)
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004b36:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004b3a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004b3e:	44bc      	add	ip, r7
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004b40:	ea86 0700 	eor.w	r7, r6, r0
 8004b44:	444c      	add	r4, r9
 8004b46:	ea0c 0707 	and.w	r7, ip, r7
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004b4a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004b4e:	4047      	eors	r7, r0
 8004b50:	4423      	add	r3, r4
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004b52:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004b54:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004b58:	443b      	add	r3, r7
 8004b5a:	ea4f 19bc 	mov.w	r9, ip, ror #6
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004b5e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8004b60:	ea8a 0ad4 	eor.w	sl, sl, r4, lsr #3
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004b64:	ea89 29fc 	eor.w	r9, r9, ip, ror #11
 8004b68:	ea41 0402 	orr.w	r4, r1, r2
 8004b6c:	ea89 697c 	eor.w	r9, r9, ip, ror #25
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004b70:	4457      	add	r7, sl
 8004b72:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8004b76:	9709      	str	r7, [sp, #36]	; 0x24
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004b78:	444b      	add	r3, r9
 8004b7a:	ea04 0408 	and.w	r4, r4, r8
 8004b7e:	ea01 0902 	and.w	r9, r1, r2
 8004b82:	ea4f 07b1 	mov.w	r7, r1, ror #2
 8004b86:	ea87 3771 	eor.w	r7, r7, r1, ror #13
 8004b8a:	ea44 0409 	orr.w	r4, r4, r9
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004b8e:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004b92:	ea87 57b1 	eor.w	r7, r7, r1, ror #22
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004b96:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004b9a:	443c      	add	r4, r7
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004b9c:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 8004ba0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004ba2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004ba6:	441c      	add	r4, r3
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004ba8:	44ba      	add	sl, r7
 8004baa:	44d1      	add	r9, sl
 8004bac:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004bb0:	441d      	add	r5, r3
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004bb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004bb4:	4f8c      	ldr	r7, [pc, #560]	; (8004de8 <sha256_process+0x1c2c>)
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004bb6:	ea4f 19f3 	mov.w	r9, r3, ror #7
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004bba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bbc:	ea8c 0a06 	eor.w	sl, ip, r6
 8004bc0:	441f      	add	r7, r3
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004bc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004bc4:	4438      	add	r0, r7
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004bc6:	ea89 49b3 	eor.w	r9, r9, r3, ror #18
 8004bca:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004bcc:	ea4f 13b5 	mov.w	r3, r5, ror #6
 8004bd0:	ea83 23f5 	eor.w	r3, r3, r5, ror #11
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004bd4:	ea89 09d7 	eor.w	r9, r9, r7, lsr #3
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004bd8:	ea05 0a0a 	and.w	sl, r5, sl
 8004bdc:	ea83 6775 	eor.w	r7, r3, r5, ror #25
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004be0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004be2:	ea8a 0a06 	eor.w	sl, sl, r6
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004be6:	444b      	add	r3, r9
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004be8:	4450      	add	r0, sl
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004bea:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004bee:	ea44 0a01 	orr.w	sl, r4, r1
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004bf2:	9309      	str	r3, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004bf4:	4438      	add	r0, r7
 8004bf6:	ea0a 0a02 	and.w	sl, sl, r2
 8004bfa:	ea04 0701 	and.w	r7, r4, r1
 8004bfe:	ea4f 03b4 	mov.w	r3, r4, ror #2
 8004c02:	ea83 3374 	eor.w	r3, r3, r4, ror #13
 8004c06:	ea4a 0a07 	orr.w	sl, sl, r7
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004c0a:	ea4f 4779 	mov.w	r7, r9, ror #17
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004c0e:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004c12:	ea87 47f9 	eor.w	r7, r7, r9, ror #19
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004c16:	449a      	add	sl, r3
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004c18:	ea87 2799 	eor.w	r7, r7, r9, lsr #10
 8004c1c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004c1e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004c22:	4482      	add	sl, r0
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004c24:	4499      	add	r9, r3
 8004c26:	444f      	add	r7, r9
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004c28:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004c2c:	9712      	str	r7, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004c2e:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004c32:	4480      	add	r8, r0
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004c34:	4b6d      	ldr	r3, [pc, #436]	; (8004dec <sha256_process+0x1c30>)
 8004c36:	9812      	ldr	r0, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004c38:	ea4f 17fa 	mov.w	r7, sl, ror #7
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004c3c:	4403      	add	r3, r0
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004c3e:	ea87 47ba 	eor.w	r7, r7, sl, ror #18
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004c42:	ea85 090c 	eor.w	r9, r5, ip
 8004c46:	441e      	add	r6, r3
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004c48:	ea87 07da 	eor.w	r7, r7, sl, lsr #3
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004c4e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004c52:	ea08 0909 	and.w	r9, r8, r9
 8004c56:	ea89 090c 	eor.w	r9, r9, ip
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004c5a:	4457      	add	r7, sl
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004c5c:	ea4f 0ab3 	mov.w	sl, r3, ror #2
 8004c60:	444e      	add	r6, r9
 8004c62:	ea8a 3a73 	eor.w	sl, sl, r3, ror #13
 8004c66:	ea43 0904 	orr.w	r9, r3, r4
 8004c6a:	ea8a 5ab3 	eor.w	sl, sl, r3, ror #22
 8004c6e:	ea4f 10b8 	mov.w	r0, r8, ror #6
 8004c72:	4023      	ands	r3, r4
 8004c74:	ea09 0901 	and.w	r9, r9, r1
 8004c78:	ea80 20f8 	eor.w	r0, r0, r8, ror #11
 8004c7c:	ea49 0903 	orr.w	r9, r9, r3
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004c80:	9b11      	ldr	r3, [sp, #68]	; 0x44
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004c82:	ea80 6078 	eor.w	r0, r0, r8, ror #25
 8004c86:	4406      	add	r6, r0
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004c88:	ea4f 4073 	mov.w	r0, r3, ror #17
 8004c8c:	ea80 40f3 	eor.w	r0, r0, r3, ror #19
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004c90:	44d1      	add	r9, sl
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004c92:	445f      	add	r7, fp
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004c94:	44b1      	add	r9, r6
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004c96:	ea80 2093 	eor.w	r0, r0, r3, lsr #10
 8004c9a:	4b55      	ldr	r3, [pc, #340]	; (8004df0 <sha256_process+0x1c34>)
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004c9c:	4432      	add	r2, r6
 8004c9e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004ca2:	1838      	adds	r0, r7, r0
 8004ca4:	ea88 0605 	eor.w	r6, r8, r5
 8004ca8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004cac:	4403      	add	r3, r0
 8004cae:	4016      	ands	r6, r2
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004cb0:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004cb4:	406e      	eors	r6, r5
 8004cb6:	449c      	add	ip, r3
 8004cb8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8004cbc:	44b4      	add	ip, r6
 8004cbe:	ea4f 06ba 	mov.w	r6, sl, ror #2
 8004cc2:	9013      	str	r0, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004cc4:	ea4f 17f9 	mov.w	r7, r9, ror #7
 8004cc8:	9815      	ldr	r0, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004cca:	ea86 367a 	eor.w	r6, r6, sl, ror #13
 8004cce:	ea4a 030b 	orr.w	r3, sl, fp
 8004cd2:	ea86 56ba 	eor.w	r6, r6, sl, ror #22
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004cd6:	ea87 47b9 	eor.w	r7, r7, r9, ror #18
 8004cda:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8004cde:	ea87 07d0 	eor.w	r7, r7, r0, lsr #3
 8004ce2:	4457      	add	r7, sl
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004ce4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004ce8:	ea4f 19b2 	mov.w	r9, r2, ror #6
 8004cec:	4023      	ands	r3, r4
 8004cee:	ea0a 000b 	and.w	r0, sl, fp
 8004cf2:	ea89 29f2 	eor.w	r9, r9, r2, ror #11
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004cf6:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004cfa:	ea89 6972 	eor.w	r9, r9, r2, ror #25
 8004cfe:	4318      	orrs	r0, r3
 8004d00:	44cc      	add	ip, r9
 8004d02:	4430      	add	r0, r6
 8004d04:	4460      	add	r0, ip
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004d06:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8004d08:	ea4f 437b 	mov.w	r3, fp, ror #17
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004d0c:	900d      	str	r0, [sp, #52]	; 0x34
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004d0e:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004d12:	ea83 43fb 	eor.w	r3, r3, fp, ror #19
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004d16:	4461      	add	r1, ip
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004d18:	ea83 239b 	eor.w	r3, r3, fp, lsr #10
 8004d1c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8004d20:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8004d24:	4437      	add	r7, r6
 8004d26:	441f      	add	r7, r3
 8004d28:	4e32      	ldr	r6, [pc, #200]	; (8004df4 <sha256_process+0x1c38>)
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004d2a:	ea4f 13fa 	mov.w	r3, sl, ror #7
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004d2e:	ea82 0908 	eor.w	r9, r2, r8
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004d32:	ea83 43ba 	eor.w	r3, r3, sl, ror #18
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004d36:	ea4b 0a0c 	orr.w	sl, fp, ip
 8004d3a:	ea4f 0cbb 	mov.w	ip, fp, ror #2
 8004d3e:	443e      	add	r6, r7
 8004d40:	ea01 0909 	and.w	r9, r1, r9
 8004d44:	ea8c 3c7b 	eor.w	ip, ip, fp, ror #13
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004d48:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004d4c:	ea89 0908 	eor.w	r9, r9, r8
 8004d50:	4435      	add	r5, r6
 8004d52:	444d      	add	r5, r9
 8004d54:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004d56:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004d5a:	ea83 03db 	eor.w	r3, r3, fp, lsr #3
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004d5e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004d62:	ea0a 0a06 	and.w	sl, sl, r6
 8004d66:	ea09 060b 	and.w	r6, r9, fp
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004d6a:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004d6e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8004d72:	ea4f 10b1 	mov.w	r0, r1, ror #6
 8004d76:	ea8c 5cbb 	eor.w	ip, ip, fp, ror #22
 8004d7a:	ea80 20f1 	eor.w	r0, r0, r1, ror #11
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004d7e:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004d82:	ea4a 0a06 	orr.w	sl, sl, r6
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004d86:	ea4f 4679 	mov.w	r6, r9, ror #17
 8004d8a:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004d8e:	ea80 6071 	eor.w	r0, r0, r1, ror #25
 8004d92:	44e2      	add	sl, ip
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004d94:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004d98:	4428      	add	r0, r5
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004d9a:	ea86 46fb 	eor.w	r6, r6, fp, ror #19
 8004d9e:	444b      	add	r3, r9
 8004da0:	ea86 259b 	eor.w	r5, r6, fp, lsr #10
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004da4:	4482      	add	sl, r0
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004da6:	4463      	add	r3, ip
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004da8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004dac:	442b      	add	r3, r5
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004dae:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004db0:	4404      	add	r4, r0
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004db2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004db6:	ea4f 10f5 	mov.w	r0, r5, ror #7
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004dba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004dbc:	4e0e      	ldr	r6, [pc, #56]	; (8004df8 <sha256_process+0x1c3c>)
 8004dbe:	ea4b 0c05 	orr.w	ip, fp, r5
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004dc2:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004dc6:	441e      	add	r6, r3
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004dc8:	ea80 40bb 	eor.w	r0, r0, fp, ror #18
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004dcc:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8004dd0:	4446      	add	r6, r8
 8004dd2:	ea4f 05bb 	mov.w	r5, fp, ror #2
 8004dd6:	ea85 357b 	eor.w	r5, r5, fp, ror #13
 8004dda:	e00f      	b.n	8004dfc <sha256_process+0x1c40>
 8004ddc:	34b0bcb5 	ldrtcc	fp, [r0], #3253	; 0xcb5
 8004de0:	391c0cb3 	ldmdbcc	ip, {r0, r1, r4, r5, r7, sl, fp}
 8004de4:	4ed8aa4a 	vfnmami.f32	s21, s16, s20
 8004de8:	5b9cca4f 	blpl	673772c <__Stack_Size+0x6736f2c>
 8004dec:	682e6ff3 	stmdavs	lr!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 8004df0:	748f82ee 	strvc	r8, [pc], #750	; 8004df8 <sha256_process+0x1c3c>
 8004df4:	78a5636f 	stmiavc	r5!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}
 8004df8:	84c87814 	strbhi	r7, [r8], #2068	; 0x814
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004dfc:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004e00:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004e04:	ea80 00db 	eor.w	r0, r0, fp, lsr #3
 8004e08:	9014      	str	r0, [sp, #80]	; 0x50
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004e0a:	ea0c 0c08 	and.w	ip, ip, r8
 8004e0e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004e10:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8004e14:	ea81 0a02 	eor.w	sl, r1, r2
 8004e18:	ea00 0b08 	and.w	fp, r0, r8
 8004e1c:	ea4c 0c0b 	orr.w	ip, ip, fp
 8004e20:	ea85 55b0 	eor.w	r5, r5, r0, ror #22
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004e24:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 8004e28:	9814      	ldr	r0, [sp, #80]	; 0x50
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004e2a:	ea04 0a0a 	and.w	sl, r4, sl
 8004e2e:	ea4f 19b4 	mov.w	r9, r4, ror #6
 8004e32:	ea8a 0a02 	eor.w	sl, sl, r2
 8004e36:	ea89 29f4 	eor.w	r9, r9, r4, ror #11
 8004e3a:	44b2      	add	sl, r6
 8004e3c:	ea89 6974 	eor.w	r9, r9, r4, ror #25
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004e40:	ea4f 4677 	mov.w	r6, r7, ror #17
 8004e44:	4458      	add	r0, fp
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004e46:	eb0c 0b05 	add.w	fp, ip, r5
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004e4a:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004e4e:	eb0a 0809 	add.w	r8, sl, r9
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004e52:	ea86 46f7 	eor.w	r6, r6, r7, ror #19
 8004e56:	ea86 2697 	eor.w	r6, r6, r7, lsr #10
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004e5a:	44c3      	add	fp, r8
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004e5c:	9f18      	ldr	r7, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004e5e:	4460      	add	r0, ip
 8004e60:	4daa      	ldr	r5, [pc, #680]	; (800510c <sha256_process+0x1f50>)
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004e62:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004e66:	4430      	add	r0, r6
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004e68:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8004e6c:	44c4      	add	ip, r8
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004e6e:	ea4f 16f7 	mov.w	r6, r7, ror #7
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004e72:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8004e76:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004e78:	4405      	add	r5, r0
 8004e7a:	1955      	adds	r5, r2, r5
 8004e7c:	950f      	str	r5, [sp, #60]	; 0x3c
 8004e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e80:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004e82:	ea48 0907 	orr.w	r9, r8, r7
 8004e86:	ea4f 07b8 	mov.w	r7, r8, ror #2
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004e8a:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004e8e:	ea84 0b01 	eor.w	fp, r4, r1
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004e92:	ea86 46b8 	eor.w	r6, r6, r8, ror #18
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004e96:	ea02 0805 	and.w	r8, r2, r5
 8004e9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004e9e:	ea09 0902 	and.w	r9, r9, r2
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004ea2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004ea4:	ea0c 0b0b 	and.w	fp, ip, fp
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004ea8:	ea86 06d2 	eor.w	r6, r6, r2, lsr #3
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004eac:	ea49 0808 	orr.w	r8, r9, r8
 8004eb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004eb2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004eb6:	ea4f 1abc 	mov.w	sl, ip, ror #6
 8004eba:	ea8b 0b01 	eor.w	fp, fp, r1
 8004ebe:	ea87 3775 	eor.w	r7, r7, r5, ror #13
 8004ec2:	4493      	add	fp, r2
 8004ec4:	ea87 57b9 	eor.w	r7, r7, r9, ror #22
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004ec8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004eca:	ea8a 2afc 	eor.w	sl, sl, ip, ror #11
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004ece:	ea4f 4573 	mov.w	r5, r3, ror #17
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004ed2:	ea8a 6a7c 	eor.w	sl, sl, ip, ror #25
 8004ed6:	44b8      	add	r8, r7
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004ed8:	9f10      	ldr	r7, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004eda:	44da      	add	sl, fp
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004edc:	4416      	add	r6, r2
 8004ede:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 8004ee2:	443e      	add	r6, r7
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004ee4:	44d0      	add	r8, sl
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004ee6:	ea85 2593 	eor.w	r5, r5, r3, lsr #10
 8004eea:	4f89      	ldr	r7, [pc, #548]	; (8005110 <sha256_process+0x1f54>)
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004eec:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004ef0:	1975      	adds	r5, r6, r5
 8004ef2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004ef4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004ef8:	950f      	str	r5, [sp, #60]	; 0x3c
 8004efa:	442f      	add	r7, r5
 8004efc:	9d09      	ldr	r5, [sp, #36]	; 0x24
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004efe:	ea4f 18f9 	mov.w	r8, r9, ror #7
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004f02:	ea4f 06b3 	mov.w	r6, r3, ror #2
 8004f06:	ea43 0905 	orr.w	r9, r3, r5
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004f0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004f0e:	ea88 48b3 	eor.w	r8, r8, r3, ror #18
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004f12:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8004f14:	4452      	add	r2, sl
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004f16:	ea8c 0b04 	eor.w	fp, ip, r4
 8004f1a:	ea02 0b0b 	and.w	fp, r2, fp
 8004f1e:	4439      	add	r1, r7
 8004f20:	ea03 0705 	and.w	r7, r3, r5
 8004f24:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004f26:	ea8b 0b04 	eor.w	fp, fp, r4
 8004f2a:	ea86 3673 	eor.w	r6, r6, r3, ror #13
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004f30:	ea09 0905 	and.w	r9, r9, r5
 8004f34:	4459      	add	r1, fp
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004f36:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004f3a:	ea4f 1ab2 	mov.w	sl, r2, ror #6
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004f3e:	ea88 08d3 	eor.w	r8, r8, r3, lsr #3
 8004f42:	ea4f 4570 	mov.w	r5, r0, ror #17
 8004f46:	9b11      	ldr	r3, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004f48:	ea49 0707 	orr.w	r7, r9, r7
 8004f4c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8004f50:	ea8a 2af2 	eor.w	sl, sl, r2, ror #11
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004f54:	44d8      	add	r8, fp
 8004f56:	ea85 45f0 	eor.w	r5, r5, r0, ror #19
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004f5a:	ea8a 6a72 	eor.w	sl, sl, r2, ror #25
 8004f5e:	ea86 56b9 	eor.w	r6, r6, r9, ror #22
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004f62:	4498      	add	r8, r3
 8004f64:	ea85 2590 	eor.w	r5, r5, r0, lsr #10
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004f68:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004f6a:	4451      	add	r1, sl
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004f6c:	4445      	add	r5, r8
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004f6e:	4437      	add	r7, r6
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004f70:	950d      	str	r5, [sp, #52]	; 0x34
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8004f72:	187b      	adds	r3, r7, r1
 8004f74:	4408      	add	r0, r1
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8004f76:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004f78:	4e66      	ldr	r6, [pc, #408]	; (8005114 <sha256_process+0x1f58>)
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8004f7a:	ea4f 18f1 	mov.w	r8, r1, ror #7
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004f7e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004f80:	442e      	add	r6, r5
 8004f82:	ea4f 17b0 	mov.w	r7, r0, ror #6
 8004f86:	4434      	add	r4, r6
 8004f88:	ea87 26f0 	eor.w	r6, r7, r0, ror #11
 8004f8c:	ea03 0701 	and.w	r7, r3, r1
 8004f90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f92:	ea43 0a09 	orr.w	sl, r3, r9
 8004f96:	ea0a 0a01 	and.w	sl, sl, r1
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8004f9a:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004f9c:	ea82 0b0c 	eor.w	fp, r2, ip
 8004fa0:	ea4a 0a07 	orr.w	sl, sl, r7
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8004fa4:	4d5c      	ldr	r5, [pc, #368]	; (8005118 <sha256_process+0x1f5c>)
 8004fa6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004fa8:	ea00 0b0b 	and.w	fp, r0, fp
 8004fac:	ea4f 09b3 	mov.w	r9, r3, ror #2
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8004fb0:	ea88 48b1 	eor.w	r8, r8, r1, ror #18
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004fb4:	ea8b 0b0c 	eor.w	fp, fp, ip
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8004fb8:	443d      	add	r5, r7
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004fba:	ea89 3973 	eor.w	r9, r9, r3, ror #13
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8004fbe:	ea88 08d1 	eor.w	r8, r8, r1, lsr #3
 8004fc2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004fc4:	ea86 6670 	eor.w	r6, r6, r0, ror #25
 8004fc8:	ea89 59b3 	eor.w	r9, r9, r3, ror #22
 8004fcc:	445c      	add	r4, fp
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8004fce:	44a8      	add	r8, r5
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004fd0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004fd2:	4434      	add	r4, r6
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8004fd4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004fd6:	44ca      	add	sl, r9
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8004fd8:	ea4f 4b71 	mov.w	fp, r1, ror #17
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004fdc:	4425      	add	r5, r4
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8004fde:	ea8b 4bf1 	eor.w	fp, fp, r1, ror #19
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8004fe2:	eb0a 0104 	add.w	r1, sl, r4
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8004fe6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004fe8:	ea8b 2697 	eor.w	r6, fp, r7, lsr #10
 8004fec:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8004ff0:	44a0      	add	r8, r4
 8004ff2:	ea41 0403 	orr.w	r4, r1, r3
 8004ff6:	ea04 040b 	and.w	r4, r4, fp
 8004ffa:	940b      	str	r4, [sp, #44]	; 0x2c
 8004ffc:	ea80 0902 	eor.w	r9, r0, r2
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005000:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005002:	4446      	add	r6, r8
 8005004:	ea05 0909 	and.w	r9, r5, r9
 8005008:	4466      	add	r6, ip
 800500a:	ea4f 0ab1 	mov.w	sl, r1, ror #2
 800500e:	ea4f 18b5 	mov.w	r8, r5, ror #6
 8005012:	ea89 0902 	eor.w	r9, r9, r2
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005016:	ea4f 1cf4 	mov.w	ip, r4, ror #7
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 800501a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800501c:	ea01 0b03 	and.w	fp, r1, r3
 8005020:	44b1      	add	r9, r6
 8005022:	ea8a 3a71 	eor.w	sl, sl, r1, ror #13
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005026:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005028:	ea88 28f5 	eor.w	r8, r8, r5, ror #11
 800502c:	ea8a 5ab1 	eor.w	sl, sl, r1, ror #22
 8005030:	ea88 6875 	eor.w	r8, r8, r5, ror #25
 8005034:	ea44 0b0b 	orr.w	fp, r4, fp
 8005038:	eb0b 040a 	add.w	r4, fp, sl
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 800503c:	ea8c 4cb6 	eor.w	ip, ip, r6, ror #18
 8005040:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005044:	eb09 0608 	add.w	r6, r9, r8
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005048:	4f34      	ldr	r7, [pc, #208]	; (800511c <sha256_process+0x1f60>)
 800504a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800504e:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8005052:	4447      	add	r7, r8
 8005054:	ea4f 487a 	mov.w	r8, sl, ror #17
 8005058:	ea8c 0cd9 	eor.w	ip, ip, r9, lsr #3
 800505c:	ea88 48fa 	eor.w	r8, r8, sl, ror #19
 8005060:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005064:	4467      	add	r7, ip
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005066:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 800506a:	4457      	add	r7, sl
 800506c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005070:	4434      	add	r4, r6
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005072:	ea85 0c00 	eor.w	ip, r5, r0
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005076:	445e      	add	r6, fp
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005078:	ea88 289a 	eor.w	r8, r8, sl, lsr #10
 800507c:	ea06 0c0c 	and.w	ip, r6, ip
 8005080:	4447      	add	r7, r8
 8005082:	ea8c 0c00 	eor.w	ip, ip, r0
 8005086:	4417      	add	r7, r2
 8005088:	ea44 0b01 	orr.w	fp, r4, r1
 800508c:	9a04      	ldr	r2, [sp, #16]
 800508e:	ea4f 09b4 	mov.w	r9, r4, ror #2
 8005092:	4467      	add	r7, ip
 8005094:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8005098:	ea0b 0b03 	and.w	fp, fp, r3
 800509c:	ea04 0a01 	and.w	sl, r4, r1
 80050a0:	ea89 3974 	eor.w	r9, r9, r4, ror #13
 80050a4:	ea89 59b4 	eor.w	r9, r9, r4, ror #22
 80050a8:	4494      	add	ip, r2
 80050aa:	ea4b 0a0a 	orr.w	sl, fp, sl
 80050ae:	9a08      	ldr	r2, [sp, #32]
 80050b0:	44ca      	add	sl, r9
 80050b2:	4492      	add	sl, r2
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
 80050b4:	9a01      	ldr	r2, [sp, #4]
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 80050b6:	ea4f 18b6 	mov.w	r8, r6, ror #6
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
 80050ba:	4410      	add	r0, r2
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 80050bc:	9a05      	ldr	r2, [sp, #20]
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 80050be:	ea88 28f6 	eor.w	r8, r8, r6, ror #11

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 80050c2:	4413      	add	r3, r2
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 80050c4:	9a02      	ldr	r2, [sp, #8]
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 80050c6:	ea88 6876 	eor.w	r8, r8, r6, ror #25
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 80050ca:	4415      	add	r5, r2
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 80050cc:	9a06      	ldr	r2, [sp, #24]
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 80050ce:	4447      	add	r7, r8

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 80050d0:	4411      	add	r1, r2
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
 80050d2:	9a07      	ldr	r2, [sp, #28]
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
 80050d4:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
    ctx->state[1] += B;
 80050d8:	4414      	add	r4, r2
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
 80050da:	9a03      	ldr	r2, [sp, #12]
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
 80050dc:	44ba      	add	sl, r7
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
 80050de:	4416      	add	r6, r2

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
 80050e0:	4467      	add	r7, ip
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
 80050e2:	f8c8 a008 	str.w	sl, [r8, #8]
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 80050e6:	f8c8 3014 	str.w	r3, [r8, #20]
    ctx->state[4] += E;
 80050ea:	f8c8 7018 	str.w	r7, [r8, #24]
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
 80050ee:	f8c8 400c 	str.w	r4, [r8, #12]
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
 80050f2:	f8c8 601c 	str.w	r6, [r8, #28]
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 80050f6:	f8c8 1010 	str.w	r1, [r8, #16]
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 80050fa:	f8c8 5020 	str.w	r5, [r8, #32]
    ctx->state[7] += H;
 80050fe:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
}
 8005102:	b01c      	add	sp, #112	; 0x70
 8005104:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	8cc70208 	sfmhi	f0, 2, [r7], {8}
 8005110:	90befffa 	ldrshtls	pc, [lr], sl	; <UNPREDICTABLE>
 8005114:	a4506ceb 	ldrbge	r6, [r0], #-3307	; 0xceb
 8005118:	bef9a3f7 	mrclt	3, 7, sl, cr9, cr7, {7}
 800511c:	c67178f2 			; <UNDEFINED> instruction: 0xc67178f2

08005120 <sha256_update>:

void sha256_update( sha256_context *ctx, uint8 *input, uint32 length )
{
 8005120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32 left, fill;

    if( ! length ) return;
 8005124:	4617      	mov	r7, r2
    ctx->state[6] += G;
    ctx->state[7] += H;
}

void sha256_update( sha256_context *ctx, uint8 *input, uint32 length )
{
 8005126:	4606      	mov	r6, r0
 8005128:	4688      	mov	r8, r1
    uint32 left, fill;

    if( ! length ) return;
 800512a:	b302      	cbz	r2, 800516e <sha256_update+0x4e>

    left = ctx->total[0] & 0x3F;
 800512c:	6803      	ldr	r3, [r0, #0]
    fill = 64 - left;

    ctx->total[0] += length;
 800512e:	441a      	add	r2, r3
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 8005130:	4297      	cmp	r7, r2
    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += length;
 8005132:	6002      	str	r2, [r0, #0]
{
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
 8005134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += length;
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 8005138:	d902      	bls.n	8005140 <sha256_update+0x20>
        ctx->total[1]++;
 800513a:	6842      	ldr	r2, [r0, #4]
 800513c:	3201      	adds	r2, #1
 800513e:	6042      	str	r2, [r0, #4]

    if( left && length >= fill )
 8005140:	b9bb      	cbnz	r3, 8005172 <sha256_update+0x52>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 8005142:	2f3f      	cmp	r7, #63	; 0x3f
 8005144:	d912      	bls.n	800516c <sha256_update+0x4c>
 8005146:	463d      	mov	r5, r7
 8005148:	4644      	mov	r4, r8
    {
        sha256_process( ctx, input );
 800514a:	4621      	mov	r1, r4
        length -= 64;
 800514c:	3d40      	subs	r5, #64	; 0x40
        left = 0;
    }

    while( length >= 64 )
    {
        sha256_process( ctx, input );
 800514e:	4630      	mov	r0, r6
 8005150:	f7fe f834 	bl	80031bc <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 8005154:	2d3f      	cmp	r5, #63	; 0x3f
    {
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
 8005156:	f104 0440 	add.w	r4, r4, #64	; 0x40
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 800515a:	d8f6      	bhi.n	800514a <sha256_update+0x2a>
 800515c:	f1a7 0340 	sub.w	r3, r7, #64	; 0x40
 8005160:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005164:	3340      	adds	r3, #64	; 0x40
 8005166:	4498      	add	r8, r3
 8005168:	f007 073f 	and.w	r7, r7, #63	; 0x3f
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
    }

    if( length )
 800516c:	b9ef      	cbnz	r7, 80051aa <sha256_update+0x8a>
 800516e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 8005172:	f1c3 0440 	rsb	r4, r3, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
 8005176:	42a7      	cmp	r7, r4
 8005178:	d208      	bcs.n	800518c <sha256_update+0x6c>
        input  += 64;
    }

    if( length )
    {
        memcpy( (void *) (ctx->buffer + left),
 800517a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800517e:	4430      	add	r0, r6
 8005180:	4641      	mov	r1, r8
 8005182:	463a      	mov	r2, r7
                (void *) input, length );
    }
}
 8005184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        input  += 64;
    }

    if( length )
    {
        memcpy( (void *) (ctx->buffer + left),
 8005188:	f001 bb5c 	b.w	8006844 <memcpy>
    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
 800518c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8005190:	4641      	mov	r1, r8
 8005192:	4622      	mov	r2, r4
 8005194:	4430      	add	r0, r6
 8005196:	f001 fb55 	bl	8006844 <memcpy>
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 800519a:	4630      	mov	r0, r6
 800519c:	f106 0128 	add.w	r1, r6, #40	; 0x28
 80051a0:	f7fe f80c 	bl	80031bc <sha256_process>
        length -= fill;
 80051a4:	1b3f      	subs	r7, r7, r4
        input  += fill;
 80051a6:	44a0      	add	r8, r4
 80051a8:	e7cb      	b.n	8005142 <sha256_update+0x22>
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
    }

    if( length )
 80051aa:	2300      	movs	r3, #0
 80051ac:	e7e5      	b.n	800517a <sha256_update+0x5a>
 80051ae:	bf00      	nop

080051b0 <sha256_finish>:
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 80051b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32 last, padn;
    uint32 high, low;
    uint8 msglen[8];

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 80051b4:	e890 0088 	ldmia.w	r0, {r3, r7}
    low  = ( ctx->total[0] <<  3 );
 80051b8:	00da      	lsls	r2, r3, #3

    PUT_UINT32( high, msglen, 0 );
    PUT_UINT32( low,  msglen, 4 );

    last = ctx->total[0] & 0x3F;
 80051ba:	f003 063f 	and.w	r6, r3, #63	; 0x3f
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 80051be:	b083      	sub	sp, #12
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32( high, msglen, 0 );
    PUT_UINT32( low,  msglen, 4 );
 80051c0:	ea4f 6812 	mov.w	r8, r2, lsr #24

    last = ctx->total[0] & 0x3F;
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 80051c4:	2e37      	cmp	r6, #55	; 0x37
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32( high, msglen, 0 );
    PUT_UINT32( low,  msglen, 4 );
 80051c6:	f88d 8004 	strb.w	r8, [sp, #4]

    last = ctx->total[0] & 0x3F;
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 80051ca:	bf94      	ite	ls
 80051cc:	f1c6 0838 	rsbls	r8, r6, #56	; 0x38
 80051d0:	f1c6 0878 	rsbhi	r8, r6, #120	; 0x78
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 80051d4:	4604      	mov	r4, r0
    uint32 last, padn;
    uint32 high, low;
    uint8 msglen[8];

    high = ( ctx->total[0] >> 29 )
 80051d6:	0f58      	lsrs	r0, r3, #29
    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += length;
 80051d8:	4443      	add	r3, r8
{
    uint32 last, padn;
    uint32 high, low;
    uint8 msglen[8];

    high = ( ctx->total[0] >> 29 )
 80051da:	ea40 00c7 	orr.w	r0, r0, r7, lsl #3
    fill = 64 - left;

    ctx->total[0] += length;
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 80051de:	4598      	cmp	r8, r3

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32( high, msglen, 0 );
 80051e0:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80051e4:	ea4f 4a10 	mov.w	sl, r0, lsr #16
 80051e8:	ea4f 2910 	mov.w	r9, r0, lsr #8
    PUT_UINT32( low,  msglen, 4 );
 80051ec:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80051f0:	ea4f 2e12 	mov.w	lr, r2, lsr #8

    ctx->total[0] += length;
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;
 80051f4:	bf88      	it	hi
 80051f6:	3701      	addhi	r7, #1
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 80051f8:	460d      	mov	r5, r1

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32( high, msglen, 0 );
 80051fa:	f88d 0003 	strb.w	r0, [sp, #3]
 80051fe:	f88d b000 	strb.w	fp, [sp]
 8005202:	f88d a001 	strb.w	sl, [sp, #1]
 8005206:	f88d 9002 	strb.w	r9, [sp, #2]
    PUT_UINT32( low,  msglen, 4 );
 800520a:	f88d 2007 	strb.w	r2, [sp, #7]
 800520e:	f88d c005 	strb.w	ip, [sp, #5]
 8005212:	f88d e006 	strb.w	lr, [sp, #6]
    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += length;
 8005216:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;
 8005218:	bf88      	it	hi
 800521a:	6067      	strhi	r7, [r4, #4]

    if( left && length >= fill )
 800521c:	2e00      	cmp	r6, #0
 800521e:	f000 80a1 	beq.w	8005364 <sha256_finish+0x1b4>
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 8005222:	f1c6 0740 	rsb	r7, r6, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
 8005226:	45b8      	cmp	r8, r7
 8005228:	d273      	bcs.n	8005312 <sha256_finish+0x162>
 800522a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 80053c4 <sha256_finish+0x214>
 800522e:	4642      	mov	r2, r8
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
    }

    if( length )
 8005230:	b12a      	cbz	r2, 800523e <sha256_finish+0x8e>
    {
        memcpy( (void *) (ctx->buffer + left),
 8005232:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8005236:	4420      	add	r0, r4
 8005238:	4649      	mov	r1, r9
 800523a:	f001 fb03 	bl	8006844 <memcpy>
{
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
 800523e:	6822      	ldr	r2, [r4, #0]
    fill = 64 - left;

    ctx->total[0] += length;
 8005240:	f102 0308 	add.w	r3, r2, #8
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 8005244:	2b07      	cmp	r3, #7
    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += length;
 8005246:	6023      	str	r3, [r4, #0]
{
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
 8005248:	f002 083f 	and.w	r8, r2, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += length;
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 800524c:	d802      	bhi.n	8005254 <sha256_finish+0xa4>
        ctx->total[1]++;
 800524e:	6863      	ldr	r3, [r4, #4]
 8005250:	3301      	adds	r3, #1
 8005252:	6063      	str	r3, [r4, #4]

    if( left && length >= fill )
 8005254:	f1b8 0f00 	cmp.w	r8, #0
 8005258:	d005      	beq.n	8005266 <sha256_finish+0xb6>
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 800525a:	f1c8 0940 	rsb	r9, r8, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
 800525e:	f1b9 0f08 	cmp.w	r9, #8
 8005262:	f240 8082 	bls.w	800536a <sha256_finish+0x1ba>
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
        input  += fill;
        left = 0;
 8005266:	2608      	movs	r6, #8
 8005268:	46e9      	mov	r9, sp
        input  += 64;
    }

    if( length )
    {
        memcpy( (void *) (ctx->buffer + left),
 800526a:	f108 0028 	add.w	r0, r8, #40	; 0x28
 800526e:	4420      	add	r0, r4
 8005270:	4649      	mov	r1, r9
 8005272:	4632      	mov	r2, r6
 8005274:	f001 fae6 	bl	8006844 <memcpy>
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );

    sha256_update( ctx, sha256_padding, padn );
    sha256_update( ctx, msglen, 8 );

    PUT_UINT32( ctx->state[0], digest,  0 );
 8005278:	7ae3      	ldrb	r3, [r4, #11]
 800527a:	702b      	strb	r3, [r5, #0]
 800527c:	8963      	ldrh	r3, [r4, #10]
 800527e:	706b      	strb	r3, [r5, #1]
 8005280:	68a3      	ldr	r3, [r4, #8]
 8005282:	0a1b      	lsrs	r3, r3, #8
 8005284:	70ab      	strb	r3, [r5, #2]
 8005286:	68a3      	ldr	r3, [r4, #8]
 8005288:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32( ctx->state[1], digest,  4 );
 800528a:	7be3      	ldrb	r3, [r4, #15]
 800528c:	712b      	strb	r3, [r5, #4]
 800528e:	89e3      	ldrh	r3, [r4, #14]
 8005290:	716b      	strb	r3, [r5, #5]
 8005292:	68e3      	ldr	r3, [r4, #12]
 8005294:	0a1b      	lsrs	r3, r3, #8
 8005296:	71ab      	strb	r3, [r5, #6]
 8005298:	68e3      	ldr	r3, [r4, #12]
 800529a:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32( ctx->state[2], digest,  8 );
 800529c:	7ce3      	ldrb	r3, [r4, #19]
 800529e:	722b      	strb	r3, [r5, #8]
 80052a0:	8a63      	ldrh	r3, [r4, #18]
 80052a2:	726b      	strb	r3, [r5, #9]
 80052a4:	6923      	ldr	r3, [r4, #16]
 80052a6:	0a1b      	lsrs	r3, r3, #8
 80052a8:	72ab      	strb	r3, [r5, #10]
 80052aa:	6923      	ldr	r3, [r4, #16]
 80052ac:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32( ctx->state[3], digest, 12 );
 80052ae:	7de3      	ldrb	r3, [r4, #23]
 80052b0:	732b      	strb	r3, [r5, #12]
 80052b2:	8ae3      	ldrh	r3, [r4, #22]
 80052b4:	736b      	strb	r3, [r5, #13]
 80052b6:	6963      	ldr	r3, [r4, #20]
 80052b8:	0a1b      	lsrs	r3, r3, #8
 80052ba:	73ab      	strb	r3, [r5, #14]
 80052bc:	6963      	ldr	r3, [r4, #20]
 80052be:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32( ctx->state[4], digest, 16 );
 80052c0:	7ee3      	ldrb	r3, [r4, #27]
 80052c2:	742b      	strb	r3, [r5, #16]
 80052c4:	8b63      	ldrh	r3, [r4, #26]
 80052c6:	746b      	strb	r3, [r5, #17]
 80052c8:	69a3      	ldr	r3, [r4, #24]
 80052ca:	0a1b      	lsrs	r3, r3, #8
 80052cc:	74ab      	strb	r3, [r5, #18]
 80052ce:	69a3      	ldr	r3, [r4, #24]
 80052d0:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32( ctx->state[5], digest, 20 );
 80052d2:	7fe3      	ldrb	r3, [r4, #31]
 80052d4:	752b      	strb	r3, [r5, #20]
 80052d6:	8be3      	ldrh	r3, [r4, #30]
 80052d8:	756b      	strb	r3, [r5, #21]
 80052da:	69e3      	ldr	r3, [r4, #28]
 80052dc:	0a1b      	lsrs	r3, r3, #8
 80052de:	75ab      	strb	r3, [r5, #22]
 80052e0:	69e3      	ldr	r3, [r4, #28]
 80052e2:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32( ctx->state[6], digest, 24 );
 80052e4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80052e8:	762b      	strb	r3, [r5, #24]
 80052ea:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80052ec:	766b      	strb	r3, [r5, #25]
 80052ee:	6a23      	ldr	r3, [r4, #32]
 80052f0:	0a1b      	lsrs	r3, r3, #8
 80052f2:	76ab      	strb	r3, [r5, #26]
 80052f4:	6a23      	ldr	r3, [r4, #32]
 80052f6:	76eb      	strb	r3, [r5, #27]
    PUT_UINT32( ctx->state[7], digest, 28 );
 80052f8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80052fc:	772b      	strb	r3, [r5, #28]
 80052fe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005300:	776b      	strb	r3, [r5, #29]
 8005302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005304:	0a1b      	lsrs	r3, r3, #8
 8005306:	77ab      	strb	r3, [r5, #30]
 8005308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800530a:	77eb      	strb	r3, [r5, #31]
 800530c:	b003      	add	sp, #12
 800530e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
 8005312:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80053c4 <sha256_finish+0x214>
 8005316:	f106 0028 	add.w	r0, r6, #40	; 0x28
 800531a:	4649      	mov	r1, r9
 800531c:	4420      	add	r0, r4
 800531e:	463a      	mov	r2, r7
 8005320:	f001 fa90 	bl	8006844 <memcpy>
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 8005324:	4620      	mov	r0, r4
 8005326:	f104 0128 	add.w	r1, r4, #40	; 0x28
        length -= fill;
 800532a:	ebc7 0808 	rsb	r8, r7, r8
        input  += fill;
 800532e:	44b9      	add	r9, r7

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 8005330:	f7fd ff44 	bl	80031bc <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 8005334:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8005338:	d93a      	bls.n	80053b0 <sha256_finish+0x200>
 800533a:	4647      	mov	r7, r8
 800533c:	464e      	mov	r6, r9
    {
        sha256_process( ctx, input );
 800533e:	4631      	mov	r1, r6
        length -= 64;
 8005340:	3f40      	subs	r7, #64	; 0x40
        left = 0;
    }

    while( length >= 64 )
    {
        sha256_process( ctx, input );
 8005342:	4620      	mov	r0, r4
 8005344:	f7fd ff3a 	bl	80031bc <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 8005348:	2f3f      	cmp	r7, #63	; 0x3f
    {
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
 800534a:	f106 0640 	add.w	r6, r6, #64	; 0x40
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 800534e:	d8f6      	bhi.n	800533e <sha256_finish+0x18e>
 8005350:	f1a8 0340 	sub.w	r3, r8, #64	; 0x40
 8005354:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005358:	3340      	adds	r3, #64	; 0x40
 800535a:	4499      	add	r9, r3
 800535c:	f008 023f 	and.w	r2, r8, #63	; 0x3f
 8005360:	2600      	movs	r6, #0
 8005362:	e765      	b.n	8005230 <sha256_finish+0x80>
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
 8005364:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80053c4 <sha256_finish+0x214>
 8005368:	e7e4      	b.n	8005334 <sha256_finish+0x184>
    {
        memcpy( (void *) (ctx->buffer + left),
 800536a:	f108 0028 	add.w	r0, r8, #40	; 0x28
 800536e:	464a      	mov	r2, r9
 8005370:	4669      	mov	r1, sp
 8005372:	4420      	add	r0, r4
 8005374:	f001 fa66 	bl	8006844 <memcpy>
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
 8005378:	f1a8 0638 	sub.w	r6, r8, #56	; 0x38
        input  += fill;
 800537c:	ab00      	add	r3, sp, #0

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 800537e:	4620      	mov	r0, r4
 8005380:	f104 0128 	add.w	r1, r4, #40	; 0x28
        length -= fill;
        input  += fill;
 8005384:	4499      	add	r9, r3

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 8005386:	f7fd ff19 	bl	80031bc <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 800538a:	2e3f      	cmp	r6, #63	; 0x3f
 800538c:	d913      	bls.n	80053b6 <sha256_finish+0x206>
    {
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
        input  += fill;
 800538e:	464f      	mov	r7, r9
        left = 0;
    }

    while( length >= 64 )
    {
        sha256_process( ctx, input );
 8005390:	4639      	mov	r1, r7
        length -= 64;
 8005392:	3e40      	subs	r6, #64	; 0x40
        left = 0;
    }

    while( length >= 64 )
    {
        sha256_process( ctx, input );
 8005394:	4620      	mov	r0, r4
 8005396:	f7fd ff11 	bl	80031bc <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 800539a:	2e3f      	cmp	r6, #63	; 0x3f
    {
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
 800539c:	f107 0740 	add.w	r7, r7, #64	; 0x40
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 80053a0:	d8f6      	bhi.n	8005390 <sha256_finish+0x1e0>
 80053a2:	f108 0608 	add.w	r6, r8, #8
 80053a6:	f1a9 0940 	sub.w	r9, r9, #64	; 0x40
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
        input  += fill;
        left = 0;
 80053aa:	f04f 0800 	mov.w	r8, #0
 80053ae:	e75c      	b.n	800526a <sha256_finish+0xba>
    }

    while( length >= 64 )
 80053b0:	4642      	mov	r2, r8
 80053b2:	2600      	movs	r6, #0
 80053b4:	e73c      	b.n	8005230 <sha256_finish+0x80>
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
    }

    if( length )
 80053b6:	2e00      	cmp	r6, #0
 80053b8:	f43f af5e 	beq.w	8005278 <sha256_finish+0xc8>
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
        input  += fill;
        left = 0;
 80053bc:	f04f 0800 	mov.w	r8, #0
 80053c0:	e753      	b.n	800526a <sha256_finish+0xba>
 80053c2:	bf00      	nop
 80053c4:	200002cc 	andcs	r0, r0, ip, asr #5

080053c8 <sha512_block>:
{
	return (x >> bits) | (x << (64 - bits));
}

void sha512_block(struct sha512_state *s, const uint8_t *blk)
{
 80053c8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053cc:	b0e4      	sub	sp, #400	; 0x190
 80053ce:	460c      	mov	r4, r1
 80053d0:	9033      	str	r0, [sp, #204]	; 0xcc
 80053d2:	f101 0c80 	add.w	ip, r1, #128	; 0x80
 80053d6:	ad42      	add	r5, sp, #264	; 0x108

static inline uint64_t load64(const uint8_t *x)
{
	uint64_t r;

	r = *(x++);
 80053d8:	7820      	ldrb	r0, [r4, #0]
	r = (r << 8) | *(x++);
 80053da:	2100      	movs	r1, #0
 80053dc:	0e02      	lsrs	r2, r0, #24
 80053de:	0203      	lsls	r3, r0, #8
 80053e0:	9211      	str	r2, [sp, #68]	; 0x44
 80053e2:	7860      	ldrb	r0, [r4, #1]
 80053e4:	9310      	str	r3, [sp, #64]	; 0x40
 80053e6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80053ea:	4339      	orrs	r1, r7
 80053ec:	4330      	orrs	r0, r6
	r = (r << 8) | *(x++);
 80053ee:	020f      	lsls	r7, r1, #8
 80053f0:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80053f4:	0206      	lsls	r6, r0, #8
 80053f6:	2100      	movs	r1, #0
 80053f8:	78a0      	ldrb	r0, [r4, #2]
 80053fa:	4339      	orrs	r1, r7
 80053fc:	4330      	orrs	r0, r6
	r = (r << 8) | *(x++);
 80053fe:	ea4f 2801 	mov.w	r8, r1, lsl #8
 8005402:	ea48 6910 	orr.w	r9, r8, r0, lsr #24
 8005406:	ea4f 2a00 	mov.w	sl, r0, lsl #8
 800540a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800540e:	78e0      	ldrb	r0, [r4, #3]
 8005410:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005414:	2100      	movs	r1, #0
 8005416:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800541a:	4319      	orrs	r1, r3
 800541c:	4310      	orrs	r0, r2
	r = (r << 8) | *(x++);
 800541e:	020b      	lsls	r3, r1, #8
 8005420:	ea43 6810 	orr.w	r8, r3, r0, lsr #24
 8005424:	ea4f 2900 	mov.w	r9, r0, lsl #8
 8005428:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800542c:	7920      	ldrb	r0, [r4, #4]
 800542e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005432:	2100      	movs	r1, #0
 8005434:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 8005438:	ea41 010b 	orr.w	r1, r1, fp
 800543c:	ea40 000a 	orr.w	r0, r0, sl
	r = (r << 8) | *(x++);
 8005440:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8005444:	ea4b 6b10 	orr.w	fp, fp, r0, lsr #24
 8005448:	ea4f 2a00 	mov.w	sl, r0, lsl #8
 800544c:	2100      	movs	r1, #0
 800544e:	7960      	ldrb	r0, [r4, #5]
 8005450:	ea41 010b 	orr.w	r1, r1, fp
 8005454:	ea40 000a 	orr.w	r0, r0, sl
	r = (r << 8) | *(x++);
 8005458:	ea4f 2901 	mov.w	r9, r1, lsl #8
 800545c:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8005460:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8005464:	2100      	movs	r1, #0
 8005466:	79a0      	ldrb	r0, [r4, #6]
 8005468:	ea41 0109 	orr.w	r1, r1, r9
 800546c:	ea40 0008 	orr.w	r0, r0, r8
	r = (r << 8) | *(x++);
 8005470:	020b      	lsls	r3, r1, #8
 8005472:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005476:	0202      	lsls	r2, r0, #8
 8005478:	79e0      	ldrb	r0, [r4, #7]
 800547a:	2100      	movs	r1, #0
	uint64_t a, b, c, d, e, f, g, h;
	int i;

	for (i = 0; i < 16; i++) {
		w[i] = load64(blk);
		blk += 8;
 800547c:	3408      	adds	r4, #8
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
 800547e:	4310      	orrs	r0, r2
 8005480:	4319      	orrs	r1, r3
{
	uint64_t w[16];
	uint64_t a, b, c, d, e, f, g, h;
	int i;

	for (i = 0; i < 16; i++) {
 8005482:	4564      	cmp	r4, ip
		w[i] = load64(blk);
 8005484:	e9e5 0102 	strd	r0, r1, [r5, #8]!
{
	uint64_t w[16];
	uint64_t a, b, c, d, e, f, g, h;
	int i;

	for (i = 0; i < 16; i++) {
 8005488:	d1a6      	bne.n	80053d8 <sha512_block+0x10>
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
	b = s->h[1];
 800548a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
	c = s->h[2];
 800548c:	9d33      	ldr	r5, [sp, #204]	; 0xcc
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
	b = s->h[1];
 800548e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 8005492:	9933      	ldr	r1, [sp, #204]	; 0xcc
	b = s->h[1];
 8005494:	e9cd 2336 	strd	r2, r3, [sp, #216]	; 0xd8
	c = s->h[2];
 8005498:	e9d5 4504 	ldrd	r4, r5, [r5, #16]
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 800549c:	e9d1 0100 	ldrd	r0, r1, [r1]
	b = s->h[1];
 80054a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 80054a4:	9a33      	ldr	r2, [sp, #204]	; 0xcc
	}

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
 80054a6:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 80054aa:	f102 0330 	add.w	r3, r2, #48	; 0x30
 80054ae:	e9d3 2300 	ldrd	r2, r3, [r3]
	}

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
 80054b2:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
	d = s->h[3];
 80054b6:	9f33      	ldr	r7, [sp, #204]	; 0xcc
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 80054b8:	ac40      	add	r4, sp, #256	; 0x100
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 80054ba:	4689      	mov	r9, r1
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 80054bc:	e9c4 2300 	strd	r2, r3, [r4]

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
 80054c0:	e9d7 6706 	ldrd	r6, r7, [r7, #24]
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 80054c4:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
 80054c8:	f8dd b0cc 	ldr.w	fp, [sp, #204]	; 0xcc
	f = s->h[5];
 80054cc:	9933      	ldr	r1, [sp, #204]	; 0xcc
	g = s->h[6];
	h = s->h[7];
 80054ce:	9c33      	ldr	r4, [sp, #204]	; 0xcc

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
 80054d0:	e9cd 673a 	strd	r6, r7, [sp, #232]	; 0xe8
	e = s->h[4];
 80054d4:	e9db ab08 	ldrd	sl, fp, [fp, #32]
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];
 80054d8:	f104 0538 	add.w	r5, r4, #56	; 0x38
 80054dc:	e9d5 4500 	ldrd	r4, r5, [r5]

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
 80054e0:	e9cd 672a 	strd	r6, r7, [sp, #168]	; 0xa8
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];
 80054e4:	ae42      	add	r6, sp, #264	; 0x108
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 80054e6:	4680      	mov	r8, r0
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];

	for (i = 0; i < 80; i++) {
 80054e8:	f04f 0c00 	mov.w	ip, #0
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
 80054ec:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	; 0x28
	g = s->h[6];
 80054f0:	461f      	mov	r7, r3
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
 80054f2:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 80054f6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	g = s->h[6];
	h = s->h[7];
 80054fa:	465b      	mov	r3, fp
 80054fc:	e9c6 4500 	strd	r4, r5, [r6]
 8005500:	4620      	mov	r0, r4
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 8005502:	4616      	mov	r6, r2
	h = s->h[7];
 8005504:	4629      	mov	r1, r5
 8005506:	4652      	mov	r2, sl
	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
 8005508:	e9cd ab3c 	strd	sl, fp, [sp, #240]	; 0xf0
 800550c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];
 8005510:	46c2      	mov	sl, r8
 8005512:	46cb      	mov	fp, r9
 8005514:	4690      	mov	r8, r2
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 8005516:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
	h = s->h[7];
 800551a:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
 800551e:	4699      	mov	r9, r3
 8005520:	4662      	mov	r2, ip
 8005522:	e018      	b.n	8005556 <sha512_block+0x18e>

		/* Update round state */
		h = g;
		g = f;
		f = e;
		e = d + temp1;
 8005524:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8005528:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 800552c:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
 8005530:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 8005534:	e9cd 672a 	strd	r6, r7, [sp, #168]	; 0xa8
 8005538:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 800553c:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8005540:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8005544:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8005548:	4690      	mov	r8, r2
 800554a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800554c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8005550:	4699      	mov	r9, r3
		d = c;
		c = b;
		b = a;
		a = temp1 + temp2;
 8005552:	4682      	mov	sl, r0
 8005554:	468b      	mov	fp, r1
	g = s->h[6];
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
 8005556:	ab64      	add	r3, sp, #400	; 0x190
 8005558:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 800555c:	ea4f 4298 	mov.w	r2, r8, lsr #18
 8005560:	ea42 3289 	orr.w	r2, r2, r9, lsl #14
 8005564:	9216      	str	r2, [sp, #88]	; 0x58
 8005566:	ea4f 3298 	mov.w	r2, r8, lsr #14
 800556a:	ea42 4289 	orr.w	r2, r2, r9, lsl #18
 800556e:	9218      	str	r2, [sp, #96]	; 0x60
 8005570:	ea4f 4299 	mov.w	r2, r9, lsr #18
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 8005574:	f10c 0c01 	add.w	ip, ip, #1
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005578:	ea42 3288 	orr.w	r2, r2, r8, lsl #14
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 800557c:	f00c 040f 	and.w	r4, ip, #15
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005580:	9217      	str	r2, [sp, #92]	; 0x5c
 8005582:	ea4f 3299 	mov.w	r2, r9, lsr #14
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 8005586:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 800558a:	ea42 4288 	orr.w	r2, r2, r8, lsl #18
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 800558e:	e951 0120 	ldrd	r0, r1, [r1, #-128]	; 0x80
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005592:	9219      	str	r2, [sp, #100]	; 0x64
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 8005594:	09c6      	lsrs	r6, r0, #7
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 8005596:	9410      	str	r4, [sp, #64]	; 0x40
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005598:	ea4f 52c8 	mov.w	r2, r8, lsl #23
 800559c:	0844      	lsrs	r4, r0, #1
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 800559e:	ea46 6741 	orr.w	r7, r6, r1, lsl #25
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80055a2:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
 80055a6:	ea42 2259 	orr.w	r2, r2, r9, lsr #9
 80055aa:	f10c 030d 	add.w	r3, ip, #13
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 80055ae:	9708      	str	r7, [sp, #32]
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80055b0:	9422      	str	r4, [sp, #136]	; 0x88
 80055b2:	921a      	str	r2, [sp, #104]	; 0x68
 80055b4:	0a04      	lsrs	r4, r0, #8

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
 80055b6:	af64      	add	r7, sp, #400	; 0x190
 80055b8:	f003 030f 	and.w	r3, r3, #15
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80055bc:	ea4f 52c9 	mov.w	r2, r9, lsl #23
 80055c0:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80055c4:	084e      	lsrs	r6, r1, #1

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
 80055c6:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80055ca:	ea42 2258 	orr.w	r2, r2, r8, lsr #9
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 80055ce:	09cf      	lsrs	r7, r1, #7
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80055d0:	ea46 76c0 	orr.w	r6, r6, r0, lsl #31
 80055d4:	9424      	str	r4, [sp, #144]	; 0x90
 80055d6:	921b      	str	r2, [sp, #108]	; 0x6c
 80055d8:	0a09      	lsrs	r1, r1, #8

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
 80055da:	e953 2320 	ldrd	r2, r3, [r3, #-128]	; 0x80
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 80055de:	0994      	lsrs	r4, r2, #6
 80055e0:	940a      	str	r4, [sp, #40]	; 0x28
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 80055e2:	9709      	str	r7, [sp, #36]	; 0x24
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80055e4:	9623      	str	r6, [sp, #140]	; 0x8c
 80055e6:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 80055ea:	9125      	str	r1, [sp, #148]	; 0x94
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 80055ec:	e9dd 6722 	ldrd	r6, r7, [sp, #136]	; 0x88
 80055f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80055f4:	404f      	eors	r7, r1
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 80055f6:	990a      	ldr	r1, [sp, #40]	; 0x28
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 80055f8:	4046      	eors	r6, r0
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 80055fa:	ea41 6183 	orr.w	r1, r1, r3, lsl #26
 80055fe:	910a      	str	r1, [sp, #40]	; 0x28
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005600:	0cd1      	lsrs	r1, r2, #19
 8005602:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
 8005606:	9126      	str	r1, [sp, #152]	; 0x98
 8005608:	ea4f 718a 	mov.w	r1, sl, lsl #30
 800560c:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 8005610:	911c      	str	r1, [sp, #112]	; 0x70
 8005612:	ea4f 711a 	mov.w	r1, sl, lsr #28
 8005616:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 800561a:	911e      	str	r1, [sp, #120]	; 0x78
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
 800561c:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8005620:	4070      	eors	r0, r6
 8005622:	4079      	eors	r1, r7
 8005624:	e9cd 0130 	strd	r0, r1, [sp, #192]	; 0xc0
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
 8005628:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 800562c:	0999      	lsrs	r1, r3, #6
 800562e:	910b      	str	r1, [sp, #44]	; 0x2c

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
 8005630:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8005634:	4070      	eors	r0, r6
 8005636:	4079      	eors	r1, r7
 8005638:	f10c 0408 	add.w	r4, ip, #8
 800563c:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
 8005640:	4046      	eors	r6, r0
 8005642:	404f      	eors	r7, r1
 8005644:	e9cd 672e 	strd	r6, r7, [sp, #184]	; 0xb8
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 8005648:	e9dd 0130 	ldrd	r0, r1, [sp, #192]	; 0xc0
	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
 800564c:	af64      	add	r7, sp, #400	; 0x190
 800564e:	f004 040f 	and.w	r4, r4, #15
 8005652:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 8005656:	e955 6720 	ldrd	r6, r7, [r5, #-128]	; 0x80
 800565a:	1980      	adds	r0, r0, r6
 800565c:	eb41 0107 	adc.w	r1, r1, r7
 8005660:	e9cd 0130 	strd	r0, r1, [sp, #192]	; 0xc0
 8005664:	e954 0120 	ldrd	r0, r1, [r4, #-128]	; 0x80
 8005668:	e9dd 6730 	ldrd	r6, r7, [sp, #192]	; 0xc0
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 800566c:	0cdc      	lsrs	r4, r3, #19
 800566e:	ea44 3442 	orr.w	r4, r4, r2, lsl #13
 8005672:	9427      	str	r4, [sp, #156]	; 0x9c
 8005674:	00d4      	lsls	r4, r2, #3
 8005676:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 800567a:	00db      	lsls	r3, r3, #3
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 800567c:	1980      	adds	r0, r0, r6
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 800567e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 8005682:	eb41 0107 	adc.w	r1, r1, r7
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005686:	9428      	str	r4, [sp, #160]	; 0xa0
 8005688:	9329      	str	r3, [sp, #164]	; 0xa4
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 800568a:	e9dd 6726 	ldrd	r6, r7, [sp, #152]	; 0x98
 800568e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005692:	4056      	eors	r6, r2
 8005694:	405f      	eors	r7, r3
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
 8005696:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 800569a:	4056      	eors	r6, r2
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 800569c:	1982      	adds	r2, r0, r6
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
 800569e:	ea87 0703 	eor.w	r7, r7, r3
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 80056a2:	eb41 0307 	adc.w	r3, r1, r7
 80056a6:	e9cd 2330 	strd	r2, r3, [sp, #192]	; 0xc0
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
 80056aa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80056ae:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80056b2:	ea20 0008 	bic.w	r0, r0, r8
 80056b6:	ea02 0208 	and.w	r2, r2, r8
 80056ba:	ea03 0309 	and.w	r3, r3, r9
 80056be:	ea21 0109 	bic.w	r1, r1, r9
 80056c2:	4050      	eors	r0, r2
 80056c4:	4059      	eors	r1, r3
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80056c6:	ea4f 738b 	mov.w	r3, fp, lsl #30

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 80056ca:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80056ce:	ea43 039a 	orr.w	r3, r3, sl, lsr #2

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 80056d2:	1980      	adds	r0, r0, r6
 80056d4:	eb41 0107 	adc.w	r1, r1, r7
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80056d8:	931d      	str	r3, [sp, #116]	; 0x74

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 80056da:	e955 6720 	ldrd	r6, r7, [r5, #-128]	; 0x80
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80056de:	ea4f 634a 	mov.w	r3, sl, lsl #25

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 80056e2:	1836      	adds	r6, r6, r0
 80056e4:	eb47 0701 	adc.w	r7, r7, r1
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80056e8:	ea43 13db 	orr.w	r3, r3, fp, lsr #7
 80056ec:	ea4f 721b 	mov.w	r2, fp, lsr #28
		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 80056f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80056f4:	ea42 120a 	orr.w	r2, r2, sl, lsl #4
 80056f8:	9320      	str	r3, [sp, #128]	; 0x80

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 80056fa:	e9cd 672e 	strd	r6, r7, [sp, #184]	; 0xb8
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 80056fe:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005702:	ea4f 634b 	mov.w	r3, fp, lsl #25
		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 8005706:	404f      	eors	r7, r1
 8005708:	4953      	ldr	r1, [pc, #332]	; (8005858 <sha512_block+0x490>)
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 800570a:	921f      	str	r2, [sp, #124]	; 0x7c
 800570c:	ea43 13da 	orr.w	r3, r3, sl, lsr #7
		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 8005710:	4046      	eors	r6, r0
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005712:	9321      	str	r3, [sp, #132]	; 0x84
 8005714:	eb01 04cc 	add.w	r4, r1, ip, lsl #3
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
 8005718:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800571c:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8005720:	4042      	eors	r2, r0
 8005722:	404b      	eors	r3, r1
 8005724:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8005728:	4050      	eors	r0, r2
 800572a:	4059      	eors	r1, r3
 800572c:	e9cd 0100 	strd	r0, r1, [sp]
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 8005730:	e9dd 2330 	ldrd	r2, r3, [sp, #192]	; 0xc0

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 8005734:	e9dd 012e 	ldrd	r0, r1, [sp, #184]	; 0xb8
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 8005738:	e945 2320 	strd	r2, r3, [r5, #-128]	; 0x80

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 800573c:	f1a4 0508 	sub.w	r5, r4, #8
 8005740:	e9d5 4500 	ldrd	r4, r5, [r5]
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 8005744:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 8005748:	1900      	adds	r0, r0, r4
 800574a:	eb41 0105 	adc.w	r1, r1, r5
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 800574e:	ea06 060a 	and.w	r6, r6, sl
 8005752:	ea07 070b 	and.w	r7, r7, fp
 8005756:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 800575a:	4014      	ands	r4, r2
 800575c:	401d      	ands	r5, r3
 800575e:	4074      	eors	r4, r6
 8005760:	407d      	eors	r5, r7

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 8005762:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
 8005766:	1980      	adds	r0, r0, r6
 8005768:	eb41 0107 	adc.w	r1, r1, r7
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
		const uint64_t temp2 = S0 + maj;
 800576c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005770:	18a4      	adds	r4, r4, r2
 8005772:	eb45 0503 	adc.w	r5, r5, r3

		/* Update round state */
		h = g;
		g = f;
		f = e;
		e = d + temp1;
 8005776:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 800577a:	1812      	adds	r2, r2, r0
 800577c:	eb43 0301 	adc.w	r3, r3, r1
		d = c;
		c = b;
		b = a;
		a = temp1 + temp2;
 8005780:	1900      	adds	r0, r0, r4
 8005782:	eb41 0105 	adc.w	r1, r1, r5
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];

	for (i = 0; i < 80; i++) {
 8005786:	f1bc 0f50 	cmp.w	ip, #80	; 0x50
 800578a:	f47f aecb 	bne.w	8005524 <sha512_block+0x15c>
 800578e:	4614      	mov	r4, r2
 8005790:	461d      	mov	r5, r3
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	4640      	mov	r0, r8
 8005798:	4649      	mov	r1, r9
 800579a:	46d0      	mov	r8, sl
 800579c:	46d9      	mov	r9, fp
 800579e:	4682      	mov	sl, r0
 80057a0:	468b      	mov	fp, r1
 80057a2:	4620      	mov	r0, r4
 80057a4:	4629      	mov	r1, r5
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 80057a6:	e9dd 4534 	ldrd	r4, r5, [sp, #208]	; 0xd0
 80057aa:	18a4      	adds	r4, r4, r2
 80057ac:	eb45 0503 	adc.w	r5, r5, r3
	s->h[1] += b;
 80057b0:	e9dd 6736 	ldrd	r6, r7, [sp, #216]	; 0xd8
 80057b4:	eb16 0608 	adds.w	r6, r6, r8
 80057b8:	eb47 0709 	adc.w	r7, r7, r9
	s->h[2] += c;
 80057bc:	e9dd 2338 	ldrd	r2, r3, [sp, #224]	; 0xe0
 80057c0:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 80057c4:	eb18 0802 	adds.w	r8, r8, r2
 80057c8:	eb49 0903 	adc.w	r9, r9, r3
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 80057cc:	e9cd 4506 	strd	r4, r5, [sp, #24]
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
 80057d0:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
	s->h[4] += e;
 80057d4:	e9dd 233c 	ldrd	r2, r3, [sp, #240]	; 0xf0
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
	s->h[1] += b;
 80057d8:	e9cd 6704 	strd	r6, r7, [sp, #16]
	s->h[2] += c;
	s->h[3] += d;
 80057dc:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 80057e0:	19a4      	adds	r4, r4, r6
 80057e2:	eb45 0507 	adc.w	r5, r5, r7
	s->h[4] += e;
 80057e6:	1880      	adds	r0, r0, r2
 80057e8:	eb41 0103 	adc.w	r1, r1, r3
	s->h[5] += f;
	s->h[6] += g;
 80057ec:	af40      	add	r7, sp, #256	; 0x100
	s->h[0] += a;
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
	s->h[4] += e;
	s->h[5] += f;
 80057ee:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
 80057f2:	eb12 020a 	adds.w	r2, r2, sl
 80057f6:	eb43 030b 	adc.w	r3, r3, fp
	s->h[6] += g;
 80057fa:	e9d7 6700 	ldrd	r6, r7, [r7]

	/* Store state */
	s->h[0] += a;
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
 80057fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
	s->h[4] += e;
	s->h[5] += f;
	s->h[6] += g;
 8005802:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
	s->h[7] += h;
 8005806:	f50d 7b84 	add.w	fp, sp, #264	; 0x108
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
	s->h[4] += e;
	s->h[5] += f;
	s->h[6] += g;
 800580a:	19a4      	adds	r4, r4, r6
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 800580c:	f8dd c0cc 	ldr.w	ip, [sp, #204]	; 0xcc
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
	s->h[4] += e;
	s->h[5] += f;
	s->h[6] += g;
 8005810:	eb45 0507 	adc.w	r5, r5, r7
	s->h[7] += h;
 8005814:	e9db ab00 	ldrd	sl, fp, [fp]
 8005818:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800581c:	eb16 060a 	adds.w	r6, r6, sl
 8005820:	eb47 070b 	adc.w	r7, r7, fp
	}

	/* Store state */
	s->h[0] += a;
	s->h[1] += b;
	s->h[2] += c;
 8005824:	e9cc 8904 	strd	r8, r9, [ip, #16]
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 8005828:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
 800582c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 8005830:	e9cc ab00 	strd	sl, fp, [ip]
	s->h[1] += b;
 8005834:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
	s->h[2] += c;
	s->h[3] += d;
 8005838:	e9cc 8906 	strd	r8, r9, [ip, #24]
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
	s->h[1] += b;
 800583c:	e9cc ab02 	strd	sl, fp, [ip, #8]
	s->h[2] += c;
	s->h[3] += d;
	s->h[4] += e;
 8005840:	e9cc 0108 	strd	r0, r1, [ip, #32]
	s->h[5] += f;
 8005844:	e9cc 230a 	strd	r2, r3, [ip, #40]	; 0x28
	s->h[6] += g;
 8005848:	e9cc 450c 	strd	r4, r5, [ip, #48]	; 0x30
	s->h[7] += h;
 800584c:	e9cc 670e 	strd	r6, r7, [ip, #56]	; 0x38
}
 8005850:	b064      	add	sp, #400	; 0x190
 8005852:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005856:	4770      	bx	lr
 8005858:	080073e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip, sp, lr}

0800585c <sha512_final>:

void sha512_final(struct sha512_state *s, const uint8_t *blk,
		  size_t total_size)
{
 800585c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t temp[SHA512_BLOCK_SIZE] = {0};
 8005860:	2580      	movs	r5, #128	; 0x80
	s->h[7] += h;
}

void sha512_final(struct sha512_state *s, const uint8_t *blk,
		  size_t total_size)
{
 8005862:	b0a0      	sub	sp, #128	; 0x80
 8005864:	4614      	mov	r4, r2
 8005866:	4682      	mov	sl, r0
 8005868:	460f      	mov	r7, r1
	uint8_t temp[SHA512_BLOCK_SIZE] = {0};
 800586a:	4668      	mov	r0, sp
 800586c:	462a      	mov	r2, r5
 800586e:	2100      	movs	r1, #0
 8005870:	f000 fff1 	bl	8006856 <memset>
	const size_t last_size = total_size & (SHA512_BLOCK_SIZE - 1);

	if (last_size)
 8005874:	f014 067f 	ands.w	r6, r4, #127	; 0x7f
 8005878:	d11e      	bne.n	80058b8 <sha512_final+0x5c>
		memcpy(temp, blk, last_size);
	temp[last_size] = 0x80;
 800587a:	f88d 5000 	strb.w	r5, [sp]
		sha512_block(s, temp);
		memset(temp, 0, sizeof(temp));
	}

	/* Note: we assume total_size fits in 61 bits */
	store64(temp + SHA512_BLOCK_SIZE - 8, total_size << 3);
 800587e:	00e2      	lsls	r2, r4, #3

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005880:	0a14      	lsrs	r4, r2, #8
	*(x--) = v;
	v >>= 8;
 8005882:	0a26      	lsrs	r6, r4, #8

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005884:	2500      	movs	r5, #0
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005886:	ea4f 2816 	mov.w	r8, r6, lsr #8
		memset(temp, 0, sizeof(temp));
	}

	/* Note: we assume total_size fits in 61 bits */
	store64(temp + SHA512_BLOCK_SIZE - 8, total_size << 3);
	sha512_block(s, temp);
 800588a:	4650      	mov	r0, sl
 800588c:	4669      	mov	r1, sp
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 800588e:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
	v >>= 8;
	*(x--) = v;
 8005892:	f88d 407e 	strb.w	r4, [sp, #126]	; 0x7e
	v >>= 8;
	*(x--) = v;
 8005896:	f88d 607d 	strb.w	r6, [sp, #125]	; 0x7d
	v >>= 8;
	*(x--) = v;
 800589a:	f88d 807c 	strb.w	r8, [sp, #124]	; 0x7c
	v >>= 8;
	*(x--) = v;
 800589e:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
	v >>= 8;
	*(x--) = v;
 80058a2:	f88d 507a 	strb.w	r5, [sp, #122]	; 0x7a
	v >>= 8;
	*(x--) = v;
 80058a6:	f88d 5079 	strb.w	r5, [sp, #121]	; 0x79
	v >>= 8;
	*(x--) = v;
 80058aa:	f88d 5078 	strb.w	r5, [sp, #120]	; 0x78
		memset(temp, 0, sizeof(temp));
	}

	/* Note: we assume total_size fits in 61 bits */
	store64(temp + SHA512_BLOCK_SIZE - 8, total_size << 3);
	sha512_block(s, temp);
 80058ae:	f7ff fd8b 	bl	80053c8 <sha512_block>
}
 80058b2:	b020      	add	sp, #128	; 0x80
 80058b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{
	uint8_t temp[SHA512_BLOCK_SIZE] = {0};
	const size_t last_size = total_size & (SHA512_BLOCK_SIZE - 1);

	if (last_size)
		memcpy(temp, blk, last_size);
 80058b8:	4639      	mov	r1, r7
 80058ba:	4668      	mov	r0, sp
 80058bc:	4632      	mov	r2, r6
 80058be:	f000 ffc1 	bl	8006844 <memcpy>
	temp[last_size] = 0x80;
 80058c2:	eb0d 0305 	add.w	r3, sp, r5
 80058c6:	4433      	add	r3, r6

	if (last_size > 111) {
 80058c8:	2e6f      	cmp	r6, #111	; 0x6f
	uint8_t temp[SHA512_BLOCK_SIZE] = {0};
	const size_t last_size = total_size & (SHA512_BLOCK_SIZE - 1);

	if (last_size)
		memcpy(temp, blk, last_size);
	temp[last_size] = 0x80;
 80058ca:	f803 5c80 	strb.w	r5, [r3, #-128]

	if (last_size > 111) {
 80058ce:	d9d6      	bls.n	800587e <sha512_final+0x22>
		sha512_block(s, temp);
 80058d0:	4650      	mov	r0, sl
 80058d2:	4669      	mov	r1, sp
 80058d4:	f7ff fd78 	bl	80053c8 <sha512_block>
		memset(temp, 0, sizeof(temp));
 80058d8:	4668      	mov	r0, sp
 80058da:	462a      	mov	r2, r5
 80058dc:	2100      	movs	r1, #0
 80058de:	f000 ffba 	bl	8006856 <memset>
 80058e2:	e7cc      	b.n	800587e <sha512_final+0x22>

080058e4 <sha512_get>:
	sha512_block(s, temp);
}

void sha512_get(const struct sha512_state *s, uint8_t *hash,
		unsigned int offset, unsigned int len)
{
 80058e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;

	if (offset > SHA512_BLOCK_SIZE)
 80058e8:	2a80      	cmp	r2, #128	; 0x80
	sha512_block(s, temp);
}

void sha512_get(const struct sha512_state *s, uint8_t *hash,
		unsigned int offset, unsigned int len)
{
 80058ea:	b09b      	sub	sp, #108	; 0x6c
 80058ec:	9014      	str	r0, [sp, #80]	; 0x50
 80058ee:	910f      	str	r1, [sp, #60]	; 0x3c
	int i;

	if (offset > SHA512_BLOCK_SIZE)
 80058f0:	d87b      	bhi.n	80059ea <sha512_get+0x106>
		return;

	if (len > SHA512_BLOCK_SIZE - offset)
 80058f2:	f1c2 0180 	rsb	r1, r2, #128	; 0x80
 80058f6:	4299      	cmp	r1, r3
 80058f8:	bf28      	it	cs
 80058fa:	4619      	movcs	r1, r3
		len = SHA512_BLOCK_SIZE - offset;

	/* Skip whole words */
	i = offset >> 3;
 80058fc:	08d0      	lsrs	r0, r2, #3
	offset &= 7;

	/* Skip/read out bytes */
	if (offset) {
 80058fe:	f012 0207 	ands.w	r2, r2, #7
 8005902:	910d      	str	r1, [sp, #52]	; 0x34

	if (len > SHA512_BLOCK_SIZE - offset)
		len = SHA512_BLOCK_SIZE - offset;

	/* Skip whole words */
	i = offset >> 3;
 8005904:	900e      	str	r0, [sp, #56]	; 0x38
	offset &= 7;

	/* Skip/read out bytes */
	if (offset) {
 8005906:	9215      	str	r2, [sp, #84]	; 0x54
 8005908:	d172      	bne.n	80059f0 <sha512_get+0x10c>
		len -= c;
		hash += c;
	}

	/* Read out whole words */
	while (len >= 8) {
 800590a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800590c:	2d07      	cmp	r5, #7
 800590e:	d969      	bls.n	80059e4 <sha512_get+0x100>
 8005910:	f1a5 0308 	sub.w	r3, r5, #8
 8005914:	08db      	lsrs	r3, r3, #3
 8005916:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005918:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800591a:	469c      	mov	ip, r3
 800591c:	4484      	add	ip, r0
 800591e:	930a      	str	r3, [sp, #40]	; 0x28
 8005920:	f104 0308 	add.w	r3, r4, #8
 8005924:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 8005928:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800592c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800592e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8005932:	9012      	str	r0, [sp, #72]	; 0x48
		store64(hash, s->h[i++]);
 8005934:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8005936:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 800593a:	e9cd 2306 	strd	r2, r3, [sp, #24]

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 800593e:	9d06      	ldr	r5, [sp, #24]
 8005940:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005944:	0a2a      	lsrs	r2, r5, #8
 8005946:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 800594a:	ea4f 231c 	mov.w	r3, ip, lsr #8
	*(x--) = v;
	v >>= 8;
 800594e:	0a10      	lsrs	r0, r2, #8
		hash += c;
	}

	/* Read out whole words */
	while (len >= 8) {
		store64(hash, s->h[i++]);
 8005950:	9412      	str	r4, [sp, #72]	; 0x48
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005952:	ea40 6403 	orr.w	r4, r0, r3, lsl #24
 8005956:	0a1d      	lsrs	r5, r3, #8
	*(x--) = v;
	v >>= 8;
 8005958:	ea4f 2a14 	mov.w	sl, r4, lsr #8
 800595c:	ea4a 6a05 	orr.w	sl, sl, r5, lsl #24
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005960:	9404      	str	r4, [sp, #16]
	*(x--) = v;
	v >>= 8;
 8005962:	ea4f 2b15 	mov.w	fp, r5, lsr #8
	*(x--) = v;
	v >>= 8;
 8005966:	ea4f 241a 	mov.w	r4, sl, lsr #8
 800596a:	ea44 640b 	orr.w	r4, r4, fp, lsl #24
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 800596e:	9505      	str	r5, [sp, #20]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005970:	0a26      	lsrs	r6, r4, #8
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005972:	ea4f 251b 	mov.w	r5, fp, lsr #8
	*(x--) = v;
	v >>= 8;
 8005976:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
 800597a:	0a2f      	lsrs	r7, r5, #8
	*(x--) = v;
	v >>= 8;
 800597c:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8005980:	ea48 6807 	orr.w	r8, r8, r7, lsl #24
 8005984:	ea4f 2917 	mov.w	r9, r7, lsr #8
	*(x--) = v;
	v >>= 8;
 8005988:	ea4f 2018 	mov.w	r0, r8, lsr #8
 800598c:	ea40 6c09 	orr.w	ip, r0, r9, lsl #24
 8005990:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8005994:	9009      	str	r0, [sp, #36]	; 0x24
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005996:	f89d 0010 	ldrb.w	r0, [sp, #16]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 800599a:	f8cd c020 	str.w	ip, [sp, #32]
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 800599e:	7148      	strb	r0, [r1, #5]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 80059a0:	f89d c020 	ldrb.w	ip, [sp, #32]
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 80059a4:	f89d 0018 	ldrb.w	r0, [sp, #24]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 80059a8:	f881 8001 	strb.w	r8, [r1, #1]
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 80059ac:	71c8      	strb	r0, [r1, #7]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 80059ae:	708e      	strb	r6, [r1, #2]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 80059b0:	70cc      	strb	r4, [r1, #3]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 80059b2:	f881 a004 	strb.w	sl, [r1, #4]
static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 80059b6:	718a      	strb	r2, [r1, #6]
		len -= c;
		hash += c;
	}

	/* Read out whole words */
	while (len >= 8) {
 80059b8:	9812      	ldr	r0, [sp, #72]	; 0x48
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 80059ba:	f801 cb08 	strb.w	ip, [r1], #8
		len -= c;
		hash += c;
	}

	/* Read out whole words */
	while (len >= 8) {
 80059be:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 80059c2:	4560      	cmp	r0, ip
 80059c4:	d1b6      	bne.n	8005934 <sha512_get+0x50>
 80059c6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80059c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059ca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80059cc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80059ce:	1c4b      	adds	r3, r1, #1
 80059d0:	f100 0c01 	add.w	ip, r0, #1
 80059d4:	4461      	add	r1, ip
 80059d6:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80059da:	f005 0507 	and.w	r5, r5, #7
 80059de:	910e      	str	r1, [sp, #56]	; 0x38
 80059e0:	940f      	str	r4, [sp, #60]	; 0x3c
 80059e2:	950d      	str	r5, [sp, #52]	; 0x34
		hash += 8;
		len -= 8;
	}

	/* Read out bytes */
	if (len) {
 80059e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d173      	bne.n	8005ad2 <sha512_get+0x1ee>
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
		memcpy(hash, tmp, len);
	}
}
 80059ea:	b01b      	add	sp, #108	; 0x6c
 80059ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 80059f0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80059f2:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 80059fa:	0a14      	lsrs	r4, r2, #8
 80059fc:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 8005a00:	0a1d      	lsrs	r5, r3, #8
	*(x--) = v;
	v >>= 8;
 8005a02:	0a21      	lsrs	r1, r4, #8
 8005a04:	ea41 6c05 	orr.w	ip, r1, r5, lsl #24
 8005a08:	ea4f 2e15 	mov.w	lr, r5, lsr #8
	*(x--) = v;
	v >>= 8;
 8005a0c:	ea4f 211c 	mov.w	r1, ip, lsr #8
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005a10:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
	*(x--) = v;
	v >>= 8;
 8005a14:	ea41 6c0e 	orr.w	ip, r1, lr, lsl #24
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005a18:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005a1c:	ea4f 211c 	mov.w	r1, ip, lsr #8
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005a20:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8005a24:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
	*(x--) = v;
	v >>= 8;
 8005a28:	ea41 6c0e 	orr.w	ip, r1, lr, lsl #24
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005a2c:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005a30:	ea4f 201c 	mov.w	r0, ip, lsr #8
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005a34:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
	*(x--) = v;
	v >>= 8;
 8005a38:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
 8005a3c:	ea4f 211e 	mov.w	r1, lr, lsr #8
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005a40:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005a44:	0a02      	lsrs	r2, r0, #8
 8005a46:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005a4a:	0a0b      	lsrs	r3, r1, #8
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005a4c:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005a50:	0a15      	lsrs	r5, r2, #8
 8005a52:	ea45 6c03 	orr.w	ip, r5, r3, lsl #24
static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005a56:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005a5a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005a5e:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005a62:	f8cd c018 	str.w	ip, [sp, #24]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005a66:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
	offset &= 7;

	/* Skip/read out bytes */
	if (offset) {
		uint8_t tmp[8];
		unsigned int c = 8 - offset;
 8005a6a:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005a6e:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
	v >>= 8;
	*(x--) = v;
 8005a72:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
	v >>= 8;
	*(x--) = v;
 8005a76:	f88d 5063 	strb.w	r5, [sp, #99]	; 0x63
 8005a7a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005a7c:	f89d 5018 	ldrb.w	r5, [sp, #24]
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005a80:	f88d e065 	strb.w	lr, [sp, #101]	; 0x65
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005a84:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005a88:	ea4f 2e13 	mov.w	lr, r3, lsr #8
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005a8c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 8005a90:	980e      	ldr	r0, [sp, #56]	; 0x38
		memcpy(hash, tmp + offset, c);
 8005a92:	9a15      	ldr	r2, [sp, #84]	; 0x54
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005a94:	a91a      	add	r1, sp, #104	; 0x68
	offset &= 7;

	/* Skip/read out bytes */
	if (offset) {
		uint8_t tmp[8];
		unsigned int c = 8 - offset;
 8005a96:	f1cc 0308 	rsb	r3, ip, #8
 8005a9a:	429c      	cmp	r4, r3
 8005a9c:	bf38      	it	cc
 8005a9e:	4623      	movcc	r3, r4
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005aa0:	f801 5d08 	strb.w	r5, [r1, #-8]!
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 8005aa4:	f100 0c01 	add.w	ip, r0, #1
		memcpy(hash, tmp + offset, c);
		len -= c;
 8005aa8:	1ae4      	subs	r4, r4, r3

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
		memcpy(hash, tmp + offset, c);
 8005aaa:	4411      	add	r1, r2
 8005aac:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005aae:	461a      	mov	r2, r3
		len -= c;
 8005ab0:	940d      	str	r4, [sp, #52]	; 0x34

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
		memcpy(hash, tmp + offset, c);
 8005ab2:	9302      	str	r3, [sp, #8]
 8005ab4:	f8cd c00c 	str.w	ip, [sp, #12]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005ab8:	f8cd e01c 	str.w	lr, [sp, #28]

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
		memcpy(hash, tmp + offset, c);
 8005abc:	f000 fec2 	bl	8006844 <memcpy>
		len -= c;
		hash += c;
 8005ac0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005ac2:	9b02      	ldr	r3, [sp, #8]
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 8005ac4:	f8dd c00c 	ldr.w	ip, [sp, #12]
		memcpy(hash, tmp + offset, c);
		len -= c;
		hash += c;
 8005ac8:	441c      	add	r4, r3
 8005aca:	940f      	str	r4, [sp, #60]	; 0x3c
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 8005acc:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8005ad0:	e71b      	b.n	800590a <sha512_get+0x26>

	/* Read out bytes */
	if (len) {
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
 8005ad2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005ad4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005ad6:	eb04 0cc5 	add.w	ip, r4, r5, lsl #3
 8005ada:	e9dc 0100 	ldrd	r0, r1, [ip]
 8005ade:	e9cd 0104 	strd	r0, r1, [sp, #16]

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005ae2:	ea4f 2a10 	mov.w	sl, r0, lsr #8
 8005ae6:	ea4a 6a01 	orr.w	sl, sl, r1, lsl #24
 8005aea:	9905      	ldr	r1, [sp, #20]
	*(x--) = v;
	v >>= 8;
 8005aec:	ea4f 281a 	mov.w	r8, sl, lsr #8

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005af0:	ea4f 2b11 	mov.w	fp, r1, lsr #8
	*(x--) = v;
	v >>= 8;
 8005af4:	ea48 680b 	orr.w	r8, r8, fp, lsl #24
 8005af8:	ea4f 291b 	mov.w	r9, fp, lsr #8
	*(x--) = v;
	v >>= 8;
 8005afc:	ea4f 2618 	mov.w	r6, r8, lsr #8
 8005b00:	ea46 6609 	orr.w	r6, r6, r9, lsl #24
 8005b04:	ea4f 2719 	mov.w	r7, r9, lsr #8
	*(x--) = v;
	v >>= 8;
 8005b08:	0a34      	lsrs	r4, r6, #8
 8005b0a:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
 8005b0e:	0a3d      	lsrs	r5, r7, #8
	*(x--) = v;
	v >>= 8;
 8005b10:	0a20      	lsrs	r0, r4, #8
 8005b12:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 8005b16:	0a29      	lsrs	r1, r5, #8
	*(x--) = v;
	v >>= 8;
 8005b18:	0a03      	lsrs	r3, r0, #8
 8005b1a:	ea43 6c01 	orr.w	ip, r3, r1, lsl #24
 8005b1e:	ea4f 2e11 	mov.w	lr, r1, lsr #8
	*(x--) = v;
	v >>= 8;
 8005b22:	ea4f 231c 	mov.w	r3, ip, lsr #8
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005b26:	f89d 2010 	ldrb.w	r2, [sp, #16]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005b2a:	f8cd c018 	str.w	ip, [sp, #24]
	*(x--) = v;
	v >>= 8;
 8005b2e:	ea43 6c0e 	orr.w	ip, r3, lr, lsl #24
 8005b32:	f8cd c010 	str.w	ip, [sp, #16]
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005b36:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005b3a:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005b3e:	f89d 2010 	ldrb.w	r2, [sp, #16]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005b42:	f89d 0018 	ldrb.w	r0, [sp, #24]
	v >>= 8;
	*(x--) = v;
 8005b46:	a91a      	add	r1, sp, #104	; 0x68
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005b48:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005b4c:	f8cd e01c 	str.w	lr, [sp, #28]
static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005b50:	f88d a066 	strb.w	sl, [sp, #102]	; 0x66
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005b54:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005b58:	f88d 8065 	strb.w	r8, [sp, #101]	; 0x65
	v >>= 8;
	*(x--) = v;
 8005b5c:	f88d 6064 	strb.w	r6, [sp, #100]	; 0x64
	v >>= 8;
	*(x--) = v;
 8005b60:	f88d 4063 	strb.w	r4, [sp, #99]	; 0x63
	/* Read out bytes */
	if (len) {
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
		memcpy(hash, tmp, len);
 8005b64:	980f      	ldr	r0, [sp, #60]	; 0x3c
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005b66:	f801 2d08 	strb.w	r2, [r1, #-8]!
	/* Read out bytes */
	if (len) {
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
		memcpy(hash, tmp, len);
 8005b6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005b6c:	f8cd e014 	str.w	lr, [sp, #20]
	/* Read out bytes */
	if (len) {
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
		memcpy(hash, tmp, len);
 8005b70:	f000 fe68 	bl	8006844 <memcpy>
	}
}
 8005b74:	b01b      	add	sp, #108	; 0x6c
 8005b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7a:	bf00      	nop

08005b7c <imageCheckFromAddress>:
    uart_printf("\n");
}


int imageCheckFromAddress(ImageObjectHandle *newHandle, uint32_t flashAddress, bool shouldEraseFlashOnFail)
{
 8005b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b80:	b0e6      	sub	sp, #408	; 0x198
 8005b82:	460e      	mov	r6, r1
 8005b84:	4605      	mov	r5, r0
	ImageObjectHeader		*hdr;
	ImageInternalState		state;
	int bufferSize = 0x28+0x40;
	unsigned char imageBuffer[bufferSize];
    memset(imageBuffer, 0xFF, sizeof(imageBuffer));
 8005b86:	21ff      	movs	r1, #255	; 0xff
    uart_printf("\n");
}


int imageCheckFromAddress(ImageObjectHandle *newHandle, uint32_t flashAddress, bool shouldEraseFlashOnFail)
{
 8005b88:	4690      	mov	r8, r2
	ImageObjectHeader		*hdr;
	ImageInternalState		state;
	int bufferSize = 0x28+0x40;
	unsigned char imageBuffer[bufferSize];
    memset(imageBuffer, 0xFF, sizeof(imageBuffer));
 8005b8a:	a84c      	add	r0, sp, #304	; 0x130
 8005b8c:	2268      	movs	r2, #104	; 0x68
 8005b8e:	f000 fe62 	bl	8006856 <memset>
    memcpy(imageBuffer, (vu32 *)flashAddress, bufferSize);
 8005b92:	4631      	mov	r1, r6
 8005b94:	2268      	movs	r2, #104	; 0x68
 8005b96:	a84c      	add	r0, sp, #304	; 0x130
 8005b98:	f000 fe54 	bl	8006844 <memcpy>
    flashUnlock();
 8005b9c:	f7fb fd48 	bl	8001630 <flashUnlock>
				flashCnt += 0x3F0;
			}
		}
		return(EINVAL);		/* buffer too small to really contain header */
	}
	if ((hdr->ihMagic) != kImageHeaderMagic) {
 8005ba0:	994c      	ldr	r1, [sp, #304]	; 0x130
 8005ba2:	4a58      	ldr	r2, [pc, #352]	; (8005d04 <imageCheckFromAddress+0x188>)
	int bufferSize = 0x28+0x40;
	unsigned char imageBuffer[bufferSize];
    memset(imageBuffer, 0xFF, sizeof(imageBuffer));
    memcpy(imageBuffer, (vu32 *)flashAddress, bufferSize);
    flashUnlock();
    memset(&state, 0, sizeof(state));
 8005ba4:	2000      	movs	r0, #0
				flashCnt += 0x3F0;
			}
		}
		return(EINVAL);		/* buffer too small to really contain header */
	}
	if ((hdr->ihMagic) != kImageHeaderMagic) {
 8005ba6:	4291      	cmp	r1, r2
	int bufferSize = 0x28+0x40;
	unsigned char imageBuffer[bufferSize];
    memset(imageBuffer, 0xFF, sizeof(imageBuffer));
    memcpy(imageBuffer, (vu32 *)flashAddress, bufferSize);
    flashUnlock();
    memset(&state, 0, sizeof(state));
 8005ba8:	9007      	str	r0, [sp, #28]
 8005baa:	9008      	str	r0, [sp, #32]
 8005bac:	9009      	str	r0, [sp, #36]	; 0x24
 8005bae:	900a      	str	r0, [sp, #40]	; 0x28
 8005bb0:	900b      	str	r0, [sp, #44]	; 0x2c
				flashCnt += 0x3F0;
			}
		}
		return(EINVAL);		/* buffer too small to really contain header */
	}
	if ((hdr->ihMagic) != kImageHeaderMagic) {
 8005bb2:	d01e      	beq.n	8005bf2 <imageCheckFromAddress+0x76>
		uart_printf("bad magic 0x%08x expecting 0x%08x\n", (hdr->ihMagic), kImageHeaderMagic);
 8005bb4:	4854      	ldr	r0, [pc, #336]	; (8005d08 <imageCheckFromAddress+0x18c>)
 8005bb6:	f7fb fb4d 	bl	8001254 <uart_printf>
		state.flags = kImageImageMissingMagic;
 8005bba:	2304      	movs	r3, #4
 8005bbc:	9308      	str	r3, [sp, #32]
		if (shouldEraseFlashOnFail)
 8005bbe:	f1b8 0f00 	cmp.w	r8, #0
 8005bc2:	d010      	beq.n	8005be6 <imageCheckFromAddress+0x6a>
		{
			flashCnt = 0x0;
			while ((flashAddress+flashCnt) <= ((hdr->ihBufferLength)+0x10)) {
 8005bc4:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8005bc6:	3310      	adds	r3, #16
 8005bc8:	429e      	cmp	r6, r3
 8005bca:	d80c      	bhi.n	8005be6 <imageCheckFromAddress+0x6a>
 8005bcc:	4f4f      	ldr	r7, [pc, #316]	; (8005d0c <imageCheckFromAddress+0x190>)
 8005bce:	4c50      	ldr	r4, [pc, #320]	; (8005d10 <imageCheckFromAddress+0x194>)
 8005bd0:	4437      	add	r7, r6
				flashErasePage((u32)(0x08008000+flashCnt));
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f7fb fcda 	bl	800158c <flashErasePage>
		uart_printf("bad magic 0x%08x expecting 0x%08x\n", (hdr->ihMagic), kImageHeaderMagic);
		state.flags = kImageImageMissingMagic;
		if (shouldEraseFlashOnFail)
		{
			flashCnt = 0x0;
			while ((flashAddress+flashCnt) <= ((hdr->ihBufferLength)+0x10)) {
 8005bd8:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8005bda:	193a      	adds	r2, r7, r4
 8005bdc:	3310      	adds	r3, #16
 8005bde:	4293      	cmp	r3, r2
 8005be0:	f504 747c 	add.w	r4, r4, #1008	; 0x3f0
 8005be4:	d2f5      	bcs.n	8005bd2 <imageCheckFromAddress+0x56>
				flashErasePage((u32)(0x08008000+flashCnt));
				flashCnt += 0x3F0;
			}
		}
		
		*newHandle = &state;
 8005be6:	ab07      	add	r3, sp, #28
		return(kImageImageMissingMagic);		/* magic must match */
 8005be8:	2004      	movs	r0, #4
				flashErasePage((u32)(0x08008000+flashCnt));
				flashCnt += 0x3F0;
			}
		}
		
		*newHandle = &state;
 8005bea:	602b      	str	r3, [r5, #0]
    	return kImageImageIsTrusted;
    }
	
	*newHandle = &state;
	return(0);
}
 8005bec:	b066      	add	sp, #408	; 0x198
 8005bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return(kImageImageMissingMagic);		/* magic must match */
	}

	state.flags = kImageImageWasInstantiated;

	state.cursor = (hdr->ihBufferLength)+0x10;
 8005bf2:	9b4e      	ldr	r3, [sp, #312]	; 0x138
	state.lastTag = -1;

	unsigned char sha256sum[32];

    memset(sha256sum, 0xFF, sizeof(sha256sum));
 8005bf4:	21ff      	movs	r1, #255	; 0xff
		return(kImageImageMissingMagic);		/* magic must match */
	}

	state.flags = kImageImageWasInstantiated;

	state.cursor = (hdr->ihBufferLength)+0x10;
 8005bf6:	3310      	adds	r3, #16
	state.lastTag = -1;
 8005bf8:	f04f 34ff 	mov.w	r4, #4294967295

	unsigned char sha256sum[32];

    memset(sha256sum, 0xFF, sizeof(sha256sum));
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	a812      	add	r0, sp, #72	; 0x48
		
		*newHandle = &state;
		return(kImageImageMissingMagic);		/* magic must match */
	}

	state.flags = kImageImageWasInstantiated;
 8005c00:	2701      	movs	r7, #1

	state.cursor = (hdr->ihBufferLength)+0x10;
 8005c02:	930a      	str	r3, [sp, #40]	; 0x28
	state.lastTag = -1;
 8005c04:	940b      	str	r4, [sp, #44]	; 0x2c
		
		*newHandle = &state;
		return(kImageImageMissingMagic);		/* magic must match */
	}

	state.flags = kImageImageWasInstantiated;
 8005c06:	9708      	str	r7, [sp, #32]
	state.cursor = (hdr->ihBufferLength)+0x10;
	state.lastTag = -1;

	unsigned char sha256sum[32];

    memset(sha256sum, 0xFF, sizeof(sha256sum));
 8005c08:	f000 fe25 	bl	8006856 <memset>

    sha256_context ctx;
    sha256_starts(&ctx);
 8005c0c:	a832      	add	r0, sp, #200	; 0xc8
 8005c0e:	f7fd faa9 	bl	8003164 <sha256_starts>
    char buff[0x4];

    int i = 0x84;

    while ((flashAddress+i) <= (flashAddress+state.cursor))
 8005c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c14:	f106 0184 	add.w	r1, r6, #132	; 0x84
 8005c18:	4433      	add	r3, r6
 8005c1a:	4299      	cmp	r1, r3
 8005c1c:	bf98      	it	ls
 8005c1e:	f106 0488 	addls.w	r4, r6, #136	; 0x88
 8005c22:	d902      	bls.n	8005c2a <imageCheckFromAddress+0xae>
 8005c24:	e00c      	b.n	8005c40 <imageCheckFromAddress+0xc4>
 8005c26:	4621      	mov	r1, r4
 8005c28:	4614      	mov	r4, r2
    {
      memset(buff, 0xFF, 0x4);
      memcpy(buff, (char *)(flashAddress+i), 0x4);
 8005c2a:	6808      	ldr	r0, [r1, #0]
      sha256_update(&ctx, (vu32 *)(flashAddress+i), 0x4);
 8005c2c:	2204      	movs	r2, #4
    int i = 0x84;

    while ((flashAddress+i) <= (flashAddress+state.cursor))
    {
      memset(buff, 0xFF, 0x4);
      memcpy(buff, (char *)(flashAddress+i), 0x4);
 8005c2e:	9003      	str	r0, [sp, #12]
      sha256_update(&ctx, (vu32 *)(flashAddress+i), 0x4);
 8005c30:	a832      	add	r0, sp, #200	; 0xc8
 8005c32:	f7ff fa75 	bl	8005120 <sha256_update>
    sha256_starts(&ctx);
    char buff[0x4];

    int i = 0x84;

    while ((flashAddress+i) <= (flashAddress+state.cursor))
 8005c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c38:	1d22      	adds	r2, r4, #4
 8005c3a:	4433      	add	r3, r6
 8005c3c:	42a3      	cmp	r3, r4
 8005c3e:	d2f2      	bcs.n	8005c26 <imageCheckFromAddress+0xaa>
      i += 0x4;
    }

    // hash in our unique ID
    struct u_id id;
    uid_read(&id);
 8005c40:	a804      	add	r0, sp, #16
 8005c42:	f7fb fbe5 	bl	8001410 <uid_read>
    unsigned char uniqueID[23];
    sprintf(uniqueID,"%X%X%X%X", id.off0, id.off2, id.off4, id.off8);
 8005c46:	9805      	ldr	r0, [sp, #20]
 8005c48:	9906      	ldr	r1, [sp, #24]
 8005c4a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8005c4e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8005c52:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8005c56:	492f      	ldr	r1, [pc, #188]	; (8005d14 <imageCheckFromAddress+0x198>)
 8005c58:	a80c      	add	r0, sp, #48	; 0x30
    sha256_update(&ctx, uniqueID, 23);
    sha256_finish(&ctx, sha256sum);

 	uint8_t rootCA[32] = {
 8005c5a:	4c2f      	ldr	r4, [pc, #188]	; (8005d18 <imageCheckFromAddress+0x19c>)

    // hash in our unique ID
    struct u_id id;
    uid_read(&id);
    unsigned char uniqueID[23];
    sprintf(uniqueID,"%X%X%X%X", id.off0, id.off2, id.off4, id.off8);
 8005c5c:	f000 fe04 	bl	8006868 <siprintf>
    sha256_update(&ctx, uniqueID, 23);
 8005c60:	2217      	movs	r2, #23
 8005c62:	a832      	add	r0, sp, #200	; 0xc8
 8005c64:	a90c      	add	r1, sp, #48	; 0x30
 8005c66:	f7ff fa5b 	bl	8005120 <sha256_update>
    sha256_finish(&ctx, sha256sum);
 8005c6a:	a832      	add	r0, sp, #200	; 0xc8
 8005c6c:	a912      	add	r1, sp, #72	; 0x48
 8005c6e:	f7ff fa9f 	bl	80051b0 <sha256_finish>

 	uint8_t rootCA[32] = {
 8005c72:	6820      	ldr	r0, [r4, #0]
 8005c74:	6861      	ldr	r1, [r4, #4]
 8005c76:	68a2      	ldr	r2, [r4, #8]
 8005c78:	68e3      	ldr	r3, [r4, #12]
 8005c7a:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8005c7e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8005c82:	6920      	ldr	r0, [r4, #16]
 8005c84:	6961      	ldr	r1, [r4, #20]
 8005c86:	69a2      	ldr	r2, [r4, #24]
 8005c88:	69e3      	ldr	r3, [r4, #28]
       0xbd, 0x0c, 0x2d, 0x04, 0x2e, 0x5a, 0x95, 0xc6, 0xb6, 0x28, 0xfc, 0x3f, 0x85, 0x6c, 0xa1, 0xfb, 0xb5, 0x25, 0x07, 0x38, 0xc0, 0x05, 0x9d, 0x44, 0x04, 0xa7, 0xe3, 0xa6, 0xac, 0x3b, 0xb8, 0x41
    };
    // verify signature against recalc hash

    uint8_t sigbuff[0x40];
    memcpy(sigbuff, (uint8_t*)(hdr->ihBuffer), 0x40);
 8005c8a:	af51      	add	r7, sp, #324	; 0x144
 8005c8c:	ac22      	add	r4, sp, #136	; 0x88
    unsigned char uniqueID[23];
    sprintf(uniqueID,"%X%X%X%X", id.off0, id.off2, id.off4, id.off8);
    sha256_update(&ctx, uniqueID, 23);
    sha256_finish(&ctx, sha256sum);

 	uint8_t rootCA[32] = {
 8005c8e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
       0xbd, 0x0c, 0x2d, 0x04, 0x2e, 0x5a, 0x95, 0xc6, 0xb6, 0x28, 0xfc, 0x3f, 0x85, 0x6c, 0xa1, 0xfb, 0xb5, 0x25, 0x07, 0x38, 0xc0, 0x05, 0x9d, 0x44, 0x04, 0xa7, 0xe3, 0xa6, 0xac, 0x3b, 0xb8, 0x41
    };
    // verify signature against recalc hash

    uint8_t sigbuff[0x40];
    memcpy(sigbuff, (uint8_t*)(hdr->ihBuffer), 0x40);
 8005c92:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c96:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c9a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c9e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8005ca2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if (edsign_verify(sigbuff, rootCA, sha256sum, 32) <= 0) {
 8005ca6:	a822      	add	r0, sp, #136	; 0x88
 8005ca8:	a91a      	add	r1, sp, #104	; 0x68
 8005caa:	aa12      	add	r2, sp, #72	; 0x48
 8005cac:	2320      	movs	r3, #32
 8005cae:	f7fc f911 	bl	8001ed4 <edsign_verify>
 8005cb2:	bb00      	cbnz	r0, 8005cf6 <imageCheckFromAddress+0x17a>
    	state.flags = kImageImageRejectSignature;
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	9308      	str	r3, [sp, #32]
    	if (shouldEraseFlashOnFail)
 8005cb8:	f1b8 0f00 	cmp.w	r8, #0
 8005cbc:	d015      	beq.n	8005cea <imageCheckFromAddress+0x16e>
		{
			flashCnt = 0x0;
			while ((flashAddress+flashCnt) <= ((hdr->ihBufferLength)+0x10)) {
 8005cbe:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	3310      	adds	r3, #16
 8005cc4:	429e      	cmp	r6, r3
 8005cc6:	d80c      	bhi.n	8005ce2 <imageCheckFromAddress+0x166>
				flashErasePage((u32)(0x08008000+flashCnt));
 8005cc8:	f104 6000 	add.w	r0, r4, #134217728	; 0x8000000
 8005ccc:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8005cd0:	f7fb fc5c 	bl	800158c <flashErasePage>
    if (edsign_verify(sigbuff, rootCA, sha256sum, 32) <= 0) {
    	state.flags = kImageImageRejectSignature;
    	if (shouldEraseFlashOnFail)
		{
			flashCnt = 0x0;
			while ((flashAddress+flashCnt) <= ((hdr->ihBufferLength)+0x10)) {
 8005cd4:	9b4e      	ldr	r3, [sp, #312]	; 0x138
				flashErasePage((u32)(0x08008000+flashCnt));
				flashCnt += 0x3F0;
 8005cd6:	f504 747c 	add.w	r4, r4, #1008	; 0x3f0
 8005cda:	19a2      	adds	r2, r4, r6
    if (edsign_verify(sigbuff, rootCA, sha256sum, 32) <= 0) {
    	state.flags = kImageImageRejectSignature;
    	if (shouldEraseFlashOnFail)
		{
			flashCnt = 0x0;
			while ((flashAddress+flashCnt) <= ((hdr->ihBufferLength)+0x10)) {
 8005cdc:	3310      	adds	r3, #16
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d9f2      	bls.n	8005cc8 <imageCheckFromAddress+0x14c>
				flashErasePage((u32)(0x08008000+flashCnt));
				flashCnt += 0x3F0;
			}
			uart_printf("finished: %X\n", flashCnt);
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	480d      	ldr	r0, [pc, #52]	; (8005d1c <imageCheckFromAddress+0x1a0>)
 8005ce6:	f7fb fab5 	bl	8001254 <uart_printf>
		}
    	*newHandle = &state;
 8005cea:	ab07      	add	r3, sp, #28
    	return kImageImageRejectSignature;
 8005cec:	2002      	movs	r0, #2
				flashErasePage((u32)(0x08008000+flashCnt));
				flashCnt += 0x3F0;
			}
			uart_printf("finished: %X\n", flashCnt);
		}
    	*newHandle = &state;
 8005cee:	602b      	str	r3, [r5, #0]
    	return kImageImageIsTrusted;
    }
	
	*newHandle = &state;
	return(0);
}
 8005cf0:	b066      	add	sp, #408	; 0x198
 8005cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
    	*newHandle = &state;
    	return kImageImageRejectSignature;
    } else {
    	state.flags = kImageImageIsTrusted;
    	*newHandle = &state;
 8005cf6:	ab07      	add	r3, sp, #28
    	return kImageImageIsTrusted;
 8005cf8:	2003      	movs	r0, #3
		}
    	*newHandle = &state;
    	return kImageImageRejectSignature;
    } else {
    	state.flags = kImageImageIsTrusted;
    	*newHandle = &state;
 8005cfa:	602b      	str	r3, [r5, #0]
    	return kImageImageIsTrusted;
    }
	
	*newHandle = &state;
	return(0);
}
 8005cfc:	b066      	add	sp, #408	; 0x198
 8005cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d02:	bf00      	nop
 8005d04:	45626332 	strbmi	r6, [r2, #-818]!	; 0x332
 8005d08:	08007660 	stmdaeq	r0, {r5, r6, r9, sl, ip, sp, lr}
 8005d0c:	f7ff83f0 			; <UNDEFINED> instruction: 0xf7ff83f0
 8005d10:	08008000 	stmdaeq	r0, {pc}
 8005d14:	08007684 	stmdaeq	r0, {r2, r7, r9, sl, ip, sp, lr}
 8005d18:	080070e0 	stmdaeq	r0, {r5, r6, r7, ip, sp, lr}
 8005d1c:	08007690 	stmdaeq	r0, {r4, r7, r9, sl, ip, sp, lr}

08005d20 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(u8 bEpNum, u16 wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8005d20:	0080      	lsls	r0, r0, #2
 8005d22:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8005d26:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8005d2a:	6803      	ldr	r3, [r0, #0]
 8005d2c:	06ca      	lsls	r2, r1, #27
 8005d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	bf48      	it	mi
 8005d3a:	f083 0310 	eormi.w	r3, r3, #16
 8005d3e:	068a      	lsls	r2, r1, #26
 8005d40:	bf48      	it	mi
 8005d42:	f083 0320 	eormi.w	r3, r3, #32
 8005d46:	6003      	str	r3, [r0, #0]
 8005d48:	4770      	bx	lr

08005d4a <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(u8 bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8005d4a:	0080      	lsls	r0, r0, #2
 8005d4c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8005d50:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8005d54:	6803      	ldr	r3, [r0, #0]
 8005d56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005d64:	6003      	str	r3, [r0, #0]
 8005d66:	4770      	bx	lr

08005d68 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(u8 bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8005d68:	0080      	lsls	r0, r0, #2
 8005d6a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8005d6e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8005d72:	6803      	ldr	r3, [r0, #0]
 8005d74:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d7c:	041b      	lsls	r3, r3, #16
 8005d7e:	0c1b      	lsrs	r3, r3, #16
 8005d80:	6003      	str	r3, [r0, #0]
 8005d82:	4770      	bx	lr

08005d84 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(u8 bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8005d84:	0080      	lsls	r0, r0, #2
 8005d86:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8005d8a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8005d8e:	6803      	ldr	r3, [r0, #0]
 8005d90:	045b      	lsls	r3, r3, #17
 8005d92:	d506      	bpl.n	8005da2 <ClearDTOG_RX+0x1e>
 8005d94:	6802      	ldr	r2, [r0, #0]
 8005d96:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005da0:	6003      	str	r3, [r0, #0]
 8005da2:	4770      	bx	lr

08005da4 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(u8 bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8005da4:	0080      	lsls	r0, r0, #2
 8005da6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8005daa:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8005dae:	6803      	ldr	r3, [r0, #0]
 8005db0:	065b      	lsls	r3, r3, #25
 8005db2:	d506      	bpl.n	8005dc2 <ClearDTOG_TX+0x1e>
 8005db4:	6802      	ldr	r2, [r0, #0]
 8005db6:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8005dba:	4013      	ands	r3, r2
 8005dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dc0:	6003      	str	r3, [r0, #0]
 8005dc2:	4770      	bx	lr

08005dc4 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPTxAddr(u8 bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8005dc4:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <GetEPTxAddr+0x18>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005dce:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8005dd2:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8005dd6:	0040      	lsls	r0, r0, #1
}
 8005dd8:	8800      	ldrh	r0, [r0, #0]
 8005dda:	4770      	bx	lr
 8005ddc:	40005c50 	andmi	r5, r0, r0, asr ip

08005de0 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPRxAddr(u8 bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8005de0:	4b04      	ldr	r3, [pc, #16]	; (8005df4 <GetEPRxAddr+0x14>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005dea:	4b03      	ldr	r3, [pc, #12]	; (8005df8 <GetEPRxAddr+0x18>)
 8005dec:	4403      	add	r3, r0
 8005dee:	005b      	lsls	r3, r3, #1
}
 8005df0:	8818      	ldrh	r0, [r3, #0]
 8005df2:	4770      	bx	lr
 8005df4:	40005c50 	andmi	r5, r0, r0, asr ip
 8005df8:	20003004 	andcs	r3, r0, r4

08005dfc <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(u8 bEpNum, u16 wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8005dfc:	4b04      	ldr	r3, [pc, #16]	; (8005e10 <SetEPTxCount+0x14>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005e06:	4b03      	ldr	r3, [pc, #12]	; (8005e14 <SetEPTxCount+0x18>)
 8005e08:	4403      	add	r3, r0
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	6019      	str	r1, [r3, #0]
 8005e0e:	4770      	bx	lr
 8005e10:	40005c50 	andmi	r5, r0, r0, asr ip
 8005e14:	20003002 	andcs	r3, r0, r2

08005e18 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(u8 bEpNum, u16 wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8005e18:	4b0d      	ldr	r3, [pc, #52]	; (8005e50 <SetEPRxCount+0x38>)
 8005e1a:	293e      	cmp	r1, #62	; 0x3e
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005e24:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <SetEPRxCount+0x3c>)
 8005e26:	4403      	add	r3, r0
 8005e28:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8005e2c:	d909      	bls.n	8005e42 <SetEPRxCount+0x2a>
 8005e2e:	094b      	lsrs	r3, r1, #5
 8005e30:	06c8      	lsls	r0, r1, #27
 8005e32:	bf04      	itt	eq
 8005e34:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8005e38:	b29b      	uxtheq	r3, r3
 8005e3a:	029b      	lsls	r3, r3, #10
 8005e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e40:	e004      	b.n	8005e4c <SetEPRxCount+0x34>
 8005e42:	084b      	lsrs	r3, r1, #1
 8005e44:	07c9      	lsls	r1, r1, #31
 8005e46:	bf48      	it	mi
 8005e48:	3301      	addmi	r3, #1
 8005e4a:	029b      	lsls	r3, r3, #10
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	4770      	bx	lr
 8005e50:	40005c50 	andmi	r5, r0, r0, asr ip
 8005e54:	20003006 	andcs	r3, r0, r6

08005e58 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8005e58:	b570      	push	{r4, r5, r6, lr}
  u32 wEPVal = 0;
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8005e5a:	4a4c      	ldr	r2, [pc, #304]	; (8005f8c <CTR_LP+0x134>)
 8005e5c:	4b4c      	ldr	r3, [pc, #304]	; (8005f90 <CTR_LP+0x138>)
 8005e5e:	6811      	ldr	r1, [r2, #0]
 8005e60:	b288      	uxth	r0, r1
 8005e62:	040c      	lsls	r4, r1, #16
 8005e64:	8018      	strh	r0, [r3, #0]
 8005e66:	f140 8090 	bpl.w	8005f8a <CTR_LP+0x132>
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
 8005e6a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005e6e:	6011      	str	r1, [r2, #0]
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
 8005e70:	881a      	ldrh	r2, [r3, #0]
 8005e72:	4c48      	ldr	r4, [pc, #288]	; (8005f94 <CTR_LP+0x13c>)
 8005e74:	f002 020f 	and.w	r2, r2, #15
 8005e78:	7022      	strb	r2, [r4, #0]
    if (EPindex == 0)
 8005e7a:	2a00      	cmp	r2, #0
 8005e7c:	d15f      	bne.n	8005f3e <CTR_LP+0xe6>
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 8005e7e:	4c46      	ldr	r4, [pc, #280]	; (8005f98 <CTR_LP+0x140>)
 8005e80:	4d46      	ldr	r5, [pc, #280]	; (8005f9c <CTR_LP+0x144>)
 8005e82:	6822      	ldr	r2, [r4, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8005e84:	4e46      	ldr	r6, [pc, #280]	; (8005fa0 <CTR_LP+0x148>)
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 8005e86:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8005e8a:	802a      	strh	r2, [r5, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8005e8c:	6822      	ldr	r2, [r4, #0]
 8005e8e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005e92:	8032      	strh	r2, [r6, #0]
      _SetEPRxStatus(ENDP0, EP_RX_NAK);
 8005e94:	6822      	ldr	r2, [r4, #0]
 8005e96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005e9e:	b292      	uxth	r2, r2
 8005ea0:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8005ea4:	6022      	str	r2, [r4, #0]
      _SetEPTxStatus(ENDP0, EP_TX_NAK);
 8005ea6:	6822      	ldr	r2, [r4, #0]
 8005ea8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb0:	b292      	uxth	r2, r2
 8005eb2:	f082 0220 	eor.w	r2, r2, #32
 8005eb6:	6022      	str	r2, [r4, #0]


      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	06d8      	lsls	r0, r3, #27
 8005ebc:	d502      	bpl.n	8005ec4 <CTR_LP+0x6c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8005ebe:	6823      	ldr	r3, [r4, #0]
        if ((wEPVal & EP_CTR_TX) != 0)
 8005ec0:	0619      	lsls	r1, r3, #24
 8005ec2:	d507      	bpl.n	8005ed4 <CTR_LP+0x7c>
        {
          _ClearEP_CTR_TX(ENDP0);
 8005ec4:	6822      	ldr	r2, [r4, #0]
 8005ec6:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8005eca:	4013      	ands	r3, r2
 8005ecc:	6023      	str	r3, [r4, #0]
          In0_Process();
 8005ece:	f000 fc61 	bl	8006794 <In0_Process>
 8005ed2:	e012      	b.n	8005efa <CTR_LP+0xa2>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }
        else if ((wEPVal &EP_SETUP) != 0)
 8005ed4:	051a      	lsls	r2, r3, #20
 8005ed6:	d507      	bpl.n	8005ee8 <CTR_LP+0x90>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8005ed8:	6822      	ldr	r2, [r4, #0]
 8005eda:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005ede:	4013      	ands	r3, r2
 8005ee0:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 8005ee2:	f000 fa69 	bl	80063b8 <Setup0_Process>
 8005ee6:	e008      	b.n	8005efa <CTR_LP+0xa2>
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8005ee8:	0418      	lsls	r0, r3, #16
 8005eea:	d5b6      	bpl.n	8005e5a <CTR_LP+0x2>
        {
          _ClearEP_CTR_RX(ENDP0);
 8005eec:	6822      	ldr	r2, [r4, #0]
 8005eee:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8005ef6:	f000 fbcd 	bl	8006694 <Out0_Process>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	882a      	ldrh	r2, [r5, #0]
 8005efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	04d1      	lsls	r1, r2, #19
 8005f0a:	bf48      	it	mi
 8005f0c:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 8005f10:	0495      	lsls	r5, r2, #18
 8005f12:	4a21      	ldr	r2, [pc, #132]	; (8005f98 <CTR_LP+0x140>)
 8005f14:	bf48      	it	mi
 8005f16:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 8005f1a:	6013      	str	r3, [r2, #0]
          _SetEPTxStatus(ENDP0, SaveTState);
 8005f1c:	6813      	ldr	r3, [r2, #0]
 8005f1e:	8831      	ldrh	r1, [r6, #0]
 8005f20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	06cc      	lsls	r4, r1, #27
 8005f2c:	bf48      	it	mi
 8005f2e:	f083 0310 	eormi.w	r3, r3, #16
 8005f32:	0688      	lsls	r0, r1, #26
 8005f34:	bf48      	it	mi
 8005f36:	f083 0320 	eormi.w	r3, r3, #32
 8005f3a:	6013      	str	r3, [r2, #0]
          return;
 8005f3c:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8005f3e:	0093      	lsls	r3, r2, #2
 8005f40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f44:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005f48:	681d      	ldr	r5, [r3, #0]
      if ((wEPVal & EP_CTR_RX) != 0)
 8005f4a:	0429      	lsls	r1, r5, #16
 8005f4c:	d509      	bpl.n	8005f62 <CTR_LP+0x10a>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8005f4e:	6818      	ldr	r0, [r3, #0]
 8005f50:	f640 718f 	movw	r1, #3983	; 0xf8f
 8005f54:	4001      	ands	r1, r0
 8005f56:	6019      	str	r1, [r3, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8005f58:	4b12      	ldr	r3, [pc, #72]	; (8005fa4 <CTR_LP+0x14c>)
 8005f5a:	3a01      	subs	r2, #1
 8005f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f60:	4798      	blx	r3

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8005f62:	062b      	lsls	r3, r5, #24
 8005f64:	f57f af79 	bpl.w	8005e5a <CTR_LP+0x2>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8005f68:	7821      	ldrb	r1, [r4, #0]
 8005f6a:	f648 720f 	movw	r2, #36623	; 0x8f0f
 8005f6e:	008b      	lsls	r3, r1, #2
 8005f70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f74:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005f78:	6818      	ldr	r0, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8005f7a:	3901      	subs	r1, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8005f7c:	4002      	ands	r2, r0
 8005f7e:	601a      	str	r2, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8005f80:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <CTR_LP+0x150>)
 8005f82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005f86:	4798      	blx	r3
 8005f88:	e767      	b.n	8005e5a <CTR_LP+0x2>
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}
 8005f8c:	40005c44 	andmi	r5, r0, r4, asr #24
 8005f90:	20000474 	andcs	r0, r0, r4, ror r4
 8005f94:	20000570 	andcs	r0, r0, r0, ror r5
 8005f98:	40005c00 	andmi	r5, r0, r0, lsl #24
 8005f9c:	20000562 	andcs	r0, r0, r2, ror #10
 8005fa0:	20000564 	andcs	r0, r0, r4, ror #10
 8005fa4:	20000064 	andcs	r0, r0, r4, rrx
 8005fa8:	20000048 	andcs	r0, r0, r8, asr #32

08005fac <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8005fac:	b508      	push	{r3, lr}
  pInformation = &Device_Info;
 8005fae:	4a07      	ldr	r2, [pc, #28]	; (8005fcc <USB_Init+0x20>)
 8005fb0:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <USB_Init+0x24>)
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8005fb2:	4908      	ldr	r1, [pc, #32]	; (8005fd4 <USB_Init+0x28>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 8005fb4:	6013      	str	r3, [r2, #0]
  pInformation->ControlState = 2;
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	721a      	strb	r2, [r3, #8]
  pProperty = &Device_Property;
 8005fba:	4b07      	ldr	r3, [pc, #28]	; (8005fd8 <USB_Init+0x2c>)
 8005fbc:	4a07      	ldr	r2, [pc, #28]	; (8005fdc <USB_Init+0x30>)
 8005fbe:	6013      	str	r3, [r2, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8005fc0:	4a07      	ldr	r2, [pc, #28]	; (8005fe0 <USB_Init+0x34>)
  /* Initialize devices one by one */

  pProperty->Init();
 8005fc2:	681b      	ldr	r3, [r3, #0]
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8005fc4:	6011      	str	r1, [r2, #0]
  /* Initialize devices one by one */

  pProperty->Init();
 8005fc6:	4798      	blx	r3
 8005fc8:	bd08      	pop	{r3, pc}
 8005fca:	bf00      	nop
 8005fcc:	20000594 	mulcs	r0, r4, r5
 8005fd0:	20000574 	andcs	r0, r0, r4, ror r5
 8005fd4:	20000080 	andcs	r0, r0, r0, lsl #1
 8005fd8:	20000014 	andcs	r0, r0, r4, lsl r0
 8005fdc:	2000056c 	andcs	r0, r0, ip, ror #10
 8005fe0:	20000590 	mulcs	r0, r0, r5

08005fe4 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetConfiguration(u16 Length)
{
 8005fe4:	b510      	push	{r4, lr}
 8005fe6:	4c06      	ldr	r4, [pc, #24]	; (8006000 <Standard_GetConfiguration+0x1c>)
  if (Length == 0)
 8005fe8:	b918      	cbnz	r0, 8005ff2 <Standard_GetConfiguration+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	2201      	movs	r2, #1
 8005fee:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8005ff0:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8005ff2:	4b04      	ldr	r3, [pc, #16]	; (8006004 <Standard_GetConfiguration+0x20>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4798      	blx	r3
  return (u8 *)&pInformation->Current_Configuration;
 8005ffa:	6820      	ldr	r0, [r4, #0]
 8005ffc:	300a      	adds	r0, #10
}
 8005ffe:	bd10      	pop	{r4, pc}
 8006000:	20000594 	mulcs	r0, r4, r5
 8006004:	20000590 	mulcs	r0, r0, r5

08006008 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetInterface(u16 Length)
{
 8006008:	b510      	push	{r4, lr}
 800600a:	4c06      	ldr	r4, [pc, #24]	; (8006024 <Standard_GetInterface+0x1c>)
  if (Length == 0)
 800600c:	b918      	cbnz	r0, 8006016 <Standard_GetInterface+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	2201      	movs	r2, #1
 8006012:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8006014:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetInterface();
 8006016:	4b04      	ldr	r3, [pc, #16]	; (8006028 <Standard_GetInterface+0x20>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	4798      	blx	r3
  return (u8 *)&pInformation->Current_AlternateSetting;
 800601e:	6820      	ldr	r0, [r4, #0]
 8006020:	300c      	adds	r0, #12
}
 8006022:	bd10      	pop	{r4, pc}
 8006024:	20000594 	mulcs	r0, r4, r5
 8006028:	20000590 	mulcs	r0, r0, r5

0800602c <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
u8 *Standard_GetStatus(u16 Length)
{
 800602c:	b510      	push	{r4, lr}
 800602e:	4b20      	ldr	r3, [pc, #128]	; (80060b0 <Standard_GetStatus+0x84>)
  if (Length == 0)
 8006030:	b918      	cbnz	r0, 800603a <Standard_GetStatus+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2202      	movs	r2, #2
 8006036:	821a      	strh	r2, [r3, #16]
    return 0;
 8006038:	bd10      	pop	{r4, pc}
  }

  StatusInfo.w = 0;
 800603a:	4a1e      	ldr	r2, [pc, #120]	; (80060b4 <Standard_GetStatus+0x88>)
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800603c:	6819      	ldr	r1, [r3, #0]
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  StatusInfo.w = 0;
 800603e:	2000      	movs	r0, #0
 8006040:	8010      	strh	r0, [r2, #0]
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8006042:	780c      	ldrb	r4, [r1, #0]
 8006044:	4613      	mov	r3, r2
 8006046:	f014 047f 	ands.w	r4, r4, #127	; 0x7f
 800604a:	d10d      	bne.n	8006068 <Standard_GetStatus+0x3c>
  {
    /*Get Device Status */
    u8 Feature = pInformation->Current_Feature;
 800604c:	7a4a      	ldrb	r2, [r1, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 800604e:	0691      	lsls	r1, r2, #26
    {
      SetBit(StatusInfo0, 1);
 8006050:	bf44      	itt	mi
 8006052:	2102      	movmi	r1, #2
 8006054:	7019      	strbmi	r1, [r3, #0]
    }

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8006056:	f012 0f40 	tst.w	r2, #64	; 0x40
    {
      ClrBit(StatusInfo0, 0);
 800605a:	781a      	ldrb	r2, [r3, #0]
 800605c:	bf14      	ite	ne
 800605e:	f022 0201 	bicne.w	r2, r2, #1
    }
    else /* Self-powered */
    {
      SetBit(StatusInfo0, 0);
 8006062:	f042 0201 	orreq.w	r2, r2, #1
 8006066:	e014      	b.n	8006092 <Standard_GetStatus+0x66>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8006068:	2c01      	cmp	r4, #1
 800606a:	d01f      	beq.n	80060ac <Standard_GetStatus+0x80>
  {
    return (u8 *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800606c:	2c02      	cmp	r4, #2
 800606e:	d11e      	bne.n	80060ae <Standard_GetStatus+0x82>
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;
 8006070:	7909      	ldrb	r1, [r1, #4]

    Related_Endpoint = (wIndex0 & 0x0f);
 8006072:	f001 020f 	and.w	r2, r1, #15
 8006076:	0092      	lsls	r2, r2, #2
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8006078:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800607c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8006080:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8006084:	6812      	ldr	r2, [r2, #0]
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8006086:	d006      	beq.n	8006096 <Standard_GetStatus+0x6a>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8006088:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800608c:	2a10      	cmp	r2, #16
 800608e:	d107      	bne.n	80060a0 <Standard_GetStatus+0x74>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8006090:	2201      	movs	r2, #1
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	e004      	b.n	80060a0 <Standard_GetStatus+0x74>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8006096:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800609a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800609e:	e7f6      	b.n	800608e <Standard_GetStatus+0x62>
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 80060a0:	4b05      	ldr	r3, [pc, #20]	; (80060b8 <Standard_GetStatus+0x8c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	4798      	blx	r3
  return (u8 *)&StatusInfo;
 80060a8:	4802      	ldr	r0, [pc, #8]	; (80060b4 <Standard_GetStatus+0x88>)
 80060aa:	bd10      	pop	{r4, pc}
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    return (u8 *)&StatusInfo;
 80060ac:	4610      	mov	r0, r2
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
  return (u8 *)&StatusInfo;
}
 80060ae:	bd10      	pop	{r4, pc}
 80060b0:	20000594 	mulcs	r0, r4, r5
 80060b4:	2000059a 	mulcs	r0, sl, r5
 80060b8:	20000590 	mulcs	r0, r0, r5

080060bc <DataStageIn>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80060bc:	4a23      	ldr	r2, [pc, #140]	; (800614c <DataStageIn+0x90>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 80060be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80060c2:	6814      	ldr	r4, [r2, #0]
 80060c4:	4690      	mov	r8, r2
  u32 save_wLength = pEPinfo->Usb_wLength;
 80060c6:	8a23      	ldrh	r3, [r4, #16]
  u32 ControlState = pInformation->ControlState;
 80060c8:	7a26      	ldrb	r6, [r4, #8]
 80060ca:	4f21      	ldr	r7, [pc, #132]	; (8006150 <DataStageIn+0x94>)

  u8 *DataBuffer;
  u32 Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 80060cc:	b9a3      	cbnz	r3, 80060f8 <DataStageIn+0x3c>
 80060ce:	2e04      	cmp	r6, #4
 80060d0:	d112      	bne.n	80060f8 <DataStageIn+0x3c>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 80060d2:	4920      	ldr	r1, [pc, #128]	; (8006154 <DataStageIn+0x98>)
 80060d4:	780a      	ldrb	r2, [r1, #0]
 80060d6:	2a01      	cmp	r2, #1
 80060d8:	d10a      	bne.n	80060f0 <DataStageIn+0x34>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 80060da:	4a1f      	ldr	r2, [pc, #124]	; (8006158 <DataStageIn+0x9c>)
 80060dc:	6810      	ldr	r0, [r2, #0]
 80060de:	4a1f      	ldr	r2, [pc, #124]	; (800615c <DataStageIn+0xa0>)
 80060e0:	b280      	uxth	r0, r0
 80060e2:	4402      	add	r2, r0
 80060e4:	0052      	lsls	r2, r2, #1
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	2230      	movs	r2, #48	; 0x30
 80060ea:	803a      	strh	r2, [r7, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 80060ec:	700b      	strb	r3, [r1, #0]
 80060ee:	e027      	b.n	8006140 <DataStageIn+0x84>
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 80060f0:	2310      	movs	r3, #16
 80060f2:	803b      	strh	r3, [r7, #0]
      Data_Mul_MaxPacketSize = FALSE;
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 80060f4:	2607      	movs	r6, #7
 80060f6:	e023      	b.n	8006140 <DataStageIn+0x84>
    }

    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 80060f8:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 80060fa:	42ab      	cmp	r3, r5
 80060fc:	bf8c      	ite	hi
 80060fe:	2602      	movhi	r6, #2
 8006100:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8006102:	429d      	cmp	r5, r3
 8006104:	bf28      	it	cs
 8006106:	461d      	movcs	r5, r3
 8006108:	4628      	mov	r0, r5
 800610a:	69a3      	ldr	r3, [r4, #24]
 800610c:	4798      	blx	r3
 800610e:	4681      	mov	r9, r0

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8006110:	2000      	movs	r0, #0
 8006112:	f7ff fe57 	bl	8005dc4 <GetEPTxAddr>
 8006116:	462a      	mov	r2, r5
 8006118:	4601      	mov	r1, r0
 800611a:	4648      	mov	r0, r9
 800611c:	f000 fb68 	bl	80067f0 <UserToPMABufferCopy>

  SetEPTxCount(ENDP0, Length);
 8006120:	4629      	mov	r1, r5
 8006122:	2000      	movs	r0, #0
 8006124:	f7ff fe6a 	bl	8005dfc <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 8006128:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800612a:	f44f 5240 	mov.w	r2, #12288	; 0x3000

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 800612e:	1b5b      	subs	r3, r3, r5
 8006130:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8006132:	8a63      	ldrh	r3, [r4, #18]
 8006134:	441d      	add	r5, r3
  vSetEPTxStatus(EP_TX_VALID);
 8006136:	2330      	movs	r3, #48	; 0x30
 8006138:	803b      	strh	r3, [r7, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800613a:	4b09      	ldr	r3, [pc, #36]	; (8006160 <DataStageIn+0xa4>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 800613c:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800613e:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8006140:	f8d8 3000 	ldr.w	r3, [r8]
 8006144:	721e      	strb	r6, [r3, #8]
 8006146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800614a:	bf00      	nop
 800614c:	20000594 	mulcs	r0, r4, r5
 8006150:	20000564 	andcs	r0, r0, r4, ror #10
 8006154:	20000dbd 			; <UNDEFINED> instruction: 0x20000dbd
 8006158:	40005c50 	andmi	r5, r0, r0, asr ip
 800615c:	20003002 	andcs	r3, r0, r2
 8006160:	20000562 	andcs	r0, r0, r2, ror #10

08006164 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8006164:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 8006166:	4b0a      	ldr	r3, [pc, #40]	; (8006190 <Standard_SetConfiguration+0x2c>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8006168:	490a      	ldr	r1, [pc, #40]	; (8006194 <Standard_SetConfiguration+0x30>)
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	7849      	ldrb	r1, [r1, #1]
 800616e:	789a      	ldrb	r2, [r3, #2]
 8006170:	4291      	cmp	r1, r2
 8006172:	d30a      	bcc.n	800618a <Standard_SetConfiguration+0x26>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8006174:	78d9      	ldrb	r1, [r3, #3]
 8006176:	b941      	cbnz	r1, 800618a <Standard_SetConfiguration+0x26>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8006178:	889c      	ldrh	r4, [r3, #4]
 800617a:	b934      	cbnz	r4, 800618a <Standard_SetConfiguration+0x26>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 800617c:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800617e:	4b06      	ldr	r3, [pc, #24]	; (8006198 <Standard_SetConfiguration+0x34>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	4798      	blx	r3
    return USB_SUCCESS;
 8006186:	4620      	mov	r0, r4
 8006188:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USB_UNSUPPORT;
 800618a:	2002      	movs	r0, #2
  }
}
 800618c:	bd10      	pop	{r4, pc}
 800618e:	bf00      	nop
 8006190:	20000594 	mulcs	r0, r4, r5
 8006194:	200000a4 	andcs	r0, r0, r4, lsr #1
 8006198:	20000590 	mulcs	r0, r0, r5

0800619c <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 800619c:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800619e:	4a0e      	ldr	r2, [pc, #56]	; (80061d8 <Standard_SetInterface+0x3c>)
 80061a0:	4c0e      	ldr	r4, [pc, #56]	; (80061dc <Standard_SetInterface+0x40>)
 80061a2:	6812      	ldr	r2, [r2, #0]
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	6992      	ldr	r2, [r2, #24]
 80061a8:	7918      	ldrb	r0, [r3, #4]
 80061aa:	7899      	ldrb	r1, [r3, #2]
 80061ac:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	7a9a      	ldrb	r2, [r3, #10]
 80061b2:	b17a      	cbz	r2, 80061d4 <Standard_SetInterface+0x38>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 80061b4:	b970      	cbnz	r0, 80061d4 <Standard_SetInterface+0x38>
 80061b6:	795a      	ldrb	r2, [r3, #5]
 80061b8:	b962      	cbnz	r2, 80061d4 <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 80061ba:	78dd      	ldrb	r5, [r3, #3]
 80061bc:	b955      	cbnz	r5, 80061d4 <Standard_SetInterface+0x38>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 80061be:	4b08      	ldr	r3, [pc, #32]	; (80061e0 <Standard_SetInterface+0x44>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80061c6:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 80061c8:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80061ca:	791a      	ldrb	r2, [r3, #4]
 80061cc:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 80061ce:	789a      	ldrb	r2, [r3, #2]
 80061d0:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 80061d2:	bd38      	pop	{r3, r4, r5, pc}
    }

  }

  return USB_UNSUPPORT;
 80061d4:	2002      	movs	r0, #2
}
 80061d6:	bd38      	pop	{r3, r4, r5, pc}
 80061d8:	2000056c 	andcs	r0, r0, ip, ror #10
 80061dc:	20000594 	mulcs	r0, r4, r5
 80061e0:	20000590 	mulcs	r0, r0, r5

080061e4 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 80061e4:	b538      	push	{r3, r4, r5, lr}
  u32     Type_Rec = Type_Recipient;
 80061e6:	4b2f      	ldr	r3, [pc, #188]	; (80062a4 <Standard_ClearFeature+0xc0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	7818      	ldrb	r0, [r3, #0]
  u32     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80061ec:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 80061f0:	d104      	bne.n	80061fc <Standard_ClearFeature+0x18>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 80061f2:	7a5a      	ldrb	r2, [r3, #9]
 80061f4:	f022 0220 	bic.w	r2, r2, #32
 80061f8:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 80061fa:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80061fc:	2802      	cmp	r0, #2
 80061fe:	d14e      	bne.n	800629e <Standard_ClearFeature+0xba>
    DEVICE* pDev;
    u32 Related_Endpoint;
    u32 wIndex0;
    u32 rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8006200:	885a      	ldrh	r2, [r3, #2]
 8006202:	2a00      	cmp	r2, #0
 8006204:	d14c      	bne.n	80062a0 <Standard_ClearFeature+0xbc>
        || (pInformation->USBwIndex1 != 0))
 8006206:	795a      	ldrb	r2, [r3, #5]
 8006208:	2a00      	cmp	r2, #0
 800620a:	d149      	bne.n	80062a0 <Standard_ClearFeature+0xbc>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 800620c:	791a      	ldrb	r2, [r3, #4]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800620e:	4d26      	ldr	r5, [pc, #152]	; (80062a8 <Standard_ClearFeature+0xc4>)
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
 8006210:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 8006214:	0084      	lsls	r4, r0, #2

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8006216:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 800621a:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 800621e:	6809      	ldr	r1, [r1, #0]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8006220:	782d      	ldrb	r5, [r5, #0]
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 8006222:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8006226:	bf14      	ite	ne
 8006228:	f001 0130 	andne.w	r1, r1, #48	; 0x30
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 800622c:	f401 5140 	andeq.w	r1, r1, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8006230:	42a8      	cmp	r0, r5
 8006232:	d234      	bcs.n	800629e <Standard_ClearFeature+0xba>
 8006234:	2900      	cmp	r1, #0
 8006236:	d032      	beq.n	800629e <Standard_ClearFeature+0xba>
        || (pInformation->Current_Configuration == 0))
 8006238:	7a9b      	ldrb	r3, [r3, #10]
 800623a:	b383      	cbz	r3, 800629e <Standard_ClearFeature+0xba>


    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 800623c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8006240:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8006244:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8006246:	6823      	ldr	r3, [r4, #0]
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8006248:	d50c      	bpl.n	8006264 <Standard_ClearFeature+0x80>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 800624a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800624e:	2b10      	cmp	r3, #16
 8006250:	d11f      	bne.n	8006292 <Standard_ClearFeature+0xae>
      {
        ClearDTOG_TX(Related_Endpoint);
 8006252:	b2c4      	uxtb	r4, r0
 8006254:	4620      	mov	r0, r4
 8006256:	f7ff fda5 	bl	8005da4 <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 800625a:	4620      	mov	r0, r4
 800625c:	2130      	movs	r1, #48	; 0x30
 800625e:	f7ff fd5f 	bl	8005d20 <SetEPTxStatus>
 8006262:	e016      	b.n	8006292 <Standard_ClearFeature+0xae>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8006264:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800626c:	d111      	bne.n	8006292 <Standard_ClearFeature+0xae>
      {
        if (Related_Endpoint == ENDP0)
 800626e:	b928      	cbnz	r0, 800627c <Standard_ClearFeature+0x98>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8006270:	4b0e      	ldr	r3, [pc, #56]	; (80062ac <Standard_ClearFeature+0xc8>)
 8006272:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8006276:	f7ff fdcf 	bl	8005e18 <SetEPRxCount>
 800627a:	e001      	b.n	8006280 <Standard_ClearFeature+0x9c>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 800627c:	f7ff fd82 	bl	8005d84 <ClearDTOG_RX>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628a:	b29b      	uxth	r3, r3
 800628c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006290:	6023      	str	r3, [r4, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 8006292:	4b07      	ldr	r3, [pc, #28]	; (80062b0 <Standard_ClearFeature+0xcc>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	4798      	blx	r3
    return USB_SUCCESS;
 800629a:	2000      	movs	r0, #0
 800629c:	bd38      	pop	{r3, r4, r5, pc}
  }

  return USB_UNSUPPORT;
 800629e:	2002      	movs	r0, #2
}
 80062a0:	bd38      	pop	{r3, r4, r5, pc}
 80062a2:	bf00      	nop
 80062a4:	20000594 	mulcs	r0, r4, r5
 80062a8:	200000a4 	andcs	r0, r0, r4, lsr #1
 80062ac:	20000014 	andcs	r0, r0, r4, lsl r0
 80062b0:	20000590 	mulcs	r0, r0, r5

080062b4 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 80062b4:	b538      	push	{r3, r4, r5, lr}
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 80062b6:	4b1d      	ldr	r3, [pc, #116]	; (800632c <Standard_SetEndPointFeature+0x78>)
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80062b8:	4d1d      	ldr	r5, [pc, #116]	; (8006330 <Standard_SetEndPointFeature+0x7c>)
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 80062ba:	6819      	ldr	r1, [r3, #0]
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80062bc:	782d      	ldrb	r5, [r5, #0]
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 80062be:	790a      	ldrb	r2, [r1, #4]
  rEP = wIndex0 & ~0x80;
 80062c0:	f022 0480 	bic.w	r4, r2, #128	; 0x80
 80062c4:	00a3      	lsls	r3, r4, #2

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80062c6:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 80062ca:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80062ce:	6800      	ldr	r0, [r0, #0]

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 80062d0:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80062d4:	bf14      	ite	ne
 80062d6:	f000 0030 	andne.w	r0, r0, #48	; 0x30
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 80062da:	f400 5040 	andeq.w	r0, r0, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80062de:	42ac      	cmp	r4, r5
 80062e0:	d222      	bcs.n	8006328 <Standard_SetEndPointFeature+0x74>
      || pInformation->USBwValue != 0 || Status == 0
 80062e2:	884c      	ldrh	r4, [r1, #2]
 80062e4:	bb04      	cbnz	r4, 8006328 <Standard_SetEndPointFeature+0x74>
 80062e6:	b1f8      	cbz	r0, 8006328 <Standard_SetEndPointFeature+0x74>
      || pInformation->Current_Configuration == 0)
 80062e8:	7a89      	ldrb	r1, [r1, #10]
 80062ea:	b1e9      	cbz	r1, 8006328 <Standard_SetEndPointFeature+0x74>
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80062ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062f0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80062f4:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80062f8:	681a      	ldr	r2, [r3, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80062fa:	d007      	beq.n	800630c <Standard_SetEndPointFeature+0x58>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80062fc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006304:	b292      	uxth	r2, r2
 8006306:	f082 0210 	eor.w	r2, r2, #16
 800630a:	e006      	b.n	800631a <Standard_SetEndPointFeature+0x66>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 800630c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006310:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006314:	b292      	uxth	r2, r2
 8006316:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 800631a:	601a      	str	r2, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 800631c:	4b05      	ldr	r3, [pc, #20]	; (8006334 <Standard_SetEndPointFeature+0x80>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	4798      	blx	r3
  return USB_SUCCESS;
 8006324:	2000      	movs	r0, #0
 8006326:	bd38      	pop	{r3, r4, r5, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8006328:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	20000594 	mulcs	r0, r4, r5
 8006330:	200000a4 	andcs	r0, r0, r4, lsr #1
 8006334:	20000590 	mulcs	r0, r0, r5

08006338 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 8006338:	b508      	push	{r3, lr}
  SetBit(pInformation->Current_Feature, 5);
 800633a:	4b06      	ldr	r3, [pc, #24]	; (8006354 <Standard_SetDeviceFeature+0x1c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	7a5a      	ldrb	r2, [r3, #9]
 8006340:	f042 0220 	orr.w	r2, r2, #32
 8006344:	725a      	strb	r2, [r3, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8006346:	4b04      	ldr	r3, [pc, #16]	; (8006358 <Standard_SetDeviceFeature+0x20>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	4798      	blx	r3
  return USB_SUCCESS;
}
 800634e:	2000      	movs	r0, #0
 8006350:	bd08      	pop	{r3, pc}
 8006352:	bf00      	nop
 8006354:	20000594 	mulcs	r0, r4, r5
 8006358:	20000590 	mulcs	r0, r0, r5

0800635c <Standard_GetDescriptorData>:
*******************************************************************************/
u8 *Standard_GetDescriptorData(u16 Length, ONE_DESCRIPTOR *pDesc)
{
  u32  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 800635c:	4b05      	ldr	r3, [pc, #20]	; (8006374 <Standard_GetDescriptorData+0x18>)
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	8a53      	ldrh	r3, [r2, #18]
  if (Length == 0)
 8006362:	b918      	cbnz	r0, 800636c <Standard_GetDescriptorData+0x10>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8006364:	8889      	ldrh	r1, [r1, #4]
 8006366:	1acb      	subs	r3, r1, r3
 8006368:	8213      	strh	r3, [r2, #16]
    return 0;
 800636a:	4770      	bx	lr
  }

  return pDesc->Descriptor + wOffset;
 800636c:	6808      	ldr	r0, [r1, #0]
 800636e:	4418      	add	r0, r3
}
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	20000594 	mulcs	r0, r4, r5

08006378 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
u8 Post0_Process(void)
{
 8006378:	b508      	push	{r3, lr}
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800637a:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <Post0_Process+0x30>)
 800637c:	2000      	movs	r0, #0
 800637e:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8006382:	f7ff fd49 	bl	8005e18 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 8006386:	4b09      	ldr	r3, [pc, #36]	; (80063ac <Post0_Process+0x34>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	7a18      	ldrb	r0, [r3, #8]
 800638c:	2808      	cmp	r0, #8
 800638e:	d106      	bne.n	800639e <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8006390:	4b07      	ldr	r3, [pc, #28]	; (80063b0 <Post0_Process+0x38>)
 8006392:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006396:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8006398:	4b06      	ldr	r3, [pc, #24]	; (80063b4 <Post0_Process+0x3c>)
 800639a:	2210      	movs	r2, #16
 800639c:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 800639e:	f1b0 0309 	subs.w	r3, r0, #9
 80063a2:	4258      	negs	r0, r3
 80063a4:	4158      	adcs	r0, r3
 80063a6:	bd08      	pop	{r3, pc}
 80063a8:	20000014 	andcs	r0, r0, r4, lsl r0
 80063ac:	20000594 	mulcs	r0, r4, r5
 80063b0:	20000562 	andcs	r0, r0, r2, ror #10
 80063b4:	20000564 	andcs	r0, r0, r4, ror #10

080063b8 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Setup0_Process(void)
{
 80063b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80063ba:	4e96      	ldr	r6, [pc, #600]	; (8006614 <Setup0_Process+0x25c>)
 80063bc:	4b96      	ldr	r3, [pc, #600]	; (8006618 <Setup0_Process+0x260>)
 80063be:	6832      	ldr	r2, [r6, #0]

  if (pInformation->ControlState != PAUSE)
 80063c0:	4d96      	ldr	r5, [pc, #600]	; (800661c <Setup0_Process+0x264>)
 80063c2:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80063c4:	4413      	add	r3, r2
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 80063ca:	682b      	ldr	r3, [r5, #0]
 80063cc:	7a19      	ldrb	r1, [r3, #8]
 80063ce:	2909      	cmp	r1, #9
 80063d0:	d00f      	beq.n	80063f2 <Setup0_Process+0x3a>
 80063d2:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80063d4:	0052      	lsls	r2, r2, #1
 80063d6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80063da:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80063de:	7811      	ldrb	r1, [r2, #0]
 80063e0:	7019      	strb	r1, [r3, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 80063e2:	7851      	ldrb	r1, [r2, #1]
 80063e4:	7059      	strb	r1, [r3, #1]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = *pBuf.w++; /* wValue in Little Endian */
 80063e6:	8891      	ldrh	r1, [r2, #4]
 80063e8:	8059      	strh	r1, [r3, #2]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = *pBuf.w++; /* wIndex in Little Endian */
 80063ea:	8911      	ldrh	r1, [r2, #8]
 80063ec:	8099      	strh	r1, [r3, #4]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength in Little Endian */
 80063ee:	8992      	ldrh	r2, [r2, #12]
 80063f0:	80da      	strh	r2, [r3, #6]
  }

  pInformation->ControlState = SETTING_UP;
 80063f2:	2201      	movs	r2, #1
 80063f4:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 80063f6:	88da      	ldrh	r2, [r3, #6]
 80063f8:	785c      	ldrb	r4, [r3, #1]
 80063fa:	2a00      	cmp	r2, #0
 80063fc:	d161      	bne.n	80064c2 <Setup0_Process+0x10a>
{
  RESULT Result = USB_UNSUPPORT;
  u32 RequestNo = pInformation->USBbRequest;
  u32 ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80063fe:	781a      	ldrb	r2, [r3, #0]
 8006400:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 8006404:	d13a      	bne.n	800647c <Setup0_Process+0xc4>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8006406:	2c09      	cmp	r4, #9
 8006408:	d102      	bne.n	8006410 <Setup0_Process+0x58>
    {
      Result = Standard_SetConfiguration();
 800640a:	f7ff feab 	bl	8006164 <Standard_SetConfiguration>
 800640e:	e044      	b.n	800649a <Setup0_Process+0xe2>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8006410:	2c05      	cmp	r4, #5
 8006412:	d10f      	bne.n	8006434 <Setup0_Process+0x7c>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8006414:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8006418:	2a00      	cmp	r2, #0
 800641a:	da01      	bge.n	8006420 <Setup0_Process+0x68>
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 800641c:	2308      	movs	r3, #8
 800641e:	e04d      	b.n	80064bc <Setup0_Process+0x104>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8006420:	78da      	ldrb	r2, [r3, #3]
 8006422:	2a00      	cmp	r2, #0
 8006424:	d1fa      	bne.n	800641c <Setup0_Process+0x64>
          || (pInformation->USBwIndex != 0)
 8006426:	889a      	ldrh	r2, [r3, #4]
 8006428:	2a00      	cmp	r2, #0
 800642a:	d1f7      	bne.n	800641c <Setup0_Process+0x64>
          || (pInformation->Current_Configuration != 0))
 800642c:	7a9b      	ldrb	r3, [r3, #10]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d037      	beq.n	80064a2 <Setup0_Process+0xea>
 8006432:	e7f3      	b.n	800641c <Setup0_Process+0x64>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8006434:	2c03      	cmp	r4, #3
 8006436:	d113      	bne.n	8006460 <Setup0_Process+0xa8>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 8006438:	789a      	ldrb	r2, [r3, #2]
 800643a:	2a01      	cmp	r2, #1
 800643c:	d007      	beq.n	800644e <Setup0_Process+0x96>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 800643e:	4b78      	ldr	r3, [pc, #480]	; (8006620 <Setup0_Process+0x268>)
 8006440:	4620      	mov	r0, r4
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8006448:	2803      	cmp	r0, #3
 800644a:	d128      	bne.n	800649e <Setup0_Process+0xe6>
 800644c:	e035      	b.n	80064ba <Setup0_Process+0x102>
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
          && (pInformation->USBwIndex == 0)
 800644e:	889a      	ldrh	r2, [r3, #4]
 8006450:	2a00      	cmp	r2, #0
 8006452:	d1f4      	bne.n	800643e <Setup0_Process+0x86>
          && (ValBit(pInformation->Current_Feature, 5)))
 8006454:	7a5b      	ldrb	r3, [r3, #9]
 8006456:	0698      	lsls	r0, r3, #26
 8006458:	d5f1      	bpl.n	800643e <Setup0_Process+0x86>
      {
        Result = Standard_SetDeviceFeature();
 800645a:	f7ff ff6d 	bl	8006338 <Standard_SetDeviceFeature>
 800645e:	e01c      	b.n	800649a <Setup0_Process+0xe2>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8006460:	2c01      	cmp	r4, #1
 8006462:	d1ec      	bne.n	800643e <Setup0_Process+0x86>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8006464:	789a      	ldrb	r2, [r3, #2]
 8006466:	2a01      	cmp	r2, #1
 8006468:	d1e9      	bne.n	800643e <Setup0_Process+0x86>
          && pInformation->USBwIndex == 0
 800646a:	889a      	ldrh	r2, [r3, #4]
 800646c:	2a00      	cmp	r2, #0
 800646e:	d1e6      	bne.n	800643e <Setup0_Process+0x86>
          && ValBit(pInformation->Current_Feature, 5))
 8006470:	7a5b      	ldrb	r3, [r3, #9]
 8006472:	0699      	lsls	r1, r3, #26
 8006474:	d5e3      	bpl.n	800643e <Setup0_Process+0x86>
      {
        Result = Standard_ClearFeature();
 8006476:	f7ff feb5 	bl	80061e4 <Standard_ClearFeature>
 800647a:	e00e      	b.n	800649a <Setup0_Process+0xe2>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800647c:	2a01      	cmp	r2, #1
 800647e:	d104      	bne.n	800648a <Setup0_Process+0xd2>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8006480:	2c0b      	cmp	r4, #11
 8006482:	d1dc      	bne.n	800643e <Setup0_Process+0x86>
    {
      Result = Standard_SetInterface();
 8006484:	f7ff fe8a 	bl	800619c <Standard_SetInterface>
 8006488:	e007      	b.n	800649a <Setup0_Process+0xe2>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800648a:	2a02      	cmp	r2, #2
 800648c:	d1d7      	bne.n	800643e <Setup0_Process+0x86>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 800648e:	2c01      	cmp	r4, #1
 8006490:	d0f1      	beq.n	8006476 <Setup0_Process+0xbe>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8006492:	2c03      	cmp	r4, #3
 8006494:	d1d3      	bne.n	800643e <Setup0_Process+0x86>
    {
      Result = Standard_SetEndPointFeature();
 8006496:	f7ff ff0d 	bl	80062b4 <Standard_SetEndPointFeature>
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 800649a:	b110      	cbz	r0, 80064a2 <Setup0_Process+0xea>
 800649c:	e7cf      	b.n	800643e <Setup0_Process+0x86>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 800649e:	2800      	cmp	r0, #0
 80064a0:	d1bc      	bne.n	800641c <Setup0_Process+0x64>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 80064a2:	6832      	ldr	r2, [r6, #0]
 80064a4:	4b5f      	ldr	r3, [pc, #380]	; (8006624 <Setup0_Process+0x26c>)
 80064a6:	b292      	uxth	r2, r2
 80064a8:	4413      	add	r3, r2
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	4b5d      	ldr	r3, [pc, #372]	; (8006628 <Setup0_Process+0x270>)
 80064b2:	2230      	movs	r2, #48	; 0x30
 80064b4:	801a      	strh	r2, [r3, #0]
  {
    ControlState = STALLED;
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 80064b6:	2306      	movs	r3, #6
 80064b8:	e000      	b.n	80064bc <Setup0_Process+0x104>
  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
    {
      ControlState = PAUSE;
 80064ba:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80064bc:	682a      	ldr	r2, [r5, #0]
 80064be:	7213      	strb	r3, [r2, #8]
 80064c0:	e0d4      	b.n	800666c <Setup0_Process+0x2b4>


  CopyRoutine = NULL;
  wOffset = 0;

  if (Request_No == GET_DESCRIPTOR)
 80064c2:	2c06      	cmp	r4, #6
 80064c4:	d118      	bne.n	80064f8 <Setup0_Process+0x140>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80064c6:	781a      	ldrb	r2, [r3, #0]
 80064c8:	0652      	lsls	r2, r2, #25
 80064ca:	d17c      	bne.n	80065c6 <Setup0_Process+0x20e>
    {
      u8 wValue1 = pInformation->USBwValue1;
 80064cc:	78da      	ldrb	r2, [r3, #3]
 80064ce:	4b54      	ldr	r3, [pc, #336]	; (8006620 <Setup0_Process+0x268>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 80064d0:	2a01      	cmp	r2, #1
 80064d2:	d102      	bne.n	80064da <Setup0_Process+0x122>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	e06c      	b.n	80065b4 <Setup0_Process+0x1fc>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 80064da:	2a02      	cmp	r2, #2
 80064dc:	d102      	bne.n	80064e4 <Setup0_Process+0x12c>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	e067      	b.n	80065b4 <Setup0_Process+0x1fc>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 80064e4:	2a03      	cmp	r2, #3
 80064e6:	d102      	bne.n	80064ee <Setup0_Process+0x136>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	e062      	b.n	80065b4 <Setup0_Process+0x1fc>
      } else if (wValue1 == 0x21) /* added to support functional descriptors */
 80064ee:	2a21      	cmp	r2, #33	; 0x21
 80064f0:	d169      	bne.n	80065c6 <Setup0_Process+0x20e>
      {
	CopyRoutine = pProperty->GetFunctionalDescriptor;
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f6:	e05d      	b.n	80065b4 <Setup0_Process+0x1fc>
      } /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 80064f8:	2c00      	cmp	r4, #0
 80064fa:	d13c      	bne.n	8006576 <Setup0_Process+0x1be>
 80064fc:	8859      	ldrh	r1, [r3, #2]
 80064fe:	2900      	cmp	r1, #0
 8006500:	d161      	bne.n	80065c6 <Setup0_Process+0x20e>
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006508:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800650c:	d15b      	bne.n	80065c6 <Setup0_Process+0x20e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800650e:	781a      	ldrb	r2, [r3, #0]
 8006510:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 8006514:	d104      	bne.n	8006520 <Setup0_Process+0x168>
        && (pInformation->USBwIndex == 0))
 8006516:	889b      	ldrh	r3, [r3, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 80ab 	beq.w	8006674 <Setup0_Process+0x2bc>
 800651e:	e052      	b.n	80065c6 <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8006520:	2a01      	cmp	r2, #1
 8006522:	d10c      	bne.n	800653e <Setup0_Process+0x186>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8006524:	4a3e      	ldr	r2, [pc, #248]	; (8006620 <Setup0_Process+0x268>)
 8006526:	7918      	ldrb	r0, [r3, #4]
 8006528:	6812      	ldr	r2, [r2, #0]
 800652a:	6992      	ldr	r2, [r2, #24]
 800652c:	4790      	blx	r2
 800652e:	2800      	cmp	r0, #0
 8006530:	d149      	bne.n	80065c6 <Setup0_Process+0x20e>
          && (pInformation->Current_Configuration != 0))
 8006532:	682b      	ldr	r3, [r5, #0]
 8006534:	7a9b      	ldrb	r3, [r3, #10]
 8006536:	2b00      	cmp	r3, #0
 8006538:	f040 809c 	bne.w	8006674 <Setup0_Process+0x2bc>
 800653c:	e043      	b.n	80065c6 <Setup0_Process+0x20e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800653e:	2a02      	cmp	r2, #2
 8006540:	d141      	bne.n	80065c6 <Setup0_Process+0x20e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8006542:	791b      	ldrb	r3, [r3, #4]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8006544:	4839      	ldr	r0, [pc, #228]	; (800662c <Setup0_Process+0x274>)
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8006546:	f003 010f 	and.w	r1, r3, #15
 800654a:	008a      	lsls	r2, r1, #2

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800654c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006550:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8006554:	6812      	ldr	r2, [r2, #0]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8006556:	7800      	ldrb	r0, [r0, #0]
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8006558:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800655c:	bf14      	ite	ne
 800655e:	f002 0230 	andne.w	r2, r2, #48	; 0x30
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8006562:	f402 5240 	andeq.w	r2, r2, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8006566:	4281      	cmp	r1, r0
 8006568:	d22d      	bcs.n	80065c6 <Setup0_Process+0x20e>
 800656a:	f013 0f70 	tst.w	r3, #112	; 0x70
 800656e:	d12a      	bne.n	80065c6 <Setup0_Process+0x20e>
          && (Status != 0))
 8006570:	2a00      	cmp	r2, #0
 8006572:	d17f      	bne.n	8006674 <Setup0_Process+0x2bc>
 8006574:	e027      	b.n	80065c6 <Setup0_Process+0x20e>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8006576:	2c08      	cmp	r4, #8
 8006578:	d103      	bne.n	8006582 <Setup0_Process+0x1ca>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	065b      	lsls	r3, r3, #25
 800657e:	d07b      	beq.n	8006678 <Setup0_Process+0x2c0>
 8006580:	e021      	b.n	80065c6 <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8006582:	2c0a      	cmp	r4, #10
 8006584:	d11f      	bne.n	80065c6 <Setup0_Process+0x20e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8006586:	781a      	ldrb	r2, [r3, #0]
 8006588:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800658c:	2a01      	cmp	r2, #1
 800658e:	d11a      	bne.n	80065c6 <Setup0_Process+0x20e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8006590:	7a9a      	ldrb	r2, [r3, #10]
 8006592:	b1c2      	cbz	r2, 80065c6 <Setup0_Process+0x20e>
 8006594:	8859      	ldrh	r1, [r3, #2]
 8006596:	b9b1      	cbnz	r1, 80065c6 <Setup0_Process+0x20e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800659e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80065a2:	d110      	bne.n	80065c6 <Setup0_Process+0x20e>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 80065a4:	4a1e      	ldr	r2, [pc, #120]	; (8006620 <Setup0_Process+0x268>)
 80065a6:	7918      	ldrb	r0, [r3, #4]
 80065a8:	6812      	ldr	r2, [r2, #0]
 80065aa:	6992      	ldr	r2, [r2, #24]
 80065ac:	4790      	blx	r2
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d064      	beq.n	800667c <Setup0_Process+0x2c4>
 80065b2:	e008      	b.n	80065c6 <Setup0_Process+0x20e>
      CopyRoutine = Standard_GetInterface;
    }

  }

  if (CopyRoutine)
 80065b4:	b13b      	cbz	r3, 80065c6 <Setup0_Process+0x20e>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 80065b6:	682a      	ldr	r2, [r5, #0]
 80065b8:	2400      	movs	r4, #0
 80065ba:	8254      	strh	r4, [r2, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80065bc:	6193      	str	r3, [r2, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 80065be:	4620      	mov	r0, r4
 80065c0:	4798      	blx	r3
    Result = USB_SUCCESS;
 80065c2:	4620      	mov	r0, r4
 80065c4:	e00a      	b.n	80065dc <Setup0_Process+0x224>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 80065c6:	4b16      	ldr	r3, [pc, #88]	; (8006620 <Setup0_Process+0x268>)
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	682b      	ldr	r3, [r5, #0]
 80065cc:	6912      	ldr	r2, [r2, #16]
 80065ce:	7858      	ldrb	r0, [r3, #1]
 80065d0:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 80065d2:	2803      	cmp	r0, #3
 80065d4:	d102      	bne.n	80065dc <Setup0_Process+0x224>
    {
      pInformation->ControlState = PAUSE;
 80065d6:	4b11      	ldr	r3, [pc, #68]	; (800661c <Setup0_Process+0x264>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	e005      	b.n	80065e8 <Setup0_Process+0x230>
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 80065dc:	682b      	ldr	r3, [r5, #0]
 80065de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80065e2:	8a1a      	ldrh	r2, [r3, #16]
 80065e4:	428a      	cmp	r2, r1
 80065e6:	d101      	bne.n	80065ec <Setup0_Process+0x234>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 80065e8:	2209      	movs	r2, #9
 80065ea:	e003      	b.n	80065f4 <Setup0_Process+0x23c>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 80065ec:	2802      	cmp	r0, #2
 80065ee:	d000      	beq.n	80065f2 <Setup0_Process+0x23a>
 80065f0:	b912      	cbnz	r2, 80065f8 <Setup0_Process+0x240>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 80065f2:	2208      	movs	r2, #8
 80065f4:	721a      	strb	r2, [r3, #8]
 80065f6:	e039      	b.n	800666c <Setup0_Process+0x2b4>
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 80065f8:	f993 1000 	ldrsb.w	r1, [r3]
 80065fc:	2900      	cmp	r1, #0
 80065fe:	da2f      	bge.n	8006660 <Setup0_Process+0x2a8>
  {
    /* Device ==> Host */
    vu32 wLength = pInformation->USBwLength;
 8006600:	88d9      	ldrh	r1, [r3, #6]
 8006602:	9101      	str	r1, [sp, #4]

    /* Restrict the data length to be the one host asks */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8006604:	9801      	ldr	r0, [sp, #4]
 8006606:	4282      	cmp	r2, r0
 8006608:	4805      	ldr	r0, [pc, #20]	; (8006620 <Setup0_Process+0x268>)
 800660a:	d911      	bls.n	8006630 <Setup0_Process+0x278>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 800660c:	9a01      	ldr	r2, [sp, #4]
 800660e:	821a      	strh	r2, [r3, #16]
 8006610:	e01f      	b.n	8006652 <Setup0_Process+0x29a>
 8006612:	bf00      	nop
 8006614:	40005c50 	andmi	r5, r0, r0, asr ip
 8006618:	20003004 	andcs	r3, r0, r4
 800661c:	20000594 	mulcs	r0, r4, r5
 8006620:	2000056c 	andcs	r0, r0, ip, ror #10
 8006624:	20003002 	andcs	r3, r0, r2
 8006628:	20000564 	andcs	r0, r0, r4, ror #10
 800662c:	200000a4 	andcs	r0, r0, r4, lsr #1
    }

    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8006630:	428a      	cmp	r2, r1
 8006632:	d20e      	bcs.n	8006652 <Setup0_Process+0x29a>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8006634:	6801      	ldr	r1, [r0, #0]
 8006636:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 800663a:	428a      	cmp	r2, r1
 800663c:	d201      	bcs.n	8006642 <Setup0_Process+0x28a>
      {
        Data_Mul_MaxPacketSize = FALSE;
 800663e:	2100      	movs	r1, #0
 8006640:	e005      	b.n	800664e <Setup0_Process+0x296>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8006642:	fb92 f4f1 	sdiv	r4, r2, r1
 8006646:	fb01 2214 	mls	r2, r1, r4, r2
 800664a:	b912      	cbnz	r2, 8006652 <Setup0_Process+0x29a>
      {
        Data_Mul_MaxPacketSize = TRUE;
 800664c:	2101      	movs	r1, #1
 800664e:	4a0c      	ldr	r2, [pc, #48]	; (8006680 <Setup0_Process+0x2c8>)
 8006650:	7011      	strb	r1, [r2, #0]
      }
    }

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8006652:	6802      	ldr	r2, [r0, #0]
 8006654:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8006658:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 800665a:	f7ff fd2f 	bl	80060bc <DataStageIn>
 800665e:	e005      	b.n	800666c <Setup0_Process+0x2b4>
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8006660:	2203      	movs	r2, #3
 8006662:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8006664:	4b07      	ldr	r3, [pc, #28]	; (8006684 <Setup0_Process+0x2cc>)
 8006666:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800666a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 800666c:	f7ff fe84 	bl	8006378 <Post0_Process>
}
 8006670:	b002      	add	sp, #8
 8006672:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
        && (pInformation->USBwIndex == 0))
    {
      CopyRoutine = Standard_GetStatus;
 8006674:	4b04      	ldr	r3, [pc, #16]	; (8006688 <Setup0_Process+0x2d0>)
 8006676:	e79e      	b.n	80065b6 <Setup0_Process+0x1fe>
  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      CopyRoutine = Standard_GetConfiguration;
 8006678:	4b04      	ldr	r3, [pc, #16]	; (800668c <Setup0_Process+0x2d4>)
 800667a:	e79c      	b.n	80065b6 <Setup0_Process+0x1fe>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
    {
      CopyRoutine = Standard_GetInterface;
 800667c:	4b04      	ldr	r3, [pc, #16]	; (8006690 <Setup0_Process+0x2d8>)
 800667e:	e79a      	b.n	80065b6 <Setup0_Process+0x1fe>
 8006680:	20000dbd 			; <UNDEFINED> instruction: 0x20000dbd
 8006684:	20000562 	andcs	r0, r0, r2, ror #10
 8006688:	0800602d 	stmdaeq	r0, {r0, r2, r3, r5, sp, lr}
 800668c:	08005fe5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8006690:	08006009 	stmdaeq	r0, {r0, r3, sp, lr}

08006694 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Out0_Process(void)
{
 8006694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32 ControlState = pInformation->ControlState;
 8006696:	4d2b      	ldr	r5, [pc, #172]	; (8006744 <Out0_Process+0xb0>)
 8006698:	682c      	ldr	r4, [r5, #0]
 800669a:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 800669c:	2b03      	cmp	r3, #3
 800669e:	d001      	beq.n	80066a4 <Out0_Process+0x10>
 80066a0:	2b05      	cmp	r3, #5
 80066a2:	d141      	bne.n	8006728 <Out0_Process+0x94>
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 80066a4:	69a3      	ldr	r3, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 80066a6:	8a22      	ldrh	r2, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 80066a8:	b1ab      	cbz	r3, 80066d6 <Out0_Process+0x42>
 80066aa:	b1a2      	cbz	r2, 80066d6 <Out0_Process+0x42>
  {
    u8 *Buffer;
    u32 Length;

    Length = pEPinfo->PacketSize;
 80066ac:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80066ae:	4296      	cmp	r6, r2
 80066b0:	bf28      	it	cs
 80066b2:	4616      	movcs	r6, r2
 80066b4:	4630      	mov	r0, r6
 80066b6:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 80066b8:	8a23      	ldrh	r3, [r4, #16]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80066ba:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 80066bc:	1b9b      	subs	r3, r3, r6
 80066be:	8223      	strh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80066c0:	8a63      	ldrh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80066c2:	2000      	movs	r0, #0
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 80066c4:	4433      	add	r3, r6
 80066c6:	8263      	strh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80066c8:	f7ff fb8a 	bl	8005de0 <GetEPRxAddr>
 80066cc:	4632      	mov	r2, r6
 80066ce:	4601      	mov	r1, r0
 80066d0:	4638      	mov	r0, r7
 80066d2:	f000 f8a5 	bl	8006820 <PMAToUserBufferCopy>
  }

  if (pEPinfo->Usb_rLength != 0)
 80066d6:	8a23      	ldrh	r3, [r4, #16]
 80066d8:	b153      	cbz	r3, 80066f0 <Out0_Process+0x5c>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80066da:	4b1b      	ldr	r3, [pc, #108]	; (8006748 <Out0_Process+0xb4>)
    SetEPTxCount(ENDP0, 0);
 80066dc:	2000      	movs	r0, #0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80066de:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 80066e2:	4601      	mov	r1, r0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80066e4:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 80066e6:	f7ff fb89 	bl	8005dfc <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 80066ea:	4b18      	ldr	r3, [pc, #96]	; (800674c <Out0_Process+0xb8>)
 80066ec:	2230      	movs	r2, #48	; 0x30
 80066ee:	801a      	strh	r2, [r3, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80066f0:	8a23      	ldrh	r3, [r4, #16]
 80066f2:	8aa2      	ldrh	r2, [r4, #20]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d802      	bhi.n	80066fe <Out0_Process+0x6a>
  {
    pInformation->ControlState = OUT_DATA;
 80066f8:	682b      	ldr	r3, [r5, #0]
 80066fa:	2203      	movs	r2, #3
 80066fc:	e002      	b.n	8006704 <Out0_Process+0x70>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 80066fe:	b11b      	cbz	r3, 8006708 <Out0_Process+0x74>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	2205      	movs	r2, #5
 8006704:	721a      	strb	r2, [r3, #8]
 8006706:	e00c      	b.n	8006722 <Out0_Process+0x8e>
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8006708:	682a      	ldr	r2, [r5, #0]
 800670a:	2106      	movs	r1, #6
 800670c:	7211      	strb	r1, [r2, #8]
      USB_StatusIn();
 800670e:	4a10      	ldr	r2, [pc, #64]	; (8006750 <Out0_Process+0xbc>)
 8006710:	6811      	ldr	r1, [r2, #0]
 8006712:	4a10      	ldr	r2, [pc, #64]	; (8006754 <Out0_Process+0xc0>)
 8006714:	b289      	uxth	r1, r1
 8006716:	440a      	add	r2, r1
 8006718:	0052      	lsls	r2, r2, #1
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	4b0b      	ldr	r3, [pc, #44]	; (800674c <Out0_Process+0xb8>)
 800671e:	2230      	movs	r2, #48	; 0x30
 8006720:	801a      	strh	r2, [r3, #0]
  u32 ControlState = pInformation->ControlState;

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 8006722:	682b      	ldr	r3, [r5, #0]
 8006724:	7a1b      	ldrb	r3, [r3, #8]
 8006726:	e006      	b.n	8006736 <Out0_Process+0xa2>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8006728:	2b07      	cmp	r3, #7
 800672a:	d103      	bne.n	8006734 <Out0_Process+0xa0>
  {
    (*pProperty->Process_Status_OUT)();
 800672c:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <Out0_Process+0xc4>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	4798      	blx	r3
  }

  else if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 8006734:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8006736:	682a      	ldr	r2, [r5, #0]
 8006738:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 800673a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 800673e:	f7ff be1b 	b.w	8006378 <Post0_Process>
 8006742:	bf00      	nop
 8006744:	20000594 	mulcs	r0, r4, r5
 8006748:	20000562 	andcs	r0, r0, r2, ror #10
 800674c:	20000564 	andcs	r0, r0, r4, ror #10
 8006750:	40005c50 	andmi	r5, r0, r0, asr ip
 8006754:	20003002 	andcs	r3, r0, r2
 8006758:	2000056c 	andcs	r0, r0, ip, ror #10

0800675c <SetDeviceAddress>:
* Input          : - Val: device adress.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(u8 Val)
{
 800675c:	b530      	push	{r4, r5, lr}
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;
 800675e:	4b0b      	ldr	r3, [pc, #44]	; (800678c <SetDeviceAddress+0x30>)
 8006760:	781c      	ldrb	r4, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8006762:	2300      	movs	r3, #0
 8006764:	42a3      	cmp	r3, r4
 8006766:	d20c      	bcs.n	8006782 <SetDeviceAddress+0x26>
 8006768:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 800676c:	f502 52b8 	add.w	r2, r2, #5888	; 0x1700
 8006770:	0091      	lsls	r1, r2, #2
  {
    _SetEPAddress((u8)i, (u8)i);
 8006772:	680d      	ldr	r5, [r1, #0]
 8006774:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8006778:	402a      	ands	r2, r5
 800677a:	431a      	orrs	r2, r3
 800677c:	600a      	str	r2, [r1, #0]
{
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800677e:	3301      	adds	r3, #1
 8006780:	e7f0      	b.n	8006764 <SetDeviceAddress+0x8>
  {
    _SetEPAddress((u8)i, (u8)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 8006782:	4b03      	ldr	r3, [pc, #12]	; (8006790 <SetDeviceAddress+0x34>)
 8006784:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8006788:	6018      	str	r0, [r3, #0]
 800678a:	bd30      	pop	{r4, r5, pc}
 800678c:	200000a4 	andcs	r0, r0, r4, lsr #1
 8006790:	40005c4c 	andmi	r5, r0, ip, asr #24

08006794 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 In0_Process(void)
{
 8006794:	b510      	push	{r4, lr}
  u32 ControlState = pInformation->ControlState;
 8006796:	4c13      	ldr	r4, [pc, #76]	; (80067e4 <In0_Process+0x50>)
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800679c:	2a02      	cmp	r2, #2
 800679e:	d001      	beq.n	80067a4 <In0_Process+0x10>
 80067a0:	2a04      	cmp	r2, #4
 80067a2:	d104      	bne.n	80067ae <In0_Process+0x1a>
  {
    DataStageIn();
 80067a4:	f7ff fc8a 	bl	80060bc <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 80067a8:	6823      	ldr	r3, [r4, #0]
 80067aa:	7a1b      	ldrb	r3, [r3, #8]
 80067ac:	e013      	b.n	80067d6 <In0_Process+0x42>
  }

  else if (ControlState == WAIT_STATUS_IN)
 80067ae:	2a06      	cmp	r2, #6
 80067b0:	d110      	bne.n	80067d4 <In0_Process+0x40>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80067b2:	785a      	ldrb	r2, [r3, #1]
 80067b4:	2a05      	cmp	r2, #5
 80067b6:	d109      	bne.n	80067cc <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 80067b8:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80067ba:	0652      	lsls	r2, r2, #25
 80067bc:	d106      	bne.n	80067cc <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 80067be:	7898      	ldrb	r0, [r3, #2]
 80067c0:	f7ff ffcc 	bl	800675c <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 80067c4:	4b08      	ldr	r3, [pc, #32]	; (80067e8 <In0_Process+0x54>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
 80067cc:	4b07      	ldr	r3, [pc, #28]	; (80067ec <In0_Process+0x58>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	4798      	blx	r3
    ControlState = STALLED;
  }

  else
  {
    ControlState = STALLED;
 80067d4:	2308      	movs	r3, #8
  }

  pInformation->ControlState = ControlState;
 80067d6:	6822      	ldr	r2, [r4, #0]
 80067d8:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 80067da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 80067de:	f7ff bdcb 	b.w	8006378 <Post0_Process>
 80067e2:	bf00      	nop
 80067e4:	20000594 	mulcs	r0, r4, r5
 80067e8:	20000590 	mulcs	r0, r0, r5
 80067ec:	2000056c 	andcs	r0, r0, ip, ror #10

080067f0 <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 80067f0:	b530      	push	{r4, r5, lr}
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 80067f2:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80067f6:	3201      	adds	r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 80067f8:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80067fc:	1052      	asrs	r2, r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 80067fe:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8006800:	2300      	movs	r3, #0
 8006802:	4293      	cmp	r3, r2
 8006804:	f100 0002 	add.w	r0, r0, #2
 8006808:	d009      	beq.n	800681e <UserToPMABufferCopy+0x2e>
  {
    temp1 = (u16) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 800680a:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (u16) * pbUsrBuf;
 800680e:	f810 4c02 	ldrb.w	r4, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 8006812:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    *pdwVal++ = temp2;
 8006816:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 800681a:	3301      	adds	r3, #1
 800681c:	e7f1      	b.n	8006802 <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 800681e:	bd30      	pop	{r4, r5, pc}

08006820 <PMAToUserBufferCopy>:
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 8006820:	b510      	push	{r4, lr}
  u32 n = (wNBytes + 1) >> 1;/* /2*/
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 8006822:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 8006826:	3201      	adds	r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 8006828:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 800682c:	1052      	asrs	r2, r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 800682e:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8006830:	2300      	movs	r3, #0
 8006832:	4293      	cmp	r3, r2
 8006834:	d005      	beq.n	8006842 <PMAToUserBufferCopy+0x22>
  {
    *(u16*)pbUsrBuf++ = *pdwVal++;
 8006836:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800683a:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 800683e:	3301      	adds	r3, #1
 8006840:	e7f7      	b.n	8006832 <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 8006842:	bd10      	pop	{r4, pc}

08006844 <memcpy>:
 8006844:	b510      	push	{r4, lr}
 8006846:	2300      	movs	r3, #0
 8006848:	4293      	cmp	r3, r2
 800684a:	d003      	beq.n	8006854 <memcpy+0x10>
 800684c:	5ccc      	ldrb	r4, [r1, r3]
 800684e:	54c4      	strb	r4, [r0, r3]
 8006850:	3301      	adds	r3, #1
 8006852:	e7f9      	b.n	8006848 <memcpy+0x4>
 8006854:	bd10      	pop	{r4, pc}

08006856 <memset>:
 8006856:	4402      	add	r2, r0
 8006858:	4603      	mov	r3, r0
 800685a:	4293      	cmp	r3, r2
 800685c:	d002      	beq.n	8006864 <memset+0xe>
 800685e:	f803 1b01 	strb.w	r1, [r3], #1
 8006862:	e7fa      	b.n	800685a <memset+0x4>
 8006864:	4770      	bx	lr
	...

08006868 <siprintf>:
 8006868:	b40e      	push	{r1, r2, r3}
 800686a:	b500      	push	{lr}
 800686c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006870:	b09c      	sub	sp, #112	; 0x70
 8006872:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006876:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800687a:	9104      	str	r1, [sp, #16]
 800687c:	9107      	str	r1, [sp, #28]
 800687e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006882:	ab1d      	add	r3, sp, #116	; 0x74
 8006884:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006888:	4908      	ldr	r1, [pc, #32]	; (80068ac <siprintf+0x44>)
 800688a:	f853 2b04 	ldr.w	r2, [r3], #4
 800688e:	9002      	str	r0, [sp, #8]
 8006890:	9006      	str	r0, [sp, #24]
 8006892:	6808      	ldr	r0, [r1, #0]
 8006894:	a902      	add	r1, sp, #8
 8006896:	9301      	str	r3, [sp, #4]
 8006898:	f000 f866 	bl	8006968 <_svfiprintf_r>
 800689c:	9b02      	ldr	r3, [sp, #8]
 800689e:	2200      	movs	r2, #0
 80068a0:	701a      	strb	r2, [r3, #0]
 80068a2:	b01c      	add	sp, #112	; 0x70
 80068a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80068a8:	b003      	add	sp, #12
 80068aa:	4770      	bx	lr
 80068ac:	2000046c 	andcs	r0, r0, ip, ror #8

080068b0 <__ssputs_r>:
 80068b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b4:	688d      	ldr	r5, [r1, #8]
 80068b6:	4681      	mov	r9, r0
 80068b8:	42ab      	cmp	r3, r5
 80068ba:	460c      	mov	r4, r1
 80068bc:	4692      	mov	sl, r2
 80068be:	461f      	mov	r7, r3
 80068c0:	d343      	bcc.n	800694a <__ssputs_r+0x9a>
 80068c2:	898b      	ldrh	r3, [r1, #12]
 80068c4:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80068c8:	d03d      	beq.n	8006946 <__ssputs_r+0x96>
 80068ca:	6826      	ldr	r6, [r4, #0]
 80068cc:	6909      	ldr	r1, [r1, #16]
 80068ce:	2202      	movs	r2, #2
 80068d0:	ebc1 0806 	rsb	r8, r1, r6
 80068d4:	6966      	ldr	r6, [r4, #20]
 80068d6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80068da:	fb96 f6f2 	sdiv	r6, r6, r2
 80068de:	f108 0201 	add.w	r2, r8, #1
 80068e2:	443a      	add	r2, r7
 80068e4:	4296      	cmp	r6, r2
 80068e6:	bf38      	it	cc
 80068e8:	4616      	movcc	r6, r2
 80068ea:	055b      	lsls	r3, r3, #21
 80068ec:	d50f      	bpl.n	800690e <__ssputs_r+0x5e>
 80068ee:	4631      	mov	r1, r6
 80068f0:	f000 fb40 	bl	8006f74 <_malloc_r>
 80068f4:	4605      	mov	r5, r0
 80068f6:	b198      	cbz	r0, 8006920 <__ssputs_r+0x70>
 80068f8:	6921      	ldr	r1, [r4, #16]
 80068fa:	4642      	mov	r2, r8
 80068fc:	f7ff ffa2 	bl	8006844 <memcpy>
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800690a:	81a3      	strh	r3, [r4, #12]
 800690c:	e013      	b.n	8006936 <__ssputs_r+0x86>
 800690e:	4632      	mov	r2, r6
 8006910:	f000 fb84 	bl	800701c <_realloc_r>
 8006914:	4605      	mov	r5, r0
 8006916:	b970      	cbnz	r0, 8006936 <__ssputs_r+0x86>
 8006918:	4648      	mov	r0, r9
 800691a:	6921      	ldr	r1, [r4, #16]
 800691c:	f000 fae6 	bl	8006eec <_free_r>
 8006920:	230c      	movs	r3, #12
 8006922:	f8c9 3000 	str.w	r3, [r9]
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	f04f 30ff 	mov.w	r0, #4294967295
 800692c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006930:	81a3      	strh	r3, [r4, #12]
 8006932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006936:	6125      	str	r5, [r4, #16]
 8006938:	6166      	str	r6, [r4, #20]
 800693a:	4445      	add	r5, r8
 800693c:	ebc8 0606 	rsb	r6, r8, r6
 8006940:	6025      	str	r5, [r4, #0]
 8006942:	60a6      	str	r6, [r4, #8]
 8006944:	463d      	mov	r5, r7
 8006946:	42af      	cmp	r7, r5
 8006948:	d200      	bcs.n	800694c <__ssputs_r+0x9c>
 800694a:	463d      	mov	r5, r7
 800694c:	462a      	mov	r2, r5
 800694e:	6820      	ldr	r0, [r4, #0]
 8006950:	4651      	mov	r1, sl
 8006952:	f000 faaf 	bl	8006eb4 <memmove>
 8006956:	68a3      	ldr	r3, [r4, #8]
 8006958:	2000      	movs	r0, #0
 800695a:	1b5b      	subs	r3, r3, r5
 800695c:	60a3      	str	r3, [r4, #8]
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	441d      	add	r5, r3
 8006962:	6025      	str	r5, [r4, #0]
 8006964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006968 <_svfiprintf_r>:
 8006968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800696c:	b09d      	sub	sp, #116	; 0x74
 800696e:	9303      	str	r3, [sp, #12]
 8006970:	898b      	ldrh	r3, [r1, #12]
 8006972:	4607      	mov	r7, r0
 8006974:	061c      	lsls	r4, r3, #24
 8006976:	460d      	mov	r5, r1
 8006978:	4616      	mov	r6, r2
 800697a:	d50c      	bpl.n	8006996 <_svfiprintf_r+0x2e>
 800697c:	690b      	ldr	r3, [r1, #16]
 800697e:	b953      	cbnz	r3, 8006996 <_svfiprintf_r+0x2e>
 8006980:	2140      	movs	r1, #64	; 0x40
 8006982:	f000 faf7 	bl	8006f74 <_malloc_r>
 8006986:	6028      	str	r0, [r5, #0]
 8006988:	6128      	str	r0, [r5, #16]
 800698a:	b910      	cbnz	r0, 8006992 <_svfiprintf_r+0x2a>
 800698c:	230c      	movs	r3, #12
 800698e:	603b      	str	r3, [r7, #0]
 8006990:	e0c7      	b.n	8006b22 <_svfiprintf_r+0x1ba>
 8006992:	2340      	movs	r3, #64	; 0x40
 8006994:	616b      	str	r3, [r5, #20]
 8006996:	2300      	movs	r3, #0
 8006998:	9309      	str	r3, [sp, #36]	; 0x24
 800699a:	2320      	movs	r3, #32
 800699c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069a0:	2330      	movs	r3, #48	; 0x30
 80069a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069a6:	4633      	mov	r3, r6
 80069a8:	461c      	mov	r4, r3
 80069aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069ae:	b91a      	cbnz	r2, 80069b8 <_svfiprintf_r+0x50>
 80069b0:	ebb4 0906 	subs.w	r9, r4, r6
 80069b4:	d00f      	beq.n	80069d6 <_svfiprintf_r+0x6e>
 80069b6:	e002      	b.n	80069be <_svfiprintf_r+0x56>
 80069b8:	2a25      	cmp	r2, #37	; 0x25
 80069ba:	d1f5      	bne.n	80069a8 <_svfiprintf_r+0x40>
 80069bc:	e7f8      	b.n	80069b0 <_svfiprintf_r+0x48>
 80069be:	4638      	mov	r0, r7
 80069c0:	4629      	mov	r1, r5
 80069c2:	4632      	mov	r2, r6
 80069c4:	464b      	mov	r3, r9
 80069c6:	f7ff ff73 	bl	80068b0 <__ssputs_r>
 80069ca:	3001      	adds	r0, #1
 80069cc:	f000 80a4 	beq.w	8006b18 <_svfiprintf_r+0x1b0>
 80069d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d2:	444b      	add	r3, r9
 80069d4:	9309      	str	r3, [sp, #36]	; 0x24
 80069d6:	7823      	ldrb	r3, [r4, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 809d 	beq.w	8006b18 <_svfiprintf_r+0x1b0>
 80069de:	2300      	movs	r3, #0
 80069e0:	f04f 32ff 	mov.w	r2, #4294967295
 80069e4:	9304      	str	r3, [sp, #16]
 80069e6:	9307      	str	r3, [sp, #28]
 80069e8:	9205      	str	r2, [sp, #20]
 80069ea:	9306      	str	r3, [sp, #24]
 80069ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069f0:	931a      	str	r3, [sp, #104]	; 0x68
 80069f2:	f104 0901 	add.w	r9, r4, #1
 80069f6:	4e4d      	ldr	r6, [pc, #308]	; (8006b2c <_svfiprintf_r+0x1c4>)
 80069f8:	464c      	mov	r4, r9
 80069fa:	4630      	mov	r0, r6
 80069fc:	7821      	ldrb	r1, [r4, #0]
 80069fe:	2205      	movs	r2, #5
 8006a00:	f000 fa4a 	bl	8006e98 <memchr>
 8006a04:	f109 0901 	add.w	r9, r9, #1
 8006a08:	9b04      	ldr	r3, [sp, #16]
 8006a0a:	b128      	cbz	r0, 8006a18 <_svfiprintf_r+0xb0>
 8006a0c:	1b86      	subs	r6, r0, r6
 8006a0e:	2001      	movs	r0, #1
 8006a10:	40b0      	lsls	r0, r6
 8006a12:	4303      	orrs	r3, r0
 8006a14:	9304      	str	r3, [sp, #16]
 8006a16:	e7ee      	b.n	80069f6 <_svfiprintf_r+0x8e>
 8006a18:	06d9      	lsls	r1, r3, #27
 8006a1a:	bf44      	itt	mi
 8006a1c:	2220      	movmi	r2, #32
 8006a1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a22:	071a      	lsls	r2, r3, #28
 8006a24:	bf44      	itt	mi
 8006a26:	222b      	movmi	r2, #43	; 0x2b
 8006a28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a2c:	7822      	ldrb	r2, [r4, #0]
 8006a2e:	2a2a      	cmp	r2, #42	; 0x2a
 8006a30:	d002      	beq.n	8006a38 <_svfiprintf_r+0xd0>
 8006a32:	9b07      	ldr	r3, [sp, #28]
 8006a34:	4621      	mov	r1, r4
 8006a36:	e00e      	b.n	8006a56 <_svfiprintf_r+0xee>
 8006a38:	9a03      	ldr	r2, [sp, #12]
 8006a3a:	1d11      	adds	r1, r2, #4
 8006a3c:	6812      	ldr	r2, [r2, #0]
 8006a3e:	9103      	str	r1, [sp, #12]
 8006a40:	2a00      	cmp	r2, #0
 8006a42:	db01      	blt.n	8006a48 <_svfiprintf_r+0xe0>
 8006a44:	9207      	str	r2, [sp, #28]
 8006a46:	e004      	b.n	8006a52 <_svfiprintf_r+0xea>
 8006a48:	4252      	negs	r2, r2
 8006a4a:	f043 0302 	orr.w	r3, r3, #2
 8006a4e:	9207      	str	r2, [sp, #28]
 8006a50:	9304      	str	r3, [sp, #16]
 8006a52:	3401      	adds	r4, #1
 8006a54:	e00a      	b.n	8006a6c <_svfiprintf_r+0x104>
 8006a56:	460c      	mov	r4, r1
 8006a58:	7822      	ldrb	r2, [r4, #0]
 8006a5a:	3101      	adds	r1, #1
 8006a5c:	3a30      	subs	r2, #48	; 0x30
 8006a5e:	2a09      	cmp	r2, #9
 8006a60:	d803      	bhi.n	8006a6a <_svfiprintf_r+0x102>
 8006a62:	200a      	movs	r0, #10
 8006a64:	fb00 2303 	mla	r3, r0, r3, r2
 8006a68:	e7f5      	b.n	8006a56 <_svfiprintf_r+0xee>
 8006a6a:	9307      	str	r3, [sp, #28]
 8006a6c:	7823      	ldrb	r3, [r4, #0]
 8006a6e:	2b2e      	cmp	r3, #46	; 0x2e
 8006a70:	d119      	bne.n	8006aa6 <_svfiprintf_r+0x13e>
 8006a72:	7863      	ldrb	r3, [r4, #1]
 8006a74:	2b2a      	cmp	r3, #42	; 0x2a
 8006a76:	d109      	bne.n	8006a8c <_svfiprintf_r+0x124>
 8006a78:	9b03      	ldr	r3, [sp, #12]
 8006a7a:	3402      	adds	r4, #2
 8006a7c:	1d1a      	adds	r2, r3, #4
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	9203      	str	r2, [sp, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	bfb8      	it	lt
 8006a86:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a8a:	e00b      	b.n	8006aa4 <_svfiprintf_r+0x13c>
 8006a8c:	1c61      	adds	r1, r4, #1
 8006a8e:	2300      	movs	r3, #0
 8006a90:	460c      	mov	r4, r1
 8006a92:	7822      	ldrb	r2, [r4, #0]
 8006a94:	3101      	adds	r1, #1
 8006a96:	3a30      	subs	r2, #48	; 0x30
 8006a98:	2a09      	cmp	r2, #9
 8006a9a:	d803      	bhi.n	8006aa4 <_svfiprintf_r+0x13c>
 8006a9c:	200a      	movs	r0, #10
 8006a9e:	fb00 2303 	mla	r3, r0, r3, r2
 8006aa2:	e7f5      	b.n	8006a90 <_svfiprintf_r+0x128>
 8006aa4:	9305      	str	r3, [sp, #20]
 8006aa6:	4e22      	ldr	r6, [pc, #136]	; (8006b30 <_svfiprintf_r+0x1c8>)
 8006aa8:	7821      	ldrb	r1, [r4, #0]
 8006aaa:	4630      	mov	r0, r6
 8006aac:	2203      	movs	r2, #3
 8006aae:	f000 f9f3 	bl	8006e98 <memchr>
 8006ab2:	b130      	cbz	r0, 8006ac2 <_svfiprintf_r+0x15a>
 8006ab4:	1b86      	subs	r6, r0, r6
 8006ab6:	2040      	movs	r0, #64	; 0x40
 8006ab8:	40b0      	lsls	r0, r6
 8006aba:	9b04      	ldr	r3, [sp, #16]
 8006abc:	3401      	adds	r4, #1
 8006abe:	4303      	orrs	r3, r0
 8006ac0:	9304      	str	r3, [sp, #16]
 8006ac2:	7821      	ldrb	r1, [r4, #0]
 8006ac4:	481b      	ldr	r0, [pc, #108]	; (8006b34 <_svfiprintf_r+0x1cc>)
 8006ac6:	2206      	movs	r2, #6
 8006ac8:	1c66      	adds	r6, r4, #1
 8006aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ace:	f000 f9e3 	bl	8006e98 <memchr>
 8006ad2:	b188      	cbz	r0, 8006af8 <_svfiprintf_r+0x190>
 8006ad4:	4b18      	ldr	r3, [pc, #96]	; (8006b38 <_svfiprintf_r+0x1d0>)
 8006ad6:	b933      	cbnz	r3, 8006ae6 <_svfiprintf_r+0x17e>
 8006ad8:	9b03      	ldr	r3, [sp, #12]
 8006ada:	3307      	adds	r3, #7
 8006adc:	f023 0307 	bic.w	r3, r3, #7
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	9303      	str	r3, [sp, #12]
 8006ae4:	e014      	b.n	8006b10 <_svfiprintf_r+0x1a8>
 8006ae6:	ab03      	add	r3, sp, #12
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	4638      	mov	r0, r7
 8006aec:	a904      	add	r1, sp, #16
 8006aee:	462a      	mov	r2, r5
 8006af0:	4b12      	ldr	r3, [pc, #72]	; (8006b3c <_svfiprintf_r+0x1d4>)
 8006af2:	f3af 8000 	nop.w
 8006af6:	e007      	b.n	8006b08 <_svfiprintf_r+0x1a0>
 8006af8:	ab03      	add	r3, sp, #12
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	4638      	mov	r0, r7
 8006afe:	a904      	add	r1, sp, #16
 8006b00:	462a      	mov	r2, r5
 8006b02:	4b0e      	ldr	r3, [pc, #56]	; (8006b3c <_svfiprintf_r+0x1d4>)
 8006b04:	f000 f88e 	bl	8006c24 <_printf_i>
 8006b08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006b0c:	4680      	mov	r8, r0
 8006b0e:	d003      	beq.n	8006b18 <_svfiprintf_r+0x1b0>
 8006b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b12:	4443      	add	r3, r8
 8006b14:	9309      	str	r3, [sp, #36]	; 0x24
 8006b16:	e746      	b.n	80069a6 <_svfiprintf_r+0x3e>
 8006b18:	89ab      	ldrh	r3, [r5, #12]
 8006b1a:	065b      	lsls	r3, r3, #25
 8006b1c:	d401      	bmi.n	8006b22 <_svfiprintf_r+0x1ba>
 8006b1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b20:	e001      	b.n	8006b26 <_svfiprintf_r+0x1be>
 8006b22:	f04f 30ff 	mov.w	r0, #4294967295
 8006b26:	b01d      	add	sp, #116	; 0x74
 8006b28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b2c:	080076a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, sp, lr}
 8006b30:	080076a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sl, ip, sp, lr}
 8006b34:	080076aa 	stmdaeq	r0, {r1, r3, r5, r7, r9, sl, ip, sp, lr}
 8006b38:	00000000 	andeq	r0, r0, r0
 8006b3c:	080068b1 	stmdaeq	r0, {r0, r4, r5, r7, fp, sp, lr}

08006b40 <_printf_common>:
 8006b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b44:	4615      	mov	r5, r2
 8006b46:	461f      	mov	r7, r3
 8006b48:	688a      	ldr	r2, [r1, #8]
 8006b4a:	690b      	ldr	r3, [r1, #16]
 8006b4c:	4606      	mov	r6, r0
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	bfa8      	it	ge
 8006b52:	4613      	movge	r3, r2
 8006b54:	602b      	str	r3, [r5, #0]
 8006b56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b60:	b10a      	cbz	r2, 8006b66 <_printf_common+0x26>
 8006b62:	3301      	adds	r3, #1
 8006b64:	602b      	str	r3, [r5, #0]
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	0699      	lsls	r1, r3, #26
 8006b6a:	d502      	bpl.n	8006b72 <_printf_common+0x32>
 8006b6c:	682b      	ldr	r3, [r5, #0]
 8006b6e:	3302      	adds	r3, #2
 8006b70:	602b      	str	r3, [r5, #0]
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	f013 0906 	ands.w	r9, r3, #6
 8006b78:	d01d      	beq.n	8006bb6 <_printf_common+0x76>
 8006b7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b7e:	6822      	ldr	r2, [r4, #0]
 8006b80:	3300      	adds	r3, #0
 8006b82:	bf18      	it	ne
 8006b84:	2301      	movne	r3, #1
 8006b86:	0692      	lsls	r2, r2, #26
 8006b88:	d51f      	bpl.n	8006bca <_printf_common+0x8a>
 8006b8a:	18e1      	adds	r1, r4, r3
 8006b8c:	2030      	movs	r0, #48	; 0x30
 8006b8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b98:	4422      	add	r2, r4
 8006b9a:	3302      	adds	r3, #2
 8006b9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ba0:	e013      	b.n	8006bca <_printf_common+0x8a>
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	4639      	mov	r1, r7
 8006ba6:	f104 0219 	add.w	r2, r4, #25
 8006baa:	2301      	movs	r3, #1
 8006bac:	47c0      	blx	r8
 8006bae:	3001      	adds	r0, #1
 8006bb0:	d007      	beq.n	8006bc2 <_printf_common+0x82>
 8006bb2:	f109 0901 	add.w	r9, r9, #1
 8006bb6:	68e2      	ldr	r2, [r4, #12]
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	4599      	cmp	r9, r3
 8006bbe:	dbf0      	blt.n	8006ba2 <_printf_common+0x62>
 8006bc0:	e7db      	b.n	8006b7a <_printf_common+0x3a>
 8006bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bca:	4630      	mov	r0, r6
 8006bcc:	4639      	mov	r1, r7
 8006bce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bd2:	47c0      	blx	r8
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d0f4      	beq.n	8006bc2 <_printf_common+0x82>
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	682a      	ldr	r2, [r5, #0]
 8006bdc:	f003 0306 	and.w	r3, r3, #6
 8006be0:	68e1      	ldr	r1, [r4, #12]
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	bf08      	it	eq
 8006be6:	ebc2 0501 	rsbeq	r5, r2, r1
 8006bea:	6923      	ldr	r3, [r4, #16]
 8006bec:	68a2      	ldr	r2, [r4, #8]
 8006bee:	bf0c      	ite	eq
 8006bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bf4:	2500      	movne	r5, #0
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	bfc4      	itt	gt
 8006bfa:	ebc3 0302 	rsbgt	r3, r3, r2
 8006bfe:	18ed      	addgt	r5, r5, r3
 8006c00:	f04f 0900 	mov.w	r9, #0
 8006c04:	45a9      	cmp	r9, r5
 8006c06:	da0a      	bge.n	8006c1e <_printf_common+0xde>
 8006c08:	4630      	mov	r0, r6
 8006c0a:	4639      	mov	r1, r7
 8006c0c:	f104 021a 	add.w	r2, r4, #26
 8006c10:	2301      	movs	r3, #1
 8006c12:	47c0      	blx	r8
 8006c14:	3001      	adds	r0, #1
 8006c16:	d0d4      	beq.n	8006bc2 <_printf_common+0x82>
 8006c18:	f109 0901 	add.w	r9, r9, #1
 8006c1c:	e7f2      	b.n	8006c04 <_printf_common+0xc4>
 8006c1e:	2000      	movs	r0, #0
 8006c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006c24 <_printf_i>:
 8006c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c28:	7e0e      	ldrb	r6, [r1, #24]
 8006c2a:	4680      	mov	r8, r0
 8006c2c:	2e6e      	cmp	r6, #110	; 0x6e
 8006c2e:	460c      	mov	r4, r1
 8006c30:	4691      	mov	r9, r2
 8006c32:	469a      	mov	sl, r3
 8006c34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c36:	f101 0043 	add.w	r0, r1, #67	; 0x43
 8006c3a:	f000 80a5 	beq.w	8006d88 <_printf_i+0x164>
 8006c3e:	d811      	bhi.n	8006c64 <_printf_i+0x40>
 8006c40:	2e63      	cmp	r6, #99	; 0x63
 8006c42:	d022      	beq.n	8006c8a <_printf_i+0x66>
 8006c44:	d809      	bhi.n	8006c5a <_printf_i+0x36>
 8006c46:	2e00      	cmp	r6, #0
 8006c48:	f000 80af 	beq.w	8006daa <_printf_i+0x186>
 8006c4c:	2e58      	cmp	r6, #88	; 0x58
 8006c4e:	f040 80bf 	bne.w	8006dd0 <_printf_i+0x1ac>
 8006c52:	f881 6045 	strb.w	r6, [r1, #69]	; 0x45
 8006c56:	4a7b      	ldr	r2, [pc, #492]	; (8006e44 <_printf_i+0x220>)
 8006c58:	e04f      	b.n	8006cfa <_printf_i+0xd6>
 8006c5a:	2e64      	cmp	r6, #100	; 0x64
 8006c5c:	d01e      	beq.n	8006c9c <_printf_i+0x78>
 8006c5e:	2e69      	cmp	r6, #105	; 0x69
 8006c60:	d01c      	beq.n	8006c9c <_printf_i+0x78>
 8006c62:	e0b5      	b.n	8006dd0 <_printf_i+0x1ac>
 8006c64:	2e73      	cmp	r6, #115	; 0x73
 8006c66:	f000 80a4 	beq.w	8006db2 <_printf_i+0x18e>
 8006c6a:	d809      	bhi.n	8006c80 <_printf_i+0x5c>
 8006c6c:	2e6f      	cmp	r6, #111	; 0x6f
 8006c6e:	d02b      	beq.n	8006cc8 <_printf_i+0xa4>
 8006c70:	2e70      	cmp	r6, #112	; 0x70
 8006c72:	f040 80ad 	bne.w	8006dd0 <_printf_i+0x1ac>
 8006c76:	680b      	ldr	r3, [r1, #0]
 8006c78:	f043 0320 	orr.w	r3, r3, #32
 8006c7c:	600b      	str	r3, [r1, #0]
 8006c7e:	e038      	b.n	8006cf2 <_printf_i+0xce>
 8006c80:	2e75      	cmp	r6, #117	; 0x75
 8006c82:	d021      	beq.n	8006cc8 <_printf_i+0xa4>
 8006c84:	2e78      	cmp	r6, #120	; 0x78
 8006c86:	d034      	beq.n	8006cf2 <_printf_i+0xce>
 8006c88:	e0a2      	b.n	8006dd0 <_printf_i+0x1ac>
 8006c8a:	682b      	ldr	r3, [r5, #0]
 8006c8c:	f101 0742 	add.w	r7, r1, #66	; 0x42
 8006c90:	1d1a      	adds	r2, r3, #4
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	602a      	str	r2, [r5, #0]
 8006c96:	f881 3042 	strb.w	r3, [r1, #66]	; 0x42
 8006c9a:	e09d      	b.n	8006dd8 <_printf_i+0x1b4>
 8006c9c:	6822      	ldr	r2, [r4, #0]
 8006c9e:	682b      	ldr	r3, [r5, #0]
 8006ca0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006ca4:	d003      	beq.n	8006cae <_printf_i+0x8a>
 8006ca6:	1d1a      	adds	r2, r3, #4
 8006ca8:	602a      	str	r2, [r5, #0]
 8006caa:	681d      	ldr	r5, [r3, #0]
 8006cac:	e005      	b.n	8006cba <_printf_i+0x96>
 8006cae:	0651      	lsls	r1, r2, #25
 8006cb0:	d5f9      	bpl.n	8006ca6 <_printf_i+0x82>
 8006cb2:	1d1a      	adds	r2, r3, #4
 8006cb4:	602a      	str	r2, [r5, #0]
 8006cb6:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cba:	2d00      	cmp	r5, #0
 8006cbc:	da39      	bge.n	8006d32 <_printf_i+0x10e>
 8006cbe:	232d      	movs	r3, #45	; 0x2d
 8006cc0:	426d      	negs	r5, r5
 8006cc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc6:	e034      	b.n	8006d32 <_printf_i+0x10e>
 8006cc8:	6822      	ldr	r2, [r4, #0]
 8006cca:	682b      	ldr	r3, [r5, #0]
 8006ccc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006cd0:	d003      	beq.n	8006cda <_printf_i+0xb6>
 8006cd2:	1d1a      	adds	r2, r3, #4
 8006cd4:	602a      	str	r2, [r5, #0]
 8006cd6:	681d      	ldr	r5, [r3, #0]
 8006cd8:	e004      	b.n	8006ce4 <_printf_i+0xc0>
 8006cda:	0652      	lsls	r2, r2, #25
 8006cdc:	d5f9      	bpl.n	8006cd2 <_printf_i+0xae>
 8006cde:	1d1a      	adds	r2, r3, #4
 8006ce0:	602a      	str	r2, [r5, #0]
 8006ce2:	881d      	ldrh	r5, [r3, #0]
 8006ce4:	7e23      	ldrb	r3, [r4, #24]
 8006ce6:	4a57      	ldr	r2, [pc, #348]	; (8006e44 <_printf_i+0x220>)
 8006ce8:	2b6f      	cmp	r3, #111	; 0x6f
 8006cea:	bf14      	ite	ne
 8006cec:	230a      	movne	r3, #10
 8006cee:	2308      	moveq	r3, #8
 8006cf0:	e01b      	b.n	8006d2a <_printf_i+0x106>
 8006cf2:	2378      	movs	r3, #120	; 0x78
 8006cf4:	4a54      	ldr	r2, [pc, #336]	; (8006e48 <_printf_i+0x224>)
 8006cf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	6829      	ldr	r1, [r5, #0]
 8006cfe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006d02:	f101 0604 	add.w	r6, r1, #4
 8006d06:	602e      	str	r6, [r5, #0]
 8006d08:	d001      	beq.n	8006d0e <_printf_i+0xea>
 8006d0a:	680d      	ldr	r5, [r1, #0]
 8006d0c:	e002      	b.n	8006d14 <_printf_i+0xf0>
 8006d0e:	065f      	lsls	r7, r3, #25
 8006d10:	d5fb      	bpl.n	8006d0a <_printf_i+0xe6>
 8006d12:	880d      	ldrh	r5, [r1, #0]
 8006d14:	07de      	lsls	r6, r3, #31
 8006d16:	bf44      	itt	mi
 8006d18:	f043 0320 	orrmi.w	r3, r3, #32
 8006d1c:	6023      	strmi	r3, [r4, #0]
 8006d1e:	b91d      	cbnz	r5, 8006d28 <_printf_i+0x104>
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	f023 0320 	bic.w	r3, r3, #32
 8006d26:	6023      	str	r3, [r4, #0]
 8006d28:	2310      	movs	r3, #16
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d30:	e001      	b.n	8006d36 <_printf_i+0x112>
 8006d32:	4a44      	ldr	r2, [pc, #272]	; (8006e44 <_printf_i+0x220>)
 8006d34:	230a      	movs	r3, #10
 8006d36:	6866      	ldr	r6, [r4, #4]
 8006d38:	2e00      	cmp	r6, #0
 8006d3a:	60a6      	str	r6, [r4, #8]
 8006d3c:	db03      	blt.n	8006d46 <_printf_i+0x122>
 8006d3e:	6821      	ldr	r1, [r4, #0]
 8006d40:	f021 0104 	bic.w	r1, r1, #4
 8006d44:	6021      	str	r1, [r4, #0]
 8006d46:	b905      	cbnz	r5, 8006d4a <_printf_i+0x126>
 8006d48:	b16e      	cbz	r6, 8006d66 <_printf_i+0x142>
 8006d4a:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8006d4e:	fbb5 f6f3 	udiv	r6, r5, r3
 8006d52:	fb03 5516 	mls	r5, r3, r6, r5
 8006d56:	5d55      	ldrb	r5, [r2, r5]
 8006d58:	460f      	mov	r7, r1
 8006d5a:	f801 5901 	strb.w	r5, [r1], #-1
 8006d5e:	4635      	mov	r5, r6
 8006d60:	2e00      	cmp	r6, #0
 8006d62:	d1f4      	bne.n	8006d4e <_printf_i+0x12a>
 8006d64:	e000      	b.n	8006d68 <_printf_i+0x144>
 8006d66:	4607      	mov	r7, r0
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d10a      	bne.n	8006d82 <_printf_i+0x15e>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	07dd      	lsls	r5, r3, #31
 8006d70:	d507      	bpl.n	8006d82 <_printf_i+0x15e>
 8006d72:	6862      	ldr	r2, [r4, #4]
 8006d74:	6923      	ldr	r3, [r4, #16]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	dc03      	bgt.n	8006d82 <_printf_i+0x15e>
 8006d7a:	2330      	movs	r3, #48	; 0x30
 8006d7c:	f807 3c01 	strb.w	r3, [r7, #-1]
 8006d80:	3f01      	subs	r7, #1
 8006d82:	1bc0      	subs	r0, r0, r7
 8006d84:	6120      	str	r0, [r4, #16]
 8006d86:	e02c      	b.n	8006de2 <_printf_i+0x1be>
 8006d88:	6809      	ldr	r1, [r1, #0]
 8006d8a:	682b      	ldr	r3, [r5, #0]
 8006d8c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006d90:	6962      	ldr	r2, [r4, #20]
 8006d92:	d004      	beq.n	8006d9e <_printf_i+0x17a>
 8006d94:	1d19      	adds	r1, r3, #4
 8006d96:	6029      	str	r1, [r5, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	e005      	b.n	8006daa <_printf_i+0x186>
 8006d9e:	0649      	lsls	r1, r1, #25
 8006da0:	d5f8      	bpl.n	8006d94 <_printf_i+0x170>
 8006da2:	1d19      	adds	r1, r3, #4
 8006da4:	6029      	str	r1, [r5, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	801a      	strh	r2, [r3, #0]
 8006daa:	2300      	movs	r3, #0
 8006dac:	6123      	str	r3, [r4, #16]
 8006dae:	4607      	mov	r7, r0
 8006db0:	e017      	b.n	8006de2 <_printf_i+0x1be>
 8006db2:	682b      	ldr	r3, [r5, #0]
 8006db4:	1d1a      	adds	r2, r3, #4
 8006db6:	602a      	str	r2, [r5, #0]
 8006db8:	681f      	ldr	r7, [r3, #0]
 8006dba:	4638      	mov	r0, r7
 8006dbc:	f000 f964 	bl	8007088 <strlen>
 8006dc0:	6863      	ldr	r3, [r4, #4]
 8006dc2:	6120      	str	r0, [r4, #16]
 8006dc4:	4298      	cmp	r0, r3
 8006dc6:	bf88      	it	hi
 8006dc8:	6123      	strhi	r3, [r4, #16]
 8006dca:	6923      	ldr	r3, [r4, #16]
 8006dcc:	6063      	str	r3, [r4, #4]
 8006dce:	e005      	b.n	8006ddc <_printf_i+0x1b8>
 8006dd0:	f104 0742 	add.w	r7, r4, #66	; 0x42
 8006dd4:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
 8006dd8:	2301      	movs	r3, #1
 8006dda:	6123      	str	r3, [r4, #16]
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006de2:	f8cd a000 	str.w	sl, [sp]
 8006de6:	4640      	mov	r0, r8
 8006de8:	4621      	mov	r1, r4
 8006dea:	aa03      	add	r2, sp, #12
 8006dec:	464b      	mov	r3, r9
 8006dee:	f7ff fea7 	bl	8006b40 <_printf_common>
 8006df2:	3001      	adds	r0, #1
 8006df4:	d102      	bne.n	8006dfc <_printf_i+0x1d8>
 8006df6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfa:	e01f      	b.n	8006e3c <_printf_i+0x218>
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	4649      	mov	r1, r9
 8006e00:	463a      	mov	r2, r7
 8006e02:	6923      	ldr	r3, [r4, #16]
 8006e04:	47d0      	blx	sl
 8006e06:	3001      	adds	r0, #1
 8006e08:	d0f5      	beq.n	8006df6 <_printf_i+0x1d2>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	079b      	lsls	r3, r3, #30
 8006e0e:	d405      	bmi.n	8006e1c <_printf_i+0x1f8>
 8006e10:	68e0      	ldr	r0, [r4, #12]
 8006e12:	9b03      	ldr	r3, [sp, #12]
 8006e14:	4298      	cmp	r0, r3
 8006e16:	bfb8      	it	lt
 8006e18:	4618      	movlt	r0, r3
 8006e1a:	e00f      	b.n	8006e3c <_printf_i+0x218>
 8006e1c:	2500      	movs	r5, #0
 8006e1e:	68e2      	ldr	r2, [r4, #12]
 8006e20:	9b03      	ldr	r3, [sp, #12]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	429d      	cmp	r5, r3
 8006e26:	daf3      	bge.n	8006e10 <_printf_i+0x1ec>
 8006e28:	4640      	mov	r0, r8
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	f104 0219 	add.w	r2, r4, #25
 8006e30:	2301      	movs	r3, #1
 8006e32:	47d0      	blx	sl
 8006e34:	3001      	adds	r0, #1
 8006e36:	d0de      	beq.n	8006df6 <_printf_i+0x1d2>
 8006e38:	3501      	adds	r5, #1
 8006e3a:	e7f0      	b.n	8006e1e <_printf_i+0x1fa>
 8006e3c:	b004      	add	sp, #16
 8006e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e42:	bf00      	nop
 8006e44:	080076b1 	stmdaeq	r0, {r0, r4, r5, r7, r9, sl, ip, sp, lr}
 8006e48:	080076c2 	stmdaeq	r0, {r1, r6, r7, r9, sl, ip, sp, lr}

08006e4c <_vsiprintf_r>:
 8006e4c:	b510      	push	{r4, lr}
 8006e4e:	b09a      	sub	sp, #104	; 0x68
 8006e50:	9100      	str	r1, [sp, #0]
 8006e52:	9104      	str	r1, [sp, #16]
 8006e54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e58:	9102      	str	r1, [sp, #8]
 8006e5a:	9105      	str	r1, [sp, #20]
 8006e5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006e60:	f8ad 100e 	strh.w	r1, [sp, #14]
 8006e64:	f44f 7402 	mov.w	r4, #520	; 0x208
 8006e68:	4669      	mov	r1, sp
 8006e6a:	f8ad 400c 	strh.w	r4, [sp, #12]
 8006e6e:	f7ff fd7b 	bl	8006968 <_svfiprintf_r>
 8006e72:	9b00      	ldr	r3, [sp, #0]
 8006e74:	2200      	movs	r2, #0
 8006e76:	701a      	strb	r2, [r3, #0]
 8006e78:	b01a      	add	sp, #104	; 0x68
 8006e7a:	bd10      	pop	{r4, pc}

08006e7c <vsiprintf>:
 8006e7c:	b530      	push	{r4, r5, lr}
 8006e7e:	4613      	mov	r3, r2
 8006e80:	4a04      	ldr	r2, [pc, #16]	; (8006e94 <vsiprintf+0x18>)
 8006e82:	4605      	mov	r5, r0
 8006e84:	460c      	mov	r4, r1
 8006e86:	6810      	ldr	r0, [r2, #0]
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4622      	mov	r2, r4
 8006e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e90:	f7ff bfdc 	b.w	8006e4c <_vsiprintf_r>
 8006e94:	2000046c 	andcs	r0, r0, ip, ror #8

08006e98 <memchr>:
 8006e98:	b510      	push	{r4, lr}
 8006e9a:	b2c9      	uxtb	r1, r1
 8006e9c:	4402      	add	r2, r0
 8006e9e:	4290      	cmp	r0, r2
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	d005      	beq.n	8006eb0 <memchr+0x18>
 8006ea4:	781c      	ldrb	r4, [r3, #0]
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	428c      	cmp	r4, r1
 8006eaa:	d1f8      	bne.n	8006e9e <memchr+0x6>
 8006eac:	4618      	mov	r0, r3
 8006eae:	bd10      	pop	{r4, pc}
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	bd10      	pop	{r4, pc}

08006eb4 <memmove>:
 8006eb4:	4281      	cmp	r1, r0
 8006eb6:	b570      	push	{r4, r5, r6, lr}
 8006eb8:	d301      	bcc.n	8006ebe <memmove+0xa>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	e00e      	b.n	8006edc <memmove+0x28>
 8006ebe:	188c      	adds	r4, r1, r2
 8006ec0:	42a0      	cmp	r0, r4
 8006ec2:	d2fa      	bcs.n	8006eba <memmove+0x6>
 8006ec4:	1885      	adds	r5, r0, r2
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006ecc:	d305      	bcc.n	8006eda <memmove+0x26>
 8006ece:	4251      	negs	r1, r2
 8006ed0:	1866      	adds	r6, r4, r1
 8006ed2:	5cf6      	ldrb	r6, [r6, r3]
 8006ed4:	4429      	add	r1, r5
 8006ed6:	54ce      	strb	r6, [r1, r3]
 8006ed8:	e7f6      	b.n	8006ec8 <memmove+0x14>
 8006eda:	bd70      	pop	{r4, r5, r6, pc}
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d003      	beq.n	8006ee8 <memmove+0x34>
 8006ee0:	5ccc      	ldrb	r4, [r1, r3]
 8006ee2:	54c4      	strb	r4, [r0, r3]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	e7f9      	b.n	8006edc <memmove+0x28>
 8006ee8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006eec <_free_r>:
 8006eec:	b530      	push	{r4, r5, lr}
 8006eee:	2900      	cmp	r1, #0
 8006ef0:	d03c      	beq.n	8006f6c <_free_r+0x80>
 8006ef2:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8006ef6:	1f0b      	subs	r3, r1, #4
 8006ef8:	491d      	ldr	r1, [pc, #116]	; (8006f70 <_free_r+0x84>)
 8006efa:	2a00      	cmp	r2, #0
 8006efc:	bfb8      	it	lt
 8006efe:	189b      	addlt	r3, r3, r2
 8006f00:	680a      	ldr	r2, [r1, #0]
 8006f02:	460c      	mov	r4, r1
 8006f04:	b912      	cbnz	r2, 8006f0c <_free_r+0x20>
 8006f06:	605a      	str	r2, [r3, #4]
 8006f08:	600b      	str	r3, [r1, #0]
 8006f0a:	bd30      	pop	{r4, r5, pc}
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d20d      	bcs.n	8006f2c <_free_r+0x40>
 8006f10:	6819      	ldr	r1, [r3, #0]
 8006f12:	1858      	adds	r0, r3, r1
 8006f14:	4290      	cmp	r0, r2
 8006f16:	d103      	bne.n	8006f20 <_free_r+0x34>
 8006f18:	585a      	ldr	r2, [r3, r1]
 8006f1a:	4411      	add	r1, r2
 8006f1c:	6842      	ldr	r2, [r0, #4]
 8006f1e:	6019      	str	r1, [r3, #0]
 8006f20:	605a      	str	r2, [r3, #4]
 8006f22:	6023      	str	r3, [r4, #0]
 8006f24:	bd30      	pop	{r4, r5, pc}
 8006f26:	4299      	cmp	r1, r3
 8006f28:	d803      	bhi.n	8006f32 <_free_r+0x46>
 8006f2a:	460a      	mov	r2, r1
 8006f2c:	6851      	ldr	r1, [r2, #4]
 8006f2e:	2900      	cmp	r1, #0
 8006f30:	d1f9      	bne.n	8006f26 <_free_r+0x3a>
 8006f32:	6814      	ldr	r4, [r2, #0]
 8006f34:	1915      	adds	r5, r2, r4
 8006f36:	429d      	cmp	r5, r3
 8006f38:	d10a      	bne.n	8006f50 <_free_r+0x64>
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4423      	add	r3, r4
 8006f3e:	18d0      	adds	r0, r2, r3
 8006f40:	4288      	cmp	r0, r1
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	d112      	bne.n	8006f6c <_free_r+0x80>
 8006f46:	6808      	ldr	r0, [r1, #0]
 8006f48:	4403      	add	r3, r0
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	684b      	ldr	r3, [r1, #4]
 8006f4e:	e00c      	b.n	8006f6a <_free_r+0x7e>
 8006f50:	d902      	bls.n	8006f58 <_free_r+0x6c>
 8006f52:	230c      	movs	r3, #12
 8006f54:	6003      	str	r3, [r0, #0]
 8006f56:	bd30      	pop	{r4, r5, pc}
 8006f58:	6818      	ldr	r0, [r3, #0]
 8006f5a:	181c      	adds	r4, r3, r0
 8006f5c:	428c      	cmp	r4, r1
 8006f5e:	d103      	bne.n	8006f68 <_free_r+0x7c>
 8006f60:	680c      	ldr	r4, [r1, #0]
 8006f62:	6849      	ldr	r1, [r1, #4]
 8006f64:	4420      	add	r0, r4
 8006f66:	6018      	str	r0, [r3, #0]
 8006f68:	6059      	str	r1, [r3, #4]
 8006f6a:	6053      	str	r3, [r2, #4]
 8006f6c:	bd30      	pop	{r4, r5, pc}
 8006f6e:	bf00      	nop
 8006f70:	20000dc4 	andcs	r0, r0, r4, asr #27

08006f74 <_malloc_r>:
 8006f74:	b570      	push	{r4, r5, r6, lr}
 8006f76:	1ccd      	adds	r5, r1, #3
 8006f78:	f025 0503 	bic.w	r5, r5, #3
 8006f7c:	3508      	adds	r5, #8
 8006f7e:	2d0c      	cmp	r5, #12
 8006f80:	bf38      	it	cc
 8006f82:	250c      	movcc	r5, #12
 8006f84:	2d00      	cmp	r5, #0
 8006f86:	4606      	mov	r6, r0
 8006f88:	db3f      	blt.n	800700a <_malloc_r+0x96>
 8006f8a:	428d      	cmp	r5, r1
 8006f8c:	d33d      	bcc.n	800700a <_malloc_r+0x96>
 8006f8e:	4b21      	ldr	r3, [pc, #132]	; (8007014 <_malloc_r+0xa0>)
 8006f90:	681c      	ldr	r4, [r3, #0]
 8006f92:	4618      	mov	r0, r3
 8006f94:	4621      	mov	r1, r4
 8006f96:	b1a1      	cbz	r1, 8006fc2 <_malloc_r+0x4e>
 8006f98:	680b      	ldr	r3, [r1, #0]
 8006f9a:	1b5b      	subs	r3, r3, r5
 8006f9c:	d40e      	bmi.n	8006fbc <_malloc_r+0x48>
 8006f9e:	2b0b      	cmp	r3, #11
 8006fa0:	d903      	bls.n	8006faa <_malloc_r+0x36>
 8006fa2:	600b      	str	r3, [r1, #0]
 8006fa4:	18cc      	adds	r4, r1, r3
 8006fa6:	50cd      	str	r5, [r1, r3]
 8006fa8:	e01f      	b.n	8006fea <_malloc_r+0x76>
 8006faa:	428c      	cmp	r4, r1
 8006fac:	d102      	bne.n	8006fb4 <_malloc_r+0x40>
 8006fae:	6862      	ldr	r2, [r4, #4]
 8006fb0:	6002      	str	r2, [r0, #0]
 8006fb2:	e01a      	b.n	8006fea <_malloc_r+0x76>
 8006fb4:	684b      	ldr	r3, [r1, #4]
 8006fb6:	6063      	str	r3, [r4, #4]
 8006fb8:	460c      	mov	r4, r1
 8006fba:	e016      	b.n	8006fea <_malloc_r+0x76>
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	6849      	ldr	r1, [r1, #4]
 8006fc0:	e7e9      	b.n	8006f96 <_malloc_r+0x22>
 8006fc2:	4c15      	ldr	r4, [pc, #84]	; (8007018 <_malloc_r+0xa4>)
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	b91b      	cbnz	r3, 8006fd0 <_malloc_r+0x5c>
 8006fc8:	4630      	mov	r0, r6
 8006fca:	f000 f84d 	bl	8007068 <_sbrk_r>
 8006fce:	6020      	str	r0, [r4, #0]
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f000 f848 	bl	8007068 <_sbrk_r>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	4601      	mov	r1, r0
 8006fdc:	d015      	beq.n	800700a <_malloc_r+0x96>
 8006fde:	1cc4      	adds	r4, r0, #3
 8006fe0:	f024 0403 	bic.w	r4, r4, #3
 8006fe4:	4284      	cmp	r4, r0
 8006fe6:	d10a      	bne.n	8006ffe <_malloc_r+0x8a>
 8006fe8:	6025      	str	r5, [r4, #0]
 8006fea:	f104 000b 	add.w	r0, r4, #11
 8006fee:	1d23      	adds	r3, r4, #4
 8006ff0:	f020 0007 	bic.w	r0, r0, #7
 8006ff4:	1ac3      	subs	r3, r0, r3
 8006ff6:	d00b      	beq.n	8007010 <_malloc_r+0x9c>
 8006ff8:	425a      	negs	r2, r3
 8006ffa:	50e2      	str	r2, [r4, r3]
 8006ffc:	bd70      	pop	{r4, r5, r6, pc}
 8006ffe:	4630      	mov	r0, r6
 8007000:	1a61      	subs	r1, r4, r1
 8007002:	f000 f831 	bl	8007068 <_sbrk_r>
 8007006:	3001      	adds	r0, #1
 8007008:	d1ee      	bne.n	8006fe8 <_malloc_r+0x74>
 800700a:	230c      	movs	r3, #12
 800700c:	6033      	str	r3, [r6, #0]
 800700e:	2000      	movs	r0, #0
 8007010:	bd70      	pop	{r4, r5, r6, pc}
 8007012:	bf00      	nop
 8007014:	20000dc4 	andcs	r0, r0, r4, asr #27
 8007018:	20000dc0 	andcs	r0, r0, r0, asr #27

0800701c <_realloc_r>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	4606      	mov	r6, r0
 8007020:	4614      	mov	r4, r2
 8007022:	460d      	mov	r5, r1
 8007024:	b921      	cbnz	r1, 8007030 <_realloc_r+0x14>
 8007026:	4611      	mov	r1, r2
 8007028:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800702c:	f7ff bfa2 	b.w	8006f74 <_malloc_r>
 8007030:	b91a      	cbnz	r2, 800703a <_realloc_r+0x1e>
 8007032:	f7ff ff5b 	bl	8006eec <_free_r>
 8007036:	4620      	mov	r0, r4
 8007038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800703a:	f000 f82d 	bl	8007098 <_malloc_usable_size_r>
 800703e:	42a0      	cmp	r0, r4
 8007040:	d20e      	bcs.n	8007060 <_realloc_r+0x44>
 8007042:	4630      	mov	r0, r6
 8007044:	4621      	mov	r1, r4
 8007046:	f7ff ff95 	bl	8006f74 <_malloc_r>
 800704a:	4607      	mov	r7, r0
 800704c:	b150      	cbz	r0, 8007064 <_realloc_r+0x48>
 800704e:	4629      	mov	r1, r5
 8007050:	4622      	mov	r2, r4
 8007052:	f7ff fbf7 	bl	8006844 <memcpy>
 8007056:	4630      	mov	r0, r6
 8007058:	4629      	mov	r1, r5
 800705a:	f7ff ff47 	bl	8006eec <_free_r>
 800705e:	e001      	b.n	8007064 <_realloc_r+0x48>
 8007060:	4628      	mov	r0, r5
 8007062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007064:	4638      	mov	r0, r7
 8007066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007068 <_sbrk_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4c06      	ldr	r4, [pc, #24]	; (8007084 <_sbrk_r+0x1c>)
 800706c:	2300      	movs	r3, #0
 800706e:	4605      	mov	r5, r0
 8007070:	4608      	mov	r0, r1
 8007072:	6023      	str	r3, [r4, #0]
 8007074:	f000 f81a 	bl	80070ac <_sbrk>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d102      	bne.n	8007082 <_sbrk_r+0x1a>
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	b103      	cbz	r3, 8007082 <_sbrk_r+0x1a>
 8007080:	602b      	str	r3, [r5, #0]
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	2000059c 	mulcs	r0, ip, r5

08007088 <strlen>:
 8007088:	4603      	mov	r3, r0
 800708a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800708e:	2a00      	cmp	r2, #0
 8007090:	d1fb      	bne.n	800708a <strlen+0x2>
 8007092:	1a18      	subs	r0, r3, r0
 8007094:	3801      	subs	r0, #1
 8007096:	4770      	bx	lr

08007098 <_malloc_usable_size_r>:
 8007098:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800709c:	2800      	cmp	r0, #0
 800709e:	da02      	bge.n	80070a6 <_malloc_usable_size_r+0xe>
 80070a0:	3904      	subs	r1, #4
 80070a2:	580b      	ldr	r3, [r1, r0]
 80070a4:	4418      	add	r0, r3
 80070a6:	3804      	subs	r0, #4
 80070a8:	4770      	bx	lr
	...

080070ac <_sbrk>:
 80070ac:	4a09      	ldr	r2, [pc, #36]	; (80070d4 <_sbrk+0x28>)
 80070ae:	6813      	ldr	r3, [r2, #0]
 80070b0:	b163      	cbz	r3, 80070cc <_sbrk+0x20>
 80070b2:	4418      	add	r0, r3
 80070b4:	4669      	mov	r1, sp
 80070b6:	4288      	cmp	r0, r1
 80070b8:	d802      	bhi.n	80070c0 <_sbrk+0x14>
 80070ba:	6010      	str	r0, [r2, #0]
 80070bc:	4618      	mov	r0, r3
 80070be:	4770      	bx	lr
 80070c0:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <_sbrk+0x2c>)
 80070c2:	220c      	movs	r2, #12
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ca:	4770      	bx	lr
 80070cc:	4b03      	ldr	r3, [pc, #12]	; (80070dc <_sbrk+0x30>)
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	e7ef      	b.n	80070b2 <_sbrk+0x6>
 80070d2:	bf00      	nop
 80070d4:	20000dc8 	andcs	r0, r0, r8, asr #27
 80070d8:	2000059c 	mulcs	r0, ip, r5
 80070dc:	200005a0 	andcs	r0, r0, r0, lsr #11
 80070e0:	042d0cbd 	strteq	r0, [sp], #-3261	; 0xcbd
 80070e4:	c6955a2e 	ldrgt	r5, [r5], lr, lsr #20
 80070e8:	3ffc28b6 	svccc	0x00fc28b6
 80070ec:	fba16c85 	blx	686230a <__Stack_Size+0x6861b0a>
 80070f0:	380725b5 	stmdacc	r7, {r0, r2, r4, r5, r7, r8, sl, sp}
 80070f4:	449d05c0 	ldrmi	r0, [sp], #1472	; 0x5c0
 80070f8:	a6e3a704 	strbtge	sl, [r3], r4, lsl #14
 80070fc:	41b83bac 			; <UNDEFINED> instruction: 0x41b83bac
 8007100:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 8007104:	00000000 	andeq	r0, r0, r0
 8007108:	6f6f420a 	svcvs	0x006f420a
 800710c:	616f6c74 	smcvs	63172	; 0xf6c4
 8007110:	20726564 	rsbscs	r6, r2, r4, ror #10
 8007114:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 8007118:	0a2e2e2e 	beq	8b929d8 <_etext+0xb8b300>
 800711c:	00000000 	andeq	r0, r0, r0
 8007120:	63656863 	cmnvs	r5, #6488064	; 0x630000
 8007124:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
 8007128:	61686320 	cmnvs	r8, r0, lsr #6
 800712c:	2e2e6e69 	cdpcs	14, 2, cr6, cr14, cr9, {3}
 8007130:	00000a2e 	andeq	r0, r0, lr, lsr #20
 8007134:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
 8007138:	68632065 	stmdavs	r3!, {r0, r2, r5, r6, sp}^
 800713c:	206b6365 	rsbcs	r6, fp, r5, ror #6
 8007140:	3a746572 	bcc	9d20710 <_etext+0x1d19038>
 8007144:	0a582520 	beq	96105cc <_etext+0x1608ef4>
 8007148:	00000000 	andeq	r0, r0, r0
 800714c:	746f6f42 	strbtvc	r6, [pc], #-3906	; 8007154 <_sbrk+0xa8>
 8007150:	0a4b4f20 	beq	92dadd8 <_etext+0x12d3700>
 8007154:	00000000 	andeq	r0, r0, r0
 8007158:	6d726946 	ldclvs	9, cr6, [r2, #-280]!	; 0xfffffee8
 800715c:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
 8007160:	73696d20 	cmnvc	r9, #32, 26	; 0x800
 8007164:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
 8007168:	202e2e2e 	eorcs	r2, lr, lr, lsr #28
 800716c:	74696177 	strbtvc	r6, [r9], #-375	; 0x177
 8007170:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8007174:	44206e69 	strtmi	r6, [r0], #-3689	; 0xe69
 8007178:	000a5546 	andeq	r5, sl, r6, asr #10
 800717c:	6e676953 	mcrvs	9, 3, r6, cr7, cr3, {2}
 8007180:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
 8007184:	6e752065 	cdpvs	0, 7, cr2, cr5, cr5, {3}
 8007188:	69726576 	ldmdbvs	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
 800718c:	64656966 	strbtvs	r6, [r5], #-2406	; 0x966
 8007190:	202e2e2e 	eorcs	r2, lr, lr, lsr #28
 8007194:	74696177 	strbtvc	r6, [r9], #-375	; 0x177
 8007198:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800719c:	44206e69 	strtmi	r6, [r0], #-3689	; 0xe69
 80071a0:	000a5546 	andeq	r5, sl, r6, asr #10
 80071a4:	20554644 	subscs	r4, r5, r4, asr #12
 80071a8:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
 80071ac:	64656873 	strbtvs	r6, [r5], #-2163	; 0x873
 80071b0:	6c707520 	cfldr64vs	mvdx7, [r0], #-128	; 0xffffff80
 80071b4:	0a64616f 	beq	991f778 <_etext+0x19180a0>
 80071b8:	00000000 	andeq	r0, r0, r0
 80071bc:	706d754a 	rsbvc	r7, sp, sl, asr #10
 80071c0:	20676e69 	rsbcs	r6, r7, r9, ror #28
 80071c4:	4f206f74 	svcmi	0x00206f74
 80071c8:	000a2e53 	andeq	r2, sl, r3, asr lr
 80071cc:	6f6c7055 	svcvs	0x006c7055
 80071d0:	64656461 	strbtvs	r6, [r5], #-1121	; 0x461
 80071d4:	67697320 	strbvs	r7, [r9, -r0, lsr #6]!
 80071d8:	7574616e 	ldrbvc	r6, [r4, #-366]!	; 0x16e
 80071dc:	76206572 			; <UNDEFINED> instruction: 0x76206572
 80071e0:	66697265 	strbtvs	r7, [r9], -r5, ror #4
 80071e4:	21646569 	cmncs	r4, r9, ror #10
 80071e8:	0000000a 	andeq	r0, r0, sl
 80071ec:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
 80071f0:	6e752065 	cdpvs	0, 7, cr2, cr5, cr5, {3}
 80071f4:	69726576 	ldmdbvs	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
 80071f8:	64656966 	strbtvs	r6, [r5], #-2406	; 0x966
 80071fc:	202e2e2e 	eorcs	r2, lr, lr, lsr #28
 8007200:	65706977 	ldrbvs	r6, [r0, #-2423]!	; 0x977
 8007204:	656d2064 	strbvs	r2, [sp, #-100]!	; 0x64
 8007208:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 800720c:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 8007210:	656c6320 	strbvs	r6, [ip, #-800]!	; 0x320
 8007214:	72206e61 	eorvc	r6, r0, #1552	; 0x610
 8007218:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
 800721c:	00000a2e 	andeq	r0, r0, lr, lsr #20

08007220 <ed25519_k>:
 8007220:	26b2f159 	ssatcs	pc, #19, r9, asr #2	; <UNPREDICTABLE>
 8007224:	ebd69b94 	bl	75ae07c <__Stack_Size+0x75ad87c>
 8007228:	8283b156 	addhi	fp, r3, #-2147483627	; 0x80000015
 800722c:	00e0149a 	smlaleq	r1, r0, sl, r4
 8007230:	eef3d130 	mrc	1, 7, sp, cr3, cr0, {1}
 8007234:	198e80f2 	stmibne	lr, {r1, r4, r5, r6, r7, pc}
 8007238:	56dffce7 	ldrbpl	pc, [pc], r7, ror #25	; <UNPREDICTABLE>
 800723c:	2406d9dc 	strcs	sp, [r6], #-2524	; 0x9dc

08007240 <ed25519_neutral>:
	...
 8007260:	00000001 	andeq	r0, r0, r1
	...
 80072a0:	00000001 	andeq	r0, r0, r1
	...

080072c0 <ed25519_base>:
 80072c0:	8f25d51a 	svchi	0x0025d51a
 80072c4:	c9562d60 	ldmdbgt	r6, {r5, r6, r8, sl, fp, sp}^
 80072c8:	9525a7b2 	strls	sl, [r5, #-1970]!	; 0x7b2
 80072cc:	692cc760 	stmdbvs	ip!, {r5, r6, r8, r9, sl, lr, pc}
 80072d0:	fdd6dc5c 	ldc2l	12, cr13, [r6, #368]	; 0x170
 80072d4:	c0a4e231 	adcgt	lr, r4, r1, lsr r2
 80072d8:	cd6e53fe 	stclgt	3, cr5, [lr, #-1016]!	; 0xfffffc08
 80072dc:	216936d3 	ldrdcs	r3, [r9, #-99]!	; 0xffffff9d
 80072e0:	66666658 			; <UNDEFINED> instruction: 0x66666658
 80072e4:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 80072e8:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 80072ec:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 80072f0:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 80072f4:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 80072f8:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 80072fc:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 8007300:	a5b7dda3 	ldrge	sp, [r7, #3491]!	; 0xda3
 8007304:	6dde8ab3 	vldrvs	s17, [lr, #716]	; 0x2cc
 8007308:	775152f5 	smmlsrvc	r1, r5, r2, r5
 800730c:	20f09f80 	rscscs	r9, r0, r0, lsl #31
 8007310:	64abe37d 	strtvs	lr, [fp], #893	; 0x37d
 8007314:	66ea4e8e 	strbtvs	r4, [sl], lr, lsl #29
 8007318:	d78b7665 	strle	r7, [fp, r5, ror #12]
 800731c:	67875f0f 	strvs	r5, [r7, pc, lsl #30]
 8007320:	00000001 	andeq	r0, r0, r1
	...

08007340 <ed25519_d>:
 8007340:	135978a3 	cmpne	r9, #10682368	; 0xa30000
 8007344:	75eb4dca 	strbvc	r4, [fp, #3530]!	; 0xdca
 8007348:	4141d8ab 	smlaltbmi	sp, r1, fp, r8
 800734c:	00700a4d 	rsbseq	r0, r0, sp, asr #20
 8007350:	7779e898 			; <UNDEFINED> instruction: 0x7779e898
 8007354:	8cc74079 	stclhi	0, cr4, [r7], {121}	; 0x79
 8007358:	2b6ffe73 	blcs	9c06d2c <_etext+0x1bff654>
 800735c:	52036cee 	andpl	r6, r3, #60928	; 0xee00

08007360 <ed25519_order>:
 8007360:	5cf5d3ed 	ldclpl	3, cr13, [r5], #948	; 0x3b4
 8007364:	5812631a 	ldmdapl	r2, {r1, r3, r4, r8, r9, sp, lr}
 8007368:	a2f79cd6 	rscsge	r9, r7, #54784	; 0xd600
 800736c:	14def9de 	ldrbne	pc, [lr], #2526	; 0x9de	; <UNPREDICTABLE>
	...
 800737c:	10000000 	andne	r0, r0, r0

08007380 <f25519_one>:
 8007380:	00000001 	andeq	r0, r0, r1
	...

080073a0 <sha512_initial_state>:
 80073a0:	f3bcc908 	vtbl.8	d12, {d12-d13}, d8
 80073a4:	6a09e667 	bvs	8280d48 <_etext+0x279670>
 80073a8:	84caa73b 	strbhi	sl, [sl], #1851	; 0x73b
 80073ac:	bb67ae85 	bllt	99f2dc8 <_etext+0x19eb6f0>
 80073b0:	fe94f82b 	cdp2	8, 9, cr15, cr4, cr11, {1}
 80073b4:	3c6ef372 	stclcc	3, cr15, [lr], #-456	; 0xfffffe38
 80073b8:	5f1d36f1 	svcpl	0x001d36f1
 80073bc:	a54ff53a 	strbge	pc, [pc, #-1338]	; 8006e8a <vsiprintf+0xe>	; <UNPREDICTABLE>
 80073c0:	ade682d1 	sfmge	f0, 3, [r6, #836]!	; 0x344
 80073c4:	510e527f 	tstpl	lr, pc, ror r2
 80073c8:	2b3e6c1f 	blcs	8fa244c <_etext+0xf9ad74>
 80073cc:	9b05688c 	blls	8161604 <_etext+0x159f2c>
 80073d0:	fb41bd6b 	blx	9076986 <_etext+0x106f2ae>
 80073d4:	1f83d9ab 	svcne	0x0083d9ab
 80073d8:	137e2179 	cmnne	lr, #1073741854	; 0x4000001e
 80073dc:	5be0cd19 	blpl	783a848 <__Stack_Size+0x783a048>

080073e0 <round_k>:
 80073e0:	d728ae22 	strle	sl, [r8, -r2, lsr #28]!
 80073e4:	428a2f98 	addmi	r2, sl, #152, 30	; 0x260
 80073e8:	23ef65cd 	mvncs	r6, #859832320	; 0x33400000
 80073ec:	71374491 			; <UNDEFINED> instruction: 0x71374491
 80073f0:	ec4d3b2f 	mcrr	11, 2, r3, sp, cr15
 80073f4:	b5c0fbcf 	strblt	pc, [r0, #3023]	; 0xbcf	; <UNPREDICTABLE>
 80073f8:	8189dbbc 			; <UNDEFINED> instruction: 0x8189dbbc
 80073fc:	e9b5dba5 	ldmib	r5!, {r0, r2, r5, r7, r8, r9, fp, ip, lr, pc}
 8007400:	f348b538 	vqrshl.u8	d27, d24, d8
 8007404:	3956c25b 	ldmdbcc	r6, {r0, r1, r3, r4, r6, r9, lr, pc}^
 8007408:	b605d019 			; <UNDEFINED> instruction: 0xb605d019
 800740c:	59f111f1 	ldmibpl	r1!, {r0, r4, r5, r6, r7, r8, ip}^
 8007410:	af194f9b 	svcge	0x00194f9b
 8007414:	923f82a4 	eorsls	r8, pc, #164, 4	; 0x4000000a
 8007418:	da6d8118 	ble	9b67880 <_etext+0x1b601a8>
 800741c:	ab1c5ed5 	blge	871ef78 <_etext+0x7178a0>
 8007420:	a3030242 	movwge	r0, #12866	; 0x3242
 8007424:	d807aa98 	stmdale	r7, {r3, r4, r7, r9, fp, sp, pc}
 8007428:	45706fbe 	ldrbmi	r6, [r0, #-4030]!	; 0xfbe
 800742c:	12835b01 	addne	r5, r3, #1024	; 0x400
 8007430:	4ee4b28c 	cdpmi	2, 14, cr11, cr4, cr12, {4}
 8007434:	243185be 	ldrtcs	r8, [r1], #-1470	; 0x5be
 8007438:	d5ffb4e2 	ldrble	fp, [pc, #1250]!	; 8007922 <_etext+0x24a>
 800743c:	550c7dc3 	strpl	r7, [ip, #-3523]	; 0xdc3
 8007440:	f27b896f 	vmla.i<illegal width 64>	q12, <illegal reg q5.5>, <illegal reg q15.5>
 8007444:	72be5d74 	adcsvc	r5, lr, #116, 26	; 0x1d00
 8007448:	3b1696b1 	blcc	85acf14 <_etext+0x5a583c>
 800744c:	80deb1fe 	ldrshhi	fp, [lr], #30
 8007450:	25c71235 	strbcs	r1, [r7, #565]	; 0x235
 8007454:	9bdc06a7 	blls	7708ef8 <__Stack_Size+0x77086f8>
 8007458:	cf692694 	svcgt	0x00692694
 800745c:	c19bf174 	orrsgt	pc, fp, r4, ror r1	; <UNPREDICTABLE>
 8007460:	9ef14ad2 	mrcls	10, 7, r4, cr1, cr2, {6}
 8007464:	e49b69c1 	ldr	r6, [fp], #2497	; 0x9c1
 8007468:	384f25e3 	stmdacc	pc, {r0, r1, r5, r6, r7, r8, sl, sp}^	; <UNPREDICTABLE>
 800746c:	efbe4786 	svc	0x00be4786
 8007470:	8b8cd5b5 	blhi	633cb4c <__Stack_Size+0x633c34c>
 8007474:	0fc19dc6 	svceq	0x00c19dc6
 8007478:	77ac9c65 	strvc	r9, [ip, r5, ror #24]!
 800747c:	240ca1cc 	strcs	sl, [ip], #-460	; 0x1cc
 8007480:	592b0275 	stmdbpl	fp!, {r0, r2, r4, r5, r6, r9}
 8007484:	2de92c6f 	stclcs	12, cr2, [r9, #444]!	; 0x1bc
 8007488:	6ea6e483 	cdpvs	4, 10, cr14, cr6, cr3, {4}
 800748c:	4a7484aa 	bmi	9d2873c <_etext+0x1d21064>
 8007490:	bd41fbd4 	vstrlt	d31, [r1, #-848]	; 0xfffffcb0
 8007494:	5cb0a9dc 	ldcpl	9, cr10, [r0], #880	; 0x370
 8007498:	831153b5 	tsthi	r1, #-738197502	; 0xd4000002
 800749c:	76f988da 	usatvc	r8, #25, sl, asr #17
 80074a0:	ee66dfab 	cdp	15, 6, cr13, cr6, cr11, {5}
 80074a4:	983e5152 	ldmdals	lr!, {r1, r4, r6, r8, ip, lr}
 80074a8:	2db43210 	lfmcs	f3, 4, [r4, #64]!	; 0x40
 80074ac:	a831c66d 	ldmdage	r1!, {r0, r2, r3, r5, r6, r9, sl, lr, pc}
 80074b0:	98fb213f 	ldmls	fp!, {r0, r1, r2, r3, r4, r5, r8, sp}^
 80074b4:	b00327c8 	andlt	r2, r3, r8, asr #15
 80074b8:	beef0ee4 	cdplt	14, 14, cr0, cr15, cr4, {7}
 80074bc:	bf597fc7 	svclt	0x00597fc7
 80074c0:	3da88fc2 	stccc	15, cr8, [r8, #776]!	; 0x308
 80074c4:	c6e00bf3 			; <UNDEFINED> instruction: 0xc6e00bf3
 80074c8:	930aa725 	movwls	sl, #42789	; 0xa725
 80074cc:	d5a79147 	strle	r9, [r7, #327]!	; 0x147
 80074d0:	e003826f 	and	r8, r3, pc, ror #4
 80074d4:	06ca6351 			; <UNDEFINED> instruction: 0x06ca6351
 80074d8:	0a0e6e70 	beq	83a2ea0 <_etext+0x39b7c8>
 80074dc:	14292967 	strtne	r2, [r9], #-2407	; 0x967
 80074e0:	46d22ffc 			; <UNDEFINED> instruction: 0x46d22ffc
 80074e4:	27b70a85 	ldrcs	r0, [r7, r5, lsl #21]!
 80074e8:	5c26c926 	stcpl	9, cr12, [r6], #-152	; 0xffffff68
 80074ec:	2e1b2138 	mrccs	1, 0, r2, cr11, cr8, {1}
 80074f0:	5ac42aed 	bpl	71120ac <__Stack_Size+0x71118ac>
 80074f4:	4d2c6dfc 	stcmi	13, cr6, [ip, #-1008]!	; 0xfffffc10
 80074f8:	9d95b3df 	ldcls	3, cr11, [r5, #892]	; 0x37c
 80074fc:	53380d13 	teqpl	r8, #1216	; 0x4c0
 8007500:	8baf63de 	blhi	6be0480 <__Stack_Size+0x6bdfc80>
 8007504:	650a7354 	strvs	r7, [sl, #-852]	; 0x354
 8007508:	3c77b2a8 	lfmcc	f3, 3, [r7], #-672	; 0xfffffd60
 800750c:	766a0abb 			; <UNDEFINED> instruction: 0x766a0abb
 8007510:	47edaee6 	strbmi	sl, [sp, r6, ror #29]!
 8007514:	81c2c92e 	bichi	ip, r2, lr, lsr #18
 8007518:	1482353b 	strne	r3, [r2], #1339	; 0x53b
 800751c:	92722c85 	rsbsls	r2, r2, #34048	; 0x8500
 8007520:	4cf10364 	ldclmi	3, cr0, [r1], #400	; 0x190
 8007524:	a2bfe8a1 	adcsge	lr, pc, #10551296	; 0xa10000
 8007528:	bc423001 	mcrrlt	0, 0, r3, r2, cr1
 800752c:	a81a664b 	ldmdage	sl, {r0, r1, r3, r6, r9, sl, sp, lr}
 8007530:	d0f89791 	smlalsle	r9, r8, r1, r7
 8007534:	c24b8b70 	subgt	r8, fp, #112, 22	; 0x1c000
 8007538:	0654be30 			; <UNDEFINED> instruction: 0x0654be30
 800753c:	c76c51a3 	strbgt	r5, [ip, -r3, lsr #3]!
 8007540:	d6ef5218 	usatle	r5, #15, r8, lsl #4
 8007544:	d192e819 	orrsle	lr, r2, r9, lsl r8
 8007548:	5565a910 	strbpl	sl, [r5, #-2320]!	; 0x910
 800754c:	d6990624 	ldrle	r0, [r9], r4, lsr #12
 8007550:	5771202a 	ldrbpl	r2, [r1, -sl, lsr #32]!
 8007554:	f40e3585 	vst3.32	{d3,d5,d7}, [lr], r5
 8007558:	32bbd1b8 	adcscc	sp, fp, #184, 2	; 0x2e
 800755c:	106aa070 	rsbne	sl, sl, r0, ror r0
 8007560:	b8d2d0c8 	ldmlt	r2, {r3, r6, r7, ip, lr, pc}^
 8007564:	19a4c116 	stmibne	r4!, {r1, r2, r4, r8, lr, pc}
 8007568:	5141ab53 	cmppl	r1, r3, asr fp
 800756c:	1e376c08 	cdpne	12, 3, cr6, cr7, cr8, {0}
 8007570:	df8eeb99 	svcle	0x008eeb99
 8007574:	2748774c 	strbcs	r7, [r8, -ip, asr #14]
 8007578:	e19b48a8 	orrs	r4, fp, r8, lsr #17
 800757c:	34b0bcb5 	ldrtcc	fp, [r0], #3253	; 0xcb5
 8007580:	c5c95a63 	strbgt	r5, [r9, #2659]	; 0xa63
 8007584:	391c0cb3 	ldmdbcc	ip, {r0, r1, r4, r5, r7, sl, fp}
 8007588:	e3418acb 	movt	r8, #6859	; 0x1acb
 800758c:	4ed8aa4a 	vfnmami.f32	s21, s16, s20
 8007590:	7763e373 			; <UNDEFINED> instruction: 0x7763e373
 8007594:	5b9cca4f 	blpl	6739ed8 <__Stack_Size+0x67396d8>
 8007598:	d6b2b8a3 	ldrtle	fp, [r2], r3, lsr #17
 800759c:	682e6ff3 	stmdavs	lr!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 80075a0:	5defb2fc 	sfmpl	f3, 3, [pc, #1008]!	; 8007998 <_etext+0x2c0>
 80075a4:	748f82ee 	strvc	r8, [pc], #750	; 80075ac <round_k+0x1cc>
 80075a8:	43172f60 	tstmi	r7, #96, 30	; 0x180
 80075ac:	78a5636f 	stmiavc	r5!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}
 80075b0:	a1f0ab72 	mvnsge	sl, r2, ror fp
 80075b4:	84c87814 	strbhi	r7, [r8], #2068	; 0x814
 80075b8:	1a6439ec 	bne	9915d70 <_etext+0x190e698>
 80075bc:	8cc70208 	sfmhi	f0, 2, [r7], {8}
 80075c0:	23631e28 	cmncs	r3, #40, 28	; 0x280
 80075c4:	90befffa 	ldrshtls	pc, [lr], sl	; <UNPREDICTABLE>
 80075c8:	de82bde9 	cdple	13, 8, cr11, cr2, cr9, {7}
 80075cc:	a4506ceb 	ldrbge	r6, [r0], #-3307	; 0xceb
 80075d0:	b2c67915 	sbclt	r7, r6, #344064	; 0x54000
 80075d4:	bef9a3f7 	mrclt	3, 7, sl, cr9, cr7, {7}
 80075d8:	e372532b 	cmn	r2, #-1409286144	; 0xac000000
 80075dc:	c67178f2 			; <UNDEFINED> instruction: 0xc67178f2
 80075e0:	ea26619c 	b	899fc58 <_etext+0x998580>
 80075e4:	ca273ece 	bgt	89d7124 <_etext+0x9cfa4c>
 80075e8:	21c0c207 	biccs	ip, r0, r7, lsl #4
 80075ec:	d186b8c7 	orrle	fp, r6, r7, asr #17
 80075f0:	cde0eb1e 	stclgt	11, cr14, [r0, #120]!	; 0x78
 80075f4:	eada7dd6 	b	76a6d54 <__Stack_Size+0x76a6554>
 80075f8:	ee6ed178 	mcr	1, 3, sp, cr14, cr8, {3}
 80075fc:	f57d4f7f 			; <UNDEFINED> instruction: 0xf57d4f7f
 8007600:	72176fba 	andsvc	r6, r7, #744	; 0x2e8
 8007604:	06f067aa 	ldrbteq	r6, [r0], sl, lsr #15
 8007608:	a2c898a6 	sbcge	r9, r8, #10878976	; 0xa60000
 800760c:	0a637dc5 	beq	98e6d28 <_etext+0x18df650>
 8007610:	bef90dae 	cdplt	13, 15, cr0, cr9, cr14, {5}
 8007614:	113f9804 	teqne	pc, r4, lsl #16
 8007618:	131c471b 	tstne	ip, #7077888	; 0x6c0000
 800761c:	1b710b35 	blne	9c4a2f8 <_etext+0x1c42c20>
 8007620:	23047d84 	movwcs	r7, #19844	; 0x4d84
 8007624:	28db77f5 	ldmcs	fp, {r0, r2, r4, r5, r6, r7, r8, r9, sl, ip, sp, lr}^
 8007628:	40c72493 	smullmi	r2, r7, r3, r4
 800762c:	32caab7b 	sbccc	sl, sl, #125952	; 0x1ec00
 8007630:	15c9bebc 	strbne	fp, [r9, #3772]	; 0xebc
 8007634:	3c9ebe0a 	ldccc	14, cr11, [lr], {10}
 8007638:	9c100d4c 	ldcls	13, cr0, [r0], {76}	; 0x4c
 800763c:	431d67c4 	tstmi	sp, #196, 14	; 0x3100000
 8007640:	cb3e42b6 	blgt	8f98120 <_etext+0xf90a48>
 8007644:	4cc5d4be 	cfstrdmi	mvd13, [r5], {190}	; 0xbe
 8007648:	fc657e2a 	stc2l	14, cr7, [r5], #-168	; 0xffffff58
 800764c:	597f299c 	ldmdbpl	pc!, {r2, r3, r4, r7, r8, fp, sp}^	; <UNPREDICTABLE>
 8007650:	3ad6faec 	bcc	75c6208 <__Stack_Size+0x75c5a08>
 8007654:	5fcb6fab 	svcpl	0x00cb6fab
 8007658:	4a475817 	bmi	91dd6bc <_etext+0x11d5fe4>
 800765c:	6c44198c 	mcrrvs	9, 8, r1, r4, cr12
 8007660:	20646162 	rsbcs	r6, r4, r2, ror #2
 8007664:	6967616d 	stmdbvs	r7!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 8007668:	78302063 	ldmdavc	r0!, {r0, r1, r5, r6, sp}
 800766c:	78383025 	ldmdavc	r8!, {r0, r2, r5, ip, sp}
 8007670:	70786520 	rsbsvc	r6, r8, r0, lsr #10
 8007674:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 8007678:	3020676e 	eorcc	r6, r0, lr, ror #14
 800767c:	38302578 	ldmdacc	r0!, {r3, r4, r5, r6, r8, sl, sp}
 8007680:	00000a78 	andeq	r0, r0, r8, ror sl
 8007684:	58255825 	stmdapl	r5!, {r0, r2, r5, fp, ip, lr}
 8007688:	58255825 	stmdapl	r5!, {r0, r2, r5, fp, ip, lr}
 800768c:	00000000 	andeq	r0, r0, r0
 8007690:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
 8007694:	64656873 	strbtvs	r6, [r5], #-2163	; 0x873
 8007698:	5825203a 	stmdapl	r5!, {r1, r3, r4, r5, sp}
 800769c:	0000000a 	andeq	r0, r0, sl
 80076a0:	2b302d23 	blcs	8c12b34 <_etext+0xc0b45c>
 80076a4:	6c680020 	stclvs	0, cr0, [r8], #-128	; 0xffffff80
 80076a8:	6665004c 	strbtvs	r0, [r5], -ip, asr #32
 80076ac:	47464567 	strbmi	r4, [r6, -r7, ror #10]
 80076b0:	32313000 	eorscc	r3, r1, #0
 80076b4:	36353433 			; <UNDEFINED> instruction: 0x36353433
 80076b8:	41393837 	teqmi	r9, r7, lsr r8
 80076bc:	45444342 	strbmi	r4, [r4, #-834]	; 0x342
 80076c0:	31300046 	teqcc	r0, r6, asr #32
 80076c4:	35343332 	ldrcc	r3, [r4, #-818]!	; 0x332
 80076c8:	39383736 	ldmdbcc	r8!, {r1, r2, r4, r5, r8, r9, sl, ip, sp}
 80076cc:	64636261 	strbtvs	r6, [r3], #-609	; 0x261
 80076d0:	43006665 	movwmi	r6, #1637	; 0x665
 80076d4:	00000000 	andeq	r0, r0, r0

Disassembly of section .data:

20000000 <_sdata>:
20000000:	00000000 	andeq	r0, r0, r0
20000004:	04030201 	streq	r0, [r3], #-513	; 0x201
20000008:	04030201 	streq	r0, [r3], #-513	; 0x201
2000000c:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20000010 <ADCPrescTable>:
20000010:	08060402 	stmdaeq	r6, {r1, sl}

20000014 <Device_Property>:
20000014:	08000d79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sl, fp}
20000018:	08000bf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, fp}
2000001c:	08000b9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, fp}
20000020:	08000ba1 	stmdaeq	r0, {r0, r5, r7, r8, r9, fp}
20000024:	08000c99 	stmdaeq	r0, {r0, r3, r4, r7, sl, fp}
20000028:	08000d51 	stmdaeq	r0, {r0, r4, r6, r8, sl, fp}
2000002c:	08000ba5 	stmdaeq	r0, {r0, r2, r5, r7, r8, r9, fp}
20000030:	08000d0d 	stmdaeq	r0, {r0, r2, r3, r8, sl, fp}
20000034:	08000d19 	stmdaeq	r0, {r0, r3, r4, r8, sl, fp}
20000038:	08000d25 	stmdaeq	r0, {r0, r2, r5, r8, sl, fp}
2000003c:	08000d45 	stmdaeq	r0, {r0, r2, r6, r8, sl, fp}
20000040:	00000000 	andeq	r0, r0, r0
20000044:	00000040 	andeq	r0, r0, r0, asr #32

20000048 <pEpInt_IN>:
20000048:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
2000004c:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000050:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000054:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000058:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
2000005c:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000060:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}

20000064 <pEpInt_OUT>:
20000064:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000068:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
2000006c:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000070:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000074:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000078:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
2000007c:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}

20000080 <User_Standard_Requests>:
20000080:	08000bb1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, fp}
20000084:	08000bb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, fp}
20000088:	08000bcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, fp}
2000008c:	08000bd1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, fp}
20000090:	08000bd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, r9, fp}
20000094:	08000bd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, fp}
20000098:	08000bdd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, r9, fp}
2000009c:	08000be1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, fp}
200000a0:	08000be5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, fp}

200000a4 <Device_Table>:
200000a4:	00000101 	andeq	r0, r0, r1, lsl #2

200000a8 <usbStringDescriptor>:
200000a8:	200000fc 	strdcs	r0, [r0], -ip
200000ac:	00000004 	andeq	r0, r0, r4
200000b0:	2000014c 	andcs	r0, r0, ip, asr #2
200000b4:	00000012 	andeq	r0, r0, r2, lsl r0
200000b8:	20000168 	andcs	r0, r0, r8, ror #2
200000bc:	00000014 	andeq	r0, r0, r4, lsl r0
200000c0:	20000130 	andcs	r0, r0, r0, lsr r1
200000c4:	00000010 	andeq	r0, r0, r0, lsl r0
200000c8:	2000017c 	andcs	r0, r0, ip, ror r1
200000cc:	00000078 	andeq	r0, r0, r8, ror r0
200000d0:	200001f4 	strdcs	r0, [r0], -r4
200000d4:	00000064 	andeq	r0, r0, r4, rrx
200000d8:	20000258 	andcs	r0, r0, r8, asr r2
200000dc:	00000064 	andeq	r0, r0, r4, rrx

200000e0 <u8_usbDeviceDescriptorDFU>:
200000e0:	01000112 	tsteq	r0, r2, lsl r1
200000e4:	40000000 	andmi	r0, r0, r0
200000e8:	00031eaf 	andeq	r1, r3, pc, lsr #29
200000ec:	02010201 	andeq	r0, r1, #268435456	; 0x10000000
200000f0:	00000103 	andeq	r0, r0, r3, lsl #2

200000f4 <usbFunctionalDescriptor>:
200000f4:	20000140 	andcs	r0, r0, r0, asr #2
200000f8:	00000009 	andeq	r0, r0, r9

200000fc <u8_usbStringLangId>:
200000fc:	04090304 	streq	r0, [r9], #-772	; 0x304

20000100 <u8_usbConfigDescriptorDFU>:
20000100:	002d0209 	eoreq	r0, sp, r9, lsl #4
20000104:	80000101 	andhi	r0, r0, r1, lsl #2
20000108:	00040932 	andeq	r0, r4, r2, lsr r9
2000010c:	01fe0000 	mvnseq	r0, r0
20000110:	04090402 	streq	r0, [r9], #-1026	; 0x402
20000114:	fe000100 	cdp2	1, 0, cr0, cr0, cr0, {0}
20000118:	09050201 	stmdbeq	r5, {r0, r9}
2000011c:	00020004 	andeq	r0, r2, r4
20000120:	060201fe 			; <UNDEFINED> instruction: 0x060201fe
20000124:	ff032109 			; <UNDEFINED> instruction: 0xff032109
20000128:	10080000 	andne	r0, r8, r0
2000012c:	00000001 	andeq	r0, r0, r1

20000130 <u8_usbStringSerial>:
20000130:	00440310 	subeq	r0, r4, r0, lsl r3
20000134:	00560045 	subseq	r0, r6, r5, asr #32
20000138:	00300020 	eorseq	r0, r0, r0, lsr #32
2000013c:	00310030 	eorseq	r0, r1, r0, lsr r0

20000140 <u8_usbFunctionalDescriptor>:
20000140:	ff032109 			; <UNDEFINED> instruction: 0xff032109
20000144:	10080000 	andne	r0, r8, r0
20000148:	00000001 	andeq	r0, r0, r1

2000014c <u8_usbStringVendor>:
2000014c:	004c0312 	subeq	r0, ip, r2, lsl r3
20000150:	00610065 	rsbeq	r0, r1, r5, rrx
20000154:	004c0066 	subeq	r0, ip, r6, rrx
20000158:	00620061 	rsbeq	r0, r2, r1, rrx
2000015c:	00000073 	andeq	r0, r0, r3, ror r0

20000160 <usbDeviceDescriptorDFU>:
20000160:	200000e0 	andcs	r0, r0, r0, ror #1
20000164:	00000012 	andeq	r0, r0, r2, lsl r0

20000168 <u8_usbStringProduct>:
20000168:	004d0314 	subeq	r0, sp, r4, lsl r3
2000016c:	00700061 	rsbseq	r0, r0, r1, rrx
20000170:	0065006c 	rsbeq	r0, r5, ip, rrx
20000174:	00300020 	eorseq	r0, r0, r0, lsr #32
20000178:	00330030 	eorseq	r0, r3, r0, lsr r0

2000017c <u8_usbStringAlt0>:
2000017c:	00450378 	subeq	r0, r5, r8, ror r3
20000180:	0063006e 	rsbeq	r0, r3, lr, rrx
20000184:	0061006c 	rsbeq	r0, r1, ip, rrx
20000188:	00650076 	rsbeq	r0, r5, r6, ror r0
2000018c:	00440020 	subeq	r0, r4, r0, lsr #32
20000190:	00550046 	subseq	r0, r5, r6, asr #32
20000194:	00420020 	subeq	r0, r2, r0, lsr #32
20000198:	006f006f 	rsbeq	r0, pc, pc, rrx
2000019c:	006c0074 	rsbeq	r0, ip, r4, ror r0
200001a0:	0061006f 	rsbeq	r0, r1, pc, rrx
200001a4:	00650064 	rsbeq	r0, r5, r4, rrx
200001a8:	00200072 	eoreq	r0, r0, r2, ror r0
200001ac:	00450020 	subeq	r0, r5, r0, lsr #32
200001b0:	00520052 	subseq	r0, r2, r2, asr r0
200001b4:	0052004f 	subseq	r0, r2, pc, asr #32
200001b8:	0020002e 	eoreq	r0, r0, lr, lsr #32
200001bc:	00700055 	rsbseq	r0, r0, r5, asr r0
200001c0:	006f006c 	rsbeq	r0, pc, ip, rrx
200001c4:	00640061 	rsbeq	r0, r4, r1, rrx
200001c8:	00740020 	rsbseq	r0, r4, r0, lsr #32
200001cc:	0020006f 	eoreq	r0, r0, pc, rrx
200001d0:	00410052 	subeq	r0, r1, r2, asr r0
200001d4:	0020004d 	eoreq	r0, r0, sp, asr #32
200001d8:	006f006e 	rsbeq	r0, pc, lr, rrx
200001dc:	00200074 	eoreq	r0, r0, r4, ror r0
200001e0:	00750073 	rsbseq	r0, r5, r3, ror r0
200001e4:	00700070 	rsbseq	r0, r0, r0, ror r0
200001e8:	0072006f 	rsbseq	r0, r2, pc, rrx
200001ec:	00650074 	rsbeq	r0, r5, r4, ror r0
200001f0:	002e0064 	eoreq	r0, lr, r4, rrx

200001f4 <u8_usbStringAlt1>:
200001f4:	00450364 	subeq	r0, r5, r4, ror #6
200001f8:	0063006e 	rsbeq	r0, r3, lr, rrx
200001fc:	0061006c 	rsbeq	r0, r1, ip, rrx
20000200:	00650076 	rsbeq	r0, r5, r6, ror r0
20000204:	00440020 	subeq	r0, r4, r0, lsr #32
20000208:	00550046 	subseq	r0, r5, r6, asr #32
2000020c:	00420020 	subeq	r0, r2, r0, lsr #32
20000210:	006f006f 	rsbeq	r0, pc, pc, rrx
20000214:	006c0074 	rsbeq	r0, ip, r4, ror r0
20000218:	0061006f 	rsbeq	r0, r1, pc, rrx
2000021c:	00650064 	rsbeq	r0, r5, r4, rrx
20000220:	00200072 	eoreq	r0, r0, r2, ror r0
20000224:	00550020 	subseq	r0, r5, r0, lsr #32
20000228:	006c0070 	rsbeq	r0, ip, r0, ror r0
2000022c:	0061006f 	rsbeq	r0, r1, pc, rrx
20000230:	00200064 	eoreq	r0, r0, r4, rrx
20000234:	006f0074 	rsbeq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
20000238:	00460020 	subeq	r0, r6, r0, lsr #32
2000023c:	0061006c 	rsbeq	r0, r1, ip, rrx
20000240:	00680073 	rsbeq	r0, r8, r3, ror r0
20000244:	00300020 	eorseq	r0, r0, r0, lsr #32
20000248:	00380078 	eorseq	r0, r8, r8, ror r0
2000024c:	00300030 	eorseq	r0, r0, r0, lsr r0
20000250:	00300037 	eorseq	r0, r0, r7, lsr r0
20000254:	00300030 	eorseq	r0, r0, r0, lsr r0

20000258 <u8_usbStringAlt2>:
20000258:	00450364 	subeq	r0, r5, r4, ror #6
2000025c:	0063006e 	rsbeq	r0, r3, lr, rrx
20000260:	0061006c 	rsbeq	r0, r1, ip, rrx
20000264:	00650076 	rsbeq	r0, r5, r6, ror r0
20000268:	00440020 	subeq	r0, r4, r0, lsr #32
2000026c:	00550046 	subseq	r0, r5, r6, asr #32
20000270:	00420020 	subeq	r0, r2, r0, lsr #32
20000274:	006f006f 	rsbeq	r0, pc, pc, rrx
20000278:	006c0074 	rsbeq	r0, ip, r4, ror r0
2000027c:	0061006f 	rsbeq	r0, r1, pc, rrx
20000280:	00650064 	rsbeq	r0, r5, r4, rrx
20000284:	00200072 	eoreq	r0, r0, r2, ror r0
20000288:	00550020 	subseq	r0, r5, r0, lsr #32
2000028c:	006c0070 	rsbeq	r0, ip, r0, ror r0
20000290:	0061006f 	rsbeq	r0, r1, pc, rrx
20000294:	00200064 	eoreq	r0, r0, r4, rrx
20000298:	006f0074 	rsbeq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
2000029c:	00460020 	subeq	r0, r6, r0, lsr #32
200002a0:	0061006c 	rsbeq	r0, r1, ip, rrx
200002a4:	00680073 	rsbeq	r0, r8, r3, ror r0
200002a8:	00300020 	eorseq	r0, r0, r0, lsr #32
200002ac:	00380078 	eorseq	r0, r8, r8, ror r0
200002b0:	00300030 	eorseq	r0, r0, r0, lsr r0
200002b4:	00300032 	eorseq	r0, r0, r2, lsr r0
200002b8:	00300030 	eorseq	r0, r0, r0, lsr r0

200002bc <usbConfigDescriptorDFU>:
200002bc:	20000100 	andcs	r0, r0, r0, lsl #2
200002c0:	0000002d 	andeq	r0, r0, sp, lsr #32

200002c4 <userAppEnd>:
200002c4:	20005000 	andcs	r5, r0, r0

200002c8 <userAppAddr>:
200002c8:	20000c00 	andcs	r0, r0, r0, lsl #24

200002cc <sha256_padding>:
200002cc:	00000080 	andeq	r0, r0, r0, lsl #1
	...

2000030c <k>:
2000030c:	428a2f98 	addmi	r2, sl, #152, 30	; 0x260
20000310:	71374491 			; <UNDEFINED> instruction: 0x71374491
20000314:	b5c0fbcf 	strblt	pc, [r0, #3023]	; 0xbcf	; <UNPREDICTABLE>
20000318:	e9b5dba5 	ldmib	r5!, {r0, r2, r5, r7, r8, r9, fp, ip, lr, pc}
2000031c:	3956c25b 	ldmdbcc	r6, {r0, r1, r3, r4, r6, r9, lr, pc}^
20000320:	59f111f1 	ldmibpl	r1!, {r0, r4, r5, r6, r7, r8, ip}^
20000324:	923f82a4 	eorsls	r8, pc, #164, 4	; 0x4000000a
20000328:	ab1c5ed5 	blge	20717e84 <_estack+0x712e84>
2000032c:	d807aa98 	stmdale	r7, {r3, r4, r7, r9, fp, sp, pc}
20000330:	12835b01 	addne	r5, r3, #1024	; 0x400
20000334:	243185be 	ldrtcs	r8, [r1], #-1470	; 0x5be
20000338:	550c7dc3 	strpl	r7, [ip, #-3523]	; 0xdc3
2000033c:	72be5d74 	adcsvc	r5, lr, #116, 26	; 0x1d00
20000340:	80deb1fe 	ldrshhi	fp, [lr], #30
20000344:	9bdc06a7 	blls	1f701de8 <_etext+0x176fa710>
20000348:	c19bf174 	orrsgt	pc, fp, r4, ror r1	; <UNPREDICTABLE>
2000034c:	e49b69c1 	ldr	r6, [fp], #2497	; 0x9c1
20000350:	efbe4786 	svc	0x00be4786
20000354:	0fc19dc6 	svceq	0x00c19dc6
20000358:	240ca1cc 	strcs	sl, [ip], #-460	; 0x1cc
2000035c:	2de92c6f 	stclcs	12, cr2, [r9, #444]!	; 0x1bc
20000360:	4a7484aa 	bmi	21d21610 <_estack+0x1d1c610>
20000364:	5cb0a9dc 	ldcpl	9, cr10, [r0], #880	; 0x370
20000368:	76f988da 	usatvc	r8, #25, sl, asr #17
2000036c:	983e5152 	ldmdals	lr!, {r1, r4, r6, r8, ip, lr}
20000370:	a831c66d 	ldmdage	r1!, {r0, r2, r3, r5, r6, r9, sl, lr, pc}
20000374:	b00327c8 	andlt	r2, r3, r8, asr #15
20000378:	bf597fc7 	svclt	0x00597fc7
2000037c:	c6e00bf3 			; <UNDEFINED> instruction: 0xc6e00bf3
20000380:	d5a79147 	strle	r9, [r7, #327]!	; 0x147
20000384:	06ca6351 			; <UNDEFINED> instruction: 0x06ca6351
20000388:	14292967 	strtne	r2, [r9], #-2407	; 0x967
2000038c:	27b70a85 	ldrcs	r0, [r7, r5, lsl #21]!
20000390:	2e1b2138 	mrccs	1, 0, r2, cr11, cr8, {1}
20000394:	4d2c6dfc 	stcmi	13, cr6, [ip, #-1008]!	; 0xfffffc10
20000398:	53380d13 	teqpl	r8, #1216	; 0x4c0
2000039c:	650a7354 	strvs	r7, [sl, #-852]	; 0x354
200003a0:	766a0abb 			; <UNDEFINED> instruction: 0x766a0abb
200003a4:	81c2c92e 	bichi	ip, r2, lr, lsr #18
200003a8:	92722c85 	rsbsls	r2, r2, #34048	; 0x8500
200003ac:	a2bfe8a1 	adcsge	lr, pc, #10551296	; 0xa10000
200003b0:	a81a664b 	ldmdage	sl, {r0, r1, r3, r6, r9, sl, sp, lr}
200003b4:	c24b8b70 	subgt	r8, fp, #112, 22	; 0x1c000
200003b8:	c76c51a3 	strbgt	r5, [ip, -r3, lsr #3]!
200003bc:	d192e819 	orrsle	lr, r2, r9, lsl r8
200003c0:	d6990624 	ldrle	r0, [r9], r4, lsr #12
200003c4:	f40e3585 	vst3.32	{d3,d5,d7}, [lr], r5
200003c8:	106aa070 	rsbne	sl, sl, r0, ror r0
200003cc:	19a4c116 	stmibne	r4!, {r1, r2, r4, r8, lr, pc}
200003d0:	1e376c08 	cdpne	12, 3, cr6, cr7, cr8, {0}
200003d4:	2748774c 	strbcs	r7, [r8, -ip, asr #14]
200003d8:	34b0bcb5 	ldrtcc	fp, [r0], #3253	; 0xcb5
200003dc:	391c0cb3 	ldmdbcc	ip, {r0, r1, r4, r5, r7, sl, fp}
200003e0:	4ed8aa4a 	vfnmami.f32	s21, s16, s20
200003e4:	5b9cca4f 	blpl	1e732d28 <_etext+0x1672b650>
200003e8:	682e6ff3 	stmdavs	lr!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
200003ec:	748f82ee 	strvc	r8, [pc], #750	; 200003f4 <k+0xe8>
200003f0:	78a5636f 	stmiavc	r5!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}
200003f4:	84c87814 	strbhi	r7, [r8], #2068	; 0x814
200003f8:	8cc70208 	sfmhi	f0, 2, [r7], {8}
200003fc:	90befffa 	ldrshtls	pc, [lr], sl	; <UNPREDICTABLE>
20000400:	a4506ceb 	ldrbge	r6, [r0], #-3307	; 0xceb
20000404:	bef9a3f7 	mrclt	3, 7, sl, cr9, cr7, {7}
20000408:	c67178f2 			; <UNDEFINED> instruction: 0xc67178f2

2000040c <impure_data>:
	...
2000042c:	080076d3 	stmdaeq	r0, {r0, r1, r4, r6, r7, r9, sl, ip, sp, lr}
	...

2000046c <_impure_ptr>:
2000046c:	2000040c 	andcs	r0, r0, ip, lsl #8

Disassembly of section .bss:

20000470 <_sbss>:
20000470:	00000000 	andeq	r0, r0, r0

20000474 <wIstr>:
20000474:	00000000 	andeq	r0, r0, r0

20000478 <ResumeS>:
20000478:	00000000 	andeq	r0, r0, r0

2000047c <input>:
	...

200004d8 <sha256sum>:
	...

200004f8 <ctx>:
	...

20000560 <code_copy_lock>:
	...

20000562 <SaveRState>:
	...

20000564 <SaveTState>:
20000564:	00000000 	andeq	r0, r0, r0

20000568 <SaveState>:
20000568:	00000000 	andeq	r0, r0, r0

2000056c <pProperty>:
2000056c:	00000000 	andeq	r0, r0, r0

20000570 <EPindex>:
20000570:	00000000 	andeq	r0, r0, r0

20000574 <Device_Info>:
	...

20000590 <pUser_Standard_Requests>:
20000590:	00000000 	andeq	r0, r0, r0

20000594 <pInformation>:
20000594:	00000000 	andeq	r0, r0, r0

20000598 <wInterrupt_Mask>:
	...

2000059a <StatusInfo>:
	...

2000059c <errno>:
2000059c:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.bIntPackSOF:

200005a0 <bIntPackSOF>:
	...

Disassembly of section .bss.bDeviceState:

200005a4 <bDeviceState>:
200005a4:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.recvBuffer:

200005a8 <recvBuffer>:
	...

Disassembly of section .bss.uploadBlockLen:

20000da8 <uploadBlockLen>:
	...

Disassembly of section .bss.thisBlockLen:

20000daa <thisBlockLen>:
	...

Disassembly of section .bss.userFirmwareLen:

20000dac <userFirmwareLen>:
20000dac:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.userUploadType:

20000db0 <userUploadType>:
	...

Disassembly of section .bss.dfuAppStatus:

20000db4 <dfuAppStatus>:
	...

Disassembly of section .bss.dfuBusy:

20000dbc <dfuBusy>:
	...

Disassembly of section .bss.Data_Mul_MaxPacketSize:

20000dbd <Data_Mul_MaxPacketSize>:
	...

Disassembly of section .bss.__malloc_sbrk_start:

20000dc0 <__malloc_sbrk_start>:
20000dc0:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.__malloc_free_list:

20000dc4 <__malloc_free_list>:
20000dc4:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.heap_end.4246:

20000dc8 <heap_end.4246>:
20000dc8:	00000000 	andeq	r0, r0, r0

Disassembly of section ._usrstack:

20000dcc <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
   0:	3a434347 	bcc	10d0d24 <__Stack_Size+0x10d0524>
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2973726f 	ldmdbcs	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	3220342e 	eorcc	r3, r0, #771751936	; 0x2e000000
  34:	30343130 	eorscc	r3, r4, r0, lsr r1
  38:	20353237 	eorscs	r3, r5, r7, lsr r2

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	415b2029 	cmpmi	fp, r9, lsr #32
  48:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2fe <BootRAM+0xef6fa9f>
  4c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  54:	2d385f34 	ldccs	15, cr5, [r8, #-208]!	; 0xffffff30
  58:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  5c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  60:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  64:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  68:	31333132 	teqcc	r3, r2, lsr r1
  6c:	005d3734 	subseq	r3, sp, r4, lsr r7

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	14041202 	strne	r1, [r4], #-514	; 0x202
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	1a011803 	bne	4603c <__Stack_Size+0x4583c>
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	Address 0x0000002c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	08000b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp}
  14:	00000048 	andeq	r0, r0, r8, asr #32
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
  1c:	00000004 	andeq	r0, r0, r4
	...
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	007c0002 	rsbseq	r0, ip, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	00040000 	andeq	r0, r4, r0
	...

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	0000007a 	andeq	r0, r0, sl, ror r0
	...

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  48:	0000011c 	andeq	r0, r0, ip, lsl r1
  4c:	00fe0002 	rscseq	r0, lr, r2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	08000b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp}
  5c:	00000002 	andeq	r0, r0, r2
  60:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
  64:	00000002 	andeq	r0, r0, r2
  68:	08000ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp}
  6c:	00000002 	andeq	r0, r0, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(u8 bEpNum, u8 bDir, u16 wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
  70:	08000ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp}
  74:	0000000a 	andeq	r0, r0, sl
  78:	08000bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp}
  7c:	00000002 	andeq	r0, r0, r2
  80:	08000bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp}
  84:	00000018 	andeq	r0, r0, r8, lsl r0
  88:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
  8c:	00000002 	andeq	r0, r0, r2
  90:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
  94:	00000002 	andeq	r0, r0, r2
  98:	08000bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	08000bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp}
  a4:	00000002 	andeq	r0, r0, r2
	f25519_select(x, a, b, (a[0] ^ parity) & 1);

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
	f25519_normalize(a);
	f25519_normalize(c);
  a8:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}

	return f25519_eq(a, c);
  ac:	00000002 	andeq	r0, r0, r2
  b0:	08000be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp}
  b4:	00000002 	andeq	r0, r0, r2
	uint8_t ok;

	mx2ey(ey, mx);
	ok = ey2ex(ex, ey, parity);

	f25519_normalize(ex);
  b8:	08000be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp}
	f25519_normalize(ey);
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	08000bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp}

	return ok;
}
  c4:	000000a8 	andeq	r0, r0, r8, lsr #1
  c8:	08000c98 	stmdaeq	r0, {r3, r4, r7, sl, fp}
  cc:	00000074 	andeq	r0, r0, r4, ror r0
  d0:	08000d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp}
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
  d4:	0000000c 	andeq	r0, r0, ip
  d8:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
		minusp[i] = c;
  dc:	0000000c 	andeq	r0, r0, ip
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
  e0:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
  e4:	00000020 	andeq	r0, r0, r0, lsr #32

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
  e8:	08000d44 	stmdaeq	r0, {r2, r6, r8, sl, fp}
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
  ec:	0000000c 	andeq	r0, r0, ip
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
  f0:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
  f8:	08000d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp}
  fc:	0000008c 	andeq	r0, r0, ip, lsl #1
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 100:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 104:	00000070 	andeq	r0, r0, r0, ror r0
 108:	08000e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp}
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 10c:	00000038 	andeq	r0, r0, r8, lsr r0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 110:	00000000 	andeq	r0, r0, r0
 114:	00000004 	andeq	r0, r0, r4
 118:	00000000 	andeq	r0, r0, r0
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 120:	00000000 	andeq	r0, r0, r0
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
 124:	00000018 	andeq	r0, r0, r8, lsl r0
 128:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
		fprime_copy(plusa, r);
		fprime_add(plusa, a, modulus);

		fprime_select(r, r, plusa, bit);
	}
}
 12c:	000000c8 	andeq	r0, r0, r8, asr #1

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
 130:	00000000 	andeq	r0, r0, r0
	i <<= 3;

	while (x) {
 134:	00000048 	andeq	r0, r0, r8, asr #32
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
 138:	00000000 	andeq	r0, r0, r0
 13c:	0000003c 	andeq	r0, r0, ip, lsr r0
	f25519_mul__distinct(x3, a, a);

	f25519_mul_c(a, x1z1, 486662);
	f25519_add(a, x1sq, a);
	f25519_add(a, z1sq, a);
	f25519_mul__distinct(x1sq, x1z1, a);
 140:	08000f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp}
	f25519_mul_c(z3, x1sq, 4);
 144:	0000001c 	andeq	r0, r0, ip, lsl r0
 148:	08000f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp}
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
 14c:	00000016 	andeq	r0, r0, r6, lsl r0
 150:	08000fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp}
 154:	000000e4 	andeq	r0, r0, r4, ror #1
	f25519_sub(b, x3, z3); /* D */
 158:	00000000 	andeq	r0, r0, r0
 15c:	0000000c 	andeq	r0, r0, ip
	...
	f25519_mul__distinct(da, a, b);
 168:	00000014 	andeq	r0, r0, r4, lsl r0

	f25519_sub(b, x2, z2);
 16c:	100a0002 	andne	r0, sl, r2
 170:	00040000 	andeq	r0, r4, r0
	...
	f25519_add(a, x3, z3); /* C */
	f25519_mul__distinct(cb, a, b);
 180:	00000024 	andeq	r0, r0, r4, lsr #32
 184:	12670002 	rsbne	r0, r7, #2

	f25519_add(a, da, cb);
 188:	00040000 	andeq	r0, r4, r0
	...
	f25519_mul__distinct(b, a, a);
 194:	00000028 	andeq	r0, r0, r8, lsr #32
 198:	0800108c 	stmdaeq	r0, {r2, r3, r7, ip}
	f25519_mul__distinct(x5, z1, b);
 19c:	0000013c 	andeq	r0, r0, ip, lsr r1
	...

	f25519_sub(a, da, cb);
 1a8:	00000114 	andeq	r0, r0, r4, lsl r1
 1ac:	18490002 	stmdane	r9, {r1}^
	f25519_mul__distinct(b, a, a);
 1b0:	00040000 	andeq	r0, r4, r0
	...

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
 1bc:	00000048 	andeq	r0, r0, r8, asr #32
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	00000048 	andeq	r0, r0, r8, asr #32

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
 1c8:	080011c8 	stmdaeq	r0, {r3, r6, r7, r8, ip}
 1cc:	00000016 	andeq	r0, r0, r6, lsl r0
 1d0:	080011e0 	stmdaeq	r0, {r5, r6, r7, r8, ip}
 1d4:	00000012 	andeq	r0, r0, r2, lsl r0
		f25519_select(zm1, zm1, zm, bit);
 1d8:	080011f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip}
 1dc:	00000060 	andeq	r0, r0, r0, rrx
 1e0:	00000000 	andeq	r0, r0, r0
		f25519_select(xm, xm, xms, bit);
 1e4:	0000000a 	andeq	r0, r0, sl
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	00000016 	andeq	r0, r0, r6, lsl r0
		f25519_select(zm, zm, zms, bit);
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	00000038 	andeq	r0, r0, r8, lsr r0
 1f8:	08001254 	stmdaeq	r0, {r2, r4, r6, r9, ip}
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
 1fc:	00000044 	andeq	r0, r0, r4, asr #32
 200:	00000000 	andeq	r0, r0, r0
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
 204:	000000bc 	strheq	r0, [r0], -ip
 208:	08001298 	stmdaeq	r0, {r3, r4, r7, r9, ip}
	f25519_mul__distinct(result, zm1, xm);
 20c:	00000088 	andeq	r0, r0, r8, lsl #1
 210:	08001320 	stmdaeq	r0, {r5, r8, r9, ip}
	f25519_normalize(result);
 214:	00000050 	andeq	r0, r0, r0, asr r0
 218:	08001370 	stmdaeq	r0, {r4, r5, r6, r8, r9, ip}
}
 21c:	0000006c 	andeq	r0, r0, ip, rrx
 220:	080013dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, ip}
 224:	00000014 	andeq	r0, r0, r4, lsl r0
 228:	080013f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip}
 22c:	00000020 	andeq	r0, r0, r0, lsr #32
 230:	08001410 	stmdaeq	r0, {r4, sl, ip}
 234:	00000028 	andeq	r0, r0, r8, lsr #32
 238:	00000000 	andeq	r0, r0, r0
 23c:	00000004 	andeq	r0, r0, r4
 240:	00000000 	andeq	r0, r0, r0
 244:	00000018 	andeq	r0, r0, r8, lsl r0
 248:	08001438 	stmdaeq	r0, {r3, r4, r5, sl, ip}
 24c:	000000a8 	andeq	r0, r0, r8, lsr #1
 250:	00000000 	andeq	r0, r0, r0
 254:	00000034 	andeq	r0, r0, r4, lsr r0
 258:	00000000 	andeq	r0, r0, r0
 25c:	00000068 	andeq	r0, r0, r8, rrx
 260:	080014e0 	stmdaeq	r0, {r5, r6, r7, sl, ip}
 264:	00000070 	andeq	r0, r0, r0, ror r0
 268:	08001550 	stmdaeq	r0, {r4, r6, r8, sl, ip}
 26c:	00000028 	andeq	r0, r0, r8, lsr #32
 270:	08001578 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, ip}
 274:	00000014 	andeq	r0, r0, r4, lsl r0
 278:	0800158c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip}
 27c:	00000040 	andeq	r0, r0, r0, asr #32
 280:	00000000 	andeq	r0, r0, r0
 284:	00000060 	andeq	r0, r0, r0, rrx
 288:	080015cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, ip}
 28c:	00000058 	andeq	r0, r0, r8, asr r0
 290:	08001624 	stmdaeq	r0, {r2, r5, r9, sl, ip}
 294:	0000000c 	andeq	r0, r0, ip
 298:	08001630 	stmdaeq	r0, {r4, r5, r9, sl, ip}
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	08001648 	stmdaeq	r0, {r3, r6, r9, sl, ip}
 2a4:	00000012 	andeq	r0, r0, r2, lsl r0
 2a8:	0800165c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, ip}
 2ac:	00000010 	andeq	r0, r0, r0, lsl r0
 2b0:	0800166c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, ip}
 2b4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 2c0:	00000084 	andeq	r0, r0, r4, lsl #1
 2c4:	2db10002 	ldccs	0, cr0, [r1, #8]!
 2c8:	00040000 	andeq	r0, r4, r0
 2cc:	00000000 	andeq	r0, r0, r0
 2d0:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
 2d4:	000000a0 	andeq	r0, r0, r0, lsr #1
 2d8:	08001724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip}
 2dc:	000002d8 	ldrdeq	r0, [r0], -r8
 2e0:	080019fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip}
 2e4:	00000044 	andeq	r0, r0, r4, asr #32
 2e8:	00000000 	andeq	r0, r0, r0
 2ec:	00000002 	andeq	r0, r0, r2
 2f0:	08001a40 	stmdaeq	r0, {r6, r9, fp, ip}
 2f4:	00000018 	andeq	r0, r0, r8, lsl r0
 2f8:	08001a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, ip}
 2fc:	00000018 	andeq	r0, r0, r8, lsl r0
 300:	08001a70 	stmdaeq	r0, {r4, r5, r6, r9, fp, ip}
 304:	00000034 	andeq	r0, r0, r4, lsr r0
 308:	08001aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, ip}
 30c:	00000034 	andeq	r0, r0, r4, lsr r0
 310:	00000000 	andeq	r0, r0, r0
 314:	0000006c 	andeq	r0, r0, ip, rrx
 318:	00000000 	andeq	r0, r0, r0
 31c:	0000000c 	andeq	r0, r0, ip
 320:	00000000 	andeq	r0, r0, r0
 324:	0000000c 	andeq	r0, r0, ip
 328:	08001ad8 	stmdaeq	r0, {r3, r4, r6, r7, r9, fp, ip}
 32c:	0000000c 	andeq	r0, r0, ip
 330:	00000000 	andeq	r0, r0, r0
 334:	0000001c 	andeq	r0, r0, ip, lsl r0
 338:	08001ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, ip}
 33c:	00000002 	andeq	r0, r0, r2
	...
 348:	0000001c 	andeq	r0, r0, ip, lsl r0
 34c:	37ad0002 	strcc	r0, [sp, r2]!
 350:	00040000 	andeq	r0, r4, r0
	...
 35c:	00000228 	andeq	r0, r0, r8, lsr #4
	...
 368:	0000004c 	andeq	r0, r0, ip, asr #32
 36c:	41e40002 	mvnmi	r0, r2
 370:	00040000 	andeq	r0, r4, r0
 374:	00000000 	andeq	r0, r0, r0
 378:	08001ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, ip}
 37c:	00000070 	andeq	r0, r0, r0, ror r0
 380:	08001b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip}
 384:	0000003a 	andeq	r0, r0, sl, lsr r0
 388:	08001b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, ip}
 38c:	0000005e 	andeq	r0, r0, lr, asr r0
 390:	08001bf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, fp, ip}
 394:	000000c8 	andeq	r0, r0, r8, asr #1
 398:	08001cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip}
 39c:	000000e0 	andeq	r0, r0, r0, ror #1
 3a0:	08001d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, ip}
 3a4:	000000b4 	strheq	r0, [r0], -r4
 3a8:	08001e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip}
 3ac:	00000084 	andeq	r0, r0, r4, lsl #1
	...
 3b8:	00000024 	andeq	r0, r0, r4, lsr #32
 3bc:	509a0002 	addspl	r0, sl, r2
 3c0:	00040000 	andeq	r0, r4, r0
	...
 3cc:	0000007c 	andeq	r0, r0, ip, ror r0
 3d0:	08001ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, ip}
 3d4:	0000017c 	andeq	r0, r0, ip, ror r1
	...
 3e0:	0000007c 	andeq	r0, r0, ip, ror r0
 3e4:	5bf60002 	blpl	ffd803f4 <BootRAM+0xecf0b95>
 3e8:	00040000 	andeq	r0, r4, r0
 3ec:	00000000 	andeq	r0, r0, r0
 3f0:	08002050 	stmdaeq	r0, {r4, r6, sp}
 3f4:	0000001e 	andeq	r0, r0, lr, lsl r0
 3f8:	08002070 	stmdaeq	r0, {r4, r5, r6, sp}
 3fc:	0000006e 	andeq	r0, r0, lr, rrx
 400:	080020e0 	stmdaeq	r0, {r5, r6, r7, sp}
 404:	0000009a 	muleq	r0, sl, r0
 408:	0800217c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sp}
 40c:	000000c2 	andeq	r0, r0, r2, asr #1
 410:	08002240 	stmdaeq	r0, {r6, r9, sp}
 414:	00000046 	andeq	r0, r0, r6, asr #32
 418:	08002288 	stmdaeq	r0, {r3, r7, r9, sp}
 41c:	0000004c 	andeq	r0, r0, ip, asr #32
 420:	080022d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sp}
 424:	00000046 	andeq	r0, r0, r6, asr #32
 428:	0800231c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sp}
 42c:	00000088 	andeq	r0, r0, r8, lsl #1
 430:	00000000 	andeq	r0, r0, r0
 434:	000000b8 	strheq	r0, [r0], -r8
 438:	00000000 	andeq	r0, r0, r0
 43c:	00000040 	andeq	r0, r0, r0, asr #32
 440:	080023a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sp}
 444:	000005ea 	andeq	r0, r0, sl, ror #11
 448:	00000000 	andeq	r0, r0, r0
 44c:	00000026 	andeq	r0, r0, r6, lsr #32
 450:	08002990 	stmdaeq	r0, {r4, r7, r8, fp, sp}
 454:	00000634 	andeq	r0, r0, r4, lsr r6
	...
 460:	0000005c 	andeq	r0, r0, ip, asr r0
 464:	6b9d0002 	blvs	fe740474 <BootRAM+0xd6b0c15>
 468:	00040000 	andeq	r0, r4, r0
	...
 474:	0000001e 	andeq	r0, r0, lr, lsl r0
 478:	08002fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, sp}
 47c:	000001a0 	andeq	r0, r0, r0, lsr #3
 480:	00000000 	andeq	r0, r0, r0
 484:	0000002c 	andeq	r0, r0, ip, lsr #32
 488:	00000000 	andeq	r0, r0, r0
 48c:	0000009a 	muleq	r0, sl, r0
 490:	00000000 	andeq	r0, r0, r0
 494:	000000c2 	andeq	r0, r0, r2, asr #1
 498:	00000000 	andeq	r0, r0, r0
 49c:	00000058 	andeq	r0, r0, r8, asr r0
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	0000008e 	andeq	r0, r0, lr, lsl #1
 4a8:	00000000 	andeq	r0, r0, r0
 4ac:	0000013e 	andeq	r0, r0, lr, lsr r1
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	000000d2 	ldrdeq	r0, [r0], -r2
	...
 4c0:	00000024 	andeq	r0, r0, r4, lsr #32
 4c4:	79110002 	ldmdbvc	r1, {r1}
 4c8:	00040000 	andeq	r0, r4, r0
	...
 4d4:	00000040 	andeq	r0, r0, r0, asr #32
 4d8:	00000000 	andeq	r0, r0, r0
 4dc:	000000d4 	ldrdeq	r0, [r0], -r4
	...
 4e8:	00000034 	andeq	r0, r0, r4, lsr r0
 4ec:	7f3b0002 	svcvc	0x003b0002
 4f0:	00040000 	andeq	r0, r4, r0
 4f4:	00000000 	andeq	r0, r0, r0
 4f8:	08003164 	stmdaeq	r0, {r2, r5, r6, r8, ip, sp}
 4fc:	00000058 	andeq	r0, r0, r8, asr r0
 500:	080031bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, ip, sp}
 504:	00001f64 	andeq	r1, r0, r4, ror #30
 508:	08005120 	stmdaeq	r0, {r5, r8, ip, lr}
 50c:	0000008e 	andeq	r0, r0, lr, lsl #1
 510:	080051b0 	stmdaeq	r0, {r4, r5, r7, r8, ip, lr}
 514:	00000218 	andeq	r0, r0, r8, lsl r2
	...
 520:	0000002c 	andeq	r0, r0, ip, lsr #32
 524:	84eb0002 	strbthi	r0, [fp], #2
 528:	00040000 	andeq	r0, r4, r0
 52c:	00000000 	andeq	r0, r0, r0
 530:	080053c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, lr}
 534:	00000494 	muleq	r0, r4, r4
 538:	0800585c 	stmdaeq	r0, {r2, r3, r4, r6, fp, ip, lr}
 53c:	00000088 	andeq	r0, r0, r8, lsl #1
 540:	080058e4 	stmdaeq	r0, {r2, r5, r6, r7, fp, ip, lr}
 544:	00000296 	muleq	r0, r6, r2
	...
 550:	0000001c 	andeq	r0, r0, ip, lsl r0
 554:	8c6e0002 	stclhi	0, cr0, [lr], #-8
 558:	00040000 	andeq	r0, r4, r0
 55c:	00000000 	andeq	r0, r0, r0
 560:	08005b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, ip, lr}
 564:	000001a4 	andeq	r0, r0, r4, lsr #3
	...
 570:	000001ec 	andeq	r0, r0, ip, ror #3
 574:	93400002 	movtls	r0, #2
 578:	00040000 	andeq	r0, r4, r0
	...
 584:	0000000c 	andeq	r0, r0, ip
 588:	00000000 	andeq	r0, r0, r0
 58c:	0000000c 	andeq	r0, r0, ip
 590:	00000000 	andeq	r0, r0, r0
 594:	0000000c 	andeq	r0, r0, ip
 598:	00000000 	andeq	r0, r0, r0
 59c:	0000000c 	andeq	r0, r0, ip
 5a0:	00000000 	andeq	r0, r0, r0
 5a4:	0000000c 	andeq	r0, r0, ip
 5a8:	00000000 	andeq	r0, r0, r0
 5ac:	0000000c 	andeq	r0, r0, ip
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	0000000c 	andeq	r0, r0, ip
 5b8:	00000000 	andeq	r0, r0, r0
 5bc:	00000010 	andeq	r0, r0, r0, lsl r0
 5c0:	00000000 	andeq	r0, r0, r0
 5c4:	0000000c 	andeq	r0, r0, ip
 5c8:	00000000 	andeq	r0, r0, r0
 5cc:	0000000e 	andeq	r0, r0, lr
 5d0:	00000000 	andeq	r0, r0, r0
 5d4:	00000010 	andeq	r0, r0, r0, lsl r0
 5d8:	00000000 	andeq	r0, r0, r0
 5dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e0:	00000000 	andeq	r0, r0, r0
 5e4:	00000012 	andeq	r0, r0, r2, lsl r0
 5e8:	08005d20 	stmdaeq	r0, {r5, r8, sl, fp, ip, lr}
 5ec:	0000002a 	andeq	r0, r0, sl, lsr #32
 5f0:	00000000 	andeq	r0, r0, r0
 5f4:	0000002a 	andeq	r0, r0, sl, lsr #32
 5f8:	00000000 	andeq	r0, r0, r0
 5fc:	00000024 	andeq	r0, r0, r4, lsr #32
 600:	00000000 	andeq	r0, r0, r0
 604:	00000012 	andeq	r0, r0, r2, lsl r0
 608:	00000000 	andeq	r0, r0, r0
 60c:	00000012 	andeq	r0, r0, r2, lsl r0
 610:	00000000 	andeq	r0, r0, r0
 614:	0000001e 	andeq	r0, r0, lr, lsl r0
 618:	08005d4a 	stmdaeq	r0, {r1, r3, r6, r8, sl, fp, ip, lr}
 61c:	0000001e 	andeq	r0, r0, lr, lsl r0
 620:	00000000 	andeq	r0, r0, r0
 624:	0000001e 	andeq	r0, r0, lr, lsl r0
 628:	00000000 	andeq	r0, r0, r0
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	08005d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip, lr}
 634:	0000001c 	andeq	r0, r0, ip, lsl r0
 638:	00000000 	andeq	r0, r0, r0
 63c:	0000001e 	andeq	r0, r0, lr, lsl r0
 640:	00000000 	andeq	r0, r0, r0
 644:	0000001e 	andeq	r0, r0, lr, lsl r0
 648:	00000000 	andeq	r0, r0, r0
 64c:	0000001c 	andeq	r0, r0, ip, lsl r0
 650:	00000000 	andeq	r0, r0, r0
 654:	0000001a 	andeq	r0, r0, sl, lsl r0
 658:	00000000 	andeq	r0, r0, r0
 65c:	0000001a 	andeq	r0, r0, sl, lsl r0
 660:	00000000 	andeq	r0, r0, r0
 664:	00000018 	andeq	r0, r0, r8, lsl r0
 668:	00000000 	andeq	r0, r0, r0
 66c:	0000001c 	andeq	r0, r0, ip, lsl r0
 670:	00000000 	andeq	r0, r0, r0
 674:	00000020 	andeq	r0, r0, r0, lsr #32
 678:	00000000 	andeq	r0, r0, r0
 67c:	00000020 	andeq	r0, r0, r0, lsr #32
 680:	08005d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, ip, lr}
 684:	00000020 	andeq	r0, r0, r0, lsr #32
 688:	08005da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp, ip, lr}
 68c:	00000020 	andeq	r0, r0, r0, lsr #32
 690:	00000000 	andeq	r0, r0, r0
 694:	0000001e 	andeq	r0, r0, lr, lsl r0
 698:	00000000 	andeq	r0, r0, r0
 69c:	00000012 	andeq	r0, r0, r2, lsl r0
 6a0:	00000000 	andeq	r0, r0, r0
 6a4:	00000020 	andeq	r0, r0, r0, lsr #32
 6a8:	00000000 	andeq	r0, r0, r0
 6ac:	00000020 	andeq	r0, r0, r0, lsr #32
 6b0:	08005dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp, ip, lr}
 6b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6b8:	08005de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, ip, lr}
 6bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c0:	08005dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr}
 6c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c8:	00000000 	andeq	r0, r0, r0
 6cc:	00000026 	andeq	r0, r0, r6, lsr #32
 6d0:	08005e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, ip, lr}
 6d4:	00000040 	andeq	r0, r0, r0, asr #32
 6d8:	00000000 	andeq	r0, r0, r0
 6dc:	00000020 	andeq	r0, r0, r0, lsr #32
 6e0:	00000000 	andeq	r0, r0, r0
 6e4:	00000020 	andeq	r0, r0, r0, lsr #32
 6e8:	00000000 	andeq	r0, r0, r0
 6ec:	00000038 	andeq	r0, r0, r8, lsr r0
 6f0:	00000000 	andeq	r0, r0, r0
 6f4:	00000020 	andeq	r0, r0, r0, lsr #32
 6f8:	00000000 	andeq	r0, r0, r0
 6fc:	00000020 	andeq	r0, r0, r0, lsr #32
 700:	00000000 	andeq	r0, r0, r0
 704:	0000001c 	andeq	r0, r0, ip, lsl r0
 708:	00000000 	andeq	r0, r0, r0
 70c:	0000001c 	andeq	r0, r0, ip, lsl r0
 710:	00000000 	andeq	r0, r0, r0
 714:	000000a8 	andeq	r0, r0, r8, lsr #1
 718:	00000000 	andeq	r0, r0, r0
 71c:	0000005c 	andeq	r0, r0, ip, asr r0
 720:	00000000 	andeq	r0, r0, r0
 724:	0000005c 	andeq	r0, r0, ip, asr r0
 728:	00000000 	andeq	r0, r0, r0
 72c:	00000020 	andeq	r0, r0, r0, lsr #32
 730:	00000000 	andeq	r0, r0, r0
 734:	00000020 	andeq	r0, r0, r0, lsr #32
 738:	00000000 	andeq	r0, r0, r0
 73c:	00000044 	andeq	r0, r0, r4, asr #32
 740:	00000000 	andeq	r0, r0, r0
 744:	0000003a 	andeq	r0, r0, sl, lsr r0
 748:	00000000 	andeq	r0, r0, r0
 74c:	00000006 	andeq	r0, r0, r6
 750:	00000000 	andeq	r0, r0, r0
 754:	0000000a 	andeq	r0, r0, sl
	...
 760:	00000024 	andeq	r0, r0, r4, lsr #32
 764:	9fcc0002 	svcls	0x00cc0002
 768:	00040000 	andeq	r0, r4, r0
 76c:	00000000 	andeq	r0, r0, r0
 770:	08005e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip, lr}
 774:	00000154 	andeq	r0, r0, r4, asr r1
 778:	00000000 	andeq	r0, r0, r0
 77c:	00000070 	andeq	r0, r0, r0, ror r0
	...
 788:	0000001c 	andeq	r0, r0, ip, lsl r0
 78c:	a1a80002 			; <UNDEFINED> instruction: 0xa1a80002
 790:	00040000 	andeq	r0, r4, r0
 794:	00000000 	andeq	r0, r0, r0
 798:	08005fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, ip, lr}
 79c:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 7a8:	00000094 	muleq	r0, r4, r0
 7ac:	a5a50002 	strge	r0, [r5, #2]!
 7b0:	00040000 	andeq	r0, r4, r0
 7b4:	00000000 	andeq	r0, r0, r0
 7b8:	08005fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 7bc:	00000024 	andeq	r0, r0, r4, lsr #32
 7c0:	08006008 	stmdaeq	r0, {r3, sp, lr}
 7c4:	00000024 	andeq	r0, r0, r4, lsr #32
 7c8:	0800602c 	stmdaeq	r0, {r2, r3, r5, sp, lr}
 7cc:	00000090 	muleq	r0, r0, r0
 7d0:	080060bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sp, lr}
 7d4:	000000a8 	andeq	r0, r0, r8, lsr #1
 7d8:	08006164 	stmdaeq	r0, {r2, r5, r6, r8, sp, lr}
 7dc:	00000038 	andeq	r0, r0, r8, lsr r0
 7e0:	0800619c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sp, lr}
 7e4:	00000048 	andeq	r0, r0, r8, asr #32
 7e8:	080061e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sp, lr}
 7ec:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 7f0:	080062b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp, lr}
 7f4:	00000084 	andeq	r0, r0, r4, lsl #1
 7f8:	08006338 	stmdaeq	r0, {r3, r4, r5, r8, r9, sp, lr}
 7fc:	00000024 	andeq	r0, r0, r4, lsr #32
 800:	0800635c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sp, lr}
 804:	0000001c 	andeq	r0, r0, ip, lsl r0
 808:	08006378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sp, lr}
 80c:	00000040 	andeq	r0, r0, r0, asr #32
 810:	080063b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sp, lr}
 814:	000002dc 	ldrdeq	r0, [r0], -ip
 818:	08006694 	stmdaeq	r0, {r2, r4, r7, r9, sl, sp, lr}
 81c:	000000c8 	andeq	r0, r0, r8, asr #1
 820:	0800675c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, sp, lr}
 824:	00000038 	andeq	r0, r0, r8, lsr r0
 828:	08006794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp, lr}
 82c:	0000005c 	andeq	r0, r0, ip, asr r0
 830:	00000000 	andeq	r0, r0, r0
 834:	00000002 	andeq	r0, r0, r2
	...
 840:	00000024 	andeq	r0, r0, r4, lsr #32
 844:	b3890002 	orrlt	r0, r9, #2
 848:	00040000 	andeq	r0, r4, r0
 84c:	00000000 	andeq	r0, r0, r0
 850:	080067f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp, lr}
 854:	00000030 	andeq	r0, r0, r0, lsr r0
 858:	08006820 	stmdaeq	r0, {r5, fp, sp, lr}
 85c:	00000024 	andeq	r0, r0, r4, lsr #32
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000078 	andeq	r0, r0, r8, ror r0
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
	...
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      14:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
      1c:	5f632f62 	svcpl	0x00632f62
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      24:	6174735f 	cmnvs	r4, pc, asr r3
      28:	70757472 	rsbsvc	r7, r5, r2, ror r4
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	4300732e 	movwmi	r7, #814	; 0x32e
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
      34:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
      38:	66696168 	strbtvs	r6, [r9], -r8, ror #2

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	68637369 	stmdavs	r3!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	7365445c 	cmnvc	r5, #92, 8	; 0x5c000000
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	706f746b 	rsbvc	r7, pc, fp, ror #8
      48:	636e655c 	cmnvs	lr, #92, 10	; 0x17000000
      4c:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0x16c

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	6f72705f 	svcvs	0x0072705f
      54:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
      58:	6f6f625c 	svcvs	0x006f625c
      5c:	616f6c74 	smcvs	63172	; 0xf6c4
      60:	5c726564 	cfldr64pl	mvdx6, [r2], #-400	; 0xfffffe70
      64:	334d5453 	movtcc	r5, #54355	; 0xd453
      68:	00314632 	eorseq	r4, r1, r2, lsr r6
      6c:	20554e47 	subscs	r4, r5, r7, asr #28
      70:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      74:	2e33322e 	cdpcs	2, 3, cr3, cr3, cr14, {1}
      78:	80010032 	andhi	r0, r1, r2, lsr r0
      7c:	0000007e 	andeq	r0, r0, lr, ror r0
      80:	00120002 	andseq	r0, r2, r2
      84:	01040000 	mrseq	r0, (UNDEF: 4)
      88:	00000075 	andeq	r0, r0, r5, ror r0
	...
      94:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
      98:	5f32336d 	svcpl	0x0032336d
      9c:	2f62696c 	svccs	0x0062696c
      a0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
      a4:	336d7865 	cmncc	sp, #6619136	; 0x650000
	f25519_select(x, a, b, (a[0] ^ parity) & 1);

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
	f25519_normalize(a);
	f25519_normalize(c);
      a8:	63616d5f 	cmnvs	r1, #6080	; 0x17c0

	return f25519_eq(a, c);
      ac:	532e6f72 	teqpl	lr, #456	; 0x1c8
      b0:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
      b4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
	uint8_t ok;

	mx2ey(ey, mx);
	ok = ey2ex(ex, ey, parity);

	f25519_normalize(ex);
      b8:	61685c73 	smcvs	34243	; 0x85c3
	f25519_normalize(ey);
      bc:	73696669 	cmnvc	r9, #110100480	; 0x6900000
      c0:	445c6863 	ldrbmi	r6, [ip], #-2147	; 0x863

	return ok;
}
      c4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
      c8:	655c706f 	ldrbvs	r7, [ip, #-111]	; 0x6f
      cc:	616c636e 	cmnvs	ip, lr, ror #6
      d0:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
      d4:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
      d8:	625c7463 	subsvs	r7, ip, #1660944384	; 0x63000000
		minusp[i] = c;
      dc:	6c746f6f 	ldclvs	15, cr6, [r4], #-444	; 0xfffffe44
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
      e0:	6564616f 	strbvs	r6, [r4, #-367]!	; 0x16f
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
      e4:	54535c72 	ldrbpl	r5, [r3], #-3186	; 0xc72

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
      e8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
      ec:	4e470031 	mcrmi	0, 2, r0, cr7, cr1, {1}
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
      f0:	53412055 	movtpl	r2, #4181	; 0x1055
      f4:	322e3220 	eorcc	r3, lr, #32, 4
      f8:	00322e33 	eorseq	r2, r2, r3, lsr lr
      fc:	0f088001 	svceq	0x00088001
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     100:	00040000 	andeq	r0, r4, r0

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
     104:	00000026 	andeq	r0, r0, r6, lsr #32
     108:	06c00104 	strbeq	r0, [r0], r4, lsl #2
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     10c:	eb010000 	bl	40114 <__Stack_Size+0x3f914>
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
     110:	93000003 	movwls	r0, #3
     114:	d8000008 	stmdale	r0, {r3}
     118:	00000000 	andeq	r0, r0, r0
     11c:	1b000000 	blne	124 <_Minimum_Stack_Size+0x24>
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     120:	02000001 	andeq	r0, r0, #1
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
     124:	02570704 	subseq	r0, r7, #4, 14	; 0x100000
     128:	04030000 	streq	r0, [r3], #-0
		fprime_copy(plusa, r);
		fprime_add(plusa, a, modulus);

		fprime_select(r, r, plusa, bit);
	}
}
     12c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
     130:	06010200 	streq	r0, [r1], -r0, lsl #4
	i <<= 3;

	while (x) {
     134:	0000081a 	andeq	r0, r0, sl, lsl r8
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
     138:	18080102 	stmdane	r8, {r1, r8}
     13c:	02000008 	andeq	r0, r0, #8
	f25519_mul__distinct(x3, a, a);

	f25519_mul_c(a, x1z1, 486662);
	f25519_add(a, x1sq, a);
	f25519_add(a, z1sq, a);
	f25519_mul__distinct(x1sq, x1z1, a);
     140:	065e0502 	ldrbeq	r0, [lr], -r2, lsl #10
	f25519_mul_c(z3, x1sq, 4);
     144:	02020000 	andeq	r0, r2, #0
     148:	00094907 	andeq	r4, r9, r7, lsl #18
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	05040200 	streq	r0, [r4, #-512]	; 0x200
     150:	000004da 	ldrdeq	r0, [r0], -sl
     154:	52070402 	andpl	r0, r7, #33554432	; 0x2000000
	f25519_sub(b, x3, z3); /* D */
     158:	02000002 	andeq	r0, r0, #2
     15c:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
	f25519_mul__distinct(da, a, b);
     160:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     164:	00024d07 	andeq	r4, r2, r7, lsl #26
     168:	07040200 	streq	r0, [r4, -r0, lsl #4]

	f25519_sub(b, x2, z2);
     16c:	0000078b 	andeq	r0, r0, fp, lsl #15
     170:	00780404 	rsbseq	r0, r8, r4, lsl #8
	f25519_add(a, x3, z3); /* C */
     174:	02050000 	andeq	r0, r5, #0
     178:	08210801 	stmdaeq	r1!, {r0, fp}
     17c:	75060000 	strvc	r0, [r6, #-0]
	f25519_mul__distinct(cb, a, b);
     180:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
     184:	00005627 	andeq	r5, r0, r7, lsr #12

	f25519_add(a, da, cb);
     188:	31750600 	cmncc	r5, r0, lsl #12
     18c:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
     190:	00000048 	andeq	r0, r0, r8, asr #32
	f25519_mul__distinct(b, a, a);
     194:	00387506 	eorseq	r7, r8, r6, lsl #10
     198:	003a2902 	eorseq	r2, sl, r2, lsl #18
	f25519_mul__distinct(x5, z1, b);
     19c:	5a070000 	bpl	1c01a4 <__Stack_Size+0x1bf9a4>
     1a0:	02000003 	andeq	r0, r0, #3
     1a4:	0000ab2f 	andeq	sl, r0, pc, lsr #22

	f25519_sub(a, da, cb);
     1a8:	00560800 	subseq	r0, r6, r0, lsl #16
     1ac:	e3070000 	movw	r0, #28672	; 0x7000
	f25519_mul__distinct(b, a, a);
     1b0:	02000001 	andeq	r0, r0, #1
     1b4:	0000bb30 	andeq	fp, r0, r0, lsr fp
     1b8:	00480800 	subeq	r0, r8, r0, lsl #16

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	76060000 	strvc	r0, [r6], -r0
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	02003875 	andeq	r3, r0, #7667712	; 0x750000
     1c4:	0000cb31 	andeq	ip, r0, r1, lsr fp

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	003a0800 	eorseq	r0, sl, r0, lsl #16
     1cc:	01090000 	mrseq	r0, (UNDEF: 9)
     1d0:	00e53702 	rsceq	r3, r5, r2, lsl #14
     1d4:	b50a0000 	strlt	r0, [sl, #-0]
		f25519_select(zm1, zm1, zm, bit);
     1d8:	00000006 	andeq	r0, r0, r6
     1dc:	0001a70a 	andeq	sl, r1, sl, lsl #14
     1e0:	07000100 	streq	r0, [r0, -r0, lsl #2]
		f25519_select(xm, xm, xms, bit);
     1e4:	0000052d 	andeq	r0, r0, sp, lsr #10
     1e8:	00d03702 	sbcseq	r3, r0, r2, lsl #14
     1ec:	040b0000 	streq	r0, [fp], #-0
		f25519_select(zm, zm, zms, bit);
     1f0:	0129a903 	teqeq	r9, r3, lsl #18
     1f4:	b60c0000 	strlt	r0, [ip], -r0
     1f8:	03000005 	movweq	r0, #5
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	000096aa 	andeq	r9, r0, sl, lsr #13
     200:	700c0000 	andvc	r0, ip, r0
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	03000009 	movweq	r0, #9
     208:	000096ab 	andeq	r9, r0, fp, lsr #13
	f25519_mul__distinct(result, zm1, xm);
     20c:	dd0c0100 	stfles	f0, [ip, #-0]
     210:	03000008 	movweq	r0, #8
	f25519_normalize(result);
     214:	000096ac 	andeq	r9, r0, ip, lsr #13
     218:	960c0200 	strls	r0, [ip], -r0, lsl #4
}
     21c:	03000003 	movweq	r0, #3
     220:	0000e5ad 	andeq	lr, r0, sp, lsr #11
     224:	07000300 	streq	r0, [r0, -r0, lsl #6]
     228:	000001f5 	strdeq	r0, [r0], -r5
     22c:	00f0ae03 	rscseq	sl, r0, r3, lsl #28
     230:	280b0000 	stmdacs	fp, {}	; <UNPREDICTABLE>
     234:	01b4d403 			; <UNDEFINED> instruction: 0x01b4d403
     238:	430d0000 	movwmi	r0, #53248	; 0xd000
     23c:	d5030052 	strle	r0, [r3, #-82]	; 0x52
     240:	000000a0 	andeq	r0, r0, r0, lsr #1
     244:	06bb0c00 	ldrteq	r0, [fp], r0, lsl #24
     248:	d6030000 	strle	r0, [r3], -r0
     24c:	000000a0 	andeq	r0, r0, r0, lsr #1
     250:	49430d04 	stmdbmi	r3, {r2, r8, sl, fp}^
     254:	d7030052 	smlsdle	r3, r2, r0, r0
     258:	000000a0 	andeq	r0, r0, r0, lsr #1
     25c:	002a0c08 	eoreq	r0, sl, r8, lsl #24
     260:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
     264:	000000a0 	andeq	r0, r0, r0, lsr #1
     268:	00f10c0c 	rscseq	r0, r1, ip, lsl #24
     26c:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
     270:	000000a0 	andeq	r0, r0, r0, lsr #1
     274:	04450c10 	strbeq	r0, [r5], #-3088	; 0xc10
     278:	da030000 	ble	c0280 <__Stack_Size+0xbfa80>
     27c:	000000a0 	andeq	r0, r0, r0, lsr #1
     280:	05ef0c14 	strbeq	r0, [pc, #3092]!	; e9c <__Stack_Size+0x69c>
     284:	db030000 	blle	c028c <__Stack_Size+0xbfa8c>
     288:	000000a0 	andeq	r0, r0, r0, lsr #1
     28c:	00000c18 	andeq	r0, r0, r8, lsl ip
     290:	dc030000 	stcle	0, cr0, [r3], {-0}
     294:	000000a0 	andeq	r0, r0, r0, lsr #1
     298:	061a0c1c 			; <UNDEFINED> instruction: 0x061a0c1c
     29c:	dd030000 	stcle	0, cr0, [r3, #-0]
     2a0:	000000a0 	andeq	r0, r0, r0, lsr #1
     2a4:	53430d20 	movtpl	r0, #15648	; 0x3d20
     2a8:	de030052 	mcrle	0, 0, r0, cr3, cr2, {2}
     2ac:	000000a0 	andeq	r0, r0, r0, lsr #1
     2b0:	33070024 	movwcc	r0, #28708	; 0x7024
     2b4:	03000003 	movweq	r0, #3
     2b8:	000134df 	ldrdeq	r3, [r1], -pc	; <UNPREDICTABLE>
     2bc:	023d0e00 	eorseq	r0, sp, #0, 28
     2c0:	05010000 	streq	r0, [r1, #-0]
     2c4:	0001e416 	andeq	lr, r1, r6, lsl r4
     2c8:	05320a00 	ldreq	r0, [r2, #-2560]!	; 0xa00
     2cc:	0a000000 	beq	2d4 <_Minimum_Stack_Size+0x1d4>
     2d0:	00000686 	andeq	r0, r0, r6, lsl #13
     2d4:	017e0a01 	cmneq	lr, r1, lsl #20
     2d8:	0a020000 	beq	802e0 <__Stack_Size+0x7fae0>
     2dc:	00000920 	andeq	r0, r0, r0, lsr #18
     2e0:	330f0003 	movwcc	r0, #61443	; 0xf003
     2e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     2e8:	02092404 	andeq	r2, r9, #4, 8	; 0x4000000
     2ec:	e00c0000 	and	r0, ip, r0
     2f0:	04000002 	streq	r0, [r0], #-2
     2f4:	00020926 	andeq	r0, r2, r6, lsr #18
     2f8:	f10c0000 	cpsid	
     2fc:	04000003 	streq	r0, [r0], #-3
     300:	00008b27 	andeq	r8, r0, r7, lsr #22
     304:	04000400 	streq	r0, [r0], #-1024	; 0x400
     308:	00009604 	andeq	r9, r0, r4, lsl #12
     30c:	05720700 	ldrbeq	r0, [r2, #-1792]!	; 0x700
     310:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
     314:	000001e4 	andeq	r0, r0, r4, ror #3
     318:	00057107 	andeq	r7, r5, r7, lsl #2
     31c:	25290400 	strcs	r0, [r9, #-1024]!	; 0x400
     320:	04000002 	streq	r0, [r0], #-2
     324:	0001e404 	andeq	lr, r1, r4, lsl #8
     328:	07c00e00 	strbeq	r0, [r0, r0, lsl #28]
     32c:	04010000 	streq	r0, [r1], #-0
     330:	0002502d 	andeq	r5, r2, sp, lsr #32
     334:	02860a00 	addeq	r0, r6, #0, 20
     338:	0a000000 	beq	340 <_Minimum_Stack_Size+0x240>
     33c:	000009a9 	andeq	r0, r0, r9, lsr #19
     340:	01300a01 	teqeq	r0, r1, lsl #20
     344:	0a020000 	beq	8034c <__Stack_Size+0x7fb4c>
     348:	0000062b 	andeq	r0, r0, fp, lsr #12
     34c:	c1070003 	tstgt	r7, r3
     350:	04000007 	streq	r0, [r0], #-7
     354:	00022b34 	andeq	r2, r2, r4, lsr fp
     358:	05ff0f00 	ldrbeq	r0, [pc, #3840]!	; 1260 <__Stack_Size+0xa60>
     35c:	040c0000 	streq	r0, [ip], #-0
     360:	00029838 	andeq	r9, r2, r8, lsr r8
     364:	01d70c00 	bicseq	r0, r7, r0, lsl #24
     368:	50040000 	andpl	r0, r4, r0
     36c:	0000008b 	andeq	r0, r0, fp, lsl #1
     370:	086d0c00 	stmdaeq	sp!, {sl, fp}^
     374:	51040000 	mrspl	r0, (UNDEF: 4)
     378:	0000008b 	andeq	r0, r0, fp, lsl #1
     37c:	20b90c02 	adcscs	r0, r9, r2, lsl #24
     380:	52040000 	andpl	r0, r4, #0
     384:	0000008b 	andeq	r0, r0, fp, lsl #1
     388:	069a0c04 	ldreq	r0, [sl], r4, lsl #24
     38c:	53040000 	movwpl	r0, #16384	; 0x4000
     390:	000002a7 	andeq	r0, r0, r7, lsr #5
     394:	09100008 	ldmdbeq	r0, {r3}
     398:	a7000002 	strge	r0, [r0, -r2]
     39c:	11000002 	tstne	r0, r2
     3a0:	0000008b 	andeq	r0, r0, fp, lsl #1
     3a4:	98040400 	stmdals	r4, {sl}
     3a8:	07000002 	streq	r0, [r0, -r2]
     3ac:	00000600 	andeq	r0, r0, r0, lsl #12
     3b0:	025b5404 	subseq	r5, fp, #4, 8	; 0x4000000
     3b4:	230f0000 	movwcs	r0, #61440	; 0xf000
     3b8:	02000006 	andeq	r0, r0, #6
     3bc:	02dd5804 	sbcseq	r5, sp, #4, 16	; 0x40000
     3c0:	700c0000 	andvc	r0, ip, r0
     3c4:	04000003 	streq	r0, [r0], #-3
     3c8:	0000965a 	andeq	r9, r0, sl, asr r6
     3cc:	8c0c0000 	stchi	0, cr0, [ip], {-0}
     3d0:	04000005 	streq	r0, [r0], #-5
     3d4:	0000965b 	andeq	r9, r0, fp, asr r6
     3d8:	07000100 	streq	r0, [r0, -r0, lsl #2]
     3dc:	00000624 	andeq	r0, r0, r4, lsr #12
     3e0:	02b85d04 	adcseq	r5, r8, #4, 26	; 0x100
     3e4:	42120000 	andsmi	r0, r2, #0
     3e8:	04020057 	streq	r0, [r2], #-87	; 0x57
     3ec:	00030c62 	andeq	r0, r3, r2, ror #24
     3f0:	62620d00 	rsbvs	r0, r2, #0, 26
     3f4:	65040030 	strvs	r0, [r4, #-48]	; 0x30
     3f8:	00000096 	muleq	r0, r6, r0
     3fc:	62620d00 	rsbvs	r0, r2, #0, 26
     400:	66040031 			; <UNDEFINED> instruction: 0x66040031
     404:	00000096 	muleq	r0, r6, r0
     408:	02130001 	andseq	r0, r3, #1
     40c:	03285f04 	teqeq	r8, #4, 30
     410:	77140000 	ldrvc	r0, [r4, -r0]
     414:	8b610400 	blhi	184141c <__Stack_Size+0x1840c1c>
     418:	14000000 	strne	r0, [r0], #-0
     41c:	04007762 	streq	r7, [r0], #-1890	; 0x762
     420:	0002e868 	andeq	lr, r2, r8, ror #16
     424:	30070000 	andcc	r0, r7, r0
     428:	04000009 	streq	r0, [r0], #-9
     42c:	00030c69 	andeq	r0, r3, r9, ror #24
     430:	01140f00 	tsteq	r4, r0, lsl #30
     434:	041c0000 	ldreq	r0, [ip], #-0
     438:	0003c46b 	andeq	ip, r3, fp, ror #8
     43c:	07670c00 	strbeq	r0, [r7, -r0, lsl #24]!
     440:	6d040000 	stcvs	0, cr0, [r4, #-0]
     444:	00000096 	muleq	r0, r6, r0
     448:	00150c00 	andseq	r0, r5, r0, lsl #24
     44c:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
     450:	00000096 	muleq	r0, r6, r0
     454:	03110c01 	tsteq	r1, #256	; 0x100
     458:	6f040000 	svcvs	0x00040000
     45c:	00000328 	andeq	r0, r0, r8, lsr #6
     460:	01480c02 	cmpeq	r8, r2, lsl #24
     464:	70040000 	andvc	r0, r4, r0
     468:	00000328 	andeq	r0, r0, r8, lsr #6
     46c:	04eb0c04 	strbteq	r0, [fp], #3076	; 0xc04
     470:	71040000 	mrsvc	r0, (UNDEF: 4)
     474:	00000328 	andeq	r0, r0, r8, lsr #6
     478:	06510c06 	ldrbeq	r0, [r1], -r6, lsl #24
     47c:	73040000 	movwvc	r0, #16384	; 0x4000
     480:	00000096 	muleq	r0, r6, r0
     484:	08080c08 	stmdaeq	r8, {r3, sl, fp}
     488:	74040000 	strvc	r0, [r4], #-0
     48c:	00000096 	muleq	r0, r6, r0
     490:	05070c09 	streq	r0, [r7, #-3081]	; 0xc09
     494:	75040000 	strvc	r0, [r4, #-0]
     498:	00000096 	muleq	r0, r6, r0
     49c:	054f0c0a 	strbeq	r0, [pc, #-3082]	; fffff89a <BootRAM+0xef7003b>
     4a0:	76040000 	strvc	r0, [r4], -r0
     4a4:	00000096 	muleq	r0, r6, r0
     4a8:	05d60c0b 	ldrbeq	r0, [r6, #3083]	; 0xc0b
     4ac:	77040000 	strvc	r0, [r4, -r0]
     4b0:	00000096 	muleq	r0, r6, r0
     4b4:	07c80c0c 	strbeq	r0, [r8, ip, lsl #24]
     4b8:	7a040000 	bvc	1004c0 <__Stack_Size+0xffcc0>
     4bc:	000002ad 	andeq	r0, r0, sp, lsr #5
     4c0:	15070010 	strne	r0, [r7, #-16]
     4c4:	04000001 	streq	r0, [r0], #-1
     4c8:	0003337b 	andeq	r3, r3, fp, ror r3
     4cc:	03a90f00 			; <UNDEFINED> instruction: 0x03a90f00
     4d0:	04340000 	ldrteq	r0, [r4], #-0
     4d4:	0004787d 	andeq	r7, r4, sp, ror r8
     4d8:	02960c00 	addseq	r0, r6, #0, 24
     4dc:	7f040000 	svcvc	0x00040000
     4e0:	00000072 	andeq	r0, r0, r2, ror r0
     4e4:	04b80c00 	ldrteq	r0, [r8], #3072	; 0xc00
     4e8:	80040000 	andhi	r0, r4, r0
     4ec:	00000072 	andeq	r0, r0, r2, ror r0
     4f0:	09370c04 	ldmdbeq	r7!, {r2, sl, fp}
     4f4:	83040000 	movwhi	r0, #16384	; 0x4000
     4f8:	00000072 	andeq	r0, r0, r2, ror r0
     4fc:	07780c08 	ldrbeq	r0, [r8, -r8, lsl #24]!
     500:	84040000 	strhi	r0, [r4], #-0
     504:	00000072 	andeq	r0, r0, r2, ror r0
     508:	02c30c0c 	sbceq	r0, r3, #12, 24	; 0xc00
     50c:	96040000 	strls	r0, [r4], -r0
     510:	00000487 	andeq	r0, r0, r7, lsl #9
     514:	006d0c10 	rsbeq	r0, sp, r0, lsl ip
     518:	a1040000 	mrsge	r0, (UNDEF: 4)
     51c:	00000487 	andeq	r0, r0, r7, lsl #9
     520:	09c50c14 	stmibeq	r5, {r2, r4, sl, fp}^
     524:	ab040000 	blge	10052c <__Stack_Size+0xffd2c>
     528:	000004a1 	andeq	r0, r0, r1, lsr #9
     52c:	02d70c18 	sbcseq	r0, r7, #24, 24	; 0x1800
     530:	ad040000 	stcge	0, cr0, [r4, #-0]
     534:	000002a7 	andeq	r0, r0, r7, lsr #5
     538:	03b90c1c 			; <UNDEFINED> instruction: 0x03b90c1c
     53c:	ae040000 	cdpge	0, 0, cr0, cr4, cr0, {0}
     540:	000002a7 	andeq	r0, r0, r7, lsr #5
     544:	01c30c20 	biceq	r0, r3, r0, lsr #24
     548:	af040000 	svcge	0x00040000
     54c:	000002a7 	andeq	r0, r0, r7, lsr #5
     550:	03420c24 	movteq	r0, #11300	; 0x2c24
     554:	b0040000 	andlt	r0, r4, r0
     558:	000002a7 	andeq	r0, r0, r7, lsr #5
     55c:	04670c28 	strbteq	r0, [r7], #-3112	; 0xc28
     560:	b2040000 	andlt	r0, r4, #0
     564:	00000209 	andeq	r0, r0, r9, lsl #4
     568:	20b60c2c 	adcscs	r0, r6, ip, lsr #24
     56c:	b3040000 	movwlt	r0, #16384	; 0x4000
     570:	00000096 	muleq	r0, r6, r0
     574:	50100030 	andspl	r0, r0, r0, lsr r0
     578:	87000002 	strhi	r0, [r0, -r2]
     57c:	11000004 	tstne	r0, r4
     580:	00000096 	muleq	r0, r6, r0
     584:	78040400 	stmdavc	r4, {sl}
     588:	10000004 	andne	r0, r0, r4
     58c:	00000250 	andeq	r0, r0, r0, asr r2
     590:	000004a1 	andeq	r0, r0, r1, lsr #9
     594:	00009611 	andeq	r9, r0, r1, lsl r6
     598:	00961100 	addseq	r1, r6, r0, lsl #2
     59c:	04000000 	streq	r0, [r0], #-0
     5a0:	00048d04 	andeq	r8, r4, r4, lsl #26
     5a4:	03aa0700 			; <UNDEFINED> instruction: 0x03aa0700
     5a8:	b5040000 	strlt	r0, [r4, #-0]
     5ac:	000003cf 	andeq	r0, r0, pc, asr #7
     5b0:	00008a0f 	andeq	r8, r0, pc, lsl #20
     5b4:	b7042400 	strlt	r2, [r4, -r0, lsl #8]
     5b8:	0000052b 	andeq	r0, r0, fp, lsr #10
     5bc:	0005a00c 	andeq	sl, r5, ip
     5c0:	72b90400 	adcsvc	r0, r9, #0, 8
     5c4:	00000000 	andeq	r0, r0, r0
     5c8:	00041d0c 	andeq	r1, r4, ip, lsl #26
     5cc:	72ba0400 	adcsvc	r0, sl, #0, 8
     5d0:	04000000 	streq	r0, [r0], #-0
     5d4:	00029b0c 	andeq	r9, r2, ip, lsl #22
     5d8:	72bb0400 	adcsvc	r0, fp, #0, 8
     5dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     5e0:	0004330c 	andeq	r3, r4, ip, lsl #6
     5e4:	72bc0400 	adcsvc	r0, ip, #0, 8
     5e8:	0c000000 	stceq	0, cr0, [r0], {-0}
     5ec:	0000a20c 	andeq	sl, r0, ip, lsl #4
     5f0:	72bd0400 	adcsvc	r0, sp, #0, 8
     5f4:	10000000 	andne	r0, r0, r0
     5f8:	0006a30c 	andeq	sl, r6, ip, lsl #6
     5fc:	72be0400 	adcsvc	r0, lr, #0, 8
     600:	14000000 	strne	r0, [r0], #-0
     604:	0008f80c 	andeq	pc, r8, ip, lsl #16
     608:	72bf0400 	adcsvc	r0, pc, #0, 8
     60c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     610:	0001910c 	andeq	r9, r1, ip, lsl #2
     614:	72c00400 	sbcvc	r0, r0, #0, 8
     618:	1c000000 	stcne	0, cr0, [r0], {-0}
     61c:	0002ad0c 	andeq	sl, r2, ip, lsl #26
     620:	72c10400 	sbcvc	r0, r1, #0, 8
     624:	20000000 	andcs	r0, r0, r0
     628:	008b0700 	addeq	r0, fp, r0, lsl #14
     62c:	c3040000 	movwgt	r0, #16384	; 0x4000
     630:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
     634:	0000fa0e 	andeq	pc, r0, lr, lsl #20
     638:	3d060100 	stfccs	f0, [r6, #-0]
     63c:	00000573 	andeq	r0, r0, r3, ror r5
     640:	0005c60a 	andeq	ip, r5, sl, lsl #12
     644:	570a0000 	strpl	r0, [sl, -r0]
     648:	01000004 	tsteq	r0, r4
     64c:	0000080a 	andeq	r0, r0, sl, lsl #16
     650:	670a0200 	strvs	r0, [sl, -r0, lsl #4]
     654:	03000001 	movweq	r0, #1
     658:	0008d00a 	andeq	sp, r8, sl
     65c:	8c0a0400 	cfstrshi	mvf0, [sl], {-0}
     660:	05000003 	streq	r0, [r0, #-3]
     664:	0004ca0a 	andeq	ip, r4, sl, lsl #20
     668:	1c0a0600 	stcne	6, cr0, [sl], {-0}
     66c:	07000003 	streq	r0, [r0, -r3]
     670:	00fb0700 	rscseq	r0, fp, r0, lsl #14
     674:	46060000 	strmi	r0, [r6], -r0
     678:	00000536 	andeq	r0, r0, r6, lsr r5
     67c:	0008790e 	andeq	r7, r8, lr, lsl #18
     680:	48060100 	stmdami	r6, {r8}
     684:	000005af 	andeq	r0, r0, pc, lsr #11
     688:	0008870a 	andeq	r8, r8, sl, lsl #14
     68c:	5c0a0000 	stcpl	0, cr0, [sl], {-0}
     690:	01000009 	tsteq	r0, r9
     694:	0004e30a 	andeq	lr, r4, sl, lsl #6
     698:	920a0200 	andls	r0, sl, #0, 4
     69c:	03000009 	movweq	r0, #9
     6a0:	0003cd0a 	andeq	ip, r3, sl, lsl #26
     6a4:	f70a0400 			; <UNDEFINED> instruction: 0xf70a0400
     6a8:	05000007 	streq	r0, [r0, #-7]
     6ac:	087a0700 	ldmdaeq	sl!, {r8, r9, sl}^
     6b0:	4f060000 	svcmi	0x00060000
     6b4:	0000057e 	andeq	r0, r0, lr, ror r5
     6b8:	6301020b 	movwvs	r0, #4619	; 0x120b
     6bc:	000005db 	ldrdeq	r0, [r0], -fp
     6c0:	0003010c 	andeq	r0, r3, ip, lsl #2
     6c4:	db640100 	blle	1900acc <__Stack_Size+0x19002cc>
     6c8:	00000005 	andeq	r0, r0, r5
     6cc:	0003080c 	andeq	r0, r3, ip, lsl #16
     6d0:	e0650100 	rsb	r0, r5, r0, lsl #2
     6d4:	01000005 	tsteq	r0, r5
     6d8:	05730800 	ldrbeq	r0, [r3, #-2048]!	; 0x800
     6dc:	96080000 	strls	r0, [r8], -r0
     6e0:	15000000 	strne	r0, [r0, #-0]
     6e4:	00000121 	andeq	r0, r0, r1, lsr #2
     6e8:	50018801 	andpl	r8, r1, r1, lsl #16
     6ec:	01000002 	tsteq	r0, r2
     6f0:	00000603 	andeq	r0, r0, r3, lsl #12
     6f4:	0005f716 	andeq	pc, r5, r6, lsl r7	; <UNPREDICTABLE>
     6f8:	01880100 	orreq	r0, r8, r0, lsl #2
     6fc:	00000096 	muleq	r0, r6, r0
     700:	03281700 	teqeq	r8, #0, 14
     704:	ad010000 	stcge	0, cr0, [r1, #-0]
     708:	04a71801 	strteq	r1, [r7], #2049	; 0x801
     70c:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
     710:	00062301 	andeq	r2, r6, r1, lsl #6
     714:	05611900 	strbeq	r1, [r1, #-2304]!	; 0x900
     718:	c0010000 	andgt	r0, r1, r0
     71c:	0000008b 	andeq	r0, r0, fp, lsl #1
     720:	04731a00 	ldrbteq	r1, [r3], #-2560	; 0xa00
     724:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
     728:	063d0101 	ldrteq	r0, [sp], -r1, lsl #2
     72c:	011b0000 	tsteq	fp, r0
     730:	01000004 	tsteq	r0, r4
     734:	012901f2 	strdeq	r0, [r9, -r2]!
     738:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     73c:	00000581 	andeq	r0, r0, r1, lsl #11
     740:	5501b301 	strpl	fp, [r1, #-769]	; 0x301
     744:	19000006 	stmdbne	r0, {r1, r2}
     748:	00000561 	andeq	r0, r0, r1, ror #10
     74c:	008bb501 	addeq	fp, fp, r1, lsl #10
     750:	1c000000 	stcne	0, cr0, [r0], {-0}
     754:	00000108 	andeq	r0, r0, r8, lsl #2
     758:	0b98a701 	bleq	fe62a364 <BootRAM+0xd59ab05>
     75c:	00020800 	andeq	r0, r2, r0, lsl #16
     760:	9c010000 	stcls	0, cr0, [r1], {-0}
     764:	0004be1d 	andeq	fp, r4, sp, lsl lr
     768:	01570100 	cmpeq	r7, r0, lsl #2
     76c:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
     770:	00000002 	andeq	r0, r0, r2
     774:	9a1d9c01 	bls	767780 <__Stack_Size+0x766f80>
     778:	01000004 	tsteq	r0, r4
     77c:	0ba0015c 	bleq	fe800cf4 <BootRAM+0xd771495>
     780:	00020800 	andeq	r0, r2, r0, lsl #16
     784:	9c010000 	stcls	0, cr0, [r1], {-0}
     788:	0000da1e 	andeq	sp, r0, lr, lsl sl
     78c:	01930100 	orrseq	r0, r3, r0, lsl #2
     790:	00000250 	andeq	r0, r0, r0, asr r2
     794:	08000ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp}
     798:	0000000a 	andeq	r0, r0, sl
     79c:	06c39c01 	strbeq	r9, [r3], r1, lsl #24
     7a0:	631f0000 	tstvs	pc, #0
     7a4:	01000000 	mrseq	r0, (UNDEF: 0)
     7a8:	00960193 	umullseq	r0, r6, r3, r1
     7ac:	00000000 	andeq	r0, r0, r0
     7b0:	73200000 	teqvc	r0, #0
     7b4:	01000001 	tsteq	r0, r1
     7b8:	00960193 	umullseq	r0, r6, r3, r1
     7bc:	51010000 	mrspl	r0, (UNDEF: 1)
     7c0:	02061d00 	andeq	r1, r6, #0, 26
     7c4:	bf010000 	svclt	0x00010000
     7c8:	000bb001 	andeq	fp, fp, r1
     7cc:	00000208 	andeq	r0, r0, r8, lsl #4
     7d0:	1d9c0100 	ldfnes	f0, [ip]
     7d4:	00000153 	andeq	r0, r0, r3, asr r1
     7d8:	b401c401 	strlt	ip, [r1], #-1025	; 0x401
     7dc:	1808000b 	stmdane	r8, {r0, r1, r3}
     7e0:	01000000 	mrseq	r0, (UNDEF: 0)
     7e4:	06681d9c 			; <UNDEFINED> instruction: 0x06681d9c
     7e8:	cb010000 	blgt	407f0 <__Stack_Size+0x3fff0>
     7ec:	000bcc01 	andeq	ip, fp, r1, lsl #24
     7f0:	00000208 	andeq	r0, r0, r8, lsl #4
     7f4:	1d9c0100 	ldfnes	f0, [ip]
     7f8:	000004f7 	strdeq	r0, [r0], -r7
     7fc:	d001d001 	andle	sp, r1, r1
     800:	0208000b 	andeq	r0, r8, #11
     804:	01000000 	mrseq	r0, (UNDEF: 0)
     808:	084c1d9c 	stmdaeq	ip, {r2, r3, r4, r7, r8, sl, fp, ip}^
     80c:	d5010000 	strle	r0, [r1, #-0]
     810:	000bd401 	andeq	sp, fp, r1, lsl #8
     814:	00000208 	andeq	r0, r0, r8, lsl #4
     818:	1d9c0100 	ldfnes	f0, [ip]
     81c:	00000910 	andeq	r0, r0, r0, lsl r9
     820:	d801da01 	stmdale	r1, {r0, r9, fp, ip, lr, pc}
     824:	0208000b 	andeq	r0, r8, #11
     828:	01000000 	mrseq	r0, (UNDEF: 0)
     82c:	02271d9c 	eoreq	r1, r7, #156, 26	; 0x2700
     830:	df010000 	svcle	0x00010000
     834:	000bdc01 	andeq	sp, fp, r1, lsl #24
     838:	00000208 	andeq	r0, r0, r8, lsl #4
     83c:	1d9c0100 	ldfnes	f0, [ip]
     840:	00000859 	andeq	r0, r0, r9, asr r8
     844:	e001e401 	and	lr, r1, r1, lsl #8
     848:	0208000b 	andeq	r0, r8, #11
     84c:	01000000 	mrseq	r0, (UNDEF: 0)
     850:	01ac1d9c 			; <UNDEFINED> instruction: 0x01ac1d9c
     854:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
     858:	000be401 	andeq	lr, fp, r1, lsl #8
     85c:	00000c08 	andeq	r0, r0, r8, lsl #24
     860:	219c0100 	orrscs	r0, ip, r0, lsl #2
     864:	000004b5 			; <UNDEFINED> instruction: 0x000004b5
     868:	f0013d01 			; <UNDEFINED> instruction: 0xf0013d01
     86c:	a808000b 	stmdage	r8, {r0, r1, r3}
     870:	01000000 	mrseq	r0, (UNDEF: 0)
     874:	0007ea9c 	muleq	r7, ip, sl
     878:	00202200 	eoreq	r2, r0, r0, lsl #4
     87c:	07950000 	ldreq	r0, [r5, r0]
     880:	5e230000 	cdppl	0, 2, cr0, cr3, cr0, {0}
     884:	01000007 	tsteq	r0, r7
     888:	008b0148 	addeq	r0, fp, r8, asr #2
     88c:	00210000 	eoreq	r0, r1, r0
     890:	24000000 	strcs	r0, [r0], #-0
     894:	08000bf6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, fp}
     898:	00000e28 	andeq	r0, r0, r8, lsr #28
     89c:	000c5625 	andeq	r5, ip, r5, lsr #12
     8a0:	000e2f08 	andeq	r2, lr, r8, lsl #30
     8a4:	0007b200 	andeq	fp, r7, r0, lsl #4
     8a8:	50012600 	andpl	r2, r1, r0, lsl #12
     8ac:	00007402 	andeq	r7, r0, r2, lsl #8
     8b0:	000c6425 	andeq	r6, ip, r5, lsr #8
     8b4:	000e4108 	andeq	r4, lr, r8, lsl #2
     8b8:	0007c600 	andeq	ip, r7, r0, lsl #12
     8bc:	50012600 	andpl	r2, r1, r0, lsl #12
     8c0:	00007402 	andeq	r7, r0, r2, lsl #8
     8c4:	000c6a25 	andeq	r6, ip, r5, lsr #20
     8c8:	000e5808 	andeq	r5, lr, r8, lsl #16
     8cc:	0007da00 	andeq	sp, r7, r0, lsl #20
     8d0:	50012600 	andpl	r2, r1, r0, lsl #12
     8d4:	00007402 	andeq	r7, r0, r2, lsl #8
     8d8:	000c7a27 	andeq	r7, ip, r7, lsr #20
     8dc:	000e6a08 	andeq	r6, lr, r8, lsl #20
     8e0:	50012600 	andpl	r2, r1, r0, lsl #12
     8e4:	00003001 	andeq	r3, r0, r1
     8e8:	0007ea1e 	andeq	lr, r7, lr, lsl sl
     8ec:	01610100 	cmneq	r1, r0, lsl #2
     8f0:	00000250 	andeq	r0, r0, r0, asr r2
     8f4:	08000c98 	stmdaeq	r0, {r3, r4, r7, sl, fp}
     8f8:	00000074 	andeq	r0, r0, r4, ror r0
     8fc:	083a9c01 	ldmdaeq	sl!, {r0, sl, fp, ip, pc}
     900:	f71f0000 			; <UNDEFINED> instruction: 0xf71f0000
     904:	01000005 	tsteq	r0, r5
     908:	00960161 	addseq	r0, r6, r1, ror #2
     90c:	00700000 	rsbseq	r0, r0, r0
     910:	0e230000 	cdpeq	0, 2, cr0, cr3, cr0, {0}
     914:	01000006 	tsteq	r0, r6
     918:	02a70162 	adceq	r0, r7, #-2147483624	; 0x80000018
     91c:	00aa0000 	adceq	r0, sl, r0
     920:	b2240000 	eorlt	r0, r4, #0
     924:	7b08000c 	blvc	20095c <__Stack_Size+0x20015c>
     928:	2800000e 	stmdacs	r0, {r1, r2, r3}
     92c:	08000ce6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, fp}
     930:	02500126 	subseq	r0, r0, #-2147483639	; 0x80000009
     934:	00000074 	andeq	r0, r0, r4, ror r0
     938:	0002d41e 	andeq	sp, r2, lr, lsl r4
     93c:	019d0100 	orrseq	r0, sp, r0, lsl #2
     940:	00000209 	andeq	r0, r0, r9, lsl #4
     944:	08000d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp}
     948:	0000000c 	andeq	r0, r0, ip
     94c:	086e9c01 	stmdaeq	lr!, {r0, sl, fp, ip, pc}^
     950:	6c290000 	stcvs	0, cr0, [r9], #-0
     954:	01006e65 	tsteq	r0, r5, ror #28
     958:	008b019d 	umulleq	r0, fp, sp, r1
     95c:	00d50000 	sbcseq	r0, r5, r0
     960:	122a0000 	eorne	r0, sl, #0
     964:	8608000d 	strhi	r0, [r8], -sp
     968:	0000000e 	andeq	r0, r0, lr
     96c:	0003b61e 	andeq	fp, r3, lr, lsl r6
     970:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
     974:	00000209 	andeq	r0, r0, r9, lsl #4
     978:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
     97c:	0000000c 	andeq	r0, r0, ip
     980:	08a29c01 	stmiaeq	r2!, {r0, sl, fp, ip, pc}
     984:	6c290000 	stcvs	0, cr0, [r9], #-0
     988:	01006e65 	tsteq	r0, r5, ror #28
     98c:	008b01a2 	addeq	r0, fp, r2, lsr #3
     990:	00f60000 	rscseq	r0, r6, r0
     994:	1e2a0000 	cdpne	0, 2, cr0, cr10, cr0, {0}
     998:	8608000d 	strhi	r0, [r8], -sp
     99c:	0000000e 	andeq	r0, r0, lr
     9a0:	0001c01e 	andeq	ip, r1, lr, lsl r0
     9a4:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     9a8:	00000209 	andeq	r0, r0, r9, lsl #4
     9ac:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
     9b0:	00000020 	andeq	r0, r0, r0, lsr #32
     9b4:	08e29c01 	stmiaeq	r2!, {r0, sl, fp, ip, pc}^
     9b8:	6c290000 	stcvs	0, cr0, [r9], #-0
     9bc:	01006e65 	tsteq	r0, r5, ror #28
     9c0:	008b01a7 	addeq	r0, fp, r7, lsr #3
     9c4:	01170000 	tsteq	r7, r0
     9c8:	211b0000 	tstcs	fp, r0
     9cc:	01000000 	mrseq	r0, (UNDEF: 0)
     9d0:	009601a9 	addseq	r0, r6, r9, lsr #3
     9d4:	382a0000 	stmdacc	sl!, {}	; <UNPREDICTABLE>
     9d8:	8608000d 	strhi	r0, [r8], -sp
     9dc:	0000000e 	andeq	r0, r0, lr
     9e0:	00033f1e 	andeq	r3, r3, lr, lsl pc
     9e4:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
     9e8:	00000209 	andeq	r0, r0, r9, lsl #4
     9ec:	08000d44 	stmdaeq	r0, {r2, r6, r8, sl, fp}
     9f0:	0000000c 	andeq	r0, r0, ip
     9f4:	09169c01 	ldmdbeq	r6, {r0, sl, fp, ip, pc}
     9f8:	6c290000 	stcvs	0, cr0, [r9], #-0
     9fc:	01006e65 	tsteq	r0, r5, ror #28
     a00:	008b01b1 			; <UNDEFINED> instruction: 0x008b01b1
     a04:	01510000 	cmpeq	r1, r0
     a08:	4a2a0000 	bmi	a80a10 <__Stack_Size+0xa80210>
     a0c:	8608000d 	strhi	r0, [r8], -sp
     a10:	0000000e 	andeq	r0, r0, lr
     a14:	0005e52b 	andeq	lr, r5, fp, lsr #10
     a18:	000d5000 	andeq	r5, sp, r0
     a1c:	00002808 	andeq	r2, r0, r8, lsl #16
     a20:	509c0100 	addspl	r0, ip, r0, lsl #2
     a24:	2c000009 	stccs	0, cr0, [r0], {9}
     a28:	000005f6 	strdeq	r0, [r0], -r6
     a2c:	00000172 	andeq	r0, r0, r2, ror r1
     a30:	000d642d 	andeq	r6, sp, sp, lsr #8
     a34:	00001408 	andeq	r1, r0, r8, lsl #8
     a38:	05f62e00 	ldrbeq	r2, [r6, #3584]!	; 0xe00
     a3c:	f3040000 	vhadd.u8	d0, d4, d0
     a40:	249f5001 	ldrcs	r5, [pc], #1	; a48 <__Stack_Size+0x248>
     a44:	08000d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp}
     a48:	00000e7b 	andeq	r0, r0, fp, ror lr
     a4c:	4c2f0000 	stcmi	0, cr0, [pc], #-0	; a54 <__Stack_Size+0x254>
     a50:	01000004 	tsteq	r0, r4
     a54:	000250fc 	strdeq	r5, [r2], -ip
     a58:	5b210100 	blpl	840e60 <__Stack_Size+0x840660>
     a5c:	01000000 	mrseq	r0, (UNDEF: 0)
     a60:	0d78012d 	ldfeqe	f0, [r8, #-180]!	; 0xffffff4c
     a64:	008c0800 	addeq	r0, ip, r0, lsl #16
     a68:	9c010000 	stcls	0, cr0, [r1], {-0}
     a6c:	000009e2 	andeq	r0, r0, r2, ror #19
     a70:	00095030 	andeq	r5, r9, r0, lsr r0
     a74:	000d8800 	andeq	r8, sp, r0, lsl #16
     a78:	00003808 	andeq	r3, r0, r8, lsl #16
     a7c:	01320100 	teqeq	r2, r0, lsl #2
     a80:	000009a5 	andeq	r0, r0, r5, lsr #19
     a84:	000db831 	andeq	fp, sp, r1, lsr r8
     a88:	000ea008 	andeq	sl, lr, r8
     a8c:	52012600 	andpl	r2, r1, #0, 12
     a90:	26007602 	strcs	r7, [r0], -r2, lsl #12
     a94:	3c015101 	stfccs	f5, [r1], {1}
     a98:	05500126 	ldrbeq	r0, [r0, #-294]	; 0x126
     a9c:	0108000c 	tsteq	r8, ip
     aa0:	30000040 	andcc	r0, r0, r0, asr #32
     aa4:	00000623 	andeq	r0, r0, r3, lsr #12
     aa8:	08000dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp}
     aac:	00000050 	andeq	r0, r0, r0, asr r0
     ab0:	d8013901 	stmdale	r1, {r0, r8, fp, ip, sp}
     ab4:	32000009 	andcc	r0, r0, #9
     ab8:	00000050 	andeq	r0, r0, r0, asr r0
     abc:	00063033 	andeq	r3, r6, r3, lsr r0
     ac0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     ac4:	000ddc31 	andeq	sp, sp, r1, lsr ip
     ac8:	000ebc08 	andeq	fp, lr, r8, lsl #24
     acc:	50012600 	andpl	r2, r1, r0, lsl #12
     ad0:	00649102 	rsbeq	r9, r4, r2, lsl #2
     ad4:	82240000 	eorhi	r0, r4, #0
     ad8:	d408000d 	strle	r0, [r8], #-13
     adc:	0000000e 	andeq	r0, r0, lr
     ae0:	0007d234 	andeq	sp, r7, r4, lsr r2
     ae4:	046c0100 	strbteq	r0, [ip], #-256	; 0x100
     ae8:	7008000e 	andvc	r0, r8, lr
     aec:	01000000 	mrseq	r0, (UNDEF: 0)
     af0:	000a609c 	muleq	sl, ip, r0
     af4:	06803500 	streq	r3, [r0], r0, lsl #10
     af8:	8d010000 	stchi	0, cr0, [r1, #-0]
     afc:	00000a60 	andeq	r0, r0, r0, ror #20
     b00:	366c9102 	strbtcc	r9, [ip], -r2, lsl #2
     b04:	00000603 	andeq	r0, r0, r3, lsl #12
     b08:	08000e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp}
     b0c:	00000004 	andeq	r0, r0, r4
     b10:	0a229c01 	beq	8a7b1c <__Stack_Size+0x8a731c>
     b14:	5c240000 	stcpl	0, cr0, [r4], #-0
     b18:	db08000e 	blle	200b58 <__Stack_Size+0x200358>
     b1c:	0000000e 	andeq	r0, r0, lr
     b20:	000e1425 	andeq	r1, lr, r5, lsr #8
     b24:	000ea008 	andeq	sl, lr, r8
     b28:	000a4300 	andeq	r4, sl, r0, lsl #6
     b2c:	52012600 	andpl	r2, r1, #0, 12
     b30:	01263001 	teqeq	r6, r1
     b34:	263c0151 			; <UNDEFINED> instruction: 0x263c0151
     b38:	0c055001 	stceq	0, cr5, [r5], {1}
     b3c:	40010800 	andmi	r0, r1, r0, lsl #16
     b40:	0e1c2500 	cfmul32eq	mvfx2, mvfx12, mvfx0
     b44:	0ee20800 	cdpeq	8, 14, cr0, cr2, cr0, {0}
     b48:	0a560000 	beq	1580b50 <__Stack_Size+0x1580350>
     b4c:	01260000 	teqeq	r6, r0
     b50:	003c0150 	eorseq	r0, ip, r0, asr r1
     b54:	000e3e24 	andeq	r3, lr, r4, lsr #28
     b58:	000ef808 	andeq	pc, lr, r8, lsl #16
     b5c:	80080000 	andhi	r0, r8, r0
     b60:	37000000 	strcc	r0, [r0, -r0]
     b64:	00000645 	andeq	r0, r0, r5, asr #12
     b68:	50011401 	andpl	r1, r1, r1, lsl #8
     b6c:	01000002 	tsteq	r0, r2
     b70:	00056734 	andeq	r6, r5, r4, lsr r7
     b74:	74a00100 	strtvc	r0, [r0], #256	; 0x100
     b78:	3808000e 	stmdacc	r8, {r1, r2, r3}
     b7c:	01000000 	mrseq	r0, (UNDEF: 0)
     b80:	000ab59c 	muleq	sl, ip, r5
     b84:	0a653800 	beq	194eb8c <__Stack_Size+0x194e38c>
     b88:	0e740000 	cdpeq	0, 7, cr0, cr4, cr0, {0}
     b8c:	00700800 	rsbseq	r0, r0, r0, lsl #16
     b90:	a2010000 	andge	r0, r1, #0
     b94:	000e9431 	andeq	r9, lr, r1, lsr r4
     b98:	000ea008 	andeq	sl, lr, r8
     b9c:	52012600 	andpl	r2, r1, #0, 12
     ba0:	01263001 	teqeq	r6, r1
     ba4:	263c0151 			; <UNDEFINED> instruction: 0x263c0151
     ba8:	0c055001 	stceq	0, cr5, [r5], {1}
     bac:	40010800 	andmi	r0, r1, r0, lsl #16
     bb0:	2b000000 	blcs	bb8 <__Stack_Size+0x3b8>
     bb4:	00000603 	andeq	r0, r0, r3, lsl #12
     bb8:	00000000 	andeq	r0, r0, r0
     bbc:	00000004 	andeq	r0, r0, r4
     bc0:	0ad29c01 	beq	ff4a7bcc <BootRAM+0xe41836d>
     bc4:	002a0000 	eoreq	r0, sl, r0
     bc8:	db000000 	blle	bd0 <__Stack_Size+0x3d0>
     bcc:	0000000e 	andeq	r0, r0, lr
     bd0:	00063d2b 	andeq	r3, r6, fp, lsr #26
     bd4:	00000000 	andeq	r0, r0, r0
     bd8:	00001c00 	andeq	r1, r0, r0, lsl #24
     bdc:	ef9c0100 	svc	0x009c0100
     be0:	3900000a 	stmdbcc	r0, {r1, r3}
     be4:	00000649 	andeq	r0, r0, r9, asr #12
     be8:	000001ac 	andeq	r0, r0, ip, lsr #3
     bec:	060b2b00 	streq	r2, [fp], -r0, lsl #22
     bf0:	00000000 	andeq	r0, r0, r0
     bf4:	00180000 	andseq	r0, r8, r0
     bf8:	9c010000 	stcls	0, cr0, [r1], {-0}
     bfc:	00000b0f 	andeq	r0, r0, pc, lsl #22
     c00:	00061733 	andeq	r1, r6, r3, lsr r7
     c04:	00700600 	rsbseq	r0, r0, r0, lsl #12
     c08:	9f1afb09 	svcls	0x001afb09
     c0c:	047d3400 	ldrbteq	r3, [sp], #-1024	; 0x400
     c10:	cb010000 	blgt	40c18 <__Stack_Size+0x40418>
     c14:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
     c18:	000000c8 	andeq	r0, r0, r8, asr #1
     c1c:	0b859c01 	bleq	fe167c28 <BootRAM+0xd0d83c9>
     c20:	263a0000 	ldrtcs	r0, [sl], -r0
     c24:	01000008 	tsteq	r0, r8
     c28:	000573cb 	andeq	r7, r5, fp, asr #7
     c2c:	0001c300 	andeq	ip, r1, r0, lsl #6
     c30:	05613b00 	strbeq	r3, [r1, #-2816]!	; 0xb00
     c34:	cd010000 	stcgt	0, cr0, [r1, #-0]
     c38:	0000008b 	andeq	r0, r0, fp, lsl #1
     c3c:	0000023a 	andeq	r0, r0, sl, lsr r2
     c40:	00060b3c 	andeq	r0, r6, ip, lsr fp
     c44:	000eea00 	andeq	lr, lr, r0, lsl #20
     c48:	00008808 	andeq	r8, r0, r8, lsl #16
     c4c:	65d40100 	ldrbvs	r0, [r4, #256]	; 0x100
     c50:	3200000b 	andcc	r0, r0, #11
     c54:	00000088 	andeq	r0, r0, r8, lsl #1
     c58:	00061739 	andeq	r1, r6, r9, lsr r7
     c5c:	00026100 	andeq	r6, r2, r0, lsl #2
     c60:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     c64:	0000060b 	andeq	r0, r0, fp, lsl #12
     c68:	08000f06 	stmdaeq	r0, {r1, r2, r8, r9, sl, fp}
     c6c:	000000a0 	andeq	r0, r0, r0, lsr #1
     c70:	a032d801 	eorsge	sp, r2, r1, lsl #16
     c74:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
     c78:	00000617 	andeq	r0, r0, r7, lsl r6
     c7c:	00000279 	andeq	r0, r0, r9, ror r2
     c80:	2b000000 	blcs	c88 <__Stack_Size+0x488>
     c84:	00000950 	andeq	r0, r0, r0, asr r9
     c88:	00000000 	andeq	r0, r0, r0
     c8c:	00000048 	andeq	r0, r0, r8, asr #32
     c90:	0bb69c01 	bleq	feda7c9c <BootRAM+0xdd1843d>
     c94:	00310000 	eorseq	r0, r1, r0
     c98:	a0000000 	andge	r0, r0, r0
     c9c:	2600000e 	strcs	r0, [r0], -lr
     ca0:	31015201 	tstcc	r1, r1, lsl #4
     ca4:	01510126 	cmpeq	r1, r6, lsr #2
     ca8:	5001263c 	andpl	r2, r1, ip, lsr r6
     cac:	08000c05 	stmdaeq	r0, {r0, r2, sl, fp}
     cb0:	00004001 	andeq	r4, r0, r1
     cb4:	000a652b 	andeq	r6, sl, fp, lsr #10
     cb8:	00000000 	andeq	r0, r0, r0
     cbc:	00003c00 	andeq	r3, r0, r0, lsl #24
     cc0:	e89c0100 	ldm	ip, {r8}
     cc4:	3100000b 	tstcc	r0, fp
     cc8:	00000000 	andeq	r0, r0, r0
     ccc:	00000ea0 	andeq	r0, r0, r0, lsr #29
     cd0:	02520126 	subseq	r0, r2, #-2147483639	; 0x80000009
     cd4:	01260074 	teqeq	r6, r4, ror r0
     cd8:	263c0151 			; <UNDEFINED> instruction: 0x263c0151
     cdc:	0c055001 	stceq	0, cr5, [r5], {1}
     ce0:	40010800 	andmi	r0, r1, r0, lsl #16
     ce4:	232b0000 	teqcs	fp, #0
     ce8:	74000006 	strvc	r0, [r0], #-6
     cec:	1c08000f 	stcne	0, cr0, [r8], {15}
     cf0:	01000000 	mrseq	r0, (UNDEF: 0)
     cf4:	000c149c 	muleq	ip, ip, r4
     cf8:	06303300 	ldrteq	r3, [r0], -r0, lsl #6
     cfc:	91020000 	mrsls	r0, (UNDEF: 2)
     d00:	0f843174 	svceq	0x00843174
     d04:	0ebc0800 	cdpeq	8, 11, cr0, cr12, cr0, {0}
     d08:	01260000 	teqeq	r6, r0
     d0c:	74910250 	ldrvc	r0, [r1], #592	; 0x250
     d10:	80210000 	eorhi	r0, r1, r0
     d14:	01000000 	mrseq	r0, (UNDEF: 0)
     d18:	0f9001fb 	svceq	0x009001fb
     d1c:	00160800 	andseq	r0, r6, r0, lsl #16
     d20:	9c010000 	stcls	0, cr0, [r1], {-0}
     d24:	00000c4a 	andeq	r0, r0, sl, asr #24
     d28:	0004013d 	andeq	r0, r4, sp, lsr r1
     d2c:	01fd0100 	mvnseq	r0, r0, lsl #2
     d30:	00000129 	andeq	r0, r0, r9, lsr #2
     d34:	31749102 	cmncc	r4, r2, lsl #2
     d38:	08000fa0 	stmdaeq	r0, {r5, r7, r8, r9, sl, fp}
     d3c:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
     d40:	02500126 	subseq	r0, r0, #-2147483639	; 0x80000009
     d44:	00007491 	muleq	r0, r1, r4
     d48:	0000bf3e 	andeq	fp, r0, lr, lsr pc
     d4c:	02050100 	andeq	r0, r5, #0, 2
     d50:	08000fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp}
     d54:	000000e4 	andeq	r0, r0, r4, ror #1
     d58:	0cb49c01 	ldceq	12, cr9, [r4], #4
     d5c:	3d300000 	ldccc	0, cr0, [r0, #-0]
     d60:	f0000006 			; <UNDEFINED> instruction: 0xf0000006
     d64:	b808000f 	stmdalt	r8, {r0, r1, r2, r3}
     d68:	01000000 	mrseq	r0, (UNDEF: 0)
     d6c:	0c840236 	sfmeq	f0, 4, [r4], {54}	; 0x36
     d70:	b8320000 	ldmdalt	r2!, {}	; <UNPREDICTABLE>
     d74:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
     d78:	00000649 	andeq	r0, r0, r9, asr #12
     d7c:	00000291 	muleq	r0, r1, r2
     d80:	443f0000 	ldrtmi	r0, [pc], #-0	; d88 <__Stack_Size+0x588>
     d84:	0f080010 	svceq	0x00080010
     d88:	9700000b 	strls	r0, [r0, -fp]
     d8c:	2600000c 	strcs	r0, [r0], -ip
     d90:	37015001 	strcc	r5, [r1, -r1]
     d94:	10522500 	subsne	r2, r2, r0, lsl #10
     d98:	0b0f0800 	bleq	3c2da0 <__Stack_Size+0x3c25a0>
     d9c:	0caa0000 	stceq	0, cr0, [sl]
     da0:	01260000 	teqeq	r6, r0
     da4:	00300150 	eorseq	r0, r0, r0, asr r1
     da8:	00106c24 	andseq	r6, r0, r4, lsr #24
     dac:	000f0408 	andeq	r0, pc, r8, lsl #8
     db0:	43400000 	movtmi	r0, #0
     db4:	01000005 	tsteq	r0, r5
     db8:	05af0255 	streq	r0, [pc, #597]!	; 1015 <__Stack_Size+0x815>
     dbc:	00000000 	andeq	r0, r0, r0
     dc0:	000c0000 	andeq	r0, ip, r0
     dc4:	9c010000 	stcls	0, cr0, [r1], {-0}
     dc8:	00041441 	andeq	r1, r4, r1, asr #8
     dcc:	d9690100 	stmdble	r9!, {r8}^
     dd0:	0000000c 	andeq	r0, r0, ip
     dd4:	42400210 	submi	r0, r0, #16, 4
     dd8:	00000cde 	ldrdeq	r0, [r0], -lr
     ddc:	01b40404 			; <UNDEFINED> instruction: 0x01b40404
     de0:	02430000 	subeq	r0, r3, #0
     de4:	01000008 	tsteq	r0, r8
     de8:	0000b02b 	andeq	fp, r0, fp, lsr #32
     dec:	74030500 	strvc	r0, [r3], #-1280	; 0x500
     df0:	43200004 	teqmi	r0, #4
     df4:	000002eb 	andeq	r0, r0, fp, ror #5
     df8:	04a73301 	strteq	r3, [r7], #769	; 0x301
     dfc:	03050000 	movweq	r0, #20480	; 0x5000
     e00:	20000014 	andcs	r0, r0, r4, lsl r0
     e04:	001f0143 	andseq	r0, pc, r3, asr #2
     e08:	2b430100 	blcs	10c1210 <__Stack_Size+0x10c0a10>
     e0c:	05000005 	streq	r0, [r0, #-5]
     e10:	00008003 	andeq	r8, r0, r3
     e14:	021a4320 	andseq	r4, sl, #32, 6	; 0x80000000
     e18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     e1c:	000002dd 	ldrdeq	r0, [r0], -sp
     e20:	00a40305 	adceq	r0, r4, r5, lsl #6
     e24:	e8442000 	stmda	r4, {sp}^
     e28:	07000001 	streq	r0, [r0, -r1]
     e2c:	000d3322 	andeq	r3, sp, r2, lsr #6
     e30:	c4040400 	strgt	r0, [r4], #-1024	; 0x400
     e34:	44000003 	strmi	r0, [r0], #-3
     e38:	0000013e 	andeq	r0, r0, lr, lsr r1
     e3c:	0d442507 	cfstr64eq	mvdx2, [r4, #-28]	; 0xffffffe4
     e40:	04040000 	streq	r0, [r4], #-0
     e44:	000004a7 	andeq	r0, r0, r7, lsr #9
     e48:	00051d44 	andeq	r1, r5, r4, asr #26
     e4c:	8b2d0700 	blhi	b42a54 <__Stack_Size+0xb42254>
     e50:	44000000 	strmi	r0, [r0], #-0
     e54:	00000a27 	andeq	r0, r0, r7, lsr #20
     e58:	020f2308 	andeq	r2, pc, #8, 6	; 0x20000000
     e5c:	44440000 	strbmi	r0, [r4], #-0
     e60:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     e64:	00020f24 	andeq	r0, r2, r4, lsr #30
     e68:	020f4500 	andeq	r4, pc, #0, 10
     e6c:	0d7b0000 	ldcleq	0, cr0, [fp, #-0]
     e70:	6b460000 	blvs	1180e78 <__Stack_Size+0x1180678>
     e74:	06000000 	streq	r0, [r0], -r0
     e78:	03d74400 	bicseq	r4, r7, #0, 8
     e7c:	25080000 	strcs	r0, [r8, #-0]
     e80:	00000d6b 	andeq	r0, r0, fp, ror #26
     e84:	0007a844 	andeq	sl, r7, r4, asr #16
     e88:	0f260800 	svceq	0x00260800
     e8c:	43000002 	movwmi	r0, #2
     e90:	000000b1 	strheq	r0, [r0], -r1
     e94:	002c2c06 	eoreq	r2, ip, r6, lsl #24
     e98:	03050000 	movweq	r0, #20480	; 0x5000
     e9c:	20000470 	andcs	r0, r0, r0, ror r4
     ea0:	00009645 	andeq	r9, r0, r5, asr #12
     ea4:	000dad00 	andeq	sl, sp, r0, lsl #26
     ea8:	44004700 	strmi	r4, [r0], #-1792	; 0x700
     eac:	00000041 	andeq	r0, r0, r1, asr #32
     eb0:	0da22501 	cfstr32eq	mvfx2, [r2, #4]!
     eb4:	a5440000 	strbge	r0, [r4, #-0]
     eb8:	01000007 	tsteq	r0, r7
     ebc:	000da226 	andeq	sl, sp, r6, lsr #4
     ec0:	02fb4300 	rscseq	r4, fp, #0, 6
     ec4:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
     ec8:	000000a0 	andeq	r0, r0, r0, lsr #1
     ecc:	05a40305 	streq	r0, [r4, #773]!	; 0x305
     ed0:	39432000 	stmdbcc	r3, {sp}^
     ed4:	01000006 	tsteq	r0, r6
     ed8:	0000c02c 	andeq	ip, r0, ip, lsr #32
     edc:	a0030500 	andge	r0, r3, r0, lsl #10
     ee0:	45200005 	strmi	r0, [r0, #-5]!
     ee4:	00000072 	andeq	r0, r0, r2, ror r0
     ee8:	00000df5 	strdeq	r0, [r0], -r5
     eec:	00006b46 	andeq	r6, r0, r6, asr #22
     ef0:	43000600 	movwmi	r0, #1536	; 0x600
     ef4:	000009b3 			; <UNDEFINED> instruction: 0x000009b3
     ef8:	0de54f01 	stcleq	15, cr4, [r5, #4]!
     efc:	03050000 	movweq	r0, #20480	; 0x5000
     f00:	20000048 	andcs	r0, r0, r8, asr #32
     f04:	00096543 	andeq	r6, r9, r3, asr #10
     f08:	e5590100 	ldrb	r0, [r9, #-256]	; 0x100
     f0c:	0500000d 	streq	r0, [r0, #-13]
     f10:	00006403 	andeq	r6, r0, r3, lsl #8
     f14:	06784320 	ldrbteq	r4, [r8], -r0, lsr #6
     f18:	66010000 	strvs	r0, [r1], -r0
     f1c:	000005ba 			; <UNDEFINED> instruction: 0x000005ba
     f20:	04780305 	ldrbteq	r0, [r8], #-773	; 0x305
     f24:	3b482000 	blcc	1208f2c <__Stack_Size+0x120872c>
     f28:	09000008 	stmdbeq	r0, {r3}
     f2c:	0794496e 	ldreq	r4, [r4, lr, ror #18]
     f30:	460a0000 	strmi	r0, [sl], -r0
     f34:	000e4102 	andeq	r4, lr, r2, lsl #2
     f38:	00961100 	addseq	r1, r6, r0, lsl #2
     f3c:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
     f40:	0000099c 	muleq	r0, ip, r9
     f44:	5802570a 	stmdapl	r2, {r1, r3, r8, r9, sl, ip, lr}
     f48:	1100000e 	tstne	r0, lr
     f4c:	00000096 	muleq	r0, r6, r0
     f50:	00008b11 	andeq	r8, r0, r1, lsl fp
     f54:	7f490000 	svcvc	0x00490000
     f58:	0a000003 	beq	f6c <__Stack_Size+0x76c>
     f5c:	0e6a0240 	cdpeq	2, 6, cr0, cr10, cr0, {2}
     f60:	96110000 	ldrls	r0, [r1], -r0
     f64:	00000000 	andeq	r0, r0, r0
     f68:	0002b24a 	andeq	fp, r2, sl, asr #4
     f6c:	7be90400 	blvc	ffa41f74 <BootRAM+0xe9b2715>
     f70:	1100000e 	tstne	r0, lr
     f74:	00000096 	muleq	r0, r6, r0
     f78:	04874b00 	streq	r4, [r7], #2816	; 0xb00
     f7c:	6d090000 	stcvs	0, cr0, [r9, #-0]
     f80:	000000e5 	andeq	r0, r0, r5, ror #1
     f84:	0002644c 	andeq	r6, r2, ip, asr #8
     f88:	09e50400 	stmibeq	r5!, {sl}^
     f8c:	a0000002 	andge	r0, r0, r2
     f90:	1100000e 	tstne	r0, lr
     f94:	0000008b 	andeq	r0, r0, fp, lsl #1
     f98:	00021a11 	andeq	r1, r2, r1, lsl sl
     f9c:	db490000 	blle	1240fa4 <__Stack_Size+0x12407a4>
     fa0:	03000007 	movweq	r0, #7
     fa4:	0ebc011f 	mrceq	1, 5, r0, cr12, cr15, {0}
     fa8:	80110000 	andshi	r0, r1, r0
     fac:	11000000 	mrsne	r0, (UNDEF: 0)
     fb0:	00000096 	muleq	r0, r6, r0
     fb4:	00009611 	andeq	r9, r0, r1, lsl r6
     fb8:	e1490000 	mrs	r0, (UNDEF: 73)
     fbc:	03000009 	movweq	r0, #9
     fc0:	0ece0134 	mcreq	1, 6, r0, cr14, cr4, {1}
     fc4:	ce110000 	cdpgt	0, 1, cr0, cr1, cr0, {0}
     fc8:	0000000e 	andeq	r0, r0, lr
     fcc:	01290404 	teqeq	r9, r4, lsl #8
     fd0:	bd480000 	stcllt	0, cr0, [r8, #-0]
     fd4:	09000009 	stmdbeq	r0, {r0, r3}
     fd8:	0292486a 	addseq	r4, r2, #6946816	; 0x6a0000
     fdc:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
     fe0:	00027f4d 	andeq	r7, r2, sp, asr #30
     fe4:	01200300 	teqeq	r0, r0, lsl #6
     fe8:	00000025 	andeq	r0, r0, r5, lsr #32
     fec:	00000ef8 	strdeq	r0, [r0], -r8
     ff0:	00002c11 	andeq	r2, r0, r1, lsl ip
     ff4:	5f4e0000 	svcpl	0x004e0000
     ff8:	03000003 	movweq	r0, #3
     ffc:	002c0138 	eoreq	r0, ip, r8, lsr r1
    1000:	34480000 	strbcc	r0, [r8], #-0
    1004:	0b000008 	bleq	102c <__Stack_Size+0x82c>
    1008:	0259001a 	subseq	r0, r9, #26
    100c:	00040000 	andeq	r0, r4, r0
    1010:	000004a9 	andeq	r0, r0, r9, lsr #9
    1014:	06c00104 	strbeq	r0, [r0], r4, lsl #2
    1018:	9a010000 	bls	41020 <__Stack_Size+0x40820>
    101c:	9300000a 	movwls	r0, #10
    1020:	b3000008 	movwlt	r0, #8
    1024:	02000005 	andeq	r0, r0, #5
    1028:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    102c:	04030074 	streq	r0, [r3], #-116	; 0x74
    1030:	00025707 	andeq	r5, r2, r7, lsl #14
    1034:	06010300 	streq	r0, [r1], -r0, lsl #6
    1038:	0000081a 	andeq	r0, r0, sl, lsl r8
    103c:	18080103 	stmdane	r8, {r0, r1, r8}
    1040:	03000008 	movweq	r0, #8
    1044:	065e0502 	ldrbeq	r0, [lr], -r2, lsl #10
    1048:	02030000 	andeq	r0, r3, #0
    104c:	00094907 	andeq	r4, r9, r7, lsl #18
    1050:	05040300 	streq	r0, [r4, #-768]	; 0x300
    1054:	000004da 	ldrdeq	r0, [r0], -sl
    1058:	52070403 	andpl	r0, r7, #50331648	; 0x3000000
    105c:	03000002 	movweq	r0, #2
    1060:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
    1064:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1068:	00024d07 	andeq	r4, r2, r7, lsl #26
    106c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1070:	0000078b 	andeq	r0, r0, fp, lsl #15
    1074:	21080103 	tstcs	r8, r3, lsl #2
    1078:	04000008 	streq	r0, [r0], #-8
    107c:	00363175 	eorseq	r3, r6, r5, ror r1
    1080:	00402801 	subeq	r2, r0, r1, lsl #16
    1084:	75040000 	strvc	r0, [r4, #-0]
    1088:	29010038 	stmdbcs	r1, {r3, r4, r5}
    108c:	00000032 	andeq	r0, r0, r2, lsr r0
    1090:	00003305 	andeq	r3, r0, r5, lsl #6
    1094:	24020800 	strcs	r0, [r2], #-2048	; 0x800
    1098:	000000ab 	andeq	r0, r0, fp, lsr #1
    109c:	0002e006 	andeq	lr, r2, r6
    10a0:	ab260200 	blge	9818a8 <__Stack_Size+0x9810a8>
    10a4:	00000000 	andeq	r0, r0, r0
    10a8:	0003f106 	andeq	pc, r3, r6, lsl #2
    10ac:	71270200 	teqvc	r7, r0, lsl #4
    10b0:	04000000 	streq	r0, [r0], #-0
    10b4:	7c040700 	stcvc	7, cr0, [r4], {-0}
    10b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    10bc:	00000572 	andeq	r0, r0, r2, ror r5
    10c0:	00862902 	addeq	r2, r6, r2, lsl #18
    10c4:	b1090000 	mrslt	r0, (UNDEF: 9)
    10c8:	03000000 	movweq	r0, #0
    10cc:	00001d2c 	andeq	r1, r0, ip, lsr #26
    10d0:	70030500 	andvc	r0, r3, r0, lsl #10
    10d4:	09200004 	stmdbeq	r0!, {r2}
    10d8:	00000a27 	andeq	r0, r0, r7, lsr #20
    10dc:	00b13d04 	adcseq	r3, r1, r4, lsl #26
    10e0:	03050000 	movweq	r0, #20480	; 0x5000
    10e4:	20000160 	andcs	r0, r0, r0, ror #2
    10e8:	00004409 	andeq	r4, r0, r9, lsl #8
    10ec:	b1970400 	orrslt	r0, r7, r0, lsl #8
    10f0:	05000000 	streq	r0, [r0, #-0]
    10f4:	0002bc03 	andeq	fp, r2, r3, lsl #24
    10f8:	00b10a20 	adcseq	r0, r1, r0, lsr #20
    10fc:	00ff0000 	rscseq	r0, pc, r0
    1100:	630b0000 	movwvs	r0, #45056	; 0xb000
    1104:	06000000 	streq	r0, [r0], -r0
    1108:	03d70900 	bicseq	r0, r7, #0, 18
    110c:	cc040000 	stcgt	0, cr0, [r4], {-0}
    1110:	000000ef 	andeq	r0, r0, pc, ror #1
    1114:	00a80305 	adceq	r0, r8, r5, lsl #6
    1118:	a8092000 	stmdage	r9, {sp}
    111c:	04000007 	streq	r0, [r0], #-7
    1120:	0000b14f 	andeq	fp, r0, pc, asr #2
    1124:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    1128:	0a200000 	beq	801130 <__Stack_Size+0x800930>
    112c:	0000007c 	andeq	r0, r0, ip, ror r0
    1130:	00000131 	andeq	r0, r0, r1, lsr r1
    1134:	0000630b 	andeq	r6, r0, fp, lsl #6
    1138:	09001100 	stmdbeq	r0, {r8, ip}
    113c:	00000a24 	andeq	r0, r0, r4, lsr #20
    1140:	01212604 	teqeq	r1, r4, lsl #12
    1144:	03050000 	movweq	r0, #20480	; 0x5000
    1148:	200000e0 	andcs	r0, r0, r0, ror #1
    114c:	00007c0a 	andeq	r7, r0, sl, lsl #24
    1150:	00015200 	andeq	r5, r1, r0, lsl #4
    1154:	00630b00 	rsbeq	r0, r3, r0, lsl #22
    1158:	00080000 	andeq	r0, r8, r0
    115c:	0007a509 	andeq	sl, r7, r9, lsl #10
    1160:	42420400 	submi	r0, r2, #0, 8
    1164:	05000001 	streq	r0, [r0, #-1]
    1168:	00014003 	andeq	r4, r1, r3
    116c:	007c0a20 	rsbseq	r0, ip, r0, lsr #20
    1170:	01730000 	cmneq	r3, r0
    1174:	630b0000 	movwvs	r0, #45056	; 0xb000
    1178:	2c000000 	stccs	0, cr0, [r0], {-0}
    117c:	00410900 	subeq	r0, r1, r0, lsl #18
    1180:	55040000 	strpl	r0, [r4, #-0]
    1184:	00000163 	andeq	r0, r0, r3, ror #2
    1188:	01000305 	tsteq	r0, r5, lsl #6
    118c:	7c0a2000 	stcvc	0, cr2, [sl], {-0}
    1190:	94000000 	strls	r0, [r0], #-0
    1194:	0b000001 	bleq	11a0 <__Stack_Size+0x9a0>
    1198:	00000063 	andeq	r0, r0, r3, rrx
    119c:	87090003 	strhi	r0, [r9, -r3]
    11a0:	0400000a 	streq	r0, [r0], #-10
    11a4:	0001849d 	muleq	r1, sp, r4
    11a8:	fc030500 	stc2	5, cr0, [r3], {-0}
    11ac:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
    11b0:	000009ea 	andeq	r0, r0, sl, ror #19
    11b4:	0121a404 	teqeq	r1, r4, lsl #8
    11b8:	03050000 	movweq	r0, #20480	; 0x5000
    11bc:	2000014c 	andcs	r0, r0, ip, asr #2
    11c0:	00007c0a 	andeq	r7, r0, sl, lsl #24
    11c4:	0001c600 	andeq	ip, r1, r0, lsl #12
    11c8:	00630b00 	rsbeq	r0, r3, r0, lsl #22
    11cc:	00130000 	andseq	r0, r3, r0
    11d0:	000a7309 	andeq	r7, sl, r9, lsl #6
    11d4:	b6aa0400 	strtlt	r0, [sl], r0, lsl #8
    11d8:	05000001 	streq	r0, [r0, #-1]
    11dc:	00016803 	andeq	r6, r1, r3, lsl #16
    11e0:	007c0a20 	rsbseq	r0, ip, r0, lsr #20
    11e4:	01e70000 	mvneq	r0, r0
    11e8:	630b0000 	movwvs	r0, #45056	; 0xb000
    11ec:	0f000000 	svceq	0x00000000
    11f0:	0a4f0900 	beq	13c35f8 <__Stack_Size+0x13c2df8>
    11f4:	b0040000 	andlt	r0, r4, r0
    11f8:	000001d7 	ldrdeq	r0, [r0], -r7
    11fc:	01300305 	teqeq	r0, r5, lsl #6
    1200:	7c0a2000 	stcvc	0, cr2, [sl], {-0}
    1204:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1208:	0b000002 	bleq	1218 <__Stack_Size+0xa18>
    120c:	00000063 	andeq	r0, r0, r3, rrx
    1210:	62090077 	andvs	r0, r9, #119	; 0x77
    1214:	0400000a 	streq	r0, [r0], #-10
    1218:	0001f8b6 			; <UNDEFINED> instruction: 0x0001f8b6
    121c:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
    1220:	0a200001 	beq	80122c <__Stack_Size+0x800a2c>
    1224:	0000007c 	andeq	r0, r0, ip, ror r0
    1228:	00000229 	andeq	r0, r0, r9, lsr #4
    122c:	0000630b 	andeq	r6, r0, fp, lsl #6
    1230:	09006300 	stmdbeq	r0, {r8, r9, sp, lr}
    1234:	00000a13 	andeq	r0, r0, r3, lsl sl
    1238:	0219bd04 	andseq	fp, r9, #4, 26	; 0x100
    123c:	03050000 	movweq	r0, #20480	; 0x5000
    1240:	200001f4 	strdcs	r0, [r0], -r4
    1244:	000a3e09 	andeq	r3, sl, r9, lsl #28
    1248:	19c40400 	stmibne	r4, {sl}^
    124c:	05000002 	streq	r0, [r0, #-2]
    1250:	00025803 	andeq	r5, r2, r3, lsl #16
    1254:	09fd0920 	ldmibeq	sp!, {r5, r8, fp}^
    1258:	ca040000 	bgt	101260 <__Stack_Size+0x100a60>
    125c:	0000007c 	andeq	r0, r0, ip, ror r0
    1260:	00000305 	andeq	r0, r0, r5, lsl #6
    1264:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    1268:	04000005 	streq	r0, [r0], #-5
    126c:	00053300 	andeq	r3, r5, r0, lsl #6
    1270:	c0010400 	andgt	r0, r1, r0, lsl #8
    1274:	01000006 	tsteq	r0, r6
    1278:	00000bd1 	ldrdeq	r0, [r0], -r1
    127c:	00000893 	muleq	r0, r3, r8
    1280:	000001e8 	andeq	r0, r0, r8, ror #3
    1284:	00000000 	andeq	r0, r0, r0
    1288:	00000625 	andeq	r0, r0, r5, lsr #12
    128c:	000ad302 	andeq	sp, sl, r2, lsl #6
    1290:	30d40200 	sbcscc	r0, r4, r0, lsl #4
    1294:	03000000 	movweq	r0, #0
    1298:	02570704 	subseq	r0, r7, #4, 14	; 0x100000
    129c:	04040000 	streq	r0, [r4], #-0
    12a0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    12a4:	06010300 	streq	r0, [r1], -r0, lsl #6
    12a8:	0000081a 	andeq	r0, r0, sl, lsl r8
    12ac:	000b0d02 	andeq	r0, fp, r2, lsl #26
    12b0:	501c0300 	andspl	r0, ip, r0, lsl #6
    12b4:	03000000 	movweq	r0, #0
    12b8:	08180801 	ldmdaeq	r8, {r0, fp}
    12bc:	02030000 	andeq	r0, r3, #0
    12c0:	00065e05 	andeq	r5, r6, r5, lsl #28
    12c4:	07020300 	streq	r0, [r2, -r0, lsl #6]
    12c8:	00000949 	andeq	r0, r0, r9, asr #18
    12cc:	da050403 	ble	1422e0 <__Stack_Size+0x141ae0>
    12d0:	02000004 	andeq	r0, r0, #4
    12d4:	00000ada 	ldrdeq	r0, [r0], -sl
    12d8:	00773803 	rsbseq	r3, r7, r3, lsl #16
    12dc:	04030000 	streq	r0, [r3], #-0
    12e0:	00025207 	andeq	r5, r2, r7, lsl #4
    12e4:	05080300 	streq	r0, [r8, #-768]	; 0x300
    12e8:	000004d5 	ldrdeq	r0, [r0], -r5
    12ec:	4d070803 	stcmi	8, cr0, [r7, #-12]
    12f0:	03000002 	movweq	r0, #2
    12f4:	078b0704 	streq	r0, [fp, r4, lsl #14]
    12f8:	04050000 	streq	r0, [r5], #-0
    12fc:	00000050 	andeq	r0, r0, r0, asr r0
    1300:	21080103 	tstcs	r8, r3, lsl #2
    1304:	05000008 	streq	r0, [r0, #-8]
    1308:	0000a604 	andeq	sl, r0, r4, lsl #12
    130c:	00990600 	addseq	r0, r9, r0, lsl #12
    1310:	0f020000 	svceq	0x00020000
    1314:	0400000b 	streq	r0, [r0], #-11
    1318:	0000452a 	andeq	r4, r0, sl, lsr #10
    131c:	0adc0200 	beq	ff701b24 <BootRAM+0xe6722c5>
    1320:	42040000 	andmi	r0, r4, #0
    1324:	0000006c 	andeq	r0, r0, ip, rrx
    1328:	32337507 	eorscc	r7, r3, #29360128	; 0x1c00000
    132c:	77270500 	strvc	r0, [r7, -r0, lsl #10]!
    1330:	07000000 	streq	r0, [r0, -r0]
    1334:	05003875 	streq	r3, [r0, #-2165]	; 0x875
    1338:	00005029 	andeq	r5, r0, r9, lsr #32
    133c:	05010800 	streq	r0, [r1, #-2048]	; 0x800
    1340:	0000eb37 	andeq	lr, r0, r7, lsr fp
    1344:	06b50900 	ldrteq	r0, [r5], r0, lsl #18
    1348:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    134c:	000001a7 	andeq	r0, r0, r7, lsr #3
    1350:	2d020001 	stccs	0, cr0, [r2, #-4]
    1354:	05000005 	streq	r0, [r0, #-5]
    1358:	0000d637 	andeq	sp, r0, r7, lsr r6
    135c:	0ab70a00 	beq	fedc3b64 <BootRAM+0xdd34305>
    1360:	06140000 	ldreq	r0, [r4], -r0
    1364:	00014b0d 	andeq	r4, r1, sp, lsl #22
    1368:	0b170b00 	bleq	5c3f70 <__Stack_Size+0x5c3770>
    136c:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    1370:	000000b6 	strheq	r0, [r0], -r6
    1374:	0bc20b00 	bleq	ff083f7c <BootRAM+0xdff471d>
    1378:	10060000 	andne	r0, r6, r0
    137c:	000000b6 	strheq	r0, [r0], -r6
    1380:	0b7f0b04 	bleq	1fc3f98 <__Stack_Size+0x1fc3798>
    1384:	11060000 	mrsne	r0, (UNDEF: 6)
    1388:	000000b6 	strheq	r0, [r0], -r6
    138c:	0c070b08 	stceq	11, cr0, [r7], {8}
    1390:	13060000 	movwne	r0, #24576	; 0x6000
    1394:	000000b6 	strheq	r0, [r0], -r6
    1398:	0ba10b0c 	bleq	fe843fd0 <BootRAM+0xd7b4771>
    139c:	14060000 	strne	r0, [r6], #-0
    13a0:	000000b6 	strheq	r0, [r0], -r6
    13a4:	0afc0b10 	beq	fff03fec <BootRAM+0xee7478d>
    13a8:	15060000 	strne	r0, [r6, #-0]
    13ac:	0000014b 	andeq	r0, r0, fp, asr #2
    13b0:	ab0c0014 	blge	301408 <__Stack_Size+0x300c08>
    13b4:	5a000000 	bpl	13bc <__Stack_Size+0xbbc>
    13b8:	0d000001 	stceq	0, cr0, [r0, #-4]
    13bc:	0000008c 	andeq	r0, r0, ip, lsl #1
    13c0:	0ab80200 	beq	fee01bc8 <BootRAM+0xdd72369>
    13c4:	16060000 	strne	r0, [r6], -r0
    13c8:	000000f6 	strdeq	r0, [r0], -r6
    13cc:	000b1f0a 	andeq	r1, fp, sl, lsl #30
    13d0:	18061400 	stmdane	r6, {sl, ip}
    13d4:	000001ae 	andeq	r0, r0, lr, lsr #3
    13d8:	000bd80b 	andeq	sp, fp, fp, lsl #16
    13dc:	ae190600 	cfmsub32ge	mvax0, mvfx0, mvfx9, mvfx0
    13e0:	00000001 	andeq	r0, r0, r1
    13e4:	000b670b 	andeq	r6, fp, fp, lsl #14
    13e8:	b61a0600 	ldrlt	r0, [sl], -r0, lsl #12
    13ec:	04000000 	streq	r0, [r0], #-0
    13f0:	000b970b 	andeq	r9, fp, fp, lsl #14
    13f4:	251f0600 	ldrcs	r0, [pc, #-1536]	; dfc <__Stack_Size+0x5fc>
    13f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    13fc:	000b330b 	andeq	r3, fp, fp, lsl #6
    1400:	37210600 	strcc	r0, [r1, -r0, lsl #12]!
    1404:	0c000000 	stceq	0, cr0, [r0], {-0}
    1408:	000c160b 	andeq	r1, ip, fp, lsl #12
    140c:	37220600 	strcc	r0, [r2, -r0, lsl #12]!
    1410:	10000000 	andne	r0, r0, r0
    1414:	5a040500 	bpl	10281c <__Stack_Size+0x10201c>
    1418:	02000001 	andeq	r0, r0, #1
    141c:	00000c39 	andeq	r0, r0, r9, lsr ip
    1420:	01bf2606 			; <UNDEFINED> instruction: 0x01bf2606
    1424:	04050000 	streq	r0, [r5], #-0
    1428:	00000165 	andeq	r0, r0, r5, ror #2
    142c:	000c2e0e 	andeq	r2, ip, lr, lsl #28
    1430:	003d0100 	eorseq	r0, sp, r0, lsl #2
    1434:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1438:	01000000 	mrseq	r0, (UNDEF: 0)
    143c:	0002239c 	muleq	r2, ip, r3
    1440:	0c340f00 	ldceq	15, cr0, [r4], #-0
    1444:	3d010000 	stccc	0, cr0, [r1, #-0]
    1448:	00000093 	muleq	r0, r3, r0
    144c:	000002a8 	andeq	r0, r0, r8, lsr #5
    1450:	78646910 	stmdavc	r4!, {r4, r8, fp, sp, lr}^
    1454:	373f0100 	ldrcc	r0, [pc, -r0, lsl #2]!
    1458:	d4000000 	strle	r0, [r0], #-0
    145c:	11000002 	tstne	r0, r2
    1460:	00000000 	andeq	r0, r0, r0
    1464:	00000506 	andeq	r0, r0, r6, lsl #10
    1468:	0000020f 	andeq	r0, r0, pc, lsl #4
    146c:	05500112 	ldrbeq	r0, [r0, #-274]	; 0x112
    1470:	00710003 	rsbseq	r0, r1, r3
    1474:	00130008 	andseq	r0, r3, r8
    1478:	06000000 	streq	r0, [r0], -r0
    147c:	12000005 	andne	r0, r0, #5
    1480:	03055001 	movweq	r5, #20481	; 0x5001
    1484:	080071e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, ip, sp, lr}
    1488:	a8140000 	ldmdage	r4, {}	; <UNPREDICTABLE>
    148c:	0100000b 	tsteq	r0, fp
    1490:	00003745 	andeq	r3, r0, r5, asr #14
    1494:	00108c00 	andseq	r8, r0, r0, lsl #24
    1498:	00013c08 	andeq	r3, r1, r8, lsl #24
    149c:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
    14a0:	15000004 	strne	r0, [r0, #-4]
    14a4:	00000b5a 	andeq	r0, r0, sl, asr fp
    14a8:	00eb4701 	rsceq	r4, fp, r1, lsl #14
    14ac:	030b0000 	movweq	r0, #45056	; 0xb000
    14b0:	ad160000 	ldcge	0, cr0, [r6, #-0]
    14b4:	0100000b 	tsteq	r0, fp
    14b8:	0000eb48 	andeq	lr, r0, r8, asr #22
    14bc:	ef170000 	svc	0x00170000
    14c0:	0100000b 	tsteq	r0, fp
    14c4:	0001b459 	andeq	fp, r1, r9, asr r4
    14c8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    14cc:	74657210 	strbtvc	r7, [r5], #-528	; 0x210
    14d0:	375b0100 	ldrbcc	r0, [fp, -r0, lsl #2]
    14d4:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    14d8:	15000003 	strne	r0, [r0, #-3]
    14dc:	00000aab 	andeq	r0, r0, fp, lsr #21
    14e0:	00377401 	eorseq	r7, r7, r1, lsl #8
    14e4:	03d70000 	bicseq	r0, r7, #0
    14e8:	94180000 	ldrls	r0, [r8], #-0
    14ec:	19080010 	stmdbne	r8, {r4}
    14f0:	18000005 	stmdane	r0, {r0, r2}
    14f4:	08001098 	stmdaeq	r0, {r3, r4, r7, ip}
    14f8:	00000521 	andeq	r0, r0, r1, lsr #10
    14fc:	00109c18 	andseq	r9, r0, r8, lsl ip
    1500:	00052908 	andeq	r2, r5, r8, lsl #18
    1504:	10a01800 	adcne	r1, r0, r0, lsl #16
    1508:	05310800 	ldreq	r0, [r1, #-2048]!	; 0x800
    150c:	a4180000 	ldrge	r0, [r8], #-0
    1510:	38080010 	stmdacc	r8, {r4}
    1514:	18000005 	stmdane	r0, {r0, r2}
    1518:	080010a8 	stmdaeq	r0, {r3, r5, r7, ip}
    151c:	00000540 	andeq	r0, r0, r0, asr #10
    1520:	0010ac18 	andseq	sl, r0, r8, lsl ip
    1524:	00054808 	andeq	r4, r5, r8, lsl #16
    1528:	10b21100 	adcsne	r1, r2, r0, lsl #2
    152c:	05060800 	streq	r0, [r6, #-2048]	; 0x800
    1530:	02d90000 	sbcseq	r0, r9, #0
    1534:	01120000 	tsteq	r2, r0
    1538:	08030550 	stmdaeq	r3, {r4, r6, r8, sl}
    153c:	00080071 	andeq	r0, r8, r1, ror r0
    1540:	0010ba11 	andseq	fp, r0, r1, lsl sl
    1544:	00054f08 	andeq	r4, r5, r8, lsl #30
    1548:	0002f500 	andeq	pc, r2, r0, lsl #10
    154c:	51011200 	mrspl	r1, R9_usr
    1550:	01123f01 	tsteq	r2, r1, lsl #30
    1554:	000c0550 	andeq	r0, ip, r0, asr r5
    1558:	0040010c 	subeq	r0, r0, ip, lsl #2
    155c:	0010c211 	andseq	ip, r0, r1, lsl r2
    1560:	00050608 	andeq	r0, r5, r8, lsl #12
    1564:	00030c00 	andeq	r0, r3, r0, lsl #24
    1568:	50011200 	andpl	r1, r1, r0, lsl #4
    156c:	71200305 	teqvc	r0, r5, lsl #6
    1570:	11000800 	tstne	r0, r0, lsl #16
    1574:	080010cc 	stmdaeq	r0, {r2, r3, r6, r7, ip}
    1578:	0000056a 	andeq	r0, r0, sl, ror #10
    157c:	0000032e 	andeq	r0, r0, lr, lsr #6
    1580:	01520112 	cmpeq	r2, r2, lsl r1
    1584:	51011230 	tstpl	r1, r0, lsr r2
    1588:	80000c05 	andhi	r0, r0, r5, lsl #24
    158c:	01120800 	tsteq	r2, r0, lsl #16
    1590:	6c910250 	lfmvs	f0, 4, [r1], {80}	; 0x50
    1594:	10d61100 	sbcsne	r1, r6, r0, lsl #2
    1598:	05060800 	streq	r0, [r6, #-2048]	; 0x800
    159c:	034b0000 	movteq	r0, #45056	; 0xb000
    15a0:	01120000 	tsteq	r2, r0
    15a4:	00740251 	rsbseq	r0, r4, r1, asr r2
    15a8:	05500112 	ldrbeq	r0, [r0, #-274]	; 0x112
    15ac:	00713403 	rsbseq	r3, r1, r3, lsl #8
    15b0:	f4110008 			; <UNDEFINED> instruction: 0xf4110008
    15b4:	8f080010 	svchi	0x00080010
    15b8:	79000005 	stmdbvc	r0, {r0, r2}
    15bc:	12000003 	andne	r0, r0, #3
    15c0:	44035301 	strmi	r5, [r3], #-769	; 0x301
    15c4:	0112243e 	tsteq	r2, lr, lsr r4
    15c8:	12350152 	eorsne	r0, r5, #-2147483628	; 0x80000014
    15cc:	3d015101 	stfccs	f5, [r1, #-4]
    15d0:	05500112 	ldrbeq	r0, [r0, #-274]	; 0x112
    15d4:	0110000c 	tsteq	r0, ip
    15d8:	7d021240 	sfmvc	f1, 4, [r2, #-256]	; 0xffffff00
    15dc:	00300100 	eorseq	r0, r0, r0, lsl #2
    15e0:	00110811 	andseq	r0, r1, r1, lsl r8
    15e4:	00058f08 	andeq	r8, r5, r8, lsl #30
    15e8:	0003a800 	andeq	sl, r3, r0, lsl #16
    15ec:	53011200 	movwpl	r1, #4608	; 0x1200
    15f0:	24404003 	strbcs	r4, [r0], #-3
    15f4:	01520112 	cmpeq	r2, r2, lsl r1
    15f8:	51011231 	tstpl	r1, r1, lsr r2
    15fc:	01123d01 	tsteq	r2, r1, lsl #26
    1600:	000c0550 	andeq	r0, ip, r0, asr r5
    1604:	12400110 	subne	r0, r0, #16, 2
    1608:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    160c:	18000074 	stmdane	r0, {r2, r4, r5, r6}
    1610:	0800110c 	stmdaeq	r0, {r2, r3, r8, ip}
    1614:	000005b5 			; <UNDEFINED> instruction: 0x000005b5
    1618:	00111611 	andseq	r1, r1, r1, lsl r6
    161c:	00050608 	andeq	r0, r5, r8, lsl #12
    1620:	0003c800 	andeq	ip, r3, r0, lsl #16
    1624:	50011200 	andpl	r1, r1, r0, lsl #4
    1628:	71a40305 			; <UNDEFINED> instruction: 0x71a40305
    162c:	18000800 	stmdane	r0, {fp}
    1630:	0800111a 	stmdaeq	r0, {r1, r3, r4, r8, ip}
    1634:	000005c6 	andeq	r0, r0, r6, asr #11
    1638:	00112211 	andseq	r2, r1, r1, lsl r2
    163c:	00050608 	andeq	r0, r5, r8, lsl #12
    1640:	0003e800 	andeq	lr, r3, r0, lsl #16
    1644:	50011200 	andpl	r1, r1, r0, lsl #4
    1648:	714c0305 	cmpvc	ip, r5, lsl #6
    164c:	11000800 	tstne	r0, r0, lsl #16
    1650:	08001134 	stmdaeq	r0, {r2, r4, r5, r8, ip}
    1654:	0000058f 	andeq	r0, r0, pc, lsl #11
    1658:	00000416 	andeq	r0, r0, r6, lsl r4
    165c:	03530112 	cmpeq	r3, #-2147483644	; 0x80000004
    1660:	12243e44 	eorne	r3, r4, #68, 28	; 0x440
    1664:	35015201 	strcc	r5, [r1, #-513]	; 0x201
    1668:	01510112 	cmpeq	r1, r2, lsl r1
    166c:	5001123d 	andpl	r1, r1, sp, lsr r2
    1670:	10000c05 	andne	r0, r0, r5, lsl #24
    1674:	02124001 	andseq	r4, r2, #1
    1678:	3001007d 	andcc	r0, r1, sp, ror r0
    167c:	114e1100 	mrsne	r1, (UNDEF: 94)
    1680:	058f0800 	streq	r0, [pc, #2048]	; 1e88 <__Stack_Size+0x1688>
    1684:	04450000 	strbeq	r0, [r5], #-0
    1688:	01120000 	tsteq	r2, r0
    168c:	40400353 	submi	r0, r0, r3, asr r3
    1690:	52011224 	andpl	r1, r1, #36, 4	; 0x40000002
    1694:	01123101 	tsteq	r2, r1, lsl #2
    1698:	123d0151 	eorsne	r0, sp, #1073741844	; 0x40000014
    169c:	0c055001 	stceq	0, cr5, [r5], {1}
    16a0:	40011000 	andmi	r1, r1, r0
    16a4:	007d0212 	rsbseq	r0, sp, r2, lsl r2
    16a8:	00007502 	andeq	r7, r0, r2, lsl #10
    16ac:	00115218 	andseq	r5, r1, r8, lsl r2
    16b0:	0005b508 	andeq	fp, r5, r8, lsl #10
    16b4:	115c1100 	cmpne	ip, r0, lsl #2
    16b8:	05060800 	streq	r0, [r6, #-2048]	; 0x800
    16bc:	04650000 	strbteq	r0, [r5], #-0
    16c0:	01120000 	tsteq	r2, r0
    16c4:	a4030550 	strge	r0, [r3], #-1360	; 0x550
    16c8:	00080071 	andeq	r0, r8, r1, ror r0
    16cc:	00116018 	andseq	r6, r1, r8, lsl r0
    16d0:	0005c608 	andeq	ip, r5, r8, lsl #12
    16d4:	116a1100 	cmnne	sl, r0, lsl #2
    16d8:	05060800 	streq	r0, [r6, #-2048]	; 0x800
    16dc:	04850000 	streq	r0, [r5], #0
    16e0:	01120000 	tsteq	r2, r0
    16e4:	bc030550 	cfstr32lt	mvfx0, [r3], {80}	; 0x50
    16e8:	00080071 	andeq	r0, r8, r1, ror r0
    16ec:	00117011 	andseq	r7, r1, r1, lsl r0
    16f0:	0005d308 	andeq	sp, r5, r8, lsl #6
    16f4:	00049c00 	andeq	r9, r4, r0, lsl #24
    16f8:	50011200 	andpl	r1, r1, r0, lsl #4
    16fc:	80840c05 	addhi	r0, r4, r5, lsl #24
    1700:	11000800 	tstne	r0, r0, lsl #16
    1704:	0800117c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip}
    1708:	00000506 	andeq	r0, r0, r6, lsl #10
    170c:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
    1710:	05500112 	ldrbeq	r0, [r0, #-274]	; 0x112
    1714:	00715803 	rsbseq	r5, r1, r3, lsl #16
    1718:	8e110008 	cdphi	0, 1, cr0, cr1, cr8, {0}
    171c:	8f080011 	svchi	0x00080011
    1720:	e1000005 	tst	r0, r5
    1724:	12000004 	andne	r0, r0, #4
    1728:	44035301 	strmi	r5, [r3], #-769	; 0x301
    172c:	0112243e 	tsteq	r2, lr, lsr r4
    1730:	12350152 	eorsne	r0, r5, #-2147483628	; 0x80000014
    1734:	3d015101 	stfccs	f5, [r1, #-4]
    1738:	05500112 	ldrbeq	r0, [r0, #-274]	; 0x112
    173c:	0110000c 	tsteq	r0, ip
    1740:	7d021240 	sfmvc	f1, 4, [r2, #-256]	; 0xffffff00
    1744:	00300100 	eorseq	r0, r0, r0, lsl #2
    1748:	00119619 	andseq	r9, r1, r9, lsl r6
    174c:	00050608 	andeq	r0, r5, r8, lsl #12
    1750:	50011200 	andpl	r1, r1, r0, lsl #4
    1754:	717c0305 	cmnvc	ip, r5, lsl #6
    1758:	00000800 	andeq	r0, r0, r0, lsl #16
    175c:	0000b11a 	andeq	fp, r0, sl, lsl r1
    1760:	372c0800 	strcc	r0, [ip, -r0, lsl #16]!
    1764:	05000000 	streq	r0, [r0, #-0]
    1768:	00047003 	andeq	r7, r4, r3
    176c:	0bfb1b20 	bleq	ffec83f4 <BootRAM+0xee38b95>
    1770:	3b070000 	blcc	1c1778 <__Stack_Size+0x1c0f78>
    1774:	00051901 	andeq	r1, r5, r1, lsl #18
    1778:	00a01c00 	adceq	r1, r0, r0, lsl #24
    177c:	001d0000 	andseq	r0, sp, r0
    1780:	000ae51e 	andeq	lr, sl, lr, lsl r5
    1784:	01270700 	teqeq	r7, r0, lsl #14
    1788:	000aca1e 	andeq	ip, sl, lr, lsl sl
    178c:	01280700 	teqeq	r8, r0, lsl #14
    1790:	000b6d1e 	andeq	r6, fp, lr, lsl sp
    1794:	01290700 	teqeq	r9, r0, lsl #14
    1798:	0007d21f 	andeq	sp, r7, pc, lsl r2
    179c:	1e510800 	cdpne	8, 5, cr0, cr1, cr0, {0}
    17a0:	00000af1 	strdeq	r0, [r0], -r1
    17a4:	1e012a07 	vmlane.f32	s4, s2, s14
    17a8:	00000b8e 	andeq	r0, r0, lr, lsl #23
    17ac:	1f012507 	svcne	0x00012507
    17b0:	000004b5 			; <UNDEFINED> instruction: 0x000004b5
    17b4:	05205d08 	streq	r5, [r0, #-3336]!	; 0xd08
    17b8:	0700000b 	streq	r0, [r0, -fp]
    17bc:	00eb0122 	rsceq	r0, fp, r2, lsr #2
    17c0:	056a0000 	strbeq	r0, [sl, #-0]!
    17c4:	c11c0000 	tstgt	ip, r0
    17c8:	1c000000 	stcne	0, cr0, [r0], {-0}
    17cc:	000000cc 	andeq	r0, r0, ip, asr #1
    17d0:	0b3a2100 	bleq	e89bd8 <__Stack_Size+0xe893d8>
    17d4:	67060000 	strvs	r0, [r6, -r0]
    17d8:	00000037 	andeq	r0, r0, r7, lsr r0
    17dc:	00000589 	andeq	r0, r0, r9, lsl #11
    17e0:	0005891c 	andeq	r8, r5, ip, lsl r9
    17e4:	00b61c00 	adcseq	r1, r6, r0, lsl #24
    17e8:	eb1c0000 	bl	7017f0 <__Stack_Size+0x700ff0>
    17ec:	00000000 	andeq	r0, r0, r0
    17f0:	01b40405 			; <UNDEFINED> instruction: 0x01b40405
    17f4:	501b0000 	andspl	r0, fp, r0
    17f8:	0700000b 	streq	r0, [r0, -fp]
    17fc:	05b50123 	ldreq	r0, [r5, #291]!	; 0x123
    1800:	c11c0000 	tstgt	ip, r0
    1804:	1c000000 	stcne	0, cr0, [r0], {-0}
    1808:	000000cc 	andeq	r0, r0, ip, asr #1
    180c:	0000cc1c 	andeq	ip, r0, ip, lsl ip
    1810:	00c11c00 	sbceq	r1, r1, r0, lsl #24
    1814:	cc1c0000 	ldcgt	0, cr0, [ip], {-0}
    1818:	00000000 	andeq	r0, r0, r0
    181c:	000bde22 	andeq	sp, fp, r2, lsr #28
    1820:	eb7c0900 	bl	1f03c28 <__Stack_Size+0x1f03428>
    1824:	c6000000 	strgt	r0, [r0], -r0
    1828:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    182c:	0c1e2300 	ldceq	3, cr2, [lr], {-0}
    1830:	7e090000 	cdpvc	0, 0, cr0, cr9, cr0, {0}
    1834:	000005d3 	ldrdeq	r0, [r0], -r3
    1838:	b724001d 			; <UNDEFINED> instruction: 0xb724001d
    183c:	0700000b 	streq	r0, [r0, -fp]
    1840:	c11c012c 	tstgt	ip, ip, lsr #2
    1844:	00000000 	andeq	r0, r0, r0
    1848:	00156400 	andseq	r6, r5, r0, lsl #8
    184c:	38000400 	stmdacc	r0, {sl}
    1850:	04000007 	streq	r0, [r0], #-7
    1854:	0006c001 	andeq	ip, r6, r1
    1858:	0ceb0100 	stfeqe	f0, [fp]
    185c:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    1860:	03180000 	tsteq	r8, #0
    1864:	00000000 	andeq	r0, r0, r0
    1868:	08350000 	ldmdaeq	r5!, {}	; <UNPREDICTABLE>
    186c:	d3020000 	movwle	r0, #8192	; 0x2000
    1870:	0200000a 	andeq	r0, r0, #10
    1874:	000030d4 	ldrdeq	r3, [r0], -r4
    1878:	07040300 	streq	r0, [r4, -r0, lsl #6]
    187c:	00000257 	andeq	r0, r0, r7, asr r2
    1880:	000df002 	andeq	pc, sp, r2
    1884:	42280300 	eormi	r0, r8, #0, 6
    1888:	04000000 	streq	r0, [r0], #-0
    188c:	00001062 	andeq	r1, r0, r2, rrx
    1890:	59000804 	stmdbpl	r0, {r2, fp}
    1894:	05000000 	streq	r0, [r0, #-0]
    1898:	00000eef 	andeq	r0, r0, pc, ror #29
    189c:	00000059 	andeq	r0, r0, r9, asr r0
    18a0:	04060000 	streq	r0, [r6], #-0
    18a4:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
    18a8:	0300746e 	movweq	r7, #1134	; 0x46e
    18ac:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    18b0:	0d020000 	stceq	0, cr0, [r2, #-0]
    18b4:	0400000b 	streq	r0, [r0], #-11
    18b8:	0000741c 	andeq	r7, r0, ip, lsl r4
    18bc:	08010300 	stmdaeq	r1, {r8, r9}
    18c0:	00000818 	andeq	r0, r0, r8, lsl r8
    18c4:	5e050203 	cdppl	2, 0, cr0, cr5, cr3, {0}
    18c8:	02000006 	andeq	r0, r0, #6
    18cc:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    18d0:	008d2604 	addeq	r2, sp, r4, lsl #12
    18d4:	02030000 	andeq	r0, r3, #0
    18d8:	00094907 	andeq	r4, r9, r7, lsl #18
    18dc:	05040300 	streq	r0, [r4, #-768]	; 0x300
    18e0:	000004da 	ldrdeq	r0, [r0], -sl
    18e4:	000ada02 	andeq	sp, sl, r2, lsl #20
    18e8:	a6380400 	ldrtge	r0, [r8], -r0, lsl #8
    18ec:	03000000 	movweq	r0, #0
    18f0:	02520704 	subseq	r0, r2, #4, 14	; 0x100000
    18f4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    18f8:	0004d505 	andeq	sp, r4, r5, lsl #10
    18fc:	07080300 	streq	r0, [r8, -r0, lsl #6]
    1900:	0000024d 	andeq	r0, r0, sp, asr #4
    1904:	8b070403 	blhi	1c2918 <__Stack_Size+0x1c2118>
    1908:	08000007 	stmdaeq	r0, {r0, r1, r2}
    190c:	0000c804 	andeq	ip, r0, r4, lsl #16
    1910:	04080900 	streq	r0, [r8], #-2304	; 0x900
    1914:	00000074 	andeq	r0, r0, r4, ror r0
    1918:	00d50408 	sbcseq	r0, r5, r8, lsl #8
    191c:	01030000 	mrseq	r0, (UNDEF: 3)
    1920:	00082108 	andeq	r2, r8, r8, lsl #2
    1924:	e2040800 	and	r0, r4, #0, 16
    1928:	0a000000 	beq	1930 <__Stack_Size+0x1130>
    192c:	000000d5 	ldrdeq	r0, [r0], -r5
    1930:	000b0f02 	andeq	r0, fp, r2, lsl #30
    1934:	692a0500 	stmdbvs	sl!, {r8, sl}
    1938:	02000000 	andeq	r0, r0, #0
    193c:	00000dba 			; <UNDEFINED> instruction: 0x00000dba
    1940:	00823605 	addeq	r3, r2, r5, lsl #12
    1944:	dc020000 	stcle	0, cr0, [r2], {-0}
    1948:	0500000a 	streq	r0, [r0, #-10]
    194c:	00009b42 	andeq	r9, r0, r2, asr #22
    1950:	10640200 	rsbne	r0, r4, r0, lsl #4
    1954:	62030000 	andvs	r0, r3, #0
    1958:	00000037 	andeq	r0, r0, r7, lsr r0
    195c:	3233750b 	eorscc	r7, r3, #46137344	; 0x2c00000
    1960:	a6270600 	strtge	r0, [r7], -r0, lsl #12
    1964:	0b000000 	bleq	196c <__Stack_Size+0x116c>
    1968:	00363175 	eorseq	r3, r6, r5, ror r1
    196c:	008d2806 	addeq	r2, sp, r6, lsl #16
    1970:	750b0000 	strvc	r0, [fp, #-0]
    1974:	29060038 	stmdbcs	r6, {r3, r4, r5}
    1978:	00000074 	andeq	r0, r0, r4, ror r0
    197c:	00035a02 	andeq	r5, r3, r2, lsl #20
    1980:	3e2f0600 	cfmadda32cc	mvax0, mvax0, mvfx15, mvfx0
    1984:	0c000001 	stceq	0, cr0, [r0], {1}
    1988:	000000a6 	andeq	r0, r0, r6, lsr #1
    198c:	0001e302 	andeq	lr, r1, r2, lsl #6
    1990:	4e300600 	cfmsuba32mi	mvax0, mvax0, mvfx0, mvfx0
    1994:	0c000001 	stceq	0, cr0, [r0], {1}
    1998:	0000008d 	andeq	r0, r0, sp, lsl #1
    199c:	00112102 	andseq	r2, r1, r2, lsl #2
    19a0:	5e330600 	cfmsuba32pl	mvax0, mvax0, mvfx3, mvfx0
    19a4:	0a000001 	beq	19b0 <__Stack_Size+0x11b0>
    19a8:	0000013e 	andeq	r0, r0, lr, lsr r1
    19ac:	3706010d 	strcc	r0, [r6, -sp, lsl #2]
    19b0:	00000178 	andeq	r0, r0, r8, ror r1
    19b4:	0006b50e 	andeq	fp, r6, lr, lsl #10
    19b8:	a70e0000 	strge	r0, [lr, -r0]
    19bc:	01000001 	tsteq	r0, r1
    19c0:	052d0200 	streq	r0, [sp, #-512]!	; 0x200
    19c4:	37060000 	strcc	r0, [r6, -r0]
    19c8:	00000163 	andeq	r0, r0, r3, ror #2
    19cc:	3b06010d 	blcc	181e08 <__Stack_Size+0x181608>
    19d0:	00000198 	muleq	r0, r8, r1
    19d4:	000e660e 	andeq	r6, lr, lr, lsl #12
    19d8:	6c0e0000 	stcvs	0, cr0, [lr], {-0}
    19dc:	01000010 	tsteq	r0, r0, lsl r0
    19e0:	0c930200 	lfmeq	f0, 4, [r3], {0}
    19e4:	3b060000 	blcc	1819ec <__Stack_Size+0x1811ec>
    19e8:	00000183 	andeq	r0, r0, r3, lsl #3
    19ec:	8d07280f 	stchi	8, cr2, [r7, #-60]	; 0xffffffc4
    19f0:	00000223 	andeq	r0, r0, r3, lsr #4
    19f4:	00524310 	subseq	r4, r2, r0, lsl r3
    19f8:	01338e07 	teqeq	r3, r7, lsl #28
    19fc:	11000000 	mrsne	r0, (UNDEF: 0)
    1a00:	000006bb 			; <UNDEFINED> instruction: 0x000006bb
    1a04:	01338f07 	teqeq	r3, r7, lsl #30
    1a08:	10040000 	andne	r0, r4, r0
    1a0c:	00524943 	subseq	r4, r2, r3, asr #18
    1a10:	01339007 	teqeq	r3, r7
    1a14:	11080000 	mrsne	r0, (UNDEF: 8)
    1a18:	0000002a 	andeq	r0, r0, sl, lsr #32
    1a1c:	01339107 	teqeq	r3, r7, lsl #2
    1a20:	110c0000 	mrsne	r0, (UNDEF: 12)
    1a24:	00000e24 	andeq	r0, r0, r4, lsr #28
    1a28:	01339207 	teqeq	r3, r7, lsl #4
    1a2c:	11100000 	tstne	r0, r0
    1a30:	00000445 	andeq	r0, r0, r5, asr #8
    1a34:	01339307 	teqeq	r3, r7, lsl #6
    1a38:	11140000 	tstne	r4, r0
    1a3c:	000005ef 	andeq	r0, r0, pc, ror #11
    1a40:	01339407 	teqeq	r3, r7, lsl #8
    1a44:	11180000 	tstne	r8, r0
    1a48:	00000000 	andeq	r0, r0, r0
    1a4c:	01339507 	teqeq	r3, r7, lsl #10
    1a50:	111c0000 	tstne	ip, r0
    1a54:	0000061e 	andeq	r0, r0, lr, lsl r6
    1a58:	01339607 	teqeq	r3, r7, lsl #12
    1a5c:	10200000 	eorne	r0, r0, r0
    1a60:	00525343 	subseq	r5, r2, r3, asr #6
    1a64:	01339707 	teqeq	r3, r7, lsl #14
    1a68:	00240000 	eoreq	r0, r4, r0
    1a6c:	000f2f02 	andeq	r2, pc, r2, lsl #30
    1a70:	a3980700 	orrsge	r0, r8, #0, 14
    1a74:	12000001 	andne	r0, r0, #1
    1a78:	9b07033c 	blls	1c2770 <__Stack_Size+0x1c1f70>
    1a7c:	000002c3 	andeq	r0, r0, r3, asr #5
    1a80:	000d6e11 	andeq	r6, sp, r1, lsl lr
    1a84:	d39c0700 	orrsle	r0, ip, #0, 14
    1a88:	00000002 	andeq	r0, r0, r2
    1a8c:	000f8e11 	andeq	r8, pc, r1, lsl lr	; <UNPREDICTABLE>
    1a90:	d89d0700 	ldmle	sp, {r8, r9, sl}
    1a94:	08000002 	stmdaeq	r0, {r1}
    1a98:	00110011 	andseq	r0, r1, r1, lsl r0
    1a9c:	e89e0700 	ldm	lr, {r8, r9, sl}
    1aa0:	80000002 	andhi	r0, r0, r2
    1aa4:	000d7c11 	andeq	r7, sp, r1, lsl ip
    1aa8:	d89f0700 	ldmle	pc, {r8, r9, sl}	; <UNPREDICTABLE>
    1aac:	88000002 	stmdahi	r0, {r1}
    1ab0:	00117113 	andseq	r7, r1, r3, lsl r1
    1ab4:	eda00700 	stc	7, cr0, [r0]
    1ab8:	00000002 	andeq	r0, r0, r2
    1abc:	0fa21301 	svceq	0x00a21301
    1ac0:	a1070000 	mrsge	r0, (UNDEF: 7)
    1ac4:	000002d8 	ldrdeq	r0, [r0], -r8
    1ac8:	2a130108 	bcs	4c1ef0 <__Stack_Size+0x4c16f0>
    1acc:	0700000f 	streq	r0, [r0, -pc]
    1ad0:	0002f2a2 	andeq	pc, r2, r2, lsr #5
    1ad4:	13018000 	movwne	r8, #4096	; 0x1000
    1ad8:	00000fac 	andeq	r0, r0, ip, lsr #31
    1adc:	02d8a307 	sbcseq	sl, r8, #469762048	; 0x1c000000
    1ae0:	01880000 	orreq	r0, r8, r0
    1ae4:	00111c13 	andseq	r1, r1, r3, lsl ip
    1ae8:	f7a40700 			; <UNDEFINED> instruction: 0xf7a40700
    1aec:	00000002 	andeq	r0, r0, r2
    1af0:	0fb61302 	svceq	0x00b61302
    1af4:	a5070000 	strge	r0, [r7, #-0]
    1af8:	000002fc 	strdeq	r0, [r0], -ip
    1afc:	49140208 	ldmdbmi	r4, {r3, r9}
    1b00:	07005250 	smlsdeq	r0, r0, r2, r5
    1b04:	00031ca6 	andeq	r1, r3, r6, lsr #25
    1b08:	00030000 	andeq	r0, r3, r0
    1b0c:	00013315 	andeq	r3, r1, r5, lsl r3
    1b10:	0002d300 	andeq	sp, r2, r0, lsl #6
    1b14:	00bb1600 	adcseq	r1, fp, r0, lsl #12
    1b18:	00010000 	andeq	r0, r1, r0
    1b1c:	0002c30c 	andeq	ip, r2, ip, lsl #6
    1b20:	01131500 	tsteq	r3, r0, lsl #10
    1b24:	02e80000 	rsceq	r0, r8, #0
    1b28:	bb160000 	bllt	581b30 <__Stack_Size+0x581330>
    1b2c:	1d000000 	stcne	0, cr0, [r0, #-0]
    1b30:	02c30c00 	sbceq	r0, r3, #0, 24
    1b34:	c30c0000 	movwgt	r0, #49152	; 0xc000
    1b38:	0c000002 	stceq	0, cr0, [r0], {2}
    1b3c:	000002c3 	andeq	r0, r0, r3, asr #5
    1b40:	0002c30c 	andeq	ip, r2, ip, lsl #6
    1b44:	01131500 	tsteq	r3, r0, lsl #10
    1b48:	030c0000 	movweq	r0, #49152	; 0xc000
    1b4c:	bb160000 	bllt	581b54 <__Stack_Size+0x581354>
    1b50:	3d000000 	stccc	0, cr0, [r0, #-0]
    1b54:	01331500 	teqeq	r3, r0, lsl #10
    1b58:	031c0000 	tsteq	ip, #0
    1b5c:	bb160000 	bllt	581b64 <__Stack_Size+0x581364>
    1b60:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1b64:	030c0c00 	movweq	r0, #52224	; 0xcc00
    1b68:	4e020000 	cdpmi	0, 0, cr0, cr2, cr0, {0}
    1b6c:	07000010 	smladeq	r0, r0, r0, r0
    1b70:	00022ea7 	andeq	r2, r2, r7, lsr #29
    1b74:	07040f00 	streq	r0, [r4, -r0, lsl #30]
    1b78:	000365a9 	andeq	r6, r3, r9, lsr #11
    1b7c:	05b61100 	ldreq	r1, [r6, #256]!	; 0x100
    1b80:	aa070000 	bge	1c1b88 <__Stack_Size+0x1c1388>
    1b84:	00000129 	andeq	r0, r0, r9, lsr #2
    1b88:	09701100 	ldmdbeq	r0!, {r8, ip}^
    1b8c:	ab070000 	blge	1c1b94 <__Stack_Size+0x1c1394>
    1b90:	00000129 	andeq	r0, r0, r9, lsr #2
    1b94:	08dd1101 	ldmeq	sp, {r0, r8, ip}^
    1b98:	ac070000 	stcge	0, cr0, [r7], {-0}
    1b9c:	00000129 	andeq	r0, r0, r9, lsr #2
    1ba0:	03961102 	orrseq	r1, r6, #-2147483648	; 0x80000000
    1ba4:	ad070000 	stcge	0, cr0, [r7, #-0]
    1ba8:	00000178 	andeq	r0, r0, r8, ror r1
    1bac:	f5020003 			; <UNDEFINED> instruction: 0xf5020003
    1bb0:	07000001 	streq	r0, [r0, -r1]
    1bb4:	00032cae 	andeq	r2, r3, lr, lsr #25
    1bb8:	07400f00 	strbeq	r0, [r0, -r0, lsl #30]
    1bbc:	000421b0 			; <UNDEFINED> instruction: 0x000421b0
    1bc0:	0dff1100 	ldfeqe	f1, [pc]	; 1bc8 <__Stack_Size+0x13c8>
    1bc4:	b1070000 	mrslt	r0, (UNDEF: 7)
    1bc8:	00000153 	andeq	r0, r0, r3, asr r1
    1bcc:	10731100 	rsbsne	r1, r3, r0, lsl #2
    1bd0:	b2070000 	andlt	r0, r7, #0
    1bd4:	00000133 	andeq	r0, r0, r3, lsr r1
    1bd8:	10381104 	eorsne	r1, r8, r4, lsl #2
    1bdc:	b3070000 	movwlt	r0, #28672	; 0x7000
    1be0:	00000133 	andeq	r0, r0, r3, lsr r1
    1be4:	0e6e1108 	poweqe	f1, f6, #0.0
    1be8:	b4070000 	strlt	r0, [r7], #-0
    1bec:	00000133 	andeq	r0, r0, r3, lsr r1
    1bf0:	4353100c 	cmpmi	r3, #12
    1bf4:	b5070052 	strlt	r0, [r7, #-82]	; 0x52
    1bf8:	00000133 	andeq	r0, r0, r3, lsr r1
    1bfc:	43431010 	movtmi	r1, #12304	; 0x3010
    1c00:	b6070052 			; <UNDEFINED> instruction: 0xb6070052
    1c04:	00000133 	andeq	r0, r0, r3, lsr r1
    1c08:	0e0c1114 	mcreq	1, 0, r1, cr12, cr4, {0}
    1c0c:	b7070000 	strlt	r0, [r7, -r0]
    1c10:	00000431 	andeq	r0, r0, r1, lsr r4
    1c14:	0ebd1118 	mrceq	1, 5, r1, cr13, cr8, {0}
    1c18:	b8070000 	stmdalt	r7, {}	; <UNPREDICTABLE>
    1c1c:	00000133 	andeq	r0, r0, r3, lsr r1
    1c20:	0edd1124 	cdpeq	1, 13, cr1, cr13, cr4, {1}
    1c24:	b9070000 	stmdblt	r7, {}	; <UNPREDICTABLE>
    1c28:	00000133 	andeq	r0, r0, r3, lsr r1
    1c2c:	0e2d1128 	sufeqep	f1, f5, #0.0
    1c30:	ba070000 	blt	1c1c38 <__Stack_Size+0x1c1438>
    1c34:	00000133 	andeq	r0, r0, r3, lsr r1
    1c38:	0cbf112c 	ldfeqs	f1, [pc], #176	; 1cf0 <__Stack_Size+0x14f0>
    1c3c:	bb070000 	bllt	1c1c44 <__Stack_Size+0x1c1444>
    1c40:	00000133 	andeq	r0, r0, r3, lsr r1
    1c44:	0f7a1130 	svceq	0x007a1130
    1c48:	bc070000 	stclt	0, cr0, [r7], {-0}
    1c4c:	00000133 	andeq	r0, r0, r3, lsr r1
    1c50:	10261134 	eorne	r1, r6, r4, lsr r1
    1c54:	bd070000 	stclt	0, cr0, [r7, #-0]
    1c58:	00000133 	andeq	r0, r0, r3, lsr r1
    1c5c:	0e111138 	mrceq	1, 0, r1, cr1, cr8, {1}
    1c60:	be070000 	cdplt	0, 0, cr0, cr7, cr0, {0}
    1c64:	00000133 	andeq	r0, r0, r3, lsr r1
    1c68:	3315003c 	tstcc	r5, #60	; 0x3c
    1c6c:	31000001 	tstcc	r0, r1
    1c70:	16000004 	strne	r0, [r0], -r4
    1c74:	000000bb 	strheq	r0, [r0], -fp
    1c78:	210c0002 	tstcs	ip, r2
    1c7c:	02000004 	andeq	r0, r0, #4
    1c80:	0000107d 	andeq	r1, r0, sp, ror r0
    1c84:	0370bf07 	cmneq	r0, #7, 30
    1c88:	1c0f0000 	stcne	0, cr0, [pc], {-0}
    1c8c:	04f0c107 	ldrbteq	ip, [r0], #263	; 0x107
    1c90:	53100000 	tstpl	r0, #0
    1c94:	c3070052 	movwgt	r0, #28754	; 0x7052
    1c98:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1c9c:	0f8e1100 	svceq	0x008e1100
    1ca0:	c4070000 	strgt	r0, [r7], #-0
    1ca4:	000000f2 	strdeq	r0, [r0], -r2
    1ca8:	52441002 	subpl	r1, r4, #2
    1cac:	f0c50700 			; <UNDEFINED> instruction: 0xf0c50700
    1cb0:	04000004 	streq	r0, [r0], #-4
    1cb4:	000f9811 	andeq	r9, pc, r1, lsl r8	; <UNPREDICTABLE>
    1cb8:	f2c60700 	vabdl.s8	q8, d6, d0
    1cbc:	06000000 	streq	r0, [r0], -r0
    1cc0:	52524210 	subspl	r4, r2, #16, 4
    1cc4:	f0c70700 			; <UNDEFINED> instruction: 0xf0c70700
    1cc8:	08000004 	stmdaeq	r0, {r2}
    1ccc:	000fa211 	andeq	sl, pc, r1, lsl r2	; <UNPREDICTABLE>
    1cd0:	f2c80700 	vabdl.s8	q8, d8, d0
    1cd4:	0a000000 	beq	1cdc <__Stack_Size+0x14dc>
    1cd8:	31524310 	cmpcc	r2, r0, lsl r3
    1cdc:	f0c90700 			; <UNDEFINED> instruction: 0xf0c90700
    1ce0:	0c000004 	stceq	0, cr0, [r0], {4}
    1ce4:	000fac11 	andeq	sl, pc, r1, lsl ip	; <UNPREDICTABLE>
    1ce8:	f2ca0700 	vabdl.s8	q8, d10, d0
    1cec:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1cf0:	32524310 	subscc	r4, r2, #16, 6	; 0x40000000
    1cf4:	f0cb0700 			; <UNDEFINED> instruction: 0xf0cb0700
    1cf8:	10000004 	andne	r0, r0, r4
    1cfc:	000fb611 	andeq	fp, pc, r1, lsl r6	; <UNPREDICTABLE>
    1d00:	f2cc0700 	vabdl.s8	q8, d12, d0
    1d04:	12000000 	andne	r0, r0, #0
    1d08:	33524310 	cmpcc	r2, #16, 6	; 0x40000000
    1d0c:	f0cd0700 			; <UNDEFINED> instruction: 0xf0cd0700
    1d10:	14000004 	strne	r0, [r0], #-4
    1d14:	000fc011 	andeq	ip, pc, r1, lsl r0	; <UNPREDICTABLE>
    1d18:	f2ce0700 	vabdl.s8	q8, d14, d0
    1d1c:	16000000 	strne	r0, [r0], -r0
    1d20:	000d4411 	andeq	r4, sp, r1, lsl r4
    1d24:	f0cf0700 			; <UNDEFINED> instruction: 0xf0cf0700
    1d28:	18000004 	stmdane	r0, {r2}
    1d2c:	000fca11 	andeq	ip, pc, r1, lsl sl	; <UNPREDICTABLE>
    1d30:	f2d00700 	vabdl.s16	q8, d0, d0
    1d34:	1a000000 	bne	1d3c <__Stack_Size+0x153c>
    1d38:	00f20c00 	rscseq	r0, r2, r0, lsl #24
    1d3c:	16020000 	strne	r0, [r2], -r0
    1d40:	0700000e 	streq	r0, [r0, -lr]
    1d44:	000441d1 	ldrdeq	r4, [r4], -r1
    1d48:	0d050400 	cfstrseq	mvf0, [r5, #-0]
    1d4c:	07080000 	streq	r0, [r8, -r0]
    1d50:	000524e2 	andeq	r2, r5, r2, ror #9
    1d54:	52431000 	subpl	r1, r3, #0
    1d58:	33e30700 	mvncc	r0, #0, 14
    1d5c:	00000001 	andeq	r0, r0, r1
    1d60:	52534310 	subspl	r4, r3, #16, 6	; 0x40000000
    1d64:	33e40700 	mvncc	r0, #0, 14
    1d68:	04000001 	streq	r0, [r0], #-1
    1d6c:	0d960400 	cfldrseq	mvf0, [r6]
    1d70:	07380000 	ldreq	r0, [r8, -r0]!
    1d74:	000658ef 	andeq	r5, r6, pc, ror #17
    1d78:	0f981100 	svceq	0x00981100
    1d7c:	f0070000 			; <UNDEFINED> instruction: 0xf0070000
    1d80:	00000658 	andeq	r0, r0, r8, asr r6
    1d84:	52441000 	subpl	r1, r4, #0
    1d88:	f1070031 			; <UNDEFINED> instruction: 0xf1070031
    1d8c:	00000143 	andeq	r0, r0, r3, asr #2
    1d90:	0fa21104 	svceq	0x00a21104
    1d94:	f2070000 	vhadd.s8	d0, d7, d0
    1d98:	0000065d 	andeq	r0, r0, sp, asr r6
    1d9c:	52441006 	subpl	r1, r4, #6
    1da0:	f3070032 	vqadd.u8	d0, d7, d18
    1da4:	00000143 	andeq	r0, r0, r3, asr #2
    1da8:	0fac1108 	svceq	0x00ac1108
    1dac:	f4070000 	vst4.8	{d0-d3}, [r7], r0
    1db0:	0000065d 	andeq	r0, r0, sp, asr r6
    1db4:	5244100a 	subpl	r1, r4, #10
    1db8:	f5070033 			; <UNDEFINED> instruction: 0xf5070033
    1dbc:	00000143 	andeq	r0, r0, r3, asr #2
    1dc0:	0fb6110c 	svceq	0x00b6110c
    1dc4:	f6070000 			; <UNDEFINED> instruction: 0xf6070000
    1dc8:	0000065d 	andeq	r0, r0, sp, asr r6
    1dcc:	5244100e 	subpl	r1, r4, #14
    1dd0:	f7070034 			; <UNDEFINED> instruction: 0xf7070034
    1dd4:	00000143 	andeq	r0, r0, r3, asr #2
    1dd8:	0fc01110 	svceq	0x00c01110
    1ddc:	f8070000 			; <UNDEFINED> instruction: 0xf8070000
    1de0:	0000065d 	andeq	r0, r0, sp, asr r6
    1de4:	52441012 	subpl	r1, r4, #18
    1de8:	f9070035 			; <UNDEFINED> instruction: 0xf9070035
    1dec:	00000143 	andeq	r0, r0, r3, asr #2
    1df0:	0fca1114 	svceq	0x00ca1114
    1df4:	fa070000 	blx	1c1dfc <__Stack_Size+0x1c15fc>
    1df8:	0000065d 	andeq	r0, r0, sp, asr r6
    1dfc:	52441016 	subpl	r1, r4, #22
    1e00:	fb070036 	blx	1c1ee2 <__Stack_Size+0x1c16e2>
    1e04:	00000143 	andeq	r0, r0, r3, asr #2
    1e08:	11951118 	orrsne	r1, r5, r8, lsl r1
    1e0c:	fc070000 	stc2	0, cr0, [r7], {-0}
    1e10:	0000065d 	andeq	r0, r0, sp, asr r6
    1e14:	5244101a 	subpl	r1, r4, #26
    1e18:	fd070037 	stc2	0, cr0, [r7, #-220]	; 0xffffff24
    1e1c:	00000143 	andeq	r0, r0, r3, asr #2
    1e20:	0fd4111c 	svceq	0x00d4111c
    1e24:	fe070000 	cdp2	0, 0, cr0, cr7, cr0, {0}
    1e28:	0000065d 	andeq	r0, r0, sp, asr r6
    1e2c:	5244101e 	subpl	r1, r4, #30
    1e30:	ff070038 			; <UNDEFINED> instruction: 0xff070038
    1e34:	00000143 	andeq	r0, r0, r3, asr #2
    1e38:	0fde1720 	svceq	0x00de1720
    1e3c:	00070000 	andeq	r0, r7, r0
    1e40:	00065d01 	andeq	r5, r6, r1, lsl #26
    1e44:	44182200 	ldrmi	r2, [r8], #-512	; 0x200
    1e48:	07003952 	smlsdeq	r0, r2, r9, r3
    1e4c:	01430101 	cmpeq	r3, r1, lsl #2
    1e50:	17240000 	strne	r0, [r4, -r0]!
    1e54:	000010ea 	andeq	r1, r0, sl, ror #1
    1e58:	5d010207 	sfmpl	f0, 4, [r1, #-28]	; 0xffffffe4
    1e5c:	26000006 	strcs	r0, [r0], -r6
    1e60:	000f2517 	andeq	r2, pc, r7, lsl r5	; <UNPREDICTABLE>
    1e64:	01030700 	tsteq	r3, r0, lsl #14
    1e68:	00000143 	andeq	r0, r0, r3, asr #2
    1e6c:	10f51728 	rscsne	r1, r5, r8, lsr #14
    1e70:	04070000 	streq	r0, [r7], #-0
    1e74:	00065d01 	andeq	r5, r6, r1, lsl #26
    1e78:	3e172a00 	vnmlscc.f32	s4, s14, s0
    1e7c:	07000011 	smladeq	r0, r1, r0, r0
    1e80:	01330105 	teqeq	r3, r5, lsl #2
    1e84:	182c0000 	stmdane	ip!, {}	; <UNPREDICTABLE>
    1e88:	07005243 	streq	r5, [r0, -r3, asr #4]
    1e8c:	01330106 	teqeq	r3, r6, lsl #2
    1e90:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
    1e94:	00525343 	subseq	r5, r2, r3, asr #6
    1e98:	33010707 	movwcc	r0, #5895	; 0x1707
    1e9c:	34000001 	strcc	r0, [r0], #-1
    1ea0:	01130a00 	tsteq	r3, r0, lsl #20
    1ea4:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    1ea8:	19000001 	stmdbne	r0, {r0}
    1eac:	00000f57 	andeq	r0, r0, r7, asr pc
    1eb0:	0110070c 	tsteq	r0, ip, lsl #14
    1eb4:	000006a4 	andeq	r0, r0, r4, lsr #13
    1eb8:	00107817 	andseq	r7, r0, r7, lsl r8
    1ebc:	01110700 	tsteq	r1, r0, lsl #14
    1ec0:	000000f2 	strdeq	r0, [r0], -r2
    1ec4:	10131700 	andsne	r1, r3, r0, lsl #14
    1ec8:	12070000 	andne	r0, r7, #0
    1ecc:	0000f201 	andeq	pc, r0, r1, lsl #4
    1ed0:	89170200 	ldmdbhi	r7, {r9}
    1ed4:	07000010 	smladeq	r0, r0, r0, r0
    1ed8:	00fd0113 	rscseq	r0, sp, r3, lsl r1
    1edc:	17040000 	strne	r0, [r4, -r0]
    1ee0:	0000108e 	andeq	r1, r0, lr, lsl #1
    1ee4:	fd011407 	stc2	4, cr1, [r1, #-28]	; 0xffffffe4
    1ee8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1eec:	01100f00 	tsteq	r0, r0, lsl #30
    1ef0:	0006f55f 	andeq	pc, r6, pc, asr r5	; <UNPREDICTABLE>
    1ef4:	0d511100 	ldfeqe	f1, [r1, #-0]
    1ef8:	61010000 	mrsvs	r0, (UNDEF: 1)
    1efc:	000000fd 	strdeq	r0, [r0], -sp
    1f00:	0cda1100 	ldfeqe	f1, [sl], {0}
    1f04:	66010000 	strvs	r0, [r1], -r0
    1f08:	000000f2 	strdeq	r0, [r0], -r2
    1f0c:	0cf61104 	ldfeqe	f1, [r6], #16
    1f10:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    1f14:	000000f2 	strdeq	r0, [r0], -r2
    1f18:	0dab1106 	stfeqs	f1, [fp, #24]!
    1f1c:	6c010000 	stcvs	0, cr0, [r1], {-0}
    1f20:	000000f2 	strdeq	r0, [r0], -r2
    1f24:	0e9b1108 	fmleqe	f1, f3, #0.0
    1f28:	73010000 	movwvc	r0, #4096	; 0x1000
    1f2c:	000000f2 	strdeq	r0, [r0], -r2
    1f30:	0ec3110a 	poleqs	f1, f3, #2.0
    1f34:	76010000 	strvc	r0, [r1], -r0
    1f38:	000000f2 	strdeq	r0, [r0], -r2
    1f3c:	0a02000c 	beq	81f74 <__Stack_Size+0x81774>
    1f40:	01000011 	tsteq	r0, r1, lsl r0
    1f44:	0006a479 	andeq	sl, r6, r9, ror r4
    1f48:	01010d00 	tsteq	r1, r0, lsl #26
    1f4c:	00071b92 	muleq	r7, r2, fp
    1f50:	0d850e00 	stceq	14, cr0, [r5]
    1f54:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1f58:	00000d34 	andeq	r0, r0, r4, lsr sp
    1f5c:	10be0e02 	adcsne	r0, lr, r2, lsl #28
    1f60:	00030000 	andeq	r0, r3, r0
    1f64:	00114402 	andseq	r4, r1, r2, lsl #8
    1f68:	00960100 	addseq	r0, r6, r0, lsl #2
    1f6c:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    1f70:	60990101 	addsvs	r0, r9, r1, lsl #2
    1f74:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    1f78:	00000f80 	andeq	r0, r0, r0, lsl #31
    1f7c:	117f0e00 	cmnne	pc, r0, lsl #28
    1f80:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    1f84:	00000dce 	andeq	r0, r0, lr, asr #27
    1f88:	0de20e28 	stcleq	14, cr0, [r2, #160]!	; 0xa0
    1f8c:	00c80000 	sbceq	r0, r8, r0
    1f90:	0010d90e 	andseq	sp, r0, lr, lsl #18
    1f94:	500e1400 	andpl	r1, lr, r0, lsl #8
    1f98:	1000000e 	andne	r0, r0, lr
    1f9c:	000f3d0e 	andeq	r3, pc, lr, lsl #26
    1fa0:	e80e1c00 	stmda	lr, {sl, fp, ip}
    1fa4:	1800000f 	stmdane	r0, {r0, r1, r2, r3}
    1fa8:	103d0200 	eorsne	r0, sp, r0, lsl #4
    1fac:	a1010000 	mrsge	r0, (UNDEF: 1)
    1fb0:	00000726 	andeq	r0, r0, r6, lsr #14
    1fb4:	a301040f 	movwge	r0, #5135	; 0x140f
    1fb8:	00000798 	muleq	r0, r8, r7
    1fbc:	000c6911 	andeq	r6, ip, r1, lsl r9
    1fc0:	f2a50100 	vaddw.s32	q0, <illegal reg q2.5>, d0
    1fc4:	00000000 	andeq	r0, r0, r0
    1fc8:	000ff811 	andeq	pc, pc, r1, lsl r8	; <UNPREDICTABLE>
    1fcc:	1ba80100 	blne	fea023d4 <BootRAM+0xd972b75>
    1fd0:	02000007 	andeq	r0, r0, #7
    1fd4:	000c5f11 	andeq	r5, ip, r1, lsl pc
    1fd8:	60ab0100 	adcvs	r0, fp, r0, lsl #2
    1fdc:	03000007 	movweq	r0, #7
    1fe0:	10930200 	addsne	r0, r3, r0, lsl #4
    1fe4:	ad010000 	stcge	0, cr0, [r1, #-0]
    1fe8:	0000076b 	andeq	r0, r0, fp, ror #14
    1fec:	af011c0f 	svcge	0x00011c0f
    1ff0:	00000800 	andeq	r0, r0, r0, lsl #16
    1ff4:	4c524310 	mrrcmi	3, 1, r4, r2, cr0
    1ff8:	00b10100 	adcseq	r0, r1, r0, lsl #2
    1ffc:	00000008 	andeq	r0, r0, r8
    2000:	48524310 	ldmdami	r2, {r4, r8, r9, lr}^
    2004:	00b20100 	adcseq	r0, r2, r0, lsl #2
    2008:	04000008 	streq	r0, [r0], #-8
    200c:	52444910 	subpl	r4, r4, #16, 18	; 0x40000
    2010:	00b30100 	adcseq	r0, r3, r0, lsl #2
    2014:	08000008 	stmdaeq	r0, {r3}
    2018:	52444f10 	subpl	r4, r4, #16, 30	; 0x40
    201c:	00b40100 	adcseq	r0, r4, r0, lsl #2
    2020:	0c000008 	stceq	0, cr0, [r0], {8}
    2024:	000c5a11 	andeq	r5, ip, r1, lsl sl
    2028:	00b50100 	adcseq	r0, r5, r0, lsl #2
    202c:	10000008 	andne	r0, r0, r8
    2030:	52524210 	subspl	r4, r2, #16, 4
    2034:	00b60100 	adcseq	r0, r6, r0, lsl #2
    2038:	14000008 	strne	r0, [r0], #-8
    203c:	0011c111 	andseq	ip, r1, r1, lsl r1
    2040:	00b70100 	adcseq	r0, r7, r0, lsl #2
    2044:	18000008 	stmdane	r0, {r3}
    2048:	00fd0c00 	rscseq	r0, sp, r0, lsl #24
    204c:	2b020000 	blcs	82054 <__Stack_Size+0x81854>
    2050:	01000010 	tsteq	r0, r0, lsl r0
    2054:	0007a3b8 			; <UNDEFINED> instruction: 0x0007a3b8
    2058:	07db1a00 	ldrbeq	r1, [fp, r0, lsl #20]
    205c:	3a010000 	bcc	42064 <__Stack_Size+0x41864>
    2060:	00083e01 	andeq	r3, r8, r1, lsl #28
    2064:	11561b00 	cmpne	r6, r0, lsl #22
    2068:	3a010000 	bcc	42070 <__Stack_Size+0x41870>
    206c:	00000113 	andeq	r0, r0, r3, lsl r1
    2070:	6e69701c 	mcrvs	0, 3, r7, cr9, cr12, {0}
    2074:	293a0100 	ldmdbcs	sl!, {r8}
    2078:	1c000001 	stcne	0, cr0, [r0], {1}
    207c:	006c6176 	rsbeq	r6, ip, r6, ror r1
    2080:	01293a01 	teqeq	r9, r1, lsl #20
    2084:	1d000000 	stcne	0, cr0, [r0, #-0]
    2088:	00001003 	andeq	r1, r0, r3
    208c:	01011f01 	tsteq	r1, r1, lsl #30
    2090:	00000863 	andeq	r0, r0, r3, ror #16
    2094:	000f731e 	andeq	r7, pc, lr, lsl r3	; <UNPREDICTABLE>
    2098:	011f0100 	tsteq	pc, r0, lsl #2
    209c:	00000863 	andeq	r0, r0, r3, ror #16
    20a0:	0068631f 	rsbeq	r6, r8, pc, lsl r3
    20a4:	e7011f01 	str	r1, [r1, -r1, lsl #30]
    20a8:	00000000 	andeq	r0, r0, r0
    20ac:	04f50408 	ldrbteq	r0, [r5], #1032	; 0x408
    20b0:	e21d0000 	ands	r0, sp, #0
    20b4:	0100000e 	tsteq	r0, lr
    20b8:	8f010125 	svchi	0x00010125
    20bc:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    20c0:	00000f73 	andeq	r0, r0, r3, ror pc
    20c4:	63012501 	movwvs	r2, #5377	; 0x1501
    20c8:	1f000008 	svcne	0x00000008
    20cc:	00727473 	rsbseq	r7, r2, r3, ror r4
    20d0:	8f012501 	svchi	0x00012501
    20d4:	00000008 	andeq	r0, r0, r8
    20d8:	00e70408 	rsceq	r0, r7, r8, lsl #8
    20dc:	821d0000 	andshi	r0, sp, #0
    20e0:	0100000c 	tsteq	r0, ip
    20e4:	af01024c 	svcge	0x0001024c
    20e8:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    20ec:	00000ddc 	ldrdeq	r0, [r0], -ip
    20f0:	1e024c01 	cdpne	12, 0, cr4, cr2, cr1, {0}
    20f4:	00000001 	andeq	r0, r0, r1
    20f8:	000c4b20 	andeq	r4, ip, r0, lsr #22
    20fc:	02ae0100 	adceq	r0, lr, #0, 2
    2100:	00000178 	andeq	r0, r0, r8, ror r1
    2104:	0008d901 	andeq	sp, r8, r1, lsl #18
    2108:	0d731e00 	ldcleq	14, cr1, [r3, #-0]
    210c:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    2110:	00011302 	andeq	r1, r1, r2, lsl #6
    2114:	0ea62100 	fdveqs	f2, f6, f0
    2118:	af010000 	svcge	0x00010000
    211c:	00011302 	andeq	r1, r1, r2, lsl #6
    2120:	32220000 	eorcc	r0, r2, #0
    2124:	0100000e 	tsteq	r0, lr
    2128:	1d0102e4 	sfmne	f0, 4, [r1, #-912]	; 0xfffffc70
    212c:	00000cc4 	andeq	r0, r0, r4, asr #25
    2130:	01029801 	tsteq	r2, r1, lsl #16
    2134:	000008fc 	strdeq	r0, [r0], -ip
    2138:	000c8d21 	andeq	r8, ip, r1, lsr #26
    213c:	02990100 	addseq	r0, r9, #0, 2
    2140:	000008fc 	strdeq	r0, [r0], -ip
    2144:	21040800 	tstcs	r4, r0, lsl #16
    2148:	1d000003 	stcne	0, cr0, [r0, #-12]
    214c:	00001018 	andeq	r1, r0, r8, lsl r0
    2150:	01022601 	tsteq	r2, r1, lsl #12
    2154:	00000940 	andeq	r0, r0, r0, asr #18
    2158:	000eb51e 	andeq	fp, lr, lr, lsl r5
    215c:	02260100 	eoreq	r0, r6, #0, 2
    2160:	00000113 	andeq	r0, r0, r3, lsl r1
    2164:	000e7423 	andeq	r7, lr, r3, lsr #8
    2168:	022a0100 	eoreq	r0, sl, #0, 2
    216c:	000000c2 	andeq	r0, r0, r2, asr #1
    2170:	00117621 	andseq	r7, r1, r1, lsr #12
    2174:	022b0100 	eoreq	r0, fp, #0, 2
    2178:	00000113 	andeq	r0, r0, r3, lsl r1
    217c:	000ef421 	andeq	pc, lr, r1, lsr #8
    2180:	022d0100 	eoreq	r0, sp, #0, 2
    2184:	0000091b 	andeq	r0, r0, fp, lsl r9
    2188:	027f2000 	rsbseq	r2, pc, #0
    218c:	f3010000 	vhadd.u8	d0, d1, d0
    2190:	00003002 	andeq	r3, r0, r2
    2194:	096a0100 	stmdbeq	sl!, {r8}^
    2198:	701f0000 	andsvc	r0, pc, r0
    219c:	01006e69 	tsteq	r0, r9, ror #28
    21a0:	005b02f3 	ldrsheq	r0, [fp], #-35	; 0xffffffdd
    21a4:	27210000 	strcs	r0, [r1, -r0]!
    21a8:	0100000d 	tsteq	r0, sp
    21ac:	003002f5 	ldrshteq	r0, [r0], -r5
    21b0:	1d000000 	stcne	0, cr0, [r0, #-0]
    21b4:	00000bfb 	strdeq	r0, [r0], -fp
    21b8:	01013801 	tsteq	r1, r1, lsl #16
    21bc:	00000991 	muleq	r0, r1, r9
    21c0:	746d661f 	strbtvc	r6, [sp], #-1567	; 0x61f
    21c4:	01380100 	teqeq	r8, r0, lsl #2
    21c8:	000000dc 	ldrdeq	r0, [r0], -ip
    21cc:	0f522124 	svceq	0x00522124
    21d0:	3a010000 	bcc	421d8 <__Stack_Size+0x419d8>
    21d4:	00010801 	andeq	r0, r1, r1, lsl #16
    21d8:	6c1d0000 	ldcvs	0, cr0, [sp], {-0}
    21dc:	0100000f 	tsteq	r0, pc
    21e0:	c301012e 	movwgt	r0, #4398	; 0x112e
    21e4:	1f000009 	svcne	0x00000009
    21e8:	00746d66 	rsbseq	r6, r4, r6, ror #26
    21ec:	dc012e01 	stcle	14, cr2, [r1], {1}
    21f0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    21f4:	00000f52 	andeq	r0, r0, r2, asr pc
    21f8:	08012e01 	stmdaeq	r1, {r0, r9, sl, fp, sp}
    21fc:	21000001 	tstcs	r0, r1
    2200:	00000e7c 	andeq	r0, r0, ip, ror lr
    2204:	c3013001 	movwgt	r3, #4097	; 0x1001
    2208:	00000009 	andeq	r0, r0, r9
    220c:	0000d515 	andeq	sp, r0, r5, lsl r5
    2210:	0009d300 	andeq	sp, r9, r0, lsl #6
    2214:	00bb1600 	adcseq	r1, fp, r0, lsl #12
    2218:	00c70000 	sbceq	r0, r7, r0
    221c:	00096a25 	andeq	r6, r9, r5, lsr #20
    2220:	00000000 	andeq	r0, r0, r0
    2224:	00004800 	andeq	r4, r0, r0, lsl #16
    2228:	949c0100 	ldrls	r0, [ip], #256	; 0x100
    222c:	2600000a 	strcs	r0, [r0], -sl
    2230:	00000977 	andeq	r0, r0, r7, ror r9
    2234:	24709102 	ldrbtcs	r9, [r0], #-258	; 0x102
    2238:	00098427 	andeq	r8, r9, r7, lsr #8
    223c:	9c910300 	ldcls	3, cr0, [r1], {0}
    2240:	0977267e 	ldmdbeq	r7!, {r1, r2, r3, r4, r5, r6, r9, sl, sp}^
    2244:	03060000 	movweq	r0, #24576	; 0x6000
    2248:	00000000 	andeq	r0, r0, r0
    224c:	0991289f 	ldmibeq	r1, {r0, r1, r2, r3, r4, r7, fp, sp}
    2250:	00000000 	andeq	r0, r0, r0
    2254:	02000000 	andeq	r0, r0, #0
    2258:	3c010000 	stccc	0, cr0, [r1], {-0}
    225c:	09aa2901 	stmibeq	sl!, {r0, r8, fp, sp}
    2260:	9e260000 	cdpls	0, 2, cr0, cr6, cr0, {0}
    2264:	06000009 	streq	r0, [r0], -r9
    2268:	00000003 	andeq	r0, r0, r3
    226c:	002a9f00 	eoreq	r9, sl, r0, lsl #30
    2270:	27000002 	strcs	r0, [r0, -r2]
    2274:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
    2278:	7ea09103 	tanvcs	f1, f3
    227c:	0008692b 	andeq	r6, r8, fp, lsr #18
    2280:	00000000 	andeq	r0, r0, r0
    2284:	00001c00 	andeq	r1, r0, r0, lsl #24
    2288:	01330100 	teqeq	r3, r0, lsl #2
    228c:	00000a71 	andeq	r0, r0, r1, ror sl
    2290:	0008822c 	andeq	r8, r8, ip, lsr #4
    2294:	00040300 	andeq	r0, r4, r0, lsl #6
    2298:	08762900 	ldmdaeq	r6!, {r8, fp, sp}^
    229c:	3e2d0000 	cdpcc	0, 2, cr0, cr13, cr0, {0}
    22a0:	00000008 	andeq	r0, r0, r8
    22a4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    22a8:	01000000 	mrseq	r0, (UNDEF: 0)
    22ac:	57290129 	strpl	r0, [r9, -r9, lsr #2]!
    22b0:	29000008 	stmdbcs	r0, {r3}
    22b4:	0000084b 	andeq	r0, r0, fp, asr #16
    22b8:	002e0000 	eoreq	r0, lr, r0
    22bc:	dc000000 	stcle	0, cr0, [r0], {-0}
    22c0:	2f000014 	svccs	0x00000014
    22c4:	91025201 	tstls	r2, r1, lsl #4
    22c8:	51012f54 	tstpl	r1, r4, asr pc
    22cc:	00000305 	andeq	r0, r0, r5, lsl #6
    22d0:	012f0000 	teqeq	pc, r0
    22d4:	80910350 	addshi	r0, r1, r0, asr r3
    22d8:	0000007e 	andeq	r0, r0, lr, ror r0
    22dc:	096a2500 	stmdbeq	sl!, {r8, sl, sp}^
    22e0:	00000000 	andeq	r0, r0, r0
    22e4:	00480000 	subeq	r0, r8, r0
    22e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    22ec:	00000b55 	andeq	r0, r0, r5, asr fp
    22f0:	00097726 	andeq	r7, r9, r6, lsr #14
    22f4:	70910200 	addsvc	r0, r1, r0, lsl #4
    22f8:	09842724 	stmibeq	r4, {r2, r5, r8, r9, sl, sp}
    22fc:	91030000 	mrsls	r0, (UNDEF: 3)
    2300:	77267e9c 			; <UNDEFINED> instruction: 0x77267e9c
    2304:	06000009 	streq	r0, [r0], -r9
    2308:	00000003 	andeq	r0, r0, r3
    230c:	91289f00 	teqls	r8, r0, lsl #30
    2310:	00000009 	andeq	r0, r0, r9
    2314:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2318:	01000002 	tsteq	r0, r2
    231c:	aa29013c 	bge	a42814 <__Stack_Size+0xa42014>
    2320:	26000009 	strcs	r0, [r0], -r9
    2324:	0000099e 	muleq	r0, lr, r9
    2328:	00000306 	andeq	r0, r0, r6, lsl #6
    232c:	2a9f0000 	bcs	fe7c2334 <BootRAM+0xd732ad5>
    2330:	00000218 	andeq	r0, r0, r8, lsl r2
    2334:	0009b627 	andeq	fp, r9, r7, lsr #12
    2338:	a0910300 	addsge	r0, r1, r0, lsl #6
    233c:	08692b7e 	stmdaeq	r9!, {r1, r2, r3, r4, r5, r6, r8, r9, fp, sp}^
    2340:	00000000 	andeq	r0, r0, r0
    2344:	001c0000 	andseq	r0, ip, r0
    2348:	33010000 	movwcc	r0, #4096	; 0x1000
    234c:	000b3201 	andeq	r3, fp, r1, lsl #4
    2350:	08822c00 	stmeq	r2, {sl, fp, sp}
    2354:	043c0000 	ldrteq	r0, [ip], #-0
    2358:	76290000 	strtvc	r0, [r9], -r0
    235c:	2d000008 	stccs	0, cr0, [r0, #-32]	; 0xffffffe0
    2360:	0000083e 	andeq	r0, r0, lr, lsr r8
    2364:	00000000 	andeq	r0, r0, r0
    2368:	0000000e 	andeq	r0, r0, lr
    236c:	29012901 	stmdbcs	r1, {r0, r8, fp, sp}
    2370:	00000857 	andeq	r0, r0, r7, asr r8
    2374:	00084b29 	andeq	r4, r8, r9, lsr #22
    2378:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    237c:	00000000 	andeq	r0, r0, r0
    2380:	000014dc 	ldrdeq	r1, [r0], -ip
    2384:	0252012f 	subseq	r0, r2, #-1073741813	; 0xc000000b
    2388:	012f5491 			; <UNDEFINED> instruction: 0x012f5491
    238c:	00030551 	andeq	r0, r3, r1, asr r5
    2390:	2f000000 	svccs	0x00000000
    2394:	91035001 	tstls	r3, r1
    2398:	00007e80 	andeq	r7, r0, r0, lsl #29
    239c:	10250000 	eorne	r0, r5, r0
    23a0:	c8000008 	stmdagt	r0, {r3}
    23a4:	16080011 			; <UNDEFINED> instruction: 0x16080011
    23a8:	01000000 	mrseq	r0, (UNDEF: 0)
    23ac:	000b829c 	muleq	fp, ip, r2
    23b0:	081c2600 	ldmdaeq	ip, {r9, sl, sp}
    23b4:	50010000 	andpl	r0, r1, r0
    23b8:	0008272c 	andeq	r2, r8, ip, lsr #14
    23bc:	00047500 	andeq	r7, r4, r0, lsl #10
    23c0:	08322c00 	ldmdaeq	r2!, {sl, fp, sp}
    23c4:	04960000 	ldreq	r0, [r6], #0
    23c8:	30000000 	andcc	r0, r0, r0
    23cc:	00000b05 	andeq	r0, r0, r5, lsl #22
    23d0:	01783f01 	cmneq	r8, r1, lsl #30
    23d4:	11e00000 	mvnne	r0, r0
    23d8:	00120800 	andseq	r0, r2, r0, lsl #16
    23dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    23e0:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    23e4:	00115631 	andseq	r5, r1, r1, lsr r6
    23e8:	133f0100 	teqne	pc, #0, 2
    23ec:	cc000001 	stcgt	0, cr0, [r0], {1}
    23f0:	32000004 	andcc	r0, r0, #4
    23f4:	006e6970 	rsbeq	r6, lr, r0, ror r9
    23f8:	01293f01 	teqeq	r9, r1, lsl #30
    23fc:	04ed0000 	strbteq	r0, [sp], #0
    2400:	33000000 	movwcc	r0, #0
    2404:	00000b50 	andeq	r0, r0, r0, asr fp
    2408:	11f44801 	mvnsne	r4, r1, lsl #16
    240c:	00600800 	rsbeq	r0, r0, r0, lsl #16
    2410:	9c010000 	stcls	0, cr0, [r1], {-0}
    2414:	00000ca3 	andeq	r0, r0, r3, lsr #25
    2418:	00115631 	andseq	r5, r1, r1, lsr r6
    241c:	13480100 	movtne	r0, #33024	; 0x8100
    2420:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    2424:	32000005 	andcc	r0, r0, #5
    2428:	006e6970 	rsbeq	r6, lr, r0, ror r9
    242c:	01294801 	teqeq	r9, r1, lsl #16
    2430:	053c0000 	ldreq	r0, [ip, #-0]!
    2434:	b1310000 	teqlt	r1, r0
    2438:	0100000a 	tsteq	r0, sl
    243c:	00012948 	andeq	r2, r1, r8, asr #18
    2440:	00055d00 	andeq	r5, r5, r0, lsl #26
    2444:	0e613400 	cdpeq	4, 6, cr3, cr1, cr0, {0}
    2448:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    244c:	00000113 	andeq	r0, r0, r3, lsl r1
    2450:	49315301 	ldmdbmi	r1!, {r0, r8, r9, ip, lr}
    2454:	0100000d 	tsteq	r0, sp
    2458:	00012948 	andeq	r2, r1, r8, asr #18
    245c:	0005c100 	andeq	ip, r5, r0, lsl #2
    2460:	00633500 	rsbeq	r3, r3, r0, lsl #10
    2464:	01134c01 	tsteq	r3, r1, lsl #24
    2468:	05ed0000 	strbeq	r0, [sp, #0]!
    246c:	10360000 	eorsne	r0, r6, r0
    2470:	f6000008 			; <UNDEFINED> instruction: 0xf6000008
    2474:	30080011 	andcc	r0, r8, r1, lsl r0
    2478:	01000002 	tsteq	r0, r2
    247c:	000c504a 	andeq	r5, ip, sl, asr #32
    2480:	08322c00 	ldmdaeq	r2!, {sl, fp, sp}
    2484:	065d0000 	ldrbeq	r0, [sp], -r0
    2488:	27290000 	strcs	r0, [r9, -r0]!
    248c:	2c000008 	stccs	0, cr0, [r0], {8}
    2490:	0000081c 	andeq	r0, r0, ip, lsl r8
    2494:	0000069a 	muleq	r0, sl, r6
    2498:	08103600 	ldmdaeq	r0, {r9, sl, ip, sp}
    249c:	122e0000 	eorne	r0, lr, #0
    24a0:	02480800 	subeq	r0, r8, #0, 16
    24a4:	54010000 	strpl	r0, [r1], #-0
    24a8:	00000c7b 	andeq	r0, r0, fp, ror ip
    24ac:	0008322c 	andeq	r3, r8, ip, lsr #4
    24b0:	0006c800 	andeq	ip, r6, r0, lsl #16
    24b4:	08272900 	stmdaeq	r7!, {r8, fp, sp}
    24b8:	1c2c0000 	stcne	0, cr0, [ip], #-0
    24bc:	f2000008 	vhadd.s8	d0, d0, d8
    24c0:	00000006 	andeq	r0, r0, r6
    24c4:	00081037 	andeq	r1, r8, r7, lsr r0
    24c8:	00123e00 	andseq	r3, r2, r0, lsl #28
    24cc:	00026008 	andeq	r6, r2, r8
    24d0:	2c5a0100 	ldfcse	f0, [sl], {-0}
    24d4:	00000832 	andeq	r0, r0, r2, lsr r8
    24d8:	00000715 	andeq	r0, r0, r5, lsl r7
    24dc:	00082729 	andeq	r2, r8, r9, lsr #14
    24e0:	081c2c00 	ldmdaeq	ip, {sl, fp, sp}
    24e4:	07410000 	strbeq	r0, [r1, -r0]
    24e8:	00000000 	andeq	r0, r0, r0
    24ec:	00083e25 	andeq	r3, r8, r5, lsr #28
    24f0:	00000000 	andeq	r0, r0, r0
    24f4:	00000a00 	andeq	r0, r0, r0, lsl #20
    24f8:	c59c0100 	ldrgt	r0, [ip, #256]	; 0x100
    24fc:	2600000c 	strcs	r0, [r0], -ip
    2500:	0000084b 	andeq	r0, r0, fp, asr #16
    2504:	57265001 	strpl	r5, [r6, -r1]!
    2508:	01000008 	tsteq	r0, r8
    250c:	69250051 	stmdbvs	r5!, {r0, r4, r6}
    2510:	00000008 	andeq	r0, r0, r8
    2514:	16000000 	strne	r0, [r0], -r0
    2518:	01000000 	mrseq	r0, (UNDEF: 0)
    251c:	000d049c 	muleq	sp, ip, r4
    2520:	08762600 	ldmdaeq	r6!, {r9, sl, sp}^
    2524:	50010000 	andpl	r0, r1, r0
    2528:	0008822c 	andeq	r8, r8, ip, lsr #4
    252c:	00076400 	andeq	r6, r7, r0, lsl #8
    2530:	083e2d00 	ldmdaeq	lr!, {r8, sl, fp, sp}
    2534:	00000000 	andeq	r0, r0, r0
    2538:	00080000 	andeq	r0, r8, r0
    253c:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    2540:	08572901 	ldmdaeq	r7, {r0, r8, fp, sp}^
    2544:	4b290000 	blmi	a4254c <__Stack_Size+0xa41d4c>
    2548:	00000008 	andeq	r0, r0, r8
    254c:	09912500 	ldmibeq	r1, {r8, sl, sp}
    2550:	00000000 	andeq	r0, r0, r0
    2554:	00380000 	eorseq	r0, r8, r0
    2558:	9c010000 	stcls	0, cr0, [r1], {-0}
    255c:	00000d88 	andeq	r0, r0, r8, lsl #27
    2560:	00099e2c 	andeq	r9, r9, ip, lsr #28
    2564:	00078f00 	andeq	r8, r7, r0, lsl #30
    2568:	09aa2c00 	stmibeq	sl!, {sl, fp, sp}
    256c:	07bb0000 	ldreq	r0, [fp, r0]!
    2570:	b6270000 	strtlt	r0, [r7], -r0
    2574:	03000009 	movweq	r0, #9
    2578:	2b7eb091 	blcs	1fae7c4 <__Stack_Size+0x1fadfc4>
    257c:	00000869 	andeq	r0, r0, r9, ror #16
    2580:	00000000 	andeq	r0, r0, r0
    2584:	0000001c 	andeq	r0, r0, ip, lsl r0
    2588:	70013301 	andvc	r3, r1, r1, lsl #6
    258c:	2c00000d 	stccs	0, cr0, [r0], {13}
    2590:	00000882 	andeq	r0, r0, r2, lsl #17
    2594:	000007ce 	andeq	r0, r0, lr, asr #15
    2598:	00087629 	andeq	r7, r8, r9, lsr #12
    259c:	083e2d00 	ldmdaeq	lr!, {r8, sl, fp, sp}
    25a0:	00000000 	andeq	r0, r0, r0
    25a4:	000e0000 	andeq	r0, lr, r0
    25a8:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    25ac:	08572901 	ldmdaeq	r7, {r0, r8, fp, sp}^
    25b0:	4b290000 	blmi	a425b8 <__Stack_Size+0xa41db8>
    25b4:	00000008 	andeq	r0, r0, r8
    25b8:	00002e00 	andeq	r2, r0, r0, lsl #28
    25bc:	14dc0000 	ldrbne	r0, [ip], #0
    25c0:	012f0000 	teqeq	pc, r0
    25c4:	01f30351 	mvnseq	r0, r1, asr r3
    25c8:	50012f50 	andpl	r2, r1, r0, asr pc
    25cc:	00007d02 	andeq	r7, r0, r2, lsl #26
    25d0:	096a2500 	stmdbeq	sl!, {r8, sl, sp}^
    25d4:	12540000 	subsne	r0, r4, #0
    25d8:	00440800 	subeq	r0, r4, r0, lsl #16
    25dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    25e0:	00000e38 	andeq	r0, r0, r8, lsr lr
    25e4:	00097726 	andeq	r7, r9, r6, lsr #14
    25e8:	70910200 	addsvc	r0, r1, r0, lsl #4
    25ec:	09842724 	stmibeq	r4, {r2, r5, r8, r9, sl, sp}
    25f0:	91030000 	mrsls	r0, (UNDEF: 3)
    25f4:	91287e9c 			; <UNDEFINED> instruction: 0x91287e9c
    25f8:	60000009 	andvs	r0, r0, r9
    25fc:	78080012 	stmdavc	r8, {r1, r4}
    2600:	01000002 	tsteq	r0, r2
    2604:	aa29013c 	bge	a42afc <__Stack_Size+0xa422fc>
    2608:	2c000009 	stccs	0, cr0, [r0], {9}
    260c:	0000099e 	muleq	r0, lr, r9
    2610:	000007f9 	strdeq	r0, [r0], -r9
    2614:	0002782a 	andeq	r7, r2, sl, lsr #16
    2618:	09b62700 	ldmibeq	r6!, {r8, r9, sl, sp}
    261c:	91030000 	mrsls	r0, (UNDEF: 3)
    2620:	692b7ea0 	stmdbvs	fp!, {r5, r7, r9, sl, fp, ip, sp, lr}
    2624:	6e000008 	cdpvs	0, 0, cr0, cr0, cr8, {0}
    2628:	1c080012 	stcne	0, cr0, [r8], {18}
    262c:	01000000 	mrseq	r0, (UNDEF: 0)
    2630:	0e170133 	mrceq	1, 0, r0, cr7, cr3, {1}
    2634:	822c0000 	eorhi	r0, ip, #0
    2638:	30000008 	andcc	r0, r0, r8
    263c:	29000008 	stmdbcs	r0, {r3}
    2640:	00000876 	andeq	r0, r0, r6, ror r8
    2644:	00083e2d 	andeq	r3, r8, sp, lsr #28
    2648:	00127400 	andseq	r7, r2, r0, lsl #8
    264c:	00000e08 	andeq	r0, r0, r8, lsl #28
    2650:	01290100 	teqeq	r9, r0, lsl #2
    2654:	00085729 	andeq	r5, r8, r9, lsr #14
    2658:	084b2900 	stmdaeq	fp, {r8, fp, sp}^
    265c:	00000000 	andeq	r0, r0, r0
    2660:	00126a2e 	andseq	r6, r2, lr, lsr #20
    2664:	0014dc08 	andseq	sp, r4, r8, lsl #24
    2668:	52012f00 	andpl	r2, r1, #0, 30
    266c:	2f549102 	svccs	0x00549102
    2670:	91035101 	tstls	r3, r1, lsl #2
    2674:	012f0650 	teqeq	pc, r0, asr r6	; <UNPREDICTABLE>
    2678:	80910350 	addshi	r0, r1, r0, asr r3
    267c:	0000007e 	andeq	r0, r0, lr, ror r0
    2680:	0d2c3800 	stceq	8, cr3, [ip, #-0]
    2684:	40010000 	andmi	r0, r1, r0
    2688:	00000001 	andeq	r0, r0, r1
    268c:	0000bc00 	andeq	fp, r0, r0, lsl #24
    2690:	1d9c0100 	ldfnes	f0, [ip]
    2694:	3900000f 	stmdbcc	r0, {r0, r1, r2, r3}
    2698:	00000e8f 	andeq	r0, r0, pc, lsl #29
    269c:	c9014001 	stmdbgt	r1, {r0, lr}
    26a0:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
    26a4:	39000008 	stmdbcc	r0, {r3}
    26a8:	0000197a 	andeq	r1, r0, sl, ror r9
    26ac:	25014001 	strcs	r4, [r1, #-1]
    26b0:	9d000000 	stcls	0, cr0, [r0, #-0]
    26b4:	3a000008 	bcc	26dc <__Stack_Size+0x1edc>
    26b8:	42010069 	andmi	r0, r1, #105	; 0x69
    26bc:	00005b01 	andeq	r5, r0, r1, lsl #22
    26c0:	0008d100 	andeq	sp, r8, r0, lsl #2
    26c4:	73633b00 	cmnvc	r3, #0, 22
    26c8:	01430100 	mrseq	r0, (UNDEF: 83)
    26cc:	00000f1d 	andeq	r0, r0, sp, lsl pc
    26d0:	3c4c9102 	stfccp	f1, [ip], {2}
    26d4:	00000000 	andeq	r0, r0, r0
    26d8:	000009d3 	ldrdeq	r0, [r0], -r3
    26dc:	00000ea1 	andeq	r0, r0, r1, lsr #29
    26e0:	0550012f 	ldrbeq	r0, [r0, #-303]	; 0x12f
    26e4:	00000003 	andeq	r0, r0, r3
    26e8:	003c0000 	eorseq	r0, ip, r0
    26ec:	6a000000 	bvs	26f4 <__Stack_Size+0x1ef4>
    26f0:	b8000009 	stmdalt	r0, {r0, r3}
    26f4:	2f00000e 	svccs	0x0000000e
    26f8:	03055001 	movweq	r5, #20481	; 0x5001
    26fc:	00000000 	andeq	r0, r0, r0
    2700:	00003c00 	andeq	r3, r0, r0, lsl #24
    2704:	096a0000 	stmdbeq	sl!, {}^	; <UNPREDICTABLE>
    2708:	0ed50000 	cdpeq	0, 13, cr0, cr5, cr0, {0}
    270c:	012f0000 	teqeq	pc, r0
    2710:	00790251 	rsbseq	r0, r9, r1, asr r2
    2714:	0550012f 	ldrbeq	r0, [r0, #-303]	; 0x12f
    2718:	00000003 	andeq	r0, r0, r3
    271c:	003c0000 	eorseq	r0, ip, r0
    2720:	94000000 	strls	r0, [r0], #-0
    2724:	ec00000a 	stc	0, cr0, [r0], {10}
    2728:	2f00000e 	svccs	0x0000000e
    272c:	03055001 	movweq	r5, #20481	; 0x5001
    2730:	00000000 	andeq	r0, r0, r0
    2734:	00003c00 	andeq	r3, r0, r0, lsl #24
    2738:	096a0000 	stmdbeq	sl!, {}^	; <UNPREDICTABLE>
    273c:	0f090000 	svceq	0x00090000
    2740:	012f0000 	teqeq	pc, r0
    2744:	00790251 	rsbseq	r0, r9, r1, asr r2
    2748:	0550012f 	ldrbeq	r0, [r0, #-303]	; 0x12f
    274c:	00000003 	andeq	r0, r0, r3
    2750:	002e0000 	eoreq	r0, lr, r0
    2754:	6a000000 	bvs	275c <__Stack_Size+0x1f5c>
    2758:	2f000009 	svccs	0x00000009
    275c:	03055001 	movweq	r5, #20481	; 0x5001
    2760:	00000000 	andeq	r0, r0, r0
    2764:	d5150000 	ldrle	r0, [r5, #-0]
    2768:	2d000000 	stccs	0, cr0, [r0, #-0]
    276c:	1600000f 	strne	r0, [r0], -pc
    2770:	000000bb 	strheq	r0, [r0], -fp
    2774:	8e380010 	mrchi	0, 1, r0, cr8, cr0, {0}
    2778:	0100000b 	tsteq	r0, fp
    277c:	12980166 	addsne	r0, r8, #-2147483623	; 0x80000019
    2780:	00880800 	addeq	r0, r8, r0, lsl #16
    2784:	9c010000 	stcls	0, cr0, [r1], {-0}
    2788:	0000101f 	andeq	r1, r0, pc, lsl r0
    278c:	000f123d 	andeq	r1, pc, sp, lsr r2	; <UNPREDICTABLE>
    2790:	01670100 	cmneq	r7, r0, lsl #2
    2794:	00000798 	muleq	r0, r8, r7
    2798:	3d5c9102 	ldfccp	f1, [ip, #-8]
    279c:	00000e3c 	andeq	r0, r0, ip, lsr lr
    27a0:	f5016801 			; <UNDEFINED> instruction: 0xf5016801
    27a4:	02000006 	andeq	r0, r0, #6
    27a8:	c33e6091 	teqgt	lr, #145	; 0x91
    27ac:	0100000d 	tsteq	r0, sp
    27b0:	005b0183 	subseq	r0, fp, r3, lsl #3
    27b4:	0f730000 	svceq	0x00730000
    27b8:	00240000 	eoreq	r0, r4, r0
    27bc:	0010cf3e 	andseq	ip, r0, lr, lsr pc
    27c0:	01860100 	orreq	r0, r6, r0, lsl #2
    27c4:	0000005b 	andeq	r0, r0, fp, asr r0
    27c8:	00000f85 	andeq	r0, r0, r5, lsl #31
    27cc:	a83c0024 	ldmdage	ip!, {r2, r5}
    27d0:	fb080012 	blx	202822 <__Stack_Size+0x202022>
    27d4:	9f000014 	svcls	0x00000014
    27d8:	2f00000f 	svccs	0x0000000f
    27dc:	31015101 	tstcc	r1, r1, lsl #2
    27e0:	0350012f 	cmpeq	r0, #-1073741813	; 0xc000000b
    27e4:	0040000a 	subeq	r0, r0, sl
    27e8:	0012b03c 	andseq	fp, r2, ip, lsr r0
    27ec:	0014fb08 	andseq	pc, r4, r8, lsl #22
    27f0:	000fb800 	andeq	fp, pc, r0, lsl #16
    27f4:	51012f00 	tstpl	r1, r0, lsl #30
    27f8:	012f3101 	teqeq	pc, r1, lsl #2
    27fc:	00740250 	rsbseq	r0, r4, r0, asr r2
    2800:	12ce3c00 	sbcne	r3, lr, #0, 24
    2804:	15120800 	ldrne	r0, [r2, #-2048]	; 0x800
    2808:	0fd20000 	svceq	0x00d20000
    280c:	012f0000 	teqeq	pc, r0
    2810:	5c910251 	lfmpl	f0, 4, [r1], {81}	; 0x51
    2814:	0250012f 	subseq	r0, r0, #-1073741813	; 0xc000000b
    2818:	3c000074 	stccc	0, cr0, [r0], {116}	; 0x74
    281c:	080012e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, ip}
    2820:	00001512 	andeq	r1, r0, r2, lsl r5
    2824:	00000fef 	andeq	r0, r0, pc, ror #31
    2828:	0251012f 	subseq	r0, r1, #-1073741813	; 0xc000000b
    282c:	012f5c91 			; <UNDEFINED> instruction: 0x012f5c91
    2830:	000c0550 	andeq	r0, ip, r0, asr r5
    2834:	00400108 	subeq	r0, r0, r8, lsl #2
    2838:	00130a3c 	andseq	r0, r3, ip, lsr sl
    283c:	00153508 	andseq	r3, r5, r8, lsl #10
    2840:	00100900 	andseq	r0, r0, r0, lsl #18
    2844:	51012f00 	tstpl	r1, r0, lsl #30
    2848:	2f609102 	svccs	0x00609102
    284c:	75025001 	strvc	r5, [r2, #-1]
    2850:	122e0000 	eorne	r0, lr, #0
    2854:	47080013 	smladmi	r8, r3, r0, r0
    2858:	2f000015 	svccs	0x00000015
    285c:	31015101 	tstcc	r1, r1, lsl #2
    2860:	0250012f 	subseq	r0, r0, #-1073741813	; 0xc000000b
    2864:	00000075 	andeq	r0, r0, r5, ror r0
    2868:	000ae522 	andeq	lr, sl, r2, lsr #10
    286c:	01890100 	orreq	r0, r9, r0, lsl #2
    2870:	101f3f01 	andsne	r3, pc, r1, lsl #30
    2874:	13200000 	teqne	r0, #0
    2878:	00500800 	subseq	r0, r0, r0, lsl #16
    287c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2880:	000aca38 	andeq	ip, sl, r8, lsr sl
    2884:	01930100 	orrseq	r0, r3, r0, lsl #2
    2888:	08001370 	stmdaeq	r0, {r4, r5, r6, r8, r9, ip}
    288c:	0000006c 	andeq	r0, r0, ip, rrx
    2890:	105b9c01 	subsne	r9, fp, r1, lsl #24
    2894:	b2400000 	sublt	r0, r0, #0
    2898:	01000011 	tsteq	r0, r1, lsl r0
    289c:	00300194 	mlaseq	r0, r4, r1, r0
    28a0:	00000000 	andeq	r0, r0, r0
    28a4:	000b6d41 	andeq	r6, fp, r1, asr #26
    28a8:	01bd0100 			; <UNDEFINED> instruction: 0x01bd0100
    28ac:	080013dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, ip}
    28b0:	00000014 	andeq	r0, r0, r4, lsl r0
    28b4:	f1389c01 			; <UNDEFINED> instruction: 0xf1389c01
    28b8:	0100000a 	tsteq	r0, sl
    28bc:	13f001c1 	mvnsne	r0, #1073741872	; 0x40000030
    28c0:	00200800 	eoreq	r0, r0, r0, lsl #16
    28c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    28c8:	0000109e 	muleq	r0, lr, r0
    28cc:	0013f842 	andseq	pc, r3, r2, asr #16
    28d0:	00000808 	andeq	r0, r0, r8, lsl #16
    28d4:	0ea64300 	cdpeq	3, 10, cr4, cr6, cr0, {0}
    28d8:	c4010000 	strgt	r0, [r1], #-0
    28dc:	00011301 	andeq	r1, r1, r1, lsl #6
    28e0:	00094400 	andeq	r4, r9, r0, lsl #8
    28e4:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    28e8:	00000da2 	andeq	r0, r0, r2, lsr #27
    28ec:	1001ce01 	andne	ip, r1, r1, lsl #28
    28f0:	28080014 	stmdacs	r8, {r2, r4}
    28f4:	01000000 	mrseq	r0, (UNDEF: 0)
    28f8:	0010c29c 	mulseq	r0, ip, r2
    28fc:	64694400 	strbtvs	r4, [r9], #-1024	; 0x400
    2900:	01ce0100 	biceq	r0, lr, r0, lsl #2
    2904:	000010c2 	andeq	r1, r0, r2, asr #1
    2908:	08005001 	stmdaeq	r0, {r0, ip, lr}
    290c:	00066204 	andeq	r6, r6, r4, lsl #4
    2910:	0d604500 	cfstr64eq	mvdx4, [r0, #-0]
    2914:	d6010000 	strle	r0, [r1], -r0
    2918:	00005b01 	andeq	r5, r0, r1, lsl #22
    291c:	00000000 	andeq	r0, r0, r0
    2920:	00000400 	andeq	r0, r0, r0, lsl #8
    2924:	f39c0100 	vaddw.u16	q0, q6, d0
    2928:	39000010 	stmdbcc	r0, {r4}
    292c:	00000eb5 			; <UNDEFINED> instruction: 0x00000eb5
    2930:	1301d601 	movwne	sp, #5633	; 0x1601
    2934:	57000001 	strpl	r0, [r0, -r1]
    2938:	00000009 	andeq	r0, r0, r9
    293c:	00090246 	andeq	r0, r9, r6, asr #4
    2940:	00000000 	andeq	r0, r0, r0
    2944:	00001800 	andeq	r1, r0, r0, lsl #16
    2948:	229c0100 	addscs	r0, ip, #0, 2
    294c:	2c000011 	stccs	0, cr0, [r0], {17}
    2950:	0000090f 	andeq	r0, r0, pc, lsl #18
    2954:	00000978 	andeq	r0, r0, r8, ror r9
    2958:	00092747 	andeq	r2, r9, r7, asr #14
    295c:	00099900 	andeq	r9, r9, r0, lsl #18
    2960:	09334700 	ldmdbeq	r3!, {r8, r9, sl, lr}
    2964:	09990000 	ldmibeq	r9, {}	; <UNPREDICTABLE>
    2968:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    296c:	00000bb7 			; <UNDEFINED> instruction: 0x00000bb7
    2970:	38023801 	stmdacc	r2, {r0, fp, ip, sp}
    2974:	a8080014 	stmdage	r8, {r2, r4}
    2978:	01000000 	mrseq	r0, (UNDEF: 0)
    297c:	0011da9c 	mulseq	r1, ip, sl
    2980:	0eb53900 	cdpeq	9, 11, cr3, cr5, cr0, {0}
    2984:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    2988:	00011302 	andeq	r1, r1, r2, lsl #6
    298c:	0009ac00 	andeq	sl, r9, r0, lsl #24
    2990:	08d94900 	ldmeq	r9, {r8, fp, lr}^
    2994:	14380000 	ldrtne	r0, [r8], #-0
    2998:	02900800 	addseq	r0, r0, #0, 16
    299c:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    29a0:	08e22b02 	stmiaeq	r2!, {r1, r8, r9, fp, sp}^
    29a4:	14460000 	strbne	r0, [r6], #-0
    29a8:	001c0800 	andseq	r0, ip, r0, lsl #16
    29ac:	40010000 	andmi	r0, r1, r0
    29b0:	00118102 	andseq	r8, r1, r2, lsl #2
    29b4:	14464200 	strbne	r4, [r6], #-512	; 0x200
    29b8:	001c0800 	andseq	r0, ip, r0, lsl #16
    29bc:	ef4a0000 	svc	0x004a0000
    29c0:	80000008 	andhi	r0, r0, r8
    29c4:	7e8083c2 	cdpvc	3, 8, cr8, cr0, cr2, {6}
    29c8:	1f490000 	svcne	0x00490000
    29cc:	66000010 			; <UNDEFINED> instruction: 0x66000010
    29d0:	a8080014 	stmdage	r8, {r2, r4}
    29d4:	01000002 	tsteq	r0, r2
    29d8:	024b0247 	subeq	r0, fp, #1879048196	; 0x70000004
    29dc:	96000009 	strls	r0, [r0], -r9
    29e0:	c8080014 	stmdagt	r8, {r2, r4}
    29e4:	01000002 	tsteq	r0, r2
    29e8:	11c70249 	bicne	r0, r7, r9, asr #4
    29ec:	0f2c0000 	svceq	0x002c0000
    29f0:	d8000009 	stmdale	r0, {r0, r3}
    29f4:	2a000009 	bcs	2a20 <__Stack_Size+0x2220>
    29f8:	000002c8 	andeq	r0, r0, r8, asr #5
    29fc:	00092747 	andeq	r2, r9, r7, asr #14
    2a00:	0009f900 	andeq	pc, r9, r0, lsl #18
    2a04:	09334700 	ldmdbeq	r3!, {r8, r9, sl, lr}
    2a08:	09f90000 	ldmibeq	r9!, {}^	; <UNPREDICTABLE>
    2a0c:	00000000 	andeq	r0, r0, r0
    2a10:	0014464c 	andseq	r4, r4, ip, asr #12
    2a14:	00155908 	andseq	r5, r5, r8, lsl #18
    2a18:	14664c00 	strbtne	r4, [r6], #-3072	; 0xc00
    2a1c:	15600800 	strbne	r0, [r0, #-2048]!	; 0x800
    2a20:	25000000 	strcs	r0, [r0, #-0]
    2a24:	00000895 	muleq	r0, r5, r8
    2a28:	00000000 	andeq	r0, r0, r0
    2a2c:	00000034 	andeq	r0, r0, r4, lsr r0
    2a30:	11f59c01 	mvnsne	r9, r1, lsl #24
    2a34:	a2260000 	eorge	r0, r6, #0
    2a38:	01000008 	tsteq	r0, r8
    2a3c:	a34d0050 	movtge	r0, #53328	; 0xd050
    2a40:	0100000c 	tsteq	r0, ip
    2a44:	005b025b 	subseq	r0, fp, fp, asr r2
    2a48:	00000000 	andeq	r0, r0, r0
    2a4c:	00680000 	rsbeq	r0, r8, r0
    2a50:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a54:	0000123a 	andeq	r1, r0, sl, lsr r2
    2a58:	000ead43 	andeq	sl, lr, r3, asr #26
    2a5c:	025d0100 	subseq	r0, sp, #0, 2
    2a60:	00000178 	andeq	r0, r0, r8, ror r1
    2a64:	00000a0c 	andeq	r0, r0, ip, lsl #20
    2a68:	00089528 	andeq	r9, r8, r8, lsr #10
    2a6c:	00000000 	andeq	r0, r0, r0
    2a70:	0002e000 	andeq	lr, r2, r0
    2a74:	026e0100 	rsbeq	r0, lr, #0, 2
    2a78:	0008a22c 	andeq	sl, r8, ip, lsr #4
    2a7c:	000a2c00 	andeq	r2, sl, r0, lsl #24
    2a80:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2a84:	000009e1 	andeq	r0, r0, r1, ror #19
    2a88:	e0027501 	and	r7, r2, r1, lsl #10
    2a8c:	70080014 	andvc	r0, r8, r4, lsl r0
    2a90:	01000000 	mrseq	r0, (UNDEF: 0)
    2a94:	0012d19c 	mulseq	r2, ip, r1
    2a98:	10ae4e00 	adcne	r4, lr, r0, lsl #28
    2a9c:	75010000 	strvc	r0, [r1, #-0]
    2aa0:	0012d102 	andseq	sp, r2, r2, lsl #2
    2aa4:	43500100 	cmpmi	r0, #0, 2
    2aa8:	000011a6 	andeq	r1, r0, r6, lsr #3
    2aac:	13027601 	movwne	r7, #9729	; 0x2601
    2ab0:	40000001 	andmi	r0, r0, r1
    2ab4:	4300000a 	movwmi	r0, #10
    2ab8:	00000e05 	andeq	r0, r0, r5, lsl #28
    2abc:	13027701 	movwne	r7, #9985	; 0x2701
    2ac0:	75000001 	strvc	r0, [r0, #-1]
    2ac4:	4300000a 	movwmi	r0, #10
    2ac8:	00000d24 	andeq	r0, r0, r4, lsr #26
    2acc:	13027801 	movwne	r7, #10241	; 0x2801
    2ad0:	9f000001 	svcls	0x00000001
    2ad4:	4300000a 	movwmi	r0, #10
    2ad8:	00000e94 	muleq	r0, r4, lr
    2adc:	13027901 	movwne	r7, #10497	; 0x2901
    2ae0:	d7000001 	strle	r0, [r0, -r1]
    2ae4:	4300000a 	movwmi	r0, #10
    2ae8:	0000105b 	andeq	r1, r0, fp, asr r0
    2aec:	13027a01 	movwne	r7, #10753	; 0x2a01
    2af0:	14000001 	strne	r0, [r0], #-1
    2af4:	4f00000b 	svcmi	0x0000000b
    2af8:	00000f4d 	andeq	r0, r0, sp, asr #30
    2afc:	d7027c01 	strle	r7, [r2, -r1, lsl #24]
    2b00:	80000012 	andhi	r0, r0, r2, lsl r0
    2b04:	7e8083da 	mcrvc	3, 4, r8, cr0, cr10, {6}
    2b08:	000c8d4f 	andeq	r8, ip, pc, asr #26
    2b0c:	027d0100 	rsbseq	r0, sp, #0, 2
    2b10:	000008fc 	strdeq	r0, [r0], -ip
    2b14:	8083c280 	addhi	ip, r3, r0, lsl #5
    2b18:	0408007e 	streq	r0, [r8], #-126	; 0x7e
    2b1c:	00000365 	andeq	r0, r0, r5, ror #6
    2b20:	04360408 	ldrteq	r0, [r6], #-1032	; 0x408
    2b24:	e2250000 	eor	r0, r5, #0
    2b28:	50000008 	andpl	r0, r0, r8
    2b2c:	28080015 	stmdacs	r8, {r0, r2, r4}
    2b30:	01000000 	mrseq	r0, (UNDEF: 0)
    2b34:	0012fb9c 	mulseq	r2, ip, fp
    2b38:	08ef4a00 	stmiaeq	pc!, {r9, fp, lr}^	; <UNPREDICTABLE>
    2b3c:	c2800000 	addgt	r0, r0, #0
    2b40:	007e8083 	rsbseq	r8, lr, r3, lsl #1
    2b44:	000c7238 	andeq	r7, ip, r8, lsr r2
    2b48:	02a20100 	adceq	r0, r2, #0, 2
    2b4c:	08001578 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, ip}
    2b50:	00000014 	andeq	r0, r0, r4, lsl r0
    2b54:	13239c01 	teqne	r3, #256	; 0x100
    2b58:	4d4f0000 	stclmi	0, cr0, [pc, #-0]	; 2b60 <__Stack_Size+0x2360>
    2b5c:	0100000f 	tsteq	r0, pc
    2b60:	12d702a3 	sbcsne	r0, r7, #805306378	; 0x3000000a
    2b64:	da800000 	ble	fe002b6c <BootRAM+0xcf7330d>
    2b68:	007e8083 	rsbseq	r8, lr, r3, lsl #1
    2b6c:	0008af25 	andeq	sl, r8, r5, lsr #30
    2b70:	00158c00 	andseq	r8, r5, r0, lsl #24
    2b74:	00004008 	andeq	r4, r0, r8
    2b78:	499c0100 	ldmibmi	ip, {r8}
    2b7c:	2c000013 	stccs	0, cr0, [r0], {19}
    2b80:	000008c0 	andeq	r0, r0, r0, asr #17
    2b84:	00000b42 	andeq	r0, r0, r2, asr #22
    2b88:	0008cc47 	andeq	ip, r8, r7, asr #24
    2b8c:	000b6300 	andeq	r6, fp, r0, lsl #6
    2b90:	5c450000 	marpl	acc0, r0, r5
    2b94:	0100000f 	tsteq	r0, pc
    2b98:	017802bf 	ldrheq	r0, [r8, #-47]!	; 0xffffffd1
    2b9c:	00000000 	andeq	r0, r0, r0
    2ba0:	00600000 	rsbeq	r0, r0, r0
    2ba4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ba8:	000013ab 	andeq	r1, r0, fp, lsr #7
    2bac:	000d7339 	andeq	r7, sp, r9, lsr r3
    2bb0:	02bf0100 	adcseq	r0, pc, #0, 2
    2bb4:	00000113 	andeq	r0, r0, r3, lsl r1
    2bb8:	00000b83 	andeq	r0, r0, r3, lsl #23
    2bbc:	01006e50 	tsteq	r0, r0, asr lr
    2bc0:	011e02bf 			; <UNDEFINED> instruction: 0x011e02bf
    2bc4:	0ba40000 	bleq	fe902bcc <BootRAM+0xd87336d>
    2bc8:	af280000 	svcge	0x00280000
    2bcc:	00000008 	andeq	r0, r0, r8
    2bd0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    2bd4:	01000002 	tsteq	r0, r2
    2bd8:	c02c02c1 	eorgt	r0, ip, r1, asr #5
    2bdc:	da000008 	ble	2c04 <__Stack_Size+0x2404>
    2be0:	2a00000b 	bcs	2c14 <__Stack_Size+0x2414>
    2be4:	000002f8 	strdeq	r0, [r0], -r8
    2be8:	0008cc47 	andeq	ip, r8, r7, asr #24
    2bec:	000bed00 	andeq	lr, fp, r0, lsl #26
    2bf0:	00000000 	andeq	r0, r0, r0
    2bf4:	00115b45 	andseq	r5, r1, r5, asr #22
    2bf8:	02c90100 	sbceq	r0, r9, #0, 2
    2bfc:	00000178 	andeq	r0, r0, r8, ror r1
    2c00:	080015cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, ip}
    2c04:	00000058 	andeq	r0, r0, r8, asr r0
    2c08:	14229c01 	strtne	r9, [r2], #-3073	; 0xc01
    2c0c:	05390000 	ldreq	r0, [r9, #-0]!
    2c10:	01000011 	tsteq	r0, r1, lsl r0
    2c14:	011302c9 	tsteq	r3, r9, asr #5
    2c18:	0c0d0000 	stceq	0, cr0, [sp], {-0}
    2c1c:	0e4e0000 	cdpeq	0, 4, cr0, cr14, cr0, {0}
    2c20:	01000010 	tsteq	r0, r0, lsl r0
    2c24:	011302c9 	tsteq	r3, r9, asr #5
    2c28:	51010000 	mrspl	r0, (UNDEF: 1)
    2c2c:	0010a443 	andseq	sl, r0, r3, asr #8
    2c30:	02ca0100 	sbceq	r0, sl, #0, 2
    2c34:	00001422 	andeq	r1, r0, r2, lsr #8
    2c38:	00000c2e 	andeq	r0, r0, lr, lsr #24
    2c3c:	00116a3d 	andseq	r6, r1, sp, lsr sl
    2c40:	02cb0100 	sbceq	r0, fp, #0, 2
    2c44:	00000133 	andeq	r0, r0, r3, lsr r1
    2c48:	3d709102 	ldfccp	f1, [r0, #-8]!
    2c4c:	0000119f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    2c50:	3302cc01 	movwcc	ip, #11265	; 0x2c01
    2c54:	02000001 	andeq	r0, r0, #1
    2c58:	a6437491 			; <UNDEFINED> instruction: 0xa6437491
    2c5c:	0100000e 	tsteq	r0, lr
    2c60:	011302ce 	tsteq	r3, lr, asr #5
    2c64:	0c4f0000 	mareq	acc0, r0, pc
    2c68:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2c6c:	00014304 	andeq	r4, r1, r4, lsl #6
    2c70:	08d93f00 	ldmeq	r9, {r8, r9, sl, fp, ip, sp}^
    2c74:	16240000 	strtne	r0, [r4], -r0
    2c78:	000c0800 	andeq	r0, ip, r0, lsl #16
    2c7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c80:	000e8341 	andeq	r8, lr, r1, asr #6
    2c84:	02eb0100 	rsceq	r0, fp, #0, 2
    2c88:	08001630 	stmdaeq	r0, {r4, r5, r9, sl, ip}
    2c8c:	00000018 	andeq	r0, r0, r8, lsl r0
    2c90:	40259c01 	eormi	r9, r5, r1, lsl #24
    2c94:	48000009 	stmdami	r0, {r0, r3}
    2c98:	12080016 	andne	r0, r8, #22
    2c9c:	01000000 	mrseq	r0, (UNDEF: 0)
    2ca0:	00146f9c 	mulseq	r4, ip, pc	; <UNPREDICTABLE>
    2ca4:	09512c00 	ldmdbeq	r1, {sl, fp, sp}^
    2ca8:	0c6d0000 	stcleq	0, cr0, [sp], #-0
    2cac:	5d470000 	stclpl	0, cr0, [r7, #-0]
    2cb0:	8b000009 	blhi	2cdc <__Stack_Size+0x24dc>
    2cb4:	0000000c 	andeq	r0, r0, ip
    2cb8:	000efc45 	andeq	pc, lr, r5, asr #24
    2cbc:	02ff0100 	rscseq	r0, pc, #0, 2
    2cc0:	0000005b 	andeq	r0, r0, fp, asr r0
    2cc4:	0800165c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, ip}
    2cc8:	00000010 	andeq	r0, r0, r0, lsl r0
    2ccc:	149a9c01 	ldrne	r9, [sl], #3073	; 0xc01
    2cd0:	08510000 	ldmdaeq	r1, {}^	; <UNPREDICTABLE>
    2cd4:	0100000f 	tsteq	r0, pc
    2cd8:	149a0301 	ldrne	r0, [sl], #769	; 0x301
    2cdc:	f7e00000 			; <UNDEFINED> instruction: 0xf7e00000
    2ce0:	08001fff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    2ce4:	00008d04 	andeq	r8, r0, r4, lsl #26
    2ce8:	035f4500 	cmpeq	pc, #0, 10
    2cec:	05010000 	streq	r0, [r1, #-0]
    2cf0:	00005b03 	andeq	r5, r0, r3, lsl #22
    2cf4:	00166c00 	andseq	r6, r6, r0, lsl #24
    2cf8:	00001808 	andeq	r1, r0, r8, lsl #16
    2cfc:	cb9c0100 	blgt	fe703104 <BootRAM+0xd6738a5>
    2d00:	51000014 	tstpl	r0, r4, lsl r0
    2d04:	00000f08 	andeq	r0, r0, r8, lsl #30
    2d08:	9a030801 	bls	c4d14 <__Stack_Size+0xc4514>
    2d0c:	e0000014 	and	r0, r0, r4, lsl r0
    2d10:	001ffff7 			; <UNDEFINED> instruction: 0x001ffff7
    2d14:	0000b152 	andeq	fp, r0, r2, asr r1
    2d18:	5b2c0a00 	blpl	b05520 <__Stack_Size+0xb04d20>
    2d1c:	05000000 	streq	r0, [r0, #-0]
    2d20:	00047003 	andeq	r7, r4, r3
    2d24:	0d115320 	ldceq	3, cr5, [r1, #-128]	; 0xffffff80
    2d28:	b7090000 	strlt	r0, [r9, -r0]
    2d2c:	0000005b 	andeq	r0, r0, fp, asr r0
    2d30:	000014fb 	strdeq	r1, [r0], -fp
    2d34:	0000cf54 	andeq	ip, r0, r4, asr pc
    2d38:	00dc5400 	sbcseq	r5, ip, r0, lsl #8
    2d3c:	37540000 	ldrbcc	r0, [r4, -r0]
    2d40:	00000000 	andeq	r0, r0, r0
    2d44:	00112755 	andseq	r2, r1, r5, asr r7
    2d48:	01130100 	tsteq	r3, r0, lsl #2
    2d4c:	00001512 	andeq	r1, r0, r2, lsl r5
    2d50:	0000fd54 	andeq	pc, r0, r4, asr sp	; <UNPREDICTABLE>
    2d54:	01985400 	orrseq	r5, r8, r0, lsl #8
    2d58:	55000000 	strpl	r0, [r0, #-0]
    2d5c:	00000d1a 	andeq	r0, r0, sl, lsl sp
    2d60:	29011401 	stmdbcs	r1, {r0, sl, ip}
    2d64:	54000015 	strpl	r0, [r0], #-21
    2d68:	00001529 	andeq	r1, r0, r9, lsr #10
    2d6c:	00152f54 	andseq	r2, r5, r4, asr pc
    2d70:	04080000 	streq	r0, [r8], #-0
    2d74:	00000805 	andeq	r0, r0, r5, lsl #16
    2d78:	07980408 	ldreq	r0, [r8, r8, lsl #8]
    2d7c:	c33e0000 	teqgt	lr, #0
    2d80:	0100000d 	tsteq	r0, sp
    2d84:	005b0183 	subseq	r0, fp, r3, lsl #3
    2d88:	15470000 	strbne	r0, [r7, #-0]
    2d8c:	00240000 	eoreq	r0, r4, r0
    2d90:	0010cf3e 	andseq	ip, r0, lr, lsr pc
    2d94:	01860100 	orreq	r0, r6, r0, lsl #2
    2d98:	0000005b 	andeq	r0, r0, fp, asr r0
    2d9c:	00001559 	andeq	r1, r0, r9, asr r5
    2da0:	80560024 	subshi	r0, r6, r4, lsr #32
    2da4:	0a000000 	beq	2dac <__Stack_Size+0x25ac>
    2da8:	05675682 	strbeq	r5, [r7, #-1666]!	; 0x682
    2dac:	520a0000 	andpl	r0, sl, #0
    2db0:	0009f800 	andeq	pc, r9, r0, lsl #16
    2db4:	1a000400 	bne	3dbc <__Stack_Size+0x35bc>
    2db8:	0400000c 	streq	r0, [r0], #-12
    2dbc:	0006c001 	andeq	ip, r6, r1
    2dc0:	12bf0100 	adcsne	r0, pc, #0, 2
    2dc4:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    2dc8:	04500000 	ldrbeq	r0, [r0], #-0
    2dcc:	00000000 	andeq	r0, r0, r0
    2dd0:	0e5d0000 	cdpeq	0, 5, cr0, cr13, cr0, {0}
    2dd4:	01020000 	mrseq	r0, (UNDEF: 2)
    2dd8:	00081a06 	andeq	r1, r8, r6, lsl #20
    2ddc:	0b0d0300 	bleq	3439e4 <__Stack_Size+0x3431e4>
    2de0:	1c020000 	stcne	0, cr0, [r2], {-0}
    2de4:	00000037 	andeq	r0, r0, r7, lsr r0
    2de8:	18080102 	stmdane	r8, {r1, r8}
    2dec:	02000008 	andeq	r0, r0, #8
    2df0:	065e0502 	ldrbeq	r0, [lr], -r2, lsl #10
    2df4:	02020000 	andeq	r0, r2, #0
    2df8:	00094907 	andeq	r4, r9, r7, lsl #18
    2dfc:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2e00:	000004da 	ldrdeq	r0, [r0], -sl
    2e04:	000ada03 	andeq	sp, sl, r3, lsl #20
    2e08:	5e380200 	cdppl	2, 3, cr0, cr8, cr0, {0}
    2e0c:	02000000 	andeq	r0, r0, #0
    2e10:	02520704 	subseq	r0, r2, #4, 14	; 0x100000
    2e14:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2e18:	0004d505 	andeq	sp, r4, r5, lsl #10
    2e1c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    2e20:	0000024d 	andeq	r0, r0, sp, asr #4
    2e24:	69050404 	stmdbvs	r5, {r2, sl}
    2e28:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    2e2c:	02570704 	subseq	r0, r7, #4, 14	; 0x100000
    2e30:	0f030000 	svceq	0x00030000
    2e34:	0300000b 	movweq	r0, #11
    2e38:	00002c2a 	andeq	r2, r0, sl, lsr #24
    2e3c:	0adc0300 	beq	ff703a44 <BootRAM+0xe6741e5>
    2e40:	42030000 	andmi	r0, r3, #0
    2e44:	00000053 	andeq	r0, r0, r3, asr r0
    2e48:	32337505 	eorscc	r7, r3, #20971520	; 0x1400000
    2e4c:	5e270400 	cdppl	4, 2, cr0, cr7, cr0, {0}
    2e50:	05000000 	streq	r0, [r0, #-0]
    2e54:	00363175 	eorseq	r3, r6, r5, ror r1
    2e58:	00452804 	subeq	r2, r5, r4, lsl #16
    2e5c:	75050000 	strvc	r0, [r5, #-0]
    2e60:	29040038 	stmdbcs	r4, {r3, r4, r5}
    2e64:	00000037 	andeq	r0, r0, r7, lsr r0
    2e68:	37040106 	strcc	r0, [r4, -r6, lsl #2]
    2e6c:	000000cc 	andeq	r0, r0, ip, asr #1
    2e70:	0006b507 	andeq	fp, r6, r7, lsl #10
    2e74:	a7070000 	strge	r0, [r7, -r0]
    2e78:	01000001 	tsteq	r0, r1
    2e7c:	052d0300 	streq	r0, [sp, #-768]!	; 0x300
    2e80:	37040000 	strcc	r0, [r4, -r0]
    2e84:	000000b7 	strheq	r0, [r0], -r7
    2e88:	000ad303 	andeq	sp, sl, r3, lsl #6
    2e8c:	7ad40500 	bvc	ff504294 <BootRAM+0xe474a35>
    2e90:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2e94:	07040204 	streq	r0, [r4, -r4, lsl #4]
    2e98:	0000078b 	andeq	r0, r0, fp, lsl #15
    2e9c:	21080102 	tstcs	r8, r2, lsl #2
    2ea0:	09000008 	stmdbeq	r0, {r3}
    2ea4:	0000f804 	andeq	pc, r0, r4, lsl #16
    2ea8:	00eb0a00 	rsceq	r0, fp, r0, lsl #20
    2eac:	04090000 	streq	r0, [r9], #-0
    2eb0:	000000ad 	andeq	r0, r0, sp, lsr #1
    2eb4:	0005ff0b 	andeq	pc, r5, fp, lsl #30
    2eb8:	38060c00 	stmdacc	r6, {sl, fp}
    2ebc:	00000140 	andeq	r0, r0, r0, asr #2
    2ec0:	0001d70c 	andeq	sp, r1, ip, lsl #14
    2ec4:	a2500600 	subsge	r0, r0, #0, 12
    2ec8:	00000000 	andeq	r0, r0, r0
    2ecc:	00086d0c 	andeq	r6, r8, ip, lsl #26
    2ed0:	a2510600 	subsge	r0, r1, #0, 12
    2ed4:	02000000 	andeq	r0, r0, #0
    2ed8:	0020b90c 	eoreq	fp, r0, ip, lsl #18
    2edc:	a2520600 	subsge	r0, r2, #0, 12
    2ee0:	04000000 	streq	r0, [r0], #-0
    2ee4:	00069a0c 	andeq	r9, r6, ip, lsl #20
    2ee8:	4f530600 	svcmi	0x00530600
    2eec:	08000001 	stmdaeq	r0, {r0}
    2ef0:	00fd0d00 	rscseq	r0, sp, r0, lsl #26
    2ef4:	014f0000 	mrseq	r0, SPSR
    2ef8:	a20e0000 	andge	r0, lr, #0
    2efc:	00000000 	andeq	r0, r0, r0
    2f00:	01400409 	cmpeq	r0, r9, lsl #8
    2f04:	00030000 	andeq	r0, r3, r0
    2f08:	06000006 	streq	r0, [r0], -r6
    2f0c:	00010354 	andeq	r0, r1, r4, asr r3
    2f10:	57420f00 	strbpl	r0, [r2, -r0, lsl #30]
    2f14:	62060200 	andvs	r0, r6, #0, 4
    2f18:	00000184 	andeq	r0, r0, r4, lsl #3
    2f1c:	30626210 	rsbcc	r6, r2, r0, lsl r2
    2f20:	ad650600 	stclge	6, cr0, [r5, #-0]
    2f24:	00000000 	andeq	r0, r0, r0
    2f28:	31626210 	cmncc	r2, r0, lsl r2
    2f2c:	ad660600 	stclge	6, cr0, [r6, #-0]
    2f30:	01000000 	mrseq	r0, (UNDEF: 0)
    2f34:	06021100 	streq	r1, [r2], -r0, lsl #2
    2f38:	0001a05f 	andeq	sl, r1, pc, asr r0
    2f3c:	00771200 	rsbseq	r1, r7, r0, lsl #4
    2f40:	00a26106 	adceq	r6, r2, r6, lsl #2
    2f44:	62120000 	andsvs	r0, r2, #0
    2f48:	68060077 	stmdavs	r6, {r0, r1, r2, r4, r5, r6}
    2f4c:	00000160 	andeq	r0, r0, r0, ror #2
    2f50:	09300300 	ldmdbeq	r0!, {r8, r9}
    2f54:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    2f58:	00000184 	andeq	r0, r0, r4, lsl #3
    2f5c:	0001140b 	andeq	r1, r1, fp, lsl #8
    2f60:	6b061c00 	blvs	189f68 <__Stack_Size+0x189768>
    2f64:	0000023c 	andeq	r0, r0, ip, lsr r2
    2f68:	0007670c 	andeq	r6, r7, ip, lsl #14
    2f6c:	ad6d0600 	stclge	6, cr0, [sp, #-0]
    2f70:	00000000 	andeq	r0, r0, r0
    2f74:	0000150c 	andeq	r1, r0, ip, lsl #10
    2f78:	ad6e0600 	stclge	6, cr0, [lr, #-0]
    2f7c:	01000000 	mrseq	r0, (UNDEF: 0)
    2f80:	0003110c 	andeq	r1, r3, ip, lsl #2
    2f84:	a06f0600 	rsbge	r0, pc, r0, lsl #12
    2f88:	02000001 	andeq	r0, r0, #1
    2f8c:	0001480c 	andeq	r4, r1, ip, lsl #16
    2f90:	a0700600 	rsbsge	r0, r0, r0, lsl #12
    2f94:	04000001 	streq	r0, [r0], #-1
    2f98:	0004eb0c 	andeq	lr, r4, ip, lsl #22
    2f9c:	a0710600 	rsbsge	r0, r1, r0, lsl #12
    2fa0:	06000001 	streq	r0, [r0], -r1
    2fa4:	0006510c 	andeq	r5, r6, ip, lsl #2
    2fa8:	ad730600 	ldclge	6, cr0, [r3, #-0]
    2fac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2fb0:	0008080c 	andeq	r0, r8, ip, lsl #16
    2fb4:	ad740600 	ldclge	6, cr0, [r4, #-0]
    2fb8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2fbc:	0005070c 	andeq	r0, r5, ip, lsl #14
    2fc0:	ad750600 	ldclge	6, cr0, [r5, #-0]
    2fc4:	0a000000 	beq	2fcc <__Stack_Size+0x27cc>
    2fc8:	00054f0c 	andeq	r4, r5, ip, lsl #30
    2fcc:	ad760600 	ldclge	6, cr0, [r6, #-0]
    2fd0:	0b000000 	bleq	2fd8 <__Stack_Size+0x27d8>
    2fd4:	0005d60c 	andeq	sp, r5, ip, lsl #12
    2fd8:	ad770600 	ldclge	6, cr0, [r7, #-0]
    2fdc:	0c000000 	stceq	0, cr0, [r0], {-0}
    2fe0:	0007c80c 	andeq	ip, r7, ip, lsl #16
    2fe4:	557a0600 	ldrbpl	r0, [sl, #-1536]!	; 0x600
    2fe8:	10000001 	andne	r0, r0, r1
    2fec:	01150300 	tsteq	r5, r0, lsl #6
    2ff0:	7b060000 	blvc	182ff8 <__Stack_Size+0x1827f8>
    2ff4:	000001ab 	andeq	r0, r0, fp, lsr #3
    2ff8:	23070106 	movwcs	r0, #28934	; 0x7106
    2ffc:	0000027a 	andeq	r0, r0, sl, ror r2
    3000:	00130807 	andseq	r0, r3, r7, lsl #16
    3004:	44070000 	strmi	r0, [r7], #-0
    3008:	01000012 	tsteq	r0, r2, lsl r0
    300c:	0012a407 	andseq	sl, r2, r7, lsl #8
    3010:	c6070200 	strgt	r0, [r7], -r0, lsl #4
    3014:	03000011 	movweq	r0, #17
    3018:	0012ed07 	andseq	lr, r2, r7, lsl #26
    301c:	db070400 	blle	1c4024 <__Stack_Size+0x1c3824>
    3020:	05000013 	streq	r0, [r0, #-19]
    3024:	0011fe07 	andseq	pc, r1, r7, lsl #28
    3028:	03000600 	movweq	r0, #1536	; 0x600
    302c:	00001225 	andeq	r1, r0, r5, lsr #4
    3030:	02472307 	subeq	r2, r7, #469762048	; 0x1c000000
    3034:	430b0000 	movwmi	r0, #45056	; 0xb000
    3038:	06000013 			; <UNDEFINED> instruction: 0x06000013
    303c:	02da2907 	sbcseq	r2, sl, #114688	; 0x1c000
    3040:	620c0000 	andvs	r0, ip, #0
    3044:	07000013 	smladeq	r0, r3, r0, r0
    3048:	0000ad2a 	andeq	sl, r0, sl, lsr #26
    304c:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
    3050:	07000013 	smladeq	r0, r3, r0, r0
    3054:	0000ad2b 	andeq	sl, r0, fp, lsr #26
    3058:	870c0100 	strhi	r0, [ip, -r0, lsl #2]
    305c:	07000013 	smladeq	r0, r3, r0, r0
    3060:	0000ad2c 	andeq	sl, r0, ip, lsr #26
    3064:	960c0200 	strls	r0, [ip], -r0, lsl #4
    3068:	07000013 	smladeq	r0, r3, r0, r0
    306c:	0000ad2d 	andeq	sl, r0, sp, lsr #26
    3070:	400c0300 	andmi	r0, ip, r0, lsl #6
    3074:	07000014 	smladeq	r0, r4, r0, r0
    3078:	0000ad2e 	andeq	sl, r0, lr, lsr #26
    307c:	cf0c0400 	svcgt	0x000c0400
    3080:	07000012 	smladeq	r0, r2, r0, r0
    3084:	0000ad2f 	andeq	sl, r0, pc, lsr #26
    3088:	03000500 	movweq	r0, #1280	; 0x500
    308c:	00001344 	andeq	r1, r0, r4, asr #6
    3090:	02853007 	addeq	r3, r5, #7
    3094:	9e130000 	cdpls	0, 1, cr0, cr3, cr0, {0}
    3098:	01000012 	tsteq	r0, r2, lsl r0
    309c:	030a3207 	movweq	r3, #41479	; 0xa207
    30a0:	b4070000 	strlt	r0, [r7], #-0
    30a4:	00000013 	andeq	r0, r0, r3, lsl r0
    30a8:	00140d07 	andseq	r0, r4, r7, lsl #26
    30ac:	45140100 	ldrmi	r0, [r4, #-256]	; 0x100
    30b0:	0200444e 	andeq	r4, r0, #1308622848	; 0x4e000000
    30b4:	00016e07 	andeq	r6, r1, r7, lsl #28
    30b8:	03000300 	movweq	r0, #768	; 0x300
    30bc:	0000129f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    30c0:	02e53707 	rsceq	r3, r5, #1835008	; 0x1c0000
    30c4:	68150000 	ldmdavs	r5, {}	; <UNPREDICTABLE>
    30c8:	03420c08 	movteq	r0, #11272	; 0x2c08
    30cc:	790c0000 	stmdbvc	ip, {}	; <UNPREDICTABLE>
    30d0:	08000018 	stmdaeq	r0, {r3, r4}
    30d4:	0003420e 	andeq	r4, r3, lr, lsl #4
    30d8:	290c0000 	stmdbcs	ip, {}	; <UNPREDICTABLE>
    30dc:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    30e0:	0003520f 	andeq	r5, r3, pc, lsl #4
    30e4:	6c0c0800 	stcvs	8, cr0, [ip], {-0}
    30e8:	08000004 	stmdaeq	r0, {r2}
    30ec:	00036210 	andeq	r6, r3, r0, lsl r2
    30f0:	16002800 	strne	r2, [r0], -r0, lsl #16
    30f4:	0000005e 	andeq	r0, r0, lr, asr r0
    30f8:	00000352 	andeq	r0, r0, r2, asr r3
    30fc:	0000e417 	andeq	lr, r0, r7, lsl r4
    3100:	16000100 	strne	r0, [r0], -r0, lsl #2
    3104:	0000005e 	andeq	r0, r0, lr, asr r0
    3108:	00000362 	andeq	r0, r0, r2, ror #6
    310c:	0000e417 	andeq	lr, r0, r7, lsl r4
    3110:	16000700 	strne	r0, [r0], -r0, lsl #14
    3114:	00000037 	andeq	r0, r0, r7, lsr r0
    3118:	00000372 	andeq	r0, r0, r2, ror r3
    311c:	0000e417 	andeq	lr, r0, r7, lsl r4
    3120:	03003f00 	movweq	r3, #3840	; 0xf00
    3124:	000013a5 	andeq	r1, r0, r5, lsr #7
    3128:	03151208 	tsteq	r5, #8, 4	; 0x80000000
    312c:	b70b0000 	strlt	r0, [fp, -r0]
    3130:	1400000a 	strne	r0, [r0], #-10
    3134:	03d20d09 	bicseq	r0, r2, #576	; 0x240
    3138:	170c0000 	strne	r0, [ip, -r0]
    313c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    3140:	00008c0e 	andeq	r8, r0, lr, lsl #24
    3144:	c20c0000 	andgt	r0, ip, #0
    3148:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    314c:	00008c10 	andeq	r8, r0, r0, lsl ip
    3150:	7f0c0400 	svcvc	0x000c0400
    3154:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    3158:	00008c11 	andeq	r8, r0, r1, lsl ip
    315c:	070c0800 	streq	r0, [ip, -r0, lsl #16]
    3160:	0900000c 	stmdbeq	r0, {r2, r3}
    3164:	00008c13 	andeq	r8, r0, r3, lsl ip
    3168:	a10c0c00 	tstge	ip, r0, lsl #24
    316c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    3170:	00008c14 	andeq	r8, r0, r4, lsl ip
    3174:	fc0c1000 	stc2	0, cr1, [ip], {-0}
    3178:	0900000a 	stmdbeq	r0, {r1, r3}
    317c:	0003d215 	andeq	sp, r3, r5, lsl r2
    3180:	16001400 	strne	r1, [r0], -r0, lsl #8
    3184:	00000081 	andeq	r0, r0, r1, lsl #1
    3188:	000003e1 	andeq	r0, r0, r1, ror #7
    318c:	0000e418 	andeq	lr, r0, r8, lsl r4
    3190:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
    3194:	0900000a 	stmdbeq	r0, {r1, r3}
    3198:	00037d16 	andeq	r7, r3, r6, lsl sp
    319c:	0b1f0b00 	bleq	7c5da4 <__Stack_Size+0x7c55a4>
    31a0:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    31a4:	00043518 	andeq	r3, r4, r8, lsl r5
    31a8:	0bd80c00 	bleq	ff6061b0 <BootRAM+0xe576951>
    31ac:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    31b0:	00000435 	andeq	r0, r0, r5, lsr r4
    31b4:	0b670c00 	bleq	19c61bc <__Stack_Size+0x19c59bc>
    31b8:	1a090000 	bne	2431c0 <__Stack_Size+0x2429c0>
    31bc:	0000008c 	andeq	r0, r0, ip, lsl #1
    31c0:	0b970c04 	bleq	fe5c61d8 <BootRAM+0xd536979>
    31c4:	1f090000 	svcne	0x00090000
    31c8:	000000d7 	ldrdeq	r0, [r0], -r7
    31cc:	0b330c08 	bleq	cc61f4 <__Stack_Size+0xcc59f4>
    31d0:	21090000 	mrscs	r0, (UNDEF: 9)
    31d4:	00000073 	andeq	r0, r0, r3, ror r0
    31d8:	0c160c0c 	ldceq	12, cr0, [r6], {12}
    31dc:	22090000 	andcs	r0, r9, #0
    31e0:	00000073 	andeq	r0, r0, r3, ror r0
    31e4:	04090010 	streq	r0, [r9], #-16
    31e8:	000003e1 	andeq	r0, r0, r1, ror #7
    31ec:	000c3903 	andeq	r3, ip, r3, lsl #18
    31f0:	46260900 	strtmi	r0, [r6], -r0, lsl #18
    31f4:	09000004 	stmdbeq	r0, {r2}
    31f8:	0003ec04 	andeq	lr, r3, r4, lsl #24
    31fc:	09bd1900 	ldmibeq	sp!, {r8, fp, ip}
    3200:	3d010000 	stccc	0, cr0, [r1, #-0]
    3204:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
    3208:	000000a0 	andeq	r0, r0, r0, lsr #1
    320c:	04bb9c01 	ldrteq	r9, [fp], #3073	; 0xc01
    3210:	da1a0000 	ble	683218 <__Stack_Size+0x682a18>
    3214:	21080016 	tstcs	r8, r6, lsl r0
    3218:	84000009 	strhi	r0, [r0], #-9
    321c:	1b000004 	blne	3234 <__Stack_Size+0x2a34>
    3220:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    3224:	51011b20 	tstpl	r1, r0, lsr #22
    3228:	1bff0802 	blne	fffc5238 <BootRAM+0xef359d9>
    322c:	03055001 	movweq	r5, #20481	; 0x5001
    3230:	200004d8 	ldrdcs	r0, [r0], -r8
    3234:	16e41a00 	strbtne	r1, [r4], r0, lsl #20
    3238:	09210800 	stmdbeq	r1!, {fp}
    323c:	04a70000 	strteq	r0, [r7], #0
    3240:	011b0000 	tsteq	fp, r0
    3244:	5c080252 	sfmpl	f0, 4, [r8], {82}	; 0x52
    3248:	0251011b 	subseq	r0, r1, #-1073741818	; 0xc0000006
    324c:	011bff08 	tsteq	fp, r8, lsl #30
    3250:	7c030550 	cfstr32vc	mvfx0, [r3], {80}	; 0x50
    3254:	00200004 	eoreq	r0, r0, r4
    3258:	0016ee1c 	andseq	lr, r6, ip, lsl lr
    325c:	00094008 	andeq	r4, r9, r8
    3260:	50011b00 	andpl	r1, r1, r0, lsl #22
    3264:	04f80305 	ldrbteq	r0, [r8], #773	; 0x305
    3268:	00002000 	andeq	r2, r0, r0
    326c:	00142c1d 	andseq	r2, r4, sp, lsl ip
    3270:	01c20100 	biceq	r0, r2, r0, lsl #2
    3274:	0004df01 	andeq	sp, r4, r1, lsl #30
    3278:	00691e00 	rsbeq	r1, r9, r0, lsl #28
    327c:	7301c301 	movwvc	ip, #4865	; 0x1301
    3280:	1f000000 	svcne	0x00000000
    3284:	000012c5 	andeq	r1, r0, r5, asr #5
    3288:	df01c401 	svcle	0x0001c401
    328c:	00000004 	andeq	r0, r0, r4
    3290:	00970409 	addseq	r0, r7, r9, lsl #8
    3294:	87200000 	strhi	r0, [r0, -r0]!
    3298:	01000004 	tsteq	r0, r4
    329c:	0000cc51 	andeq	ip, r0, r1, asr ip
    32a0:	00172400 	andseq	r2, r7, r0, lsl #8
    32a4:	0002d808 	andeq	sp, r2, r8, lsl #16
    32a8:	0c9c0100 	ldfeqs	f0, [ip], {0}
    32ac:	21000006 	tstcs	r0, r6
    32b0:	000011e7 	andeq	r1, r0, r7, ror #3
    32b4:	00ad5601 	adceq	r5, sp, r1, lsl #12
    32b8:	0cbd0000 	ldceq	0, cr0, [sp]
    32bc:	bb220000 	bllt	8832c4 <__Stack_Size+0x882ac4>
    32c0:	c4000004 	strgt	r0, [r0], #-4
    32c4:	20080017 	andcs	r0, r8, r7, lsl r0
    32c8:	01000004 	tsteq	r0, r4
    32cc:	00055cdf 	ldrdeq	r5, [r5], -pc	; <UNPREDICTABLE>
    32d0:	04202300 	strteq	r2, [r0], #-768	; 0x300
    32d4:	c8240000 	stmdagt	r4!, {}	; <UNPREDICTABLE>
    32d8:	28000004 	stmdacs	r0, {r2}
    32dc:	2500000d 	strcs	r0, [r0, #-13]
    32e0:	000004d2 	ldrdeq	r0, [r0], -r2
    32e4:	0017ea1a 	andseq	lr, r7, sl, lsl sl
    32e8:	00095708 	andeq	r5, r9, r8, lsl #14
    32ec:	00054700 	andeq	r4, r5, r0, lsl #14
    32f0:	50011b00 	andpl	r1, r1, r0, lsl #22
    32f4:	00007702 	andeq	r7, r0, r2, lsl #14
    32f8:	00180026 	andseq	r0, r8, r6, lsr #32
    32fc:	00096d08 	andeq	r6, r9, r8, lsl #26
    3300:	50011b00 	andpl	r1, r1, r0, lsl #22
    3304:	75007705 	strvc	r7, [r0, #-1797]	; 0x705
    3308:	00002200 	andeq	r2, r0, r0, lsl #4
    330c:	04382700 	ldrteq	r2, [r8], #-1792	; 0x700
    3310:	05d50000 	ldrbeq	r0, [r5]
    3314:	ef280000 	svc	0x00280000
    3318:	0100000b 	tsteq	r0, fp
    331c:	043b0113 	ldrteq	r0, [fp], #-275	; 0x113
    3320:	91020000 	mrsls	r0, (UNDEF: 2)
    3324:	6572295c 	ldrbvs	r2, [r2, #-2396]!	; 0x95c
    3328:	14010074 	strne	r0, [r1], #-116	; 0x74
    332c:	00007301 	andeq	r7, r0, r1, lsl #6
    3330:	000d4700 	andeq	r4, sp, r0, lsl #14
    3334:	193c1a00 	ldmdbne	ip!, {r9, fp, ip}
    3338:	09880800 	stmibeq	r8, {fp}
    333c:	05a10000 	streq	r0, [r1, #0]!
    3340:	011b0000 	tsteq	fp, r0
    3344:	000c0551 	andeq	r0, ip, r1, asr r5
    3348:	1b080080 	blne	203550 <__Stack_Size+0x202d50>
    334c:	91025001 	tstls	r2, r1
    3350:	4c2a005c 	stcmi	0, cr0, [sl], #-368	; 0xfffffe90
    3354:	ad080019 	stcge	0, cr0, [r8, #-100]	; 0xffffff9c
    3358:	1a000009 	bne	3384 <__Stack_Size+0x2b84>
    335c:	080019a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, ip}
    3360:	000009b5 			; <UNDEFINED> instruction: 0x000009b5
    3364:	000005c1 	andeq	r0, r0, r1, asr #11
    3368:	0550011b 	ldrbeq	r0, [r0, #-283]	; 0x11b
    336c:	0071ec03 	rsbseq	lr, r1, r3, lsl #24
    3370:	b0260008 	eorlt	r0, r6, r8
    3374:	b5080019 	strlt	r0, [r8, #-25]
    3378:	1b000009 	blne	33a4 <__Stack_Size+0x2ba4>
    337c:	03055001 	movweq	r5, #20481	; 0x5001
    3380:	080071cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, ip, sp, lr}
    3384:	782a0000 	stmdavc	sl!, {}	; <UNPREDICTABLE>
    3388:	c8080018 	stmdagt	r8, {r3, r4}
    338c:	2a000009 	bcs	33b8 <__Stack_Size+0x2bb8>
    3390:	080018c0 	stmdaeq	r0, {r6, r7, fp, ip}
    3394:	000009d4 	ldrdeq	r0, [r0], -r4
    3398:	0018c42a 	andseq	ip, r8, sl, lsr #8
    339c:	0009dc08 	andeq	sp, r9, r8, lsl #24
    33a0:	18da2a00 	ldmne	sl, {r9, fp, sp}^
    33a4:	09c80800 	stmibeq	r8, {fp}^
    33a8:	2a2a0000 	bcs	a833b0 <__Stack_Size+0xa82bb0>
    33ac:	d4080019 	strle	r0, [r8], #-25
    33b0:	2a000009 	bcs	33dc <__Stack_Size+0x2bdc>
    33b4:	0800192e 	stmdaeq	r0, {r1, r2, r3, r5, r8, fp, ip}
    33b8:	000009dc 	ldrdeq	r0, [r0], -ip
    33bc:	083b2b00 	ldmdaeq	fp!, {r8, r9, fp, sp}
    33c0:	82010000 	andhi	r0, r1, #0
    33c4:	0019fc01 	andseq	pc, r9, r1, lsl #24
    33c8:	00004408 	andeq	r4, r0, r8, lsl #8
    33cc:	4e9c0100 	fmlmie	f0, f4, f0
    33d0:	2c000006 	stccs	0, cr0, [r0], {6}
    33d4:	000011e7 	andeq	r1, r0, r7, ror #3
    33d8:	ad018301 	stcge	3, cr8, [r1, #-4]
    33dc:	70000000 	andvc	r0, r0, r0
    33e0:	2d00000d 	stccs	0, cr0, [r0, #-52]	; 0xffffffcc
    33e4:	08001a22 	stmdaeq	r0, {r1, r5, r9, fp, ip}
    33e8:	000009e4 	andeq	r0, r0, r4, ror #19
    33ec:	001a2e2a 	andseq	r2, sl, sl, lsr #28
    33f0:	0009ec08 	andeq	lr, r9, r8, lsl #24
    33f4:	1a362d00 	bne	d8e7fc <__Stack_Size+0xd8dffc>
    33f8:	09f40800 	ldmibeq	r4!, {fp}^
    33fc:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    3400:	00001283 	andeq	r1, r0, r3, lsl #5
    3404:	00019901 	andeq	r9, r1, r1, lsl #18
    3408:	02000000 	andeq	r0, r0, #0
    340c:	01000000 	mrseq	r0, (UNDEF: 0)
    3410:	13552f9c 	cmpne	r5, #156, 30	; 0x270
    3414:	9c010000 	stcls	0, cr0, [r1], {-0}
    3418:	0000fd01 	andeq	pc, r0, r1, lsl #26
    341c:	001a4000 	andseq	r4, sl, r0
    3420:	00001808 	andeq	r1, r0, r8, lsl #16
    3424:	8b9c0100 	blhi	fe70382c <BootRAM+0xd673fcd>
    3428:	30000006 	andcc	r0, r0, r6
    342c:	0000134e 	andeq	r1, r0, lr, asr #6
    3430:	a2019c01 	andge	r9, r1, #256	; 0x100
    3434:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    3438:	0000000d 	andeq	r0, r0, sp
    343c:	0013be2f 	andseq	fp, r3, pc, lsr #28
    3440:	01a50100 			; <UNDEFINED> instruction: 0x01a50100
    3444:	000000fd 	strdeq	r0, [r0], -sp
    3448:	08001a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, ip}
    344c:	00000018 	andeq	r0, r0, r8, lsl r0
    3450:	06b69c01 	ldrteq	r9, [r6], r1, lsl #24
    3454:	4e300000 	cdpmi	0, 3, cr0, cr0, cr0, {0}
    3458:	01000013 	tsteq	r0, r3, lsl r0
    345c:	00a201a5 	adceq	r0, r2, r5, lsr #3
    3460:	0dba0000 	ldceq	0, cr0, [sl]
    3464:	2f000000 	svccs	0x00000000
    3468:	0000136a 	andeq	r1, r0, sl, ror #6
    346c:	fd01af01 	stc2	15, cr10, [r1, #-4]
    3470:	70000000 	andvc	r0, r0, r0
    3474:	3408001a 	strcc	r0, [r8], #-26
    3478:	01000000 	mrseq	r0, (UNDEF: 0)
    347c:	0006e19c 	muleq	r6, ip, r1
    3480:	134e3000 	movtne	r3, #57344	; 0xe000
    3484:	af010000 	svcge	0x00010000
    3488:	0000a201 	andeq	sl, r0, r1, lsl #4
    348c:	000de600 	andeq	lr, sp, r0, lsl #12
    3490:	5e2f0000 	cdppl	0, 2, cr0, cr15, cr0, {0}
    3494:	01000012 	tsteq	r0, r2, lsl r0
    3498:	00fd01b9 	ldrhteq	r0, [sp], #25
    349c:	1aa40000 	bne	fe9034a4 <BootRAM+0xd873c45>
    34a0:	00340800 	eorseq	r0, r4, r0, lsl #16
    34a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    34a8:	0000070c 	andeq	r0, r0, ip, lsl #14
    34ac:	00134e30 	andseq	r4, r3, r0, lsr lr
    34b0:	01b90100 			; <UNDEFINED> instruction: 0x01b90100
    34b4:	000000a2 	andeq	r0, r0, r2, lsr #1
    34b8:	00000e12 	andeq	r0, r0, r2, lsl lr
    34bc:	04bb3100 	ldrteq	r3, [fp], #256	; 0x100
    34c0:	00000000 	andeq	r0, r0, r0
    34c4:	006c0000 	rsbeq	r0, ip, r0
    34c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    34cc:	00000755 	andeq	r0, r0, r5, asr r7
    34d0:	0004c824 	andeq	ip, r4, r4, lsr #16
    34d4:	000e3e00 	andeq	r3, lr, r0, lsl #28
    34d8:	04d22500 	ldrbeq	r2, [r2], #1280	; 0x500
    34dc:	001a0000 	andseq	r0, sl, r0
    34e0:	57000000 	strpl	r0, [r0, -r0]
    34e4:	41000009 	tstmi	r0, r9
    34e8:	1b000007 	blne	350c <__Stack_Size+0x2d0c>
    34ec:	76025001 	strvc	r5, [r2], -r1
    34f0:	00260000 	eoreq	r0, r6, r0
    34f4:	6d000000 	stcvs	0, cr0, [r0, #-0]
    34f8:	1b000009 	blne	3524 <__Stack_Size+0x2d24>
    34fc:	76055001 	strvc	r5, [r5], -r1
    3500:	22007400 	andcs	r7, r0, #0, 8
    3504:	f6320000 			; <UNDEFINED> instruction: 0xf6320000
    3508:	01000013 	tsteq	r0, r3, lsl r0
    350c:	00ad01ea 	adceq	r0, sp, sl, ror #3
    3510:	00000000 	andeq	r0, r0, r0
    3514:	000c0000 	andeq	r0, ip, r0
    3518:	9c010000 	stcls	0, cr0, [r1], {-0}
    351c:	0012192b 	andseq	r1, r2, fp, lsr #18
    3520:	01ef0100 	mvneq	r0, r0, lsl #2
    3524:	00000000 	andeq	r0, r0, r0
    3528:	0000000c 	andeq	r0, r0, ip
    352c:	07909c01 	ldreq	r9, [r0, r1, lsl #24]
    3530:	23330000 	teqcs	r3, #0
    3534:	01000014 	tsteq	r0, r4, lsl r0
    3538:	00ad01ef 	adceq	r0, sp, pc, ror #3
    353c:	50010000 	andpl	r0, r1, r0
    3540:	0bde3400 	bleq	ff790548 <BootRAM+0xe700ce9>
    3544:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    3548:	0000cc01 	andeq	ip, r0, r1, lsl #24
    354c:	001ad800 	andseq	sp, sl, r0, lsl #16
    3550:	00000c08 	andeq	r0, r0, r8, lsl #24
    3554:	349c0100 	ldrcc	r0, [ip], #256	; 0x100
    3558:	00001236 	andeq	r1, r0, r6, lsr r2
    355c:	cc01f901 	stcgt	9, cr15, [r1], {1}
    3560:	00000000 	andeq	r0, r0, r0
    3564:	1c000000 	stcne	0, cr0, [r0], {-0}
    3568:	01000000 	mrseq	r0, (UNDEF: 0)
    356c:	0c1e359c 	cfldr32eq	mvfx3, [lr], {156}	; 0x9c
    3570:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    3574:	001ae401 	andseq	lr, sl, r1, lsl #8
    3578:	00000208 	andeq	r0, r0, r8, lsl #4
    357c:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
    3580:	000011f2 	strdeq	r1, [r0], -r2
    3584:	07df2801 	ldrbeq	r2, [pc, r1, lsl #16]
    3588:	03050000 	movweq	r0, #20480	; 0x5000
    358c:	200002c8 	andcs	r0, r0, r8, asr #5
    3590:	00009737 	andeq	r9, r0, r7, lsr r7
    3594:	14023600 	strne	r3, [r2], #-1536	; 0x600
    3598:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    359c:	000007df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    35a0:	02c40305 	sbceq	r0, r4, #335544320	; 0x14000000
    35a4:	28362000 	ldmdacs	r6!, {sp}
    35a8:	01000013 	tsteq	r0, r3, lsl r0
    35ac:	0008062a 	andeq	r0, r8, sl, lsr #12
    35b0:	b4030500 	strlt	r0, [r3], #-1280	; 0x500
    35b4:	3720000d 	strcc	r0, [r0, -sp]!
    35b8:	000002da 	ldrdeq	r0, [r0], -sl
    35bc:	0000ad16 	andeq	sl, r0, r6, lsl sp
    35c0:	00081c00 	andeq	r1, r8, r0, lsl #24
    35c4:	00e43800 	rsceq	r3, r4, r0, lsl #16
    35c8:	07ff0000 	ldrbeq	r0, [pc, r0]!
    35cc:	12533600 	subsne	r3, r3, #0, 12
    35d0:	33010000 	movwcc	r0, #4096	; 0x1000
    35d4:	0000082d 	andeq	r0, r0, sp, lsr #16
    35d8:	05a80305 	streq	r0, [r8, #773]!	; 0x305
    35dc:	0b372000 	bleq	dcb5e4 <__Stack_Size+0xdcade4>
    35e0:	36000008 	strcc	r0, [r0], -r8
    35e4:	00001318 	andeq	r1, r0, r8, lsl r3
    35e8:	07df3501 	ldrbeq	r3, [pc, r1, lsl #10]
    35ec:	03050000 	movweq	r0, #20480	; 0x5000
    35f0:	20000dac 	andcs	r0, r0, ip, lsr #27
    35f4:	00126c36 	andseq	r6, r2, r6, lsr ip
    35f8:	54360100 	ldrtpl	r0, [r6], #-256	; 0x100
    35fc:	05000008 	streq	r0, [r0, #-8]
    3600:	000daa03 	andeq	sl, sp, r3, lsl #20
    3604:	00a23720 	adceq	r3, r2, r0, lsr #14
    3608:	de360000 	cdple	0, 3, cr0, cr6, cr0, {0}
    360c:	01000012 	tsteq	r0, r2, lsl r0
    3610:	00085437 	andeq	r5, r8, r7, lsr r4
    3614:	a8030500 	stmdage	r3, {r8, sl}
    3618:	3920000d 	stmdbcc	r0!, {r0, r2, r3}
    361c:	000001e8 	andeq	r0, r0, r8, ror #3
    3620:	0875220a 	ldmdaeq	r5!, {r1, r3, r9, sp}^
    3624:	04090000 	streq	r0, [r9], #-0
    3628:	0000023c 	andeq	r0, r0, ip, lsr r2
    362c:	0000b13a 	andeq	fp, r0, sl, lsr r1
    3630:	732c0b00 	teqvc	ip, #0, 22
    3634:	05000000 	streq	r0, [r0, #-0]
    3638:	00047003 	andeq	r7, r4, r3
    363c:	12963a20 	addsne	r3, r6, #32, 20	; 0x20000
    3640:	2c010000 	stccs	0, cr0, [r1], {-0}
    3644:	0000089d 	muleq	r0, sp, r8
    3648:	0dbc0305 	ldceq	3, cr0, [ip, #20]!
    364c:	cc372000 	ldcgt	0, cr2, [r7], #-0
    3650:	3a000000 	bcc	3658 <__Stack_Size+0x2e58>
    3654:	00001414 	andeq	r1, r0, r4, lsl r4
    3658:	08b32b01 	ldmeq	r3!, {r0, r8, r9, fp, sp}
    365c:	03050000 	movweq	r0, #20480	; 0x5000
    3660:	20000db0 			; <UNDEFINED> instruction: 0x20000db0
    3664:	00027a37 	andeq	r7, r2, r7, lsr sl
    3668:	00371600 	eorseq	r1, r7, r0, lsl #12
    366c:	08c80000 	stmiaeq	r8, {}^	; <UNPREDICTABLE>
    3670:	e4170000 	ldr	r0, [r7], #-0
    3674:	1f000000 	svcne	0x00000000
    3678:	12793a00 	rsbsne	r3, r9, #0, 20
    367c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    3680:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
    3684:	04d80305 	ldrbeq	r0, [r8], #773	; 0x305
    3688:	81162000 	tsthi	r6, r0
    368c:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
    3690:	17000008 	strne	r0, [r0, -r8]
    3694:	000000e4 	andeq	r0, r0, r4, ror #1
    3698:	e13a005b 	teq	sl, fp, asr r0
    369c:	01000011 	tsteq	r0, r1, lsl r0
    36a0:	0008d92f 	andeq	sp, r8, pc, lsr #18
    36a4:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
    36a8:	3b200004 	blcc	8036c0 <__Stack_Size+0x802ec0>
    36ac:	00787463 	rsbseq	r7, r8, r3, ror #8
    36b0:	03723001 	cmneq	r2, #1
    36b4:	03050000 	movweq	r0, #20480	; 0x5000
    36b8:	200004f8 	strdcs	r0, [r0], -r8
    36bc:	0013cc3a 	andseq	ip, r3, sl, lsr ip
    36c0:	1c3a0100 	ldfnes	f0, [sl], #-0
    36c4:	05000009 	streq	r0, [r0, #-9]
    36c8:	00056003 	andeq	r6, r5, r3
    36cc:	030a3720 	movweq	r3, #42784	; 0xa720
    36d0:	d73c0000 	ldrle	r0, [ip, -r0]!
    36d4:	0c000012 	stceq	0, cr0, [r0], {18}
    36d8:	0000e219 	andeq	lr, r0, r9, lsl r2
    36dc:	00094000 	andeq	r4, r9, r0
    36e0:	00e20e00 	rsceq	r0, r2, r0, lsl #28
    36e4:	730e0000 	movwvc	r0, #57344	; 0xe000
    36e8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    36ec:	000000d7 	ldrdeq	r0, [r0], -r7
    36f0:	13353d00 	teqne	r5, #0, 26
    36f4:	14080000 	strne	r0, [r8], #-0
    36f8:	00000951 	andeq	r0, r0, r1, asr r9
    36fc:	0009510e 	andeq	r5, r9, lr, lsl #2
    3700:	04090000 	streq	r0, [r9], #-0
    3704:	00000372 	andeq	r0, r0, r2, ror r3
    3708:	000c4b3e 	andeq	r4, ip, lr, lsr fp
    370c:	01300d00 	teqeq	r0, r0, lsl #26
    3710:	000000cc 	andeq	r0, r0, ip, asr #1
    3714:	0000096d 	andeq	r0, r0, sp, ror #18
    3718:	0000970e 	andeq	r9, r0, lr, lsl #14
    371c:	5b3e0000 	blpl	f83724 <__Stack_Size+0xf82f24>
    3720:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
    3724:	00cc012f 	sbceq	r0, ip, pc, lsr #2
    3728:	09880000 	stmibeq	r8, {}	; <UNPREDICTABLE>
    372c:	970e0000 	strls	r0, [lr, -r0]
    3730:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    3734:	00000097 	muleq	r0, r7, r0
    3738:	0b3a3c00 	bleq	e92740 <__Stack_Size+0xe91f40>
    373c:	67090000 	strvs	r0, [r9, -r0]
    3740:	00000073 	andeq	r0, r0, r3, ror r0
    3744:	000009a7 	andeq	r0, r0, r7, lsr #19
    3748:	0009a70e 	andeq	sl, r9, lr, lsl #14
    374c:	008c0e00 	addeq	r0, ip, r0, lsl #28
    3750:	cc0e0000 	stcgt	0, cr0, [lr], {-0}
    3754:	00000000 	andeq	r0, r0, r0
    3758:	043b0409 	ldrteq	r0, [fp], #-1033	; 0x409
    375c:	323f0000 	eorscc	r0, pc, #0
    3760:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    3764:	fb400132 	blx	1003c36 <__Stack_Size+0x1003436>
    3768:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    376c:	09c8013b 	stmibeq	r8, {r0, r1, r3, r4, r5, r8}^
    3770:	f20e0000 	vhadd.s8	d0, d14, d0
    3774:	41000000 	mrsmi	r0, (UNDEF: 0)
    3778:	0efc4200 	cdpeq	2, 15, cr4, cr12, cr0, {0}
    377c:	370d0000 	strcc	r0, [sp, -r0]
    3780:	00007301 	andeq	r7, r0, r1, lsl #6
    3784:	0af13f00 	beq	ffc5338c <BootRAM+0xebc3b2d>
    3788:	2a0d0000 	bcs	343790 <__Stack_Size+0x342f90>
    378c:	0e833f01 	cdpeq	15, 8, cr3, cr3, cr1, {0}
    3790:	330d0000 	movwcc	r0, #53248	; 0xd000
    3794:	0c723f01 	ldcleq	15, cr3, [r2], #-4
    3798:	260d0000 	strcs	r0, [sp], -r0
    379c:	0cc43f01 	stcleq	15, cr3, [r4], {1}
    37a0:	350d0000 	strcc	r0, [sp, #-0]
    37a4:	04734301 	ldrbteq	r4, [r3], #-769	; 0x301
    37a8:	830b0000 	movwhi	r0, #45056	; 0xb000
    37ac:	000a3300 	andeq	r3, sl, r0, lsl #6
    37b0:	ee000400 	cfcpys	mvf0, mvf0
    37b4:	0400000f 	streq	r0, [r0], #-15
    37b8:	0006c001 	andeq	ip, r6, r1
    37bc:	14470100 	strbne	r0, [r7], #-256	; 0x100
    37c0:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    37c4:	05480000 	strbeq	r0, [r8, #-0]
    37c8:	00000000 	andeq	r0, r0, r0
    37cc:	12b60000 	adcsne	r0, r6, #0
    37d0:	01020000 	mrseq	r0, (UNDEF: 2)
    37d4:	00081a06 	andeq	r1, r8, r6, lsl #20
    37d8:	0b0d0300 	bleq	3443e0 <__Stack_Size+0x343be0>
    37dc:	1c030000 	stcne	0, cr0, [r3], {-0}
    37e0:	00000037 	andeq	r0, r0, r7, lsr r0
    37e4:	18080102 	stmdane	r8, {r1, r8}
    37e8:	02000008 	andeq	r0, r0, #8
    37ec:	065e0502 	ldrbeq	r0, [lr], -r2, lsl #10
    37f0:	02020000 	andeq	r0, r2, #0
    37f4:	00094907 	andeq	r4, r9, r7, lsl #18
    37f8:	05040200 	streq	r0, [r4, #-512]	; 0x200
    37fc:	000004da 	ldrdeq	r0, [r0], -sl
    3800:	000ada03 	andeq	sp, sl, r3, lsl #20
    3804:	5e380300 	cdppl	3, 3, cr0, cr8, cr0, {0}
    3808:	02000000 	andeq	r0, r0, #0
    380c:	02520704 	subseq	r0, r2, #4, 14	; 0x100000
    3810:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    3814:	0004d505 	andeq	sp, r4, r5, lsl #10
    3818:	07080200 	streq	r0, [r8, -r0, lsl #4]
    381c:	0000024d 	andeq	r0, r0, sp, asr #4
    3820:	69050404 	stmdbvs	r5, {r2, sl}
    3824:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    3828:	02570704 	subseq	r0, r7, #4, 14	; 0x100000
    382c:	0f030000 	svceq	0x00030000
    3830:	0400000b 	streq	r0, [r0], #-11
    3834:	00002c2a 	andeq	r2, r0, sl, lsr #24
    3838:	0adc0300 	beq	ff704440 <BootRAM+0xe674be1>
    383c:	42040000 	andmi	r0, r4, #0
    3840:	00000053 	andeq	r0, r0, r3, asr r0
    3844:	8b070402 	blhi	1c4854 <__Stack_Size+0x1c4054>
    3848:	02000007 	andeq	r0, r0, #7
    384c:	08210801 	stmdaeq	r1!, {r0, fp}
    3850:	60050000 	andvs	r0, r5, r0
    3854:	02000014 	andeq	r0, r0, #20
    3858:	00c40322 	sbceq	r0, r4, r2, lsr #6
    385c:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    3860:	c4220200 	strtgt	r0, [r2], #-512	; 0x200
    3864:	06000000 	streq	r0, [r0], -r0
    3868:	22020061 	andcs	r0, r2, #97	; 0x61
    386c:	000000ca 	andeq	r0, r0, sl, asr #1
    3870:	81040700 	tsthi	r4, r0, lsl #14
    3874:	07000000 	streq	r0, [r0, -r0]
    3878:	0000d004 	andeq	sp, r0, r4
    387c:	00810800 	addeq	r0, r1, r0, lsl #16
    3880:	14050000 	strne	r0, [r5], #-0
    3884:	01000015 	tsteq	r0, r5, lsl r0
    3888:	0158012a 	cmpeq	r8, sl, lsr #2
    388c:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    3890:	2a010035 	bcs	4396c <__Stack_Size+0x4316c>
    3894:	000000c4 	andeq	r0, r0, r4, asr #1
    3898:	00357a06 	eorseq	r7, r5, r6, lsl #20
    389c:	00c42a01 	sbceq	r2, r4, r1, lsl #20
    38a0:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    38a4:	2b010031 	blcs	43970 <__Stack_Size+0x43170>
    38a8:	000000ca 	andeq	r0, r0, sl, asr #1
    38ac:	00317a06 	eorseq	r7, r1, r6, lsl #20
    38b0:	00ca2b01 	sbceq	r2, sl, r1, lsl #22
    38b4:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    38b8:	2c010032 	stccs	0, cr0, [r1], {50}	; 0x32
    38bc:	000000ca 	andeq	r0, r0, sl, asr #1
    38c0:	00327a06 	eorseq	r7, r2, r6, lsl #20
    38c4:	00ca2c01 	sbceq	r2, sl, r1, lsl #24
    38c8:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    38cc:	2d010033 	stccs	0, cr0, [r1, #-204]	; 0xffffff34
    38d0:	000000ca 	andeq	r0, r0, sl, asr #1
    38d4:	00337a06 	eorseq	r7, r3, r6, lsl #20
    38d8:	00ca2d01 	sbceq	r2, sl, r1, lsl #26
    38dc:	64090000 	strvs	r0, [r9], #-0
    38e0:	3d010061 	stccc	0, cr0, [r1, #-388]	; 0xfffffe7c
    38e4:	00000158 	andeq	r0, r0, r8, asr r1
    38e8:	00626309 	rsbeq	r6, r2, r9, lsl #6
    38ec:	01583e01 	cmpeq	r8, r1, lsl #28
    38f0:	61090000 	mrsvs	r0, (UNDEF: 9)
    38f4:	583f0100 	ldmdapl	pc!, {r8}	; <UNPREDICTABLE>
    38f8:	09000001 	stmdbeq	r0, {r0}
    38fc:	40010062 	andmi	r0, r1, r2, rrx
    3900:	00000158 	andeq	r0, r0, r8, asr r1
    3904:	00810a00 	addeq	r0, r1, r0, lsl #20
    3908:	01680000 	cmneq	r8, r0
    390c:	970b0000 	strls	r0, [fp, -r0]
    3910:	1f000000 	svcne	0x00000000
    3914:	14560500 	ldrbne	r0, [r6], #-1280	; 0x500
    3918:	0c010000 	stceq	0, cr0, [r1], {-0}
    391c:	0001c701 	andeq	ip, r1, r1, lsl #14
    3920:	33780600 	cmncc	r8, #0, 12
    3924:	c40c0100 	strgt	r0, [ip], #-256	; 0x100
    3928:	06000000 	streq	r0, [r0], -r0
    392c:	0100337a 	tsteq	r0, sl, ror r3
    3930:	0000c40c 	andeq	ip, r0, ip, lsl #8
    3934:	31780600 	cmncc	r8, r0, lsl #12
    3938:	ca0d0100 	bgt	343d40 <__Stack_Size+0x343540>
    393c:	06000000 	streq	r0, [r0], -r0
    3940:	0100317a 	tsteq	r0, sl, ror r1
    3944:	0000ca0d 	andeq	ip, r0, sp, lsl #20
    3948:	14920c00 	ldrne	r0, [r2], #3072	; 0xc00
    394c:	16010000 	strne	r0, [r1], -r0
    3950:	00000158 	andeq	r0, r0, r8, asr r1
    3954:	0014a20c 	andseq	sl, r4, ip, lsl #4
    3958:	58170100 	ldmdapl	r7, {r8}
    395c:	0c000001 	stceq	0, cr0, [r0], {1}
    3960:	000014bf 			; <UNDEFINED> instruction: 0x000014bf
    3964:	01581801 	cmpeq	r8, r1, lsl #16
    3968:	61090000 	mrsvs	r0, (UNDEF: 9)
    396c:	58190100 	ldmdapl	r9, {r8}
    3970:	00000001 	andeq	r0, r0, r1
    3974:	0014a70d 	andseq	sl, r4, sp, lsl #14
    3978:	00530100 	subseq	r0, r3, r0, lsl #2
    397c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    3980:	01000002 	tsteq	r0, r2
    3984:	00095c9c 	muleq	r9, ip, ip
    3988:	150d0e00 	strne	r0, [sp, #-3584]	; 0xe00
    398c:	53010000 	movwpl	r0, #4096	; 0x1000
    3990:	000000c4 	andeq	r0, r0, r4, asr #1
    3994:	00000e5d 	andeq	r0, r0, sp, asr lr
    3998:	0100710f 	tsteq	r0, pc, lsl #2
    399c:	0000ca53 	andeq	ip, r0, r3, asr sl
    39a0:	000e8900 	andeq	r8, lr, r0, lsl #18
    39a4:	00650f00 	rsbeq	r0, r5, r0, lsl #30
    39a8:	00ca5301 	sbceq	r5, sl, r1, lsl #6
    39ac:	0eb50000 	cdpeq	0, 11, cr0, cr5, cr0, {0}
    39b0:	78100000 	ldmdavc	r0, {}	; <UNPREDICTABLE>
    39b4:	5601006d 	strpl	r0, [r1], -sp, rrx
    39b8:	00000158 	andeq	r0, r0, r8, asr r1
    39bc:	7da89103 	stfvcd	f1, [r8, #12]!
    39c0:	006d7a10 	rsbeq	r7, sp, r0, lsl sl
    39c4:	01585701 	cmpeq	r8, r1, lsl #14
    39c8:	91030000 	mrsls	r0, (UNDEF: 3)
    39cc:	78107dc8 	ldmdavc	r0, {r3, r6, r7, r8, sl, fp, ip, sp, lr}
    39d0:	0100316d 	tsteq	r0, sp, ror #2
    39d4:	0001585a 	andeq	r5, r1, sl, asr r8
    39d8:	e8910300 	ldm	r1, {r8, r9}
    39dc:	6d7a107d 	ldclvs	0, cr1, [sl, #-500]!	; 0xfffffe0c
    39e0:	5b010031 	blpl	43aac <__Stack_Size+0x432ac>
    39e4:	00000158 	andeq	r0, r0, r8, asr r1
    39e8:	7e889103 	sinvce	f1, f3
    39ec:	01006911 	tsteq	r0, r1, lsl r9
    39f0:	0000735d 	andeq	r7, r0, sp, asr r3
    39f4:	000ee100 	andeq	lr, lr, r0, lsl #2
    39f8:	00a51200 	adceq	r1, r5, r0, lsl #4
    39fc:	00000000 	andeq	r0, r0, r0
    3a00:	04c80000 	strbeq	r0, [r8], #0
    3a04:	60010000 	andvs	r0, r1, r0
    3a08:	00000272 	andeq	r0, r0, r2, ror r2
    3a0c:	0000ba13 	andeq	fp, r0, r3, lsl sl
    3a10:	000f0c00 	andeq	r0, pc, r0, lsl #24
    3a14:	00b11300 	adcseq	r1, r1, r0, lsl #6
    3a18:	0f2d0000 	svceq	0x002d0000
    3a1c:	14000000 	strne	r0, [r0], #-0
    3a20:	000004f8 	strdeq	r0, [r0], -r8
    3a24:	0000090e 	andeq	r0, r0, lr, lsl #18
    3a28:	74696211 	strbtvc	r6, [r9], #-529	; 0x211
    3a2c:	5c630100 	stfple	f0, [r3], #-0
    3a30:	5c000009 	stcpl	0, cr0, [r0], {9}
    3a34:	1000000f 	andne	r0, r0, pc
    3a38:	00736d78 	rsbseq	r6, r3, r8, ror sp
    3a3c:	01586401 	cmpeq	r8, r1, lsl #8
    3a40:	91030000 	mrsls	r0, (UNDEF: 3)
    3a44:	7a107ea8 	bvc	4234ec <__Stack_Size+0x422cec>
    3a48:	0100736d 	tsteq	r0, sp, ror #6
    3a4c:	00015865 	andeq	r5, r1, r5, ror #16
    3a50:	c8910300 	ldmgt	r1, {r8, r9}
    3a54:	00d5127e 	sbcseq	r1, r5, lr, ror r2
    3a58:	00000000 	andeq	r0, r0, r0
    3a5c:	05100000 	ldreq	r0, [r0, #-0]
    3a60:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    3a64:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    3a68:	0000ff15 	andeq	pc, r0, r5, lsl pc	; <UNPREDICTABLE>
    3a6c:	01271300 	teqeq	r7, r0, lsl #6
    3a70:	0f6f0000 	svceq	0x006f0000
    3a74:	1d130000 	ldcne	0, cr0, [r3, #-0]
    3a78:	de000001 	cdple	0, 0, cr0, cr0, cr1, {0}
    3a7c:	1300000f 	movwne	r0, #15
    3a80:	00000113 	andeq	r0, r0, r3, lsl r1
    3a84:	00001034 	andeq	r1, r0, r4, lsr r0
    3a88:	00010913 	andeq	r0, r1, r3, lsl r9
    3a8c:	0010a300 	andseq	sl, r0, r0, lsl #6
    3a90:	00f51300 	rscseq	r1, r5, r0, lsl #6
    3a94:	10d20000 	sbcsne	r0, r2, r0
    3a98:	eb130000 	bl	4c3aa0 <__Stack_Size+0x4c32a0>
    3a9c:	6f000000 	svcvs	0x00000000
    3aa0:	1300000f 	movwne	r0, #15
    3aa4:	000000e1 	andeq	r0, r0, r1, ror #1
    3aa8:	00000fde 	ldrdeq	r0, [r0], -lr
    3aac:	00051016 	andeq	r1, r5, r6, lsl r0
    3ab0:	01311700 	teqeq	r1, r0, lsl #14
    3ab4:	91030000 	mrsls	r0, (UNDEF: 3)
    3ab8:	3b177ee8 	blcc	5e3660 <__Stack_Size+0x5e2e60>
    3abc:	03000001 	movweq	r0, #1
    3ac0:	177f8891 			; <UNDEFINED> instruction: 0x177f8891
    3ac4:	00000145 	andeq	r0, r0, r5, asr #2
    3ac8:	7fa89103 	svcvc	0x00a89103
    3acc:	00014e17 	andeq	r4, r1, r7, lsl lr
    3ad0:	48910200 	ldmmi	r1, {r9}
    3ad4:	00000018 	andeq	r0, r0, r8, lsl r0
    3ad8:	00098700 	andeq	r8, r9, r0, lsl #14
    3adc:	00034900 	andeq	r4, r3, r0, lsl #18
    3ae0:	52011900 	andpl	r1, r1, #0, 18
    3ae4:	7dc89103 	stfvcp	f1, [r8, #12]
    3ae8:	02510119 	subseq	r0, r1, #1073741830	; 0x40000006
    3aec:	0119007d 	tsteq	r9, sp, ror r0
    3af0:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    3af4:	0018007f 	andseq	r0, r8, pc, ror r0
    3af8:	a2000000 	andge	r0, r0, #0
    3afc:	6b000009 	blvs	3b28 <__Stack_Size+0x3328>
    3b00:	19000003 	stmdbne	r0, {r0, r1}
    3b04:	91035201 	tstls	r3, r1, lsl #4
    3b08:	01197e88 	tsteq	r9, r8, lsl #29
    3b0c:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    3b10:	5001197d 	andpl	r1, r1, sp, ror r9
    3b14:	00489102 	subeq	r9, r8, r2, lsl #2
    3b18:	00000018 	andeq	r0, r0, r8, lsl r0
    3b1c:	0009bd00 	andeq	fp, r9, r0, lsl #26
    3b20:	00038d00 	andeq	r8, r3, r0, lsl #26
    3b24:	52011900 	andpl	r1, r1, #0, 18
    3b28:	19489102 	stmdbne	r8, {r1, r8, ip, pc}^
    3b2c:	91035101 	tstls	r3, r1, lsl #2
    3b30:	01197fa8 	tsteq	r9, r8, lsr #31
    3b34:	e8910350 	ldm	r1, {r4, r6, r8, r9}
    3b38:	0018007e 	andseq	r0, r8, lr, ror r0
    3b3c:	a2000000 	andge	r0, r0, #0
    3b40:	ae000009 	cdpge	0, 0, cr0, cr0, cr9, {0}
    3b44:	19000003 	stmdbne	r0, {r0, r1}
    3b48:	91035201 	tstls	r3, r1, lsl #4
    3b4c:	01197dc8 	tsteq	r9, r8, asr #27
    3b50:	007d0251 	rsbseq	r0, sp, r1, asr r2
    3b54:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    3b58:	18004891 	stmdane	r0, {r0, r4, r7, fp, lr}
    3b5c:	00000000 	andeq	r0, r0, r0
    3b60:	00000987 	andeq	r0, r0, r7, lsl #19
    3b64:	000003d1 	ldrdeq	r0, [r0], -r1
    3b68:	03520119 	cmpeq	r2, #1073741830	; 0x40000006
    3b6c:	197e8891 	ldmdbne	lr!, {r0, r4, r7, fp, pc}^
    3b70:	91035101 	tstls	r3, r1, lsl #2
    3b74:	01197de8 	tsteq	r9, r8, ror #27
    3b78:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    3b7c:	0018007f 	andseq	r0, r8, pc, ror r0
    3b80:	bd000000 	stclt	0, cr0, [r0, #-0]
    3b84:	f3000009 	vhadd.u8	d0, d0, d9
    3b88:	19000003 	stmdbne	r0, {r0, r1}
    3b8c:	91025201 	tstls	r2, r1, lsl #4
    3b90:	51011948 	tstpl	r1, r8, asr #18
    3b94:	7fa89103 	svcvc	0x00a89103
    3b98:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    3b9c:	007f8891 			; <UNDEFINED> instruction: 0x007f8891
    3ba0:	00000018 	andeq	r0, r0, r8, lsl r0
    3ba4:	00098700 	andeq	r8, r9, r0, lsl #14
    3ba8:	00041600 	andeq	r1, r4, r0, lsl #12
    3bac:	52011900 	andpl	r1, r1, #0, 18
    3bb0:	7f889103 	svcvc	0x00889103
    3bb4:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    3bb8:	197ee891 	ldmdbne	lr!, {r0, r4, r7, fp, sp, lr, pc}^
    3bbc:	91035001 	tstls	r3, r1
    3bc0:	18007fa8 	stmdane	r0, {r3, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    3bc4:	00000000 	andeq	r0, r0, r0
    3bc8:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    3bcc:	00000438 	andeq	r0, r0, r8, lsr r4
    3bd0:	03520119 	cmpeq	r2, #1073741830	; 0x40000006
    3bd4:	197fa891 	ldmdbne	pc!, {r0, r4, r7, fp, sp, pc}^	; <UNPREDICTABLE>
    3bd8:	91035101 	tstls	r3, r1, lsl #2
    3bdc:	01197fa8 	tsteq	r9, r8, lsr #31
    3be0:	48910250 	ldmmi	r1, {r4, r6, r9}
    3be4:	00001800 	andeq	r1, r0, r0, lsl #16
    3be8:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    3bec:	04530000 	ldrbeq	r0, [r3], #-0
    3bf0:	01190000 	tsteq	r9, r0
    3bf4:	48910252 	ldmmi	r1, {r1, r4, r6, r9}
    3bf8:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    3bfc:	007de891 			; <UNDEFINED> instruction: 0x007de891
    3c00:	00000018 	andeq	r0, r0, r8, lsl r0
    3c04:	0009a200 	andeq	sl, r9, r0, lsl #4
    3c08:	00047600 	andeq	r7, r4, r0, lsl #12
    3c0c:	52011900 	andpl	r1, r1, #0, 18
    3c10:	7f889103 	svcvc	0x00889103
    3c14:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    3c18:	197ee891 	ldmdbne	lr!, {r0, r4, r7, fp, sp, lr, pc}^
    3c1c:	91035001 	tstls	r3, r1
    3c20:	18007fa8 	stmdane	r0, {r3, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    3c24:	00000000 	andeq	r0, r0, r0
    3c28:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    3c2c:	00000498 	muleq	r0, r8, r4
    3c30:	03520119 	cmpeq	r2, #1073741830	; 0x40000006
    3c34:	197fa891 	ldmdbne	pc!, {r0, r4, r7, fp, sp, pc}^	; <UNPREDICTABLE>
    3c38:	91035101 	tstls	r3, r1, lsl #2
    3c3c:	01197fa8 	tsteq	r9, r8, lsr #31
    3c40:	48910250 	ldmmi	r1, {r4, r6, r9}
    3c44:	00001a00 	andeq	r1, r0, r0, lsl #20
    3c48:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    3c4c:	01190000 	tsteq	r9, r0
    3c50:	48910252 	ldmmi	r1, {r1, r4, r6, r9}
    3c54:	02510119 	subseq	r0, r1, #1073741830	; 0x40000006
    3c58:	01190076 	tsteq	r9, r6, ror r0
    3c5c:	88910350 	ldmhi	r1, {r4, r6, r8, r9}
    3c60:	0000007e 	andeq	r0, r0, lr, ror r0
    3c64:	0001681b 	andeq	r6, r1, fp, lsl r8
    3c68:	00000000 	andeq	r0, r0, r0
    3c6c:	00006400 	andeq	r6, r0, r0, lsl #8
    3c70:	69690100 	stmdbvs	r9!, {r8}^
    3c74:	13000006 	movwne	r0, #6
    3c78:	00000192 	muleq	r0, r2, r1
    3c7c:	00001034 	andeq	r1, r0, r4, lsr r0
    3c80:	00018813 	andeq	r8, r1, r3, lsl r8
    3c84:	0010a300 	andseq	sl, r0, r0, lsl #6
    3c88:	017e1300 	cmneq	lr, r0, lsl #6
    3c8c:	10340000 	eorsne	r0, r4, r0
    3c90:	74130000 	ldrvc	r0, [r3], #-0
    3c94:	a3000001 	movwge	r0, #1
    3c98:	1c000010 	stcne	0, cr0, [r0], {16}
    3c9c:	00000000 	andeq	r0, r0, r0
    3ca0:	00000064 	andeq	r0, r0, r4, rrx
    3ca4:	00019c17 	andeq	r9, r1, r7, lsl ip
    3ca8:	e8910300 	ldm	r1, {r8, r9}
    3cac:	01a7177e 			; <UNDEFINED> instruction: 0x01a7177e
    3cb0:	91030000 	mrsls	r0, (UNDEF: 3)
    3cb4:	b2177f88 	andslt	r7, r7, #136, 30	; 0x220
    3cb8:	03000001 	movweq	r0, #1
    3cbc:	177fa891 			; <UNDEFINED> instruction: 0x177fa891
    3cc0:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
    3cc4:	18489102 	stmdane	r8, {r1, r8, ip, pc}^
    3cc8:	00000000 	andeq	r0, r0, r0
    3ccc:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    3cd0:	0000053b 	andeq	r0, r0, fp, lsr r5
    3cd4:	02520119 	subseq	r0, r2, #1073741830	; 0x40000006
    3cd8:	0119007d 	tsteq	r9, sp, ror r0
    3cdc:	007d0251 	rsbseq	r0, sp, r1, asr r2
    3ce0:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    3ce4:	007ee891 			; <UNDEFINED> instruction: 0x007ee891
    3ce8:	00000018 	andeq	r0, r0, r8, lsl r0
    3cec:	0009bd00 	andeq	fp, r9, r0, lsl #26
    3cf0:	00055e00 	andeq	r5, r5, r0, lsl #28
    3cf4:	52011900 	andpl	r1, r1, #0, 18
    3cf8:	7dc89103 	stfvcp	f1, [r8, #12]
    3cfc:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    3d00:	197dc891 	ldmdbne	sp!, {r0, r4, r7, fp, lr, pc}^
    3d04:	91035001 	tstls	r3, r1
    3d08:	18007f88 	stmdane	r0, {r3, r7, r8, r9, sl, fp, ip, sp, lr}
    3d0c:	00000000 	andeq	r0, r0, r0
    3d10:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    3d14:	00000580 	andeq	r0, r0, r0, lsl #11
    3d18:	03520119 	cmpeq	r2, #1073741830	; 0x40000006
    3d1c:	197dc891 	ldmdbne	sp!, {r0, r4, r7, fp, lr, pc}^
    3d20:	7d025101 	stfvcs	f5, [r2, #-4]
    3d24:	50011900 	andpl	r1, r1, r0, lsl #18
    3d28:	7fa89103 	svcvc	0x00a89103
    3d2c:	00001800 	andeq	r1, r0, r0, lsl #16
    3d30:	09a20000 	stmibeq	r2!, {}	; <UNPREDICTABLE>
    3d34:	05a20000 	streq	r0, [r2, #0]!
    3d38:	01190000 	tsteq	r9, r0
    3d3c:	88910352 	ldmhi	r1, {r1, r4, r6, r8, r9}
    3d40:	5101197f 	tstpl	r1, pc, ror r9
    3d44:	7ee89103 	urdvce	f1, f3
    3d48:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    3d4c:	18004891 	stmdane	r0, {r0, r4, r7, fp, lr}
    3d50:	00000000 	andeq	r0, r0, r0
    3d54:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    3d58:	000005c2 	andeq	r0, r0, r2, asr #11
    3d5c:	02520119 	subseq	r0, r2, #1073741830	; 0x40000006
    3d60:	01194891 			; <UNDEFINED> instruction: 0x01194891
    3d64:	48910251 	ldmmi	r1, {r0, r4, r6, r9}
    3d68:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    3d6c:	1800007d 	stmdane	r0, {r0, r2, r3, r4, r5, r6}
    3d70:	00000000 	andeq	r0, r0, r0
    3d74:	000009d8 	ldrdeq	r0, [r0], -r8
    3d78:	000005e6 	andeq	r0, r0, r6, ror #11
    3d7c:	05520119 	ldrbeq	r0, [r2, #-281]	; 0x119
    3d80:	076d060c 	strbeq	r0, [sp, -ip, lsl #12]!
    3d84:	51011900 	tstpl	r1, r0, lsl #18
    3d88:	7fa89103 	svcvc	0x00a89103
    3d8c:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    3d90:	18004891 	stmdane	r0, {r0, r4, r7, fp, lr}
    3d94:	00000000 	andeq	r0, r0, r0
    3d98:	00000987 	andeq	r0, r0, r7, lsl #19
    3d9c:	00000607 	andeq	r0, r0, r7, lsl #12
    3da0:	02520119 	subseq	r0, r2, #1073741830	; 0x40000006
    3da4:	01194891 			; <UNDEFINED> instruction: 0x01194891
    3da8:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    3dac:	5001197e 	andpl	r1, r1, lr, ror r9
    3db0:	00489102 	subeq	r9, r8, r2, lsl #2
    3db4:	00000018 	andeq	r0, r0, r8, lsl r0
    3db8:	00098700 	andeq	r8, r9, r0, lsl #14
    3dbc:	00062800 	andeq	r2, r6, r0, lsl #16
    3dc0:	52011900 	andpl	r1, r1, #0, 18
    3dc4:	19489102 	stmdbne	r8, {r1, r8, ip, pc}^
    3dc8:	91035101 	tstls	r3, r1, lsl #2
    3dcc:	01197f88 	tsteq	r9, r8, lsl #31
    3dd0:	48910250 	ldmmi	r1, {r4, r6, r9}
    3dd4:	00001800 	andeq	r1, r0, r0, lsl #16
    3dd8:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    3ddc:	064a0000 	strbeq	r0, [sl], -r0
    3de0:	01190000 	tsteq	r9, r0
    3de4:	48910252 	ldmmi	r1, {r1, r4, r6, r9}
    3de8:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    3dec:	197fa891 	ldmdbne	pc!, {r0, r4, r7, fp, sp, pc}^	; <UNPREDICTABLE>
    3df0:	91035001 	tstls	r3, r1
    3df4:	1a007ee8 	bne	2399c <__Stack_Size+0x2319c>
    3df8:	00000000 	andeq	r0, r0, r0
    3dfc:	000009d8 	ldrdeq	r0, [r0], -r8
    3e00:	01520119 	cmpeq	r2, r9, lsl r1
    3e04:	51011934 	tstpl	r1, r4, lsr r9
    3e08:	7ee89103 	urdvce	f1, f3
    3e0c:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    3e10:	007dc891 			; <UNDEFINED> instruction: 0x007dc891
    3e14:	d5120000 	ldrle	r0, [r2, #-0]
    3e18:	00000000 	andeq	r0, r0, r0
    3e1c:	30000000 	andcc	r0, r0, r0
    3e20:	01000005 	tsteq	r0, r5
    3e24:	0008706c 	andeq	r7, r8, ip, rrx
    3e28:	01271500 	teqeq	r7, r0, lsl #10
    3e2c:	1d130000 	ldcne	0, cr0, [r3, #-0]
    3e30:	d2000001 	andle	r0, r0, #1
    3e34:	13000010 	movwne	r0, #16
    3e38:	00000113 	andeq	r0, r0, r3, lsl r1
    3e3c:	00001034 	andeq	r1, r0, r4, lsr r0
    3e40:	00010913 	andeq	r0, r1, r3, lsl r9
    3e44:	0010a300 	andseq	sl, r0, r0, lsl #6
    3e48:	00ff1300 	rscseq	r1, pc, r0, lsl #6
    3e4c:	0f6f0000 	svceq	0x006f0000
    3e50:	f5130000 			; <UNDEFINED> instruction: 0xf5130000
    3e54:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    3e58:	1300000f 	movwne	r0, #15
    3e5c:	000000eb 	andeq	r0, r0, fp, ror #1
    3e60:	000010f3 	strdeq	r1, [r0], -r3
    3e64:	0000e113 	andeq	lr, r0, r3, lsl r1
    3e68:	00114900 	andseq	r4, r1, r0, lsl #18
    3e6c:	05301600 	ldreq	r1, [r0, #-1536]!	; 0x600
    3e70:	31170000 	tstcc	r7, r0
    3e74:	03000001 	movweq	r0, #1
    3e78:	177ee891 			; <UNDEFINED> instruction: 0x177ee891
    3e7c:	0000013b 	andeq	r0, r0, fp, lsr r1
    3e80:	7f889103 	svcvc	0x00889103
    3e84:	00014517 	andeq	r4, r1, r7, lsl r5
    3e88:	a8910300 	ldmge	r1, {r8, r9}
    3e8c:	014e177f 	hvceq	57727	; 0xe17f
    3e90:	91020000 	mrsls	r0, (UNDEF: 2)
    3e94:	00001848 	andeq	r1, r0, r8, asr #16
    3e98:	09870000 	stmibeq	r7, {}	; <UNPREDICTABLE>
    3e9c:	070a0000 	streq	r0, [sl, -r0]
    3ea0:	01190000 	tsteq	r9, r0
    3ea4:	c8910352 	ldmgt	r1, {r1, r4, r6, r8, r9}
    3ea8:	5101197d 	tstpl	r1, sp, ror r9
    3eac:	19007d02 	stmdbne	r0, {r1, r8, sl, fp, ip, sp, lr}
    3eb0:	91035001 	tstls	r3, r1
    3eb4:	18007fa8 	stmdane	r0, {r3, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    3eb8:	00000000 	andeq	r0, r0, r0
    3ebc:	000009a2 	andeq	r0, r0, r2, lsr #19
    3ec0:	00000724 	andeq	r0, r0, r4, lsr #14
    3ec4:	02510119 	subseq	r0, r1, #1073741830	; 0x40000006
    3ec8:	01190076 	tsteq	r9, r6, ror r0
    3ecc:	48910250 	ldmmi	r1, {r4, r6, r9}
    3ed0:	00001800 	andeq	r1, r0, r0, lsl #16
    3ed4:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    3ed8:	07460000 	strbeq	r0, [r6, -r0]
    3edc:	01190000 	tsteq	r9, r0
    3ee0:	48910252 	ldmmi	r1, {r1, r4, r6, r9}
    3ee4:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    3ee8:	197fa891 	ldmdbne	pc!, {r0, r4, r7, fp, sp, pc}^	; <UNPREDICTABLE>
    3eec:	91035001 	tstls	r3, r1
    3ef0:	18007ee8 	stmdane	r0, {r3, r5, r6, r7, r9, sl, fp, ip, sp, lr}
    3ef4:	00000000 	andeq	r0, r0, r0
    3ef8:	000009a2 	andeq	r0, r0, r2, lsr #19
    3efc:	00000767 	andeq	r0, r0, r7, ror #14
    3f00:	03520119 	cmpeq	r2, #1073741830	; 0x40000006
    3f04:	197dc891 	ldmdbne	sp!, {r0, r4, r7, fp, lr, pc}^
    3f08:	7d025101 	stfvcs	f5, [r2, #-4]
    3f0c:	50011900 	andpl	r1, r1, r0, lsl #18
    3f10:	00489102 	subeq	r9, r8, r2, lsl #2
    3f14:	00000018 	andeq	r0, r0, r8, lsl r0
    3f18:	00098700 	andeq	r8, r9, r0, lsl #14
    3f1c:	00078200 	andeq	r8, r7, r0, lsl #4
    3f20:	51011900 	tstpl	r1, r0, lsl #18
    3f24:	19007602 	stmdbne	r0, {r1, r9, sl, ip, sp, lr}
    3f28:	91035001 	tstls	r3, r1
    3f2c:	18007fa8 	stmdane	r0, {r3, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    3f30:	00000000 	andeq	r0, r0, r0
    3f34:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    3f38:	000007a4 	andeq	r0, r0, r4, lsr #15
    3f3c:	02520119 	subseq	r0, r2, #1073741830	; 0x40000006
    3f40:	01194891 			; <UNDEFINED> instruction: 0x01194891
    3f44:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    3f48:	5001197f 	andpl	r1, r1, pc, ror r9
    3f4c:	7f889103 	svcvc	0x00889103
    3f50:	00001800 	andeq	r1, r0, r0, lsl #16
    3f54:	09870000 	stmibeq	r7, {}	; <UNPREDICTABLE>
    3f58:	07c70000 	strbeq	r0, [r7, r0]
    3f5c:	01190000 	tsteq	r9, r0
    3f60:	88910352 	ldmhi	r1, {r1, r4, r6, r8, r9}
    3f64:	5101197f 	tstpl	r1, pc, ror r9
    3f68:	7ee89103 	urdvce	f1, f3
    3f6c:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    3f70:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    3f74:	00000018 	andeq	r0, r0, r8, lsl r0
    3f78:	0009bd00 	andeq	fp, r9, r0, lsl #26
    3f7c:	0007e900 	andeq	lr, r7, r0, lsl #18
    3f80:	52011900 	andpl	r1, r1, #0, 18
    3f84:	7fa89103 	svcvc	0x00a89103
    3f88:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    3f8c:	197fa891 	ldmdbne	pc!, {r0, r4, r7, fp, sp, pc}^	; <UNPREDICTABLE>
    3f90:	91025001 	tstls	r2, r1
    3f94:	00180048 	andseq	r0, r8, r8, asr #32
    3f98:	bd000000 	stclt	0, cr0, [r0, #-0]
    3f9c:	0b000009 	bleq	3fc8 <__Stack_Size+0x37c8>
    3fa0:	19000008 	stmdbne	r0, {r3}
    3fa4:	91025201 	tstls	r2, r1, lsl #4
    3fa8:	51011948 	tstpl	r1, r8, asr #18
    3fac:	7e889103 	sinvce	f1, f3
    3fb0:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    3fb4:	007ea891 			; <UNDEFINED> instruction: 0x007ea891
    3fb8:	00000018 	andeq	r0, r0, r8, lsl r0
    3fbc:	0009a200 	andeq	sl, r9, r0, lsl #4
    3fc0:	00082e00 	andeq	r2, r8, r0, lsl #28
    3fc4:	52011900 	andpl	r1, r1, #0, 18
    3fc8:	7f889103 	svcvc	0x00889103
    3fcc:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    3fd0:	197ee891 	ldmdbne	lr!, {r0, r4, r7, fp, sp, lr, pc}^
    3fd4:	91035001 	tstls	r3, r1
    3fd8:	18007fa8 	stmdane	r0, {r3, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    3fdc:	00000000 	andeq	r0, r0, r0
    3fe0:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    3fe4:	00000850 	andeq	r0, r0, r0, asr r8
    3fe8:	03520119 	cmpeq	r2, #1073741830	; 0x40000006
    3fec:	197fa891 	ldmdbne	pc!, {r0, r4, r7, fp, sp, pc}^	; <UNPREDICTABLE>
    3ff0:	91035101 	tstls	r3, r1, lsl #2
    3ff4:	01197fa8 	tsteq	r9, r8, lsr #31
    3ff8:	48910250 	ldmmi	r1, {r4, r6, r9}
    3ffc:	00001a00 	andeq	r1, r0, r0, lsl #20
    4000:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    4004:	01190000 	tsteq	r9, r0
    4008:	48910252 	ldmmi	r1, {r1, r4, r6, r9}
    400c:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    4010:	197de891 	ldmdbne	sp!, {r0, r4, r7, fp, sp, lr, pc}^
    4014:	91035001 	tstls	r3, r1
    4018:	00007ec8 	andeq	r7, r0, r8, asr #29
    401c:	00001800 	andeq	r1, r0, r0, lsl #16
    4020:	09f30000 	ldmibeq	r3!, {}^	; <UNPREDICTABLE>
    4024:	08980000 	ldmeq	r8, {}	; <UNPREDICTABLE>
    4028:	01190000 	tsteq	r9, r0
    402c:	00750253 	rsbseq	r0, r5, r3, asr r2
    4030:	02520119 	subseq	r0, r2, #1073741830	; 0x40000006
    4034:	0119007d 	tsteq	r9, sp, ror r0
    4038:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    403c:	5001197d 	andpl	r1, r1, sp, ror r9
    4040:	7de89103 	stfvcp	f1, [r8, #12]!
    4044:	00001800 	andeq	r1, r0, r0, lsl #16
    4048:	09f30000 	ldmibeq	r3!, {}^	; <UNPREDICTABLE>
    404c:	08c10000 	stmiaeq	r1, {}^	; <UNPREDICTABLE>
    4050:	01190000 	tsteq	r9, r0
    4054:	00750253 	rsbseq	r0, r5, r3, asr r2
    4058:	03520119 	cmpeq	r2, #1073741830	; 0x40000006
    405c:	197dc891 	ldmdbne	sp!, {r0, r4, r7, fp, lr, pc}^
    4060:	91035101 	tstls	r3, r1, lsl #2
    4064:	01197e88 	tsteq	r9, r8, lsl #29
    4068:	88910350 	ldmhi	r1, {r4, r6, r8, r9}
    406c:	0018007e 	andseq	r0, r8, lr, ror r0
    4070:	f3000000 	vhadd.u8	d0, d0, d0
    4074:	e8000009 	stmda	r0, {r0, r3}
    4078:	19000008 	stmdbne	r0, {r3}
    407c:	75025301 	strvc	r5, [r2, #-769]	; 0x301
    4080:	52011900 	andpl	r1, r1, #0, 18
    4084:	7ea89103 	tanvce	f1, f3
    4088:	02510119 	subseq	r0, r1, #1073741830	; 0x40000006
    408c:	0119007d 	tsteq	r9, sp, ror r0
    4090:	007d0250 	rsbseq	r0, sp, r0, asr r2
    4094:	00001a00 	andeq	r1, r0, r0, lsl #20
    4098:	09f30000 	ldmibeq	r3!, {}^	; <UNPREDICTABLE>
    409c:	01190000 	tsteq	r9, r0
    40a0:	00750253 	rsbseq	r0, r5, r3, asr r2
    40a4:	03520119 	cmpeq	r2, #1073741830	; 0x40000006
    40a8:	197ec891 	ldmdbne	lr!, {r0, r4, r7, fp, lr, pc}^
    40ac:	91035101 	tstls	r3, r1, lsl #2
    40b0:	01197dc8 	tsteq	r9, r8, asr #27
    40b4:	c8910350 	ldmgt	r1, {r4, r6, r8, r9}
    40b8:	1800007d 	stmdane	r0, {r0, r2, r3, r4, r5, r6}
    40bc:	00000000 	andeq	r0, r0, r0
    40c0:	00000a13 	andeq	r0, r0, r3, lsl sl
    40c4:	0000092a 	andeq	r0, r0, sl, lsr #18
    40c8:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    40cc:	197dc891 	ldmdbne	sp!, {r0, r4, r7, fp, lr, pc}^
    40d0:	91035001 	tstls	r3, r1
    40d4:	18007e88 	stmdane	r0, {r3, r7, r9, sl, fp, ip, sp, lr}
    40d8:	00000000 	andeq	r0, r0, r0
    40dc:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    40e0:	0000094b 	andeq	r0, r0, fp, asr #18
    40e4:	02520119 	subseq	r0, r2, #1073741830	; 0x40000006
    40e8:	0119007d 	tsteq	r9, sp, ror r0
    40ec:	88910351 	ldmhi	r1, {r0, r4, r6, r8, r9}
    40f0:	5001197e 	andpl	r1, r1, lr, ror r9
    40f4:	00007802 	andeq	r7, r0, r2, lsl #16
    40f8:	0000001a 	andeq	r0, r0, sl, lsl r0
    40fc:	000a2900 	andeq	r2, sl, r0, lsl #18
    4100:	50011900 	andpl	r1, r1, r0, lsl #18
    4104:	00007802 	andeq	r7, r0, r2, lsl #16
    4108:	00730800 	rsbseq	r0, r3, r0, lsl #16
    410c:	971d0000 	ldrls	r0, [sp, -r0]
    4110:	02000014 	andeq	r0, r0, #20
    4114:	00096c1c 	andeq	r6, r9, ip, lsl ip
    4118:	01580800 	cmpeq	r8, r0, lsl #16
    411c:	6c1e0000 	ldcvs	0, cr0, [lr], {-0}
    4120:	01000014 	tsteq	r0, r4, lsl r0
    4124:	00098209 	andeq	r8, r9, r9, lsl #4
    4128:	00030500 	andeq	r0, r3, r0, lsl #10
    412c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4130:	00000158 	andeq	r0, r0, r8, asr r1
    4134:	00147a1f 	andseq	r7, r4, pc, lsl sl
    4138:	a23a0200 	eorsge	r0, sl, #0, 4
    413c:	20000009 	andcs	r0, r0, r9
    4140:	000000c4 	andeq	r0, r0, r4, asr #1
    4144:	0000ca20 	andeq	ip, r0, r0, lsr #20
    4148:	00ca2000 	sbceq	r2, sl, r0
    414c:	1f000000 	svcne	0x00000000
    4150:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
    4154:	09bd3b02 	ldmibeq	sp!, {r1, r8, r9, fp, ip, sp}
    4158:	c4200000 	strtgt	r0, [r0], #-0
    415c:	20000000 	andcs	r0, r0, r0
    4160:	000000ca 	andeq	r0, r0, sl, asr #1
    4164:	0000ca20 	andeq	ip, r0, r0, lsr #20
    4168:	d51f0000 	ldrle	r0, [pc, #-0]	; 4170 <__Stack_Size+0x3970>
    416c:	02000014 	andeq	r0, r0, #20
    4170:	0009d844 	andeq	sp, r9, r4, asr #16
    4174:	00c42000 	sbceq	r2, r4, r0
    4178:	ca200000 	bgt	804180 <__Stack_Size+0x803980>
    417c:	20000000 	andcs	r0, r0, r0
    4180:	000000ca 	andeq	r0, r0, sl, asr #1
    4184:	14851f00 	strne	r1, [r5], #3840	; 0xf00
    4188:	4b020000 	blmi	84190 <__Stack_Size+0x83990>
    418c:	000009f3 	strdeq	r0, [r0], -r3
    4190:	0000c420 	andeq	ip, r0, r0, lsr #8
    4194:	00ca2000 	sbceq	r2, sl, r0
    4198:	8c200000 	stchi	0, cr0, [r0], #-0
    419c:	00000000 	andeq	r0, r0, r0
    41a0:	0014ff1f 	andseq	pc, r4, pc, lsl pc	; <UNPREDICTABLE>
    41a4:	13330200 	teqne	r3, #0, 4
    41a8:	2000000a 	andcs	r0, r0, sl
    41ac:	000000c4 	andeq	r0, r0, r4, asr #1
    41b0:	0000ca20 	andeq	ip, r0, r0, lsr #20
    41b4:	00ca2000 	sbceq	r2, sl, r0
    41b8:	81200000 	teqhi	r0, r0
    41bc:	00000000 	andeq	r0, r0, r0
    41c0:	0014ea1f 	andseq	lr, r4, pc, lsl sl
    41c4:	29510200 	ldmdbcs	r1, {r9}^
    41c8:	2000000a 	andcs	r0, r0, sl
    41cc:	000000c4 	andeq	r0, r0, r4, asr #1
    41d0:	0000ca20 	andeq	ip, r0, r0, lsr #20
    41d4:	c4210000 	strtgt	r0, [r1], #-0
    41d8:	02000014 	andeq	r0, r0, #20
    41dc:	00c42028 	sbceq	r2, r4, r8, lsr #32
    41e0:	00000000 	andeq	r0, r0, r0
    41e4:	00000eb2 			; <UNDEFINED> instruction: 0x00000eb2
    41e8:	119a0004 	orrsne	r0, sl, r4
    41ec:	01040000 	mrseq	r0, (UNDEF: 4)
    41f0:	000006c0 	andeq	r0, r0, r0, asr #13
    41f4:	00157e01 	andseq	r7, r5, r1, lsl #28
    41f8:	00089300 	andeq	r9, r8, r0, lsl #6
    41fc:	0005c000 	andeq	ip, r5, r0
    4200:	00000000 	andeq	r0, r0, r0
    4204:	00150900 	andseq	r0, r5, r0, lsl #18
    4208:	06010200 	streq	r0, [r1], -r0, lsl #4
    420c:	0000081a 	andeq	r0, r0, sl, lsl r8
    4210:	000b0d03 	andeq	r0, fp, r3, lsl #26
    4214:	371c0400 	ldrcc	r0, [ip, -r0, lsl #8]
    4218:	02000000 	andeq	r0, r0, #0
    421c:	08180801 	ldmdaeq	r8, {r0, fp}
    4220:	02020000 	andeq	r0, r2, #0
    4224:	00065e05 	andeq	r5, r6, r5, lsl #28
    4228:	07020200 	streq	r0, [r2, -r0, lsl #4]
    422c:	00000949 	andeq	r0, r0, r9, asr #18
    4230:	da050402 	ble	145240 <__Stack_Size+0x144a40>
    4234:	03000004 	movweq	r0, #4
    4238:	00000ada 	ldrdeq	r0, [r0], -sl
    423c:	005e3804 	subseq	r3, lr, r4, lsl #16
    4240:	04020000 	streq	r0, [r2], #-0
    4244:	00025207 	andeq	r5, r2, r7, lsl #4
    4248:	05080200 	streq	r0, [r8, #-512]	; 0x200
    424c:	000004d5 	ldrdeq	r0, [r0], -r5
    4250:	4d070802 	stcmi	8, cr0, [r7, #-8]
    4254:	04000002 	streq	r0, [r0], #-2
    4258:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    425c:	04020074 	streq	r0, [r2], #-116	; 0x74
    4260:	00025707 	andeq	r5, r2, r7, lsl #14
    4264:	0b0f0300 	bleq	3c4e6c <__Stack_Size+0x3c466c>
    4268:	2a050000 	bcs	144270 <__Stack_Size+0x143a70>
    426c:	0000002c 	andeq	r0, r0, ip, lsr #32
    4270:	000adc03 	andeq	sp, sl, r3, lsl #24
    4274:	53420500 	movtpl	r0, #9472	; 0x2500
    4278:	02000000 	andeq	r0, r0, #0
    427c:	078b0704 	streq	r0, [fp, r4, lsl #14]
    4280:	04050000 	streq	r0, [r5], #-0
    4284:	21080102 	tstcs	r8, r2, lsl #2
    4288:	06000008 	streq	r0, [r0], -r8
    428c:	000015f0 	strdeq	r1, [r0], -r0
    4290:	dc200380 	stcle	3, cr0, [r0], #-512	; 0xfffffe00
    4294:	07000000 	streq	r0, [r0, -r0]
    4298:	21030078 	tstcs	r3, r8, ror r0
    429c:	000000dc 	ldrdeq	r0, [r0], -ip
    42a0:	00790700 	rsbseq	r0, r9, r0, lsl #14
    42a4:	00dc2203 	sbcseq	r2, ip, r3, lsl #4
    42a8:	07200000 	streq	r0, [r0, -r0]!
    42ac:	23030074 	movwcs	r0, #12404	; 0x3074
    42b0:	000000dc 	ldrdeq	r0, [r0], -ip
    42b4:	007a0740 	rsbseq	r0, sl, r0, asr #14
    42b8:	00dc2403 	sbcseq	r2, ip, r3, lsl #8
    42bc:	00600000 	rsbeq	r0, r0, r0
    42c0:	00008108 	andeq	r8, r0, r8, lsl #2
    42c4:	0000ec00 	andeq	lr, r0, r0, lsl #24
    42c8:	00970900 	addseq	r0, r7, r0, lsl #18
    42cc:	001f0000 	andseq	r0, pc, r0
    42d0:	0014600a 	andseq	r6, r4, sl
    42d4:	03220200 	teqeq	r2, #0, 4
    42d8:	0000010b 	andeq	r0, r0, fp, lsl #2
    42dc:	0200780b 	andeq	r7, r0, #720896	; 0xb0000
    42e0:	00010b22 	andeq	r0, r1, r2, lsr #22
    42e4:	00610b00 	rsbeq	r0, r1, r0, lsl #22
    42e8:	01112202 	tsteq	r1, r2, lsl #4
    42ec:	0c000000 	stceq	0, cr0, [r0], {-0}
    42f0:	00008104 	andeq	r8, r0, r4, lsl #2
    42f4:	17040c00 	strne	r0, [r4, -r0, lsl #24]
    42f8:	0d000001 	stceq	0, cr0, [r0, #-4]
    42fc:	00000081 	andeq	r0, r0, r1, lsl #1
    4300:	0016080a 	andseq	r0, r6, sl, lsl #16
    4304:	03460300 	movteq	r0, #25344	; 0x6300
    4308:	0000013f 	andeq	r0, r0, pc, lsr r1
    430c:	7473640b 	ldrbtvc	r6, [r3], #-1035	; 0x40b
    4310:	3f460300 	svccc	0x00460300
    4314:	0b000001 	bleq	4320 <__Stack_Size+0x3b20>
    4318:	00637273 	rsbeq	r7, r3, r3, ror r2
    431c:	01454703 	cmpeq	r5, r3, lsl #14
    4320:	0c000000 	stceq	0, cr0, [r0], {-0}
    4324:	0000a704 	andeq	sl, r0, r4, lsl #14
    4328:	4b040c00 	blmi	107330 <__Stack_Size+0x106b30>
    432c:	0d000001 	stceq	0, cr0, [r0, #-4]
    4330:	000000a7 	andeq	r0, r0, r7, lsr #1
    4334:	00156e0e 	andseq	r6, r5, lr, lsl #28
    4338:	e8320100 	ldmda	r2!, {r8}
    433c:	7008001a 	andvc	r0, r8, sl, lsl r0
    4340:	01000000 	mrseq	r0, (UNDEF: 0)
    4344:	0002109c 	muleq	r2, ip, r0
    4348:	00700f00 	rsbseq	r0, r0, r0, lsl #30
    434c:	013f3201 	teqeq	pc, r1, lsl #4
    4350:	11860000 	orrne	r0, r6, r0
    4354:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
    4358:	11330100 	teqne	r3, r0, lsl #2
    435c:	bf000001 	svclt	0x00000001
    4360:	0f000011 	svceq	0x00000011
    4364:	33010079 	movwcc	r0, #4217	; 0x1079
    4368:	00000111 	andeq	r0, r0, r1, lsl r1
    436c:	000011f6 	strdeq	r1, [r0], -r6
    4370:	0000ec10 	andeq	lr, r0, r0, lsl ip
    4374:	001aec00 	andseq	lr, sl, r0, lsl #24
    4378:	00002808 	andeq	r2, r0, r8, lsl #16
    437c:	b2350100 	eorslt	r0, r5, #0, 2
    4380:	11000001 	tstne	r0, r1
    4384:	00000101 	andeq	r0, r0, r1, lsl #2
    4388:	0000122d 	andeq	r1, r0, sp, lsr #4
    438c:	0000f811 	andeq	pc, r0, r1, lsl r8	; <UNPREDICTABLE>
    4390:	00125900 	andseq	r5, r2, r0, lsl #18
    4394:	ec120000 	ldc	0, cr0, [r2], {-0}
    4398:	14000000 	strne	r0, [r0], #-0
    439c:	5808001b 	stmdapl	r8, {r0, r1, r3, r4}
    43a0:	01000005 	tsteq	r0, r5
    43a4:	0001d436 	andeq	sp, r1, r6, lsr r4
    43a8:	01011300 	mrseq	r1, SP_irq
    43ac:	f8110000 			; <UNDEFINED> instruction: 0xf8110000
    43b0:	92000000 	andls	r0, r0, #0
    43b4:	00000012 	andeq	r0, r0, r2, lsl r0
    43b8:	001b4814 	andseq	r4, fp, r4, lsl r8
    43bc:	000d9d08 	andeq	r9, sp, r8, lsl #26
    43c0:	0001ee00 	andeq	lr, r1, r0, lsl #28
    43c4:	51011500 	tstpl	r1, r0, lsl #10
    43c8:	01153101 	tsteq	r5, r1, lsl #2
    43cc:	e0740350 	rsbs	r0, r4, r0, asr r3
    43d0:	58160000 	ldmdapl	r6, {}	; <UNPREDICTABLE>
    43d4:	b308001b 	movwlt	r0, #32795	; 0x801b
    43d8:	1500000d 	strne	r0, [r0, #-13]
    43dc:	f3035201 	vhsub.u8	d5, d3, d1
    43e0:	01155201 	tsteq	r5, r1, lsl #4
    43e4:	01f30351 	mvnseq	r0, r1, asr r3
    43e8:	50011551 	andpl	r1, r1, r1, asr r5
    43ec:	5001f305 	andpl	pc, r1, r5, lsl #6
    43f0:	00004023 	andeq	r4, r0, r3, lsr #32
    43f4:	0015a80e 	andseq	sl, r5, lr, lsl #16
    43f8:	583b0100 	ldmdapl	fp!, {r8}
    43fc:	3a08001b 	bcc	204470 <__Stack_Size+0x203c70>
    4400:	01000000 	mrseq	r0, (UNDEF: 0)
    4404:	0002d99c 	muleq	r2, ip, r9
    4408:	00780f00 	rsbseq	r0, r8, r0, lsl #30
    440c:	010b3b01 	tsteq	fp, r1, lsl #22
    4410:	12d10000 	sbcsne	r0, r1, #0
    4414:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    4418:	0b3b0100 	bleq	ec4820 <__Stack_Size+0xec4020>
    441c:	ef000001 	svc	0x00000001
    4420:	0f000012 	svceq	0x00000012
    4424:	3c010070 	stccc	0, cr0, [r1], {112}	; 0x70
    4428:	00000145 	andeq	r0, r0, r5, asr #2
    442c:	0000130d 	andeq	r1, r0, sp, lsl #6
    4430:	00317a17 	eorseq	r7, r1, r7, lsl sl
    4434:	00dc3e01 	sbcseq	r3, ip, r1, lsl #28
    4438:	91020000 	mrsls	r0, (UNDEF: 2)
    443c:	1b6c1450 	blne	1b09584 <__Stack_Size+0x1b08d84>
    4440:	0dce0800 	stcleq	8, cr0, [lr]
    4444:	02740000 	rsbseq	r0, r4, #0
    4448:	01150000 	tsteq	r5, r0
    444c:	e0740351 	rsbs	r0, r4, r1, asr r3
    4450:	50011500 	andpl	r1, r1, r0, lsl #10
    4454:	00007d02 	andeq	r7, r0, r2, lsl #26
    4458:	001b7614 	andseq	r7, fp, r4, lsl r6
    445c:	000db308 	andeq	fp, sp, r8, lsl #6
    4460:	00029400 	andeq	r9, r2, r0, lsl #8
    4464:	52011500 	andpl	r1, r1, #0, 10
    4468:	15007d02 	strne	r7, [r0, #-3330]	; 0xd02
    446c:	74025101 	strvc	r5, [r2], #-257	; 0x101
    4470:	50011500 	andpl	r1, r1, r0, lsl #10
    4474:	00007602 	andeq	r7, r0, r2, lsl #12
    4478:	001b8214 	andseq	r8, fp, r4, lsl r2
    447c:	000db308 	andeq	fp, sp, r8, lsl #6
    4480:	0002b400 	andeq	fp, r2, r0, lsl #8
    4484:	52011500 	andpl	r1, r1, #0, 10
    4488:	15007d02 	strne	r7, [r0, #-3330]	; 0xd02
    448c:	74025101 	strvc	r5, [r2], #-257	; 0x101
    4490:	50011520 	andpl	r1, r1, r0, lsr #10
    4494:	00007502 	andeq	r7, r0, r2, lsl #10
    4498:	001b8814 	andseq	r8, fp, r4, lsl r8
    449c:	000de408 	andeq	lr, sp, r8, lsl #8
    44a0:	0002c800 	andeq	ip, r2, r0, lsl #16
    44a4:	50011500 	andpl	r1, r1, r0, lsl #10
    44a8:	00007602 	andeq	r7, r0, r2, lsl #12
    44ac:	001b8e18 	andseq	r8, fp, r8, lsl lr
    44b0:	000de408 	andeq	lr, sp, r8, lsl #8
    44b4:	50011500 	andpl	r1, r1, r0, lsl #10
    44b8:	00007502 	andeq	r7, r0, r2, lsl #10
    44bc:	153b0e00 	ldrne	r0, [fp, #-3584]!	; 0xe00
    44c0:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    44c4:	08001b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, ip}
    44c8:	0000005e 	andeq	r0, r0, lr, asr r0
    44cc:	039f9c01 	orrseq	r9, pc, #256	; 0x100
    44d0:	630f0000 	movwvs	r0, #61440	; 0xf000
    44d4:	0b5e0100 	bleq	17848dc <__Stack_Size+0x17840dc>
    44d8:	2b000001 	blcs	44e4 <__Stack_Size+0x3ce4>
    44dc:	0f000013 	svceq	0x00000013
    44e0:	5e010078 	mcrpl	0, 0, r0, cr1, cr8, {3}
    44e4:	00000111 	andeq	r0, r0, r1, lsl r1
    44e8:	00001349 	andeq	r1, r0, r9, asr #6
    44ec:	0100790f 	tsteq	r0, pc, lsl #18
    44f0:	0001115e 	andeq	r1, r1, lr, asr r1
    44f4:	00136700 	andseq	r6, r3, r0, lsl #14
    44f8:	6d741700 	ldclvs	7, cr1, [r4, #-0]
    44fc:	60010070 	andvs	r0, r1, r0, ror r0
    4500:	000000dc 	ldrdeq	r0, [r0], -ip
    4504:	19489102 	stmdbne	r8, {r1, r8, ip, pc}^
    4508:	00001548 	andeq	r1, r0, r8, asr #10
    450c:	00816101 	addeq	r6, r1, r1, lsl #2
    4510:	13850000 	orrne	r0, r5, #0
    4514:	ec100000 	ldc	0, cr0, [r0], {-0}
    4518:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    451c:	1608001b 			; <UNDEFINED> instruction: 0x1608001b
    4520:	01000000 	mrseq	r0, (UNDEF: 0)
    4524:	00035863 	andeq	r5, r3, r3, ror #16
    4528:	01011100 	mrseq	r1, (UNDEF: 17)
    452c:	13980000 	orrsne	r0, r8, #0
    4530:	f8110000 			; <UNDEFINED> instruction: 0xf8110000
    4534:	b6000000 	strlt	r0, [r0], -r0
    4538:	00000013 	andeq	r0, r0, r3, lsl r0
    453c:	0000ec10 	andeq	lr, r0, r0, lsl ip
    4540:	001bba00 	andseq	fp, fp, r0, lsl #20
    4544:	00002008 	andeq	r2, r0, r8
    4548:	7a670100 	bvc	19c4950 <__Stack_Size+0x19c4150>
    454c:	1a000003 	bne	4560 <__Stack_Size+0x3d60>
    4550:	00000101 	andeq	r0, r0, r1, lsl #2
    4554:	f81a5601 			; <UNDEFINED> instruction: 0xf81a5601
    4558:	01000000 	mrseq	r0, (UNDEF: 0)
    455c:	ba140055 	blt	5046b8 <__Stack_Size+0x503eb8>
    4560:	e408001b 	str	r0, [r8], #-27
    4564:	8e00000d 	cdphi	0, 0, cr0, cr0, cr13, {0}
    4568:	15000003 	strne	r0, [r0, #-3]
    456c:	7d025001 	stcvc	0, cr5, [r2, #-4]
    4570:	e4180000 	ldr	r0, [r8], #-0
    4574:	e408001b 	str	r0, [r8], #-27
    4578:	1500000d 	strne	r0, [r0, #-13]
    457c:	75025001 	strvc	r5, [r2, #-1]
    4580:	1b000000 	blne	4588 <__Stack_Size+0x3d88>
    4584:	0000155b 	andeq	r1, r0, fp, asr r5
    4588:	00816c01 	addeq	r6, r1, r1, lsl #24
    458c:	1bf40000 	blne	ffd04594 <BootRAM+0xec74d35>
    4590:	00c80800 	sbceq	r0, r8, r0, lsl #16
    4594:	9c010000 	stcls	0, cr0, [r1], {-0}
    4598:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
    459c:	0100780f 	tsteq	r0, pc, lsl #16
    45a0:	00010b6c 	andeq	r0, r1, ip, ror #22
    45a4:	0013d600 	andseq	sp, r3, r0, lsl #12
    45a8:	00790f00 	rsbseq	r0, r9, r0, lsl #30
    45ac:	010b6c01 	tsteq	fp, r1, lsl #24
    45b0:	14020000 	strne	r0, [r2], #-0
    45b4:	1f1c0000 	svcne	0x001c0000
    45b8:	01000015 	tsteq	r0, r5, lsl r0
    45bc:	0001116c 	andeq	r1, r1, ip, ror #2
    45c0:	00142300 	andseq	r2, r4, r0, lsl #6
    45c4:	15481900 	strbne	r1, [r8, #-2304]	; 0x900
    45c8:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    45cc:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
    45d0:	00001444 	andeq	r1, r0, r4, asr #8
    45d4:	01006117 	tsteq	r0, r7, lsl r1
    45d8:	0000dc6f 	andeq	sp, r0, pc, ror #24
    45dc:	88910300 	ldmhi	r1, {r8, r9}
    45e0:	0062177f 	rsbeq	r1, r2, pc, ror r7
    45e4:	00dc7001 	sbcseq	r7, ip, r1
    45e8:	91030000 	mrsls	r0, (UNDEF: 3)
    45ec:	63177fa8 	tstvs	r7, #168, 30	; 0x2a0
    45f0:	dc710100 	ldflee	f0, [r1], #-0
    45f4:	02000000 	andeq	r0, r0, #0
    45f8:	ec124891 	ldc	8, cr4, [r2], {145}	; 0x91
    45fc:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    4600:	8008001b 	andhi	r0, r8, fp, lsl r0
    4604:	01000005 	tsteq	r0, r5
    4608:	00043c74 	andeq	r3, r4, r4, ror ip
    460c:	01011100 	mrseq	r1, (UNDEF: 17)
    4610:	145e0000 	ldrbne	r0, [lr], #-0
    4614:	f8110000 			; <UNDEFINED> instruction: 0xf8110000
    4618:	7f000000 	svcvc	0x00000000
    461c:	00000014 	andeq	r0, r0, r4, lsl r0
    4620:	001c3a14 	andseq	r3, ip, r4, lsl sl
    4624:	000db308 	andeq	fp, sp, r8, lsl #6
    4628:	00045e00 	andeq	r5, r4, r0, lsl #28
    462c:	52011500 	andpl	r1, r1, #0, 10
    4630:	5101f303 	tstpl	r1, r3, lsl #6
    4634:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4638:	155101f3 	ldrbne	r0, [r1, #-499]	; 0x1f3
    463c:	91025001 	tstls	r2, r1
    4640:	44140048 	ldrmi	r0, [r4], #-72	; 0x48
    4644:	b308001c 	movwlt	r0, #32796	; 0x801c
    4648:	8200000d 	andhi	r0, r0, #13
    464c:	15000004 	strne	r0, [r0, #-4]
    4650:	03055201 	movweq	r5, #20993	; 0x5201
    4654:	08007340 	stmdaeq	r0, {r6, r8, r9, ip, sp, lr}
    4658:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    465c:	01154891 			; <UNDEFINED> instruction: 0x01154891
    4660:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    4664:	4e14007f 	mrcmi	0, 0, r0, cr4, cr15, {3}
    4668:	f508001c 			; <UNDEFINED> instruction: 0xf508001c
    466c:	a300000d 	movwge	r0, #13
    4670:	15000004 	strne	r0, [r0, #-4]
    4674:	75025201 	strvc	r5, [r2, #-513]	; 0x201
    4678:	51011500 	tstpl	r1, r0, lsl #10
    467c:	7fa89103 	svcvc	0x00a89103
    4680:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4684:	1400007d 	strne	r0, [r0], #-125	; 0x7d
    4688:	08001c56 	stmdaeq	r0, {r1, r2, r4, r6, sl, fp, ip}
    468c:	00000dce 	andeq	r0, r0, lr, asr #27
    4690:	000004be 			; <UNDEFINED> instruction: 0x000004be
    4694:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    4698:	0115007d 	tsteq	r5, sp, ror r0
    469c:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    46a0:	6014007f 	andsvs	r0, r4, pc, ror r0
    46a4:	1008001c 	andne	r0, r8, ip, lsl r0
    46a8:	de00000e 	cdple	0, 0, cr0, cr0, cr14, {0}
    46ac:	15000004 	strne	r0, [r0, #-4]
    46b0:	75025201 	strvc	r5, [r2, #-513]	; 0x201
    46b4:	51011500 	tstpl	r1, r0, lsl #10
    46b8:	15489102 	strbne	r9, [r8, #-258]	; 0x102
    46bc:	7d025001 	stcvc	0, cr5, [r2, #-4]
    46c0:	6a140000 	bvs	5046c8 <__Stack_Size+0x503ec8>
    46c4:	b308001c 	movwlt	r0, #32796	; 0x801c
    46c8:	ff00000d 			; <UNDEFINED> instruction: 0xff00000d
    46cc:	15000004 	strne	r0, [r0, #-4]
    46d0:	91035201 	tstls	r3, r1, lsl #4
    46d4:	01157fa8 	tsteq	r5, r8, lsr #31
    46d8:	007d0251 	rsbseq	r0, sp, r1, asr r2
    46dc:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    46e0:	14004891 	strne	r4, [r0], #-2193	; 0x891
    46e4:	08001c72 	stmdaeq	r0, {r1, r4, r5, r6, sl, fp, ip}
    46e8:	00000e2b 	andeq	r0, r0, fp, lsr #28
    46ec:	00000519 	andeq	r0, r0, r9, lsl r5
    46f0:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    46f4:	01154891 			; <UNDEFINED> instruction: 0x01154891
    46f8:	007d0250 	rsbseq	r0, sp, r0, asr r2
    46fc:	1c7a1400 	cfldrdne	mvd1, [sl], #-0
    4700:	0e410800 	cdpeq	8, 4, cr0, cr1, cr0, {0}
    4704:	05340000 	ldreq	r0, [r4, #-0]!
    4708:	01150000 	tsteq	r5, r0
    470c:	007d0251 	rsbseq	r0, sp, r1, asr r2
    4710:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4714:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    4718:	001c9014 	andseq	r9, ip, r4, lsl r0
    471c:	000e5708 	andeq	r5, lr, r8, lsl #14
    4720:	00055500 	andeq	r5, r5, r0, lsl #10
    4724:	52011500 	andpl	r1, r1, #0, 10
    4728:	7fa89103 	svcvc	0x00a89103
    472c:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    4730:	0115007d 	tsteq	r5, sp, ror r0
    4734:	00740250 	rsbseq	r0, r4, r0, asr r2
    4738:	1c9a1400 	cfldrsne	mvf1, [sl], {0}
    473c:	0db30800 	ldceq	8, cr0, [r3]
    4740:	05750000 	ldrbeq	r0, [r5, #-0]!
    4744:	01150000 	tsteq	r5, r0
    4748:	00740252 	rsbseq	r0, r4, r2, asr r2
    474c:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    4750:	01150074 	tsteq	r5, r4, ror r0
    4754:	007d0250 	rsbseq	r0, sp, r0, asr r2
    4758:	1ca01400 	cfstrsne	mvf1, [r0]
    475c:	0de40800 	stcleq	8, cr0, [r4]
    4760:	05890000 	streq	r0, [r9]
    4764:	01150000 	tsteq	r5, r0
    4768:	007d0250 	rsbseq	r0, sp, r0, asr r2
    476c:	1ca61400 	cfstrsne	mvf1, [r6]
    4770:	0de40800 	stcleq	8, cr0, [r4]
    4774:	059d0000 	ldreq	r0, [sp]
    4778:	01150000 	tsteq	r5, r0
    477c:	48910250 	ldmmi	r1, {r4, r6, r9}
    4780:	1cae1800 	stcne	8, cr1, [lr]
    4784:	0e770800 	cdpeq	8, 7, cr0, cr7, cr0, {0}
    4788:	01150000 	tsteq	r5, r0
    478c:	48910251 	ldmmi	r1, {r0, r4, r6, r9}
    4790:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4794:	0000007d 	andeq	r0, r0, sp, ror r0
    4798:	0000730d 	andeq	r7, r0, sp, lsl #6
    479c:	154f0e00 	strbne	r0, [pc, #-3584]	; 39a4 <__Stack_Size+0x31a4>
    47a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    47a4:	08001cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip}
    47a8:	000000e0 	andeq	r0, r0, r0, ror #1
    47ac:	08c39c01 	stmiaeq	r3, {r0, sl, fp, ip, pc}^
    47b0:	720f0000 	andvc	r0, pc, #0
    47b4:	3f9c0100 	svccc	0x009c0100
    47b8:	a0000001 	andge	r0, r0, r1
    47bc:	0f000014 	svceq	0x00000014
    47c0:	01003170 	tsteq	r0, r0, ror r1
    47c4:	0001459d 	muleq	r1, sp, r5
    47c8:	0014cc00 	andseq	ip, r4, r0, lsl #24
    47cc:	32700f00 	rsbscc	r0, r0, #0, 30
    47d0:	459d0100 	ldrmi	r0, [sp, #256]	; 0x100
    47d4:	f8000001 			; <UNDEFINED> instruction: 0xf8000001
    47d8:	17000014 	smladne	r0, r4, r0, r0
    47dc:	b3010061 	movwlt	r0, #4193	; 0x1061
    47e0:	000000dc 	ldrdeq	r0, [r0], -ip
    47e4:	7de89103 	stfvcp	f1, [r8, #12]!
    47e8:	01006217 	tsteq	r0, r7, lsl r2
    47ec:	0000dcb4 			; <UNDEFINED> instruction: 0x0000dcb4
    47f0:	88910300 	ldmhi	r1, {r8, r9}
    47f4:	0063177e 	rsbeq	r1, r3, lr, ror r7
    47f8:	00dcb501 	sbcseq	fp, ip, r1, lsl #10
    47fc:	91030000 	mrsls	r0, (UNDEF: 3)
    4800:	64177ea8 	ldrvs	r7, [r7], #-3752	; 0xea8
    4804:	dcb60100 	ldfles	f0, [r6]
    4808:	03000000 	movweq	r0, #0
    480c:	177ec891 			; <UNDEFINED> instruction: 0x177ec891
    4810:	b7010065 	strlt	r0, [r1, -r5, rrx]
    4814:	000000dc 	ldrdeq	r0, [r0], -ip
    4818:	7ee89103 	urdvce	f1, f3
    481c:	01006617 	tsteq	r0, r7, lsl r6
    4820:	0000dcb8 			; <UNDEFINED> instruction: 0x0000dcb8
    4824:	88910300 	ldmhi	r1, {r8, r9}
    4828:	0067177f 	rsbeq	r1, r7, pc, ror r7
    482c:	00dcb901 	sbcseq	fp, ip, r1, lsl #18
    4830:	91030000 	mrsls	r0, (UNDEF: 3)
    4834:	68177fa8 	ldmdavs	r7, {r3, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    4838:	dcba0100 	ldfles	f0, [sl]
    483c:	02000000 	andeq	r0, r0, #0
    4840:	da144891 	ble	516a8c <__Stack_Size+0x51628c>
    4844:	1008001c 	andne	r0, r8, ip, lsl r0
    4848:	7f00000e 	svcvc	0x0000000e
    484c:	15000006 	strne	r0, [r0, #-6]
    4850:	75025201 	strvc	r5, [r2, #-513]	; 0x201
    4854:	51011500 	tstpl	r1, r0, lsl #10
    4858:	15007802 	strne	r7, [r0, #-2050]	; 0x802
    485c:	91035001 	tstls	r3, r1
    4860:	14007ea8 	strne	r7, [r0], #-3752	; 0xea8
    4864:	08001ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp, ip}
    4868:	00000e10 	andeq	r0, r0, r0, lsl lr
    486c:	000006a0 	andeq	r0, r0, r0, lsr #13
    4870:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4874:	01150074 	tsteq	r5, r4, ror r0
    4878:	00770251 	rsbseq	r0, r7, r1, asr r2
    487c:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4880:	007ec891 			; <UNDEFINED> instruction: 0x007ec891
    4884:	001cee14 	andseq	lr, ip, r4, lsl lr
    4888:	000db308 	andeq	fp, sp, r8, lsl #6
    488c:	0006c200 	andeq	ip, r6, r0, lsl #4
    4890:	52011500 	andpl	r1, r1, #0, 10
    4894:	7ec89103 	acsvce	f1, f3
    4898:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    489c:	157ea891 	ldrbne	sl, [lr, #-2193]!	; 0x891
    48a0:	7d025001 	stcvc	0, cr5, [r2, #-4]
    48a4:	f8140000 			; <UNDEFINED> instruction: 0xf8140000
    48a8:	f508001c 			; <UNDEFINED> instruction: 0xf508001c
    48ac:	e300000d 	movw	r0, #13
    48b0:	15000006 	strne	r0, [r0, #-6]
    48b4:	75025201 	strvc	r5, [r2, #-513]	; 0x201
    48b8:	51011500 	tstpl	r1, r0, lsl #10
    48bc:	15007802 	strne	r7, [r0, #-2050]	; 0x802
    48c0:	91035001 	tstls	r3, r1
    48c4:	14007ea8 	strne	r7, [r0], #-3752	; 0xea8
    48c8:	08001d02 	stmdaeq	r0, {r1, r8, sl, fp, ip}
    48cc:	00000df5 	strdeq	r0, [r0], -r5
    48d0:	00000704 	andeq	r0, r0, r4, lsl #14
    48d4:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    48d8:	01150074 	tsteq	r5, r4, ror r0
    48dc:	00770251 	rsbseq	r0, r7, r1, asr r2
    48e0:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    48e4:	007ec891 			; <UNDEFINED> instruction: 0x007ec891
    48e8:	001d0c14 	andseq	r0, sp, r4, lsl ip
    48ec:	000db308 	andeq	fp, sp, r8, lsl #6
    48f0:	00072700 	andeq	r2, r7, r0, lsl #14
    48f4:	52011500 	andpl	r1, r1, #0, 10
    48f8:	7ec89103 	acsvce	f1, f3
    48fc:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4900:	157ea891 	ldrbne	sl, [lr, #-2193]!	; 0x891
    4904:	91035001 	tstls	r3, r1
    4908:	14007e88 	strne	r7, [r0], #-3720	; 0xe88
    490c:	08001d1a 	stmdaeq	r0, {r1, r3, r4, r8, sl, fp, ip}
    4910:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4914:	0000074a 	andeq	r0, r0, sl, asr #14
    4918:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    491c:	1500c074 	strne	ip, [r0, #-116]	; 0x74
    4920:	75035101 	strvc	r5, [r3, #-257]	; 0x101
    4924:	011500c0 	tsteq	r5, r0, asr #1
    4928:	c8910350 	ldmgt	r1, {r4, r6, r8, r9}
    492c:	2414007e 	ldrcs	r0, [r4], #-126	; 0x7e
    4930:	b308001d 	movwlt	r0, #32797	; 0x801d
    4934:	6f00000d 	svcvs	0x0000000d
    4938:	15000007 	strne	r0, [r0, #-7]
    493c:	03055201 	movweq	r5, #20993	; 0x5201
    4940:	08007220 	stmdaeq	r0, {r5, r9, ip, sp, lr}
    4944:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4948:	157ec891 	ldrbne	ip, [lr, #-2193]!	; 0x891
    494c:	91035001 	tstls	r3, r1
    4950:	14007ea8 	strne	r7, [r0], #-3752	; 0xea8
    4954:	08001d32 	stmdaeq	r0, {r1, r4, r5, r8, sl, fp, ip}
    4958:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    495c:	00000792 	muleq	r0, r2, r7
    4960:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    4964:	1500e074 	strne	lr, [r0, #-116]	; 0x74
    4968:	75035101 	strvc	r5, [r3, #-257]	; 0x101
    496c:	011500e0 	tsteq	r5, r0, ror #1
    4970:	c8910350 	ldmgt	r1, {r4, r6, r8, r9}
    4974:	3c14007e 	ldccc	0, cr0, [r4], {126}	; 0x7e
    4978:	f508001d 			; <UNDEFINED> instruction: 0xf508001d
    497c:	b500000d 	strlt	r0, [r0, #-13]
    4980:	15000007 	strne	r0, [r0, #-7]
    4984:	91035201 	tstls	r3, r1, lsl #4
    4988:	01157ec8 	tsteq	r5, r8, asr #29
    498c:	c8910351 	ldmgt	r1, {r0, r4, r6, r8, r9}
    4990:	5001157e 	andpl	r1, r1, lr, ror r5
    4994:	7ec89103 	acsvce	f1, f3
    4998:	1d461400 	cfstrdne	mvd1, [r6, #-0]
    499c:	0e100800 	cdpeq	8, 1, cr0, cr0, cr0, {0}
    49a0:	07d70000 	ldrbeq	r0, [r7, r0]
    49a4:	01150000 	tsteq	r5, r0
    49a8:	007d0252 	rsbseq	r0, sp, r2, asr r2
    49ac:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    49b0:	157e8891 	ldrbne	r8, [lr, #-2193]!	; 0x891
    49b4:	91035001 	tstls	r3, r1
    49b8:	14007ee8 	strne	r7, [r0], #-3816	; 0xee8
    49bc:	08001d50 	stmdaeq	r0, {r4, r6, r8, sl, fp, ip}
    49c0:	00000e10 	andeq	r0, r0, r0, lsl lr
    49c4:	000007fa 	strdeq	r0, [r0], -sl
    49c8:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    49cc:	157ea891 	ldrbne	sl, [lr, #-2193]!	; 0x891
    49d0:	91035101 	tstls	r3, r1, lsl #2
    49d4:	01157ec8 	tsteq	r5, r8, asr #29
    49d8:	88910350 	ldmhi	r1, {r4, r6, r8, r9}
    49dc:	5a14007f 	bpl	504be0 <__Stack_Size+0x5043e0>
    49e0:	f508001d 			; <UNDEFINED> instruction: 0xf508001d
    49e4:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
    49e8:	15000008 	strne	r0, [r0, #-8]
    49ec:	91035201 	tstls	r3, r1, lsl #4
    49f0:	01157ea8 	tsteq	r5, r8, lsr #29
    49f4:	c8910351 	ldmgt	r1, {r0, r4, r6, r8, r9}
    49f8:	5001157e 	andpl	r1, r1, lr, ror r5
    49fc:	7fa89103 	svcvc	0x00a89103
    4a00:	1d641400 	cfstrdne	mvd1, [r4, #-0]
    4a04:	0df50800 	ldcleq	8, cr0, [r5]
    4a08:	083e0000 	ldmdaeq	lr!, {}	; <UNPREDICTABLE>
    4a0c:	01150000 	tsteq	r5, r0
    4a10:	007d0252 	rsbseq	r0, sp, r2, asr r2
    4a14:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4a18:	157e8891 	ldrbne	r8, [lr, #-2193]!	; 0x891
    4a1c:	91025001 	tstls	r2, r1
    4a20:	6e140048 	cdpvs	0, 1, cr0, cr4, cr8, {2}
    4a24:	b308001d 	movwlt	r0, #32797	; 0x801d
    4a28:	6000000d 	andvs	r0, r0, sp
    4a2c:	15000008 	strne	r0, [r0, #-8]
    4a30:	91035201 	tstls	r3, r1, lsl #4
    4a34:	01157f88 	tsteq	r5, r8, lsl #31
    4a38:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    4a3c:	5001157e 	andpl	r1, r1, lr, ror r5
    4a40:	00007602 	andeq	r7, r0, r2, lsl #12
    4a44:	001d7a14 	andseq	r7, sp, r4, lsl sl
    4a48:	000db308 	andeq	fp, sp, r8, lsl #6
    4a4c:	00088100 	andeq	r8, r8, r0, lsl #2
    4a50:	52011500 	andpl	r1, r1, #0, 10
    4a54:	15489102 	strbne	r9, [r8, #-258]	; 0x102
    4a58:	91035101 	tstls	r3, r1, lsl #2
    4a5c:	01157fa8 	tsteq	r5, r8, lsr #31
    4a60:	20760250 	rsbscs	r0, r6, r0, asr r2
    4a64:	1d861400 	cfstrsne	mvf1, [r6]
    4a68:	0db30800 	ldceq	8, cr0, [r3]
    4a6c:	08a30000 	stmiaeq	r3!, {}	; <UNPREDICTABLE>
    4a70:	01150000 	tsteq	r5, r0
    4a74:	48910252 	ldmmi	r1, {r1, r4, r6, r9}
    4a78:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4a7c:	157ee891 	ldrbne	lr, [lr, #-2193]!	; 0x891
    4a80:	76035001 	strvc	r5, [r3], -r1
    4a84:	180000c0 	stmdane	r0, {r6, r7}
    4a88:	08001d92 	stmdaeq	r0, {r1, r4, r7, r8, sl, fp, ip}
    4a8c:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4a90:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    4a94:	157fa891 	ldrbne	sl, [pc, #-2193]!	; 420b <__Stack_Size+0x3a0b>
    4a98:	91035101 	tstls	r3, r1, lsl #2
    4a9c:	01157f88 	tsteq	r5, r8, lsl #31
    4aa0:	e0760350 	rsbs	r0, r6, r0, asr r3
    4aa4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4aa8:	000015e1 	andeq	r1, r0, r1, ror #11
    4aac:	1d9ce701 	ldcne	7, cr14, [ip, #4]
    4ab0:	00b40800 	adcseq	r0, r4, r0, lsl #16
    4ab4:	9c010000 	stcls	0, cr0, [r1], {-0}
    4ab8:	00000b62 	andeq	r0, r0, r2, ror #22
    4abc:	0100720f 	tsteq	r0, pc, lsl #4
    4ac0:	00013fe7 	andeq	r3, r1, r7, ror #31
    4ac4:	00152400 	andseq	r2, r5, r0, lsl #8
    4ac8:	00700f00 	rsbseq	r0, r0, r0, lsl #30
    4acc:	0145e701 	cmpeq	r5, r1, lsl #14
    4ad0:	15420000 	strbne	r0, [r2, #-0]
    4ad4:	61170000 	tstvs	r7, r0
    4ad8:	dcfa0100 	ldflee	f0, [sl]
    4adc:	03000000 	movweq	r0, #0
    4ae0:	177e9091 			; <UNDEFINED> instruction: 0x177e9091
    4ae4:	fb010062 	blx	44c76 <__Stack_Size+0x44476>
    4ae8:	000000dc 	ldrdeq	r0, [r0], -ip
    4aec:	7eb09103 	asnvcs	f1, f3
    4af0:	01006317 	tsteq	r0, r7, lsl r3
    4af4:	0000dcfc 	strdeq	sp, [r0], -ip
    4af8:	d0910300 	addsle	r0, r1, r0, lsl #6
    4afc:	0065177e 	rsbeq	r1, r5, lr, ror r7
    4b00:	00dcfd01 	sbcseq	pc, ip, r1, lsl #26
    4b04:	91030000 	mrsls	r0, (UNDEF: 3)
    4b08:	66177ef0 			; <UNDEFINED> instruction: 0x66177ef0
    4b0c:	dcfe0100 	ldflee	f0, [lr]
    4b10:	03000000 	movweq	r0, #0
    4b14:	177f9091 			; <UNDEFINED> instruction: 0x177f9091
    4b18:	ff010067 			; <UNDEFINED> instruction: 0xff010067
    4b1c:	000000dc 	ldrdeq	r0, [r0], -ip
    4b20:	7fb09103 	svcvc	0x00b09103
    4b24:	0100681d 	tsteq	r0, sp, lsl r8
    4b28:	00dc0100 	sbcseq	r0, ip, r0, lsl #2
    4b2c:	91020000 	mrsls	r0, (UNDEF: 2)
    4b30:	1db01450 	cfldrsne	mvf1, [r0, #320]!	; 0x140
    4b34:	0db30800 	ldceq	8, cr0, [r3]
    4b38:	096d0000 	stmdbeq	sp!, {}^	; <UNPREDICTABLE>
    4b3c:	01150000 	tsteq	r5, r0
    4b40:	00750252 	rsbseq	r0, r5, r2, asr r2
    4b44:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    4b48:	01150075 	tsteq	r5, r5, ror r0
    4b4c:	007d0250 	rsbseq	r0, sp, r0, asr r2
    4b50:	1dba1400 	cfldrsne	mvf1, [sl]
    4b54:	0db30800 	ldceq	8, cr0, [r3]
    4b58:	098e0000 	stmibeq	lr, {}	; <UNPREDICTABLE>
    4b5c:	01150000 	tsteq	r5, r0
    4b60:	00760252 	rsbseq	r0, r6, r2, asr r2
    4b64:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    4b68:	01150076 	tsteq	r5, r6, ror r0
    4b6c:	b0910350 	addslt	r0, r1, r0, asr r3
    4b70:	c614007e 			; <UNDEFINED> instruction: 0xc614007e
    4b74:	b308001d 	movwlt	r0, #32797	; 0x801d
    4b78:	b100000d 	tstlt	r0, sp
    4b7c:	15000009 	strne	r0, [r0, #-9]
    4b80:	75035201 	strvc	r5, [r3, #-513]	; 0x201
    4b84:	011500e0 	tsteq	r5, r0, ror #1
    4b88:	e0750351 	rsbs	r0, r5, r1, asr r3
    4b8c:	50011500 	andpl	r1, r1, r0, lsl #10
    4b90:	7ed09103 	atnvcs	f1, f3
    4b94:	1dd01400 	cfldrdne	mvd1, [r0]
    4b98:	0df50800 	ldcleq	8, cr0, [r5]
    4b9c:	09d40000 	ldmibeq	r4, {}^	; <UNPREDICTABLE>
    4ba0:	01150000 	tsteq	r5, r0
    4ba4:	d0910352 	addsle	r0, r1, r2, asr r3
    4ba8:	5101157e 	tstpl	r1, lr, ror r5
    4bac:	7ed09103 	atnvcs	f1, f3
    4bb0:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4bb4:	007ed091 			; <UNDEFINED> instruction: 0x007ed091
    4bb8:	001dda14 	andseq	sp, sp, r4, lsl sl
    4bbc:	000df508 	andeq	pc, sp, r8, lsl #10
    4bc0:	0009f500 	andeq	pc, r9, r0, lsl #10
    4bc4:	52011500 	andpl	r1, r1, #0, 10
    4bc8:	15007602 	strne	r7, [r0, #-1538]	; 0x602
    4bcc:	75025101 	strvc	r5, [r2, #-257]	; 0x101
    4bd0:	50011500 	andpl	r1, r1, r0, lsl #10
    4bd4:	7f909103 	svcvc	0x00909103
    4bd8:	1de41400 	cfstrdne	mvd1, [r4]
    4bdc:	0db30800 	ldceq	8, cr0, [r3]
    4be0:	0a180000 	beq	604be8 <__Stack_Size+0x6043e8>
    4be4:	01150000 	tsteq	r5, r0
    4be8:	90910352 	addsls	r0, r1, r2, asr r3
    4bec:	5101157f 	tstpl	r1, pc, ror r5
    4bf0:	7f909103 	svcvc	0x00909103
    4bf4:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4bf8:	007ef091 			; <UNDEFINED> instruction: 0x007ef091
    4bfc:	001dee14 	andseq	lr, sp, r4, lsl lr
    4c00:	000e1008 	andeq	r1, lr, r8
    4c04:	000a3a00 	andeq	r3, sl, r0, lsl #20
    4c08:	52011500 	andpl	r1, r1, #0, 10
    4c0c:	15007d02 	strne	r7, [r0, #-3330]	; 0xd02
    4c10:	91035101 	tstls	r3, r1, lsl #2
    4c14:	01157ef0 			; <UNDEFINED> instruction: 0x01157ef0
    4c18:	f0910350 			; <UNDEFINED> instruction: 0xf0910350
    4c1c:	f814007e 			; <UNDEFINED> instruction: 0xf814007e
    4c20:	1008001d 	andne	r0, r8, sp, lsl r0
    4c24:	5d00000e 	stcpl	0, cr0, [r0, #-56]	; 0xffffffc8
    4c28:	1500000a 	strne	r0, [r0, #-10]
    4c2c:	91035201 	tstls	r3, r1, lsl #4
    4c30:	01157eb0 			; <UNDEFINED> instruction: 0x01157eb0
    4c34:	f0910351 			; <UNDEFINED> instruction: 0xf0910351
    4c38:	5001157e 	andpl	r1, r1, lr, ror r5
    4c3c:	7ef09103 	nrmvcs	f1, f3
    4c40:	1e021400 	cfcpysne	mvf1, mvf2
    4c44:	0e100800 	cdpeq	8, 1, cr0, cr0, cr0, {0}
    4c48:	0a7f0000 	beq	1fc4c50 <__Stack_Size+0x1fc4450>
    4c4c:	01150000 	tsteq	r5, r0
    4c50:	007d0252 	rsbseq	r0, sp, r2, asr r2
    4c54:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4c58:	157eb091 	ldrbne	fp, [lr, #-145]!	; 0x91
    4c5c:	91035001 	tstls	r3, r1
    4c60:	14007fb0 	strne	r7, [r0], #-4016	; 0xfb0
    4c64:	08001e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip}
    4c68:	00000e10 	andeq	r0, r0, r0, lsl lr
    4c6c:	00000aa2 	andeq	r0, r0, r2, lsr #21
    4c70:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    4c74:	157ed091 	ldrbne	sp, [lr, #-145]!	; 0x91
    4c78:	91035101 	tstls	r3, r1, lsl #2
    4c7c:	01157fb0 			; <UNDEFINED> instruction: 0x01157fb0
    4c80:	90910350 	addsls	r0, r1, r0, asr r3
    4c84:	1414007f 	ldrne	r0, [r4], #-127	; 0x7f
    4c88:	4108001e 	tstmi	r8, lr, lsl r0
    4c8c:	bd00000e 	stclt	0, cr0, [r0, #-56]	; 0xffffffc8
    4c90:	1500000a 	strne	r0, [r0, #-10]
    4c94:	91035101 	tstls	r3, r1, lsl #2
    4c98:	01157eb0 			; <UNDEFINED> instruction: 0x01157eb0
    4c9c:	50910250 	addspl	r0, r1, r0, asr r2
    4ca0:	1e1e1400 	cfmulsne	mvf1, mvf14, mvf0
    4ca4:	0e100800 	cdpeq	8, 1, cr0, cr0, cr0, {0}
    4ca8:	0add0000 	beq	ff744cb0 <BootRAM+0xe6b5451>
    4cac:	01150000 	tsteq	r5, r0
    4cb0:	007d0252 	rsbseq	r0, sp, r2, asr r2
    4cb4:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    4cb8:	01155091 			; <UNDEFINED> instruction: 0x01155091
    4cbc:	50910250 	addspl	r0, r1, r0, asr r2
    4cc0:	1e281400 	cdpne	4, 2, cr1, cr8, cr0, {0}
    4cc4:	0db30800 	ldceq	8, cr0, [r3]
    4cc8:	0aff0000 	beq	fffc4cd0 <BootRAM+0xef35471>
    4ccc:	01150000 	tsteq	r5, r0
    4cd0:	90910352 	addsls	r0, r1, r2, asr r3
    4cd4:	5101157f 	tstpl	r1, pc, ror r5
    4cd8:	7ef09103 	nrmvcs	f1, f3
    4cdc:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4ce0:	14000074 	strne	r0, [r0], #-116	; 0x74
    4ce4:	08001e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, ip}
    4ce8:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4cec:	00000b20 	andeq	r0, r0, r0, lsr #22
    4cf0:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4cf4:	01155091 			; <UNDEFINED> instruction: 0x01155091
    4cf8:	b0910351 	addslt	r0, r1, r1, asr r3
    4cfc:	5001157f 	andpl	r1, r1, pc, ror r5
    4d00:	00207402 	eoreq	r7, r0, r2, lsl #8
    4d04:	001e4014 	andseq	r4, lr, r4, lsl r0
    4d08:	000db308 	andeq	fp, sp, r8, lsl #6
    4d0c:	000b4200 	andeq	r4, fp, r0, lsl #4
    4d10:	52011500 	andpl	r1, r1, #0, 10
    4d14:	15509102 	ldrbne	r9, [r0, #-258]	; 0x102
    4d18:	91035101 	tstls	r3, r1, lsl #2
    4d1c:	01157ef0 			; <UNDEFINED> instruction: 0x01157ef0
    4d20:	c0740350 	rsbsgt	r0, r4, r0, asr r3
    4d24:	4c180000 	ldcmi	0, cr0, [r8], {-0}
    4d28:	b308001e 	movwlt	r0, #32798	; 0x801e
    4d2c:	1500000d 	strne	r0, [r0, #-13]
    4d30:	91035201 	tstls	r3, r1, lsl #4
    4d34:	01157fb0 			; <UNDEFINED> instruction: 0x01157fb0
    4d38:	90910351 	addsls	r0, r1, r1, asr r3
    4d3c:	5001157f 	andpl	r1, r1, pc, ror r5
    4d40:	00e07403 	rsceq	r7, r0, r3, lsl #8
    4d44:	8e1e0000 	cdphi	0, 1, cr0, cr14, cr0, {0}
    4d48:	01000015 	tsteq	r0, r5, lsl r0
    4d4c:	1e50012a 	rdfnesp	f0, f0, #2.0
    4d50:	00840800 	addeq	r0, r4, r0, lsl #16
    4d54:	9c010000 	stcls	0, cr0, [r1], {-0}
    4d58:	00000d49 	andeq	r0, r0, r9, asr #26
    4d5c:	00152e1f 	andseq	r2, r5, pc, lsl lr
    4d60:	012a0100 	teqeq	sl, r0, lsl #2
    4d64:	0000013f 	andeq	r0, r0, pc, lsr r1
    4d68:	00001560 	andeq	r1, r0, r0, ror #10
    4d6c:	01007020 	tsteq	r0, r0, lsr #32
    4d70:	0145012a 	cmpeq	r5, sl, lsr #2
    4d74:	158c0000 	strne	r0, [ip]
    4d78:	65200000 	strvs	r0, [r0, #-0]!
    4d7c:	012b0100 	teqeq	fp, r0, lsl #2
    4d80:	00000111 	andeq	r0, r0, r1, lsl r1
    4d84:	000015b8 			; <UNDEFINED> instruction: 0x000015b8
    4d88:	0100721d 	tsteq	r0, sp, lsl r2
    4d8c:	00a7012d 	adceq	r0, r7, sp, lsr #2
    4d90:	91030000 	mrsls	r0, (UNDEF: 3)
    4d94:	69217de8 	stmdbvs	r1!, {r3, r5, r6, r7, r8, sl, fp, ip, sp, lr}
    4d98:	012e0100 	teqeq	lr, r0, lsl #2
    4d9c:	00000073 	andeq	r0, r0, r3, ror r0
    4da0:	000015e4 	andeq	r1, r0, r4, ror #11
    4da4:	00011c22 	andeq	r1, r1, r2, lsr #24
    4da8:	001e5c00 	andseq	r5, lr, r0, lsl #24
    4dac:	00000a08 	andeq	r0, r0, r8, lsl #20
    4db0:	01300100 	teqeq	r0, r0, lsl #2
    4db4:	00000c09 	andeq	r0, r0, r9, lsl #24
    4db8:	0001331a 	andeq	r3, r1, sl, lsl r3
    4dbc:	40030600 	andmi	r0, r3, r0, lsl #12
    4dc0:	9f080072 	svcls	0x00080072
    4dc4:	00012811 	andeq	r2, r1, r1, lsl r8
    4dc8:	00161c00 	andseq	r1, r6, r0, lsl #24
    4dcc:	1e661800 	cdpne	8, 6, cr1, cr6, cr0, {0}
    4dd0:	0e910800 	cdpeq	8, 9, cr0, cr1, cr0, {0}
    4dd4:	01150000 	tsteq	r5, r0
    4dd8:	80080252 	andhi	r0, r8, r2, asr r2
    4ddc:	05510115 	ldrbeq	r0, [r1, #-277]	; 0x115
    4de0:	00724003 	rsbseq	r4, r2, r3
    4de4:	50011508 	andpl	r1, r1, r8, lsl #10
    4de8:	00007d02 	andeq	r7, r0, r2, lsl #26
    4dec:	05a82300 	streq	r2, [r8, #768]!	; 0x300
    4df0:	0d090000 	stceq	0, cr0, [r9, #-0]
    4df4:	62210000 	eorvs	r0, r1, #0
    4df8:	01007469 	tsteq	r0, r9, ror #8
    4dfc:	01170133 	tsteq	r7, r3, lsr r1
    4e00:	164b0000 	strbne	r0, [fp], -r0
    4e04:	731d0000 	tstvc	sp, #0
    4e08:	01340100 	teqeq	r4, r0, lsl #2
    4e0c:	000000a7 	andeq	r0, r0, r7, lsr #1
    4e10:	7ee89103 	urdvce	f1, f3
    4e14:	001e7a14 	andseq	r7, lr, r4, lsl sl
    4e18:	0008c308 	andeq	ip, r8, r8, lsl #6
    4e1c:	000c4a00 	andeq	r4, ip, r0, lsl #20
    4e20:	51011500 	tstpl	r1, r0, lsl #10
    4e24:	15007d02 	strne	r7, [r0, #-3330]	; 0xd02
    4e28:	7d025001 	stcvc	0, cr5, [r2, #-4]
    4e2c:	88140000 	ldmdahi	r4, {}	; <UNPREDICTABLE>
    4e30:	b908001e 	stmdblt	r8, {r1, r2, r3, r4}
    4e34:	6b000005 	blvs	4e50 <__Stack_Size+0x4650>
    4e38:	1500000c 	strne	r0, [r0, #-12]
    4e3c:	77025201 	strvc	r5, [r2, -r1, lsl #4]
    4e40:	51011500 	tstpl	r1, r0, lsl #10
    4e44:	15007d02 	strne	r7, [r0, #-3330]	; 0xd02
    4e48:	91035001 	tstls	r3, r1
    4e4c:	14007ee8 	strne	r7, [r0], #-3816	; 0xee8
    4e50:	08001e94 	stmdaeq	r0, {r2, r4, r7, r9, sl, fp, ip}
    4e54:	00000e57 	andeq	r0, r0, r7, asr lr
    4e58:	00000c92 	muleq	r0, r2, ip
    4e5c:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    4e60:	01150075 	tsteq	r5, r5, ror r0
    4e64:	e8910352 	ldm	r1, {r1, r4, r6, r8, r9}
    4e68:	5101157e 	tstpl	r1, lr, ror r5
    4e6c:	15007d02 	strne	r7, [r0, #-3330]	; 0xd02
    4e70:	7d025001 	stcvc	0, cr5, [r2, #-4]
    4e74:	a0140000 	andsge	r0, r4, r0
    4e78:	5708001e 	smladpl	r8, lr, r0, r0
    4e7c:	bb00000e 	bllt	4ebc <__Stack_Size+0x46bc>
    4e80:	1500000c 	strne	r0, [r0, #-12]
    4e84:	75025301 	strvc	r5, [r2, #-769]	; 0x301
    4e88:	52011500 	andpl	r1, r1, #0, 10
    4e8c:	7f889103 	svcvc	0x00889103
    4e90:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4e94:	157e8891 	ldrbne	r8, [lr, #-2193]!	; 0x891
    4e98:	91035001 	tstls	r3, r1
    4e9c:	14007e88 	strne	r7, [r0], #-3720	; 0xe88
    4ea0:	08001eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, ip}
    4ea4:	00000e57 	andeq	r0, r0, r7, asr lr
    4ea8:	00000ce3 	andeq	r0, r0, r3, ror #25
    4eac:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    4eb0:	01150075 	tsteq	r5, r5, ror r0
    4eb4:	48910252 	ldmmi	r1, {r1, r4, r6, r9}
    4eb8:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4ebc:	157ec891 	ldrbne	ip, [lr, #-2193]!	; 0x891
    4ec0:	91035001 	tstls	r3, r1
    4ec4:	18007ec8 	stmdane	r0, {r3, r6, r7, r9, sl, fp, ip, sp, lr}
    4ec8:	08001eba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, fp, ip}
    4ecc:	00000e57 	andeq	r0, r0, r7, asr lr
    4ed0:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    4ed4:	01150075 	tsteq	r5, r5, ror r0
    4ed8:	a8910352 	ldmge	r1, {r1, r4, r6, r8, r9}
    4edc:	5101157f 	tstpl	r1, pc, ror r5
    4ee0:	7ea89103 	tanvce	f1, f3
    4ee4:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4ee8:	007ea891 			; <UNDEFINED> instruction: 0x007ea891
    4eec:	011c2400 	tsteq	ip, r0, lsl #8
    4ef0:	1ebe0000 	cdpne	0, 11, cr0, cr14, cr0, {0}
    4ef4:	000a0800 	andeq	r0, sl, r0, lsl #16
    4ef8:	3f010000 	svccc	0x00010000
    4efc:	01331101 	teqeq	r3, r1, lsl #2
    4f00:	165e0000 	ldrbne	r0, [lr], -r0
    4f04:	28110000 	ldmdacs	r1, {}	; <UNPREDICTABLE>
    4f08:	8d000001 	stchi	0, cr0, [r0, #-4]
    4f0c:	18000016 	stmdane	r0, {r1, r2, r4}
    4f10:	08001ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, ip}
    4f14:	00000e91 	muleq	r0, r1, lr
    4f18:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4f1c:	01158008 	tsteq	r5, r8
    4f20:	007d0251 	rsbseq	r0, sp, r1, asr r2
    4f24:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4f28:	00000078 	andeq	r0, r0, r8, ror r0
    4f2c:	16152500 	ldrne	r2, [r5], -r0, lsl #10
    4f30:	57010000 	strpl	r0, [r1, -r0]
    4f34:	00000d5a 	andeq	r0, r0, sl, asr sp
    4f38:	73400305 	movtvc	r0, #773	; 0x305
    4f3c:	dc0d0800 	stcle	8, cr0, [sp], {-0}
    4f40:	25000000 	strcs	r0, [r0, #-0]
    4f44:	0000161f 	andeq	r1, r0, pc, lsl r6
    4f48:	0d5a9501 	cfldr64eq	mvdx9, [sl, #-4]
    4f4c:	03050000 	movweq	r0, #20480	; 0x5000
    4f50:	08007220 	stmdaeq	r0, {r5, r9, ip, sp, lr}
    4f54:	00149726 	andseq	r9, r4, r6, lsr #14
    4f58:	5a1c0200 	bpl	705760 <__Stack_Size+0x704f60>
    4f5c:	2700000d 	strcs	r0, [r0, -sp]
    4f60:	000015fb 	strdeq	r1, [r0], -fp
    4f64:	014b1401 	cmpeq	fp, r1, lsl #8
    4f68:	03050000 	movweq	r0, #20480	; 0x5000
    4f6c:	080072c0 	stmdaeq	r0, {r6, r7, r9, ip, sp, lr}
    4f70:	0015ba27 	andseq	fp, r5, r7, lsr #20
    4f74:	4b2a0100 	blmi	a8537c <__Stack_Size+0xa84b7c>
    4f78:	05000001 	streq	r0, [r0, #-1]
    4f7c:	00724003 	rsbseq	r4, r2, r3
    4f80:	159c2808 	ldrne	r2, [ip, #2056]	; 0x808
    4f84:	1f020000 	svcne	0x00020000
    4f88:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4f8c:	00010b29 	andeq	r0, r1, r9, lsr #22
    4f90:	008c2900 	addeq	r2, ip, r0, lsl #18
    4f94:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    4f98:	000014d5 	ldrdeq	r1, [r0], -r5
    4f9c:	0dce4402 	cfstrdeq	mvd4, [lr, #8]
    4fa0:	0b290000 	bleq	a44fa8 <__Stack_Size+0xa447a8>
    4fa4:	29000001 	stmdbcs	r0, {r0}
    4fa8:	00000111 	andeq	r0, r0, r1, lsl r1
    4fac:	00011129 	andeq	r1, r1, r9, lsr #2
    4fb0:	ea280000 	b	a04fb8 <__Stack_Size+0xa047b8>
    4fb4:	02000014 	andeq	r0, r0, #20
    4fb8:	000de451 	andeq	lr, sp, r1, asr r4
    4fbc:	010b2900 	tsteq	fp, r0, lsl #18
    4fc0:	11290000 	teqne	r9, r0
    4fc4:	00000001 	andeq	r0, r0, r1
    4fc8:	0014c428 	andseq	ip, r4, r8, lsr #8
    4fcc:	f5280200 			; <UNDEFINED> instruction: 0xf5280200
    4fd0:	2900000d 	stmdbcs	r0, {r0, r2, r3}
    4fd4:	0000010b 	andeq	r0, r0, fp, lsl #2
    4fd8:	147a2800 	ldrbtne	r2, [sl], #-2048	; 0x800
    4fdc:	3a020000 	bcc	84fe4 <__Stack_Size+0x847e4>
    4fe0:	00000e10 	andeq	r0, r0, r0, lsl lr
    4fe4:	00010b29 	andeq	r0, r1, r9, lsr #22
    4fe8:	01112900 	tsteq	r1, r0, lsl #18
    4fec:	11290000 	teqne	r9, r0
    4ff0:	00000001 	andeq	r0, r0, r1
    4ff4:	0014b428 	andseq	fp, r4, r8, lsr #8
    4ff8:	2b3b0200 	blcs	ec5800 <__Stack_Size+0xec5000>
    4ffc:	2900000e 	stmdbcs	r0, {r1, r2, r3}
    5000:	0000010b 	andeq	r0, r0, fp, lsl #2
    5004:	00011129 	andeq	r1, r1, r9, lsr #2
    5008:	01112900 	tsteq	r1, r0, lsl #18
    500c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5010:	000015ca 	andeq	r1, r0, sl, asr #11
    5014:	0e415a02 	vmlaeq.f32	s11, s2, s4
    5018:	0b290000 	bleq	a45020 <__Stack_Size+0xa44820>
    501c:	29000001 	stmdbcs	r0, {r0}
    5020:	00000111 	andeq	r0, r0, r1, lsl r1
    5024:	15d62800 	ldrbne	r2, [r6, #2048]	; 0x800
    5028:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    502c:	00000e57 	andeq	r0, r0, r7, asr lr
    5030:	00010b29 	andeq	r0, r1, r9, lsr #22
    5034:	01112900 	tsteq	r1, r0, lsl #18
    5038:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    503c:	000014ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    5040:	0e773302 	cdpeq	3, 7, cr3, cr7, cr2, {0}
    5044:	0b290000 	bleq	a4504c <__Stack_Size+0xa4484c>
    5048:	29000001 	stmdbcs	r0, {r0}
    504c:	00000111 	andeq	r0, r0, r1, lsl r1
    5050:	00011129 	andeq	r1, r1, r9, lsr #2
    5054:	00812900 	addeq	r2, r1, r0, lsl #18
    5058:	2a000000 	bcs	5060 <__Stack_Size+0x4860>
    505c:	00001524 	andeq	r1, r0, r4, lsr #10
    5060:	00812d02 	addeq	r2, r1, r2, lsl #26
    5064:	0e910000 	cdpeq	0, 9, cr0, cr1, cr0, {0}
    5068:	11290000 	teqne	r9, r0
    506c:	29000001 	stmdbcs	r0, {r0}
    5070:	00000111 	andeq	r0, r0, r1, lsl r1
    5074:	15342b00 	ldrne	r2, [r4, #-2816]!	; 0xb00
    5078:	009e0000 	addseq	r0, lr, r0
    507c:	0eae0000 	cdpeq	0, 10, cr0, cr14, cr0, {0}
    5080:	9e290000 	cdpls	0, 2, cr0, cr9, cr0, {0}
    5084:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    5088:	00000eae 	andeq	r0, r0, lr, lsr #29
    508c:	00009729 	andeq	r9, r0, r9, lsr #14
    5090:	040c0000 	streq	r0, [ip], #-0
    5094:	00000eb4 			; <UNDEFINED> instruction: 0x00000eb4
    5098:	0b58002c 	bleq	1605150 <__Stack_Size+0x1604950>
    509c:	00040000 	andeq	r0, r4, r0
    50a0:	0000140c 	andeq	r1, r0, ip, lsl #8
    50a4:	06c00104 	strbeq	r0, [r0], r4, lsl #2
    50a8:	41010000 	mrsmi	r0, (UNDEF: 1)
    50ac:	93000016 	movwls	r0, #22
    50b0:	18000008 	stmdane	r0, {r3}
    50b4:	00000007 	andeq	r0, r0, r7
    50b8:	ab000000 	blge	50c0 <__Stack_Size+0x48c0>
    50bc:	02000017 	andeq	r0, r0, #23
    50c0:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    50c4:	0d030000 	stceq	0, cr0, [r3, #-0]
    50c8:	0400000b 	streq	r0, [r0], #-11
    50cc:	0000371c 	andeq	r3, r0, ip, lsl r7
    50d0:	08010200 	stmdaeq	r1, {r9}
    50d4:	00000818 	andeq	r0, r0, r8, lsl r8
    50d8:	5e050202 	cdppl	2, 0, cr0, cr5, cr2, {0}
    50dc:	02000006 	andeq	r0, r0, #6
    50e0:	09490702 	stmdbeq	r9, {r1, r8, r9, sl}^
    50e4:	04020000 	streq	r0, [r2], #-0
    50e8:	0004da05 	andeq	sp, r4, r5, lsl #20
    50ec:	07040200 	streq	r0, [r4, -r0, lsl #4]
    50f0:	00000252 	andeq	r0, r0, r2, asr r2
    50f4:	d5050802 	strle	r0, [r5, #-2050]	; 0x802
    50f8:	03000004 	movweq	r0, #4
    50fc:	000016b3 			; <UNDEFINED> instruction: 0x000016b3
    5100:	006c4e04 	rsbeq	r4, ip, r4, lsl #28
    5104:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5108:	00024d07 	andeq	r4, r2, r7, lsl #26
    510c:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    5110:	00746e69 	rsbseq	r6, r4, r9, ror #28
    5114:	57070402 	strpl	r0, [r7, -r2, lsl #8]
    5118:	03000002 	movweq	r0, #2
    511c:	00000b0f 	andeq	r0, r0, pc, lsl #22
    5120:	002c2a05 	eoreq	r2, ip, r5, lsl #20
    5124:	b5030000 	strlt	r0, [r3, #-0]
    5128:	05000016 	streq	r0, [r0, #-22]
    512c:	0000614e 	andeq	r6, r0, lr, asr #2
    5130:	0ad30300 	beq	ff4c5d38 <BootRAM+0xe4364d9>
    5134:	d4060000 	strle	r0, [r6], #-0
    5138:	0000007a 	andeq	r0, r0, sl, ror r0
    513c:	8b070402 	blhi	1c614c <__Stack_Size+0x1c594c>
    5140:	05000007 	streq	r0, [r0, #-7]
    5144:	08010204 	stmdaeq	r1, {r2, r9}
    5148:	00000821 	andeq	r0, r0, r1, lsr #16
    514c:	0015f006 	andseq	pc, r5, r6
    5150:	20038000 	andcs	r8, r3, r0
    5154:	000000e7 	andeq	r0, r0, r7, ror #1
    5158:	03007807 	movweq	r7, #2055	; 0x807
    515c:	0000e721 	andeq	lr, r0, r1, lsr #14
    5160:	79070000 	stmdbvc	r7, {}	; <UNPREDICTABLE>
    5164:	e7220300 	str	r0, [r2, -r0, lsl #6]!
    5168:	20000000 	andcs	r0, r0, r0
    516c:	03007407 	movweq	r7, #1031	; 0x407
    5170:	0000e723 	andeq	lr, r0, r3, lsr #14
    5174:	7a074000 	bvc	1d517c <__Stack_Size+0x1d497c>
    5178:	e7240300 	str	r0, [r4, -r0, lsl #6]!
    517c:	60000000 	andvs	r0, r0, r0
    5180:	00810800 	addeq	r0, r1, r0, lsl #16
    5184:	00f70000 	rscseq	r0, r7, r0
    5188:	a2090000 	andge	r0, r9, #0
    518c:	1f000000 	svcne	0x00000000
    5190:	17220600 	strne	r0, [r2, -r0, lsl #12]!
    5194:	02400000 	subeq	r0, r0, #0
    5198:	00010e14 	andeq	r0, r1, r4, lsl lr
    519c:	00680700 	rsbeq	r0, r8, r0, lsl #14
    51a0:	010e1502 	tsteq	lr, r2, lsl #10
    51a4:	00000000 	andeq	r0, r0, r0
    51a8:	00008c08 	andeq	r8, r0, r8, lsl #24
    51ac:	00011e00 	andeq	r1, r1, r0, lsl #28
    51b0:	00a20900 	adceq	r0, r2, r0, lsl #18
    51b4:	00070000 	andeq	r0, r7, r0
    51b8:	00173d0a 	andseq	r3, r7, sl, lsl #26
    51bc:	031c0200 	tsteq	ip, #0, 4
    51c0:	00000134 	andeq	r0, r0, r4, lsr r1
    51c4:	0200730b 	andeq	r7, r0, #738197504	; 0x2c000000
    51c8:	0001341c 	andeq	r3, r1, ip, lsl r4
    51cc:	040c0000 	streq	r0, [ip], #-0
    51d0:	000000f7 	strdeq	r0, [r0], -r7
    51d4:	0016500a 	andseq	r5, r6, sl
    51d8:	033e0300 	teqeq	lr, #0, 6
    51dc:	00000150 	andeq	r0, r0, r0, asr r1
    51e0:	0300650b 	movweq	r6, #1291	; 0x50b
    51e4:	0001503e 	andeq	r5, r1, lr, lsr r0
    51e8:	040c0000 	streq	r0, [ip], #-0
    51ec:	00000081 	andeq	r0, r0, r1, lsl #1
    51f0:	0016f70a 	andseq	pc, r6, sl, lsl #14
    51f4:	01420100 	mrseq	r0, (UNDEF: 82)
    51f8:	000001ae 	andeq	r0, r0, lr, lsr #3
    51fc:	0016950d 	andseq	r9, r6, sp, lsl #10
    5200:	50420100 	subpl	r0, r2, r0, lsl #2
    5204:	0d000001 	stceq	0, cr0, [r0, #-4]
    5208:	00001636 	andeq	r1, r0, r6, lsr r6
    520c:	01504301 	cmpeq	r0, r1, lsl #6
    5210:	be0d0000 	cdplt	0, 0, cr0, cr13, cr0, {0}
    5214:	01000016 	tsteq	r0, r6, lsl r0
    5218:	00007343 	andeq	r7, r0, r3, asr #6
    521c:	16ef0d00 	strbtne	r0, [pc], r0, lsl #26
    5220:	44010000 	strmi	r0, [r1], #-0
    5224:	000001ae 	andeq	r0, r0, lr, lsr #3
    5228:	6e656c0b 	cdpvs	12, 6, cr6, cr5, cr11, {0}
    522c:	97440100 	strbls	r0, [r4, -r0, lsl #2]
    5230:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5234:	46010073 			; <UNDEFINED> instruction: 0x46010073
    5238:	000000f7 	strdeq	r0, [r0], -r7
    523c:	00690e0f 	rsbeq	r0, r9, pc, lsl #28
    5240:	00974e01 	addseq	r4, r7, r1, lsl #28
    5244:	00000000 	andeq	r0, r0, r0
    5248:	01b4040c 			; <UNDEFINED> instruction: 0x01b4040c
    524c:	81100000 	tsthi	r0, r0
    5250:	0a000000 	beq	5258 <__Stack_Size+0x4a58>
    5254:	0000168a 	andeq	r1, r0, sl, lsl #13
    5258:	e5011501 	str	r1, [r1, #-1281]	; 0x501
    525c:	0d000001 	stceq	0, cr0, [r0, #-4]
    5260:	000016a3 	andeq	r1, r0, r3, lsr #13
    5264:	01501501 	cmpeq	r0, r1, lsl #10
    5268:	9c0d0000 	stcls	0, cr0, [sp], {-0}
    526c:	01000016 	tsteq	r0, r6, lsl r0
    5270:	0001ae15 	andeq	sl, r1, r5, lsl lr
    5274:	00730e00 	rsbseq	r0, r3, r0, lsl #28
    5278:	00f71701 	rscseq	r1, r7, r1, lsl #14
    527c:	0a000000 	beq	5284 <__Stack_Size+0x4a84>
    5280:	0000171a 	andeq	r1, r0, sl, lsl r7
    5284:	0d013201 	sfmeq	f3, 4, [r1, #-4]
    5288:	0b000002 	bleq	5298 <__Stack_Size+0x4a98>
    528c:	32010072 	andcc	r0, r1, #114	; 0x72
    5290:	00000150 	andeq	r0, r0, r0, asr r1
    5294:	01006b0b 	tsteq	r0, fp, lsl #22
    5298:	0001ae32 	andeq	sl, r1, r2, lsr lr
    529c:	00700e00 	rsbseq	r0, r0, r0, lsl #28
    52a0:	00b23401 	adcseq	r3, r2, r1, lsl #8
    52a4:	11000000 	mrsne	r0, (UNDEF: 0)
    52a8:	01007070 	tsteq	r0, r0, ror r0
    52ac:	023f0129 	eorseq	r0, pc, #1073741834	; 0x4000000a
    52b0:	ac0d0000 	stcge	0, cr0, [sp], {-0}
    52b4:	01000016 	tsteq	r0, r6, lsl r0
    52b8:	00015029 	andeq	r5, r1, r9, lsr #32
    52bc:	00700b00 	rsbseq	r0, r0, r0, lsl #22
    52c0:	023f2901 	eorseq	r2, pc, #16384	; 0x4000
    52c4:	780e0000 	stmdavc	lr, {}	; <UNPREDICTABLE>
    52c8:	e72b0100 	str	r0, [fp, -r0, lsl #2]!
    52cc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    52d0:	2c010079 	stccs	0, cr0, [r1], {121}	; 0x79
    52d4:	000000e7 	andeq	r0, r0, r7, ror #1
    52d8:	45040c00 	strmi	r0, [r4, #-3072]	; 0xc00
    52dc:	10000002 	andne	r0, r0, r2
    52e0:	000000b2 	strheq	r0, [r0], -r2
    52e4:	00170812 	andseq	r0, r7, r2, lsl r8
    52e8:	003a0100 	eorseq	r0, sl, r0, lsl #2
    52ec:	7c000000 	stcvc	0, cr0, [r0], {-0}
    52f0:	01000000 	mrseq	r0, (UNDEF: 0)
    52f4:	0004089c 	muleq	r4, ip, r8
    52f8:	75701300 	ldrbvc	r1, [r0, #-768]!	; 0x300
    52fc:	3a010062 	bcc	4548c <__Stack_Size+0x44c8c>
    5300:	00000150 	andeq	r0, r0, r0, asr r1
    5304:	000016ae 	andeq	r1, r0, lr, lsr #13
    5308:	00169c14 	andseq	r9, r6, r4, lsl ip
    530c:	ae3a0100 	rsfgee	f0, f2, f0
    5310:	da000001 	ble	531c <__Stack_Size+0x4b1c>
    5314:	15000016 	strne	r0, [r0, #-22]
    5318:	000016a3 	andeq	r1, r0, r3, lsr #13
    531c:	04083c01 	streq	r3, [r8], #-3073	; 0xc01
    5320:	91030000 	mrsls	r0, (UNDEF: 3)
    5324:	b9167ea8 	ldmdblt	r6, {r3, r5, r7, r9, sl, fp, ip, sp, lr}
    5328:	00000001 	andeq	r0, r0, r1
    532c:	00000000 	andeq	r0, r0, r0
    5330:	01000006 	tsteq	r0, r6
    5334:	00033d3e 	andeq	r3, r3, lr, lsr sp
    5338:	01d01700 	bicseq	r1, r0, r0, lsl #14
    533c:	17060000 	strne	r0, [r6, -r0]
    5340:	c5170000 	ldrgt	r0, [r7, #-0]
    5344:	32000001 	andcc	r0, r0, #1
    5348:	18000017 	stmdane	r0, {r0, r1, r2, r4}
    534c:	00000600 	andeq	r0, r0, r0, lsl #12
    5350:	0001db19 	andeq	sp, r1, r9, lsl fp
    5354:	e8910300 	ldm	r1, {r8, r9}
    5358:	011e167e 	tsteq	lr, lr, ror r6
    535c:	00000000 	andeq	r0, r0, r0
    5360:	06300000 	ldrteq	r0, [r0], -r0
    5364:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    5368:	000002dc 	ldrdeq	r0, [r0], -ip
    536c:	00012a17 	andeq	r2, r1, r7, lsl sl
    5370:	00178800 	andseq	r8, r7, r0, lsl #16
    5374:	3a160000 	bcc	58537c <__Stack_Size+0x584b7c>
    5378:	00000001 	andeq	r0, r0, r1
    537c:	50000000 	andpl	r0, r0, r0
    5380:	01000006 	tsteq	r0, r6
    5384:	0002f91c 	andeq	pc, r2, ip, lsl r9	; <UNPREDICTABLE>
    5388:	01461700 	cmpeq	r6, r0, lsl #14
    538c:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
    5390:	1a000000 	bne	5398 <__Stack_Size+0x4b98>
    5394:	00000000 	andeq	r0, r0, r0
    5398:	00000a04 	andeq	r0, r0, r4, lsl #20
    539c:	00000319 	andeq	r0, r0, r9, lsl r3
    53a0:	0252011b 	subseq	r0, r2, #-1073741818	; 0xc0000006
    53a4:	011b2008 	tsteq	fp, r8
    53a8:	00770251 	rsbseq	r0, r7, r1, asr r2
    53ac:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    53b0:	1c005074 	stcne	0, cr5, [r0], {116}	; 0x74
    53b4:	00000000 	andeq	r0, r0, r0
    53b8:	00000a1f 	andeq	r0, r0, pc, lsl sl
    53bc:	0253011b 	subseq	r0, r3, #-1073741818	; 0xc0000006
    53c0:	011b4008 	tsteq	fp, r8
    53c4:	1b300152 	blne	c05914 <__Stack_Size+0xc05114>
    53c8:	91035101 	tstls	r3, r1, lsl #2
    53cc:	011b7ea8 	tsteq	fp, r8, lsr #29
    53d0:	50740250 	rsbspl	r0, r4, r0, asr r2
    53d4:	1d000000 	stcne	0, cr0, [r0, #-0]
    53d8:	000001e5 	andeq	r0, r0, r5, ror #3
    53dc:	00000000 	andeq	r0, r0, r0
    53e0:	00000670 	andeq	r0, r0, r0, ror r6
    53e4:	fa173f01 	blx	5d4ff0 <__Stack_Size+0x5d47f0>
    53e8:	7d000001 	stcvc	0, cr0, [r0, #-4]
    53ec:	17000018 	smladne	r0, r8, r0, r0
    53f0:	000001f1 	strdeq	r0, [r0], -r1
    53f4:	000018ac 	andeq	r1, r0, ip, lsr #17
    53f8:	00067018 	andeq	r7, r6, r8, lsl r0
    53fc:	02031900 	andeq	r1, r3, #0, 18
    5400:	91030000 	mrsls	r0, (UNDEF: 3)
    5404:	0d1e7ee8 	ldceq	14, cr7, [lr, #-928]	; 0xfffffc60
    5408:	00000002 	andeq	r0, r0, r2
    540c:	14000000 	strne	r0, [r0], #-0
    5410:	01000000 	mrseq	r0, (UNDEF: 0)
    5414:	0003ed37 	andeq	lr, r3, r7, lsr sp
    5418:	02231700 	eoreq	r1, r3, #0, 14
    541c:	18cd0000 	stmiane	sp, {}^	; <UNPREDICTABLE>
    5420:	18170000 	ldmdane	r7, {}	; <UNPREDICTABLE>
    5424:	0a000002 	beq	5434 <__Stack_Size+0x4c34>
    5428:	1f000019 	svcne	0x00000019
    542c:	00000000 	andeq	r0, r0, r0
    5430:	00000014 	andeq	r0, r0, r4, lsl r0
    5434:	00022c19 	andeq	r2, r2, r9, lsl ip
    5438:	e8910300 	ldm	r1, {r8, r9}
    543c:	0235197d 	eorseq	r1, r5, #2048000	; 0x1f4000
    5440:	91030000 	mrsls	r0, (UNDEF: 3)
    5444:	001a7e88 	andseq	r7, sl, r8, lsl #29
    5448:	45000000 	strmi	r0, [r0, #-0]
    544c:	ce00000a 	cdpgt	0, 0, cr0, cr0, cr10, {0}
    5450:	1b000003 	blne	5464 <__Stack_Size+0x4c64>
    5454:	91035201 	tstls	r3, r1, lsl #4
    5458:	011b7ee8 	tsteq	fp, r8, ror #29
    545c:	88910351 	ldmhi	r1, {r0, r4, r6, r8, r9}
    5460:	50011b7e 	andpl	r1, r1, lr, ror fp
    5464:	00007d02 	andeq	r7, r0, r2, lsl #26
    5468:	0000001c 	andeq	r0, r0, ip, lsl r0
    546c:	000a6000 	andeq	r6, sl, r0
    5470:	52011b00 	andpl	r1, r1, #0, 22
    5474:	7e889103 	sinvce	f1, f3
    5478:	0251011b 	subseq	r0, r1, #-1073741818	; 0xc0000006
    547c:	011b007d 	tsteq	fp, sp, ror r0
    5480:	00760250 	rsbseq	r0, r6, r0, asr r2
    5484:	1c000000 	stcne	0, cr0, [r0], {-0}
    5488:	00000000 	andeq	r0, r0, r0
    548c:	00000a7b 	andeq	r0, r0, fp, ror sl
    5490:	0352011b 	cmpeq	r2, #-1073741818	; 0xc0000006
    5494:	1b7ea891 	blne	1faf6e0 <__Stack_Size+0x1faeee0>
    5498:	91035001 	tstls	r3, r1
    549c:	00007ee8 	andeq	r7, r0, r8, ror #29
    54a0:	81080000 	mrshi	r0, (UNDEF: 8)
    54a4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    54a8:	09000004 	stmdbeq	r0, {r2}
    54ac:	000000a2 	andeq	r0, r0, r2, lsr #1
    54b0:	ea0a003f 	b	2855b4 <__Stack_Size+0x284db4>
    54b4:	01000016 	tsteq	r0, r6, lsl r0
    54b8:	045f0169 	ldrbeq	r0, [pc], #-361	; 54c0 <__Stack_Size+0x4cc0>
    54bc:	7a0b0000 	bvc	2c54c4 <__Stack_Size+0x2c4cc4>
    54c0:	50690100 	rsbpl	r0, r9, r0, lsl #2
    54c4:	0b000001 	bleq	54d0 <__Stack_Size+0x4cd0>
    54c8:	69010072 	stmdbvs	r1, {r1, r4, r5, r6}
    54cc:	000001ae 	andeq	r0, r0, lr, lsr #3
    54d0:	0100610b 	tsteq	r0, fp, lsl #2
    54d4:	0001ae69 	andeq	sl, r1, r9, ror #28
    54d8:	006d0b00 	rsbeq	r0, sp, r0, lsl #22
    54dc:	01ae6a01 			; <UNDEFINED> instruction: 0x01ae6a01
    54e0:	6c0b0000 	stcvs	0, cr0, [fp], {-0}
    54e4:	01006e65 	tsteq	r0, r5, ror #28
    54e8:	0000976a 	andeq	r9, r0, sl, ror #14
    54ec:	17502000 	ldrbne	r2, [r0, -r0]
    54f0:	6c010000 	stcvs	0, cr0, [r1], {-0}
    54f4:	0000045f 	andeq	r0, r0, pc, asr r4
    54f8:	00810800 	addeq	r0, r1, r0, lsl #16
    54fc:	046f0000 	strbteq	r0, [pc], #-0	; 5504 <__Stack_Size+0x4d04>
    5500:	a2090000 	andge	r0, r9, #0
    5504:	7f000000 	svcvc	0x00000000
    5508:	70752100 	rsbsvc	r2, r5, r0, lsl #2
    550c:	1f010070 	svcne	0x00010070
    5510:	00000081 	andeq	r0, r0, r1, lsl #1
    5514:	0004b001 	andeq	fp, r4, r1
    5518:	00700b00 	rsbseq	r0, r0, r0, lsl #22
    551c:	04b01f01 	ldrteq	r1, [r0], #3841	; 0xf01
    5520:	ac0d0000 	stcge	0, cr0, [sp], {-0}
    5524:	01000016 	tsteq	r0, r6, lsl r0
    5528:	0001ae1f 	andeq	sl, r1, pc, lsl lr
    552c:	00780e00 	rsbseq	r0, r8, r0, lsl #28
    5530:	00e72101 	rsceq	r2, r7, r1, lsl #2
    5534:	790e0000 	stmdbvc	lr, {}	; <UNPREDICTABLE>
    5538:	e7220100 	str	r0, [r2, -r0, lsl #2]!
    553c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5540:	01006b6f 	tsteq	r0, pc, ror #22
    5544:	00008123 	andeq	r8, r0, r3, lsr #2
    5548:	040c0000 	streq	r0, [ip], #-0
    554c:	000000b2 	strheq	r0, [r0], -r2
    5550:	00172f22 	andseq	r2, r7, r2, lsr #30
    5554:	818c0100 	orrhi	r0, ip, r0, lsl #2
    5558:	d4000000 	strle	r0, [r0], #-0
    555c:	7c08001e 	stcvc	0, cr0, [r8], {30}
    5560:	01000001 	tsteq	r0, r1
    5564:	0009d39c 	muleq	r9, ip, r3
    5568:	16801400 	strne	r1, [r0], r0, lsl #8
    556c:	8c010000 	stchi	0, cr0, [r1], {-0}
    5570:	000001ae 	andeq	r0, r0, lr, lsr #3
    5574:	0000192b 	andeq	r1, r0, fp, lsr #18
    5578:	62757013 	rsbsvs	r7, r5, #19
    557c:	ae8c0100 	rmfgee	f0, f4, f0
    5580:	49000001 	stmdbmi	r0, {r0}
    5584:	14000019 	strne	r0, [r0], #-25
    5588:	000016ef 	andeq	r1, r0, pc, ror #13
    558c:	01ae8d01 			; <UNDEFINED> instruction: 0x01ae8d01
    5590:	19670000 	stmdbne	r7!, {}^	; <UNPREDICTABLE>
    5594:	6c130000 	ldcvs	0, cr0, [r3], {-0}
    5598:	01006e65 	tsteq	r0, r5, ror #28
    559c:	0000978d 	andeq	r9, r0, sp, lsl #15
    55a0:	00198500 	andseq	r8, r9, r0, lsl #10
    55a4:	00702300 	rsbseq	r2, r0, r0, lsl #6
    55a8:	00b28f01 	adcseq	r8, r2, r1, lsl #30
    55ac:	91030000 	mrsls	r0, (UNDEF: 3)
    55b0:	71237de0 	teqvc	r3, r0, ror #27
    55b4:	b2900100 	addslt	r0, r0, #0, 2
    55b8:	03000000 	movweq	r0, #0
    55bc:	237ee091 	cmncs	lr, #145	; 0x91
    55c0:	0073686c 	rsbseq	r6, r3, ip, ror #16
    55c4:	00e79101 	rsceq	r9, r7, r1, lsl #2
    55c8:	91030000 	mrsls	r0, (UNDEF: 3)
    55cc:	72237cc0 	eorvc	r7, r3, #192, 24	; 0xc000
    55d0:	01007368 	tsteq	r0, r8, ror #6
    55d4:	0000e792 	muleq	r0, r2, r7
    55d8:	e0910300 	adds	r0, r1, r0, lsl #6
    55dc:	007a237c 	rsbseq	r2, sl, ip, ror r3
    55e0:	00e79301 	rsceq	r9, r7, r1, lsl #6
    55e4:	91030000 	mrsls	r0, (UNDEF: 3)
    55e8:	6f247d80 	svcvs	0x00247d80
    55ec:	9401006b 	strls	r0, [r1], #-107	; 0x6b
    55f0:	00000081 	andeq	r0, r0, r1, lsl #1
    55f4:	000019a3 	andeq	r1, r0, r3, lsr #19
    55f8:	00041816 	andeq	r1, r4, r6, lsl r8
    55fc:	001ede00 	andseq	sp, lr, r0, lsl #28
    5600:	00069008 	andeq	r9, r6, r8
    5604:	06970100 	ldreq	r0, [r7], r0, lsl #2
    5608:	17000007 	strne	r0, [r0, -r7]
    560c:	00000448 	andeq	r0, r0, r8, asr #8
    5610:	000019e4 	andeq	r1, r0, r4, ror #19
    5614:	00043f17 	andeq	r3, r4, r7, lsl pc
    5618:	001a0200 	andseq	r0, sl, r0, lsl #4
    561c:	04361700 	ldrteq	r1, [r6], #-1792	; 0x700
    5620:	1a200000 	bne	805628 <__Stack_Size+0x804e28>
    5624:	2d170000 	ldccs	0, cr0, [r7, #-0]
    5628:	3e000004 	cdpcc	0, 0, cr0, cr0, cr4, {0}
    562c:	1700001a 	smladne	r0, sl, r0, r0
    5630:	00000424 	andeq	r0, r0, r4, lsr #8
    5634:	00001a5c 	andeq	r1, r0, ip, asr sl
    5638:	00069018 	andeq	r9, r6, r8, lsl r0
    563c:	04531900 	ldrbeq	r1, [r3], #-2304	; 0x900
    5640:	91030000 	mrsls	r0, (UNDEF: 3)
    5644:	561d7ee0 	ldrpl	r7, [sp], -r0, ror #29
    5648:	04000001 	streq	r0, [r0], #-1
    564c:	b008001f 	andlt	r0, r8, pc, lsl r0
    5650:	01000006 	tsteq	r0, r6
    5654:	01782570 	cmneq	r8, r0, ror r5
    5658:	26400000 	strbcs	r0, [r0], -r0
    565c:	0000018e 	andeq	r0, r0, lr, lsl #3
    5660:	83265801 	teqhi	r6, #65536	; 0x10000
    5664:	01000001 	tsteq	r0, r1
    5668:	016d1759 	cmneq	sp, r9, asr r7
    566c:	1aa40000 	bne	fe905674 <BootRAM+0xd875e15>
    5670:	62170000 	andsvs	r0, r7, #0
    5674:	b4000001 	strlt	r0, [r0], #-1
    5678:	1800001b 	stmdane	r0, {r0, r1, r3, r4}
    567c:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    5680:	00019919 	andeq	r9, r1, r9, lsl r9
    5684:	e0910300 	adds	r0, r1, r0, lsl #6
    5688:	011e167d 	tsteq	lr, sp, ror r6
    568c:	1f040000 	svcne	0x00040000
    5690:	06d80800 	ldrbeq	r0, [r8], r0, lsl #16
    5694:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    5698:	0000060c 	andeq	r0, r0, ip, lsl #12
    569c:	00012a17 	andeq	r2, r1, r7, lsl sl
    56a0:	001bfc00 	andseq	pc, fp, r0, lsl #24
    56a4:	00270000 	eoreq	r0, r7, r0
    56a8:	71000007 	tstvc	r0, r7
    56ac:	28000006 	stmdacs	r0, {r1, r2}
    56b0:	000001a3 	andeq	r0, r0, r3, lsr #3
    56b4:	00001d64 	andeq	r1, r0, r4, ror #26
    56b8:	001f581a 	andseq	r5, pc, sl, lsl r8	; <UNPREDICTABLE>
    56bc:	000a9608 	andeq	r9, sl, r8, lsl #12
    56c0:	00063a00 	andeq	r3, r6, r0, lsl #20
    56c4:	51011b00 	tstpl	r1, r0, lsl #22
    56c8:	7ee09103 	urdvcs	f1, f3
    56cc:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    56d0:	007de091 			; <UNDEFINED> instruction: 0x007de091
    56d4:	001f741a 	andseq	r7, pc, sl, lsl r4	; <UNPREDICTABLE>
    56d8:	000a9608 	andeq	r9, sl, r8, lsl #12
    56dc:	00064f00 	andeq	r4, r6, r0, lsl #30
    56e0:	50011b00 	andpl	r1, r1, r0, lsl #22
    56e4:	7de09103 	stfvcp	f1, [r0, #12]!
    56e8:	1f861c00 	svcne	0x00861c00
    56ec:	0a040800 	beq	1076f4 <__Stack_Size+0x106ef4>
    56f0:	011b0000 	tsteq	fp, r0
    56f4:	c0780352 	rsbsgt	r0, r8, r2, asr r3
    56f8:	51011b00 	tstpl	r1, r0, lsl #22
    56fc:	74007905 	strvc	r7, [r0], #-2309	; 0x905
    5700:	011b2200 	tsteq	fp, r0, lsl #4
    5704:	e0910350 	adds	r0, r1, r0, asr r3
    5708:	1a00007d 	bne	5904 <__Stack_Size+0x5104>
    570c:	08001f92 	stmdaeq	r0, {r1, r4, r7, r8, r9, sl, fp, ip}
    5710:	00000aac 	andeq	r0, r0, ip, lsr #21
    5714:	00000692 	muleq	r0, r2, r6
    5718:	0252011b 	subseq	r0, r2, #-1073741818	; 0xc0000006
    571c:	011b0078 	tsteq	fp, r8, ror r0
    5720:	00790251 	rsbseq	r0, r9, r1, asr r2
    5724:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    5728:	007fa091 			; <UNDEFINED> instruction: 0x007fa091
    572c:	001f9e1a 	andseq	r9, pc, sl, lsl lr	; <UNPREDICTABLE>
    5730:	000a0408 	andeq	r0, sl, r8, lsl #8
    5734:	0006b400 	andeq	fp, r6, r0, lsl #8
    5738:	52011b00 	andpl	r1, r1, #0, 22
    573c:	00c07803 	sbceq	r7, r0, r3, lsl #16
    5740:	0351011b 	cmpeq	r1, #-1073741818	; 0xc0000006
    5744:	1b7ee091 	blne	1fbd990 <__Stack_Size+0x1fbd190>
    5748:	74025001 	strvc	r5, [r2], #-1
    574c:	aa1a0050 	bge	685894 <__Stack_Size+0x685094>
    5750:	1f08001f 	svcne	0x0008001f
    5754:	db00000a 	blle	5784 <__Stack_Size+0x4f84>
    5758:	1b000006 	blne	5778 <__Stack_Size+0x4f78>
    575c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    5760:	52011b40 	andpl	r1, r1, #64, 22	; 0x10000
    5764:	011b3001 	tsteq	fp, r1
    5768:	e0910351 	adds	r0, r1, r1, asr r3
    576c:	50011b7e 	andpl	r1, r1, lr, ror fp
    5770:	7de09103 	stfvcp	f1, [r0, #12]!
    5774:	1fb61c00 	svcne	0x00b61c00
    5778:	0ad00800 	beq	ff407780 <BootRAM+0xe377f21>
    577c:	011b0000 	tsteq	fp, r0
    5780:	60030553 	andvs	r0, r3, r3, asr r5
    5784:	1b080073 	blne	205958 <__Stack_Size+0x205158>
    5788:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    578c:	51011b40 	tstpl	r1, r0, asr #22
    5790:	7ee09103 	urdvcs	f1, f3
    5794:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    5798:	007d8091 			; <UNDEFINED> instruction: 0x007d8091
    579c:	00000000 	andeq	r0, r0, r0
    57a0:	0001e51e 	andeq	lr, r1, lr, lsl r5
    57a4:	001fb600 	andseq	fp, pc, r0, lsl #12
    57a8:	00002008 	andeq	r2, r0, r8
    57ac:	d99a0100 	ldmible	sl, {r8}
    57b0:	17000007 	strne	r0, [r0, -r7]
    57b4:	000001fa 	strdeq	r0, [r0], -sl
    57b8:	00001da7 	andeq	r1, r0, r7, lsr #27
    57bc:	0001f117 	andeq	pc, r1, r7, lsl r1	; <UNPREDICTABLE>
    57c0:	001dd400 	andseq	sp, sp, r0, lsl #8
    57c4:	1fb61f00 	svcne	0x00b61f00
    57c8:	00200800 	eoreq	r0, r0, r0, lsl #16
    57cc:	03190000 	tsteq	r9, #0
    57d0:	03000002 	movweq	r0, #2
    57d4:	1e7ee091 	mrcne	0, 3, lr, cr14, cr1, {4}
    57d8:	0000020d 	andeq	r0, r0, sp, lsl #4
    57dc:	08001fc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sl, fp, ip}
    57e0:	00000014 	andeq	r0, r0, r4, lsl r0
    57e4:	07c03701 	strbeq	r3, [r0, r1, lsl #14]
    57e8:	23170000 	tstcs	r7, #0
    57ec:	f5000002 			; <UNDEFINED> instruction: 0xf5000002
    57f0:	1700001d 	smladne	r0, sp, r0, r0
    57f4:	00000218 	andeq	r0, r0, r8, lsl r2
    57f8:	00001e88 	andeq	r1, r0, r8, lsl #29
    57fc:	001fc21f 	andseq	ip, pc, pc, lsl r2	; <UNPREDICTABLE>
    5800:	00001408 	andeq	r1, r0, r8, lsl #8
    5804:	022c1900 	eoreq	r1, ip, #0, 18
    5808:	91030000 	mrsls	r0, (UNDEF: 3)
    580c:	35197dc0 	ldrcc	r7, [r9, #-3520]	; 0xdc0
    5810:	03000002 	movweq	r0, #2
    5814:	1a7de091 	bne	1f7da60 <__Stack_Size+0x1f7d260>
    5818:	08001fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, ip}
    581c:	00000a45 	andeq	r0, r0, r5, asr #20
    5820:	000007a0 	andeq	r0, r0, r0, lsr #15
    5824:	0352011b 	cmpeq	r2, #-1073741818	; 0xc0000006
    5828:	1b7ee091 	blne	1fbda74 <__Stack_Size+0x1fbd274>
    582c:	91035101 	tstls	r3, r1, lsl #2
    5830:	011b7de0 	tsteq	fp, r0, ror #27
    5834:	c0910350 	addsgt	r0, r1, r0, asr r3
    5838:	d61c007d 			; <UNDEFINED> instruction: 0xd61c007d
    583c:	6008001f 	andvs	r0, r8, pc, lsl r0
    5840:	1b00000a 	blne	5870 <__Stack_Size+0x5070>
    5844:	91035201 	tstls	r3, r1, lsl #4
    5848:	011b7de0 	tsteq	fp, r0, ror #27
    584c:	c0910351 	addsgt	r0, r1, r1, asr r3
    5850:	50011b7d 	andpl	r1, r1, sp, ror fp
    5854:	00007d02 	andeq	r7, r0, r2, lsl #26
    5858:	c21c0000 	andsgt	r0, ip, #0
    585c:	7b08001f 	blvc	2058e0 <__Stack_Size+0x2050e0>
    5860:	1b00000a 	blne	5890 <__Stack_Size+0x5090>
    5864:	76025201 	strvc	r5, [r2], -r1, lsl #4
    5868:	50011b20 	andpl	r1, r1, r0, lsr #22
    586c:	7ee09103 	urdvcs	f1, f3
    5870:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    5874:	0000046f 	andeq	r0, r0, pc, ror #8
    5878:	08001fd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, sl, fp, ip}
    587c:	00000016 	andeq	r0, r0, r6, lsl r0
    5880:	08659d01 	stmdaeq	r5!, {r0, r8, sl, fp, ip, pc}^
    5884:	88170000 	ldmdahi	r7, {}	; <UNPREDICTABLE>
    5888:	a9000004 	stmdbge	r0, {r2}
    588c:	1700001e 	smladne	r0, lr, r0, r0
    5890:	0000047f 	andeq	r0, r0, pc, ror r4
    5894:	00001ebc 			; <UNDEFINED> instruction: 0x00001ebc
    5898:	001fd61f 	andseq	sp, pc, pc, lsl r6	; <UNPREDICTABLE>
    589c:	00001608 	andeq	r1, r0, r8, lsl #12
    58a0:	04931900 	ldreq	r1, [r3], #2304	; 0x900
    58a4:	91030000 	mrsls	r0, (UNDEF: 3)
    58a8:	9c197dc0 	ldcls	13, cr7, [r9], {192}	; 0xc0
    58ac:	03000004 	movweq	r0, #4
    58b0:	287ee091 	ldmdacs	lr!, {r0, r4, r7, sp, lr, pc}^
    58b4:	000004a5 	andeq	r0, r0, r5, lsr #9
    58b8:	00001f36 	andeq	r1, r0, r6, lsr pc
    58bc:	001fe01a 	andseq	lr, pc, sl, lsl r0	; <UNPREDICTABLE>
    58c0:	000af008 	andeq	pc, sl, r8
    58c4:	00084400 	andeq	r4, r8, r0, lsl #8
    58c8:	52011b00 	andpl	r1, r1, #0, 22
    58cc:	1b007702 	blne	234dc <__Stack_Size+0x22cdc>
    58d0:	91035101 	tstls	r3, r1, lsl #2
    58d4:	011b7ee0 	tsteq	fp, r0, ror #29
    58d8:	c0910350 	addsgt	r0, r1, r0, asr r3
    58dc:	ec1c007d 	ldc	0, cr0, [ip], {125}	; 0x7d
    58e0:	0f08001f 	svceq	0x0008001f
    58e4:	1b00000b 	blne	5918 <__Stack_Size+0x5118>
    58e8:	91035201 	tstls	r3, r1, lsl #4
    58ec:	011b7ee0 	tsteq	fp, r0, ror #29
    58f0:	c0910351 	addsgt	r0, r1, r1, asr r3
    58f4:	50011b7d 	andpl	r1, r1, sp, ror fp
    58f8:	7de09103 	stfvcp	f1, [r0, #12]!
    58fc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    5900:	0000046f 	andeq	r0, r0, pc, ror #8
    5904:	08001ff6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5908:	00000016 	andeq	r0, r0, r6, lsl r0
    590c:	08f19f01 	ldmeq	r1!, {r0, r8, r9, sl, fp, ip, pc}^
    5910:	88170000 	ldmdahi	r7, {}	; <UNPREDICTABLE>
    5914:	54000004 	strpl	r0, [r0], #-4
    5918:	1700001f 	smladne	r0, pc, r0, r0	; <UNPREDICTABLE>
    591c:	0000047f 	andeq	r0, r0, pc, ror r4
    5920:	00001f67 	andeq	r1, r0, r7, ror #30
    5924:	001ff61f 	andseq	pc, pc, pc, lsl r6	; <UNPREDICTABLE>
    5928:	00001608 	andeq	r1, r0, r8, lsl #12
    592c:	04931900 	ldreq	r1, [r3], #2304	; 0x900
    5930:	91030000 	mrsls	r0, (UNDEF: 3)
    5934:	9c197da0 	ldcls	13, cr7, [r9], {160}	; 0xa0
    5938:	03000004 	movweq	r0, #4
    593c:	287dc091 	ldmdacs	sp!, {r0, r4, r7, lr, pc}^
    5940:	000004a5 	andeq	r0, r0, r5, lsr #9
    5944:	00001faf 	andeq	r1, r0, pc, lsr #31
    5948:	0020001a 	eoreq	r0, r0, sl, lsl r0
    594c:	000af008 	andeq	pc, sl, r8
    5950:	0008d000 	andeq	sp, r8, r0
    5954:	52011b00 	andpl	r1, r1, #0, 22
    5958:	1b007602 	blne	23168 <__Stack_Size+0x22968>
    595c:	91035101 	tstls	r3, r1, lsl #2
    5960:	011b7dc0 	tsteq	fp, r0, asr #27
    5964:	a0910350 	addsge	r0, r1, r0, asr r3
    5968:	0c1c007d 	ldceq	0, cr0, [ip], {125}	; 0x7d
    596c:	0f080020 	svceq	0x00080020
    5970:	1b00000b 	blne	59a4 <__Stack_Size+0x51a4>
    5974:	91035201 	tstls	r3, r1, lsl #4
    5978:	011b7dc0 	tsteq	fp, r0, asr #27
    597c:	a0910351 	addsge	r0, r1, r1, asr r3
    5980:	50011b7d 	andpl	r1, r1, sp, ror fp
    5984:	7ee09103 	urdvcs	f1, f3
    5988:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    598c:	0000020d 	andeq	r0, r0, sp, lsl #4
    5990:	08002016 	stmdaeq	r0, {r1, r2, r4, sp}
    5994:	00000014 	andeq	r0, r0, r4, lsl r0
    5998:	0975a101 	ldmdbeq	r5!, {r0, r8, sp, pc}^
    599c:	23170000 	tstcs	r7, #0
    59a0:	cd000002 	stcgt	0, cr0, [r0, #-8]
    59a4:	1700001f 	smladne	r0, pc, r0, r0	; <UNPREDICTABLE>
    59a8:	00000218 	andeq	r0, r0, r8, lsl r2
    59ac:	00001ffc 	strdeq	r1, [r0], -ip
    59b0:	0020161f 	eoreq	r1, r0, pc, lsl r6
    59b4:	00001408 	andeq	r1, r0, r8, lsl #8
    59b8:	022c1900 	eoreq	r1, ip, #0, 18
    59bc:	91030000 	mrsls	r0, (UNDEF: 3)
    59c0:	35197da0 	ldrcc	r7, [r9, #-3488]	; 0xda0
    59c4:	03000002 	movweq	r0, #2
    59c8:	1a7dc091 	bne	1f75c14 <__Stack_Size+0x1f75414>
    59cc:	08002020 	stmdaeq	r0, {r5, sp}
    59d0:	00000a45 	andeq	r0, r0, r5, asr #20
    59d4:	00000954 	andeq	r0, r0, r4, asr r9
    59d8:	0352011b 	cmpeq	r2, #-1073741818	; 0xc0000006
    59dc:	1b7de091 	blne	1f7dc28 <__Stack_Size+0x1f7d428>
    59e0:	91035101 	tstls	r3, r1, lsl #2
    59e4:	011b7dc0 	tsteq	fp, r0, asr #27
    59e8:	a0910350 	addsge	r0, r1, r0, asr r3
    59ec:	2a1c007d 	bcs	705be8 <__Stack_Size+0x7053e8>
    59f0:	60080020 	andvs	r0, r8, r0, lsr #32
    59f4:	1b00000a 	blne	5a24 <__Stack_Size+0x5224>
    59f8:	91035201 	tstls	r3, r1, lsl #4
    59fc:	011b7dc0 	tsteq	fp, r0, asr #27
    5a00:	a0910351 	addsge	r0, r1, r1, asr r3
    5a04:	50011b7d 	andpl	r1, r1, sp, ror fp
    5a08:	7ce09103 	stfvcp	f1, [r0], #12
    5a0c:	1a000000 	bne	5a14 <__Stack_Size+0x5214>
    5a10:	08001ff6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5a14:	00000a7b 	andeq	r0, r0, fp, ror sl
    5a18:	00000998 	muleq	r0, r8, r9
    5a1c:	0352011b 	cmpeq	r2, #-1073741818	; 0xc0000006
    5a20:	1b7d8091 	blne	1f65c6c <__Stack_Size+0x1f6546c>
    5a24:	91035101 	tstls	r3, r1, lsl #2
    5a28:	011b7de0 	tsteq	fp, r0, ror #27
    5a2c:	e0910350 	adds	r0, r1, r0, asr r3
    5a30:	161a007d 			; <UNDEFINED> instruction: 0x161a007d
    5a34:	2a080020 	bcs	205abc <__Stack_Size+0x2052bc>
    5a38:	bb00000b 	bllt	5a6c <__Stack_Size+0x526c>
    5a3c:	1b000009 	blne	5a68 <__Stack_Size+0x5268>
    5a40:	91035201 	tstls	r3, r1, lsl #4
    5a44:	011b7ee0 	tsteq	fp, r0, ror #29
    5a48:	e0910351 	adds	r0, r1, r1, asr r3
    5a4c:	50011b7d 	andpl	r1, r1, sp, ror fp
    5a50:	7de09103 	stfvcp	f1, [r0, #12]!
    5a54:	20321c00 	eorscs	r1, r2, r0, lsl #24
    5a58:	0b450800 	bleq	1147a60 <__Stack_Size+0x1147260>
    5a5c:	011b0000 	tsteq	fp, r0
    5a60:	e0910351 	adds	r0, r1, r1, asr r3
    5a64:	50011b7c 	andpl	r1, r1, ip, ror fp
    5a68:	00007d02 	andeq	r7, r0, r2, lsl #26
    5a6c:	16ca1500 	strbne	r1, [sl], r0, lsl #10
    5a70:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    5a74:	000009e4 	andeq	r0, r0, r4, ror #19
    5a78:	73600305 	cmnvc	r0, #335544320	; 0x14000000
    5a7c:	e7100800 	ldr	r0, [r0, -r0, lsl #16]
    5a80:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    5a84:	000015fb 	strdeq	r1, [r0], -fp
    5a88:	02452703 	subeq	r2, r5, #786432	; 0xc0000
    5a8c:	60290000 	eorvs	r0, r9, r0
    5a90:	02000016 	andeq	r0, r0, #22
    5a94:	0009ff19 	andeq	pc, r9, r9, lsl pc	; <UNPREDICTABLE>
    5a98:	00f71000 	rscseq	r1, r7, r0
    5a9c:	292a0000 	stmdbcs	sl!, {}	; <UNPREDICTABLE>
    5aa0:	02000016 	andeq	r0, r0, #22
    5aa4:	000a1f2b 	andeq	r1, sl, fp, lsr #30
    5aa8:	01342b00 	teqeq	r4, r0, lsl #22
    5aac:	ae2b0000 	cdpge	0, 2, cr0, cr11, cr0, {0}
    5ab0:	2b000001 	blcs	5abc <__Stack_Size+0x52bc>
    5ab4:	00000097 	muleq	r0, r7, r0
    5ab8:	16752a00 	ldrbtne	r2, [r5], -r0, lsl #20
    5abc:	31020000 	mrscc	r0, (UNDEF: 2)
    5ac0:	00000a3f 	andeq	r0, r0, pc, lsr sl
    5ac4:	000a3f2b 	andeq	r3, sl, fp, lsr #30
    5ac8:	01502b00 	cmpeq	r0, r0, lsl #22
    5acc:	7a2b0000 	bvc	ac5ad4 <__Stack_Size+0xac52d4>
    5ad0:	2b000000 	blcs	5ad8 <__Stack_Size+0x52d8>
    5ad4:	0000007a 	andeq	r0, r0, sl, ror r0
    5ad8:	ff040c00 			; <UNDEFINED> instruction: 0xff040c00
    5adc:	2a000009 	bcs	5b08 <__Stack_Size+0x5308>
    5ae0:	000015a8 	andeq	r1, r0, r8, lsr #11
    5ae4:	0a602e03 	beq	18112f8 <__Stack_Size+0x1810af8>
    5ae8:	502b0000 	eorpl	r0, fp, r0
    5aec:	2b000001 	blcs	5af8 <__Stack_Size+0x52f8>
    5af0:	00000150 	andeq	r0, r0, r0, asr r1
    5af4:	00023f2b 	andeq	r3, r2, fp, lsr #30
    5af8:	3b2a0000 	blcc	a85b00 <__Stack_Size+0xa85300>
    5afc:	03000015 	movweq	r0, #21
    5b00:	000a7b37 	andeq	r7, sl, r7, lsr fp
    5b04:	01502b00 	cmpeq	r0, r0, lsl #22
    5b08:	ae2b0000 	cdpge	0, 2, cr0, cr11, cr0, {0}
    5b0c:	2b000001 	blcs	5b18 <__Stack_Size+0x5318>
    5b10:	000001ae 	andeq	r0, r0, lr, lsr #3
    5b14:	158e2a00 	strne	r2, [lr, #2560]	; 0xa00
    5b18:	4f030000 	svcmi	0x00030000
    5b1c:	00000a96 	muleq	r0, r6, sl
    5b20:	0004b02b 	andeq	fp, r4, fp, lsr #32
    5b24:	023f2b00 	eorseq	r2, pc, #0, 22
    5b28:	ae2b0000 	cdpge	0, 2, cr0, cr11, cr0, {0}
    5b2c:	00000001 	andeq	r0, r0, r1
    5b30:	0017492a 	andseq	r4, r7, sl, lsr #18
    5b34:	ac240200 	sfmge	f0, 4, [r4], #-0
    5b38:	2b00000a 	blcs	5b68 <__Stack_Size+0x5368>
    5b3c:	00000134 	andeq	r0, r0, r4, lsr r1
    5b40:	0001ae2b 	andeq	sl, r1, fp, lsr #28
    5b44:	342c0000 	strtcc	r0, [ip], #-0
    5b48:	a9000015 	stmdbge	r0, {r0, r2, r4}
    5b4c:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    5b50:	2b00000a 	blcs	5b80 <__Stack_Size+0x5380>
    5b54:	000000a9 	andeq	r0, r0, r9, lsr #1
    5b58:	000ac92b 	andeq	ip, sl, fp, lsr #18
    5b5c:	00a22b00 	adceq	r2, r2, r0, lsl #22
    5b60:	0c000000 	stceq	0, cr0, [r0], {-0}
    5b64:	000acf04 	andeq	ip, sl, r4, lsl #30
    5b68:	d82a2d00 	stmdale	sl!, {r8, sl, fp, sp}
    5b6c:	07000016 	smladeq	r0, r6, r0, r0
    5b70:	000af021 	andeq	pc, sl, r1, lsr #32
    5b74:	01502b00 	cmpeq	r0, r0, lsl #22
    5b78:	ae2b0000 	cdpge	0, 2, cr0, cr11, cr0, {0}
    5b7c:	2b000001 	blcs	5b88 <__Stack_Size+0x5388>
    5b80:	00000097 	muleq	r0, r7, r0
    5b84:	0001ae2b 	andeq	sl, r1, fp, lsr #28
    5b88:	5b2e0000 	blpl	b85b90 <__Stack_Size+0xb85390>
    5b8c:	03000015 	movweq	r0, #21
    5b90:	00008138 	andeq	r8, r0, r8, lsr r1
    5b94:	000b0f00 	andeq	r0, fp, r0, lsl #30
    5b98:	01502b00 	cmpeq	r0, r0, lsl #22
    5b9c:	502b0000 	eorpl	r0, fp, r0
    5ba0:	2b000001 	blcs	5bac <__Stack_Size+0x53ac>
    5ba4:	000001ae 	andeq	r0, r0, lr, lsr #3
    5ba8:	156e2a00 	strbne	r2, [lr, #-2560]!	; 0xa00
    5bac:	2b030000 	blcs	c5bb4 <__Stack_Size+0xc53b4>
    5bb0:	00000b2a 	andeq	r0, r0, sl, lsr #22
    5bb4:	0004b02b 	andeq	fp, r4, fp, lsr #32
    5bb8:	01ae2b00 			; <UNDEFINED> instruction: 0x01ae2b00
    5bbc:	ae2b0000 	cdpge	0, 2, cr0, cr11, cr0, {0}
    5bc0:	00000001 	andeq	r0, r0, r1
    5bc4:	00154f2a 	andseq	r4, r5, sl, lsr #30
    5bc8:	454c0300 	strbmi	r0, [ip, #-768]	; 0x300
    5bcc:	2b00000b 	blcs	5c00 <__Stack_Size+0x5400>
    5bd0:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    5bd4:	00023f2b 	andeq	r3, r2, fp, lsr #30
    5bd8:	023f2b00 	eorseq	r2, pc, #0, 22
    5bdc:	2f000000 	svccs	0x00000000
    5be0:	00001524 	andeq	r1, r0, r4, lsr #10
    5be4:	00812d08 	addeq	r2, r1, r8, lsl #26
    5be8:	ae2b0000 	cdpge	0, 2, cr0, cr11, cr0, {0}
    5bec:	2b000001 	blcs	5bf8 <__Stack_Size+0x53f8>
    5bf0:	000001ae 	andeq	r0, r0, lr, lsr #3
    5bf4:	0fa30000 	svceq	0x00a30000
    5bf8:	00040000 	andeq	r0, r4, r0
    5bfc:	0000167f 	andeq	r1, r0, pc, ror r6
    5c00:	06c00104 	strbeq	r0, [r0], r4, lsl #2
    5c04:	6a010000 	bvs	45c0c <__Stack_Size+0x4540c>
    5c08:	93000017 	movwls	r0, #23
    5c0c:	70000008 	andvc	r0, r0, r8
    5c10:	00000008 	andeq	r0, r0, r8
    5c14:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    5c18:	0200001a 	andeq	r0, r0, #26
    5c1c:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    5c20:	0d030000 	stceq	0, cr0, [r3, #-0]
    5c24:	0300000b 	movweq	r0, #11
    5c28:	0000371c 	andeq	r3, r0, ip, lsl r7
    5c2c:	08010200 	stmdaeq	r1, {r9}
    5c30:	00000818 	andeq	r0, r0, r8, lsl r8
    5c34:	5e050202 	cdppl	2, 0, cr0, cr5, cr2, {0}
    5c38:	03000006 	movweq	r0, #6
    5c3c:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    5c40:	00502603 	subseq	r2, r0, r3, lsl #12
    5c44:	02020000 	andeq	r0, r2, #0
    5c48:	00094907 	andeq	r4, r9, r7, lsl #18
    5c4c:	05040200 	streq	r0, [r4, #-512]	; 0x200
    5c50:	000004da 	ldrdeq	r0, [r0], -sl
    5c54:	000ada03 	andeq	sp, sl, r3, lsl #20
    5c58:	69380300 	ldmdbvs	r8!, {r8, r9}
    5c5c:	02000000 	andeq	r0, r0, #0
    5c60:	02520704 	subseq	r0, r2, #4, 14	; 0x100000
    5c64:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5c68:	0004d505 	andeq	sp, r4, r5, lsl #10
    5c6c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    5c70:	0000024d 	andeq	r0, r0, sp, asr #4
    5c74:	69050404 	stmdbvs	r5, {r2, sl}
    5c78:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    5c7c:	02570704 	subseq	r0, r7, #4, 14	; 0x100000
    5c80:	0f030000 	svceq	0x00030000
    5c84:	0400000b 	streq	r0, [r0], #-11
    5c88:	00002c2a 	andeq	r2, r0, sl, lsr #24
    5c8c:	0dba0300 	ldceq	3, cr0, [sl]
    5c90:	36040000 	strcc	r0, [r4], -r0
    5c94:	00000045 	andeq	r0, r0, r5, asr #32
    5c98:	000adc03 	andeq	sp, sl, r3, lsl #24
    5c9c:	5e420400 	cdppl	4, 4, cr0, cr2, cr0, {0}
    5ca0:	02000000 	andeq	r0, r0, #0
    5ca4:	078b0704 	streq	r0, [fp, r4, lsl #14]
    5ca8:	04050000 	streq	r0, [r5], #-0
    5cac:	21080102 	tstcs	r8, r2, lsl #2
    5cb0:	06000008 	streq	r0, [r0], -r8
    5cb4:	000014ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    5cb8:	0a014b01 	beq	588c4 <__Stack_Size+0x580c4>
    5cbc:	07000001 	streq	r0, [r0, -r1]
    5cc0:	00747364 	rsbseq	r7, r4, r4, ror #6
    5cc4:	010a4b01 	tsteq	sl, r1, lsl #22
    5cc8:	5d080000 	stcpl	0, cr0, [r8, #-0]
    5ccc:	01000017 	tsteq	r0, r7, lsl r0
    5cd0:	0001104c 	andeq	r1, r1, ip, asr #32
    5cd4:	6e6f0700 	cdpvs	7, 6, cr0, cr15, cr0, {0}
    5cd8:	4c010065 	stcmi	0, cr0, [r1], {101}	; 0x65
    5cdc:	00000110 	andeq	r0, r0, r0, lsl r1
    5ce0:	00178f08 	andseq	r8, r7, r8, lsl #30
    5ce4:	8c4d0100 	stfhie	f0, [sp], {-0}
    5ce8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5cec:	00000d27 	andeq	r0, r0, r7, lsr #26
    5cf0:	01164f01 	tsteq	r6, r1, lsl #30
    5cf4:	690a0000 	stmdbvs	sl, {}	; <UNPREDICTABLE>
    5cf8:	7e500100 	rdfvcs	f0, f0, f0
    5cfc:	00000000 	andeq	r0, r0, r0
    5d00:	008c040b 	addeq	r0, ip, fp, lsl #8
    5d04:	040b0000 	streq	r0, [fp], #-0
    5d08:	00000116 	andeq	r0, r0, r6, lsl r1
    5d0c:	00008c0c 	andeq	r8, r0, ip, lsl #24
    5d10:	14600d00 	strbtne	r0, [r0], #-3328	; 0xd00
    5d14:	22020000 	andcs	r0, r2, #0
    5d18:	00013a03 	andeq	r3, r1, r3, lsl #20
    5d1c:	00780700 	rsbseq	r0, r8, r0, lsl #14
    5d20:	010a2202 	tsteq	sl, r2, lsl #4
    5d24:	61070000 	mrsvs	r0, (UNDEF: 7)
    5d28:	10220200 	eorne	r0, r2, r0, lsl #4
    5d2c:	00000001 	andeq	r0, r0, r1
    5d30:	00159c06 	andseq	r9, r5, r6, lsl #24
    5d34:	010c0100 	mrseq	r0, (UNDEF: 28)
    5d38:	00000162 	andeq	r0, r0, r2, ror #2
    5d3c:	01007807 	tsteq	r0, r7, lsl #16
    5d40:	00010a0c 	andeq	r0, r1, ip, lsl #20
    5d44:	00630700 	rsbeq	r0, r3, r0, lsl #14
    5d48:	00a20c01 	adceq	r0, r2, r1, lsl #24
    5d4c:	690a0000 	stmdbvs	sl, {}	; <UNPREDICTABLE>
    5d50:	7e0e0100 	adfvce	f0, f6, f0
    5d54:	00000000 	andeq	r0, r0, r0
    5d58:	00013a0e 	andeq	r3, r1, lr, lsl #20
    5d5c:	00205000 	eoreq	r5, r0, r0
    5d60:	00001e08 	andeq	r1, r0, r8, lsl #28
    5d64:	ae9c0100 	fmlgee	f0, f4, f0
    5d68:	0f000001 	svceq	0x00000001
    5d6c:	00000146 	andeq	r0, r0, r6, asr #2
    5d70:	00002044 	andeq	r2, r0, r4, asr #32
    5d74:	00014f0f 	andeq	r4, r1, pc, lsl #30
    5d78:	00207200 	eoreq	r7, r0, r0, lsl #4
    5d7c:	01581000 	cmpeq	r8, r0
    5d80:	20c40000 	sbccs	r0, r4, r0
    5d84:	6e110000 	cdpvs	0, 1, cr0, cr1, cr0, {0}
    5d88:	8d080020 	stchi	0, cr0, [r8, #-128]	; 0xffffff80
    5d8c:	1200000f 	andne	r0, r0, #15
    5d90:	4c015201 	sfmmi	f5, 4, [r1], {1}
    5d94:	01510112 	cmpeq	r1, r2, lsl r1
    5d98:	50011230 	andpl	r1, r1, r0, lsr r2
    5d9c:	5001f305 	andpl	pc, r1, r5, lsl #6
    5da0:	00000423 	andeq	r0, r0, r3, lsr #8
    5da4:	0014c413 	andseq	ip, r4, r3, lsl r4
    5da8:	70190100 	andsvc	r0, r9, r0, lsl #2
    5dac:	6e080020 	cdpvs	0, 0, cr0, cr8, cr0, {1}
    5db0:	01000000 	mrseq	r0, (UNDEF: 0)
    5db4:	00023d9c 	muleq	r2, ip, sp
    5db8:	00781400 	rsbseq	r1, r8, r0, lsl #8
    5dbc:	010a1901 	tsteq	sl, r1, lsl #18
    5dc0:	50010000 	andpl	r0, r1, r0
    5dc4:	00179915 	andseq	r9, r7, r5, lsl r9
    5dc8:	3d1b0100 	ldfccs	f0, [fp, #-0]
    5dcc:	02000002 	andeq	r0, r0, #2
    5dd0:	63165891 	tstvs	r6, #9502720	; 0x910000
    5dd4:	971c0100 	ldrls	r0, [ip, -r0, lsl #2]
    5dd8:	fc000000 	stc2	0, cr0, [r0], {-0}
    5ddc:	16000020 	strne	r0, [r0], -r0, lsr #32
    5de0:	1d010069 	stcne	0, cr0, [r1, #-420]	; 0xfffffe5c
    5de4:	0000007e 	andeq	r0, r0, lr, ror r0
    5de8:	0000211a 	andeq	r2, r0, sl, lsl r1
    5dec:	0000bd17 	andeq	fp, r0, r7, lsl sp
    5df0:	0020b000 	eoreq	fp, r0, r0
    5df4:	00073008 	andeq	r3, r7, r8
    5df8:	0f390100 	svceq	0x00390100
    5dfc:	000000ea 	andeq	r0, r0, sl, ror #1
    5e00:	00002168 	andeq	r2, r0, r8, ror #2
    5e04:	0000df18 	andeq	sp, r0, r8, lsl pc
    5e08:	0f500100 	svceq	0x00500100
    5e0c:	000000d4 	ldrdeq	r0, [r0], -r4
    5e10:	0000217f 	andeq	r2, r0, pc, ror r1
    5e14:	0000c918 	andeq	ip, r0, r8, lsl r9
    5e18:	19500100 	ldmdbne	r0, {r8}^
    5e1c:	00000730 	andeq	r0, r0, r0, lsr r7
    5e20:	0000f510 	andeq	pc, r0, r0, lsl r5	; <UNPREDICTABLE>
    5e24:	00219f00 	eoreq	r9, r1, r0, lsl #30
    5e28:	01001a00 	tsteq	r0, r0, lsl #20
    5e2c:	53010000 	movwpl	r0, #4096	; 0x1000
    5e30:	1b000000 	blne	5e38 <__Stack_Size+0x5638>
    5e34:	0000008c 	andeq	r0, r0, ip, lsl #1
    5e38:	0000024d 	andeq	r0, r0, sp, asr #4
    5e3c:	0000ad1c 	andeq	sl, r0, ip, lsl sp
    5e40:	1d001f00 	stcne	15, cr1, [r0, #-0]
    5e44:	00001524 	andeq	r1, r0, r4, lsr #10
    5e48:	008c3c01 	addeq	r3, ip, r1, lsl #24
    5e4c:	20e00000 	rsccs	r0, r0, r0
    5e50:	009a0800 	addseq	r0, sl, r0, lsl #16
    5e54:	9c010000 	stcls	0, cr0, [r1], {-0}
    5e58:	0000029d 	muleq	r0, sp, r2
    5e5c:	0100781e 	tsteq	r0, lr, lsl r8
    5e60:	0001103c 	andeq	r1, r1, ip, lsr r0
    5e64:	0021b200 	eoreq	fp, r1, r0, lsl #4
    5e68:	00791e00 	rsbseq	r1, r9, r0, lsl #28
    5e6c:	01103c01 	tsteq	r0, r1, lsl #24
    5e70:	21de0000 	bicscs	r0, lr, r0
    5e74:	73160000 	tstvc	r6, #0
    5e78:	01006d75 	tsteq	r0, r5, ror sp
    5e7c:	00008c3e 	andeq	r8, r0, lr, lsr ip
    5e80:	00220a00 	eoreq	r0, r2, r0, lsl #20
    5e84:	00691600 	rsbeq	r1, r9, r0, lsl #12
    5e88:	007e3f01 	rsbseq	r3, lr, r1, lsl #30
    5e8c:	22520000 	subscs	r0, r2, #0
    5e90:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5e94:	000000bd 	strheq	r0, [r0], -sp
    5e98:	0800217c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sp}
    5e9c:	000000c2 	andeq	r0, r0, r2, asr #1
    5ea0:	02e59c01 	rsceq	r9, r5, #256	; 0x100
    5ea4:	c9180000 	ldmdbgt	r8, {}	; <UNPREDICTABLE>
    5ea8:	01000000 	mrseq	r0, (UNDEF: 0)
    5eac:	00d40f50 	sbcseq	r0, r4, r0, asr pc
    5eb0:	22950000 	addscs	r0, r5, #0
    5eb4:	df0f0000 	svcle	0x000f0000
    5eb8:	c1000000 	mrsgt	r0, (UNDEF: 0)
    5ebc:	0f000022 	svceq	0x00000022
    5ec0:	000000ea 	andeq	r0, r0, sl, ror #1
    5ec4:	000022ed 	andeq	r2, r0, sp, ror #5
    5ec8:	0000f510 	andeq	pc, r0, r0, lsl r5	; <UNPREDICTABLE>
    5ecc:	00230e00 	eoreq	r0, r3, r0, lsl #28
    5ed0:	01001000 	mrseq	r1, (UNDEF: 0)
    5ed4:	23370000 	teqcs	r7, #0
    5ed8:	13000000 	movwne	r0, #0
    5edc:	0000147a 	andeq	r1, r0, sl, ror r4
    5ee0:	22405601 	subcs	r5, r0, #1048576	; 0x100000
    5ee4:	00460800 	subeq	r0, r6, r0, lsl #16
    5ee8:	9c010000 	stcls	0, cr0, [r1], {-0}
    5eec:	0000033a 	andeq	r0, r0, sl, lsr r3
    5ef0:	01007214 	tsteq	r0, r4, lsl r2
    5ef4:	00010a56 	andeq	r0, r1, r6, asr sl
    5ef8:	1e500100 	rdfnes	f0, f0, f0
    5efc:	56010061 	strpl	r0, [r1], -r1, rrx
    5f00:	00000110 	andeq	r0, r0, r0, lsl r1
    5f04:	00002362 	andeq	r2, r0, r2, ror #6
    5f08:	0100621e 	tsteq	r0, lr, lsl r2
    5f0c:	00011056 	andeq	r1, r1, r6, asr r0
    5f10:	00238300 	eoreq	r8, r3, r0, lsl #6
    5f14:	00631600 	rsbeq	r1, r3, r0, lsl #12
    5f18:	00975801 	addseq	r5, r7, r1, lsl #16
    5f1c:	23a40000 			; <UNDEFINED> instruction: 0x23a40000
    5f20:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
    5f24:	7e590100 	rdfvce	f0, f1, f0
    5f28:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    5f2c:	00000023 	andeq	r0, r0, r3, lsr #32
    5f30:	0014b406 	andseq	fp, r4, r6, lsl #8
    5f34:	016d0100 	cmneq	sp, r0, lsl #2
    5f38:	00000374 	andeq	r0, r0, r4, ror r3
    5f3c:	01007207 	tsteq	r0, r7, lsl #4
    5f40:	00010a6d 	andeq	r0, r1, sp, ror #20
    5f44:	00610700 	rsbeq	r0, r1, r0, lsl #14
    5f48:	01106d01 	tsteq	r0, r1, lsl #26
    5f4c:	62070000 	andvs	r0, r7, #0
    5f50:	106d0100 	rsbne	r0, sp, r0, lsl #2
    5f54:	0a000001 	beq	5f60 <__Stack_Size+0x5760>
    5f58:	6f010063 	svcvs	0x00010063
    5f5c:	000000a2 	andeq	r0, r0, r2, lsr #1
    5f60:	0100690a 	tsteq	r0, sl, lsl #18
    5f64:	00007e70 	andeq	r7, r0, r0, ror lr
    5f68:	3a0e0000 	bcc	385f70 <__Stack_Size+0x385770>
    5f6c:	88000003 	stmdahi	r0, {r0, r1}
    5f70:	4c080022 	stcmi	0, cr0, [r8], {34}	; 0x22
    5f74:	01000000 	mrseq	r0, (UNDEF: 0)
    5f78:	0003b39c 	muleq	r3, ip, r3
    5f7c:	03461800 	movteq	r1, #26624	; 0x6800
    5f80:	50010000 	andpl	r0, r1, r0
    5f84:	00034f0f 	andeq	r4, r3, pc, lsl #30
    5f88:	00243600 	eoreq	r3, r4, r0, lsl #12
    5f8c:	03580f00 	cmpeq	r8, #0, 30
    5f90:	24570000 	ldrbcs	r0, [r7], #-0
    5f94:	61100000 	tstvs	r0, r0
    5f98:	78000003 	stmdavc	r0, {r0, r1}
    5f9c:	10000024 	andne	r0, r0, r4, lsr #32
    5fa0:	0000036a 	andeq	r0, r0, sl, ror #6
    5fa4:	000024a3 	andeq	r2, r0, r3, lsr #9
    5fa8:	15d61300 	ldrbne	r1, [r6, #768]	; 0x300
    5fac:	85010000 	strhi	r0, [r1, #-0]
    5fb0:	080022d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sp}
    5fb4:	00000046 	andeq	r0, r0, r6, asr #32
    5fb8:	03fb9c01 	mvnseq	r9, #256	; 0x100
    5fbc:	72140000 	andsvc	r0, r4, #0
    5fc0:	0a850100 	beq	fe1463c8 <BootRAM+0xd0b6b69>
    5fc4:	01000001 	tsteq	r0, r1
    5fc8:	00611e50 	rsbeq	r1, r1, r0, asr lr
    5fcc:	01108501 	tsteq	r0, r1, lsl #10
    5fd0:	24fd0000 	ldrbtcs	r0, [sp], #0
    5fd4:	63160000 	tstvs	r6, #0
    5fd8:	a2870100 	addge	r0, r7, #0, 2
    5fdc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    5fe0:	16000025 	strne	r0, [r0], -r5, lsr #32
    5fe4:	88010069 	stmdahi	r1, {r0, r3, r5, r6}
    5fe8:	0000007e 	andeq	r0, r0, lr, ror r0
    5fec:	00002549 	andeq	r2, r0, r9, asr #10
    5ff0:	14d50600 	ldrbne	r0, [r5], #1536	; 0x600
    5ff4:	9d010000 	stcls	0, cr0, [r1, #-0]
    5ff8:	00044001 	andeq	r4, r4, r1
    5ffc:	00720700 	rsbseq	r0, r2, r0, lsl #14
    6000:	010a9d01 	tsteq	sl, r1, lsl #26
    6004:	61070000 	mrsvs	r0, (UNDEF: 7)
    6008:	109d0100 	addsne	r0, sp, r0, lsl #2
    600c:	07000001 	streq	r0, [r0, -r1]
    6010:	9d010062 	stcls	0, cr0, [r1, #-392]	; 0xfffffe78
    6014:	00000110 	andeq	r0, r0, r0, lsl r1
    6018:	0100630a 	tsteq	r0, sl, lsl #6
    601c:	0000a29f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    6020:	00690a00 	rsbeq	r0, r9, r0, lsl #20
    6024:	007ea001 	rsbseq	sl, lr, r1
    6028:	0a1f0000 	beq	7c6030 <__Stack_Size+0x7c5830>
    602c:	a301006a 	movwge	r0, #4202	; 0x106a
    6030:	0000007e 	andeq	r0, r0, lr, ror r0
    6034:	fb0e0000 	blx	38603e <__Stack_Size+0x38583e>
    6038:	1c000003 	stcne	0, cr0, [r0], {3}
    603c:	88080023 	stmdahi	r8, {r0, r1, r5}
    6040:	01000000 	mrseq	r0, (UNDEF: 0)
    6044:	0004929c 	muleq	r4, ip, r2
    6048:	04071800 	streq	r1, [r7], #-2048	; 0x800
    604c:	50010000 	andpl	r0, r1, r0
    6050:	0004100f 	andeq	r1, r4, pc
    6054:	0025a300 	eoreq	sl, r5, r0, lsl #6
    6058:	04190f00 	ldreq	r0, [r9], #-3840	; 0xf00
    605c:	25c40000 	strbcs	r0, [r4]
    6060:	22100000 	andscs	r0, r0, #0
    6064:	e5000004 	str	r0, [r0, #-4]
    6068:	10000025 	andne	r0, r0, r5, lsr #32
    606c:	0000042b 	andeq	r0, r0, fp, lsr #8
    6070:	0000260f 	andeq	r2, r0, pc, lsl #12
    6074:	00232620 	eoreq	r2, r3, r0, lsr #12
    6078:	00004a08 	andeq	r4, r0, r8, lsl #20
    607c:	04351000 	ldrteq	r1, [r5], #-0
    6080:	265d0000 	ldrbcs	r0, [sp], -r0
    6084:	00000000 	andeq	r0, r0, r0
    6088:	00178413 	andseq	r8, r7, r3, lsl r4
    608c:	00ba0100 	adcseq	r0, sl, r0, lsl #2
    6090:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    6094:	01000000 	mrseq	r0, (UNDEF: 0)
    6098:	0005599c 	muleq	r5, ip, r9
    609c:	00721e00 	rsbseq	r1, r2, r0, lsl #28
    60a0:	010aba01 	tsteq	sl, r1, lsl #20
    60a4:	26ac0000 	strtcs	r0, [ip], r0
    60a8:	611e0000 	tstvs	lr, r0
    60ac:	10ba0100 	adcsne	r0, sl, r0, lsl #2
    60b0:	d8000001 	stmdale	r0, {r0}
    60b4:	1e000026 	cdpne	0, 0, cr0, cr0, cr6, {1}
    60b8:	ba010062 	blt	46248 <__Stack_Size+0x45a48>
    60bc:	00000110 	andeq	r0, r0, r0, lsl r1
    60c0:	000026f9 	strdeq	r2, [r0], -r9
    60c4:	706d7421 	rsbvc	r7, sp, r1, lsr #8
    60c8:	3dbc0100 	ldfccs	f0, [ip]
    60cc:	02000002 	andeq	r0, r0, #2
    60d0:	fb224891 	blx	89831e <__Stack_Size+0x897b1e>
    60d4:	00000003 	andeq	r0, r0, r3
    60d8:	50000000 	andpl	r0, r0, r0
    60dc:	01000007 	tsteq	r0, r7
    60e0:	000536be 			; <UNDEFINED> instruction: 0x000536be
    60e4:	04190f00 	ldreq	r0, [r9], #-3840	; 0xf00
    60e8:	271a0000 	ldrcs	r0, [sl, -r0]
    60ec:	100f0000 	andne	r0, pc, r0
    60f0:	3b000004 	blcc	6108 <__Stack_Size+0x5908>
    60f4:	0f000027 	svceq	0x00000027
    60f8:	00000407 	andeq	r0, r0, r7, lsl #8
    60fc:	0000275c 	andeq	r2, r0, ip, asr r7
    6100:	00075019 	andeq	r5, r7, r9, lsl r0
    6104:	04221000 	strteq	r1, [r2], #-0
    6108:	27890000 	strcs	r0, [r9, r0]
    610c:	2b100000 	blcs	406114 <__Stack_Size+0x405914>
    6110:	b3000004 	movwlt	r0, #4
    6114:	20000027 	andcs	r0, r0, r7, lsr #32
    6118:	00000000 	andeq	r0, r0, r0
    611c:	00000048 	andeq	r0, r0, r8, asr #32
    6120:	00043510 	andeq	r3, r4, r0, lsl r5
    6124:	00281400 	eoreq	r1, r8, r0, lsl #8
    6128:	00000000 	andeq	r0, r0, r0
    612c:	00011b23 	andeq	r1, r1, r3, lsr #22
    6130:	00000000 	andeq	r0, r0, r0
    6134:	00002600 	andeq	r2, r0, r0, lsl #12
    6138:	0fbf0100 	svceq	0x00bf0100
    613c:	00000130 	andeq	r0, r0, r0, lsr r1
    6140:	00002863 	andeq	r2, r0, r3, ror #16
    6144:	0001270f 	andeq	r2, r1, pc, lsl #14
    6148:	00289000 	eoreq	r9, r8, r0
    614c:	06000000 	streq	r0, [r0], -r0
    6150:	00001485 	andeq	r1, r0, r5, lsl #9
    6154:	9301c201 	movwls	ip, #4609	; 0x1201
    6158:	07000005 	streq	r0, [r0, -r5]
    615c:	c2010072 	andgt	r0, r1, #114	; 0x72
    6160:	0000010a 	andeq	r0, r0, sl, lsl #2
    6164:	01006107 	tsteq	r0, r7, lsl #2
    6168:	000110c2 	andeq	r1, r1, r2, asr #1
    616c:	00620700 	rsbeq	r0, r2, r0, lsl #14
    6170:	00a2c201 	adceq	ip, r2, r1, lsl #4
    6174:	630a0000 	movwvs	r0, #40960	; 0xa000
    6178:	a2c40100 	sbcge	r0, r4, #0, 2
    617c:	0a000000 	beq	6184 <__Stack_Size+0x5984>
    6180:	c5010069 	strgt	r0, [r1, #-105]	; 0x69
    6184:	0000007e 	andeq	r0, r0, lr, ror r0
    6188:	05590e00 	ldrbeq	r0, [r9, #-3584]	; 0xe00
    618c:	00000000 	andeq	r0, r0, r0
    6190:	00400000 	subeq	r0, r0, r0
    6194:	9c010000 	stcls	0, cr0, [r1], {-0}
    6198:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    619c:	00056518 	andeq	r6, r5, r8, lsl r5
    61a0:	18500100 	ldmdane	r0, {r8}^
    61a4:	0000056e 	andeq	r0, r0, lr, ror #10
    61a8:	770f5101 	strvc	r5, [pc, -r1, lsl #2]
    61ac:	b1000005 	tstlt	r0, r5
    61b0:	10000028 	andne	r0, r0, r8, lsr #32
    61b4:	00000580 	andeq	r0, r0, r0, lsl #11
    61b8:	000028d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    61bc:	00058910 	andeq	r8, r5, r0, lsl r9
    61c0:	00290000 	eoreq	r0, r9, r0
    61c4:	ea130000 	b	4c61cc <__Stack_Size+0x4c59cc>
    61c8:	01000014 	tsteq	r0, r4, lsl r0
    61cc:	0023a4d8 	ldrdeq	sl, [r3], -r8	; <UNPREDICTABLE>
    61d0:	0005ea08 	andeq	lr, r5, r8, lsl #20
    61d4:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    61d8:	14000009 	strne	r0, [r0], #-9
    61dc:	d8010072 	stmdale	r1, {r1, r4, r5, r6}
    61e0:	0000010a 	andeq	r0, r0, sl, lsl #2
    61e4:	781e5001 	ldmdavc	lr, {r0, ip, lr}
    61e8:	10d80100 	sbcsne	r0, r8, r0, lsl #2
    61ec:	4e000001 	cdpmi	0, 0, cr0, cr0, cr1, {0}
    61f0:	21000029 	tstcs	r0, r9, lsr #32
    61f4:	da010073 	ble	463c8 <__Stack_Size+0x45bc8>
    61f8:	0000023d 	andeq	r0, r0, sp, lsr r2
    61fc:	0a409102 	beq	102a60c <__Stack_Size+0x1029e0c>
    6200:	db010069 	blle	463ac <__Stack_Size+0x45bac>
    6204:	0000007e 	andeq	r0, r0, lr, ror r0
    6208:	0003fb22 	andeq	pc, r3, r2, lsr #22
    620c:	0023a800 	eoreq	sl, r3, r0, lsl #16
    6210:	00076808 	andeq	r6, r7, r8, lsl #16
    6214:	6cee0100 	stfvse	f0, [lr]
    6218:	0f000006 	svceq	0x00000006
    621c:	00000419 	andeq	r0, r0, r9, lsl r4
    6220:	0000296f 	andeq	r2, r0, pc, ror #18
    6224:	0004100f 	andeq	r1, r4, pc
    6228:	00296f00 	eoreq	r6, r9, r0, lsl #30
    622c:	04070f00 	streq	r0, [r7], #-3840	; 0xf00
    6230:	29900000 	ldmibcs	r0, {}	; <UNPREDICTABLE>
    6234:	68190000 	ldmdavs	r9, {}	; <UNPREDICTABLE>
    6238:	10000007 	andne	r0, r0, r7
    623c:	00000422 	andeq	r0, r0, r2, lsr #8
    6240:	000029bd 			; <UNDEFINED> instruction: 0x000029bd
    6244:	00042b10 	andeq	r2, r4, r0, lsl fp
    6248:	0029e700 	eoreq	lr, r9, r0, lsl #14
    624c:	23ae2000 			; <UNDEFINED> instruction: 0x23ae2000
    6250:	00460800 	subeq	r0, r6, r0, lsl #16
    6254:	35100000 	ldrcc	r0, [r0, #-0]
    6258:	48000004 	stmdami	r0, {r2}
    625c:	0000002a 	andeq	r0, r0, sl, lsr #32
    6260:	fb220000 	blx	88626a <__Stack_Size+0x885a6a>
    6264:	30000003 	andcc	r0, r0, r3
    6268:	80080024 	andhi	r0, r8, r4, lsr #32
    626c:	01000007 	tsteq	r0, r7
    6270:	0006baef 	andeq	fp, r6, pc, ror #21
    6274:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    6278:	10240000 	eorne	r0, r4, r0
    627c:	24000004 	strcs	r0, [r0], #-4
    6280:	00000407 	andeq	r0, r0, r7, lsl #8
    6284:	00078019 	andeq	r8, r7, r9, lsl r0
    6288:	04221000 	strteq	r1, [r2], #-0
    628c:	2a970000 	bcs	fe5c6294 <BootRAM+0xd536a35>
    6290:	2b100000 	blcs	406298 <__Stack_Size+0x405a98>
    6294:	b5000004 	strlt	r0, [r0, #-4]
    6298:	2000002a 	andcs	r0, r0, sl, lsr #32
    629c:	08002430 	stmdaeq	r0, {r4, r5, sl, sp}
    62a0:	00000044 	andeq	r0, r0, r4, asr #32
    62a4:	00043510 	andeq	r3, r4, r0, lsl r5
    62a8:	002af700 	eoreq	pc, sl, r0, lsl #14
    62ac:	00000000 	andeq	r0, r0, r0
    62b0:	0003fb22 	andeq	pc, r3, r2, lsr #22
    62b4:	0024a200 	eoreq	sl, r4, r0, lsl #4
    62b8:	00079808 	andeq	r9, r7, r8, lsl #16
    62bc:	04f30100 	ldrbteq	r0, [r3], #256	; 0x100
    62c0:	24000007 	strcs	r0, [r0], #-7
    62c4:	00000419 	andeq	r0, r0, r9, lsl r4
    62c8:	00041024 	andeq	r1, r4, r4, lsr #32
    62cc:	04072400 	streq	r2, [r7], #-1024	; 0x400
    62d0:	98190000 	ldmdals	r9, {}	; <UNPREDICTABLE>
    62d4:	10000007 	andne	r0, r0, r7
    62d8:	00000422 	andeq	r0, r0, r2, lsr #8
    62dc:	00002b71 	andeq	r2, r0, r1, ror fp
    62e0:	00042b10 	andeq	r2, r4, r0, lsl fp
    62e4:	002b9b00 	eoreq	r9, fp, r0, lsl #22
    62e8:	07b01900 	ldreq	r1, [r0, r0, lsl #18]!
    62ec:	35100000 	ldrcc	r0, [r0, #-0]
    62f0:	fc000004 	stc2	0, cr0, [r0], {4}
    62f4:	0000002b 	andeq	r0, r0, fp, lsr #32
    62f8:	fb250000 	blx	946302 <__Stack_Size+0x945b02>
    62fc:	30000003 	andcc	r0, r0, r3
    6300:	76080025 	strvc	r0, [r8], -r5, lsr #32
    6304:	01000000 	mrseq	r0, (UNDEF: 0)
    6308:	000756f4 	strdeq	r5, [r7], -r4
    630c:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    6310:	10240000 	eorne	r0, r4, r0
    6314:	24000004 	strcs	r0, [r0], #-4
    6318:	00000407 	andeq	r0, r0, r7, lsl #8
    631c:	00253020 	eoreq	r3, r5, r0, lsr #32
    6320:	00007608 	andeq	r7, r0, r8, lsl #12
    6324:	04221000 	strteq	r1, [r2], #-0
    6328:	2c4b0000 	marcs	acc0, r0, fp
    632c:	2b100000 	blcs	406334 <__Stack_Size+0x405b34>
    6330:	69000004 	stmdbvs	r0, {r2}
    6334:	2000002c 	andcs	r0, r0, ip, lsr #32
    6338:	08002530 	stmdaeq	r0, {r4, r5, r8, sl, sp}
    633c:	00000048 	andeq	r0, r0, r8, asr #32
    6340:	00043510 	andeq	r3, r4, r0, lsl r5
    6344:	002cab00 	eoreq	sl, ip, r0, lsl #22
    6348:	00000000 	andeq	r0, r0, r0
    634c:	0003fb25 	andeq	pc, r3, r5, lsr #22
    6350:	0025b000 	eoreq	fp, r5, r0
    6354:	00008808 	andeq	r8, r0, r8, lsl #16
    6358:	a8f80100 	ldmge	r8!, {r8}^
    635c:	24000007 	strcs	r0, [r0], #-7
    6360:	00000419 	andeq	r0, r0, r9, lsl r4
    6364:	00041024 	andeq	r1, r4, r4, lsr #32
    6368:	04072400 	streq	r2, [r7], #-1024	; 0x400
    636c:	b0200000 	eorlt	r0, r0, r0
    6370:	88080025 	stmdahi	r8, {r0, r2, r5}
    6374:	10000000 	andne	r0, r0, r0
    6378:	00000422 	andeq	r0, r0, r2, lsr #8
    637c:	00002d25 	andeq	r2, r0, r5, lsr #26
    6380:	00042b10 	andeq	r2, r4, r0, lsl fp
    6384:	002d4300 	eoreq	r4, sp, r0, lsl #6
    6388:	25b02000 	ldrcs	r2, [r0, #0]!
    638c:	004a0800 	subeq	r0, sl, r0, lsl #16
    6390:	35100000 	ldrcc	r0, [r0, #-0]
    6394:	98000004 	stmdals	r0, {r2}
    6398:	0000002d 	andeq	r0, r0, sp, lsr #32
    639c:	fb250000 	blx	9463a6 <__Stack_Size+0x945ba6>
    63a0:	38000003 	stmdacc	r0, {r0, r1}
    63a4:	74080026 	strvc	r0, [r8], #-38	; 0x26
    63a8:	01000000 	mrseq	r0, (UNDEF: 0)
    63ac:	0007fafb 	strdeq	pc, [r7], -fp
    63b0:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    63b4:	10240000 	eorne	r0, r4, r0
    63b8:	24000004 	strcs	r0, [r0], #-4
    63bc:	00000407 	andeq	r0, r0, r7, lsl #8
    63c0:	00263820 	eoreq	r3, r6, r0, lsr #16
    63c4:	00007408 	andeq	r7, r0, r8, lsl #8
    63c8:	04221000 	strteq	r1, [r2], #-0
    63cc:	2de70000 	stclcs	0, cr0, [r7]
    63d0:	2b100000 	blcs	4063d8 <__Stack_Size+0x405bd8>
    63d4:	05000004 	streq	r0, [r0, #-4]
    63d8:	2000002e 	andcs	r0, r0, lr, lsr #32
    63dc:	08002638 	stmdaeq	r0, {r3, r4, r5, r9, sl, sp}
    63e0:	00000046 	andeq	r0, r0, r6, asr #32
    63e4:	00043510 	andeq	r3, r4, r0, lsl r5
    63e8:	002e4700 	eoreq	r4, lr, r0, lsl #14
    63ec:	00000000 	andeq	r0, r0, r0
    63f0:	0003fb25 	andeq	pc, r3, r5, lsr #22
    63f4:	0026ac00 	eoreq	sl, r6, r0, lsl #24
    63f8:	00008208 	andeq	r8, r0, r8, lsl #4
    63fc:	4cfc0100 	ldfmie	f0, [ip]
    6400:	24000008 	strcs	r0, [r0], #-8
    6404:	00000419 	andeq	r0, r0, r9, lsl r4
    6408:	00041024 	andeq	r1, r4, r4, lsr #32
    640c:	04072400 	streq	r2, [r7], #-1024	; 0x400
    6410:	ac200000 	stcge	0, cr0, [r0], #-0
    6414:	82080026 	andhi	r0, r8, #38	; 0x26
    6418:	10000000 	andne	r0, r0, r0
    641c:	00000422 	andeq	r0, r0, r2, lsr #8
    6420:	00002ec1 	andeq	r2, r0, r1, asr #29
    6424:	00042b10 	andeq	r2, r4, r0, lsl fp
    6428:	002edf00 	eoreq	sp, lr, r0, lsl #30
    642c:	26ac2000 	strtcs	r2, [ip], r0
    6430:	00480800 	subeq	r0, r8, r0, lsl #16
    6434:	35100000 	ldrcc	r0, [r0, #-0]
    6438:	34000004 	strcc	r0, [r0], #-4
    643c:	0000002f 	andeq	r0, r0, pc, lsr #32
    6440:	fb250000 	blx	94644a <__Stack_Size+0x945c4a>
    6444:	2e000003 	cdpcs	0, 0, cr0, cr0, cr3, {0}
    6448:	74080027 	strvc	r0, [r8], #-39	; 0x27
    644c:	01000000 	mrseq	r0, (UNDEF: 0)
    6450:	00089eff 	strdeq	r9, [r8], -pc	; <UNPREDICTABLE>
    6454:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    6458:	10240000 	eorne	r0, r4, r0
    645c:	24000004 	strcs	r0, [r0], #-4
    6460:	00000407 	andeq	r0, r0, r7, lsl #8
    6464:	00272e20 	eoreq	r2, r7, r0, lsr #28
    6468:	00007408 	andeq	r7, r0, r8, lsl #8
    646c:	04221000 	strteq	r1, [r2], #-0
    6470:	2f830000 	svccs	0x00830000
    6474:	2b100000 	blcs	40647c <__Stack_Size+0x405c7c>
    6478:	a1000004 	tstge	r0, r4
    647c:	2000002f 	andcs	r0, r0, pc, lsr #32
    6480:	0800272e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, sl, sp}
    6484:	00000046 	andeq	r0, r0, r6, asr #32
    6488:	00043510 	andeq	r3, r4, r0, lsl r5
    648c:	002fe300 	eoreq	lr, pc, r0, lsl #6
    6490:	00000000 	andeq	r0, r0, r0
    6494:	0003fb26 	andeq	pc, r3, r6, lsr #22
    6498:	0027a200 	eoreq	sl, r7, r0, lsl #4
    649c:	00008208 	andeq	r8, r0, r8, lsl #4
    64a0:	01020100 	mrseq	r0, (UNDEF: 18)
    64a4:	000008f1 	strdeq	r0, [r0], -r1
    64a8:	00041924 	andeq	r1, r4, r4, lsr #18
    64ac:	04102400 	ldreq	r2, [r0], #-1024	; 0x400
    64b0:	07240000 	streq	r0, [r4, -r0]!
    64b4:	20000004 	andcs	r0, r0, r4
    64b8:	080027a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, sp}
    64bc:	00000082 	andeq	r0, r0, r2, lsl #1
    64c0:	00042210 	andeq	r2, r4, r0, lsl r2
    64c4:	00305d00 	eorseq	r5, r0, r0, lsl #26
    64c8:	042b1000 	strteq	r1, [fp], #-0
    64cc:	307b0000 	rsbscc	r0, fp, r0
    64d0:	a2200000 	eorge	r0, r0, #0
    64d4:	48080027 	stmdami	r8, {r0, r1, r2, r5}
    64d8:	10000000 	andne	r0, r0, r0
    64dc:	00000435 	andeq	r0, r0, r5, lsr r4
    64e0:	000030d0 	ldrdeq	r3, [r0], -r0
    64e4:	26000000 	strcs	r0, [r0], -r0
    64e8:	000003fb 	strdeq	r0, [r0], -fp
    64ec:	08002824 	stmdaeq	r0, {r2, r5, fp, sp}
    64f0:	00000072 	andeq	r0, r0, r2, ror r0
    64f4:	44010301 	strmi	r0, [r1], #-769	; 0x301
    64f8:	24000009 	strcs	r0, [r0], #-9
    64fc:	00000419 	andeq	r0, r0, r9, lsl r4
    6500:	00041024 	andeq	r1, r4, r4, lsr #32
    6504:	04072400 	streq	r2, [r7], #-1024	; 0x400
    6508:	24200000 	strtcs	r0, [r0], #-0
    650c:	72080028 	andvc	r0, r8, #40	; 0x28
    6510:	10000000 	andne	r0, r0, r0
    6514:	00000422 	andeq	r0, r0, r2, lsr #8
    6518:	0000311f 	andeq	r3, r0, pc, lsl r1
    651c:	00042b10 	andeq	r2, r4, r0, lsl fp
    6520:	00313d00 	eorseq	r3, r1, r0, lsl #26
    6524:	28242000 	stmdacs	r4!, {sp}
    6528:	00440800 	subeq	r0, r4, r0, lsl #16
    652c:	35100000 	ldrcc	r0, [r0, #-0]
    6530:	7f000004 	svcvc	0x00000004
    6534:	00000031 	andeq	r0, r0, r1, lsr r0
    6538:	fb260000 	blx	986542 <__Stack_Size+0x985d42>
    653c:	96000003 	strls	r0, [r0], -r3
    6540:	82080028 	andhi	r0, r8, #40	; 0x28
    6544:	01000000 	mrseq	r0, (UNDEF: 0)
    6548:	09970106 	ldmibeq	r7, {r1, r2, r8}
    654c:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    6550:	24000004 	strcs	r0, [r0], #-4
    6554:	00000410 	andeq	r0, r0, r0, lsl r4
    6558:	00040724 	andeq	r0, r4, r4, lsr #14
    655c:	28962000 	ldmcs	r6, {sp}
    6560:	00820800 	addeq	r0, r2, r0, lsl #16
    6564:	22100000 	andscs	r0, r0, #0
    6568:	f9000004 			; <UNDEFINED> instruction: 0xf9000004
    656c:	10000031 	andne	r0, r0, r1, lsr r0
    6570:	0000042b 	andeq	r0, r0, fp, lsr #8
    6574:	00003217 	andeq	r3, r0, r7, lsl r2
    6578:	00289620 	eoreq	r9, r8, r0, lsr #12
    657c:	00004808 	andeq	r4, r0, r8, lsl #16
    6580:	04351000 	ldrteq	r1, [r5], #-0
    6584:	326c0000 	rsbcc	r0, ip, #0
    6588:	00000000 	andeq	r0, r0, r0
    658c:	03fb2700 	mvnseq	r2, #0, 14
    6590:	29180000 	ldmdbcs	r8, {}	; <UNPREDICTABLE>
    6594:	006e0800 	rsbeq	r0, lr, r0, lsl #16
    6598:	07010000 	streq	r0, [r1, -r0]
    659c:	04192401 	ldreq	r2, [r9], #-1025	; 0x401
    65a0:	10240000 	eorne	r0, r4, r0
    65a4:	24000004 	strcs	r0, [r0], #-4
    65a8:	00000407 	andeq	r0, r0, r7, lsl #8
    65ac:	00291820 	eoreq	r1, r9, r0, lsr #16
    65b0:	00006e08 	andeq	r6, r0, r8, lsl #28
    65b4:	04221000 	strteq	r1, [r2], #-0
    65b8:	32bb0000 	adcscc	r0, fp, #0
    65bc:	2b100000 	blcs	4065c4 <__Stack_Size+0x405dc4>
    65c0:	d9000004 	stmdble	r0, {r2}
    65c4:	20000032 	andcs	r0, r0, r2, lsr r0
    65c8:	08002918 	stmdaeq	r0, {r3, r4, r8, fp, sp}
    65cc:	00000044 	andeq	r0, r0, r4, asr #32
    65d0:	00043510 	andeq	r3, r4, r0, lsl r5
    65d4:	00331b00 	eorseq	r1, r3, r0, lsl #22
    65d8:	00000000 	andeq	r0, r0, r0
    65dc:	17792800 	ldrbne	r2, [r9, -r0, lsl #16]!
    65e0:	0a010000 	beq	465e8 <__Stack_Size+0x45de8>
    65e4:	00000001 	andeq	r0, r0, r1
    65e8:	00002600 	andeq	r2, r0, r0, lsl #12
    65ec:	659c0100 	ldrvs	r0, [ip, #256]	; 0x100
    65f0:	2900000a 	stmdbcs	r0, {r1, r3}
    65f4:	0a010072 	beq	467c4 <__Stack_Size+0x45fc4>
    65f8:	00010a01 	andeq	r0, r1, r1, lsl #20
    65fc:	00339500 	eorseq	r9, r3, r0, lsl #10
    6600:	00782900 	rsbseq	r2, r8, r0, lsl #18
    6604:	10010a01 	andne	r0, r1, r1, lsl #20
    6608:	b3000001 	movwlt	r0, #1
    660c:	2a000033 	bcs	66e0 <__Stack_Size+0x5ee0>
    6610:	00706d74 	rsbseq	r6, r0, r4, ror sp
    6614:	3d010c01 	stccc	12, cr0, [r1, #-4]
    6618:	02000002 	andeq	r0, r0, #2
    661c:	1b265091 	blne	99a868 <__Stack_Size+0x99a068>
    6620:	00000001 	andeq	r0, r0, r1
    6624:	16000000 	strne	r0, [r0], -r0
    6628:	01000000 	mrseq	r0, (UNDEF: 0)
    662c:	0a4d010f 	beq	1346a70 <__Stack_Size+0x1346270>
    6630:	300f0000 	andcc	r0, pc, r0
    6634:	d4000001 	strle	r0, [r0], #-1
    6638:	18000033 	stmdane	r0, {r0, r1, r4, r5}
    663c:	00000127 	andeq	r0, r0, r7, lsr #2
    6640:	2b005501 	blcs	1ba4c <__Stack_Size+0x1b24c>
    6644:	00000000 	andeq	r0, r0, r0
    6648:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    664c:	03510112 	cmpeq	r1, #-2147483644	; 0x80000004
    6650:	125101f3 	subsne	r0, r1, #-1073741764	; 0xc000003c
    6654:	7d025001 	stcvc	0, cr5, [r2, #-4]
    6658:	2c000000 	stccs	0, cr0, [r0], {-0}
    665c:	00001762 	andeq	r1, r0, r2, ror #14
    6660:	01011501 	tsteq	r1, r1, lsl #10
    6664:	00000a9b 	muleq	r0, fp, sl
    6668:	0100722d 	tsteq	r0, sp, lsr #4
    666c:	010a0115 	tsteq	sl, r5, lsl r1
    6670:	782d0000 	stmdavc	sp!, {}	; <UNPREDICTABLE>
    6674:	01150100 	tsteq	r5, r0, lsl #2
    6678:	00000110 	andeq	r0, r0, r0, lsl r1
    667c:	0100732d 	tsteq	r0, sp, lsr #6
    6680:	010a0115 	tsteq	sl, r5, lsl r1
    6684:	692e0000 	stmdbvs	lr!, {}	; <UNPREDICTABLE>
    6688:	01170100 	tsteq	r7, r0, lsl #2
    668c:	0000007e 	andeq	r0, r0, lr, ror r0
    6690:	15ca2800 	strbne	r2, [sl, #2048]	; 0x800
    6694:	30010000 	andcc	r0, r1, r0
    6698:	00299001 	eoreq	r9, r9, r1
    669c:	00063408 	andeq	r3, r6, r8, lsl #8
    66a0:	619c0100 	orrsvs	r0, ip, r0, lsl #2
    66a4:	2900000f 	stmdbcs	r0, {r0, r1, r2, r3}
    66a8:	30010072 	andcc	r0, r1, r2, ror r0
    66ac:	00010a01 	andeq	r0, r1, r1, lsl #20
    66b0:	0033f400 	eorseq	pc, r3, r0, lsl #8
    66b4:	00612900 	rsbeq	r2, r1, r0, lsl #18
    66b8:	10013001 	andne	r3, r1, r1
    66bc:	21000001 	tstcs	r0, r1
    66c0:	2a000034 	bcs	6798 <__Stack_Size+0x5f98>
    66c4:	32010076 	andcc	r0, r1, #118	; 0x76
    66c8:	00023d01 	andeq	r3, r2, r1, lsl #26
    66cc:	e0910300 	adds	r0, r1, r0, lsl #6
    66d0:	00692a7e 	rsbeq	r2, r9, lr, ror sl
    66d4:	3d013301 	stccc	3, cr3, [r1, #-4]
    66d8:	03000002 	movweq	r0, #2
    66dc:	2a7f8091 	bcs	1fe6928 <__Stack_Size+0x1fe6128>
    66e0:	34010078 	strcc	r0, [r1], #-120	; 0x78
    66e4:	00023d01 	andeq	r3, r2, r1, lsl #26
    66e8:	a0910300 	addsge	r0, r1, r0, lsl #6
    66ec:	00792a7f 	rsbseq	r2, r9, pc, ror sl
    66f0:	3d013501 	cfstr32cc	mvfx3, [r1, #-4]
    66f4:	02000002 	andeq	r0, r0, #2
    66f8:	592f4091 	stmdbpl	pc!, {r0, r4, r7, lr}	; <UNPREDICTABLE>
    66fc:	94000005 	strls	r0, [r0], #-5
    6700:	c8080029 	stmdagt	r8, {r0, r3, r5}
    6704:	01000007 	tsteq	r0, r7
    6708:	0b490138 	bleq	1246bf0 <__Stack_Size+0x12463f0>
    670c:	77300000 	ldrvc	r0, [r0, -r0]!
    6710:	02000005 	andeq	r0, r0, #5
    6714:	00056e0f 	andeq	r6, r5, pc, lsl #28
    6718:	00345900 	eorseq	r5, r4, r0, lsl #18
    671c:	05650f00 	strbeq	r0, [r5, #-3840]!	; 0xf00
    6720:	34910000 	ldrcc	r0, [r1], #0
    6724:	c8190000 	ldmdagt	r9, {}	; <UNPREDICTABLE>
    6728:	10000007 	andne	r0, r0, r7
    672c:	00000580 	andeq	r0, r0, r0, lsl #11
    6730:	000034c0 	andeq	r3, r0, r0, asr #9
    6734:	00058910 	andeq	r8, r5, r0, lsl r9
    6738:	0034ee00 	eorseq	lr, r4, r0, lsl #28
    673c:	26000000 	strcs	r0, [r0], -r0
    6740:	00000a65 	andeq	r0, r0, r5, ror #20
    6744:	080029e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp, sp}
    6748:	00000394 	muleq	r0, r4, r3
    674c:	b1013901 	tstlt	r1, r1, lsl #18
    6750:	2400000d 	strcs	r0, [r0], #-13
    6754:	00000a86 	andeq	r0, r0, r6, lsl #21
    6758:	000a7c24 	andeq	r7, sl, r4, lsr #24
    675c:	0a722400 	beq	1c8f764 <__Stack_Size+0x1c8ef64>
    6760:	e4200000 	strt	r0, [r0], #-0
    6764:	94080029 	strls	r0, [r8], #-41	; 0x29
    6768:	31000003 	tstcc	r0, r3
    676c:	00000a90 	muleq	r0, r0, sl
    6770:	0003fb26 	andeq	pc, r3, r6, lsr #22
    6774:	0029e400 	eoreq	lr, r9, r0, lsl #8
    6778:	00007a08 	andeq	r7, r0, r8, lsl #20
    677c:	011f0100 	tsteq	pc, r0, lsl #2
    6780:	00000bcd 	andeq	r0, r0, sp, asr #23
    6784:	00041924 	andeq	r1, r4, r4, lsr #18
    6788:	04102400 	ldreq	r2, [r0], #-1024	; 0x400
    678c:	07240000 	streq	r0, [r4, -r0]!
    6790:	20000004 	andcs	r0, r0, r4
    6794:	080029e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp, sp}
    6798:	0000007a 	andeq	r0, r0, sl, ror r0
    679c:	00042210 	andeq	r2, r4, r0, lsl r2
    67a0:	00354f00 	eorseq	r4, r5, r0, lsl #30
    67a4:	042b1000 	strteq	r1, [fp], #-0
    67a8:	356d0000 	strbcc	r0, [sp, #-0]!
    67ac:	e4200000 	strt	r0, [r0], #-0
    67b0:	42080029 	andmi	r0, r8, #41	; 0x29
    67b4:	10000000 	andne	r0, r0, r0
    67b8:	00000435 	andeq	r0, r0, r5, lsr r4
    67bc:	000035c5 	andeq	r3, r0, r5, asr #11
    67c0:	2f000000 	svccs	0x00000000
    67c4:	000003fb 	strdeq	r0, [r0], -fp
    67c8:	08002a5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, fp, sp}
    67cc:	000007e0 	andeq	r0, r0, r0, ror #15
    67d0:	1c012001 	stcne	0, cr2, [r1], {1}
    67d4:	2400000c 	strcs	r0, [r0], #-12
    67d8:	00000419 	andeq	r0, r0, r9, lsl r4
    67dc:	00041024 	andeq	r1, r4, r4, lsr #32
    67e0:	04072400 	streq	r2, [r7], #-1024	; 0x400
    67e4:	e0190000 	ands	r0, r9, r0
    67e8:	10000007 	andne	r0, r0, r7
    67ec:	00000422 	andeq	r0, r0, r2, lsr #8
    67f0:	0000363f 	andeq	r3, r0, pc, lsr r6
    67f4:	00042b10 	andeq	r2, r4, r0, lsl fp
    67f8:	00365d00 	eorseq	r5, r6, r0, lsl #26
    67fc:	2a5e2000 	bcs	178e804 <__Stack_Size+0x178e004>
    6800:	00440800 	subeq	r0, r4, r0, lsl #16
    6804:	35100000 	ldrcc	r0, [r0, #-0]
    6808:	b2000004 	andlt	r0, r0, #4
    680c:	00000036 	andeq	r0, r0, r6, lsr r0
    6810:	fb2f0000 	blx	bc681a <__Stack_Size+0xbc601a>
    6814:	e2000003 	and	r0, r0, #3
    6818:	f808002a 			; <UNDEFINED> instruction: 0xf808002a
    681c:	01000007 	tsteq	r0, r7
    6820:	0c670124 	stfeqe	f0, [r7], #-144	; 0xffffff70
    6824:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    6828:	24000004 	strcs	r0, [r0], #-4
    682c:	00000410 	andeq	r0, r0, r0, lsl r4
    6830:	00040724 	andeq	r0, r4, r4, lsr #14
    6834:	07f81900 	ldrbeq	r1, [r8, r0, lsl #18]!
    6838:	22100000 	andscs	r0, r0, #0
    683c:	2f000004 	svccs	0x00000004
    6840:	10000037 	andne	r0, r0, r7, lsr r0
    6844:	0000042b 	andeq	r0, r0, fp, lsr #8
    6848:	00003759 	andeq	r3, r0, r9, asr r7
    684c:	00081019 	andeq	r1, r8, r9, lsl r0
    6850:	04351000 	ldrteq	r1, [r5], #-0
    6854:	37bd0000 	ldrcc	r0, [sp, r0]!
    6858:	00000000 	andeq	r0, r0, r0
    685c:	03fb2600 	mvnseq	r2, #0, 12
    6860:	2b720000 	blcs	1c86868 <__Stack_Size+0x1c86068>
    6864:	00820800 	addeq	r0, r2, r0, lsl #16
    6868:	25010000 	strcs	r0, [r1, #-0]
    686c:	000cba01 	andeq	fp, ip, r1, lsl #20
    6870:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    6874:	10240000 	eorne	r0, r4, r0
    6878:	24000004 	strcs	r0, [r0], #-4
    687c:	00000407 	andeq	r0, r0, r7, lsl #8
    6880:	002b7220 	eoreq	r7, fp, r0, lsr #4
    6884:	00008208 	andeq	r8, r0, r8, lsl #4
    6888:	04221000 	strteq	r1, [r2], #-0
    688c:	38370000 	ldmdacc	r7!, {}	; <UNPREDICTABLE>
    6890:	2b100000 	blcs	406898 <__Stack_Size+0x406098>
    6894:	55000004 	strpl	r0, [r0, #-4]
    6898:	20000038 	andcs	r0, r0, r8, lsr r0
    689c:	08002b72 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, fp, sp}
    68a0:	0000004a 	andeq	r0, r0, sl, asr #32
    68a4:	00043510 	andeq	r3, r4, r0, lsl r5
    68a8:	0038aa00 	eorseq	sl, r8, r0, lsl #20
    68ac:	00000000 	andeq	r0, r0, r0
    68b0:	0003fb26 	andeq	pc, r3, r6, lsr #22
    68b4:	002c0600 	eoreq	r0, ip, r0, lsl #12
    68b8:	00007c08 	andeq	r7, r0, r8, lsl #24
    68bc:	01290100 	teqeq	r9, r0, lsl #2
    68c0:	00000d0d 	andeq	r0, r0, sp, lsl #26
    68c4:	00041924 	andeq	r1, r4, r4, lsr #18
    68c8:	04102400 	ldreq	r2, [r0], #-1024	; 0x400
    68cc:	07240000 	streq	r0, [r4, -r0]!
    68d0:	20000004 	andcs	r0, r0, r4
    68d4:	08002c06 	stmdaeq	r0, {r1, r2, sl, fp, sp}
    68d8:	0000007c 	andeq	r0, r0, ip, ror r0
    68dc:	00042210 	andeq	r2, r4, r0, lsl r2
    68e0:	00392700 	eorseq	r2, r9, r0, lsl #14
    68e4:	042b1000 	strteq	r1, [fp], #-0
    68e8:	39450000 	stmdbcc	r5, {}^	; <UNPREDICTABLE>
    68ec:	06200000 	strteq	r0, [r0], -r0
    68f0:	4608002c 	strmi	r0, [r8], -ip, lsr #32
    68f4:	10000000 	andne	r0, r0, r0
    68f8:	00000435 	andeq	r0, r0, r5, lsr r4
    68fc:	0000399d 	muleq	r0, sp, r9
    6900:	26000000 	strcs	r0, [r0], -r0
    6904:	000003fb 	strdeq	r0, [r0], -fp
    6908:	08002c82 	stmdaeq	r0, {r1, r7, sl, fp, sp}
    690c:	0000007e 	andeq	r0, r0, lr, ror r0
    6910:	60012c01 	andvs	r2, r1, r1, lsl #24
    6914:	2400000d 	strcs	r0, [r0], #-13
    6918:	00000419 	andeq	r0, r0, r9, lsl r4
    691c:	00041024 	andeq	r1, r4, r4, lsr #32
    6920:	04072400 	streq	r2, [r7], #-1024	; 0x400
    6924:	82200000 	eorhi	r0, r0, #0
    6928:	7e08002c 	cdpvc	0, 0, cr0, cr8, cr12, {1}
    692c:	10000000 	andne	r0, r0, r0
    6930:	00000422 	andeq	r0, r0, r2, lsr #8
    6934:	00003a17 	andeq	r3, r0, r7, lsl sl
    6938:	00042b10 	andeq	r2, r4, r0, lsl fp
    693c:	003a3500 	eorseq	r3, sl, r0, lsl #10
    6940:	2c822000 	stccs	0, cr2, [r2], {0}
    6944:	00460800 	subeq	r0, r6, r0, lsl #16
    6948:	35100000 	ldrcc	r0, [r0, #-0]
    694c:	8a000004 	bhi	6964 <__Stack_Size+0x6164>
    6950:	0000003a 	andeq	r0, r0, sl, lsr r0
    6954:	fb270000 	blx	9c695e <__Stack_Size+0x9c615e>
    6958:	00000003 	andeq	r0, r0, r3
    695c:	7808002d 	stmdavc	r8, {r0, r2, r3, r5}
    6960:	01000000 	mrseq	r0, (UNDEF: 0)
    6964:	1924012d 	stmdbne	r4!, {r0, r2, r3, r5, r8}
    6968:	24000004 	strcs	r0, [r0], #-4
    696c:	00000410 	andeq	r0, r0, r0, lsl r4
    6970:	00040724 	andeq	r0, r4, r4, lsr #14
    6974:	2d002000 	stccs	0, cr2, [r0, #-0]
    6978:	00780800 	rsbseq	r0, r8, r0, lsl #16
    697c:	22100000 	andscs	r0, r0, #0
    6980:	07000004 	streq	r0, [r0, -r4]
    6984:	1000003b 	andne	r0, r0, fp, lsr r0
    6988:	0000042b 	andeq	r0, r0, fp, lsr #8
    698c:	00003b25 	andeq	r3, r0, r5, lsr #22
    6990:	002d0020 	eoreq	r0, sp, r0, lsr #32
    6994:	00004208 	andeq	r4, r0, r8, lsl #4
    6998:	04351000 	ldrteq	r1, [r5], #-0
    699c:	3b7d0000 	blcc	1f469a4 <__Stack_Size+0x1f461a4>
    69a0:	00000000 	andeq	r0, r0, r0
    69a4:	26000000 	strcs	r0, [r0], -r0
    69a8:	000003fb 	strdeq	r0, [r0], -fp
    69ac:	08002d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, sp}
    69b0:	00000080 	andeq	r0, r0, r0, lsl #1
    69b4:	04013c01 	streq	r3, [r1], #-3073	; 0xc01
    69b8:	2400000e 	strcs	r0, [r0], #-14
    69bc:	00000419 	andeq	r0, r0, r9, lsl r4
    69c0:	00041024 	andeq	r1, r4, r4, lsr #32
    69c4:	04072400 	streq	r2, [r7], #-1024	; 0x400
    69c8:	78200000 	stmdavc	r0!, {}	; <UNPREDICTABLE>
    69cc:	8008002d 	andhi	r0, r8, sp, lsr #32
    69d0:	10000000 	andne	r0, r0, r0
    69d4:	00000422 	andeq	r0, r0, r2, lsr #8
    69d8:	00003bf7 	strdeq	r3, [r0], -r7
    69dc:	00042b10 	andeq	r2, r4, r0, lsl fp
    69e0:	003c1500 	eorseq	r1, ip, r0, lsl #10
    69e4:	2d782000 	ldclcs	0, cr2, [r8, #-0]
    69e8:	00460800 	subeq	r0, r6, r0, lsl #16
    69ec:	35100000 	ldrcc	r0, [r0, #-0]
    69f0:	6a000004 	bvs	6a08 <__Stack_Size+0x6208>
    69f4:	0000003c 	andeq	r0, r0, ip, lsr r0
    69f8:	fb260000 	blx	986a02 <__Stack_Size+0x986202>
    69fc:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
    6a00:	7008002d 	andvc	r0, r8, sp, lsr #32
    6a04:	01000000 	mrseq	r0, (UNDEF: 0)
    6a08:	0e57013d 	mrceq	1, 2, r0, cr7, cr13, {1}
    6a0c:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    6a10:	24000004 	strcs	r0, [r0], #-4
    6a14:	00000410 	andeq	r0, r0, r0, lsl r4
    6a18:	00040724 	andeq	r0, r4, r4, lsr #14
    6a1c:	2df82000 	ldclcs	0, cr2, [r8]
    6a20:	00700800 	rsbseq	r0, r0, r0, lsl #16
    6a24:	22100000 	andscs	r0, r0, #0
    6a28:	e7000004 	str	r0, [r0, -r4]
    6a2c:	1000003c 	andne	r0, r0, ip, lsr r0
    6a30:	0000042b 	andeq	r0, r0, fp, lsr #8
    6a34:	00003d05 	andeq	r3, r0, r5, lsl #26
    6a38:	002df820 	eoreq	pc, sp, r0, lsr #16
    6a3c:	00004008 	andeq	r4, r0, r8
    6a40:	04351000 	ldrteq	r1, [r5], #-0
    6a44:	3d5c0000 	ldclcc	0, cr0, [ip, #-0]
    6a48:	00000000 	andeq	r0, r0, r0
    6a4c:	013a2600 	teqeq	sl, r0, lsl #12
    6a50:	2e680000 	cdpcs	0, 6, cr0, cr8, cr0, {0}
    6a54:	00140800 	andseq	r0, r4, r0, lsl #16
    6a58:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    6a5c:	000e8a01 	andeq	r8, lr, r1, lsl #20
    6a60:	014f3000 	mrseq	r3, SPSR
    6a64:	24000000 	strcs	r0, [r0], #-0
    6a68:	00000146 	andeq	r0, r0, r6, asr #2
    6a6c:	002e6820 	eoreq	r6, lr, r0, lsr #16
    6a70:	00001408 	andeq	r1, r0, r8, lsl #8
    6a74:	01581000 	cmpeq	r8, r0
    6a78:	3dd60000 	ldclcc	0, cr0, [r6]
    6a7c:	00000000 	andeq	r0, r0, r0
    6a80:	00033a2f 	andeq	r3, r3, pc, lsr #20
    6a84:	002e7c00 	eoreq	r7, lr, r0, lsl #24
    6a88:	00082808 	andeq	r2, r8, r8, lsl #16
    6a8c:	013f0100 	teqeq	pc, r0, lsl #2
    6a90:	00000ec6 	andeq	r0, r0, r6, asr #29
    6a94:	00035824 	andeq	r5, r3, r4, lsr #16
    6a98:	034f2400 	movteq	r2, #62464	; 0xf400
    6a9c:	46240000 	strtmi	r0, [r4], -r0
    6aa0:	19000003 	stmdbne	r0, {r0, r1}
    6aa4:	00000828 	andeq	r0, r0, r8, lsr #16
    6aa8:	00036110 	andeq	r6, r3, r0, lsl r1
    6aac:	003df600 	eorseq	pc, sp, r0, lsl #12
    6ab0:	036a1000 	cmneq	sl, #0
    6ab4:	3e1f0000 	cdpcc	0, 1, cr0, cr15, cr0, {0}
    6ab8:	00000000 	andeq	r0, r0, r0
    6abc:	0003fb2f 	andeq	pc, r3, pc, lsr #22
    6ac0:	002ec600 	eoreq	ip, lr, r0, lsl #12
    6ac4:	00084008 	andeq	r4, r8, r8
    6ac8:	01420100 	mrseq	r0, (UNDEF: 82)
    6acc:	00000f11 	andeq	r0, r0, r1, lsl pc
    6ad0:	00041924 	andeq	r1, r4, r4, lsr #18
    6ad4:	04102400 	ldreq	r2, [r0], #-1024	; 0x400
    6ad8:	07240000 	streq	r0, [r4, -r0]!
    6adc:	19000004 	stmdbne	r0, {r2}
    6ae0:	00000840 	andeq	r0, r0, r0, asr #16
    6ae4:	00042210 	andeq	r2, r4, r0, lsl r2
    6ae8:	003e8200 	eorseq	r8, lr, r0, lsl #4
    6aec:	042b1000 	strteq	r1, [fp], #-0
    6af0:	3ea00000 	cdpcc	0, 10, cr0, cr0, cr0, {0}
    6af4:	58190000 	ldmdapl	r9, {}	; <UNPREDICTABLE>
    6af8:	10000008 	andne	r0, r0, r8
    6afc:	00000435 	andeq	r0, r0, r5, lsr r4
    6b00:	00003ef5 	strdeq	r3, [r0], -r5
    6b04:	27000000 	strcs	r0, [r0, -r0]
    6b08:	000003fb 	strdeq	r0, [r0], -fp
    6b0c:	08002f4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, fp, sp}
    6b10:	00000070 	andeq	r0, r0, r0, ror r0
    6b14:	24014301 	strcs	r4, [r1], #-769	; 0x301
    6b18:	00000419 	andeq	r0, r0, r9, lsl r4
    6b1c:	00041024 	andeq	r1, r4, r4, lsr #32
    6b20:	04072400 	streq	r2, [r7], #-1024	; 0x400
    6b24:	4c200000 	stcmi	0, cr0, [r0], #-0
    6b28:	7008002f 	andvc	r0, r8, pc, lsr #32
    6b2c:	10000000 	andne	r0, r0, r0
    6b30:	00000422 	andeq	r0, r0, r2, lsr #8
    6b34:	00003f72 	andeq	r3, r0, r2, ror pc
    6b38:	00042b10 	andeq	r2, r4, r0, lsl fp
    6b3c:	003f9000 	eorseq	r9, pc, r0
    6b40:	2f4c2000 	svccs	0x004c2000
    6b44:	00420800 	subeq	r0, r2, r0, lsl #16
    6b48:	35100000 	ldrcc	r0, [r0, #-0]
    6b4c:	d2000004 	andle	r0, r0, #4
    6b50:	0000003f 	andeq	r0, r0, pc, lsr r0
    6b54:	32000000 	andcc	r0, r0, #0
    6b58:	00001756 	andeq	r1, r0, r6, asr r7
    6b5c:	0f720901 	svceq	0x00720901
    6b60:	03050000 	movweq	r0, #20480	; 0x5000
    6b64:	00000000 	andeq	r0, r0, r0
    6b68:	00023d0c 	andeq	r3, r2, ip, lsl #26
    6b6c:	14973200 	ldrne	r3, [r7], #512	; 0x200
    6b70:	0a010000 	beq	46b78 <__Stack_Size+0x46378>
    6b74:	00000f88 	andeq	r0, r0, r8, lsl #31
    6b78:	73800305 	orrvc	r0, r0, #335544320	; 0x14000000
    6b7c:	3d0c0800 	stccc	8, cr0, [ip, #-0]
    6b80:	33000002 	movwcc	r0, #2
    6b84:	000012d7 	ldrdeq	r1, [r0], -r7
    6b88:	000000b4 	strheq	r0, [r0], -r4
    6b8c:	0000b434 	andeq	fp, r0, r4, lsr r4
    6b90:	007e3400 	rsbseq	r3, lr, r0, lsl #8
    6b94:	ad340000 	ldcge	0, cr0, [r4, #-0]
    6b98:	00000000 	andeq	r0, r0, r0
    6b9c:	000d7000 	andeq	r7, sp, r0
    6ba0:	3c000400 	cfstrscc	mvf0, [r0], {-0}
    6ba4:	04000019 	streq	r0, [r0], #-25
    6ba8:	0006c001 	andeq	ip, r6, r1
    6bac:	18620100 	stmdane	r2!, {r8}^
    6bb0:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    6bb4:	0a480000 	beq	1206bbc <__Stack_Size+0x12063bc>
    6bb8:	00000000 	andeq	r0, r0, r0
    6bbc:	211f0000 	tstcs	pc, r0
    6bc0:	01020000 	mrseq	r0, (UNDEF: 2)
    6bc4:	00081a06 	andeq	r1, r8, r6, lsl #20
    6bc8:	0b0d0300 	bleq	3477d0 <__Stack_Size+0x346fd0>
    6bcc:	1c030000 	stcne	0, cr0, [r3], {-0}
    6bd0:	00000037 	andeq	r0, r0, r7, lsr r0
    6bd4:	18080102 	stmdane	r8, {r1, r8}
    6bd8:	02000008 	andeq	r0, r0, #8
    6bdc:	065e0502 	ldrbeq	r0, [lr], -r2, lsl #10
    6be0:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
    6be4:	0300000d 	movweq	r0, #13
    6be8:	00005026 	andeq	r5, r0, r6, lsr #32
    6bec:	07020200 	streq	r0, [r2, -r0, lsl #4]
    6bf0:	00000949 	andeq	r0, r0, r9, asr #18
    6bf4:	da050402 	ble	147c04 <__Stack_Size+0x147404>
    6bf8:	03000004 	movweq	r0, #4
    6bfc:	00000ada 	ldrdeq	r0, [r0], -sl
    6c00:	00693803 	rsbeq	r3, r9, r3, lsl #16
    6c04:	04020000 	streq	r0, [r2], #-0
    6c08:	00025207 	andeq	r5, r2, r7, lsl #4
    6c0c:	05080200 	streq	r0, [r8, #-512]	; 0x200
    6c10:	000004d5 	ldrdeq	r0, [r0], -r5
    6c14:	4d070802 	stcmi	8, cr0, [r7, #-8]
    6c18:	04000002 	streq	r0, [r0], #-2
    6c1c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    6c20:	04020074 	streq	r0, [r2], #-116	; 0x74
    6c24:	00025707 	andeq	r5, r2, r7, lsl #14
    6c28:	0b0f0300 	bleq	3c7830 <__Stack_Size+0x3c7030>
    6c2c:	2a040000 	bcs	106c34 <__Stack_Size+0x106434>
    6c30:	0000002c 	andeq	r0, r0, ip, lsr #32
    6c34:	000dba03 	andeq	fp, sp, r3, lsl #20
    6c38:	45360400 	ldrmi	r0, [r6, #-1024]!	; 0x400
    6c3c:	03000000 	movweq	r0, #0
    6c40:	00000adc 	ldrdeq	r0, [r0], -ip
    6c44:	005e4204 	subseq	r4, lr, r4, lsl #4
    6c48:	d3030000 	movwle	r0, #12288	; 0x3000
    6c4c:	0500000a 	streq	r0, [r0, #-10]
    6c50:	000085d4 	ldrdeq	r8, [r0], -r4
    6c54:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6c58:	0000078b 	andeq	r0, r0, fp, lsl #15
    6c5c:	01020405 	tsteq	r2, r5, lsl #8
    6c60:	00082108 	andeq	r2, r8, r8, lsl #2
    6c64:	17df0600 	ldrbne	r0, [pc, r0, lsl #12]
    6c68:	8f010000 	svchi	0x00010000
    6c6c:	00011501 	andeq	r1, r1, r1, lsl #10
    6c70:	73640700 	cmnvc	r4, #0, 14
    6c74:	8f010074 	svchi	0x00010074
    6c78:	00000115 	andeq	r0, r0, r5, lsl r1
    6c7c:	00175d08 	andseq	r5, r7, r8, lsl #26
    6c80:	1b900100 	blne	fe407088 <BootRAM+0xd377829>
    6c84:	07000001 	streq	r0, [r0, -r1]
    6c88:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    6c8c:	011b9001 	tsteq	fp, r1
    6c90:	8f080000 	svchi	0x00080000
    6c94:	01000017 	tsteq	r0, r7, lsl r0
    6c98:	00008c91 	muleq	r0, r1, ip
    6c9c:	0d270900 	stceq	9, cr0, [r7, #-0]
    6ca0:	93010000 	movwls	r0, #4096	; 0x1000
    6ca4:	00000121 	andeq	r0, r0, r1, lsr #2
    6ca8:	0100690a 	tsteq	r0, sl, lsl #18
    6cac:	00007e94 	muleq	r0, r4, lr
    6cb0:	040b0000 	streq	r0, [fp], #-0
    6cb4:	0000008c 	andeq	r0, r0, ip, lsl #1
    6cb8:	0121040b 	teqeq	r1, fp, lsl #8
    6cbc:	8c0c0000 	stchi	0, cr0, [ip], {-0}
    6cc0:	0d000000 	stceq	0, cr0, [r0, #-0]
    6cc4:	00001803 	andeq	r1, r0, r3, lsl #16
    6cc8:	007e5601 	rsbseq	r5, lr, r1, lsl #12
    6ccc:	49030000 	stmdbmi	r3, {}	; <UNPREDICTABLE>
    6cd0:	07000001 	streq	r0, [r0, -r1]
    6cd4:	56010061 	strpl	r0, [r1], -r1, rrx
    6cd8:	0000007e 	andeq	r0, r0, lr, ror r0
    6cdc:	01006207 	tsteq	r0, r7, lsl #4
    6ce0:	00007e56 	andeq	r7, r0, r6, asr lr
    6ce4:	d20e0000 	andle	r0, lr, #0
    6ce8:	01000017 	tsteq	r0, r7, lsl r0
    6cec:	017a013d 	cmneq	sl, sp, lsr r1
    6cf0:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
    6cf4:	153d0100 	ldrne	r0, [sp, #-256]!	; 0x100
    6cf8:	07000001 	streq	r0, [r0, -r1]
    6cfc:	3d01006e 	stccc	0, cr0, [r1, #-440]	; 0xfffffe48
    6d00:	0000007e 	andeq	r0, r0, lr, ror r0
    6d04:	0100630a 	tsteq	r0, sl, lsl #6
    6d08:	0000973f 	andeq	r9, r0, pc, lsr r7
    6d0c:	00690a00 	rsbeq	r0, r9, r0, lsl #20
    6d10:	007e4001 	rsbseq	r4, lr, r1
    6d14:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6d18:	00001856 	andeq	r1, r0, r6, asr r8
    6d1c:	99032602 	stmdbls	r3, {r1, r9, sl, sp}
    6d20:	07000001 	streq	r0, [r0, -r1]
    6d24:	26020078 			; <UNDEFINED> instruction: 0x26020078
    6d28:	00000115 	andeq	r0, r0, r5, lsl r1
    6d2c:	02006107 	andeq	r6, r0, #-1073741823	; 0xc0000001
    6d30:	00011b26 	andeq	r1, r1, r6, lsr #22
    6d34:	900e0000 	andls	r0, lr, r0
    6d38:	01000018 	tsteq	r0, r8, lsl r0
    6d3c:	01ca010c 	biceq	r0, sl, ip, lsl #2
    6d40:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
    6d44:	150c0100 	strne	r0, [ip, #-256]	; 0x100
    6d48:	07000001 	streq	r0, [r0, -r1]
    6d4c:	0c010070 	stceq	0, cr0, [r1], {112}	; 0x70
    6d50:	0000011b 	andeq	r0, r0, fp, lsl r1
    6d54:	0100630a 	tsteq	r0, sl, lsl #6
    6d58:	0000970e 	andeq	r9, r0, lr, lsl #14
    6d5c:	00690a00 	rsbeq	r0, r9, r0, lsl #20
    6d60:	007e0f01 	rsbseq	r0, lr, r1, lsl #30
    6d64:	06000000 	streq	r0, [r0], -r0
    6d68:	0000184a 	andeq	r1, r0, sl, asr #16
    6d6c:	f2014901 	vmla.i8	d4, d1, d1
    6d70:	07000001 	streq	r0, [r0, -r1]
    6d74:	49010078 	stmdbmi	r1, {r3, r4, r5, r6}
    6d78:	00000115 	andeq	r0, r0, r5, lsl r1
    6d7c:	01006307 	tsteq	r0, r7, lsl #6
    6d80:	0000a249 	andeq	sl, r0, r9, asr #4
    6d84:	00690a00 	rsbeq	r0, r9, r0, lsl #20
    6d88:	007e4b01 	rsbseq	r4, lr, r1, lsl #22
    6d8c:	0f000000 	svceq	0x00000000
    6d90:	000001ca 	andeq	r0, r0, sl, asr #3
    6d94:	00000000 	andeq	r0, r0, r0
    6d98:	0000001e 	andeq	r0, r0, lr, lsl r0
    6d9c:	023e9c01 	eorseq	r9, lr, #256	; 0x100
    6da0:	d6100000 	ldrle	r0, [r0], -r0
    6da4:	4c000001 	stcmi	0, cr0, [r0], {1}
    6da8:	10000040 	andne	r0, r0, r0, asr #32
    6dac:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6db0:	0000407a 	andeq	r4, r0, sl, ror r0
    6db4:	0001e811 	andeq	lr, r1, r1, lsl r8
    6db8:	0040cc00 	subeq	ip, r0, r0, lsl #24
    6dbc:	00001200 	andeq	r1, r0, r0, lsl #4
    6dc0:	0d5a0000 	ldcleq	0, cr0, [sl, #-0]
    6dc4:	01130000 	tsteq	r3, r0
    6dc8:	134c0152 	movtne	r0, #49490	; 0xc152
    6dcc:	30015101 	andcc	r5, r1, r1, lsl #2
    6dd0:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    6dd4:	235001f3 	cmpcs	r0, #-1073741764	; 0xc000003c
    6dd8:	0d000004 	stceq	0, cr0, [r0, #-16]
    6ddc:	00001836 	andeq	r1, r0, r6, lsr r8
    6de0:	007e2801 	rsbseq	r2, lr, r1, lsl #16
    6de4:	6a010000 	bvs	46dec <__Stack_Size+0x465ec>
    6de8:	07000002 	streq	r0, [r0, -r2]
    6dec:	28010070 	stmdacs	r1, {r4, r5, r6}
    6df0:	0000011b 	andeq	r0, r0, fp, lsl r1
    6df4:	0100690a 	tsteq	r0, sl, lsl #18
    6df8:	00007e2a 	andeq	r7, r0, sl, lsr #28
    6dfc:	00780a00 	rsbseq	r0, r8, r0, lsl #20
    6e00:	008c2b01 	addeq	r2, ip, r1, lsl #22
    6e04:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6e08:	0000182a 	andeq	r1, r0, sl, lsr #16
    6e0c:	a6011801 	strge	r1, [r1], -r1, lsl #16
    6e10:	07000002 	streq	r0, [r0, -r2]
    6e14:	18010078 	stmdane	r1, {r3, r4, r5, r6}
    6e18:	00000115 	andeq	r0, r0, r5, lsl r1
    6e1c:	01007007 	tsteq	r0, r7
    6e20:	00011b18 	andeq	r1, r1, r8, lsl fp
    6e24:	17990900 	ldrne	r0, [r9, r0, lsl #18]
    6e28:	1a010000 	bne	46e30 <__Stack_Size+0x46630>
    6e2c:	000002a6 	andeq	r0, r0, r6, lsr #5
    6e30:	0100630a 	tsteq	r0, sl, lsl #6
    6e34:	0000971b 	andeq	r9, r0, fp, lsl r7
    6e38:	00690a00 	rsbeq	r0, r9, r0, lsl #20
    6e3c:	007e1c01 	rsbseq	r1, lr, r1, lsl #24
    6e40:	14000000 	strne	r0, [r0], #-0
    6e44:	0000008c 	andeq	r0, r0, ip, lsl #1
    6e48:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    6e4c:	0000b815 	andeq	fp, r0, r5, lsl r8
    6e50:	16001f00 	strne	r1, [r0], -r0, lsl #30
    6e54:	000016d8 	ldrdeq	r1, [r0], -r8
    6e58:	2fc45b01 	svccs	0x00c45b01
    6e5c:	01a00800 	lsleq	r0, r0, #16
    6e60:	9c010000 	stcls	0, cr0, [r1], {-0}
    6e64:	000004d7 	ldrdeq	r0, [r0], -r7
    6e68:	01006e17 	tsteq	r0, r7, lsl lr
    6e6c:	0001155b 	andeq	r1, r1, fp, asr r5
    6e70:	00410400 	subeq	r0, r1, r0, lsl #8
    6e74:	00781700 	rsbseq	r1, r8, r0, lsl #14
    6e78:	011b5c01 	tsteq	fp, r1, lsl #24
    6e7c:	41430000 	mrsmi	r0, (UNDEF: 67)
    6e80:	6c170000 	ldcvs	0, cr0, [r7], {-0}
    6e84:	01006e65 	tsteq	r0, r5, ror #28
    6e88:	0000ad5c 	andeq	sl, r0, ip, asr sp
    6e8c:	00418200 	subeq	r8, r1, r0, lsl #4
    6e90:	180b1800 	stmdane	fp, {fp, ip}
    6e94:	5d010000 	stcpl	0, cr0, [r1, #-0]
    6e98:	0000011b 	andeq	r0, r0, fp, lsl r1
    6e9c:	000041c6 	andeq	r4, r0, r6, asr #3
    6ea0:	00187109 	andseq	r7, r8, r9, lsl #2
    6ea4:	d75f0100 	ldrble	r0, [pc, -r0, lsl #2]
    6ea8:	19000004 	stmdbne	r0, {r2}
    6eac:	000017a0 	andeq	r1, r0, r0, lsr #15
    6eb0:	04d76001 	ldrbeq	r6, [r7], #1
    6eb4:	420a0000 	andmi	r0, sl, #0
    6eb8:	ae190000 	cdpge	0, 1, cr0, cr9, cr0, {0}
    6ebc:	01000017 	tsteq	r0, r7, lsl r0
    6ec0:	0004d761 	andeq	sp, r4, r1, ror #14
    6ec4:	00422800 	subeq	r2, r2, r0, lsl #16
    6ec8:	17c61900 	strbne	r1, [r6, r0, lsl #18]
    6ecc:	62010000 	andvs	r0, r1, #0
    6ed0:	000004d7 	ldrdeq	r0, [r0], -r7
    6ed4:	00004246 	andeq	r4, r0, r6, asr #4
    6ed8:	0100691a 	tsteq	r0, sl, lsl r9
    6edc:	00007e63 	andeq	r7, r0, r3, ror #28
    6ee0:	00427100 	subeq	r7, r2, r0, lsl #2
    6ee4:	023e1b00 	eorseq	r1, lr, #0, 22
    6ee8:	2fd20000 	svccs	0x00d20000
    6eec:	08e00800 	stmiaeq	r0!, {fp}^
    6ef0:	5f010000 	svcpl	0x00010000
    6ef4:	0000037d 	andeq	r0, r0, sp, ror r3
    6ef8:	00024e10 	andeq	r4, r2, r0, lsl lr
    6efc:	0042ea00 	subeq	lr, r2, r0, lsl #20
    6f00:	08e01c00 	stmiaeq	r0!, {sl, fp, ip}^
    6f04:	57110000 	ldrpl	r0, [r1, -r0]
    6f08:	2e000002 	cdpcs	0, 0, cr0, cr0, cr2, {0}
    6f0c:	11000043 	tstne	r0, r3, asr #32
    6f10:	00000260 	andeq	r0, r0, r0, ror #4
    6f14:	0000438c 	andeq	r4, r0, ip, lsl #7
    6f18:	261d0000 	ldrcs	r0, [sp], -r0
    6f1c:	f4000001 	vst4.8	{d0-d3}, [r0], r1
    6f20:	0808002f 	stmdaeq	r8, {r0, r1, r2, r3, r5}
    6f24:	01000000 	mrseq	r0, (UNDEF: 0)
    6f28:	0003a35f 	andeq	sl, r3, pc, asr r3
    6f2c:	013f1000 	teqeq	pc, r0
    6f30:	43ca0000 	bicmi	r0, sl, #0
    6f34:	36100000 	ldrcc	r0, [r0], -r0
    6f38:	1a000001 	bne	6f44 <__Stack_Size+0x6744>
    6f3c:	00000044 	andeq	r0, r0, r4, asr #32
    6f40:	0001491d 	andeq	r4, r1, sp, lsl r9
    6f44:	0030a400 	eorseq	sl, r0, r0, lsl #8
    6f48:	00001408 	andeq	r1, r0, r8, lsl #8
    6f4c:	dd6b0100 	stflee	f0, [fp, #-0]
    6f50:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    6f54:	0000015e 	andeq	r0, r0, lr, asr r1
    6f58:	0001551e 	andeq	r5, r1, lr, lsl r5
    6f5c:	30a41f00 	adccc	r1, r4, r0, lsl #30
    6f60:	00140800 	andseq	r0, r4, r0, lsl #16
    6f64:	67110000 	ldrvs	r0, [r1, -r0]
    6f68:	2d000001 	stccs	0, cr0, [r0, #-4]
    6f6c:	11000044 	tstne	r0, r4, asr #32
    6f70:	00000170 	andeq	r0, r0, r0, ror r1
    6f74:	0000444b 	andeq	r4, r0, fp, asr #8
    6f78:	d6200000 	strtle	r0, [r0], -r0
    6f7c:	62080030 	andvs	r0, r8, #48	; 0x30
    6f80:	bb000000 	bllt	6f88 <__Stack_Size+0x6788>
    6f84:	1a000004 	bne	6f9c <__Stack_Size+0x679c>
    6f88:	00746962 	rsbseq	r6, r4, r2, ror #18
    6f8c:	01217001 	teqeq	r1, r1
    6f90:	44760000 	ldrbtmi	r0, [r6], #-0
    6f94:	491b0000 	ldmdbmi	fp, {}	; <UNPREDICTABLE>
    6f98:	e2000001 	and	r0, r0, #1
    6f9c:	00080030 	andeq	r0, r8, r0, lsr r0
    6fa0:	01000009 	tsteq	r0, r9
    6fa4:	00043372 	andeq	r3, r4, r2, ror r3
    6fa8:	015e1000 	cmpeq	lr, r0
    6fac:	44890000 	strmi	r0, [r9], #0
    6fb0:	551e0000 	ldrpl	r0, [lr, #-0]
    6fb4:	1c000001 	stcne	0, cr0, [r0], {1}
    6fb8:	00000900 	andeq	r0, r0, r0, lsl #18
    6fbc:	00016711 	andeq	r6, r1, r1, lsl r7
    6fc0:	00449d00 	subeq	r9, r4, r0, lsl #26
    6fc4:	01701100 	cmneq	r0, r0, lsl #2
    6fc8:	44bc0000 	ldrtmi	r0, [ip], #0
    6fcc:	00000000 	andeq	r0, r0, r0
    6fd0:	00026a21 	andeq	r6, r2, r1, lsr #20
    6fd4:	0030fe00 	eorseq	pc, r0, r0, lsl #28
    6fd8:	00091808 	andeq	r1, r9, r8, lsl #16
    6fdc:	1e740100 	rpwnes	f0, f4, f0
    6fe0:	0000027f 	andeq	r0, r0, pc, ror r2
    6fe4:	00027610 	andeq	r7, r2, r0, lsl r6
    6fe8:	0044f300 	subeq	pc, r4, r0, lsl #6
    6fec:	09181c00 	ldmdbeq	r8, {sl, fp, ip}
    6ff0:	88220000 	stmdahi	r2!, {}	; <UNPREDICTABLE>
    6ff4:	03000002 	movweq	r0, #2
    6ff8:	117fb891 			; <UNDEFINED> instruction: 0x117fb891
    6ffc:	00000293 	muleq	r0, r3, r2
    7000:	00004506 	andeq	r4, r0, r6, lsl #10
    7004:	00029c11 	andeq	r9, r2, r1, lsl ip
    7008:	00453e00 	subeq	r3, r5, r0, lsl #28
    700c:	00c82300 	sbceq	r2, r8, r0, lsl #6
    7010:	311e0000 	tstcc	lr, r0
    7014:	001a0800 	andseq	r0, sl, r0, lsl #16
    7018:	24010000 	strcs	r0, [r1], #-0
    701c:	0000f510 	andeq	pc, r0, r0, lsl r5	; <UNPREDICTABLE>
    7020:	00457500 	subeq	r7, r5, r0, lsl #10
    7024:	00ea1e00 	rsceq	r1, sl, r0, lsl #28
    7028:	df100000 	svcle	0x00100000
    702c:	96000000 	strls	r0, [r0], -r0
    7030:	1e000045 	cdpne	0, 0, cr0, cr0, cr5, {2}
    7034:	000000d4 	ldrdeq	r0, [r0], -r4
    7038:	00311e1f 	eorseq	r1, r1, pc, lsl lr
    703c:	00001a08 	andeq	r1, r0, r8, lsl #20
    7040:	01001100 	mrseq	r1, (UNDEF: 16)
    7044:	45a90000 	strmi	r0, [r9, #0]!
    7048:	0b110000 	bleq	447050 <__Stack_Size+0x446850>
    704c:	bc000001 	stclt	0, cr0, [r0], {1}
    7050:	00000045 	andeq	r0, r0, r5, asr #32
    7054:	00000000 	andeq	r0, r0, r0
    7058:	00300a24 	eorseq	r0, r0, r4, lsr #20
    705c:	000d5a08 	andeq	r5, sp, r8, lsl #20
    7060:	52011300 	andpl	r1, r1, #0, 6
    7064:	13200802 	teqne	r0, #131072	; 0x20000
    7068:	30015101 	andcc	r5, r1, r1, lsl #2
    706c:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    7070:	00000074 	andeq	r0, r0, r4, ror r0
    7074:	00007e0c 	andeq	r7, r0, ip, lsl #28
    7078:	187f1600 	ldmdane	pc!, {r9, sl, ip}^	; <UNPREDICTABLE>
    707c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    7080:	00000000 	andeq	r0, r0, r0
    7084:	0000002c 	andeq	r0, r0, ip, lsr #32
    7088:	05619c01 	strbeq	r9, [r1, #-3073]!	; 0xc01
    708c:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
    7090:	15780100 	ldrbne	r0, [r8, #-256]!	; 0x100
    7094:	db000001 	blle	70a0 <__Stack_Size+0x68a0>
    7098:	18000045 	stmdane	r0, {r0, r2, r6}
    709c:	0000180b 	andeq	r1, r0, fp, lsl #16
    70a0:	011b7801 	tsteq	fp, r1, lsl #16
    70a4:	46040000 	strmi	r0, [r4], -r0
    70a8:	6e250000 	cdpvs	0, 2, cr0, cr5, cr0, {0}
    70ac:	a67a0100 	ldrbtge	r0, [sl], -r0, lsl #2
    70b0:	02000002 	andeq	r0, r0, #2
    70b4:	7a1d5091 	bvc	75b300 <__Stack_Size+0x75ab00>
    70b8:	00000001 	andeq	r0, r0, r1
    70bc:	16000000 	strne	r0, [r0], -r0
    70c0:	01000000 	mrseq	r0, (UNDEF: 0)
    70c4:	00053d7d 	andeq	r3, r5, sp, ror sp
    70c8:	018f1000 	orreq	r1, pc, r0
    70cc:	46300000 	ldrtmi	r0, [r0], -r0
    70d0:	86260000 	strthi	r0, [r6], -r0
    70d4:	01000001 	tsteq	r0, r1
    70d8:	00240055 	eoreq	r0, r4, r5, asr r0
    70dc:	b6000000 	strlt	r0, [r0], -r0
    70e0:	13000002 	movwne	r0, #2
    70e4:	f3035301 	vcgt.u8	d5, d3, d1
    70e8:	01135101 	tsteq	r3, r1, lsl #2
    70ec:	20080252 	andcs	r0, r8, r2, asr r2
    70f0:	02510113 	subseq	r0, r1, #-1073741820	; 0xc0000004
    70f4:	01130075 	tsteq	r3, r5, ror r0
    70f8:	007d0250 	rsbseq	r0, sp, r0, asr r2
    70fc:	40270000 	eormi	r0, r7, r0
    7100:	01000018 	tsteq	r0, r8, lsl r0
    7104:	00008c80 	andeq	r8, r0, r0, lsl #25
    7108:	00000000 	andeq	r0, r0, r0
    710c:	00009a00 	andeq	r9, r0, r0, lsl #20
    7110:	b19c0100 	orrslt	r0, ip, r0, lsl #2
    7114:	17000005 	strne	r0, [r0, -r5]
    7118:	80010078 	andhi	r0, r1, r8, ror r0
    711c:	0000011b 	andeq	r0, r0, fp, lsl r1
    7120:	00004650 	andeq	r4, r0, r0, asr r6
    7124:	01007917 	tsteq	r0, r7, lsl r9
    7128:	00011b80 	andeq	r1, r1, r0, lsl #23
    712c:	00467c00 	subeq	r7, r6, r0, lsl #24
    7130:	75731a00 	ldrbvc	r1, [r3, #-2560]!	; 0xa00
    7134:	8201006d 	andhi	r0, r1, #109	; 0x6d
    7138:	0000008c 	andeq	r0, r0, ip, lsl #1
    713c:	000046a8 	andeq	r4, r0, r8, lsr #13
    7140:	0100691a 	tsteq	r0, sl, lsl r9
    7144:	00007e83 	andeq	r7, r0, r3, lsl #29
    7148:	0046f000 	subeq	pc, r6, r0
    714c:	c80f0000 	stmdagt	pc, {}	; <UNPREDICTABLE>
    7150:	00000000 	andeq	r0, r0, r0
    7154:	c2000000 	andgt	r0, r0, #0
    7158:	01000000 	mrseq	r0, (UNDEF: 0)
    715c:	0005f99c 	muleq	r5, ip, r9
    7160:	00d42600 	sbcseq	r2, r4, r0, lsl #12
    7164:	50010000 	andpl	r0, r1, r0
    7168:	0000df10 	andeq	sp, r0, r0, lsl pc
    716c:	00473300 	subeq	r3, r7, r0, lsl #6
    7170:	00ea1000 	rsceq	r1, sl, r0
    7174:	475f0000 	ldrbmi	r0, [pc, -r0]
    7178:	f5100000 			; <UNDEFINED> instruction: 0xf5100000
    717c:	8b000000 	blhi	7184 <__Stack_Size+0x6984>
    7180:	11000047 	tstne	r0, r7, asr #32
    7184:	00000100 	andeq	r0, r0, r0, lsl #2
    7188:	000047ac 	andeq	r4, r0, ip, lsr #15
    718c:	00010b11 	andeq	r0, r1, r1, lsl fp
    7190:	0047d500 	subeq	sp, r7, r0, lsl #10
    7194:	f8060000 			; <UNDEFINED> instruction: 0xf8060000
    7198:	01000017 	tsteq	r0, r7, lsl r0
    719c:	0623019a 			; <UNDEFINED> instruction: 0x0623019a
    71a0:	72070000 	andvc	r0, r7, #0
    71a4:	159a0100 	ldrne	r0, [sl, #256]	; 0x100
    71a8:	07000001 	streq	r0, [r0, -r1]
    71ac:	9a010061 	bls	47338 <__Stack_Size+0x46b38>
    71b0:	0000011b 	andeq	r0, r0, fp, lsl r1
    71b4:	00180b08 	andseq	r0, r8, r8, lsl #22
    71b8:	1b9a0100 	blne	fe6875c0 <BootRAM+0xd5f7d61>
    71bc:	00000001 	andeq	r0, r0, r1
    71c0:	0005f90f 	andeq	pc, r5, pc, lsl #18
    71c4:	00000000 	andeq	r0, r0, r0
    71c8:	00005800 	andeq	r5, r0, r0, lsl #16
    71cc:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    71d0:	26000007 	strcs	r0, [r0], -r7
    71d4:	00000605 	andeq	r0, r0, r5, lsl #12
    71d8:	0e105001 	cdpeq	0, 1, cr5, cr0, cr1, {0}
    71dc:	00000006 	andeq	r0, r0, r6
    71e0:	10000048 	andne	r0, r0, r8, asr #32
    71e4:	00000617 	andeq	r0, r0, r7, lsl r6
    71e8:	00004821 	andeq	r4, r0, r1, lsr #16
    71ec:	0001991b 	andeq	r9, r1, fp, lsl r9
    71f0:	00000000 	andeq	r0, r0, r0
    71f4:	00093000 	andeq	r3, r9, r0
    71f8:	8b9c0100 	blhi	fe707600 <BootRAM+0xd677da1>
    71fc:	10000006 	andne	r0, r0, r6
    7200:	000001ae 	andeq	r0, r0, lr, lsr #3
    7204:	00004842 	andeq	r4, r0, r2, asr #16
    7208:	0001a526 	andeq	sl, r1, r6, lsr #10
    720c:	1c500100 	ldfnee	f0, [r0], {-0}
    7210:	00000930 	andeq	r0, r0, r0, lsr r9
    7214:	0001b711 	andeq	fp, r1, r1, lsl r7
    7218:	00486300 	subeq	r6, r8, r0, lsl #6
    721c:	01c01100 	biceq	r1, r0, r0, lsl #2
    7220:	48820000 	stmmi	r2, {}	; <UNPREDICTABLE>
    7224:	00000000 	andeq	r0, r0, r0
    7228:	00026a23 	andeq	r6, r2, r3, lsr #20
    722c:	00000000 	andeq	r0, r0, r0
    7230:	00003200 	andeq	r3, r0, r0, lsl #4
    7234:	1e9d0100 	fmlnee	f0, f5, f0
    7238:	0000027f 	andeq	r0, r0, pc, ror r2
    723c:	0002761e 	andeq	r7, r2, lr, lsl r6
    7240:	00001f00 	andeq	r1, r0, r0, lsl #30
    7244:	00320000 	eorseq	r0, r2, r0
    7248:	88220000 	stmdahi	r2!, {}	; <UNPREDICTABLE>
    724c:	02000002 	andeq	r0, r0, #2
    7250:	93115091 	tstls	r1, #145	; 0x91
    7254:	b9000002 	stmdblt	r0, {r1}
    7258:	11000048 	tstne	r0, r8, asr #32
    725c:	0000029c 	muleq	r0, ip, r2
    7260:	000048e5 	andeq	r4, r0, r5, ror #17
    7264:	0000c823 	andeq	ip, r0, r3, lsr #16
    7268:	00000000 	andeq	r0, r0, r0
    726c:	00001a00 	andeq	r1, r0, r0, lsl #20
    7270:	10240100 	eorne	r0, r4, r0, lsl #2
    7274:	000000f5 	strdeq	r0, [r0], -r5
    7278:	00004910 	andeq	r4, r0, r0, lsl r9
    727c:	0000ea26 	andeq	lr, r0, r6, lsr #20
    7280:	10500100 	subsne	r0, r0, r0, lsl #2
    7284:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7288:	00004931 	andeq	r4, r0, r1, lsr r9
    728c:	0000d426 	andeq	sp, r0, r6, lsr #8
    7290:	1f500100 	svcne	0x00500100
    7294:	00000000 	andeq	r0, r0, r0
    7298:	0000001a 	andeq	r0, r0, sl, lsl r0
    729c:	00010022 	andeq	r0, r1, r2, lsr #32
    72a0:	11510100 	cmpne	r1, r0, lsl #2
    72a4:	0000010b 	andeq	r0, r0, fp, lsl #2
    72a8:	0000495e 	andeq	r4, r0, lr, asr r9
    72ac:	00000000 	andeq	r0, r0, r0
    72b0:	17ed1600 	strbne	r1, [sp, r0, lsl #12]!
    72b4:	a0010000 	andge	r0, r1, r0
    72b8:	00000000 	andeq	r0, r0, r0
    72bc:	0000008e 	andeq	r0, r0, lr, lsl #1
    72c0:	08a99c01 	stmiaeq	r9!, {r0, sl, fp, ip, pc}
    72c4:	72280000 	eorvc	r0, r8, #0
    72c8:	15a00100 	strne	r0, [r0, #256]!	; 0x100
    72cc:	01000001 	tsteq	r0, r1
    72d0:	00611750 	rsbeq	r1, r1, r0, asr r7
    72d4:	011ba001 	tsteq	fp, r1
    72d8:	497d0000 	ldmdbmi	sp!, {}^	; <UNPREDICTABLE>
    72dc:	0b180000 	bleq	6072e4 <__Stack_Size+0x606ae4>
    72e0:	01000018 	tsteq	r0, r8, lsl r0
    72e4:	00011ba0 	andeq	r1, r1, r0, lsr #23
    72e8:	00499e00 	subeq	r9, r9, r0, lsl #28
    72ec:	01991b00 	orrseq	r1, r9, r0, lsl #22
    72f0:	00000000 	andeq	r0, r0, r0
    72f4:	09480000 	stmdbeq	r8, {}^	; <UNPREDICTABLE>
    72f8:	a2010000 	andge	r0, r1, #0
    72fc:	0000078c 	andeq	r0, r0, ip, lsl #15
    7300:	0001ae10 	andeq	sl, r1, r0, lsl lr
    7304:	0049bf00 	subeq	fp, r9, r0, lsl #30
    7308:	01a52600 			; <UNDEFINED> instruction: 0x01a52600
    730c:	50010000 	andpl	r0, r1, r0
    7310:	0009481c 	andeq	r4, r9, ip, lsl r8
    7314:	01b71100 			; <UNDEFINED> instruction: 0x01b71100
    7318:	49e00000 	stmibmi	r0!, {}^	; <UNPREDICTABLE>
    731c:	c0110000 	andsgt	r0, r1, r0
    7320:	ff000001 			; <UNDEFINED> instruction: 0xff000001
    7324:	00000049 	andeq	r0, r0, r9, asr #32
    7328:	026a1d00 	rsbeq	r1, sl, #0, 26
    732c:	00000000 	andeq	r0, r0, r0
    7330:	00320000 	eorseq	r0, r2, r0
    7334:	a3010000 	movwge	r0, #4096	; 0x1000
    7338:	0000081a 	andeq	r0, r0, sl, lsl r8
    733c:	00027f1e 	andeq	r7, r2, lr, lsl pc
    7340:	02761e00 	rsbseq	r1, r6, #0, 28
    7344:	001f0000 	andseq	r0, pc, r0
    7348:	32000000 	andcc	r0, r0, #0
    734c:	22000000 	andcs	r0, r0, #0
    7350:	00000288 	andeq	r0, r0, r8, lsl #5
    7354:	11509102 	cmpne	r0, r2, lsl #2
    7358:	00000293 	muleq	r0, r3, r2
    735c:	00004a36 	andeq	r4, r0, r6, lsr sl
    7360:	00029c11 	andeq	r9, r2, r1, lsl ip
    7364:	004a6200 	subeq	r6, sl, r0, lsl #4
    7368:	00c82300 	sbceq	r2, r8, r0, lsl #6
    736c:	00000000 	andeq	r0, r0, r0
    7370:	001a0000 	andseq	r0, sl, r0
    7374:	24010000 	strcs	r0, [r1], #-0
    7378:	0000f510 	andeq	pc, r0, r0, lsl r5	; <UNPREDICTABLE>
    737c:	004a8d00 	subeq	r8, sl, r0, lsl #26
    7380:	00ea2600 	rsceq	r2, sl, r0, lsl #12
    7384:	50010000 	andpl	r0, r1, r0
    7388:	0000df10 	andeq	sp, r0, r0, lsl pc
    738c:	004aae00 	subeq	sl, sl, r0, lsl #28
    7390:	00d42600 	sbcseq	r2, r4, r0, lsl #12
    7394:	50010000 	andpl	r0, r1, r0
    7398:	0000001f 	andeq	r0, r0, pc, lsl r0
    739c:	00001a00 	andeq	r1, r0, r0, lsl #20
    73a0:	01001100 	mrseq	r1, (UNDEF: 16)
    73a4:	4adb0000 	bmi	ff6c73ac <BootRAM+0xe637b4d>
    73a8:	0b110000 	bleq	4473b0 <__Stack_Size+0x446bb0>
    73ac:	ee000001 	cdp	0, 0, cr0, cr0, cr1, {0}
    73b0:	0000004a 	andeq	r0, r0, sl, asr #32
    73b4:	23000000 	movwcs	r0, #0
    73b8:	0000026a 	andeq	r0, r0, sl, ror #4
    73bc:	00000000 	andeq	r0, r0, r0
    73c0:	00000036 	andeq	r0, r0, r6, lsr r0
    73c4:	7f10a401 	svcvc	0x0010a401
    73c8:	0d000002 	stceq	0, cr0, [r0, #-8]
    73cc:	2600004b 	strcs	r0, [r0], -fp, asr #32
    73d0:	00000276 	andeq	r0, r0, r6, ror r2
    73d4:	001f5001 	andseq	r5, pc, r1
    73d8:	36000000 	strcc	r0, [r0], -r0
    73dc:	22000000 	andcs	r0, r0, #0
    73e0:	00000288 	andeq	r0, r0, r8, lsl #5
    73e4:	11509102 	cmpne	r0, r2, lsl #2
    73e8:	00000293 	muleq	r0, r3, r2
    73ec:	00004b2e 	andeq	r4, r0, lr, lsr #22
    73f0:	00029c11 	andeq	r9, r2, r1, lsl ip
    73f4:	004b6600 	subeq	r6, fp, r0, lsl #12
    73f8:	00c82300 	sbceq	r2, r8, r0, lsl #6
    73fc:	00000000 	andeq	r0, r0, r0
    7400:	001a0000 	andseq	r0, sl, r0
    7404:	24010000 	strcs	r0, [r1], #-0
    7408:	0000f510 	andeq	pc, r0, r0, lsl r5	; <UNPREDICTABLE>
    740c:	004b9d00 	subeq	r9, fp, r0, lsl #26
    7410:	00ea2600 	rsceq	r2, sl, r0, lsl #12
    7414:	50010000 	andpl	r0, r1, r0
    7418:	0000df10 	andeq	sp, r0, r0, lsl pc
    741c:	004bbe00 	subeq	fp, fp, r0, lsl #28
    7420:	00d42600 	sbcseq	r2, r4, r0, lsl #12
    7424:	50010000 	andpl	r0, r1, r0
    7428:	0000001f 	andeq	r0, r0, pc, lsl r0
    742c:	00001a00 	andeq	r1, r0, r0, lsl #20
    7430:	01002200 	mrseq	r2, R8_usr
    7434:	51010000 	mrspl	r0, (UNDEF: 1)
    7438:	00010b11 	andeq	r0, r1, r1, lsl fp
    743c:	004beb00 	subeq	lr, fp, r0, lsl #22
    7440:	00000000 	andeq	r0, r0, r0
    7444:	13160000 	tstne	r6, #0
    7448:	01000018 	tsteq	r0, r8, lsl r0
    744c:	000000a7 	andeq	r0, r0, r7, lsr #1
    7450:	00013e00 	andeq	r3, r1, r0, lsl #28
    7454:	9b9c0100 	blls	fe70785c <BootRAM+0xd677ffd>
    7458:	1700000b 	strne	r0, [r0, -fp]
    745c:	a7010072 	smlsdxge	r1, r2, r0, r0
    7460:	00000115 	andeq	r0, r0, r5, lsl r1
    7464:	00004c0a 	andeq	r4, r0, sl, lsl #24
    7468:	01006117 	tsteq	r0, r7, lsl r1
    746c:	00011ba7 	andeq	r1, r1, r7, lsr #23
    7470:	004c2800 	subeq	r2, ip, r0, lsl #16
    7474:	00621700 	rsbeq	r1, r2, r0, lsl #14
    7478:	011ba701 	tsteq	fp, r1, lsl #14
    747c:	4c460000 	marmi	acc0, r0, r6
    7480:	0b180000 	bleq	607488 <__Stack_Size+0x606c88>
    7484:	01000018 	tsteq	r0, r8, lsl r0
    7488:	00011ba8 	andeq	r1, r1, r8, lsr #23
    748c:	004c6400 	subeq	r6, ip, r0, lsl #8
    7490:	00691a00 	rsbeq	r1, r9, r0, lsl #20
    7494:	007eaa01 	rsbseq	sl, lr, r1, lsl #20
    7498:	4c820000 	stcmi	0, cr0, [r2], {0}
    749c:	3e1b0000 	cdpcc	0, 1, cr0, cr11, cr0, {0}
    74a0:	00000002 	andeq	r0, r0, r2
    74a4:	60000000 	andvs	r0, r0, r0
    74a8:	01000009 	tsteq	r0, r9
    74ac:	000934ae 	andeq	r3, r9, lr, lsr #9
    74b0:	024e2600 	subeq	r2, lr, #0, 12
    74b4:	57010000 	strpl	r0, [r1, -r0]
    74b8:	0009601c 	andeq	r6, r9, ip, lsl r0
    74bc:	02571100 	subseq	r1, r7, #0, 2
    74c0:	4caf0000 	stcmi	0, cr0, [pc]	; 74c8 <__Stack_Size+0x6cc8>
    74c4:	60110000 	andsvs	r0, r1, r0
    74c8:	00000002 	andeq	r0, r0, r2
    74cc:	0000004d 	andeq	r0, r0, sp, asr #32
    74d0:	00002000 	andeq	r2, r0, r0
    74d4:	00ea0000 	rsceq	r0, sl, r0
    74d8:	0b7f0000 	bleq	1fc74e0 <__Stack_Size+0x1fc6ce0>
    74dc:	621a0000 	andsvs	r0, sl, #0
    74e0:	01007469 	tsteq	r0, r9, ror #8
    74e4:	000121af 	andeq	r2, r1, pc, lsr #3
    74e8:	004d3200 	subeq	r3, sp, r0, lsl #4
    74ec:	17cc2900 	strbne	r2, [ip, r0, lsl #18]
    74f0:	b0010000 	andlt	r0, r1, r0
    74f4:	000002a6 	andeq	r0, r0, r6, lsr #5
    74f8:	7f989103 	svcvc	0x00989103
    74fc:	0001491b 	andeq	r4, r1, fp, lsl r9
    7500:	00000000 	andeq	r0, r0, r0
    7504:	00097800 	andeq	r7, r9, r0, lsl #16
    7508:	99b20100 	ldmibls	r2!, {r8}
    750c:	10000009 	andne	r0, r0, r9
    7510:	0000015e 	andeq	r0, r0, lr, asr r1
    7514:	00004d53 	andeq	r4, r0, r3, asr sp
    7518:	0001551e 	andeq	r5, r1, lr, lsl r5
    751c:	09781c00 	ldmdbeq	r8!, {sl, fp, ip}^
    7520:	67110000 	ldrvs	r0, [r1, -r0]
    7524:	67000001 	strvs	r0, [r0, -r1]
    7528:	1100004d 	tstne	r0, sp, asr #32
    752c:	00000170 	andeq	r0, r0, r0, ror r1
    7530:	00004d86 	andeq	r4, r0, r6, lsl #27
    7534:	6a1d0000 	bvs	74753c <__Stack_Size+0x746d3c>
    7538:	00000002 	andeq	r0, r0, r2
    753c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    7540:	01000000 	mrseq	r0, (UNDEF: 0)
    7544:	000a24b3 			; <UNDEFINED> instruction: 0x000a24b3
    7548:	027f1e00 	rsbseq	r1, pc, #0, 28
    754c:	761e0000 	ldrvc	r0, [lr], -r0
    7550:	1f000002 	svcne	0x00000002
    7554:	00000000 	andeq	r0, r0, r0
    7558:	0000002e 	andeq	r0, r0, lr, lsr #32
    755c:	00028822 	andeq	r8, r2, r2, lsr #16
    7560:	b8910300 	ldmlt	r1, {r8, r9}
    7564:	0293117f 	addseq	r1, r3, #-1073741793	; 0xc000001f
    7568:	4dbd0000 	ldcmi	0, cr0, [sp]
    756c:	9c110000 	ldcls	0, cr0, [r1], {-0}
    7570:	e9000002 	stmdb	r0, {r1}
    7574:	2300004d 	movwcs	r0, #77	; 0x4d
    7578:	000000c8 	andeq	r0, r0, r8, asr #1
    757c:	00000000 	andeq	r0, r0, r0
    7580:	00000018 	andeq	r0, r0, r8, lsl r0
    7584:	f5102401 			; <UNDEFINED> instruction: 0xf5102401
    7588:	14000000 	strne	r0, [r0], #-0
    758c:	1e00004e 	cdpne	0, 0, cr0, cr0, cr14, {2}
    7590:	000000ea 	andeq	r0, r0, sl, ror #1
    7594:	0000df10 	andeq	sp, r0, r0, lsl pc
    7598:	004e3500 	subeq	r3, lr, r0, lsl #10
    759c:	00d41e00 	sbcseq	r1, r4, r0, lsl #28
    75a0:	001f0000 	andseq	r0, pc, r0
    75a4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    75a8:	11000000 	mrsne	r0, (UNDEF: 0)
    75ac:	00000100 	andeq	r0, r0, r0, lsl #2
    75b0:	00004e48 	andeq	r4, r0, r8, asr #28
    75b4:	00010b11 	andeq	r0, r1, r1, lsl fp
    75b8:	004e5b00 	subeq	r5, lr, r0, lsl #22
    75bc:	00000000 	andeq	r0, r0, r0
    75c0:	017a1b00 	cmneq	sl, r0, lsl #22
    75c4:	00000000 	andeq	r0, r0, r0
    75c8:	09900000 	ldmibeq	r0, {}	; <UNPREDICTABLE>
    75cc:	b5010000 	strlt	r0, [r1, #-0]
    75d0:	00000a4a 	andeq	r0, r0, sl, asr #20
    75d4:	00018f10 	andeq	r8, r1, r0, lsl pc
    75d8:	004e7a00 	subeq	r7, lr, r0, lsl #20
    75dc:	01861000 	orreq	r1, r6, r0
    75e0:	4e8d0000 	cdpmi	0, 8, cr0, cr13, cr0, {0}
    75e4:	1b000000 	blne	75ec <__Stack_Size+0x6dec>
    75e8:	000005f9 	strdeq	r0, [r0], -r9
    75ec:	00000000 	andeq	r0, r0, r0
    75f0:	000009a8 	andeq	r0, r0, r8, lsr #19
    75f4:	0b36b601 	bleq	db4e00 <__Stack_Size+0xdb4600>
    75f8:	171e0000 	ldrne	r0, [lr, -r0]
    75fc:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    7600:	0000060e 	andeq	r0, r0, lr, lsl #12
    7604:	00060510 	andeq	r0, r6, r0, lsl r5
    7608:	004ea000 	subeq	sl, lr, r0
    760c:	01991b00 	orrseq	r1, r9, r0, lsl #22
    7610:	00000000 	andeq	r0, r0, r0
    7614:	09c00000 	stmibeq	r0, {}^	; <UNPREDICTABLE>
    7618:	9c010000 	stcls	0, cr0, [r1], {-0}
    761c:	00000aa6 	andeq	r0, r0, r6, lsr #21
    7620:	0001ae1e 	andeq	sl, r1, lr, lsl lr
    7624:	01a51e00 			; <UNDEFINED> instruction: 0x01a51e00
    7628:	c01c0000 	andsgt	r0, ip, r0
    762c:	11000009 	tstne	r0, r9
    7630:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
    7634:	00004eb3 			; <UNDEFINED> instruction: 0x00004eb3
    7638:	0001c011 	andeq	ip, r1, r1, lsl r0
    763c:	004ee800 	subeq	lr, lr, r0, lsl #16
    7640:	23000000 	movwcs	r0, #0
    7644:	0000026a 	andeq	r0, r0, sl, ror #4
    7648:	00000000 	andeq	r0, r0, r0
    764c:	00000034 	andeq	r0, r0, r4, lsr r0
    7650:	7f1e9d01 	svcvc	0x001e9d01
    7654:	1e000002 	cdpne	0, 0, cr0, cr0, cr2, {0}
    7658:	00000276 	andeq	r0, r0, r6, ror r2
    765c:	0000001f 	andeq	r0, r0, pc, lsl r0
    7660:	00003400 	andeq	r3, r0, r0, lsl #8
    7664:	02882200 	addeq	r2, r8, #0, 4
    7668:	91030000 	mrsls	r0, (UNDEF: 3)
    766c:	93117fb8 	tstls	r1, #184, 30	; 0x2e0
    7670:	1f000002 	svcne	0x00000002
    7674:	1100004f 	tstne	r0, pc, asr #32
    7678:	0000029c 	muleq	r0, ip, r2
    767c:	00004f4b 	andeq	r4, r0, fp, asr #30
    7680:	0000c823 	andeq	ip, r0, r3, lsr #16
    7684:	00000000 	andeq	r0, r0, r0
    7688:	00001c00 	andeq	r1, r0, r0, lsl #24
    768c:	10240100 	eorne	r0, r4, r0, lsl #2
    7690:	000000f5 	strdeq	r0, [r0], -r5
    7694:	00004f76 	andeq	r4, r0, r6, ror pc
    7698:	0000ea10 	andeq	lr, r0, r0, lsl sl
    769c:	004f9700 	subeq	r9, pc, r0, lsl #14
    76a0:	00df1000 	sbcseq	r1, pc, r0
    76a4:	4faa0000 	svcmi	0x00aa0000
    76a8:	d4100000 	ldrle	r0, [r0], #-0
    76ac:	97000000 	strls	r0, [r0, -r0]
    76b0:	1f00004f 	svcne	0x0000004f
    76b4:	00000000 	andeq	r0, r0, r0
    76b8:	0000001c 	andeq	r0, r0, ip, lsl r0
    76bc:	00010011 	andeq	r0, r1, r1, lsl r0
    76c0:	004fbd00 	subeq	fp, pc, r0, lsl #26
    76c4:	010b1100 	mrseq	r1, (UNDEF: 27)
    76c8:	4fd00000 	svcmi	0x00d00000
    76cc:	00000000 	andeq	r0, r0, r0
    76d0:	23000000 	movwcs	r0, #0
    76d4:	000000c8 	andeq	r0, r0, r8, asr #1
    76d8:	00000000 	andeq	r0, r0, r0
    76dc:	00000020 	andeq	r0, r0, r0, lsr #32
    76e0:	f510b801 			; <UNDEFINED> instruction: 0xf510b801
    76e4:	ef000000 	svc	0x00000000
    76e8:	1000004f 	andne	r0, r0, pc, asr #32
    76ec:	000000ea 	andeq	r0, r0, sl, ror #1
    76f0:	00005010 	andeq	r5, r0, r0, lsl r0
    76f4:	0000df1e 	andeq	sp, r0, lr, lsl pc
    76f8:	00d41e00 	sbcseq	r1, r4, r0, lsl #28
    76fc:	001f0000 	andseq	r0, pc, r0
    7700:	20000000 	andcs	r0, r0, r0
    7704:	11000000 	mrsne	r0, (UNDEF: 0)
    7708:	00000100 	andeq	r0, r0, r0, lsl #2
    770c:	00005023 	andeq	r5, r0, r3, lsr #32
    7710:	00010b11 	andeq	r0, r1, r1, lsl fp
    7714:	00503600 	subseq	r3, r0, r0, lsl #12
    7718:	00000000 	andeq	r0, r0, r0
    771c:	00000024 	andeq	r0, r0, r4, lsr #32
    7720:	000d5a00 	andeq	r5, sp, r0, lsl #20
    7724:	52011300 	andpl	r1, r1, #0, 6
    7728:	13200802 	teqne	r0, #131072	; 0x20000
    772c:	30015101 	andcc	r5, r1, r1, lsl #2
    7730:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    7734:	00000075 	andeq	r0, r0, r5, ror r0
    7738:	0017bb16 	andseq	fp, r7, r6, lsl fp
    773c:	00bc0100 	adcseq	r0, ip, r0, lsl #2
    7740:	d2000000 	andle	r0, r0, #0
    7744:	01000000 	mrseq	r0, (UNDEF: 0)
    7748:	000d2e9c 	muleq	sp, ip, lr
    774c:	00721700 	rsbseq	r1, r2, r0, lsl #14
    7750:	0115bc01 	tsteq	r5, r1, lsl #24
    7754:	50550000 	subspl	r0, r5, r0
    7758:	61170000 	tstvs	r7, r0
    775c:	1bbc0100 	blne	fef07b64 <BootRAM+0xde78305>
    7760:	73000001 	movwvc	r0, #1
    7764:	18000050 	stmdane	r0, {r4, r6}
    7768:	0000180b 	andeq	r1, r0, fp, lsl #16
    776c:	011bbc01 	tsteq	fp, r1, lsl #24
    7770:	50910000 	addspl	r0, r1, r0
    7774:	70250000 	eorvc	r0, r5, r0
    7778:	0100326d 	tsteq	r0, sp, ror #4
    777c:	0002a6be 			; <UNDEFINED> instruction: 0x0002a6be
    7780:	a8910300 	ldmge	r1, {r8, r9}
    7784:	00631a7f 	rsbeq	r1, r3, pc, ror sl
    7788:	0097bf01 	addseq	fp, r7, r1, lsl #30
    778c:	50af0000 	adcpl	r0, pc, r0
    7790:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
    7794:	7ec00100 	polvcs	f0, f0, f0
    7798:	e4000000 	str	r0, [r0], #-0
    779c:	1b000050 	blne	78e4 <__Stack_Size+0x70e4>
    77a0:	0000017a 	andeq	r0, r0, sl, ror r1
    77a4:	00000000 	andeq	r0, r0, r0
    77a8:	000009d8 	ldrdeq	r0, [r0], -r8
    77ac:	0c28c301 	stceq	3, cr12, [r8], #-4
    77b0:	8f100000 	svchi	0x00100000
    77b4:	63000001 	movwvs	r0, #1
    77b8:	10000051 	andne	r0, r0, r1, asr r0
    77bc:	00000186 	andeq	r0, r0, r6, lsl #3
    77c0:	00005181 	andeq	r5, r0, r1, lsl #3
    77c4:	01ca1d00 	biceq	r1, sl, r0, lsl #26
    77c8:	00000000 	andeq	r0, r0, r0
    77cc:	00180000 	andseq	r0, r8, r0
    77d0:	cb010000 	blgt	477d8 <__Stack_Size+0x46fd8>
    77d4:	00000c5d 	andeq	r0, r0, sp, asr ip
    77d8:	0001df10 	andeq	sp, r1, r0, lsl pc
    77dc:	0051ad00 	subseq	sl, r1, r0, lsl #26
    77e0:	01d61e00 	bicseq	r1, r6, r0, lsl #28
    77e4:	001f0000 	andseq	r0, pc, r0
    77e8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    77ec:	11000000 	mrsne	r0, (UNDEF: 0)
    77f0:	000001e8 	andeq	r0, r0, r8, ror #3
    77f4:	000051cd 	andeq	r5, r0, sp, asr #3
    77f8:	3e1b0000 	cdpcc	0, 1, cr0, cr11, cr0, {0}
    77fc:	00000002 	andeq	r0, r0, r2
    7800:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    7804:	01000009 	tsteq	r0, r9
    7808:	000c8ecd 	andeq	r8, ip, sp, asr #29
    780c:	024e1e00 	subeq	r1, lr, #0, 28
    7810:	f81c0000 			; <UNDEFINED> instruction: 0xf81c0000
    7814:	11000009 	tstne	r0, r9
    7818:	00000257 	andeq	r0, r0, r7, asr r2
    781c:	00005211 	andeq	r5, r0, r1, lsl r2
    7820:	00026011 	andeq	r6, r2, r1, lsl r0
    7824:	00526e00 	subseq	r6, r2, r0, lsl #28
    7828:	2a000000 	bcs	7830 <__Stack_Size+0x7030>
    782c:	00000a10 	andeq	r0, r0, r0, lsl sl
    7830:	00000d13 	andeq	r0, r0, r3, lsl sp
    7834:	00327225 	eorseq	r7, r2, r5, lsr #4
    7838:	02a6ce01 	adceq	ip, r6, #1, 28
    783c:	91020000 	mrsls	r0, (UNDEF: 2)
    7840:	017a1b48 	cmneq	sl, r8, asr #22
    7844:	00000000 	andeq	r0, r0, r0
    7848:	0a300000 	beq	c07850 <__Stack_Size+0xc07050>
    784c:	d5010000 	strle	r0, [r1, #-0]
    7850:	00000cca 	andeq	r0, r0, sl, asr #25
    7854:	00018f10 	andeq	r8, r1, r0, lsl pc
    7858:	0052a000 	subseq	sl, r2, r0
    785c:	01861000 	orreq	r1, r6, r0
    7860:	52ff0000 	rscspl	r0, pc, #0
    7864:	2b000000 	blcs	786c <__Stack_Size+0x706c>
    7868:	00000000 	andeq	r0, r0, r0
    786c:	000008a9 	andeq	r0, r0, r9, lsr #17
    7870:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    7874:	02530113 	subseq	r0, r3, #-1073741820	; 0xc0000004
    7878:	01130077 	tsteq	r3, r7, ror r0
    787c:	00760252 	rsbseq	r0, r6, r2, asr r2
    7880:	02510113 	subseq	r0, r1, #-1073741820	; 0xc0000004
    7884:	01130076 	tsteq	r3, r6, ror r0
    7888:	48910250 	ldmmi	r1, {r4, r6, r9}
    788c:	00002400 	andeq	r2, r0, r0, lsl #8
    7890:	08a90000 	stmiaeq	r9!, {}	; <UNPREDICTABLE>
    7894:	01130000 	tsteq	r3, r0
    7898:	00770253 	rsbseq	r0, r7, r3, asr r2
    789c:	02520113 	subseq	r0, r2, #-1073741820	; 0xc0000004
    78a0:	01130078 	tsteq	r3, r8, ror r0
    78a4:	48910251 	ldmmi	r1, {r0, r4, r6, r9}
    78a8:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    78ac:	00000076 	andeq	r0, r0, r6, ror r0
    78b0:	00000024 	andeq	r0, r0, r4, lsr #32
    78b4:	000d5a00 	andeq	r5, sp, r0, lsl #20
    78b8:	52011300 	andpl	r1, r1, #0, 6
    78bc:	01134c01 	tsteq	r3, r1, lsl #24
    78c0:	13300151 	teqne	r0, #1073741844	; 0x40000014
    78c4:	76025001 	strvc	r5, [r2], -r1
    78c8:	2c000004 	stccs	0, cr0, [r0], {4}
    78cc:	0000181e 	andeq	r1, r0, lr, lsl r8
    78d0:	0d3f0901 	ldceq	9, cr0, [pc, #-4]!	; 78d4 <__Stack_Size+0x70d4>
    78d4:	03050000 	movweq	r0, #20480	; 0x5000
    78d8:	00000000 	andeq	r0, r0, r0
    78dc:	0002a60c 	andeq	sl, r2, ip, lsl #12
    78e0:	18982c00 	ldmne	r8, {sl, fp, sp}
    78e4:	0a010000 	beq	478ec <__Stack_Size+0x470ec>
    78e8:	00000d55 	andeq	r0, r0, r5, asr sp
    78ec:	00000305 	andeq	r0, r0, r5, lsl #6
    78f0:	a60c0000 	strge	r0, [ip], -r0
    78f4:	2d000002 	stccs	0, cr0, [r0, #-8]
    78f8:	000012d7 	ldrdeq	r1, [r0], -r7
    78fc:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    7900:	0000bf2e 	andeq	fp, r0, lr, lsr #30
    7904:	007e2e00 	rsbseq	r2, lr, r0, lsl #28
    7908:	b82e0000 	stmdalt	lr!, {}	; <UNPREDICTABLE>
    790c:	00000000 	andeq	r0, r0, r0
    7910:	00062600 	andeq	r2, r6, r0, lsl #12
    7914:	a2000400 	andge	r0, r0, #0, 8
    7918:	0400001b 	streq	r0, [r0], #-27
    791c:	0006c001 	andeq	ip, r6, r1
    7920:	18a30100 	stmiane	r3!, {r8}
    7924:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    7928:	0ab80000 	beq	fee07930 <BootRAM+0xdd780d1>
    792c:	00000000 	andeq	r0, r0, r0
    7930:	251d0000 	ldrcs	r0, [sp, #-0]
    7934:	01020000 	mrseq	r0, (UNDEF: 2)
    7938:	00081a06 	andeq	r1, r8, r6, lsl #20
    793c:	0b0d0300 	bleq	348544 <__Stack_Size+0x347d44>
    7940:	1c020000 	stcne	0, cr0, [r2], {-0}
    7944:	00000037 	andeq	r0, r0, r7, lsr r0
    7948:	18080102 	stmdane	r8, {r1, r8}
    794c:	02000008 	andeq	r0, r0, #8
    7950:	065e0502 	ldrbeq	r0, [lr], -r2, lsl #10
    7954:	02020000 	andeq	r0, r2, #0
    7958:	00094907 	andeq	r4, r9, r7, lsl #18
    795c:	05040200 	streq	r0, [r4, #-512]	; 0x200
    7960:	000004da 	ldrdeq	r0, [r0], -sl
    7964:	52070402 	andpl	r0, r7, #33554432	; 0x2000000
    7968:	02000002 	andeq	r0, r0, #2
    796c:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
    7970:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7974:	00024d07 	andeq	r4, r2, r7, lsl #26
    7978:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    797c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7980:	57070402 	strpl	r0, [r7, -r2, lsl #8]
    7984:	03000002 	movweq	r0, #2
    7988:	00000b0f 	andeq	r0, r0, pc, lsl #22
    798c:	002c2a03 	eoreq	r2, ip, r3, lsl #20
    7990:	04020000 	streq	r0, [r2], #-0
    7994:	00078b07 	andeq	r8, r7, r7, lsl #22
    7998:	08010200 	stmdaeq	r1, {r9}
    799c:	00000821 	andeq	r0, r0, r1, lsr #16
    79a0:	0018bc05 	andseq	fp, r8, r5, lsl #24
    79a4:	000a0100 	andeq	r0, sl, r0, lsl #2
    79a8:	40000000 	andmi	r0, r0, r0
    79ac:	01000000 	mrseq	r0, (UNDEF: 0)
    79b0:	0001689c 	muleq	r1, ip, r8
    79b4:	18d10600 	ldmne	r1, {r9, sl}^
    79b8:	0a010000 	beq	479c0 <__Stack_Size+0x471c0>
    79bc:	00000168 	andeq	r0, r0, r8, ror #2
    79c0:	0000531d 	andeq	r5, r0, sp, lsl r3
    79c4:	01007907 	tsteq	r0, r7, lsl #18
    79c8:	00016e0a 	andeq	r6, r1, sl, lsl #28
    79cc:	00534900 	subseq	r4, r3, r0, lsl #18
    79d0:	18b60800 	ldmne	r6!, {fp}
    79d4:	0c010000 	stceq	0, cr0, [r1], {-0}
    79d8:	00000179 	andeq	r0, r0, r9, ror r1
    79dc:	7fb09103 	svcvc	0x00b09103
    79e0:	0018f108 	andseq	pc, r8, r8, lsl #2
    79e4:	790d0100 	stmdbvc	sp, {r8}
    79e8:	02000001 	andeq	r0, r0, #1
    79ec:	00095091 	muleq	r9, r1, r0
    79f0:	4f000000 	svcmi	0x00000000
    79f4:	fd000005 	stc2	0, cr0, [r0, #-20]	; 0xffffffec
    79f8:	0a000000 	beq	7a00 <__Stack_Size+0x7200>
    79fc:	75025201 	strvc	r5, [r2, #-513]	; 0x201
    7a00:	51010a00 	tstpl	r1, r0, lsl #20
    7a04:	0a007602 	beq	25214 <__Stack_Size+0x24a14>
    7a08:	7d025001 	stcvc	0, cr5, [r2, #-4]
    7a0c:	00090000 	andeq	r0, r9, r0
    7a10:	6a000000 	bvs	7a18 <__Stack_Size+0x7218>
    7a14:	17000005 	strne	r0, [r0, -r5]
    7a18:	0a000001 	beq	7a24 <__Stack_Size+0x7224>
    7a1c:	7d025101 	stfvcs	f5, [r2, #-4]
    7a20:	50010a00 	andpl	r0, r1, r0, lsl #20
    7a24:	00509102 	subseq	r9, r0, r2, lsl #2
    7a28:	00000009 	andeq	r0, r0, r9
    7a2c:	00058000 	andeq	r8, r5, r0
    7a30:	00013700 	andeq	r3, r1, r0, lsl #14
    7a34:	52010a00 	andpl	r0, r1, #0, 20
    7a38:	0a007502 	beq	24e48 <__Stack_Size+0x24648>
    7a3c:	76025101 	strvc	r5, [r2], -r1, lsl #2
    7a40:	50010a00 	andpl	r0, r1, r0, lsl #20
    7a44:	00007d02 	andeq	r7, r0, r2, lsl #26
    7a48:	00000009 	andeq	r0, r0, r9
    7a4c:	00059b00 	andeq	r9, r5, r0, lsl #22
    7a50:	00015700 	andeq	r5, r1, r0, lsl #14
    7a54:	52010a00 	andpl	r0, r1, #0, 20
    7a58:	0a509102 	beq	142be68 <__Stack_Size+0x142b668>
    7a5c:	7d025101 	stfvcs	f5, [r2, #-4]
    7a60:	50010a00 	andpl	r0, r1, r0, lsl #20
    7a64:	00007402 	andeq	r7, r0, r2, lsl #8
    7a68:	0000000b 	andeq	r0, r0, fp
    7a6c:	0005b600 	andeq	fp, r5, r0, lsl #12
    7a70:	50010a00 	andpl	r0, r1, r0, lsl #20
    7a74:	00007402 	andeq	r7, r0, r2, lsl #8
    7a78:	76040c00 	strvc	r0, [r4], -r0, lsl #24
    7a7c:	0c000000 	stceq	0, cr0, [r0], {-0}
    7a80:	00017404 	andeq	r7, r1, r4, lsl #8
    7a84:	00760d00 	rsbseq	r0, r6, r0, lsl #26
    7a88:	760e0000 	strvc	r0, [lr], -r0
    7a8c:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
    7a90:	0f000001 	svceq	0x00000001
    7a94:	00000081 	andeq	r0, r0, r1, lsl #1
    7a98:	cb10001f 	blgt	407b1c <__Stack_Size+0x40731c>
    7a9c:	01000018 	tsteq	r0, r8, lsl r0
    7aa0:	01bc0116 			; <UNDEFINED> instruction: 0x01bc0116
    7aa4:	65110000 	ldrvs	r0, [r1, #-0]
    7aa8:	16010079 			; <UNDEFINED> instruction: 0x16010079
    7aac:	00000168 	andeq	r0, r0, r8, ror #2
    7ab0:	00786d11 	rsbseq	r6, r8, r1, lsl sp
    7ab4:	016e1601 	cmneq	lr, r1, lsl #12
    7ab8:	6e120000 	cdpvs	0, 1, cr0, cr2, cr0, {0}
    7abc:	79180100 	ldmdbvc	r8, {r8}
    7ac0:	12000001 	andne	r0, r0, #1
    7ac4:	19010064 	stmdbne	r1, {r2, r5, r6}
    7ac8:	00000179 	andeq	r0, r0, r9, ror r1
    7acc:	18dc1300 	ldmne	ip, {r8, r9, ip}^
    7ad0:	21010000 	mrscs	r0, (UNDEF: 1)
    7ad4:	00000076 	andeq	r0, r0, r6, ror r0
    7ad8:	00022f01 	andeq	r2, r2, r1, lsl #30
    7adc:	00781100 	rsbseq	r1, r8, r0, lsl #2
    7ae0:	01682101 	cmneq	r8, r1, lsl #2
    7ae4:	79110000 	ldmdbvc	r1, {}	; <UNPREDICTABLE>
    7ae8:	6e210100 	sufvss	f0, f1, f0
    7aec:	14000001 	strne	r0, [r0], #-1
    7af0:	00001548 	andeq	r1, r0, r8, asr #10
    7af4:	00682101 	rsbeq	r2, r8, r1, lsl #2
    7af8:	64150000 	ldrvs	r0, [r5], #-0
    7afc:	2f230100 	svccs	0x00230100
    7b00:	20000002 	andcs	r0, r0, r2
    7b04:	135978a3 	cmpne	r9, #10682368	; 0xa30000
    7b08:	75eb4dca 	strbvc	r4, [fp, #3530]!	; 0xdca
    7b0c:	4141d8ab 	smlaltbmi	sp, r1, fp, r8
    7b10:	00700a4d 	rsbseq	r0, r0, sp, asr #20
    7b14:	7779e898 			; <UNDEFINED> instruction: 0x7779e898
    7b18:	8cc74079 	stclhi	0, cr4, [r7], {121}	; 0x79
    7b1c:	2b6ffe73 	blcs	1c074f0 <__Stack_Size+0x1c06cf0>
    7b20:	52036cee 	andpl	r6, r3, #60928	; 0xee00
    7b24:	01006112 	tsteq	r0, r2, lsl r1
    7b28:	0001792a 	andeq	r7, r1, sl, lsr #18
    7b2c:	00621200 	rsbeq	r1, r2, r0, lsl #4
    7b30:	01792b01 	cmneq	r9, r1, lsl #22
    7b34:	63120000 	tstvs	r2, #0
    7b38:	792c0100 	stmdbvc	ip!, {r8}
    7b3c:	00000001 	andeq	r0, r0, r1
    7b40:	0001790d 	andeq	r7, r1, sp, lsl #18
    7b44:	18e21600 	stmiane	r2!, {r9, sl, ip}^
    7b48:	4b010000 	blmi	47b50 <__Stack_Size+0x47350>
    7b4c:	00000076 	andeq	r0, r0, r6, ror r0
    7b50:	00000000 	andeq	r0, r0, r0
    7b54:	000000d4 	ldrdeq	r0, [r0], -r4
    7b58:	053f9c01 	ldreq	r9, [pc, #-3073]!	; 6f5f <__Stack_Size+0x675f>
    7b5c:	65070000 	strvs	r0, [r7, #-0]
    7b60:	4b010078 	blmi	47d48 <__Stack_Size+0x47548>
    7b64:	00000168 	andeq	r0, r0, r8, ror #2
    7b68:	00005380 	andeq	r5, r0, r0, lsl #7
    7b6c:	00796507 	rsbseq	r6, r9, r7, lsl #10
    7b70:	01684b01 	cmneq	r8, r1, lsl #22
    7b74:	53ac0000 			; <UNDEFINED> instruction: 0x53ac0000
    7b78:	6d070000 	stcvs	0, cr0, [r7, #-0]
    7b7c:	4c010078 	stcmi	0, cr0, [r1], {120}	; 0x78
    7b80:	0000016e 	andeq	r0, r0, lr, ror #2
    7b84:	000053d8 	ldrdeq	r5, [r0], -r8
    7b88:	00154806 	andseq	r4, r5, r6, lsl #16
    7b8c:	684c0100 	stmdavs	ip, {r8}^
    7b90:	04000000 	streq	r0, [r0], #-0
    7b94:	12000054 	andne	r0, r0, #84	; 0x54
    7b98:	01006b6f 	tsteq	r0, pc, ror #22
    7b9c:	0000764e 	andeq	r7, r0, lr, asr #12
    7ba0:	01891700 	orreq	r1, r9, r0, lsl #14
    7ba4:	00000000 	andeq	r0, r0, r0
    7ba8:	0a980000 	beq	fe607bb0 <BootRAM+0xd578351>
    7bac:	50010000 	andpl	r0, r1, r0
    7bb0:	00000347 	andeq	r0, r0, r7, asr #6
    7bb4:	00019f18 	andeq	r9, r1, r8, lsl pc
    7bb8:	00543000 	subseq	r3, r4, r0
    7bbc:	01951800 	orrseq	r1, r5, r0, lsl #16
    7bc0:	545c0000 	ldrbpl	r0, [ip], #-0
    7bc4:	98190000 	ldmdals	r9, {}	; <UNPREDICTABLE>
    7bc8:	1a00000a 	bne	7bf8 <__Stack_Size+0x73f8>
    7bcc:	000001a9 	andeq	r0, r0, r9, lsr #3
    7bd0:	7fa89103 	svcvc	0x00a89103
    7bd4:	0001b21a 	andeq	fp, r1, sl, lsl r2
    7bd8:	48910200 	ldmmi	r1, {r9}
    7bdc:	00000009 	andeq	r0, r0, r9
    7be0:	00058000 	andeq	r8, r5, r0
    7be4:	0002ec00 	andeq	lr, r2, r0, lsl #24
    7be8:	52010a00 	andpl	r0, r1, #0, 20
    7bec:	0a007602 	beq	253fc <__Stack_Size+0x24bfc>
    7bf0:	77025101 	strvc	r5, [r2, -r1, lsl #2]
    7bf4:	50010a00 	andpl	r0, r1, r0, lsl #20
    7bf8:	7fa89103 	svcvc	0x00a89103
    7bfc:	00000900 	andeq	r0, r0, r0, lsl #18
    7c00:	056a0000 	strbeq	r0, [sl, #-0]!
    7c04:	03070000 	movweq	r0, #28672	; 0x7000
    7c08:	010a0000 	mrseq	r0, (UNDEF: 10)
    7c0c:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    7c10:	50010a7f 	andpl	r0, r1, pc, ror sl
    7c14:	00489102 	subeq	r9, r8, r2, lsl #2
    7c18:	00000009 	andeq	r0, r0, r9
    7c1c:	00054f00 	andeq	r4, r5, r0, lsl #30
    7c20:	00032800 	andeq	r2, r3, r0, lsl #16
    7c24:	52010a00 	andpl	r0, r1, #0, 20
    7c28:	0a007602 	beq	25438 <__Stack_Size+0x24c38>
    7c2c:	77025101 	strvc	r5, [r2, -r1, lsl #2]
    7c30:	50010a00 	andpl	r0, r1, r0, lsl #20
    7c34:	7fa89103 	svcvc	0x00a89103
    7c38:	00000b00 	andeq	r0, r0, r0, lsl #22
    7c3c:	059b0000 	ldreq	r0, [fp]
    7c40:	010a0000 	mrseq	r0, (UNDEF: 10)
    7c44:	48910252 	ldmmi	r1, {r1, r4, r6, r9}
    7c48:	0351010a 	cmpeq	r1, #-2147483646	; 0x80000002
    7c4c:	0a7fa891 	beq	1ff1e98 <__Stack_Size+0x1ff1698>
    7c50:	74025001 	strvc	r5, [r2], #-1
    7c54:	00000000 	andeq	r0, r0, r0
    7c58:	0001bc1b 	andeq	fp, r1, fp, lsl ip
    7c5c:	00000000 	andeq	r0, r0, r0
    7c60:	00008000 	andeq	r8, r0, r0
    7c64:	1a510100 	bne	144806c <__Stack_Size+0x144786c>
    7c68:	18000005 	stmdane	r0, {r0, r2}
    7c6c:	000001de 	ldrdeq	r0, [r0], -lr
    7c70:	00005488 	andeq	r5, r0, r8, lsl #9
    7c74:	0001d518 	andeq	sp, r1, r8, lsl r5
    7c78:	0054a900 	subseq	sl, r4, r0, lsl #18
    7c7c:	01cc1800 	biceq	r1, ip, r0, lsl #16
    7c80:	54ca0000 	strbpl	r0, [sl], #0
    7c84:	001c0000 	andseq	r0, ip, r0
    7c88:	80000000 	andhi	r0, r0, r0
    7c8c:	1a000000 	bne	7c94 <__Stack_Size+0x7494>
    7c90:	00000213 	andeq	r0, r0, r3, lsl r2
    7c94:	7f889103 	svcvc	0x00889103
    7c98:	00021c1a 	andeq	r1, r2, sl, lsl ip
    7c9c:	a8910300 	ldmge	r1, {r8, r9}
    7ca0:	02251a7f 	eoreq	r1, r5, #520192	; 0x7f000
    7ca4:	91020000 	mrsls	r0, (UNDEF: 2)
    7ca8:	01e91a48 	mvneq	r1, r8, asr #20
    7cac:	03050000 	movweq	r0, #20480	; 0x5000
    7cb0:	00000000 	andeq	r0, r0, r0
    7cb4:	00000009 	andeq	r0, r0, r9
    7cb8:	00059b00 	andeq	r9, r5, r0, lsl #22
    7cbc:	0003c300 	andeq	ip, r3, r0, lsl #6
    7cc0:	52010a00 	andpl	r0, r1, #0, 20
    7cc4:	0a007402 	beq	24cd4 <__Stack_Size+0x244d4>
    7cc8:	74025101 	strvc	r5, [r2], #-257	; 0x101
    7ccc:	50010a00 	andpl	r0, r1, r0, lsl #20
    7cd0:	00489102 	subeq	r9, r8, r2, lsl #2
    7cd4:	00000009 	andeq	r0, r0, r9
    7cd8:	00059b00 	andeq	r9, r5, r0, lsl #22
    7cdc:	0003e700 	andeq	lr, r3, r0, lsl #14
    7ce0:	52010a00 	andpl	r0, r1, #0, 20
    7ce4:	00000305 	andeq	r0, r0, r5, lsl #6
    7ce8:	010a0000 	mrseq	r0, (UNDEF: 10)
    7cec:	48910251 	ldmmi	r1, {r0, r4, r6, r9}
    7cf0:	0350010a 	cmpeq	r0, #-2147483646	; 0x80000002
    7cf4:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    7cf8:	00000009 	andeq	r0, r0, r9
    7cfc:	00058000 	andeq	r8, r5, r0
    7d00:	00040800 	andeq	r0, r4, r0, lsl #16
    7d04:	52010a00 	andpl	r0, r1, #0, 20
    7d08:	0a007602 	beq	25518 <__Stack_Size+0x24d18>
    7d0c:	91035101 	tstls	r3, r1, lsl #2
    7d10:	010a7fa8 	smlatbeq	sl, r8, pc, r7	; <UNPREDICTABLE>
    7d14:	007d0250 	rsbseq	r0, sp, r0, asr r2
    7d18:	00000900 	andeq	r0, r0, r0, lsl #18
    7d1c:	056a0000 	strbeq	r0, [sl, #-0]!
    7d20:	04230000 	strteq	r0, [r3], #-0
    7d24:	010a0000 	mrseq	r0, (UNDEF: 10)
    7d28:	007d0251 	rsbseq	r0, sp, r1, asr r2
    7d2c:	0350010a 	cmpeq	r0, #-2147483646	; 0x80000002
    7d30:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    7d34:	00000009 	andeq	r0, r0, r9
    7d38:	00054f00 	andeq	r4, r5, r0, lsl #30
    7d3c:	00044300 	andeq	r4, r4, r0, lsl #6
    7d40:	52010a00 	andpl	r0, r1, #0, 20
    7d44:	0a007602 	beq	25554 <__Stack_Size+0x24d54>
    7d48:	91025101 	tstls	r2, r1, lsl #2
    7d4c:	50010a48 	andpl	r0, r1, r8, asr #20
    7d50:	00007d02 	andeq	r7, r0, r2, lsl #26
    7d54:	00000009 	andeq	r0, r0, r9
    7d58:	00059b00 	andeq	r9, r5, r0, lsl #22
    7d5c:	00046400 	andeq	r6, r4, r0, lsl #8
    7d60:	52010a00 	andpl	r0, r1, #0, 20
    7d64:	7fa89103 	svcvc	0x00a89103
    7d68:	0251010a 	subseq	r0, r1, #-2147483646	; 0x80000002
    7d6c:	010a007d 	tsteq	sl, sp, ror r0
    7d70:	48910250 	ldmmi	r1, {r4, r6, r9}
    7d74:	00000900 	andeq	r0, r0, r0, lsl #18
    7d78:	05c70000 	strbeq	r0, [r7]
    7d7c:	047e0000 	ldrbteq	r0, [lr], #-0
    7d80:	010a0000 	mrseq	r0, (UNDEF: 10)
    7d84:	48910251 	ldmmi	r1, {r0, r4, r6, r9}
    7d88:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    7d8c:	0900007d 	stmdbeq	r0, {r0, r2, r3, r4, r5, r6}
    7d90:	00000000 	andeq	r0, r0, r0
    7d94:	000005dd 	ldrdeq	r0, [r0], -sp
    7d98:	00000499 	muleq	r0, r9, r4
    7d9c:	0251010a 	subseq	r0, r1, #-2147483646	; 0x80000002
    7da0:	010a007d 	tsteq	sl, sp, ror r0
    7da4:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    7da8:	0009007f 	andeq	r0, r9, pc, ror r0
    7dac:	f3000000 	vhadd.u8	d0, d0, d0
    7db0:	ba000005 	blt	7dcc <__Stack_Size+0x75cc>
    7db4:	0a000004 	beq	7dcc <__Stack_Size+0x75cc>
    7db8:	91035201 	tstls	r3, r1, lsl #4
    7dbc:	010a7fa8 	smlatbeq	sl, r8, pc, r7	; <UNPREDICTABLE>
    7dc0:	007d0251 	rsbseq	r0, sp, r1, asr r2
    7dc4:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    7dc8:	09000075 	stmdbeq	r0, {r0, r2, r4, r5, r6}
    7dcc:	00000000 	andeq	r0, r0, r0
    7dd0:	0000059b 	muleq	r0, fp, r5
    7dd4:	000004da 	ldrdeq	r0, [r0], -sl
    7dd8:	0252010a 	subseq	r0, r2, #-2147483646	; 0x80000002
    7ddc:	010a0075 	tsteq	sl, r5, ror r0
    7de0:	00750251 	rsbseq	r0, r5, r1, asr r2
    7de4:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    7de8:	0900007d 	stmdbeq	r0, {r0, r2, r3, r4, r5, r6}
    7dec:	00000000 	andeq	r0, r0, r0
    7df0:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    7df4:	000004ee 	andeq	r0, r0, lr, ror #9
    7df8:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    7dfc:	0900007d 	stmdbeq	r0, {r0, r2, r3, r4, r5, r6}
    7e00:	00000000 	andeq	r0, r0, r0
    7e04:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    7e08:	00000502 	andeq	r0, r0, r2, lsl #10
    7e0c:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    7e10:	0b004891 	bleq	1a05c <__Stack_Size+0x1985c>
    7e14:	00000000 	andeq	r0, r0, r0
    7e18:	00000613 	andeq	r0, r0, r3, lsl r6
    7e1c:	0251010a 	subseq	r0, r1, #-2147483646	; 0x80000002
    7e20:	010a4891 			; <UNDEFINED> instruction: 0x010a4891
    7e24:	007d0250 	rsbseq	r0, sp, r0, asr r2
    7e28:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7e2c:	00000000 	andeq	r0, r0, r0
    7e30:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    7e34:	0000052e 	andeq	r0, r0, lr, lsr #10
    7e38:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    7e3c:	0b000075 	bleq	8018 <__Stack_Size+0x7818>
    7e40:	00000000 	andeq	r0, r0, r0
    7e44:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    7e48:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    7e4c:	00000074 	andeq	r0, r0, r4, ror r0
    7e50:	0014971d 	andseq	r9, r4, sp, lsl r7
    7e54:	4a1c0400 	bmi	708e5c <__Stack_Size+0x70865c>
    7e58:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    7e5c:	00000179 	andeq	r0, r0, r9, ror r1
    7e60:	0014b41e 	andseq	fp, r4, lr, lsl r4
    7e64:	6a3b0400 	bvs	ec8e6c <__Stack_Size+0xec866c>
    7e68:	1f000005 	svcne	0x00000005
    7e6c:	00000168 	andeq	r0, r0, r8, ror #2
    7e70:	00016e1f 	andeq	r6, r1, pc, lsl lr
    7e74:	016e1f00 	cmneq	lr, r0, lsl #30
    7e78:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    7e7c:	000014ea 	andeq	r1, r0, sl, ror #9
    7e80:	05805104 	streq	r5, [r0, #260]	; 0x104
    7e84:	681f0000 	ldmdavs	pc, {}	; <UNPREDICTABLE>
    7e88:	1f000001 	svcne	0x00000001
    7e8c:	0000016e 	andeq	r0, r0, lr, ror #2
    7e90:	147a1e00 	ldrbtne	r1, [sl], #-3584	; 0xe00
    7e94:	3a040000 	bcc	107e9c <__Stack_Size+0x10769c>
    7e98:	0000059b 	muleq	r0, fp, r5
    7e9c:	0001681f 	andeq	r6, r1, pc, lsl r8
    7ea0:	016e1f00 	cmneq	lr, r0, lsl #30
    7ea4:	6e1f0000 	cdpvs	0, 1, cr0, cr15, cr0, {0}
    7ea8:	00000001 	andeq	r0, r0, r1
    7eac:	0014d51e 	andseq	sp, r4, lr, lsl r5
    7eb0:	b6440400 	strblt	r0, [r4], -r0, lsl #8
    7eb4:	1f000005 	svcne	0x00000005
    7eb8:	00000168 	andeq	r0, r0, r8, ror #2
    7ebc:	00016e1f 	andeq	r6, r1, pc, lsl lr
    7ec0:	016e1f00 	cmneq	lr, r0, lsl #30
    7ec4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    7ec8:	000014c4 	andeq	r1, r0, r4, asr #9
    7ecc:	05c72804 	strbeq	r2, [r7, #2052]	; 0x804
    7ed0:	681f0000 	ldmdavs	pc, {}	; <UNPREDICTABLE>
    7ed4:	00000001 	andeq	r0, r0, r1
    7ed8:	0015ca1e 	andseq	ip, r5, lr, lsl sl
    7edc:	dd5a0400 	cfldrdle	mvd0, [sl, #-0]
    7ee0:	1f000005 	svcne	0x00000005
    7ee4:	00000168 	andeq	r0, r0, r8, ror #2
    7ee8:	00016e1f 	andeq	r6, r1, pc, lsl lr
    7eec:	d61e0000 	ldrle	r0, [lr], -r0
    7ef0:	04000015 	streq	r0, [r0], #-21
    7ef4:	0005f33e 	andeq	pc, r5, lr, lsr r3	; <UNPREDICTABLE>
    7ef8:	01681f00 	cmneq	r8, r0, lsl #30
    7efc:	6e1f0000 	cdpvs	0, 1, cr0, cr15, cr0, {0}
    7f00:	00000001 	andeq	r0, r0, r1
    7f04:	0014ff1e 	andseq	pc, r4, lr, lsl pc	; <UNPREDICTABLE>
    7f08:	13330400 	teqne	r3, #0, 8
    7f0c:	1f000006 	svcne	0x00000006
    7f10:	00000168 	andeq	r0, r0, r8, ror #2
    7f14:	00016e1f 	andeq	r6, r1, pc, lsl lr
    7f18:	016e1f00 	cmneq	lr, r0, lsl #30
    7f1c:	761f0000 	ldrvc	r0, [pc], -r0
    7f20:	00000000 	andeq	r0, r0, r0
    7f24:	00152420 	andseq	r2, r5, r0, lsr #8
    7f28:	762d0400 	strtvc	r0, [sp], -r0, lsl #8
    7f2c:	1f000000 	svcne	0x00000000
    7f30:	0000016e 	andeq	r0, r0, lr, ror #2
    7f34:	00016e1f 	andeq	r6, r1, pc, lsl lr
    7f38:	ac000000 	stcge	0, cr0, [r0], {-0}
    7f3c:	04000005 	streq	r0, [r0], #-5
    7f40:	001d5e00 	andseq	r5, sp, r0, lsl #28
    7f44:	c0010400 	andgt	r0, r1, r0, lsl #8
    7f48:	01000006 	tsteq	r0, r6
    7f4c:	00001921 	andeq	r1, r0, r1, lsr #18
    7f50:	00000893 	muleq	r0, r3, r8
    7f54:	00000b40 	andeq	r0, r0, r0, asr #22
    7f58:	00000000 	andeq	r0, r0, r0
    7f5c:	00002673 	andeq	r2, r0, r3, ror r6
    7f60:	69050402 	stmdbvs	r5, {r1, sl}
    7f64:	0300746e 	movweq	r7, #1134	; 0x46e
    7f68:	02570704 	subseq	r0, r7, #4, 14	; 0x100000
    7f6c:	01030000 	mrseq	r0, (UNDEF: 3)
    7f70:	00081a06 	andeq	r1, r8, r6, lsl #20
    7f74:	08010300 	stmdaeq	r1, {r8, r9}
    7f78:	00000818 	andeq	r0, r0, r8, lsl r8
    7f7c:	5e050203 	cdppl	2, 0, cr0, cr5, cr3, {0}
    7f80:	03000006 	movweq	r0, #6
    7f84:	09490702 	stmdbeq	r9, {r1, r8, r9, sl}^
    7f88:	04030000 	streq	r0, [r3], #-0
    7f8c:	0004da05 	andeq	sp, r4, r5, lsl #20
    7f90:	07040300 	streq	r0, [r4, -r0, lsl #6]
    7f94:	00000252 	andeq	r0, r0, r2, asr r2
    7f98:	d5050803 	strle	r0, [r5, #-2051]	; 0x803
    7f9c:	03000004 	movweq	r0, #4
    7fa0:	024d0708 	subeq	r0, sp, #8, 14	; 0x200000
    7fa4:	04030000 	streq	r0, [r3], #-0
    7fa8:	00078b07 	andeq	r8, r7, r7, lsl #22
    7fac:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    7fb0:	00003a04 	andeq	r3, r0, r4, lsl #20
    7fb4:	08010300 	stmdaeq	r1, {r8, r9}
    7fb8:	00000821 	andeq	r0, r0, r1, lsr #16
    7fbc:	0c026806 	stceq	8, cr6, [r2], {6}
    7fc0:	000000ae 	andeq	r0, r0, lr, lsr #1
    7fc4:	00187907 	andseq	r7, r8, r7, lsl #18
    7fc8:	ae0e0200 	cdpge	2, 0, cr0, cr14, cr0, {0}
    7fcc:	00000000 	andeq	r0, r0, r0
    7fd0:	00172907 	andseq	r2, r7, r7, lsl #18
    7fd4:	be0f0200 	cdplt	2, 0, cr0, cr15, cr0, {0}
    7fd8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7fdc:	00046c07 	andeq	r6, r4, r7, lsl #24
    7fe0:	ce100200 	cdpgt	2, 1, cr0, cr0, cr0, {0}
    7fe4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    7fe8:	00560800 	subseq	r0, r6, r0, lsl #16
    7fec:	00be0000 	adcseq	r0, lr, r0
    7ff0:	6b090000 	blvs	247ff8 <__Stack_Size+0x2477f8>
    7ff4:	01000000 	mrseq	r0, (UNDEF: 0)
    7ff8:	00560800 	subseq	r0, r6, r0, lsl #16
    7ffc:	00ce0000 	sbceq	r0, lr, r0
    8000:	6b090000 	blvs	248008 <__Stack_Size+0x247808>
    8004:	07000000 	streq	r0, [r0, -r0]
    8008:	003a0800 	eorseq	r0, sl, r0, lsl #16
    800c:	00de0000 	sbcseq	r0, lr, r0
    8010:	6b090000 	blvs	248018 <__Stack_Size+0x247818>
    8014:	3f000000 	svccc	0x00000000
    8018:	13a50a00 			; <UNDEFINED> instruction: 0x13a50a00
    801c:	12020000 	andne	r0, r2, #0
    8020:	00000081 	andeq	r0, r0, r1, lsl #1
    8024:	00193f0b 	andseq	r3, r9, fp, lsl #30
    8028:	01c10100 	biceq	r0, r1, r0, lsl #2
    802c:	0000012d 	andeq	r0, r0, sp, lsr #2
    8030:	7874630c 	ldmdavc	r4!, {r2, r3, r8, r9, sp, lr}^
    8034:	2dc10100 	stfcse	f0, [r1]
    8038:	0d000001 	stceq	0, cr0, [r0, #-4]
    803c:	000011e1 	andeq	r1, r0, r1, ror #3
    8040:	0074c101 	rsbseq	ip, r4, r1, lsl #2
    8044:	4e0d0000 	cdpmi	0, 0, cr0, cr13, cr0, {0}
    8048:	01000013 	tsteq	r0, r3, lsl r0
    804c:	000056c1 	andeq	r5, r0, r1, asr #13
    8050:	18ff0e00 	ldmne	pc!, {r9, sl, fp}^	; <UNPREDICTABLE>
    8054:	c3010000 	movwgt	r0, #4096	; 0x1000
    8058:	00000056 	andeq	r0, r0, r6, asr r0
    805c:	0019040e 	andseq	r0, r9, lr, lsl #8
    8060:	56c30100 	strbpl	r0, [r3], r0, lsl #2
    8064:	00000000 	andeq	r0, r0, r0
    8068:	00de0405 	sbcseq	r0, lr, r5, lsl #8
    806c:	350f0000 	strcc	r0, [pc, #-0]	; 8074 <__Stack_Size+0x7874>
    8070:	01000013 	tsteq	r0, r3, lsl r0
    8074:	0031642f 	eorseq	r6, r1, pc, lsr #8
    8078:	00005808 	andeq	r5, r0, r8, lsl #16
    807c:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
    8080:	10000001 	andne	r0, r0, r1
    8084:	00787463 	rsbseq	r7, r8, r3, ror #8
    8088:	012d2f01 	teqeq	sp, r1, lsl #30
    808c:	50010000 	andpl	r0, r1, r0
    8090:	19300f00 	ldmdbne	r0!, {r8, r9, sl, fp}
    8094:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    8098:	080031bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, ip, sp}
    809c:	00001f64 	andeq	r1, r0, r4, ror #30
    80a0:	021d9c01 	andseq	r9, sp, #256	; 0x100
    80a4:	63110000 	tstvs	r1, #0
    80a8:	01007874 	tsteq	r0, r4, ror r8
    80ac:	00012d3e 	andeq	r2, r1, lr, lsr sp
    80b0:	0054eb00 	subseq	lr, r4, r0, lsl #22
    80b4:	0e8f1200 	cdpeq	2, 8, cr1, cr15, cr0, {0}
    80b8:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    80bc:	00000074 	andeq	r0, r0, r4, ror r0
    80c0:	00005542 	andeq	r5, r0, r2, asr #10
    80c4:	00194d13 	andseq	r4, r9, r3, lsl sp
    80c8:	56400100 	strbpl	r0, [r0], -r0, lsl #2
    80cc:	63000000 	movwvs	r0, #0
    80d0:	13000055 	movwne	r0, #85	; 0x55
    80d4:	00001953 	andeq	r1, r0, r3, asr r9
    80d8:	00564001 	subseq	r4, r6, r1
    80dc:	57d50000 	ldrbpl	r0, [r5, r0]
    80e0:	57140000 	ldrpl	r0, [r4, -r0]
    80e4:	1d400100 	stfnee	f0, [r0, #-0]
    80e8:	7f000002 	svcvc	0x00000002
    80ec:	14000064 	strne	r0, [r0], #-100	; 0x64
    80f0:	41010041 	tstmi	r1, r1, asr #32
    80f4:	00000056 	andeq	r0, r0, r6, asr r0
    80f8:	00006d64 	andeq	r6, r0, r4, ror #26
    80fc:	01004214 	tsteq	r0, r4, lsl r2
    8100:	00005641 	andeq	r5, r0, r1, asr #12
    8104:	006de700 	rsbeq	lr, sp, r0, lsl #14
    8108:	00431400 	subeq	r1, r3, r0, lsl #8
    810c:	00564101 	subseq	r4, r6, r1, lsl #2
    8110:	6e490000 	cdpvs	0, 4, cr0, cr9, cr0, {0}
    8114:	44140000 	ldrmi	r0, [r4], #-0
    8118:	56410100 	strbpl	r0, [r1], -r0, lsl #2
    811c:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    8120:	1400006e 	strne	r0, [r0], #-110	; 0x6e
    8124:	41010045 	tstmi	r1, r5, asr #32
    8128:	00000056 	andeq	r0, r0, r6, asr r0
    812c:	00006ef3 	strdeq	r6, [r0], -r3
    8130:	01004614 	tsteq	r0, r4, lsl r6
    8134:	00005641 	andeq	r5, r0, r1, asr #12
    8138:	006f7400 	rsbeq	r7, pc, r0, lsl #8
    813c:	00471400 	subeq	r1, r7, r0, lsl #8
    8140:	00564101 	subseq	r4, r6, r1, lsl #2
    8144:	6fec0000 	svcvs	0x00ec0000
    8148:	48140000 	ldmdami	r4, {}	; <UNPREDICTABLE>
    814c:	56410100 	strbpl	r0, [r1], -r0, lsl #2
    8150:	64000000 	strvs	r0, [r0], #-0
    8154:	00000070 	andeq	r0, r0, r0, ror r0
    8158:	00005608 	andeq	r5, r0, r8, lsl #12
    815c:	00022d00 	andeq	r2, r2, r0, lsl #26
    8160:	006b0900 	rsbeq	r0, fp, r0, lsl #18
    8164:	003f0000 	eorseq	r0, pc, r0
    8168:	0000e915 	andeq	lr, r0, r5, lsl r9
    816c:	00512000 	subseq	r2, r1, r0
    8170:	00008e08 	andeq	r8, r0, r8, lsl #28
    8174:	f29c0100 	vaddw.s16	q0, q6, d0
    8178:	16000002 	strne	r0, [r0], -r2
    817c:	000000f5 	strdeq	r0, [r0], -r5
    8180:	000070e7 	andeq	r7, r0, r7, ror #1
    8184:	00010016 	andeq	r0, r1, r6, lsl r0
    8188:	00713f00 	rsbseq	r3, r1, r0, lsl #30
    818c:	010b1600 	tsteq	fp, r0, lsl #12
    8190:	719d0000 	orrsvc	r0, sp, r0
    8194:	16170000 	ldrne	r0, [r7], -r0
    8198:	17000001 	strne	r0, [r0, -r1]
    819c:	00000121 	andeq	r0, r0, r1, lsr #2
    81a0:	000ad018 	andeq	sp, sl, r8, lsl r0
    81a4:	010b1600 	tsteq	fp, r0, lsl #12
    81a8:	71fb0000 	mvnsvc	r0, r0
    81ac:	00160000 	andseq	r0, r6, r0
    81b0:	53000001 	movwpl	r0, #1
    81b4:	16000072 			; <UNDEFINED> instruction: 0x16000072
    81b8:	000000f5 	strdeq	r0, [r0], -r5
    81bc:	0000729d 	muleq	r0, sp, r2
    81c0:	000ad018 	andeq	sp, sl, r8, lsl r0
    81c4:	01161900 	tsteq	r6, r0, lsl #18
    81c8:	72f50000 	rscsvc	r0, r5, #0
    81cc:	21190000 	tstcs	r9, r0
    81d0:	36000001 	strcc	r0, [r0], -r1
    81d4:	1a000073 	bne	83a8 <__Stack_Size+0x7ba8>
    81d8:	08005154 	stmdaeq	r0, {r2, r4, r6, r8, ip, lr}
    81dc:	00000156 	andeq	r0, r0, r6, asr r1
    81e0:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    81e4:	0251011b 	subseq	r0, r1, #-1073741818	; 0xc0000006
    81e8:	011b0074 	tsteq	fp, r4, ror r0
    81ec:	00760250 	rsbseq	r0, r6, r0, asr r2
    81f0:	518c1c00 	orrpl	r1, ip, r0, lsl #24
    81f4:	058b0800 	streq	r0, [fp, #2048]	; 0x800
    81f8:	9a1a0000 	bls	688200 <__Stack_Size+0x687a00>
    81fc:	8b080051 	blhi	208348 <__Stack_Size+0x207b48>
    8200:	d9000005 	stmdble	r0, {r0, r2}
    8204:	1b000002 	blne	8214 <__Stack_Size+0x7a14>
    8208:	74025201 	strvc	r5, [r2], #-513	; 0x201
    820c:	51011b00 	tstpl	r1, r0, lsl #22
    8210:	00007802 	andeq	r7, r0, r2, lsl #16
    8214:	0051a41d 	subseq	sl, r1, sp, lsl r4
    8218:	00015608 	andeq	r5, r1, r8, lsl #12
    821c:	51011b00 	tstpl	r1, r0, lsl #22
    8220:	1b287602 	blne	a25a30 <__Stack_Size+0xa25230>
    8224:	76025001 	strvc	r5, [r2], -r1
    8228:	00000000 	andeq	r0, r0, r0
    822c:	19090f00 	stmdbne	r9, {r8, r9, sl, fp}
    8230:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    8234:	080051b0 	stmdaeq	r0, {r4, r5, r7, r8, ip, lr}
    8238:	00000218 	andeq	r0, r0, r8, lsl r2
    823c:	054b9c01 	strbeq	r9, [fp, #-3073]	; 0xc01
    8240:	63110000 	tstvs	r1, #0
    8244:	01007874 	tsteq	r0, r4, ror r8
    8248:	00012df0 	strdeq	r2, [r1], -r0
    824c:	00736e00 	rsbseq	r6, r3, r0, lsl #28
    8250:	19681200 	stmdbne	r8!, {r9, ip}^
    8254:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    8258:	00000074 	andeq	r0, r0, r4, ror r0
    825c:	0000738c 	andeq	r7, r0, ip, lsl #7
    8260:	00196f13 	andseq	r6, r9, r3, lsl pc
    8264:	56f20100 	ldrbtpl	r0, [r2], r0, lsl #2
    8268:	d6000000 	strle	r0, [r0], -r0
    826c:	13000073 	movwne	r0, #115	; 0x73
    8270:	00001917 	andeq	r1, r0, r7, lsl r9
    8274:	0056f201 	subseq	pc, r6, r1, lsl #4
    8278:	740a0000 	strvc	r0, [sl], #-0
    827c:	1c130000 	ldcne	0, cr0, [r3], {-0}
    8280:	01000019 	tsteq	r0, r9, lsl r0
    8284:	000056f3 	strdeq	r5, [r0], -r3
    8288:	00743300 	rsbseq	r3, r4, r0, lsl #6
    828c:	6f6c1400 	svcvs	0x006c1400
    8290:	f3010077 	vqadd.u8	q0, <illegal reg q0.5>, <illegal reg q11.5>
    8294:	00000056 	andeq	r0, r0, r6, asr r0
    8298:	0000745c 	andeq	r7, r0, ip, asr r4
    829c:	0018f81e 	andseq	pc, r8, lr, lsl r8	; <UNPREDICTABLE>
    82a0:	4bf40100 	blmi	ffd086a8 <BootRAM+0xec78e49>
    82a4:	02000005 	andeq	r0, r0, #5
    82a8:	e91f5091 	ldmdb	pc, {r0, r4, r7, ip, lr}	; <UNPREDICTABLE>
    82ac:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    82b0:	e8080051 	stmda	r8, {r0, r4, r6}
    82b4:	0100000a 	tsteq	r0, sl
    82b8:	045b0100 	ldrbeq	r0, [fp], #-256	; 0x100
    82bc:	0b160000 	bleq	5882c4 <__Stack_Size+0x587ac4>
    82c0:	0a000001 	beq	82cc <__Stack_Size+0x7acc>
    82c4:	20000074 	andcs	r0, r0, r4, ror r0
    82c8:	00000100 	andeq	r0, r0, r0, lsl #2
    82cc:	02cc0306 	sbceq	r0, ip, #402653184	; 0x18000000
    82d0:	209f2000 	addscs	r2, pc, r0
    82d4:	000000f5 	strdeq	r0, [r0], -r5
    82d8:	e8185401 	ldmda	r8, {r0, sl, ip, lr}
    82dc:	1700000a 	strne	r0, [r0, -sl]
    82e0:	00000116 	andeq	r0, r0, r6, lsl r1
    82e4:	00012117 	andeq	r2, r1, r7, lsl r1
    82e8:	0ae81800 	beq	ffa0e2f0 <BootRAM+0xe97ea91>
    82ec:	0b160000 	bleq	5882f4 <__Stack_Size+0x587af4>
    82f0:	85000001 	strhi	r0, [r0, #-1]
    82f4:	16000074 			; <UNDEFINED> instruction: 0x16000074
    82f8:	00000100 	andeq	r0, r0, r0, lsl #2
    82fc:	000074e8 	andeq	r7, r0, r8, ror #9
    8300:	0000f520 	andeq	pc, r0, r0, lsr #10
    8304:	18540100 	ldmdane	r4, {r8}^
    8308:	00000ae8 	andeq	r0, r0, r8, ror #21
    830c:	00011619 	andeq	r1, r1, r9, lsl r6
    8310:	00754100 	rsbseq	r4, r5, r0, lsl #2
    8314:	01211900 	teqeq	r1, r0, lsl #18
    8318:	75820000 	strvc	r0, [r2]
    831c:	3e1a0000 	cdpcc	0, 1, cr0, cr10, cr0, {0}
    8320:	8b080052 	blhi	208470 <__Stack_Size+0x207c70>
    8324:	02000005 	andeq	r0, r0, #5
    8328:	1b000004 	blne	8340 <__Stack_Size+0x7b40>
    832c:	79025101 	stmdbvc	r2, {r0, r8, ip, lr}
    8330:	50011b00 	andpl	r1, r1, r0, lsl #22
    8334:	76007407 	strvc	r7, [r0], -r7, lsl #8
    8338:	28232200 	stmdacs	r3!, {r9, sp}
    833c:	53241a00 	teqpl	r4, #0, 20
    8340:	058b0800 	streq	r0, [fp, #2048]	; 0x800
    8344:	04270000 	strteq	r0, [r7], #-0
    8348:	011b0000 	tsteq	fp, r0
    834c:	00770252 	rsbseq	r0, r7, r2, asr r2
    8350:	0251011b 	subseq	r0, r1, #-1073741818	; 0xc0000006
    8354:	011b0079 	tsteq	fp, r9, ror r0
    8358:	00740750 	rsbseq	r0, r4, r0, asr r7
    835c:	23220076 	teqcs	r2, #118	; 0x76
    8360:	341a0028 	ldrcc	r0, [sl], #-40	; 0x28
    8364:	56080053 			; <UNDEFINED> instruction: 0x56080053
    8368:	41000001 	tstmi	r0, r1
    836c:	1b000004 	blne	8384 <__Stack_Size+0x7b84>
    8370:	74025101 	strvc	r5, [r2], #-257	; 0x101
    8374:	50011b28 	andpl	r1, r1, r8, lsr #22
    8378:	00007402 	andeq	r7, r0, r2, lsl #8
    837c:	0053481d 	subseq	r4, r3, sp, lsl r8
    8380:	00015608 	andeq	r5, r1, r8, lsl #12
    8384:	51011b00 	tstpl	r1, r0, lsl #22
    8388:	1b007602 	blne	25b98 <__Stack_Size+0x25398>
    838c:	74025001 	strvc	r5, [r2], #-1
    8390:	00000000 	andeq	r0, r0, r0
    8394:	e9210000 	stmdb	r1!, {}	; <UNPREDICTABLE>
    8398:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    839c:	20080052 	andcs	r0, r8, r2, asr r0
    83a0:	0100000b 	tsteq	r0, fp
    83a4:	0b160101 	bleq	5887b0 <__Stack_Size+0x587fb0>
    83a8:	e0000001 	and	r0, r0, r1
    83ac:	16000075 			; <UNDEFINED> instruction: 0x16000075
    83b0:	00000100 	andeq	r0, r0, r0, lsl #2
    83b4:	0000760c 	andeq	r7, r0, ip, lsl #12
    83b8:	0000f516 	andeq	pc, r0, r6, lsl r5	; <UNPREDICTABLE>
    83bc:	00764200 	rsbseq	r4, r6, r0, lsl #4
    83c0:	0b201800 	bleq	80e3c8 <__Stack_Size+0x80dbc8>
    83c4:	16170000 	ldrne	r0, [r7], -r0
    83c8:	17000001 	strne	r0, [r0, -r1]
    83cc:	00000121 	andeq	r0, r0, r1, lsr #2
    83d0:	000b2018 	andeq	r2, fp, r8, lsl r0
    83d4:	010b1600 	tsteq	fp, r0, lsl #12
    83d8:	766b0000 	strbtvc	r0, [fp], -r0
    83dc:	00160000 	andseq	r0, r6, r0
    83e0:	ba000001 	blt	83ec <__Stack_Size+0x7bec>
    83e4:	16000076 			; <UNDEFINED> instruction: 0x16000076
    83e8:	000000f5 	strdeq	r0, [r0], -r5
    83ec:	00007642 	andeq	r7, r0, r2, asr #12
    83f0:	000b2018 	andeq	r2, fp, r8, lsl r0
    83f4:	01161900 	tsteq	r6, r0, lsl #18
    83f8:	76f90000 	ldrbtvc	r0, [r9], r0
    83fc:	21190000 	tstcs	r9, r0
    8400:	2f000001 	svccs	0x00000001
    8404:	1a000077 	bne	85e8 <__Stack_Size+0x7de8>
    8408:	08005278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, lr}
    840c:	0000058b 	andeq	r0, r0, fp, lsl #11
    8410:	000004f1 	strdeq	r0, [r0], -r1
    8414:	0252011b 	subseq	r0, r2, #-1073741818	; 0xc0000006
    8418:	011b0076 	tsteq	fp, r6, ror r0
    841c:	00790251 	rsbseq	r0, r9, r1, asr r2
    8420:	0750011b 	smmlaeq	r0, fp, r1, r0
    8424:	00780074 	rsbseq	r0, r8, r4, ror r0
    8428:	00282322 	eoreq	r2, r8, r2, lsr #6
    842c:	0053781a 	subseq	r7, r3, sl, lsl r8
    8430:	00058b08 	andeq	r8, r5, r8, lsl #22
    8434:	00051600 	andeq	r1, r5, r0, lsl #12
    8438:	52011b00 	andpl	r1, r1, #0, 22
    843c:	1b007902 	blne	2684c <__Stack_Size+0x2604c>
    8440:	7d025101 	stfvcs	f5, [r2, #-4]
    8444:	50011b00 	andpl	r1, r1, r0, lsl #22
    8448:	78007407 	stmdavc	r0, {r0, r1, r2, sl, ip, sp, lr}
    844c:	28232200 	stmdacs	r3!, {r9, sp}
    8450:	538a1a00 	orrpl	r1, sl, #0, 20
    8454:	01560800 	cmpeq	r6, r0, lsl #16
    8458:	05300000 	ldreq	r0, [r0, #-0]!
    845c:	011b0000 	tsteq	fp, r0
    8460:	28740251 	ldmdacs	r4!, {r0, r4, r6, r9}^
    8464:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    8468:	1d000074 	stcne	0, cr0, [r0, #-464]	; 0xfffffe30
    846c:	0800539a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, ip, lr}
    8470:	00000156 	andeq	r0, r0, r6, asr r1
    8474:	0251011b 	subseq	r0, r1, #-1073741818	; 0xc0000006
    8478:	011b0077 	tsteq	fp, r7, ror r0
    847c:	00740250 	rsbseq	r0, r4, r0, asr r2
    8480:	00000000 	andeq	r0, r0, r0
    8484:	3a080000 	bcc	20848c <__Stack_Size+0x207c8c>
    8488:	5b000000 	blpl	8490 <__Stack_Size+0x7c90>
    848c:	09000005 	stmdbeq	r0, {r0, r2}
    8490:	0000006b 	andeq	r0, r0, fp, rrx
    8494:	591e0007 	ldmdbpl	lr, {r0, r1, r2}
    8498:	01000019 	tsteq	r0, r9, lsl r0
    849c:	0000cee8 	andeq	ip, r0, r8, ror #29
    84a0:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
    84a4:	08200002 	stmdaeq	r0!, {r1}
    84a8:	0000002c 	andeq	r0, r0, ip, lsr #32
    84ac:	0000057c 	andeq	r0, r0, ip, ror r5
    84b0:	00006b09 	andeq	r6, r0, r9, lsl #22
    84b4:	22003f00 	andcs	r3, r0, #0, 30
    84b8:	1201006b 	andne	r0, r1, #107	; 0x6b
    84bc:	0000056c 	andeq	r0, r0, ip, ror #10
    84c0:	030c0305 	movweq	r0, #49925	; 0xc305
    84c4:	34232000 	strtcc	r2, [r3], #-0
    84c8:	72000015 	andvc	r0, r0, #21
    84cc:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    84d0:	24000005 	strcs	r0, [r0], #-5
    84d4:	00000072 	andeq	r0, r0, r2, ror r0
    84d8:	0005a824 	andeq	sl, r5, r4, lsr #16
    84dc:	006b2400 	rsbeq	r2, fp, r0, lsl #8
    84e0:	05000000 	streq	r0, [r0, #-0]
    84e4:	0005ae04 	andeq	sl, r5, r4, lsl #28
    84e8:	7f002500 	svcvc	0x00002500
    84ec:	04000007 	streq	r0, [r0], #-7
    84f0:	001f3e00 	andseq	r3, pc, r0, lsl #28
    84f4:	c0010400 	andgt	r0, r1, r0, lsl #8
    84f8:	01000006 	tsteq	r0, r6
    84fc:	000019a8 	andeq	r1, r0, r8, lsr #19
    8500:	00000893 	muleq	r0, r3, r8
    8504:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    8508:	00000000 	andeq	r0, r0, r0
    850c:	00002e7c 	andeq	r2, r0, ip, ror lr
    8510:	4d070802 	stcmi	8, cr0, [r7, #-8]
    8514:	02000002 	andeq	r0, r0, #2
    8518:	08180801 	ldmdaeq	r8, {r0, fp}
    851c:	04020000 	streq	r0, [r2], #-0
    8520:	00025707 	andeq	r5, r2, r7, lsl #14
    8524:	06010200 	streq	r0, [r1], -r0, lsl #4
    8528:	0000081a 	andeq	r0, r0, sl, lsl r8
    852c:	000b0d03 	andeq	r0, fp, r3, lsl #26
    8530:	2c1c0200 	lfmcs	f0, 4, [ip], {-0}
    8534:	02000000 	andeq	r0, r0, #0
    8538:	065e0502 	ldrbeq	r0, [lr], -r2, lsl #10
    853c:	02020000 	andeq	r0, r2, #0
    8540:	00094907 	andeq	r4, r9, r7, lsl #18
    8544:	05040200 	streq	r0, [r4, #-512]	; 0x200
    8548:	000004da 	ldrdeq	r0, [r0], -sl
    854c:	52070402 	andpl	r0, r7, #33554432	; 0x2000000
    8550:	02000002 	andeq	r0, r0, #2
    8554:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
    8558:	b3030000 	movwlt	r0, #12288	; 0x3000
    855c:	02000016 	andeq	r0, r0, #22
    8560:	0000254e 	andeq	r2, r0, lr, asr #10
    8564:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    8568:	00746e69 	rsbseq	r6, r4, r9, ror #28
    856c:	000b0f03 	andeq	r0, fp, r3, lsl #30
    8570:	412a0300 	teqmi	sl, r0, lsl #6
    8574:	03000000 	movweq	r0, #0
    8578:	000016b5 			; <UNDEFINED> instruction: 0x000016b5
    857c:	006f4e03 	rsbeq	r4, pc, r3, lsl #28
    8580:	d3030000 	movwle	r0, #12288	; 0x3000
    8584:	0400000a 	streq	r0, [r0], #-10
    8588:	000033d4 	ldrdeq	r3, [r0], -r4
    858c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    8590:	0000078b 	andeq	r0, r0, fp, lsl #15
    8594:	01020405 	tsteq	r2, r5, lsl #8
    8598:	00082108 	andeq	r2, r8, r8, lsl #2
    859c:	17220600 	strne	r0, [r2, -r0, lsl #12]!
    85a0:	05400000 	strbeq	r0, [r0, #-0]
    85a4:	0000c914 	andeq	ip, r0, r4, lsl r9
    85a8:	00680700 	rsbeq	r0, r8, r0, lsl #14
    85ac:	00c91505 	sbceq	r1, r9, r5, lsl #10
    85b0:	00000000 	andeq	r0, r0, r0
    85b4:	00008c08 	andeq	r8, r0, r8, lsl #24
    85b8:	0000d900 	andeq	sp, r0, r0, lsl #18
    85bc:	00a20900 	adceq	r0, r2, r0, lsl #18
    85c0:	00070000 	andeq	r0, r7, r0
    85c4:	00199a0a 	andseq	r9, r9, sl, lsl #20
    85c8:	8c5f0100 	ldfhie	f0, [pc], {-0}
    85cc:	03000000 	movweq	r0, #0
    85d0:	000000fe 	strdeq	r0, [r0], -lr
    85d4:	0100780b 	tsteq	r0, fp, lsl #16
    85d8:	00008c5f 	andeq	r8, r0, pc, asr ip
    85dc:	17b60c00 	ldrne	r0, [r6, r0, lsl #24]!
    85e0:	5f010000 	svcpl	0x00010000
    85e4:	0000007a 	andeq	r0, r0, sl, ror r0
    85e8:	19a00d00 	stmibne	r0!, {r8, sl, fp}
    85ec:	4b010000 	blmi	485f4 <__Stack_Size+0x47df4>
    85f0:	00011d03 	andeq	r1, r1, r3, lsl #26
    85f4:	00780b00 	rsbseq	r0, r8, r0, lsl #22
    85f8:	011d4b01 	tsteq	sp, r1, lsl #22
    85fc:	760b0000 	strvc	r0, [fp], -r0
    8600:	8c4b0100 	stfhie	f0, [fp], {-0}
    8604:	00000000 	andeq	r0, r0, r0
    8608:	0081040e 	addeq	r0, r1, lr, lsl #8
    860c:	b70a0000 	strlt	r0, [sl, -r0]
    8610:	01000019 	tsteq	r0, r9, lsl r0
    8614:	00008c3b 	andeq	r8, r0, fp, lsr ip
    8618:	01460300 	mrseq	r0, SPSR_und
    861c:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
    8620:	463b0100 	ldrtmi	r0, [fp], -r0, lsl #2
    8624:	0f000001 	svceq	0x00000001
    8628:	3d010072 	stccc	0, cr0, [r1, #-456]	; 0xfffffe38
    862c:	0000008c 	andeq	r0, r0, ip, lsl #1
    8630:	4c040e00 	stcmi	14, cr0, [r4], {-0}
    8634:	10000001 	andne	r0, r0, r1
    8638:	00000081 	andeq	r0, r0, r1, lsl #1
    863c:	00174911 	andseq	r4, r7, r1, lsl r9
    8640:	c8640100 	stmdagt	r4!, {r8}^
    8644:	94080053 	strls	r0, [r8], #-83	; 0x53
    8648:	01000004 	tsteq	r0, r4
    864c:	0004619c 	muleq	r4, ip, r1
    8650:	00731200 	rsbseq	r1, r3, r0, lsl #4
    8654:	04616401 	strbteq	r6, [r1], #-1025	; 0x401
    8658:	77860000 	strvc	r0, [r6, r0]
    865c:	62120000 	andsvs	r0, r2, #0
    8660:	01006b6c 	tsteq	r0, ip, ror #22
    8664:	00014664 	andeq	r4, r1, r4, ror #12
    8668:	0077b300 	rsbseq	fp, r7, r0, lsl #6
    866c:	00771300 	rsbseq	r1, r7, r0, lsl #6
    8670:	04676601 	strbteq	r6, [r7], #-1537	; 0x601
    8674:	91030000 	mrsls	r0, (UNDEF: 3)
    8678:	61147ee0 	tstvs	r4, r0, ror #29
    867c:	8c670100 	stfhie	f0, [r7], #-0
    8680:	d1000000 	mrsle	r0, (UNDEF: 0)
    8684:	14000077 	strne	r0, [r0], #-119	; 0x77
    8688:	67010062 	strvs	r0, [r1, -r2, rrx]
    868c:	0000008c 	andeq	r0, r0, ip, lsl #1
    8690:	00007831 	andeq	r7, r0, r1, lsr r8
    8694:	01006314 	tsteq	r0, r4, lsl r3
    8698:	00008c67 	andeq	r8, r0, r7, ror #24
    869c:	00787300 	rsbseq	r7, r8, r0, lsl #6
    86a0:	00641400 	rsbeq	r1, r4, r0, lsl #8
    86a4:	008c6701 	addeq	r6, ip, r1, lsl #14
    86a8:	78bc0000 	ldmvc	ip!, {}	; <UNPREDICTABLE>
    86ac:	65140000 	ldrvs	r0, [r4, #-0]
    86b0:	8c670100 	stfhie	f0, [r7], #-0
    86b4:	20000000 	andcs	r0, r0, r0
    86b8:	14000079 	strne	r0, [r0], #-121	; 0x79
    86bc:	67010066 	strvs	r0, [r1, -r6, rrx]
    86c0:	0000008c 	andeq	r0, r0, ip, lsl #1
    86c4:	00007974 	andeq	r7, r0, r4, ror r9
    86c8:	01006714 	tsteq	r0, r4, lsl r7
    86cc:	00008c67 	andeq	r8, r0, r7, ror #24
    86d0:	0079b500 	rsbseq	fp, r9, r0, lsl #10
    86d4:	00681400 	rsbeq	r1, r8, r0, lsl #8
    86d8:	008c6701 	addeq	r6, ip, r1, lsl #14
    86dc:	79fd0000 	ldmibvc	sp!, {}^	; <UNPREDICTABLE>
    86e0:	69140000 	ldmdbvs	r4, {}	; <UNPREDICTABLE>
    86e4:	7a680100 	bvc	1a08aec <__Stack_Size+0x1a082ec>
    86e8:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    86ec:	1500007a 	strne	r0, [r0, #-122]	; 0x7a
    86f0:	00000123 	andeq	r0, r0, r3, lsr #2
    86f4:	080053d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, ip, lr}
    86f8:	00000b68 	andeq	r0, r0, r8, ror #22
    86fc:	02306b01 	eorseq	r6, r0, #1024	; 0x400
    8700:	33160000 	tstcc	r6, #0
    8704:	8c000001 	stchi	0, cr0, [r0], {1}
    8708:	1700007a 	smlsdxne	r0, sl, r0, r0
    870c:	00000b68 	andeq	r0, r0, r8, ror #22
    8710:	00013c18 	andeq	r3, r1, r8, lsl ip
    8714:	007b0700 	rsbseq	r0, fp, r0, lsl #14
    8718:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    871c:	08005524 	stmdaeq	r0, {r2, r5, r8, sl, ip, lr}
    8720:	00000262 	andeq	r0, r0, r2, ror #4
    8724:	00697714 	rsbeq	r7, r9, r4, lsl r7
    8728:	04777b01 	ldrbteq	r7, [r7], #-2817	; 0xb01
    872c:	7be30000 	blvc	ff8c8734 <BootRAM+0xe838ed5>
    8730:	7f1a0000 	svcvc	0x001a0000
    8734:	01000019 	tsteq	r0, r9, lsl r0
    8738:	0004777c 	andeq	r7, r4, ip, ror r7
    873c:	007bf800 	rsbseq	pc, fp, r0, lsl #16
    8740:	69771400 	ldmdbvs	r7!, {sl, ip}^
    8744:	7d010032 	stcvc	0, cr0, [r1, #-200]	; 0xffffff38
    8748:	00000477 	andeq	r0, r0, r7, ror r4
    874c:	00007c52 	andeq	r7, r0, r2, asr ip
    8750:	37697714 			; <UNDEFINED> instruction: 0x37697714
    8754:	777e0100 	ldrbvc	r0, [lr, -r0, lsl #2]!
    8758:	96000004 	strls	r0, [r0], -r4
    875c:	1400007c 	strne	r0, [r0], #-124	; 0x7c
    8760:	01003073 	tsteq	r0, r3, ror r0
    8764:	0004777f 	andeq	r7, r4, pc, ror r7
    8768:	007cde00 	rsbseq	sp, ip, r0, lsl #28
    876c:	31731400 	cmncc	r3, r0, lsl #8
    8770:	77810100 	strvc	r0, [r1, r0, lsl #2]
    8774:	1a000004 	bne	878c <__Stack_Size+0x7f8c>
    8778:	1400007e 	strne	r0, [r0], #-126	; 0x7e
    877c:	01003053 	qaddeq	r3, r3, r0
    8780:	00047785 	andeq	r7, r4, r5, lsl #15
    8784:	007f0300 	rsbseq	r0, pc, r0, lsl #6
    8788:	31531400 	cmpcc	r3, r0, lsl #8
    878c:	77860100 	strvc	r0, [r6, r0, lsl #2]
    8790:	c8000004 	stmdagt	r0, {r2}
    8794:	1400007f 	strne	r0, [r0], #-127	; 0x7f
    8798:	01006863 	tsteq	r0, r3, ror #16
    879c:	00047787 	andeq	r7, r4, r7, lsl #15
    87a0:	00808a00 	addeq	r8, r0, r0, lsl #20
    87a4:	194d1a00 	stmdbne	sp, {r9, fp, ip}^
    87a8:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    87ac:	00000477 	andeq	r0, r0, r7, ror r4
    87b0:	000080d4 	ldrdeq	r8, [r0], -r4
    87b4:	6a616d14 	bvs	1863c0c <__Stack_Size+0x186340c>
    87b8:	77890100 	strvc	r0, [r9, r0, lsl #2]
    87bc:	ec000004 	stc	0, cr0, [r0], {4}
    87c0:	1a000080 	bne	89c8 <__Stack_Size+0x81c8>
    87c4:	00001953 	andeq	r1, r0, r3, asr r9
    87c8:	04778a01 	ldrbteq	r8, [r7], #-2561	; 0xa01
    87cc:	81480000 	mrshi	r0, (UNDEF: 72)
    87d0:	d9150000 	ldmdble	r5, {}	; <UNPREDICTABLE>
    87d4:	5c000000 	stcpl	0, cr0, [r0], {-0}
    87d8:	80080055 	andhi	r0, r8, r5, asr r0
    87dc:	0100000b 	tsteq	r0, fp
    87e0:	00030d86 	andeq	r0, r3, r6, lsl #27
    87e4:	00f21600 	rscseq	r1, r2, r0, lsl #12
    87e8:	81700000 	cmnhi	r0, r0
    87ec:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    87f0:	90000000 	andls	r0, r0, r0
    87f4:	00000081 	andeq	r0, r0, r1, lsl #1
    87f8:	0000d915 	andeq	sp, r0, r5, lsl r9
    87fc:	00556600 	subseq	r6, r5, r0, lsl #12
    8800:	000ba808 	andeq	sl, fp, r8, lsl #16
    8804:	33860100 	orrcc	r0, r6, #0, 2
    8808:	16000003 	strne	r0, [r0], -r3
    880c:	000000f2 	strdeq	r0, [r0], -r2
    8810:	000081c5 	andeq	r8, r0, r5, asr #3
    8814:	0000e916 	andeq	lr, r0, r6, lsl r9
    8818:	00819000 	addeq	r9, r1, r0
    881c:	d9150000 	ldmdble	r5, {}	; <UNPREDICTABLE>
    8820:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    8824:	d0080055 	andle	r0, r8, r5, asr r0
    8828:	0100000b 	tsteq	r0, fp
    882c:	00035986 	andeq	r5, r3, r6, lsl #19
    8830:	00f21600 	rscseq	r1, r2, r0, lsl #12
    8834:	81e50000 	mvnhi	r0, r0
    8838:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    883c:	90000000 	andls	r0, r0, r0
    8840:	00000081 	andeq	r0, r0, r1, lsl #1
    8844:	0000d915 	andeq	sp, r0, r5, lsl r9
    8848:	00559c00 	subseq	r9, r5, r0, lsl #24
    884c:	000c0808 	andeq	r0, ip, r8, lsl #16
    8850:	7f800100 	svcvc	0x00800100
    8854:	16000003 	strne	r0, [r0], -r3
    8858:	000000f2 	strdeq	r0, [r0], -r2
    885c:	00008207 	andeq	r8, r0, r7, lsl #4
    8860:	0000e916 	andeq	lr, r0, r6, lsl r9
    8864:	007bf800 	rsbseq	pc, fp, r0, lsl #16
    8868:	d9150000 	ldmdble	r5, {}	; <UNPREDICTABLE>
    886c:	b4000000 	strlt	r0, [r0], #-0
    8870:	40080055 	andmi	r0, r8, r5, asr r0
    8874:	0100000c 	tsteq	r0, ip
    8878:	0003a580 	andeq	sl, r3, r0, lsl #11
    887c:	00f21600 	rscseq	r1, r2, r0, lsl #12
    8880:	82270000 	eorhi	r0, r7, #0
    8884:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    8888:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    888c:	0000007b 	andeq	r0, r0, fp, ror r0
    8890:	0000d915 	andeq	sp, r0, r5, lsl r9
    8894:	00560000 	subseq	r0, r6, r0
    8898:	000c7008 	andeq	r7, ip, r8
    889c:	cb820100 	blgt	fe088ca4 <BootRAM+0xcff9445>
    88a0:	16000003 	strne	r0, [r0], -r3
    88a4:	000000f2 	strdeq	r0, [r0], -r2
    88a8:	00008247 	andeq	r8, r0, r7, asr #4
    88ac:	0000e916 	andeq	lr, r0, r6, lsl r9
    88b0:	007c5200 	rsbseq	r5, ip, r0, lsl #4
    88b4:	d9150000 	ldmdble	r5, {}	; <UNPREDICTABLE>
    88b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    88bc:	88080056 	stmdahi	r8, {r1, r2, r4, r6}
    88c0:	0100000c 	tsteq	r0, ip
    88c4:	0003f185 	andeq	pc, r3, r5, lsl #3
    88c8:	00f21600 	rscseq	r1, r2, r0, lsl #12
    88cc:	82670000 	rsbhi	r0, r7, #0
    88d0:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    88d4:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
    88d8:	00000082 	andeq	r0, r0, r2, lsl #1
    88dc:	0000d915 	andeq	sp, r0, r5, lsl r9
    88e0:	00561200 	subseq	r1, r6, r0, lsl #4
    88e4:	000cb008 	andeq	fp, ip, r8
    88e8:	17850100 	strne	r0, [r5, r0, lsl #2]
    88ec:	16000004 	strne	r0, [r0], -r4
    88f0:	000000f2 	strdeq	r0, [r0], -r2
    88f4:	000082be 			; <UNDEFINED> instruction: 0x000082be
    88f8:	0000e916 	andeq	lr, r0, r6, lsl r9
    88fc:	00828900 	addeq	r8, r2, r0, lsl #18
    8900:	d9150000 	ldmdble	r5, {}	; <UNPREDICTABLE>
    8904:	74000000 	strvc	r0, [r0], #-0
    8908:	d8080056 	stmdale	r8, {r1, r2, r4, r6}
    890c:	0100000c 	tsteq	r0, ip
    8910:	00043d82 	andeq	r3, r4, r2, lsl #27
    8914:	00f21600 	rscseq	r1, r2, r0, lsl #12
    8918:	82de0000 	sbcshi	r0, lr, #0
    891c:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    8920:	52000000 	andpl	r0, r0, #0
    8924:	0000007c 	andeq	r0, r0, ip, ror r0
    8928:	0000d91b 	andeq	sp, r0, fp, lsl r9
    892c:	0056de00 	subseq	sp, r6, r0, lsl #28
    8930:	000cf808 	andeq	pc, ip, r8, lsl #16
    8934:	16850100 	strne	r0, [r5], r0, lsl #2
    8938:	000000f2 	strdeq	r0, [r0], -r2
    893c:	00008300 	andeq	r8, r0, r0, lsl #6
    8940:	0000e916 	andeq	lr, r0, r6, lsl r9
    8944:	00828900 	addeq	r8, r2, r0, lsl #18
    8948:	00000000 	andeq	r0, r0, r0
    894c:	00b2040e 	adcseq	r0, r2, lr, lsl #8
    8950:	8c080000 	stchi	0, cr0, [r8], {-0}
    8954:	77000000 	strvc	r0, [r0, -r0]
    8958:	09000004 	stmdbeq	r0, {r2}
    895c:	000000a2 	andeq	r0, r0, r2, lsr #1
    8960:	8c10000f 	ldchi	0, cr0, [r0], {15}
    8964:	11000000 	mrsne	r0, (UNDEF: 0)
    8968:	00001629 	andeq	r1, r0, r9, lsr #12
    896c:	585ca501 	ldmdapl	ip, {r0, r8, sl, sp, pc}^
    8970:	00880800 	addeq	r0, r8, r0, lsl #16
    8974:	9c010000 	stcls	0, cr0, [r1], {-0}
    8978:	0000058f 	andeq	r0, r0, pc, lsl #11
    897c:	01007312 	tsteq	r0, r2, lsl r3
    8980:	000461a5 	andeq	r6, r4, r5, lsr #3
    8984:	00832200 	addeq	r2, r3, r0, lsl #4
    8988:	6c621200 	sfmvs	f1, 2, [r2], #-0
    898c:	a501006b 	strge	r0, [r1, #-107]	; 0x6b
    8990:	00000146 	andeq	r0, r0, r6, asr #2
    8994:	00008340 	andeq	r8, r0, r0, asr #6
    8998:	0019741c 	andseq	r7, r9, ip, lsl r4
    899c:	97a60100 	strls	r0, [r6, r0, lsl #2]!
    89a0:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    89a4:	1d000083 	stcne	0, cr0, [r0, #-524]	; 0xfffffdf4
    89a8:	00001995 	muleq	r0, r5, r9
    89ac:	058fa801 	streq	sl, [pc, #2049]	; 91b5 <__Stack_Size+0x89b5>
    89b0:	91030000 	mrsls	r0, (UNDEF: 3)
    89b4:	841a7ee0 	ldrhi	r7, [sl], #-3808	; 0xee0
    89b8:	01000019 	tsteq	r0, r9, lsl r0
    89bc:	00059fa9 	andeq	r9, r5, r9, lsr #31
    89c0:	00839500 	addeq	r9, r3, r0, lsl #10
    89c4:	00fe1500 	rscseq	r1, lr, r0, lsl #10
    89c8:	58800000 	stmpl	r0, {}	; <UNPREDICTABLE>
    89cc:	0d300800 	ldceq	8, cr0, [r0, #-0]
    89d0:	b5010000 	strlt	r0, [r1, #-0]
    89d4:	00000500 	andeq	r0, r0, r0, lsl #10
    89d8:	00011316 	andeq	r1, r1, r6, lsl r3
    89dc:	0083d400 	addeq	sp, r3, r0, lsl #8
    89e0:	010a1600 	tsteq	sl, r0, lsl #12
    89e4:	84010000 	strhi	r0, [r1], #-0
    89e8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    89ec:	08005874 	stmdaeq	r0, {r2, r4, r5, r6, fp, ip, lr}
    89f0:	00000741 	andeq	r0, r0, r1, asr #14
    89f4:	0000051f 	andeq	r0, r0, pc, lsl r5
    89f8:	0252011f 	subseq	r0, r2, #-1073741817	; 0xc0000007
    89fc:	011f0075 	tsteq	pc, r5, ror r0	; <UNPREDICTABLE>
    8a00:	1f300151 	svcne	0x00300151
    8a04:	7d025001 	stcvc	0, cr5, [r2, #-4]
    8a08:	b21e0000 	andslt	r0, lr, #0
    8a0c:	51080058 	qaddpl	r0, r8, r8
    8a10:	39000001 	stmdbcc	r0, {r0}
    8a14:	1f000005 	svcne	0x00000005
    8a18:	7d025101 	stfvcs	f5, [r2, #-4]
    8a1c:	50011f00 	andpl	r1, r1, r0, lsl #30
    8a20:	00007a02 	andeq	r7, r0, r2, lsl #20
    8a24:	0058c21e 	subseq	ip, r8, lr, lsl r2
    8a28:	00075e08 	andeq	r5, r7, r8, lsl #28
    8a2c:	00055900 	andeq	r5, r5, r0, lsl #18
    8a30:	52011f00 	andpl	r1, r1, #0, 30
    8a34:	1f007602 	svcne	0x00007602
    8a38:	77025101 	strvc	r5, [r2, -r1, lsl #2]
    8a3c:	50011f00 	andpl	r1, r1, r0, lsl #30
    8a40:	00007d02 	andeq	r7, r0, r2, lsl #26
    8a44:	0058d81e 	subseq	sp, r8, lr, lsl r8
    8a48:	00015108 	andeq	r5, r1, r8, lsl #2
    8a4c:	00057300 	andeq	r7, r5, r0, lsl #6
    8a50:	51011f00 	tstpl	r1, r0, lsl #30
    8a54:	1f007d02 	svcne	0x00007d02
    8a58:	7a025001 	bvc	9ca64 <__Stack_Size+0x9c264>
    8a5c:	e2200000 	eor	r0, r0, #0
    8a60:	41080058 	qaddmi	r0, r8, r8
    8a64:	1f000007 	svcne	0x00000007
    8a68:	75025201 	strvc	r5, [r2, #-513]	; 0x201
    8a6c:	51011f00 	tstpl	r1, r0, lsl #30
    8a70:	011f3001 	tsteq	pc, r1
    8a74:	007d0250 	rsbseq	r0, sp, r0, asr r2
    8a78:	81080000 	mrshi	r0, (UNDEF: 8)
    8a7c:	9f000000 	svcls	0x00000000
    8a80:	09000005 	stmdbeq	r0, {r0, r2}
    8a84:	000000a2 	andeq	r0, r0, r2, lsr #1
    8a88:	9710007f 			; <UNDEFINED> instruction: 0x9710007f
    8a8c:	11000000 	mrsne	r0, (UNDEF: 0)
    8a90:	00001675 	andeq	r1, r0, r5, ror r6
    8a94:	58e4b901 	stmiapl	r4!, {r0, r8, fp, ip, sp, pc}^
    8a98:	02960800 	addseq	r0, r6, #0, 16
    8a9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8aa0:	000006ef 	andeq	r0, r0, pc, ror #13
    8aa4:	01007312 	tsteq	r0, r2, lsl r3
    8aa8:	0006efb9 			; <UNDEFINED> instruction: 0x0006efb9
    8aac:	00846400 	addeq	r6, r4, r0, lsl #8
    8ab0:	0c341c00 	ldceq	12, cr1, [r4], #-0
    8ab4:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    8ab8:	0000011d 	andeq	r0, r0, sp, lsl r1
    8abc:	00008483 	andeq	r8, r0, r3, lsl #9
    8ac0:	00198e1c 	andseq	r8, r9, ip, lsl lr
    8ac4:	33ba0100 			; <UNDEFINED> instruction: 0x33ba0100
    8ac8:	c6000000 	strgt	r0, [r0], -r0
    8acc:	12000084 	andne	r0, r0, #132	; 0x84
    8ad0:	006e656c 	rsbeq	r6, lr, ip, ror #10
    8ad4:	0033ba01 	eorseq	fp, r3, r1, lsl #20
    8ad8:	84e70000 	strbthi	r0, [r7], #0
    8adc:	69140000 	ldmdbvs	r4, {}	; <UNPREDICTABLE>
    8ae0:	7abc0100 	bvc	fef08ee8 <BootRAM+0xde79689>
    8ae4:	5c000000 	stcpl	0, cr0, [r0], {-0}
    8ae8:	15000085 	strne	r0, [r0, #-133]	; 0x85
    8aec:	000000fe 	strdeq	r0, [r0], -lr
    8af0:	0800593e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
    8af4:	00000d48 	andeq	r0, r0, r8, asr #26
    8af8:	0626d801 	strteq	sp, [r6], -r1, lsl #16
    8afc:	13160000 	tstne	r6, #0
    8b00:	80000001 	andhi	r0, r0, r1
    8b04:	16000085 	strne	r0, [r0], -r5, lsl #1
    8b08:	0000010a 	andeq	r0, r0, sl, lsl #2
    8b0c:	000085f6 	strdeq	r8, [r0], -r6
    8b10:	59f02100 	ldmibpl	r0!, {r8, sp}^
    8b14:	00e20800 	rsceq	r0, r2, r0, lsl #16
    8b18:	06900000 	ldreq	r0, [r0], r0
    8b1c:	74130000 	ldrvc	r0, [r3], #-0
    8b20:	0100706d 	tsteq	r0, sp, rrx
    8b24:	0006faca 	andeq	pc, r6, sl, asr #21
    8b28:	50910200 	addspl	r0, r1, r0, lsl #4
    8b2c:	01006314 	tsteq	r0, r4, lsl r3
    8b30:	000033cb 	andeq	r3, r0, fp, asr #7
    8b34:	00866400 	addeq	r6, r6, r0, lsl #8
    8b38:	00fe1500 	rscseq	r1, lr, r0, lsl #10
    8b3c:	59fa0000 	ldmibpl	sl!, {}^	; <UNPREDICTABLE>
    8b40:	0d680800 	stcleq	8, cr0, [r8, #-0]
    8b44:	d0010000 	andle	r0, r1, r0
    8b48:	00000670 	andeq	r0, r0, r0, ror r6
    8b4c:	00011322 	andeq	r1, r1, r2, lsr #6
    8b50:	010a1600 	tsteq	sl, r0, lsl #12
    8b54:	86770000 	ldrbthi	r0, [r7], -r0
    8b58:	20000000 	andcs	r0, r0, r0
    8b5c:	08005ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, lr}
    8b60:	0000075e 	andeq	r0, r0, lr, asr r7
    8b64:	0951011f 	ldmdbeq	r1, {r0, r1, r2, r3, r4, r8}^
    8b68:	44910091 	ldrmi	r0, [r1], #145	; 0x91
    8b6c:	30082206 	andcc	r2, r8, r6, lsl #4
    8b70:	50011f1c 	andpl	r1, r1, ip, lsl pc
    8b74:	7fac9104 	svcvc	0x00ac9104
    8b78:	19000006 	stmdbne	r0, {r1, r2}
    8b7c:	08005ad2 	stmdaeq	r0, {r1, r4, r6, r7, r9, fp, ip, lr}
    8b80:	000000a2 	andeq	r0, r0, r2, lsr #1
    8b84:	706d7413 	rsbvc	r7, sp, r3, lsl r4
    8b88:	fadf0100 	blx	ff7c8f90 <BootRAM+0xe739731>
    8b8c:	02000006 	andeq	r0, r0, #6
    8b90:	fe155091 	mrc2	0, 0, r5, cr5, cr1, {4}
    8b94:	e2000000 	and	r0, r0, #0
    8b98:	9808005a 	stmdals	r8, {r1, r3, r4, r6}
    8b9c:	0100000d 	tsteq	r0, sp
    8ba0:	0006cde1 	andeq	ip, r6, r1, ror #27
    8ba4:	01131600 	tsteq	r3, r0, lsl #12
    8ba8:	868c0000 	strhi	r0, [ip], r0
    8bac:	0a160000 	beq	588bb4 <__Stack_Size+0x5883b4>
    8bb0:	09000001 	stmdbeq	r0, {r0}
    8bb4:	00000087 	andeq	r0, r0, r7, lsl #1
    8bb8:	005b7420 	subseq	r7, fp, r0, lsr #8
    8bbc:	00075e08 	andeq	r5, r7, r8, lsl #28
    8bc0:	52011f00 	andpl	r1, r1, #0, 30
    8bc4:	7fa49104 	svcvc	0x00a49104
    8bc8:	51011f06 	tstpl	r1, r6, lsl #30
    8bcc:	1f509102 	svcne	0x00509102
    8bd0:	91045001 	tstls	r4, r1
    8bd4:	00067fac 	andeq	r7, r6, ip, lsr #31
    8bd8:	040e0000 	streq	r0, [lr], #-0
    8bdc:	000006f5 	strdeq	r0, [r0], -r5
    8be0:	0000b210 	andeq	fp, r0, r0, lsl r2
    8be4:	00810800 	addeq	r0, r1, r0, lsl #16
    8be8:	070a0000 	streq	r0, [sl, -r0]
    8bec:	a2090000 	andge	r0, r9, #0
    8bf0:	07000000 	streq	r0, [r0, -r0]
    8bf4:	008c0800 	addeq	r0, ip, r0, lsl #16
    8bf8:	071a0000 	ldreq	r0, [sl, -r0]
    8bfc:	a2090000 	andge	r0, r9, #0
    8c00:	4f000000 	svcmi	0x00000000
    8c04:	19be1d00 	ldmibne	lr!, {r8, sl, fp, ip}
    8c08:	10010000 	andne	r0, r1, r0
    8c0c:	0000072b 	andeq	r0, r0, fp, lsr #14
    8c10:	73e00305 	mvnvc	r0, #335544320	; 0x14000000
    8c14:	0a100800 	beq	40ac1c <__Stack_Size+0x40a41c>
    8c18:	23000007 	movwcs	r0, #7
    8c1c:	00001660 	andeq	r1, r0, r0, ror #12
    8c20:	06f50901 	ldrbteq	r0, [r5], r1, lsl #18
    8c24:	03050000 	movweq	r0, #20480	; 0x5000
    8c28:	080073a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, sp, lr}
    8c2c:	0012d724 	andseq	sp, r2, r4, lsr #14
    8c30:	0000a900 	andeq	sl, r0, r0, lsl #18
    8c34:	00075e00 	andeq	r5, r7, r0, lsl #28
    8c38:	00a92500 	adceq	r2, r9, r0, lsl #10
    8c3c:	7a250000 	bvc	948c44 <__Stack_Size+0x948444>
    8c40:	25000000 	strcs	r0, [r0, #-0]
    8c44:	000000a2 	andeq	r0, r0, r2, lsr #1
    8c48:	15342400 	ldrne	r2, [r4, #-1024]!	; 0x400
    8c4c:	00a90000 	adceq	r0, r9, r0
    8c50:	077b0000 	ldrbeq	r0, [fp, -r0]!
    8c54:	a9250000 	stmdbge	r5!, {}	; <UNPREDICTABLE>
    8c58:	25000000 	strcs	r0, [r0, #-0]
    8c5c:	0000077b 	andeq	r0, r0, fp, ror r7
    8c60:	0000a225 	andeq	sl, r0, r5, lsr #4
    8c64:	040e0000 	streq	r0, [lr], #-0
    8c68:	00000781 	andeq	r0, r0, r1, lsl #15
    8c6c:	06ce0026 	strbeq	r0, [lr], r6, lsr #32
    8c70:	00040000 	andeq	r0, r4, r0
    8c74:	00002123 	andeq	r2, r0, r3, lsr #2
    8c78:	06c00104 	strbeq	r0, [r0], r4, lsl #2
    8c7c:	2c010000 	stccs	0, cr0, [r1], {-0}
    8c80:	9300001a 	movwls	r0, #26
    8c84:	d8000008 	stmdale	r0, {r3}
    8c88:	0000000d 	andeq	r0, r0, sp
    8c8c:	b0000000 	andlt	r0, r0, r0
    8c90:	02000033 	andeq	r0, r0, #51	; 0x33
    8c94:	00000ad3 	ldrdeq	r0, [r0], -r3
    8c98:	0030d402 	eorseq	sp, r0, r2, lsl #8
    8c9c:	04030000 	streq	r0, [r3], #-0
    8ca0:	00025707 	andeq	r5, r2, r7, lsl #14
    8ca4:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    8ca8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8cac:	01030074 	tsteq	r3, r4, ror r0
    8cb0:	00081a06 	andeq	r1, r8, r6, lsl #20
    8cb4:	0b0d0200 	bleq	3494bc <__Stack_Size+0x348cbc>
    8cb8:	1c030000 	stcne	0, cr0, [r3], {-0}
    8cbc:	00000052 	andeq	r0, r0, r2, asr r0
    8cc0:	18080103 	stmdane	r8, {r0, r1, r8}
    8cc4:	03000008 	movweq	r0, #8
    8cc8:	065e0502 	ldrbeq	r0, [lr], -r2, lsl #10
    8ccc:	b8020000 	stmdalt	r2, {}	; <UNPREDICTABLE>
    8cd0:	0300000d 	movweq	r0, #13
    8cd4:	00006b26 	andeq	r6, r0, r6, lsr #22
    8cd8:	07020300 	streq	r0, [r2, -r0, lsl #6]
    8cdc:	00000949 	andeq	r0, r0, r9, asr #18
    8ce0:	da050403 	ble	149cf4 <__Stack_Size+0x1494f4>
    8ce4:	02000004 	andeq	r0, r0, #4
    8ce8:	00000ada 	ldrdeq	r0, [r0], -sl
    8cec:	00843803 	addeq	r3, r4, r3, lsl #16
    8cf0:	04030000 	streq	r0, [r3], #-0
    8cf4:	00025207 	andeq	r5, r2, r7, lsl #4
    8cf8:	05080300 	streq	r0, [r8, #-768]	; 0x300
    8cfc:	000004d5 	ldrdeq	r0, [r0], -r5
    8d00:	4d070803 	stcmi	8, cr0, [r7, #-12]
    8d04:	03000002 	movweq	r0, #2
    8d08:	078b0704 	streq	r0, [fp, r4, lsl #14]
    8d0c:	04060000 	streq	r0, [r6], #-0
    8d10:	00000052 	andeq	r0, r0, r2, asr r0
    8d14:	00ac0406 	adceq	r0, ip, r6, lsl #8
    8d18:	01030000 	mrseq	r0, (UNDEF: 3)
    8d1c:	00082108 	andeq	r2, r8, r8, lsl #2
    8d20:	b9040600 	stmdblt	r4, {r9, sl}
    8d24:	07000000 	streq	r0, [r0, -r0]
    8d28:	000000ac 	andeq	r0, r0, ip, lsr #1
    8d2c:	000b0f02 	andeq	r0, fp, r2, lsl #30
    8d30:	472a0400 	strmi	r0, [sl, -r0, lsl #8]!
    8d34:	02000000 	andeq	r0, r0, #0
    8d38:	00000dba 			; <UNDEFINED> instruction: 0x00000dba
    8d3c:	00603604 	rsbeq	r3, r0, r4, lsl #12
    8d40:	dc020000 	stcle	0, cr0, [r2], {-0}
    8d44:	0400000a 	streq	r0, [r0], #-10
    8d48:	00007942 	andeq	r7, r0, r2, asr #18
    8d4c:	33750800 	cmncc	r5, #0, 16
    8d50:	27050032 	smladxcs	r5, r2, r0, r0
    8d54:	00000084 	andeq	r0, r0, r4, lsl #1
    8d58:	00035a02 	andeq	r5, r3, r2, lsl #20
    8d5c:	f52f0500 			; <UNDEFINED> instruction: 0xf52f0500
    8d60:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8d64:	00000084 	andeq	r0, r0, r4, lsl #1
    8d68:	3705010a 	strcc	r0, [r5, -sl, lsl #2]
    8d6c:	0000010f 	andeq	r0, r0, pc, lsl #2
    8d70:	0006b50b 	andeq	fp, r6, fp, lsl #10
    8d74:	a70b0000 	strge	r0, [fp, -r0]
    8d78:	01000001 	tsteq	r0, r1
    8d7c:	052d0200 	streq	r0, [sp, #-512]!	; 0x200
    8d80:	37050000 	strcc	r0, [r5, -r0]
    8d84:	000000fa 	strdeq	r0, [r0], -sl
    8d88:	000f570c 	andeq	r5, pc, ip, lsl #14
    8d8c:	10060c00 	andne	r0, r6, r0, lsl #24
    8d90:	00015c01 	andeq	r5, r1, r1, lsl #24
    8d94:	10780d00 	rsbsne	r0, r8, r0, lsl #26
    8d98:	11060000 	mrsne	r0, (UNDEF: 6)
    8d9c:	0000c901 	andeq	ip, r0, r1, lsl #18
    8da0:	130d0000 	movwne	r0, #53248	; 0xd000
    8da4:	06000010 			; <UNDEFINED> instruction: 0x06000010
    8da8:	00c90112 	sbceq	r0, r9, r2, lsl r1
    8dac:	0d020000 	stceq	0, cr0, [r2, #-0]
    8db0:	00001089 	andeq	r1, r0, r9, lsl #1
    8db4:	d4011306 	strle	r1, [r1], #-774	; 0x306
    8db8:	04000000 	streq	r0, [r0], #-0
    8dbc:	00108e0d 	andseq	r8, r0, sp, lsl #28
    8dc0:	01140600 	tsteq	r4, r0, lsl #12
    8dc4:	000000d4 	ldrdeq	r0, [r0], -r4
    8dc8:	680e0008 	stmdavs	lr, {r3}
    8dcc:	01890c07 	orreq	r0, r9, r7, lsl #24
    8dd0:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    8dd4:	07000018 	smladeq	r0, r8, r0, r0
    8dd8:	0001890e 	andeq	r8, r1, lr, lsl #18
    8ddc:	290f0000 	stmdbcs	pc, {}	; <UNPREDICTABLE>
    8de0:	07000017 	smladeq	r0, r7, r0, r0
    8de4:	0001990f 	andeq	r9, r1, pc, lsl #18
    8de8:	6c0f0800 	stcvs	8, cr0, [pc], {-0}
    8dec:	07000004 	streq	r0, [r0, -r4]
    8df0:	0001a910 	andeq	sl, r1, r0, lsl r9
    8df4:	10002800 	andne	r2, r0, r0, lsl #16
    8df8:	00000084 	andeq	r0, r0, r4, lsl #1
    8dfc:	00000199 	muleq	r0, r9, r1
    8e00:	00009911 	andeq	r9, r0, r1, lsl r9
    8e04:	10000100 	andne	r0, r0, r0, lsl #2
    8e08:	00000084 	andeq	r0, r0, r4, lsl #1
    8e0c:	000001a9 	andeq	r0, r0, r9, lsr #3
    8e10:	00009911 	andeq	r9, r0, r1, lsl r9
    8e14:	10000700 	andne	r0, r0, r0, lsl #14
    8e18:	00000052 	andeq	r0, r0, r2, asr r0
    8e1c:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
    8e20:	00009911 	andeq	r9, r0, r1, lsl r9
    8e24:	02003f00 	andeq	r3, r0, #0, 30
    8e28:	000013a5 	andeq	r1, r0, r5, lsr #7
    8e2c:	015c1207 	cmpeq	ip, r7, lsl #4
    8e30:	b7120000 	ldrlt	r0, [r2, -r0]
    8e34:	1400000a 	strne	r0, [r0], #-10
    8e38:	02190d08 	andseq	r0, r9, #8, 26	; 0x200
    8e3c:	170f0000 	strne	r0, [pc, -r0]
    8e40:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    8e44:	0000d40e 	andeq	sp, r0, lr, lsl #8
    8e48:	c20f0000 	andgt	r0, pc, #0
    8e4c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    8e50:	0000d410 	andeq	sp, r0, r0, lsl r4
    8e54:	7f0f0400 	svcvc	0x000f0400
    8e58:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    8e5c:	0000d411 	andeq	sp, r0, r1, lsl r4
    8e60:	070f0800 	streq	r0, [pc, -r0, lsl #16]
    8e64:	0800000c 	stmdaeq	r0, {r2, r3}
    8e68:	0000d413 	andeq	sp, r0, r3, lsl r4
    8e6c:	a10f0c00 	tstge	pc, r0, lsl #24
    8e70:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    8e74:	0000d414 	andeq	sp, r0, r4, lsl r4
    8e78:	fc0f1000 	stc2	0, cr1, [pc], {-0}
    8e7c:	0800000a 	stmdaeq	r0, {r1, r3}
    8e80:	00021915 	andeq	r1, r2, r5, lsl r9
    8e84:	10001400 	andne	r1, r0, r0, lsl #8
    8e88:	000000be 	strheq	r0, [r0], -lr
    8e8c:	00000228 	andeq	r0, r0, r8, lsr #4
    8e90:	00009913 	andeq	r9, r0, r3, lsl r9
    8e94:	b8020000 	stmdalt	r2, {}	; <UNPREDICTABLE>
    8e98:	0800000a 	stmdaeq	r0, {r1, r3}
    8e9c:	0001c416 	andeq	ip, r1, r6, lsl r4
    8ea0:	0b1f1200 	bleq	7cd6a8 <__Stack_Size+0x7ccea8>
    8ea4:	08140000 	ldmdaeq	r4, {}	; <UNPREDICTABLE>
    8ea8:	00027c18 	andeq	r7, r2, r8, lsl ip
    8eac:	0bd80f00 	bleq	ff60cab4 <BootRAM+0xe57d255>
    8eb0:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    8eb4:	0000027c 	andeq	r0, r0, ip, ror r2
    8eb8:	0b670f00 	bleq	19ccac0 <__Stack_Size+0x19cc2c0>
    8ebc:	1a080000 	bne	208ec4 <__Stack_Size+0x2086c4>
    8ec0:	000000d4 	ldrdeq	r0, [r0], -r4
    8ec4:	0b970f04 	bleq	fe5ccadc <BootRAM+0xd53d27d>
    8ec8:	1f080000 	svcne	0x00080000
    8ecc:	00000025 	andeq	r0, r0, r5, lsr #32
    8ed0:	0b330f08 	bleq	cccaf8 <__Stack_Size+0xccc2f8>
    8ed4:	21080000 	mrscs	r0, (UNDEF: 8)
    8ed8:	00000039 	andeq	r0, r0, r9, lsr r0
    8edc:	0c160f0c 	ldceq	15, cr0, [r6], {12}
    8ee0:	22080000 	andcs	r0, r8, #0
    8ee4:	00000039 	andeq	r0, r0, r9, lsr r0
    8ee8:	04060010 	streq	r0, [r6], #-16
    8eec:	00000228 	andeq	r0, r0, r8, lsr #4
    8ef0:	000b2002 	andeq	r2, fp, r2
    8ef4:	33230800 	teqcc	r3, #0, 16
    8ef8:	02000002 	andeq	r0, r0, #2
    8efc:	00000c39 	andeq	r0, r0, r9, lsr ip
    8f00:	02982608 	addseq	r2, r8, #8, 12	; 0x800000
    8f04:	04060000 	streq	r0, [r6], #-0
    8f08:	00000233 	andeq	r0, r0, r3, lsr r2
    8f0c:	0000be10 	andeq	fp, r0, r0, lsl lr
    8f10:	0002ae00 	andeq	sl, r2, r0, lsl #28
    8f14:	00991100 	addseq	r1, r9, r0, lsl #2
    8f18:	003f0000 	eorseq	r0, pc, r0
    8f1c:	000b3a14 	andeq	r3, fp, r4, lsl sl
    8f20:	39230100 	stmdbcc	r3!, {r8}
    8f24:	7c000000 	stcvc	0, cr0, [r0], {-0}
    8f28:	a408005b 	strge	r0, [r8], #-91	; 0x5b
    8f2c:	01000001 	tsteq	r0, r1
    8f30:	00054a9c 	muleq	r5, ip, sl
    8f34:	19cf1500 	stmibne	pc, {r8, sl, ip}^	; <UNPREDICTABLE>
    8f38:	23010000 	movwcs	r0, #4096	; 0x1000
    8f3c:	0000054a 	andeq	r0, r0, sl, asr #10
    8f40:	0000876c 	andeq	r8, r0, ip, ror #14
    8f44:	0019d915 	andseq	sp, r9, r5, lsl r9
    8f48:	d4230100 	strtle	r0, [r3], #-256	; 0x100
    8f4c:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    8f50:	15000087 	strne	r0, [r0, #-135]	; 0x87
    8f54:	000019f9 	strdeq	r1, [r0], -r9
    8f58:	010f2301 	tsteq	pc, r1, lsl #6
    8f5c:	87c40000 	strbhi	r0, [r4, r0]
    8f60:	68160000 	ldmdavs	r6, {}	; <UNPREDICTABLE>
    8f64:	01007264 	tsteq	r0, r4, ror #4
    8f68:	00027c25 	andeq	r7, r2, r5, lsr #24
    8f6c:	0087e500 	addeq	lr, r7, r0, lsl #10
    8f70:	17291700 	strne	r1, [r9, -r0, lsl #14]!
    8f74:	26010000 	strcs	r0, [r1], -r0
    8f78:	00000282 	andeq	r0, r0, r2, lsl #5
    8f7c:	7cec9103 	stfvcp	f1, [ip], #12
    8f80:	001a1818 	andseq	r1, sl, r8, lsl r8
    8f84:	39270100 	stmdbcc	r7!, {r8}
    8f88:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    8f8c:	0019ed19 	andseq	lr, r9, r9, lsl sp
    8f90:	50280100 	eorpl	r0, r8, r0, lsl #2
    8f94:	09000005 	stmdbeq	r0, {r0, r2}
    8f98:	19000088 	stmdbne	r0, {r3, r7}
    8f9c:	000019c6 	andeq	r1, r0, r6, asr #19
    8fa0:	00df2f01 	sbcseq	r2, pc, r1, lsl #30
    8fa4:	885d0000 	ldmdahi	sp, {}^	; <UNPREDICTABLE>
    8fa8:	79170000 	ldmdbvc	r7, {}	; <UNPREDICTABLE>
    8fac:	01000012 	tsteq	r0, r2, lsl r0
    8fb0:	00056252 	andeq	r6, r5, r2, asr r2
    8fb4:	98910300 	ldmls	r1, {r8, r9}
    8fb8:	74631a7d 	strbtvc	r1, [r3], #-2685	; 0xa7d
    8fbc:	56010078 			; <UNDEFINED> instruction: 0x56010078
    8fc0:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
    8fc4:	7e989103 	cosvce	f1, f3
    8fc8:	001a1317 	andseq	r1, sl, r7, lsl r3
    8fcc:	72580100 	subsvc	r0, r8, #0, 2
    8fd0:	03000005 	movweq	r0, #5
    8fd4:	167cdc91 			; <UNDEFINED> instruction: 0x167cdc91
    8fd8:	5a010069 	bpl	49184 <__Stack_Size+0x48984>
    8fdc:	00000039 	andeq	r0, r0, r9, lsr r0
    8fe0:	000088c7 	andeq	r8, r0, r7, asr #17
    8fe4:	0064691a 	rsbeq	r6, r4, sl, lsl r9
    8fe8:	011a6501 	tsteq	sl, r1, lsl #10
    8fec:	91030000 	mrsls	r0, (UNDEF: 3)
    8ff0:	23177ce0 	tstcs	r7, #224, 24	; 0xe000
    8ff4:	0100001a 	tsteq	r0, sl, lsl r0
    8ff8:	00058267 	andeq	r8, r5, r7, ror #4
    8ffc:	80910300 	addshi	r0, r1, r0, lsl #6
    9000:	19e6177d 	stmibne	r6!, {r0, r2, r3, r4, r5, r6, r8, r9, sl, ip}^
    9004:	6c010000 	stcvs	0, cr0, [r1], {-0}
    9008:	00000592 	muleq	r0, r2, r5
    900c:	7db89103 	ldfvcd	f1, [r8, #12]!
    9010:	001a1017 	andseq	r1, sl, r7, lsl r0
    9014:	9e710100 	rpwlss	f0, f1, f0
    9018:	03000002 	movweq	r0, #2
    901c:	1b7dd891 	blne	1f7f268 <__Stack_Size+0x1f7ea68>
    9020:	08005b92 	stmdaeq	r0, {r1, r4, r7, r8, r9, fp, ip, lr}
    9024:	000005b3 			; <UNDEFINED> instruction: 0x000005b3
    9028:	000003d2 	ldrdeq	r0, [r0], -r2
    902c:	0252011c 	subseq	r0, r2, #28, 2
    9030:	011c6808 	tsteq	ip, r8, lsl #16
    9034:	ff080251 			; <UNDEFINED> instruction: 0xff080251
    9038:	0350011c 	cmpeq	r0, #28, 2
    903c:	007f8091 			; <UNDEFINED> instruction: 0x007f8091
    9040:	005b9c1b 	subseq	r9, fp, fp, lsl ip
    9044:	0005d208 	andeq	sp, r5, r8, lsl #4
    9048:	0003f300 	andeq	pc, r3, r0, lsl #6
    904c:	52011c00 	andpl	r1, r1, #0, 24
    9050:	1c680802 	stclne	8, cr0, [r8], #-8
    9054:	76025101 	strvc	r5, [r2], -r1, lsl #2
    9058:	50011c00 	andpl	r1, r1, r0, lsl #24
    905c:	7f809103 	svcvc	0x00809103
    9060:	5ba01d00 	blpl	fe810468 <BootRAM+0xd780c09>
    9064:	05f60800 	ldrbeq	r0, [r6, #2048]!	; 0x800
    9068:	ba1b0000 	blt	6c9070 <__Stack_Size+0x6c8870>
    906c:	fe08005b 	mcr2	0, 0, r0, cr8, cr11, {2}
    9070:	1c000005 	stcne	0, cr0, [r0], {5}
    9074:	1c000004 	stcne	0, cr0, [r0], {4}
    9078:	0c055201 	sfmeq	f5, 4, [r5], {1}
    907c:	45626332 	strbmi	r6, [r2, #-818]!	; 0x332
    9080:	0550011c 	ldrbeq	r0, [r0, #-284]	; 0x11c
    9084:	00766003 	rsbseq	r6, r6, r3
    9088:	d81b0008 	ldmdale	fp, {r3}
    908c:	1108005b 	qaddne	r0, fp, r8
    9090:	30000006 	andcc	r0, r0, r6
    9094:	1c000004 	stcne	0, cr0, [r0], {4}
    9098:	74025001 	strvc	r5, [r2], #-1
    909c:	0c1b0000 	ldceq	0, cr0, [fp], {-0}
    90a0:	b308005c 	movwlt	r0, #32860	; 0x805c
    90a4:	51000005 	tstpl	r0, r5
    90a8:	1c000004 	stcne	0, cr0, [r0], {4}
    90ac:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    90b0:	51011c20 	tstpl	r1, r0, lsr #24
    90b4:	1cff0802 	ldclne	8, cr0, [pc], #8	; 90c4 <__Stack_Size+0x88c4>
    90b8:	91035001 	tstls	r3, r1
    90bc:	1b007d98 	blne	28724 <__Stack_Size+0x27f24>
    90c0:	08005c12 	stmdaeq	r0, {r1, r4, sl, fp, ip, lr}
    90c4:	00000627 	andeq	r0, r0, r7, lsr #12
    90c8:	00000466 	andeq	r0, r0, r6, ror #8
    90cc:	0350011c 	cmpeq	r0, #28, 2
    90d0:	007e9891 			; <UNDEFINED> instruction: 0x007e9891
    90d4:	005c361b 	subseq	r3, ip, fp, lsl r6
    90d8:	00063e08 	andeq	r3, r6, r8, lsl #28
    90dc:	00048000 	andeq	r8, r4, r0
    90e0:	52011c00 	andpl	r1, r1, #0, 24
    90e4:	011c3401 	tsteq	ip, r1, lsl #8
    90e8:	98910350 	ldmls	r1, {r4, r6, r8, r9}
    90ec:	461b007e 			; <UNDEFINED> instruction: 0x461b007e
    90f0:	5908005c 	stmdbpl	r8, {r2, r3, r4, r6}
    90f4:	95000006 	strls	r0, [r0, #-6]
    90f8:	1c000004 	stcne	0, cr0, [r0], {4}
    90fc:	91035001 	tstls	r3, r1
    9100:	1b007ce0 	blne	28488 <__Stack_Size+0x27c88>
    9104:	08005c60 	stmdaeq	r0, {r5, r6, sl, fp, ip, lr}
    9108:	00000671 	andeq	r0, r0, r1, ror r6
    910c:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
    9110:	0551011c 	ldrbeq	r0, [r1, #-284]	; 0x11c
    9114:	00768403 	rsbseq	r8, r6, r3, lsl #8
    9118:	50011c08 	andpl	r1, r1, r8, lsl #24
    911c:	7d809103 	stfvcd	f1, [r0, #12]
    9120:	5c6a1b00 	stclpl	11, cr1, [sl], #-0
    9124:	063e0800 	ldrteq	r0, [lr], -r0, lsl #16
    9128:	04d40000 	ldrbeq	r0, [r4], #0
    912c:	011c0000 	tsteq	ip, r0
    9130:	1c470152 	stfnee	f0, [r7], {82}	; 0x52
    9134:	91035101 	tstls	r3, r1, lsl #2
    9138:	011c7d80 	tsteq	ip, r0, lsl #27
    913c:	98910350 	ldmls	r1, {r4, r6, r8, r9}
    9140:	721b007e 	andsvc	r0, fp, #126	; 0x7e
    9144:	8c08005c 	stchi	0, cr0, [r8], {92}	; 0x5c
    9148:	f0000006 			; <UNDEFINED> instruction: 0xf0000006
    914c:	1c000004 	stcne	0, cr0, [r0], {4}
    9150:	91035101 	tstls	r3, r1, lsl #2
    9154:	011c7d98 			; <UNDEFINED> instruction: 0x011c7d98
    9158:	98910350 	ldmls	r1, {r4, r6, r8, r9}
    915c:	b21b007e 	andslt	r0, fp, #126	; 0x7e
    9160:	a208005c 	andge	r0, r8, #92	; 0x5c
    9164:	18000006 	stmdane	r0, {r1, r2}
    9168:	1c000005 	stcne	0, cr0, [r0], {5}
    916c:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    9170:	52011c20 	andpl	r1, r1, #32, 24	; 0x2000
    9174:	7d989103 	ldfvcd	f1, [r8, #12]
    9178:	0351011c 	cmpeq	r1, #28, 2
    917c:	1c7db891 	ldclne	8, cr11, [sp], #-580	; 0xfffffdbc
    9180:	74025001 	strvc	r5, [r2], #-1
    9184:	d41b0050 	ldrle	r0, [fp], #-80	; 0x50
    9188:	1108005c 	qaddne	r0, ip, r8
    918c:	30000006 	andcc	r0, r0, r6
    9190:	1c000005 	stcne	0, cr0, [r0], {5}
    9194:	74065001 	strvc	r5, [r6], #-1
    9198:	c0828080 	addgt	r8, r2, r0, lsl #1
    919c:	ea1e0000 	b	7891a4 <__Stack_Size+0x7889a4>
    91a0:	fe08005c 	mcr2	0, 0, r0, cr8, cr12, {2}
    91a4:	1c000005 	stcne	0, cr0, [r0], {5}
    91a8:	74025101 	strvc	r5, [r2], #-257	; 0x101
    91ac:	50011c00 	andpl	r1, r1, r0, lsl #24
    91b0:	76900305 	ldrvc	r0, [r0], r5, lsl #6
    91b4:	00000800 	andeq	r0, r0, r0, lsl #16
    91b8:	028d0406 	addeq	r0, sp, #100663296	; 0x6000000
    91bc:	52100000 	andspl	r0, r0, #0
    91c0:	62000000 	andvs	r0, r0, #0
    91c4:	1f000005 	svcne	0x00000005
    91c8:	00000099 	muleq	r0, r9, r0
    91cc:	00670802 	rsbeq	r0, r7, r2, lsl #16
    91d0:	00005210 	andeq	r5, r0, r0, lsl r2
    91d4:	00057200 	andeq	r7, r5, r0, lsl #4
    91d8:	00991100 	addseq	r1, r9, r0, lsl #2
    91dc:	001f0000 	andseq	r0, pc, r0
    91e0:	0000ac10 	andeq	sl, r0, r0, lsl ip
    91e4:	00058200 	andeq	r8, r5, r0, lsl #4
    91e8:	00991100 	addseq	r1, r9, r0, lsl #2
    91ec:	00030000 	andeq	r0, r3, r0
    91f0:	00005210 	andeq	r5, r0, r0, lsl r2
    91f4:	00059200 	andeq	r9, r5, r0, lsl #4
    91f8:	00991100 	addseq	r1, r9, r0, lsl #2
    91fc:	00160000 	andseq	r0, r6, r0
    9200:	0000be10 	andeq	fp, r0, r0, lsl lr
    9204:	0005a200 	andeq	sl, r5, r0, lsl #4
    9208:	00991100 	addseq	r1, r9, r0, lsl #2
    920c:	001f0000 	andseq	r0, pc, r0
    9210:	0000b120 	andeq	fp, r0, r0, lsr #2
    9214:	392c0c00 	stmdbcc	ip!, {sl, fp}
    9218:	05000000 	streq	r0, [r0, #-0]
    921c:	00047003 	andeq	r7, r4, r3
    9220:	12d72120 	sbcsne	r2, r7, #32, 2
    9224:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    9228:	00000037 	andeq	r0, r0, r7, lsr r0
    922c:	000005d2 	ldrdeq	r0, [r0], -r2
    9230:	00003722 	andeq	r3, r0, r2, lsr #14
    9234:	00392200 	eorseq	r2, r9, r0, lsl #4
    9238:	25220000 	strcs	r0, [r2, #-0]!
    923c:	00000000 	andeq	r0, r0, r0
    9240:	00153423 	andseq	r3, r5, r3, lsr #8
    9244:	00003700 	andeq	r3, r0, r0, lsl #14
    9248:	0005ef00 	andeq	lr, r5, r0, lsl #30
    924c:	00372200 	eorseq	r2, r7, r0, lsl #4
    9250:	ef220000 	svc	0x00220000
    9254:	22000005 	andcs	r0, r0, #5
    9258:	00000099 	muleq	r0, r9, r0
    925c:	f5040600 			; <UNDEFINED> instruction: 0xf5040600
    9260:	24000005 	strcs	r0, [r0], #-5
    9264:	000e8325 	andeq	r8, lr, r5, lsr #6
    9268:	01330600 	teqeq	r3, r0, lsl #12
    926c:	000bfb26 	andeq	pc, fp, r6, lsr #22
    9270:	013b0600 	teqeq	fp, r0, lsl #12
    9274:	00000611 	andeq	r0, r0, r1, lsl r6
    9278:	0000b322 	andeq	fp, r0, r2, lsr #6
    927c:	28002700 	stmdacs	r0, {r8, r9, sl, sp}
    9280:	00000c4b 	andeq	r0, r0, fp, asr #24
    9284:	0f013006 	svceq	0x00013006
    9288:	27000001 	strcs	r0, [r0, -r1]
    928c:	22000006 	andcs	r0, r0, #6
    9290:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    9294:	13352900 	teqne	r5, #0, 18
    9298:	14070000 	strne	r0, [r7], #-0
    929c:	00000638 	andeq	r0, r0, r8, lsr r6
    92a0:	00063822 	andeq	r3, r6, r2, lsr #16
    92a4:	04060000 	streq	r0, [r6], #-0
    92a8:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
    92ac:	00193f29 	andseq	r3, r9, r9, lsr #30
    92b0:	59150700 	ldmdbpl	r5, {r8, r9, sl}
    92b4:	22000006 	andcs	r0, r0, #6
    92b8:	00000638 	andeq	r0, r0, r8, lsr r6
    92bc:	0000a022 	andeq	sl, r0, r2, lsr #32
    92c0:	00842200 	addeq	r2, r4, r0, lsl #4
    92c4:	26000000 	strcs	r0, [r0], -r0
    92c8:	00000da2 	andeq	r0, r0, r2, lsr #27
    92cc:	6b013e06 	blvs	58aec <__Stack_Size+0x582ec>
    92d0:	22000006 	andcs	r0, r0, #6
    92d4:	0000066b 	andeq	r0, r0, fp, ror #12
    92d8:	1a040600 	bne	10aae0 <__Stack_Size+0x10a2e0>
    92dc:	21000001 	tstcs	r0, r1
    92e0:	00000d12 	andeq	r0, r0, r2, lsl sp
    92e4:	0039d90a 	eorseq	sp, r9, sl, lsl #18
    92e8:	068c0000 	streq	r0, [ip], r0
    92ec:	a6220000 	strtge	r0, [r2], -r0
    92f0:	22000000 	andcs	r0, r0, #0
    92f4:	000000b3 	strheq	r0, [r0], -r3
    92f8:	09290027 	stmdbeq	r9!, {r0, r1, r2, r5}
    92fc:	07000019 	smladeq	r0, r9, r0, r0
    9300:	0006a216 	andeq	sl, r6, r6, lsl r2
    9304:	06382200 	ldrteq	r2, [r8], -r0, lsl #4
    9308:	a0220000 	eorge	r0, r2, r0
    930c:	00000000 	andeq	r0, r0, r0
    9310:	00172f21 	andseq	r2, r7, r1, lsr #30
    9314:	be2f0b00 	vmullt.f64	d0, d15, d0
    9318:	c6000000 	strgt	r0, [r0], -r0
    931c:	22000006 	andcs	r0, r0, #6
    9320:	000006c6 	andeq	r0, r0, r6, asr #13
    9324:	0006c622 	andeq	ip, r6, r2, lsr #12
    9328:	06c62200 	strbeq	r2, [r6], r0, lsl #4
    932c:	25220000 	strcs	r0, [r2, #-0]!
    9330:	00000000 	andeq	r0, r0, r0
    9334:	06cc0406 	strbeq	r0, [ip], r6, lsl #8
    9338:	be070000 	cdplt	0, 0, cr0, cr7, cr0, {0}
    933c:	00000000 	andeq	r0, r0, r0
    9340:	00000c88 	andeq	r0, r0, r8, lsl #25
    9344:	23410004 	movtcs	r0, #4100	; 0x1004
    9348:	01040000 	mrseq	r0, (UNDEF: 4)
    934c:	00001c09 	andeq	r1, r0, r9, lsl #24
    9350:	001ba901 	andseq	sl, fp, r1, lsl #18
    9354:	00089300 	andeq	r9, r8, r0, lsl #6
    9358:	000e9800 	andeq	r9, lr, r0, lsl #16
    935c:	00000000 	andeq	r0, r0, r0
    9360:	0035f400 	eorseq	pc, r5, r0, lsl #8
    9364:	05040200 	streq	r0, [r4, #-512]	; 0x200
    9368:	000004da 	ldrdeq	r0, [r0], -sl
    936c:	5e050202 	cdppl	2, 0, cr0, cr5, cr2, {0}
    9370:	02000006 	andeq	r0, r0, #6
    9374:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    9378:	75030000 	strvc	r0, [r3, #-0]
    937c:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    9380:	00004524 	andeq	r4, r0, r4, lsr #10
    9384:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9388:	00000252 	andeq	r0, r0, r2, asr r2
    938c:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    9390:	57250200 	strpl	r0, [r5, -r0, lsl #4]!
    9394:	02000000 	andeq	r0, r0, #0
    9398:	09490702 	stmdbeq	r9, {r1, r8, r9, sl}^
    939c:	75030000 	strvc	r0, [r3, #-0]
    93a0:	26020038 			; <UNDEFINED> instruction: 0x26020038
    93a4:	00000068 	andeq	r0, r0, r8, rrx
    93a8:	18080102 	stmdane	r8, {r1, r8}
    93ac:	04000008 	streq	r0, [r0], #-8
    93b0:	00001abc 			; <UNDEFINED> instruction: 0x00001abc
    93b4:	8e160301 	cdphi	3, 1, cr0, cr6, cr1, {0}
    93b8:	05000000 	streq	r0, [r0, #-0]
    93bc:	00001bbc 			; <UNDEFINED> instruction: 0x00001bbc
    93c0:	1a870500 	bne	fe1ca7c8 <BootRAM+0xd13af69>
    93c4:	05010000 	streq	r0, [r1, #-0]
    93c8:	00001b63 	andeq	r1, r0, r3, ror #22
    93cc:	bd060002 	stclt	0, cr0, [r6, #-8]
    93d0:	0300001a 	movweq	r0, #26
    93d4:	00006f1c 	andeq	r6, r0, ip, lsl pc
    93d8:	1d360700 	ldcne	7, cr0, [r6, #-0]
    93dc:	9b010000 	blls	493e4 <__Stack_Size+0x48be4>
    93e0:	0000004c 	andeq	r0, r0, ip, asr #32
    93e4:	0000b501 	andeq	fp, r0, r1, lsl #10
    93e8:	1e4c0800 	cdpne	8, 4, cr0, cr12, cr0, {0}
    93ec:	9b010000 	blls	493f4 <__Stack_Size+0x48bf4>
    93f0:	0000005e 	andeq	r0, r0, lr, asr r0
    93f4:	1d8d0900 	stcne	9, cr0, [sp]
    93f8:	22010000 	andcs	r0, r1, #0
    93fc:	00000000 	andeq	r0, r0, r0
    9400:	0000000c 	andeq	r0, r0, ip
    9404:	00d89c01 	sbcseq	r9, r8, r1, lsl #24
    9408:	2c0a0000 	stccs	0, cr0, [sl], {-0}
    940c:	0100001d 	tsteq	r0, sp, lsl r0
    9410:	00004c22 	andeq	r4, r0, r2, lsr #24
    9414:	00500100 	subseq	r0, r0, r0, lsl #2
    9418:	001af60b 	andseq	pc, sl, fp, lsl #12
    941c:	4c2e0100 	stfmis	f0, [lr], #-0
    9420:	00000000 	andeq	r0, r0, r0
    9424:	0c000000 	stceq	0, cr0, [r0], {-0}
    9428:	01000000 	mrseq	r0, (UNDEF: 0)
    942c:	1ac9099c 	bne	ff24baa4 <BootRAM+0xe1bc245>
    9430:	3a010000 	bcc	49438 <__Stack_Size+0x48c38>
    9434:	00000000 	andeq	r0, r0, r0
    9438:	0000000c 	andeq	r0, r0, ip
    943c:	01109c01 	tsteq	r0, r1, lsl #24
    9440:	2c0a0000 	stccs	0, cr0, [sl], {-0}
    9444:	0100001d 	tsteq	r0, sp, lsl r0
    9448:	00004c3a 	andeq	r4, r0, sl, lsr ip
    944c:	00500100 	subseq	r0, r0, r0, lsl #2
    9450:	001d240b 	andseq	r2, sp, fp, lsl #8
    9454:	4c460100 	stfmie	f0, [r6], {-0}
    9458:	00000000 	andeq	r0, r0, r0
    945c:	0c000000 	stceq	0, cr0, [r0], {-0}
    9460:	01000000 	mrseq	r0, (UNDEF: 0)
    9464:	1df80b9c 	ldclne	11, cr0, [r8, #624]!	; 0x270
    9468:	52010000 	andpl	r0, r1, #0
    946c:	0000004c 	andeq	r0, r0, ip, asr #32
    9470:	00000000 	andeq	r0, r0, r0
    9474:	0000000c 	andeq	r0, r0, ip
    9478:	5a099c01 	bpl	270484 <__Stack_Size+0x26fc84>
    947c:	0100001d 	tsteq	r0, sp, lsl r0
    9480:	0000005e 	andeq	r0, r0, lr, asr r0
    9484:	00000c00 	andeq	r0, r0, r0, lsl #24
    9488:	5d9c0100 	ldfpls	f0, [ip]
    948c:	0a000001 	beq	9498 <__Stack_Size+0x8c98>
    9490:	00001d2c 	andeq	r1, r0, ip, lsr #26
    9494:	004c5e01 	subeq	r5, ip, r1, lsl #28
    9498:	50010000 	andpl	r0, r1, r0
    949c:	1b0f0b00 	blne	3cc0a4 <__Stack_Size+0x3cb8a4>
    94a0:	6a010000 	bvs	494a8 <__Stack_Size+0x48ca8>
    94a4:	0000004c 	andeq	r0, r0, ip, asr #32
    94a8:	00000000 	andeq	r0, r0, r0
    94ac:	0000000c 	andeq	r0, r0, ip
    94b0:	95099c01 	strls	r9, [r9, #-3073]	; 0xc01
    94b4:	0100001d 	tsteq	r0, sp, lsl r0
    94b8:	00000076 	andeq	r0, r0, r6, ror r0
    94bc:	00001000 	andeq	r1, r0, r0
    94c0:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
    94c4:	0a000001 	beq	94d0 <__Stack_Size+0x8cd0>
    94c8:	00001d2c 	andeq	r1, r0, ip, lsr #26
    94cc:	004c7601 	subeq	r7, ip, r1, lsl #12
    94d0:	50010000 	andpl	r0, r1, r0
    94d4:	1d1a0b00 	vldrne	d0, [sl, #-0]
    94d8:	82010000 	andhi	r0, r1, #0
    94dc:	0000004c 	andeq	r0, r0, ip, asr #32
    94e0:	00000000 	andeq	r0, r0, r0
    94e4:	0000000c 	andeq	r0, r0, ip
    94e8:	53099c01 	movwpl	r9, #39937	; 0x9c01
    94ec:	0100001e 	tsteq	r0, lr, lsl r0
    94f0:	0000008f 	andeq	r0, r0, pc, lsl #1
    94f4:	00000e00 	andeq	r0, r0, r0, lsl #28
    94f8:	dc9c0100 	ldfles	f0, [ip], {0}
    94fc:	0c000001 	stceq	0, cr0, [r0], {1}
    9500:	00001e4c 	andeq	r1, r0, ip, asr #28
    9504:	005e8f01 	subseq	r8, lr, r1, lsl #30
    9508:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
    950c:	2c0a0000 	stccs	0, cr0, [sl], {-0}
    9510:	0100001d 	tsteq	r0, sp, lsl r0
    9514:	00004c8f 	andeq	r4, r0, pc, lsl #25
    9518:	00510100 	subseq	r0, r1, r0, lsl #2
    951c:	0000990d 	andeq	r9, r0, sp, lsl #18
    9520:	00000000 	andeq	r0, r0, r0
    9524:	00001000 	andeq	r1, r0, r0
    9528:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    952c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    9530:	000000a9 	andeq	r0, r0, r9, lsr #1
    9534:	0000892f 	andeq	r8, r0, pc, lsr #18
    9538:	1b590900 	blne	164b940 <__Stack_Size+0x164b140>
    953c:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    9540:	00000000 	andeq	r0, r0, r0
    9544:	0000001c 	andeq	r0, r0, ip, lsl r0
    9548:	022d9c01 	eoreq	r9, sp, #256	; 0x100
    954c:	4c0c0000 	stcmi	0, cr0, [ip], {-0}
    9550:	0100001e 	tsteq	r0, lr, lsl r0
    9554:	00005ea8 	andeq	r5, r0, r8, lsr #29
    9558:	00895000 	addeq	r5, r9, r0
    955c:	1ba30c00 	blne	fe8cc564 <BootRAM+0xd83cd05>
    9560:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    9564:	0000004c 	andeq	r0, r0, ip, asr #32
    9568:	00008971 	andeq	r8, r0, r1, ror r9
    956c:	1cca0f00 	stclne	15, cr0, [sl], {0}
    9570:	b4010000 	strlt	r0, [r1], #-0
    9574:	0000004c 	andeq	r0, r0, ip, asr #32
    9578:	00000000 	andeq	r0, r0, r0
    957c:	00000012 	andeq	r0, r0, r2, lsl r0
    9580:	02569c01 	subseq	r9, r6, #256	; 0x100
    9584:	4c0c0000 	stcmi	0, cr0, [ip], {-0}
    9588:	0100001e 	tsteq	r0, lr, lsl r0
    958c:	00005eb4 			; <UNDEFINED> instruction: 0x00005eb4
    9590:	00899200 	addeq	r9, r9, r0, lsl #4
    9594:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
    9598:	0100001e 	tsteq	r0, lr, lsl r0
    959c:	005d20c1 	subseq	r2, sp, r1, asr #1
    95a0:	00002a08 	andeq	r2, r0, r8, lsl #20
    95a4:	9f9c0100 	svcls	0x009c0100
    95a8:	0c000002 	stceq	0, cr0, [r0], {2}
    95ac:	00001e4c 	andeq	r1, r0, ip, asr #28
    95b0:	005ec101 	subseq	ip, lr, r1, lsl #2
    95b4:	89b30000 	ldmibhi	r3!, {}	; <UNPREDICTABLE>
    95b8:	250a0000 	strcs	r0, [sl, #-0]
    95bc:	01000014 	tsteq	r0, r4, lsl r0
    95c0:	00004cc1 	andeq	r4, r0, r1, asr #25
    95c4:	10510100 	subsne	r0, r1, r0, lsl #2
    95c8:	08005d20 	stmdaeq	r0, {r5, r8, sl, fp, ip, lr}
    95cc:	0000002a 	andeq	r0, r0, sl, lsr #32
    95d0:	00075e11 	andeq	r5, r7, r1, lsl lr
    95d4:	4cc30100 	stfmie	f0, [r3], {0}
    95d8:	01000000 	mrseq	r0, (UNDEF: 0)
    95dc:	09000053 	stmdbeq	r0, {r0, r1, r4, r6}
    95e0:	00001b2c 	andeq	r1, r0, ip, lsr #22
    95e4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    95e8:	002a0000 	eoreq	r0, sl, r0
    95ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    95f0:	000002e8 	andeq	r0, r0, r8, ror #5
    95f4:	001e4c0c 	andseq	r4, lr, ip, lsl #24
    95f8:	5ece0100 	polple	f0, f6, f0
    95fc:	d4000000 	strle	r0, [r0], #-0
    9600:	0a000089 	beq	982c <__Stack_Size+0x902c>
    9604:	00001425 	andeq	r1, r0, r5, lsr #8
    9608:	004cce01 	subeq	ip, ip, r1, lsl #28
    960c:	51010000 	mrspl	r0, (UNDEF: 1)
    9610:	00000010 	andeq	r0, r0, r0, lsl r0
    9614:	00002a00 	andeq	r2, r0, r0, lsl #20
    9618:	075e1100 	ldrbeq	r1, [lr, -r0, lsl #2]
    961c:	d0010000 	andle	r0, r1, r0
    9620:	0000004c 	andeq	r0, r0, ip, asr #32
    9624:	00005301 	andeq	r5, r0, r1, lsl #6
    9628:	001a7209 	andseq	r7, sl, r9, lsl #4
    962c:	00db0100 	sbcseq	r0, fp, r0, lsl #2
    9630:	24000000 	strcs	r0, [r0], #-0
    9634:	01000000 	mrseq	r0, (UNDEF: 0)
    9638:	00033e9c 	muleq	r3, ip, lr
    963c:	1e4c0c00 	cdpne	12, 4, cr0, cr12, cr0, {0}
    9640:	db010000 	blle	49648 <__Stack_Size+0x48e48>
    9644:	0000005e 	andeq	r0, r0, lr, asr r0
    9648:	000089f5 	strdeq	r8, [r0], -r5
    964c:	001b9e0a 	andseq	r9, fp, sl, lsl #28
    9650:	5edb0100 	cdppl	1, 13, cr0, cr11, cr0, {0}
    9654:	01000000 	mrseq	r0, (UNDEF: 0)
    9658:	1e101251 	mrcne	2, 0, r1, cr0, cr1, {2}
    965c:	dd010000 	stcle	0, cr0, [r1, #-0]
    9660:	0000004c 	andeq	r0, r0, ip, asr #32
    9664:	00009913 	andeq	r9, r0, r3, lsl r9
    9668:	00000000 	andeq	r0, r0, r0
    966c:	000de800 	andeq	lr, sp, r0, lsl #16
    9670:	0ede0100 	cdpeq	1, 13, cr0, cr14, cr0, {0}
    9674:	000000a9 	andeq	r0, r0, r9, lsr #1
    9678:	000089f5 	strdeq	r8, [r0], -r5
    967c:	900f0000 	andls	r0, pc, r0
    9680:	0100001b 	tsteq	r0, fp, lsl r0
    9684:	00004cf0 	strdeq	r4, [r0], -r0
    9688:	00000000 	andeq	r0, r0, r0
    968c:	00001200 	andeq	r1, r0, r0, lsl #4
    9690:	679c0100 	ldrvs	r0, [ip, r0, lsl #2]
    9694:	0c000003 	stceq	0, cr0, [r0], {3}
    9698:	00001e4c 	andeq	r1, r0, ip, asr #28
    969c:	005ef001 	subseq	pc, lr, r1
    96a0:	8a160000 	bhi	5896a8 <__Stack_Size+0x588ea8>
    96a4:	0f000000 	svceq	0x00000000
    96a8:	00001a93 	muleq	r0, r3, sl
    96ac:	004cfc01 	subeq	pc, ip, r1, lsl #24
    96b0:	00000000 	andeq	r0, r0, r0
    96b4:	00120000 	andseq	r0, r2, r0
    96b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    96bc:	00000390 	muleq	r0, r0, r3
    96c0:	001e4c0c 	andseq	r4, lr, ip, lsl #24
    96c4:	5efc0100 	cdppl	1, 15, cr0, cr12, cr0, {0}
    96c8:	37000000 	strcc	r0, [r0, -r0]
    96cc:	0000008a 	andeq	r0, r0, sl, lsl #1
    96d0:	001a6514 	andseq	r6, sl, r4, lsl r5
    96d4:	01080100 	mrseq	r0, (UNDEF: 24)
    96d8:	00000000 	andeq	r0, r0, r0
    96dc:	0000001e 	andeq	r0, r0, lr, lsl r0
    96e0:	03d19c01 	bicseq	r9, r1, #256	; 0x100
    96e4:	4c150000 	ldcmi	0, cr0, [r5], {-0}
    96e8:	0100001e 	tsteq	r0, lr, lsl r0
    96ec:	005e0108 	subseq	r0, lr, r8, lsl #2
    96f0:	8a580000 	bhi	16096f8 <__Stack_Size+0x1608ef8>
    96f4:	00100000 	andseq	r0, r0, r0
    96f8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    96fc:	16000000 	strne	r0, [r0], -r0
    9700:	0000075e 	andeq	r0, r0, lr, asr r7
    9704:	4c010a01 	stcmi	10, cr0, [r1], {1}
    9708:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    970c:	0000008a 	andeq	r0, r0, sl, lsl #1
    9710:	037f1400 	cmneq	pc, #0, 8
    9714:	14010000 	strne	r0, [r1], #-0
    9718:	005d4a01 	subseq	r4, sp, r1, lsl #20
    971c:	00001e08 	andeq	r1, r0, r8, lsl #28
    9720:	129c0100 	addsne	r0, ip, #0, 2
    9724:	15000004 	strne	r0, [r0, #-4]
    9728:	00001e4c 	andeq	r1, r0, ip, asr #28
    972c:	5e011401 	cdppl	4, 0, cr1, cr1, cr1, {0}
    9730:	a4000000 	strge	r0, [r0], #-0
    9734:	1000008a 	andne	r0, r0, sl, lsl #1
    9738:	08005d4a 	stmdaeq	r0, {r1, r3, r6, r8, sl, fp, ip, lr}
    973c:	0000001e 	andeq	r0, r0, lr, lsl r0
    9740:	00075e16 	andeq	r5, r7, r6, lsl lr
    9744:	01160100 	tsteq	r6, r0, lsl #2
    9748:	0000004c 	andeq	r0, r0, ip, asr #32
    974c:	00008ac5 	andeq	r8, r0, r5, asr #21
    9750:	f5140000 			; <UNDEFINED> instruction: 0xf5140000
    9754:	0100001c 	tsteq	r0, ip, lsl r0
    9758:	00000120 	andeq	r0, r0, r0, lsr #2
    975c:	001e0000 	andseq	r0, lr, r0
    9760:	9c010000 	stcls	0, cr0, [r1], {-0}
    9764:	00000439 	andeq	r0, r0, r9, lsr r4
    9768:	001e4c15 	andseq	r4, lr, r5, lsl ip
    976c:	01200100 	teqeq	r0, r0, lsl #2
    9770:	0000005e 	andeq	r0, r0, lr, asr r0
    9774:	00008af3 	strdeq	r8, [r0], -r3
    9778:	1d0d1400 	cfstrsne	mvf1, [sp, #-0]
    977c:	2c010000 	stccs	0, cr0, [r1], {-0}
    9780:	00000001 	andeq	r0, r0, r1
    9784:	00001c00 	andeq	r1, r0, r0, lsl #24
    9788:	609c0100 	addsvs	r0, ip, r0, lsl #2
    978c:	15000004 	strne	r0, [r0, #-4]
    9790:	00001e4c 	andeq	r1, r0, ip, asr #28
    9794:	5e012c01 	cdppl	12, 0, cr2, cr1, cr1, {0}
    9798:	14000000 	strne	r0, [r0], #-0
    979c:	0000008b 	andeq	r0, r0, fp, lsl #1
    97a0:	00079414 	andeq	r9, r7, r4, lsl r4
    97a4:	01370100 	teqeq	r7, r0, lsl #2
    97a8:	08005d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip, lr}
    97ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    97b0:	04879c01 	streq	r9, [r7], #3073	; 0xc01
    97b4:	4c150000 	ldcmi	0, cr0, [r5], {-0}
    97b8:	0100001e 	tsteq	r0, lr, lsl r0
    97bc:	005e0137 	subseq	r0, lr, r7, lsr r1
    97c0:	8b350000 	blhi	d497c8 <__Stack_Size+0xd48fc8>
    97c4:	14000000 	strne	r0, [r0], #-0
    97c8:	00001de9 	andeq	r1, r0, r9, ror #27
    97cc:	00014201 	andeq	r4, r1, r1, lsl #4
    97d0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    97d4:	01000000 	mrseq	r0, (UNDEF: 0)
    97d8:	0004ae9c 	muleq	r4, ip, lr
    97dc:	1e4c1500 	cdpne	5, 4, cr1, cr12, cr0, {0}
    97e0:	42010000 	andmi	r0, r1, #0
    97e4:	00005e01 	andeq	r5, r0, r1, lsl #28
    97e8:	008b5600 	addeq	r5, fp, r0, lsl #12
    97ec:	e6140000 	ldr	r0, [r4], -r0
    97f0:	0100001b 	tsteq	r0, fp, lsl r0
    97f4:	0000014d 	andeq	r0, r0, sp, asr #2
    97f8:	001e0000 	andseq	r0, lr, r0
    97fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    9800:	000004d5 	ldrdeq	r0, [r0], -r5
    9804:	001e4c15 	andseq	r4, lr, r5, lsl ip
    9808:	014d0100 	mrseq	r0, (UNDEF: 93)
    980c:	0000005e 	andeq	r0, r0, lr, asr r0
    9810:	00008b77 	andeq	r8, r0, r7, ror fp
    9814:	1ca71400 	cfstrsne	mvf1, [r7]
    9818:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    981c:	00000001 	andeq	r0, r0, r1
    9820:	00001c00 	andeq	r1, r0, r0, lsl #24
    9824:	fc9c0100 	ldc2	1, cr0, [ip], {0}
    9828:	15000004 	strne	r0, [r0, #-4]
    982c:	00001e4c 	andeq	r1, r0, ip, asr #28
    9830:	5e015801 	cdppl	8, 0, cr5, cr1, cr1, {0}
    9834:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    9838:	0000008b 	andeq	r0, r0, fp, lsl #1
    983c:	001a4317 	andseq	r4, sl, r7, lsl r3
    9840:	01630100 	cmneq	r3, r0, lsl #2
    9844:	0000004c 	andeq	r0, r0, ip, asr #32
    9848:	00000000 	andeq	r0, r0, r0
    984c:	0000001a 	andeq	r0, r0, sl, lsl r0
    9850:	05279c01 	streq	r9, [r7, #-3073]!	; 0xc01
    9854:	4c150000 	ldcmi	0, cr0, [r5], {-0}
    9858:	0100001e 	tsteq	r0, lr, lsl r0
    985c:	005e0163 	subseq	r0, lr, r3, ror #2
    9860:	8bb90000 	blhi	fee49868 <BootRAM+0xddba009>
    9864:	17000000 	strne	r0, [r0, -r0]
    9868:	00001afe 	strdeq	r1, [r0], -lr
    986c:	4c016e01 	stcmi	14, cr6, [r1], {1}
    9870:	00000000 	andeq	r0, r0, r0
    9874:	1a000000 	bne	987c <__Stack_Size+0x907c>
    9878:	01000000 	mrseq	r0, (UNDEF: 0)
    987c:	0005529c 	muleq	r5, ip, r2
    9880:	1e4c1500 	cdpne	5, 4, cr1, cr12, cr0, {0}
    9884:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    9888:	00005e01 	andeq	r5, r0, r1, lsl #28
    988c:	008bda00 	addeq	sp, fp, r0, lsl #20
    9890:	d4140000 	ldrle	r0, [r4], #-0
    9894:	0100001c 	tsteq	r0, ip, lsl r0
    9898:	00000179 	andeq	r0, r0, r9, ror r1
    989c:	00180000 	andseq	r0, r8, r0
    98a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    98a4:	00000579 	andeq	r0, r0, r9, ror r5
    98a8:	001e4c15 	andseq	r4, lr, r5, lsl ip
    98ac:	01790100 	cmneq	r9, r0, lsl #2
    98b0:	0000005e 	andeq	r0, r0, lr, asr r0
    98b4:	00008bfb 	strdeq	r8, [r0], -fp
    98b8:	1dac1400 	cfstrsne	mvf1, [ip]
    98bc:	84010000 	strhi	r0, [r1], #-0
    98c0:	00000001 	andeq	r0, r0, r1
    98c4:	00001c00 	andeq	r1, r0, r0, lsl #24
    98c8:	a09c0100 	addsge	r0, ip, r0, lsl #2
    98cc:	15000005 	strne	r0, [r0, #-5]
    98d0:	00001e4c 	andeq	r1, r0, ip, asr #28
    98d4:	5e018401 	cdppl	4, 0, cr8, cr1, cr1, {0}
    98d8:	1c000000 	stcne	0, cr0, [r0], {-0}
    98dc:	0000008c 	andeq	r0, r0, ip, lsl #1
    98e0:	001b3a14 	andseq	r3, fp, r4, lsl sl
    98e4:	018f0100 	orreq	r0, pc, r0, lsl #2
    98e8:	00000000 	andeq	r0, r0, r0
    98ec:	00000020 	andeq	r0, r0, r0, lsr #32
    98f0:	05c79c01 	strbeq	r9, [r7, #3073]	; 0xc01
    98f4:	4c150000 	ldcmi	0, cr0, [r5], {-0}
    98f8:	0100001e 	tsteq	r0, lr, lsl r0
    98fc:	005e018f 	subseq	r0, lr, pc, lsl #3
    9900:	8c3d0000 	ldchi	0, cr0, [sp], #-0
    9904:	14000000 	strne	r0, [r0], #-0
    9908:	00001aa1 	andeq	r1, r0, r1, lsr #21
    990c:	00019a01 	andeq	r9, r1, r1, lsl #20
    9910:	20000000 	andcs	r0, r0, r0
    9914:	01000000 	mrseq	r0, (UNDEF: 0)
    9918:	0005ee9c 	muleq	r5, ip, lr
    991c:	1e4c1500 	cdpne	5, 4, cr1, cr12, cr0, {0}
    9920:	9a010000 	bls	49928 <__Stack_Size+0x49128>
    9924:	00005e01 	andeq	r5, r0, r1, lsl #28
    9928:	008c5e00 	addeq	r5, ip, r0, lsl #28
    992c:	e3140000 	tst	r4, #0
    9930:	0100001a 	tsteq	r0, sl, lsl r0
    9934:	5d8401a5 	stfpls	f0, [r4, #660]	; 0x294
    9938:	00200800 	eoreq	r0, r0, r0, lsl #16
    993c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9940:	00000615 	andeq	r0, r0, r5, lsl r6
    9944:	001e4c15 	andseq	r4, lr, r5, lsl ip
    9948:	01a50100 			; <UNDEFINED> instruction: 0x01a50100
    994c:	0000005e 	andeq	r0, r0, lr, asr r0
    9950:	00008c7f 	andeq	r8, r0, pc, ror ip
    9954:	1e311400 	cfabssne	mvf1, mvf1
    9958:	b0010000 	andlt	r0, r1, r0
    995c:	005da401 	subseq	sl, sp, r1, lsl #8
    9960:	00002008 	andeq	r2, r0, r8
    9964:	3c9c0100 	ldfccs	f0, [ip], {0}
    9968:	15000006 	strne	r0, [r0, #-6]
    996c:	00001e4c 	andeq	r1, r0, ip, asr #28
    9970:	5e01b001 	cdppl	0, 0, cr11, cr1, cr1, {0}
    9974:	a0000000 	andge	r0, r0, r0
    9978:	0000008c 	andeq	r0, r0, ip, lsl #1
    997c:	001b1f14 	andseq	r1, fp, r4, lsl pc
    9980:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    9984:	00000000 	andeq	r0, r0, r0
    9988:	0000001e 	andeq	r0, r0, lr, lsl r0
    998c:	06739c01 	ldrbteq	r9, [r3], -r1, lsl #24
    9990:	4c150000 	ldcmi	0, cr0, [r5], {-0}
    9994:	0100001e 	tsteq	r0, lr, lsl r0
    9998:	005e01bc 	ldrheq	r0, [lr], #-28	; 0xffffffe4
    999c:	8cc10000 	stclhi	0, cr0, [r1], {0}
    99a0:	f0150000 			; <UNDEFINED> instruction: 0xf0150000
    99a4:	0100001a 	tsteq	r0, sl, lsl r0
    99a8:	005e01bc 	ldrheq	r0, [lr], #-28	; 0xffffffe4
    99ac:	8ce20000 	stclhi	0, cr0, [r2]
    99b0:	17000000 	strne	r0, [r0, -r0]
    99b4:	00001aaf 	andeq	r1, r0, pc, lsr #21
    99b8:	5e01c701 	cdppl	7, 0, cr12, cr1, cr1, {0}
    99bc:	00000000 	andeq	r0, r0, r0
    99c0:	12000000 	andne	r0, r0, #0
    99c4:	01000000 	mrseq	r0, (UNDEF: 0)
    99c8:	00069e9c 	muleq	r6, ip, lr
    99cc:	1e4c1500 	cdpne	5, 4, cr1, cr12, cr0, {0}
    99d0:	c7010000 	strgt	r0, [r1, -r0]
    99d4:	00005e01 	andeq	r5, r0, r1, lsl #28
    99d8:	008d0300 	addeq	r0, sp, r0, lsl #6
    99dc:	fd140000 	ldc2	0, cr0, [r4, #-0]
    99e0:	0100001b 	tsteq	r0, fp, lsl r0
    99e4:	000001d3 	ldrdeq	r0, [r0], -r3
    99e8:	00200000 	eoreq	r0, r0, r0
    99ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    99f0:	000006d5 	ldrdeq	r0, [r0], -r5
    99f4:	001e4c15 	andseq	r4, lr, r5, lsl ip
    99f8:	01d30100 	bicseq	r0, r3, r0, lsl #2
    99fc:	0000005e 	andeq	r0, r0, lr, asr r0
    9a00:	00008d24 	andeq	r8, r0, r4, lsr #26
    9a04:	001d4215 	andseq	r4, sp, r5, lsl r2
    9a08:	01d30100 	bicseq	r0, r3, r0, lsl #2
    9a0c:	0000004c 	andeq	r0, r0, ip, asr #32
    9a10:	00008d45 	andeq	r8, r0, r5, asr #26
    9a14:	1e5f1400 	cdpne	4, 5, cr1, cr15, cr0, {0}
    9a18:	df010000 	svcle	0x00010000
    9a1c:	00000001 	andeq	r0, r0, r1
    9a20:	00002000 	andeq	r2, r0, r0
    9a24:	0c9c0100 	ldfeqs	f0, [ip], {0}
    9a28:	15000007 	strne	r0, [r0, #-7]
    9a2c:	00001e4c 	andeq	r1, r0, ip, asr #28
    9a30:	5e01df01 	cdppl	15, 0, cr13, cr1, cr1, {0}
    9a34:	66000000 	strvs	r0, [r0], -r0
    9a38:	1500008d 	strne	r0, [r0, #-141]	; 0x8d
    9a3c:	00001d42 	andeq	r1, r0, r2, asr #26
    9a40:	4c01df01 	stcmi	15, cr13, [r1], {1}
    9a44:	87000000 	strhi	r0, [r0, -r0]
    9a48:	0000008d 	andeq	r0, r0, sp, lsl #1
    9a4c:	001e2517 	andseq	r2, lr, r7, lsl r5
    9a50:	01ea0100 	mvneq	r0, r0, lsl #2
    9a54:	0000004c 	andeq	r0, r0, ip, asr #32
    9a58:	08005dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp, ip, lr}
    9a5c:	0000001c 	andeq	r0, r0, ip, lsl r0
    9a60:	07379c01 	ldreq	r9, [r7, -r1, lsl #24]!
    9a64:	4c150000 	ldcmi	0, cr0, [r5], {-0}
    9a68:	0100001e 	tsteq	r0, lr, lsl r0
    9a6c:	005e01ea 	subseq	r0, lr, sl, ror #3
    9a70:	8da80000 	stchi	0, cr0, [r8]
    9a74:	17000000 	strne	r0, [r0, -r0]
    9a78:	00001b73 	andeq	r1, r0, r3, ror fp
    9a7c:	4c01f501 	cfstr32mi	mvfx15, [r1], {1}
    9a80:	e0000000 	and	r0, r0, r0
    9a84:	1c08005d 	stcne	0, cr0, [r8], {93}	; 0x5d
    9a88:	01000000 	mrseq	r0, (UNDEF: 0)
    9a8c:	0007629c 	muleq	r7, ip, r2
    9a90:	1e4c1500 	cdpne	5, 4, cr1, cr12, cr0, {0}
    9a94:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    9a98:	00005e01 	andeq	r5, r0, r1, lsl #28
    9a9c:	008dc900 	addeq	ip, sp, r0, lsl #18
    9aa0:	00140000 	andseq	r0, r4, r0
    9aa4:	0100001d 	tsteq	r0, sp, lsl r0
    9aa8:	5dfc0201 	lfmpl	f0, 2, [ip, #4]!
    9aac:	001c0800 	andseq	r0, ip, r0, lsl #16
    9ab0:	9c010000 	stcls	0, cr0, [r1], {-0}
    9ab4:	00000797 	muleq	r0, r7, r7
    9ab8:	001e4c15 	andseq	r4, lr, r5, lsl ip
    9abc:	02010100 	andeq	r0, r1, #0, 2
    9ac0:	0000005e 	andeq	r0, r0, lr, asr r0
    9ac4:	00008dea 	andeq	r8, r0, sl, ror #27
    9ac8:	001b1818 	andseq	r1, fp, r8, lsl r8
    9acc:	02010100 	andeq	r0, r1, #0, 2
    9ad0:	0000004c 	andeq	r0, r0, ip, asr #32
    9ad4:	14005101 	strne	r5, [r0], #-257	; 0x101
    9ad8:	00001d6a 	andeq	r1, r0, sl, ror #26
    9adc:	00020d01 	andeq	r0, r2, r1, lsl #26
    9ae0:	26000000 	strcs	r0, [r0], -r0
    9ae4:	01000000 	mrseq	r0, (UNDEF: 0)
    9ae8:	0007e69c 	muleq	r7, ip, r6
    9aec:	1d631800 	stclne	8, cr1, [r3, #-0]
    9af0:	0d010000 	stceq	0, cr0, [r1, #-0]
    9af4:	0007e602 	andeq	lr, r7, r2, lsl #12
    9af8:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    9afc:	00001b18 	andeq	r1, r0, r8, lsl fp
    9b00:	4c020d01 	stcmi	13, cr0, [r2], {1}
    9b04:	0b000000 	bleq	9b0c <__Stack_Size+0x930c>
    9b08:	1000008e 	andne	r0, r0, lr, lsl #1
    9b0c:	00000000 	andeq	r0, r0, r0
    9b10:	00000026 	andeq	r0, r0, r6, lsr #32
    9b14:	001ada16 	andseq	sp, sl, r6, lsl sl
    9b18:	020f0100 	andeq	r0, pc, #0, 2
    9b1c:	0000004c 	andeq	r0, r0, ip, asr #32
    9b20:	00008e45 	andeq	r8, r0, r5, asr #28
    9b24:	04190000 	ldreq	r0, [r9], #-0
    9b28:	0000003a 	andeq	r0, r0, sl, lsr r0
    9b2c:	00099c14 	andeq	r9, r9, r4, lsl ip
    9b30:	02190100 	andseq	r0, r9, #0, 2
    9b34:	08005e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, ip, lr}
    9b38:	00000040 	andeq	r0, r0, r0, asr #32
    9b3c:	08519c01 	ldmdaeq	r1, {r0, sl, fp, ip, pc}^
    9b40:	4c150000 	ldcmi	0, cr0, [r5], {-0}
    9b44:	0100001e 	tsteq	r0, lr, lsl r0
    9b48:	005e0219 	subseq	r0, lr, r9, lsl r2
    9b4c:	8e6e0000 	cdphi	0, 6, cr0, cr14, cr0, {0}
    9b50:	18150000 	ldmdane	r5, {}	; <UNPREDICTABLE>
    9b54:	0100001b 	tsteq	r0, fp, lsl r0
    9b58:	004c0219 	subeq	r0, ip, r9, lsl r2
    9b5c:	8e8f0000 	cdphi	0, 8, cr0, cr15, cr0, {0}
    9b60:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    9b64:	4008005e 	andmi	r0, r8, lr, asr r0
    9b68:	1a000000 	bne	9b70 <__Stack_Size+0x9370>
    9b6c:	00001d63 	andeq	r1, r0, r3, ror #26
    9b70:	e6021b01 	str	r1, [r2], -r1, lsl #22
    9b74:	01000007 	tsteq	r0, r7
    9b78:	0e001b52 	mcreq	11, 0, r1, cr0, cr2, {2}
    9b7c:	da160000 	ble	589b84 <__Stack_Size+0x589384>
    9b80:	0100001a 	tsteq	r0, sl, lsl r0
    9b84:	004c021b 	subeq	r0, ip, fp, lsl r2
    9b88:	8eb00000 	cdphi	0, 11, cr0, cr0, cr0, {0}
    9b8c:	00000000 	andeq	r0, r0, r0
    9b90:	1d9f1700 	ldcne	7, cr1, [pc]	; 9b98 <__Stack_Size+0x9398>
    9b94:	24010000 	strcs	r0, [r1], #-0
    9b98:	00004c02 	andeq	r4, r0, r2, lsl #24
    9b9c:	00000000 	andeq	r0, r0, r0
    9ba0:	00002000 	andeq	r2, r0, r0
    9ba4:	7c9c0100 	ldfvcs	f0, [ip], {0}
    9ba8:	15000008 	strne	r0, [r0, #-8]
    9bac:	00001e4c 	andeq	r1, r0, ip, asr #28
    9bb0:	5e022401 	cdppl	4, 0, cr2, cr2, cr1, {0}
    9bb4:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    9bb8:	0000008e 	andeq	r0, r0, lr, lsl #1
    9bbc:	001d7a17 	andseq	r7, sp, r7, lsl sl
    9bc0:	022f0100 	eoreq	r0, pc, #0, 2
    9bc4:	0000004c 	andeq	r0, r0, ip, asr #32
    9bc8:	00000000 	andeq	r0, r0, r0
    9bcc:	00000020 	andeq	r0, r0, r0, lsr #32
    9bd0:	08a79c01 	stmiaeq	r7!, {r0, sl, fp, ip, pc}
    9bd4:	4c150000 	ldcmi	0, cr0, [r5], {-0}
    9bd8:	0100001e 	tsteq	r0, lr, lsl r0
    9bdc:	005e022f 	subseq	r0, lr, pc, lsr #4
    9be0:	8f090000 	svchi	0x00090000
    9be4:	14000000 	strne	r0, [r0], #-0
    9be8:	00001b48 	andeq	r1, r0, r8, asr #22
    9bec:	00023c01 	andeq	r3, r2, r1, lsl #24
    9bf0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    9bf4:	01000000 	mrseq	r0, (UNDEF: 0)
    9bf8:	0008ee9c 	muleq	r8, ip, lr
    9bfc:	1e4c1500 	cdpne	5, 4, cr1, cr12, cr0, {0}
    9c00:	3c010000 	stccc	0, cr0, [r1], {-0}
    9c04:	00005e02 	andeq	r5, r0, r2, lsl #28
    9c08:	008f2a00 	addeq	r2, pc, r0, lsl #20
    9c0c:	1ddf1500 	cfldr64ne	mvdx1, [pc]	; 9c14 <__Stack_Size+0x9414>
    9c10:	3c010000 	stccc	0, cr0, [r1], {-0}
    9c14:	00004c02 	andeq	r4, r0, r2, lsl #24
    9c18:	008f4b00 	addeq	r4, pc, r0, lsl #22
    9c1c:	1bd71500 	blne	ff5cf024 <BootRAM+0xe53f7c5>
    9c20:	3c010000 	stccc	0, cr0, [r1], {-0}
    9c24:	00004c02 	andeq	r4, r0, r2, lsl #24
    9c28:	008f6c00 	addeq	r6, pc, r0, lsl #24
    9c2c:	7f140000 	svcvc	0x00140000
    9c30:	0100001b 	tsteq	r0, fp, lsl r0
    9c34:	00000248 	andeq	r0, r0, r8, asr #4
    9c38:	00200000 	eoreq	r0, r0, r0
    9c3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9c40:	00000925 	andeq	r0, r0, r5, lsr #18
    9c44:	001e4c15 	andseq	r4, lr, r5, lsl ip
    9c48:	02480100 	subeq	r0, r8, #0, 2
    9c4c:	0000005e 	andeq	r0, r0, lr, asr r0
    9c50:	00008f8d 	andeq	r8, r0, sp, lsl #31
    9c54:	001ddf15 	andseq	sp, sp, r5, lsl pc
    9c58:	02480100 	subeq	r0, r8, #0, 2
    9c5c:	0000004c 	andeq	r0, r0, ip, asr #32
    9c60:	00008fae 	andeq	r8, r0, lr, lsr #31
    9c64:	1a541400 	bne	150ec6c <__Stack_Size+0x150e46c>
    9c68:	54010000 	strpl	r0, [r1], #-0
    9c6c:	00000002 	andeq	r0, r0, r2
    9c70:	00002000 	andeq	r2, r0, r0
    9c74:	5c9c0100 	ldfpls	f0, [ip], {0}
    9c78:	15000009 	strne	r0, [r0, #-9]
    9c7c:	00001e4c 	andeq	r1, r0, ip, asr #28
    9c80:	5e025401 	cdppl	4, 0, cr5, cr2, cr1, {0}
    9c84:	cf000000 	svcgt	0x00000000
    9c88:	1500008f 	strne	r0, [r0, #-143]	; 0x8f
    9c8c:	00001bd7 	ldrdeq	r1, [r0], -r7
    9c90:	4c025401 	cfstrsmi	mvf5, [r2], {1}
    9c94:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    9c98:	0000008f 	andeq	r0, r0, pc, lsl #1
    9c9c:	001dff17 	andseq	pc, sp, r7, lsl pc	; <UNPREDICTABLE>
    9ca0:	025f0100 	subseq	r0, pc, #0, 2
    9ca4:	0000004c 	andeq	r0, r0, ip, asr #32
    9ca8:	00000000 	andeq	r0, r0, r0
    9cac:	0000001c 	andeq	r0, r0, ip, lsl r0
    9cb0:	09879c01 	stmibeq	r7, {r0, sl, fp, ip, pc}
    9cb4:	4c150000 	ldcmi	0, cr0, [r5], {-0}
    9cb8:	0100001e 	tsteq	r0, lr, lsl r0
    9cbc:	005e025f 	subseq	r0, lr, pc, asr r2
    9cc0:	90110000 	andsls	r0, r1, r0
    9cc4:	17000000 	strne	r0, [r0, -r0]
    9cc8:	00001cb9 			; <UNDEFINED> instruction: 0x00001cb9
    9ccc:	4c026a01 	stcmi	10, cr6, [r2], {1}
    9cd0:	00000000 	andeq	r0, r0, r0
    9cd4:	1c000000 	stcne	0, cr0, [r0], {-0}
    9cd8:	01000000 	mrseq	r0, (UNDEF: 0)
    9cdc:	0009b29c 	muleq	r9, ip, r2
    9ce0:	1e4c1500 	cdpne	5, 4, cr1, cr12, cr0, {0}
    9ce4:	6a010000 	bvs	49cec <__Stack_Size+0x494ec>
    9ce8:	00005e02 	andeq	r5, r0, r2, lsl #28
    9cec:	00903200 	addseq	r3, r0, r0, lsl #4
    9cf0:	e3140000 	tst	r4, #0
    9cf4:	0100001c 	tsteq	r0, ip, lsl r0
    9cf8:	00000276 	andeq	r0, r0, r6, ror r2
    9cfc:	00a80000 	adceq	r0, r8, r0
    9d00:	9c010000 	stcls	0, cr0, [r1], {-0}
    9d04:	00000a59 	andeq	r0, r0, r9, asr sl
    9d08:	001e4c15 	andseq	r4, lr, r5, lsl ip
    9d0c:	02760100 	rsbseq	r0, r6, #0, 2
    9d10:	0000005e 	andeq	r0, r0, lr, asr r0
    9d14:	00009053 	andeq	r9, r0, r3, asr r0
    9d18:	001b9e15 	andseq	r9, fp, r5, lsl lr
    9d1c:	02760100 	rsbseq	r0, r6, #0, 2
    9d20:	0000005e 	andeq	r0, r0, lr, asr r0
    9d24:	00009098 	muleq	r0, r8, r0
    9d28:	001b1815 	andseq	r1, fp, r5, lsl r8
    9d2c:	02760100 	rsbseq	r0, r6, #0, 2
    9d30:	0000004c 	andeq	r0, r0, ip, asr #32
    9d34:	000090dd 	ldrdeq	r9, [r0], -sp
    9d38:	0000001c 	andeq	r0, r0, ip, lsl r0
    9d3c:	00003a00 	andeq	r3, r0, r0, lsl #20
    9d40:	000a2c00 	andeq	r2, sl, r0, lsl #24
    9d44:	1d631600 	stclne	6, cr1, [r3, #-0]
    9d48:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    9d4c:	0007e602 	andeq	lr, r7, r2, lsl #12
    9d50:	00910900 	addseq	r0, r1, r0, lsl #18
    9d54:	0e181b00 	vnmlseq.f64	d1, d8, d0
    9d58:	da160000 	ble	589d60 <__Stack_Size+0x589560>
    9d5c:	0100001a 	tsteq	r0, sl, lsl r0
    9d60:	004c0278 	subeq	r0, ip, r8, ror r2
    9d64:	91270000 	teqls	r7, r0
    9d68:	00000000 	andeq	r0, r0, r0
    9d6c:	000e301b 	andeq	r3, lr, fp, lsl r0
    9d70:	1d631600 	stclne	6, cr1, [r3, #-0]
    9d74:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    9d78:	0007e602 	andeq	lr, r7, r2, lsl #12
    9d7c:	00915f00 	addseq	r5, r1, r0, lsl #30
    9d80:	0e481b00 	vmlaeq.f64	d17, d8, d0
    9d84:	da160000 	ble	589d8c <__Stack_Size+0x58958c>
    9d88:	0100001a 	tsteq	r0, sl, lsl r0
    9d8c:	004c0278 	subeq	r0, ip, r8, ror r2
    9d90:	917d0000 	cmnls	sp, r0
    9d94:	00000000 	andeq	r0, r0, r0
    9d98:	1dcd1400 	cfstrdne	mvd1, [sp]
    9d9c:	82010000 	andhi	r0, r1, #0
    9da0:	00000002 	andeq	r0, r0, r2
    9da4:	00005c00 	andeq	r5, r0, r0, lsl #24
    9da8:	d09c0100 	addsle	r0, ip, r0, lsl #2
    9dac:	1500000a 	strne	r0, [r0, #-10]
    9db0:	00001e4c 	andeq	r1, r0, ip, asr #28
    9db4:	5e028201 	cdppl	2, 0, cr8, cr2, cr1, {0}
    9db8:	b5000000 	strlt	r0, [r0, #-0]
    9dbc:	15000091 	strne	r0, [r0, #-145]	; 0x91
    9dc0:	00001b9e 	muleq	r0, lr, fp
    9dc4:	5e028201 	cdppl	2, 0, cr8, cr2, cr1, {0}
    9dc8:	ef000000 	svc	0x00000000
    9dcc:	15000091 	strne	r0, [r0, #-145]	; 0x91
    9dd0:	00001b18 	andeq	r1, r0, r8, lsl fp
    9dd4:	4c028201 	sfmmi	f0, 1, [r2], {1}
    9dd8:	1b000000 	blne	9de0 <__Stack_Size+0x95e0>
    9ddc:	10000092 	mulne	r0, r2, r0
    9de0:	00000000 	andeq	r0, r0, r0
    9de4:	00000038 	andeq	r0, r0, r8, lsr r0
    9de8:	001d6316 	andseq	r6, sp, r6, lsl r3
    9dec:	02840100 	addeq	r0, r4, #0, 2
    9df0:	000007e6 	andeq	r0, r0, r6, ror #15
    9df4:	00009247 	andeq	r9, r0, r7, asr #4
    9df8:	000e681b 	andeq	r6, lr, fp, lsl r8
    9dfc:	1ada1600 	bne	ff68f604 <BootRAM+0xe5ffda5>
    9e00:	84010000 	strhi	r0, [r1], #-0
    9e04:	00004c02 	andeq	r4, r0, r2, lsl #24
    9e08:	00925a00 	addseq	r5, r2, r0, lsl #20
    9e0c:	00000000 	andeq	r0, r0, r0
    9e10:	001e6b14 	andseq	r6, lr, r4, lsl fp
    9e14:	028e0100 	addeq	r0, lr, #0, 2
    9e18:	00000000 	andeq	r0, r0, r0
    9e1c:	0000005c 	andeq	r0, r0, ip, asr r0
    9e20:	0b479c01 	bleq	11f0e2c <__Stack_Size+0x11f062c>
    9e24:	4c150000 	ldcmi	0, cr0, [r5], {-0}
    9e28:	0100001e 	tsteq	r0, lr, lsl r0
    9e2c:	005e028e 	subseq	r0, lr, lr, lsl #5
    9e30:	92920000 	addsls	r0, r2, #0
    9e34:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    9e38:	0100001b 	tsteq	r0, fp, lsl r0
    9e3c:	005e028e 	subseq	r0, lr, lr, lsl #5
    9e40:	92cc0000 	sbcls	r0, ip, #0
    9e44:	18150000 	ldmdane	r5, {}	; <UNPREDICTABLE>
    9e48:	0100001b 	tsteq	r0, fp, lsl r0
    9e4c:	004c028e 	subeq	r0, ip, lr, lsl #5
    9e50:	92f80000 	rscsls	r0, r8, #0
    9e54:	00100000 	andseq	r0, r0, r0
    9e58:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    9e5c:	16000000 	strne	r0, [r0], -r0
    9e60:	00001d63 	andeq	r1, r0, r3, ror #26
    9e64:	e6029001 	str	r9, [r2], -r1
    9e68:	24000007 	strcs	r0, [r0], #-7
    9e6c:	1b000093 	blne	a0c0 <__Stack_Size+0x98c0>
    9e70:	00000e80 	andeq	r0, r0, r0, lsl #29
    9e74:	001ada16 	andseq	sp, sl, r6, lsl sl
    9e78:	02900100 	addseq	r0, r0, #0, 2
    9e7c:	0000004c 	andeq	r0, r0, ip, asr #32
    9e80:	00009337 	andeq	r9, r0, r7, lsr r3
    9e84:	17000000 	strne	r0, [r0, -r0]
    9e88:	00001d48 	andeq	r1, r0, r8, asr #26
    9e8c:	4c029a01 	stcmi	10, cr9, [r2], {1}
    9e90:	00000000 	andeq	r0, r0, r0
    9e94:	20000000 	andcs	r0, r0, r0
    9e98:	01000000 	mrseq	r0, (UNDEF: 0)
    9e9c:	000b729c 	muleq	fp, ip, r2
    9ea0:	1e4c1500 	cdpne	5, 4, cr1, cr12, cr0, {0}
    9ea4:	9a010000 	bls	49eac <__Stack_Size+0x496ac>
    9ea8:	00005e02 	andeq	r5, r0, r2, lsl #28
    9eac:	00936f00 	addseq	r6, r3, r0, lsl #30
    9eb0:	bb170000 	bllt	5c9eb8 <__Stack_Size+0x5c96b8>
    9eb4:	0100001d 	tsteq	r0, sp, lsl r0
    9eb8:	004c02a6 	subeq	r0, ip, r6, lsr #5
    9ebc:	00000000 	andeq	r0, r0, r0
    9ec0:	00200000 	eoreq	r0, r0, r0
    9ec4:	9c010000 	stcls	0, cr0, [r1], {-0}
    9ec8:	00000b9d 	muleq	r0, sp, fp
    9ecc:	001e4c15 	andseq	r4, lr, r5, lsl ip
    9ed0:	02a60100 	adceq	r0, r6, #0, 2
    9ed4:	0000005e 	andeq	r0, r0, lr, asr r0
    9ed8:	00009390 	muleq	r0, r0, r3
    9edc:	1bc81700 	blne	ff20fae4 <BootRAM+0xe180285>
    9ee0:	b2010000 	andlt	r0, r1, #0
    9ee4:	00008e02 	andeq	r8, r0, r2, lsl #28
    9ee8:	00000000 	andeq	r0, r0, r0
    9eec:	00004400 	andeq	r4, r0, r0, lsl #8
    9ef0:	c89c0100 	ldmgt	ip, {r8}
    9ef4:	1500000b 	strne	r0, [r0, #-11]
    9ef8:	00001e4c 	andeq	r1, r0, ip, asr #28
    9efc:	5e02b201 	cdppl	2, 0, cr11, cr2, cr1, {0}
    9f00:	b1000000 	mrslt	r0, (UNDEF: 0)
    9f04:	00000093 	muleq	r0, r3, r0
    9f08:	001a3414 	andseq	r3, sl, r4, lsl r4
    9f0c:	02c30100 	sbceq	r0, r3, #0, 2
    9f10:	00000000 	andeq	r0, r0, r0
    9f14:	0000003a 	andeq	r0, r0, sl, lsr r0
    9f18:	0bfd9c01 	bleq	fff70f24 <BootRAM+0xeee16c5>
    9f1c:	4c150000 	ldcmi	0, cr0, [r5], {-0}
    9f20:	0100001e 	tsteq	r0, lr, lsl r0
    9f24:	005e02c3 	subseq	r0, lr, r3, asr #5
    9f28:	93d20000 	bicsls	r0, r2, #0
    9f2c:	9e180000 	cdpls	0, 1, cr0, cr8, cr0, {0}
    9f30:	0100001b 	tsteq	r0, fp, lsl r0
    9f34:	005e02c3 	subseq	r0, lr, r3, asr #5
    9f38:	51010000 	mrspl	r0, (UNDEF: 1)
    9f3c:	1bf61700 	blne	ffd8fb44 <BootRAM+0xed002e5>
    9f40:	d6010000 	strle	r0, [r1], -r0
    9f44:	00004c02 	andeq	r4, r0, r2, lsl #24
    9f48:	00000000 	andeq	r0, r0, r0
    9f4c:	00000600 	andeq	r0, r0, r0, lsl #12
    9f50:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    9f54:	1d00000c 	stcne	0, cr0, [r0, #-48]	; 0xffffffd0
    9f58:	01006862 	tsteq	r0, r2, ror #16
    9f5c:	005e02d6 	ldrsbeq	r0, [lr], #-38	; 0xffffffda
    9f60:	940c0000 	strls	r0, [ip], #-0
    9f64:	621e0000 	andsvs	r0, lr, #0
    9f68:	d601006c 	strle	r0, [r1], -ip, rrx
    9f6c:	00005e02 	andeq	r5, r0, r2, lsl #28
    9f70:	16510100 	ldrbne	r0, [r1], -r0, lsl #2
    9f74:	00001b6e 	andeq	r1, r0, lr, ror #22
    9f78:	4c02d801 	stcmi	8, cr13, [r2], {1}
    9f7c:	2d000000 	stccs	0, cr0, [r0, #-0]
    9f80:	00000094 	muleq	r0, r4, r0
    9f84:	001ad11f 	andseq	sp, sl, pc, lsl r1
    9f88:	02e30100 	rsceq	r0, r3, #0, 2
    9f8c:	0000004c 	andeq	r0, r0, ip, asr #32
    9f90:	00000000 	andeq	r0, r0, r0
    9f94:	0000000a 	andeq	r0, r0, sl
    9f98:	e1159c01 	tst	r5, r1, lsl #24
    9f9c:	0100001b 	tsteq	r0, fp, lsl r0
    9fa0:	004c02e3 	subeq	r0, ip, r3, ror #5
    9fa4:	94660000 	strbtls	r0, [r6], #-0
    9fa8:	87160000 	ldrhi	r0, [r6, -r0]
    9fac:	0100001d 	tsteq	r0, sp, lsl r0
    9fb0:	005e02e5 	subseq	r0, lr, r5, ror #5
    9fb4:	94870000 	strls	r0, [r7], #0
    9fb8:	6e160000 	cdpvs	0, 1, cr0, cr6, cr0, {0}
    9fbc:	0100001b 	tsteq	r0, fp, lsl r0
    9fc0:	004c02e6 	subeq	r0, ip, r6, ror #5
    9fc4:	949a0000 	ldrls	r0, [sl], #0
    9fc8:	00000000 	andeq	r0, r0, r0
    9fcc:	000001d8 	ldrdeq	r0, [r0], -r8
    9fd0:	25360004 	ldrcs	r0, [r6, #-4]!
    9fd4:	01040000 	mrseq	r0, (UNDEF: 4)
    9fd8:	00001c09 	andeq	r1, r0, r9, lsl #24
    9fdc:	001eb001 	andseq	fp, lr, r1
    9fe0:	00089300 	andeq	r9, r8, r0, lsl #6
    9fe4:	00107800 	andseq	r7, r0, r0, lsl #16
    9fe8:	00000000 	andeq	r0, r0, r0
    9fec:	003abf00 	eorseq	fp, sl, r0, lsl #30
    9ff0:	05040200 	streq	r0, [r4, #-512]	; 0x200
    9ff4:	000004da 	ldrdeq	r0, [r0], -sl
    9ff8:	5e050202 	cdppl	2, 0, cr0, cr5, cr2, {0}
    9ffc:	02000006 	andeq	r0, r0, #6
    a000:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    a004:	75030000 	strvc	r0, [r3, #-0]
    a008:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    a00c:	00004524 	andeq	r4, r0, r4, lsr #10
    a010:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a014:	00000252 	andeq	r0, r0, r2, asr r2
    a018:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    a01c:	57250200 	strpl	r0, [r5, -r0, lsl #4]!
    a020:	02000000 	andeq	r0, r0, #0
    a024:	09490702 	stmdbeq	r9, {r1, r8, r9, sl}^
    a028:	75030000 	strvc	r0, [r3, #-0]
    a02c:	26020038 			; <UNDEFINED> instruction: 0x26020038
    a030:	00000068 	andeq	r0, r0, r8, rrx
    a034:	18080102 	stmdane	r8, {r1, r8}
    a038:	04000008 	streq	r0, [r0], #-8
    a03c:	006f0405 	rsbeq	r0, pc, r5, lsl #8
    a040:	34060000 	strcc	r0, [r6], #-0
    a044:	01000008 	tsteq	r0, r8
    a048:	005e5829 	subseq	r5, lr, r9, lsr #16
    a04c:	00015408 	andeq	r5, r1, r8, lsl #8
    a050:	2a9c0100 	bcs	fe70a458 <BootRAM+0xd67abf9>
    a054:	07000001 	streq	r0, [r0, -r1]
    a058:	00001ea9 	andeq	r1, r0, r9, lsr #29
    a05c:	003a2b01 	eorseq	r2, sl, r1, lsl #22
    a060:	94b90000 	ldrtls	r0, [r9], #0
    a064:	94080000 	strls	r0, [r8], #-0
    a068:	1208005e 	andne	r0, r8, #94	; 0x5e
    a06c:	b7000000 	strlt	r0, [r0, -r0]
    a070:	07000000 	streq	r0, [r0, -r0]
    a074:	0000075e 	andeq	r0, r0, lr, asr r7
    a078:	004c3c01 	subeq	r3, ip, r1, lsl #24
    a07c:	95290000 	strls	r0, [r9, #-0]!
    a080:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a084:	08005ea6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sl, fp, ip, lr}
    a088:	00000012 	andeq	r0, r0, r2, lsl r0
    a08c:	000000d4 	ldrdeq	r0, [r0], -r4
    a090:	00075e07 	andeq	r5, r7, r7, lsl #28
    a094:	4c3d0100 	ldfmis	f0, [sp], #-0
    a098:	6d000000 	stcvs	0, cr0, [r0, #-0]
    a09c:	00000095 	muleq	r0, r5, r0
    a0a0:	005efa08 	subseq	pc, lr, r8, lsl #20
    a0a4:	00002208 	andeq	r2, r0, r8, lsl #4
    a0a8:	0000f100 	andeq	pc, r0, r0, lsl #2
    a0ac:	075e0700 	ldrbeq	r0, [lr, -r0, lsl #14]
    a0b0:	72010000 	andvc	r0, r1, #0
    a0b4:	0000004c 	andeq	r0, r0, ip, asr #32
    a0b8:	000095e7 	andeq	r9, r0, r7, ror #11
    a0bc:	5f1c0800 	svcpl	0x001c0800
    a0c0:	00200800 	eoreq	r0, r0, r0, lsl #16
    a0c4:	010e0000 	mrseq	r0, (UNDEF: 14)
    a0c8:	5e070000 	cdppl	0, 0, cr0, cr7, cr0, {0}
    a0cc:	01000007 	tsteq	r0, r7
    a0d0:	00004c73 	andeq	r4, r0, r3, ror ip
    a0d4:	00960800 	addseq	r0, r6, r0, lsl #16
    a0d8:	d2090000 	andle	r0, r9, #0
    a0dc:	ba08005e 	blt	20a25c <__Stack_Size+0x209a5c>
    a0e0:	09000001 	stmdbeq	r0, {r0}
    a0e4:	08005ee6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, fp, ip, lr}
    a0e8:	000001c5 	andeq	r0, r0, r5, asr #3
    a0ec:	005efa09 	subseq	pc, lr, r9, lsl #20
    a0f0:	0001d008 	andeq	sp, r1, r8
    a0f4:	7d060000 	stcvc	0, cr0, [r6, #-0]
    a0f8:	0100001e 	tsteq	r0, lr, lsl r0
    a0fc:	0000009e 	muleq	r0, lr, r0
    a100:	00007000 	andeq	r7, r0, r0
    a104:	4f9c0100 	svcmi	0x009c0100
    a108:	07000001 	streq	r0, [r0, -r1]
    a10c:	00001ea9 	andeq	r1, r0, r9, lsr #29
    a110:	003aa001 	eorseq	sl, sl, r1
    a114:	961b0000 	ldrls	r0, [fp], -r0
    a118:	0a000000 	beq	a120 <__Stack_Size+0x9920>
    a11c:	00000802 	andeq	r0, r0, r2, lsl #16
    a120:	5b022a03 	blpl	94934 <__Stack_Size+0x94134>
    a124:	0b000001 	bleq	a130 <__Stack_Size+0x9930>
    a128:	0000004c 	andeq	r0, r0, ip, asr #32
    a12c:	001e930c 	andseq	r9, lr, ip, lsl #6
    a130:	4c170100 	ldfmis	f0, [r7], {-0}
    a134:	05000000 	streq	r0, [r0, #-0]
    a138:	00056203 	andeq	r6, r5, r3, lsl #4
    a13c:	1e9e0c20 	cdpne	12, 9, cr0, cr14, cr0, {1}
    a140:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    a144:	0000004c 	andeq	r0, r0, ip, asr #32
    a148:	05640305 	strbeq	r0, [r4, #-773]!	; 0x305
    a14c:	db0d2000 	blle	352154 <__Stack_Size+0x351954>
    a150:	0400001e 	streq	r0, [r0], #-30
    a154:	00005e1d 	andeq	r5, r0, sp, lsl lr
    a158:	00700e00 	rsbseq	r0, r0, r0, lsl #28
    a15c:	019d0000 	orrseq	r0, sp, r0
    a160:	9d0f0000 	stcls	0, cr0, [pc, #-0]	; a168 <__Stack_Size+0x9968>
    a164:	06000001 	streq	r0, [r0], -r1
    a168:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a16c:	0000078b 	andeq	r0, r0, fp, lsl #15
    a170:	0009b30d 	andeq	fp, r9, sp, lsl #6
    a174:	8d1b0100 	ldfhis	f0, [fp, #-0]
    a178:	0d000001 	stceq	0, cr0, [r0, #-4]
    a17c:	00000965 	andeq	r0, r0, r5, ror #18
    a180:	018d1c01 	orreq	r1, sp, r1, lsl #24
    a184:	c2100000 	andsgt	r0, r0, #0
    a188:	0500001e 	streq	r0, [r0, #-30]
    a18c:	00005edc 	ldrdeq	r5, [r0], -ip
    a190:	1e841000 	cdpne	0, 8, cr1, cr4, cr0, {0}
    a194:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
    a198:	0000005e 	andeq	r0, r0, lr, asr r0
    a19c:	001ece10 	andseq	ip, lr, r0, lsl lr
    a1a0:	5edb0500 	cdppl	5, 13, cr0, cr11, cr0, {0}
    a1a4:	00000000 	andeq	r0, r0, r0
    a1a8:	000003f9 	strdeq	r0, [r0], -r9
    a1ac:	26100004 	ldrcs	r0, [r0], -r4
    a1b0:	01040000 	mrseq	r0, (UNDEF: 4)
    a1b4:	00001c09 	andeq	r1, r0, r9, lsl #24
    a1b8:	001eed01 	andseq	lr, lr, r1, lsl #26
    a1bc:	00089300 	andeq	r9, r8, r0, lsl #6
    a1c0:	00109000 	andseq	r9, r0, r0
    a1c4:	00000000 	andeq	r0, r0, r0
    a1c8:	003b7700 	eorseq	r7, fp, r0, lsl #14
    a1cc:	05040200 	streq	r0, [r4, #-512]	; 0x200
    a1d0:	000004da 	ldrdeq	r0, [r0], -sl
    a1d4:	5e050202 	cdppl	2, 0, cr0, cr5, cr2, {0}
    a1d8:	02000006 	andeq	r0, r0, #6
    a1dc:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    a1e0:	04020000 	streq	r0, [r2], #-0
    a1e4:	00025207 	andeq	r5, r2, r7, lsl #4
    a1e8:	31750300 	cmncc	r5, r0, lsl #6
    a1ec:	25020036 	strcs	r0, [r2, #-54]	; 0x36
    a1f0:	0000004c 	andeq	r0, r0, ip, asr #32
    a1f4:	49070202 	stmdbmi	r7, {r1, r9}
    a1f8:	03000009 	movweq	r0, #9
    a1fc:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    a200:	00005d26 	andeq	r5, r0, r6, lsr #26
    a204:	08010200 	stmdaeq	r1, {r9}
    a208:	00000818 	andeq	r0, r0, r8, lsl r8
    a20c:	00530404 	subseq	r0, r3, r4, lsl #8
    a210:	c0050000 	andgt	r0, r5, r0
    a214:	01000007 	tsteq	r0, r7
    a218:	008f2d03 	addeq	r2, pc, r3, lsl #26
    a21c:	86060000 	strhi	r0, [r6], -r0
    a220:	00000002 	andeq	r0, r0, r2
    a224:	0009a906 	andeq	sl, r9, r6, lsl #18
    a228:	30060100 	andcc	r0, r6, r0, lsl #2
    a22c:	02000001 	andeq	r0, r0, #1
    a230:	00062b06 	andeq	r2, r6, r6, lsl #22
    a234:	07000300 	streq	r0, [r0, -r0, lsl #6]
    a238:	000007c1 	andeq	r0, r0, r1, asr #15
    a23c:	006a3403 	rsbeq	r3, sl, r3, lsl #8
    a240:	ff080000 			; <UNDEFINED> instruction: 0xff080000
    a244:	0c000005 	stceq	0, cr0, [r0], {5}
    a248:	00d73803 	sbcseq	r3, r7, r3, lsl #16
    a24c:	d7090000 	strle	r0, [r9, -r0]
    a250:	03000001 	movweq	r0, #1
    a254:	00004150 	andeq	r4, r0, r0, asr r1
    a258:	6d090000 	stcvs	0, cr0, [r9, #-0]
    a25c:	03000008 	movweq	r0, #8
    a260:	00004151 	andeq	r4, r0, r1, asr r1
    a264:	b9090200 	stmdblt	r9, {r9}
    a268:	03000020 	movweq	r0, #32
    a26c:	00004152 	andeq	r4, r0, r2, asr r1
    a270:	9a090400 	bls	24b278 <__Stack_Size+0x24aa78>
    a274:	03000006 	movweq	r0, #6
    a278:	0000e653 	andeq	lr, r0, r3, asr r6
    a27c:	0a000800 	beq	c284 <__Stack_Size+0xba84>
    a280:	00000064 	andeq	r0, r0, r4, rrx
    a284:	000000e6 	andeq	r0, r0, r6, ror #1
    a288:	0000410b 	andeq	r4, r0, fp, lsl #2
    a28c:	04040000 	streq	r0, [r4], #-0
    a290:	000000d7 	ldrdeq	r0, [r0], -r7
    a294:	00060007 	andeq	r0, r6, r7
    a298:	9a540300 	bls	150aea0 <__Stack_Size+0x150a6a0>
    a29c:	0c000000 	stceq	0, cr0, [r0], {-0}
    a2a0:	02005742 	andeq	r5, r0, #17301504	; 0x1080000
    a2a4:	011b6203 	tsteq	fp, r3, lsl #4
    a2a8:	620d0000 	andvs	r0, sp, #0
    a2ac:	03003062 	movweq	r3, #98	; 0x62
    a2b0:	00005365 	andeq	r5, r0, r5, ror #6
    a2b4:	620d0000 	andvs	r0, sp, #0
    a2b8:	03003162 	movweq	r3, #354	; 0x162
    a2bc:	00005366 	andeq	r5, r0, r6, ror #6
    a2c0:	0e000100 	adfeqs	f0, f0, f0
    a2c4:	375f0302 	ldrbcc	r0, [pc, -r2, lsl #6]
    a2c8:	0f000001 	svceq	0x00000001
    a2cc:	61030077 	tstvs	r3, r7, ror r0
    a2d0:	00000041 	andeq	r0, r0, r1, asr #32
    a2d4:	0077620f 	rsbseq	r6, r7, pc, lsl #4
    a2d8:	00f76803 	rscseq	r6, r7, r3, lsl #16
    a2dc:	07000000 	streq	r0, [r0, -r0]
    a2e0:	00000930 	andeq	r0, r0, r0, lsr r9
    a2e4:	011b6903 	tsteq	fp, r3, lsl #18
    a2e8:	14080000 	strne	r0, [r8], #-0
    a2ec:	1c000001 	stcne	0, cr0, [r0], {1}
    a2f0:	01d36b03 	bicseq	r6, r3, r3, lsl #22
    a2f4:	67090000 	strvs	r0, [r9, -r0]
    a2f8:	03000007 	movweq	r0, #7
    a2fc:	0000536d 	andeq	r5, r0, sp, ror #6
    a300:	15090000 	strne	r0, [r9, #-0]
    a304:	03000000 	movweq	r0, #0
    a308:	0000536e 	andeq	r5, r0, lr, ror #6
    a30c:	11090100 	mrsne	r0, (UNDEF: 25)
    a310:	03000003 	movweq	r0, #3
    a314:	0001376f 	andeq	r3, r1, pc, ror #14
    a318:	48090200 	stmdami	r9, {r9}
    a31c:	03000001 	movweq	r0, #1
    a320:	00013770 	andeq	r3, r1, r0, ror r7
    a324:	eb090400 	bl	24b32c <__Stack_Size+0x24ab2c>
    a328:	03000004 	movweq	r0, #4
    a32c:	00013771 	andeq	r3, r1, r1, ror r7
    a330:	51090600 	tstpl	r9, r0, lsl #12
    a334:	03000006 	movweq	r0, #6
    a338:	00005373 	andeq	r5, r0, r3, ror r3
    a33c:	08090800 	stmdaeq	r9, {fp}
    a340:	03000008 	movweq	r0, #8
    a344:	00005374 	andeq	r5, r0, r4, ror r3
    a348:	07090900 	streq	r0, [r9, -r0, lsl #18]
    a34c:	03000005 	movweq	r0, #5
    a350:	00005375 	andeq	r5, r0, r5, ror r3
    a354:	4f090a00 	svcmi	0x00090a00
    a358:	03000005 	movweq	r0, #5
    a35c:	00005376 	andeq	r5, r0, r6, ror r3
    a360:	d6090b00 	strle	r0, [r9], -r0, lsl #22
    a364:	03000005 	movweq	r0, #5
    a368:	00005377 	andeq	r5, r0, r7, ror r3
    a36c:	c8090c00 	stmdagt	r9, {sl, fp}
    a370:	03000007 	movweq	r0, #7
    a374:	0000ec7a 	andeq	lr, r0, sl, ror ip
    a378:	07001000 	streq	r1, [r0, -r0]
    a37c:	00000115 	andeq	r0, r0, r5, lsl r1
    a380:	01427b03 	cmpeq	r2, r3, lsl #22
    a384:	a9080000 	stmdbge	r8, {}	; <UNPREDICTABLE>
    a388:	34000003 	strcc	r0, [r0], #-3
    a38c:	02877d03 	addeq	r7, r7, #3, 26	; 0xc0
    a390:	96090000 	strls	r0, [r9], -r0
    a394:	03000002 	movweq	r0, #2
    a398:	0002887f 	andeq	r8, r2, pc, ror r8
    a39c:	b8090000 	stmdalt	r9, {}	; <UNPREDICTABLE>
    a3a0:	03000004 	movweq	r0, #4
    a3a4:	00028880 	andeq	r8, r2, r0, lsl #17
    a3a8:	37090400 	strcc	r0, [r9, -r0, lsl #8]
    a3ac:	03000009 	movweq	r0, #9
    a3b0:	00028883 	andeq	r8, r2, r3, lsl #17
    a3b4:	78090800 	stmdavc	r9, {fp}
    a3b8:	03000007 	movweq	r0, #7
    a3bc:	00028884 	andeq	r8, r2, r4, lsl #17
    a3c0:	c3090c00 	movwgt	r0, #39936	; 0x9c00
    a3c4:	03000002 	movweq	r0, #2
    a3c8:	00029d96 	muleq	r2, r6, sp
    a3cc:	6d091000 	stcvs	0, cr1, [r9, #-0]
    a3d0:	03000000 	movweq	r0, #0
    a3d4:	00029da1 	andeq	r9, r2, r1, lsr #27
    a3d8:	c5091400 	strgt	r1, [r9, #-1024]	; 0x400
    a3dc:	03000009 	movweq	r0, #9
    a3e0:	0002b7ab 	andeq	fp, r2, fp, lsr #15
    a3e4:	d7091800 	strle	r1, [r9, -r0, lsl #16]
    a3e8:	03000002 	movweq	r0, #2
    a3ec:	0000e6ad 	andeq	lr, r0, sp, lsr #13
    a3f0:	b9091c00 	stmdblt	r9, {sl, fp, ip}
    a3f4:	03000003 	movweq	r0, #3
    a3f8:	0000e6ae 	andeq	lr, r0, lr, lsr #13
    a3fc:	c3092000 	movwgt	r2, #36864	; 0x9000
    a400:	03000001 	movweq	r0, #1
    a404:	0000e6af 	andeq	lr, r0, pc, lsr #13
    a408:	42092400 	andmi	r2, r9, #0, 8
    a40c:	03000003 	movweq	r0, #3
    a410:	0000e6b0 			; <UNDEFINED> instruction: 0x0000e6b0
    a414:	67092800 	strvs	r2, [r9, -r0, lsl #16]
    a418:	03000004 	movweq	r0, #4
    a41c:	000064b2 			; <UNDEFINED> instruction: 0x000064b2
    a420:	b6092c00 	strlt	r2, [r9], -r0, lsl #24
    a424:	03000020 	movweq	r0, #32
    a428:	000053b3 			; <UNDEFINED> instruction: 0x000053b3
    a42c:	10003000 	andne	r3, r0, r0
    a430:	02870404 	addeq	r0, r7, #4, 8	; 0x4000000
    a434:	8f0a0000 	svchi	0x000a0000
    a438:	9d000000 	stcls	0, cr0, [r0, #-0]
    a43c:	0b000002 	bleq	a44c <__Stack_Size+0x9c4c>
    a440:	00000053 	andeq	r0, r0, r3, asr r0
    a444:	8e040400 	cfcpyshi	mvf0, mvf4
    a448:	0a000002 	beq	a458 <__Stack_Size+0x9c58>
    a44c:	0000008f 	andeq	r0, r0, pc, lsl #1
    a450:	000002b7 			; <UNDEFINED> instruction: 0x000002b7
    a454:	0000530b 	andeq	r5, r0, fp, lsl #6
    a458:	00530b00 	subseq	r0, r3, r0, lsl #22
    a45c:	04000000 	streq	r0, [r0], #-0
    a460:	0002a304 	andeq	sl, r2, r4, lsl #6
    a464:	03aa0700 			; <UNDEFINED> instruction: 0x03aa0700
    a468:	b5030000 	strlt	r0, [r3, #-0]
    a46c:	000001de 	ldrdeq	r0, [r0], -lr
    a470:	00008a08 	andeq	r8, r0, r8, lsl #20
    a474:	b7032400 	strlt	r2, [r3, -r0, lsl #8]
    a478:	00000341 	andeq	r0, r0, r1, asr #6
    a47c:	0005a009 	andeq	sl, r5, r9
    a480:	88b90300 	ldmhi	r9!, {r8, r9}
    a484:	00000002 	andeq	r0, r0, r2
    a488:	00041d09 	andeq	r1, r4, r9, lsl #26
    a48c:	88ba0300 	ldmhi	sl!, {r8, r9}
    a490:	04000002 	streq	r0, [r0], #-2
    a494:	00029b09 	andeq	r9, r2, r9, lsl #22
    a498:	88bb0300 	ldmhi	fp!, {r8, r9}
    a49c:	08000002 	stmdaeq	r0, {r1}
    a4a0:	00043309 	andeq	r3, r4, r9, lsl #6
    a4a4:	88bc0300 	ldmhi	ip!, {r8, r9}
    a4a8:	0c000002 	stceq	0, cr0, [r0], {2}
    a4ac:	0000a209 	andeq	sl, r0, r9, lsl #4
    a4b0:	88bd0300 	pophi	{r8, r9}
    a4b4:	10000002 	andne	r0, r0, r2
    a4b8:	0006a309 	andeq	sl, r6, r9, lsl #6
    a4bc:	88be0300 	ldmhi	lr!, {r8, r9}
    a4c0:	14000002 	strne	r0, [r0], #-2
    a4c4:	0008f809 	andeq	pc, r8, r9, lsl #16
    a4c8:	88bf0300 	ldmhi	pc!, {r8, r9}	; <UNPREDICTABLE>
    a4cc:	18000002 	stmdane	r0, {r1}
    a4d0:	00019109 	andeq	r9, r1, r9, lsl #2
    a4d4:	88c00300 	stmiahi	r0, {r8, r9}^
    a4d8:	1c000002 	stcne	0, cr0, [r0], {2}
    a4dc:	0002ad09 	andeq	sl, r2, r9, lsl #26
    a4e0:	88c10300 	stmiahi	r1, {r8, r9}^
    a4e4:	20000002 	andcs	r0, r0, r2
    a4e8:	008b0700 	addeq	r0, fp, r0, lsl #14
    a4ec:	c3030000 	movwgt	r0, #12288	; 0x3000
    a4f0:	000002c8 	andeq	r0, r0, r8, asr #5
    a4f4:	00029211 	andeq	r9, r2, r1, lsl r2
    a4f8:	ac350100 	ldfges	f0, [r5], #-0
    a4fc:	3808005f 	stmdacc	r8, {r0, r1, r2, r3, r4, r6}
    a500:	01000000 	mrseq	r0, (UNDEF: 0)
    a504:	02eb129c 	rsceq	r1, fp, #156, 4	; 0xc0000009
    a508:	ec030000 	stc	0, cr0, [r3], {-0}
    a50c:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
    a510:	001f0112 	andseq	r0, pc, r2, lsl r1	; <UNPREDICTABLE>
    a514:	41ed0300 	mvnmi	r0, r0, lsl #6
    a518:	13000003 	movwne	r0, #3
    a51c:	00001f18 	andeq	r1, r0, r8, lsl pc
    a520:	01d32701 	bicseq	r2, r3, r1, lsl #14
    a524:	03050000 	movweq	r0, #20480	; 0x5000
    a528:	20000574 	andcs	r0, r0, r4, ror r5
    a52c:	001edb13 	andseq	sp, lr, r3, lsl fp
    a530:	53180100 	tstpl	r8, #0, 2
    a534:	05000000 	streq	r0, [r0, #-0]
    a538:	00057003 	andeq	r7, r5, r3
    a53c:	01e81320 	mvneq	r1, r0, lsr #6
    a540:	1d010000 	stcne	0, cr0, [r1, #-0]
    a544:	000003a6 	andeq	r0, r0, r6, lsr #7
    a548:	05940305 	ldreq	r0, [r4, #773]	; 0x305
    a54c:	04042000 	streq	r2, [r4], #-0
    a550:	000001d3 	ldrdeq	r0, [r0], -r3
    a554:	00013e13 	andeq	r3, r1, r3, lsl lr
    a558:	bd200100 	stflts	f0, [r0, #-0]
    a55c:	05000003 	streq	r0, [r0, #-3]
    a560:	00056c03 	andeq	r6, r5, r3, lsl #24
    a564:	bd040420 	cfstrslt	mvf0, [r4, #-128]	; 0xffffff80
    a568:	13000002 	movwne	r0, #2
    a56c:	00001f00 	andeq	r1, r0, r0, lsl #30
    a570:	03d42801 	bicseq	r2, r4, #65536	; 0x10000
    a574:	03050000 	movweq	r0, #20480	; 0x5000
    a578:	20000590 	mulcs	r0, r0, r5
    a57c:	03410404 	movteq	r0, #5124	; 0x1404
    a580:	e3130000 	tst	r3, #0
    a584:	0100001e 	tsteq	r0, lr, lsl r0
    a588:	00004125 	andeq	r4, r0, r5, lsr #2
    a58c:	68030500 	stmdavs	r3, {r8, sl}
    a590:	13200005 	teqne	r0, #5
    a594:	0000051d 	andeq	r0, r0, sp, lsl r5
    a598:	00412601 	subeq	r2, r1, r1, lsl #12
    a59c:	03050000 	movweq	r0, #20480	; 0x5000
    a5a0:	20000598 	mulcs	r0, r8, r5
    a5a4:	000de000 	andeq	lr, sp, r0
    a5a8:	13000400 	movwne	r0, #1024	; 0x400
    a5ac:	04000027 	streq	r0, [r0], #-39	; 0x27
    a5b0:	001c0901 	andseq	r0, ip, r1, lsl #18
    a5b4:	1f240100 	svcne	0x00240100
    a5b8:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    a5bc:	10d80000 	sbcsne	r0, r8, r0
    a5c0:	00000000 	andeq	r0, r0, r0
    a5c4:	3bde0000 	blcc	ff78a5cc <BootRAM+0xe6fad6d>
    a5c8:	04020000 	streq	r0, [r2], #-0
    a5cc:	0004da05 	andeq	sp, r4, r5, lsl #20
    a5d0:	05020200 	streq	r0, [r2, #-512]	; 0x200
    a5d4:	0000065e 	andeq	r0, r0, lr, asr r6
    a5d8:	1a060102 	bne	18a9e8 <__Stack_Size+0x18a1e8>
    a5dc:	03000008 	movweq	r0, #8
    a5e0:	00323375 	eorseq	r3, r2, r5, ror r3
    a5e4:	00452402 	subeq	r2, r5, r2, lsl #8
    a5e8:	04020000 	streq	r0, [r2], #-0
    a5ec:	00025207 	andeq	r5, r2, r7, lsl #4
    a5f0:	31750300 	cmncc	r5, r0, lsl #6
    a5f4:	25020036 	strcs	r0, [r2, #-54]	; 0x36
    a5f8:	00000057 	andeq	r0, r0, r7, asr r0
    a5fc:	49070202 	stmdbmi	r7, {r1, r9}
    a600:	03000009 	movweq	r0, #9
    a604:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    a608:	00006826 	andeq	r6, r0, r6, lsr #16
    a60c:	08010200 	stmdaeq	r1, {r9}
    a610:	00000818 	andeq	r0, r0, r8, lsl r8
    a614:	00035a04 	andeq	r5, r3, r4, lsl #20
    a618:	7a2c0200 	bvc	b0ae20 <__Stack_Size+0xb0a620>
    a61c:	05000000 	streq	r0, [r0, #-0]
    a620:	00000045 	andeq	r0, r0, r5, asr #32
    a624:	36020106 	strcc	r0, [r2], -r6, lsl #2
    a628:	00000094 	muleq	r0, r4, r0
    a62c:	0006b507 	andeq	fp, r6, r7, lsl #10
    a630:	a7070000 	strge	r0, [r7, -r0]
    a634:	01000001 	tsteq	r0, r1
    a638:	052d0400 	streq	r0, [sp, #-1024]!	; 0x400
    a63c:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    a640:	0000007f 	andeq	r0, r0, pc, ror r0
    a644:	00023d08 	andeq	r3, r2, r8, lsl #26
    a648:	16030100 	strne	r0, [r3], -r0, lsl #2
    a64c:	000000c4 	andeq	r0, r0, r4, asr #1
    a650:	00053207 	andeq	r3, r5, r7, lsl #4
    a654:	86070000 	strhi	r0, [r7], -r0
    a658:	01000006 	tsteq	r0, r6
    a65c:	00017e07 	andeq	r7, r1, r7, lsl #28
    a660:	20070200 	andcs	r0, r7, r0, lsl #4
    a664:	03000009 	movweq	r0, #9
    a668:	008f0800 	addeq	r0, pc, r0, lsl #16
    a66c:	03010000 	movweq	r0, #4096	; 0x1000
    a670:	0001251f 	andeq	r2, r1, pc, lsl r5
    a674:	20960700 	addscs	r0, r6, r0, lsl #14
    a678:	07000000 	streq	r0, [r0, -r0]
    a67c:	000022c5 	andeq	r2, r0, r5, asr #5
    a680:	0f980701 	svceq	0x00980701
    a684:	07020000 	streq	r0, [r2, -r0]
    a688:	000020a1 	andeq	r2, r0, r1, lsr #1
    a68c:	0fa20703 	svceq	0x00a20703
    a690:	07040000 	streq	r0, [r4, -r0]
    a694:	00002254 	andeq	r2, r0, r4, asr r2
    a698:	22840705 	addcs	r0, r4, #1310720	; 0x140000
    a69c:	07060000 	streq	r0, [r6, -r0]
    a6a0:	0000210b 	andeq	r2, r0, fp, lsl #2
    a6a4:	216a0707 	cmncs	sl, r7, lsl #14
    a6a8:	07080000 	streq	r0, [r8, -r0]
    a6ac:	000021bb 			; <UNDEFINED> instruction: 0x000021bb
    a6b0:	206c0709 	rsbcs	r0, ip, r9, lsl #14
    a6b4:	070a0000 	streq	r0, [sl, -r0]
    a6b8:	0000211a 	andeq	r2, r0, sl, lsl r1
    a6bc:	21dd070b 	bicscs	r0, sp, fp, lsl #14
    a6c0:	070c0000 	streq	r0, [ip, -r0]
    a6c4:	000020e9 	andeq	r2, r0, r9, ror #1
    a6c8:	8b08000c 	blhi	20a700 <__Stack_Size+0x209f00>
    a6cc:	01000021 	tsteq	r0, r1, lsr #32
    a6d0:	01503203 	cmpeq	r0, r3, lsl #4
    a6d4:	d6070000 	strle	r0, [r7], -r0
    a6d8:	0100001f 	tsteq	r0, pc, lsl r0
    a6dc:	00223507 	eoreq	r3, r2, r7, lsl #10
    a6e0:	e8070200 	stmda	r7, {r9}
    a6e4:	0300001f 	movweq	r0, #31
    a6e8:	0021ec07 	eoreq	lr, r1, r7, lsl #24
    a6ec:	21070400 	tstcs	r7, r0, lsl #8
    a6f0:	05000022 	streq	r0, [r0, #-34]	; 0x22
    a6f4:	21280800 	teqcs	r8, r0, lsl #16
    a6f8:	03010000 	movweq	r0, #4096	; 0x1000
    a6fc:	0001693c 	andeq	r6, r1, ip, lsr r9
    a700:	1f370700 	svcne	0x00370700
    a704:	07000000 	streq	r0, [r0, -r0]
    a708:	00001f95 	muleq	r0, r5, pc	; <UNPREDICTABLE>
    a70c:	7c080001 	stcvc	0, cr0, [r8], {1}
    a710:	01000021 	tsteq	r0, r1, lsr #32
    a714:	01b21604 			; <UNDEFINED> instruction: 0x01b21604
    a718:	a0070000 	andge	r0, r7, r0
    a71c:	00000022 	andeq	r0, r0, r2, lsr #32
    a720:	00219c07 	eoreq	r9, r1, r7, lsl #24
    a724:	20070100 	andcs	r0, r7, r0, lsl #2
    a728:	02000020 	andeq	r0, r0, #32
    a72c:	0022d807 	eoreq	sp, r2, r7, lsl #16
    a730:	1b070300 	blne	1cb338 <__Stack_Size+0x1cab38>
    a734:	04000020 	streq	r0, [r0], #-32
    a738:	0022d307 	eoreq	sp, r2, r7, lsl #6
    a73c:	b6070500 	strlt	r0, [r7], -r0, lsl #10
    a740:	06000022 	streq	r0, [r0], -r2, lsr #32
    a744:	0021cd07 	eoreq	ip, r1, r7, lsl #26
    a748:	aa070700 	bge	1cc350 <__Stack_Size+0x1cbb50>
    a74c:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    a750:	00205c07 	eoreq	r5, r0, r7, lsl #24
    a754:	09000900 	stmdbeq	r0, {r8, fp}
    a758:	00000033 	andeq	r0, r0, r3, lsr r0
    a75c:	d7240408 	strle	r0, [r4, -r8, lsl #8]!
    a760:	0a000001 	beq	a76c <__Stack_Size+0x9f6c>
    a764:	000002e0 	andeq	r0, r0, r0, ror #5
    a768:	01d72604 	bicseq	r2, r7, r4, lsl #12
    a76c:	0a000000 	beq	a774 <__Stack_Size+0x9f74>
    a770:	000003f1 	strdeq	r0, [r0], -r1
    a774:	004c2704 	subeq	r2, ip, r4, lsl #14
    a778:	00040000 	andeq	r0, r4, r0
    a77c:	005e040b 	subseq	r0, lr, fp, lsl #8
    a780:	72040000 	andvc	r0, r4, #0
    a784:	04000005 	streq	r0, [r0], #-5
    a788:	0001b229 	andeq	fp, r1, r9, lsr #4
    a78c:	07c00800 	strbeq	r0, [r0, r0, lsl #16]
    a790:	04010000 	streq	r0, [r1], #-0
    a794:	00020d2d 	andeq	r0, r2, sp, lsr #26
    a798:	02860700 	addeq	r0, r6, #0, 14
    a79c:	07000000 	streq	r0, [r0, -r0]
    a7a0:	000009a9 	andeq	r0, r0, r9, lsr #19
    a7a4:	01300701 	teqeq	r0, r1, lsl #14
    a7a8:	07020000 	streq	r0, [r2, -r0]
    a7ac:	0000062b 	andeq	r0, r0, fp, lsr #12
    a7b0:	c1040003 	tstgt	r4, r3
    a7b4:	04000007 	streq	r0, [r0], #-7
    a7b8:	0001e834 	andeq	lr, r1, r4, lsr r8
    a7bc:	05ff0900 	ldrbeq	r0, [pc, #2304]!	; b0c4 <__Stack_Size+0xa8c4>
    a7c0:	040c0000 	streq	r0, [ip], #-0
    a7c4:	00025538 	andeq	r5, r2, r8, lsr r5
    a7c8:	01d70a00 	bicseq	r0, r7, r0, lsl #20
    a7cc:	50040000 	andpl	r0, r4, r0
    a7d0:	0000004c 	andeq	r0, r0, ip, asr #32
    a7d4:	086d0a00 	stmdaeq	sp!, {r9, fp}^
    a7d8:	51040000 	mrspl	r0, (UNDEF: 4)
    a7dc:	0000004c 	andeq	r0, r0, ip, asr #32
    a7e0:	20b90a02 	adcscs	r0, r9, r2, lsl #20
    a7e4:	52040000 	andpl	r0, r4, #0
    a7e8:	0000004c 	andeq	r0, r0, ip, asr #32
    a7ec:	069a0a04 	ldreq	r0, [sl], r4, lsl #20
    a7f0:	53040000 	movwpl	r0, #16384	; 0x4000
    a7f4:	00000264 	andeq	r0, r0, r4, ror #4
    a7f8:	d70c0008 	strle	r0, [ip, -r8]
    a7fc:	64000001 	strvs	r0, [r0], #-1
    a800:	0d000002 	stceq	0, cr0, [r0, #-8]
    a804:	0000004c 	andeq	r0, r0, ip, asr #32
    a808:	55040b00 	strpl	r0, [r4, #-2816]	; 0xb00
    a80c:	04000002 	streq	r0, [r0], #-2
    a810:	00000600 	andeq	r0, r0, r0, lsl #12
    a814:	02185404 	andseq	r5, r8, #4, 8	; 0x4000000
    a818:	23090000 	movwcs	r0, #36864	; 0x9000
    a81c:	02000006 	andeq	r0, r0, #6
    a820:	029a5804 	addseq	r5, sl, #4, 16	; 0x40000
    a824:	700a0000 	andvc	r0, sl, r0
    a828:	04000003 	streq	r0, [r0], #-3
    a82c:	00005e5a 	andeq	r5, r0, sl, asr lr
    a830:	8c0a0000 	stchi	0, cr0, [sl], {-0}
    a834:	04000005 	streq	r0, [r0], #-5
    a838:	00005e5b 	andeq	r5, r0, fp, asr lr
    a83c:	04000100 	streq	r0, [r0], #-256	; 0x100
    a840:	00000624 	andeq	r0, r0, r4, lsr #12
    a844:	02755d04 	rsbseq	r5, r5, #4, 26	; 0x100
    a848:	420e0000 	andmi	r0, lr, #0
    a84c:	04020057 	streq	r0, [r2], #-87	; 0x57
    a850:	0002c962 	andeq	ip, r2, r2, ror #18
    a854:	62620f00 	rsbvs	r0, r2, #0, 30
    a858:	65040030 	strvs	r0, [r4, #-48]	; 0x30
    a85c:	0000005e 	andeq	r0, r0, lr, asr r0
    a860:	62620f00 	rsbvs	r0, r2, #0, 30
    a864:	66040031 			; <UNDEFINED> instruction: 0x66040031
    a868:	0000005e 	andeq	r0, r0, lr, asr r0
    a86c:	02100001 	andseq	r0, r0, #1
    a870:	02e55f04 	rsceq	r5, r5, #4, 30
    a874:	77110000 	ldrvc	r0, [r1, -r0]
    a878:	4c610400 	cfstrdmi	mvd0, [r1], #-0
    a87c:	11000000 	mrsne	r0, (UNDEF: 0)
    a880:	04007762 	streq	r7, [r0], #-1890	; 0x762
    a884:	0002a568 	andeq	sl, r2, r8, ror #10
    a888:	30040000 	andcc	r0, r4, r0
    a88c:	04000009 	streq	r0, [r0], #-9
    a890:	0002c969 	andeq	ip, r2, r9, ror #18
    a894:	01140900 	tsteq	r4, r0, lsl #18
    a898:	041c0000 	ldreq	r0, [ip], #-0
    a89c:	0003816b 	andeq	r8, r3, fp, ror #2
    a8a0:	07670a00 	strbeq	r0, [r7, -r0, lsl #20]!
    a8a4:	6d040000 	stcvs	0, cr0, [r4, #-0]
    a8a8:	0000005e 	andeq	r0, r0, lr, asr r0
    a8ac:	00150a00 	andseq	r0, r5, r0, lsl #20
    a8b0:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
    a8b4:	0000005e 	andeq	r0, r0, lr, asr r0
    a8b8:	03110a01 	tsteq	r1, #4096	; 0x1000
    a8bc:	6f040000 	svcvs	0x00040000
    a8c0:	000002e5 	andeq	r0, r0, r5, ror #5
    a8c4:	01480a02 	cmpeq	r8, r2, lsl #20
    a8c8:	70040000 	andvc	r0, r4, r0
    a8cc:	000002e5 	andeq	r0, r0, r5, ror #5
    a8d0:	04eb0a04 	strbteq	r0, [fp], #2564	; 0xa04
    a8d4:	71040000 	mrsvc	r0, (UNDEF: 4)
    a8d8:	000002e5 	andeq	r0, r0, r5, ror #5
    a8dc:	06510a06 	ldrbeq	r0, [r1], -r6, lsl #20
    a8e0:	73040000 	movwvc	r0, #16384	; 0x4000
    a8e4:	0000005e 	andeq	r0, r0, lr, asr r0
    a8e8:	08080a08 	stmdaeq	r8, {r3, r9, fp}
    a8ec:	74040000 	strvc	r0, [r4], #-0
    a8f0:	0000005e 	andeq	r0, r0, lr, asr r0
    a8f4:	05070a09 	streq	r0, [r7, #-2569]	; 0xa09
    a8f8:	75040000 	strvc	r0, [r4, #-0]
    a8fc:	0000005e 	andeq	r0, r0, lr, asr r0
    a900:	054f0a0a 	strbeq	r0, [pc, #-2570]	; 9efe <__Stack_Size+0x96fe>
    a904:	76040000 	strvc	r0, [r4], -r0
    a908:	0000005e 	andeq	r0, r0, lr, asr r0
    a90c:	05d60a0b 	ldrbeq	r0, [r6, #2571]	; 0xa0b
    a910:	77040000 	strvc	r0, [r4, -r0]
    a914:	0000005e 	andeq	r0, r0, lr, asr r0
    a918:	07c80a0c 	strbeq	r0, [r8, ip, lsl #20]
    a91c:	7a040000 	bvc	10a924 <__Stack_Size+0x10a124>
    a920:	0000026a 	andeq	r0, r0, sl, ror #4
    a924:	15040010 	strne	r0, [r4, #-16]
    a928:	04000001 	streq	r0, [r0], #-1
    a92c:	0002f07b 	andeq	pc, r2, fp, ror r0	; <UNPREDICTABLE>
    a930:	03a90900 			; <UNDEFINED> instruction: 0x03a90900
    a934:	04340000 	ldrteq	r0, [r4], #-0
    a938:	0004357d 	andeq	r3, r4, sp, ror r5
    a93c:	02960a00 	addseq	r0, r6, #0, 20
    a940:	7f040000 	svcvc	0x00040000
    a944:	00000436 	andeq	r0, r0, r6, lsr r4
    a948:	04b80a00 	ldrteq	r0, [r8], #2560	; 0xa00
    a94c:	80040000 	andhi	r0, r4, r0
    a950:	00000436 	andeq	r0, r0, r6, lsr r4
    a954:	09370a04 	ldmdbeq	r7!, {r2, r9, fp}
    a958:	83040000 	movwhi	r0, #16384	; 0x4000
    a95c:	00000436 	andeq	r0, r0, r6, lsr r4
    a960:	07780a08 	ldrbeq	r0, [r8, -r8, lsl #20]!
    a964:	84040000 	strhi	r0, [r4], #-0
    a968:	00000436 	andeq	r0, r0, r6, lsr r4
    a96c:	02c30a0c 	sbceq	r0, r3, #12, 20	; 0xc000
    a970:	96040000 	strls	r0, [r4], -r0
    a974:	0000044b 	andeq	r0, r0, fp, asr #8
    a978:	006d0a10 	rsbeq	r0, sp, r0, lsl sl
    a97c:	a1040000 	mrsge	r0, (UNDEF: 4)
    a980:	0000044b 	andeq	r0, r0, fp, asr #8
    a984:	09c50a14 	stmibeq	r5, {r2, r4, r9, fp}^
    a988:	ab040000 	blge	10a990 <__Stack_Size+0x10a190>
    a98c:	00000465 	andeq	r0, r0, r5, ror #8
    a990:	02d70a18 	sbcseq	r0, r7, #24, 20	; 0x18000
    a994:	ad040000 	stcge	0, cr0, [r4, #-0]
    a998:	00000264 	andeq	r0, r0, r4, ror #4
    a99c:	03b90a1c 			; <UNDEFINED> instruction: 0x03b90a1c
    a9a0:	ae040000 	cdpge	0, 0, cr0, cr4, cr0, {0}
    a9a4:	00000264 	andeq	r0, r0, r4, ror #4
    a9a8:	01c30a20 	biceq	r0, r3, r0, lsr #20
    a9ac:	af040000 	svcge	0x00040000
    a9b0:	00000264 	andeq	r0, r0, r4, ror #4
    a9b4:	03420a24 	movteq	r0, #10788	; 0x2a24
    a9b8:	b0040000 	andlt	r0, r4, r0
    a9bc:	00000264 	andeq	r0, r0, r4, ror #4
    a9c0:	04670a28 	strbteq	r0, [r7], #-2600	; 0xa28
    a9c4:	b2040000 	andlt	r0, r4, #0
    a9c8:	000001d7 	ldrdeq	r0, [r0], -r7
    a9cc:	20b60a2c 	adcscs	r0, r6, ip, lsr #20
    a9d0:	b3040000 	movwlt	r0, #16384	; 0x4000
    a9d4:	0000005e 	andeq	r0, r0, lr, asr r0
    a9d8:	0b120030 	bleq	48aaa0 <__Stack_Size+0x48a2a0>
    a9dc:	00043504 	andeq	r3, r4, r4, lsl #10
    a9e0:	020d0c00 	andeq	r0, sp, #0, 24
    a9e4:	044b0000 	strbeq	r0, [fp], #-0
    a9e8:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    a9ec:	00000000 	andeq	r0, r0, r0
    a9f0:	043c040b 	ldrteq	r0, [ip], #-1035	; 0x40b
    a9f4:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    a9f8:	65000002 	strvs	r0, [r0, #-2]
    a9fc:	0d000004 	stceq	0, cr0, [r0, #-16]
    aa00:	0000005e 	andeq	r0, r0, lr, asr r0
    aa04:	00005e0d 	andeq	r5, r0, sp, lsl #28
    aa08:	040b0000 	streq	r0, [fp], #-0
    aa0c:	00000451 	andeq	r0, r0, r1, asr r4
    aa10:	0003aa04 	andeq	sl, r3, r4, lsl #20
    aa14:	8cb50400 	cfldrshi	mvf0, [r5]
    aa18:	09000003 	stmdbeq	r0, {r0, r1}
    aa1c:	0000008a 	andeq	r0, r0, sl, lsl #1
    aa20:	efb70424 	svc	0x00b70424
    aa24:	0a000004 	beq	aa3c <__Stack_Size+0xa23c>
    aa28:	000005a0 	andeq	r0, r0, r0, lsr #11
    aa2c:	0436b904 	ldrteq	fp, [r6], #-2308	; 0x904
    aa30:	0a000000 	beq	aa38 <__Stack_Size+0xa238>
    aa34:	0000041d 	andeq	r0, r0, sp, lsl r4
    aa38:	0436ba04 	ldrteq	fp, [r6], #-2564	; 0xa04
    aa3c:	0a040000 	beq	10aa44 <__Stack_Size+0x10a244>
    aa40:	0000029b 	muleq	r0, fp, r2
    aa44:	0436bb04 	ldrteq	fp, [r6], #-2820	; 0xb04
    aa48:	0a080000 	beq	20aa50 <__Stack_Size+0x20a250>
    aa4c:	00000433 	andeq	r0, r0, r3, lsr r4
    aa50:	0436bc04 	ldrteq	fp, [r6], #-3076	; 0xc04
    aa54:	0a0c0000 	beq	30aa5c <__Stack_Size+0x30a25c>
    aa58:	000000a2 	andeq	r0, r0, r2, lsr #1
    aa5c:	0436bd04 	ldrteq	fp, [r6], #-3332	; 0xd04
    aa60:	0a100000 	beq	40aa68 <__Stack_Size+0x40a268>
    aa64:	000006a3 	andeq	r0, r0, r3, lsr #13
    aa68:	0436be04 	ldrteq	fp, [r6], #-3588	; 0xe04
    aa6c:	0a140000 	beq	50aa74 <__Stack_Size+0x50a274>
    aa70:	000008f8 	strdeq	r0, [r0], -r8
    aa74:	0436bf04 	ldrteq	fp, [r6], #-3844	; 0xf04
    aa78:	0a180000 	beq	60aa80 <__Stack_Size+0x60a280>
    aa7c:	00000191 	muleq	r0, r1, r1
    aa80:	0436c004 	ldrteq	ip, [r6], #-4
    aa84:	0a1c0000 	beq	70aa8c <__Stack_Size+0x70a28c>
    aa88:	000002ad 	andeq	r0, r0, sp, lsr #5
    aa8c:	0436c104 	ldrteq	ip, [r6], #-260	; 0x104
    aa90:	00200000 	eoreq	r0, r0, r0
    aa94:	00008b04 	andeq	r8, r0, r4, lsl #22
    aa98:	76c30400 	strbvc	r0, [r3], r0, lsl #8
    aa9c:	13000004 	movwne	r0, #4
    aaa0:	0000213a 	andeq	r2, r0, sl, lsr r1
    aaa4:	01d73501 	bicseq	r3, r7, r1, lsl #10
    aaa8:	5fe40000 	svcpl	0x00e40000
    aaac:	00240800 	eoreq	r0, r4, r0, lsl #16
    aab0:	9c010000 	stcls	0, cr0, [r1], {-0}
    aab4:	00000523 	andeq	r0, r0, r3, lsr #10
    aab8:	000c0f14 	andeq	r0, ip, r4, lsl pc
    aabc:	4c350100 	ldfmis	f0, [r5], #-0
    aac0:	5d000000 	stcpl	0, cr0, [r0, #-0]
    aac4:	00000096 	muleq	r0, r6, r0
    aac8:	0020f513 	eoreq	pc, r0, r3, lsl r5	; <UNPREDICTABLE>
    aacc:	d7630100 	strble	r0, [r3, -r0, lsl #2]!
    aad0:	08000001 	stmdaeq	r0, {r0}
    aad4:	24080060 	strcs	r0, [r8], #-96	; 0x60
    aad8:	01000000 	mrseq	r0, (UNDEF: 0)
    aadc:	00054c9c 	muleq	r5, ip, ip
    aae0:	0c0f1400 	cfstrseq	mvf1, [pc], {-0}
    aae4:	63010000 	movwvs	r0, #4096	; 0x1000
    aae8:	0000004c 	andeq	r0, r0, ip, asr #32
    aaec:	0000967e 	andeq	r9, r0, lr, ror r6
    aaf0:	220e1300 	andcs	r1, lr, #0, 6
    aaf4:	9b010000 	blls	4aafc <__Stack_Size+0x4a2fc>
    aaf8:	000001d7 	ldrdeq	r0, [r0], -r7
    aafc:	0800602c 	stmdaeq	r0, {r2, r3, r5, sp, lr}
    ab00:	00000090 	muleq	r0, r0, r0
    ab04:	05b69c01 	ldreq	r9, [r6, #3073]!	; 0xc01
    ab08:	0f140000 	svceq	0x00140000
    ab0c:	0100000c 	tsteq	r0, ip
    ab10:	00004c9b 	muleq	r0, fp, ip
    ab14:	00969f00 	addseq	r9, r6, r0, lsl #30
    ab18:	604c1500 	subvs	r1, ip, r0, lsl #10
    ab1c:	001c0800 	andseq	r0, ip, r0, lsl #16
    ab20:	05910000 	ldreq	r0, [r1]
    ab24:	10160000 	andsne	r0, r6, r0
    ab28:	01000008 	tsteq	r0, r8
    ab2c:	00005ea9 	andeq	r5, r0, r9, lsr #29
    ab30:	0096c000 	addseq	ip, r6, r0
    ab34:	70170000 	andsvc	r0, r7, r0
    ab38:	30080060 	andcc	r0, r8, r0, rrx
    ab3c:	16000000 	strne	r0, [r0], -r0
    ab40:	00002260 	andeq	r2, r0, r0, ror #4
    ab44:	005ec301 	subseq	ip, lr, r1, lsl #6
    ab48:	96d40000 	ldrbls	r0, [r4], r0
    ab4c:	7c180000 	ldcvc	0, cr0, [r8], {-0}
    ab50:	01000022 	tsteq	r0, r2, lsr #32
    ab54:	00005ec4 	andeq	r5, r0, r4, asr #29
    ab58:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    ab5c:	00001f89 	andeq	r1, r0, r9, lsl #31
    ab60:	bc01e001 	stclt	0, cr14, [r1], {1}
    ab64:	a8080060 	stmdage	r8, {r5, r6}
    ab68:	01000000 	mrseq	r0, (UNDEF: 0)
    ab6c:	00067b9c 	muleq	r6, ip, fp
    ab70:	224c1a00 	subcs	r1, ip, #0, 20
    ab74:	e2010000 	and	r0, r1, #0
    ab78:	00067b01 	andeq	r7, r6, r1, lsl #22
    ab7c:	00970500 	addseq	r0, r7, r0, lsl #10
    ab80:	22011a00 	andcs	r1, r1, #0, 20
    ab84:	e3010000 	movw	r0, #4096	; 0x1000
    ab88:	00003a01 	andeq	r3, r0, r1, lsl #20
    ab8c:	00971a00 	addseq	r1, r7, r0, lsl #20
    ab90:	06511a00 	ldrbeq	r1, [r1], -r0, lsl #20
    ab94:	e4010000 	str	r0, [r1], #-0
    ab98:	00003a01 	andeq	r3, r0, r1, lsl #20
    ab9c:	00975e00 	addseq	r5, r7, r0, lsl #28
    aba0:	1f5b1a00 	svcne	0x005b1a00
    aba4:	e6010000 	str	r0, [r1], -r0
    aba8:	0001d701 	andeq	sp, r1, r1, lsl #14
    abac:	0097a900 	addseq	sl, r7, r0, lsl #18
    abb0:	0c0f1a00 	stceq	10, cr1, [pc], {-0}
    abb4:	e7010000 	str	r0, [r1, -r0]
    abb8:	00003a01 	andeq	r3, r0, r1, lsl #20
    abbc:	0097c700 	addseq	ip, r7, r0, lsl #14
    abc0:	204a1b00 	subcs	r1, sl, r0, lsl #22
    abc4:	10010000 	andne	r0, r1, r0
    abc8:	00614002 	rsbeq	r4, r1, r2
    abcc:	610e1c08 	tstvs	lr, r8, lsl #24
    abd0:	06380800 	ldrteq	r0, [r8], -r0, lsl #16
    abd4:	011d0000 	tsteq	sp, r0
    abd8:	00750250 	rsbseq	r0, r5, r0, asr r2
    abdc:	61161e00 	tstvs	r6, r0, lsl #28
    abe0:	0d1c0800 	ldceq	8, cr0, [ip, #-0]
    abe4:	064b0000 	strbeq	r0, [fp], -r0
    abe8:	011d0000 	tsteq	sp, r0
    abec:	00300150 	eorseq	r0, r0, r0, asr r1
    abf0:	0061201e 	rsbeq	r2, r1, lr, lsl r0
    abf4:	000d3208 	andeq	r3, sp, r8, lsl #4
    abf8:	00066500 	andeq	r6, r6, r0, lsl #10
    abfc:	52011d00 	andpl	r1, r1, #0, 26
    ac00:	1d007502 	cfstr32ne	mvfx7, [r0, #-8]
    ac04:	79025001 	stmdbvc	r2, {r0, ip, lr}
    ac08:	281f0000 	ldmdacs	pc, {}	; <UNPREDICTABLE>
    ac0c:	4d080061 	stcmi	0, cr0, [r8, #-388]	; 0xfffffe7c
    ac10:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
    ac14:	75025101 	strvc	r5, [r2, #-257]	; 0x101
    ac18:	50011d00 	andpl	r1, r1, r0, lsl #26
    ac1c:	00003001 	andeq	r3, r0, r1
    ac20:	026a040b 	rsbeq	r0, sl, #184549376	; 0xb000000
    ac24:	6f200000 	svcvs	0x00200000
    ac28:	0100001f 	tsteq	r0, pc, lsl r0
    ac2c:	00020d4a 	andeq	r0, r2, sl, asr #26
    ac30:	00616400 	rsbeq	r6, r1, r0, lsl #8
    ac34:	00003808 	andeq	r3, r0, r8, lsl #16
    ac38:	139c0100 	orrsne	r0, ip, #0, 2
    ac3c:	00002034 	andeq	r2, r0, r4, lsr r0
    ac40:	020d7801 	andeq	r7, sp, #65536	; 0x10000
    ac44:	619c0000 	orrsvs	r0, ip, r0
    ac48:	00480800 	subeq	r0, r8, r0, lsl #16
    ac4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    ac50:	000006be 			; <UNDEFINED> instruction: 0x000006be
    ac54:	00655221 	rsbeq	r5, r5, r1, lsr #4
    ac58:	020d7a01 	andeq	r7, sp, #4096	; 0x1000
    ac5c:	98050000 	stmdals	r5, {}	; <UNPREDICTABLE>
    ac60:	13000000 	movwne	r0, #0
    ac64:	00002154 	andeq	r2, r0, r4, asr r1
    ac68:	020de901 	andeq	lr, sp, #16384	; 0x4000
    ac6c:	61e40000 	mvnvs	r0, r0
    ac70:	00d00800 	sbcseq	r0, r0, r0, lsl #16
    ac74:	9c010000 	stcls	0, cr0, [r1], {-0}
    ac78:	00000796 	muleq	r0, r6, r7
    ac7c:	001fb216 	andseq	fp, pc, r6, lsl r2	; <UNPREDICTABLE>
    ac80:	3aeb0100 	bcc	ffacb088 <BootRAM+0xea3b829>
    ac84:	23000000 	movwcs	r0, #0
    ac88:	16000098 			; <UNDEFINED> instruction: 0x16000098
    ac8c:	00001347 	andeq	r1, r0, r7, asr #6
    ac90:	003aec01 	eorseq	lr, sl, r1, lsl #24
    ac94:	985b0000 	ldmdals	fp, {}^	; <UNPREDICTABLE>
    ac98:	00170000 	andseq	r0, r7, r0
    ac9c:	9e080062 	cdpls	0, 0, cr0, cr8, cr2, {3}
    aca0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    aca4:	000020c4 	andeq	r2, r0, r4, asr #1
    aca8:	0796f601 	ldreq	pc, [r6, r1, lsl #12]
    acac:	60160000 	andsvs	r0, r6, r0
    acb0:	01000022 	tsteq	r0, r2, lsr #32
    acb4:	00003af7 	strdeq	r3, [r0], -r7
    acb8:	00988400 	addseq	r8, r8, r0, lsl #8
    acbc:	227c1600 	rsbscs	r1, ip, #0, 12
    acc0:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    acc4:	0000003a 	andeq	r0, r0, sl, lsr r0
    acc8:	000098ad 	andeq	r9, r0, sp, lsr #17
    accc:	50457221 	subpl	r7, r5, r1, lsr #4
    acd0:	3af90100 	bcc	ffe4b0d8 <BootRAM+0xedbb879>
    acd4:	84000000 	strhi	r0, [r0], #-0
    acd8:	15000098 	strne	r0, [r0, #-152]	; 0x98
    acdc:	08006280 	stmdaeq	r0, {r7, r9, sp, lr}
    ace0:	00000012 	andeq	r0, r0, r2, lsl r0
    ace4:	00000754 	andeq	r0, r0, r4, asr r7
    ace8:	00075e1a 	andeq	r5, r7, sl, lsl lr
    acec:	012f0100 	teqeq	pc, r0, lsl #2
    acf0:	0000004c 	andeq	r0, r0, ip, asr #32
    acf4:	000098c5 	andeq	r9, r0, r5, asr #17
    acf8:	625a1e00 	subsvs	r1, sl, #0, 28
    acfc:	0d640800 	stcleq	8, cr0, [r4, #-0]
    ad00:	07680000 	strbeq	r0, [r8, -r0]!
    ad04:	011d0000 	tsteq	sp, r0
    ad08:	00740250 	rsbseq	r0, r4, r0, asr r2
    ad0c:	62621e00 	rsbvs	r1, r2, #0, 28
    ad10:	0d760800 	ldcleq	8, cr0, [r6, #-0]
    ad14:	07820000 	streq	r0, [r2, r0]
    ad18:	011d0000 	tsteq	sp, r0
    ad1c:	30080251 	andcc	r0, r8, r1, asr r2
    ad20:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    ad24:	22000074 	andcs	r0, r0, #116	; 0x74
    ad28:	0800627a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, sp, lr}
    ad2c:	00000d8d 	andeq	r0, r0, sp, lsl #27
    ad30:	00628022 	rsbeq	r8, r2, r2, lsr #32
    ad34:	000da408 	andeq	sl, sp, r8, lsl #8
    ad38:	0b000000 	bleq	ad40 <__Stack_Size+0xa540>
    ad3c:	00029a04 	andeq	r9, r2, r4, lsl #20
    ad40:	207a2300 	rsbscs	r2, sl, r0, lsl #6
    ad44:	42010000 	andmi	r0, r1, #0
    ad48:	00020d01 	andeq	r0, r2, r1, lsl #26
    ad4c:	0062b400 	rsbeq	fp, r2, r0, lsl #8
    ad50:	00008408 	andeq	r8, r0, r8, lsl #8
    ad54:	2b9c0100 	blcs	fe70b15c <BootRAM+0xd67b8fd>
    ad58:	1a000008 	bne	ad80 <__Stack_Size+0xa580>
    ad5c:	0000227c 	andeq	r2, r0, ip, ror r2
    ad60:	3a014401 	bcc	5bd6c <__Stack_Size+0x5b56c>
    ad64:	f3000000 	vhadd.u8	d0, d0, d0
    ad68:	1a000098 	bne	afd0 <__Stack_Size+0xa7d0>
    ad6c:	00002260 	andeq	r2, r0, r0, ror #4
    ad70:	3a014501 	bcc	5c17c <__Stack_Size+0x5b97c>
    ad74:	1b000000 	blne	ad7c <__Stack_Size+0xa57c>
    ad78:	24000099 	strcs	r0, [r0], #-153	; 0x99
    ad7c:	00504572 	subseq	r4, r0, r2, ror r5
    ad80:	3a014601 	bcc	5c58c <__Stack_Size+0x5bd8c>
    ad84:	1b000000 	blne	ad8c <__Stack_Size+0xa58c>
    ad88:	1a000099 	bne	aff4 <__Stack_Size+0xa7f4>
    ad8c:	00001347 	andeq	r1, r0, r7, asr #6
    ad90:	3a014701 	bcc	5c99c <__Stack_Size+0x5c19c>
    ad94:	50000000 	andpl	r0, r0, r0
    ad98:	25000099 	strcs	r0, [r0, #-153]	; 0x99
    ad9c:	000010a0 	andeq	r1, r0, r0, lsr #1
    ada0:	00000810 	andeq	r0, r0, r0, lsl r8
    ada4:	00075e1a 	andeq	r5, r7, sl, lsl lr
    ada8:	01630100 	cmneq	r3, r0, lsl #2
    adac:	0000004c 	andeq	r0, r0, ip, asr #32
    adb0:	0000996e 	andeq	r9, r0, lr, ror #18
    adb4:	630c1700 	movwvs	r1, #50944	; 0xc700
    adb8:	00100800 	andseq	r0, r0, r0, lsl #16
    adbc:	5e1a0000 	cdppl	0, 1, cr0, cr10, cr0, {0}
    adc0:	01000007 	tsteq	r0, r7
    adc4:	004c0169 	subeq	r0, ip, r9, ror #2
    adc8:	99960000 	ldmibls	r6, {}	; <UNPREDICTABLE>
    adcc:	00000000 	andeq	r0, r0, r0
    add0:	0020c926 	eoreq	ip, r0, r6, lsr #18
    add4:	01780100 	cmneq	r8, r0, lsl #2
    add8:	0000020d 	andeq	r0, r0, sp, lsl #4
    addc:	08006338 	stmdaeq	r0, {r3, r4, r5, r8, r9, sp, lr}
    ade0:	00000024 	andeq	r0, r0, r4, lsr #32
    ade4:	64279c01 	strtvs	r9, [r7], #-3073	; 0xc01
    ade8:	01000002 	tsteq	r0, r2
    adec:	01d70192 			; <UNDEFINED> instruction: 0x01d70192
    adf0:	635c0000 	cmpvs	ip, #0
    adf4:	001c0800 	andseq	r0, ip, r0, lsl #16
    adf8:	9c010000 	stcls	0, cr0, [r1], {-0}
    adfc:	0000088c 	andeq	r0, r0, ip, lsl #17
    ae00:	000c0f28 	andeq	r0, ip, r8, lsr #30
    ae04:	01920100 	orrseq	r0, r2, r0, lsl #2
    ae08:	0000004c 	andeq	r0, r0, ip, asr #32
    ae0c:	000099af 	andeq	r9, r0, pc, lsr #19
    ae10:	0020e328 	eoreq	lr, r0, r8, lsr #6
    ae14:	01920100 	orrseq	r0, r2, r0, lsl #2
    ae18:	0000088c 	andeq	r0, r0, ip, lsl #17
    ae1c:	000099d0 	ldrdeq	r9, [r0], -r0
    ae20:	0008711a 	andeq	r7, r8, sl, lsl r1
    ae24:	01940100 	orrseq	r0, r4, r0, lsl #2
    ae28:	0000003a 	andeq	r0, r0, sl, lsr r0
    ae2c:	000099fc 	strdeq	r9, [r0], -ip
    ae30:	dd040b00 	vstrle	d0, [r4, #-0]
    ae34:	27000001 	strcs	r0, [r0, -r1]
    ae38:	00001f4d 	andeq	r1, r0, sp, asr #30
    ae3c:	5e03c901 	cdppl	9, 0, cr12, cr3, cr1, {0}
    ae40:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    ae44:	40080063 	andmi	r0, r8, r3, rrx
    ae48:	01000000 	mrseq	r0, (UNDEF: 0)
    ae4c:	0008bc9c 	muleq	r8, ip, ip
    ae50:	63861f00 	orrvs	r1, r6, #0, 30
    ae54:	0d8d0800 	stceq	8, cr0, [sp]
    ae58:	011d0000 	tsteq	sp, r0
    ae5c:	00300150 	eorseq	r0, r0, r0, asr r1
    ae60:	1fc02900 	svcne	0x00c02900
    ae64:	1b010000 	blne	4ae6c <__Stack_Size+0x4a66c>
    ae68:	08f60102 	ldmeq	r6!, {r1, r8}^
    ae6c:	462a0000 	strtmi	r0, [sl], -r0
    ae70:	0100001f 	tsteq	r0, pc, lsl r0
    ae74:	020d021d 	andeq	r0, sp, #-805306367	; 0xd0000001
    ae78:	622a0000 	eorvs	r0, sl, #0
    ae7c:	01000020 	tsteq	r0, r0, lsr #32
    ae80:	003a021e 	eorseq	r0, sl, lr, lsl r2
    ae84:	512a0000 	teqpl	sl, r0
    ae88:	01000006 	tsteq	r0, r6
    ae8c:	003a021f 	eorseq	r0, sl, pc, lsl r2
    ae90:	bb2b0000 	bllt	acae98 <__Stack_Size+0xaca698>
    ae94:	0100001f 	tsteq	r0, pc, lsl r0
    ae98:	2900028b 	stmdbcs	r0, {r0, r1, r3, r7, r9}
    ae9c:	00001fc2 	andeq	r1, r0, r2, asr #31
    aea0:	01029701 	tsteq	r2, r1, lsl #14
    aea4:	00000978 	andeq	r0, r0, r8, ror r9
    aea8:	00060e2a 	andeq	r0, r6, sl, lsr #28
    aeac:	02990100 	addseq	r0, r9, #0, 2
    aeb0:	00000264 	andeq	r0, r0, r4, ror #4
    aeb4:	001f462a 	andseq	r4, pc, sl, lsr #12
    aeb8:	029a0100 	addseq	r0, sl, #0, 2
    aebc:	0000020d 	andeq	r0, r0, sp, lsl #4
    aec0:	0022ab2a 	eoreq	sl, r2, sl, lsr #22
    aec4:	029b0100 	addseq	r0, fp, #0, 2
    aec8:	0000003a 	andeq	r0, r0, sl, lsr r0
    aecc:	0022602a 	eoreq	r6, r2, sl, lsr #32
    aed0:	029d0100 	addseq	r0, sp, #0, 2
    aed4:	0000003a 	andeq	r0, r0, sl, lsr r0
    aed8:	001f662a 	andseq	r6, pc, sl, lsr #12
    aedc:	029d0100 	addseq	r0, sp, #0, 2
    aee0:	0000003a 	andeq	r0, r0, sl, lsr r0
    aee4:	0008712a 	andeq	r7, r8, sl, lsr #2
    aee8:	029e0100 	addseq	r0, lr, #0, 2
    aeec:	0000003a 	andeq	r0, r0, sl, lsr r0
    aef0:	0013472a 	andseq	r4, r3, sl, lsr #14
    aef4:	029e0100 	addseq	r0, lr, #0, 2
    aef8:	0000003a 	andeq	r0, r0, sl, lsr r0
    aefc:	0009692c 	andeq	r6, r9, ip, lsr #18
    af00:	1fce2a00 	svcne	0x00ce2a00
    af04:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    af08:	00005e02 	andeq	r5, r0, r2, lsl #28
    af0c:	2a2d0000 	bcs	b4af14 <__Stack_Size+0xb4a714>
    af10:	000001db 	ldrdeq	r0, [r0], -fp
    af14:	6f032501 	svcvs	0x00032501
    af18:	00000000 	andeq	r0, r0, r0
    af1c:	1e842300 	cdpne	3, 8, cr2, cr4, cr0, {0}
    af20:	4c010000 	stcmi	0, cr0, [r1], {-0}
    af24:	00005e03 	andeq	r5, r0, r3, lsl #28
    af28:	0063b800 	rsbeq	fp, r3, r0, lsl #16
    af2c:	0002dc08 	andeq	sp, r2, r8, lsl #24
    af30:	e69c0100 	ldr	r0, [ip], r0, lsl #2
    af34:	2e00000a 	cdpcs	0, 0, cr0, cr0, cr10, {0}
    af38:	034f0104 	movteq	r0, #61700	; 0xf104
    af3c:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    af40:	0100622f 	tsteq	r0, pc, lsr #4
    af44:	01d70351 	bicseq	r0, r7, r1, asr r3
    af48:	772f0000 	strvc	r0, [pc, -r0]!
    af4c:	03520100 	cmpeq	r2, #0, 2
    af50:	00000ae6 	andeq	r0, r0, r6, ror #21
    af54:	22471a00 	subcs	r1, r7, #0, 20
    af58:	53010000 	movwpl	r0, #4096	; 0x1000
    af5c:	00099203 	andeq	r9, r9, r3, lsl #4
    af60:	009a2d00 	addseq	r2, sl, r0, lsl #26
    af64:	08bc3000 	ldmeq	ip!, {ip, sp}
    af68:	63fe0000 	mvnsvs	r0, #0
    af6c:	00c40800 	sbceq	r0, r4, r0, lsl #16
    af70:	67010000 	strvs	r0, [r1, -r0]
    af74:	000a4003 	andeq	r4, sl, r3
    af78:	63fe1700 	mvnsvs	r1, #0, 14
    af7c:	00c40800 	sbceq	r0, r4, r0, lsl #16
    af80:	c9310000 	ldmdbgt	r1!, {}	; <UNPREDICTABLE>
    af84:	50000008 	andpl	r0, r0, r8
    af88:	3100009a 	swpcc	r0, sl, [r0]	; <UNPREDICTABLE>
    af8c:	000008d5 	ldrdeq	r0, [r0], -r5
    af90:	00009af9 	strdeq	r9, [r0], -r9	; <UNPREDICTABLE>
    af94:	0008e131 	andeq	lr, r8, r1, lsr r1
    af98:	009b0c00 	addseq	r0, fp, r0, lsl #24
    af9c:	08ed3200 	stmiaeq	sp!, {r9, ip, sp}^
    afa0:	64bc0000 	ldrtvs	r0, [ip], #0
    afa4:	0e220800 	cdpeq	8, 2, cr0, cr2, cr0, {0}
    afa8:	81080064 	tsthi	r8, r4, rrx
    afac:	1c000006 	stcne	0, cr0, [r0], {6}
    afb0:	08006448 	stmdaeq	r0, {r3, r6, sl, sp, lr}
    afb4:	00000a1a 	andeq	r0, r0, sl, lsl sl
    afb8:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    afbc:	22000074 	andcs	r0, r0, #116	; 0x74
    afc0:	0800645e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, sp, lr}
    afc4:	0000082b 	andeq	r0, r0, fp, lsr #16
    afc8:	00647a22 	rsbeq	r7, r4, r2, lsr #20
    afcc:	0006be08 	andeq	fp, r6, r8, lsl #28
    afd0:	64882200 	strvs	r2, [r8], #512	; 0x200
    afd4:	06960800 	ldreq	r0, [r6], r0, lsl #16
    afd8:	9a220000 	bls	88afe0 <__Stack_Size+0x88a7e0>
    afdc:	9c080064 	stcls	0, cr0, [r8], {100}	; 0x64
    afe0:	00000007 	andeq	r0, r0, r7
    afe4:	08f63300 	ldmeq	r6!, {r8, r9, ip, sp}^
    afe8:	64c20000 	strbvs	r0, [r2], #0
    afec:	10c00800 	sbcne	r0, r0, r0, lsl #16
    aff0:	6c010000 	stcvs	0, cr0, [r1], {-0}
    aff4:	000adc03 	andeq	sp, sl, r3, lsl #24
    aff8:	10c03400 	sbcne	r3, r0, r0, lsl #8
    affc:	03310000 	teqeq	r1, #0
    b000:	2b000009 	blcs	b02c <__Stack_Size+0xa82c>
    b004:	3100009b 	swpcc	r0, fp, [r0]	; <UNPREDICTABLE>
    b008:	0000090f 	andeq	r0, r0, pc, lsl #18
    b00c:	00009bc2 	andeq	r9, r0, r2, asr #23
    b010:	00091b31 	andeq	r1, r9, r1, lsr fp
    b014:	009c0200 	addseq	r0, ip, r0, lsl #4
    b018:	09273100 	stmdbeq	r7!, {r8, ip, sp}
    b01c:	9c2b0000 	stcls	0, cr0, [fp], #-0
    b020:	33310000 	teqcc	r1, #0
    b024:	3e000009 	cdpcc	0, 0, cr0, cr0, cr9, {0}
    b028:	3100009c 	swpcc	r0, ip, [r0]	; <UNPREDICTABLE>
    b02c:	0000093f 	andeq	r0, r0, pc, lsr r9
    b030:	00009c59 	andeq	r9, r0, r9, asr ip
    b034:	00094b31 	andeq	r4, r9, r1, lsr fp
    b038:	009c7900 	addseq	r7, ip, r0, lsl #18
    b03c:	64cc1500 	strbvs	r1, [ip], #1280	; 0x500
    b040:	002c0800 	eoreq	r0, ip, r0, lsl #16
    b044:	0aaf0000 	beq	febcb04c <BootRAM+0xdb3b7ed>
    b048:	5c310000 	ldcpl	0, cr0, [r1], #-0
    b04c:	8c000009 	stchi	0, cr0, [r0], {9}
    b050:	0000009c 	muleq	r0, ip, r0
    b054:	00660015 	rsbeq	r0, r6, r5, lsl r0
    b058:	00006008 	andeq	r6, r0, r8
    b05c:	000ace00 	andeq	ip, sl, r0, lsl #28
    b060:	096a3500 	stmdbeq	sl!, {r8, sl, ip, sp}^
    b064:	91020000 	mrsls	r0, (UNDEF: 2)
    b068:	665e226c 	ldrbvs	r2, [lr], -ip, ror #4
    b06c:	05b60800 	ldreq	r0, [r6, #2048]!	; 0x800
    b070:	36000000 	strcc	r0, [r0], -r0
    b074:	080065c2 	stmdaeq	r0, {r1, r6, r7, r8, sl, sp, lr}
    b078:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    b07c:	00000074 	andeq	r0, r0, r4, ror r0
    b080:	66702200 	ldrbtvs	r2, [r0], -r0, lsl #4
    b084:	08920800 	ldmeq	r2, {fp}
    b088:	0b000000 	bleq	b090 <__Stack_Size+0xa890>
    b08c:	00004c04 	andeq	r4, r0, r4, lsl #24
    b090:	22932900 	addscs	r2, r3, #0, 18
    b094:	a7010000 	strge	r0, [r1, -r0]
    b098:	0b2c0101 	bleq	b0b4a4 <__Stack_Size+0xb0aca4>
    b09c:	4c2a0000 	stcmi	0, cr0, [sl], #-0
    b0a0:	01000022 	tsteq	r0, r2, lsr #32
    b0a4:	067b01a9 	ldrbteq	r0, [fp], -r9, lsr #3
    b0a8:	0e2a0000 	cdpeq	0, 2, cr0, cr10, cr0, {0}
    b0ac:	01000020 	tsteq	r0, r0, lsr #32
    b0b0:	003a01aa 	eorseq	r0, sl, sl, lsr #3
    b0b4:	2a2d0000 	bcs	b4b0bc <__Stack_Size+0xb4a8bc>
    b0b8:	00001f5f 	andeq	r1, r0, pc, asr pc
    b0bc:	d701b001 	strle	fp, [r1, -r1]
    b0c0:	2a000001 	bcs	b0cc <__Stack_Size+0xa8cc>
    b0c4:	00000c0f 	andeq	r0, r0, pc, lsl #24
    b0c8:	3a01b101 	bcc	774d4 <__Stack_Size+0x76cd4>
    b0cc:	00000000 	andeq	r0, r0, r0
    b0d0:	1ece2300 	cdpne	3, 12, cr2, cr14, cr0, {0}
    b0d4:	a0010000 	andge	r0, r1, r0
    b0d8:	00005e03 	andeq	r5, r0, r3, lsl #28
    b0dc:	00669400 	rsbeq	r9, r6, r0, lsl #8
    b0e0:	0000c808 	andeq	ip, r0, r8, lsl #16
    b0e4:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
    b0e8:	1a00000b 	bne	b11c <__Stack_Size+0xa91c>
    b0ec:	00000651 	andeq	r0, r0, r1, asr r6
    b0f0:	3a03a201 	bcc	f38fc <__Stack_Size+0xf30fc>
    b0f4:	b6000000 	strlt	r0, [r0], -r0
    b0f8:	3000009c 	mulcc	r0, ip, r0
    b0fc:	00000aec 	andeq	r0, r0, ip, ror #21
    b100:	080066a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, sp, lr}
    b104:	0000007e 	andeq	r0, r0, lr, ror r0
    b108:	f403a601 	vst1.8	{d10-d12}, [r3], r1
    b10c:	1700000b 	strne	r0, [r0, -fp]
    b110:	080066a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, sp, lr}
    b114:	0000007e 	andeq	r0, r0, lr, ror r0
    b118:	000af931 	andeq	pc, sl, r1, lsr r9	; <UNPREDICTABLE>
    b11c:	009d0300 	addseq	r0, sp, r0, lsl #6
    b120:	0b053100 	bleq	157528 <__Stack_Size+0x156d28>
    b124:	9d180000 	ldcls	0, cr0, [r8, #-0]
    b128:	ac150000 	ldcge	0, cr0, [r5], {-0}
    b12c:	2a080066 	bcs	20b2cc <__Stack_Size+0x20aacc>
    b130:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    b134:	3100000b 	tstcc	r0, fp
    b138:	00000b12 	andeq	r0, r0, r2, lsl fp
    b13c:	00009d2b 	andeq	r9, r0, fp, lsr #26
    b140:	000b1e31 	andeq	r1, fp, r1, lsr lr
    b144:	009d4900 	addseq	r4, sp, r0, lsl #18
    b148:	66b81c00 	ldrtvs	r1, [r8], r0, lsl #24
    b14c:	0bb40800 	bleq	fed0d154 <BootRAM+0xdc7d8f5>
    b150:	011d0000 	tsteq	sp, r0
    b154:	00760250 	rsbseq	r0, r6, r0, asr r2
    b158:	66cc1e00 	strbvs	r1, [ip], r0, lsl #28
    b15c:	0db60800 	ldceq	8, cr0, [r6]
    b160:	0bc70000 	bleq	ff1cb168 <BootRAM+0xe13b909>
    b164:	011d0000 	tsteq	sp, r0
    b168:	00300150 	eorseq	r0, r0, r0, asr r1
    b16c:	0066d61f 	rsbeq	sp, r6, pc, lsl r6
    b170:	000dcc08 	andeq	ip, sp, r8, lsl #24
    b174:	52011d00 	andpl	r1, r1, #0, 26
    b178:	1d007602 	stcne	6, cr7, [r0, #-8]
    b17c:	77025001 	strvc	r5, [r2, -r1]
    b180:	1f000000 	svcne	0x00000000
    b184:	080066ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, sp, lr}
    b188:	00000d4d 	andeq	r0, r0, sp, asr #26
    b18c:	0151011d 	cmpeq	r1, sp, lsl r1
    b190:	50011d30 	andpl	r1, r1, r0, lsr sp
    b194:	00003001 	andeq	r3, r0, r1
    b198:	67423700 	strbvs	r3, [r2, -r0, lsl #14]
    b19c:	08920800 	ldmeq	r2, {fp}
    b1a0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    b1a4:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    b1a8:	5c03dd01 	stcpl	13, cr13, [r3], {1}
    b1ac:	38080067 	stmdacc	r8, {r0, r1, r2, r5, r6}
    b1b0:	01000000 	mrseq	r0, (UNDEF: 0)
    b1b4:	000c439c 	muleq	ip, ip, r3
    b1b8:	61563900 	cmpvs	r6, r0, lsl #18
    b1bc:	dd01006c 	stcle	0, cr0, [r1, #-432]	; 0xfffffe50
    b1c0:	00005e03 	andeq	r5, r0, r3, lsl #28
    b1c4:	009d7c00 	addseq	r7, sp, r0, lsl #24
    b1c8:	00692400 	rsbeq	r2, r9, r0, lsl #8
    b1cc:	3a03df01 	bcc	102dd8 <__Stack_Size+0x1025d8>
    b1d0:	9d000000 	stcls	0, cr0, [r0, #-0]
    b1d4:	2400009d 	strcs	r0, [r0], #-157	; 0x9d
    b1d8:	0050456e 	subseq	r4, r0, lr, ror #10
    b1dc:	3a03e001 	bcc	1031e8 <__Stack_Size+0x1029e8>
    b1e0:	bc000000 	stclt	0, cr0, [r0], {-0}
    b1e4:	0000009d 	muleq	r0, sp, r0
    b1e8:	001ec223 	andseq	ip, lr, r3, lsr #4
    b1ec:	03780100 	cmneq	r8, #0, 2
    b1f0:	0000005e 	andeq	r0, r0, lr, asr r0
    b1f4:	08006794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp, lr}
    b1f8:	0000005c 	andeq	r0, r0, ip, asr r0
    b1fc:	0c899c01 	stceq	12, cr9, [r9], {1}
    b200:	511a0000 	tstpl	sl, r0
    b204:	01000006 	tsteq	r0, r6
    b208:	003a037a 	eorseq	r0, sl, sl, ror r3
    b20c:	9dcf0000 	stclls	0, cr0, [pc]	; b214 <__Stack_Size+0xaa14>
    b210:	a8220000 	stmdage	r2!, {}	; <UNPREDICTABLE>
    b214:	b6080067 	strlt	r0, [r8], -r7, rrx
    b218:	22000005 	andcs	r0, r0, #5
    b21c:	080067c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp, lr}
    b220:	00000bfe 	strdeq	r0, [r0], -lr
    b224:	0067e237 	rsbeq	lr, r7, r7, lsr r2
    b228:	00089208 	andeq	r9, r8, r8, lsl #4
    b22c:	283a0000 	ldmdacs	sl!, {}	; <UNPREDICTABLE>
    b230:	01000020 	tsteq	r0, r0, lsr #32
    b234:	000003f1 	strdeq	r0, [r0], -r1
    b238:	00020000 	andeq	r0, r2, r0
    b23c:	9c010000 	stcls	0, cr0, [r1], {-0}
    b240:	0002eb3b 	andeq	lr, r2, fp, lsr fp
    b244:	6bec0400 	blvs	ffb0c24c <BootRAM+0xea7c9ed>
    b248:	3b000004 	blcc	b260 <__Stack_Size+0xaa60>
    b24c:	0000021a 	andeq	r0, r0, sl, lsl r2
    b250:	029aee04 	addseq	lr, sl, #4, 28	; 0x40
    b254:	933b0000 	teqls	fp, #0
    b258:	0400001e 	streq	r0, [r0], #-30
    b25c:	00004cf2 	strdeq	r4, [r0], -r2
    b260:	1e9e3b00 	vfnmsne.f64	d3, d14, d0
    b264:	f3040000 	vhadd.u8	d0, d4, d0
    b268:	0000004c 	andeq	r0, r0, ip, asr #32
    b26c:	0001e83b 	andeq	lr, r1, fp, lsr r8
    b270:	d2220500 	eorle	r0, r2, #0, 10
    b274:	0b00000c 	bleq	b2ac <__Stack_Size+0xaaac>
    b278:	00038104 	andeq	r8, r3, r4, lsl #2
    b27c:	013e3b00 	teqeq	lr, r0, lsl #22
    b280:	25050000 	strcs	r0, [r5, #-0]
    b284:	00000ce3 	andeq	r0, r0, r3, ror #25
    b288:	046b040b 	strbteq	r0, [fp], #-1035	; 0x40b
    b28c:	003b0000 	eorseq	r0, fp, r0
    b290:	0500001f 	streq	r0, [r0, #-31]
    b294:	000cf42a 	andeq	pc, ip, sl, lsr #8
    b298:	ef040b00 	svc	0x00040b00
    b29c:	3c000004 	stccc	0, cr0, [r0], {4}
    b2a0:	00002271 	andeq	r2, r0, r1, ror r2
    b2a4:	02e52401 	rsceq	r2, r5, #16777216	; 0x1000000
    b2a8:	03050000 	movweq	r0, #20480	; 0x5000
    b2ac:	2000059a 	mulcs	r0, sl, r5
    b2b0:	0020ad3c 	eoreq	sl, r0, ip, lsr sp
    b2b4:	94250100 	strtls	r0, [r5], #-256	; 0x100
    b2b8:	05000000 	streq	r0, [r0, #-0]
    b2bc:	000dbd03 	andeq	fp, sp, r3, lsl #26
    b2c0:	1e253d20 	cdpne	13, 2, cr3, cr5, cr0, {1}
    b2c4:	53070000 	movwpl	r0, #28672	; 0x7000
    b2c8:	00004c02 	andeq	r4, r0, r2, lsl #24
    b2cc:	000d3200 	andeq	r3, sp, r0, lsl #4
    b2d0:	005e0d00 	subseq	r0, lr, r0, lsl #26
    b2d4:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    b2d8:	00001ffa 	strdeq	r1, [r0], -sl
    b2dc:	0d4d1906 	stcleq	9, cr1, [sp, #-24]	; 0xffffffe8
    b2e0:	d70d0000 	strle	r0, [sp, -r0]
    b2e4:	0d000001 	stceq	0, cr0, [r0, #-4]
    b2e8:	0000004c 	andeq	r0, r0, ip, asr #32
    b2ec:	00004c0d 	andeq	r4, r0, sp, lsl #24
    b2f0:	003f0000 	eorseq	r0, pc, r0
    b2f4:	0700001d 	smladeq	r0, sp, r0, r0
    b2f8:	0d640256 	sfmeq	f0, 2, [r4, #-344]!	; 0xfffffea8
    b2fc:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    b300:	0d000000 	stceq	0, cr0, [r0, #-0]
    b304:	0000004c 	andeq	r0, r0, ip, asr #32
    b308:	1e313f00 	cdpne	15, 3, cr3, cr1, cr0, {0}
    b30c:	4e070000 	cdpmi	0, 0, cr0, cr7, cr0, {0}
    b310:	000d7602 	andeq	r7, sp, r2, lsl #12
    b314:	005e0d00 	subseq	r0, lr, r0, lsl #26
    b318:	3f000000 	svccc	0x00000000
    b31c:	00001e3e 	andeq	r1, r0, lr, lsr lr
    b320:	8d023a07 	vstrhi	s6, [r2, #-28]	; 0xffffffe4
    b324:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    b328:	0000005e 	andeq	r0, r0, lr, asr r0
    b32c:	00004c0d 	andeq	r4, r0, sp, lsl #24
    b330:	9c3f0000 	ldcls	0, cr0, [pc], #-0	; b338 <__Stack_Size+0xab38>
    b334:	07000009 	streq	r0, [r0, -r9]
    b338:	0da40257 	sfmeq	f0, 4, [r4, #348]!	; 0x15c
    b33c:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    b340:	0d000000 	stceq	0, cr0, [r0, #-0]
    b344:	0000004c 	andeq	r0, r0, ip, asr #32
    b348:	1ae33f00 	bne	ff8daf50 <BootRAM+0xe84b6f1>
    b34c:	4d070000 	stcmi	0, cr0, [r7, #-0]
    b350:	000db602 	andeq	fp, sp, r2, lsl #12
    b354:	005e0d00 	subseq	r0, lr, r0, lsl #26
    b358:	3d000000 	stccc	0, cr0, [r0, #-0]
    b35c:	00001b73 	andeq	r1, r0, r3, ror fp
    b360:	4c025407 	cfstrsmi	mvf5, [r2], {7}
    b364:	cc000000 	stcgt	0, cr0, [r0], {-0}
    b368:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    b36c:	0000005e 	andeq	r0, r0, lr, asr r0
    b370:	21a74000 			; <UNDEFINED> instruction: 0x21a74000
    b374:	1a060000 	bne	18b37c <__Stack_Size+0x18ab7c>
    b378:	0001d70d 	andeq	sp, r1, sp, lsl #14
    b37c:	004c0d00 	subeq	r0, ip, r0, lsl #26
    b380:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    b384:	00000000 	andeq	r0, r0, r0
    b388:	00017000 	andeq	r7, r1, r0
    b38c:	b4000400 	strlt	r0, [r0], #-1024	; 0x400
    b390:	0400002a 	streq	r0, [r0], #-42	; 0x2a
    b394:	001c0901 	andseq	r0, ip, r1, lsl #18
    b398:	22e10100 	rsccs	r0, r1, #0, 2
    b39c:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    b3a0:	11600000 	cmnne	r0, r0
    b3a4:	00000000 	andeq	r0, r0, r0
    b3a8:	3f320000 	svccc	0x00320000
    b3ac:	04020000 	streq	r0, [r2], #-0
    b3b0:	0004da05 	andeq	sp, r4, r5, lsl #20
    b3b4:	05020200 	streq	r0, [r2, #-512]	; 0x200
    b3b8:	0000065e 	andeq	r0, r0, lr, asr r6
    b3bc:	1a060102 	bne	18b7cc <__Stack_Size+0x18afcc>
    b3c0:	03000008 	movweq	r0, #8
    b3c4:	00323375 	eorseq	r3, r2, r5, ror r3
    b3c8:	00452402 	subeq	r2, r5, r2, lsl #8
    b3cc:	04020000 	streq	r0, [r2], #-0
    b3d0:	00025207 	andeq	r5, r2, r7, lsl #4
    b3d4:	31750300 	cmncc	r5, r0, lsl #6
    b3d8:	25020036 	strcs	r0, [r2, #-54]	; 0x36
    b3dc:	00000057 	andeq	r0, r0, r7, asr r0
    b3e0:	49070202 	stmdbmi	r7, {r1, r9}
    b3e4:	03000009 	movweq	r0, #9
    b3e8:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    b3ec:	00006826 	andeq	r6, r0, r6, lsr #16
    b3f0:	08010200 	stmdaeq	r1, {r9}
    b3f4:	00000818 	andeq	r0, r0, r8, lsl r8
    b3f8:	005e0404 	subseq	r0, lr, r4, lsl #8
    b3fc:	fa050000 	blx	14b404 <__Stack_Size+0x14ac04>
    b400:	0100001f 	tsteq	r0, pc, lsl r0
    b404:	0067f023 	rsbeq	pc, r7, r3, lsr #32
    b408:	00003008 	andeq	r3, r0, r8
    b40c:	fd9c0100 	ldc2	1, cr0, [ip]
    b410:	06000000 	streq	r0, [r0], -r0
    b414:	000022fb 	strdeq	r2, [r0], -fp
    b418:	006f2301 	rsbeq	r2, pc, r1, lsl #6
    b41c:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    b420:	04060000 	streq	r0, [r6], #-0
    b424:	01000023 	tsteq	r0, r3, lsr #32
    b428:	00004c23 	andeq	r4, r0, r3, lsr #24
    b42c:	009e5a00 	addseq	r5, lr, r0, lsl #20
    b430:	22f30600 	rscscs	r0, r3, #0, 12
    b434:	23010000 	movwcs	r0, #4096	; 0x1000
    b438:	0000004c 	andeq	r0, r0, ip, asr #32
    b43c:	00009e7b 	andeq	r9, r0, fp, ror lr
    b440:	01006e07 	tsteq	r0, r7, lsl #28
    b444:	00003a25 	andeq	r3, r0, r5, lsr #20
    b448:	08520100 	ldmdaeq	r2, {r8}^
    b44c:	26010069 	strcs	r0, [r1], -r9, rrx
    b450:	0000003a 	andeq	r0, r0, sl, lsr r0
    b454:	00009e9c 	muleq	r0, ip, lr
    b458:	00194d09 	andseq	r4, r9, r9, lsl #26
    b45c:	3a260100 	bcc	98b864 <__Stack_Size+0x98b064>
    b460:	fb000000 	blx	b46a <__Stack_Size+0xac6a>
    b464:	0900009e 	stmdbeq	r0, {r1, r2, r3, r4, r7}
    b468:	00001953 	andeq	r1, r0, r3, asr r9
    b46c:	003a2601 	eorseq	r2, sl, r1, lsl #12
    b470:	9f320000 	svcls	0x00320000
    b474:	10090000 	andne	r0, r9, r0
    b478:	01000023 	tsteq	r0, r3, lsr #32
    b47c:	0000fd27 	andeq	pc, r0, r7, lsr #26
    b480:	009f5600 	addseq	r5, pc, r0, lsl #12
    b484:	04040000 	streq	r0, [r4], #-0
    b488:	0000004c 	andeq	r0, r0, ip, asr #32
    b48c:	0021a705 	eoreq	sl, r1, r5, lsl #14
    b490:	203c0100 	eorscs	r0, ip, r0, lsl #2
    b494:	24080068 	strcs	r0, [r8], #-104	; 0x68
    b498:	01000000 	mrseq	r0, (UNDEF: 0)
    b49c:	00016d9c 	muleq	r1, ip, sp
    b4a0:	22fb0600 	rscscs	r0, fp, #0, 12
    b4a4:	3c010000 	stccc	0, cr0, [r1], {-0}
    b4a8:	0000006f 	andeq	r0, r0, pc, rrx
    b4ac:	00009f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    b4b0:	00230406 	eoreq	r0, r3, r6, lsl #8
    b4b4:	4c3c0100 	ldfmis	f0, [ip], #-0
    b4b8:	cc000000 	stcgt	0, cr0, [r0], {-0}
    b4bc:	0600009f 			; <UNDEFINED> instruction: 0x0600009f
    b4c0:	000022f3 	strdeq	r2, [r0], -r3
    b4c4:	004c3c01 	subeq	r3, ip, r1, lsl #24
    b4c8:	9fed0000 	svcls	0x00ed0000
    b4cc:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    b4d0:	3a3e0100 	bcc	f8b8d8 <__Stack_Size+0xf8b0d8>
    b4d4:	01000000 	mrseq	r0, (UNDEF: 0)
    b4d8:	00690852 	rsbeq	r0, r9, r2, asr r8
    b4dc:	003a3f01 	eorseq	r3, sl, r1, lsl #30
    b4e0:	a00e0000 	andge	r0, lr, r0
    b4e4:	10090000 	andne	r0, r9, r0
    b4e8:	01000023 	tsteq	r0, r3, lsr #32
    b4ec:	00016d40 	andeq	r6, r1, r0, asr #26
    b4f0:	00a06d00 	adceq	r6, r0, r0, lsl #26
    b4f4:	04040000 	streq	r0, [r4], #-0
    b4f8:	0000003a 	andeq	r0, r0, sl, lsr r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
       c:	00051308 	andeq	r1, r5, r8, lsl #6
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	11010000 	mrsne	r0, (UNDEF: 1)
      14:	11061000 	mrsne	r1, (UNDEF: 6)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	03011201 	movweq	r1, #4609	; 0x1201
      1c:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	00051308 	andeq	r1, r5, r8, lsl #6
      24:	11010000 	mrsne	r0, (UNDEF: 1)
      28:	130e2501 	movwne	r2, #58625	; 0xe501
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	1b0e030b 	blne	380c60 <__Stack_Size+0x380460>
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	1117550e 	tstne	r7, lr, lsl #10
      34:	00171001 	andseq	r1, r7, r1
      38:	00240200 	eoreq	r0, r4, r0, lsl #4

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	0b3e0b0b 	bleq	f82c70 <__Stack_Size+0xf82470>

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	00000e03 	andeq	r0, r0, r3, lsl #28
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	0b002403 	bleq	9058 <__Stack_Size+0x8858>
      48:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
      4c:	04000008 	streq	r0, [r0], #-8

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	0b0b000f 	bleq	2c0094 <__Stack_Size+0x2bf894>
      54:	00001349 	andeq	r1, r0, r9, asr #6
      58:	27001505 	strcs	r1, [r0, -r5, lsl #10]
      5c:	06000019 			; <UNDEFINED> instruction: 0x06000019
      60:	08030016 	stmdaeq	r3, {r1, r2, r4}
      64:	0b3b0b3a 	bleq	ec2d54 <__Stack_Size+0xec2554>
      68:	00001349 	andeq	r1, r0, r9, asr #6
      6c:	03001607 	movweq	r1, #1543	; 0x607
      70:	3b0b3a0e 	blcc	2ce8b0 <__Stack_Size+0x2ce0b0>
      74:	0013490b 	andseq	r4, r3, fp, lsl #18
      78:	00350800 	eorseq	r0, r5, r0, lsl #16
      7c:	00001349 	andeq	r1, r0, r9, asr #6
      80:	0b010409 	bleq	410ac <__Stack_Size+0x408ac>
      84:	3b0b3a0b 	blcc	2ce8b8 <__Stack_Size+0x2ce0b8>
      88:	0013010b 	andseq	r0, r3, fp, lsl #2
      8c:	00280a00 	eoreq	r0, r8, r0, lsl #20
      90:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
      94:	130b0000 	movwne	r0, #45056	; 0xb000
      98:	3a0b0b01 	bcc	2c2ca4 <__Stack_Size+0x2c24a4>
      9c:	010b3b0b 	tsteq	fp, fp, lsl #22
      a0:	0c000013 	stceq	0, cr0, [r0], {19}
      a4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	f25519_select(x, a, b, (a[0] ^ parity) & 1);

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
	f25519_normalize(a);
	f25519_normalize(c);
      a8:	0b3b0b3a 	bleq	ec2d98 <__Stack_Size+0xec2598>

	return f25519_eq(a, c);
      ac:	0b381349 	bleq	e04dd8 <__Stack_Size+0xe045d8>
      b0:	0d0d0000 	stceq	0, cr0, [sp, #-0]
      b4:	3a080300 	bcc	200cbc <__Stack_Size+0x2004bc>
	uint8_t ok;

	mx2ey(ey, mx);
	ok = ey2ex(ex, ey, parity);

	f25519_normalize(ex);
      b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	f25519_normalize(ey);
      bc:	000b3813 	andeq	r3, fp, r3, lsl r8
      c0:	01040e00 	tsteq	r4, r0, lsl #28

	return ok;
}
      c4:	0b0b0e03 	bleq	2c38d8 <__Stack_Size+0x2c30d8>
      c8:	0b3b0b3a 	bleq	ec2db8 <__Stack_Size+0xec25b8>
      cc:	00001301 	andeq	r1, r0, r1, lsl #6
      d0:	0301130f 	movweq	r1, #4879	; 0x130f
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
      d4:	3a0b0b0e 	bcc	2c2d14 <__Stack_Size+0x2c2514>
      d8:	010b3b0b 	tsteq	fp, fp, lsl #22
		minusp[i] = c;
      dc:	10000013 	andne	r0, r0, r3, lsl r0
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
      e0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
      e4:	13011349 	movwne	r1, #4937	; 0x1349

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
      e8:	05110000 	ldreq	r0, [r1, #-0]
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
      ec:	00134900 	andseq	r4, r3, r0, lsl #18
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
      f0:	01131200 	tsteq	r3, r0, lsl #4
      f4:	0b0b0803 	bleq	2c2108 <__Stack_Size+0x2c1908>
      f8:	0b3b0b3a 	bleq	ec2de8 <__Stack_Size+0xec25e8>
      fc:	00001301 	andeq	r1, r0, r1, lsl #6
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     100:	0b011713 	bleq	45d54 <__Stack_Size+0x45554>

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
     104:	3b0b3a0b 	blcc	2ce938 <__Stack_Size+0x2ce138>
     108:	0013010b 	andseq	r0, r3, fp, lsl #2
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     10c:	000d1400 	andeq	r1, sp, r0, lsl #8
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
     110:	0b3a0803 	bleq	e82124 <__Stack_Size+0xe81924>
     114:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     118:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     11c:	03193f01 	tsteq	r9, #1, 30
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     120:	3b0b3a0e 	blcc	2ce960 <__Stack_Size+0x2ce160>
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
     124:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     128:	010b2013 	tsteq	fp, r3, lsl r0
		fprime_copy(plusa, r);
		fprime_add(plusa, a, modulus);

		fprime_select(r, r, plusa, bit);
	}
}
     12c:	16000013 			; <UNDEFINED> instruction: 0x16000013

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
     130:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	i <<= 3;

	while (x) {
     134:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
     138:	00001349 	andeq	r1, r0, r9, asr #6
     13c:	3f002e17 	svccc	0x00002e17
	f25519_mul__distinct(x3, a, a);

	f25519_mul_c(a, x1z1, 486662);
	f25519_add(a, x1sq, a);
	f25519_add(a, z1sq, a);
	f25519_mul__distinct(x1sq, x1z1, a);
     140:	3a0e0319 	bcc	380dac <__Stack_Size+0x3805ac>
	f25519_mul_c(z3, x1sq, 4);
     144:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     148:	000b2019 	andeq	r2, fp, r9, lsl r0
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	012e1800 	teqeq	lr, r0, lsl #16
     150:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     154:	0b3b0b3a 	bleq	ec2e44 <__Stack_Size+0xec2644>
	f25519_sub(b, x3, z3); /* D */
     158:	0b201927 	bleq	8065fc <__Stack_Size+0x805dfc>
     15c:	00001301 	andeq	r1, r0, r1, lsl #6
	f25519_mul__distinct(da, a, b);
     160:	03003419 	movweq	r3, #1049	; 0x419
     164:	3b0b3a0e 	blcc	2ce9a4 <__Stack_Size+0x2ce1a4>
     168:	0013490b 	andseq	r4, r3, fp, lsl #18

	f25519_sub(b, x2, z2);
     16c:	012e1a00 	teqeq	lr, r0, lsl #20
     170:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
	f25519_add(a, x3, z3); /* C */
     174:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     178:	0b201927 	bleq	80661c <__Stack_Size+0x805e1c>
     17c:	00001301 	andeq	r1, r0, r1, lsl #6
	f25519_mul__distinct(cb, a, b);
     180:	0300341b 	movweq	r3, #1051	; 0x41b
     184:	3b0b3a0e 	blcc	2ce9c4 <__Stack_Size+0x2ce1c4>

	f25519_add(a, da, cb);
     188:	00134905 	andseq	r4, r3, r5, lsl #18
     18c:	002e1c00 	eoreq	r1, lr, r0, lsl #24
     190:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
	f25519_mul__distinct(b, a, a);
     194:	0b3b0b3a 	bleq	ec2e84 <__Stack_Size+0xec2684>
     198:	01111927 	tsteq	r1, r7, lsr #18
	f25519_mul__distinct(x5, z1, b);
     19c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     1a0:	00194297 	mulseq	r9, r7, r2
     1a4:	002e1d00 	eoreq	r1, lr, r0, lsl #26

	f25519_sub(a, da, cb);
     1a8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     1ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
	f25519_mul__distinct(b, a, a);
     1b0:	01111927 	tsteq	r1, r7, lsr #18
     1b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     1b8:	00194297 	mulseq	r9, r7, r2

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	012e1e00 	teqeq	lr, r0, lsl #28
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     1c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	13491927 	movtne	r1, #39207	; 0x9927
     1cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     1d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     1d4:	00130119 	andseq	r0, r3, r9, lsl r1
		f25519_select(zm1, zm1, zm, bit);
     1d8:	00051f00 	andeq	r1, r5, r0, lsl #30
     1dc:	0b3a0e03 	bleq	e839f0 <__Stack_Size+0xe831f0>
     1e0:	1349053b 	movtne	r0, #38203	; 0x953b
		f25519_select(xm, xm, xms, bit);
     1e4:	00001702 	andeq	r1, r0, r2, lsl #14
     1e8:	03000520 	movweq	r0, #1312	; 0x520
     1ec:	3b0b3a0e 	blcc	2cea2c <__Stack_Size+0x2ce22c>
		f25519_select(zm, zm, zms, bit);
     1f0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     1f4:	21000018 	tstcs	r0, r8, lsl r0
     1f8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	0b3a0e03 	bleq	e83a10 <__Stack_Size+0xe83210>
     200:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	06120111 			; <UNDEFINED> instruction: 0x06120111
     208:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
	f25519_mul__distinct(result, zm1, xm);
     20c:	00130119 	andseq	r0, r3, r9, lsl r1
     210:	010b2200 	mrseq	r2, R11_fiq
	f25519_normalize(result);
     214:	13011755 	movwne	r1, #5973	; 0x1755
     218:	34230000 	strtcc	r0, [r3], #-0
}
     21c:	3a0e0300 	bcc	380e24 <__Stack_Size+0x380624>
     220:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     224:	00170213 	andseq	r0, r7, r3, lsl r2
     228:	82892400 	addhi	r2, r9, #0, 8
     22c:	01110001 	tsteq	r1, r1
     230:	00001331 	andeq	r1, r0, r1, lsr r3
     234:	01828925 	orreq	r8, r2, r5, lsr #18
     238:	31011101 	tstcc	r1, r1, lsl #2
     23c:	00130113 	andseq	r0, r3, r3, lsl r1
     240:	828a2600 	addhi	r2, sl, #0, 12
     244:	18020001 	stmdane	r2, {r0}
     248:	00184291 	mulseq	r8, r1, r2
     24c:	82892700 	addhi	r2, r9, #0, 14
     250:	01110101 	tsteq	r1, r1, lsl #2
     254:	31194295 			; <UNDEFINED> instruction: 0x31194295
     258:	28000013 	stmdacs	r0, {r0, r1, r4}
     25c:	01018289 	smlabbeq	r1, r9, r2, r8
     260:	00000111 	andeq	r0, r0, r1, lsl r1
     264:	03000529 	movweq	r0, #1321	; 0x529
     268:	3b0b3a08 	blcc	2cea90 <__Stack_Size+0x2ce290>
     26c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     270:	2a000017 	bcs	2d4 <_Minimum_Stack_Size+0x1d4>
     274:	00018289 	andeq	r8, r1, r9, lsl #5
     278:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     27c:	00133119 	andseq	r3, r3, r9, lsl r1
     280:	012e2b00 	teqeq	lr, r0, lsl #22
     284:	01111331 	tsteq	r1, r1, lsr r3
     288:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     28c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     290:	2c000013 	stccs	0, cr0, [r0], {19}
     294:	13310005 	teqne	r1, #5
     298:	00001702 	andeq	r1, r0, r2, lsl #14
     29c:	11010b2d 	tstne	r1, sp, lsr #22
     2a0:	00061201 	andeq	r1, r6, r1, lsl #4
     2a4:	00052e00 	andeq	r2, r5, r0, lsl #28
     2a8:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     2ac:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
     2b0:	03193f00 	tsteq	r9, #0, 30
     2b4:	3b0b3a0e 	blcc	2ceaf4 <__Stack_Size+0x2ce2f4>
     2b8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     2bc:	000b2013 	andeq	r2, fp, r3, lsl r0
     2c0:	011d3000 	tsteq	sp, r0
     2c4:	01521331 	cmpeq	r2, r1, lsr r3
     2c8:	0b581755 	bleq	1606024 <__Stack_Size+0x1605824>
     2cc:	13010559 	movwne	r0, #5465	; 0x1559
     2d0:	89310000 	ldmdbhi	r1!, {}	; <UNPREDICTABLE>
     2d4:	11010182 	smlabbne	r1, r2, r1, r0
     2d8:	00133101 	andseq	r3, r3, r1, lsl #2
     2dc:	010b3200 	mrseq	r3, R11_fiq
     2e0:	00001755 	andeq	r1, r0, r5, asr r7
     2e4:	31003433 	tstcc	r0, r3, lsr r4
     2e8:	00180213 	andseq	r0, r8, r3, lsl r2
     2ec:	012e3400 	teqeq	lr, r0, lsl #8
     2f0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     2f4:	0b3b0b3a 	bleq	ec2fe4 <__Stack_Size+0xec27e4>
     2f8:	01111927 	tsteq	r1, r7, lsr #18
     2fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     300:	01194297 			; <UNDEFINED> instruction: 0x01194297
     304:	35000013 	strcc	r0, [r0, #-19]
     308:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     30c:	0b3b0b3a 	bleq	ec2ffc <__Stack_Size+0xec27fc>
     310:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     314:	1d360000 	ldcne	0, cr0, [r6, #-0]
     318:	11133101 	tstne	r3, r1, lsl #2
     31c:	58061201 	stmdapl	r6, {r0, r9, ip}
     320:	010b590b 	tsteq	fp, fp, lsl #18
     324:	37000013 	smladcc	r0, r3, r0, r0
     328:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     32c:	0b3a0e03 	bleq	e83b40 <__Stack_Size+0xe83340>
     330:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     334:	0b201349 	bleq	805060 <__Stack_Size+0x804860>
     338:	1d380000 	ldcne	0, cr0, [r8, #-0]
     33c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     340:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     344:	000b590b 	andeq	r5, fp, fp, lsl #18
     348:	00343900 	eorseq	r3, r4, r0, lsl #18
     34c:	17021331 	smladxne	r2, r1, r3, r1
     350:	053a0000 	ldreq	r0, [sl, #-0]!
     354:	3a0e0300 	bcc	380f5c <__Stack_Size+0x38075c>
     358:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     35c:	00170213 	andseq	r0, r7, r3, lsl r2
     360:	00343b00 	eorseq	r3, r4, r0, lsl #22
     364:	0b3a0e03 	bleq	e83b78 <__Stack_Size+0xe83378>
     368:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     36c:	00001702 	andeq	r1, r0, r2, lsl #14
     370:	31011d3c 	tstcc	r1, ip, lsr sp
     374:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     378:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     37c:	0013010b 	andseq	r0, r3, fp, lsl #2
     380:	00343d00 	eorseq	r3, r4, r0, lsl #26
     384:	0b3a0e03 	bleq	e83b98 <__Stack_Size+0xe83398>
     388:	1349053b 	movtne	r0, #38203	; 0x953b
     38c:	00001802 	andeq	r1, r0, r2, lsl #16
     390:	3f012e3e 	svccc	0x00012e3e
     394:	3a0e0319 	bcc	381000 <__Stack_Size+0x380800>
     398:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     39c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     3a0:	96184006 	ldrls	r4, [r8], -r6
     3a4:	13011942 	movwne	r1, #6466	; 0x1942
     3a8:	893f0000 	ldmdbhi	pc!, {}	; <UNPREDICTABLE>
     3ac:	11010182 	smlabbne	r1, r2, r1, r0
     3b0:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     3b4:	13011331 	movwne	r1, #4913	; 0x1331
     3b8:	2e400000 	cdpcs	0, 4, cr0, cr0, cr0, {0}
     3bc:	03193f00 	tsteq	r9, #0, 30
     3c0:	3b0b3a0e 	blcc	2cec00 <__Stack_Size+0x2ce400>
     3c4:	11134905 	tstne	r3, r5, lsl #18
     3c8:	40061201 	andmi	r1, r6, r1, lsl #4
     3cc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     3d0:	34410000 	strbcc	r0, [r1], #-0
     3d4:	3a0e0300 	bcc	380fdc <__Stack_Size+0x3807dc>
     3d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3dc:	00061c13 	andeq	r1, r6, r3, lsl ip
     3e0:	00264200 	eoreq	r4, r6, r0, lsl #4
     3e4:	00001349 	andeq	r1, r0, r9, asr #6
     3e8:	03003443 	movweq	r3, #1091	; 0x443
     3ec:	3b0b3a0e 	blcc	2cec2c <__Stack_Size+0x2ce42c>
     3f0:	3f13490b 	svccc	0x0013490b
     3f4:	00180219 	andseq	r0, r8, r9, lsl r2
     3f8:	00344400 	eorseq	r4, r4, r0, lsl #8
     3fc:	0b3a0e03 	bleq	e83c10 <__Stack_Size+0xe83410>
     400:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     404:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     408:	01450000 	mrseq	r0, (UNDEF: 69)
     40c:	01134901 	tsteq	r3, r1, lsl #18
     410:	46000013 			; <UNDEFINED> instruction: 0x46000013
     414:	13490021 	movtne	r0, #36897	; 0x9021
     418:	00000b2f 	andeq	r0, r0, pc, lsr #22
     41c:	00002147 	andeq	r2, r0, r7, asr #2
     420:	002e4800 	eoreq	r4, lr, r0, lsl #16
     424:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     428:	0b3b0b3a 	bleq	ec3118 <__Stack_Size+0xec2918>
     42c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     430:	2e490000 	cdpcs	0, 4, cr0, cr9, cr0, {0}
     434:	03193f01 	tsteq	r9, #1, 30
     438:	3b0b3a0e 	blcc	2cec78 <__Stack_Size+0x2ce478>
     43c:	3c192705 	ldccc	7, cr2, [r9], {5}
     440:	00130119 	andseq	r0, r3, r9, lsl r1
     444:	012e4a00 	teqeq	lr, r0, lsl #20
     448:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     44c:	0b3b0b3a 	bleq	ec313c <__Stack_Size+0xec293c>
     450:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     454:	00001301 	andeq	r1, r0, r1, lsl #6
     458:	3f002e4b 	svccc	0x00002e4b
     45c:	3a0e0319 	bcc	3810c8 <__Stack_Size+0x3808c8>
     460:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     464:	3c134919 	ldccc	9, cr4, [r3], {25}
     468:	4c000019 	stcmi	0, cr0, [r0], {25}
     46c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     470:	0b3a0e03 	bleq	e83c84 <__Stack_Size+0xe83484>
     474:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     478:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     47c:	00001301 	andeq	r1, r0, r1, lsl #6
     480:	3f012e4d 	svccc	0x00012e4d
     484:	3a0e0319 	bcc	3810f0 <__Stack_Size+0x3808f0>
     488:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     48c:	3c134919 	ldccc	9, cr4, [r3], {25}
     490:	00130119 	andseq	r0, r3, r9, lsl r1
     494:	002e4e00 	eoreq	r4, lr, r0, lsl #28
     498:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     49c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     4a0:	13491927 	movtne	r1, #39207	; 0x9927
     4a4:	0000193c 	andeq	r1, r0, ip, lsr r9
     4a8:	01110100 	tsteq	r1, r0, lsl #2
     4ac:	0b130e25 	bleq	4c3d48 <__Stack_Size+0x4c3548>
     4b0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     4b4:	00001710 	andeq	r1, r0, r0, lsl r7
     4b8:	0b002402 	bleq	94c8 <__Stack_Size+0x8cc8>
     4bc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     4c0:	03000008 	movweq	r0, #8
     4c4:	0b0b0024 	bleq	2c055c <__Stack_Size+0x2bfd5c>
     4c8:	0e030b3e 	vmoveq.16	d3[0], r0
     4cc:	16040000 	strne	r0, [r4], -r0
     4d0:	3a080300 	bcc	2010d8 <__Stack_Size+0x2008d8>
     4d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4d8:	05000013 	streq	r0, [r0, #-19]
     4dc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     4e0:	0b3a0b0b 	bleq	e83114 <__Stack_Size+0xe82914>
     4e4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     4e8:	0d060000 	stceq	0, cr0, [r6, #-0]
     4ec:	3a0e0300 	bcc	3810f4 <__Stack_Size+0x3808f4>
     4f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4f4:	000b3813 	andeq	r3, fp, r3, lsl r8
     4f8:	000f0700 	andeq	r0, pc, r0, lsl #14
     4fc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     500:	16080000 	strne	r0, [r8], -r0
     504:	3a0e0300 	bcc	38110c <__Stack_Size+0x38090c>
     508:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     50c:	09000013 	stmdbeq	r0, {r0, r1, r4}
     510:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     514:	0b3b0b3a 	bleq	ec3204 <__Stack_Size+0xec2a04>
     518:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     51c:	00001802 	andeq	r1, r0, r2, lsl #16
     520:	4901010a 	stmdbmi	r1, {r1, r3, r8}
     524:	00130113 	andseq	r0, r3, r3, lsl r1
     528:	00210b00 	eoreq	r0, r1, r0, lsl #22
     52c:	0b2f1349 	bleq	bc5258 <__Stack_Size+0xbc4a58>
     530:	01000000 	mrseq	r0, (UNDEF: 0)
     534:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     538:	0e030b13 	vmoveq.32	d3[0], r0
     53c:	17550e1b 	smmlane	r5, fp, lr, r0
     540:	17100111 			; <UNDEFINED> instruction: 0x17100111
     544:	16020000 	strne	r0, [r2], -r0
     548:	3a0e0300 	bcc	381150 <__Stack_Size+0x380950>
     54c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     550:	03000013 	movweq	r0, #19
     554:	0b0b0024 	bleq	2c05ec <__Stack_Size+0x2bfdec>
     558:	0e030b3e 	vmoveq.16	d3[0], r0
     55c:	24040000 	strcs	r0, [r4], #-0
     560:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     564:	0008030b 	andeq	r0, r8, fp, lsl #6
     568:	000f0500 	andeq	r0, pc, r0, lsl #10
     56c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     570:	26060000 	strcs	r0, [r6], -r0
     574:	00134900 	andseq	r4, r3, r0, lsl #18
     578:	00160700 	andseq	r0, r6, r0, lsl #14
     57c:	0b3a0803 	bleq	e82590 <__Stack_Size+0xe81d90>
     580:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     584:	04080000 	streq	r0, [r8], #-0
     588:	3a0b0b01 	bcc	2c3194 <__Stack_Size+0x2c2994>
     58c:	010b3b0b 	tsteq	fp, fp, lsl #22
     590:	09000013 	stmdbeq	r0, {r0, r1, r4}
     594:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     598:	00000d1c 	andeq	r0, r0, ip, lsl sp
     59c:	0301130a 	movweq	r1, #4874	; 0x130a
     5a0:	3a0b0b0e 	bcc	2c31e0 <__Stack_Size+0x2c29e0>
     5a4:	010b3b0b 	tsteq	fp, fp, lsl #22
     5a8:	0b000013 	bleq	5fc <_Minimum_Stack_Size+0x4fc>
     5ac:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     5b0:	0b3b0b3a 	bleq	ec32a0 <__Stack_Size+0xec2aa0>
     5b4:	0b381349 	bleq	e052e0 <__Stack_Size+0xe04ae0>
     5b8:	010c0000 	mrseq	r0, (UNDEF: 12)
     5bc:	01134901 	tsteq	r3, r1, lsl #18
     5c0:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     5c4:	13490021 	movtne	r0, #36897	; 0x9021
     5c8:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     5cc:	03193f01 	tsteq	r9, #1, 30
     5d0:	3b0b3a0e 	blcc	2cee10 <__Stack_Size+0x2ce610>
     5d4:	1119270b 	tstne	r9, fp, lsl #14
     5d8:	40061201 	andmi	r1, r6, r1, lsl #4
     5dc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     5e0:	00001301 	andeq	r1, r0, r1, lsl #6
     5e4:	0300050f 	movweq	r0, #1295	; 0x50f
     5e8:	3b0b3a0e 	blcc	2cee28 <__Stack_Size+0x2ce628>
     5ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     5f0:	10000017 	andne	r0, r0, r7, lsl r0
     5f4:	08030034 	stmdaeq	r3, {r2, r4, r5}
     5f8:	0b3b0b3a 	bleq	ec32e8 <__Stack_Size+0xec2ae8>
     5fc:	17021349 	strne	r1, [r2, -r9, asr #6]
     600:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
     604:	11010182 	smlabbne	r1, r2, r1, r0
     608:	01133101 	tsteq	r3, r1, lsl #2
     60c:	12000013 	andne	r0, r0, #19
     610:	0001828a 	andeq	r8, r1, sl, lsl #5
     614:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     618:	13000018 	movwne	r0, #24
     61c:	01018289 	smlabbeq	r1, r9, r2, r8
     620:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     624:	00133119 	andseq	r3, r3, r9, lsl r1
     628:	012e1400 	teqeq	lr, r0, lsl #8
     62c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     630:	0b3b0b3a 	bleq	ec3320 <__Stack_Size+0xec2b20>
     634:	01111349 	tsteq	r1, r9, asr #6
     638:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     63c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     640:	15000013 	strne	r0, [r0, #-19]
     644:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     648:	0b3b0b3a 	bleq	ec3338 <__Stack_Size+0xec2b38>
     64c:	17021349 	strne	r1, [r2, -r9, asr #6]
     650:	34160000 	ldrcc	r0, [r6], #-0
     654:	3a0e0300 	bcc	38125c <__Stack_Size+0x380a5c>
     658:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     65c:	000b1c13 	andeq	r1, fp, r3, lsl ip
     660:	00341700 	eorseq	r1, r4, r0, lsl #14
     664:	0b3a0e03 	bleq	e83e78 <__Stack_Size+0xe83678>
     668:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     66c:	00001802 	andeq	r1, r0, r2, lsl #16
     670:	01828918 	orreq	r8, r2, r8, lsl r9
     674:	31011100 	mrscc	r1, (UNDEF: 17)
     678:	19000013 	stmdbne	r0, {r0, r1, r4}
     67c:	01018289 	smlabbeq	r1, r9, r2, r8
     680:	13310111 	teqne	r1, #1073741828	; 0x40000004
     684:	341a0000 	ldrcc	r0, [sl], #-0
     688:	3a0e0300 	bcc	381290 <__Stack_Size+0x380a90>
     68c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     690:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     694:	1b000018 	blne	6fc <_Minimum_Stack_Size+0x5fc>
     698:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     69c:	0b3a0e03 	bleq	e83eb0 <__Stack_Size+0xe836b0>
     6a0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     6a4:	1301193c 	movwne	r1, #6460	; 0x193c
     6a8:	051c0000 	ldreq	r0, [ip, #-0]
     6ac:	00134900 	andseq	r4, r3, r0, lsl #18
     6b0:	00181d00 	andseq	r1, r8, r0, lsl #26
     6b4:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
     6b8:	03193f00 	tsteq	r9, #0, 30
     6bc:	3b0b3a0e 	blcc	2ceefc <__Stack_Size+0x2ce6fc>
     6c0:	3c192705 	ldccc	7, cr2, [r9], {5}
     6c4:	1f000019 	svcne	0x00000019
     6c8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     6cc:	0b3a0e03 	bleq	e83ee0 <__Stack_Size+0xe836e0>
     6d0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     6d4:	0000193c 	andeq	r1, r0, ip, lsr r9
     6d8:	3f012e20 	svccc	0x00012e20
     6dc:	3a0e0319 	bcc	381348 <__Stack_Size+0x380b48>
     6e0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     6e4:	3c134919 	ldccc	9, cr4, [r3], {25}
     6e8:	00130119 	andseq	r0, r3, r9, lsl r1
     6ec:	012e2100 	teqeq	lr, r0, lsl #2
     6f0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     6f4:	0b3b0b3a 	bleq	ec33e4 <__Stack_Size+0xec2be4>
     6f8:	13491927 	movtne	r1, #39207	; 0x9927
     6fc:	1301193c 	movwne	r1, #6460	; 0x193c
     700:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
     704:	03193f01 	tsteq	r9, #1, 30
     708:	3b0b3a0e 	blcc	2cef48 <__Stack_Size+0x2ce748>
     70c:	3c13490b 	ldccc	9, cr4, [r3], {11}
     710:	00130119 	andseq	r0, r3, r9, lsl r1
     714:	012e2300 	teqeq	lr, r0, lsl #6
     718:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     71c:	0b3b0b3a 	bleq	ec340c <__Stack_Size+0xec2c0c>
     720:	1301193c 	movwne	r1, #6460	; 0x193c
     724:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
     728:	03193f01 	tsteq	r9, #1, 30
     72c:	3b0b3a0e 	blcc	2cef6c <__Stack_Size+0x2ce76c>
     730:	3c192705 	ldccc	7, cr2, [r9], {5}
     734:	00000019 	andeq	r0, r0, r9, lsl r0
     738:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     73c:	030b130e 	movweq	r1, #45838	; 0xb30e
     740:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     744:	10011117 	andne	r1, r1, r7, lsl r1
     748:	02000017 	andeq	r0, r0, #23
     74c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     750:	0b3b0b3a 	bleq	ec3440 <__Stack_Size+0xec2c40>
     754:	00001349 	andeq	r1, r0, r9, asr #6
     758:	0b002403 	bleq	976c <__Stack_Size+0x8f6c>
     75c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     760:	0400000e 	streq	r0, [r0], #-14
     764:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     768:	0b3a0b0b 	bleq	e8339c <__Stack_Size+0xe82b9c>
     76c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     770:	0d050000 	stceq	0, cr0, [r5, #-0]
     774:	490e0300 	stmdbmi	lr, {r8, r9}
     778:	340b3813 	strcc	r3, [fp], #-2067	; 0x813
     77c:	06000019 			; <UNDEFINED> instruction: 0x06000019
     780:	0b0b000f 	bleq	2c07c4 <__Stack_Size+0x2bffc4>
     784:	24070000 	strcs	r0, [r7], #-0
     788:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     78c:	0008030b 	andeq	r0, r8, fp, lsl #6
     790:	000f0800 	andeq	r0, pc, r0, lsl #16
     794:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     798:	15090000 	strne	r0, [r9, #-0]
     79c:	00192700 	andseq	r2, r9, r0, lsl #14
     7a0:	00260a00 	eoreq	r0, r6, r0, lsl #20
     7a4:	00001349 	andeq	r1, r0, r9, asr #6
     7a8:	0300160b 	movweq	r1, #1547	; 0x60b
     7ac:	3b0b3a08 	blcc	2cefd4 <__Stack_Size+0x2ce7d4>
     7b0:	0013490b 	andseq	r4, r3, fp, lsl #18
     7b4:	00350c00 	eorseq	r0, r5, r0, lsl #24
     7b8:	00001349 	andeq	r1, r0, r9, asr #6
     7bc:	0b01040d 	bleq	417f8 <__Stack_Size+0x40ff8>
     7c0:	3b0b3a0b 	blcc	2ceff4 <__Stack_Size+0x2ce7f4>
     7c4:	0013010b 	andseq	r0, r3, fp, lsl #2
     7c8:	00280e00 	eoreq	r0, r8, r0, lsl #28
     7cc:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     7d0:	130f0000 	movwne	r0, #61440	; 0xf000
     7d4:	3a0b0b01 	bcc	2c33e0 <__Stack_Size+0x2c2be0>
     7d8:	010b3b0b 	tsteq	fp, fp, lsl #22
     7dc:	10000013 	andne	r0, r0, r3, lsl r0
     7e0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     7e4:	0b3b0b3a 	bleq	ec34d4 <__Stack_Size+0xec2cd4>
     7e8:	0b381349 	bleq	e05514 <__Stack_Size+0xe04d14>
     7ec:	0d110000 	ldceq	0, cr0, [r1, #-0]
     7f0:	3a0e0300 	bcc	3813f8 <__Stack_Size+0x380bf8>
     7f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7f8:	000b3813 	andeq	r3, fp, r3, lsl r8
     7fc:	01131200 	tsteq	r3, r0, lsl #4
     800:	0b3a050b 	bleq	e81c34 <__Stack_Size+0xe81434>
     804:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     808:	0d130000 	ldceq	0, cr0, [r3, #-0]
     80c:	3a0e0300 	bcc	381414 <__Stack_Size+0x380c14>
     810:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     814:	00053813 	andeq	r3, r5, r3, lsl r8
     818:	000d1400 	andeq	r1, sp, r0, lsl #8
     81c:	0b3a0803 	bleq	e82830 <__Stack_Size+0xe82030>
     820:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     824:	00000538 	andeq	r0, r0, r8, lsr r5
     828:	49010115 	stmdbmi	r1, {r0, r2, r4, r8}
     82c:	00130113 	andseq	r0, r3, r3, lsl r1
     830:	00211600 	eoreq	r1, r1, r0, lsl #12
     834:	0b2f1349 	bleq	bc5560 <__Stack_Size+0xbc4d60>
     838:	0d170000 	ldceq	0, cr0, [r7, #-0]
     83c:	3a0e0300 	bcc	381444 <__Stack_Size+0x380c44>
     840:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     844:	000b3813 	andeq	r3, fp, r3, lsl r8
     848:	000d1800 	andeq	r1, sp, r0, lsl #16
     84c:	0b3a0803 	bleq	e82860 <__Stack_Size+0xe82060>
     850:	1349053b 	movtne	r0, #38203	; 0x953b
     854:	00000b38 	andeq	r0, r0, r8, lsr fp
     858:	03011319 	movweq	r1, #4889	; 0x1319
     85c:	3a0b0b0e 	bcc	2c349c <__Stack_Size+0x2c2c9c>
     860:	01053b0b 	tsteq	r5, fp, lsl #22
     864:	1a000013 	bne	8b8 <__Stack_Size+0xb8>
     868:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     86c:	0b3a0e03 	bleq	e84080 <__Stack_Size+0xe83880>
     870:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     874:	13010b20 	movwne	r0, #6944	; 0x1b20
     878:	051b0000 	ldreq	r0, [fp, #-0]
     87c:	3a0e0300 	bcc	381484 <__Stack_Size+0x380c84>
     880:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     884:	1c000013 	stcne	0, cr0, [r0], {19}
     888:	08030005 	stmdaeq	r3, {r0, r2}
     88c:	0b3b0b3a 	bleq	ec357c <__Stack_Size+0xec2d7c>
     890:	00001349 	andeq	r1, r0, r9, asr #6
     894:	3f012e1d 	svccc	0x00012e1d
     898:	3a0e0319 	bcc	381504 <__Stack_Size+0x380d04>
     89c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     8a0:	010b2019 	tsteq	fp, r9, lsl r0
     8a4:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     8a8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     8ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     8b0:	00001349 	andeq	r1, r0, r9, asr #6
     8b4:	0300051f 	movweq	r0, #1311	; 0x51f
     8b8:	3b0b3a08 	blcc	2cf0e0 <__Stack_Size+0x2ce8e0>
     8bc:	00134905 	andseq	r4, r3, r5, lsl #18
     8c0:	012e2000 	teqeq	lr, r0
     8c4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     8c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     8cc:	13491927 	movtne	r1, #39207	; 0x9927
     8d0:	13010b20 	movwne	r0, #6944	; 0x1b20
     8d4:	34210000 	strtcc	r0, [r1], #-0
     8d8:	3a0e0300 	bcc	3814e0 <__Stack_Size+0x380ce0>
     8dc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8e0:	22000013 	andcs	r0, r0, #19
     8e4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     8e8:	0b3a0e03 	bleq	e840fc <__Stack_Size+0xe838fc>
     8ec:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     8f0:	00000b20 	andeq	r0, r0, r0, lsr #22
     8f4:	03001623 	movweq	r1, #1571	; 0x623
     8f8:	3b0b3a0e 	blcc	2cf138 <__Stack_Size+0x2ce938>
     8fc:	00134905 	andseq	r4, r3, r5, lsl #18
     900:	00182400 	andseq	r2, r8, r0, lsl #8
     904:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
     908:	11133101 	tstne	r3, r1, lsl #2
     90c:	40061201 	andmi	r1, r6, r1, lsl #4
     910:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     914:	00001301 	andeq	r1, r0, r1, lsl #6
     918:	31000526 	tstcc	r0, r6, lsr #10
     91c:	00180213 	andseq	r0, r8, r3, lsl r2
     920:	00342700 	eorseq	r2, r4, r0, lsl #14
     924:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     928:	1d280000 	stcne	0, cr0, [r8, #-0]
     92c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     930:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     934:	0005590b 	andeq	r5, r5, fp, lsl #18
     938:	00052900 	andeq	r2, r5, r0, lsl #18
     93c:	00001331 	andeq	r1, r0, r1, lsr r3
     940:	55010b2a 	strpl	r0, [r1, #-2858]	; 0xb2a
     944:	2b000017 	blcs	9a8 <__Stack_Size+0x1a8>
     948:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     94c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     950:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
     954:	00001301 	andeq	r1, r0, r1, lsl #6
     958:	3100052c 	tstcc	r0, ip, lsr #10
     95c:	00170213 	andseq	r0, r7, r3, lsl r2
     960:	011d2d00 	tsteq	sp, r0, lsl #26
     964:	01111331 	tsteq	r1, r1, lsr r3
     968:	0b580612 	bleq	16021b8 <__Stack_Size+0x16019b8>
     96c:	00000559 	andeq	r0, r0, r9, asr r5
     970:	0182892e 	orreq	r8, r2, lr, lsr #18
     974:	31011101 	tstcc	r1, r1, lsl #2
     978:	2f000013 	svccs	0x00000013
     97c:	0001828a 	andeq	r8, r1, sl, lsl #5
     980:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     984:	30000018 	andcc	r0, r0, r8, lsl r0
     988:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     98c:	0b3a0e03 	bleq	e841a0 <__Stack_Size+0xe839a0>
     990:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     994:	01111349 	tsteq	r1, r9, asr #6
     998:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     99c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     9a0:	31000013 	tstcc	r0, r3, lsl r0
     9a4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     9a8:	0b3b0b3a 	bleq	ec3698 <__Stack_Size+0xec2e98>
     9ac:	17021349 	strne	r1, [r2, -r9, asr #6]
     9b0:	05320000 	ldreq	r0, [r2, #-0]!
     9b4:	3a080300 	bcc	2015bc <__Stack_Size+0x200dbc>
     9b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9bc:	00170213 	andseq	r0, r7, r3, lsl r2
     9c0:	012e3300 	teqeq	lr, r0, lsl #6
     9c4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     9c8:	0b3b0b3a 	bleq	ec36b8 <__Stack_Size+0xec2eb8>
     9cc:	01111927 	tsteq	r1, r7, lsr #18
     9d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     9d4:	01194297 			; <UNDEFINED> instruction: 0x01194297
     9d8:	34000013 	strcc	r0, [r0], #-19
     9dc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     9e0:	0b3b0b3a 	bleq	ec36d0 <__Stack_Size+0xec2ed0>
     9e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     9e8:	34350000 	ldrtcc	r0, [r5], #-0
     9ec:	3a080300 	bcc	2015f4 <__Stack_Size+0x200df4>
     9f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9f4:	00170213 	andseq	r0, r7, r3, lsl r2
     9f8:	011d3600 	tsteq	sp, r0, lsl #12
     9fc:	01521331 	cmpeq	r2, r1, lsr r3
     a00:	0b581755 	bleq	160675c <__Stack_Size+0x1605f5c>
     a04:	13010b59 	movwne	r0, #7001	; 0x1b59
     a08:	1d370000 	ldcne	0, cr0, [r7, #-0]
     a0c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     a10:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     a14:	000b590b 	andeq	r5, fp, fp, lsl #18
     a18:	012e3800 	teqeq	lr, r0, lsl #16
     a1c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     a20:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a24:	01111927 	tsteq	r1, r7, lsr #18
     a28:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a2c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     a30:	39000013 	stmdbcc	r0, {r0, r1, r4}
     a34:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     a38:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a3c:	17021349 	strne	r1, [r2, -r9, asr #6]
     a40:	343a0000 	ldrtcc	r0, [sl], #-0
     a44:	3a080300 	bcc	20164c <__Stack_Size+0x200e4c>
     a48:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a4c:	00170213 	andseq	r0, r7, r3, lsl r2
     a50:	00343b00 	eorseq	r3, r4, r0, lsl #22
     a54:	0b3a0803 	bleq	e82a68 <__Stack_Size+0xe82268>
     a58:	1349053b 	movtne	r0, #38203	; 0x953b
     a5c:	00001802 	andeq	r1, r0, r2, lsl #16
     a60:	0182893c 	orreq	r8, r2, ip, lsr r9
     a64:	31011101 	tstcc	r1, r1, lsl #2
     a68:	00130113 	andseq	r0, r3, r3, lsl r1
     a6c:	00343d00 	eorseq	r3, r4, r0, lsl #26
     a70:	0b3a0e03 	bleq	e84284 <__Stack_Size+0xe83a84>
     a74:	1349053b 	movtne	r0, #38203	; 0x953b
     a78:	00001802 	andeq	r1, r0, r2, lsl #16
     a7c:	3f012e3e 	svccc	0x00012e3e
     a80:	3a0e0319 	bcc	3816ec <__Stack_Size+0x380eec>
     a84:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a88:	01193c13 	tsteq	r9, r3, lsl ip
     a8c:	3f000013 	svccc	0x00000013
     a90:	1331002e 	teqne	r1, #46	; 0x2e
     a94:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a98:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     a9c:	40000019 	andmi	r0, r0, r9, lsl r0
     aa0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     aa4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     aa8:	0b1c1349 	bleq	7057d4 <__Stack_Size+0x704fd4>
     aac:	2e410000 	cdpcs	0, 4, cr0, cr1, cr0, {0}
     ab0:	03193f00 	tsteq	r9, #0, 30
     ab4:	3b0b3a0e 	blcc	2cf2f4 <__Stack_Size+0x2ceaf4>
     ab8:	11192705 	tstne	r9, r5, lsl #14
     abc:	40061201 	andmi	r1, r6, r1, lsl #4
     ac0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ac4:	0b420000 	bleq	1080acc <__Stack_Size+0x10802cc>
     ac8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     acc:	43000006 	movwmi	r0, #6
     ad0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ad4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ad8:	17021349 	strne	r1, [r2, -r9, asr #6]
     adc:	05440000 	strbeq	r0, [r4, #-0]
     ae0:	3a080300 	bcc	2016e8 <__Stack_Size+0x200ee8>
     ae4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ae8:	00180213 	andseq	r0, r8, r3, lsl r2
     aec:	012e4500 	teqeq	lr, r0, lsl #10
     af0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     af4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     af8:	13491927 	movtne	r1, #39207	; 0x9927
     afc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b00:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b04:	00130119 	andseq	r0, r3, r9, lsl r1
     b08:	012e4600 	teqeq	lr, r0, lsl #12
     b0c:	01111331 	tsteq	r1, r1, lsr r3
     b10:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b14:	01194296 			; <UNDEFINED> instruction: 0x01194296
     b18:	47000013 	smladmi	r0, r3, r0, r0
     b1c:	13310034 	teqne	r1, #52	; 0x34
     b20:	00001702 	andeq	r1, r0, r2, lsl #14
     b24:	3f012e48 	svccc	0x00012e48
     b28:	3a0e0319 	bcc	381794 <__Stack_Size+0x380f94>
     b2c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     b30:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     b34:	96184006 	ldrls	r4, [r8], -r6
     b38:	13011942 	movwne	r1, #6466	; 0x1942
     b3c:	1d490000 	stclne	0, cr0, [r9, #-0]
     b40:	52133100 	andspl	r3, r3, #0, 2
     b44:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     b48:	0005590b 	andeq	r5, r5, fp, lsl #18
     b4c:	00344a00 	eorseq	r4, r4, r0, lsl #20
     b50:	0d1c1331 	ldceq	3, cr1, [ip, #-196]	; 0xffffff3c
     b54:	1d4b0000 	stclne	0, cr0, [fp, #-0]
     b58:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     b5c:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     b60:	0105590b 	tsteq	r5, fp, lsl #18
     b64:	4c000013 	stcmi	0, cr0, [r0], {19}
     b68:	00018289 	andeq	r8, r1, r9, lsl #5
     b6c:	13310111 	teqne	r1, #1073741828	; 0x40000004
     b70:	2e4d0000 	cdpcs	0, 4, cr0, cr13, cr0, {0}
     b74:	03193f01 	tsteq	r9, #1, 30
     b78:	3b0b3a0e 	blcc	2cf3b8 <__Stack_Size+0x2cebb8>
     b7c:	11134905 	tstne	r3, r5, lsl #18
     b80:	40061201 	andmi	r1, r6, r1, lsl #4
     b84:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b88:	00001301 	andeq	r1, r0, r1, lsl #6
     b8c:	0300054e 	movweq	r0, #1358	; 0x54e
     b90:	3b0b3a0e 	blcc	2cf3d0 <__Stack_Size+0x2cebd0>
     b94:	02134905 	andseq	r4, r3, #81920	; 0x14000
     b98:	4f000018 	svcmi	0x00000018
     b9c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ba0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ba4:	0d1c1349 	ldceq	3, cr1, [ip, #-292]	; 0xfffffedc
     ba8:	05500000 	ldrbeq	r0, [r0, #-0]
     bac:	3a080300 	bcc	2017b4 <__Stack_Size+0x200fb4>
     bb0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     bb4:	00170213 	andseq	r0, r7, r3, lsl r2
     bb8:	00345100 	eorseq	r5, r4, r0, lsl #2
     bbc:	0b3a0e03 	bleq	e843d0 <__Stack_Size+0xe83bd0>
     bc0:	1349053b 	movtne	r0, #38203	; 0x953b
     bc4:	0000061c 	andeq	r0, r0, ip, lsl r6
     bc8:	03003452 	movweq	r3, #1106	; 0x452
     bcc:	3b0b3a0e 	blcc	2cf40c <__Stack_Size+0x2cec0c>
     bd0:	3f13490b 	svccc	0x0013490b
     bd4:	00180219 	andseq	r0, r8, r9, lsl r2
     bd8:	012e5300 	teqeq	lr, r0, lsl #6
     bdc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     be0:	0b3b0b3a 	bleq	ec38d0 <__Stack_Size+0xec30d0>
     be4:	13491927 	movtne	r1, #39207	; 0x9927
     be8:	1301193c 	movwne	r1, #6460	; 0x193c
     bec:	05540000 	ldrbeq	r0, [r4, #-0]
     bf0:	00134900 	andseq	r4, r3, r0, lsl #18
     bf4:	012e5500 	teqeq	lr, r0, lsl #10
     bf8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     bfc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c00:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     c04:	00001301 	andeq	r1, r0, r1, lsl #6
     c08:	3f002e56 	svccc	0x00002e56
     c0c:	3a0e0319 	bcc	381878 <__Stack_Size+0x381078>
     c10:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c14:	00193c19 	andseq	r3, r9, r9, lsl ip
     c18:	11010000 	mrsne	r0, (UNDEF: 1)
     c1c:	130e2501 	movwne	r2, #58625	; 0xe501
     c20:	1b0e030b 	blne	381854 <__Stack_Size+0x381054>
     c24:	1117550e 	tstne	r7, lr, lsl #10
     c28:	00171001 	andseq	r1, r7, r1
     c2c:	00240200 	eoreq	r0, r4, r0, lsl #4
     c30:	0b3e0b0b 	bleq	f83864 <__Stack_Size+0xf83064>
     c34:	00000e03 	andeq	r0, r0, r3, lsl #28
     c38:	03001603 	movweq	r1, #1539	; 0x603
     c3c:	3b0b3a0e 	blcc	2cf47c <__Stack_Size+0x2cec7c>
     c40:	0013490b 	andseq	r4, r3, fp, lsl #18
     c44:	00240400 	eoreq	r0, r4, r0, lsl #8
     c48:	0b3e0b0b 	bleq	f8387c <__Stack_Size+0xf8307c>
     c4c:	00000803 	andeq	r0, r0, r3, lsl #16
     c50:	03001605 	movweq	r1, #1541	; 0x605
     c54:	3b0b3a08 	blcc	2cf47c <__Stack_Size+0x2cec7c>
     c58:	0013490b 	andseq	r4, r3, fp, lsl #18
     c5c:	01040600 	tsteq	r4, r0, lsl #12
     c60:	0b3a0b0b 	bleq	e83894 <__Stack_Size+0xe83094>
     c64:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     c68:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
     c6c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     c70:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     c74:	0b0b000f 	bleq	2c0cb8 <__Stack_Size+0x2c04b8>
     c78:	0f090000 	svceq	0x00090000
     c7c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     c80:	0a000013 	beq	cd4 <__Stack_Size+0x4d4>
     c84:	13490026 	movtne	r0, #36902	; 0x9026
     c88:	130b0000 	movwne	r0, #45056	; 0xb000
     c8c:	0b0e0301 	bleq	381898 <__Stack_Size+0x381098>
     c90:	3b0b3a0b 	blcc	2cf4c4 <__Stack_Size+0x2cecc4>
     c94:	0013010b 	andseq	r0, r3, fp, lsl #2
     c98:	000d0c00 	andeq	r0, sp, r0, lsl #24
     c9c:	0b3a0e03 	bleq	e844b0 <__Stack_Size+0xe83cb0>
     ca0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ca4:	00000b38 	andeq	r0, r0, r8, lsr fp
     ca8:	2701150d 	strcs	r1, [r1, -sp, lsl #10]
     cac:	01134919 	tsteq	r3, r9, lsl r9
     cb0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     cb4:	13490005 	movtne	r0, #36869	; 0x9005
     cb8:	130f0000 	movwne	r0, #61440	; 0xf000
     cbc:	0b080301 	bleq	2018c8 <__Stack_Size+0x2010c8>
     cc0:	3b0b3a0b 	blcc	2cf4f4 <__Stack_Size+0x2cecf4>
     cc4:	0013010b 	andseq	r0, r3, fp, lsl #2
     cc8:	000d1000 	andeq	r1, sp, r0
     ccc:	0b3a0803 	bleq	e82ce0 <__Stack_Size+0xe824e0>
     cd0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     cd4:	00000b38 	andeq	r0, r0, r8, lsr fp
     cd8:	0b011711 	bleq	46924 <__Stack_Size+0x46124>
     cdc:	3b0b3a0b 	blcc	2cf510 <__Stack_Size+0x2ced10>
     ce0:	0013010b 	andseq	r0, r3, fp, lsl #2
     ce4:	000d1200 	andeq	r1, sp, r0, lsl #4
     ce8:	0b3a0803 	bleq	e82cfc <__Stack_Size+0xe824fc>
     cec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     cf0:	04130000 	ldreq	r0, [r3], #-0
     cf4:	0b0e0301 	bleq	381900 <__Stack_Size+0x381100>
     cf8:	3b0b3a0b 	blcc	2cf52c <__Stack_Size+0x2ced2c>
     cfc:	0013010b 	andseq	r0, r3, fp, lsl #2
     d00:	00281400 	eoreq	r1, r8, r0, lsl #8
     d04:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     d08:	13150000 	tstne	r5, #0
     d0c:	3a0b0b01 	bcc	2c3918 <__Stack_Size+0x2c3118>
     d10:	010b3b0b 	tsteq	fp, fp, lsl #22
     d14:	16000013 			; <UNDEFINED> instruction: 0x16000013
     d18:	13490101 	movtne	r0, #37121	; 0x9101
     d1c:	00001301 	andeq	r1, r0, r1, lsl #6
     d20:	49002117 	stmdbmi	r0, {r0, r1, r2, r4, r8, sp}
     d24:	000b2f13 	andeq	r2, fp, r3, lsl pc
     d28:	00211800 	eoreq	r1, r1, r0, lsl #16
     d2c:	00001349 	andeq	r1, r0, r9, asr #6
     d30:	3f012e19 	svccc	0x00012e19
     d34:	3a0e0319 	bcc	3819a0 <__Stack_Size+0x3811a0>
     d38:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     d3c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     d40:	97184006 	ldrls	r4, [r8, -r6]
     d44:	13011942 	movwne	r1, #6466	; 0x1942
     d48:	891a0000 	ldmdbhi	sl, {}	; <UNPREDICTABLE>
     d4c:	11010182 	smlabbne	r1, r2, r1, r0
     d50:	01133101 	tsteq	r3, r1, lsl #2
     d54:	1b000013 	blne	da8 <__Stack_Size+0x5a8>
     d58:	0001828a 	andeq	r8, r1, sl, lsl #5
     d5c:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     d60:	1c000018 	stcne	0, cr0, [r0], {24}
     d64:	01018289 	smlabbeq	r1, r9, r2, r8
     d68:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     d6c:	00133119 	andseq	r3, r3, r9, lsl r1
     d70:	012e1d00 	teqeq	lr, r0, lsl #26
     d74:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     d78:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     d7c:	0b201927 	bleq	807220 <__Stack_Size+0x806a20>
     d80:	00001301 	andeq	r1, r0, r1, lsl #6
     d84:	0300341e 	movweq	r3, #1054	; 0x41e
     d88:	3b0b3a08 	blcc	2cf5b0 <__Stack_Size+0x2cedb0>
     d8c:	00134905 	andseq	r4, r3, r5, lsl #18
     d90:	00341f00 	eorseq	r1, r4, r0, lsl #30
     d94:	0b3a0e03 	bleq	e845a8 <__Stack_Size+0xe83da8>
     d98:	1349053b 	movtne	r0, #38203	; 0x953b
     d9c:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     da0:	03193f01 	tsteq	r9, #1, 30
     da4:	3b0b3a0e 	blcc	2cf5e4 <__Stack_Size+0x2cede4>
     da8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     dac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     db0:	97184006 	ldrls	r4, [r8, -r6]
     db4:	13011942 	movwne	r1, #6466	; 0x1942
     db8:	34210000 	strtcc	r0, [r1], #-0
     dbc:	3a0e0300 	bcc	3819c4 <__Stack_Size+0x3811c4>
     dc0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     dc4:	00170213 	andseq	r0, r7, r3, lsl r2
     dc8:	011d2200 	tsteq	sp, r0, lsl #4
     dcc:	01521331 	cmpeq	r2, r1, lsr r3
     dd0:	0b581755 	bleq	1606b2c <__Stack_Size+0x160632c>
     dd4:	13010b59 	movwne	r0, #7001	; 0x1b59
     dd8:	0b230000 	bleq	8c0de0 <__Stack_Size+0x8c05e0>
     ddc:	00175501 	andseq	r5, r7, r1, lsl #10
     de0:	00342400 	eorseq	r2, r4, r0, lsl #8
     de4:	17021331 	smladxne	r2, r1, r3, r1
     de8:	34250000 	strtcc	r0, [r5], #-0
     dec:	00133100 	andseq	r3, r3, r0, lsl #2
     df0:	82892600 	addhi	r2, r9, #0, 12
     df4:	01110101 	tsteq	r1, r1, lsl #2
     df8:	00001331 	andeq	r1, r0, r1, lsr r3
     dfc:	55010b27 	strpl	r0, [r1, #-2855]	; 0xb27
     e00:	00130117 	andseq	r0, r3, r7, lsl r1
     e04:	00342800 	eorseq	r2, r4, r0, lsl #16
     e08:	0b3a0e03 	bleq	e8461c <__Stack_Size+0xe83e1c>
     e0c:	1349053b 	movtne	r0, #38203	; 0x953b
     e10:	00001802 	andeq	r1, r0, r2, lsl #16
     e14:	03003429 	movweq	r3, #1065	; 0x429
     e18:	3b0b3a08 	blcc	2cf640 <__Stack_Size+0x2cee40>
     e1c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     e20:	2a000017 	bcs	e84 <__Stack_Size+0x684>
     e24:	00018289 	andeq	r8, r1, r9, lsl #5
     e28:	13310111 	teqne	r1, #1073741828	; 0x40000004
     e2c:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
     e30:	03193f01 	tsteq	r9, #1, 30
     e34:	3b0b3a0e 	blcc	2cf674 <__Stack_Size+0x2cee74>
     e38:	11192705 	tstne	r9, r5, lsl #14
     e3c:	40061201 	andmi	r1, r6, r1, lsl #4
     e40:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     e44:	00001301 	andeq	r1, r0, r1, lsl #6
     e48:	0300342c 	movweq	r3, #1068	; 0x42c
     e4c:	3b0b3a0e 	blcc	2cf68c <__Stack_Size+0x2cee8c>
     e50:	02134905 	andseq	r4, r3, #81920	; 0x14000
     e54:	2d000017 	stccs	0, cr0, [r0, #-92]	; 0xffffffa4
     e58:	00018289 	andeq	r8, r1, r9, lsl #5
     e5c:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     e60:	00133119 	andseq	r3, r3, r9, lsl r1
     e64:	002e2e00 	eoreq	r2, lr, r0, lsl #28
     e68:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e6c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e70:	01111927 	tsteq	r1, r7, lsr #18
     e74:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     e78:	00194297 	mulseq	r9, r7, r2
     e7c:	012e2f00 	teqeq	lr, r0, lsl #30
     e80:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e84:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e88:	13491927 	movtne	r1, #39207	; 0x9927
     e8c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e90:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     e94:	00130119 	andseq	r0, r3, r9, lsl r1
     e98:	00053000 	andeq	r3, r5, r0
     e9c:	0b3a0e03 	bleq	e846b0 <__Stack_Size+0xe83eb0>
     ea0:	1349053b 	movtne	r0, #38203	; 0x953b
     ea4:	00001702 	andeq	r1, r0, r2, lsl #14
     ea8:	31012e31 	tstcc	r1, r1, lsr lr
     eac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     eb0:	97184006 	ldrls	r4, [r8, -r6]
     eb4:	13011942 	movwne	r1, #6466	; 0x1942
     eb8:	2e320000 	cdpcs	0, 3, cr0, cr2, cr0, {0}
     ebc:	03193f00 	tsteq	r9, #0, 30
     ec0:	3b0b3a0e 	blcc	2cf700 <__Stack_Size+0x2cef00>
     ec4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     ec8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     ecc:	97184006 	ldrls	r4, [r8, -r6]
     ed0:	00001942 	andeq	r1, r0, r2, asr #18
     ed4:	03000533 	movweq	r0, #1331	; 0x533
     ed8:	3b0b3a0e 	blcc	2cf718 <__Stack_Size+0x2cef18>
     edc:	02134905 	andseq	r4, r3, #81920	; 0x14000
     ee0:	34000018 	strcc	r0, [r0], #-24
     ee4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     ee8:	0b3a0e03 	bleq	e846fc <__Stack_Size+0xe83efc>
     eec:	1349053b 	movtne	r0, #38203	; 0x953b
     ef0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ef4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     ef8:	35000019 	strcc	r0, [r0, #-25]
     efc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     f00:	0b3a0e03 	bleq	e84714 <__Stack_Size+0xe83f14>
     f04:	0111053b 	tsteq	r1, fp, lsr r5
     f08:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f0c:	00194297 	mulseq	r9, r7, r2
     f10:	00343600 	eorseq	r3, r4, r0, lsl #12
     f14:	0b3a0e03 	bleq	e84728 <__Stack_Size+0xe83f28>
     f18:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f1c:	00001802 	andeq	r1, r0, r2, lsl #16
     f20:	49003537 	stmdbmi	r0, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
     f24:	38000013 	stmdacc	r0, {r0, r1, r4}
     f28:	13490021 	movtne	r0, #36897	; 0x9021
     f2c:	0000052f 	andeq	r0, r0, pc, lsr #10
     f30:	03003439 	movweq	r3, #1081	; 0x439
     f34:	3b0b3a0e 	blcc	2cf774 <__Stack_Size+0x2cef74>
     f38:	3f13490b 	svccc	0x0013490b
     f3c:	00193c19 	andseq	r3, r9, r9, lsl ip
     f40:	00343a00 	eorseq	r3, r4, r0, lsl #20
     f44:	0b3a0e03 	bleq	e84758 <__Stack_Size+0xe83f58>
     f48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f4c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     f50:	343b0000 	ldrtcc	r0, [fp], #-0
     f54:	3a080300 	bcc	201b5c <__Stack_Size+0x20135c>
     f58:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f5c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     f60:	3c000018 	stccc	0, cr0, [r0], {24}
     f64:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     f68:	0b3a0e03 	bleq	e8477c <__Stack_Size+0xe83f7c>
     f6c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     f70:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     f74:	00001301 	andeq	r1, r0, r1, lsl #6
     f78:	3f012e3d 	svccc	0x00012e3d
     f7c:	3a0e0319 	bcc	381be8 <__Stack_Size+0x3813e8>
     f80:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f84:	01193c19 	tsteq	r9, r9, lsl ip
     f88:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
     f8c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     f90:	0b3a0e03 	bleq	e847a4 <__Stack_Size+0xe83fa4>
     f94:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     f98:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     f9c:	00001301 	andeq	r1, r0, r1, lsl #6
     fa0:	3f002e3f 	svccc	0x00002e3f
     fa4:	3a0e0319 	bcc	381c10 <__Stack_Size+0x381410>
     fa8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     fac:	00193c19 	andseq	r3, r9, r9, lsl ip
     fb0:	012e4000 	teqeq	lr, r0
     fb4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     fb8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     fbc:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     fc0:	00001301 	andeq	r1, r0, r1, lsl #6
     fc4:	00001841 	andeq	r1, r0, r1, asr #16
     fc8:	002e4200 	eoreq	r4, lr, r0, lsl #4
     fcc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     fd0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     fd4:	13491927 	movtne	r1, #39207	; 0x9927
     fd8:	0000193c 	andeq	r1, r0, ip, lsr r9
     fdc:	3f002e43 	svccc	0x00002e43
     fe0:	3a0e0319 	bcc	381c4c <__Stack_Size+0x38144c>
     fe4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     fe8:	00193c19 	andseq	r3, r9, r9, lsl ip
     fec:	11010000 	mrsne	r0, (UNDEF: 1)
     ff0:	130e2501 	movwne	r2, #58625	; 0xe501
     ff4:	1b0e030b 	blne	381c28 <__Stack_Size+0x381428>
     ff8:	1117550e 	tstne	r7, lr, lsl #10
     ffc:	00171001 	andseq	r1, r7, r1
    1000:	00240200 	eoreq	r0, r4, r0, lsl #4
    1004:	0b3e0b0b 	bleq	f83c38 <__Stack_Size+0xf83438>
    1008:	00000e03 	andeq	r0, r0, r3, lsl #28
    100c:	03001603 	movweq	r1, #1539	; 0x603
    1010:	3b0b3a0e 	blcc	2cf850 <__Stack_Size+0x2cf050>
    1014:	0013490b 	andseq	r4, r3, fp, lsl #18
    1018:	00240400 	eoreq	r0, r4, r0, lsl #8
    101c:	0b3e0b0b 	bleq	f83c50 <__Stack_Size+0xf83450>
    1020:	00000803 	andeq	r0, r0, r3, lsl #16
    1024:	03012e05 	movweq	r2, #7685	; 0x1e05
    1028:	3b0b3a0e 	blcc	2cf868 <__Stack_Size+0x2cf068>
    102c:	2019270b 	andscs	r2, r9, fp, lsl #14
    1030:	0013010b 	andseq	r0, r3, fp, lsl #2
    1034:	00050600 	andeq	r0, r5, r0, lsl #12
    1038:	0b3a0803 	bleq	e8304c <__Stack_Size+0xe8284c>
    103c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1040:	0f070000 	svceq	0x00070000
    1044:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1048:	08000013 	stmdaeq	r0, {r0, r1, r4}
    104c:	13490026 	movtne	r0, #36902	; 0x9026
    1050:	34090000 	strcc	r0, [r9], #-0
    1054:	3a080300 	bcc	201c5c <__Stack_Size+0x20145c>
    1058:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    105c:	0a000013 	beq	10b0 <__Stack_Size+0x8b0>
    1060:	13490101 	movtne	r0, #37121	; 0x9101
    1064:	00001301 	andeq	r1, r0, r1, lsl #6
    1068:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
    106c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1070:	00340c00 	eorseq	r0, r4, r0, lsl #24
    1074:	0b3a0e03 	bleq	e84888 <__Stack_Size+0xe84088>
    1078:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    107c:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    1080:	03193f01 	tsteq	r9, #1, 30
    1084:	3b0b3a0e 	blcc	2cf8c4 <__Stack_Size+0x2cf0c4>
    1088:	1119270b 	tstne	r9, fp, lsl #14
    108c:	40061201 	andmi	r1, r6, r1, lsl #4
    1090:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1094:	00001301 	andeq	r1, r0, r1, lsl #6
    1098:	0300050e 	movweq	r0, #1294	; 0x50e
    109c:	3b0b3a0e 	blcc	2cf8dc <__Stack_Size+0x2cf0dc>
    10a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    10a4:	0f000017 	svceq	0x00000017
    10a8:	08030005 	stmdaeq	r3, {r0, r2}
    10ac:	0b3b0b3a 	bleq	ec3d9c <__Stack_Size+0xec359c>
    10b0:	17021349 	strne	r1, [r2, -r9, asr #6]
    10b4:	34100000 	ldrcc	r0, [r0], #-0
    10b8:	3a080300 	bcc	201cc0 <__Stack_Size+0x2014c0>
    10bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10c0:	00180213 	andseq	r0, r8, r3, lsl r2
    10c4:	00341100 	eorseq	r1, r4, r0, lsl #2
    10c8:	0b3a0803 	bleq	e830dc <__Stack_Size+0xe828dc>
    10cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10d0:	00001702 	andeq	r1, r0, r2, lsl #14
    10d4:	31011d12 	tstcc	r1, r2, lsl sp
    10d8:	55015213 	strpl	r5, [r1, #-531]	; 0x213
    10dc:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    10e0:	0013010b 	andseq	r0, r3, fp, lsl #2
    10e4:	00051300 	andeq	r1, r5, r0, lsl #6
    10e8:	17021331 	smladxne	r2, r1, r3, r1
    10ec:	0b140000 	bleq	5010f4 <__Stack_Size+0x5008f4>
    10f0:	01175501 	tsteq	r7, r1, lsl #10
    10f4:	15000013 	strne	r0, [r0, #-19]
    10f8:	13310005 	teqne	r1, #5
    10fc:	0b160000 	bleq	581104 <__Stack_Size+0x580904>
    1100:	00175501 	andseq	r5, r7, r1, lsl #10
    1104:	00341700 	eorseq	r1, r4, r0, lsl #14
    1108:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    110c:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
    1110:	11010182 	smlabbne	r1, r2, r1, r0
    1114:	01133101 	tsteq	r3, r1, lsl #2
    1118:	19000013 	stmdbne	r0, {r0, r1, r4}
    111c:	0001828a 	andeq	r8, r1, sl, lsl #5
    1120:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    1124:	1a000018 	bne	118c <__Stack_Size+0x98c>
    1128:	01018289 	smlabbeq	r1, r9, r2, r8
    112c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1130:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
    1134:	11133101 	tstne	r3, r1, lsl #2
    1138:	58061201 	stmdapl	r6, {r0, r9, ip}
    113c:	010b590b 	tsteq	fp, fp, lsl #18
    1140:	1c000013 	stcne	0, cr0, [r0], {19}
    1144:	0111010b 	tsteq	r1, fp, lsl #2
    1148:	00000612 	andeq	r0, r0, r2, lsl r6
    114c:	0300341d 	movweq	r3, #1053	; 0x41d
    1150:	3b0b3a0e 	blcc	2cf990 <__Stack_Size+0x2cf190>
    1154:	3f13490b 	svccc	0x0013490b
    1158:	00193c19 	andseq	r3, r9, r9, lsl ip
    115c:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1160:	0b3a0e03 	bleq	e84974 <__Stack_Size+0xe84174>
    1164:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1168:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    116c:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    1170:	03193f01 	tsteq	r9, #1, 30
    1174:	3b0b3a0e 	blcc	2cf9b4 <__Stack_Size+0x2cf1b4>
    1178:	3c19270b 	ldccc	7, cr2, [r9], {11}
    117c:	00130119 	andseq	r0, r3, r9, lsl r1
    1180:	00052000 	andeq	r2, r5, r0
    1184:	00001349 	andeq	r1, r0, r9, asr #6
    1188:	3f012e21 	svccc	0x00012e21
    118c:	3a0e0319 	bcc	381df8 <__Stack_Size+0x3815f8>
    1190:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1194:	00193c19 	andseq	r3, r9, r9, lsl ip
    1198:	11010000 	mrsne	r0, (UNDEF: 1)
    119c:	130e2501 	movwne	r2, #58625	; 0xe501
    11a0:	1b0e030b 	blne	381dd4 <__Stack_Size+0x3815d4>
    11a4:	1117550e 	tstne	r7, lr, lsl #10
    11a8:	00171001 	andseq	r1, r7, r1
    11ac:	00240200 	eoreq	r0, r4, r0, lsl #4
    11b0:	0b3e0b0b 	bleq	f83de4 <__Stack_Size+0xf835e4>
    11b4:	00000e03 	andeq	r0, r0, r3, lsl #28
    11b8:	03001603 	movweq	r1, #1539	; 0x603
    11bc:	3b0b3a0e 	blcc	2cf9fc <__Stack_Size+0x2cf1fc>
    11c0:	0013490b 	andseq	r4, r3, fp, lsl #18
    11c4:	00240400 	eoreq	r0, r4, r0, lsl #8
    11c8:	0b3e0b0b 	bleq	f83dfc <__Stack_Size+0xf835fc>
    11cc:	00000803 	andeq	r0, r0, r3, lsl #16
    11d0:	0b000f05 	bleq	4dec <__Stack_Size+0x45ec>
    11d4:	0600000b 	streq	r0, [r0], -fp
    11d8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    11dc:	0b3a0b0b 	bleq	e83e10 <__Stack_Size+0xe83610>
    11e0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    11e4:	0d070000 	stceq	0, cr0, [r7, #-0]
    11e8:	3a080300 	bcc	201df0 <__Stack_Size+0x2015f0>
    11ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    11f0:	000b3813 	andeq	r3, fp, r3, lsl r8
    11f4:	01010800 	tsteq	r1, r0, lsl #16
    11f8:	13011349 	movwne	r1, #4937	; 0x1349
    11fc:	21090000 	mrscs	r0, (UNDEF: 9)
    1200:	2f134900 	svccs	0x00134900
    1204:	0a00000b 	beq	1238 <__Stack_Size+0xa38>
    1208:	0e03012e 	adfeqsp	f0, f3, #0.5
    120c:	0b3b0b3a 	bleq	ec3efc <__Stack_Size+0xec36fc>
    1210:	0b201927 	bleq	8076b4 <__Stack_Size+0x806eb4>
    1214:	00001301 	andeq	r1, r0, r1, lsl #6
    1218:	0300050b 	movweq	r0, #1291	; 0x50b
    121c:	3b0b3a08 	blcc	2cfa44 <__Stack_Size+0x2cf244>
    1220:	0013490b 	andseq	r4, r3, fp, lsl #18
    1224:	000f0c00 	andeq	r0, pc, r0, lsl #24
    1228:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    122c:	260d0000 	strcs	r0, [sp], -r0
    1230:	00134900 	andseq	r4, r3, r0, lsl #18
    1234:	012e0e00 	teqeq	lr, r0, lsl #28
    1238:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    123c:	0b3b0b3a 	bleq	ec3f2c <__Stack_Size+0xec372c>
    1240:	01111927 	tsteq	r1, r7, lsr #18
    1244:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1248:	01194297 			; <UNDEFINED> instruction: 0x01194297
    124c:	0f000013 	svceq	0x00000013
    1250:	08030005 	stmdaeq	r3, {r0, r2}
    1254:	0b3b0b3a 	bleq	ec3f44 <__Stack_Size+0xec3744>
    1258:	17021349 	strne	r1, [r2, -r9, asr #6]
    125c:	1d100000 	ldcne	0, cr0, [r0, #-0]
    1260:	11133101 	tstne	r3, r1, lsl #2
    1264:	58061201 	stmdapl	r6, {r0, r9, ip}
    1268:	010b590b 	tsteq	fp, fp, lsl #18
    126c:	11000013 	tstne	r0, r3, lsl r0
    1270:	13310005 	teqne	r1, #5
    1274:	00001702 	andeq	r1, r0, r2, lsl #14
    1278:	31011d12 	tstcc	r1, r2, lsl sp
    127c:	55015213 	strpl	r5, [r1, #-531]	; 0x213
    1280:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    1284:	0013010b 	andseq	r0, r3, fp, lsl #2
    1288:	00051300 	andeq	r1, r5, r0, lsl #6
    128c:	00001331 	andeq	r1, r0, r1, lsr r3
    1290:	01828914 	orreq	r8, r2, r4, lsl r9
    1294:	31011101 	tstcc	r1, r1, lsl #2
    1298:	00130113 	andseq	r0, r3, r3, lsl r1
    129c:	828a1500 	addhi	r1, sl, #0, 10
    12a0:	18020001 	stmdane	r2, {r0}
    12a4:	00184291 	mulseq	r8, r1, r2
    12a8:	82891600 	addhi	r1, r9, #0, 12
    12ac:	01110101 	tsteq	r1, r1, lsl #2
    12b0:	31194295 			; <UNDEFINED> instruction: 0x31194295
    12b4:	17000013 	smladne	r0, r3, r0, r0
    12b8:	08030034 	stmdaeq	r3, {r2, r4, r5}
    12bc:	0b3b0b3a 	bleq	ec3fac <__Stack_Size+0xec37ac>
    12c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    12c4:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
    12c8:	11010182 	smlabbne	r1, r2, r1, r0
    12cc:	00133101 	andseq	r3, r3, r1, lsl #2
    12d0:	00341900 	eorseq	r1, r4, r0, lsl #18
    12d4:	0b3a0e03 	bleq	e84ae8 <__Stack_Size+0xe842e8>
    12d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    12dc:	00001702 	andeq	r1, r0, r2, lsl #14
    12e0:	3100051a 	tstcc	r0, sl, lsl r5
    12e4:	00180213 	andseq	r0, r8, r3, lsl r2
    12e8:	012e1b00 	teqeq	lr, r0, lsl #22
    12ec:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    12f0:	0b3b0b3a 	bleq	ec3fe0 <__Stack_Size+0xec37e0>
    12f4:	13491927 	movtne	r1, #39207	; 0x9927
    12f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    12fc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1300:	00130119 	andseq	r0, r3, r9, lsl r1
    1304:	00051c00 	andeq	r1, r5, r0, lsl #24
    1308:	0b3a0e03 	bleq	e84b1c <__Stack_Size+0xe8431c>
    130c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1310:	00001702 	andeq	r1, r0, r2, lsl #14
    1314:	0300341d 	movweq	r3, #1053	; 0x41d
    1318:	3b0b3a08 	blcc	2cfb40 <__Stack_Size+0x2cf340>
    131c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1320:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
    1324:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1328:	0b3a0e03 	bleq	e84b3c <__Stack_Size+0xe8433c>
    132c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1330:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1334:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1338:	00130119 	andseq	r0, r3, r9, lsl r1
    133c:	00051f00 	andeq	r1, r5, r0, lsl #30
    1340:	0b3a0e03 	bleq	e84b54 <__Stack_Size+0xe84354>
    1344:	1349053b 	movtne	r0, #38203	; 0x953b
    1348:	00001702 	andeq	r1, r0, r2, lsl #14
    134c:	03000520 	movweq	r0, #1312	; 0x520
    1350:	3b0b3a08 	blcc	2cfb78 <__Stack_Size+0x2cf378>
    1354:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1358:	21000017 	tstcs	r0, r7, lsl r0
    135c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1360:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1364:	17021349 	strne	r1, [r2, -r9, asr #6]
    1368:	1d220000 	stcne	0, cr0, [r2, #-0]
    136c:	11133101 	tstne	r3, r1, lsl #2
    1370:	58061201 	stmdapl	r6, {r0, r9, ip}
    1374:	0105590b 	tsteq	r5, fp, lsl #18
    1378:	23000013 	movwcs	r0, #19
    137c:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    1380:	00001301 	andeq	r1, r0, r1, lsl #6
    1384:	31011d24 	tstcc	r1, r4, lsr #26
    1388:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    138c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1390:	25000005 	strcs	r0, [r0, #-5]
    1394:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1398:	0b3b0b3a 	bleq	ec4088 <__Stack_Size+0xec3888>
    139c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    13a0:	34260000 	strtcc	r0, [r6], #-0
    13a4:	3a0e0300 	bcc	381fac <__Stack_Size+0x3817ac>
    13a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13ac:	3c193f13 	ldccc	15, cr3, [r9], {19}
    13b0:	27000019 	smladcs	r0, r9, r0, r0
    13b4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    13b8:	0b3b0b3a 	bleq	ec40a8 <__Stack_Size+0xec38a8>
    13bc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    13c0:	00001802 	andeq	r1, r0, r2, lsl #16
    13c4:	3f012e28 	svccc	0x00012e28
    13c8:	3a0e0319 	bcc	382034 <__Stack_Size+0x381834>
    13cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    13d0:	01193c19 	tsteq	r9, r9, lsl ip
    13d4:	29000013 	stmdbcs	r0, {r0, r1, r4}
    13d8:	13490005 	movtne	r0, #36869	; 0x9005
    13dc:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
    13e0:	03193f01 	tsteq	r9, #1, 30
    13e4:	3b0b3a0e 	blcc	2cfc24 <__Stack_Size+0x2cf424>
    13e8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    13ec:	01193c13 	tsteq	r9, r3, lsl ip
    13f0:	2b000013 	blcs	1444 <__Stack_Size+0xc44>
    13f4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    13f8:	19270e03 	stmdbne	r7!, {r0, r1, r9, sl, fp}
    13fc:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
    1400:	1301193c 	movwne	r1, #6460	; 0x193c
    1404:	262c0000 	strtcs	r0, [ip], -r0
    1408:	00000000 	andeq	r0, r0, r0
    140c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    1410:	030b130e 	movweq	r1, #45838	; 0xb30e
    1414:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    1418:	10011117 	andne	r1, r1, r7, lsl r1
    141c:	02000017 	andeq	r0, r0, #23
    1420:	0b0b0024 	bleq	2c14b8 <__Stack_Size+0x2c0cb8>
    1424:	0e030b3e 	vmoveq.16	d3[0], r0
    1428:	16030000 	strne	r0, [r3], -r0
    142c:	3a0e0300 	bcc	382034 <__Stack_Size+0x381834>
    1430:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1434:	04000013 	streq	r0, [r0], #-19
    1438:	0b0b0024 	bleq	2c14d0 <__Stack_Size+0x2c0cd0>
    143c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1440:	0f050000 	svceq	0x00050000
    1444:	000b0b00 	andeq	r0, fp, r0, lsl #22
    1448:	01130600 	tsteq	r3, r0, lsl #12
    144c:	0b0b0e03 	bleq	2c4c60 <__Stack_Size+0x2c4460>
    1450:	0b3b0b3a 	bleq	ec4140 <__Stack_Size+0xec3940>
    1454:	00001301 	andeq	r1, r0, r1, lsl #6
    1458:	03000d07 	movweq	r0, #3335	; 0xd07
    145c:	3b0b3a08 	blcc	2cfc84 <__Stack_Size+0x2cf484>
    1460:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1464:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1468:	13490101 	movtne	r0, #37121	; 0x9101
    146c:	00001301 	andeq	r1, r0, r1, lsl #6
    1470:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    1474:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1478:	012e0a00 	teqeq	lr, r0, lsl #20
    147c:	0b3a0e03 	bleq	e84c90 <__Stack_Size+0xe84490>
    1480:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1484:	13010b20 	movwne	r0, #6944	; 0x1b20
    1488:	050b0000 	streq	r0, [fp, #-0]
    148c:	3a080300 	bcc	202094 <__Stack_Size+0x201894>
    1490:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1494:	0c000013 	stceq	0, cr0, [r0], {19}
    1498:	0b0b000f 	bleq	2c14dc <__Stack_Size+0x2c0cdc>
    149c:	00001349 	andeq	r1, r0, r9, asr #6
    14a0:	0300050d 	movweq	r0, #1293	; 0x50d
    14a4:	3b0b3a0e 	blcc	2cfce4 <__Stack_Size+0x2cf4e4>
    14a8:	0013490b 	andseq	r4, r3, fp, lsl #18
    14ac:	00340e00 	eorseq	r0, r4, r0, lsl #28
    14b0:	0b3a0803 	bleq	e834c4 <__Stack_Size+0xe82cc4>
    14b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    14b8:	0b0f0000 	bleq	3c14c0 <__Stack_Size+0x3c0cc0>
    14bc:	10000001 	andne	r0, r0, r1
    14c0:	13490026 	movtne	r0, #36902	; 0x9026
    14c4:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    14c8:	3a080301 	bcc	2020d4 <__Stack_Size+0x2018d4>
    14cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    14d0:	010b2019 	tsteq	fp, r9, lsl r0
    14d4:	12000013 	andne	r0, r0, #19
    14d8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    14dc:	0b3a0e03 	bleq	e84cf0 <__Stack_Size+0xe844f0>
    14e0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    14e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    14e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    14ec:	00130119 	andseq	r0, r3, r9, lsl r1
    14f0:	00051300 	andeq	r1, r5, r0, lsl #6
    14f4:	0b3a0803 	bleq	e83508 <__Stack_Size+0xe82d08>
    14f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    14fc:	00001702 	andeq	r1, r0, r2, lsl #14
    1500:	03000514 	movweq	r0, #1300	; 0x514
    1504:	3b0b3a0e 	blcc	2cfd44 <__Stack_Size+0x2cf544>
    1508:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    150c:	15000017 	strne	r0, [r0, #-23]
    1510:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1514:	0b3b0b3a 	bleq	ec4204 <__Stack_Size+0xec3a04>
    1518:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    151c:	1d160000 	ldcne	0, cr0, [r6, #-0]
    1520:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1524:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    1528:	010b590b 	tsteq	fp, fp, lsl #18
    152c:	17000013 	smladne	r0, r3, r0, r0
    1530:	13310005 	teqne	r1, #5
    1534:	00001702 	andeq	r1, r0, r2, lsl #14
    1538:	55010b18 	strpl	r0, [r1, #-2840]	; 0xb18
    153c:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    1540:	13310034 	teqne	r1, #52	; 0x34
    1544:	00001802 	andeq	r1, r0, r2, lsl #16
    1548:	0182891a 	orreq	r8, r2, sl, lsl r9
    154c:	31011101 	tstcc	r1, r1, lsl #2
    1550:	00130113 	andseq	r0, r3, r3, lsl r1
    1554:	828a1b00 	addhi	r1, sl, #0, 22
    1558:	18020001 	stmdane	r2, {r0}
    155c:	00184291 	mulseq	r8, r1, r2
    1560:	82891c00 	addhi	r1, r9, #0, 24
    1564:	01110101 	tsteq	r1, r1, lsl #2
    1568:	00001331 	andeq	r1, r0, r1, lsr r3
    156c:	31011d1d 	tstcc	r1, sp, lsl sp
    1570:	55015213 	strpl	r5, [r1, #-531]	; 0x213
    1574:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    1578:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
    157c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1580:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1584:	0b590b58 	bleq	16442ec <__Stack_Size+0x1643aec>
    1588:	00001301 	andeq	r1, r0, r1, lsl #6
    158c:	11010b1f 	tstne	r1, pc, lsl fp
    1590:	00061201 	andeq	r1, r6, r1, lsl #4
    1594:	00342000 	eorseq	r2, r4, r0
    1598:	0b3a0e03 	bleq	e84dac <__Stack_Size+0xe845ac>
    159c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    15a0:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
    15a4:	3a080301 	bcc	2021b0 <__Stack_Size+0x2019b0>
    15a8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    15ac:	20134919 	andscs	r4, r3, r9, lsl r9
    15b0:	0013010b 	andseq	r0, r3, fp, lsl #2
    15b4:	012e2200 	teqeq	lr, r0, lsl #4
    15b8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    15bc:	0b3b0b3a 	bleq	ec42ac <__Stack_Size+0xec3aac>
    15c0:	13491927 	movtne	r1, #39207	; 0x9927
    15c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    15c8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    15cc:	00130119 	andseq	r0, r3, r9, lsl r1
    15d0:	00342300 	eorseq	r2, r4, r0, lsl #6
    15d4:	0b3a0803 	bleq	e835e8 <__Stack_Size+0xe82de8>
    15d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    15dc:	00001802 	andeq	r1, r0, r2, lsl #16
    15e0:	03003424 	movweq	r3, #1060	; 0x424
    15e4:	3b0b3a08 	blcc	2cfe0c <__Stack_Size+0x2cf60c>
    15e8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    15ec:	25000017 	strcs	r0, [r0, #-23]
    15f0:	13310005 	teqne	r1, #5
    15f4:	00000b1c 	andeq	r0, r0, ip, lsl fp
    15f8:	31000526 	tstcc	r0, r6, lsr #10
    15fc:	00180213 	andseq	r0, r8, r3, lsl r2
    1600:	010b2700 	tsteq	fp, r0, lsl #14
    1604:	13011755 	movwne	r1, #5973	; 0x1755
    1608:	34280000 	strtcc	r0, [r8], #-0
    160c:	02133100 	andseq	r3, r3, #0, 2
    1610:	29000017 	stmdbcs	r0, {r0, r1, r2, r4}
    1614:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1618:	0b3b0b3a 	bleq	ec4308 <__Stack_Size+0xec3b08>
    161c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1620:	0000193c 	andeq	r1, r0, ip, lsr r9
    1624:	3f012e2a 	svccc	0x00012e2a
    1628:	3a0e0319 	bcc	382294 <__Stack_Size+0x381a94>
    162c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1630:	01193c19 	tsteq	r9, r9, lsl ip
    1634:	2b000013 	blcs	1688 <__Stack_Size+0xe88>
    1638:	13490005 	movtne	r0, #36869	; 0x9005
    163c:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
    1640:	03193f01 	tsteq	r9, #1, 30
    1644:	4919270e 	ldmdbmi	r9, {r1, r2, r3, r8, r9, sl, sp}
    1648:	3c193413 	cfldrscc	mvf3, [r9], {19}
    164c:	00130119 	andseq	r0, r3, r9, lsl r1
    1650:	00262d00 	eoreq	r2, r6, r0, lsl #26
    1654:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
    1658:	03193f01 	tsteq	r9, #1, 30
    165c:	3b0b3a0e 	blcc	2cfe9c <__Stack_Size+0x2cf69c>
    1660:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1664:	01193c13 	tsteq	r9, r3, lsl ip
    1668:	2f000013 	svccs	0x00000013
    166c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1670:	0b3a0e03 	bleq	e84e84 <__Stack_Size+0xe84684>
    1674:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1678:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    167c:	01000000 	mrseq	r0, (UNDEF: 0)
    1680:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1684:	0e030b13 	vmoveq.32	d3[0], r0
    1688:	17550e1b 	smmlane	r5, fp, lr, r0
    168c:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1690:	24020000 	strcs	r0, [r2], #-0
    1694:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1698:	000e030b 	andeq	r0, lr, fp, lsl #6
    169c:	00160300 	andseq	r0, r6, r0, lsl #6
    16a0:	0b3a0e03 	bleq	e84eb4 <__Stack_Size+0xe846b4>
    16a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    16a8:	24040000 	strcs	r0, [r4], #-0
    16ac:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    16b0:	0008030b 	andeq	r0, r8, fp, lsl #6
    16b4:	000f0500 	andeq	r0, pc, r0, lsl #10
    16b8:	00000b0b 	andeq	r0, r0, fp, lsl #22
    16bc:	3f012e06 	svccc	0x00012e06
    16c0:	3a0e0319 	bcc	38232c <__Stack_Size+0x381b2c>
    16c4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    16c8:	010b2019 	tsteq	fp, r9, lsl r0
    16cc:	07000013 	smladeq	r0, r3, r0, r0
    16d0:	08030005 	stmdaeq	r3, {r0, r2}
    16d4:	0b3b0b3a 	bleq	ec43c4 <__Stack_Size+0xec3bc4>
    16d8:	00001349 	andeq	r1, r0, r9, asr #6
    16dc:	03000508 	movweq	r0, #1288	; 0x508
    16e0:	3b0b3a0e 	blcc	2cff20 <__Stack_Size+0x2cf720>
    16e4:	0013490b 	andseq	r4, r3, fp, lsl #18
    16e8:	00340900 	eorseq	r0, r4, r0, lsl #18
    16ec:	0b3a0e03 	bleq	e84f00 <__Stack_Size+0xe84700>
    16f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    16f4:	340a0000 	strcc	r0, [sl], #-0
    16f8:	3a080300 	bcc	202300 <__Stack_Size+0x201b00>
    16fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1700:	0b000013 	bleq	1754 <__Stack_Size+0xf54>
    1704:	0b0b000f 	bleq	2c1748 <__Stack_Size+0x2c0f48>
    1708:	00001349 	andeq	r1, r0, r9, asr #6
    170c:	4900260c 	stmdbmi	r0, {r2, r3, r9, sl, sp}
    1710:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1714:	0e03012e 	adfeqsp	f0, f3, #0.5
    1718:	0b3b0b3a 	bleq	ec4408 <__Stack_Size+0xec3c08>
    171c:	0b201927 	bleq	807bc0 <__Stack_Size+0x8073c0>
    1720:	00001301 	andeq	r1, r0, r1, lsl #6
    1724:	31012e0e 	tstcc	r1, lr, lsl #28
    1728:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    172c:	97184006 	ldrls	r4, [r8, -r6]
    1730:	13011942 	movwne	r1, #6466	; 0x1942
    1734:	050f0000 	streq	r0, [pc, #-0]	; 173c <__Stack_Size+0xf3c>
    1738:	02133100 	andseq	r3, r3, #0, 2
    173c:	10000017 	andne	r0, r0, r7, lsl r0
    1740:	13310034 	teqne	r1, #52	; 0x34
    1744:	00001702 	andeq	r1, r0, r2, lsl #14
    1748:	01828911 	orreq	r8, r2, r1, lsl r9
    174c:	95011101 	strls	r1, [r1, #-257]	; 0x101
    1750:	13311942 	teqne	r1, #1081344	; 0x108000
    1754:	8a120000 	bhi	48175c <__Stack_Size+0x480f5c>
    1758:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    175c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    1760:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    1764:	03193f01 	tsteq	r9, #1, 30
    1768:	3b0b3a0e 	blcc	2cffa8 <__Stack_Size+0x2cf7a8>
    176c:	1119270b 	tstne	r9, fp, lsl #14
    1770:	40061201 	andmi	r1, r6, r1, lsl #4
    1774:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1778:	00001301 	andeq	r1, r0, r1, lsl #6
    177c:	03000514 	movweq	r0, #1300	; 0x514
    1780:	3b0b3a08 	blcc	2cffa8 <__Stack_Size+0x2cf7a8>
    1784:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1788:	15000018 	strne	r0, [r0, #-24]
    178c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1790:	0b3b0b3a 	bleq	ec4480 <__Stack_Size+0xec3c80>
    1794:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1798:	34160000 	ldrcc	r0, [r6], #-0
    179c:	3a080300 	bcc	2023a4 <__Stack_Size+0x201ba4>
    17a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    17a4:	00170213 	andseq	r0, r7, r3, lsl r2
    17a8:	011d1700 	tsteq	sp, r0, lsl #14
    17ac:	01521331 	cmpeq	r2, r1, lsr r3
    17b0:	0b581755 	bleq	160750c <__Stack_Size+0x1606d0c>
    17b4:	00000b59 	andeq	r0, r0, r9, asr fp
    17b8:	31000518 	tstcc	r0, r8, lsl r5
    17bc:	00180213 	andseq	r0, r8, r3, lsl r2
    17c0:	010b1900 	tsteq	fp, r0, lsl #18
    17c4:	00001755 	andeq	r1, r0, r5, asr r7
    17c8:	3100341a 	tstcc	r0, sl, lsl r4
    17cc:	00180213 	andseq	r0, r8, r3, lsl r2
    17d0:	01011b00 	tsteq	r1, r0, lsl #22
    17d4:	13011349 	movwne	r1, #4937	; 0x1349
    17d8:	211c0000 	tstcs	ip, r0
    17dc:	2f134900 	svccs	0x00134900
    17e0:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    17e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    17e8:	0b3a0e03 	bleq	e84ffc <__Stack_Size+0xe847fc>
    17ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    17f0:	01111349 	tsteq	r1, r9, asr #6
    17f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    17f8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    17fc:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    1800:	08030005 	stmdaeq	r3, {r0, r2}
    1804:	0b3b0b3a 	bleq	ec44f4 <__Stack_Size+0xec3cf4>
    1808:	17021349 	strne	r1, [r2, -r9, asr #6]
    180c:	0b1f0000 	bleq	7c1814 <__Stack_Size+0x7c1014>
    1810:	20000001 	andcs	r0, r0, r1
    1814:	0111010b 	tsteq	r1, fp, lsl #2
    1818:	00000612 	andeq	r0, r0, r2, lsl r6
    181c:	03003421 	movweq	r3, #1057	; 0x421
    1820:	3b0b3a08 	blcc	2d0048 <__Stack_Size+0x2cf848>
    1824:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1828:	22000018 	andcs	r0, r0, #24
    182c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1830:	17550152 			; <UNDEFINED> instruction: 0x17550152
    1834:	0b590b58 	bleq	164459c <__Stack_Size+0x1643d9c>
    1838:	00001301 	andeq	r1, r0, r1, lsl #6
    183c:	31011d23 	tstcc	r1, r3, lsr #26
    1840:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1844:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1848:	2400000b 	strcs	r0, [r0], #-11
    184c:	13310005 	teqne	r1, #5
    1850:	1d250000 	stcne	0, cr0, [r5, #-0]
    1854:	11133101 	tstne	r3, r1, lsl #2
    1858:	58061201 	stmdapl	r6, {r0, r9, ip}
    185c:	010b590b 	tsteq	fp, fp, lsl #18
    1860:	26000013 			; <UNDEFINED> instruction: 0x26000013
    1864:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1868:	06120111 			; <UNDEFINED> instruction: 0x06120111
    186c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    1870:	00001301 	andeq	r1, r0, r1, lsl #6
    1874:	31011d27 	tstcc	r1, r7, lsr #26
    1878:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    187c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1880:	28000005 	stmdacs	r0, {r0, r2}
    1884:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1888:	0b3a0e03 	bleq	e8509c <__Stack_Size+0xe8489c>
    188c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1890:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1894:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1898:	00130119 	andseq	r0, r3, r9, lsl r1
    189c:	00052900 	andeq	r2, r5, r0, lsl #18
    18a0:	0b3a0803 	bleq	e838b4 <__Stack_Size+0xe830b4>
    18a4:	1349053b 	movtne	r0, #38203	; 0x953b
    18a8:	00001702 	andeq	r1, r0, r2, lsl #14
    18ac:	0300342a 	movweq	r3, #1066	; 0x42a
    18b0:	3b0b3a08 	blcc	2d00d8 <__Stack_Size+0x2cf8d8>
    18b4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    18b8:	2b000018 	blcs	1920 <__Stack_Size+0x1120>
    18bc:	01018289 	smlabbeq	r1, r9, r2, r8
    18c0:	13310111 	teqne	r1, #1073741828	; 0x40000004
    18c4:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
    18c8:	3a0e0301 	bcc	3824d4 <__Stack_Size+0x381cd4>
    18cc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    18d0:	010b2019 	tsteq	fp, r9, lsl r0
    18d4:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
    18d8:	08030005 	stmdaeq	r3, {r0, r2}
    18dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    18e0:	00001349 	andeq	r1, r0, r9, asr #6
    18e4:	0300342e 	movweq	r3, #1070	; 0x42e
    18e8:	3b0b3a08 	blcc	2d0110 <__Stack_Size+0x2cf910>
    18ec:	00134905 	andseq	r4, r3, r5, lsl #18
    18f0:	011d2f00 	tsteq	sp, r0, lsl #30
    18f4:	01521331 	cmpeq	r2, r1, lsr r3
    18f8:	0b581755 	bleq	1607654 <__Stack_Size+0x1606e54>
    18fc:	13010559 	movwne	r0, #5465	; 0x1559
    1900:	05300000 	ldreq	r0, [r0, #-0]!
    1904:	1c133100 	ldfnes	f3, [r3], {-0}
    1908:	3100000b 	tstcc	r0, fp
    190c:	13310034 	teqne	r1, #52	; 0x34
    1910:	34320000 	ldrtcc	r0, [r2], #-0
    1914:	3a0e0300 	bcc	38251c <__Stack_Size+0x381d1c>
    1918:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    191c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    1920:	33000018 	movwcc	r0, #24
    1924:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1928:	19270e03 	stmdbne	r7!, {r0, r1, r9, sl, fp}
    192c:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
    1930:	0000193c 	andeq	r1, r0, ip, lsr r9
    1934:	49000534 	stmdbmi	r0, {r2, r4, r5, r8, sl}
    1938:	00000013 	andeq	r0, r0, r3, lsl r0
    193c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    1940:	030b130e 	movweq	r1, #45838	; 0xb30e
    1944:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    1948:	10011117 	andne	r1, r1, r7, lsl r1
    194c:	02000017 	andeq	r0, r0, #23
    1950:	0b0b0024 	bleq	2c19e8 <__Stack_Size+0x2c11e8>
    1954:	0e030b3e 	vmoveq.16	d3[0], r0
    1958:	16030000 	strne	r0, [r3], -r0
    195c:	3a0e0300 	bcc	382564 <__Stack_Size+0x381d64>
    1960:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1964:	04000013 	streq	r0, [r0], #-19
    1968:	0b0b0024 	bleq	2c1a00 <__Stack_Size+0x2c1200>
    196c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1970:	0f050000 	svceq	0x00050000
    1974:	000b0b00 	andeq	r0, fp, r0, lsl #22
    1978:	012e0600 	teqeq	lr, r0, lsl #12
    197c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1980:	0b3b0b3a 	bleq	ec4670 <__Stack_Size+0xec3e70>
    1984:	0b201927 	bleq	807e28 <__Stack_Size+0x807628>
    1988:	00001301 	andeq	r1, r0, r1, lsl #6
    198c:	03000507 	movweq	r0, #1287	; 0x507
    1990:	3b0b3a08 	blcc	2d01b8 <__Stack_Size+0x2cf9b8>
    1994:	0013490b 	andseq	r4, r3, fp, lsl #18
    1998:	00050800 	andeq	r0, r5, r0, lsl #16
    199c:	0b3a0e03 	bleq	e851b0 <__Stack_Size+0xe849b0>
    19a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    19a4:	34090000 	strcc	r0, [r9], #-0
    19a8:	3a0e0300 	bcc	3825b0 <__Stack_Size+0x381db0>
    19ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    19b0:	0a000013 	beq	1a04 <__Stack_Size+0x1204>
    19b4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    19b8:	0b3b0b3a 	bleq	ec46a8 <__Stack_Size+0xec3ea8>
    19bc:	00001349 	andeq	r1, r0, r9, asr #6
    19c0:	0b000f0b 	bleq	55f4 <__Stack_Size+0x4df4>
    19c4:	0013490b 	andseq	r4, r3, fp, lsl #18
    19c8:	00260c00 	eoreq	r0, r6, r0, lsl #24
    19cc:	00001349 	andeq	r1, r0, r9, asr #6
    19d0:	03012e0d 	movweq	r2, #7693	; 0x1e0d
    19d4:	3b0b3a0e 	blcc	2d0214 <__Stack_Size+0x2cfa14>
    19d8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    19dc:	010b2013 	tsteq	fp, r3, lsl r0
    19e0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    19e4:	0e03012e 	adfeqsp	f0, f3, #0.5
    19e8:	0b3b0b3a 	bleq	ec46d8 <__Stack_Size+0xec3ed8>
    19ec:	0b201927 	bleq	807e90 <__Stack_Size+0x807690>
    19f0:	00001301 	andeq	r1, r0, r1, lsl #6
    19f4:	31012e0f 	tstcc	r1, pc, lsl #28
    19f8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    19fc:	97184006 	ldrls	r4, [r8, -r6]
    1a00:	13011942 	movwne	r1, #6466	; 0x1942
    1a04:	05100000 	ldreq	r0, [r0, #-0]
    1a08:	02133100 	andseq	r3, r3, #0, 2
    1a0c:	11000017 	tstne	r0, r7, lsl r0
    1a10:	13310034 	teqne	r1, #52	; 0x34
    1a14:	00001702 	andeq	r1, r0, r2, lsl #14
    1a18:	01828912 	orreq	r8, r2, r2, lsl r9
    1a1c:	95011101 	strls	r1, [r1, #-257]	; 0x101
    1a20:	13311942 	teqne	r1, #1081344	; 0x108000
    1a24:	8a130000 	bhi	4c1a2c <__Stack_Size+0x4c122c>
    1a28:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    1a2c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    1a30:	01140000 	tsteq	r4, r0
    1a34:	01134901 	tsteq	r3, r1, lsl #18
    1a38:	15000013 	strne	r0, [r0, #-19]
    1a3c:	13490021 	movtne	r0, #36897	; 0x9021
    1a40:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1a44:	3f012e16 	svccc	0x00012e16
    1a48:	3a0e0319 	bcc	3826b4 <__Stack_Size+0x381eb4>
    1a4c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1a50:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1a54:	97184006 	ldrls	r4, [r8, -r6]
    1a58:	13011942 	movwne	r1, #6466	; 0x1942
    1a5c:	05170000 	ldreq	r0, [r7, #-0]
    1a60:	3a080300 	bcc	202668 <__Stack_Size+0x201e68>
    1a64:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a68:	00170213 	andseq	r0, r7, r3, lsl r2
    1a6c:	00051800 	andeq	r1, r5, r0, lsl #16
    1a70:	0b3a0e03 	bleq	e85284 <__Stack_Size+0xe84a84>
    1a74:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1a78:	00001702 	andeq	r1, r0, r2, lsl #14
    1a7c:	03003419 	movweq	r3, #1049	; 0x419
    1a80:	3b0b3a0e 	blcc	2d02c0 <__Stack_Size+0x2cfac0>
    1a84:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1a88:	1a000017 	bne	1aec <__Stack_Size+0x12ec>
    1a8c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1a90:	0b3b0b3a 	bleq	ec4780 <__Stack_Size+0xec3f80>
    1a94:	17021349 	strne	r1, [r2, -r9, asr #6]
    1a98:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
    1a9c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1aa0:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    1aa4:	010b590b 	tsteq	fp, fp, lsl #18
    1aa8:	1c000013 	stcne	0, cr0, [r0], {19}
    1aac:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    1ab0:	1d1d0000 	ldcne	0, cr0, [sp, #-0]
    1ab4:	11133101 	tstne	r3, r1, lsl #2
    1ab8:	58061201 	stmdapl	r6, {r0, r9, ip}
    1abc:	010b590b 	tsteq	fp, fp, lsl #18
    1ac0:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    1ac4:	13310005 	teqne	r1, #5
    1ac8:	0b1f0000 	bleq	7c1ad0 <__Stack_Size+0x7c12d0>
    1acc:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    1ad0:	20000006 	andcs	r0, r0, r6
    1ad4:	0111010b 	tsteq	r1, fp, lsl #2
    1ad8:	13010612 	movwne	r0, #5650	; 0x1612
    1adc:	1d210000 	stcne	0, cr0, [r1, #-0]
    1ae0:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1ae4:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    1ae8:	000b590b 	andeq	r5, fp, fp, lsl #18
    1aec:	00342200 	eorseq	r2, r4, r0, lsl #4
    1af0:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    1af4:	1d230000 	stcne	0, cr0, [r3, #-0]
    1af8:	11133101 	tstne	r3, r1, lsl #2
    1afc:	58061201 	stmdapl	r6, {r0, r9, ip}
    1b00:	000b590b 	andeq	r5, fp, fp, lsl #18
    1b04:	82892400 	addhi	r2, r9, #0, 8
    1b08:	01110101 	tsteq	r1, r1, lsl #2
    1b0c:	00001331 	andeq	r1, r0, r1, lsr r3
    1b10:	03003425 	movweq	r3, #1061	; 0x425
    1b14:	3b0b3a08 	blcc	2d033c <__Stack_Size+0x2cfb3c>
    1b18:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1b1c:	26000018 			; <UNDEFINED> instruction: 0x26000018
    1b20:	13310005 	teqne	r1, #5
    1b24:	00001802 	andeq	r1, r0, r2, lsl #16
    1b28:	3f012e27 	svccc	0x00012e27
    1b2c:	3a0e0319 	bcc	382798 <__Stack_Size+0x381f98>
    1b30:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1b34:	11134919 	tstne	r3, r9, lsl r9
    1b38:	40061201 	andmi	r1, r6, r1, lsl #4
    1b3c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1b40:	00001301 	andeq	r1, r0, r1, lsl #6
    1b44:	03000528 	movweq	r0, #1320	; 0x528
    1b48:	3b0b3a08 	blcc	2d0370 <__Stack_Size+0x2cfb70>
    1b4c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1b50:	29000018 	stmdbcs	r0, {r3, r4}
    1b54:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1b58:	0b3b0b3a 	bleq	ec4848 <__Stack_Size+0xec4048>
    1b5c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1b60:	0b2a0000 	bleq	a81b68 <__Stack_Size+0xa81368>
    1b64:	01175501 	tsteq	r7, r1, lsl #10
    1b68:	2b000013 	blcs	1bbc <__Stack_Size+0x13bc>
    1b6c:	01018289 	smlabbeq	r1, r9, r2, r8
    1b70:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1b74:	00001301 	andeq	r1, r0, r1, lsl #6
    1b78:	0300342c 	movweq	r3, #1068	; 0x42c
    1b7c:	3b0b3a0e 	blcc	2d03bc <__Stack_Size+0x2cfbbc>
    1b80:	3f13490b 	svccc	0x0013490b
    1b84:	00180219 	andseq	r0, r8, r9, lsl r2
    1b88:	012e2d00 	teqeq	lr, r0, lsl #26
    1b8c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1b90:	13491927 	movtne	r1, #39207	; 0x9927
    1b94:	193c1934 	ldmdbne	ip!, {r2, r4, r5, r8, fp, ip}
    1b98:	052e0000 	streq	r0, [lr, #-0]!
    1b9c:	00134900 	andseq	r4, r3, r0, lsl #18
    1ba0:	11010000 	mrsne	r0, (UNDEF: 1)
    1ba4:	130e2501 	movwne	r2, #58625	; 0xe501
    1ba8:	1b0e030b 	blne	3827dc <__Stack_Size+0x381fdc>
    1bac:	1117550e 	tstne	r7, lr, lsl #10
    1bb0:	00171001 	andseq	r1, r7, r1
    1bb4:	00240200 	eoreq	r0, r4, r0, lsl #4
    1bb8:	0b3e0b0b 	bleq	f847ec <__Stack_Size+0xf83fec>
    1bbc:	00000e03 	andeq	r0, r0, r3, lsl #28
    1bc0:	03001603 	movweq	r1, #1539	; 0x603
    1bc4:	3b0b3a0e 	blcc	2d0404 <__Stack_Size+0x2cfc04>
    1bc8:	0013490b 	andseq	r4, r3, fp, lsl #18
    1bcc:	00240400 	eoreq	r0, r4, r0, lsl #8
    1bd0:	0b3e0b0b 	bleq	f84804 <__Stack_Size+0xf84004>
    1bd4:	00000803 	andeq	r0, r0, r3, lsl #16
    1bd8:	3f012e05 	svccc	0x00012e05
    1bdc:	3a0e0319 	bcc	382848 <__Stack_Size+0x382048>
    1be0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1be4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1be8:	97184006 	ldrls	r4, [r8, -r6]
    1bec:	13011942 	movwne	r1, #6466	; 0x1942
    1bf0:	05060000 	streq	r0, [r6, #-0]
    1bf4:	3a0e0300 	bcc	3827fc <__Stack_Size+0x381ffc>
    1bf8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1bfc:	00170213 	andseq	r0, r7, r3, lsl r2
    1c00:	00050700 	andeq	r0, r5, r0, lsl #14
    1c04:	0b3a0803 	bleq	e83c18 <__Stack_Size+0xe83418>
    1c08:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1c0c:	00001702 	andeq	r1, r0, r2, lsl #14
    1c10:	03003408 	movweq	r3, #1032	; 0x408
    1c14:	3b0b3a0e 	blcc	2d0454 <__Stack_Size+0x2cfc54>
    1c18:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1c1c:	09000018 	stmdbeq	r0, {r3, r4}
    1c20:	01018289 	smlabbeq	r1, r9, r2, r8
    1c24:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1c28:	00001301 	andeq	r1, r0, r1, lsl #6
    1c2c:	01828a0a 	orreq	r8, r2, sl, lsl #20
    1c30:	91180200 	tstls	r8, r0, lsl #4
    1c34:	00001842 	andeq	r1, r0, r2, asr #16
    1c38:	0182890b 	orreq	r8, r2, fp, lsl #18
    1c3c:	31011101 	tstcc	r1, r1, lsl #2
    1c40:	0c000013 	stceq	0, cr0, [r0], {19}
    1c44:	0b0b000f 	bleq	2c1c88 <__Stack_Size+0x2c1488>
    1c48:	00001349 	andeq	r1, r0, r9, asr #6
    1c4c:	4900260d 	stmdbmi	r0, {r0, r2, r3, r9, sl, sp}
    1c50:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1c54:	13490101 	movtne	r0, #37121	; 0x9101
    1c58:	00001301 	andeq	r1, r0, r1, lsl #6
    1c5c:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
    1c60:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1c64:	012e1000 	teqeq	lr, r0
    1c68:	0b3a0e03 	bleq	e8547c <__Stack_Size+0xe84c7c>
    1c6c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1c70:	13010b20 	movwne	r0, #6944	; 0x1b20
    1c74:	05110000 	ldreq	r0, [r1, #-0]
    1c78:	3a080300 	bcc	202880 <__Stack_Size+0x202080>
    1c7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c80:	12000013 	andne	r0, r0, #19
    1c84:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1c88:	0b3b0b3a 	bleq	ec4978 <__Stack_Size+0xec4178>
    1c8c:	00001349 	andeq	r1, r0, r9, asr #6
    1c90:	03012e13 	movweq	r2, #7699	; 0x1e13
    1c94:	3b0b3a0e 	blcc	2d04d4 <__Stack_Size+0x2cfcd4>
    1c98:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1c9c:	010b2013 	tsteq	fp, r3, lsl r0
    1ca0:	14000013 	strne	r0, [r0], #-19
    1ca4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1ca8:	0b3b0b3a 	bleq	ec4998 <__Stack_Size+0xec4198>
    1cac:	00001349 	andeq	r1, r0, r9, asr #6
    1cb0:	03003415 	movweq	r3, #1045	; 0x415
    1cb4:	3b0b3a08 	blcc	2d04dc <__Stack_Size+0x2cfcdc>
    1cb8:	1c13490b 	ldcne	9, cr4, [r3], {11}
    1cbc:	1600000a 	strne	r0, [r0], -sl
    1cc0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1cc4:	0b3a0e03 	bleq	e854d8 <__Stack_Size+0xe84cd8>
    1cc8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1ccc:	01111349 	tsteq	r1, r9, asr #6
    1cd0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1cd4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1cd8:	17000013 	smladne	r0, r3, r0, r0
    1cdc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1ce0:	17550152 			; <UNDEFINED> instruction: 0x17550152
    1ce4:	0b590b58 	bleq	1644a4c <__Stack_Size+0x164424c>
    1ce8:	00001301 	andeq	r1, r0, r1, lsl #6
    1cec:	31000518 	tstcc	r0, r8, lsl r5
    1cf0:	00170213 	andseq	r0, r7, r3, lsl r2
    1cf4:	010b1900 	tsteq	fp, r0, lsl #18
    1cf8:	00001755 	andeq	r1, r0, r5, asr r7
    1cfc:	3100341a 	tstcc	r0, sl, lsl r4
    1d00:	00180213 	andseq	r0, r8, r3, lsl r2
    1d04:	011d1b00 	tsteq	sp, r0, lsl #22
    1d08:	01111331 	tsteq	r1, r1, lsr r3
    1d0c:	0b580612 	bleq	160355c <__Stack_Size+0x1602d5c>
    1d10:	13010b59 	movwne	r0, #7001	; 0x1b59
    1d14:	0b1c0000 	bleq	701d1c <__Stack_Size+0x70151c>
    1d18:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    1d1c:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    1d20:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1d24:	0b3b0b3a 	bleq	ec4a14 <__Stack_Size+0xec4214>
    1d28:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1d2c:	0000193c 	andeq	r1, r0, ip, lsr r9
    1d30:	3f012e1e 	svccc	0x00012e1e
    1d34:	3a0e0319 	bcc	3829a0 <__Stack_Size+0x3821a0>
    1d38:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1d3c:	01193c19 	tsteq	r9, r9, lsl ip
    1d40:	1f000013 	svcne	0x00000013
    1d44:	13490005 	movtne	r0, #36869	; 0x9005
    1d48:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    1d4c:	03193f01 	tsteq	r9, #1, 30
    1d50:	3b0b3a0e 	blcc	2d0590 <__Stack_Size+0x2cfd90>
    1d54:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1d58:	00193c13 	andseq	r3, r9, r3, lsl ip
    1d5c:	11010000 	mrsne	r0, (UNDEF: 1)
    1d60:	130e2501 	movwne	r2, #58625	; 0xe501
    1d64:	1b0e030b 	blne	382998 <__Stack_Size+0x382198>
    1d68:	1117550e 	tstne	r7, lr, lsl #10
    1d6c:	00171001 	andseq	r1, r7, r1
    1d70:	00240200 	eoreq	r0, r4, r0, lsl #4
    1d74:	0b3e0b0b 	bleq	f849a8 <__Stack_Size+0xf841a8>
    1d78:	00000803 	andeq	r0, r0, r3, lsl #16
    1d7c:	0b002403 	bleq	ad90 <__Stack_Size+0xa590>
    1d80:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1d84:	0400000e 	streq	r0, [r0], #-14
    1d88:	0b0b000f 	bleq	2c1dcc <__Stack_Size+0x2c15cc>
    1d8c:	0f050000 	svceq	0x00050000
    1d90:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1d94:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1d98:	0b0b0113 	bleq	2c21ec <__Stack_Size+0x2c19ec>
    1d9c:	0b3b0b3a 	bleq	ec4a8c <__Stack_Size+0xec428c>
    1da0:	00001301 	andeq	r1, r0, r1, lsl #6
    1da4:	03000d07 	movweq	r0, #3335	; 0xd07
    1da8:	3b0b3a0e 	blcc	2d05e8 <__Stack_Size+0x2cfde8>
    1dac:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1db0:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1db4:	13490101 	movtne	r0, #37121	; 0x9101
    1db8:	00001301 	andeq	r1, r0, r1, lsl #6
    1dbc:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    1dc0:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1dc4:	00160a00 	andseq	r0, r6, r0, lsl #20
    1dc8:	0b3a0e03 	bleq	e855dc <__Stack_Size+0xe84ddc>
    1dcc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1dd0:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
    1dd4:	03193f01 	tsteq	r9, #1, 30
    1dd8:	3b0b3a0e 	blcc	2d0618 <__Stack_Size+0x2cfe18>
    1ddc:	2019270b 	andscs	r2, r9, fp, lsl #14
    1de0:	0013010b 	andseq	r0, r3, fp, lsl #2
    1de4:	00050c00 	andeq	r0, r5, r0, lsl #24
    1de8:	0b3a0803 	bleq	e83dfc <__Stack_Size+0xe835fc>
    1dec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1df0:	050d0000 	streq	r0, [sp, #-0]
    1df4:	3a0e0300 	bcc	3829fc <__Stack_Size+0x3821fc>
    1df8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1dfc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1e00:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1e04:	0b3b0b3a 	bleq	ec4af4 <__Stack_Size+0xec42f4>
    1e08:	00001349 	andeq	r1, r0, r9, asr #6
    1e0c:	3f012e0f 	svccc	0x00012e0f
    1e10:	3a0e0319 	bcc	382a7c <__Stack_Size+0x38227c>
    1e14:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1e18:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1e1c:	97184006 	ldrls	r4, [r8, -r6]
    1e20:	13011942 	movwne	r1, #6466	; 0x1942
    1e24:	05100000 	ldreq	r0, [r0, #-0]
    1e28:	3a080300 	bcc	202a30 <__Stack_Size+0x202230>
    1e2c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e30:	00180213 	andseq	r0, r8, r3, lsl r2
    1e34:	00051100 	andeq	r1, r5, r0, lsl #2
    1e38:	0b3a0803 	bleq	e83e4c <__Stack_Size+0xe8364c>
    1e3c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1e40:	00001702 	andeq	r1, r0, r2, lsl #14
    1e44:	03000512 	movweq	r0, #1298	; 0x512
    1e48:	3b0b3a0e 	blcc	2d0688 <__Stack_Size+0x2cfe88>
    1e4c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1e50:	13000017 	movwne	r0, #23
    1e54:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1e58:	0b3b0b3a 	bleq	ec4b48 <__Stack_Size+0xec4348>
    1e5c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1e60:	34140000 	ldrcc	r0, [r4], #-0
    1e64:	3a080300 	bcc	202a6c <__Stack_Size+0x20226c>
    1e68:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e6c:	00170213 	andseq	r0, r7, r3, lsl r2
    1e70:	012e1500 	teqeq	lr, r0, lsl #10
    1e74:	01111331 	tsteq	r1, r1, lsr r3
    1e78:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1e7c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1e80:	16000013 			; <UNDEFINED> instruction: 0x16000013
    1e84:	13310005 	teqne	r1, #5
    1e88:	00001702 	andeq	r1, r0, r2, lsl #14
    1e8c:	31003417 	tstcc	r0, r7, lsl r4
    1e90:	18000013 	stmdane	r0, {r0, r1, r4}
    1e94:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    1e98:	34190000 	ldrcc	r0, [r9], #-0
    1e9c:	02133100 	andseq	r3, r3, #0, 2
    1ea0:	1a000017 	bne	1f04 <__Stack_Size+0x1704>
    1ea4:	01018289 	smlabbeq	r1, r9, r2, r8
    1ea8:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1eac:	00001301 	andeq	r1, r0, r1, lsl #6
    1eb0:	01828a1b 	orreq	r8, r2, fp, lsl sl
    1eb4:	91180200 	tstls	r8, r0, lsl #4
    1eb8:	00001842 	andeq	r1, r0, r2, asr #16
    1ebc:	0182891c 	orreq	r8, r2, ip, lsl r9
    1ec0:	95011100 	strls	r1, [r1, #-256]	; 0x100
    1ec4:	13311942 	teqne	r1, #1081344	; 0x108000
    1ec8:	891d0000 	ldmdbhi	sp, {}	; <UNPREDICTABLE>
    1ecc:	11010182 	smlabbne	r1, r2, r1, r0
    1ed0:	00133101 	andseq	r3, r3, r1, lsl #2
    1ed4:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1ed8:	0b3a0e03 	bleq	e856ec <__Stack_Size+0xe84eec>
    1edc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1ee0:	00001802 	andeq	r1, r0, r2, lsl #16
    1ee4:	31011d1f 	tstcc	r1, pc, lsl sp
    1ee8:	55015213 	strpl	r5, [r1, #-531]	; 0x213
    1eec:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    1ef0:	00130105 	andseq	r0, r3, r5, lsl #2
    1ef4:	00052000 	andeq	r2, r5, r0
    1ef8:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    1efc:	1d210000 	stcne	0, cr0, [r1, #-0]
    1f00:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1f04:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    1f08:	0005590b 	andeq	r5, r5, fp, lsl #18
    1f0c:	00342200 	eorseq	r2, r4, r0, lsl #4
    1f10:	0b3a0803 	bleq	e83f24 <__Stack_Size+0xe83724>
    1f14:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1f18:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1f1c:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    1f20:	03193f01 	tsteq	r9, #1, 30
    1f24:	4919270e 	ldmdbmi	r9, {r1, r2, r3, r8, r9, sl, sp}
    1f28:	3c193413 	cfldrscc	mvf3, [r9], {19}
    1f2c:	00130119 	andseq	r0, r3, r9, lsl r1
    1f30:	00052400 	andeq	r2, r5, r0, lsl #8
    1f34:	00001349 	andeq	r1, r0, r9, asr #6
    1f38:	00002625 	andeq	r2, r0, r5, lsr #12
    1f3c:	11010000 	mrsne	r0, (UNDEF: 1)
    1f40:	130e2501 	movwne	r2, #58625	; 0xe501
    1f44:	1b0e030b 	blne	382b78 <__Stack_Size+0x382378>
    1f48:	1117550e 	tstne	r7, lr, lsl #10
    1f4c:	00171001 	andseq	r1, r7, r1
    1f50:	00240200 	eoreq	r0, r4, r0, lsl #4
    1f54:	0b3e0b0b 	bleq	f84b88 <__Stack_Size+0xf84388>
    1f58:	00000e03 	andeq	r0, r0, r3, lsl #28
    1f5c:	03001603 	movweq	r1, #1539	; 0x603
    1f60:	3b0b3a0e 	blcc	2d07a0 <__Stack_Size+0x2cffa0>
    1f64:	0013490b 	andseq	r4, r3, fp, lsl #18
    1f68:	00240400 	eoreq	r0, r4, r0, lsl #8
    1f6c:	0b3e0b0b 	bleq	f84ba0 <__Stack_Size+0xf843a0>
    1f70:	00000803 	andeq	r0, r0, r3, lsl #16
    1f74:	0b000f05 	bleq	5b90 <__Stack_Size+0x5390>
    1f78:	0600000b 	streq	r0, [r0], -fp
    1f7c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1f80:	0b3a0b0b 	bleq	e84bb4 <__Stack_Size+0xe843b4>
    1f84:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1f88:	0d070000 	stceq	0, cr0, [r7, #-0]
    1f8c:	3a080300 	bcc	202b94 <__Stack_Size+0x202394>
    1f90:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f94:	000b3813 	andeq	r3, fp, r3, lsl r8
    1f98:	01010800 	tsteq	r1, r0, lsl #16
    1f9c:	13011349 	movwne	r1, #4937	; 0x1349
    1fa0:	21090000 	mrscs	r0, (UNDEF: 9)
    1fa4:	2f134900 	svccs	0x00134900
    1fa8:	0a00000b 	beq	1fdc <__Stack_Size+0x17dc>
    1fac:	0e03012e 	adfeqsp	f0, f3, #0.5
    1fb0:	0b3b0b3a 	bleq	ec4ca0 <__Stack_Size+0xec44a0>
    1fb4:	13491927 	movtne	r1, #39207	; 0x9927
    1fb8:	13010b20 	movwne	r0, #6944	; 0x1b20
    1fbc:	050b0000 	streq	r0, [fp, #-0]
    1fc0:	3a080300 	bcc	202bc8 <__Stack_Size+0x2023c8>
    1fc4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1fc8:	0c000013 	stceq	0, cr0, [r0], {19}
    1fcc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1fd0:	0b3b0b3a 	bleq	ec4cc0 <__Stack_Size+0xec44c0>
    1fd4:	00001349 	andeq	r1, r0, r9, asr #6
    1fd8:	03012e0d 	movweq	r2, #7693	; 0x1e0d
    1fdc:	3b0b3a0e 	blcc	2d081c <__Stack_Size+0x2d001c>
    1fe0:	2019270b 	andscs	r2, r9, fp, lsl #14
    1fe4:	0013010b 	andseq	r0, r3, fp, lsl #2
    1fe8:	000f0e00 	andeq	r0, pc, r0, lsl #28
    1fec:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1ff0:	340f0000 	strcc	r0, [pc], #-0	; 1ff8 <__Stack_Size+0x17f8>
    1ff4:	3a080300 	bcc	202bfc <__Stack_Size+0x2023fc>
    1ff8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ffc:	10000013 	andne	r0, r0, r3, lsl r0
    2000:	13490026 	movtne	r0, #36902	; 0x9026
    2004:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    2008:	03193f01 	tsteq	r9, #1, 30
    200c:	3b0b3a0e 	blcc	2d084c <__Stack_Size+0x2d004c>
    2010:	1119270b 	tstne	r9, fp, lsl #14
    2014:	40061201 	andmi	r1, r6, r1, lsl #4
    2018:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    201c:	00001301 	andeq	r1, r0, r1, lsl #6
    2020:	03000512 	movweq	r0, #1298	; 0x512
    2024:	3b0b3a08 	blcc	2d084c <__Stack_Size+0x2d004c>
    2028:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    202c:	13000017 	movwne	r0, #23
    2030:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2034:	0b3b0b3a 	bleq	ec4d24 <__Stack_Size+0xec4524>
    2038:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    203c:	34140000 	ldrcc	r0, [r4], #-0
    2040:	3a080300 	bcc	202c48 <__Stack_Size+0x202448>
    2044:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2048:	00170213 	andseq	r0, r7, r3, lsl r2
    204c:	011d1500 	tsteq	sp, r0, lsl #10
    2050:	01521331 	cmpeq	r2, r1, lsr r3
    2054:	0b581755 	bleq	1607db0 <__Stack_Size+0x16075b0>
    2058:	13010b59 	movwne	r0, #7001	; 0x1b59
    205c:	05160000 	ldreq	r0, [r6, #-0]
    2060:	02133100 	andseq	r3, r3, #0, 2
    2064:	17000017 	smladne	r0, r7, r0, r0
    2068:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    206c:	34180000 	ldrcc	r0, [r8], #-0
    2070:	02133100 	andseq	r3, r3, #0, 2
    2074:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    2078:	0111010b 	tsteq	r1, fp, lsl #2
    207c:	00000612 	andeq	r0, r0, r2, lsl r6
    2080:	0300341a 	movweq	r3, #1050	; 0x41a
    2084:	3b0b3a0e 	blcc	2d08c4 <__Stack_Size+0x2d00c4>
    2088:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    208c:	1b000017 	blne	20f0 <__Stack_Size+0x18f0>
    2090:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2094:	17550152 			; <UNDEFINED> instruction: 0x17550152
    2098:	0b590b58 	bleq	1644e00 <__Stack_Size+0x1644600>
    209c:	051c0000 	ldreq	r0, [ip, #-0]
    20a0:	3a0e0300 	bcc	382ca8 <__Stack_Size+0x3824a8>
    20a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    20a8:	00170213 	andseq	r0, r7, r3, lsl r2
    20ac:	00341d00 	eorseq	r1, r4, r0, lsl #26
    20b0:	0b3a0e03 	bleq	e858c4 <__Stack_Size+0xe850c4>
    20b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    20b8:	00001802 	andeq	r1, r0, r2, lsl #16
    20bc:	0182891e 	orreq	r8, r2, lr, lsl r9
    20c0:	31011101 	tstcc	r1, r1, lsl #2
    20c4:	00130113 	andseq	r0, r3, r3, lsl r1
    20c8:	828a1f00 	addhi	r1, sl, #0, 30
    20cc:	18020001 	stmdane	r2, {r0}
    20d0:	00184291 	mulseq	r8, r1, r2
    20d4:	82892000 	addhi	r2, r9, #0
    20d8:	01110101 	tsteq	r1, r1, lsl #2
    20dc:	00001331 	andeq	r1, r0, r1, lsr r3
    20e0:	11010b21 	tstne	r1, r1, lsr #22
    20e4:	01061201 	tsteq	r6, r1, lsl #4
    20e8:	22000013 	andcs	r0, r0, #19
    20ec:	13310005 	teqne	r1, #5
    20f0:	34230000 	strtcc	r0, [r3], #-0
    20f4:	3a0e0300 	bcc	382cfc <__Stack_Size+0x3824fc>
    20f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    20fc:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    2100:	24000018 	strcs	r0, [r0], #-24
    2104:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2108:	19270e03 	stmdbne	r7!, {r0, r1, r9, sl, fp}
    210c:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
    2110:	1301193c 	movwne	r1, #6460	; 0x193c
    2114:	05250000 	streq	r0, [r5, #-0]!
    2118:	00134900 	andseq	r4, r3, r0, lsl #18
    211c:	00262600 	eoreq	r2, r6, r0, lsl #12
    2120:	01000000 	mrseq	r0, (UNDEF: 0)
    2124:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2128:	0e030b13 	vmoveq.32	d3[0], r0
    212c:	17550e1b 	smmlane	r5, fp, lr, r0
    2130:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2134:	16020000 	strne	r0, [r2], -r0
    2138:	3a0e0300 	bcc	382d40 <__Stack_Size+0x382540>
    213c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2140:	03000013 	movweq	r0, #19
    2144:	0b0b0024 	bleq	2c21dc <__Stack_Size+0x2c19dc>
    2148:	0e030b3e 	vmoveq.16	d3[0], r0
    214c:	0f040000 	svceq	0x00040000
    2150:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2154:	00240500 	eoreq	r0, r4, r0, lsl #10
    2158:	0b3e0b0b 	bleq	f84d8c <__Stack_Size+0xf8458c>
    215c:	00000803 	andeq	r0, r0, r3, lsl #16
    2160:	0b000f06 	bleq	5d80 <__Stack_Size+0x5580>
    2164:	0013490b 	andseq	r4, r3, fp, lsl #18
    2168:	00260700 	eoreq	r0, r6, r0, lsl #14
    216c:	00001349 	andeq	r1, r0, r9, asr #6
    2170:	03001608 	movweq	r1, #1544	; 0x608
    2174:	3b0b3a08 	blcc	2d099c <__Stack_Size+0x2d019c>
    2178:	0013490b 	andseq	r4, r3, fp, lsl #18
    217c:	00350900 	eorseq	r0, r5, r0, lsl #18
    2180:	00001349 	andeq	r1, r0, r9, asr #6
    2184:	0b01040a 	bleq	431b4 <__Stack_Size+0x429b4>
    2188:	3b0b3a0b 	blcc	2d09bc <__Stack_Size+0x2d01bc>
    218c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2190:	00280b00 	eoreq	r0, r8, r0, lsl #22
    2194:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    2198:	130c0000 	movwne	r0, #49152	; 0xc000
    219c:	0b0e0301 	bleq	382da8 <__Stack_Size+0x3825a8>
    21a0:	3b0b3a0b 	blcc	2d09d4 <__Stack_Size+0x2d01d4>
    21a4:	00130105 	andseq	r0, r3, r5, lsl #2
    21a8:	000d0d00 	andeq	r0, sp, r0, lsl #26
    21ac:	0b3a0e03 	bleq	e859c0 <__Stack_Size+0xe851c0>
    21b0:	1349053b 	movtne	r0, #38203	; 0x953b
    21b4:	00000b38 	andeq	r0, r0, r8, lsr fp
    21b8:	0b01130e 	bleq	46df8 <__Stack_Size+0x465f8>
    21bc:	3b0b3a0b 	blcc	2d09f0 <__Stack_Size+0x2d01f0>
    21c0:	0013010b 	andseq	r0, r3, fp, lsl #2
    21c4:	000d0f00 	andeq	r0, sp, r0, lsl #30
    21c8:	0b3a0e03 	bleq	e859dc <__Stack_Size+0xe851dc>
    21cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    21d0:	00000b38 	andeq	r0, r0, r8, lsr fp
    21d4:	49010110 	stmdbmi	r1, {r4, r8}
    21d8:	00130113 	andseq	r0, r3, r3, lsl r1
    21dc:	00211100 	eoreq	r1, r1, r0, lsl #2
    21e0:	0b2f1349 	bleq	bc6f0c <__Stack_Size+0xbc670c>
    21e4:	13120000 	tstne	r2, #0
    21e8:	0b0e0301 	bleq	382df4 <__Stack_Size+0x3825f4>
    21ec:	3b0b3a0b 	blcc	2d0a20 <__Stack_Size+0x2d0220>
    21f0:	0013010b 	andseq	r0, r3, fp, lsl #2
    21f4:	00211300 	eoreq	r1, r1, r0, lsl #6
    21f8:	00001349 	andeq	r1, r0, r9, asr #6
    21fc:	3f012e14 	svccc	0x00012e14
    2200:	3a0e0319 	bcc	382e6c <__Stack_Size+0x38266c>
    2204:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2208:	11134919 	tstne	r3, r9, lsl r9
    220c:	40061201 	andmi	r1, r6, r1, lsl #4
    2210:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2214:	00001301 	andeq	r1, r0, r1, lsl #6
    2218:	03000515 	movweq	r0, #1301	; 0x515
    221c:	3b0b3a0e 	blcc	2d0a5c <__Stack_Size+0x2d025c>
    2220:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2224:	16000017 			; <UNDEFINED> instruction: 0x16000017
    2228:	08030034 	stmdaeq	r3, {r2, r4, r5}
    222c:	0b3b0b3a 	bleq	ec4f1c <__Stack_Size+0xec471c>
    2230:	17021349 	strne	r1, [r2, -r9, asr #6]
    2234:	34170000 	ldrcc	r0, [r7], #-0
    2238:	3a0e0300 	bcc	382e40 <__Stack_Size+0x382640>
    223c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2240:	00180213 	andseq	r0, r8, r3, lsl r2
    2244:	00341800 	eorseq	r1, r4, r0, lsl #16
    2248:	0b3a0e03 	bleq	e85a5c <__Stack_Size+0xe8525c>
    224c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2250:	00000b1c 	andeq	r0, r0, ip, lsl fp
    2254:	03003419 	movweq	r3, #1049	; 0x419
    2258:	3b0b3a0e 	blcc	2d0a98 <__Stack_Size+0x2d0298>
    225c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2260:	1a000017 	bne	22c4 <__Stack_Size+0x1ac4>
    2264:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2268:	0b3b0b3a 	bleq	ec4f58 <__Stack_Size+0xec4758>
    226c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2270:	891b0000 	ldmdbhi	fp, {}	; <UNPREDICTABLE>
    2274:	11010182 	smlabbne	r1, r2, r1, r0
    2278:	01133101 	tsteq	r3, r1, lsl #2
    227c:	1c000013 	stcne	0, cr0, [r0], {19}
    2280:	0001828a 	andeq	r8, r1, sl, lsl #5
    2284:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    2288:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
    228c:	00018289 	andeq	r8, r1, r9, lsl #5
    2290:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2294:	891e0000 	ldmdbhi	lr, {}	; <UNPREDICTABLE>
    2298:	11010182 	smlabbne	r1, r2, r1, r0
    229c:	00133101 	andseq	r3, r3, r1, lsl #2
    22a0:	00211f00 	eoreq	r1, r1, r0, lsl #30
    22a4:	182f1349 	stmdane	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    22a8:	34200000 	strtcc	r0, [r0], #-0
    22ac:	3a0e0300 	bcc	382eb4 <__Stack_Size+0x3826b4>
    22b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    22b4:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    22b8:	21000018 	tstcs	r0, r8, lsl r0
    22bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    22c0:	0b3a0e03 	bleq	e85ad4 <__Stack_Size+0xe852d4>
    22c4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    22c8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    22cc:	00001301 	andeq	r1, r0, r1, lsl #6
    22d0:	49000522 	stmdbmi	r0, {r1, r5, r8, sl}
    22d4:	23000013 	movwcs	r0, #19
    22d8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    22dc:	19270e03 	stmdbne	r7!, {r0, r1, r9, sl, fp}
    22e0:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
    22e4:	1301193c 	movwne	r1, #6460	; 0x193c
    22e8:	26240000 	strtcs	r0, [r4], -r0
    22ec:	25000000 	strcs	r0, [r0, #-0]
    22f0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    22f4:	0b3a0e03 	bleq	e85b08 <__Stack_Size+0xe85308>
    22f8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    22fc:	0000193c 	andeq	r1, r0, ip, lsr r9
    2300:	3f012e26 	svccc	0x00012e26
    2304:	3a0e0319 	bcc	382f70 <__Stack_Size+0x382770>
    2308:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    230c:	01193c19 	tsteq	r9, r9, lsl ip
    2310:	27000013 	smladcs	r0, r3, r0, r0
    2314:	00000018 	andeq	r0, r0, r8, lsl r0
    2318:	3f012e28 	svccc	0x00012e28
    231c:	3a0e0319 	bcc	382f88 <__Stack_Size+0x382788>
    2320:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2324:	3c134919 	ldccc	9, cr4, [r3], {25}
    2328:	00130119 	andseq	r0, r3, r9, lsl r1
    232c:	012e2900 	teqeq	lr, r0, lsl #18
    2330:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2334:	0b3b0b3a 	bleq	ec5024 <__Stack_Size+0xec4824>
    2338:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    233c:	00001301 	andeq	r1, r0, r1, lsl #6
    2340:	01110100 	tsteq	r1, r0, lsl #2
    2344:	0b130e25 	bleq	4c5be0 <__Stack_Size+0x4c53e0>
    2348:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    234c:	01111755 	tsteq	r1, r5, asr r7
    2350:	00001710 	andeq	r1, r0, r0, lsl r7
    2354:	0b002402 	bleq	b364 <__Stack_Size+0xab64>
    2358:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    235c:	0300000e 	movweq	r0, #14
    2360:	08030016 	stmdaeq	r3, {r1, r2, r4}
    2364:	0b3b0b3a 	bleq	ec5054 <__Stack_Size+0xec4854>
    2368:	00001349 	andeq	r1, r0, r9, asr #6
    236c:	03010404 	movweq	r0, #5124	; 0x1404
    2370:	3a0b0b0e 	bcc	2c4fb0 <__Stack_Size+0x2c47b0>
    2374:	010b3b0b 	tsteq	fp, fp, lsl #22
    2378:	05000013 	streq	r0, [r0, #-19]
    237c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    2380:	00000d1c 	andeq	r0, r0, ip, lsl sp
    2384:	03001606 	movweq	r1, #1542	; 0x606
    2388:	3b0b3a0e 	blcc	2d0bc8 <__Stack_Size+0x2d03c8>
    238c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2390:	012e0700 	teqeq	lr, r0, lsl #14
    2394:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2398:	0b3b0b3a 	bleq	ec5088 <__Stack_Size+0xec4888>
    239c:	13491927 	movtne	r1, #39207	; 0x9927
    23a0:	13010b20 	movwne	r0, #6944	; 0x1b20
    23a4:	05080000 	streq	r0, [r8, #-0]
    23a8:	3a0e0300 	bcc	382fb0 <__Stack_Size+0x3827b0>
    23ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    23b0:	09000013 	stmdbeq	r0, {r0, r1, r4}
    23b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    23b8:	0b3a0e03 	bleq	e85bcc <__Stack_Size+0xe853cc>
    23bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    23c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    23c4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    23c8:	00130119 	andseq	r0, r3, r9, lsl r1
    23cc:	00050a00 	andeq	r0, r5, r0, lsl #20
    23d0:	0b3a0e03 	bleq	e85be4 <__Stack_Size+0xe853e4>
    23d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    23d8:	00001802 	andeq	r1, r0, r2, lsl #16
    23dc:	3f002e0b 	svccc	0x00002e0b
    23e0:	3a0e0319 	bcc	38304c <__Stack_Size+0x38284c>
    23e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    23e8:	11134919 	tstne	r3, r9, lsl r9
    23ec:	40061201 	andmi	r1, r6, r1, lsl #4
    23f0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    23f4:	050c0000 	streq	r0, [ip, #-0]
    23f8:	3a0e0300 	bcc	383000 <__Stack_Size+0x382800>
    23fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2400:	00170213 	andseq	r0, r7, r3, lsl r2
    2404:	012e0d00 	teqeq	lr, r0, lsl #26
    2408:	01111331 	tsteq	r1, r1, lsr r3
    240c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2410:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2414:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    2418:	13310005 	teqne	r1, #5
    241c:	00001702 	andeq	r1, r0, r2, lsl #14
    2420:	3f012e0f 	svccc	0x00012e0f
    2424:	3a0e0319 	bcc	383090 <__Stack_Size+0x382890>
    2428:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    242c:	11134919 	tstne	r3, r9, lsl r9
    2430:	40061201 	andmi	r1, r6, r1, lsl #4
    2434:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2438:	00001301 	andeq	r1, r0, r1, lsl #6
    243c:	11010b10 	tstne	r1, r0, lsl fp
    2440:	00061201 	andeq	r1, r6, r1, lsl #4
    2444:	00341100 	eorseq	r1, r4, r0, lsl #2
    2448:	0b3a0e03 	bleq	e85c5c <__Stack_Size+0xe8545c>
    244c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2450:	00001802 	andeq	r1, r0, r2, lsl #16
    2454:	03003412 	movweq	r3, #1042	; 0x412
    2458:	3b0b3a0e 	blcc	2d0c98 <__Stack_Size+0x2d0498>
    245c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2460:	011d1300 	tsteq	sp, r0, lsl #6
    2464:	01521331 	cmpeq	r2, r1, lsr r3
    2468:	0b581755 	bleq	16081c4 <__Stack_Size+0x16079c4>
    246c:	00000b59 	andeq	r0, r0, r9, asr fp
    2470:	3f012e14 	svccc	0x00012e14
    2474:	3a0e0319 	bcc	3830e0 <__Stack_Size+0x3828e0>
    2478:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    247c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2480:	97184006 	ldrls	r4, [r8, -r6]
    2484:	13011942 	movwne	r1, #6466	; 0x1942
    2488:	05150000 	ldreq	r0, [r5, #-0]
    248c:	3a0e0300 	bcc	383094 <__Stack_Size+0x382894>
    2490:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2494:	00170213 	andseq	r0, r7, r3, lsl r2
    2498:	00341600 	eorseq	r1, r4, r0, lsl #12
    249c:	0b3a0e03 	bleq	e85cb0 <__Stack_Size+0xe854b0>
    24a0:	1349053b 	movtne	r0, #38203	; 0x953b
    24a4:	00001702 	andeq	r1, r0, r2, lsl #14
    24a8:	3f012e17 	svccc	0x00012e17
    24ac:	3a0e0319 	bcc	383118 <__Stack_Size+0x382918>
    24b0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    24b4:	11134919 	tstne	r3, r9, lsl r9
    24b8:	40061201 	andmi	r1, r6, r1, lsl #4
    24bc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    24c0:	00001301 	andeq	r1, r0, r1, lsl #6
    24c4:	03000518 	movweq	r0, #1304	; 0x518
    24c8:	3b0b3a0e 	blcc	2d0d08 <__Stack_Size+0x2d0508>
    24cc:	02134905 	andseq	r4, r3, #81920	; 0x14000
    24d0:	19000018 	stmdbne	r0, {r3, r4}
    24d4:	0b0b000f 	bleq	2c2518 <__Stack_Size+0x2c1d18>
    24d8:	00001349 	andeq	r1, r0, r9, asr #6
    24dc:	0300341a 	movweq	r3, #1050	; 0x41a
    24e0:	3b0b3a0e 	blcc	2d0d20 <__Stack_Size+0x2d0520>
    24e4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    24e8:	1b000018 	blne	2550 <__Stack_Size+0x1d50>
    24ec:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    24f0:	0b1c0000 	bleq	7024f8 <__Stack_Size+0x701cf8>
    24f4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    24f8:	00130106 	andseq	r0, r3, r6, lsl #2
    24fc:	00051d00 	andeq	r1, r5, r0, lsl #26
    2500:	0b3a0803 	bleq	e84514 <__Stack_Size+0xe83d14>
    2504:	1349053b 	movtne	r0, #38203	; 0x953b
    2508:	00001702 	andeq	r1, r0, r2, lsl #14
    250c:	0300051e 	movweq	r0, #1310	; 0x51e
    2510:	3b0b3a08 	blcc	2d0d38 <__Stack_Size+0x2d0538>
    2514:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2518:	1f000018 	svcne	0x00000018
    251c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2520:	0b3a0e03 	bleq	e85d34 <__Stack_Size+0xe85534>
    2524:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2528:	01111349 	tsteq	r1, r9, asr #6
    252c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2530:	00194297 	mulseq	r9, r7, r2
    2534:	11010000 	mrsne	r0, (UNDEF: 1)
    2538:	130e2501 	movwne	r2, #58625	; 0xe501
    253c:	1b0e030b 	blne	383170 <__Stack_Size+0x382970>
    2540:	1117550e 	tstne	r7, lr, lsl #10
    2544:	00171001 	andseq	r1, r7, r1
    2548:	00240200 	eoreq	r0, r4, r0, lsl #4
    254c:	0b3e0b0b 	bleq	f85180 <__Stack_Size+0xf84980>
    2550:	00000e03 	andeq	r0, r0, r3, lsl #28
    2554:	03001603 	movweq	r1, #1539	; 0x603
    2558:	3b0b3a08 	blcc	2d0d80 <__Stack_Size+0x2d0580>
    255c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2560:	00150400 	andseq	r0, r5, r0, lsl #8
    2564:	00001927 	andeq	r1, r0, r7, lsr #18
    2568:	0b000f05 	bleq	6184 <__Stack_Size+0x5984>
    256c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2570:	012e0600 	teqeq	lr, r0, lsl #12
    2574:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2578:	0b3b0b3a 	bleq	ec5268 <__Stack_Size+0xec4a68>
    257c:	01111927 	tsteq	r1, r7, lsr #18
    2580:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2584:	01194296 			; <UNDEFINED> instruction: 0x01194296
    2588:	07000013 	smladeq	r0, r3, r0, r0
    258c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2590:	0b3b0b3a 	bleq	ec5280 <__Stack_Size+0xec4a80>
    2594:	17021349 	strne	r1, [r2, -r9, asr #6]
    2598:	0b080000 	bleq	2025a0 <__Stack_Size+0x201da0>
    259c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    25a0:	00130106 	andseq	r0, r3, r6, lsl #2
    25a4:	82890900 	addhi	r0, r9, #0, 18
    25a8:	01110001 	tsteq	r1, r1
    25ac:	00001331 	andeq	r1, r0, r1, lsr r3
    25b0:	0300340a 	movweq	r3, #1034	; 0x40a
    25b4:	3b0b3a0e 	blcc	2d0df4 <__Stack_Size+0x2d05f4>
    25b8:	3f134905 	svccc	0x00134905
    25bc:	00193c19 	andseq	r3, r9, r9, lsl ip
    25c0:	00350b00 	eorseq	r0, r5, r0, lsl #22
    25c4:	00001349 	andeq	r1, r0, r9, asr #6
    25c8:	0300340c 	movweq	r3, #1036	; 0x40c
    25cc:	3b0b3a0e 	blcc	2d0e0c <__Stack_Size+0x2d060c>
    25d0:	3f13490b 	svccc	0x0013490b
    25d4:	00180219 	andseq	r0, r8, r9, lsl r2
    25d8:	00340d00 	eorseq	r0, r4, r0, lsl #26
    25dc:	0b3a0e03 	bleq	e85df0 <__Stack_Size+0xe855f0>
    25e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    25e4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    25e8:	010e0000 	mrseq	r0, (UNDEF: 14)
    25ec:	01134901 	tsteq	r3, r1, lsl #18
    25f0:	0f000013 	svceq	0x00000013
    25f4:	13490021 	movtne	r0, #36897	; 0x9021
    25f8:	00000b2f 	andeq	r0, r0, pc, lsr #22
    25fc:	3f002e10 	svccc	0x00002e10
    2600:	3a0e0319 	bcc	38326c <__Stack_Size+0x382a6c>
    2604:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2608:	3c134919 	ldccc	9, cr4, [r3], {25}
    260c:	00000019 	andeq	r0, r0, r9, lsl r0
    2610:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    2614:	030b130e 	movweq	r1, #45838	; 0xb30e
    2618:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    261c:	10011117 	andne	r1, r1, r7, lsl r1
    2620:	02000017 	andeq	r0, r0, #23
    2624:	0b0b0024 	bleq	2c26bc <__Stack_Size+0x2c1ebc>
    2628:	0e030b3e 	vmoveq.16	d3[0], r0
    262c:	16030000 	strne	r0, [r3], -r0
    2630:	3a080300 	bcc	203238 <__Stack_Size+0x202a38>
    2634:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2638:	04000013 	streq	r0, [r0], #-19
    263c:	0b0b000f 	bleq	2c2680 <__Stack_Size+0x2c1e80>
    2640:	00001349 	andeq	r1, r0, r9, asr #6
    2644:	03010405 	movweq	r0, #5125	; 0x1405
    2648:	3a0b0b0e 	bcc	2c5288 <__Stack_Size+0x2c4a88>
    264c:	010b3b0b 	tsteq	fp, fp, lsl #22
    2650:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2654:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    2658:	00000d1c 	andeq	r0, r0, ip, lsl sp
    265c:	03001607 	movweq	r1, #1543	; 0x607
    2660:	3b0b3a0e 	blcc	2d0ea0 <__Stack_Size+0x2d06a0>
    2664:	0013490b 	andseq	r4, r3, fp, lsl #18
    2668:	01130800 	tsteq	r3, r0, lsl #16
    266c:	0b0b0e03 	bleq	2c5e80 <__Stack_Size+0x2c5680>
    2670:	0b3b0b3a 	bleq	ec5360 <__Stack_Size+0xec4b60>
    2674:	00001301 	andeq	r1, r0, r1, lsl #6
    2678:	03000d09 	movweq	r0, #3337	; 0xd09
    267c:	3b0b3a0e 	blcc	2d0ebc <__Stack_Size+0x2d06bc>
    2680:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2684:	0a00000b 	beq	26b8 <__Stack_Size+0x1eb8>
    2688:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    268c:	13011349 	movwne	r1, #4937	; 0x1349
    2690:	050b0000 	streq	r0, [fp, #-0]
    2694:	00134900 	andseq	r4, r3, r0, lsl #18
    2698:	01130c00 	tsteq	r3, r0, lsl #24
    269c:	0b0b0803 	bleq	2c46b0 <__Stack_Size+0x2c3eb0>
    26a0:	0b3b0b3a 	bleq	ec5390 <__Stack_Size+0xec4b90>
    26a4:	00001301 	andeq	r1, r0, r1, lsl #6
    26a8:	03000d0d 	movweq	r0, #3341	; 0xd0d
    26ac:	3b0b3a08 	blcc	2d0ed4 <__Stack_Size+0x2d06d4>
    26b0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    26b4:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    26b8:	0b0b0117 	bleq	2c2b1c <__Stack_Size+0x2c231c>
    26bc:	0b3b0b3a 	bleq	ec53ac <__Stack_Size+0xec4bac>
    26c0:	00001301 	andeq	r1, r0, r1, lsl #6
    26c4:	03000d0f 	movweq	r0, #3343	; 0xd0f
    26c8:	3b0b3a08 	blcc	2d0ef0 <__Stack_Size+0x2d06f0>
    26cc:	0013490b 	andseq	r4, r3, fp, lsl #18
    26d0:	00151000 	andseq	r1, r5, r0
    26d4:	00001927 	andeq	r1, r0, r7, lsr #18
    26d8:	3f002e11 	svccc	0x00002e11
    26dc:	3a0e0319 	bcc	383348 <__Stack_Size+0x382b48>
    26e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    26e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    26e8:	96184006 	ldrls	r4, [r8], -r6
    26ec:	00001942 	andeq	r1, r0, r2, asr #18
    26f0:	03003412 	movweq	r3, #1042	; 0x412
    26f4:	3b0b3a0e 	blcc	2d0f34 <__Stack_Size+0x2d0734>
    26f8:	3f13490b 	svccc	0x0013490b
    26fc:	00193c19 	andseq	r3, r9, r9, lsl ip
    2700:	00341300 	eorseq	r1, r4, r0, lsl #6
    2704:	0b3a0e03 	bleq	e85f18 <__Stack_Size+0xe85718>
    2708:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    270c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    2710:	01000000 	mrseq	r0, (UNDEF: 0)
    2714:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2718:	0e030b13 	vmoveq.32	d3[0], r0
    271c:	17550e1b 	smmlane	r5, fp, lr, r0
    2720:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2724:	24020000 	strcs	r0, [r2], #-0
    2728:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    272c:	000e030b 	andeq	r0, lr, fp, lsl #6
    2730:	00160300 	andseq	r0, r6, r0, lsl #6
    2734:	0b3a0803 	bleq	e84748 <__Stack_Size+0xe83f48>
    2738:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    273c:	16040000 	strne	r0, [r4], -r0
    2740:	3a0e0300 	bcc	383348 <__Stack_Size+0x382b48>
    2744:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2748:	05000013 	streq	r0, [r0, #-19]
    274c:	13490035 	movtne	r0, #36917	; 0x9035
    2750:	04060000 	streq	r0, [r6], #-0
    2754:	3a0b0b01 	bcc	2c5360 <__Stack_Size+0x2c4b60>
    2758:	010b3b0b 	tsteq	fp, fp, lsl #22
    275c:	07000013 	smladeq	r0, r3, r0, r0
    2760:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    2764:	00000d1c 	andeq	r0, r0, ip, lsl sp
    2768:	03010408 	movweq	r0, #5128	; 0x1408
    276c:	3a0b0b0e 	bcc	2c53ac <__Stack_Size+0x2c4bac>
    2770:	010b3b0b 	tsteq	fp, fp, lsl #22
    2774:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2778:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    277c:	0b3a0b0b 	bleq	e853b0 <__Stack_Size+0xe84bb0>
    2780:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2784:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    2788:	3a0e0300 	bcc	383390 <__Stack_Size+0x382b90>
    278c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2790:	000b3813 	andeq	r3, fp, r3, lsl r8
    2794:	000f0b00 	andeq	r0, pc, r0, lsl #22
    2798:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    279c:	150c0000 	strne	r0, [ip, #-0]
    27a0:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    27a4:	00130113 	andseq	r0, r3, r3, lsl r1
    27a8:	00050d00 	andeq	r0, r5, r0, lsl #26
    27ac:	00001349 	andeq	r1, r0, r9, asr #6
    27b0:	0301130e 	movweq	r1, #4878	; 0x130e
    27b4:	3a0b0b08 	bcc	2c53dc <__Stack_Size+0x2c4bdc>
    27b8:	010b3b0b 	tsteq	fp, fp, lsl #22
    27bc:	0f000013 	svceq	0x00000013
    27c0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    27c4:	0b3b0b3a 	bleq	ec54b4 <__Stack_Size+0xec4cb4>
    27c8:	0b381349 	bleq	e074f4 <__Stack_Size+0xe06cf4>
    27cc:	17100000 	ldrne	r0, [r0, -r0]
    27d0:	3a0b0b01 	bcc	2c53dc <__Stack_Size+0x2c4bdc>
    27d4:	010b3b0b 	tsteq	fp, fp, lsl #22
    27d8:	11000013 	tstne	r0, r3, lsl r0
    27dc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    27e0:	0b3b0b3a 	bleq	ec54d0 <__Stack_Size+0xec4cd0>
    27e4:	00001349 	andeq	r1, r0, r9, asr #6
    27e8:	27001512 	smladcs	r0, r2, r5, r1
    27ec:	13000019 	movwne	r0, #25
    27f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    27f4:	0b3a0e03 	bleq	e86008 <__Stack_Size+0xe85808>
    27f8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    27fc:	01111349 	tsteq	r1, r9, asr #6
    2800:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2804:	01194296 			; <UNDEFINED> instruction: 0x01194296
    2808:	14000013 	strne	r0, [r0], #-19
    280c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2810:	0b3b0b3a 	bleq	ec5500 <__Stack_Size+0xec4d00>
    2814:	17021349 	strne	r1, [r2, -r9, asr #6]
    2818:	0b150000 	bleq	542820 <__Stack_Size+0x542020>
    281c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2820:	00130106 	andseq	r0, r3, r6, lsl #2
    2824:	00341600 	eorseq	r1, r4, r0, lsl #12
    2828:	0b3a0e03 	bleq	e8603c <__Stack_Size+0xe8583c>
    282c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2830:	00001702 	andeq	r1, r0, r2, lsl #14
    2834:	11010b17 	tstne	r1, r7, lsl fp
    2838:	00061201 	andeq	r1, r6, r1, lsl #4
    283c:	00341800 	eorseq	r1, r4, r0, lsl #16
    2840:	0b3a0e03 	bleq	e86054 <__Stack_Size+0xe85854>
    2844:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2848:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    284c:	3a0e0301 	bcc	383458 <__Stack_Size+0x382c58>
    2850:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2854:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2858:	97184006 	ldrls	r4, [r8, -r6]
    285c:	13011942 	movwne	r1, #6466	; 0x1942
    2860:	341a0000 	ldrcc	r0, [sl], #-0
    2864:	3a0e0300 	bcc	38346c <__Stack_Size+0x382c6c>
    2868:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    286c:	00170213 	andseq	r0, r7, r3, lsl r2
    2870:	000a1b00 	andeq	r1, sl, r0, lsl #22
    2874:	0b3a0e03 	bleq	e86088 <__Stack_Size+0xe85888>
    2878:	0111053b 	tsteq	r1, fp, lsr r5
    287c:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    2880:	11010182 	smlabbne	r1, r2, r1, r0
    2884:	00130101 	andseq	r0, r3, r1, lsl #2
    2888:	828a1d00 	addhi	r1, sl, #0, 26
    288c:	18020001 	stmdane	r2, {r0}
    2890:	00184291 	mulseq	r8, r1, r2
    2894:	82891e00 	addhi	r1, r9, #0, 28
    2898:	01110101 	tsteq	r1, r1, lsl #2
    289c:	13011331 	movwne	r1, #4913	; 0x1331
    28a0:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    28a4:	11010182 	smlabbne	r1, r2, r1, r0
    28a8:	00133101 	andseq	r3, r3, r1, lsl #2
    28ac:	002e2000 	eoreq	r2, lr, r0
    28b0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    28b4:	0b3b0b3a 	bleq	ec55a4 <__Stack_Size+0xec4da4>
    28b8:	13491927 	movtne	r1, #39207	; 0x9927
    28bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    28c0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    28c4:	21000019 	tstcs	r0, r9, lsl r0
    28c8:	08030034 	stmdaeq	r3, {r2, r4, r5}
    28cc:	0b3b0b3a 	bleq	ec55bc <__Stack_Size+0xec4dbc>
    28d0:	17021349 	strne	r1, [r2, -r9, asr #6]
    28d4:	89220000 	stmdbhi	r2!, {}	; <UNPREDICTABLE>
    28d8:	11000182 	smlabbne	r0, r2, r1, r0
    28dc:	00133101 	andseq	r3, r3, r1, lsl #2
    28e0:	012e2300 	teqeq	lr, r0, lsl #6
    28e4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    28e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    28ec:	13491927 	movtne	r1, #39207	; 0x9927
    28f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    28f4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    28f8:	00130119 	andseq	r0, r3, r9, lsl r1
    28fc:	00342400 	eorseq	r2, r4, r0, lsl #8
    2900:	0b3a0803 	bleq	e84914 <__Stack_Size+0xe84114>
    2904:	1349053b 	movtne	r0, #38203	; 0x953b
    2908:	00001702 	andeq	r1, r0, r2, lsl #14
    290c:	55010b25 	strpl	r0, [r1, #-2853]	; 0xb25
    2910:	00130117 	andseq	r0, r3, r7, lsl r1
    2914:	002e2600 	eoreq	r2, lr, r0, lsl #12
    2918:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    291c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2920:	13491927 	movtne	r1, #39207	; 0x9927
    2924:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2928:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    292c:	27000019 	smladcs	r0, r9, r0, r0
    2930:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2934:	0b3a0e03 	bleq	e86148 <__Stack_Size+0xe85948>
    2938:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    293c:	01111349 	tsteq	r1, r9, asr #6
    2940:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2944:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2948:	28000013 	stmdacs	r0, {r0, r1, r4}
    294c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2950:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2954:	17021349 	strne	r1, [r2, -r9, asr #6]
    2958:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
    295c:	3a0e0301 	bcc	383568 <__Stack_Size+0x382d68>
    2960:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2964:	010b2019 	tsteq	fp, r9, lsl r0
    2968:	2a000013 	bcs	29bc <__Stack_Size+0x21bc>
    296c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2970:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2974:	00001349 	andeq	r1, r0, r9, asr #6
    2978:	03000a2b 	movweq	r0, #2603	; 0xa2b
    297c:	3b0b3a0e 	blcc	2d11bc <__Stack_Size+0x2d09bc>
    2980:	2c000005 	stccs	0, cr0, [r0], {5}
    2984:	1301010b 	movwne	r0, #4363	; 0x110b
    2988:	0b2d0000 	bleq	b42990 <__Stack_Size+0xb42190>
    298c:	2e000001 	cdpcs	0, 0, cr0, cr0, cr1, {0}
    2990:	0b0b0117 	bleq	2c2df4 <__Stack_Size+0x2c25f4>
    2994:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2998:	00001301 	andeq	r1, r0, r1, lsl #6
    299c:	03000d2f 	movweq	r0, #3375	; 0xd2f
    29a0:	3b0b3a08 	blcc	2d11c8 <__Stack_Size+0x2d09c8>
    29a4:	00134905 	andseq	r4, r3, r5, lsl #18
    29a8:	011d3000 	tsteq	sp, r0
    29ac:	01111331 	tsteq	r1, r1, lsr r3
    29b0:	0b580612 	bleq	1604200 <__Stack_Size+0x1603a00>
    29b4:	13010559 	movwne	r0, #5465	; 0x1559
    29b8:	34310000 	ldrtcc	r0, [r1], #-0
    29bc:	02133100 	andseq	r3, r3, #0, 2
    29c0:	32000017 	andcc	r0, r0, #23
    29c4:	1331000a 	teqne	r1, #10
    29c8:	00000111 	andeq	r0, r0, r1, lsl r1
    29cc:	31011d33 	tstcc	r1, r3, lsr sp
    29d0:	55015213 	strpl	r5, [r1, #-531]	; 0x213
    29d4:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    29d8:	00130105 	andseq	r0, r3, r5, lsl #2
    29dc:	010b3400 	tsteq	fp, r0, lsl #8
    29e0:	00001755 	andeq	r1, r0, r5, asr r7
    29e4:	31003435 	tstcc	r0, r5, lsr r4
    29e8:	00180213 	andseq	r0, r8, r3, lsl r2
    29ec:	82893600 	addhi	r3, r9, #0, 12
    29f0:	01110101 	tsteq	r1, r1, lsl #2
    29f4:	89370000 	ldmdbhi	r7!, {}	; <UNPREDICTABLE>
    29f8:	11000182 	smlabbne	r0, r2, r1, r0
    29fc:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    2a00:	00001331 	andeq	r1, r0, r1, lsr r3
    2a04:	3f012e38 	svccc	0x00012e38
    2a08:	3a0e0319 	bcc	383674 <__Stack_Size+0x382e74>
    2a0c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2a10:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2a14:	97184006 	ldrls	r4, [r8, -r6]
    2a18:	13011942 	movwne	r1, #6466	; 0x1942
    2a1c:	05390000 	ldreq	r0, [r9, #-0]!
    2a20:	3a080300 	bcc	203628 <__Stack_Size+0x202e28>
    2a24:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a28:	00170213 	andseq	r0, r7, r3, lsl r2
    2a2c:	002e3a00 	eoreq	r3, lr, r0, lsl #20
    2a30:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2a34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2a38:	01111927 	tsteq	r1, r7, lsr #18
    2a3c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2a40:	00194297 	mulseq	r9, r7, r2
    2a44:	00343b00 	eorseq	r3, r4, r0, lsl #22
    2a48:	0b3a0e03 	bleq	e8625c <__Stack_Size+0xe85a5c>
    2a4c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2a50:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    2a54:	343c0000 	ldrtcc	r0, [ip], #-0
    2a58:	3a0e0300 	bcc	383660 <__Stack_Size+0x382e60>
    2a5c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a60:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    2a64:	3d000018 	stccc	0, cr0, [r0, #-96]	; 0xffffffa0
    2a68:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2a6c:	0b3a0e03 	bleq	e86280 <__Stack_Size+0xe85a80>
    2a70:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2a74:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    2a78:	00001301 	andeq	r1, r0, r1, lsl #6
    2a7c:	3f012e3e 	svccc	0x00012e3e
    2a80:	3a0e0319 	bcc	3836ec <__Stack_Size+0x382eec>
    2a84:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2a88:	01193c19 	tsteq	r9, r9, lsl ip
    2a8c:	3f000013 	svccc	0x00000013
    2a90:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2a94:	0b3a0e03 	bleq	e862a8 <__Stack_Size+0xe85aa8>
    2a98:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2a9c:	1301193c 	movwne	r1, #6460	; 0x193c
    2aa0:	2e400000 	cdpcs	0, 4, cr0, cr0, cr0, {0}
    2aa4:	03193f01 	tsteq	r9, #1, 30
    2aa8:	3b0b3a0e 	blcc	2d12e8 <__Stack_Size+0x2d0ae8>
    2aac:	3c19270b 	ldccc	7, cr2, [r9], {11}
    2ab0:	00000019 	andeq	r0, r0, r9, lsl r0
    2ab4:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    2ab8:	030b130e 	movweq	r1, #45838	; 0xb30e
    2abc:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    2ac0:	10011117 	andne	r1, r1, r7, lsl r1
    2ac4:	02000017 	andeq	r0, r0, #23
    2ac8:	0b0b0024 	bleq	2c2b60 <__Stack_Size+0x2c2360>
    2acc:	0e030b3e 	vmoveq.16	d3[0], r0
    2ad0:	16030000 	strne	r0, [r3], -r0
    2ad4:	3a080300 	bcc	2036dc <__Stack_Size+0x202edc>
    2ad8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2adc:	04000013 	streq	r0, [r0], #-19
    2ae0:	0b0b000f 	bleq	2c2b24 <__Stack_Size+0x2c2324>
    2ae4:	00001349 	andeq	r1, r0, r9, asr #6
    2ae8:	3f012e05 	svccc	0x00012e05
    2aec:	3a0e0319 	bcc	383758 <__Stack_Size+0x382f58>
    2af0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2af4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2af8:	97184006 	ldrls	r4, [r8, -r6]
    2afc:	13011942 	movwne	r1, #6466	; 0x1942
    2b00:	05060000 	streq	r0, [r6, #-0]
    2b04:	3a0e0300 	bcc	38370c <__Stack_Size+0x382f0c>
    2b08:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b0c:	00170213 	andseq	r0, r7, r3, lsl r2
    2b10:	00340700 	eorseq	r0, r4, r0, lsl #14
    2b14:	0b3a0803 	bleq	e84b28 <__Stack_Size+0xe84328>
    2b18:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2b1c:	00001802 	andeq	r1, r0, r2, lsl #16
    2b20:	03003408 	movweq	r3, #1032	; 0x408
    2b24:	3b0b3a08 	blcc	2d134c <__Stack_Size+0x2d0b4c>
    2b28:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2b2c:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    2b30:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2b34:	0b3b0b3a 	bleq	ec5824 <__Stack_Size+0xec5024>
    2b38:	17021349 	strne	r1, [r2, -r9, asr #6]
    2b3c:	Address 0x00002b3c is out of bounds.


Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000071 	andeq	r0, r0, r1, ror r0
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00310002 	eorseq	r0, r1, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	73010000 	movwvc	r0, #4096	; 0x1000
      1c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
      24:	5f630000 	svcpl	0x00630000
      28:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	6174735f 	cmnvs	r4, pc, asr r3
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	70757472 	rsbsvc	r7, r5, r2, ror r4
      34:	0100732e 	tsteq	r0, lr, lsr #6
      38:	00000000 	andeq	r0, r0, r0

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	0b4c0205 	bleq	1300858 <__Stack_Size+0x1300058>

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	c1030800 	tstgt	r3, r0, lsl #16
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	31210100 	teqcc	r1, r0, lsl #2
      48:	23212121 	teqcs	r1, #1073741832	; 0x40000008
      4c:	21212121 	teqcs	r1, r1, lsr #2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	2131212f 	teqcs	r1, pc, lsr #2
      54:	30212131 	eorcc	r2, r1, r1, lsr r1
      58:	2068032f 	rsbcs	r0, r8, pc, lsr #6
      5c:	36322f34 	shasxcc	r2, r2, r4
      60:	01000202 	tsteq	r0, r2, lsl #4
      64:	02050001 	andeq	r0, r5, #1
      68:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
      6c:	0100eb03 	tsteq	r0, r3, lsl #22
      70:	01000202 	tsteq	r0, r2, lsl #4
      74:	0000a201 	andeq	sl, r0, r1, lsl #4
      78:	33000200 	movwcc	r0, #512	; 0x200
      7c:	02000000 	andeq	r0, r0, #0
      80:	0d0efb01 	vstreq	d15, [lr, #-4]
      84:	01010100 	mrseq	r0, (UNDEF: 17)
      88:	00000001 	andeq	r0, r0, r1
      8c:	01000001 	tsteq	r0, r1
      90:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
      94:	5f32336d 	svcpl	0x0032336d
      98:	0062696c 	rsbeq	r6, r2, ip, ror #18
      9c:	726f6300 	rsbvc	r6, pc, #0, 6
      a0:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
      a4:	616d5f33 	cmnvs	sp, r3, lsr pc
	f25519_select(x, a, b, (a[0] ^ parity) & 1);

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
	f25519_normalize(a);
	f25519_normalize(c);
      a8:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}

	return f25519_eq(a, c);
      ac:	00010053 	andeq	r0, r1, r3, asr r0
      b0:	05000000 	streq	r0, [r0, #-0]
      b4:	00000002 	andeq	r0, r0, r2
	uint8_t ok;

	mx2ey(ey, mx);
	ok = ey2ex(ex, ey, parity);

	f25519_normalize(ex);
      b8:	01370300 	teqeq	r7, r0, lsl #6
	f25519_normalize(ey);
      bc:	200b0321 	andcs	r0, fp, r1, lsr #6
      c0:	200b0321 	andcs	r0, fp, r1, lsr #6

	return ok;
}
      c4:	200b0321 	andcs	r0, fp, r1, lsr #6
      c8:	200b032f 	andcs	r0, fp, pc, lsr #6
      cc:	200b032f 	andcs	r0, fp, pc, lsr #6
      d0:	200b032f 	andcs	r0, fp, pc, lsr #6
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
      d4:	200b0321 	andcs	r0, fp, r1, lsr #6
      d8:	200b032f 	andcs	r0, fp, pc, lsr #6
		minusp[i] = c;
      dc:	0a032f2f 	beq	cbda0 <__Stack_Size+0xcb5a0>
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
      e0:	0b032f20 	bleq	cbd68 <__Stack_Size+0xcb568>
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
      e4:	0b032f20 	bleq	cbd6c <__Stack_Size+0xcb56c>

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
      e8:	0b032f20 	bleq	cbd70 <__Stack_Size+0xcb570>
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
      ec:	0b032f20 	bleq	cbd74 <__Stack_Size+0xcb574>
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
      f0:	0b032120 	bleq	c8578 <__Stack_Size+0xc7d78>
      f4:	0b032120 	bleq	c857c <__Stack_Size+0xc7d7c>
      f8:	0b032f20 	bleq	cbd80 <__Stack_Size+0xcb580>
      fc:	0b032120 	bleq	c8584 <__Stack_Size+0xc7d84>
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     100:	0b032120 	bleq	c8588 <__Stack_Size+0xc7d88>

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
     104:	0b032f20 	bleq	cbd8c <__Stack_Size+0xcb58c>
     108:	0b032f20 	bleq	cbd90 <__Stack_Size+0xcb590>
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     10c:	0a032f20 	beq	cbd94 <__Stack_Size+0xcb594>
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
     110:	0b032120 	bleq	c8598 <__Stack_Size+0xc7d98>
     114:	01022120 	tsteq	r2, r0, lsr #2
     118:	94010100 	strls	r0, [r1], #-256	; 0x100
     11c:	02000004 	andeq	r0, r0, #4
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     120:	0000be00 	andeq	fp, r0, r0, lsl #28
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
     124:	fb010200 	blx	4092e <__Stack_Size+0x4012e>
     128:	01000d0e 	tsteq	r0, lr, lsl #26
		fprime_copy(plusa, r);
		fprime_add(plusa, a, modulus);

		fprime_select(r, r, plusa, bit);
	}
}
     12c:	00010101 	andeq	r0, r1, r1, lsl #2

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
     130:	00010000 	andeq	r0, r1, r0
	i <<= 3;

	while (x) {
     134:	2f2e0100 	svccs	0x002e0100
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
     138:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     13c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
	f25519_mul__distinct(x3, a, a);

	f25519_mul_c(a, x1z1, 486662);
	f25519_add(a, x1sq, a);
	f25519_add(a, z1sq, a);
	f25519_mul__distinct(x1sq, x1z1, a);
     140:	2f2e0062 	svccs	0x002e0062
	f25519_mul_c(z3, x1sq, 4);
     144:	5f627375 	svcpl	0x00627375
     148:	0062696c 	rsbeq	r6, r2, ip, ror #18
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	62737500 	rsbsvs	r7, r3, #0, 10
     150:	0000632e 	andeq	r6, r0, lr, lsr #6
     154:	74730000 	ldrbtvc	r0, [r3], #-0
	f25519_sub(b, x3, z3); /* D */
     158:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     15c:	5f783031 	svcpl	0x00783031
	f25519_mul__distinct(da, a, b);
     160:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     164:	0100682e 	tsteq	r0, lr, lsr #16
     168:	61680000 	cmnvs	r8, r0

	f25519_sub(b, x2, z2);
     16c:	61776472 	cmnvs	r7, r2, ror r4
     170:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
	f25519_add(a, x3, z3); /* C */
     174:	00000000 	andeq	r0, r0, r0
     178:	5f627375 	svcpl	0x00627375
     17c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
	f25519_mul__distinct(cb, a, b);
     180:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     184:	73750000 	cmnvc	r5, #0

	f25519_add(a, da, cb);
     188:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     18c:	00682e66 	rsbeq	r2, r8, r6, ror #28
     190:	75000002 	strvc	r0, [r0, #-2]
	f25519_mul__distinct(b, a, a);
     194:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     198:	00000000 	andeq	r0, r0, r0
	f25519_mul__distinct(x5, z1, b);
     19c:	5f627375 	svcpl	0x00627375
     1a0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     1a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000

	f25519_sub(a, da, cb);
     1a8:	73750000 	cmnvc	r5, #0
     1ac:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
	f25519_mul__distinct(b, a, a);
     1b0:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     1b4:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     1b8:	0000682e 	andeq	r6, r0, lr, lsr #16

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	66640000 	strbtvs	r0, [r4], -r0
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	00682e75 	rsbeq	r2, r8, r5, ror lr
     1c4:	75000000 	strvc	r0, [r0, #-0]

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
     1cc:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
     1d0:	00020068 	andeq	r0, r2, r8, rrx
     1d4:	62737500 	rsbsvs	r7, r3, #0, 10
		f25519_select(zm1, zm1, zm, bit);
     1d8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     1dc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1e0:	00000000 	andeq	r0, r0, r0
		f25519_select(xm, xm, xms, bit);
     1e4:	0b980205 	bleq	fe600a00 <BootRAM+0xd5711a1>
     1e8:	a7030800 	strge	r0, [r3, -r0, lsl #16]
     1ec:	01020101 	tsteq	r2, r1, lsl #2
		f25519_select(zm, zm, zms, bit);
     1f0:	00010100 	andeq	r0, r1, r0, lsl #2
     1f4:	0b9c0205 	bleq	fe700a10 <BootRAM+0xd6711b1>
     1f8:	d7030800 	strle	r0, [r3, -r0, lsl #16]
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	01020102 	tsteq	r2, r2, lsl #2
     200:	00010100 	andeq	r0, r1, r0, lsl #2
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	0ba00205 	bleq	fe800a20 <BootRAM+0xd7711c1>
     208:	dc030800 	stcle	8, cr0, [r3], {-0}
	f25519_mul__distinct(result, zm1, xm);
     20c:	01020102 	tsteq	r2, r2, lsl #2
     210:	00010100 	andeq	r0, r1, r0, lsl #2
	f25519_normalize(result);
     214:	0ba40205 	bleq	fe900a30 <BootRAM+0xd8711d1>
     218:	93030800 	movwls	r0, #14336	; 0x3800
}
     21c:	24150103 	ldrcs	r0, [r5], #-259	; 0x103
     220:	01000402 	tsteq	r0, r2, lsl #8
     224:	02050001 	andeq	r0, r5, #1
     228:	08000bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp}
     22c:	0103bf03 	tsteq	r3, r3, lsl #30
     230:	01000102 	tsteq	r0, r2, lsl #2
     234:	02050001 	andeq	r0, r5, #1
     238:	08000bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp}
     23c:	0103c403 	tsteq	r3, r3, lsl #8
     240:	08024b13 	stmdaeq	r2, {r0, r1, r4, r8, r9, fp, lr}
     244:	00010100 	andeq	r0, r1, r0, lsl #2
     248:	0bcc0205 	bleq	ff300a64 <BootRAM+0xe271205>
     24c:	cb030800 	blgt	c2254 <__Stack_Size+0xc1a54>
     250:	01020103 	tsteq	r2, r3, lsl #2
     254:	00010100 	andeq	r0, r1, r0, lsl #2
     258:	0bd00205 	bleq	ff400a74 <BootRAM+0xe371215>
     25c:	d0030800 	andle	r0, r3, r0, lsl #16
     260:	01020103 	tsteq	r2, r3, lsl #2
     264:	00010100 	andeq	r0, r1, r0, lsl #2
     268:	0bd40205 	bleq	ff500a84 <BootRAM+0xe471225>
     26c:	d5030800 	strle	r0, [r3, #-2048]	; 0x800
     270:	01020103 	tsteq	r2, r3, lsl #2
     274:	00010100 	andeq	r0, r1, r0, lsl #2
     278:	0bd80205 	bleq	ff600a94 <BootRAM+0xe571235>
     27c:	da030800 	ble	c2284 <__Stack_Size+0xc1a84>
     280:	01020103 	tsteq	r2, r3, lsl #2
     284:	00010100 	andeq	r0, r1, r0, lsl #2
     288:	0bdc0205 	bleq	ff700aa4 <BootRAM+0xe671245>
     28c:	df030800 	svcle	0x00030800
     290:	01020103 	tsteq	r2, r3, lsl #2
     294:	00010100 	andeq	r0, r1, r0, lsl #2
     298:	0be00205 	bleq	ff800ab4 <BootRAM+0xe771255>
     29c:	e4030800 	str	r0, [r3], #-2048	; 0x800
     2a0:	01020103 	tsteq	r2, r3, lsl #2
     2a4:	00010100 	andeq	r0, r1, r0, lsl #2
     2a8:	0be40205 	bleq	ff900ac4 <BootRAM+0xe871265>
     2ac:	e9030800 	stmdb	r3, {fp}
     2b0:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     2b4:	01010006 	tsteq	r1, r6
     2b8:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
     2bc:	0308000b 	movweq	r0, #32779	; 0x800b
     2c0:	210102bd 			; <UNDEFINED> instruction: 0x210102bd
     2c4:	211f2130 	tstcs	pc, r0, lsr r1	; <UNPREDICTABLE>
     2c8:	23222f1f 	teqcs	r2, #31, 30	; 0x7c
     2cc:	2323221b 	teqcs	r3, #-1342177279	; 0xb0000001
     2d0:	1e22831d 	mcrne	3, 1, r8, cr2, cr13, {0}
     2d4:	21572184 	cmpcs	r7, r4, lsl #3
     2d8:	232d212d 	teqcs	sp, #1073741835	; 0x4000000b
     2dc:	7630221e 			; <UNDEFINED> instruction: 0x7630221e
     2e0:	221f2f3e 	andscs	r2, pc, #62, 30	; 0xf8
     2e4:	0100082d 	tsteq	r0, sp, lsr #16
     2e8:	02050001 	andeq	r0, r5, #1
     2ec:	08000c98 	stmdaeq	r0, {r3, r4, r7, sl, fp}
     2f0:	0102e003 	tsteq	r2, r3
     2f4:	03251b25 	teqeq	r5, #37888	; 0x9400
     2f8:	0321661f 	teqeq	r1, #32505856	; 0x1f00000
     2fc:	084c2061 	stmdaeq	ip, {r0, r5, r6, sp}^
     300:	20100317 	andscs	r0, r0, r7, lsl r3
     304:	211e2121 	tstcs	lr, r1, lsr #2
     308:	69032221 	stmdbvs	r3, {r0, r5, r9, sp}
     30c:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
     310:	02211c21 	eoreq	r1, r1, #8448	; 0x2100
     314:	0101000c 	tsteq	r1, ip
     318:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
     31c:	0308000d 	movweq	r0, #32781	; 0x800d
     320:	1301039d 	movwne	r0, #5021	; 0x139d
     324:	01000602 	tsteq	r0, r2, lsl #12
     328:	02050001 	andeq	r0, r5, #1
     32c:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
     330:	0103a203 	tsteq	r3, r3, lsl #4
     334:	00060213 	andeq	r0, r6, r3, lsl r2
     338:	05000101 	streq	r0, [r0, #-257]	; 0x101
     33c:	000d2402 	andeq	r2, sp, r2, lsl #8
     340:	03a70308 			; <UNDEFINED> instruction: 0x03a70308
     344:	313d1301 	teqcc	sp, r1, lsl #6
     348:	0006025a 	andeq	r0, r6, sl, asr r2
     34c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     350:	000d4402 	andeq	r4, sp, r2, lsl #8
     354:	03b10308 			; <UNDEFINED> instruction: 0x03b10308
     358:	06021301 	streq	r1, [r2], -r1, lsl #6
     35c:	00010100 	andeq	r0, r1, r0, lsl #2
     360:	0d500205 	lfmeq	f0, 2, [r0, #-20]	; 0xffffffec
     364:	88030800 	stmdahi	r3, {fp}
     368:	7a210103 	bvc	84077c <__Stack_Size+0x83ff7c>
     36c:	023d1b21 	eorseq	r1, sp, #33792	; 0x8400
     370:	01010007 	tsteq	r1, r7
     374:	78020500 	stmdavc	r2, {r8, sl}
     378:	0308000d 	movweq	r0, #32781	; 0x800d
     37c:	3d0102ad 	sfmcc	f0, 4, [r1, #-692]	; 0xfffffd4c
     380:	3c4e0330 	mcrrcc	3, 3, r0, lr, cr0
     384:	03203203 	teqeq	r0, #805306368	; 0x30000000
     388:	2222204e 	eorcs	r2, r2, #78	; 0x4e
     38c:	03241c30 	teqeq	r4, #48, 24	; 0x3000
     390:	0e032e7a 	mcreq	14, 0, r2, cr3, cr10, {3}
     394:	2074033c 	rsbscs	r0, r4, ip, lsr r3
     398:	03200c03 	teqeq	r0, #768	; 0x300
     39c:	0b032075 	bleq	c8578 <__Stack_Size+0xc7d78>
     3a0:	20760320 	rsbscs	r0, r6, r0, lsr #6
     3a4:	03272130 	teqeq	r7, #48, 2
     3a8:	032d2e28 	teqeq	sp, #40, 28	; 0x280
     3ac:	032e01c0 	teqeq	lr, #192, 2	; 0x30
     3b0:	03207ec1 	teqeq	r0, #3088	; 0xc10
     3b4:	032001c3 	teqeq	r0, #-1073741776	; 0xc0000030
     3b8:	03207ebe 	teqeq	r0, #3040	; 0xbe0
     3bc:	2f2001bf 	svccs	0x002001bf
     3c0:	03322b2f 	teqeq	r2, #48128	; 0xbc00
     3c4:	2f2e7ec2 	svccs	0x002e7ec2
     3c8:	01001202 	tsteq	r0, r2, lsl #4
     3cc:	02050001 	andeq	r0, r5, #1
     3d0:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
     3d4:	0100ec03 	tsteq	r0, r3, lsl #24
     3d8:	03201803 	teqeq	r0, #196608	; 0x30000
     3dc:	18032068 	stmdane	r3, {r3, r5, r6, sp}
     3e0:	2f1f2f20 	svccs	0x001f2f20
     3e4:	2e780360 	cdpcs	3, 7, cr0, cr8, cr0, {3}
     3e8:	04020044 	streq	r0, [r2], #-68	; 0x44
     3ec:	063c0602 	ldrteq	r0, [ip], -r2, lsl #12
     3f0:	1c232f6d 	stcne	15, cr2, [r3], #-436	; 0xfffffe4c
     3f4:	212c2121 	teqcs	ip, r1, lsr #2
     3f8:	0321302f 	teqeq	r1, #47	; 0x2f
     3fc:	6d032016 	stcvs	0, cr2, [r3, #-88]	; 0xffffffa8
     400:	000c022e 	andeq	r0, ip, lr, lsr #4
     404:	05000101 	streq	r0, [r0, #-257]	; 0x101
     408:	000e7402 	andeq	r7, lr, r2, lsl #8
     40c:	01a00308 	lsleq	r0, r8, #6
     410:	00f40301 	rscseq	r0, r4, r1, lsl #6
     414:	032d2101 	teqeq	sp, #1073741824	; 0x40000000
     418:	03207f8c 	teqeq	r0, #140, 30	; 0x230
     41c:	222000f4 	eorcs	r0, r0, #244	; 0xf4
     420:	200d031f 	andcs	r0, sp, pc, lsl r3
     424:	033c7403 	teqeq	ip, #50331648	; 0x3000000
     428:	024f200c 	subeq	r2, pc, #12
     42c:	0101000c 	tsteq	r1, ip
     430:	00020500 	andeq	r0, r2, r0, lsl #10
     434:	03000000 	movweq	r0, #0
     438:	140101ad 	strne	r0, [r1], #-429	; 0x1ad
     43c:	01000202 	tsteq	r0, r2, lsl #4
     440:	02050001 	andeq	r0, r5, #1
     444:	00000000 	andeq	r0, r0, r0
     448:	0101b303 	tsteq	r1, r3, lsl #6
     44c:	251b2514 	ldrcs	r2, [fp, #-1300]	; 0x514
     450:	023f221b 	eorseq	r2, pc, #-1342177279	; 0xb0000001
     454:	01010006 	tsteq	r1, r6
     458:	00020500 	andeq	r0, r2, r0, lsl #10
     45c:	03000000 	movweq	r0, #0
     460:	160101be 			; <UNDEFINED> instruction: 0x160101be
     464:	2b252c22 	blcs	94b4f4 <__Stack_Size+0x94acf4>
     468:	00040231 	andeq	r0, r4, r1, lsr r2
     46c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     470:	000eac02 	andeq	sl, lr, r2, lsl #24
     474:	01cb0308 	biceq	r0, fp, r8, lsl #6
     478:	1d1f1601 	ldcne	6, cr1, [pc, #-4]	; 47c <_Minimum_Stack_Size+0x37c>
     47c:	1a033024 	bne	cc514 <__Stack_Size+0xcbd14>
     480:	222f5982 	eorcs	r5, pc, #2129920	; 0x208000
     484:	2f1f232c 	svccs	0x001f232c
     488:	03200903 	teqeq	r0, #49152	; 0xc000
     48c:	2c223c49 	stccs	12, cr3, [r2], #-292	; 0xfffffedc
     490:	10032b25 	andne	r2, r3, r5, lsr #22
     494:	20700320 	rsbscs	r0, r0, r0, lsr #6
     498:	200d0323 	andcs	r0, sp, r3, lsr #6
     49c:	03202503 	teqeq	r0, #12582912	; 0xc00000
     4a0:	2c223c49 	stccs	12, cr3, [r2], #-292	; 0xfffffedc
     4a4:	14032b25 	strne	r2, [r3], #-2853	; 0xb25
     4a8:	206c0320 	rsbcs	r0, ip, r0, lsr #6
     4ac:	20110323 	andscs	r0, r1, r3, lsr #6
     4b0:	03202103 	teqeq	r0, #-1073741824	; 0xc0000000
     4b4:	032f3c62 	teqeq	pc, #25088	; 0x6200
     4b8:	66032e1d 			; <UNDEFINED> instruction: 0x66032e1d
     4bc:	3f3d593c 	svccc	0x003d593c
     4c0:	1c241d23 	stcne	13, cr1, [r4], #-140	; 0xffffff74
     4c4:	03213d22 	teqeq	r1, #2176	; 0x880
     4c8:	31392011 	teqcc	r9, r1, lsl r0
     4cc:	01000802 	tsteq	r0, r2, lsl #16
     4d0:	02050001 	andeq	r0, r5, #1
     4d4:	00000000 	andeq	r0, r0, r0
     4d8:	0101fc03 	tsteq	r1, r3, lsl #24
     4dc:	22221e14 	eorcs	r1, r2, #20, 28	; 0x140
     4e0:	1f1d2222 	svcne	0x001d2222
     4e4:	2e7a0324 	cdpcs	3, 7, cr0, cr10, cr4, {1}
     4e8:	200c033e 	andcs	r0, ip, lr, lsr r3
     4ec:	03207503 	teqeq	r0, #12582912	; 0xc00000
     4f0:	7603200b 	strvc	r2, [r3], -fp
     4f4:	200a0320 	andcs	r0, sl, r0, lsr #6
     4f8:	21207803 	teqcs	r0, r3, lsl #16
     4fc:	0d023327 	stceq	3, cr3, [r2, #-156]	; 0xffffff64
     500:	00010100 	andeq	r0, r1, r0, lsl #2
     504:	00000205 	andeq	r0, r0, r5, lsl #4
     508:	93030000 	movwls	r0, #12288	; 0x3000
     50c:	21130102 	tstcs	r3, r2, lsl #2
     510:	1f21211e 	svcne	0x0021211e
     514:	0d031f22 	stceq	15, cr1, [r3, #-136]	; 0xffffff78
     518:	3c740320 	ldclcc	3, cr0, [r4], #-128	; 0xffffff80
     51c:	4f200c03 	svcmi	0x00200c03
     520:	024d1d23 	subeq	r1, sp, #2240	; 0x8c0
     524:	01010008 	tsteq	r1, r8
     528:	74020500 	strvc	r0, [r2], #-1280	; 0x500
     52c:	0308000f 	movweq	r0, #32783	; 0x800f
     530:	230103f0 	movwcs	r0, #5104	; 0x13f0
     534:	2f40231d 	svccs	0x0040231d
     538:	01000602 	tsteq	r0, r2, lsl #12
     53c:	02050001 	andeq	r0, r5, #1
     540:	08000f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp}
     544:	0103fb03 	tsteq	r3, r3, lsl #22
     548:	022f4e30 	eoreq	r4, pc, #48, 28	; 0x300
     54c:	01010003 	tsteq	r1, r3
     550:	a8020500 	stmdage	r2, {r8, sl}
     554:	0308000f 	movweq	r0, #32783	; 0x800f
     558:	21010485 	smlabbcs	r1, r5, r4, r0
     55c:	60331b41 	eorsvs	r1, r3, r1, asr #22
     560:	59580f03 	ldmdbpl	r8, {r0, r1, r8, r9, sl, fp}^
     564:	84036050 	strhi	r6, [r3], #-80	; 0x50
     568:	1b25587d 	blne	956764 <__Stack_Size+0x955f64>
     56c:	20038603 	andcs	r8, r3, r3, lsl #12
     570:	207cfa03 	rsbscs	pc, ip, r3, lsl #20
     574:	81033122 	tsthi	r3, r2, lsr #2
     578:	fc032003 	stc2	0, cr2, [r3], {3}
     57c:	03232e7c 	teqeq	r3, #124, 28	; 0x7c0
     580:	26200381 	strtcs	r0, [r0], -r1, lsl #7
     584:	3d1f2159 	ldfccs	f2, [pc, #-356]	; 428 <_Minimum_Stack_Size+0x328>
     588:	244d6750 	strbcs	r6, [sp], #-1872	; 0x750
     58c:	2e5d032a 	cdpcs	3, 5, cr0, cr13, cr10, {1}
     590:	5869034b 	stmdapl	r9!, {r0, r1, r3, r6, r8, r9}^
     594:	1f2f1f21 	svcne	0x002f1f21
     598:	3c790321 	ldclcc	3, cr0, [r9], #-132	; 0xffffff7c
     59c:	01001202 	tsteq	r0, r2, lsl #4
     5a0:	02050001 	andeq	r0, r5, #1
     5a4:	00000000 	andeq	r0, r0, r0
     5a8:	0104d503 	tsteq	r4, r3, lsl #10
     5ac:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
     5b0:	6e010100 	adfvss	f0, f1, f0
     5b4:	02000000 	andeq	r0, r0, #0
     5b8:	00006800 	andeq	r6, r0, r0, lsl #16
     5bc:	fb010200 	blx	40dc6 <__Stack_Size+0x405c6>
     5c0:	01000d0e 	tsteq	r0, lr, lsl #26
     5c4:	00010101 	andeq	r0, r1, r1, lsl #2
     5c8:	00010000 	andeq	r0, r1, r0
     5cc:	2f2e0100 	svccs	0x002e0100
     5d0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     5d4:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     5d8:	2f2e0062 	svccs	0x002e0062
     5dc:	5f627375 	svcpl	0x00627375
     5e0:	0062696c 	rsbeq	r6, r2, ip, ror #18
     5e4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     5e8:	31663233 	cmncc	r6, r3, lsr r2
     5ec:	745f7830 	ldrbvc	r7, [pc], #-2096	; 5f4 <_Minimum_Stack_Size+0x4f4>
     5f0:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     5f4:	00010068 	andeq	r0, r1, r8, rrx
     5f8:	62737500 	rsbsvs	r7, r3, #0, 10
     5fc:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
     600:	00682e65 	rsbeq	r2, r8, r5, ror #28
     604:	75000002 	strvc	r0, [r0, #-2]
     608:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     60c:	00000000 	andeq	r0, r0, r0
     610:	5f627375 	svcpl	0x00627375
     614:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
     618:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     61c:	632e726f 	teqvs	lr, #-268435450	; 0xf0000006
     620:	00000000 	andeq	r0, r0, r0
     624:	00020c00 	andeq	r0, r2, r0, lsl #24
     628:	97000200 	strls	r0, [r0, -r0, lsl #4]
     62c:	02000001 	andeq	r0, r0, #1
     630:	0d0efb01 	vstreq	d15, [lr, #-4]
     634:	01010100 	mrseq	r0, (UNDEF: 17)
     638:	00000001 	andeq	r0, r0, r1
     63c:	01000001 	tsteq	r0, r1
     640:	705c3a63 	subsvc	r3, ip, r3, ror #20
     644:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
     648:	66206d61 	strtvs	r6, [r0], -r1, ror #26
     64c:	73656c69 	cmnvc	r5, #26880	; 0x6900
     650:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
     654:	675c2936 	smmlarvs	ip, r6, r9, r2
     658:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
     65c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     660:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
     664:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
     668:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     66c:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
     670:	30322038 	eorscc	r2, r2, r8, lsr r0
     674:	33713431 	cmncc	r1, #822083584	; 0x31000000
     678:	62696c5c 	rsbvs	r6, r9, #92, 24	; 0x5c00
     67c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     680:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     684:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     688:	61652d65 	cmnvs	r5, r5, ror #26
     68c:	345c6962 	ldrbcc	r6, [ip], #-2402	; 0x962
     690:	342e382e 	strtcc	r3, [lr], #-2094	; 0x82e
     694:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     698:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     69c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     6a0:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
     6a4:	206d6172 	rsbcs	r6, sp, r2, ror r1
     6a8:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
     6ac:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
     6b0:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
     6b4:	20756e67 	rsbscs	r6, r5, r7, ror #28
     6b8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 4f0 <_Minimum_Stack_Size+0x3f0>
     6bc:	72612073 	rsbvc	r2, r1, #115	; 0x73
     6c0:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
     6c4:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
     6c8:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
     6cc:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
     6d0:	71343130 	teqvc	r4, r0, lsr r1
     6d4:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
     6d8:	6f6e2d6d 	svcvs	0x006e2d6d
     6dc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     6e0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     6e4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     6e8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     6ec:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     6f0:	00656e69 	rsbeq	r6, r5, r9, ror #28
     6f4:	705c3a63 	subsvc	r3, ip, r3, ror #20
     6f8:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
     6fc:	66206d61 	strtvs	r6, [r0], -r1, ror #26
     700:	73656c69 	cmnvc	r5, #26880	; 0x6900
     704:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
     708:	675c2936 	smmlarvs	ip, r6, r9, r2
     70c:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
     710:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     714:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
     718:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
     71c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     720:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
     724:	30322038 	eorscc	r2, r2, r8, lsr r0
     728:	33713431 	cmncc	r1, #822083584	; 0x31000000
     72c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     730:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     734:	61652d65 	cmnvs	r5, r5, ror #26
     738:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     73c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     740:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
     744:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     748:	6c5f3233 	lfmvs	f3, 2, [pc], {51}	; 0x33
     74c:	00006269 	andeq	r6, r0, r9, ror #4
     750:	6e69616d 	powvsez	f6, f1, #5.0
     754:	0000632e 	andeq	r6, r0, lr, lsr #6
     758:	74730000 	ldrbtvc	r0, [r3], #-0
     75c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     760:	0100682e 	tsteq	r0, lr, lsr #16
     764:	645f0000 	ldrbvs	r0, [pc], #-0	; 76c <_Minimum_Stack_Size+0x66c>
     768:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
     76c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 774 <_Minimum_Stack_Size+0x674>
     770:	73657079 	cmnvc	r5, #121	; 0x79
     774:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     778:	74730000 	ldrbtvc	r0, [r3], #-0
     77c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     780:	0300682e 	movweq	r6, #2094	; 0x82e
     784:	74730000 	ldrbtvc	r0, [r3], #-0
     788:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     78c:	5f783031 	svcpl	0x00783031
     790:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     794:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     798:	6d690000 	stclvs	0, cr0, [r9, #-0]
     79c:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
     7a0:	00000068 	andeq	r0, r0, r8, rrx
     7a4:	72616800 	rsbvc	r6, r1, #0, 16
     7a8:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
     7ac:	00682e65 	rsbeq	r2, r8, r5, ror #28
     7b0:	75000000 	strvc	r0, [r0, #-0]
     7b4:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     7b8:	00000000 	andeq	r0, r0, r0
     7bc:	2e756664 	cdpcs	6, 7, cr6, cr5, cr4, {3}
     7c0:	00000068 	andeq	r0, r0, r8, rrx
     7c4:	05000000 	streq	r0, [r0, #-0]
     7c8:	00000002 	andeq	r0, r0, r2
     7cc:	013d0300 	teqeq	sp, r0, lsl #6
     7d0:	02002220 	andeq	r2, r0, #32, 4
     7d4:	00210204 	eoreq	r0, r1, r4, lsl #4
     7d8:	2d020402 	cfstrscs	mvf0, [r2, #-8]
     7dc:	02040200 	andeq	r0, r4, #0, 4
     7e0:	04020021 	streq	r0, [r2], #-33	; 0x21
     7e4:	21302d02 	teqcs	r0, r2, lsl #26
     7e8:	0007022d 	andeq	r0, r7, sp, lsr #4
     7ec:	05000101 	streq	r0, [r0, #-257]	; 0x101
     7f0:	00108c02 	andseq	r8, r0, r2, lsl #24
     7f4:	00c50308 	sbceq	r0, r5, r8, lsl #6
     7f8:	2f2f3201 	svccs	0x002f3201
     7fc:	2f2f2f2f 	svccs	0x002f2f2f
     800:	3f5d3e2f 	svccc	0x005d3e2f
     804:	14034b68 	strne	r4, [r3], #-2920	; 0xb68
     808:	4c92a466 	cfldrsmi	mvf10, [r2], {102}	; 0x66
     80c:	3c64033d 	stclcc	3, cr0, [r4], #-244	; 0xffffff0c
     810:	033c1103 	teqeq	ip, #-1073741824	; 0xc0000000
     814:	32039054 	andcc	r9, r3, #84	; 0x54
     818:	84312b20 	ldrthi	r2, [r1], #-2848	; 0xb20
     81c:	78033d4c 	stmdavc	r3, {r2, r3, r6, r8, sl, fp, ip, sp}
     820:	2e0e032e 	cdpcs	3, 0, cr0, cr14, cr14, {1}
     824:	5e03403d 	mcrpl	0, 0, r4, cr3, cr13, {1}
     828:	3c0c033c 	stccc	3, cr0, [ip], {60}	; 0x3c
     82c:	3e9e7903 	cdpcc	9, 9, cr7, cr14, cr3, {0}
     830:	01001902 	tsteq	r0, r2, lsl #18
     834:	00062401 	andeq	r2, r6, r1, lsl #8
     838:	ac000200 	sfmge	f0, 4, [r0], {-0}
     83c:	02000001 	andeq	r0, r0, #1
     840:	0d0efb01 	vstreq	d15, [lr, #-4]
     844:	01010100 	mrseq	r0, (UNDEF: 17)
     848:	00000001 	andeq	r0, r0, r1
     84c:	01000001 	tsteq	r0, r1
     850:	705c3a63 	subsvc	r3, ip, r3, ror #20
     854:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
     858:	66206d61 	strtvs	r6, [r0], -r1, ror #26
     85c:	73656c69 	cmnvc	r5, #26880	; 0x6900
     860:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
     864:	675c2936 	smmlarvs	ip, r6, r9, r2
     868:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
     86c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     870:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
     874:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
     878:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     87c:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
     880:	30322038 	eorscc	r2, r2, r8, lsr r0
     884:	33713431 	cmncc	r1, #822083584	; 0x31000000
     888:	62696c5c 	rsbvs	r6, r9, #92, 24	; 0x5c00
     88c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     890:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     894:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     898:	61652d65 	cmnvs	r5, r5, ror #26
     89c:	345c6962 	ldrbcc	r6, [ip], #-2402	; 0x962
     8a0:	342e382e 	strtcc	r3, [lr], #-2094	; 0x82e
     8a4:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     8a8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     8ac:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     8b0:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
     8b4:	206d6172 	rsbcs	r6, sp, r2, ror r1
     8b8:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
     8bc:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
     8c0:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
     8c4:	20756e67 	rsbscs	r6, r5, r7, ror #28
     8c8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 700 <_Minimum_Stack_Size+0x600>
     8cc:	72612073 	rsbvc	r2, r1, #115	; 0x73
     8d0:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
     8d4:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
     8d8:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
     8dc:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
     8e0:	71343130 	teqvc	r4, r0, lsr r1
     8e4:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
     8e8:	6f6e2d6d 	svcvs	0x006e2d6d
     8ec:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     8f0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     8f4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     8f8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     8fc:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     900:	00656e69 	rsbeq	r6, r5, r9, ror #28
     904:	705c3a63 	subsvc	r3, ip, r3, ror #20
     908:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
     90c:	66206d61 	strtvs	r6, [r0], -r1, ror #26
     910:	73656c69 	cmnvc	r5, #26880	; 0x6900
     914:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
     918:	675c2936 	smmlarvs	ip, r6, r9, r2
     91c:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
     920:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     924:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
     928:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
     92c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     930:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
     934:	30322038 	eorscc	r2, r2, r8, lsr r0
     938:	33713431 	cmncc	r1, #822083584	; 0x31000000
     93c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     940:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     944:	61652d65 	cmnvs	r5, r5, ror #26
     948:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     94c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     950:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
     954:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     958:	6c5f3233 	lfmvs	f3, 2, [pc], {51}	; 0x33
     95c:	00006269 	andeq	r6, r0, r9, ror #4
     960:	64726168 	ldrbtvs	r6, [r2], #-360	; 0x168
     964:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     968:	0000632e 	andeq	r6, r0, lr, lsr #6
     96c:	74730000 	ldrbtvc	r0, [r3], #-0
     970:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     974:	0100682e 	tsteq	r0, lr, lsr #16
     978:	74730000 	ldrbtvc	r0, [r3], #-0
     97c:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
     980:	0100682e 	tsteq	r0, lr, lsr #16
     984:	645f0000 	ldrbvs	r0, [pc], #-0	; 98c <__Stack_Size+0x18c>
     988:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
     98c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 994 <__Stack_Size+0x194>
     990:	73657079 	cmnvc	r5, #121	; 0x79
     994:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     998:	74730000 	ldrbtvc	r0, [r3], #-0
     99c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     9a0:	0300682e 	movweq	r6, #2094	; 0x82e
     9a4:	74730000 	ldrbtvc	r0, [r3], #-0
     9a8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     9ac:	5f783031 	svcpl	0x00783031
     9b0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     9b4:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     9b8:	61680000 	cmnvs	r8, r0
     9bc:	61776472 	cmnvs	r7, r2, ror r4
     9c0:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     9c4:	00000000 	andeq	r0, r0, r0
     9c8:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
     9cc:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
     9d0:	00003e6e 	andeq	r3, r0, lr, ror #28
     9d4:	74730000 	ldrbtvc	r0, [r3], #-0
     9d8:	2e6f6964 	cdpcs	9, 6, cr6, cr15, cr4, {3}
     9dc:	00030068 	andeq	r0, r3, r8, rrx
     9e0:	62737500 	rsbsvs	r7, r3, #0, 10
     9e4:	0000682e 	andeq	r6, r0, lr, lsr #16
     9e8:	00000000 	andeq	r0, r0, r0
     9ec:	00000205 	andeq	r0, r0, r5, lsl #4
     9f0:	b7030000 	strlt	r0, [r3, -r0]
     9f4:	033f0102 	teqeq	pc, #-2147483648	; 0x80000000
     9f8:	0a032076 	beq	c8bd8 <__Stack_Size+0xc83d8>
     9fc:	2076033c 	rsbscs	r0, r6, ip, lsr r3
     a00:	034a7603 	movteq	r7, #42499	; 0xa603
     a04:	25673c7a 	strbcs	r3, [r7, #-3194]!	; 0xc7a
     a08:	024a1703 	subeq	r1, sl, #786432	; 0xc0000
     a0c:	0101000a 	tsteq	r1, sl
     a10:	00020500 	andeq	r0, r2, r0, lsl #10
     a14:	03000000 	movweq	r0, #0
     a18:	3f0102b7 	svccc	0x000102b7
     a1c:	03207603 	teqeq	r0, #3145728	; 0x300000
     a20:	76033c0a 	strvc	r3, [r3], -sl, lsl #24
     a24:	4a760320 	bmi	1d816ac <__Stack_Size+0x1d80eac>
     a28:	673c7a03 	ldrvs	r7, [ip, -r3, lsl #20]!
     a2c:	4a170325 	bmi	5c16c8 <__Stack_Size+0x5c0ec8>
     a30:	01000a02 	tsteq	r0, r2, lsl #20
     a34:	02050001 	andeq	r0, r5, #1
     a38:	080011c8 	stmdaeq	r0, {r3, r6, r7, r8, ip}
     a3c:	14013903 	strne	r3, [r1], #-2307	; 0x903
     a40:	04024b3b 	streq	r4, [r2], #-2875	; 0xb3b
     a44:	00010100 	andeq	r0, r1, r0, lsl #2
     a48:	11e00205 	mvnne	r0, r5, lsl #4
     a4c:	3e030800 	cdpcc	8, 0, cr0, cr3, cr0, {0}
     a50:	025d1401 	subseq	r1, sp, #16777216	; 0x1000000
     a54:	01010004 	tsteq	r1, r4
     a58:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
     a5c:	03080011 	movweq	r0, #32785	; 0x8011
     a60:	030100c8 	movweq	r0, #4296	; 0x10c8
     a64:	0d032073 	stceq	0, cr2, [r3, #-460]	; 0xfffffe34
     a68:	6e03323c 	mcrvs	2, 0, r3, cr3, cr12, {1}
     a6c:	11033d20 	tstne	r3, r0, lsr #26
     a70:	04020066 	streq	r0, [r2], #-102	; 0x66
     a74:	20068401 	andcs	r8, r6, r1, lsl #8
     a78:	02040200 	andeq	r0, r4, #0, 4
     a7c:	02002206 	andeq	r2, r0, #1610612736	; 0x60000000
     a80:	031e0204 	tsteq	lr, #4, 4	; 0x40000000
     a84:	02002e6d 	andeq	r2, r0, #1744	; 0x6d0
     a88:	1c030204 	sfmne	f0, 4, [r3], {4}
     a8c:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     a90:	77031e02 	strvc	r1, [r3, -r2, lsl #28]
     a94:	3c6f032e 	stclcc	3, cr0, [pc], #-184	; 9e4 <__Stack_Size+0x1e4>
     a98:	03201103 	teqeq	r0, #-1073741824	; 0xc0000000
     a9c:	7103200f 	tstvc	r3, pc
     aa0:	3c6f032e 	stclcc	3, cr0, [pc], #-184	; 9f0 <__Stack_Size+0x1f0>
     aa4:	022e1103 	eoreq	r1, lr, #-1073741824	; 0xc0000000
     aa8:	01010002 	tsteq	r1, r2
     aac:	00020500 	andeq	r0, r2, r0, lsl #10
     ab0:	03000000 	movweq	r0, #0
     ab4:	0001029f 	muleq	r1, pc, r2	; <UNPREDICTABLE>
     ab8:	13010402 	movwne	r0, #5122	; 0x1402
     abc:	0002023d 	andeq	r0, r2, sp, lsr r2
     ac0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ac4:	00000002 	andeq	r0, r0, r2
     ac8:	02a50300 	adceq	r0, r5, #0, 6
     acc:	7a031301 	bvc	c56d8 <__Stack_Size+0xc4ed8>
     ad0:	02253d2e 	eoreq	r3, r5, #2944	; 0xb80
     ad4:	01010005 	tsteq	r1, r5
     ad8:	00020500 	andeq	r0, r2, r0, lsl #10
     adc:	03000000 	movweq	r0, #0
     ae0:	2e0102ae 	cdpcs	2, 0, cr0, cr1, cr14, {5}
     ae4:	66760322 	ldrbtvs	r0, [r6], -r2, lsr #6
     ae8:	673c7a03 	ldrvs	r7, [ip, -r3, lsl #20]!
     aec:	4a0f0325 	bmi	3c1788 <__Stack_Size+0x3c0f88>
     af0:	01000502 	tsteq	r0, r2, lsl #10
     af4:	02050001 	andeq	r0, r5, #1
     af8:	08001254 	stmdaeq	r0, {r2, r4, r6, r9, ip}
     afc:	0102b803 	tsteq	r2, r3, lsl #16
     b00:	3c78033c 	ldclcc	3, cr0, [r8], #-240	; 0xffffff10
     b04:	032e0a03 	teqeq	lr, #12288	; 0x3000
     b08:	76032076 			; <UNDEFINED> instruction: 0x76032076
     b0c:	3c7a034a 	ldclcc	3, cr0, [sl], #-296	; 0xfffffed8
     b10:	17032567 	strne	r2, [r3, -r7, ror #10]
     b14:	0007024a 	andeq	r0, r7, sl, asr #4
     b18:	05000101 	streq	r0, [r0, #-257]	; 0x101
     b1c:	00000002 	andeq	r0, r0, r2
     b20:	02c00300 	sbceq	r0, r0, #0, 6
     b24:	251d3101 	ldrcs	r3, [sp, #-257]	; 0x101
     b28:	0368231b 	cmneq	r8, #1811939328	; 0x6c000000
     b2c:	034b660b 	movteq	r6, #46603	; 0xb60b
     b30:	0c032074 	stceq	0, cr2, [r3], {116}	; 0x74
     b34:	74740320 	ldrbtvc	r0, [r4], #-800	; 0x320
     b38:	03200c03 	teqeq	r0, #768	; 0x300
     b3c:	00302e74 	eorseq	r2, r0, r4, ror lr
     b40:	06010402 	streq	r0, [r1], -r2, lsl #8
     b44:	04020020 	streq	r0, [r2], #-32
     b48:	30410601 	subcc	r0, r1, r1, lsl #12
     b4c:	0b034b45 	bleq	d3868 <__Stack_Size+0xd3068>
     b50:	02003e82 	andeq	r3, r0, #2080	; 0x820
     b54:	06320104 	ldrteq	r0, [r2], -r4, lsl #2
     b58:	3a220620 	bcc	8823e0 <__Stack_Size+0x881be0>
     b5c:	78034b33 	stmdavc	r3, {r0, r1, r4, r5, r8, r9, fp, lr}
     b60:	0100083c 	tsteq	r0, ip, lsr r8
     b64:	02050001 	andeq	r0, r5, #1
     b68:	08001298 	stmdaeq	r0, {r3, r4, r7, r9, ip}
     b6c:	0102e503 	tsteq	r2, r3, lsl #10
     b70:	20790327 	rsbscs	r0, r9, r7, lsr #6
     b74:	16035926 	strne	r5, [r3], -r6, lsr #18
     b78:	2071034a 	rsbscs	r0, r1, sl, asr #6
     b7c:	2f1e212c 	svccs	0x001e212c
     b80:	33312c2f 	teqcc	r1, #12032	; 0x2f00
     b84:	2f1f2f2c 	svccs	0x001f2f2c
     b88:	24322b32 	ldrtcs	r2, [r2], #-2866	; 0xb32
     b8c:	2e7a0322 	cdpcs	3, 7, cr0, cr10, cr2, {1}
     b90:	2f2f2f2f 	svccs	0x002f2f2f
     b94:	4b312729 	blmi	c4a840 <__Stack_Size+0xc4a040>
     b98:	01000702 	tsteq	r0, r2, lsl #14
     b9c:	02050001 	andeq	r0, r5, #1
     ba0:	08001320 	stmdaeq	r0, {r5, r8, r9, ip}
     ba4:	01038803 	tsteq	r3, r3, lsl #16
     ba8:	1f1f2113 	svcne	0x001f2113
     bac:	1b333d21 	blne	cd0038 <__Stack_Size+0xccf838>
     bb0:	591c242f 	ldmdbpl	ip, {r0, r1, r2, r3, r5, sl, sp}
     bb4:	02214c4b 	eoreq	r4, r1, #19200	; 0x4b00
     bb8:	0101000c 	tsteq	r1, ip
     bbc:	70020500 	andvc	r0, r2, r0, lsl #10
     bc0:	03080013 	movweq	r0, #32787	; 0x8013
     bc4:	15010392 	strne	r0, [r1, #-914]	; 0x392
     bc8:	02001f2f 	andeq	r1, r0, #47, 30	; 0xbc
     bcc:	4d3d0104 	ldfmis	f0, [sp, #-16]!
     bd0:	207a0334 	rsbscs	r0, sl, r4, lsr r3
     bd4:	200a0326 	andcs	r0, sl, r6, lsr #6
     bd8:	5b207603 	blpl	81e3ec <__Stack_Size+0x81dbec>
     bdc:	01040200 	mrseq	r0, R12_usr
     be0:	4a0b0351 	bmi	2c192c <__Stack_Size+0x2c112c>
     be4:	02001f2f 	andeq	r1, r0, #47, 30	; 0xbc
     be8:	3e3d0104 	rsfcce	f0, f5, f4
     bec:	000b0259 	andeq	r0, fp, r9, asr r2
     bf0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     bf4:	0013dc02 	andseq	sp, r3, r2, lsl #24
     bf8:	03bc0308 			; <UNDEFINED> instruction: 0x03bc0308
     bfc:	0a021301 	beq	85808 <__Stack_Size+0x85008>
     c00:	00010100 	andeq	r0, r1, r0, lsl #2
     c04:	13f00205 	mvnsne	r0, #1342177280	; 0x50000000
     c08:	c0030800 	andgt	r0, r3, r0, lsl #16
     c0c:	4b140103 	blmi	501020 <__Stack_Size+0x500820>
     c10:	02002f21 	andeq	r2, r0, #33, 30	; 0x84
     c14:	4b240104 	blmi	90102c <__Stack_Size+0x90082c>
     c18:	01000402 	tsteq	r0, r2, lsl #8
     c1c:	02050001 	andeq	r0, r5, #1
     c20:	08001410 	stmdaeq	r0, {r4, sl, ip}
     c24:	0103ce03 	tsteq	r3, r3, lsl #28
     c28:	221f2113 	andscs	r2, pc, #-1073741820	; 0xc0000004
     c2c:	2121211e 	teqcs	r1, lr, lsl r1
     c30:	221e211f 	andscs	r2, lr, #-1073741817	; 0xc0000007
     c34:	01000902 	tsteq	r0, r2, lsl #18
     c38:	02050001 	andeq	r0, r5, #1
     c3c:	00000000 	andeq	r0, r0, r0
     c40:	0103d503 	tsteq	r3, r3, lsl #10
     c44:	0100ce03 	tsteq	r0, r3, lsl #28
     c48:	01000202 	tsteq	r0, r2, lsl #4
     c4c:	02050001 	andeq	r0, r5, #1
     c50:	00000000 	andeq	r0, r0, r0
     c54:	0104a503 	tsteq	r4, r3, lsl #10
     c58:	03010903 	movweq	r0, #6403	; 0x1903
     c5c:	24252077 	strtcs	r2, [r5], #-119	; 0x77
     c60:	02311f23 	eorseq	r1, r1, #35, 30	; 0x8c
     c64:	01010005 	tsteq	r1, r5
     c68:	38020500 	stmdacc	r2, {r8, sl}
     c6c:	03080014 	movweq	r0, #32788	; 0x8014
     c70:	030104b7 	movweq	r0, #5303	; 0x14b7
     c74:	030101b0 	movweq	r0, #4528	; 0x11b0
     c78:	032e7ed0 	teqeq	lr, #208, 28	; 0xd00
     c7c:	032001b0 	teqeq	r0, #176, 2	; 0x2c
     c80:	27207ed0 			; <UNDEFINED> instruction: 0x27207ed0
     c84:	2e00db03 	vmlacs.f64	d13, d0, d3
     c88:	1b331b25 	blne	cc7924 <__Stack_Size+0xcc7124>
     c8c:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
     c90:	207fa403 	rsbscs	sl, pc, r3, lsl #8
     c94:	2e7ec703 	cdpcs	7, 7, cr12, cr14, cr3, {0}
     c98:	1f211f21 	svcne	0x00211f21
     c9c:	2f1b253d 	svccs	0x001b253d
     ca0:	03591c24 	cmpeq	r9, #36, 24	; 0x2400
     ca4:	032001bb 	teqeq	r0, #-1073741778	; 0xc000002e
     ca8:	3d207ec5 	stccc	14, cr7, [r0, #-788]!	; 0xfffffcec
     cac:	2001a103 	andcs	sl, r1, r3, lsl #2
     cb0:	207edf03 	rsbscs	sp, lr, r3, lsl #30
     cb4:	01b8033e 			; <UNDEFINED> instruction: 0x01b8033e
     cb8:	66630320 	strbtvs	r0, [r3], -r0, lsr #6
     cbc:	311f2324 	tstcc	pc, r4, lsr #6
     cc0:	01001502 	tsteq	r0, r2, lsl #10
     cc4:	02050001 	andeq	r0, r5, #1
     cc8:	00000000 	andeq	r0, r0, r0
     ccc:	0104cc03 	tsteq	r4, r3, lsl #24
     cd0:	23221e14 	teqcs	r2, #20, 28	; 0x140
     cd4:	1d233f1d 	stcne	15, cr3, [r3, #-116]!	; 0xffffff8c
     cd8:	2d21233f 	stccs	3, cr2, [r1, #-252]!	; 0xffffff04
     cdc:	0007023d 	andeq	r0, r7, sp, lsr r2
     ce0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ce4:	00000002 	andeq	r0, r0, r2
     ce8:	04db0300 	ldrbeq	r0, [fp], #768	; 0x300
     cec:	1e221601 	cfmadda32ne	mvax0, mvax1, mvfx2, mvfx1
     cf0:	033e241c 	teqeq	lr, #28, 8	; 0x1c000000
     cf4:	1d23ac6d 	stcne	12, cr10, [r3, #-436]!	; 0xfffffe4c
     cf8:	207a0326 	rsbscs	r0, sl, r6, lsr #6
     cfc:	3f1d233f 	svccc	0x001d233f
     d00:	201b0323 	andscs	r0, fp, r3, lsr #6
     d04:	03206503 	teqeq	r0, #12582912	; 0xc00000
     d08:	034d3c18 	movteq	r3, #56344	; 0xdc18
     d0c:	1103206f 	tstne	r3, pc, rrx
     d10:	2e6f0320 	cdpcs	3, 6, cr0, cr15, cr0, {1}
     d14:	01000802 	tsteq	r0, r2, lsl #16
     d18:	02050001 	andeq	r0, r5, #1
     d1c:	080014e0 	stmdaeq	r0, {r5, r6, r7, sl, ip}
     d20:	0104f403 	tsteq	r4, r3, lsl #8
     d24:	03010c03 	movweq	r0, #7171	; 0x1c03
     d28:	0c032074 	stceq	0, cr2, [r3], {116}	; 0x74
     d2c:	3e1c2420 	cfmuldcc	mvd2, mvd12, mvd0
     d30:	2f222f1f 	svccs	0x00222f1f
     d34:	3f311d23 	svccc	0x00311d23
     d38:	8123211c 	teqhi	r3, ip, lsl r1
     d3c:	22301f31 	eorscs	r1, r0, #49, 30	; 0xc4
     d40:	4c492131 	stfmie	f2, [r9], {49}	; 0x31
     d44:	01000802 	tsteq	r0, r2, lsl #16
     d48:	02050001 	andeq	r0, r5, #1
     d4c:	08001550 	stmdaeq	r0, {r4, r6, r8, sl, ip}
     d50:	01059703 	tsteq	r5, r3, lsl #14
     d54:	331b2514 	tstcc	fp, #20, 10	; 0x5000000
     d58:	2f2f2f1b 	svccs	0x002f2f1b
     d5c:	00070230 	andeq	r0, r7, r0, lsr r2
     d60:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d64:	00157802 	andseq	r7, r5, r2, lsl #16
     d68:	05a10308 	streq	r0, [r1, #776]!	; 0x308
     d6c:	02001601 	andeq	r1, r0, #1048576	; 0x100000
     d70:	02400104 	subeq	r0, r0, #4, 2
     d74:	01010007 	tsteq	r1, r7
     d78:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
     d7c:	03080015 	movweq	r0, #32789	; 0x8015
     d80:	130105ad 	movwne	r0, #5549	; 0x15ad
     d84:	211b2222 	tstcs	fp, r2, lsr #4
     d88:	04020022 	streq	r0, [r2], #-34	; 0x22
     d8c:	213d2201 	teqcs	sp, r1, lsl #4
     d90:	00211e2f 	eoreq	r1, r1, pc, lsr #28
     d94:	21010402 	tstcs	r1, r2, lsl #8
     d98:	231d234f 	tstcs	sp, #1006632961	; 0x3c000001
     d9c:	01000a02 	tsteq	r0, r2, lsl #20
     da0:	02050001 	andeq	r0, r5, #1
     da4:	00000000 	andeq	r0, r0, r0
     da8:	0105be03 	tsteq	r5, r3, lsl #28
     dac:	4a6f032f 	bmi	1bc1a70 <__Stack_Size+0x1bc1270>
     db0:	242b2140 	strtcs	r2, [fp], #-320	; 0x140
     db4:	2f200b03 	svccs	0x00200b03
     db8:	222e6e03 	eorcs	r6, lr, #3, 28	; 0x30
     dbc:	212f3d22 	teqcs	pc, r2, lsr #26
     dc0:	374a0a03 	strbcc	r0, [sl, -r3, lsl #20]
     dc4:	0d022725 	stceq	7, cr2, [r2, #-148]	; 0xffffff6c
     dc8:	00010100 	andeq	r0, r1, r0, lsl #2
     dcc:	15cc0205 	strbne	r0, [ip, #517]	; 0x205
     dd0:	c8030800 	stmdagt	r3, {fp}
     dd4:	1d230105 	stfnes	f0, [r3, #-20]!	; 0xffffffec
     dd8:	211d2322 	tstcs	sp, r2, lsr #6
     ddc:	211b2423 	tstcs	fp, r3, lsr #8
     de0:	01040200 	mrseq	r0, R12_usr
     de4:	1f213d24 	svcne	0x00213d24
     de8:	01040200 	mrseq	r0, R12_usr
     dec:	1f213d2f 	svcne	0x00213d2f
     df0:	01040200 	mrseq	r0, R12_usr
     df4:	2f1f3f2f 	svccs	0x001f3f2f
     df8:	0b022523 	bleq	8a28c <__Stack_Size+0x89a8c>
     dfc:	00010100 	andeq	r0, r1, r0, lsl #2
     e00:	16240205 	strtne	r0, [r4], -r5, lsl #4
     e04:	e3030800 	movw	r0, #14336	; 0x3800
     e08:	02160105 	andseq	r0, r6, #1073741825	; 0x40000001
     e0c:	01010006 	tsteq	r1, r6
     e10:	30020500 	andcc	r0, r2, r0, lsl #10
     e14:	03080016 	movweq	r0, #32790	; 0x8016
     e18:	140105ea 	strne	r0, [r1], #-1514	; 0x5ea
     e1c:	02211f2f 	eoreq	r1, r1, #47, 30	; 0xbc
     e20:	01010008 	tsteq	r1, r8
     e24:	48020500 	stmdami	r2, {r8, sl}
     e28:	03080016 	movweq	r0, #32790	; 0x8016
     e2c:	140105f3 	strne	r0, [r1], #-1523	; 0x5f3
     e30:	024c3022 	subeq	r3, ip, #34	; 0x22
     e34:	01010002 	tsteq	r1, r2
     e38:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
     e3c:	03080016 	movweq	r0, #32790	; 0x8016
     e40:	140105ff 	strne	r0, [r1], #-1535	; 0x5ff
     e44:	0004024b 	andeq	r0, r4, fp, asr #4
     e48:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e4c:	00166c02 	andseq	r6, r6, r2, lsl #24
     e50:	06850308 	streq	r0, [r5], r8, lsl #6
     e54:	26301501 	ldrtcs	r1, [r0], -r1, lsl #10
     e58:	01000902 	tsteq	r0, r2, lsl #18
     e5c:	00045501 	andeq	r5, r4, r1, lsl #10
     e60:	dc000200 	sfmle	f0, 4, [r0], {-0}
     e64:	02000001 	andeq	r0, r0, #1
     e68:	0d0efb01 	vstreq	d15, [lr, #-4]
     e6c:	01010100 	mrseq	r0, (UNDEF: 17)
     e70:	00000001 	andeq	r0, r0, r1
     e74:	01000001 	tsteq	r0, r1
     e78:	705c3a63 	subsvc	r3, ip, r3, ror #20
     e7c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
     e80:	66206d61 	strtvs	r6, [r0], -r1, ror #26
     e84:	73656c69 	cmnvc	r5, #26880	; 0x6900
     e88:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
     e8c:	675c2936 	smmlarvs	ip, r6, r9, r2
     e90:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
     e94:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     e98:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
     e9c:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
     ea0:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     ea4:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
     ea8:	30322038 	eorscc	r2, r2, r8, lsr r0
     eac:	33713431 	cmncc	r1, #822083584	; 0x31000000
     eb0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     eb4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     eb8:	61652d65 	cmnvs	r5, r5, ror #26
     ebc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     ec0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     ec4:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     ec8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     ecc:	6300656e 	movwvs	r6, #1390	; 0x56e
     ed0:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
     ed4:	6172676f 	cmnvs	r2, pc, ror #14
     ed8:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
     edc:	2073656c 	rsbscs	r6, r3, ip, ror #10
     ee0:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
     ee4:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
     ee8:	6f742075 	svcvs	0x00742075
     eec:	20736c6f 	rsbscs	r6, r3, pc, ror #24
     ef0:	206d7261 	rsbcs	r7, sp, r1, ror #4
     ef4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     ef8:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     efc:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
     f00:	31303220 	teqcc	r0, r0, lsr #4
     f04:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
     f08:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     f0c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     f10:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     f14:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     f18:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     f1c:	2f2e0065 	svccs	0x002e0065
     f20:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     f24:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     f28:	3a630062 	bcc	18c10b8 <__Stack_Size+0x18c08b8>
     f2c:	6f72705c 	svcvs	0x0072705c
     f30:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
     f34:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
     f38:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     f3c:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
     f40:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
     f44:	6f6f7420 	svcvs	0x006f7420
     f48:	6120736c 	teqvs	r0, ip, ror #6
     f4c:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
     f50:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
     f54:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
     f58:	20382e34 	eorscs	r2, r8, r4, lsr lr
     f5c:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
     f60:	6c5c3371 	mrrcvs	3, 7, r3, ip, cr1
     f64:	675c6269 	ldrbvs	r6, [ip, -r9, ror #4]
     f68:	615c6363 	cmpvs	ip, r3, ror #6
     f6c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     f70:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     f74:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     f78:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
     f7c:	695c342e 	ldmdbvs	ip, {r1, r2, r3, r5, sl, ip, sp}^
     f80:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     f84:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
     f88:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
     f8c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     f90:	322f2e00 	eorcc	r2, pc, #0, 28
     f94:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
     f98:	66640000 	strbtvs	r0, [r4], -r0
     f9c:	00632e75 	rsbeq	r2, r3, r5, ror lr
     fa0:	5f000000 	svcpl	0x00000000
     fa4:	61666564 	cmnvs	r6, r4, ror #10
     fa8:	5f746c75 	svcpl	0x00746c75
     fac:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     fb0:	00682e73 	rsbeq	r2, r8, r3, ror lr
     fb4:	73000001 	movwvc	r0, #1
     fb8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     fbc:	00682e74 	rsbeq	r2, r8, r4, ror lr
     fc0:	73000002 	movwvc	r0, #2
     fc4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     fc8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     fcc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     fd0:	00682e65 	rsbeq	r2, r8, r5, ror #28
     fd4:	73000003 	movwvc	r0, #3
     fd8:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
     fdc:	00682e66 	rsbeq	r2, r8, r6, ror #28
     fe0:	75000004 	strvc	r0, [r0, #-4]
     fe4:	635f6273 	cmpvs	pc, #805306375	; 0x30000007
     fe8:	2e65726f 	cdpcs	2, 6, cr7, cr5, cr15, {3}
     fec:	00050068 	andeq	r0, r5, r8, rrx
     ff0:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     ff4:	0000682e 	andeq	r6, r0, lr, lsr #16
     ff8:	68730000 	ldmdavs	r3!, {}^	; <UNPREDICTABLE>
     ffc:	36353261 	ldrtcc	r3, [r5], -r1, ror #4
    1000:	0600682e 	streq	r6, [r0], -lr, lsr #16
    1004:	6d690000 	stclvs	0, cr0, [r9, #-0]
    1008:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
    100c:	00000068 	andeq	r0, r0, r8, rrx
    1010:	62737500 	rsbsvs	r7, r3, #0, 10
    1014:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1018:	00682e74 	rsbeq	r2, r8, r4, ror lr
    101c:	75000005 	strvc	r0, [r0, #-5]
    1020:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
    1024:	00000000 	andeq	r0, r0, r0
    1028:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    102c:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    1030:	00000200 	andeq	r0, r0, r0, lsl #4
    1034:	64726168 	ldrbtvs	r6, [r2], #-360	; 0x168
    1038:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
    103c:	0000682e 	andeq	r6, r0, lr, lsr #16
    1040:	00000000 	andeq	r0, r0, r0
    1044:	16840205 	strne	r0, [r4], r5, lsl #4
    1048:	3c030800 	stccc	8, cr0, [r3], {-0}
    104c:	09032f01 	stmdbeq	r3, {r0, r8, r9, sl, fp, sp}
    1050:	2f2f472e 	svccs	0x002f472e
    1054:	0321214c 	teqeq	r1, #76, 2
    1058:	031c2078 	tsteq	ip, #120	; 0x78
    105c:	7603200b 	strvc	r2, [r3], -fp
    1060:	200c0320 	andcs	r0, ip, r0, lsr #6
    1064:	21207503 	teqcs	r0, r3, lsl #10
    1068:	03282121 	teqeq	r8, #1073741832	; 0x40000008
    106c:	2f2f2e79 	svccs	0x002f2e79
    1070:	21212f2f 	teqcs	r1, pc, lsr #30
    1074:	2d5b2f21 	ldclcs	15, cr2, [fp, #-132]	; 0xffffff7c
    1078:	01001e02 	tsteq	r0, r2, lsl #28
    107c:	02050001 	andeq	r0, r5, #1
    1080:	08001724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip}
    1084:	0100d003 	tsteq	r0, r3
    1088:	22311d15 	eorscs	r1, r1, #1344	; 0x540
    108c:	1f21221e 	svcne	0x0021221e
    1090:	20760325 	rsbscs	r0, r6, r5, lsr #6
    1094:	e4032426 	str	r2, [r3], #-1062	; 0x426
    1098:	29032000 	stmdbcs	r3, {sp}
    109c:	2e0a032e 	cdpcs	3, 0, cr0, cr10, cr14, {1}
    10a0:	033c3e03 	teqeq	ip, #3, 28	; 0x30
    10a4:	34342e0b 	ldrtcc	r2, [r4], #-3595	; 0xe0b
    10a8:	303c2303 	eorscc	r2, ip, r3, lsl #6
    10ac:	21303e69 	teqcs	r0, r9, ror #28
    10b0:	eb03211f 	bl	c9534 <__Stack_Size+0xc8d34>
    10b4:	221e2e7d 	andscs	r2, lr, #2000	; 0x7d0
    10b8:	03583003 	cmpeq	r8, #3
    10bc:	03312e24 	teqeq	r1, #36, 28	; 0x240
    10c0:	032e00ff 	teqeq	lr, #255	; 0xff
    10c4:	212e00c6 	smlawtcs	lr, r6, r0, r0
    10c8:	2123211f 	teqcs	r3, pc, lsl r1
    10cc:	747ec103 	ldrbtvc	ip, [lr], #-259	; 0x103
    10d0:	03581d03 	cmpeq	r8, #3, 26	; 0xc0
    10d4:	212001f7 	strdcs	r0, [r0, -r7]!
    10d8:	2e7e8803 	cdpcs	8, 7, cr8, cr14, cr3, {0}
    10dc:	2001f703 	andcs	pc, r1, r3, lsl #14
    10e0:	5b212d21 	blpl	84c56c <__Stack_Size+0x84bd6c>
    10e4:	6b3e1e33 	blvs	f889b8 <__Stack_Size+0xf881b8>
    10e8:	1f596053 	svcne	0x00596053
    10ec:	7e83032f 	cdpvc	3, 8, cr0, cr3, cr15, {1}
    10f0:	221f4d2e 	andscs	r4, pc, #2944	; 0xb80
    10f4:	c403211f 	strgt	r2, [r3], #-287	; 0x11f
    10f8:	0d032e00 	stceq	14, cr2, [r3, #-0]
    10fc:	d4032f58 	strle	r2, [r3], #-3928	; 0xf58
    1100:	322a2e7e 	eorcc	r2, sl, #2016	; 0x7e0
    1104:	1e5a4d21 	cdpne	13, 5, cr4, cr10, cr1, {1}
    1108:	03221e22 	teqeq	r2, #544	; 0x220
    110c:	4b3d3c0d 	blmi	f50148 <__Stack_Size+0xf4f948>
    1110:	2000cb03 	andcs	ip, r0, r3, lsl #22
    1114:	30583103 	subscc	r3, r8, r3, lsl #2
    1118:	2e380330 	mrccs	3, 1, r0, cr8, cr0, {1}
    111c:	3c7dff03 	ldclcc	15, cr15, [sp], #-12
    1120:	21211e31 	teqcs	r1, r1, lsr lr
    1124:	0321211e 	teqeq	r1, #-2147483641	; 0x80000007
    1128:	2d213c18 	stccs	12, cr3, [r1, #-96]!	; 0xffffffa0
    112c:	302f232f 	eorcc	r2, pc, pc, lsr #6
    1130:	2001db03 	andcs	sp, r1, r3, lsl #22
    1134:	03211f21 	teqeq	r1, #33, 30	; 0x84
    1138:	3d2e7ec4 	stccc	14, cr7, [lr, #-784]!	; 0xfffffcf0
    113c:	01a5034b 			; <UNDEFINED> instruction: 0x01a5034b
    1140:	58170320 	ldmdapl	r7, {r5, r8, r9}
    1144:	033d3030 	teqeq	sp, #48	; 0x30
    1148:	2f3c7f90 	svccs	0x003c7f90
    114c:	3c7fb903 	ldclcc	9, cr11, [pc], #-12	; 1148 <__Stack_Size+0x948>
    1150:	21211f21 	teqcs	r1, r1, lsr #30
    1154:	2f205503 	svccs	0x00205503
    1158:	20640322 	rsbcs	r0, r4, r2, lsr #6
    115c:	23212d2f 	teqcs	r1, #3008	; 0xbc0
    1160:	8103342f 	tsthi	r3, pc, lsr #8
    1164:	1b032001 	blne	c9170 <__Stack_Size+0xc8970>
    1168:	2e650320 	cdpcs	3, 6, cr0, cr5, cr0, {1}
    116c:	2f201b03 	svccs	0x00201b03
    1170:	03660e03 	cmneq	r6, #3, 28	; 0x30
    1174:	753e3c27 	ldrvc	r3, [lr, #-3111]!	; 0xc27
    1178:	85b2211f 	ldrhi	r2, [r2, #287]!	; 0x11f
    117c:	3c190359 	ldccc	3, cr0, [r9], {89}	; 0x59
    1180:	3c7fad03 	ldclcc	13, cr10, [pc], #-12	; 117c <__Stack_Size+0x97c>
    1184:	207a033d 	rsbscs	r0, sl, sp, lsr r3
    1188:	2035033d 	eorscs	r0, r5, sp, lsr r3
    118c:	02211f3d 	eoreq	r1, r1, #61, 30	; 0xf4
    1190:	01010020 	tsteq	r1, r0, lsr #32
    1194:	fc020500 	stc2	5, cr0, [r2], {-0}
    1198:	03080019 	movweq	r0, #32793	; 0x8019
    119c:	21010381 	smlabbcs	r1, r1, r3, r0
    11a0:	1f211f21 	svcne	0x00211f21
    11a4:	26221e23 	strtcs	r1, [r2], -r3, lsr #28
    11a8:	2c242f42 	stccs	15, cr2, [r4], #-264	; 0xfffffef8
    11ac:	2f3c7203 	svccs	0x003c7203
    11b0:	2e0d0322 	cdpcs	3, 0, cr0, cr13, cr2, {1}
    11b4:	022e7403 	eoreq	r7, lr, #50331648	; 0x3000000
    11b8:	01010007 	tsteq	r1, r7
    11bc:	00020500 	andeq	r0, r2, r0, lsl #10
    11c0:	03000000 	movweq	r0, #0
    11c4:	02010398 	andeq	r0, r1, #152, 6	; 0x60000002
    11c8:	01010001 	tsteq	r1, r1
    11cc:	40020500 	andmi	r0, r2, r0, lsl #10
    11d0:	0308001a 	movweq	r0, #32794	; 0x801a
    11d4:	1301039b 	movwne	r0, #5019	; 0x139b
    11d8:	4b1b2224 	blmi	6c9a70 <__Stack_Size+0x6c9270>
    11dc:	01000502 	tsteq	r0, r2, lsl #10
    11e0:	02050001 	andeq	r0, r5, #1
    11e4:	08001a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, ip}
    11e8:	0103a403 	tsteq	r3, r3, lsl #8
    11ec:	1b222413 	blne	88a240 <__Stack_Size+0x889a40>
    11f0:	0005024b 	andeq	r0, r5, fp, asr #4
    11f4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    11f8:	001a7002 	andseq	r7, sl, r2
    11fc:	03ae0308 			; <UNDEFINED> instruction: 0x03ae0308
    1200:	251f2201 	ldrcs	r2, [pc, #-513]	; 1007 <__Stack_Size+0x807>
    1204:	03222c3e 	teqeq	r2, #15872	; 0x3e00
    1208:	1f21207a 	svcne	0x0021207a
    120c:	02341f2f 	eorseq	r1, r4, #47, 30	; 0xbc
    1210:	01010009 	tsteq	r1, r9
    1214:	a4020500 	strge	r0, [r2], #-1280	; 0x500
    1218:	0308001a 	movweq	r0, #32794	; 0x801a
    121c:	140103b8 	strne	r0, [r1], #-952	; 0x3b8
    1220:	1b84241f 	blne	fe10a2a4 <BootRAM+0xd07aa45>
    1224:	00090267 	andeq	r0, r9, r7, ror #4
    1228:	05000101 	streq	r0, [r0, #-257]	; 0x101
    122c:	00000002 	andeq	r0, r0, r2
    1230:	03c10300 	biceq	r0, r1, #0, 6
    1234:	2e130301 	cdpcs	3, 1, cr0, cr3, cr1, {0}
    1238:	2d212d21 	stccs	13, cr2, [r1, #-132]!	; 0xffffff7c
    123c:	1e335b21 	vaddne.f64	d5, d3, d17
    1240:	0402003e 	streq	r0, [r2], #-62	; 0x3e
    1244:	02005d02 	andeq	r5, r0, #2, 26	; 0x80
    1248:	60450204 	subvs	r0, r5, r4, lsl #4
    124c:	022f1f59 	eoreq	r1, pc, #356	; 0x164
    1250:	0101000c 	tsteq	r1, ip
    1254:	00020500 	andeq	r0, r2, r0, lsl #10
    1258:	03000000 	movweq	r0, #0
    125c:	130103ea 	movwne	r0, #5098	; 0x13ea
    1260:	0004022f 	andeq	r0, r4, pc, lsr #4
    1264:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1268:	00000002 	andeq	r0, r0, r2
    126c:	03ef0300 	mvneq	r0, #0, 6
    1270:	06021301 	streq	r1, [r2], -r1, lsl #6
    1274:	00010100 	andeq	r0, r1, r0, lsl #2
    1278:	1ad80205 	bne	ff601a94 <BootRAM+0xe572235>
    127c:	f4030800 	vst2.8	{d0-d1}, [r3], r0
    1280:	2f130103 	svccs	0x00130103
    1284:	01000402 	tsteq	r0, r2, lsl #8
    1288:	02050001 	andeq	r0, r5, #1
    128c:	00000000 	andeq	r0, r0, r0
    1290:	0103f903 	tsteq	r3, r3, lsl #18
    1294:	003d2f13 	eorseq	r2, sp, r3, lsl pc
    1298:	1f010402 	svcne	0x00010402
    129c:	01000802 	tsteq	r0, r2, lsl #16
    12a0:	02050001 	andeq	r0, r5, #1
    12a4:	08001ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, ip}
    12a8:	0103fe03 	tsteq	r3, r3, lsl #28
    12ac:	01040200 	mrseq	r0, R12_usr
    12b0:	00010216 	andeq	r0, r1, r6, lsl r2
    12b4:	024f0101 	subeq	r0, pc, #1073741824	; 0x40000000
    12b8:	00020000 	andeq	r0, r2, r0
    12bc:	000000f7 	strdeq	r0, [r0], -r7
    12c0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    12c4:	0101000d 	tsteq	r1, sp
    12c8:	00000101 	andeq	r0, r0, r1, lsl #2
    12cc:	00000100 	andeq	r0, r0, r0, lsl #2
    12d0:	35353201 	ldrcc	r3, [r5, #-513]!	; 0x201
    12d4:	63003931 	movwvs	r3, #2353	; 0x931
    12d8:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    12dc:	6172676f 	cmnvs	r2, pc, ror #14
    12e0:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    12e4:	2073656c 	rsbscs	r6, r3, ip, ror #10
    12e8:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    12ec:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    12f0:	6f742075 	svcvs	0x00742075
    12f4:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    12f8:	206d7261 	rsbcs	r7, sp, r1, ror #4
    12fc:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    1300:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    1304:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    1308:	31303220 	teqcc	r0, r0, lsr #4
    130c:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    1310:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1314:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    1318:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    131c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    1320:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1324:	616d5c65 	cmnvs	sp, r5, ror #24
    1328:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    132c:	3a630065 	bcc	18c14c8 <__Stack_Size+0x18c0cc8>
    1330:	6f72705c 	svcvs	0x0072705c
    1334:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    1338:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    133c:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1340:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    1344:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    1348:	6f6f7420 	svcvs	0x006f7420
    134c:	6120736c 	teqvs	r0, ip, ror #6
    1350:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    1354:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    1358:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    135c:	20382e34 	eorscs	r2, r8, r4, lsr lr
    1360:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    1364:	615c3371 	cmpvs	ip, r1, ror r3
    1368:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    136c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1370:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1374:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    1378:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    137c:	32630000 	rsbcc	r0, r3, #0
    1380:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1384:	0100632e 	tsteq	r0, lr, lsr #6
    1388:	32660000 	rsbcc	r0, r6, #0
    138c:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1390:	0100682e 	tsteq	r0, lr, lsr #16
    1394:	645f0000 	ldrbvs	r0, [pc], #-0	; 139c <__Stack_Size+0xb9c>
    1398:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    139c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 13a4 <__Stack_Size+0xba4>
    13a0:	73657079 	cmnvc	r5, #121	; 0x79
    13a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    13a8:	74730000 	ldrbtvc	r0, [r3], #-0
    13ac:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    13b0:	0300682e 	movweq	r6, #2094	; 0x82e
    13b4:	00000000 	andeq	r0, r0, r0
    13b8:	00000205 	andeq	r0, r0, r5, lsl #4
    13bc:	d3030000 	movwle	r0, #12288	; 0x3000
    13c0:	02040100 	andeq	r0, r4, #0, 2
    13c4:	044a5003 	strbeq	r5, [sl], #-3
    13c8:	20300301 	eorscs	r0, r0, r1, lsl #6
    13cc:	50030204 	andpl	r0, r3, r4, lsl #4
    13d0:	0301042e 	movweq	r0, #5166	; 0x142e
    13d4:	02043c33 	andeq	r3, r4, #13056	; 0x3300
    13d8:	043c4d03 	ldrteq	r4, [ip], #-3331	; 0xd03
    13dc:	20330301 	eorscs	r0, r3, r1, lsl #6
    13e0:	75691d23 	strbvc	r1, [r9, #-3363]!	; 0xd23
    13e4:	02043f7e 	andeq	r3, r4, #504	; 0x1f8
    13e8:	042e4a03 	strteq	r4, [lr], #-2563	; 0xa03
    13ec:	663e0301 	ldrtvs	r0, [lr], -r1, lsl #6
    13f0:	42030204 	andmi	r0, r3, #4, 4	; 0x40000000
    13f4:	00010420 	andeq	r0, r1, r0, lsr #8
    13f8:	03020402 	movweq	r0, #9218	; 0x2402
    13fc:	02002e3f 	andeq	r2, r0, #1008	; 0x3f0
    1400:	5f030204 	svcpl	0x00030204
    1404:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    1408:	20210302 	eorcs	r0, r1, r2, lsl #6
    140c:	02040200 	andeq	r0, r4, #0, 4
    1410:	002e5f03 	eoreq	r5, lr, r3, lsl #30
    1414:	03020402 	movweq	r0, #9218	; 0x2402
    1418:	02002e21 	andeq	r2, r0, #528	; 0x210
    141c:	5f030204 	svcpl	0x00030204
    1420:	04020020 	streq	r0, [r2], #-32
    1424:	02002f02 	andeq	r2, r0, #2, 30
    1428:	00590204 	subseq	r0, r9, r4, lsl #4
    142c:	5a020402 	bpl	8243c <__Stack_Size+0x81c3c>
    1430:	02040200 	andeq	r0, r4, #0, 4
    1434:	04020059 	streq	r0, [r2], #-89	; 0x59
    1438:	02005902 	andeq	r5, r0, #32768	; 0x8000
    143c:	005a0204 	subseq	r0, sl, r4, lsl #4
    1440:	59020402 	stmdbpl	r2, {r1, sl}
    1444:	02040200 	andeq	r0, r4, #0, 4
    1448:	04020059 	streq	r0, [r2], #-89	; 0x59
    144c:	02005a02 	andeq	r5, r0, #8192	; 0x2000
    1450:	00590204 	subseq	r0, r9, r4, lsl #4
    1454:	59020402 	stmdbpl	r2, {r1, sl}
    1458:	02040200 	andeq	r0, r4, #0, 4
    145c:	00584b03 	subseq	r4, r8, r3, lsl #22
    1460:	59020402 	stmdbpl	r2, {r1, sl}
    1464:	02040200 	andeq	r0, r4, #0, 4
    1468:	04020059 	streq	r0, [r2], #-89	; 0x59
    146c:	02005a02 	andeq	r5, r0, #8192	; 0x2000
    1470:	00590204 	subseq	r0, r9, r4, lsl #4
    1474:	5a020402 	bpl	82484 <__Stack_Size+0x81c84>
    1478:	02040200 	andeq	r0, r4, #0, 4
    147c:	04020059 	streq	r0, [r2], #-89	; 0x59
    1480:	02005902 	andeq	r5, r0, #32768	; 0x8000
    1484:	00590204 	subseq	r0, r9, r4, lsl #4
    1488:	59020402 	stmdbpl	r2, {r1, sl}
    148c:	02040200 	andeq	r0, r4, #0, 4
    1490:	00581c03 	subseq	r1, r8, r3, lsl #24
    1494:	59020402 	stmdbpl	r2, {r1, sl}
    1498:	02040200 	andeq	r0, r4, #0, 4
    149c:	04020059 	streq	r0, [r2], #-89	; 0x59
    14a0:	02005a02 	andeq	r5, r0, #8192	; 0x2000
    14a4:	00590204 	subseq	r0, r9, r4, lsl #4
    14a8:	59020402 	stmdbpl	r2, {r1, sl}
    14ac:	02040200 	andeq	r0, r4, #0, 4
    14b0:	0402005a 	streq	r0, [r2], #-90	; 0x5a
    14b4:	02005902 	andeq	r5, r0, #32768	; 0x8000
    14b8:	00590204 	subseq	r0, r9, r4, lsl #4
    14bc:	5a020402 	bpl	824cc <__Stack_Size+0x81ccc>
    14c0:	02040200 	andeq	r0, r4, #0, 4
    14c4:	04020059 	streq	r0, [r2], #-89	; 0x59
    14c8:	58140302 	ldmdapl	r4, {r1, r8, r9}
    14cc:	02040200 	andeq	r0, r4, #0, 4
    14d0:	002e6d03 	eoreq	r6, lr, r3, lsl #26
    14d4:	03020402 	movweq	r0, #9218	; 0x2402
    14d8:	02005822 	andeq	r5, r0, #2228224	; 0x220000
    14dc:	00750204 	rsbseq	r0, r5, r4, lsl #4
    14e0:	67020402 	strvs	r0, [r2, -r2, lsl #8]
    14e4:	02040200 	andeq	r0, r4, #0, 4
    14e8:	04020067 	streq	r0, [r2], #-103	; 0x67
    14ec:	2e6d0302 	cdpcs	3, 6, cr0, cr13, cr2, {0}
    14f0:	02040200 	andeq	r0, r4, #0, 4
    14f4:	00201303 	eoreq	r1, r0, r3, lsl #6
    14f8:	03020402 	movweq	r0, #9218	; 0x2402
    14fc:	17034a6d 	strne	r4, [r3, -sp, ror #20]
    1500:	3d594b3c 	vldrcc	d20, [r9, #-240]	; 0xffffff10
    1504:	01000702 	tsteq	r0, r2, lsl #14
    1508:	00029e01 	andeq	r9, r2, r1, lsl #28
    150c:	05000200 	streq	r0, [r0, #-512]	; 0x200
    1510:	02000001 	andeq	r0, r0, #1
    1514:	0d0efb01 	vstreq	d15, [lr, #-4]
    1518:	01010100 	mrseq	r0, (UNDEF: 17)
    151c:	00000001 	andeq	r0, r0, r1
    1520:	01000001 	tsteq	r0, r1
    1524:	31353532 	teqcc	r5, r2, lsr r5
    1528:	3a630039 	bcc	18c1614 <__Stack_Size+0x18c0e14>
    152c:	6f72705c 	svcvs	0x0072705c
    1530:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    1534:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    1538:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    153c:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    1540:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    1544:	6f6f7420 	svcvs	0x006f7420
    1548:	6120736c 	teqvs	r0, ip, ror #6
    154c:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    1550:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    1554:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    1558:	20382e34 	eorscs	r2, r8, r4, lsr lr
    155c:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    1560:	615c3371 	cmpvs	ip, r1, ror r3
    1564:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1568:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    156c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1570:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    1574:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1578:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    157c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    1580:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    1584:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
    1588:	206d6172 	rsbcs	r6, sp, r2, ror r1
    158c:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
    1590:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
    1594:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
    1598:	20756e67 	rsbscs	r6, r5, r7, ror #28
    159c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 13d4 <__Stack_Size+0xbd4>
    15a0:	72612073 	rsbvc	r2, r1, #115	; 0x73
    15a4:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
    15a8:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    15ac:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
    15b0:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
    15b4:	71343130 	teqvc	r4, r0, lsr r1
    15b8:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    15bc:	6f6e2d6d 	svcvs	0x006e2d6d
    15c0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    15c4:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    15c8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    15cc:	00656475 	rsbeq	r6, r5, r5, ror r4
    15d0:	32646500 	rsbcc	r6, r4, #0, 10
    15d4:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    15d8:	0100632e 	tsteq	r0, lr, lsr #6
    15dc:	32660000 	rsbcc	r0, r6, #0
    15e0:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    15e4:	0100682e 	tsteq	r0, lr, lsr #16
    15e8:	64650000 	strbtvs	r0, [r5], #-0
    15ec:	31353532 	teqcc	r5, r2, lsr r5
    15f0:	00682e39 	rsbeq	r2, r8, r9, lsr lr
    15f4:	5f000001 	svcpl	0x00000001
    15f8:	61666564 	cmnvs	r6, r4, ror #10
    15fc:	5f746c75 	svcpl	0x00746c75
    1600:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    1604:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1608:	73000002 	movwvc	r0, #2
    160c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1610:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1614:	00000003 	andeq	r0, r0, r3
    1618:	e8020500 	stmda	r2, {r8, sl}
    161c:	0308001a 	movweq	r0, #32794	; 0x801a
    1620:	04200133 	strteq	r0, [r0], #-307	; 0x133
    1624:	20700302 	rsbscs	r0, r0, r2, lsl #6
    1628:	10030104 	andne	r0, r3, r4, lsl #2
    162c:	02047408 	andeq	r7, r4, #8, 8	; 0x8000000
    1630:	04207003 	strteq	r7, [r0], #-3
    1634:	ac100301 	ldcge	3, cr0, [r0], {1}
    1638:	70030204 	andvc	r0, r3, r4, lsl #4
    163c:	03010420 	movweq	r0, #5152	; 0x1420
    1640:	02042e13 	andeq	r2, r4, #304	; 0x130
    1644:	04206d03 	strteq	r6, [r0], #-3331	; 0xd03
    1648:	3c130301 	ldccc	3, cr0, [r3], {1}
    164c:	022d4b3d 	eoreq	r4, sp, #62464	; 0xf400
    1650:	01010002 	tsteq	r1, r2
    1654:	58020500 	stmdapl	r2, {r8, sl}
    1658:	0308001b 	movweq	r0, #32795	; 0x801b
    165c:	3f2e013c 	svccc	0x002e013c
    1660:	3d685959 	stclcc	9, cr5, [r8, #-356]!	; 0xfffffe9c
    1664:	0002023d 	andeq	r0, r2, sp, lsr r2
    1668:	05000101 	streq	r0, [r0, #-257]	; 0x101
    166c:	001b9402 	andseq	r9, fp, r2, lsl #8
    1670:	00de0308 	sbcseq	r0, lr, r8, lsl #6
    1674:	03020401 	movweq	r0, #9217	; 0x2401
    1678:	01045845 	tsteq	r4, r5, asr #16
    167c:	ac00c003 	stcge	0, cr12, [r0], {3}
    1680:	40030204 	andmi	r0, r3, r4, lsl #4
    1684:	0301043c 	movweq	r0, #5180	; 0x143c
    1688:	1df200c4 	ldclne	0, cr0, [r2, #784]!	; 0x310
    168c:	1c242b31 	stcne	11, cr2, [r4], #-196	; 0xffffff3c
    1690:	02022f24 	andeq	r2, r2, #36, 30	; 0x90
    1694:	00010100 	andeq	r0, r1, r0, lsl #2
    1698:	1bf40205 	blne	ffd01eb4 <BootRAM+0xec72655>
    169c:	ec030800 	stc	8, cr0, [r3], {-0}
    16a0:	02040100 	andeq	r0, r4, #0, 2
    16a4:	2e7fb703 	cdpcs	7, 7, cr11, cr15, cr3, {0}
    16a8:	c9030104 	stmdbgt	r3, {r2, r8}
    16ac:	04215800 	strteq	r5, [r1], #-2048	; 0x800
    16b0:	7fb60302 	svcvc	0x00b60302
    16b4:	0301042e 	movweq	r0, #5166	; 0x142e
    16b8:	289e00c9 	ldmcs	lr, {r0, r3, r6, r7}
    16bc:	af030204 	svcge	0x00030204
    16c0:	01042e7f 	tsteq	r4, pc, ror lr
    16c4:	2e00c903 	cdpcs	9, 0, cr12, cr0, cr3, {0}
    16c8:	20780328 	rsbscs	r0, r8, r8, lsr #6
    16cc:	b7030204 	strlt	r0, [r3, -r4, lsl #4]
    16d0:	0104207f 	tsteq	r4, pc, ror r0
    16d4:	3c00d403 	cfstrscc	mvf13, [r0], {3}
    16d8:	59311c24 	ldmdbpl	r1!, {r2, r5, sl, fp, ip}
    16dc:	5b5b4d59 	blpl	16d4c48 <__Stack_Size+0x16d4448>
    16e0:	59af4d4b 	stmibpl	pc!, {r0, r1, r3, r6, r8, sl, fp, lr}	; <UNPREDICTABLE>
    16e4:	024b3e3d 	subeq	r3, fp, #976	; 0x3d0
    16e8:	01010007 	tsteq	r1, r7
    16ec:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
    16f0:	0308001c 	movweq	r0, #32796	; 0x801c
    16f4:	4a01019d 	bmi	41d70 <__Stack_Size+0x41570>
    16f8:	03201f03 	teqeq	r0, #3, 30
    16fc:	1f032e61 	svcne	0x00032e61
    1700:	2f2d3d20 	svccs	0x002d3d20
    1704:	59595b59 	ldmdbpl	r9, {r0, r3, r4, r6, r8, r9, fp, ip, lr}^
    1708:	755b755b 	ldrbvc	r7, [fp, #-1371]	; 0x55b
    170c:	5b5b5b5b 	blpl	16d8480 <__Stack_Size+0x16d7c80>
    1710:	69695b5b 	stmdbvs	r9!, {r0, r1, r3, r4, r6, r8, r9, fp, ip, lr}^
    1714:	00050267 	andeq	r0, r5, r7, ror #4
    1718:	05000101 	streq	r0, [r0, #-257]	; 0x101
    171c:	001d9c02 	andseq	r9, sp, r2, lsl #24
    1720:	01e70308 	mvneq	r0, r8, lsl #6
    1724:	1e032e01 	cdpne	14, 0, cr2, cr3, cr1, {0}
    1728:	65032b20 	strvs	r2, [r3, #-2848]	; 0xb20
    172c:	201b032e 	andscs	r0, fp, lr, lsr #6
    1730:	5c675b31 	stclpl	11, cr5, [r7], #-196	; 0xffffff3c
    1734:	5b595959 	blpl	1657ca0 <__Stack_Size+0x16574a0>
    1738:	5b4b5b5b 	blpl	12d84ac <__Stack_Size+0x12d7cac>
    173c:	6769695b 			; <UNDEFINED> instruction: 0x6769695b
    1740:	01000202 	tsteq	r0, r2, lsl #4
    1744:	02050001 	andeq	r0, r5, #1
    1748:	08001e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip}
    174c:	0102ab03 	tsteq	r2, r3, lsl #22
    1750:	0303043c 	movweq	r0, #13372	; 0x343c
    1754:	043c7e9d 	ldrteq	r7, [ip], #-3741	; 0xe9d
    1758:	01e90301 	mvneq	r0, r1, lsl #6
    175c:	04020058 	streq	r0, [r2], #-88	; 0x58
    1760:	02002102 	andeq	r2, r0, #-2147483648	; 0x80000000
    1764:	005b0204 	subseq	r0, fp, r4, lsl #4
    1768:	47020402 	strmi	r0, [r2, -r2, lsl #8]
    176c:	02040200 	andeq	r0, r4, #0, 4
    1770:	04020032 	streq	r0, [r2], #-50	; 0x32
    1774:	02005a02 	andeq	r5, r0, #8192	; 0x2000
    1778:	00670204 	rsbeq	r0, r7, r4, lsl #4
    177c:	67020402 	strvs	r0, [r2, -r2, lsl #8]
    1780:	02040200 	andeq	r0, r4, #0, 4
    1784:	04020067 	streq	r0, [r2], #-103	; 0x67
    1788:	2e760302 	cdpcs	3, 7, cr0, cr6, cr2, {0}
    178c:	02040200 	andeq	r0, r4, #0, 4
    1790:	00200a03 	eoreq	r0, r0, r3, lsl #20
    1794:	03020402 	movweq	r0, #9218	; 0x2402
    1798:	03044a76 	movweq	r4, #19062	; 0x4a76
    179c:	2e7e9703 	cdpcs	7, 7, cr9, cr14, cr3, {0}
    17a0:	f7030104 			; <UNDEFINED> instruction: 0xf7030104
    17a4:	06025801 	streq	r5, [r2], -r1, lsl #16
    17a8:	6a010100 	bvs	41bb0 <__Stack_Size+0x413b0>
    17ac:	02000002 	andeq	r0, r0, #2
    17b0:	00018500 	andeq	r8, r1, r0, lsl #10
    17b4:	fb010200 	blx	41fbe <__Stack_Size+0x417be>
    17b8:	01000d0e 	tsteq	r0, lr, lsl #26
    17bc:	00010101 	andeq	r0, r1, r1, lsl #2
    17c0:	00010000 	andeq	r0, r1, r0
    17c4:	35320100 	ldrcc	r0, [r2, #-256]!	; 0x100
    17c8:	00393135 	eorseq	r3, r9, r5, lsr r1
    17cc:	705c3a63 	subsvc	r3, ip, r3, ror #20
    17d0:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    17d4:	66206d61 	strtvs	r6, [r0], -r1, ror #26
    17d8:	73656c69 	cmnvc	r5, #26880	; 0x6900
    17dc:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
    17e0:	675c2936 	smmlarvs	ip, r6, r9, r2
    17e4:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
    17e8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    17ec:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
    17f0:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
    17f4:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    17f8:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
    17fc:	30322038 	eorscc	r2, r2, r8, lsr r0
    1800:	33713431 	cmncc	r1, #822083584	; 0x31000000
    1804:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    1808:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    180c:	61652d65 	cmnvs	r5, r5, ror #26
    1810:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    1814:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1818:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    181c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    1820:	6300656e 	movwvs	r6, #1390	; 0x56e
    1824:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    1828:	6172676f 	cmnvs	r2, pc, ror #14
    182c:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    1830:	2073656c 	rsbscs	r6, r3, ip, ror #10
    1834:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    1838:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    183c:	6f742075 	svcvs	0x00742075
    1840:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    1844:	206d7261 	rsbcs	r7, sp, r1, ror #4
    1848:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    184c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    1850:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    1854:	31303220 	teqcc	r0, r0, lsr #4
    1858:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    185c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1860:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    1864:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1868:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    186c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1870:	3a630065 	bcc	18c1a0c <__Stack_Size+0x18c120c>
    1874:	6f72705c 	svcvs	0x0072705c
    1878:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    187c:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    1880:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1884:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    1888:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    188c:	6f6f7420 	svcvs	0x006f7420
    1890:	6120736c 	teqvs	r0, ip, ror #6
    1894:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    1898:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    189c:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    18a0:	20382e34 	eorscs	r2, r8, r4, lsr lr
    18a4:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    18a8:	6c5c3371 	mrrcvs	3, 7, r3, ip, cr1
    18ac:	675c6269 	ldrbvs	r6, [ip, -r9, ror #4]
    18b0:	615c6363 	cmpvs	ip, r3, ror #6
    18b4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    18b8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    18bc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    18c0:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    18c4:	695c342e 	ldmdbvs	ip, {r1, r2, r3, r5, sl, ip, sp}^
    18c8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    18cc:	00006564 	andeq	r6, r0, r4, ror #10
    18d0:	69736465 	ldmdbvs	r3!, {r0, r2, r5, r6, sl, sp, lr}^
    18d4:	632e6e67 	teqvs	lr, #1648	; 0x670
    18d8:	00000100 	andeq	r0, r0, r0, lsl #2
    18dc:	35616873 	strbcc	r6, [r1, #-2163]!	; 0x873
    18e0:	682e3231 	stmdavs	lr!, {r0, r4, r5, r9, ip, sp}
    18e4:	00000100 	andeq	r0, r0, r0, lsl #2
    18e8:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    18ec:	2e393135 	mrccs	1, 1, r3, cr9, cr5, {1}
    18f0:	00010068 	andeq	r0, r1, r8, rrx
    18f4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    18f8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    18fc:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1900:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    1904:	00020068 	andeq	r0, r2, r8, rrx
    1908:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    190c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1910:	00030068 	andeq	r0, r3, r8, rrx
    1914:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    1918:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    191c:	00040068 	andeq	r0, r4, r8, rrx
    1920:	72706600 	rsbsvc	r6, r0, #0, 12
    1924:	2e656d69 	cdpcs	13, 6, cr6, cr5, cr9, {3}
    1928:	00010068 	andeq	r0, r1, r8, rrx
    192c:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    1930:	2e393135 	mrccs	1, 1, r3, cr9, cr5, {1}
    1934:	00010068 	andeq	r0, r1, r8, rrx
    1938:	05000000 	streq	r0, [r0, #-0]
    193c:	00000002 	andeq	r0, r0, r2
    1940:	013a0300 	teqeq	sl, r0, lsl #6
    1944:	63030204 	movwvs	r0, #12804	; 0x3204
    1948:	03010420 	movweq	r0, #5152	; 0x1420
    194c:	0204201d 	andeq	r2, r4, #29
    1950:	04206303 	strteq	r6, [r0], #-771	; 0x303
    1954:	201d0301 	andscs	r0, sp, r1, lsl #6
    1958:	63030204 	movwvs	r0, #12804	; 0x3204
    195c:	9a01042e 	bls	42a1c <__Stack_Size+0x4221c>
    1960:	03030459 	movweq	r0, #13401	; 0x3459
    1964:	2f2d6626 	svccs	0x002d6626
    1968:	0301042d 	movweq	r0, #5165	; 0x142d
    196c:	03042e76 	movweq	r2, #20086	; 0x4e76
    1970:	042e0c03 	strteq	r0, [lr], #-3075	; 0xc03
    1974:	2e740301 	cdpcs	3, 7, cr0, cr4, cr1, {0}
    1978:	0a030304 	beq	c2590 <__Stack_Size+0xc1d90>
    197c:	01043020 	tsteq	r4, r0, lsr #32
    1980:	032e7403 	teqeq	lr, #50331648	; 0x3000000
    1984:	03592e78 	cmpeq	r9, #120, 28	; 0x780
    1988:	06025811 			; <UNDEFINED> instruction: 0x06025811
    198c:	00010100 	andeq	r0, r1, r0, lsl #2
    1990:	1ed40205 	cdpne	2, 13, cr0, cr4, cr5, {0}
    1994:	8d030800 	stchi	8, cr0, [r3, #-0]
    1998:	60030101 	andvs	r0, r3, r1, lsl #2
    199c:	2e200358 	mcrcs	3, 1, r0, cr0, cr8, {2}
    19a0:	832e6003 	teqhi	lr, #3
    19a4:	0204212d 	andeq	r2, r4, #1073741835	; 0x4000000b
    19a8:	4a7faf03 	bmi	1fed5bc <__Stack_Size+0x1fecdbc>
    19ac:	d1030104 	tstle	r3, r4, lsl #2
    19b0:	02042000 	andeq	r2, r4, #0
    19b4:	667faf03 	ldrbtvs	sl, [pc], -r3, lsl #30
    19b8:	d1030104 	tstle	r3, r4, lsl #2
    19bc:	02042000 	andeq	r2, r4, #0
    19c0:	2e7faf03 	cdpcs	15, 7, cr10, cr15, cr3, {0}
    19c4:	2c030104 	stfcss	f0, [r3], {4}
    19c8:	03020482 	movweq	r0, #9346	; 0x2482
    19cc:	01042e54 	tsteq	r4, r4, asr lr
    19d0:	262e2c03 	strtcs	r2, [lr], -r3, lsl #24
    19d4:	1f3d4ce6 	svcne	0x003d4ce6
    19d8:	302c223d 	eorcc	r2, ip, sp, lsr r2
    19dc:	7203332b 	andvc	r3, r3, #-1409286144	; 0xac000000
    19e0:	10035982 	andne	r5, r3, r2, lsl #19
    19e4:	59036766 	stmdbpl	r3, {r1, r2, r5, r6, r8, r9, sl, sp, lr}
    19e8:	66780366 	ldrbtvs	r0, [r8], -r6, ror #6
    19ec:	58740359 	ldmdapl	r4!, {r0, r3, r4, r6, r8, r9}^
    19f0:	03221e5a 	teqeq	r2, #1440	; 0x5a0
    19f4:	034a00f9 	movteq	r0, #41209	; 0xa0f9
    19f8:	5a587f85 	bpl	1621814 <__Stack_Size+0x1621014>
    19fc:	fb03221e 	blx	ca27e <__Stack_Size+0xc9a7e>
    1a00:	8e034a00 	vmlahi.f32	s8, s6, s0
    1a04:	0359587f 	cmpeq	r9, #8323072	; 0x7f0000
    1a08:	035800f5 	cmpeq	r8, #245	; 0xf5
    1a0c:	34224a79 	strtcc	r4, [r2], #-2681	; 0xa79
    1a10:	4a7faf03 	bmi	1fed624 <__Stack_Size+0x1fece24>
    1a14:	01000802 	tsteq	r0, r2, lsl #16
    1a18:	00070201 	andeq	r0, r7, r1, lsl #4
    1a1c:	f7000200 			; <UNDEFINED> instruction: 0xf7000200
    1a20:	02000000 	andeq	r0, r0, #0
    1a24:	0d0efb01 	vstreq	d15, [lr, #-4]
    1a28:	01010100 	mrseq	r0, (UNDEF: 17)
    1a2c:	00000001 	andeq	r0, r0, r1
    1a30:	01000001 	tsteq	r0, r1
    1a34:	31353532 	teqcc	r5, r2, lsr r5
    1a38:	3a630039 	bcc	18c1b24 <__Stack_Size+0x18c1324>
    1a3c:	6f72705c 	svcvs	0x0072705c
    1a40:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    1a44:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    1a48:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1a4c:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    1a50:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    1a54:	6f6f7420 	svcvs	0x006f7420
    1a58:	6120736c 	teqvs	r0, ip, ror #6
    1a5c:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    1a60:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    1a64:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    1a68:	20382e34 	eorscs	r2, r8, r4, lsr lr
    1a6c:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    1a70:	615c3371 	cmpvs	ip, r1, ror r3
    1a74:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1a78:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1a7c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1a80:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    1a84:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1a88:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    1a8c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    1a90:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    1a94:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
    1a98:	206d6172 	rsbcs	r6, sp, r2, ror r1
    1a9c:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
    1aa0:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
    1aa4:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
    1aa8:	20756e67 	rsbscs	r6, r5, r7, ror #28
    1aac:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 18e4 <__Stack_Size+0x10e4>
    1ab0:	72612073 	rsbvc	r2, r1, #115	; 0x73
    1ab4:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
    1ab8:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    1abc:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
    1ac0:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
    1ac4:	71343130 	teqvc	r4, r0, lsr r1
    1ac8:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    1acc:	6f6e2d6d 	svcvs	0x006e2d6d
    1ad0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    1ad4:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    1ad8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1adc:	00656475 	rsbeq	r6, r5, r5, ror r4
    1ae0:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    1ae4:	2e393135 	mrccs	1, 1, r3, cr9, cr5, {1}
    1ae8:	00010063 	andeq	r0, r1, r3, rrx
    1aec:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    1af0:	2e393135 	mrccs	1, 1, r3, cr9, cr5, {1}
    1af4:	00010068 	andeq	r0, r1, r8, rrx
    1af8:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    1afc:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1b00:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1b04:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    1b08:	00020068 	andeq	r0, r2, r8, rrx
    1b0c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    1b10:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1b14:	00030068 	andeq	r0, r3, r8, rrx
    1b18:	05000000 	streq	r0, [r0, #-0]
    1b1c:	00205002 	eoreq	r5, r0, r2
    1b20:	010c0308 	tsteq	ip, r8, lsl #6
    1b24:	027a3b25 	rsbseq	r3, sl, #37888	; 0x9400
    1b28:	01010004 	tsteq	r1, r4
    1b2c:	70020500 	andvc	r0, r2, r0, lsl #10
    1b30:	03080020 	movweq	r0, #32800	; 0x8020
    1b34:	03260119 	teqeq	r6, #1073741830	; 0x40000006
    1b38:	2f26207a 	svccs	0x0026207a
    1b3c:	1f1e232d 	svcne	0x001e232d
    1b40:	02040200 	andeq	r0, r4, #0, 4
    1b44:	04020032 	streq	r0, [r2], #-50	; 0x32
    1b48:	02002f02 	andeq	r2, r0, #2, 30
    1b4c:	001e0204 	andseq	r0, lr, r4, lsl #4
    1b50:	31020402 	tstcc	r2, r2, lsl #8
    1b54:	02040200 	andeq	r0, r4, #0, 4
    1b58:	0020062b 	eoreq	r0, r0, fp, lsr #12
    1b5c:	06020402 	streq	r0, [r2], -r2, lsl #8
    1b60:	002e0d03 	eoreq	r0, lr, r3, lsl #26
    1b64:	2f020402 	svccs	0x00020402
    1b68:	02040200 	andeq	r0, r4, #0, 4
    1b6c:	0402002c 	streq	r0, [r2], #-44	; 0x2c
    1b70:	02003102 	andeq	r3, r0, #-2147483648	; 0x80000000
    1b74:	262b0204 	strtcs	r0, [fp], -r4, lsl #4
    1b78:	03201d03 	teqeq	r0, #3, 26	; 0xc0
    1b7c:	1a032063 	bne	c9d10 <__Stack_Size+0xc9510>
    1b80:	2e67033c 	mcrcs	3, 3, r0, cr7, cr12, {1}
    1b84:	242e1903 	strtcs	r1, [lr], #-2307	; 0x903
    1b88:	3c680373 	stclcc	3, cr0, [r8], #-460	; 0xfffffe34
    1b8c:	01000402 	tsteq	r0, r2, lsl #8
    1b90:	02050001 	andeq	r0, r5, #1
    1b94:	080020e0 	stmdaeq	r0, {r5, r6, r7, sp}
    1b98:	5d013c03 	stcpl	12, cr3, [r1, #-12]
    1b9c:	2f143102 	svccs	0x00143102
    1ba0:	032f302f 	teqeq	pc, #47	; 0x2f
    1ba4:	241d4a78 	ldrcs	r4, [sp], #-2680	; 0xa78
    1ba8:	211f212d 	tstcs	pc, sp, lsr #2
    1bac:	0002022d 	andeq	r0, r2, sp, lsr #4
    1bb0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1bb4:	00217c02 	eoreq	r7, r1, r2, lsl #24
    1bb8:	00cd0308 	sbceq	r0, sp, r8, lsl #6
    1bbc:	be130801 	cdplt	8, 1, cr0, cr3, cr1, {0}
    1bc0:	1f133202 	svcne	0x00133202
    1bc4:	65211e4b 	strvs	r1, [r1, #-3659]!	; 0xe4b
    1bc8:	0002023e 	andeq	r0, r2, lr, lsr r2
    1bcc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1bd0:	00224002 	eoreq	r4, r2, r2
    1bd4:	00d60308 	sbcseq	r0, r6, r8, lsl #6
    1bd8:	211b1701 	tstcs	fp, r1, lsl #14
    1bdc:	02040200 	andeq	r0, r4, #0, 4
    1be0:	04020026 	streq	r0, [r2], #-38	; 0x26
    1be4:	02005902 	andeq	r5, r0, #32768	; 0x8000
    1be8:	441d0204 	ldrmi	r0, [sp], #-516	; 0x204
    1bec:	2f2d212d 	svccs	0x002d212d
    1bf0:	0022212d 	eoreq	r2, r2, sp, lsr #2
    1bf4:	21020402 	tstcs	r2, r2, lsl #8
    1bf8:	02040200 	andeq	r0, r4, #0, 4
    1bfc:	0402003d 	streq	r0, [r2], #-61	; 0x3d
    1c00:	02001e02 	andeq	r1, r0, #2, 28
    1c04:	00310204 	eorseq	r0, r1, r4, lsl #4
    1c08:	2b020402 	blcs	82c18 <__Stack_Size+0x82418>
    1c0c:	00020225 	andeq	r0, r2, r5, lsr #4
    1c10:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1c14:	00228802 	eoreq	r8, r2, r2, lsl #16
    1c18:	00ed0308 	rsceq	r0, sp, r8, lsl #6
    1c1c:	001f2601 	andseq	r2, pc, r1, lsl #12
    1c20:	22020402 	andcs	r0, r2, #33554432	; 0x2000000
    1c24:	02040200 	andeq	r0, r4, #0, 4
    1c28:	04020067 	streq	r0, [r2], #-103	; 0x67
    1c2c:	02001e02 	andeq	r1, r0, #2, 28
    1c30:	00310204 	eorseq	r0, r1, r4, lsl #4
    1c34:	2b020402 	blcs	82c44 <__Stack_Size+0x82444>
    1c38:	301c3226 	andscc	r3, ip, r6, lsr #4
    1c3c:	02003d3b 	andeq	r3, r0, #3776	; 0xec0
    1c40:	00310204 	eorseq	r0, r1, r4, lsl #4
    1c44:	2f020402 	svccs	0x00020402
    1c48:	02040200 	andeq	r0, r4, #0, 4
    1c4c:	0402001e 	streq	r0, [r2], #-30
    1c50:	02003102 	andeq	r3, r0, #-2147483648	; 0x80000000
    1c54:	252b0204 	strcs	r0, [fp, #-516]!	; 0x204
    1c58:	01000202 	tsteq	r0, r2, lsl #4
    1c5c:	02050001 	andeq	r0, r5, #1
    1c60:	080022d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sp}
    1c64:	01018503 	tsteq	r1, r3, lsl #10
    1c68:	02001f26 	andeq	r1, r0, #38, 30	; 0x98
    1c6c:	00220204 	eoreq	r0, r2, r4, lsl #4
    1c70:	4b020402 	blmi	82c80 <__Stack_Size+0x82480>
    1c74:	02040200 	andeq	r0, r4, #0, 4
    1c78:	0402001e 	streq	r0, [r2], #-30
    1c7c:	02003102 	andeq	r3, r0, #-2147483648	; 0x80000000
    1c80:	262b0204 	strtcs	r0, [fp], -r4, lsl #4
    1c84:	1f221c24 	svcne	0x00221c24
    1c88:	00212d2f 	eoreq	r2, r1, pc, lsr #26
    1c8c:	31020402 	tstcc	r2, r2, lsl #8
    1c90:	02040200 	andeq	r0, r4, #0, 4
    1c94:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    1c98:	02001e02 	andeq	r1, r0, #2, 28
    1c9c:	00310204 	eorseq	r0, r1, r4, lsl #4
    1ca0:	2b020402 	blcs	82cb0 <__Stack_Size+0x824b0>
    1ca4:	00030225 	andeq	r0, r3, r5, lsr #4
    1ca8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1cac:	00231c02 	eoreq	r1, r3, r2, lsl #24
    1cb0:	019d0308 	orrseq	r0, sp, r8, lsl #6
    1cb4:	032b3201 	teqeq	fp, #268435456	; 0x10000000
    1cb8:	3d29200b 	stccc	0, cr2, [r9, #-44]!	; 0xffffffd4
    1cbc:	02040200 	andeq	r0, r4, #0, 4
    1cc0:	04020021 	streq	r0, [r2], #-33	; 0x21
    1cc4:	02003b02 	andeq	r3, r0, #2048	; 0x800
    1cc8:	002f0204 	eoreq	r0, pc, r4, lsl #4
    1ccc:	2d020402 	cfstrscs	mvf0, [r2, #-8]
    1cd0:	01040200 	mrseq	r0, R12_usr
    1cd4:	0402004d 	streq	r0, [r2], #-77	; 0x4d
    1cd8:	02007602 	andeq	r7, r0, #2097152	; 0x200000
    1cdc:	002d0204 	eoreq	r0, sp, r4, lsl #4
    1ce0:	49020402 	stmdbmi	r2, {r1, sl}
    1ce4:	02040200 	andeq	r0, r4, #0, 4
    1ce8:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    1cec:	03242d02 	teqeq	r4, #2, 26	; 0x80
    1cf0:	0e032e75 	mcreq	14, 0, r2, cr3, cr5, {3}
    1cf4:	2f3b2158 	svccs	0x003b2158
    1cf8:	0200232d 	andeq	r2, r0, #-1275068416	; 0xb4000000
    1cfc:	00210204 	eoreq	r0, r1, r4, lsl #4
    1d00:	2f020402 	svccs	0x00020402
    1d04:	02040200 	andeq	r0, r4, #0, 4
    1d08:	0402001e 	streq	r0, [r2], #-30
    1d0c:	02003102 	andeq	r3, r0, #-2147483648	; 0x80000000
    1d10:	252b0204 	strcs	r0, [fp, #-516]!	; 0x204
    1d14:	01000302 	tsteq	r0, r2, lsl #6
    1d18:	02050001 	andeq	r0, r5, #1
    1d1c:	00000000 	andeq	r0, r0, r0
    1d20:	0101ba03 	tsteq	r1, r3, lsl #20
    1d24:	032e6703 	teqeq	lr, #786432	; 0xc0000
    1d28:	64032e19 	strvs	r2, [r3], #-3609	; 0xe19
    1d2c:	200b032e 	andcs	r0, fp, lr, lsr #6
    1d30:	3b213d1b 	blcc	8511a4 <__Stack_Size+0x8509a4>
    1d34:	764d2d2f 	strbvc	r2, [sp], -pc, lsr #26
    1d38:	2d2f492d 	stccs	9, cr4, [pc, #-180]!	; 1c8c <__Stack_Size+0x148c>
    1d3c:	2e750324 	cdpcs	3, 7, cr0, cr5, cr4, {1}
    1d40:	2f580e03 	svccs	0x00580e03
    1d44:	4e2d2f3b 	mcrmi	15, 1, r2, cr13, cr11, {1}
    1d48:	2b232c2f 	blcs	8cce0c <__Stack_Size+0x8cc60c>
    1d4c:	f1030204 			; <UNDEFINED> instruction: 0xf1030204
    1d50:	0104207e 	tsteq	r4, lr, ror r0
    1d54:	08019c03 	stmdaeq	r1, {r0, r1, sl, fp, ip, pc}
    1d58:	0004022e 	andeq	r0, r4, lr, lsr #4
    1d5c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1d60:	00000002 	andeq	r0, r0, r2
    1d64:	01c20300 	biceq	r0, r2, r0, lsl #6
    1d68:	211c1601 	tstcs	ip, r1, lsl #12
    1d6c:	02040200 	andeq	r0, r4, #0, 4
    1d70:	04020025 	streq	r0, [r2], #-37	; 0x25
    1d74:	02005902 	andeq	r5, r0, #32768	; 0x8000
    1d78:	421d0204 	andsmi	r0, sp, #4, 4	; 0x40000000
    1d7c:	2c301f21 	ldccs	15, cr1, [r0], #-132	; 0xffffff7c
    1d80:	02003022 	andeq	r3, r0, #34	; 0x22
    1d84:	00210204 	eoreq	r0, r1, r4, lsl #4
    1d88:	2f020402 	svccs	0x00020402
    1d8c:	02040200 	andeq	r0, r4, #0, 4
    1d90:	0402001e 	streq	r0, [r2], #-30
    1d94:	02003102 	andeq	r3, r0, #-2147483648	; 0x80000000
    1d98:	252b0204 	strcs	r0, [fp, #-516]!	; 0x204
    1d9c:	01000202 	tsteq	r0, r2, lsl #4
    1da0:	02050001 	andeq	r0, r5, #1
    1da4:	080023a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sp}
    1da8:	0101d803 	tsteq	r1, r3, lsl #16
    1dac:	032e4903 	teqeq	lr, #49152	; 0xc000
    1db0:	46032037 			; <UNDEFINED> instruction: 0x46032037
    1db4:	200b0320 	andcs	r0, fp, r0, lsr #6
    1db8:	3b212f29 	blcc	84da64 <__Stack_Size+0x84d264>
    1dbc:	684d2d2f 	stmdavs	sp, {r0, r1, r2, r3, r5, r8, sl, fp, sp}^
    1dc0:	2d2f492d 	stccs	9, cr4, [pc, #-180]!	; 1d14 <__Stack_Size+0x1514>
    1dc4:	2e750324 	cdpcs	3, 7, cr0, cr5, cr4, {1}
    1dc8:	2f3c0e03 	svccs	0x003c0e03
    1dcc:	3d2d2f3b 	stccc	15, cr2, [sp, #-236]!	; 0xffffff14
    1dd0:	232c2f23 	teqcs	ip, #35, 30	; 0x8c
    1dd4:	7477032b 	ldrbtvc	r0, [r7], #-811	; 0x32b
    1dd8:	49212f29 	stmdbmi	r1!, {r0, r3, r5, r8, r9, sl, fp, sp}
    1ddc:	763f2d2f 	ldrtvc	r2, [pc], -pc, lsr #26
    1de0:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    1de4:	20750324 	rsbscs	r0, r5, r4, lsr #6
    1de8:	213c0e03 	teqcs	ip, r3, lsl #28
    1dec:	232d2f3b 	teqcs	sp, #59, 30	; 0xec
    1df0:	311e2f21 	tstcc	lr, r1, lsr #30
    1df4:	3c77032b 	ldclcc	3, cr0, [r7], #-172	; 0xffffff54
    1df8:	033c0903 	teqeq	ip, #49152	; 0xc000
    1dfc:	213d3c72 	teqcs	sp, r2, ror ip
    1e00:	4d2d2f49 	stcmi	15, cr2, [sp, #-292]!	; 0xfffffedc
    1e04:	2f492d84 	svccs	0x00492d84
    1e08:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1e0c:	580e032e 	stmdapl	lr, {r1, r2, r3, r5, r8, r9}
    1e10:	2d2f3b2f 	fstmdbxcs	pc!, {d3-d25}	;@ Deprecated
    1e14:	2c2f232f 	stccs	3, cr2, [pc], #-188	; 1d60 <__Stack_Size+0x1560>
    1e18:	72032b23 	andvc	r2, r3, #35840	; 0x8c00
    1e1c:	49213d4a 	stmdbmi	r1!, {r1, r3, r6, r8, sl, fp, ip, sp}
    1e20:	923f2d2f 	eorsls	r2, pc, #3008	; 0xbc0
    1e24:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    1e28:	2e750324 	cdpcs	3, 7, cr0, cr5, cr4, {1}
    1e2c:	21580e03 	cmpcs	r8, r3, lsl #28
    1e30:	232d2f3b 	teqcs	sp, #59, 30	; 0xec
    1e34:	311e2f21 	tstcc	lr, r1, lsr #30
    1e38:	0402002b 	streq	r0, [r2], #-43	; 0x2b
    1e3c:	203f0302 	eorscs	r0, pc, r2, lsl #6
    1e40:	03064a06 	movweq	r4, #27142	; 0x6a06
    1e44:	29207fb8 	stmdbcs	r0!, {r3, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    1e48:	2f3b213d 	svccs	0x003b213d
    1e4c:	2d764d2d 	ldclcs	13, cr4, [r6, #-180]!	; 0xffffff4c
    1e50:	242d2f49 	strtcs	r2, [sp], #-3913	; 0xf49
    1e54:	032e7503 	teqeq	lr, #12582912	; 0xc00000
    1e58:	3b2f580e 	blcc	bd7e98 <__Stack_Size+0xbd7698>
    1e5c:	232f2d2f 	teqcs	pc, #3008	; 0xbc0
    1e60:	2b232c2f 	blcs	8ccf24 <__Stack_Size+0x8cc724>
    1e64:	37747703 	ldrbcc	r7, [r4, -r3, lsl #14]!
    1e68:	2f49212f 	svccs	0x0049212f
    1e6c:	2d763f2d 	ldclcs	15, cr3, [r6, #-180]!	; 0xffffff4c
    1e70:	242d2149 	strtcs	r2, [sp], #-329	; 0x149
    1e74:	03207503 	teqeq	r0, #12582912	; 0xc00000
    1e78:	3b213c0e 	blcc	850eb8 <__Stack_Size+0x8506b8>
    1e7c:	21232d2f 	teqcs	r3, pc, lsr #26
    1e80:	2b311e2f 	blcs	c49744 <__Stack_Size+0xc48f44>
    1e84:	293c7703 	ldmdbcs	ip!, {r0, r1, r8, r9, sl, ip, sp, lr}
    1e88:	2f49212f 	svccs	0x0049212f
    1e8c:	2d684d2d 	stclcs	13, cr4, [r8, #-180]!	; 0xffffff4c
    1e90:	242d2f49 	strtcs	r2, [sp], #-3913	; 0xf49
    1e94:	032e7503 	teqeq	lr, #12582912	; 0xc00000
    1e98:	3b2f3c0e 	blcc	bd0ed8 <__Stack_Size+0xbd06d8>
    1e9c:	232f2d2f 	teqcs	pc, #3008	; 0xbc0
    1ea0:	2b232c2f 	blcs	8ccf64 <__Stack_Size+0x8cc764>
    1ea4:	37747703 	ldrbcc	r7, [r4, -r3, lsl #14]!
    1ea8:	2f49212f 	svccs	0x0049212f
    1eac:	2d763f2d 	ldclcs	15, cr3, [r6, #-180]!	; 0xffffff4c
    1eb0:	242d2149 	strtcs	r2, [sp], #-329	; 0x149
    1eb4:	03207503 	teqeq	r0, #12582912	; 0xc00000
    1eb8:	3b213c0e 	blcc	850ef8 <__Stack_Size+0x8506f8>
    1ebc:	21232d2f 	teqcs	r3, pc, lsr #26
    1ec0:	2b311e2f 	blcs	c49784 <__Stack_Size+0xc48f84>
    1ec4:	293c7703 	ldmdbcs	ip!, {r0, r1, r8, r9, sl, ip, sp, lr}
    1ec8:	2f49212f 	svccs	0x0049212f
    1ecc:	2d684d2d 	stclcs	13, cr4, [r8, #-180]!	; 0xffffff4c
    1ed0:	242d2f49 	strtcs	r2, [sp], #-3913	; 0xf49
    1ed4:	032e7503 	teqeq	lr, #12582912	; 0xc00000
    1ed8:	3b2f3c0e 	blcc	bd0f18 <__Stack_Size+0xbd0718>
    1edc:	232f2d2f 	teqcs	pc, #3008	; 0xbc0
    1ee0:	2b232c2f 	blcs	8ccfa4 <__Stack_Size+0x8cc7a4>
    1ee4:	29747703 	ldmdbcs	r4!, {r0, r1, r8, r9, sl, ip, sp, lr}^
    1ee8:	2f49212f 	svccs	0x0049212f
    1eec:	2d763f2d 	ldclcs	15, cr3, [r6, #-180]!	; 0xffffff4c
    1ef0:	242d2149 	strtcs	r2, [sp], #-329	; 0x149
    1ef4:	03207503 	teqeq	r0, #12582912	; 0xc00000
    1ef8:	3b213c0e 	blcc	850f38 <__Stack_Size+0x850738>
    1efc:	21232d2f 	teqcs	r3, pc, lsr #26
    1f00:	2b311e2f 	blcs	c497c4 <__Stack_Size+0xc48fc4>
    1f04:	293c7703 	ldmdbcs	ip!, {r0, r1, r8, r9, sl, ip, sp, lr}
    1f08:	2f49212f 	svccs	0x0049212f
    1f0c:	2d684d2d 	stclcs	13, cr4, [r8, #-180]!	; 0xffffff4c
    1f10:	242d2f49 	strtcs	r2, [sp], #-3913	; 0xf49
    1f14:	032e7503 	teqeq	lr, #12582912	; 0xc00000
    1f18:	3b2f3c0e 	blcc	bd0f58 <__Stack_Size+0xbd0758>
    1f1c:	232f2d2f 	teqcs	pc, #3008	; 0xbc0
    1f20:	2b232c2f 	blcs	8ccfe4 <__Stack_Size+0x8cc7e4>
    1f24:	29747703 	ldmdbcs	r4!, {r0, r1, r8, r9, sl, ip, sp, lr}^
    1f28:	2f49212f 	svccs	0x0049212f
    1f2c:	2d763f2d 	ldclcs	15, cr3, [r6, #-180]!	; 0xffffff4c
    1f30:	242d2149 	strtcs	r2, [sp], #-329	; 0x149
    1f34:	03207503 	teqeq	r0, #12582912	; 0xc00000
    1f38:	3b213c0e 	blcc	850f78 <__Stack_Size+0x850778>
    1f3c:	21232d2f 	teqcs	r3, pc, lsr #26
    1f40:	2b311e2f 	blcs	c49804 <__Stack_Size+0xc49004>
    1f44:	2000d503 	andcs	sp, r0, r3, lsl #10
    1f48:	01000402 	tsteq	r0, r2, lsl #8
    1f4c:	02050001 	andeq	r0, r5, #1
    1f50:	00000000 	andeq	r0, r0, r0
    1f54:	01028a03 	tsteq	r2, r3, lsl #20
    1f58:	0204232e 	andeq	r2, r4, #-1207959552	; 0xb8000000
    1f5c:	3c7e9603 	ldclcc	6, cr9, [lr], #-12
    1f60:	ec030104 	stfs	f0, [r3], {4}
    1f64:	0202ac01 	andeq	sl, r2, #256	; 0x100
    1f68:	00010100 	andeq	r0, r1, r0, lsl #2
    1f6c:	29900205 	ldmibcs	r0, {r0, r2, r9}
    1f70:	b0030800 	andlt	r0, r3, r0, lsl #16
    1f74:	96030102 	strls	r0, [r3], -r2, lsl #2
    1f78:	ea032e7f 	b	cd97c <__Stack_Size+0xcd17c>
    1f7c:	03202000 	teqeq	r0, #0
    1f80:	412e7f93 			; <UNDEFINED> instruction: 0x412e7f93
    1f84:	2f421d4b 	svccs	0x00421d4b
    1f88:	302c301f 	eorcc	r3, ip, pc, lsl r0
    1f8c:	232c2f4d 	teqcs	ip, #308	; 0x134
    1f90:	5859032b 	ldmdapl	r9, {r0, r1, r3, r5, r8, r9}^
    1f94:	49212f1b 	stmdbmi	r1!, {r0, r1, r3, r4, r8, r9, sl, fp, sp}
    1f98:	683f2d2f 	ldmdavs	pc!, {r0, r1, r2, r3, r5, r8, sl, fp, sp}	; <UNPREDICTABLE>
    1f9c:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    1fa0:	2e750324 	cdpcs	3, 7, cr0, cr5, cr4, {1}
    1fa4:	2f3c0e03 	svccs	0x003c0e03
    1fa8:	3d2d2f3b 	stccc	15, cr2, [sp, #-236]!	; 0xffffff14
    1fac:	232c2f23 	teqcs	ip, #35, 30	; 0x8c
    1fb0:	5877032b 	ldmdapl	r7!, {r0, r1, r3, r5, r8, r9}^
    1fb4:	65212f1b 	strvs	r2, [r1, #-3867]!	; 0xf1b
    1fb8:	683f2d2f 	ldmdavs	pc!, {r0, r1, r2, r3, r5, r8, sl, fp, sp}	; <UNPREDICTABLE>
    1fbc:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    1fc0:	20750324 	rsbscs	r0, r5, r4, lsr #6
    1fc4:	2f3c0e03 	svccs	0x003c0e03
    1fc8:	4b2d2f57 	blmi	b4dd2c <__Stack_Size+0xb4d52c>
    1fcc:	232c2f31 	teqcs	ip, #49, 30	; 0xc4
    1fd0:	5877032b 	ldmdapl	r7!, {r0, r1, r3, r5, r8, r9}^
    1fd4:	3c740343 	ldclcc	3, cr0, [r4], #-268	; 0xfffffef4
    1fd8:	2f49213d 	svccs	0x0049213d
    1fdc:	2d843f2d 	stccs	15, cr3, [r4, #180]	; 0xb4
    1fe0:	242d2149 	strtcs	r2, [sp], #-329	; 0x149
    1fe4:	034a7503 	movteq	r7, #42243	; 0xa503
    1fe8:	3b2f580e 	blcc	bd8028 <__Stack_Size+0xbd7828>
    1fec:	232f2d2f 	teqcs	pc, #3008	; 0xbc0
    1ff0:	2b232c3d 	blcs	8cd0ec <__Stack_Size+0x8cc8ec>
    1ff4:	3d4a7203 	sfmcc	f7, 2, [sl, #-12]
    1ff8:	2d2f6521 	cfstr32cs	mvfx6, [pc, #-132]!	; 1f7c <__Stack_Size+0x177c>
    1ffc:	492d843f 	pushmi	{r0, r1, r2, r3, r4, r5, sl, pc}
    2000:	03242d21 	teqeq	r4, #2112	; 0x840
    2004:	0e032e75 	mcreq	14, 0, r2, cr3, cr5, {3}
    2008:	2f3b2f58 	svccs	0x003b2f58
    200c:	3b232f2d 	blcc	8cdcc8 <__Stack_Size+0x8cd4c8>
    2010:	2b232c30 	blcs	8cd0d8 <__Stack_Size+0x8cc8d8>
    2014:	2000f003 	andcs	pc, r0, r3
    2018:	907f8703 	rsbsls	r8, pc, r3, lsl #14
    201c:	49212f1b 	stmdbmi	r1!, {r0, r1, r3, r4, r8, r9, sl, fp, sp}
    2020:	683f2d2f 	ldmdavs	pc!, {r0, r1, r2, r3, r5, r8, sl, fp, sp}	; <UNPREDICTABLE>
    2024:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    2028:	4a750324 	bmi	1d42cc0 <__Stack_Size+0x1d424c0>
    202c:	2f3c0e03 	svccs	0x003c0e03
    2030:	2f2d2f3b 	svccs	0x002d2f3b
    2034:	232c2f23 	teqcs	ip, #35, 30	; 0x8c
    2038:	5877032b 	ldmdapl	r7!, {r0, r1, r3, r5, r8, r9}^
    203c:	65212f29 	strvs	r2, [r1, #-3881]!	; 0xf29
    2040:	683f2d2f 	ldmdavs	pc!, {r0, r1, r2, r3, r5, r8, sl, fp, sp}	; <UNPREDICTABLE>
    2044:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    2048:	20750324 	rsbscs	r0, r5, r4, lsr #6
    204c:	2f3c0e03 	svccs	0x003c0e03
    2050:	2f2d2f3b 	svccs	0x002d2f3b
    2054:	2c222d23 	stccs	13, cr2, [r2], #-140	; 0xffffff74
    2058:	77032b23 	strvc	r2, [r3, -r3, lsr #22]
    205c:	212f1b58 	teqcs	pc, r8, asr fp	; <UNPREDICTABLE>
    2060:	3f2d2f49 	svccc	0x002d2f49
    2064:	21492d68 	cmpcs	r9, r8, ror #26
    2068:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    206c:	3c0e032e 	stccc	3, cr0, [lr], {46}	; 0x2e
    2070:	2d2f3b2f 	fstmdbxcs	pc!, {d3-d25}	;@ Deprecated
    2074:	2c2f232f 	stccs	3, cr2, [pc], #-188	; 1fc0 <__Stack_Size+0x17c0>
    2078:	77032b23 	strvc	r2, [r3, -r3, lsr #22]
    207c:	212f2958 	teqcs	pc, r8, asr r9	; <UNPREDICTABLE>
    2080:	3f2d2f65 	svccc	0x002d2f65
    2084:	21492d68 	cmpcs	r9, r8, ror #26
    2088:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    208c:	3c0e0320 	stccc	3, cr0, [lr], {32}
    2090:	2d4b3b2f 	vstrcs	d19, [fp, #-188]	; 0xffffff44
    2094:	2c2f232f 	stccs	3, cr2, [pc], #-188	; 1fe0 <__Stack_Size+0x17e0>
    2098:	77032b23 	strvc	r2, [r3, -r3, lsr #22]
    209c:	212f1b58 	teqcs	pc, r8, asr fp	; <UNPREDICTABLE>
    20a0:	3f2d2f49 	svccc	0x002d2f49
    20a4:	21492d68 	cmpcs	r9, r8, ror #26
    20a8:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    20ac:	3c0e0320 	stccc	3, cr0, [lr], {32}
    20b0:	2d2f3b2f 	fstmdbxcs	pc!, {d3-d25}	;@ Deprecated
    20b4:	2c2f232f 	stccs	3, cr2, [pc], #-188	; 2000 <__Stack_Size+0x1800>
    20b8:	de032b23 	vmlale.f64	d2, d3, d19
    20bc:	e4032e7e 	str	r2, [r3], #-3710	; 0xe7e
    20c0:	1e679e00 	cdpne	14, 6, cr9, cr7, cr0, {0}
    20c4:	4c262b31 	stcmi	11, cr2, [r6], #-196	; 0xffffff3c
    20c8:	4b3b301e 	blmi	ece148 <__Stack_Size+0xecd948>
    20cc:	232c2f31 	teqcs	ip, #49, 30	; 0xc4
    20d0:	2e2c032b 	cdpcs	3, 2, cr0, cr12, cr11, {1}
    20d4:	032e5403 	teqeq	lr, #50331648	; 0x3000000
    20d8:	3d1b3c2c 	ldccc	12, cr3, [fp, #-176]	; 0xffffff50
    20dc:	2d2f6521 	cfstr32cs	mvfx6, [pc, #-132]!	; 2060 <__Stack_Size+0x1860>
    20e0:	492d683f 	pushmi	{r0, r1, r2, r3, r4, r5, fp, sp, lr}
    20e4:	03242d21 	teqeq	r4, #2112	; 0x840
    20e8:	0e032075 	mcreq	0, 0, r2, cr3, cr5, {3}
    20ec:	2f3b2f3c 	svccs	0x003b2f3c
    20f0:	2f232f2d 	svccs	0x00232f2d
    20f4:	032b232c 	teqeq	fp, #44, 6	; 0xb0000000
    20f8:	2f295877 	svccs	0x00295877
    20fc:	2d2f3b21 	fstmdbxcs	pc!, {d3-d18}	;@ Deprecated
    2100:	492d683f 	pushmi	{r0, r1, r2, r3, r4, r5, fp, sp, lr}
    2104:	03242d21 	teqeq	r4, #2112	; 0x840
    2108:	0f032e75 	svceq	0x00032e75
    210c:	49211f3c 	stmdbmi	r1!, {r2, r3, r4, r5, r8, r9, sl, fp, ip}
    2110:	1e2f2f4d 	cdpne	15, 2, cr2, cr15, cr13, {2}
    2114:	91032b31 	tstls	r3, r1, lsr fp
    2118:	04022001 	streq	r2, [r2], #-1
    211c:	fa010100 	blx	42524 <__Stack_Size+0x41d24>
    2120:	02000003 	andeq	r0, r0, #3
    2124:	00016000 	andeq	r6, r1, r0
    2128:	fb010200 	blx	42932 <__Stack_Size+0x42132>
    212c:	01000d0e 	tsteq	r0, lr, lsl #26
    2130:	00010101 	andeq	r0, r1, r1, lsl #2
    2134:	00010000 	andeq	r0, r1, r0
    2138:	35320100 	ldrcc	r0, [r2, #-256]!	; 0x100
    213c:	00393135 	eorseq	r3, r9, r5, lsr r1
    2140:	705c3a63 	subsvc	r3, ip, r3, ror #20
    2144:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    2148:	66206d61 	strtvs	r6, [r0], -r1, ror #26
    214c:	73656c69 	cmnvc	r5, #26880	; 0x6900
    2150:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
    2154:	675c2936 	smmlarvs	ip, r6, r9, r2
    2158:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
    215c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    2160:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
    2164:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
    2168:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    216c:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
    2170:	30322038 	eorscc	r2, r2, r8, lsr r0
    2174:	33713431 	cmncc	r1, #822083584	; 0x31000000
    2178:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    217c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    2180:	61652d65 	cmnvs	r5, r5, ror #26
    2184:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    2188:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    218c:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    2190:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    2194:	6300656e 	movwvs	r6, #1390	; 0x56e
    2198:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    219c:	6172676f 	cmnvs	r2, pc, ror #14
    21a0:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    21a4:	2073656c 	rsbscs	r6, r3, ip, ror #10
    21a8:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    21ac:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    21b0:	6f742075 	svcvs	0x00742075
    21b4:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    21b8:	206d7261 	rsbcs	r7, sp, r1, ror #4
    21bc:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    21c0:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    21c4:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    21c8:	31303220 	teqcc	r0, r0, lsr #4
    21cc:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    21d0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    21d4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    21d8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    21dc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    21e0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    21e4:	3a630065 	bcc	18c2380 <__Stack_Size+0x18c1b80>
    21e8:	6f72705c 	svcvs	0x0072705c
    21ec:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    21f0:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    21f4:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    21f8:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    21fc:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    2200:	6f6f7420 	svcvs	0x006f7420
    2204:	6120736c 	teqvs	r0, ip, ror #6
    2208:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    220c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    2210:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    2214:	20382e34 	eorscs	r2, r8, r4, lsr lr
    2218:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    221c:	6c5c3371 	mrrcvs	3, 7, r3, ip, cr1
    2220:	675c6269 	ldrbvs	r6, [ip, -r9, ror #4]
    2224:	615c6363 	cmpvs	ip, r3, ror #6
    2228:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    222c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    2230:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    2234:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    2238:	695c342e 	ldmdbvs	ip, {r1, r2, r3, r5, sl, ip, sp}^
    223c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2240:	00006564 	andeq	r6, r0, r4, ror #10
    2244:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    2248:	632e656d 	teqvs	lr, #457179136	; 0x1b400000
    224c:	00000100 	andeq	r0, r0, r0, lsl #2
    2250:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    2254:	682e656d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    2258:	00000100 	andeq	r0, r0, r0, lsl #2
    225c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    2260:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    2264:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    2268:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    226c:	00000200 	andeq	r0, r0, r0, lsl #4
    2270:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2274:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2278:	00000300 	andeq	r0, r0, r0, lsl #6
    227c:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
    2280:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    2284:	00000400 	andeq	r0, r0, r0, lsl #8
    2288:	02050000 	andeq	r0, r5, #0
    228c:	00000000 	andeq	r0, r0, r0
    2290:	0100c903 	tsteq	r0, r3, lsl #18
    2294:	027a3b25 	rsbseq	r3, sl, #37888	; 0x9400
    2298:	01010004 	tsteq	r1, r4
    229c:	c4020500 	strgt	r0, [r2], #-1280	; 0x500
    22a0:	0308002f 	movweq	r0, #32815	; 0x802f
    22a4:	4a0100dd 	bmi	42620 <__Stack_Size+0x41e20>
    22a8:	673c4f03 	ldrvs	r4, [ip, -r3, lsl #30]!
    22ac:	2c222240 	sfmcs	f2, 4, [r2], #-256	; 0xffffff00
    22b0:	032e2b03 	teqeq	lr, #3072	; 0xc00
    22b4:	33522e79 	cmpcc	r2, #1936	; 0x790
    22b8:	342d295a 	strtcc	r2, [sp], #-2394	; 0x95a
    22bc:	02040200 	andeq	r0, r4, #0, 4
    22c0:	06132202 	ldreq	r2, [r3], -r2, lsl #4
    22c4:	3d49069e 	stclcc	6, cr0, [r9, #-632]	; 0xfffffd88
    22c8:	3d3b212d 	ldfccs	f2, [fp, #-180]!	; 0xffffff4c
    22cc:	0368211f 	cmneq	r8, #-1073741817	; 0xc0000007
    22d0:	1e4b3c59 	mcrne	12, 2, r3, cr11, cr9, {2}
    22d4:	2a032b31 	bcs	ccfa0 <__Stack_Size+0xcc7a0>
    22d8:	0200bd20 	andeq	fp, r0, #32, 26	; 0x800
    22dc:	003d0204 	eorseq	r0, sp, r4, lsl #4
    22e0:	03020402 	movweq	r0, #9218	; 0x2402
    22e4:	0200664f 	andeq	r6, r0, #82837504	; 0x4f00000
    22e8:	31030204 	tstcc	r3, r4, lsl #4
    22ec:	04020020 	streq	r0, [r2], #-32
    22f0:	2e520302 	cdpcs	3, 5, cr0, cr2, cr2, {0}
    22f4:	311e3d21 	tstcc	lr, r1, lsr #26
    22f8:	0402002b 	streq	r0, [r2], #-43	; 0x2b
    22fc:	20310302 	eorscs	r0, r1, r2, lsl #6
    2300:	02040200 	andeq	r0, r4, #0, 4
    2304:	207fa803 	rsbscs	sl, pc, r3, lsl #16
    2308:	02040200 	andeq	r0, r4, #0, 4
    230c:	2000d803 	andcs	sp, r0, r3, lsl #16
    2310:	02040200 	andeq	r0, r4, #0, 4
    2314:	2e7fab03 	vaddcs.f64	d26, d15, d3
    2318:	312c5921 	teqcc	ip, r1, lsr #18
    231c:	00f5032b 	rscseq	r0, r5, fp, lsr #6
    2320:	73213120 	teqvc	r1, #32, 2
    2324:	433c5903 	teqmi	ip, #49152	; 0xc000
    2328:	3c7fbb03 	ldclcc	11, cr11, [pc], #-12	; 2324 <__Stack_Size+0x1b24>
    232c:	35031e31 	strcc	r1, [r3, #-3633]	; 0xe31
    2330:	032d213c 	teqeq	sp, #60, 2
    2334:	03024a4d 	movweq	r4, #10829	; 0x2a4d
    2338:	00010100 	andeq	r0, r1, r0, lsl #2
    233c:	00000205 	andeq	r0, r0, r5, lsl #4
    2340:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    2344:	312e0100 	teqcc	lr, r0, lsl #2
    2348:	ac030204 	sfmge	f0, 4, [r3], {4}
    234c:	0104587f 	tsteq	r4, pc, ror r8
    2350:	ac00d603 	stcge	6, cr13, [r0], {3}
    2354:	01000202 	tsteq	r0, r2, lsl #4
    2358:	02050001 	andeq	r0, r5, #1
    235c:	00000000 	andeq	r0, r0, r0
    2360:	01018003 	tsteq	r1, r3
    2364:	1431025d 	ldrtne	r0, [r1], #-605	; 0x25d
    2368:	2f302f2f 	svccs	0x00302f2f
    236c:	1d4a7803 	stclne	8, cr7, [sl, #-12]
    2370:	1f212d24 	svcne	0x00212d24
    2374:	02022d21 	andeq	r2, r2, #2112	; 0x840
    2378:	00010100 	andeq	r0, r1, r0, lsl #2
    237c:	00000205 	andeq	r0, r0, r5, lsl #4
    2380:	91030000 	mrsls	r0, (UNDEF: 3)
    2384:	13080101 	movwne	r0, #33025	; 0x8101
    2388:	133202be 	teqne	r2, #-536870901	; 0xe000000b
    238c:	211e4b1f 	tstcs	lr, pc, lsl fp
    2390:	02023e65 	andeq	r3, r2, #1616	; 0x650
    2394:	00010100 	andeq	r0, r1, r0, lsl #2
    2398:	00000205 	andeq	r0, r0, r5, lsl #4
    239c:	9a030000 	bls	c23a4 <__Stack_Size+0xc1ba4>
    23a0:	f3030101 	vrhadd.u8	d0, d3, d1
    23a4:	8d03207e 	stchi	0, cr2, [r3, #-504]	; 0xfffffe08
    23a8:	f6032001 			; <UNDEFINED> instruction: 0xf6032001
    23ac:	4b21207e 	blmi	84a5ac <__Stack_Size+0x849dac>
    23b0:	032b311e 	teqeq	fp, #-2147483641	; 0x80000007
    23b4:	2c593c0e 	mrrccs	12, 0, r3, r9, cr14
    23b8:	f5032b31 			; <UNDEFINED> instruction: 0xf5032b31
    23bc:	21312000 	teqcs	r1, r0
    23c0:	03024473 	movweq	r4, #9331	; 0x2473
    23c4:	00010100 	andeq	r0, r1, r0, lsl #2
    23c8:	00000205 	andeq	r0, r0, r5, lsl #4
    23cc:	a0030000 	andge	r0, r3, r0
    23d0:	ed030101 	stfs	f0, [r3, #-4]
    23d4:	9303207e 	movwls	r2, #12414	; 0x307e
    23d8:	f0032001 			; <UNDEFINED> instruction: 0xf0032001
    23dc:	4b21207e 	blmi	84a5dc <__Stack_Size+0x849ddc>
    23e0:	032b311e 	teqeq	fp, #-2147483641	; 0x80000007
    23e4:	2c593c0e 	mrrccs	12, 0, r3, r9, cr14
    23e8:	f5032b31 			; <UNDEFINED> instruction: 0xf5032b31
    23ec:	21312000 	teqcs	r1, r0
    23f0:	7f850373 	svcvc	0x00850373
    23f4:	5921233c 	stmdbpl	r1!, {r2, r3, r4, r5, r8, r9, sp}
    23f8:	032b312c 	teqeq	fp, #44, 2
    23fc:	312000f5 	strdcc	r0, [r0, -r5]!
    2400:	0f037321 	svceq	0x00037321
    2404:	0003023c 	andeq	r0, r3, ip, lsr r2
    2408:	05000101 	streq	r0, [r0, #-257]	; 0x101
    240c:	00000002 	andeq	r0, r0, r2
    2410:	01a80300 			; <UNDEFINED> instruction: 0x01a80300
    2414:	2b234a01 	blcs	8d4c20 <__Stack_Size+0x8d4420>
    2418:	7f810331 	svcvc	0x00810331
    241c:	2240672e 	subcs	r6, r0, #12058624	; 0xb80000
    2420:	fa032c22 	blx	cd4b0 <__Stack_Size+0xcccb0>
    2424:	02002000 	andeq	r2, r0, #0
    2428:	004b0204 	subeq	r0, fp, r4, lsl #4
    242c:	03020402 	movweq	r0, #9218	; 0x2402
    2430:	00827f90 	umulleq	r7, r2, r0, pc	; <UNPREDICTABLE>
    2434:	03020402 	movweq	r0, #9218	; 0x2402
    2438:	002000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    243c:	03020402 	movweq	r0, #9218	; 0x2402
    2440:	212e7f93 			; <UNDEFINED> instruction: 0x212e7f93
    2444:	2b311e3d 	blcs	c49d40 <__Stack_Size+0xc49540>
    2448:	593c5d03 	ldmdbpl	ip!, {r0, r1, r8, sl, fp, ip, lr}
    244c:	032b311e 	teqeq	fp, #-2147483641	; 0x80000007
    2450:	312000f5 	strdcc	r0, [r0, -r5]!
    2454:	02046521 	andeq	r6, r4, #138412032	; 0x8400000
    2458:	3c7f9203 	lfmcc	f1, 3, [pc], #-12	; 2454 <__Stack_Size+0x1c54>
    245c:	66030104 	strvs	r0, [r3], -r4, lsl #2
    2460:	0302049e 	movweq	r0, #9374	; 0x249e
    2464:	01042e1a 	tsteq	r4, sl, lsl lr
    2468:	21206903 	teqcs	r0, r3, lsl #18
    246c:	2b312c67 	blcs	c4d610 <__Stack_Size+0xc4ce10>
    2470:	673c0e03 	ldrvs	r0, [ip, -r3, lsl #28]!
    2474:	032b311e 	teqeq	fp, #-2147483641	; 0x80000007
    2478:	312000f5 	strdcc	r0, [r0, -r5]!
    247c:	4d398121 	ldfmid	f0, [r9, #-132]!	; 0xffffff7c
    2480:	02008121 	andeq	r8, r0, #1073741832	; 0x40000008
    2484:	18030204 	stmdane	r3, {r2, r9}
    2488:	3c0c033c 	stccc	3, cr0, [ip], {60}	; 0x3c
    248c:	3c7ef703 	ldclcc	7, cr15, [lr], #-12
    2490:	03022c31 	movweq	r2, #11313	; 0x2c31
    2494:	00010100 	andeq	r0, r1, r0, lsl #2
    2498:	00000205 	andeq	r0, r0, r5, lsl #4
    249c:	bc030000 	stclt	0, cr0, [r3], {-0}
    24a0:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    24a4:	3c7eeb03 	ldclcc	11, cr14, [lr], #-12
    24a8:	95030104 	strls	r0, [r3, #-260]	; 0x104
    24ac:	04202001 	strteq	r2, [r0], #-1
    24b0:	7eeb0302 	cdpvc	3, 14, cr0, cr11, cr2, {0}
    24b4:	0301042e 	movweq	r0, #5166	; 0x142e
    24b8:	0490019c 	ldreq	r0, [r0], #412	; 0x19c
    24bc:	7ee40302 	cdpvc	3, 14, cr0, cr4, cr2, {0}
    24c0:	03010420 	movweq	r0, #5152	; 0x1420
    24c4:	00200197 	mlaeq	r0, r7, r1, r0
    24c8:	26020402 	strcs	r0, [r2], -r2, lsl #8
    24cc:	02040200 	andeq	r0, r4, #0, 4
    24d0:	0402003d 	streq	r0, [r2], #-61	; 0x3d
    24d4:	02002c02 	andeq	r2, r0, #512	; 0x200
    24d8:	00310204 	eorseq	r0, r1, r4, lsl #4
    24dc:	2b020402 	blcs	834ec <__Stack_Size+0x82cec>
    24e0:	207f8a03 	rsbscs	r8, pc, r3, lsl #20
    24e4:	2e5a03a3 	cdpcs	3, 5, cr0, cr10, cr3, {5}
    24e8:	2222403d 	eorcs	r4, r2, #61	; 0x3d
    24ec:	0199032c 	orrseq	r0, r9, ip, lsr #6
    24f0:	03020420 	movweq	r0, #9248	; 0x2420
    24f4:	043c7edb 	ldrteq	r7, [ip], #-3803	; 0xedb
    24f8:	01a50301 			; <UNDEFINED> instruction: 0x01a50301
    24fc:	03020420 	movweq	r0, #9248	; 0x2420
    2500:	042e7edb 	strteq	r7, [lr], #-3803	; 0xedb
    2504:	01a50301 			; <UNDEFINED> instruction: 0x01a50301
    2508:	ad68239e 	stclge	3, cr2, [r8, #-632]!	; 0xfffffd88
    250c:	03667a03 	cmneq	r6, #12288	; 0x3000
    2510:	da033c0a 	ble	d1540 <__Stack_Size+0xd0d40>
    2514:	2c313c7e 	ldccs	12, cr3, [r1], #-504	; 0xfffffe08
    2518:	01000302 	tsteq	r0, r2, lsl #6
    251c:	00015201 	andeq	r5, r1, r1, lsl #4
    2520:	fb000200 	blx	2d2a <__Stack_Size+0x252a>
    2524:	02000000 	andeq	r0, r0, #0
    2528:	0d0efb01 	vstreq	d15, [lr, #-4]
    252c:	01010100 	mrseq	r0, (UNDEF: 17)
    2530:	00000001 	andeq	r0, r0, r1
    2534:	01000001 	tsteq	r0, r1
    2538:	31353532 	teqcc	r5, r2, lsr r5
    253c:	3a630039 	bcc	18c2628 <__Stack_Size+0x18c1e28>
    2540:	6f72705c 	svcvs	0x0072705c
    2544:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    2548:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    254c:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    2550:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    2554:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    2558:	6f6f7420 	svcvs	0x006f7420
    255c:	6120736c 	teqvs	r0, ip, ror #6
    2560:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    2564:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    2568:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    256c:	20382e34 	eorscs	r2, r8, r4, lsr lr
    2570:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    2574:	615c3371 	cmpvs	ip, r1, ror r3
    2578:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    257c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    2580:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    2584:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    2588:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    258c:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    2590:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    2594:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    2598:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
    259c:	206d6172 	rsbcs	r6, sp, r2, ror r1
    25a0:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
    25a4:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
    25a8:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
    25ac:	20756e67 	rsbscs	r6, r5, r7, ror #28
    25b0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 23e8 <__Stack_Size+0x1be8>
    25b4:	72612073 	rsbvc	r2, r1, #115	; 0x73
    25b8:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
    25bc:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    25c0:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
    25c4:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
    25c8:	71343130 	teqvc	r4, r0, lsr r1
    25cc:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    25d0:	6f6e2d6d 	svcvs	0x006e2d6d
    25d4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    25d8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    25dc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    25e0:	00656475 	rsbeq	r6, r5, r5, ror r4
    25e4:	726f6d00 	rsbvc	r6, pc, #0, 26
    25e8:	35326870 	ldrcc	r6, [r2, #-2160]!	; 0x870
    25ec:	2e393135 	mrccs	1, 1, r3, cr9, cr5, {1}
    25f0:	00010063 	andeq	r0, r1, r3, rrx
    25f4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    25f8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    25fc:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2600:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    2604:	00020068 	andeq	r0, r2, r8, rrx
    2608:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    260c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    2610:	00030068 	andeq	r0, r3, r8, rrx
    2614:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    2618:	2e393135 	mrccs	1, 1, r3, cr9, cr5, {1}
    261c:	00010068 	andeq	r0, r1, r8, rrx
    2620:	05000000 	streq	r0, [r0, #-0]
    2624:	00000002 	andeq	r0, r0, r2
    2628:	010a0300 	mrseq	r0, (UNDEF: 58)
    262c:	24201c24 	strtcs	r1, [r0], #-3108	; 0xc24
    2630:	4b4b241c 	blmi	12cb6a8 <__Stack_Size+0x12caea8>
    2634:	023d5959 	eorseq	r5, sp, #1458176	; 0x164000
    2638:	01010005 	tsteq	r1, r5
    263c:	00020500 	andeq	r0, r2, r0, lsl #10
    2640:	03000000 	movweq	r0, #0
    2644:	030100cc 	movweq	r0, #4300	; 0x10cc
    2648:	32032e4e 	andcc	r2, r3, #1248	; 0x4e0
    264c:	4e032020 	cdpmi	0, 0, cr2, cr3, cr0, {1}
    2650:	3c32033c 	ldccc	3, cr0, [r2], #-240	; 0xffffff10
    2654:	2f204e03 	svccs	0x00204e03
    2658:	1103594b 	tstne	r3, fp, asr #18
    265c:	59595b58 	ldmdbpl	r9, {r3, r4, r6, r8, r9, fp, ip, lr}^
    2660:	4b5b5b4d 	blmi	16d939c <__Stack_Size+0x16d8b9c>
    2664:	3d59af4d 	ldclcc	15, cr10, [r9, #-308]	; 0xfffffecc
    2668:	580b033e 	stmdapl	fp, {r1, r2, r3, r4, r5, r8, r9}
    266c:	09023f3d 	stmdbeq	r2, {r0, r2, r3, r4, r5, r8, r9, sl, fp, ip, sp}
    2670:	05010100 	streq	r0, [r1, #-256]	; 0x100
    2674:	02000008 	andeq	r0, r0, #8
    2678:	00003100 	andeq	r3, r0, r0, lsl #2
    267c:	fb010200 	blx	42e86 <__Stack_Size+0x42686>
    2680:	01000d0e 	tsteq	r0, lr, lsl #26
    2684:	00010101 	andeq	r0, r1, r1, lsl #2
    2688:	00010000 	andeq	r0, r1, r0
    268c:	35320100 	ldrcc	r0, [r2, #-256]!	; 0x100
    2690:	00393135 	eorseq	r3, r9, r5, lsr r1
    2694:	61687300 	cmnvs	r8, r0, lsl #6
    2698:	2e363532 	mrccs	5, 1, r3, cr6, cr2, {1}
    269c:	00010063 	andeq	r0, r1, r3, rrx
    26a0:	61687300 	cmnvs	r8, r0, lsl #6
    26a4:	2e363532 	mrccs	5, 1, r3, cr6, cr2, {1}
    26a8:	00010068 	andeq	r0, r1, r8, rrx
    26ac:	05000000 	streq	r0, [r0, #-0]
    26b0:	00316402 	eorseq	r6, r1, r2, lsl #8
    26b4:	012f0308 	teqeq	pc, r8, lsl #6
    26b8:	21302d33 	teqcs	r0, r3, lsr sp
    26bc:	21212121 	teqcs	r1, r1, lsr #2
    26c0:	23207603 	teqcs	r0, #3145728	; 0x300000
    26c4:	21212130 	teqcs	r1, r0, lsr r1
    26c8:	0321331c 	teqeq	r1, #28, 6	; 0x70000000
    26cc:	03212076 	teqeq	r1, #118	; 0x76
    26d0:	1302200a 	movwne	r2, #8202	; 0x200a
    26d4:	00010100 	andeq	r0, r1, r0, lsl #2
    26d8:	31bc0205 			; <UNDEFINED> instruction: 0x31bc0205
    26dc:	3e030800 	cdpcc	8, 0, cr0, cr3, cr0, {0}
    26e0:	34033c01 	strcc	r3, [r3], #-3073	; 0xc01
    26e4:	22211e20 	eorcs	r1, r1, #32, 28	; 0x200
    26e8:	24207903 	strtcs	r7, [r0], #-2307	; 0x903
    26ec:	03241f22 	teqeq	r4, #34, 30	; 0x88
    26f0:	03262e78 	teqeq	r6, #120, 28	; 0x780
    26f4:	1f262079 	svcne	0x00262079
    26f8:	22271f1c 	eorcs	r1, r7, #28, 30	; 0x70
    26fc:	213c7803 	teqcs	ip, r3, lsl #16
    2700:	74790327 	ldrbtvc	r0, [r9], #-807	; 0x327
    2704:	03205403 	teqeq	r0, #50331648	; 0x3000000
    2708:	4d032033 	stcmi	0, cr2, [r3, #-204]	; 0xffffff34
    270c:	2e2c0366 	cdpcs	3, 2, cr0, cr12, cr6, {3}
    2710:	03205403 	teqeq	r0, #50331648	; 0x3000000
    2714:	4d032e33 	stcmi	14, cr2, [r3, #-204]	; 0xffffff34
    2718:	74330366 	ldrtvc	r0, [r3], #-870	; 0x366
    271c:	034a4d03 	movteq	r4, #44291	; 0xad03
    2720:	4e032e33 	mcrmi	14, 0, r2, cr3, cr3, {1}
    2724:	2e32034a 	cdpcs	3, 3, cr0, cr2, cr10, {2}
    2728:	1f2e4e03 	svcne	0x002e4e03
    272c:	262e2d03 	strtcs	r2, [lr], -r3, lsl #26
    2730:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
    2734:	03204e03 	teqeq	r0, #3, 28	; 0x30
    2738:	4e033c32 	mcrmi	12, 0, r3, cr3, cr2, {1}
    273c:	3c2c032e 	stccc	3, cr0, [ip], #-184	; 0xffffff48
    2740:	204e0326 	subcs	r0, lr, r6, lsr #6
    2744:	1f2e3303 	svcne	0x002e3303
    2748:	4e031f2f 	cdpmi	15, 0, cr1, cr3, cr15, {1}
    274c:	2e320320 	cdpcs	3, 3, cr0, cr2, cr0, {1}
    2750:	033c4e03 	teqeq	ip, #3, 28	; 0x30
    2754:	4e032033 	mcrmi	0, 0, r2, cr3, cr3, {1}
    2758:	32039e08 	andcc	r9, r3, #8, 28	; 0x80
    275c:	664e0320 	strbvs	r0, [lr], -r0, lsr #6
    2760:	03203203 	teqeq	r0, #805306368	; 0x30000000
    2764:	32032e4e 	andcc	r2, r3, #1248	; 0x4e0
    2768:	204e0320 	subcs	r0, lr, r0, lsr #6
    276c:	2f203203 	svccs	0x00203203
    2770:	03204d03 	teqeq	r0, #3, 26	; 0xc0
    2774:	03214a32 	teqeq	r1, #204800	; 0x32000
    2778:	33032e4d 	movwcc	r2, #15949	; 0x3e4d
    277c:	084e033c 	stmdaeq	lr, {r2, r3, r4, r5, r8, r9}^
    2780:	2032032e 	eorscs	r0, r2, lr, lsr #6
    2784:	03664e03 	cmneq	r6, #3, 28	; 0x30
    2788:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    278c:	2e320366 	cdpcs	3, 3, cr0, cr2, cr6, {3}
    2790:	034a4e03 	movteq	r4, #44547	; 0xae03
    2794:	4e033c32 	mcrmi	12, 0, r3, cr3, cr2, {1}
    2798:	20320320 	eorscs	r0, r2, r0, lsr #6
    279c:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    27a0:	4f032e32 	svcmi	0x00032e32
    27a4:	2032033c 	eorscs	r0, r2, ip, lsr r3
    27a8:	03204d03 	teqeq	r0, #3, 26	; 0xc0
    27ac:	4e032033 	mcrmi	0, 0, r2, cr3, cr3, {1}
    27b0:	20320320 	eorscs	r0, r2, r0, lsr #6
    27b4:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    27b8:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    27bc:	2e320358 	mrccs	3, 1, r0, cr2, cr8, {2}
    27c0:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    27c4:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    27c8:	2e3203ba 	mrccs	3, 1, r0, cr2, cr10, {5}
    27cc:	03904e03 	orrseq	r4, r0, #3, 28	; 0x30
    27d0:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    27d4:	4a32032e 	bmi	c83494 <__Stack_Size+0xc82c94>
    27d8:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    27dc:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    27e0:	2e32033c 	mrccs	3, 1, r0, cr2, cr12, {1}
    27e4:	03204f03 	teqeq	r0, #3, 30
    27e8:	032d2032 	teqeq	sp, #50	; 0x32
    27ec:	031f2e4f 	tsteq	pc, #1264	; 0x4f0
    27f0:	4e032e33 	mcrmi	14, 0, r2, cr3, cr3, {1}
    27f4:	20310358 	eorscs	r0, r1, r8, asr r3
    27f8:	03204f03 	teqeq	r0, #3, 30
    27fc:	212d2032 	teqcs	sp, r2, lsr r0
    2800:	03e44e03 	mvneq	r4, #3, 28	; 0x30
    2804:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    2808:	20320358 	eorscs	r0, r2, r8, asr r3
    280c:	034a4e03 	movteq	r4, #44547	; 0xae03
    2810:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    2814:	4a32034a 	bmi	c83544 <__Stack_Size+0xc82d44>
    2818:	03204e03 	teqeq	r0, #3, 28	; 0x30
    281c:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    2820:	2e33032e 	cdpcs	3, 3, cr0, cr3, cr14, {1}
    2824:	2e4e031f 	mcrcs	3, 2, r0, cr14, cr15, {0}
    2828:	2032032f 	eorscs	r0, r2, pc, lsr #6
    282c:	03204e03 	teqeq	r0, #3, 28	; 0x30
    2830:	2fab2032 	svccs	0x00ab2032
    2834:	03584e03 	cmpeq	r8, #3, 28	; 0x30
    2838:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    283c:	2e320366 	cdpcs	3, 3, cr0, cr2, cr6, {3}
    2840:	03204e03 	teqeq	r0, #3, 28	; 0x30
    2844:	4e036632 	mcrmi	6, 0, r6, cr3, cr2, {1}
    2848:	4a32034a 	bmi	c83578 <__Stack_Size+0xc82d78>
    284c:	1f3d3b75 	svcne	0x003d3b75
    2850:	4f032d21 	svcmi	0x00032d21
    2854:	2e310320 	cdpcs	3, 3, cr0, cr1, cr0, {1}
    2858:	744e032f 	strbvc	r0, [lr], #-815	; 0x32f
    285c:	212e3103 	teqcs	lr, r3, lsl #2
    2860:	03584e03 	cmpeq	r8, #3, 28	; 0x30
    2864:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    2868:	2e320366 	cdpcs	3, 3, cr0, cr2, cr6, {3}
    286c:	03204e03 	teqeq	r0, #3, 28	; 0x30
    2870:	4e035832 	mcrmi	8, 0, r5, cr3, cr2, {1}
    2874:	2e320366 	cdpcs	3, 3, cr0, cr2, cr6, {3}
    2878:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    287c:	67200832 			; <UNDEFINED> instruction: 0x67200832
    2880:	211f213b 	tstcs	pc, fp, lsr r1	; <UNPREDICTABLE>
    2884:	3c4f032d 	mcrrcc	3, 2, r0, pc, cr13
    2888:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    288c:	3203824e 	andcc	r8, r3, #-536870908	; 0xe0000004
    2890:	664e032e 	strbvs	r0, [lr], -lr, lsr #6
    2894:	033c3203 	teqeq	ip, #805306368	; 0x30000000
    2898:	3203ba4e 	andcc	fp, r3, #319488	; 0x4e000
    289c:	4a4e033c 	bmi	1383594 <__Stack_Size+0x1382d94>
    28a0:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    28a4:	32032e4e 	andcc	r2, r3, #1248	; 0x4e0
    28a8:	2e4e0320 	cdpcs	3, 4, cr0, cr14, cr0, {1}
    28ac:	4b2e3203 	blmi	b8f0c0 <__Stack_Size+0xb8e8c0>
    28b0:	033c4e03 	teqeq	ip, #3, 28	; 0x30
    28b4:	4d032e32 	stcmi	14, cr2, [r3, #-200]	; 0xffffff38
    28b8:	032d2f20 	teqeq	sp, #32, 30	; 0x80
    28bc:	4e032e33 	mcrmi	14, 0, r2, cr3, cr3, {1}
    28c0:	32032008 	andcc	r2, r3, #8
    28c4:	904e033c 	subls	r0, lr, ip, lsr r3
    28c8:	033c3203 	teqeq	ip, #805306368	; 0x30000000
    28cc:	32034a4e 	andcc	r4, r3, #319488	; 0x4e000
    28d0:	2e4e032e 	cdpcs	3, 4, cr0, cr14, cr14, {1}
    28d4:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    28d8:	3203204e 	andcc	r2, r3, #78	; 0x4e
    28dc:	031f2120 	tsteq	pc, #32, 2
    28e0:	32032e4e 	andcc	r2, r3, #1248	; 0x4e0
    28e4:	211f3d2e 	tstcs	pc, lr, lsr #26
    28e8:	2d3c4e03 	ldccs	14, cr4, [ip, #-12]!
    28ec:	03203303 	teqeq	r0, #201326592	; 0xc000000
    28f0:	3203584e 	andcc	r5, r3, #5111808	; 0x4e0000
    28f4:	584e032e 	stmdapl	lr, {r1, r2, r3, r5, r8, r9}^
    28f8:	03203203 	teqeq	r0, #805306368	; 0x30000000
    28fc:	3203824e 	andcc	r8, r3, #-536870908	; 0xe0000004
    2900:	744e032e 	strbvc	r0, [lr], #-814	; 0x32e
    2904:	033c3203 	teqeq	ip, #805306368	; 0x30000000
    2908:	3203584e 	andcc	r5, r3, #5111808	; 0x4e0000
    290c:	204e032e 	subcs	r0, lr, lr, lsr #6
    2910:	213c3203 	teqcs	ip, r3, lsl #4
    2914:	031f211f 	tsteq	pc, #-1073741817	; 0xc0000007
    2918:	3303204e 	movwcc	r2, #12366	; 0x304e
    291c:	1f2f3b2e 	svcne	0x002f3b2e
    2920:	584e0321 	stmdapl	lr, {r0, r5, r8, r9}^
    2924:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    2928:	3203664e 	andcc	r6, r3, #81788928	; 0x4e00000
    292c:	4a4d034a 	bmi	134365c <__Stack_Size+0x1342e5c>
    2930:	032e3303 	teqeq	lr, #201326592	; 0xc000000
    2934:	3203744e 	andcc	r7, r3, #1308622848	; 0x4e000000
    2938:	4a4e032e 	bmi	13835f8 <__Stack_Size+0x1382df8>
    293c:	033c3203 	teqeq	ip, #805306368	; 0x30000000
    2940:	32034a4e 	andcc	r4, r3, #319488	; 0x4e000
    2944:	2e4e032e 	cdpcs	3, 4, cr0, cr14, cr14, {1}
    2948:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    294c:	33032e4e 	movwcc	r2, #15950	; 0x3e4e
    2950:	4e031f20 	cdpmi	15, 0, cr1, cr3, cr0, {1}
    2954:	2e33033c 	mrccs	3, 1, r0, cr3, cr12, {1}
    2958:	03584d03 	cmpeq	r8, #3, 26	; 0xc0
    295c:	4e032e33 	mcrmi	14, 0, r2, cr3, cr3, {1}
    2960:	2e320366 	cdpcs	3, 3, cr0, cr2, cr6, {3}
    2964:	03584e03 	cmpeq	r8, #3, 28	; 0x30
    2968:	4e033c32 	mcrmi	12, 0, r3, cr3, cr2, {1}
    296c:	4a32039e 	bmi	c837ec <__Stack_Size+0xc82fec>
    2970:	034a4e03 	movteq	r4, #44547	; 0xae03
    2974:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    2978:	4a32034a 	bmi	c836a8 <__Stack_Size+0xc82ea8>
    297c:	03204e03 	teqeq	r0, #3, 28	; 0x30
    2980:	1f212032 	svcne	0x00212032
    2984:	03204e03 	teqeq	r0, #3, 28	; 0x30
    2988:	1f2f2e32 	svcne	0x002f2e32
    298c:	584e0321 	stmdapl	lr, {r0, r5, r8, r9}^
    2990:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    2994:	33033c4d 	movwcc	r3, #15437	; 0x3c4d
    2998:	4a4e032e 	bmi	1383658 <__Stack_Size+0x1382e58>
    299c:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    29a0:	32034a4e 	andcc	r4, r3, #319488	; 0x4e000
    29a4:	2e4e0320 	cdpcs	3, 4, cr0, cr14, cr0, {1}
    29a8:	034a3203 	movteq	r3, #41475	; 0xa203
    29ac:	3203584e 	andcc	r5, r3, #5111808	; 0x4e0000
    29b0:	744e034a 	strbvc	r0, [lr], #-842	; 0x34a
    29b4:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    29b8:	32032e4e 	andcc	r2, r3, #1248	; 0x4e0
    29bc:	4e033d20 	cdpmi	13, 0, cr3, cr3, cr0, {1}
    29c0:	2e320374 	mrccs	3, 1, r0, cr2, cr4, {3}
    29c4:	03584e03 	cmpeq	r8, #3, 28	; 0x30
    29c8:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    29cc:	2032032e 	eorscs	r0, r2, lr, lsr #6
    29d0:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    29d4:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    29d8:	4a32033c 	bmi	c836d0 <__Stack_Size+0xc82ed0>
    29dc:	034a4e03 	movteq	r4, #44547	; 0xae03
    29e0:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    29e4:	2e320374 	mrccs	3, 1, r0, cr2, cr4, {3}
    29e8:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    29ec:	1f3d2032 	svcne	0x003d2032
    29f0:	e44e0321 	strb	r0, [lr], #-801	; 0x321
    29f4:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    29f8:	3203584e 	andcc	r5, r3, #5111808	; 0x4e0000
    29fc:	2e4e032e 	cdpcs	3, 4, cr0, cr14, cr14, {1}
    2a00:	03203203 	teqeq	r0, #805306368	; 0x30000000
    2a04:	32032e4e 	andcc	r2, r3, #1248	; 0x4e0
    2a08:	3c4e034a 	mcrrcc	3, 4, r0, lr, cr10
    2a0c:	2f3c3203 	svccs	0x003c3203
    2a10:	03204d03 	teqeq	r0, #3, 26	; 0xc0
    2a14:	67082e32 	smladxvs	r8, r2, lr, r2
    2a18:	03204d03 	teqeq	r0, #3, 26	; 0xc0
    2a1c:	213d2e32 	teqcs	sp, r2, lsr lr
    2a20:	2f1f2f3b 	svccs	0x001f2f3b
    2a24:	4b2d751f 	blmi	b5fea8 <__Stack_Size+0xb5f6a8>
    2a28:	2f1f592d 	svccs	0x001f592d
    2a2c:	2165672d 	cmncs	r5, sp, lsr #14
    2a30:	211f212d 	tstcs	pc, sp, lsr #2
    2a34:	2d592d59 	ldclcs	13, cr2, [r9, #-356]	; 0xfffffe9c
    2a38:	2d2f1f4b 	stccs	15, cr1, [pc, #-300]!	; 2914 <__Stack_Size+0x2114>
    2a3c:	2d2f2d9f 	stccs	13, cr2, [pc, #-636]!	; 27c8 <__Stack_Size+0x1fc8>
    2a40:	492f1f2f 	stmdbmi	pc!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, ip}	; <UNPREDICTABLE>
    2a44:	3b219d21 	blcc	869ed0 <__Stack_Size+0x8696d0>
    2a48:	3d2d9121 	stfccd	f1, [sp, #-132]!	; 0xffffff7c
    2a4c:	2f1f831f 	svccs	0x001f831f
    2a50:	212d831f 	teqcs	sp, pc, lsl r3
    2a54:	211f21ff 			; <UNDEFINED> instruction: 0x211f21ff
    2a58:	2d4b2d59 	stclcs	13, cr2, [fp, #-356]	; 0xfffffe9c
    2a5c:	2d2f1f2f 	stccs	15, cr1, [pc, #-188]!	; 29a8 <__Stack_Size+0x21a8>
    2a60:	2d2f2d91 	stccs	13, cr2, [pc, #-580]!	; 2824 <__Stack_Size+0x2024>
    2a64:	492f1f21 	stmdbmi	pc!, {r0, r5, r8, r9, sl, fp, ip}	; <UNPREDICTABLE>
    2a68:	81219d21 	teqhi	r1, r1, lsr #26
    2a6c:	2f1f2121 	svccs	0x001f2121
    2a70:	2f1fad1f 	svccs	0x001fad1f
    2a74:	211f831f 	tstcs	pc, pc, lsl r3	; <UNPREDICTABLE>
    2a78:	2d224908 	stccs	9, cr4, [r2, #-32]!	; 0xffffffe0
    2a7c:	213b1f3d 	teqcs	fp, sp, lsr pc
    2a80:	1f2f1f21 	svcne	0x002f1f21
    2a84:	2dbb1f2f 	ldccs	15, cr1, [fp, #188]!	; 0xbc
    2a88:	492f2d2f 	stmdbmi	pc!, {r0, r1, r2, r3, r5, r8, sl, fp, sp}	; <UNPREDICTABLE>
    2a8c:	1f218f21 	svcne	0x00218f21
    2a90:	592d7521 	pushpl	{r0, r5, r8, sl, ip, sp, lr}
    2a94:	2f1f4b2d 	svccs	0x001f4b2d
    2a98:	2f2d752d 	svccs	0x002d752d
    2a9c:	2f1f212d 	svccs	0x001f212d
    2aa0:	2fe32149 	svccs	0x00e32149
    2aa4:	2d591f2f 	ldclcs	15, cr1, [r9, #-188]	; 0xffffff44
    2aa8:	2d3d2d3d 	ldccs	13, cr2, [sp, #-244]!	; 0xffffff0c
    2aac:	3b4b2d4b 	blcc	12cdfe0 <__Stack_Size+0x12cd7e0>
    2ab0:	212f8f91 			; <UNDEFINED> instruction: 0x212f8f91
    2ab4:	2f49831f 	svccs	0x0049831f
    2ab8:	833b212d 	teqhi	fp, #1073741835	; 0x4000000b
    2abc:	671f831f 			; <UNDEFINED> instruction: 0x671f831f
    2ac0:	2f2fe308 	svccs	0x002fe308
    2ac4:	212d4b2d 	teqcs	sp, sp, lsr #22
    2ac8:	2f1f3d2d 	svccs	0x001f3d2d
    2acc:	591f4b2d 	ldmdbpl	pc, {r0, r2, r3, r5, r8, r9, fp, lr}	; <UNPREDICTABLE>
    2ad0:	2cd7832d 	ldclcs	3, cr8, [r7], {45}	; 0x2d
    2ad4:	21213b21 	teqcs	r1, r1, lsr #22
    2ad8:	2149213b 	cmpcs	r9, fp, lsr r1
    2adc:	831f912d 	tsthi	pc, #1073741835	; 0x4000000b
    2ae0:	2fb9671f 	svccs	0x00b9671f
    2ae4:	2d3d1f21 	ldccs	15, cr1, [sp, #-132]!	; 0xffffff7c
    2ae8:	2d2f3b3d 	fstmdbxcs	pc!, {d3-d32}	;@ Deprecated
    2aec:	1f911f75 	svcne	0x00911f75
    2af0:	212f5767 	teqcs	pc, r7, ror #14
    2af4:	212d832d 	teqcs	sp, sp, lsr #6
    2af8:	212d212d 	teqcs	sp, sp, lsr #2
    2afc:	752d211f 	strvc	r2, [sp, #-287]!	; 0x11f
    2b00:	671f9f1f 			; <UNDEFINED> instruction: 0x671f9f1f
    2b04:	213b2fab 	teqcs	fp, fp, lsr #31
    2b08:	2d591f2f 	ldclcs	15, cr1, [r9, #-188]	; 0xffffff44
    2b0c:	2d213b21 	fstmdbxcs	r1!, {d3-d18}	;@ Deprecated
    2b10:	1f672d2f 	svcne	0x00672d2f
    2b14:	9d671f83 	stclls	15, cr1, [r7, #-524]!	; 0xfffffdf4
    2b18:	671f213d 			; <UNDEFINED> instruction: 0x671f213d
    2b1c:	212d212d 	teqcs	sp, sp, lsr #2
    2b20:	831f913b 	tsthi	pc, #-1073741810	; 0xc000000e
    2b24:	308f672d 	addcc	r6, pc, sp, lsr #14
    2b28:	2149911f 	cmpcs	r9, pc, lsl r1
    2b2c:	833b212d 	teqhi	fp, #1073741835	; 0x4000000b
    2b30:	672d831f 			; <UNDEFINED> instruction: 0x672d831f
    2b34:	1f212f8f 	svcne	0x00212f8f
    2b38:	1f2f2d3d 	svcne	0x002f2d3d
    2b3c:	2d4b3b3d 	vstrcs	d19, [fp, #-244]	; 0xffffff0c
    2b40:	1f751f75 	svcne	0x00751f75
    2b44:	1f30b94b 	svcne	0x0030b94b
    2b48:	2f3b0859 	svccs	0x003b0859
    2b4c:	212d212d 	teqcs	sp, sp, lsr #2
    2b50:	831f833b 	tsthi	pc, #-335544320	; 0xec000000
    2b54:	1fbb672d 	svcne	0x00bb672d
    2b58:	212d211f 	teqcs	sp, pc, lsl r1
    2b5c:	2d4b2d21 	stclcs	13, cr2, [fp, #-132]	; 0xffffff7c
    2b60:	1f914921 	svcne	0x00914921
    2b64:	ab672d83 	blge	19ce178 <__Stack_Size+0x19cd978>
    2b68:	3d2d2f2f 	stccc	15, cr2, [sp, #-188]!	; 0xffffff44
    2b6c:	2f2d3d2d 	svccs	0x002d3d2d
    2b70:	831f9149 	tsthi	pc, #1073741842	; 0x40000012
    2b74:	2f57672d 	svccs	0x0057672d
    2b78:	2d751f21 	ldclcs	15, cr1, [r5, #-132]!	; 0xffffff7c
    2b7c:	3b212d4b 	blcc	84e0b0 <__Stack_Size+0x84d8b0>
    2b80:	2d9f1f91 	ldccs	15, cr1, [pc, #580]	; 2dcc <__Stack_Size+0x25cc>
    2b84:	2f2fd567 	svccs	0x002fd567
    2b88:	212d592d 	teqcs	sp, sp, lsr #18
    2b8c:	2f2d213b 	svccs	0x002d213b
    2b90:	831f672d 	tsthi	pc, #11796480	; 0xb40000
    2b94:	2cbb672d 	ldccs	7, cr6, [fp], #180	; 0xb4
    2b98:	2f212d21 	svccs	0x00212d21
    2b9c:	3d2d752d 	cfstr32cc	mvfx7, [sp, #-180]!	; 0xffffff4c
    2ba0:	832d2f1f 	teqhi	sp, #31, 30	; 0x7c
    2ba4:	30f1913b 	rscscc	r9, r1, fp, lsr r1
    2ba8:	212d752d 	teqcs	sp, sp, lsr #10
    2bac:	2f49211f 	svccs	0x0049211f
    2bb0:	831f672d 	tsthi	pc, #11796480	; 0xb40000
    2bb4:	2dbb672d 	ldccs	7, cr6, [fp, #180]!	; 0xb4
    2bb8:	212d2149 	teqcs	sp, r9, asr #2
    2bbc:	2d4b2d21 	stclcs	13, cr2, [fp, #-132]	; 0xffffff7c
    2bc0:	2d212d21 	stccs	13, cr2, [r1, #-132]!	; 0xffffff7c
    2bc4:	2d9f1f67 	ldccs	15, cr1, [pc, #412]	; 2d68 <__Stack_Size+0x2568>
    2bc8:	2f2f9d67 	svccs	0x002f9d67
    2bcc:	212d592d 	teqcs	sp, sp, lsr #18
    2bd0:	7549592d 	strbvc	r5, [r9, #-2349]	; 0x92d
    2bd4:	592d671f 	pushpl	{r0, r1, r2, r3, r4, r8, r9, sl, sp, lr}
    2bd8:	2f2d2f2d 	svccs	0x002d2f2d
    2bdc:	2d213d3b 	stccs	13, cr3, [r1, #-236]!	; 0xffffff14
    2be0:	21499108 	cmpcs	r9, r8, lsl #2
    2be4:	211f212d 	tstcs	pc, sp, lsr #2
    2be8:	9f1f752d 	svcls	0x001f752d
    2bec:	30ab672d 	adccc	r6, fp, sp, lsr #14
    2bf0:	3d2d2f2d 	stccc	15, cr2, [sp, #-180]!	; 0xffffff4c
    2bf4:	671f3d2d 	ldrvs	r3, [pc, -sp, lsr #26]
    2bf8:	752d2f2d 	strvc	r2, [sp, #-3885]!	; 0xf2d
    2bfc:	4b2d671f 	blmi	b5c880 <__Stack_Size+0xb5c080>
    2c00:	2d3d2f9d 	ldccs	15, cr2, [sp, #-628]!	; 0xfffffd8c
    2c04:	2d214959 	stccs	9, cr4, [r1, #-356]!	; 0xfffffe9c
    2c08:	1f833b21 	svcne	0x00833b21
    2c0c:	ab672d83 	blge	19ce220 <__Stack_Size+0x19cda20>
    2c10:	3d1f212f 	ldfccs	f2, [pc, #-188]	; 2b5c <__Stack_Size+0x235c>
    2c14:	212d4b2d 	teqcs	sp, sp, lsr #22
    2c18:	9f1f753b 	svcls	0x001f753b
    2c1c:	2fab672d 	svccs	0x00ab672d
    2c20:	2d3d2d2f 	ldccs	13, cr2, [sp, #-188]!	; 0xffffff44
    2c24:	2d2f2d3d 	stccs	13, cr2, [pc, #-244]!	; 2b38 <__Stack_Size+0x2338>
    2c28:	1f752d4b 	svcne	0x00752d4b
    2c2c:	654b2d83 	strbvs	r2, [fp, #-3459]	; 0xd83
    2c30:	751f212f 	ldrvc	r2, [pc, #-303]	; 2b09 <__Stack_Size+0x2309>
    2c34:	212d4b2d 	teqcs	sp, sp, lsr #22
    2c38:	9f1f913b 	svcls	0x001f913b
    2c3c:	2fab672d 	svccs	0x00ab672d
    2c40:	2d3d2d2f 	ldccs	13, cr2, [sp, #-188]!	; 0xffffff44
    2c44:	2d2f2d21 	stccs	13, cr2, [pc, #-132]!	; 2bc8 <__Stack_Size+0x23c8>
    2c48:	1f91492f 	svcne	0x0091492f
    2c4c:	ad672d83 	stclge	13, cr2, [r7, #-524]!	; 0xfffffdf4
    2c50:	2d4b2f2c 	stclcs	15, cr2, [fp, #-176]	; 0xffffff50
    2c54:	2d2f2d3d 	stccs	13, cr2, [pc, #-244]!	; 2b68 <__Stack_Size+0x2368>
    2c58:	2d212d21 	stccs	13, cr2, [r1, #-132]!	; 0xffffff7c
    2c5c:	2d9f1f67 	ldccs	15, cr1, [pc, #412]	; 2e00 <__Stack_Size+0x2600>
    2c60:	212f9d67 	teqcs	pc, r7, ror #26
    2c64:	212d212d 	teqcs	sp, sp, lsr #2
    2c68:	2f492f1f 	svccs	0x00492f1f
    2c6c:	2f1f751f 	svccs	0x001f751f
    2c70:	ad1f2f2d 	ldcge	15, cr2, [pc, #-180]	; 2bc4 <__Stack_Size+0x23c4>
    2c74:	212d2f2d 	teqcs	sp, sp, lsr #30
    2c78:	2d4b2157 	stfcse	f2, [fp, #-348]	; 0xfffffea4
    2c7c:	57082d21 	strpl	r2, [r8, -r1, lsr #26]
    2c80:	212d2121 	teqcs	sp, r1, lsr #2
    2c84:	4b2d2f1f 	blmi	b4e908 <__Stack_Size+0xb4e108>
    2c88:	f31f753b 	vqrshl.u16	d7, d27, d15
    2c8c:	2d212dad 	stccs	13, cr2, [r1, #-692]!	; 0xfffffd4c
    2c90:	2d4b2f2d 	stclcs	15, cr2, [fp, #-180]	; 0xffffff4c
    2c94:	3b3d3b2f 	blcc	f51958 <__Stack_Size+0xf51158>
    2c98:	2dad4967 	stccs	9, cr4, [sp, #412]!	; 0x19c
    2c9c:	57212d2f 	strpl	r2, [r1, -pc, lsr #26]!
    2ca0:	212d4b21 	teqcs	sp, r1, lsr #22
    2ca4:	21212d2d 	teqcs	r1, sp, lsr #26
    2ca8:	2f1f212d 	svccs	0x001f212d
    2cac:	751f2149 	ldrvc	r2, [pc, #-329]	; 2b6b <__Stack_Size+0x236b>
    2cb0:	2f2d211f 	svccs	0x002d211f
    2cb4:	2f2d9f1f 	svccs	0x002d9f1f
    2cb8:	2157212d 	cmpcs	r7, sp, lsr #2
    2cbc:	2d212d4b 	stccs	13, cr2, [r1, #-300]!	; 0xfffffed4
    2cc0:	2d59212d 	ldfcse	f2, [r9, #-180]	; 0xffffff4c
    2cc4:	3b3d3b2f 	blcc	f51988 <__Stack_Size+0xf51188>
    2cc8:	2dad4967 	stccs	9, cr4, [sp, #412]!	; 0x19c
    2ccc:	57212d2f 	strpl	r2, [r1, -pc, lsr #26]!
    2cd0:	1f224921 	svcne	0x00224921
    2cd4:	1f4b2d21 	svcne	0x004b2d21
    2cd8:	2d4b3b21 	vstrcs	d19, [fp, #-132]	; 0xffffff7c
    2cdc:	1f2f1f4b 	svcne	0x002f1f4b
    2ce0:	1f2f2d21 	svcne	0x002f2d21
    2ce4:	2d2f2dad 	stccs	13, cr2, [pc, #-692]!	; 2a38 <__Stack_Size+0x2238>
    2ce8:	2d215721 	stccs	7, cr5, [r1, #-132]!	; 0xffffff7c
    2cec:	212c212f 	teqcs	ip, pc, lsr #2
    2cf0:	2d212d2f 	stccs	13, cr2, [r1, #-188]!	; 0xffffff44
    2cf4:	2d212d3d 	stccs	13, cr2, [r1, #-244]!	; 0xffffff0c
    2cf8:	21081f4b 	tstcs	r8, fp, asr #30
    2cfc:	21493d1f 	cmpcs	r9, pc, lsl sp
    2d00:	3d3b211f 	ldfccs	f2, [fp, #-124]!	; 0xffffff84
    2d04:	3b832d75 	blcc	fe0ce2e0 <BootRAM+0xd03ea81>
    2d08:	2d917367 	ldccs	3, cr7, [r1, #412]	; 0x19c
    2d0c:	2d223b67 	fstmdbxcs	r2!, {d3-d53}	;@ Deprecated
    2d10:	2d91212d 	ldfcss	f2, [r1, #180]	; 0xb4
    2d14:	2d912d2f 	ldccs	13, cr2, [r1, #188]	; 0xbc
    2d18:	2d672d75 	stclcs	13, cr2, [r7, #-468]!	; 0xfffffe2c
    2d1c:	492f2d83 	stmdbmi	pc!, {r0, r1, r7, r8, sl, fp, sp}	; <UNPREDICTABLE>
    2d20:	57212d3d 			; <UNDEFINED> instruction: 0x57212d3d
    2d24:	212f1f21 	teqcs	pc, r1, lsr #30
    2d28:	2d2f211e 	stfcss	f2, [pc, #-120]!	; 2cb8 <__Stack_Size+0x24b8>
    2d2c:	2d212d4b 	stccs	13, cr2, [r1, #-300]!	; 0xfffffed4
    2d30:	2f2d7508 	svccs	0x002d7508
    2d34:	ad3bc93b 	ldcge	9, cr12, [fp, #-236]!	; 0xffffff14
    2d38:	2f2d2f3b 	svccs	0x002d2f3b
    2d3c:	2d1f2249 	lfmcs	f2, 4, [pc, #-292]	; 2c20 <__Stack_Size+0x2420>
    2d40:	2d3e1f2f 	ldccs	15, cr1, [lr, #-188]!	; 0xffffff44
    2d44:	2d2f2dbb 	stccs	13, cr2, [pc, #-748]!	; 2a60 <__Stack_Size+0x2260>
    2d48:	2d2f1f67 	stccs	15, cr1, [pc, #-412]!	; 2bb4 <__Stack_Size+0x23b4>
    2d4c:	2d2f1fd7 	stccs	15, cr1, [pc, #-860]!	; 29f8 <__Stack_Size+0x21f8>
    2d50:	49211f3d 	stmdbmi	r1!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, ip}
    2d54:	2f2f3b21 	svccs	0x002f3b21
    2d58:	4b2d3d2d 	blmi	b52214 <__Stack_Size+0xb51a14>
    2d5c:	1f2d221e 	svcne	0x002d221e
    2d60:	3d1fbb21 	vldrcc	d11, [pc, #-132]	; 2ce4 <__Stack_Size+0x24e4>
    2d64:	67572f2d 	ldrbvs	r2, [r7, -sp, lsr #30]
    2d68:	2f3b4b3b 	svccs	0x003b4b3b
    2d6c:	301f211f 	andscc	r2, pc, pc, lsl r1	; <UNPREDICTABLE>
    2d70:	d72d211f 			; <UNDEFINED> instruction: 0xd72d211f
    2d74:	4b2d4b1f 	blmi	b559f8 <__Stack_Size+0xb551f8>
    2d78:	2f1f2f2d 	svccs	0x001f2f2d
    2d7c:	2f1f593b 	svccs	0x001f593b
    2d80:	212d211f 	teqcs	sp, pc, lsl r1
    2d84:	1fc92f2d 	svcne	0x00c92f2d
    2d88:	1f672d9f 	svcne	0x00672d9f
    2d8c:	e32f499f 	teq	pc, #2605056	; 0x27c000
    2d90:	2d213b2f 	fstmdbxcs	r1!, {d3-d25}	;@ Deprecated
    2d94:	08090321 	stmdaeq	r9, {r0, r5, r8, r9}
    2d98:	207703c8 	rsbscs	r0, r7, r8, asr #7
    2d9c:	1c2e0903 	stcne	9, cr0, [lr], #-12
    2da0:	0323331b 	teqeq	r3, #1811939328	; 0x6c000000
    2da4:	1c362078 	ldcne	0, cr2, [r6], #-480	; 0xfffffe20
    2da8:	1f1f241c 	svcne	0x001f241c
    2dac:	251b242f 	ldrcs	r2, [fp, #-1071]	; 0x42f
    2db0:	2f311c1f 	svccs	0x00311c1f
    2db4:	322b322b 	eorcc	r3, fp, #-1342177278	; 0xb0000002
    2db8:	0f022f2f 	svceq	0x00022f2f
    2dbc:	00010100 	andeq	r0, r1, r0, lsl #2
    2dc0:	51200205 	teqpl	r0, r5, lsl #4
    2dc4:	c1030800 	tstgt	r3, r0, lsl #16
    2dc8:	1d310101 	ldfnes	f0, [r1, #-4]!
    2dcc:	23232231 	teqcs	r3, #268435459	; 0x10000003
    2dd0:	21341d1d 	teqcs	r4, sp, lsl sp
    2dd4:	200a033e 	andcs	r0, sl, lr, lsr r3
    2dd8:	3a1f214c 	bcc	7cb310 <__Stack_Size+0x7cab10>
    2ddc:	03972a24 	orrseq	r2, r7, #36, 20	; 0x24000
    2de0:	03363c67 	teqeq	r6, #26368	; 0x6700
    2de4:	2b5b2e13 	blcs	16ce638 <__Stack_Size+0x16cde38>
    2de8:	762e6f03 	strtvc	r6, [lr], -r3, lsl #30
    2dec:	0b032159 	bleq	cb358 <__Stack_Size+0xcab58>
    2df0:	0002022e 	andeq	r0, r2, lr, lsr #4
    2df4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2df8:	0051b002 	subseq	fp, r1, r2
    2dfc:	01f00308 	mvnseq	r0, r8, lsl #6
    2e00:	252f3401 	strcs	r3, [pc, #-1025]!	; 2a07 <__Stack_Size+0x2207>
    2e04:	032e7403 	teqeq	lr, #50331648	; 0x3000000
    2e08:	1d31200a 	ldcne	0, cr2, [r1, #-40]!	; 0xffffffd8
    2e0c:	58730331 	ldmdapl	r3!, {r0, r4, r5, r8, r9}^
    2e10:	20540325 	subscs	r0, r4, r5, lsr #6
    2e14:	03202c03 	teqeq	r0, #768	; 0x300
    2e18:	2d032e57 	stccs	14, cr2, [r3, #-348]	; 0xfffffea4
    2e1c:	53036720 	movwpl	r6, #14112	; 0x3720
    2e20:	2e23034a 	cdpcs	3, 2, cr0, cr3, cr10, {2}
    2e24:	83200903 	teqhi	r0, #49152	; 0xc000
    2e28:	24664f03 	strbtcs	r4, [r6], #-3843	; 0xf03
    2e2c:	3c780330 	ldclcc	3, cr0, [r8], #-192	; 0xffffff40
    2e30:	58110336 	ldmdapl	r1, {r1, r2, r4, r5, r8, r9}
    2e34:	66640322 	strbtvs	r0, [r4], -r2, lsr #6
    2e38:	1d1d3123 	ldfnes	f3, [sp, #-140]	; 0xffffff74
    2e3c:	033e2134 	teqeq	lr, #52, 2
    2e40:	51363c78 	teqpl	r6, r8, ror ip
    2e44:	032e0c03 	teqeq	lr, #768	; 0x300
    2e48:	91917420 	orrsls	r7, r1, r0, lsr #8
    2e4c:	91919191 			; <UNDEFINED> instruction: 0x91919191
    2e50:	47039f9f 			; <UNDEFINED> instruction: 0x47039f9f
    2e54:	2f3d923c 	svccs	0x003d923c
    2e58:	215a341e 	cmpcs	sl, lr, lsl r4
    2e5c:	2a243a1f 	bcs	9116e0 <__Stack_Size+0x910ee0>
    2e60:	3eac7603 	cdpcc	6, 10, cr7, cr12, cr3, {0}
    2e64:	3e1e2f77 	mrccc	15, 0, r2, cr14, cr7, {3}
    2e68:	262a341e 			; <UNDEFINED> instruction: 0x262a341e
    2e6c:	243a1f21 	ldrtcs	r1, [sl], #-3873	; 0xf21
    2e70:	433f552a 	teqmi	pc, #176160768	; 0xa800000
    2e74:	023c7603 	eorseq	r7, ip, #3145728	; 0x300000
    2e78:	01010006 	tsteq	r1, r6
    2e7c:	00000530 	andeq	r0, r0, r0, lsr r5
    2e80:	01600002 	cmneq	r0, r2
    2e84:	01020000 	mrseq	r0, (UNDEF: 2)
    2e88:	000d0efb 	strdeq	r0, [sp], -fp
    2e8c:	01010101 	tsteq	r1, r1, lsl #2
    2e90:	01000000 	mrseq	r0, (UNDEF: 0)
    2e94:	32010000 	andcc	r0, r1, #0
    2e98:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    2e9c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    2ea0:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
    2ea4:	206d6172 	rsbcs	r6, sp, r2, ror r1
    2ea8:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
    2eac:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
    2eb0:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
    2eb4:	20756e67 	rsbscs	r6, r5, r7, ror #28
    2eb8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 2cf0 <__Stack_Size+0x24f0>
    2ebc:	72612073 	rsbvc	r2, r1, #115	; 0x73
    2ec0:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
    2ec4:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    2ec8:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
    2ecc:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
    2ed0:	71343130 	teqvc	r4, r0, lsr r1
    2ed4:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    2ed8:	6f6e2d6d 	svcvs	0x006e2d6d
    2edc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    2ee0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    2ee4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2ee8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    2eec:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    2ef0:	00656e69 	rsbeq	r6, r5, r9, ror #28
    2ef4:	705c3a63 	subsvc	r3, ip, r3, ror #20
    2ef8:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    2efc:	66206d61 	strtvs	r6, [r0], -r1, ror #26
    2f00:	73656c69 	cmnvc	r5, #26880	; 0x6900
    2f04:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
    2f08:	675c2936 	smmlarvs	ip, r6, r9, r2
    2f0c:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
    2f10:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    2f14:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
    2f18:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
    2f1c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    2f20:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
    2f24:	30322038 	eorscc	r2, r2, r8, lsr r0
    2f28:	33713431 	cmncc	r1, #822083584	; 0x31000000
    2f2c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    2f30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    2f34:	61652d65 	cmnvs	r5, r5, ror #26
    2f38:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    2f3c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2f40:	63006564 	movwvs	r6, #1380	; 0x564
    2f44:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    2f48:	6172676f 	cmnvs	r2, pc, ror #14
    2f4c:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    2f50:	2073656c 	rsbscs	r6, r3, ip, ror #10
    2f54:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    2f58:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    2f5c:	6f742075 	svcvs	0x00742075
    2f60:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    2f64:	206d7261 	rsbcs	r7, sp, r1, ror #4
    2f68:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    2f6c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    2f70:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    2f74:	31303220 	teqcc	r0, r0, lsr #4
    2f78:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    2f7c:	5c62696c 	stclpl	9, cr6, [r2], #-432	; 0xfffffe50
    2f80:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
    2f84:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    2f88:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    2f8c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    2f90:	2e345c69 	cdpcs	12, 3, cr5, cr4, cr9, {3}
    2f94:	5c342e38 	ldcpl	14, cr2, [r4], #-224	; 0xffffff20
    2f98:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2f9c:	00656475 	rsbeq	r6, r5, r5, ror r4
    2fa0:	61687300 	cmnvs	r8, r0, lsl #6
    2fa4:	2e323135 	mrccs	1, 1, r3, cr2, cr5, {1}
    2fa8:	00010063 	andeq	r0, r1, r3, rrx
    2fac:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    2fb0:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    2fb4:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2fb8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    2fbc:	00020068 	andeq	r0, r2, r8, rrx
    2fc0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    2fc4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    2fc8:	00030068 	andeq	r0, r3, r8, rrx
    2fcc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    2fd0:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    2fd4:	00040068 	andeq	r0, r4, r8, rrx
    2fd8:	61687300 	cmnvs	r8, r0, lsl #6
    2fdc:	2e323135 	mrccs	1, 1, r3, cr2, cr5, {1}
    2fe0:	00010068 	andeq	r0, r1, r8, rrx
    2fe4:	05000000 	streq	r0, [r0, #-0]
    2fe8:	0053c802 	subseq	ip, r3, r2, lsl #16
    2fec:	00e40308 	rsceq	r0, r4, r8, lsl #6
    2ff0:	5a033c01 	bpl	d1ffc <__Stack_Size+0xd17fc>
    2ff4:	839f2158 	orrshi	r2, pc, #88, 2
    2ff8:	bb1308f3 	bllt	4c53cc <__Stack_Size+0x4c4bcc>
    2ffc:	662603bb 			; <UNDEFINED> instruction: 0x662603bb
    3000:	03205a03 	teqeq	r0, #12288	; 0x3000
    3004:	2d212e24 	stccs	14, cr2, [r1, #-144]!	; 0xffffff70
    3008:	2d1f2127 	ldfcss	f2, [pc, #-156]	; 2f74 <__Stack_Size+0x2774>
    300c:	2f2c2f21 	svccs	0x002c2f21
    3010:	46321c33 			; <UNDEFINED> instruction: 0x46321c33
    3014:	7a03232f 	bvc	cbcd8 <__Stack_Size+0xcb4d8>
    3018:	2b2b2620 	blcs	acc8a0 <__Stack_Size+0xacc0a0>
    301c:	1c222f32 	stcne	15, cr2, [r2], #-200	; 0xffffff38
    3020:	3246312f 	subcc	r3, r6, #-1073741813	; 0xc000000b
    3024:	03207903 	teqeq	r0, #49152	; 0xc000
    3028:	2f2a2009 	svccs	0x002a2009
    302c:	21494c1f 	cmpcs	r9, pc, lsl ip
    3030:	2f3b4d2b 	svccs	0x003b4d2b
    3034:	08581903 	ldmdaeq	r8, {r0, r1, r8, fp, ip}^
    3038:	0402006a 	streq	r0, [r2], #-106	; 0x6a
    303c:	2e670302 	cdpcs	3, 6, cr0, cr7, cr2, {0}
    3040:	02040200 	andeq	r0, r4, #0, 4
    3044:	003c6603 	eorseq	r6, ip, r3, lsl #12
    3048:	03020402 	movweq	r0, #9218	; 0x2402
    304c:	0200ba1b 	andeq	fp, r0, #110592	; 0x1b000
    3050:	65030204 	strvs	r0, [r3, #-516]	; 0x204
    3054:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    3058:	2e1b0302 	cdpcs	3, 1, cr0, cr11, cr2, {0}
    305c:	02040200 	andeq	r0, r4, #0, 4
    3060:	002e6503 	eoreq	r6, lr, r3, lsl #10
    3064:	03020402 	movweq	r0, #9218	; 0x2402
    3068:	02003c1b 	andeq	r3, r0, #6912	; 0x1b00
    306c:	65030204 	strvs	r0, [r3, #-516]	; 0x204
    3070:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    3074:	2e1b0302 	cdpcs	3, 1, cr0, cr11, cr2, {0}
    3078:	02040200 	andeq	r0, r4, #0, 4
    307c:	002e6503 	eoreq	r6, lr, r3, lsl #10
    3080:	03020402 	movweq	r0, #9218	; 0x2402
    3084:	0200201f 	andeq	r2, r0, #31
    3088:	001c0204 	andseq	r0, ip, r4, lsl #4
    308c:	03020402 	movweq	r0, #9218	; 0x2402
    3090:	02002065 	andeq	r2, r0, #101	; 0x65
    3094:	1f030204 	svcne	0x00030204
    3098:	0402003c 	streq	r0, [r2], #-60	; 0x3c
    309c:	2e610302 	cdpcs	3, 6, cr0, cr1, cr2, {0}
    30a0:	02040200 	andeq	r0, r4, #0, 4
    30a4:	00661f03 	rsbeq	r1, r6, r3, lsl #30
    30a8:	03020402 	movweq	r0, #9218	; 0x2402
    30ac:	02002061 	andeq	r2, r0, #97	; 0x61
    30b0:	1c030204 	sfmne	f0, 4, [r3], {4}
    30b4:	0402003c 	streq	r0, [r2], #-60	; 0x3c
    30b8:	3c640302 	stclcc	3, cr0, [r4], #-8
    30bc:	02040200 	andeq	r0, r4, #0, 4
    30c0:	00581c03 	subseq	r1, r8, r3, lsl #24
    30c4:	03020402 	movweq	r0, #9218	; 0x2402
    30c8:	02002e64 	andeq	r2, r0, #100, 28	; 0x640
    30cc:	1f030204 	svcne	0x00030204
    30d0:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    30d4:	20610302 	rsbcs	r0, r1, r2, lsl #6
    30d8:	02040200 	andeq	r0, r4, #0, 4
    30dc:	00581c03 	subseq	r1, r8, r3, lsl #24
    30e0:	33020402 	movwcc	r0, #9218	; 0x2402
    30e4:	02040200 	andeq	r0, r4, #0, 4
    30e8:	0402002c 	streq	r0, [r2], #-44	; 0x2c
    30ec:	20610302 	rsbcs	r0, r1, r2, lsl #6
    30f0:	02040200 	andeq	r0, r4, #0, 4
    30f4:	004a1f03 	subeq	r1, sl, r3, lsl #30
    30f8:	5a020402 	bpl	84108 <__Stack_Size+0x83908>
    30fc:	02040200 	andeq	r0, r4, #0, 4
    3100:	0402001e 	streq	r0, [r2], #-30
    3104:	02002202 	andeq	r2, r0, #536870912	; 0x20000000
    3108:	5f030204 	svcpl	0x00030204
    310c:	0402003c 	streq	r0, [r2], #-60	; 0x3c
    3110:	d61e0302 	ldrle	r0, [lr], -r2, lsl #6
    3114:	02040200 	andeq	r0, r4, #0, 4
    3118:	0402006d 	streq	r0, [r2], #-109	; 0x6d
    311c:	02002a02 	andeq	r2, r0, #8192	; 0x2000
    3120:	00320204 	eorseq	r0, r2, r4, lsl #4
    3124:	03020402 	movweq	r0, #9218	; 0x2402
    3128:	0200ba11 	andeq	fp, r0, #69632	; 0x11000
    312c:	67030204 	strvs	r0, [r3, -r4, lsl #4]
    3130:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    3134:	58190302 	ldmdapl	r9, {r1, r8, r9}
    3138:	02040200 	andeq	r0, r4, #0, 4
    313c:	00ac4a03 	adceq	r4, ip, r3, lsl #20
    3140:	03020402 	movweq	r0, #9218	; 0x2402
    3144:	02008236 	andeq	r8, r0, #1610612739	; 0x60000003
    3148:	4a030204 	bmi	c3960 <__Stack_Size+0xc3160>
    314c:	04020020 	streq	r0, [r2], #-32
    3150:	2e360302 	cdpcs	3, 3, cr0, cr6, cr2, {0}
    3154:	02040200 	andeq	r0, r4, #0, 4
    3158:	002e4a03 	eoreq	r4, lr, r3, lsl #20
    315c:	03020402 	movweq	r0, #9218	; 0x2402
    3160:	02002e21 	andeq	r2, r0, #528	; 0x210
    3164:	00650204 	rsbeq	r0, r5, r4, lsl #4
    3168:	03020402 	movweq	r0, #9218	; 0x2402
    316c:	02003c16 	andeq	r3, r0, #5632	; 0x1600
    3170:	6a030204 	bvs	c3988 <__Stack_Size+0xc3188>
    3174:	04020020 	streq	r0, [r2], #-32
    3178:	2e160302 	cdpcs	3, 1, cr0, cr6, cr2, {0}
    317c:	02040200 	andeq	r0, r4, #0, 4
    3180:	004a7003 	subeq	r7, sl, r3
    3184:	03020402 	movweq	r0, #9218	; 0x2402
    3188:	0200d65a 	andeq	sp, r0, #94371840	; 0x5a00000
    318c:	27030204 	strcs	r0, [r3, -r4, lsl #4]
    3190:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    3194:	2e590302 	cdpcs	3, 5, cr0, cr9, cr2, {0}
    3198:	02040200 	andeq	r0, r4, #0, 4
    319c:	002e2703 	eoreq	r2, lr, r3, lsl #14
    31a0:	03020402 	movweq	r0, #9218	; 0x2402
    31a4:	02003c59 	andeq	r3, r0, #22784	; 0x5900
    31a8:	27030204 	strcs	r0, [r3, -r4, lsl #4]
    31ac:	04020020 	streq	r0, [r2], #-32
    31b0:	2e590302 	cdpcs	3, 5, cr0, cr9, cr2, {0}
    31b4:	02040200 	andeq	r0, r4, #0, 4
    31b8:	002e2703 	eoreq	r2, lr, r3, lsl #14
    31bc:	03020402 	movweq	r0, #9218	; 0x2402
    31c0:	02003c59 	andeq	r3, r0, #22784	; 0x5900
    31c4:	28030204 	stmdacs	r3, {r2, r9}
    31c8:	0402004a 	streq	r0, [r2], #-74	; 0x4a
    31cc:	2e580302 	cdpcs	3, 5, cr0, cr8, cr2, {0}
    31d0:	02040200 	andeq	r0, r4, #0, 4
    31d4:	003c2703 	eorseq	r2, ip, r3, lsl #14
    31d8:	2f020402 	svccs	0x00020402
    31dc:	02040200 	andeq	r0, r4, #0, 4
    31e0:	002e5803 	eoreq	r5, lr, r3, lsl #16
    31e4:	03020402 	movweq	r0, #9218	; 0x2402
    31e8:	02002e28 	andeq	r2, r0, #40, 28	; 0x280
    31ec:	58030204 	stmdapl	r3, {r2, r9}
    31f0:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    31f4:	3c280302 	stccc	3, cr0, [r8], #-8
    31f8:	02040200 	andeq	r0, r4, #0, 4
    31fc:	00205803 	eoreq	r5, r0, r3, lsl #16
    3200:	03020402 	movweq	r0, #9218	; 0x2402
    3204:	02003c24 	andeq	r3, r0, #36, 24	; 0x2400
    3208:	12030204 	andne	r0, r3, #4, 4	; 0x40000000
    320c:	040200ba 	streq	r0, [r2], #-186	; 0xba
    3210:	2e710302 	cdpcs	3, 7, cr0, cr1, cr2, {0}
    3214:	02040200 	andeq	r0, r4, #0, 4
    3218:	002e0f03 	eoreq	r0, lr, r3, lsl #30
    321c:	03020402 	movweq	r0, #9218	; 0x2402
    3220:	02002e71 	andeq	r2, r0, #1808	; 0x710
    3224:	004b0204 	subeq	r0, fp, r4, lsl #4
    3228:	2d020402 	cfstrscs	mvf0, [r2, #-8]
    322c:	02040200 	andeq	r0, r4, #0, 4
    3230:	0402003d 	streq	r0, [r2], #-61	; 0x3d
    3234:	02009d02 	andeq	r9, r0, #2, 26	; 0x80
    3238:	005a0204 	subseq	r0, sl, r4, lsl #4
    323c:	5e020402 	cdppl	4, 0, cr0, cr2, cr2, {0}
    3240:	02040200 	andeq	r0, r4, #0, 4
    3244:	0402005c 	streq	r0, [r2], #-92	; 0x5c
    3248:	3c650302 	stclcc	3, cr0, [r5], #-8
    324c:	59f22203 	ldmibpl	r2!, {r0, r1, r9, sp}^
    3250:	2f318067 	svccs	0x00318067
    3254:	3e59302b 	cdpcc	0, 5, cr3, cr9, cr11, {1}
    3258:	312b671f 	teqcc	fp, pc, lsl r7
    325c:	7a032d2f 	bvc	ce720 <__Stack_Size+0xcdf20>
    3260:	7d2f3420 	cfstrsvc	mvf3, [pc, #-128]!	; 31e8 <__Stack_Size+0x29e8>
    3264:	2f2b312c 	svccs	0x002b312c
    3268:	2f312c30 	svccs	0x00312c30
    326c:	022f2f2f 	eoreq	r2, pc, #47, 30	; 0xbc
    3270:	01010006 	tsteq	r1, r6
    3274:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    3278:	03080058 	movweq	r0, #32856	; 0x8058
    327c:	2f0101a6 	svccs	0x000101a6
    3280:	5b3d201f 	blpl	f4b304 <__Stack_Size+0xf4ab04>
    3284:	9a03363e 	bls	d0b84 <__Stack_Size+0xd0384>
    3288:	1e22207f 	mcrne	0, 1, r2, cr2, cr15, {3}
    328c:	00e30324 	rsceq	r0, r3, r4, lsr #6
    3290:	7f98032e 	svcvc	0x0098032e
    3294:	3030302e 	eorscc	r3, r0, lr, lsr #32
    3298:	30303030 	eorscc	r3, r0, r0, lsr r0
    329c:	2e00da03 	vmlacs.f32	s26, s0, s6
    32a0:	3c75032f 	ldclcc	3, cr0, [r5], #-188	; 0xffffff44
    32a4:	301e3e59 	andscc	r3, lr, r9, asr lr
    32a8:	06024b21 	streq	r4, [r2], -r1, lsr #22
    32ac:	00010100 	andeq	r0, r1, r0, lsl #2
    32b0:	58e40205 	stmiapl	r4!, {r0, r2, r9}^
    32b4:	ba030800 	blt	c52bc <__Stack_Size+0xc4abc>
    32b8:	1d310101 	ldfnes	f0, [r1, #-4]!
    32bc:	5c233120 	stfpls	f3, [r3], #-128	; 0xffffff80
    32c0:	00243824 	eoreq	r3, r4, r4, lsr #16
    32c4:	03010402 	movweq	r0, #5122	; 0x1402
    32c8:	08062e0e 	stmdaeq	r6, {r1, r2, r3, r9, sl, fp, sp}
    32cc:	034b0612 	movteq	r0, #46610	; 0xb612
    32d0:	84587ef7 	ldrbhi	r7, [r8], #-3831	; 0xef7
    32d4:	20018703 	andcs	r8, r1, r3, lsl #14
    32d8:	207ef903 	rsbscs	pc, lr, r3, lsl #18
    32dc:	3022483e 	eorcc	r4, r2, lr, lsr r8
    32e0:	301e2646 	andscc	r2, lr, r6, asr #12
    32e4:	7703683e 	smladxvc	r3, lr, r8, r6
    32e8:	2e090374 	mcrcs	3, 0, r0, cr9, cr4, {3}
    32ec:	032e7703 	teqeq	lr, #786432	; 0xc0000
    32f0:	7203200a 	andvc	r2, r3, #10
    32f4:	2e0c032e 	cdpcs	3, 0, cr0, cr12, cr14, {1}
    32f8:	032e7403 	teqeq	lr, #50331648	; 0x3000000
    32fc:	1e1e200a 	cdpne	0, 1, cr2, cr14, cr10, {0}
    3300:	0187032a 	orreq	r0, r7, sl, lsr #6
    3304:	7f850320 	svcvc	0x00850320
    3308:	00fb0320 	rscseq	r0, fp, r0, lsr #6
    330c:	4235082e 	eorsmi	r0, r5, #3014656	; 0x2e0000
    3310:	033c6c03 	teqeq	ip, #768	; 0x300
    3314:	4c587eff 	mrrcmi	14, 15, r7, r8, cr15
    3318:	2c302c5a 	ldccs	12, cr2, [r0], #-360	; 0xfffffe98
    331c:	2c4c2c32 	mcrrcs	12, 3, r2, ip, cr2
    3320:	03302c32 	teqeq	r0, #12800	; 0x3200
    3324:	0b034a77 	bleq	d5d08 <__Stack_Size+0xd5508>
    3328:	0334462e 	teqeq	r4, #48234496	; 0x2e00000
    332c:	2c343c75 	ldccs	12, cr3, [r4], #-468	; 0xfffffe2c
    3330:	2e7a0335 	mrccs	3, 3, r0, cr10, cr5, {1}
    3334:	2e00f603 	cfmadd32cs	mvax0, mvfx15, mvfx0, mvfx3
    3338:	2e7f8703 	cdpcs	7, 7, cr8, cr15, cr3, {0}
    333c:	03423030 	movteq	r3, #8240	; 0x2030
    3340:	31342e76 	teqcc	r4, r6, ror lr
    3344:	00f6032d 	rscseq	r0, r6, sp, lsr #6
    3348:	8b03212e 	blhi	cb808 <__Stack_Size+0xcb008>
    334c:	ef03207f 	svc	0x0003207f
    3350:	91032000 	mrsls	r2, (UNDEF: 3)
    3354:	f403587f 	vst2.16	{d5-d6}, [r3 :256]
    3358:	1f302e00 	svcne	0x00302e00
    335c:	8a031f3d 	bhi	cb058 <__Stack_Size+0xca858>
    3360:	f6033c7f 			; <UNDEFINED> instruction: 0xf6033c7f
    3364:	2b302e00 	blcs	c0eb6c <__Stack_Size+0xc0e36c>
    3368:	11032b31 	tstne	r3, r1, lsr fp
    336c:	7eee033c 	mcrvc	3, 7, r0, cr14, cr12, {1}
    3370:	302c5a82 	eorcc	r5, ip, r2, lsl #21
    3374:	4c4c684c 	mcrrmi	8, 4, r6, ip, cr12
    3378:	2e73035a 	mrccs	3, 3, r0, cr3, cr10, {2}
    337c:	302e0b03 	eorcc	r0, lr, r3, lsl #22
    3380:	034a7303 	movteq	r7, #41731	; 0xa303
    3384:	2c322e0a 	ldccs	14, cr2, [r2], #-40	; 0xffffffd8
    3388:	032d1e30 	teqeq	sp, #48, 28	; 0x300
    338c:	0b032e77 	bleq	ced70 <__Stack_Size+0xce570>
    3390:	2e77032e 	cdpcs	3, 7, cr0, cr7, cr14, {1}
    3394:	8c033030 	stchi	0, cr3, [r3], {48}	; 0x30
    3398:	fa032e01 	blx	ceba4 <__Stack_Size+0xce3a4>
    339c:	8603207e 			; <UNDEFINED> instruction: 0x8603207e
    33a0:	f9032e01 			; <UNDEFINED> instruction: 0xf9032e01
    33a4:	8703207e 	smlsdxhi	r3, lr, r0, r2
    33a8:	02302e01 	eorseq	r2, r0, #1, 28
    33ac:	01010003 	tsteq	r1, r3
    33b0:	00000240 	andeq	r0, r0, r0, asr #4
    33b4:	01c60002 	biceq	r0, r6, r2
    33b8:	01020000 	mrseq	r0, (UNDEF: 2)
    33bc:	000d0efb 	strdeq	r0, [sp], -fp
    33c0:	01010101 	tsteq	r1, r1, lsl #2
    33c4:	01000000 	mrseq	r0, (UNDEF: 0)
    33c8:	63010000 	movwvs	r0, #4096	; 0x1000
    33cc:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    33d0:	6172676f 	cmnvs	r2, pc, ror #14
    33d4:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    33d8:	2073656c 	rsbscs	r6, r3, ip, ror #10
    33dc:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    33e0:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    33e4:	6f742075 	svcvs	0x00742075
    33e8:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    33ec:	206d7261 	rsbcs	r7, sp, r1, ror #4
    33f0:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    33f4:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    33f8:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    33fc:	31303220 	teqcc	r0, r0, lsr #4
    3400:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    3404:	5c62696c 	stclpl	9, cr6, [r2], #-432	; 0xfffffe50
    3408:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
    340c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    3410:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    3414:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    3418:	2e345c69 	cdpcs	12, 3, cr5, cr4, cr9, {3}
    341c:	5c342e38 	ldcpl	14, cr2, [r4], #-224	; 0xffffff20
    3420:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3424:	00656475 	rsbeq	r6, r5, r5, ror r4
    3428:	705c3a63 	subsvc	r3, ip, r3, ror #20
    342c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    3430:	66206d61 	strtvs	r6, [r0], -r1, ror #26
    3434:	73656c69 	cmnvc	r5, #26880	; 0x6900
    3438:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
    343c:	675c2936 	smmlarvs	ip, r6, r9, r2
    3440:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
    3444:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    3448:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
    344c:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
    3450:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    3454:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
    3458:	30322038 	eorscc	r2, r2, r8, lsr r0
    345c:	33713431 	cmncc	r1, #822083584	; 0x31000000
    3460:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    3464:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    3468:	61652d65 	cmnvs	r5, r5, ror #26
    346c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    3470:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    3474:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    3478:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    347c:	6300656e 	movwvs	r6, #1390	; 0x56e
    3480:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    3484:	6172676f 	cmnvs	r2, pc, ror #14
    3488:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    348c:	2073656c 	rsbscs	r6, r3, ip, ror #10
    3490:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    3494:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    3498:	6f742075 	svcvs	0x00742075
    349c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    34a0:	206d7261 	rsbcs	r7, sp, r1, ror #4
    34a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    34a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    34ac:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    34b0:	31303220 	teqcc	r0, r0, lsr #4
    34b4:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    34b8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    34bc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    34c0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    34c4:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    34c8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    34cc:	2f2e0065 	svccs	0x002e0065
    34d0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    34d4:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    34d8:	2f2e0062 	svccs	0x002e0062
    34dc:	31353532 	teqcc	r5, r2, lsr r5
    34e0:	69000039 	stmdbvs	r0, {r0, r3, r4, r5}
    34e4:	6567616d 	strbvs	r6, [r7, #-365]!	; 0x16d
    34e8:	0000632e 	andeq	r6, r0, lr, lsr #6
    34ec:	74730000 	ldrbtvc	r0, [r3], #-0
    34f0:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    34f4:	0100682e 	tsteq	r0, lr, lsr #16
    34f8:	645f0000 	ldrbvs	r0, [pc], #-0	; 3500 <__Stack_Size+0x2d00>
    34fc:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    3500:	745f746c 	ldrbvc	r7, [pc], #-1132	; 3508 <__Stack_Size+0x2d08>
    3504:	73657079 	cmnvc	r5, #121	; 0x79
    3508:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    350c:	74730000 	ldrbtvc	r0, [r3], #-0
    3510:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    3514:	0300682e 	movweq	r6, #2094	; 0x82e
    3518:	74730000 	ldrbtvc	r0, [r3], #-0
    351c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3520:	5f783031 	svcpl	0x00783031
    3524:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    3528:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    352c:	61680000 	cmnvs	r8, r0
    3530:	61776472 	cmnvs	r7, r2, ror r4
    3534:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
    3538:	00000000 	andeq	r0, r0, r0
    353c:	32616873 	rsbcc	r6, r1, #7536640	; 0x730000
    3540:	682e3635 	stmdavs	lr!, {r0, r2, r4, r5, r9, sl, ip, sp}
    3544:	00000500 	andeq	r0, r0, r0, lsl #10
    3548:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
    354c:	00682e65 	rsbeq	r2, r8, r5, ror #28
    3550:	73000000 	movwvc	r0, #0
    3554:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    3558:	00682e67 	rsbeq	r2, r8, r7, ror #28
    355c:	73000003 	movwvc	r0, #3
    3560:	6f696474 	svcvs	0x00696474
    3564:	0300682e 	movweq	r6, #2094	; 0x82e
    3568:	64650000 	strbtvs	r0, [r5], #-0
    356c:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    3570:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    3574:	73750000 	cmnvc	r5, #0
    3578:	00682e62 	rsbeq	r2, r8, r2, ror #28
    357c:	00000000 	andeq	r0, r0, r0
    3580:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    3584:	0308005b 	movweq	r0, #32859	; 0x805b
    3588:	333c0123 	teqcc	ip, #-1073741816	; 0xc0000008
    358c:	594b251b 	stmdbpl	fp, {r0, r1, r3, r4, r8, sl, sp}^
    3590:	032e1203 	teqeq	lr, #805306368	; 0x30000000
    3594:	11032e6f 	tstne	r3, pc, ror #28
    3598:	206f0320 	rsbcs	r0, pc, r0, lsr #6
    359c:	21581103 	cmpcs	r8, r3, lsl #2
    35a0:	02002f3d 	andeq	r2, r0, #61, 30	; 0xf4
    35a4:	063f0104 	ldrteq	r0, [pc], -r4, lsl #2
    35a8:	3b2f0658 	blcc	bc4f10 <__Stack_Size+0xbc4710>
    35ac:	031f217a 	tsteq	pc, #-2147483618	; 0x8000001e
    35b0:	032000c0 	teqeq	r0, #192	; 0xc0
    35b4:	1b253c46 	blne	9526d4 <__Stack_Size+0x951ed4>
    35b8:	79033221 	stmdbvc	r3, {r0, r5, r9, ip, sp}
    35bc:	1d21222e 	sfmne	f2, 4, [r1, #-184]!	; 0xffffff48
    35c0:	bd413127 	stflte	f3, [r1, #-156]	; 0xffffff64
    35c4:	38211f21 	stmdacc	r1!, {r0, r5, r8, r9, sl, fp, ip}
    35c8:	3e580a03 	vnmlscc.f32	s1, s16, s6
    35cc:	592f1ca2 	stmdbpl	pc!, {r1, r5, r7, sl, fp, ip}	; <UNPREDICTABLE>
    35d0:	7a03c04c 	bvc	f3708 <__Stack_Size+0xf2f08>
    35d4:	75a0342e 	strvc	r3, [r0, #1070]!	; 0x42e
    35d8:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    35dc:	65593f01 	ldrbvs	r3, [r9, #-3841]	; 0xf01
    35e0:	4c403a22 	mcrrmi	10, 2, r3, r0, cr2
    35e4:	0a031f21 	beq	cb270 <__Stack_Size+0xcaa70>
    35e8:	3c7a0320 	ldclcc	3, cr0, [sl], #-128	; 0xffffff80
    35ec:	02261f21 	eoreq	r1, r6, #33, 30	; 0x84
    35f0:	01010012 	tsteq	r1, r2, lsl r0
    35f4:	000004c7 	andeq	r0, r0, r7, asr #9
    35f8:	00450002 	subeq	r0, r5, r2
    35fc:	01020000 	mrseq	r0, (UNDEF: 2)
    3600:	000d0efb 	strdeq	r0, [sp], -fp
    3604:	01010101 	tsteq	r1, r1, lsl #2
    3608:	01000000 	mrseq	r0, (UNDEF: 0)
    360c:	75010000 	strvc	r0, [r1, #-0]
    3610:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    3614:	00006269 	andeq	r6, r0, r9, ror #4
    3618:	5f627375 	svcpl	0x00627375
    361c:	73676572 	cmnvc	r7, #478150656	; 0x1c800000
    3620:	0100632e 	tsteq	r0, lr, lsr #6
    3624:	73750000 	cmnvc	r5, #0
    3628:	79745f62 	ldmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    362c:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    3630:	00000100 	andeq	r0, r0, r0, lsl #2
    3634:	5f627375 	svcpl	0x00627375
    3638:	73676572 	cmnvc	r7, #478150656	; 0x1c800000
    363c:	0100682e 	tsteq	r0, lr, lsr #16
    3640:	00000000 	andeq	r0, r0, r0
    3644:	00000205 	andeq	r0, r0, r5, lsl #4
    3648:	22030000 	andcs	r0, r3, #0
    364c:	06021301 	streq	r1, [r2], -r1, lsl #6
    3650:	00010100 	andeq	r0, r1, r0, lsl #2
    3654:	00000205 	andeq	r0, r0, r5, lsl #4
    3658:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    365c:	022f1301 	eoreq	r1, pc, #67108864	; 0x4000000
    3660:	01010004 	tsteq	r1, r4
    3664:	00020500 	andeq	r0, r2, r0, lsl #10
    3668:	03000000 	movweq	r0, #0
    366c:	0213013a 	andseq	r0, r3, #-2147483634	; 0x8000000e
    3670:	01010006 	tsteq	r1, r6
    3674:	00020500 	andeq	r0, r2, r0, lsl #10
    3678:	03000000 	movweq	r0, #0
    367c:	130100c6 	movwne	r0, #4294	; 0x10c6
    3680:	0004022f 	andeq	r0, r4, pc, lsr #4
    3684:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3688:	00000002 	andeq	r0, r0, r2
    368c:	00d20300 	sbcseq	r0, r2, r0, lsl #6
    3690:	022f1301 	eoreq	r1, pc, #67108864	; 0x4000000
    3694:	01010004 	tsteq	r1, r4
    3698:	00020500 	andeq	r0, r2, r0, lsl #10
    369c:	03000000 	movweq	r0, #0
    36a0:	130100de 	movwne	r0, #4318	; 0x10de
    36a4:	01000602 	tsteq	r0, r2, lsl #12
    36a8:	02050001 	andeq	r0, r5, #1
    36ac:	00000000 	andeq	r0, r0, r0
    36b0:	0100ea03 	tsteq	r0, r3, lsl #20
    36b4:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
    36b8:	00010100 	andeq	r0, r1, r0, lsl #2
    36bc:	00000205 	andeq	r0, r0, r5, lsl #4
    36c0:	f6030000 			; <UNDEFINED> instruction: 0xf6030000
    36c4:	02130100 	andseq	r0, r3, #0, 2
    36c8:	01010008 	tsteq	r1, r8
    36cc:	00020500 	andeq	r0, r2, r0, lsl #10
    36d0:	03000000 	movweq	r0, #0
    36d4:	13010182 	movwne	r0, #4482	; 0x1182
    36d8:	0004022f 	andeq	r0, r4, pc, lsr #4
    36dc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    36e0:	00000002 	andeq	r0, r0, r2
    36e4:	018f0300 	orreq	r0, pc, r0, lsl #6
    36e8:	07021301 	streq	r1, [r2, -r1, lsl #6]
    36ec:	00010100 	andeq	r0, r1, r0, lsl #2
    36f0:	00000205 	andeq	r0, r0, r5, lsl #4
    36f4:	9b030000 	blls	c36fc <__Stack_Size+0xc2efc>
    36f8:	67130101 	ldrvs	r0, [r3, -r1, lsl #2]
    36fc:	01000202 	tsteq	r0, r2, lsl #4
    3700:	02050001 	andeq	r0, r5, #1
    3704:	00000000 	andeq	r0, r0, r0
    3708:	0101a803 	tsteq	r1, r3, lsl #16
    370c:	000e0213 	andeq	r0, lr, r3, lsl r2
    3710:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3714:	00000002 	andeq	r0, r0, r2
    3718:	01b40300 			; <UNDEFINED> instruction: 0x01b40300
    371c:	02671301 	rsbeq	r1, r7, #67108864	; 0x4000000
    3720:	01010003 	tsteq	r1, r3
    3724:	20020500 	andcs	r0, r2, r0, lsl #10
    3728:	0308005d 	movweq	r0, #32861	; 0x805d
    372c:	130101c1 	movwne	r0, #4545	; 0x11c1
    3730:	01001502 	tsteq	r0, r2, lsl #10
    3734:	02050001 	andeq	r0, r5, #1
    3738:	00000000 	andeq	r0, r0, r0
    373c:	0101ce03 	tsteq	r1, r3, lsl #28
    3740:	00150213 	andseq	r0, r5, r3, lsl r2
    3744:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3748:	00000002 	andeq	r0, r0, r2
    374c:	01db0300 	bicseq	r0, fp, r0, lsl #6
    3750:	01410301 	cmpeq	r1, r1, lsl #6
    3754:	5800c203 	stmdapl	r0, {r0, r1, r9, lr, pc}
    3758:	207fbe03 	rsbscs	fp, pc, r3, lsl #28
    375c:	2000c203 	andcs	ip, r0, r3, lsl #4
    3760:	02303e22 	eorseq	r3, r0, #544	; 0x220
    3764:	01010005 	tsteq	r1, r5
    3768:	00020500 	andeq	r0, r2, r0, lsl #10
    376c:	03000000 	movweq	r0, #0
    3770:	130101f0 	movwne	r0, #4592	; 0x11f0
    3774:	00030267 	andeq	r0, r3, r7, ror #4
    3778:	05000101 	streq	r0, [r0, #-257]	; 0x101
    377c:	00000002 	andeq	r0, r0, r2
    3780:	01fc0300 	mvnseq	r0, r0, lsl #6
    3784:	02671301 	rsbeq	r1, r7, #67108864	; 0x4000000
    3788:	01010003 	tsteq	r1, r3
    378c:	00020500 	andeq	r0, r2, r0, lsl #10
    3790:	03000000 	movweq	r0, #0
    3794:	13010288 	movwne	r0, #4744	; 0x1288
    3798:	01000f02 	tsteq	r0, r2, lsl #30
    379c:	02050001 	andeq	r0, r5, #1
    37a0:	08005d4a 	stmdaeq	r0, {r1, r3, r6, r8, sl, fp, ip, lr}
    37a4:	01029403 	tsteq	r2, r3, lsl #8
    37a8:	000f0213 	andeq	r0, pc, r3, lsl r2	; <UNPREDICTABLE>
    37ac:	05000101 	streq	r0, [r0, #-257]	; 0x101
    37b0:	00000002 	andeq	r0, r0, r2
    37b4:	02a00300 	adceq	r0, r0, #0, 6
    37b8:	0f021301 	svceq	0x00021301
    37bc:	00010100 	andeq	r0, r1, r0, lsl #2
    37c0:	00000205 	andeq	r0, r0, r5, lsl #4
    37c4:	ac030000 	stcge	0, cr0, [r3], {-0}
    37c8:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
    37cc:	0101000e 	tsteq	r1, lr
    37d0:	68020500 	stmdavs	r2, {r8, sl}
    37d4:	0308005d 	movweq	r0, #32861	; 0x805d
    37d8:	130102b7 	movwne	r0, #4791	; 0x12b7
    37dc:	01000e02 	tsteq	r0, r2, lsl #28
    37e0:	02050001 	andeq	r0, r5, #1
    37e4:	00000000 	andeq	r0, r0, r0
    37e8:	0102c203 	tsteq	r2, r3, lsl #4
    37ec:	000f0213 	andeq	r0, pc, r3, lsl r2	; <UNPREDICTABLE>
    37f0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    37f4:	00000002 	andeq	r0, r0, r2
    37f8:	02cd0300 	sbceq	r0, sp, #0, 6
    37fc:	0f021301 	svceq	0x00021301
    3800:	00010100 	andeq	r0, r1, r0, lsl #2
    3804:	00000205 	andeq	r0, r0, r5, lsl #4
    3808:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    380c:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
    3810:	0101000e 	tsteq	r1, lr
    3814:	00020500 	andeq	r0, r2, r0, lsl #10
    3818:	03000000 	movweq	r0, #0
    381c:	130102e3 	movwne	r0, #4835	; 0x12e3
    3820:	00050283 	andeq	r0, r5, r3, lsl #5
    3824:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3828:	00000002 	andeq	r0, r0, r2
    382c:	02ee0300 	rsceq	r0, lr, #0, 6
    3830:	02831301 	addeq	r1, r3, #67108864	; 0x4000000
    3834:	01010005 	tsteq	r1, r5
    3838:	00020500 	andeq	r0, r2, r0, lsl #10
    383c:	03000000 	movweq	r0, #0
    3840:	130102f9 	movwne	r0, #4857	; 0x12f9
    3844:	01000c02 	tsteq	r0, r2, lsl #24
    3848:	02050001 	andeq	r0, r5, #1
    384c:	00000000 	andeq	r0, r0, r0
    3850:	01038403 	tsteq	r3, r3, lsl #8
    3854:	000e0213 	andeq	r0, lr, r3, lsl r2
    3858:	05000101 	streq	r0, [r0, #-257]	; 0x101
    385c:	00000002 	andeq	r0, r0, r2
    3860:	038f0300 	orreq	r0, pc, #0, 6
    3864:	10021301 	andne	r1, r2, r1, lsl #6
    3868:	00010100 	andeq	r0, r1, r0, lsl #2
    386c:	00000205 	andeq	r0, r0, r5, lsl #4
    3870:	9a030000 	bls	c3878 <__Stack_Size+0xc3078>
    3874:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
    3878:	01010010 	tsteq	r1, r0, lsl r0
    387c:	84020500 	strhi	r0, [r2], #-1280	; 0x500
    3880:	0308005d 	movweq	r0, #32861	; 0x805d
    3884:	130103a5 	movwne	r0, #5029	; 0x13a5
    3888:	01040200 	mrseq	r0, R12_usr
    388c:	08028206 	stmdaeq	r2, {r1, r2, r9, pc}
    3890:	00010100 	andeq	r0, r1, r0, lsl #2
    3894:	5da40205 	sfmpl	f0, 4, [r4, #20]!
    3898:	b0030800 	andlt	r0, r3, r0, lsl #16
    389c:	00130103 	andseq	r0, r3, r3, lsl #2
    38a0:	06010402 	streq	r0, [r1], -r2, lsl #8
    38a4:	00080282 	andeq	r0, r8, r2, lsl #5
    38a8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    38ac:	00000002 	andeq	r0, r0, r2
    38b0:	03bc0300 			; <UNDEFINED> instruction: 0x03bc0300
    38b4:	0f021301 	svceq	0x00021301
    38b8:	00010100 	andeq	r0, r1, r0, lsl #2
    38bc:	00000205 	andeq	r0, r0, r5, lsl #4
    38c0:	c7030000 	strgt	r0, [r3, -r0]
    38c4:	67130103 	ldrvs	r0, [r3, -r3, lsl #2]
    38c8:	01000302 	tsteq	r0, r2, lsl #6
    38cc:	02050001 	andeq	r0, r5, #1
    38d0:	00000000 	andeq	r0, r0, r0
    38d4:	0103d303 	tsteq	r3, r3, lsl #6
    38d8:	00100213 	andseq	r0, r0, r3, lsl r2
    38dc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    38e0:	00000002 	andeq	r0, r0, r2
    38e4:	03df0300 	bicseq	r0, pc, #0, 6
    38e8:	10021301 	andne	r1, r2, r1, lsl #6
    38ec:	00010100 	andeq	r0, r1, r0, lsl #2
    38f0:	5dc40205 	sfmpl	f0, 2, [r4, #20]
    38f4:	ea030800 	b	c58fc <__Stack_Size+0xc50fc>
    38f8:	9f130103 	svcls	0x00130103
    38fc:	01000402 	tsteq	r0, r2, lsl #8
    3900:	02050001 	andeq	r0, r5, #1
    3904:	08005de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, ip, lr}
    3908:	0103f503 	tsteq	r3, r3, lsl #10
    390c:	06028313 			; <UNDEFINED> instruction: 0x06028313
    3910:	00010100 	andeq	r0, r1, r0, lsl #2
    3914:	5dfc0205 	lfmpl	f0, 2, [ip, #20]!
    3918:	81030800 	tsthi	r3, r0, lsl #16
    391c:	02130104 	andseq	r0, r3, #4, 2
    3920:	0101000e 	tsteq	r1, lr
    3924:	00020500 	andeq	r0, r2, r0, lsl #10
    3928:	03000000 	movweq	r0, #0
    392c:	1301048d 	movwne	r0, #5261	; 0x148d
    3930:	01040200 	mrseq	r0, R12_usr
    3934:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
    3938:	029e0204 	addseq	r0, lr, #4, 4	; 0x40000000
    393c:	01010007 	tsteq	r1, r7
    3940:	18020500 	stmdane	r2, {r8, sl}
    3944:	0308005e 	movweq	r0, #32862	; 0x805e
    3948:	13010499 	movwne	r0, #5273	; 0x1499
    394c:	01040200 	mrseq	r0, R12_usr
    3950:	0200ac06 	andeq	sl, r0, #1536	; 0x600
    3954:	029e0204 	addseq	r0, lr, #4, 4	; 0x40000000
    3958:	0101000b 	tsteq	r1, fp
    395c:	00020500 	andeq	r0, r2, r0, lsl #10
    3960:	03000000 	movweq	r0, #0
    3964:	130104a4 	movwne	r0, #5284	; 0x14a4
    3968:	00070291 	muleq	r7, r1, r2
    396c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3970:	00000002 	andeq	r0, r0, r2
    3974:	04af0300 	strteq	r0, [pc], #768	; 397c <__Stack_Size+0x317c>
    3978:	02911301 	addseq	r1, r1, #67108864	; 0x4000000
    397c:	01010007 	tsteq	r1, r7
    3980:	00020500 	andeq	r0, r2, r0, lsl #10
    3984:	03000000 	movweq	r0, #0
    3988:	210104bc 			; <UNDEFINED> instruction: 0x210104bc
    398c:	01001b02 	tsteq	r0, r2, lsl #22
    3990:	02050001 	andeq	r0, r5, #1
    3994:	00000000 	andeq	r0, r0, r0
    3998:	0104c803 	tsteq	r4, r3, lsl #16
    399c:	00100213 	andseq	r0, r0, r3, lsl r2
    39a0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    39a4:	00000002 	andeq	r0, r0, r2
    39a8:	04d40300 	ldrbeq	r0, [r4], #768	; 0x300
    39ac:	10021301 	andne	r1, r2, r1, lsl #6
    39b0:	00010100 	andeq	r0, r1, r0, lsl #2
    39b4:	00000205 	andeq	r0, r0, r5, lsl #4
    39b8:	df030000 	svcle	0x00030000
    39bc:	9f130104 	svcls	0x00130104
    39c0:	01000402 	tsteq	r0, r2, lsl #8
    39c4:	02050001 	andeq	r0, r5, #1
    39c8:	00000000 	andeq	r0, r0, r0
    39cc:	0104ea03 	tsteq	r4, r3, lsl #20
    39d0:	06028313 			; <UNDEFINED> instruction: 0x06028313
    39d4:	00010100 	andeq	r0, r1, r0, lsl #2
    39d8:	00000205 	andeq	r0, r0, r5, lsl #4
    39dc:	f6030000 			; <UNDEFINED> instruction: 0xf6030000
    39e0:	1f130104 	svcne	0x00130104
    39e4:	04020021 	streq	r0, [r2], #-33	; 0x21
    39e8:	00200601 	eoreq	r0, r0, r1, lsl #12
    39ec:	08020402 	stmdaeq	r2, {r1, sl}
    39f0:	04020058 	streq	r0, [r2], #-88	; 0x58
    39f4:	0200f201 	andeq	pc, r0, #268435456	; 0x10000000
    39f8:	009e0204 	addseq	r0, lr, r4, lsl #4
    39fc:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    3a00:	02040200 	andeq	r0, r4, #0, 4
    3a04:	0e021208 	cdpeq	2, 0, cr1, cr2, cr8, {0}
    3a08:	00010100 	andeq	r0, r1, r0, lsl #2
    3a0c:	00000205 	andeq	r0, r0, r5, lsl #4
    3a10:	82030000 	andhi	r0, r3, #0
    3a14:	00130105 	andseq	r0, r3, r5, lsl #2
    3a18:	06010402 	streq	r0, [r1], -r2, lsl #8
    3a1c:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    3a20:	004a0802 	subeq	r0, sl, r2, lsl #16
    3a24:	90010402 	andls	r0, r1, r2, lsl #8
    3a28:	01000e02 	tsteq	r0, r2, lsl #28
    3a2c:	02050001 	andeq	r0, r5, #1
    3a30:	00000000 	andeq	r0, r0, r0
    3a34:	01058e03 	tsteq	r5, r3, lsl #28
    3a38:	04020013 	streq	r0, [r2], #-19
    3a3c:	002e0601 	eoreq	r0, lr, r1, lsl #12
    3a40:	08020402 	stmdaeq	r2, {r1, sl}
    3a44:	0402004a 	streq	r0, [r2], #-74	; 0x4a
    3a48:	0e029001 	cdpeq	0, 0, cr9, cr2, cr1, {0}
    3a4c:	00010100 	andeq	r0, r1, r0, lsl #2
    3a50:	00000205 	andeq	r0, r0, r5, lsl #4
    3a54:	9a030000 	bls	c3a5c <__Stack_Size+0xc325c>
    3a58:	91130105 	tstls	r3, r5, lsl #2
    3a5c:	01000702 	tsteq	r0, r2, lsl #14
    3a60:	02050001 	andeq	r0, r5, #1
    3a64:	00000000 	andeq	r0, r0, r0
    3a68:	0105a603 	tsteq	r5, r3, lsl #12
    3a6c:	07029113 	smladeq	r2, r3, r1, r9
    3a70:	00010100 	andeq	r0, r1, r0, lsl #2
    3a74:	00000205 	andeq	r0, r0, r5, lsl #4
    3a78:	b2030000 	andlt	r0, r3, #0
    3a7c:	bc130105 	ldflts	f0, [r3], {5}
    3a80:	0225489f 	eoreq	r4, r5, #10420224	; 0x9f0000
    3a84:	01010007 	tsteq	r1, r7
    3a88:	00020500 	andeq	r0, r2, r0, lsl #10
    3a8c:	03000000 	movweq	r0, #0
    3a90:	130105c3 	movwne	r0, #5571	; 0x15c3
    3a94:	0230bc30 	eorseq	fp, r0, #48, 24	; 0x3000
    3a98:	0101000d 	tsteq	r1, sp
    3a9c:	00020500 	andeq	r0, r2, r0, lsl #10
    3aa0:	03000000 	movweq	r0, #0
    3aa4:	160105d6 			; <UNDEFINED> instruction: 0x160105d6
    3aa8:	01000302 	tsteq	r0, r2, lsl #6
    3aac:	02050001 	andeq	r0, r5, #1
    3ab0:	00000000 	andeq	r0, r0, r0
    3ab4:	0105e303 	tsteq	r5, r3, lsl #6
    3ab8:	03023016 	movweq	r3, #8214	; 0x2016
    3abc:	b4010100 	strlt	r0, [r1], #-256	; 0x100
    3ac0:	02000000 	andeq	r0, r0, #0
    3ac4:	00006000 	andeq	r6, r0, r0
    3ac8:	fb010200 	blx	442d2 <__Stack_Size+0x43ad2>
    3acc:	01000d0e 	tsteq	r0, lr, lsl #26
    3ad0:	00010101 	andeq	r0, r1, r1, lsl #2
    3ad4:	00010000 	andeq	r0, r1, r0
    3ad8:	73750100 	cmnvc	r5, #0, 2
    3adc:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    3ae0:	75000062 	strvc	r0, [r0, #-98]	; 0x62
    3ae4:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    3ae8:	632e746e 	teqvs	lr, #1845493760	; 0x6e000000
    3aec:	00000100 	andeq	r0, r0, r0, lsl #2
    3af0:	5f627375 	svcpl	0x00627375
    3af4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    3af8:	0100682e 	tsteq	r0, lr, lsr #16
    3afc:	73750000 	cmnvc	r5, #0
    3b00:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xf62
    3b04:	682e7367 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
    3b08:	00000100 	andeq	r0, r0, r0, lsl #2
    3b0c:	5f627375 	svcpl	0x00627375
    3b10:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    3b14:	0100682e 	tsteq	r0, lr, lsr #16
    3b18:	73750000 	cmnvc	r5, #0
    3b1c:	6f635f62 	svcvs	0x00635f62
    3b20:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
    3b24:	00000100 	andeq	r0, r0, r0, lsl #2
    3b28:	02050000 	andeq	r0, r5, #0
    3b2c:	08005e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip, lr}
    3b30:	23012903 	movwcs	r2, #6403	; 0x1903
    3b34:	36593e84 	ldrbcc	r3, [r9], -r4, lsl #29
    3b38:	4b3d1f3d 	blmi	f4b834 <__Stack_Size+0xf4b034>
    3b3c:	17039591 			; <UNDEFINED> instruction: 0x17039591
    3b40:	5930213c 	ldmdbpl	r0!, {r2, r3, r4, r5, r8, sp}
    3b44:	43593042 	cmpmi	r9, #66	; 0x42
    3b48:	08305930 	ldmdaeq	r0!, {r4, r5, r8, fp, ip, lr}
    3b4c:	0903f313 	stmdbeq	r3, {r0, r1, r4, r8, r9, ip, sp, lr, pc}
    3b50:	5b316720 	blpl	c5d7d8 <__Stack_Size+0xc5cfd8>
    3b54:	1d933f5c 	ldcne	15, cr3, [r3, #368]	; 0x170
    3b58:	00160231 	andseq	r0, r6, r1, lsr r2
    3b5c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3b60:	00000002 	andeq	r0, r0, r2
    3b64:	019e0300 	orrseq	r0, lr, r0, lsl #6
    3b68:	3e762301 	cdpcc	3, 7, cr2, cr6, cr1, {0}
    3b6c:	5b31675a 	blpl	c5d8dc <__Stack_Size+0xc5d0dc>
    3b70:	085b313f 	ldmdaeq	fp, {r0, r1, r2, r3, r4, r5, r8, ip, sp}^
    3b74:	63010100 	movwvs	r0, #4352	; 0x1100
    3b78:	02000000 	andeq	r0, r0, #0
    3b7c:	00004500 	andeq	r4, r0, r0, lsl #10
    3b80:	fb010200 	blx	4438a <__Stack_Size+0x43b8a>
    3b84:	01000d0e 	tsteq	r0, lr, lsl #26
    3b88:	00010101 	andeq	r0, r1, r1, lsl #2
    3b8c:	00010000 	andeq	r0, r1, r0
    3b90:	73750100 	cmnvc	r5, #0, 2
    3b94:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    3b98:	75000062 	strvc	r0, [r0, #-98]	; 0x62
    3b9c:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    3ba0:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
    3ba4:	00010063 	andeq	r0, r1, r3, rrx
    3ba8:	62737500 	rsbsvs	r7, r3, #0, 10
    3bac:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    3bb0:	00682e65 	rsbeq	r2, r8, r5, ror #28
    3bb4:	75000001 	strvc	r0, [r0, #-1]
    3bb8:	635f6273 	cmpvs	pc, #805306375	; 0x30000007
    3bbc:	2e65726f 	cdpcs	2, 6, cr7, cr5, cr15, {3}
    3bc0:	00010068 	andeq	r0, r1, r8, rrx
    3bc4:	05000000 	streq	r0, [r0, #-0]
    3bc8:	005fac02 	subseq	sl, pc, r2, lsl #24
    3bcc:	01350308 	teqeq	r5, r8, lsl #6
    3bd0:	211d3121 	tstcs	sp, r1, lsr #2
    3bd4:	1d233d2f 	stcne	13, cr3, [r3, #-188]!	; 0xffffff44
    3bd8:	000f0223 	andeq	r0, pc, r3, lsr #4
    3bdc:	03500101 	cmpeq	r0, #1073741824	; 0x40000000
    3be0:	00020000 	andeq	r0, r2, r0
    3be4:	0000007b 	andeq	r0, r0, fp, ror r0
    3be8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3bec:	0101000d 	tsteq	r1, sp
    3bf0:	00000101 	andeq	r0, r0, r1, lsl #2
    3bf4:	00000100 	andeq	r0, r0, r0, lsl #2
    3bf8:	62737501 	rsbsvs	r7, r3, #4194304	; 0x400000
    3bfc:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    3c00:	73750000 	cmnvc	r5, #0
    3c04:	6f635f62 	svcvs	0x00635f62
    3c08:	632e6572 	teqvs	lr, #478150656	; 0x1c800000
    3c0c:	00000100 	andeq	r0, r0, r0, lsl #2
    3c10:	5f627375 	svcpl	0x00627375
    3c14:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    3c18:	0100682e 	tsteq	r0, lr, lsr #16
    3c1c:	73750000 	cmnvc	r5, #0
    3c20:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
    3c24:	00682e66 	rsbeq	r2, r8, r6, ror #28
    3c28:	75000001 	strvc	r0, [r0, #-1]
    3c2c:	635f6273 	cmpvs	pc, #805306375	; 0x30000007
    3c30:	2e65726f 	cdpcs	2, 6, cr7, cr5, cr15, {3}
    3c34:	00010068 	andeq	r0, r1, r8, rrx
    3c38:	62737500 	rsbsvs	r7, r3, #0, 10
    3c3c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    3c40:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3c44:	75000001 	strvc	r0, [r0, #-1]
    3c48:	6d5f6273 	lfmvs	f6, 2, [pc, #-460]	; 3a84 <__Stack_Size+0x3284>
    3c4c:	682e6d65 	stmdavs	lr!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
    3c50:	00000100 	andeq	r0, r0, r0, lsl #2
    3c54:	5f627375 	svcpl	0x00627375
    3c58:	73676572 	cmnvc	r7, #478150656	; 0x1c800000
    3c5c:	0100682e 	tsteq	r0, lr, lsr #16
    3c60:	00000000 	andeq	r0, r0, r0
    3c64:	5fe40205 	svcpl	0x00e40205
    3c68:	35030800 	strcc	r0, [r3, #-2048]	; 0x800
    3c6c:	3e222f01 	cdpcc	15, 2, cr2, cr2, cr1, {0}
    3c70:	022f4b22 	eoreq	r4, pc, #34816	; 0x8800
    3c74:	01010005 	tsteq	r1, r5
    3c78:	08020500 	stmdaeq	r2, {r8, sl}
    3c7c:	03080060 	movweq	r0, #32864	; 0x8060
    3c80:	2f0100e3 	svccs	0x000100e3
    3c84:	4b223e22 	blmi	893514 <__Stack_Size+0x892d14>
    3c88:	0005022f 	andeq	r0, r5, pc, lsr #4
    3c8c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3c90:	00602c02 	rsbeq	r2, r0, r2, lsl #24
    3c94:	019b0308 	orrseq	r0, fp, r8, lsl #6
    3c98:	3d222f01 	stccc	15, cr2, [r2, #-4]!
    3c9c:	311d2323 	tstcc	sp, r3, lsr #6
    3ca0:	4022235b 	eormi	r2, r2, fp, asr r3
    3ca4:	33404e30 	movtcc	r4, #3632	; 0xe30
    3ca8:	47402231 	smlaldxmi	r2, r0, r1, r2
    3cac:	4c231d31 	stcmi	13, cr1, [r3], #-196	; 0xffffff3c
    3cb0:	580b0342 	stmdapl	fp, {r1, r6, r8, r9}
    3cb4:	2e60034b 	cdpcs	3, 6, cr0, cr0, cr11, {2}
    3cb8:	02202103 	eoreq	r2, r0, #-1073741824	; 0xc0000000
    3cbc:	01010007 	tsteq	r1, r7
    3cc0:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
    3cc4:	03080060 	movweq	r0, #32864	; 0x8060
    3cc8:	130103e0 	movwne	r0, #5088	; 0x13e0
    3ccc:	212f2f1f 	teqcs	pc, pc, lsl pc	; <UNPREDICTABLE>
    3cd0:	04020033 	streq	r0, [r2], #-51	; 0x33
    3cd4:	06200601 	strteq	r0, [r0], -r1, lsl #12
    3cd8:	34924d30 	ldrcc	r4, [r2], #3376	; 0xd30
    3cdc:	5121352d 	teqpl	r1, sp, lsr #10
    3ce0:	244c8476 	strbcs	r8, [ip], #-1142	; 0x476
    3ce4:	302f2f2a 	eorcc	r2, pc, sl, lsr #30
    3ce8:	0223231d 	eoreq	r2, r3, #1946157056	; 0x74000000
    3cec:	01010012 	tsteq	r1, r2, lsl r0
    3cf0:	64020500 	strvs	r0, [r2], #-1280	; 0x500
    3cf4:	03080061 	movweq	r0, #32865	; 0x8061
    3cf8:	220100ca 	andcs	r0, r1, #202	; 0xca
    3cfc:	2f591f21 	svccs	0x00591f21
    3d00:	324b2130 	subcc	r2, fp, #48, 2
    3d04:	00080222 	andeq	r0, r8, r2, lsr #4
    3d08:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3d0c:	00619c02 	rsbeq	r9, r1, r2, lsl #24
    3d10:	00f80308 	rscseq	r0, r8, r8, lsl #6
    3d14:	3e842401 	cdpcc	4, 8, cr2, cr4, cr1, {0}
    3d18:	01040200 	mrseq	r0, R12_usr
    3d1c:	2f062006 	svccs	0x00062006
    3d20:	1e224b34 	vmovne.16	d2[2], r4
    3d24:	21252f2f 	teqcs	r5, pc, lsr #30
    3d28:	01000702 	tsteq	r0, r2, lsl #14
    3d2c:	02050001 	andeq	r0, r5, #1
    3d30:	080061e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sp, lr}
    3d34:	0101e903 	tsteq	r1, r3, lsl #18
    3d38:	4b3e4021 	blmi	f93dc4 <__Stack_Size+0xf935c4>
    3d3c:	423d3522 	eorsmi	r3, sp, #142606336	; 0x8800000
    3d40:	03200f03 	teqeq	r0, #3, 30
    3d44:	5f432072 	svcpl	0x00432072
    3d48:	32207503 	eorcc	r7, r0, #12582912	; 0xc00000
    3d4c:	02003140 	andeq	r3, r0, #64, 2
    3d50:	2e060104 	adfcss	f0, f6, f4
    3d54:	09032f06 	stmdbeq	r3, {r1, r2, r8, r9, sl, fp, sp}
    3d58:	1d23472e 	stcne	7, cr4, [r3, #-184]!	; 0xffffff48
    3d5c:	5e4b4c23 	cdppl	12, 4, cr4, cr11, cr3, {1}
    3d60:	2f6b235a 	svccs	0x006b235a
    3d64:	21314b94 			; <UNDEFINED> instruction: 0x21314b94
    3d68:	01000a02 	tsteq	r0, r2, lsl #20
    3d6c:	02050001 	andeq	r0, r5, #1
    3d70:	080062b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp, lr}
    3d74:	0102c203 	tsteq	r2, r3, lsl #4
    3d78:	200f0326 	andcs	r0, pc, r6, lsr #6
    3d7c:	03207103 	teqeq	r0, #-1073741824	; 0xc0000000
    3d80:	7103200f 	tstvc	r3, pc
    3d84:	54432120 	strbpl	r2, [r3], #-288	; 0x120
    3d88:	2f314032 	svccs	0x00314032
    3d8c:	01040200 	mrseq	r0, R12_usr
    3d90:	21062e06 	tstcs	r6, r6, lsl #28
    3d94:	472e0903 	strmi	r0, [lr, -r3, lsl #18]!
    3d98:	88231d31 	stmdahi	r3!, {r0, r4, r5, r8, sl, fp, ip}
    3d9c:	6f034b85 	svcvs	0x00034b85
    3da0:	2012032e 	andscs	r0, r2, lr, lsr #6
    3da4:	01000702 	tsteq	r0, r2, lsl #14
    3da8:	02050001 	andeq	r0, r5, #1
    3dac:	08006338 	stmdaeq	r0, {r3, r4, r5, r8, r9, sp, lr}
    3db0:	0102f803 	tsteq	r2, r3, lsl #16
    3db4:	024c6721 	subeq	r6, ip, #8650752	; 0x840000
    3db8:	01010007 	tsteq	r1, r7
    3dbc:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    3dc0:	03080063 	movweq	r0, #32867	; 0x8063
    3dc4:	15010392 	strne	r0, [r1, #-914]	; 0x392
    3dc8:	233d223d 	teqcs	sp, #-805306365	; 0xd0000003
    3dcc:	0004022f 	andeq	r0, r4, pc, lsr #4
    3dd0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3dd4:	00637802 	rsbeq	r7, r3, r2, lsl #16
    3dd8:	07c90308 	strbeq	r0, [r9, r8, lsl #6]
    3ddc:	5a682101 	bpl	1a0c1e8 <__Stack_Size+0x1a0b9e8>
    3de0:	0d02404b 	stceq	0, cr4, [r2, #-300]	; 0xfffffed4
    3de4:	00010100 	andeq	r0, r1, r0, lsl #2
    3de8:	63b80205 			; <UNDEFINED> instruction: 0x63b80205
    3dec:	cc030800 	stcgt	8, cr0, [r3], {-0}
    3df0:	3e280106 	sufcce	f0, f0, f6
    3df4:	5c563e2c 	mrrcpl	14, 2, r3, r6, cr12
    3df8:	3030302f 	eorscc	r3, r0, pc, lsr #32
    3dfc:	bd032f31 	stclt	15, cr2, [r3, #-196]	; 0xffffff3c
    3e00:	304e4a7d 	subcc	r4, lr, sp, ror sl
    3e04:	294f3040 	stmdbcs	pc, {r6, ip, sp}^	; <UNPREDICTABLE>
    3e08:	0c033d3d 	stceq	13, cr3, [r3], {61}	; 0x3d
    3e0c:	3c03304a 	stccc	0, cr3, [r3], {74}	; 0x4a
    3e10:	4403593c 	strmi	r5, [r3], #-2364	; 0x93c
    3e14:	443e3d3c 	ldrtmi	r3, [lr], #-3388	; 0xd3c
    3e18:	3e3d3d30 	mrccc	13, 1, r3, cr13, cr0, {1}
    3e1c:	313c0b03 	teqcc	ip, r3, lsl #22
    3e20:	33314130 	teqcc	r1, #48, 2
    3e24:	2e090330 	mcrcs	3, 0, r0, cr9, cr0, {1}
    3e28:	362e0a03 	strtcc	r0, [lr], -r3, lsl #20
    3e2c:	2e75039c 	mrccs	3, 3, r0, cr5, cr12, {4}
    3e30:	03201003 	teqeq	r0, #3
    3e34:	3e303c19 	mrccc	12, 1, r3, cr0, cr9, {0}
    3e38:	303e302f 	eorscc	r3, lr, pc, lsr #32
    3e3c:	303d303e 	eorscc	r3, sp, lr, lsr r0
    3e40:	4b695a42 	blmi	1a5a750 <__Stack_Size+0x1a59f50>
    3e44:	6d75305e 	ldclvs	0, cr3, [r5, #-376]!	; 0xfffffe88
    3e48:	200e0330 	andcs	r0, lr, r0, lsr r3
    3e4c:	43207203 	teqmi	r0, #805306368	; 0x30000000
    3e50:	2075035f 	rsbscs	r0, r5, pc, asr r3
    3e54:	59314032 	ldmdbpl	r1!, {r1, r4, r5, lr}
    3e58:	303c0903 	eorscc	r0, ip, r3, lsl #18
    3e5c:	4b593050 	blmi	164ffa4 <__Stack_Size+0x164f7a4>
    3e60:	3d228967 	stccc	9, cr8, [r2, #-412]!	; 0xfffffe64
    3e64:	67322f23 	ldrvs	r2, [r2, -r3, lsr #30]!
    3e68:	31694130 	cmncc	r9, r0, lsr r1
    3e6c:	314d413f 	cmpcc	sp, pc, lsr r1
    3e70:	3023084c 	eorcc	r0, r3, ip, asr #16
    3e74:	405a305a 	subsmi	r3, sl, sl, asr r0
    3e78:	032f404b 	teqeq	pc, #75	; 0x4b
    3e7c:	032f4a2f 	teqeq	pc, #192512	; 0x2f000
    3e80:	032e7ed6 	teqeq	lr, #3424	; 0xd60
    3e84:	0b032e2c 	bleq	cf73c <__Stack_Size+0xcef3c>
    3e88:	000c022e 	andeq	r0, ip, lr, lsr #4
    3e8c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3e90:	00669402 	rsbeq	r9, r6, r2, lsl #8
    3e94:	07a00308 	streq	r0, [r0, r8, lsl #6]!
    3e98:	003e2101 	eorseq	r2, lr, r1, lsl #2
    3e9c:	06010402 	streq	r0, [r1], -r2, lsl #8
    3ea0:	8a03062e 	bhi	c5760 <__Stack_Size+0xc4f60>
    3ea4:	221e2e7c 	andscs	r2, lr, #124, 28	; 0x7c0
    3ea8:	1f592633 	svcne	0x00592633
    3eac:	1e222f21 	cdpne	15, 2, cr2, cr2, cr1, {1}
    3eb0:	21307730 	teqcs	r0, r0, lsr r7
    3eb4:	211f2f1f 	tstcs	pc, pc, lsl pc	; <UNPREDICTABLE>
    3eb8:	404c3f2f 	submi	r3, ip, pc, lsr #30
    3ebc:	033d4e22 	teqeq	sp, #544	; 0x220
    3ec0:	3f9e03d3 	svccc	0x009e03d3
    3ec4:	09035130 	stmdbeq	r3, {r4, r5, r8, ip, lr}
    3ec8:	022d3120 	eoreq	r3, sp, #32, 2
    3ecc:	0101000f 	tsteq	r1, pc
    3ed0:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    3ed4:	03080067 	movweq	r0, #32871	; 0x8067
    3ed8:	220107dd 	andcs	r0, r1, #57933824	; 0x3740000
    3edc:	04020031 	streq	r0, [r2], #-49	; 0x31
    3ee0:	00200601 	eoreq	r0, r0, r1, lsl #12
    3ee4:	06020402 	streq	r0, [r2], -r2, lsl #8
    3ee8:	04020076 	streq	r0, [r2], #-118	; 0x76
    3eec:	02326402 	eorseq	r6, r2, #33554432	; 0x2000000
    3ef0:	01010009 	tsteq	r1, r9
    3ef4:	94020500 	strls	r0, [r2], #-1280	; 0x500
    3ef8:	03080067 	movweq	r0, #32871	; 0x8067
    3efc:	210106f8 	strdcs	r0, [r1, -r8]
    3f00:	0402003e 	streq	r0, [r2], #-62	; 0x3e
    3f04:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    3f08:	303f3030 	eorscc	r3, pc, r0, lsr r0	; <UNPREDICTABLE>
    3f0c:	01040200 	mrseq	r0, R12_usr
    3f10:	0402003d 	streq	r0, [r2], #-61	; 0x3d
    3f14:	3d311f01 	ldccc	15, cr1, [r1, #-4]!
    3f18:	3123504c 	teqcc	r3, ip, asr #32
    3f1c:	0009022d 	andeq	r0, r9, sp, lsr #4
    3f20:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3f24:	00000002 	andeq	r0, r0, r2
    3f28:	07f10300 	ldrbeq	r0, [r1, r0, lsl #6]!
    3f2c:	00010201 	andeq	r0, r1, r1, lsl #4
    3f30:	008f0101 	addeq	r0, pc, r1, lsl #2
    3f34:	00020000 	andeq	r0, r2, r0
    3f38:	00000036 	andeq	r0, r0, r6, lsr r0
    3f3c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3f40:	0101000d 	tsteq	r1, sp
    3f44:	00000101 	andeq	r0, r0, r1, lsl #2
    3f48:	00000100 	andeq	r0, r0, r0, lsl #2
    3f4c:	62737501 	rsbsvs	r7, r3, #4194304	; 0x400000
    3f50:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    3f54:	73750000 	cmnvc	r5, #0
    3f58:	656d5f62 	strbvs	r5, [sp, #-3938]!	; 0xf62
    3f5c:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    3f60:	75000001 	strvc	r0, [r0, #-1]
    3f64:	745f6273 	ldrbvc	r6, [pc], #-627	; 3f6c <__Stack_Size+0x376c>
    3f68:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    3f6c:	00010068 	andeq	r0, r1, r8, rrx
    3f70:	05000000 	streq	r0, [r0, #-0]
    3f74:	0067f002 	rsbeq	pc, r7, r2
    3f78:	01230308 	teqeq	r3, r8, lsl #6
    3f7c:	2b232b24 	blcs	8cec14 <__Stack_Size+0x8ce414>
    3f80:	02002123 	andeq	r2, r0, #-1073741816	; 0xc0000008
    3f84:	20060104 	andcs	r0, r6, r4, lsl #2
    3f88:	02040200 	andeq	r0, r4, #0, 4
    3f8c:	02004e06 	andeq	r4, r0, #6, 28	; 0x60
    3f90:	002c0204 	eoreq	r0, ip, r4, lsl #4
    3f94:	30020402 	andcc	r0, r2, r2, lsl #8
    3f98:	02040200 	andeq	r0, r4, #0, 4
    3f9c:	01024e2f 	tsteq	r2, pc, lsr #28
    3fa0:	00010100 	andeq	r0, r1, r0, lsl #2
    3fa4:	68200205 	stmdavs	r0!, {r0, r2, r9}
    3fa8:	3c030800 	stccc	8, cr0, [r3], {-0}
    3fac:	232b2401 	teqcs	fp, #16777216	; 0x1000000
    3fb0:	0021232b 	eoreq	r2, r1, fp, lsr #6
    3fb4:	06010402 	streq	r0, [r1], -r2, lsl #8
    3fb8:	04020020 	streq	r0, [r2], #-32
    3fbc:	69300602 	ldmdbvs	r0!, {r1, r9, sl}
    3fc0:	01000102 	tsteq	r0, r2, lsl #2
    3fc4:	Address 0x00003fc4 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	0000000c 	andeq	r0, r0, ip
      14:	00000000 	andeq	r0, r0, r0
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	08000b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp}
      1c:	00000002 	andeq	r0, r0, r2
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	0000000c 	andeq	r0, r0, ip
      24:	00000000 	andeq	r0, r0, r0
      28:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	00000002 	andeq	r0, r0, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	0000000c 	andeq	r0, r0, ip
      34:	00000000 	andeq	r0, r0, r0
      38:	08000ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	00000002 	andeq	r0, r0, r2

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	0000000c 	andeq	r0, r0, ip
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	00000000 	andeq	r0, r0, r0
      48:	08000ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp}
      4c:	0000000a 	andeq	r0, r0, sl

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	0000000c 	andeq	r0, r0, ip
      54:	00000000 	andeq	r0, r0, r0
      58:	08000bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp}
      5c:	00000002 	andeq	r0, r0, r2
      60:	0000000c 	andeq	r0, r0, ip
      64:	00000000 	andeq	r0, r0, r0
      68:	08000bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp}
      6c:	00000018 	andeq	r0, r0, r8, lsl r0
      70:	0000000c 	andeq	r0, r0, ip
      74:	00000000 	andeq	r0, r0, r0
      78:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
      7c:	00000002 	andeq	r0, r0, r2
      80:	0000000c 	andeq	r0, r0, ip
      84:	00000000 	andeq	r0, r0, r0
      88:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
      8c:	00000002 	andeq	r0, r0, r2
      90:	0000000c 	andeq	r0, r0, ip
      94:	00000000 	andeq	r0, r0, r0
      98:	08000bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp}
      9c:	00000002 	andeq	r0, r0, r2
      a0:	0000000c 	andeq	r0, r0, ip
      a4:	00000000 	andeq	r0, r0, r0
	f25519_select(x, a, b, (a[0] ^ parity) & 1);

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
	f25519_normalize(a);
	f25519_normalize(c);
      a8:	08000bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp}

	return f25519_eq(a, c);
      ac:	00000002 	andeq	r0, r0, r2
      b0:	0000000c 	andeq	r0, r0, ip
      b4:	00000000 	andeq	r0, r0, r0
	uint8_t ok;

	mx2ey(ey, mx);
	ok = ey2ex(ex, ey, parity);

	f25519_normalize(ex);
      b8:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
	f25519_normalize(ey);
      bc:	00000002 	andeq	r0, r0, r2
      c0:	0000000c 	andeq	r0, r0, ip

	return ok;
}
      c4:	00000000 	andeq	r0, r0, r0
      c8:	08000be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp}
      cc:	00000002 	andeq	r0, r0, r2
      d0:	0000000c 	andeq	r0, r0, ip
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
      d4:	00000000 	andeq	r0, r0, r0
      d8:	08000be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp}
		minusp[i] = c;
      dc:	0000000c 	andeq	r0, r0, ip
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
      e0:	0000001c 	andeq	r0, r0, ip, lsl r0
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
      e4:	00000000 	andeq	r0, r0, r0

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
      e8:	08000bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp}
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
      ec:	000000a8 	andeq	r0, r0, r8, lsr #1
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
      f0:	40100e41 	andsmi	r0, r0, r1, asr #28
      f4:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
      f8:	02854003 	addeq	r4, r5, #3
      fc:	00018e40 	andeq	r8, r1, r0, asr #28
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     100:	0000001c 	andeq	r0, r0, ip, lsl r0

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
     104:	00000000 	andeq	r0, r0, r0
     108:	08000c98 	stmdaeq	r0, {r3, r4, r7, sl, fp}
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     10c:	00000074 	andeq	r0, r0, r4, ror r0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
     110:	40100e41 	andsmi	r0, r0, r1, asr #28
     114:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
     118:	02854003 	addeq	r4, r5, #3
     11c:	00018e40 	andeq	r8, r1, r0, asr #28
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     120:	0000000c 	andeq	r0, r0, ip
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
     124:	00000000 	andeq	r0, r0, r0
     128:	08000d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp}
		fprime_copy(plusa, r);
		fprime_add(plusa, a, modulus);

		fprime_select(r, r, plusa, bit);
	}
}
     12c:	0000000c 	andeq	r0, r0, ip

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
     130:	0000000c 	andeq	r0, r0, ip
	i <<= 3;

	while (x) {
     134:	00000000 	andeq	r0, r0, r0
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
     138:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
     13c:	0000000c 	andeq	r0, r0, ip
	f25519_mul__distinct(x3, a, a);

	f25519_mul_c(a, x1z1, 486662);
	f25519_add(a, x1sq, a);
	f25519_add(a, z1sq, a);
	f25519_mul__distinct(x1sq, x1z1, a);
     140:	0000000c 	andeq	r0, r0, ip
	f25519_mul_c(z3, x1sq, 4);
     144:	00000000 	andeq	r0, r0, r0
     148:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	00000020 	andeq	r0, r0, r0, lsr #32
     150:	0000000c 	andeq	r0, r0, ip
     154:	00000000 	andeq	r0, r0, r0
	f25519_sub(b, x3, z3); /* D */
     158:	08000d44 	stmdaeq	r0, {r2, r6, r8, sl, fp}
     15c:	0000000c 	andeq	r0, r0, ip
	f25519_mul__distinct(da, a, b);
     160:	00000018 	andeq	r0, r0, r8, lsl r0
     164:	00000000 	andeq	r0, r0, r0
     168:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}

	f25519_sub(b, x2, z2);
     16c:	00000028 	andeq	r0, r0, r8, lsr #32
     170:	40080e41 	andmi	r0, r8, r1, asr #28
	f25519_add(a, x3, z3); /* C */
     174:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
     178:	00000001 	andeq	r0, r0, r1
     17c:	00000024 	andeq	r0, r0, r4, lsr #32
	f25519_mul__distinct(cb, a, b);
     180:	00000000 	andeq	r0, r0, r0
     184:	08000d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp}

	f25519_add(a, da, cb);
     188:	0000008c 	andeq	r0, r0, ip, lsl #1
     18c:	40180e42 	andsmi	r0, r8, r2, asr #28
     190:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
	f25519_mul__distinct(b, a, a);
     194:	04864005 	streq	r4, [r6], #5
     198:	40038740 	andmi	r8, r3, r0, asr #14
	f25519_mul__distinct(x5, z1, b);
     19c:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     1a0:	200e4101 	andcs	r4, lr, r1, lsl #2
     1a4:	0000001c 	andeq	r0, r0, ip, lsl r0

	f25519_sub(a, da, cb);
     1a8:	00000000 	andeq	r0, r0, r0
     1ac:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
	f25519_mul__distinct(b, a, a);
     1b0:	00000070 	andeq	r0, r0, r0, ror r0
     1b4:	400c0e41 	andmi	r0, ip, r1, asr #28
     1b8:	85400384 	strbhi	r0, [r0, #-900]	; 0x384

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	018e4002 	orreq	r4, lr, r2
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	00180e42 	andseq	r0, r8, r2, asr #28
     1c4:	00000018 	andeq	r0, r0, r8, lsl r0

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	00000000 	andeq	r0, r0, r0
     1cc:	08000e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp}
     1d0:	00000038 	andeq	r0, r0, r8, lsr r0
     1d4:	40080e45 	andmi	r0, r8, r5, asr #28
		f25519_select(zm1, zm1, zm, bit);
     1d8:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     1dc:	00000001 	andeq	r0, r0, r1
     1e0:	0000000c 	andeq	r0, r0, ip
	...
		f25519_select(xm, xm, xms, bit);
     1ec:	00000004 	andeq	r0, r0, r4
		f25519_select(zm, zm, zms, bit);
     1f0:	0000000c 	andeq	r0, r0, ip
	...
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     200:	0000000c 	andeq	r0, r0, ip
	...
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
	f25519_mul__distinct(result, zm1, xm);
     20c:	00000018 	andeq	r0, r0, r8, lsl r0
     210:	00000014 	andeq	r0, r0, r4, lsl r0
	f25519_normalize(result);
     214:	00000000 	andeq	r0, r0, r0
     218:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
}
     21c:	000000c8 	andeq	r0, r0, r8, asr #1
     220:	40040e43 	andmi	r0, r4, r3, asr #28
     224:	00000184 	andeq	r0, r0, r4, lsl #3
     228:	00000024 	andeq	r0, r0, r4, lsr #32
	...
     234:	00000048 	andeq	r0, r0, r8, asr #32
     238:	40180e42 	andsmi	r0, r8, r2, asr #28
     23c:	84400683 	strbhi	r0, [r0], #-1667	; 0x683
     240:	04854005 	streq	r4, [r5], #5
     244:	40038640 	andmi	r8, r3, r0, asr #12
     248:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     24c:	00000001 	andeq	r0, r0, r1
     250:	00000018 	andeq	r0, r0, r8, lsl r0
	...
     25c:	0000003c 	andeq	r0, r0, ip, lsr r0
     260:	40080e43 	andmi	r0, r8, r3, asr #28
     264:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     268:	00000001 	andeq	r0, r0, r1
     26c:	00000018 	andeq	r0, r0, r8, lsl r0
     270:	00000000 	andeq	r0, r0, r0
     274:	08000f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp}
     278:	0000001c 	andeq	r0, r0, ip, lsl r0
     27c:	40040e41 	andmi	r0, r4, r1, asr #28
     280:	0e42018e 	dvfeqd	f0, f2, #0.5
     284:	00000010 	andeq	r0, r0, r0, lsl r0
     288:	00000018 	andeq	r0, r0, r8, lsl r0
     28c:	00000000 	andeq	r0, r0, r0
     290:	08000f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp}
     294:	00000016 	andeq	r0, r0, r6, lsl r0
     298:	40040e41 	andmi	r0, r4, r1, asr #28
     29c:	0e41018e 	dvfeqd	f0, f1, #0.5
     2a0:	00000010 	andeq	r0, r0, r0, lsl r0
     2a4:	00000024 	andeq	r0, r0, r4, lsr #32
     2a8:	00000000 	andeq	r0, r0, r0
     2ac:	08000fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp}
     2b0:	000000e4 	andeq	r0, r0, r4, ror #1
     2b4:	40180e41 	andsmi	r0, r8, r1, asr #28
     2b8:	84400683 	strbhi	r0, [r0], #-1667	; 0x683
     2bc:	04854005 	streq	r4, [r5], #5
     2c0:	40038640 	andmi	r8, r3, r0, asr #12
     2c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2c8:	00000001 	andeq	r0, r0, r1
     2cc:	0000000c 	andeq	r0, r0, ip
	...
     2d8:	0000000c 	andeq	r0, r0, ip
     2dc:	0000000c 	andeq	r0, r0, ip
     2e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     2e4:	7c020001 	stcvc	0, cr0, [r2], {1}
     2e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     2f0:	000002dc 	ldrdeq	r0, [r0], -ip
     2f4:	00000000 	andeq	r0, r0, r0
     2f8:	00000028 	andeq	r0, r0, r8, lsr #32
     2fc:	40100e41 	andsmi	r0, r0, r1, asr #28
     300:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
     304:	02854003 	addeq	r4, r5, #3
     308:	00018e40 	andeq	r8, r1, r0, asr #28
     30c:	0000001c 	andeq	r0, r0, ip, lsl r0
     310:	000002dc 	ldrdeq	r0, [r0], -ip
     314:	0800108c 	stmdaeq	r0, {r2, r3, r7, ip}
     318:	0000013c 	andeq	r0, r0, ip, lsr r1
     31c:	400c0e41 	andmi	r0, ip, r1, asr #28
     320:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     324:	018e4002 	orreq	r4, lr, r2
     328:	00200e41 	eoreq	r0, r0, r1, asr #28
     32c:	0000000c 	andeq	r0, r0, ip
     330:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     334:	7c020001 	stcvc	0, cr0, [r2], {1}
     338:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     33c:	00000028 	andeq	r0, r0, r8, lsr #32
     340:	0000032c 	andeq	r0, r0, ip, lsr #6
     344:	00000000 	andeq	r0, r0, r0
     348:	00000048 	andeq	r0, r0, r8, asr #32
     34c:	40100e41 	andsmi	r0, r0, r1, asr #28
     350:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
     354:	02824003 	addeq	r4, r2, #3
     358:	41018340 	tstmi	r1, r0, asr #6
     35c:	8440180e 	strbhi	r1, [r0], #-2062	; 0x80e
     360:	058e4006 	streq	r4, [lr, #6]
     364:	01e80e41 	mvneq	r0, r1, asr #28
     368:	00000028 	andeq	r0, r0, r8, lsr #32
     36c:	0000032c 	andeq	r0, r0, ip, lsr #6
     370:	00000000 	andeq	r0, r0, r0
     374:	00000048 	andeq	r0, r0, r8, asr #32
     378:	40100e41 	andsmi	r0, r0, r1, asr #28
     37c:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
     380:	02824003 	addeq	r4, r2, #3
     384:	41018340 	tstmi	r1, r0, asr #6
     388:	8440180e 	strbhi	r1, [r0], #-2062	; 0x80e
     38c:	058e4006 	streq	r4, [lr, #6]
     390:	01e80e41 	mvneq	r0, r1, asr #28
     394:	0000000c 	andeq	r0, r0, ip
     398:	0000032c 	andeq	r0, r0, ip, lsr #6
     39c:	080011c8 	stmdaeq	r0, {r3, r6, r7, r8, ip}
     3a0:	00000016 	andeq	r0, r0, r6, lsl r0
     3a4:	0000000c 	andeq	r0, r0, ip
     3a8:	0000032c 	andeq	r0, r0, ip, lsr #6
     3ac:	080011e0 	stmdaeq	r0, {r5, r6, r7, r8, ip}
     3b0:	00000012 	andeq	r0, r0, r2, lsl r0
     3b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3b8:	0000032c 	andeq	r0, r0, ip, lsr #6
     3bc:	080011f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip}
     3c0:	00000060 	andeq	r0, r0, r0, rrx
     3c4:	40100e41 	andsmi	r0, r0, r1, asr #28
     3c8:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     3cc:	02864003 	addeq	r4, r6, #3
     3d0:	00018740 	andeq	r8, r1, r0, asr #14
     3d4:	0000000c 	andeq	r0, r0, ip
     3d8:	0000032c 	andeq	r0, r0, ip, lsr #6
     3dc:	00000000 	andeq	r0, r0, r0
     3e0:	0000000a 	andeq	r0, r0, sl
     3e4:	0000000c 	andeq	r0, r0, ip
     3e8:	0000032c 	andeq	r0, r0, ip, lsr #6
     3ec:	00000000 	andeq	r0, r0, r0
     3f0:	00000016 	andeq	r0, r0, r6, lsl r0
     3f4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3f8:	0000032c 	andeq	r0, r0, ip, lsr #6
     3fc:	00000000 	andeq	r0, r0, r0
     400:	00000038 	andeq	r0, r0, r8, lsr r0
     404:	40080e41 	andmi	r0, r8, r1, asr #28
     408:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     40c:	d00e4101 	andle	r4, lr, r1, lsl #2
     410:	00000001 	andeq	r0, r0, r1
     414:	00000028 	andeq	r0, r0, r8, lsr #32
     418:	0000032c 	andeq	r0, r0, ip, lsr #6
     41c:	08001254 	stmdaeq	r0, {r2, r4, r6, r9, ip}
     420:	00000044 	andeq	r0, r0, r4, asr #32
     424:	40100e41 	andsmi	r0, r0, r1, asr #28
     428:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
     42c:	02824003 	addeq	r4, r2, #3
     430:	41018340 	tstmi	r1, r0, asr #6
     434:	8440180e 	strbhi	r1, [r0], #-2062	; 0x80e
     438:	058e4006 	streq	r4, [lr, #6]
     43c:	01e80e41 	mvneq	r0, r1, asr #28
     440:	00000028 	andeq	r0, r0, r8, lsr #32
     444:	0000032c 	andeq	r0, r0, ip, lsr #6
     448:	00000000 	andeq	r0, r0, r0
     44c:	000000bc 	strheq	r0, [r0], -ip
     450:	401c0e42 	andsmi	r0, ip, r2, asr #28
     454:	85400784 	strbhi	r0, [r0, #-1924]	; 0x784
     458:	05864006 	streq	r4, [r6, #6]
     45c:	40048740 	andmi	r8, r4, r0, asr #14
     460:	89400388 	stmdbhi	r0, {r3, r7, r8, r9}^
     464:	018e4002 	orreq	r4, lr, r2
     468:	00380e42 	eorseq	r0, r8, r2, asr #28
     46c:	00000020 	andeq	r0, r0, r0, lsr #32
     470:	0000032c 	andeq	r0, r0, ip, lsr #6
     474:	08001298 	stmdaeq	r0, {r3, r4, r7, r9, ip}
     478:	00000088 	andeq	r0, r0, r8, lsl #1
     47c:	40100e41 	andsmi	r0, r0, r1, asr #28
     480:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     484:	02864003 	addeq	r4, r6, #3
     488:	42018e40 	andmi	r8, r1, #64, 28	; 0x400
     48c:	0000280e 	andeq	r2, r0, lr, lsl #16
     490:	00000014 	andeq	r0, r0, r4, lsl r0
     494:	0000032c 	andeq	r0, r0, ip, lsr #6
     498:	08001320 	stmdaeq	r0, {r5, r8, r9, ip}
     49c:	00000050 	andeq	r0, r0, r0, asr r0
     4a0:	40040e44 	andmi	r0, r4, r4, asr #28
     4a4:	00000184 	andeq	r0, r0, r4, lsl #3
     4a8:	0000000c 	andeq	r0, r0, ip
     4ac:	0000032c 	andeq	r0, r0, ip, lsr #6
     4b0:	08001370 	stmdaeq	r0, {r4, r5, r6, r8, r9, ip}
     4b4:	0000006c 	andeq	r0, r0, ip, rrx
     4b8:	0000000c 	andeq	r0, r0, ip
     4bc:	0000032c 	andeq	r0, r0, ip, lsr #6
     4c0:	080013dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, ip}
     4c4:	00000014 	andeq	r0, r0, r4, lsl r0
     4c8:	0000000c 	andeq	r0, r0, ip
     4cc:	0000032c 	andeq	r0, r0, ip, lsr #6
     4d0:	080013f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip}
     4d4:	00000020 	andeq	r0, r0, r0, lsr #32
     4d8:	0000000c 	andeq	r0, r0, ip
     4dc:	0000032c 	andeq	r0, r0, ip, lsr #6
     4e0:	08001410 	stmdaeq	r0, {r4, sl, ip}
     4e4:	00000028 	andeq	r0, r0, r8, lsr #32
     4e8:	0000000c 	andeq	r0, r0, ip
     4ec:	0000032c 	andeq	r0, r0, ip, lsr #6
     4f0:	00000000 	andeq	r0, r0, r0
     4f4:	00000004 	andeq	r0, r0, r4
     4f8:	00000018 	andeq	r0, r0, r8, lsl r0
     4fc:	0000032c 	andeq	r0, r0, ip, lsr #6
     500:	00000000 	andeq	r0, r0, r0
     504:	00000018 	andeq	r0, r0, r8, lsl r0
     508:	40080e42 	andmi	r0, r8, r2, asr #28
     50c:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
     510:	00000001 	andeq	r0, r0, r1
     514:	0000001c 	andeq	r0, r0, ip, lsl r0
     518:	0000032c 	andeq	r0, r0, ip, lsr #6
     51c:	08001438 	stmdaeq	r0, {r3, r4, r5, sl, ip}
     520:	000000a8 	andeq	r0, r0, r8, lsr #1
     524:	40100e43 	andsmi	r0, r0, r3, asr #28
     528:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     52c:	02864003 	addeq	r4, r6, #3
     530:	00018e40 	andeq	r8, r1, r0, asr #28
     534:	00000014 	andeq	r0, r0, r4, lsl r0
     538:	0000032c 	andeq	r0, r0, ip, lsr #6
     53c:	00000000 	andeq	r0, r0, r0
     540:	00000034 	andeq	r0, r0, r4, lsr r0
     544:	40040e42 	andmi	r0, r4, r2, asr #28
     548:	00000184 	andeq	r0, r0, r4, lsl #3
     54c:	00000018 	andeq	r0, r0, r8, lsl r0
     550:	0000032c 	andeq	r0, r0, ip, lsr #6
     554:	00000000 	andeq	r0, r0, r0
     558:	00000068 	andeq	r0, r0, r8, rrx
     55c:	40080e44 	andmi	r0, r8, r4, asr #28
     560:	85400284 	strbhi	r0, [r0, #-644]	; 0x284
     564:	00000001 	andeq	r0, r0, r1
     568:	00000014 	andeq	r0, r0, r4, lsl r0
     56c:	0000032c 	andeq	r0, r0, ip, lsr #6
     570:	080014e0 	stmdaeq	r0, {r5, r6, r7, sl, ip}
     574:	00000070 	andeq	r0, r0, r0, ror r0
     578:	40040e42 	andmi	r0, r4, r2, asr #28
     57c:	00000184 	andeq	r0, r0, r4, lsl #3
     580:	0000000c 	andeq	r0, r0, ip
     584:	0000032c 	andeq	r0, r0, ip, lsr #6
     588:	08001550 	stmdaeq	r0, {r4, r6, r8, sl, ip}
     58c:	00000028 	andeq	r0, r0, r8, lsr #32
     590:	0000000c 	andeq	r0, r0, ip
     594:	0000032c 	andeq	r0, r0, ip, lsr #6
     598:	08001578 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, ip}
     59c:	00000014 	andeq	r0, r0, r4, lsl r0
     5a0:	00000014 	andeq	r0, r0, r4, lsl r0
     5a4:	0000032c 	andeq	r0, r0, ip, lsr #6
     5a8:	0800158c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip}
     5ac:	00000040 	andeq	r0, r0, r0, asr #32
     5b0:	40040e44 	andmi	r0, r4, r4, asr #28
     5b4:	00000184 	andeq	r0, r0, r4, lsl #3
     5b8:	00000024 	andeq	r0, r0, r4, lsr #32
     5bc:	0000032c 	andeq	r0, r0, ip, lsr #6
     5c0:	00000000 	andeq	r0, r0, r0
     5c4:	00000060 	andeq	r0, r0, r0, rrx
     5c8:	40180e42 	andsmi	r0, r8, r2, asr #28
     5cc:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     5d0:	04864005 	streq	r4, [r6], #5
     5d4:	40038740 	andmi	r8, r3, r0, asr #14
     5d8:	89400288 	stmdbhi	r0, {r3, r7, r9}^
     5dc:	00000001 	andeq	r0, r0, r1
     5e0:	00000018 	andeq	r0, r0, r8, lsl r0
     5e4:	0000032c 	andeq	r0, r0, ip, lsr #6
     5e8:	080015cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, ip}
     5ec:	00000058 	andeq	r0, r0, r8, asr r0
     5f0:	40080e41 	andmi	r0, r8, r1, asr #28
     5f4:	85400284 	strbhi	r0, [r0, #-644]	; 0x284
     5f8:	100e4201 	andne	r4, lr, r1, lsl #4
     5fc:	0000000c 	andeq	r0, r0, ip
     600:	0000032c 	andeq	r0, r0, ip, lsr #6
     604:	08001624 	stmdaeq	r0, {r2, r5, r9, sl, ip}
     608:	0000000c 	andeq	r0, r0, ip
     60c:	0000000c 	andeq	r0, r0, ip
     610:	0000032c 	andeq	r0, r0, ip, lsr #6
     614:	08001630 	stmdaeq	r0, {r4, r5, r9, sl, ip}
     618:	00000018 	andeq	r0, r0, r8, lsl r0
     61c:	0000000c 	andeq	r0, r0, ip
     620:	0000032c 	andeq	r0, r0, ip, lsr #6
     624:	08001648 	stmdaeq	r0, {r3, r6, r9, sl, ip}
     628:	00000012 	andeq	r0, r0, r2, lsl r0
     62c:	0000000c 	andeq	r0, r0, ip
     630:	0000032c 	andeq	r0, r0, ip, lsr #6
     634:	0800165c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, ip}
     638:	00000010 	andeq	r0, r0, r0, lsl r0
     63c:	0000000c 	andeq	r0, r0, ip
     640:	0000032c 	andeq	r0, r0, ip, lsr #6
     644:	0800166c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, ip}
     648:	00000018 	andeq	r0, r0, r8, lsl r0
     64c:	0000000c 	andeq	r0, r0, ip
     650:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     654:	7c020001 	stcvc	0, cr0, [r2], {1}
     658:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     65c:	00000030 	andeq	r0, r0, r0, lsr r0
     660:	0000064c 	andeq	r0, r0, ip, asr #12
     664:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
     668:	000000a0 	andeq	r0, r0, r0, lsr #1
     66c:	40280e42 	eormi	r0, r8, r2, asr #28
     670:	84400a83 	strbhi	r0, [r0], #-2691	; 0xa83
     674:	08854009 	stmeq	r5, {r0, r3, lr}
     678:	40078640 	andmi	r8, r7, r0, asr #12
     67c:	88400687 	stmdahi	r0, {r0, r1, r2, r7, r9, sl}^
     680:	04894005 	streq	r4, [r9], #5
     684:	40038a40 	andmi	r8, r3, r0, asr #20
     688:	8e40028b 	cdphi	2, 4, cr0, cr0, cr11, {4}
     68c:	00000001 	andeq	r0, r0, r1
     690:	00000028 	andeq	r0, r0, r8, lsr #32
     694:	0000064c 	andeq	r0, r0, ip, asr #12
     698:	08001724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip}
     69c:	000002d8 	ldrdeq	r0, [r0], -r8
     6a0:	401c0e43 	andsmi	r0, ip, r3, asr #28
     6a4:	85400784 	strbhi	r0, [r0, #-1924]	; 0x784
     6a8:	05864006 	streq	r4, [r6, #6]
     6ac:	40048740 	andmi	r8, r4, r0, asr #14
     6b0:	89400388 	stmdbhi	r0, {r3, r7, r8, r9}^
     6b4:	018e4002 	orreq	r4, lr, r2
     6b8:	00280e48 	eoreq	r0, r8, r8, asr #28
     6bc:	00000018 	andeq	r0, r0, r8, lsl r0
     6c0:	0000064c 	andeq	r0, r0, ip, asr #12
     6c4:	080019fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip}
     6c8:	00000044 	andeq	r0, r0, r4, asr #32
     6cc:	40080e41 	andmi	r0, r8, r1, asr #28
     6d0:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
     6d4:	00000001 	andeq	r0, r0, r1
     6d8:	0000000c 	andeq	r0, r0, ip
     6dc:	0000064c 	andeq	r0, r0, ip, asr #12
     6e0:	00000000 	andeq	r0, r0, r0
     6e4:	00000002 	andeq	r0, r0, r2
     6e8:	0000000c 	andeq	r0, r0, ip
     6ec:	0000064c 	andeq	r0, r0, ip, asr #12
     6f0:	08001a40 	stmdaeq	r0, {r6, r9, fp, ip}
     6f4:	00000018 	andeq	r0, r0, r8, lsl r0
     6f8:	0000000c 	andeq	r0, r0, ip
     6fc:	0000064c 	andeq	r0, r0, ip, asr #12
     700:	08001a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, ip}
     704:	00000018 	andeq	r0, r0, r8, lsl r0
     708:	00000014 	andeq	r0, r0, r4, lsl r0
     70c:	0000064c 	andeq	r0, r0, ip, asr #12
     710:	08001a70 	stmdaeq	r0, {r4, r5, r6, r9, fp, ip}
     714:	00000034 	andeq	r0, r0, r4, lsr r0
     718:	40040e41 	andmi	r0, r4, r1, asr #28
     71c:	00000184 	andeq	r0, r0, r4, lsl #3
     720:	0000000c 	andeq	r0, r0, ip
     724:	0000064c 	andeq	r0, r0, ip, asr #12
     728:	08001aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, ip}
     72c:	00000034 	andeq	r0, r0, r4, lsr r0
     730:	00000024 	andeq	r0, r0, r4, lsr #32
     734:	0000064c 	andeq	r0, r0, ip, asr #12
     738:	00000000 	andeq	r0, r0, r0
     73c:	0000006c 	andeq	r0, r0, ip, rrx
     740:	40180e42 	andsmi	r0, r8, r2, asr #28
     744:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     748:	04864005 	streq	r4, [r6], #5
     74c:	40038740 	andmi	r8, r3, r0, asr #14
     750:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     754:	00000001 	andeq	r0, r0, r1
     758:	0000000c 	andeq	r0, r0, ip
     75c:	0000064c 	andeq	r0, r0, ip, asr #12
     760:	00000000 	andeq	r0, r0, r0
     764:	0000000c 	andeq	r0, r0, ip
     768:	0000000c 	andeq	r0, r0, ip
     76c:	0000064c 	andeq	r0, r0, ip, asr #12
     770:	00000000 	andeq	r0, r0, r0
     774:	0000000c 	andeq	r0, r0, ip
     778:	0000000c 	andeq	r0, r0, ip
     77c:	0000064c 	andeq	r0, r0, ip, asr #12
     780:	08001ad8 	stmdaeq	r0, {r3, r4, r6, r7, r9, fp, ip}
     784:	0000000c 	andeq	r0, r0, ip
     788:	0000000c 	andeq	r0, r0, ip
     78c:	0000064c 	andeq	r0, r0, ip, asr #12
     790:	00000000 	andeq	r0, r0, r0
     794:	0000001c 	andeq	r0, r0, ip, lsl r0
     798:	0000000c 	andeq	r0, r0, ip
     79c:	0000064c 	andeq	r0, r0, ip, asr #12
     7a0:	08001ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, ip}
     7a4:	00000002 	andeq	r0, r0, r2
     7a8:	0000000c 	andeq	r0, r0, ip
     7ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     7b0:	7c020001 	stcvc	0, cr0, [r2], {1}
     7b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     7b8:	00000028 	andeq	r0, r0, r8, lsr #32
     7bc:	000007a8 	andeq	r0, r0, r8, lsr #15
     7c0:	00000000 	andeq	r0, r0, r0
     7c4:	00000228 	andeq	r0, r0, r8, lsr #4
     7c8:	40180e42 	andsmi	r0, r8, r2, asr #28
     7cc:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     7d0:	04864005 	streq	r4, [r6], #5
     7d4:	40038740 	andmi	r8, r3, r0, asr #14
     7d8:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     7dc:	d80e4201 	stmdale	lr, {r0, r9, lr}
     7e0:	00000002 	andeq	r0, r0, r2
     7e4:	0000000c 	andeq	r0, r0, ip
     7e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     7ec:	7c020001 	stcvc	0, cr0, [r2], {1}
     7f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     7f4:	00000024 	andeq	r0, r0, r4, lsr #32
     7f8:	000007e4 	andeq	r0, r0, r4, ror #15
     7fc:	08001ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, ip}
     800:	00000070 	andeq	r0, r0, r0, ror r0
     804:	40180e41 	andsmi	r0, r8, r1, asr #28
     808:	84400683 	strbhi	r0, [r0], #-1667	; 0x683
     80c:	04854005 	streq	r4, [r5], #5
     810:	40038640 	andmi	r8, r3, r0, asr #12
     814:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     818:	00000001 	andeq	r0, r0, r1
     81c:	00000020 	andeq	r0, r0, r0, lsr #32
     820:	000007e4 	andeq	r0, r0, r4, ror #15
     824:	08001b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip}
     828:	0000003a 	andeq	r0, r0, sl, lsr r0
     82c:	40100e41 	andsmi	r0, r0, r1, asr #28
     830:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     834:	02864003 	addeq	r4, r6, #3
     838:	41018e40 	tstmi	r1, r0, asr #28
     83c:	0000300e 	andeq	r3, r0, lr
     840:	00000024 	andeq	r0, r0, r4, lsr #32
     844:	000007e4 	andeq	r0, r0, r4, ror #15
     848:	08001b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, ip}
     84c:	0000005e 	andeq	r0, r0, lr, asr r0
     850:	40140e41 	andsmi	r0, r4, r1, asr #28
     854:	85400584 	strbhi	r0, [r0, #-1412]	; 0x584
     858:	03864004 	orreq	r4, r6, #4
     85c:	40028740 	andmi	r8, r2, r0, asr #14
     860:	0e44018e 	dvfeqd	f0, f4, #0.5
     864:	00000038 	andeq	r0, r0, r8, lsr r0
     868:	00000024 	andeq	r0, r0, r4, lsr #32
     86c:	000007e4 	andeq	r0, r0, r4, ror #15
     870:	08001bf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, fp, ip}
     874:	000000c8 	andeq	r0, r0, r8, asr #1
     878:	40180e42 	andsmi	r0, r8, r2, asr #28
     87c:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     880:	04864005 	streq	r4, [r6], #5
     884:	40038740 	andmi	r8, r3, r0, asr #14
     888:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     88c:	780e5301 	stmdavc	lr, {r0, r8, r9, ip, lr}
     890:	00000028 	andeq	r0, r0, r8, lsr #32
     894:	000007e4 	andeq	r0, r0, r4, ror #15
     898:	08001cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip}
     89c:	000000e0 	andeq	r0, r0, r0, ror #1
     8a0:	40180e42 	andsmi	r0, r8, r2, asr #28
     8a4:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     8a8:	04864005 	streq	r4, [r6], #5
     8ac:	40038740 	andmi	r8, r3, r0, asr #14
     8b0:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     8b4:	980e4201 	stmdals	lr, {r0, r9, lr}
     8b8:	00000002 	andeq	r0, r0, r2
     8bc:	00000020 	andeq	r0, r0, r0, lsr #32
     8c0:	000007e4 	andeq	r0, r0, r4, ror #15
     8c4:	08001d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, ip}
     8c8:	000000b4 	strheq	r0, [r0], -r4
     8cc:	40100e41 	andsmi	r0, r0, r1, asr #28
     8d0:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     8d4:	02864003 	addeq	r4, r6, #3
     8d8:	41018e40 	tstmi	r1, r0, asr #28
     8dc:	0001f00e 	andeq	pc, r1, lr
     8e0:	00000028 	andeq	r0, r0, r8, lsr #32
     8e4:	000007e4 	andeq	r0, r0, r4, ror #15
     8e8:	08001e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip}
     8ec:	00000084 	andeq	r0, r0, r4, lsl #1
     8f0:	40180e42 	andsmi	r0, r8, r2, asr #28
     8f4:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     8f8:	04864005 	streq	r4, [r6], #5
     8fc:	40038740 	andmi	r8, r3, r0, asr #14
     900:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     904:	980e4101 	stmdals	lr, {r0, r8, lr}
     908:	00000002 	andeq	r0, r0, r2
     90c:	0000000c 	andeq	r0, r0, ip
     910:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     914:	7c020001 	stcvc	0, cr0, [r2], {1}
     918:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     91c:	00000024 	andeq	r0, r0, r4, lsr #32
     920:	0000090c 	andeq	r0, r0, ip, lsl #18
     924:	00000000 	andeq	r0, r0, r0
     928:	0000007c 	andeq	r0, r0, ip, ror r0
     92c:	40140e41 	andsmi	r0, r4, r1, asr #28
     930:	85400584 	strbhi	r0, [r0, #-1412]	; 0x584
     934:	03864004 	orreq	r4, r6, #4
     938:	40028740 	andmi	r8, r2, r0, asr #14
     93c:	0e42018e 	dvfeqd	f0, f2, #0.5
     940:	00000298 	muleq	r0, r8, r2
     944:	00000028 	andeq	r0, r0, r8, lsr #32
     948:	0000090c 	andeq	r0, r0, ip, lsl #18
     94c:	08001ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, ip}
     950:	0000017c 	andeq	r0, r0, ip, ror r1
     954:	401c0e42 	andsmi	r0, ip, r2, asr #28
     958:	85400784 	strbhi	r0, [r0, #-1924]	; 0x784
     95c:	05864006 	streq	r4, [r6, #6]
     960:	40048740 	andmi	r8, r4, r0, asr #14
     964:	89400388 	stmdbhi	r0, {r3, r7, r8, r9}^
     968:	018e4002 	orreq	r4, lr, r2
     96c:	03c00e43 	biceq	r0, r0, #1072	; 0x430
     970:	0000000c 	andeq	r0, r0, ip
     974:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     978:	7c020001 	stcvc	0, cr0, [r2], {1}
     97c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     980:	00000014 	andeq	r0, r0, r4, lsl r0
     984:	00000970 	andeq	r0, r0, r0, ror r9
     988:	08002050 	stmdaeq	r0, {r4, r6, sp}
     98c:	0000001e 	andeq	r0, r0, lr, lsl r0
     990:	40040e41 	andmi	r0, r4, r1, asr #28
     994:	00000184 	andeq	r0, r0, r4, lsl #3
     998:	00000018 	andeq	r0, r0, r8, lsl r0
     99c:	00000970 	andeq	r0, r0, r0, ror r9
     9a0:	08002070 	stmdaeq	r0, {r4, r5, r6, sp}
     9a4:	0000006e 	andeq	r0, r0, lr, rrx
     9a8:	40040e41 	andmi	r0, r4, r1, asr #28
     9ac:	0e420184 	dvfeqd	f0, f2, f4
     9b0:	00000028 	andeq	r0, r0, r8, lsr #32
     9b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     9b8:	00000970 	andeq	r0, r0, r0, ror r9
     9bc:	080020e0 	stmdaeq	r0, {r5, r6, r7, sp}
     9c0:	0000009a 	muleq	r0, sl, r0
     9c4:	40100e44 	andsmi	r0, r0, r4, asr #28
     9c8:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     9cc:	02864003 	addeq	r4, r6, #3
     9d0:	00018740 	andeq	r8, r1, r0, asr #14
     9d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     9d8:	00000970 	andeq	r0, r0, r0, ror r9
     9dc:	0800217c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sp}
     9e0:	000000c2 	andeq	r0, r0, r2, asr #1
     9e4:	40100e41 	andsmi	r0, r0, r1, asr #28
     9e8:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     9ec:	02864003 	addeq	r4, r6, #3
     9f0:	00018740 	andeq	r8, r1, r0, asr #14
     9f4:	00000018 	andeq	r0, r0, r8, lsl r0
     9f8:	00000970 	andeq	r0, r0, r0, ror r9
     9fc:	08002240 	stmdaeq	r0, {r6, r9, sp}
     a00:	00000046 	andeq	r0, r0, r6, asr #32
     a04:	400c0e42 	andmi	r0, ip, r2, asr #28
     a08:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     a0c:	01864002 	orreq	r4, r6, r2
     a10:	00000018 	andeq	r0, r0, r8, lsl r0
     a14:	00000970 	andeq	r0, r0, r0, ror r9
     a18:	08002288 	stmdaeq	r0, {r3, r7, r9, sp}
     a1c:	0000004c 	andeq	r0, r0, ip, asr #32
     a20:	400c0e41 	andmi	r0, ip, r1, asr #28
     a24:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     a28:	01864002 	orreq	r4, r6, r2
     a2c:	00000014 	andeq	r0, r0, r4, lsl r0
     a30:	00000970 	andeq	r0, r0, r0, ror r9
     a34:	080022d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sp}
     a38:	00000046 	andeq	r0, r0, r6, asr #32
     a3c:	40040e41 	andmi	r0, r4, r1, asr #28
     a40:	00000184 	andeq	r0, r0, r4, lsl #3
     a44:	00000024 	andeq	r0, r0, r4, lsr #32
     a48:	00000970 	andeq	r0, r0, r0, ror r9
     a4c:	0800231c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sp}
     a50:	00000088 	andeq	r0, r0, r8, lsl #1
     a54:	40180e42 	andsmi	r0, r8, r2, asr #28
     a58:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     a5c:	04864005 	streq	r4, [r6], #5
     a60:	40038740 	andmi	r8, r3, r0, asr #14
     a64:	89400288 	stmdbhi	r0, {r3, r7, r9}^
     a68:	00000001 	andeq	r0, r0, r1
     a6c:	00000024 	andeq	r0, r0, r4, lsr #32
     a70:	00000970 	andeq	r0, r0, r0, ror r9
     a74:	00000000 	andeq	r0, r0, r0
     a78:	000000b8 	strheq	r0, [r0], -r8
     a7c:	40180e42 	andsmi	r0, r8, r2, asr #28
     a80:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     a84:	04864005 	streq	r4, [r6], #5
     a88:	40038740 	andmi	r8, r3, r0, asr #14
     a8c:	89400288 	stmdbhi	r0, {r3, r7, r9}^
     a90:	380e4401 	stmdacc	lr, {r0, sl, lr}
     a94:	00000018 	andeq	r0, r0, r8, lsl r0
     a98:	00000970 	andeq	r0, r0, r0, ror r9
     a9c:	00000000 	andeq	r0, r0, r0
     aa0:	00000040 	andeq	r0, r0, r0, asr #32
     aa4:	40080e42 	andmi	r0, r8, r2, asr #28
     aa8:	85400284 	strbhi	r0, [r0, #-644]	; 0x284
     aac:	00000001 	andeq	r0, r0, r1
     ab0:	0000002c 	andeq	r0, r0, ip, lsr #32
     ab4:	00000970 	andeq	r0, r0, r0, ror r9
     ab8:	080023a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sp}
     abc:	000005ea 	andeq	r0, r0, sl, ror #11
     ac0:	40200e42 	eormi	r0, r0, r2, asr #28
     ac4:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     ac8:	06864007 	streq	r4, [r6], r7
     acc:	40058740 	andmi	r8, r5, r0, asr #14
     ad0:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     ad4:	028a4003 	addeq	r4, sl, #3
     ad8:	42018b40 	andmi	r8, r1, #64, 22	; 0x10000
     adc:	0000400e 	andeq	r4, r0, lr
     ae0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ae4:	00000970 	andeq	r0, r0, r0, ror r9
     ae8:	00000000 	andeq	r0, r0, r0
     aec:	00000026 	andeq	r0, r0, r6, lsr #32
     af0:	400c0e41 	andmi	r0, ip, r1, asr #28
     af4:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     af8:	018e4002 	orreq	r4, lr, r2
     afc:	00300e41 	eorseq	r0, r0, r1, asr #28
     b00:	0000002c 	andeq	r0, r0, ip, lsr #32
     b04:	00000970 	andeq	r0, r0, r0, ror r9
     b08:	08002990 	stmdaeq	r0, {r4, r7, r8, fp, sp}
     b0c:	00000634 	andeq	r0, r0, r4, lsr r6
     b10:	40200e42 	eormi	r0, r0, r2, asr #28
     b14:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     b18:	06864007 	streq	r4, [r6], r7
     b1c:	40058740 	andmi	r8, r5, r0, asr #14
     b20:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     b24:	028a4003 	addeq	r4, sl, #3
     b28:	42018b40 	andmi	r8, r1, #64, 22	; 0x10000
     b2c:	0001b00e 	andeq	fp, r1, lr
     b30:	0000000c 	andeq	r0, r0, ip
     b34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b38:	7c020001 	stcvc	0, cr0, [r2], {1}
     b3c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b40:	00000014 	andeq	r0, r0, r4, lsl r0
     b44:	00000b30 	andeq	r0, r0, r0, lsr fp
     b48:	00000000 	andeq	r0, r0, r0
     b4c:	0000001e 	andeq	r0, r0, lr, lsl r0
     b50:	40040e41 	andmi	r0, r4, r1, asr #28
     b54:	00000184 	andeq	r0, r0, r4, lsl #3
     b58:	00000030 	andeq	r0, r0, r0, lsr r0
     b5c:	00000b30 	andeq	r0, r0, r0, lsr fp
     b60:	08002fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, sp}
     b64:	000001a0 	andeq	r0, r0, r0, lsr #3
     b68:	40240e42 	eormi	r0, r4, r2, asr #28
     b6c:	85400984 	strbhi	r0, [r0, #-2436]	; 0x984
     b70:	07864008 	streq	r4, [r6, r8]
     b74:	40068740 	andmi	r8, r6, r0, asr #14
     b78:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
     b7c:	038a4004 	orreq	r4, sl, #4
     b80:	40028b40 	andmi	r8, r2, r0, asr #22
     b84:	0e42018e 	dvfeqd	f0, f2, #0.5
     b88:	00000050 	andeq	r0, r0, r0, asr r0
     b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b90:	00000b30 	andeq	r0, r0, r0, lsr fp
     b94:	00000000 	andeq	r0, r0, r0
     b98:	0000002c 	andeq	r0, r0, ip, lsr #32
     b9c:	400c0e41 	andmi	r0, ip, r1, asr #28
     ba0:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     ba4:	018e4002 	orreq	r4, lr, r2
     ba8:	00300e41 	eorseq	r0, r0, r1, asr #28
     bac:	0000001c 	andeq	r0, r0, ip, lsl r0
     bb0:	00000b30 	andeq	r0, r0, r0, lsr fp
     bb4:	00000000 	andeq	r0, r0, r0
     bb8:	0000009a 	muleq	r0, sl, r0
     bbc:	40100e44 	andsmi	r0, r0, r4, asr #28
     bc0:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     bc4:	02864003 	addeq	r4, r6, #3
     bc8:	00018740 	andeq	r8, r1, r0, asr #14
     bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
     bd0:	00000b30 	andeq	r0, r0, r0, lsr fp
     bd4:	00000000 	andeq	r0, r0, r0
     bd8:	000000c2 	andeq	r0, r0, r2, asr #1
     bdc:	40100e41 	andsmi	r0, r0, r1, asr #28
     be0:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     be4:	02864003 	addeq	r4, r6, #3
     be8:	00018740 	andeq	r8, r1, r0, asr #14
     bec:	0000001c 	andeq	r0, r0, ip, lsl r0
     bf0:	00000b30 	andeq	r0, r0, r0, lsr fp
     bf4:	00000000 	andeq	r0, r0, r0
     bf8:	00000058 	andeq	r0, r0, r8, asr r0
     bfc:	400c0e41 	andmi	r0, ip, r1, asr #28
     c00:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     c04:	01864002 	orreq	r4, r6, r2
     c08:	00300e42 	eorseq	r0, r0, r2, asr #28
     c0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c10:	00000b30 	andeq	r0, r0, r0, lsr fp
     c14:	00000000 	andeq	r0, r0, r0
     c18:	0000008e 	andeq	r0, r0, lr, lsl #1
     c1c:	400c0e41 	andmi	r0, ip, r1, asr #28
     c20:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     c24:	01864002 	orreq	r4, r6, r2
     c28:	00300e42 	eorseq	r0, r0, r2, asr #28
     c2c:	00000030 	andeq	r0, r0, r0, lsr r0
     c30:	00000b30 	andeq	r0, r0, r0, lsr fp
     c34:	00000000 	andeq	r0, r0, r0
     c38:	0000013e 	andeq	r0, r0, lr, lsr r1
     c3c:	40240e42 	eormi	r0, r4, r2, asr #28
     c40:	85400984 	strbhi	r0, [r0, #-2436]	; 0x984
     c44:	07864008 	streq	r4, [r6, r8]
     c48:	40068740 	andmi	r8, r6, r0, asr #14
     c4c:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
     c50:	038a4004 	orreq	r4, sl, #4
     c54:	40028b40 	andmi	r8, r2, r0, asr #22
     c58:	0e42018e 	dvfeqd	f0, f2, #0.5
     c5c:	00000068 	andeq	r0, r0, r8, rrx
     c60:	00000024 	andeq	r0, r0, r4, lsr #32
     c64:	00000b30 	andeq	r0, r0, r0, lsr fp
     c68:	00000000 	andeq	r0, r0, r0
     c6c:	000000d2 	ldrdeq	r0, [r0], -r2
     c70:	40180e42 	andsmi	r0, r8, r2, asr #28
     c74:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     c78:	04864005 	streq	r4, [r6], #5
     c7c:	40038740 	andmi	r8, r3, r0, asr #14
     c80:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     c84:	580e4301 	stmdapl	lr, {r0, r8, r9, lr}
     c88:	0000000c 	andeq	r0, r0, ip
     c8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c90:	7c020001 	stcvc	0, cr0, [r2], {1}
     c94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c98:	00000020 	andeq	r0, r0, r0, lsr #32
     c9c:	00000c88 	andeq	r0, r0, r8, lsl #25
     ca0:	00000000 	andeq	r0, r0, r0
     ca4:	00000040 	andeq	r0, r0, r0, asr #32
     ca8:	40100e41 	andsmi	r0, r0, r1, asr #28
     cac:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     cb0:	02864003 	addeq	r4, r6, #3
     cb4:	42018e40 	andmi	r8, r1, #64, 28	; 0x400
     cb8:	0000500e 	andeq	r5, r0, lr
     cbc:	00000024 	andeq	r0, r0, r4, lsr #32
     cc0:	00000c88 	andeq	r0, r0, r8, lsl #25
     cc4:	00000000 	andeq	r0, r0, r0
     cc8:	000000d4 	ldrdeq	r0, [r0], -r4
     ccc:	40180e42 	andsmi	r0, r8, r2, asr #28
     cd0:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     cd4:	04864005 	streq	r4, [r6], #5
     cd8:	40038740 	andmi	r8, r3, r0, asr #14
     cdc:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     ce0:	780e4201 	stmdavc	lr, {r0, r9, lr}
     ce4:	0000000c 	andeq	r0, r0, ip
     ce8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     cec:	7c020001 	stcvc	0, cr0, [r2], {1}
     cf0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     cf4:	00000020 	andeq	r0, r0, r0, lsr #32
     cf8:	00000ce4 	andeq	r0, r0, r4, ror #25
     cfc:	08003164 	stmdaeq	r0, {r2, r5, r6, r8, ip, sp}
     d00:	00000058 	andeq	r0, r0, r8, asr r0
     d04:	40140e42 	andsmi	r0, r4, r2, asr #28
     d08:	85400584 	strbhi	r0, [r0, #-1412]	; 0x584
     d0c:	03864004 	orreq	r4, r6, #4
     d10:	40028740 	andmi	r8, r2, r0, asr #14
     d14:	00000188 	andeq	r0, r0, r8, lsl #3
     d18:	0000002c 	andeq	r0, r0, ip, lsr #32
     d1c:	00000ce4 	andeq	r0, r0, r4, ror #25
     d20:	080031bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, ip, sp}
     d24:	00001f64 	andeq	r1, r0, r4, ror #30
     d28:	40200e42 	eormi	r0, r0, r2, asr #28
     d2c:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     d30:	06864007 	streq	r4, [r6], r7
     d34:	40058740 	andmi	r8, r5, r0, asr #14
     d38:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     d3c:	028a4003 	addeq	r4, sl, #3
     d40:	41018b40 	tstmi	r1, r0, asr #22
     d44:	0001900e 	andeq	r9, r1, lr
     d48:	00000024 	andeq	r0, r0, r4, lsr #32
     d4c:	00000ce4 	andeq	r0, r0, r4, ror #25
     d50:	08005120 	stmdaeq	r0, {r5, r8, ip, lr}
     d54:	0000008e 	andeq	r0, r0, lr, lsl #1
     d58:	40180e42 	andsmi	r0, r8, r2, asr #28
     d5c:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     d60:	04864005 	streq	r4, [r6], #5
     d64:	40038740 	andmi	r8, r3, r0, asr #14
     d68:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     d6c:	00000001 	andeq	r0, r0, r1
     d70:	00000030 	andeq	r0, r0, r0, lsr r0
     d74:	00000ce4 	andeq	r0, r0, r4, ror #25
     d78:	080051b0 	stmdaeq	r0, {r4, r5, r7, r8, ip, lr}
     d7c:	00000218 	andeq	r0, r0, r8, lsl r2
     d80:	40240e42 	eormi	r0, r4, r2, asr #28
     d84:	85400984 	strbhi	r0, [r0, #-2436]	; 0x984
     d88:	07864008 	streq	r4, [r6, r8]
     d8c:	40068740 	andmi	r8, r6, r0, asr #14
     d90:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
     d94:	038a4004 	orreq	r4, sl, #4
     d98:	40028b40 	andmi	r8, r2, r0, asr #22
     d9c:	0e46018e 	dvfeqd	f0, f6, #0.5
     da0:	00000030 	andeq	r0, r0, r0, lsr r0
     da4:	0000000c 	andeq	r0, r0, ip
     da8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     dac:	7c020001 	stcvc	0, cr0, [r2], {1}
     db0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     db4:	0000002c 	andeq	r0, r0, ip, lsr #32
     db8:	00000da4 	andeq	r0, r0, r4, lsr #27
     dbc:	080053c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, lr}
     dc0:	00000494 	muleq	r0, r4, r4
     dc4:	40200e42 	eormi	r0, r0, r2, asr #28
     dc8:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     dcc:	06864007 	streq	r4, [r6], r7
     dd0:	40058740 	andmi	r8, r5, r0, asr #14
     dd4:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     dd8:	028a4003 	addeq	r4, sl, #3
     ddc:	41018b40 	tstmi	r1, r0, asr #22
     de0:	0003b00e 	andeq	fp, r3, lr
     de4:	0000002c 	andeq	r0, r0, ip, lsr #32
     de8:	00000da4 	andeq	r0, r0, r4, lsr #27
     dec:	0800585c 	stmdaeq	r0, {r2, r3, r4, r6, fp, ip, lr}
     df0:	00000088 	andeq	r0, r0, r8, lsl #1
     df4:	40200e42 	eormi	r0, r0, r2, asr #28
     df8:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     dfc:	06864007 	streq	r4, [r6], r7
     e00:	40058740 	andmi	r8, r5, r0, asr #14
     e04:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     e08:	028a4003 	addeq	r4, sl, #3
     e0c:	42018e40 	andmi	r8, r1, #64, 28	; 0x400
     e10:	0001a00e 	andeq	sl, r1, lr
     e14:	00000030 	andeq	r0, r0, r0, lsr r0
     e18:	00000da4 	andeq	r0, r0, r4, lsr #27
     e1c:	080058e4 	stmdaeq	r0, {r2, r5, r6, r7, fp, ip, lr}
     e20:	00000296 	muleq	r0, r6, r2
     e24:	40240e42 	eormi	r0, r4, r2, asr #28
     e28:	85400984 	strbhi	r0, [r0, #-2436]	; 0x984
     e2c:	07864008 	streq	r4, [r6, r8]
     e30:	40068740 	andmi	r8, r6, r0, asr #14
     e34:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
     e38:	038a4004 	orreq	r4, sl, #4
     e3c:	40028b40 	andmi	r8, r2, r0, asr #22
     e40:	0e42018e 	dvfeqd	f0, f2, #0.5
     e44:	00000190 	muleq	r0, r0, r1
     e48:	0000000c 	andeq	r0, r0, ip
     e4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e50:	7c020001 	stcvc	0, cr0, [r2], {1}
     e54:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e58:	00000028 	andeq	r0, r0, r8, lsr #32
     e5c:	00000e48 	andeq	r0, r0, r8, asr #28
     e60:	08005b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, ip, lr}
     e64:	000001a4 	andeq	r0, r0, r4, lsr #3
     e68:	40180e42 	andsmi	r0, r8, r2, asr #28
     e6c:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     e70:	04864005 	streq	r4, [r6], #5
     e74:	40038740 	andmi	r8, r3, r0, asr #14
     e78:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     e7c:	b00e4101 	andlt	r4, lr, r1, lsl #2
     e80:	00000003 	andeq	r0, r0, r3
     e84:	0000000c 	andeq	r0, r0, ip
     e88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e8c:	7c020001 	stcvc	0, cr0, [r2], {1}
     e90:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e94:	0000000c 	andeq	r0, r0, ip
     e98:	00000e84 	andeq	r0, r0, r4, lsl #29
     e9c:	00000000 	andeq	r0, r0, r0
     ea0:	0000000c 	andeq	r0, r0, ip
     ea4:	0000000c 	andeq	r0, r0, ip
     ea8:	00000e84 	andeq	r0, r0, r4, lsl #29
     eac:	00000000 	andeq	r0, r0, r0
     eb0:	0000000c 	andeq	r0, r0, ip
     eb4:	0000000c 	andeq	r0, r0, ip
     eb8:	00000e84 	andeq	r0, r0, r4, lsl #29
     ebc:	00000000 	andeq	r0, r0, r0
     ec0:	0000000c 	andeq	r0, r0, ip
     ec4:	0000000c 	andeq	r0, r0, ip
     ec8:	00000e84 	andeq	r0, r0, r4, lsl #29
     ecc:	00000000 	andeq	r0, r0, r0
     ed0:	0000000c 	andeq	r0, r0, ip
     ed4:	0000000c 	andeq	r0, r0, ip
     ed8:	00000e84 	andeq	r0, r0, r4, lsl #29
     edc:	00000000 	andeq	r0, r0, r0
     ee0:	0000000c 	andeq	r0, r0, ip
     ee4:	0000000c 	andeq	r0, r0, ip
     ee8:	00000e84 	andeq	r0, r0, r4, lsl #29
     eec:	00000000 	andeq	r0, r0, r0
     ef0:	0000000c 	andeq	r0, r0, ip
     ef4:	0000000c 	andeq	r0, r0, ip
     ef8:	00000e84 	andeq	r0, r0, r4, lsl #29
     efc:	00000000 	andeq	r0, r0, r0
     f00:	0000000c 	andeq	r0, r0, ip
     f04:	0000000c 	andeq	r0, r0, ip
     f08:	00000e84 	andeq	r0, r0, r4, lsl #29
     f0c:	00000000 	andeq	r0, r0, r0
     f10:	00000010 	andeq	r0, r0, r0, lsl r0
     f14:	0000000c 	andeq	r0, r0, ip
     f18:	00000e84 	andeq	r0, r0, r4, lsl #29
     f1c:	00000000 	andeq	r0, r0, r0
     f20:	0000000c 	andeq	r0, r0, ip
     f24:	0000000c 	andeq	r0, r0, ip
     f28:	00000e84 	andeq	r0, r0, r4, lsl #29
     f2c:	00000000 	andeq	r0, r0, r0
     f30:	0000000e 	andeq	r0, r0, lr
     f34:	0000000c 	andeq	r0, r0, ip
     f38:	00000e84 	andeq	r0, r0, r4, lsl #29
     f3c:	00000000 	andeq	r0, r0, r0
     f40:	00000010 	andeq	r0, r0, r0, lsl r0
     f44:	0000000c 	andeq	r0, r0, ip
     f48:	00000e84 	andeq	r0, r0, r4, lsl #29
     f4c:	00000000 	andeq	r0, r0, r0
     f50:	0000001c 	andeq	r0, r0, ip, lsl r0
     f54:	0000000c 	andeq	r0, r0, ip
     f58:	00000e84 	andeq	r0, r0, r4, lsl #29
     f5c:	00000000 	andeq	r0, r0, r0
     f60:	00000012 	andeq	r0, r0, r2, lsl r0
     f64:	0000000c 	andeq	r0, r0, ip
     f68:	00000e84 	andeq	r0, r0, r4, lsl #29
     f6c:	08005d20 	stmdaeq	r0, {r5, r8, sl, fp, ip, lr}
     f70:	0000002a 	andeq	r0, r0, sl, lsr #32
     f74:	0000000c 	andeq	r0, r0, ip
     f78:	00000e84 	andeq	r0, r0, r4, lsl #29
     f7c:	00000000 	andeq	r0, r0, r0
     f80:	0000002a 	andeq	r0, r0, sl, lsr #32
     f84:	0000000c 	andeq	r0, r0, ip
     f88:	00000e84 	andeq	r0, r0, r4, lsl #29
     f8c:	00000000 	andeq	r0, r0, r0
     f90:	00000024 	andeq	r0, r0, r4, lsr #32
     f94:	0000000c 	andeq	r0, r0, ip
     f98:	00000e84 	andeq	r0, r0, r4, lsl #29
     f9c:	00000000 	andeq	r0, r0, r0
     fa0:	00000012 	andeq	r0, r0, r2, lsl r0
     fa4:	0000000c 	andeq	r0, r0, ip
     fa8:	00000e84 	andeq	r0, r0, r4, lsl #29
     fac:	00000000 	andeq	r0, r0, r0
     fb0:	00000012 	andeq	r0, r0, r2, lsl r0
     fb4:	0000000c 	andeq	r0, r0, ip
     fb8:	00000e84 	andeq	r0, r0, r4, lsl #29
     fbc:	00000000 	andeq	r0, r0, r0
     fc0:	0000001e 	andeq	r0, r0, lr, lsl r0
     fc4:	0000000c 	andeq	r0, r0, ip
     fc8:	00000e84 	andeq	r0, r0, r4, lsl #29
     fcc:	08005d4a 	stmdaeq	r0, {r1, r3, r6, r8, sl, fp, ip, lr}
     fd0:	0000001e 	andeq	r0, r0, lr, lsl r0
     fd4:	0000000c 	andeq	r0, r0, ip
     fd8:	00000e84 	andeq	r0, r0, r4, lsl #29
     fdc:	00000000 	andeq	r0, r0, r0
     fe0:	0000001e 	andeq	r0, r0, lr, lsl r0
     fe4:	0000000c 	andeq	r0, r0, ip
     fe8:	00000e84 	andeq	r0, r0, r4, lsl #29
     fec:	00000000 	andeq	r0, r0, r0
     ff0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ff4:	0000000c 	andeq	r0, r0, ip
     ff8:	00000e84 	andeq	r0, r0, r4, lsl #29
     ffc:	08005d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip, lr}
    1000:	0000001c 	andeq	r0, r0, ip, lsl r0
    1004:	0000000c 	andeq	r0, r0, ip
    1008:	00000e84 	andeq	r0, r0, r4, lsl #29
    100c:	00000000 	andeq	r0, r0, r0
    1010:	0000001e 	andeq	r0, r0, lr, lsl r0
    1014:	0000000c 	andeq	r0, r0, ip
    1018:	00000e84 	andeq	r0, r0, r4, lsl #29
    101c:	00000000 	andeq	r0, r0, r0
    1020:	0000001e 	andeq	r0, r0, lr, lsl r0
    1024:	0000000c 	andeq	r0, r0, ip
    1028:	00000e84 	andeq	r0, r0, r4, lsl #29
    102c:	00000000 	andeq	r0, r0, r0
    1030:	0000001c 	andeq	r0, r0, ip, lsl r0
    1034:	0000000c 	andeq	r0, r0, ip
    1038:	00000e84 	andeq	r0, r0, r4, lsl #29
    103c:	00000000 	andeq	r0, r0, r0
    1040:	0000001a 	andeq	r0, r0, sl, lsl r0
    1044:	0000000c 	andeq	r0, r0, ip
    1048:	00000e84 	andeq	r0, r0, r4, lsl #29
    104c:	00000000 	andeq	r0, r0, r0
    1050:	0000001a 	andeq	r0, r0, sl, lsl r0
    1054:	0000000c 	andeq	r0, r0, ip
    1058:	00000e84 	andeq	r0, r0, r4, lsl #29
    105c:	00000000 	andeq	r0, r0, r0
    1060:	00000018 	andeq	r0, r0, r8, lsl r0
    1064:	0000000c 	andeq	r0, r0, ip
    1068:	00000e84 	andeq	r0, r0, r4, lsl #29
    106c:	00000000 	andeq	r0, r0, r0
    1070:	0000001c 	andeq	r0, r0, ip, lsl r0
    1074:	0000000c 	andeq	r0, r0, ip
    1078:	00000e84 	andeq	r0, r0, r4, lsl #29
    107c:	00000000 	andeq	r0, r0, r0
    1080:	00000020 	andeq	r0, r0, r0, lsr #32
    1084:	0000000c 	andeq	r0, r0, ip
    1088:	00000e84 	andeq	r0, r0, r4, lsl #29
    108c:	00000000 	andeq	r0, r0, r0
    1090:	00000020 	andeq	r0, r0, r0, lsr #32
    1094:	0000000c 	andeq	r0, r0, ip
    1098:	00000e84 	andeq	r0, r0, r4, lsl #29
    109c:	08005d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, ip, lr}
    10a0:	00000020 	andeq	r0, r0, r0, lsr #32
    10a4:	0000000c 	andeq	r0, r0, ip
    10a8:	00000e84 	andeq	r0, r0, r4, lsl #29
    10ac:	08005da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp, ip, lr}
    10b0:	00000020 	andeq	r0, r0, r0, lsr #32
    10b4:	0000000c 	andeq	r0, r0, ip
    10b8:	00000e84 	andeq	r0, r0, r4, lsl #29
    10bc:	00000000 	andeq	r0, r0, r0
    10c0:	0000001e 	andeq	r0, r0, lr, lsl r0
    10c4:	0000000c 	andeq	r0, r0, ip
    10c8:	00000e84 	andeq	r0, r0, r4, lsl #29
    10cc:	00000000 	andeq	r0, r0, r0
    10d0:	00000012 	andeq	r0, r0, r2, lsl r0
    10d4:	0000000c 	andeq	r0, r0, ip
    10d8:	00000e84 	andeq	r0, r0, r4, lsl #29
    10dc:	00000000 	andeq	r0, r0, r0
    10e0:	00000020 	andeq	r0, r0, r0, lsr #32
    10e4:	0000000c 	andeq	r0, r0, ip
    10e8:	00000e84 	andeq	r0, r0, r4, lsl #29
    10ec:	00000000 	andeq	r0, r0, r0
    10f0:	00000020 	andeq	r0, r0, r0, lsr #32
    10f4:	0000000c 	andeq	r0, r0, ip
    10f8:	00000e84 	andeq	r0, r0, r4, lsl #29
    10fc:	08005dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp, ip, lr}
    1100:	0000001c 	andeq	r0, r0, ip, lsl r0
    1104:	0000000c 	andeq	r0, r0, ip
    1108:	00000e84 	andeq	r0, r0, r4, lsl #29
    110c:	08005de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, ip, lr}
    1110:	0000001c 	andeq	r0, r0, ip, lsl r0
    1114:	0000000c 	andeq	r0, r0, ip
    1118:	00000e84 	andeq	r0, r0, r4, lsl #29
    111c:	08005dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr}
    1120:	0000001c 	andeq	r0, r0, ip, lsl r0
    1124:	0000000c 	andeq	r0, r0, ip
    1128:	00000e84 	andeq	r0, r0, r4, lsl #29
    112c:	00000000 	andeq	r0, r0, r0
    1130:	00000026 	andeq	r0, r0, r6, lsr #32
    1134:	0000000c 	andeq	r0, r0, ip
    1138:	00000e84 	andeq	r0, r0, r4, lsl #29
    113c:	08005e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, ip, lr}
    1140:	00000040 	andeq	r0, r0, r0, asr #32
    1144:	0000000c 	andeq	r0, r0, ip
    1148:	00000e84 	andeq	r0, r0, r4, lsl #29
    114c:	00000000 	andeq	r0, r0, r0
    1150:	00000020 	andeq	r0, r0, r0, lsr #32
    1154:	0000000c 	andeq	r0, r0, ip
    1158:	00000e84 	andeq	r0, r0, r4, lsl #29
    115c:	00000000 	andeq	r0, r0, r0
    1160:	00000020 	andeq	r0, r0, r0, lsr #32
    1164:	00000018 	andeq	r0, r0, r8, lsl r0
    1168:	00000e84 	andeq	r0, r0, r4, lsl #29
    116c:	00000000 	andeq	r0, r0, r0
    1170:	00000038 	andeq	r0, r0, r8, lsr r0
    1174:	40080e41 	andmi	r0, r8, r1, asr #28
    1178:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    117c:	00000001 	andeq	r0, r0, r1
    1180:	0000000c 	andeq	r0, r0, ip
    1184:	00000e84 	andeq	r0, r0, r4, lsl #29
    1188:	00000000 	andeq	r0, r0, r0
    118c:	00000020 	andeq	r0, r0, r0, lsr #32
    1190:	0000000c 	andeq	r0, r0, ip
    1194:	00000e84 	andeq	r0, r0, r4, lsl #29
    1198:	00000000 	andeq	r0, r0, r0
    119c:	00000020 	andeq	r0, r0, r0, lsr #32
    11a0:	0000000c 	andeq	r0, r0, ip
    11a4:	00000e84 	andeq	r0, r0, r4, lsl #29
    11a8:	00000000 	andeq	r0, r0, r0
    11ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    11b0:	0000000c 	andeq	r0, r0, ip
    11b4:	00000e84 	andeq	r0, r0, r4, lsl #29
    11b8:	00000000 	andeq	r0, r0, r0
    11bc:	0000001c 	andeq	r0, r0, ip, lsl r0
    11c0:	00000018 	andeq	r0, r0, r8, lsl r0
    11c4:	00000e84 	andeq	r0, r0, r4, lsl #29
    11c8:	00000000 	andeq	r0, r0, r0
    11cc:	000000a8 	andeq	r0, r0, r8, lsr #1
    11d0:	40080e42 	andmi	r0, r8, r2, asr #28
    11d4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    11d8:	00000001 	andeq	r0, r0, r1
    11dc:	0000000c 	andeq	r0, r0, ip
    11e0:	00000e84 	andeq	r0, r0, r4, lsl #29
    11e4:	00000000 	andeq	r0, r0, r0
    11e8:	0000005c 	andeq	r0, r0, ip, asr r0
    11ec:	0000000c 	andeq	r0, r0, ip
    11f0:	00000e84 	andeq	r0, r0, r4, lsl #29
    11f4:	00000000 	andeq	r0, r0, r0
    11f8:	0000005c 	andeq	r0, r0, ip, asr r0
    11fc:	0000000c 	andeq	r0, r0, ip
    1200:	00000e84 	andeq	r0, r0, r4, lsl #29
    1204:	00000000 	andeq	r0, r0, r0
    1208:	00000020 	andeq	r0, r0, r0, lsr #32
    120c:	0000000c 	andeq	r0, r0, ip
    1210:	00000e84 	andeq	r0, r0, r4, lsl #29
    1214:	00000000 	andeq	r0, r0, r0
    1218:	00000020 	andeq	r0, r0, r0, lsr #32
    121c:	0000000c 	andeq	r0, r0, ip
    1220:	00000e84 	andeq	r0, r0, r4, lsl #29
    1224:	00000000 	andeq	r0, r0, r0
    1228:	00000044 	andeq	r0, r0, r4, asr #32
    122c:	0000000c 	andeq	r0, r0, ip
    1230:	00000e84 	andeq	r0, r0, r4, lsl #29
    1234:	00000000 	andeq	r0, r0, r0
    1238:	0000003a 	andeq	r0, r0, sl, lsr r0
    123c:	0000000c 	andeq	r0, r0, ip
    1240:	00000e84 	andeq	r0, r0, r4, lsl #29
    1244:	00000000 	andeq	r0, r0, r0
    1248:	00000006 	andeq	r0, r0, r6
    124c:	0000000c 	andeq	r0, r0, ip
    1250:	00000e84 	andeq	r0, r0, r4, lsl #29
    1254:	00000000 	andeq	r0, r0, r0
    1258:	0000000a 	andeq	r0, r0, sl
    125c:	0000000c 	andeq	r0, r0, ip
    1260:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1264:	7c020001 	stcvc	0, cr0, [r2], {1}
    1268:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    126c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1270:	0000125c 	andeq	r1, r0, ip, asr r2
    1274:	08005e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip, lr}
    1278:	00000154 	andeq	r0, r0, r4, asr r1
    127c:	40100e41 	andsmi	r0, r0, r1, asr #28
    1280:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
    1284:	02864003 	addeq	r4, r6, #3
    1288:	00018e40 	andeq	r8, r1, r0, asr #28
    128c:	00000018 	andeq	r0, r0, r8, lsl r0
    1290:	0000125c 	andeq	r1, r0, ip, asr r2
    1294:	00000000 	andeq	r0, r0, r0
    1298:	00000070 	andeq	r0, r0, r0, ror r0
    129c:	40080e41 	andmi	r0, r8, r1, asr #28
    12a0:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
    12a4:	00000001 	andeq	r0, r0, r1
    12a8:	0000000c 	andeq	r0, r0, ip
    12ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12b0:	7c020001 	stcvc	0, cr0, [r2], {1}
    12b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12b8:	00000018 	andeq	r0, r0, r8, lsl r0
    12bc:	000012a8 	andeq	r1, r0, r8, lsr #5
    12c0:	08005fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, ip, lr}
    12c4:	00000038 	andeq	r0, r0, r8, lsr r0
    12c8:	40080e41 	andmi	r0, r8, r1, asr #28
    12cc:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
    12d0:	00000001 	andeq	r0, r0, r1
    12d4:	0000000c 	andeq	r0, r0, ip
    12d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12dc:	7c020001 	stcvc	0, cr0, [r2], {1}
    12e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12e4:	00000018 	andeq	r0, r0, r8, lsl r0
    12e8:	000012d4 	ldrdeq	r1, [r0], -r4
    12ec:	08005fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    12f0:	00000024 	andeq	r0, r0, r4, lsr #32
    12f4:	40080e41 	andmi	r0, r8, r1, asr #28
    12f8:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    12fc:	00000001 	andeq	r0, r0, r1
    1300:	00000018 	andeq	r0, r0, r8, lsl r0
    1304:	000012d4 	ldrdeq	r1, [r0], -r4
    1308:	08006008 	stmdaeq	r0, {r3, sp, lr}
    130c:	00000024 	andeq	r0, r0, r4, lsr #32
    1310:	40080e41 	andmi	r0, r8, r1, asr #28
    1314:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    1318:	00000001 	andeq	r0, r0, r1
    131c:	00000018 	andeq	r0, r0, r8, lsl r0
    1320:	000012d4 	ldrdeq	r1, [r0], -r4
    1324:	0800602c 	stmdaeq	r0, {r2, r3, r5, sp, lr}
    1328:	00000090 	muleq	r0, r0, r0
    132c:	40080e41 	andmi	r0, r8, r1, asr #28
    1330:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    1334:	00000001 	andeq	r0, r0, r1
    1338:	00000028 	andeq	r0, r0, r8, lsr #32
    133c:	000012d4 	ldrdeq	r1, [r0], -r4
    1340:	080060bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sp, lr}
    1344:	000000a8 	andeq	r0, r0, r8, lsr #1
    1348:	40200e43 	eormi	r0, r0, r3, asr #28
    134c:	84400883 	strbhi	r0, [r0], #-2179	; 0x883
    1350:	06854007 	streq	r4, [r5], r7
    1354:	40058640 	andmi	r8, r5, r0, asr #12
    1358:	88400487 	stmdahi	r0, {r0, r1, r2, r7, sl}^
    135c:	02894003 	addeq	r4, r9, #3
    1360:	00018e40 	andeq	r8, r1, r0, asr #28
    1364:	00000018 	andeq	r0, r0, r8, lsl r0
    1368:	000012d4 	ldrdeq	r1, [r0], -r4
    136c:	08006164 	stmdaeq	r0, {r2, r5, r6, r8, sp, lr}
    1370:	00000038 	andeq	r0, r0, r8, lsr r0
    1374:	40080e41 	andmi	r0, r8, r1, asr #28
    1378:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    137c:	00000001 	andeq	r0, r0, r1
    1380:	0000001c 	andeq	r0, r0, ip, lsl r0
    1384:	000012d4 	ldrdeq	r1, [r0], -r4
    1388:	0800619c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sp, lr}
    138c:	00000048 	andeq	r0, r0, r8, asr #32
    1390:	40100e41 	andsmi	r0, r0, r1, asr #28
    1394:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
    1398:	02854003 	addeq	r4, r5, #3
    139c:	00018e40 	andeq	r8, r1, r0, asr #28
    13a0:	0000001c 	andeq	r0, r0, ip, lsl r0
    13a4:	000012d4 	ldrdeq	r1, [r0], -r4
    13a8:	080061e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sp, lr}
    13ac:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    13b0:	40100e41 	andsmi	r0, r0, r1, asr #28
    13b4:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
    13b8:	02854003 	addeq	r4, r5, #3
    13bc:	00018e40 	andeq	r8, r1, r0, asr #28
    13c0:	0000001c 	andeq	r0, r0, ip, lsl r0
    13c4:	000012d4 	ldrdeq	r1, [r0], -r4
    13c8:	080062b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp, lr}
    13cc:	00000084 	andeq	r0, r0, r4, lsl #1
    13d0:	40100e41 	andsmi	r0, r0, r1, asr #28
    13d4:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
    13d8:	02854003 	addeq	r4, r5, #3
    13dc:	00018e40 	andeq	r8, r1, r0, asr #28
    13e0:	00000018 	andeq	r0, r0, r8, lsl r0
    13e4:	000012d4 	ldrdeq	r1, [r0], -r4
    13e8:	08006338 	stmdaeq	r0, {r3, r4, r5, r8, r9, sp, lr}
    13ec:	00000024 	andeq	r0, r0, r4, lsr #32
    13f0:	40080e41 	andmi	r0, r8, r1, asr #28
    13f4:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
    13f8:	00000001 	andeq	r0, r0, r1
    13fc:	0000000c 	andeq	r0, r0, ip
    1400:	000012d4 	ldrdeq	r1, [r0], -r4
    1404:	0800635c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sp, lr}
    1408:	0000001c 	andeq	r0, r0, ip, lsl r0
    140c:	00000018 	andeq	r0, r0, r8, lsl r0
    1410:	000012d4 	ldrdeq	r1, [r0], -r4
    1414:	08006378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sp, lr}
    1418:	00000040 	andeq	r0, r0, r0, asr #32
    141c:	40080e41 	andmi	r0, r8, r1, asr #28
    1420:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
    1424:	00000001 	andeq	r0, r0, r1
    1428:	00000024 	andeq	r0, r0, r4, lsr #32
    142c:	000012d4 	ldrdeq	r1, [r0], -r4
    1430:	080063b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sp, lr}
    1434:	000002dc 	ldrdeq	r0, [r0], -ip
    1438:	40180e41 	andsmi	r0, r8, r1, asr #28
    143c:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
    1440:	04844005 	streq	r4, [r4], #5
    1444:	40038540 	andmi	r8, r3, r0, asr #10
    1448:	8e400286 	cdphi	2, 4, cr0, cr0, cr6, {4}
    144c:	00000001 	andeq	r0, r0, r1
    1450:	00000024 	andeq	r0, r0, r4, lsr #32
    1454:	000012d4 	ldrdeq	r1, [r0], -r4
    1458:	08006694 	stmdaeq	r0, {r2, r4, r7, r9, sl, sp, lr}
    145c:	000000c8 	andeq	r0, r0, r8, asr #1
    1460:	40180e41 	andsmi	r0, r8, r1, asr #28
    1464:	84400683 	strbhi	r0, [r0], #-1667	; 0x683
    1468:	04854005 	streq	r4, [r5], #5
    146c:	40038640 	andmi	r8, r3, r0, asr #12
    1470:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    1474:	00000001 	andeq	r0, r0, r1
    1478:	00000018 	andeq	r0, r0, r8, lsl r0
    147c:	000012d4 	ldrdeq	r1, [r0], -r4
    1480:	0800675c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, sp, lr}
    1484:	00000038 	andeq	r0, r0, r8, lsr r0
    1488:	400c0e41 	andmi	r0, ip, r1, asr #28
    148c:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
    1490:	018e4002 	orreq	r4, lr, r2
    1494:	00000018 	andeq	r0, r0, r8, lsl r0
    1498:	000012d4 	ldrdeq	r1, [r0], -r4
    149c:	08006794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp, lr}
    14a0:	0000005c 	andeq	r0, r0, ip, asr r0
    14a4:	40080e41 	andmi	r0, r8, r1, asr #28
    14a8:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    14ac:	00000001 	andeq	r0, r0, r1
    14b0:	0000000c 	andeq	r0, r0, ip
    14b4:	000012d4 	ldrdeq	r1, [r0], -r4
    14b8:	00000000 	andeq	r0, r0, r0
    14bc:	00000002 	andeq	r0, r0, r2
    14c0:	0000000c 	andeq	r0, r0, ip
    14c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    14c8:	7c020001 	stcvc	0, cr0, [r2], {1}
    14cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14d0:	00000018 	andeq	r0, r0, r8, lsl r0
    14d4:	000014c0 	andeq	r1, r0, r0, asr #9
    14d8:	080067f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp, lr}
    14dc:	00000030 	andeq	r0, r0, r0, lsr r0
    14e0:	400c0e41 	andmi	r0, ip, r1, asr #28
    14e4:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
    14e8:	018e4002 	orreq	r4, lr, r2
    14ec:	00000018 	andeq	r0, r0, r8, lsl r0
    14f0:	000014c0 	andeq	r1, r0, r0, asr #9
    14f4:	08006820 	stmdaeq	r0, {r5, fp, sp, lr}
    14f8:	00000024 	andeq	r0, r0, r4, lsr #32
    14fc:	40080e41 	andmi	r0, r8, r1, asr #28
    1500:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    1504:	00000001 	andeq	r0, r0, r1
    1508:	0000000c 	andeq	r0, r0, ip
    150c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1510:	7c020001 	stcvc	0, cr0, [r2], {1}
    1514:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1518:	00000014 	andeq	r0, r0, r4, lsl r0
    151c:	00001508 	andeq	r1, r0, r8, lsl #10
    1520:	08006844 	stmdaeq	r0, {r2, r6, fp, sp, lr}
    1524:	00000012 	andeq	r0, r0, r2, lsl r0
    1528:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    152c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1530:	0000000c 	andeq	r0, r0, ip
    1534:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1538:	7c020001 	stcvc	0, cr0, [r2], {1}
    153c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1540:	0000000c 	andeq	r0, r0, ip
    1544:	00001530 	andeq	r1, r0, r0, lsr r5
    1548:	08006856 	stmdaeq	r0, {r1, r2, r4, r6, fp, sp, lr}
    154c:	00000010 	andeq	r0, r0, r0, lsl r0
    1550:	0000000c 	andeq	r0, r0, ip
    1554:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1558:	7c020001 	stcvc	0, cr0, [r2], {1}
    155c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1560:	00000020 	andeq	r0, r0, r0, lsr #32
    1564:	00001550 	andeq	r1, r0, r0, asr r5
    1568:	00000000 	andeq	r0, r0, r0
    156c:	00000040 	andeq	r0, r0, r0, asr #32
    1570:	82080e41 	andhi	r0, r8, #1040	; 0x410
    1574:	41018302 	tstmi	r1, r2, lsl #6
    1578:	0484100e 	streq	r1, [r4], #14
    157c:	0e41038e 	cdpeq	3, 4, cr0, cr1, cr14, {4}
    1580:	00000180 	andeq	r0, r0, r0, lsl #3
    1584:	00000020 	andeq	r0, r0, r0, lsr #32
    1588:	00001550 	andeq	r1, r0, r0, asr r5
    158c:	08006868 	stmdaeq	r0, {r3, r5, r6, fp, sp, lr}
    1590:	00000048 	andeq	r0, r0, r8, asr #32
    1594:	810c0e41 	tsthi	ip, r1, asr #28
    1598:	83028203 	movwhi	r8, #8707	; 0x2203
    159c:	100e4101 	andne	r4, lr, r1, lsl #2
    15a0:	0e43048e 	cdpeq	4, 4, cr0, cr3, cr14, {4}
    15a4:	00000180 	andeq	r0, r0, r0, lsl #3
    15a8:	0000000c 	andeq	r0, r0, ip
    15ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    15b0:	7c020001 	stcvc	0, cr0, [r2], {1}
    15b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    15b8:	00000020 	andeq	r0, r0, r0, lsr #32
    15bc:	000015a8 	andeq	r1, r0, r8, lsr #11
    15c0:	080068b0 	stmdaeq	r0, {r4, r5, r7, fp, sp, lr}
    15c4:	000000b8 	strheq	r0, [r0], -r8
    15c8:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
    15cc:	86078508 	strhi	r8, [r7], -r8, lsl #10
    15d0:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    15d4:	8a038904 	bhi	e39ec <__Stack_Size+0xe31ec>
    15d8:	00018e02 	andeq	r8, r1, r2, lsl #28
    15dc:	00000028 	andeq	r0, r0, r8, lsr #32
    15e0:	000015a8 	andeq	r1, r0, r8, lsr #11
    15e4:	00000000 	andeq	r0, r0, r0
    15e8:	000000f2 	strdeq	r0, [r0], -r2
    15ec:	80300e42 	eorshi	r0, r0, r2, asr #28
    15f0:	820b810c 	andhi	r8, fp, #12, 2
    15f4:	8509840a 	strhi	r8, [r9, #-1034]	; 0x40a
    15f8:	87078608 	strhi	r8, [r7, -r8, lsl #12]
    15fc:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
    1600:	8b038a04 	blhi	e3e18 <__Stack_Size+0xe3618>
    1604:	00018e02 	andeq	r8, r1, r2, lsl #28
    1608:	00000024 	andeq	r0, r0, r4, lsr #32
    160c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1610:	08006968 	stmdaeq	r0, {r3, r5, r6, r8, fp, sp, lr}
    1614:	000001d8 	ldrdeq	r0, [r0], -r8
    1618:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
    161c:	86068507 	strhi	r8, [r6], -r7, lsl #10
    1620:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    1624:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    1628:	900e4101 	andls	r4, lr, r1, lsl #2
    162c:	00000001 	andeq	r0, r0, r1
    1630:	0000000c 	andeq	r0, r0, ip
    1634:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1638:	7c020001 	stcvc	0, cr0, [r2], {1}
    163c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1640:	00000020 	andeq	r0, r0, r0, lsr #32
    1644:	00001630 	andeq	r1, r0, r0, lsr r6
    1648:	08006b40 	stmdaeq	r0, {r6, r8, r9, fp, sp, lr}
    164c:	000000e4 	andeq	r0, r0, r4, ror #1
    1650:	83200e42 	teqhi	r0, #1056	; 0x420
    1654:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
    1658:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    165c:	89038804 	stmdbhi	r3, {r2, fp, pc}
    1660:	00018e02 	andeq	r8, r1, r2, lsl #28
    1664:	00000028 	andeq	r0, r0, r8, lsr #32
    1668:	00001630 	andeq	r1, r0, r0, lsr r6
    166c:	08006c24 	stmdaeq	r0, {r2, r5, sl, fp, sp, lr}
    1670:	00000228 	andeq	r0, r0, r8, lsr #4
    1674:	80300e42 	eorshi	r0, r0, r2, asr #28
    1678:	820b810c 	andhi	r8, fp, #12, 2
    167c:	8409830a 	strhi	r8, [r9], #-778	; 0x30a
    1680:	86078508 	strhi	r8, [r7], -r8, lsl #10
    1684:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    1688:	8a038904 	bhi	e3aa0 <__Stack_Size+0xe32a0>
    168c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1690:	0000000c 	andeq	r0, r0, ip
    1694:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1698:	7c020001 	stcvc	0, cr0, [r2], {1}
    169c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16a0:	00000018 	andeq	r0, r0, r8, lsl r0
    16a4:	00001690 	muleq	r0, r0, r6
    16a8:	08006e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp, sp, lr}
    16ac:	00000030 	andeq	r0, r0, r0, lsr r0
    16b0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    16b4:	41018e02 	tstmi	r1, r2, lsl #28
    16b8:	0000700e 	andeq	r7, r0, lr
    16bc:	00000018 	andeq	r0, r0, r8, lsl r0
    16c0:	00001690 	muleq	r0, r0, r6
    16c4:	08006e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, sp, lr}
    16c8:	0000001c 	andeq	r0, r0, ip, lsl r0
    16cc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    16d0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    16d4:	00000001 	andeq	r0, r0, r1
    16d8:	0000000c 	andeq	r0, r0, ip
    16dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    16e0:	7c020001 	stcvc	0, cr0, [r2], {1}
    16e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16e8:	00000014 	andeq	r0, r0, r4, lsl r0
    16ec:	000016d8 	ldrdeq	r1, [r0], -r8
    16f0:	08006e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, sp, lr}
    16f4:	0000001c 	andeq	r0, r0, ip, lsl r0
    16f8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    16fc:	00018e02 	andeq	r8, r1, r2, lsl #28
    1700:	0000000c 	andeq	r0, r0, ip
    1704:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1708:	7c020001 	stcvc	0, cr0, [r2], {1}
    170c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1710:	00000018 	andeq	r0, r0, r8, lsl r0
    1714:	00001700 	andeq	r1, r0, r0, lsl #14
    1718:	08006eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, sp, lr}
    171c:	00000036 	andeq	r0, r0, r6, lsr r0
    1720:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    1724:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1728:	00018e02 	andeq	r8, r1, r2, lsl #28
    172c:	0000000c 	andeq	r0, r0, ip
    1730:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1734:	7c020001 	stcvc	0, cr0, [r2], {1}
    1738:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    173c:	00000018 	andeq	r0, r0, r8, lsl r0
    1740:	0000172c 	andeq	r1, r0, ip, lsr #14
    1744:	08006eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, sp, lr}
    1748:	00000088 	andeq	r0, r0, r8, lsl #1
    174c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    1750:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1754:	00000001 	andeq	r0, r0, r1
    1758:	0000000c 	andeq	r0, r0, ip
    175c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1760:	7c020001 	stcvc	0, cr0, [r2], {1}
    1764:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1768:	00000018 	andeq	r0, r0, r8, lsl r0
    176c:	00001758 	andeq	r1, r0, r8, asr r7
    1770:	08006f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}
    1774:	000000a8 	andeq	r0, r0, r8, lsr #1
    1778:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
    177c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1780:	00018e02 	andeq	r8, r1, r2, lsl #28
    1784:	0000000c 	andeq	r0, r0, ip
    1788:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    178c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1790:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1794:	0000001c 	andeq	r0, r0, ip, lsl r0
    1798:	00001784 	andeq	r1, r0, r4, lsl #15
    179c:	0800701c 	stmdaeq	r0, {r2, r3, r4, ip, sp, lr}
    17a0:	0000004c 	andeq	r0, r0, ip, asr #32
    17a4:	83180e41 	tsthi	r8, #1040	; 0x410
    17a8:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
    17ac:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    17b0:	00018e02 	andeq	r8, r1, r2, lsl #28
    17b4:	0000000c 	andeq	r0, r0, ip
    17b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    17bc:	7c020001 	stcvc	0, cr0, [r2], {1}
    17c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    17c4:	00000018 	andeq	r0, r0, r8, lsl r0
    17c8:	000017b4 			; <UNDEFINED> instruction: 0x000017b4
    17cc:	08007068 	stmdaeq	r0, {r3, r5, r6, ip, sp, lr}
    17d0:	00000020 	andeq	r0, r0, r0, lsr #32
    17d4:	83100e41 	tsthi	r0, #1040	; 0x410
    17d8:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
    17dc:	00018e02 	andeq	r8, r1, r2, lsl #28
    17e0:	0000000c 	andeq	r0, r0, ip
    17e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    17e8:	7c020001 	stcvc	0, cr0, [r2], {1}
    17ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    17f0:	0000000c 	andeq	r0, r0, ip
    17f4:	000017e0 	andeq	r1, r0, r0, ror #15
    17f8:	08007088 	stmdaeq	r0, {r3, r7, ip, sp, lr}
    17fc:	00000010 	andeq	r0, r0, r0, lsl r0
    1800:	0000000c 	andeq	r0, r0, ip
    1804:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1808:	7c020001 	stcvc	0, cr0, [r2], {1}
    180c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1810:	0000000c 	andeq	r0, r0, ip
    1814:	00001800 	andeq	r1, r0, r0, lsl #16
    1818:	08007098 	stmdaeq	r0, {r3, r4, r7, ip, sp, lr}
    181c:	00000012 	andeq	r0, r0, r2, lsl r0
    1820:	0000000c 	andeq	r0, r0, ip
    1824:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1828:	7c020001 	stcvc	0, cr0, [r2], {1}
    182c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1830:	00000018 	andeq	r0, r0, r8, lsl r0
    1834:	00001820 	andeq	r1, r0, r0, lsr #16
    1838:	00000000 	andeq	r0, r0, r0
    183c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1840:	83100e41 	tsthi	r0, #1040	; 0x410
    1844:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
    1848:	00018e02 	andeq	r8, r1, r2, lsl #28
    184c:	00000018 	andeq	r0, r0, r8, lsl r0
    1850:	00001820 	andeq	r1, r0, r0, lsr #16
    1854:	00000000 	andeq	r0, r0, r0
    1858:	000000bc 	strheq	r0, [r0], -ip
    185c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    1860:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1864:	00018e02 	andeq	r8, r1, r2, lsl #28
    1868:	0000000c 	andeq	r0, r0, ip
    186c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1870:	7c020001 	stcvc	0, cr0, [r2], {1}
    1874:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1878:	0000000c 	andeq	r0, r0, ip
    187c:	00001868 	andeq	r1, r0, r8, ror #16
    1880:	080070ac 	stmdaeq	r0, {r2, r3, r5, r7, ip, sp, lr}
    1884:	00000034 	andeq	r0, r0, r4, lsr r0

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	31425041 	cmpcc	r2, r1, asr #32
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00524e45 	subseq	r4, r2, r5, asr #28
       8:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
       c:	4c5f454d 	cfldr64mi	mvdx4, [pc], {77}	; 0x4d
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	52455441 	subpl	r5, r5, #1090519040	; 0x41000000
      14:	42535500 	subsmi	r5, r3, #0, 10
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	71655262 	cmnvc	r5, r2, ror #4
      1c:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	72747300 	rsbsvc	r7, r4, #0, 6
      24:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xe49
      28:	50410078 	subpl	r0, r1, r8, ror r0
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	53523242 	cmppl	r2, #536870916	; 0x20000004
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	4f005254 	svcmi	0x00005254
      34:	6544656e 	strbvs	r6, [r4, #-1390]	; 0x56e
      38:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	5f387500 	svcpl	0x00387500
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	43627375 	cmnmi	r2, #-738197503	; 0xd4000001
      48:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      4c:	73654467 	cmnvc	r5, #1728053248	; 0x67000000

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	70697263 	rsbvc	r7, r9, r3, ror #4
      54:	44726f74 	ldrbtmi	r6, [r2], #-3956	; 0xf74
      58:	75005546 	strvc	r5, [r0, #-1350]	; 0x546
      5c:	6e496273 	mcrvs	2, 2, r6, cr9, cr3, {3}
      60:	69007469 	stmdbvs	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
      64:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      68:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
      6c:	616c4300 	cmnvs	ip, r0, lsl #6
      70:	4e5f7373 	mrcmi	3, 2, r7, cr15, cr3, {3}
      74:	7461446f 	strbtvc	r4, [r1], #-1135	; 0x46f
      78:	65535f61 	ldrbvs	r5, [r3, #-3937]	; 0xf61
      7c:	00707574 	rsbseq	r7, r0, r4, ror r5
      80:	44627375 	strbtmi	r7, [r2], #-885	; 0x375
      84:	53496273 	movtpl	r6, #37491	; 0x9273
      88:	555f0052 	ldrbpl	r0, [pc, #-82]	; 3e <_Minimum_Stack_Size-0xc2>
      8c:	5f524553 	svcpl	0x00524553
      90:	4e415453 	mcrmi	4, 2, r5, cr1, cr3, {2}
      94:	44524144 	ldrbmi	r4, [r2], #-324	; 0x144
      98:	5145525f 	cmppl	r5, pc, asr r2
      9c:	54534555 	ldrbpl	r4, [r3], #-1365	; 0x555
      a0:	73550053 	cmpvc	r5, #83	; 0x53
      a4:	475f7265 	ldrbmi	r7, [pc, -r5, ror #4]
	f25519_select(x, a, b, (a[0] ^ parity) & 1);

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
	f25519_normalize(a);
	f25519_normalize(c);
      a8:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465

	return f25519_eq(a, c);
      ac:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
      b0:	72547700 	subsvc	r7, r4, #0, 14
      b4:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
	uint8_t ok;

	mx2ey(ey, mx);
	ok = ey2ex(ex, ey, parity);

	f25519_normalize(ex);
      b8:	69537265 	ldmdbvs	r3, {r0, r2, r5, r6, r9, ip, sp, lr}^
	f25519_normalize(ey);
      bc:	5500657a 	strpl	r6, [r0, #-1402]	; 0x57a
      c0:	4c5f4253 	lfmmi	f4, 2, [pc], {83}	; 0x53

	return ok;
}
      c4:	41435f50 	cmpmi	r3, r0, asr pc
      c8:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
      cc:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
      d0:	61485152 	cmpvs	r8, r2, asr r1
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
      d4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
      d8:	73750072 	cmnvc	r5, #114	; 0x72
		minusp[i] = c;
      dc:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
      e0:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
      e4:	63616672 	cmnvs	r1, #119537664	; 0x7200000

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
      e8:	74655365 	strbtvc	r5, [r5], #-869	; 0x365
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
      ec:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
      f0:	50424100 	subpl	r4, r2, r0, lsl #2
      f4:	54535231 	ldrbpl	r5, [r3], #-561	; 0x231
      f8:	525f0052 	subspl	r0, pc, #82	; 0x52
      fc:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     100:	54535f45 	ldrbpl	r5, [r3], #-3909	; 0xf45

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
     104:	00455441 	subeq	r5, r5, r1, asr #8
     108:	68746f6e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     10c:	50676e69 	rsbpl	r6, r7, r9, ror #28
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
     110:	00636f72 	rsbeq	r6, r3, r2, ror pc
     114:	5645445f 			; <UNDEFINED> instruction: 0x5645445f
     118:	5f454349 	svcpl	0x00454349
     11c:	4f464e49 	svcmi	0x00464e49
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     120:	62737500 	rsbsvs	r7, r3, #0, 10
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
     124:	61446f4e 	cmpvs	r4, lr, asr #30
     128:	65536174 	ldrbvs	r6, [r3, #-372]	; 0x174
		fprime_copy(plusa, r);
		fprime_add(plusa, a, modulus);

		fprime_select(r, r, plusa, bit);
	}
}
     12c:	00707574 	rsbseq	r7, r0, r4, ror r5

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
     130:	5f425355 	svcpl	0x00425355
	i <<= 3;

	while (x) {
     134:	55534e55 	ldrbpl	r4, [r3, #-3669]	; 0xe55
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
     138:	524f5050 	subpl	r5, pc, #80	; 0x50
     13c:	50700054 	rsbspl	r0, r0, r4, asr r0
	f25519_mul__distinct(x3, a, a);

	f25519_mul_c(a, x1z1, 486662);
	f25519_add(a, x1sq, a);
	f25519_add(a, z1sq, a);
	f25519_mul__distinct(x1sq, x1z1, a);
     140:	65706f72 	ldrbvs	r6, [r0, #-3954]!	; 0xf72
	f25519_mul_c(z3, x1sq, 4);
     144:	00797472 	rsbseq	r7, r9, r2, ror r4
     148:	77425355 	smlsldvc	r5, r2, r5, r3
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xe49
     150:	75007378 	strvc	r7, [r0, #-888]	; 0x378
     154:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
	f25519_sub(b, x3, z3); /* D */
     158:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     15c:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
	f25519_mul__distinct(da, a, b);
     160:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     164:	52006e6f 	andpl	r6, r0, #1776	; 0x6f0
     168:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec

	f25519_sub(b, x2, z2);
     16c:	41575f45 	cmpmi	r7, r5, asr #30
     170:	61005449 	tstvs	r0, r9, asr #8
	f25519_add(a, x3, z3); /* C */
     174:	6553746c 	ldrbvs	r7, [r3, #-1132]	; 0x46c
     178:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
     17c:	4e450067 	cdpmi	0, 4, cr0, cr5, cr7, {3}
	f25519_mul__distinct(cb, a, b);
     180:	494f5044 	stmdbmi	pc, {r2, r6, ip, lr}^	; <UNPREDICTABLE>
     184:	525f544e 	subspl	r5, pc, #1308622848	; 0x4e000000

	f25519_add(a, da, cb);
     188:	50494345 	subpl	r4, r9, r5, asr #6
     18c:	544e4549 	strbpl	r4, [lr], #-1353	; 0x549
     190:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
	f25519_mul__distinct(b, a, a);
     194:	65535f72 	ldrbvs	r5, [r3, #-3954]	; 0xf72
     198:	76654474 			; <UNDEFINED> instruction: 0x76654474
	f25519_mul__distinct(x5, z1, b);
     19c:	46656369 	strbtmi	r6, [r5], -r9, ror #6
     1a0:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
     1a4:	54006572 	strpl	r6, [r0], #-1394	; 0x572

	f25519_sub(a, da, cb);
     1a8:	00455552 	subeq	r5, r5, r2, asr r5
     1ac:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
	f25519_mul__distinct(b, a, a);
     1b0:	65447465 	strbvs	r7, [r4, #-1125]	; 0x465
     1b4:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     1b8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	00737365 	rsbseq	r7, r3, r5, ror #6
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	47627375 			; <UNDEFINED> instruction: 0x47627375
     1c4:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     1cc:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     1d0:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     1d4:	5500726f 	strpl	r7, [r0, #-623]	; 0x26f
		f25519_select(zm1, zm1, zm, bit);
     1d8:	775f6273 			; <UNDEFINED> instruction: 0x775f6273
     1dc:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     1e0:	76006874 			; <UNDEFINED> instruction: 0x76006874
		f25519_select(xm, xm, xms, bit);
     1e4:	00363175 	eorseq	r3, r6, r5, ror r1
     1e8:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
     1ec:	616d726f 	cmnvs	sp, pc, ror #4
		f25519_select(zm, zm, zms, bit);
     1f0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1f4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     1f8:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     200:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	73750066 	cmnvc	r5, #102	; 0x66
     208:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
	f25519_mul__distinct(result, zm1, xm);
     20c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     210:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
	f25519_normalize(result);
     214:	6f697461 	svcvs	0x00697461
     218:	6544006e 	strbvs	r0, [r4, #-110]	; 0x6e
}
     21c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     220:	6261545f 	rsbvs	r5, r1, #1593835520	; 0x5f000000
     224:	7500656c 	strvc	r6, [r0, #-1388]	; 0x56c
     228:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
     22c:	646e4574 	strbtvs	r4, [lr], #-1396	; 0x574
     230:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     234:	61654674 	smcvs	21604	; 0x5464
     238:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     23c:	45525f00 	ldrbmi	r5, [r2, #-3840]	; 0xf00
     240:	49504943 	ldmdbmi	r0, {r0, r1, r6, r8, fp, lr}^
     244:	5f544e45 	svcpl	0x00544e45
     248:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0x954
     24c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     250:	6f6c2067 	svcvs	0x006c2067
     254:	7520676e 	strvc	r6, [r0, #-1902]!	; 0x76e
     258:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     25c:	2064656e 	rsbcs	r6, r4, lr, ror #10
     260:	00746e69 	rsbseq	r6, r4, r9, ror #28
     264:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
     268:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
     26c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     270:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     274:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     278:	6144726f 	cmpvs	r4, pc, ror #4
     27c:	63006174 	movwvs	r6, #372	; 0x174
     280:	73614d72 	cmnvc	r1, #7296	; 0x1c80
     284:	5355006b 	cmppl	r5, #107	; 0x6b
     288:	55535f42 	ldrbpl	r5, [r3, #-3906]	; 0xf42
     28c:	53454343 	movtpl	r4, #21315	; 0x5343
     290:	53550053 	cmppl	r5, #83	; 0x53
     294:	6e495f42 	cdpvs	15, 4, cr5, cr9, cr2, {2}
     298:	55007469 	strpl	r7, [r0, #-1129]	; 0x469
     29c:	5f726573 	svcpl	0x00726573
     2a0:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
     2a4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     2a8:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     2ac:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     2b0:	65535f72 	ldrbvs	r5, [r3, #-3954]	; 0xf72
     2b4:	76654474 			; <UNDEFINED> instruction: 0x76654474
     2b8:	41656369 	cmnmi	r5, r9, ror #6
     2bc:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
     2c0:	43007373 	movwmi	r7, #883	; 0x373
     2c4:	7373616c 	cmnvc	r3, #108, 2
     2c8:	7461445f 	strbtvc	r4, [r1], #-1119	; 0x45f
     2cc:	65535f61 	ldrbvs	r5, [r3, #-3937]	; 0xf61
     2d0:	00707574 	rsbseq	r7, r0, r4, ror r5
     2d4:	47627375 			; <UNDEFINED> instruction: 0x47627375
     2d8:	65447465 	strbvs	r7, [r4, #-1125]	; 0x465
     2dc:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     2e0:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     2e4:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     2e8:	4400726f 	strmi	r7, [r0], #-623	; 0x26f
     2ec:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     2f0:	72505f65 	subsvc	r5, r0, #404	; 0x194
     2f4:	7265706f 	rsbvc	r7, r5, #111	; 0x6f
     2f8:	62007974 	andvs	r7, r0, #116, 18	; 0x1d0000
     2fc:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     300:	74536563 	ldrbvc	r6, [r3], #-1379	; 0x563
     304:	00657461 	rsbeq	r7, r5, r1, ror #8
     308:	4f534562 	svcmi	0x00534562
     30c:	746e6346 	strbtvc	r6, [lr], #-838	; 0x346
     310:	42535500 	subsmi	r5, r3, #0, 10
     314:	6c615677 	stclvs	6, cr5, [r1], #-476	; 0xfffffe24
     318:	00736575 	rsbseq	r6, r3, r5, ror r5
     31c:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     320:	455f454d 	ldrbmi	r4, [pc, #-1357]	; fffffddb <BootRAM+0xef7057c>
     324:	00464f53 	subeq	r4, r6, r3, asr pc
     328:	41627375 	smcmi	10037	; 0x2735
     32c:	6e497070 	mcrvs	0, 2, r7, cr9, cr0, {3}
     330:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
     334:	545f4343 	ldrbpl	r4, [pc], #-835	; 33c <_Minimum_Stack_Size+0x23c>
     338:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     33c:	75006665 	strvc	r6, [r0, #-1637]	; 0x665
     340:	65476273 	strbvs	r6, [r7, #-627]	; 0x273
     344:	6e754674 	mrcvs	6, 3, r4, cr5, cr4, {3}
     348:	6f697463 	svcvs	0x00697463
     34c:	446c616e 	strbtmi	r6, [ip], #-366	; 0x16e
     350:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     354:	6f747069 	svcvs	0x00747069
     358:	75760072 	ldrbvc	r0, [r6, #-114]!	; 0x72
     35c:	67003233 	smladxvs	r0, r3, r2, r3
     360:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
     364:	50687361 	rsbpl	r7, r8, r1, ror #6
     368:	53656761 	cmnpl	r5, #25427968	; 0x1840000
     36c:	00657a69 	rsbeq	r7, r5, r9, ror #20
     370:	61746f54 	cmnvs	r4, r4, asr pc
     374:	6e455f6c 	cdpvs	15, 4, cr5, cr5, cr12, {3}
     378:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
     37c:	5300746e 	movwpl	r7, #1134	; 0x46e
     380:	50457465 	subpl	r7, r5, r5, ror #8
     384:	61567852 	cmpvs	r6, r2, asr r8
     388:	0064696c 	rsbeq	r6, r4, ip, ror #18
     38c:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     390:	4f5f454d 	svcmi	0x005f454d
     394:	564e004e 	strbpl	r0, [lr], -lr, asr #32
     398:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     39c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     3a0:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     3a4:	646d436c 	strbtvs	r4, [sp], #-876	; 0x36c
     3a8:	45445f00 	strbmi	r5, [r4, #-3840]	; 0xf00
     3ac:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     3b0:	4f52505f 	svcmi	0x0052505f
     3b4:	73750050 	cmnvc	r5, #80	; 0x50
     3b8:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
     3bc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     3c0:	65446769 	strbvs	r6, [r4, #-1897]	; 0x769
     3c4:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     3c8:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     3cc:	44444100 	strbmi	r4, [r4], #-256	; 0x100
     3d0:	53534552 	cmppl	r3, #343932928	; 0x14800000
     3d4:	75004445 	strvc	r4, [r0, #-1093]	; 0x445
     3d8:	74536273 	ldrbvc	r6, [r3], #-627	; 0x273
     3dc:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     3e0:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     3e4:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     3e8:	7500726f 	strvc	r7, [r0, #-623]	; 0x26f
     3ec:	632e6273 	teqvs	lr, #805306375	; 0x30000007
     3f0:	73654400 	cmnvc	r5, #0, 8
     3f4:	70697263 	rsbvc	r7, r9, r3, ror #4
     3f8:	5f726f74 	svcpl	0x00726f74
     3fc:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
     400:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     404:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     408:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     40c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     410:	00657275 	rsbeq	r7, r5, r5, ror r2
     414:	5f434352 	svcpl	0x00434352
     418:	746f6c42 	strbtvc	r6, [pc], #-3138	; 420 <_Minimum_Stack_Size+0x320>
     41c:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     420:	65535f72 	ldrbvs	r5, [r3, #-3954]	; 0xf72
     424:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     428:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     42c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     430:	55006e6f 	strpl	r6, [r0, #-3695]	; 0xe6f
     434:	5f726573 	svcpl	0x00726573
     438:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
     43c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     440:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     444:	42484100 	submi	r4, r8, #0, 2
     448:	00524e45 	subseq	r4, r2, r5, asr #28
     44c:	50627375 	rsbpl	r7, r2, r5, ror r3
     450:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
     454:	52006e4f 	andpl	r6, r0, #1264	; 0x4f0
     458:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     45c:	4e495f45 	cdpmi	15, 4, cr5, cr9, cr5, {2}
     460:	4e524554 	mrcmi	5, 2, r4, cr2, cr4, {2}
     464:	52004c41 	andpl	r4, r0, #16640	; 0x4100
     468:	5f504578 	svcpl	0x00504578
     46c:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     470:	75007265 	strvc	r7, [r0, #-613]	; 0x265
     474:	6e456273 	mcrvs	2, 2, r6, cr5, cr3, {3}
     478:	52534962 	subspl	r4, r3, #1605632	; 0x188000
     47c:	62737500 	rsbsvs	r7, r3, #0, 10
     480:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0x552
     484:	6400656d 	strvs	r6, [r0], #-1389	; 0x56d
     488:	70557566 	subsvc	r7, r5, r6, ror #10
     48c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
     490:	65527942 	ldrbvs	r7, [r2, #-2370]	; 0x942
     494:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     498:	73750074 	cmnvc	r5, #116	; 0x74
     49c:	61745362 	cmnvs	r4, r2, ror #6
     4a0:	4f737574 	svcmi	0x00737574
     4a4:	75007475 	strvc	r7, [r0, #-1141]	; 0x475
     4a8:	65526273 	ldrbvs	r6, [r2, #-627]	; 0x273
     4ac:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0x573
     4b0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     4b4:	62737500 	rsbsvs	r7, r3, #0, 10
     4b8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     4bc:	73750074 	cmnvc	r5, #116	; 0x74
     4c0:	61745362 	cmnvs	r4, r2, ror #6
     4c4:	49737574 	ldmdbmi	r3!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
     4c8:	4552006e 	ldrbmi	r0, [r2, #-110]	; 0x6e
     4cc:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
     4d0:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
     4d4:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     4d8:	6f6c2067 	svcvs	0x006c2067
     4dc:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     4e0:	5000746e 	andpl	r7, r0, lr, ror #8
     4e4:	5245574f 	subpl	r5, r5, #20709376	; 0x13c0000
     4e8:	55004445 	strpl	r4, [r0, #-1093]	; 0x445
     4ec:	4c774253 	lfmmi	f4, 2, [r7], #-332	; 0xfffffeb4
     4f0:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
     4f4:	75007368 	strvc	r7, [r0, #-872]	; 0x368
     4f8:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
     4fc:	746e4974 	strbtvc	r4, [lr], #-2420	; 0x974
     500:	61667265 	cmnvs	r6, r5, ror #4
     504:	43006563 	movwmi	r6, #1379	; 0x563
     508:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
     50c:	435f746e 	cmpmi	pc, #1845493760	; 0x6e000000
     510:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     514:	61727567 	cmnvs	r2, r7, ror #10
     518:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     51c:	6e497700 	cdpvs	7, 4, cr7, cr9, cr0, {0}
     520:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
     524:	5f747075 	svcpl	0x00747075
     528:	6b73614d 	blvs	1cd8a64 <__Stack_Size+0x1cd8264>
     52c:	6f6f6200 	svcvs	0x006f6200
     530:	4544006c 	strbmi	r0, [r4, #-108]	; 0x6c
     534:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     538:	4345525f 	movtmi	r5, #21087	; 0x525f
     53c:	45495049 	strbmi	r5, [r9, #-73]	; 0x49
     540:	7500544e 	strvc	r5, [r0, #-1102]	; 0x44e
     544:	65476273 	strbvs	r6, [r7, #-627]	; 0x273
     548:	61745374 	cmnvs	r4, r4, ror r3
     54c:	43006574 	movwmi	r6, #1396	; 0x574
     550:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
     554:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     558:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     55c:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     560:	4e437700 	cdpmi	7, 4, cr7, cr3, cr0, {0}
     564:	75005254 	strvc	r5, [r0, #-596]	; 0x254
     568:	73446273 	movtvc	r6, #17011	; 0x4273
     56c:	73754262 	cmnvc	r5, #536870918	; 0x20000006
     570:	4e4f5000 	cdpmi	0, 4, cr5, cr15, cr0, {0}
     574:	45445f45 	strbmi	r5, [r4, #-3909]	; 0xf45
     578:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
     57c:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
     580:	62737500 	rsbsvs	r7, r3, #0, 10
     584:	70737553 	rsbsvc	r7, r3, r3, asr r5
     588:	00646e65 	rsbeq	r6, r4, r5, ror #28
     58c:	61746f54 	cmnvs	r4, r4, asr pc
     590:	6f435f6c 	svcvs	0x00435f6c
     594:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     598:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     59c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     5a0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     5a4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     5a8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     5ac:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     5b0:	6f697461 	svcvs	0x00697461
     5b4:	564e006e 	strbpl	r0, [lr], -lr, rrx
     5b8:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     5bc:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     5c0:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     5c4:	4552006c 	ldrbmi	r0, [r2, #-108]	; 0x6c
     5c8:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
     5cc:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0x55f
     5d0:	414e5245 	cmpmi	lr, r5, asr #4
     5d4:	7543004c 	strbvc	r0, [r3, #-76]	; 0x4c
     5d8:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     5dc:	6c415f74 	mcrrvs	15, 7, r5, r1, cr4
     5e0:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
     5e4:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
     5e8:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     5ec:	4100676e 	tstmi	r0, lr, ror #14
     5f0:	45324250 	ldrmi	r4, [r2, #-592]!	; 0x250
     5f4:	7200524e 	andvc	r5, r0, #-536870908	; 0xe0000004
     5f8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
     5fc:	5f007473 	svcpl	0x00007473
     600:	50444e45 	subpl	r4, r4, r5, asr #28
     604:	544e494f 	strbpl	r4, [lr], #-2383	; 0x94f
     608:	464e495f 			; <UNDEFINED> instruction: 0x464e495f
     60c:	6f43004f 	svcvs	0x0043004f
     610:	6f527970 	svcvs	0x00527970
     614:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     618:	43520065 	cmpmi	r2, #101	; 0x65
     61c:	44425f43 	strbmi	r5, [r2], #-3907	; 0xf43
     620:	5f005243 	svcpl	0x00005243
     624:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
     628:	55004543 	strpl	r4, [r0, #-1347]	; 0x543
     62c:	4e5f4253 	mrcmi	2, 2, r4, cr15, cr3, {2}
     630:	525f544f 	subspl	r5, pc, #1325400064	; 0x4f000000
     634:	59444145 	stmdbpl	r4, {r0, r2, r6, r8, lr}^
     638:	6e496200 	cdpvs	2, 4, cr6, cr9, cr0, {0}
     63c:	63615074 	cmnvs	r1, #116	; 0x74
     640:	464f536b 	strbmi	r5, [pc], -fp, ror #6
     644:	62737500 	rsbsvs	r7, r3, #0, 10
     648:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xf50
     64c:	66664f72 	uqsub16vs	r4, r6, r2
     650:	6e6f4300 	cdpvs	3, 6, cr4, cr15, cr0, {0}
     654:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 48c <_Minimum_Stack_Size+0x38c>
     658:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     65c:	68730065 	ldmdavs	r3!, {r0, r2, r5, r6}^
     660:	2074726f 	rsbscs	r7, r4, pc, ror #4
     664:	00746e69 	rsbseq	r6, r4, r9, ror #28
     668:	47627375 			; <UNDEFINED> instruction: 0x47627375
     66c:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
     670:	66726574 			; <UNDEFINED> instruction: 0x66726574
     674:	00656361 	rsbeq	r6, r5, r1, ror #6
     678:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0x552
     67c:	0053656d 	subseq	r6, r3, sp, ror #10
     680:	616c6564 	cmnvs	ip, r4, ror #10
     684:	4e490079 	mcrmi	0, 2, r0, cr9, cr9, {3}
     688:	46524554 			; <UNDEFINED> instruction: 0x46524554
     68c:	5f454341 	svcpl	0x00454341
     690:	49434552 	stmdbmi	r3, {r1, r4, r6, r8, sl, lr}^
     694:	4e454950 	mcrmi	9, 2, r4, cr5, cr0, {2}
     698:	6f430054 	svcvs	0x00430054
     69c:	61447970 	hvcvs	18320	; 0x4790
     6a0:	55006174 	strpl	r6, [r0, #-372]	; 0x174
     6a4:	5f726573 	svcpl	0x00726573
     6a8:	61656c43 	cmnvs	r5, r3, asr #24
     6ac:	61654672 	smcvs	21602	; 0x5462
     6b0:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     6b4:	4c414600 	mcrrmi	6, 0, r4, r1, cr0
     6b8:	43004553 	movwmi	r4, #1363	; 0x553
     6bc:	00524746 	subseq	r4, r2, r6, asr #14
     6c0:	20554e47 	subscs	r4, r5, r7, asr #28
     6c4:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
     6c8:	20342e38 	eorscs	r2, r4, r8, lsr lr
     6cc:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
     6d0:	35323730 	ldrcc	r3, [r2, #-1840]!	; 0x730
     6d4:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0x820
     6d8:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     6dc:	5b202965 	blpl	80ac78 <__Stack_Size+0x80a478>
     6e0:	2f4d5241 	svccs	0x004d5241
     6e4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     6e8:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     6ec:	385f342d 	ldmdacc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     6f0:	6172622d 	cmnvs	r2, sp, lsr #4
     6f4:	2068636e 	rsbcs	r6, r8, lr, ror #6
     6f8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     6fc:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
     700:	33313220 	teqcc	r1, #32, 4
     704:	5d373431 	cfldrspl	mvf3, [r7, #-196]!	; 0xffffff3c
     708:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
     70c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     710:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
     714:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
     718:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
     71c:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
     720:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
     724:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     728:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
     72c:	6f777265 	svcvs	0x00777265
     730:	2d206b72 	vstmdbcs	r0!, {d6-<overflow reg d62>}
     734:	4f2d2067 	svcmi	0x002d2067
     738:	662d2033 			; <UNDEFINED> instruction: 0x662d2033
     73c:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     740:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     744:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     748:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     74c:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     750:	61746164 	cmnvs	r4, r4, ror #2
     754:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     758:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     75c:	775f0073 			; <UNDEFINED> instruction: 0x775f0073
     760:	56676552 			; <UNDEFINED> instruction: 0x56676552
     764:	55006c61 	strpl	r6, [r0, #-3169]	; 0xc61
     768:	6d624253 	sfmvs	f4, 2, [r2, #-332]!	; 0xfffffeb4
     76c:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
     770:	54747365 	ldrbtpl	r7, [r4], #-869	; 0x365
     774:	00657079 	rsbeq	r7, r5, r9, ror r0
     778:	636f7250 	cmnvs	pc, #80, 4
     77c:	5f737365 	svcpl	0x00737365
     780:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     784:	4f5f7375 	svcmi	0x005f7375
     788:	73005455 	movwvc	r5, #1109	; 0x455
     78c:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xa69
     790:	00657079 	rsbeq	r7, r5, r9, ror r0
     794:	61656c43 	cmnvs	r5, r3, asr #24
     798:	74535f72 	ldrbvc	r5, [r3], #-3954	; 0xf72
     79c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     7a0:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xf5f
     7a4:	5f387500 	svcpl	0x00387500
     7a8:	46627375 			; <UNDEFINED> instruction: 0x46627375
     7ac:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
     7b0:	616e6f69 	cmnvs	lr, r9, ror #30
     7b4:	7365446c 	cmnvc	r5, #108, 8	; 0x6c000000
     7b8:	70697263 	rsbvc	r7, r9, r3, ror #4
     7bc:	00726f74 	rsbseq	r6, r2, r4, ror pc
     7c0:	5345525f 	movtpl	r5, #21087	; 0x525f
     7c4:	00544c55 	subseq	r4, r4, r5, asr ip
     7c8:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
     7cc:	666e495f 			; <UNDEFINED> instruction: 0x666e495f
     7d0:	6573006f 	ldrbvs	r0, [r3, #-111]!	; 0x6f
     7d4:	55707574 	ldrbpl	r7, [r0, #-1396]!	; 0x574
     7d8:	67004253 	smlsdvs	r0, r3, r2, r4
     7dc:	5f6f6970 	svcpl	0x006f6970
     7e0:	74697277 	strbtvc	r7, [r9], #-631	; 0x277
     7e4:	69625f65 	stmdbvs	r2!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     7e8:	73750074 	cmnvc	r5, #116	; 0x74
     7ec:	74614462 	strbtvc	r4, [r1], #-1122	; 0x462
     7f0:	74655361 	strbtvc	r5, [r5], #-865	; 0x361
     7f4:	43007075 	movwmi	r7, #117	; 0x75
     7f8:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
     7fc:	45525547 	ldrbmi	r5, [r2, #-1351]	; 0x547
     800:	49770044 	ldmdbmi	r7!, {r2, r6}^
     804:	00727473 	rsbseq	r7, r2, r3, ror r4
     808:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     80c:	5f746e65 	svcpl	0x00746e65
     810:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     814:	00657275 	rsbeq	r7, r5, r5, ror r2
     818:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     81c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
     820:	61686320 	cmnvs	r8, r0, lsr #6
     824:	52650072 	rsbpl	r0, r5, #114	; 0x72
     828:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
     82c:	74655365 	strbtvc	r5, [r5], #-869	; 0x365
     830:	006c6156 	rsbeq	r6, ip, r6, asr r1
     834:	5f525443 	svcpl	0x00525443
     838:	6400504c 	strvs	r5, [r0], #-76	; 0x4c
     83c:	70557566 	subsvc	r7, r5, r6, ror #10
     840:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
     844:	65527942 	ldrbvs	r7, [r2, #-2370]	; 0x942
     848:	00746573 	rsbseq	r6, r4, r3, ror r5
     84c:	47627375 			; <UNDEFINED> instruction: 0x47627375
     850:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465
     854:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     858:	62737500 	rsbsvs	r7, r3, #0, 10
     85c:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
     860:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     864:	61654665 	cmnvs	r5, r5, ror #12
     868:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     86c:	62735500 	rsbsvs	r5, r3, #0, 10
     870:	664f775f 			; <UNDEFINED> instruction: 0x664f775f
     874:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
     878:	45445f00 	strbmi	r5, [r4, #-3840]	; 0xf00
     87c:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     880:	4154535f 	cmpmi	r4, pc, asr r3
     884:	55004554 	strpl	r4, [r0, #-1364]	; 0x554
     888:	4e4f434e 	cdpmi	3, 4, cr4, cr15, cr14, {2}
     88c:	5443454e 	strbpl	r4, [r3], #-1358	; 0x54e
     890:	43004445 	movwmi	r4, #1093	; 0x445
     894:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
     898:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
     89c:	66696168 	strbtvs	r6, [r9], -r8, ror #2
     8a0:	68637369 	stmdavs	r3!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     8a4:	7365445c 	cmnvc	r5, #92, 8	; 0x5c000000
     8a8:	706f746b 	rsbvc	r7, pc, fp, ror #8
     8ac:	636e655c 	cmnvs	lr, #92, 10	; 0x17000000
     8b0:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0x16c
     8b4:	6f72705f 	svcvs	0x0072705f
     8b8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
     8bc:	6f6f625c 	svcvs	0x006f625c
     8c0:	616f6c74 	smcvs	63172	; 0xf6c4
     8c4:	5c726564 	cfldr64pl	mvdx6, [r2], #-400	; 0xfffffe70
     8c8:	334d5453 	movtcc	r5, #54355	; 0xd453
     8cc:	00314632 	eorseq	r4, r1, r2, lsr r6
     8d0:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     8d4:	535f454d 	cmppl	pc, #322961408	; 0x13400000
     8d8:	54524154 	ldrbpl	r4, [r2], #-340	; 0x154
     8dc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     8e0:	52495f43 	subpl	r5, r9, #268	; 0x10c
     8e4:	61684351 	cmnvs	r8, r1, asr r3
     8e8:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     8ec:	50627553 	rsbpl	r7, r2, r3, asr r5
     8f0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     8f4:	00797469 	rsbseq	r7, r9, r9, ror #8
     8f8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     8fc:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     900:	50646e45 	rsbpl	r6, r4, r5, asr #28
     904:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
     908:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     90c:	00657275 	rsbeq	r7, r5, r5, ror r2
     910:	43627375 	cmnmi	r2, #-738197503	; 0xd4000001
     914:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     918:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     91c:	00657275 	rsbeq	r7, r5, r5, ror r2
     920:	4548544f 	strbmi	r5, [r8, #-1103]	; 0x44f
     924:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
     928:	49504943 	ldmdbmi	r0, {r0, r1, r6, r8, fp, lr}^
     92c:	00544e45 	subseq	r4, r4, r5, asr #28
     930:	5f363175 	svcpl	0x00363175
     934:	50003875 	andpl	r3, r0, r5, ror r8
     938:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
     93c:	535f7373 	cmppl	pc, #-872415231	; 0xcc000001
     940:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     944:	4e495f73 	mcrmi	15, 2, r5, cr9, cr3, {3}
     948:	6f687300 	svcvs	0x00687300
     94c:	75207472 	strvc	r7, [r0, #-1138]!	; 0x472
     950:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     954:	2064656e 	rsbcs	r6, r4, lr, ror #10
     958:	00746e69 	rsbseq	r6, r4, r9, ror #28
     95c:	41545441 	cmpmi	r4, r1, asr #8
     960:	44454843 	strbmi	r4, [r5], #-2115	; 0x843
     964:	70457000 	subvc	r7, r5, r0
     968:	5f746e49 	svcpl	0x00746e49
     96c:	0054554f 	subseq	r5, r4, pc, asr #10
     970:	4349564e 	movtmi	r5, #38478	; 0x964e
     974:	5152495f 	cmppl	r2, pc, asr r9
     978:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     97c:	506c656e 	rsbpl	r6, ip, lr, ror #10
     980:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
     984:	6f697470 	svcvs	0x00697470
     988:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
     98c:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     990:	55530079 	ldrbpl	r0, [r3, #-121]	; 0x79
     994:	4e455053 	mcrmi	0, 2, r5, cr5, cr3, {2}
     998:	00444544 	subeq	r4, r4, r4, asr #10
     99c:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
     9a0:	43785250 	cmnmi	r8, #80, 4
     9a4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     9a8:	42535500 	subsmi	r5, r3, #0, 10
     9ac:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
     9b0:	7000524f 	andvc	r5, r0, pc, asr #4
     9b4:	6e497045 	cdpvs	0, 4, cr7, cr9, cr5, {2}
     9b8:	4e495f74 	mcrmi	15, 2, r5, cr9, cr4, {3}
     9bc:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     9c0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     9c4:	616c4300 	cmnvs	ip, r0, lsl #6
     9c8:	475f7373 			; <UNDEFINED> instruction: 0x475f7373
     9cc:	495f7465 	ldmdbmi	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     9d0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     9d4:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     9d8:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     9dc:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     9e0:	69766e00 	ldmdbvs	r6!, {r9, sl, fp, sp, lr}^
     9e4:	696e4963 	stmdbvs	lr!, {r0, r1, r5, r6, r8, fp, lr}^
     9e8:	38750074 	ldmdacc	r5!, {r2, r4, r5, r6}^
     9ec:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     9f0:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     9f4:	6556676e 	ldrbvs	r6, [r6, #-1902]	; 0x76e
     9f8:	726f646e 	rsbvc	r6, pc, #1845493760	; 0x6e000000
     9fc:	5f387500 	svcpl	0x00387500
     a00:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     a04:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     a08:	746e4967 	strbtvc	r4, [lr], #-2407	; 0x967
     a0c:	61667265 	cmnvs	r6, r5, ror #4
     a10:	75006563 	strvc	r6, [r0, #-1379]	; 0x563
     a14:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a18:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a1c:	41676e69 	cmnmi	r7, r9, ror #28
     a20:	0031746c 	eorseq	r7, r1, ip, ror #8
     a24:	755f3875 	ldrbvc	r3, [pc, #-2165]	; 1b7 <_Minimum_Stack_Size+0xb7>
     a28:	65446273 	strbvs	r6, [r4, #-627]	; 0x273
     a2c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     a30:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     a34:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     a38:	4644726f 	strbmi	r7, [r4], -pc, ror #4
     a3c:	38750055 	ldmdacc	r5!, {r0, r2, r4, r6}^
     a40:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     a44:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     a48:	6c41676e 	mcrrvs	7, 6, r6, r1, cr14
     a4c:	75003274 	strvc	r3, [r0, #-628]	; 0x274
     a50:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a54:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a58:	53676e69 	cmnpl	r7, #1680	; 0x690
     a5c:	61697265 	cmnvs	r9, r5, ror #4
     a60:	3875006c 	ldmdacc	r5!, {r2, r3, r5, r6}^
     a64:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     a68:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     a6c:	6c41676e 	mcrrvs	7, 6, r6, r1, cr14
     a70:	75003074 	strvc	r3, [r0, #-116]	; 0x74
     a74:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a78:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a7c:	50676e69 	rsbpl	r6, r7, r9, ror #28
     a80:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xf72
     a84:	75007463 	strvc	r7, [r0, #-1123]	; 0x463
     a88:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a8c:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a90:	4c676e69 	stclmi	14, cr6, [r7], #-420	; 0xfffffe5c
     a94:	49676e61 	stmdbmi	r7!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     a98:	73750064 	cmnvc	r5, #100	; 0x64
     a9c:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     aa0:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     aa4:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     aa8:	6400632e 	strvs	r6, [r0], #-814	; 0x32e
     aac:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     ab0:	756f635f 	strbvc	r6, [pc, #-863]!	; 759 <_Minimum_Stack_Size+0x659>
     ab4:	5f00746e 	svcpl	0x0000746e
     ab8:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     abc:	6a624f65 	bvs	1894858 <__Stack_Size+0x1894058>
     ac0:	48746365 	ldmdami	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     ac4:	65646165 	strbvs	r6, [r4, #-357]!	; 0x165
     ac8:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0x72
     acc:	43707574 	cmnmi	r0, #116, 10	; 0x1d000000
     ad0:	73004b4c 	movwvc	r4, #2892	; 0xb4c
     ad4:	5f657a69 	svcpl	0x00657a69
     ad8:	5f5f0074 	svcpl	0x005f0074
     adc:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
     ae0:	745f3233 	ldrbvc	r3, [pc], #-563	; ae8 <__Stack_Size+0x2e8>
     ae4:	73797300 	cmnvc	r9, #0, 6
     ae8:	526d6574 	rsbpl	r6, sp, #116, 10	; 0x1d000000
     aec:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     af0:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
     af4:	4c467075 	mcrrmi	0, 7, r7, r6, cr5
     af8:	00485341 	subeq	r5, r8, r1, asr #6
     afc:	75426869 	strbvc	r6, [r2, #-2153]	; 0x869
     b00:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     b04:	61657200 	cmnvs	r5, r0, lsl #4
     b08:	6e695064 	cdpvs	0, 6, cr5, cr9, cr4, {3}
     b0c:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffffc14 <BootRAM+0xef703b5>
     b10:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     b14:	6900745f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
     b18:	67614d68 	strbvs	r4, [r1, -r8, ror #26]!
     b1c:	5f006369 	svcpl	0x00006369
     b20:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     b24:	746e4965 	strbtvc	r4, [lr], #-2405	; 0x965
     b28:	616e7265 	cmnvs	lr, r5, ror #4
     b2c:	6174536c 	cmnvs	r4, ip, ror #6
     b30:	63006574 	movwvs	r6, #1396	; 0x574
     b34:	6f737275 	svcvs	0x00737275
     b38:	6d690072 	stclvs	0, cr0, [r9, #-456]!	; 0xfffffe38
     b3c:	43656761 	cmnmi	r5, #25427968	; 0x1840000
     b40:	6b636568 	blvs	18da0e8 <__Stack_Size+0x18d98e8>
     b44:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; a34 <__Stack_Size+0x234>
     b48:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     b4c:	00737365 	rsbseq	r7, r3, r5, ror #6
     b50:	6f727473 	svcvs	0x00727473
     b54:	69506562 	ldmdbvs	r0, {r1, r5, r6, r8, sl, sp, lr}^
     b58:	6f6e006e 	svcvs	0x006e006e
     b5c:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0x55f
     b60:	756a5f72 	strbvc	r5, [sl, #-3954]!	; 0xf72
     b64:	6600706d 	strvs	r7, [r0], -sp, rrx
     b68:	7367616c 	cmnvc	r7, #108, 2
     b6c:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
     b70:	454c7075 	strbmi	r7, [ip, #-117]	; 0x75
     b74:	646e4144 	strbtvs	r4, [lr], #-324	; 0x144
     b78:	74747542 	ldrbtvc	r7, [r4], #-1346	; 0x542
     b7c:	69006e6f 	stmdbvs	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     b80:	66754268 	ldrbtvs	r4, [r5], -r8, ror #4
     b84:	4c726566 	cfldr64mi	mvdx6, [r2], #-408	; 0xfffffe68
     b88:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
     b8c:	61750068 	cmnvs	r5, r8, rrx
     b90:	6e497472 	mcrvs	4, 2, r7, cr9, cr2, {3}
     b94:	61007469 	tstvs	r0, r9, ror #8
     b98:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     b9c:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
     ba0:	54686900 	strbtpl	r6, [r8], #-2304	; 0x900
     ba4:	00657079 	rsbeq	r7, r5, r9, ror r0
     ba8:	6e69616d 	powvsez	f6, f1, #5.0
     bac:	6e6f6400 	cdpvs	4, 6, cr6, cr15, cr0, {0}
     bb0:	61775f74 	cmnvs	r7, r4, ror pc
     bb4:	6a007469 	bvs	1dd60 <__Stack_Size+0x1d560>
     bb8:	54706d75 	ldrbtpl	r6, [r0], #-3445	; 0xd75
     bbc:	6573556f 	ldrbvs	r5, [r3, #-1391]!	; 0x56f
     bc0:	68690072 	stmdavs	r9!, {r1, r4, r5, r6}^
     bc4:	70696b53 	rsbvc	r6, r9, r3, asr fp
     bc8:	74736944 	ldrbtvc	r6, [r3], #-2372	; 0x944
     bcc:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xe61
     bd0:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     bd4:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     bd8:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     bdc:	66640065 	strbtvs	r0, [r4], -r5, rrx
     be0:	6c705575 	cfldr64vs	mvdx5, [r0], #-468	; 0xfffffe2c
     be4:	5364616f 	cmnpl	r4, #-1073741797	; 0xc000001b
     be8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     bec:	69006465 	stmdbvs	r0, {r0, r2, r5, r6, sl, sp, lr}
     bf0:	6567616d 	strbvs	r6, [r7, #-365]!	; 0x16d
     bf4:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     bf8:	7500656c 	strvc	r6, [r0, #-1388]	; 0x56c
     bfc:	5f747261 	svcpl	0x00747261
     c00:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     c04:	69006674 	stmdbvs	r0, {r2, r4, r5, r6, r9, sl, sp, lr}
     c08:	67695368 	strbvs	r5, [r9, -r8, ror #6]!
     c0c:	4c64656e 	cfstr64mi	mvdx6, [r4], #-440	; 0xfffffe48
     c10:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
     c14:	616c0068 	cmnvs	ip, r8, rrx
     c18:	61547473 	cmpvs	r4, r3, ror r4
     c1c:	66640067 	strbtvs	r0, [r4], -r7, rrx
     c20:	6e694675 	mcrvs	6, 3, r4, cr9, cr5, {3}
     c24:	55687369 	strbpl	r7, [r8, #-873]!	; 0x369
     c28:	616f6c70 	smcvs	63168	; 0xf6c0
     c2c:	72700064 	rsbsvc	r0, r0, #100	; 0x64
     c30:	5f746e69 	svcpl	0x00746e69
     c34:	68736168 	ldmdavs	r3!, {r3, r5, r6, r8, sp, lr}^
     c38:	616d4900 	cmnvs	sp, r0, lsl #18
     c3c:	624f6567 	subvs	r6, pc, #432013312	; 0x19c00000
     c40:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
     c44:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     c48:	6600656c 	strvs	r6, [r0], -ip, ror #10
     c4c:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     c50:	73617245 	cmnvc	r1, #1342177284	; 0x50000004
     c54:	67615065 	strbvs	r5, [r1, -r5, rrx]!
     c58:	53420065 	movtpl	r0, #8293	; 0x2065
     c5c:	47005252 	smlsdmi	r0, r2, r2, r5
     c60:	5f4f4950 	svcpl	0x004f4950
     c64:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     c68:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     c6c:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     c70:	7973006e 	ldmdbvc	r3!, {r1, r2, r3, r5, r6}^
     c74:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     c78:	64726148 	ldrbtvs	r6, [r2], #-328	; 0x148
     c7c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     c80:	6b620074 	blvs	1880e58 <__Stack_Size+0x1880658>
     c84:	57303170 			; <UNDEFINED> instruction: 0x57303170
     c88:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
     c8c:	564e7200 	strbpl	r7, [lr], -r0, lsl #4
     c90:	46004349 	strmi	r4, [r0], -r9, asr #6
     c94:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
     c98:	616e6f69 	cmnvs	lr, r9, ror #30
     c9c:	6174536c 	cmnvs	r4, ip, ror #6
     ca0:	63006574 	movwvs	r6, #1396	; 0x574
     ca4:	6b636568 	blvs	18da24c <__Stack_Size+0x18d9a4c>
     ca8:	43646e41 	cmnmi	r4, #1040	; 0x410
     cac:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     cb0:	746f6f42 	strbtvc	r6, [pc], #-3906	; cb8 <__Stack_Size+0x4b8>
     cb4:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
     cb8:	6c467265 	sfmvs	f7, 2, [r6], {101}	; 0x65
     cbc:	44006761 	strmi	r6, [r0], #-1889	; 0x761
     cc0:	00525346 	subseq	r5, r2, r6, asr #6
     cc4:	6369766e 	cmnvs	r9, #115343360	; 0x6e00000
     cc8:	61736944 	cmnvs	r3, r4, asr #18
     ccc:	49656c62 	stmdbmi	r5!, {r1, r5, r6, sl, fp, sp, lr}^
     cd0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     cd4:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
     cd8:	53550073 	cmppl	r5, #115	; 0x73
     cdc:	5f545241 	svcpl	0x00545241
     ce0:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
     ce4:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     ce8:	68006874 	stmdavs	r0, {r2, r4, r5, r6, fp, sp, lr}
     cec:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
     cf0:	2e657261 	cdpcs	2, 6, cr7, cr5, cr1, {3}
     cf4:	53550063 	cmppl	r5, #99	; 0x63
     cf8:	5f545241 	svcpl	0x00545241
     cfc:	706f7453 	rsbvc	r7, pc, r3, asr r4	; <UNPREDICTABLE>
     d00:	73746942 	cmnvc	r4, #1081344	; 0x108000
     d04:	72777000 	rsbsvc	r7, r7, #0
     d08:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
     d0c:	70616d5f 	rsbvc	r6, r1, pc, asr sp
     d10:	70737600 	rsbsvc	r7, r3, r0, lsl #12
     d14:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
     d18:	50470066 	subpl	r0, r7, r6, rrx
     d1c:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     d20:	0074696e 	rsbseq	r6, r4, lr, ror #18
     d24:	6d706d74 	ldclvs	13, cr6, [r0, #-464]!	; 0xfffffe30
     d28:	006b7361 	rsbeq	r7, fp, r1, ror #6
     d2c:	64786568 	ldrbtvs	r6, [r8], #-1384	; 0x568
     d30:	00706d75 	rsbseq	r6, r0, r5, ror sp
     d34:	4f495047 	svcmi	0x00495047
     d38:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     d3c:	325f6465 	subscc	r6, pc, #1694498816	; 0x65000000
     d40:	007a484d 	rsbseq	r4, sl, sp, asr #16
     d44:	52505447 	subspl	r5, r0, #1191182336	; 0x47000000
     d48:	536e6f00 	cmnpl	lr, #0, 30
     d4c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     d50:	41535500 	cmpmi	r3, r0, lsl #10
     d54:	425f5452 	subsmi	r5, pc, #1375731712	; 0x52000000
     d58:	52647561 	rsbpl	r7, r4, #406847488	; 0x18400000
     d5c:	00657461 	rsbeq	r7, r5, r1, ror #8
     d60:	63656863 	cmnvs	r5, #6488064	; 0x630000
     d64:	6573556b 	ldrbvs	r5, [r3, #-1387]!	; 0x56b
     d68:	646f4372 	strbtvs	r4, [pc], #-882	; d70 <__Stack_Size+0x570>
     d6c:	53490065 	movtpl	r0, #36965	; 0x9065
     d70:	70005245 	andvc	r5, r0, r5, asr #4
     d74:	41656761 	cmnmi	r5, r1, ror #14
     d78:	00726464 	rsbseq	r6, r2, r4, ror #8
     d7c:	52455352 	subpl	r5, r5, #1207959553	; 0x48000001
     d80:	31444556 	cmpcc	r4, r6, asr r5
     d84:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     d88:	70535f4f 	subsvc	r5, r3, pc, asr #30
     d8c:	5f646565 	svcpl	0x00646565
     d90:	484d3031 	stmdami	sp, {r0, r4, r5, ip, sp}^
     d94:	6b62007a 	blvs	1880f84 <__Stack_Size+0x1880784>
     d98:	65725f70 	ldrbvs	r5, [r2, #-3952]!	; 0xf70
     d9c:	616d5f67 	cmnvs	sp, r7, ror #30
     da0:	69750070 	ldmdbvs	r5!, {r4, r5, r6}^
     da4:	65725f64 	ldrbvs	r5, [r2, #-3940]!	; 0xf64
     da8:	55006461 	strpl	r6, [r0, #-1121]	; 0x461
     dac:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     db0:	7261505f 	rsbvc	r5, r1, #95	; 0x5f
     db4:	00797469 	rsbseq	r7, r9, r9, ror #8
     db8:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     dbc:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
     dc0:	5500745f 	strpl	r7, [r0, #-1119]	; 0x45f
     dc4:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     dc8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     dcc:	50470074 	subpl	r0, r7, r4, ror r0
     dd0:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; cb4 <__Stack_Size+0x4b4>
     dd4:	5f65646f 	svcpl	0x0065646f
     dd8:	00445049 	subeq	r5, r4, r9, asr #32
     ddc:	756c6176 	strbvc	r6, [ip, #-374]!	; 0x176
     de0:	50470065 	subpl	r0, r7, r5, rrx
     de4:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; cc8 <__Stack_Size+0x4c8>
     de8:	5f65646f 	svcpl	0x0065646f
     dec:	00555049 	subseq	r5, r5, r9, asr #32
     df0:	6e675f5f 	mcrvs	15, 3, r5, cr7, cr15, {2}
     df4:	765f6375 			; <UNDEFINED> instruction: 0x765f6375
     df8:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
     dfc:	43007473 	movwmi	r7, #1139	; 0x473
     e00:	44495550 	strbmi	r5, [r9], #-1360	; 0x550
     e04:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     e08:	00676572 	rsbeq	r6, r7, r2, ror r5
     e0c:	52504853 	subspl	r4, r0, #5439488	; 0x530000
     e10:	53464100 	movtpl	r4, #24832	; 0x6100
     e14:	53550052 	cmppl	r5, #82	; 0x52
     e18:	5f545241 	svcpl	0x00545241
     e1c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     e20:	00666544 	rsbeq	r6, r6, r4, asr #10
     e24:	31425041 	cmpcc	r2, r1, asr #32
     e28:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     e2c:	53464800 	movtpl	r4, #26624	; 0x6800
     e30:	6c660052 	stclvs	0, cr0, [r6], #-328	; 0xfffffeb8
     e34:	4c687361 	stclmi	3, cr7, [r8], #-388	; 0xfffffe7c
     e38:	006b636f 	rsbeq	r6, fp, pc, ror #6
     e3c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     e40:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
     e44:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     e48:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     e4c:	00657275 	rsbeq	r7, r5, r5, ror r2
     e50:	4f495047 	svcmi	0x00495047
     e54:	646f4d5f 	strbtvs	r4, [pc], #-3423	; e5c <__Stack_Size+0x65c>
     e58:	754f5f65 	strbvc	r5, [pc, #-3941]	; fffffefb <BootRAM+0xef7069c>
     e5c:	50505f74 	subspl	r5, r0, r4, ror pc
     e60:	74617200 	strbtvc	r7, [r1], #-512	; 0x200
     e64:	49440065 	stmdbmi	r4, {r0, r2, r5, r6}^
     e68:	4c424153 	stfmie	f4, [r2], {83}	; 0x53
     e6c:	49410045 	stmdbmi	r1, {r0, r2, r6}^
     e70:	00524352 	subseq	r4, r2, r2, asr r3
     e74:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     e78:	00727450 	rsbseq	r7, r2, r0, asr r4
     e7c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     e80:	6600676e 	strvs	r6, [r0], -lr, ror #14
     e84:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     e88:	6f6c6e55 	svcvs	0x006c6e55
     e8c:	64006b63 	strvs	r6, [r0], #-2915	; 0xb63
     e90:	00617461 	rsbeq	r7, r1, r1, ror #8
     e94:	70706d74 	rsbsvc	r6, r0, r4, ror sp
     e98:	55006572 	strpl	r6, [r0, #-1394]	; 0x572
     e9c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     ea0:	646f4d5f 	strbtvs	r4, [pc], #-3423	; ea8 <__Stack_Size+0x6a8>
     ea4:	77720065 	ldrbvc	r0, [r2, -r5, rrx]!
     ea8:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
     eac:	616c6600 	cmnvs	ip, r0, lsl #12
     eb0:	74655367 	strbtvc	r5, [r5], #-871	; 0x367
     eb4:	72737500 	rsbsvc	r7, r3, #0, 10
     eb8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     ebc:	43485300 	movtmi	r5, #33536	; 0x8300
     ec0:	55005253 	strpl	r5, [r0, #-595]	; 0x253
     ec4:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     ec8:	7261485f 	rsbvc	r4, r1, #6225920	; 0x5f0000
     ecc:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
     ed0:	6f6c4665 	svcvs	0x006c4665
     ed4:	6e6f4377 	mcrvs	3, 3, r4, cr15, cr7, {3}
     ed8:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; d10 <__Stack_Size+0x510>
     edc:	53464300 	movtpl	r4, #25344	; 0x6300
     ee0:	55550052 	ldrbpl	r0, [r5, #-82]	; 0x52
     ee4:	7475505f 	ldrbtvc	r5, [r5], #-95	; 0x5f
     ee8:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     eec:	5f00676e 	svcpl	0x0000676e
     ef0:	0070615f 	rsbseq	r6, r0, pc, asr r1
     ef4:	4d727375 	ldclmi	3, cr7, [r2, #-468]!	; 0xfffffe2c
     ef8:	006e6961 	rsbeq	r6, lr, r1, ror #18
     efc:	46746567 	ldrbtmi	r6, [r4], -r7, ror #10
     f00:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     f04:	00646e45 	rsbeq	r6, r4, r5, asr #28
     f08:	73616c66 	cmnvc	r1, #26112	; 0x6600
     f0c:	7a695368 	bvc	1a55cb4 <__Stack_Size+0x1a554b4>
     f10:	50470065 	subpl	r0, r7, r5, rrx
     f14:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     f18:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     f1c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     f20:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     f24:	31524400 	cmpcc	r2, r0, lsl #8
     f28:	43490030 	movtmi	r0, #36912	; 0x9030
     f2c:	52005250 	andpl	r5, r0, #80, 4
     f30:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
     f34:	74536765 	ldrbvc	r6, [r3], #-1893	; 0x765
     f38:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     f3c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     f40:	6f4d5f4f 	svcvs	0x004d5f4f
     f44:	415f6564 	cmpmi	pc, r4, ror #10
     f48:	444f5f46 	strbmi	r5, [pc], #-3910	; f50 <__Stack_Size+0x750>
     f4c:	43537200 	cmpmi	r3, #0, 4
     f50:	72610042 	rsbvc	r0, r1, #66	; 0x42
     f54:	75007067 	strvc	r7, [r0, #-103]	; 0x67
     f58:	0064695f 	rsbeq	r6, r4, pc, asr r9
     f5c:	73616c66 	cmnvc	r1, #26112	; 0x6600
     f60:	61724568 	cmnvs	r2, r8, ror #10
     f64:	61506573 	cmpvs	r0, r3, ror r5
     f68:	00736567 	rsbseq	r6, r3, r7, ror #10
     f6c:	69727076 	ldmdbvs	r2!, {r1, r2, r4, r5, r6, ip, sp, lr}^
     f70:	5500746e 	strpl	r7, [r0, #-1134]	; 0x46e
     f74:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     f78:	4d4d0078 	stclmi	0, cr0, [sp, #-480]	; 0xfffffe20
     f7c:	00524146 	subseq	r4, r2, r6, asr #2
     f80:	4f495047 	svcmi	0x00495047
     f84:	646f4d5f 	strbtvs	r4, [pc], #-3423	; f8c <__Stack_Size+0x78c>
     f88:	49415f65 	stmdbmi	r1, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     f8c:	4552004e 	ldrbmi	r0, [r2, #-78]	; 0x4e
     f90:	56524553 			; <UNDEFINED> instruction: 0x56524553
     f94:	00304445 	eorseq	r4, r0, r5, asr #8
     f98:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     f9c:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     fa0:	45520031 	ldrbmi	r0, [r2, #-49]	; 0x31
     fa4:	56524553 			; <UNDEFINED> instruction: 0x56524553
     fa8:	00324445 	eorseq	r4, r2, r5, asr #8
     fac:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     fb0:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     fb4:	45520033 	ldrbmi	r0, [r2, #-51]	; 0x33
     fb8:	56524553 			; <UNDEFINED> instruction: 0x56524553
     fbc:	00344445 	eorseq	r4, r4, r5, asr #8
     fc0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     fc4:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     fc8:	45520035 	ldrbmi	r0, [r2, #-53]	; 0x35
     fcc:	56524553 			; <UNDEFINED> instruction: 0x56524553
     fd0:	00364445 	eorseq	r4, r6, r5, asr #8
     fd4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     fd8:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     fdc:	45520038 	ldrbmi	r0, [r2, #-56]	; 0x38
     fe0:	56524553 			; <UNDEFINED> instruction: 0x56524553
     fe4:	00394445 	eorseq	r4, r9, r5, asr #8
     fe8:	4f495047 	svcmi	0x00495047
     fec:	646f4d5f 	strbtvs	r4, [pc], #-3423	; ff4 <__Stack_Size+0x7f4>
     ff0:	46415f65 	strbmi	r5, [r1], -r5, ror #30
     ff4:	0050505f 	subseq	r5, r0, pc, asr r0
     ff8:	4f495047 	svcmi	0x00495047
     ffc:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
    1000:	55006465 	strpl	r6, [r0, #-1125]	; 0x465
    1004:	75505f55 	ldrbvc	r5, [r0, #-3925]	; 0xf55
    1008:	61684374 	smcvs	33844	; 0x8434
    100c:	6f770072 	svcvs	0x00770072
    1010:	6f006472 	svcvs	0x00006472
    1014:	00326666 	eorseq	r6, r2, r6, ror #12
    1018:	4d746573 	cfldr64mi	mvdx6, [r4, #-460]!	; 0xfffffe34
    101c:	6e417073 	mcrvs	0, 2, r7, cr1, cr3, {3}
    1020:	6d754a64 	vldmdbvs	r5!, {s9-s108}
    1024:	46420070 			; <UNDEFINED> instruction: 0x46420070
    1028:	47005241 	strmi	r5, [r0, -r1, asr #4]
    102c:	5f4f4950 	svcpl	0x004f4950
    1030:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1034:	00666544 	rsbeq	r6, r6, r4, asr #10
    1038:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
    103c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1040:	646f4d4f 	strbtvs	r4, [pc], #-3407	; 1048 <__Stack_Size+0x848>
    1044:	79545f65 	ldmdbvc	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1048:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    104c:	564e0066 	strbpl	r0, [lr], -r6, rrx
    1050:	545f4349 	ldrbpl	r4, [pc], #-841	; 1058 <__Stack_Size+0x858>
    1054:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    1058:	74006665 	strvc	r6, [r0], #-1637	; 0x665
    105c:	7573706d 	ldrbvc	r7, [r3, #-109]!	; 0x6d
    1060:	5f5f0062 	svcpl	0x005f0062
    1064:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
    1068:	00747369 	rsbseq	r7, r4, r9, ror #6
    106c:	42414e45 	submi	r4, r1, #1104	; 0x450
    1070:	4900454c 	stmdbmi	r0, {r2, r3, r6, r8, sl, lr}
    1074:	00525343 	subseq	r5, r2, r3, asr #6
    1078:	3066666f 	rsbcc	r6, r6, pc, ror #12
    107c:	42435300 	submi	r5, r3, #0, 6
    1080:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1084:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1088:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
    108c:	666f0034 			; <UNDEFINED> instruction: 0x666f0034
    1090:	47003866 	strmi	r3, [r0, -r6, ror #16]
    1094:	5f4f4950 	svcpl	0x004f4950
    1098:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    109c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    10a0:	00666544 	rsbeq	r6, r6, r4, asr #10
    10a4:	73616c66 	cmnvc	r1, #26112	; 0x6600
    10a8:	64644168 	strbtvs	r4, [r4], #-360	; 0x168
    10ac:	564e0072 			; <UNDEFINED> instruction: 0x564e0072
    10b0:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    10b4:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    10b8:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    10bc:	50470074 	subpl	r0, r7, r4, ror r0
    10c0:	535f4f49 	cmppl	pc, #292	; 0x124
    10c4:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
    10c8:	4d30355f 	cfldr32mi	mvfx3, [r0, #-380]!	; 0xfffffe84
    10cc:	55007a48 	strpl	r7, [r0, #-2632]	; 0xa48
    10d0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    10d4:	646d435f 	strbtvs	r4, [sp], #-863	; 0x35f
    10d8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    10dc:	6f4d5f4f 	svcvs	0x004d5f4f
    10e0:	4f5f6564 	svcmi	0x005f6564
    10e4:	4f5f7475 	svcmi	0x005f7475
    10e8:	45520044 	ldrbmi	r0, [r2, #-68]	; 0x44
    10ec:	56524553 			; <UNDEFINED> instruction: 0x56524553
    10f0:	30314445 	eorscc	r4, r1, r5, asr #8
    10f4:	53455200 	movtpl	r5, #20992	; 0x5200
    10f8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    10fc:	00313144 	eorseq	r3, r1, r4, asr #2
    1100:	52454349 	subpl	r4, r5, #603979777	; 0x24000001
    1104:	64646100 	strbtvs	r6, [r4], #-256	; 0x100
    1108:	53550072 	cmppl	r5, #114	; 0x72
    110c:	5f545241 	svcpl	0x00545241
    1110:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1114:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1118:	00666544 	rsbeq	r6, r6, r4, asr #10
    111c:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
    1120:	63757600 	cmnvs	r5, #0, 12
    1124:	52003233 	andpl	r3, r0, #805306371	; 0x30000003
    1128:	415f4343 	cmpmi	pc, r3, asr #6
    112c:	50324250 	eorspl	r4, r2, r0, asr r2
    1130:	70697265 	rsbvc	r7, r9, r5, ror #4
    1134:	6f6c4368 	svcvs	0x006c4368
    1138:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    113c:	54520064 	ldrbpl	r0, [r2], #-100	; 0x64
    1140:	00524343 	subseq	r4, r2, r3, asr #6
    1144:	4f495047 	svcmi	0x00495047
    1148:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
    114c:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1150:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1154:	61620066 	cmnvs	r2, r6, rrx
    1158:	66006b6e 	strvs	r6, [r0], -lr, ror #22
    115c:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
    1160:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    1164:	726f5765 	rsbvc	r5, pc, #26476544	; 0x1940000
    1168:	686c0064 	stmdavs	ip!, {r2, r5, r6}^
    116c:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
    1170:	50534900 	subspl	r4, r3, r0, lsl #18
    1174:	756a0052 	strbvc	r0, [sl, #-82]!	; 0x52
    1178:	6441706d 	strbvs	r7, [r1], #-109	; 0x6d
    117c:	47007264 	strmi	r7, [r0, -r4, ror #4]
    1180:	5f4f4950 	svcpl	0x004f4950
    1184:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    1188:	5f4e495f 	svcpl	0x004e495f
    118c:	414f4c46 	cmpmi	pc, r6, asr #24
    1190:	474e4954 	smlsldmi	r4, lr, r4, r9
    1194:	53455200 	movtpl	r5, #20992	; 0x5200
    1198:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    119c:	68003744 	stmdavs	r0, {r2, r6, r8, r9, sl, ip, sp}
    11a0:	726f5768 	rsbvc	r5, pc, #104, 14	; 0x1a00000
    11a4:	6d740064 	ldclvs	0, cr0, [r4, #-400]!	; 0xfffffe70
    11a8:	69727070 	ldmdbvs	r2!, {r4, r5, r6, ip, sp, lr}^
    11ac:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    11b0:	74530079 	ldrbvc	r0, [r3], #-121	; 0x79
    11b4:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0x261
    11b8:	756f4370 	strbvc	r4, [pc, #-880]!	; e50 <__Stack_Size+0x650>
    11bc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    11c0:	4b434c00 	blmi	10d41c8 <__Stack_Size+0x10d39c8>
    11c4:	46440052 			; <UNDEFINED> instruction: 0x46440052
    11c8:	50555f55 	subspl	r5, r5, r5, asr pc
    11cc:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
    11d0:	414c465f 	cmpmi	ip, pc, asr r6
    11d4:	305f4853 	subscc	r4, pc, r3, asr r8	; <UNPREDICTABLE>
    11d8:	30303858 	eorscc	r3, r0, r8, asr r8
    11dc:	30303037 	eorscc	r3, r0, r7, lsr r0
    11e0:	706e6900 	rsbvc	r6, lr, r0, lsl #18
    11e4:	73007475 	movwvc	r7, #1141	; 0x475
    11e8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    11ec:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    11f0:	73750065 	cmnvc	r5, #101	; 0x65
    11f4:	70417265 	subvc	r7, r1, r5, ror #4
    11f8:	64644170 	strbtvs	r4, [r4], #-368	; 0x170
    11fc:	46440072 			; <UNDEFINED> instruction: 0x46440072
    1200:	50555f55 	subspl	r5, r5, r5, asr pc
    1204:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
    1208:	414c465f 	cmpmi	ip, pc, asr r6
    120c:	305f4853 	subscc	r4, pc, r3, asr r8	; <UNPREDICTABLE>
    1210:	30303858 	eorscc	r3, r0, r8, asr r8
    1214:	30303032 	eorscc	r3, r0, r2, lsr r0
    1218:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
    121c:	53746553 	cmnpl	r4, #348127232	; 0x14c00000
    1220:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    1224:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
    1228:	6f6c7055 	svcvs	0x006c7055
    122c:	79546461 	ldmdbvc	r4, {r0, r5, r6, sl, sp, lr}^
    1230:	5f736570 	svcpl	0x00736570
    1234:	66640074 			; <UNDEFINED> instruction: 0x66640074
    1238:	6c705575 	cfldr64vs	mvdx5, [r0], #-468	; 0xfffffe2c
    123c:	4464616f 	strbtmi	r6, [r4], #-367	; 0x16f
    1240:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    1244:	5f554644 	svcpl	0x00554644
    1248:	4f4c5055 	svcmi	0x004c5055
    124c:	525f4441 	subspl	r4, pc, #1090519040	; 0x41000000
    1250:	72004d41 	andvc	r4, r0, #4160	; 0x1040
    1254:	42766365 	rsbsmi	r6, r6, #-1811939327	; 0x94000001
    1258:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    125c:	66640072 			; <UNDEFINED> instruction: 0x66640072
    1260:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
    1264:	4c505579 	cfldr64mi	mvdx5, [r0], {121}	; 0x79
    1268:	0044414f 	subeq	r4, r4, pc, asr #2
    126c:	73696874 	cmnvc	r9, #116, 16	; 0x740000
    1270:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1274:	6e654c6b 	cdpvs	12, 6, cr4, cr5, cr11, {3}
    1278:	61687300 	cmnvs	r8, r0, lsl #6
    127c:	73363532 	teqvc	r6, #209715200	; 0xc800000
    1280:	64006d75 	strvs	r6, [r0], #-3445	; 0xd75
    1284:	70557566 	subsvc	r7, r5, r6, ror #10
    1288:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
    128c:	69547942 	ldmdbvs	r4, {r1, r6, r8, fp, ip, sp, lr}^
    1290:	756f656d 	strbvc	r6, [pc, #-1389]!	; d2b <__Stack_Size+0x52b>
    1294:	66640074 			; <UNDEFINED> instruction: 0x66640074
    1298:	73754275 	cmnvc	r5, #1342177287	; 0x50000007
    129c:	505f0079 	subspl	r0, pc, r9, ror r0	; <UNPREDICTABLE>
    12a0:	00544f4c 	subseq	r4, r4, ip, asr #30
    12a4:	5f554644 	svcpl	0x00554644
    12a8:	4f4c5055 	svcmi	0x004c5055
    12ac:	465f4441 	ldrbmi	r4, [pc], -r1, asr #8
    12b0:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    12b4:	3858305f 	ldmdacc	r8, {r0, r1, r2, r3, r4, r6, ip, sp}^
    12b8:	30363030 	eorscc	r3, r6, r0, lsr r0
    12bc:	64003030 	strvs	r3, [r0], #-48	; 0x30
    12c0:	632e7566 	teqvs	lr, #427819008	; 0x19800000
    12c4:	65737500 	ldrbvs	r7, [r3, #-1280]!	; 0x500
    12c8:	61705372 	cmnvs	r0, r2, ror r3
    12cc:	69006563 	stmdbvs	r0, {r0, r1, r5, r6, r8, sl, sp, lr}
    12d0:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
    12d4:	6d00676e 	stcvs	7, cr6, [r0, #-440]	; 0xfffffe48
    12d8:	65736d65 	ldrbvs	r6, [r3, #-3429]!	; 0xd65
    12dc:	70750074 	rsbsvc	r0, r5, r4, ror r0
    12e0:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
    12e4:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    12e8:	6e654c6b 	cdpvs	12, 6, cr4, cr5, cr11, {3}
    12ec:	55464400 	strbpl	r4, [r6, #-1024]	; 0x400
    12f0:	4c50555f 	cfldr64mi	mvdx5, [r0], {95}	; 0x5f
    12f4:	5f44414f 	svcpl	0x0044414f
    12f8:	53414c46 	movtpl	r4, #7238	; 0x1c46
    12fc:	58305f48 	ldmdapl	r0!, {r3, r6, r8, r9, sl, fp, ip, lr}
    1300:	38303038 	ldmdacc	r0!, {r3, r4, r5, ip, sp}
    1304:	00303030 	eorseq	r3, r0, r0, lsr r0
    1308:	5f554644 	svcpl	0x00554644
    130c:	4f4c5055 	svcmi	0x004c5055
    1310:	4e5f4441 	cdpmi	4, 5, cr4, cr15, cr1, {2}
    1314:	00454e4f 	subeq	r4, r5, pc, asr #28
    1318:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
    131c:	6d726946 	ldclvs	9, cr6, [r2, #-280]!	; 0xfffffee8
    1320:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
    1324:	006e654c 	rsbeq	r6, lr, ip, asr #10
    1328:	41756664 	cmnmi	r5, r4, ror #12
    132c:	74537070 	ldrbvc	r7, [r3], #-112	; 0x70
    1330:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1334:	61687300 	cmnvs	r8, r0, lsl #6
    1338:	5f363532 	svcpl	0x00363532
    133c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    1340:	5f007374 	svcpl	0x00007374
    1344:	53554644 	cmppl	r5, #68, 12	; 0x4400000
    1348:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    134c:	656c0073 	strbvs	r0, [ip, #-115]!	; 0x73
    1350:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1354:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
    1358:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
    135c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1360:	53620065 	cmnpl	r2, #101	; 0x65
    1364:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1368:	66640073 			; <UNDEFINED> instruction: 0x66640073
    136c:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
    1370:	4c4e4479 	cfstrdmi	mvd4, [lr], {121}	; 0x79
    1374:	0044414f 	subeq	r4, r4, pc, asr #2
    1378:	6f507762 	svcvs	0x00507762
    137c:	69546c6c 	ldmdbvs	r4, {r2, r3, r5, r6, sl, fp, sp, lr}^
    1380:	756f656d 	strbvc	r6, [pc, #-1389]!	; e1b <__Stack_Size+0x61b>
    1384:	62003074 	andvs	r3, r0, #116	; 0x74
    1388:	6c6f5077 	stclvs	0, cr5, [pc], #-476	; 11b4 <__Stack_Size+0x9b4>
    138c:	6d69546c 	cfstrdvs	mvd5, [r9, #-432]!	; 0xfffffe50
    1390:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    1394:	77620031 			; <UNDEFINED> instruction: 0x77620031
    1398:	6c6c6f50 	stclvs	15, cr6, [ip], #-320	; 0xfffffec0
    139c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    13a0:	3274756f 	rsbscc	r7, r4, #465567744	; 0x1bc00000
    13a4:	61687300 	cmnvs	r8, r0, lsl #6
    13a8:	5f363532 	svcpl	0x00363532
    13ac:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xf63
    13b0:	00747865 	rsbseq	r7, r4, r5, ror #16
    13b4:	49474542 	stmdbmi	r7, {r1, r6, r8, sl, lr}^
    13b8:	4e494e4e 	cdpmi	14, 4, cr4, cr9, cr14, {2}
    13bc:	66640047 	strbtvs	r0, [r4], -r7, asr #32
    13c0:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
    13c4:	61745379 	cmnvs	r4, r9, ror r3
    13c8:	00737574 	rsbseq	r7, r3, r4, ror r5
    13cc:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
    13d0:	706f635f 	rsbvc	r6, pc, pc, asr r3	; <UNPREDICTABLE>
    13d4:	6f6c5f79 	svcvs	0x006c5f79
    13d8:	44006b63 	strmi	r6, [r0], #-2915	; 0xb63
    13dc:	555f5546 	ldrbpl	r5, [pc, #-1350]	; e9e <__Stack_Size+0x69e>
    13e0:	414f4c50 	cmpmi	pc, r0, asr ip	; <UNPREDICTABLE>
    13e4:	4c465f44 	mcrrmi	15, 4, r5, r6, cr4
    13e8:	5f485341 	svcpl	0x00485341
    13ec:	30385830 	eorscc	r5, r8, r0, lsr r8
    13f0:	30303530 	eorscc	r3, r0, r0, lsr r5
    13f4:	66640030 			; <UNDEFINED> instruction: 0x66640030
    13f8:	74654775 	strbtvc	r4, [r5], #-1909	; 0x775
    13fc:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1400:	73750065 	cmnvc	r5, #101	; 0x65
    1404:	70417265 	subvc	r7, r1, r5, ror #4
    1408:	646e4570 	strbtvs	r4, [lr], #-1392	; 0x570
    140c:	44494d00 	strbmi	r4, [r9], #-3328	; 0xd00
    1410:	00454c44 	subeq	r4, r5, r4, asr #24
    1414:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
    1418:	6f6c7055 	svcvs	0x006c7055
    141c:	79546461 	ldmdbvc	r4, {r0, r5, r6, sl, sp, lr}^
    1420:	6e006570 	cfrshl64vs	mvdx0, mvdx0, r6
    1424:	74537765 	ldrbvc	r7, [r3], #-1893	; 0x765
    1428:	00657461 	rsbeq	r7, r5, r1, ror #8
    142c:	43756664 	cmnmi	r5, #100, 12	; 0x6400000
    1430:	4279706f 	rsbsmi	r7, r9, #111	; 0x6f
    1434:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    1438:	456f5472 	strbmi	r5, [pc, #-1138]!	; fce <__Stack_Size+0x7ce>
    143c:	00636578 	rsbeq	r6, r3, r8, ror r5
    1440:	61745362 	cmnvs	r4, r2, ror #6
    1444:	32006574 	andcc	r6, r0, #116, 10	; 0x1d000000
    1448:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    144c:	3532632f 	ldrcc	r6, [r2, #-815]!	; 0x32f
    1450:	2e393135 	mrccs	1, 1, r3, cr9, cr5, {1}
    1454:	63780063 	cmnvs	r8, #99	; 0x63
    1458:	756f645f 	strbvc	r6, [pc, #-1119]!	; 1001 <__Stack_Size+0x801>
    145c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1460:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    1464:	635f3931 	cmpvs	pc, #802816	; 0xc4000
    1468:	0079706f 	rsbseq	r7, r9, pc, rrx
    146c:	35353263 	ldrcc	r3, [r5, #-611]!	; 0x263
    1470:	625f3931 	subsvs	r3, pc, #802816	; 0xc4000
    1474:	5f657361 	svcpl	0x00657361
    1478:	32660078 	rsbcc	r0, r6, #120	; 0x78
    147c:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1480:	6464615f 	strbtvs	r6, [r4], #-351	; 0x15f
    1484:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    1488:	5f393135 	svcpl	0x00393135
    148c:	5f6c756d 	svcpl	0x006c756d
    1490:	31780063 	cmncc	r8, r3, rrx
    1494:	66007173 			; <UNDEFINED> instruction: 0x66007173
    1498:	31353532 	teqcc	r5, r2, lsr r5
    149c:	6e6f5f39 	mcrvs	15, 3, r5, cr15, cr9, {1}
    14a0:	317a0065 	cmncc	sl, r5, rrx
    14a4:	63007173 	movwvs	r7, #371	; 0x173
    14a8:	31353532 	teqcc	r5, r2, lsr r5
    14ac:	6d735f39 	ldclvs	15, cr5, [r3, #-228]!	; 0xffffff1c
    14b0:	00746c75 	rsbseq	r6, r4, r5, ror ip
    14b4:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    14b8:	735f3931 	cmpvc	pc, #802816	; 0xc4000
    14bc:	78006275 	stmdavc	r0, {r0, r2, r4, r5, r6, r9, sp, lr}
    14c0:	00317a31 	eorseq	r7, r1, r1, lsr sl
    14c4:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    14c8:	6e5f3931 	mrcvs	9, 2, r3, cr15, cr1, {1}
    14cc:	616d726f 	cmnvs	sp, pc, ror #4
    14d0:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0x96c
    14d4:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    14d8:	5f393135 	svcpl	0x00393135
    14dc:	5f6c756d 	svcpl	0x006c756d
    14e0:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    14e4:	636e6974 	cmnvs	lr, #116, 18	; 0x1d0000
    14e8:	32660074 	rsbcc	r0, r6, #116	; 0x74
    14ec:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    14f0:	766e695f 			; <UNDEFINED> instruction: 0x766e695f
    14f4:	69645f5f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    14f8:	6e697473 	mcrvs	4, 3, r7, cr9, cr3, {3}
    14fc:	66007463 	strvs	r7, [r0], -r3, ror #8
    1500:	31353532 	teqcc	r5, r2, lsr r5
    1504:	65735f39 	ldrbvs	r5, [r3, #-3897]!	; 0xf39
    1508:	7463656c 	strbtvc	r6, [r3], #-1388	; 0x56c
    150c:	73657200 	cmnvc	r5, #0, 4
    1510:	00746c75 	rsbseq	r6, r4, r5, ror ip
    1514:	645f6378 	ldrbvs	r6, [pc], #-888	; 151c <__Stack_Size+0xd1c>
    1518:	61666669 	cmnvs	r6, r9, ror #12
    151c:	63006464 	movwvs	r6, #1124	; 0x464
    1520:	00706d6f 	rsbseq	r6, r0, pc, ror #26
    1524:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    1528:	655f3931 	ldrbvs	r3, [pc, #-2353]	; bff <__Stack_Size+0x3ff>
    152c:	5f720071 	svcpl	0x00720071
    1530:	0074756f 	rsbseq	r7, r4, pc, ror #10
    1534:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    1538:	65007970 	strvs	r7, [r0, #-2416]	; 0x970
    153c:	35353264 	ldrcc	r3, [r5, #-612]!	; 0x264
    1540:	705f3931 	subsvc	r3, pc, r1, lsr r9	; <UNPREDICTABLE>
    1544:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1548:	69726170 	ldmdbvs	r2!, {r4, r5, r6, r8, sp, lr}^
    154c:	65007974 	strvs	r7, [r0, #-2420]	; 0x974
    1550:	35353264 	ldrcc	r3, [r5, #-612]!	; 0x264
    1554:	615f3931 	cmpvs	pc, r1, lsr r9	; <UNPREDICTABLE>
    1558:	65006464 	strvs	r6, [r0, #-1124]	; 0x464
    155c:	35353264 	ldrcc	r3, [r5, #-612]!	; 0x264
    1560:	745f3931 	ldrbvc	r3, [pc], #-2353	; 1568 <__Stack_Size+0xd68>
    1564:	755f7972 	ldrbvc	r7, [pc, #-2418]	; bfa <__Stack_Size+0x3fa>
    1568:	6361706e 	cmnvs	r1, #110	; 0x6e
    156c:	6465006b 	strbtvs	r0, [r5], #-107	; 0x6b
    1570:	31353532 	teqcc	r5, r2, lsr r5
    1574:	72705f39 	rsbsvc	r5, r0, #57, 30	; 0xe4
    1578:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
    157c:	35320074 	ldrcc	r0, [r2, #-116]!	; 0x74
    1580:	2f393135 	svccs	0x00393135
    1584:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    1588:	2e393135 	mrccs	1, 1, r3, cr9, cr5, {1}
    158c:	64650063 	strbtvs	r0, [r5], #-99	; 0x63
    1590:	31353532 	teqcc	r5, r2, lsr r5
    1594:	6d735f39 	ldclvs	15, cr5, [r3, #-228]!	; 0xffffff1c
    1598:	00746c75 	rsbseq	r6, r4, r5, ror ip
    159c:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    15a0:	6c5f3931 	mrrcvs	9, 3, r3, pc, cr1	; <UNPREDICTABLE>
    15a4:	0064616f 	rsbeq	r6, r4, pc, ror #2
    15a8:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    15ac:	5f393135 	svcpl	0x00393135
    15b0:	72706e75 	rsbsvc	r6, r0, #1872	; 0x750
    15b4:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
    15b8:	64650074 	strbtvs	r0, [r5], #-116	; 0x74
    15bc:	31353532 	teqcc	r5, r2, lsr r5
    15c0:	656e5f39 	strbvs	r5, [lr, #-3897]!	; 0xf39
    15c4:	61727475 	cmnvs	r2, r5, ror r4
    15c8:	3266006c 	rsbcc	r0, r6, #108	; 0x6c
    15cc:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    15d0:	7271735f 	rsbsvc	r7, r1, #2080374785	; 0x7c000001
    15d4:	32660074 	rsbcc	r0, r6, #116	; 0x74
    15d8:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    15dc:	67656e5f 			; <UNDEFINED> instruction: 0x67656e5f
    15e0:	32646500 	rsbcc	r6, r4, #0, 10
    15e4:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    15e8:	756f645f 	strbvc	r6, [pc, #-1119]!	; 1191 <__Stack_Size+0x991>
    15ec:	00656c62 	rsbeq	r6, r5, r2, ror #24
    15f0:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    15f4:	5f393135 	svcpl	0x00393135
    15f8:	65007470 	strvs	r7, [r0, #-1136]	; 0x470
    15fc:	35353264 	ldrcc	r3, [r5, #-612]!	; 0x264
    1600:	625f3931 	subsvs	r3, pc, #802816	; 0xc4000
    1604:	00657361 	rsbeq	r7, r5, r1, ror #6
    1608:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    160c:	5f393135 	svcpl	0x00393135
    1610:	79706f63 	ldmdbvc	r0!, {r0, r1, r5, r6, r8, r9, sl, fp, sp, lr}^
    1614:	32646500 	rsbcc	r6, r4, #0, 10
    1618:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    161c:	6500645f 	strvs	r6, [r0, #-1119]	; 0x45f
    1620:	35353264 	ldrcc	r3, [r5, #-612]!	; 0x264
    1624:	6b5f3931 	blvs	17cfaf0 <__Stack_Size+0x17cf2f0>
    1628:	61687300 	cmnvs	r8, r0, lsl #6
    162c:	5f323135 	svcpl	0x00323135
    1630:	616e6966 	cmnvs	lr, r6, ror #18
    1634:	6e69006c 	cdpvs	0, 6, cr0, cr9, cr12, {3}
    1638:	625f7469 	subsvs	r7, pc, #1761607680	; 0x69000000
    163c:	6b636f6c 	blvs	18dd3f4 <__Stack_Size+0x18dcbf4>
    1640:	35353200 	ldrcc	r3, [r5, #-512]!	; 0x200
    1644:	652f3931 	strvs	r3, [pc, #-2353]!	; d1b <__Stack_Size+0x51b>
    1648:	67697364 	strbvs	r7, [r9, -r4, ror #6]!
    164c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    1650:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    1654:	5f393135 	svcpl	0x00393135
    1658:	70657270 	rsbvc	r7, r5, r0, ror r2
    165c:	00657261 	rsbeq	r7, r5, r1, ror #4
    1660:	35616873 	strbcc	r6, [r1, #-2163]!	; 0x873
    1664:	695f3231 	ldmdbvs	pc, {r0, r4, r5, r9, ip, sp}^	; <UNPREDICTABLE>
    1668:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    166c:	735f6c61 	cmpvc	pc, #24832	; 0x6100
    1670:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    1674:	61687300 	cmnvs	r8, r0, lsl #6
    1678:	5f323135 	svcpl	0x00323135
    167c:	00746567 	rsbseq	r6, r4, r7, ror #10
    1680:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    1684:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    1688:	78650065 	stmdavc	r5!, {r0, r2, r5, r6}^
    168c:	646e6170 	strbtvs	r6, [lr], #-368	; 0x170
    1690:	79656b5f 	stmdbvc	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}^
    1694:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xf00
    1698:	0070665f 	rsbseq	r6, r0, pc, asr r6
    169c:	72636573 	rsbvc	r6, r3, #482344960	; 0x1cc00000
    16a0:	65007465 	strvs	r7, [r0, #-1125]	; 0x465
    16a4:	6e617078 	mcrvs	0, 3, r7, cr1, cr8, {3}
    16a8:	00646564 	rsbeq	r6, r4, r4, ror #10
    16ac:	6b636170 	blvs	18d9c74 <__Stack_Size+0x18d9474>
    16b0:	5f006465 	svcpl	0x00006465
    16b4:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
    16b8:	5f343674 	svcpl	0x00343674
    16bc:	72700074 	rsbsvc	r0, r0, #116	; 0x74
    16c0:	78696665 	stmdavc	r9!, {r0, r2, r5, r6, r9, sl, sp, lr}^
    16c4:	7a69735f 	bvc	1a5e448 <__Stack_Size+0x1a5dc48>
    16c8:	64650065 	strbtvs	r0, [r5], #-101	; 0x65
    16cc:	31353532 	teqcc	r5, r2, lsr r5
    16d0:	726f5f39 	rsbvc	r5, pc, #57, 30	; 0xe4
    16d4:	00726564 	rsbseq	r6, r2, r4, ror #10
    16d8:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    16dc:	665f656d 	ldrbvs	r6, [pc], -sp, ror #10
    16e0:	5f6d6f72 	svcpl	0x006d6f72
    16e4:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    16e8:	61680073 	smcvs	32771	; 0x8003
    16ec:	6d5f6873 	ldclvs	8, cr6, [pc, #-460]	; 1528 <__Stack_Size+0xd28>
    16f0:	61737365 	cmnvs	r3, r5, ror #6
    16f4:	68006567 	stmdavs	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    16f8:	5f687361 	svcpl	0x00687361
    16fc:	68746977 	ldmdavs	r4!, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    1700:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0x5f
    1704:	00786966 	rsbseq	r6, r8, r6, ror #18
    1708:	69736465 	ldmdbvs	r3!, {r0, r2, r5, r6, sl, sp, lr}^
    170c:	735f6e67 	cmpvc	pc, #1648	; 0x670
    1710:	745f6365 	ldrbvc	r6, [pc], #-869	; 1718 <__Stack_Size+0xf18>
    1714:	75705f6f 	ldrbvc	r5, [r0, #-3951]!	; 0xf6f
    1718:	6d730062 	ldclvs	0, cr0, [r3, #-392]!	; 0xfffffe78
    171c:	6361705f 	cmnvs	r1, #95	; 0x5f
    1720:	6873006b 	ldmdavs	r3!, {r0, r1, r3, r5, r6}^
    1724:	32313561 	eorscc	r3, r1, #406847488	; 0x18400000
    1728:	6174735f 	cmnvs	r4, pc, asr r3
    172c:	65006574 	strvs	r6, [r0, #-1396]	; 0x574
    1730:	67697364 	strbvs	r7, [r9, -r4, ror #6]!
    1734:	65765f6e 	ldrbvs	r5, [r6, #-3950]!	; 0xf6e
    1738:	79666972 	stmdbvc	r6!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    173c:	61687300 	cmnvs	r8, r0, lsl #6
    1740:	5f323135 	svcpl	0x00323135
    1744:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    1748:	61687300 	cmnvs	r8, r0, lsl #6
    174c:	5f323135 	svcpl	0x00323135
    1750:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    1754:	3266006b 	rsbcc	r0, r6, #107	; 0x6b
    1758:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    175c:	72657a5f 	rsbvc	r7, r5, #389120	; 0x5f000
    1760:	7865006f 	stmdavc	r5!, {r0, r1, r2, r3, r5, r6}^
    1764:	32353270 	eorscc	r3, r5, #112, 4
    1768:	35320033 	ldrcc	r0, [r2, #-51]!	; 0x33
    176c:	2f393135 	svccs	0x00393135
    1770:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    1774:	632e3931 	teqvs	lr, #802816	; 0xc4000
    1778:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    177c:	5f393135 	svcpl	0x00393135
    1780:	00766e69 	rsbseq	r6, r6, r9, ror #28
    1784:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    1788:	6d5f3931 	ldclvs	9, cr3, [pc, #-196]	; 16cc <__Stack_Size+0xecc>
    178c:	63006c75 	movwvs	r6, #3189	; 0xc75
    1790:	69646e6f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1794:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1798:	6e696d00 	cdpvs	13, 6, cr6, cr9, cr0, {0}
    179c:	00707375 	rsbseq	r7, r0, r5, ror r3
    17a0:	6c657270 	sfmvs	f7, 2, [r5], #-448	; 0xfffffe40
    17a4:	5f64616f 	svcpl	0x0064616f
    17a8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    17ac:	72700073 	rsbsvc	r0, r0, #115	; 0x73
    17b0:	616f6c65 	cmnvs	pc, r5, ror #24
    17b4:	69625f64 	stmdbvs	r2!, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    17b8:	66007374 			; <UNDEFINED> instruction: 0x66007374
    17bc:	6d697270 	sfmvs	f7, 2, [r9, #-448]!	; 0xfffffe40
    17c0:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
    17c4:	62720076 	rsbsvs	r0, r2, #118	; 0x76
    17c8:	00737469 	rsbseq	r7, r3, r9, ror #8
    17cc:	73756c70 	cmnvc	r5, #112, 24	; 0x7000
    17d0:	68730061 	ldmdavs	r3!, {r0, r5, r6}^
    17d4:	5f746669 	svcpl	0x00746669
    17d8:	69625f6e 	stmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    17dc:	66007374 			; <UNDEFINED> instruction: 0x66007374
    17e0:	6d697270 	sfmvs	f7, 2, [r9, #-448]!	; 0xfffffe40
    17e4:	65735f65 	ldrbvs	r5, [r3, #-3941]!	; 0xf65
    17e8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0x56c
    17ec:	72706600 	rsbsvc	r6, r0, #0, 12
    17f0:	5f656d69 	svcpl	0x00656d69
    17f4:	00627573 	rsbeq	r7, r2, r3, ror r5
    17f8:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    17fc:	615f656d 	cmpvs	pc, sp, ror #10
    1800:	6d006464 	cfstrsvs	mvf6, [r0, #-400]	; 0xfffffe70
    1804:	695f6e69 	ldmdbvs	pc, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    1808:	6d00746e 	cfstrsvs	mvf7, [r0, #-440]	; 0xfffffe48
    180c:	6c75646f 	cfldrdvs	mvd6, [r5], #-444	; 0xfffffe44
    1810:	66007375 			; <UNDEFINED> instruction: 0x66007375
    1814:	6d697270 	sfmvs	f7, 2, [r9, #-448]!	; 0xfffffe40
    1818:	756d5f65 	strbvc	r5, [sp, #-3941]!	; 0xf65
    181c:	7066006c 	rsbvc	r0, r6, ip, rrx
    1820:	656d6972 	strbvs	r6, [sp, #-2418]!	; 0x972
    1824:	72657a5f 	rsbvc	r7, r5, #389120	; 0x5f000
    1828:	6172006f 	cmnvs	r2, pc, rrx
    182c:	72745f77 	rsbsvc	r5, r4, #476	; 0x1dc
    1830:	75735f79 	ldrbvc	r5, [r3, #-3961]!	; 0xf79
    1834:	72700062 	rsbsvc	r0, r0, #98	; 0x62
    1838:	5f656d69 	svcpl	0x00656d69
    183c:	0062736d 	rsbeq	r7, r2, sp, ror #6
    1840:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    1844:	655f656d 	ldrbvs	r6, [pc, #-1389]	; 12df <__Stack_Size+0xadf>
    1848:	70660071 	rsbvc	r0, r6, r1, ror r0
    184c:	656d6972 	strbvs	r6, [sp, #-2418]!	; 0x972
    1850:	616f6c5f 	cmnvs	pc, pc, asr ip	; <UNPREDICTABLE>
    1854:	70660064 	rsbvc	r0, r6, r4, rrx
    1858:	656d6972 	strbvs	r6, [sp, #-2418]!	; 0x972
    185c:	706f635f 	rsbvc	r6, pc, pc, asr r3	; <UNPREDICTABLE>
    1860:	35320079 	ldrcc	r0, [r2, #-121]!	; 0x79
    1864:	2f393135 	svccs	0x00393135
    1868:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    186c:	632e656d 	teqvs	lr, #457179136	; 0x1b400000
    1870:	65727000 	ldrbvs	r7, [r2, #-0]!
    1874:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
    1878:	746f745f 	strbtvc	r7, [pc], #-1119	; 1880 <__Stack_Size+0x1080>
    187c:	66006c61 	strvs	r6, [r0], -r1, ror #24
    1880:	6d697270 	sfmvs	f7, 2, [r9, #-448]!	; 0xfffffe40
    1884:	6f6e5f65 	svcvs	0x006e5f65
    1888:	6c616d72 	stclvs	13, cr6, [r1], #-456	; 0xfffffe38
    188c:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1890:	5f776172 	svcpl	0x00776172
    1894:	00646461 	rsbeq	r6, r4, r1, ror #8
    1898:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    189c:	6f5f656d 	svcvs	0x005f656d
    18a0:	3200656e 	andcc	r6, r0, #461373440	; 0x1b800000
    18a4:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    18a8:	726f6d2f 	rsbvc	r6, pc, #3008	; 0xbc0
    18ac:	35326870 	ldrcc	r6, [r2, #-2160]!	; 0x870
    18b0:	2e393135 	mrccs	1, 1, r3, cr9, cr5, {1}
    18b4:	70790063 	rsbsvc	r0, r9, r3, rrx
    18b8:	0073756c 	rsbseq	r7, r3, ip, ror #10
    18bc:	70726f6d 	rsbsvc	r6, r2, sp, ror #30
    18c0:	35353268 	ldrcc	r3, [r5, #-616]!	; 0x268
    18c4:	655f3931 	ldrbvs	r3, [pc, #-2353]	; f9b <__Stack_Size+0x79b>
    18c8:	6d006d32 	stcvs	13, cr6, [r0, #-200]	; 0xffffff38
    18cc:	79653278 	stmdbvc	r5!, {r3, r4, r5, r6, r9, ip, sp}^
    18d0:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
    18d4:	6d6f6774 	stclvs	7, cr6, [pc, #-464]!	; 170c <__Stack_Size+0xf0c>
    18d8:	00797265 	rsbseq	r7, r9, r5, ror #4
    18dc:	65327965 	ldrvs	r7, [r2, #-2405]!	; 0x965
    18e0:	6f6d0078 	svcvs	0x006d0078
    18e4:	32687072 	rsbcc	r7, r8, #114	; 0x72
    18e8:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    18ec:	65326d5f 	ldrvs	r6, [r2, #-3423]!	; 0xd5f
    18f0:	696d7900 	stmdbvs	sp!, {r8, fp, ip, sp, lr}^
    18f4:	0073756e 	rsbseq	r7, r3, lr, ror #10
    18f8:	6c67736d 	stclvs	3, cr7, [r7], #-436	; 0xfffffe4c
    18fc:	6c006e65 	stcvs	14, cr6, [r0], {101}	; 0x65
    1900:	00746665 	rsbseq	r6, r4, r5, ror #12
    1904:	6c6c6966 	stclvs	9, cr6, [ip], #-408	; 0xfffffe68
    1908:	61687300 	cmnvs	r8, r0, lsl #6
    190c:	5f363532 	svcpl	0x00363532
    1910:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
    1914:	70006873 	andvc	r6, r0, r3, ror r8
    1918:	006e6461 	rsbeq	r6, lr, r1, ror #8
    191c:	68676968 	stmdavs	r7!, {r3, r5, r6, r8, fp, sp, lr}^
    1920:	35353200 	ldrcc	r3, [r5, #-512]!	; 0x200
    1924:	732f3931 	teqvc	pc, #802816	; 0xc4000
    1928:	35326168 	ldrcc	r6, [r2, #-360]!	; 0x168
    192c:	00632e36 	rsbeq	r2, r3, r6, lsr lr
    1930:	32616873 	rsbcc	r6, r1, #7536640	; 0x730000
    1934:	705f3635 	subsvc	r3, pc, r5, lsr r6	; <UNPREDICTABLE>
    1938:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    193c:	73007373 	movwvc	r7, #883	; 0x373
    1940:	35326168 	ldrcc	r6, [r2, #-360]!	; 0x168
    1944:	70755f36 	rsbsvc	r5, r5, r6, lsr pc
    1948:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
    194c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1950:	74003170 	strvc	r3, [r0], #-368	; 0x170
    1954:	32706d65 	rsbscc	r6, r0, #6464	; 0x1940
    1958:	61687300 	cmnvs	r8, r0, lsl #6
    195c:	5f363532 	svcpl	0x00363532
    1960:	64646170 	strbtvs	r6, [r4], #-368	; 0x170
    1964:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1968:	65676964 	strbvs	r6, [r7, #-2404]!	; 0x964
    196c:	6c007473 	cfstrsvs	mvf7, [r0], {115}	; 0x73
    1970:	00747361 	rsbseq	r7, r4, r1, ror #6
    1974:	61746f74 	cmnvs	r4, r4, ror pc
    1978:	69735f6c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    197c:	7700657a 	smlsdxvc	r0, sl, r5, r6
    1980:	00353169 	eorseq	r3, r5, r9, ror #2
    1984:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0x16c
    1988:	7a69735f 	bvc	1a5e70c <__Stack_Size+0x1a5df0c>
    198c:	666f0065 	strbtvs	r0, [pc], -r5, rrx
    1990:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
    1994:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1998:	6f720070 	svcvs	0x00720070
    199c:	00343674 	eorseq	r3, r4, r4, ror r6
    19a0:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
    19a4:	00343665 	eorseq	r3, r4, r5, ror #12
    19a8:	31353532 	teqcc	r5, r2, lsr r5
    19ac:	68732f39 	ldmdavs	r3!, {r0, r3, r4, r5, r8, r9, sl, fp, sp}^
    19b0:	32313561 	eorscc	r3, r1, #406847488	; 0x18400000
    19b4:	6c00632e 	stcvs	3, cr6, [r0], {46}	; 0x2e
    19b8:	3664616f 	strbtcc	r6, [r4], -pc, ror #2
    19bc:	6f720034 	svcvs	0x00720034
    19c0:	5f646e75 	svcpl	0x00646e75
    19c4:	6c66006b 	stclvs	0, cr0, [r6], #-428	; 0xfffffe54
    19c8:	43687361 	cmnmi	r8, #-2080374783	; 0x84000001
    19cc:	6e00746e 	cdpvs	4, 0, cr7, cr0, cr14, {3}
    19d0:	61487765 	cmpvs	r8, r5, ror #14
    19d4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    19d8:	616c6600 	cmnvs	ip, r0, lsl #12
    19dc:	64416873 	strbvs	r6, [r1], #-2163	; 0x873
    19e0:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    19e4:	6f720073 	svcvs	0x00720073
    19e8:	4143746f 	cmpmi	r3, pc, ror #8
    19ec:	616d6900 	cmnvs	sp, r0, lsl #18
    19f0:	75426567 	strbvc	r6, [r2, #-1383]	; 0x567
    19f4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    19f8:	6f687300 	svcvs	0x00687300
    19fc:	45646c75 	strbmi	r6, [r4, #-3189]!	; 0xc75
    1a00:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0x172
    1a04:	73616c46 	cmnvc	r1, #17920	; 0x4600
    1a08:	466e4f68 	strbtmi	r4, [lr], -r8, ror #30
    1a0c:	006c6961 	rsbeq	r6, ip, r1, ror #18
    1a10:	62676973 	rsbvs	r6, r7, #1884160	; 0x1cc000
    1a14:	00666675 	rsbeq	r6, r6, r5, ror r6
    1a18:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1a1c:	69537265 	ldmdbvs	r3, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1a20:	7500657a 	strvc	r6, [r0, #-1402]	; 0x57a
    1a24:	7571696e 	ldrbvc	r6, [r1, #-2414]!	; 0x96e
    1a28:	00444965 	subeq	r4, r4, r5, ror #18
    1a2c:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
    1a30:	00632e65 	rsbeq	r2, r3, r5, ror #28
    1a34:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    1a38:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1a3c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1a40:	47007265 	strmi	r7, [r0, -r5, ror #4]
    1a44:	78547465 	ldmdavc	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1a48:	6c617453 	cfstrdvs	mvd7, [r1], #-332	; 0xfffffeb4
    1a4c:	6174536c 	cmnvs	r4, ip, ror #6
    1a50:	00737574 	rsbseq	r7, r3, r4, ror r5
    1a54:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1a58:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    1a5c:	31667542 	cmncc	r6, r2, asr #10
    1a60:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1a64:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1a68:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    1a6c:	696c6156 	stmdbvs	ip!, {r1, r2, r4, r6, r8, sp, lr}^
    1a70:	65530064 	ldrbvs	r0, [r3, #-100]	; 0x64
    1a74:	756f4474 	strbvc	r4, [pc, #-1140]!	; 1608 <__Stack_Size+0xe08>
    1a78:	42656c42 	rsbmi	r6, r5, #16896	; 0x4200
    1a7c:	45666675 	strbmi	r6, [r6, #-1653]!	; 0x675
    1a80:	61745350 	cmnvs	r4, r0, asr r3
    1a84:	45006c6c 	strmi	r6, [r0, #-3180]	; 0xc6c
    1a88:	42445f50 	submi	r5, r4, #80, 30	; 0x140
    1a8c:	4f5f4655 	svcmi	0x005f4655
    1a90:	47005455 	smlsdmi	r0, r5, r4, r5
    1a94:	50457465 	subpl	r7, r5, r5, ror #8
    1a98:	74537852 	ldrbvc	r7, [r3], #-2130	; 0x852
    1a9c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1aa0:	676f5400 	strbvs	r5, [pc, -r0, lsl #8]!
    1aa4:	44656c67 	strbtmi	r6, [r5], #-3175	; 0xc67
    1aa8:	5f474f54 	svcpl	0x00474f54
    1aac:	47005854 	smlsdmi	r0, r4, r8, r5
    1ab0:	50457465 	subpl	r7, r5, r5, ror #8
    1ab4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1ab8:	00737365 	rsbseq	r7, r3, r5, ror #6
    1abc:	5f50455f 	svcpl	0x0050455f
    1ac0:	46554244 	ldrbmi	r4, [r5], -r4, asr #4
    1ac4:	5249445f 	subpl	r4, r9, #1593835520	; 0x5f000000
    1ac8:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1acc:	52545349 	subspl	r5, r4, #603979777	; 0x24000001
    1ad0:	74794200 	ldrbtvc	r4, [r9], #-512	; 0x200
    1ad4:	61775365 	cmnvs	r7, r5, ror #6
    1ad8:	4e770070 	mrcmi	0, 3, r0, cr7, cr0, {3}
    1adc:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1ae0:	4300736b 	movwmi	r7, #875	; 0x36b
    1ae4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1ae8:	474f5444 	strbmi	r5, [pc, -r4, asr #8]
    1aec:	0058525f 	subseq	r5, r8, pc, asr r2
    1af0:	64644162 	strbtvs	r4, [r4], #-354	; 0x162
    1af4:	65470072 	strbvs	r0, [r7, #-114]	; 0x72
    1af8:	544e4374 	strbpl	r4, [lr], #-884	; 0x374
    1afc:	65470052 	strbvs	r0, [r7, #-82]	; 0x52
    1b00:	53785274 	cmnpl	r8, #116, 4	; 0x40000007
    1b04:	6c6c6174 	stfvse	f6, [ip], #-464	; 0xfffffe30
    1b08:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1b0c:	47007375 	smlsdxmi	r0, r5, r3, r7
    1b10:	41447465 	cmpmi	r4, r5, ror #8
    1b14:	00524444 	subseq	r4, r2, r4, asr #8
    1b18:	756f4377 	strbvc	r4, [pc, #-887]!	; 17a9 <__Stack_Size+0xfa9>
    1b1c:	5300746e 	movwpl	r7, #1134	; 0x46e
    1b20:	50457465 	subpl	r7, r5, r5, ror #8
    1b24:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1b28:	00737365 	rsbseq	r7, r3, r5, ror #6
    1b2c:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1b30:	53785250 	cmnpl	r8, #80, 4
    1b34:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1b38:	6f540073 	svcvs	0x00540073
    1b3c:	656c6767 	strbvs	r6, [ip, #-1895]!	; 0x767
    1b40:	474f5444 	strbmi	r5, [pc, -r4, asr #8]
    1b44:	0058525f 	subseq	r5, r8, pc, asr r2
    1b48:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1b4c:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    1b50:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1b54:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1b58:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1b5c:	79545045 	ldmdbvc	r4, {r0, r2, r6, ip, lr}^
    1b60:	45006570 	strmi	r6, [r0, #-1392]	; 0x570
    1b64:	42445f50 	submi	r5, r4, #80, 30	; 0x140
    1b68:	495f4655 	ldmdbmi	pc, {r0, r2, r4, r6, r9, sl, lr}^	; <UNPREDICTABLE>
    1b6c:	5277004e 	rsbspl	r0, r7, #78	; 0x4e
    1b70:	47007465 	strmi	r7, [r0, -r5, ror #8]
    1b74:	50457465 	subpl	r7, r5, r5, ror #8
    1b78:	64417852 	strbvs	r7, [r1], #-2130	; 0x852
    1b7c:	53007264 	movwpl	r7, #612	; 0x264
    1b80:	50457465 	subpl	r7, r5, r5, ror #8
    1b84:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    1b88:	41306675 	teqmi	r0, r5, ror r6
    1b8c:	00726464 	rsbseq	r6, r2, r4, ror #8
    1b90:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1b94:	53785450 	cmnpl	r8, #80, 8	; 0x50000000
    1b98:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1b9c:	44620073 	strbtmi	r0, [r2], #-115	; 0x73
    1ba0:	77007269 	strvc	r7, [r0, -r9, ror #4]
    1ba4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1ba8:	62737500 	rsbsvs	r7, r3, #0, 10
    1bac:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1bb0:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
    1bb4:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    1bb8:	00632e73 	rsbeq	r2, r3, r3, ror lr
    1bbc:	445f5045 	ldrbmi	r5, [pc], #-69	; 1bc4 <__Stack_Size+0x13c4>
    1bc0:	5f465542 	svcpl	0x00465542
    1bc4:	00525245 	subseq	r5, r2, r5, asr #4
    1bc8:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1bcc:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    1bd0:	44667542 	strbtmi	r7, [r6], #-1346	; 0x542
    1bd4:	77007269 	strvc	r7, [r0, -r9, ror #4]
    1bd8:	31667542 	cmncc	r6, r2, asr #10
    1bdc:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1be0:	77537700 	ldrbvc	r7, [r3, -r0, lsl #14]
    1be4:	65530057 	ldrbvs	r0, [r3, #-87]	; 0x57
    1be8:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    1bec:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    1bf0:	66754265 	ldrbtvs	r4, [r5], -r5, ror #4
    1bf4:	6f540066 	svcvs	0x00540066
    1bf8:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
    1bfc:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1c00:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    1c04:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1c08:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
    1c0c:	34204320 	strtcc	r4, [r0], #-800	; 0x320
    1c10:	342e382e 	strtcc	r3, [lr], #-2094	; 0x82e
    1c14:	31303220 	teqcc	r0, r0, lsr #4
    1c18:	32373034 	eorscc	r3, r7, #52	; 0x34
    1c1c:	72282035 	eorvc	r2, r8, #53	; 0x35
    1c20:	61656c65 	cmnvs	r5, r5, ror #24
    1c24:	20296573 	eorcs	r6, r9, r3, ror r5
    1c28:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
    1c2c:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
    1c30:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    1c34:	5f342d64 	svcpl	0x00342d64
    1c38:	72622d38 	rsbvc	r2, r2, #56, 26	; 0xe00
    1c3c:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
    1c40:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
    1c44:	6f697369 	svcvs	0x00697369
    1c48:	3132206e 	teqcc	r2, lr, rrx
    1c4c:	37343133 			; <UNDEFINED> instruction: 0x37343133
    1c50:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
    1c54:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    1c58:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
    1c5c:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
    1c60:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
    1c64:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
    1c68:	6d2d2033 	stcvs	0, cr2, [sp, #-204]!	; 0xffffff34
    1c6c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    1c70:	6e692d62 	cdpvs	13, 6, cr2, cr9, cr2, {3}
    1c74:	77726574 			; <UNDEFINED> instruction: 0x77726574
    1c78:	206b726f 	rsbcs	r7, fp, pc, ror #4
    1c7c:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    1c80:	2d20734f 	stccs	3, cr7, [r0, #-316]!	; 0xfffffec4
    1c84:	6e756666 	cdpvs	6, 7, cr6, cr5, cr6, {3}
    1c88:	6f697463 	svcvs	0x00697463
    1c8c:	65732d6e 	ldrbvs	r2, [r3, #-3438]!	; 0xd6e
    1c90:	6f697463 	svcvs	0x00697463
    1c94:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
    1c98:	74616466 	strbtvc	r6, [r1], #-1126	; 0x466
    1c9c:	65732d61 	ldrbvs	r2, [r3, #-3425]!	; 0xd61
    1ca0:	6f697463 	svcvs	0x00697463
    1ca4:	4300736e 	movwmi	r7, #878	; 0x36e
    1ca8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1cac:	6f445045 	svcvs	0x00445045
    1cb0:	656c6275 	strbvs	r6, [ip, #-629]!	; 0x275
    1cb4:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1cb8:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1cbc:	62445045 	subvs	r5, r4, #69	; 0x45
    1cc0:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    1cc4:	64644131 	strbtvs	r4, [r4], #-305	; 0x131
    1cc8:	65470072 	strbvs	r0, [r7, #-114]	; 0x72
    1ccc:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    1cd0:	00657079 	rsbeq	r7, r5, r9, ror r0
    1cd4:	61656c43 	cmnvs	r5, r3, asr #24
    1cd8:	5f504572 	svcpl	0x00504572
    1cdc:	5f525443 	svcpl	0x00525443
    1ce0:	53005852 	movwpl	r5, #2130	; 0x852
    1ce4:	50457465 	subpl	r7, r5, r5, ror #8
    1ce8:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    1cec:	43666675 	cmnmi	r6, #122683392	; 0x7500000
    1cf0:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1cf4:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1cf8:	4b5f5045 	blmi	17d5e14 <__Stack_Size+0x17d5614>
    1cfc:	00444e49 	subeq	r4, r4, r9, asr #28
    1d00:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1d04:	43785450 	cmnmi	r8, #80, 8	; 0x50000000
    1d08:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1d0c:	656c4300 	strbvs	r4, [ip, #-768]!	; 0x300
    1d10:	50457261 	subpl	r7, r5, r1, ror #4
    1d14:	4e494b5f 	vmovmi.8	d9[2], r4
    1d18:	65470044 	strbvs	r0, [r7, #-68]	; 0x44
    1d1c:	41544274 	cmpmi	r4, r4, ror r2
    1d20:	00454c42 	subeq	r4, r5, r2, asr #24
    1d24:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    1d28:	00525453 	subseq	r5, r2, r3, asr r4
    1d2c:	67655277 			; <UNDEFINED> instruction: 0x67655277
    1d30:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    1d34:	65470065 	strbvs	r0, [r7, #-101]	; 0x65
    1d38:	444e4574 	strbmi	r4, [lr], #-1396	; 0x574
    1d3c:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
    1d40:	41770054 	cmnmi	r7, r4, asr r0
    1d44:	00726464 	rsbseq	r6, r2, r4, ror #8
    1d48:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1d4c:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    1d50:	30667542 	rsbcc	r7, r6, r2, asr #10
    1d54:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1d58:	65530074 	ldrbvs	r0, [r3, #-116]	; 0x74
    1d5c:	44414474 	strbmi	r4, [r1], #-1140	; 0x474
    1d60:	70005244 	andvc	r5, r0, r4, asr #4
    1d64:	65527764 	ldrbvs	r7, [r2, #-1892]	; 0x764
    1d68:	65530067 	ldrbvs	r0, [r3, #-103]	; 0x67
    1d6c:	43504574 	cmpmi	r0, #116, 10	; 0x1d000000
    1d70:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1d74:	65527852 	ldrbvs	r7, [r2, #-2130]	; 0x852
    1d78:	65470067 	strbvs	r0, [r7, #-103]	; 0x67
    1d7c:	52504574 	subspl	r4, r0, #116, 10	; 0x1d000000
    1d80:	756f4378 	strbvc	r4, [pc, #-888]!	; 1a10 <__Stack_Size+0x1210>
    1d84:	6200746e 	andvs	r7, r0, #1845493760	; 0x6e000000
    1d88:	706d6554 	rsbvc	r6, sp, r4, asr r5
    1d8c:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1d90:	52544e43 	subspl	r4, r4, #1072	; 0x430
    1d94:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1d98:	42415442 	submi	r5, r1, #1107296256	; 0x42000000
    1d9c:	4700454c 	strmi	r4, [r0, -ip, asr #10]
    1da0:	50457465 	subpl	r7, r5, r5, ror #8
    1da4:	6f437854 	svcvs	0x00437854
    1da8:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1dac:	61656c43 	cmnvs	r5, r3, asr #24
    1db0:	5f504572 	svcpl	0x00504572
    1db4:	5f525443 	svcpl	0x00525443
    1db8:	47005854 	smlsdmi	r0, r4, r8, r5
    1dbc:	50457465 	subpl	r7, r5, r5, ror #8
    1dc0:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    1dc4:	43316675 	teqmi	r1, #122683392	; 0x7500000
    1dc8:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1dcc:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1dd0:	62445045 	subvs	r5, r4, #69	; 0x45
    1dd4:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    1dd8:	756f4330 	strbvc	r4, [pc, #-816]!	; 1ab0 <__Stack_Size+0x12b0>
    1ddc:	7700746e 	strvc	r7, [r0, -lr, ror #8]
    1de0:	30667542 	rsbcc	r7, r6, r2, asr #10
    1de4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1de8:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1dec:	6174535f 	cmnvs	r4, pc, asr r3
    1df0:	5f737574 	svcpl	0x00737574
    1df4:	0074754f 	rsbseq	r7, r4, pc, asr #10
    1df8:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1dfc:	4700524e 	strmi	r5, [r0, -lr, asr #4]
    1e00:	50457465 	subpl	r7, r5, r5, ror #8
    1e04:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    1e08:	41306675 	teqmi	r0, r5, ror r6
    1e0c:	00726464 	rsbseq	r6, r2, r4, ror #8
    1e10:	70646e45 	rsbvc	r6, r4, r5, asr #28
    1e14:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
    1e18:	4f54445f 	svcmi	0x0054445f
    1e1c:	74535f47 	ldrbvc	r5, [r3], #-3911	; 0xf47
    1e20:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1e24:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1e28:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    1e2c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1e30:	656c4300 	strbvs	r4, [ip, #-768]!	; 0x300
    1e34:	54447261 	strbpl	r7, [r4], #-609	; 0x261
    1e38:	545f474f 	ldrbpl	r4, [pc], #-1871	; 1e40 <__Stack_Size+0x1640>
    1e3c:	65530058 	ldrbvs	r0, [r3, #-88]	; 0x58
    1e40:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    1e44:	61745378 	cmnvs	r4, r8, ror r3
    1e48:	00737574 	rsbseq	r7, r3, r4, ror r5
    1e4c:	4e704562 	cdpmi	5, 7, cr4, cr0, cr2, {3}
    1e50:	53006d75 	movwpl	r6, #3445	; 0xd75
    1e54:	4e457465 	cdpmi	4, 4, cr7, cr5, cr5, {3}
    1e58:	494f5044 	stmdbmi	pc, {r2, r6, ip, lr}^	; <UNPREDICTABLE>
    1e5c:	5300544e 	movwpl	r5, #1102	; 0x44e
    1e60:	50457465 	subpl	r7, r5, r5, ror #8
    1e64:	64417852 	strbvs	r7, [r1], #-2130	; 0x852
    1e68:	53007264 	movwpl	r7, #612	; 0x264
    1e6c:	50457465 	subpl	r7, r5, r5, ror #8
    1e70:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    1e74:	43316675 	teqmi	r1, #122683392	; 0x7500000
    1e78:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1e7c:	52544300 	subspl	r4, r4, #0, 6
    1e80:	0050485f 	subseq	r4, r0, pc, asr r8
    1e84:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
    1e88:	505f3070 	subspl	r3, pc, r0, ror r0	; <UNPREDICTABLE>
    1e8c:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    1e90:	53007373 	movwpl	r7, #883	; 0x373
    1e94:	52657661 	rsbpl	r7, r5, #101711872	; 0x6100000
    1e98:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1e9c:	61530065 	cmpvs	r3, r5, rrx
    1ea0:	53546576 	cmppl	r4, #494927872	; 0x1d800000
    1ea4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    1ea8:	50457700 	subpl	r7, r5, r0, lsl #14
    1eac:	006c6156 	rsbeq	r6, ip, r6, asr r1
    1eb0:	5f627375 	svcpl	0x00627375
    1eb4:	2f62696c 	svccs	0x0062696c
    1eb8:	5f627375 	svcpl	0x00627375
    1ebc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1ec0:	6e490063 	cdpvs	0, 4, cr0, cr9, cr3, {3}
    1ec4:	72505f30 	subsvc	r5, r0, #48, 30	; 0xc0
    1ec8:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    1ecc:	754f0073 	strbvc	r0, [pc, #-115]	; 1e61 <__Stack_Size+0x1661>
    1ed0:	505f3074 	subspl	r3, pc, r4, ror r0	; <UNPREDICTABLE>
    1ed4:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    1ed8:	45007373 	strmi	r7, [r0, #-883]	; 0x373
    1edc:	646e6950 	strbtvs	r6, [lr], #-2384	; 0x950
    1ee0:	53007865 	movwpl	r7, #2149	; 0x865
    1ee4:	53657661 	cmnpl	r5, #101711872	; 0x6100000
    1ee8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    1eec:	62737500 	rsbsvs	r7, r3, #0, 10
    1ef0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1ef4:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
    1ef8:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1efc:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1f00:	65735570 	ldrbvs	r5, [r3, #-1392]!	; 0x570
    1f04:	74535f72 	ldrbvc	r5, [r3], #-3954	; 0xf72
    1f08:	61646e61 	cmnvs	r4, r1, ror #28
    1f0c:	525f6472 	subspl	r6, pc, #1912602624	; 0x72000000
    1f10:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
    1f14:	00737473 	rsbseq	r7, r3, r3, ror r4
    1f18:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    1f1c:	495f6563 	ldmdbmi	pc, {r0, r1, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    1f20:	006f666e 	rsbeq	r6, pc, lr, ror #12
    1f24:	5f627375 	svcpl	0x00627375
    1f28:	2f62696c 	svccs	0x0062696c
    1f2c:	5f627375 	svcpl	0x00627375
    1f30:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    1f34:	4500632e 	strmi	r6, [r0, #-814]	; 0x32e
    1f38:	4f50444e 	svcmi	0x0050444e
    1f3c:	5f544e49 	svcpl	0x00544e49
    1f40:	4c415453 	cfstrdmi	mvd5, [r1], {83}	; 0x53
    1f44:	6552004c 	ldrbvs	r0, [r2, #-76]	; 0x4c
    1f48:	746c7573 	strbtvc	r7, [ip], #-1395	; 0x573
    1f4c:	736f5000 	cmnvc	pc, #0
    1f50:	505f3074 	subspl	r3, pc, r4, ror r0	; <UNPREDICTABLE>
    1f54:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    1f58:	44007373 	strmi	r7, [r0], #-883	; 0x373
    1f5c:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    1f60:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    1f64:	65520072 	ldrbvs	r0, [r2, #-114]	; 0x72
    1f68:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1f6c:	53006465 	movwpl	r6, #1125	; 0x465
    1f70:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    1f74:	5f647261 	svcpl	0x00647261
    1f78:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    1f7c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1f80:	61727567 	cmnvs	r2, r7, ror #10
    1f84:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1f88:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    1f8c:	61745361 	cmnvs	r4, r1, ror #6
    1f90:	6e496567 	cdpvs	5, 4, cr6, cr9, cr7, {3}
    1f94:	56454400 	strbpl	r4, [r5], -r0, lsl #8
    1f98:	5f454349 	svcpl	0x00454349
    1f9c:	4f4d4552 	svcmi	0x004d4552
    1fa0:	575f4554 			; <UNDEFINED> instruction: 0x575f4554
    1fa4:	55454b41 	strbpl	r4, [r5, #-2881]	; 0xb41
    1fa8:	54530050 	ldrbpl	r0, [r3], #-80	; 0x50
    1fac:	454c4c41 	strbmi	r4, [ip, #-3137]	; 0xc41
    1fb0:	79540044 	ldmdbvc	r4, {r2, r6}^
    1fb4:	525f6570 	subspl	r6, pc, #112, 10	; 0x1c000000
    1fb8:	65006365 	strvs	r6, [r0, #-869]	; 0x365
    1fbc:	5f746978 	svcpl	0x00746978
    1fc0:	61446f4e 	cmpvs	r4, lr, asr #30
    1fc4:	535f6174 	cmppl	pc, #116, 2
    1fc8:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1fcc:	56770030 			; <UNDEFINED> instruction: 0x56770030
    1fd0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    1fd4:	45440031 	strbmi	r0, [r4, #-49]	; 0x31
    1fd8:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
    1fdc:	5345445f 	movtpl	r4, #21599	; 0x545f
    1fe0:	50495243 	subpl	r5, r9, r3, asr #4
    1fe4:	00524f54 	subseq	r4, r2, r4, asr pc
    1fe8:	49525453 	ldmdbmi	r2, {r0, r1, r4, r6, sl, ip, lr}^
    1fec:	445f474e 	ldrbmi	r4, [pc], #-1870	; 1ff4 <__Stack_Size+0x17f4>
    1ff0:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    1ff4:	4f545049 	svcmi	0x00545049
    1ff8:	73550052 	cmpvc	r5, #82	; 0x52
    1ffc:	6f547265 	svcvs	0x00547265
    2000:	42414d50 	submi	r4, r1, #80, 26	; 0x1400
    2004:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    2008:	706f4372 	rsbvc	r4, pc, r2, ror r3	; <UNPREDICTABLE>
    200c:	61730079 	cmnvs	r3, r9, ror r0
    2010:	725f6576 	subsvc	r6, pc, #494927872	; 0x1d800000
    2014:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    2018:	4c006874 	stcmi	8, cr6, [r0], {116}	; 0x74
    201c:	5f545341 	svcpl	0x00545341
    2020:	445f4e49 	ldrbmi	r4, [pc], #-3657	; 2028 <__Stack_Size+0x1828>
    2024:	00415441 	subeq	r5, r1, r1, asr #8
    2028:	5f504f4e 	svcpl	0x00504f4e
    202c:	636f7250 	cmnvs	pc, #80, 4
    2030:	00737365 	rsbseq	r7, r3, r5, ror #6
    2034:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    2038:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    203c:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    2040:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    2044:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    2048:	78450065 	stmdavc	r5, {r0, r2, r5, r6}^
    204c:	74636570 	strbtvc	r6, [r3], #-1392	; 0x570
    2050:	6174535f 	cmnvs	r4, pc, asr r3
    2054:	5f737574 	svcpl	0x00737574
    2058:	0074754f 	rsbseq	r7, r4, pc, asr #10
    205c:	53554150 	cmppl	r5, #80, 2
    2060:	65520045 	ldrbvs	r0, [r2, #-69]	; 0x45
    2064:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    2068:	006f4e74 	rsbeq	r4, pc, r4, ror lr	; <UNPREDICTABLE>
    206c:	5f544547 	svcpl	0x00544547
    2070:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xe49
    2074:	43414652 	movtmi	r4, #5714	; 0x1652
    2078:	74530045 	ldrbvc	r0, [r3], #-69	; 0x45
    207c:	61646e61 	cmnvs	r4, r1, ror #28
    2080:	535f6472 	cmppl	pc, #1912602624	; 0x72000000
    2084:	6e457465 	cdpvs	4, 4, cr7, cr5, cr5, {3}
    2088:	696f5064 	stmdbvs	pc!, {r2, r5, r6, ip, lr}^	; <UNPREDICTABLE>
    208c:	6546746e 	strbvs	r7, [r6, #-1134]	; 0x46e
    2090:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    2094:	45470065 	strbmi	r0, [r7, #-101]	; 0x65
    2098:	54535f54 	ldrbpl	r5, [r3], #-3924	; 0xf54
    209c:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    20a0:	54455300 	strbpl	r5, [r5], #-768	; 0x300
    20a4:	4145465f 	cmpmi	r5, pc, asr r6
    20a8:	45525554 	ldrbmi	r5, [r2, #-1364]	; 0x554
    20ac:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    20b0:	754d5f61 	strbvc	r5, [sp, #-3937]	; 0xf61
    20b4:	614d5f6c 	cmpvs	sp, ip, ror #30
    20b8:	63615078 	cmnvs	r1, #120	; 0x78
    20bc:	5374656b 	cmnpl	r4, #448790528	; 0x1ac00000
    20c0:	00657a69 	rsbeq	r7, r5, r9, ror #20
    20c4:	76654470 			; <UNDEFINED> instruction: 0x76654470
    20c8:	61745300 	cmnvs	r4, r0, lsl #6
    20cc:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    20d0:	65535f64 	ldrbvs	r5, [r3, #-3940]	; 0xf64
    20d4:	76654474 			; <UNDEFINED> instruction: 0x76654474
    20d8:	46656369 	strbtmi	r6, [r5], -r9, ror #6
    20dc:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
    20e0:	70006572 	andvc	r6, r0, r2, ror r5
    20e4:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
    20e8:	4e595300 	cdpmi	3, 5, cr5, cr9, cr0, {0}
    20ec:	465f4843 	ldrbmi	r4, [pc], -r3, asr #16
    20f0:	454d4152 	strbmi	r4, [sp, #-338]	; 0x152
    20f4:	61745300 	cmnvs	r4, r0, lsl #6
    20f8:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    20fc:	65475f64 	strbvs	r5, [r7, #-3940]	; 0xf64
    2100:	746e4974 	strbtvc	r4, [lr], #-2420	; 0x974
    2104:	61667265 	cmnvs	r6, r5, ror #4
    2108:	53006563 	movwpl	r6, #1379	; 0x563
    210c:	445f5445 	ldrbmi	r5, [pc], #-1093	; 2114 <__Stack_Size+0x1914>
    2110:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    2114:	4f545049 	svcmi	0x00545049
    2118:	45530052 	ldrbmi	r0, [r3, #-82]	; 0x52
    211c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2120:	46524554 			; <UNDEFINED> instruction: 0x46524554
    2124:	00454341 	subeq	r4, r5, r1, asr #6
    2128:	4145465f 	cmpmi	r5, pc, asr r6
    212c:	45525554 	ldrbmi	r5, [r2, #-1364]	; 0x554
    2130:	4c45535f 	mcrrmi	3, 5, r5, r5, cr15
    2134:	4f544345 	svcmi	0x00544345
    2138:	74530052 	ldrbvc	r0, [r3], #-82	; 0x52
    213c:	61646e61 	cmnvs	r4, r1, ror #28
    2140:	475f6472 			; <UNDEFINED> instruction: 0x475f6472
    2144:	6f437465 	svcvs	0x00437465
    2148:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    214c:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
    2150:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2154:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    2158:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    215c:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    2160:	65467261 	strbvs	r7, [r6, #-609]	; 0x261
    2164:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    2168:	45470065 	strbmi	r0, [r7, #-101]	; 0x65
    216c:	4f435f54 	svcmi	0x00435f54
    2170:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
    2174:	54415255 	strbpl	r5, [r1], #-597	; 0x255
    2178:	004e4f49 	subeq	r4, lr, r9, asr #30
    217c:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    2180:	4c4f5254 	sfmmi	f5, 2, [pc], {84}	; 0x54
    2184:	4154535f 	cmpmi	r4, pc, asr r3
    2188:	5f004554 	svcpl	0x00004554
    218c:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    2190:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    2194:	545f524f 	ldrbpl	r5, [pc], #-591	; 219c <__Stack_Size+0x199c>
    2198:	00455059 	subeq	r5, r5, r9, asr r0
    219c:	54544553 	ldrbpl	r4, [r4], #-1363	; 0x553
    21a0:	5f474e49 	svcpl	0x00474e49
    21a4:	50005055 	andpl	r5, r0, r5, asr r0
    21a8:	6f54414d 	svcvs	0x0054414d
    21ac:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    21b0:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    21b4:	6f437265 	svcvs	0x00437265
    21b8:	53007970 	movwpl	r7, #2416	; 0x970
    21bc:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    21c0:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    21c4:	41525547 	cmpmi	r2, r7, asr #10
    21c8:	4e4f4954 	mcrmi	9, 2, r4, cr15, cr4, {2}
    21cc:	49415700 	stmdbmi	r1, {r8, r9, sl, ip, lr}^
    21d0:	54535f54 	ldrbpl	r5, [r3], #-3924	; 0xf54
    21d4:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    21d8:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xf5f
    21dc:	544f5400 	strbpl	r5, [pc], #-1024	; 21e4 <__Stack_Size+0x19e4>
    21e0:	735f4c41 	cmpvc	pc, #16640	; 0x4100
    21e4:	55514552 	ldrbpl	r4, [r1, #-1362]	; 0x552
    21e8:	00545345 	subseq	r5, r4, r5, asr #6
    21ec:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xe49
    21f0:	43414652 	movtmi	r4, #5714	; 0x1652
    21f4:	45445f45 	strbmi	r5, [r4, #-3909]	; 0xf45
    21f8:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    21fc:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    2200:	76617300 	strbtvc	r7, [r1], -r0, lsl #6
    2204:	4c775f65 	ldclmi	15, cr5, [r7], #-404	; 0xfffffe6c
    2208:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    220c:	74530068 	ldrbvc	r0, [r3], #-104	; 0x68
    2210:	61646e61 	cmnvs	r4, r1, ror #28
    2214:	475f6472 			; <UNDEFINED> instruction: 0x475f6472
    2218:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465
    221c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2220:	444e4500 	strbmi	r4, [lr], #-1280	; 0x500
    2224:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
    2228:	45445f54 	strbmi	r5, [r4, #-3924]	; 0xf54
    222c:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    2230:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    2234:	4e4f4300 	cdpmi	3, 4, cr4, cr15, cr0, {0}
    2238:	5f474946 	svcpl	0x00474946
    223c:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    2240:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    2244:	7000524f 	andvc	r5, r0, pc, asr #4
    2248:	00667542 	rsbeq	r7, r6, r2, asr #10
    224c:	69504570 	ldmdbvs	r0, {r4, r5, r6, r8, sl, lr}^
    2250:	006f666e 	rsbeq	r6, pc, lr, ror #12
    2254:	5f544553 	svcpl	0x00544553
    2258:	52444441 	subpl	r4, r4, #1090519040	; 0x41000000
    225c:	00535345 	subseq	r5, r3, r5, asr #6
    2260:	616c6552 	cmnvs	ip, r2, asr r5
    2264:	5f646574 	svcpl	0x00646574
    2268:	70646e45 	rsbvc	r6, r4, r5, asr #28
    226c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
    2270:	61745300 	cmnvs	r4, r0, lsl #6
    2274:	49737574 	ldmdbmi	r3!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
    2278:	006f666e 	rsbeq	r6, pc, lr, ror #12
    227c:	646e4977 	strbtvs	r4, [lr], #-2423	; 0x977
    2280:	00307865 	eorseq	r7, r0, r5, ror #16
    2284:	5f544547 	svcpl	0x00544547
    2288:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    228c:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    2290:	4400524f 	strmi	r5, [r0], #-591	; 0x24f
    2294:	53617461 	cmnpl	r1, #1627389952	; 0x61000000
    2298:	65676174 	strbvs	r6, [r7, #-372]!	; 0x174
    229c:	0074754f 	rsbseq	r7, r4, pc, asr #10
    22a0:	54494157 	strbpl	r4, [r9], #-343	; 0x157
    22a4:	5445535f 	strbpl	r5, [r5], #-863	; 0x35f
    22a8:	52005055 	andpl	r5, r0, #85	; 0x55
    22ac:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
    22b0:	4e5f7473 	mrcmi	4, 2, r7, cr15, cr3, {3}
    22b4:	4157006f 	cmpmi	r7, pc, rrx
    22b8:	535f5449 	cmppl	pc, #1224736768	; 0x49000000
    22bc:	55544154 	ldrbpl	r4, [r4, #-340]	; 0x154
    22c0:	4e495f53 	mcrmi	15, 2, r5, cr9, cr3, {2}
    22c4:	454c4300 	strbmi	r4, [ip, #-768]	; 0x300
    22c8:	465f5241 	ldrbmi	r5, [pc], -r1, asr #4
    22cc:	55544145 	ldrbpl	r4, [r4, #-325]	; 0x145
    22d0:	4c004552 	cfstr32mi	mvfx4, [r0], {82}	; 0x52
    22d4:	5f545341 	svcpl	0x00545341
    22d8:	5f54554f 	svcpl	0x0054554f
    22dc:	41544144 	cmpmi	r4, r4, asr #2
    22e0:	62737500 	rsbsvs	r7, r3, #0, 10
    22e4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    22e8:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
    22ec:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
    22f0:	7700632e 	strvc	r6, [r0, -lr, lsr #6]
    22f4:	7479424e 	ldrbtvc	r4, [r9], #-590	; 0x24e
    22f8:	70007365 	andvc	r7, r0, r5, ror #6
    22fc:	72735562 	rsbsvc	r5, r3, #411041792	; 0x18800000
    2300:	00667542 	rsbeq	r7, r6, r2, asr #10
    2304:	414d5077 	hvcmi	54535	; 0xd507
    2308:	41667542 	cmnmi	r6, r2, asr #10
    230c:	00726464 	rsbseq	r6, r2, r4, ror #8
    2310:	56776470 			; <UNDEFINED> instruction: 0x56776470
    2314:	Address 0x00002314 is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	08000ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp}
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	08000bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp}
       8:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
       c:	ae08000b 	cdpge	0, 0, cr0, cr8, cr11, {0}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	0408000b 	streq	r0, [r8], #-11
      14:	5001f300 	andpl	pc, r1, r0, lsl #6
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      1c:	00000000 	andeq	r0, r0, r0
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	000c2e00 	andeq	r2, ip, r0, lsl #28
      24:	000c3208 	andeq	r3, ip, r8, lsl #4
      28:	70000508 	andvc	r0, r0, r8, lsl #10
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	9f274000 	svcls	0x00274000
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	08000c32 	stmdaeq	r0, {r1, r4, r5, sl, fp}
      34:	08000c36 	stmdaeq	r0, {r1, r2, r4, r5, sl, fp}
      38:	00700007 	rsbseq	r0, r0, r7

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	27402740 	strbcs	r2, [r0, -r0, asr #14]

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	000c369f 	muleq	ip, pc, r6	; <UNPREDICTABLE>
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	000c3808 	andeq	r3, ip, r8, lsl #16
      48:	73000808 	movwvc	r0, #2056	; 0x808
      4c:	27400600 	strbcs	r0, [r0, -r0, lsl #12]

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	389f2740 	ldmcc	pc, {r6, r8, r9, sl, sp}	; <UNPREDICTABLE>
      54:	5508000c 	strpl	r0, [r8, #-12]
      58:	0b08000c 	bleq	200090 <__Stack_Size+0x1ff890>
      5c:	5c000c00 	stcpl	12, cr0, [r0], {-0}
      60:	40064000 	andmi	r4, r6, r0
      64:	9f274027 	svcls	0x00274027
	...
      70:	08000c98 	stmdaeq	r0, {r3, r4, r7, sl, fp}
      74:	08000caa 	stmdaeq	r0, {r1, r3, r5, r7, sl, fp}
      78:	aa500001 	bge	1400084 <__Stack_Size+0x13ff884>
      7c:	ae08000c 	cdpge	0, 0, cr0, cr8, cr12, {0}
      80:	0408000c 	streq	r0, [r8], #-12
      84:	5001f300 	andpl	pc, r1, r0, lsl #6
      88:	000cae9f 	muleq	ip, pc, lr	; <UNPREDICTABLE>
      8c:	000cb108 	andeq	fp, ip, r8, lsl #2
      90:	50000108 	andpl	r0, r0, r8, lsl #2
      94:	08000cb1 	stmdaeq	r0, {r0, r4, r5, r7, sl, fp}
      98:	08000d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp}
      9c:	01f30004 	mvnseq	r0, r4
      a0:	00009f50 	andeq	r9, r0, r0, asr pc
      a4:	00000000 	andeq	r0, r0, r0
	f25519_select(x, a, b, (a[0] ^ parity) & 1);

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
	f25519_normalize(a);
	f25519_normalize(c);
      a8:	0c980000 	ldceq	0, cr0, [r8], {0}

	return f25519_eq(a, c);
      ac:	0cda0800 	ldcleq	8, cr0, [sl], {0}
      b0:	00020800 	andeq	r0, r2, r0, lsl #16
      b4:	0cda9f30 	ldcleq	15, cr9, [sl], {48}	; 0x30
	uint8_t ok;

	mx2ey(ey, mx);
	ok = ey2ex(ex, ey, parity);

	f25519_normalize(ex);
      b8:	0ce50800 	stcleq	8, cr0, [r5]
	f25519_normalize(ey);
      bc:	00010800 	andeq	r0, r1, r0, lsl #16
      c0:	000cea53 	andeq	lr, ip, r3, asr sl

	return ok;
}
      c4:	000cee08 	andeq	lr, ip, r8, lsl #28
      c8:	30000208 	andcc	r0, r0, r8, lsl #4
      cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      d0:	00000000 	andeq	r0, r0, r0
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
      d4:	000d0c00 	andeq	r0, sp, r0, lsl #24
      d8:	000d1108 	andeq	r1, sp, r8, lsl #2
		minusp[i] = c;
      dc:	50000108 	andpl	r0, r0, r8, lsl #2
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
      e0:	08000d11 	stmdaeq	r0, {r0, r4, r8, sl, fp}
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
      e4:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
      e8:	01f30004 	mvnseq	r0, r4
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
      ec:	00009f50 	andeq	r9, r0, r0, asr pc
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
      f0:	00000000 	andeq	r0, r0, r0
      f4:	0d180000 	ldceq	0, cr0, [r8, #-0]
      f8:	0d1d0800 	ldceq	8, cr0, [sp, #-0]
      fc:	00010800 	andeq	r0, r1, r0, lsl #16
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     100:	000d1d50 	andeq	r1, sp, r0, asr sp

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
     104:	000d2408 	andeq	r2, sp, r8, lsl #8
     108:	f3000408 	vshl.u8	d0, d8, d0
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     10c:	009f5001 	addseq	r5, pc, r1
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
     110:	00000000 	andeq	r0, r0, r0
     114:	24000000 	strcs	r0, [r0], #-0
     118:	3708000d 	strcc	r0, [r8, -sp]
     11c:	0108000d 	tsteq	r8, sp
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     120:	0d375000 	ldceq	0, cr5, [r7, #-0]
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
     124:	0d380800 	ldceq	8, cr0, [r8, #-0]
     128:	00040800 	andeq	r0, r4, r0, lsl #16
		fprime_copy(plusa, r);
		fprime_add(plusa, a, modulus);

		fprime_select(r, r, plusa, bit);
	}
}
     12c:	9f5001f3 	svcls	0x005001f3

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
     130:	08000d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp}
	i <<= 3;

	while (x) {
     134:	08000d3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, fp}
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
     138:	3a500001 	bcc	1400144 <__Stack_Size+0x13ff944>
     13c:	4408000d 	strmi	r0, [r8], #-13
	f25519_mul__distinct(x3, a, a);

	f25519_mul_c(a, x1z1, 486662);
	f25519_add(a, x1sq, a);
	f25519_add(a, z1sq, a);
	f25519_mul__distinct(x1sq, x1z1, a);
     140:	0408000d 	streq	r0, [r8], #-13
	f25519_mul_c(z3, x1sq, 4);
     144:	5001f300 	andpl	pc, r1, r0, lsl #6
     148:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	00000000 	andeq	r0, r0, r0
     150:	000d4400 	andeq	r4, sp, r0, lsl #8
     154:	000d4908 	andeq	r4, sp, r8, lsl #18
	f25519_sub(b, x3, z3); /* D */
     158:	50000108 	andpl	r0, r0, r8, lsl #2
     15c:	08000d49 	stmdaeq	r0, {r0, r3, r6, r8, sl, fp}
	f25519_mul__distinct(da, a, b);
     160:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
     164:	01f30004 	mvnseq	r0, r4
     168:	00009f50 	andeq	r9, r0, r0, asr pc

	f25519_sub(b, x2, z2);
     16c:	00000000 	andeq	r0, r0, r0
     170:	0d500000 	ldcleq	0, cr0, [r0, #-0]
	f25519_add(a, x3, z3); /* C */
     174:	0d620800 	stcleq	8, cr0, [r2, #-0]
     178:	00010800 	andeq	r0, r1, r0, lsl #16
     17c:	000d6250 	andeq	r6, sp, r0, asr r2
	f25519_mul__distinct(cb, a, b);
     180:	000d6408 	andeq	r6, sp, r8, lsl #8
     184:	f3000408 	vshl.u8	d0, d8, d0

	f25519_add(a, da, cb);
     188:	649f5001 	ldrvs	r5, [pc], #1	; 190 <_Minimum_Stack_Size+0x90>
     18c:	6708000d 	strvs	r0, [r8, -sp]
     190:	0108000d 	tsteq	r8, sp
	f25519_mul__distinct(b, a, a);
     194:	0d675000 	stcleq	0, cr5, [r7, #-0]
     198:	0d780800 	ldcleq	8, cr0, [r8, #-0]
	f25519_mul__distinct(x5, z1, b);
     19c:	00040800 	andeq	r0, r4, r0, lsl #16
     1a0:	9f5001f3 	svcls	0x005001f3
	...

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
     1b4:	00700005 	rsbseq	r0, r0, r5
     1b8:	009f213c 	addseq	r2, pc, ip, lsr r1	; <UNPREDICTABLE>

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	00000000 	andeq	r0, r0, r0
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	ac000000 	stcge	0, cr0, [r0], {-0}
     1c4:	de08000e 	cdple	0, 0, cr0, cr8, cr14, {0}

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	0108000e 	tsteq	r8, lr
     1cc:	0ede5000 	cdpeq	0, 13, cr5, cr14, cr0, {0}
     1d0:	0eea0800 	cdpeq	8, 14, cr0, cr10, cr0, {0}
     1d4:	00040800 	andeq	r0, r4, r0, lsl #16
		f25519_select(zm1, zm1, zm, bit);
     1d8:	9f5001f3 	svcls	0x005001f3
     1dc:	08000eea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, fp}
     1e0:	08000ef2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl, fp}
		f25519_select(xm, xm, xms, bit);
     1e4:	f2500001 	vhadd.s16	d16, d0, d1
     1e8:	0608000e 	streq	r0, [r8], -lr
     1ec:	0408000f 	streq	r0, [r8], #-15
		f25519_select(zm, zm, zms, bit);
     1f0:	5001f300 	andpl	pc, r1, r0, lsl #6
     1f4:	000f069f 	muleq	pc, pc, r6	; <UNPREDICTABLE>
     1f8:	000f0e08 	andeq	r0, pc, r8, lsl #28
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	50000108 	andpl	r0, r0, r8, lsl #2
     200:	08000f0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, fp}
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	08000f22 	stmdaeq	r0, {r1, r5, r8, r9, sl, fp}
     208:	01f30004 	mvnseq	r0, r4
	f25519_mul__distinct(result, zm1, xm);
     20c:	0f229f50 	svceq	0x00229f50
     210:	0f4a0800 	svceq	0x004a0800
	f25519_normalize(result);
     214:	00010800 	andeq	r0, r1, r0, lsl #16
     218:	000f4a50 	andeq	r4, pc, r0, asr sl	; <UNPREDICTABLE>
}
     21c:	000f6008 	andeq	r6, pc, r8
     220:	f3000408 	vshl.u8	d0, d8, d0
     224:	609f5001 	addsvs	r5, pc, r1
     228:	7408000f 	strvc	r0, [r8], #-15
     22c:	0108000f 	tsteq	r8, pc
     230:	00005000 	andeq	r5, r0, r0
     234:	00000000 	andeq	r0, r0, r0
     238:	0edc0000 	cdpeq	0, 13, cr0, cr12, cr0, {0}
     23c:	0ee40800 	cdpeq	8, 14, cr0, cr4, cr0, {0}
     240:	00060800 	andeq	r0, r6, r0, lsl #16
     244:	ef090074 	svc	0x00090074
     248:	0f509f1a 	svceq	0x00509f1a
     24c:	0f540800 	svceq	0x00540800
     250:	00050800 	andeq	r0, r5, r0, lsl #16
     254:	21400074 	hvccs	4
     258:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     25c:	00000000 	andeq	r0, r0, r0
     260:	000ef200 	andeq	pc, lr, r0, lsl #4
     264:	000efa08 	andeq	pc, lr, r8, lsl #20
     268:	70000608 	andvc	r0, r0, r8, lsl #12
     26c:	1afb0900 	bne	ffec2674 <BootRAM+0xee32e15>
     270:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     274:	00000000 	andeq	r0, r0, r0
     278:	000f0e00 	andeq	r0, pc, r0, lsl #28
     27c:	000f1608 	andeq	r1, pc, r8, lsl #12
     280:	70000608 	andvc	r0, r0, r8, lsl #12
     284:	1afb0900 	bne	ffec268c <BootRAM+0xee32e2d>
     288:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     28c:	00000000 	andeq	r0, r0, r0
     290:	000ffa00 	andeq	pc, pc, r0, lsl #20
     294:	000ffe08 	andeq	pc, pc, r8, lsl #28
     298:	77000508 	strvc	r0, [r0, -r8, lsl #10]
     29c:	9f213c00 	svcls	0x00213c00
	...
     2b0:	00500001 	subseq	r0, r0, r1
     2b4:	00000000 	andeq	r0, r0, r0
     2b8:	01000000 	mrseq	r0, (UNDEF: 0)
     2bc:	00005500 	andeq	r5, r0, r0, lsl #10
     2c0:	00000000 	andeq	r0, r0, r0
     2c4:	00040000 	andeq	r0, r4, r0
     2c8:	9f5001f3 	svcls	0x005001f3
	...
     2dc:	9f300002 	svcls	0x00300002
	...
     2e8:	00540001 	subseq	r0, r4, r1
     2ec:	00000000 	andeq	r0, r0, r0
     2f0:	03000000 	movweq	r0, #0
     2f4:	9f7f7400 	svcls	0x007f7400
	...
     300:	00540001 	subseq	r0, r4, r1
     304:	00000000 	andeq	r0, r0, r0
     308:	8c000000 	stchi	0, cr0, [r0], {-0}
     30c:	bc080010 	stclt	0, cr0, [r8], {16}
     310:	02080010 	andeq	r0, r8, #16
     314:	bc9f3000 	ldclt	0, cr3, [pc], {0}
     318:	be080010 	mcrlt	0, 0, r0, cr8, cr0, {0}
     31c:	07080010 	smladeq	r8, r0, r0, r0
     320:	48007000 	stmdami	r0, {ip, sp, lr}
     324:	9f293024 	svcls	0x00293024
     328:	080010be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, ip}
     32c:	080010f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, ip}
     330:	00750007 	rsbseq	r0, r5, r7
     334:	29302448 	ldmdbcs	r0!, {r3, r6, sl, sp}
     338:	00111c9f 	mulseq	r1, pc, ip	; <UNPREDICTABLE>
     33c:	00112208 	andseq	r2, r1, r8, lsl #4
     340:	75000708 	strvc	r0, [r0, #-1800]	; 0x708
     344:	30244800 	eorcc	r4, r4, r0, lsl #16
     348:	11229f29 	teqne	r2, r9, lsr #30
     34c:	11340800 	teqne	r4, r0, lsl #16
     350:	00020800 	andeq	r0, r2, r0, lsl #16
     354:	11769f30 	cmnne	r6, r0, lsr pc
     358:	117c0800 	cmnne	ip, r0, lsl #16
     35c:	00070800 	andeq	r0, r7, r0, lsl #16
     360:	24480075 	strbcs	r0, [r8], #-117	; 0x75
     364:	7c9f2930 	ldcvc	9, cr2, [pc], {48}	; 0x30
     368:	90080011 	andls	r0, r8, r1, lsl r0
     36c:	02080011 	andeq	r0, r8, #17
     370:	909f3100 	addsls	r3, pc, r0, lsl #2
     374:	96080011 			; <UNDEFINED> instruction: 0x96080011
     378:	07080011 	smladeq	r8, r1, r0, r0
     37c:	48007500 	stmdami	r0, {r8, sl, ip, sp, lr}
     380:	9f293024 	svcls	0x00293024
     384:	08001196 	stmdaeq	r0, {r1, r2, r4, r7, r8, ip}
     388:	080011c8 	stmdaeq	r0, {r3, r6, r7, r8, ip}
     38c:	9f310002 	svcls	0x00310002
	...
     398:	080010ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, ip}
     39c:	080010d2 	stmdaeq	r0, {r1, r4, r6, r7, ip}
     3a0:	d2500001 	subsle	r0, r0, #1
     3a4:	d5080010 	strle	r0, [r8, #-16]
     3a8:	01080010 	tsteq	r8, r0, lsl r0
     3ac:	10d55100 	sbcsne	r5, r5, r0, lsl #2
     3b0:	10f80800 	rscsne	r0, r8, r0, lsl #16
     3b4:	00010800 	andeq	r0, r1, r0, lsl #16
     3b8:	00111c54 	andseq	r1, r1, r4, asr ip
     3bc:	00113608 	andseq	r3, r1, r8, lsl #12
     3c0:	54000108 	strpl	r0, [r0], #-264	; 0x108
     3c4:	08001176 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, ip}
     3c8:	080011c8 	stmdaeq	r0, {r3, r6, r7, r8, ip}
     3cc:	00540001 	subseq	r0, r4, r1
     3d0:	00000000 	andeq	r0, r0, r0
     3d4:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     3d8:	f8080010 			; <UNDEFINED> instruction: 0xf8080010
     3dc:	02080010 	andeq	r0, r8, #16
     3e0:	349f3100 	ldrcc	r3, [pc], #256	; 3e8 <_Minimum_Stack_Size+0x2e8>
     3e4:	3a080011 	bcc	200430 <__Stack_Size+0x1ffc30>
     3e8:	02080011 	andeq	r0, r8, #17
     3ec:	8e9f3100 	fmlhie	f3, f7, f0
     3f0:	90080011 	andls	r0, r8, r1, lsl r0
     3f4:	02080011 	andeq	r0, r8, #17
     3f8:	009f3100 	addseq	r3, pc, r0, lsl #2
	...
     408:	04000000 	streq	r0, [r0], #-0
     40c:	7e809100 	sinvcs	f1, f0
     410:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     414:	00000000 	andeq	r0, r0, r0
     418:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     424:	01700003 	cmneq	r0, r3
     428:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     42c:	00000000 	andeq	r0, r0, r0
     430:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     444:	80910004 	addshi	r0, r1, r4
     448:	00009f7e 	andeq	r9, r0, lr, ror pc
     44c:	00000000 	andeq	r0, r0, r0
     450:	00010000 	andeq	r0, r1, r0
     454:	00000050 	andeq	r0, r0, r0, asr r0
     458:	00000000 	andeq	r0, r0, r0
     45c:	70000300 	andvc	r0, r0, r0, lsl #6
     460:	00009f01 	andeq	r9, r0, r1, lsl #30
     464:	00000000 	andeq	r0, r0, r0
     468:	00010000 	andeq	r0, r1, r0
     46c:	00000050 	andeq	r0, r0, r0, asr r0
     470:	00000000 	andeq	r0, r0, r0
     474:	0011c800 	andseq	ip, r1, r0, lsl #16
     478:	0011ce08 	andseq	ip, r1, r8, lsl #28
     47c:	51000108 	tstpl	r0, r8, lsl #2
     480:	080011ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, ip}
     484:	080011de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, ip}
     488:	01f30004 	mvnseq	r0, r4
     48c:	00009f51 	andeq	r9, r0, r1, asr pc
     490:	00000000 	andeq	r0, r0, r0
     494:	11c80000 	bicne	r0, r8, r0
     498:	11c80800 	bicne	r0, r8, r0, lsl #16
     49c:	00010800 	andeq	r0, r1, r0, lsl #16
     4a0:	0011c852 	andseq	ip, r1, r2, asr r8
     4a4:	0011d208 	andseq	sp, r1, r8, lsl #4
     4a8:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
     4ac:	30244800 	eorcc	r4, r4, r0, lsl #16
     4b0:	11d29f29 	bicsne	r9, r2, r9, lsr #30
     4b4:	11de0800 	bicsne	r0, lr, r0, lsl #16
     4b8:	00080800 	andeq	r0, r8, r0, lsl #16
     4bc:	485201f3 	ldmdami	r2, {r0, r1, r4, r5, r6, r7, r8}^
     4c0:	9f293024 	svcls	0x00293024
	...
     4cc:	080011e0 	stmdaeq	r0, {r5, r6, r7, r8, ip}
     4d0:	080011f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, ip}
     4d4:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
     4d8:	f2080011 	vqadd.s8	d0, d8, d1
     4dc:	04080011 	streq	r0, [r8], #-17
     4e0:	5001f300 	andpl	pc, r1, r0, lsl #6
     4e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     4e8:	00000000 	andeq	r0, r0, r0
     4ec:	0011e000 	andseq	lr, r1, r0
     4f0:	0011e608 	andseq	lr, r1, r8, lsl #12
     4f4:	51000108 	tstpl	r0, r8, lsl #2
     4f8:	080011e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, ip}
     4fc:	080011f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, ip}
     500:	01f30004 	mvnseq	r0, r4
     504:	00009f51 	andeq	r9, r0, r1, asr pc
     508:	00000000 	andeq	r0, r0, r0
     50c:	11f40000 	mvnsne	r0, r0
     510:	12160800 	andsne	r0, r6, #0, 16
     514:	00010800 	andeq	r0, r1, r0, lsl #16
     518:	00121650 	andseq	r1, r2, r0, asr r6
     51c:	00124408 	andseq	r4, r2, r8, lsl #8
     520:	74000308 	strvc	r0, [r0], #-776	; 0x308
     524:	12449f70 	subne	r9, r4, #112, 30	; 0x1c0
     528:	12540800 	subsne	r0, r4, #0, 16
     52c:	00040800 	andeq	r0, r4, r0, lsl #16
     530:	9f5001f3 	svcls	0x005001f3
	...
     53c:	080011f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip}
     540:	080011fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, ip}
     544:	fc510001 	mrrc2	0, 0, r0, r1, cr1
     548:	54080011 	strpl	r0, [r8], #-17
     54c:	04080012 	streq	r0, [r8], #-18
     550:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     554:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     558:	00000000 	andeq	r0, r0, r0
     55c:	0011f400 	andseq	pc, r1, r0, lsl #8
     560:	00121608 	andseq	r1, r2, r8, lsl #12
     564:	52000108 	andpl	r0, r0, #8, 2
     568:	08001216 	stmdaeq	r0, {r1, r2, r4, r9, ip}
     56c:	08001224 	stmdaeq	r0, {r2, r5, r9, ip}
     570:	24570001 	ldrbcs	r0, [r7], #-1
     574:	3a080012 	bcc	2005c4 <__Stack_Size+0x1ffdc4>
     578:	01080012 	tsteq	r8, r2, lsl r0
     57c:	123a5000 	eorsne	r5, sl, #0
     580:	123c0800 	eorsne	r0, ip, #0, 16
     584:	00030800 	andeq	r0, r3, r0, lsl #16
     588:	409f0170 	addsmi	r0, pc, r0, ror r1	; <UNPREDICTABLE>
     58c:	42080012 	andmi	r0, r8, #18
     590:	01080012 	tsteq	r8, r2, lsl r0
     594:	12465000 	subne	r5, r6, #0
     598:	12480800 	subne	r0, r8, #0, 16
     59c:	00010800 	andeq	r0, r1, r0, lsl #16
     5a0:	00124850 	andseq	r4, r2, r0, asr r8
     5a4:	00124a08 	andseq	r4, r2, r8, lsl #20
     5a8:	70000308 	andvc	r0, r0, r8, lsl #6
     5ac:	12509f01 	subsne	r9, r0, #1, 30
     5b0:	12540800 	subsne	r0, r4, #0, 16
     5b4:	00010800 	andeq	r0, r1, r0, lsl #16
     5b8:	00000050 	andeq	r0, r0, r0, asr r0
     5bc:	00000000 	andeq	r0, r0, r0
     5c0:	0011f400 	andseq	pc, r1, r0, lsl #8
     5c4:	00124408 	andseq	r4, r2, r8, lsl #8
     5c8:	91000208 	tstls	r0, r8, lsl #4
     5cc:	00124400 	andseq	r4, r2, r0, lsl #8
     5d0:	00124608 	andseq	r4, r2, r8, lsl #12
     5d4:	7d000208 	sfmvc	f0, 4, [r0, #-32]	; 0xffffffe0
     5d8:	00124600 	andseq	r4, r2, r0, lsl #12
     5dc:	00125408 	andseq	r5, r2, r8, lsl #8
     5e0:	7d000208 	sfmvc	f0, 4, [r0, #-32]	; 0xffffffe0
     5e4:	00000010 	andeq	r0, r0, r0, lsl r0
     5e8:	00000000 	andeq	r0, r0, r0
     5ec:	00122400 	andseq	r2, r2, r0, lsl #8
     5f0:	00122808 	andseq	r2, r2, r8, lsl #16
     5f4:	53000108 	movwpl	r0, #264	; 0x108
     5f8:	08001228 	stmdaeq	r0, {r3, r5, r9, ip}
     5fc:	0800122a 	stmdaeq	r0, {r1, r3, r5, r9, ip}
     600:	2a520001 	bcs	148060c <__Stack_Size+0x147fe0c>
     604:	2c080012 	stccs	0, cr0, [r8], {18}
     608:	03080012 	movweq	r0, #32786	; 0x8012
     60c:	9f7f7200 	svcls	0x007f7200
     610:	0800122c 	stmdaeq	r0, {r2, r3, r5, r9, ip}
     614:	08001230 	stmdaeq	r0, {r4, r5, r9, ip}
     618:	32520001 	subscc	r0, r2, #1
     61c:	34080012 	strcc	r0, [r8], #-18
     620:	01080012 	tsteq	r8, r2, lsl r0
     624:	12345200 	eorsne	r5, r4, #0, 4
     628:	12360800 	eorsne	r0, r6, #0, 16
     62c:	00030800 	andeq	r0, r3, r0, lsl #16
     630:	369f7f72 			; <UNDEFINED> instruction: 0x369f7f72
     634:	42080012 	andmi	r0, r8, #18
     638:	01080012 	tsteq	r8, r2, lsl r0
     63c:	12465200 	subne	r5, r6, #0, 4
     640:	124e0800 	subne	r0, lr, #0, 16
     644:	00010800 	andeq	r0, r1, r0, lsl #16
     648:	00124e53 	andseq	r4, r2, r3, asr lr
     64c:	00125408 	andseq	r5, r2, r8, lsl #8
     650:	30000208 	andcc	r0, r0, r8, lsl #4
     654:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     658:	00000000 	andeq	r0, r0, r0
     65c:	00120e00 	andseq	r0, r2, r0, lsl #28
     660:	00124408 	andseq	r4, r2, r8, lsl #8
     664:	76000808 	strvc	r0, [r0], -r8, lsl #16
     668:	1aff0800 	bne	fffc2670 <BootRAM+0xef32e11>
     66c:	449f2931 	ldrmi	r2, [pc], #2353	; 674 <_Minimum_Stack_Size+0x574>
     670:	46080012 			; <UNDEFINED> instruction: 0x46080012
     674:	07080012 	smladeq	r8, r2, r0, r0
     678:	94007d00 	strls	r7, [r0], #-3328	; 0xd00
     67c:	9f293101 	svcls	0x00293101
     680:	08001246 	stmdaeq	r0, {r1, r2, r6, r9, ip}
     684:	08001254 	stmdaeq	r0, {r2, r4, r6, r9, ip}
     688:	00760008 	rsbseq	r0, r6, r8
     68c:	311aff08 	tstcc	sl, r8, lsl #30
     690:	00009f29 	andeq	r9, r0, r9, lsr #30
     694:	00000000 	andeq	r0, r0, r0
     698:	120e0000 	andne	r0, lr, #0
     69c:	12160800 	andsne	r0, r6, #0, 16
     6a0:	00010800 	andeq	r0, r1, r0, lsl #16
     6a4:	00121650 	andseq	r1, r2, r0, asr r6
     6a8:	00124408 	andseq	r4, r2, r8, lsl #8
     6ac:	74000308 	strvc	r0, [r0], #-776	; 0x308
     6b0:	12449f70 	subne	r9, r4, #112, 30	; 0x1c0
     6b4:	12540800 	subsne	r0, r4, #0, 16
     6b8:	00040800 	andeq	r0, r4, r0, lsl #16
     6bc:	9f5001f3 	svcls	0x005001f3
	...
     6c8:	0800122e 	stmdaeq	r0, {r1, r2, r3, r5, r9, ip}
     6cc:	08001242 	stmdaeq	r0, {r1, r6, r9, ip}
     6d0:	00760007 	rsbseq	r0, r6, r7
     6d4:	29302448 	ldmdbcs	r0!, {r3, r6, sl, sp}
     6d8:	0012469f 	mulseq	r2, pc, r6	; <UNPREDICTABLE>
     6dc:	00125408 	andseq	r5, r2, r8, lsl #8
     6e0:	76000708 	strvc	r0, [r0], -r8, lsl #14
     6e4:	30244800 	eorcc	r4, r4, r0, lsl #16
     6e8:	00009f29 	andeq	r9, r0, r9, lsr #30
     6ec:	00000000 	andeq	r0, r0, r0
     6f0:	122e0000 	eorne	r0, lr, #0
     6f4:	12420800 	subne	r0, r2, #0, 16
     6f8:	00030800 	andeq	r0, r3, r0, lsl #16
     6fc:	469f7074 			; <UNDEFINED> instruction: 0x469f7074
     700:	54080012 	strpl	r0, [r8], #-18
     704:	04080012 	streq	r0, [r8], #-18
     708:	5001f300 	andpl	pc, r1, r0, lsl #6
     70c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     710:	00000000 	andeq	r0, r0, r0
     714:	00123800 	andseq	r3, r2, r0, lsl #16
     718:	00124208 	andseq	r4, r2, r8, lsl #4
     71c:	76000808 	strvc	r0, [r0], -r8, lsl #16
     720:	1aff0800 	bne	fffc2728 <BootRAM+0xef32ec9>
     724:	4e9f2931 	mrcmi	9, 4, r2, cr15, cr1, {1}
     728:	54080012 	strpl	r0, [r8], #-18
     72c:	08080012 	stmdaeq	r8, {r1, r4}
     730:	08007600 	stmdaeq	r0, {r9, sl, ip, sp, lr}
     734:	29311aff 	ldmdbcs	r1!, {r0, r1, r2, r3, r4, r5, r6, r7, r9, fp, ip}
     738:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     73c:	00000000 	andeq	r0, r0, r0
     740:	00123800 	andseq	r3, r2, r0, lsl #16
     744:	00124208 	andseq	r4, r2, r8, lsl #4
     748:	74000308 	strvc	r0, [r0], #-776	; 0x308
     74c:	124e9f70 	subne	r9, lr, #112, 30	; 0x1c0
     750:	12540800 	subsne	r0, r4, #0, 16
     754:	00040800 	andeq	r0, r4, r0, lsl #16
     758:	9f5001f3 	svcls	0x005001f3
	...
     76c:	00510001 	subseq	r0, r1, r1
     770:	00000000 	andeq	r0, r0, r0
     774:	03000000 	movweq	r0, #0
     778:	9f017100 	svcls	0x00017100
	...
     784:	00510001 	subseq	r0, r1, r1
	...
     794:	01000000 	mrseq	r0, (UNDEF: 0)
     798:	00005000 	andeq	r5, r0, r0
     79c:	00000000 	andeq	r0, r0, r0
     7a0:	00010000 	andeq	r0, r1, r0
     7a4:	00000051 	andeq	r0, r0, r1, asr r0
     7a8:	00000000 	andeq	r0, r0, r0
     7ac:	f3000400 	vshl.u8	d0, d0, d0
     7b0:	009f5001 	addseq	r5, pc, r1
	...
     7c0:	01000000 	mrseq	r0, (UNDEF: 0)
     7c4:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     7d4:	00010000 	andeq	r0, r1, r0
     7d8:	0000005d 	andeq	r0, r0, sp, asr r0
     7dc:	00000000 	andeq	r0, r0, r0
     7e0:	70000300 	andvc	r0, r0, r0, lsl #6
     7e4:	00009f01 	andeq	r9, r0, r1, lsl #30
     7e8:	00000000 	andeq	r0, r0, r0
     7ec:	00010000 	andeq	r0, r1, r0
     7f0:	00000050 	andeq	r0, r0, r0, asr r0
     7f4:	00000000 	andeq	r0, r0, r0
     7f8:	00126600 	andseq	r6, r2, r0, lsl #12
     7fc:	00126908 	andseq	r6, r2, r8, lsl #18
     800:	51000108 	tstpl	r0, r8, lsl #2
     804:	08001269 	stmdaeq	r0, {r0, r3, r5, r6, r9, ip}
     808:	08001290 	stmdaeq	r0, {r4, r7, r9, ip}
     80c:	50910002 	addspl	r0, r1, r2
     810:	08001290 	stmdaeq	r0, {r4, r7, r9, ip}
     814:	08001292 	stmdaeq	r0, {r1, r4, r7, r9, ip}
     818:	007d0002 	rsbseq	r0, sp, r2
     81c:	08001292 	stmdaeq	r0, {r1, r4, r7, r9, ip}
     820:	08001298 	stmdaeq	r0, {r3, r4, r7, r9, ip}
     824:	50910002 	addspl	r0, r1, r2
	...
     830:	0800126e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, ip}
     834:	08001278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip}
     838:	80910004 	addshi	r0, r1, r4
     83c:	12789f7e 	rsbsne	r9, r8, #504	; 0x1f8
     840:	127a0800 	rsbsne	r0, sl, #0, 16
     844:	00010800 	andeq	r0, r1, r0, lsl #16
     848:	00128250 	andseq	r8, r2, r0, asr r2
     84c:	00128608 	andseq	r8, r2, r8, lsl #12
     850:	70000308 	andvc	r0, r0, r8, lsl #6
     854:	12869f01 	addne	r9, r6, #1, 30
     858:	128a0800 	addne	r0, sl, #0, 16
     85c:	00010800 	andeq	r0, r1, r0, lsl #16
     860:	00000050 	andeq	r0, r0, r0, asr r0
	...
     870:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     87c:	00570001 	subseq	r0, r7, r1
     880:	00000000 	andeq	r0, r0, r0
     884:	01000000 	mrseq	r0, (UNDEF: 0)
     888:	00005000 	andeq	r5, r0, r0
     88c:	00000000 	andeq	r0, r0, r0
     890:	00010000 	andeq	r0, r1, r0
     894:	00000057 	andeq	r0, r0, r7, asr r0
	...
     8a4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     8b0:	00580001 	subseq	r0, r8, r1
     8b4:	00000000 	andeq	r0, r0, r0
     8b8:	01000000 	mrseq	r0, (UNDEF: 0)
     8bc:	00005100 	andeq	r5, r0, r0, lsl #2
     8c0:	00000000 	andeq	r0, r0, r0
     8c4:	00010000 	andeq	r0, r1, r0
     8c8:	00000058 	andeq	r0, r0, r8, asr r0
	...
     8d8:	30000200 	andcc	r0, r0, r0, lsl #4
     8dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     8e0:	00000000 	andeq	r0, r0, r0
     8e4:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     8f0:	00740005 	rsbseq	r0, r4, r5
     8f4:	009f1a3f 	addseq	r1, pc, pc, lsr sl	; <UNPREDICTABLE>
     8f8:	00000000 	andeq	r0, r0, r0
     8fc:	01000000 	mrseq	r0, (UNDEF: 0)
     900:	00005400 	andeq	r5, r0, r0, lsl #8
     904:	00000000 	andeq	r0, r0, r0
     908:	00030000 	andeq	r0, r3, r0
     90c:	009f7f74 	addseq	r7, pc, r4, ror pc	; <UNPREDICTABLE>
     910:	00000000 	andeq	r0, r0, r0
     914:	01000000 	mrseq	r0, (UNDEF: 0)
     918:	00005400 	andeq	r5, r0, r0, lsl #8
     91c:	00000000 	andeq	r0, r0, r0
     920:	00010000 	andeq	r0, r1, r0
     924:	00000054 	andeq	r0, r0, r4, asr r0
     928:	00000000 	andeq	r0, r0, r0
     92c:	30000200 	andcc	r0, r0, r0, lsl #4
     930:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     934:	00000000 	andeq	r0, r0, r0
     938:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     944:	080013fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, ip}
     948:	08001400 	stmdaeq	r0, {sl, ip}
     94c:	00520001 	subseq	r0, r2, r1
	...
     95c:	01000000 	mrseq	r0, (UNDEF: 0)
     960:	00005000 	andeq	r5, r0, r0
     964:	00000000 	andeq	r0, r0, r0
     968:	00040000 	andeq	r0, r4, r0
     96c:	9f5001f3 	svcls	0x005001f3
	...
     980:	00500001 	subseq	r0, r0, r1
     984:	00000000 	andeq	r0, r0, r0
     988:	04000000 	streq	r0, [r0], #-0
     98c:	5001f300 	andpl	pc, r1, r0, lsl #6
     990:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     9a0:	53000100 	movwpl	r0, #256	; 0x100
	...
     9ac:	08001438 	stmdaeq	r0, {r3, r4, r5, sl, ip}
     9b0:	08001445 	stmdaeq	r0, {r0, r2, r6, sl, ip}
     9b4:	45500001 	ldrbmi	r0, [r0, #-1]
     9b8:	ba080014 	blt	200a10 <__Stack_Size+0x200210>
     9bc:	01080014 	tsteq	r8, r4, lsl r0
     9c0:	14ba5400 	ldrtne	r5, [sl], #1024	; 0x400
     9c4:	14e00800 	strbtne	r0, [r0], #2048	; 0x800
     9c8:	00040800 	andeq	r0, r4, r0, lsl #16
     9cc:	9f5001f3 	svcls	0x005001f3
	...
     9d8:	080014ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, ip}
     9dc:	080014ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sl, ip}
     9e0:	ba540001 	blt	15009ec <__Stack_Size+0x15001ec>
     9e4:	e0080014 	and	r0, r8, r4, lsl r0
     9e8:	04080014 	streq	r0, [r8], #-20
     9ec:	5001f300 	andpl	pc, r1, r0, lsl #6
     9f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     9f4:	00000000 	andeq	r0, r0, r0
     9f8:	0014ae00 	andseq	sl, r4, r0, lsl #28
     9fc:	0014b708 	andseq	fp, r4, r8, lsl #14
     a00:	53000108 	movwpl	r0, #264	; 0x108
	...
     a14:	9f300002 	svcls	0x00300002
	...
     a20:	9f300002 	svcls	0x00300002
	...
     a34:	9f300002 	svcls	0x00300002
	...
     a40:	080014e0 	stmdaeq	r0, {r5, r6, r7, sl, ip}
     a44:	080014ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, ip}
     a48:	9f300002 	svcls	0x00300002
     a4c:	080014ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, ip}
     a50:	080014fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sl, ip}
     a54:	fa530001 	blx	14c0a60 <__Stack_Size+0x14c0260>
     a58:	02080014 	andeq	r0, r8, #20
     a5c:	01080015 	tsteq	r8, r5, lsl r0
     a60:	15025200 	strne	r5, [r2, #-512]	; 0x200
     a64:	15240800 	strne	r0, [r4, #-2048]!	; 0x800
     a68:	00010800 	andeq	r0, r1, r0, lsl #16
     a6c:	00000051 	andeq	r0, r0, r1, asr r0
     a70:	00000000 	andeq	r0, r0, r0
     a74:	0014e000 	andseq	lr, r4, r0
     a78:	00152208 	andseq	r2, r5, r8, lsl #4
     a7c:	30000208 	andcc	r0, r0, r8, lsl #4
     a80:	0015229f 	mulseq	r5, pc, r2	; <UNPREDICTABLE>
     a84:	00152808 	andseq	r2, r5, r8, lsl #16
     a88:	54000108 	strpl	r0, [r0], #-264	; 0x108
     a8c:	08001528 	stmdaeq	r0, {r3, r5, r8, sl, ip}
     a90:	08001536 	stmdaeq	r0, {r1, r2, r4, r5, r8, sl, ip}
     a94:	00520001 	subseq	r0, r2, r1
     a98:	00000000 	andeq	r0, r0, r0
     a9c:	e0000000 	and	r0, r0, r0
     aa0:	22080014 	andcs	r0, r8, #20
     aa4:	02080015 	andeq	r0, r8, #21
     aa8:	229f3000 	addscs	r3, pc, #0
     aac:	28080015 	stmdacs	r8, {r0, r2, r4}
     ab0:	01080015 	tsteq	r8, r5, lsl r0
     ab4:	15285200 	strne	r5, [r8, #-512]!	; 0x200
     ab8:	152e0800 	strne	r0, [lr, #-2048]!	; 0x800
     abc:	000f0800 	andeq	r0, pc, r0, lsl #16
     ac0:	0070ff08 	rsbseq	pc, r0, r8, lsl #30
     ac4:	1a330194 	bne	cc111c <__Stack_Size+0xcc091c>
     ac8:	331aff08 	tstcc	sl, #8, 30
     acc:	009f2424 	addseq	r2, pc, r4, lsr #8
     ad0:	00000000 	andeq	r0, r0, r0
     ad4:	e0000000 	and	r0, r0, r0
     ad8:	ee080014 	mcr	0, 0, r0, cr8, cr4, {0}
     adc:	02080014 	andeq	r0, r8, #20
     ae0:	ee9f3000 	cdp	0, 9, cr3, cr15, cr0, {0}
     ae4:	f4080014 	vst4.8	{d0-d3}, [r8 :64], r4
     ae8:	05080014 	streq	r0, [r8, #-20]
     aec:	00733400 	rsbseq	r3, r3, r0, lsl #8
     af0:	14f49f1c 	ldrbtne	r9, [r4], #3868	; 0xf1c
     af4:	14fa0800 	ldrbtne	r0, [sl], #2048	; 0x800
     af8:	00010800 	andeq	r0, r1, r0, lsl #16
     afc:	0014fa52 	andseq	pc, r4, r2, asr sl	; <UNPREDICTABLE>
     b00:	0014fe08 	andseq	pc, r4, r8, lsl #28
     b04:	34000508 	strcc	r0, [r0], #-1288	; 0x508
     b08:	9f1c0073 	svcls	0x001c0073
	...
     b14:	080014e0 	stmdaeq	r0, {r5, r6, r7, sl, ip}
     b18:	080014ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, ip}
     b1c:	9f3f0002 	svcls	0x003f0002
     b20:	080014ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, ip}
     b24:	080014f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, ip}
     b28:	733f0005 	teqvc	pc, #5
     b2c:	f69f2500 			; <UNDEFINED> instruction: 0xf69f2500
     b30:	00080014 	andeq	r0, r8, r4, lsl r0
     b34:	01080015 	tsteq	r8, r5, lsl r0
     b38:	00005100 	andeq	r5, r0, r0, lsl #2
     b3c:	00000000 	andeq	r0, r0, r0
     b40:	158c0000 	strne	r0, [ip]
     b44:	15b60800 	ldrne	r0, [r6, #2048]!	; 0x800
     b48:	00010800 	andeq	r0, r1, r0, lsl #16
     b4c:	0015b650 	andseq	fp, r5, r0, asr r6
     b50:	0015cc08 	andseq	ip, r5, r8, lsl #24
     b54:	f3000408 	vshl.u8	d0, d8, d0
     b58:	009f5001 	addseq	r5, pc, r1
     b5c:	00000000 	andeq	r0, r0, r0
     b60:	96000000 	strls	r0, [r0], -r0
     b64:	b2080015 	andlt	r0, r8, #21
     b68:	02080015 	andeq	r0, r8, #21
     b6c:	b29f3200 	addslt	r3, pc, #0, 4
     b70:	cc080015 	stcgt	0, cr0, [r8], {21}
     b74:	02080015 	andeq	r0, r8, #21
     b78:	009f3000 	addseq	r3, pc, r0
	...
     b88:	01000000 	mrseq	r0, (UNDEF: 0)
     b8c:	00005000 	andeq	r5, r0, r0
     b90:	00000000 	andeq	r0, r0, r0
     b94:	00040000 	andeq	r0, r4, r0
     b98:	9f5001f3 	svcls	0x005001f3
	...
     bac:	00510001 	subseq	r0, r1, r1
     bb0:	00000000 	andeq	r0, r0, r0
     bb4:	01000000 	mrseq	r0, (UNDEF: 0)
     bb8:	00005400 	andeq	r5, r0, r0, lsl #8
     bbc:	00000000 	andeq	r0, r0, r0
     bc0:	00030000 	andeq	r0, r3, r0
     bc4:	009f0174 	addseq	r0, pc, r4, ror r1	; <UNPREDICTABLE>
     bc8:	00000000 	andeq	r0, r0, r0
     bcc:	01000000 	mrseq	r0, (UNDEF: 0)
     bd0:	00005400 	andeq	r5, r0, r0, lsl #8
	...
     be0:	00010000 	andeq	r0, r1, r0
     be4:	00000059 	andeq	r0, r0, r9, asr r0
	...
     bf4:	32000200 	andcc	r0, r0, #0, 4
     bf8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     bfc:	00000000 	andeq	r0, r0, r0
     c00:	30000200 	andcc	r0, r0, r0, lsl #4
     c04:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c08:	00000000 	andeq	r0, r0, r0
     c0c:	0015cc00 	andseq	ip, r5, r0, lsl #24
     c10:	00160e08 	andseq	r0, r6, r8, lsl #28
     c14:	50000108 	andpl	r0, r0, r8, lsl #2
     c18:	0800160e 	stmdaeq	r0, {r1, r2, r3, r9, sl, ip}
     c1c:	08001624 	stmdaeq	r0, {r2, r5, r9, sl, ip}
     c20:	01f30004 	mvnseq	r0, r4
     c24:	00009f50 	andeq	r9, r0, r0, asr pc
     c28:	00000000 	andeq	r0, r0, r0
     c2c:	15de0000 	ldrbne	r0, [lr]
     c30:	160e0800 	strne	r0, [lr], -r0, lsl #16
     c34:	00010800 	andeq	r0, r1, r0, lsl #16
     c38:	00160e50 	andseq	r0, r6, r0, asr lr
     c3c:	00162408 	andseq	r2, r6, r8, lsl #8
     c40:	f3000408 	vshl.u8	d0, d8, d0
     c44:	009f5001 	addseq	r5, pc, r1
     c48:	00000000 	andeq	r0, r0, r0
     c4c:	e0000000 	and	r0, r0, r0
     c50:	0a080015 	beq	200cac <__Stack_Size+0x2004ac>
     c54:	01080016 	tsteq	r8, r6, lsl r0
     c58:	160a5500 	strne	r5, [sl], -r0, lsl #10
     c5c:	16240800 	strtne	r0, [r4], -r0, lsl #16
     c60:	00010800 	andeq	r0, r1, r0, lsl #16
     c64:	00000052 	andeq	r0, r0, r2, asr r0
     c68:	00000000 	andeq	r0, r0, r0
     c6c:	00164800 	andseq	r4, r6, r0, lsl #16
     c70:	00164e08 	andseq	r4, r6, r8, lsl #28
     c74:	50000108 	andpl	r0, r0, r8, lsl #2
     c78:	0800164e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sl, ip}
     c7c:	08001652 	stmdaeq	r0, {r1, r4, r6, r9, sl, ip}
     c80:	00500001 	subseq	r0, r0, r1
     c84:	00000000 	andeq	r0, r0, r0
     c88:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     c8c:	52080016 	andpl	r0, r8, #22
     c90:	07080016 	smladeq	r8, r6, r0, r0
     c94:	00703f00 	rsbseq	r3, r0, r0, lsl #30
     c98:	9f242432 	svcls	0x00242432
     c9c:	08001656 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, ip}
     ca0:	08001658 	stmdaeq	r0, {r3, r4, r6, r9, sl, ip}
     ca4:	58500001 	ldmdapl	r0, {r0}^
     ca8:	5a080016 	bpl	200d08 <__Stack_Size+0x200508>
     cac:	04080016 	streq	r0, [r8], #-22
     cb0:	20007000 	andcs	r7, r0, r0
     cb4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     cb8:	00000000 	andeq	r0, r0, r0
     cbc:	00173600 	andseq	r3, r7, r0, lsl #12
     cc0:	00176408 	andseq	r6, r7, r8, lsl #8
     cc4:	53000108 	movwpl	r0, #264	; 0x108
     cc8:	08001782 	stmdaeq	r0, {r1, r7, r8, r9, sl, ip}
     ccc:	080017a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, ip}
     cd0:	b8530001 	ldmdalt	r3, {r0}^
     cd4:	c6080017 			; <UNDEFINED> instruction: 0xc6080017
     cd8:	01080017 	tsteq	r8, r7, lsl r0
     cdc:	181e5300 	ldmdane	lr, {r8, r9, ip, lr}
     ce0:	182c0800 	stmdane	ip!, {fp}
     ce4:	00010800 	andeq	r0, r1, r0, lsl #16
     ce8:	00183253 	andseq	r3, r8, r3, asr r2
     cec:	00183e08 	andseq	r3, r8, r8, lsl #28
     cf0:	53000108 	movwpl	r0, #264	; 0x108
     cf4:	08001844 	stmdaeq	r0, {r2, r6, fp, ip}
     cf8:	08001846 	stmdaeq	r0, {r1, r2, r6, fp, ip}
     cfc:	7e530001 	cdpvc	0, 5, cr0, cr3, cr1, {0}
     d00:	80080018 	andhi	r0, r8, r8, lsl r0
     d04:	01080018 	tsteq	r8, r8, lsl r0
     d08:	189a5300 	ldmne	sl, {r8, r9, ip, lr}
     d0c:	189c0800 	ldmne	ip, {fp}
     d10:	00010800 	andeq	r0, r1, r0, lsl #16
     d14:	0018e053 	andseq	lr, r8, r3, asr r0
     d18:	0018e208 	andseq	lr, r8, r8, lsl #4
     d1c:	53000108 	movwpl	r0, #264	; 0x108
	...
     d28:	080017ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, sl, ip}
     d2c:	080017f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, ip}
     d30:	9f300002 	svcls	0x00300002
     d34:	080017f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, ip}
     d38:	0800180a 	stmdaeq	r0, {r1, r3, fp, ip}
     d3c:	00550001 	subseq	r0, r5, r1
     d40:	00000000 	andeq	r0, r0, r0
     d44:	3c000000 	stccc	0, cr0, [r0], {-0}
     d48:	48080019 	stmdami	r8, {r0, r3, r4}
     d4c:	01080019 	tsteq	r8, r9, lsl r0
     d50:	19a25000 	stmibne	r2!, {ip, lr}
     d54:	19a40800 	stmibne	r4!, {fp}
     d58:	00010800 	andeq	r0, r1, r0, lsl #16
     d5c:	0019aa50 	andseq	sl, r9, r0, asr sl
     d60:	0019ac08 	andseq	sl, r9, r8, lsl #24
     d64:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     d70:	08001a08 	stmdaeq	r0, {r3, r9, fp, ip}
     d74:	08001a16 	stmdaeq	r0, {r1, r2, r4, r9, fp, ip}
     d78:	22530001 	subscs	r0, r3, #1
     d7c:	2608001a 			; <UNDEFINED> instruction: 0x2608001a
     d80:	0108001a 	tsteq	r8, sl, lsl r0
     d84:	00005300 	andeq	r5, r0, r0, lsl #6
     d88:	00000000 	andeq	r0, r0, r0
     d8c:	1a400000 	bne	1000d94 <__Stack_Size+0x1000594>
     d90:	1a440800 	bne	1102d98 <__Stack_Size+0x1102598>
     d94:	00010800 	andeq	r0, r1, r0, lsl #16
     d98:	001a4450 	andseq	r4, sl, r0, asr r4
     d9c:	001a4608 	andseq	r4, sl, r8, lsl #12
     da0:	f3000408 	vshl.u8	d0, d8, d0
     da4:	469f5001 	ldrmi	r5, [pc], r1
     da8:	5808001a 	stmdapl	r8, {r1, r3, r4}
     dac:	0108001a 	tsteq	r8, sl, lsl r0
     db0:	00005000 	andeq	r5, r0, r0
     db4:	00000000 	andeq	r0, r0, r0
     db8:	1a580000 	bne	1600dc0 <__Stack_Size+0x16005c0>
     dbc:	1a5c0800 	bne	1702dc4 <__Stack_Size+0x17025c4>
     dc0:	00010800 	andeq	r0, r1, r0, lsl #16
     dc4:	001a5c50 	andseq	r5, sl, r0, asr ip
     dc8:	001a5e08 	andseq	r5, sl, r8, lsl #28
     dcc:	f3000408 	vshl.u8	d0, d8, d0
     dd0:	5e9f5001 	cdppl	0, 9, cr5, cr15, cr1, {0}
     dd4:	7008001a 	andvc	r0, r8, sl, lsl r0
     dd8:	0108001a 	tsteq	r8, sl, lsl r0
     ddc:	00005000 	andeq	r5, r0, r0
     de0:	00000000 	andeq	r0, r0, r0
     de4:	1a700000 	bne	1c00dec <__Stack_Size+0x1c005ec>
     de8:	1a7a0800 	bne	1e82df0 <__Stack_Size+0x1e825f0>
     dec:	00010800 	andeq	r0, r1, r0, lsl #16
     df0:	001a7a50 	andseq	r7, sl, r0, asr sl
     df4:	001a8408 	andseq	r8, sl, r8, lsl #8
     df8:	f3000408 	vshl.u8	d0, d8, d0
     dfc:	849f5001 	ldrhi	r5, [pc], #1	; e04 <__Stack_Size+0x604>
     e00:	a408001a 	strge	r0, [r8], #-26
     e04:	0108001a 	tsteq	r8, sl, lsl r0
     e08:	00005000 	andeq	r5, r0, r0
     e0c:	00000000 	andeq	r0, r0, r0
     e10:	1aa40000 	bne	fe900e18 <BootRAM+0xd8715b9>
     e14:	1ab20800 	bne	fec82e1c <BootRAM+0xdbf35bd>
     e18:	00010800 	andeq	r0, r1, r0, lsl #16
     e1c:	001ab250 	andseq	fp, sl, r0, asr r2
     e20:	001aba08 	andseq	fp, sl, r8, lsl #20
     e24:	f3000408 	vshl.u8	d0, d8, d0
     e28:	ba9f5001 	blt	fe7d4e34 <BootRAM+0xd7455d5>
     e2c:	d808001a 	stmdale	r8, {r1, r3, r4}
     e30:	0108001a 	tsteq	r8, sl, lsl r0
     e34:	00005000 	andeq	r5, r0, r0
	...
     e44:	00020000 	andeq	r0, r2, r0
     e48:	00009f30 	andeq	r9, r0, r0, lsr pc
     e4c:	00000000 	andeq	r0, r0, r0
     e50:	00010000 	andeq	r0, r1, r0
     e54:	00000054 	andeq	r0, r0, r4, asr r0
	...
     e64:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     e70:	00580001 	subseq	r0, r8, r1
     e74:	00000000 	andeq	r0, r0, r0
     e78:	04000000 	streq	r0, [r0], #-0
     e7c:	5001f300 	andpl	pc, r1, r0, lsl #6
     e80:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     e90:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     e9c:	00560001 	subseq	r0, r6, r1
     ea0:	00000000 	andeq	r0, r0, r0
     ea4:	04000000 	streq	r0, [r0], #-0
     ea8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     eac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     ebc:	52000100 	andpl	r0, r0, #0, 2
	...
     ec8:	00570001 	subseq	r0, r7, r1
     ecc:	00000000 	andeq	r0, r0, r0
     ed0:	04000000 	streq	r0, [r0], #-0
     ed4:	5201f300 	andpl	pc, r1, #0, 6
     ed8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     ee8:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     ef4:	01740003 	cmneq	r4, r3
     ef8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     efc:	00000000 	andeq	r0, r0, r0
     f00:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     f14:	00560001 	subseq	r0, r6, r1
     f18:	00000000 	andeq	r0, r0, r0
     f1c:	04000000 	streq	r0, [r0], #-0
     f20:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     f24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     f34:	5d000100 	stfpls	f0, [r0, #-0]
	...
     f40:	a8910004 	ldmge	r1, {r2}
     f44:	00009f7d 	andeq	r9, r0, sp, ror pc
     f48:	00000000 	andeq	r0, r0, r0
     f4c:	00040000 	andeq	r0, r4, r0
     f50:	9f7da87d 	svcls	0x007da87d
	...
     f64:	00550001 	subseq	r0, r5, r1
	...
     f74:	04000000 	streq	r0, [r0], #-0
     f78:	7e889100 	sinvce	f1, f0
     f7c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     f80:	00000000 	andeq	r0, r0, r0
     f84:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     f90:	88910004 	ldmhi	r1, {r2}
     f94:	00009f7e 	andeq	r9, r0, lr, ror pc
     f98:	00000000 	andeq	r0, r0, r0
     f9c:	00010000 	andeq	r0, r1, r0
     fa0:	00000050 	andeq	r0, r0, r0, asr r0
     fa4:	00000000 	andeq	r0, r0, r0
     fa8:	91000400 	tstls	r0, r0, lsl #8
     fac:	009f7e88 	addseq	r7, pc, r8, lsl #29
     fb0:	00000000 	andeq	r0, r0, r0
     fb4:	01000000 	mrseq	r0, (UNDEF: 0)
     fb8:	00005100 	andeq	r5, r0, r0, lsl #2
     fbc:	00000000 	andeq	r0, r0, r0
     fc0:	00040000 	andeq	r0, r4, r0
     fc4:	9f7e8891 	svcls	0x007e8891
	...
     fd0:	887d0004 	ldmdahi	sp!, {r2}^
     fd4:	00009f7e 	andeq	r9, r0, lr, ror pc
	...
     fe4:	00040000 	andeq	r0, r4, r0
     fe8:	9f7de891 	svcls	0x007de891
	...
     ff4:	00510001 	subseq	r0, r1, r1
     ff8:	00000000 	andeq	r0, r0, r0
     ffc:	04000000 	streq	r0, [r0], #-0
    1000:	7de89100 	stfvcp	f1, [r8]
    1004:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1008:	00000000 	andeq	r0, r0, r0
    100c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1018:	e8910004 	ldm	r1, {r2}
    101c:	00009f7d 	andeq	r9, r0, sp, ror pc
    1020:	00000000 	andeq	r0, r0, r0
    1024:	00040000 	andeq	r0, r4, r0
    1028:	9f7de87d 	svcls	0x007de87d
	...
    103c:	c8910004 	ldmgt	r1, {r2}
    1040:	00009f7d 	andeq	r9, r0, sp, ror pc
    1044:	00000000 	andeq	r0, r0, r0
    1048:	00010000 	andeq	r0, r1, r0
    104c:	00000052 	andeq	r0, r0, r2, asr r0
    1050:	00000000 	andeq	r0, r0, r0
    1054:	91000400 	tstls	r0, r0, lsl #8
    1058:	009f7dc8 	addseq	r7, pc, r8, asr #27
    105c:	00000000 	andeq	r0, r0, r0
    1060:	01000000 	mrseq	r0, (UNDEF: 0)
    1064:	00005000 	andeq	r5, r0, r0
    1068:	00000000 	andeq	r0, r0, r0
    106c:	00040000 	andeq	r0, r4, r0
    1070:	9f7dc891 	svcls	0x007dc891
	...
    107c:	00510001 	subseq	r0, r1, r1
    1080:	00000000 	andeq	r0, r0, r0
    1084:	04000000 	streq	r0, [r0], #-0
    1088:	7dc89100 	stfvcp	f1, [r8]
    108c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1090:	00000000 	andeq	r0, r0, r0
    1094:	7d000400 	cfstrsvc	mvf0, [r0, #-0]
    1098:	009f7dc8 	addseq	r7, pc, r8, asr #27
	...
    10a8:	01000000 	mrseq	r0, (UNDEF: 0)
    10ac:	00005d00 	andeq	r5, r0, r0, lsl #26
    10b0:	00000000 	andeq	r0, r0, r0
    10b4:	00040000 	andeq	r0, r4, r0
    10b8:	9f7da891 	svcls	0x007da891
	...
    10c4:	a87d0004 	ldmdage	sp!, {r2}^
    10c8:	00009f7d 	andeq	r9, r0, sp, ror pc
	...
    10d8:	00010000 	andeq	r0, r1, r0
    10dc:	00000056 	andeq	r0, r0, r6, asr r0
    10e0:	00000000 	andeq	r0, r0, r0
    10e4:	f3000400 	vshl.u8	d0, d0, d0
    10e8:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    10f8:	04000000 	streq	r0, [r0], #-0
    10fc:	7ec89100 	acsvce	f1, f0
    1100:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1104:	00000000 	andeq	r0, r0, r0
    1108:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1114:	c8910004 	ldmgt	r1, {r2}
    1118:	00009f7e 	andeq	r9, r0, lr, ror pc
    111c:	00000000 	andeq	r0, r0, r0
    1120:	00010000 	andeq	r0, r1, r0
    1124:	00000052 	andeq	r0, r0, r2, asr r0
    1128:	00000000 	andeq	r0, r0, r0
    112c:	91000400 	tstls	r0, r0, lsl #8
    1130:	009f7ec8 	addseq	r7, pc, r8, asr #29
    1134:	00000000 	andeq	r0, r0, r0
    1138:	04000000 	streq	r0, [r0], #-0
    113c:	7ec87d00 	cdpvc	13, 12, cr7, cr8, cr0, {0}
    1140:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1150:	91000400 	tstls	r0, r0, lsl #8
    1154:	009f7ea8 	addseq	r7, pc, r8, lsr #29
    1158:	00000000 	andeq	r0, r0, r0
    115c:	01000000 	mrseq	r0, (UNDEF: 0)
    1160:	00005200 	andeq	r5, r0, r0, lsl #4
    1164:	00000000 	andeq	r0, r0, r0
    1168:	00040000 	andeq	r0, r4, r0
    116c:	9f7ea891 	svcls	0x007ea891
	...
    1178:	a87d0004 	ldmdage	sp!, {r2}^
    117c:	00009f7e 	andeq	r9, r0, lr, ror pc
    1180:	00000000 	andeq	r0, r0, r0
    1184:	1ae80000 	bne	ffa0118c <BootRAM+0xe97192d>
    1188:	1b3c0800 	blne	f03190 <__Stack_Size+0xf02990>
    118c:	00010800 	andeq	r0, r1, r0, lsl #16
    1190:	001b3c50 	andseq	r3, fp, r0, asr ip
    1194:	001b5408 	andseq	r5, fp, r8, lsl #8
    1198:	54000108 	strpl	r0, [r0], #-264	; 0x108
    119c:	08001b54 	stmdaeq	r0, {r2, r4, r6, r8, r9, fp, ip}
    11a0:	08001b57 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, r9, fp, ip}
    11a4:	40700003 	rsbsmi	r0, r0, r3
    11a8:	001b579f 	mulseq	fp, pc, r7	; <UNPREDICTABLE>
    11ac:	001b5808 	andseq	r5, fp, r8, lsl #16
    11b0:	f3000408 	vshl.u8	d0, d8, d0
    11b4:	009f5001 	addseq	r5, pc, r1
    11b8:	00000000 	andeq	r0, r0, r0
    11bc:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    11c0:	f608001a 			; <UNDEFINED> instruction: 0xf608001a
    11c4:	0108001a 	tsteq	r8, sl, lsl r0
    11c8:	1af65100 	bne	ffd955d0 <BootRAM+0xed05d71>
    11cc:	1b540800 	blne	15031d4 <__Stack_Size+0x15029d4>
    11d0:	00010800 	andeq	r0, r1, r0, lsl #16
    11d4:	001b5455 	andseq	r5, fp, r5, asr r4
    11d8:	001b5708 	andseq	r5, fp, r8, lsl #14
    11dc:	51000108 	tstpl	r0, r8, lsl #2
    11e0:	08001b57 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, r9, fp, ip}
    11e4:	08001b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip}
    11e8:	01f30004 	mvnseq	r0, r4
    11ec:	00009f51 	andeq	r9, r0, r1, asr pc
    11f0:	00000000 	andeq	r0, r0, r0
    11f4:	1ae80000 	bne	ffa011fc <BootRAM+0xe97199d>
    11f8:	1b200800 	blne	803200 <__Stack_Size+0x802a00>
    11fc:	00010800 	andeq	r0, r1, r0, lsl #16
    1200:	001b2052 	andseq	r2, fp, r2, asr r0
    1204:	001b5408 	andseq	r5, fp, r8, lsl #8
    1208:	56000108 	strpl	r0, [r0], -r8, lsl #2
    120c:	08001b54 	stmdaeq	r0, {r2, r4, r6, r8, r9, fp, ip}
    1210:	08001b57 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, r9, fp, ip}
    1214:	57520001 	ldrbpl	r0, [r2, -r1]
    1218:	5808001b 	stmdapl	r8, {r0, r1, r3, r4}
    121c:	0408001b 	streq	r0, [r8], #-27
    1220:	5201f300 	andpl	pc, r1, #0, 6
    1224:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1228:	00000000 	andeq	r0, r0, r0
    122c:	001b3600 	andseq	r3, fp, r0, lsl #12
    1230:	001b5408 	andseq	r5, fp, r8, lsl #8
    1234:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1238:	08001b54 	stmdaeq	r0, {r2, r4, r6, r8, r9, fp, ip}
    123c:	08001b57 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, r9, fp, ip}
    1240:	57510001 	ldrbpl	r0, [r1, -r1]
    1244:	5808001b 	stmdapl	r8, {r0, r1, r3, r4}
    1248:	0408001b 	streq	r0, [r8], #-27
    124c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1250:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1254:	00000000 	andeq	r0, r0, r0
    1258:	001b3600 	andseq	r3, fp, r0, lsl #12
    125c:	001b3c08 	andseq	r3, fp, r8, lsl #24
    1260:	50000108 	andpl	r0, r0, r8, lsl #2
    1264:	08001b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, ip}
    1268:	08001b54 	stmdaeq	r0, {r2, r4, r6, r8, r9, fp, ip}
    126c:	54540001 	ldrbpl	r0, [r4], #-1
    1270:	5708001b 	smladpl	r8, fp, r0, r0
    1274:	0308001b 	movweq	r0, #32795	; 0x801b
    1278:	9f407000 	svcls	0x00407000
    127c:	08001b57 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, r9, fp, ip}
    1280:	08001b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip}
    1284:	01f30004 	mvnseq	r0, r4
    1288:	00009f50 	andeq	r9, r0, r0, asr pc
    128c:	00000000 	andeq	r0, r0, r0
    1290:	1b360000 	blne	d81298 <__Stack_Size+0xd80a98>
    1294:	1b3c0800 	blne	f0329c <__Stack_Size+0xf02a9c>
    1298:	00030800 	andeq	r0, r3, r0, lsl #16
    129c:	3c9f2070 	ldccc	0, cr2, [pc], {112}	; 0x70
    12a0:	5408001b 	strpl	r0, [r8], #-27
    12a4:	0308001b 	movweq	r0, #32795	; 0x801b
    12a8:	9f207400 	svcls	0x00207400
    12ac:	08001b54 	stmdaeq	r0, {r2, r4, r6, r8, r9, fp, ip}
    12b0:	08001b57 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, r9, fp, ip}
    12b4:	60700003 	rsbsvs	r0, r0, r3
    12b8:	001b579f 	mulseq	fp, pc, r7	; <UNPREDICTABLE>
    12bc:	001b5808 	andseq	r5, fp, r8, lsl #16
    12c0:	f3000608 	vmax.u8	d0, d0, d8
    12c4:	20235001 	eorcs	r5, r3, r1
    12c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    12cc:	00000000 	andeq	r0, r0, r0
    12d0:	001b5800 	andseq	r5, fp, r0, lsl #16
    12d4:	001b6408 	andseq	r6, fp, r8, lsl #8
    12d8:	50000108 	andpl	r0, r0, r8, lsl #2
    12dc:	08001b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip}
    12e0:	08001b92 	stmdaeq	r0, {r1, r4, r7, r8, r9, fp, ip}
    12e4:	00560001 	subseq	r0, r6, r1
    12e8:	00000000 	andeq	r0, r0, r0
    12ec:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    12f0:	6808001b 	stmdavs	r8, {r0, r1, r3, r4}
    12f4:	0108001b 	tsteq	r8, fp, lsl r0
    12f8:	1b685100 	blne	1a15700 <__Stack_Size+0x1a14f00>
    12fc:	1b920800 	blne	fe483304 <BootRAM+0xd3f3aa5>
    1300:	00010800 	andeq	r0, r1, r0, lsl #16
    1304:	00000055 	andeq	r0, r0, r5, asr r0
    1308:	00000000 	andeq	r0, r0, r0
    130c:	001b5800 	andseq	r5, fp, r0, lsl #16
    1310:	001b6b08 	andseq	r6, fp, r8, lsl #22
    1314:	52000108 	andpl	r0, r0, #8, 2
    1318:	08001b6b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r8, r9, fp, ip}
    131c:	08001b92 	stmdaeq	r0, {r1, r4, r7, r8, r9, fp, ip}
    1320:	00540001 	subseq	r0, r4, r1
    1324:	00000000 	andeq	r0, r0, r0
    1328:	94000000 	strls	r0, [r0], #-0
    132c:	a008001b 	andge	r0, r8, fp, lsl r0
    1330:	0108001b 	tsteq	r8, fp, lsl r0
    1334:	1ba05000 	blne	fe81533c <BootRAM+0xd785add>
    1338:	1bf20800 	blne	ffc83340 <BootRAM+0xebf3ae1>
    133c:	00010800 	andeq	r0, r1, r0, lsl #16
    1340:	00000055 	andeq	r0, r0, r5, asr r0
    1344:	00000000 	andeq	r0, r0, r0
    1348:	001b9400 	andseq	r9, fp, r0, lsl #8
    134c:	001ba608 	andseq	sl, fp, r8, lsl #12
    1350:	51000108 	tstpl	r0, r8, lsl #2
    1354:	08001ba6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, fp, ip}
    1358:	08001bf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, fp, ip}
    135c:	00570001 	subseq	r0, r7, r1
    1360:	00000000 	andeq	r0, r0, r0
    1364:	94000000 	strls	r0, [r0], #-0
    1368:	a208001b 	andge	r0, r8, #27
    136c:	0108001b 	tsteq	r8, fp, lsl r0
    1370:	1ba25200 	blne	fe895b78 <BootRAM+0xd806319>
    1374:	1bf20800 	blne	ffc8337c <BootRAM+0xebf3b1d>
    1378:	00010800 	andeq	r0, r1, r0, lsl #16
    137c:	00000056 	andeq	r0, r0, r6, asr r0
    1380:	00000000 	andeq	r0, r0, r0
    1384:	001bea00 	andseq	lr, fp, r0, lsl #20
    1388:	001bec08 	andseq	lr, fp, r8, lsl #24
    138c:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    1398:	08001b9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp, ip}
    139c:	08001ba6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, fp, ip}
    13a0:	a6510001 	ldrbge	r0, [r1], -r1
    13a4:	f208001b 	vqadd.s8	d0, d8, d11
    13a8:	0108001b 	tsteq	r8, fp, lsl r0
    13ac:	00005700 	andeq	r5, r0, r0, lsl #14
    13b0:	00000000 	andeq	r0, r0, r0
    13b4:	1b9e0000 	blne	fe7813bc <BootRAM+0xd6f1b5d>
    13b8:	1bf00800 	blne	ffc033c0 <BootRAM+0xeb73b61>
    13bc:	00010800 	andeq	r0, r1, r0, lsl #16
    13c0:	001bf05d 	andseq	pc, fp, sp, asr r0	; <UNPREDICTABLE>
    13c4:	001bf208 	andseq	pc, fp, r8, lsl #4
    13c8:	91000308 	tstls	r0, r8, lsl #6
    13cc:	00009f48 	andeq	r9, r0, r8, asr #30
    13d0:	00000000 	andeq	r0, r0, r0
    13d4:	1bf40000 	blne	ffd013dc <BootRAM+0xec71b7d>
    13d8:	1c340800 	ldcne	8, cr0, [r4], #-0
    13dc:	00010800 	andeq	r0, r1, r0, lsl #16
    13e0:	001c3450 	andseq	r3, ip, r0, asr r4
    13e4:	001cb408 	andseq	fp, ip, r8, lsl #8
    13e8:	54000108 	strpl	r0, [r0], #-264	; 0x108
    13ec:	08001cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, ip}
    13f0:	08001cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip}
    13f4:	01f30004 	mvnseq	r0, r4
    13f8:	00009f50 	andeq	r9, r0, r0, asr pc
    13fc:	00000000 	andeq	r0, r0, r0
    1400:	1bf40000 	blne	ffd01408 <BootRAM+0xec71ba9>
    1404:	1c390800 	ldcne	8, cr0, [r9], #-0
    1408:	00010800 	andeq	r0, r1, r0, lsl #16
    140c:	001c3951 	andseq	r3, ip, r1, asr r9
    1410:	001cbc08 	andseq	fp, ip, r8, lsl #24
    1414:	f3000408 	vshl.u8	d0, d8, d0
    1418:	009f5101 	addseq	r5, pc, r1, lsl #2
    141c:	00000000 	andeq	r0, r0, r0
    1420:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    1424:	2c08001b 	stccs	0, cr0, [r8], {27}
    1428:	0108001c 	tsteq	r8, ip, lsl r0
    142c:	1c2c5200 	sfmne	f5, 4, [ip], #-0
    1430:	1cbc0800 	ldcne	8, cr0, [ip]
    1434:	00040800 	andeq	r0, r4, r0, lsl #16
    1438:	9f5201f3 	svcls	0x005201f3
	...
    1444:	08001c08 	stmdaeq	r0, {r3, sl, fp, ip}
    1448:	08001cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, ip}
    144c:	00780008 	rsbseq	r0, r8, r8
    1450:	ff082537 			; <UNDEFINED> instruction: 0xff082537
    1454:	00009f1a 	andeq	r9, r0, sl, lsl pc
    1458:	00000000 	andeq	r0, r0, r0
    145c:	1c080000 	stcne	0, cr0, [r8], {-0}
    1460:	1c2c0800 	stcne	8, cr0, [ip], #-0
    1464:	00010800 	andeq	r0, r1, r0, lsl #16
    1468:	001c2c52 	andseq	r2, ip, r2, asr ip
    146c:	001cbc08 	andseq	fp, ip, r8, lsl #24
    1470:	f3000408 	vshl.u8	d0, d8, d0
    1474:	009f5201 	addseq	r5, pc, r1, lsl #4
    1478:	00000000 	andeq	r0, r0, r0
    147c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1480:	3908001c 	stmdbcc	r8, {r2, r3, r4}
    1484:	0108001c 	tsteq	r8, ip, lsl r0
    1488:	1c395100 	ldfnes	f5, [r9], #-0
    148c:	1cbc0800 	ldcne	8, cr0, [ip]
    1490:	00040800 	andeq	r0, r4, r0, lsl #16
    1494:	9f5101f3 	svcls	0x005101f3
	...
    14a0:	08001cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip}
    14a4:	08001cd2 	stmdaeq	r0, {r1, r4, r6, r7, sl, fp, ip}
    14a8:	d2500001 	subsle	r0, r0, #1
    14ac:	9808001c 	stmdals	r8, {r2, r3, r4}
    14b0:	0108001d 	tsteq	r8, sp, lsl r0
    14b4:	1d985600 	ldcne	6, cr5, [r8]
    14b8:	1d9c0800 	ldcne	8, cr0, [ip]
    14bc:	00040800 	andeq	r0, r4, r0, lsl #16
    14c0:	9f5001f3 	svcls	0x005001f3
	...
    14cc:	08001cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip}
    14d0:	08001cce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, fp, ip}
    14d4:	ce510001 	cdpgt	0, 5, cr0, cr1, cr1, {0}
    14d8:	9808001c 	stmdals	r8, {r2, r3, r4}
    14dc:	0108001d 	tsteq	r8, sp, lsl r0
    14e0:	1d985500 	cfldr32ne	mvfx5, [r8]
    14e4:	1d9c0800 	ldcne	8, cr0, [ip]
    14e8:	00040800 	andeq	r0, r4, r0, lsl #16
    14ec:	9f5101f3 	svcls	0x005101f3
	...
    14f8:	08001cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip}
    14fc:	08001cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip}
    1500:	d0520001 	subsle	r0, r2, r1
    1504:	9808001c 	stmdals	r8, {r2, r3, r4}
    1508:	0108001d 	tsteq	r8, sp, lsl r0
    150c:	1d985400 	cfldrsne	mvf5, [r8]
    1510:	1d9c0800 	ldcne	8, cr0, [ip]
    1514:	00040800 	andeq	r0, r4, r0, lsl #16
    1518:	9f5201f3 	svcls	0x005201f3
	...
    1524:	08001d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, ip}
    1528:	08001daa 	stmdaeq	r0, {r1, r3, r5, r7, r8, sl, fp, ip}
    152c:	aa500001 	bge	1401538 <__Stack_Size+0x1400d38>
    1530:	5008001d 	andpl	r0, r8, sp, lsl r0
    1534:	0108001e 	tsteq	r8, lr, lsl r0
    1538:	00005400 	andeq	r5, r0, r0, lsl #8
    153c:	00000000 	andeq	r0, r0, r0
    1540:	1d9c0000 	ldcne	0, cr0, [ip]
    1544:	1daf0800 	stcne	8, cr0, [pc]	; 154c <__Stack_Size+0xd4c>
    1548:	00010800 	andeq	r0, r1, r0, lsl #16
    154c:	001daf51 	andseq	sl, sp, r1, asr pc
    1550:	001e5008 	andseq	r5, lr, r8
    1554:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    1560:	08001e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip}
    1564:	08001e5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sl, fp, ip}
    1568:	5e500001 	cdppl	0, 5, cr0, cr0, cr1, {0}
    156c:	ce08001e 	mcrgt	0, 0, r0, cr8, cr14, {0}
    1570:	0108001e 	tsteq	r8, lr, lsl r0
    1574:	1ece5800 	cdpne	8, 12, cr5, cr14, cr0, {0}
    1578:	1ed40800 	cdpne	8, 13, cr0, cr4, cr0, {0}
    157c:	00040800 	andeq	r0, r4, r0, lsl #16
    1580:	9f5001f3 	svcls	0x005001f3
	...
    158c:	08001e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip}
    1590:	08001e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip}
    1594:	60510001 	subsvs	r0, r1, r1
    1598:	ce08001e 	mcrgt	0, 0, r0, cr8, cr14, {0}
    159c:	0108001e 	tsteq	r8, lr, lsl r0
    15a0:	1ece5700 	cdpne	7, 12, cr5, cr14, cr0, {0}
    15a4:	1ed40800 	cdpne	8, 13, cr0, cr4, cr0, {0}
    15a8:	00040800 	andeq	r0, r4, r0, lsl #16
    15ac:	9f5101f3 	svcls	0x005101f3
	...
    15b8:	08001e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip}
    15bc:	08001e62 	stmdaeq	r0, {r1, r5, r6, r9, sl, fp, ip}
    15c0:	62520001 	subsvs	r0, r2, #1
    15c4:	ce08001e 	mcrgt	0, 0, r0, cr8, cr14, {0}
    15c8:	0108001e 	tsteq	r8, lr, lsl r0
    15cc:	1ece5600 	cdpne	6, 12, cr5, cr14, cr0, {0}
    15d0:	1ed40800 	cdpne	8, 13, cr0, cr4, cr0, {0}
    15d4:	00040800 	andeq	r0, r4, r0, lsl #16
    15d8:	9f5201f3 	svcls	0x005201f3
	...
    15e4:	08001e66 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, fp, ip}
    15e8:	08001e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, ip}
    15ec:	ff080003 			; <UNDEFINED> instruction: 0xff080003
    15f0:	001e689f 	mulseq	lr, pc, r8	; <UNPREDICTABLE>
    15f4:	001eb208 	andseq	fp, lr, r8, lsl #4
    15f8:	54000108 	strpl	r0, [r0], #-264	; 0x108
    15fc:	08001eb2 	stmdaeq	r0, {r1, r4, r5, r7, r9, sl, fp, ip}
    1600:	08001eba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, fp, ip}
    1604:	01740003 	cmneq	r4, r3
    1608:	001eba9f 	mulseq	lr, pc, sl	; <UNPREDICTABLE>
    160c:	001ece08 	andseq	ip, lr, r8, lsl #28
    1610:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    161c:	08001e56 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, fp, ip}
    1620:	08001eca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, fp, ip}
    1624:	ca5d0001 	bgt	1741630 <__Stack_Size+0x1740e30>
    1628:	ce08001e 	mcrgt	0, 0, r0, cr8, cr14, {0}
    162c:	0408001e 	streq	r0, [r8], #-30
    1630:	7de89100 	stfvcp	f1, [r8]
    1634:	001ece9f 	mulseq	lr, pc, lr	; <UNPREDICTABLE>
    1638:	001ed408 	andseq	sp, lr, r8, lsl #8
    163c:	7d000408 	cfstrsvc	mvf0, [r0, #-32]	; 0xffffffe0
    1640:	009f7de8 	addseq	r7, pc, r8, ror #27
    1644:	00000000 	andeq	r0, r0, r0
    1648:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    164c:	ce08001e 	mcrgt	0, 0, r0, cr8, cr14, {0}
    1650:	0108001e 	tsteq	r8, lr, lsl r0
    1654:	00005500 	andeq	r5, r0, r0, lsl #10
    1658:	00000000 	andeq	r0, r0, r0
    165c:	1ebe0000 	cdpne	0, 11, cr0, cr14, cr0, {0}
    1660:	1eca0800 	cdpne	8, 12, cr0, cr10, cr0, {0}
    1664:	00010800 	andeq	r0, r1, r0, lsl #16
    1668:	001eca5d 	andseq	ip, lr, sp, asr sl
    166c:	001ece08 	andseq	ip, lr, r8, lsl #28
    1670:	91000408 	tstls	r0, r8, lsl #8
    1674:	ce9f7de8 	cdpgt	13, 9, cr7, cr15, cr8, {7}
    1678:	d408001e 	strle	r0, [r8], #-30
    167c:	0408001e 	streq	r0, [r8], #-30
    1680:	7de87d00 	stclvc	13, cr7, [r8]
    1684:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1688:	00000000 	andeq	r0, r0, r0
    168c:	001ebe00 	andseq	fp, lr, r0, lsl #28
    1690:	001ece08 	andseq	ip, lr, r8, lsl #28
    1694:	58000108 	stmdapl	r0, {r3, r8}
    1698:	08001ece 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, fp, ip}
    169c:	08001ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, ip}
    16a0:	01f30004 	mvnseq	r0, r4
    16a4:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    16b4:	00010000 	andeq	r0, r1, r0
    16b8:	00000050 	andeq	r0, r0, r0, asr r0
    16bc:	00000000 	andeq	r0, r0, r0
    16c0:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    16cc:	01f30004 	mvnseq	r0, r4
    16d0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    16e0:	00010000 	andeq	r0, r1, r0
    16e4:	00000051 	andeq	r0, r0, r1, asr r0
    16e8:	00000000 	andeq	r0, r0, r0
    16ec:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    16f8:	01f30004 	mvnseq	r0, r4
    16fc:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    170c:	00010000 	andeq	r0, r1, r0
    1710:	00000051 	andeq	r0, r0, r1, asr r0
    1714:	00000000 	andeq	r0, r0, r0
    1718:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    1724:	01f30004 	mvnseq	r0, r4
    1728:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    1738:	00040000 	andeq	r0, r4, r0
    173c:	9f7ea891 	svcls	0x007ea891
	...
    1748:	00510001 	subseq	r0, r1, r1
    174c:	00000000 	andeq	r0, r0, r0
    1750:	04000000 	streq	r0, [r0], #-0
    1754:	7ea89100 	tanvce	f1, f0
    1758:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    175c:	00000000 	andeq	r0, r0, r0
    1760:	52000100 	andpl	r0, r0, #0, 2
	...
    176c:	a8910004 	ldmge	r1, {r2}
    1770:	00009f7e 	andeq	r9, r0, lr, ror pc
    1774:	00000000 	andeq	r0, r0, r0
    1778:	00040000 	andeq	r0, r4, r0
    177c:	9f7ea87d 	svcls	0x007ea87d
	...
    1790:	00540001 	subseq	r0, r4, r1
    1794:	00000000 	andeq	r0, r0, r0
    1798:	03000000 	movweq	r0, #0
    179c:	9f707400 	svcls	0x00707400
	...
    17a8:	60740003 	rsbsvs	r0, r4, r3
    17ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    17b0:	00000000 	andeq	r0, r0, r0
    17b4:	74000300 	strvc	r0, [r0], #-768	; 0x300
    17b8:	00009f50 	andeq	r9, r0, r0, asr pc
    17bc:	00000000 	andeq	r0, r0, r0
    17c0:	00010000 	andeq	r0, r1, r0
    17c4:	00000050 	andeq	r0, r0, r0, asr r0
    17c8:	00000000 	andeq	r0, r0, r0
    17cc:	74000300 	strvc	r0, [r0], #-768	; 0x300
    17d0:	00009f50 	andeq	r9, r0, r0, asr pc
    17d4:	00000000 	andeq	r0, r0, r0
    17d8:	00010000 	andeq	r0, r1, r0
    17dc:	00000050 	andeq	r0, r0, r0, asr r0
    17e0:	00000000 	andeq	r0, r0, r0
    17e4:	74000300 	strvc	r0, [r0], #-768	; 0x300
    17e8:	00009f50 	andeq	r9, r0, r0, asr pc
    17ec:	00000000 	andeq	r0, r0, r0
    17f0:	00040000 	andeq	r0, r4, r0
    17f4:	9f7ee891 	svcls	0x007ee891
	...
    1800:	00500001 	subseq	r0, r0, r1
    1804:	00000000 	andeq	r0, r0, r0
    1808:	04000000 	streq	r0, [r0], #-0
    180c:	7ee89100 	urdvce	f1, f0
    1810:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1814:	00000000 	andeq	r0, r0, r0
    1818:	52000100 	andpl	r0, r0, #0, 2
	...
    1824:	e8910004 	ldm	r1, {r2}
    1828:	00009f7e 	andeq	r9, r0, lr, ror pc
    182c:	00000000 	andeq	r0, r0, r0
    1830:	00040000 	andeq	r0, r4, r0
    1834:	9f7ee87d 	svcls	0x007ee87d
	...
    1848:	a8910004 	ldmge	r1, {r2}
    184c:	00009f7e 	andeq	r9, r0, lr, ror pc
    1850:	00000000 	andeq	r0, r0, r0
    1854:	00010000 	andeq	r0, r1, r0
    1858:	00000052 	andeq	r0, r0, r2, asr r0
    185c:	00000000 	andeq	r0, r0, r0
    1860:	91000400 	tstls	r0, r0, lsl #8
    1864:	009f7ea8 	addseq	r7, pc, r8, lsr #29
    1868:	00000000 	andeq	r0, r0, r0
    186c:	04000000 	streq	r0, [r0], #-0
    1870:	7ea87d00 	cdpvc	13, 10, cr7, cr8, cr0, {0}
    1874:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1884:	52000100 	andpl	r0, r0, #0, 2
	...
    1890:	a8910004 	ldmge	r1, {r2}
    1894:	00009f7e 	andeq	r9, r0, lr, ror pc
    1898:	00000000 	andeq	r0, r0, r0
    189c:	00040000 	andeq	r0, r4, r0
    18a0:	9f7ea87d 	svcls	0x007ea87d
	...
    18b4:	00560001 	subseq	r0, r6, r1
    18b8:	00000000 	andeq	r0, r0, r0
    18bc:	04000000 	streq	r0, [r0], #-0
    18c0:	5001f300 	andpl	pc, r1, r0, lsl #6
    18c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    18d4:	91000400 	tstls	r0, r0, lsl #8
    18d8:	009f7ee8 	addseq	r7, pc, r8, ror #29
    18dc:	00000000 	andeq	r0, r0, r0
    18e0:	01000000 	mrseq	r0, (UNDEF: 0)
    18e4:	00005200 	andeq	r5, r0, r0, lsl #4
    18e8:	00000000 	andeq	r0, r0, r0
    18ec:	00040000 	andeq	r0, r4, r0
    18f0:	9f7ee891 	svcls	0x007ee891
	...
    18fc:	e87d0004 	ldmda	sp!, {r2}^
    1900:	00009f7e 	andeq	r9, r0, lr, ror pc
	...
    1910:	00010000 	andeq	r0, r1, r0
    1914:	00000056 	andeq	r0, r0, r6, asr r0
    1918:	00000000 	andeq	r0, r0, r0
    191c:	f3000400 	vshl.u8	d0, d0, d0
    1920:	009f5001 	addseq	r5, pc, r1
    1924:	00000000 	andeq	r0, r0, r0
    1928:	d4000000 	strle	r0, [r0], #-0
    192c:	e008001e 	and	r0, r8, lr, lsl r0
    1930:	0108001e 	tsteq	r8, lr, lsl r0
    1934:	1ee05000 	cdpne	0, 14, cr5, cr0, cr0, {0}
    1938:	20500800 	subscs	r0, r0, r0, lsl #16
    193c:	00010800 	andeq	r0, r1, r0, lsl #16
    1940:	00000056 	andeq	r0, r0, r6, asr r0
    1944:	00000000 	andeq	r0, r0, r0
    1948:	001ed400 	andseq	sp, lr, r0, lsl #8
    194c:	001ee208 	andseq	lr, lr, r8, lsl #4
    1950:	51000108 	tstpl	r0, r8, lsl #2
    1954:	08001ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, ip}
    1958:	08002050 	stmdaeq	r0, {r4, r6, sp}
    195c:	00570001 	subseq	r0, r7, r1
    1960:	00000000 	andeq	r0, r0, r0
    1964:	d4000000 	strle	r0, [r0], #-0
    1968:	ea08001e 	b	2019e8 <__Stack_Size+0x2011e8>
    196c:	0108001e 	tsteq	r8, lr, lsl r0
    1970:	1eea5200 	cdpne	2, 14, cr5, cr10, cr0, {0}
    1974:	20500800 	subscs	r0, r0, r0, lsl #16
    1978:	00010800 	andeq	r0, r1, r0, lsl #16
    197c:	00000059 	andeq	r0, r0, r9, asr r0
    1980:	00000000 	andeq	r0, r0, r0
    1984:	001ed400 	andseq	sp, lr, r0, lsl #8
    1988:	001ee808 	andseq	lr, lr, r8, lsl #16
    198c:	53000108 	movwpl	r0, #264	; 0x108
    1990:	08001ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, ip}
    1994:	08002050 	stmdaeq	r0, {r4, r6, sp}
    1998:	00580001 	subseq	r0, r8, r1
    199c:	00000000 	andeq	r0, r0, r0
    19a0:	d4000000 	strle	r0, [r0], #-0
    19a4:	ec08001e 	stc	0, cr0, [r8], {30}
    19a8:	0208001f 	andeq	r0, r8, #31
    19ac:	ec9f3100 	ldfs	f3, [pc], {0}
    19b0:	0c08001f 	stceq	0, cr0, [r8], {31}
    19b4:	05080020 	streq	r0, [r8, #-32]
    19b8:	31007500 	tstcc	r0, r0, lsl #10
    19bc:	200c9f1a 	andcs	r9, ip, sl, lsl pc
    19c0:	20400800 	subcs	r0, r0, r0, lsl #16
    19c4:	00080800 	andeq	r0, r8, r0, lsl #16
    19c8:	00740075 	rsbseq	r0, r4, r5, ror r0
    19cc:	9f1a311a 	svcls	0x001a311a
    19d0:	08002040 	stmdaeq	r0, {r6, sp}
    19d4:	08002050 	stmdaeq	r0, {r4, r6, sp}
    19d8:	9f310002 	svcls	0x00310002
	...
    19e4:	08001ee6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, fp, ip}
    19e8:	08001ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, ip}
    19ec:	e8530001 	ldmda	r3, {r0}^
    19f0:	5008001e 	andpl	r0, r8, lr, lsl r0
    19f4:	01080020 	tsteq	r8, r0, lsr #32
    19f8:	00005800 	andeq	r5, r0, r0, lsl #16
    19fc:	00000000 	andeq	r0, r0, r0
    1a00:	1ee60000 	cdpne	0, 14, cr0, cr6, cr0, {0}
    1a04:	1eea0800 	cdpne	8, 14, cr0, cr10, cr0, {0}
    1a08:	00010800 	andeq	r0, r1, r0, lsl #16
    1a0c:	001eea52 	andseq	lr, lr, r2, asr sl
    1a10:	00205008 	eoreq	r5, r0, r8
    1a14:	59000108 	stmdbpl	r0, {r3, r8}
	...
    1a20:	08001ede 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, fp, ip}
    1a24:	08001ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, ip}
    1a28:	e2510001 	subs	r0, r1, #1
    1a2c:	5008001e 	andpl	r0, r8, lr, lsl r0
    1a30:	01080020 	tsteq	r8, r0, lsr #32
    1a34:	00005700 	andeq	r5, r0, r0, lsl #14
    1a38:	00000000 	andeq	r0, r0, r0
    1a3c:	1ede0000 	cdpne	0, 13, cr0, cr14, cr0, {0}
    1a40:	1ee00800 	cdpne	8, 14, cr0, cr0, cr0, {0}
    1a44:	00010800 	andeq	r0, r1, r0, lsl #16
    1a48:	001ee050 	andseq	lr, lr, r0, asr r0
    1a4c:	00205008 	eoreq	r5, r0, r8
    1a50:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    1a5c:	08001ede 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, fp, ip}
    1a60:	08001fae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl, fp, ip}
    1a64:	80910004 	addshi	r0, r1, r4
    1a68:	1fae9f7d 	svcne	0x00ae9f7d
    1a6c:	1fb50800 	svcne	0x00b50800
    1a70:	00010800 	andeq	r0, r1, r0, lsl #16
    1a74:	001fb550 	andseq	fp, pc, r0, asr r5	; <UNPREDICTABLE>
    1a78:	001ff208 	andseq	pc, pc, r8, lsl #4
    1a7c:	91000408 	tstls	r0, r8, lsl #8
    1a80:	f29f7d80 	vqdmull.s16	<illegal reg q3.5>, d31, d0
    1a84:	f508001f 			; <UNDEFINED> instruction: 0xf508001f
    1a88:	0108001f 	tsteq	r8, pc, lsl r0
    1a8c:	1ff55200 	svcne	0x00f55200
    1a90:	20500800 	subscs	r0, r0, r0, lsl #16
    1a94:	00040800 	andeq	r0, r4, r0, lsl #16
    1a98:	9f7d8091 	svcls	0x007d8091
	...
    1aa4:	08001f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip}
    1aa8:	08001f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, ip}
    1aac:	e0910004 	adds	r0, r1, r4
    1ab0:	1f549f7e 	svcne	0x00549f7e
    1ab4:	1f570800 	svcne	0x00570800
    1ab8:	00010800 	andeq	r0, r1, r0, lsl #16
    1abc:	001f5751 	andseq	r5, pc, r1, asr r7	; <UNPREDICTABLE>
    1ac0:	001f9608 	andseq	r9, pc, r8, lsl #12
    1ac4:	91000408 	tstls	r0, r8, lsl #8
    1ac8:	969f7ee0 	ldrls	r7, [pc], r0, ror #29
    1acc:	9d08001f 	stcls	0, cr0, [r8, #-124]	; 0xffffff84
    1ad0:	0108001f 	tsteq	r8, pc, lsl r0
    1ad4:	1f9d5100 	svcne	0x009d5100
    1ad8:	1fa20800 	svcne	0x00a20800
    1adc:	00040800 	andeq	r0, r4, r0, lsl #16
    1ae0:	9f7ee091 	svcls	0x007ee091
    1ae4:	08001fa2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, fp, ip}
    1ae8:	08001fa9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, sl, fp, ip}
    1aec:	a9510001 	ldmdbge	r1, {r0}^
    1af0:	b008001f 	andlt	r0, r8, pc, lsl r0
    1af4:	0408001f 	streq	r0, [r8], #-31
    1af8:	7ee09100 	urdvcs	f1, f0
    1afc:	001fb09f 	mulseq	pc, pc, r0	; <UNPREDICTABLE>
    1b00:	001fb508 	andseq	fp, pc, r8, lsl #10
    1b04:	51000108 	tstpl	r0, r8, lsl #2
    1b08:	08001fb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, sl, fp, ip}
    1b0c:	08001fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip}
    1b10:	e0910004 	adds	r0, r1, r4
    1b14:	1fb89f7e 	svcne	0x00b89f7e
    1b18:	1fc10800 	svcne	0x00c10800
    1b1c:	00010800 	andeq	r0, r1, r0, lsl #16
    1b20:	001fc150 	andseq	ip, pc, r0, asr r1	; <UNPREDICTABLE>
    1b24:	001fc808 	andseq	ip, pc, r8, lsl #16
    1b28:	91000408 	tstls	r0, r8, lsl #8
    1b2c:	c89f7ee0 	ldmgt	pc, {r5, r6, r7, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    1b30:	cb08001f 	blgt	201bb4 <__Stack_Size+0x2013b4>
    1b34:	0108001f 	tsteq	r8, pc, lsl r0
    1b38:	1fcb5200 	svcne	0x00cb5200
    1b3c:	1fd80800 	svcne	0x00d80800
    1b40:	00040800 	andeq	r0, r4, r0, lsl #16
    1b44:	9f7ee091 	svcls	0x007ee091
    1b48:	08001fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp, ip}
    1b4c:	08001fdf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r8, r9, sl, fp, ip}
    1b50:	df510001 	svcle	0x00510001
    1b54:	e608001f 			; <UNDEFINED> instruction: 0xe608001f
    1b58:	0408001f 	streq	r0, [r8], #-31
    1b5c:	7ee09100 	urdvcs	f1, f0
    1b60:	001fe69f 	mulseq	pc, pc, r6	; <UNPREDICTABLE>
    1b64:	001feb08 	andseq	lr, pc, r8, lsl #22
    1b68:	52000108 	andpl	r0, r0, #8, 2
    1b6c:	08001feb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, r8, r9, sl, fp, ip}
    1b70:	08002008 	stmdaeq	r0, {r3, sp}
    1b74:	e0910004 	adds	r0, r1, r4
    1b78:	20089f7e 	andcs	r9, r8, lr, ror pc
    1b7c:	200b0800 	andcs	r0, fp, r0, lsl #16
    1b80:	00010800 	andeq	r0, r1, r0, lsl #16
    1b84:	00200b50 	eoreq	r0, r0, r0, asr fp
    1b88:	00201208 	eoreq	r1, r0, r8, lsl #4
    1b8c:	91000408 	tstls	r0, r8, lsl #8
    1b90:	129f7ee0 	addsne	r7, pc, #224, 28	; 0xe00
    1b94:	15080020 	strne	r0, [r8, #-32]
    1b98:	01080020 	tsteq	r8, r0, lsr #32
    1b9c:	20155200 	andscs	r5, r5, r0, lsl #4
    1ba0:	20500800 	subscs	r0, r0, r0, lsl #16
    1ba4:	00040800 	andeq	r0, r4, r0, lsl #16
    1ba8:	9f7ee091 	svcls	0x007ee091
	...
    1bb4:	08001f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip}
    1bb8:	08001fae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl, fp, ip}
    1bbc:	80910004 	addshi	r0, r1, r4
    1bc0:	1fae9f7d 	svcne	0x00ae9f7d
    1bc4:	1fb50800 	svcne	0x00b50800
    1bc8:	00010800 	andeq	r0, r1, r0, lsl #16
    1bcc:	001fb550 	andseq	fp, pc, r0, asr r5	; <UNPREDICTABLE>
    1bd0:	001ff208 	andseq	pc, pc, r8, lsl #4
    1bd4:	91000408 	tstls	r0, r8, lsl #8
    1bd8:	f29f7d80 	vqdmull.s16	<illegal reg q3.5>, d31, d0
    1bdc:	f508001f 			; <UNDEFINED> instruction: 0xf508001f
    1be0:	0108001f 	tsteq	r8, pc, lsl r0
    1be4:	1ff55200 	svcne	0x00f55200
    1be8:	20500800 	subscs	r0, r0, r0, lsl #16
    1bec:	00040800 	andeq	r0, r4, r0, lsl #16
    1bf0:	9f7d8091 	svcls	0x007d8091
	...
    1bfc:	08001f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip}
    1c00:	08001f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip}
    1c04:	1c540001 	mrrcne	0, 0, r0, r4, cr1
    1c08:	2008001f 	andcs	r0, r8, pc, lsl r0
    1c0c:	0308001f 	movweq	r0, #32799	; 0x801f
    1c10:	9f707400 	svcls	0x00707400
    1c14:	08001f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip}
    1c18:	08001f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, ip}
    1c1c:	60740003 	rsbsvs	r0, r4, r3
    1c20:	001f249f 	mulseq	pc, pc, r4	; <UNPREDICTABLE>
    1c24:	001f3408 	andseq	r3, pc, r8, lsl #8
    1c28:	74000308 	strvc	r0, [r0], #-776	; 0x308
    1c2c:	1f349f50 	svcne	0x00349f50
    1c30:	1f520800 	svcne	0x00520800
    1c34:	00040800 	andeq	r0, r4, r0, lsl #16
    1c38:	9f7de091 	svcls	0x007de091
    1c3c:	08001f52 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl, fp, ip}
    1c40:	08001f57 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, r9, sl, fp, ip}
    1c44:	57500001 	ldrbpl	r0, [r0, -r1]
    1c48:	6c08001f 	stcvs	0, cr0, [r8], {31}
    1c4c:	0408001f 	streq	r0, [r8], #-31
    1c50:	7de09100 	stfvcp	f1, [r0]
    1c54:	001f6c9f 	mulseq	pc, pc, ip	; <UNPREDICTABLE>
    1c58:	001f7308 	andseq	r7, pc, r8, lsl #6
    1c5c:	50000108 	andpl	r0, r0, r8, lsl #2
    1c60:	08001f73 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip}
    1c64:	08001f82 	stmdaeq	r0, {r1, r7, r8, r9, sl, fp, ip}
    1c68:	e0910004 	adds	r0, r1, r4
    1c6c:	1f829f7d 	svcne	0x00829f7d
    1c70:	1f850800 	svcne	0x00850800
    1c74:	00010800 	andeq	r0, r1, r0, lsl #16
    1c78:	001f8550 	andseq	r8, pc, r0, asr r5	; <UNPREDICTABLE>
    1c7c:	001f9408 	andseq	r9, pc, r8, lsl #8
    1c80:	91000408 	tstls	r0, r8, lsl #8
    1c84:	949f7de0 	ldrls	r7, [pc], #3552	; 1c8c <__Stack_Size+0x148c>
    1c88:	9d08001f 	stcls	0, cr0, [r8, #-124]	; 0xffffff84
    1c8c:	0108001f 	tsteq	r8, pc, lsl r0
    1c90:	1f9d5000 	svcne	0x009d5000
    1c94:	1f9e0800 	svcne	0x009e0800
    1c98:	00030800 	andeq	r0, r3, r0, lsl #16
    1c9c:	9e9f5074 	mrcls	0, 4, r5, cr15, cr4, {3}
    1ca0:	a008001f 	andge	r0, r8, pc, lsl r0
    1ca4:	0408001f 	streq	r0, [r8], #-31
    1ca8:	7de09100 	stfvcp	f1, [r0]
    1cac:	001fa09f 	mulseq	pc, pc, r0	; <UNPREDICTABLE>
    1cb0:	001fa908 	andseq	sl, pc, r8, lsl #18
    1cb4:	50000108 	andpl	r0, r0, r8, lsl #2
    1cb8:	08001fa9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, sl, fp, ip}
    1cbc:	08001fc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, sl, fp, ip}
    1cc0:	e0910004 	adds	r0, r1, r4
    1cc4:	1fc69f7d 	svcne	0x00c69f7d
    1cc8:	1fcb0800 	svcne	0x00cb0800
    1ccc:	00010800 	andeq	r0, r1, r0, lsl #16
    1cd0:	001fcb51 	andseq	ip, pc, r1, asr fp	; <UNPREDICTABLE>
    1cd4:	001fd208 	andseq	sp, pc, r8, lsl #4
    1cd8:	91000408 	tstls	r0, r8, lsl #8
    1cdc:	d29f7de0 	addsle	r7, pc, #224, 26	; 0x3800
    1ce0:	d508001f 	strle	r0, [r8, #-31]
    1ce4:	0108001f 	tsteq	r8, pc, lsl r0
    1ce8:	1fd55200 	svcne	0x00d55200
    1cec:	1fe80800 	svcne	0x00e80800
    1cf0:	00040800 	andeq	r0, r4, r0, lsl #16
    1cf4:	9f7de091 	svcls	0x007de091
    1cf8:	08001fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp, ip}
    1cfc:	08001feb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, r8, r9, sl, fp, ip}
    1d00:	eb500001 	bl	1401d0c <__Stack_Size+0x140150c>
    1d04:	ee08001f 	mcr	0, 0, r0, cr8, cr15, {0}
    1d08:	0408001f 	streq	r0, [r8], #-31
    1d0c:	7de09100 	stfvcp	f1, [r0]
    1d10:	001fee9f 	mulseq	pc, pc, lr	; <UNPREDICTABLE>
    1d14:	001ff508 	andseq	pc, pc, r8, lsl #10
    1d18:	50000108 	andpl	r0, r0, r8, lsl #2
    1d1c:	08001ff5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    1d20:	0800200e 	stmdaeq	r0, {r1, r2, r3, sp}
    1d24:	e0910004 	adds	r0, r1, r4
    1d28:	200e9f7d 	andcs	r9, lr, sp, ror pc
    1d2c:	20150800 	andscs	r0, r5, r0, lsl #16
    1d30:	00010800 	andeq	r0, r1, r0, lsl #16
    1d34:	00201550 	eoreq	r1, r0, r0, asr r5
    1d38:	00201c08 	eoreq	r1, r0, r8, lsl #24
    1d3c:	91000408 	tstls	r0, r8, lsl #8
    1d40:	1c9f7de0 	ldcne	13, cr7, [pc], {224}	; 0xe0
    1d44:	1f080020 	svcne	0x00080020
    1d48:	01080020 	tsteq	r8, r0, lsr #32
    1d4c:	201f5200 	andscs	r5, pc, r0, lsl #4
    1d50:	20500800 	subscs	r0, r0, r0, lsl #16
    1d54:	00040800 	andeq	r0, r4, r0, lsl #16
    1d58:	9f7de091 	svcls	0x007de091
	...
    1d64:	08001f58 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, fp, ip}
    1d68:	08001f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, ip}
    1d6c:	40080003 	andmi	r0, r8, r3
    1d70:	001f649f 	mulseq	pc, pc, r4	; <UNPREDICTABLE>
    1d74:	001f6808 	andseq	r6, pc, r8, lsl #16
    1d78:	54000108 	strpl	r0, [r0], #-264	; 0x108
    1d7c:	08001f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, ip}
    1d80:	08001f6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, fp, ip}
    1d84:	74510001 	ldrbvc	r0, [r1], #-1
    1d88:	7808001f 	stmdavc	r8, {r0, r1, r2, r3, r4}
    1d8c:	0108001f 	tsteq	r8, pc, lsl r0
    1d90:	20405400 	subcs	r5, r0, r0, lsl #8
    1d94:	20500800 	subscs	r0, r0, r0, lsl #16
    1d98:	00030800 	andeq	r0, r3, r0, lsl #16
    1d9c:	009f4008 	addseq	r4, pc, r8
    1da0:	00000000 	andeq	r0, r0, r0
    1da4:	b6000000 	strlt	r0, [r0], -r0
    1da8:	bc08001f 	stclt	0, cr0, [r8], {31}
    1dac:	0308001f 	movweq	r0, #32799	; 0x801f
    1db0:	9f207600 	svcls	0x00207600
    1db4:	08001fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip}
    1db8:	08001fc1 	stmdaeq	r0, {r0, r6, r7, r8, r9, sl, fp, ip}
    1dbc:	c1520001 	cmpgt	r2, r1
    1dc0:	4008001f 	andmi	r0, r8, pc, lsl r0
    1dc4:	03080020 	movweq	r0, #32800	; 0x8020
    1dc8:	9f207600 	svcls	0x00207600
	...
    1dd4:	08001fb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, fp, ip}
    1dd8:	0800203c 	stmdaeq	r0, {r2, r3, r4, r5, sp}
    1ddc:	3c5d0001 	mrrccc	0, 0, r0, sp, cr1
    1de0:	40080020 	andmi	r0, r8, r0, lsr #32
    1de4:	04080020 	streq	r0, [r8], #-32
    1de8:	7cc09100 	stfvcp	f1, [r0], {0}
    1dec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1df0:	00000000 	andeq	r0, r0, r0
    1df4:	001fc200 	andseq	ip, pc, r0, lsl #4
    1df8:	001fc808 	andseq	ip, pc, r8, lsl #16
    1dfc:	91000408 	tstls	r0, r8, lsl #8
    1e00:	c89f7ee0 	ldmgt	pc, {r5, r6, r7, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    1e04:	cb08001f 	blgt	201e88 <__Stack_Size+0x201688>
    1e08:	0108001f 	tsteq	r8, pc, lsl r0
    1e0c:	1fcb5200 	svcne	0x00cb5200
    1e10:	1fd80800 	svcne	0x00d80800
    1e14:	00040800 	andeq	r0, r4, r0, lsl #16
    1e18:	9f7ee091 	svcls	0x007ee091
    1e1c:	08001fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp, ip}
    1e20:	08001fdf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r8, r9, sl, fp, ip}
    1e24:	df510001 	svcle	0x00510001
    1e28:	e608001f 			; <UNDEFINED> instruction: 0xe608001f
    1e2c:	0408001f 	streq	r0, [r8], #-31
    1e30:	7ee09100 	urdvcs	f1, f0
    1e34:	001fe69f 	mulseq	pc, pc, r6	; <UNPREDICTABLE>
    1e38:	001feb08 	andseq	lr, pc, r8, lsl #22
    1e3c:	52000108 	andpl	r0, r0, #8, 2
    1e40:	08001feb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, r8, r9, sl, fp, ip}
    1e44:	08002008 	stmdaeq	r0, {r3, sp}
    1e48:	e0910004 	adds	r0, r1, r4
    1e4c:	20089f7e 	andcs	r9, r8, lr, ror pc
    1e50:	200b0800 	andcs	r0, fp, r0, lsl #16
    1e54:	00010800 	andeq	r0, r1, r0, lsl #16
    1e58:	00200b50 	eoreq	r0, r0, r0, asr fp
    1e5c:	00201208 	eoreq	r1, r0, r8, lsl #4
    1e60:	91000408 	tstls	r0, r8, lsl #8
    1e64:	129f7ee0 	addsne	r7, pc, #224, 28	; 0xe00
    1e68:	15080020 	strne	r0, [r8, #-32]
    1e6c:	01080020 	tsteq	r8, r0, lsr #32
    1e70:	20155200 	andscs	r5, r5, r0, lsl #4
    1e74:	20400800 	subcs	r0, r0, r0, lsl #16
    1e78:	00040800 	andeq	r0, r4, r0, lsl #16
    1e7c:	9f7ee091 	svcls	0x007ee091
	...
    1e88:	08001fc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sl, fp, ip}
    1e8c:	0800203c 	stmdaeq	r0, {r2, r3, r4, r5, sp}
    1e90:	3c5d0001 	mrrccc	0, 0, r0, sp, cr1
    1e94:	40080020 	andmi	r0, r8, r0, lsr #32
    1e98:	04080020 	streq	r0, [r8], #-32
    1e9c:	7cc09100 	stfvcp	f1, [r0], {0}
    1ea0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1ea4:	00000000 	andeq	r0, r0, r0
    1ea8:	001fd600 	andseq	sp, pc, r0, lsl #12
    1eac:	00204008 	eoreq	r4, r0, r8
    1eb0:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    1ebc:	08001fd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, sl, fp, ip}
    1ec0:	08001fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp, ip}
    1ec4:	e0910004 	adds	r0, r1, r4
    1ec8:	1fe89f7d 	svcne	0x00e89f7d
    1ecc:	1feb0800 	svcne	0x00eb0800
    1ed0:	00010800 	andeq	r0, r1, r0, lsl #16
    1ed4:	001feb50 	andseq	lr, pc, r0, asr fp	; <UNPREDICTABLE>
    1ed8:	001fee08 	andseq	lr, pc, r8, lsl #28
    1edc:	91000408 	tstls	r0, r8, lsl #8
    1ee0:	ee9f7de0 	cdp	13, 9, cr7, cr15, cr0, {7}
    1ee4:	f508001f 			; <UNDEFINED> instruction: 0xf508001f
    1ee8:	0108001f 	tsteq	r8, pc, lsl r0
    1eec:	1ff55000 	svcne	0x00f55000
    1ef0:	200e0800 	andcs	r0, lr, r0, lsl #16
    1ef4:	00040800 	andeq	r0, r4, r0, lsl #16
    1ef8:	9f7de091 	svcls	0x007de091
    1efc:	0800200e 	stmdaeq	r0, {r1, r2, r3, sp}
    1f00:	08002015 	stmdaeq	r0, {r0, r2, r4, sp}
    1f04:	15500001 	ldrbne	r0, [r0, #-1]
    1f08:	1c080020 	stcne	0, cr0, [r8], {32}
    1f0c:	04080020 	streq	r0, [r8], #-32
    1f10:	7de09100 	stfvcp	f1, [r0]
    1f14:	00201c9f 	mlaeq	r0, pc, ip, r1	; <UNPREDICTABLE>
    1f18:	00201f08 	eoreq	r1, r0, r8, lsl #30
    1f1c:	52000108 	andpl	r0, r0, #8, 2
    1f20:	0800201f 	stmdaeq	r0, {r0, r1, r2, r3, r4, sp}
    1f24:	08002040 	stmdaeq	r0, {r6, sp}
    1f28:	e0910004 	adds	r0, r1, r4
    1f2c:	00009f7d 	andeq	r9, r0, sp, ror pc
    1f30:	00000000 	andeq	r0, r0, r0
    1f34:	1fe40000 	svcne	0x00e40000
    1f38:	1fe80800 	svcne	0x00e80800
    1f3c:	00010800 	andeq	r0, r1, r0, lsl #16
    1f40:	001fe850 	andseq	lr, pc, r0, asr r8	; <UNPREDICTABLE>
    1f44:	00204008 	eoreq	r4, r0, r8
    1f48:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    1f54:	08001ff6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    1f58:	08002040 	stmdaeq	r0, {r6, sp}
    1f5c:	00560001 	subseq	r0, r6, r1
    1f60:	00000000 	andeq	r0, r0, r0
    1f64:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    1f68:	0808001f 	stmdaeq	r8, {r0, r1, r2, r3, r4}
    1f6c:	04080020 	streq	r0, [r8], #-32
    1f70:	7ee09100 	urdvcs	f1, f0
    1f74:	0020089f 	mlaeq	r0, pc, r8, r0	; <UNPREDICTABLE>
    1f78:	00200b08 	eoreq	r0, r0, r8, lsl #22
    1f7c:	50000108 	andpl	r0, r0, r8, lsl #2
    1f80:	0800200b 	stmdaeq	r0, {r0, r1, r3, sp}
    1f84:	08002012 	stmdaeq	r0, {r1, r4, sp}
    1f88:	e0910004 	adds	r0, r1, r4
    1f8c:	20129f7e 	andscs	r9, r2, lr, ror pc
    1f90:	20150800 	andscs	r0, r5, r0, lsl #16
    1f94:	00010800 	andeq	r0, r1, r0, lsl #16
    1f98:	00201552 	eoreq	r1, r0, r2, asr r5
    1f9c:	00204008 	eoreq	r4, r0, r8
    1fa0:	91000408 	tstls	r0, r8, lsl #8
    1fa4:	009f7ee0 	addseq	r7, pc, r0, ror #29
    1fa8:	00000000 	andeq	r0, r0, r0
    1fac:	04000000 	streq	r0, [r0], #-0
    1fb0:	08080020 	stmdaeq	r8, {r5}
    1fb4:	01080020 	tsteq	r8, r0, lsr #32
    1fb8:	20085000 	andcs	r5, r8, r0
    1fbc:	20400800 	subcs	r0, r0, r0, lsl #16
    1fc0:	00010800 	andeq	r0, r1, r0, lsl #16
    1fc4:	00000054 	andeq	r0, r0, r4, asr r0
    1fc8:	00000000 	andeq	r0, r0, r0
    1fcc:	00201600 	eoreq	r1, r0, r0, lsl #12
    1fd0:	00201c08 	eoreq	r1, r0, r8, lsl #24
    1fd4:	91000408 	tstls	r0, r8, lsl #8
    1fd8:	1c9f7de0 	ldcne	13, cr7, [pc], {224}	; 0xe0
    1fdc:	1f080020 	svcne	0x00080020
    1fe0:	01080020 	tsteq	r8, r0, lsr #32
    1fe4:	201f5200 	andscs	r5, pc, r0, lsl #4
    1fe8:	20400800 	subcs	r0, r0, r0, lsl #16
    1fec:	00040800 	andeq	r0, r4, r0, lsl #16
    1ff0:	9f7de091 	svcls	0x007de091
	...
    1ffc:	08002016 	stmdaeq	r0, {r1, r2, r4, sp}
    2000:	08002026 	stmdaeq	r0, {r1, r2, r5, sp}
    2004:	e0910004 	adds	r0, r1, r4
    2008:	20269f7c 	eorcs	r9, r6, ip, ror pc
    200c:	20290800 	eorcs	r0, r9, r0, lsl #16
    2010:	00010800 	andeq	r0, r1, r0, lsl #16
    2014:	00202950 	eoreq	r2, r0, r0, asr r9
    2018:	00202e08 	eoreq	r2, r0, r8, lsl #28
    201c:	91000408 	tstls	r0, r8, lsl #8
    2020:	2e9f7ce0 	cdpcs	12, 9, cr7, cr15, cr0, {7}
    2024:	31080020 	tstcc	r8, r0, lsr #32
    2028:	01080020 	tsteq	r8, r0, lsr #32
    202c:	20315100 	eorscs	r5, r1, r0, lsl #2
    2030:	20400800 	subcs	r0, r0, r0, lsl #16
    2034:	00040800 	andeq	r0, r4, r0, lsl #16
    2038:	9f7ce091 	svcls	0x007ce091
	...
    2044:	08002050 	stmdaeq	r0, {r4, r6, sp}
    2048:	08002064 	stmdaeq	r0, {r2, r5, r6, sp}
    204c:	64500001 	ldrbvs	r0, [r0], #-1
    2050:	6d080020 	stcvs	0, cr0, [r8, #-128]	; 0xffffff80
    2054:	03080020 	movweq	r0, #32800	; 0x8020
    2058:	9f7c7000 	svcls	0x007c7000
    205c:	0800206d 	stmdaeq	r0, {r0, r2, r3, r5, r6, sp}
    2060:	0800206e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sp}
    2064:	01f30004 	mvnseq	r0, r4
    2068:	00009f50 	andeq	r9, r0, r0, asr pc
    206c:	00000000 	andeq	r0, r0, r0
    2070:	20500000 	subscs	r0, r0, r0
    2074:	20560800 	subscs	r0, r6, r0, lsl #16
    2078:	00010800 	andeq	r0, r1, r0, lsl #16
    207c:	00205651 	eoreq	r5, r0, r1, asr r6
    2080:	00205c08 	eoreq	r5, r0, r8, lsl #24
    2084:	52000108 	andpl	r0, r0, #8, 2
    2088:	0800205c 	stmdaeq	r0, {r2, r3, r4, r6, sp}
    208c:	08002060 	stmdaeq	r0, {r5, r6, sp}
    2090:	00720005 	rsbseq	r0, r2, r5
    2094:	609f2538 	addsvs	r2, pc, r8, lsr r5	; <UNPREDICTABLE>
    2098:	66080020 	strvs	r0, [r8], -r0, lsr #32
    209c:	07080020 	streq	r0, [r8, -r0, lsr #32]
    20a0:	38007200 	stmdacc	r0, {r9, ip, sp, lr}
    20a4:	9f253825 	svcls	0x00253825
    20a8:	08002066 	stmdaeq	r0, {r1, r2, r5, r6, sp}
    20ac:	0800206e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sp}
    20b0:	01f3000a 	mvnseq	r0, sl
    20b4:	38254051 	stmdacc	r5!, {r0, r4, r6, lr}
    20b8:	9f253825 	svcls	0x00253825
	...
    20c4:	08002050 	stmdaeq	r0, {r4, r6, sp}
    20c8:	08002056 	stmdaeq	r0, {r1, r2, r4, r6, sp}
    20cc:	9f300002 	svcls	0x00300002
    20d0:	08002056 	stmdaeq	r0, {r1, r2, r4, r6, sp}
    20d4:	0800205c 	stmdaeq	r0, {r2, r3, r4, r6, sp}
    20d8:	9f320002 	svcls	0x00320002
    20dc:	0800205c 	stmdaeq	r0, {r2, r3, r4, r6, sp}
    20e0:	08002060 	stmdaeq	r0, {r5, r6, sp}
    20e4:	9f330002 	svcls	0x00330002
    20e8:	08002060 	stmdaeq	r0, {r5, r6, sp}
    20ec:	0800206e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sp}
    20f0:	9f340002 	svcls	0x00340002
	...
    20fc:	08002088 	stmdaeq	r0, {r3, r7, sp}
    2100:	080020b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, sp}
    2104:	b8520001 	ldmdalt	r2, {r0}^
    2108:	c2080020 	andgt	r0, r8, #32
    210c:	01080020 	tsteq	r8, r0, lsr #32
    2110:	00005200 	andeq	r5, r0, r0, lsl #4
    2114:	00000000 	andeq	r0, r0, r0
    2118:	20880000 	addcs	r0, r8, r0
    211c:	20900800 	addscs	r0, r0, r0, lsl #16
    2120:	00010800 	andeq	r0, r1, r0, lsl #16
    2124:	00209053 	eoreq	r9, r0, r3, asr r0
    2128:	00209608 	eoreq	r9, r0, r8, lsl #12
    212c:	73000308 	movwvc	r0, #776	; 0x308
    2130:	20969f7f 	addscs	r9, r6, pc, ror pc
    2134:	209a0800 	addscs	r0, sl, r0, lsl #16
    2138:	00010800 	andeq	r0, r1, r0, lsl #16
    213c:	00209c53 	eoreq	r9, r0, r3, asr ip
    2140:	0020a608 	eoreq	sl, r0, r8, lsl #12
    2144:	53000108 	movwpl	r0, #264	; 0x108
    2148:	080020a6 	stmdaeq	r0, {r1, r2, r5, r7, sp}
    214c:	080020ac 	stmdaeq	r0, {r2, r3, r5, r7, sp}
    2150:	7f730003 	svcvc	0x00730003
    2154:	0020ac9f 	mlaeq	r0, pc, ip, sl	; <UNPREDICTABLE>
    2158:	0020b208 	eoreq	fp, r0, r8, lsl #4
    215c:	53000108 	movwpl	r0, #264	; 0x108
	...
    2168:	080020c0 	stmdaeq	r0, {r6, r7, sp}
    216c:	080020c2 	stmdaeq	r0, {r1, r6, r7, sp}
    2170:	00720005 	rsbseq	r0, r2, r5
    2174:	009f253f 	addseq	r2, pc, pc, lsr r5	; <UNPREDICTABLE>
    2178:	00000000 	andeq	r0, r0, r0
    217c:	c0000000 	andgt	r0, r0, r0
    2180:	d8080020 	stmdale	r8, {r5}
    2184:	01080020 	tsteq	r8, r0, lsr #32
    2188:	20d85d00 	sbcscs	r5, r8, r0, lsl #26
    218c:	20de0800 	sbcscs	r0, lr, r0, lsl #16
    2190:	00030800 	andeq	r0, r3, r0, lsl #16
    2194:	009f5891 	umullseq	r5, pc, r1, r8	; <UNPREDICTABLE>
    2198:	00000000 	andeq	r0, r0, r0
    219c:	c2000000 	andgt	r0, r0, #0
    21a0:	dc080020 	stcle	0, cr0, [r8], {32}
    21a4:	01080020 	tsteq	r8, r0, lsr #32
    21a8:	00005400 	andeq	r5, r0, r0, lsl #8
    21ac:	00000000 	andeq	r0, r0, r0
    21b0:	20e00000 	rsccs	r0, r0, r0
    21b4:	212a0800 	teqcs	sl, r0, lsl #16
    21b8:	00010800 	andeq	r0, r1, r0, lsl #16
    21bc:	00212a50 	eoreq	r2, r1, r0, asr sl
    21c0:	00216408 	eoreq	r6, r1, r8, lsl #8
    21c4:	f3000408 	vshl.u8	d0, d8, d0
    21c8:	649f5001 	ldrvs	r5, [pc], #1	; 21d0 <__Stack_Size+0x19d0>
    21cc:	7a080021 	bvc	202258 <__Stack_Size+0x201a58>
    21d0:	01080021 	tsteq	r8, r1, lsr #32
    21d4:	00005000 	andeq	r5, r0, r0
    21d8:	00000000 	andeq	r0, r0, r0
    21dc:	20e00000 	rsccs	r0, r0, r0
    21e0:	212c0800 	teqcs	ip, r0, lsl #16
    21e4:	00010800 	andeq	r0, r1, r0, lsl #16
    21e8:	00212c51 	eoreq	r2, r1, r1, asr ip
    21ec:	00216408 	eoreq	r6, r1, r8, lsl #8
    21f0:	f3000408 	vshl.u8	d0, d8, d0
    21f4:	649f5101 	ldrvs	r5, [pc], #257	; 21fc <__Stack_Size+0x19fc>
    21f8:	7a080021 	bvc	202284 <__Stack_Size+0x201a84>
    21fc:	01080021 	tsteq	r8, r1, lsr #32
    2200:	00005100 	andeq	r5, r0, r0, lsl #2
    2204:	00000000 	andeq	r0, r0, r0
    2208:	20e00000 	rsccs	r0, r0, r0
    220c:	20ea0800 	rsccs	r0, sl, r0, lsl #16
    2210:	00020800 	andeq	r0, r2, r0, lsl #16
    2214:	21509f30 	cmpcs	r0, r0, lsr pc
    2218:	21540800 	cmpcs	r4, r0, lsl #16
    221c:	00010800 	andeq	r0, r1, r0, lsl #16
    2220:	00215452 	eoreq	r5, r1, r2, asr r4
    2224:	00215808 	eoreq	r5, r1, r8, lsl #16
    2228:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    222c:	72253100 	eorvc	r3, r5, #0, 2
    2230:	649f2100 	ldrvs	r2, [pc], #256	; 2238 <__Stack_Size+0x1a38>
    2234:	68080021 	stmdavs	r8, {r0, r5}
    2238:	02080021 	andeq	r0, r8, #33	; 0x21
    223c:	689f3000 	ldmvs	pc, {ip, sp}	; <UNPREDICTABLE>
    2240:	7a080021 	bvc	2022cc <__Stack_Size+0x201acc>
    2244:	01080021 	tsteq	r8, r1, lsr #32
    2248:	00005200 	andeq	r5, r0, r0, lsl #4
    224c:	00000000 	andeq	r0, r0, r0
    2250:	20e00000 	rsccs	r0, r0, r0
    2254:	20ea0800 	rsccs	r0, sl, r0, lsl #16
    2258:	00020800 	andeq	r0, r2, r0, lsl #16
    225c:	21649f30 	cmncs	r4, r0, lsr pc
    2260:	21680800 	cmncs	r8, r0, lsl #16
    2264:	00020800 	andeq	r0, r2, r0, lsl #16
    2268:	21689f30 	cmncs	r8, r0, lsr pc
    226c:	216e0800 	cmncs	lr, r0, lsl #16
    2270:	00010800 	andeq	r0, r1, r0, lsl #16
    2274:	00216e53 	eoreq	r6, r1, r3, asr lr
    2278:	00217608 	eoreq	r7, r1, r8, lsl #12
    227c:	73000308 	movwvc	r0, #776	; 0x308
    2280:	21769f7f 	cmncs	r6, pc, ror pc
    2284:	217a0800 	cmncs	sl, r0, lsl #16
    2288:	00010800 	andeq	r0, r1, r0, lsl #16
    228c:	00000053 	andeq	r0, r0, r3, asr r0
    2290:	00000000 	andeq	r0, r0, r0
    2294:	00217c00 	eoreq	r7, r1, r0, lsl #24
    2298:	00221808 	eoreq	r1, r2, r8, lsl #16
    229c:	51000108 	tstpl	r0, r8, lsl #2
    22a0:	08002218 	stmdaeq	r0, {r3, r4, r9, sp}
    22a4:	08002226 	stmdaeq	r0, {r1, r2, r5, r9, sp}
    22a8:	01f30004 	mvnseq	r0, r4
    22ac:	22269f51 	eorcs	r9, r6, #324	; 0x144
    22b0:	223e0800 	eorscs	r0, lr, #0, 16
    22b4:	00010800 	andeq	r0, r1, r0, lsl #16
    22b8:	00000051 	andeq	r0, r0, r1, asr r0
    22bc:	00000000 	andeq	r0, r0, r0
    22c0:	00217c00 	eoreq	r7, r1, r0, lsl #24
    22c4:	00221a08 	eoreq	r1, r2, r8, lsl #20
    22c8:	52000108 	andpl	r0, r0, #8, 2
    22cc:	0800221a 	stmdaeq	r0, {r1, r3, r4, r9, sp}
    22d0:	08002226 	stmdaeq	r0, {r1, r2, r5, r9, sp}
    22d4:	01f30004 	mvnseq	r0, r4
    22d8:	22269f52 	eorcs	r9, r6, #328	; 0x148
    22dc:	223e0800 	eorscs	r0, lr, #0, 16
    22e0:	00010800 	andeq	r0, r1, r0, lsl #16
    22e4:	00000052 	andeq	r0, r0, r2, asr r0
    22e8:	00000000 	andeq	r0, r0, r0
    22ec:	00217c00 	eoreq	r7, r1, r0, lsl #24
    22f0:	0021a008 	eoreq	sl, r1, r8
    22f4:	53000108 	movwpl	r0, #264	; 0x108
    22f8:	080021a0 	stmdaeq	r0, {r5, r7, r8, sp}
    22fc:	0800223e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sp}
    2300:	01f30004 	mvnseq	r0, r4
    2304:	00009f53 	andeq	r9, r0, r3, asr pc
    2308:	00000000 	andeq	r0, r0, r0
    230c:	21a40000 			; <UNDEFINED> instruction: 0x21a40000
    2310:	21aa0800 			; <UNDEFINED> instruction: 0x21aa0800
    2314:	00010800 	andeq	r0, r1, r0, lsl #16
    2318:	0021aa53 	eoreq	sl, r1, r3, asr sl
    231c:	00221c08 	eoreq	r1, r2, r8, lsl #24
    2320:	56000108 	strpl	r0, [r0], -r8, lsl #2
    2324:	08002226 	stmdaeq	r0, {r1, r2, r5, r9, sp}
    2328:	0800223c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sp}
    232c:	00560001 	subseq	r0, r6, r1
    2330:	00000000 	andeq	r0, r0, r0
    2334:	a4000000 	strge	r0, [r0], #-0
    2338:	c6080021 	strgt	r0, [r8], -r1, lsr #32
    233c:	02080021 	andeq	r0, r8, #33	; 0x21
    2340:	269f3000 	ldrcs	r3, [pc], r0
    2344:	28080022 	stmdacs	r8, {r1, r5}
    2348:	02080022 	andeq	r0, r8, #34	; 0x22
    234c:	289f3000 	ldmcs	pc, {ip, sp}	; <UNPREDICTABLE>
    2350:	3e080022 	cdpcc	0, 0, cr0, cr8, cr2, {1}
    2354:	01080022 	tsteq	r8, r2, lsr #32
    2358:	00005300 	andeq	r5, r0, r0, lsl #6
    235c:	00000000 	andeq	r0, r0, r0
    2360:	22400000 	subcs	r0, r0, #0
    2364:	22700800 	rsbscs	r0, r0, #0, 16
    2368:	00010800 	andeq	r0, r1, r0, lsl #16
    236c:	00227051 	eoreq	r7, r2, r1, asr r0
    2370:	00228608 	eoreq	r8, r2, r8, lsl #12
    2374:	f3000408 	vshl.u8	d0, d8, d0
    2378:	009f5101 	addseq	r5, pc, r1, lsl #2
    237c:	00000000 	andeq	r0, r0, r0
    2380:	40000000 	andmi	r0, r0, r0
    2384:	62080022 	andvs	r0, r8, #34	; 0x22
    2388:	01080022 	tsteq	r8, r2, lsr #32
    238c:	22625200 	rsbcs	r5, r2, #0, 4
    2390:	22860800 	addcs	r0, r6, #0, 16
    2394:	00040800 	andeq	r0, r4, r0, lsl #16
    2398:	9f5201f3 	svcls	0x005201f3
	...
    23a4:	08002240 	stmdaeq	r0, {r6, r9, sp}
    23a8:	08002246 	stmdaeq	r0, {r1, r2, r6, r9, sp}
    23ac:	9f300002 	svcls	0x00300002
    23b0:	08002246 	stmdaeq	r0, {r1, r2, r6, r9, sp}
    23b4:	08002250 	stmdaeq	r0, {r4, r6, r9, sp}
    23b8:	00740005 	rsbseq	r0, r4, r5
    23bc:	509f2538 	addspl	r2, pc, r8, lsr r5	; <UNPREDICTABLE>
    23c0:	5c080022 	stcpl	0, cr0, [r8], {34}	; 0x22
    23c4:	01080022 	tsteq	r8, r2, lsr #32
    23c8:	226e5400 	rsbcs	r5, lr, #0, 8
    23cc:	22740800 	rsbscs	r0, r4, #0, 16
    23d0:	00010800 	andeq	r0, r1, r0, lsl #16
    23d4:	00227652 	eoreq	r7, r2, r2, asr r6
    23d8:	00228608 	eoreq	r8, r2, r8, lsl #12
    23dc:	52000108 	andpl	r0, r0, #8, 2
	...
    23e8:	08002240 	stmdaeq	r0, {r6, r9, sp}
    23ec:	08002246 	stmdaeq	r0, {r1, r2, r6, r9, sp}
    23f0:	9f300002 	svcls	0x00300002
    23f4:	08002246 	stmdaeq	r0, {r1, r2, r6, r9, sp}
    23f8:	0800225e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sp}
    23fc:	6e530001 	cdpvs	0, 5, cr0, cr3, cr1, {0}
    2400:	70080022 	andvc	r0, r8, r2, lsr #32
    2404:	02080022 	andeq	r0, r8, #34	; 0x22
    2408:	709f3000 	addsvc	r3, pc, r0
    240c:	7a080022 	bvc	20249c <__Stack_Size+0x201c9c>
    2410:	01080022 	tsteq	r8, r2, lsr #32
    2414:	227a5300 	rsbscs	r5, sl, #0, 6
    2418:	22800800 	addcs	r0, r0, #0, 16
    241c:	00030800 	andeq	r0, r3, r0, lsl #16
    2420:	809f7f73 	addshi	r7, pc, r3, ror pc	; <UNPREDICTABLE>
    2424:	86080022 	strhi	r0, [r8], -r2, lsr #32
    2428:	01080022 	tsteq	r8, r2, lsr #32
    242c:	00005300 	andeq	r5, r0, r0, lsl #6
    2430:	00000000 	andeq	r0, r0, r0
    2434:	22880000 	addcs	r0, r8, #0
    2438:	22a80800 	adccs	r0, r8, #0, 16
    243c:	00010800 	andeq	r0, r1, r0, lsl #16
    2440:	0022a851 	eoreq	sl, r2, r1, asr r8
    2444:	0022d408 	eoreq	sp, r2, r8, lsl #8
    2448:	f3000408 	vshl.u8	d0, d8, d0
    244c:	009f5101 	addseq	r5, pc, r1, lsl #2
    2450:	00000000 	andeq	r0, r0, r0
    2454:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    2458:	aa080022 	bge	2024e8 <__Stack_Size+0x201ce8>
    245c:	01080022 	tsteq	r8, r2, lsr #32
    2460:	22aa5200 	adccs	r5, sl, #0, 4
    2464:	22d40800 	sbcscs	r0, r4, #0, 16
    2468:	00040800 	andeq	r0, r4, r0, lsl #16
    246c:	9f5201f3 	svcls	0x005201f3
	...
    2478:	08002288 	stmdaeq	r0, {r3, r7, r9, sp}
    247c:	0800228e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sp}
    2480:	da080003 	ble	202494 <__Stack_Size+0x201c94>
    2484:	00228e9f 	mlaeq	r2, pc, lr, r8	; <UNPREDICTABLE>
    2488:	0022ba08 	eoreq	fp, r2, r8, lsl #20
    248c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    2490:	080022c0 	stmdaeq	r0, {r6, r7, r9, sp}
    2494:	080022d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sp}
    2498:	00520001 	subseq	r0, r2, r1
    249c:	00000000 	andeq	r0, r0, r0
    24a0:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    24a4:	8e080022 	cdphi	0, 0, cr0, cr8, cr2, {1}
    24a8:	02080022 	andeq	r0, r8, #34	; 0x22
    24ac:	8e9f3000 	cdphi	0, 9, cr3, cr15, cr0, {0}
    24b0:	9e080022 	cdpls	0, 0, cr0, cr8, cr2, {1}
    24b4:	01080022 	tsteq	r8, r2, lsr #32
    24b8:	229e5300 	addscs	r5, lr, #0, 6
    24bc:	22a40800 	adccs	r0, r4, #0, 16
    24c0:	00030800 	andeq	r0, r3, r0, lsl #16
    24c4:	a49f7f73 	ldrge	r7, [pc], #3955	; 24cc <__Stack_Size+0x1ccc>
    24c8:	ac080022 	stcge	0, cr0, [r8], {34}	; 0x22
    24cc:	01080022 	tsteq	r8, r2, lsr #32
    24d0:	22c05300 	sbccs	r5, r0, #0, 6
    24d4:	22c80800 	sbccs	r0, r8, #0, 16
    24d8:	00010800 	andeq	r0, r1, r0, lsl #16
    24dc:	0022c853 	eoreq	ip, r2, r3, asr r8
    24e0:	0022ce08 	eoreq	ip, r2, r8, lsl #28
    24e4:	73000308 	movwvc	r0, #776	; 0x308
    24e8:	22ce9f7f 	sbccs	r9, lr, #508	; 0x1fc
    24ec:	22d40800 	sbcscs	r0, r4, #0, 16
    24f0:	00010800 	andeq	r0, r1, r0, lsl #16
    24f4:	00000053 	andeq	r0, r0, r3, asr r0
    24f8:	00000000 	andeq	r0, r0, r0
    24fc:	0022d400 	eoreq	sp, r2, r0, lsl #8
    2500:	0022f008 	eoreq	pc, r2, r8
    2504:	51000108 	tstpl	r0, r8, lsl #2
    2508:	080022f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sp}
    250c:	0800231a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sp}
    2510:	01f30004 	mvnseq	r0, r4
    2514:	00009f51 	andeq	r9, r0, r1, asr pc
    2518:	00000000 	andeq	r0, r0, r0
    251c:	22d40000 	sbcscs	r0, r4, #0
    2520:	22da0800 	sbcscs	r0, sl, #0, 16
    2524:	00030800 	andeq	r0, r3, r0, lsl #16
    2528:	da9fda08 	ble	fe7f8d50 <BootRAM+0xd7694f1>
    252c:	fe080022 	cdp2	0, 0, cr0, cr8, cr2, {1}
    2530:	01080022 	tsteq	r8, r2, lsr #32
    2534:	23045200 	movwcs	r5, #16896	; 0x4200
    2538:	231a0800 	tstcs	sl, #0, 16
    253c:	00010800 	andeq	r0, r1, r0, lsl #16
    2540:	00000052 	andeq	r0, r0, r2, asr r0
    2544:	00000000 	andeq	r0, r0, r0
    2548:	0022d400 	eoreq	sp, r2, r0, lsl #8
    254c:	0022da08 	eoreq	sp, r2, r8, lsl #20
    2550:	30000208 	andcc	r0, r0, r8, lsl #4
    2554:	0022da9f 	mlaeq	r2, pc, sl, sp	; <UNPREDICTABLE>
    2558:	0022e608 	eoreq	lr, r2, r8, lsl #12
    255c:	53000108 	movwpl	r0, #264	; 0x108
    2560:	080022e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sp}
    2564:	080022ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sp}
    2568:	7f730003 	svcvc	0x00730003
    256c:	0022ec9f 	mlaeq	r2, pc, ip, lr	; <UNPREDICTABLE>
    2570:	0022f208 	eoreq	pc, r2, r8, lsl #4
    2574:	53000108 	movwpl	r0, #264	; 0x108
    2578:	08002304 	stmdaeq	r0, {r2, r8, r9, sp}
    257c:	0800230c 	stmdaeq	r0, {r2, r3, r8, r9, sp}
    2580:	0c530001 	mrrceq	0, 0, r0, r3, cr1
    2584:	12080023 	andne	r0, r8, #35	; 0x23
    2588:	03080023 	movweq	r0, #32803	; 0x8023
    258c:	9f7f7300 	svcls	0x007f7300
    2590:	08002312 	stmdaeq	r0, {r1, r4, r8, r9, sp}
    2594:	0800231a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sp}
    2598:	00530001 	subseq	r0, r3, r1
    259c:	00000000 	andeq	r0, r0, r0
    25a0:	1c000000 	stcne	0, cr0, [r0], {-0}
    25a4:	7c080023 	stcvc	0, cr0, [r8], {35}	; 0x23
    25a8:	01080023 	tsteq	r8, r3, lsr #32
    25ac:	237c5100 	cmncs	ip, #0, 2
    25b0:	23a40800 			; <UNDEFINED> instruction: 0x23a40800
    25b4:	00040800 	andeq	r0, r4, r0, lsl #16
    25b8:	9f5101f3 	svcls	0x005101f3
	...
    25c4:	0800231c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sp}
    25c8:	08002382 	stmdaeq	r0, {r1, r7, r8, r9, sp}
    25cc:	82520001 	subshi	r0, r2, #1
    25d0:	a4080023 	strge	r0, [r8], #-35	; 0x23
    25d4:	04080023 	streq	r0, [r8], #-35	; 0x23
    25d8:	5201f300 	andpl	pc, r1, #0, 6
    25dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    25e0:	00000000 	andeq	r0, r0, r0
    25e4:	00231c00 	eoreq	r1, r3, r0, lsl #24
    25e8:	00232a08 	eoreq	r2, r3, r8, lsl #20
    25ec:	30000208 	andcc	r0, r0, r8, lsl #4
    25f0:	00232a9f 	mlaeq	r3, pc, sl, r2	; <UNPREDICTABLE>
    25f4:	00237e08 	eoreq	r7, r3, r8, lsl #28
    25f8:	53000108 	movwpl	r0, #264	; 0x108
    25fc:	0800238a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sp}
    2600:	080023a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sp}
    2604:	00520001 	subseq	r0, r2, r1
    2608:	00000000 	andeq	r0, r0, r0
    260c:	1c000000 	stcne	0, cr0, [r0], {-0}
    2610:	2a080023 	bcs	2026a4 <__Stack_Size+0x201ea4>
    2614:	02080023 	andeq	r0, r8, #35	; 0x23
    2618:	2a9f3000 	bcs	fe7ce620 <BootRAM+0xd73edc1>
    261c:	8a080023 	bhi	2026b0 <__Stack_Size+0x201eb0>
    2620:	01080023 	tsteq	r8, r3, lsr #32
    2624:	238a5800 	orrcs	r5, sl, #0, 16
    2628:	238e0800 	orrcs	r0, lr, #0, 16
    262c:	00020800 	andeq	r0, r2, r0, lsl #16
    2630:	238e9f30 	orrcs	r9, lr, #48, 30	; 0xc0
    2634:	23960800 	orrscs	r0, r6, #0, 16
    2638:	00010800 	andeq	r0, r1, r0, lsl #16
    263c:	00239653 	eoreq	r9, r3, r3, asr r6
    2640:	00239c08 	eoreq	r9, r3, r8, lsl #24
    2644:	73000308 	movwvc	r0, #776	; 0x308
    2648:	239c9f7f 	orrscs	r9, ip, #508	; 0x1fc
    264c:	23a40800 			; <UNDEFINED> instruction: 0x23a40800
    2650:	00010800 	andeq	r0, r1, r0, lsl #16
    2654:	00000053 	andeq	r0, r0, r3, asr r0
    2658:	00000000 	andeq	r0, r0, r0
    265c:	00232c00 	eoreq	r2, r3, r0, lsl #24
    2660:	00233208 	eoreq	r3, r3, r8, lsl #4
    2664:	30000208 	andcc	r0, r0, r8, lsl #4
    2668:	0023329f 	mlaeq	r3, pc, r2, r3	; <UNPREDICTABLE>
    266c:	00233a08 	eoreq	r3, r3, r8, lsl #20
    2670:	54000108 	strpl	r0, [r0], #-264	; 0x108
    2674:	0800233a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sp}
    2678:	08002340 	stmdaeq	r0, {r6, r8, r9, sp}
    267c:	7f740003 	svcvc	0x00740003
    2680:	0023409f 	mlaeq	r3, pc, r0, r4	; <UNPREDICTABLE>
    2684:	00236408 	eoreq	r6, r3, r8, lsl #8
    2688:	54000108 	strpl	r0, [r0], #-264	; 0x108
    268c:	08002364 	stmdaeq	r0, {r2, r5, r6, r8, r9, sp}
    2690:	0800236a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sp}
    2694:	7f740003 	svcvc	0x00740003
    2698:	00236a9f 	mlaeq	r3, pc, sl, r6	; <UNPREDICTABLE>
    269c:	0023a208 	eoreq	sl, r3, r8, lsl #4
    26a0:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    26b4:	00500001 	subseq	r0, r0, r1
    26b8:	00000000 	andeq	r0, r0, r0
    26bc:	01000000 	mrseq	r0, (UNDEF: 0)
    26c0:	00005800 	andeq	r5, r0, r0, lsl #16
    26c4:	00000000 	andeq	r0, r0, r0
    26c8:	00040000 	andeq	r0, r4, r0
    26cc:	9f5001f3 	svcls	0x005001f3
	...
    26e0:	00510001 	subseq	r0, r1, r1
    26e4:	00000000 	andeq	r0, r0, r0
    26e8:	04000000 	streq	r0, [r0], #-0
    26ec:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    26f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    2700:	52000100 	andpl	r0, r0, #0, 2
	...
    270c:	01f30004 	mvnseq	r0, r4
    2710:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    2720:	00010000 	andeq	r0, r1, r0
    2724:	00000052 	andeq	r0, r0, r2, asr r0
    2728:	00000000 	andeq	r0, r0, r0
    272c:	f3000400 	vshl.u8	d0, d0, d0
    2730:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    2740:	01000000 	mrseq	r0, (UNDEF: 0)
    2744:	00005100 	andeq	r5, r0, r0, lsl #2
    2748:	00000000 	andeq	r0, r0, r0
    274c:	00040000 	andeq	r0, r4, r0
    2750:	9f5101f3 	svcls	0x005101f3
	...
    2764:	005d0001 	subseq	r0, sp, r1
    2768:	00000000 	andeq	r0, r0, r0
    276c:	03000000 	movweq	r0, #0
    2770:	9f607400 	svcls	0x00607400
	...
    277c:	487d0003 	ldmdami	sp!, {r0, r1}^
    2780:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    2790:	30000200 	andcc	r0, r0, r0, lsl #4
    2794:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2798:	00000000 	andeq	r0, r0, r0
    279c:	53000100 	movwpl	r0, #256	; 0x100
	...
    27a8:	00520001 	subseq	r0, r2, r1
	...
    27b8:	02000000 	andeq	r0, r0, #0
    27bc:	009f3000 	addseq	r3, pc, r0
    27c0:	00000000 	andeq	r0, r0, r0
    27c4:	01000000 	mrseq	r0, (UNDEF: 0)
    27c8:	00005900 	andeq	r5, r0, r0, lsl #18
    27cc:	00000000 	andeq	r0, r0, r0
    27d0:	00020000 	andeq	r0, r2, r0
    27d4:	00009f30 	andeq	r9, r0, r0, lsr pc
    27d8:	00000000 	andeq	r0, r0, r0
    27dc:	00080000 	andeq	r0, r8, r0
    27e0:	00910073 	addseq	r0, r1, r3, ror r0
    27e4:	9f38231c 	svcls	0x0038231c
	...
    27f0:	00730008 	rsbseq	r0, r3, r8
    27f4:	231c0091 	tstcs	ip, #145	; 0x91
    27f8:	00009f37 	andeq	r9, r0, r7, lsr pc
    27fc:	00000000 	andeq	r0, r0, r0
    2800:	00080000 	andeq	r0, r8, r0
    2804:	00910073 	addseq	r0, r1, r3, ror r0
    2808:	9f38231c 	svcls	0x0038231c
	...
    281c:	9f300002 	svcls	0x00300002
	...
    2828:	00540001 	subseq	r0, r4, r1
    282c:	00000000 	andeq	r0, r0, r0
    2830:	03000000 	movweq	r0, #0
    2834:	9f7f7400 	svcls	0x007f7400
	...
    2840:	00540001 	subseq	r0, r4, r1
    2844:	00000000 	andeq	r0, r0, r0
    2848:	03000000 	movweq	r0, #0
    284c:	9f7f7400 	svcls	0x007f7400
	...
    2858:	00540001 	subseq	r0, r4, r1
	...
    2868:	01000000 	mrseq	r0, (UNDEF: 0)
    286c:	00005d00 	andeq	r5, r0, r0, lsl #26
    2870:	00000000 	andeq	r0, r0, r0
    2874:	00030000 	andeq	r0, r3, r0
    2878:	009f6074 	addseq	r6, pc, r4, ror r0	; <UNPREDICTABLE>
    287c:	00000000 	andeq	r0, r0, r0
    2880:	03000000 	movweq	r0, #0
    2884:	9f487d00 	svcls	0x00487d00
	...
    2898:	00580001 	subseq	r0, r8, r1
    289c:	00000000 	andeq	r0, r0, r0
    28a0:	04000000 	streq	r0, [r0], #-0
    28a4:	5001f300 	andpl	pc, r1, r0, lsl #6
    28a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    28b8:	52000100 	andpl	r0, r0, #0, 2
	...
    28c4:	01f30004 	mvnseq	r0, r4
    28c8:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    28d8:	00020000 	andeq	r0, r2, r0
    28dc:	00009f30 	andeq	r9, r0, r0, lsr pc
    28e0:	00000000 	andeq	r0, r0, r0
    28e4:	00050000 	andeq	r0, r5, r0
    28e8:	25380074 	ldrcs	r0, [r8, #-116]!	; 0x74
    28ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    28f0:	00000000 	andeq	r0, r0, r0
    28f4:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    2908:	9f300002 	svcls	0x00300002
	...
    2914:	00530001 	subseq	r0, r3, r1
    2918:	00000000 	andeq	r0, r0, r0
    291c:	02000000 	andeq	r0, r0, #0
    2920:	009f3000 	addseq	r3, pc, r0
    2924:	00000000 	andeq	r0, r0, r0
    2928:	01000000 	mrseq	r0, (UNDEF: 0)
    292c:	00005300 	andeq	r5, r0, r0, lsl #6
    2930:	00000000 	andeq	r0, r0, r0
    2934:	00030000 	andeq	r0, r3, r0
    2938:	009f7f73 	addseq	r7, pc, r3, ror pc	; <UNPREDICTABLE>
    293c:	00000000 	andeq	r0, r0, r0
    2940:	01000000 	mrseq	r0, (UNDEF: 0)
    2944:	00005300 	andeq	r5, r0, r0, lsl #6
    2948:	00000000 	andeq	r0, r0, r0
    294c:	23a40000 			; <UNDEFINED> instruction: 0x23a40000
    2950:	29640800 	stmdbcs	r4!, {fp}^
    2954:	00010800 	andeq	r0, r1, r0, lsl #16
    2958:	00296451 	eoreq	r6, r9, r1, asr r4
    295c:	00298e08 	eoreq	r8, r9, r8, lsl #28
    2960:	f3000408 	vshl.u8	d0, d8, d0
    2964:	009f5101 	addseq	r5, pc, r1, lsl #2
    2968:	00000000 	andeq	r0, r0, r0
    296c:	ac000000 	stcge	0, cr0, [r0], {-0}
    2970:	64080023 	strvs	r0, [r8], #-35	; 0x23
    2974:	01080029 	tsteq	r8, r9, lsr #32
    2978:	29645100 	stmdbcs	r4!, {r8, ip, lr}^
    297c:	298e0800 	stmibcs	lr, {fp}
    2980:	00040800 	andeq	r0, r4, r0, lsl #16
    2984:	9f5101f3 	svcls	0x005101f3
	...
    2990:	080023ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sp}
    2994:	08002988 	stmdaeq	r0, {r3, r7, r8, fp, sp}
    2998:	885d0001 	ldmdahi	sp, {r0}^
    299c:	8c080029 	stchi	0, cr0, [r8], {41}	; 0x29
    29a0:	03080029 	movweq	r0, #32809	; 0x8029
    29a4:	9f409100 	svcls	0x00409100
    29a8:	0800298c 	stmdaeq	r0, {r2, r3, r7, r8, fp, sp}
    29ac:	0800298e 	stmdaeq	r0, {r1, r2, r3, r7, r8, fp, sp}
    29b0:	407d0003 	rsbsmi	r0, sp, r3
    29b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    29b8:	00000000 	andeq	r0, r0, r0
    29bc:	0023ac00 	eoreq	sl, r3, r0, lsl #24
    29c0:	0023b208 	eoreq	fp, r3, r8, lsl #4
    29c4:	30000208 	andcc	r0, r0, r8, lsl #4
    29c8:	0023b29f 	mlaeq	r3, pc, r2, fp	; <UNPREDICTABLE>
    29cc:	00240008 	eoreq	r0, r4, r8
    29d0:	53000108 	movwpl	r0, #264	; 0x108
    29d4:	0800240c 	stmdaeq	r0, {r2, r3, sl, sp}
    29d8:	0800242a 	stmdaeq	r0, {r1, r3, r5, sl, sp}
    29dc:	00520001 	subseq	r0, r2, r1
    29e0:	00000000 	andeq	r0, r0, r0
    29e4:	ac000000 	stcge	0, cr0, [r0], {-0}
    29e8:	b2080023 	andlt	r0, r8, #35	; 0x23
    29ec:	02080023 	andeq	r0, r8, #35	; 0x23
    29f0:	b29f3000 	addslt	r3, pc, #0
    29f4:	0c080023 	stceq	0, cr0, [r8], {35}	; 0x23
    29f8:	01080024 	tsteq	r8, r4, lsr #32
    29fc:	240c5600 	strcs	r5, [ip], #-1536	; 0x600
    2a00:	24140800 	ldrcs	r0, [r4], #-2048	; 0x800
    2a04:	00020800 	andeq	r0, r2, r0, lsl #16
    2a08:	24149f30 	ldrcs	r9, [r4], #-3888	; 0xf30
    2a0c:	241c0800 	ldrcs	r0, [ip], #-2048	; 0x800
    2a10:	00080800 	andeq	r0, r8, r0, lsl #16
    2a14:	00910073 	addseq	r0, r1, r3, ror r0
    2a18:	9f40231c 	svcls	0x0040231c
    2a1c:	0800241c 	stmdaeq	r0, {r2, r3, r4, sl, sp}
    2a20:	08002422 	stmdaeq	r0, {r1, r5, sl, sp}
    2a24:	00730008 	rsbseq	r0, r3, r8
    2a28:	231c0091 	tstcs	ip, #145	; 0x91
    2a2c:	24229f3f 	strtcs	r9, [r2], #-3903	; 0xf3f
    2a30:	242c0800 	strtcs	r0, [ip], #-2048	; 0x800
    2a34:	00080800 	andeq	r0, r8, r0, lsl #16
    2a38:	00910073 	addseq	r0, r1, r3, ror r0
    2a3c:	9f40231c 	svcls	0x0040231c
	...
    2a48:	080023b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sp}
    2a4c:	080023b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sp}
    2a50:	9f300002 	svcls	0x00300002
    2a54:	080023b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sp}
    2a58:	080023c0 	stmdaeq	r0, {r6, r7, r8, r9, sp}
    2a5c:	c0520001 	subsgt	r0, r2, r1
    2a60:	c6080023 	strgt	r0, [r8], -r3, lsr #32
    2a64:	03080023 	movweq	r0, #32803	; 0x8023
    2a68:	9f7f7200 	svcls	0x007f7200
    2a6c:	080023c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, sp}
    2a70:	080023e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sp}
    2a74:	e8520001 	ldmda	r2, {r0}^
    2a78:	ee080023 	cdp	0, 0, cr0, cr8, cr3, {1}
    2a7c:	03080023 	movweq	r0, #32803	; 0x8023
    2a80:	9f7f7200 	svcls	0x007f7200
    2a84:	080023ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sp}
    2a88:	08002404 	stmdaeq	r0, {r2, sl, sp}
    2a8c:	00520001 	subseq	r0, r2, r1
    2a90:	00000000 	andeq	r0, r0, r0
    2a94:	34000000 	strcc	r0, [r0], #-0
    2a98:	7e080024 	cdpvc	0, 0, cr0, cr8, cr4, {1}
    2a9c:	01080024 	tsteq	r8, r4, lsr #32
    2aa0:	248a5300 	strcs	r5, [sl], #768	; 0x300
    2aa4:	24a80800 	strtcs	r0, [r8], #2048	; 0x800
    2aa8:	00010800 	andeq	r0, r1, r0, lsl #16
    2aac:	00000052 	andeq	r0, r0, r2, asr r0
    2ab0:	00000000 	andeq	r0, r0, r0
    2ab4:	00243400 	eoreq	r3, r4, r0, lsl #8
    2ab8:	00248a08 	eoreq	r8, r4, r8, lsl #20
    2abc:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    2ac0:	0800248a 	stmdaeq	r0, {r1, r3, r7, sl, sp}
    2ac4:	0800248e 	stmdaeq	r0, {r1, r2, r3, r7, sl, sp}
    2ac8:	9f300002 	svcls	0x00300002
    2acc:	0800248e 	stmdaeq	r0, {r1, r2, r3, r7, sl, sp}
    2ad0:	08002496 	stmdaeq	r0, {r1, r2, r4, r7, sl, sp}
    2ad4:	96530001 	ldrbls	r0, [r3], -r1
    2ad8:	9c080024 	stcls	0, cr0, [r8], {36}	; 0x24
    2adc:	03080024 	movweq	r0, #32804	; 0x8024
    2ae0:	9f7f7300 	svcls	0x007f7300
    2ae4:	0800249c 	stmdaeq	r0, {r2, r3, r4, r7, sl, sp}
    2ae8:	080024a8 	stmdaeq	r0, {r3, r5, r7, sl, sp}
    2aec:	00530001 	subseq	r0, r3, r1
    2af0:	00000000 	andeq	r0, r0, r0
    2af4:	36000000 	strcc	r0, [r0], -r0
    2af8:	3a080024 	bcc	202b90 <__Stack_Size+0x202390>
    2afc:	02080024 	andeq	r0, r8, #36	; 0x24
    2b00:	3a9f3000 	bcc	fe7ceb08 <BootRAM+0xd73f2a9>
    2b04:	44080024 	strmi	r0, [r8], #-36	; 0x24
    2b08:	01080024 	tsteq	r8, r4, lsr #32
    2b0c:	24445200 	strbcs	r5, [r4], #-512	; 0x200
    2b10:	244a0800 	strbcs	r0, [sl], #-2048	; 0x800
    2b14:	00030800 	andeq	r0, r3, r0, lsl #16
    2b18:	4a9f7f72 	bmi	fe7e28e8 <BootRAM+0xd753089>
    2b1c:	50080024 	andpl	r0, r8, r4, lsr #32
    2b20:	01080024 	tsteq	r8, r4, lsr #32
    2b24:	24505200 	ldrbcs	r5, [r0], #-512	; 0x200
    2b28:	245e0800 	ldrbcs	r0, [lr], #-2048	; 0x800
    2b2c:	00030800 	andeq	r0, r3, r0, lsl #16
    2b30:	5e9f0172 	mrcpl	1, 4, r0, cr15, cr2, {3}
    2b34:	66080024 	strvs	r0, [r8], -r4, lsr #32
    2b38:	08080024 	stmdaeq	r8, {r2, r5}
    2b3c:	91007200 	mrsls	r7, R8_usr
    2b40:	41231c00 	teqmi	r3, r0, lsl #24
    2b44:	0024669f 	mlaeq	r4, pc, r6, r6	; <UNPREDICTABLE>
    2b48:	00247008 	eoreq	r7, r4, r8
    2b4c:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2b50:	1c009100 	stfned	f1, [r0], {-0}
    2b54:	709f4023 	addsvc	r4, pc, r3, lsr #32
    2b58:	72080024 	andvc	r0, r8, #36	; 0x24
    2b5c:	08080024 	stmdaeq	r8, {r2, r5}
    2b60:	91007200 	mrsls	r7, R8_usr
    2b64:	41231c00 	teqmi	r3, r0, lsl #24
    2b68:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2b6c:	00000000 	andeq	r0, r0, r0
    2b70:	0024a800 	eoreq	sl, r4, r0, lsl #16
    2b74:	0024ae08 	eoreq	sl, r4, r8, lsl #28
    2b78:	30000208 	andcc	r0, r0, r8, lsl #4
    2b7c:	0024ae9f 	mlaeq	r4, pc, lr, sl	; <UNPREDICTABLE>
    2b80:	00250808 	eoreq	r0, r5, r8, lsl #16
    2b84:	53000108 	movwpl	r0, #264	; 0x108
    2b88:	08002514 	stmdaeq	r0, {r2, r4, r8, sl, sp}
    2b8c:	08002530 	stmdaeq	r0, {r4, r5, r8, sl, sp}
    2b90:	00520001 	subseq	r0, r2, r1
    2b94:	00000000 	andeq	r0, r0, r0
    2b98:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    2b9c:	ae080024 	cdpge	0, 0, cr0, cr8, cr4, {1}
    2ba0:	02080024 	andeq	r0, r8, #36	; 0x24
    2ba4:	ae9f3000 	cdpge	0, 9, cr3, cr15, cr0, {0}
    2ba8:	14080024 	strne	r0, [r8], #-36	; 0x24
    2bac:	01080025 	tsteq	r8, r5, lsr #32
    2bb0:	25145900 	ldrcs	r5, [r4, #-2304]	; 0x900
    2bb4:	251a0800 	ldrcs	r0, [sl, #-2048]	; 0x800
    2bb8:	00020800 	andeq	r0, r2, r0, lsl #16
    2bbc:	251a9f30 	ldrcs	r9, [sl, #-3888]	; 0xf30
    2bc0:	25220800 	strcs	r0, [r2, #-2048]!	; 0x800
    2bc4:	00080800 	andeq	r0, r8, r0, lsl #16
    2bc8:	00910073 	addseq	r0, r1, r3, ror r0
    2bcc:	9f40231c 	svcls	0x0040231c
    2bd0:	08002522 	stmdaeq	r0, {r1, r5, r8, sl, sp}
    2bd4:	08002528 	stmdaeq	r0, {r3, r5, r8, sl, sp}
    2bd8:	00730008 	rsbseq	r0, r3, r8
    2bdc:	231c0091 	tstcs	ip, #145	; 0x91
    2be0:	25289f3f 	strcs	r9, [r8, #-3903]!	; 0xf3f
    2be4:	25300800 	ldrcs	r0, [r0, #-2048]!	; 0x800
    2be8:	00080800 	andeq	r0, r8, r0, lsl #16
    2bec:	00910073 	addseq	r0, r1, r3, ror r0
    2bf0:	9f40231c 	svcls	0x0040231c
	...
    2bfc:	080024b0 	stmdaeq	r0, {r4, r5, r7, sl, sp}
    2c00:	080024b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, sl, sp}
    2c04:	9f300002 	svcls	0x00300002
    2c08:	080024b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, sl, sp}
    2c0c:	080024c0 	stmdaeq	r0, {r6, r7, sl, sp}
    2c10:	c0520001 	subsgt	r0, r2, r1
    2c14:	c6080024 	strgt	r0, [r8], -r4, lsr #32
    2c18:	03080024 	movweq	r0, #32804	; 0x8024
    2c1c:	9f7f7200 	svcls	0x007f7200
    2c20:	080024c6 	stmdaeq	r0, {r1, r2, r6, r7, sl, sp}
    2c24:	080024ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, sp}
    2c28:	ec520001 	mrrc	0, 0, r0, r2, cr1
    2c2c:	f2080024 	vhadd.s8	d0, d8, d20
    2c30:	03080024 	movweq	r0, #32804	; 0x8024
    2c34:	9f7f7200 	svcls	0x007f7200
    2c38:	080024f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl, sp}
    2c3c:	0800250c 	stmdaeq	r0, {r2, r3, r8, sl, sp}
    2c40:	00520001 	subseq	r0, r2, r1
    2c44:	00000000 	andeq	r0, r0, r0
    2c48:	30000000 	andcc	r0, r0, r0
    2c4c:	86080025 	strhi	r0, [r8], -r5, lsr #32
    2c50:	01080025 	tsteq	r8, r5, lsr #32
    2c54:	25925300 	ldrcs	r5, [r2, #768]	; 0x300
    2c58:	25b40800 	ldrcs	r0, [r4, #2048]!	; 0x800
    2c5c:	00010800 	andeq	r0, r1, r0, lsl #16
    2c60:	00000052 	andeq	r0, r0, r2, asr r0
    2c64:	00000000 	andeq	r0, r0, r0
    2c68:	00253000 	eoreq	r3, r5, r0
    2c6c:	00259208 	eoreq	r9, r5, r8, lsl #4
    2c70:	59000108 	stmdbpl	r0, {r3, r8}
    2c74:	08002592 	stmdaeq	r0, {r1, r4, r7, r8, sl, sp}
    2c78:	08002596 	stmdaeq	r0, {r1, r2, r4, r7, r8, sl, sp}
    2c7c:	9f300002 	svcls	0x00300002
    2c80:	08002596 	stmdaeq	r0, {r1, r2, r4, r7, r8, sl, sp}
    2c84:	0800259e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, sl, sp}
    2c88:	9e530001 	cdpls	0, 5, cr0, cr3, cr1, {0}
    2c8c:	a4080025 	strge	r0, [r8], #-37	; 0x25
    2c90:	03080025 	movweq	r0, #32805	; 0x8025
    2c94:	9f7f7300 	svcls	0x007f7300
    2c98:	080025a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, sp}
    2c9c:	080025b0 	stmdaeq	r0, {r4, r5, r7, r8, sl, sp}
    2ca0:	00530001 	subseq	r0, r3, r1
    2ca4:	00000000 	andeq	r0, r0, r0
    2ca8:	32000000 	andcc	r0, r0, #0
    2cac:	38080025 	stmdacc	r8, {r0, r2, r5}
    2cb0:	02080025 	andeq	r0, r8, #37	; 0x25
    2cb4:	389f3000 	ldmcc	pc, {ip, sp}	; <UNPREDICTABLE>
    2cb8:	42080025 	andmi	r0, r8, #37	; 0x25
    2cbc:	01080025 	tsteq	r8, r5, lsr #32
    2cc0:	25425200 	strbcs	r5, [r2, #-512]	; 0x200
    2cc4:	25480800 	strbcs	r0, [r8, #-2048]	; 0x800
    2cc8:	00030800 	andeq	r0, r3, r0, lsl #16
    2ccc:	489f7f72 	ldmmi	pc, {r1, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    2cd0:	4e080025 	cdpmi	0, 0, cr0, cr8, cr5, {1}
    2cd4:	01080025 	tsteq	r8, r5, lsr #32
    2cd8:	254e5200 	strbcs	r5, [lr, #-512]	; 0x200
    2cdc:	25600800 	strbcs	r0, [r0, #-2048]!	; 0x800
    2ce0:	00030800 	andeq	r0, r3, r0, lsl #16
    2ce4:	609f0172 	addsvs	r0, pc, r2, ror r1	; <UNPREDICTABLE>
    2ce8:	68080025 	stmdavs	r8, {r0, r2, r5}
    2cec:	08080025 	stmdaeq	r8, {r0, r2, r5}
    2cf0:	91007200 	mrsls	r7, R8_usr
    2cf4:	41231c00 	teqmi	r3, r0, lsl #24
    2cf8:	0025689f 	mlaeq	r5, pc, r8, r6	; <UNPREDICTABLE>
    2cfc:	00257208 	eoreq	r7, r5, r8, lsl #4
    2d00:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2d04:	1c009100 	stfned	f1, [r0], {-0}
    2d08:	729f4023 	addsvc	r4, pc, #35	; 0x23
    2d0c:	74080025 	strvc	r0, [r8], #-37	; 0x25
    2d10:	08080025 	stmdaeq	r8, {r0, r2, r5}
    2d14:	91007200 	mrsls	r7, R8_usr
    2d18:	41231c00 	teqmi	r3, r0, lsl #24
    2d1c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2d20:	00000000 	andeq	r0, r0, r0
    2d24:	0025b400 	eoreq	fp, r5, r0, lsl #8
    2d28:	00260a08 	eoreq	r0, r6, r8, lsl #20
    2d2c:	53000108 	movwpl	r0, #264	; 0x108
    2d30:	08002616 	stmdaeq	r0, {r1, r2, r4, r9, sl, sp}
    2d34:	08002632 	stmdaeq	r0, {r1, r4, r5, r9, sl, sp}
    2d38:	00520001 	subseq	r0, r2, r1
    2d3c:	00000000 	andeq	r0, r0, r0
    2d40:	b4000000 	strlt	r0, [r0], #-0
    2d44:	16080025 	strne	r0, [r8], -r5, lsr #32
    2d48:	01080026 	tsteq	r8, r6, lsr #32
    2d4c:	26165c00 	ldrcs	r5, [r6], -r0, lsl #24
    2d50:	261c0800 	ldrcs	r0, [ip], -r0, lsl #16
    2d54:	00020800 	andeq	r0, r2, r0, lsl #16
    2d58:	261c9f30 	sasxcs	r9, ip, r0
    2d5c:	26240800 	strtcs	r0, [r4], -r0, lsl #16
    2d60:	00080800 	andeq	r0, r8, r0, lsl #16
    2d64:	00910073 	addseq	r0, r1, r3, ror r0
    2d68:	9f40231c 	svcls	0x0040231c
    2d6c:	08002624 	stmdaeq	r0, {r2, r5, r9, sl, sp}
    2d70:	0800262a 	stmdaeq	r0, {r1, r3, r5, r9, sl, sp}
    2d74:	00730008 	rsbseq	r0, r3, r8
    2d78:	231c0091 	tstcs	ip, #145	; 0x91
    2d7c:	262a9f3f 	qasxcs	r9, sl, pc	; <UNPREDICTABLE>
    2d80:	26340800 	ldrtcs	r0, [r4], -r0, lsl #16
    2d84:	00080800 	andeq	r0, r8, r0, lsl #16
    2d88:	00910073 	addseq	r0, r1, r3, ror r0
    2d8c:	9f40231c 	svcls	0x0040231c
	...
    2d98:	080025b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, sp}
    2d9c:	080025bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, sp}
    2da0:	9f300002 	svcls	0x00300002
    2da4:	080025bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, sp}
    2da8:	080025c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, sp}
    2dac:	c4520001 	ldrbgt	r0, [r2], #-1
    2db0:	ca080025 	bgt	202e4c <__Stack_Size+0x20264c>
    2db4:	03080025 	movweq	r0, #32805	; 0x8025
    2db8:	9f7f7200 	svcls	0x007f7200
    2dbc:	080025ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl, sp}
    2dc0:	080025ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl, sp}
    2dc4:	ee520001 	cdp	0, 5, cr0, cr2, cr1, {0}
    2dc8:	f4080025 	vst4.8	{d0-d3}, [r8 :128], r5
    2dcc:	03080025 	movweq	r0, #32805	; 0x8025
    2dd0:	9f7f7200 	svcls	0x007f7200
    2dd4:	080025f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, sp}
    2dd8:	0800260e 	stmdaeq	r0, {r1, r2, r3, r9, sl, sp}
    2ddc:	00520001 	subseq	r0, r2, r1
    2de0:	00000000 	andeq	r0, r0, r0
    2de4:	3c000000 	stccc	0, cr0, [r0], {-0}
    2de8:	88080026 	stmdahi	r8, {r1, r2, r5}
    2dec:	01080026 	tsteq	r8, r6, lsr #32
    2df0:	26945300 	ldrcs	r5, [r4], r0, lsl #6
    2df4:	26b00800 	ldrtcs	r0, [r0], r0, lsl #16
    2df8:	00010800 	andeq	r0, r1, r0, lsl #16
    2dfc:	00000052 	andeq	r0, r0, r2, asr r0
    2e00:	00000000 	andeq	r0, r0, r0
    2e04:	00263c00 	eoreq	r3, r6, r0, lsl #24
    2e08:	00269408 	eoreq	r9, r6, r8, lsl #8
    2e0c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    2e10:	08002694 	stmdaeq	r0, {r2, r4, r7, r9, sl, sp}
    2e14:	08002698 	stmdaeq	r0, {r3, r4, r7, r9, sl, sp}
    2e18:	9f300002 	svcls	0x00300002
    2e1c:	08002698 	stmdaeq	r0, {r3, r4, r7, r9, sl, sp}
    2e20:	080026a0 	stmdaeq	r0, {r5, r7, r9, sl, sp}
    2e24:	a0530001 	subsge	r0, r3, r1
    2e28:	a6080026 	strge	r0, [r8], -r6, lsr #32
    2e2c:	03080026 	movweq	r0, #32806	; 0x8026
    2e30:	9f7f7300 	svcls	0x007f7300
    2e34:	080026a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sl, sp}
    2e38:	080026ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, sp}
    2e3c:	00530001 	subseq	r0, r3, r1
    2e40:	00000000 	andeq	r0, r0, r0
    2e44:	40000000 	andmi	r0, r0, r0
    2e48:	44080026 	strmi	r0, [r8], #-38	; 0x26
    2e4c:	02080026 	andeq	r0, r8, #38	; 0x26
    2e50:	449f3000 	ldrmi	r3, [pc], #0	; 2e58 <__Stack_Size+0x2658>
    2e54:	4e080026 	cdpmi	0, 0, cr0, cr8, cr6, {1}
    2e58:	01080026 	tsteq	r8, r6, lsr #32
    2e5c:	264e5200 	strbcs	r5, [lr], -r0, lsl #4
    2e60:	26540800 	ldrbcs	r0, [r4], -r0, lsl #16
    2e64:	00030800 	andeq	r0, r3, r0, lsl #16
    2e68:	549f7f72 	ldrpl	r7, [pc], #3954	; 2e70 <__Stack_Size+0x2670>
    2e6c:	5a080026 	bpl	202f0c <__Stack_Size+0x20270c>
    2e70:	01080026 	tsteq	r8, r6, lsr #32
    2e74:	265a5200 	ldrbcs	r5, [sl], -r0, lsl #4
    2e78:	26680800 	strbtcs	r0, [r8], -r0, lsl #16
    2e7c:	00030800 	andeq	r0, r3, r0, lsl #16
    2e80:	689f0172 	ldmvs	pc, {r1, r4, r5, r6, r8}	; <UNPREDICTABLE>
    2e84:	70080026 	andvc	r0, r8, r6, lsr #32
    2e88:	08080026 	stmdaeq	r8, {r1, r2, r5}
    2e8c:	91007200 	mrsls	r7, R8_usr
    2e90:	41231c00 	teqmi	r3, r0, lsl #24
    2e94:	0026709f 	mlaeq	r6, pc, r0, r7	; <UNPREDICTABLE>
    2e98:	00267a08 	eoreq	r7, r6, r8, lsl #20
    2e9c:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2ea0:	1c009100 	stfned	f1, [r0], {-0}
    2ea4:	7a9f4023 	bvc	fe7d2f38 <BootRAM+0xd7436d9>
    2ea8:	7c080026 	stcvc	0, cr0, [r8], {38}	; 0x26
    2eac:	08080026 	stmdaeq	r8, {r1, r2, r5}
    2eb0:	91007200 	mrsls	r7, R8_usr
    2eb4:	41231c00 	teqmi	r3, r0, lsl #24
    2eb8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2ebc:	00000000 	andeq	r0, r0, r0
    2ec0:	0026b000 	eoreq	fp, r6, r0
    2ec4:	00270008 	eoreq	r0, r7, r8
    2ec8:	53000108 	movwpl	r0, #264	; 0x108
    2ecc:	0800270c 	stmdaeq	r0, {r2, r3, r8, r9, sl, sp}
    2ed0:	08002732 	stmdaeq	r0, {r1, r4, r5, r8, r9, sl, sp}
    2ed4:	00520001 	subseq	r0, r2, r1
    2ed8:	00000000 	andeq	r0, r0, r0
    2edc:	b0000000 	andlt	r0, r0, r0
    2ee0:	0c080026 	stceq	0, cr0, [r8], {38}	; 0x26
    2ee4:	01080027 	tsteq	r8, r7, lsr #32
    2ee8:	270c5600 	strcs	r5, [ip, -r0, lsl #12]
    2eec:	27120800 	ldrcs	r0, [r2, -r0, lsl #16]
    2ef0:	00020800 	andeq	r0, r2, r0, lsl #16
    2ef4:	27129f30 			; <UNDEFINED> instruction: 0x27129f30
    2ef8:	271a0800 	ldrcs	r0, [sl, -r0, lsl #16]
    2efc:	00080800 	andeq	r0, r8, r0, lsl #16
    2f00:	00910073 	addseq	r0, r1, r3, ror r0
    2f04:	9f40231c 	svcls	0x0040231c
    2f08:	0800271a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, sp}
    2f0c:	08002720 	stmdaeq	r0, {r5, r8, r9, sl, sp}
    2f10:	00730008 	rsbseq	r0, r3, r8
    2f14:	231c0091 	tstcs	ip, #145	; 0x91
    2f18:	27209f3f 			; <UNDEFINED> instruction: 0x27209f3f
    2f1c:	272e0800 	strcs	r0, [lr, -r0, lsl #16]!
    2f20:	00080800 	andeq	r0, r8, r0, lsl #16
    2f24:	00910073 	addseq	r0, r1, r3, ror r0
    2f28:	9f40231c 	svcls	0x0040231c
	...
    2f34:	080026b2 	stmdaeq	r0, {r1, r4, r5, r7, r9, sl, sp}
    2f38:	080026b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sl, sp}
    2f3c:	9f300002 	svcls	0x00300002
    2f40:	080026b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sl, sp}
    2f44:	080026c0 	stmdaeq	r0, {r6, r7, r9, sl, sp}
    2f48:	c0520001 	subsgt	r0, r2, r1
    2f4c:	c6080026 	strgt	r0, [r8], -r6, lsr #32
    2f50:	03080026 	movweq	r0, #32806	; 0x8026
    2f54:	9f7f7200 	svcls	0x007f7200
    2f58:	080026c6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, sp}
    2f5c:	080026e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, sp}
    2f60:	e8520001 	ldmda	r2, {r0}^
    2f64:	ee080026 	cdp	0, 0, cr0, cr8, cr6, {1}
    2f68:	03080026 	movweq	r0, #32806	; 0x8026
    2f6c:	9f7f7200 	svcls	0x007f7200
    2f70:	080026ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, sl, sp}
    2f74:	08002704 	stmdaeq	r0, {r2, r8, r9, sl, sp}
    2f78:	00520001 	subseq	r0, r2, r1
    2f7c:	00000000 	andeq	r0, r0, r0
    2f80:	32000000 	andcc	r0, r0, #0
    2f84:	7e080027 	cdpvc	0, 0, cr0, cr8, cr7, {1}
    2f88:	01080027 	tsteq	r8, r7, lsr #32
    2f8c:	278a5300 	strcs	r5, [sl, r0, lsl #6]
    2f90:	27a60800 	strcs	r0, [r6, r0, lsl #16]!
    2f94:	00010800 	andeq	r0, r1, r0, lsl #16
    2f98:	00000052 	andeq	r0, r0, r2, asr r0
    2f9c:	00000000 	andeq	r0, r0, r0
    2fa0:	00273200 	eoreq	r3, r7, r0, lsl #4
    2fa4:	00278a08 	eoreq	r8, r7, r8, lsl #20
    2fa8:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    2fac:	0800278a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, sp}
    2fb0:	0800278e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sl, sp}
    2fb4:	9f300002 	svcls	0x00300002
    2fb8:	0800278e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sl, sp}
    2fbc:	08002796 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, sp}
    2fc0:	96530001 	ldrbls	r0, [r3], -r1
    2fc4:	9c080027 	stcls	0, cr0, [r8], {39}	; 0x27
    2fc8:	03080027 	movweq	r0, #32807	; 0x8027
    2fcc:	9f7f7300 	svcls	0x007f7300
    2fd0:	0800279c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, sp}
    2fd4:	080027a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, sp}
    2fd8:	00530001 	subseq	r0, r3, r1
    2fdc:	00000000 	andeq	r0, r0, r0
    2fe0:	36000000 	strcc	r0, [r0], -r0
    2fe4:	3a080027 	bcc	203088 <__Stack_Size+0x202888>
    2fe8:	02080027 	andeq	r0, r8, #39	; 0x27
    2fec:	3a9f3000 	bcc	fe7ceff4 <BootRAM+0xd73f795>
    2ff0:	44080027 	strmi	r0, [r8], #-39	; 0x27
    2ff4:	01080027 	tsteq	r8, r7, lsr #32
    2ff8:	27445200 	strbcs	r5, [r4, -r0, lsl #4]
    2ffc:	274a0800 	strbcs	r0, [sl, -r0, lsl #16]
    3000:	00030800 	andeq	r0, r3, r0, lsl #16
    3004:	4a9f7f72 	bmi	fe7e2dd4 <BootRAM+0xd753575>
    3008:	50080027 	andpl	r0, r8, r7, lsr #32
    300c:	01080027 	tsteq	r8, r7, lsr #32
    3010:	27505200 	ldrbcs	r5, [r0, -r0, lsl #4]
    3014:	275e0800 	ldrbcs	r0, [lr, -r0, lsl #16]
    3018:	00030800 	andeq	r0, r3, r0, lsl #16
    301c:	5e9f0172 	mrcpl	1, 4, r0, cr15, cr2, {3}
    3020:	66080027 	strvs	r0, [r8], -r7, lsr #32
    3024:	08080027 	stmdaeq	r8, {r0, r1, r2, r5}
    3028:	91007200 	mrsls	r7, R8_usr
    302c:	41231c00 	teqmi	r3, r0, lsl #24
    3030:	0027669f 	mlaeq	r7, pc, r6, r6	; <UNPREDICTABLE>
    3034:	00277008 	eoreq	r7, r7, r8
    3038:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    303c:	1c009100 	stfned	f1, [r0], {-0}
    3040:	709f4023 	addsvc	r4, pc, r3, lsr #32
    3044:	72080027 	andvc	r0, r8, #39	; 0x27
    3048:	08080027 	stmdaeq	r8, {r0, r1, r2, r5}
    304c:	91007200 	mrsls	r7, R8_usr
    3050:	41231c00 	teqmi	r3, r0, lsl #24
    3054:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3058:	00000000 	andeq	r0, r0, r0
    305c:	0027a600 	eoreq	sl, r7, r0, lsl #12
    3060:	0027f608 	eoreq	pc, r7, r8, lsl #12
    3064:	53000108 	movwpl	r0, #264	; 0x108
    3068:	08002802 	stmdaeq	r0, {r1, fp, sp}
    306c:	08002828 	stmdaeq	r0, {r3, r5, fp, sp}
    3070:	00520001 	subseq	r0, r2, r1
    3074:	00000000 	andeq	r0, r0, r0
    3078:	a6000000 	strge	r0, [r0], -r0
    307c:	02080027 	andeq	r0, r8, #39	; 0x27
    3080:	01080028 	tsteq	r8, r8, lsr #32
    3084:	28025600 	stmdacs	r2, {r9, sl, ip, lr}
    3088:	28080800 	stmdacs	r8, {fp}
    308c:	00020800 	andeq	r0, r2, r0, lsl #16
    3090:	28089f30 	stmdacs	r8, {r4, r5, r8, r9, sl, fp, ip, pc}
    3094:	28100800 	ldmdacs	r0, {fp}
    3098:	00080800 	andeq	r0, r8, r0, lsl #16
    309c:	00910073 	addseq	r0, r1, r3, ror r0
    30a0:	9f40231c 	svcls	0x0040231c
    30a4:	08002810 	stmdaeq	r0, {r4, fp, sp}
    30a8:	08002816 	stmdaeq	r0, {r1, r2, r4, fp, sp}
    30ac:	00730008 	rsbseq	r0, r3, r8
    30b0:	231c0091 	tstcs	ip, #145	; 0x91
    30b4:	28169f3f 	ldmdacs	r6, {r0, r1, r2, r3, r4, r5, r8, r9, sl, fp, ip, pc}
    30b8:	28240800 	stmdacs	r4!, {fp}
    30bc:	00080800 	andeq	r0, r8, r0, lsl #16
    30c0:	00910073 	addseq	r0, r1, r3, ror r0
    30c4:	9f40231c 	svcls	0x0040231c
	...
    30d0:	080027a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, sp}
    30d4:	080027ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, sp}
    30d8:	9f300002 	svcls	0x00300002
    30dc:	080027ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, sp}
    30e0:	080027b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, sp}
    30e4:	b6520001 	ldrblt	r0, [r2], -r1
    30e8:	bc080027 	stclt	0, cr0, [r8], {39}	; 0x27
    30ec:	03080027 	movweq	r0, #32807	; 0x8027
    30f0:	9f7f7200 	svcls	0x007f7200
    30f4:	080027bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, sp}
    30f8:	080027de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, sp}
    30fc:	de520001 	cdple	0, 5, cr0, cr2, cr1, {0}
    3100:	e4080027 	str	r0, [r8], #-39	; 0x27
    3104:	03080027 	movweq	r0, #32807	; 0x8027
    3108:	9f7f7200 	svcls	0x007f7200
    310c:	080027e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, sp}
    3110:	080027fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, sp}
    3114:	00520001 	subseq	r0, r2, r1
    3118:	00000000 	andeq	r0, r0, r0
    311c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    3120:	72080028 	andvc	r0, r8, #40	; 0x28
    3124:	01080028 	tsteq	r8, r8, lsr #32
    3128:	287e5300 	ldmdacs	lr!, {r8, r9, ip, lr}^
    312c:	289a0800 	ldmcs	sl, {fp}
    3130:	00010800 	andeq	r0, r1, r0, lsl #16
    3134:	00000052 	andeq	r0, r0, r2, asr r0
    3138:	00000000 	andeq	r0, r0, r0
    313c:	00282800 	eoreq	r2, r8, r0, lsl #16
    3140:	00287e08 	eoreq	r7, r8, r8, lsl #28
    3144:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    3148:	0800287e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, fp, sp}
    314c:	08002882 	stmdaeq	r0, {r1, r7, fp, sp}
    3150:	9f300002 	svcls	0x00300002
    3154:	08002882 	stmdaeq	r0, {r1, r7, fp, sp}
    3158:	0800288a 	stmdaeq	r0, {r1, r3, r7, fp, sp}
    315c:	8a530001 	bhi	14c3168 <__Stack_Size+0x14c2968>
    3160:	90080028 	andls	r0, r8, r8, lsr #32
    3164:	03080028 	movweq	r0, #32808	; 0x8028
    3168:	9f7f7300 	svcls	0x007f7300
    316c:	08002890 	stmdaeq	r0, {r4, r7, fp, sp}
    3170:	08002896 	stmdaeq	r0, {r1, r2, r4, r7, fp, sp}
    3174:	00530001 	subseq	r0, r3, r1
    3178:	00000000 	andeq	r0, r0, r0
    317c:	2a000000 	bcs	3184 <__Stack_Size+0x2984>
    3180:	2e080028 	cdpcs	0, 0, cr0, cr8, cr8, {1}
    3184:	02080028 	andeq	r0, r8, #40	; 0x28
    3188:	2e9f3000 	cdpcs	0, 9, cr3, cr15, cr0, {0}
    318c:	38080028 	stmdacc	r8, {r3, r5}
    3190:	01080028 	tsteq	r8, r8, lsr #32
    3194:	28385200 	ldmdacs	r8!, {r9, ip, lr}
    3198:	283e0800 	ldmdacs	lr!, {fp}
    319c:	00030800 	andeq	r0, r3, r0, lsl #16
    31a0:	3e9f7f72 	mrccc	15, 4, r7, cr15, cr2, {3}
    31a4:	44080028 	strmi	r0, [r8], #-40	; 0x28
    31a8:	01080028 	tsteq	r8, r8, lsr #32
    31ac:	28445200 	stmdacs	r4, {r9, ip, lr}^
    31b0:	28520800 	ldmdacs	r2, {fp}^
    31b4:	00030800 	andeq	r0, r3, r0, lsl #16
    31b8:	529f0172 	addspl	r0, pc, #-2147483620	; 0x8000001c
    31bc:	5a080028 	bpl	203264 <__Stack_Size+0x202a64>
    31c0:	08080028 	stmdaeq	r8, {r3, r5}
    31c4:	91007200 	mrsls	r7, R8_usr
    31c8:	41231c00 	teqmi	r3, r0, lsl #24
    31cc:	00285a9f 	mlaeq	r8, pc, sl, r5	; <UNPREDICTABLE>
    31d0:	00286408 	eoreq	r6, r8, r8, lsl #8
    31d4:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    31d8:	1c009100 	stfned	f1, [r0], {-0}
    31dc:	649f4023 	ldrvs	r4, [pc], #35	; 31e4 <__Stack_Size+0x29e4>
    31e0:	66080028 	strvs	r0, [r8], -r8, lsr #32
    31e4:	08080028 	stmdaeq	r8, {r3, r5}
    31e8:	91007200 	mrsls	r7, R8_usr
    31ec:	41231c00 	teqmi	r3, r0, lsl #24
    31f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    31f4:	00000000 	andeq	r0, r0, r0
    31f8:	00289a00 	eoreq	r9, r8, r0, lsl #20
    31fc:	0028ea08 	eoreq	lr, r8, r8, lsl #20
    3200:	53000108 	movwpl	r0, #264	; 0x108
    3204:	080028f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, fp, sp}
    3208:	08002912 	stmdaeq	r0, {r1, r4, r8, fp, sp}
    320c:	00520001 	subseq	r0, r2, r1
    3210:	00000000 	andeq	r0, r0, r0
    3214:	9a000000 	bls	321c <__Stack_Size+0x2a1c>
    3218:	f6080028 			; <UNDEFINED> instruction: 0xf6080028
    321c:	01080028 	tsteq	r8, r8, lsr #32
    3220:	28f65600 	ldmcs	r6!, {r9, sl, ip, lr}^
    3224:	28fc0800 	ldmcs	ip!, {fp}^
    3228:	00020800 	andeq	r0, r2, r0, lsl #16
    322c:	28fc9f30 	ldmcs	ip!, {r4, r5, r8, r9, sl, fp, ip, pc}^
    3230:	29040800 	stmdbcs	r4, {fp}
    3234:	00080800 	andeq	r0, r8, r0, lsl #16
    3238:	00910073 	addseq	r0, r1, r3, ror r0
    323c:	9f40231c 	svcls	0x0040231c
    3240:	08002904 	stmdaeq	r0, {r2, r8, fp, sp}
    3244:	0800290a 	stmdaeq	r0, {r1, r3, r8, fp, sp}
    3248:	00730008 	rsbseq	r0, r3, r8
    324c:	231c0091 	tstcs	ip, #145	; 0x91
    3250:	290a9f3f 	stmdbcs	sl, {r0, r1, r2, r3, r4, r5, r8, r9, sl, fp, ip, pc}
    3254:	29140800 	ldmdbcs	r4, {fp}
    3258:	00080800 	andeq	r0, r8, r0, lsl #16
    325c:	00910073 	addseq	r0, r1, r3, ror r0
    3260:	9f40231c 	svcls	0x0040231c
	...
    326c:	0800289c 	stmdaeq	r0, {r2, r3, r4, r7, fp, sp}
    3270:	080028a0 	stmdaeq	r0, {r5, r7, fp, sp}
    3274:	9f300002 	svcls	0x00300002
    3278:	080028a0 	stmdaeq	r0, {r5, r7, fp, sp}
    327c:	080028aa 	stmdaeq	r0, {r1, r3, r5, r7, fp, sp}
    3280:	aa520001 	bge	148328c <__Stack_Size+0x1482a8c>
    3284:	b0080028 	andlt	r0, r8, r8, lsr #32
    3288:	03080028 	movweq	r0, #32808	; 0x8028
    328c:	9f7f7200 	svcls	0x007f7200
    3290:	080028b0 	stmdaeq	r0, {r4, r5, r7, fp, sp}
    3294:	080028d2 	stmdaeq	r0, {r1, r4, r6, r7, fp, sp}
    3298:	d2520001 	subsle	r0, r2, #1
    329c:	d8080028 	stmdale	r8, {r3, r5}
    32a0:	03080028 	movweq	r0, #32808	; 0x8028
    32a4:	9f7f7200 	svcls	0x007f7200
    32a8:	080028d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, sp}
    32ac:	080028ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, fp, sp}
    32b0:	00520001 	subseq	r0, r2, r1
    32b4:	00000000 	andeq	r0, r0, r0
    32b8:	1c000000 	stcne	0, cr0, [r0], {-0}
    32bc:	66080029 	strvs	r0, [r8], -r9, lsr #32
    32c0:	01080029 	tsteq	r8, r9, lsr #32
    32c4:	29725300 	ldmdbcs	r2!, {r8, r9, ip, lr}^
    32c8:	298e0800 	stmibcs	lr, {fp}
    32cc:	00010800 	andeq	r0, r1, r0, lsl #16
    32d0:	00000052 	andeq	r0, r0, r2, asr r0
    32d4:	00000000 	andeq	r0, r0, r0
    32d8:	00291c00 	eoreq	r1, r9, r0, lsl #24
    32dc:	00297208 	eoreq	r7, r9, r8, lsl #4
    32e0:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    32e4:	08002972 	stmdaeq	r0, {r1, r4, r5, r6, r8, fp, sp}
    32e8:	08002976 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, fp, sp}
    32ec:	9f300002 	svcls	0x00300002
    32f0:	08002976 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, fp, sp}
    32f4:	0800297e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, fp, sp}
    32f8:	7e530001 	cdpvc	0, 5, cr0, cr3, cr1, {0}
    32fc:	84080029 	strhi	r0, [r8], #-41	; 0x29
    3300:	03080029 	movweq	r0, #32809	; 0x8029
    3304:	9f7f7300 	svcls	0x007f7300
    3308:	08002984 	stmdaeq	r0, {r2, r7, r8, fp, sp}
    330c:	0800298e 	stmdaeq	r0, {r1, r2, r3, r7, r8, fp, sp}
    3310:	00530001 	subseq	r0, r3, r1
    3314:	00000000 	andeq	r0, r0, r0
    3318:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    331c:	22080029 	andcs	r0, r8, #41	; 0x29
    3320:	02080029 	andeq	r0, r8, #41	; 0x29
    3324:	229f3000 	addscs	r3, pc, #0
    3328:	2c080029 	stccs	0, cr0, [r8], {41}	; 0x29
    332c:	01080029 	tsteq	r8, r9, lsr #32
    3330:	292c5200 	stmdbcs	ip!, {r9, ip, lr}
    3334:	29320800 	ldmdbcs	r2!, {fp}
    3338:	00030800 	andeq	r0, r3, r0, lsl #16
    333c:	329f7f72 	addscc	r7, pc, #456	; 0x1c8
    3340:	38080029 	stmdacc	r8, {r0, r3, r5}
    3344:	01080029 	tsteq	r8, r9, lsr #32
    3348:	29385200 	ldmdbcs	r8!, {r9, ip, lr}
    334c:	29460800 	stmdbcs	r6, {fp}^
    3350:	00030800 	andeq	r0, r3, r0, lsl #16
    3354:	469f0172 			; <UNDEFINED> instruction: 0x469f0172
    3358:	4e080029 	cdpmi	0, 0, cr0, cr8, cr9, {1}
    335c:	08080029 	stmdaeq	r8, {r0, r3, r5}
    3360:	91007200 	mrsls	r7, R8_usr
    3364:	41231c00 	teqmi	r3, r0, lsl #24
    3368:	00294e9f 	mlaeq	r9, pc, lr, r4	; <UNPREDICTABLE>
    336c:	00295808 	eoreq	r5, r9, r8, lsl #16
    3370:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    3374:	1c009100 	stfned	f1, [r0], {-0}
    3378:	589f4023 	ldmpl	pc, {r0, r1, r5, lr}	; <UNPREDICTABLE>
    337c:	5a080029 	bpl	203428 <__Stack_Size+0x202c28>
    3380:	08080029 	stmdaeq	r8, {r0, r3, r5}
    3384:	91007200 	mrsls	r7, R8_usr
    3388:	41231c00 	teqmi	r3, r0, lsl #24
    338c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    339c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    33a8:	00550001 	subseq	r0, r5, r1
	...
    33b8:	01000000 	mrseq	r0, (UNDEF: 0)
    33bc:	00005100 	andeq	r5, r0, r0, lsl #2
    33c0:	00000000 	andeq	r0, r0, r0
    33c4:	00040000 	andeq	r0, r4, r0
    33c8:	9f5101f3 	svcls	0x005101f3
	...
    33dc:	005d0001 	subseq	r0, sp, r1
    33e0:	00000000 	andeq	r0, r0, r0
    33e4:	03000000 	movweq	r0, #0
    33e8:	9f607400 	svcls	0x00607400
	...
    33f4:	08002990 	stmdaeq	r0, {r4, r7, r8, fp, sp}
    33f8:	080029a2 	stmdaeq	r0, {r1, r5, r7, r8, fp, sp}
    33fc:	a2500001 	subsge	r0, r0, #1
    3400:	c2080029 	andgt	r0, r8, #41	; 0x29
    3404:	0308002f 	movweq	r0, #32815	; 0x802f
    3408:	7ed89100 	atnvce	f1, f0
    340c:	08002fc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sl, fp, sp}
    3410:	08002fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, sp}
    3414:	d87d0003 	ldmdale	sp!, {r0, r1}^
    3418:	0000007e 	andeq	r0, r0, lr, ror r0
    341c:	00000000 	andeq	r0, r0, r0
    3420:	00299000 	eoreq	r9, r9, r0
    3424:	0029a208 	eoreq	sl, r9, r8, lsl #4
    3428:	51000108 	tstpl	r0, r8, lsl #2
    342c:	080029a2 	stmdaeq	r0, {r1, r5, r7, r8, fp, sp}
    3430:	080029ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, fp, sp}
    3434:	ca500001 	bgt	1403440 <__Stack_Size+0x1402c40>
    3438:	c2080029 	andgt	r0, r8, #41	; 0x29
    343c:	0308002f 	movweq	r0, #32815	; 0x802f
    3440:	7edc9100 	atnvce	f1, f0
    3444:	08002fc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sl, fp, sp}
    3448:	08002fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, sp}
    344c:	dc7d0003 	ldclle	0, cr0, [sp], #-12
    3450:	0000007e 	andeq	r0, r0, lr, ror r0
    3454:	00000000 	andeq	r0, r0, r0
    3458:	00299c00 	eoreq	r9, r9, r0, lsl #24
    345c:	0029a208 	eoreq	sl, r9, r8, lsl #4
    3460:	51000108 	tstpl	r0, r8, lsl #2
    3464:	080029a2 	stmdaeq	r0, {r1, r5, r7, r8, fp, sp}
    3468:	080029ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, fp, sp}
    346c:	ca500001 	bgt	1403478 <__Stack_Size+0x1402c78>
    3470:	c2080029 	andgt	r0, r8, #41	; 0x29
    3474:	0308002f 	movweq	r0, #32815	; 0x802f
    3478:	7edc9100 	atnvce	f1, f0
    347c:	08002fc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sl, fp, sp}
    3480:	08002fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, sp}
    3484:	dc7d0003 	ldclle	0, cr0, [sp], #-12
    3488:	0000007e 	andeq	r0, r0, lr, ror r0
    348c:	00000000 	andeq	r0, r0, r0
    3490:	00299800 	eoreq	r9, r9, r0, lsl #16
    3494:	0029a008 	eoreq	sl, r9, r8
    3498:	91000408 	tstls	r0, r8, lsl #8
    349c:	a09f7fa0 	addsge	r7, pc, r0, lsr #31
    34a0:	c2080029 	andgt	r0, r8, #41	; 0x29
    34a4:	0108002f 	tsteq	r8, pc, lsr #32
    34a8:	2fc25600 	svccs	0x00c25600
    34ac:	2fc40800 	svccs	0x00c40800
    34b0:	00040800 	andeq	r0, r4, r0, lsl #16
    34b4:	9f7fa07d 	svcls	0x007fa07d
	...
    34c0:	0800299c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp, sp}
    34c4:	080029a2 	stmdaeq	r0, {r1, r5, r7, r8, fp, sp}
    34c8:	9f300002 	svcls	0x00300002
    34cc:	080029a2 	stmdaeq	r0, {r1, r5, r7, r8, fp, sp}
    34d0:	080029aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, fp, sp}
    34d4:	00720005 	rsbseq	r0, r2, r5
    34d8:	aa9f2538 	bge	fe7cc9c0 <BootRAM+0xd73d161>
    34dc:	e6080029 	str	r0, [r8], -r9, lsr #32
    34e0:	01080029 	tsteq	r8, r9, lsr #32
    34e4:	00005200 	andeq	r5, r0, r0, lsl #4
    34e8:	00000000 	andeq	r0, r0, r0
    34ec:	299c0000 	ldmibcs	ip, {}	; <UNPREDICTABLE>
    34f0:	29a20800 	stmibcs	r2!, {fp}
    34f4:	00020800 	andeq	r0, r2, r0, lsl #16
    34f8:	29a29f30 	stmibcs	r2!, {r4, r5, r8, r9, sl, fp, ip, pc}
    34fc:	29b60800 	ldmibcs	r6!, {fp}
    3500:	00010800 	andeq	r0, r1, r0, lsl #16
    3504:	0029c853 	eoreq	ip, r9, r3, asr r8
    3508:	0029cc08 	eoreq	ip, r9, r8, lsl #24
    350c:	30000208 	andcc	r0, r0, r8, lsl #4
    3510:	0029cc9f 	mlaeq	r9, pc, ip, ip	; <UNPREDICTABLE>
    3514:	0029d408 	eoreq	sp, r9, r8, lsl #8
    3518:	73000808 	movwvc	r0, #2056	; 0x808
    351c:	1c009100 	stfned	f1, [r0], {-0}
    3520:	d49f6023 	ldrle	r6, [pc], #35	; 3528 <__Stack_Size+0x2d28>
    3524:	da080029 	ble	2035d0 <__Stack_Size+0x202dd0>
    3528:	08080029 	stmdaeq	r8, {r0, r3, r5}
    352c:	91007300 	mrsls	r7, LR_irq
    3530:	5f231c00 	svcpl	0x00231c00
    3534:	0029da9f 	mlaeq	r9, pc, sl, sp	; <UNPREDICTABLE>
    3538:	0029e008 	eoreq	lr, r9, r8
    353c:	73000808 	movwvc	r0, #2056	; 0x808
    3540:	1c009100 	stfned	f1, [r0], {-0}
    3544:	009f6023 	addseq	r6, pc, r3, lsr #32
    3548:	00000000 	andeq	r0, r0, r0
    354c:	e6000000 	str	r0, [r0], -r0
    3550:	32080029 	andcc	r0, r8, #41	; 0x29
    3554:	0108002a 	tsteq	r8, sl, lsr #32
    3558:	2a3e5300 	bcs	f98160 <__Stack_Size+0xf97960>
    355c:	2a600800 	bcs	1805564 <__Stack_Size+0x1804d64>
    3560:	00010800 	andeq	r0, r1, r0, lsl #16
    3564:	00000052 	andeq	r0, r0, r2, asr r0
    3568:	00000000 	andeq	r0, r0, r0
    356c:	0029e600 	eoreq	lr, r9, r0, lsl #12
    3570:	002a3e08 	eoreq	r3, sl, r8, lsl #28
    3574:	54000108 	strpl	r0, [r0], #-264	; 0x108
    3578:	08002a3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, fp, sp}
    357c:	08002a46 	stmdaeq	r0, {r1, r2, r6, r9, fp, sp}
    3580:	9f300002 	svcls	0x00300002
    3584:	08002a46 	stmdaeq	r0, {r1, r2, r6, r9, fp, sp}
    3588:	08002a4e 	stmdaeq	r0, {r1, r2, r3, r6, r9, fp, sp}
    358c:	00730009 	rsbseq	r0, r3, r9
    3590:	231c0091 	tstcs	ip, #145	; 0x91
    3594:	4e9f01a0 	fmlmi<illegal precision>p	f0, f7, f0
    3598:	5408002a 	strpl	r0, [r8], #-42	; 0x2a
    359c:	0908002a 	stmdbeq	r8, {r1, r3, r5}
    35a0:	91007300 	mrsls	r7, LR_irq
    35a4:	9f231c00 	svcls	0x00231c00
    35a8:	2a549f01 	bcs	152b1b4 <__Stack_Size+0x152a9b4>
    35ac:	2a5a0800 	bcs	16855b4 <__Stack_Size+0x1684db4>
    35b0:	00090800 	andeq	r0, r9, r0, lsl #16
    35b4:	00910073 	addseq	r0, r1, r3, ror r0
    35b8:	01a0231c 	lsleq	r2, ip, r3
    35bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    35c0:	00000000 	andeq	r0, r0, r0
    35c4:	0029e800 	eoreq	lr, r9, r0, lsl #16
    35c8:	0029ec08 	eoreq	lr, r9, r8, lsl #24
    35cc:	30000208 	andcc	r0, r0, r8, lsl #4
    35d0:	0029ec9f 	mlaeq	r9, pc, ip, lr	; <UNPREDICTABLE>
    35d4:	0029f608 	eoreq	pc, r9, r8, lsl #12
    35d8:	52000108 	andpl	r0, r0, #8, 2
    35dc:	080029f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, fp, sp}
    35e0:	080029fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, sp}
    35e4:	7f720003 	svcvc	0x00720003
    35e8:	0029fc9f 	mlaeq	r9, pc, ip, pc	; <UNPREDICTABLE>
    35ec:	002a0208 	eoreq	r0, sl, r8, lsl #4
    35f0:	52000108 	andpl	r0, r0, #8, 2
    35f4:	08002a02 	stmdaeq	r0, {r1, r9, fp, sp}
    35f8:	08002a0e 	stmdaeq	r0, {r1, r2, r3, r9, fp, sp}
    35fc:	01720003 	cmneq	r2, r3
    3600:	002a0e9f 	mlaeq	sl, pc, lr, r0	; <UNPREDICTABLE>
    3604:	002a1608 	eoreq	r1, sl, r8, lsl #12
    3608:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    360c:	1c009100 	stfned	f1, [r0], {-0}
    3610:	169f6123 	ldrne	r6, [pc], r3, lsr #2
    3614:	2008002a 	andcs	r0, r8, sl, lsr #32
    3618:	0808002a 	stmdaeq	r8, {r1, r3, r5}
    361c:	91007200 	mrsls	r7, R8_usr
    3620:	60231c00 	eorvs	r1, r3, r0, lsl #24
    3624:	002a209f 	mlaeq	sl, pc, r0, r2	; <UNPREDICTABLE>
    3628:	002a2208 	eoreq	r2, sl, r8, lsl #4
    362c:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    3630:	1c009100 	stfned	f1, [r0], {-0}
    3634:	009f6123 	addseq	r6, pc, r3, lsr #2
    3638:	00000000 	andeq	r0, r0, r0
    363c:	60000000 	andvs	r0, r0, r0
    3640:	ae08002a 	cdpge	0, 0, cr0, cr8, cr10, {1}
    3644:	0108002a 	tsteq	r8, sl, lsr #32
    3648:	2abe5300 	bcs	fef98250 <BootRAM+0xdf089f1>
    364c:	2ae80800 	bcs	ffa05654 <BootRAM+0xe975df5>
    3650:	00010800 	andeq	r0, r1, r0, lsl #16
    3654:	00000052 	andeq	r0, r0, r2, asr r0
    3658:	00000000 	andeq	r0, r0, r0
    365c:	002a6000 	eoreq	r6, sl, r0
    3660:	002abe08 	eoreq	fp, sl, r8, lsl #28
    3664:	54000108 	strpl	r0, [r0], #-264	; 0x108
    3668:	08002abe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, fp, sp}
    366c:	08002aca 	stmdaeq	r0, {r1, r3, r6, r7, r9, fp, sp}
    3670:	9f300002 	svcls	0x00300002
    3674:	08002aca 	stmdaeq	r0, {r1, r3, r6, r7, r9, fp, sp}
    3678:	08002ad2 	stmdaeq	r0, {r1, r4, r6, r7, r9, fp, sp}
    367c:	00730008 	rsbseq	r0, r3, r8
    3680:	231c0091 	tstcs	ip, #145	; 0x91
    3684:	2ad29f40 	bcs	ff4ab38c <BootRAM+0xe41bb2d>
    3688:	2ad80800 	bcs	ff605690 <BootRAM+0xe575e31>
    368c:	00080800 	andeq	r0, r8, r0, lsl #16
    3690:	00910073 	addseq	r0, r1, r3, ror r0
    3694:	9f3f231c 	svcls	0x003f231c
    3698:	08002ad8 	stmdaeq	r0, {r3, r4, r6, r7, r9, fp, sp}
    369c:	08002ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, sp}
    36a0:	00730008 	rsbseq	r0, r3, r8
    36a4:	231c0091 	tstcs	ip, #145	; 0x91
    36a8:	00009f40 	andeq	r9, r0, r0, asr #30
    36ac:	00000000 	andeq	r0, r0, r0
    36b0:	2a620000 	bcs	18836b8 <__Stack_Size+0x1882eb8>
    36b4:	2a660800 	bcs	19856bc <__Stack_Size+0x1984ebc>
    36b8:	00020800 	andeq	r0, r2, r0, lsl #16
    36bc:	2a669f30 	bcs	19ab384 <__Stack_Size+0x19aab84>
    36c0:	2a740800 	bcs	1d056c8 <__Stack_Size+0x1d04ec8>
    36c4:	00010800 	andeq	r0, r1, r0, lsl #16
    36c8:	002a7452 	eoreq	r7, sl, r2, asr r4
    36cc:	002a7a08 	eoreq	r7, sl, r8, lsl #20
    36d0:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    36d4:	2a7a9f7f 	bcs	1eab4d8 <__Stack_Size+0x1eaacd8>
    36d8:	2a800800 	bcs	fe0056e0 <BootRAM+0xcf75e81>
    36dc:	00010800 	andeq	r0, r1, r0, lsl #16
    36e0:	002a8052 	eoreq	r8, sl, r2, asr r0
    36e4:	002a8c08 	eoreq	r8, sl, r8, lsl #24
    36e8:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    36ec:	2a8c9f01 	bcs	fe32b2f8 <BootRAM+0xd29ba99>
    36f0:	2a940800 	bcs	fe5056f8 <BootRAM+0xd475e99>
    36f4:	00090800 	andeq	r0, r9, r0, lsl #16
    36f8:	00910072 	addseq	r0, r1, r2, ror r0
    36fc:	01a1231c 			; <UNDEFINED> instruction: 0x01a1231c
    3700:	002a949f 	mlaeq	sl, pc, r4, r9	; <UNPREDICTABLE>
    3704:	002a9e08 	eoreq	r9, sl, r8, lsl #28
    3708:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    370c:	1c009100 	stfned	f1, [r0], {-0}
    3710:	9f01a023 	svcls	0x0001a023
    3714:	08002a9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, fp, sp}
    3718:	08002aa0 	stmdaeq	r0, {r5, r7, r9, fp, sp}
    371c:	00720009 	rsbseq	r0, r2, r9
    3720:	231c0091 	tstcs	ip, #145	; 0x91
    3724:	009f01a1 	addseq	r0, pc, r1, lsr #3
    3728:	00000000 	andeq	r0, r0, r0
    372c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    3730:	ee08002a 	cdp	0, 0, cr0, cr8, cr10, {1}
    3734:	0208002a 	andeq	r0, r8, #42	; 0x2a
    3738:	ee9f3000 	cdp	0, 9, cr3, cr15, cr0, {0}
    373c:	4808002a 	stmdami	r8, {r1, r3, r5}
    3740:	0108002b 	tsteq	r8, fp, lsr #32
    3744:	2b545300 	blcs	151834c <__Stack_Size+0x1517b4c>
    3748:	2b720800 	blcs	1c85750 <__Stack_Size+0x1c84f50>
    374c:	00010800 	andeq	r0, r1, r0, lsl #16
    3750:	00000052 	andeq	r0, r0, r2, asr r0
    3754:	00000000 	andeq	r0, r0, r0
    3758:	002ae800 	eoreq	lr, sl, r0, lsl #16
    375c:	002aee08 	eoreq	lr, sl, r8, lsl #28
    3760:	30000208 	andcc	r0, r0, r8, lsl #4
    3764:	002aee9f 	mlaeq	sl, pc, lr, lr	; <UNPREDICTABLE>
    3768:	002b5408 	eoreq	r5, fp, r8, lsl #8
    376c:	59000108 	stmdbpl	r0, {r3, r8}
    3770:	08002b54 	stmdaeq	r0, {r2, r4, r6, r8, r9, fp, sp}
    3774:	08002b5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, fp, sp}
    3778:	9f300002 	svcls	0x00300002
    377c:	08002b5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, fp, sp}
    3780:	08002b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, sp}
    3784:	00730009 	rsbseq	r0, r3, r9
    3788:	231c0091 	tstcs	ip, #145	; 0x91
    378c:	649f01a0 	ldrvs	r0, [pc], #416	; 3794 <__Stack_Size+0x2f94>
    3790:	6a08002b 	bvs	203844 <__Stack_Size+0x203044>
    3794:	0908002b 	stmdbeq	r8, {r0, r1, r3, r5}
    3798:	91007300 	mrsls	r7, LR_irq
    379c:	9f231c00 	svcls	0x00231c00
    37a0:	2b6a9f01 	blcs	1aab3ac <__Stack_Size+0x1aaabac>
    37a4:	2b720800 	blcs	1c857ac <__Stack_Size+0x1c84fac>
    37a8:	00090800 	andeq	r0, r9, r0, lsl #16
    37ac:	00910073 	addseq	r0, r1, r3, ror r0
    37b0:	01a0231c 	lsleq	r2, ip, r3
    37b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    37b8:	00000000 	andeq	r0, r0, r0
    37bc:	002af000 	eoreq	pc, sl, r0
    37c0:	002af608 	eoreq	pc, sl, r8, lsl #12
    37c4:	30000208 	andcc	r0, r0, r8, lsl #4
    37c8:	002af69f 	mlaeq	sl, pc, r6, pc	; <UNPREDICTABLE>
    37cc:	002b0008 	eoreq	r0, fp, r8
    37d0:	52000108 	andpl	r0, r0, #8, 2
    37d4:	08002b00 	stmdaeq	r0, {r8, r9, fp, sp}
    37d8:	08002b06 	stmdaeq	r0, {r1, r2, r8, r9, fp, sp}
    37dc:	7f720003 	svcvc	0x00720003
    37e0:	002b069f 	mlaeq	fp, pc, r6, r0	; <UNPREDICTABLE>
    37e4:	002b0c08 	eoreq	r0, fp, r8, lsl #24
    37e8:	52000108 	andpl	r0, r0, #8, 2
    37ec:	08002b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, sp}
    37f0:	08002b1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, fp, sp}
    37f4:	01720003 	cmneq	r2, r3
    37f8:	002b1c9f 	mlaeq	fp, pc, ip, r1	; <UNPREDICTABLE>
    37fc:	002b2408 	eoreq	r2, fp, r8, lsl #8
    3800:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    3804:	1c009100 	stfned	f1, [r0], {-0}
    3808:	249f4123 	ldrcs	r4, [pc], #291	; 3810 <__Stack_Size+0x3010>
    380c:	2e08002b 	cdpcs	0, 0, cr0, cr8, cr11, {1}
    3810:	0808002b 	stmdaeq	r8, {r0, r1, r3, r5}
    3814:	91007200 	mrsls	r7, R8_usr
    3818:	40231c00 	eormi	r1, r3, r0, lsl #24
    381c:	002b2e9f 	mlaeq	fp, pc, lr, r2	; <UNPREDICTABLE>
    3820:	002b3008 	eoreq	r3, fp, r8
    3824:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    3828:	1c009100 	stfned	f1, [r0], {-0}
    382c:	009f4123 	addseq	r4, pc, r3, lsr #2
    3830:	00000000 	andeq	r0, r0, r0
    3834:	72000000 	andvc	r0, r0, #0
    3838:	cc08002b 	stcgt	0, cr0, [r8], {43}	; 0x2b
    383c:	0108002b 	tsteq	r8, fp, lsr #32
    3840:	2bd85300 	blcs	ff618448 <BootRAM+0xe588be9>
    3844:	2bf60800 	blcs	ffd8584c <BootRAM+0xecf5fed>
    3848:	00010800 	andeq	r0, r1, r0, lsl #16
    384c:	00000052 	andeq	r0, r0, r2, asr r0
    3850:	00000000 	andeq	r0, r0, r0
    3854:	002b7200 	eoreq	r7, fp, r0, lsl #4
    3858:	002bd808 	eoreq	sp, fp, r8, lsl #16
    385c:	59000108 	stmdbpl	r0, {r3, r8}
    3860:	08002bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, sp}
    3864:	08002bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp, sp}
    3868:	9f300002 	svcls	0x00300002
    386c:	08002bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp, sp}
    3870:	08002bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, sp}
    3874:	00730008 	rsbseq	r0, r3, r8
    3878:	231c0091 	tstcs	ip, #145	; 0x91
    387c:	2bec9f40 	blcs	ffb2b584 <BootRAM+0xea9bd25>
    3880:	2bf20800 	blcs	ffc85888 <BootRAM+0xebf6029>
    3884:	00080800 	andeq	r0, r8, r0, lsl #16
    3888:	00910073 	addseq	r0, r1, r3, ror r0
    388c:	9f3f231c 	svcls	0x003f231c
    3890:	08002bf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, fp, sp}
    3894:	08002c02 	stmdaeq	r0, {r1, sl, fp, sp}
    3898:	00730008 	rsbseq	r0, r3, r8
    389c:	231c0091 	tstcs	ip, #145	; 0x91
    38a0:	00009f40 	andeq	r9, r0, r0, asr #30
    38a4:	00000000 	andeq	r0, r0, r0
    38a8:	2b740000 	blcs	1d038b0 <__Stack_Size+0x1d030b0>
    38ac:	2b7a0800 	blcs	1e858b4 <__Stack_Size+0x1e850b4>
    38b0:	00020800 	andeq	r0, r2, r0, lsl #16
    38b4:	2b7a9f30 	blcs	1eab57c <__Stack_Size+0x1eaad7c>
    38b8:	2b880800 	blcs	fe2058c0 <BootRAM+0xd176061>
    38bc:	00010800 	andeq	r0, r1, r0, lsl #16
    38c0:	002b8852 	eoreq	r8, fp, r2, asr r8
    38c4:	002b8e08 	eoreq	r8, fp, r8, lsl #28
    38c8:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    38cc:	2b8e9f7f 	blcs	fe3ab6d0 <BootRAM+0xd31be71>
    38d0:	2b940800 	blcs	fe5058d8 <BootRAM+0xd476079>
    38d4:	00010800 	andeq	r0, r1, r0, lsl #16
    38d8:	002b9452 	eoreq	r9, fp, r2, asr r4
    38dc:	002ba408 	eoreq	sl, fp, r8, lsl #8
    38e0:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    38e4:	2ba49f01 	blcs	fe92b4f0 <BootRAM+0xd89bc91>
    38e8:	2bac0800 	blcs	feb058f0 <BootRAM+0xda76091>
    38ec:	00090800 	andeq	r0, r9, r0, lsl #16
    38f0:	00910072 	addseq	r0, r1, r2, ror r0
    38f4:	01a1231c 			; <UNDEFINED> instruction: 0x01a1231c
    38f8:	002bac9f 	mlaeq	fp, pc, ip, sl	; <UNPREDICTABLE>
    38fc:	002bb608 	eoreq	fp, fp, r8, lsl #12
    3900:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    3904:	1c009100 	stfned	f1, [r0], {-0}
    3908:	9f01a023 	svcls	0x0001a023
    390c:	08002bb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, fp, sp}
    3910:	08002bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, sp}
    3914:	00720009 	rsbseq	r0, r2, r9
    3918:	231c0091 	tstcs	ip, #145	; 0x91
    391c:	009f01a1 	addseq	r0, pc, r1, lsr #3
    3920:	00000000 	andeq	r0, r0, r0
    3924:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3928:	5808002c 	stmdapl	r8, {r2, r3, r5}
    392c:	0108002c 	tsteq	r8, ip, lsr #32
    3930:	2c645300 	stclcs	3, cr5, [r4], #-0
    3934:	2c840800 	stccs	8, cr0, [r4], {0}
    3938:	00010800 	andeq	r0, r1, r0, lsl #16
    393c:	00000052 	andeq	r0, r0, r2, asr r0
    3940:	00000000 	andeq	r0, r0, r0
    3944:	002c0800 	eoreq	r0, ip, r0, lsl #16
    3948:	002c6408 	eoreq	r6, ip, r8, lsl #8
    394c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    3950:	08002c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, sp}
    3954:	08002c6a 	stmdaeq	r0, {r1, r3, r5, r6, sl, fp, sp}
    3958:	9f300002 	svcls	0x00300002
    395c:	08002c6a 	stmdaeq	r0, {r1, r3, r5, r6, sl, fp, sp}
    3960:	08002c72 	stmdaeq	r0, {r1, r4, r5, r6, sl, fp, sp}
    3964:	00730009 	rsbseq	r0, r3, r9
    3968:	231c0091 	tstcs	ip, #145	; 0x91
    396c:	729f01a0 	addsvc	r0, pc, #160, 2	; 0x28
    3970:	7808002c 	stmdavc	r8, {r2, r3, r5}
    3974:	0908002c 	stmdbeq	r8, {r2, r3, r5}
    3978:	91007300 	mrsls	r7, LR_irq
    397c:	9f231c00 	svcls	0x00231c00
    3980:	2c789f01 	ldclcs	15, cr9, [r8], #-4
    3984:	2c7e0800 	ldclcs	8, cr0, [lr], #-0
    3988:	00090800 	andeq	r0, r9, r0, lsl #16
    398c:	00910073 	addseq	r0, r1, r3, ror r0
    3990:	01a0231c 	lsleq	r2, ip, r3
    3994:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3998:	00000000 	andeq	r0, r0, r0
    399c:	002c0a00 	eoreq	r0, ip, r0, lsl #20
    39a0:	002c0e08 	eoreq	r0, ip, r8, lsl #28
    39a4:	30000208 	andcc	r0, r0, r8, lsl #4
    39a8:	002c0e9f 	mlaeq	ip, pc, lr, r0	; <UNPREDICTABLE>
    39ac:	002c1808 	eoreq	r1, ip, r8, lsl #16
    39b0:	52000108 	andpl	r0, r0, #8, 2
    39b4:	08002c18 	stmdaeq	r0, {r3, r4, sl, fp, sp}
    39b8:	08002c1e 	stmdaeq	r0, {r1, r2, r3, r4, sl, fp, sp}
    39bc:	7f720003 	svcvc	0x00720003
    39c0:	002c1e9f 	mlaeq	ip, pc, lr, r1	; <UNPREDICTABLE>
    39c4:	002c2408 	eoreq	r2, ip, r8, lsl #8
    39c8:	52000108 	andpl	r0, r0, #8, 2
    39cc:	08002c24 	stmdaeq	r0, {r2, r5, sl, fp, sp}
    39d0:	08002c30 	stmdaeq	r0, {r4, r5, sl, fp, sp}
    39d4:	01720003 	cmneq	r2, r3
    39d8:	002c309f 	mlaeq	ip, pc, r0, r3	; <UNPREDICTABLE>
    39dc:	002c3808 	eoreq	r3, ip, r8, lsl #16
    39e0:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    39e4:	1c009100 	stfned	f1, [r0], {-0}
    39e8:	389f4123 	ldmcc	pc, {r0, r1, r5, r8, lr}	; <UNPREDICTABLE>
    39ec:	4208002c 	andmi	r0, r8, #44	; 0x2c
    39f0:	0808002c 	stmdaeq	r8, {r2, r3, r5}
    39f4:	91007200 	mrsls	r7, R8_usr
    39f8:	40231c00 	eormi	r1, r3, r0, lsl #24
    39fc:	002c429f 	mlaeq	ip, pc, r2, r4	; <UNPREDICTABLE>
    3a00:	002c4408 	eoreq	r4, ip, r8, lsl #8
    3a04:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    3a08:	1c009100 	stfned	f1, [r0], {-0}
    3a0c:	009f4123 	addseq	r4, pc, r3, lsr #2
    3a10:	00000000 	andeq	r0, r0, r0
    3a14:	84000000 	strhi	r0, [r0], #-0
    3a18:	d408002c 	strle	r0, [r8], #-44	; 0x2c
    3a1c:	0108002c 	tsteq	r8, ip, lsr #32
    3a20:	2ce05300 	stclcs	3, cr5, [r0]
    3a24:	2d020800 	stccs	8, cr0, [r2, #-0]
    3a28:	00010800 	andeq	r0, r1, r0, lsl #16
    3a2c:	00000052 	andeq	r0, r0, r2, asr r0
    3a30:	00000000 	andeq	r0, r0, r0
    3a34:	002c8400 	eoreq	r8, ip, r0, lsl #8
    3a38:	002ce008 	eoreq	lr, ip, r8
    3a3c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    3a40:	08002ce0 	stmdaeq	r0, {r5, r6, r7, sl, fp, sp}
    3a44:	08002ce6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, fp, sp}
    3a48:	9f300002 	svcls	0x00300002
    3a4c:	08002ce6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, fp, sp}
    3a50:	08002cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, sp}
    3a54:	00730008 	rsbseq	r0, r3, r8
    3a58:	231c0091 	tstcs	ip, #145	; 0x91
    3a5c:	2cf09f40 	ldclcs	15, cr9, [r0], #256	; 0x100
    3a60:	2cf60800 	ldclcs	8, cr0, [r6]
    3a64:	00080800 	andeq	r0, r8, r0, lsl #16
    3a68:	00910073 	addseq	r0, r1, r3, ror r0
    3a6c:	9f3f231c 	svcls	0x003f231c
    3a70:	08002cf6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, fp, sp}
    3a74:	08002cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp, sp}
    3a78:	00730008 	rsbseq	r0, r3, r8
    3a7c:	231c0091 	tstcs	ip, #145	; 0x91
    3a80:	00009f40 	andeq	r9, r0, r0, asr #30
    3a84:	00000000 	andeq	r0, r0, r0
    3a88:	2c880000 	stccs	0, cr0, [r8], {0}
    3a8c:	2c8c0800 	stccs	8, cr0, [ip], {0}
    3a90:	00020800 	andeq	r0, r2, r0, lsl #16
    3a94:	2c8c9f30 	stccs	15, cr9, [ip], {48}	; 0x30
    3a98:	2c9a0800 	ldccs	8, cr0, [sl], {0}
    3a9c:	00010800 	andeq	r0, r1, r0, lsl #16
    3aa0:	002c9a52 	eoreq	r9, ip, r2, asr sl
    3aa4:	002ca008 	eoreq	sl, ip, r8
    3aa8:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    3aac:	2ca09f7f 	stccs	15, cr9, [r0], #508	; 0x1fc
    3ab0:	2ca60800 	stccs	8, cr0, [r6]
    3ab4:	00010800 	andeq	r0, r1, r0, lsl #16
    3ab8:	002ca652 	eoreq	sl, ip, r2, asr r6
    3abc:	002cb208 	eoreq	fp, ip, r8, lsl #4
    3ac0:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    3ac4:	2cb29f01 	ldccs	15, cr9, [r2], #4
    3ac8:	2cba0800 	ldccs	8, cr0, [sl]
    3acc:	00090800 	andeq	r0, r9, r0, lsl #16
    3ad0:	00910072 	addseq	r0, r1, r2, ror r0
    3ad4:	01a1231c 			; <UNDEFINED> instruction: 0x01a1231c
    3ad8:	002cba9f 	mlaeq	ip, pc, sl, fp	; <UNPREDICTABLE>
    3adc:	002cc408 	eoreq	ip, ip, r8, lsl #8
    3ae0:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    3ae4:	1c009100 	stfned	f1, [r0], {-0}
    3ae8:	9f01a023 	svcls	0x0001a023
    3aec:	08002cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, sp}
    3af0:	08002cc6 	stmdaeq	r0, {r1, r2, r6, r7, sl, fp, sp}
    3af4:	00720009 	rsbseq	r0, r2, r9
    3af8:	231c0091 	tstcs	ip, #145	; 0x91
    3afc:	009f01a1 	addseq	r0, pc, r1, lsr #3
    3b00:	00000000 	andeq	r0, r0, r0
    3b04:	02000000 	andeq	r0, r0, #0
    3b08:	4e08002d 	cdpmi	0, 0, cr0, cr8, cr13, {1}
    3b0c:	0108002d 	tsteq	r8, sp, lsr #32
    3b10:	2d5a5300 	ldclcs	3, cr5, [sl, #-0]
    3b14:	2d7a0800 	ldclcs	8, cr0, [sl, #-0]
    3b18:	00010800 	andeq	r0, r1, r0, lsl #16
    3b1c:	00000052 	andeq	r0, r0, r2, asr r0
    3b20:	00000000 	andeq	r0, r0, r0
    3b24:	002d0200 	eoreq	r0, sp, r0, lsl #4
    3b28:	002d5a08 	eoreq	r5, sp, r8, lsl #20
    3b2c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    3b30:	08002d5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, fp, sp}
    3b34:	08002d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, sp}
    3b38:	9f300002 	svcls	0x00300002
    3b3c:	08002d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, sp}
    3b40:	08002d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, sp}
    3b44:	00730009 	rsbseq	r0, r3, r9
    3b48:	231c0091 	tstcs	ip, #145	; 0x91
    3b4c:	689f01a0 	ldmvs	pc, {r5, r7, r8}	; <UNPREDICTABLE>
    3b50:	6e08002d 	cdpvs	0, 0, cr0, cr8, cr13, {1}
    3b54:	0908002d 	stmdbeq	r8, {r0, r2, r3, r5}
    3b58:	91007300 	mrsls	r7, LR_irq
    3b5c:	9f231c00 	svcls	0x00231c00
    3b60:	2d6e9f01 	stclcs	15, cr9, [lr, #-4]!
    3b64:	2d740800 	ldclcs	8, cr0, [r4, #-0]
    3b68:	00090800 	andeq	r0, r9, r0, lsl #16
    3b6c:	00910073 	addseq	r0, r1, r3, ror r0
    3b70:	01a0231c 	lsleq	r2, ip, r3
    3b74:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b78:	00000000 	andeq	r0, r0, r0
    3b7c:	002d0400 	eoreq	r0, sp, r0, lsl #8
    3b80:	002d0808 	eoreq	r0, sp, r8, lsl #16
    3b84:	30000208 	andcc	r0, r0, r8, lsl #4
    3b88:	002d089f 	mlaeq	sp, pc, r8, r0	; <UNPREDICTABLE>
    3b8c:	002d1208 	eoreq	r1, sp, r8, lsl #4
    3b90:	52000108 	andpl	r0, r0, #8, 2
    3b94:	08002d12 	stmdaeq	r0, {r1, r4, r8, sl, fp, sp}
    3b98:	08002d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, sp}
    3b9c:	7f720003 	svcvc	0x00720003
    3ba0:	002d189f 	mlaeq	sp, pc, r8, r1	; <UNPREDICTABLE>
    3ba4:	002d1e08 	eoreq	r1, sp, r8, lsl #28
    3ba8:	52000108 	andpl	r0, r0, #8, 2
    3bac:	08002d1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, fp, sp}
    3bb0:	08002d2a 	stmdaeq	r0, {r1, r3, r5, r8, sl, fp, sp}
    3bb4:	01720003 	cmneq	r2, r3
    3bb8:	002d2a9f 	mlaeq	sp, pc, sl, r2	; <UNPREDICTABLE>
    3bbc:	002d3208 	eoreq	r3, sp, r8, lsl #4
    3bc0:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    3bc4:	1c009100 	stfned	f1, [r0], {-0}
    3bc8:	329f4123 	addscc	r4, pc, #-1073741816	; 0xc0000008
    3bcc:	3c08002d 	stccc	0, cr0, [r8], {45}	; 0x2d
    3bd0:	0808002d 	stmdaeq	r8, {r0, r2, r3, r5}
    3bd4:	91007200 	mrsls	r7, R8_usr
    3bd8:	40231c00 	eormi	r1, r3, r0, lsl #24
    3bdc:	002d3c9f 	mlaeq	sp, pc, ip, r3	; <UNPREDICTABLE>
    3be0:	002d3e08 	eoreq	r3, sp, r8, lsl #28
    3be4:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    3be8:	1c009100 	stfned	f1, [r0], {-0}
    3bec:	009f4123 	addseq	r4, pc, r3, lsr #2
    3bf0:	00000000 	andeq	r0, r0, r0
    3bf4:	7a000000 	bvc	3bfc <__Stack_Size+0x33fc>
    3bf8:	ca08002d 	bgt	203cb4 <__Stack_Size+0x2034b4>
    3bfc:	0108002d 	tsteq	r8, sp, lsr #32
    3c00:	2dda5300 	ldclcs	3, cr5, [sl]
    3c04:	2dfa0800 	ldclcs	8, cr0, [sl]
    3c08:	00010800 	andeq	r0, r1, r0, lsl #16
    3c0c:	00000052 	andeq	r0, r0, r2, asr r0
    3c10:	00000000 	andeq	r0, r0, r0
    3c14:	002d7a00 	eoreq	r7, sp, r0, lsl #20
    3c18:	002dda08 	eoreq	sp, sp, r8, lsl #20
    3c1c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    3c20:	08002dda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, fp, sp}
    3c24:	08002de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, sp}
    3c28:	9f300002 	svcls	0x00300002
    3c2c:	08002de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, sp}
    3c30:	08002de8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp, sp}
    3c34:	00730008 	rsbseq	r0, r3, r8
    3c38:	231c0091 	tstcs	ip, #145	; 0x91
    3c3c:	2de89f40 	stclcs	15, cr9, [r8, #256]!	; 0x100
    3c40:	2dee0800 	stclcs	8, cr0, [lr]
    3c44:	00080800 	andeq	r0, r8, r0, lsl #16
    3c48:	00910073 	addseq	r0, r1, r3, ror r0
    3c4c:	9f3f231c 	svcls	0x003f231c
    3c50:	08002dee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl, fp, sp}
    3c54:	08002df4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, fp, sp}
    3c58:	00730008 	rsbseq	r0, r3, r8
    3c5c:	231c0091 	tstcs	ip, #145	; 0x91
    3c60:	00009f40 	andeq	r9, r0, r0, asr #30
    3c64:	00000000 	andeq	r0, r0, r0
    3c68:	2d7e0000 	ldclcs	0, cr0, [lr, #-0]
    3c6c:	2d820800 	stccs	8, cr0, [r2]
    3c70:	00020800 	andeq	r0, r2, r0, lsl #16
    3c74:	2d829f30 	stccs	15, cr9, [r2, #192]	; 0xc0
    3c78:	2d900800 	ldccs	8, cr0, [r0]
    3c7c:	00010800 	andeq	r0, r1, r0, lsl #16
    3c80:	002d9052 	eoreq	r9, sp, r2, asr r0
    3c84:	002d9608 	eoreq	r9, sp, r8, lsl #12
    3c88:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    3c8c:	2d969f7f 	ldccs	15, cr9, [r6, #508]	; 0x1fc
    3c90:	2d9c0800 	ldccs	8, cr0, [ip]
    3c94:	00010800 	andeq	r0, r1, r0, lsl #16
    3c98:	002d9c52 	eoreq	r9, sp, r2, asr ip
    3c9c:	002da808 	eoreq	sl, sp, r8, lsl #16
    3ca0:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    3ca4:	2da89f01 	stccs	15, cr9, [r8, #4]!
    3ca8:	2db00800 	ldccs	8, cr0, [r0]
    3cac:	00090800 	andeq	r0, r9, r0, lsl #16
    3cb0:	00910072 	addseq	r0, r1, r2, ror r0
    3cb4:	01a1231c 			; <UNDEFINED> instruction: 0x01a1231c
    3cb8:	002db09f 	mlaeq	sp, pc, r0, fp	; <UNPREDICTABLE>
    3cbc:	002dba08 	eoreq	fp, sp, r8, lsl #20
    3cc0:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    3cc4:	1c009100 	stfned	f1, [r0], {-0}
    3cc8:	9f01a023 	svcls	0x0001a023
    3ccc:	08002dba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, sl, fp, sp}
    3cd0:	08002dbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, fp, sp}
    3cd4:	00720009 	rsbseq	r0, r2, r9
    3cd8:	231c0091 	tstcs	ip, #145	; 0x91
    3cdc:	009f01a1 	addseq	r0, pc, r1, lsr #3
    3ce0:	00000000 	andeq	r0, r0, r0
    3ce4:	fa000000 	blx	3cec <__Stack_Size+0x34ec>
    3ce8:	4408002d 	strmi	r0, [r8], #-45	; 0x2d
    3cec:	0108002e 	tsteq	r8, lr, lsr #32
    3cf0:	2e505300 	cdpcs	3, 5, cr5, cr0, cr0, {0}
    3cf4:	2e6a0800 	cdpcs	8, 6, cr0, cr10, cr0, {0}
    3cf8:	00010800 	andeq	r0, r1, r0, lsl #16
    3cfc:	00000052 	andeq	r0, r0, r2, asr r0
    3d00:	00000000 	andeq	r0, r0, r0
    3d04:	002dfa00 	eoreq	pc, sp, r0, lsl #20
    3d08:	002e5008 	eoreq	r5, lr, r8
    3d0c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    3d10:	08002e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, sp}
    3d14:	08002e56 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, fp, sp}
    3d18:	9f300002 	svcls	0x00300002
    3d1c:	08002e56 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, fp, sp}
    3d20:	08002e5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sl, fp, sp}
    3d24:	00730009 	rsbseq	r0, r3, r9
    3d28:	231c0091 	tstcs	ip, #145	; 0x91
    3d2c:	5e9f0180 	fmlpl<illegal precision>	f0, f7, f0
    3d30:	6408002e 	strvs	r0, [r8], #-46	; 0x2e
    3d34:	0808002e 	stmdaeq	r8, {r1, r2, r3, r5}
    3d38:	91007300 	mrsls	r7, LR_irq
    3d3c:	7f231c00 	svcvc	0x00231c00
    3d40:	002e649f 	mlaeq	lr, pc, r4, r6	; <UNPREDICTABLE>
    3d44:	002e6808 	eoreq	r6, lr, r8, lsl #16
    3d48:	73000908 	movwvc	r0, #2312	; 0x908
    3d4c:	1c009100 	stfned	f1, [r0], {-0}
    3d50:	9f018023 	svcls	0x00018023
	...
    3d5c:	08002dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp, sp}
    3d60:	08002e00 	stmdaeq	r0, {r9, sl, fp, sp}
    3d64:	9f300002 	svcls	0x00300002
    3d68:	08002e00 	stmdaeq	r0, {r9, sl, fp, sp}
    3d6c:	08002e0a 	stmdaeq	r0, {r1, r3, r9, sl, fp, sp}
    3d70:	0a520001 	beq	1483d7c <__Stack_Size+0x148357c>
    3d74:	1008002e 	andne	r0, r8, lr, lsr #32
    3d78:	0308002e 	movweq	r0, #32814	; 0x802e
    3d7c:	9f7f7200 	svcls	0x007f7200
    3d80:	08002e10 	stmdaeq	r0, {r4, r9, sl, fp, sp}
    3d84:	08002e16 	stmdaeq	r0, {r1, r2, r4, r9, sl, fp, sp}
    3d88:	16520001 	ldrbne	r0, [r2], -r1
    3d8c:	2208002e 	andcs	r0, r8, #46	; 0x2e
    3d90:	0308002e 	movweq	r0, #32814	; 0x802e
    3d94:	9f017200 	svcls	0x00017200
    3d98:	08002e22 	stmdaeq	r0, {r1, r5, r9, sl, fp, sp}
    3d9c:	08002e2a 	stmdaeq	r0, {r1, r3, r5, r9, sl, fp, sp}
    3da0:	00720008 	rsbseq	r0, r2, r8
    3da4:	231c0091 	tstcs	ip, #145	; 0x91
    3da8:	2e2a9f61 	cdpcs	15, 2, cr9, cr10, cr1, {3}
    3dac:	2e340800 	cdpcs	8, 3, cr0, cr4, cr0, {0}
    3db0:	00080800 	andeq	r0, r8, r0, lsl #16
    3db4:	00910072 	addseq	r0, r1, r2, ror r0
    3db8:	9f60231c 	svcls	0x0060231c
    3dbc:	08002e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, sp}
    3dc0:	08002e36 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, fp, sp}
    3dc4:	00720008 	rsbseq	r0, r2, r8
    3dc8:	231c0091 	tstcs	ip, #145	; 0x91
    3dcc:	00009f61 	andeq	r9, r0, r1, ror #30
    3dd0:	00000000 	andeq	r0, r0, r0
    3dd4:	2e660000 	cdpcs	0, 6, cr0, cr6, cr0, {0}
    3dd8:	2e6c0800 	cdpcs	8, 6, cr0, cr12, cr0, {0}
    3ddc:	00020800 	andeq	r0, r2, r0, lsl #16
    3de0:	2e6c9f33 	mcrcs	15, 3, r9, cr12, cr3, {1}
    3de4:	2fc40800 	svccs	0x00c40800
    3de8:	00020800 	andeq	r0, r2, r0, lsl #16
    3dec:	00009f34 	andeq	r9, r0, r4, lsr pc
    3df0:	00000000 	andeq	r0, r0, r0
    3df4:	2e7c0000 	cdpcs	0, 7, cr0, cr12, cr0, {0}
    3df8:	2ea20800 	cdpcs	8, 10, cr0, cr2, cr0, {0}
    3dfc:	00010800 	andeq	r0, r1, r0, lsl #16
    3e00:	002ea252 	eoreq	sl, lr, r2, asr r2
    3e04:	002eac08 	eoreq	sl, lr, r8, lsl #24
    3e08:	51000108 	tstpl	r0, r8, lsl #2
    3e0c:	08002eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, sp}
    3e10:	08002ed2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, fp, sp}
    3e14:	00520001 	subseq	r0, r2, r1
    3e18:	00000000 	andeq	r0, r0, r0
    3e1c:	7c000000 	stcvc	0, cr0, [r0], {-0}
    3e20:	8c08002e 	stchi	0, cr0, [r8], {46}	; 0x2e
    3e24:	0108002e 	tsteq	r8, lr, lsr #32
    3e28:	2e8c5300 	cdpcs	3, 8, cr5, cr12, cr0, {0}
    3e2c:	2e920800 	cdpcs	8, 9, cr0, cr2, cr0, {0}
    3e30:	00030800 	andeq	r0, r3, r0, lsl #16
    3e34:	929f7f73 	addsls	r7, pc, #460	; 0x1cc
    3e38:	9e08002e 	cdpls	0, 0, cr0, cr8, cr14, {1}
    3e3c:	0108002e 	tsteq	r8, lr, lsr #32
    3e40:	2eb45300 	cdpcs	3, 11, cr5, cr4, cr0, {0}
    3e44:	2ebc0800 	cdpcs	8, 11, cr0, cr12, cr0, {0}
    3e48:	00090800 	andeq	r0, r9, r0, lsl #16
    3e4c:	00910073 	addseq	r0, r1, r3, ror r0
    3e50:	0180231c 	orreq	r2, r0, ip, lsl r3
    3e54:	002ebc9f 	mlaeq	lr, pc, ip, fp	; <UNPREDICTABLE>
    3e58:	002ec208 	eoreq	ip, lr, r8, lsl #4
    3e5c:	73000808 	movwvc	r0, #2056	; 0x808
    3e60:	1c009100 	stfned	f1, [r0], {-0}
    3e64:	c29f7f23 	addsgt	r7, pc, #35, 30	; 0x8c
    3e68:	cc08002e 	stcgt	0, cr0, [r8], {46}	; 0x2e
    3e6c:	0908002e 	stmdbeq	r8, {r1, r2, r3, r5}
    3e70:	91007300 	mrsls	r7, LR_irq
    3e74:	80231c00 	eorhi	r1, r3, r0, lsl #24
    3e78:	00009f01 	andeq	r9, r0, r1, lsl #30
    3e7c:	00000000 	andeq	r0, r0, r0
    3e80:	2ed20000 	cdpcs	0, 13, cr0, cr2, cr0, {0}
    3e84:	2f220800 	svccs	0x00220800
    3e88:	00010800 	andeq	r0, r1, r0, lsl #16
    3e8c:	002f2e53 	eoreq	r2, pc, r3, asr lr	; <UNPREDICTABLE>
    3e90:	002f5008 	eoreq	r5, pc, r8
    3e94:	52000108 	andpl	r0, r0, #8, 2
	...
    3ea0:	08002ed2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, fp, sp}
    3ea4:	08002f2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, sl, fp, sp}
    3ea8:	2e540001 	cdpcs	0, 5, cr0, cr4, cr1, {0}
    3eac:	3408002f 	strcc	r0, [r8], #-47	; 0x2f
    3eb0:	0208002f 	andeq	r0, r8, #47	; 0x2f
    3eb4:	349f3000 	ldrcc	r3, [pc], #0	; 3ebc <__Stack_Size+0x36bc>
    3eb8:	3c08002f 	stccc	0, cr0, [r8], {47}	; 0x2f
    3ebc:	0808002f 	stmdaeq	r8, {r0, r1, r2, r3, r5}
    3ec0:	91007300 	mrsls	r7, LR_irq
    3ec4:	60231c00 	eorvs	r1, r3, r0, lsl #24
    3ec8:	002f3c9f 	mlaeq	pc, pc, ip, r3	; <UNPREDICTABLE>
    3ecc:	002f4208 	eoreq	r4, pc, r8, lsl #4
    3ed0:	73000808 	movwvc	r0, #2056	; 0x808
    3ed4:	1c009100 	stfned	f1, [r0], {-0}
    3ed8:	429f5f23 	addsmi	r5, pc, #35, 30	; 0x8c
    3edc:	4808002f 	stmdami	r8, {r0, r1, r2, r3, r5}
    3ee0:	0808002f 	stmdaeq	r8, {r0, r1, r2, r3, r5}
    3ee4:	91007300 	mrsls	r7, LR_irq
    3ee8:	60231c00 	eorvs	r1, r3, r0, lsl #24
    3eec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3ef0:	00000000 	andeq	r0, r0, r0
    3ef4:	002ed400 	eoreq	sp, lr, r0, lsl #8
    3ef8:	002eda08 	eoreq	sp, lr, r8, lsl #20
    3efc:	30000208 	andcc	r0, r0, r8, lsl #4
    3f00:	002eda9f 	mlaeq	lr, pc, sl, sp	; <UNPREDICTABLE>
    3f04:	002ee808 	eoreq	lr, lr, r8, lsl #16
    3f08:	52000108 	andpl	r0, r0, #8, 2
    3f0c:	08002ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, sp}
    3f10:	08002eee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, sl, fp, sp}
    3f14:	7f720003 	svcvc	0x00720003
    3f18:	002eee9f 	mlaeq	lr, pc, lr, lr	; <UNPREDICTABLE>
    3f1c:	002ef408 	eoreq	pc, lr, r8, lsl #8
    3f20:	52000108 	andpl	r0, r0, #8, 2
    3f24:	08002ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, sp}
    3f28:	08002f00 	stmdaeq	r0, {r8, r9, sl, fp, sp}
    3f2c:	01720003 	cmneq	r2, r3
    3f30:	002f009f 	mlaeq	pc, pc, r0, r0	; <UNPREDICTABLE>
    3f34:	002f0808 	eoreq	r0, pc, r8, lsl #16
    3f38:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    3f3c:	1c009100 	stfned	f1, [r0], {-0}
    3f40:	9f01a123 	svcls	0x0001a123
    3f44:	08002f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, sp}
    3f48:	08002f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp, sp}
    3f4c:	00720009 	rsbseq	r0, r2, r9
    3f50:	231c0091 	tstcs	ip, #145	; 0x91
    3f54:	129f01a0 	addsne	r0, pc, #160, 2	; 0x28
    3f58:	1408002f 	strne	r0, [r8], #-47	; 0x2f
    3f5c:	0908002f 	stmdbeq	r8, {r0, r1, r2, r3, r5}
    3f60:	91007200 	mrsls	r7, R8_usr
    3f64:	a1231c00 	teqge	r3, r0, lsl #24
    3f68:	00009f01 	andeq	r9, r0, r1, lsl #30
    3f6c:	00000000 	andeq	r0, r0, r0
    3f70:	2f500000 	svccs	0x00500000
    3f74:	2f960800 	svccs	0x00960800
    3f78:	00010800 	andeq	r0, r1, r0, lsl #16
    3f7c:	002fa053 	eoreq	sl, pc, r3, asr r0	; <UNPREDICTABLE>
    3f80:	002fc408 	eoreq	ip, pc, r8, lsl #8
    3f84:	52000108 	andpl	r0, r0, #8, 2
	...
    3f90:	08002f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, sp}
    3f94:	08002fa0 	stmdaeq	r0, {r5, r7, r8, r9, sl, fp, sp}
    3f98:	a0500001 	subsge	r0, r0, r1
    3f9c:	ac08002f 	stcge	0, cr0, [r8], {47}	; 0x2f
    3fa0:	0208002f 	andeq	r0, r8, #47	; 0x2f
    3fa4:	ac9f3000 	ldcge	0, cr3, [pc], {0}
    3fa8:	b408002f 	strlt	r0, [r8], #-47	; 0x2f
    3fac:	0108002f 	tsteq	r8, pc, lsr #32
    3fb0:	2fb45300 	svccs	0x00b45300
    3fb4:	2fba0800 	svccs	0x00ba0800
    3fb8:	00030800 	andeq	r0, r3, r0, lsl #16
    3fbc:	ba9f7f73 	blt	fe7e3d90 <BootRAM+0xd754531>
    3fc0:	c408002f 	strgt	r0, [r8], #-47	; 0x2f
    3fc4:	0108002f 	tsteq	r8, pc, lsr #32
    3fc8:	00005300 	andeq	r5, r0, r0, lsl #6
    3fcc:	00000000 	andeq	r0, r0, r0
    3fd0:	2f520000 	svccs	0x00520000
    3fd4:	2f560800 	svccs	0x00560800
    3fd8:	00020800 	andeq	r0, r2, r0, lsl #16
    3fdc:	2f569f30 	svccs	0x00569f30
    3fe0:	2f5e0800 	svccs	0x005e0800
    3fe4:	00010800 	andeq	r0, r1, r0, lsl #16
    3fe8:	002f5e52 	eoreq	r5, pc, r2, asr lr	; <UNPREDICTABLE>
    3fec:	002f6408 	eoreq	r6, pc, r8, lsl #8
    3ff0:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    3ff4:	2f649f7f 	svccs	0x00649f7f
    3ff8:	2f6a0800 	svccs	0x006a0800
    3ffc:	00010800 	andeq	r0, r1, r0, lsl #16
    4000:	002f6a52 	eoreq	r6, pc, r2, asr sl	; <UNPREDICTABLE>
    4004:	002f7608 	eoreq	r7, pc, r8, lsl #12
    4008:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    400c:	2f769f01 	svccs	0x00769f01
    4010:	2f7e0800 	svccs	0x007e0800
    4014:	00080800 	andeq	r0, r8, r0, lsl #16
    4018:	00910072 	addseq	r0, r1, r2, ror r0
    401c:	9f61231c 	svcls	0x0061231c
    4020:	08002f7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, sp}
    4024:	08002f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, sp}
    4028:	00720008 	rsbseq	r0, r2, r8
    402c:	231c0091 	tstcs	ip, #145	; 0x91
    4030:	2f889f60 	svccs	0x00889f60
    4034:	2f8a0800 	svccs	0x008a0800
    4038:	00080800 	andeq	r0, r8, r0, lsl #16
    403c:	00910072 	addseq	r0, r1, r2, ror r0
    4040:	9f61231c 	svcls	0x0061231c
	...
    4054:	00500001 	subseq	r0, r0, r1
    4058:	00000000 	andeq	r0, r0, r0
    405c:	03000000 	movweq	r0, #0
    4060:	9f7c7000 	svcls	0x007c7000
	...
    406c:	01f30004 	mvnseq	r0, r4
    4070:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    4080:	00010000 	andeq	r0, r1, r0
    4084:	00000051 	andeq	r0, r0, r1, asr r0
    4088:	00000000 	andeq	r0, r0, r0
    408c:	52000100 	andpl	r0, r0, #0, 2
	...
    4098:	00720005 	rsbseq	r0, r2, r5
    409c:	009f2538 	addseq	r2, pc, r8, lsr r5	; <UNPREDICTABLE>
    40a0:	00000000 	andeq	r0, r0, r0
    40a4:	07000000 	streq	r0, [r0, -r0]
    40a8:	38007200 	stmdacc	r0, {r9, ip, sp, lr}
    40ac:	9f253825 	svcls	0x00253825
	...
    40b8:	01f3000a 	mvnseq	r0, sl
    40bc:	38254051 	stmdacc	r5!, {r0, r4, r6, lr}
    40c0:	9f253825 	svcls	0x00253825
	...
    40d4:	9f300002 	svcls	0x00300002
	...
    40e0:	9f320002 	svcls	0x00320002
	...
    40ec:	9f330002 	svcls	0x00330002
	...
    40f8:	9f340002 	svcls	0x00340002
	...
    4104:	08002fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, sp}
    4108:	08003002 	stmdaeq	r0, {r1, ip, sp}
    410c:	02500001 	subseq	r0, r0, #1
    4110:	44080030 	strmi	r0, [r8], #-48	; 0x30
    4114:	01080031 	tsteq	r8, r1, lsr r0
    4118:	31445400 	cmpcc	r4, r0, lsl #8
    411c:	31500800 	cmpcc	r0, r0, lsl #16
    4120:	00010800 	andeq	r0, r1, r0, lsl #16
    4124:	00315050 	eorseq	r5, r1, r0, asr r0
    4128:	00315e08 	eorseq	r5, r1, r8, lsl #28
    412c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    4130:	0800315e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, ip, sp}
    4134:	08003164 	stmdaeq	r0, {r2, r5, r6, r8, ip, sp}
    4138:	00500001 	subseq	r0, r0, r1
    413c:	00000000 	andeq	r0, r0, r0
    4140:	c4000000 	strgt	r0, [r0], #-0
    4144:	0408002f 	streq	r0, [r8], #-47	; 0x2f
    4148:	01080030 	tsteq	r8, r0, lsr r0
    414c:	30045100 	andcc	r5, r4, r0, lsl #2
    4150:	31440800 	cmpcc	r4, r0, lsl #16
    4154:	00010800 	andeq	r0, r1, r0, lsl #16
    4158:	00314457 	eorseq	r4, r1, r7, asr r4
    415c:	00315008 	eorseq	r5, r1, r8
    4160:	51000108 	tstpl	r0, r8, lsl #2
    4164:	08003150 	stmdaeq	r0, {r4, r6, r8, ip, sp}
    4168:	0800315e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, ip, sp}
    416c:	5e570001 	cdppl	0, 5, cr0, cr7, cr1, {0}
    4170:	64080031 	strvs	r0, [r8], #-49	; 0x31
    4174:	01080031 	tsteq	r8, r1, lsr r0
    4178:	00005100 	andeq	r5, r0, r0, lsl #2
    417c:	00000000 	andeq	r0, r0, r0
    4180:	2fc40000 	svccs	0x00c40000
    4184:	2fd40800 	svccs	0x00d40800
    4188:	00010800 	andeq	r0, r1, r0, lsl #16
    418c:	002fd452 	eoreq	sp, pc, r2, asr r4	; <UNPREDICTABLE>
    4190:	0030bc08 	eorseq	fp, r0, r8, lsl #24
    4194:	59000108 	stmdbpl	r0, {r3, r8}
    4198:	080030bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, sp}
    419c:	080030d0 	stmdaeq	r0, {r4, r6, r7, ip, sp}
    41a0:	01790003 	cmneq	r9, r3
    41a4:	0030d09f 	mlaseq	r0, pc, r0, sp	; <UNPREDICTABLE>
    41a8:	00314408 	eorseq	r4, r1, r8, lsl #8
    41ac:	f3000408 	vshl.u8	d0, d8, d0
    41b0:	449f5201 	ldrmi	r5, [pc], #513	; 41b8 <__Stack_Size+0x39b8>
    41b4:	64080031 	strvs	r0, [r8], #-49	; 0x31
    41b8:	01080031 	tsteq	r8, r1, lsr r0
    41bc:	00005900 	andeq	r5, r0, r0, lsl #18
    41c0:	00000000 	andeq	r0, r0, r0
    41c4:	2fc40000 	svccs	0x00c40000
    41c8:	2fd60800 	svccs	0x00d60800
    41cc:	00010800 	andeq	r0, r1, r0, lsl #16
    41d0:	002fd653 	eoreq	sp, pc, r3, asr r6	; <UNPREDICTABLE>
    41d4:	00305a08 	eorseq	r5, r0, r8, lsl #20
    41d8:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    41dc:	0800305a 	stmdaeq	r0, {r1, r3, r4, r6, ip, sp}
    41e0:	0800309e 	stmdaeq	r0, {r1, r2, r3, r4, r7, ip, sp}
    41e4:	b4910003 	ldrlt	r0, [r1], #3
    41e8:	00309e7f 	eorseq	r9, r0, pc, ror lr
    41ec:	00314408 	eorseq	r4, r1, r8, lsl #8
    41f0:	f3000408 	vshl.u8	d0, d8, d0
    41f4:	449f5301 	ldrmi	r5, [pc], #769	; 41fc <__Stack_Size+0x39fc>
    41f8:	64080031 	strvs	r0, [r8], #-49	; 0x31
    41fc:	01080031 	tsteq	r8, r1, lsr r0
    4200:	00005500 	andeq	r5, r0, r0, lsl #10
    4204:	00000000 	andeq	r0, r0, r0
    4208:	30000000 	andcc	r0, r0, r0
    420c:	30c00800 	sbccc	r0, r0, r0, lsl #16
    4210:	00010800 	andeq	r0, r1, r0, lsl #16
    4214:	00315058 	eorseq	r5, r1, r8, asr r0
    4218:	00315e08 	eorseq	r5, r1, r8, lsl #28
    421c:	58000108 	stmdapl	r0, {r3, r8}
	...
    4228:	08003016 	stmdaeq	r0, {r1, r2, r4, ip, sp}
    422c:	080030c8 	stmdaeq	r0, {r3, r6, r7, ip, sp}
    4230:	50560001 	subspl	r0, r6, r1
    4234:	5e080031 	mcrpl	0, 0, r0, cr8, cr1, {1}
    4238:	01080031 	tsteq	r8, r1, lsr r0
    423c:	00005600 	andeq	r5, r0, r0, lsl #12
    4240:	00000000 	andeq	r0, r0, r0
    4244:	30160000 	andscc	r0, r6, r0
    4248:	30d40800 	sbcscc	r0, r4, r0, lsl #16
    424c:	00010800 	andeq	r0, r1, r0, lsl #16
    4250:	0030d45a 	eorseq	sp, r0, sl, asr r4
    4254:	0030d608 	eorseq	sp, r0, r8, lsl #12
    4258:	7a000308 	bvc	4e80 <__Stack_Size+0x4680>
    425c:	31509f01 	cmpcc	r0, r1, lsl #30
    4260:	315e0800 	cmpcc	lr, r0, lsl #16
    4264:	00010800 	andeq	r0, r1, r0, lsl #16
    4268:	0000005a 	andeq	r0, r0, sl, asr r0
    426c:	00000000 	andeq	r0, r0, r0
    4270:	00301600 	eorseq	r1, r0, r0, lsl #12
    4274:	00305a08 	eorseq	r5, r0, r8, lsl #20
    4278:	30000208 	andcc	r0, r0, r8, lsl #4
    427c:	00306e9f 	mlaseq	r0, pc, lr, r6	; <UNPREDICTABLE>
    4280:	00307a08 	eorseq	r7, r0, r8, lsl #20
    4284:	5b000108 	blpl	46ac <__Stack_Size+0x3eac>
    4288:	0800307a 	stmdaeq	r0, {r1, r3, r4, r5, r6, ip, sp}
    428c:	08003090 	stmdaeq	r0, {r4, r7, ip, sp}
    4290:	90530001 	subsls	r0, r3, r1
    4294:	9e080030 	mcrls	0, 0, r0, cr8, cr0, {1}
    4298:	09080030 	stmdbeq	r8, {r4, r5}
    429c:	32007800 	andcc	r7, r0, #0, 16
    42a0:	23243225 	teqcs	r4, #1342177282	; 0x50000002
    42a4:	30d09f02 	sbcscc	r9, r0, r2, lsl #30
    42a8:	30d40800 	sbcscc	r0, r4, r0, lsl #16
    42ac:	00030800 	andeq	r0, r3, r0, lsl #16
    42b0:	d49f7f7a 	ldrle	r7, [pc], #3962	; 42b8 <__Stack_Size+0x3ab8>
    42b4:	3c080030 	stccc	0, cr0, [r8], {48}	; 0x30
    42b8:	01080031 	tsteq	r8, r1, lsr r0
    42bc:	313c5a00 	teqcc	ip, r0, lsl #20
    42c0:	313e0800 	teqcc	lr, r0, lsl #16
    42c4:	00030800 	andeq	r0, r3, r0, lsl #16
    42c8:	509f017a 	addspl	r0, pc, sl, ror r1	; <UNPREDICTABLE>
    42cc:	52080031 	andpl	r0, r8, #49	; 0x31
    42d0:	02080031 	andeq	r0, r8, #49	; 0x31
    42d4:	529f3000 	addspl	r3, pc, #0
    42d8:	5e080031 	mcrpl	0, 0, r0, cr8, cr1, {1}
    42dc:	01080031 	tsteq	r8, r1, lsr r0
    42e0:	00005200 	andeq	r5, r0, r0, lsl #4
    42e4:	00000000 	andeq	r0, r0, r0
    42e8:	2fd20000 	svccs	0x00d20000
    42ec:	2fd60800 	svccs	0x00d60800
    42f0:	00010800 	andeq	r0, r1, r0, lsl #16
    42f4:	002fd653 	eoreq	sp, pc, r3, asr r6	; <UNPREDICTABLE>
    42f8:	00305a08 	eorseq	r5, r0, r8, lsl #20
    42fc:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    4300:	0800305a 	stmdaeq	r0, {r1, r3, r4, r6, ip, sp}
    4304:	0800309e 	stmdaeq	r0, {r1, r2, r3, r4, r7, ip, sp}
    4308:	b4910003 	ldrlt	r0, [r1], #3
    430c:	00309e7f 	eorseq	r9, r0, pc, ror lr
    4310:	00314408 	eorseq	r4, r1, r8, lsl #8
    4314:	f3000408 	vshl.u8	d0, d8, d0
    4318:	449f5301 	ldrmi	r5, [pc], #769	; 4320 <__Stack_Size+0x3b20>
    431c:	64080031 	strvs	r0, [r8], #-49	; 0x31
    4320:	01080031 	tsteq	r8, r1, lsr r0
    4324:	00005500 	andeq	r5, r0, r0, lsl #10
    4328:	00000000 	andeq	r0, r0, r0
    432c:	2fd20000 	svccs	0x00d20000
    4330:	2fd60800 	svccs	0x00d60800
    4334:	00020800 	andeq	r0, r2, r0, lsl #16
    4338:	2fd69f4f 	svccs	0x00d69f4f
    433c:	2fda0800 	svccs	0x00da0800
    4340:	00010800 	andeq	r0, r1, r0, lsl #16
    4344:	002fda52 	eoreq	sp, pc, r2, asr sl	; <UNPREDICTABLE>
    4348:	002fde08 	eoreq	sp, pc, r8, lsl #28
    434c:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    4350:	2fde9f01 	svccs	0x00de9f01
    4354:	2ff00800 	svccs	0x00f00800
    4358:	00010800 	andeq	r0, r1, r0, lsl #16
    435c:	00314452 	eorseq	r4, r1, r2, asr r4
    4360:	00314808 	eorseq	r4, r1, r8, lsl #16
    4364:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    4368:	31489f01 	cmpcc	r8, r1, lsl #30
    436c:	31500800 	cmpcc	r0, r0, lsl #16
    4370:	00030800 	andeq	r0, r3, r0, lsl #16
    4374:	5e9ff809 	cdppl	8, 9, cr15, cr15, cr9, {0}
    4378:	64080031 	strvs	r0, [r8], #-49	; 0x31
    437c:	03080031 	movweq	r0, #32817	; 0x8031
    4380:	9ff80900 	svcls	0x00f80900
	...
    438c:	08002fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, sp}
    4390:	08002fe6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, fp, sp}
    4394:	00750005 	rsbseq	r0, r5, r5
    4398:	e6220072 			; <UNDEFINED> instruction: 0xe6220072
    439c:	e808002f 	stmda	r8, {r0, r1, r2, r3, r5}
    43a0:	0508002f 	streq	r0, [r8, #-47]	; 0x2f
    43a4:	31007300 	mrscc	r7, LR_irq
    43a8:	31489f25 	cmpcc	r8, r5, lsr #30
    43ac:	31500800 	cmpcc	r0, r0, lsl #16
    43b0:	00020800 	andeq	r0, r2, r0, lsl #16
    43b4:	315e7f75 	cmpcc	lr, r5, ror pc
    43b8:	31640800 	cmncc	r4, r0, lsl #16
    43bc:	00020800 	andeq	r0, r2, r0, lsl #16
    43c0:	00007f75 	andeq	r7, r0, r5, ror pc
    43c4:	00000000 	andeq	r0, r0, r0
    43c8:	2ff40000 	svccs	0x00f40000
    43cc:	30120800 	andscc	r0, r2, r0, lsl #16
    43d0:	00010800 	andeq	r0, r1, r0, lsl #16
    43d4:	0030125a 	eorseq	r1, r0, sl, asr r2
    43d8:	0030bc08 	eorseq	fp, r0, r8, lsl #24
    43dc:	79000508 	stmdbvc	r0, {r3, r8, sl}
    43e0:	9f243300 	svcls	0x00243300
    43e4:	080030bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, sp}
    43e8:	080030d0 	stmdaeq	r0, {r4, r6, r7, ip, sp}
    43ec:	01790005 	cmneq	r9, r5
    43f0:	d09f2433 	addsle	r2, pc, r3, lsr r4	; <UNPREDICTABLE>
    43f4:	44080030 	strmi	r0, [r8], #-48	; 0x30
    43f8:	06080031 			; <UNDEFINED> instruction: 0x06080031
    43fc:	5201f300 	andpl	pc, r1, #0, 6
    4400:	509f2433 	addspl	r2, pc, r3, lsr r4	; <UNPREDICTABLE>
    4404:	5e080031 	mcrpl	0, 0, r0, cr8, cr1, {1}
    4408:	05080031 	streq	r0, [r8, #-49]	; 0x31
    440c:	33007900 	movwcc	r7, #2304	; 0x900
    4410:	00009f24 	andeq	r9, r0, r4, lsr #30
    4414:	00000000 	andeq	r0, r0, r0
    4418:	2ff40000 	svccs	0x00f40000
    441c:	30060800 	andcc	r0, r6, r0, lsl #16
    4420:	00010800 	andeq	r0, r1, r0, lsl #16
    4424:	00000052 	andeq	r0, r0, r2, asr r0
    4428:	00000000 	andeq	r0, r0, r0
    442c:	0030a400 	eorseq	sl, r0, r0, lsl #8
    4430:	0030aa08 	eorseq	sl, r0, r8, lsl #20
    4434:	52000108 	andpl	r0, r0, #8, 2
    4438:	080030ac 	stmdaeq	r0, {r2, r3, r5, r7, ip, sp}
    443c:	080030c4 	stmdaeq	r0, {r2, r6, r7, ip, sp}
    4440:	00520001 	subseq	r0, r2, r1
    4444:	00000000 	andeq	r0, r0, r0
    4448:	a4000000 	strge	r0, [r0], #-0
    444c:	b0080030 	andlt	r0, r8, r0, lsr r0
    4450:	01080030 	tsteq	r8, r0, lsr r0
    4454:	30b05300 	adcscc	r5, r0, r0, lsl #6
    4458:	30b60800 	adcscc	r0, r6, r0, lsl #16
    445c:	00030800 	andeq	r0, r3, r0, lsl #16
    4460:	b69f7f73 			; <UNDEFINED> instruction: 0xb69f7f73
    4464:	cc080030 	stcgt	0, cr0, [r8], {48}	; 0x30
    4468:	01080030 	tsteq	r8, r0, lsr r0
    446c:	00005300 	andeq	r5, r0, r0, lsl #6
    4470:	00000000 	andeq	r0, r0, r0
    4474:	30e80000 	rsccc	r0, r8, r0
    4478:	31060800 	tstcc	r6, r0, lsl #16
    447c:	00010800 	andeq	r0, r1, r0, lsl #16
    4480:	00000050 	andeq	r0, r0, r0, asr r0
    4484:	00000000 	andeq	r0, r0, r0
    4488:	0030e800 	eorseq	lr, r0, r0, lsl #16
    448c:	00313e08 	eorseq	r3, r1, r8, lsl #28
    4490:	31000208 	tstcc	r0, r8, lsl #4
    4494:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4498:	00000000 	andeq	r0, r0, r0
    449c:	0030e800 	eorseq	lr, r0, r0, lsl #16
    44a0:	0030ea08 	eorseq	lr, r0, r8, lsl #20
    44a4:	30000208 	andcc	r0, r0, r8, lsl #4
    44a8:	0030ea9f 	mlaseq	r0, pc, sl, lr	; <UNPREDICTABLE>
    44ac:	00310008 	eorseq	r0, r1, r8
    44b0:	52000108 	andpl	r0, r0, #8, 2
	...
    44bc:	080030e8 	stmdaeq	r0, {r3, r5, r6, r7, ip, sp}
    44c0:	080030ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, ip, sp}
    44c4:	9f300002 	svcls	0x00300002
    44c8:	080030ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, ip, sp}
    44cc:	080030f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, ip, sp}
    44d0:	f4530001 			; <UNDEFINED> instruction: 0xf4530001
    44d4:	fa080030 	blx	20459c <__Stack_Size+0x203d9c>
    44d8:	03080030 	movweq	r0, #32816	; 0x8030
    44dc:	9f7f7300 	svcls	0x007f7300
    44e0:	080030fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, ip, sp}
    44e4:	080030fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, ip, sp}
    44e8:	00530001 	subseq	r0, r3, r1
    44ec:	00000000 	andeq	r0, r0, r0
    44f0:	04000000 	streq	r0, [r0], #-0
    44f4:	3e080031 	mcrcc	0, 0, r0, cr8, cr1, {1}
    44f8:	01080031 	tsteq	r8, r1, lsr r0
    44fc:	00005400 	andeq	r5, r0, r0, lsl #8
    4500:	00000000 	andeq	r0, r0, r0
    4504:	31040000 	mrscc	r0, (UNDEF: 4)
    4508:	31060800 	tstcc	r6, r0, lsl #16
    450c:	00020800 	andeq	r0, r2, r0, lsl #16
    4510:	31069f30 	tstcc	r6, r0, lsr pc
    4514:	310e0800 	tstcc	lr, r0, lsl #16
    4518:	00010800 	andeq	r0, r1, r0, lsl #16
    451c:	00311052 	eorseq	r1, r1, r2, asr r0
    4520:	00312008 	eorseq	r2, r1, r8
    4524:	52000108 	andpl	r0, r0, #8, 2
    4528:	08003120 	stmdaeq	r0, {r5, r8, ip, sp}
    452c:	08003122 	stmdaeq	r0, {r1, r5, r8, ip, sp}
    4530:	00720004 	rsbseq	r0, r2, r4
    4534:	00009f1f 	andeq	r9, r0, pc, lsl pc
    4538:	00000000 	andeq	r0, r0, r0
    453c:	31040000 	mrscc	r0, (UNDEF: 4)
    4540:	31060800 	tstcc	r6, r0, lsl #16
    4544:	00020800 	andeq	r0, r2, r0, lsl #16
    4548:	31069f30 	tstcc	r6, r0, lsr pc
    454c:	31160800 	tstcc	r6, r0, lsl #16
    4550:	00010800 	andeq	r0, r1, r0, lsl #16
    4554:	00311653 	eorseq	r1, r1, r3, asr r6
    4558:	00311c08 	eorseq	r1, r1, r8, lsl #24
    455c:	73000308 	movwvc	r0, #776	; 0x308
    4560:	311c9f7f 	tstcc	ip, pc, ror pc
    4564:	31240800 	teqcc	r4, r0, lsl #16
    4568:	00010800 	andeq	r0, r1, r0, lsl #16
    456c:	00000053 	andeq	r0, r0, r3, asr r0
    4570:	00000000 	andeq	r0, r0, r0
    4574:	00311e00 	eorseq	r1, r1, r0, lsl #28
    4578:	00312008 	eorseq	r2, r1, r8
    457c:	52000108 	andpl	r0, r0, #8, 2
    4580:	08003120 	stmdaeq	r0, {r5, r8, ip, sp}
    4584:	08003122 	stmdaeq	r0, {r1, r5, r8, ip, sp}
    4588:	00720004 	rsbseq	r0, r2, r4
    458c:	00009f1f 	andeq	r9, r0, pc, lsl pc
    4590:	00000000 	andeq	r0, r0, r0
    4594:	311e0000 	tstcc	lr, r0
    4598:	313e0800 	teqcc	lr, r0, lsl #16
    459c:	00010800 	andeq	r0, r1, r0, lsl #16
    45a0:	0000005d 	andeq	r0, r0, sp, asr r0
    45a4:	00000000 	andeq	r0, r0, r0
    45a8:	00312200 	eorseq	r2, r1, r0, lsl #4
    45ac:	00313e08 	eorseq	r3, r1, r8, lsl #28
    45b0:	52000108 	andpl	r0, r0, #8, 2
	...
    45bc:	08003122 	stmdaeq	r0, {r1, r5, r8, ip, sp}
    45c0:	08003124 	stmdaeq	r0, {r2, r5, r8, ip, sp}
    45c4:	9f300002 	svcls	0x00300002
    45c8:	08003124 	stmdaeq	r0, {r2, r5, r8, ip, sp}
    45cc:	0800313e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, ip, sp}
    45d0:	00530001 	subseq	r0, r3, r1
	...
    45e0:	01000000 	mrseq	r0, (UNDEF: 0)
    45e4:	00005000 	andeq	r5, r0, r0
    45e8:	00000000 	andeq	r0, r0, r0
    45ec:	00010000 	andeq	r0, r1, r0
    45f0:	00000051 	andeq	r0, r0, r1, asr r0
    45f4:	00000000 	andeq	r0, r0, r0
    45f8:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    460c:	00510001 	subseq	r0, r1, r1
    4610:	00000000 	andeq	r0, r0, r0
    4614:	01000000 	mrseq	r0, (UNDEF: 0)
    4618:	00005300 	andeq	r5, r0, r0, lsl #6
    461c:	00000000 	andeq	r0, r0, r0
    4620:	00040000 	andeq	r0, r4, r0
    4624:	9f5101f3 	svcls	0x005101f3
	...
    4638:	005d0001 	subseq	r0, sp, r1
    463c:	00000000 	andeq	r0, r0, r0
    4640:	03000000 	movweq	r0, #0
    4644:	9f607400 	svcls	0x00607400
	...
    4658:	00500001 	subseq	r0, r0, r1
    465c:	00000000 	andeq	r0, r0, r0
    4660:	04000000 	streq	r0, [r0], #-0
    4664:	5001f300 	andpl	pc, r1, r0, lsl #6
    4668:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    466c:	00000000 	andeq	r0, r0, r0
    4670:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4684:	00510001 	subseq	r0, r1, r1
    4688:	00000000 	andeq	r0, r0, r0
    468c:	04000000 	streq	r0, [r0], #-0
    4690:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4694:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4698:	00000000 	andeq	r0, r0, r0
    469c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    46b0:	9f300002 	svcls	0x00300002
	...
    46bc:	00520001 	subseq	r0, r2, r1
    46c0:	00000000 	andeq	r0, r0, r0
    46c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    46c8:	31007200 	mrscc	r7, R8_usr
    46cc:	21007225 	tstcs	r0, r5, lsr #4
    46d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    46d4:	00000000 	andeq	r0, r0, r0
    46d8:	30000200 	andcc	r0, r0, r0, lsl #4
    46dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    46e0:	00000000 	andeq	r0, r0, r0
    46e4:	52000100 	andpl	r0, r0, #0, 2
	...
    46f8:	9f300002 	svcls	0x00300002
	...
    4704:	9f300002 	svcls	0x00300002
	...
    4710:	00530001 	subseq	r0, r3, r1
    4714:	00000000 	andeq	r0, r0, r0
    4718:	03000000 	movweq	r0, #0
    471c:	9f7f7300 	svcls	0x007f7300
	...
    4728:	00530001 	subseq	r0, r3, r1
	...
    4738:	01000000 	mrseq	r0, (UNDEF: 0)
    473c:	00005100 	andeq	r5, r0, r0, lsl #2
    4740:	00000000 	andeq	r0, r0, r0
    4744:	00040000 	andeq	r0, r4, r0
    4748:	9f5101f3 	svcls	0x005101f3
	...
    4754:	00510001 	subseq	r0, r1, r1
	...
    4764:	01000000 	mrseq	r0, (UNDEF: 0)
    4768:	00005200 	andeq	r5, r0, r0, lsl #4
    476c:	00000000 	andeq	r0, r0, r0
    4770:	00040000 	andeq	r0, r4, r0
    4774:	9f5201f3 	svcls	0x005201f3
	...
    4780:	00520001 	subseq	r0, r2, r1
	...
    4790:	01000000 	mrseq	r0, (UNDEF: 0)
    4794:	00005300 	andeq	r5, r0, r0, lsl #6
    4798:	00000000 	andeq	r0, r0, r0
    479c:	00040000 	andeq	r0, r4, r0
    47a0:	9f5301f3 	svcls	0x005301f3
	...
    47b4:	00530001 	subseq	r0, r3, r1
    47b8:	00000000 	andeq	r0, r0, r0
    47bc:	01000000 	mrseq	r0, (UNDEF: 0)
    47c0:	00005600 	andeq	r5, r0, r0, lsl #12
    47c4:	00000000 	andeq	r0, r0, r0
    47c8:	00010000 	andeq	r0, r1, r0
    47cc:	00000056 	andeq	r0, r0, r6, asr r0
	...
    47dc:	30000200 	andcc	r0, r0, r0, lsl #4
    47e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    47e4:	00000000 	andeq	r0, r0, r0
    47e8:	30000200 	andcc	r0, r0, r0, lsl #4
    47ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    47f0:	00000000 	andeq	r0, r0, r0
    47f4:	53000100 	movwpl	r0, #256	; 0x100
	...
    4808:	00510001 	subseq	r0, r1, r1
    480c:	00000000 	andeq	r0, r0, r0
    4810:	04000000 	streq	r0, [r0], #-0
    4814:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4818:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4828:	52000100 	andpl	r0, r0, #0, 2
	...
    4834:	01f30004 	mvnseq	r0, r4
    4838:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    4848:	00010000 	andeq	r0, r1, r0
    484c:	00000051 	andeq	r0, r0, r1, asr r0
    4850:	00000000 	andeq	r0, r0, r0
    4854:	f3000400 	vshl.u8	d0, d0, d0
    4858:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    4868:	02000000 	andeq	r0, r0, #0
    486c:	009f3000 	addseq	r3, pc, r0
    4870:	00000000 	andeq	r0, r0, r0
    4874:	01000000 	mrseq	r0, (UNDEF: 0)
    4878:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    4888:	00020000 	andeq	r0, r2, r0
    488c:	00009f30 	andeq	r9, r0, r0, lsr pc
    4890:	00000000 	andeq	r0, r0, r0
    4894:	00010000 	andeq	r0, r1, r0
    4898:	00000053 	andeq	r0, r0, r3, asr r0
    489c:	00000000 	andeq	r0, r0, r0
    48a0:	73000300 	movwvc	r0, #768	; 0x300
    48a4:	00009f7f 	andeq	r9, r0, pc, ror pc
    48a8:	00000000 	andeq	r0, r0, r0
    48ac:	00010000 	andeq	r0, r1, r0
    48b0:	00000053 	andeq	r0, r0, r3, asr r0
	...
    48c0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    48cc:	00510001 	subseq	r0, r1, r1
    48d0:	00000000 	andeq	r0, r0, r0
    48d4:	04000000 	streq	r0, [r0], #-0
    48d8:	1f007100 	svcne	0x00007100
    48dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    48ec:	53000100 	movwpl	r0, #256	; 0x100
	...
    48f8:	7f730003 	svcvc	0x00730003
    48fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4900:	00000000 	andeq	r0, r0, r0
    4904:	53000100 	movwpl	r0, #256	; 0x100
	...
    4918:	00510001 	subseq	r0, r1, r1
    491c:	00000000 	andeq	r0, r0, r0
    4920:	04000000 	streq	r0, [r0], #-0
    4924:	1f007100 	svcne	0x00007100
    4928:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4938:	5d000100 	stfpls	f0, [r0, #-0]
	...
    4944:	50910003 	addspl	r0, r1, r3
    4948:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    494c:	00000000 	andeq	r0, r0, r0
    4950:	7d000300 	stcvc	3, cr0, [r0, #-0]
    4954:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    4964:	00020000 	andeq	r0, r2, r0
    4968:	00009f30 	andeq	r9, r0, r0, lsr pc
    496c:	00000000 	andeq	r0, r0, r0
    4970:	00010000 	andeq	r0, r1, r0
    4974:	00000053 	andeq	r0, r0, r3, asr r0
	...
    4984:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4990:	01f30004 	mvnseq	r0, r4
    4994:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    49a4:	00010000 	andeq	r0, r1, r0
    49a8:	00000052 	andeq	r0, r0, r2, asr r0
    49ac:	00000000 	andeq	r0, r0, r0
    49b0:	f3000400 	vshl.u8	d0, d0, d0
    49b4:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    49c4:	01000000 	mrseq	r0, (UNDEF: 0)
    49c8:	00005200 	andeq	r5, r0, r0, lsl #4
    49cc:	00000000 	andeq	r0, r0, r0
    49d0:	00040000 	andeq	r0, r4, r0
    49d4:	9f5201f3 	svcls	0x005201f3
	...
    49e8:	9f300002 	svcls	0x00300002
	...
    49f4:	00540001 	subseq	r0, r4, r1
	...
    4a04:	02000000 	andeq	r0, r0, #0
    4a08:	009f3000 	addseq	r3, pc, r0
    4a0c:	00000000 	andeq	r0, r0, r0
    4a10:	01000000 	mrseq	r0, (UNDEF: 0)
    4a14:	00005300 	andeq	r5, r0, r0, lsl #6
    4a18:	00000000 	andeq	r0, r0, r0
    4a1c:	00030000 	andeq	r0, r3, r0
    4a20:	009f7f73 	addseq	r7, pc, r3, ror pc	; <UNPREDICTABLE>
    4a24:	00000000 	andeq	r0, r0, r0
    4a28:	01000000 	mrseq	r0, (UNDEF: 0)
    4a2c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    4a3c:	00010000 	andeq	r0, r1, r0
    4a40:	00000054 	andeq	r0, r0, r4, asr r0
    4a44:	00000000 	andeq	r0, r0, r0
    4a48:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    4a54:	00740004 	rsbseq	r0, r4, r4
    4a58:	00009f1f 	andeq	r9, r0, pc, lsl pc
	...
    4a68:	00010000 	andeq	r0, r1, r0
    4a6c:	00000053 	andeq	r0, r0, r3, asr r0
    4a70:	00000000 	andeq	r0, r0, r0
    4a74:	73000300 	movwvc	r0, #768	; 0x300
    4a78:	00009f7f 	andeq	r9, r0, pc, ror pc
    4a7c:	00000000 	andeq	r0, r0, r0
    4a80:	00010000 	andeq	r0, r1, r0
    4a84:	00000053 	andeq	r0, r0, r3, asr r0
	...
    4a94:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    4aa0:	00740004 	rsbseq	r0, r4, r4
    4aa4:	00009f1f 	andeq	r9, r0, pc, lsl pc
	...
    4ab4:	00010000 	andeq	r0, r1, r0
    4ab8:	0000005d 	andeq	r0, r0, sp, asr r0
    4abc:	00000000 	andeq	r0, r0, r0
    4ac0:	91000300 	mrsls	r0, LR_irq
    4ac4:	00009f50 	andeq	r9, r0, r0, asr pc
    4ac8:	00000000 	andeq	r0, r0, r0
    4acc:	00030000 	andeq	r0, r3, r0
    4ad0:	009f507d 	addseq	r5, pc, sp, ror r0	; <UNPREDICTABLE>
	...
    4ae0:	01000000 	mrseq	r0, (UNDEF: 0)
    4ae4:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    4af4:	00020000 	andeq	r0, r2, r0
    4af8:	00009f30 	andeq	r9, r0, r0, lsr pc
    4afc:	00000000 	andeq	r0, r0, r0
    4b00:	00010000 	andeq	r0, r1, r0
    4b04:	00000053 	andeq	r0, r0, r3, asr r0
	...
    4b14:	52000100 	andpl	r0, r0, #0, 2
	...
    4b20:	01f30004 	mvnseq	r0, r4
    4b24:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    4b34:	00020000 	andeq	r0, r2, r0
    4b38:	00009f30 	andeq	r9, r0, r0, lsr pc
    4b3c:	00000000 	andeq	r0, r0, r0
    4b40:	00010000 	andeq	r0, r1, r0
    4b44:	00000051 	andeq	r0, r0, r1, asr r0
    4b48:	00000000 	andeq	r0, r0, r0
    4b4c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4b58:	00710004 	rsbseq	r0, r1, r4
    4b5c:	00009f1f 	andeq	r9, r0, pc, lsl pc
	...
    4b6c:	00020000 	andeq	r0, r2, r0
    4b70:	00009f30 	andeq	r9, r0, r0, lsr pc
    4b74:	00000000 	andeq	r0, r0, r0
    4b78:	00010000 	andeq	r0, r1, r0
    4b7c:	00000053 	andeq	r0, r0, r3, asr r0
    4b80:	00000000 	andeq	r0, r0, r0
    4b84:	73000300 	movwvc	r0, #768	; 0x300
    4b88:	00009f7f 	andeq	r9, r0, pc, ror pc
    4b8c:	00000000 	andeq	r0, r0, r0
    4b90:	00010000 	andeq	r0, r1, r0
    4b94:	00000053 	andeq	r0, r0, r3, asr r0
	...
    4ba4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4bb0:	00710004 	rsbseq	r0, r1, r4
    4bb4:	00009f1f 	andeq	r9, r0, pc, lsl pc
	...
    4bc4:	00010000 	andeq	r0, r1, r0
    4bc8:	0000005d 	andeq	r0, r0, sp, asr r0
    4bcc:	00000000 	andeq	r0, r0, r0
    4bd0:	91000300 	mrsls	r0, LR_irq
    4bd4:	00009f50 	andeq	r9, r0, r0, asr pc
    4bd8:	00000000 	andeq	r0, r0, r0
    4bdc:	00030000 	andeq	r0, r3, r0
    4be0:	009f507d 	addseq	r5, pc, sp, ror r0	; <UNPREDICTABLE>
	...
    4bf0:	02000000 	andeq	r0, r0, #0
    4bf4:	009f3000 	addseq	r3, pc, r0
    4bf8:	00000000 	andeq	r0, r0, r0
    4bfc:	01000000 	mrseq	r0, (UNDEF: 0)
    4c00:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    4c10:	00010000 	andeq	r0, r1, r0
    4c14:	00000050 	andeq	r0, r0, r0, asr r0
    4c18:	00000000 	andeq	r0, r0, r0
    4c1c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    4c30:	00510001 	subseq	r0, r1, r1
    4c34:	00000000 	andeq	r0, r0, r0
    4c38:	01000000 	mrseq	r0, (UNDEF: 0)
    4c3c:	00005800 	andeq	r5, r0, r0, lsl #16
	...
    4c4c:	00010000 	andeq	r0, r1, r0
    4c50:	00000052 	andeq	r0, r0, r2, asr r0
    4c54:	00000000 	andeq	r0, r0, r0
    4c58:	5a000100 	bpl	5060 <__Stack_Size+0x4860>
	...
    4c6c:	00530001 	subseq	r0, r3, r1
    4c70:	00000000 	andeq	r0, r0, r0
    4c74:	01000000 	mrseq	r0, (UNDEF: 0)
    4c78:	00005700 	andeq	r5, r0, r0, lsl #14
	...
    4c88:	00030000 	andeq	r0, r3, r0
    4c8c:	009f7f72 	addseq	r7, pc, r2, ror pc	; <UNPREDICTABLE>
    4c90:	00000000 	andeq	r0, r0, r0
    4c94:	01000000 	mrseq	r0, (UNDEF: 0)
    4c98:	00005c00 	andeq	r5, r0, r0, lsl #24
    4c9c:	00000000 	andeq	r0, r0, r0
    4ca0:	00030000 	andeq	r0, r3, r0
    4ca4:	009f017c 	addseq	r0, pc, ip, ror r1	; <UNPREDICTABLE>
	...
    4cb4:	02000000 	andeq	r0, r0, #0
    4cb8:	009f4f00 	addseq	r4, pc, r0, lsl #30
    4cbc:	00000000 	andeq	r0, r0, r0
    4cc0:	01000000 	mrseq	r0, (UNDEF: 0)
    4cc4:	00005200 	andeq	r5, r0, r0, lsl #4
    4cc8:	00000000 	andeq	r0, r0, r0
    4ccc:	00030000 	andeq	r0, r3, r0
    4cd0:	009f0172 	addseq	r0, pc, r2, ror r1	; <UNPREDICTABLE>
    4cd4:	00000000 	andeq	r0, r0, r0
    4cd8:	01000000 	mrseq	r0, (UNDEF: 0)
    4cdc:	00005200 	andeq	r5, r0, r0, lsl #4
    4ce0:	00000000 	andeq	r0, r0, r0
    4ce4:	00030000 	andeq	r0, r3, r0
    4ce8:	009f0172 	addseq	r0, pc, r2, ror r1	; <UNPREDICTABLE>
    4cec:	00000000 	andeq	r0, r0, r0
    4cf0:	03000000 	movweq	r0, #0
    4cf4:	9ff80900 	svcls	0x00f80900
	...
    4d08:	00770005 	rsbseq	r0, r7, r5
    4d0c:	00220072 	eoreq	r0, r2, r2, ror r0
    4d10:	00000000 	andeq	r0, r0, r0
    4d14:	05000000 	streq	r0, [r0, #-0]
    4d18:	31007300 	mrscc	r7, LR_irq
    4d1c:	00009f25 	andeq	r9, r0, r5, lsr #30
    4d20:	00000000 	andeq	r0, r0, r0
    4d24:	00020000 	andeq	r0, r2, r0
    4d28:	00007f77 	andeq	r7, r0, r7, ror pc
	...
    4d38:	00010000 	andeq	r0, r1, r0
    4d3c:	00000059 	andeq	r0, r0, r9, asr r0
    4d40:	00000000 	andeq	r0, r0, r0
    4d44:	79000400 	stmdbvc	r0, {sl}
    4d48:	009f1f00 	addseq	r1, pc, r0, lsl #30
	...
    4d58:	02000000 	andeq	r0, r0, #0
    4d5c:	009f3100 	addseq	r3, pc, r0, lsl #2
	...
    4d6c:	02000000 	andeq	r0, r0, #0
    4d70:	009f3000 	addseq	r3, pc, r0
    4d74:	00000000 	andeq	r0, r0, r0
    4d78:	01000000 	mrseq	r0, (UNDEF: 0)
    4d7c:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    4d8c:	00020000 	andeq	r0, r2, r0
    4d90:	00009f30 	andeq	r9, r0, r0, lsr pc
    4d94:	00000000 	andeq	r0, r0, r0
    4d98:	00010000 	andeq	r0, r1, r0
    4d9c:	00000053 	andeq	r0, r0, r3, asr r0
    4da0:	00000000 	andeq	r0, r0, r0
    4da4:	73000300 	movwvc	r0, #768	; 0x300
    4da8:	00009f7f 	andeq	r9, r0, pc, ror pc
    4dac:	00000000 	andeq	r0, r0, r0
    4db0:	00010000 	andeq	r0, r1, r0
    4db4:	00000053 	andeq	r0, r0, r3, asr r0
	...
    4dc4:	52000100 	andpl	r0, r0, #0, 2
	...
    4dd0:	00520001 	subseq	r0, r2, r1
    4dd4:	00000000 	andeq	r0, r0, r0
    4dd8:	04000000 	streq	r0, [r0], #-0
    4ddc:	1f007200 	svcne	0x00007200
    4de0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4df0:	53000100 	movwpl	r0, #256	; 0x100
	...
    4dfc:	7f730003 	svcvc	0x00730003
    4e00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4e04:	00000000 	andeq	r0, r0, r0
    4e08:	53000100 	movwpl	r0, #256	; 0x100
	...
    4e1c:	00520001 	subseq	r0, r2, r1
    4e20:	00000000 	andeq	r0, r0, r0
    4e24:	04000000 	streq	r0, [r0], #-0
    4e28:	1f007200 	svcne	0x00007200
    4e2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4e3c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    4e50:	00520001 	subseq	r0, r2, r1
	...
    4e60:	02000000 	andeq	r0, r0, #0
    4e64:	009f3000 	addseq	r3, pc, r0
    4e68:	00000000 	andeq	r0, r0, r0
    4e6c:	01000000 	mrseq	r0, (UNDEF: 0)
    4e70:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    4e80:	00010000 	andeq	r0, r1, r0
    4e84:	00000055 	andeq	r0, r0, r5, asr r0
	...
    4e94:	5d000100 	stfpls	f0, [r0, #-0]
	...
    4ea8:	005d0001 	subseq	r0, sp, r1
	...
    4eb8:	02000000 	andeq	r0, r0, #0
    4ebc:	009f3000 	addseq	r3, pc, r0
    4ec0:	00000000 	andeq	r0, r0, r0
    4ec4:	01000000 	mrseq	r0, (UNDEF: 0)
    4ec8:	00005b00 	andeq	r5, r0, r0, lsl #22
    4ecc:	00000000 	andeq	r0, r0, r0
    4ed0:	00010000 	andeq	r0, r1, r0
    4ed4:	00000053 	andeq	r0, r0, r3, asr r0
    4ed8:	00000000 	andeq	r0, r0, r0
    4edc:	5b000100 	blpl	52e4 <__Stack_Size+0x4ae4>
	...
    4ef0:	9f300002 	svcls	0x00300002
	...
    4efc:	00540001 	subseq	r0, r4, r1
    4f00:	00000000 	andeq	r0, r0, r0
    4f04:	03000000 	movweq	r0, #0
    4f08:	9f7f7400 	svcls	0x007f7400
	...
    4f14:	00540001 	subseq	r0, r4, r1
	...
    4f24:	01000000 	mrseq	r0, (UNDEF: 0)
    4f28:	00005300 	andeq	r5, r0, r0, lsl #6
    4f2c:	00000000 	andeq	r0, r0, r0
    4f30:	00010000 	andeq	r0, r1, r0
    4f34:	00000053 	andeq	r0, r0, r3, asr r0
    4f38:	00000000 	andeq	r0, r0, r0
    4f3c:	73000400 	movwvc	r0, #1024	; 0x400
    4f40:	009f1f00 	addseq	r1, pc, r0, lsl #30
	...
    4f50:	01000000 	mrseq	r0, (UNDEF: 0)
    4f54:	00005400 	andeq	r5, r0, r0, lsl #8
    4f58:	00000000 	andeq	r0, r0, r0
    4f5c:	00030000 	andeq	r0, r3, r0
    4f60:	009f7f74 	addseq	r7, pc, r4, ror pc	; <UNPREDICTABLE>
    4f64:	00000000 	andeq	r0, r0, r0
    4f68:	01000000 	mrseq	r0, (UNDEF: 0)
    4f6c:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    4f7c:	00010000 	andeq	r0, r1, r0
    4f80:	00000053 	andeq	r0, r0, r3, asr r0
    4f84:	00000000 	andeq	r0, r0, r0
    4f88:	73000400 	movwvc	r0, #1024	; 0x400
    4f8c:	009f1f00 	addseq	r1, pc, r0, lsl #30
	...
    4f9c:	01000000 	mrseq	r0, (UNDEF: 0)
    4fa0:	00005d00 	andeq	r5, r0, r0, lsl #26
	...
    4fb0:	00010000 	andeq	r0, r1, r0
    4fb4:	00000056 	andeq	r0, r0, r6, asr r0
	...
    4fc4:	53000100 	movwpl	r0, #256	; 0x100
	...
    4fd8:	9f300002 	svcls	0x00300002
	...
    4fe4:	00520001 	subseq	r0, r2, r1
	...
    4ff4:	01000000 	mrseq	r0, (UNDEF: 0)
    4ff8:	00005900 	andeq	r5, r0, r0, lsl #18
    4ffc:	00000000 	andeq	r0, r0, r0
    5000:	00040000 	andeq	r0, r4, r0
    5004:	9f1f0079 	svcls	0x001f0079
	...
    5018:	005d0001 	subseq	r0, sp, r1
	...
    5028:	01000000 	mrseq	r0, (UNDEF: 0)
    502c:	00005900 	andeq	r5, r0, r0, lsl #18
	...
    503c:	00020000 	andeq	r0, r2, r0
    5040:	00009f30 	andeq	r9, r0, r0, lsr pc
    5044:	00000000 	andeq	r0, r0, r0
    5048:	00010000 	andeq	r0, r1, r0
    504c:	00000053 	andeq	r0, r0, r3, asr r0
	...
    505c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    5068:	00560001 	subseq	r0, r6, r1
	...
    5078:	01000000 	mrseq	r0, (UNDEF: 0)
    507c:	00005100 	andeq	r5, r0, r0, lsl #2
    5080:	00000000 	andeq	r0, r0, r0
    5084:	00010000 	andeq	r0, r1, r0
    5088:	00000058 	andeq	r0, r0, r8, asr r0
	...
    5098:	52000100 	andpl	r0, r0, #0, 2
	...
    50a4:	00570001 	subseq	r0, r7, r1
	...
    50b4:	02000000 	andeq	r0, r0, #0
    50b8:	009f3200 	addseq	r3, pc, r0, lsl #4
    50bc:	00000000 	andeq	r0, r0, r0
    50c0:	01000000 	mrseq	r0, (UNDEF: 0)
    50c4:	00005500 	andeq	r5, r0, r0, lsl #10
    50c8:	00000000 	andeq	r0, r0, r0
    50cc:	00010000 	andeq	r0, r1, r0
    50d0:	00000055 	andeq	r0, r0, r5, asr r0
    50d4:	00000000 	andeq	r0, r0, r0
    50d8:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    50ec:	9f300002 	svcls	0x00300002
	...
    50f8:	00540001 	subseq	r0, r4, r1
    50fc:	00000000 	andeq	r0, r0, r0
    5100:	03000000 	movweq	r0, #0
    5104:	9f7f7400 	svcls	0x007f7400
	...
    5110:	00540001 	subseq	r0, r4, r1
    5114:	00000000 	andeq	r0, r0, r0
    5118:	03000000 	movweq	r0, #0
    511c:	9f7f7500 	svcls	0x007f7500
	...
    5128:	00550001 	subseq	r0, r5, r1
    512c:	00000000 	andeq	r0, r0, r0
    5130:	03000000 	movweq	r0, #0
    5134:	9f017500 	svcls	0x00017500
	...
    5140:	00550001 	subseq	r0, r5, r1
    5144:	00000000 	andeq	r0, r0, r0
    5148:	03000000 	movweq	r0, #0
    514c:	9f017500 	svcls	0x00017500
	...
    5158:	00540001 	subseq	r0, r4, r1
	...
    5168:	01000000 	mrseq	r0, (UNDEF: 0)
    516c:	00005200 	andeq	r5, r0, r0, lsl #4
    5170:	00000000 	andeq	r0, r0, r0
    5174:	00010000 	andeq	r0, r1, r0
    5178:	00000057 	andeq	r0, r0, r7, asr r0
	...
    5188:	5d000100 	stfpls	f0, [r0, #-0]
	...
    5194:	a8910004 	ldmge	r1, {r2}
    5198:	00009f7f 	andeq	r9, r0, pc, ror pc
    519c:	00000000 	andeq	r0, r0, r0
    51a0:	00010000 	andeq	r0, r1, r0
    51a4:	0000005d 	andeq	r0, r0, sp, asr r0
	...
    51b4:	31000200 	mrscc	r0, R8_usr
    51b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    51bc:	00000000 	andeq	r0, r0, r0
    51c0:	30000200 	andcc	r0, r0, r0, lsl #4
    51c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    51d4:	30000200 	andcc	r0, r0, r0, lsl #4
    51d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    51dc:	00000000 	andeq	r0, r0, r0
    51e0:	31000200 	mrscc	r0, R8_usr
    51e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    51e8:	00000000 	andeq	r0, r0, r0
    51ec:	32000200 	andcc	r0, r0, #0, 4
    51f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    51f4:	00000000 	andeq	r0, r0, r0
    51f8:	33000200 	movwcc	r0, #512	; 0x200
    51fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5200:	00000000 	andeq	r0, r0, r0
    5204:	34000200 	strcc	r0, [r0], #-512	; 0x200
    5208:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5218:	52000100 	andpl	r0, r0, #0, 2
	...
    5224:	01720003 	cmneq	r2, r3
    5228:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    522c:	00000000 	andeq	r0, r0, r0
    5230:	52000100 	andpl	r0, r0, #0, 2
	...
    523c:	00550001 	subseq	r0, r5, r1
    5240:	00000000 	andeq	r0, r0, r0
    5244:	03000000 	movweq	r0, #0
    5248:	9f017500 	svcls	0x00017500
	...
    5254:	01720003 	cmneq	r2, r3
    5258:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    525c:	00000000 	andeq	r0, r0, r0
    5260:	09000300 	stmdbeq	r0, {r8, r9}
    5264:	00009ff8 	strdeq	r9, [r0], -r8
	...
    5274:	00050000 	andeq	r0, r5, r0
    5278:	00720077 	rsbseq	r0, r2, r7, ror r0
    527c:	00000022 	andeq	r0, r0, r2, lsr #32
    5280:	00000000 	andeq	r0, r0, r0
    5284:	73000500 	movwvc	r0, #1280	; 0x500
    5288:	9f253100 	svcls	0x00253100
	...
    5294:	7f770002 	svcvc	0x00770002
	...
    52a8:	48910003 	ldmmi	r1, {r0, r1}
    52ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    52b0:	00000000 	andeq	r0, r0, r0
    52b4:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    52c0:	70740003 	rsbsvc	r0, r4, r3
    52c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    52c8:	00000000 	andeq	r0, r0, r0
    52cc:	74000300 	strvc	r0, [r0], #-768	; 0x300
    52d0:	00009f60 	andeq	r9, r0, r0, ror #30
    52d4:	00000000 	andeq	r0, r0, r0
    52d8:	00030000 	andeq	r0, r3, r0
    52dc:	009f4891 	umullseq	r4, pc, r1, r8	; <UNPREDICTABLE>
    52e0:	00000000 	andeq	r0, r0, r0
    52e4:	01000000 	mrseq	r0, (UNDEF: 0)
    52e8:	00005100 	andeq	r5, r0, r0, lsl #2
    52ec:	00000000 	andeq	r0, r0, r0
    52f0:	00030000 	andeq	r0, r3, r0
    52f4:	009f4891 	umullseq	r4, pc, r1, r8	; <UNPREDICTABLE>
	...
    5304:	01000000 	mrseq	r0, (UNDEF: 0)
    5308:	00005600 	andeq	r5, r0, r0, lsl #12
    530c:	00000000 	andeq	r0, r0, r0
    5310:	00010000 	andeq	r0, r1, r0
    5314:	00000056 	andeq	r0, r0, r6, asr r0
	...
    5324:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    5330:	00540001 	subseq	r0, r4, r1
    5334:	00000000 	andeq	r0, r0, r0
    5338:	04000000 	streq	r0, [r0], #-0
    533c:	5001f300 	andpl	pc, r1, r0, lsl #6
    5340:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5350:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    535c:	00520001 	subseq	r0, r2, r1
    5360:	00000000 	andeq	r0, r0, r0
    5364:	01000000 	mrseq	r0, (UNDEF: 0)
    5368:	00005500 	andeq	r5, r0, r0, lsl #10
    536c:	00000000 	andeq	r0, r0, r0
    5370:	00040000 	andeq	r0, r4, r0
    5374:	9f5101f3 	svcls	0x005101f3
	...
    5388:	00500001 	subseq	r0, r0, r1
    538c:	00000000 	andeq	r0, r0, r0
    5390:	01000000 	mrseq	r0, (UNDEF: 0)
    5394:	00005500 	andeq	r5, r0, r0, lsl #10
    5398:	00000000 	andeq	r0, r0, r0
    539c:	00040000 	andeq	r0, r4, r0
    53a0:	9f5001f3 	svcls	0x005001f3
	...
    53b4:	00510001 	subseq	r0, r1, r1
    53b8:	00000000 	andeq	r0, r0, r0
    53bc:	01000000 	mrseq	r0, (UNDEF: 0)
    53c0:	00005400 	andeq	r5, r0, r0, lsl #8
    53c4:	00000000 	andeq	r0, r0, r0
    53c8:	00040000 	andeq	r0, r4, r0
    53cc:	9f5101f3 	svcls	0x005101f3
	...
    53e0:	00520001 	subseq	r0, r2, r1
    53e4:	00000000 	andeq	r0, r0, r0
    53e8:	01000000 	mrseq	r0, (UNDEF: 0)
    53ec:	00005700 	andeq	r5, r0, r0, lsl #14
    53f0:	00000000 	andeq	r0, r0, r0
    53f4:	00040000 	andeq	r0, r4, r0
    53f8:	9f5201f3 	svcls	0x005201f3
	...
    540c:	00530001 	subseq	r0, r3, r1
    5410:	00000000 	andeq	r0, r0, r0
    5414:	01000000 	mrseq	r0, (UNDEF: 0)
    5418:	00005800 	andeq	r5, r0, r0, lsl #16
    541c:	00000000 	andeq	r0, r0, r0
    5420:	00040000 	andeq	r0, r4, r0
    5424:	9f5301f3 	svcls	0x005301f3
	...
    5438:	00520001 	subseq	r0, r2, r1
    543c:	00000000 	andeq	r0, r0, r0
    5440:	01000000 	mrseq	r0, (UNDEF: 0)
    5444:	00005700 	andeq	r5, r0, r0, lsl #14
    5448:	00000000 	andeq	r0, r0, r0
    544c:	00040000 	andeq	r0, r4, r0
    5450:	9f5201f3 	svcls	0x005201f3
	...
    5464:	00510001 	subseq	r0, r1, r1
    5468:	00000000 	andeq	r0, r0, r0
    546c:	01000000 	mrseq	r0, (UNDEF: 0)
    5470:	00005400 	andeq	r5, r0, r0, lsl #8
    5474:	00000000 	andeq	r0, r0, r0
    5478:	00040000 	andeq	r0, r4, r0
    547c:	9f5101f3 	svcls	0x005101f3
	...
    5490:	00580001 	subseq	r0, r8, r1
    5494:	00000000 	andeq	r0, r0, r0
    5498:	04000000 	streq	r0, [r0], #-0
    549c:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    54a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    54b0:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    54bc:	01f30004 	mvnseq	r0, r4
    54c0:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    54d0:	00010000 	andeq	r0, r1, r0
    54d4:	00000055 	andeq	r0, r0, r5, asr r0
    54d8:	00000000 	andeq	r0, r0, r0
    54dc:	f3000400 	vshl.u8	d0, d0, d0
    54e0:	009f5001 	addseq	r5, pc, r1
    54e4:	00000000 	andeq	r0, r0, r0
    54e8:	bc000000 	stclt	0, cr0, [r0], {-0}
    54ec:	c8080031 	stmdagt	r8, {r0, r4, r5}
    54f0:	01080031 	tsteq	r8, r1, lsr r0
    54f4:	31c85000 	biccc	r5, r8, r0
    54f8:	31d20800 	bicscc	r0, r2, r0, lsl #16
    54fc:	00010800 	andeq	r0, r1, r0, lsl #16
    5500:	0031d252 	eorseq	sp, r1, r2, asr r2
    5504:	0031d408 	eorseq	sp, r1, r8, lsl #8
    5508:	53000108 	movwpl	r0, #264	; 0x108
    550c:	080031d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, ip, sp}
    5510:	080031dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, ip, sp}
    5514:	dc540001 	mrrcle	0, 0, r0, r4, cr1
    5518:	e4080031 	str	r0, [r8], #-49	; 0x31
    551c:	01080031 	tsteq	r8, r1, lsr r0
    5520:	31e45000 	mvncc	r5, r0
    5524:	51080800 	tstpl	r8, r0, lsl #16
    5528:	00020800 	andeq	r0, r2, r0, lsl #16
    552c:	51085491 			; <UNDEFINED> instruction: 0x51085491
    5530:	51200800 	teqpl	r0, r0, lsl #16
    5534:	00020800 	andeq	r0, r2, r0, lsl #16
    5538:	0000547d 	andeq	r5, r0, sp, ror r4
    553c:	00000000 	andeq	r0, r0, r0
    5540:	31bc0000 			; <UNDEFINED> instruction: 0x31bc0000
    5544:	38fc0800 	ldmcc	ip!, {fp}^
    5548:	00010800 	andeq	r0, r1, r0, lsl #16
    554c:	0038fc51 	eorseq	pc, r8, r1, asr ip	; <UNPREDICTABLE>
    5550:	00512008 	subseq	r2, r1, r8
    5554:	f3000408 	vshl.u8	d0, d8, d0
    5558:	009f5101 	addseq	r5, pc, r1, lsl #2
    555c:	00000000 	andeq	r0, r0, r0
    5560:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    5564:	40080039 	andmi	r0, r8, r9, lsr r0
    5568:	01080039 	tsteq	r8, r9, lsr r0
    556c:	39725a00 	ldmdbcc	r2!, {r9, fp, ip, lr}^
    5570:	39aa0800 	stmibcc	sl!, {fp}
    5574:	00010800 	andeq	r0, r1, r0, lsl #16
    5578:	0039da5c 	eorseq	sp, r9, ip, asr sl
    557c:	003a2a08 	eorseq	r2, sl, r8, lsl #20
    5580:	50000108 	andpl	r0, r0, r8, lsl #2
    5584:	08003a52 	stmdaeq	r0, {r1, r4, r6, r9, fp, ip, sp}
    5588:	08003a9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, fp, ip, sp}
    558c:	c8520001 	ldmdagt	r2, {r0}^
    5590:	1c08003a 	stcne	0, cr0, [r8], {58}	; 0x3a
    5594:	0108003b 	tsteq	r8, fp, lsr r0
    5598:	3b385300 	blcc	e1a1a0 <__Stack_Size+0xe199a0>
    559c:	3ba20800 	blcc	fe8875a4 <BootRAM+0xd7f7d45>
    55a0:	00010800 	andeq	r0, r1, r0, lsl #16
    55a4:	003bac50 	eorseq	sl, fp, r0, asr ip
    55a8:	003bf608 	eorseq	pc, fp, r8, lsl #12
    55ac:	5c000108 	stfpls	f0, [r0], {8}
    55b0:	08003c24 	stmdaeq	r0, {r2, r5, sl, fp, ip, sp}
    55b4:	08003c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip, sp}
    55b8:	a8560001 	ldmdage	r6, {r0}^
    55bc:	dc08003c 	stcle	0, cr0, [r8], {60}	; 0x3c
    55c0:	0108003c 	tsteq	r8, ip, lsr r0
    55c4:	3d325700 	ldccc	7, cr5, [r2, #-0]
    55c8:	3d800800 	stccc	8, cr0, [r0]
    55cc:	00010800 	andeq	r0, r1, r0, lsl #16
    55d0:	003db259 	eorseq	fp, sp, r9, asr r2
    55d4:	003dfa08 	eorseq	pc, sp, r8, lsl #20
    55d8:	58000108 	stmdapl	r0, {r3, r8}
    55dc:	08003e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, ip, sp}
    55e0:	08003e5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sl, fp, ip, sp}
    55e4:	aa570001 	bge	15c55f0 <__Stack_Size+0x15c4df0>
    55e8:	c008003e 	andgt	r0, r8, lr, lsr r0
    55ec:	0108003e 	tsteq	r8, lr, lsr r0
    55f0:	3f1a5800 	svccc	0x001a5800
    55f4:	3f440800 	svccc	0x00440800
    55f8:	00010800 	andeq	r0, r1, r0, lsl #16
    55fc:	003f9257 	eorseq	r9, pc, r7, asr r2	; <UNPREDICTABLE>
    5600:	003fb208 	eorseq	fp, pc, r8, lsl #4
    5604:	50000108 	andpl	r0, r0, r8, lsl #2
    5608:	08004002 	stmdaeq	r0, {r1, lr}
    560c:	08004022 	stmdaeq	r0, {r1, r5, lr}
    5610:	74520001 	ldrbvc	r0, [r2], #-1
    5614:	90080040 	andls	r0, r8, r0, asr #32
    5618:	01080040 	tsteq	r8, r0, asr #32
    561c:	40de5300 	sbcsmi	r5, lr, r0, lsl #6
    5620:	41020800 	tstmi	r2, r0, lsl #16
    5624:	00010800 	andeq	r0, r1, r0, lsl #16
    5628:	00417652 	subeq	r7, r1, r2, asr r6
    562c:	0041a208 	subeq	sl, r1, r8, lsl #4
    5630:	53000108 	movwpl	r0, #264	; 0x108
    5634:	080041ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, lr}
    5638:	0800420a 	stmdaeq	r0, {r1, r3, r9, lr}
    563c:	60520001 	subsvs	r0, r2, r1
    5640:	74080042 	strvc	r0, [r8], #-66	; 0x42
    5644:	01080042 	tsteq	r8, r2, asr #32
    5648:	42d05300 	sbcsmi	r5, r0, #0, 6
    564c:	42fa0800 	rscsmi	r0, sl, #0, 16
    5650:	00010800 	andeq	r0, r1, r0, lsl #16
    5654:	00434a59 	subeq	r4, r3, r9, asr sl
    5658:	00437808 	subeq	r7, r3, r8, lsl #16
    565c:	5c000108 	stfpls	f0, [r0], {8}
    5660:	080043a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, lr}
    5664:	080043ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, lr}
    5668:	3e580001 	cdpcc	0, 5, cr0, cr8, cr1, {0}
    566c:	72080044 	andvc	r0, r8, #68	; 0x44
    5670:	01080044 	tsteq	r8, r4, asr #32
    5674:	44ba5a00 	ldrtmi	r5, [sl], #2560	; 0xa00
    5678:	44dc0800 	ldrbmi	r0, [ip], #2048	; 0x800
    567c:	00010800 	andeq	r0, r1, r0, lsl #16
    5680:	0045285c 	subeq	r2, r5, ip, asr r8
    5684:	00454e08 	subeq	r4, r5, r8, lsl #28
    5688:	5a000108 	bpl	5ab0 <__Stack_Size+0x52b0>
    568c:	080045cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, lr}
    5690:	080045ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl, lr}
    5694:	44540001 	ldrbmi	r0, [r4], #-1
    5698:	64080046 	strvs	r0, [r8], #-70	; 0x46
    569c:	01080046 	tsteq	r8, r6, asr #32
    56a0:	46b85100 	ldrtmi	r5, [r8], r0, lsl #2
    56a4:	46d80800 	ldrbmi	r0, [r8], r0, lsl #16
    56a8:	00010800 	andeq	r0, r1, r0, lsl #16
    56ac:	00472857 	subeq	r2, r7, r7, asr r8
    56b0:	00474808 	subeq	r4, r7, r8, lsl #16
    56b4:	53000108 	movwpl	r0, #264	; 0x108
    56b8:	0800479e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl, lr}
    56bc:	080047b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, lr}
    56c0:	10570001 	subsne	r0, r7, r1
    56c4:	30080048 	andcc	r0, r8, r8, asr #32
    56c8:	01080048 	tsteq	r8, r8, asr #32
    56cc:	488a5600 	stmmi	sl, {r9, sl, ip, lr}
    56d0:	48ae0800 	stmiami	lr!, {fp}
    56d4:	00010800 	andeq	r0, r1, r0, lsl #16
    56d8:	00490459 	subeq	r0, r9, r9, asr r4
    56dc:	00492408 	subeq	r2, r9, r8, lsl #8
    56e0:	58000108 	stmdapl	r0, {r3, r8}
    56e4:	08004960 	stmdaeq	r0, {r5, r6, r8, fp, lr}
    56e8:	080049dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, lr}
    56ec:	08580001 	ldmdaeq	r8, {r0}^
    56f0:	4a08004a 	bmi	205820 <__Stack_Size+0x205020>
    56f4:	0108004a 	tsteq	r8, sl, asr #32
    56f8:	4a7e5400 	bmi	1f9a700 <__Stack_Size+0x1f99f00>
    56fc:	4ad20800 	bmi	ff487704 <BootRAM+0xe3f7ea5>
    5700:	00010800 	andeq	r0, r1, r0, lsl #16
    5704:	004afc57 	subeq	pc, sl, r7, asr ip	; <UNPREDICTABLE>
    5708:	004b4408 	subeq	r4, fp, r8, lsl #8
    570c:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    5710:	08004b7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, fp, lr}
    5714:	08004bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, lr}
    5718:	f6530001 			; <UNDEFINED> instruction: 0xf6530001
    571c:	3808004b 	stmdacc	r8, {r0, r1, r3, r6}
    5720:	0108004c 	tsteq	r8, ip, asr #32
    5724:	4c885000 	stcmi	0, cr5, [r8], {0}
    5728:	4ca80800 	stcmi	8, cr0, [r8]
    572c:	00010800 	andeq	r0, r1, r0, lsl #16
    5730:	004d0256 	subeq	r0, sp, r6, asr r2
    5734:	004d2008 	subeq	r2, sp, r8
    5738:	5c000108 	stfpls	f0, [r0], {8}
    573c:	08004d9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, sl, fp, lr}
    5740:	08004dba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, sl, fp, lr}
    5744:	52500001 	subspl	r0, r0, #1
    5748:	7608004e 	strvc	r0, [r8], -lr, asr #32
    574c:	0108004e 	tsteq	r8, lr, asr #32
    5750:	4e765800 	cdpmi	8, 7, cr5, cr6, cr0, {0}
    5754:	4e860800 	cdpmi	8, 8, cr0, cr6, cr0, {0}
    5758:	00060800 	andeq	r0, r6, r0, lsl #16
    575c:	0079007a 	rsbseq	r0, r9, sl, ror r0
    5760:	4e869f22 	cdpmi	15, 8, cr9, cr6, cr2, {1}
    5764:	4eba0800 	cdpmi	8, 11, cr0, cr10, cr0, {0}
    5768:	002a0800 	eoreq	r0, sl, r0, lsl #16
    576c:	14450074 	strbne	r0, [r5], #-116	; 0x74
    5770:	1f172414 	svcne	0x00172414
    5774:	21252023 	teqcs	r5, r3, lsr #32
    5778:	14360074 	ldrtne	r0, [r6], #-116	; 0x74
    577c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5780:	21251724 	teqcs	r5, r4, lsr #14
    5784:	37007427 	strcc	r7, [r0, -r7, lsr #8]
    5788:	17241414 			; <UNDEFINED> instruction: 0x17241414
    578c:	2520231f 	strcs	r2, [r0, #-799]!	; 0x31f
    5790:	007a2721 	rsbseq	r2, sl, r1, lsr #14
    5794:	4edc9f22 	cdpmi	15, 13, cr9, cr12, cr2, {1}
    5798:	4f3e0800 	svcmi	0x003e0800
    579c:	00010800 	andeq	r0, r1, r0, lsl #16
    57a0:	004f6c5a 	subeq	r6, pc, sl, asr ip	; <UNPREDICTABLE>
    57a4:	004f7808 	subeq	r7, pc, r8, lsl #16
    57a8:	51000108 	tstpl	r0, r8, lsl #2
    57ac:	08004fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp, lr}
    57b0:	08004fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp, lr}
    57b4:	48540001 	ldmdami	r4, {r0}^
    57b8:	78080050 	stmdavc	r8, {r4, r6}
    57bc:	01080050 	qaddeq	r0, r0, r8
    57c0:	50d05600 	sbcspl	r5, r0, r0, lsl #12
    57c4:	50e20800 	rscpl	r0, r2, r0, lsl #16
    57c8:	00010800 	andeq	r0, r1, r0, lsl #16
    57cc:	00000057 	andeq	r0, r0, r7, asr r0
    57d0:	00000000 	andeq	r0, r0, r0
    57d4:	00393800 	eorseq	r3, r9, r0, lsl #16
    57d8:	00397208 	eorseq	r7, r9, r8, lsl #4
    57dc:	76003808 	strvc	r3, [r0], -r8, lsl #16
    57e0:	21007b00 	tstcs	r0, r0, lsl #22
    57e4:	067f9491 			; <UNDEFINED> instruction: 0x067f9491
    57e8:	7b00761a 	blvc	23058 <__Stack_Size+0x22858>
    57ec:	76211a00 	strtvc	r1, [r1], -r0, lsl #20
    57f0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    57f4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    57f8:	76212517 			; <UNDEFINED> instruction: 0x76212517
    57fc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5800:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5804:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5808:	14460076 	strbne	r0, [r6], #-118	; 0x76
    580c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5810:	21251724 	teqcs	r5, r4, lsr #14
    5814:	729f2227 	addsvc	r2, pc, #1879048194	; 0x70000002
    5818:	da080039 	ble	205904 <__Stack_Size+0x205104>
    581c:	36080039 			; <UNDEFINED> instruction: 0x36080039
    5820:	76007700 	strvc	r7, [r0], -r0, lsl #14
    5824:	007b2100 	rsbseq	r2, fp, r0, lsl #2
    5828:	7600771a 			; <UNDEFINED> instruction: 0x7600771a
    582c:	77211a00 	strvc	r1, [r1, -r0, lsl #20]!
    5830:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5834:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5838:	77212517 			; <UNDEFINED> instruction: 0x77212517
    583c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5840:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5844:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5848:	14460077 	strbne	r0, [r6], #-119	; 0x77
    584c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5850:	21251724 	teqcs	r5, r4, lsr #14
    5854:	da9f2227 	ble	fe7ce0f8 <BootRAM+0xd73e899>
    5858:	52080039 	andpl	r0, r8, #57	; 0x39
    585c:	3608003a 			; <UNDEFINED> instruction: 0x3608003a
    5860:	77007500 	strvc	r7, [r0, -r0, lsl #10]
    5864:	00762100 	rsbseq	r2, r6, r0, lsl #2
    5868:	7700751a 	smladvc	r0, sl, r5, r7
    586c:	75211a00 	strvc	r1, [r1, #-2560]!	; 0xa00
    5870:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5874:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5878:	75212517 	strvc	r2, [r1, #-1303]!	; 0x517
    587c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5880:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5884:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5888:	14460075 	strbne	r0, [r6], #-117	; 0x75
    588c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5890:	21251724 	teqcs	r5, r4, lsr #14
    5894:	529f2227 	addspl	r2, pc, #1879048194	; 0x70000002
    5898:	c808003a 	stmdagt	r8, {r1, r3, r4, r5}
    589c:	3608003a 			; <UNDEFINED> instruction: 0x3608003a
    58a0:	75007800 	strvc	r7, [r0, #-2048]	; 0x800
    58a4:	00772100 	rsbseq	r2, r7, r0, lsl #2
    58a8:	7500781a 	strvc	r7, [r0, #-2074]	; 0x81a
    58ac:	78211a00 	stmdavc	r1!, {r9, fp, ip}
    58b0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    58b4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    58b8:	78212517 	stmdavc	r1!, {r0, r1, r2, r4, r8, sl, sp}
    58bc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    58c0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    58c4:	27212517 			; <UNDEFINED> instruction: 0x27212517
    58c8:	14460078 	strbne	r0, [r6], #-120	; 0x78
    58cc:	20231f14 	eorcs	r1, r3, r4, lsl pc
    58d0:	21251724 	teqcs	r5, r4, lsr #14
    58d4:	c89f2227 	ldmgt	pc, {r0, r1, r2, r5, r9, sp}	; <UNPREDICTABLE>
    58d8:	3808003a 	stmdacc	r8, {r1, r3, r4, r5}
    58dc:	3608003b 			; <UNDEFINED> instruction: 0x3608003b
    58e0:	78007a00 	stmdavc	r0, {r9, fp, ip, sp, lr}
    58e4:	00752100 	rsbseq	r2, r5, r0, lsl #2
    58e8:	78007a1a 	stmdavc	r0, {r1, r3, r4, r9, fp, ip, sp, lr}
    58ec:	7a211a00 	bvc	84c0f4 <__Stack_Size+0x84b8f4>
    58f0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    58f4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    58f8:	7a212517 	bvc	84ed5c <__Stack_Size+0x84e55c>
    58fc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5900:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5904:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5908:	1446007a 	strbne	r0, [r6], #-122	; 0x7a
    590c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5910:	21251724 	teqcs	r5, r4, lsr #14
    5914:	389f2227 	ldmcc	pc, {r0, r1, r2, r5, r9, sp}	; <UNPREDICTABLE>
    5918:	ac08003b 	stcge	0, cr0, [r8], {59}	; 0x3b
    591c:	3608003b 			; <UNDEFINED> instruction: 0x3608003b
    5920:	7a007100 	bvc	21d28 <__Stack_Size+0x21528>
    5924:	00782100 	rsbseq	r2, r8, r0, lsl #2
    5928:	7a00711a 	bvc	21d98 <__Stack_Size+0x21598>
    592c:	71211a00 	teqvc	r1, r0, lsl #20
    5930:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5934:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5938:	71212517 	teqvc	r1, r7, lsl r5
    593c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5940:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5944:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5948:	14460071 	strbne	r0, [r6], #-113	; 0x71
    594c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5950:	21251724 	teqcs	r5, r4, lsr #14
    5954:	ac9f2227 	lfmge	f2, 4, [pc], {39}	; 0x27
    5958:	2408003b 	strcs	r0, [r8], #-59	; 0x3b
    595c:	3608003c 			; <UNDEFINED> instruction: 0x3608003c
    5960:	71007400 	tstvc	r0, r0, lsl #8
    5964:	007a2100 	rsbseq	r2, sl, r0, lsl #2
    5968:	7100741a 	tstvc	r0, sl, lsl r4
    596c:	74211a00 	strtvc	r1, [r1], #-2560	; 0xa00
    5970:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5974:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5978:	74212517 	strtvc	r2, [r1], #-1303	; 0x517
    597c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5980:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5984:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5988:	14460074 	strbne	r0, [r6], #-116	; 0x74
    598c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5990:	21251724 	teqcs	r5, r4, lsr #14
    5994:	249f2227 	ldrcs	r2, [pc], #551	; 599c <__Stack_Size+0x519c>
    5998:	a808003c 	stmdage	r8, {r2, r3, r4, r5}
    599c:	3608003c 			; <UNDEFINED> instruction: 0x3608003c
    59a0:	74007000 	strvc	r7, [r0], #-0
    59a4:	00712100 	rsbseq	r2, r1, r0, lsl #2
    59a8:	7400701a 	strvc	r7, [r0], #-26
    59ac:	70211a00 	eorvc	r1, r1, r0, lsl #20
    59b0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    59b4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    59b8:	70212517 	eorvc	r2, r1, r7, lsl r5
    59bc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    59c0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    59c4:	27212517 			; <UNDEFINED> instruction: 0x27212517
    59c8:	14460070 	strbne	r0, [r6], #-112	; 0x70
    59cc:	20231f14 	eorcs	r1, r3, r4, lsl pc
    59d0:	21251724 	teqcs	r5, r4, lsr #14
    59d4:	a89f2227 	ldmge	pc, {r0, r1, r2, r5, r9, sp}	; <UNPREDICTABLE>
    59d8:	3208003c 	andcc	r0, r8, #60	; 0x3c
    59dc:	3608003d 			; <UNDEFINED> instruction: 0x3608003d
    59e0:	70007200 	andvc	r7, r0, r0, lsl #4
    59e4:	00742100 	rsbseq	r2, r4, r0, lsl #2
    59e8:	7000721a 	andvc	r7, r0, sl, lsl r2
    59ec:	72211a00 	eorvc	r1, r1, #0, 20
    59f0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    59f4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    59f8:	72212517 	eorvc	r2, r1, #96468992	; 0x5c00000
    59fc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5a00:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5a04:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5a08:	14460072 	strbne	r0, [r6], #-114	; 0x72
    5a0c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5a10:	21251724 	teqcs	r5, r4, lsr #14
    5a14:	329f2227 	addscc	r2, pc, #1879048194	; 0x70000002
    5a18:	b208003d 	andlt	r0, r8, #61	; 0x3d
    5a1c:	3608003d 			; <UNDEFINED> instruction: 0x3608003d
    5a20:	72007300 	andvc	r7, r0, #0, 6
    5a24:	00702100 	rsbseq	r2, r0, r0, lsl #2
    5a28:	7200731a 	andvc	r7, r0, #1744830464	; 0x68000000
    5a2c:	73211a00 	teqvc	r1, #0, 20
    5a30:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5a34:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5a38:	73212517 	teqvc	r1, #96468992	; 0x5c00000
    5a3c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5a40:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5a44:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5a48:	14460073 	strbne	r0, [r6], #-115	; 0x73
    5a4c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5a50:	21251724 	teqcs	r5, r4, lsr #14
    5a54:	b29f2227 	addslt	r2, pc, #1879048194	; 0x70000002
    5a58:	3c08003d 	stccc	0, cr0, [r8], {61}	; 0x3d
    5a5c:	3608003e 			; <UNDEFINED> instruction: 0x3608003e
    5a60:	73007c00 	movwvc	r7, #3072	; 0xc00
    5a64:	00722100 	rsbseq	r2, r2, r0, lsl #2
    5a68:	73007c1a 	movwvc	r7, #3098	; 0xc1a
    5a6c:	7c211a00 	stcvc	10, cr1, [r1], #-0
    5a70:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5a74:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5a78:	7c212517 	cfstr32vc	mvfx2, [r1], #-92	; 0xffffffa4
    5a7c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5a80:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5a84:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5a88:	1446007c 	strbne	r0, [r6], #-124	; 0x7c
    5a8c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5a90:	21251724 	teqcs	r5, r4, lsr #14
    5a94:	3c9f2227 	lfmcc	f2, 4, [pc], {39}	; 0x27
    5a98:	aa08003e 	bge	205b98 <__Stack_Size+0x205398>
    5a9c:	3608003e 			; <UNDEFINED> instruction: 0x3608003e
    5aa0:	7c007600 	stcvc	6, cr7, [r0], {-0}
    5aa4:	00732100 	rsbseq	r2, r3, r0, lsl #2
    5aa8:	7c00761a 	stcvc	6, cr7, [r0], {26}
    5aac:	76211a00 	strtvc	r1, [r1], -r0, lsl #20
    5ab0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5ab4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5ab8:	76212517 			; <UNDEFINED> instruction: 0x76212517
    5abc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5ac0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5ac4:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5ac8:	14460076 	strbne	r0, [r6], #-118	; 0x76
    5acc:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5ad0:	21251724 	teqcs	r5, r4, lsr #14
    5ad4:	aa9f2227 	bge	fe7ce378 <BootRAM+0xd73eb19>
    5ad8:	1a08003e 	bne	205bd8 <__Stack_Size+0x2053d8>
    5adc:	3608003f 			; <UNDEFINED> instruction: 0x3608003f
    5ae0:	76007a00 	strvc	r7, [r0], -r0, lsl #20
    5ae4:	007c2100 	rsbseq	r2, ip, r0, lsl #2
    5ae8:	76007a1a 			; <UNDEFINED> instruction: 0x76007a1a
    5aec:	7a211a00 	bvc	84c2f4 <__Stack_Size+0x84baf4>
    5af0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5af4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5af8:	7a212517 	bvc	84ef5c <__Stack_Size+0x84e75c>
    5afc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5b00:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5b04:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5b08:	1446007a 	strbne	r0, [r6], #-122	; 0x7a
    5b0c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5b10:	21251724 	teqcs	r5, r4, lsr #14
    5b14:	1a9f2227 	bne	fe7ce3b8 <BootRAM+0xd73eb59>
    5b18:	9208003f 	andls	r0, r8, #63	; 0x3f
    5b1c:	3608003f 			; <UNDEFINED> instruction: 0x3608003f
    5b20:	7a007100 	bvc	21f28 <__Stack_Size+0x21728>
    5b24:	00762100 	rsbseq	r2, r6, r0, lsl #2
    5b28:	7a00711a 	bvc	21f98 <__Stack_Size+0x21798>
    5b2c:	71211a00 	teqvc	r1, r0, lsl #20
    5b30:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5b34:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5b38:	71212517 	teqvc	r1, r7, lsl r5
    5b3c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5b40:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5b44:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5b48:	14460071 	strbne	r0, [r6], #-113	; 0x71
    5b4c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5b50:	21251724 	teqcs	r5, r4, lsr #14
    5b54:	929f2227 	addsls	r2, pc, #1879048194	; 0x70000002
    5b58:	0208003f 	andeq	r0, r8, #63	; 0x3f
    5b5c:	36080040 	strcc	r0, [r8], -r0, asr #32
    5b60:	71007900 	tstvc	r0, r0, lsl #18
    5b64:	007a2100 	rsbseq	r2, sl, r0, lsl #2
    5b68:	7100791a 	tstvc	r0, sl, lsl r9
    5b6c:	79211a00 	stmdbvc	r1!, {r9, fp, ip}
    5b70:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5b74:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5b78:	79212517 	stmdbvc	r1!, {r0, r1, r2, r4, r8, sl, sp}
    5b7c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5b80:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5b84:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5b88:	14460079 	strbne	r0, [r6], #-121	; 0x79
    5b8c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5b90:	21251724 	teqcs	r5, r4, lsr #14
    5b94:	029f2227 	addseq	r2, pc, #1879048194	; 0x70000002
    5b98:	74080040 	strvc	r0, [r8], #-64	; 0x40
    5b9c:	36080040 	strcc	r0, [r8], -r0, asr #32
    5ba0:	79007c00 	stmdbvc	r0, {sl, fp, ip, sp, lr}
    5ba4:	00712100 	rsbseq	r2, r1, r0, lsl #2
    5ba8:	79007c1a 	stmdbvc	r0, {r1, r3, r4, sl, fp, ip, sp, lr}
    5bac:	7c211a00 	stcvc	10, cr1, [r1], #-0
    5bb0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5bb4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5bb8:	7c212517 	cfstr32vc	mvfx2, [r1], #-92	; 0xffffffa4
    5bbc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5bc0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5bc4:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5bc8:	1446007c 	strbne	r0, [r6], #-124	; 0x7c
    5bcc:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5bd0:	21251724 	teqcs	r5, r4, lsr #14
    5bd4:	749f2227 	ldrvc	r2, [pc], #551	; 5bdc <__Stack_Size+0x53dc>
    5bd8:	de080040 	cdple	0, 0, cr0, cr8, cr0, {2}
    5bdc:	36080040 	strcc	r0, [r8], -r0, asr #32
    5be0:	7c007000 	stcvc	0, cr7, [r0], {-0}
    5be4:	00792100 	rsbseq	r2, r9, r0, lsl #2
    5be8:	7c00701a 	stcvc	0, cr7, [r0], {26}
    5bec:	70211a00 	eorvc	r1, r1, r0, lsl #20
    5bf0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5bf4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5bf8:	70212517 	eorvc	r2, r1, r7, lsl r5
    5bfc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5c00:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5c04:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5c08:	14460070 	strbne	r0, [r6], #-112	; 0x70
    5c0c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5c10:	21251724 	teqcs	r5, r4, lsr #14
    5c14:	de9f2227 	cdple	2, 9, cr2, cr15, cr7, {1}
    5c18:	76080040 	strvc	r0, [r8], -r0, asr #32
    5c1c:	36080041 	strcc	r0, [r8], -r1, asr #32
    5c20:	70007600 	andvc	r7, r0, r0, lsl #12
    5c24:	007c2100 	rsbseq	r2, ip, r0, lsl #2
    5c28:	7000761a 	andvc	r7, r0, sl, lsl r6
    5c2c:	76211a00 	strtvc	r1, [r1], -r0, lsl #20
    5c30:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5c34:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5c38:	76212517 			; <UNDEFINED> instruction: 0x76212517
    5c3c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5c40:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5c44:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5c48:	14460076 	strbne	r0, [r6], #-118	; 0x76
    5c4c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5c50:	21251724 	teqcs	r5, r4, lsr #14
    5c54:	769f2227 	ldrvc	r2, [pc], r7, lsr #4
    5c58:	ea080041 	b	205d64 <__Stack_Size+0x205564>
    5c5c:	36080041 	strcc	r0, [r8], -r1, asr #32
    5c60:	76007700 	strvc	r7, [r0], -r0, lsl #14
    5c64:	00702100 	rsbseq	r2, r0, r0, lsl #2
    5c68:	7600771a 			; <UNDEFINED> instruction: 0x7600771a
    5c6c:	77211a00 	strvc	r1, [r1, -r0, lsl #20]!
    5c70:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5c74:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5c78:	77212517 			; <UNDEFINED> instruction: 0x77212517
    5c7c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5c80:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5c84:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5c88:	14460077 	strbne	r0, [r6], #-119	; 0x77
    5c8c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5c90:	21251724 	teqcs	r5, r4, lsr #14
    5c94:	ea9f2227 	b	fe7ce538 <BootRAM+0xd73ecd9>
    5c98:	60080041 	andvs	r0, r8, r1, asr #32
    5c9c:	36080042 	strcc	r0, [r8], -r2, asr #32
    5ca0:	77007500 	strvc	r7, [r0, -r0, lsl #10]
    5ca4:	00762100 	rsbseq	r2, r6, r0, lsl #2
    5ca8:	7700751a 	smladvc	r0, sl, r5, r7
    5cac:	75211a00 	strvc	r1, [r1, #-2560]!	; 0xa00
    5cb0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5cb4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5cb8:	75212517 	strvc	r2, [r1, #-1303]!	; 0x517
    5cbc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5cc0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5cc4:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5cc8:	14460075 	strbne	r0, [r6], #-117	; 0x75
    5ccc:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5cd0:	21251724 	teqcs	r5, r4, lsr #14
    5cd4:	609f2227 	addsvs	r2, pc, r7, lsr #4
    5cd8:	d0080042 	andle	r0, r8, r2, asr #32
    5cdc:	36080042 	strcc	r0, [r8], -r2, asr #32
    5ce0:	75007400 	strvc	r7, [r0, #-1024]	; 0x400
    5ce4:	00772100 	rsbseq	r2, r7, r0, lsl #2
    5ce8:	7500741a 	strvc	r7, [r0, #-1050]	; 0x41a
    5cec:	74211a00 	strtvc	r1, [r1], #-2560	; 0xa00
    5cf0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5cf4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5cf8:	74212517 	strtvc	r2, [r1], #-1303	; 0x517
    5cfc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5d00:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5d04:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5d08:	14460074 	strbne	r0, [r6], #-116	; 0x74
    5d0c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5d10:	21251724 	teqcs	r5, r4, lsr #14
    5d14:	d09f2227 	addsle	r2, pc, r7, lsr #4
    5d18:	4a080042 	bmi	205e28 <__Stack_Size+0x205628>
    5d1c:	36080043 	strcc	r0, [r8], -r3, asr #32
    5d20:	74007100 	strvc	r7, [r0], #-256	; 0x100
    5d24:	00752100 	rsbseq	r2, r5, r0, lsl #2
    5d28:	7400711a 	strvc	r7, [r0], #-282	; 0x11a
    5d2c:	71211a00 	teqvc	r1, r0, lsl #20
    5d30:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5d34:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5d38:	71212517 	teqvc	r1, r7, lsl r5
    5d3c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5d40:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5d44:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5d48:	14460071 	strbne	r0, [r6], #-113	; 0x71
    5d4c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5d50:	21251724 	teqcs	r5, r4, lsr #14
    5d54:	4a9f2227 	bmi	fe7ce5f8 <BootRAM+0xd73ed99>
    5d58:	a6080043 	strge	r0, [r8], -r3, asr #32
    5d5c:	36080043 	strcc	r0, [r8], -r3, asr #32
    5d60:	71007200 	mrsvc	r7, R8_usr
    5d64:	00742100 	rsbseq	r2, r4, r0, lsl #2
    5d68:	7100721a 	tstvc	r0, sl, lsl r2
    5d6c:	72211a00 	eorvc	r1, r1, #0, 20
    5d70:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5d74:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5d78:	72212517 	eorvc	r2, r1, #96468992	; 0x5c00000
    5d7c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5d80:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5d84:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5d88:	14460072 	strbne	r0, [r6], #-114	; 0x72
    5d8c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5d90:	21251724 	teqcs	r5, r4, lsr #14
    5d94:	a69f2227 	ldrge	r2, [pc], r7, lsr #4
    5d98:	3e080043 	cdpcc	0, 0, cr0, cr8, cr3, {2}
    5d9c:	36080044 	strcc	r0, [r8], -r4, asr #32
    5da0:	72007300 	andvc	r7, r0, #0, 6
    5da4:	00712100 	rsbseq	r2, r1, r0, lsl #2
    5da8:	7200731a 	andvc	r7, r0, #1744830464	; 0x68000000
    5dac:	73211a00 	teqvc	r1, #0, 20
    5db0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5db4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5db8:	73212517 	teqvc	r1, #96468992	; 0x5c00000
    5dbc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5dc0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5dc4:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5dc8:	14460073 	strbne	r0, [r6], #-115	; 0x73
    5dcc:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5dd0:	21251724 	teqcs	r5, r4, lsr #14
    5dd4:	3e9f2227 	cdpcc	2, 9, cr2, cr15, cr7, {1}
    5dd8:	ba080044 	blt	205ef0 <__Stack_Size+0x2056f0>
    5ddc:	36080044 	strcc	r0, [r8], -r4, asr #32
    5de0:	73007000 	movwvc	r7, #0
    5de4:	00722100 	rsbseq	r2, r2, r0, lsl #2
    5de8:	7300701a 	movwvc	r7, #26
    5dec:	70211a00 	eorvc	r1, r1, r0, lsl #20
    5df0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5df4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5df8:	70212517 	eorvc	r2, r1, r7, lsl r5
    5dfc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5e00:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5e04:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5e08:	14460070 	strbne	r0, [r6], #-112	; 0x70
    5e0c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5e10:	21251724 	teqcs	r5, r4, lsr #14
    5e14:	ba9f2227 	blt	fe7ce6b8 <BootRAM+0xd73ee59>
    5e18:	28080044 	stmdacs	r8, {r2, r6}
    5e1c:	36080045 	strcc	r0, [r8], -r5, asr #32
    5e20:	70007600 	andvc	r7, r0, r0, lsl #12
    5e24:	00732100 	rsbseq	r2, r3, r0, lsl #2
    5e28:	7000761a 	andvc	r7, r0, sl, lsl r6
    5e2c:	76211a00 	strtvc	r1, [r1], -r0, lsl #20
    5e30:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5e34:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5e38:	76212517 			; <UNDEFINED> instruction: 0x76212517
    5e3c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5e40:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5e44:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5e48:	14460076 	strbne	r0, [r6], #-118	; 0x76
    5e4c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5e50:	21251724 	teqcs	r5, r4, lsr #14
    5e54:	289f2227 	ldmcs	pc, {r0, r1, r2, r5, r9, sp}	; <UNPREDICTABLE>
    5e58:	cc080045 	stcgt	0, cr0, [r8], {69}	; 0x45
    5e5c:	36080045 	strcc	r0, [r8], -r5, asr #32
    5e60:	76007800 	strvc	r7, [r0], -r0, lsl #16
    5e64:	00702100 	rsbseq	r2, r0, r0, lsl #2
    5e68:	7600781a 			; <UNDEFINED> instruction: 0x7600781a
    5e6c:	78211a00 	stmdavc	r1!, {r9, fp, ip}
    5e70:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5e74:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5e78:	78212517 	stmdavc	r1!, {r0, r1, r2, r4, r8, sl, sp}
    5e7c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5e80:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5e84:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5e88:	14460078 	strbne	r0, [r6], #-120	; 0x78
    5e8c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5e90:	21251724 	teqcs	r5, r4, lsr #14
    5e94:	cc9f2227 	lfmgt	f2, 4, [pc], {39}	; 0x27
    5e98:	44080045 	strmi	r0, [r8], #-69	; 0x45
    5e9c:	36080046 	strcc	r0, [r8], -r6, asr #32
    5ea0:	78007c00 	stmdavc	r0, {sl, fp, ip, sp, lr}
    5ea4:	00762100 	rsbseq	r2, r6, r0, lsl #2
    5ea8:	78007c1a 	stmdavc	r0, {r1, r3, r4, sl, fp, ip, sp, lr}
    5eac:	7c211a00 	stcvc	10, cr1, [r1], #-0
    5eb0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5eb4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5eb8:	7c212517 	cfstr32vc	mvfx2, [r1], #-92	; 0xffffffa4
    5ebc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5ec0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5ec4:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5ec8:	1446007c 	strbne	r0, [r6], #-124	; 0x7c
    5ecc:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5ed0:	21251724 	teqcs	r5, r4, lsr #14
    5ed4:	449f2227 	ldrmi	r2, [pc], #551	; 5edc <__Stack_Size+0x56dc>
    5ed8:	b8080046 	stmdalt	r8, {r1, r2, r6}
    5edc:	36080046 	strcc	r0, [r8], -r6, asr #32
    5ee0:	7c007500 	cfstr32vc	mvfx7, [r0], {-0}
    5ee4:	00782100 	rsbseq	r2, r8, r0, lsl #2
    5ee8:	7c00751a 	cfstr32vc	mvfx7, [r0], {26}
    5eec:	75211a00 	strvc	r1, [r1, #-2560]!	; 0xa00
    5ef0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5ef4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5ef8:	75212517 	strvc	r2, [r1, #-1303]!	; 0x517
    5efc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5f00:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5f04:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5f08:	14460075 	strbne	r0, [r6], #-117	; 0x75
    5f0c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5f10:	21251724 	teqcs	r5, r4, lsr #14
    5f14:	b89f2227 	ldmlt	pc, {r0, r1, r2, r5, r9, sp}	; <UNPREDICTABLE>
    5f18:	28080046 	stmdacs	r8, {r1, r2, r6}
    5f1c:	36080047 	strcc	r0, [r8], -r7, asr #32
    5f20:	75007400 	strvc	r7, [r0, #-1024]	; 0x400
    5f24:	007c2100 	rsbseq	r2, ip, r0, lsl #2
    5f28:	7500741a 	strvc	r7, [r0, #-1050]	; 0x41a
    5f2c:	74211a00 	strtvc	r1, [r1], #-2560	; 0xa00
    5f30:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5f34:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5f38:	74212517 	strtvc	r2, [r1], #-1303	; 0x517
    5f3c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5f40:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5f44:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5f48:	14460074 	strbne	r0, [r6], #-116	; 0x74
    5f4c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5f50:	21251724 	teqcs	r5, r4, lsr #14
    5f54:	289f2227 	ldmcs	pc, {r0, r1, r2, r5, r9, sp}	; <UNPREDICTABLE>
    5f58:	9e080047 	cdpls	0, 0, cr0, cr8, cr7, {2}
    5f5c:	36080047 	strcc	r0, [r8], -r7, asr #32
    5f60:	74007200 	strvc	r7, [r0], #-512	; 0x200
    5f64:	00752100 	rsbseq	r2, r5, r0, lsl #2
    5f68:	7400721a 	strvc	r7, [r0], #-538	; 0x21a
    5f6c:	72211a00 	eorvc	r1, r1, #0, 20
    5f70:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5f74:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5f78:	72212517 	eorvc	r2, r1, #96468992	; 0x5c00000
    5f7c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5f80:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5f84:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5f88:	14460072 	strbne	r0, [r6], #-114	; 0x72
    5f8c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5f90:	21251724 	teqcs	r5, r4, lsr #14
    5f94:	9e9f2227 	cdpls	2, 9, cr2, cr15, cr7, {1}
    5f98:	10080047 	andne	r0, r8, r7, asr #32
    5f9c:	36080048 	strcc	r0, [r8], -r8, asr #32
    5fa0:	72007100 	andvc	r7, r0, #0, 2
    5fa4:	00742100 	rsbseq	r2, r4, r0, lsl #2
    5fa8:	7200711a 	andvc	r7, r0, #-2147483642	; 0x80000006
    5fac:	71211a00 	teqvc	r1, r0, lsl #20
    5fb0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5fb4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5fb8:	71212517 	teqvc	r1, r7, lsl r5
    5fbc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5fc0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5fc4:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5fc8:	14460071 	strbne	r0, [r6], #-113	; 0x71
    5fcc:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5fd0:	21251724 	teqcs	r5, r4, lsr #14
    5fd4:	109f2227 	addsne	r2, pc, r7, lsr #4
    5fd8:	8a080048 	bhi	206100 <__Stack_Size+0x205900>
    5fdc:	36080048 	strcc	r0, [r8], -r8, asr #32
    5fe0:	71007300 	mrsvc	r7, LR_irq
    5fe4:	00722100 	rsbseq	r2, r2, r0, lsl #2
    5fe8:	7100731a 	tstvc	r0, sl, lsl r3
    5fec:	73211a00 	teqvc	r1, #0, 20
    5ff0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5ff4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5ff8:	73212517 	teqvc	r1, #96468992	; 0x5c00000
    5ffc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    6000:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    6004:	27212517 			; <UNDEFINED> instruction: 0x27212517
    6008:	14460073 	strbne	r0, [r6], #-115	; 0x73
    600c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    6010:	21251724 	teqcs	r5, r4, lsr #14
    6014:	8a9f2227 	bhi	fe7ce8b8 <BootRAM+0xd73f059>
    6018:	04080048 	streq	r0, [r8], #-72	; 0x48
    601c:	36080049 	strcc	r0, [r8], -r9, asr #32
    6020:	73007000 	movwvc	r7, #0
    6024:	00712100 	rsbseq	r2, r1, r0, lsl #2
    6028:	7300701a 	movwvc	r7, #26
    602c:	70211a00 	eorvc	r1, r1, r0, lsl #20
    6030:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    6034:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    6038:	70212517 	eorvc	r2, r1, r7, lsl r5
    603c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    6040:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    6044:	27212517 			; <UNDEFINED> instruction: 0x27212517
    6048:	14460070 	strbne	r0, [r6], #-112	; 0x70
    604c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    6050:	21251724 	teqcs	r5, r4, lsr #14
    6054:	049f2227 	ldreq	r2, [pc], #551	; 605c <__Stack_Size+0x585c>
    6058:	60080049 	andvs	r0, r8, r9, asr #32
    605c:	36080049 	strcc	r0, [r8], -r9, asr #32
    6060:	70007600 	andvc	r7, r0, r0, lsl #12
    6064:	00732100 	rsbseq	r2, r3, r0, lsl #2
    6068:	7000761a 	andvc	r7, r0, sl, lsl r6
    606c:	76211a00 	strtvc	r1, [r1], -r0, lsl #20
    6070:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    6074:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    6078:	76212517 			; <UNDEFINED> instruction: 0x76212517
    607c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    6080:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    6084:	27212517 			; <UNDEFINED> instruction: 0x27212517
    6088:	14460076 	strbne	r0, [r6], #-118	; 0x76
    608c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    6090:	21251724 	teqcs	r5, r4, lsr #14
    6094:	609f2227 	addsvs	r2, pc, r7, lsr #4
    6098:	08080049 	stmdaeq	r8, {r0, r3, r6}
    609c:	3608004a 	strcc	r0, [r8], -sl, asr #32
    60a0:	76007c00 	strvc	r7, [r0], -r0, lsl #24
    60a4:	00702100 	rsbseq	r2, r0, r0, lsl #2
    60a8:	76007c1a 			; <UNDEFINED> instruction: 0x76007c1a
    60ac:	7c211a00 	stcvc	10, cr1, [r1], #-0
    60b0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    60b4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    60b8:	7c212517 	cfstr32vc	mvfx2, [r1], #-92	; 0xffffffa4
    60bc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    60c0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    60c4:	27212517 			; <UNDEFINED> instruction: 0x27212517
    60c8:	1446007c 	strbne	r0, [r6], #-124	; 0x7c
    60cc:	20231f14 	eorcs	r1, r3, r4, lsl pc
    60d0:	21251724 	teqcs	r5, r4, lsr #14
    60d4:	089f2227 	ldmeq	pc, {r0, r1, r2, r5, r9, sp}	; <UNPREDICTABLE>
    60d8:	7e08004a 	cdpvc	0, 0, cr0, cr8, cr10, {2}
    60dc:	3608004a 	strcc	r0, [r8], -sl, asr #32
    60e0:	7c007500 	cfstr32vc	mvfx7, [r0], {-0}
    60e4:	00762100 	rsbseq	r2, r6, r0, lsl #2
    60e8:	7c00751a 	cfstr32vc	mvfx7, [r0], {26}
    60ec:	75211a00 	strvc	r1, [r1, #-2560]!	; 0xa00
    60f0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    60f4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    60f8:	75212517 	strvc	r2, [r1, #-1303]!	; 0x517
    60fc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    6100:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    6104:	27212517 			; <UNDEFINED> instruction: 0x27212517
    6108:	14460075 	strbne	r0, [r6], #-117	; 0x75
    610c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    6110:	21251724 	teqcs	r5, r4, lsr #14
    6114:	7e9f2227 	cdpvc	2, 9, cr2, cr15, cr7, {1}
    6118:	fc08004a 	stc2	0, cr0, [r8], {74}	; 0x4a
    611c:	3608004a 	strcc	r0, [r8], -sl, asr #32
    6120:	75007800 	strvc	r7, [r0, #-2048]	; 0x800
    6124:	007c2100 	rsbseq	r2, ip, r0, lsl #2
    6128:	7500781a 	strvc	r7, [r0, #-2074]	; 0x81a
    612c:	78211a00 	stmdavc	r1!, {r9, fp, ip}
    6130:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    6134:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    6138:	78212517 	stmdavc	r1!, {r0, r1, r2, r4, r8, sl, sp}
    613c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    6140:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    6144:	27212517 			; <UNDEFINED> instruction: 0x27212517
    6148:	14460078 	strbne	r0, [r6], #-120	; 0x78
    614c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    6150:	21251724 	teqcs	r5, r4, lsr #14
    6154:	fc9f2227 	ldc2	2, cr2, [pc], {39}	; 0x27
    6158:	7a08004a 	bvc	206288 <__Stack_Size+0x205a88>
    615c:	3608004b 	strcc	r0, [r8], -fp, asr #32
    6160:	78007200 	stmdavc	r0, {r9, ip, sp, lr}
    6164:	00752100 	rsbseq	r2, r5, r0, lsl #2
    6168:	7800721a 	stmdavc	r0, {r1, r3, r4, r9, ip, sp, lr}
    616c:	72211a00 	eorvc	r1, r1, #0, 20
    6170:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    6174:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    6178:	72212517 	eorvc	r2, r1, #96468992	; 0x5c00000
    617c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    6180:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    6184:	27212517 			; <UNDEFINED> instruction: 0x27212517
    6188:	14460072 	strbne	r0, [r6], #-114	; 0x72
    618c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    6190:	21251724 	teqcs	r5, r4, lsr #14
    6194:	7a9f2227 	bvc	fe7cea38 <BootRAM+0xd73f1d9>
    6198:	f608004b 			; <UNDEFINED> instruction: 0xf608004b
    619c:	3608004b 	strcc	r0, [r8], -fp, asr #32
    61a0:	72007100 	andvc	r7, r0, #0, 2
    61a4:	00782100 	rsbseq	r2, r8, r0, lsl #2
    61a8:	7200711a 	andvc	r7, r0, #-2147483642	; 0x80000006
    61ac:	71211a00 	teqvc	r1, r0, lsl #20
    61b0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    61b4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    61b8:	71212517 	teqvc	r1, r7, lsl r5
    61bc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    61c0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    61c4:	27212517 			; <UNDEFINED> instruction: 0x27212517
    61c8:	14460071 	strbne	r0, [r6], #-113	; 0x71
    61cc:	20231f14 	eorcs	r1, r3, r4, lsl pc
    61d0:	21251724 	teqcs	r5, r4, lsr #14
    61d4:	f69f2227 			; <UNDEFINED> instruction: 0xf69f2227
    61d8:	8808004b 	stmdahi	r8, {r0, r1, r3, r6}
    61dc:	3608004c 	strcc	r0, [r8], -ip, asr #32
    61e0:	71007400 	tstvc	r0, r0, lsl #8
    61e4:	00722100 	rsbseq	r2, r2, r0, lsl #2
    61e8:	7100741a 	tstvc	r0, sl, lsl r4
    61ec:	74211a00 	strtvc	r1, [r1], #-2560	; 0xa00
    61f0:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    61f4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    61f8:	74212517 	strtvc	r2, [r1], #-1303	; 0x517
    61fc:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    6200:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    6204:	27212517 			; <UNDEFINED> instruction: 0x27212517
    6208:	14460074 	strbne	r0, [r6], #-116	; 0x74
    620c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    6210:	21251724 	teqcs	r5, r4, lsr #14
    6214:	889f2227 	ldmhi	pc, {r0, r1, r2, r5, r9, sp}	; <UNPREDICTABLE>
    6218:	0208004c 	andeq	r0, r8, #76	; 0x4c
    621c:	4008004d 	andmi	r0, r8, sp, asr #32
    6220:	7f949100 	svcvc	0x00949100
    6224:	21007406 	tstcs	r0, r6, lsl #8
    6228:	911a0071 	tstls	sl, r1, ror r0
    622c:	74067f94 	strvc	r7, [r6], #-3988	; 0xf94
    6230:	91211a00 	teqls	r1, r0, lsl #20
    6234:	3d067f94 	stccc	15, cr7, [r6, #-592]	; 0xfffffdb0
    6238:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    623c:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    6240:	7f949121 	svcvc	0x00949121
    6244:	14143206 	ldrne	r3, [r4], #-518	; 0x206
    6248:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    624c:	27212517 			; <UNDEFINED> instruction: 0x27212517
    6250:	067f9491 			; <UNDEFINED> instruction: 0x067f9491
    6254:	1f141446 	svcne	0x00141446
    6258:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    625c:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    6260:	004d029f 	umaaleq	r0, sp, pc, r2	; <UNPREDICTABLE>
    6264:	004d9a08 	subeq	r9, sp, r8, lsl #20
    6268:	91004408 	tstls	r0, r8, lsl #8
    626c:	91067f98 			; <UNDEFINED> instruction: 0x91067f98
    6270:	21067f94 			; <UNDEFINED> instruction: 0x21067f94
    6274:	911a0074 	tstls	sl, r4, ror r0
    6278:	91067f98 			; <UNDEFINED> instruction: 0x91067f98
    627c:	1a067f94 	bne	1a60d4 <__Stack_Size+0x1a58d4>
    6280:	7f989121 	svcvc	0x00989121
    6284:	14143d06 	ldrne	r3, [r4], #-3334	; 0xd06
    6288:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    628c:	91212517 	teqls	r1, r7, lsl r5
    6290:	32067f98 	andcc	r7, r6, #152, 30	; 0x260
    6294:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6298:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    629c:	98912721 	ldmls	r1, {r0, r5, r8, r9, sl, sp}
    62a0:	1446067f 	strbne	r0, [r6], #-1663	; 0x67f
    62a4:	20231f14 	eorcs	r1, r3, r4, lsl pc
    62a8:	21251724 	teqcs	r5, r4, lsr #14
    62ac:	9a9f2227 	bls	fe7ceb50 <BootRAM+0xd73f2f1>
    62b0:	5208004d 	andpl	r0, r8, #77	; 0x4d
    62b4:	4608004e 	strmi	r0, [r8], -lr, asr #32
    62b8:	7fa49100 	svcvc	0x00a49100
    62bc:	7f989106 	svcvc	0x00989106
    62c0:	94912106 	ldrls	r2, [r1], #262	; 0x106
    62c4:	911a067f 	tstls	sl, pc, ror r6
    62c8:	91067fa4 	smlatbls	r6, r4, pc, r7	; <UNPREDICTABLE>
    62cc:	1a067f98 	bne	1a6134 <__Stack_Size+0x1a5934>
    62d0:	7fa49121 	svcvc	0x00a49121
    62d4:	14143d06 	ldrne	r3, [r4], #-3334	; 0xd06
    62d8:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    62dc:	91212517 	teqls	r1, r7, lsl r5
    62e0:	32067fa4 	andcc	r7, r6, #164, 30	; 0x290
    62e4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    62e8:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    62ec:	a4912721 	ldrge	r2, [r1], #1825	; 0x721
    62f0:	1446067f 	strbne	r0, [r6], #-1663	; 0x67f
    62f4:	20231f14 	eorcs	r1, r3, r4, lsl pc
    62f8:	21251724 	teqcs	r5, r4, lsr #14
    62fc:	529f2227 	addspl	r2, pc, #1879048194	; 0x70000002
    6300:	dc08004e 	stcle	0, cr0, [r8], {78}	; 0x4e
    6304:	4608004e 	strmi	r0, [r8], -lr, asr #32
    6308:	7fa89100 	svcvc	0x00a89100
    630c:	7fa49106 	svcvc	0x00a49106
    6310:	98912106 	ldmls	r1, {r1, r2, r8, sp}
    6314:	911a067f 	tstls	sl, pc, ror r6
    6318:	91067fa8 	smlatbls	r6, r8, pc, r7	; <UNPREDICTABLE>
    631c:	1a067fa4 	bne	1a61b4 <__Stack_Size+0x1a59b4>
    6320:	7fa89121 	svcvc	0x00a89121
    6324:	14143d06 	ldrne	r3, [r4], #-3334	; 0xd06
    6328:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    632c:	91212517 	teqls	r1, r7, lsl r5
    6330:	32067fa8 	andcc	r7, r6, #168, 30	; 0x2a0
    6334:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6338:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    633c:	a8912721 	ldmge	r1, {r0, r5, r8, r9, sl, sp}
    6340:	1446067f 	strbne	r0, [r6], #-1663	; 0x67f
    6344:	20231f14 	eorcs	r1, r3, r4, lsl pc
    6348:	21251724 	teqcs	r5, r4, lsr #14
    634c:	dc9f2227 	lfmle	f2, 4, [pc], {39}	; 0x27
    6350:	6c08004e 	stcvs	0, cr0, [r8], {78}	; 0x4e
    6354:	4608004f 	strmi	r0, [r8], -pc, asr #32
    6358:	7f949100 	svcvc	0x00949100
    635c:	7fa89106 	svcvc	0x00a89106
    6360:	a4912106 	ldrge	r2, [r1], #262	; 0x106
    6364:	911a067f 	tstls	sl, pc, ror r6
    6368:	91067f94 			; <UNDEFINED> instruction: 0x91067f94
    636c:	1a067fa8 	bne	1a6214 <__Stack_Size+0x1a5a14>
    6370:	7f949121 	svcvc	0x00949121
    6374:	14143d06 	ldrne	r3, [r4], #-3334	; 0xd06
    6378:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    637c:	91212517 	teqls	r1, r7, lsl r5
    6380:	32067f94 	andcc	r7, r6, #148, 30	; 0x250
    6384:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6388:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    638c:	94912721 	ldrls	r2, [r1], #1825	; 0x721
    6390:	1446067f 	strbne	r0, [r6], #-1663	; 0x67f
    6394:	20231f14 	eorcs	r1, r3, r4, lsl pc
    6398:	21251724 	teqcs	r5, r4, lsr #14
    639c:	6c9f2227 	lfmvs	f2, 4, [pc], {39}	; 0x27
    63a0:	d408004f 	strle	r0, [r8], #-79	; 0x4f
    63a4:	4608004f 	strmi	r0, [r8], -pc, asr #32
    63a8:	7fb09100 	svcvc	0x00b09100
    63ac:	7f949106 	svcvc	0x00949106
    63b0:	a8912106 	ldmge	r1, {r1, r2, r8, sp}
    63b4:	911a067f 	tstls	sl, pc, ror r6
    63b8:	91067fb0 			; <UNDEFINED> instruction: 0x91067fb0
    63bc:	1a067f94 	bne	1a6214 <__Stack_Size+0x1a5a14>
    63c0:	7fb09121 	svcvc	0x00b09121
    63c4:	14143d06 	ldrne	r3, [r4], #-3334	; 0xd06
    63c8:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    63cc:	91212517 	teqls	r1, r7, lsl r5
    63d0:	32067fb0 	andcc	r7, r6, #176, 30	; 0x2c0
    63d4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    63d8:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    63dc:	b0912721 	addslt	r2, r1, r1, lsr #14
    63e0:	1446067f 	strbne	r0, [r6], #-1663	; 0x67f
    63e4:	20231f14 	eorcs	r1, r3, r4, lsl pc
    63e8:	21251724 	teqcs	r5, r4, lsr #14
    63ec:	d49f2227 	ldrle	r2, [pc], #551	; 63f4 <__Stack_Size+0x5bf4>
    63f0:	4808004f 	stmdami	r8, {r0, r1, r2, r3, r6}
    63f4:	3c080050 	stccc	0, cr0, [r8], {80}	; 0x50
    63f8:	91007300 	mrsls	r7, LR_irq
    63fc:	21067fb0 			; <UNDEFINED> instruction: 0x21067fb0
    6400:	067f9491 			; <UNDEFINED> instruction: 0x067f9491
    6404:	9100731a 	tstls	r0, sl, lsl r3
    6408:	1a067fb0 	bne	1a62d0 <__Stack_Size+0x1a5ad0>
    640c:	3d007321 	stccc	3, cr7, [r0, #-132]	; 0xffffff7c
    6410:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6414:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    6418:	32007321 	andcc	r7, r0, #-2080374784	; 0x84000000
    641c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6420:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    6424:	00732721 	rsbseq	r2, r3, r1, lsr #14
    6428:	1f141446 	svcne	0x00141446
    642c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    6430:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    6434:	0050489f 			; <UNDEFINED> instruction: 0x0050489f
    6438:	0050c408 	subseq	ip, r0, r8, lsl #8
    643c:	71003808 	tstvc	r0, r8, lsl #16
    6440:	21007300 	mrscs	r7, LR_irq
    6444:	067fb091 			; <UNDEFINED> instruction: 0x067fb091
    6448:	7300711a 	movwvc	r7, #282	; 0x11a
    644c:	71211a00 	teqvc	r1, r0, lsl #20
    6450:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    6454:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    6458:	71212517 	teqvc	r1, r7, lsl r5
    645c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    6460:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    6464:	27212517 			; <UNDEFINED> instruction: 0x27212517
    6468:	14460071 	strbne	r0, [r6], #-113	; 0x71
    646c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    6470:	21251724 	teqcs	r5, r4, lsr #14
    6474:	009f2227 	addseq	r2, pc, r7, lsr #4
    6478:	00000000 	andeq	r0, r0, r0
    647c:	56000000 	strpl	r0, [r0], -r0
    6480:	8c080032 	stchi	0, cr0, [r8], {50}	; 0x32
    6484:	06080032 			; <UNDEFINED> instruction: 0x06080032
    6488:	04935900 	ldreq	r5, [r3], #2304	; 0x900
    648c:	8c01fc93 	stchi	12, cr15, [r1], {147}	; 0x93
    6490:	90080032 	andls	r0, r8, r2, lsr r0
    6494:	09080032 	stmdbeq	r8, {r1, r4, r5}
    6498:	04935900 	ldreq	r5, [r3], #2304	; 0x900
    649c:	93049354 	movwls	r9, #17236	; 0x4354
    64a0:	329001f8 	addscc	r0, r0, #248, 2	; 0x3e
    64a4:	32a00800 	adccc	r0, r0, #0, 16
    64a8:	000b0800 	andeq	r0, fp, r0, lsl #16
    64ac:	91049359 	tstls	r4, r9, asr r3
    64b0:	04937fa4 	ldreq	r7, [r3], #4004	; 0xfa4
    64b4:	a001f893 	mulge	r1, r3, r8
    64b8:	f6080032 			; <UNDEFINED> instruction: 0xf6080032
    64bc:	0c080032 	stceq	0, cr0, [r8], {50}	; 0x32
    64c0:	935c9100 	cmpls	ip, #0, 2
    64c4:	7fa49104 	svcvc	0x00a49104
    64c8:	f8930493 			; <UNDEFINED> instruction: 0xf8930493
    64cc:	0032f601 	eorseq	pc, r2, r1, lsl #12
    64d0:	00331408 	eorseq	r1, r3, r8, lsl #8
    64d4:	91000f08 	tstls	r0, r8, lsl #30
    64d8:	9104935c 	tstls	r4, ip, asr r3
    64dc:	04937fa4 	ldreq	r7, [r3], #4004	; 0xfa4
    64e0:	93049354 	movwls	r9, #17236	; 0x4354
    64e4:	331401f4 	tstcc	r4, #244, 2	; 0x3d
    64e8:	331a0800 	tstcc	sl, #0, 16
    64ec:	000f0800 	andeq	r0, pc, r0, lsl #16
    64f0:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    64f4:	937fa491 	cmnls	pc, #-1862270976	; 0x91000000
    64f8:	04935704 	ldreq	r5, [r3], #1796	; 0x704
    64fc:	1a01f493 	bne	83750 <__Stack_Size+0x82f50>
    6500:	62080033 	andvs	r0, r8, #51	; 0x33
    6504:	11080033 	tstne	r8, r3, lsr r0
    6508:	935c9100 	cmpls	ip, #0, 2
    650c:	7fa49104 	svcvc	0x00a49104
    6510:	a8910493 	ldmge	r1, {r0, r1, r4, r7, sl}
    6514:	9304937f 	movwls	r9, #17279	; 0x437f
    6518:	336201f4 	cmncc	r2, #244, 2	; 0x3d
    651c:	33720800 	cmncc	r2, #0, 16
    6520:	00140800 	andseq	r0, r4, r0, lsl #16
    6524:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    6528:	937fa491 	cmnls	pc, #-1862270976	; 0x91000000
    652c:	7fa89104 	svcvc	0x00a89104
    6530:	93540493 	cmpls	r4, #-1828716544	; 0x93000000
    6534:	01f09304 	mvnseq	r9, r4, lsl #6
    6538:	08003372 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, ip, sp}
    653c:	0800337c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, ip, sp}
    6540:	5c910014 	ldcpl	0, cr0, [r1], {20}
    6544:	a4910493 	ldrge	r0, [r1], #1171	; 0x493
    6548:	9104937f 	tstls	r4, pc, ror r3
    654c:	04937fa8 	ldreq	r7, [r3], #4008	; 0xfa8
    6550:	93049353 	movwls	r9, #17235	; 0x4353
    6554:	337c01f0 	cmncc	ip, #240, 2	; 0x3c
    6558:	33e20800 	mvncc	r0, #0, 16
    655c:	00160800 	andseq	r0, r6, r0, lsl #16
    6560:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    6564:	937fa491 	cmnls	pc, #-1862270976	; 0x91000000
    6568:	7fa89104 	svcvc	0x00a89104
    656c:	ac910493 	cfldrsge	mvf0, [r1], {147}	; 0x93
    6570:	9304937f 	movwls	r9, #17279	; 0x437f
    6574:	33e201f0 	mvncc	r0, #240, 2	; 0x3c
    6578:	33ec0800 	mvncc	r0, #0, 16
    657c:	00190800 	andseq	r0, r9, r0, lsl #16
    6580:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    6584:	937fa491 	cmnls	pc, #-1862270976	; 0x91000000
    6588:	7fa89104 	svcvc	0x00a89104
    658c:	ac910493 	cfldrsge	mvf0, [r1], {147}	; 0x93
    6590:	5804937f 	stmdapl	r4, {r0, r1, r2, r3, r4, r5, r6, r8, r9, ip, pc}
    6594:	ec930493 	cfldrs	mvf0, [r3], {147}	; 0x93
    6598:	0033ec01 	eorseq	lr, r3, r1, lsl #24
    659c:	00347608 	eorseq	r7, r4, r8, lsl #12
    65a0:	91001b08 	tstls	r0, r8, lsl #22
    65a4:	9104935c 	tstls	r4, ip, asr r3
    65a8:	04937fa4 	ldreq	r7, [r3], #4004	; 0xfa4
    65ac:	937fa891 	cmnls	pc, #9502720	; 0x910000
    65b0:	7fac9104 	svcvc	0x00ac9104
    65b4:	b0910493 	umullslt	r0, r1, r3, r4
    65b8:	9304937f 	movwls	r9, #17279	; 0x437f
    65bc:	347601ec 	ldrbtcc	r0, [r6], #-492	; 0x1ec
    65c0:	34f20800 	ldrbtcc	r0, [r2], #2048	; 0x800
    65c4:	00200800 	eoreq	r0, r0, r0, lsl #16
    65c8:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    65cc:	937fa491 	cmnls	pc, #-1862270976	; 0x91000000
    65d0:	7fa89104 	svcvc	0x00a89104
    65d4:	ac910493 	cfldrsge	mvf0, [r1], {147}	; 0x93
    65d8:	9104937f 	tstls	r4, pc, ror r3
    65dc:	04937fb0 	ldreq	r7, [r3], #4016	; 0xfb0
    65e0:	937fb491 	cmnls	pc, #-1862270976	; 0x91000000
    65e4:	01e89304 	mvneq	r9, r4, lsl #6
    65e8:	080034f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl, ip, sp}
    65ec:	080034f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, ip, sp}
    65f0:	5c910023 	ldcpl	0, cr0, [r1], {35}	; 0x23
    65f4:	a4910493 	ldrge	r0, [r1], #1171	; 0x493
    65f8:	9104937f 	tstls	r4, pc, ror r3
    65fc:	04937fa8 	ldreq	r7, [r3], #4008	; 0xfa8
    6600:	937fac91 	cmnls	pc, #37120	; 0x9100
    6604:	7fb09104 	svcvc	0x00b09104
    6608:	b4910493 	ldrlt	r0, [r1], #1171	; 0x493
    660c:	5b04937f 	blpl	12b410 <__Stack_Size+0x12ac10>
    6610:	e4930493 	ldr	r0, [r3], #1171	; 0x493
    6614:	0034f601 	eorseq	pc, r4, r1, lsl #12
    6618:	00357208 	eorseq	r7, r5, r8, lsl #4
    661c:	91002508 	tstls	r0, r8, lsl #10
    6620:	9104935c 	tstls	r4, ip, asr r3
    6624:	04937fa4 	ldreq	r7, [r3], #4004	; 0xfa4
    6628:	937fa891 	cmnls	pc, #9502720	; 0x910000
    662c:	7fac9104 	svcvc	0x00ac9104
    6630:	b0910493 	umullslt	r0, r1, r3, r4
    6634:	9104937f 	tstls	r4, pc, ror r3
    6638:	04937fb4 	ldreq	r7, [r3], #4020	; 0xfb4
    663c:	937fb891 	cmnls	pc, #9502720	; 0x910000
    6640:	01e49304 	mvneq	r9, r4, lsl #6
    6644:	08003572 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, ip, sp}
    6648:	08003592 	stmdaeq	r0, {r1, r4, r7, r8, sl, ip, sp}
    664c:	5c910028 	ldcpl	0, cr0, [r1], {40}	; 0x28
    6650:	a4910493 	ldrge	r0, [r1], #1171	; 0x493
    6654:	9104937f 	tstls	r4, pc, ror r3
    6658:	04937fa8 	ldreq	r7, [r3], #4008	; 0xfa8
    665c:	937fac91 	cmnls	pc, #37120	; 0x9100
    6660:	7fb09104 	svcvc	0x00b09104
    6664:	b4910493 	ldrlt	r0, [r1], #1171	; 0x493
    6668:	9104937f 	tstls	r4, pc, ror r3
    666c:	04937fb8 	ldreq	r7, [r3], #4024	; 0xfb8
    6670:	9304935b 	movwls	r9, #17243	; 0x435b
    6674:	359201e0 	ldrcc	r0, [r2, #480]	; 0x1e0
    6678:	3a6e0800 	bcc	1b88680 <__Stack_Size+0x1b87e80>
    667c:	002a0800 	eoreq	r0, sl, r0, lsl #16
    6680:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    6684:	937fa491 	cmnls	pc, #-1862270976	; 0x91000000
    6688:	7fa89104 	svcvc	0x00a89104
    668c:	ac910493 	cfldrsge	mvf0, [r1], {147}	; 0x93
    6690:	9104937f 	tstls	r4, pc, ror r3
    6694:	04937fb0 	ldreq	r7, [r3], #4016	; 0xfb0
    6698:	937fb491 	cmnls	pc, #-1862270976	; 0x91000000
    669c:	7fb89104 	svcvc	0x00b89104
    66a0:	bc910493 	cfldrslt	mvf0, [r1], {147}	; 0x93
    66a4:	9304937f 	movwls	r9, #17279	; 0x437f
    66a8:	3a6e01e0 	bcc	1b86e30 <__Stack_Size+0x1b86630>
    66ac:	3ad60800 	bcc	ff5886b4 <BootRAM+0xe4f8e55>
    66b0:	00590800 	subseq	r0, r9, r0, lsl #16
    66b4:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    66b8:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    66bc:	08019404 	stmdaeq	r1, {r2, sl, ip, pc}
    66c0:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    66c4:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    66c8:	08019405 	stmdaeq	r1, {r0, r2, sl, ip, pc}
    66cc:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    66d0:	5101f321 	tstpl	r1, r1, lsr #6
    66d4:	01940623 	orrseq	r0, r4, r3, lsr #12
    66d8:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    66dc:	01f32124 	mvnseq	r2, r4, lsr #2
    66e0:	94072351 	strls	r2, [r7], #-849	; 0x351
    66e4:	1aff0801 	bne	fffc86f0 <BootRAM+0xef38e91>
    66e8:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    66ec:	937fa891 	cmnls	pc, #9502720	; 0x910000
    66f0:	7fac9104 	svcvc	0x00ac9104
    66f4:	b0910493 	umullslt	r0, r1, r3, r4
    66f8:	9104937f 	tstls	r4, pc, ror r3
    66fc:	04937fb4 	ldreq	r7, [r3], #4020	; 0xfb4
    6700:	937fb891 	cmnls	pc, #9502720	; 0x910000
    6704:	7fbc9104 	svcvc	0x00bc9104
    6708:	e0930493 	umulls	r0, r3, r3, r4
    670c:	003ad601 	eorseq	sp, sl, r1, lsl #12
    6710:	003b5208 	eorseq	r5, fp, r8, lsl #4
    6714:	91008808 	tstls	r0, r8, lsl #16
    6718:	f304935c 	vcge.u8	<illegal reg q4.5>, q2, q6
    671c:	04235101 	strteq	r5, [r3], #-257	; 0x101
    6720:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6724:	f324481a 	vceq.i32	d4, d4, d10
    6728:	05235101 	streq	r5, [r3, #-257]!	; 0x101
    672c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6730:	2124401a 	teqcs	r4, sl, lsl r0
    6734:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6738:	08019406 	stmdaeq	r1, {r1, r2, sl, ip, pc}
    673c:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6740:	5101f321 	tstpl	r1, r1, lsr #6
    6744:	01940723 	orrseq	r0, r4, r3, lsr #14
    6748:	211aff08 	tstcs	sl, r8, lsl #30
    674c:	f304939f 	vcge.u8	d9, d20, d15
    6750:	08235101 	stmdaeq	r3!, {r0, r8, ip, lr}
    6754:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6758:	f324481a 	vceq.i32	d4, d4, d10
    675c:	09235101 	stmdbeq	r3!, {r0, r8, ip, lr}
    6760:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6764:	2124401a 	teqcs	r4, sl, lsl r0
    6768:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    676c:	0801940a 	stmdaeq	r1, {r1, r3, sl, ip, pc}
    6770:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6774:	5101f321 	tstpl	r1, r1, lsr #6
    6778:	01940b23 	orrseq	r0, r4, r3, lsr #22
    677c:	211aff08 	tstcs	sl, r8, lsl #30
    6780:	9104939f 			; <UNDEFINED> instruction: 0x9104939f
    6784:	04937fac 	ldreq	r7, [r3], #4012	; 0xfac
    6788:	937fb091 	cmnls	pc, #145	; 0x91
    678c:	7fb49104 	svcvc	0x00b49104
    6790:	b8910493 	ldmlt	r1, {r0, r1, r4, r7, sl}
    6794:	9104937f 	tstls	r4, pc, ror r3
    6798:	04937fbc 	ldreq	r7, [r3], #4028	; 0xfbc
    679c:	5201e093 	andpl	lr, r1, #147	; 0x93
    67a0:	9e08003b 	mcrls	0, 0, r0, cr8, cr11, {1}
    67a4:	b708003b 	smladxlt	r8, fp, r0, r0
    67a8:	935c9100 	cmpls	ip, #0, 2
    67ac:	5101f304 	tstpl	r1, r4, lsl #6
    67b0:	01940423 	orrseq	r0, r4, r3, lsr #8
    67b4:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    67b8:	5101f324 	tstpl	r1, r4, lsr #6
    67bc:	01940523 	orrseq	r0, r4, r3, lsr #10
    67c0:	401aff08 	andsmi	pc, sl, r8, lsl #30
    67c4:	01f32124 	mvnseq	r2, r4, lsr #2
    67c8:	94062351 	strls	r2, [r6], #-849	; 0x351
    67cc:	1aff0801 	bne	fffc87d8 <BootRAM+0xef38f79>
    67d0:	f3212438 	vqshl.u32	d2, d24, d1
    67d4:	07235101 	streq	r5, [r3, -r1, lsl #2]!
    67d8:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    67dc:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    67e0:	5101f304 	tstpl	r1, r4, lsl #6
    67e4:	01940823 	orrseq	r0, r4, r3, lsr #16
    67e8:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    67ec:	5101f324 	tstpl	r1, r4, lsr #6
    67f0:	01940923 	orrseq	r0, r4, r3, lsr #18
    67f4:	401aff08 	andsmi	pc, sl, r8, lsl #30
    67f8:	01f32124 	mvnseq	r2, r4, lsr #2
    67fc:	940a2351 	strls	r2, [sl], #-849	; 0x351
    6800:	1aff0801 	bne	fffc880c <BootRAM+0xef38fad>
    6804:	f3212438 	vqshl.u32	d2, d24, d1
    6808:	0b235101 	bleq	8dac14 <__Stack_Size+0x8da414>
    680c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6810:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6814:	5101f304 	tstpl	r1, r4, lsl #6
    6818:	01940c23 	orrseq	r0, r4, r3, lsr #24
    681c:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6820:	5101f324 	tstpl	r1, r4, lsr #6
    6824:	01940d23 	orrseq	r0, r4, r3, lsr #26
    6828:	401aff08 	andsmi	pc, sl, r8, lsl #30
    682c:	01f32124 	mvnseq	r2, r4, lsr #2
    6830:	940e2351 	strls	r2, [lr], #-849	; 0x351
    6834:	1aff0801 	bne	fffc8840 <BootRAM+0xef38fe1>
    6838:	f3212438 	vqshl.u32	d2, d24, d1
    683c:	0f235101 	svceq	0x00235101
    6840:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6844:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6848:	7fb09104 	svcvc	0x00b09104
    684c:	b4910493 	ldrlt	r0, [r1], #1171	; 0x493
    6850:	9104937f 	tstls	r4, pc, ror r3
    6854:	04937fb8 	ldreq	r7, [r3], #4024	; 0xfb8
    6858:	937fbc91 	cmnls	pc, #37120	; 0x9100
    685c:	01e09304 	mvneq	r9, r4, lsl #6
    6860:	08003b9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp, ip, sp}
    6864:	08003c32 	stmdaeq	r0, {r1, r4, r5, sl, fp, ip, sp}
    6868:	5c9100e6 	ldcpl	0, cr0, [r1], {230}	; 0xe6
    686c:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    6870:	94042351 	strls	r2, [r4], #-849	; 0x351
    6874:	1aff0801 	bne	fffc8880 <BootRAM+0xef39021>
    6878:	01f32448 	mvnseq	r2, r8, asr #8
    687c:	94052351 	strls	r2, [r5], #-849	; 0x351
    6880:	1aff0801 	bne	fffc888c <BootRAM+0xef3902d>
    6884:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    6888:	06235101 	strteq	r5, [r3], -r1, lsl #2
    688c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6890:	2124381a 	teqcs	r4, sl, lsl r8
    6894:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6898:	08019407 	stmdaeq	r1, {r0, r1, r2, sl, ip, pc}
    689c:	9f211aff 	svcls	0x00211aff
    68a0:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    68a4:	94082351 	strls	r2, [r8], #-849	; 0x351
    68a8:	1aff0801 	bne	fffc88b4 <BootRAM+0xef39055>
    68ac:	01f32448 	mvnseq	r2, r8, asr #8
    68b0:	94092351 	strls	r2, [r9], #-849	; 0x351
    68b4:	1aff0801 	bne	fffc88c0 <BootRAM+0xef39061>
    68b8:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    68bc:	0a235101 	beq	8dacc8 <__Stack_Size+0x8da4c8>
    68c0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    68c4:	2124381a 	teqcs	r4, sl, lsl r8
    68c8:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    68cc:	0801940b 	stmdaeq	r1, {r0, r1, r3, sl, ip, pc}
    68d0:	9f211aff 	svcls	0x00211aff
    68d4:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    68d8:	940c2351 	strls	r2, [ip], #-849	; 0x351
    68dc:	1aff0801 	bne	fffc88e8 <BootRAM+0xef39089>
    68e0:	01f32448 	mvnseq	r2, r8, asr #8
    68e4:	940d2351 	strls	r2, [sp], #-849	; 0x351
    68e8:	1aff0801 	bne	fffc88f4 <BootRAM+0xef39095>
    68ec:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    68f0:	0e235101 	sufeqs	f5, f3, f1
    68f4:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    68f8:	2124381a 	teqcs	r4, sl, lsl r8
    68fc:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6900:	0801940f 	stmdaeq	r1, {r0, r1, r2, r3, sl, ip, pc}
    6904:	9f211aff 	svcls	0x00211aff
    6908:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    690c:	94102351 	ldrls	r2, [r0], #-849	; 0x351
    6910:	1aff0801 	bne	fffc891c <BootRAM+0xef390bd>
    6914:	01f32448 	mvnseq	r2, r8, asr #8
    6918:	94112351 	ldrls	r2, [r1], #-849	; 0x351
    691c:	1aff0801 	bne	fffc8928 <BootRAM+0xef390c9>
    6920:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    6924:	12235101 	eorne	r5, r3, #1073741824	; 0x40000000
    6928:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    692c:	2124381a 	teqcs	r4, sl, lsl r8
    6930:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6934:	08019413 	stmdaeq	r1, {r0, r1, r4, sl, ip, pc}
    6938:	9f211aff 	svcls	0x00211aff
    693c:	b4910493 	ldrlt	r0, [r1], #1171	; 0x493
    6940:	9104937f 	tstls	r4, pc, ror r3
    6944:	04937fb8 	ldreq	r7, [r3], #4024	; 0xfb8
    6948:	937fbc91 	cmnls	pc, #37120	; 0x9100
    694c:	01e09304 	mvneq	r9, r4, lsl #6
    6950:	08003c32 	stmdaeq	r0, {r1, r4, r5, sl, fp, ip, sp}
    6954:	08003cea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, fp, ip, sp}
    6958:	5c910115 	ldfpls	f0, [r1], {21}
    695c:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    6960:	94042351 	strls	r2, [r4], #-849	; 0x351
    6964:	1aff0801 	bne	fffc8970 <BootRAM+0xef39111>
    6968:	01f32448 	mvnseq	r2, r8, asr #8
    696c:	94052351 	strls	r2, [r5], #-849	; 0x351
    6970:	1aff0801 	bne	fffc897c <BootRAM+0xef3911d>
    6974:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    6978:	06235101 	strteq	r5, [r3], -r1, lsl #2
    697c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6980:	2124381a 	teqcs	r4, sl, lsl r8
    6984:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6988:	08019407 	stmdaeq	r1, {r0, r1, r2, sl, ip, pc}
    698c:	9f211aff 	svcls	0x00211aff
    6990:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    6994:	94082351 	strls	r2, [r8], #-849	; 0x351
    6998:	1aff0801 	bne	fffc89a4 <BootRAM+0xef39145>
    699c:	01f32448 	mvnseq	r2, r8, asr #8
    69a0:	94092351 	strls	r2, [r9], #-849	; 0x351
    69a4:	1aff0801 	bne	fffc89b0 <BootRAM+0xef39151>
    69a8:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    69ac:	0a235101 	beq	8dadb8 <__Stack_Size+0x8da5b8>
    69b0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    69b4:	2124381a 	teqcs	r4, sl, lsl r8
    69b8:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    69bc:	0801940b 	stmdaeq	r1, {r0, r1, r3, sl, ip, pc}
    69c0:	9f211aff 	svcls	0x00211aff
    69c4:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    69c8:	940c2351 	strls	r2, [ip], #-849	; 0x351
    69cc:	1aff0801 	bne	fffc89d8 <BootRAM+0xef39179>
    69d0:	01f32448 	mvnseq	r2, r8, asr #8
    69d4:	940d2351 	strls	r2, [sp], #-849	; 0x351
    69d8:	1aff0801 	bne	fffc89e4 <BootRAM+0xef39185>
    69dc:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    69e0:	0e235101 	sufeqs	f5, f3, f1
    69e4:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    69e8:	2124381a 	teqcs	r4, sl, lsl r8
    69ec:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    69f0:	0801940f 	stmdaeq	r1, {r0, r1, r2, r3, sl, ip, pc}
    69f4:	9f211aff 	svcls	0x00211aff
    69f8:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    69fc:	94102351 	ldrls	r2, [r0], #-849	; 0x351
    6a00:	1aff0801 	bne	fffc8a0c <BootRAM+0xef391ad>
    6a04:	01f32448 	mvnseq	r2, r8, asr #8
    6a08:	94112351 	ldrls	r2, [r1], #-849	; 0x351
    6a0c:	1aff0801 	bne	fffc8a18 <BootRAM+0xef391b9>
    6a10:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    6a14:	12235101 	eorne	r5, r3, #1073741824	; 0x40000000
    6a18:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6a1c:	2124381a 	teqcs	r4, sl, lsl r8
    6a20:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6a24:	08019413 	stmdaeq	r1, {r0, r1, r4, sl, ip, pc}
    6a28:	9f211aff 	svcls	0x00211aff
    6a2c:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    6a30:	94142351 	ldrls	r2, [r4], #-849	; 0x351
    6a34:	1aff0801 	bne	fffc8a40 <BootRAM+0xef391e1>
    6a38:	01f32448 	mvnseq	r2, r8, asr #8
    6a3c:	94152351 	ldrls	r2, [r5], #-849	; 0x351
    6a40:	1aff0801 	bne	fffc8a4c <BootRAM+0xef391ed>
    6a44:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    6a48:	16235101 	strtne	r5, [r3], -r1, lsl #2
    6a4c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6a50:	2124381a 	teqcs	r4, sl, lsl r8
    6a54:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6a58:	08019417 	stmdaeq	r1, {r0, r1, r2, r4, sl, ip, pc}
    6a5c:	9f211aff 	svcls	0x00211aff
    6a60:	b8910493 	ldmlt	r1, {r0, r1, r4, r7, sl}
    6a64:	9104937f 	tstls	r4, pc, ror r3
    6a68:	04937fbc 	ldreq	r7, [r3], #4028	; 0xfbc
    6a6c:	ea01e093 	b	7ecc0 <__Stack_Size+0x7e4c0>
    6a70:	6e08003c 	mcrvs	0, 0, r0, cr8, cr12, {1}
    6a74:	4408003d 	strmi	r0, [r8], #-61	; 0x3d
    6a78:	935c9101 	cmpls	ip, #1073741824	; 0x40000000
    6a7c:	5101f304 	tstpl	r1, r4, lsl #6
    6a80:	01940423 	orrseq	r0, r4, r3, lsr #8
    6a84:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6a88:	5101f324 	tstpl	r1, r4, lsr #6
    6a8c:	01940523 	orrseq	r0, r4, r3, lsr #10
    6a90:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6a94:	01f32124 	mvnseq	r2, r4, lsr #2
    6a98:	94062351 	strls	r2, [r6], #-849	; 0x351
    6a9c:	1aff0801 	bne	fffc8aa8 <BootRAM+0xef39249>
    6aa0:	f3212438 	vqshl.u32	d2, d24, d1
    6aa4:	07235101 	streq	r5, [r3, -r1, lsl #2]!
    6aa8:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6aac:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6ab0:	5101f304 	tstpl	r1, r4, lsl #6
    6ab4:	01940823 	orrseq	r0, r4, r3, lsr #16
    6ab8:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6abc:	5101f324 	tstpl	r1, r4, lsr #6
    6ac0:	01940923 	orrseq	r0, r4, r3, lsr #18
    6ac4:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6ac8:	01f32124 	mvnseq	r2, r4, lsr #2
    6acc:	940a2351 	strls	r2, [sl], #-849	; 0x351
    6ad0:	1aff0801 	bne	fffc8adc <BootRAM+0xef3927d>
    6ad4:	f3212438 	vqshl.u32	d2, d24, d1
    6ad8:	0b235101 	bleq	8daee4 <__Stack_Size+0x8da6e4>
    6adc:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6ae0:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6ae4:	5101f304 	tstpl	r1, r4, lsl #6
    6ae8:	01940c23 	orrseq	r0, r4, r3, lsr #24
    6aec:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6af0:	5101f324 	tstpl	r1, r4, lsr #6
    6af4:	01940d23 	orrseq	r0, r4, r3, lsr #26
    6af8:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6afc:	01f32124 	mvnseq	r2, r4, lsr #2
    6b00:	940e2351 	strls	r2, [lr], #-849	; 0x351
    6b04:	1aff0801 	bne	fffc8b10 <BootRAM+0xef392b1>
    6b08:	f3212438 	vqshl.u32	d2, d24, d1
    6b0c:	0f235101 	svceq	0x00235101
    6b10:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6b14:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6b18:	5101f304 	tstpl	r1, r4, lsl #6
    6b1c:	01941023 	orrseq	r1, r4, r3, lsr #32
    6b20:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6b24:	5101f324 	tstpl	r1, r4, lsr #6
    6b28:	01941123 	orrseq	r1, r4, r3, lsr #2
    6b2c:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6b30:	01f32124 	mvnseq	r2, r4, lsr #2
    6b34:	94122351 	ldrls	r2, [r2], #-849	; 0x351
    6b38:	1aff0801 	bne	fffc8b44 <BootRAM+0xef392e5>
    6b3c:	f3212438 	vqshl.u32	d2, d24, d1
    6b40:	13235101 	teqne	r3, #1073741824	; 0x40000000
    6b44:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6b48:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6b4c:	5101f304 	tstpl	r1, r4, lsl #6
    6b50:	01941423 	orrseq	r1, r4, r3, lsr #8
    6b54:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6b58:	5101f324 	tstpl	r1, r4, lsr #6
    6b5c:	01941523 	orrseq	r1, r4, r3, lsr #10
    6b60:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6b64:	01f32124 	mvnseq	r2, r4, lsr #2
    6b68:	94162351 	ldrls	r2, [r6], #-849	; 0x351
    6b6c:	1aff0801 	bne	fffc8b78 <BootRAM+0xef39319>
    6b70:	f3212438 	vqshl.u32	d2, d24, d1
    6b74:	17235101 	strne	r5, [r3, -r1, lsl #2]!
    6b78:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6b7c:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6b80:	5101f304 	tstpl	r1, r4, lsl #6
    6b84:	01941823 	orrseq	r1, r4, r3, lsr #16
    6b88:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6b8c:	5101f324 	tstpl	r1, r4, lsr #6
    6b90:	01941923 	orrseq	r1, r4, r3, lsr #18
    6b94:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6b98:	01f32124 	mvnseq	r2, r4, lsr #2
    6b9c:	941a2351 	ldrls	r2, [sl], #-849	; 0x351
    6ba0:	1aff0801 	bne	fffc8bac <BootRAM+0xef3934d>
    6ba4:	f3212438 	vqshl.u32	d2, d24, d1
    6ba8:	1b235101 	blne	8dafb4 <__Stack_Size+0x8da7b4>
    6bac:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6bb0:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6bb4:	7fbc9104 	svcvc	0x00bc9104
    6bb8:	e0930493 	umulls	r0, r3, r3, r4
    6bbc:	003d6e01 	eorseq	r6, sp, r1, lsl #28
    6bc0:	0050e608 	subseq	lr, r0, r8, lsl #12
    6bc4:	91017308 	tstls	r1, r8, lsl #6
    6bc8:	f304935c 	vcge.u8	<illegal reg q4.5>, q2, q6
    6bcc:	04235101 	strteq	r5, [r3], #-257	; 0x101
    6bd0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6bd4:	f324481a 	vceq.i32	d4, d4, d10
    6bd8:	05235101 	streq	r5, [r3, #-257]!	; 0x101
    6bdc:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6be0:	2124401a 	teqcs	r4, sl, lsl r0
    6be4:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6be8:	08019406 	stmdaeq	r1, {r1, r2, sl, ip, pc}
    6bec:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6bf0:	5101f321 	tstpl	r1, r1, lsr #6
    6bf4:	01940723 	orrseq	r0, r4, r3, lsr #14
    6bf8:	211aff08 	tstcs	sl, r8, lsl #30
    6bfc:	f304939f 	vcge.u8	d9, d20, d15
    6c00:	08235101 	stmdaeq	r3!, {r0, r8, ip, lr}
    6c04:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6c08:	f324481a 	vceq.i32	d4, d4, d10
    6c0c:	09235101 	stmdbeq	r3!, {r0, r8, ip, lr}
    6c10:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6c14:	2124401a 	teqcs	r4, sl, lsl r0
    6c18:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6c1c:	0801940a 	stmdaeq	r1, {r1, r3, sl, ip, pc}
    6c20:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6c24:	5101f321 	tstpl	r1, r1, lsr #6
    6c28:	01940b23 	orrseq	r0, r4, r3, lsr #22
    6c2c:	211aff08 	tstcs	sl, r8, lsl #30
    6c30:	f304939f 	vcge.u8	d9, d20, d15
    6c34:	0c235101 	stfeqs	f5, [r3], #-4
    6c38:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6c3c:	f324481a 	vceq.i32	d4, d4, d10
    6c40:	0d235101 	stfeqs	f5, [r3, #-4]!
    6c44:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6c48:	2124401a 	teqcs	r4, sl, lsl r0
    6c4c:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6c50:	0801940e 	stmdaeq	r1, {r1, r2, r3, sl, ip, pc}
    6c54:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6c58:	5101f321 	tstpl	r1, r1, lsr #6
    6c5c:	01940f23 	orrseq	r0, r4, r3, lsr #30
    6c60:	211aff08 	tstcs	sl, r8, lsl #30
    6c64:	f304939f 	vcge.u8	d9, d20, d15
    6c68:	10235101 	eorne	r5, r3, r1, lsl #2
    6c6c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6c70:	f324481a 	vceq.i32	d4, d4, d10
    6c74:	11235101 	teqne	r3, r1, lsl #2
    6c78:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6c7c:	2124401a 	teqcs	r4, sl, lsl r0
    6c80:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6c84:	08019412 	stmdaeq	r1, {r1, r4, sl, ip, pc}
    6c88:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6c8c:	5101f321 	tstpl	r1, r1, lsr #6
    6c90:	01941323 	orrseq	r1, r4, r3, lsr #6
    6c94:	211aff08 	tstcs	sl, r8, lsl #30
    6c98:	f304939f 	vcge.u8	d9, d20, d15
    6c9c:	14235101 	strtne	r5, [r3], #-257	; 0x101
    6ca0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6ca4:	f324481a 	vceq.i32	d4, d4, d10
    6ca8:	15235101 	strne	r5, [r3, #-257]!	; 0x101
    6cac:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6cb0:	2124401a 	teqcs	r4, sl, lsl r0
    6cb4:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6cb8:	08019416 	stmdaeq	r1, {r1, r2, r4, sl, ip, pc}
    6cbc:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6cc0:	5101f321 	tstpl	r1, r1, lsr #6
    6cc4:	01941723 	orrseq	r1, r4, r3, lsr #14
    6cc8:	211aff08 	tstcs	sl, r8, lsl #30
    6ccc:	f304939f 	vcge.u8	d9, d20, d15
    6cd0:	18235101 	stmdane	r3!, {r0, r8, ip, lr}
    6cd4:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6cd8:	f324481a 	vceq.i32	d4, d4, d10
    6cdc:	19235101 	stmdbne	r3!, {r0, r8, ip, lr}
    6ce0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6ce4:	2124401a 	teqcs	r4, sl, lsl r0
    6ce8:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6cec:	0801941a 	stmdaeq	r1, {r1, r3, r4, sl, ip, pc}
    6cf0:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6cf4:	5101f321 	tstpl	r1, r1, lsr #6
    6cf8:	01941b23 	orrseq	r1, r4, r3, lsr #22
    6cfc:	211aff08 	tstcs	sl, r8, lsl #30
    6d00:	f304939f 	vcge.u8	d9, d20, d15
    6d04:	1c235101 	stfnes	f5, [r3], #-4
    6d08:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6d0c:	f324481a 	vceq.i32	d4, d4, d10
    6d10:	1d235101 	stfnes	f5, [r3, #-4]!
    6d14:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6d18:	2124401a 	teqcs	r4, sl, lsl r0
    6d1c:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6d20:	0801941e 	stmdaeq	r1, {r1, r2, r3, r4, sl, ip, pc}
    6d24:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6d28:	5101f321 	tstpl	r1, r1, lsr #6
    6d2c:	01941f23 	orrseq	r1, r4, r3, lsr #30
    6d30:	211aff08 	tstcs	sl, r8, lsl #30
    6d34:	9304939f 	movwls	r9, #17311	; 0x439f
    6d38:	50e601e0 	rscpl	r0, r6, r0, ror #3
    6d3c:	51080800 	tstpl	r8, r0, lsl #16
    6d40:	00070800 	andeq	r0, r7, r0, lsl #16
    6d44:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    6d48:	0801fc93 	stmdaeq	r1, {r0, r1, r4, r7, sl, fp, ip, sp, lr, pc}
    6d4c:	20080051 	andcs	r0, r8, r1, asr r0
    6d50:	07080051 	smlsdeq	r8, r1, r0, r0
    6d54:	935c7d00 	cmpls	ip, #0, 26
    6d58:	01fc9304 	mvnseq	r9, r4, lsl #6
	...
    6d64:	08003938 	stmdaeq	r0, {r3, r4, r5, r8, fp, ip, sp}
    6d68:	0800393c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip, sp}
    6d6c:	a4540001 	ldrbge	r0, [r4], #-1
    6d70:	ec080039 	stc	0, cr0, [r8], {57}	; 0x39
    6d74:	0108003c 	tsteq	r8, ip, lsr r0
    6d78:	3d785500 	cfldr64cc	mvdx5, [r8, #-0]
    6d7c:	3f360800 	svccc	0x00360800
    6d80:	00010800 	andeq	r0, r1, r0, lsl #16
    6d84:	003f365c 	eorseq	r3, pc, ip, asr r6	; <UNPREDICTABLE>
    6d88:	0040a008 	subeq	sl, r0, r8
    6d8c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    6d90:	080040fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, lr}
    6d94:	08004480 	stmdaeq	r0, {r7, sl, lr}
    6d98:	d4570001 	ldrble	r0, [r7], #-1
    6d9c:	44080044 	strmi	r0, [r8], #-68	; 0x44
    6da0:	01080048 	tsteq	r8, r8, asr #32
    6da4:	48aa5800 	stmiami	sl!, {fp, ip, lr}
    6da8:	4c480800 	mcrrmi	8, 0, r0, r8, cr0
    6dac:	00010800 	andeq	r0, r1, r0, lsl #16
    6db0:	004ca256 	subeq	sl, ip, r6, asr r2
    6db4:	004cb408 	subeq	fp, ip, r8, lsl #8
    6db8:	59000108 	stmdbpl	r0, {r3, r8}
    6dbc:	08004cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, lr}
    6dc0:	08004cde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, fp, lr}
    6dc4:	de5a0001 	cdple	0, 5, cr0, cr10, cr1, {0}
    6dc8:	1608004c 	strne	r0, [r8], -ip, asr #32
    6dcc:	0308004f 	movweq	r0, #32847	; 0x804f
    6dd0:	7f989100 	svcvc	0x00989100
    6dd4:	08004f16 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl, fp, lr}
    6dd8:	0800508e 	stmdaeq	r0, {r1, r2, r3, r7, ip, lr}
    6ddc:	00520001 	subseq	r0, r2, r1
    6de0:	00000000 	andeq	r0, r0, r0
    6de4:	3a000000 	bcc	6dec <__Stack_Size+0x65ec>
    6de8:	84080039 	strhi	r0, [r8], #-57	; 0x39
    6dec:	0108003c 	tsteq	r8, ip, lsr r0
    6df0:	3cd85700 	ldclcc	7, cr5, [r8], {0}
    6df4:	40380800 	eorsmi	r0, r8, r0, lsl #16
    6df8:	00010800 	andeq	r0, r1, r0, lsl #16
    6dfc:	00408c53 	subeq	r8, r0, r3, asr ip
    6e00:	00440008 	subeq	r0, r4, r8
    6e04:	56000108 	strpl	r0, [r0], -r8, lsl #2
    6e08:	0800446c 	stmdaeq	r0, {r2, r3, r5, r6, sl, lr}
    6e0c:	080047d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, lr}
    6e10:	2c560001 	mrrccs	0, 0, r0, r6, cr1
    6e14:	c6080048 	strgt	r0, [r8], -r8, asr #32
    6e18:	0108004b 	tsteq	r8, fp, asr #32
    6e1c:	4c345000 	ldcmi	0, cr5, [r4], #-0
    6e20:	4e6c0800 	cdpmi	8, 6, cr0, cr12, cr0, {0}
    6e24:	00030800 	andeq	r0, r3, r0, lsl #16
    6e28:	6c7f9491 	cfldrdvs	mvd9, [pc], #-580	; 6bec <__Stack_Size+0x63ec>
    6e2c:	1a08004e 	bne	206f6c <__Stack_Size+0x20676c>
    6e30:	01080050 	qaddeq	r0, r0, r8
    6e34:	50785c00 	rsbspl	r5, r8, r0, lsl #24
    6e38:	50da0800 	sbcspl	r0, sl, r0, lsl #16
    6e3c:	00010800 	andeq	r0, r1, r0, lsl #16
    6e40:	00000054 	andeq	r0, r0, r4, asr r0
    6e44:	00000000 	andeq	r0, r0, r0
    6e48:	00393800 	eorseq	r3, r9, r0, lsl #16
    6e4c:	003c0608 	eorseq	r0, ip, r8, lsl #12
    6e50:	56000108 	strpl	r0, [r0], -r8, lsl #2
    6e54:	08003c6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, fp, ip, sp}
    6e58:	08003fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, ip, sp}
    6e5c:	1a520001 	bne	1486e68 <__Stack_Size+0x1486668>
    6e60:	92080040 	andls	r0, r8, #64	; 0x40
    6e64:	01080043 	tsteq	r8, r3, asr #32
    6e68:	43e65000 	mvnmi	r5, #0
    6e6c:	475e0800 	ldrbmi	r0, [lr, -r0, lsl #16]
    6e70:	00010800 	andeq	r0, r1, r0, lsl #16
    6e74:	0047b050 	subeq	fp, r7, r0, asr r0
    6e78:	004b5208 	subeq	r5, fp, r8, lsl #4
    6e7c:	53000108 	movwpl	r0, #264	; 0x108
    6e80:	08004bb2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, fp, lr}
    6e84:	08004f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, lr}
    6e88:	e6540001 	ldrb	r0, [r4], -r1
    6e8c:	d208004f 	andle	r0, r8, #79	; 0x4f
    6e90:	01080050 	qaddeq	r0, r0, r8
    6e94:	00005100 	andeq	r5, r0, r0, lsl #2
    6e98:	00000000 	andeq	r0, r0, r0
    6e9c:	39380000 	ldmdbcc	r8!, {}	; <UNPREDICTABLE>
    6ea0:	3b8a0800 	blcc	fe288ea8 <BootRAM+0xd1f9649>
    6ea4:	00010800 	andeq	r0, r1, r0, lsl #16
    6ea8:	003bee5b 	eorseq	lr, fp, fp, asr lr
    6eac:	003f5408 	eorseq	r5, pc, r8, lsl #8
    6eb0:	50000108 	andpl	r0, r0, r8, lsl #2
    6eb4:	08003fae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl, fp, ip, sp}
    6eb8:	0800430a 	stmdaeq	r0, {r1, r3, r8, r9, lr}
    6ebc:	705c0001 	subsvc	r0, ip, r1
    6ec0:	f0080043 			; <UNDEFINED> instruction: 0xf0080043
    6ec4:	01080046 	tsteq	r8, r6, asr #32
    6ec8:	47445300 	strbmi	r5, [r4, -r0, lsl #6]
    6ecc:	4acc0800 	bmi	ff308ed4 <BootRAM+0xe279675>
    6ed0:	00010800 	andeq	r0, r1, r0, lsl #16
    6ed4:	004b4051 	subeq	r4, fp, r1, asr r0
    6ed8:	004f2008 	subeq	r2, pc, r8
    6edc:	51000108 	tstpl	r0, r8, lsl #2
    6ee0:	08004f76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, sl, fp, lr}
    6ee4:	080050c4 	stmdaeq	r0, {r2, r6, r7, ip, lr}
    6ee8:	00530001 	subseq	r0, r3, r1
    6eec:	00000000 	andeq	r0, r0, r0
    6ef0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    6ef4:	a0080039 	andge	r0, r8, r9, lsr r0
    6ef8:	03080039 	movweq	r0, #32825	; 0x8039
    6efc:	7f949100 	svcvc	0x00949100
    6f00:	080039a0 	stmdaeq	r0, {r5, r7, r8, fp, ip, sp}
    6f04:	08003b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, ip, sp}
    6f08:	94540001 	ldrbls	r0, [r4], #-1
    6f0c:	e408003b 	str	r0, [r8], #-59	; 0x3b
    6f10:	0108003e 	tsteq	r8, lr, lsr r0
    6f14:	3f3e5400 	svccc	0x003e5400
    6f18:	42940800 	addsmi	r0, r4, #0, 16
    6f1c:	00010800 	andeq	r0, r1, r0, lsl #16
    6f20:	0042f259 	subeq	pc, r2, r9, asr r2	; <UNPREDICTABLE>
    6f24:	00469408 	subeq	r9, r6, r8, lsl #8
    6f28:	52000108 	andpl	r0, r0, #8, 2
    6f2c:	080046d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, lr}
    6f30:	08004a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, lr}
    6f34:	c4520001 	ldrbgt	r0, [r2], #-1
    6f38:	8008004a 	andhi	r0, r8, sl, asr #32
    6f3c:	0108004e 	tsteq	r8, lr, asr #32
    6f40:	4f165200 	svcmi	0x00165200
    6f44:	4f300800 	svcmi	0x00300800
    6f48:	00010800 	andeq	r0, r1, r0, lsl #16
    6f4c:	004f3053 	subeq	r3, pc, r3, asr r0	; <UNPREDICTABLE>
    6f50:	0050d008 	subseq	sp, r0, r8
    6f54:	91000308 	tstls	r0, r8, lsl #6
    6f58:	50d07fb0 	ldrhpl	r7, [r0], #240	; 0xf0
    6f5c:	50e20800 	rscpl	r0, r2, r0, lsl #16
    6f60:	00080800 	andeq	r0, r8, r0, lsl #16
    6f64:	067fb091 			; <UNDEFINED> instruction: 0x067fb091
    6f68:	9f220077 	svcls	0x00220077
	...
    6f74:	08003938 	stmdaeq	r0, {r3, r4, r5, r8, fp, ip, sp}
    6f78:	08003aaa 	stmdaeq	r0, {r1, r3, r5, r7, r9, fp, ip, sp}
    6f7c:	18530001 	ldmdane	r3, {r0}^
    6f80:	6e08003b 	mcrvs	0, 0, r0, cr8, cr11, {1}
    6f84:	0108003e 	tsteq	r8, lr, lsr r0
    6f88:	3eba5100 	frdcce	f5, f2, f0
    6f8c:	42200800 	eormi	r0, r0, #0, 16
    6f90:	00010800 	andeq	r0, r1, r0, lsl #16
    6f94:	00427051 	subeq	r7, r2, r1, asr r0
    6f98:	00460008 	subeq	r0, r6, r8
    6f9c:	51000108 	tstpl	r0, r8, lsl #2
    6fa0:	0800465e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sl, lr}
    6fa4:	080049d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, fp, lr}
    6fa8:	46540001 	ldrbmi	r0, [r4], -r1
    6fac:	0408004a 	streq	r0, [r8], #-74	; 0x4a
    6fb0:	0108004e 	tsteq	r8, lr, asr #32
    6fb4:	4e6e5800 	cdpmi	8, 6, cr5, cr14, cr0, {0}
    6fb8:	4e920800 	cdpmi	8, 9, cr0, cr2, cr0, {0}
    6fbc:	00010800 	andeq	r0, r1, r0, lsl #16
    6fc0:	004e925b 	subeq	r9, lr, fp, asr r2
    6fc4:	004e9c08 	subeq	r9, lr, r8, lsl #24
    6fc8:	52000108 	andpl	r0, r0, #8, 2
    6fcc:	08004e9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, fp, lr}
    6fd0:	08005078 	stmdaeq	r0, {r3, r4, r5, r6, ip, lr}
    6fd4:	94910003 	ldrls	r0, [r1], #3
    6fd8:	0050787f 	subseq	r7, r0, pc, ror r8
    6fdc:	0050e008 	subseq	lr, r0, r8
    6fe0:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    6fec:	08003938 	stmdaeq	r0, {r3, r4, r5, r8, fp, ip, sp}
    6ff0:	08003a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, ip, sp}
    6ff4:	98520001 	ldmdals	r2, {r0}^
    6ff8:	f608003a 			; <UNDEFINED> instruction: 0xf608003a
    6ffc:	0108003d 	tsteq	r8, sp, lsr r0
    7000:	3e5a5a00 	vnmlscc.f32	s11, s20, s0
    7004:	41b40800 			; <UNDEFINED> instruction: 0x41b40800
    7008:	00010800 	andeq	r0, r1, r0, lsl #16
    700c:	0042065a 	subeq	r0, r2, sl, asr r6
    7010:	00459208 	subeq	r9, r5, r8, lsl #4
    7014:	54000108 	strpl	r0, [r0], #-264	; 0x108
    7018:	080045e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, lr}
    701c:	0800492c 	stmdaeq	r0, {r2, r3, r5, r8, fp, lr}
    7020:	ce550001 	cdpgt	0, 5, cr0, cr5, cr1, {0}
    7024:	52080049 	andpl	r0, r8, #73	; 0x49
    7028:	0108004d 	tsteq	r8, sp, asr #32
    702c:	4db25500 	cfldr32mi	mvfx5, [r2]
    7030:	4e180800 	cdpmi	8, 1, cr0, cr8, cr0, {0}
    7034:	00010800 	andeq	r0, r1, r0, lsl #16
    7038:	004e185a 	subeq	r1, lr, sl, asr r8
    703c:	004e2a08 	subeq	r2, lr, r8, lsl #20
    7040:	50000108 	andpl	r0, r0, r8, lsl #2
    7044:	08004e2a 	stmdaeq	r0, {r1, r3, r5, r9, sl, fp, lr}
    7048:	08004fde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, fp, lr}
    704c:	a8910003 	ldmge	r1, {r0, r1}
    7050:	004fde7f 	subeq	sp, pc, pc, ror lr	; <UNPREDICTABLE>
    7054:	0050cc08 	subseq	ip, r0, r8, lsl #24
    7058:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    7064:	08003938 	stmdaeq	r0, {r3, r4, r5, r8, fp, ip, sp}
    7068:	080039b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp, ip, sp}
    706c:	24500001 	ldrbcs	r0, [r0], #-1
    7070:	8e08003a 	mcrhi	0, 0, r0, cr8, cr10, {1}
    7074:	0108003d 	tsteq	r8, sp, lsr r0
    7078:	3df45800 	ldclcc	8, cr5, [r4]
    707c:	3fac0800 	svccc	0x00ac0800
    7080:	00010800 	andeq	r0, r1, r0, lsl #16
    7084:	003fac56 	eorseq	sl, pc, r6, asr ip	; <UNPREDICTABLE>
    7088:	00414608 	subeq	r4, r1, r8, lsl #12
    708c:	5b000108 	blpl	74b4 <__Stack_Size+0x6cb4>
    7090:	0800419c 	stmdaeq	r0, {r2, r3, r4, r7, r8, lr}
    7094:	080044fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sl, lr}
    7098:	48550001 	ldmdami	r5, {r0}^
    709c:	ce080045 	cdpgt	0, 0, cr0, cr8, cr5, {2}
    70a0:	01080048 	tsteq	r8, r8, asr #32
    70a4:	491e5c00 	ldmdbmi	lr, {sl, fp, ip, lr}
    70a8:	4cb80800 	ldcmi	8, cr0, [r8]
    70ac:	00010800 	andeq	r0, r1, r0, lsl #16
    70b0:	004d185c 	subeq	r1, sp, ip, asr r8
    70b4:	004d7608 	subeq	r7, sp, r8, lsl #12
    70b8:	50000108 	andpl	r0, r0, r8, lsl #2
    70bc:	08004d76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, fp, lr}
    70c0:	08004d82 	stmdaeq	r0, {r1, r7, r8, sl, fp, lr}
    70c4:	825b0001 	subshi	r0, fp, #1
    70c8:	7208004d 	andvc	r0, r8, #77	; 0x4d
    70cc:	0308004f 	movweq	r0, #32847	; 0x804f
    70d0:	7fa49100 	svcvc	0x00a49100
    70d4:	08004f72 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, sl, fp, lr}
    70d8:	080050bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, lr}
    70dc:	00500001 	subseq	r0, r0, r1
    70e0:	00000000 	andeq	r0, r0, r0
    70e4:	20000000 	andcs	r0, r0, r0
    70e8:	42080051 	andmi	r0, r8, #81	; 0x51
    70ec:	01080051 	qaddeq	r0, r1, r8
    70f0:	51425000 	mrspl	r5, (UNDEF: 66)
    70f4:	51720800 	cmnpl	r2, r0, lsl #16
    70f8:	00010800 	andeq	r0, r1, r0, lsl #16
    70fc:	00517256 	subseq	r7, r1, r6, asr r2
    7100:	00517a08 	subseq	r7, r1, r8, lsl #20
    7104:	50000108 	andpl	r0, r0, r8, lsl #2
    7108:	0800517a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, ip, lr}
    710c:	08005188 	stmdaeq	r0, {r3, r7, r8, ip, lr}
    7110:	88560001 	ldmdahi	r6, {r0}^
    7114:	8c080051 	stchi	0, cr0, [r8], {81}	; 0x51
    7118:	04080051 	streq	r0, [r8], #-81	; 0x51
    711c:	5001f300 	andpl	pc, r1, r0, lsl #6
    7120:	00518c9f 			; <UNDEFINED> instruction: 0x00518c9f
    7124:	00519008 	subseq	r9, r1, r8
    7128:	50000108 	andpl	r0, r0, r8, lsl #2
    712c:	08005190 	stmdaeq	r0, {r4, r7, r8, ip, lr}
    7130:	080051ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, ip, lr}
    7134:	00560001 	subseq	r0, r6, r1
    7138:	00000000 	andeq	r0, r0, r0
    713c:	20000000 	andcs	r0, r0, r0
    7140:	42080051 	andmi	r0, r8, #81	; 0x51
    7144:	01080051 	qaddeq	r0, r1, r8
    7148:	51425100 	mrspl	r5, (UNDEF: 82)
    714c:	51720800 	cmnpl	r2, r0, lsl #16
    7150:	00040800 	andeq	r0, r4, r0, lsl #16
    7154:	9f5101f3 	svcls	0x005101f3
    7158:	08005172 	stmdaeq	r0, {r1, r4, r5, r6, r8, ip, lr}
    715c:	0800517a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, ip, lr}
    7160:	7a510001 	bvc	144716c <__Stack_Size+0x144696c>
    7164:	8c080051 	stchi	0, cr0, [r8], {81}	; 0x51
    7168:	04080051 	streq	r0, [r8], #-81	; 0x51
    716c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    7170:	00518c9f 			; <UNDEFINED> instruction: 0x00518c9f
    7174:	00519208 	subseq	r9, r1, r8, lsl #4
    7178:	51000108 	tstpl	r0, r8, lsl #2
    717c:	08005192 	stmdaeq	r0, {r1, r4, r7, r8, ip, lr}
    7180:	080051a8 	stmdaeq	r0, {r3, r5, r7, r8, ip, lr}
    7184:	a8580001 	ldmdage	r8, {r0}^
    7188:	ae080051 	mcrge	0, 0, r0, cr8, cr1, {2}
    718c:	04080051 	streq	r0, [r8], #-81	; 0x51
    7190:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    7194:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7198:	00000000 	andeq	r0, r0, r0
    719c:	00512000 	subseq	r2, r1, r0
    71a0:	00513008 	subseq	r3, r1, r8
    71a4:	52000108 	andpl	r0, r0, #8, 2
    71a8:	08005130 	stmdaeq	r0, {r4, r5, r8, ip, lr}
    71ac:	08005142 	stmdaeq	r0, {r1, r6, r8, ip, lr}
    71b0:	42570001 	subsmi	r0, r7, #1
    71b4:	72080051 	andvc	r0, r8, #81	; 0x51
    71b8:	04080051 	streq	r0, [r8], #-81	; 0x51
    71bc:	5201f300 	andpl	pc, r1, #0, 6
    71c0:	0051729f 			; <UNDEFINED> instruction: 0x0051729f
    71c4:	00517a08 	subseq	r7, r1, r8, lsl #20
    71c8:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    71cc:	0800517a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, ip, lr}
    71d0:	0800518c 	stmdaeq	r0, {r2, r3, r7, r8, ip, lr}
    71d4:	01f30004 	mvnseq	r0, r4
    71d8:	518c9f52 	orrpl	r9, ip, r2, asr pc
    71dc:	51a60800 			; <UNDEFINED> instruction: 0x51a60800
    71e0:	00010800 	andeq	r0, r1, r0, lsl #16
    71e4:	0051a657 	subseq	sl, r1, r7, asr r6
    71e8:	0051ae08 	subseq	sl, r1, r8, lsl #28
    71ec:	f3000408 	vshl.u8	d0, d8, d0
    71f0:	009f5201 	addseq	r5, pc, r1, lsl #4
    71f4:	00000000 	andeq	r0, r0, r0
    71f8:	2c000000 	stccs	0, cr0, [r0], {-0}
    71fc:	30080051 	andcc	r0, r8, r1, asr r0
    7200:	01080051 	qaddeq	r0, r1, r8
    7204:	51305200 	teqpl	r0, r0, lsl #4
    7208:	514a0800 	cmppl	sl, r0, lsl #16
    720c:	00010800 	andeq	r0, r1, r0, lsl #16
    7210:	00514a57 	subseq	r4, r1, r7, asr sl
    7214:	00514e08 	subseq	r4, r1, r8, lsl #28
    7218:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    721c:	0800514e 	stmdaeq	r0, {r1, r2, r3, r6, r8, ip, lr}
    7220:	08005154 	stmdaeq	r0, {r2, r4, r6, r8, ip, lr}
    7224:	c0750004 	rsbsgt	r0, r5, r4
    7228:	51549f00 	cmppl	r4, r0, lsl #30
    722c:	516c0800 	cmnpl	ip, r0, lsl #16
    7230:	00010800 	andeq	r0, r1, r0, lsl #16
    7234:	00517255 	subseq	r7, r1, r5, asr r2
    7238:	00517a08 	subseq	r7, r1, r8, lsl #20
    723c:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    7240:	0800518c 	stmdaeq	r0, {r2, r3, r7, r8, ip, lr}
    7244:	080051aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, ip, lr}
    7248:	00570001 	subseq	r0, r7, r1
    724c:	00000000 	andeq	r0, r0, r0
    7250:	2c000000 	stccs	0, cr0, [r0], {-0}
    7254:	42080051 	andmi	r0, r8, #81	; 0x51
    7258:	01080051 	qaddeq	r0, r1, r8
    725c:	51425100 	mrspl	r5, (UNDEF: 82)
    7260:	514a0800 	cmppl	sl, r0, lsl #16
    7264:	00010800 	andeq	r0, r1, r0, lsl #16
    7268:	00514a58 	subseq	r4, r1, r8, asr sl
    726c:	00516c08 	subseq	r6, r1, r8, lsl #24
    7270:	54000108 	strpl	r0, [r0], #-264	; 0x108
    7274:	08005172 	stmdaeq	r0, {r1, r4, r5, r6, r8, ip, lr}
    7278:	0800517a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, ip, lr}
    727c:	8c510001 	mrrchi	0, 0, r0, r1, cr1
    7280:	92080051 	andls	r0, r8, #81	; 0x51
    7284:	01080051 	qaddeq	r0, r1, r8
    7288:	51925100 	orrspl	r5, r2, r0, lsl #2
    728c:	51aa0800 			; <UNDEFINED> instruction: 0x51aa0800
    7290:	00010800 	andeq	r0, r1, r0, lsl #16
    7294:	00000058 	andeq	r0, r0, r8, asr r0
    7298:	00000000 	andeq	r0, r0, r0
    729c:	00512c00 	subseq	r2, r1, r0, lsl #24
    72a0:	00514208 	subseq	r4, r1, r8, lsl #4
    72a4:	50000108 	andpl	r0, r0, r8, lsl #2
    72a8:	08005142 	stmdaeq	r0, {r1, r6, r8, ip, lr}
    72ac:	0800516e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, ip, lr}
    72b0:	72560001 	subsvc	r0, r6, #1
    72b4:	7a080051 	bvc	207400 <__Stack_Size+0x206c00>
    72b8:	01080051 	qaddeq	r0, r1, r8
    72bc:	517a5000 	cmnpl	sl, r0
    72c0:	51880800 	orrpl	r0, r8, r0, lsl #16
    72c4:	00010800 	andeq	r0, r1, r0, lsl #16
    72c8:	00518856 	subseq	r8, r1, r6, asr r8
    72cc:	00518c08 	subseq	r8, r1, r8, lsl #24
    72d0:	f3000408 	vshl.u8	d0, d8, d0
    72d4:	8c9f5001 	ldchi	0, cr5, [pc], {1}
    72d8:	90080051 	andls	r0, r8, r1, asr r0
    72dc:	01080051 	qaddeq	r0, r1, r8
    72e0:	51905000 	orrspl	r5, r0, r0
    72e4:	51ae0800 			; <UNDEFINED> instruction: 0x51ae0800
    72e8:	00010800 	andeq	r0, r1, r0, lsl #16
    72ec:	00000056 	andeq	r0, r0, r6, asr r0
    72f0:	00000000 	andeq	r0, r0, r0
    72f4:	00513800 	subseq	r3, r1, r0, lsl #16
    72f8:	00514208 	subseq	r4, r1, r8, lsl #4
    72fc:	53000108 	movwpl	r0, #264	; 0x108
    7300:	08005142 	stmdaeq	r0, {r1, r6, r8, ip, lr}
    7304:	0800516e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, ip, lr}
    7308:	9f300002 	svcls	0x00300002
    730c:	08005172 	stmdaeq	r0, {r1, r4, r5, r6, r8, ip, lr}
    7310:	0800517a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, ip, lr}
    7314:	8c530001 	mrrchi	0, 0, r0, r3, cr1
    7318:	99080051 	stmdbls	r8, {r0, r4, r6}
    731c:	01080051 	qaddeq	r0, r1, r8
    7320:	51a85300 			; <UNDEFINED> instruction: 0x51a85300
    7324:	51ae0800 			; <UNDEFINED> instruction: 0x51ae0800
    7328:	00020800 	andeq	r0, r2, r0, lsl #16
    732c:	00009f30 	andeq	r9, r0, r0, lsr pc
    7330:	00000000 	andeq	r0, r0, r0
    7334:	51380000 	teqpl	r8, r0
    7338:	51420800 	cmppl	r2, r0, lsl #16
    733c:	00060800 	andeq	r0, r6, r0, lsl #16
    7340:	00734008 	rsbseq	r4, r3, r8
    7344:	51729f1c 	cmnpl	r2, ip, lsl pc
    7348:	517a0800 	cmnpl	sl, r0, lsl #16
    734c:	00060800 	andeq	r0, r6, r0, lsl #16
    7350:	00734008 	rsbseq	r4, r3, r8
    7354:	518c9f1c 	orrpl	r9, ip, ip, lsl pc
    7358:	51990800 	orrspl	r0, r9, r0, lsl #16
    735c:	00060800 	andeq	r0, r6, r0, lsl #16
    7360:	00734008 	rsbseq	r4, r3, r8
    7364:	00009f1c 	andeq	r9, r0, ip, lsl pc
    7368:	00000000 	andeq	r0, r0, r0
    736c:	51b00000 	movspl	r0, r0
    7370:	51d80800 	bicspl	r0, r8, r0, lsl #16
    7374:	00010800 	andeq	r0, r1, r0, lsl #16
    7378:	0051d850 	subseq	sp, r1, r0, asr r8
    737c:	0053c808 	subseq	ip, r3, r8, lsl #16
    7380:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    738c:	080051b0 	stmdaeq	r0, {r4, r5, r7, r8, ip, lr}
    7390:	08005230 	stmdaeq	r0, {r4, r5, r9, ip, lr}
    7394:	30510001 	subscc	r0, r1, r1
    7398:	12080052 	andne	r0, r8, #82	; 0x52
    739c:	01080053 	qaddeq	r0, r3, r8
    73a0:	53125500 	tstpl	r2, #0, 10
    73a4:	531c0800 	tstpl	ip, #0, 16
    73a8:	00010800 	andeq	r0, r1, r0, lsl #16
    73ac:	00531c51 	subseq	r1, r3, r1, asr ip
    73b0:	00536408 	subseq	r6, r3, r8, lsl #8
    73b4:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    73b8:	08005364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip, lr}
    73bc:	0800536a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, ip, lr}
    73c0:	6a510001 	bvs	14473cc <__Stack_Size+0x1446bcc>
    73c4:	c8080053 	stmdagt	r8, {r0, r1, r4, r6}
    73c8:	01080053 	qaddeq	r0, r3, r8
    73cc:	00005500 	andeq	r5, r0, r0, lsl #10
    73d0:	00000000 	andeq	r0, r0, r0
    73d4:	51de0000 	bicspl	r0, lr, r0
    73d8:	52300800 	eorspl	r0, r0, #0, 16
    73dc:	00010800 	andeq	r0, r1, r0, lsl #16
    73e0:	00531256 	subseq	r1, r3, r6, asr r2
    73e4:	00533e08 	subseq	r3, r3, r8, lsl #28
    73e8:	56000108 	strpl	r0, [r0], -r8, lsl #2
    73ec:	08005364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip, lr}
    73f0:	0800536a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, ip, lr}
    73f4:	b0560001 	subslt	r0, r6, r1
    73f8:	b4080053 	strlt	r0, [r8], #-83	; 0x53
    73fc:	01080053 	qaddeq	r0, r3, r8
    7400:	00005600 	andeq	r5, r0, r0, lsl #12
    7404:	00000000 	andeq	r0, r0, r0
    7408:	51de0000 	bicspl	r0, lr, r0
    740c:	52300800 	eorspl	r0, r0, #0, 16
    7410:	00010800 	andeq	r0, r1, r0, lsl #16
    7414:	00531258 	subseq	r1, r3, r8, asr r2
    7418:	00532e08 	subseq	r2, r3, r8, lsl #28
    741c:	58000108 	stmdapl	r0, {r3, r8}
    7420:	08005364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip, lr}
    7424:	0800536a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, ip, lr}
    7428:	00580001 	subseq	r0, r8, r1
    742c:	00000000 	andeq	r0, r0, r0
    7430:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    7434:	30080051 	andcc	r0, r8, r1, asr r0
    7438:	01080052 	qaddeq	r0, r2, r8
    743c:	53125000 	tstpl	r2, #0
    7440:	531a0800 	tstpl	sl, #0, 16
    7444:	00010800 	andeq	r0, r1, r0, lsl #16
    7448:	00536450 	subseq	r6, r3, r0, asr r4
    744c:	00536a08 	subseq	r6, r3, r8, lsl #20
    7450:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    745c:	080051de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, ip, lr}
    7460:	08005230 	stmdaeq	r0, {r4, r5, r9, ip, lr}
    7464:	12520001 	subsne	r0, r2, #1
    7468:	20080053 	andcs	r0, r8, r3, asr r0
    746c:	01080053 	qaddeq	r0, r3, r8
    7470:	53645200 	cmnpl	r4, #0, 4
    7474:	536a0800 	cmnpl	sl, #0, 16
    7478:	00010800 	andeq	r0, r1, r0, lsl #16
    747c:	00000052 	andeq	r0, r0, r2, asr r0
    7480:	00000000 	andeq	r0, r0, r0
    7484:	0051de00 	subseq	sp, r1, r0, lsl #28
    7488:	00523008 	subseq	r3, r2, r8
    748c:	58000108 	stmdapl	r0, {r3, r8}
    7490:	08005312 	stmdaeq	r0, {r1, r4, r8, r9, ip, lr}
    7494:	0800532e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, ip, lr}
    7498:	34580001 	ldrbcc	r0, [r8], #-1
    749c:	3e080053 	mcrcc	0, 0, r0, cr8, cr3, {2}
    74a0:	01080053 	qaddeq	r0, r3, r8
    74a4:	533e5800 	teqpl	lr, #0, 16
    74a8:	53420800 	movtpl	r0, #10240	; 0x2800
    74ac:	00010800 	andeq	r0, r1, r0, lsl #16
    74b0:	00534257 	subseq	r4, r3, r7, asr r2
    74b4:	00534808 	subseq	r4, r3, r8, lsl #16
    74b8:	77000408 	strvc	r0, [r0, -r8, lsl #8]
    74bc:	489f00c0 	ldmmi	pc, {r6, r7}	; <UNPREDICTABLE>
    74c0:	64080053 	strvs	r0, [r8], #-83	; 0x53
    74c4:	01080053 	qaddeq	r0, r3, r8
    74c8:	53645700 	cmnpl	r4, #0, 14
    74cc:	536a0800 	cmnpl	sl, #0, 16
    74d0:	00010800 	andeq	r0, r1, r0, lsl #16
    74d4:	0053b058 	subseq	fp, r3, r8, asr r0
    74d8:	0053b608 	subseq	fp, r3, r8, lsl #12
    74dc:	58000108 	stmdapl	r0, {r3, r8}
	...
    74e8:	080051de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, ip, lr}
    74ec:	08005230 	stmdaeq	r0, {r4, r5, r9, ip, lr}
    74f0:	cc030006 	stcgt	0, cr0, [r3], {6}
    74f4:	9f200002 	svcls	0x00200002
    74f8:	08005312 	stmdaeq	r0, {r1, r4, r8, r9, ip, lr}
    74fc:	08005334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip, lr}
    7500:	cc030006 	stcgt	0, cr0, [r3], {6}
    7504:	9f200002 	svcls	0x00200002
    7508:	08005334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip, lr}
    750c:	0800533e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, ip, lr}
    7510:	3e590001 	cdpcc	0, 5, cr0, cr9, cr1, {0}
    7514:	62080053 	andvs	r0, r8, #83	; 0x53
    7518:	01080053 	qaddeq	r0, r3, r8
    751c:	53645600 	cmnpl	r4, #0, 12
    7520:	536a0800 	cmnpl	sl, #0, 16
    7524:	00060800 	andeq	r0, r6, r0, lsl #16
    7528:	0002cc03 	andeq	ip, r2, r3, lsl #24
    752c:	53b09f20 	movspl	r9, #32, 30	; 0x80
    7530:	53b60800 			; <UNDEFINED> instruction: 0x53b60800
    7534:	00010800 	andeq	r0, r1, r0, lsl #16
    7538:	00000059 	andeq	r0, r0, r9, asr r0
    753c:	00000000 	andeq	r0, r0, r0
    7540:	0051de00 	subseq	sp, r1, r0, lsl #28
    7544:	00523008 	subseq	r3, r2, r8
    7548:	56000108 	strpl	r0, [r0], -r8, lsl #2
    754c:	08005312 	stmdaeq	r0, {r1, r4, r8, r9, ip, lr}
    7550:	08005334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip, lr}
    7554:	34560001 	ldrbcc	r0, [r6], #-1
    7558:	64080053 	strvs	r0, [r8], #-83	; 0x53
    755c:	02080053 	andeq	r0, r8, #83	; 0x53
    7560:	649f3000 	ldrvs	r3, [pc], #0	; 7568 <__Stack_Size+0x6d68>
    7564:	6a080053 	bvs	2076b8 <__Stack_Size+0x206eb8>
    7568:	01080053 	qaddeq	r0, r3, r8
    756c:	53b05600 	movspl	r5, #0, 12
    7570:	53b60800 			; <UNDEFINED> instruction: 0x53b60800
    7574:	00020800 	andeq	r0, r2, r0, lsl #16
    7578:	00009f30 	andeq	r9, r0, r0, lsr pc
    757c:	00000000 	andeq	r0, r0, r0
    7580:	51de0000 	bicspl	r0, lr, r0
    7584:	52260800 	eorpl	r0, r6, #0, 16
    7588:	00060800 	andeq	r0, r6, r0, lsl #16
    758c:	00764008 	rsbseq	r4, r6, r8
    7590:	52269f1c 	eorpl	r9, r6, #28, 30	; 0x70
    7594:	52300800 	eorspl	r0, r0, #0, 16
    7598:	00010800 	andeq	r0, r1, r0, lsl #16
    759c:	00531257 	subseq	r1, r3, r7, asr r2
    75a0:	00533408 	subseq	r3, r3, r8, lsl #8
    75a4:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    75a8:	08005334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip, lr}
    75ac:	0800533e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, ip, lr}
    75b0:	40080006 	andmi	r0, r8, r6
    75b4:	9f1c0076 	svcls	0x001c0076
    75b8:	08005364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip, lr}
    75bc:	0800536a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, ip, lr}
    75c0:	40080006 	andmi	r0, r8, r6
    75c4:	9f1c0076 	svcls	0x001c0076
    75c8:	080053b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, ip, lr}
    75cc:	080053b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip, lr}
    75d0:	40080006 	andmi	r0, r8, r6
    75d4:	9f1c0076 	svcls	0x001c0076
	...
    75e0:	0800523e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, ip, lr}
    75e4:	08005312 	stmdaeq	r0, {r1, r4, r8, r9, ip, lr}
    75e8:	9f380002 	svcls	0x00380002
    75ec:	0800536a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, ip, lr}
    75f0:	080053b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, ip, lr}
    75f4:	9f380002 	svcls	0x00380002
    75f8:	080053b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, ip, lr}
    75fc:	080053c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, lr}
    7600:	9f380002 	svcls	0x00380002
	...
    760c:	0800523e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, ip, lr}
    7610:	0800530e 	stmdaeq	r0, {r1, r2, r3, r8, r9, ip, lr}
    7614:	0e5d0001 	cdpeq	0, 5, cr0, cr13, cr1, {0}
    7618:	12080053 	andne	r0, r8, #83	; 0x53
    761c:	03080053 	movweq	r0, #32851	; 0x8053
    7620:	9f509100 	svcls	0x00509100
    7624:	0800536a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, ip, lr}
    7628:	080053b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, ip, lr}
    762c:	b65d0001 	ldrblt	r0, [sp], -r1
    7630:	c8080053 	stmdagt	r8, {r0, r1, r4, r6}
    7634:	01080053 	qaddeq	r0, r3, r8
    7638:	00005d00 	andeq	r5, r0, r0, lsl #26
    763c:	00000000 	andeq	r0, r0, r0
    7640:	523e0000 	eorspl	r0, lr, #0
    7644:	53120800 	tstpl	r2, #0, 16
    7648:	00010800 	andeq	r0, r1, r0, lsl #16
    764c:	00536a54 	subseq	r6, r3, r4, asr sl
    7650:	0053b008 	subseq	fp, r3, r8
    7654:	54000108 	strpl	r0, [r0], #-264	; 0x108
    7658:	080053b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, ip, lr}
    765c:	080053c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, lr}
    7660:	00540001 	subseq	r0, r4, r1
    7664:	00000000 	andeq	r0, r0, r0
    7668:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    766c:	6a080052 	bvs	2077bc <__Stack_Size+0x206fbc>
    7670:	02080052 	andeq	r0, r8, #82	; 0x52
    7674:	6a9f3800 	bvs	fe7d567c <BootRAM+0xd745e1d>
    7678:	8a080053 	bhi	2077cc <__Stack_Size+0x206fcc>
    767c:	02080053 	andeq	r0, r8, #83	; 0x53
    7680:	8a9f3800 	bhi	fe7d5688 <BootRAM+0xd745e29>
    7684:	94080053 	strls	r0, [r8], #-83	; 0x53
    7688:	01080053 	qaddeq	r0, r3, r8
    768c:	53945600 	orrspl	r5, r4, #0, 12
    7690:	539a0800 	orrspl	r0, sl, #0, 16
    7694:	00040800 	andeq	r0, r4, r0, lsl #16
    7698:	9f00c076 	svcls	0x0000c076
    769c:	0800539a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, ip, lr}
    76a0:	080053a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, ip, lr}
    76a4:	b6560001 	ldrblt	r0, [r6], -r1
    76a8:	c8080053 	stmdagt	r8, {r0, r1, r4, r6}
    76ac:	01080053 	qaddeq	r0, r3, r8
    76b0:	00005600 	andeq	r5, r0, r0, lsl #12
    76b4:	00000000 	andeq	r0, r0, r0
    76b8:	523e0000 	eorspl	r0, lr, #0
    76bc:	526a0800 	rsbpl	r0, sl, #0, 16
    76c0:	00010800 	andeq	r0, r1, r0, lsl #16
    76c4:	00536a5d 	subseq	r6, r3, sp, asr sl
    76c8:	00538a08 	subseq	r8, r3, r8, lsl #20
    76cc:	5d000108 	stfpls	f0, [r0, #-32]	; 0xffffffe0
    76d0:	0800538a 	stmdaeq	r0, {r1, r3, r7, r8, r9, ip, lr}
    76d4:	08005390 	stmdaeq	r0, {r4, r7, r8, r9, ip, lr}
    76d8:	90590001 	subsls	r0, r9, r1
    76dc:	b0080053 	andlt	r0, r8, r3, asr r0
    76e0:	01080053 	qaddeq	r0, r3, r8
    76e4:	53b65700 			; <UNDEFINED> instruction: 0x53b65700
    76e8:	53c80800 	bicpl	r0, r8, #0, 16
    76ec:	00010800 	andeq	r0, r1, r0, lsl #16
    76f0:	00000059 	andeq	r0, r0, r9, asr r0
    76f4:	00000000 	andeq	r0, r0, r0
    76f8:	00524c00 	subseq	r4, r2, r0, lsl #24
    76fc:	00526a08 	subseq	r6, r2, r8, lsl #20
    7700:	58000108 	stmdapl	r0, {r3, r8}
    7704:	0800536a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, ip, lr}
    7708:	0800538a 	stmdaeq	r0, {r1, r3, r7, r8, r9, ip, lr}
    770c:	8a580001 	bhi	1607718 <__Stack_Size+0x1606f18>
    7710:	b0080053 	andlt	r0, r8, r3, asr r0
    7714:	02080053 	andeq	r0, r8, #83	; 0x53
    7718:	b69f3000 	ldrlt	r3, [pc], r0
    771c:	c8080053 	stmdagt	r8, {r0, r1, r4, r6}
    7720:	02080053 	andeq	r0, r8, #83	; 0x53
    7724:	009f3000 	addseq	r3, pc, r0
    7728:	00000000 	andeq	r0, r0, r0
    772c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    7730:	6a080052 	bvs	207880 <__Stack_Size+0x207080>
    7734:	06080052 			; <UNDEFINED> instruction: 0x06080052
    7738:	78400800 	stmdavc	r0, {fp}^
    773c:	6a9f1c00 	bvs	fe7ce744 <BootRAM+0xd73eee5>
    7740:	ae080053 	mcrge	0, 0, r0, cr8, cr3, {2}
    7744:	06080053 			; <UNDEFINED> instruction: 0x06080053
    7748:	78400800 	stmdavc	r0, {fp}^
    774c:	ae9f1c00 	cdpge	12, 9, cr1, cr15, cr0, {0}
    7750:	b0080053 	andlt	r0, r8, r3, asr r0
    7754:	06080053 			; <UNDEFINED> instruction: 0x06080053
    7758:	76480800 	strbvc	r0, [r8], -r0, lsl #16
    775c:	b69f1c00 	ldrlt	r1, [pc], r0, lsl #24
    7760:	c0080053 	andgt	r0, r8, r3, asr r0
    7764:	06080053 			; <UNDEFINED> instruction: 0x06080053
    7768:	78400800 	stmdavc	r0, {fp}^
    776c:	c09f1c00 	addsgt	r1, pc, r0, lsl #24
    7770:	c8080053 	stmdagt	r8, {r0, r1, r4, r6}
    7774:	05080053 	streq	r0, [r8, #-83]	; 0x53
    7778:	00763800 	rsbseq	r3, r6, r0, lsl #16
    777c:	00009f1c 	andeq	r9, r0, ip, lsl pc
    7780:	00000000 	andeq	r0, r0, r0
    7784:	53c80000 	bicpl	r0, r8, #0
    7788:	53d80800 	bicspl	r0, r8, #0, 16
    778c:	00010800 	andeq	r0, r1, r0, lsl #16
    7790:	0053d850 	subseq	sp, r3, r0, asr r8
    7794:	00585608 	subseq	r5, r8, r8, lsl #12
    7798:	91000308 	tstls	r0, r8, lsl #6
    779c:	58567e9c 	ldmdapl	r6, {r2, r3, r4, r7, r9, sl, fp, ip, sp, lr}^
    77a0:	585c0800 	ldmdapl	ip, {fp}^
    77a4:	00030800 	andeq	r0, r3, r0, lsl #16
    77a8:	007e9c7d 	rsbseq	r9, lr, sp, ror ip
    77ac:	00000000 	andeq	r0, r0, r0
    77b0:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    77b4:	d8080053 	stmdale	r8, {r0, r1, r4, r6}
    77b8:	01080053 	qaddeq	r0, r3, r8
    77bc:	53d85100 	bicspl	r5, r8, #0, 2
    77c0:	549c0800 	ldrpl	r0, [ip], #2048	; 0x800
    77c4:	00010800 	andeq	r0, r1, r0, lsl #16
    77c8:	00000054 	andeq	r0, r0, r4, asr r0
    77cc:	00000000 	andeq	r0, r0, r0
    77d0:	0054c800 	subseq	ip, r4, r0, lsl #16
    77d4:	0054f008 	subseq	pc, r4, r8
    77d8:	50000608 	andpl	r0, r0, r8, lsl #12
    77dc:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    77e0:	0054f004 	subseq	pc, r4, r4
    77e4:	00550608 	subseq	r0, r5, r8, lsl #12
    77e8:	71000208 	tstvc	r0, r8, lsl #4
    77ec:	00550600 	subseq	r0, r5, r0, lsl #12
    77f0:	00552408 	subseq	r2, r5, r8, lsl #8
    77f4:	75000208 	strvc	r0, [r0, #-520]	; 0x208
    77f8:	00552400 	subseq	r2, r5, r0, lsl #8
    77fc:	00555608 	subseq	r5, r5, r8, lsl #12
    7800:	50000608 	andpl	r0, r0, r8, lsl #12
    7804:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    7808:	00555604 	subseq	r5, r5, r4, lsl #12
    780c:	00578608 	subseq	r8, r7, r8, lsl #12
    7810:	5a000608 	bpl	9038 <__Stack_Size+0x8838>
    7814:	935b0493 	cmpls	fp, #-1828716544	; 0x93000000
    7818:	00578604 	subseq	r8, r7, r4, lsl #12
    781c:	00579808 	subseq	r9, r7, r8, lsl #16
    7820:	50000608 	andpl	r0, r0, r8, lsl #12
    7824:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    7828:	00000004 	andeq	r0, r0, r4
    782c:	00000000 	andeq	r0, r0, r0
    7830:	0054c800 	subseq	ip, r4, r0, lsl #16
    7834:	00552408 	subseq	r2, r5, r8, lsl #8
    7838:	91000308 	tstls	r0, r8, lsl #6
    783c:	55247d80 	strpl	r7, [r4, #-3456]!	; 0xd80
    7840:	55540800 	ldrbpl	r0, [r4, #-2048]	; 0x800
    7844:	00060800 	andeq	r0, r6, r0, lsl #16
    7848:	5b04935a 	blpl	12c5b8 <__Stack_Size+0x12bdb8>
    784c:	55540493 	ldrbpl	r0, [r4, #-1171]	; 0x493
    7850:	57800800 	strpl	r0, [r0, r0, lsl #16]
    7854:	00030800 	andeq	r0, r3, r0, lsl #16
    7858:	807d8091 			; <UNDEFINED> instruction: 0x807d8091
    785c:	a0080057 	andge	r0, r8, r7, asr r0
    7860:	06080057 			; <UNDEFINED> instruction: 0x06080057
    7864:	04935a00 	ldreq	r5, [r3], #2560	; 0xa00
    7868:	0004935b 	andeq	r9, r4, fp, asr r3
    786c:	00000000 	andeq	r0, r0, r0
    7870:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    7874:	24080054 	strcs	r0, [r8], #-84	; 0x54
    7878:	03080055 	movweq	r0, #32853	; 0x8055
    787c:	7d889100 	stfvcd	f1, [r8]
    7880:	08005524 	stmdaeq	r0, {r2, r5, r8, sl, ip, lr}
    7884:	08005550 	stmdaeq	r0, {r4, r6, r8, sl, ip, lr}
    7888:	80910003 	addshi	r0, r1, r3
    788c:	0055567d 	subseq	r5, r5, sp, ror r6
    7890:	00578008 	subseq	r8, r7, r8
    7894:	91000308 	tstls	r0, r8, lsl #6
    7898:	57807d88 	strpl	r7, [r0, r8, lsl #27]
    789c:	58560800 	ldmdapl	r6, {fp}^
    78a0:	00030800 	andeq	r0, r3, r0, lsl #16
    78a4:	567d8091 			; <UNDEFINED> instruction: 0x567d8091
    78a8:	5c080058 	stcpl	0, cr0, [r8], {88}	; 0x58
    78ac:	03080058 	movweq	r0, #32856	; 0x8058
    78b0:	7d807d00 	stcvc	13, cr7, [r0]
	...
    78bc:	080054d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip, lr}
    78c0:	080054e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, ip, lr}
    78c4:	93560006 	cmpls	r6, #6
    78c8:	04935704 	ldreq	r5, [r3], #1796	; 0x704
    78cc:	080054e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, ip, lr}
    78d0:	08005506 	stmdaeq	r0, {r1, r2, r8, sl, ip, lr}
    78d4:	18710002 	ldmdane	r1!, {r1}^
    78d8:	08005506 	stmdaeq	r0, {r1, r2, r8, sl, ip, lr}
    78dc:	08005524 	stmdaeq	r0, {r2, r5, r8, sl, ip, lr}
    78e0:	18750002 	ldmdane	r5!, {r1}^
    78e4:	08005524 	stmdaeq	r0, {r2, r5, r8, sl, ip, lr}
    78e8:	08005544 	stmdaeq	r0, {r2, r6, r8, sl, ip, lr}
    78ec:	88910003 	ldmhi	r1, {r0, r1}
    78f0:	0055567d 	subseq	r5, r5, sp, ror r6
    78f4:	00578008 	subseq	r8, r7, r8
    78f8:	91000308 	tstls	r0, r8, lsl #6
    78fc:	57807df8 			; <UNDEFINED> instruction: 0x57807df8
    7900:	58560800 	ldmdapl	r6, {fp}^
    7904:	00030800 	andeq	r0, r3, r0, lsl #16
    7908:	567d8891 			; <UNDEFINED> instruction: 0x567d8891
    790c:	5c080058 	stcpl	0, cr0, [r8], {88}	; 0x58
    7910:	03080058 	movweq	r0, #32856	; 0x8058
    7914:	7d887d00 	stcvc	13, cr7, [r8]
	...
    7920:	0800550c 	stmdaeq	r0, {r2, r3, r8, sl, ip, lr}
    7924:	08005512 	stmdaeq	r0, {r1, r4, r8, sl, ip, lr}
    7928:	935a0006 	cmpls	sl, #6
    792c:	04935b04 	ldreq	r5, [r3], #2820	; 0xb04
    7930:	08005512 	stmdaeq	r0, {r1, r4, r8, sl, ip, lr}
    7934:	08005524 	stmdaeq	r0, {r2, r5, r8, sl, ip, lr}
    7938:	20750002 	rsbscs	r0, r5, r2
    793c:	08005524 	stmdaeq	r0, {r2, r5, r8, sl, ip, lr}
    7940:	0800554c 	stmdaeq	r0, {r2, r3, r6, r8, sl, ip, lr}
    7944:	93520006 	cmpls	r2, #6
    7948:	04935304 	ldreq	r5, [r3], #772	; 0x304
    794c:	08005556 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl, ip, lr}
    7950:	08005780 	stmdaeq	r0, {r7, r8, r9, sl, ip, lr}
    7954:	93580006 	cmpls	r8, #6
    7958:	04935904 	ldreq	r5, [r3], #2308	; 0x904
    795c:	08005780 	stmdaeq	r0, {r7, r8, r9, sl, ip, lr}
    7960:	08005794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, ip, lr}
    7964:	93520006 	cmpls	r2, #6
    7968:	04935304 	ldreq	r5, [r3], #772	; 0x304
	...
    7974:	0800550c 	stmdaeq	r0, {r2, r3, r8, sl, ip, lr}
    7978:	08005524 	stmdaeq	r0, {r2, r5, r8, sl, ip, lr}
    797c:	28750002 	ldmdacs	r5!, {r1}^
    7980:	08005524 	stmdaeq	r0, {r2, r5, r8, sl, ip, lr}
    7984:	0800554a 	stmdaeq	r0, {r1, r3, r6, r8, sl, ip, lr}
    7988:	93580006 	cmpls	r8, #6
    798c:	04935904 	ldreq	r5, [r3], #2308	; 0x904
    7990:	0800554a 	stmdaeq	r0, {r1, r3, r6, r8, sl, ip, lr}
    7994:	08005776 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, sl, ip, lr}
    7998:	a0910003 	addsge	r0, r1, r3
    799c:	0057767d 	subseq	r7, r7, sp, ror r6
    79a0:	00579c08 	subseq	r9, r7, r8, lsl #24
    79a4:	58000608 	stmdapl	r0, {r3, r9, sl}
    79a8:	93590493 	cmpls	r9, #-1828716544	; 0x93000000
    79ac:	00000004 	andeq	r0, r0, r4
    79b0:	00000000 	andeq	r0, r0, r0
    79b4:	00550c00 	subseq	r0, r5, r0, lsl #24
    79b8:	00552408 	subseq	r2, r5, r8, lsl #8
    79bc:	75000208 	strvc	r0, [r0, #-520]	; 0x208
    79c0:	00552430 	subseq	r2, r5, r0, lsr r4
    79c4:	00554808 	subseq	r4, r5, r8, lsl #16
    79c8:	91000308 	tstls	r0, r8, lsl #6
    79cc:	55567da0 	ldrbpl	r7, [r6, #-3488]	; 0xda0
    79d0:	57760800 	ldrbpl	r0, [r6, -r0, lsl #16]!
    79d4:	00030800 	andeq	r0, r3, r0, lsl #16
    79d8:	767d9891 			; <UNDEFINED> instruction: 0x767d9891
    79dc:	56080057 			; <UNDEFINED> instruction: 0x56080057
    79e0:	03080058 	movweq	r0, #32856	; 0x8058
    79e4:	7da09100 	stfvcd	f1, [r0]
    79e8:	08005856 	stmdaeq	r0, {r1, r2, r4, r6, fp, ip, lr}
    79ec:	0800585c 	stmdaeq	r0, {r2, r3, r4, r6, fp, ip, lr}
    79f0:	a07d0003 	rsbsge	r0, sp, r3
    79f4:	0000007d 	andeq	r0, r0, sp, ror r0
    79f8:	00000000 	andeq	r0, r0, r0
    79fc:	00550c00 	subseq	r0, r5, r0, lsl #24
    7a00:	00552408 	subseq	r2, r5, r8, lsl #8
    7a04:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    7a08:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    7a0c:	00552404 	subseq	r2, r5, r4, lsl #8
    7a10:	00554008 	subseq	r4, r5, r8
    7a14:	91000308 	tstls	r0, r8, lsl #6
    7a18:	55567d98 	ldrbpl	r7, [r6, #-3480]	; 0xd98
    7a1c:	57760800 	ldrbpl	r0, [r6, -r0, lsl #16]!
    7a20:	00030800 	andeq	r0, r3, r0, lsl #16
    7a24:	767e8091 			; <UNDEFINED> instruction: 0x767e8091
    7a28:	56080057 			; <UNDEFINED> instruction: 0x56080057
    7a2c:	03080058 	movweq	r0, #32856	; 0x8058
    7a30:	7d989100 	ldfvcd	f1, [r8]
    7a34:	08005856 	stmdaeq	r0, {r1, r2, r4, r6, fp, ip, lr}
    7a38:	0800585c 	stmdaeq	r0, {r2, r3, r4, r6, fp, ip, lr}
    7a3c:	987d0003 	ldmdals	sp!, {r0, r1}^
    7a40:	0000007d 	andeq	r0, r0, sp, ror r0
    7a44:	00000000 	andeq	r0, r0, r0
    7a48:	0053c800 	subseq	ip, r3, r0, lsl #16
    7a4c:	0053d808 	subseq	sp, r3, r8, lsl #16
    7a50:	30000208 	andcc	r0, r0, r8, lsl #4
    7a54:	00550c9f 			; <UNDEFINED> instruction: 0x00550c9f
    7a58:	00552408 	subseq	r2, r5, r8, lsl #8
    7a5c:	30000208 	andcc	r0, r0, r8, lsl #4
    7a60:	0055249f 			; <UNDEFINED> instruction: 0x0055249f
    7a64:	00557808 	subseq	r7, r5, r8, lsl #16
    7a68:	5c000108 	stfpls	f0, [r0], {8}
    7a6c:	08005578 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, ip, lr}
    7a70:	08005786 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, ip, lr}
    7a74:	7f7c0003 	svcvc	0x007c0003
    7a78:	0057869f 			; <UNDEFINED> instruction: 0x0057869f
    7a7c:	00581008 	subseq	r1, r8, r8
    7a80:	5c000108 	stfpls	f0, [r0], {8}
	...
    7a8c:	080053d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, ip, lr}
    7a90:	080053e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, ip, lr}
    7a94:	01740003 	cmneq	r4, r3
    7a98:	0053e69f 			; <UNDEFINED> instruction: 0x0053e69f
    7a9c:	0053f608 	subseq	pc, r3, r8, lsl #12
    7aa0:	74000308 	strvc	r0, [r0], #-776	; 0x308
    7aa4:	53f69f02 	mvnspl	r9, #2, 30
    7aa8:	54140800 	ldrpl	r0, [r4], #-2048	; 0x800
    7aac:	00030800 	andeq	r0, r3, r0, lsl #16
    7ab0:	149f0374 	ldrne	r0, [pc], #884	; 7ab8 <__Stack_Size+0x72b8>
    7ab4:	32080054 	andcc	r0, r8, #84	; 0x54
    7ab8:	03080054 	movweq	r0, #32852	; 0x8054
    7abc:	9f047400 	svcls	0x00047400
    7ac0:	08005432 	stmdaeq	r0, {r1, r4, r5, sl, ip, lr}
    7ac4:	0800544c 	stmdaeq	r0, {r2, r3, r6, sl, ip, lr}
    7ac8:	05740003 	ldrbeq	r0, [r4, #-3]!
    7acc:	00544c9f 			; <UNDEFINED> instruction: 0x00544c9f
    7ad0:	00546408 	subseq	r6, r4, r8, lsl #8
    7ad4:	74000308 	strvc	r0, [r0], #-776	; 0x308
    7ad8:	54649f06 	strbtpl	r9, [r4], #-3846	; 0xf06
    7adc:	54780800 	ldrbtpl	r0, [r8], #-2048	; 0x800
    7ae0:	00030800 	andeq	r0, r3, r0, lsl #16
    7ae4:	789f0774 	ldmvc	pc, {r2, r4, r5, r6, r8, r9, sl}	; <UNPREDICTABLE>
    7ae8:	7e080054 	mcrvc	0, 0, r0, cr8, cr4, {2}
    7aec:	03080054 	movweq	r0, #32852	; 0x8054
    7af0:	9f087400 	svcls	0x00087400
    7af4:	0800547e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, ip, lr}
    7af8:	0800549c 	stmdaeq	r0, {r2, r3, r4, r7, sl, ip, lr}
    7afc:	00540001 	subseq	r0, r4, r1
    7b00:	00000000 	andeq	r0, r0, r0
    7b04:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    7b08:	e6080053 			; <UNDEFINED> instruction: 0xe6080053
    7b0c:	09080053 	stmdbeq	r8, {r0, r1, r4, r6}
    7b10:	94007400 	strls	r7, [r0], #-1024	; 0x400
    7b14:	f72cf701 			; <UNDEFINED> instruction: 0xf72cf701
    7b18:	53e69f25 	mvnpl	r9, #37, 30	; 0x94
    7b1c:	53f60800 	mvnspl	r0, #0, 16
    7b20:	00100800 	andseq	r0, r0, r0, lsl #16
    7b24:	01940174 	orrseq	r0, r4, r4, ror r1
    7b28:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    7b2c:	f67d9091 			; <UNDEFINED> instruction: 0xf67d9091
    7b30:	9f212508 	svcls	0x00212508
    7b34:	080053f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, ip, lr}
    7b38:	08005414 	stmdaeq	r0, {r2, r4, sl, ip, lr}
    7b3c:	0274000d 	rsbseq	r0, r4, #13
    7b40:	2cf70194 	ldfcse	f0, [r7], #592	; 0x250
    7b44:	06f525f7 			; <UNDEFINED> instruction: 0x06f525f7
    7b48:	149f2125 	ldrne	r2, [pc], #293	; 7b50 <__Stack_Size+0x7350>
    7b4c:	32080054 	andcc	r0, r8, #84	; 0x54
    7b50:	10080054 	andne	r0, r8, r4, asr r0
    7b54:	94037400 	strls	r7, [r3], #-1024	; 0x400
    7b58:	f72cf701 			; <UNDEFINED> instruction: 0xf72cf701
    7b5c:	7d809125 	stfvcd	f1, [r0, #148]	; 0x94
    7b60:	212508f6 	strdcs	r0, [r5, -r6]!
    7b64:	0054329f 			; <UNDEFINED> instruction: 0x0054329f
    7b68:	00544c08 	subseq	r4, r4, r8, lsl #24
    7b6c:	74001008 	strvc	r1, [r0], #-8
    7b70:	f7019404 			; <UNDEFINED> instruction: 0xf7019404
    7b74:	9125f72c 	msrls	SP_abt, ip
    7b78:	08f67d88 	ldmeq	r6!, {r3, r7, r8, sl, fp, ip, sp, lr}^
    7b7c:	4c9f2125 	ldfmis	f2, [pc], {37}	; 0x25
    7b80:	64080054 	strvs	r0, [r8], #-84	; 0x54
    7b84:	0d080054 	stceq	0, cr0, [r8, #-336]	; 0xfffffeb0
    7b88:	94057400 	strls	r7, [r5], #-1024	; 0x400
    7b8c:	f72cf701 			; <UNDEFINED> instruction: 0xf72cf701
    7b90:	250af525 	strcs	pc, [sl, #-1317]	; 0x525
    7b94:	54649f21 	strbtpl	r9, [r4], #-3873	; 0xf21
    7b98:	54780800 	ldrbtpl	r0, [r8], #-2048	; 0x800
    7b9c:	000d0800 	andeq	r0, sp, r0, lsl #16
    7ba0:	01940674 	orrseq	r0, r4, r4, ror r6
    7ba4:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    7ba8:	212508f5 	strdcs	r0, [r5, -r5]!
    7bac:	0054789f 			; <UNDEFINED> instruction: 0x0054789f
    7bb0:	00547e08 	subseq	r7, r4, r8, lsl #28
    7bb4:	74000d08 	strvc	r0, [r0], #-3336	; 0xd08
    7bb8:	f7019407 			; <UNDEFINED> instruction: 0xf7019407
    7bbc:	f525f72c 			; <UNDEFINED> instruction: 0xf525f72c
    7bc0:	9f212502 	svcls	0x00212502
    7bc4:	0800547e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, ip, lr}
    7bc8:	08005492 	stmdaeq	r0, {r1, r4, r7, sl, ip, lr}
    7bcc:	7f74000d 	svcvc	0x0074000d
    7bd0:	2cf70194 	ldfcse	f0, [r7], #592	; 0x250
    7bd4:	02f525f7 	rscseq	r2, r5, #1035993088	; 0x3dc00000
    7bd8:	009f2125 	addseq	r2, pc, r5, lsr #2
    7bdc:	00000000 	andeq	r0, r0, r0
    7be0:	e2000000 	and	r0, r0, #0
    7be4:	3c080055 	stccc	0, cr0, [r8], {85}	; 0x55
    7be8:	03080057 	movweq	r0, #32855	; 0x8057
    7bec:	7f807500 	svcvc	0x00807500
	...
    7bf8:	080055e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, sl, ip, lr}
    7bfc:	080055f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, ip, lr}
    7c00:	93500006 	cmpls	r0, #6
    7c04:	04935104 	ldreq	r5, [r3], #260	; 0x104
    7c08:	080055f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, ip, lr}
    7c0c:	0800564e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sl, ip, lr}
    7c10:	9091000c 	addsls	r0, r1, ip
    7c14:	2433067d 	ldrtcs	r0, [r3], #-1661	; 0x67d
    7c18:	08220091 	stmdaeq	r2!, {r0, r4, r7}
    7c1c:	564e1ca0 	strbpl	r1, [lr], -r0, lsr #25
    7c20:	56960800 	ldrpl	r0, [r6], r0, lsl #16
    7c24:	000c0800 	andeq	r0, ip, r0, lsl #16
    7c28:	067d9091 			; <UNDEFINED> instruction: 0x067d9091
    7c2c:	00772433 	rsbseq	r2, r7, r3, lsr r4
    7c30:	1c800822 	stcne	8, cr0, [r0], {34}	; 0x22
    7c34:	08005696 	stmdaeq	r0, {r1, r2, r4, r7, r9, sl, ip, lr}
    7c38:	0800573c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip, lr}
    7c3c:	9091000c 	addsls	r0, r1, ip
    7c40:	2433067d 	ldrtcs	r0, [r3], #-1661	; 0x67d
    7c44:	08220091 	stmdaeq	r2!, {r0, r4, r7}
    7c48:	00001ca0 	andeq	r1, r0, r0, lsr #25
    7c4c:	00000000 	andeq	r0, r0, r0
    7c50:	55e20000 	strbpl	r0, [r2, #0]!
    7c54:	56920800 	ldrpl	r0, [r2], r0, lsl #16
    7c58:	00060800 	andeq	r0, r6, r0, lsl #16
    7c5c:	53049352 	movwpl	r9, #17234	; 0x4352
    7c60:	56920493 			; <UNDEFINED> instruction: 0x56920493
    7c64:	56960800 	ldrpl	r0, [r6], r0, lsl #16
    7c68:	000c0800 	andeq	r0, ip, r0, lsl #16
    7c6c:	1a3f0d7c 	bne	fcb264 <__Stack_Size+0xfcaa64>
    7c70:	00772433 	rsbseq	r2, r7, r3, lsr r4
    7c74:	1c800822 	stcne	8, cr0, [r0], {34}	; 0x22
    7c78:	08005696 	stmdaeq	r0, {r1, r2, r4, r7, r9, sl, ip, lr}
    7c7c:	0800573c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip, lr}
    7c80:	0d7c000c 	ldcleq	0, cr0, [ip, #-48]!	; 0xffffffd0
    7c84:	24331a3f 	ldrtcs	r1, [r3], #-2623	; 0xa3f
    7c88:	08220091 	stmdaeq	r2!, {r0, r4, r7}
    7c8c:	00001ca0 	andeq	r1, r0, r0, lsr #25
    7c90:	00000000 	andeq	r0, r0, r0
    7c94:	55e20000 	strbpl	r0, [r2, #0]!
    7c98:	56520800 	ldrbpl	r0, [r2], -r0, lsl #16
    7c9c:	000c0800 	andeq	r0, ip, r0, lsl #16
    7ca0:	1a3f087c 	bne	fc9e98 <__Stack_Size+0xfc9698>
    7ca4:	00912433 	addseq	r2, r1, r3, lsr r4
    7ca8:	1ca80822 	stcne	8, cr0, [r8], #136	; 0x88
    7cac:	08005652 	stmdaeq	r0, {r1, r4, r6, r9, sl, ip, lr}
    7cb0:	08005656 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, ip, lr}
    7cb4:	0074000a 	rsbseq	r0, r4, sl
    7cb8:	00912433 	addseq	r2, r1, r3, lsr r4
    7cbc:	1ca80822 	stcne	8, cr0, [r8], #136	; 0x88
    7cc0:	08005656 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, ip, lr}
    7cc4:	0800573c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip, lr}
    7cc8:	087c000c 	ldmdaeq	ip!, {r2, r3}^
    7ccc:	24331a3f 	ldrtcs	r1, [r3], #-2623	; 0xa3f
    7cd0:	08220091 	stmdaeq	r2!, {r0, r4, r7}
    7cd4:	00001ca8 	andeq	r1, r0, r8, lsr #25
    7cd8:	00000000 	andeq	r0, r0, r0
    7cdc:	55e20000 	strbpl	r0, [r2, #0]!
    7ce0:	55f40800 	ldrbpl	r0, [r4, #2048]!	; 0x800
    7ce4:	00280800 	eoreq	r0, r8, r0, lsl #16
    7ce8:	312500f5 	strdcc	r0, [r5, -r5]!
    7cec:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7cf0:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7cf4:	f5212517 			; <UNDEFINED> instruction: 0xf5212517
    7cf8:	f7372500 			; <UNDEFINED> instruction: 0xf7372500
    7cfc:	f5272525 			; <UNDEFINED> instruction: 0xf5272525
    7d00:	f7382500 			; <UNDEFINED> instruction: 0xf7382500
    7d04:	1f141425 	svcne	0x00141425
    7d08:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7d0c:	9f272125 	svcls	0x00272125
    7d10:	080055f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, ip, lr}
    7d14:	0800564e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sl, ip, lr}
    7d18:	9091004c 	addsls	r0, r1, ip, asr #32
    7d1c:	2433067d 	ldrtcs	r0, [r3], #-1661	; 0x67d
    7d20:	08220091 	stmdaeq	r2!, {r0, r4, r7}
    7d24:	08f61ca0 	ldmeq	r6!, {r5, r7, sl, fp, ip}^
    7d28:	25f73125 	ldrbcs	r3, [r7, #293]!	; 0x125
    7d2c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7d30:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7d34:	7d909121 	ldfvcd	f1, [r0, #132]	; 0x84
    7d38:	91243306 	teqls	r4, r6, lsl #6
    7d3c:	a0082200 	andge	r2, r8, r0, lsl #4
    7d40:	2508f61c 	strcs	pc, [r8, #-1564]	; 0x61c
    7d44:	2525f737 	strcs	pc, [r5, #-1847]!	; 0x737
    7d48:	7d909127 	ldfvcd	f1, [r0, #156]	; 0x9c
    7d4c:	91243306 	teqls	r4, r6, lsl #6
    7d50:	a0082200 	andge	r2, r8, r0, lsl #4
    7d54:	2508f61c 	strcs	pc, [r8, #-1564]	; 0x61c
    7d58:	1425f738 	strtne	pc, [r5], #-1848	; 0x738
    7d5c:	40231f14 	eormi	r1, r3, r4, lsl pc
    7d60:	21251724 	teqcs	r5, r4, lsr #14
    7d64:	564e9f27 	strbpl	r9, [lr], -r7, lsr #30
    7d68:	56960800 	ldrpl	r0, [r6], r0, lsl #16
    7d6c:	004c0800 	subeq	r0, ip, r0, lsl #16
    7d70:	067d9091 			; <UNDEFINED> instruction: 0x067d9091
    7d74:	00772433 	rsbseq	r2, r7, r3, lsr r4
    7d78:	1c800822 	stcne	8, cr0, [r0], {34}	; 0x22
    7d7c:	312508f6 	strdcc	r0, [r5, -r6]!
    7d80:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7d84:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7d88:	91212517 	teqls	r1, r7, lsl r5
    7d8c:	33067d90 	movwcc	r7, #28048	; 0x6d90
    7d90:	22007724 	andcs	r7, r0, #36, 14	; 0x900000
    7d94:	f61c8008 			; <UNDEFINED> instruction: 0xf61c8008
    7d98:	f7372508 			; <UNDEFINED> instruction: 0xf7372508
    7d9c:	91272525 	teqls	r7, r5, lsr #10
    7da0:	33067d90 	movwcc	r7, #28048	; 0x6d90
    7da4:	22007724 	andcs	r7, r0, #36, 14	; 0x900000
    7da8:	f61c8008 			; <UNDEFINED> instruction: 0xf61c8008
    7dac:	f7382508 			; <UNDEFINED> instruction: 0xf7382508
    7db0:	1f141425 	svcne	0x00141425
    7db4:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7db8:	9f272125 	svcls	0x00272125
    7dbc:	08005696 	stmdaeq	r0, {r1, r2, r4, r7, r9, sl, ip, lr}
    7dc0:	0800573c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip, lr}
    7dc4:	9091004c 	addsls	r0, r1, ip, asr #32
    7dc8:	2433067d 	ldrtcs	r0, [r3], #-1661	; 0x67d
    7dcc:	08220091 	stmdaeq	r2!, {r0, r4, r7}
    7dd0:	08f61ca0 	ldmeq	r6!, {r5, r7, sl, fp, ip}^
    7dd4:	25f73125 	ldrbcs	r3, [r7, #293]!	; 0x125
    7dd8:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7ddc:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7de0:	7d909121 	ldfvcd	f1, [r0, #132]	; 0x84
    7de4:	91243306 	teqls	r4, r6, lsl #6
    7de8:	a0082200 	andge	r2, r8, r0, lsl #4
    7dec:	2508f61c 	strcs	pc, [r8, #-1564]	; 0x61c
    7df0:	2525f737 	strcs	pc, [r5, #-1847]!	; 0x737
    7df4:	7d909127 	ldfvcd	f1, [r0, #156]	; 0x9c
    7df8:	91243306 	teqls	r4, r6, lsl #6
    7dfc:	a0082200 	andge	r2, r8, r0, lsl #4
    7e00:	2508f61c 	strcs	pc, [r8, #-1564]	; 0x61c
    7e04:	1425f738 	strtne	pc, [r5], #-1848	; 0x738
    7e08:	40231f14 	eormi	r1, r3, r4, lsl pc
    7e0c:	21251724 	teqcs	r5, r4, lsr #14
    7e10:	00009f27 	andeq	r9, r0, r7, lsr #30
    7e14:	00000000 	andeq	r0, r0, r0
    7e18:	55e20000 	strbpl	r0, [r2, #0]!
    7e1c:	56920800 	ldrpl	r0, [r2], r0, lsl #16
    7e20:	00290800 	eoreq	r0, r9, r0, lsl #16
    7e24:	432502f5 	teqmi	r5, #1342177295	; 0x5000000f
    7e28:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7e2c:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7e30:	f5212517 			; <UNDEFINED> instruction: 0xf5212517
    7e34:	f7362502 			; <UNDEFINED> instruction: 0xf7362502
    7e38:	f5272525 			; <UNDEFINED> instruction: 0xf5272525
    7e3c:	3d082502 	cfstr32cc	mvfx2, [r8, #-8]
    7e40:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7e44:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7e48:	27212517 			; <UNDEFINED> instruction: 0x27212517
    7e4c:	0056929f 			; <UNDEFINED> instruction: 0x0056929f
    7e50:	00569608 	subseq	r9, r6, r8, lsl #12
    7e54:	7c004d08 	stcvc	13, cr4, [r0], {8}
    7e58:	331a3f0d 	tstcc	sl, #13, 30	; 0x34
    7e5c:	22007724 	andcs	r7, r0, #36, 14	; 0x900000
    7e60:	f61c8008 			; <UNDEFINED> instruction: 0xf61c8008
    7e64:	f7432508 			; <UNDEFINED> instruction: 0xf7432508
    7e68:	1f141425 	svcne	0x00141425
    7e6c:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7e70:	0d7c2125 	ldfeqe	f2, [ip, #-148]!	; 0xffffff6c
    7e74:	24331a3f 	ldrtcs	r1, [r3], #-2623	; 0xa3f
    7e78:	08220077 	stmdaeq	r2!, {r0, r1, r2, r4, r5, r6}
    7e7c:	08f61c80 	ldmeq	r6!, {r7, sl, fp, ip}^
    7e80:	25f73625 	ldrbcs	r3, [r7, #1573]!	; 0x625
    7e84:	0d7c2725 	ldcleq	7, cr2, [ip, #-148]!	; 0xffffff6c
    7e88:	24331a3f 	ldrtcs	r1, [r3], #-2623	; 0xa3f
    7e8c:	08220077 	stmdaeq	r2!, {r0, r1, r2, r4, r5, r6}
    7e90:	08f61c80 	ldmeq	r6!, {r7, sl, fp, ip}^
    7e94:	f73d0825 			; <UNDEFINED> instruction: 0xf73d0825
    7e98:	1f141425 	svcne	0x00141425
    7e9c:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7ea0:	9f272125 	svcls	0x00272125
    7ea4:	08005696 	stmdaeq	r0, {r1, r2, r4, r7, r9, sl, ip, lr}
    7ea8:	0800573c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip, lr}
    7eac:	0d7c004d 	ldcleq	0, cr0, [ip, #-308]!	; 0xfffffecc
    7eb0:	24331a3f 	ldrtcs	r1, [r3], #-2623	; 0xa3f
    7eb4:	08220091 	stmdaeq	r2!, {r0, r4, r7}
    7eb8:	08f61ca0 	ldmeq	r6!, {r5, r7, sl, fp, ip}^
    7ebc:	25f74325 	ldrbcs	r4, [r7, #805]!	; 0x325
    7ec0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7ec4:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7ec8:	3f0d7c21 	svccc	0x000d7c21
    7ecc:	9124331a 	teqls	r4, sl, lsl r3
    7ed0:	a0082200 	andge	r2, r8, r0, lsl #4
    7ed4:	2508f61c 	strcs	pc, [r8, #-1564]	; 0x61c
    7ed8:	2525f736 	strcs	pc, [r5, #-1846]!	; 0x736
    7edc:	3f0d7c27 	svccc	0x000d7c27
    7ee0:	9124331a 	teqls	r4, sl, lsl r3
    7ee4:	a0082200 	andge	r2, r8, r0, lsl #4
    7ee8:	2508f61c 	strcs	pc, [r8, #-1564]	; 0x61c
    7eec:	25f73d08 	ldrbcs	r3, [r7, #3336]!	; 0xd08
    7ef0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7ef4:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7ef8:	009f2721 	addseq	r2, pc, r1, lsr #14
    7efc:	00000000 	andeq	r0, r0, r0
    7f00:	24000000 	strcs	r0, [r0], #-0
    7f04:	54080055 	strpl	r0, [r8], #-85	; 0x55
    7f08:	32080055 	andcc	r0, r8, #85	; 0x55
    7f0c:	250af500 	strcs	pc, [sl, #-1280]	; 0x500
    7f10:	25f72208 	ldrbcs	r2, [r7, #520]!	; 0x208
    7f14:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7f18:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7f1c:	250af521 	strcs	pc, [sl, #-1313]	; 0x521
    7f20:	1425f74c 	strtne	pc, [r5], #-1868	; 0x74c
    7f24:	40231f14 	eormi	r1, r3, r4, lsl pc
    7f28:	21251724 	teqcs	r5, r4, lsr #14
    7f2c:	250af527 	strcs	pc, [sl, #-1319]	; 0x527
    7f30:	25f72708 	ldrbcs	r2, [r7, #1800]!	; 0x708
    7f34:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7f38:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7f3c:	549f2721 	ldrpl	r2, [pc], #1825	; 7f44 <__Stack_Size+0x7744>
    7f40:	56080055 			; <UNDEFINED> instruction: 0x56080055
    7f44:	3b080055 	blcc	2080a0 <__Stack_Size+0x2078a0>
    7f48:	7d809100 	stfvcd	f1, [r0]
    7f4c:	082508f6 	stmdaeq	r5!, {r1, r2, r4, r5, r6, r7, fp}
    7f50:	1425f722 	strtne	pc, [r5], #-1826	; 0x722
    7f54:	40231f14 	eormi	r1, r3, r4, lsl pc
    7f58:	21251724 	teqcs	r5, r4, lsr #14
    7f5c:	f67d8091 			; <UNDEFINED> instruction: 0xf67d8091
    7f60:	f74c2508 			; <UNDEFINED> instruction: 0xf74c2508
    7f64:	1f141425 	svcne	0x00141425
    7f68:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7f6c:	91272125 	teqls	r7, r5, lsr #2
    7f70:	08f67d80 	ldmeq	r6!, {r7, r8, sl, fp, ip, sp, lr}^
    7f74:	f7270825 			; <UNDEFINED> instruction: 0xf7270825
    7f78:	1f141425 	svcne	0x00141425
    7f7c:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7f80:	9f272125 	svcls	0x00272125
    7f84:	080055e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, sl, ip, lr}
    7f88:	080057a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, ip, lr}
    7f8c:	0af50032 	beq	ffd4805c <BootRAM+0xecb87fd>
    7f90:	f7220825 			; <UNDEFINED> instruction: 0xf7220825
    7f94:	1f141425 	svcne	0x00141425
    7f98:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7f9c:	0af52125 	beq	ffd50438 <BootRAM+0xecc0bd9>
    7fa0:	25f74c25 	ldrbcs	r4, [r7, #3109]!	; 0xc25
    7fa4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7fa8:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7fac:	0af52721 	beq	ffd51c38 <BootRAM+0xecc23d9>
    7fb0:	f7270825 			; <UNDEFINED> instruction: 0xf7270825
    7fb4:	1f141425 	svcne	0x00141425
    7fb8:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7fbc:	9f272125 	svcls	0x00272125
	...
    7fc8:	08005524 	stmdaeq	r0, {r2, r5, r8, sl, ip, lr}
    7fcc:	0800554a 	stmdaeq	r0, {r1, r3, r6, r8, sl, ip, lr}
    7fd0:	08f50031 	ldmeq	r5!, {r0, r4, r5}^
    7fd4:	25f74225 	ldrbcs	r4, [r7, #549]!	; 0x225
    7fd8:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7fdc:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7fe0:	2508f521 	strcs	pc, [r8, #-1313]	; 0x521
    7fe4:	1425f73e 	strtne	pc, [r5], #-1854	; 0x73e
    7fe8:	40231f14 	eormi	r1, r3, r4, lsl pc
    7fec:	21251724 	teqcs	r5, r4, lsr #14
    7ff0:	2508f527 	strcs	pc, [r8, #-1319]	; 0x527
    7ff4:	25f72908 	ldrbcs	r2, [r7, #2312]!	; 0x908
    7ff8:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7ffc:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    8000:	4a9f2721 	bmi	fe7d1c8c <BootRAM+0xd74242d>
    8004:	56080055 			; <UNDEFINED> instruction: 0x56080055
    8008:	3a080055 	bcc	208164 <__Stack_Size+0x207964>
    800c:	7da09100 	stfvcd	f1, [r0]
    8010:	422508f6 	eormi	r0, r5, #16121856	; 0xf60000
    8014:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    8018:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    801c:	91212517 	teqls	r1, r7, lsl r5
    8020:	08f67da0 	ldmeq	r6!, {r5, r7, r8, sl, fp, ip, sp, lr}^
    8024:	25f73e25 	ldrbcs	r3, [r7, #3621]!	; 0xe25
    8028:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    802c:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    8030:	a0912721 	addsge	r2, r1, r1, lsr #14
    8034:	2508f67d 	strcs	pc, [r8, #-1661]	; 0x67d
    8038:	25f72908 	ldrbcs	r2, [r7, #2312]!	; 0x908
    803c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    8040:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    8044:	e29f2721 	adds	r2, pc, #8650752	; 0x840000
    8048:	9c080055 	stcls	0, cr0, [r8], {85}	; 0x55
    804c:	31080057 	qaddcc	r0, r7, r8
    8050:	2508f500 	strcs	pc, [r8, #-1280]	; 0x500
    8054:	1425f742 	strtne	pc, [r5], #-1858	; 0x742
    8058:	40231f14 	eormi	r1, r3, r4, lsl pc
    805c:	21251724 	teqcs	r5, r4, lsr #14
    8060:	3e2508f5 	mcrcc	8, 1, r0, cr5, cr5, {7}
    8064:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    8068:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    806c:	27212517 			; <UNDEFINED> instruction: 0x27212517
    8070:	082508f5 	stmdaeq	r5!, {r0, r2, r4, r5, r6, r7, fp}
    8074:	1425f729 	strtne	pc, [r5], #-1833	; 0x729
    8078:	40231f14 	eormi	r1, r3, r4, lsl pc
    807c:	21251724 	teqcs	r5, r4, lsr #14
    8080:	00009f27 	andeq	r9, r0, r7, lsr #30
    8084:	00000000 	andeq	r0, r0, r0
    8088:	55240000 	strpl	r0, [r4, #-0]!
    808c:	55400800 	strbpl	r0, [r0, #-2048]	; 0x800
    8090:	00170800 	andseq	r0, r7, r0, lsl #16
    8094:	202508f5 	strdcs	r0, [r5], -r5	; <UNPREDICTABLE>
    8098:	f67d9891 			; <UNDEFINED> instruction: 0xf67d9891
    809c:	911a2508 	tstls	sl, r8, lsl #10
    80a0:	08f67da0 	ldmeq	r6!, {r5, r7, r8, sl, fp, ip, sp, lr}^
    80a4:	2508f525 	strcs	pc, [r8, #-1317]	; 0x525
    80a8:	e29f271a 	adds	r2, pc, #6815744	; 0x680000
    80ac:	9c080055 	stcls	0, cr0, [r8], {85}	; 0x55
    80b0:	17080057 	smlsdne	r8, r7, r0, r0
    80b4:	2508f500 	strcs	pc, [r8, #-1280]	; 0x500
    80b8:	7d989120 	ldfvcd	f1, [r8, #128]	; 0x80
    80bc:	1a2508f6 	bne	94a49c <__Stack_Size+0x949c9c>
    80c0:	f67da091 			; <UNDEFINED> instruction: 0xf67da091
    80c4:	08f52508 	ldmeq	r5!, {r3, r8, sl, sp}^
    80c8:	9f271a25 	svcls	0x00271a25
	...
    80d4:	0800576c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, ip, lr}
    80d8:	08005782 	stmdaeq	r0, {r1, r7, r8, r9, sl, ip, lr}
    80dc:	93500006 	cmpls	r0, #6
    80e0:	04935104 	ldreq	r5, [r3], #260	; 0x104
	...
    80ec:	08005524 	stmdaeq	r0, {r2, r5, r8, sl, ip, lr}
    80f0:	08005544 	stmdaeq	r0, {r2, r6, r8, sl, ip, lr}
    80f4:	88910020 	ldmhi	r1, {r5}
    80f8:	2508f67d 	strcs	pc, [r8, #-1661]	; 0x67d
    80fc:	f67d8091 			; <UNDEFINED> instruction: 0xf67d8091
    8100:	f5272508 			; <UNDEFINED> instruction: 0xf5272508
    8104:	911a250a 	tstls	sl, sl, lsl #10
    8108:	08f67d88 	ldmeq	r6!, {r3, r7, r8, sl, fp, ip, sp, lr}^
    810c:	7d809125 	stfvcd	f1, [r0, #148]	; 0x94
    8110:	1a2508f6 	bne	94a4f0 <__Stack_Size+0x949cf0>
    8114:	576c9f27 	strbpl	r9, [ip, -r7, lsr #30]!
    8118:	57a00800 	strpl	r0, [r0, r0, lsl #16]!
    811c:	00200800 	eoreq	r0, r0, r0, lsl #16
    8120:	f67d8891 			; <UNDEFINED> instruction: 0xf67d8891
    8124:	80912508 	addshi	r2, r1, r8, lsl #10
    8128:	2508f67d 	strcs	pc, [r8, #-1661]	; 0x67d
    812c:	250af527 	strcs	pc, [sl, #-1319]	; 0x527
    8130:	7d88911a 	stfvcd	f1, [r8, #104]	; 0x68
    8134:	912508f6 	strdls	r0, [r5, -r6]!
    8138:	08f67d80 	ldmeq	r6!, {r7, r8, sl, fp, ip, sp, lr}^
    813c:	9f271a25 	svcls	0x00271a25
	...
    8148:	08005524 	stmdaeq	r0, {r2, r5, r8, sl, ip, lr}
    814c:	08005528 	stmdaeq	r0, {r3, r5, r8, sl, ip, lr}
    8150:	93540006 	cmpls	r4, #6
    8154:	04935504 	ldreq	r5, [r3], #1284	; 0x504
    8158:	08005776 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, sl, ip, lr}
    815c:	08005790 	stmdaeq	r0, {r4, r7, r8, r9, sl, ip, lr}
    8160:	93540006 	cmpls	r4, #6
    8164:	04935504 	ldreq	r5, [r3], #1284	; 0x504
	...
    8170:	08005524 	stmdaeq	r0, {r2, r5, r8, sl, ip, lr}
    8174:	08005556 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl, ip, lr}
    8178:	9f420002 	svcls	0x00420002
    817c:	080055e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, sl, ip, lr}
    8180:	0800585c 	stmdaeq	r0, {r2, r3, r4, r6, fp, ip, lr}
    8184:	9f420002 	svcls	0x00420002
	...
    8190:	08005524 	stmdaeq	r0, {r2, r5, r8, sl, ip, lr}
    8194:	0800554a 	stmdaeq	r0, {r1, r3, r6, r8, sl, ip, lr}
    8198:	93580006 	cmpls	r8, #6
    819c:	04935904 	ldreq	r5, [r3], #2308	; 0x904
    81a0:	0800554a 	stmdaeq	r0, {r1, r3, r6, r8, sl, ip, lr}
    81a4:	08005556 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl, ip, lr}
    81a8:	a0910003 	addsge	r0, r1, r3
    81ac:	0055e27d 	subseq	lr, r5, sp, ror r2
    81b0:	00579c08 	subseq	r9, r7, r8, lsl #24
    81b4:	58000608 	stmdapl	r0, {r3, r9, sl}
    81b8:	93590493 	cmpls	r9, #-1828716544	; 0x93000000
    81bc:	00000004 	andeq	r0, r0, r4
    81c0:	00000000 	andeq	r0, r0, r0
    81c4:	00552400 	subseq	r2, r5, r0, lsl #8
    81c8:	00555608 	subseq	r5, r5, r8, lsl #12
    81cc:	3e000208 	cdpcc	2, 0, cr0, cr0, cr8, {0}
    81d0:	0055e29f 			; <UNDEFINED> instruction: 0x0055e29f
    81d4:	00585c08 	subseq	r5, r8, r8, lsl #24
    81d8:	3e000208 	cdpcc	2, 0, cr0, cr0, cr8, {0}
    81dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    81e0:	00000000 	andeq	r0, r0, r0
    81e4:	00552400 	subseq	r2, r5, r0, lsl #8
    81e8:	00555608 	subseq	r5, r5, r8, lsl #12
    81ec:	08000308 	stmdaeq	r0, {r3, r8, r9}
    81f0:	55e29f29 	strbpl	r9, [r2, #3881]!	; 0xf29
    81f4:	585c0800 	ldmdapl	ip, {fp}^
    81f8:	00030800 	andeq	r0, r3, r0, lsl #16
    81fc:	009f2908 	addseq	r2, pc, r8, lsl #18
    8200:	00000000 	andeq	r0, r0, r0
    8204:	24000000 	strcs	r0, [r0], #-0
    8208:	56080055 			; <UNDEFINED> instruction: 0x56080055
    820c:	02080055 	andeq	r0, r8, #85	; 0x55
    8210:	e29f3100 	adds	r3, pc, #0, 2
    8214:	5c080055 	stcpl	0, cr0, [r8], {85}	; 0x55
    8218:	02080058 	andeq	r0, r8, #88	; 0x58
    821c:	009f3100 	addseq	r3, pc, r0, lsl #2
    8220:	00000000 	andeq	r0, r0, r0
    8224:	24000000 	strcs	r0, [r0], #-0
    8228:	56080055 			; <UNDEFINED> instruction: 0x56080055
    822c:	02080055 	andeq	r0, r8, #85	; 0x55
    8230:	e29f3800 	adds	r3, pc, #0, 16
    8234:	5c080055 	stcpl	0, cr0, [r8], {85}	; 0x55
    8238:	02080058 	andeq	r0, r8, #88	; 0x58
    823c:	009f3800 	addseq	r3, pc, r0, lsl #16
    8240:	00000000 	andeq	r0, r0, r0
    8244:	24000000 	strcs	r0, [r0], #-0
    8248:	56080055 			; <UNDEFINED> instruction: 0x56080055
    824c:	02080055 	andeq	r0, r8, #85	; 0x55
    8250:	e29f4300 	adds	r4, pc, #0, 6
    8254:	5c080055 	stcpl	0, cr0, [r8], {85}	; 0x55
    8258:	02080058 	andeq	r0, r8, #88	; 0x58
    825c:	009f4300 	addseq	r4, pc, r0, lsl #6
    8260:	00000000 	andeq	r0, r0, r0
    8264:	24000000 	strcs	r0, [r0], #-0
    8268:	56080055 			; <UNDEFINED> instruction: 0x56080055
    826c:	03080055 	movweq	r0, #32853	; 0x8055
    8270:	9f220800 	svcls	0x00220800
    8274:	080055e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, sl, ip, lr}
    8278:	0800585c 	stmdaeq	r0, {r2, r3, r4, r6, fp, ip, lr}
    827c:	22080003 	andcs	r0, r8, #3
    8280:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8284:	00000000 	andeq	r0, r0, r0
    8288:	00552400 	subseq	r2, r5, r0, lsl #8
    828c:	00555408 	subseq	r5, r5, r8, lsl #8
    8290:	5a000608 	bpl	9ab8 <__Stack_Size+0x92b8>
    8294:	935b0493 	cmpls	fp, #-1828716544	; 0x93000000
    8298:	00555404 	subseq	r5, r5, r4, lsl #8
    829c:	00555608 	subseq	r5, r5, r8, lsl #12
    82a0:	91000308 	tstls	r0, r8, lsl #6
    82a4:	55e27d80 	strbpl	r7, [r2, #3456]!	; 0xd80
    82a8:	57a00800 	strpl	r0, [r0, r0, lsl #16]!
    82ac:	00060800 	andeq	r0, r6, r0, lsl #16
    82b0:	5b04935a 	blpl	12d020 <__Stack_Size+0x12c820>
    82b4:	00000493 	muleq	r0, r3, r4
    82b8:	00000000 	andeq	r0, r0, r0
    82bc:	55240000 	strpl	r0, [r4, #-0]!
    82c0:	55560800 	ldrbpl	r0, [r6, #-2048]	; 0x800
    82c4:	00020800 	andeq	r0, r2, r0, lsl #16
    82c8:	55e29f4c 	strbpl	r9, [r2, #3916]!	; 0xf4c
    82cc:	585c0800 	ldmdapl	ip, {fp}^
    82d0:	00020800 	andeq	r0, r2, r0, lsl #16
    82d4:	00009f4c 	andeq	r9, r0, ip, asr #30
    82d8:	00000000 	andeq	r0, r0, r0
    82dc:	55240000 	strpl	r0, [r4, #-0]!
    82e0:	55560800 	ldrbpl	r0, [r6, #-2048]	; 0x800
    82e4:	00030800 	andeq	r0, r3, r0, lsl #16
    82e8:	e29f3d08 	adds	r3, pc, #8, 26	; 0x200
    82ec:	5c080055 	stcpl	0, cr0, [r8], {85}	; 0x55
    82f0:	03080058 	movweq	r0, #32856	; 0x8058
    82f4:	9f3d0800 	svcls	0x003d0800
	...
    8300:	08005524 	stmdaeq	r0, {r2, r5, r8, sl, ip, lr}
    8304:	08005556 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl, ip, lr}
    8308:	27080003 	strcs	r0, [r8, -r3]
    830c:	0055e29f 			; <UNDEFINED> instruction: 0x0055e29f
    8310:	00585c08 	subseq	r5, r8, r8, lsl #24
    8314:	08000308 	stmdaeq	r0, {r3, r8, r9}
    8318:	00009f27 	andeq	r9, r0, r7, lsr #30
    831c:	00000000 	andeq	r0, r0, r0
    8320:	585c0000 	ldmdapl	ip, {}^	; <UNPREDICTABLE>
    8324:	586c0800 	stmdapl	ip!, {fp}^
    8328:	00010800 	andeq	r0, r1, r0, lsl #16
    832c:	00586c50 	subseq	r6, r8, r0, asr ip
    8330:	0058e408 	subseq	lr, r8, r8, lsl #8
    8334:	5a000108 	bpl	875c <__Stack_Size+0x7f5c>
	...
    8340:	0800585c 	stmdaeq	r0, {r2, r3, r4, r6, fp, ip, lr}
    8344:	08005870 	stmdaeq	r0, {r4, r5, r6, fp, ip, lr}
    8348:	70510001 	subsvc	r0, r1, r1
    834c:	e4080058 	str	r0, [r8], #-88	; 0x58
    8350:	01080058 	qaddeq	r0, r8, r8
    8354:	00005700 	andeq	r5, r0, r0, lsl #14
    8358:	00000000 	andeq	r0, r0, r0
    835c:	585c0000 	ldmdapl	ip, {}^	; <UNPREDICTABLE>
    8360:	586e0800 	stmdapl	lr!, {fp}^
    8364:	00010800 	andeq	r0, r1, r0, lsl #16
    8368:	00586e52 	subseq	r6, r8, r2, asr lr
    836c:	00588208 	subseq	r8, r8, r8, lsl #4
    8370:	54000108 	strpl	r0, [r0], #-264	; 0x108
    8374:	08005882 	stmdaeq	r0, {r1, r7, fp, ip, lr}
    8378:	080058b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, ip, lr}
    837c:	01f30004 	mvnseq	r0, r4
    8380:	58b89f52 	ldmpl	r8!, {r1, r4, r6, r8, r9, sl, fp, ip, pc}
    8384:	58e40800 	stmiapl	r4!, {fp}^
    8388:	00010800 	andeq	r0, r1, r0, lsl #16
    838c:	00000054 	andeq	r0, r0, r4, asr r0
    8390:	00000000 	andeq	r0, r0, r0
    8394:	00587400 	subseq	r7, r8, r0, lsl #8
    8398:	00587808 	subseq	r7, r8, r8, lsl #16
    839c:	74000608 	strvc	r0, [r0], #-1544	; 0x608
    83a0:	1a7f0800 	bne	1fca3a8 <__Stack_Size+0x1fc9ba8>
    83a4:	0058789f 			; <UNDEFINED> instruction: 0x0058789f
    83a8:	00588408 	subseq	r8, r8, r8, lsl #8
    83ac:	56000108 	strpl	r0, [r0], -r8, lsl #2
    83b0:	08005884 	stmdaeq	r0, {r2, r7, fp, ip, lr}
    83b4:	080058b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, ip, lr}
    83b8:	01f30007 	mvnseq	r0, r7
    83bc:	1a7f0852 	bne	1fca50c <__Stack_Size+0x1fc9d0c>
    83c0:	0058b89f 			; <UNDEFINED> instruction: 0x0058b89f
    83c4:	0058e408 	subseq	lr, r8, r8, lsl #8
    83c8:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    83d4:	08005880 	stmdaeq	r0, {r7, fp, ip, lr}
    83d8:	08005886 	stmdaeq	r0, {r1, r2, r7, fp, ip, lr}
    83dc:	00720007 	rsbseq	r0, r2, r7
    83e0:	25f733f7 	ldrbcs	r3, [r7, #1015]!	; 0x3f7
    83e4:	00589e9f 			; <UNDEFINED> instruction: 0x00589e9f
    83e8:	0058b808 	subseq	fp, r8, r8, lsl #16
    83ec:	9e000a08 	vmlals.f32	s0, s0, s16
    83f0:	00000008 	andeq	r0, r0, r8
	...
    8400:	00588000 	subseq	r8, r8, r0
    8404:	00588608 	subseq	r8, r8, r8, lsl #12
    8408:	91000308 	tstls	r0, r8, lsl #6
    840c:	58869f5e 	stmpl	r6, {r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, pc}
    8410:	589a0800 	ldmpl	sl, {fp}
    8414:	00030800 	andeq	r0, r3, r0, lsl #16
    8418:	9a9f5c91 	bls	fe7df664 <BootRAM+0xd74fe05>
    841c:	9e080058 	mcrls	0, 0, r0, cr8, cr8, {2}
    8420:	03080058 	movweq	r0, #32856	; 0x8058
    8424:	9f5b9100 	svcls	0x005b9100
    8428:	0800589e 	stmdaeq	r0, {r1, r2, r3, r4, r7, fp, ip, lr}
    842c:	080058a2 	stmdaeq	r0, {r1, r5, r7, fp, ip, lr}
    8430:	5a910003 	bpl	fe448444 <BootRAM+0xd3b8be5>
    8434:	0058a29f 			; <UNDEFINED> instruction: 0x0058a29f
    8438:	0058a608 	subseq	sl, r8, r8, lsl #12
    843c:	91000308 	tstls	r0, r8, lsl #6
    8440:	58a69f59 	stmiapl	r6!, {r0, r3, r4, r6, r8, r9, sl, fp, ip, pc}
    8444:	58aa0800 	stmiapl	sl!, {fp}
    8448:	00030800 	andeq	r0, r3, r0, lsl #16
    844c:	aa9f5891 	bge	fe7de698 <BootRAM+0xd74ee39>
    8450:	b8080058 	stmdalt	r8, {r3, r4, r6}
    8454:	03080058 	movweq	r0, #32856	; 0x8058
    8458:	9f579100 	svcls	0x00579100
	...
    8464:	080058e4 	stmdaeq	r0, {r2, r5, r6, r7, fp, ip, lr}
    8468:	080058fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, fp, ip, lr}
    846c:	fe500001 	cdp2	0, 5, cr0, cr0, cr1, {0}
    8470:	7a080058 	bvc	2085d8 <__Stack_Size+0x207dd8>
    8474:	0208005b 	andeq	r0, r8, #91	; 0x5b
    8478:	00409100 	subeq	r9, r0, r0, lsl #2
    847c:	00000000 	andeq	r0, r0, r0
    8480:	e4000000 	str	r0, [r0], #-0
    8484:	f6080058 			; <UNDEFINED> instruction: 0xf6080058
    8488:	01080058 	qaddeq	r0, r8, r8
    848c:	58f65100 	ldmpl	r6!, {r8, ip, lr}^
    8490:	59340800 	ldmdbpl	r4!, {fp}
    8494:	00030800 	andeq	r0, r3, r0, lsl #16
    8498:	347fac91 	ldrbtcc	sl, [pc], #-3217	; 84a0 <__Stack_Size+0x7ca0>
    849c:	ca080059 	bgt	208608 <__Stack_Size+0x207e08>
    84a0:	01080059 	qaddeq	r0, r9, r8
    84a4:	59f05100 	ldmibpl	r0!, {r8, ip, lr}^
    84a8:	5acc0800 	bpl	ff30a4b0 <BootRAM+0xe27ac51>
    84ac:	00030800 	andeq	r0, r3, r0, lsl #16
    84b0:	cc7fac91 	ldclgt	12, cr10, [pc], #-580	; 8274 <__Stack_Size+0x7a74>
    84b4:	d208005a 	andle	r0, r8, #90	; 0x5a
    84b8:	0108005a 	qaddeq	r0, sl, r8
    84bc:	00005400 	andeq	r5, r0, r0, lsl #8
    84c0:	00000000 	andeq	r0, r0, r0
    84c4:	58e40000 	stmiapl	r4!, {}^	; <UNPREDICTABLE>
    84c8:	59020800 	stmdbpl	r2, {fp}
    84cc:	00010800 	andeq	r0, r1, r0, lsl #16
    84d0:	00590252 	subseq	r0, r9, r2, asr r2
    84d4:	00590608 	subseq	r0, r9, r8, lsl #12
    84d8:	f3000408 	vshl.u8	d0, d8, d0
    84dc:	009f5201 	addseq	r5, pc, r1, lsl #4
    84e0:	00000000 	andeq	r0, r0, r0
    84e4:	e4000000 	str	r0, [r0], #-0
    84e8:	04080058 	streq	r0, [r8], #-88	; 0x58
    84ec:	01080059 	qaddeq	r0, r9, r8
    84f0:	59045300 	stmdbpl	r4, {r8, r9, ip, lr}
    84f4:	590a0800 	stmdbpl	sl, {fp}
    84f8:	00010800 	andeq	r0, r1, r0, lsl #16
    84fc:	00590a51 	subseq	r0, r9, r1, asr sl
    8500:	00593408 	subseq	r3, r9, r8, lsl #8
    8504:	91000308 	tstls	r0, r8, lsl #6
    8508:	59f07fa4 	ldmibpl	r0!, {r2, r5, r7, r8, r9, sl, fp, ip, sp, lr}^
    850c:	5a040800 	bpl	10a514 <__Stack_Size+0x109d14>
    8510:	00010800 	andeq	r0, r1, r0, lsl #16
    8514:	005a0451 	subseq	r0, sl, r1, asr r4
    8518:	005ab208 	subseq	fp, sl, r8, lsl #4
    851c:	91000308 	tstls	r0, r8, lsl #6
    8520:	5ab27fa4 	bpl	feca83b8 <BootRAM+0xdc18b59>
    8524:	5ac00800 	bpl	ff00a52c <BootRAM+0xdf7accd>
    8528:	001b0800 	andseq	r0, fp, r0, lsl #16
    852c:	01f38008 	mvnseq	r8, r8
    8530:	40121c52 	andsmi	r1, r2, r2, asr ip
    8534:	f322244b 	vshl.u32	q1, <illegal reg q5.5>, q1
    8538:	14165301 	ldrne	r5, [r6], #-769	; 0x301
    853c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    8540:	0001282d 	andeq	r2, r1, sp, lsr #16
    8544:	c09f1316 	addsgt	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    8548:	d208005a 	andle	r0, r8, #90	; 0x5a
    854c:	0308005a 	movweq	r0, #32858	; 0x805a
    8550:	7fa49100 	svcvc	0x00a49100
	...
    855c:	08005abc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, fp, ip, lr}
    8560:	08005abf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r9, fp, ip, lr}
    8564:	bf5c0001 	svclt	0x005c0001
    8568:	d008005a 	andle	r0, r8, sl, asr r0
    856c:	0708005a 	smlsdeq	r8, sl, r0, r0
    8570:	7fa89100 	svcvc	0x00a89100
    8574:	9f012306 	svcls	0x00012306
	...
    8580:	0800593e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
    8584:	08005946 	stmdaeq	r0, {r1, r2, r6, r8, fp, ip, lr}
    8588:	93520006 	cmpls	r2, #6
    858c:	04935304 	ldreq	r5, [r3], #772	; 0x304
    8590:	08005946 	stmdaeq	r0, {r1, r2, r6, r8, fp, ip, lr}
    8594:	0800594e 	stmdaeq	r0, {r1, r2, r3, r6, r8, fp, ip, lr}
    8598:	b8910004 	ldmlt	r1, {r2}
    859c:	594e067f 	stmdbpl	lr, {r0, r1, r2, r3, r4, r5, r6, r9, sl}^
    85a0:	59700800 	ldmdbpl	r0!, {fp}^
    85a4:	00060800 	andeq	r0, r6, r0, lsl #16
    85a8:	53049352 	movwpl	r9, #17234	; 0x4352
    85ac:	59700493 	ldmdbpl	r0!, {r0, r1, r4, r7, sl}^
    85b0:	59760800 	ldmdbpl	r6!, {fp}^
    85b4:	00060800 	andeq	r0, r6, r0, lsl #16
    85b8:	5b04935a 	blpl	12d328 <__Stack_Size+0x12cb28>
    85bc:	59760493 	ldmdbpl	r6!, {r0, r1, r4, r7, sl}^
    85c0:	597c0800 	ldmdbpl	ip!, {fp}^
    85c4:	00060800 	andeq	r0, r6, r0, lsl #16
    85c8:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    85cc:	597c0493 	ldmdbpl	ip!, {r0, r1, r4, r7, sl}^
    85d0:	59880800 	stmibpl	r8, {fp}
    85d4:	00060800 	andeq	r0, r6, r0, lsl #16
    85d8:	57049356 	smlsdpl	r4, r6, r3, r9
    85dc:	59880493 	stmibpl	r8, {r0, r1, r4, r7, sl}
    85e0:	59ac0800 	stmibpl	ip!, {fp}
    85e4:	00060800 	andeq	r0, r6, r0, lsl #16
    85e8:	59049358 	stmdbpl	r4, {r3, r4, r6, r8, r9, ip, pc}
    85ec:	00000493 	muleq	r0, r3, r4
    85f0:	00000000 	andeq	r0, r0, r0
    85f4:	593e0000 	ldmdbpl	lr!, {}	; <UNPREDICTABLE>
    85f8:	594e0800 	stmdbpl	lr, {fp}^
    85fc:	00030800 	andeq	r0, r3, r0, lsl #16
    8600:	4e9f0671 	mrcmi	6, 4, r0, cr15, cr1, {3}
    8604:	70080059 	andvc	r0, r8, r9, asr r0
    8608:	03080059 	movweq	r0, #32857	; 0x8059
    860c:	9f057100 	svcls	0x00057100
    8610:	08005970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, lr}
    8614:	08005976 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, fp, ip, lr}
    8618:	03710003 	cmneq	r1, #3
    861c:	0059769f 			; <UNDEFINED> instruction: 0x0059769f
    8620:	00597c08 	subseq	r7, r9, r8, lsl #24
    8624:	71000308 	tstvc	r0, r8, lsl #6
    8628:	597c9f02 	ldmdbpl	ip!, {r1, r8, r9, sl, fp, ip, pc}^
    862c:	59880800 	stmibpl	r8, {fp}
    8630:	00030800 	andeq	r0, r3, r0, lsl #16
    8634:	889f0171 	ldmhi	pc, {r0, r4, r5, r6, r8}	; <UNPREDICTABLE>
    8638:	ac080059 	stcge	0, cr0, [r8], {89}	; 0x59
    863c:	01080059 	qaddeq	r0, r9, r8
    8640:	59ac5100 	stmibpl	ip!, {r8, ip, lr}
    8644:	59be0800 	ldmibpl	lr!, {fp}
    8648:	00030800 	andeq	r0, r3, r0, lsl #16
    864c:	be9f7f71 	mrclt	15, 4, r7, cr15, cr1, {3}
    8650:	ca080059 	bgt	2087bc <__Stack_Size+0x207fbc>
    8654:	03080059 	movweq	r0, #32857	; 0x8059
    8658:	9f777100 	svcls	0x00777100
	...
    8664:	08005abc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, fp, ip, lr}
    8668:	08005abf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r9, fp, ip, lr}
    866c:	00520001 	subseq	r0, r2, r1
    8670:	00000000 	andeq	r0, r0, r0
    8674:	bc000000 	stclt	0, cr0, [r0], {-0}
    8678:	d208005a 	andle	r0, r8, #90	; 0x5a
    867c:	0308005a 	movweq	r0, #32858	; 0x805a
    8680:	9f479100 	svcls	0x00479100
	...
    868c:	08005ae2 	stmdaeq	r0, {r1, r5, r6, r7, r9, fp, ip, lr}
    8690:	08005af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip, lr}
    8694:	93500006 	cmpls	r0, #6
    8698:	04935104 	ldreq	r5, [r3], #260	; 0x104
    869c:	08005af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip, lr}
    86a0:	08005afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, ip, lr}
    86a4:	935a0006 	cmpls	sl, #6
    86a8:	04935b04 	ldreq	r5, [r3], #2820	; 0xb04
    86ac:	08005afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, ip, lr}
    86b0:	08005b08 	stmdaeq	r0, {r3, r8, r9, fp, ip, lr}
    86b4:	93580006 	cmpls	r8, #6
    86b8:	04935904 	ldreq	r5, [r3], #2308	; 0x904
    86bc:	08005b08 	stmdaeq	r0, {r3, r8, r9, fp, ip, lr}
    86c0:	08005b10 	stmdaeq	r0, {r4, r8, r9, fp, ip, lr}
    86c4:	93560006 	cmpls	r6, #6
    86c8:	04935704 	ldreq	r5, [r3], #1796	; 0x704
    86cc:	08005b10 	stmdaeq	r0, {r4, r8, r9, fp, ip, lr}
    86d0:	08005b18 	stmdaeq	r0, {r3, r4, r8, r9, fp, ip, lr}
    86d4:	93540006 	cmpls	r4, #6
    86d8:	04935504 	ldreq	r5, [r3], #1284	; 0x504
    86dc:	08005b18 	stmdaeq	r0, {r3, r4, r8, r9, fp, ip, lr}
    86e0:	08005b46 	stmdaeq	r0, {r1, r2, r6, r8, r9, fp, ip, lr}
    86e4:	93500006 	cmpls	r0, #6
    86e8:	04935104 	ldreq	r5, [r3], #260	; 0x104
    86ec:	08005b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, ip, lr}
    86f0:	08005b7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, fp, ip, lr}
    86f4:	8891000b 	ldmhi	r1, {r0, r1, r3}
    86f8:	2508f67f 	strcs	pc, [r8, #-1663]	; 0x67f
    86fc:	2525f738 	strcs	pc, [r5, #-1848]!	; 0x738
    8700:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8704:	00000000 	andeq	r0, r0, r0
    8708:	005ae200 	subseq	lr, sl, r0, lsl #4
    870c:	005af408 	subseq	pc, sl, r8, lsl #8
    8710:	91000308 	tstls	r0, r8, lsl #6
    8714:	5af49f4e 	bpl	ffd30454 <BootRAM+0xeca0bf5>
    8718:	5afc0800 	bpl	fff0a720 <BootRAM+0xee7aec1>
    871c:	00030800 	andeq	r0, r3, r0, lsl #16
    8720:	fc9f4d91 	ldc2	13, cr4, [pc], {145}	; 0x91
    8724:	0808005a 	stmdaeq	r8, {r1, r3, r4, r6}
    8728:	0308005b 	movweq	r0, #32859	; 0x805b
    872c:	9f4c9100 	svcls	0x004c9100
    8730:	08005b08 	stmdaeq	r0, {r3, r8, r9, fp, ip, lr}
    8734:	08005b10 	stmdaeq	r0, {r4, r8, r9, fp, ip, lr}
    8738:	4b910003 	blmi	fe44874c <BootRAM+0xd3b8eed>
    873c:	005b109f 			; <UNDEFINED> instruction: 0x005b109f
    8740:	005b1808 	subseq	r1, fp, r8, lsl #16
    8744:	91000308 	tstls	r0, r8, lsl #6
    8748:	5b189f4a 	blpl	630478 <__Stack_Size+0x62fc78>
    874c:	5b500800 	blpl	140a754 <__Stack_Size+0x1409f54>
    8750:	00030800 	andeq	r0, r3, r0, lsl #16
    8754:	509f4991 	umullspl	r4, pc, r1, r9	; <UNPREDICTABLE>
    8758:	7a08005b 	bvc	2088cc <__Stack_Size+0x2080cc>
    875c:	0308005b 	movweq	r0, #32859	; 0x805b
    8760:	9f479100 	svcls	0x00479100
	...
    876c:	08005b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, ip, lr}
    8770:	08005b8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, fp, ip, lr}
    8774:	8c500001 	mrrchi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    8778:	0208005b 	andeq	r0, r8, #91	; 0x5b
    877c:	0108005d 	qaddeq	r0, sp, r8
    8780:	5d025500 	cfstr32pl	mvfx5, [r2, #-0]
    8784:	5d200800 	stcpl	8, cr0, [r0, #-0]
    8788:	00040800 	andeq	r0, r4, r0, lsl #16
    878c:	9f5001f3 	svcls	0x005001f3
	...
    8798:	08005b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, ip, lr}
    879c:	08005b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, ip, lr}
    87a0:	88510001 	ldmdahi	r1, {r0}^
    87a4:	0208005b 	andeq	r0, r8, #91	; 0x5b
    87a8:	0108005d 	qaddeq	r0, sp, r8
    87ac:	5d025600 	stcpl	6, cr5, [r2, #-0]
    87b0:	5d200800 	stcpl	8, cr0, [r0, #-0]
    87b4:	00040800 	andeq	r0, r4, r0, lsl #16
    87b8:	9f5101f3 	svcls	0x005101f3
	...
    87c4:	08005b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, ip, lr}
    87c8:	08005b8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, fp, ip, lr}
    87cc:	8e520001 	cdphi	0, 5, cr0, cr2, cr1, {0}
    87d0:	2008005b 	andcs	r0, r8, fp, asr r0
    87d4:	0408005d 	streq	r0, [r8], #-93	; 0x5d
    87d8:	5201f300 	andpl	pc, r1, #0, 6
    87dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    87e0:	00000000 	andeq	r0, r0, r0
    87e4:	005bb200 	subseq	fp, fp, r0, lsl #4
    87e8:	005d0208 	subseq	r0, sp, r8, lsl #4
    87ec:	91000408 	tstls	r0, r8, lsl #8
    87f0:	029f7f80 	addseq	r7, pc, #128, 30	; 0x200
    87f4:	2008005d 	andcs	r0, r8, sp, asr r0
    87f8:	0408005d 	streq	r0, [r8], #-93	; 0x5d
    87fc:	7f807d00 	svcvc	0x00807d00
    8800:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8804:	00000000 	andeq	r0, r0, r0
    8808:	005b8200 	subseq	r8, fp, r0, lsl #4
    880c:	005b8c08 	subseq	r8, fp, r8, lsl #24
    8810:	91000308 	tstls	r0, r8, lsl #6
    8814:	5b8c7f80 	blpl	fe32861c <BootRAM+0xd298dbd>
    8818:	5b910800 	blpl	fe44a820 <BootRAM+0xd3bafc1>
    881c:	00020800 	andeq	r0, r2, r0, lsl #16
    8820:	5b910070 	blpl	fe4489e8 <BootRAM+0xd3b9189>
    8824:	5b980800 	blpl	fe60a82c <BootRAM+0xd57afcd>
    8828:	00030800 	andeq	r0, r3, r0, lsl #16
    882c:	987f8091 	ldmdals	pc!, {r0, r4, r7, pc}^	; <UNPREDICTABLE>
    8830:	9b08005b 	blls	2089a4 <__Stack_Size+0x2081a4>
    8834:	0208005b 	andeq	r0, r8, #91	; 0x5b
    8838:	9b007000 	blls	24840 <__Stack_Size+0x24040>
    883c:	0208005b 	andeq	r0, r8, #91	; 0x5b
    8840:	0308005d 	movweq	r0, #32861	; 0x805d
    8844:	7f809100 	svcvc	0x00809100
    8848:	08005d02 	stmdaeq	r0, {r1, r8, sl, fp, ip, lr}
    884c:	08005d20 	stmdaeq	r0, {r5, r8, sl, fp, ip, lr}
    8850:	807d0003 	rsbshi	r0, sp, r3
    8854:	0000007f 	andeq	r0, r0, pc, ror r0
    8858:	00000000 	andeq	r0, r0, r0
    885c:	005bb200 	subseq	fp, fp, r0, lsl #4
    8860:	005bd208 	subseq	sp, fp, r8, lsl #4
    8864:	30000208 	andcc	r0, r0, r8, lsl #4
    8868:	005bd29f 			; <UNDEFINED> instruction: 0x005bd29f
    886c:	005bd808 	subseq	sp, fp, r8, lsl #16
    8870:	74000708 	strvc	r0, [r0], #-1800	; 0x708
    8874:	bffe8080 	svclt	0x00fe8080
    8878:	5bd89f7f 	blpl	ff63067c <BootRAM+0xe5a0e1d>
    887c:	5be40800 	blpl	ff90a884 <BootRAM+0xe87b025>
    8880:	00070800 	andeq	r0, r7, r0, lsl #16
    8884:	fe87f074 	mcr2	0, 4, pc, cr7, cr4, {3}	; <UNPREDICTABLE>
    8888:	e49f7fbf 	ldr	r7, [pc], #4031	; 8890 <__Stack_Size+0x8090>
    888c:	e608005b 			; <UNDEFINED> instruction: 0xe608005b
    8890:	0708005b 	smlsdeq	r8, fp, r0, r0
    8894:	80807400 	addhi	r7, r0, r0, lsl #8
    8898:	9f7fbffe 	svcls	0x007fbffe
    889c:	08005bf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, fp, ip, lr}
    88a0:	08005cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, ip, lr}
    88a4:	9f300002 	svcls	0x00300002
    88a8:	08005cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, ip, lr}
    88ac:	08005ce2 	stmdaeq	r0, {r1, r5, r6, r7, sl, fp, ip, lr}
    88b0:	f6540001 			; <UNDEFINED> instruction: 0xf6540001
    88b4:	2008005c 	andcs	r0, r8, ip, asr r0
    88b8:	0208005d 	andeq	r0, r8, #93	; 0x5d
    88bc:	009f3000 	addseq	r3, pc, r0
    88c0:	00000000 	andeq	r0, r0, r0
    88c4:	12000000 	andne	r0, r0, #0
    88c8:	2608005c 			; <UNDEFINED> instruction: 0x2608005c
    88cc:	0308005c 	movweq	r0, #32860	; 0x805c
    88d0:	9f840800 	svcls	0x00840800
    88d4:	08005c26 	stmdaeq	r0, {r1, r2, r5, sl, fp, ip, lr}
    88d8:	08005c2a 	stmdaeq	r0, {r1, r3, r5, sl, fp, ip, lr}
    88dc:	00740006 	rsbseq	r0, r4, r6
    88e0:	9f1c0076 	svcls	0x001c0076
    88e4:	08005c2a 	stmdaeq	r0, {r1, r3, r5, sl, fp, ip, lr}
    88e8:	08005c36 	stmdaeq	r0, {r1, r2, r4, r5, sl, fp, ip, lr}
    88ec:	00740008 	rsbseq	r0, r4, r8
    88f0:	341c0076 	ldrcc	r0, [ip], #-118	; 0x76
    88f4:	5c369f1c 	ldcpl	15, cr9, [r6], #-112	; 0xffffff90
    88f8:	5c400800 	mcrrpl	8, 0, r0, r0, cr0
    88fc:	00060800 	andeq	r0, r6, r0, lsl #16
    8900:	00760074 	rsbseq	r0, r6, r4, ror r0
    8904:	00009f1c 	andeq	r9, r0, ip, lsl pc
	...
    8914:	00010000 	andeq	r0, r1, r0
    8918:	00000050 	andeq	r0, r0, r0, asr r0
    891c:	00000000 	andeq	r0, r0, r0
    8920:	f3000400 	vshl.u8	d0, d0, d0
    8924:	009f5001 	addseq	r5, pc, r1
	...
    8934:	01000000 	mrseq	r0, (UNDEF: 0)
    8938:	00005000 	andeq	r5, r0, r0
    893c:	00000000 	andeq	r0, r0, r0
    8940:	00040000 	andeq	r0, r4, r0
    8944:	9f5001f3 	svcls	0x005001f3
	...
    8958:	00500001 	subseq	r0, r0, r1
    895c:	00000000 	andeq	r0, r0, r0
    8960:	04000000 	streq	r0, [r0], #-0
    8964:	5001f300 	andpl	pc, r1, r0, lsl #6
    8968:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8978:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    8984:	01f30004 	mvnseq	r0, r4
    8988:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    8998:	00010000 	andeq	r0, r1, r0
    899c:	00000050 	andeq	r0, r0, r0, asr r0
    89a0:	00000000 	andeq	r0, r0, r0
    89a4:	f3000400 	vshl.u8	d0, d0, d0
    89a8:	009f5001 	addseq	r5, pc, r1
    89ac:	00000000 	andeq	r0, r0, r0
    89b0:	20000000 	andcs	r0, r0, r0
    89b4:	2208005d 	andcs	r0, r8, #93	; 0x5d
    89b8:	0108005d 	qaddeq	r0, sp, r8
    89bc:	5d225000 	stcpl	0, cr5, [r2, #-0]
    89c0:	5d4a0800 	stclpl	8, cr0, [sl, #-0]
    89c4:	00040800 	andeq	r0, r4, r0, lsl #16
    89c8:	9f5001f3 	svcls	0x005001f3
	...
    89dc:	00500001 	subseq	r0, r0, r1
    89e0:	00000000 	andeq	r0, r0, r0
    89e4:	04000000 	streq	r0, [r0], #-0
    89e8:	5001f300 	andpl	pc, r1, r0, lsl #6
    89ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    89fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8a08:	01f30004 	mvnseq	r0, r4
    8a0c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8a1c:	00010000 	andeq	r0, r1, r0
    8a20:	00000050 	andeq	r0, r0, r0, asr r0
    8a24:	00000000 	andeq	r0, r0, r0
    8a28:	f3000400 	vshl.u8	d0, d0, d0
    8a2c:	009f5001 	addseq	r5, pc, r1
	...
    8a3c:	01000000 	mrseq	r0, (UNDEF: 0)
    8a40:	00005000 	andeq	r5, r0, r0
    8a44:	00000000 	andeq	r0, r0, r0
    8a48:	00040000 	andeq	r0, r4, r0
    8a4c:	9f5001f3 	svcls	0x005001f3
	...
    8a60:	00500001 	subseq	r0, r0, r1
    8a64:	00000000 	andeq	r0, r0, r0
    8a68:	04000000 	streq	r0, [r0], #-0
    8a6c:	5001f300 	andpl	pc, r1, r0, lsl #6
    8a70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8a80:	73000600 	movwvc	r0, #1536	; 0x600
    8a84:	27300800 	ldrcs	r0, [r0, -r0, lsl #16]!
    8a88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8a8c:	00000000 	andeq	r0, r0, r0
    8a90:	73000900 	movwvc	r0, #2304	; 0x900
    8a94:	27300800 	ldrcs	r0, [r0, -r0, lsl #16]!
    8a98:	9f273008 	svcls	0x00273008
	...
    8aa4:	08005d4a 	stmdaeq	r0, {r1, r3, r6, r8, sl, fp, ip, lr}
    8aa8:	08005d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, ip, lr}
    8aac:	4c500001 	mrrcmi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    8ab0:	6808005d 	stmdavs	r8, {r0, r2, r3, r4, r6}
    8ab4:	0408005d 	streq	r0, [r8], #-93	; 0x5d
    8ab8:	5001f300 	andpl	pc, r1, r0, lsl #6
    8abc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8ac0:	00000000 	andeq	r0, r0, r0
    8ac4:	005d6000 	subseq	r6, sp, r0
    8ac8:	005d6408 	subseq	r6, sp, r8, lsl #8
    8acc:	73000708 	movwvc	r0, #1800	; 0x708
    8ad0:	30000a00 	andcc	r0, r0, r0, lsl #20
    8ad4:	5d649f27 	stclpl	15, cr9, [r4, #-156]!	; 0xffffff64
    8ad8:	5d680800 	stclpl	8, cr0, [r8, #-0]
    8adc:	000b0800 	andeq	r0, fp, r0, lsl #16
    8ae0:	000a0073 	andeq	r0, sl, r3, ror r0
    8ae4:	000a2730 	andeq	r2, sl, r0, lsr r7
    8ae8:	009f2730 	addseq	r2, pc, r0, lsr r7	; <UNPREDICTABLE>
	...
    8af8:	01000000 	mrseq	r0, (UNDEF: 0)
    8afc:	00005000 	andeq	r5, r0, r0
    8b00:	00000000 	andeq	r0, r0, r0
    8b04:	00040000 	andeq	r0, r4, r0
    8b08:	9f5001f3 	svcls	0x005001f3
	...
    8b1c:	00500001 	subseq	r0, r0, r1
    8b20:	00000000 	andeq	r0, r0, r0
    8b24:	04000000 	streq	r0, [r0], #-0
    8b28:	5001f300 	andpl	pc, r1, r0, lsl #6
    8b2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8b30:	00000000 	andeq	r0, r0, r0
    8b34:	005d6800 	subseq	r6, sp, r0, lsl #16
    8b38:	005d6a08 	subseq	r6, sp, r8, lsl #20
    8b3c:	50000108 	andpl	r0, r0, r8, lsl #2
    8b40:	08005d6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, sl, fp, ip, lr}
    8b44:	08005d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, ip, lr}
    8b48:	01f30004 	mvnseq	r0, r4
    8b4c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8b5c:	00010000 	andeq	r0, r1, r0
    8b60:	00000050 	andeq	r0, r0, r0, asr r0
    8b64:	00000000 	andeq	r0, r0, r0
    8b68:	f3000400 	vshl.u8	d0, d0, d0
    8b6c:	009f5001 	addseq	r5, pc, r1
	...
    8b7c:	01000000 	mrseq	r0, (UNDEF: 0)
    8b80:	00005000 	andeq	r5, r0, r0
    8b84:	00000000 	andeq	r0, r0, r0
    8b88:	00040000 	andeq	r0, r4, r0
    8b8c:	9f5001f3 	svcls	0x005001f3
	...
    8ba0:	00500001 	subseq	r0, r0, r1
    8ba4:	00000000 	andeq	r0, r0, r0
    8ba8:	04000000 	streq	r0, [r0], #-0
    8bac:	5001f300 	andpl	pc, r1, r0, lsl #6
    8bb0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8bc0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8bcc:	01f30004 	mvnseq	r0, r4
    8bd0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8be0:	00010000 	andeq	r0, r1, r0
    8be4:	00000050 	andeq	r0, r0, r0, asr r0
    8be8:	00000000 	andeq	r0, r0, r0
    8bec:	f3000400 	vshl.u8	d0, d0, d0
    8bf0:	009f5001 	addseq	r5, pc, r1
	...
    8c00:	01000000 	mrseq	r0, (UNDEF: 0)
    8c04:	00005000 	andeq	r5, r0, r0
    8c08:	00000000 	andeq	r0, r0, r0
    8c0c:	00040000 	andeq	r0, r4, r0
    8c10:	9f5001f3 	svcls	0x005001f3
	...
    8c24:	00500001 	subseq	r0, r0, r1
    8c28:	00000000 	andeq	r0, r0, r0
    8c2c:	04000000 	streq	r0, [r0], #-0
    8c30:	5001f300 	andpl	pc, r1, r0, lsl #6
    8c34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8c44:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8c50:	01f30004 	mvnseq	r0, r4
    8c54:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8c64:	00010000 	andeq	r0, r1, r0
    8c68:	00000050 	andeq	r0, r0, r0, asr r0
    8c6c:	00000000 	andeq	r0, r0, r0
    8c70:	f3000400 	vshl.u8	d0, d0, d0
    8c74:	009f5001 	addseq	r5, pc, r1
    8c78:	00000000 	andeq	r0, r0, r0
    8c7c:	84000000 	strhi	r0, [r0], #-0
    8c80:	8608005d 			; <UNDEFINED> instruction: 0x8608005d
    8c84:	0108005d 	qaddeq	r0, sp, r8
    8c88:	5d865000 	stcpl	0, cr5, [r6]
    8c8c:	5da40800 	stcpl	8, cr0, [r4]
    8c90:	00040800 	andeq	r0, r4, r0, lsl #16
    8c94:	9f5001f3 	svcls	0x005001f3
	...
    8ca0:	08005da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp, ip, lr}
    8ca4:	08005da6 	stmdaeq	r0, {r1, r2, r5, r7, r8, sl, fp, ip, lr}
    8ca8:	a6500001 	ldrbge	r0, [r0], -r1
    8cac:	c408005d 	strgt	r0, [r8], #-93	; 0x5d
    8cb0:	0408005d 	streq	r0, [r8], #-93	; 0x5d
    8cb4:	5001f300 	andpl	pc, r1, r0, lsl #6
    8cb8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8cc8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8cd4:	01f30004 	mvnseq	r0, r4
    8cd8:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8ce8:	00010000 	andeq	r0, r1, r0
    8cec:	00000051 	andeq	r0, r0, r1, asr r0
    8cf0:	00000000 	andeq	r0, r0, r0
    8cf4:	f3000400 	vshl.u8	d0, d0, d0
    8cf8:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    8d08:	01000000 	mrseq	r0, (UNDEF: 0)
    8d0c:	00005000 	andeq	r5, r0, r0
    8d10:	00000000 	andeq	r0, r0, r0
    8d14:	00040000 	andeq	r0, r4, r0
    8d18:	9f5001f3 	svcls	0x005001f3
	...
    8d2c:	00500001 	subseq	r0, r0, r1
    8d30:	00000000 	andeq	r0, r0, r0
    8d34:	04000000 	streq	r0, [r0], #-0
    8d38:	5001f300 	andpl	pc, r1, r0, lsl #6
    8d3c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8d4c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    8d58:	01f30004 	mvnseq	r0, r4
    8d5c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    8d6c:	00010000 	andeq	r0, r1, r0
    8d70:	00000050 	andeq	r0, r0, r0, asr r0
    8d74:	00000000 	andeq	r0, r0, r0
    8d78:	f3000400 	vshl.u8	d0, d0, d0
    8d7c:	009f5001 	addseq	r5, pc, r1
	...
    8d8c:	01000000 	mrseq	r0, (UNDEF: 0)
    8d90:	00005100 	andeq	r5, r0, r0, lsl #2
    8d94:	00000000 	andeq	r0, r0, r0
    8d98:	00040000 	andeq	r0, r4, r0
    8d9c:	9f5101f3 	svcls	0x005101f3
	...
    8da8:	08005dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp, ip, lr}
    8dac:	08005dce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, fp, ip, lr}
    8db0:	ce500001 	cdpgt	0, 5, cr0, cr0, cr1, {0}
    8db4:	e008005d 	and	r0, r8, sp, asr r0
    8db8:	0408005d 	streq	r0, [r8], #-93	; 0x5d
    8dbc:	5001f300 	andpl	pc, r1, r0, lsl #6
    8dc0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8dc4:	00000000 	andeq	r0, r0, r0
    8dc8:	005de000 	subseq	lr, sp, r0
    8dcc:	005dea08 	subseq	lr, sp, r8, lsl #20
    8dd0:	50000108 	andpl	r0, r0, r8, lsl #2
    8dd4:	08005dea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, sl, fp, ip, lr}
    8dd8:	08005dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr}
    8ddc:	01f30004 	mvnseq	r0, r4
    8de0:	00009f50 	andeq	r9, r0, r0, asr pc
    8de4:	00000000 	andeq	r0, r0, r0
    8de8:	5dfc0000 	ldclpl	0, cr0, [ip]
    8dec:	5e060800 	cdppl	8, 0, cr0, cr6, cr0, {0}
    8df0:	00010800 	andeq	r0, r1, r0, lsl #16
    8df4:	005e0650 	subseq	r0, lr, r0, asr r6
    8df8:	005e1808 	subseq	r1, lr, r8, lsl #16
    8dfc:	f3000408 	vshl.u8	d0, d8, d0
    8e00:	009f5001 	addseq	r5, pc, r1
	...
    8e10:	01000000 	mrseq	r0, (UNDEF: 0)
    8e14:	00005100 	andeq	r5, r0, r0, lsl #2
    8e18:	00000000 	andeq	r0, r0, r0
    8e1c:	00040000 	andeq	r0, r4, r0
    8e20:	9f5101f3 	svcls	0x005101f3
	...
    8e2c:	00510001 	subseq	r0, r1, r1
    8e30:	00000000 	andeq	r0, r0, r0
    8e34:	04000000 	streq	r0, [r0], #-0
    8e38:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    8e3c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8e4c:	53000100 	movwpl	r0, #256	; 0x100
	...
    8e58:	00530001 	subseq	r0, r3, r1
    8e5c:	00000000 	andeq	r0, r0, r0
    8e60:	01000000 	mrseq	r0, (UNDEF: 0)
    8e64:	00005300 	andeq	r5, r0, r0, lsl #6
    8e68:	00000000 	andeq	r0, r0, r0
    8e6c:	5e180000 	cdppl	0, 1, cr0, cr8, cr0, {0}
    8e70:	5e240800 	cdppl	8, 2, cr0, cr4, cr0, {0}
    8e74:	00010800 	andeq	r0, r1, r0, lsl #16
    8e78:	005e2450 	subseq	r2, lr, r0, asr r4
    8e7c:	005e5808 	subseq	r5, lr, r8, lsl #16
    8e80:	f3000408 	vshl.u8	d0, d8, d0
    8e84:	009f5001 	addseq	r5, pc, r1
    8e88:	00000000 	andeq	r0, r0, r0
    8e8c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8e90:	4608005e 			; <UNDEFINED> instruction: 0x4608005e
    8e94:	0108005e 	qaddeq	r0, lr, r8
    8e98:	5e465100 	dvfpls	f5, f6, f0
    8e9c:	5e580800 	cdppl	8, 5, cr0, cr8, cr0, {0}
    8ea0:	00040800 	andeq	r0, r4, r0, lsl #16
    8ea4:	9f5101f3 	svcls	0x005101f3
	...
    8eb0:	08005e30 	stmdaeq	r0, {r4, r5, r9, sl, fp, ip, lr}
    8eb4:	08005e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, ip, lr}
    8eb8:	38530001 	ldmdacc	r3, {r0}^
    8ebc:	3a08005e 	bcc	20903c <__Stack_Size+0x20883c>
    8ec0:	0508005e 	streq	r0, [r8, #-94]	; 0x5e
    8ec4:	35007100 	strcc	r7, [r0, #-256]	; 0x100
    8ec8:	5e3a9f25 	cdppl	15, 3, cr9, cr10, cr5, {1}
    8ecc:	5e3c0800 	cdppl	8, 3, cr0, cr12, cr0, {0}
    8ed0:	00010800 	andeq	r0, r1, r0, lsl #16
    8ed4:	005e4453 	subseq	r4, lr, r3, asr r4
    8ed8:	005e4c08 	subseq	r4, lr, r8, lsl #24
    8edc:	53000108 	movwpl	r0, #264	; 0x108
	...
    8ef0:	00500001 	subseq	r0, r0, r1
    8ef4:	00000000 	andeq	r0, r0, r0
    8ef8:	04000000 	streq	r0, [r0], #-0
    8efc:	5001f300 	andpl	pc, r1, r0, lsl #6
    8f00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8f10:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8f1c:	01f30004 	mvnseq	r0, r4
    8f20:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8f30:	00010000 	andeq	r0, r1, r0
    8f34:	00000050 	andeq	r0, r0, r0, asr r0
    8f38:	00000000 	andeq	r0, r0, r0
    8f3c:	f3000400 	vshl.u8	d0, d0, d0
    8f40:	009f5001 	addseq	r5, pc, r1
	...
    8f50:	01000000 	mrseq	r0, (UNDEF: 0)
    8f54:	00005100 	andeq	r5, r0, r0, lsl #2
    8f58:	00000000 	andeq	r0, r0, r0
    8f5c:	00040000 	andeq	r0, r4, r0
    8f60:	9f5101f3 	svcls	0x005101f3
	...
    8f74:	00520001 	subseq	r0, r2, r1
    8f78:	00000000 	andeq	r0, r0, r0
    8f7c:	04000000 	streq	r0, [r0], #-0
    8f80:	5201f300 	andpl	pc, r1, #0, 6
    8f84:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8f94:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8fa0:	01f30004 	mvnseq	r0, r4
    8fa4:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8fb4:	00010000 	andeq	r0, r1, r0
    8fb8:	00000051 	andeq	r0, r0, r1, asr r0
    8fbc:	00000000 	andeq	r0, r0, r0
    8fc0:	f3000400 	vshl.u8	d0, d0, d0
    8fc4:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    8fd4:	01000000 	mrseq	r0, (UNDEF: 0)
    8fd8:	00005000 	andeq	r5, r0, r0
    8fdc:	00000000 	andeq	r0, r0, r0
    8fe0:	00040000 	andeq	r0, r4, r0
    8fe4:	9f5001f3 	svcls	0x005001f3
	...
    8ff8:	00510001 	subseq	r0, r1, r1
    8ffc:	00000000 	andeq	r0, r0, r0
    9000:	04000000 	streq	r0, [r0], #-0
    9004:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    9008:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    9018:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    9024:	01f30004 	mvnseq	r0, r4
    9028:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    9038:	00010000 	andeq	r0, r1, r0
    903c:	00000050 	andeq	r0, r0, r0, asr r0
    9040:	00000000 	andeq	r0, r0, r0
    9044:	f3000400 	vshl.u8	d0, d0, d0
    9048:	009f5001 	addseq	r5, pc, r1
	...
    9058:	01000000 	mrseq	r0, (UNDEF: 0)
    905c:	00005000 	andeq	r5, r0, r0
    9060:	00000000 	andeq	r0, r0, r0
    9064:	00040000 	andeq	r0, r4, r0
    9068:	9f5001f3 	svcls	0x005001f3
	...
    9074:	00500001 	subseq	r0, r0, r1
    9078:	00000000 	andeq	r0, r0, r0
    907c:	04000000 	streq	r0, [r0], #-0
    9080:	5001f300 	andpl	pc, r1, r0, lsl #6
    9084:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9088:	00000000 	andeq	r0, r0, r0
    908c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    90a0:	00510001 	subseq	r0, r1, r1
    90a4:	00000000 	andeq	r0, r0, r0
    90a8:	04000000 	streq	r0, [r0], #-0
    90ac:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    90b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    90b4:	00000000 	andeq	r0, r0, r0
    90b8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    90c4:	01f30004 	mvnseq	r0, r4
    90c8:	00009f51 	andeq	r9, r0, r1, asr pc
    90cc:	00000000 	andeq	r0, r0, r0
    90d0:	00010000 	andeq	r0, r1, r0
    90d4:	00000051 	andeq	r0, r0, r1, asr r0
	...
    90e4:	52000100 	andpl	r0, r0, #0, 2
	...
    90f0:	01f30004 	mvnseq	r0, r4
    90f4:	00009f52 	andeq	r9, r0, r2, asr pc
    90f8:	00000000 	andeq	r0, r0, r0
    90fc:	00010000 	andeq	r0, r1, r0
    9100:	00000052 	andeq	r0, r0, r2, asr r0
	...
    9110:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    911c:	00510001 	subseq	r0, r1, r1
	...
    912c:	01000000 	mrseq	r0, (UNDEF: 0)
    9130:	00005300 	andeq	r5, r0, r0, lsl #6
    9134:	00000000 	andeq	r0, r0, r0
    9138:	00050000 	andeq	r0, r5, r0
    913c:	25350072 	ldrcs	r0, [r5, #-114]!	; 0x72
    9140:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9144:	00000000 	andeq	r0, r0, r0
    9148:	53000100 	movwpl	r0, #256	; 0x100
	...
    9154:	00530001 	subseq	r0, r3, r1
	...
    9164:	01000000 	mrseq	r0, (UNDEF: 0)
    9168:	00005300 	andeq	r5, r0, r0, lsl #6
    916c:	00000000 	andeq	r0, r0, r0
    9170:	00010000 	andeq	r0, r1, r0
    9174:	00000053 	andeq	r0, r0, r3, asr r0
	...
    9184:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    9190:	00720005 	rsbseq	r0, r2, r5
    9194:	009f2535 	addseq	r2, pc, r5, lsr r5	; <UNPREDICTABLE>
    9198:	00000000 	andeq	r0, r0, r0
    919c:	01000000 	mrseq	r0, (UNDEF: 0)
    91a0:	00005100 	andeq	r5, r0, r0, lsl #2
    91a4:	00000000 	andeq	r0, r0, r0
    91a8:	00010000 	andeq	r0, r1, r0
    91ac:	00000051 	andeq	r0, r0, r1, asr r0
	...
    91bc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    91c8:	01f30004 	mvnseq	r0, r4
    91cc:	00009f50 	andeq	r9, r0, r0, asr pc
    91d0:	00000000 	andeq	r0, r0, r0
    91d4:	00010000 	andeq	r0, r1, r0
    91d8:	00000050 	andeq	r0, r0, r0, asr r0
    91dc:	00000000 	andeq	r0, r0, r0
    91e0:	f3000400 	vshl.u8	d0, d0, d0
    91e4:	009f5001 	addseq	r5, pc, r1
	...
    91f4:	01000000 	mrseq	r0, (UNDEF: 0)
    91f8:	00005100 	andeq	r5, r0, r0, lsl #2
    91fc:	00000000 	andeq	r0, r0, r0
    9200:	00040000 	andeq	r0, r4, r0
    9204:	9f5101f3 	svcls	0x005101f3
	...
    9210:	00510001 	subseq	r0, r1, r1
	...
    9220:	01000000 	mrseq	r0, (UNDEF: 0)
    9224:	00005200 	andeq	r5, r0, r0, lsl #4
    9228:	00000000 	andeq	r0, r0, r0
    922c:	00040000 	andeq	r0, r4, r0
    9230:	9f5201f3 	svcls	0x005201f3
	...
    923c:	00520001 	subseq	r0, r2, r1
	...
    924c:	01000000 	mrseq	r0, (UNDEF: 0)
    9250:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    9260:	00010000 	andeq	r0, r1, r0
    9264:	00000053 	andeq	r0, r0, r3, asr r0
    9268:	00000000 	andeq	r0, r0, r0
    926c:	72000500 	andvc	r0, r0, #0, 10
    9270:	9f253500 	svcls	0x00253500
	...
    927c:	00530001 	subseq	r0, r3, r1
    9280:	00000000 	andeq	r0, r0, r0
    9284:	01000000 	mrseq	r0, (UNDEF: 0)
    9288:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    9298:	00010000 	andeq	r0, r1, r0
    929c:	00000050 	andeq	r0, r0, r0, asr r0
    92a0:	00000000 	andeq	r0, r0, r0
    92a4:	f3000400 	vshl.u8	d0, d0, d0
    92a8:	009f5001 	addseq	r5, pc, r1
    92ac:	00000000 	andeq	r0, r0, r0
    92b0:	01000000 	mrseq	r0, (UNDEF: 0)
    92b4:	00005000 	andeq	r5, r0, r0
    92b8:	00000000 	andeq	r0, r0, r0
    92bc:	00040000 	andeq	r0, r4, r0
    92c0:	9f5001f3 	svcls	0x005001f3
	...
    92d4:	00510001 	subseq	r0, r1, r1
    92d8:	00000000 	andeq	r0, r0, r0
    92dc:	04000000 	streq	r0, [r0], #-0
    92e0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    92e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    92e8:	00000000 	andeq	r0, r0, r0
    92ec:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    9300:	00520001 	subseq	r0, r2, r1
    9304:	00000000 	andeq	r0, r0, r0
    9308:	04000000 	streq	r0, [r0], #-0
    930c:	5201f300 	andpl	pc, r1, #0, 6
    9310:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9314:	00000000 	andeq	r0, r0, r0
    9318:	52000100 	andpl	r0, r0, #0, 2
	...
    932c:	00510001 	subseq	r0, r1, r1
	...
    933c:	01000000 	mrseq	r0, (UNDEF: 0)
    9340:	00005300 	andeq	r5, r0, r0, lsl #6
    9344:	00000000 	andeq	r0, r0, r0
    9348:	00050000 	andeq	r0, r5, r0
    934c:	25350072 	ldrcs	r0, [r5, #-114]!	; 0x72
    9350:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9354:	00000000 	andeq	r0, r0, r0
    9358:	53000100 	movwpl	r0, #256	; 0x100
	...
    9364:	00530001 	subseq	r0, r3, r1
	...
    9374:	01000000 	mrseq	r0, (UNDEF: 0)
    9378:	00005000 	andeq	r5, r0, r0
    937c:	00000000 	andeq	r0, r0, r0
    9380:	00040000 	andeq	r0, r4, r0
    9384:	9f5001f3 	svcls	0x005001f3
	...
    9398:	00500001 	subseq	r0, r0, r1
    939c:	00000000 	andeq	r0, r0, r0
    93a0:	04000000 	streq	r0, [r0], #-0
    93a4:	5001f300 	andpl	pc, r1, r0, lsl #6
    93a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    93b8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    93c4:	01f30004 	mvnseq	r0, r4
    93c8:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    93d8:	00010000 	andeq	r0, r1, r0
    93dc:	00000050 	andeq	r0, r0, r0, asr r0
    93e0:	00000000 	andeq	r0, r0, r0
    93e4:	f3000400 	vshl.u8	d0, d0, d0
    93e8:	009f5001 	addseq	r5, pc, r1
    93ec:	00000000 	andeq	r0, r0, r0
    93f0:	01000000 	mrseq	r0, (UNDEF: 0)
    93f4:	00005000 	andeq	r5, r0, r0
    93f8:	00000000 	andeq	r0, r0, r0
    93fc:	00040000 	andeq	r0, r4, r0
    9400:	9f5001f3 	svcls	0x005001f3
	...
    9414:	00500001 	subseq	r0, r0, r1
    9418:	00000000 	andeq	r0, r0, r0
    941c:	04000000 	streq	r0, [r0], #-0
    9420:	5001f300 	andpl	pc, r1, r0, lsl #6
    9424:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    9434:	70000e00 	andvc	r0, r0, r0, lsl #28
    9438:	1aff0800 	bne	fffcb440 <BootRAM+0xef3bbe1>
    943c:	00712438 	rsbseq	r2, r1, r8, lsr r4
    9440:	211aff08 	tstcs	sl, r8, lsl #30
    9444:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9448:	00000000 	andeq	r0, r0, r0
    944c:	f3000f00 	vpmax.f32	d0, d0, d0
    9450:	ff085001 			; <UNDEFINED> instruction: 0xff085001
    9454:	7124381a 	teqvc	r4, sl, lsl r8
    9458:	1aff0800 	bne	fffcb460 <BootRAM+0xef3bc01>
    945c:	00009f21 	andeq	r9, r0, r1, lsr #30
	...
    946c:	00010000 	andeq	r0, r1, r0
    9470:	00000050 	andeq	r0, r0, r0, asr r0
    9474:	00000000 	andeq	r0, r0, r0
    9478:	f3000400 	vshl.u8	d0, d0, d0
    947c:	009f5001 	addseq	r5, pc, r1
	...
    948c:	01000000 	mrseq	r0, (UNDEF: 0)
    9490:	00005000 	andeq	r5, r0, r0
	...
    94a0:	000d0000 	andeq	r0, sp, r0
    94a4:	25380070 	ldrcs	r0, [r8, #-112]!	; 0x70
    94a8:	ff080070 			; <UNDEFINED> instruction: 0xff080070
    94ac:	2124381a 	teqcs	r4, sl, lsl r8
    94b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    94b4:	00000000 	andeq	r0, r0, r0
    94b8:	005e5a00 	subseq	r5, lr, r0, lsl #20
    94bc:	005ec008 	subseq	ip, lr, r8
    94c0:	30000208 	andcc	r0, r0, r8, lsl #4
    94c4:	005ec09f 			; <UNDEFINED> instruction: 0x005ec09f
    94c8:	005ec408 	subseq	ip, lr, r8, lsl #8
    94cc:	73000708 	movwvc	r0, #1800	; 0x708
    94d0:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    94d4:	5ed49f1a 	mrcpl	15, 6, r9, cr4, cr10, {0}
    94d8:	5ede0800 	cdppl	8, 13, cr0, cr14, cr0, {0}
    94dc:	00070800 	andeq	r0, r7, r0, lsl #16
    94e0:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    94e4:	e89f1aff 	ldm	pc, {r0, r1, r2, r3, r4, r5, r6, r7, r9, fp, ip}	; <UNPREDICTABLE>
    94e8:	f208005e 	vqadd.s8	q0, q4, q7
    94ec:	0708005e 	smlsdeq	r8, lr, r0, r0
    94f0:	0a007300 	beq	260f8 <__Stack_Size+0x258f8>
    94f4:	9f1affff 	svcls	0x001affff
    94f8:	08005f3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sl, fp, ip, lr}
    94fc:	08005f4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, fp, ip, lr}
    9500:	9f300002 	svcls	0x00300002
    9504:	08005f4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, fp, ip, lr}
    9508:	08005f8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, fp, ip, lr}
    950c:	00750007 	rsbseq	r0, r5, r7
    9510:	1affff0a 	bne	9140 <__Stack_Size+0x8940>
    9514:	005f8a9f 			; <UNDEFINED> instruction: 0x005f8a9f
    9518:	005fac08 	subseq	sl, pc, r8, lsl #24
    951c:	30000208 	andcc	r0, r0, r8, lsl #4
    9520:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9524:	00000000 	andeq	r0, r0, r0
    9528:	005ea000 	subseq	sl, lr, r0
    952c:	005ea408 	subseq	sl, lr, r8, lsl #8
    9530:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
    9534:	20000a00 	andcs	r0, r0, r0, lsl #20
    9538:	5ea49f27 	cdppl	15, 10, cr9, cr4, cr7, {1}
    953c:	5ea80800 	cdppl	8, 10, cr0, cr8, cr0, {0}
    9540:	000b0800 	andeq	r0, fp, r0, lsl #16
    9544:	000a0072 	andeq	r0, sl, r2, ror r0
    9548:	000a2720 	andeq	r2, sl, r0, lsr #14
    954c:	a89f2720 	ldmge	pc, {r5, r8, r9, sl, sp}	; <UNPREDICTABLE>
    9550:	b808005e 	stmdalt	r8, {r1, r2, r3, r4, r6}
    9554:	0c08005e 	stceq	0, cr0, [r8], {94}	; 0x5e
    9558:	06007400 	streq	r7, [r0], -r0, lsl #8
    955c:	2720000a 	strcs	r0, [r0, -sl]!
    9560:	2720000a 	strcs	r0, [r0, -sl]!
    9564:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9568:	00000000 	andeq	r0, r0, r0
    956c:	005eb200 	subseq	fp, lr, r0, lsl #4
    9570:	005eb608 	subseq	fp, lr, r8, lsl #12
    9574:	72000608 	andvc	r0, r0, #8, 12	; 0x800000
    9578:	27200800 	strcs	r0, [r0, -r0, lsl #16]!
    957c:	005eb69f 			; <UNDEFINED> instruction: 0x005eb69f
    9580:	005ec608 	subseq	ip, lr, r8, lsl #12
    9584:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    9588:	27200800 	strcs	r0, [r0, -r0, lsl #16]!
    958c:	9f272008 	svcls	0x00272008
    9590:	08005ec6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, fp, ip, lr}
    9594:	08005ece 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, fp, ip, lr}
    9598:	0074000a 	rsbseq	r0, r4, sl
    959c:	27200806 	strcs	r0, [r0, -r6, lsl #16]!
    95a0:	9f272008 	svcls	0x00272008
    95a4:	08005ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, ip, lr}
    95a8:	08005ed6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, fp, ip, lr}
    95ac:	00720009 	rsbseq	r0, r2, r9
    95b0:	08272008 	stmdaeq	r7!, {r3, sp}
    95b4:	d69f2720 	ldrle	r2, [pc], r0, lsr #14
    95b8:	e208005e 	and	r0, r8, #94	; 0x5e
    95bc:	0a08005e 	beq	20973c <__Stack_Size+0x208f3c>
    95c0:	06007400 	streq	r7, [r0], -r0, lsl #8
    95c4:	08272008 	stmdaeq	r7!, {r3, sp}
    95c8:	e89f2720 	ldm	pc, {r5, r8, r9, sl, sp}	; <UNPREDICTABLE>
    95cc:	f608005e 			; <UNDEFINED> instruction: 0xf608005e
    95d0:	0a08005e 	beq	209750 <__Stack_Size+0x208f50>
    95d4:	06007400 	streq	r7, [r0], -r0, lsl #8
    95d8:	08272008 	stmdaeq	r7!, {r3, sp}
    95dc:	009f2720 	addseq	r2, pc, r0, lsr #14
    95e0:	00000000 	andeq	r0, r0, r0
    95e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    95e8:	1e08005f 	mcrne	0, 0, r0, cr8, cr15, {2}
    95ec:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    95f0:	5f1e5300 	svcpl	0x001e5300
    95f4:	5f3c0800 	svcpl	0x003c0800
    95f8:	00040800 	andeq	r0, r4, r0, lsl #16
    95fc:	9f060072 	svcls	0x00060072
	...
    9608:	08005f2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, sl, fp, ip, lr}
    960c:	08005f3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sl, fp, ip, lr}
    9610:	00530001 	subseq	r0, r3, r1
	...
    9620:	02000000 	andeq	r0, r0, #0
    9624:	009f3000 	addseq	r3, pc, r0
    9628:	00000000 	andeq	r0, r0, r0
    962c:	07000000 	streq	r0, [r0, -r0]
    9630:	0a007100 	beq	25a38 <__Stack_Size+0x25238>
    9634:	9f1affff 	svcls	0x001affff
	...
    9640:	00710007 	rsbseq	r0, r1, r7
    9644:	1affff0a 	bne	9274 <__Stack_Size+0x8a74>
    9648:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    964c:	00000000 	andeq	r0, r0, r0
    9650:	30000200 	andcc	r0, r0, r0, lsl #4
    9654:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9658:	00000000 	andeq	r0, r0, r0
    965c:	005fe400 	subseq	lr, pc, r0, lsl #8
    9660:	005ff908 	subseq	pc, pc, r8, lsl #18
    9664:	50000108 	andpl	r0, r0, r8, lsl #2
    9668:	08005ff9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    966c:	08006008 	stmdaeq	r0, {r3, sp, lr}
    9670:	01f30004 	mvnseq	r0, r4
    9674:	00009f50 	andeq	r9, r0, r0, asr pc
    9678:	00000000 	andeq	r0, r0, r0
    967c:	60080000 	andvs	r0, r8, r0
    9680:	601d0800 	andsvs	r0, sp, r0, lsl #16
    9684:	00010800 	andeq	r0, r1, r0, lsl #16
    9688:	00601d50 	rsbeq	r1, r0, r0, asr sp
    968c:	00602c08 	rsbeq	r2, r0, r8, lsl #24
    9690:	f3000408 	vshl.u8	d0, d8, d0
    9694:	009f5001 	addseq	r5, pc, r1
    9698:	00000000 	andeq	r0, r0, r0
    969c:	2c000000 	stccs	0, cr0, [r0], {-0}
    96a0:	40080060 	andmi	r0, r8, r0, rrx
    96a4:	01080060 	tsteq	r8, r0, rrx
    96a8:	60405000 	subvs	r5, r0, r0
    96ac:	60bc0800 	adcsvs	r0, ip, r0, lsl #16
    96b0:	00040800 	andeq	r0, r4, r0, lsl #16
    96b4:	9f5001f3 	svcls	0x005001f3
	...
    96c0:	0800604e 	stmdaeq	r0, {r1, r2, r3, r6, sp, lr}
    96c4:	08006050 	stmdaeq	r0, {r4, r6, sp, lr}
    96c8:	09710002 	ldmdbeq	r1!, {r1}^
	...
    96d4:	08006076 	stmdaeq	r0, {r1, r2, r4, r5, r6, sp, lr}
    96d8:	08006078 	stmdaeq	r0, {r3, r4, r5, r6, sp, lr}
    96dc:	78520001 	ldmdavc	r2, {r0}^
    96e0:	92080060 	andls	r0, r8, #96	; 0x60
    96e4:	05080060 	streq	r0, [r8, #-96]	; 0x60
    96e8:	3f007100 	svccc	0x00007100
    96ec:	60969f1a 	addsvs	r9, r6, sl, lsl pc
    96f0:	60a00800 	adcvs	r0, r0, r0, lsl #16
    96f4:	00050800 	andeq	r0, r5, r0, lsl #16
    96f8:	1a3f0071 	bne	fc98c4 <__Stack_Size+0xfc90c4>
    96fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9700:	00000000 	andeq	r0, r0, r0
    9704:	0060c400 	rsbeq	ip, r0, r0, lsl #8
    9708:	00614a08 	rsbeq	r4, r1, r8, lsl #20
    970c:	74000308 	strvc	r0, [r0], #-776	; 0x308
    9710:	00009f10 	andeq	r9, r0, r0, lsl pc
    9714:	00000000 	andeq	r0, r0, r0
    9718:	60c80000 	sbcvs	r0, r8, r0
    971c:	60f20800 	rscsvs	r0, r2, r0, lsl #16
    9720:	00010800 	andeq	r0, r1, r0, lsl #16
    9724:	0060f253 	rsbeq	pc, r0, r3, asr r2	; <UNPREDICTABLE>
    9728:	0060f808 	rsbeq	pc, r0, r8, lsl #16
    972c:	74000908 	strvc	r0, [r0], #-2312	; 0x908
    9730:	0a029410 	beq	ae778 <__Stack_Size+0xadf78>
    9734:	9f1affff 	svcls	0x001affff
    9738:	080060f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sp, lr}
    973c:	0800610c 	stmdaeq	r0, {r2, r3, r8, sp, lr}
    9740:	0c530001 	mrrceq	0, 0, r0, r3, cr1
    9744:	0d080061 	stceq	0, cr0, [r8, #-388]	; 0xfffffe7c
    9748:	09080061 	stmdbeq	r8, {r0, r5, r6}
    974c:	94107400 	ldrls	r7, [r0], #-1024	; 0x400
    9750:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    9754:	00009f1a 	andeq	r9, r0, sl, lsl pc
    9758:	00000000 	andeq	r0, r0, r0
    975c:	60ca0000 	sbcvs	r0, sl, r0
    9760:	60ec0800 	rscvs	r0, ip, r0, lsl #16
    9764:	00060800 	andeq	r0, r6, r0, lsl #16
    9768:	ff080076 			; <UNDEFINED> instruction: 0xff080076
    976c:	60ec9f1a 	rscvs	r9, ip, sl, lsl pc
    9770:	60f00800 	rscsvs	r0, r0, r0, lsl #16
    9774:	00020800 	andeq	r0, r2, r0, lsl #16
    9778:	60f09f34 	rscsvs	r9, r0, r4, lsr pc
    977c:	60f80800 	rscsvs	r0, r8, r0, lsl #16
    9780:	00020800 	andeq	r0, r2, r0, lsl #16
    9784:	60f89f37 	rscsvs	r9, r8, r7, lsr pc
    9788:	61020800 	tstvs	r2, r0, lsl #16
    978c:	00060800 	andeq	r0, r6, r0, lsl #16
    9790:	ff080076 			; <UNDEFINED> instruction: 0xff080076
    9794:	61029f1a 	tstvs	r2, sl, lsl pc
    9798:	614a0800 	cmpvs	sl, r0, lsl #16
    979c:	00010800 	andeq	r0, r1, r0, lsl #16
    97a0:	00000056 	andeq	r0, r0, r6, asr r0
    97a4:	00000000 	andeq	r0, r0, r0
    97a8:	00611000 	rsbeq	r1, r1, r0
    97ac:	00611208 	rsbeq	r1, r1, r8, lsl #4
    97b0:	50000108 	andpl	r0, r0, r8, lsl #2
    97b4:	08006112 	stmdaeq	r0, {r1, r4, r8, sp, lr}
    97b8:	08006140 	stmdaeq	r0, {r6, r8, sp, lr}
    97bc:	00590001 	subseq	r0, r9, r1
    97c0:	00000000 	andeq	r0, r0, r0
    97c4:	fa000000 	blx	97cc <__Stack_Size+0x8fcc>
    97c8:	02080060 	andeq	r0, r8, #96	; 0x60
    97cc:	01080061 	tsteq	r8, r1, rrx
    97d0:	61025500 	tstvs	r2, r0, lsl #10
    97d4:	61080800 	tstvs	r8, r0, lsl #16
    97d8:	00160800 	andseq	r0, r6, r0, lsl #16
    97dc:	40120075 	andsmi	r0, r2, r5, ror r0
    97e0:	7322244b 	teqvc	r2, #1258291200	; 0x4b000000
    97e4:	40141600 	andsmi	r1, r4, r0, lsl #12
    97e8:	2d22244b 	cfstrscs	mvf2, [r2, #-300]!	; 0xfffffed4
    97ec:	16000128 	strne	r0, [r0], -r8, lsr #2
    97f0:	61089f13 	tstvs	r8, r3, lsl pc
    97f4:	61360800 	teqvs	r6, r0, lsl #16
    97f8:	00010800 	andeq	r0, r1, r0, lsl #16
    97fc:	00000055 	andeq	r0, r0, r5, asr r0
    9800:	00000000 	andeq	r0, r0, r0
    9804:	0061ae00 	rsbeq	sl, r1, r0, lsl #28
    9808:	0061c508 	rsbeq	ip, r1, r8, lsl #10
    980c:	50000108 	andpl	r0, r0, r8, lsl #2
    9810:	080061d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sp, lr}
    9814:	080061d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sp, lr}
    9818:	00500001 	subseq	r0, r0, r1
    981c:	00000000 	andeq	r0, r0, r0
    9820:	ec000000 	stc	0, cr0, [r0], {-0}
    9824:	f0080061 			; <UNDEFINED> instruction: 0xf0080061
    9828:	06080061 	streq	r0, [r8], -r1, rrx
    982c:	08007000 	stmdaeq	r0, {ip, sp, lr}
    9830:	f09f1a7f 			; <UNDEFINED> instruction: 0xf09f1a7f
    9834:	14080061 	strne	r0, [r8], #-97	; 0x61
    9838:	01080062 	tsteq	r8, r2, rrx
    983c:	62145000 	andsvs	r5, r4, #0
    9840:	623a0800 	eorsvs	r0, sl, #0, 16
    9844:	000b0800 	andeq	r0, fp, r0, lsl #16
    9848:	01940073 	orrseq	r0, r4, r3, ror r0
    984c:	081a7f08 	ldmdaeq	sl, {r3, r8, r9, sl, fp, ip, sp, lr}
    9850:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    9854:	00000000 	andeq	r0, r0, r0
    9858:	2c000000 	stccs	0, cr0, [r0], {-0}
    985c:	59080062 	stmdbpl	r8, {r1, r5, r6}
    9860:	01080062 	tsteq	r8, r2, rrx
    9864:	62645100 	rsbvs	r5, r4, #0, 2
    9868:	62760800 	rsbsvs	r0, r6, #0, 16
    986c:	00010800 	andeq	r0, r1, r0, lsl #16
    9870:	00627c51 	rsbeq	r7, r2, r1, asr ip
    9874:	00627f08 	rsbeq	r7, r2, r8, lsl #30
    9878:	51000108 	tstpl	r0, r8, lsl #2
	...
    9884:	08006214 	stmdaeq	r0, {r2, r4, r9, sp, lr}
    9888:	08006256 	stmdaeq	r0, {r1, r2, r4, r6, r9, sp, lr}
    988c:	64500001 	ldrbvs	r0, [r0], #-1
    9890:	79080062 	stmdbvc	r8, {r1, r5, r6}
    9894:	01080062 	tsteq	r8, r2, rrx
    9898:	627c5000 	rsbsvs	r5, ip, #0
    989c:	627f0800 	rsbsvs	r0, pc, #0, 16
    98a0:	00010800 	andeq	r0, r1, r0, lsl #16
    98a4:	00000050 	andeq	r0, r0, r0, asr r0
    98a8:	00000000 	andeq	r0, r0, r0
    98ac:	00620e00 	rsbeq	r0, r2, r0, lsl #28
    98b0:	00624608 	rsbeq	r4, r2, r8, lsl #12
    98b4:	72000608 	andvc	r0, r0, #8, 12	; 0x800000
    98b8:	1aff0800 	bne	fffcb8c0 <BootRAM+0xef3c061>
    98bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    98c0:	00000000 	andeq	r0, r0, r0
    98c4:	00628c00 	rsbeq	r8, r2, r0, lsl #24
    98c8:	00629008 	rsbeq	r9, r2, r8
    98cc:	73000708 	movwvc	r0, #1800	; 0x708
    98d0:	30000a00 	andcc	r0, r0, r0, lsl #20
    98d4:	62909f27 	addsvs	r9, r0, #39, 30	; 0x9c
    98d8:	62920800 	addsvs	r0, r2, #0, 16
    98dc:	000b0800 	andeq	r0, fp, r0, lsl #16
    98e0:	000a0073 	andeq	r0, sl, r3, ror r0
    98e4:	000a2730 	andeq	r2, sl, r0, lsr r7
    98e8:	009f2730 	addseq	r2, pc, r0, lsr r7	; <UNPREDICTABLE>
    98ec:	00000000 	andeq	r0, r0, r0
    98f0:	c0000000 	andgt	r0, r0, r0
    98f4:	fa080062 	blx	209a84 <__Stack_Size+0x209284>
    98f8:	06080062 	streq	r0, [r8], -r2, rrx
    98fc:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    9900:	289f1aff 	ldmcs	pc, {r0, r1, r2, r3, r4, r5, r6, r7, r9, fp, ip}	; <UNPREDICTABLE>
    9904:	38080063 	stmdacc	r8, {r0, r1, r5, r6}
    9908:	06080063 	streq	r0, [r8], -r3, rrx
    990c:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    9910:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    9914:	00000000 	andeq	r0, r0, r0
    9918:	c4000000 	strgt	r0, [r0], #-0
    991c:	e4080062 	str	r0, [r8], #-98	; 0x62
    9920:	01080062 	tsteq	r8, r2, rrx
    9924:	62e45400 	rscvs	r5, r4, #0, 8
    9928:	62fa0800 	rscsvs	r0, sl, #0, 16
    992c:	00070800 	andeq	r0, r7, r0, lsl #16
    9930:	7f0b0072 	svcvc	0x000b0072
    9934:	289f1aff 	ldmcs	pc, {r0, r1, r2, r3, r4, r5, r6, r7, r9, fp, ip}	; <UNPREDICTABLE>
    9938:	38080063 	stmdacc	r8, {r0, r1, r5, r6}
    993c:	07080063 	streq	r0, [r8, -r3, rrx]
    9940:	0b007200 	bleq	26148 <__Stack_Size+0x25948>
    9944:	9f1aff7f 	svcls	0x001aff7f
	...
    9950:	080062da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sp, lr}
    9954:	08006323 	stmdaeq	r0, {r0, r1, r5, r8, r9, sp, lr}
    9958:	28500001 	ldmdacs	r0, {r0}^
    995c:	2a080063 	bcs	209af0 <__Stack_Size+0x2092f0>
    9960:	01080063 	tsteq	r8, r3, rrx
    9964:	00005000 	andeq	r5, r0, r0
    9968:	00000000 	andeq	r0, r0, r0
    996c:	63060000 	movwvs	r0, #24576	; 0x6000
    9970:	630a0800 	movwvs	r0, #43008	; 0xa800
    9974:	00050800 	andeq	r0, r5, r0, lsl #16
    9978:	27400072 	smlsldxcs	r0, r0, r2, r0	; <UNPREDICTABLE>
    997c:	00630a9f 	mlseq	r3, pc, sl, r0	; <UNPREDICTABLE>
    9980:	00630c08 	rsbeq	r0, r3, r8, lsl #24
    9984:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
    9988:	40274000 	eormi	r4, r7, r0
    998c:	00009f27 	andeq	r9, r0, r7, lsr #30
    9990:	00000000 	andeq	r0, r0, r0
    9994:	63160000 	tstvs	r6, #0
    9998:	631a0800 	tstvs	sl, #0, 16
    999c:	00070800 	andeq	r0, r7, r0, lsl #16
    99a0:	000a0072 	andeq	r0, sl, r2, ror r0
    99a4:	009f2710 	addseq	r2, pc, r0, lsl r7	; <UNPREDICTABLE>
    99a8:	00000000 	andeq	r0, r0, r0
    99ac:	5c000000 	stcpl	0, cr0, [r0], {-0}
    99b0:	6e080063 	cdpvs	0, 0, cr0, cr8, cr3, {3}
    99b4:	01080063 	tsteq	r8, r3, rrx
    99b8:	636e5000 	cmnvs	lr, #0
    99bc:	63780800 	cmnvs	r8, #0, 16
    99c0:	00040800 	andeq	r0, r4, r0, lsl #16
    99c4:	9f5001f3 	svcls	0x005001f3
	...
    99d0:	0800635c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sp, lr}
    99d4:	08006366 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sp, lr}
    99d8:	66510001 	ldrbvs	r0, [r1], -r1
    99dc:	6c080063 	stcvs	0, cr0, [r8], {99}	; 0x63
    99e0:	04080063 	streq	r0, [r8], #-99	; 0x63
    99e4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    99e8:	00636c9f 	mlseq	r3, pc, ip, r6	; <UNPREDICTABLE>
    99ec:	00637808 	rsbeq	r7, r3, r8, lsl #16
    99f0:	51000108 	tstpl	r0, r8, lsl #2
	...
    99fc:	08006362 	stmdaeq	r0, {r1, r5, r6, r8, r9, sp, lr}
    9a00:	08006368 	stmdaeq	r0, {r3, r5, r6, r8, r9, sp, lr}
    9a04:	68530001 	ldmdavs	r3, {r0}^
    9a08:	6c080063 	stcvs	0, cr0, [r8], {99}	; 0x63
    9a0c:	09080063 	stmdbeq	r8, {r0, r1, r5, r6}
    9a10:	94127200 	ldrls	r7, [r2], #-512	; 0x200
    9a14:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    9a18:	636c9f1a 	cmnvs	ip, #26, 30	; 0x68
    9a1c:	63780800 	cmnvs	r8, #0, 16
    9a20:	00010800 	andeq	r0, r1, r0, lsl #16
    9a24:	00000053 	andeq	r0, r0, r3, asr r0
    9a28:	00000000 	andeq	r0, r0, r0
    9a2c:	0063ca00 	rsbeq	ip, r3, r0, lsl #20
    9a30:	0063d408 	rsbeq	sp, r3, r8, lsl #8
    9a34:	72001108 	andvc	r1, r0, #8, 2
    9a38:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    9a3c:	2324311a 	teqcs	r4, #-2147483642	; 0x80000006
    9a40:	8081c080 	addhi	ip, r1, r0, lsl #1
    9a44:	04939f04 	ldreq	r9, [r3], #3844	; 0xf04
	...
    9a50:	080063fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sp, lr}
    9a54:	0800640e 	stmdaeq	r0, {r1, r2, r3, sl, sp, lr}
    9a58:	9f320002 	svcls	0x00320002
    9a5c:	0800640e 	stmdaeq	r0, {r1, r2, r3, sl, sp, lr}
    9a60:	08006410 	stmdaeq	r0, {r4, sl, sp, lr}
    9a64:	10500001 	subsne	r0, r0, r1
    9a68:	1c080064 	stcne	0, cr0, [r8], {100}	; 0x64
    9a6c:	02080064 	andeq	r0, r8, #100	; 0x64
    9a70:	209f3200 	addscs	r3, pc, r0, lsl #4
    9a74:	3e080064 	cdpcc	0, 0, cr0, cr8, cr4, {3}
    9a78:	02080064 	andeq	r0, r8, #100	; 0x64
    9a7c:	489f3200 	ldmmi	pc, {r9, ip, sp}	; <UNPREDICTABLE>
    9a80:	4e080064 	cdpmi	0, 0, cr0, cr8, cr4, {3}
    9a84:	01080064 	tsteq	r8, r4, rrx
    9a88:	644e5000 	strbvs	r5, [lr], #-0
    9a8c:	645e0800 	ldrbvs	r0, [lr], #-2048	; 0x800
    9a90:	00020800 	andeq	r0, r2, r0, lsl #16
    9a94:	645e9f32 	ldrbvs	r9, [lr], #-3890	; 0xf32
    9a98:	64600800 	strbtvs	r0, [r0], #-2048	; 0x800
    9a9c:	00010800 	andeq	r0, r1, r0, lsl #16
    9aa0:	00646050 	rsbeq	r6, r4, r0, asr r0
    9aa4:	00647a08 	rsbeq	r7, r4, r8, lsl #20
    9aa8:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    9aac:	00647a9f 	mlseq	r4, pc, sl, r7	; <UNPREDICTABLE>
    9ab0:	00647c08 	rsbeq	r7, r4, r8, lsl #24
    9ab4:	50000108 	andpl	r0, r0, r8, lsl #2
    9ab8:	0800647c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, sp, lr}
    9abc:	08006488 	stmdaeq	r0, {r3, r7, sl, sp, lr}
    9ac0:	9f320002 	svcls	0x00320002
    9ac4:	08006488 	stmdaeq	r0, {r3, r7, sl, sp, lr}
    9ac8:	0800648a 	stmdaeq	r0, {r1, r3, r7, sl, sp, lr}
    9acc:	8a500001 	bhi	1409ad8 <__Stack_Size+0x14092d8>
    9ad0:	9a080064 	bls	209c68 <__Stack_Size+0x209468>
    9ad4:	02080064 	andeq	r0, r8, #100	; 0x64
    9ad8:	9a9f3200 	bls	fe7d62e0 <BootRAM+0xd746a81>
    9adc:	a2080064 	andge	r0, r8, #100	; 0x64
    9ae0:	01080064 	tsteq	r8, r4, rrx
    9ae4:	64ba5000 	ldrtvs	r5, [sl], #0
    9ae8:	64bc0800 	ldrtvs	r0, [ip], #2048	; 0x800
    9aec:	00010800 	andeq	r0, r1, r0, lsl #16
    9af0:	00000050 	andeq	r0, r0, r0, asr r0
    9af4:	00000000 	andeq	r0, r0, r0
    9af8:	0063fe00 	rsbeq	pc, r3, r0, lsl #28
    9afc:	0064c208 	rsbeq	ip, r4, r8, lsl #4
    9b00:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    9b0c:	080064a2 	stmdaeq	r0, {r1, r5, r7, sl, sp, lr}
    9b10:	080064ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sl, sp, lr}
    9b14:	9f360002 	svcls	0x00360002
    9b18:	080064bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, sp, lr}
    9b1c:	080064c2 	stmdaeq	r0, {r1, r6, r7, sl, sp, lr}
    9b20:	00530001 	subseq	r0, r3, r1
    9b24:	00000000 	andeq	r0, r0, r0
    9b28:	c2000000 	andgt	r0, r0, #0
    9b2c:	d8080064 	stmdale	r8, {r2, r5, r6}
    9b30:	02080064 	andeq	r0, r8, #100	; 0x64
    9b34:	d89f3000 	ldmle	pc, {ip, sp}	; <UNPREDICTABLE>
    9b38:	da080064 	ble	209cd0 <__Stack_Size+0x2094d0>
    9b3c:	01080064 	tsteq	r8, r4, rrx
    9b40:	64da5300 	ldrbvs	r5, [sl], #768	; 0x300
    9b44:	64e20800 	strbtvs	r0, [r2], #2048	; 0x800
    9b48:	00020800 	andeq	r0, r2, r0, lsl #16
    9b4c:	64e29f30 	strbtvs	r9, [r2], #3888	; 0xf30
    9b50:	64e40800 	strbtvs	r0, [r4], #2048	; 0x800
    9b54:	00010800 	andeq	r0, r1, r0, lsl #16
    9b58:	0064e453 	rsbeq	lr, r4, r3, asr r4
    9b5c:	0064ec08 	rsbeq	lr, r4, r8, lsl #24
    9b60:	30000208 	andcc	r0, r0, r8, lsl #4
    9b64:	0064ec9f 	mlseq	r4, pc, ip, lr	; <UNPREDICTABLE>
    9b68:	0064ee08 	rsbeq	lr, r4, r8, lsl #28
    9b6c:	53000108 	movwpl	r0, #264	; 0x108
    9b70:	080064ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, sp, lr}
    9b74:	080064f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, sp, lr}
    9b78:	9f300002 	svcls	0x00300002
    9b7c:	080064f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, sp, lr}
    9b80:	080064f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, sp, lr}
    9b84:	f8530001 			; <UNDEFINED> instruction: 0xf8530001
    9b88:	b4080064 	strlt	r0, [r8], #-100	; 0x64
    9b8c:	02080065 	andeq	r0, r8, #101	; 0x65
    9b90:	b49f3000 	ldrlt	r3, [pc], #0	; 9b98 <__Stack_Size+0x9398>
    9b94:	c1080065 	tstgt	r8, r5, rrx
    9b98:	01080065 	tsteq	r8, r5, rrx
    9b9c:	66745300 	ldrbtvs	r5, [r4], -r0, lsl #6
    9ba0:	667e0800 	ldrbtvs	r0, [lr], -r0, lsl #16
    9ba4:	00020800 	andeq	r0, r2, r0, lsl #16
    9ba8:	667e9f30 	uhasxvs	r9, lr, r0
    9bac:	66940800 	ldrvs	r0, [r4], r0, lsl #16
    9bb0:	00060800 	andeq	r0, r6, r0, lsl #16
    9bb4:	00600903 	rsbeq	r0, r0, r3, lsl #18
    9bb8:	00009f08 	andeq	r9, r0, r8, lsl #30
    9bbc:	00000000 	andeq	r0, r0, r0
    9bc0:	65c20000 	strbvs	r0, [r2]
    9bc4:	65c60800 	strbvs	r0, [r6, #2048]	; 0x800
    9bc8:	00020800 	andeq	r0, r2, r0, lsl #16
    9bcc:	65d29f30 	ldrbvs	r9, [r2, #3888]	; 0xf30
    9bd0:	65e80800 	strbvs	r0, [r8, #2048]!	; 0x800
    9bd4:	00010800 	andeq	r0, r1, r0, lsl #16
    9bd8:	0065ec50 	rsbeq	lr, r5, r0, asr ip
    9bdc:	0065f408 	rsbeq	pc, r5, r8, lsl #8
    9be0:	50000108 	andpl	r0, r0, r8, lsl #2
    9be4:	080065f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, sp, lr}
    9be8:	08006606 	stmdaeq	r0, {r1, r2, r9, sl, sp, lr}
    9bec:	60500001 	subsvs	r0, r0, r1
    9bf0:	6c080066 	stcvs	0, cr0, [r8], {102}	; 0x66
    9bf4:	01080066 	tsteq	r8, r6, rrx
    9bf8:	00005000 	andeq	r5, r0, r0
    9bfc:	00000000 	andeq	r0, r0, r0
    9c00:	64c20000 	strbvs	r0, [r2], #0
    9c04:	65ba0800 	ldrvs	r0, [sl, #2048]!	; 0x800
    9c08:	00010800 	andeq	r0, r1, r0, lsl #16
    9c0c:	0065c654 	rsbeq	ip, r5, r4, asr r6
    9c10:	0065dc08 	rsbeq	sp, r5, r8, lsl #24
    9c14:	54000108 	strpl	r0, [r0], #-264	; 0x108
    9c18:	08006674 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, sp, lr}
    9c1c:	08006694 	stmdaeq	r0, {r2, r4, r7, r9, sl, sp, lr}
    9c20:	00540001 	subseq	r0, r4, r1
    9c24:	00000000 	andeq	r0, r0, r0
    9c28:	4a000000 	bmi	9c30 <__Stack_Size+0x9430>
    9c2c:	76080065 	strvc	r0, [r8], -r5, rrx
    9c30:	01080065 	tsteq	r8, r5, rrx
    9c34:	00005100 	andeq	r5, r0, r0, lsl #2
    9c38:	00000000 	andeq	r0, r0, r0
    9c3c:	654a0000 	strbvs	r0, [sl, #-0]
    9c40:	65760800 	ldrbvs	r0, [r6, #-2048]!	; 0x800
    9c44:	00090800 	andeq	r0, r9, r0, lsl #16
    9c48:	70080073 	andvc	r0, r8, r3, ror r0
    9c4c:	1aff081a 	bne	fffcbcbc <BootRAM+0xef3c45d>
    9c50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9c54:	00000000 	andeq	r0, r0, r0
    9c58:	0064c200 	rsbeq	ip, r4, r0, lsl #4
    9c5c:	00666c08 	rsbeq	r6, r6, r8, lsl #24
    9c60:	30000208 	andcc	r0, r0, r8, lsl #4
    9c64:	0066749f 	mlseq	r6, pc, r4, r7	; <UNPREDICTABLE>
    9c68:	00669408 	rsbeq	r9, r6, r8, lsl #8
    9c6c:	30000208 	andcc	r0, r0, r8, lsl #4
    9c70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9c74:	00000000 	andeq	r0, r0, r0
    9c78:	00656200 	rsbeq	r6, r5, r0, lsl #4
    9c7c:	00657608 	rsbeq	r7, r5, r8, lsl #12
    9c80:	52000108 	andpl	r0, r0, #8, 2
	...
    9c8c:	080064ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, sp, lr}
    9c90:	080064d0 	stmdaeq	r0, {r4, r6, r7, sl, sp, lr}
    9c94:	03730002 	cmneq	r3, #2
    9c98:	080064d0 	stmdaeq	r0, {r4, r6, r7, sl, sp, lr}
    9c9c:	080064f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, sp, lr}
    9ca0:	b4520001 	ldrblt	r0, [r2], #-1
    9ca4:	b6080065 	strlt	r0, [r8], -r5, rrx
    9ca8:	01080065 	tsteq	r8, r5, rrx
    9cac:	00005200 	andeq	r5, r0, r0, lsl #4
    9cb0:	00000000 	andeq	r0, r0, r0
    9cb4:	669c0000 	ldrvs	r0, [ip], r0
    9cb8:	66a60800 	strtvs	r0, [r6], r0, lsl #16
    9cbc:	00010800 	andeq	r0, r1, r0, lsl #16
    9cc0:	0066a653 	rsbeq	sl, r6, r3, asr r6
    9cc4:	0066b708 	rsbeq	fp, r6, r8, lsl #14
    9cc8:	74000808 	strvc	r0, [r0], #-2056	; 0x808
    9ccc:	08019408 	stmdaeq	r1, {r3, sl, ip, pc}
    9cd0:	269f1aff 			; <UNDEFINED> instruction: 0x269f1aff
    9cd4:	2e080067 	cdpcs	0, 0, cr0, cr8, cr7, {3}
    9cd8:	01080067 	tsteq	r8, r7, rrx
    9cdc:	672e5300 	strvs	r5, [lr, -r0, lsl #6]!
    9ce0:	67330800 	ldrvs	r0, [r3, -r0, lsl #16]!
    9ce4:	00080800 	andeq	r0, r8, r0, lsl #16
    9ce8:	01940874 	orrseq	r0, r4, r4, ror r8
    9cec:	9f1aff08 	svcls	0x001aff08
    9cf0:	08006736 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, sp, lr}
    9cf4:	0800673e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sl, sp, lr}
    9cf8:	00530001 	subseq	r0, r3, r1
    9cfc:	00000000 	andeq	r0, r0, r0
    9d00:	a4000000 	strge	r0, [r0], #-0
    9d04:	28080066 	stmdacs	r8, {r1, r2, r5, r6}
    9d08:	03080067 	movweq	r0, #32871	; 0x8067
    9d0c:	9f107400 	svcls	0x00107400
	...
    9d18:	080066a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, sp, lr}
    9d1c:	080066b7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, r9, sl, sp, lr}
    9d20:	00520001 	subseq	r0, r2, r1
    9d24:	00000000 	andeq	r0, r0, r0
    9d28:	bc000000 	stclt	0, cr0, [r0], {-0}
    9d2c:	c4080066 	strgt	r0, [r8], #-102	; 0x66
    9d30:	01080066 	tsteq	r8, r6, rrx
    9d34:	66c45000 	strbvs	r5, [r4], r0
    9d38:	66d60800 	ldrbvs	r0, [r6], r0, lsl #16
    9d3c:	00010800 	andeq	r0, r1, r0, lsl #16
    9d40:	00000057 	andeq	r0, r0, r7, asr r0
    9d44:	00000000 	andeq	r0, r0, r0
    9d48:	0066ae00 	rsbeq	sl, r6, r0, lsl #28
    9d4c:	0066b408 	rsbeq	fp, r6, r8, lsl #8
    9d50:	76001608 	strvc	r1, [r0], -r8, lsl #12
    9d54:	4b401200 	blmi	100e55c <__Stack_Size+0x100dd5c>
    9d58:	00722224 	rsbseq	r2, r2, r4, lsr #4
    9d5c:	4b401416 	blmi	100edbc <__Stack_Size+0x100e5bc>
    9d60:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    9d64:	13160001 	tstne	r6, #1
    9d68:	0066b49f 	mlseq	r6, pc, r4, fp	; <UNPREDICTABLE>
    9d6c:	0066d608 	rsbeq	sp, r6, r8, lsl #12
    9d70:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    9d7c:	0800675c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, sp, lr}
    9d80:	08006788 	stmdaeq	r0, {r3, r7, r8, r9, sl, sp, lr}
    9d84:	88500001 	ldmdahi	r0, {r0}^
    9d88:	94080067 	strls	r0, [r8], #-103	; 0x67
    9d8c:	04080067 	streq	r0, [r8], #-103	; 0x67
    9d90:	5001f300 	andpl	pc, r1, r0, lsl #6
    9d94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9d98:	00000000 	andeq	r0, r0, r0
    9d9c:	00676200 	rsbeq	r6, r7, r0, lsl #4
    9da0:	00676408 	rsbeq	r6, r7, r8, lsl #8
    9da4:	30000208 	andcc	r0, r0, r8, lsl #4
    9da8:	0067649f 	mlseq	r7, pc, r4, r6	; <UNPREDICTABLE>
    9dac:	00678408 	rsbeq	r8, r7, r8, lsl #8
    9db0:	53000108 	movwpl	r0, #264	; 0x108
	...
    9dbc:	08006762 	stmdaeq	r0, {r1, r5, r6, r8, r9, sl, sp, lr}
    9dc0:	0800678c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, sp, lr}
    9dc4:	00540001 	subseq	r0, r4, r1
    9dc8:	00000000 	andeq	r0, r0, r0
    9dcc:	9c000000 	stcls	0, cr0, [r0], {-0}
    9dd0:	a7080067 	strge	r0, [r8, -r7, rrx]
    9dd4:	01080067 	tsteq	r8, r7, rrx
    9dd8:	67ac5200 	strvs	r5, [ip, r0, lsl #4]!
    9ddc:	67ae0800 	strvs	r0, [lr, r0, lsl #16]!
    9de0:	00010800 	andeq	r0, r1, r0, lsl #16
    9de4:	0067ae53 	rsbeq	sl, r7, r3, asr lr
    9de8:	0067b408 	rsbeq	fp, r7, r8, lsl #8
    9dec:	52000108 	andpl	r0, r0, #8, 2
    9df0:	080067b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, sp, lr}
    9df4:	080067c3 	stmdaeq	r0, {r0, r1, r6, r7, r8, r9, sl, sp, lr}
    9df8:	08730008 	ldmdaeq	r3!, {r3}^
    9dfc:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    9e00:	67d69f1a 	bfivs	r9, sl, (invalid: 30:22)
    9e04:	67e10800 	strbvs	r0, [r1, r0, lsl #16]!
    9e08:	00010800 	andeq	r0, r1, r0, lsl #16
    9e0c:	00000053 	andeq	r0, r0, r3, asr r0
    9e10:	00000000 	andeq	r0, r0, r0
    9e14:	0067f000 	rsbeq	pc, r7, r0
    9e18:	00680808 	rsbeq	r0, r8, r8, lsl #16
    9e1c:	50000108 	andpl	r0, r0, r8, lsl #2
    9e20:	08006808 	stmdaeq	r0, {r3, fp, sp, lr}
    9e24:	0800680a 	stmdaeq	r0, {r1, r3, fp, sp, lr}
    9e28:	7e700003 	cdpvc	0, 7, cr0, cr0, cr3, {0}
    9e2c:	00680a9f 	mlseq	r8, pc, sl, r0	; <UNPREDICTABLE>
    9e30:	00681a08 	rsbeq	r1, r8, r8, lsl #20
    9e34:	70000308 	andvc	r0, r0, r8, lsl #6
    9e38:	681a9f7f 	ldmdavs	sl, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}
    9e3c:	681e0800 	ldmdavs	lr, {fp}
    9e40:	00010800 	andeq	r0, r1, r0, lsl #16
    9e44:	00681e50 	rsbeq	r1, r8, r0, asr lr
    9e48:	00682008 	rsbeq	r2, r8, r8
    9e4c:	70000308 	andvc	r0, r0, r8, lsl #6
    9e50:	00009f7e 	andeq	r9, r0, lr, ror pc
    9e54:	00000000 	andeq	r0, r0, r0
    9e58:	67f00000 	ldrbvs	r0, [r0, r0]!
    9e5c:	67f60800 	ldrbvs	r0, [r6, r0, lsl #16]!
    9e60:	00010800 	andeq	r0, r1, r0, lsl #16
    9e64:	0067f651 	rsbeq	pc, r7, r1, asr r6	; <UNPREDICTABLE>
    9e68:	00682008 	rsbeq	r2, r8, r8
    9e6c:	f3000408 	vshl.u8	d0, d8, d0
    9e70:	009f5101 	addseq	r5, pc, r1, lsl #2
    9e74:	00000000 	andeq	r0, r0, r0
    9e78:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    9e7c:	f8080067 			; <UNDEFINED> instruction: 0xf8080067
    9e80:	01080067 	tsteq	r8, r7, rrx
    9e84:	67f85200 	ldrbvs	r5, [r8, r0, lsl #4]!
    9e88:	68200800 	stmdavs	r0!, {fp}
    9e8c:	00040800 	andeq	r0, r4, r0, lsl #16
    9e90:	9f5201f3 	svcls	0x005201f3
	...
    9e9c:	08006800 	stmdaeq	r0, {fp, sp, lr}
    9ea0:	08006802 	stmdaeq	r0, {r1, fp, sp, lr}
    9ea4:	02520001 	subseq	r0, r2, #1
    9ea8:	1a080068 	bne	20a050 <__Stack_Size+0x209850>
    9eac:	0f080068 	svceq	0x00080068
    9eb0:	5201f300 	andpl	pc, r1, #0, 6
    9eb4:	1affff0a 	bne	9ae4 <__Stack_Size+0x92e4>
    9eb8:	26310123 	ldrtcs	r0, [r1], -r3, lsr #2
    9ebc:	9f1c0073 	svcls	0x001c0073
    9ec0:	0800681a 	stmdaeq	r0, {r1, r3, r4, fp, sp, lr}
    9ec4:	0800681c 	stmdaeq	r0, {r2, r3, r4, fp, sp, lr}
    9ec8:	01f30010 	mvnseq	r0, r0, lsl r0
    9ecc:	ffff0a52 			; <UNDEFINED> instruction: 0xffff0a52
    9ed0:	3101231a 	tstcc	r1, sl, lsl r3
    9ed4:	20007326 	andcs	r7, r0, r6, lsr #6
    9ed8:	681c9f22 	ldmdavs	ip, {r1, r5, r8, r9, sl, fp, ip, pc}
    9edc:	68200800 	stmdavs	r0!, {fp}
    9ee0:	000f0800 	andeq	r0, pc, r0, lsl #16
    9ee4:	0a5201f3 	beq	148a6b8 <__Stack_Size+0x1489eb8>
    9ee8:	231affff 	tstcs	sl, #1020	; 0x3fc
    9eec:	73263101 	teqvc	r6, #1073741824	; 0x40000000
    9ef0:	009f1c00 	addseq	r1, pc, r0, lsl #24
    9ef4:	00000000 	andeq	r0, r0, r0
    9ef8:	0a000000 	beq	9f00 <__Stack_Size+0x9700>
    9efc:	12080068 	andne	r0, r8, #104	; 0x68
    9f00:	08080068 	stmdaeq	r8, {r3, r5, r6}
    9f04:	947e7000 	ldrbtls	r7, [lr], #-0
    9f08:	1aff0801 	bne	fffcbf14 <BootRAM+0xef3c6b5>
    9f0c:	0068129f 	mlseq	r8, pc, r2, r1	; <UNPREDICTABLE>
    9f10:	00681608 	rsbeq	r1, r8, r8, lsl #12
    9f14:	54000108 	strpl	r0, [r0], #-264	; 0x108
    9f18:	08006816 	stmdaeq	r0, {r1, r2, r4, fp, sp, lr}
    9f1c:	0800681a 	stmdaeq	r0, {r1, r3, r4, fp, sp, lr}
    9f20:	7e700008 	cdpvc	0, 7, cr0, cr0, cr8, {0}
    9f24:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    9f28:	00009f1a 	andeq	r9, r0, sl, lsl pc
    9f2c:	00000000 	andeq	r0, r0, r0
    9f30:	680a0000 	stmdavs	sl, {}	; <UNPREDICTABLE>
    9f34:	681a0800 	ldmdavs	sl, {fp}
    9f38:	00120800 	andseq	r0, r2, r0, lsl #16
    9f3c:	01947f70 	orrseq	r7, r4, r0, ror pc
    9f40:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    9f44:	947e7024 	ldrbtls	r7, [lr], #-36	; 0x24
    9f48:	1aff0801 	bne	fffcbf54 <BootRAM+0xef3c6f5>
    9f4c:	00009f21 	andeq	r9, r0, r1, lsr #30
    9f50:	00000000 	andeq	r0, r0, r0
    9f54:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    9f58:	68020800 	stmdavs	r2, {fp}
    9f5c:	00010800 	andeq	r0, r1, r0, lsl #16
    9f60:	00681a51 	rsbeq	r1, r8, r1, asr sl
    9f64:	00681c08 	rsbeq	r1, r8, r8, lsl #24
    9f68:	73000a08 	movwvc	r0, #2568	; 0xa08
    9f6c:	71243200 	teqvc	r4, r0, lsl #4
    9f70:	04232200 	strteq	r2, [r3], #-512	; 0x200
    9f74:	00681c9f 	mlseq	r8, pc, ip, r1	; <UNPREDICTABLE>
    9f78:	00681e08 	rsbeq	r1, r8, r8, lsl #28
    9f7c:	73000a08 	movwvc	r0, #2568	; 0xa08
    9f80:	7124327f 	teqvc	r4, pc, ror r2
    9f84:	04232200 	strteq	r2, [r3], #-512	; 0x200
    9f88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9f8c:	00000000 	andeq	r0, r0, r0
    9f90:	00682000 	rsbeq	r2, r8, r0
    9f94:	00683208 	rsbeq	r3, r8, r8, lsl #4
    9f98:	50000108 	andpl	r0, r0, r8, lsl #2
    9f9c:	0800683e 	stmdaeq	r0, {r1, r2, r3, r4, r5, fp, sp, lr}
    9fa0:	08006840 	stmdaeq	r0, {r6, fp, sp, lr}
    9fa4:	0073000a 	rsbseq	r0, r3, sl
    9fa8:	00702431 	rsbseq	r2, r0, r1, lsr r4
    9fac:	9f022322 	svcls	0x00022322
    9fb0:	08006840 	stmdaeq	r0, {r6, fp, sp, lr}
    9fb4:	08006842 	stmdaeq	r0, {r1, r6, fp, sp, lr}
    9fb8:	7f73000a 	svcvc	0x0073000a
    9fbc:	00702431 	rsbseq	r2, r0, r1, lsr r4
    9fc0:	9f022322 	svcls	0x00022322
	...
    9fcc:	08006820 	stmdaeq	r0, {r5, fp, sp, lr}
    9fd0:	08006826 	stmdaeq	r0, {r1, r2, r5, fp, sp, lr}
    9fd4:	26510001 	ldrbcs	r0, [r1], -r1
    9fd8:	44080068 	strmi	r0, [r8], #-104	; 0x68
    9fdc:	04080068 	streq	r0, [r8], #-104	; 0x68
    9fe0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    9fe4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9fe8:	00000000 	andeq	r0, r0, r0
    9fec:	00682000 	rsbeq	r2, r8, r0
    9ff0:	00682808 	rsbeq	r2, r8, r8, lsl #16
    9ff4:	52000108 	andpl	r0, r0, #8, 2
    9ff8:	08006828 	stmdaeq	r0, {r3, r5, fp, sp, lr}
    9ffc:	08006844 	stmdaeq	r0, {r2, r6, fp, sp, lr}
    a000:	01f30004 	mvnseq	r0, r4
    a004:	00009f52 	andeq	r9, r0, r2, asr pc
    a008:	00000000 	andeq	r0, r0, r0
    a00c:	68300000 	ldmdavs	r0!, {}	; <UNPREDICTABLE>
    a010:	68320800 	ldmdavs	r2!, {fp}
    a014:	00010800 	andeq	r0, r1, r0, lsl #16
    a018:	00683252 	rsbeq	r3, r8, r2, asr r2
    a01c:	00683e08 	rsbeq	r3, r8, r8, lsl #28
    a020:	f3000f08 	vpmax.f32	d0, d0, d8
    a024:	ff0a5201 			; <UNDEFINED> instruction: 0xff0a5201
    a028:	01231aff 	strdeq	r1, [r3, -pc]!
    a02c:	00732631 	rsbseq	r2, r3, r1, lsr r6
    a030:	683e9f1c 	ldmdavs	lr!, {r2, r3, r4, r8, r9, sl, fp, ip, pc}
    a034:	68400800 	stmdavs	r0, {fp}^
    a038:	00100800 	andseq	r0, r0, r0, lsl #16
    a03c:	0a5201f3 	beq	148a810 <__Stack_Size+0x148a010>
    a040:	231affff 	tstcs	sl, #1020	; 0x3fc
    a044:	73263101 	teqvc	r6, #1073741824	; 0x40000000
    a048:	9f222000 	svcls	0x00222000
    a04c:	08006840 	stmdaeq	r0, {r6, fp, sp, lr}
    a050:	08006844 	stmdaeq	r0, {r2, r6, fp, sp, lr}
    a054:	01f3000f 	mvnseq	r0, pc
    a058:	ffff0a52 			; <UNDEFINED> instruction: 0xffff0a52
    a05c:	3101231a 	tstcc	r1, sl, lsl r3
    a060:	1c007326 	stcne	3, cr7, [r0], {38}	; 0x26
    a064:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    a068:	00000000 	andeq	r0, r0, r0
    a06c:	00683000 	rsbeq	r3, r8, r0
    a070:	00683208 	rsbeq	r3, r8, r8, lsl #4
    a074:	51000108 	tstpl	r0, r8, lsl #2
    a078:	08006836 	stmdaeq	r0, {r1, r2, r4, r5, fp, sp, lr}
    a07c:	08006840 	stmdaeq	r0, {r6, fp, sp, lr}
    a080:	0073000a 	rsbseq	r0, r3, sl
    a084:	00712432 	rsbseq	r2, r1, r2, lsr r4
    a088:	9f042322 	svcls	0x00042322
    a08c:	08006840 	stmdaeq	r0, {r6, fp, sp, lr}
    a090:	08006842 	stmdaeq	r0, {r1, r6, fp, sp, lr}
    a094:	7f73000a 	svcvc	0x0073000a
    a098:	00712432 	rsbseq	r2, r1, r2, lsr r4
    a09c:	9f042322 	svcls	0x00042322
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00000000 	andeq	r0, r0, r0
       8:	08000b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp}
       c:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
      14:	08000b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp}
	...
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	08000c20 	stmdaeq	r0, {r5, sl, fp}
      24:	08000c22 	stmdaeq	r0, {r1, r5, sl, fp}
      28:	08000c24 	stmdaeq	r0, {r2, r5, sl, fp}
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	08000c34 	stmdaeq	r0, {r2, r4, r5, sl, fp}
	...
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      38:	08000d88 	stmdaeq	r0, {r3, r7, r8, sl, fp}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	08000d8a 	stmdaeq	r0, {r1, r3, r7, r8, sl, fp}

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	08000d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp}
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	08000db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp}
	...

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	08000dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp}
      54:	08000dc2 	stmdaeq	r0, {r1, r6, r7, r8, sl, fp}
      58:	08000dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp}
      5c:	08000dc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sl, fp}
      60:	08000dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp}
      64:	08000ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp}
	...
      70:	08000e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp}
      74:	08000e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp}
      78:	08000e7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, fp}
      7c:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
	...
      88:	08000eea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, fp}
      8c:	08000ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp}
      90:	08000efa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp}
      94:	08000efe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, fp}
	...
      a0:	08000f06 	stmdaeq	r0, {r1, r2, r8, r9, sl, fp}
      a4:	08000f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp}
	f25519_select(x, a, b, (a[0] ^ parity) & 1);

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
	f25519_normalize(a);
	f25519_normalize(c);
      a8:	08000f16 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl, fp}

	return f25519_eq(a, c);
      ac:	08000f1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, fp}
	...
	uint8_t ok;

	mx2ey(ey, mx);
	ok = ey2ex(ex, ey, parity);

	f25519_normalize(ex);
      b8:	08000ff0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
	f25519_normalize(ey);
      bc:	08000ff6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp}
      c0:	08000ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp}

	return ok;
}
      c4:	08001000 	stmdaeq	r0, {ip}
      c8:	08001004 	stmdaeq	r0, {r2, ip}
      cc:	08001008 	stmdaeq	r0, {r3, ip}
	...
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
      d8:	08000b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp}
		minusp[i] = c;
      dc:	08000b9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, fp}
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
      e0:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
      e4:	08000b9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp}

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
      e8:	08000ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp}
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
      ec:	08000ba2 	stmdaeq	r0, {r1, r5, r7, r8, r9, fp}
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
      f0:	08000ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp}
      f4:	08000bae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, fp}
      f8:	08000bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp}
      fc:	08000bb2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, fp}
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     100:	08000bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp}

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
     104:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
     108:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     10c:	08000bce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, fp}
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
     110:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
     114:	08000bd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, fp}
     118:	08000bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp}
     11c:	08000bd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, fp}
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     120:	08000bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp}
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
     124:	08000bda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, fp}
     128:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
		fprime_copy(plusa, r);
		fprime_add(plusa, a, modulus);

		fprime_select(r, r, plusa, bit);
	}
}
     12c:	08000bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp}

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
     130:	08000be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp}
	i <<= 3;

	while (x) {
     134:	08000be2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, fp}
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
     138:	08000be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp}
     13c:	08000bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp}
	f25519_mul__distinct(x3, a, a);

	f25519_mul_c(a, x1z1, 486662);
	f25519_add(a, x1sq, a);
	f25519_add(a, z1sq, a);
	f25519_mul__distinct(x1sq, x1z1, a);
     140:	08000bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp}
	f25519_mul_c(z3, x1sq, 4);
     144:	08000c98 	stmdaeq	r0, {r3, r4, r7, sl, fp}
     148:	08000c98 	stmdaeq	r0, {r3, r4, r7, sl, fp}
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	08000d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp}
     150:	08000d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp}
     154:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
	f25519_sub(b, x3, z3); /* D */
     158:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
     15c:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
	f25519_mul__distinct(da, a, b);
     160:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
     164:	08000d44 	stmdaeq	r0, {r2, r6, r8, sl, fp}
     168:	08000d44 	stmdaeq	r0, {r2, r6, r8, sl, fp}

	f25519_sub(b, x2, z2);
     16c:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
     170:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
	f25519_add(a, x3, z3); /* C */
     174:	08000d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp}
     178:	08000d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp}
     17c:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
	f25519_mul__distinct(cb, a, b);
     180:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
     184:	08000e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp}

	f25519_add(a, da, cb);
     188:	08000e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp}
     18c:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
     190:	00000001 	andeq	r0, r0, r1
	f25519_mul__distinct(b, a, a);
     194:	00000001 	andeq	r0, r0, r1
     198:	00000001 	andeq	r0, r0, r1
	f25519_mul__distinct(x5, z1, b);
     19c:	00000001 	andeq	r0, r0, r1
     1a0:	00000001 	andeq	r0, r0, r1
     1a4:	00000001 	andeq	r0, r0, r1

	f25519_sub(a, da, cb);
     1a8:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
     1ac:	08000f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp}
	f25519_mul__distinct(b, a, a);
     1b0:	00000001 	andeq	r0, r0, r1
     1b4:	00000001 	andeq	r0, r0, r1
     1b8:	00000001 	andeq	r0, r0, r1

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	00000001 	andeq	r0, r0, r1
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	08000f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp}
     1c4:	08000f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp}

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	08000f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp}
     1cc:	08000fa6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, fp}
     1d0:	08000fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp}
     1d4:	0800108c 	stmdaeq	r0, {r2, r3, r7, ip}
		f25519_select(zm1, zm1, zm, bit);
     1d8:	00000001 	andeq	r0, r0, r1
     1dc:	00000001 	andeq	r0, r0, r1
	...
		f25519_select(xm, xm, xms, bit);
     1e8:	00000001 	andeq	r0, r0, r1
     1ec:	00000001 	andeq	r0, r0, r1
		f25519_select(zm, zm, zms, bit);
     1f0:	0800108c 	stmdaeq	r0, {r2, r3, r7, ip}
     1f4:	080011c8 	stmdaeq	r0, {r3, r6, r7, r8, ip}
	...
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     200:	00000001 	andeq	r0, r0, r1
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	00000001 	andeq	r0, r0, r1
     208:	00000001 	andeq	r0, r0, r1
	f25519_mul__distinct(result, zm1, xm);
     20c:	00000001 	andeq	r0, r0, r1
	...
	f25519_normalize(result);
     218:	00000001 	andeq	r0, r0, r1
}
     21c:	00000001 	andeq	r0, r0, r1
     220:	00000001 	andeq	r0, r0, r1
     224:	00000001 	andeq	r0, r0, r1
	...
     230:	080011f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, ip}
     234:	080011fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, ip}
     238:	08001202 	stmdaeq	r0, {r1, r9, ip}
     23c:	08001214 	stmdaeq	r0, {r2, r4, r9, ip}
	...
     248:	0800122e 	stmdaeq	r0, {r1, r2, r3, r5, r9, ip}
     24c:	08001232 	stmdaeq	r0, {r1, r4, r5, r9, ip}
     250:	0800124c 	stmdaeq	r0, {r2, r3, r6, r9, ip}
     254:	0800124e 	stmdaeq	r0, {r1, r2, r3, r6, r9, ip}
	...
     260:	0800123e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, ip}
     264:	08001240 	stmdaeq	r0, {r6, r9, ip}
     268:	0800124e 	stmdaeq	r0, {r1, r2, r3, r6, r9, ip}
     26c:	08001250 	stmdaeq	r0, {r4, r6, r9, ip}
	...
     278:	08001260 	stmdaeq	r0, {r5, r6, r9, ip}
     27c:	08001264 	stmdaeq	r0, {r2, r5, r6, r9, ip}
     280:	08001266 	stmdaeq	r0, {r1, r2, r5, r6, r9, ip}
     284:	0800128a 	stmdaeq	r0, {r1, r3, r7, r9, ip}
	...
     290:	08001438 	stmdaeq	r0, {r3, r4, r5, sl, ip}
     294:	0800143c 	stmdaeq	r0, {r2, r3, r4, r5, sl, ip}
     298:	0800143e 	stmdaeq	r0, {r1, r2, r3, r4, r5, sl, ip}
     29c:	08001440 	stmdaeq	r0, {r6, sl, ip}
	...
     2a8:	08001466 	stmdaeq	r0, {r1, r2, r5, r6, sl, ip}
     2ac:	0800148c 	stmdaeq	r0, {r2, r3, r7, sl, ip}
     2b0:	0800148e 	stmdaeq	r0, {r1, r2, r3, r7, sl, ip}
     2b4:	08001496 	stmdaeq	r0, {r1, r2, r4, r7, sl, ip}
     2b8:	08001498 	stmdaeq	r0, {r3, r4, r7, sl, ip}
     2bc:	080014a0 	stmdaeq	r0, {r5, r7, sl, ip}
	...
     2c8:	08001496 	stmdaeq	r0, {r1, r2, r4, r7, sl, ip}
     2cc:	08001498 	stmdaeq	r0, {r3, r4, r7, sl, ip}
     2d0:	080014ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, ip}
     2d4:	080014e0 	stmdaeq	r0, {r5, r6, r7, sl, ip}
	...
     2e0:	00000001 	andeq	r0, r0, r1
     2e4:	00000001 	andeq	r0, r0, r1
     2e8:	00000001 	andeq	r0, r0, r1
     2ec:	00000001 	andeq	r0, r0, r1
	...
     2f8:	00000001 	andeq	r0, r0, r1
     2fc:	00000001 	andeq	r0, r0, r1
     300:	00000001 	andeq	r0, r0, r1
     304:	00000001 	andeq	r0, r0, r1
     308:	00000001 	andeq	r0, r0, r1
     30c:	00000001 	andeq	r0, r0, r1
	...
     318:	00000001 	andeq	r0, r0, r1
     31c:	00000001 	andeq	r0, r0, r1
     320:	00000001 	andeq	r0, r0, r1
     324:	00000001 	andeq	r0, r0, r1
     328:	080011c8 	stmdaeq	r0, {r3, r6, r7, r8, ip}
     32c:	080011de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, ip}
     330:	080011e0 	stmdaeq	r0, {r5, r6, r7, r8, ip}
     334:	080011f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, ip}
     338:	080011f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip}
     33c:	08001254 	stmdaeq	r0, {r2, r4, r6, r9, ip}
     340:	00000001 	andeq	r0, r0, r1
     344:	00000001 	andeq	r0, r0, r1
     348:	00000001 	andeq	r0, r0, r1
     34c:	00000001 	andeq	r0, r0, r1
     350:	00000001 	andeq	r0, r0, r1
     354:	00000001 	andeq	r0, r0, r1
     358:	08001254 	stmdaeq	r0, {r2, r4, r6, r9, ip}
     35c:	08001298 	stmdaeq	r0, {r3, r4, r7, r9, ip}
     360:	00000001 	andeq	r0, r0, r1
     364:	00000001 	andeq	r0, r0, r1
     368:	08001298 	stmdaeq	r0, {r3, r4, r7, r9, ip}
     36c:	08001320 	stmdaeq	r0, {r5, r8, r9, ip}
     370:	08001320 	stmdaeq	r0, {r5, r8, r9, ip}
     374:	08001370 	stmdaeq	r0, {r4, r5, r6, r8, r9, ip}
     378:	08001370 	stmdaeq	r0, {r4, r5, r6, r8, r9, ip}
     37c:	080013dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, ip}
     380:	080013dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, ip}
     384:	080013f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip}
     388:	080013f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip}
     38c:	08001410 	stmdaeq	r0, {r4, sl, ip}
     390:	08001410 	stmdaeq	r0, {r4, sl, ip}
     394:	08001438 	stmdaeq	r0, {r3, r4, r5, sl, ip}
     398:	00000001 	andeq	r0, r0, r1
     39c:	00000001 	andeq	r0, r0, r1
     3a0:	00000001 	andeq	r0, r0, r1
     3a4:	00000001 	andeq	r0, r0, r1
     3a8:	08001438 	stmdaeq	r0, {r3, r4, r5, sl, ip}
     3ac:	080014e0 	stmdaeq	r0, {r5, r6, r7, sl, ip}
     3b0:	00000001 	andeq	r0, r0, r1
     3b4:	00000001 	andeq	r0, r0, r1
     3b8:	00000001 	andeq	r0, r0, r1
     3bc:	00000001 	andeq	r0, r0, r1
     3c0:	080014e0 	stmdaeq	r0, {r5, r6, r7, sl, ip}
     3c4:	08001550 	stmdaeq	r0, {r4, r6, r8, sl, ip}
     3c8:	08001550 	stmdaeq	r0, {r4, r6, r8, sl, ip}
     3cc:	08001578 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, ip}
     3d0:	08001578 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, ip}
     3d4:	0800158c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip}
     3d8:	0800158c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip}
     3dc:	080015cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, ip}
     3e0:	00000001 	andeq	r0, r0, r1
     3e4:	00000001 	andeq	r0, r0, r1
     3e8:	080015cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, ip}
     3ec:	08001624 	stmdaeq	r0, {r2, r5, r9, sl, ip}
     3f0:	08001624 	stmdaeq	r0, {r2, r5, r9, sl, ip}
     3f4:	08001630 	stmdaeq	r0, {r4, r5, r9, sl, ip}
     3f8:	08001630 	stmdaeq	r0, {r4, r5, r9, sl, ip}
     3fc:	08001648 	stmdaeq	r0, {r3, r6, r9, sl, ip}
     400:	08001648 	stmdaeq	r0, {r3, r6, r9, sl, ip}
     404:	0800165a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, ip}
     408:	0800165c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, ip}
     40c:	0800166c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, ip}
     410:	0800166c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, ip}
     414:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
	...
     420:	080017c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, ip}
     424:	080017ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, sl, ip}
     428:	080017cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, ip}
     42c:	0800181e 	stmdaeq	r0, {r1, r2, r3, r4, fp, ip}
	...
     438:	08001930 	stmdaeq	r0, {r4, r5, r8, fp, ip}
     43c:	0800194e 	stmdaeq	r0, {r1, r2, r3, r6, r8, fp, ip}
     440:	080019a2 	stmdaeq	r0, {r1, r5, r7, r8, fp, ip}
     444:	080019b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, fp, ip}
	...
     450:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
     454:	08001724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip}
     458:	08001724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip}
     45c:	080019fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip}
     460:	080019fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip}
     464:	08001a40 	stmdaeq	r0, {r6, r9, fp, ip}
     468:	00000001 	andeq	r0, r0, r1
     46c:	00000001 	andeq	r0, r0, r1
     470:	08001a40 	stmdaeq	r0, {r6, r9, fp, ip}
     474:	08001a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, ip}
     478:	08001a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, ip}
     47c:	08001a70 	stmdaeq	r0, {r4, r5, r6, r9, fp, ip}
     480:	08001a70 	stmdaeq	r0, {r4, r5, r6, r9, fp, ip}
     484:	08001aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, ip}
     488:	08001aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, ip}
     48c:	08001ad8 	stmdaeq	r0, {r3, r4, r6, r7, r9, fp, ip}
     490:	00000001 	andeq	r0, r0, r1
     494:	00000001 	andeq	r0, r0, r1
     498:	00000001 	andeq	r0, r0, r1
     49c:	00000001 	andeq	r0, r0, r1
     4a0:	00000001 	andeq	r0, r0, r1
     4a4:	00000001 	andeq	r0, r0, r1
     4a8:	08001ad8 	stmdaeq	r0, {r3, r4, r6, r7, r9, fp, ip}
     4ac:	08001ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, ip}
     4b0:	00000001 	andeq	r0, r0, r1
     4b4:	00000001 	andeq	r0, r0, r1
     4b8:	08001ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, ip}
     4bc:	08001ae6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, fp, ip}
	...
     4c8:	00000001 	andeq	r0, r0, r1
     4cc:	00000001 	andeq	r0, r0, r1
     4d0:	00000001 	andeq	r0, r0, r1
     4d4:	00000001 	andeq	r0, r0, r1
     4d8:	00000001 	andeq	r0, r0, r1
     4dc:	00000001 	andeq	r0, r0, r1
     4e0:	00000001 	andeq	r0, r0, r1
     4e4:	00000001 	andeq	r0, r0, r1
     4e8:	00000001 	andeq	r0, r0, r1
     4ec:	00000001 	andeq	r0, r0, r1
	...
     4f8:	00000001 	andeq	r0, r0, r1
     4fc:	00000001 	andeq	r0, r0, r1
     500:	00000001 	andeq	r0, r0, r1
     504:	00000001 	andeq	r0, r0, r1
	...
     510:	00000001 	andeq	r0, r0, r1
     514:	00000001 	andeq	r0, r0, r1
     518:	00000001 	andeq	r0, r0, r1
     51c:	00000001 	andeq	r0, r0, r1
     520:	00000001 	andeq	r0, r0, r1
     524:	00000001 	andeq	r0, r0, r1
	...
     530:	00000001 	andeq	r0, r0, r1
     534:	00000001 	andeq	r0, r0, r1
     538:	00000001 	andeq	r0, r0, r1
     53c:	00000001 	andeq	r0, r0, r1
	...
     548:	00000001 	andeq	r0, r0, r1
     54c:	00000001 	andeq	r0, r0, r1
	...
     558:	08001b14 	stmdaeq	r0, {r2, r4, r8, r9, fp, ip}
     55c:	08001b1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, fp, ip}
     560:	08001b1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, fp, ip}
     564:	08001b34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp, ip}
     568:	08001b36 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, fp, ip}
     56c:	08001b3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, fp, ip}
     570:	08001b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, ip}
     574:	08001b42 	stmdaeq	r0, {r1, r6, r8, r9, fp, ip}
	...
     580:	08001bf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, fp, ip}
     584:	08001c02 	stmdaeq	r0, {r1, sl, fp, ip}
     588:	08001c08 	stmdaeq	r0, {r3, sl, fp, ip}
     58c:	08001c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, ip}
     590:	08001c22 	stmdaeq	r0, {r1, r5, sl, fp, ip}
     594:	08001c26 	stmdaeq	r0, {r1, r2, r5, sl, fp, ip}
     598:	08001c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, ip}
     59c:	08001c32 	stmdaeq	r0, {r1, r4, r5, sl, fp, ip}
	...
     5a8:	08001e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, ip}
     5ac:	08001eb0 	stmdaeq	r0, {r4, r5, r7, r9, sl, fp, ip}
     5b0:	08001eb2 	stmdaeq	r0, {r1, r4, r5, r7, r9, sl, fp, ip}
     5b4:	08001eba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, fp, ip}
	...
     5c0:	08001ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, ip}
     5c4:	08001b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip}
     5c8:	08001b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip}
     5cc:	08001b92 	stmdaeq	r0, {r1, r4, r7, r8, r9, fp, ip}
     5d0:	08001b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, ip}
     5d4:	08001bf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, fp, ip}
     5d8:	08001bf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, fp, ip}
     5dc:	08001cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip}
     5e0:	08001cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip}
     5e4:	08001d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, ip}
     5e8:	08001d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, ip}
     5ec:	08001e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip}
     5f0:	08001e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip}
     5f4:	08001ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, ip}
	...
     600:	00000001 	andeq	r0, r0, r1
     604:	00000001 	andeq	r0, r0, r1
     608:	00000001 	andeq	r0, r0, r1
     60c:	00000001 	andeq	r0, r0, r1
     610:	00000001 	andeq	r0, r0, r1
     614:	00000001 	andeq	r0, r0, r1
     618:	00000001 	andeq	r0, r0, r1
     61c:	00000001 	andeq	r0, r0, r1
     620:	00000001 	andeq	r0, r0, r1
     624:	00000001 	andeq	r0, r0, r1
	...
     630:	00000001 	andeq	r0, r0, r1
     634:	00000001 	andeq	r0, r0, r1
     638:	00000001 	andeq	r0, r0, r1
     63c:	00000001 	andeq	r0, r0, r1
     640:	00000001 	andeq	r0, r0, r1
     644:	00000001 	andeq	r0, r0, r1
	...
     650:	00000001 	andeq	r0, r0, r1
     654:	00000001 	andeq	r0, r0, r1
     658:	00000001 	andeq	r0, r0, r1
     65c:	00000001 	andeq	r0, r0, r1
     660:	00000001 	andeq	r0, r0, r1
     664:	00000001 	andeq	r0, r0, r1
	...
     670:	00000001 	andeq	r0, r0, r1
     674:	00000001 	andeq	r0, r0, r1
     678:	00000001 	andeq	r0, r0, r1
     67c:	00000001 	andeq	r0, r0, r1
     680:	00000001 	andeq	r0, r0, r1
     684:	00000001 	andeq	r0, r0, r1
	...
     690:	08001ede 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, fp, ip}
     694:	08001ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, ip}
     698:	08001ee6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, fp, ip}
     69c:	08001fb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, fp, ip}
     6a0:	08002040 	stmdaeq	r0, {r6, sp}
     6a4:	08002050 	stmdaeq	r0, {r4, r6, sp}
	...
     6b0:	08001f04 	stmdaeq	r0, {r2, r8, r9, sl, fp, ip}
     6b4:	08001f06 	stmdaeq	r0, {r1, r2, r8, r9, sl, fp, ip}
     6b8:	08001f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp, ip}
     6bc:	08001f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, ip}
     6c0:	08001f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip}
     6c4:	08001fb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, fp, ip}
     6c8:	08002040 	stmdaeq	r0, {r6, sp}
     6cc:	08002050 	stmdaeq	r0, {r4, r6, sp}
	...
     6d8:	08001f04 	stmdaeq	r0, {r2, r8, r9, sl, fp, ip}
     6dc:	08001f06 	stmdaeq	r0, {r1, r2, r8, r9, sl, fp, ip}
     6e0:	08001f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp, ip}
     6e4:	08001f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, ip}
     6e8:	08001f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip}
     6ec:	08001f28 	stmdaeq	r0, {r3, r5, r8, r9, sl, fp, ip}
     6f0:	08001f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, ip}
     6f4:	08001f30 	stmdaeq	r0, {r4, r5, r8, r9, sl, fp, ip}
	...
     700:	08001f32 	stmdaeq	r0, {r1, r4, r5, r8, r9, sl, fp, ip}
     704:	08001f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, ip}
     708:	08002040 	stmdaeq	r0, {r6, sp}
     70c:	08002050 	stmdaeq	r0, {r4, r6, sp}
	...
     718:	00000001 	andeq	r0, r0, r1
     71c:	00000001 	andeq	r0, r0, r1
     720:	08001ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, ip}
     724:	08002050 	stmdaeq	r0, {r4, r6, sp}
	...
     730:	080020b0 	stmdaeq	r0, {r4, r5, r7, sp}
     734:	080020b2 	stmdaeq	r0, {r1, r4, r5, r7, sp}
     738:	080020b8 	stmdaeq	r0, {r3, r4, r5, r7, sp}
     73c:	080020bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sp}
     740:	080020c0 	stmdaeq	r0, {r6, r7, sp}
     744:	080020d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sp}
	...
     750:	00000001 	andeq	r0, r0, r1
     754:	00000001 	andeq	r0, r0, r1
     758:	00000001 	andeq	r0, r0, r1
     75c:	00000001 	andeq	r0, r0, r1
	...
     768:	080023a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sp}
     76c:	080023aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sp}
     770:	080023ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sp}
     774:	08002430 	stmdaeq	r0, {r4, r5, sl, sp}
	...
     780:	08002430 	stmdaeq	r0, {r4, r5, sl, sp}
     784:	080024a2 	stmdaeq	r0, {r1, r5, r7, sl, sp}
     788:	080024a8 	stmdaeq	r0, {r3, r5, r7, sl, sp}
     78c:	080024ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, sl, sp}
	...
     798:	080024a2 	stmdaeq	r0, {r1, r5, r7, sl, sp}
     79c:	080024a8 	stmdaeq	r0, {r3, r5, r7, sl, sp}
     7a0:	080024ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, sl, sp}
     7a4:	08002530 	stmdaeq	r0, {r4, r5, r8, sl, sp}
	...
     7b0:	080024a2 	stmdaeq	r0, {r1, r5, r7, sl, sp}
     7b4:	080024a8 	stmdaeq	r0, {r3, r5, r7, sl, sp}
     7b8:	080024ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, sl, sp}
     7bc:	080024f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, sp}
	...
     7c8:	08002994 	stmdaeq	r0, {r2, r4, r7, r8, fp, sp}
     7cc:	08002996 	stmdaeq	r0, {r1, r2, r4, r7, r8, fp, sp}
     7d0:	0800299c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp, sp}
     7d4:	080029e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp, sp}
	...
     7e0:	08002a5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, fp, sp}
     7e4:	08002ae2 	stmdaeq	r0, {r1, r5, r6, r7, r9, fp, sp}
     7e8:	08002ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, sp}
     7ec:	08002aee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, fp, sp}
	...
     7f8:	08002ae2 	stmdaeq	r0, {r1, r5, r6, r7, r9, fp, sp}
     7fc:	08002ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, sp}
     800:	08002aee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, fp, sp}
     804:	08002b72 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, fp, sp}
	...
     810:	08002ae2 	stmdaeq	r0, {r1, r5, r6, r7, r9, fp, sp}
     814:	08002ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, sp}
     818:	08002aee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, fp, sp}
     81c:	08002b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, sp}
	...
     828:	08002e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, sp}
     82c:	08002ec6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, fp, sp}
     830:	08002eca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, fp, sp}
     834:	08002ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, sp}
	...
     840:	08002ec6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, fp, sp}
     844:	08002eca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, fp, sp}
     848:	08002ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, sp}
     84c:	08002f4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, fp, sp}
	...
     858:	08002ec6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, fp, sp}
     85c:	08002eca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, fp, sp}
     860:	08002ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, sp}
     864:	08002f16 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl, fp, sp}
	...
     870:	08002050 	stmdaeq	r0, {r4, r6, sp}
     874:	0800206e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sp}
     878:	08002070 	stmdaeq	r0, {r4, r5, r6, sp}
     87c:	080020de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sp}
     880:	080020e0 	stmdaeq	r0, {r5, r6, r7, sp}
     884:	0800217a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, sp}
     888:	0800217c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sp}
     88c:	0800223e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sp}
     890:	08002240 	stmdaeq	r0, {r6, r9, sp}
     894:	08002286 	stmdaeq	r0, {r1, r2, r7, r9, sp}
     898:	08002288 	stmdaeq	r0, {r3, r7, r9, sp}
     89c:	080022d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sp}
     8a0:	080022d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sp}
     8a4:	0800231a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sp}
     8a8:	0800231c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sp}
     8ac:	080023a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sp}
     8b0:	00000001 	andeq	r0, r0, r1
     8b4:	00000001 	andeq	r0, r0, r1
     8b8:	00000001 	andeq	r0, r0, r1
     8bc:	00000001 	andeq	r0, r0, r1
     8c0:	080023a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sp}
     8c4:	0800298e 	stmdaeq	r0, {r1, r2, r3, r7, r8, fp, sp}
     8c8:	00000001 	andeq	r0, r0, r1
     8cc:	00000001 	andeq	r0, r0, r1
     8d0:	08002990 	stmdaeq	r0, {r4, r7, r8, fp, sp}
     8d4:	08002fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, sp}
	...
     8e0:	08002fd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, fp, sp}
     8e4:	08002ff0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, fp, sp}
     8e8:	08003144 	stmdaeq	r0, {r2, r6, r8, ip, sp}
     8ec:	08003150 	stmdaeq	r0, {r4, r6, r8, ip, sp}
     8f0:	0800315e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, ip, sp}
     8f4:	08003164 	stmdaeq	r0, {r2, r5, r6, r8, ip, sp}
	...
     900:	080030e2 	stmdaeq	r0, {r1, r5, r6, r7, ip, sp}
     904:	080030e4 	stmdaeq	r0, {r2, r5, r6, r7, ip, sp}
     908:	080030e8 	stmdaeq	r0, {r3, r5, r6, r7, ip, sp}
     90c:	080030fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, ip, sp}
	...
     918:	080030fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, ip, sp}
     91c:	08003100 	stmdaeq	r0, {r8, ip, sp}
     920:	08003104 	stmdaeq	r0, {r2, r8, ip, sp}
     924:	08003138 	stmdaeq	r0, {r3, r4, r5, r8, ip, sp}
	...
     930:	00000001 	andeq	r0, r0, r1
     934:	00000001 	andeq	r0, r0, r1
     938:	00000001 	andeq	r0, r0, r1
     93c:	00000001 	andeq	r0, r0, r1
	...
     948:	00000001 	andeq	r0, r0, r1
     94c:	00000001 	andeq	r0, r0, r1
     950:	00000001 	andeq	r0, r0, r1
     954:	00000001 	andeq	r0, r0, r1
	...
     960:	00000001 	andeq	r0, r0, r1
     964:	00000001 	andeq	r0, r0, r1
     968:	00000001 	andeq	r0, r0, r1
     96c:	00000001 	andeq	r0, r0, r1
	...
     978:	00000001 	andeq	r0, r0, r1
     97c:	00000001 	andeq	r0, r0, r1
     980:	00000001 	andeq	r0, r0, r1
     984:	00000001 	andeq	r0, r0, r1
	...
     990:	00000001 	andeq	r0, r0, r1
     994:	00000001 	andeq	r0, r0, r1
     998:	00000001 	andeq	r0, r0, r1
     99c:	00000001 	andeq	r0, r0, r1
	...
     9a8:	00000001 	andeq	r0, r0, r1
     9ac:	00000001 	andeq	r0, r0, r1
     9b0:	00000001 	andeq	r0, r0, r1
     9b4:	00000001 	andeq	r0, r0, r1
	...
     9c0:	00000001 	andeq	r0, r0, r1
     9c4:	00000001 	andeq	r0, r0, r1
     9c8:	00000001 	andeq	r0, r0, r1
     9cc:	00000001 	andeq	r0, r0, r1
	...
     9d8:	00000001 	andeq	r0, r0, r1
     9dc:	00000001 	andeq	r0, r0, r1
     9e0:	00000001 	andeq	r0, r0, r1
     9e4:	00000001 	andeq	r0, r0, r1
     9e8:	00000001 	andeq	r0, r0, r1
     9ec:	00000001 	andeq	r0, r0, r1
	...
     9f8:	00000001 	andeq	r0, r0, r1
     9fc:	00000001 	andeq	r0, r0, r1
     a00:	00000001 	andeq	r0, r0, r1
     a04:	00000001 	andeq	r0, r0, r1
	...
     a10:	00000001 	andeq	r0, r0, r1
     a14:	00000001 	andeq	r0, r0, r1
     a18:	00000001 	andeq	r0, r0, r1
     a1c:	00000001 	andeq	r0, r0, r1
     a20:	00000001 	andeq	r0, r0, r1
     a24:	00000001 	andeq	r0, r0, r1
	...
     a30:	00000001 	andeq	r0, r0, r1
     a34:	00000001 	andeq	r0, r0, r1
     a38:	00000001 	andeq	r0, r0, r1
     a3c:	00000001 	andeq	r0, r0, r1
	...
     a48:	00000001 	andeq	r0, r0, r1
     a4c:	00000001 	andeq	r0, r0, r1
     a50:	08002fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, sp}
     a54:	08003164 	stmdaeq	r0, {r2, r5, r6, r8, ip, sp}
     a58:	00000001 	andeq	r0, r0, r1
     a5c:	00000001 	andeq	r0, r0, r1
     a60:	00000001 	andeq	r0, r0, r1
     a64:	00000001 	andeq	r0, r0, r1
     a68:	00000001 	andeq	r0, r0, r1
     a6c:	00000001 	andeq	r0, r0, r1
     a70:	00000001 	andeq	r0, r0, r1
     a74:	00000001 	andeq	r0, r0, r1
     a78:	00000001 	andeq	r0, r0, r1
     a7c:	00000001 	andeq	r0, r0, r1
     a80:	00000001 	andeq	r0, r0, r1
     a84:	00000001 	andeq	r0, r0, r1
     a88:	00000001 	andeq	r0, r0, r1
     a8c:	00000001 	andeq	r0, r0, r1
	...
     a98:	00000001 	andeq	r0, r0, r1
     a9c:	00000001 	andeq	r0, r0, r1
     aa0:	00000001 	andeq	r0, r0, r1
     aa4:	00000001 	andeq	r0, r0, r1
     aa8:	00000001 	andeq	r0, r0, r1
     aac:	00000001 	andeq	r0, r0, r1
	...
     ab8:	00000001 	andeq	r0, r0, r1
     abc:	00000001 	andeq	r0, r0, r1
     ac0:	00000001 	andeq	r0, r0, r1
     ac4:	00000001 	andeq	r0, r0, r1
	...
     ad0:	0800512c 	stmdaeq	r0, {r2, r3, r5, r8, ip, lr}
     ad4:	08005184 	stmdaeq	r0, {r2, r7, r8, ip, lr}
     ad8:	08005188 	stmdaeq	r0, {r3, r7, r8, ip, lr}
     adc:	080051ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, ip, lr}
	...
     ae8:	080051d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, ip, lr}
     aec:	080051da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, ip, lr}
     af0:	080051de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, ip, lr}
     af4:	080051e0 	stmdaeq	r0, {r5, r6, r7, r8, ip, lr}
     af8:	080051f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip, lr}
     afc:	080051f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, ip, lr}
     b00:	08005216 	stmdaeq	r0, {r1, r2, r4, r9, ip, lr}
     b04:	0800523e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, ip, lr}
     b08:	08005312 	stmdaeq	r0, {r1, r4, r8, r9, ip, lr}
     b0c:	0800536a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, ip, lr}
     b10:	080053b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, ip, lr}
     b14:	080053b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, ip, lr}
	...
     b20:	0800523e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, ip, lr}
     b24:	08005278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, lr}
     b28:	0800536a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, ip, lr}
     b2c:	080053b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, ip, lr}
     b30:	080053b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, ip, lr}
     b34:	080053c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, lr}
	...
     b40:	08003164 	stmdaeq	r0, {r2, r5, r6, r8, ip, sp}
     b44:	080031bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, ip, sp}
     b48:	080031bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, ip, sp}
     b4c:	08005120 	stmdaeq	r0, {r5, r8, ip, lr}
     b50:	08005120 	stmdaeq	r0, {r5, r8, ip, lr}
     b54:	080051ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, ip, lr}
     b58:	080051b0 	stmdaeq	r0, {r4, r5, r7, r8, ip, lr}
     b5c:	080053c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, lr}
	...
     b68:	080053d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, ip, lr}
     b6c:	0800547c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, ip, lr}
     b70:	0800547e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, ip, lr}
     b74:	08005482 	stmdaeq	r0, {r1, r7, sl, ip, lr}
	...
     b80:	0800555c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, ip, lr}
     b84:	08005566 	stmdaeq	r0, {r1, r2, r5, r6, r8, sl, ip, lr}
     b88:	08005570 	stmdaeq	r0, {r4, r5, r6, r8, sl, ip, lr}
     b8c:	08005574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, ip, lr}
     b90:	08005578 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, ip, lr}
     b94:	0800557c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, ip, lr}
     b98:	08005580 	stmdaeq	r0, {r7, r8, sl, ip, lr}
     b9c:	08005582 	stmdaeq	r0, {r1, r7, r8, sl, ip, lr}
	...
     ba8:	08005566 	stmdaeq	r0, {r1, r2, r5, r6, r8, sl, ip, lr}
     bac:	08005570 	stmdaeq	r0, {r4, r5, r6, r8, sl, ip, lr}
     bb0:	08005582 	stmdaeq	r0, {r1, r7, r8, sl, ip, lr}
     bb4:	08005586 	stmdaeq	r0, {r1, r2, r7, r8, sl, ip, lr}
     bb8:	0800558a 	stmdaeq	r0, {r1, r3, r7, r8, sl, ip, lr}
     bbc:	0800558e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sl, ip, lr}
     bc0:	08005592 	stmdaeq	r0, {r1, r4, r7, r8, sl, ip, lr}
     bc4:	08005594 	stmdaeq	r0, {r2, r4, r7, r8, sl, ip, lr}
	...
     bd0:	08005598 	stmdaeq	r0, {r3, r4, r7, r8, sl, ip, lr}
     bd4:	0800559c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip, lr}
     bd8:	080055a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, sl, ip, lr}
     bdc:	080055ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr}
     be0:	080055b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, sl, ip, lr}
     be4:	080055b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, ip, lr}
     be8:	080055bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, ip, lr}
     bec:	080055c0 	stmdaeq	r0, {r6, r7, r8, sl, ip, lr}
     bf0:	080055ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl, ip, lr}
     bf4:	080055ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, ip, lr}
     bf8:	080055d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, ip, lr}
     bfc:	080055d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, ip, lr}
	...
     c08:	0800559c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip, lr}
     c0c:	0800559e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, sl, ip, lr}
     c10:	080055a2 	stmdaeq	r0, {r1, r5, r7, r8, sl, ip, lr}
     c14:	080055a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, sl, ip, lr}
     c18:	080055b0 	stmdaeq	r0, {r4, r5, r7, r8, sl, ip, lr}
     c1c:	080055b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, sl, ip, lr}
     c20:	080055c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, ip, lr}
     c24:	080055c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sl, ip, lr}
     c28:	080055d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, ip, lr}
     c2c:	080055d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, ip, lr}
     c30:	080055e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, ip, lr}
     c34:	080055e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sl, ip, lr}
	...
     c40:	080055b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, ip, lr}
     c44:	080055b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, ip, lr}
     c48:	080055c0 	stmdaeq	r0, {r6, r7, r8, sl, ip, lr}
     c4c:	080055c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, ip, lr}
     c50:	080055d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, ip, lr}
     c54:	080055d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, ip, lr}
     c58:	080055d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, ip, lr}
     c5c:	080055da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, ip, lr}
     c60:	080055e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sl, ip, lr}
     c64:	080055ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, ip, lr}
	...
     c70:	08005600 	stmdaeq	r0, {r9, sl, ip, lr}
     c74:	08005608 	stmdaeq	r0, {r3, r9, sl, ip, lr}
     c78:	0800566c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, ip, lr}
     c7c:	08005674 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, ip, lr}
	...
     c88:	08005608 	stmdaeq	r0, {r3, r9, sl, ip, lr}
     c8c:	08005612 	stmdaeq	r0, {r1, r4, r9, sl, ip, lr}
     c90:	080056c6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, ip, lr}
     c94:	080056ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, ip, lr}
     c98:	080056ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, ip, lr}
     c9c:	080056d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, ip, lr}
     ca0:	080056d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip, lr}
     ca4:	080056da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl, ip, lr}
	...
     cb0:	08005612 	stmdaeq	r0, {r1, r4, r9, sl, ip, lr}
     cb4:	0800561c 	stmdaeq	r0, {r2, r3, r4, r9, sl, ip, lr}
     cb8:	080056ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, ip, lr}
     cbc:	080056f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, ip, lr}
     cc0:	080056f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, ip, lr}
     cc4:	080056f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, ip, lr}
     cc8:	0800570a 	stmdaeq	r0, {r1, r3, r8, r9, sl, ip, lr}
     ccc:	0800570c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip, lr}
	...
     cd8:	08005674 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, ip, lr}
     cdc:	0800567c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip, lr}
     ce0:	0800567e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, ip, lr}
     ce4:	08005682 	stmdaeq	r0, {r1, r7, r9, sl, ip, lr}
     ce8:	08005686 	stmdaeq	r0, {r1, r2, r7, r9, sl, ip, lr}
     cec:	0800568a 	stmdaeq	r0, {r1, r3, r7, r9, sl, ip, lr}
	...
     cf8:	080056de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, ip, lr}
     cfc:	080056e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, ip, lr}
     d00:	080056e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, ip, lr}
     d04:	080056ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, ip, lr}
     d08:	080056f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, ip, lr}
     d0c:	080056fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, ip, lr}
     d10:	08005702 	stmdaeq	r0, {r1, r8, r9, sl, ip, lr}
     d14:	08005706 	stmdaeq	r0, {r1, r2, r8, r9, sl, ip, lr}
     d18:	0800570c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip, lr}
     d1c:	08005710 	stmdaeq	r0, {r4, r8, r9, sl, ip, lr}
     d20:	08005712 	stmdaeq	r0, {r1, r4, r8, r9, sl, ip, lr}
     d24:	08005718 	stmdaeq	r0, {r3, r4, r8, r9, sl, ip, lr}
	...
     d30:	08005880 	stmdaeq	r0, {r7, fp, ip, lr}
     d34:	0800588a 	stmdaeq	r0, {r1, r3, r7, fp, ip, lr}
     d38:	0800588e 	stmdaeq	r0, {r1, r2, r3, r7, fp, ip, lr}
     d3c:	080058ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, fp, ip, lr}
	...
     d48:	0800593e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
     d4c:	08005950 	stmdaeq	r0, {r4, r6, r8, fp, ip, lr}
     d50:	08005952 	stmdaeq	r0, {r1, r4, r6, r8, fp, ip, lr}
     d54:	080059b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp, ip, lr}
     d58:	080059ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, fp, ip, lr}
     d5c:	080059be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, fp, ip, lr}
	...
     d68:	080059fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, fp, ip, lr}
     d6c:	08005a6a 	stmdaeq	r0, {r1, r3, r5, r6, r9, fp, ip, lr}
     d70:	08005a6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, fp, ip, lr}
     d74:	08005a90 	stmdaeq	r0, {r4, r7, r9, fp, ip, lr}
     d78:	08005a94 	stmdaeq	r0, {r2, r4, r7, r9, fp, ip, lr}
     d7c:	08005a96 	stmdaeq	r0, {r1, r2, r4, r7, r9, fp, ip, lr}
     d80:	08005aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip, lr}
     d84:	08005aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, ip, lr}
     d88:	08005ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp, ip, lr}
     d8c:	08005abc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, fp, ip, lr}
	...
     d98:	08005ae2 	stmdaeq	r0, {r1, r5, r6, r7, r9, fp, ip, lr}
     d9c:	08005b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip, lr}
     da0:	08005b66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, fp, ip, lr}
     da4:	08005b6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, fp, ip, lr}
     da8:	08005b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, ip, lr}
     dac:	08005b70 	stmdaeq	r0, {r4, r5, r6, r8, r9, fp, ip, lr}
	...
     db8:	080053c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, lr}
     dbc:	0800585c 	stmdaeq	r0, {r2, r3, r4, r6, fp, ip, lr}
     dc0:	0800585c 	stmdaeq	r0, {r2, r3, r4, r6, fp, ip, lr}
     dc4:	080058e4 	stmdaeq	r0, {r2, r5, r6, r7, fp, ip, lr}
     dc8:	080058e4 	stmdaeq	r0, {r2, r5, r6, r7, fp, ip, lr}
     dcc:	08005b7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, fp, ip, lr}
	...
     dd8:	08005b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, ip, lr}
     ddc:	08005d20 	stmdaeq	r0, {r5, r8, sl, fp, ip, lr}
	...
     de8:	00000001 	andeq	r0, r0, r1
     dec:	00000001 	andeq	r0, r0, r1
     df0:	00000001 	andeq	r0, r0, r1
     df4:	00000001 	andeq	r0, r0, r1
	...
     e00:	08005e1a 	stmdaeq	r0, {r1, r3, r4, r9, sl, fp, ip, lr}
     e04:	08005e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, ip, lr}
     e08:	08005e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip, lr}
     e0c:	08005e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip, lr}
	...
     e18:	00000001 	andeq	r0, r0, r1
     e1c:	00000001 	andeq	r0, r0, r1
     e20:	00000001 	andeq	r0, r0, r1
     e24:	00000001 	andeq	r0, r0, r1
	...
     e30:	00000001 	andeq	r0, r0, r1
     e34:	00000001 	andeq	r0, r0, r1
     e38:	00000001 	andeq	r0, r0, r1
     e3c:	00000001 	andeq	r0, r0, r1
	...
     e48:	00000001 	andeq	r0, r0, r1
     e4c:	00000001 	andeq	r0, r0, r1
     e50:	00000001 	andeq	r0, r0, r1
     e54:	00000001 	andeq	r0, r0, r1
     e58:	00000001 	andeq	r0, r0, r1
     e5c:	00000001 	andeq	r0, r0, r1
	...
     e68:	00000001 	andeq	r0, r0, r1
     e6c:	00000001 	andeq	r0, r0, r1
     e70:	00000001 	andeq	r0, r0, r1
     e74:	00000001 	andeq	r0, r0, r1
	...
     e80:	00000001 	andeq	r0, r0, r1
     e84:	00000001 	andeq	r0, r0, r1
     e88:	00000001 	andeq	r0, r0, r1
     e8c:	00000001 	andeq	r0, r0, r1
	...
     e98:	00000001 	andeq	r0, r0, r1
     e9c:	00000001 	andeq	r0, r0, r1
     ea0:	00000001 	andeq	r0, r0, r1
     ea4:	00000001 	andeq	r0, r0, r1
     ea8:	00000001 	andeq	r0, r0, r1
     eac:	00000001 	andeq	r0, r0, r1
     eb0:	00000001 	andeq	r0, r0, r1
     eb4:	00000001 	andeq	r0, r0, r1
     eb8:	00000001 	andeq	r0, r0, r1
     ebc:	00000001 	andeq	r0, r0, r1
     ec0:	00000001 	andeq	r0, r0, r1
     ec4:	00000001 	andeq	r0, r0, r1
     ec8:	00000001 	andeq	r0, r0, r1
     ecc:	00000001 	andeq	r0, r0, r1
     ed0:	00000001 	andeq	r0, r0, r1
     ed4:	00000001 	andeq	r0, r0, r1
     ed8:	00000001 	andeq	r0, r0, r1
     edc:	00000001 	andeq	r0, r0, r1
     ee0:	00000001 	andeq	r0, r0, r1
     ee4:	00000001 	andeq	r0, r0, r1
     ee8:	00000001 	andeq	r0, r0, r1
     eec:	00000001 	andeq	r0, r0, r1
     ef0:	00000001 	andeq	r0, r0, r1
     ef4:	00000001 	andeq	r0, r0, r1
     ef8:	00000001 	andeq	r0, r0, r1
     efc:	00000001 	andeq	r0, r0, r1
     f00:	08005d20 	stmdaeq	r0, {r5, r8, sl, fp, ip, lr}
     f04:	08005d4a 	stmdaeq	r0, {r1, r3, r6, r8, sl, fp, ip, lr}
     f08:	00000001 	andeq	r0, r0, r1
     f0c:	00000001 	andeq	r0, r0, r1
     f10:	00000001 	andeq	r0, r0, r1
     f14:	00000001 	andeq	r0, r0, r1
     f18:	00000001 	andeq	r0, r0, r1
     f1c:	00000001 	andeq	r0, r0, r1
     f20:	00000001 	andeq	r0, r0, r1
     f24:	00000001 	andeq	r0, r0, r1
     f28:	00000001 	andeq	r0, r0, r1
     f2c:	00000001 	andeq	r0, r0, r1
     f30:	08005d4a 	stmdaeq	r0, {r1, r3, r6, r8, sl, fp, ip, lr}
     f34:	08005d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip, lr}
     f38:	00000001 	andeq	r0, r0, r1
     f3c:	00000001 	andeq	r0, r0, r1
     f40:	00000001 	andeq	r0, r0, r1
     f44:	00000001 	andeq	r0, r0, r1
     f48:	08005d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip, lr}
     f4c:	08005d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, ip, lr}
     f50:	00000001 	andeq	r0, r0, r1
     f54:	00000001 	andeq	r0, r0, r1
     f58:	00000001 	andeq	r0, r0, r1
     f5c:	00000001 	andeq	r0, r0, r1
     f60:	00000001 	andeq	r0, r0, r1
     f64:	00000001 	andeq	r0, r0, r1
     f68:	00000001 	andeq	r0, r0, r1
     f6c:	00000001 	andeq	r0, r0, r1
     f70:	00000001 	andeq	r0, r0, r1
     f74:	00000001 	andeq	r0, r0, r1
     f78:	00000001 	andeq	r0, r0, r1
     f7c:	00000001 	andeq	r0, r0, r1
     f80:	00000001 	andeq	r0, r0, r1
     f84:	00000001 	andeq	r0, r0, r1
     f88:	00000001 	andeq	r0, r0, r1
     f8c:	00000001 	andeq	r0, r0, r1
     f90:	00000001 	andeq	r0, r0, r1
     f94:	00000001 	andeq	r0, r0, r1
     f98:	08005d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, ip, lr}
     f9c:	08005da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp, ip, lr}
     fa0:	08005da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp, ip, lr}
     fa4:	08005dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp, ip, lr}
     fa8:	00000001 	andeq	r0, r0, r1
     fac:	00000001 	andeq	r0, r0, r1
     fb0:	00000001 	andeq	r0, r0, r1
     fb4:	00000001 	andeq	r0, r0, r1
     fb8:	00000001 	andeq	r0, r0, r1
     fbc:	00000001 	andeq	r0, r0, r1
     fc0:	00000001 	andeq	r0, r0, r1
     fc4:	00000001 	andeq	r0, r0, r1
     fc8:	08005dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp, ip, lr}
     fcc:	08005de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, ip, lr}
     fd0:	08005de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, ip, lr}
     fd4:	08005dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr}
     fd8:	08005dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr}
     fdc:	08005e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, ip, lr}
     fe0:	00000001 	andeq	r0, r0, r1
     fe4:	00000001 	andeq	r0, r0, r1
     fe8:	08005e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, ip, lr}
     fec:	08005e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip, lr}
     ff0:	00000001 	andeq	r0, r0, r1
     ff4:	00000001 	andeq	r0, r0, r1
     ff8:	00000001 	andeq	r0, r0, r1
     ffc:	00000001 	andeq	r0, r0, r1
    1000:	00000001 	andeq	r0, r0, r1
    1004:	00000001 	andeq	r0, r0, r1
    1008:	00000001 	andeq	r0, r0, r1
    100c:	00000001 	andeq	r0, r0, r1
    1010:	00000001 	andeq	r0, r0, r1
    1014:	00000001 	andeq	r0, r0, r1
    1018:	00000001 	andeq	r0, r0, r1
    101c:	00000001 	andeq	r0, r0, r1
    1020:	00000001 	andeq	r0, r0, r1
    1024:	00000001 	andeq	r0, r0, r1
    1028:	00000001 	andeq	r0, r0, r1
    102c:	00000001 	andeq	r0, r0, r1
    1030:	00000001 	andeq	r0, r0, r1
    1034:	00000001 	andeq	r0, r0, r1
    1038:	00000001 	andeq	r0, r0, r1
    103c:	00000001 	andeq	r0, r0, r1
    1040:	00000001 	andeq	r0, r0, r1
    1044:	00000001 	andeq	r0, r0, r1
    1048:	00000001 	andeq	r0, r0, r1
    104c:	00000001 	andeq	r0, r0, r1
    1050:	00000001 	andeq	r0, r0, r1
    1054:	00000001 	andeq	r0, r0, r1
    1058:	00000001 	andeq	r0, r0, r1
    105c:	00000001 	andeq	r0, r0, r1
    1060:	00000001 	andeq	r0, r0, r1
    1064:	00000001 	andeq	r0, r0, r1
    1068:	00000001 	andeq	r0, r0, r1
    106c:	00000001 	andeq	r0, r0, r1
	...
    1078:	08005e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip, lr}
    107c:	08005fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, ip, lr}
    1080:	00000001 	andeq	r0, r0, r1
    1084:	00000001 	andeq	r0, r0, r1
	...
    1090:	08005fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, ip, lr}
    1094:	08005fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	...
    10a0:	080062ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sp, lr}
    10a4:	080062f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sp, lr}
    10a8:	080062f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sp, lr}
    10ac:	080062fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sp, lr}
    10b0:	080062fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sp, lr}
    10b4:	0800630c 	stmdaeq	r0, {r2, r3, r8, r9, sp, lr}
	...
    10c0:	080064c2 	stmdaeq	r0, {r1, r6, r7, sl, sp, lr}
    10c4:	0800666c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, sp, lr}
    10c8:	08006674 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, sp, lr}
    10cc:	08006694 	stmdaeq	r0, {r2, r4, r7, r9, sl, sp, lr}
	...
    10d8:	08005fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    10dc:	08006008 	stmdaeq	r0, {r3, sp, lr}
    10e0:	08006008 	stmdaeq	r0, {r3, sp, lr}
    10e4:	0800602c 	stmdaeq	r0, {r2, r3, r5, sp, lr}
    10e8:	0800602c 	stmdaeq	r0, {r2, r3, r5, sp, lr}
    10ec:	080060bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sp, lr}
    10f0:	080060bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sp, lr}
    10f4:	08006164 	stmdaeq	r0, {r2, r5, r6, r8, sp, lr}
    10f8:	08006164 	stmdaeq	r0, {r2, r5, r6, r8, sp, lr}
    10fc:	0800619c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sp, lr}
    1100:	0800619c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sp, lr}
    1104:	080061e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sp, lr}
    1108:	080061e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sp, lr}
    110c:	080062b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp, lr}
    1110:	080062b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp, lr}
    1114:	08006338 	stmdaeq	r0, {r3, r4, r5, r8, r9, sp, lr}
    1118:	08006338 	stmdaeq	r0, {r3, r4, r5, r8, r9, sp, lr}
    111c:	0800635c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sp, lr}
    1120:	0800635c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sp, lr}
    1124:	08006378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sp, lr}
    1128:	08006378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sp, lr}
    112c:	080063b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sp, lr}
    1130:	080063b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sp, lr}
    1134:	08006694 	stmdaeq	r0, {r2, r4, r7, r9, sl, sp, lr}
    1138:	08006694 	stmdaeq	r0, {r2, r4, r7, r9, sl, sp, lr}
    113c:	0800675c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, sp, lr}
    1140:	0800675c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, sp, lr}
    1144:	08006794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp, lr}
    1148:	08006794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp, lr}
    114c:	080067f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp, lr}
    1150:	00000001 	andeq	r0, r0, r1
    1154:	00000001 	andeq	r0, r0, r1
	...
    1160:	080067f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp, lr}
    1164:	08006820 	stmdaeq	r0, {r5, fp, sp, lr}
    1168:	08006820 	stmdaeq	r0, {r5, fp, sp, lr}
    116c:	08006844 	stmdaeq	r0, {r2, r6, fp, sp, lr}
	...
