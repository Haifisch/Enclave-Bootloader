
build/enclave_stage1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000f0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076f8  080000f0  080000f0  000080f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000470  20000000  080077e8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000130  20000470  08007c58  00010470  2**2
                  ALLOC
  4 .bss.bIntPackSOF 00000001  200005a0  08007d88  00010470  2**0
                  ALLOC
  5 .bss.bDeviceState 00000004  200005a4  08007d8c  00010470  2**2
                  ALLOC
  6 .bss.uploadBlockLen 00000002  200005a8  08007d90  00010470  2**1
                  ALLOC
  7 .bss.recvBuffer 00000800  200005ac  08007d94  00010470  2**2
                  ALLOC
  8 .bss.thisBlockLen 00000002  20000dac  08008594  00010470  2**1
                  ALLOC
  9 .bss.userFirmwareLen 00000004  20000db0  08008598  00010470  2**2
                  ALLOC
 10 .bss.userUploadType 00000001  20000db4  0800859c  00010470  2**0
                  ALLOC
 11 .bss.dfuAppStatus 00000008  20000db8  080085a0  00010470  2**2
                  ALLOC
 12 .bss.dfuBusy  00000001  20000dc0  080085a8  00010470  2**0
                  ALLOC
 13 .bss.Data_Mul_MaxPacketSize 00000001  20000dc1  080085a9  00010470  2**0
                  ALLOC
 14 .bss.__malloc_sbrk_start 00000004  20000dc4  080085ac  00010470  2**2
                  ALLOC
 15 .bss.__malloc_free_list 00000004  20000dc8  080085b0  00010470  2**2
                  ALLOC
 16 .bss.heap_end.4246 00000004  20000dcc  080085b4  00010470  2**2
                  ALLOC
 17 ._usrstack    00000100  20000dd0  080085b8  00010470  2**0
                  ALLOC
 18 .comment      00000070  00000000  00000000  00010470  2**0
                  CONTENTS, READONLY
 19 .ARM.attributes 0000002f  00000000  00000000  000104e0  2**0
                  CONTENTS, READONLY
 20 .debug_aranges 00000830  00000000  00000000  00010510  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_info   0000b08d  00000000  00000000  00010d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_abbrev 000028f7  00000000  00000000  0001bdcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   00003c36  00000000  00000000  0001e6c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_frame  0000184c  00000000  00000000  000222fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0000221d  00000000  00000000  00023b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_loc    00009f58  00000000  00000000  00025d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_ranges 00001128  00000000  00000000  0002fcc0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20005000 	andcs	r5, r0, r0
 8000004:	08000b4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, fp}
 8000008:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800000c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000010:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000014:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000018:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
	...
 800002c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000030:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800003c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000040:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000044:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000048:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800004c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000050:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000054:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000058:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800005c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000060:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000064:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000068:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800006c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000070:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000074:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000078:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800007c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000080:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000084:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000088:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800008c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000090:	08000fa9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, sl, fp}
 8000094:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000098:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800009c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000a0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000a4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000a8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000ac:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000b0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000b4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000b8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000bc:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000c0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000c4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000c8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000cc:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000d0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000d4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000d8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000dc:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000e0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000e4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000e8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000ec:	f108f85f 			; <UNDEFINED> instruction: 0xf108f85f

Disassembly of section .text:

080000f0 <GPIO_DeInit>:
 80000f0:	b508      	push	{r3, lr}
 80000f2:	4b2f      	ldr	r3, [pc, #188]	; (80001b0 <GPIO_DeInit+0xc0>)
 80000f4:	4298      	cmp	r0, r3
 80000f6:	d01e      	beq.n	8000136 <GPIO_DeInit+0x46>
 80000f8:	4b2e      	ldr	r3, [pc, #184]	; (80001b4 <GPIO_DeInit+0xc4>)
 80000fa:	4298      	cmp	r0, r3
 80000fc:	d025      	beq.n	800014a <GPIO_DeInit+0x5a>
 80000fe:	4b2e      	ldr	r3, [pc, #184]	; (80001b8 <GPIO_DeInit+0xc8>)
 8000100:	4298      	cmp	r0, r3
 8000102:	d02c      	beq.n	800015e <GPIO_DeInit+0x6e>
 8000104:	4b2d      	ldr	r3, [pc, #180]	; (80001bc <GPIO_DeInit+0xcc>)
 8000106:	4298      	cmp	r0, r3
 8000108:	d033      	beq.n	8000172 <GPIO_DeInit+0x82>
 800010a:	4b2d      	ldr	r3, [pc, #180]	; (80001c0 <GPIO_DeInit+0xd0>)
 800010c:	4298      	cmp	r0, r3
 800010e:	d03a      	beq.n	8000186 <GPIO_DeInit+0x96>
 8000110:	4b2c      	ldr	r3, [pc, #176]	; (80001c4 <GPIO_DeInit+0xd4>)
 8000112:	4298      	cmp	r0, r3
 8000114:	d041      	beq.n	800019a <GPIO_DeInit+0xaa>
 8000116:	4b2c      	ldr	r3, [pc, #176]	; (80001c8 <GPIO_DeInit+0xd8>)
 8000118:	4298      	cmp	r0, r3
 800011a:	d000      	beq.n	800011e <GPIO_DeInit+0x2e>
 800011c:	bd08      	pop	{r3, pc}
 800011e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000122:	2101      	movs	r1, #1
 8000124:	f000 faac 	bl	8000680 <RCC_APB2PeriphResetCmd>
 8000128:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800012c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000130:	2100      	movs	r1, #0
 8000132:	f000 baa5 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 8000136:	2004      	movs	r0, #4
 8000138:	2101      	movs	r1, #1
 800013a:	f000 faa1 	bl	8000680 <RCC_APB2PeriphResetCmd>
 800013e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000142:	2004      	movs	r0, #4
 8000144:	2100      	movs	r1, #0
 8000146:	f000 ba9b 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 800014a:	2008      	movs	r0, #8
 800014c:	2101      	movs	r1, #1
 800014e:	f000 fa97 	bl	8000680 <RCC_APB2PeriphResetCmd>
 8000152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000156:	2008      	movs	r0, #8
 8000158:	2100      	movs	r1, #0
 800015a:	f000 ba91 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 800015e:	2010      	movs	r0, #16
 8000160:	2101      	movs	r1, #1
 8000162:	f000 fa8d 	bl	8000680 <RCC_APB2PeriphResetCmd>
 8000166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800016a:	2010      	movs	r0, #16
 800016c:	2100      	movs	r1, #0
 800016e:	f000 ba87 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 8000172:	2020      	movs	r0, #32
 8000174:	2101      	movs	r1, #1
 8000176:	f000 fa83 	bl	8000680 <RCC_APB2PeriphResetCmd>
 800017a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800017e:	2020      	movs	r0, #32
 8000180:	2100      	movs	r1, #0
 8000182:	f000 ba7d 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 8000186:	2040      	movs	r0, #64	; 0x40
 8000188:	2101      	movs	r1, #1
 800018a:	f000 fa79 	bl	8000680 <RCC_APB2PeriphResetCmd>
 800018e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000192:	2040      	movs	r0, #64	; 0x40
 8000194:	2100      	movs	r1, #0
 8000196:	f000 ba73 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 800019a:	2080      	movs	r0, #128	; 0x80
 800019c:	2101      	movs	r1, #1
 800019e:	f000 fa6f 	bl	8000680 <RCC_APB2PeriphResetCmd>
 80001a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80001a6:	2080      	movs	r0, #128	; 0x80
 80001a8:	2100      	movs	r1, #0
 80001aa:	f000 ba69 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 80001ae:	bf00      	nop
 80001b0:	40010800 	andmi	r0, r1, r0, lsl #16
 80001b4:	40010c00 	andmi	r0, r1, r0, lsl #24
 80001b8:	40011000 	andmi	r1, r1, r0
 80001bc:	40011400 	andmi	r1, r1, r0, lsl #8
 80001c0:	40011800 	andmi	r1, r1, r0, lsl #16
 80001c4:	40011c00 	andmi	r1, r1, r0, lsl #24
 80001c8:	40012000 	andmi	r2, r1, r0

080001cc <GPIO_AFIODeInit>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	2001      	movs	r0, #1
 80001d0:	4601      	mov	r1, r0
 80001d2:	f000 fa55 	bl	8000680 <RCC_APB2PeriphResetCmd>
 80001d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80001da:	2001      	movs	r0, #1
 80001dc:	2100      	movs	r1, #0
 80001de:	f000 ba4f 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 80001e2:	bf00      	nop

080001e4 <GPIO_Init>:
 80001e4:	78cb      	ldrb	r3, [r1, #3]
 80001e6:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ea:	f003 060f 	and.w	r6, r3, #15
 80001ee:	06db      	lsls	r3, r3, #27
 80001f0:	bf48      	it	mi
 80001f2:	788b      	ldrbmi	r3, [r1, #2]
 80001f4:	880a      	ldrh	r2, [r1, #0]
 80001f6:	bf48      	it	mi
 80001f8:	431e      	orrmi	r6, r3
 80001fa:	f012 0fff 	tst.w	r2, #255	; 0xff
 80001fe:	d026      	beq.n	800024e <GPIO_Init+0x6a>
 8000200:	6807      	ldr	r7, [r0, #0]
 8000202:	2300      	movs	r3, #0
 8000204:	2501      	movs	r5, #1
 8000206:	f04f 080f 	mov.w	r8, #15
 800020a:	e003      	b.n	8000214 <GPIO_Init+0x30>
 800020c:	3301      	adds	r3, #1
 800020e:	2b08      	cmp	r3, #8
 8000210:	d01b      	beq.n	800024a <GPIO_Init+0x66>
 8000212:	880a      	ldrh	r2, [r1, #0]
 8000214:	fa05 f403 	lsl.w	r4, r5, r3
 8000218:	4022      	ands	r2, r4
 800021a:	42a2      	cmp	r2, r4
 800021c:	d1f6      	bne.n	800020c <GPIO_Init+0x28>
 800021e:	009c      	lsls	r4, r3, #2
 8000220:	fa08 f904 	lsl.w	r9, r8, r4
 8000224:	fa06 f404 	lsl.w	r4, r6, r4
 8000228:	f891 c003 	ldrb.w	ip, [r1, #3]
 800022c:	ea27 0709 	bic.w	r7, r7, r9
 8000230:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8000234:	ea47 0704 	orr.w	r7, r7, r4
 8000238:	d034      	beq.n	80002a4 <GPIO_Init+0xc0>
 800023a:	f1bc 0f48 	cmp.w	ip, #72	; 0x48
 800023e:	f103 0301 	add.w	r3, r3, #1
 8000242:	bf08      	it	eq
 8000244:	6102      	streq	r2, [r0, #16]
 8000246:	2b08      	cmp	r3, #8
 8000248:	d1e3      	bne.n	8000212 <GPIO_Init+0x2e>
 800024a:	6007      	str	r7, [r0, #0]
 800024c:	880a      	ldrh	r2, [r1, #0]
 800024e:	2aff      	cmp	r2, #255	; 0xff
 8000250:	d925      	bls.n	800029e <GPIO_Init+0xba>
 8000252:	6847      	ldr	r7, [r0, #4]
 8000254:	2300      	movs	r3, #0
 8000256:	2501      	movs	r5, #1
 8000258:	f04f 0c0f 	mov.w	ip, #15
 800025c:	e003      	b.n	8000266 <GPIO_Init+0x82>
 800025e:	3301      	adds	r3, #1
 8000260:	2b08      	cmp	r3, #8
 8000262:	d01b      	beq.n	800029c <GPIO_Init+0xb8>
 8000264:	880a      	ldrh	r2, [r1, #0]
 8000266:	f103 0408 	add.w	r4, r3, #8
 800026a:	fa05 f404 	lsl.w	r4, r5, r4
 800026e:	4022      	ands	r2, r4
 8000270:	42a2      	cmp	r2, r4
 8000272:	d1f4      	bne.n	800025e <GPIO_Init+0x7a>
 8000274:	009c      	lsls	r4, r3, #2
 8000276:	fa0c f904 	lsl.w	r9, ip, r4
 800027a:	fa06 f804 	lsl.w	r8, r6, r4
 800027e:	78cc      	ldrb	r4, [r1, #3]
 8000280:	3301      	adds	r3, #1
 8000282:	2c28      	cmp	r4, #40	; 0x28
 8000284:	bf04      	itt	eq
 8000286:	6142      	streq	r2, [r0, #20]
 8000288:	78cc      	ldrbeq	r4, [r1, #3]
 800028a:	ea27 0709 	bic.w	r7, r7, r9
 800028e:	2c48      	cmp	r4, #72	; 0x48
 8000290:	bf08      	it	eq
 8000292:	6102      	streq	r2, [r0, #16]
 8000294:	2b08      	cmp	r3, #8
 8000296:	ea47 0708 	orr.w	r7, r7, r8
 800029a:	d1e3      	bne.n	8000264 <GPIO_Init+0x80>
 800029c:	6047      	str	r7, [r0, #4]
 800029e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002a2:	4770      	bx	lr
 80002a4:	6142      	str	r2, [r0, #20]
 80002a6:	e7b1      	b.n	800020c <GPIO_Init+0x28>

080002a8 <GPIO_StructInit>:
 80002a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80002ac:	2202      	movs	r2, #2
 80002ae:	2304      	movs	r3, #4
 80002b0:	8001      	strh	r1, [r0, #0]
 80002b2:	7082      	strb	r2, [r0, #2]
 80002b4:	70c3      	strb	r3, [r0, #3]
 80002b6:	4770      	bx	lr

080002b8 <GPIO_ReadInputDataBit>:
 80002b8:	6883      	ldr	r3, [r0, #8]
 80002ba:	4219      	tst	r1, r3
 80002bc:	bf0c      	ite	eq
 80002be:	2000      	moveq	r0, #0
 80002c0:	2001      	movne	r0, #1
 80002c2:	4770      	bx	lr

080002c4 <GPIO_ReadInputData>:
 80002c4:	6880      	ldr	r0, [r0, #8]
 80002c6:	b280      	uxth	r0, r0
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop

080002cc <GPIO_ReadOutputDataBit>:
 80002cc:	68c3      	ldr	r3, [r0, #12]
 80002ce:	4219      	tst	r1, r3
 80002d0:	bf0c      	ite	eq
 80002d2:	2000      	moveq	r0, #0
 80002d4:	2001      	movne	r0, #1
 80002d6:	4770      	bx	lr

080002d8 <GPIO_ReadOutputData>:
 80002d8:	68c0      	ldr	r0, [r0, #12]
 80002da:	b280      	uxth	r0, r0
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <GPIO_SetBits>:
 80002e0:	6101      	str	r1, [r0, #16]
 80002e2:	4770      	bx	lr

080002e4 <GPIO_ResetBits>:
 80002e4:	6141      	str	r1, [r0, #20]
 80002e6:	4770      	bx	lr

080002e8 <GPIO_WriteBit>:
 80002e8:	b90a      	cbnz	r2, 80002ee <GPIO_WriteBit+0x6>
 80002ea:	6141      	str	r1, [r0, #20]
 80002ec:	4770      	bx	lr
 80002ee:	6101      	str	r1, [r0, #16]
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop

080002f4 <GPIO_Write>:
 80002f4:	60c1      	str	r1, [r0, #12]
 80002f6:	4770      	bx	lr

080002f8 <GPIO_PinLockConfig>:
 80002f8:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
 80002fc:	6183      	str	r3, [r0, #24]
 80002fe:	6181      	str	r1, [r0, #24]
 8000300:	6183      	str	r3, [r0, #24]
 8000302:	6983      	ldr	r3, [r0, #24]
 8000304:	6983      	ldr	r3, [r0, #24]
 8000306:	4770      	bx	lr

08000308 <GPIO_EventOutputConfig>:
 8000308:	b410      	push	{r4}
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <GPIO_EventOutputConfig+0x1c>)
 800030c:	f64f 7280 	movw	r2, #65408	; 0xff80
 8000310:	681c      	ldr	r4, [r3, #0]
 8000312:	4022      	ands	r2, r4
 8000314:	4311      	orrs	r1, r2
 8000316:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
 800031a:	6018      	str	r0, [r3, #0]
 800031c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40010000 	andmi	r0, r1, r0

08000328 <GPIO_EventOutputCmd>:
 8000328:	4b01      	ldr	r3, [pc, #4]	; (8000330 <GPIO_EventOutputCmd+0x8>)
 800032a:	6018      	str	r0, [r3, #0]
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	4220001c 	eormi	r0, r0, #28

08000334 <GPIO_PinRemapConfig>:
 8000334:	b430      	push	{r4, r5}
 8000336:	2800      	cmp	r0, #0
 8000338:	4b18      	ldr	r3, [pc, #96]	; (800039c <GPIO_PinRemapConfig+0x68>)
 800033a:	f400 1240 	and.w	r2, r0, #3145728	; 0x300000
 800033e:	bfb4      	ite	lt
 8000340:	69db      	ldrlt	r3, [r3, #28]
 8000342:	685b      	ldrge	r3, [r3, #4]
 8000344:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8000348:	b284      	uxth	r4, r0
 800034a:	d01f      	beq.n	800038c <GPIO_PinRemapConfig+0x58>
 800034c:	02c2      	lsls	r2, r0, #11
 800034e:	d514      	bpl.n	800037a <GPIO_PinRemapConfig+0x46>
 8000350:	f3c0 4203 	ubfx	r2, r0, #16, #4
 8000354:	2503      	movs	r5, #3
 8000356:	fa05 f202 	lsl.w	r2, r5, r2
 800035a:	ea23 0302 	bic.w	r3, r3, r2
 800035e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000362:	b119      	cbz	r1, 800036c <GPIO_PinRemapConfig+0x38>
 8000364:	0d42      	lsrs	r2, r0, #21
 8000366:	0112      	lsls	r2, r2, #4
 8000368:	4094      	lsls	r4, r2
 800036a:	4323      	orrs	r3, r4
 800036c:	4a0b      	ldr	r2, [pc, #44]	; (800039c <GPIO_PinRemapConfig+0x68>)
 800036e:	2800      	cmp	r0, #0
 8000370:	bfb4      	ite	lt
 8000372:	61d3      	strlt	r3, [r2, #28]
 8000374:	6053      	strge	r3, [r2, #4]
 8000376:	bc30      	pop	{r4, r5}
 8000378:	4770      	bx	lr
 800037a:	0d42      	lsrs	r2, r0, #21
 800037c:	0112      	lsls	r2, r2, #4
 800037e:	fa04 f202 	lsl.w	r2, r4, r2
 8000382:	ea23 0302 	bic.w	r3, r3, r2
 8000386:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800038a:	e7ea      	b.n	8000362 <GPIO_PinRemapConfig+0x2e>
 800038c:	4a03      	ldr	r2, [pc, #12]	; (800039c <GPIO_PinRemapConfig+0x68>)
 800038e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000392:	6855      	ldr	r5, [r2, #4]
 8000394:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8000398:	6055      	str	r5, [r2, #4]
 800039a:	e7e2      	b.n	8000362 <GPIO_PinRemapConfig+0x2e>
 800039c:	40010000 	andmi	r0, r1, r0

080003a0 <GPIO_EXTILineConfig>:
 80003a0:	f001 0303 	and.w	r3, r1, #3
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	220f      	movs	r2, #15
 80003a8:	409a      	lsls	r2, r3
 80003aa:	fa00 f303 	lsl.w	r3, r0, r3
 80003ae:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80003b2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80003b6:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 80003ba:	6888      	ldr	r0, [r1, #8]
 80003bc:	ea20 0202 	bic.w	r2, r0, r2
 80003c0:	608a      	str	r2, [r1, #8]
 80003c2:	688a      	ldr	r2, [r1, #8]
 80003c4:	4313      	orrs	r3, r2
 80003c6:	608b      	str	r3, [r1, #8]
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop

080003cc <GPIO_ETH_MediaInterfaceConfig>:
 80003cc:	4b01      	ldr	r3, [pc, #4]	; (80003d4 <GPIO_ETH_MediaInterfaceConfig+0x8>)
 80003ce:	6018      	str	r0, [r3, #0]
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	422000dc 	eormi	r0, r0, #220	; 0xdc

080003d8 <RCC_DeInit>:
 80003d8:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <RCC_DeInit+0x38>)
 80003da:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <RCC_DeInit+0x3c>)
 80003dc:	6818      	ldr	r0, [r3, #0]
 80003de:	f44f 011f 	mov.w	r1, #10420224	; 0x9f0000
 80003e2:	f040 0001 	orr.w	r0, r0, #1
 80003e6:	6018      	str	r0, [r3, #0]
 80003e8:	6858      	ldr	r0, [r3, #4]
 80003ea:	4002      	ands	r2, r0
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80003f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	685a      	ldr	r2, [r3, #4]
 8000404:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	6099      	str	r1, [r3, #8]
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40021000 	andmi	r1, r2, r0
 8000414:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000

08000418 <RCC_HSEConfig>:
 8000418:	4b0c      	ldr	r3, [pc, #48]	; (800044c <RCC_HSEConfig+0x34>)
 800041a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	d008      	beq.n	8000442 <RCC_HSEConfig+0x2a>
 8000430:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8000434:	d104      	bne.n	8000440 <RCC_HSEConfig+0x28>
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	4770      	bx	lr
 8000440:	4770      	bx	lr
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	4770      	bx	lr
 800044c:	40021000 	andmi	r1, r2, r0

08000450 <RCC_WaitForHSEStartUp>:
 8000450:	b082      	sub	sp, #8
 8000452:	2300      	movs	r3, #0
 8000454:	4a0b      	ldr	r2, [pc, #44]	; (8000484 <RCC_WaitForHSEStartUp+0x34>)
 8000456:	9301      	str	r3, [sp, #4]
 8000458:	6813      	ldr	r3, [r2, #0]
 800045a:	039b      	lsls	r3, r3, #14
 800045c:	d40c      	bmi.n	8000478 <RCC_WaitForHSEStartUp+0x28>
 800045e:	9b01      	ldr	r3, [sp, #4]
 8000460:	3301      	adds	r3, #1
 8000462:	9301      	str	r3, [sp, #4]
 8000464:	9b01      	ldr	r3, [sp, #4]
 8000466:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800046a:	d1f5      	bne.n	8000458 <RCC_WaitForHSEStartUp+0x8>
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <RCC_WaitForHSEStartUp+0x34>)
 800046e:	6818      	ldr	r0, [r3, #0]
 8000470:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8000474:	b002      	add	sp, #8
 8000476:	4770      	bx	lr
 8000478:	9b01      	ldr	r3, [sp, #4]
 800047a:	3301      	adds	r3, #1
 800047c:	9301      	str	r3, [sp, #4]
 800047e:	9b01      	ldr	r3, [sp, #4]
 8000480:	e7f4      	b.n	800046c <RCC_WaitForHSEStartUp+0x1c>
 8000482:	bf00      	nop
 8000484:	40021000 	andmi	r1, r2, r0

08000488 <RCC_AdjustHSICalibrationValue>:
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <RCC_AdjustHSICalibrationValue+0x10>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000490:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000494:	6018      	str	r0, [r3, #0]
 8000496:	4770      	bx	lr
 8000498:	40021000 	andmi	r1, r2, r0

0800049c <RCC_HSICmd>:
 800049c:	4b01      	ldr	r3, [pc, #4]	; (80004a4 <RCC_HSICmd+0x8>)
 800049e:	6018      	str	r0, [r3, #0]
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	42420000 	submi	r0, r2, #0

080004a8 <RCC_PLLConfig>:
 80004a8:	4b03      	ldr	r3, [pc, #12]	; (80004b8 <RCC_PLLConfig+0x10>)
 80004aa:	685a      	ldr	r2, [r3, #4]
 80004ac:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80004b0:	4311      	orrs	r1, r2
 80004b2:	4308      	orrs	r0, r1
 80004b4:	6058      	str	r0, [r3, #4]
 80004b6:	4770      	bx	lr
 80004b8:	40021000 	andmi	r1, r2, r0

080004bc <RCC_PLLCmd>:
 80004bc:	4b01      	ldr	r3, [pc, #4]	; (80004c4 <RCC_PLLCmd+0x8>)
 80004be:	6018      	str	r0, [r3, #0]
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	42420060 	submi	r0, r2, #96	; 0x60

080004c8 <RCC_SYSCLKConfig>:
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <RCC_SYSCLKConfig+0x10>)
 80004ca:	685a      	ldr	r2, [r3, #4]
 80004cc:	f022 0203 	bic.w	r2, r2, #3
 80004d0:	4310      	orrs	r0, r2
 80004d2:	6058      	str	r0, [r3, #4]
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40021000 	andmi	r1, r2, r0

080004dc <RCC_GetSYSCLKSource>:
 80004dc:	4b02      	ldr	r3, [pc, #8]	; (80004e8 <RCC_GetSYSCLKSource+0xc>)
 80004de:	6858      	ldr	r0, [r3, #4]
 80004e0:	f000 000c 	and.w	r0, r0, #12
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40021000 	andmi	r1, r2, r0

080004ec <RCC_HCLKConfig>:
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <RCC_HCLKConfig+0x10>)
 80004ee:	685a      	ldr	r2, [r3, #4]
 80004f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80004f4:	4310      	orrs	r0, r2
 80004f6:	6058      	str	r0, [r3, #4]
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40021000 	andmi	r1, r2, r0

08000500 <RCC_PCLK1Config>:
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <RCC_PCLK1Config+0x10>)
 8000502:	685a      	ldr	r2, [r3, #4]
 8000504:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000508:	4310      	orrs	r0, r2
 800050a:	6058      	str	r0, [r3, #4]
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	andmi	r1, r2, r0

08000514 <RCC_PCLK2Config>:
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <RCC_PCLK2Config+0x10>)
 8000516:	685a      	ldr	r2, [r3, #4]
 8000518:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 800051c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000520:	6058      	str	r0, [r3, #4]
 8000522:	4770      	bx	lr
 8000524:	40021000 	andmi	r1, r2, r0

08000528 <RCC_ITConfig>:
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <RCC_ITConfig+0x14>)
 800052a:	781a      	ldrb	r2, [r3, #0]
 800052c:	b919      	cbnz	r1, 8000536 <RCC_ITConfig+0xe>
 800052e:	ea22 0000 	bic.w	r0, r2, r0
 8000532:	7018      	strb	r0, [r3, #0]
 8000534:	4770      	bx	lr
 8000536:	4310      	orrs	r0, r2
 8000538:	7018      	strb	r0, [r3, #0]
 800053a:	4770      	bx	lr
 800053c:	40021009 	andmi	r1, r2, r9

08000540 <RCC_USBCLKConfig>:
 8000540:	4b01      	ldr	r3, [pc, #4]	; (8000548 <RCC_USBCLKConfig+0x8>)
 8000542:	6018      	str	r0, [r3, #0]
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	424200d8 	submi	r0, r2, #216	; 0xd8

0800054c <RCC_ADCCLKConfig>:
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <RCC_ADCCLKConfig+0x10>)
 800054e:	685a      	ldr	r2, [r3, #4]
 8000550:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000554:	4310      	orrs	r0, r2
 8000556:	6058      	str	r0, [r3, #4]
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40021000 	andmi	r1, r2, r0

08000560 <RCC_LSEConfig>:
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <RCC_LSEConfig+0x1c>)
 8000562:	2200      	movs	r2, #0
 8000564:	2801      	cmp	r0, #1
 8000566:	701a      	strb	r2, [r3, #0]
 8000568:	701a      	strb	r2, [r3, #0]
 800056a:	d005      	beq.n	8000578 <RCC_LSEConfig+0x18>
 800056c:	2804      	cmp	r0, #4
 800056e:	d102      	bne.n	8000576 <RCC_LSEConfig+0x16>
 8000570:	2205      	movs	r2, #5
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	4770      	bx	lr
 8000576:	4770      	bx	lr
 8000578:	7018      	strb	r0, [r3, #0]
 800057a:	4770      	bx	lr
 800057c:	40021020 	andmi	r1, r2, r0, lsr #32

08000580 <RCC_LSICmd>:
 8000580:	4b01      	ldr	r3, [pc, #4]	; (8000588 <RCC_LSICmd+0x8>)
 8000582:	6018      	str	r0, [r3, #0]
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	42420480 	submi	r0, r2, #128, 8	; 0x80000000

0800058c <RCC_RTCCLKConfig>:
 800058c:	4b02      	ldr	r3, [pc, #8]	; (8000598 <RCC_RTCCLKConfig+0xc>)
 800058e:	6a1a      	ldr	r2, [r3, #32]
 8000590:	4310      	orrs	r0, r2
 8000592:	6218      	str	r0, [r3, #32]
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40021000 	andmi	r1, r2, r0

0800059c <RCC_RTCCLKCmd>:
 800059c:	4b01      	ldr	r3, [pc, #4]	; (80005a4 <RCC_RTCCLKCmd+0x8>)
 800059e:	6018      	str	r0, [r3, #0]
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	4242043c 	submi	r0, r2, #60, 8	; 0x3c000000

080005a8 <RCC_GetClocksFreq>:
 80005a8:	b410      	push	{r4}
 80005aa:	4a1f      	ldr	r2, [pc, #124]	; (8000628 <RCC_GetClocksFreq+0x80>)
 80005ac:	6853      	ldr	r3, [r2, #4]
 80005ae:	f003 030c 	and.w	r3, r3, #12
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d001      	beq.n	80005ba <RCC_GetClocksFreq+0x12>
 80005b6:	2b08      	cmp	r3, #8
 80005b8:	d021      	beq.n	80005fe <RCC_GetClocksFreq+0x56>
 80005ba:	491c      	ldr	r1, [pc, #112]	; (800062c <RCC_GetClocksFreq+0x84>)
 80005bc:	6001      	str	r1, [r0, #0]
 80005be:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <RCC_GetClocksFreq+0x80>)
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <RCC_GetClocksFreq+0x88>)
 80005c2:	6854      	ldr	r4, [r2, #4]
 80005c4:	f3c4 1403 	ubfx	r4, r4, #4, #4
 80005c8:	5d1c      	ldrb	r4, [r3, r4]
 80005ca:	40e1      	lsrs	r1, r4
 80005cc:	6041      	str	r1, [r0, #4]
 80005ce:	6854      	ldr	r4, [r2, #4]
 80005d0:	f3c4 2402 	ubfx	r4, r4, #8, #3
 80005d4:	5d1c      	ldrb	r4, [r3, r4]
 80005d6:	fa21 f404 	lsr.w	r4, r1, r4
 80005da:	6084      	str	r4, [r0, #8]
 80005dc:	6854      	ldr	r4, [r2, #4]
 80005de:	f3c4 24c2 	ubfx	r4, r4, #11, #3
 80005e2:	5d1c      	ldrb	r4, [r3, r4]
 80005e4:	40e1      	lsrs	r1, r4
 80005e6:	60c1      	str	r1, [r0, #12]
 80005e8:	6852      	ldr	r2, [r2, #4]
 80005ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005ee:	f3c2 3281 	ubfx	r2, r2, #14, #2
 80005f2:	4413      	add	r3, r2
 80005f4:	7c1b      	ldrb	r3, [r3, #16]
 80005f6:	fbb1 f1f3 	udiv	r1, r1, r3
 80005fa:	6101      	str	r1, [r0, #16]
 80005fc:	4770      	bx	lr
 80005fe:	6851      	ldr	r1, [r2, #4]
 8000600:	6853      	ldr	r3, [r2, #4]
 8000602:	f3c1 4183 	ubfx	r1, r1, #18, #4
 8000606:	03dc      	lsls	r4, r3, #15
 8000608:	f101 0102 	add.w	r1, r1, #2
 800060c:	d507      	bpl.n	800061e <RCC_GetClocksFreq+0x76>
 800060e:	6853      	ldr	r3, [r2, #4]
 8000610:	039b      	lsls	r3, r3, #14
 8000612:	d404      	bmi.n	800061e <RCC_GetClocksFreq+0x76>
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <RCC_GetClocksFreq+0x84>)
 8000616:	fb03 f101 	mul.w	r1, r3, r1
 800061a:	6001      	str	r1, [r0, #0]
 800061c:	e7cf      	b.n	80005be <RCC_GetClocksFreq+0x16>
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <RCC_GetClocksFreq+0x8c>)
 8000620:	fb03 f101 	mul.w	r1, r3, r1
 8000624:	6001      	str	r1, [r0, #0]
 8000626:	e7ca      	b.n	80005be <RCC_GetClocksFreq+0x16>
 8000628:	40021000 	andmi	r1, r2, r0
 800062c:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8000630:	20000000 	andcs	r0, r0, r0
 8000634:	003d0900 	eorseq	r0, sp, r0, lsl #18

08000638 <RCC_AHBPeriphClockCmd>:
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <RCC_AHBPeriphClockCmd+0x14>)
 800063a:	695a      	ldr	r2, [r3, #20]
 800063c:	b919      	cbnz	r1, 8000646 <RCC_AHBPeriphClockCmd+0xe>
 800063e:	ea22 0000 	bic.w	r0, r2, r0
 8000642:	6158      	str	r0, [r3, #20]
 8000644:	4770      	bx	lr
 8000646:	4310      	orrs	r0, r2
 8000648:	6158      	str	r0, [r3, #20]
 800064a:	4770      	bx	lr
 800064c:	40021000 	andmi	r1, r2, r0

08000650 <RCC_APB2PeriphClockCmd>:
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <RCC_APB2PeriphClockCmd+0x14>)
 8000652:	699a      	ldr	r2, [r3, #24]
 8000654:	b919      	cbnz	r1, 800065e <RCC_APB2PeriphClockCmd+0xe>
 8000656:	ea22 0000 	bic.w	r0, r2, r0
 800065a:	6198      	str	r0, [r3, #24]
 800065c:	4770      	bx	lr
 800065e:	4310      	orrs	r0, r2
 8000660:	6198      	str	r0, [r3, #24]
 8000662:	4770      	bx	lr
 8000664:	40021000 	andmi	r1, r2, r0

08000668 <RCC_APB1PeriphClockCmd>:
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <RCC_APB1PeriphClockCmd+0x14>)
 800066a:	69da      	ldr	r2, [r3, #28]
 800066c:	b919      	cbnz	r1, 8000676 <RCC_APB1PeriphClockCmd+0xe>
 800066e:	ea22 0000 	bic.w	r0, r2, r0
 8000672:	61d8      	str	r0, [r3, #28]
 8000674:	4770      	bx	lr
 8000676:	4310      	orrs	r0, r2
 8000678:	61d8      	str	r0, [r3, #28]
 800067a:	4770      	bx	lr
 800067c:	40021000 	andmi	r1, r2, r0

08000680 <RCC_APB2PeriphResetCmd>:
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <RCC_APB2PeriphResetCmd+0x14>)
 8000682:	68da      	ldr	r2, [r3, #12]
 8000684:	b919      	cbnz	r1, 800068e <RCC_APB2PeriphResetCmd+0xe>
 8000686:	ea22 0000 	bic.w	r0, r2, r0
 800068a:	60d8      	str	r0, [r3, #12]
 800068c:	4770      	bx	lr
 800068e:	4310      	orrs	r0, r2
 8000690:	60d8      	str	r0, [r3, #12]
 8000692:	4770      	bx	lr
 8000694:	40021000 	andmi	r1, r2, r0

08000698 <RCC_APB1PeriphResetCmd>:
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <RCC_APB1PeriphResetCmd+0x14>)
 800069a:	691a      	ldr	r2, [r3, #16]
 800069c:	b919      	cbnz	r1, 80006a6 <RCC_APB1PeriphResetCmd+0xe>
 800069e:	ea22 0000 	bic.w	r0, r2, r0
 80006a2:	6118      	str	r0, [r3, #16]
 80006a4:	4770      	bx	lr
 80006a6:	4310      	orrs	r0, r2
 80006a8:	6118      	str	r0, [r3, #16]
 80006aa:	4770      	bx	lr
 80006ac:	40021000 	andmi	r1, r2, r0

080006b0 <RCC_BackupResetCmd>:
 80006b0:	4b01      	ldr	r3, [pc, #4]	; (80006b8 <RCC_BackupResetCmd+0x8>)
 80006b2:	6018      	str	r0, [r3, #0]
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	42420440 	submi	r0, r2, #64, 8	; 0x40000000

080006bc <RCC_ClockSecuritySystemCmd>:
 80006bc:	4b01      	ldr	r3, [pc, #4]	; (80006c4 <RCC_ClockSecuritySystemCmd+0x8>)
 80006be:	6018      	str	r0, [r3, #0]
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	4242004c 	submi	r0, r2, #76	; 0x4c

080006c8 <RCC_MCOConfig>:
 80006c8:	4b01      	ldr	r3, [pc, #4]	; (80006d0 <RCC_MCOConfig+0x8>)
 80006ca:	7018      	strb	r0, [r3, #0]
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40021007 	andmi	r1, r2, r7

080006d4 <RCC_GetFlagStatus>:
 80006d4:	0943      	lsrs	r3, r0, #5
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d00b      	beq.n	80006f2 <RCC_GetFlagStatus+0x1e>
 80006da:	2b02      	cmp	r3, #2
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <RCC_GetFlagStatus+0x30>)
 80006de:	f000 001f 	and.w	r0, r0, #31
 80006e2:	bf0c      	ite	eq
 80006e4:	6a1b      	ldreq	r3, [r3, #32]
 80006e6:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
 80006e8:	fa23 f000 	lsr.w	r0, r3, r0
 80006ec:	f000 0001 	and.w	r0, r0, #1
 80006f0:	4770      	bx	lr
 80006f2:	4b04      	ldr	r3, [pc, #16]	; (8000704 <RCC_GetFlagStatus+0x30>)
 80006f4:	f000 001f 	and.w	r0, r0, #31
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	fa23 f000 	lsr.w	r0, r3, r0
 80006fe:	f000 0001 	and.w	r0, r0, #1
 8000702:	4770      	bx	lr
 8000704:	40021000 	andmi	r1, r2, r0

08000708 <RCC_ClearFlag>:
 8000708:	4b02      	ldr	r3, [pc, #8]	; (8000714 <RCC_ClearFlag+0xc>)
 800070a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800070c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
 8000712:	4770      	bx	lr
 8000714:	40021000 	andmi	r1, r2, r0

08000718 <RCC_GetITStatus>:
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <RCC_GetITStatus+0x10>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	4218      	tst	r0, r3
 800071e:	bf0c      	ite	eq
 8000720:	2000      	moveq	r0, #0
 8000722:	2001      	movne	r0, #1
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40021000 	andmi	r1, r2, r0

0800072c <RCC_ClearITPendingBit>:
 800072c:	4b01      	ldr	r3, [pc, #4]	; (8000734 <RCC_ClearITPendingBit+0x8>)
 800072e:	7018      	strb	r0, [r3, #0]
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	4002100a 	andmi	r1, r2, sl

08000738 <USART_DeInit>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <USART_DeInit+0x9c>)
 800073c:	4298      	cmp	r0, r3
 800073e:	d018      	beq.n	8000772 <USART_DeInit+0x3a>
 8000740:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <USART_DeInit+0xa0>)
 8000742:	4298      	cmp	r0, r3
 8000744:	d021      	beq.n	800078a <USART_DeInit+0x52>
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <USART_DeInit+0xa4>)
 8000748:	4298      	cmp	r0, r3
 800074a:	d02a      	beq.n	80007a2 <USART_DeInit+0x6a>
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <USART_DeInit+0xa8>)
 800074e:	4298      	cmp	r0, r3
 8000750:	d033      	beq.n	80007ba <USART_DeInit+0x82>
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <USART_DeInit+0xac>)
 8000754:	4298      	cmp	r0, r3
 8000756:	d000      	beq.n	800075a <USART_DeInit+0x22>
 8000758:	bd08      	pop	{r3, pc}
 800075a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800075e:	2101      	movs	r1, #1
 8000760:	f7ff ff9a 	bl	8000698 <RCC_APB1PeriphResetCmd>
 8000764:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000768:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800076c:	2100      	movs	r1, #0
 800076e:	f7ff bf93 	b.w	8000698 <RCC_APB1PeriphResetCmd>
 8000772:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000776:	2101      	movs	r1, #1
 8000778:	f7ff ff82 	bl	8000680 <RCC_APB2PeriphResetCmd>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000784:	2100      	movs	r1, #0
 8000786:	f7ff bf7b 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 800078a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800078e:	2101      	movs	r1, #1
 8000790:	f7ff ff82 	bl	8000698 <RCC_APB1PeriphResetCmd>
 8000794:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000798:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800079c:	2100      	movs	r1, #0
 800079e:	f7ff bf7b 	b.w	8000698 <RCC_APB1PeriphResetCmd>
 80007a2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80007a6:	2101      	movs	r1, #1
 80007a8:	f7ff ff76 	bl	8000698 <RCC_APB1PeriphResetCmd>
 80007ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007b0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80007b4:	2100      	movs	r1, #0
 80007b6:	f7ff bf6f 	b.w	8000698 <RCC_APB1PeriphResetCmd>
 80007ba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80007be:	2101      	movs	r1, #1
 80007c0:	f7ff ff6a 	bl	8000698 <RCC_APB1PeriphResetCmd>
 80007c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80007cc:	2100      	movs	r1, #0
 80007ce:	f7ff bf63 	b.w	8000698 <RCC_APB1PeriphResetCmd>
 80007d2:	bf00      	nop
 80007d4:	40013800 	andmi	r3, r1, r0, lsl #16
 80007d8:	40004400 	andmi	r4, r0, r0, lsl #8
 80007dc:	40004800 	andmi	r4, r0, r0, lsl #16
 80007e0:	40004c00 	andmi	r4, r0, r0, lsl #24
 80007e4:	40005000 	andmi	r5, r0, r0

080007e8 <USART_Init>:
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	8a03      	ldrh	r3, [r0, #16]
 80007ec:	88ca      	ldrh	r2, [r1, #6]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007f4:	4313      	orrs	r3, r2
 80007f6:	8203      	strh	r3, [r0, #16]
 80007f8:	8982      	ldrh	r2, [r0, #12]
 80007fa:	4604      	mov	r4, r0
 80007fc:	890b      	ldrh	r3, [r1, #8]
 80007fe:	8888      	ldrh	r0, [r1, #4]
 8000800:	460d      	mov	r5, r1
 8000802:	b292      	uxth	r2, r2
 8000804:	8949      	ldrh	r1, [r1, #10]
 8000806:	4303      	orrs	r3, r0
 8000808:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800080c:	430b      	orrs	r3, r1
 800080e:	f022 020c 	bic.w	r2, r2, #12
 8000812:	4313      	orrs	r3, r2
 8000814:	b29b      	uxth	r3, r3
 8000816:	81a3      	strh	r3, [r4, #12]
 8000818:	8aa3      	ldrh	r3, [r4, #20]
 800081a:	89aa      	ldrh	r2, [r5, #12]
 800081c:	b29b      	uxth	r3, r3
 800081e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000822:	b087      	sub	sp, #28
 8000824:	4313      	orrs	r3, r2
 8000826:	82a3      	strh	r3, [r4, #20]
 8000828:	a801      	add	r0, sp, #4
 800082a:	f7ff febd 	bl	80005a8 <RCC_GetClocksFreq>
 800082e:	89a1      	ldrh	r1, [r4, #12]
 8000830:	9a04      	ldr	r2, [sp, #16]
 8000832:	481a      	ldr	r0, [pc, #104]	; (800089c <USART_Init+0xb4>)
 8000834:	9b03      	ldr	r3, [sp, #12]
 8000836:	b209      	sxth	r1, r1
 8000838:	4284      	cmp	r4, r0
 800083a:	bf08      	it	eq
 800083c:	4613      	moveq	r3, r2
 800083e:	682a      	ldr	r2, [r5, #0]
 8000840:	2900      	cmp	r1, #0
 8000842:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000846:	bfb4      	ite	lt
 8000848:	0052      	lsllt	r2, r2, #1
 800084a:	0092      	lslge	r2, r2, #2
 800084c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000850:	4913      	ldr	r1, [pc, #76]	; (80008a0 <USART_Init+0xb8>)
 8000852:	fbb3 f3f2 	udiv	r3, r3, r2
 8000856:	fba1 5203 	umull	r5, r2, r1, r3
 800085a:	89a0      	ldrh	r0, [r4, #12]
 800085c:	0952      	lsrs	r2, r2, #5
 800085e:	b200      	sxth	r0, r0
 8000860:	2564      	movs	r5, #100	; 0x64
 8000862:	2800      	cmp	r0, #0
 8000864:	fb02 3315 	mls	r3, r2, r5, r3
 8000868:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800086c:	db0a      	blt.n	8000884 <USART_Init+0x9c>
 800086e:	011b      	lsls	r3, r3, #4
 8000870:	3332      	adds	r3, #50	; 0x32
 8000872:	fba1 5103 	umull	r5, r1, r1, r3
 8000876:	f3c1 1143 	ubfx	r1, r1, #5, #4
 800087a:	430a      	orrs	r2, r1
 800087c:	b292      	uxth	r2, r2
 800087e:	8122      	strh	r2, [r4, #8]
 8000880:	b007      	add	sp, #28
 8000882:	bd30      	pop	{r4, r5, pc}
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	3332      	adds	r3, #50	; 0x32
 8000888:	fba1 0103 	umull	r0, r1, r1, r3
 800088c:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8000890:	430a      	orrs	r2, r1
 8000892:	b292      	uxth	r2, r2
 8000894:	8122      	strh	r2, [r4, #8]
 8000896:	b007      	add	sp, #28
 8000898:	bd30      	pop	{r4, r5, pc}
 800089a:	bf00      	nop
 800089c:	40013800 	andmi	r3, r1, r0, lsl #16
 80008a0:	51eb851f 	mvnpl	r8, pc, lsl r5

080008a4 <USART_StructInit>:
 80008a4:	2300      	movs	r3, #0
 80008a6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80008aa:	220c      	movs	r2, #12
 80008ac:	6001      	str	r1, [r0, #0]
 80008ae:	8142      	strh	r2, [r0, #10]
 80008b0:	8083      	strh	r3, [r0, #4]
 80008b2:	80c3      	strh	r3, [r0, #6]
 80008b4:	8103      	strh	r3, [r0, #8]
 80008b6:	8183      	strh	r3, [r0, #12]
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop

080008bc <USART_ClockInit>:
 80008bc:	b430      	push	{r4, r5}
 80008be:	884d      	ldrh	r5, [r1, #2]
 80008c0:	880b      	ldrh	r3, [r1, #0]
 80008c2:	888c      	ldrh	r4, [r1, #4]
 80008c4:	8a02      	ldrh	r2, [r0, #16]
 80008c6:	432b      	orrs	r3, r5
 80008c8:	88c9      	ldrh	r1, [r1, #6]
 80008ca:	4323      	orrs	r3, r4
 80008cc:	b292      	uxth	r2, r2
 80008ce:	430b      	orrs	r3, r1
 80008d0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80008d4:	4313      	orrs	r3, r2
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	8203      	strh	r3, [r0, #16]
 80008da:	bc30      	pop	{r4, r5}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop

080008e0 <USART_ClockStructInit>:
 80008e0:	2300      	movs	r3, #0
 80008e2:	8003      	strh	r3, [r0, #0]
 80008e4:	8043      	strh	r3, [r0, #2]
 80008e6:	8083      	strh	r3, [r0, #4]
 80008e8:	80c3      	strh	r3, [r0, #6]
 80008ea:	4770      	bx	lr

080008ec <USART_Cmd>:
 80008ec:	8983      	ldrh	r3, [r0, #12]
 80008ee:	b929      	cbnz	r1, 80008fc <USART_Cmd+0x10>
 80008f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008f4:	041b      	lsls	r3, r3, #16
 80008f6:	0c1b      	lsrs	r3, r3, #16
 80008f8:	8183      	strh	r3, [r0, #12]
 80008fa:	4770      	bx	lr
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000902:	8183      	strh	r3, [r0, #12]
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <USART_ITConfig>:
 8000908:	f001 031f 	and.w	r3, r1, #31
 800090c:	b410      	push	{r4}
 800090e:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8000912:	2401      	movs	r4, #1
 8000914:	42a1      	cmp	r1, r4
 8000916:	fa04 f303 	lsl.w	r3, r4, r3
 800091a:	d010      	beq.n	800093e <USART_ITConfig+0x36>
 800091c:	2902      	cmp	r1, #2
 800091e:	bf0c      	ite	eq
 8000920:	3010      	addeq	r0, #16
 8000922:	3014      	addne	r0, #20
 8000924:	6804      	ldr	r4, [r0, #0]
 8000926:	b92a      	cbnz	r2, 8000934 <USART_ITConfig+0x2c>
 8000928:	ea24 0303 	bic.w	r3, r4, r3
 800092c:	6003      	str	r3, [r0, #0]
 800092e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	4323      	orrs	r3, r4
 8000936:	6003      	str	r3, [r0, #0]
 8000938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	300c      	adds	r0, #12
 8000940:	e7f0      	b.n	8000924 <USART_ITConfig+0x1c>
 8000942:	bf00      	nop

08000944 <USART_DMACmd>:
 8000944:	8a83      	ldrh	r3, [r0, #20]
 8000946:	b29b      	uxth	r3, r3
 8000948:	b91a      	cbnz	r2, 8000952 <USART_DMACmd+0xe>
 800094a:	ea23 0101 	bic.w	r1, r3, r1
 800094e:	8281      	strh	r1, [r0, #20]
 8000950:	4770      	bx	lr
 8000952:	4319      	orrs	r1, r3
 8000954:	8281      	strh	r1, [r0, #20]
 8000956:	4770      	bx	lr

08000958 <USART_SetAddress>:
 8000958:	8a03      	ldrh	r3, [r0, #16]
 800095a:	f023 030f 	bic.w	r3, r3, #15
 800095e:	041b      	lsls	r3, r3, #16
 8000960:	0c1b      	lsrs	r3, r3, #16
 8000962:	8203      	strh	r3, [r0, #16]
 8000964:	8a03      	ldrh	r3, [r0, #16]
 8000966:	b29b      	uxth	r3, r3
 8000968:	4319      	orrs	r1, r3
 800096a:	8201      	strh	r1, [r0, #16]
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <USART_WakeUpConfig>:
 8000970:	8983      	ldrh	r3, [r0, #12]
 8000972:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000976:	041b      	lsls	r3, r3, #16
 8000978:	0c1b      	lsrs	r3, r3, #16
 800097a:	8183      	strh	r3, [r0, #12]
 800097c:	8983      	ldrh	r3, [r0, #12]
 800097e:	b29b      	uxth	r3, r3
 8000980:	4319      	orrs	r1, r3
 8000982:	8181      	strh	r1, [r0, #12]
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <USART_ReceiverWakeUpCmd>:
 8000988:	8983      	ldrh	r3, [r0, #12]
 800098a:	b929      	cbnz	r1, 8000998 <USART_ReceiverWakeUpCmd+0x10>
 800098c:	f023 0302 	bic.w	r3, r3, #2
 8000990:	041b      	lsls	r3, r3, #16
 8000992:	0c1b      	lsrs	r3, r3, #16
 8000994:	8183      	strh	r3, [r0, #12]
 8000996:	4770      	bx	lr
 8000998:	b29b      	uxth	r3, r3
 800099a:	f043 0302 	orr.w	r3, r3, #2
 800099e:	8183      	strh	r3, [r0, #12]
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <USART_LINBreakDetectLengthConfig>:
 80009a4:	8a03      	ldrh	r3, [r0, #16]
 80009a6:	f023 0320 	bic.w	r3, r3, #32
 80009aa:	041b      	lsls	r3, r3, #16
 80009ac:	0c1b      	lsrs	r3, r3, #16
 80009ae:	8203      	strh	r3, [r0, #16]
 80009b0:	8a03      	ldrh	r3, [r0, #16]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	4319      	orrs	r1, r3
 80009b6:	8201      	strh	r1, [r0, #16]
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <USART_LINCmd>:
 80009bc:	8a03      	ldrh	r3, [r0, #16]
 80009be:	b929      	cbnz	r1, 80009cc <USART_LINCmd+0x10>
 80009c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009c4:	041b      	lsls	r3, r3, #16
 80009c6:	0c1b      	lsrs	r3, r3, #16
 80009c8:	8203      	strh	r3, [r0, #16]
 80009ca:	4770      	bx	lr
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d2:	8203      	strh	r3, [r0, #16]
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <USART_SendData>:
 80009d8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80009dc:	8081      	strh	r1, [r0, #4]
 80009de:	4770      	bx	lr

080009e0 <USART_ReceiveData>:
 80009e0:	8880      	ldrh	r0, [r0, #4]
 80009e2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80009e6:	4770      	bx	lr

080009e8 <USART_SendBreak>:
 80009e8:	8983      	ldrh	r3, [r0, #12]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	8183      	strh	r3, [r0, #12]
 80009f2:	4770      	bx	lr

080009f4 <USART_SetGuardTime>:
 80009f4:	8b03      	ldrh	r3, [r0, #24]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	8303      	strh	r3, [r0, #24]
 80009fa:	8b03      	ldrh	r3, [r0, #24]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8000a02:	8301      	strh	r1, [r0, #24]
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <USART_SetPrescaler>:
 8000a08:	8b03      	ldrh	r3, [r0, #24]
 8000a0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000a0e:	8303      	strh	r3, [r0, #24]
 8000a10:	8b03      	ldrh	r3, [r0, #24]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	4319      	orrs	r1, r3
 8000a16:	8301      	strh	r1, [r0, #24]
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <USART_SmartCardCmd>:
 8000a1c:	8a83      	ldrh	r3, [r0, #20]
 8000a1e:	b929      	cbnz	r1, 8000a2c <USART_SmartCardCmd+0x10>
 8000a20:	f023 0320 	bic.w	r3, r3, #32
 8000a24:	041b      	lsls	r3, r3, #16
 8000a26:	0c1b      	lsrs	r3, r3, #16
 8000a28:	8283      	strh	r3, [r0, #20]
 8000a2a:	4770      	bx	lr
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	f043 0320 	orr.w	r3, r3, #32
 8000a32:	8283      	strh	r3, [r0, #20]
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <USART_SmartCardNACKCmd>:
 8000a38:	8a83      	ldrh	r3, [r0, #20]
 8000a3a:	b929      	cbnz	r1, 8000a48 <USART_SmartCardNACKCmd+0x10>
 8000a3c:	f023 0310 	bic.w	r3, r3, #16
 8000a40:	041b      	lsls	r3, r3, #16
 8000a42:	0c1b      	lsrs	r3, r3, #16
 8000a44:	8283      	strh	r3, [r0, #20]
 8000a46:	4770      	bx	lr
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	8283      	strh	r3, [r0, #20]
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <USART_HalfDuplexCmd>:
 8000a54:	8a83      	ldrh	r3, [r0, #20]
 8000a56:	b929      	cbnz	r1, 8000a64 <USART_HalfDuplexCmd+0x10>
 8000a58:	f023 0308 	bic.w	r3, r3, #8
 8000a5c:	041b      	lsls	r3, r3, #16
 8000a5e:	0c1b      	lsrs	r3, r3, #16
 8000a60:	8283      	strh	r3, [r0, #20]
 8000a62:	4770      	bx	lr
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	f043 0308 	orr.w	r3, r3, #8
 8000a6a:	8283      	strh	r3, [r0, #20]
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <USART_OverSampling8Cmd>:
 8000a70:	8983      	ldrh	r3, [r0, #12]
 8000a72:	b919      	cbnz	r1, 8000a7c <USART_OverSampling8Cmd+0xc>
 8000a74:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a78:	8183      	strh	r3, [r0, #12]
 8000a7a:	4770      	bx	lr
 8000a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	8183      	strh	r3, [r0, #12]
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <USART_OneBitMethodCmd>:
 8000a8c:	8a83      	ldrh	r3, [r0, #20]
 8000a8e:	b929      	cbnz	r1, 8000a9c <USART_OneBitMethodCmd+0x10>
 8000a90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a94:	041b      	lsls	r3, r3, #16
 8000a96:	0c1b      	lsrs	r3, r3, #16
 8000a98:	8283      	strh	r3, [r0, #20]
 8000a9a:	4770      	bx	lr
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aa2:	8283      	strh	r3, [r0, #20]
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <USART_IrDAConfig>:
 8000aa8:	8a83      	ldrh	r3, [r0, #20]
 8000aaa:	f023 0304 	bic.w	r3, r3, #4
 8000aae:	041b      	lsls	r3, r3, #16
 8000ab0:	0c1b      	lsrs	r3, r3, #16
 8000ab2:	8283      	strh	r3, [r0, #20]
 8000ab4:	8a83      	ldrh	r3, [r0, #20]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	4319      	orrs	r1, r3
 8000aba:	8281      	strh	r1, [r0, #20]
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <USART_IrDACmd>:
 8000ac0:	8a83      	ldrh	r3, [r0, #20]
 8000ac2:	b929      	cbnz	r1, 8000ad0 <USART_IrDACmd+0x10>
 8000ac4:	f023 0302 	bic.w	r3, r3, #2
 8000ac8:	041b      	lsls	r3, r3, #16
 8000aca:	0c1b      	lsrs	r3, r3, #16
 8000acc:	8283      	strh	r3, [r0, #20]
 8000ace:	4770      	bx	lr
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	f043 0302 	orr.w	r3, r3, #2
 8000ad6:	8283      	strh	r3, [r0, #20]
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <USART_GetFlagStatus>:
 8000adc:	8803      	ldrh	r3, [r0, #0]
 8000ade:	4219      	tst	r1, r3
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2000      	moveq	r0, #0
 8000ae4:	2001      	movne	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <USART_ClearFlag>:
 8000ae8:	43c9      	mvns	r1, r1
 8000aea:	b289      	uxth	r1, r1
 8000aec:	8001      	strh	r1, [r0, #0]
 8000aee:	4770      	bx	lr

08000af0 <USART_GetITStatus>:
 8000af0:	b410      	push	{r4}
 8000af2:	f3c1 1342 	ubfx	r3, r1, #5, #3
 8000af6:	2401      	movs	r4, #1
 8000af8:	f001 021f 	and.w	r2, r1, #31
 8000afc:	42a3      	cmp	r3, r4
 8000afe:	fa04 f202 	lsl.w	r2, r4, r2
 8000b02:	d017      	beq.n	8000b34 <USART_GetITStatus+0x44>
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	bf0c      	ite	eq
 8000b08:	8a03      	ldrheq	r3, [r0, #16]
 8000b0a:	8a83      	ldrhne	r3, [r0, #20]
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	4013      	ands	r3, r2
 8000b10:	8802      	ldrh	r2, [r0, #0]
 8000b12:	b292      	uxth	r2, r2
 8000b14:	b153      	cbz	r3, 8000b2c <USART_GetITStatus+0x3c>
 8000b16:	0a09      	lsrs	r1, r1, #8
 8000b18:	2301      	movs	r3, #1
 8000b1a:	fa03 f101 	lsl.w	r1, r3, r1
 8000b1e:	4211      	tst	r1, r2
 8000b20:	bf0c      	ite	eq
 8000b22:	2000      	moveq	r0, #0
 8000b24:	2001      	movne	r0, #1
 8000b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	8983      	ldrh	r3, [r0, #12]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	4013      	ands	r3, r2
 8000b3a:	e7e9      	b.n	8000b10 <USART_GetITStatus+0x20>

08000b3c <USART_ClearITPendingBit>:
 8000b3c:	0a09      	lsrs	r1, r1, #8
 8000b3e:	2301      	movs	r3, #1
 8000b40:	408b      	lsls	r3, r1
 8000b42:	43db      	mvns	r3, r3
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	8003      	strh	r3, [r0, #0]
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b4e:	f000 b804 	b.w	8000b5a <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <LoopFillZerobss+0xe>)
	ldr	r3, [r3, r1]
 8000b54:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b56:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b58:	3104      	adds	r1, #4

08000b5a <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <LoopFillZerobss+0x12>)
	ldr	r3, =_edata
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <LoopFillZerobss+0x16>)
	adds	r2, r0, r1
 8000b5e:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b60:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b62:	f4ff aff6 	bcc.w	8000b52 <CopyDataInit>
	ldr	r2, =_sbss
 8000b66:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <LoopFillZerobss+0x1a>)
	b	LoopFillZerobss
 8000b68:	f000 b803 	b.w	8000b72 <LoopFillZerobss>

08000b6c <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b6c:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b6e:	f842 3b04 	str.w	r3, [r2], #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <LoopFillZerobss+0x1e>)
	cmp	r2, r3
 8000b74:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b76:	f4ff aff9 	bcc.w	8000b6c <FillZerobss>
/* Call the application's entry point.*/
	bl	main
 8000b7a:	f000 fa9b 	bl	80010b4 <main>
	bx	lr
 8000b7e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000b80:	080077e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, ip, sp, lr}
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b84:	20000000 	andcs	r0, r0, r0
	ldr	r3, =_edata
 8000b88:	20000470 	andcs	r0, r0, r0, ror r4
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000b8c:	20000470 	andcs	r0, r0, r0, ror r4
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b90:	200005a0 	andcs	r0, r0, r0, lsr #11

08000b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b94:	f7ff bffe 	b.w	8000b94 <ADC1_2_IRQHandler>

08000b98 <nothingProc>:
}


/* dummy proc */
void nothingProc(void)
{
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <usbStatusIn>:
    bDeviceState = ATTACHED;
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
}

void usbStatusIn(void)
{
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <usbStatusOut>:
    return;
}

void usbStatusOut(void)
{
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <usbGetInterfaceSetting>:

RESULT usbGetInterfaceSetting(u8 interface, u8 altSetting)
{
    // alt setting 0 -> program RAM, alt setting 1 or higher -> FLASH
    if (interface > NUM_ALT_SETTINGS) {
        return USB_UNSUPPORT;
 8000ba4:	2803      	cmp	r0, #3
    }

    return USB_SUCCESS;
}
 8000ba6:	bf8c      	ite	hi
 8000ba8:	2002      	movhi	r0, #2
 8000baa:	2000      	movls	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <usbGetConfiguration>:
 * in the core but we are given these callbacks at the
 * application level
 *******************************************/

void usbGetConfiguration(void)
{
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <usbSetConfiguration>:
    /* nothing process */
}

void usbSetConfiguration(void)
{
    if (pInformation->Current_Configuration != 0) {
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <usbSetConfiguration+0x10>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	7a9b      	ldrb	r3, [r3, #10]
 8000bba:	b113      	cbz	r3, 8000bc2 <usbSetConfiguration+0xe>
        bDeviceState = CONFIGURED;
 8000bbc:	4b02      	ldr	r3, [pc, #8]	; (8000bc8 <usbSetConfiguration+0x14>)
 8000bbe:	2205      	movs	r2, #5
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	4770      	bx	lr
 8000bc4:	20000594 	mulcs	r0, r4, r5
 8000bc8:	200005a4 	andcs	r0, r0, r4, lsr #11

08000bcc <usbGetInterface>:
    }
}

void usbGetInterface(void)
{
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <usbSetInterface>:
    /* nothing process */
}

void usbSetInterface(void)
{
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <usbGetStatus>:
    /* nothing process */
}

void usbGetStatus(void)
{
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <usbClearFeature>:
    /* nothing process */
}

void usbClearFeature(void)
{
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <usbSetEndpointFeature>:
    /* nothing process */
}

void usbSetEndpointFeature(void)
{
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <usbSetDeviceFeature>:
    /* nothing process */
}

void usbSetDeviceFeature(void)
{
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <usbSetDeviceAddress>:
    /* nothing process */
}

void usbSetDeviceAddress(void)
{
    bDeviceState = ADDRESSED;
 8000be4:	4b01      	ldr	r3, [pc, #4]	; (8000bec <usbSetDeviceAddress+0x8>)
 8000be6:	2204      	movs	r2, #4
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	4770      	bx	lr
 8000bec:	200005a4 	andcs	r0, r0, r4, lsr #11

08000bf0 <usbReset>:
    usbEnbISR();
    bDeviceState = UNCONNECTED;
}

void usbReset(void)
{    
 8000bf0:	b538      	push	{r3, r4, r5, lr}
    dfuUpdateByReset();
 8000bf2:	f001 f835 	bl	8001c60 <dfuUpdateByReset>

    pInformation->Current_Configuration = 0;
 8000bf6:	4a21      	ldr	r2, [pc, #132]	; (8000c7c <usbReset+0x8c>)
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000bf8:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <usbReset+0x90>)

void usbReset(void)
{    
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 8000bfa:	6812      	ldr	r2, [r2, #0]
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000bfc:	681b      	ldr	r3, [r3, #0]

void usbReset(void)
{    
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 8000bfe:	2400      	movs	r4, #0
 8000c00:	7294      	strb	r4, [r2, #10]
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000c02:	79d8      	ldrb	r0, [r3, #7]

    _SetBTABLE(BTABLE_ADDRESS);
 8000c04:	491f      	ldr	r1, [pc, #124]	; (8000c84 <usbReset+0x94>)

    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
 8000c06:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <usbReset+0x98>)
void usbReset(void)
{    
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000c08:	7250      	strb	r0, [r2, #9]

    _SetBTABLE(BTABLE_ADDRESS);
 8000c0a:	600c      	str	r4, [r1, #0]

    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
 8000c0c:	6818      	ldr	r0, [r3, #0]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8000c0e:	4a1f      	ldr	r2, [pc, #124]	; (8000c8c <usbReset+0x9c>)
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];

    _SetBTABLE(BTABLE_ADDRESS);

    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
 8000c10:	f420 40ec 	bic.w	r0, r0, #30208	; 0x7600
 8000c14:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 8000c18:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8000c1c:	b280      	uxth	r0, r0
 8000c1e:	6018      	str	r0, [r3, #0]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);
 8000c20:	6818      	ldr	r0, [r3, #0]

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8000c22:	2540      	movs	r5, #64	; 0x40

    _SetBTABLE(BTABLE_ADDRESS);

    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
    _SetEPTxStatus(ENDP0, EP_TX_STALL);
 8000c24:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 8000c28:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8000c2c:	b280      	uxth	r0, r0
 8000c2e:	f080 0010 	eor.w	r0, r0, #16
 8000c32:	6018      	str	r0, [r3, #0]

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8000c34:	6808      	ldr	r0, [r1, #0]
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8000c36:	680b      	ldr	r3, [r1, #0]
 8000c38:	b281      	uxth	r1, r0
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000

    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
    _SetEPTxStatus(ENDP0, EP_TX_STALL);

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8000c40:	440a      	add	r2, r1
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8000c42:	f503 5340 	add.w	r3, r3, #12288	; 0x3000

    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
    _SetEPTxStatus(ENDP0, EP_TX_STALL);

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8000c46:	0052      	lsls	r2, r2, #1
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2180      	movs	r1, #128	; 0x80

    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
    _SetEPTxStatus(ENDP0, EP_TX_STALL);

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8000c4c:	6015      	str	r5, [r2, #0]
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);

    Clear_Status_Out(ENDP0);
 8000c4e:	4620      	mov	r0, r4
    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
    _SetEPTxStatus(ENDP0, EP_TX_STALL);

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8000c50:	6019      	str	r1, [r3, #0]

    Clear_Status_Out(ENDP0);
 8000c52:	f005 f8e9 	bl	8005e28 <Clear_Status_Out>

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <usbReset+0xa0>)
 8000c58:	4620      	mov	r0, r4
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8000c60:	f005 f93a 	bl	8005ed8 <SetEPRxCount>
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);
 8000c64:	4620      	mov	r0, r4
 8000c66:	f005 f8d0 	bl	8005e0a <SetEPRxValid>

    bDeviceState = ATTACHED;
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <usbReset+0xa4>)
 8000c6c:	2201      	movs	r2, #1
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 8000c6e:	4620      	mov	r0, r4

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);

    bDeviceState = ATTACHED;
 8000c70:	601a      	str	r2, [r3, #0]
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
}
 8000c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);

    bDeviceState = ATTACHED;
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 8000c76:	f005 bdd1 	b.w	800681c <SetDeviceAddress>
 8000c7a:	bf00      	nop
 8000c7c:	20000594 	mulcs	r0, r4, r5
 8000c80:	200002bc 			; <UNDEFINED> instruction: 0x200002bc
 8000c84:	40005c50 	andmi	r5, r0, r0, asr ip
 8000c88:	40005c00 	andmi	r5, r0, r0, lsl #24
 8000c8c:	20003004 	andcs	r3, r0, r4
 8000c90:	2000056c 	andcs	r0, r0, ip, ror #10
 8000c94:	200005a4 	andcs	r0, r0, r4, lsr #11

08000c98 <usbDataSetup>:
void usbStatusOut(void)
{
    return;
}

RESULT usbDataSetup(u8 request) {
 8000c98:	b538      	push	{r3, r4, r5, lr}
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    // handle dfu class requests
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 8000c9a:	4c17      	ldr	r4, [pc, #92]	; (8000cf8 <usbDataSetup+0x60>)
void usbStatusOut(void)
{
    return;
}

RESULT usbDataSetup(u8 request) {
 8000c9c:	4605      	mov	r5, r0
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    // handle dfu class requests
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ca6:	2b21      	cmp	r3, #33	; 0x21
 8000ca8:	d001      	beq.n	8000cae <usbDataSetup+0x16>
        (*CopyRoutine)(0);

        return USB_SUCCESS;
    }

    return USB_UNSUPPORT;
 8000caa:	2002      	movs	r0, #2
}
 8000cac:	bd38      	pop	{r3, r4, r5, pc}
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    // handle dfu class requests
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
        if (dfuUpdateByRequest()) {
 8000cae:	f000 fe07 	bl	80018c0 <dfuUpdateByRequest>
 8000cb2:	2800      	cmp	r0, #0
 8000cb4:	d0f9      	beq.n	8000caa <usbDataSetup+0x12>
            // successfull state transition, handle the request
            switch (request) {
 8000cb6:	3d01      	subs	r5, #1
 8000cb8:	2d04      	cmp	r5, #4
 8000cba:	d8f6      	bhi.n	8000caa <usbDataSetup+0x12>
 8000cbc:	a301      	add	r3, pc, #4	; (adr r3, 8000cc4 <usbDataSetup+0x2c>)
 8000cbe:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8000cc2:	bf00      	nop
 8000cc4:	08000cf3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, sl, fp}
 8000cc8:	08000cef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, sl, fp}
 8000ccc:	08000ceb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, sl, fp}
 8000cd0:	08000cab 	stmdaeq	r0, {r0, r1, r3, r5, r7, sl, fp}
 8000cd4:	08000cd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, sl, fp}
            case(DFU_GETSTATUS):
                CopyRoutine = dfuCopyStatus;
                break;
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <usbDataSetup+0x64>)
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000cda:	6822      	ldr	r2, [r4, #0]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000cdc:	2400      	movs	r4, #0
        (*CopyRoutine)(0);
 8000cde:	4620      	mov	r0, r4
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000ce0:	6193      	str	r3, [r2, #24]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000ce2:	8254      	strh	r4, [r2, #18]
        (*CopyRoutine)(0);
 8000ce4:	4798      	blx	r3

        return USB_SUCCESS;
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
        if (dfuUpdateByRequest()) {
            // successfull state transition, handle the request
            switch (request) {
            case(DFU_GETSTATUS):
                CopyRoutine = dfuCopyStatus;
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <usbDataSetup+0x68>)
 8000cec:	e7f5      	b.n	8000cda <usbDataSetup+0x42>
                break;
            case(DFU_DNLOAD):
                CopyRoutine = dfuCopyDNLOAD;
                break;
            case(DFU_UPLOAD):
                CopyRoutine = dfuCopyUPLOAD;
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <usbDataSetup+0x6c>)
                break;
 8000cf0:	e7f3      	b.n	8000cda <usbDataSetup+0x42>
                break;
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
                break;
            case(DFU_DNLOAD):
                CopyRoutine = dfuCopyDNLOAD;
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <usbDataSetup+0x70>)
                break;
 8000cf4:	e7f1      	b.n	8000cda <usbDataSetup+0x42>
 8000cf6:	bf00      	nop
 8000cf8:	20000594 	mulcs	r0, r4, r5
 8000cfc:	08001ca5 	stmdaeq	r0, {r0, r2, r5, r7, sl, fp, ip}
 8000d00:	08001cbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, sl, fp, ip}
 8000d04:	08001d09 	stmdaeq	r0, {r0, r3, r8, sl, fp, ip}
 8000d08:	08001cd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, sl, fp, ip}

08000d0c <usbGetDeviceDescriptor>:
    return USB_SUCCESS;
}

u8 *usbGetDeviceDescriptor(u16 len)
{
    return Standard_GetDescriptorData(len, &usbDeviceDescriptorDFU);
 8000d0c:	4901      	ldr	r1, [pc, #4]	; (8000d14 <usbGetDeviceDescriptor+0x8>)
 8000d0e:	f005 bb85 	b.w	800641c <Standard_GetDescriptorData>
 8000d12:	bf00      	nop
 8000d14:	20000160 	andcs	r0, r0, r0, ror #2

08000d18 <usbGetConfigDescriptor>:
}

u8 *usbGetConfigDescriptor(u16 len)
{
    return Standard_GetDescriptorData(len, &usbConfigDescriptorDFU);
 8000d18:	4901      	ldr	r1, [pc, #4]	; (8000d20 <usbGetConfigDescriptor+0x8>)
 8000d1a:	f005 bb7f 	b.w	800641c <Standard_GetDescriptorData>
 8000d1e:	bf00      	nop
 8000d20:	200002bc 			; <UNDEFINED> instruction: 0x200002bc

08000d24 <usbGetStringDescriptor>:
}

u8 *usbGetStringDescriptor(u16 len)
{
    u8 strIndex = pInformation->USBwValue0;
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <usbGetStringDescriptor+0x18>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	789b      	ldrb	r3, [r3, #2]
    if (strIndex > STR_DESC_LEN) {
 8000d2a:	2b07      	cmp	r3, #7
 8000d2c:	d804      	bhi.n	8000d38 <usbGetStringDescriptor+0x14>
        return NULL;
    } else {
        return Standard_GetDescriptorData(len, &usbStringDescriptor[strIndex]);
 8000d2e:	4904      	ldr	r1, [pc, #16]	; (8000d40 <usbGetStringDescriptor+0x1c>)
 8000d30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8000d34:	f005 bb72 	b.w	800641c <Standard_GetDescriptorData>
    }
}
 8000d38:	2000      	movs	r0, #0
 8000d3a:	4770      	bx	lr
 8000d3c:	20000594 	mulcs	r0, r4, r5
 8000d40:	200000a8 	andcs	r0, r0, r8, lsr #1

08000d44 <usbGetFunctionalDescriptor>:

u8 *usbGetFunctionalDescriptor(u16 len)
{
    return Standard_GetDescriptorData(len, &usbFunctionalDescriptor);
 8000d44:	4901      	ldr	r1, [pc, #4]	; (8000d4c <usbGetFunctionalDescriptor+0x8>)
 8000d46:	f005 bb69 	b.w	800641c <Standard_GetDescriptorData>
 8000d4a:	bf00      	nop
 8000d4c:	200000f4 	strdcs	r0, [r0], -r4

08000d50 <usbNoDataSetup>:

    return USB_UNSUPPORT;
}

RESULT usbNoDataSetup(u8 request)
{
 8000d50:	b508      	push	{r3, lr}
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <usbNoDataSetup+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d5c:	2b21      	cmp	r3, #33	; 0x21
 8000d5e:	d001      	beq.n	8000d64 <usbNoDataSetup+0x14>
        // todo, keep track of the destination interface, often stored in wIndex
        if (dfuUpdateByRequest()) {
            return USB_SUCCESS;
        }
    }
    return USB_UNSUPPORT;
 8000d60:	2002      	movs	r0, #2
}
 8000d62:	bd08      	pop	{r3, pc}

RESULT usbNoDataSetup(u8 request)
{
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
        // todo, keep track of the destination interface, often stored in wIndex
        if (dfuUpdateByRequest()) {
 8000d64:	f000 fdac 	bl	80018c0 <dfuUpdateByRequest>
 8000d68:	2800      	cmp	r0, #0
            return USB_SUCCESS;
 8000d6a:	bf0c      	ite	eq
 8000d6c:	2002      	moveq	r0, #2
 8000d6e:	2000      	movne	r0, #0
 8000d70:	bd08      	pop	{r3, pc}
 8000d72:	bf00      	nop
 8000d74:	20000594 	mulcs	r0, r4, r5

08000d78 <usbInit>:

    return USB_SUCCESS;
}

void usbInit(void)
{
 8000d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d7c:	b082      	sub	sp, #8
    dfuInit();
 8000d7e:	f000 fd4f 	bl	8001820 <dfuInit>

    pInformation->Current_Configuration = 0;
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <usbInit+0x70>)
 8000d84:	2400      	movs	r4, #0
 8000d86:	681b      	ldr	r3, [r3, #0]
}

RESULT usbPowerOn(void)
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;
 8000d88:	4a18      	ldr	r2, [pc, #96]	; (8000dec <usbInit+0x74>)

void usbInit(void)
{
    dfuInit();

    pInformation->Current_Configuration = 0;
 8000d8a:	729c      	strb	r4, [r3, #10]
}

RESULT usbPowerOn(void)
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;
 8000d8c:	69d1      	ldr	r1, [r2, #28]

    _SetCNTR(CNTR_FRES);
 8000d8e:	4d18      	ldr	r5, [pc, #96]	; (8000df0 <usbInit+0x78>)
    _SetCNTR(0);
    _SetISTR(0);
 8000d90:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8000e00 <usbInit+0x88>

    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000d94:	4f17      	ldr	r7, [pc, #92]	; (8000df4 <usbInit+0x7c>)
RESULT usbPowerOn(void)
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;

    _SetCNTR(CNTR_FRES);
 8000d96:	2601      	movs	r6, #1
    _SetCNTR(0);
    _SetISTR(0);

    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000d98:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
}

RESULT usbPowerOn(void)
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;
 8000d9c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000da0:	61d1      	str	r1, [r2, #28]
    // present to host
#ifndef USB_DISC_HARDWIRED
#ifdef HAS_MAPLE_HARDWARE
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
#else
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 1);
 8000da2:	4815      	ldr	r0, [pc, #84]	; (8000df8 <usbInit+0x80>)
RESULT usbPowerOn(void)
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;

    _SetCNTR(CNTR_FRES);
 8000da4:	602e      	str	r6, [r5, #0]
    // present to host
#ifndef USB_DISC_HARDWIRED
#ifdef HAS_MAPLE_HARDWARE
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
#else
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 1);
 8000da6:	4632      	mov	r2, r6
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;

    _SetCNTR(CNTR_FRES);
    _SetCNTR(0);
 8000da8:	602c      	str	r4, [r5, #0]
    // present to host
#ifndef USB_DISC_HARDWIRED
#ifdef HAS_MAPLE_HARDWARE
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
#else
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 1);
 8000daa:	210c      	movs	r1, #12
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;

    _SetCNTR(CNTR_FRES);
    _SetCNTR(0);
    _SetISTR(0);
 8000dac:	f8c8 4000 	str.w	r4, [r8]

    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000db0:	803b      	strh	r3, [r7, #0]
    _SetCNTR(wInterrupt_Mask);
 8000db2:	602b      	str	r3, [r5, #0]
    // present to host
#ifndef USB_DISC_HARDWIRED
#ifdef HAS_MAPLE_HARDWARE
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
#else
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 1);
 8000db4:	f000 fa1a 	bl	80011ec <gpio_write_bit>

    pInformation->Current_Configuration = 0;
    usbPowerOn();

    _SetISTR(0);
    wInterrupt_Mask = ISR_MSK;
 8000db8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
    dfuInit();

    pInformation->Current_Configuration = 0;
    usbPowerOn();

    _SetISTR(0);
 8000dbc:	f8c8 4000 	str.w	r4, [r8]

void usbEnbISR(void)
{
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 8000dc0:	2214      	movs	r2, #20

    pInformation->Current_Configuration = 0;
    usbPowerOn();

    _SetISTR(0);
    wInterrupt_Mask = ISR_MSK;
 8000dc2:	803b      	strh	r3, [r7, #0]

    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
 8000dc4:	a801      	add	r0, sp, #4
    pInformation->Current_Configuration = 0;
    usbPowerOn();

    _SetISTR(0);
    wInterrupt_Mask = ISR_MSK;
    _SetCNTR(wInterrupt_Mask);
 8000dc6:	602b      	str	r3, [r5, #0]
void usbEnbISR(void)
{
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000dc8:	f88d 4005 	strb.w	r4, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000dcc:	f88d 4006 	strb.w	r4, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
 8000dd0:	f88d 6007 	strb.w	r6, [sp, #7]

void usbEnbISR(void)
{
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 8000dd4:	f88d 2004 	strb.w	r2, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
 8000dd8:	f000 fc50 	bl	800167c <nvicInit>
    wInterrupt_Mask = ISR_MSK;
    _SetCNTR(wInterrupt_Mask);

    // configure the cortex M3 private peripheral NVIC
    usbEnbISR();
    bDeviceState = UNCONNECTED;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <usbInit+0x84>)
 8000dde:	601c      	str	r4, [r3, #0]
}
 8000de0:	b002      	add	sp, #8
 8000de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000de6:	bf00      	nop
 8000de8:	20000594 	mulcs	r0, r4, r5
 8000dec:	40021000 	andmi	r1, r2, r0
 8000df0:	40005c40 	andmi	r5, r0, r0, asr #24
 8000df4:	20000598 	mulcs	r0, r8, r5
 8000df8:	40010800 	andmi	r0, r1, r0, lsl #16
 8000dfc:	200005a4 	andcs	r0, r0, r4, lsr #11
 8000e00:	40005c44 	andmi	r5, r0, r4, asr #24

08000e04 <setupUSB>:

static RCC_TypeDef *RCC_Blot = (RCC_TypeDef *)RCC;


void setupUSB (void)
{
 8000e04:	b530      	push	{r4, r5, lr}
    #ifndef USB_DISC_PIN  
    #define USB_DISC_PIN    12
    #endif

    // set up pin in host disconnected state
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
 8000e06:	4816      	ldr	r0, [pc, #88]	; (8000e60 <setupUSB+0x5c>)

static RCC_TypeDef *RCC_Blot = (RCC_TypeDef *)RCC;


void setupUSB (void)
{
 8000e08:	b083      	sub	sp, #12
    #ifndef USB_DISC_PIN  
    #define USB_DISC_PIN    12
    #endif

    // set up pin in host disconnected state
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
 8000e0a:	210c      	movs	r1, #12
 8000e0c:	2200      	movs	r2, #0
    SET_REG(GPIO_CR(USB_DISC_BANK, USB_DISC_PIN),
 8000e0e:	4c15      	ldr	r4, [pc, #84]	; (8000e64 <setupUSB+0x60>)
    #ifndef USB_DISC_PIN  
    #define USB_DISC_PIN    12
    #endif

    // set up pin in host disconnected state
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
 8000e10:	f000 f9ec 	bl	80011ec <gpio_write_bit>
    SET_REG(GPIO_CR(USB_DISC_BANK, USB_DISC_PIN),
 8000e14:	200c      	movs	r0, #12
 8000e16:	6825      	ldr	r5, [r4, #0]
 8000e18:	f000 fce4 	bl	80017e4 <crMask>
 8000e1c:	4028      	ands	r0, r5
            | CR_OUTPUT_PP << CR_SHITF(USB_DISC_PIN)
        );

    // wait a while to make sure host disconnects us
    volatile u32 delay;
    for(delay = 256; delay; delay--);
 8000e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
    #define USB_DISC_PIN    12
    #endif

    // set up pin in host disconnected state
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
    SET_REG(GPIO_CR(USB_DISC_BANK, USB_DISC_PIN),
 8000e22:	f440 3580 	orr.w	r5, r0, #65536	; 0x10000
 8000e26:	6025      	str	r5, [r4, #0]
            | CR_OUTPUT_PP << CR_SHITF(USB_DISC_PIN)
        );

    // wait a while to make sure host disconnects us
    volatile u32 delay;
    for(delay = 256; delay; delay--);
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	9b01      	ldr	r3, [sp, #4]
 8000e2c:	b12b      	cbz	r3, 8000e3a <setupUSB+0x36>
 8000e2e:	9b01      	ldr	r3, [sp, #4]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	9b01      	ldr	r3, [sp, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f9      	bne.n	8000e2e <setupUSB+0x2a>
    #endif
#endif
#endif

  // initialize the usb application  
  wTransferSize = getFlashPageSize();
 8000e3a:	f000 fce5 	bl	8001808 <getFlashPageSize>
  u8_usbConfigDescriptorDFU[41] = (wTransferSize & 0x00FF);
 8000e3e:	4c0a      	ldr	r4, [pc, #40]	; (8000e68 <setupUSB+0x64>)
  u8_usbConfigDescriptorDFU[42] = (wTransferSize & 0xFF00) >> 8;
  
  u8_usbFunctionalDescriptor[5] = (wTransferSize & 0x00FF);
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <setupUSB+0x68>)
    #endif
#endif
#endif

  // initialize the usb application  
  wTransferSize = getFlashPageSize();
 8000e42:	4d0b      	ldr	r5, [pc, #44]	; (8000e70 <setupUSB+0x6c>)
  u8_usbConfigDescriptorDFU[41] = (wTransferSize & 0x00FF);
 8000e44:	b2c1      	uxtb	r1, r0
  u8_usbConfigDescriptorDFU[42] = (wTransferSize & 0xFF00) >> 8;
 8000e46:	f3c0 2207 	ubfx	r2, r0, #8, #8
    #endif
#endif
#endif

  // initialize the usb application  
  wTransferSize = getFlashPageSize();
 8000e4a:	6028      	str	r0, [r5, #0]
  u8_usbConfigDescriptorDFU[41] = (wTransferSize & 0x00FF);
 8000e4c:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
  u8_usbConfigDescriptorDFU[42] = (wTransferSize & 0xFF00) >> 8;
 8000e50:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  
  u8_usbFunctionalDescriptor[5] = (wTransferSize & 0x00FF);
 8000e54:	7159      	strb	r1, [r3, #5]
  u8_usbFunctionalDescriptor[6] = (wTransferSize & 0xFF00) >> 8;  
 8000e56:	719a      	strb	r2, [r3, #6]

/* application function definitions */
void usbAppInit(void)
{
    // hook in to usb_core, depends on all those damn non encapsulated externs!
    USB_Init();
 8000e58:	f005 f908 	bl	800606c <USB_Init>
  
  u8_usbFunctionalDescriptor[5] = (wTransferSize & 0x00FF);
  u8_usbFunctionalDescriptor[6] = (wTransferSize & 0xFF00) >> 8;  
  
  usbAppInit();
}
 8000e5c:	b003      	add	sp, #12
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	40010800 	andmi	r0, r1, r0, lsl #16
 8000e64:	40010804 	andmi	r0, r1, r4, lsl #16
 8000e68:	20000100 	andcs	r0, r0, r0, lsl #2
 8000e6c:	20000140 	andcs	r0, r0, r0, asr #2
 8000e70:	20000470 	andcs	r0, r0, r0, ror r4

08000e74 <usbDsbBus>:

    return USB_SUCCESS;
}

RESULT usbPowerOff(void) {
    _SetCNTR(CNTR_FRES);
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <usbDsbBus+0x2c>)
    _SetISTR(0);
 8000e76:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <usbDsbBus+0x30>)
 8000e78:	2100      	movs	r1, #0

    return USB_SUCCESS;
}

RESULT usbPowerOff(void) {
    _SetCNTR(CNTR_FRES);
 8000e7a:	2201      	movs	r2, #1
  usbAppInit();
}


void usbDsbBus(void)
{
 8000e7c:	b510      	push	{r4, lr}

    return USB_SUCCESS;
}

RESULT usbPowerOff(void) {
    _SetCNTR(CNTR_FRES);
 8000e7e:	601a      	str	r2, [r3, #0]
    _SetISTR(0);
    _SetCNTR(CNTR_FRES + CNTR_PDWN);
 8000e80:	2403      	movs	r4, #3
    return USB_SUCCESS;
}

RESULT usbPowerOff(void) {
    _SetCNTR(CNTR_FRES);
    _SetISTR(0);
 8000e82:	6001      	str	r1, [r0, #0]
    // act unplugged to host
#ifndef USB_DISC_HARDWIRED
#ifdef HAS_MAPLE_HARDWARE
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 1);
#else
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
 8000e84:	f500 402b 	add.w	r0, r0, #43776	; 0xab00
 8000e88:	460a      	mov	r2, r1
}

RESULT usbPowerOff(void) {
    _SetCNTR(CNTR_FRES);
    _SetISTR(0);
    _SetCNTR(CNTR_FRES + CNTR_PDWN);
 8000e8a:	601c      	str	r4, [r3, #0]
    // act unplugged to host
#ifndef USB_DISC_HARDWIRED
#ifdef HAS_MAPLE_HARDWARE
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 1);
#else
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
 8000e8c:	30bc      	adds	r0, #188	; 0xbc
 8000e8e:	210c      	movs	r1, #12
 8000e90:	f000 f9ac 	bl	80011ec <gpio_write_bit>
#endif
#endif

    // Disable USB clock
    RCC_Blot->APB1ENR &= ~RCC_APB1ENR_USB_CLK;
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <usbDsbBus+0x34>)
 8000e96:	69da      	ldr	r2, [r3, #28]
 8000e98:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000e9c:	61da      	str	r2, [r3, #28]
 8000e9e:	bd10      	pop	{r4, pc}
 8000ea0:	40005c40 	andmi	r5, r0, r0, asr #24
 8000ea4:	40005c44 	andmi	r5, r0, r4, asr #24
 8000ea8:	40021000 	andmi	r1, r2, r0

08000eac <usbResume>:
void usbResume(RESUME_STATE eResumeSetVal)
{
    u16 wCNTR;

    if (eResumeSetVal != RESUME_ESOF)
        ResumeS.eState = eResumeSetVal;
 8000eac:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <usbResume+0xc0>)

void usbResume(RESUME_STATE eResumeSetVal)
{
    u16 wCNTR;

    if (eResumeSetVal != RESUME_ESOF)
 8000eae:	2807      	cmp	r0, #7
    // undo power reduction handlers here
    _SetCNTR(ISR_MSK);
}

void usbResume(RESUME_STATE eResumeSetVal)
{
 8000eb0:	b410      	push	{r4}
    u16 wCNTR;

    if (eResumeSetVal != RESUME_ESOF)
        ResumeS.eState = eResumeSetVal;
 8000eb2:	bf18      	it	ne
 8000eb4:	7018      	strbne	r0, [r3, #0]

    switch (ResumeS.eState) {
 8000eb6:	781a      	ldrb	r2, [r3, #0]
 8000eb8:	2a05      	cmp	r2, #5
 8000eba:	d851      	bhi.n	8000f60 <usbResume+0xb4>
 8000ebc:	e8df f002 	tbb	[pc, r2]
 8000ec0:	38312315 	ldmdacc	r1!, {r0, r2, r4, r8, r9, sp}
 8000ec4:	785a0343 	ldmdavc	sl, {r0, r1, r6, r8, r9}^
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_ON;
        ResumeS.bESOFcnt = 10;
        break;
    case RESUME_ON:
        ResumeS.bESOFcnt--;
 8000ec8:	4928      	ldr	r1, [pc, #160]	; (8000f6c <usbResume+0xc0>)
 8000eca:	3a01      	subs	r2, #1
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	705a      	strb	r2, [r3, #1]
        if (ResumeS.bESOFcnt == 0) {
 8000ed0:	785b      	ldrb	r3, [r3, #1]
 8000ed2:	b93b      	cbnz	r3, 8000ee4 <usbResume+0x38>
            wCNTR = _GetCNTR();
 8000ed4:	4a26      	ldr	r2, [pc, #152]	; (8000f70 <usbResume+0xc4>)
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 8000ed6:	f64f 73ef 	movw	r3, #65519	; 0xffef
        ResumeS.bESOFcnt = 10;
        break;
    case RESUME_ON:
        ResumeS.bESOFcnt--;
        if (ResumeS.bESOFcnt == 0) {
            wCNTR = _GetCNTR();
 8000eda:	6814      	ldr	r4, [r2, #0]
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
            ResumeS.eState = RESUME_OFF;
 8000edc:	2006      	movs	r0, #6
    case RESUME_ON:
        ResumeS.bESOFcnt--;
        if (ResumeS.bESOFcnt == 0) {
            wCNTR = _GetCNTR();
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 8000ede:	4023      	ands	r3, r4
 8000ee0:	6013      	str	r3, [r2, #0]
            ResumeS.eState = RESUME_OFF;
 8000ee2:	7008      	strb	r0, [r1, #0]
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
        break;
    }
}
 8000ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ee8:	4770      	bx	lr
void usbResumeInit(void)
{
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
 8000eea:	4a21      	ldr	r2, [pc, #132]	; (8000f70 <usbResume+0xc4>)
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000eec:	f64f 71fb 	movw	r1, #65531	; 0xfffb
void usbResumeInit(void)
{
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
 8000ef0:	6810      	ldr	r0, [r2, #0]
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);

    // undo power reduction handlers here
    _SetCNTR(ISR_MSK);
 8000ef2:	f44f 443f 	mov.w	r4, #48896	; 0xbf00
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000ef6:	4001      	ands	r1, r0
        ResumeS.eState = eResumeSetVal;

    switch (ResumeS.eState) {
    case RESUME_EXTERNAL:
        usbResumeInit();
        ResumeS.eState = RESUME_OFF;
 8000ef8:	2006      	movs	r0, #6
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000efa:	6011      	str	r1, [r2, #0]

    // undo power reduction handlers here
    _SetCNTR(ISR_MSK);
 8000efc:	6014      	str	r4, [r2, #0]
        ResumeS.eState = eResumeSetVal;

    switch (ResumeS.eState) {
    case RESUME_EXTERNAL:
        usbResumeInit();
        ResumeS.eState = RESUME_OFF;
 8000efe:	7018      	strb	r0, [r3, #0]
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
        break;
    }
}
 8000f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f04:	4770      	bx	lr
void usbResumeInit(void)
{
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
 8000f06:	4a1a      	ldr	r2, [pc, #104]	; (8000f70 <usbResume+0xc4>)
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000f08:	f64f 71fb 	movw	r1, #65531	; 0xfffb
void usbResumeInit(void)
{
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
 8000f0c:	6810      	ldr	r0, [r2, #0]
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);

    // undo power reduction handlers here
    _SetCNTR(ISR_MSK);
 8000f0e:	f44f 443f 	mov.w	r4, #48896	; 0xbf00
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000f12:	4001      	ands	r1, r0
        usbResumeInit();
        ResumeS.eState = RESUME_OFF;
        break;
    case RESUME_INTERNAL:
        usbResumeInit();
        ResumeS.eState = RESUME_START;
 8000f14:	2004      	movs	r0, #4
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000f16:	6011      	str	r1, [r2, #0]

    // undo power reduction handlers here
    _SetCNTR(ISR_MSK);
 8000f18:	6014      	str	r4, [r2, #0]
        usbResumeInit();
        ResumeS.eState = RESUME_OFF;
        break;
    case RESUME_INTERNAL:
        usbResumeInit();
        ResumeS.eState = RESUME_START;
 8000f1a:	7018      	strb	r0, [r3, #0]
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
        break;
    }
}
 8000f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f20:	4770      	bx	lr
    case RESUME_INTERNAL:
        usbResumeInit();
        ResumeS.eState = RESUME_START;
        break;
    case RESUME_LATER:
        ResumeS.bESOFcnt = 2;
 8000f22:	2102      	movs	r1, #2
 8000f24:	7059      	strb	r1, [r3, #1]
        ResumeS.eState = RESUME_WAIT;
 8000f26:	2203      	movs	r2, #3
 8000f28:	701a      	strb	r2, [r3, #0]
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
        break;
    }
}
 8000f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f2e:	4770      	bx	lr
    case RESUME_LATER:
        ResumeS.bESOFcnt = 2;
        ResumeS.eState = RESUME_WAIT;
        break;
    case RESUME_WAIT:
        ResumeS.bESOFcnt--;
 8000f30:	785a      	ldrb	r2, [r3, #1]
 8000f32:	490e      	ldr	r1, [pc, #56]	; (8000f6c <usbResume+0xc0>)
 8000f34:	3a01      	subs	r2, #1
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	705a      	strb	r2, [r3, #1]
        if (ResumeS.bESOFcnt == 0)
 8000f3a:	785b      	ldrb	r3, [r3, #1]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1d1      	bne.n	8000ee4 <usbResume+0x38>
            ResumeS.eState = RESUME_START;
 8000f40:	2304      	movs	r3, #4
 8000f42:	700b      	strb	r3, [r1, #0]
 8000f44:	e7ce      	b.n	8000ee4 <usbResume+0x38>
        break;
    case RESUME_START:
        wCNTR = _GetCNTR();
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <usbResume+0xc4>)
        wCNTR |= CNTR_RESUME;
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_ON;
 8000f48:	2005      	movs	r0, #5
        ResumeS.bESOFcnt--;
        if (ResumeS.bESOFcnt == 0)
            ResumeS.eState = RESUME_START;
        break;
    case RESUME_START:
        wCNTR = _GetCNTR();
 8000f4a:	6814      	ldr	r4, [r2, #0]
        wCNTR |= CNTR_RESUME;
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_ON;
        ResumeS.bESOFcnt = 10;
 8000f4c:	210a      	movs	r1, #10
        ResumeS.bESOFcnt--;
        if (ResumeS.bESOFcnt == 0)
            ResumeS.eState = RESUME_START;
        break;
    case RESUME_START:
        wCNTR = _GetCNTR();
 8000f4e:	b2a4      	uxth	r4, r4
        wCNTR |= CNTR_RESUME;
        _SetCNTR(wCNTR);
 8000f50:	f044 0410 	orr.w	r4, r4, #16
 8000f54:	6014      	str	r4, [r2, #0]
        ResumeS.eState = RESUME_ON;
 8000f56:	7018      	strb	r0, [r3, #0]
        ResumeS.bESOFcnt = 10;
 8000f58:	7059      	strb	r1, [r3, #1]
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
        break;
    }
}
 8000f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f5e:	4770      	bx	lr
        }
        break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
 8000f60:	2206      	movs	r2, #6
 8000f62:	701a      	strb	r2, [r3, #0]
        break;
    }
}
 8000f64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000478 	andcs	r0, r0, r8, ror r4
 8000f70:	40005c40 	andmi	r5, r0, r0, asr #24

08000f74 <usbEnbISR>:
}
/***** end of USER STANDARD REQUESTS *****/


void usbEnbISR(void)
{
 8000f74:	b500      	push	{lr}
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <usbEnbISR+0x18>)
}
/***** end of USER STANDARD REQUESTS *****/


void usbEnbISR(void)
{
 8000f78:	b083      	sub	sp, #12
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 8000f7a:	a802      	add	r0, sp, #8
 8000f7c:	f840 3d04 	str.w	r3, [r0, #-4]!
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
 8000f80:	f000 fb7c 	bl	800167c <nvicInit>
}
 8000f84:	b003      	add	sp, #12
 8000f86:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f8a:	bf00      	nop
 8000f8c:	01000014 	tsteq	r0, r4, lsl r0

08000f90 <usbDsbISR>:

void usbDsbISR(void)
{
 8000f90:	b500      	push	{lr}
 8000f92:	b083      	sub	sp, #12
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 8000f94:	2314      	movs	r3, #20
 8000f96:	a802      	add	r0, sp, #8
 8000f98:	f840 3d04 	str.w	r3, [r0, #-4]!
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
    nvicInit(&NVIC_InitStructure);
 8000f9c:	f000 fb6e 	bl	800167c <nvicInit>
}
 8000fa0:	b003      	add	sp, #12
 8000fa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fa6:	bf00      	nop

08000fa8 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    wIstr = _GetISTR();
 8000faa:	4b31      	ldr	r3, [pc, #196]	; (8001070 <USB_LP_CAN1_RX0_IRQHandler+0xc8>)
 8000fac:	4c31      	ldr	r4, [pc, #196]	; (8001074 <USB_LP_CAN1_RX0_IRQHandler+0xcc>)
 8000fae:	681b      	ldr	r3, [r3, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
 8000fb0:	4d31      	ldr	r5, [pc, #196]	; (8001078 <USB_LP_CAN1_RX0_IRQHandler+0xd0>)
    nvicInit(&NVIC_InitStructure);
}

void USB_LP_CAN1_RX0_IRQHandler(void)
{
    wIstr = _GetISTR();
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	8023      	strh	r3, [r4, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
 8000fb6:	8822      	ldrh	r2, [r4, #0]
 8000fb8:	882b      	ldrh	r3, [r5, #0]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	0412      	lsls	r2, r2, #16
 8000fbe:	d453      	bmi.n	8001068 <USB_LP_CAN1_RX0_IRQHandler+0xc0>
        CTR_LP(); /* low priority ISR defined in the usb core lib */
    }
#endif

#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
 8000fc0:	8822      	ldrh	r2, [r4, #0]
 8000fc2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000fc6:	4213      	tst	r3, r2
 8000fc8:	d145      	bne.n	8001056 <USB_LP_CAN1_RX0_IRQHandler+0xae>
    }
#endif


#if (ISR_MSK & ISTR_ERR)
    if (wIstr & ISTR_ERR & wInterrupt_Mask) {
 8000fca:	8822      	ldrh	r2, [r4, #0]
 8000fcc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8000fd0:	4213      	tst	r3, r2
 8000fd2:	d003      	beq.n	8000fdc <USB_LP_CAN1_RX0_IRQHandler+0x34>
        _SetISTR((u16)CLR_ERR);
 8000fd4:	4a26      	ldr	r2, [pc, #152]	; (8001070 <USB_LP_CAN1_RX0_IRQHandler+0xc8>)
 8000fd6:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 8000fda:	6011      	str	r1, [r2, #0]
    }
#endif


#if (ISR_MSK & ISTR_WKUP)
    if (wIstr & ISTR_WKUP & wInterrupt_Mask) {
 8000fdc:	8822      	ldrh	r2, [r4, #0]
 8000fde:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000fe2:	4213      	tst	r3, r2
 8000fe4:	d12e      	bne.n	8001044 <USB_LP_CAN1_RX0_IRQHandler+0x9c>
    }
#endif

    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_SUSP)
    if (wIstr & ISTR_SUSP & wInterrupt_Mask) {
 8000fe6:	8822      	ldrh	r2, [r4, #0]
 8000fe8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8000fec:	4213      	tst	r3, r2
 8000fee:	d00c      	beq.n	800100a <USB_LP_CAN1_RX0_IRQHandler+0x62>
}

void usbSuspend(void)
{
    u16 wCNTR;
    wCNTR = _GetCNTR();
 8000ff0:	4a22      	ldr	r2, [pc, #136]	; (800107c <USB_LP_CAN1_RX0_IRQHandler+0xd4>)
    wCNTR |= CNTR_FSUSP | CNTR_LPMODE;
    _SetCNTR(wCNTR);

    // run any power reduction handlers
    bDeviceState = SUSPENDED;
 8000ff2:	4d23      	ldr	r5, [pc, #140]	; (8001080 <USB_LP_CAN1_RX0_IRQHandler+0xd8>)
}

void usbSuspend(void)
{
    u16 wCNTR;
    wCNTR = _GetCNTR();
 8000ff4:	6817      	ldr	r7, [r2, #0]
        } else {
            // if not possible then resume after xx ms
            usbResume(RESUME_LATER);
        }
        // clear of the ISTR bit must be done after setting of CNTR_FSUSP
        _SetISTR((u16)CLR_SUSP);
 8000ff6:	491e      	ldr	r1, [pc, #120]	; (8001070 <USB_LP_CAN1_RX0_IRQHandler+0xc8>)
}

void usbSuspend(void)
{
    u16 wCNTR;
    wCNTR = _GetCNTR();
 8000ff8:	b2bf      	uxth	r7, r7
    wCNTR |= CNTR_FSUSP | CNTR_LPMODE;
    _SetCNTR(wCNTR);
 8000ffa:	f047 070c 	orr.w	r7, r7, #12

    // run any power reduction handlers
    bDeviceState = SUSPENDED;
 8000ffe:	2603      	movs	r6, #3
        } else {
            // if not possible then resume after xx ms
            usbResume(RESUME_LATER);
        }
        // clear of the ISTR bit must be done after setting of CNTR_FSUSP
        _SetISTR((u16)CLR_SUSP);
 8001000:	f24f 70ff 	movw	r0, #63487	; 0xf7ff
void usbSuspend(void)
{
    u16 wCNTR;
    wCNTR = _GetCNTR();
    wCNTR |= CNTR_FSUSP | CNTR_LPMODE;
    _SetCNTR(wCNTR);
 8001004:	6017      	str	r7, [r2, #0]

    // run any power reduction handlers
    bDeviceState = SUSPENDED;
 8001006:	602e      	str	r6, [r5, #0]
        } else {
            // if not possible then resume after xx ms
            usbResume(RESUME_LATER);
        }
        // clear of the ISTR bit must be done after setting of CNTR_FSUSP
        _SetISTR((u16)CLR_SUSP);
 8001008:	6008      	str	r0, [r1, #0]
    }
#endif


#if (ISR_MSK & ISTR_SOF)
    if (wIstr & ISTR_SOF & wInterrupt_Mask) {
 800100a:	8822      	ldrh	r2, [r4, #0]
 800100c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001010:	4213      	tst	r3, r2
 8001012:	d008      	beq.n	8001026 <USB_LP_CAN1_RX0_IRQHandler+0x7e>
        _SetISTR((u16)CLR_SOF);
 8001014:	4916      	ldr	r1, [pc, #88]	; (8001070 <USB_LP_CAN1_RX0_IRQHandler+0xc8>)
        bIntPackSOF++;
 8001016:	4a1b      	ldr	r2, [pc, #108]	; (8001084 <USB_LP_CAN1_RX0_IRQHandler+0xdc>)
#endif


#if (ISR_MSK & ISTR_SOF)
    if (wIstr & ISTR_SOF & wInterrupt_Mask) {
        _SetISTR((u16)CLR_SOF);
 8001018:	f64f 50ff 	movw	r0, #65023	; 0xfdff
 800101c:	6008      	str	r0, [r1, #0]
        bIntPackSOF++;
 800101e:	7811      	ldrb	r1, [r2, #0]
 8001020:	3101      	adds	r1, #1
 8001022:	b2c9      	uxtb	r1, r1
 8001024:	7011      	strb	r1, [r2, #0]
    }
#endif


#if (ISR_MSK & ISTR_ESOF)
    if (wIstr & ISTR_ESOF & wInterrupt_Mask) {
 8001026:	8822      	ldrh	r2, [r4, #0]
 8001028:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800102c:	4213      	tst	r3, r2
 800102e:	d100      	bne.n	8001032 <USB_LP_CAN1_RX0_IRQHandler+0x8a>
 8001030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _SetISTR((u16)CLR_ESOF);
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <USB_LP_CAN1_RX0_IRQHandler+0xc8>)
 8001034:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8001038:	601a      	str	r2, [r3, #0]
        // resume handling timing is made with ESOFs
        // request without change of the machine state
        usbResume(RESUME_ESOF); 
 800103a:	2007      	movs	r0, #7
    }
#endif

}
 800103c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#if (ISR_MSK & ISTR_ESOF)
    if (wIstr & ISTR_ESOF & wInterrupt_Mask) {
        _SetISTR((u16)CLR_ESOF);
        // resume handling timing is made with ESOFs
        // request without change of the machine state
        usbResume(RESUME_ESOF); 
 8001040:	f7ff bf34 	b.w	8000eac <usbResume>
#endif


#if (ISR_MSK & ISTR_WKUP)
    if (wIstr & ISTR_WKUP & wInterrupt_Mask) {
        _SetISTR((u16)CLR_WKUP);
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <USB_LP_CAN1_RX0_IRQHandler+0xc8>)
 8001046:	f64e 72ff 	movw	r2, #61439	; 0xefff
 800104a:	601a      	str	r2, [r3, #0]
        usbResume(RESUME_EXTERNAL);
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff ff2d 	bl	8000eac <usbResume>
 8001052:	882b      	ldrh	r3, [r5, #0]
 8001054:	e7c7      	b.n	8000fe6 <USB_LP_CAN1_RX0_IRQHandler+0x3e>
    }
#endif

#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
        _SetISTR((u16)CLR_RESET);
 8001056:	4a06      	ldr	r2, [pc, #24]	; (8001070 <USB_LP_CAN1_RX0_IRQHandler+0xc8>)
        Device_Property.Reset();
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <USB_LP_CAN1_RX0_IRQHandler+0xe0>)
    }
#endif

#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
        _SetISTR((u16)CLR_RESET);
 800105a:	f64f 31ff 	movw	r1, #64511	; 0xfbff
        Device_Property.Reset();
 800105e:	685b      	ldr	r3, [r3, #4]
    }
#endif

#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
        _SetISTR((u16)CLR_RESET);
 8001060:	6011      	str	r1, [r2, #0]
        Device_Property.Reset();
 8001062:	4798      	blx	r3
 8001064:	882b      	ldrh	r3, [r5, #0]
 8001066:	e7b0      	b.n	8000fca <USB_LP_CAN1_RX0_IRQHandler+0x22>
    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
        /* servicing of the endpoint correct transfer interrupt */
        /* clear of the CTR flag into the sub */
        CTR_LP(); /* low priority ISR defined in the usb core lib */
 8001068:	f004 ff56 	bl	8005f18 <CTR_LP>
 800106c:	882b      	ldrh	r3, [r5, #0]
 800106e:	e7a7      	b.n	8000fc0 <USB_LP_CAN1_RX0_IRQHandler+0x18>
 8001070:	40005c44 	andmi	r5, r0, r4, asr #24
 8001074:	20000474 	andcs	r0, r0, r4, ror r4
 8001078:	20000598 	mulcs	r0, r8, r5
 800107c:	40005c40 	andmi	r5, r0, r0, asr #24
 8001080:	200005a4 	andcs	r0, r0, r4, lsr #11
 8001084:	200005a0 	andcs	r0, r0, r0, lsr #11
 8001088:	20000014 	andcs	r0, r0, r4, lsl r0

0800108c <print_hash>:
#define USART1              ((USART_TypeDef *) USART1_BASE)

extern volatile dfuUploadTypes_t userUploadType;

void print_hash(unsigned char hash[])
{
 800108c:	b538      	push	{r3, r4, r5, lr}
 800108e:	4605      	mov	r5, r0
   int idx;
   for (idx=0; idx < 32; idx++)
 8001090:	2400      	movs	r4, #0
      uart_printf("%02x",hash[idx]);
 8001092:	5d29      	ldrb	r1, [r5, r4]
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <print_hash+0x20>)
extern volatile dfuUploadTypes_t userUploadType;

void print_hash(unsigned char hash[])
{
   int idx;
   for (idx=0; idx < 32; idx++)
 8001096:	3401      	adds	r4, #1
      uart_printf("%02x",hash[idx]);
 8001098:	f000 f8ee 	bl	8001278 <uart_printf>
extern volatile dfuUploadTypes_t userUploadType;

void print_hash(unsigned char hash[])
{
   int idx;
   for (idx=0; idx < 32; idx++)
 800109c:	2c20      	cmp	r4, #32
 800109e:	d1f8      	bne.n	8001092 <print_hash+0x6>
      uart_printf("%02x",hash[idx]);
   uart_printf("\n");
 80010a0:	4803      	ldr	r0, [pc, #12]	; (80010b0 <print_hash+0x24>)
}
 80010a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void print_hash(unsigned char hash[])
{
   int idx;
   for (idx=0; idx < 32; idx++)
      uart_printf("%02x",hash[idx]);
   uart_printf("\n");
 80010a6:	f000 b8e7 	b.w	8001278 <uart_printf>
 80010aa:	bf00      	nop
 80010ac:	0800723c 	stmdaeq	r0, {r2, r3, r4, r5, r9, ip, sp, lr}
 80010b0:	08007354 	stmdaeq	r0, {r2, r4, r6, r8, r9, ip, sp, lr}

080010b4 <main>:
}

int main() 
{
 80010b4:	b530      	push	{r4, r5, lr}
 80010b6:	b083      	sub	sp, #12
	bool no_user_jump = FALSE;
	bool dont_wait=FALSE;
	
    systemReset(); // peripherals but not PC
 80010b8:	f000 f944 	bl	8001344 <systemReset>
    setupCLK();
 80010bc:	f000 f96a 	bl	8001394 <setupCLK>
    setupLEDAndButton();
 80010c0:	f000 f99e 	bl	8001400 <setupLEDAndButton>
    setupUSB();
 80010c4:	f7ff fe9e 	bl	8000e04 <setupUSB>
    setupFLASH();
 80010c8:	f000 f9a4 	bl	8001414 <setupFLASH>
    uartInit();
 80010cc:	f000 f8f6 	bl	80012bc <uartInit>
    usbReset();
 80010d0:	f7ff fd8e 	bl	8000bf0 <usbReset>
	uart_printf("\nBootloader init...\n");
 80010d4:	4839      	ldr	r0, [pc, #228]	; (80011bc <main+0x108>)
 80010d6:	f000 f8cf 	bl	8001278 <uart_printf>

    if (readPin(GPIOB, 15) == 0x0)
 80010da:	210f      	movs	r1, #15
 80010dc:	4838      	ldr	r0, [pc, #224]	; (80011c0 <main+0x10c>)
 80010de:	f000 f891 	bl	8001204 <readPin>
 80010e2:	4604      	mov	r4, r0
	{
		no_user_jump = TRUE;
	} 

	uart_printf("checking chain...\n");
 80010e4:	4837      	ldr	r0, [pc, #220]	; (80011c4 <main+0x110>)
 80010e6:	f000 f8c7 	bl	8001278 <uart_printf>
	int initVerify = checkUserCode(USER_CODE_FLASH0X8008000);
 80010ea:	4837      	ldr	r0, [pc, #220]	; (80011c8 <main+0x114>)
 80010ec:	f000 f9b6 	bl	800145c <checkUserCode>
	switch (initVerify)
 80010f0:	2803      	cmp	r0, #3
 80010f2:	d803      	bhi.n	80010fc <main+0x48>
 80010f4:	e8df f000 	tbb	[pc, r0]
 80010f8:	1f4c595d 	svcne	0x004c595d
			break;

		default:
			break;
	}
	strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);
 80010fc:	2300      	movs	r3, #0
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	4832      	ldr	r0, [pc, #200]	; (80011cc <main+0x118>)
 8001102:	210d      	movs	r1, #13
 8001104:	2205      	movs	r2, #5
 8001106:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800110a:	f000 f885 	bl	8001218 <strobePin>
 800110e:	b9f4      	cbnz	r4, 800114e <main+0x9a>

	int delay_count = 0;
	while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
	{

		strobePin(LED_BANK, LED_PIN, 1, BLINK_SLOW,LED_ON_STATE);
 8001110:	2400      	movs	r4, #0
 8001112:	482e      	ldr	r0, [pc, #184]	; (80011cc <main+0x118>)
 8001114:	210d      	movs	r1, #13
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800111c:	9400      	str	r4, [sp, #0]
 800111e:	f000 f87b 	bl	8001218 <strobePin>

		if (dfuUploadStarted()) 
 8001122:	f000 fe0b 	bl	8001d3c <dfuUploadStarted>
 8001126:	2800      	cmp	r0, #0
 8001128:	d0f3      	beq.n	8001112 <main+0x5e>
		{
			uart_printf("DFU finished upload\n");
 800112a:	4829      	ldr	r0, [pc, #164]	; (80011d0 <main+0x11c>)
 800112c:	f000 f8a4 	bl	8001278 <uart_printf>
			dfuFinishUpload(); // systemHardReset from DFU once done
 8001130:	f000 fe0a 	bl	8001d48 <dfuFinishUpload>
 8001134:	e7ed      	b.n	8001112 <main+0x5e>
	uart_printf("checking chain...\n");
	int initVerify = checkUserCode(USER_CODE_FLASH0X8008000);
	switch (initVerify)
	{
		case 0x3:
			uart_printf("Boot OK\n");
 8001136:	4827      	ldr	r0, [pc, #156]	; (80011d4 <main+0x120>)
 8001138:	f000 f89e 	bl	8001278 <uart_printf>
			break;

		default:
			break;
	}
	strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);
 800113c:	2300      	movs	r3, #0
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	4822      	ldr	r0, [pc, #136]	; (80011cc <main+0x118>)
 8001142:	210d      	movs	r1, #13
 8001144:	2205      	movs	r2, #5
 8001146:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800114a:	f000 f865 	bl	8001218 <strobePin>
      uart_printf("%02x",hash[idx]);
   uart_printf("\n");
}

int main() 
{
 800114e:	2406      	movs	r4, #6

	int delay_count = 0;
	while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
	{

		strobePin(LED_BANK, LED_PIN, 1, BLINK_SLOW,LED_ON_STATE);
 8001150:	2500      	movs	r5, #0
 8001152:	e001      	b.n	8001158 <main+0xa4>
			break;
	}
	strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);

	int delay_count = 0;
	while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
 8001154:	3c01      	subs	r4, #1
 8001156:	d012      	beq.n	800117e <main+0xca>
	{

		strobePin(LED_BANK, LED_PIN, 1, BLINK_SLOW,LED_ON_STATE);
 8001158:	481c      	ldr	r0, [pc, #112]	; (80011cc <main+0x118>)
 800115a:	210d      	movs	r1, #13
 800115c:	2201      	movs	r2, #1
 800115e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001162:	9500      	str	r5, [sp, #0]
 8001164:	f000 f858 	bl	8001218 <strobePin>

		if (dfuUploadStarted()) 
 8001168:	f000 fde8 	bl	8001d3c <dfuUploadStarted>
 800116c:	2800      	cmp	r0, #0
 800116e:	d0f1      	beq.n	8001154 <main+0xa0>
		{
			uart_printf("DFU finished upload\n");
 8001170:	4817      	ldr	r0, [pc, #92]	; (80011d0 <main+0x11c>)
 8001172:	f000 f881 	bl	8001278 <uart_printf>
			dfuFinishUpload(); // systemHardReset from DFU once done
 8001176:	f000 fde7 	bl	8001d48 <dfuFinishUpload>
			break;
	}
	strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);

	int delay_count = 0;
	while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
 800117a:	3c01      	subs	r4, #1
 800117c:	d1ec      	bne.n	8001158 <main+0xa4>
			uart_printf("DFU finished upload\n");
			dfuFinishUpload(); // systemHardReset from DFU once done
		}
	}

	uart_printf("Jumping to OS.\n");
 800117e:	4816      	ldr	r0, [pc, #88]	; (80011d8 <main+0x124>)
 8001180:	f000 f87a 	bl	8001278 <uart_printf>
	jumpToUser(USER_CODE_FLASH0X8008000+0x74);
 8001184:	4815      	ldr	r0, [pc, #84]	; (80011dc <main+0x128>)
 8001186:	f000 fa25 	bl	80015d4 <jumpToUser>

	return 0;// Added to please the compiler
 800118a:	4620      	mov	r0, r4
 800118c:	b003      	add	sp, #12
 800118e:	bd30      	pop	{r4, r5, pc}
			uart_printf("Signature unverified... waiting in DFU\n");
			no_user_jump = TRUE;
			break;

		case 0x2:
			uart_printf("Hash comparison unverified... waiting in DFU\n");
 8001190:	4813      	ldr	r0, [pc, #76]	; (80011e0 <main+0x12c>)
 8001192:	f000 f871 	bl	8001278 <uart_printf>
			break;

		default:
			break;
	}
	strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);
 8001196:	2300      	movs	r3, #0
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	480c      	ldr	r0, [pc, #48]	; (80011cc <main+0x118>)
 800119c:	210d      	movs	r1, #13
 800119e:	2205      	movs	r2, #5
 80011a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011a4:	f000 f838 	bl	8001218 <strobePin>
 80011a8:	e7b2      	b.n	8001110 <main+0x5c>
			uart_printf("Firmware missing... waiting in DFU\n");
			no_user_jump = TRUE;
			break;

		case 0x1:
			uart_printf("Signature unverified... waiting in DFU\n");
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <main+0x130>)
 80011ac:	f000 f864 	bl	8001278 <uart_printf>
			no_user_jump = TRUE;
			break;
 80011b0:	e7f1      	b.n	8001196 <main+0xe2>
			uart_printf("Boot OK\n");
			no_user_jump = FALSE;
			break;

		case 0x0:
			uart_printf("Firmware missing... waiting in DFU\n");
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <main+0x134>)
 80011b4:	f000 f860 	bl	8001278 <uart_printf>
			no_user_jump = TRUE;
			break;
 80011b8:	e7ed      	b.n	8001196 <main+0xe2>
 80011ba:	bf00      	nop
 80011bc:	08007244 	stmdaeq	r0, {r2, r6, r9, ip, sp, lr}
 80011c0:	40010c00 	andmi	r0, r1, r0, lsl #24
 80011c4:	0800725c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, sp, lr}
 80011c8:	08008000 	stmdaeq	r0, {pc}
 80011cc:	40011000 	andmi	r1, r1, r0
 80011d0:	080072f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, ip, sp, lr}
 80011d4:	08007270 	stmdaeq	r0, {r4, r5, r6, r9, ip, sp, lr}
 80011d8:	08007310 	stmdaeq	r0, {r4, r8, r9, ip, sp, lr}
 80011dc:	08008074 	stmdaeq	r0, {r2, r4, r5, r6, pc}
 80011e0:	080072c8 	stmdaeq	r0, {r3, r6, r7, r9, ip, sp, lr}
 80011e4:	080072a0 	stmdaeq	r0, {r5, r7, r9, ip, sp, lr}
 80011e8:	0800727c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, ip, sp, lr}

080011ec <gpio_write_bit>:
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 80011ec:	2301      	movs	r3, #1
 80011ee:	fa03 f101 	lsl.w	r1, r3, r1
    u32 pinMask = 0x1 << (16 + pin);
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
 80011f2:	f1d2 0201 	rsbs	r2, r2, #1
 80011f6:	bf38      	it	cc
 80011f8:	2200      	movcc	r2, #0
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 80011fa:	0113      	lsls	r3, r2, #4
 80011fc:	4099      	lsls	r1, r3
 80011fe:	6101      	str	r1, [r0, #16]
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop

08001204 <readPin>:
}

bool readPin(u32 bank, u8 pin) {
    // todo, implement read
    if (GET_REG(GPIO_IDR(bank)) & (0x01 << pin)) {
 8001204:	2301      	movs	r3, #1
 8001206:	fa03 f101 	lsl.w	r1, r3, r1
 800120a:	6882      	ldr	r2, [r0, #8]
 800120c:	420a      	tst	r2, r1
        return TRUE;
    } else {
        return FALSE;
    }
}
 800120e:	bf0c      	ite	eq
 8001210:	2000      	moveq	r0, #0
 8001212:	2001      	movne	r0, #1
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop

08001218 <strobePin>:

void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
 8001218:	b4f0      	push	{r4, r5, r6, r7}
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 800121a:	2401      	movs	r4, #1
 800121c:	fa04 f101 	lsl.w	r1, r4, r1
        return FALSE;
    }
}

void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
 8001220:	f89d 6010 	ldrb.w	r6, [sp, #16]
    gpio_write_bit( bank,pin,1-onState);

    u32 c;
    while (count-- > 0) 
 8001224:	1e57      	subs	r7, r2, #1
    u32 pinMask = 0x1 << (16 + pin);
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
 8001226:	1b34      	subs	r4, r6, r4
 8001228:	4265      	negs	r5, r4
 800122a:	4165      	adcs	r5, r4
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 800122c:	012d      	lsls	r5, r5, #4
 800122e:	fa01 f505 	lsl.w	r5, r1, r5
 8001232:	f100 0410 	add.w	r4, r0, #16
 8001236:	6105      	str	r5, [r0, #16]
void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
    gpio_write_bit( bank,pin,1-onState);

    u32 c;
    while (count-- > 0) 
 8001238:	b2f8      	uxtb	r0, r7
 800123a:	b1a2      	cbz	r2, 8001266 <strobePin+0x4e>
 800123c:	f1d6 0201 	rsbs	r2, r6, #1
 8001240:	bf38      	it	cc
 8001242:	2200      	movcc	r2, #0
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	4091      	lsls	r1, r2
	{
        for (c = rate; c > 0; c--)
 8001248:	b17b      	cbz	r3, 800126a <strobePin+0x52>
 800124a:	461a      	mov	r2, r3
		{
            asm volatile("nop");
 800124c:	bf00      	nop
    gpio_write_bit( bank,pin,1-onState);

    u32 c;
    while (count-- > 0) 
	{
        for (c = rate; c > 0; c--)
 800124e:	3a01      	subs	r2, #1
 8001250:	d1fc      	bne.n	800124c <strobePin+0x34>
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 8001252:	6021      	str	r1, [r4, #0]
 8001254:	461a      	mov	r2, r3
		
        gpio_write_bit( bank,pin,onState);
		
        for (c = rate; c > 0; c--)
		{
            asm volatile("nop");
 8001256:	bf00      	nop
            asm volatile("nop");
        }
		
        gpio_write_bit( bank,pin,onState);
		
        for (c = rate; c > 0; c--)
 8001258:	3a01      	subs	r2, #1
 800125a:	d1fc      	bne.n	8001256 <strobePin+0x3e>
void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
    gpio_write_bit( bank,pin,1-onState);

    u32 c;
    while (count-- > 0) 
 800125c:	3801      	subs	r0, #1
 800125e:	b2c0      	uxtb	r0, r0
 8001260:	28ff      	cmp	r0, #255	; 0xff
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 8001262:	6025      	str	r5, [r4, #0]
void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
    gpio_write_bit( bank,pin,1-onState);

    u32 c;
    while (count-- > 0) 
 8001264:	d1f0      	bne.n	8001248 <strobePin+0x30>
		{
            asm volatile("nop");
        }
        gpio_write_bit( bank,pin,1-onState);
    }
}
 8001266:	bcf0      	pop	{r4, r5, r6, r7}
 8001268:	4770      	bx	lr
void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
    gpio_write_bit( bank,pin,1-onState);

    u32 c;
    while (count-- > 0) 
 800126a:	3801      	subs	r0, #1
 800126c:	b2c0      	uxtb	r0, r0
 800126e:	28ff      	cmp	r0, #255	; 0xff
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 8001270:	6021      	str	r1, [r4, #0]
 8001272:	6025      	str	r5, [r4, #0]
void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
    gpio_write_bit( bank,pin,1-onState);

    u32 c;
    while (count-- > 0) 
 8001274:	d1e8      	bne.n	8001248 <strobePin+0x30>
 8001276:	e7f6      	b.n	8001266 <strobePin+0x4e>

08001278 <uart_printf>:

    }
}

void uart_printf(const char *fmt, ...) // custom printf() function
{
 8001278:	b40f      	push	{r0, r1, r2, r3}
 800127a:	b510      	push	{r4, lr}
 800127c:	b0b4      	sub	sp, #208	; 0xd0
 800127e:	ab36      	add	r3, sp, #216	; 0xd8
 8001280:	f853 1b04 	ldr.w	r1, [r3], #4
}

void vprint(const char *fmt, va_list argp)
{
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 8001284:	a802      	add	r0, sp, #8
 8001286:	461a      	mov	r2, r3
}

void uart_printf(const char *fmt, ...) // custom printf() function
{
    va_list argp;
    va_start(argp, fmt);
 8001288:	9301      	str	r3, [sp, #4]
}

void vprint(const char *fmt, va_list argp)
{
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 800128a:	f005 fe83 	bl	8006f94 <vsiprintf>
 800128e:	2800      	cmp	r0, #0
 8001290:	dd0d      	ble.n	80012ae <uart_printf+0x36>
  USARTx->DR = ch;  
}

void UU_PutString(USART_TypeDef* USARTx, uint8_t * str)
{
  while(*str != 0)
 8001292:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8001296:	b151      	cbz	r1, 80012ae <uart_printf+0x36>

//DebugLog
#ifdef DEBUG
void UU_PutChar(USART_TypeDef* USARTx, uint8_t ch)
{
  while(!(USARTx->SR & USART_SR_TXE));
 8001298:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <uart_printf+0x40>)
 800129a:	a802      	add	r0, sp, #8
 800129c:	4614      	mov	r4, r2
 800129e:	8813      	ldrh	r3, [r2, #0]
 80012a0:	061b      	lsls	r3, r3, #24
 80012a2:	d5fc      	bpl.n	800129e <uart_printf+0x26>
  USARTx->DR = ch;  
 80012a4:	80a1      	strh	r1, [r4, #4]
}

void UU_PutString(USART_TypeDef* USARTx, uint8_t * str)
{
  while(*str != 0)
 80012a6:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 80012aa:	2900      	cmp	r1, #0
 80012ac:	d1f7      	bne.n	800129e <uart_printf+0x26>
{
    va_list argp;
    va_start(argp, fmt);
    vprint(fmt, argp);
    va_end(argp);
}
 80012ae:	b034      	add	sp, #208	; 0xd0
 80012b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012b4:	b004      	add	sp, #16
 80012b6:	4770      	bx	lr
 80012b8:	40013800 	andmi	r3, r1, r0, lsl #16

080012bc <uartInit>:
    uart_printf(" |%s|\n", cs);
}


#endif
void uartInit(void) {
 80012bc:	b570      	push	{r4, r5, r6, lr}
    USART_InitTypeDef USART_InitStructure;
    
    /* Enable peripheral clocks for USART1 on GPIOA */
    //RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
        RCC_APB2PeriphClockCmd(GPIOA, ENABLE);
 80012be:	4c1f      	ldr	r4, [pc, #124]	; (800133c <uartInit+0x80>)
    uart_printf(" |%s|\n", cs);
}


#endif
void uartInit(void) {
 80012c0:	b086      	sub	sp, #24
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    
    /* Enable peripheral clocks for USART1 on GPIOA */
    //RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80012c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012c6:	2101      	movs	r1, #1
 80012c8:	f7ff f9c2 	bl	8000650 <RCC_APB2PeriphClockCmd>
        RCC_APB2PeriphClockCmd(GPIOA, ENABLE);
 80012cc:	4620      	mov	r0, r4
 80012ce:	2101      	movs	r1, #1
 80012d0:	f7ff f9be 	bl	8000650 <RCC_APB2PeriphClockCmd>
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
        
    USART_Init(USART1, &USART_InitStructure);
 80012d4:	4d1a      	ldr	r5, [pc, #104]	; (8001340 <uartInit+0x84>)
    
    /* PA9 = alternate function push/pull output */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
 80012d6:	4620      	mov	r0, r4
 80012d8:	a901      	add	r1, sp, #4
        RCC_APB2PeriphClockCmd(GPIOA, ENABLE);
    /* Configure PA9 and PA10 as USART1 TX/RX */
    
    /* PA9 = alternate function push/pull output */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80012da:	2203      	movs	r2, #3
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80012dc:	2318      	movs	r3, #24
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
        RCC_APB2PeriphClockCmd(GPIOA, ENABLE);
    /* Configure PA9 and PA10 as USART1 TX/RX */
    
    /* PA9 = alternate function push/pull output */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 80012de:	f44f 7600 	mov.w	r6, #512	; 0x200
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80012e2:	f88d 2006 	strb.w	r2, [sp, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80012e6:	f88d 3007 	strb.w	r3, [sp, #7]
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
        RCC_APB2PeriphClockCmd(GPIOA, ENABLE);
    /* Configure PA9 and PA10 as USART1 TX/RX */
    
    /* PA9 = alternate function push/pull output */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 80012ea:	f8ad 6004 	strh.w	r6, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
 80012ee:	f7fe ff79 	bl	80001e4 <GPIO_Init>
    
    /* PA10 = floating input */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
 80012f2:	4620      	mov	r0, r4
 80012f4:	a901      	add	r1, sp, #4
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
    
    /* PA10 = floating input */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80012f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80012fa:	2304      	movs	r3, #4
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
    
    /* PA10 = floating input */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80012fc:	f8ad 2004 	strh.w	r2, [sp, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8001300:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
    
    /* Configure and initialize usart... */
    USART_InitStructure.USART_BaudRate = 115200;
 8001304:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
    
    /* PA10 = floating input */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
 8001308:	f7fe ff6c 	bl	80001e4 <GPIO_Init>
    
    /* Configure and initialize usart... */
    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800130c:	2300      	movs	r3, #0
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800130e:	220c      	movs	r2, #12
        
    USART_Init(USART1, &USART_InitStructure);
 8001310:	a902      	add	r1, sp, #8
 8001312:	4628      	mov	r0, r5
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
    
    /* Configure and initialize usart... */
    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001314:	f8ad 300c 	strh.w	r3, [sp, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001318:	f8ad 300e 	strh.w	r3, [sp, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 800131c:	f8ad 3010 	strh.w	r3, [sp, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001320:	f8ad 3014 	strh.w	r3, [sp, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001324:	f8ad 2012 	strh.w	r2, [sp, #18]
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
    
    /* Configure and initialize usart... */
    USART_InitStructure.USART_BaudRate = 115200;
 8001328:	9402      	str	r4, [sp, #8]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
        
    USART_Init(USART1, &USART_InitStructure);
 800132a:	f7ff fa5d 	bl	80007e8 <USART_Init>
    
    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);   
 800132e:	4628      	mov	r0, r5
 8001330:	2101      	movs	r1, #1
 8001332:	f7ff fadb 	bl	80008ec <USART_Cmd>
}
 8001336:	b006      	add	sp, #24
 8001338:	bd70      	pop	{r4, r5, r6, pc}
 800133a:	bf00      	nop
 800133c:	40010800 	andmi	r0, r1, r0, lsl #16
 8001340:	40013800 	andmi	r3, r1, r0, lsl #16

08001344 <systemReset>:

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <systemReset+0x40>)
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8001346:	4a10      	ldr	r2, [pc, #64]	; (8001388 <systemReset+0x44>)
    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);   
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8001348:	6818      	ldr	r0, [r3, #0]
    
    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);   
}

void systemReset(void) {
 800134a:	b410      	push	{r4}
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 800134c:	f040 0001 	orr.w	r0, r0, #1
 8001350:	6018      	str	r0, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8001352:	6814      	ldr	r4, [r2, #0]
 8001354:	490d      	ldr	r1, [pc, #52]	; (800138c <systemReset+0x48>)
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 8001356:	480e      	ldr	r0, [pc, #56]	; (8001390 <systemReset+0x4c>)
    USART_Cmd(USART1, ENABLE);   
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8001358:	4021      	ands	r1, r4
 800135a:	6011      	str	r1, [r2, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
 800135c:	6819      	ldr	r1, [r3, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 800135e:	2400      	movs	r4, #0
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
 8001360:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8001364:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001368:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
 800136a:	6819      	ldr	r1, [r3, #0]
 800136c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001370:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);
 8001372:	6813      	ldr	r3, [r2, #0]
 8001374:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001378:	6013      	str	r3, [r2, #0]

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 800137a:	6004      	str	r4, [r0, #0]
}
 800137c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40021000 	andmi	r1, r2, r0
 8001388:	40021004 	andmi	r1, r2, r4
 800138c:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000
 8001390:	40021008 	andmi	r1, r2, r8

08001394 <setupCLK>:

void setupCLK(void) {
	unsigned int StartUpCounter=0;
    /* enable HSE */
    SET_REG(RCC_CR, GET_REG(RCC_CR) | 0x00010001);
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <setupCLK+0x60>)
 8001396:	681a      	ldr	r2, [r3, #0]
    while ((GET_REG(RCC_CR) & 0x00020000) == 0); /* for it to come on */
 8001398:	4619      	mov	r1, r3
}

void setupCLK(void) {
	unsigned int StartUpCounter=0;
    /* enable HSE */
    SET_REG(RCC_CR, GET_REG(RCC_CR) | 0x00010001);
 800139a:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 800139e:	601a      	str	r2, [r3, #0]
    while ((GET_REG(RCC_CR) & 0x00020000) == 0); /* for it to come on */
 80013a0:	680b      	ldr	r3, [r1, #0]
 80013a2:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <setupCLK+0x60>)
 80013a4:	0398      	lsls	r0, r3, #14
 80013a6:	d5fb      	bpl.n	80013a0 <setupCLK+0xc>

    /* enable flash prefetch buffer */
    SET_REG(FLASH_ACR, 0x00000012);
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <setupCLK+0x64>)
 80013aa:	2112      	movs	r1, #18
	
     /* Configure PLL */
#ifdef XTAL12M
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00110400); /* pll=72Mhz(x6),APB1=36Mhz,AHB=72Mhz */
#else
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x001D0400); /* pll=72Mhz(x9),APB1=36Mhz,AHB=72Mhz */
 80013ac:	4813      	ldr	r0, [pc, #76]	; (80013fc <setupCLK+0x68>)
    /* enable HSE */
    SET_REG(RCC_CR, GET_REG(RCC_CR) | 0x00010001);
    while ((GET_REG(RCC_CR) & 0x00020000) == 0); /* for it to come on */

    /* enable flash prefetch buffer */
    SET_REG(FLASH_ACR, 0x00000012);
 80013ae:	6019      	str	r1, [r3, #0]
	
     /* Configure PLL */
#ifdef XTAL12M
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00110400); /* pll=72Mhz(x6),APB1=36Mhz,AHB=72Mhz */
#else
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x001D0400); /* pll=72Mhz(x9),APB1=36Mhz,AHB=72Mhz */
 80013b0:	6803      	ldr	r3, [r0, #0]

#if !defined  (HSE_STARTUP_TIMEOUT) 
  #define HSE_STARTUP_TIMEOUT    ((unsigned int)0x0500)   /*!< Time out for HSE start up */
#endif /* HSE_STARTUP_TIMEOUT */   

    while ((GET_REG(RCC_CR) & 0x03000000) == 0 && StartUpCounter < HSE_STARTUP_TIMEOUT)
 80013b2:	4611      	mov	r1, r2
	
     /* Configure PLL */
#ifdef XTAL12M
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00110400); /* pll=72Mhz(x6),APB1=36Mhz,AHB=72Mhz */
#else
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x001D0400); /* pll=72Mhz(x9),APB1=36Mhz,AHB=72Mhz */
 80013b4:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80013b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013bc:	6003      	str	r3, [r0, #0]
#endif	

    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x01000000); /* enable the pll */
 80013be:	6813      	ldr	r3, [r2, #0]
 80013c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013c4:	6013      	str	r3, [r2, #0]

#if !defined  (HSE_STARTUP_TIMEOUT) 
  #define HSE_STARTUP_TIMEOUT    ((unsigned int)0x0500)   /*!< Time out for HSE start up */
#endif /* HSE_STARTUP_TIMEOUT */   

    while ((GET_REG(RCC_CR) & 0x03000000) == 0 && StartUpCounter < HSE_STARTUP_TIMEOUT)
 80013c6:	680b      	ldr	r3, [r1, #0]
 80013c8:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
 80013cc:	d0fb      	beq.n	80013c6 <setupCLK+0x32>
	{
		// HSE has not started. Try restarting the processor
		systemHardReset(); 
	}
    /* Set SYSCLK as PLL */
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00000002);
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <setupCLK+0x68>)
 80013d0:	6819      	ldr	r1, [r3, #0]
    while ((GET_REG(RCC_CFGR) & 0x00000008) == 0); /* wait for it to come on */
 80013d2:	461a      	mov	r2, r3
	{
		// HSE has not started. Try restarting the processor
		systemHardReset(); 
	}
    /* Set SYSCLK as PLL */
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00000002);
 80013d4:	f041 0102 	orr.w	r1, r1, #2
 80013d8:	6019      	str	r1, [r3, #0]
    while ((GET_REG(RCC_CFGR) & 0x00000008) == 0); /* wait for it to come on */
 80013da:	6813      	ldr	r3, [r2, #0]
 80013dc:	071b      	lsls	r3, r3, #28
 80013de:	d5fc      	bpl.n	80013da <setupCLK+0x46>
	
    pRCC->APB2ENR |= 0B111111100;// Enable All GPIO channels (A to G)
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <setupCLK+0x60>)
 80013e2:	699a      	ldr	r2, [r3, #24]
 80013e4:	f442 72fe 	orr.w	r2, r2, #508	; 0x1fc
 80013e8:	619a      	str	r2, [r3, #24]
	pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
 80013ea:	69da      	ldr	r2, [r3, #28]
 80013ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013f0:	61da      	str	r2, [r3, #28]
 80013f2:	4770      	bx	lr
 80013f4:	40021000 	andmi	r1, r2, r0
 80013f8:	40022000 	andmi	r2, r2, r0
 80013fc:	40021004 	andmi	r1, r2, r4

08001400 <setupLEDAndButton>:

}

void setupLEDAndButton (void) { 
  SET_REG(GPIO_CR(LED_BANK,LED_PIN),(GET_REG(GPIO_CR(LED_BANK,LED_PIN)) & crMask(LED_PIN)) | CR_OUTPUT_PP << CR_SHITF(LED_PIN));
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <setupLEDAndButton+0x10>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001408:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	4770      	bx	lr
 8001410:	40011004 	andmi	r1, r1, r4

08001414 <setupFLASH>:
}

void setupFLASH() {
    /* configure the HSI oscillator */
    if ((pRCC->CR & 0x01) == 0x00) {
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <setupFLASH+0x1c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	07d2      	lsls	r2, r2, #31
 800141a:	d403      	bmi.n	8001424 <setupFLASH+0x10>
        u32 rwmVal = pRCC->CR;
 800141c:	681a      	ldr	r2, [r3, #0]
        rwmVal |= 0x01;
 800141e:	f042 0201 	orr.w	r2, r2, #1
        pRCC->CR = rwmVal;
 8001422:	601a      	str	r2, [r3, #0]
    }

    /* wait for it to come on */
    while ((pRCC->CR & 0x02) == 0x00) {}
 8001424:	4a02      	ldr	r2, [pc, #8]	; (8001430 <setupFLASH+0x1c>)
 8001426:	6813      	ldr	r3, [r2, #0]
 8001428:	079b      	lsls	r3, r3, #30
 800142a:	d5fc      	bpl.n	8001426 <setupFLASH+0x12>
}   
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40021000 	andmi	r1, r2, r0

08001434 <uid_read>:

/* Read U_ID register */
void uid_read(struct u_id *id)
{
    id->off0 = MMIO16(U_ID + 0x0);
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <uid_read+0x1c>)
    id->off2 = MMIO16(U_ID + 0x2);
 8001436:	4a07      	ldr	r2, [pc, #28]	; (8001454 <uid_read+0x20>)
}   

/* Read U_ID register */
void uid_read(struct u_id *id)
{
    id->off0 = MMIO16(U_ID + 0x0);
 8001438:	8819      	ldrh	r1, [r3, #0]
    id->off2 = MMIO16(U_ID + 0x2);
    id->off4 = MMIO32(U_ID + 0x4);
 800143a:	3304      	adds	r3, #4
}   

/* Read U_ID register */
void uid_read(struct u_id *id)
{
    id->off0 = MMIO16(U_ID + 0x0);
 800143c:	8001      	strh	r1, [r0, #0]
    id->off2 = MMIO16(U_ID + 0x2);
 800143e:	8812      	ldrh	r2, [r2, #0]
    id->off4 = MMIO32(U_ID + 0x4);
 8001440:	681b      	ldr	r3, [r3, #0]
    id->off8 = MMIO32(U_ID + 0x8);
 8001442:	4905      	ldr	r1, [pc, #20]	; (8001458 <uid_read+0x24>)
/* Read U_ID register */
void uid_read(struct u_id *id)
{
    id->off0 = MMIO16(U_ID + 0x0);
    id->off2 = MMIO16(U_ID + 0x2);
    id->off4 = MMIO32(U_ID + 0x4);
 8001444:	6043      	str	r3, [r0, #4]
    id->off8 = MMIO32(U_ID + 0x8);
 8001446:	680b      	ldr	r3, [r1, #0]

/* Read U_ID register */
void uid_read(struct u_id *id)
{
    id->off0 = MMIO16(U_ID + 0x0);
    id->off2 = MMIO16(U_ID + 0x2);
 8001448:	8042      	strh	r2, [r0, #2]
    id->off4 = MMIO32(U_ID + 0x4);
    id->off8 = MMIO32(U_ID + 0x8);
 800144a:	6083      	str	r3, [r0, #8]
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	1ffff7e8 	svcne	0x00fff7e8
 8001454:	1ffff7ea 	svcne	0x00fff7ea
 8001458:	1ffff7f0 	svcne	0x00fff7f0

0800145c <checkUserCode>:
}

int checkUserCode(u32 usrAddr) {
 800145c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145e:	b0e5      	sub	sp, #404	; 0x194
 8001460:	4604      	mov	r4, r0
    // get hash written to top of stage 2
    unsigned char writtenHash[32];
    memset(writtenHash, 0xFF, sizeof(writtenHash));
 8001462:	21ff      	movs	r1, #255	; 0xff
 8001464:	2220      	movs	r2, #32
 8001466:	a80b      	add	r0, sp, #44	; 0x2c
 8001468:	f005 fa82 	bl	8006970 <memset>
    memcpy(writtenHash, (vu32 *)usrAddr, 0x20);
 800146c:	6820      	ldr	r0, [r4, #0]
 800146e:	6861      	ldr	r1, [r4, #4]
 8001470:	68a2      	ldr	r2, [r4, #8]
 8001472:	68e3      	ldr	r3, [r4, #12]
 8001474:	ad0b      	add	r5, sp, #44	; 0x2c
 8001476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001478:	6920      	ldr	r0, [r4, #16]
 800147a:	6961      	ldr	r1, [r4, #20]
 800147c:	69a2      	ldr	r2, [r4, #24]
 800147e:	69e3      	ldr	r3, [r4, #28]
 8001480:	c50f      	stmia	r5!, {r0, r1, r2, r3}

    // hax to see if our firmware is where it should be
    if (!memcmp(writtenHash, 0xFF, 32))
 8001482:	a80b      	add	r0, sp, #44	; 0x2c
 8001484:	21ff      	movs	r1, #255	; 0xff
 8001486:	2220      	movs	r2, #32
 8001488:	f005 fa3c 	bl	8006904 <memcmp>
 800148c:	b908      	cbnz	r0, 8001492 <checkUserCode+0x36>
    // verify written hash against recalc hash
    if (memcmp(sha256sum, writtenHash, 32)){
        return 0x2;
    }
    return 0x3;
}
 800148e:	b065      	add	sp, #404	; 0x194
 8001490:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return 0x0;
    }

    // get signature from stage 2 image
    uint8_t signature[EDSIGN_SIGNATURE_SIZE];
    memset(signature, 0xFF, sizeof(signature));
 8001492:	a823      	add	r0, sp, #140	; 0x8c
 8001494:	21ff      	movs	r1, #255	; 0xff
 8001496:	2240      	movs	r2, #64	; 0x40
 8001498:	f005 fa6a 	bl	8006970 <memset>
    memcpy(signature,  (vu32 *)(usrAddr+0x20), 0x40);
 800149c:	af23      	add	r7, sp, #140	; 0x8c
 800149e:	f104 0520 	add.w	r5, r4, #32
 80014a2:	f104 0e60 	add.w	lr, r4, #96	; 0x60
 80014a6:	6828      	ldr	r0, [r5, #0]
 80014a8:	6869      	ldr	r1, [r5, #4]
 80014aa:	68aa      	ldr	r2, [r5, #8]
 80014ac:	68eb      	ldr	r3, [r5, #12]
 80014ae:	463e      	mov	r6, r7
 80014b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80014b2:	3510      	adds	r5, #16
 80014b4:	4575      	cmp	r5, lr
 80014b6:	4637      	mov	r7, r6
 80014b8:	d1f5      	bne.n	80014a6 <checkUserCode+0x4a>

    // prepare hash
    unsigned char sha256sum[32];
    uint8_t input[0x5C];

    memset(sha256sum, 0xFF, sizeof(sha256sum));
 80014ba:	21ff      	movs	r1, #255	; 0xff
 80014bc:	2220      	movs	r2, #32
 80014be:	a813      	add	r0, sp, #76	; 0x4c
 80014c0:	f005 fa56 	bl	8006970 <memset>
    memset(input, 0xFF, sizeof(input));
 80014c4:	225c      	movs	r2, #92	; 0x5c
 80014c6:	21ff      	movs	r1, #255	; 0xff
 80014c8:	a833      	add	r0, sp, #204	; 0xcc
 80014ca:	f005 fa51 	bl	8006970 <memset>

    sha256_context ctx;
    sha256_starts(&ctx);
 80014ce:	a84a      	add	r0, sp, #296	; 0x128
 80014d0:	f001 ff7a 	bl	80033c8 <sha256_starts>

    // get expected size
    int offset = Swap2Bytes(*(int*)((vu32 *)(usrAddr+0x60))) + 0x140;
 80014d4:	6e23      	ldr	r3, [r4, #96]	; 0x60
    int i = 0x74;
    //feedface is our eof, hi mach ily
    char cmpEnd[4] = {0xFE, 0xED, 0xFA, 0xCE};
 80014d6:	4a37      	ldr	r2, [pc, #220]	; (80015b4 <checkUserCode+0x158>)

    sha256_context ctx;
    sha256_starts(&ctx);

    // get expected size
    int offset = Swap2Bytes(*(int*)((vu32 *)(usrAddr+0x60))) + 0x140;
 80014d8:	021e      	lsls	r6, r3, #8
 80014da:	b2b6      	uxth	r6, r6
 80014dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80014e0:	431e      	orrs	r6, r3
 80014e2:	f506 76a0 	add.w	r6, r6, #320	; 0x140
    int i = 0x74;
    //feedface is our eof, hi mach ily
    char cmpEnd[4] = {0xFE, 0xED, 0xFA, 0xCE};
 80014e6:	6810      	ldr	r0, [r2, #0]
    char buff[0x4];
    // read through memory, hash buff, and stop on feedface
    while ((usrAddr+i) <= (usrAddr+offset))
 80014e8:	4426      	add	r6, r4
 80014ea:	f104 0574 	add.w	r5, r4, #116	; 0x74
 80014ee:	42b5      	cmp	r5, r6

    // get expected size
    int offset = Swap2Bytes(*(int*)((vu32 *)(usrAddr+0x60))) + 0x140;
    int i = 0x74;
    //feedface is our eof, hi mach ily
    char cmpEnd[4] = {0xFE, 0xED, 0xFA, 0xCE};
 80014f0:	9003      	str	r0, [sp, #12]
    char buff[0x4];
    // read through memory, hash buff, and stop on feedface
    while ((usrAddr+i) <= (usrAddr+offset))
 80014f2:	d819      	bhi.n	8001528 <checkUserCode+0xcc>
 80014f4:	3478      	adds	r4, #120	; 0x78
 80014f6:	e008      	b.n	800150a <checkUserCode+0xae>
      if (memmem(&buff, 0x4, &cmpEnd, 4) != 0)
      {
        sha256_update(&ctx, (vu32 *)(usrAddr+i), 0x4);
        break;
      }
      sha256_update(&ctx, (vu32 *)(usrAddr+i), 0x4);
 80014f8:	a84a      	add	r0, sp, #296	; 0x128
 80014fa:	f003 ff43 	bl	8005384 <sha256_update>
    int i = 0x74;
    //feedface is our eof, hi mach ily
    char cmpEnd[4] = {0xFE, 0xED, 0xFA, 0xCE};
    char buff[0x4];
    // read through memory, hash buff, and stop on feedface
    while ((usrAddr+i) <= (usrAddr+offset))
 80014fe:	42b4      	cmp	r4, r6
 8001500:	f104 0304 	add.w	r3, r4, #4
 8001504:	d810      	bhi.n	8001528 <checkUserCode+0xcc>
 8001506:	4625      	mov	r5, r4
 8001508:	461c      	mov	r4, r3
    {
      memset(buff, 0xFF, 0x4);
      memcpy(buff, (char *)(usrAddr+i), 0x4);
 800150a:	6828      	ldr	r0, [r5, #0]
      if (memmem(&buff, 0x4, &cmpEnd, 4) != 0)
 800150c:	2104      	movs	r1, #4
    char buff[0x4];
    // read through memory, hash buff, and stop on feedface
    while ((usrAddr+i) <= (usrAddr+offset))
    {
      memset(buff, 0xFF, 0x4);
      memcpy(buff, (char *)(usrAddr+i), 0x4);
 800150e:	9004      	str	r0, [sp, #16]
      if (memmem(&buff, 0x4, &cmpEnd, 4) != 0)
 8001510:	460b      	mov	r3, r1
 8001512:	aa03      	add	r2, sp, #12
 8001514:	a804      	add	r0, sp, #16
 8001516:	f005 fa0d 	bl	8006934 <memmem>
      {
        sha256_update(&ctx, (vu32 *)(usrAddr+i), 0x4);
        break;
      }
      sha256_update(&ctx, (vu32 *)(usrAddr+i), 0x4);
 800151a:	4629      	mov	r1, r5
 800151c:	2204      	movs	r2, #4
    // read through memory, hash buff, and stop on feedface
    while ((usrAddr+i) <= (usrAddr+offset))
    {
      memset(buff, 0xFF, 0x4);
      memcpy(buff, (char *)(usrAddr+i), 0x4);
      if (memmem(&buff, 0x4, &cmpEnd, 4) != 0)
 800151e:	2800      	cmp	r0, #0
 8001520:	d0ea      	beq.n	80014f8 <checkUserCode+0x9c>
      {
        sha256_update(&ctx, (vu32 *)(usrAddr+i), 0x4);
 8001522:	a84a      	add	r0, sp, #296	; 0x128
 8001524:	f003 ff2e 	bl	8005384 <sha256_update>
}   

/* Read U_ID register */
void uid_read(struct u_id *id)
{
    id->off0 = MMIO16(U_ID + 0x0);
 8001528:	4823      	ldr	r0, [pc, #140]	; (80015b8 <checkUserCode+0x15c>)
    id->off2 = MMIO16(U_ID + 0x2);
 800152a:	4924      	ldr	r1, [pc, #144]	; (80015bc <checkUserCode+0x160>)
    id->off4 = MMIO32(U_ID + 0x4);
 800152c:	4a24      	ldr	r2, [pc, #144]	; (80015c0 <checkUserCode+0x164>)
    id->off8 = MMIO32(U_ID + 0x8);
 800152e:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <checkUserCode+0x168>)
}   

/* Read U_ID register */
void uid_read(struct u_id *id)
{
    id->off0 = MMIO16(U_ID + 0x0);
 8001530:	8807      	ldrh	r7, [r0, #0]
    id->off2 = MMIO16(U_ID + 0x2);
 8001532:	880e      	ldrh	r6, [r1, #0]
    id->off4 = MMIO32(U_ID + 0x4);
 8001534:	6814      	ldr	r4, [r2, #0]
    id->off8 = MMIO32(U_ID + 0x8);
 8001536:	681d      	ldr	r5, [r3, #0]
}   

/* Read U_ID register */
void uid_read(struct u_id *id)
{
    id->off0 = MMIO16(U_ID + 0x0);
 8001538:	b2bf      	uxth	r7, r7
    id->off2 = MMIO16(U_ID + 0x2);
 800153a:	b2b6      	uxth	r6, r6

    // hash in our unique ID
    struct u_id id;
    uid_read(&id);
    unsigned char uniqueID[23];
    sprintf(uniqueID,"%X%X%X%X", id.off0, id.off2, id.off4, id.off8);
 800153c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8001540:	463a      	mov	r2, r7
 8001542:	4633      	mov	r3, r6
 8001544:	4920      	ldr	r1, [pc, #128]	; (80015c8 <checkUserCode+0x16c>)
 8001546:	a805      	add	r0, sp, #20
 8001548:	f005 fa1a 	bl	8006980 <siprintf>
    uart_printf("%X%X%X%X\n", id.off0, id.off2, id.off4, id.off8);
 800154c:	4623      	mov	r3, r4
 800154e:	4639      	mov	r1, r7
 8001550:	4632      	mov	r2, r6
 8001552:	9500      	str	r5, [sp, #0]
 8001554:	481d      	ldr	r0, [pc, #116]	; (80015cc <checkUserCode+0x170>)
 8001556:	f7ff fe8f 	bl	8001278 <uart_printf>
    sha256_update(&ctx, uniqueID, 23);
 800155a:	2217      	movs	r2, #23
 800155c:	a84a      	add	r0, sp, #296	; 0x128
 800155e:	a905      	add	r1, sp, #20
    sha256_finish(&ctx, sha256sum);

    print_hash(sha256sum);

  uint8_t rootCA[32] = {
 8001560:	4d1b      	ldr	r5, [pc, #108]	; (80015d0 <checkUserCode+0x174>)
    struct u_id id;
    uid_read(&id);
    unsigned char uniqueID[23];
    sprintf(uniqueID,"%X%X%X%X", id.off0, id.off2, id.off4, id.off8);
    uart_printf("%X%X%X%X\n", id.off0, id.off2, id.off4, id.off8);
    sha256_update(&ctx, uniqueID, 23);
 8001562:	f003 ff0f 	bl	8005384 <sha256_update>
    sha256_finish(&ctx, sha256sum);
 8001566:	a913      	add	r1, sp, #76	; 0x4c
 8001568:	a84a      	add	r0, sp, #296	; 0x128
 800156a:	f003 ff53 	bl	8005414 <sha256_finish>

    print_hash(sha256sum);
 800156e:	a813      	add	r0, sp, #76	; 0x4c
 8001570:	f7ff fd8c 	bl	800108c <print_hash>

  uint8_t rootCA[32] = {
 8001574:	6828      	ldr	r0, [r5, #0]
 8001576:	6869      	ldr	r1, [r5, #4]
 8001578:	68aa      	ldr	r2, [r5, #8]
 800157a:	68eb      	ldr	r3, [r5, #12]
 800157c:	ac1b      	add	r4, sp, #108	; 0x6c
 800157e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001580:	6928      	ldr	r0, [r5, #16]
 8001582:	6969      	ldr	r1, [r5, #20]
 8001584:	69aa      	ldr	r2, [r5, #24]
 8001586:	69eb      	ldr	r3, [r5, #28]
 8001588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
       0xf3,0x88,0x72,0x73,0xea,0xcf,0x91,0x73,
       0x35,0xda,0x72,0x68,0xae,0xf6,0x98,0x90,
       0x51,0x87,0xff,0xea,0xd6,0xb5,0x5b,0x32
    };
    // verify signature against recalc hash
    if (!edsign_verify(signature, rootCA, sha256sum, 0x20) > 0) {
 800158a:	a91b      	add	r1, sp, #108	; 0x6c
 800158c:	a823      	add	r0, sp, #140	; 0x8c
 800158e:	aa13      	add	r2, sp, #76	; 0x4c
 8001590:	2320      	movs	r3, #32
 8001592:	f000 fdd1 	bl	8002138 <edsign_verify>
 8001596:	b150      	cbz	r0, 80015ae <checkUserCode+0x152>
        return 0x1;
    }
    // verify written hash against recalc hash
    if (memcmp(sha256sum, writtenHash, 32)){
 8001598:	a813      	add	r0, sp, #76	; 0x4c
 800159a:	a90b      	add	r1, sp, #44	; 0x2c
 800159c:	2220      	movs	r2, #32
 800159e:	f005 f9b1 	bl	8006904 <memcmp>
        return 0x2;
 80015a2:	2800      	cmp	r0, #0
 80015a4:	bf0c      	ite	eq
 80015a6:	2003      	moveq	r0, #3
 80015a8:	2002      	movne	r0, #2
    }
    return 0x3;
}
 80015aa:	b065      	add	sp, #404	; 0x194
 80015ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
       0x35,0xda,0x72,0x68,0xae,0xf6,0x98,0x90,
       0x51,0x87,0xff,0xea,0xd6,0xb5,0x5b,0x32
    };
    // verify signature against recalc hash
    if (!edsign_verify(signature, rootCA, sha256sum, 0x20) > 0) {
        return 0x1;
 80015ae:	2001      	movs	r0, #1
    // verify written hash against recalc hash
    if (memcmp(sha256sum, writtenHash, 32)){
        return 0x2;
    }
    return 0x3;
}
 80015b0:	b065      	add	sp, #404	; 0x194
 80015b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b4:	080071f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, ip, sp, lr}
 80015b8:	1ffff7e8 	svcne	0x00fff7e8
 80015bc:	1ffff7ea 	svcne	0x00fff7ea
 80015c0:	1ffff7ec 	svcne	0x00fff7ec
 80015c4:	1ffff7f0 	svcne	0x00fff7f0
 80015c8:	08007320 	stmdaeq	r0, {r5, r8, r9, ip, sp, lr}
 80015cc:	0800732c 	stmdaeq	r0, {r2, r3, r5, r8, r9, ip, sp, lr}
 80015d0:	080071fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, ip, sp, lr}

080015d4 <jumpToUser>:

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 80015d4:	4b20      	ldr	r3, [pc, #128]	; (8001658 <jumpToUser+0x84>)
 80015d6:	2280      	movs	r2, #128	; 0x80

  usrMain();                                /* go! */
}


void jumpToUser(u32 usrAddr) {
 80015d8:	b570      	push	{r4, r5, r6, lr}

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 80015da:	601a      	str	r2, [r3, #0]

  usrMain();                                /* go! */
}


void jumpToUser(u32 usrAddr) {
 80015dc:	4604      	mov	r4, r0
    /* tear down all the dfu related setup */
    // disable usb interrupts, clear them, turn off usb, set the disc pin
    // todo pick exactly what we want to do here, now its just a conservative

    flashLock();
    usbDsbISR();
 80015de:	f7ff fcd7 	bl	8000f90 <usbDsbISR>
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <jumpToUser+0x88>)
    rNVIC->ICER[1] = 0xFFFFFFFF;
    rNVIC->ICPR[0] = 0xFFFFFFFF;
    rNVIC->ICPR[1] = 0xFFFFFFFF;

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 80015e4:	491e      	ldr	r1, [pc, #120]	; (8001660 <jumpToUser+0x8c>)
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 80015e6:	f04f 32ff 	mov.w	r2, #4294967295
    rNVIC->ICER[1] = 0xFFFFFFFF;
    rNVIC->ICPR[0] = 0xFFFFFFFF;
    rNVIC->ICPR[1] = 0xFFFFFFFF;

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 80015ea:	2004      	movs	r0, #4
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 80015ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    rNVIC->ICER[1] = 0xFFFFFFFF;
 80015f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    rNVIC->ICPR[0] = 0xFFFFFFFF;
 80015f4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    rNVIC->ICPR[1] = 0xFFFFFFFF;
 80015f8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 80015fc:	6008      	str	r0, [r1, #0]
    flashLock();
    usbDsbISR();
    nvicDisableInterrupts();
	
#ifndef HAS_MAPLE_HARDWARE	
	usbDsbBus();
 80015fe:	f7ff fc39 	bl	8000e74 <usbDsbBus>
    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);   
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <jumpToUser+0x90>)
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8001604:	4a18      	ldr	r2, [pc, #96]	; (8001668 <jumpToUser+0x94>)
    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);   
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8001606:	6818      	ldr	r0, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8001608:	4918      	ldr	r1, [pc, #96]	; (800166c <jumpToUser+0x98>)
    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);   
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 800160a:	f040 0001 	orr.w	r0, r0, #1
 800160e:	6018      	str	r0, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8001610:	6810      	ldr	r0, [r2, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 8001612:	4d17      	ldr	r5, [pc, #92]	; (8001670 <jumpToUser+0x9c>)
    USART_Cmd(USART1, ENABLE);   
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8001614:	4001      	ands	r1, r0
 8001616:	6011      	str	r1, [r2, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
 8001618:	6819      	ldr	r1, [r3, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 800161a:	2600      	movs	r6, #0
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
 800161c:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8001620:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001624:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
 8001626:	6818      	ldr	r0, [r3, #0]
	usbDsbBus();
#endif
	
// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs
    SET_REG(AFIO_MAPR,(GET_REG(AFIO_MAPR) & ~AFIO_MAPR_SWJ_CFG) | AFIO_MAPR_SWJ_CFG_NO_JTAG_NO_SW);// Try to disable SWD AND JTAG so we can use those pins (not sure if this works).
 8001628:	4912      	ldr	r1, [pc, #72]	; (8001674 <jumpToUser+0xa0>)

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
 800162a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800162e:	6018      	str	r0, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);
 8001630:	6813      	ldr	r3, [r2, #0]
  typedef void (*funcPtr)(void);
  u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */

  funcPtr usrMain = (funcPtr) jumpAddr;

  SET_REG(SCB_VTOR, (vu32) (usrAddr));
 8001632:	4811      	ldr	r0, [pc, #68]	; (8001678 <jumpToUser+0xa4>)
void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);
 8001634:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001638:	6013      	str	r3, [r2, #0]

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 800163a:	602e      	str	r6, [r5, #0]
	usbDsbBus();
#endif
	
// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs
    SET_REG(AFIO_MAPR,(GET_REG(AFIO_MAPR) & ~AFIO_MAPR_SWJ_CFG) | AFIO_MAPR_SWJ_CFG_NO_JTAG_NO_SW);// Try to disable SWD AND JTAG so we can use those pins (not sure if this works).
 800163c:	680b      	ldr	r3, [r1, #0]
 800163e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001642:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001646:	600b      	str	r3, [r1, #0]
void setMspAndJump(u32 usrAddr) {
  // Dedicated function with no call to any function (appart the last call)
  // This way, there is no manipulation of the stack here, ensuring that GGC
  // didn't insert any pop from the SP after having set the MSP.
  typedef void (*funcPtr)(void);
  u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */
 8001648:	6863      	ldr	r3, [r4, #4]

  funcPtr usrMain = (funcPtr) jumpAddr;

  SET_REG(SCB_VTOR, (vu32) (usrAddr));
 800164a:	6004      	str	r4, [r0, #0]

  asm volatile("msr msp, %0"::"g"
               (*(volatile u32 *)usrAddr));
 800164c:	6822      	ldr	r2, [r4, #0]

  funcPtr usrMain = (funcPtr) jumpAddr;

  SET_REG(SCB_VTOR, (vu32) (usrAddr));

  asm volatile("msr msp, %0"::"g"
 800164e:	f382 8808 	msr	MSP, r2
               (*(volatile u32 *)usrAddr));

  usrMain();                                /* go! */
 8001652:	4798      	blx	r3
 8001654:	bd70      	pop	{r4, r5, r6, pc}
 8001656:	bf00      	nop
 8001658:	40022010 	andmi	r2, r2, r0, lsl r0
 800165c:	e000e100 	and	lr, r0, r0, lsl #2
 8001660:	e000e010 	and	lr, r0, r0, lsl r0
 8001664:	40021000 	andmi	r1, r2, r0
 8001668:	40021004 	andmi	r1, r2, r4
 800166c:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000
 8001670:	40021008 	andmi	r1, r2, r8
 8001674:	40010004 	andmi	r0, r1, r4
 8001678:	e000ed08 	and	lr, r0, r8, lsl #26

0800167c <nvicInit>:
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <nvicInit+0x68>)
    return flagSet;
}



void nvicInit(NVIC_InitTypeDef *NVIC_InitStruct) {
 800167e:	b410      	push	{r4}
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 8001680:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001682:	7844      	ldrb	r4, [r0, #1]
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 8001684:	43db      	mvns	r3, r3
 8001686:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 800168a:	210f      	movs	r1, #15
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
 800168c:	f1c3 0204 	rsb	r2, r3, #4
    tmpsub = tmpsub >> tmppriority;
 8001690:	40d9      	lsrs	r1, r3

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001692:	fa04 f202 	lsl.w	r2, r4, r2
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001696:	7884      	ldrb	r4, [r0, #2]

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8001698:	7803      	ldrb	r3, [r0, #0]
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800169a:	4021      	ands	r1, r4
 800169c:	4311      	orrs	r1, r2

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 800169e:	f003 0203 	and.w	r2, r3, #3
 80016a2:	00d2      	lsls	r2, r2, #3

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80016a4:	24ff      	movs	r4, #255	; 0xff
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 80016a6:	0109      	lsls	r1, r1, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80016a8:	4091      	lsls	r1, r2

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80016aa:	fa04 f202 	lsl.w	r2, r4, r2
 80016ae:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80016b2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80016b6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 80016ba:	f8d3 4300 	ldr.w	r4, [r3, #768]	; 0x300
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
    tmppriority &= tmpmask;
 80016be:	4011      	ands	r1, r2
    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 80016c0:	ea24 0202 	bic.w	r2, r4, r2
    tmppriority &= tmpmask;
    tmpreg |= tmppriority;
 80016c4:	430a      	orrs	r2, r1

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 80016c6:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 80016ca:	7803      	ldrb	r3, [r0, #0]
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 80016cc:	2101      	movs	r1, #1
 80016ce:	f003 021f 	and.w	r2, r3, #31
 80016d2:	4091      	lsls	r1, r2
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <nvicInit+0x6c>)
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}
 80016dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	and	lr, r0, r0, lsl #26
 80016e8:	e000e100 	and	lr, r0, r0, lsl #2

080016ec <nvicDisableInterrupts>:

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <nvicDisableInterrupts+0x20>)
    rNVIC->ICER[1] = 0xFFFFFFFF;
    rNVIC->ICPR[0] = 0xFFFFFFFF;
    rNVIC->ICPR[1] = 0xFFFFFFFF;

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <nvicDisableInterrupts+0x24>)
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
    rNVIC->ICER[1] = 0xFFFFFFFF;
    rNVIC->ICPR[0] = 0xFFFFFFFF;
    rNVIC->ICPR[1] = 0xFFFFFFFF;

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 80016f4:	2004      	movs	r0, #4
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 80016f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    rNVIC->ICER[1] = 0xFFFFFFFF;
 80016fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    rNVIC->ICPR[0] = 0xFFFFFFFF;
 80016fe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    rNVIC->ICPR[1] = 0xFFFFFFFF;
 8001702:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 8001706:	6008      	str	r0, [r1, #0]
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	and	lr, r0, r0, lsl #2
 8001710:	e000e010 	and	lr, r0, r0, lsl r0

08001714 <systemHardReset>:

void systemHardReset(void) {
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;

    /* Reset  */
    rSCB->AIRCR = (u32)AIRCR_RESET_REQ;
 8001714:	4b02      	ldr	r3, [pc, #8]	; (8001720 <systemHardReset+0xc>)
 8001716:	4a03      	ldr	r2, [pc, #12]	; (8001724 <systemHardReset+0x10>)
 8001718:	60da      	str	r2, [r3, #12]

    /*  should never get here */
    while (1) {
        asm volatile("nop");
 800171a:	bf00      	nop
 800171c:	e7fd      	b.n	800171a <systemHardReset+0x6>
 800171e:	bf00      	nop
 8001720:	e000ed00 	and	lr, r0, r0, lsl #26
 8001724:	05fa0004 	ldrbeq	r0, [sl, #4]!

08001728 <flashErasePage>:
    }
}

bool flashErasePage(u32 pageAddr) {
    u32 rwmVal = GET_REG(FLASH_CR);
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <flashErasePage+0x34>)
    rwmVal = FLASH_CR_PER;
    SET_REG(FLASH_CR, rwmVal);
 800172a:	2102      	movs	r1, #2

    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 800172c:	4a0c      	ldr	r2, [pc, #48]	; (8001760 <flashErasePage+0x38>)
    while (1) {
        asm volatile("nop");
    }
}

bool flashErasePage(u32 pageAddr) {
 800172e:	b410      	push	{r4}
    u32 rwmVal = GET_REG(FLASH_CR);
 8001730:	681c      	ldr	r4, [r3, #0]
    rwmVal = FLASH_CR_PER;
    SET_REG(FLASH_CR, rwmVal);
 8001732:	6019      	str	r1, [r3, #0]

    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8001734:	6813      	ldr	r3, [r2, #0]
 8001736:	07db      	lsls	r3, r3, #31
 8001738:	d4fc      	bmi.n	8001734 <flashErasePage+0xc>
    SET_REG(FLASH_AR, pageAddr);
 800173a:	4c0a      	ldr	r4, [pc, #40]	; (8001764 <flashErasePage+0x3c>)
    SET_REG(FLASH_CR, FLASH_CR_START | FLASH_CR_PER);
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <flashErasePage+0x34>)
 800173e:	2142      	movs	r1, #66	; 0x42
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8001740:	4a07      	ldr	r2, [pc, #28]	; (8001760 <flashErasePage+0x38>)
    u32 rwmVal = GET_REG(FLASH_CR);
    rwmVal = FLASH_CR_PER;
    SET_REG(FLASH_CR, rwmVal);

    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
    SET_REG(FLASH_AR, pageAddr);
 8001742:	6020      	str	r0, [r4, #0]
    SET_REG(FLASH_CR, FLASH_CR_START | FLASH_CR_PER);
 8001744:	6019      	str	r1, [r3, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8001746:	6813      	ldr	r3, [r2, #0]
 8001748:	f013 0301 	ands.w	r3, r3, #1
 800174c:	d1fb      	bne.n	8001746 <flashErasePage+0x1e>

    /* todo: verify the page was erased */

    rwmVal = 0x00;
    SET_REG(FLASH_CR, rwmVal);
 800174e:	4a03      	ldr	r2, [pc, #12]	; (800175c <flashErasePage+0x34>)

    return TRUE;
}
 8001750:	2001      	movs	r0, #1
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}

    /* todo: verify the page was erased */

    rwmVal = 0x00;
    SET_REG(FLASH_CR, rwmVal);
 8001752:	6013      	str	r3, [r2, #0]

    return TRUE;
}
 8001754:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40022010 	andmi	r2, r2, r0, lsl r0
 8001760:	4002200c 	andmi	r2, r2, ip
 8001764:	40022014 	andmi	r2, r2, r4, lsl r0

08001768 <flashWriteWord>:
    }

    return TRUE;
}

bool flashWriteWord(u32 addr, u32 word) {
 8001768:	b430      	push	{r4, r5}
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;
 800176a:	0c0a      	lsrs	r2, r1, #16
    }

    return TRUE;
}

bool flashWriteWord(u32 addr, u32 word) {
 800176c:	b082      	sub	sp, #8
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
 800176e:	b28c      	uxth	r4, r1
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;

    u32 rwmVal = GET_REG(FLASH_CR);
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <flashWriteWord+0x50>)
    return TRUE;
}

bool flashWriteWord(u32 addr, u32 word) {
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
 8001772:	9400      	str	r4, [sp, #0]
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;
 8001774:	9201      	str	r2, [sp, #4]

    u32 rwmVal = GET_REG(FLASH_CR);
    SET_REG(FLASH_CR, FLASH_CR_PG);
 8001776:	2401      	movs	r4, #1

    /* apparently we need not write to FLASH_AR and can
       simply do a native write of a half word */
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8001778:	4a10      	ldr	r2, [pc, #64]	; (80017bc <flashWriteWord+0x54>)
bool flashWriteWord(u32 addr, u32 word) {
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;

    u32 rwmVal = GET_REG(FLASH_CR);
 800177a:	681d      	ldr	r5, [r3, #0]
    SET_REG(FLASH_CR, FLASH_CR_PG);
 800177c:	601c      	str	r4, [r3, #0]

    /* apparently we need not write to FLASH_AR and can
       simply do a native write of a half word */
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 800177e:	6813      	ldr	r3, [r2, #0]
 8001780:	07dc      	lsls	r4, r3, #31
 8001782:	d4fc      	bmi.n	800177e <flashWriteWord+0x16>
    *(flashAddr + 0x01) = (vu16)hhWord;
 8001784:	9b01      	ldr	r3, [sp, #4]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8001786:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <flashWriteWord+0x54>)
    SET_REG(FLASH_CR, FLASH_CR_PG);

    /* apparently we need not write to FLASH_AR and can
       simply do a native write of a half word */
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
    *(flashAddr + 0x01) = (vu16)hhWord;
 8001788:	b29b      	uxth	r3, r3
 800178a:	8043      	strh	r3, [r0, #2]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 800178c:	6813      	ldr	r3, [r2, #0]
 800178e:	07db      	lsls	r3, r3, #31
 8001790:	d4fc      	bmi.n	800178c <flashWriteWord+0x24>
    *(flashAddr) = (vu16)lhWord;
 8001792:	9b00      	ldr	r3, [sp, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8001794:	4a09      	ldr	r2, [pc, #36]	; (80017bc <flashWriteWord+0x54>)
    /* apparently we need not write to FLASH_AR and can
       simply do a native write of a half word */
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
    *(flashAddr + 0x01) = (vu16)hhWord;
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
    *(flashAddr) = (vu16)lhWord;
 8001796:	b29b      	uxth	r3, r3
 8001798:	8003      	strh	r3, [r0, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 800179a:	6813      	ldr	r3, [r2, #0]
 800179c:	07dc      	lsls	r4, r3, #31
 800179e:	d4fc      	bmi.n	800179a <flashWriteWord+0x32>

    rwmVal &= 0xFFFFFFFE;
    SET_REG(FLASH_CR, rwmVal);
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <flashWriteWord+0x50>)
    *(flashAddr + 0x01) = (vu16)hhWord;
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
    *(flashAddr) = (vu16)lhWord;
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}

    rwmVal &= 0xFFFFFFFE;
 80017a2:	f025 0201 	bic.w	r2, r5, #1
    SET_REG(FLASH_CR, rwmVal);
 80017a6:	601a      	str	r2, [r3, #0]

    /* verify the write */
    if (*(vu32 *)addr != word) {
 80017a8:	6800      	ldr	r0, [r0, #0]
        return FALSE;
    }

    return TRUE;
}
 80017aa:	1a0b      	subs	r3, r1, r0
 80017ac:	4258      	negs	r0, r3
 80017ae:	4158      	adcs	r0, r3
 80017b0:	b002      	add	sp, #8
 80017b2:	bc30      	pop	{r4, r5}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40022010 	andmi	r2, r2, r0, lsl r0
 80017bc:	4002200c 	andmi	r2, r2, ip

080017c0 <flashLock>:

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 80017c0:	4b01      	ldr	r3, [pc, #4]	; (80017c8 <flashLock+0x8>)
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	4770      	bx	lr
 80017c8:	40022010 	andmi	r2, r2, r0, lsl r0

080017cc <flashUnlock>:
}

void flashUnlock() {
    /* unlock the flash */
    SET_REG(FLASH_KEYR, FLASH_KEY1);
 80017cc:	4b02      	ldr	r3, [pc, #8]	; (80017d8 <flashUnlock+0xc>)
 80017ce:	4903      	ldr	r1, [pc, #12]	; (80017dc <flashUnlock+0x10>)
    SET_REG(FLASH_KEYR, FLASH_KEY2);
 80017d0:	4a03      	ldr	r2, [pc, #12]	; (80017e0 <flashUnlock+0x14>)
    SET_REG(FLASH_CR, 0x00000080);
}

void flashUnlock() {
    /* unlock the flash */
    SET_REG(FLASH_KEYR, FLASH_KEY1);
 80017d2:	6019      	str	r1, [r3, #0]
    SET_REG(FLASH_KEYR, FLASH_KEY2);
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	4770      	bx	lr
 80017d8:	40022004 	andmi	r2, r2, r4
 80017dc:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 80017e0:	cdef89ab 	stclgt	9, cr8, [pc, #684]!	; 8001a94 <dfuUpdateByRequest+0x1d4>

080017e4 <crMask>:

// Used to create the control register masking pattern, when setting control register mode.
unsigned int crMask(int pin)
{
	unsigned int mask;
	if (pin>=8)
 80017e4:	2807      	cmp	r0, #7
	{
		pin-=8;
 80017e6:	bfc8      	it	gt
 80017e8:	3808      	subgt	r0, #8
	}
	mask = 0x0F << (pin<<2);
 80017ea:	230f      	movs	r3, #15
 80017ec:	0080      	lsls	r0, r0, #2
 80017ee:	fa03 f000 	lsl.w	r0, r3, r0
	return ~mask;
}	
 80017f2:	43c0      	mvns	r0, r0
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop

080017f8 <getFlashEnd>:

#define FLASH_SIZE_REG 0x1FFFF7E0
int getFlashEnd(void)
{
	unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register 
	return ((int)(*flashSize & 0xffff) * 1024) + 0x08000000;
 80017f8:	4b02      	ldr	r3, [pc, #8]	; (8001804 <getFlashEnd+0xc>)
 80017fa:	8818      	ldrh	r0, [r3, #0]
 80017fc:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
}
 8001800:	0280      	lsls	r0, r0, #10
 8001802:	4770      	bx	lr
 8001804:	1ffff7e0 	svcne	0x00fff7e0

08001808 <getFlashPageSize>:

int getFlashPageSize(void)
{

	unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register 
	if ((*flashSize & 0xffff) > 128)
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <getFlashPageSize+0x14>)
 800180a:	881b      	ldrh	r3, [r3, #0]
	{
		return 0x800;
 800180c:	2b81      	cmp	r3, #129	; 0x81
	}
	else
	{
		return 0x400;
	}
}
 800180e:	bf34      	ite	cc
 8001810:	f44f 6080 	movcc.w	r0, #1024	; 0x400
 8001814:	f44f 6000 	movcs.w	r0, #2048	; 0x800
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	1ffff7e0 	svcne	0x00fff7e0

08001820 <dfuInit>:


volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
 8001820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dfuAppStatus.bStatus = OK;
 8001824:	4a19      	ldr	r2, [pc, #100]	; (800188c <dfuInit+0x6c>)
 8001826:	2300      	movs	r3, #0
    dfuAppStatus.bState = dfuIDLE;
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
 8001828:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80018a8 <dfuInit+0x88>
 800182c:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80018ac <dfuInit+0x8c>
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
 8001830:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80018b0 <dfuInit+0x90>
    thisBlockLen = 0;;
 8001834:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80018b4 <dfuInit+0x94>
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 8001838:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80018b8 <dfuInit+0x98>
 800183c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80018bc <dfuInit+0x9c>
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
 8001840:	4f13      	ldr	r7, [pc, #76]	; (8001890 <dfuInit+0x70>)
    code_copy_lock = WAIT;
 8001842:	4d14      	ldr	r5, [pc, #80]	; (8001894 <dfuInit+0x74>)
    dfuBusy = FALSE;
 8001844:	4c14      	ldr	r4, [pc, #80]	; (8001898 <dfuInit+0x78>)
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
 8001846:	2102      	movs	r1, #2

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 8001848:	7013      	strb	r3, [r2, #0]
    userFirmwareLen = 0;
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
    code_copy_lock = WAIT;
 800184a:	2603      	movs	r6, #3
volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
    dfuAppStatus.bwPollTimeout0 = 0x00;
 800184c:	7053      	strb	r3, [r2, #1]
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
    code_copy_lock = WAIT;
    dfuBusy = FALSE;
    memset(sha256sum, 0xFF, sizeof(sha256sum));
 800184e:	4813      	ldr	r0, [pc, #76]	; (800189c <dfuInit+0x7c>)

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
 8001850:	7093      	strb	r3, [r2, #2]
    dfuAppStatus.bwPollTimeout2 = 0x00;
 8001852:	70d3      	strb	r3, [r2, #3]
    dfuAppStatus.bState = dfuIDLE;
 8001854:	7111      	strb	r1, [r2, #4]
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
 8001856:	7153      	strb	r3, [r2, #5]
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
    code_copy_lock = WAIT;
    dfuBusy = FALSE;
    memset(sha256sum, 0xFF, sizeof(sha256sum));
 8001858:	21ff      	movs	r1, #255	; 0xff
 800185a:	2220      	movs	r2, #32
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
 800185c:	f8cb 3000 	str.w	r3, [fp]
    thisBlockLen = 0;;
 8001860:	f8aa 3000 	strh.w	r3, [sl]
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 8001864:	f8c8 9000 	str.w	r9, [r8]
    userAppEnd = RAM_END;
 8001868:	f8ce c000 	str.w	ip, [lr]
    userUploadType=DFU_UPLOAD_NONE;
 800186c:	703b      	strb	r3, [r7, #0]
    code_copy_lock = WAIT;
 800186e:	702e      	strb	r6, [r5, #0]
    dfuBusy = FALSE;
 8001870:	7023      	strb	r3, [r4, #0]
    memset(sha256sum, 0xFF, sizeof(sha256sum));
 8001872:	f005 f87d 	bl	8006970 <memset>
    memset(input, 0xFF, sizeof(input));
 8001876:	480a      	ldr	r0, [pc, #40]	; (80018a0 <dfuInit+0x80>)
 8001878:	21ff      	movs	r1, #255	; 0xff
 800187a:	225c      	movs	r2, #92	; 0x5c
 800187c:	f005 f878 	bl	8006970 <memset>

    sha256_starts(&ctx);
}
 8001880:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    code_copy_lock = WAIT;
    dfuBusy = FALSE;
    memset(sha256sum, 0xFF, sizeof(sha256sum));
    memset(input, 0xFF, sizeof(input));

    sha256_starts(&ctx);
 8001884:	4807      	ldr	r0, [pc, #28]	; (80018a4 <dfuInit+0x84>)
 8001886:	f001 bd9f 	b.w	80033c8 <sha256_starts>
 800188a:	bf00      	nop
 800188c:	20000db8 			; <UNDEFINED> instruction: 0x20000db8
 8001890:	20000db4 			; <UNDEFINED> instruction: 0x20000db4
 8001894:	20000560 	andcs	r0, r0, r0, ror #10
 8001898:	20000dc0 	andcs	r0, r0, r0, asr #27
 800189c:	200004d8 	ldrdcs	r0, [r0], -r8
 80018a0:	2000047c 	andcs	r0, r0, ip, ror r4
 80018a4:	200004f8 	strdcs	r0, [r0], -r8
 80018a8:	200002c4 	andcs	r0, r0, r4, asr #5
 80018ac:	20005000 	andcs	r5, r0, r0
 80018b0:	20000db0 			; <UNDEFINED> instruction: 0x20000db0
 80018b4:	20000dac 	andcs	r0, r0, ip, lsr #27
 80018b8:	200002c8 	andcs	r0, r0, r8, asr #5
 80018bc:	20000c00 	andcs	r0, r0, r0, lsl #24

080018c0 <dfuUpdateByRequest>:
}

bool dfuUpdateByRequest(void) {
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 80018c0:	4ab1      	ldr	r2, [pc, #708]	; (8001b88 <dfuUpdateByRequest+0x2c8>)
    memset(input, 0xFF, sizeof(input));

    sha256_starts(&ctx);
}

bool dfuUpdateByRequest(void) {
 80018c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 80018c6:	2101      	movs	r1, #1

    u8 startState = dfuAppStatus.bState;
 80018c8:	4cb0      	ldr	r4, [pc, #704]	; (8001b8c <dfuUpdateByRequest+0x2cc>)
}

bool dfuUpdateByRequest(void) {
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 80018ca:	7011      	strb	r1, [r2, #0]

    u8 startState = dfuAppStatus.bState;
 80018cc:	7923      	ldrb	r3, [r4, #4]
    dfuAppStatus.bStatus = OK;
 80018ce:	2000      	movs	r0, #0
bool dfuUpdateByRequest(void) {
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;

    u8 startState = dfuAppStatus.bState;
 80018d0:	b2db      	uxtb	r3, r3
    dfuAppStatus.bStatus = OK;
    
    /* often leaner to nest if's then embed a switch/case */
    /* but who the fuck cares? use a better compiler. we have space */
    if (startState == dfuIDLE)  {
 80018d2:	2b02      	cmp	r3, #2
    memset(input, 0xFF, sizeof(input));

    sha256_starts(&ctx);
}

bool dfuUpdateByRequest(void) {
 80018d4:	b0a5      	sub	sp, #148	; 0x94
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;

    u8 startState = dfuAppStatus.bState;
    dfuAppStatus.bStatus = OK;
 80018d6:	7020      	strb	r0, [r4, #0]
    
    /* often leaner to nest if's then embed a switch/case */
    /* but who the fuck cares? use a better compiler. we have space */
    if (startState == dfuIDLE)  {
 80018d8:	d021      	beq.n	800191e <dfuUpdateByRequest+0x5e>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNLOAD_SYNC)         {
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d03a      	beq.n	8001954 <dfuUpdateByRequest+0x94>
            dfuAppStatus.bState  = dfuDNLOAD_SYNC;
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else if (startState == dfuDNBUSY)              {
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d075      	beq.n	80019ce <dfuUpdateByRequest+0x10e>
            code_copy_lock = WAIT;
            dfuAppStatus.bState = dfuDNLOAD_IDLE;
        } else {
            dfuAppStatus.bState = dfuDNBUSY;
        }
    } else if (startState == dfuDNLOAD_IDLE)         {
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	f000 80a3 	beq.w	8001a2e <dfuUpdateByRequest+0x16e>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST_SYNC) {
 80018e8:	2b06      	cmp	r3, #6
 80018ea:	d07a      	beq.n	80019e2 <dfuUpdateByRequest+0x122>
            dfuAppStatus.bState  = dfuMANIFEST_SYNC;
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else if (startState == dfuMANIFEST) {
 80018ec:	2b07      	cmp	r3, #7
 80018ee:	d07d      	beq.n	80019ec <dfuUpdateByRequest+0x12c>
        /* device is in manifestation phase */

        /* should never receive request while in manifest! */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
        dfuAppStatus.bStatus = OK;
    } else if (startState == dfuMANIFEST_WAIT_RESET) {
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d074      	beq.n	80019de <dfuUpdateByRequest+0x11e>
        /* device has programmed new firmware but needs external
           usb reset or power on reset to run the new code */

        /* consider timing out and self-resetting */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
    } else if (startState == dfuUPLOAD_IDLE) {
 80018f4:	2b09      	cmp	r3, #9
 80018f6:	f000 80cc 	beq.w	8001a92 <dfuUpdateByRequest+0x1d2>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else if (startState == dfuERROR)               {
 80018fa:	2b0a      	cmp	r3, #10
 80018fc:	d11e      	bne.n	800193c <dfuUpdateByRequest+0x7c>
        /* status is in error, awaiting DFU_CLRSTATUS request */
        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 80018fe:	4ba4      	ldr	r3, [pc, #656]	; (8001b90 <dfuUpdateByRequest+0x2d0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	785b      	ldrb	r3, [r3, #1]
 8001904:	2b03      	cmp	r3, #3
 8001906:	f000 818f 	beq.w	8001c28 <dfuUpdateByRequest+0x368>
            /* todo, add routine to wait for last block write to finish */
            dfuAppStatus.bState  = dfuERROR;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 800190a:	2b05      	cmp	r3, #5
 800190c:	f000 818c 	beq.w	8001c28 <dfuUpdateByRequest+0x368>
            dfuAppStatus.bState  = dfuERROR;
        } else if (pInformation->USBbRequest == DFU_CLRSTATUS) {
 8001910:	2b04      	cmp	r3, #4
 8001912:	d113      	bne.n	800193c <dfuUpdateByRequest+0x7c>
            /* todo handle any cleanup we need here */
            dfuAppStatus.bState  = dfuIDLE;
 8001914:	2202      	movs	r2, #2
            dfuAppStatus.bStatus = OK;
 8001916:	2300      	movs	r3, #0
            dfuAppStatus.bState  = dfuERROR;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
            dfuAppStatus.bState  = dfuERROR;
        } else if (pInformation->USBbRequest == DFU_CLRSTATUS) {
            /* todo handle any cleanup we need here */
            dfuAppStatus.bState  = dfuIDLE;
 8001918:	7122      	strb	r2, [r4, #4]
            dfuAppStatus.bStatus = OK;
 800191a:	7023      	strb	r3, [r4, #0]
 800191c:	e012      	b.n	8001944 <dfuUpdateByRequest+0x84>
    /* but who the fuck cares? use a better compiler. we have space */
    if (startState == dfuIDLE)  {
        /*  device running inside DFU mode */
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop

        if (pInformation->USBbRequest == DFU_DNLOAD) {
 800191e:	4d9c      	ldr	r5, [pc, #624]	; (8001b90 <dfuUpdateByRequest+0x2d0>)
    
    /* often leaner to nest if's then embed a switch/case */
    /* but who the fuck cares? use a better compiler. we have space */
    if (startState == dfuIDLE)  {
        /*  device running inside DFU mode */
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop
 8001920:	7011      	strb	r1, [r2, #0]

        if (pInformation->USBbRequest == DFU_DNLOAD) {
 8001922:	6829      	ldr	r1, [r5, #0]
 8001924:	784a      	ldrb	r2, [r1, #1]
 8001926:	2a01      	cmp	r2, #1
 8001928:	f000 8090 	beq.w	8001a4c <dfuUpdateByRequest+0x18c>
				}
            } else {
                dfuAppStatus.bState  = dfuERROR;
                dfuAppStatus.bStatus = errNOTDONE;
            }
        } else if (pInformation->USBbRequest == DFU_UPLOAD) {
 800192c:	2a02      	cmp	r2, #2
 800192e:	d061      	beq.n	80019f4 <dfuUpdateByRequest+0x134>
				// However the code should never get here as only AlternateSetting 1 and 2 are allowed (see above)
					dfuAppStatus.bState  = dfuERROR;
					dfuAppStatus.bStatus = errWRITE;
					break;					
			}
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8001930:	2a06      	cmp	r2, #6
 8001932:	d05c      	beq.n	80019ee <dfuUpdateByRequest+0x12e>
            dfuAppStatus.bState  = dfuIDLE;
            dfuAppStatus.bStatus = OK;  /* are we really ok? we were just aborted */
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8001934:	2a03      	cmp	r2, #3
 8001936:	d052      	beq.n	80019de <dfuUpdateByRequest+0x11e>
    } else if (startState == dfuMANIFEST_SYNC) {
        /* device has received last block, waiting DFU_GETSTATUS request */
        if (pInformation->USBbRequest == DFU_GETSTATUS) {
            dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
            dfuAppStatus.bStatus = OK;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8001938:	2a05      	cmp	r2, #5
 800193a:	d050      	beq.n	80019de <dfuUpdateByRequest+0x11e>
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else {
        /* some kind of error... */
        dfuAppStatus.bState  = dfuERROR;
 800193c:	220a      	movs	r2, #10
        dfuAppStatus.bStatus = errSTALLEDPKT;
 800193e:	230f      	movs	r3, #15
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else {
        /* some kind of error... */
        dfuAppStatus.bState  = dfuERROR;
 8001940:	7122      	strb	r2, [r4, #4]
        dfuAppStatus.bStatus = errSTALLEDPKT;
 8001942:	7023      	strb	r3, [r4, #0]
    }

    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
 8001944:	7820      	ldrb	r0, [r4, #0]
}
 8001946:	f1d0 0001 	rsbs	r0, r0, #1
 800194a:	bf38      	it	cc
 800194c:	2000      	movcc	r0, #0
 800194e:	b025      	add	sp, #148	; 0x94
 8001950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNLOAD_SYNC)         {
        /* device received block, waiting for DFU_GETSTATUS request */
        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8001954:	4a8e      	ldr	r2, [pc, #568]	; (8001b90 <dfuUpdateByRequest+0x2d0>)
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	7852      	ldrb	r2, [r2, #1]
 800195a:	2a03      	cmp	r2, #3
 800195c:	d1ec      	bne.n	8001938 <dfuUpdateByRequest+0x78>

            } 
			else 
			*/
			{
                dfuAppStatus.bState = dfuDNLOAD_IDLE;
 800195e:	2205      	movs	r2, #5
        }
    } 
	else 
*/
	
	if (userUploadType == DFU_UPLOAD_FLASH_0X8008000) {
 8001960:	4b8c      	ldr	r3, [pc, #560]	; (8001b94 <dfuUpdateByRequest+0x2d4>)
		userSpace = (u32 *)(USER_CODE_FLASH0X8008000 + userFirmwareLen);
 8001962:	f8df b248 	ldr.w	fp, [pc, #584]	; 8001bac <dfuUpdateByRequest+0x2ec>

            } 
			else 
			*/
			{
                dfuAppStatus.bState = dfuDNLOAD_IDLE;
 8001966:	7122      	strb	r2, [r4, #4]
        }
    } 
	else 
*/
	
	if (userUploadType == DFU_UPLOAD_FLASH_0X8008000) {
 8001968:	781b      	ldrb	r3, [r3, #0]
		userSpace = (u32 *)(USER_CODE_FLASH0X8008000 + userFirmwareLen);
 800196a:	f8db 5000 	ldr.w	r5, [fp]
        }
    } 
	else 
*/
	
	if (userUploadType == DFU_UPLOAD_FLASH_0X8008000) {
 800196e:	2b04      	cmp	r3, #4
		userSpace = (u32 *)(USER_CODE_FLASH0X8008000 + userFirmwareLen);
 8001970:	f105 6500 	add.w	r5, r5, #134217728	; 0x8000000
 8001974:	bf0c      	ite	eq
 8001976:	f505 4500 	addeq.w	r5, r5, #32768	; 0x8000
	}
	else {
		userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);		
 800197a:	f505 5500 	addne.w	r5, r5, #8192	; 0x2000
	}

    flashErasePage((u32)(userSpace));

    for (i = 0; i < thisBlockLen; i = i + 4) {
 800197e:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8001ba8 <dfuUpdateByRequest+0x2e8>
	}
	else {
		userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);		
	}

    flashErasePage((u32)(userSpace));
 8001982:	4628      	mov	r0, r5
 8001984:	f7ff fed0 	bl	8001728 <flashErasePage>

    for (i = 0; i < thisBlockLen; i = i + 4) {
 8001988:	f8b9 3000 	ldrh.w	r3, [r9]
 800198c:	b29b      	uxth	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8099 	beq.w	8001ac6 <dfuUpdateByRequest+0x206>
 8001994:	4f80      	ldr	r7, [pc, #512]	; (8001b98 <dfuUpdateByRequest+0x2d8>)
        if ((u32)(userSpace) >= 0x8008074)
 8001996:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8001bd4 <dfuUpdateByRequest+0x314>
		userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);		
	}

    flashErasePage((u32)(userSpace));

    for (i = 0; i < thisBlockLen; i = i + 4) {
 800199a:	2600      	movs	r6, #0
 800199c:	e00a      	b.n	80019b4 <dfuUpdateByRequest+0xf4>
        if ((u32)(userSpace) >= 0x8008074)
        {
            sha256_update(&ctx, recvBuffer +i, sizeof(u32));
        }
        flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
 800199e:	4640      	mov	r0, r8
 80019a0:	f857 1b04 	ldr.w	r1, [r7], #4
 80019a4:	f7ff fee0 	bl	8001768 <flashWriteWord>
		userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);		
	}

    flashErasePage((u32)(userSpace));

    for (i = 0; i < thisBlockLen; i = i + 4) {
 80019a8:	f8b9 3000 	ldrh.w	r3, [r9]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	429e      	cmp	r6, r3
 80019b0:	f280 8089 	bge.w	8001ac6 <dfuUpdateByRequest+0x206>
        if ((u32)(userSpace) >= 0x8008074)
 80019b4:	4555      	cmp	r5, sl
 80019b6:	46a8      	mov	r8, r5
		userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);		
	}

    flashErasePage((u32)(userSpace));

    for (i = 0; i < thisBlockLen; i = i + 4) {
 80019b8:	f106 0604 	add.w	r6, r6, #4
        if ((u32)(userSpace) >= 0x8008074)
        {
            sha256_update(&ctx, recvBuffer +i, sizeof(u32));
        }
        flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
 80019bc:	f105 0504 	add.w	r5, r5, #4
	}

    flashErasePage((u32)(userSpace));

    for (i = 0; i < thisBlockLen; i = i + 4) {
        if ((u32)(userSpace) >= 0x8008074)
 80019c0:	d9ed      	bls.n	800199e <dfuUpdateByRequest+0xde>
        {
            sha256_update(&ctx, recvBuffer +i, sizeof(u32));
 80019c2:	4876      	ldr	r0, [pc, #472]	; (8001b9c <dfuUpdateByRequest+0x2dc>)
 80019c4:	4639      	mov	r1, r7
 80019c6:	2204      	movs	r2, #4
 80019c8:	f003 fcdc 	bl	8005384 <sha256_update>
 80019cc:	e7e7      	b.n	800199e <dfuUpdateByRequest+0xde>
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else if (startState == dfuDNBUSY)              {
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {
 80019ce:	4a74      	ldr	r2, [pc, #464]	; (8001ba0 <dfuUpdateByRequest+0x2e0>)
 80019d0:	7811      	ldrb	r1, [r2, #0]
 80019d2:	2902      	cmp	r1, #2
 80019d4:	d103      	bne.n	80019de <dfuUpdateByRequest+0x11e>

            dfuAppStatus.bwPollTimeout0 = 0x00;
            code_copy_lock = WAIT;
 80019d6:	2103      	movs	r1, #3
        }
    } else if (startState == dfuDNBUSY)              {
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {

            dfuAppStatus.bwPollTimeout0 = 0x00;
 80019d8:	7060      	strb	r0, [r4, #1]
            code_copy_lock = WAIT;
            dfuAppStatus.bState = dfuDNLOAD_IDLE;
 80019da:	2305      	movs	r3, #5
    } else if (startState == dfuDNBUSY)              {
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {

            dfuAppStatus.bwPollTimeout0 = 0x00;
            code_copy_lock = WAIT;
 80019dc:	7011      	strb	r1, [r2, #0]
            dfuAppStatus.bState = dfuDNLOAD_IDLE;
 80019de:	7123      	strb	r3, [r4, #4]
 80019e0:	e7b0      	b.n	8001944 <dfuUpdateByRequest+0x84>
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST_SYNC) {
        /* device has received last block, waiting DFU_GETSTATUS request */
        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 80019e2:	4a6b      	ldr	r2, [pc, #428]	; (8001b90 <dfuUpdateByRequest+0x2d0>)
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	7852      	ldrb	r2, [r2, #1]
 80019e8:	2a03      	cmp	r2, #3
 80019ea:	d1a5      	bne.n	8001938 <dfuUpdateByRequest+0x78>
        }
    } else if (startState == dfuMANIFEST) {
        /* device is in manifestation phase */

        /* should never receive request while in manifest! */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
 80019ec:	2308      	movs	r3, #8
 80019ee:	7123      	strb	r3, [r4, #4]
        dfuAppStatus.bStatus = OK;
 80019f0:	7020      	strb	r0, [r4, #0]
 80019f2:	e7a7      	b.n	8001944 <dfuUpdateByRequest+0x84>
        } else if (pInformation->USBbRequest == DFU_UPLOAD) {
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
            
            /* record length of first block for calculating target
               address from wValue in consecutive blocks */
            uploadBlockLen = pInformation->USBwLengths.w;
 80019f4:	4b6b      	ldr	r3, [pc, #428]	; (8001ba4 <dfuUpdateByRequest+0x2e4>)
 80019f6:	88ca      	ldrh	r2, [r1, #6]
            } else {
                dfuAppStatus.bState  = dfuERROR;
                dfuAppStatus.bStatus = errNOTDONE;
            }
        } else if (pInformation->USBbRequest == DFU_UPLOAD) {
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 80019f8:	2009      	movs	r0, #9
 80019fa:	7120      	strb	r0, [r4, #4]
            
            /* record length of first block for calculating target
               address from wValue in consecutive blocks */
            uploadBlockLen = pInformation->USBwLengths.w;
 80019fc:	801a      	strh	r2, [r3, #0]
            thisBlockLen = uploadBlockLen; /* for this first block as well */
 80019fe:	8818      	ldrh	r0, [r3, #0]
 8001a00:	4a69      	ldr	r2, [pc, #420]	; (8001ba8 <dfuUpdateByRequest+0x2e8>)
 8001a02:	b280      	uxth	r0, r0
 8001a04:	8010      	strh	r0, [r2, #0]
            
            /* calculate where the data should be copied from */
            userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	8848      	ldrh	r0, [r1, #2]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	fb00 f003 	mul.w	r0, r0, r3
			
            switch(pInformation->Current_AlternateSetting) {
 8001a10:	7b0b      	ldrb	r3, [r1, #12]
               address from wValue in consecutive blocks */
            uploadBlockLen = pInformation->USBwLengths.w;
            thisBlockLen = uploadBlockLen; /* for this first block as well */
            
            /* calculate where the data should be copied from */
            userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8001a12:	4a66      	ldr	r2, [pc, #408]	; (8001bac <dfuUpdateByRequest+0x2ec>)
			
            switch(pInformation->Current_AlternateSetting) {
 8001a14:	2b01      	cmp	r3, #1
               address from wValue in consecutive blocks */
            uploadBlockLen = pInformation->USBwLengths.w;
            thisBlockLen = uploadBlockLen; /* for this first block as well */
            
            /* calculate where the data should be copied from */
            userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8001a16:	6010      	str	r0, [r2, #0]
			
            switch(pInformation->Current_AlternateSetting) {
 8001a18:	d033      	beq.n	8001a82 <dfuUpdateByRequest+0x1c2>
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d14e      	bne.n	8001abc <dfuUpdateByRequest+0x1fc>
				    userAppAddr = USER_CODE_FLASH0X8008000;
					userAppEnd = getFlashEnd();
					break;

				case 2: 
				    userAppAddr = USER_CODE_FLASH0X8002000;
 8001a1e:	4b64      	ldr	r3, [pc, #400]	; (8001bb0 <dfuUpdateByRequest+0x2f0>)
 8001a20:	4a64      	ldr	r2, [pc, #400]	; (8001bb4 <dfuUpdateByRequest+0x2f4>)
 8001a22:	601a      	str	r2, [r3, #0]
					userAppEnd = getFlashEnd();
 8001a24:	f7ff fee8 	bl	80017f8 <getFlashEnd>
 8001a28:	4b63      	ldr	r3, [pc, #396]	; (8001bb8 <dfuUpdateByRequest+0x2f8>)
 8001a2a:	6018      	str	r0, [r3, #0]
					break;
 8001a2c:	e78a      	b.n	8001944 <dfuUpdateByRequest+0x84>
        } else {
            dfuAppStatus.bState = dfuDNBUSY;
        }
    } else if (startState == dfuDNLOAD_IDLE)         {
        /* device is expecting dfu_dnload requests */
        if (pInformation->USBbRequest == DFU_DNLOAD) {
 8001a2e:	4b58      	ldr	r3, [pc, #352]	; (8001b90 <dfuUpdateByRequest+0x2d0>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	7853      	ldrb	r3, [r2, #1]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d03c      	beq.n	8001ab2 <dfuUpdateByRequest+0x1f2>
                    uart_printf("Signature unverified!\n");
                    dfuAppStatus.bState = dfuERROR;
                }
                flashLock();
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8001a38:	2b06      	cmp	r3, #6
 8001a3a:	d004      	beq.n	8001a46 <dfuUpdateByRequest+0x186>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d002      	beq.n	8001a46 <dfuUpdateByRequest+0x186>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8001a40:	2b05      	cmp	r3, #5
 8001a42:	f47f af7b 	bne.w	800193c <dfuUpdateByRequest+0x7c>
            } else {
                dfuAppStatus.bState  = dfuERROR;
                dfuAppStatus.bStatus = errNOTDONE;
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
            dfuAppStatus.bState  = dfuIDLE;
 8001a46:	2302      	movs	r3, #2
 8001a48:	7123      	strb	r3, [r4, #4]
 8001a4a:	e77b      	b.n	8001944 <dfuUpdateByRequest+0x84>
    if (startState == dfuIDLE)  {
        /*  device running inside DFU mode */
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop

        if (pInformation->USBbRequest == DFU_DNLOAD) {
            if (pInformation->USBwLengths.w > 0) {
 8001a4c:	88cb      	ldrh	r3, [r1, #6]
 8001a4e:	b19b      	cbz	r3, 8001a78 <dfuUpdateByRequest+0x1b8>
                userFirmwareLen = 0;
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
				switch(pInformation->Current_AlternateSetting) {
 8001a50:	7b0b      	ldrb	r3, [r1, #12]
        /*  device running inside DFU mode */
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop

        if (pInformation->USBbRequest == DFU_DNLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                userFirmwareLen = 0;
 8001a52:	4956      	ldr	r1, [pc, #344]	; (8001bac <dfuUpdateByRequest+0x2ec>)
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 8001a54:	2203      	movs	r2, #3
				switch(pInformation->Current_AlternateSetting) {
 8001a56:	2b01      	cmp	r3, #1
        /*  device running inside DFU mode */
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop

        if (pInformation->USBbRequest == DFU_DNLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                userFirmwareLen = 0;
 8001a58:	6008      	str	r0, [r1, #0]
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 8001a5a:	7122      	strb	r2, [r4, #4]
				switch(pInformation->Current_AlternateSetting) {
 8001a5c:	d043      	beq.n	8001ae6 <dfuUpdateByRequest+0x226>
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d13d      	bne.n	8001ade <dfuUpdateByRequest+0x21e>
						//flashErasePage((u32)USER_CODE_FLASH0X8002000);

						break;

					case 2:
						userUploadType = DFU_UPLOAD_FLASH_0X8002000;
 8001a62:	494c      	ldr	r1, [pc, #304]	; (8001b94 <dfuUpdateByRequest+0x2d4>)
						userAppAddr = USER_CODE_FLASH0X8002000;
 8001a64:	4b52      	ldr	r3, [pc, #328]	; (8001bb0 <dfuUpdateByRequest+0x2f0>)
 8001a66:	4a53      	ldr	r2, [pc, #332]	; (8001bb4 <dfuUpdateByRequest+0x2f4>)
						//flashErasePage((u32)USER_CODE_FLASH0X8002000);

						break;

					case 2:
						userUploadType = DFU_UPLOAD_FLASH_0X8002000;
 8001a68:	2006      	movs	r0, #6
 8001a6a:	7008      	strb	r0, [r1, #0]
						userAppAddr = USER_CODE_FLASH0X8002000;
 8001a6c:	601a      	str	r2, [r3, #0]
						
                        /* make sure the flash is setup properly, unlock it */
                        setupFLASH();
 8001a6e:	f7ff fcd1 	bl	8001414 <setupFLASH>
						flashUnlock();
 8001a72:	f7ff feab 	bl	80017cc <flashUnlock>

						break;
 8001a76:	e765      	b.n	8001944 <dfuUpdateByRequest+0x84>
                    }
                    
                    dfuAppStatus.bState  = dfuIDLE;
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
 8001a78:	220a      	movs	r2, #10
                dfuAppStatus.bStatus = errNOTDONE;
 8001a7a:	2309      	movs	r3, #9
                    }
                    
                    dfuAppStatus.bState  = dfuIDLE;
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
 8001a7c:	7122      	strb	r2, [r4, #4]
                dfuAppStatus.bStatus = errNOTDONE;
 8001a7e:	7023      	strb	r3, [r4, #0]
 8001a80:	e760      	b.n	8001944 <dfuUpdateByRequest+0x84>
					userAppAddr = USER_CODE_RAM;
					userAppEnd = RAM_END;
					*/

				case 1:
				    userAppAddr = USER_CODE_FLASH0X8008000;
 8001a82:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <dfuUpdateByRequest+0x2f0>)
 8001a84:	4a4d      	ldr	r2, [pc, #308]	; (8001bbc <dfuUpdateByRequest+0x2fc>)
 8001a86:	601a      	str	r2, [r3, #0]
					userAppEnd = getFlashEnd();
 8001a88:	f7ff feb6 	bl	80017f8 <getFlashEnd>
 8001a8c:	4b4a      	ldr	r3, [pc, #296]	; (8001bb8 <dfuUpdateByRequest+0x2f8>)
 8001a8e:	6018      	str	r0, [r3, #0]
					break;
 8001a90:	e758      	b.n	8001944 <dfuUpdateByRequest+0x84>

        /* consider timing out and self-resetting */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
    } else if (startState == dfuUPLOAD_IDLE) {
        /* device expecting further dfu_upload requests */
        if (pInformation->USBbRequest == DFU_UPLOAD) {
 8001a92:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <dfuUpdateByRequest+0x2d0>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	7853      	ldrb	r3, [r2, #1]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	f000 809d 	beq.w	8001bd8 <dfuUpdateByRequest+0x318>
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
                dfuAppStatus.bStatus = errNOTDONE;
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d0d1      	beq.n	8001a46 <dfuUpdateByRequest+0x186>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d002      	beq.n	8001aac <dfuUpdateByRequest+0x1ec>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8001aa6:	2b05      	cmp	r3, #5
 8001aa8:	f47f af48 	bne.w	800193c <dfuUpdateByRequest+0x7c>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8001aac:	2309      	movs	r3, #9
 8001aae:	7123      	strb	r3, [r4, #4]
 8001ab0:	e748      	b.n	8001944 <dfuUpdateByRequest+0x84>
            dfuAppStatus.bState = dfuDNBUSY;
        }
    } else if (startState == dfuDNLOAD_IDLE)         {
        /* device is expecting dfu_dnload requests */
        if (pInformation->USBbRequest == DFU_DNLOAD) {
            if (pInformation->USBwLengths.w > 0) {
 8001ab2:	88d3      	ldrh	r3, [r2, #6]
 8001ab4:	b313      	cbz	r3, 8001afc <dfuUpdateByRequest+0x23c>
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	7123      	strb	r3, [r4, #4]
 8001aba:	e743      	b.n	8001944 <dfuUpdateByRequest+0x84>

				default:
				// Roger Clark. 
				// Changed this to report error that its unable to write to this memory
				// However the code should never get here as only AlternateSetting 1 and 2 are allowed (see above)
					dfuAppStatus.bState  = dfuERROR;
 8001abc:	220a      	movs	r2, #10
					dfuAppStatus.bStatus = errWRITE;
 8001abe:	2303      	movs	r3, #3

				default:
				// Roger Clark. 
				// Changed this to report error that its unable to write to this memory
				// However the code should never get here as only AlternateSetting 1 and 2 are allowed (see above)
					dfuAppStatus.bState  = dfuERROR;
 8001ac0:	7122      	strb	r2, [r4, #4]
					dfuAppStatus.bStatus = errWRITE;
 8001ac2:	7023      	strb	r3, [r4, #0]
					break;					
 8001ac4:	e73e      	b.n	8001944 <dfuUpdateByRequest+0x84>
            sha256_update(&ctx, recvBuffer +i, sizeof(u32));
        }
        flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
    }
    
    userFirmwareLen += thisBlockLen;
 8001ac6:	f8b9 2000 	ldrh.w	r2, [r9]
 8001aca:	f8db 3000 	ldr.w	r3, [fp]
 8001ace:	b292      	uxth	r2, r2
 8001ad0:	441a      	add	r2, r3
    thisBlockLen = 0;
 8001ad2:	2300      	movs	r3, #0
            sha256_update(&ctx, recvBuffer +i, sizeof(u32));
        }
        flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
    }
    
    userFirmwareLen += thisBlockLen;
 8001ad4:	f8cb 2000 	str.w	r2, [fp]
    thisBlockLen = 0;
 8001ad8:	f8a9 3000 	strh.w	r3, [r9]
 8001adc:	e732      	b.n	8001944 <dfuUpdateByRequest+0x84>

						break;

					default:
					    // Roger Clark. Report error 
						dfuAppStatus.bState  = dfuERROR;
 8001ade:	230a      	movs	r3, #10
 8001ae0:	7123      	strb	r3, [r4, #4]
						dfuAppStatus.bStatus = errWRITE;
 8001ae2:	7022      	strb	r2, [r4, #0]

						break;
 8001ae4:	e72e      	b.n	8001944 <dfuUpdateByRequest+0x84>
						userUploadType = DFU_UPLOAD_RAM;
						break;
						*/

					case 1:
					    userAppAddr = USER_CODE_FLASH0X8008000;
 8001ae6:	4932      	ldr	r1, [pc, #200]	; (8001bb0 <dfuUpdateByRequest+0x2f0>)
 8001ae8:	4834      	ldr	r0, [pc, #208]	; (8001bbc <dfuUpdateByRequest+0x2fc>)
						userUploadType = DFU_UPLOAD_FLASH_0X8008000;
 8001aea:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <dfuUpdateByRequest+0x2d4>)
 8001aec:	2204      	movs	r2, #4
						userUploadType = DFU_UPLOAD_RAM;
						break;
						*/

					case 1:
					    userAppAddr = USER_CODE_FLASH0X8008000;
 8001aee:	6008      	str	r0, [r1, #0]
						userUploadType = DFU_UPLOAD_FLASH_0X8008000;
 8001af0:	701a      	strb	r2, [r3, #0]
						
						/* make sure the flash is setup properly, unlock it */
						setupFLASH();
 8001af2:	f7ff fc8f 	bl	8001414 <setupFLASH>
						flashUnlock();
 8001af6:	f7ff fe69 	bl	80017cc <flashUnlock>
						
                        /* Clear lower memory so that we can check on cold boot, whether
                           the last upload was to 0x8002000 or 0x8005000 */
						//flashErasePage((u32)USER_CODE_FLASH0X8002000);

						break;
 8001afa:	e723      	b.n	8001944 <dfuUpdateByRequest+0x84>
        if (pInformation->USBbRequest == DFU_DNLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
            } else {
                /* todo, support "disagreement" if device expects more data than this */
                dfuAppStatus.bState  = dfuMANIFEST_SYNC;
 8001afc:	2306      	movs	r3, #6
                /* relock the flash */
                struct u_id id;
                uid_read(&id);
 8001afe:	a803      	add	r0, sp, #12
        if (pInformation->USBbRequest == DFU_DNLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
            } else {
                /* todo, support "disagreement" if device expects more data than this */
                dfuAppStatus.bState  = dfuMANIFEST_SYNC;
 8001b00:	7123      	strb	r3, [r4, #4]
                /* relock the flash */
                struct u_id id;
                uid_read(&id);
 8001b02:	f7ff fc97 	bl	8001434 <uid_read>
                
                unsigned char uniqueID[23];
                sprintf(uniqueID,"%X%X%X%X", id.off0, id.off2, id.off4, id.off8);
 8001b06:	9804      	ldr	r0, [sp, #16]
 8001b08:	9905      	ldr	r1, [sp, #20]
 8001b0a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001b0e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8001b12:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8001b16:	492a      	ldr	r1, [pc, #168]	; (8001bc0 <dfuUpdateByRequest+0x300>)
 8001b18:	a806      	add	r0, sp, #24
 8001b1a:	f004 ff31 	bl	8006980 <siprintf>
                sha256_update(&ctx, uniqueID, 23);
 8001b1e:	2217      	movs	r2, #23
 8001b20:	a906      	add	r1, sp, #24
 8001b22:	481e      	ldr	r0, [pc, #120]	; (8001b9c <dfuUpdateByRequest+0x2dc>)
 8001b24:	f003 fc2e 	bl	8005384 <sha256_update>
                sha256_finish(&ctx, sha256sum);

                uint8_t signature[64];
                memset(signature, 0xFF, sizeof(signature));
                memcpy(signature,  (u32 *)(USER_CODE_FLASH0X8008000+0x20), 0x40);
 8001b28:	4e26      	ldr	r6, [pc, #152]	; (8001bc4 <dfuUpdateByRequest+0x304>)
                uid_read(&id);
                
                unsigned char uniqueID[23];
                sprintf(uniqueID,"%X%X%X%X", id.off0, id.off2, id.off4, id.off8);
                sha256_update(&ctx, uniqueID, 23);
                sha256_finish(&ctx, sha256sum);
 8001b2a:	481c      	ldr	r0, [pc, #112]	; (8001b9c <dfuUpdateByRequest+0x2dc>)
 8001b2c:	4926      	ldr	r1, [pc, #152]	; (8001bc8 <dfuUpdateByRequest+0x308>)
 8001b2e:	f003 fc71 	bl	8005414 <sha256_finish>

                uint8_t signature[64];
                memset(signature, 0xFF, sizeof(signature));
                memcpy(signature,  (u32 *)(USER_CODE_FLASH0X8008000+0x20), 0x40);
 8001b32:	ad14      	add	r5, sp, #80	; 0x50
                sprintf(uniqueID,"%X%X%X%X", id.off0, id.off2, id.off4, id.off8);
                sha256_update(&ctx, uniqueID, 23);
                sha256_finish(&ctx, sha256sum);

                uint8_t signature[64];
                memset(signature, 0xFF, sizeof(signature));
 8001b34:	21ff      	movs	r1, #255	; 0xff
 8001b36:	2240      	movs	r2, #64	; 0x40
 8001b38:	a814      	add	r0, sp, #80	; 0x50
 8001b3a:	f004 ff19 	bl	8006970 <memset>
                memcpy(signature,  (u32 *)(USER_CODE_FLASH0X8008000+0x20), 0x40);
 8001b3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b42:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b46:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}

                uint8_t rootCA[32] = {
 8001b4a:	4f20      	ldr	r7, [pc, #128]	; (8001bcc <dfuUpdateByRequest+0x30c>)
                sha256_update(&ctx, uniqueID, 23);
                sha256_finish(&ctx, sha256sum);

                uint8_t signature[64];
                memset(signature, 0xFF, sizeof(signature));
                memcpy(signature,  (u32 *)(USER_CODE_FLASH0X8008000+0x20), 0x40);
 8001b4c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001b50:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

                uint8_t rootCA[32] = {
 8001b54:	6838      	ldr	r0, [r7, #0]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	ad0c      	add	r5, sp, #48	; 0x30
 8001b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b60:	6938      	ldr	r0, [r7, #16]
 8001b62:	6979      	ldr	r1, [r7, #20]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
                   0xf3,0x88,0x72,0x73,0xea,0xcf,0x91,0x73,
                   0x35,0xda,0x72,0x68,0xae,0xf6,0x98,0x90,
                   0x51,0x87,0xff,0xea,0xd6,0xb5,0x5b,0x32
                };

                if (edsign_verify(signature, rootCA, sha256sum, 0x20) > 0) {
 8001b6a:	a814      	add	r0, sp, #80	; 0x50
 8001b6c:	a90c      	add	r1, sp, #48	; 0x30
 8001b6e:	4a16      	ldr	r2, [pc, #88]	; (8001bc8 <dfuUpdateByRequest+0x308>)
 8001b70:	2320      	movs	r3, #32
 8001b72:	f000 fae1 	bl	8002138 <edsign_verify>
 8001b76:	2800      	cmp	r0, #0
 8001b78:	d059      	beq.n	8001c2e <dfuUpdateByRequest+0x36e>
                    uart_printf("Uploaded signature verified!\n");
 8001b7a:	4815      	ldr	r0, [pc, #84]	; (8001bd0 <dfuUpdateByRequest+0x310>)
 8001b7c:	f7ff fb7c 	bl	8001278 <uart_printf>
                } else {
                    uart_printf("Signature unverified!\n");
                    dfuAppStatus.bState = dfuERROR;
                }
                flashLock();
 8001b80:	f7ff fe1e 	bl	80017c0 <flashLock>
 8001b84:	e6de      	b.n	8001944 <dfuUpdateByRequest+0x84>
 8001b86:	bf00      	nop
 8001b88:	20000dc0 	andcs	r0, r0, r0, asr #27
 8001b8c:	20000db8 			; <UNDEFINED> instruction: 0x20000db8
 8001b90:	20000594 	mulcs	r0, r4, r5
 8001b94:	20000db4 			; <UNDEFINED> instruction: 0x20000db4
 8001b98:	200005ac 	andcs	r0, r0, ip, lsr #11
 8001b9c:	200004f8 	strdcs	r0, [r0], -r8
 8001ba0:	20000560 	andcs	r0, r0, r0, ror #10
 8001ba4:	200005a8 	andcs	r0, r0, r8, lsr #11
 8001ba8:	20000dac 	andcs	r0, r0, ip, lsr #27
 8001bac:	20000db0 			; <UNDEFINED> instruction: 0x20000db0
 8001bb0:	200002c8 	andcs	r0, r0, r8, asr #5
 8001bb4:	08002000 	stmdaeq	r0, {sp}
 8001bb8:	200002c4 	andcs	r0, r0, r4, asr #5
 8001bbc:	08008000 	stmdaeq	r0, {pc}
 8001bc0:	08007320 	stmdaeq	r0, {r5, r8, r9, ip, sp, lr}
 8001bc4:	08008020 	stmdaeq	r0, {r5, pc}
 8001bc8:	200004d8 	ldrdcs	r0, [r0], -r8
 8001bcc:	0800721c 	stmdaeq	r0, {r2, r3, r4, r9, ip, sp, lr}
 8001bd0:	08007338 	stmdaeq	r0, {r3, r4, r5, r8, r9, ip, sp, lr}
 8001bd4:	08008073 	stmdaeq	r0, {r0, r1, r4, r5, r6, pc}
        /* consider timing out and self-resetting */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
    } else if (startState == dfuUPLOAD_IDLE) {
        /* device expecting further dfu_upload requests */
        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
 8001bd8:	88d3      	ldrh	r3, [r2, #6]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f43f af4c 	beq.w	8001a78 <dfuUpdateByRequest+0x1b8>
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8001be0:	4919      	ldr	r1, [pc, #100]	; (8001c48 <dfuUpdateByRequest+0x388>)
 8001be2:	8855      	ldrh	r5, [r2, #2]
 8001be4:	8808      	ldrh	r0, [r1, #0]
 8001be6:	4a19      	ldr	r2, [pc, #100]	; (8001c4c <dfuUpdateByRequest+0x38c>)
 8001be8:	b280      	uxth	r0, r0
 8001bea:	fb05 f500 	mul.w	r5, r5, r0
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8001bee:	4818      	ldr	r0, [pc, #96]	; (8001c50 <dfuUpdateByRequest+0x390>)
    } else if (startState == dfuUPLOAD_IDLE) {
        /* device expecting further dfu_upload requests */
        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8001bf0:	6015      	str	r5, [r2, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8001bf2:	6806      	ldr	r6, [r0, #0]
 8001bf4:	4d17      	ldr	r5, [pc, #92]	; (8001c54 <dfuUpdateByRequest+0x394>)
 8001bf6:	f8d2 c000 	ldr.w	ip, [r2]
 8001bfa:	880f      	ldrh	r7, [r1, #0]
 8001bfc:	44b4      	add	ip, r6
 8001bfe:	b2bf      	uxth	r7, r7
 8001c00:	682e      	ldr	r6, [r5, #0]
 8001c02:	4467      	add	r7, ip
 8001c04:	42b7      	cmp	r7, r6
 8001c06:	d918      	bls.n	8001c3a <dfuUpdateByRequest+0x37a>
                    thisBlockLen = uploadBlockLen;
                    dfuAppStatus.bState  = dfuUPLOAD_IDLE;
                } else {
                    /* if above comparison was just equal, thisBlockLen becomes zero
                    next time when USBWValue has been increased by one */
                    thisBlockLen = userAppEnd - userAppAddr - userFirmwareLen;
 8001c08:	682d      	ldr	r5, [r5, #0]
 8001c0a:	6801      	ldr	r1, [r0, #0]
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	1a69      	subs	r1, r5, r1
 8001c10:	1a89      	subs	r1, r1, r2
 8001c12:	4a11      	ldr	r2, [pc, #68]	; (8001c58 <dfuUpdateByRequest+0x398>)
 8001c14:	b289      	uxth	r1, r1
 8001c16:	8011      	strh	r1, [r2, #0]
                    
                    /* check for overflow due to USBwValue out of range */
                    if (thisBlockLen >= pInformation->USBwLengths.w) {
 8001c18:	8811      	ldrh	r1, [r2, #0]
 8001c1a:	b289      	uxth	r1, r1
 8001c1c:	428b      	cmp	r3, r1
 8001c1e:	f63f af12 	bhi.w	8001a46 <dfuUpdateByRequest+0x186>
                        thisBlockLen = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	8013      	strh	r3, [r2, #0]
 8001c26:	e70e      	b.n	8001a46 <dfuUpdateByRequest+0x186>
        /* status is in error, awaiting DFU_CLRSTATUS request */
        if (pInformation->USBbRequest == DFU_GETSTATUS) {
            /* todo, add routine to wait for last block write to finish */
            dfuAppStatus.bState  = dfuERROR;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
            dfuAppStatus.bState  = dfuERROR;
 8001c28:	230a      	movs	r3, #10
 8001c2a:	7123      	strb	r3, [r4, #4]
 8001c2c:	e68a      	b.n	8001944 <dfuUpdateByRequest+0x84>
                };

                if (edsign_verify(signature, rootCA, sha256sum, 0x20) > 0) {
                    uart_printf("Uploaded signature verified!\n");
                } else {
                    uart_printf("Signature unverified!\n");
 8001c2e:	480b      	ldr	r0, [pc, #44]	; (8001c5c <dfuUpdateByRequest+0x39c>)
 8001c30:	f7ff fb22 	bl	8001278 <uart_printf>
                    dfuAppStatus.bState = dfuERROR;
 8001c34:	230a      	movs	r3, #10
 8001c36:	7123      	strb	r3, [r4, #4]
 8001c38:	e7a2      	b.n	8001b80 <dfuUpdateByRequest+0x2c0>
        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
                    thisBlockLen = uploadBlockLen;
 8001c3a:	8809      	ldrh	r1, [r1, #0]
 8001c3c:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <dfuUpdateByRequest+0x398>)
 8001c3e:	b289      	uxth	r1, r1
                    dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8001c40:	2309      	movs	r3, #9
        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
                    thisBlockLen = uploadBlockLen;
 8001c42:	8011      	strh	r1, [r2, #0]
                    dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8001c44:	7123      	strb	r3, [r4, #4]
 8001c46:	e67d      	b.n	8001944 <dfuUpdateByRequest+0x84>
 8001c48:	200005a8 	andcs	r0, r0, r8, lsr #11
 8001c4c:	20000db0 			; <UNDEFINED> instruction: 0x20000db0
 8001c50:	200002c8 	andcs	r0, r0, r8, asr #5
 8001c54:	200002c4 	andcs	r0, r0, r4, asr #5
 8001c58:	20000dac 	andcs	r0, r0, ip, lsr #27
 8001c5c:	08007358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, sp, lr}

08001c60 <dfuUpdateByReset>:
    }

    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
}

void dfuUpdateByReset(void) {
 8001c60:	b508      	push	{r3, lr}
    u8 startState = dfuAppStatus.bState;
 8001c62:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <dfuUpdateByReset+0x3c>)
    userFirmwareLen = 0;
 8001c64:	480e      	ldr	r0, [pc, #56]	; (8001ca0 <dfuUpdateByReset+0x40>)

    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 8001c66:	7913      	ldrb	r3, [r2, #4]
    userFirmwareLen = 0;
 8001c68:	2100      	movs	r1, #0

    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 8001c6a:	b2db      	uxtb	r3, r3
    userFirmwareLen = 0;

    if (startState == appDETACH) {
 8001c6c:	2b01      	cmp	r3, #1
    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
    userFirmwareLen = 0;
 8001c6e:	6001      	str	r1, [r0, #0]

    if (startState == appDETACH) {
 8001c70:	d00a      	beq.n	8001c88 <dfuUpdateByReset+0x28>
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        nvicDisableInterrupts();
        usbEnbISR();
    } else if (startState == appIDLE || startState == dfuIDLE) {
 8001c72:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8001c76:	d006      	beq.n	8001c86 <dfuUpdateByReset+0x26>
        /* do nothing...might be normal usb bus activity */
    } else {
        /* we reset from the dfu, reset everything and startover,
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	7113      	strb	r3, [r2, #4]
        dfuAppStatus.bStatus = OK;
 8001c7c:	7011      	strb	r1, [r2, #0]

        systemHardReset();
    }
}
 8001c7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
 8001c82:	f7ff bd47 	b.w	8001714 <systemHardReset>
 8001c86:	bd08      	pop	{r3, pc}
void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
    userFirmwareLen = 0;

    if (startState == appDETACH) {
        dfuAppStatus.bState = dfuIDLE;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	7113      	strb	r3, [r2, #4]
        dfuAppStatus.bStatus = OK;
 8001c8c:	7011      	strb	r1, [r2, #0]

        nvicDisableInterrupts();
 8001c8e:	f7ff fd2d 	bl	80016ec <nvicDisableInterrupts>
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
    }
}
 8001c92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (startState == appDETACH) {
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        nvicDisableInterrupts();
        usbEnbISR();
 8001c96:	f7ff b96d 	b.w	8000f74 <usbEnbISR>
 8001c9a:	bf00      	nop
 8001c9c:	20000db8 			; <UNDEFINED> instruction: 0x20000db8
 8001ca0:	20000db0 			; <UNDEFINED> instruction: 0x20000db0

08001ca4 <dfuCopyState>:

void dfuUpdateByTimeout(void) {
}

u8 *dfuCopyState(u16 length) {
    if (length == 0) {
 8001ca4:	b108      	cbz	r0, 8001caa <dfuCopyState+0x6>
        pInformation->Ctrl_Info.Usb_wLength = 1;
        return NULL;
    } else {
        return (u8 *)(&(dfuAppStatus.bState));
 8001ca6:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <dfuCopyState+0x10>)
    }
}
 8001ca8:	4770      	bx	lr
void dfuUpdateByTimeout(void) {
}

u8 *dfuCopyState(u16 length) {
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = 1;
 8001caa:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <dfuCopyState+0x14>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	821a      	strh	r2, [r3, #16]
        return NULL;
 8001cb2:	4770      	bx	lr
 8001cb4:	20000dbc 			; <UNDEFINED> instruction: 0x20000dbc
 8001cb8:	20000594 	mulcs	r0, r4, r5

08001cbc <dfuCopyStatus>:
        return (u8 *)(&(dfuAppStatus.bState));
    }
}

u8 *dfuCopyStatus(u16 length) {
    if (length == 0) {
 8001cbc:	b108      	cbz	r0, 8001cc2 <dfuCopyStatus+0x6>
        pInformation->Ctrl_Info.Usb_wLength = 6;
        return NULL;
    } else {
        return (u8*)(&dfuAppStatus);
 8001cbe:	4803      	ldr	r0, [pc, #12]	; (8001ccc <dfuCopyStatus+0x10>)
    }
}
 8001cc0:	4770      	bx	lr
    }
}

u8 *dfuCopyStatus(u16 length) {
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = 6;
 8001cc2:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <dfuCopyStatus+0x14>)
 8001cc4:	2206      	movs	r2, #6
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	821a      	strh	r2, [r3, #16]
        return NULL;
 8001cca:	4770      	bx	lr
 8001ccc:	20000db8 			; <UNDEFINED> instruction: 0x20000db8
 8001cd0:	20000594 	mulcs	r0, r4, r5

08001cd4 <dfuCopyDNLOAD>:
        return (u8*)(&dfuAppStatus);
    }
}


u8 *dfuCopyDNLOAD(u16 length) {
 8001cd4:	b410      	push	{r4}
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <dfuCopyDNLOAD+0x28>)
    }
}


u8 *dfuCopyDNLOAD(u16 length) {
    if (length == 0) {
 8001cd8:	b130      	cbz	r0, 8001ce8 <dfuCopyDNLOAD+0x14>
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
        thisBlockLen = pInformation->USBwLengths.w;
        return NULL;
    } else {
        return ((u8 *)recvBuffer + pInformation->Ctrl_Info.Usb_wOffset);
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4808      	ldr	r0, [pc, #32]	; (8001d00 <dfuCopyDNLOAD+0x2c>)
 8001cde:	8a5b      	ldrh	r3, [r3, #18]
    }
}
 8001ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
        thisBlockLen = pInformation->USBwLengths.w;
        return NULL;
    } else {
        return ((u8 *)recvBuffer + pInformation->Ctrl_Info.Usb_wOffset);
 8001ce4:	4418      	add	r0, r3
    }
}
 8001ce6:	4770      	bx	lr
}


u8 *dfuCopyDNLOAD(u16 length) {
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8001ce8:	681b      	ldr	r3, [r3, #0]
        thisBlockLen = pInformation->USBwLengths.w;
 8001cea:	4c06      	ldr	r4, [pc, #24]	; (8001d04 <dfuCopyDNLOAD+0x30>)
}


u8 *dfuCopyDNLOAD(u16 length) {
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8001cec:	88da      	ldrh	r2, [r3, #6]
 8001cee:	8a59      	ldrh	r1, [r3, #18]
        thisBlockLen = pInformation->USBwLengths.w;
 8001cf0:	8022      	strh	r2, [r4, #0]
}


u8 *dfuCopyDNLOAD(u16 length) {
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8001cf2:	1a52      	subs	r2, r2, r1
 8001cf4:	821a      	strh	r2, [r3, #16]
        thisBlockLen = pInformation->USBwLengths.w;
        return NULL;
    } else {
        return ((u8 *)recvBuffer + pInformation->Ctrl_Info.Usb_wOffset);
    }
}
 8001cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	20000594 	mulcs	r0, r4, r5
 8001d00:	200005ac 	andcs	r0, r0, ip, lsr #11
 8001d04:	20000dac 	andcs	r0, r0, ip, lsr #27

08001d08 <dfuCopyUPLOAD>:

u8 *dfuCopyUPLOAD(u16 length) {
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = thisBlockLen - pInformation->Ctrl_Info.Usb_wOffset;
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <dfuCopyUPLOAD+0x24>)
        return ((u8 *)recvBuffer + pInformation->Ctrl_Info.Usb_wOffset);
    }
}

u8 *dfuCopyUPLOAD(u16 length) {
    if (length == 0) {
 8001d0a:	b140      	cbz	r0, 8001d1e <dfuCopyUPLOAD+0x16>
        pInformation->Ctrl_Info.Usb_wLength = thisBlockLen - pInformation->Ctrl_Info.Usb_wOffset;
        return NULL;
    } else {
        return((u8*) userAppAddr + userFirmwareLen + pInformation->Ctrl_Info.Usb_wOffset);
 8001d0c:	4908      	ldr	r1, [pc, #32]	; (8001d30 <dfuCopyUPLOAD+0x28>)
 8001d0e:	4a09      	ldr	r2, [pc, #36]	; (8001d34 <dfuCopyUPLOAD+0x2c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	6808      	ldr	r0, [r1, #0]
 8001d16:	8a5b      	ldrh	r3, [r3, #18]
 8001d18:	4410      	add	r0, r2
 8001d1a:	4418      	add	r0, r3
    }
}
 8001d1c:	4770      	bx	lr
    }
}

u8 *dfuCopyUPLOAD(u16 length) {
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = thisBlockLen - pInformation->Ctrl_Info.Usb_wOffset;
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <dfuCopyUPLOAD+0x30>)
 8001d22:	8811      	ldrh	r1, [r2, #0]
 8001d24:	8a5a      	ldrh	r2, [r3, #18]
 8001d26:	1a8a      	subs	r2, r1, r2
 8001d28:	821a      	strh	r2, [r3, #16]
        return NULL;
 8001d2a:	4770      	bx	lr
 8001d2c:	20000594 	mulcs	r0, r4, r5
 8001d30:	200002c8 	andcs	r0, r0, r8, asr #5
 8001d34:	20000db0 			; <UNDEFINED> instruction: 0x20000db0
 8001d38:	20000dac 	andcs	r0, r0, ip, lsr #27

08001d3c <dfuUploadStarted>:
    dfuAppStatus.bState = newState;
}

bool dfuUploadStarted()
{
    return dfuBusy;
 8001d3c:	4b01      	ldr	r3, [pc, #4]	; (8001d44 <dfuUploadStarted+0x8>)
 8001d3e:	7818      	ldrb	r0, [r3, #0]
}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000dc0 	andcs	r0, r0, r0, asr #27

08001d48 <dfuFinishUpload>:

void dfuFinishUpload() {

    while (1)
	{
		__asm__ __volatile__ ("");
 8001d48:	e7fe      	b.n	8001d48 <dfuFinishUpload>
 8001d4a:	bf00      	nop

08001d4c <ed25519_project>:
};

/* Conversion to and from projective coordinates */
void ed25519_project(struct ed25519_pt *p,
		     const uint8_t *x, const uint8_t *y)
{
 8001d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4e:	460d      	mov	r5, r1
void f25519_load(uint8_t *x, uint32_t c);

/* Copy two points */
static inline void f25519_copy(uint8_t *x, const uint8_t *a)
{
	memcpy(x, a, F25519_SIZE);
 8001d50:	f8d1 e000 	ldr.w	lr, [r1]
 8001d54:	684f      	ldr	r7, [r1, #4]
 8001d56:	68eb      	ldr	r3, [r5, #12]
 8001d58:	6889      	ldr	r1, [r1, #8]
 8001d5a:	f8c0 e000 	str.w	lr, [r0]
 8001d5e:	6047      	str	r7, [r0, #4]
 8001d60:	6081      	str	r1, [r0, #8]
 8001d62:	60c3      	str	r3, [r0, #12]
 8001d64:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8001d68:	696f      	ldr	r7, [r5, #20]
 8001d6a:	69a9      	ldr	r1, [r5, #24]
 8001d6c:	69eb      	ldr	r3, [r5, #28]
 8001d6e:	f8c0 e010 	str.w	lr, [r0, #16]
 8001d72:	61c3      	str	r3, [r0, #28]
 8001d74:	6147      	str	r7, [r0, #20]
 8001d76:	6181      	str	r1, [r0, #24]
 8001d78:	f8d2 e000 	ldr.w	lr, [r2]
 8001d7c:	6857      	ldr	r7, [r2, #4]
 8001d7e:	6891      	ldr	r1, [r2, #8]
 8001d80:	4616      	mov	r6, r2
 8001d82:	68d2      	ldr	r2, [r2, #12]
 8001d84:	f8c0 e020 	str.w	lr, [r0, #32]
 8001d88:	6247      	str	r7, [r0, #36]	; 0x24
 8001d8a:	6281      	str	r1, [r0, #40]	; 0x28
 8001d8c:	62c2      	str	r2, [r0, #44]	; 0x2c
 8001d8e:	69b1      	ldr	r1, [r6, #24]
 8001d90:	69f2      	ldr	r2, [r6, #28]
 8001d92:	f8d6 e010 	ldr.w	lr, [r6, #16]
 8001d96:	6977      	ldr	r7, [r6, #20]
 8001d98:	4604      	mov	r4, r0
 8001d9a:	63a1      	str	r1, [r4, #56]	; 0x38
 8001d9c:	63e2      	str	r2, [r4, #60]	; 0x3c
	f25519_copy(p->x, x);
	f25519_copy(p->y, y);
	f25519_load(p->z, 1);
 8001d9e:	3060      	adds	r0, #96	; 0x60
 8001da0:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
 8001da4:	6367      	str	r7, [r4, #52]	; 0x34
 8001da6:	2101      	movs	r1, #1
 8001da8:	f000 fa84 	bl	80022b4 <f25519_load>
	f25519_mul__distinct(p->t, x, y);
 8001dac:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001db0:	4629      	mov	r1, r5
 8001db2:	4632      	mov	r2, r6
}
 8001db4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		     const uint8_t *x, const uint8_t *y)
{
	f25519_copy(p->x, x);
	f25519_copy(p->y, y);
	f25519_load(p->z, 1);
	f25519_mul__distinct(p->t, x, y);
 8001db8:	f000 bbe2 	b.w	8002580 <f25519_mul__distinct>

08001dbc <ed25519_unproject>:
}

void ed25519_unproject(uint8_t *x, uint8_t *y,
		       const struct ed25519_pt *p)
{
 8001dbc:	b570      	push	{r4, r5, r6, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	4614      	mov	r4, r2
 8001dc2:	4606      	mov	r6, r0
 8001dc4:	460d      	mov	r5, r1
	uint8_t z1[F25519_SIZE];

	f25519_inv__distinct(z1, p->z);
 8001dc6:	4668      	mov	r0, sp
 8001dc8:	f102 0160 	add.w	r1, r2, #96	; 0x60
 8001dcc:	f000 fc1c 	bl	8002608 <f25519_inv__distinct>
	f25519_mul__distinct(x, p->x, z1);
 8001dd0:	4630      	mov	r0, r6
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	466a      	mov	r2, sp
 8001dd6:	f000 fbd3 	bl	8002580 <f25519_mul__distinct>
	f25519_mul__distinct(y, p->y, z1);
 8001dda:	f104 0120 	add.w	r1, r4, #32
 8001dde:	466a      	mov	r2, sp
 8001de0:	4628      	mov	r0, r5
 8001de2:	f000 fbcd 	bl	8002580 <f25519_mul__distinct>

	f25519_normalize(x);
 8001de6:	4630      	mov	r0, r6
 8001de8:	f000 fa74 	bl	80022d4 <f25519_normalize>
	f25519_normalize(y);
 8001dec:	4628      	mov	r0, r5
 8001dee:	f000 fa71 	bl	80022d4 <f25519_normalize>
}
 8001df2:	b008      	add	sp, #32
 8001df4:	bd70      	pop	{r4, r5, r6, pc}
 8001df6:	bf00      	nop

08001df8 <ed25519_pack>:
	0x98, 0xe8, 0x79, 0x77, 0x79, 0x40, 0xc7, 0x8c,
	0x73, 0xfe, 0x6f, 0x2b, 0xee, 0x6c, 0x03, 0x52
};

void ed25519_pack(uint8_t *c, const uint8_t *x, const uint8_t *y)
{
 8001df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfa:	460f      	mov	r7, r1
 8001dfc:	4605      	mov	r5, r0
 8001dfe:	4616      	mov	r6, r2
 8001e00:	b089      	sub	sp, #36	; 0x24
 8001e02:	6808      	ldr	r0, [r1, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6849      	ldr	r1, [r1, #4]
 8001e0a:	466c      	mov	r4, sp
 8001e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e0e:	6938      	ldr	r0, [r7, #16]
 8001e10:	6979      	ldr	r1, [r7, #20]
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	uint8_t tmp[F25519_SIZE];
	uint8_t parity;

	f25519_copy(tmp, x);
	f25519_normalize(tmp);
 8001e18:	4668      	mov	r0, sp
 8001e1a:	f000 fa5b 	bl	80022d4 <f25519_normalize>
 8001e1e:	6830      	ldr	r0, [r6, #0]
 8001e20:	6871      	ldr	r1, [r6, #4]
 8001e22:	68b2      	ldr	r2, [r6, #8]
 8001e24:	68f3      	ldr	r3, [r6, #12]
 8001e26:	6028      	str	r0, [r5, #0]
 8001e28:	6069      	str	r1, [r5, #4]
 8001e2a:	60aa      	str	r2, [r5, #8]
 8001e2c:	60eb      	str	r3, [r5, #12]
 8001e2e:	6930      	ldr	r0, [r6, #16]
 8001e30:	69f3      	ldr	r3, [r6, #28]
 8001e32:	6971      	ldr	r1, [r6, #20]
 8001e34:	69b2      	ldr	r2, [r6, #24]
 8001e36:	6128      	str	r0, [r5, #16]
 8001e38:	61eb      	str	r3, [r5, #28]
 8001e3a:	6169      	str	r1, [r5, #20]
 8001e3c:	61aa      	str	r2, [r5, #24]
	parity = (tmp[0] & 1) << 7;

	f25519_copy(c, y);
	f25519_normalize(c);
 8001e3e:	4628      	mov	r0, r5
	uint8_t tmp[F25519_SIZE];
	uint8_t parity;

	f25519_copy(tmp, x);
	f25519_normalize(tmp);
	parity = (tmp[0] & 1) << 7;
 8001e40:	f89d 4000 	ldrb.w	r4, [sp]

	f25519_copy(c, y);
	f25519_normalize(c);
 8001e44:	f000 fa46 	bl	80022d4 <f25519_normalize>
	uint8_t tmp[F25519_SIZE];
	uint8_t parity;

	f25519_copy(tmp, x);
	f25519_normalize(tmp);
	parity = (tmp[0] & 1) << 7;
 8001e48:	01e4      	lsls	r4, r4, #7

	f25519_copy(c, y);
	f25519_normalize(c);
	c[31] |= parity;
 8001e4a:	7feb      	ldrb	r3, [r5, #31]
	uint8_t tmp[F25519_SIZE];
	uint8_t parity;

	f25519_copy(tmp, x);
	f25519_normalize(tmp);
	parity = (tmp[0] & 1) << 7;
 8001e4c:	b2e4      	uxtb	r4, r4

	f25519_copy(c, y);
	f25519_normalize(c);
	c[31] |= parity;
 8001e4e:	431c      	orrs	r4, r3
 8001e50:	77ec      	strb	r4, [r5, #31]
}
 8001e52:	b009      	add	sp, #36	; 0x24
 8001e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e56:	bf00      	nop

08001e58 <ed25519_try_unpack>:

uint8_t ed25519_try_unpack(uint8_t *x, uint8_t *y, const uint8_t *comp)
{
 8001e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e5c:	6817      	ldr	r7, [r2, #0]
 8001e5e:	6856      	ldr	r6, [r2, #4]
 8001e60:	6895      	ldr	r5, [r2, #8]
 8001e62:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8001e66:	4614      	mov	r4, r2
	const int parity = comp[31] >> 7;
 8001e68:	f894 801f 	ldrb.w	r8, [r4, #31]
 8001e6c:	600f      	str	r7, [r1, #0]
 8001e6e:	604e      	str	r6, [r1, #4]
 8001e70:	608d      	str	r5, [r1, #8]
 8001e72:	f8c1 e00c 	str.w	lr, [r1, #12]
 8001e76:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8001e7a:	6927      	ldr	r7, [r4, #16]
 8001e7c:	6966      	ldr	r6, [r4, #20]
 8001e7e:	69a5      	ldr	r5, [r4, #24]
	f25519_normalize(c);
	c[31] |= parity;
}

uint8_t ed25519_try_unpack(uint8_t *x, uint8_t *y, const uint8_t *comp)
{
 8001e80:	b098      	sub	sp, #96	; 0x60
	uint8_t b[F25519_SIZE];
	uint8_t c[F25519_SIZE];

	/* Unpack y */
	f25519_copy(y, comp);
	y[31] &= 127;
 8001e82:	f008 037f 	and.w	r3, r8, #127	; 0x7f
 8001e86:	f8c1 e01c 	str.w	lr, [r1, #28]
	f25519_normalize(c);
	c[31] |= parity;
}

uint8_t ed25519_try_unpack(uint8_t *x, uint8_t *y, const uint8_t *comp)
{
 8001e8a:	4604      	mov	r4, r0
	uint8_t b[F25519_SIZE];
	uint8_t c[F25519_SIZE];

	/* Unpack y */
	f25519_copy(y, comp);
	y[31] &= 127;
 8001e8c:	77cb      	strb	r3, [r1, #31]
	f25519_normalize(c);
	c[31] |= parity;
}

uint8_t ed25519_try_unpack(uint8_t *x, uint8_t *y, const uint8_t *comp)
{
 8001e8e:	460a      	mov	r2, r1
 8001e90:	610f      	str	r7, [r1, #16]
 8001e92:	614e      	str	r6, [r1, #20]
 8001e94:	618d      	str	r5, [r1, #24]
	/* Unpack y */
	f25519_copy(y, comp);
	y[31] &= 127;

	/* Compute c = y^2 */
	f25519_mul__distinct(c, y, y);
 8001e96:	a810      	add	r0, sp, #64	; 0x40

	/* Compute b = (1+dy^2)^-1 */
	f25519_mul__distinct(b, c, ed25519_d);
	f25519_add(a, b, f25519_one);
 8001e98:	4d1f      	ldr	r5, [pc, #124]	; (8001f18 <ed25519_try_unpack+0xc0>)
	/* Unpack y */
	f25519_copy(y, comp);
	y[31] &= 127;

	/* Compute c = y^2 */
	f25519_mul__distinct(c, y, y);
 8001e9a:	f000 fb71 	bl	8002580 <f25519_mul__distinct>

	/* Compute b = (1+dy^2)^-1 */
	f25519_mul__distinct(b, c, ed25519_d);
 8001e9e:	a910      	add	r1, sp, #64	; 0x40
 8001ea0:	a808      	add	r0, sp, #32
 8001ea2:	4a1e      	ldr	r2, [pc, #120]	; (8001f1c <ed25519_try_unpack+0xc4>)
 8001ea4:	f000 fb6c 	bl	8002580 <f25519_mul__distinct>
	f25519_add(a, b, f25519_one);
 8001ea8:	462a      	mov	r2, r5
 8001eaa:	a908      	add	r1, sp, #32
 8001eac:	4668      	mov	r0, sp
 8001eae:	f000 faf9 	bl	80024a4 <f25519_add>
	f25519_inv__distinct(b, a);
 8001eb2:	a808      	add	r0, sp, #32
 8001eb4:	4669      	mov	r1, sp
 8001eb6:	f000 fba7 	bl	8002608 <f25519_inv__distinct>

	/* Compute a = y^2-1 */
	f25519_sub(a, c, f25519_one);
 8001eba:	4668      	mov	r0, sp
 8001ebc:	a910      	add	r1, sp, #64	; 0x40
 8001ebe:	462a      	mov	r2, r5
 8001ec0:	f000 fb14 	bl	80024ec <f25519_sub>

	/* Compute c = a*b = (y^2-1)/(1-dy^2) */
	f25519_mul__distinct(c, a, b);
 8001ec4:	aa08      	add	r2, sp, #32
 8001ec6:	a810      	add	r0, sp, #64	; 0x40
 8001ec8:	4669      	mov	r1, sp
 8001eca:	f000 fb59 	bl	8002580 <f25519_mul__distinct>

	/* Compute a, b = +/-sqrt(c), if c is square */
	f25519_sqrt(a, c);
 8001ece:	4668      	mov	r0, sp
 8001ed0:	a910      	add	r1, sp, #64	; 0x40
 8001ed2:	f000 fe8f 	bl	8002bf4 <f25519_sqrt>
	f25519_neg(b, a);
 8001ed6:	a808      	add	r0, sp, #32
 8001ed8:	4669      	mov	r1, sp
 8001eda:	f000 fb2d 	bl	8002538 <f25519_neg>

	/* Select one of them, based on the compressed parity bit */
	f25519_select(x, a, b, (a[0] ^ parity) & 1);
 8001ede:	f89d 3000 	ldrb.w	r3, [sp]
 8001ee2:	aa08      	add	r2, sp, #32
 8001ee4:	ea83 13d8 	eor.w	r3, r3, r8, lsr #7
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	4620      	mov	r0, r4
 8001eee:	4669      	mov	r1, sp
 8001ef0:	f000 fa76 	bl	80023e0 <f25519_select>

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	4622      	mov	r2, r4
 8001ef8:	4668      	mov	r0, sp
 8001efa:	f000 fb41 	bl	8002580 <f25519_mul__distinct>
	f25519_normalize(a);
 8001efe:	4668      	mov	r0, sp
 8001f00:	f000 f9e8 	bl	80022d4 <f25519_normalize>
	f25519_normalize(c);
 8001f04:	a810      	add	r0, sp, #64	; 0x40
 8001f06:	f000 f9e5 	bl	80022d4 <f25519_normalize>

	return f25519_eq(a, c);
 8001f0a:	4668      	mov	r0, sp
 8001f0c:	a910      	add	r1, sp, #64	; 0x40
 8001f0e:	f000 fa19 	bl	8002344 <f25519_eq>
}
 8001f12:	b018      	add	sp, #96	; 0x60
 8001f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f18:	080074d0 	stmdaeq	r0, {r4, r6, r7, sl, ip, sp, lr}
 8001f1c:	08007490 	stmdaeq	r0, {r4, r7, sl, ip, sp, lr}

08001f20 <ed25519_add>:
	0xe7, 0xfc, 0xdf, 0x56, 0xdc, 0xd9, 0x06, 0x24
};

void ed25519_add(struct ed25519_pt *r,
		 const struct ed25519_pt *p1, const struct ed25519_pt *p2)
{
 8001f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f24:	4614      	mov	r4, r2
 8001f26:	b0c0      	sub	sp, #256	; 0x100
 8001f28:	460d      	mov	r5, r1
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = (Y1-X1)(Y2-X2) */
	f25519_sub(c, p1->y, p1->x);
 8001f2a:	f101 0820 	add.w	r8, r1, #32
	0xe7, 0xfc, 0xdf, 0x56, 0xdc, 0xd9, 0x06, 0x24
};

void ed25519_add(struct ed25519_pt *r,
		 const struct ed25519_pt *p1, const struct ed25519_pt *p2)
{
 8001f2e:	4606      	mov	r6, r0
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = (Y1-X1)(Y2-X2) */
	f25519_sub(c, p1->y, p1->x);
 8001f30:	4641      	mov	r1, r8
 8001f32:	462a      	mov	r2, r5
 8001f34:	a810      	add	r0, sp, #64	; 0x40
	f25519_sub(d, p2->y, p2->x);
 8001f36:	f104 0720 	add.w	r7, r4, #32
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = (Y1-X1)(Y2-X2) */
	f25519_sub(c, p1->y, p1->x);
 8001f3a:	f000 fad7 	bl	80024ec <f25519_sub>
	f25519_sub(d, p2->y, p2->x);
 8001f3e:	4639      	mov	r1, r7
 8001f40:	4622      	mov	r2, r4
 8001f42:	a818      	add	r0, sp, #96	; 0x60
 8001f44:	f000 fad2 	bl	80024ec <f25519_sub>
	f25519_mul__distinct(a, c, d);
 8001f48:	a910      	add	r1, sp, #64	; 0x40
 8001f4a:	aa18      	add	r2, sp, #96	; 0x60
 8001f4c:	4668      	mov	r0, sp
 8001f4e:	f000 fb17 	bl	8002580 <f25519_mul__distinct>

	/* B = (Y1+X1)(Y2+X2) */
	f25519_add(c, p1->y, p1->x);
 8001f52:	a810      	add	r0, sp, #64	; 0x40
 8001f54:	4641      	mov	r1, r8
 8001f56:	462a      	mov	r2, r5
 8001f58:	f000 faa4 	bl	80024a4 <f25519_add>
	f25519_add(d, p2->y, p2->x);
 8001f5c:	a818      	add	r0, sp, #96	; 0x60
 8001f5e:	4639      	mov	r1, r7
 8001f60:	4622      	mov	r2, r4
 8001f62:	f000 fa9f 	bl	80024a4 <f25519_add>
	f25519_mul__distinct(b, c, d);
 8001f66:	a910      	add	r1, sp, #64	; 0x40
 8001f68:	aa18      	add	r2, sp, #96	; 0x60
 8001f6a:	a808      	add	r0, sp, #32
 8001f6c:	f000 fb08 	bl	8002580 <f25519_mul__distinct>

	/* C = T1 k T2 */
	f25519_mul__distinct(d, p1->t, p2->t);
 8001f70:	a818      	add	r0, sp, #96	; 0x60
 8001f72:	f105 0140 	add.w	r1, r5, #64	; 0x40
 8001f76:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8001f7a:	f000 fb01 	bl	8002580 <f25519_mul__distinct>
	f25519_mul__distinct(c, d, ed25519_k);
 8001f7e:	a810      	add	r0, sp, #64	; 0x40
 8001f80:	a918      	add	r1, sp, #96	; 0x60
 8001f82:	4a1e      	ldr	r2, [pc, #120]	; (8001ffc <ed25519_add+0xdc>)
 8001f84:	f000 fafc 	bl	8002580 <f25519_mul__distinct>

	/* D = Z1 2 Z2 */
	f25519_mul__distinct(d, p1->z, p2->z);
 8001f88:	a818      	add	r0, sp, #96	; 0x60
 8001f8a:	f105 0160 	add.w	r1, r5, #96	; 0x60
 8001f8e:	f104 0260 	add.w	r2, r4, #96	; 0x60
 8001f92:	f000 faf5 	bl	8002580 <f25519_mul__distinct>
	f25519_add(d, d, d);
 8001f96:	a818      	add	r0, sp, #96	; 0x60
 8001f98:	4601      	mov	r1, r0
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	f000 fa82 	bl	80024a4 <f25519_add>

	/* E = B - A */
	f25519_sub(e, b, a);
 8001fa0:	a908      	add	r1, sp, #32
 8001fa2:	466a      	mov	r2, sp
 8001fa4:	a820      	add	r0, sp, #128	; 0x80
 8001fa6:	f000 faa1 	bl	80024ec <f25519_sub>

	/* F = D - C */
	f25519_sub(f, d, c);
 8001faa:	a918      	add	r1, sp, #96	; 0x60
 8001fac:	aa10      	add	r2, sp, #64	; 0x40
 8001fae:	a828      	add	r0, sp, #160	; 0xa0
 8001fb0:	f000 fa9c 	bl	80024ec <f25519_sub>

	/* G = D + C */
	f25519_add(g, d, c);
 8001fb4:	a918      	add	r1, sp, #96	; 0x60
 8001fb6:	aa10      	add	r2, sp, #64	; 0x40
 8001fb8:	a830      	add	r0, sp, #192	; 0xc0
 8001fba:	f000 fa73 	bl	80024a4 <f25519_add>

	/* H = B + A */
	f25519_add(h, b, a);
 8001fbe:	a908      	add	r1, sp, #32
 8001fc0:	466a      	mov	r2, sp
 8001fc2:	a838      	add	r0, sp, #224	; 0xe0
 8001fc4:	f000 fa6e 	bl	80024a4 <f25519_add>

	/* X3 = E F */
	f25519_mul__distinct(r->x, e, f);
 8001fc8:	4630      	mov	r0, r6
 8001fca:	a920      	add	r1, sp, #128	; 0x80
 8001fcc:	aa28      	add	r2, sp, #160	; 0xa0
 8001fce:	f000 fad7 	bl	8002580 <f25519_mul__distinct>

	/* Y3 = G H */
	f25519_mul__distinct(r->y, g, h);
 8001fd2:	f106 0020 	add.w	r0, r6, #32
 8001fd6:	a930      	add	r1, sp, #192	; 0xc0
 8001fd8:	aa38      	add	r2, sp, #224	; 0xe0
 8001fda:	f000 fad1 	bl	8002580 <f25519_mul__distinct>

	/* T3 = E H */
	f25519_mul__distinct(r->t, e, h);
 8001fde:	a920      	add	r1, sp, #128	; 0x80
 8001fe0:	aa38      	add	r2, sp, #224	; 0xe0
 8001fe2:	f106 0040 	add.w	r0, r6, #64	; 0x40
 8001fe6:	f000 facb 	bl	8002580 <f25519_mul__distinct>

	/* Z3 = F G */
	f25519_mul__distinct(r->z, f, g);
 8001fea:	f106 0060 	add.w	r0, r6, #96	; 0x60
 8001fee:	a928      	add	r1, sp, #160	; 0xa0
 8001ff0:	aa30      	add	r2, sp, #192	; 0xc0
 8001ff2:	f000 fac5 	bl	8002580 <f25519_mul__distinct>
}
 8001ff6:	b040      	add	sp, #256	; 0x100
 8001ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ffc:	08007370 	stmdaeq	r0, {r4, r5, r6, r8, r9, ip, sp, lr}

08002000 <ed25519_double>:

void ed25519_double(struct ed25519_pt *r, const struct ed25519_pt *p)
{
 8002000:	b570      	push	{r4, r5, r6, lr}
 8002002:	b0b8      	sub	sp, #224	; 0xe0
 8002004:	4604      	mov	r4, r0

	/* A = X1^2 */
	f25519_mul__distinct(a, p->x, p->x);

	/* B = Y1^2 */
	f25519_mul__distinct(b, p->y, p->y);
 8002006:	f101 0620 	add.w	r6, r1, #32
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = X1^2 */
	f25519_mul__distinct(a, p->x, p->x);
 800200a:	460a      	mov	r2, r1
 800200c:	4668      	mov	r0, sp
	/* Z3 = F G */
	f25519_mul__distinct(r->z, f, g);
}

void ed25519_double(struct ed25519_pt *r, const struct ed25519_pt *p)
{
 800200e:	460d      	mov	r5, r1
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = X1^2 */
	f25519_mul__distinct(a, p->x, p->x);
 8002010:	f000 fab6 	bl	8002580 <f25519_mul__distinct>

	/* B = Y1^2 */
	f25519_mul__distinct(b, p->y, p->y);
 8002014:	4631      	mov	r1, r6
 8002016:	4632      	mov	r2, r6
 8002018:	a808      	add	r0, sp, #32
 800201a:	f000 fab1 	bl	8002580 <f25519_mul__distinct>

	/* C = 2 Z1^2 */
	f25519_mul__distinct(c, p->z, p->z);
 800201e:	f105 0160 	add.w	r1, r5, #96	; 0x60
 8002022:	460a      	mov	r2, r1
 8002024:	a810      	add	r0, sp, #64	; 0x40
 8002026:	f000 faab 	bl	8002580 <f25519_mul__distinct>
	f25519_add(c, c, c);
 800202a:	a810      	add	r0, sp, #64	; 0x40
 800202c:	4601      	mov	r1, r0
 800202e:	4602      	mov	r2, r0
 8002030:	f000 fa38 	bl	80024a4 <f25519_add>

	/* D = a A (alter sign) */
	/* E = (X1+Y1)^2-A-B */
	f25519_add(f, p->x, p->y);
 8002034:	4632      	mov	r2, r6
 8002036:	4629      	mov	r1, r5
 8002038:	a820      	add	r0, sp, #128	; 0x80
 800203a:	f000 fa33 	bl	80024a4 <f25519_add>
	f25519_mul__distinct(e, f, f);
 800203e:	a920      	add	r1, sp, #128	; 0x80
 8002040:	460a      	mov	r2, r1
 8002042:	a818      	add	r0, sp, #96	; 0x60
 8002044:	f000 fa9c 	bl	8002580 <f25519_mul__distinct>
	f25519_sub(e, e, a);
 8002048:	a818      	add	r0, sp, #96	; 0x60
 800204a:	4601      	mov	r1, r0
 800204c:	466a      	mov	r2, sp
 800204e:	f000 fa4d 	bl	80024ec <f25519_sub>
	f25519_sub(e, e, b);
 8002052:	a818      	add	r0, sp, #96	; 0x60
 8002054:	4601      	mov	r1, r0
 8002056:	aa08      	add	r2, sp, #32
 8002058:	f000 fa48 	bl	80024ec <f25519_sub>

	/* G = D + B */
	f25519_sub(g, b, a);
 800205c:	a908      	add	r1, sp, #32
 800205e:	466a      	mov	r2, sp
 8002060:	a828      	add	r0, sp, #160	; 0xa0
 8002062:	f000 fa43 	bl	80024ec <f25519_sub>

	/* F = G - C */
	f25519_sub(f, g, c);
 8002066:	aa10      	add	r2, sp, #64	; 0x40
 8002068:	a820      	add	r0, sp, #128	; 0x80
 800206a:	a928      	add	r1, sp, #160	; 0xa0
 800206c:	f000 fa3e 	bl	80024ec <f25519_sub>

	/* H = D - B */
	f25519_neg(h, b);
 8002070:	a908      	add	r1, sp, #32
 8002072:	a830      	add	r0, sp, #192	; 0xc0
 8002074:	f000 fa60 	bl	8002538 <f25519_neg>
	f25519_sub(h, h, a);
 8002078:	a830      	add	r0, sp, #192	; 0xc0
 800207a:	4601      	mov	r1, r0
 800207c:	466a      	mov	r2, sp
 800207e:	f000 fa35 	bl	80024ec <f25519_sub>

	/* X3 = E F */
	f25519_mul__distinct(r->x, e, f);
 8002082:	4620      	mov	r0, r4
 8002084:	a918      	add	r1, sp, #96	; 0x60
 8002086:	aa20      	add	r2, sp, #128	; 0x80
 8002088:	f000 fa7a 	bl	8002580 <f25519_mul__distinct>

	/* Y3 = G H */
	f25519_mul__distinct(r->y, g, h);
 800208c:	f104 0020 	add.w	r0, r4, #32
 8002090:	a928      	add	r1, sp, #160	; 0xa0
 8002092:	aa30      	add	r2, sp, #192	; 0xc0
 8002094:	f000 fa74 	bl	8002580 <f25519_mul__distinct>

	/* T3 = E H */
	f25519_mul__distinct(r->t, e, h);
 8002098:	a918      	add	r1, sp, #96	; 0x60
 800209a:	aa30      	add	r2, sp, #192	; 0xc0
 800209c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80020a0:	f000 fa6e 	bl	8002580 <f25519_mul__distinct>

	/* Z3 = F G */
	f25519_mul__distinct(r->z, f, g);
 80020a4:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80020a8:	a920      	add	r1, sp, #128	; 0x80
 80020aa:	aa28      	add	r2, sp, #160	; 0xa0
 80020ac:	f000 fa68 	bl	8002580 <f25519_mul__distinct>
}
 80020b0:	b038      	add	sp, #224	; 0xe0
 80020b2:	bd70      	pop	{r4, r5, r6, pc}

080020b4 <ed25519_smult>:

void ed25519_smult(struct ed25519_pt *r_out, const struct ed25519_pt *p,
		   const uint8_t *e)
{
 80020b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020b8:	b0c0      	sub	sp, #256	; 0x100
 80020ba:	4680      	mov	r8, r0
 80020bc:	460f      	mov	r7, r1
 80020be:	4616      	mov	r6, r2

/* Order of the group generated by the base point */
static inline void ed25519_copy(struct ed25519_pt *dst,
				const struct ed25519_pt *src)
{
	memcpy(dst, src, sizeof(*dst));
 80020c0:	4668      	mov	r0, sp
 80020c2:	491c      	ldr	r1, [pc, #112]	; (8002134 <ed25519_smult+0x80>)
 80020c4:	2280      	movs	r2, #128	; 0x80
 80020c6:	f004 fc2c 	bl	8006922 <memcpy>
	struct ed25519_pt r;
	int i;

	ed25519_copy(&r, &ed25519_neutral);

	for (i = 255; i >= 0; i--) {
 80020ca:	24ff      	movs	r4, #255	; 0xff
		const uint8_t bit = (e[i >> 3] >> (i & 7)) & 1;
 80020cc:	10e3      	asrs	r3, r4, #3
 80020ce:	5cf5      	ldrb	r5, [r6, r3]
 80020d0:	f004 0307 	and.w	r3, r4, #7
 80020d4:	411d      	asrs	r5, r3
		struct ed25519_pt s;

		ed25519_double(&r, &r);
 80020d6:	4668      	mov	r0, sp
 80020d8:	4669      	mov	r1, sp
 80020da:	f7ff ff91 	bl	8002000 <ed25519_double>
	int i;

	ed25519_copy(&r, &ed25519_neutral);

	for (i = 255; i >= 0; i--) {
		const uint8_t bit = (e[i >> 3] >> (i & 7)) & 1;
 80020de:	f005 0501 	and.w	r5, r5, #1
		struct ed25519_pt s;

		ed25519_double(&r, &r);
		ed25519_add(&s, &r, p);
 80020e2:	a820      	add	r0, sp, #128	; 0x80
 80020e4:	4669      	mov	r1, sp
 80020e6:	463a      	mov	r2, r7
 80020e8:	f7ff ff1a 	bl	8001f20 <ed25519_add>

		f25519_select(r.x, r.x, s.x, bit);
 80020ec:	4668      	mov	r0, sp
 80020ee:	4669      	mov	r1, sp
 80020f0:	aa20      	add	r2, sp, #128	; 0x80
 80020f2:	462b      	mov	r3, r5
 80020f4:	f000 f974 	bl	80023e0 <f25519_select>
		f25519_select(r.y, r.y, s.y, bit);
 80020f8:	a808      	add	r0, sp, #32
 80020fa:	4601      	mov	r1, r0
 80020fc:	aa28      	add	r2, sp, #160	; 0xa0
 80020fe:	462b      	mov	r3, r5
 8002100:	f000 f96e 	bl	80023e0 <f25519_select>
		f25519_select(r.z, r.z, s.z, bit);
 8002104:	a818      	add	r0, sp, #96	; 0x60
 8002106:	4601      	mov	r1, r0
 8002108:	aa38      	add	r2, sp, #224	; 0xe0
 800210a:	462b      	mov	r3, r5
 800210c:	f000 f968 	bl	80023e0 <f25519_select>
		f25519_select(r.t, r.t, s.t, bit);
 8002110:	a810      	add	r0, sp, #64	; 0x40
 8002112:	462b      	mov	r3, r5
	struct ed25519_pt r;
	int i;

	ed25519_copy(&r, &ed25519_neutral);

	for (i = 255; i >= 0; i--) {
 8002114:	3c01      	subs	r4, #1
		ed25519_add(&s, &r, p);

		f25519_select(r.x, r.x, s.x, bit);
		f25519_select(r.y, r.y, s.y, bit);
		f25519_select(r.z, r.z, s.z, bit);
		f25519_select(r.t, r.t, s.t, bit);
 8002116:	4601      	mov	r1, r0
 8002118:	aa30      	add	r2, sp, #192	; 0xc0
 800211a:	f000 f961 	bl	80023e0 <f25519_select>
	struct ed25519_pt r;
	int i;

	ed25519_copy(&r, &ed25519_neutral);

	for (i = 255; i >= 0; i--) {
 800211e:	1c63      	adds	r3, r4, #1
 8002120:	d1d4      	bne.n	80020cc <ed25519_smult+0x18>
 8002122:	4640      	mov	r0, r8
 8002124:	4669      	mov	r1, sp
 8002126:	2280      	movs	r2, #128	; 0x80
 8002128:	f004 fbfb 	bl	8006922 <memcpy>
		f25519_select(r.z, r.z, s.z, bit);
		f25519_select(r.t, r.t, s.t, bit);
	}

	ed25519_copy(r_out, &r);
}
 800212c:	b040      	add	sp, #256	; 0x100
 800212e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002132:	bf00      	nop
 8002134:	08007390 	stmdaeq	r0, {r4, r7, r8, r9, ip, sp, lr}

08002138 <edsign_verify>:
	memcpy(signature + 32, s, 32);
}
*/
uint8_t edsign_verify(const uint8_t *signature, const uint8_t *pub,
		      const uint8_t *message, size_t len)
{
 8002138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800213c:	4606      	mov	r6, r0
 800213e:	460f      	mov	r7, r1
 8002140:	b0e9      	sub	sp, #420	; 0x1a4
static void hash_message(uint8_t *z, const uint8_t *r, const uint8_t *a,
			 const uint8_t *m, size_t len)
{
	uint8_t block[SHA512_BLOCK_SIZE];

	memcpy(block, r, 32);
 8002142:	6800      	ldr	r0, [r0, #0]
 8002144:	6871      	ldr	r1, [r6, #4]
	memcpy(signature + 32, s, 32);
}
*/
uint8_t edsign_verify(const uint8_t *signature, const uint8_t *pub,
		      const uint8_t *message, size_t len)
{
 8002146:	4698      	mov	r8, r3
 8002148:	4691      	mov	r9, r2
static void hash_message(uint8_t *z, const uint8_t *r, const uint8_t *a,
			 const uint8_t *m, size_t len)
{
	uint8_t block[SHA512_BLOCK_SIZE];

	memcpy(block, r, 32);
 800214a:	68f3      	ldr	r3, [r6, #12]
 800214c:	68b2      	ldr	r2, [r6, #8]
 800214e:	ac48      	add	r4, sp, #288	; 0x120
 8002150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002152:	6930      	ldr	r0, [r6, #16]
 8002154:	6971      	ldr	r1, [r6, #20]
 8002156:	69b2      	ldr	r2, [r6, #24]
 8002158:	69f3      	ldr	r3, [r6, #28]
	memcpy(block + 32, a, 32);
 800215a:	f50d 7ea0 	add.w	lr, sp, #320	; 0x140
static void hash_message(uint8_t *z, const uint8_t *r, const uint8_t *a,
			 const uint8_t *m, size_t len)
{
	uint8_t block[SHA512_BLOCK_SIZE];

	memcpy(block, r, 32);
 800215e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	memcpy(block + 32, a, 32);
 8002160:	6838      	ldr	r0, [r7, #0]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	68fb      	ldr	r3, [r7, #12]
extern const struct sha512_state sha512_initial_state;

/* Set up a new context */
static inline void sha512_init(struct sha512_state *s)
{
	memcpy(s, &sha512_initial_state, sizeof(*s));
 8002168:	4d4f      	ldr	r5, [pc, #316]	; (80022a8 <edsign_verify+0x170>)
 800216a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800216e:	6938      	ldr	r0, [r7, #16]
 8002170:	6979      	ldr	r1, [r7, #20]
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	ac28      	add	r4, sp, #160	; 0xa0
 8002178:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800217c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800217e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002188:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
{
	struct sha512_state s;

	sha512_init(&s);

	if (len < SHA512_BLOCK_SIZE - prefix_size) {
 800218c:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8002190:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002194:	d92a      	bls.n	80021ec <edsign_verify+0xb4>
		memcpy(init_block + prefix_size, message, len);
		sha512_final(&s, init_block, len + prefix_size);
	} else {
		size_t i;

		memcpy(init_block + prefix_size, message,
 8002196:	464c      	mov	r4, r9
 8002198:	f50d 7eb0 	add.w	lr, sp, #352	; 0x160
 800219c:	f109 0c40 	add.w	ip, r9, #64	; 0x40
 80021a0:	6820      	ldr	r0, [r4, #0]
 80021a2:	6861      	ldr	r1, [r4, #4]
 80021a4:	68a2      	ldr	r2, [r4, #8]
 80021a6:	68e3      	ldr	r3, [r4, #12]
 80021a8:	4675      	mov	r5, lr
 80021aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ac:	3410      	adds	r4, #16
 80021ae:	4564      	cmp	r4, ip
 80021b0:	46ae      	mov	lr, r5
 80021b2:	d1f5      	bne.n	80021a0 <edsign_verify+0x68>
		       SHA512_BLOCK_SIZE - prefix_size);
		sha512_block(&s, init_block);
 80021b4:	a828      	add	r0, sp, #160	; 0xa0
 80021b6:	a948      	add	r1, sp, #288	; 0x120
 80021b8:	f003 fa38 	bl	800562c <sha512_block>

		for (i = SHA512_BLOCK_SIZE - prefix_size;
 80021bc:	f1b8 0fbf 	cmp.w	r8, #191	; 0xbf
 80021c0:	d970      	bls.n	80022a4 <edsign_verify+0x16c>
		     i + SHA512_BLOCK_SIZE <= len;
 80021c2:	24c0      	movs	r4, #192	; 0xc0

		memcpy(init_block + prefix_size, message,
		       SHA512_BLOCK_SIZE - prefix_size);
		sha512_block(&s, init_block);

		for (i = SHA512_BLOCK_SIZE - prefix_size;
 80021c4:	2140      	movs	r1, #64	; 0x40
 80021c6:	e001      	b.n	80021cc <edsign_verify+0x94>
 80021c8:	4621      	mov	r1, r4
		     i + SHA512_BLOCK_SIZE <= len;
 80021ca:	462c      	mov	r4, r5
		     i += SHA512_BLOCK_SIZE)
			sha512_block(&s, message + i);
 80021cc:	4449      	add	r1, r9
 80021ce:	a828      	add	r0, sp, #160	; 0xa0
		memcpy(init_block + prefix_size, message,
		       SHA512_BLOCK_SIZE - prefix_size);
		sha512_block(&s, init_block);

		for (i = SHA512_BLOCK_SIZE - prefix_size;
		     i + SHA512_BLOCK_SIZE <= len;
 80021d0:	f104 0580 	add.w	r5, r4, #128	; 0x80
		     i += SHA512_BLOCK_SIZE)
			sha512_block(&s, message + i);
 80021d4:	f003 fa2a 	bl	800562c <sha512_block>

		memcpy(init_block + prefix_size, message,
		       SHA512_BLOCK_SIZE - prefix_size);
		sha512_block(&s, init_block);

		for (i = SHA512_BLOCK_SIZE - prefix_size;
 80021d8:	45a8      	cmp	r8, r5
 80021da:	d2f5      	bcs.n	80021c8 <edsign_verify+0x90>
		     i + SHA512_BLOCK_SIZE <= len;
		     i += SHA512_BLOCK_SIZE)
			sha512_block(&s, message + i);

		sha512_final(&s, message + i, len + prefix_size);
 80021dc:	eb09 0104 	add.w	r1, r9, r4
 80021e0:	f108 0240 	add.w	r2, r8, #64	; 0x40
 80021e4:	a828      	add	r0, sp, #160	; 0xa0
 80021e6:	f003 fc6b 	bl	8005ac0 <sha512_final>
 80021ea:	e00a      	b.n	8002202 <edsign_verify+0xca>
	struct sha512_state s;

	sha512_init(&s);

	if (len < SHA512_BLOCK_SIZE - prefix_size) {
		memcpy(init_block + prefix_size, message, len);
 80021ec:	4649      	mov	r1, r9
 80021ee:	4642      	mov	r2, r8
 80021f0:	a858      	add	r0, sp, #352	; 0x160
 80021f2:	f004 fb96 	bl	8006922 <memcpy>
		sha512_final(&s, init_block, len + prefix_size);
 80021f6:	a828      	add	r0, sp, #160	; 0xa0
 80021f8:	a948      	add	r1, sp, #288	; 0x120
 80021fa:	f108 0240 	add.w	r2, r8, #64	; 0x40
 80021fe:	f003 fc5f 	bl	8005ac0 <sha512_final>
			sha512_block(&s, message + i);

		sha512_final(&s, message + i, len + prefix_size);
	}

	sha512_get(&s, init_block, 0, SHA512_HASH_SIZE);
 8002202:	a828      	add	r0, sp, #160	; 0xa0
 8002204:	a948      	add	r1, sp, #288	; 0x120
 8002206:	2200      	movs	r2, #0
 8002208:	2340      	movs	r3, #64	; 0x40
 800220a:	f003 fc9d 	bl	8005b48 <sha512_get>
	fprime_from_bytes(out_fp, init_block, SHA512_HASH_SIZE, ed25519_order);
 800220e:	4b27      	ldr	r3, [pc, #156]	; (80022ac <edsign_verify+0x174>)
 8002210:	a810      	add	r0, sp, #64	; 0x40
 8002212:	a948      	add	r1, sp, #288	; 0x120
 8002214:	2240      	movs	r2, #64	; 0x40
 8002216:	f001 f807 	bl	8003228 <fprime_from_bytes>

static void sm_pack(uint8_t *r, const uint8_t *k)
{
	struct ed25519_pt p;

	ed25519_smult(&p, &ed25519_base, k);
 800221a:	a848      	add	r0, sp, #288	; 0x120
 800221c:	f106 0220 	add.w	r2, r6, #32
 8002220:	4923      	ldr	r1, [pc, #140]	; (80022b0 <edsign_verify+0x178>)
 8002222:	f7ff ff47 	bl	80020b4 <ed25519_smult>
static void pp(uint8_t *packed, const struct ed25519_pt *p)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];

	ed25519_unproject(x, y, p);
 8002226:	a820      	add	r0, sp, #128	; 0x80
 8002228:	a928      	add	r1, sp, #160	; 0xa0
 800222a:	aa48      	add	r2, sp, #288	; 0x120
 800222c:	f7ff fdc6 	bl	8001dbc <ed25519_unproject>
	ed25519_pack(packed, x, y);
 8002230:	a920      	add	r1, sp, #128	; 0x80
 8002232:	4668      	mov	r0, sp
 8002234:	aa28      	add	r2, sp, #160	; 0xa0
 8002236:	f7ff fddf 	bl	8001df8 <ed25519_pack>

static uint8_t upp(struct ed25519_pt *p, const uint8_t *packed)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];
	uint8_t ok = ed25519_try_unpack(x, y, packed);
 800223a:	a948      	add	r1, sp, #288	; 0x120
 800223c:	463a      	mov	r2, r7
 800223e:	a820      	add	r0, sp, #128	; 0x80
 8002240:	f7ff fe0a 	bl	8001e58 <ed25519_try_unpack>

	ed25519_project(p, x, y);
 8002244:	a920      	add	r1, sp, #128	; 0x80

static uint8_t upp(struct ed25519_pt *p, const uint8_t *packed)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];
	uint8_t ok = ed25519_try_unpack(x, y, packed);
 8002246:	4605      	mov	r5, r0

	ed25519_project(p, x, y);
 8002248:	aa48      	add	r2, sp, #288	; 0x120
 800224a:	a828      	add	r0, sp, #160	; 0xa0
 800224c:	f7ff fd7e 	bl	8001d4c <ed25519_project>
	/* sB = (ze + k)B = ... */
	sm_pack(lhs, signature + 32);

	/* ... = zA + R */
	ok &= upp(&p, pub);
	ed25519_smult(&p, &p, z);
 8002250:	a828      	add	r0, sp, #160	; 0xa0
 8002252:	4601      	mov	r1, r0
 8002254:	aa10      	add	r2, sp, #64	; 0x40
 8002256:	f7ff ff2d 	bl	80020b4 <ed25519_smult>

static uint8_t upp(struct ed25519_pt *p, const uint8_t *packed)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];
	uint8_t ok = ed25519_try_unpack(x, y, packed);
 800225a:	4632      	mov	r2, r6
 800225c:	a920      	add	r1, sp, #128	; 0x80
 800225e:	a818      	add	r0, sp, #96	; 0x60
 8002260:	f7ff fdfa 	bl	8001e58 <ed25519_try_unpack>

	ed25519_project(p, x, y);
 8002264:	a918      	add	r1, sp, #96	; 0x60

static uint8_t upp(struct ed25519_pt *p, const uint8_t *packed)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];
	uint8_t ok = ed25519_try_unpack(x, y, packed);
 8002266:	4604      	mov	r4, r0

	ed25519_project(p, x, y);
 8002268:	aa20      	add	r2, sp, #128	; 0x80
 800226a:	a848      	add	r0, sp, #288	; 0x120
 800226c:	f7ff fd6e 	bl	8001d4c <ed25519_project>

	/* ... = zA + R */
	ok &= upp(&p, pub);
	ed25519_smult(&p, &p, z);
	ok &= upp(&q, signature);
	ed25519_add(&p, &p, &q);
 8002270:	a828      	add	r0, sp, #160	; 0xa0
 8002272:	4601      	mov	r1, r0
 8002274:	aa48      	add	r2, sp, #288	; 0x120
 8002276:	f7ff fe53 	bl	8001f20 <ed25519_add>
static void pp(uint8_t *packed, const struct ed25519_pt *p)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];

	ed25519_unproject(x, y, p);
 800227a:	a818      	add	r0, sp, #96	; 0x60
 800227c:	a920      	add	r1, sp, #128	; 0x80
 800227e:	aa28      	add	r2, sp, #160	; 0xa0
 8002280:	f7ff fd9c 	bl	8001dbc <ed25519_unproject>
	ed25519_pack(packed, x, y);
 8002284:	a918      	add	r1, sp, #96	; 0x60
 8002286:	aa20      	add	r2, sp, #128	; 0x80
 8002288:	a808      	add	r0, sp, #32
 800228a:	f7ff fdb5 	bl	8001df8 <ed25519_pack>
	ok &= upp(&q, signature);
	ed25519_add(&p, &p, &q);
	pp(rhs, &p);

	/* Equal? */
	return ok & f25519_eq(lhs, rhs);
 800228e:	4668      	mov	r0, sp
 8002290:	a908      	add	r1, sp, #32
 8002292:	f000 f857 	bl	8002344 <f25519_eq>

	/* sB = (ze + k)B = ... */
	sm_pack(lhs, signature + 32);

	/* ... = zA + R */
	ok &= upp(&p, pub);
 8002296:	4028      	ands	r0, r5
	ed25519_smult(&p, &p, z);
	ok &= upp(&q, signature);
 8002298:	f000 0001 	and.w	r0, r0, #1
	ed25519_add(&p, &p, &q);
	pp(rhs, &p);

	/* Equal? */
	return ok & f25519_eq(lhs, rhs);
}
 800229c:	4020      	ands	r0, r4
 800229e:	b069      	add	sp, #420	; 0x1a4
 80022a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

		memcpy(init_block + prefix_size, message,
		       SHA512_BLOCK_SIZE - prefix_size);
		sha512_block(&s, init_block);

		for (i = SHA512_BLOCK_SIZE - prefix_size;
 80022a4:	2440      	movs	r4, #64	; 0x40
 80022a6:	e799      	b.n	80021dc <edsign_verify+0xa4>
 80022a8:	080074f0 	stmdaeq	r0, {r4, r5, r6, r7, sl, ip, sp, lr}
 80022ac:	080074b0 	stmdaeq	r0, {r4, r5, r7, sl, ip, sp, lr}
 80022b0:	08007410 	stmdaeq	r0, {r4, sl, ip, sp, lr}

080022b4 <f25519_load>:

const uint8_t f25519_zero[F25519_SIZE] = {0};
const uint8_t f25519_one[F25519_SIZE] = {1};

void f25519_load(uint8_t *x, uint32_t c)
{
 80022b4:	b410      	push	{r4}
	int i;

	for (i = 0; i < sizeof(c); i++) {
		x[i] = c;
		c >>= 8;
 80022b6:	0c0a      	lsrs	r2, r1, #16
 80022b8:	0a0c      	lsrs	r4, r1, #8
 80022ba:	0e0b      	lsrs	r3, r1, #24
void f25519_load(uint8_t *x, uint32_t c)
{
	int i;

	for (i = 0; i < sizeof(c); i++) {
		x[i] = c;
 80022bc:	7001      	strb	r1, [r0, #0]
 80022be:	7082      	strb	r2, [r0, #2]
 80022c0:	7044      	strb	r4, [r0, #1]
 80022c2:	70c3      	strb	r3, [r0, #3]
 80022c4:	2100      	movs	r1, #0
 80022c6:	3004      	adds	r0, #4
 80022c8:	221c      	movs	r2, #28
		c >>= 8;
	}

	for (; i < F25519_SIZE; i++)
		x[i] = 0;
}
 80022ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022ce:	f004 bb4f 	b.w	8006970 <memset>
 80022d2:	bf00      	nop

080022d4 <f25519_normalize>:

void f25519_normalize(uint8_t *x)
{
 80022d4:	b410      	push	{r4}
	uint8_t minusp[F25519_SIZE];
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
 80022d6:	7fc4      	ldrb	r4, [r0, #31]
	for (; i < F25519_SIZE; i++)
		x[i] = 0;
}

void f25519_normalize(uint8_t *x)
{
 80022d8:	b089      	sub	sp, #36	; 0x24
	uint8_t minusp[F25519_SIZE];
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
 80022da:	09e1      	lsrs	r1, r4, #7
 80022dc:	00ca      	lsls	r2, r1, #3
	x[31] &= 127;
 80022de:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	uint8_t minusp[F25519_SIZE];
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
 80022e2:	440a      	add	r2, r1
	x[31] &= 127;

	for (i = 0; i < F25519_SIZE; i++) {
 80022e4:	2300      	movs	r3, #0
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
	x[31] &= 127;
 80022e6:	77c4      	strb	r4, [r0, #31]
	uint8_t minusp[F25519_SIZE];
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
 80022e8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
	x[31] &= 127;

	for (i = 0; i < F25519_SIZE; i++) {
		c += x[i];
 80022ec:	5cc1      	ldrb	r1, [r0, r3]
 80022ee:	440a      	add	r2, r1
		x[i] = c;
 80022f0:	54c2      	strb	r2, [r0, r3]

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
	x[31] &= 127;

	for (i = 0; i < F25519_SIZE; i++) {
 80022f2:	3301      	adds	r3, #1
 80022f4:	2b20      	cmp	r3, #32
		c += x[i];
		x[i] = c;
		c >>= 8;
 80022f6:	f3c2 220f 	ubfx	r2, r2, #8, #16

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
	x[31] &= 127;

	for (i = 0; i < F25519_SIZE; i++) {
 80022fa:	d1f7      	bne.n	80022ec <f25519_normalize+0x18>
 80022fc:	2300      	movs	r3, #0
 80022fe:	2213      	movs	r2, #19
	 * value if underflow did not occur.
	 */
	c = 19;

	for (i = 0; i + 1 < F25519_SIZE; i++) {
		c += x[i];
 8002300:	5cc1      	ldrb	r1, [r0, r3]
 8002302:	440a      	add	r2, r1
		minusp[i] = c;
 8002304:	f80d 2003 	strb.w	r2, [sp, r3]
	 * 2p. Try subtracting p, and conditionally load the subtracted
	 * value if underflow did not occur.
	 */
	c = 19;

	for (i = 0; i + 1 < F25519_SIZE; i++) {
 8002308:	3301      	adds	r3, #1
 800230a:	2b1f      	cmp	r3, #31
		c += x[i];
		minusp[i] = c;
		c >>= 8;
 800230c:	f3c2 220f 	ubfx	r2, r2, #8, #16
	 * 2p. Try subtracting p, and conditionally load the subtracted
	 * value if underflow did not occur.
	 */
	c = 19;

	for (i = 0; i + 1 < F25519_SIZE; i++) {
 8002310:	d1f6      	bne.n	8002300 <f25519_normalize+0x2c>
		c += x[i];
		minusp[i] = c;
		c >>= 8;
	}

	c += ((uint16_t)x[i]) - 128;
 8002312:	7fc1      	ldrb	r1, [r0, #31]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 8002314:	2300      	movs	r3, #0
		c += x[i];
		minusp[i] = c;
		c >>= 8;
	}

	c += ((uint16_t)x[i]) - 128;
 8002316:	3980      	subs	r1, #128	; 0x80
 8002318:	440a      	add	r2, r1
 800231a:	b292      	uxth	r2, r2

void f25519_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 800231c:	f342 34c0 	sbfx	r4, r2, #15, #1
		minusp[i] = c;
		c >>= 8;
	}

	c += ((uint16_t)x[i]) - 128;
	minusp[31] = c;
 8002320:	f88d 201f 	strb.w	r2, [sp, #31]

void f25519_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 8002324:	b2e4      	uxtb	r4, r4
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 8002326:	f81d 2003 	ldrb.w	r2, [sp, r3]
 800232a:	5cc1      	ldrb	r1, [r0, r3]
 800232c:	4051      	eors	r1, r2
 800232e:	4021      	ands	r1, r4
 8002330:	404a      	eors	r2, r1
 8002332:	54c2      	strb	r2, [r0, r3]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 8002334:	3301      	adds	r3, #1
 8002336:	2b20      	cmp	r3, #32
 8002338:	d1f5      	bne.n	8002326 <f25519_normalize+0x52>
	c += ((uint16_t)x[i]) - 128;
	minusp[31] = c;

	/* Load x-p if no underflow */
	f25519_select(x, minusp, x, (c >> 15) & 1);
}
 800233a:	b009      	add	sp, #36	; 0x24
 800233c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop

08002344 <f25519_eq>:

uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
 8002344:	ea40 0301 	orr.w	r3, r0, r1
 8002348:	079b      	lsls	r3, r3, #30
 800234a:	b4f0      	push	{r4, r5, r6, r7}
 800234c:	d13c      	bne.n	80023c8 <f25519_eq+0x84>
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		sum |= x[i] ^ y[i];
 800234e:	6807      	ldr	r7, [r0, #0]
 8002350:	6842      	ldr	r2, [r0, #4]
 8002352:	684b      	ldr	r3, [r1, #4]
 8002354:	680e      	ldr	r6, [r1, #0]
 8002356:	6885      	ldr	r5, [r0, #8]
 8002358:	688c      	ldr	r4, [r1, #8]
 800235a:	ea82 0c03 	eor.w	ip, r2, r3
 800235e:	407e      	eors	r6, r7
 8002360:	68c2      	ldr	r2, [r0, #12]
 8002362:	68cb      	ldr	r3, [r1, #12]
 8002364:	ea46 060c 	orr.w	r6, r6, ip
 8002368:	ea85 0c04 	eor.w	ip, r5, r4
 800236c:	6905      	ldr	r5, [r0, #16]
 800236e:	690c      	ldr	r4, [r1, #16]
 8002370:	ea46 0c0c 	orr.w	ip, r6, ip
 8002374:	ea82 0603 	eor.w	r6, r2, r3
 8002378:	6942      	ldr	r2, [r0, #20]
 800237a:	694b      	ldr	r3, [r1, #20]
 800237c:	ea4c 0c06 	orr.w	ip, ip, r6
 8002380:	6987      	ldr	r7, [r0, #24]
 8002382:	698e      	ldr	r6, [r1, #24]
 8002384:	406c      	eors	r4, r5
 8002386:	ea4c 0404 	orr.w	r4, ip, r4
 800238a:	4053      	eors	r3, r2
 800238c:	69c0      	ldr	r0, [r0, #28]
 800238e:	69c9      	ldr	r1, [r1, #28]
 8002390:	ea44 0203 	orr.w	r2, r4, r3
 8002394:	ea87 0406 	eor.w	r4, r7, r6
 8002398:	4322      	orrs	r2, r4
 800239a:	ea80 0301 	eor.w	r3, r0, r1
 800239e:	4313      	orrs	r3, r2
 80023a0:	ea43 2213 	orr.w	r2, r3, r3, lsr #8
 80023a4:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
 80023a8:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 80023ac:	ea42 6213 	orr.w	r2, r2, r3, lsr #24

	sum |= (sum >> 4);
 80023b0:	ea42 1212 	orr.w	r2, r2, r2, lsr #4
	sum |= (sum >> 2);
 80023b4:	ea42 0292 	orr.w	r2, r2, r2, lsr #2
	sum |= (sum >> 1);
 80023b8:	ea42 0252 	orr.w	r2, r2, r2, lsr #1

	return (sum ^ 1) & 1;
 80023bc:	f002 0001 	and.w	r0, r2, #1
}
 80023c0:	f080 0001 	eor.w	r0, r0, #1
 80023c4:	bcf0      	pop	{r4, r5, r6, r7}
 80023c6:	4770      	bx	lr
uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 80023c8:	2300      	movs	r3, #0
	f25519_select(x, minusp, x, (c >> 15) & 1);
}

uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
 80023ca:	461a      	mov	r2, r3
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		sum |= x[i] ^ y[i];
 80023cc:	5cc5      	ldrb	r5, [r0, r3]
 80023ce:	5ccc      	ldrb	r4, [r1, r3]
uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 80023d0:	3301      	adds	r3, #1
		sum |= x[i] ^ y[i];
 80023d2:	406c      	eors	r4, r5
uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 80023d4:	2b20      	cmp	r3, #32
		sum |= x[i] ^ y[i];
 80023d6:	ea42 0204 	orr.w	r2, r2, r4
uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 80023da:	d1f7      	bne.n	80023cc <f25519_eq+0x88>
 80023dc:	e7e8      	b.n	80023b0 <f25519_eq+0x6c>
 80023de:	bf00      	nop

080023e0 <f25519_select>:
}

void f25519_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
 80023e0:	b4f0      	push	{r4, r5, r6, r7}
 80023e2:	1d04      	adds	r4, r0, #4
 80023e4:	1d0f      	adds	r7, r1, #4
 80023e6:	42b8      	cmp	r0, r7
 80023e8:	bf38      	it	cc
 80023ea:	42a1      	cmpcc	r1, r4
 80023ec:	f102 0504 	add.w	r5, r2, #4
 80023f0:	bf34      	ite	cc
 80023f2:	2700      	movcc	r7, #0
 80023f4:	2701      	movcs	r7, #1
 80023f6:	42a8      	cmp	r0, r5
 80023f8:	bf38      	it	cc
 80023fa:	42a2      	cmpcc	r2, r4
 80023fc:	bf34      	ite	cc
 80023fe:	2400      	movcc	r4, #0
 8002400:	2401      	movcs	r4, #1
	const uint8_t mask = -condition;
 8002402:	425b      	negs	r3, r3
 8002404:	4227      	tst	r7, r4
 8002406:	b2de      	uxtb	r6, r3
 8002408:	d03f      	beq.n	800248a <f25519_select+0xaa>
 800240a:	ea41 0302 	orr.w	r3, r1, r2
 800240e:	4303      	orrs	r3, r0
 8002410:	079b      	lsls	r3, r3, #30
 8002412:	d13a      	bne.n	800248a <f25519_select+0xaa>
 8002414:	2300      	movs	r3, #0
 8002416:	f366 0307 	bfi	r3, r6, #0, #8
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 800241a:	680c      	ldr	r4, [r1, #0]
 800241c:	6815      	ldr	r5, [r2, #0]
 800241e:	f366 230f 	bfi	r3, r6, #8, #8
 8002422:	f366 4317 	bfi	r3, r6, #16, #8
 8002426:	f366 631f 	bfi	r3, r6, #24, #8
 800242a:	4065      	eors	r5, r4
 800242c:	401d      	ands	r5, r3
 800242e:	406c      	eors	r4, r5
 8002430:	6004      	str	r4, [r0, #0]
 8002432:	684c      	ldr	r4, [r1, #4]
 8002434:	6855      	ldr	r5, [r2, #4]
 8002436:	4065      	eors	r5, r4
 8002438:	401d      	ands	r5, r3
 800243a:	406c      	eors	r4, r5
 800243c:	6044      	str	r4, [r0, #4]
 800243e:	688c      	ldr	r4, [r1, #8]
 8002440:	6895      	ldr	r5, [r2, #8]
 8002442:	4065      	eors	r5, r4
 8002444:	401d      	ands	r5, r3
 8002446:	406c      	eors	r4, r5
 8002448:	6084      	str	r4, [r0, #8]
 800244a:	68cc      	ldr	r4, [r1, #12]
 800244c:	68d5      	ldr	r5, [r2, #12]
 800244e:	4065      	eors	r5, r4
 8002450:	401d      	ands	r5, r3
 8002452:	406c      	eors	r4, r5
 8002454:	60c4      	str	r4, [r0, #12]
 8002456:	690c      	ldr	r4, [r1, #16]
 8002458:	6915      	ldr	r5, [r2, #16]
 800245a:	4065      	eors	r5, r4
 800245c:	401d      	ands	r5, r3
 800245e:	406c      	eors	r4, r5
 8002460:	6104      	str	r4, [r0, #16]
 8002462:	694c      	ldr	r4, [r1, #20]
 8002464:	6955      	ldr	r5, [r2, #20]
 8002466:	4065      	eors	r5, r4
 8002468:	401d      	ands	r5, r3
 800246a:	406c      	eors	r4, r5
 800246c:	6144      	str	r4, [r0, #20]
 800246e:	698c      	ldr	r4, [r1, #24]
 8002470:	6995      	ldr	r5, [r2, #24]
 8002472:	4065      	eors	r5, r4
 8002474:	401d      	ands	r5, r3
 8002476:	406c      	eors	r4, r5
 8002478:	6184      	str	r4, [r0, #24]
 800247a:	69c9      	ldr	r1, [r1, #28]
 800247c:	69d2      	ldr	r2, [r2, #28]
}
 800247e:	bcf0      	pop	{r4, r5, r6, r7}
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 8002480:	404a      	eors	r2, r1
 8002482:	4013      	ands	r3, r2
 8002484:	4059      	eors	r1, r3
 8002486:	61c1      	str	r1, [r0, #28]
}
 8002488:	4770      	bx	lr
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 800248a:	2300      	movs	r3, #0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 800248c:	5ccc      	ldrb	r4, [r1, r3]
 800248e:	5cd5      	ldrb	r5, [r2, r3]
 8002490:	4065      	eors	r5, r4
 8002492:	4035      	ands	r5, r6
 8002494:	406c      	eors	r4, r5
 8002496:	54c4      	strb	r4, [r0, r3]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 8002498:	3301      	adds	r3, #1
 800249a:	2b20      	cmp	r3, #32
 800249c:	d1f6      	bne.n	800248c <f25519_select+0xac>
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
}
 800249e:	bcf0      	pop	{r4, r5, r6, r7}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop

080024a4 <f25519_add>:
{
	uint16_t c = 0;
	int i;

	/* Add */
	for (i = 0; i < F25519_SIZE; i++) {
 80024a4:	2300      	movs	r3, #0
	for (i = 0; i < F25519_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
}

void f25519_add(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
 80024a6:	b470      	push	{r4, r5, r6}
	uint16_t c = 0;
 80024a8:	461c      	mov	r4, r3
	int i;

	/* Add */
	for (i = 0; i < F25519_SIZE; i++) {
		c >>= 8;
		c += ((uint16_t)a[i]) + ((uint16_t)b[i]);
 80024aa:	5cce      	ldrb	r6, [r1, r3]
 80024ac:	5cd5      	ldrb	r5, [r2, r3]
 80024ae:	4435      	add	r5, r6
 80024b0:	eb05 2414 	add.w	r4, r5, r4, lsr #8
		r[i] = c;
 80024b4:	54c4      	strb	r4, [r0, r3]
{
	uint16_t c = 0;
	int i;

	/* Add */
	for (i = 0; i < F25519_SIZE; i++) {
 80024b6:	3301      	adds	r3, #1
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	d1f6      	bne.n	80024aa <f25519_add+0x6>
		r[i] = c;
	}

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
	c = (c >> 7) * 19;
 80024bc:	f3c4 14cf 	ubfx	r4, r4, #7, #16
		c += ((uint16_t)a[i]) + ((uint16_t)b[i]);
		r[i] = c;
	}

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
 80024c0:	7fc3      	ldrb	r3, [r0, #31]
	c = (c >> 7) * 19;
 80024c2:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
		c += ((uint16_t)a[i]) + ((uint16_t)b[i]);
		r[i] = c;
	}

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
 80024c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	c = (c >> 7) * 19;
 80024ca:	eb04 0242 	add.w	r2, r4, r2, lsl #1
		c += ((uint16_t)a[i]) + ((uint16_t)b[i]);
		r[i] = c;
	}

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
 80024ce:	77c3      	strb	r3, [r0, #31]
	c = (c >> 7) * 19;
 80024d0:	b292      	uxth	r2, r2

	for (i = 0; i < F25519_SIZE; i++) {
 80024d2:	2300      	movs	r3, #0
		c += r[i];
 80024d4:	5cc1      	ldrb	r1, [r0, r3]
 80024d6:	440a      	add	r2, r1
 80024d8:	b292      	uxth	r2, r2
		r[i] = c;
 80024da:	54c2      	strb	r2, [r0, r3]

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80024dc:	3301      	adds	r3, #1
 80024de:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 80024e0:	ea4f 2212 	mov.w	r2, r2, lsr #8

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80024e4:	d1f6      	bne.n	80024d4 <f25519_add+0x30>
		c += r[i];
		r[i] = c;
		c >>= 8;
	}
}
 80024e6:	bc70      	pop	{r4, r5, r6}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop

080024ec <f25519_sub>:

void f25519_sub(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
 80024ec:	b470      	push	{r4, r5, r6}
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 80024ee:	2300      	movs	r3, #0
{
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
 80024f0:	24da      	movs	r4, #218	; 0xda
	for (i = 0; i + 1 < F25519_SIZE; i++) {
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
 80024f2:	5ccd      	ldrb	r5, [r1, r3]
 80024f4:	5cd6      	ldrb	r6, [r2, r3]
 80024f6:	f505 457f 	add.w	r5, r5, #65280	; 0xff00
 80024fa:	1bad      	subs	r5, r5, r6
 80024fc:	442c      	add	r4, r5
		r[i] = c;
 80024fe:	54c4      	strb	r4, [r0, r3]
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 8002500:	3301      	adds	r3, #1
 8002502:	2b1f      	cmp	r3, #31
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
 8002504:	ea4f 2414 	mov.w	r4, r4, lsr #8
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 8002508:	d1f3      	bne.n	80024f2 <f25519_sub+0x6>
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
 800250a:	7fc9      	ldrb	r1, [r1, #31]
 800250c:	7fd2      	ldrb	r2, [r2, #31]
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800250e:	2300      	movs	r3, #0
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
 8002510:	1a8a      	subs	r2, r1, r2
 8002512:	4414      	add	r4, r2
	r[31] = c & 127;
	c = (c >> 7) * 19;
 8002514:	09e2      	lsrs	r2, r4, #7
 8002516:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
 800251a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 800251e:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;
 8002520:	eb02 0241 	add.w	r2, r2, r1, lsl #1

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002524:	5cc1      	ldrb	r1, [r0, r3]
 8002526:	440a      	add	r2, r1
		r[i] = c;
 8002528:	54c2      	strb	r2, [r0, r3]

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800252a:	3301      	adds	r3, #1
 800252c:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 800252e:	ea4f 2212 	mov.w	r2, r2, lsr #8

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002532:	d1f7      	bne.n	8002524 <f25519_sub+0x38>
		c += r[i];
		r[i] = c;
		c >>= 8;
	}
}
 8002534:	bc70      	pop	{r4, r5, r6}
 8002536:	4770      	bx	lr

08002538 <f25519_neg>:

void f25519_neg(uint8_t *r, const uint8_t *a)
{
 8002538:	b410      	push	{r4}
	uint32_t c = 0;
	int i;

	/* Calculate 2p - a, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 800253a:	2300      	movs	r3, #0
{
	uint32_t c = 0;
	int i;

	/* Calculate 2p - a, to avoid underflow */
	c = 218;
 800253c:	22da      	movs	r2, #218	; 0xda
	for (i = 0; i + 1 < F25519_SIZE; i++) {
		c += 65280 - ((uint32_t)a[i]);
 800253e:	5ccc      	ldrb	r4, [r1, r3]
 8002540:	f5c4 447f 	rsb	r4, r4, #65280	; 0xff00
 8002544:	4422      	add	r2, r4
		r[i] = c;
 8002546:	54c2      	strb	r2, [r0, r3]
	uint32_t c = 0;
	int i;

	/* Calculate 2p - a, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 8002548:	3301      	adds	r3, #1
 800254a:	2b1f      	cmp	r3, #31
		c += 65280 - ((uint32_t)a[i]);
		r[i] = c;
		c >>= 8;
 800254c:	ea4f 2212 	mov.w	r2, r2, lsr #8
	uint32_t c = 0;
	int i;

	/* Calculate 2p - a, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 8002550:	d1f5      	bne.n	800253e <f25519_neg+0x6>
		c += 65280 - ((uint32_t)a[i]);
		r[i] = c;
		c >>= 8;
	}

	c -= ((uint32_t)a[31]);
 8002552:	7fc9      	ldrb	r1, [r1, #31]
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002554:	2300      	movs	r3, #0
		c += 65280 - ((uint32_t)a[i]);
		r[i] = c;
		c >>= 8;
	}

	c -= ((uint32_t)a[31]);
 8002556:	1a52      	subs	r2, r2, r1
	r[31] = c & 127;
	c = (c >> 7) * 19;
 8002558:	09d1      	lsrs	r1, r2, #7
		r[i] = c;
		c >>= 8;
	}

	c -= ((uint32_t)a[31]);
	r[31] = c & 127;
 800255a:	f002 047f 	and.w	r4, r2, #127	; 0x7f
	c = (c >> 7) * 19;
 800255e:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
		r[i] = c;
		c >>= 8;
	}

	c -= ((uint32_t)a[31]);
	r[31] = c & 127;
 8002562:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;
 8002564:	eb01 0242 	add.w	r2, r1, r2, lsl #1

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002568:	5cc1      	ldrb	r1, [r0, r3]
 800256a:	440a      	add	r2, r1
		r[i] = c;
 800256c:	54c2      	strb	r2, [r0, r3]

	c -= ((uint32_t)a[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800256e:	3301      	adds	r3, #1
 8002570:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002572:	ea4f 2212 	mov.w	r2, r2, lsr #8

	c -= ((uint32_t)a[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002576:	d1f7      	bne.n	8002568 <f25519_neg+0x30>
		c += r[i];
		r[i] = c;
		c >>= 8;
	}
}
 8002578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop

08002580 <f25519_mul__distinct>:

void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
 8002580:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002584:	f04f 0800 	mov.w	r8, #0
	}
}

void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
 8002588:	4643      	mov	r3, r8
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 800258a:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	eb02 0508 	add.w	r5, r2, r8
		for (j = 0; j <= i; j++)
 8002594:	2400      	movs	r4, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002596:	5d0f      	ldrb	r7, [r1, r4]
 8002598:	f815 6901 	ldrb.w	r6, [r5], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800259c:	3401      	adds	r4, #1
 800259e:	4544      	cmp	r4, r8
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80025a0:	fb07 3306 	mla	r3, r7, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80025a4:	ddf7      	ble.n	8002596 <f25519_mul__distinct+0x16>
 80025a6:	ea28 75e8 	bic.w	r5, r8, r8, asr #31
 80025aa:	1c6c      	adds	r4, r5, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80025ac:	2c20      	cmp	r4, #32
 80025ae:	d00f      	beq.n	80025d0 <f25519_mul__distinct+0x50>
 80025b0:	ebc5 0608 	rsb	r6, r5, r8
 80025b4:	3620      	adds	r6, #32
 80025b6:	4416      	add	r6, r2
 80025b8:	440d      	add	r5, r1
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80025ba:	f816 7d01 	ldrb.w	r7, [r6, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80025be:	f815 cf01 	ldrb.w	ip, [r5, #1]!
 80025c2:	fb09 f707 	mul.w	r7, r9, r7

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80025c6:	3401      	adds	r4, #1
 80025c8:	2c20      	cmp	r4, #32
			c += ((uint32_t)a[j]) *
 80025ca:	fb0c 3307 	mla	r3, ip, r7, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80025ce:	d1f4      	bne.n	80025ba <f25519_mul__distinct+0x3a>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80025d0:	f800 3008 	strb.w	r3, [r0, r8]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80025d4:	f108 0801 	add.w	r8, r8, #1
 80025d8:	f1b8 0f20 	cmp.w	r8, #32
 80025dc:	d1d7      	bne.n	800258e <f25519_mul__distinct+0xe>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80025de:	7fc1      	ldrb	r1, [r0, #31]
	c = (c >> 7) * 19;
 80025e0:	09db      	lsrs	r3, r3, #7
 80025e2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80025e6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 80025ea:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80025ee:	77c1      	strb	r1, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80025f0:	2300      	movs	r3, #0
		c += r[i];
 80025f2:	5cc1      	ldrb	r1, [r0, r3]
 80025f4:	440a      	add	r2, r1
		r[i] = c;
 80025f6:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80025f8:	3301      	adds	r3, #1
 80025fa:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 80025fc:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002600:	d1f7      	bne.n	80025f2 <f25519_mul__distinct+0x72>
		c += r[i];
		r[i] = c;
		c >>= 8;
	}
}
 8002602:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8002606:	4770      	bx	lr

08002608 <f25519_inv__distinct>:
		c >>= 8;
	}
}

void f25519_inv__distinct(uint8_t *r, const uint8_t *x)
{
 8002608:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 800260c:	2600      	movs	r6, #0
		c >>= 8;
	}
}

void f25519_inv__distinct(uint8_t *r, const uint8_t *x)
{
 800260e:	b088      	sub	sp, #32
	}
}

void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
 8002610:	4633      	mov	r3, r6
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002612:	f04f 0826 	mov.w	r8, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002616:	0a1b      	lsrs	r3, r3, #8
 8002618:	1874      	adds	r4, r6, r1
		for (j = 0; j <= i; j++)
 800261a:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800261c:	5c8f      	ldrb	r7, [r1, r2]
 800261e:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002622:	3201      	adds	r2, #1
 8002624:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002626:	fb07 3305 	mla	r3, r7, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800262a:	ddf7      	ble.n	800261c <f25519_inv__distinct+0x14>
 800262c:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
 8002630:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002632:	2a20      	cmp	r2, #32
 8002634:	d00e      	beq.n	8002654 <f25519_inv__distinct+0x4c>
 8002636:	1b35      	subs	r5, r6, r4
 8002638:	3520      	adds	r5, #32
 800263a:	440d      	add	r5, r1
 800263c:	440c      	add	r4, r1
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 800263e:	f815 7d01 	ldrb.w	r7, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002642:	f814 cf01 	ldrb.w	ip, [r4, #1]!
 8002646:	fb08 f707 	mul.w	r7, r8, r7

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800264a:	3201      	adds	r2, #1
 800264c:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 800264e:	fb0c 3307 	mla	r3, ip, r7, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002652:	d1f4      	bne.n	800263e <f25519_inv__distinct+0x36>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002654:	f80d 3006 	strb.w	r3, [sp, r6]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002658:	3601      	adds	r6, #1
 800265a:	2e20      	cmp	r6, #32
 800265c:	d1db      	bne.n	8002616 <f25519_inv__distinct+0xe>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800265e:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002662:	09db      	lsrs	r3, r3, #7
 8002664:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002668:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 800266c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002670:	f88d 401f 	strb.w	r4, [sp, #31]
 8002674:	af08      	add	r7, sp, #32
	c = (c >> 7) * 19;
 8002676:	466b      	mov	r3, sp

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002678:	781c      	ldrb	r4, [r3, #0]
 800267a:	4422      	add	r2, r4
		r[i] = c;
 800267c:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002680:	42bb      	cmp	r3, r7
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002682:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002686:	d1f7      	bne.n	8002678 <f25519_inv__distinct+0x70>
 8002688:	2500      	movs	r5, #0
 800268a:	eb0d 0205 	add.w	r2, sp, r5
 800268e:	462b      	mov	r3, r5
 8002690:	f102 091f 	add.w	r9, r2, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002694:	f04f 0826 	mov.w	r8, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	194c      	adds	r4, r1, r5
		for (j = 0; j <= i; j++)
 800269c:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800269e:	f81d c002 	ldrb.w	ip, [sp, r2]
 80026a2:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80026a6:	3201      	adds	r2, #1
 80026a8:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80026aa:	fb0c 3306 	mla	r3, ip, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80026ae:	ddf6      	ble.n	800269e <f25519_inv__distinct+0x96>
 80026b0:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80026b4:	2a1f      	cmp	r2, #31
 80026b6:	d00e      	beq.n	80026d6 <f25519_inv__distinct+0xce>
 80026b8:	1aac      	subs	r4, r5, r2
 80026ba:	3420      	adds	r4, #32
 80026bc:	ae00      	add	r6, sp, #0
 80026be:	440c      	add	r4, r1
 80026c0:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80026c2:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80026c6:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 80026ca:	fb08 f606 	mul.w	r6, r8, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80026ce:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) *
 80026d0:	fb0c 3306 	mla	r3, ip, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80026d4:	d1f5      	bne.n	80026c2 <f25519_inv__distinct+0xba>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80026d6:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80026d8:	3501      	adds	r5, #1
 80026da:	2d20      	cmp	r5, #32
 80026dc:	d1dc      	bne.n	8002698 <f25519_inv__distinct+0x90>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80026de:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 80026e0:	09db      	lsrs	r3, r3, #7
 80026e2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80026e6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 80026ea:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80026ee:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80026f0:	2300      	movs	r3, #0
		c += r[i];
 80026f2:	5cc4      	ldrb	r4, [r0, r3]
 80026f4:	4422      	add	r2, r4
		r[i] = c;
 80026f6:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80026f8:	3301      	adds	r3, #1
 80026fa:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 80026fc:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002700:	d1f7      	bne.n	80026f2 <f25519_inv__distinct+0xea>
 8002702:	f04f 0cf8 	mov.w	ip, #248	; 0xf8
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002706:	2526      	movs	r5, #38	; 0x26
 8002708:	f10d 061f 	add.w	r6, sp, #31
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800270c:	f04f 0900 	mov.w	r9, #0
 8002710:	464b      	mov	r3, r9
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002712:	0a1b      	lsrs	r3, r3, #8
 8002714:	eb09 0400 	add.w	r4, r9, r0
		for (j = 0; j <= i; j++)
 8002718:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800271a:	f810 a002 	ldrb.w	sl, [r0, r2]
 800271e:	f814 8901 	ldrb.w	r8, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002722:	3201      	adds	r2, #1
 8002724:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002726:	fb0a 3308 	mla	r3, sl, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800272a:	ddf6      	ble.n	800271a <f25519_inv__distinct+0x112>
 800272c:	ea29 74e9 	bic.w	r4, r9, r9, asr #31
 8002730:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002732:	2a20      	cmp	r2, #32
 8002734:	d010      	beq.n	8002758 <f25519_inv__distinct+0x150>
 8002736:	ebc4 0809 	rsb	r8, r4, r9
 800273a:	f108 0820 	add.w	r8, r8, #32
 800273e:	4480      	add	r8, r0
 8002740:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002742:	f818 ad01 	ldrb.w	sl, [r8, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002746:	f814 bf01 	ldrb.w	fp, [r4, #1]!
 800274a:	fb05 fa0a 	mul.w	sl, r5, sl

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800274e:	3201      	adds	r2, #1
 8002750:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 8002752:	fb0b 330a 	mla	r3, fp, sl, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002756:	d1f4      	bne.n	8002742 <f25519_inv__distinct+0x13a>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002758:	f80d 3009 	strb.w	r3, [sp, r9]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 800275c:	f109 0901 	add.w	r9, r9, #1
 8002760:	f1b9 0f20 	cmp.w	r9, #32
 8002764:	d1d5      	bne.n	8002712 <f25519_inv__distinct+0x10a>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002766:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 800276a:	09db      	lsrs	r3, r3, #7
 800276c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002770:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002774:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002778:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 800277c:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 800277e:	781c      	ldrb	r4, [r3, #0]
 8002780:	4422      	add	r2, r4
		r[i] = c;
 8002782:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002786:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002788:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800278c:	d1f7      	bne.n	800277e <f25519_inv__distinct+0x176>
 800278e:	f04f 0900 	mov.w	r9, #0
 8002792:	464b      	mov	r3, r9
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	eb01 0409 	add.w	r4, r1, r9
		for (j = 0; j <= i; j++)
 800279a:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800279c:	f81d a002 	ldrb.w	sl, [sp, r2]
 80027a0:	f814 8901 	ldrb.w	r8, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80027a4:	3201      	adds	r2, #1
 80027a6:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80027a8:	fb0a 3308 	mla	r3, sl, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80027ac:	ddf6      	ble.n	800279c <f25519_inv__distinct+0x194>
 80027ae:	ea29 72e9 	bic.w	r2, r9, r9, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80027b2:	2a1f      	cmp	r2, #31
 80027b4:	d010      	beq.n	80027d8 <f25519_inv__distinct+0x1d0>
 80027b6:	ebc2 0409 	rsb	r4, r2, r9
 80027ba:	3420      	adds	r4, #32
 80027bc:	f10d 0800 	add.w	r8, sp, #0
 80027c0:	440c      	add	r4, r1
 80027c2:	4442      	add	r2, r8
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80027c4:	f814 8d01 	ldrb.w	r8, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80027c8:	f812 af01 	ldrb.w	sl, [r2, #1]!
 80027cc:	fb05 f808 	mul.w	r8, r5, r8

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80027d0:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) *
 80027d2:	fb0a 3308 	mla	r3, sl, r8, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80027d6:	d1f5      	bne.n	80027c4 <f25519_inv__distinct+0x1bc>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80027d8:	f800 3009 	strb.w	r3, [r0, r9]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80027dc:	f109 0901 	add.w	r9, r9, #1
 80027e0:	f1b9 0f20 	cmp.w	r9, #32
 80027e4:	d1d6      	bne.n	8002794 <f25519_inv__distinct+0x18c>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80027e6:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 80027e8:	09db      	lsrs	r3, r3, #7
 80027ea:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80027ee:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 80027f2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80027f6:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80027f8:	2300      	movs	r3, #0
		c += r[i];
 80027fa:	5cc4      	ldrb	r4, [r0, r3]
 80027fc:	4422      	add	r2, r4
		r[i] = c;
 80027fe:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002800:	3301      	adds	r3, #1
 8002802:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002804:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002808:	d1f7      	bne.n	80027fa <f25519_inv__distinct+0x1f2>
	/* 1 1 */
	f25519_mul__distinct(s, x, x);
	f25519_mul__distinct(r, s, x);

	/* 1 x 248 */
	for (i = 0; i < 248; i++) {
 800280a:	f1bc 0c01 	subs.w	ip, ip, #1
 800280e:	f47f af7d 	bne.w	800270c <f25519_inv__distinct+0x104>
 8002812:	4663      	mov	r3, ip
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002814:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002818:	0a1b      	lsrs	r3, r3, #8
 800281a:	eb00 040c 	add.w	r4, r0, ip
		for (j = 0; j <= i; j++)
 800281e:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002820:	5c86      	ldrb	r6, [r0, r2]
 8002822:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002826:	3201      	adds	r2, #1
 8002828:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800282a:	fb06 3305 	mla	r3, r6, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800282e:	ddf7      	ble.n	8002820 <f25519_inv__distinct+0x218>
 8002830:	ea2c 74ec 	bic.w	r4, ip, ip, asr #31
 8002834:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002836:	2a20      	cmp	r2, #32
 8002838:	d00f      	beq.n	800285a <f25519_inv__distinct+0x252>
 800283a:	ebc4 050c 	rsb	r5, r4, ip
 800283e:	3520      	adds	r5, #32
 8002840:	4405      	add	r5, r0
 8002842:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002844:	f815 6d01 	ldrb.w	r6, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002848:	f814 8f01 	ldrb.w	r8, [r4, #1]!
 800284c:	fb09 f606 	mul.w	r6, r9, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002850:	3201      	adds	r2, #1
 8002852:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 8002854:	fb08 3306 	mla	r3, r8, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002858:	d1f4      	bne.n	8002844 <f25519_inv__distinct+0x23c>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 800285a:	f80d 300c 	strb.w	r3, [sp, ip]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 800285e:	f10c 0c01 	add.w	ip, ip, #1
 8002862:	f1bc 0f20 	cmp.w	ip, #32
 8002866:	d1d7      	bne.n	8002818 <f25519_inv__distinct+0x210>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002868:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 800286c:	09db      	lsrs	r3, r3, #7
 800286e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002872:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002876:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800287a:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 800287e:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002880:	781c      	ldrb	r4, [r3, #0]
 8002882:	4422      	add	r2, r4
		r[i] = c;
 8002884:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002888:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 800288a:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800288e:	d1f7      	bne.n	8002880 <f25519_inv__distinct+0x278>
 8002890:	2500      	movs	r5, #0
 8002892:	eb0d 0205 	add.w	r2, sp, r5
 8002896:	462b      	mov	r3, r5
 8002898:	f102 091f 	add.w	r9, r2, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 800289c:	f04f 0826 	mov.w	r8, #38	; 0x26
 80028a0:	ac00      	add	r4, sp, #0
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	442c      	add	r4, r5
		for (j = 0; j <= i; j++)
 80028a6:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80028a8:	f81d c002 	ldrb.w	ip, [sp, r2]
 80028ac:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80028b0:	3201      	adds	r2, #1
 80028b2:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80028b4:	fb0c 3306 	mla	r3, ip, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80028b8:	ddf6      	ble.n	80028a8 <f25519_inv__distinct+0x2a0>
 80028ba:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80028be:	2a1f      	cmp	r2, #31
 80028c0:	d00e      	beq.n	80028e0 <f25519_inv__distinct+0x2d8>
 80028c2:	1aac      	subs	r4, r5, r2
 80028c4:	ae00      	add	r6, sp, #0
 80028c6:	3420      	adds	r4, #32
 80028c8:	4434      	add	r4, r6
 80028ca:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80028cc:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80028d0:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 80028d4:	fb08 f606 	mul.w	r6, r8, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80028d8:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) *
 80028da:	fb0c 3306 	mla	r3, ip, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80028de:	d1f5      	bne.n	80028cc <f25519_inv__distinct+0x2c4>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80028e0:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80028e2:	3501      	adds	r5, #1
 80028e4:	2d20      	cmp	r5, #32
 80028e6:	d1db      	bne.n	80028a0 <f25519_inv__distinct+0x298>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80028e8:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 80028ea:	09db      	lsrs	r3, r3, #7
 80028ec:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80028f0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 80028f4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80028f8:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80028fa:	2300      	movs	r3, #0
		c += r[i];
 80028fc:	5cc4      	ldrb	r4, [r0, r3]
 80028fe:	4422      	add	r2, r4
		r[i] = c;
 8002900:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002902:	3301      	adds	r3, #1
 8002904:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002906:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800290a:	d1f7      	bne.n	80028fc <f25519_inv__distinct+0x2f4>
 800290c:	2600      	movs	r6, #0
 800290e:	4633      	mov	r3, r6
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002910:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	198c      	adds	r4, r1, r6
		for (j = 0; j <= i; j++)
 8002918:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800291a:	f810 c002 	ldrb.w	ip, [r0, r2]
 800291e:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002922:	3201      	adds	r2, #1
 8002924:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002926:	fb0c 3305 	mla	r3, ip, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800292a:	ddf6      	ble.n	800291a <f25519_inv__distinct+0x312>
 800292c:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
 8002930:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002932:	2a20      	cmp	r2, #32
 8002934:	d00e      	beq.n	8002954 <f25519_inv__distinct+0x34c>
 8002936:	1b35      	subs	r5, r6, r4
 8002938:	3520      	adds	r5, #32
 800293a:	440d      	add	r5, r1
 800293c:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 800293e:	f815 cd01 	ldrb.w	ip, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002942:	f814 8f01 	ldrb.w	r8, [r4, #1]!
 8002946:	fb09 fc0c 	mul.w	ip, r9, ip

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800294a:	3201      	adds	r2, #1
 800294c:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 800294e:	fb08 330c 	mla	r3, r8, ip, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002952:	d1f4      	bne.n	800293e <f25519_inv__distinct+0x336>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002954:	f80d 3006 	strb.w	r3, [sp, r6]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002958:	3601      	adds	r6, #1
 800295a:	2e20      	cmp	r6, #32
 800295c:	d1da      	bne.n	8002914 <f25519_inv__distinct+0x30c>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800295e:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002962:	09db      	lsrs	r3, r3, #7
 8002964:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002968:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 800296c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002970:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002974:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002976:	781c      	ldrb	r4, [r3, #0]
 8002978:	4422      	add	r2, r4
		r[i] = c;
 800297a:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800297e:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002980:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002984:	d1f7      	bne.n	8002976 <f25519_inv__distinct+0x36e>
 8002986:	2500      	movs	r5, #0
 8002988:	eb0d 0805 	add.w	r8, sp, r5
 800298c:	f108 091f 	add.w	r9, r8, #31
 8002990:	462b      	mov	r3, r5
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002992:	f04f 0826 	mov.w	r8, #38	; 0x26
 8002996:	ac00      	add	r4, sp, #0
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002998:	0a1b      	lsrs	r3, r3, #8
 800299a:	442c      	add	r4, r5
		for (j = 0; j <= i; j++)
 800299c:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800299e:	f81d c002 	ldrb.w	ip, [sp, r2]
 80029a2:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80029a6:	3201      	adds	r2, #1
 80029a8:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80029aa:	fb0c 3306 	mla	r3, ip, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80029ae:	ddf6      	ble.n	800299e <f25519_inv__distinct+0x396>
 80029b0:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80029b4:	2a1f      	cmp	r2, #31
 80029b6:	d00e      	beq.n	80029d6 <f25519_inv__distinct+0x3ce>
 80029b8:	1aac      	subs	r4, r5, r2
 80029ba:	ae00      	add	r6, sp, #0
 80029bc:	3420      	adds	r4, #32
 80029be:	4434      	add	r4, r6
 80029c0:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80029c2:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80029c6:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 80029ca:	fb08 f606 	mul.w	r6, r8, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80029ce:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) *
 80029d0:	fb0c 3306 	mla	r3, ip, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80029d4:	d1f5      	bne.n	80029c2 <f25519_inv__distinct+0x3ba>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80029d6:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80029d8:	3501      	adds	r5, #1
 80029da:	2d20      	cmp	r5, #32
 80029dc:	d1db      	bne.n	8002996 <f25519_inv__distinct+0x38e>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80029de:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 80029e0:	09db      	lsrs	r3, r3, #7
 80029e2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80029e6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 80029ea:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80029ee:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80029f0:	2300      	movs	r3, #0
		c += r[i];
 80029f2:	5cc4      	ldrb	r4, [r0, r3]
 80029f4:	4422      	add	r2, r4
		r[i] = c;
 80029f6:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80029f8:	3301      	adds	r3, #1
 80029fa:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 80029fc:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002a00:	d1f7      	bne.n	80029f2 <f25519_inv__distinct+0x3ea>
 8002a02:	2600      	movs	r6, #0
 8002a04:	4633      	mov	r3, r6
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002a06:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	1984      	adds	r4, r0, r6
		for (j = 0; j <= i; j++)
 8002a0e:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002a10:	f810 c002 	ldrb.w	ip, [r0, r2]
 8002a14:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002a18:	3201      	adds	r2, #1
 8002a1a:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002a1c:	fb0c 3305 	mla	r3, ip, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002a20:	ddf6      	ble.n	8002a10 <f25519_inv__distinct+0x408>
 8002a22:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
 8002a26:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002a28:	2a20      	cmp	r2, #32
 8002a2a:	d00e      	beq.n	8002a4a <f25519_inv__distinct+0x442>
 8002a2c:	1b35      	subs	r5, r6, r4
 8002a2e:	3520      	adds	r5, #32
 8002a30:	4405      	add	r5, r0
 8002a32:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002a34:	f815 cd01 	ldrb.w	ip, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002a38:	f814 8f01 	ldrb.w	r8, [r4, #1]!
 8002a3c:	fb09 fc0c 	mul.w	ip, r9, ip

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002a40:	3201      	adds	r2, #1
 8002a42:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 8002a44:	fb08 330c 	mla	r3, r8, ip, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002a48:	d1f4      	bne.n	8002a34 <f25519_inv__distinct+0x42c>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002a4a:	f80d 3006 	strb.w	r3, [sp, r6]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002a4e:	3601      	adds	r6, #1
 8002a50:	2e20      	cmp	r6, #32
 8002a52:	d1da      	bne.n	8002a0a <f25519_inv__distinct+0x402>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002a54:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002a58:	09db      	lsrs	r3, r3, #7
 8002a5a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002a5e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002a62:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002a66:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002a6a:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002a6c:	781c      	ldrb	r4, [r3, #0]
 8002a6e:	4422      	add	r2, r4
		r[i] = c;
 8002a70:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002a74:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002a76:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002a7a:	d1f7      	bne.n	8002a6c <f25519_inv__distinct+0x464>
 8002a7c:	2500      	movs	r5, #0
 8002a7e:	eb0d 0805 	add.w	r8, sp, r5
 8002a82:	f108 091f 	add.w	r9, r8, #31
 8002a86:	462b      	mov	r3, r5
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002a88:	f04f 0826 	mov.w	r8, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	194c      	adds	r4, r1, r5
		for (j = 0; j <= i; j++)
 8002a90:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002a92:	f81d c002 	ldrb.w	ip, [sp, r2]
 8002a96:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002a9a:	3201      	adds	r2, #1
 8002a9c:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002a9e:	fb0c 3306 	mla	r3, ip, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002aa2:	ddf6      	ble.n	8002a92 <f25519_inv__distinct+0x48a>
 8002aa4:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002aa8:	2a1f      	cmp	r2, #31
 8002aaa:	d00e      	beq.n	8002aca <f25519_inv__distinct+0x4c2>
 8002aac:	1aac      	subs	r4, r5, r2
 8002aae:	3420      	adds	r4, #32
 8002ab0:	ae00      	add	r6, sp, #0
 8002ab2:	440c      	add	r4, r1
 8002ab4:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002ab6:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002aba:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 8002abe:	fb08 f606 	mul.w	r6, r8, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002ac2:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) *
 8002ac4:	fb0c 3306 	mla	r3, ip, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002ac8:	d1f5      	bne.n	8002ab6 <f25519_inv__distinct+0x4ae>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002aca:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002acc:	3501      	adds	r5, #1
 8002ace:	2d20      	cmp	r5, #32
 8002ad0:	d1dc      	bne.n	8002a8c <f25519_inv__distinct+0x484>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002ad2:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 8002ad4:	09db      	lsrs	r3, r3, #7
 8002ad6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002ada:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002ade:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002ae2:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002ae4:	2300      	movs	r3, #0
		c += r[i];
 8002ae6:	5cc4      	ldrb	r4, [r0, r3]
 8002ae8:	4422      	add	r2, r4
		r[i] = c;
 8002aea:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002aec:	3301      	adds	r3, #1
 8002aee:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002af0:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002af4:	d1f7      	bne.n	8002ae6 <f25519_inv__distinct+0x4de>
 8002af6:	2600      	movs	r6, #0
 8002af8:	4633      	mov	r3, r6
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002afa:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	1984      	adds	r4, r0, r6
		for (j = 0; j <= i; j++)
 8002b02:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002b04:	f810 c002 	ldrb.w	ip, [r0, r2]
 8002b08:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002b0c:	3201      	adds	r2, #1
 8002b0e:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002b10:	fb0c 3305 	mla	r3, ip, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002b14:	ddf6      	ble.n	8002b04 <f25519_inv__distinct+0x4fc>
 8002b16:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
 8002b1a:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002b1c:	2a20      	cmp	r2, #32
 8002b1e:	d00e      	beq.n	8002b3e <f25519_inv__distinct+0x536>
 8002b20:	1b35      	subs	r5, r6, r4
 8002b22:	3520      	adds	r5, #32
 8002b24:	4405      	add	r5, r0
 8002b26:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002b28:	f815 cd01 	ldrb.w	ip, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002b2c:	f814 8f01 	ldrb.w	r8, [r4, #1]!
 8002b30:	fb09 fc0c 	mul.w	ip, r9, ip

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002b34:	3201      	adds	r2, #1
 8002b36:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 8002b38:	fb08 330c 	mla	r3, r8, ip, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002b3c:	d1f4      	bne.n	8002b28 <f25519_inv__distinct+0x520>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002b3e:	f80d 3006 	strb.w	r3, [sp, r6]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002b42:	3601      	adds	r6, #1
 8002b44:	2e20      	cmp	r6, #32
 8002b46:	d1da      	bne.n	8002afe <f25519_inv__distinct+0x4f6>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002b48:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002b4c:	09db      	lsrs	r3, r3, #7
 8002b4e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002b52:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002b56:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002b5a:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002b5e:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002b60:	781c      	ldrb	r4, [r3, #0]
 8002b62:	4422      	add	r2, r4
		r[i] = c;
 8002b64:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002b68:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002b6a:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002b6e:	d1f7      	bne.n	8002b60 <f25519_inv__distinct+0x558>
 8002b70:	2500      	movs	r5, #0
 8002b72:	eb0d 0205 	add.w	r2, sp, r5
 8002b76:	462b      	mov	r3, r5
 8002b78:	f102 081f 	add.w	r8, r2, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002b7c:	f04f 0c26 	mov.w	ip, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	194c      	adds	r4, r1, r5
		for (j = 0; j <= i; j++)
 8002b84:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002b86:	f81d 7002 	ldrb.w	r7, [sp, r2]
 8002b8a:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002b8e:	3201      	adds	r2, #1
 8002b90:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002b92:	fb07 3306 	mla	r3, r7, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002b96:	ddf6      	ble.n	8002b86 <f25519_inv__distinct+0x57e>
 8002b98:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002b9c:	2a1f      	cmp	r2, #31
 8002b9e:	d00e      	beq.n	8002bbe <f25519_inv__distinct+0x5b6>
 8002ba0:	1aac      	subs	r4, r5, r2
 8002ba2:	3420      	adds	r4, #32
 8002ba4:	ae00      	add	r6, sp, #0
 8002ba6:	440c      	add	r4, r1
 8002ba8:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002baa:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002bae:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8002bb2:	fb0c f606 	mul.w	r6, ip, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002bb6:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002bb8:	fb07 3306 	mla	r3, r7, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002bbc:	d1f5      	bne.n	8002baa <f25519_inv__distinct+0x5a2>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002bbe:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002bc0:	3501      	adds	r5, #1
 8002bc2:	2d20      	cmp	r5, #32
 8002bc4:	d1dc      	bne.n	8002b80 <f25519_inv__distinct+0x578>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002bc6:	7fc1      	ldrb	r1, [r0, #31]
	c = (c >> 7) * 19;
 8002bc8:	09db      	lsrs	r3, r3, #7
 8002bca:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002bce:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002bd2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002bd6:	77c1      	strb	r1, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002bd8:	2300      	movs	r3, #0
		c += r[i];
 8002bda:	5cc1      	ldrb	r1, [r0, r3]
 8002bdc:	440a      	add	r2, r1
		r[i] = c;
 8002bde:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002be0:	3301      	adds	r3, #1
 8002be2:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002be4:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002be8:	d1f7      	bne.n	8002bda <f25519_inv__distinct+0x5d2>
	f25519_mul__distinct(r, s, x);

	/* 1 */
	f25519_mul__distinct(s, r, r);
	f25519_mul__distinct(r, s, x);
}
 8002bea:	b008      	add	sp, #32
 8002bec:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop

08002bf4 <f25519_sqrt>:
	f25519_mul__distinct(s, r, r);
	f25519_mul__distinct(r, s, x);
}

void f25519_sqrt(uint8_t *r, const uint8_t *a)
{
 8002bf4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
void f25519_mul_c(uint8_t *r, const uint8_t *a, uint32_t b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002bf8:	2300      	movs	r3, #0
	f25519_mul__distinct(s, r, r);
	f25519_mul__distinct(r, s, x);
}

void f25519_sqrt(uint8_t *r, const uint8_t *a)
{
 8002bfa:	b0a4      	sub	sp, #144	; 0x90
 8002bfc:	9002      	str	r0, [sp, #8]
 8002bfe:	9103      	str	r1, [sp, #12]
	f25519_copy(r, tmp);
}

void f25519_mul_c(uint8_t *r, const uint8_t *a, uint32_t b)
{
	uint32_t c = 0;
 8002c00:	461a      	mov	r2, r3
 8002c02:	ae14      	add	r6, sp, #80	; 0x50
 8002c04:	4608      	mov	r0, r1
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		c >>= 8;
		c += b * ((uint32_t)a[i]);
 8002c06:	5cc1      	ldrb	r1, [r0, r3]
 8002c08:	0049      	lsls	r1, r1, #1
 8002c0a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
		r[i] = c;
 8002c0e:	54f2      	strb	r2, [r6, r3]
void f25519_mul_c(uint8_t *r, const uint8_t *a, uint32_t b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002c10:	3301      	adds	r3, #1
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d1f7      	bne.n	8002c06 <f25519_sqrt+0x12>
		c >>= 8;
		c += b * ((uint32_t)a[i]);
		r[i] = c;
	}

	r[31] &= 127;
 8002c16:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
	c >>= 7;
 8002c1a:	09d2      	lsrs	r2, r2, #7
		c >>= 8;
		c += b * ((uint32_t)a[i]);
		r[i] = c;
	}

	r[31] &= 127;
 8002c1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	c >>= 7;
	c *= 19;
 8002c20:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
		c >>= 8;
		c += b * ((uint32_t)a[i]);
		r[i] = c;
	}

	r[31] &= 127;
 8002c24:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
	c >>= 7;
	c *= 19;
 8002c28:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8002c2c:	a81c      	add	r0, sp, #112	; 0x70
 8002c2e:	4633      	mov	r3, r6

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002c30:	7819      	ldrb	r1, [r3, #0]
 8002c32:	440a      	add	r2, r1
		r[i] = c;
 8002c34:	f803 2b01 	strb.w	r2, [r3], #1

	r[31] &= 127;
	c >>= 7;
	c *= 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002c38:	4283      	cmp	r3, r0
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002c3a:	ea4f 2212 	mov.w	r2, r2, lsr #8

	r[31] &= 127;
	c >>= 7;
	c *= 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002c3e:	d1f7      	bne.n	8002c30 <f25519_sqrt+0x3c>
 8002c40:	2400      	movs	r4, #0
 8002c42:	4623      	mov	r3, r4
 8002c44:	f106 0c1f 	add.w	ip, r6, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002c48:	2726      	movs	r7, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002c4a:	0a1b      	lsrs	r3, r3, #8
 8002c4c:	1931      	adds	r1, r6, r4
		for (j = 0; j <= i; j++)
 8002c4e:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002c50:	f816 8002 	ldrb.w	r8, [r6, r2]
 8002c54:	f811 5901 	ldrb.w	r5, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002c58:	3201      	adds	r2, #1
 8002c5a:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002c5c:	fb08 3305 	mla	r3, r8, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002c60:	ddf6      	ble.n	8002c50 <f25519_sqrt+0x5c>
 8002c62:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002c66:	2a1f      	cmp	r2, #31
 8002c68:	d00d      	beq.n	8002c86 <f25519_sqrt+0x92>
 8002c6a:	1aa1      	subs	r1, r4, r2
 8002c6c:	3120      	adds	r1, #32
 8002c6e:	4431      	add	r1, r6
 8002c70:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002c72:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002c76:	f812 8f01 	ldrb.w	r8, [r2, #1]!
 8002c7a:	fb07 f505 	mul.w	r5, r7, r5

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002c7e:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) *
 8002c80:	fb08 3305 	mla	r3, r8, r5, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002c84:	d1f5      	bne.n	8002c72 <f25519_sqrt+0x7e>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002c86:	a904      	add	r1, sp, #16
 8002c88:	550b      	strb	r3, [r1, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002c8a:	3401      	adds	r4, #1
 8002c8c:	2c20      	cmp	r4, #32
 8002c8e:	d1dc      	bne.n	8002c4a <f25519_sqrt+0x56>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002c90:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002c94:	09db      	lsrs	r3, r3, #7
 8002c96:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002c9a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002c9e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002ca2:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8002ca6:	af0c      	add	r7, sp, #48	; 0x30
	c = (c >> 7) * 19;
 8002ca8:	ab04      	add	r3, sp, #16

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002caa:	7819      	ldrb	r1, [r3, #0]
 8002cac:	440a      	add	r2, r1
		r[i] = c;
 8002cae:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002cb2:	42bb      	cmp	r3, r7
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002cb4:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002cb8:	d1f7      	bne.n	8002caa <f25519_sqrt+0xb6>
 8002cba:	2400      	movs	r4, #0
 8002cbc:	4623      	mov	r3, r4
 8002cbe:	f10d 0c2f 	add.w	ip, sp, #47	; 0x2f
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002cc2:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002cc4:	0a1b      	lsrs	r3, r3, #8
 8002cc6:	1931      	adds	r1, r6, r4
		for (j = 0; j <= i; j++)
 8002cc8:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002cca:	f10d 0a10 	add.w	sl, sp, #16
 8002cce:	f81a 9002 	ldrb.w	r9, [sl, r2]
 8002cd2:	f811 8901 	ldrb.w	r8, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002cd6:	3201      	adds	r2, #1
 8002cd8:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002cda:	fb09 3308 	mla	r3, r9, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002cde:	ddf4      	ble.n	8002cca <f25519_sqrt+0xd6>
 8002ce0:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002ce4:	2a1f      	cmp	r2, #31
 8002ce6:	d00d      	beq.n	8002d04 <f25519_sqrt+0x110>
 8002ce8:	1aa1      	subs	r1, r4, r2
 8002cea:	3120      	adds	r1, #32
 8002cec:	4431      	add	r1, r6
 8002cee:	4452      	add	r2, sl
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002cf0:	f811 8d01 	ldrb.w	r8, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002cf4:	f812 9f01 	ldrb.w	r9, [r2, #1]!
 8002cf8:	fb05 f808 	mul.w	r8, r5, r8

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002cfc:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) *
 8002cfe:	fb09 3308 	mla	r3, r9, r8, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002d02:	d1f5      	bne.n	8002cf0 <f25519_sqrt+0xfc>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002d04:	5503      	strb	r3, [r0, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002d06:	3401      	adds	r4, #1
 8002d08:	2c20      	cmp	r4, #32
 8002d0a:	d1db      	bne.n	8002cc4 <f25519_sqrt+0xd0>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002d0c:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002d10:	09db      	lsrs	r3, r3, #7
 8002d12:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002d16:	f10d 0b90 	add.w	fp, sp, #144	; 0x90
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002d1a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002d1e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002d22:	f88d 108f 	strb.w	r1, [sp, #143]	; 0x8f
 8002d26:	f8cd b000 	str.w	fp, [sp]
	c = (c >> 7) * 19;
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	46dc      	mov	ip, fp

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002d2e:	7819      	ldrb	r1, [r3, #0]
 8002d30:	440a      	add	r2, r1
		r[i] = c;
 8002d32:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002d36:	4563      	cmp	r3, ip
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002d38:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002d3c:	d1f7      	bne.n	8002d2e <f25519_sqrt+0x13a>
 8002d3e:	21f8      	movs	r1, #248	; 0xf8
 8002d40:	9101      	str	r1, [sp, #4]
 8002d42:	f100 051f 	add.w	r5, r0, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002d46:	2126      	movs	r1, #38	; 0x26
 8002d48:	f10d 042f 	add.w	r4, sp, #47	; 0x2f

		r[i] = c;
	}

	r[31] &= 127;
	c = (c >> 7) * 19;
 8002d4c:	f04f 0900 	mov.w	r9, #0
 8002d50:	464b      	mov	r3, r9
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002d52:	0a1b      	lsrs	r3, r3, #8
 8002d54:	eb00 0809 	add.w	r8, r0, r9
		for (j = 0; j <= i; j++)
 8002d58:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002d5a:	f810 b002 	ldrb.w	fp, [r0, r2]
 8002d5e:	f818 a901 	ldrb.w	sl, [r8], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002d62:	3201      	adds	r2, #1
 8002d64:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002d66:	fb0b 330a 	mla	r3, fp, sl, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002d6a:	ddf6      	ble.n	8002d5a <f25519_sqrt+0x166>
 8002d6c:	ea29 72e9 	bic.w	r2, r9, r9, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002d70:	2a1f      	cmp	r2, #31
 8002d72:	d00f      	beq.n	8002d94 <f25519_sqrt+0x1a0>
 8002d74:	ebc2 0809 	rsb	r8, r2, r9
 8002d78:	f108 0820 	add.w	r8, r8, #32
 8002d7c:	4480      	add	r8, r0
 8002d7e:	4402      	add	r2, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002d80:	f818 ad01 	ldrb.w	sl, [r8, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002d84:	f812 bf01 	ldrb.w	fp, [r2, #1]!
 8002d88:	fb01 fa0a 	mul.w	sl, r1, sl

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002d8c:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) *
 8002d8e:	fb0b 330a 	mla	r3, fp, sl, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002d92:	d1f5      	bne.n	8002d80 <f25519_sqrt+0x18c>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002d94:	f10d 0810 	add.w	r8, sp, #16
 8002d98:	f808 3009 	strb.w	r3, [r8, r9]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002d9c:	f109 0901 	add.w	r9, r9, #1
 8002da0:	f1b9 0f20 	cmp.w	r9, #32
 8002da4:	d1d5      	bne.n	8002d52 <f25519_sqrt+0x15e>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002da6:	f89d 802f 	ldrb.w	r8, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002daa:	09db      	lsrs	r3, r3, #7
 8002dac:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002db0:	f008 087f 	and.w	r8, r8, #127	; 0x7f
	c = (c >> 7) * 19;
 8002db4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002db8:	f88d 802f 	strb.w	r8, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002dbc:	ab04      	add	r3, sp, #16

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002dbe:	f893 8000 	ldrb.w	r8, [r3]
 8002dc2:	4442      	add	r2, r8
		r[i] = c;
 8002dc4:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002dc8:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002dca:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002dce:	d1f6      	bne.n	8002dbe <f25519_sqrt+0x1ca>
 8002dd0:	f04f 0900 	mov.w	r9, #0
 8002dd4:	464b      	mov	r3, r9
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002dd6:	0a1b      	lsrs	r3, r3, #8
 8002dd8:	eb06 0809 	add.w	r8, r6, r9
		for (j = 0; j <= i; j++)
 8002ddc:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002dde:	f10d 0c10 	add.w	ip, sp, #16
 8002de2:	f81c b002 	ldrb.w	fp, [ip, r2]
 8002de6:	f818 a901 	ldrb.w	sl, [r8], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002dea:	3201      	adds	r2, #1
 8002dec:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002dee:	fb0b 330a 	mla	r3, fp, sl, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002df2:	ddf4      	ble.n	8002dde <f25519_sqrt+0x1ea>
 8002df4:	ea29 72e9 	bic.w	r2, r9, r9, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002df8:	2a1f      	cmp	r2, #31
 8002dfa:	d00f      	beq.n	8002e1c <f25519_sqrt+0x228>
 8002dfc:	ebc2 0809 	rsb	r8, r2, r9
 8002e00:	f108 0820 	add.w	r8, r8, #32
 8002e04:	44b0      	add	r8, r6
 8002e06:	4462      	add	r2, ip
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002e08:	f818 ad01 	ldrb.w	sl, [r8, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002e0c:	f812 bf01 	ldrb.w	fp, [r2, #1]!
 8002e10:	fb01 fa0a 	mul.w	sl, r1, sl

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002e14:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) *
 8002e16:	fb0b 330a 	mla	r3, fp, sl, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002e1a:	d1f5      	bne.n	8002e08 <f25519_sqrt+0x214>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002e1c:	f800 3009 	strb.w	r3, [r0, r9]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002e20:	f109 0901 	add.w	r9, r9, #1
 8002e24:	f1b9 0f20 	cmp.w	r9, #32
 8002e28:	d1d5      	bne.n	8002dd6 <f25519_sqrt+0x1e2>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002e2a:	f89d 808f 	ldrb.w	r8, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002e2e:	09db      	lsrs	r3, r3, #7
 8002e30:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002e34:	f008 087f 	and.w	r8, r8, #127	; 0x7f
	c = (c >> 7) * 19;
 8002e38:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002e3c:	f88d 808f 	strb.w	r8, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002e40:	4603      	mov	r3, r0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002e42:	f893 8000 	ldrb.w	r8, [r3]
 8002e46:	4442      	add	r2, r8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002e48:	f8dd 8000 	ldr.w	r8, [sp]
		c += r[i];
		r[i] = c;
 8002e4c:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002e50:	4598      	cmp	r8, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002e52:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002e56:	d1f4      	bne.n	8002e42 <f25519_sqrt+0x24e>
	/* 1 1 */
	f25519_mul__distinct(r, x, x);
	f25519_mul__distinct(s, r, x);

	/* 1 x 248 */
	for (i = 0; i < 248; i++) {
 8002e58:	9a01      	ldr	r2, [sp, #4]
 8002e5a:	3a01      	subs	r2, #1
 8002e5c:	9201      	str	r2, [sp, #4]
 8002e5e:	f47f af75 	bne.w	8002d4c <f25519_sqrt+0x158>
 8002e62:	4614      	mov	r4, r2
 8002e64:	4613      	mov	r3, r2
 8002e66:	f100 081f 	add.w	r8, r0, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002e6a:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	1901      	adds	r1, r0, r4
		for (j = 0; j <= i; j++)
 8002e70:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002e72:	f810 a002 	ldrb.w	sl, [r0, r2]
 8002e76:	f811 9901 	ldrb.w	r9, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002e7a:	3201      	adds	r2, #1
 8002e7c:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002e7e:	fb0a 3309 	mla	r3, sl, r9, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002e82:	ddf6      	ble.n	8002e72 <f25519_sqrt+0x27e>
 8002e84:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002e88:	2a1f      	cmp	r2, #31
 8002e8a:	d00d      	beq.n	8002ea8 <f25519_sqrt+0x2b4>
 8002e8c:	1aa1      	subs	r1, r4, r2
 8002e8e:	3120      	adds	r1, #32
 8002e90:	4401      	add	r1, r0
 8002e92:	4402      	add	r2, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002e94:	f811 9d01 	ldrb.w	r9, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002e98:	f812 af01 	ldrb.w	sl, [r2, #1]!
 8002e9c:	fb05 f909 	mul.w	r9, r5, r9

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002ea0:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002ea2:	fb0a 3309 	mla	r3, sl, r9, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002ea6:	d1f5      	bne.n	8002e94 <f25519_sqrt+0x2a0>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002ea8:	f10d 0a10 	add.w	sl, sp, #16
 8002eac:	f80a 3004 	strb.w	r3, [sl, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002eb0:	3401      	adds	r4, #1
 8002eb2:	2c20      	cmp	r4, #32
 8002eb4:	d1da      	bne.n	8002e6c <f25519_sqrt+0x278>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002eb6:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002eba:	09db      	lsrs	r3, r3, #7
 8002ebc:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002ec0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002ec4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002ec8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002ecc:	4653      	mov	r3, sl

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002ece:	7819      	ldrb	r1, [r3, #0]
 8002ed0:	440a      	add	r2, r1
		r[i] = c;
 8002ed2:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002ed6:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002ed8:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002edc:	d1f7      	bne.n	8002ece <f25519_sqrt+0x2da>
 8002ede:	2400      	movs	r4, #0
 8002ee0:	4623      	mov	r3, r4
 8002ee2:	f10d 082f 	add.w	r8, sp, #47	; 0x2f
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002ee6:	2526      	movs	r5, #38	; 0x26
 8002ee8:	a904      	add	r1, sp, #16
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002eea:	0a1b      	lsrs	r3, r3, #8
 8002eec:	4421      	add	r1, r4
		for (j = 0; j <= i; j++)
 8002eee:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002ef0:	f10d 0c10 	add.w	ip, sp, #16
 8002ef4:	f81c a002 	ldrb.w	sl, [ip, r2]
 8002ef8:	f811 9901 	ldrb.w	r9, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002efc:	3201      	adds	r2, #1
 8002efe:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002f00:	fb0a 3309 	mla	r3, sl, r9, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002f04:	ddf4      	ble.n	8002ef0 <f25519_sqrt+0x2fc>
 8002f06:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f0a:	2a1f      	cmp	r2, #31
 8002f0c:	d00d      	beq.n	8002f2a <f25519_sqrt+0x336>
 8002f0e:	1aa1      	subs	r1, r4, r2
 8002f10:	3120      	adds	r1, #32
 8002f12:	4461      	add	r1, ip
 8002f14:	4462      	add	r2, ip
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002f16:	f811 9d01 	ldrb.w	r9, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002f1a:	f812 af01 	ldrb.w	sl, [r2, #1]!
 8002f1e:	fb05 f909 	mul.w	r9, r5, r9

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f22:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002f24:	fb0a 3309 	mla	r3, sl, r9, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f28:	d1f5      	bne.n	8002f16 <f25519_sqrt+0x322>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002f2a:	5503      	strb	r3, [r0, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002f2c:	3401      	adds	r4, #1
 8002f2e:	2c20      	cmp	r4, #32
 8002f30:	d1da      	bne.n	8002ee8 <f25519_sqrt+0x2f4>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002f32:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002f36:	09db      	lsrs	r3, r3, #7
 8002f38:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002f3c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002f40:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002f44:	f88d 108f 	strb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002f48:	4603      	mov	r3, r0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002f4a:	7819      	ldrb	r1, [r3, #0]
 8002f4c:	440a      	add	r2, r1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002f4e:	9900      	ldr	r1, [sp, #0]
		c += r[i];
		r[i] = c;
 8002f50:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002f54:	4299      	cmp	r1, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002f56:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002f5a:	d1f6      	bne.n	8002f4a <f25519_sqrt+0x356>
 8002f5c:	2400      	movs	r4, #0
 8002f5e:	4623      	mov	r3, r4
 8002f60:	f100 081f 	add.w	r8, r0, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002f64:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	1931      	adds	r1, r6, r4
		for (j = 0; j <= i; j++)
 8002f6a:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002f6c:	f810 a002 	ldrb.w	sl, [r0, r2]
 8002f70:	f811 9901 	ldrb.w	r9, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002f74:	3201      	adds	r2, #1
 8002f76:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002f78:	fb0a 3309 	mla	r3, sl, r9, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002f7c:	ddf6      	ble.n	8002f6c <f25519_sqrt+0x378>
 8002f7e:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f82:	2a1f      	cmp	r2, #31
 8002f84:	d00d      	beq.n	8002fa2 <f25519_sqrt+0x3ae>
 8002f86:	1aa1      	subs	r1, r4, r2
 8002f88:	3120      	adds	r1, #32
 8002f8a:	4431      	add	r1, r6
 8002f8c:	4402      	add	r2, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002f8e:	f811 9d01 	ldrb.w	r9, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002f92:	f812 af01 	ldrb.w	sl, [r2, #1]!
 8002f96:	fb05 f909 	mul.w	r9, r5, r9

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f9a:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002f9c:	fb0a 3309 	mla	r3, sl, r9, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002fa0:	d1f5      	bne.n	8002f8e <f25519_sqrt+0x39a>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002fa2:	aa04      	add	r2, sp, #16
 8002fa4:	5513      	strb	r3, [r2, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002fa6:	3401      	adds	r4, #1
 8002fa8:	2c20      	cmp	r4, #32
 8002faa:	d1dc      	bne.n	8002f66 <f25519_sqrt+0x372>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002fac:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002fb0:	09db      	lsrs	r3, r3, #7
 8002fb2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002fb6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002fba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002fbe:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002fc2:	ab04      	add	r3, sp, #16

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002fc4:	7819      	ldrb	r1, [r3, #0]
 8002fc6:	440a      	add	r2, r1
		r[i] = c;
 8002fc8:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002fcc:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002fce:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002fd2:	d1f7      	bne.n	8002fc4 <f25519_sqrt+0x3d0>
 8002fd4:	2400      	movs	r4, #0
 8002fd6:	4623      	mov	r3, r4
 8002fd8:	f10d 082f 	add.w	r8, sp, #47	; 0x2f
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002fdc:	2526      	movs	r5, #38	; 0x26
 8002fde:	a904      	add	r1, sp, #16
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002fe0:	0a1b      	lsrs	r3, r3, #8
 8002fe2:	4421      	add	r1, r4
		for (j = 0; j <= i; j++)
 8002fe4:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002fe6:	f10d 0b10 	add.w	fp, sp, #16
 8002fea:	f81b a002 	ldrb.w	sl, [fp, r2]
 8002fee:	f811 9901 	ldrb.w	r9, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002ff2:	3201      	adds	r2, #1
 8002ff4:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002ff6:	fb0a 3309 	mla	r3, sl, r9, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002ffa:	ddf4      	ble.n	8002fe6 <f25519_sqrt+0x3f2>
 8002ffc:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8003000:	2a1f      	cmp	r2, #31
 8003002:	d00d      	beq.n	8003020 <f25519_sqrt+0x42c>
 8003004:	1aa1      	subs	r1, r4, r2
 8003006:	3120      	adds	r1, #32
 8003008:	4459      	add	r1, fp
 800300a:	445a      	add	r2, fp
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 800300c:	f811 9d01 	ldrb.w	r9, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8003010:	f812 af01 	ldrb.w	sl, [r2, #1]!
 8003014:	fb05 f909 	mul.w	r9, r5, r9

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8003018:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 800301a:	fb0a 3309 	mla	r3, sl, r9, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800301e:	d1f5      	bne.n	800300c <f25519_sqrt+0x418>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8003020:	5503      	strb	r3, [r0, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8003022:	3401      	adds	r4, #1
 8003024:	2c20      	cmp	r4, #32
 8003026:	d1da      	bne.n	8002fde <f25519_sqrt+0x3ea>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8003028:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 800302c:	09db      	lsrs	r3, r3, #7
 800302e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8003032:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003036:	f8dd c000 	ldr.w	ip, [sp]
	c = (c >> 7) * 19;
 800303a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800303e:	f88d 108f 	strb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8003042:	4603      	mov	r3, r0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8003044:	7819      	ldrb	r1, [r3, #0]
 8003046:	440a      	add	r2, r1
		r[i] = c;
 8003048:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800304c:	459c      	cmp	ip, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 800304e:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8003052:	d1f7      	bne.n	8003044 <f25519_sqrt+0x450>
 8003054:	2400      	movs	r4, #0
 8003056:	4623      	mov	r3, r4
 8003058:	f106 0c1f 	add.w	ip, r6, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 800305c:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 800305e:	0a1b      	lsrs	r3, r3, #8
 8003060:	1901      	adds	r1, r0, r4
		for (j = 0; j <= i; j++)
 8003062:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8003064:	f816 9002 	ldrb.w	r9, [r6, r2]
 8003068:	f811 8901 	ldrb.w	r8, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800306c:	3201      	adds	r2, #1
 800306e:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8003070:	fb09 3308 	mla	r3, r9, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8003074:	ddf6      	ble.n	8003064 <f25519_sqrt+0x470>
 8003076:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800307a:	2a1f      	cmp	r2, #31
 800307c:	d00d      	beq.n	800309a <f25519_sqrt+0x4a6>
 800307e:	1aa1      	subs	r1, r4, r2
 8003080:	3120      	adds	r1, #32
 8003082:	4401      	add	r1, r0
 8003084:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8003086:	f811 8d01 	ldrb.w	r8, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 800308a:	f812 9f01 	ldrb.w	r9, [r2, #1]!
 800308e:	fb05 f808 	mul.w	r8, r5, r8

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8003092:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) *
 8003094:	fb09 3308 	mla	r3, r9, r8, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8003098:	d1f5      	bne.n	8003086 <f25519_sqrt+0x492>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 800309a:	553b      	strb	r3, [r7, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 800309c:	3401      	adds	r4, #1
 800309e:	2c20      	cmp	r4, #32
 80030a0:	d1dd      	bne.n	800305e <f25519_sqrt+0x46a>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80030a2:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
	c = (c >> 7) * 19;
 80030a6:	09db      	lsrs	r3, r3, #7
 80030a8:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80030ac:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 80030b0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80030b4:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
	c = (c >> 7) * 19;
 80030b8:	463b      	mov	r3, r7

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 80030ba:	7819      	ldrb	r1, [r3, #0]
 80030bc:	440a      	add	r2, r1
		r[i] = c;
 80030be:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80030c2:	42b3      	cmp	r3, r6
		c += r[i];
		r[i] = c;
		c >>= 8;
 80030c4:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80030c8:	d1f7      	bne.n	80030ba <f25519_sqrt+0x4c6>
 80030ca:	2300      	movs	r3, #0
void f25519_load(uint8_t *x, uint32_t c)
{
	int i;

	for (i = 0; i < sizeof(c); i++) {
		x[i] = c;
 80030cc:	2201      	movs	r2, #1
 80030ce:	921c      	str	r2, [sp, #112]	; 0x70
 80030d0:	931d      	str	r3, [sp, #116]	; 0x74
 80030d2:	931e      	str	r3, [sp, #120]	; 0x78
 80030d4:	931f      	str	r3, [sp, #124]	; 0x7c
 80030d6:	9320      	str	r3, [sp, #128]	; 0x80
 80030d8:	9321      	str	r3, [sp, #132]	; 0x84
 80030da:	9322      	str	r3, [sp, #136]	; 0x88
 80030dc:	9323      	str	r3, [sp, #140]	; 0x8c
 80030de:	22da      	movs	r2, #218	; 0xda
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
 80030e0:	5cfc      	ldrb	r4, [r7, r3]
 80030e2:	5cc1      	ldrb	r1, [r0, r3]
 80030e4:	f504 447f 	add.w	r4, r4, #65280	; 0xff00
 80030e8:	1a61      	subs	r1, r4, r1
 80030ea:	440a      	add	r2, r1
		r[i] = c;
 80030ec:	54fa      	strb	r2, [r7, r3]
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 80030ee:	3301      	adds	r3, #1
 80030f0:	2b1f      	cmp	r3, #31
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
 80030f2:	ea4f 2212 	mov.w	r2, r2, lsr #8
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 80030f6:	d1f3      	bne.n	80030e0 <f25519_sqrt+0x4ec>
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
 80030f8:	f89d 404f 	ldrb.w	r4, [sp, #79]	; 0x4f
 80030fc:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
	r[31] = c & 127;
	c = (c >> 7) * 19;
 8003100:	463b      	mov	r3, r7
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
 8003102:	1a61      	subs	r1, r4, r1
 8003104:	4411      	add	r1, r2
	r[31] = c & 127;
	c = (c >> 7) * 19;
 8003106:	09ca      	lsrs	r2, r1, #7
 8003108:	eb02 04c2 	add.w	r4, r2, r2, lsl #3
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
 800310c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003110:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
	c = (c >> 7) * 19;
 8003114:	eb02 0244 	add.w	r2, r2, r4, lsl #1

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8003118:	7819      	ldrb	r1, [r3, #0]
 800311a:	440a      	add	r2, r1
		r[i] = c;
 800311c:	f803 2b01 	strb.w	r2, [r3], #1

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8003120:	429e      	cmp	r6, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8003122:	ea4f 2212 	mov.w	r2, r2, lsr #8

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8003126:	d1f7      	bne.n	8003118 <f25519_sqrt+0x524>
 8003128:	2400      	movs	r4, #0
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 800312a:	f8dd 900c 	ldr.w	r9, [sp, #12]

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800312e:	4623      	mov	r3, r4
 8003130:	f10d 0c2f 	add.w	ip, sp, #47	; 0x2f
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8003134:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	eb09 0104 	add.w	r1, r9, r4
		for (j = 0; j <= i; j++)
 800313c:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800313e:	f10d 0b10 	add.w	fp, sp, #16
 8003142:	f81b a002 	ldrb.w	sl, [fp, r2]
 8003146:	f811 8901 	ldrb.w	r8, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800314a:	3201      	adds	r2, #1
 800314c:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800314e:	fb0a 3308 	mla	r3, sl, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8003152:	ddf4      	ble.n	800313e <f25519_sqrt+0x54a>
 8003154:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8003158:	2a1f      	cmp	r2, #31
 800315a:	d00d      	beq.n	8003178 <f25519_sqrt+0x584>
 800315c:	1aa1      	subs	r1, r4, r2
 800315e:	3120      	adds	r1, #32
 8003160:	4449      	add	r1, r9
 8003162:	445a      	add	r2, fp
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8003164:	f811 8d01 	ldrb.w	r8, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8003168:	f812 af01 	ldrb.w	sl, [r2, #1]!
 800316c:	fb05 f808 	mul.w	r8, r5, r8

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8003170:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) *
 8003172:	fb0a 3308 	mla	r3, sl, r8, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8003176:	d1f5      	bne.n	8003164 <f25519_sqrt+0x570>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8003178:	5533      	strb	r3, [r6, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 800317a:	3401      	adds	r4, #1
 800317c:	2c20      	cmp	r4, #32
 800317e:	d1da      	bne.n	8003136 <f25519_sqrt+0x542>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8003180:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
	c = (c >> 7) * 19;
 8003184:	09db      	lsrs	r3, r3, #7
 8003186:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800318a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 800318e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8003192:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
	c = (c >> 7) * 19;
 8003196:	4633      	mov	r3, r6

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8003198:	7819      	ldrb	r1, [r3, #0]
 800319a:	440a      	add	r2, r1
		r[i] = c;
 800319c:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80031a0:	4298      	cmp	r0, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 80031a2:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80031a6:	d1f7      	bne.n	8003198 <f25519_sqrt+0x5a4>
 80031a8:	2000      	movs	r0, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	f106 081f 	add.w	r8, r6, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80031b0:	f04f 0c26 	mov.w	ip, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 80031b4:	0a1b      	lsrs	r3, r3, #8
 80031b6:	1839      	adds	r1, r7, r0
		for (j = 0; j <= i; j++)
 80031b8:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80031ba:	5cb5      	ldrb	r5, [r6, r2]
 80031bc:	f811 4901 	ldrb.w	r4, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80031c0:	3201      	adds	r2, #1
 80031c2:	4282      	cmp	r2, r0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80031c4:	fb05 3304 	mla	r3, r5, r4, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80031c8:	ddf7      	ble.n	80031ba <f25519_sqrt+0x5c6>
 80031ca:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80031ce:	2a1f      	cmp	r2, #31
 80031d0:	d00d      	beq.n	80031ee <f25519_sqrt+0x5fa>
 80031d2:	1a81      	subs	r1, r0, r2
 80031d4:	3120      	adds	r1, #32
 80031d6:	4439      	add	r1, r7
 80031d8:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80031da:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80031de:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80031e2:	fb0c f404 	mul.w	r4, ip, r4

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80031e6:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 80031e8:	fb05 3304 	mla	r3, r5, r4, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80031ec:	d1f5      	bne.n	80031da <f25519_sqrt+0x5e6>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80031ee:	9a02      	ldr	r2, [sp, #8]
 80031f0:	5413      	strb	r3, [r2, r0]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80031f2:	3001      	adds	r0, #1
 80031f4:	2820      	cmp	r0, #32
 80031f6:	d1dd      	bne.n	80031b4 <f25519_sqrt+0x5c0>

		r[i] = c;
	}

	r[31] &= 127;
	c = (c >> 7) * 19;
 80031f8:	09db      	lsrs	r3, r3, #7
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80031fa:	7fd1      	ldrb	r1, [r2, #31]
	c = (c >> 7) * 19;
 80031fc:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8003200:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8003204:	9b02      	ldr	r3, [sp, #8]
 8003206:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800320a:	77d9      	strb	r1, [r3, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800320c:	9902      	ldr	r1, [sp, #8]
 800320e:	2300      	movs	r3, #0
		c += r[i];
 8003210:	5cc8      	ldrb	r0, [r1, r3]
 8003212:	4402      	add	r2, r0
		r[i] = c;
 8003214:	54ca      	strb	r2, [r1, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8003216:	3301      	adds	r3, #1
 8003218:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 800321a:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800321e:	d1f7      	bne.n	8003210 <f25519_sqrt+0x61c>
	f25519_sub(i, i, y);

	/* r = avi */
	f25519_mul__distinct(x, v, a);
	f25519_mul__distinct(r, x, i);
}
 8003220:	b024      	add	sp, #144	; 0x90
 8003222:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003226:	4770      	bx	lr

08003228 <fprime_from_bytes>:
}

void fprime_from_bytes(uint8_t *n,
		       const uint8_t *x, size_t len,
		       const uint8_t *modulus)
{
 8003228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800322c:	4691      	mov	r9, r2
 800322e:	b08b      	sub	sp, #44	; 0x2c
 8003230:	4604      	mov	r4, r0
 8003232:	460f      	mov	r7, r1
 8003234:	461d      	mov	r5, r3
static int prime_msb(const uint8_t *p)
{
	int i;
	uint8_t x;

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
 8003236:	221f      	movs	r2, #31
 8003238:	e003      	b.n	8003242 <fprime_from_bytes+0x1a>
 800323a:	f112 32ff 	adds.w	r2, r2, #4294967295
 800323e:	f0c0 80b3 	bcc.w	80033a8 <fprime_from_bytes+0x180>
		if (p[i])
 8003242:	5cab      	ldrb	r3, [r5, r2]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f8      	beq.n	800323a <fprime_from_bytes+0x12>
			break;

	x = p[i];
	i <<= 3;
 8003248:	00d2      	lsls	r2, r2, #3

	while (x) {
 800324a:	085b      	lsrs	r3, r3, #1
		x >>= 1;
		i++;
 800324c:	f102 0201 	add.w	r2, r2, #1
			break;

	x = p[i];
	i <<= 3;

	while (x) {
 8003250:	d1fb      	bne.n	800324a <fprime_from_bytes+0x22>
 8003252:	3a02      	subs	r2, #2

void fprime_from_bytes(uint8_t *n,
		       const uint8_t *x, size_t len,
		       const uint8_t *modulus)
{
	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
 8003254:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
		x[i] = 0;
}

static inline int min_int(int a, int b)
{
	return a < b ? a : b;
 8003258:	4552      	cmp	r2, sl
 800325a:	bfb4      	ite	lt
 800325c:	4616      	movlt	r6, r2
 800325e:	4656      	movge	r6, sl
void fprime_from_bytes(uint8_t *n,
		       const uint8_t *x, size_t len,
		       const uint8_t *modulus)
{
	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
	const int preload_bytes = preload_total >> 3;
 8003260:	ea4f 08e6 	mov.w	r8, r6, asr #3
	const int preload_bits = preload_total & 7;
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);
 8003264:	4620      	mov	r0, r4
 8003266:	2100      	movs	r1, #0
 8003268:	2220      	movs	r2, #32
 800326a:	f003 fb81 	bl	8006970 <memset>

	for (i = 0; i < preload_bytes; i++)
 800326e:	f1b8 0f00 	cmp.w	r8, #0
		       const uint8_t *modulus)
{
	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
	const int preload_bytes = preload_total >> 3;
	const int preload_bits = preload_total & 7;
	const int rbits = (len << 3) - preload_total;
 8003272:	ebc6 0a0a 	rsb	sl, r6, sl
		       const uint8_t *x, size_t len,
		       const uint8_t *modulus)
{
	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
	const int preload_bytes = preload_total >> 3;
	const int preload_bits = preload_total & 7;
 8003276:	f006 0607 	and.w	r6, r6, #7
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 800327a:	dd42      	ble.n	8003302 <fprime_from_bytes+0xda>
 800327c:	ebc8 0c09 	rsb	ip, r8, r9
 8003280:	eb07 030c 	add.w	r3, r7, ip
 8003284:	1d22      	adds	r2, r4, #4
 8003286:	1d19      	adds	r1, r3, #4
 8003288:	4293      	cmp	r3, r2
 800328a:	bf38      	it	cc
 800328c:	428c      	cmpcc	r4, r1
 800328e:	bf34      	ite	cc
 8003290:	2200      	movcc	r2, #0
 8003292:	2201      	movcs	r2, #1
 8003294:	f1b8 0f09 	cmp.w	r8, #9
 8003298:	bf94      	ite	ls
 800329a:	2200      	movls	r2, #0
 800329c:	f002 0201 	andhi.w	r2, r2, #1
 80032a0:	2a00      	cmp	r2, #0
 80032a2:	f000 8087 	beq.w	80033b4 <fprime_from_bytes+0x18c>
 80032a6:	ea43 0204 	orr.w	r2, r3, r4
 80032aa:	0792      	lsls	r2, r2, #30
 80032ac:	f040 8082 	bne.w	80033b4 <fprime_from_bytes+0x18c>
 80032b0:	ea4f 0298 	mov.w	r2, r8, lsr #2
 80032b4:	2100      	movs	r1, #0
 80032b6:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 80032ba:	4608      	mov	r0, r1
 80032bc:	9501      	str	r5, [sp, #4]
		n[i] = x[len - preload_bytes + i];
 80032be:	585d      	ldr	r5, [r3, r1]
 80032c0:	3001      	adds	r0, #1
 80032c2:	4282      	cmp	r2, r0
 80032c4:	5065      	str	r5, [r4, r1]
 80032c6:	f101 0104 	add.w	r1, r1, #4
 80032ca:	d8f8      	bhi.n	80032be <fprime_from_bytes+0x96>
 80032cc:	45c3      	cmp	fp, r8
 80032ce:	9d01      	ldr	r5, [sp, #4]
 80032d0:	d017      	beq.n	8003302 <fprime_from_bytes+0xda>
 80032d2:	eb07 030b 	add.w	r3, r7, fp
 80032d6:	f813 100c 	ldrb.w	r1, [r3, ip]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 80032da:	f10b 0301 	add.w	r3, fp, #1
 80032de:	4598      	cmp	r8, r3
		n[i] = x[len - preload_bytes + i];
 80032e0:	f804 1022 	strb.w	r1, [r4, r2, lsl #2]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 80032e4:	dd0d      	ble.n	8003302 <fprime_from_bytes+0xda>
		n[i] = x[len - preload_bytes + i];
 80032e6:	18fa      	adds	r2, r7, r3
 80032e8:	f812 200c 	ldrb.w	r2, [r2, ip]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 80032ec:	f10b 0b02 	add.w	fp, fp, #2
 80032f0:	45d8      	cmp	r8, fp
		n[i] = x[len - preload_bytes + i];
 80032f2:	54e2      	strb	r2, [r4, r3]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 80032f4:	dd05      	ble.n	8003302 <fprime_from_bytes+0xda>
		n[i] = x[len - preload_bytes + i];
 80032f6:	eb07 030b 	add.w	r3, r7, fp
 80032fa:	f813 300c 	ldrb.w	r3, [r3, ip]
 80032fe:	f804 300b 	strb.w	r3, [r4, fp]

	if (preload_bits) {
 8003302:	b1be      	cbz	r6, 8003334 <fprime_from_bytes+0x10c>
 8003304:	2200      	movs	r2, #0
 8003306:	4613      	mov	r3, r2
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c |= ((uint16_t)x[i]) << n;
 8003308:	5ce1      	ldrb	r1, [r4, r3]
 800330a:	40b1      	lsls	r1, r6
 800330c:	430a      	orrs	r2, r1
 800330e:	b292      	uxth	r2, r2
		x[i] = c;
 8003310:	54e2      	strb	r2, [r4, r3]
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003312:	3301      	adds	r3, #1
 8003314:	2b20      	cmp	r3, #32
		c |= ((uint16_t)x[i]) << n;
		x[i] = c;
		c >>= 8;
 8003316:	ea4f 2212 	mov.w	r2, r2, lsr #8
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 800331a:	d1f5      	bne.n	8003308 <fprime_from_bytes+0xe0>
	for (i = 0; i < preload_bytes; i++)
		n[i] = x[len - preload_bytes + i];

	if (preload_bits) {
		shift_n_bits(n, preload_bits);
		n[0] |= x[len - preload_bytes - 1] >> (8 - preload_bits);
 800331c:	f109 39ff 	add.w	r9, r9, #4294967295
 8003320:	ebc8 0809 	rsb	r8, r8, r9
 8003324:	f817 2008 	ldrb.w	r2, [r7, r8]
 8003328:	f1c6 0608 	rsb	r6, r6, #8
 800332c:	4132      	asrs	r2, r6
 800332e:	7823      	ldrb	r3, [r4, #0]
 8003330:	4313      	orrs	r3, r2
 8003332:	7023      	strb	r3, [r4, #0]
	}

	for (i = rbits - 1; i >= 0; i--) {
 8003334:	f1ba 0a01 	subs.w	sl, sl, #1
 8003338:	d433      	bmi.n	80033a2 <fprime_from_bytes+0x17a>
		const uint8_t bit = (x[i >> 3] >> (i & 7)) & 1;
 800333a:	ea4f 03ea 	mov.w	r3, sl, asr #3
 800333e:	5cf8      	ldrb	r0, [r7, r3]
 8003340:	f00a 0307 	and.w	r3, sl, #7
 8003344:	4118      	asrs	r0, r3
}

/* Warning: this function may be variable-time in the argument n */
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
 8003346:	2200      	movs	r2, #0
		shift_n_bits(n, preload_bits);
		n[0] |= x[len - preload_bytes - 1] >> (8 - preload_bits);
	}

	for (i = rbits - 1; i >= 0; i--) {
		const uint8_t bit = (x[i >> 3] >> (i & 7)) & 1;
 8003348:	f000 0001 	and.w	r0, r0, #1
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 800334c:	4613      	mov	r3, r2
		c |= ((uint16_t)x[i]) << n;
 800334e:	5ce1      	ldrb	r1, [r4, r3]
 8003350:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
		x[i] = c;
 8003354:	54e2      	strb	r2, [r4, r3]
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003356:	3301      	adds	r3, #1
 8003358:	2b20      	cmp	r3, #32
		c |= ((uint16_t)x[i]) << n;
		x[i] = c;
		c >>= 8;
 800335a:	ea4f 2212 	mov.w	r2, r2, lsr #8
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 800335e:	d1f6      	bne.n	800334e <fprime_from_bytes+0x126>

	for (i = rbits - 1; i >= 0; i--) {
		const uint8_t bit = (x[i >> 3] >> (i & 7)) & 1;

		shift_n_bits(n, 1);
		n[0] |= bit;
 8003360:	7823      	ldrb	r3, [r4, #0]
}

static void raw_try_sub(uint8_t *x, const uint8_t *p)
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
 8003362:	2200      	movs	r2, #0

	for (i = rbits - 1; i >= 0; i--) {
		const uint8_t bit = (x[i >> 3] >> (i & 7)) & 1;

		shift_n_bits(n, 1);
		n[0] |= bit;
 8003364:	4303      	orrs	r3, r0
 8003366:	7023      	strb	r3, [r4, #0]
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003368:	4613      	mov	r3, r2
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
 800336a:	5ce0      	ldrb	r0, [r4, r3]
 800336c:	5ce9      	ldrb	r1, [r5, r3]
 800336e:	1a41      	subs	r1, r0, r1
 8003370:	1a8a      	subs	r2, r1, r2
 8003372:	b292      	uxth	r2, r2
		minusp[i] = c;
 8003374:	a802      	add	r0, sp, #8
 8003376:	54c2      	strb	r2, [r0, r3]
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003378:	3301      	adds	r3, #1
 800337a:	2b20      	cmp	r3, #32
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
 800337c:	f3c2 2200 	ubfx	r2, r2, #8, #1
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003380:	d1f3      	bne.n	800336a <fprime_from_bytes+0x142>

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 8003382:	4252      	negs	r2, r2
 8003384:	b2d2      	uxtb	r2, r2
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 8003386:	2300      	movs	r3, #0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 8003388:	a802      	add	r0, sp, #8
 800338a:	5cc1      	ldrb	r1, [r0, r3]
 800338c:	5ce0      	ldrb	r0, [r4, r3]
 800338e:	4048      	eors	r0, r1
 8003390:	4010      	ands	r0, r2
 8003392:	4041      	eors	r1, r0
 8003394:	54e1      	strb	r1, [r4, r3]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 8003396:	3301      	adds	r3, #1
 8003398:	2b20      	cmp	r3, #32
 800339a:	d1f5      	bne.n	8003388 <fprime_from_bytes+0x160>
	if (preload_bits) {
		shift_n_bits(n, preload_bits);
		n[0] |= x[len - preload_bytes - 1] >> (8 - preload_bits);
	}

	for (i = rbits - 1; i >= 0; i--) {
 800339c:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80033a0:	d2cb      	bcs.n	800333a <fprime_from_bytes+0x112>

		shift_n_bits(n, 1);
		n[0] |= bit;
		raw_try_sub(n, modulus);
	}
}
 80033a2:	b00b      	add	sp, #44	; 0x2c
 80033a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
 80033a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
	i <<= 3;

	while (x) {
 80033ac:	b14b      	cbz	r3, 80033c2 <fprime_from_bytes+0x19a>
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
 80033ae:	f06f 0207 	mvn.w	r2, #7
 80033b2:	e74a      	b.n	800324a <fprime_from_bytes+0x22>
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 80033b4:	2200      	movs	r2, #0
		n[i] = x[len - preload_bytes + i];
 80033b6:	5c99      	ldrb	r1, [r3, r2]
 80033b8:	54a1      	strb	r1, [r4, r2]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 80033ba:	3201      	adds	r2, #1
 80033bc:	4542      	cmp	r2, r8
 80033be:	d1fa      	bne.n	80033b6 <fprime_from_bytes+0x18e>
 80033c0:	e79f      	b.n	8003302 <fprime_from_bytes+0xda>
			break;

	x = p[i];
	i <<= 3;

	while (x) {
 80033c2:	f06f 0209 	mvn.w	r2, #9
 80033c6:	e745      	b.n	8003254 <fprime_from_bytes+0x2c>

080033c8 <sha256_starts>:
    (b)[(i) + 2] = (uint8) ( (n) >>  8 );       \
    (b)[(i) + 3] = (uint8) ( (n)       );       \
}

void sha256_starts( sha256_context *ctx )
{
 80033c8:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x6A09E667;
    ctx->state[1] = 0xBB67AE85;
 80033cc:	f8df c048 	ldr.w	ip, [pc, #72]	; 8003418 <sha256_starts+0x50>
void sha256_starts( sha256_context *ctx )
{
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x6A09E667;
 80033d0:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800341c <sha256_starts+0x54>
    ctx->state[1] = 0xBB67AE85;
    ctx->state[2] = 0x3C6EF372;
 80033d4:	4f0a      	ldr	r7, [pc, #40]	; (8003400 <sha256_starts+0x38>)
    ctx->state[3] = 0xA54FF53A;
 80033d6:	4e0b      	ldr	r6, [pc, #44]	; (8003404 <sha256_starts+0x3c>)
    ctx->state[4] = 0x510E527F;
 80033d8:	4d0b      	ldr	r5, [pc, #44]	; (8003408 <sha256_starts+0x40>)
    ctx->state[5] = 0x9B05688C;
 80033da:	4c0c      	ldr	r4, [pc, #48]	; (800340c <sha256_starts+0x44>)
    ctx->state[6] = 0x1F83D9AB;
 80033dc:	490c      	ldr	r1, [pc, #48]	; (8003410 <sha256_starts+0x48>)
    ctx->state[7] = 0x5BE0CD19;
 80033de:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <sha256_starts+0x4c>)
    (b)[(i) + 3] = (uint8) ( (n)       );       \
}

void sha256_starts( sha256_context *ctx )
{
    ctx->total[0] = 0;
 80033e0:	2300      	movs	r3, #0
    ctx->total[1] = 0;

    ctx->state[0] = 0x6A09E667;
 80033e2:	f8c0 8008 	str.w	r8, [r0, #8]
    ctx->state[1] = 0xBB67AE85;
    ctx->state[2] = 0x3C6EF372;
 80033e6:	6107      	str	r7, [r0, #16]
    ctx->state[3] = 0xA54FF53A;
 80033e8:	6146      	str	r6, [r0, #20]
    ctx->state[4] = 0x510E527F;
 80033ea:	6185      	str	r5, [r0, #24]
    ctx->state[5] = 0x9B05688C;
 80033ec:	61c4      	str	r4, [r0, #28]
{
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x6A09E667;
    ctx->state[1] = 0xBB67AE85;
 80033ee:	f8c0 c00c 	str.w	ip, [r0, #12]
    ctx->state[2] = 0x3C6EF372;
    ctx->state[3] = 0xA54FF53A;
    ctx->state[4] = 0x510E527F;
    ctx->state[5] = 0x9B05688C;
    ctx->state[6] = 0x1F83D9AB;
 80033f2:	6201      	str	r1, [r0, #32]
    ctx->state[7] = 0x5BE0CD19;
 80033f4:	6242      	str	r2, [r0, #36]	; 0x24
    (b)[(i) + 3] = (uint8) ( (n)       );       \
}

void sha256_starts( sha256_context *ctx )
{
    ctx->total[0] = 0;
 80033f6:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 80033f8:	6043      	str	r3, [r0, #4]
    ctx->state[3] = 0xA54FF53A;
    ctx->state[4] = 0x510E527F;
    ctx->state[5] = 0x9B05688C;
    ctx->state[6] = 0x1F83D9AB;
    ctx->state[7] = 0x5BE0CD19;
}
 80033fa:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80033fe:	4770      	bx	lr
 8003400:	3c6ef372 	stclcc	3, cr15, [lr], #-456	; 0xfffffe38
 8003404:	a54ff53a 	strbge	pc, [pc, #-1338]	; 8002ed2 <f25519_sqrt+0x2de>	; <UNPREDICTABLE>
 8003408:	510e527f 	tstpl	lr, pc, ror r2
 800340c:	9b05688c 	blls	815d644 <_etext+0x155e5c>
 8003410:	1f83d9ab 	svcne	0x0083d9ab
 8003414:	5be0cd19 	blpl	7836880 <__Stack_Size+0x7836080>
 8003418:	bb67ae85 	bllt	99eee34 <_etext+0x19e764c>
 800341c:	6a09e667 	bvs	827cdc0 <_etext+0x2755d8>

08003420 <sha256_process>:

void sha256_process( sha256_context *ctx, uint8 data[64] )
{
 8003420:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003424:	b09c      	sub	sp, #112	; 0x70
 8003426:	9019      	str	r0, [sp, #100]	; 0x64
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
 8003428:	9a19      	ldr	r2, [sp, #100]	; 0x64

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
 800342a:	6980      	ldr	r0, [r0, #24]
    F = ctx->state[5];
 800342c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    G = ctx->state[6];
    H = ctx->state[7];
 800342e:	9c19      	ldr	r4, [sp, #100]	; 0x64
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
 8003430:	9e19      	ldr	r6, [sp, #100]	; 0x64
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
 8003432:	9004      	str	r0, [sp, #16]
    F = ctx->state[5];
    G = ctx->state[6];
 8003434:	6a12      	ldr	r2, [r2, #32]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
 8003436:	69db      	ldr	r3, [r3, #28]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003438:	ea4f 15b0 	mov.w	r5, r0, ror #6
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
 800343c:	9819      	ldr	r0, [sp, #100]	; 0x64
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];
 800343e:	6a64      	ldr	r4, [r4, #36]	; 0x24
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
 8003440:	68b6      	ldr	r6, [r6, #8]
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
 8003442:	9202      	str	r2, [sp, #8]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
 8003444:	9303      	str	r3, [sp, #12]
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
 8003446:	68c0      	ldr	r0, [r0, #12]
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
 8003448:	9608      	str	r6, [sp, #32]
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];
 800344a:	9401      	str	r4, [sp, #4]

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 800344c:	9a04      	ldr	r2, [sp, #16]
 800344e:	9c02      	ldr	r4, [sp, #8]
 8003450:	9e03      	ldr	r6, [sp, #12]
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
 8003452:	9007      	str	r0, [sp, #28]
    C = ctx->state[2];
 8003454:	9819      	ldr	r0, [sp, #100]	; 0x64
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003456:	ea85 25f2 	eor.w	r5, r5, r2, ror #11
 800345a:	4bd0      	ldr	r3, [pc, #832]	; (800379c <sha256_process+0x37c>)
 800345c:	ea84 0206 	eor.w	r2, r4, r6
 8003460:	9c04      	ldr	r4, [sp, #16]
 8003462:	9e01      	ldr	r6, [sp, #4]
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
 8003464:	6900      	ldr	r0, [r0, #16]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 8003466:	784f      	ldrb	r7, [r1, #1]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003468:	ea85 6574 	eor.w	r5, r5, r4, ror #25
 800346c:	4433      	add	r3, r6
 800346e:	4022      	ands	r2, r4
 8003470:	9e08      	ldr	r6, [sp, #32]
 8003472:	9c07      	ldr	r4, [sp, #28]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 8003474:	f891 a000 	ldrb.w	sl, [r1]
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
 8003478:	9006      	str	r0, [sp, #24]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 800347a:	f891 c003 	ldrb.w	ip, [r1, #3]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 800347e:	eb03 0805 	add.w	r8, r3, r5
 8003482:	ea44 0006 	orr.w	r0, r4, r6
 8003486:	9b02      	ldr	r3, [sp, #8]
 8003488:	9c06      	ldr	r4, [sp, #24]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 800348a:	043f      	lsls	r7, r7, #16
 800348c:	f891 9002 	ldrb.w	r9, [r1, #2]
 8003490:	ea47 670a 	orr.w	r7, r7, sl, lsl #24
 8003494:	ea47 070c 	orr.w	r7, r7, ip
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003498:	405a      	eors	r2, r3
 800349a:	4020      	ands	r0, r4
 800349c:	9b07      	ldr	r3, [sp, #28]
 800349e:	9c08      	ldr	r4, [sp, #32]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 80034a0:	ea47 2909 	orr.w	r9, r7, r9, lsl #8
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 80034a4:	ea4f 06b6 	mov.w	r6, r6, ror #2
 80034a8:	ea03 0504 	and.w	r5, r3, r4
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 80034ac:	f891 a005 	ldrb.w	sl, [r1, #5]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 80034b0:	ea86 3674 	eor.w	r6, r6, r4, ror #13
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 80034b4:	790c      	ldrb	r4, [r1, #4]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 80034b6:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 80034ba:	9f19      	ldr	r7, [sp, #100]	; 0x64
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 80034bc:	9b08      	ldr	r3, [sp, #32]
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 80034be:	697f      	ldr	r7, [r7, #20]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 80034c0:	4328      	orrs	r0, r5
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 80034c2:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 80034c6:	79cd      	ldrb	r5, [r1, #7]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 80034c8:	ea86 56b3 	eor.w	r6, r6, r3, ror #22
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 80034cc:	ea4a 6a04 	orr.w	sl, sl, r4, lsl #24
 80034d0:	798c      	ldrb	r4, [r1, #6]
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 80034d2:	9705      	str	r7, [sp, #20]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 80034d4:	4430      	add	r0, r6
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 80034d6:	ea4a 0a05 	orr.w	sl, sl, r5
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 80034da:	9e03      	ldr	r6, [sp, #12]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 80034dc:	4442      	add	r2, r8
 80034de:	46bc      	mov	ip, r7
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 80034e0:	9f04      	ldr	r7, [sp, #16]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 80034e2:	444a      	add	r2, r9
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 80034e4:	ea4a 2404 	orr.w	r4, sl, r4, lsl #8
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 80034e8:	eb00 0b02 	add.w	fp, r0, r2
 80034ec:	4494      	add	ip, r2
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 80034ee:	940d      	str	r4, [sp, #52]	; 0x34
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 80034f0:	9d03      	ldr	r5, [sp, #12]
 80034f2:	9c08      	ldr	r4, [sp, #32]
 80034f4:	ea86 0207 	eor.w	r2, r6, r7
 80034f8:	9802      	ldr	r0, [sp, #8]
 80034fa:	ea0c 0202 	and.w	r2, ip, r2
 80034fe:	4ba8      	ldr	r3, [pc, #672]	; (80037a0 <sha256_process+0x380>)
 8003500:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8003504:	ea4b 0704 	orr.w	r7, fp, r4
 8003508:	406a      	eors	r2, r5
 800350a:	ea0b 0504 	and.w	r5, fp, r4
 800350e:	9c07      	ldr	r4, [sp, #28]
 8003510:	4403      	add	r3, r0
 8003512:	ea4f 18bc 	mov.w	r8, ip, ror #6
 8003516:	ea4f 06bb 	mov.w	r6, fp, ror #2
 800351a:	444b      	add	r3, r9
 800351c:	ea88 28fc 	eor.w	r8, r8, ip, ror #11
 8003520:	4027      	ands	r7, r4
 8003522:	ea86 367b 	eor.w	r6, r6, fp, ror #13
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 8003526:	7a48      	ldrb	r0, [r1, #9]
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 8003528:	ea88 687c 	eor.w	r8, r8, ip, ror #25
 800352c:	ea86 56bb 	eor.w	r6, r6, fp, ror #22
 8003530:	4413      	add	r3, r2
 8003532:	432f      	orrs	r7, r5
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 8003534:	7a0c      	ldrb	r4, [r1, #8]
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 8003536:	4443      	add	r3, r8
 8003538:	4437      	add	r7, r6
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 800353a:	7acd      	ldrb	r5, [r1, #11]
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 800353c:	441f      	add	r7, r3
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 800353e:	0400      	lsls	r0, r0, #16
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 8003540:	970b      	str	r7, [sp, #44]	; 0x2c
 8003542:	9e06      	ldr	r6, [sp, #24]
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 8003544:	9f04      	ldr	r7, [sp, #16]
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 8003546:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800354a:	7a8c      	ldrb	r4, [r1, #10]
 800354c:	4328      	orrs	r0, r5
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 800354e:	441e      	add	r6, r3
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 8003550:	ea8c 0907 	eor.w	r9, ip, r7
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 8003554:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
 8003558:	940e      	str	r4, [sp, #56]	; 0x38
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 800355a:	9803      	ldr	r0, [sp, #12]
 800355c:	ea06 0909 	and.w	r9, r6, r9
 8003560:	4a90      	ldr	r2, [pc, #576]	; (80037a4 <sha256_process+0x384>)
 8003562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003564:	ea89 0907 	eor.w	r9, r9, r7
 8003568:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800356a:	4402      	add	r2, r0
 800356c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8003570:	ea43 080b 	orr.w	r8, r3, fp
 8003574:	ea4f 04b3 	mov.w	r4, r3, ror #2
 8003578:	443a      	add	r2, r7
 800357a:	ea03 070b 	and.w	r7, r3, fp
 800357e:	9b08      	ldr	r3, [sp, #32]
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 8003580:	7b48      	ldrb	r0, [r1, #13]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 8003582:	ea4f 15b6 	mov.w	r5, r6, ror #6
 8003586:	ea08 0803 	and.w	r8, r8, r3
 800358a:	ea84 347a 	eor.w	r4, r4, sl, ror #13
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 800358e:	7b0b      	ldrb	r3, [r1, #12]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 8003590:	ea84 54ba 	eor.w	r4, r4, sl, ror #22
 8003594:	ea85 25f6 	eor.w	r5, r5, r6, ror #11
 8003598:	ea48 0807 	orr.w	r8, r8, r7
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 800359c:	0400      	lsls	r0, r0, #16
 800359e:	7bcf      	ldrb	r7, [r1, #15]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 80035a0:	ea85 6576 	eor.w	r5, r5, r6, ror #25
 80035a4:	444a      	add	r2, r9
 80035a6:	44a0      	add	r8, r4
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 80035a8:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 80035ac:	7b8c      	ldrb	r4, [r1, #14]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 80035ae:	442a      	add	r2, r5
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 80035b0:	433b      	orrs	r3, r7
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 80035b2:	9d07      	ldr	r5, [sp, #28]
 80035b4:	4490      	add	r8, r2
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 80035b6:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 80035ba:	4415      	add	r5, r2
 80035bc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80035c0:	7c4f      	ldrb	r7, [r1, #17]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80035c2:	4879      	ldr	r0, [pc, #484]	; (80037a8 <sha256_process+0x388>)
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 80035c4:	940f      	str	r4, [sp, #60]	; 0x3c
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80035c6:	9a04      	ldr	r2, [sp, #16]

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80035c8:	7c0b      	ldrb	r3, [r1, #16]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80035ca:	4410      	add	r0, r2
 80035cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80035ce:	930a      	str	r3, [sp, #40]	; 0x28
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80035d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80035d2:	ea48 0402 	orr.w	r4, r8, r2
 80035d6:	ea4f 02b8 	mov.w	r2, r8, ror #2

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80035da:	f891 8013 	ldrb.w	r8, [r1, #19]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80035de:	4403      	add	r3, r0
 80035e0:	9309      	str	r3, [sp, #36]	; 0x24

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80035e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80035e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80035e8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80035ec:	ea86 0a0c 	eor.w	sl, r6, ip
 80035f0:	ea03 0008 	and.w	r0, r3, r8
 80035f4:	ea05 0a0a 	and.w	sl, r5, sl
 80035f8:	ea82 3273 	eor.w	r2, r2, r3, ror #13
 80035fc:	9b09      	ldr	r3, [sp, #36]	; 0x24

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80035fe:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 8003602:	ea04 040b 	and.w	r4, r4, fp
 8003606:	ea8a 0a0c 	eor.w	sl, sl, ip
 800360a:	449a      	add	sl, r3
 800360c:	ea4f 19b5 	mov.w	r9, r5, ror #6
 8003610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003612:	4320      	orrs	r0, r4

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 8003614:	043f      	lsls	r7, r7, #16
 8003616:	9c10      	ldr	r4, [sp, #64]	; 0x40
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 8003618:	ea89 29f5 	eor.w	r9, r9, r5, ror #11

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 800361c:	ea47 6708 	orr.w	r7, r7, r8, lsl #24
 8003620:	f891 8012 	ldrb.w	r8, [r1, #18]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 8003624:	ea82 52b3 	eor.w	r2, r2, r3, ror #22

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 8003628:	4327      	orrs	r7, r4
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 800362a:	ea89 6975 	eor.w	r9, r9, r5, ror #25
 800362e:	44d1      	add	r9, sl

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 8003630:	ea47 2808 	orr.w	r8, r7, r8, lsl #8
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 8003634:	4410      	add	r0, r2
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 8003636:	7d4f      	ldrb	r7, [r1, #21]

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8003638:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800363a:	4b5c      	ldr	r3, [pc, #368]	; (80037ac <sha256_process+0x38c>)
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 800363c:	4448      	add	r0, r9
 800363e:	9009      	str	r0, [sp, #36]	; 0x24
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 8003640:	9712      	str	r7, [sp, #72]	; 0x48

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 8003642:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8003646:	4443      	add	r3, r8
 8003648:	ea4f 07b0 	mov.w	r7, r0, ror #2
 800364c:	ea40 0802 	orr.w	r8, r0, r2
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 8003650:	7d08      	ldrb	r0, [r1, #20]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 8003652:	9c08      	ldr	r4, [sp, #32]
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 8003654:	9011      	str	r0, [sp, #68]	; 0x44

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8003656:	4463      	add	r3, ip
 8003658:	980b      	ldr	r0, [sp, #44]	; 0x2c
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 800365a:	444c      	add	r4, r9
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 800365c:	930a      	str	r3, [sp, #40]	; 0x28
 800365e:	ea85 0a06 	eor.w	sl, r5, r6
 8003662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003664:	ea08 0800 	and.w	r8, r8, r0
 8003668:	ea04 0a0a 	and.w	sl, r4, sl
 800366c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800366e:	ea03 0c02 	and.w	ip, r3, r2
 8003672:	ea8a 0a06 	eor.w	sl, sl, r6
 8003676:	ea87 3773 	eor.w	r7, r7, r3, ror #13
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 800367a:	9b12      	ldr	r3, [sp, #72]	; 0x48

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 800367c:	ea4f 19b4 	mov.w	r9, r4, ror #6
 8003680:	4482      	add	sl, r0
 8003682:	ea48 0c0c 	orr.w	ip, r8, ip
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 8003686:	9811      	ldr	r0, [sp, #68]	; 0x44

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8003688:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800368c:	ea89 29f4 	eor.w	r9, r9, r4, ror #11
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 8003690:	041a      	lsls	r2, r3, #16
 8003692:	7dcb      	ldrb	r3, [r1, #23]

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8003694:	ea89 6974 	eor.w	r9, r9, r4, ror #25
 8003698:	ea87 57b8 	eor.w	r7, r7, r8, ror #22
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 800369c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80036a0:	f891 8016 	ldrb.w	r8, [r1, #22]

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 80036a4:	44ca      	add	sl, r9
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 80036a6:	431a      	orrs	r2, r3

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 80036a8:	44bc      	add	ip, r7
 80036aa:	44d4      	add	ip, sl
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 80036ac:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80036b0:	4b3f      	ldr	r3, [pc, #252]	; (80037b0 <sha256_process+0x390>)

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 80036b2:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 80036b6:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    GET_UINT32( W[6],  data, 24 );
 80036ba:	7e4a      	ldrb	r2, [r1, #25]
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80036bc:	4443      	add	r3, r8
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 80036be:	9212      	str	r2, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80036c0:	441e      	add	r6, r3
 80036c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80036c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80036c8:	ea02 0803 	and.w	r8, r2, r3
 80036cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036ce:	ea4c 0907 	orr.w	r9, ip, r7
 80036d2:	ea4f 0cbc 	mov.w	ip, ip, ror #2

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 80036d6:	eb0a 000b 	add.w	r0, sl, fp
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80036da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80036dc:	ea84 0b05 	eor.w	fp, r4, r5
 80036e0:	ea8c 3c73 	eor.w	ip, ip, r3, ror #13
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 80036e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80036e6:	7e0f      	ldrb	r7, [r1, #24]
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80036e8:	ea00 0b0b 	and.w	fp, r0, fp
 80036ec:	ea8b 0b05 	eor.w	fp, fp, r5
 80036f0:	ea09 0902 	and.w	r9, r9, r2
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 80036f4:	041a      	lsls	r2, r3, #16
 80036f6:	7ecb      	ldrb	r3, [r1, #27]
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80036f8:	445e      	add	r6, fp
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 80036fa:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
 80036fe:	f891 b01a 	ldrb.w	fp, [r1, #26]
 8003702:	ea42 0703 	orr.w	r7, r2, r3
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8003706:	ea49 0808 	orr.w	r8, r9, r8
 800370a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 800370e:	ea47 2b0b 	orr.w	fp, r7, fp, lsl #8
 8003712:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8003716:	ea8c 5cb9 	eor.w	ip, ip, r9, ror #22
 800371a:	ea4f 1ab0 	mov.w	sl, r0, ror #6
 800371e:	ea8a 2af0 	eor.w	sl, sl, r0, ror #11
 8003722:	44e0      	add	r8, ip
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003724:	4b23      	ldr	r3, [pc, #140]	; (80037b4 <sha256_process+0x394>)
 8003726:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 800372a:	ea8a 6a70 	eor.w	sl, sl, r0, ror #25
 800372e:	4456      	add	r6, sl
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003730:	4463      	add	r3, ip
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8003732:	44b0      	add	r8, r6
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003734:	441d      	add	r5, r3
 8003736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8003738:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 800373a:	f891 a01d 	ldrb.w	sl, [r1, #29]
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 800373e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003742:	ea48 0909 	orr.w	r9, r8, r9
 8003746:	ea4f 0cb8 	mov.w	ip, r8, ror #2
 800374a:	ea08 0803 	and.w	r8, r8, r3
 800374e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 8003750:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8003754:	4432      	add	r2, r6
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003756:	ea80 0b04 	eor.w	fp, r0, r4
 800375a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800375c:	ea8c 3c73 	eor.w	ip, ip, r3, ror #13
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 8003760:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003762:	7f0f      	ldrb	r7, [r1, #28]
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003764:	ea02 0b0b 	and.w	fp, r2, fp
 8003768:	ea8b 0b04 	eor.w	fp, fp, r4
 800376c:	ea09 0906 	and.w	r9, r9, r6
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 8003770:	041e      	lsls	r6, r3, #16
 8003772:	7fcb      	ldrb	r3, [r1, #31]
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003774:	445d      	add	r5, fp
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 8003776:	ea46 6607 	orr.w	r6, r6, r7, lsl #24
 800377a:	f891 b01e 	ldrb.w	fp, [r1, #30]
 800377e:	431e      	orrs	r6, r3
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003780:	ea4f 1ab2 	mov.w	sl, r2, ror #6
 8003784:	ea49 0808 	orr.w	r8, r9, r8
 8003788:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 800378c:	ea46 2b0b 	orr.w	fp, r6, fp, lsl #8
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003790:	ea8a 2af2 	eor.w	sl, sl, r2, ror #11
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 8003794:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8003798:	e00e      	b.n	80037b8 <sha256_process+0x398>
 800379a:	bf00      	nop
 800379c:	428a2f98 	addmi	r2, sl, #152, 30	; 0x260
 80037a0:	71374491 			; <UNDEFINED> instruction: 0x71374491
 80037a4:	b5c0fbcf 	strblt	pc, [r0, #3023]	; 0xbcf	; <UNPREDICTABLE>
 80037a8:	e9b5dba5 	ldmib	r5!, {r0, r2, r5, r7, r8, r9, fp, ip, lr, pc}
 80037ac:	3956c25b 	ldmdbcc	r6, {r0, r1, r3, r4, r6, r9, lr, pc}^
 80037b0:	59f111f1 	ldmibpl	r1!, {r0, r4, r5, r6, r7, r8, ip}^
 80037b4:	923f82a4 	eorsls	r8, pc, #164, 4	; 0x4000000a
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80037b8:	ea8c 5cb9 	eor.w	ip, ip, r9, ror #22
 80037bc:	ea8a 6a72 	eor.w	sl, sl, r2, ror #25
 80037c0:	44aa      	add	sl, r5
 80037c2:	44e0      	add	r8, ip
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80037c4:	4de9      	ldr	r5, [pc, #932]	; (8003b6c <sha256_process+0x74c>)
 80037c6:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80037ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80037cc:	4465      	add	r5, ip
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80037ce:	44d0      	add	r8, sl
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80037d0:	442c      	add	r4, r5
 80037d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80037d4:	4453      	add	r3, sl
 80037d6:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80037da:	f891 a021 	ldrb.w	sl, [r1, #33]	; 0x21
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80037de:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80037e0:	ea48 0909 	orr.w	r9, r8, r9
 80037e4:	ea4f 0cb8 	mov.w	ip, r8, ror #2
 80037e8:	ea08 0805 	and.w	r8, r8, r5
 80037ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80037ee:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80037f2:	ea82 0b00 	eor.w	fp, r2, r0
 80037f6:	ea09 0906 	and.w	r9, r9, r6
 80037fa:	ea8c 3c75 	eor.w	ip, ip, r5, ror #13
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80037fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003800:	f891 7020 	ldrb.w	r7, [r1, #32]
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 8003804:	ea03 0b0b 	and.w	fp, r3, fp
 8003808:	ea4f 1ab3 	mov.w	sl, r3, ror #6
 800380c:	ea49 0808 	orr.w	r8, r9, r8
 8003810:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8003814:	ea8b 0b00 	eor.w	fp, fp, r0
 8003818:	ea8a 2af3 	eor.w	sl, sl, r3, ror #11
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 800381c:	042e      	lsls	r6, r5, #16
 800381e:	f891 5023 	ldrb.w	r5, [r1, #35]	; 0x23
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 8003822:	ea8a 6a73 	eor.w	sl, sl, r3, ror #25
 8003826:	ea8c 5cb9 	eor.w	ip, ip, r9, ror #22
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 800382a:	ea46 6607 	orr.w	r6, r6, r7, lsl #24
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 800382e:	445c      	add	r4, fp
 8003830:	4454      	add	r4, sl
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 8003832:	4335      	orrs	r5, r6
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 8003834:	44e0      	add	r8, ip
 8003836:	9e09      	ldr	r6, [sp, #36]	; 0x24
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 8003838:	f891 b022 	ldrb.w	fp, [r1, #34]	; 0x22
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 800383c:	44a0      	add	r8, r4
 800383e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8003842:	4426      	add	r6, r4
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 8003844:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8003848:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 800384a:	f891 a025 	ldrb.w	sl, [r1, #37]	; 0x25
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 800384e:	4fc8      	ldr	r7, [pc, #800]	; (8003b70 <sha256_process+0x750>)
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 8003850:	ea45 2b0b 	orr.w	fp, r5, fp, lsl #8
    GET_UINT32( W[9],  data, 36 );
 8003854:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 8003858:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 800385c:	ea83 0902 	eor.w	r9, r3, r2
 8003860:	445f      	add	r7, fp
 8003862:	ea4f 0abc 	mov.w	sl, ip, ror #2
 8003866:	ea4c 0b04 	orr.w	fp, ip, r4
 800386a:	ea0c 0c04 	and.w	ip, ip, r4
 800386e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003870:	ea06 0909 	and.w	r9, r6, r9
 8003874:	ea89 0902 	eor.w	r9, r9, r2
 8003878:	4438      	add	r0, r7
 800387a:	ea8a 3a74 	eor.w	sl, sl, r4, ror #13
 800387e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 8003880:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8003882:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 8003886:	ea4f 18b6 	mov.w	r8, r6, ror #6
 800388a:	4448      	add	r0, r9
 800388c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003890:	ea88 28f6 	eor.w	r8, r8, r6, ror #11
 8003894:	ea0b 0b07 	and.w	fp, fp, r7
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 8003898:	0427      	lsls	r7, r4, #16
 800389a:	f891 4027 	ldrb.w	r4, [r1, #39]	; 0x27
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 800389e:	ea88 6876 	eor.w	r8, r8, r6, ror #25
 80038a2:	ea8a 5ab9 	eor.w	sl, sl, r9, ror #22
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 80038a6:	ea47 6505 	orr.w	r5, r7, r5, lsl #24
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 80038aa:	ea4b 0b0c 	orr.w	fp, fp, ip
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 80038ae:	f891 7026 	ldrb.w	r7, [r1, #38]	; 0x26
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 80038b2:	4440      	add	r0, r8
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 80038b4:	432c      	orrs	r4, r5
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 80038b6:	44d3      	add	fp, sl
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80038b8:	4dae      	ldr	r5, [pc, #696]	; (8003b74 <sha256_process+0x754>)
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 80038ba:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 80038be:	ea44 2707 	orr.w	r7, r4, r7, lsl #8
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 80038c2:	4483      	add	fp, r0
 80038c4:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80038c8:	443d      	add	r5, r7
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 80038ca:	4481      	add	r9, r0
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80038cc:	442a      	add	r2, r5
 80038ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 80038d2:	f891 a029 	ldrb.w	sl, [r1, #41]	; 0x29
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 80038d6:	9714      	str	r7, [sp, #80]	; 0x50
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80038d8:	ea4b 0b00 	orr.w	fp, fp, r0
 80038dc:	ea05 0700 	and.w	r7, r5, r0
 80038e0:	980c      	ldr	r0, [sp, #48]	; 0x30
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 80038e2:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80038e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80038e8:	ea86 0803 	eor.w	r8, r6, r3
 80038ec:	ea0b 0b00 	and.w	fp, fp, r0
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 80038f0:	9815      	ldr	r0, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80038f2:	ea09 0808 	and.w	r8, r9, r8
 80038f6:	ea4f 1cb9 	mov.w	ip, r9, ror #6
 80038fa:	ea4f 0ab4 	mov.w	sl, r4, ror #2
 80038fe:	ea4b 0b07 	orr.w	fp, fp, r7
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 8003902:	f891 4028 	ldrb.w	r4, [r1, #40]	; 0x28
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 8003906:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003908:	ea88 0803 	eor.w	r8, r8, r3
 800390c:	ea8c 2cf9 	eor.w	ip, ip, r9, ror #11
 8003910:	ea8a 3a75 	eor.w	sl, sl, r5, ror #13
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 8003914:	0405      	lsls	r5, r0, #16
 8003916:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 800391a:	ea8c 6c79 	eor.w	ip, ip, r9, ror #25
 800391e:	ea8a 5ab7 	eor.w	sl, sl, r7, ror #22
 8003922:	4442      	add	r2, r8
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 8003924:	ea45 6404 	orr.w	r4, r5, r4, lsl #24
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 8003928:	4462      	add	r2, ip
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 800392a:	f891 802a 	ldrb.w	r8, [r1, #42]	; 0x2a
 800392e:	4304      	orrs	r4, r0
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 8003930:	44d3      	add	fp, sl
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003932:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 8003934:	4493      	add	fp, r2
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003936:	4d90      	ldr	r5, [pc, #576]	; (8003b78 <sha256_process+0x758>)
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 8003938:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 800393a:	ea44 2808 	orr.w	r8, r4, r8, lsl #8
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 800393e:	ea4b 0c00 	orr.w	ip, fp, r0
 8003942:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 8003944:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003948:	4445      	add	r5, r8
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 800394a:	4417      	add	r7, r2
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 800394c:	ea89 0a06 	eor.w	sl, r9, r6
 8003950:	ea4f 04bb 	mov.w	r4, fp, ror #2
 8003954:	442b      	add	r3, r5
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003956:	f891 b02c 	ldrb.w	fp, [r1, #44]	; 0x2c
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 800395a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800395c:	ea0c 0c00 	and.w	ip, ip, r0
 8003960:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003962:	ea07 0a0a 	and.w	sl, r7, sl
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003966:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
 800396a:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 800396e:	ea05 0b00 	and.w	fp, r5, r0
 8003972:	ea8a 0a06 	eor.w	sl, sl, r6
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 8003976:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 800397a:	4453      	add	r3, sl
 800397c:	ea4f 18b7 	mov.w	r8, r7, ror #6
 8003980:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8003984:	ea4c 0c0b 	orr.w	ip, ip, fp
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003988:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 800398c:	ea88 28f7 	eor.w	r8, r8, r7, ror #11
 8003990:	ea84 3475 	eor.w	r4, r4, r5, ror #13
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003994:	0412      	lsls	r2, r2, #16
 8003996:	f891 502f 	ldrb.w	r5, [r1, #47]	; 0x2f
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 800399a:	ea88 6877 	eor.w	r8, r8, r7, ror #25
 800399e:	ea84 54ba 	eor.w	r4, r4, sl, ror #22
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 80039a2:	ea42 620b 	orr.w	r2, r2, fp, lsl #24
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80039a6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 80039aa:	f891 b02e 	ldrb.w	fp, [r1, #46]	; 0x2e
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80039ae:	4443      	add	r3, r8
 80039b0:	44a4      	add	ip, r4
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 80039b2:	432a      	orrs	r2, r5
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 80039b4:	4c71      	ldr	r4, [pc, #452]	; (8003b7c <sha256_process+0x75c>)
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80039b6:	eb0c 0803 	add.w	r8, ip, r3
 80039ba:	449a      	add	sl, r3
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 80039bc:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 80039c0:	ea87 0c09 	eor.w	ip, r7, r9
 80039c4:	445c      	add	r4, fp
 80039c6:	ea0a 0c0c 	and.w	ip, sl, ip
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 80039ca:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 80039ce:	ea8c 0c09 	eor.w	ip, ip, r9
 80039d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80039d4:	4426      	add	r6, r4
 80039d6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 80039da:	f891 4030 	ldrb.w	r4, [r1, #48]	; 0x30
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 80039de:	4466      	add	r6, ip
 80039e0:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80039e4:	ea48 0002 	orr.w	r0, r8, r2
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 80039e8:	940c      	str	r4, [sp, #48]	; 0x30
 80039ea:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 80039ee:	ea00 000b 	and.w	r0, r0, fp
 80039f2:	ea08 0b0c 	and.w	fp, r8, ip
 80039f6:	ea4f 15ba 	mov.w	r5, sl, ror #6
 80039fa:	ea4f 02b8 	mov.w	r2, r8, ror #2
 80039fe:	ea40 000b 	orr.w	r0, r0, fp
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003a02:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8003a06:	f891 4033 	ldrb.w	r4, [r1, #51]	; 0x33
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003a0a:	ea85 25fa 	eor.w	r5, r5, sl, ror #11
 8003a0e:	ea82 3278 	eor.w	r2, r2, r8, ror #13
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003a12:	041b      	lsls	r3, r3, #16
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003a14:	ea85 657a 	eor.w	r5, r5, sl, ror #25
 8003a18:	ea82 52b8 	eor.w	r2, r2, r8, ror #22
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003a1c:	ea43 630b 	orr.w	r3, r3, fp, lsl #24
 8003a20:	f891 b032 	ldrb.w	fp, [r1, #50]	; 0x32
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003a24:	442e      	add	r6, r5
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003a26:	4323      	orrs	r3, r4
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003a28:	4410      	add	r0, r2
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003a2a:	4a55      	ldr	r2, [pc, #340]	; (8003b80 <sha256_process+0x760>)
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003a2c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003a2e:	ea43 2b0b 	orr.w	fp, r3, fp, lsl #8
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003a32:	4430      	add	r0, r6
 8003a34:	9009      	str	r0, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003a36:	445a      	add	r2, fp
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003a38:	4434      	add	r4, r6
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003a3a:	4491      	add	r9, r2
 8003a3c:	ea8a 0607 	eor.w	r6, sl, r7
 8003a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a42:	4026      	ands	r6, r4
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003a44:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003a48:	407e      	eors	r6, r7
 8003a4a:	ea4f 0cb2 	mov.w	ip, r2, ror #2
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003a4e:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003a52:	ea8c 3c72 	eor.w	ip, ip, r2, ror #13
 8003a56:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003a5a:	f891 2034 	ldrb.w	r2, [r1, #52]	; 0x34
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003a5e:	44b1      	add	r9, r6
 8003a60:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003a62:	ea40 0008 	orr.w	r0, r0, r8
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003a66:	041b      	lsls	r3, r3, #16
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003a68:	ea00 000b 	and.w	r0, r0, fp
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003a6c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003a70:	f891 b037 	ldrb.w	fp, [r1, #55]	; 0x37
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003a74:	ea06 0208 	and.w	r2, r6, r8
 8003a78:	4310      	orrs	r0, r2
 8003a7a:	ea4f 15b4 	mov.w	r5, r4, ror #6
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003a7e:	f891 2036 	ldrb.w	r2, [r1, #54]	; 0x36
 8003a82:	ea43 030b 	orr.w	r3, r3, fp
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003a86:	ea85 25f4 	eor.w	r5, r5, r4, ror #11
 8003a8a:	ea8c 5cb6 	eor.w	ip, ip, r6, ror #22
 8003a8e:	ea85 6574 	eor.w	r5, r5, r4, ror #25
 8003a92:	4484      	add	ip, r0
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003a94:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003a98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003a9a:	44a9      	add	r9, r5
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003a9c:	9218      	str	r2, [sp, #96]	; 0x60
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003a9e:	eb0c 0b09 	add.w	fp, ip, r9
 8003aa2:	4448      	add	r0, r9
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003aa4:	4e37      	ldr	r6, [pc, #220]	; (8003b84 <sha256_process+0x764>)
 8003aa6:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8003aaa:	ea84 020a 	eor.w	r2, r4, sl
 8003aae:	444e      	add	r6, r9
 8003ab0:	4002      	ands	r2, r0
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003ab2:	f891 5039 	ldrb.w	r5, [r1, #57]	; 0x39
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003ab6:	ea82 020a 	eor.w	r2, r2, sl
 8003aba:	443e      	add	r6, r7
 8003abc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003abe:	4416      	add	r6, r2
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003ac0:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003ac4:	ea4b 0307 	orr.w	r3, fp, r7
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003ac8:	042d      	lsls	r5, r5, #16
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003aca:	ea03 0308 	and.w	r3, r3, r8
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003ace:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003ad2:	ea0b 0207 	and.w	r2, fp, r7
 8003ad6:	4313      	orrs	r3, r2
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003ad8:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
 8003adc:	f891 703a 	ldrb.w	r7, [r1, #58]	; 0x3a
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003ae0:	ea4f 1cb0 	mov.w	ip, r0, ror #6
 8003ae4:	ea4f 09bb 	mov.w	r9, fp, ror #2
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003ae8:	4315      	orrs	r5, r2
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003aea:	ea8c 2cf0 	eor.w	ip, ip, r0, ror #11
 8003aee:	ea89 397b 	eor.w	r9, r9, fp, ror #13
 8003af2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003af4:	ea8c 6c70 	eor.w	ip, ip, r0, ror #25
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003af8:	ea45 2707 	orr.w	r7, r5, r7, lsl #8
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003afc:	ea89 59bb 	eor.w	r9, r9, fp, ror #22
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003b00:	970b      	str	r7, [sp, #44]	; 0x2c
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003b02:	4466      	add	r6, ip
 8003b04:	4499      	add	r9, r3
 8003b06:	4432      	add	r2, r6
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003b08:	4b1f      	ldr	r3, [pc, #124]	; (8003b88 <sha256_process+0x768>)
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003b0a:	444e      	add	r6, r9
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003b0c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8003b10:	ea80 0704 	eor.w	r7, r0, r4
 8003b14:	444b      	add	r3, r9
 8003b16:	4017      	ands	r7, r2
 8003b18:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8003b1c:	4067      	eors	r7, r4
 8003b1e:	449a      	add	sl, r3
 8003b20:	44ba      	add	sl, r7
 8003b22:	ea46 070b 	orr.w	r7, r6, fp
 8003b26:	ea06 030b 	and.w	r3, r6, fp
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003b2a:	f891 503d 	ldrb.w	r5, [r1, #61]	; 0x3d
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003b2e:	ea07 070c 	and.w	r7, r7, ip
 8003b32:	431f      	orrs	r7, r3
 8003b34:	ea4f 0cb6 	mov.w	ip, r6, ror #2
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003b38:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003b3c:	ea8c 3c76 	eor.w	ip, ip, r6, ror #13
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003b40:	042d      	lsls	r5, r5, #16
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003b42:	ea8c 5cb6 	eor.w	ip, ip, r6, ror #22
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003b46:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8003b4a:	f891 303f 	ldrb.w	r3, [r1, #63]	; 0x3f
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003b4e:	ea4f 19b2 	mov.w	r9, r2, ror #6
 8003b52:	4467      	add	r7, ip
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003b54:	f891 c03e 	ldrb.w	ip, [r1, #62]	; 0x3e
 8003b58:	431d      	orrs	r5, r3
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003b5a:	ea89 29f2 	eor.w	r9, r9, r2, ror #11
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003b5e:	490b      	ldr	r1, [pc, #44]	; (8003b8c <sha256_process+0x76c>)
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003b60:	ea45 2c0c 	orr.w	ip, r5, ip, lsl #8
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003b64:	ea89 6972 	eor.w	r9, r9, r2, ror #25
 8003b68:	e012      	b.n	8003b90 <sha256_process+0x770>
 8003b6a:	bf00      	nop
 8003b6c:	ab1c5ed5 	blge	871b6c8 <_etext+0x713ee0>
 8003b70:	d807aa98 	stmdale	r7, {r3, r4, r7, r9, fp, sp, pc}
 8003b74:	12835b01 	addne	r5, r3, #1024	; 0x400
 8003b78:	243185be 	ldrtcs	r8, [r1], #-1470	; 0x5be
 8003b7c:	550c7dc3 	strpl	r7, [ip, #-3523]	; 0xdc3
 8003b80:	72be5d74 	adcsvc	r5, lr, #116, 26	; 0x1d00
 8003b84:	80deb1fe 	ldrshhi	fp, [lr], #30
 8003b88:	9bdc06a7 	blls	770562c <__Stack_Size+0x7704e2c>
 8003b8c:	c19bf174 	orrsgt	pc, fp, r4, ror r1	; <UNPREDICTABLE>
 8003b90:	44ca      	add	sl, r9
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003b92:	4461      	add	r1, ip
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003b94:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003b98:	eb0a 0308 	add.w	r3, sl, r8
 8003b9c:	4457      	add	r7, sl
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003b9e:	440c      	add	r4, r1
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003ba0:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8003ba4:	991b      	ldr	r1, [sp, #108]	; 0x6c
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003ba6:	ea82 0900 	eor.w	r9, r2, r0
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003baa:	448a      	add	sl, r1
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003bac:	ea03 0909 	and.w	r9, r3, r9
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003bb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003bb2:	ea89 0900 	eor.w	r9, r9, r0
 8003bb6:	ea4f 1cb3 	mov.w	ip, r3, ror #6
 8003bba:	444c      	add	r4, r9
 8003bbc:	ea8c 2cf3 	eor.w	ip, ip, r3, ror #11
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003bc0:	ea4f 4971 	mov.w	r9, r1, ror #17
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003bc4:	ea47 0506 	orr.w	r5, r7, r6
 8003bc8:	ea4f 08b7 	mov.w	r8, r7, ror #2
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003bcc:	ea89 49f1 	eor.w	r9, r9, r1, ror #19
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003bd0:	ea8c 6c73 	eor.w	ip, ip, r3, ror #25
 8003bd4:	44a4      	add	ip, r4
 8003bd6:	ea05 050b 	and.w	r5, r5, fp
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003bda:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003bdc:	ea88 3877 	eor.w	r8, r8, r7, ror #13
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003be0:	ea89 2991 	eor.w	r9, r9, r1, lsr #10
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003be4:	ea07 0106 	and.w	r1, r7, r6
 8003be8:	ea88 58b7 	eor.w	r8, r8, r7, ror #22
 8003bec:	430d      	orrs	r5, r1
 8003bee:	4445      	add	r5, r8
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003bf0:	ea4f 18f4 	mov.w	r8, r4, ror #7
 8003bf4:	ea88 48b4 	eor.w	r8, r8, r4, ror #18
 8003bf8:	ea88 08d4 	eor.w	r8, r8, r4, lsr #3
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003bfc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003bfe:	44d1      	add	r9, sl
 8003c00:	49eb      	ldr	r1, [pc, #940]	; (8003fb0 <sha256_process+0xb90>)
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c02:	4464      	add	r4, ip
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c04:	44c8      	add	r8, r9
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c06:	4465      	add	r5, ip
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c08:	4441      	add	r1, r8
 8003c0a:	ea83 0c02 	eor.w	ip, r3, r2
 8003c0e:	ea4f 19b4 	mov.w	r9, r4, ror #6
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003c12:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c16:	ea04 0c0c 	and.w	ip, r4, ip
 8003c1a:	4408      	add	r0, r1
 8003c1c:	ea89 21f4 	eor.w	r1, r9, r4, ror #11
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003c20:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c24:	ea8c 0c02 	eor.w	ip, ip, r2
 8003c28:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003c2c:	44d1      	add	r9, sl
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c2e:	ea45 0807 	orr.w	r8, r5, r7
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003c32:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c36:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8003c3a:	4460      	add	r0, ip
 8003c3c:	4408      	add	r0, r1
 8003c3e:	ea08 0806 	and.w	r8, r8, r6
 8003c42:	ea05 0107 	and.w	r1, r5, r7
 8003c46:	ea4f 0cb5 	mov.w	ip, r5, ror #2
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003c4a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c4e:	ea8c 3c75 	eor.w	ip, ip, r5, ror #13
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003c52:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c56:	ea48 0801 	orr.w	r8, r8, r1
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003c5a:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c5c:	ea8c 5cb5 	eor.w	ip, ip, r5, ror #22
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003c60:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
 8003c64:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c68:	44e0      	add	r8, ip
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003c6a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003c6e:	ea4f 1cf1 	mov.w	ip, r1, ror #7
 8003c72:	ea8c 4cb1 	eor.w	ip, ip, r1, ror #18
 8003c76:	44d1      	add	r9, sl
 8003c78:	ea8c 0cd1 	eor.w	ip, ip, r1, lsr #3
 8003c7c:	49cd      	ldr	r1, [pc, #820]	; (8003fb4 <sha256_process+0xb94>)
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c7e:	4483      	add	fp, r0
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003c80:	44cc      	add	ip, r9
 8003c82:	ea84 0903 	eor.w	r9, r4, r3
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c86:	4480      	add	r8, r0
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003c88:	4461      	add	r1, ip
 8003c8a:	ea4f 10bb 	mov.w	r0, fp, ror #6
 8003c8e:	ea0b 0909 	and.w	r9, fp, r9
 8003c92:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8003c96:	ea89 0903 	eor.w	r9, r9, r3
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003c9a:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003c9e:	440a      	add	r2, r1
 8003ca0:	ea80 21fb 	eor.w	r1, r0, fp, ror #11
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003ca4:	980e      	ldr	r0, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003ca6:	ea48 0a05 	orr.w	sl, r8, r5
 8003caa:	ea81 617b 	eor.w	r1, r1, fp, ror #25
 8003cae:	444a      	add	r2, r9
 8003cb0:	ea4f 09b8 	mov.w	r9, r8, ror #2
 8003cb4:	440a      	add	r2, r1
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003cb6:	4484      	add	ip, r0
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003cb8:	ea08 0105 	and.w	r1, r8, r5
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003cbc:	980f      	ldr	r0, [sp, #60]	; 0x3c
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003cbe:	ea0a 0a07 	and.w	sl, sl, r7
 8003cc2:	ea89 3978 	eor.w	r9, r9, r8, ror #13
 8003cc6:	ea89 59b8 	eor.w	r9, r9, r8, ror #22
 8003cca:	ea4a 0a01 	orr.w	sl, sl, r1
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003cce:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003cd2:	44ca      	add	sl, r9
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003cd4:	ea4f 1cf0 	mov.w	ip, r0, ror #7
 8003cd8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003cdc:	ea8c 4cb0 	eor.w	ip, ip, r0, ror #18
 8003ce0:	ea8c 0cd0 	eor.w	ip, ip, r0, lsr #3
 8003ce4:	ea4f 4179 	mov.w	r1, r9, ror #17
 8003ce8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003cea:	ea81 41f9 	eor.w	r1, r1, r9, ror #19
 8003cee:	4484      	add	ip, r0
 8003cf0:	ea81 2199 	eor.w	r1, r1, r9, lsr #10
 8003cf4:	48b0      	ldr	r0, [pc, #704]	; (8003fb8 <sha256_process+0xb98>)
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003cf6:	4416      	add	r6, r2
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003cf8:	4461      	add	r1, ip
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003cfa:	4492      	add	sl, r2
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003cfc:	4408      	add	r0, r1
 8003cfe:	ea8b 0204 	eor.w	r2, fp, r4
 8003d02:	ea4f 1cb6 	mov.w	ip, r6, ror #6
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003d06:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d0a:	4032      	ands	r2, r6
 8003d0c:	4403      	add	r3, r0
 8003d0e:	ea8c 20f6 	eor.w	r0, ip, r6, ror #11
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003d12:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d16:	4062      	eors	r2, r4
 8003d18:	910d      	str	r1, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003d1a:	44e1      	add	r9, ip
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d1c:	ea4a 0108 	orr.w	r1, sl, r8
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003d20:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d24:	ea80 6076 	eor.w	r0, r0, r6, ror #25
 8003d28:	4413      	add	r3, r2
 8003d2a:	4403      	add	r3, r0
 8003d2c:	4029      	ands	r1, r5
 8003d2e:	ea0a 0008 	and.w	r0, sl, r8
 8003d32:	ea4f 02ba 	mov.w	r2, sl, ror #2
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003d36:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d3a:	ea82 327a 	eor.w	r2, r2, sl, ror #13
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003d3e:	ea4f 19fc 	mov.w	r9, ip, ror #7
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d42:	4301      	orrs	r1, r0
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003d44:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d46:	ea82 52ba 	eor.w	r2, r2, sl, ror #22
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003d4a:	ea89 49bc 	eor.w	r9, r9, ip, ror #18
 8003d4e:	ea89 09dc 	eor.w	r9, r9, ip, lsr #3
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d52:	4411      	add	r1, r2
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003d54:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8003d58:	ea4f 4270 	mov.w	r2, r0, ror #17
 8003d5c:	ea82 42f0 	eor.w	r2, r2, r0, ror #19
 8003d60:	44cc      	add	ip, r9
 8003d62:	ea82 2290 	eor.w	r2, r2, r0, lsr #10
 8003d66:	4895      	ldr	r0, [pc, #596]	; (8003fbc <sha256_process+0xb9c>)
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d68:	441f      	add	r7, r3
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003d6a:	4462      	add	r2, ip
 8003d6c:	ea86 090b 	eor.w	r9, r6, fp
 8003d70:	4410      	add	r0, r2
 8003d72:	ea07 0909 	and.w	r9, r7, r9
 8003d76:	ea4f 1cb7 	mov.w	ip, r7, ror #6
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d7a:	4419      	add	r1, r3
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003d7c:	920e      	str	r2, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003d7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003d80:	ea89 090b 	eor.w	r9, r9, fp
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003d84:	9a18      	ldr	r2, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003d86:	4420      	add	r0, r4
 8003d88:	ea8c 2cf7 	eor.w	ip, ip, r7, ror #11
 8003d8c:	ea41 040a 	orr.w	r4, r1, sl
 8003d90:	ea8c 6c77 	eor.w	ip, ip, r7, ror #25
 8003d94:	4448      	add	r0, r9
 8003d96:	ea4f 09b1 	mov.w	r9, r1, ror #2
 8003d9a:	4460      	add	r0, ip
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003d9c:	441a      	add	r2, r3
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003d9e:	ea01 0c0a 	and.w	ip, r1, sl
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003da2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003da4:	ea04 0408 	and.w	r4, r4, r8
 8003da8:	ea89 3971 	eor.w	r9, r9, r1, ror #13
 8003dac:	ea89 59b1 	eor.w	r9, r9, r1, ror #22
 8003db0:	ea44 040c 	orr.w	r4, r4, ip
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003db4:	920f      	str	r2, [sp, #60]	; 0x3c
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003db6:	444c      	add	r4, r9
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003db8:	ea4f 12f3 	mov.w	r2, r3, ror #7
 8003dbc:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8003dc0:	ea82 42b3 	eor.w	r2, r2, r3, ror #18
 8003dc4:	ea82 02d3 	eor.w	r2, r2, r3, lsr #3
 8003dc8:	ea4f 4c79 	mov.w	ip, r9, ror #17
 8003dcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003dce:	ea8c 4cf9 	eor.w	ip, ip, r9, ror #19
 8003dd2:	4413      	add	r3, r2
 8003dd4:	ea8c 2c99 	eor.w	ip, ip, r9, lsr #10
 8003dd8:	4a79      	ldr	r2, [pc, #484]	; (8003fc0 <sha256_process+0xba0>)
 8003dda:	449c      	add	ip, r3
 8003ddc:	4462      	add	r2, ip
 8003dde:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003de2:	4405      	add	r5, r0
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003de4:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003de8:	ea87 0306 	eor.w	r3, r7, r6
 8003dec:	4493      	add	fp, r2
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003dee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003df0:	402b      	ands	r3, r5
 8003df2:	ea4f 1cb5 	mov.w	ip, r5, ror #6
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003df6:	4404      	add	r4, r0
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003df8:	4073      	eors	r3, r6
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003dfa:	444a      	add	r2, r9
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003dfc:	ea8c 2cf5 	eor.w	ip, ip, r5, ror #11
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e00:	9210      	str	r2, [sp, #64]	; 0x40
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e02:	ea44 0001 	orr.w	r0, r4, r1
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e06:	9a12      	ldr	r2, [sp, #72]	; 0x48
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e08:	449b      	add	fp, r3
 8003e0a:	ea8c 6c75 	eor.w	ip, ip, r5, ror #25
 8003e0e:	44dc      	add	ip, fp
 8003e10:	ea00 000a 	and.w	r0, r0, sl
 8003e14:	ea04 0b01 	and.w	fp, r4, r1
 8003e18:	ea4f 09b4 	mov.w	r9, r4, ror #2
 8003e1c:	ea89 3974 	eor.w	r9, r9, r4, ror #13
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e20:	ea4f 13f2 	mov.w	r3, r2, ror #7
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e24:	ea40 000b 	orr.w	r0, r0, fp
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e28:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e2c:	ea89 59b4 	eor.w	r9, r9, r4, ror #22
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e30:	ea83 43b2 	eor.w	r3, r3, r2, ror #18
 8003e34:	ea83 03d2 	eor.w	r3, r3, r2, lsr #3
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e38:	4448      	add	r0, r9
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003e3c:	ea4f 497b 	mov.w	r9, fp, ror #17
 8003e40:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8003e44:	441a      	add	r2, r3
 8003e46:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 8003e4a:	4b5e      	ldr	r3, [pc, #376]	; (8003fc4 <sha256_process+0xba4>)
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e4c:	44e0      	add	r8, ip
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e4e:	4491      	add	r9, r2
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e50:	4460      	add	r0, ip
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e52:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8003e56:	ea85 0c07 	eor.w	ip, r5, r7
 8003e5a:	444b      	add	r3, r9
 8003e5c:	ea4f 19b8 	mov.w	r9, r8, ror #6
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003e60:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e64:	ea08 0c0c 	and.w	ip, r8, ip
 8003e68:	441e      	add	r6, r3
 8003e6a:	ea89 23f8 	eor.w	r3, r9, r8, ror #11
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003e6e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e72:	ea8c 0c07 	eor.w	ip, ip, r7
 8003e76:	ea40 0204 	orr.w	r2, r0, r4
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003e7a:	44d9      	add	r9, fp
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e7c:	ea83 6378 	eor.w	r3, r3, r8, ror #25
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003e80:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e84:	4466      	add	r6, ip
 8003e86:	441e      	add	r6, r3
 8003e88:	400a      	ands	r2, r1
 8003e8a:	ea00 0304 	and.w	r3, r0, r4
 8003e8e:	ea4f 0cb0 	mov.w	ip, r0, ror #2
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003e92:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e96:	ea8c 3c70 	eor.w	ip, ip, r0, ror #13
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003e9a:	ea4f 19fb 	mov.w	r9, fp, ror #7
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e9e:	431a      	orrs	r2, r3
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003ea0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003ea2:	ea8c 5cb0 	eor.w	ip, ip, r0, ror #22
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003ea6:	ea89 49bb 	eor.w	r9, r9, fp, ror #18
 8003eaa:	ea89 09db 	eor.w	r9, r9, fp, lsr #3
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003eae:	4462      	add	r2, ip
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003eb0:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8003eb4:	ea4f 4c73 	mov.w	ip, r3, ror #17
 8003eb8:	ea8c 4cf3 	eor.w	ip, ip, r3, ror #19
 8003ebc:	44cb      	add	fp, r9
 8003ebe:	ea8c 2c93 	eor.w	ip, ip, r3, lsr #10
 8003ec2:	44dc      	add	ip, fp
 8003ec4:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8003ec8:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8003ecc:	4b3e      	ldr	r3, [pc, #248]	; (8003fc8 <sha256_process+0xba8>)
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003ece:	4432      	add	r2, r6
 8003ed0:	44b2      	add	sl, r6
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003ed2:	ea88 0c05 	eor.w	ip, r8, r5
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003ed6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003ed8:	444b      	add	r3, r9
 8003eda:	ea0a 0c0c 	and.w	ip, sl, ip
 8003ede:	ea8c 0c05 	eor.w	ip, ip, r5
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003ee2:	ea4f 1bf6 	mov.w	fp, r6, ror #7
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003ee6:	441f      	add	r7, r3
 8003ee8:	ea4f 19ba 	mov.w	r9, sl, ror #6
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003eec:	ea8b 4bb6 	eor.w	fp, fp, r6, ror #18
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003ef0:	ea89 29fa 	eor.w	r9, r9, sl, ror #11
 8003ef4:	4467      	add	r7, ip
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003ef6:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003efa:	ea42 0300 	orr.w	r3, r2, r0
 8003efe:	ea89 697a 	eor.w	r9, r9, sl, ror #25
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f02:	ea8b 0bd6 	eor.w	fp, fp, r6, lsr #3
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f06:	ea4f 06b2 	mov.w	r6, r2, ror #2
 8003f0a:	444f      	add	r7, r9
 8003f0c:	4023      	ands	r3, r4
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f0e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8003f12:	44e3      	add	fp, ip
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f14:	ea86 3672 	eor.w	r6, r6, r2, ror #13
 8003f18:	ea02 0c00 	and.w	ip, r2, r0
 8003f1c:	ea86 56b2 	eor.w	r6, r6, r2, ror #22
 8003f20:	ea43 030c 	orr.w	r3, r3, ip
 8003f24:	4433      	add	r3, r6
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f26:	ea4f 4c79 	mov.w	ip, r9, ror #17
 8003f2a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003f2c:	ea8c 4cf9 	eor.w	ip, ip, r9, ror #19
 8003f30:	44b3      	add	fp, r6
 8003f32:	ea8c 2c99 	eor.w	ip, ip, r9, lsr #10
 8003f36:	4e25      	ldr	r6, [pc, #148]	; (8003fcc <sha256_process+0xbac>)
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f38:	443b      	add	r3, r7
 8003f3a:	4439      	add	r1, r7
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f3c:	44dc      	add	ip, fp
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003f3e:	9f14      	ldr	r7, [sp, #80]	; 0x50
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f40:	ea8a 0908 	eor.w	r9, sl, r8
 8003f44:	4466      	add	r6, ip
 8003f46:	ea01 0909 	and.w	r9, r1, r9
 8003f4a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8003f4e:	4435      	add	r5, r6
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003f50:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8003f54:	ea4f 1bf7 	mov.w	fp, r7, ror #7
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f58:	ea89 0908 	eor.w	r9, r9, r8
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003f5c:	ea8b 4bb7 	eor.w	fp, fp, r7, ror #18
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f60:	44a9      	add	r9, r5
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003f62:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8003f64:	ea8b 0bdc 	eor.w	fp, fp, ip, lsr #3
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f68:	ea43 0c02 	orr.w	ip, r3, r2
 8003f6c:	ea03 0602 	and.w	r6, r3, r2
 8003f70:	ea4f 17b1 	mov.w	r7, r1, ror #6
 8003f74:	ea0c 0c00 	and.w	ip, ip, r0
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003f78:	445d      	add	r5, fp
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f7a:	ea4f 0bb3 	mov.w	fp, r3, ror #2
 8003f7e:	ea87 27f1 	eor.w	r7, r7, r1, ror #11
 8003f82:	ea8b 3b73 	eor.w	fp, fp, r3, ror #13
 8003f86:	ea4c 0c06 	orr.w	ip, ip, r6
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003f8a:	9e11      	ldr	r6, [sp, #68]	; 0x44
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f8c:	ea87 6771 	eor.w	r7, r7, r1, ror #25
 8003f90:	ea8b 5bb3 	eor.w	fp, fp, r3, ror #22
 8003f94:	44b9      	add	r9, r7
 8003f96:	44dc      	add	ip, fp
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003f98:	ea4f 4776 	mov.w	r7, r6, ror #17
 8003f9c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8003fa0:	ea87 47f6 	eor.w	r7, r7, r6, ror #19
 8003fa4:	445d      	add	r5, fp
 8003fa6:	ea87 2796 	eor.w	r7, r7, r6, lsr #10
 8003faa:	19ef      	adds	r7, r5, r7
 8003fac:	e010      	b.n	8003fd0 <sha256_process+0xbb0>
 8003fae:	bf00      	nop
 8003fb0:	e49b69c1 	ldr	r6, [fp], #2497	; 0x9c1
 8003fb4:	efbe4786 	svc	0x00be4786
 8003fb8:	0fc19dc6 	svceq	0x00c19dc6
 8003fbc:	240ca1cc 	strcs	sl, [ip], #-460	; 0x1cc
 8003fc0:	2de92c6f 	stclcs	12, cr2, [r9, #444]!	; 0x1bc
 8003fc4:	4a7484aa 	bmi	9d25274 <_etext+0x1d1da8c>
 8003fc8:	5cb0a9dc 	ldcpl	9, cr10, [r0], #880	; 0x370
 8003fcc:	76f988da 	usatvc	r8, #25, sl, asr #17
 8003fd0:	9713      	str	r7, [sp, #76]	; 0x4c
 8003fd2:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8003fd6:	4ee6      	ldr	r6, [pc, #920]	; (8004370 <sha256_process+0xf50>)
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003fd8:	44cc      	add	ip, r9
 8003fda:	444c      	add	r4, r9
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003fdc:	ea81 050a 	eor.w	r5, r1, sl
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003fe0:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003fe4:	445e      	add	r6, fp
 8003fe6:	4025      	ands	r5, r4
 8003fe8:	ea85 050a 	eor.w	r5, r5, sl
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003fec:	ea4f 17f9 	mov.w	r7, r9, ror #7
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003ff0:	44b0      	add	r8, r6
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003ff2:	ea87 47b9 	eor.w	r7, r7, r9, ror #18
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003ff6:	ea4f 1bb4 	mov.w	fp, r4, ror #6
 8003ffa:	44a8      	add	r8, r5
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003ffc:	9d14      	ldr	r5, [sp, #80]	; 0x50
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003ffe:	ea8b 2bf4 	eor.w	fp, fp, r4, ror #11
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8004002:	ea87 07d9 	eor.w	r7, r7, r9, lsr #3
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8004006:	ea4c 0603 	orr.w	r6, ip, r3
 800400a:	ea8b 6b74 	eor.w	fp, fp, r4, ror #25
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 800400e:	442f      	add	r7, r5
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8004010:	ea4f 05bc 	mov.w	r5, ip, ror #2
 8004014:	44d8      	add	r8, fp
 8004016:	ea0c 0903 	and.w	r9, ip, r3
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 800401a:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 800401e:	4016      	ands	r6, r2
 8004020:	ea85 357c 	eor.w	r5, r5, ip, ror #13
 8004024:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
 8004028:	ea46 0609 	orr.w	r6, r6, r9
 800402c:	442e      	add	r6, r5
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 800402e:	ea4f 497b 	mov.w	r9, fp, ror #17
 8004032:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004034:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8004038:	442f      	add	r7, r5
 800403a:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 800403e:	44b9      	add	r9, r7
 8004040:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8004044:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8004048:	4dca      	ldr	r5, [pc, #808]	; (8004374 <sha256_process+0xf54>)
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 800404a:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 800404e:	4440      	add	r0, r8
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8004050:	ea84 0701 	eor.w	r7, r4, r1
 8004054:	445d      	add	r5, fp
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8004056:	4446      	add	r6, r8
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8004058:	44aa      	add	sl, r5
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 800405a:	ea4f 18f9 	mov.w	r8, r9, ror #7
 800405e:	9d16      	ldr	r5, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8004060:	4007      	ands	r7, r0
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8004062:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 8004066:	ea88 48b9 	eor.w	r8, r8, r9, ror #18
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 800406a:	404f      	eors	r7, r1
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 800406c:	ea88 08d5 	eor.w	r8, r8, r5, lsr #3
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8004070:	4457      	add	r7, sl
 8004072:	ea46 0a0c 	orr.w	sl, r6, ip
 8004076:	ea06 050c 	and.w	r5, r6, ip
 800407a:	ea4f 19b0 	mov.w	r9, r0, ror #6
 800407e:	ea0a 0a03 	and.w	sl, sl, r3
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8004082:	44d8      	add	r8, fp
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8004084:	ea4f 0bb6 	mov.w	fp, r6, ror #2
 8004088:	ea89 29f0 	eor.w	r9, r9, r0, ror #11
 800408c:	ea8b 3b76 	eor.w	fp, fp, r6, ror #13
 8004090:	ea4a 0a05 	orr.w	sl, sl, r5
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8004094:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8004096:	ea89 6970 	eor.w	r9, r9, r0, ror #25
 800409a:	ea8b 5bb6 	eor.w	fp, fp, r6, ror #22
 800409e:	444f      	add	r7, r9
 80040a0:	44da      	add	sl, fp
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 80040a2:	ea4f 4975 	mov.w	r9, r5, ror #17
 80040a6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80040aa:	ea89 49f5 	eor.w	r9, r9, r5, ror #19
 80040ae:	44d8      	add	r8, fp
 80040b0:	ea89 2995 	eor.w	r9, r9, r5, lsr #10
 80040b4:	44c1      	add	r9, r8
 80040b6:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 80040ba:	44ba      	add	sl, r7
 80040bc:	443a      	add	r2, r7
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 80040be:	4dae      	ldr	r5, [pc, #696]	; (8004378 <sha256_process+0xf58>)
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80040c0:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 80040c2:	ea80 0804 	eor.w	r8, r0, r4
 80040c6:	444d      	add	r5, r9
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80040c8:	ea4f 1bf7 	mov.w	fp, r7, ror #7
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 80040cc:	ea02 0808 	and.w	r8, r2, r8
 80040d0:	4429      	add	r1, r5
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80040d2:	ea8b 4bb7 	eor.w	fp, fp, r7, ror #18
 80040d6:	9d16      	ldr	r5, [sp, #88]	; 0x58
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 80040d8:	ea88 0804 	eor.w	r8, r8, r4
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80040dc:	ea8b 0bd7 	eor.w	fp, fp, r7, lsr #3
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 80040e0:	4488      	add	r8, r1
 80040e2:	ea4a 0106 	orr.w	r1, sl, r6
 80040e6:	ea4f 19b2 	mov.w	r9, r2, ror #6
 80040ea:	ea01 010c 	and.w	r1, r1, ip
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80040ee:	44ab      	add	fp, r5
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 80040f0:	ea4f 07ba 	mov.w	r7, sl, ror #2
 80040f4:	ea0a 0506 	and.w	r5, sl, r6
 80040f8:	ea89 29f2 	eor.w	r9, r9, r2, ror #11
 80040fc:	ea87 377a 	eor.w	r7, r7, sl, ror #13
 8004100:	4329      	orrs	r1, r5
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004102:	9d14      	ldr	r5, [sp, #80]	; 0x50
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8004104:	ea89 6972 	eor.w	r9, r9, r2, ror #25
 8004108:	ea87 57ba 	eor.w	r7, r7, sl, ror #22
 800410c:	44c8      	add	r8, r9
 800410e:	4439      	add	r1, r7
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004110:	ea4f 4975 	mov.w	r9, r5, ror #17
 8004114:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8004116:	ea89 49f5 	eor.w	r9, r9, r5, ror #19
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 800411a:	4441      	add	r1, r8
 800411c:	4443      	add	r3, r8
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 800411e:	44bb      	add	fp, r7
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004120:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004124:	ea89 2995 	eor.w	r9, r9, r5, lsr #10
 8004128:	4f94      	ldr	r7, [pc, #592]	; (800437c <sha256_process+0xf5c>)
 800412a:	44d9      	add	r9, fp
 800412c:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 8004130:	ea82 0500 	eor.w	r5, r2, r0
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004134:	ea4f 1bf8 	mov.w	fp, r8, ror #7
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004138:	444f      	add	r7, r9
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 800413a:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 800413e:	401d      	ands	r5, r3
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004140:	ea8b 4bb8 	eor.w	fp, fp, r8, ror #18
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004144:	4427      	add	r7, r4
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004146:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004148:	4045      	eors	r5, r0
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 800414a:	ea8b 0bd9 	eor.w	fp, fp, r9, lsr #3
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 800414e:	ea41 090a 	orr.w	r9, r1, sl
 8004152:	ea4f 18b3 	mov.w	r8, r3, ror #6
 8004156:	442f      	add	r7, r5
 8004158:	ea09 0906 	and.w	r9, r9, r6
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 800415c:	44a3      	add	fp, r4
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 800415e:	ea4f 05b1 	mov.w	r5, r1, ror #2
 8004162:	ea01 040a 	and.w	r4, r1, sl
 8004166:	ea88 28f3 	eor.w	r8, r8, r3, ror #11
 800416a:	ea85 3571 	eor.w	r5, r5, r1, ror #13
 800416e:	ea49 0904 	orr.w	r9, r9, r4
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004172:	9c15      	ldr	r4, [sp, #84]	; 0x54
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004174:	ea88 6873 	eor.w	r8, r8, r3, ror #25
 8004178:	ea85 55b1 	eor.w	r5, r5, r1, ror #22
 800417c:	4447      	add	r7, r8
 800417e:	44a9      	add	r9, r5
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004180:	ea4f 4874 	mov.w	r8, r4, ror #17
 8004184:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004186:	ea88 48f4 	eor.w	r8, r8, r4, ror #19
 800418a:	44ab      	add	fp, r5
 800418c:	ea88 2894 	eor.w	r8, r8, r4, lsr #10
 8004190:	44d8      	add	r8, fp
 8004192:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004196:	eb07 040c 	add.w	r4, r7, ip
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 800419a:	4d79      	ldr	r5, [pc, #484]	; (8004380 <sha256_process+0xf60>)
 800419c:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80041a0:	44b9      	add	r9, r7
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041a2:	ea83 0b02 	eor.w	fp, r3, r2
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80041a6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041a8:	4465      	add	r5, ip
 80041aa:	ea04 0b0b 	and.w	fp, r4, fp
 80041ae:	ea8b 0b02 	eor.w	fp, fp, r2
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80041b2:	ea4f 18f7 	mov.w	r8, r7, ror #7
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041b6:	4428      	add	r0, r5
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80041b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80041ba:	ea88 48b7 	eor.w	r8, r8, r7, ror #18
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041be:	4458      	add	r0, fp
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80041c0:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041c4:	ea49 0c01 	orr.w	ip, r9, r1
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80041c8:	ea88 08d5 	eor.w	r8, r8, r5, lsr #3
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041cc:	ea4f 17b4 	mov.w	r7, r4, ror #6
 80041d0:	ea09 0501 	and.w	r5, r9, r1
 80041d4:	ea0c 0c0a 	and.w	ip, ip, sl
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80041d8:	44d8      	add	r8, fp
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041da:	ea4f 0bb9 	mov.w	fp, r9, ror #2
 80041de:	ea87 27f4 	eor.w	r7, r7, r4, ror #11
 80041e2:	ea8b 3b79 	eor.w	fp, fp, r9, ror #13
 80041e6:	ea4c 0c05 	orr.w	ip, ip, r5
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80041ea:	9d16      	ldr	r5, [sp, #88]	; 0x58
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041ec:	ea87 6774 	eor.w	r7, r7, r4, ror #25
 80041f0:	ea8b 5bb9 	eor.w	fp, fp, r9, ror #22
 80041f4:	4438      	add	r0, r7
 80041f6:	44dc      	add	ip, fp
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80041f8:	ea4f 4775 	mov.w	r7, r5, ror #17
 80041fc:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8004200:	ea87 47f5 	eor.w	r7, r7, r5, ror #19
 8004204:	44d8      	add	r8, fp
 8004206:	ea87 2795 	eor.w	r7, r7, r5, lsr #10
 800420a:	4d5e      	ldr	r5, [pc, #376]	; (8004384 <sha256_process+0xf64>)
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 800420c:	eb00 0b06 	add.w	fp, r0, r6
 8004210:	4484      	add	ip, r0
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8004212:	4447      	add	r7, r8
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004214:	980c      	ldr	r0, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8004216:	ea84 0603 	eor.w	r6, r4, r3
 800421a:	443d      	add	r5, r7
 800421c:	ea0b 0606 	and.w	r6, fp, r6
 8004220:	405e      	eors	r6, r3
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004222:	ea4f 18f0 	mov.w	r8, r0, ror #7
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8004226:	442a      	add	r2, r5
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004228:	ea88 48b0 	eor.w	r8, r8, r0, ror #18
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 800422c:	4432      	add	r2, r6
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 800422e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004230:	ea88 05d0 	eor.w	r5, r8, r0, lsr #3
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8004234:	ea4c 0809 	orr.w	r8, ip, r9
 8004238:	9718      	str	r7, [sp, #96]	; 0x60
 800423a:	ea08 0801 	and.w	r8, r8, r1
 800423e:	ea0c 0009 	and.w	r0, ip, r9
 8004242:	ea4f 17bb 	mov.w	r7, fp, ror #6
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004246:	4435      	add	r5, r6
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8004248:	ea4f 06bc 	mov.w	r6, ip, ror #2
 800424c:	ea87 27fb 	eor.w	r7, r7, fp, ror #11
 8004250:	ea86 367c 	eor.w	r6, r6, ip, ror #13
 8004254:	ea48 0000 	orr.w	r0, r8, r0
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004258:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 800425c:	ea87 677b 	eor.w	r7, r7, fp, ror #25
 8004260:	ea86 56bc 	eor.w	r6, r6, ip, ror #22
 8004264:	443a      	add	r2, r7
 8004266:	4430      	add	r0, r6
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004268:	ea4f 4778 	mov.w	r7, r8, ror #17
 800426c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800426e:	ea87 47f8 	eor.w	r7, r7, r8, ror #19
 8004272:	4435      	add	r5, r6
 8004274:	ea87 2898 	eor.w	r8, r7, r8, lsr #10
 8004278:	4e43      	ldr	r6, [pc, #268]	; (8004388 <sha256_process+0xf68>)
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 800427a:	4492      	add	sl, r2
 800427c:	4410      	add	r0, r2
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 800427e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004280:	44a8      	add	r8, r5
 8004282:	ea8b 0204 	eor.w	r2, fp, r4
 8004286:	4446      	add	r6, r8
 8004288:	ea0a 0202 	and.w	r2, sl, r2
 800428c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8004290:	4062      	eors	r2, r4
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004292:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8004296:	ea4f 15f7 	mov.w	r5, r7, ror #7
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 800429a:	4433      	add	r3, r6
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 800429c:	ea85 45b7 	eor.w	r5, r5, r7, ror #18
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 80042a0:	4413      	add	r3, r2
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80042a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042a4:	ea85 05d8 	eor.w	r5, r5, r8, lsr #3
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 80042a8:	ea40 080c 	orr.w	r8, r0, ip
 80042ac:	ea08 0809 	and.w	r8, r8, r9
 80042b0:	ea00 060c 	and.w	r6, r0, ip
 80042b4:	ea4f 17ba 	mov.w	r7, sl, ror #6
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80042b8:	4415      	add	r5, r2
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 80042ba:	ea4f 02b0 	mov.w	r2, r0, ror #2
 80042be:	ea87 27fa 	eor.w	r7, r7, sl, ror #11
 80042c2:	ea82 3270 	eor.w	r2, r2, r0, ror #13
 80042c6:	ea48 0606 	orr.w	r6, r8, r6
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80042ca:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 80042ce:	ea87 677a 	eor.w	r7, r7, sl, ror #25
 80042d2:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 80042d6:	443b      	add	r3, r7
 80042d8:	4416      	add	r6, r2
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80042da:	ea4f 4778 	mov.w	r7, r8, ror #17
 80042de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80042e0:	ea87 47f8 	eor.w	r7, r7, r8, ror #19
 80042e4:	4415      	add	r5, r2
 80042e6:	ea87 2798 	eor.w	r7, r7, r8, lsr #10
 80042ea:	4a28      	ldr	r2, [pc, #160]	; (800438c <sha256_process+0xf6c>)
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 80042ec:	4419      	add	r1, r3
 80042ee:	441e      	add	r6, r3
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80042f0:	19ef      	adds	r7, r5, r7
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80042f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80042f4:	ea8a 050b 	eor.w	r5, sl, fp
 80042f8:	443a      	add	r2, r7
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80042fa:	ea4f 18f3 	mov.w	r8, r3, ror #7
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80042fe:	400d      	ands	r5, r1
 8004300:	4422      	add	r2, r4
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004302:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004304:	970c      	str	r7, [sp, #48]	; 0x30
 8004306:	ea85 050b 	eor.w	r5, r5, fp
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 800430a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800430c:	ea88 48b3 	eor.w	r8, r8, r3, ror #18
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004310:	ea4f 13b1 	mov.w	r3, r1, ror #6
 8004314:	ea83 23f1 	eor.w	r3, r3, r1, ror #11
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004318:	ea88 08d4 	eor.w	r8, r8, r4, lsr #3
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 800431c:	442a      	add	r2, r5
 800431e:	ea46 0500 	orr.w	r5, r6, r0
 8004322:	ea83 6471 	eor.w	r4, r3, r1, ror #25
 8004326:	ea05 050c 	and.w	r5, r5, ip
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 800432a:	44b8      	add	r8, r7
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 800432c:	ea4f 03b6 	mov.w	r3, r6, ror #2
 8004330:	ea06 0700 	and.w	r7, r6, r0
 8004334:	ea83 3376 	eor.w	r3, r3, r6, ror #13
 8004338:	432f      	orrs	r7, r5
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 800433a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 800433c:	ea83 53b6 	eor.w	r3, r3, r6, ror #22
 8004340:	4422      	add	r2, r4
 8004342:	441f      	add	r7, r3
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004344:	ea4f 4475 	mov.w	r4, r5, ror #17
 8004348:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800434a:	ea84 44f5 	eor.w	r4, r4, r5, ror #19
 800434e:	4498      	add	r8, r3
 8004350:	ea84 2495 	eor.w	r4, r4, r5, lsr #10
 8004354:	4444      	add	r4, r8
 8004356:	9409      	str	r4, [sp, #36]	; 0x24
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <sha256_process+0xf70>)
 800435a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 800435c:	4417      	add	r7, r2
 800435e:	4491      	add	r9, r2
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004360:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004362:	ea81 020a 	eor.w	r2, r1, sl
 8004366:	442b      	add	r3, r5
 8004368:	ea09 0202 	and.w	r2, r9, r2
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 800436c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800436e:	e011      	b.n	8004394 <sha256_process+0xf74>
 8004370:	983e5152 	ldmdals	lr!, {r1, r4, r6, r8, ip, lr}
 8004374:	a831c66d 	ldmdage	r1!, {r0, r2, r3, r5, r6, r9, sl, lr, pc}
 8004378:	b00327c8 	andlt	r2, r3, r8, asr #15
 800437c:	bf597fc7 	svclt	0x00597fc7
 8004380:	c6e00bf3 			; <UNDEFINED> instruction: 0xc6e00bf3
 8004384:	d5a79147 	strle	r9, [r7, #327]!	; 0x147
 8004388:	06ca6351 			; <UNDEFINED> instruction: 0x06ca6351
 800438c:	14292967 	strtne	r2, [r9], #-2407	; 0x967
 8004390:	27b70a85 	ldrcs	r0, [r7, r5, lsl #21]!
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004394:	ea82 020a 	eor.w	r2, r2, sl
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004398:	ea4f 18f4 	mov.w	r8, r4, ror #7
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 800439c:	445b      	add	r3, fp
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 800439e:	ea88 48b4 	eor.w	r8, r8, r4, ror #18
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80043a2:	4413      	add	r3, r2
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80043a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043a6:	ea88 0bd5 	eor.w	fp, r8, r5, lsr #3
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80043aa:	ea47 0806 	orr.w	r8, r7, r6
 80043ae:	ea08 0800 	and.w	r8, r8, r0
 80043b2:	ea07 0506 	and.w	r5, r7, r6
 80043b6:	ea4f 14b9 	mov.w	r4, r9, ror #6
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80043ba:	4493      	add	fp, r2
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80043bc:	ea4f 02b7 	mov.w	r2, r7, ror #2
 80043c0:	ea84 24f9 	eor.w	r4, r4, r9, ror #11
 80043c4:	ea82 3277 	eor.w	r2, r2, r7, ror #13
 80043c8:	ea48 0505 	orr.w	r5, r8, r5
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80043cc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80043d0:	ea84 6479 	eor.w	r4, r4, r9, ror #25
 80043d4:	ea82 52b7 	eor.w	r2, r2, r7, ror #22
 80043d8:	4423      	add	r3, r4
 80043da:	4415      	add	r5, r2
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80043dc:	ea4f 4478 	mov.w	r4, r8, ror #17
 80043e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80043e2:	ea84 44f8 	eor.w	r4, r4, r8, ror #19
 80043e6:	4493      	add	fp, r2
 80043e8:	ea84 2498 	eor.w	r4, r4, r8, lsr #10
 80043ec:	445c      	add	r4, fp
 80043ee:	940a      	str	r4, [sp, #40]	; 0x28
 80043f0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80043f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80043f6:	4af1      	ldr	r2, [pc, #964]	; (80047bc <sha256_process+0x139c>)
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80043f8:	449c      	add	ip, r3
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80043fa:	ea89 0b01 	eor.w	fp, r9, r1
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80043fe:	441d      	add	r5, r3
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004400:	4442      	add	r2, r8
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004402:	ea4f 13f4 	mov.w	r3, r4, ror #7
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004406:	ea0c 0b0b 	and.w	fp, ip, fp
 800440a:	ea8b 0b01 	eor.w	fp, fp, r1
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 800440e:	ea83 43b4 	eor.w	r3, r3, r4, ror #18
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004412:	4452      	add	r2, sl
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004414:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8004418:	ea83 03d4 	eor.w	r3, r3, r4, lsr #3
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 800441c:	445a      	add	r2, fp
 800441e:	ea45 0b07 	orr.w	fp, r5, r7
 8004422:	ea0b 0b06 	and.w	fp, fp, r6
 8004426:	ea05 0407 	and.w	r4, r5, r7
 800442a:	ea4f 18bc 	mov.w	r8, ip, ror #6
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 800442e:	449a      	add	sl, r3
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004430:	ea4f 03b5 	mov.w	r3, r5, ror #2
 8004434:	ea88 28fc 	eor.w	r8, r8, ip, ror #11
 8004438:	ea83 3375 	eor.w	r3, r3, r5, ror #13
 800443c:	ea4b 0404 	orr.w	r4, fp, r4
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004440:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004444:	ea88 687c 	eor.w	r8, r8, ip, ror #25
 8004448:	ea83 53b5 	eor.w	r3, r3, r5, ror #22
 800444c:	4442      	add	r2, r8
 800444e:	441c      	add	r4, r3
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004450:	ea4f 487b 	mov.w	r8, fp, ror #17
 8004454:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004456:	ea88 48fb 	eor.w	r8, r8, fp, ror #19
 800445a:	449a      	add	sl, r3
 800445c:	ea88 289b 	eor.w	r8, r8, fp, lsr #10
 8004460:	44d0      	add	r8, sl
 8004462:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004466:	4410      	add	r0, r2
 8004468:	4414      	add	r4, r2
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 800446a:	4bd5      	ldr	r3, [pc, #852]	; (80047c0 <sha256_process+0x13a0>)
 800446c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800446e:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004472:	ea8c 0b09 	eor.w	fp, ip, r9
 8004476:	4413      	add	r3, r2
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004478:	ea4f 1af8 	mov.w	sl, r8, ror #7
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 800447c:	ea00 0b0b 	and.w	fp, r0, fp
 8004480:	440b      	add	r3, r1
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004482:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004484:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004486:	ea8b 0b09 	eor.w	fp, fp, r9
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800448a:	ea8a 4ab8 	eor.w	sl, sl, r8, ror #18
 800448e:	ea8a 0ad1 	eor.w	sl, sl, r1, lsr #3
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004492:	445b      	add	r3, fp
 8004494:	ea44 0b05 	orr.w	fp, r4, r5
 8004498:	ea0b 0b07 	and.w	fp, fp, r7
 800449c:	ea04 0105 	and.w	r1, r4, r5
 80044a0:	ea4f 18b0 	mov.w	r8, r0, ror #6
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 80044a4:	4492      	add	sl, r2
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80044a6:	ea4f 02b4 	mov.w	r2, r4, ror #2
 80044aa:	ea88 28f0 	eor.w	r8, r8, r0, ror #11
 80044ae:	ea82 3274 	eor.w	r2, r2, r4, ror #13
 80044b2:	ea4b 0101 	orr.w	r1, fp, r1
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 80044b6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80044ba:	ea88 6870 	eor.w	r8, r8, r0, ror #25
 80044be:	ea82 52b4 	eor.w	r2, r2, r4, ror #22
 80044c2:	4443      	add	r3, r8
 80044c4:	4411      	add	r1, r2
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 80044c6:	ea4f 487b 	mov.w	r8, fp, ror #17
 80044ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80044cc:	ea88 48fb 	eor.w	r8, r8, fp, ror #19
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80044d0:	441e      	add	r6, r3
 80044d2:	4419      	add	r1, r3
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 80044d4:	4492      	add	sl, r2
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80044d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 80044d8:	ea88 289b 	eor.w	r8, r8, fp, lsr #10
 80044dc:	4ab9      	ldr	r2, [pc, #740]	; (80047c4 <sha256_process+0x13a4>)
 80044de:	44d0      	add	r8, sl
 80044e0:	ea80 0b0c 	eor.w	fp, r0, ip
 80044e4:	4442      	add	r2, r8
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80044e6:	ea4f 1af3 	mov.w	sl, r3, ror #7
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 80044ea:	ea06 0b0b 	and.w	fp, r6, fp
 80044ee:	ea8b 0b0c 	eor.w	fp, fp, ip
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80044f2:	ea8a 4ab3 	eor.w	sl, sl, r3, ror #18
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 80044f6:	4491      	add	r9, r2
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80044f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80044fa:	ea8a 0ad3 	eor.w	sl, sl, r3, lsr #3
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 80044fe:	44d9      	add	r9, fp
 8004500:	ea41 0b04 	orr.w	fp, r1, r4
 8004504:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004508:	ea0b 0b05 	and.w	fp, fp, r5
 800450c:	ea4f 18b6 	mov.w	r8, r6, ror #6
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004510:	4492      	add	sl, r2
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004512:	ea4f 03b1 	mov.w	r3, r1, ror #2
 8004516:	ea01 0204 	and.w	r2, r1, r4
 800451a:	ea88 28f6 	eor.w	r8, r8, r6, ror #11
 800451e:	ea83 3371 	eor.w	r3, r3, r1, ror #13
 8004522:	ea4b 0202 	orr.w	r2, fp, r2
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004526:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800452a:	ea88 6876 	eor.w	r8, r8, r6, ror #25
 800452e:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
 8004532:	44c1      	add	r9, r8
 8004534:	441a      	add	r2, r3
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004536:	ea4f 487b 	mov.w	r8, fp, ror #17
 800453a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800453c:	ea88 48fb 	eor.w	r8, r8, fp, ror #19
 8004540:	449a      	add	sl, r3
 8004542:	ea88 289b 	eor.w	r8, r8, fp, lsr #10
 8004546:	44d0      	add	r8, sl
 8004548:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800454c:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8004550:	4b9d      	ldr	r3, [pc, #628]	; (80047c8 <sha256_process+0x13a8>)
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004552:	444a      	add	r2, r9
 8004554:	444f      	add	r7, r9
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004556:	ea86 0800 	eor.w	r8, r6, r0
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 800455a:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 800455e:	445b      	add	r3, fp
 8004560:	ea07 0808 	and.w	r8, r7, r8
 8004564:	ea88 0800 	eor.w	r8, r8, r0
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004568:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 800456c:	449c      	add	ip, r3
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 800456e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004570:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004574:	44c4      	add	ip, r8
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004576:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 800457a:	ea42 0b01 	orr.w	fp, r2, r1
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 800457e:	ea8a 0ad3 	eor.w	sl, sl, r3, lsr #3
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004582:	ea0b 0b04 	and.w	fp, fp, r4
 8004586:	ea02 0301 	and.w	r3, r2, r1
 800458a:	ea4f 19b7 	mov.w	r9, r7, ror #6
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 800458e:	44c2      	add	sl, r8
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004590:	ea4f 08b2 	mov.w	r8, r2, ror #2
 8004594:	ea89 29f7 	eor.w	r9, r9, r7, ror #11
 8004598:	ea88 3872 	eor.w	r8, r8, r2, ror #13
 800459c:	ea4b 0303 	orr.w	r3, fp, r3
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80045a0:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80045a4:	ea89 6977 	eor.w	r9, r9, r7, ror #25
 80045a8:	ea88 58b2 	eor.w	r8, r8, r2, ror #22
 80045ac:	44cc      	add	ip, r9
 80045ae:	4443      	add	r3, r8
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80045b0:	ea4f 497b 	mov.w	r9, fp, ror #17
 80045b4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80045b8:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 80045bc:	44c2      	add	sl, r8
 80045be:	ea89 2b9b 	eor.w	fp, r9, fp, lsr #10
 80045c2:	44d3      	add	fp, sl
 80045c4:	f8df 820c 	ldr.w	r8, [pc, #524]	; 80047d4 <sha256_process+0x13b4>
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80045c8:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80045cc:	4465      	add	r5, ip
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80045ce:	ea87 0906 	eor.w	r9, r7, r6
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80045d2:	4463      	add	r3, ip
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80045d4:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80045d8:	ea4f 1cfa 	mov.w	ip, sl, ror #7
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80045dc:	44d8      	add	r8, fp
 80045de:	ea05 0909 	and.w	r9, r5, r9
 80045e2:	ea4f 1bb5 	mov.w	fp, r5, ror #6
 80045e6:	ea89 0906 	eor.w	r9, r9, r6
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80045ea:	ea8c 4cba 	eor.w	ip, ip, sl, ror #18
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80045ee:	4480      	add	r8, r0
 80045f0:	ea8b 2bf5 	eor.w	fp, fp, r5, ror #11
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80045f4:	9811      	ldr	r0, [sp, #68]	; 0x44
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80045f6:	ea8b 6b75 	eor.w	fp, fp, r5, ror #25
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80045fa:	ea8c 0cda 	eor.w	ip, ip, sl, lsr #3
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80045fe:	44c8      	add	r8, r9
 8004600:	ea43 0a02 	orr.w	sl, r3, r2
 8004604:	ea4f 09b3 	mov.w	r9, r3, ror #2
 8004608:	44d8      	add	r8, fp
 800460a:	ea0a 0a01 	and.w	sl, sl, r1
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 800460e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8004612:	4484      	add	ip, r0
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004614:	ea89 3973 	eor.w	r9, r9, r3, ror #13
 8004618:	ea03 0002 	and.w	r0, r3, r2
 800461c:	ea89 59b3 	eor.w	r9, r9, r3, ror #22
 8004620:	ea4a 0000 	orr.w	r0, sl, r0
 8004624:	4448      	add	r0, r9
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004626:	ea4f 4a7b 	mov.w	sl, fp, ror #17
 800462a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800462e:	ea8a 4afb 	eor.w	sl, sl, fp, ror #19
 8004632:	44cc      	add	ip, r9
 8004634:	ea8a 2a9b 	eor.w	sl, sl, fp, lsr #10
 8004638:	44e2      	add	sl, ip
 800463a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800463e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 80047d8 <sha256_process+0x13b8>
 8004642:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004646:	4440      	add	r0, r8
 8004648:	4444      	add	r4, r8
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 800464a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 800464e:	ea85 0807 	eor.w	r8, r5, r7
 8004652:	44d9      	add	r9, fp
 8004654:	ea04 0808 	and.w	r8, r4, r8
 8004658:	ea88 0807 	eor.w	r8, r8, r7
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 800465c:	ea4f 1cfa 	mov.w	ip, sl, ror #7
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004660:	44b1      	add	r9, r6
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004662:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004664:	44c1      	add	r9, r8
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004666:	ea8c 4cba 	eor.w	ip, ip, sl, ror #18
 800466a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 800466e:	ea40 0b03 	orr.w	fp, r0, r3
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004672:	ea8c 0cd6 	eor.w	ip, ip, r6, lsr #3
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004676:	ea0b 0b02 	and.w	fp, fp, r2
 800467a:	ea00 0603 	and.w	r6, r0, r3
 800467e:	ea4f 1ab4 	mov.w	sl, r4, ror #6
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004682:	44c4      	add	ip, r8
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004684:	ea4f 08b0 	mov.w	r8, r0, ror #2
 8004688:	ea8a 2af4 	eor.w	sl, sl, r4, ror #11
 800468c:	ea88 3870 	eor.w	r8, r8, r0, ror #13
 8004690:	ea4b 0606 	orr.w	r6, fp, r6
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004694:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004698:	ea88 58b0 	eor.w	r8, r8, r0, ror #22
 800469c:	ea8a 6a74 	eor.w	sl, sl, r4, ror #25
 80046a0:	44ca      	add	sl, r9
 80046a2:	4446      	add	r6, r8
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80046a4:	ea4f 497b 	mov.w	r9, fp, ror #17
 80046a8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80046ac:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 80046b0:	44c4      	add	ip, r8
 80046b2:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 80046b6:	44e1      	add	r9, ip
 80046b8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80046bc:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80046c0:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 80046c4:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80047dc <sha256_process+0x13bc>
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80046c8:	4451      	add	r1, sl
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80046ca:	ea84 0905 	eor.w	r9, r4, r5
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80046ce:	4456      	add	r6, sl
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80046d0:	44e0      	add	r8, ip
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80046d2:	ea4f 1afb 	mov.w	sl, fp, ror #7
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80046d6:	ea01 0909 	and.w	r9, r1, r9
 80046da:	ea89 0905 	eor.w	r9, r9, r5
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80046de:	ea8a 4abb 	eor.w	sl, sl, fp, ror #18
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80046e2:	4447      	add	r7, r8
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80046e4:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80046e8:	444f      	add	r7, r9
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80046ea:	ea8a 0adb 	eor.w	sl, sl, fp, lsr #3
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80046ee:	ea46 0900 	orr.w	r9, r6, r0
 80046f2:	ea09 0903 	and.w	r9, r9, r3
 80046f6:	ea4f 1cb1 	mov.w	ip, r1, ror #6
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80046fa:	44c2      	add	sl, r8
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80046fc:	ea4f 0bb6 	mov.w	fp, r6, ror #2
 8004700:	ea06 0800 	and.w	r8, r6, r0
 8004704:	ea8c 2cf1 	eor.w	ip, ip, r1, ror #11
 8004708:	ea8b 3b76 	eor.w	fp, fp, r6, ror #13
 800470c:	ea49 0808 	orr.w	r8, r9, r8
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004710:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004714:	ea8b 5bb6 	eor.w	fp, fp, r6, ror #22
 8004718:	ea8c 6c71 	eor.w	ip, ip, r1, ror #25
 800471c:	44bc      	add	ip, r7
 800471e:	44d8      	add	r8, fp
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004720:	ea4f 4779 	mov.w	r7, r9, ror #17
 8004724:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004728:	ea87 47f9 	eor.w	r7, r7, r9, ror #19
 800472c:	44da      	add	sl, fp
 800472e:	ea87 2999 	eor.w	r9, r7, r9, lsr #10
 8004732:	44d1      	add	r9, sl
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004734:	4462      	add	r2, ip
 8004736:	44e0      	add	r8, ip
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004738:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 800473c:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004740:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004744:	4f21      	ldr	r7, [pc, #132]	; (80047cc <sha256_process+0x13ac>)
 8004746:	ea81 0b04 	eor.w	fp, r1, r4
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 800474a:	ea4f 19fc 	mov.w	r9, ip, ror #7
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 800474e:	4457      	add	r7, sl
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004750:	ea89 49bc 	eor.w	r9, r9, ip, ror #18
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004754:	ea02 0b0b 	and.w	fp, r2, fp
 8004758:	ea8b 0b04 	eor.w	fp, fp, r4
 800475c:	443d      	add	r5, r7
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 800475e:	ea89 07dc 	eor.w	r7, r9, ip, lsr #3
 8004762:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004766:	445d      	add	r5, fp
 8004768:	ea48 0b06 	orr.w	fp, r8, r6
 800476c:	ea0b 0b00 	and.w	fp, fp, r0
 8004770:	ea4f 1ab2 	mov.w	sl, r2, ror #6
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004774:	4467      	add	r7, ip
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004776:	ea08 0c06 	and.w	ip, r8, r6
 800477a:	ea8a 2af2 	eor.w	sl, sl, r2, ror #11
 800477e:	ea4b 0c0c 	orr.w	ip, fp, ip
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004782:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004786:	ea8a 6a72 	eor.w	sl, sl, r2, ror #25
 800478a:	44aa      	add	sl, r5
 800478c:	ea4f 09b8 	mov.w	r9, r8, ror #2
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004790:	ea4f 457b 	mov.w	r5, fp, ror #17
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004794:	ea89 3978 	eor.w	r9, r9, r8, ror #13
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004798:	ea85 45fb 	eor.w	r5, r5, fp, ror #19
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 800479c:	ea89 59b8 	eor.w	r9, r9, r8, ror #22
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80047a0:	ea85 2b9b 	eor.w	fp, r5, fp, lsr #10
 80047a4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80047a6:	44cc      	add	ip, r9
 80047a8:	44d4      	add	ip, sl
 80047aa:	4453      	add	r3, sl
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80047ac:	442f      	add	r7, r5
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80047ae:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80047b2:	4d07      	ldr	r5, [pc, #28]	; (80047d0 <sha256_process+0x13b0>)
 80047b4:	44bb      	add	fp, r7
 80047b6:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
 80047ba:	e011      	b.n	80047e0 <sha256_process+0x13c0>
 80047bc:	2e1b2138 	mrccs	1, 0, r2, cr11, cr8, {1}
 80047c0:	4d2c6dfc 	stcmi	13, cr6, [ip, #-1008]!	; 0xfffffc10
 80047c4:	53380d13 	teqpl	r8, #1216	; 0x4c0
 80047c8:	650a7354 	strvs	r7, [sl, #-852]	; 0x354
 80047cc:	a2bfe8a1 	adcsge	lr, pc, #10551296	; 0xa10000
 80047d0:	a81a664b 	ldmdage	sl, {r0, r1, r3, r6, r9, sl, sp, lr}
 80047d4:	766a0abb 			; <UNDEFINED> instruction: 0x766a0abb
 80047d8:	81c2c92e 	bichi	ip, r2, lr, lsr #18
 80047dc:	92722c85 	rsbsls	r2, r2, #34048	; 0x8500
 80047e0:	ea82 0701 	eor.w	r7, r2, r1
 80047e4:	445d      	add	r5, fp
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80047e6:	ea4f 19fa 	mov.w	r9, sl, ror #7
 80047ea:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80047ee:	401f      	ands	r7, r3
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80047f0:	ea89 49ba 	eor.w	r9, r9, sl, ror #18
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80047f4:	442c      	add	r4, r5
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80047f6:	9d15      	ldr	r5, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80047f8:	404f      	eors	r7, r1
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80047fa:	ea89 09db 	eor.w	r9, r9, fp, lsr #3
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80047fe:	ea4c 0b08 	orr.w	fp, ip, r8
 8004802:	ea0b 0b06 	and.w	fp, fp, r6
 8004806:	ea4f 1ab3 	mov.w	sl, r3, ror #6
 800480a:	443c      	add	r4, r7
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 800480c:	44a9      	add	r9, r5
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 800480e:	ea4f 07bc 	mov.w	r7, ip, ror #2
 8004812:	ea0c 0508 	and.w	r5, ip, r8
 8004816:	ea8a 2af3 	eor.w	sl, sl, r3, ror #11
 800481a:	ea87 377c 	eor.w	r7, r7, ip, ror #13
 800481e:	ea4b 0505 	orr.w	r5, fp, r5
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004822:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004826:	ea8a 6a73 	eor.w	sl, sl, r3, ror #25
 800482a:	ea87 57bc 	eor.w	r7, r7, ip, ror #22
 800482e:	4454      	add	r4, sl
 8004830:	443d      	add	r5, r7
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004832:	ea4f 4a7b 	mov.w	sl, fp, ror #17
 8004836:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004838:	ea8a 4afb 	eor.w	sl, sl, fp, ror #19
 800483c:	44b9      	add	r9, r7
 800483e:	ea8a 2a9b 	eor.w	sl, sl, fp, lsr #10
 8004842:	44ca      	add	sl, r9
 8004844:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004848:	4420      	add	r0, r4
 800484a:	4425      	add	r5, r4
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 800484c:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004850:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8004852:	4fee      	ldr	r7, [pc, #952]	; (8004c0c <sha256_process+0x17ec>)
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004854:	ea4f 19fb 	mov.w	r9, fp, ror #7
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004858:	4427      	add	r7, r4
 800485a:	ea83 0a02 	eor.w	sl, r3, r2
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 800485e:	ea89 49bb 	eor.w	r9, r9, fp, ror #18
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004862:	4439      	add	r1, r7
 8004864:	ea4f 1bb0 	mov.w	fp, r0, ror #6
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004868:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 800486a:	ea8b 2bf0 	eor.w	fp, fp, r0, ror #11
 800486e:	ea00 0a0a 	and.w	sl, r0, sl
 8004872:	ea8a 0a02 	eor.w	sl, sl, r2
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004876:	ea89 09d7 	eor.w	r9, r9, r7, lsr #3
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 800487a:	ea8b 6770 	eor.w	r7, fp, r0, ror #25
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 800487e:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004882:	4451      	add	r1, sl
 8004884:	ea45 0a0c 	orr.w	sl, r5, ip
 8004888:	ea0a 0a08 	and.w	sl, sl, r8
 800488c:	ea05 040c 	and.w	r4, r5, ip
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004890:	44d9      	add	r9, fp
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004892:	ea4f 0bb5 	mov.w	fp, r5, ror #2
 8004896:	ea8b 3b75 	eor.w	fp, fp, r5, ror #13
 800489a:	ea4a 0404 	orr.w	r4, sl, r4
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 800489e:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80048a2:	ea8b 5bb5 	eor.w	fp, fp, r5, ror #22
 80048a6:	4439      	add	r1, r7
 80048a8:	445c      	add	r4, fp
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80048aa:	ea4f 477a 	mov.w	r7, sl, ror #17
 80048ae:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80048b2:	ea87 47fa 	eor.w	r7, r7, sl, ror #19
 80048b6:	44d9      	add	r9, fp
 80048b8:	ea87 2a9a 	eor.w	sl, r7, sl, lsr #10
 80048bc:	4fd4      	ldr	r7, [pc, #848]	; (8004c10 <sha256_process+0x17f0>)
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80048be:	440c      	add	r4, r1
 80048c0:	440e      	add	r6, r1
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80048c2:	44ca      	add	sl, r9
 80048c4:	ea80 0103 	eor.w	r1, r0, r3
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80048c8:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80048cc:	4457      	add	r7, sl
 80048ce:	4031      	ands	r1, r6
 80048d0:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
 80048d4:	4059      	eors	r1, r3
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80048d6:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 80048da:	ea4f 1bf9 	mov.w	fp, r9, ror #7
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80048de:	4417      	add	r7, r2
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80048e0:	ea8b 4bb9 	eor.w	fp, fp, r9, ror #18
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80048e4:	440f      	add	r7, r1
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80048e6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80048e8:	ea8b 0bda 	eor.w	fp, fp, sl, lsr #3
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80048ec:	ea44 0a05 	orr.w	sl, r4, r5
 80048f0:	ea0a 0a0c 	and.w	sl, sl, ip
 80048f4:	ea04 0205 	and.w	r2, r4, r5
 80048f8:	ea4f 19b6 	mov.w	r9, r6, ror #6
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80048fc:	448b      	add	fp, r1
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80048fe:	ea4f 01b4 	mov.w	r1, r4, ror #2
 8004902:	ea89 29f6 	eor.w	r9, r9, r6, ror #11
 8004906:	ea81 3174 	eor.w	r1, r1, r4, ror #13
 800490a:	ea4a 0202 	orr.w	r2, sl, r2
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 800490e:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004912:	ea89 6976 	eor.w	r9, r9, r6, ror #25
 8004916:	ea81 51b4 	eor.w	r1, r1, r4, ror #22
 800491a:	444f      	add	r7, r9
 800491c:	440a      	add	r2, r1
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 800491e:	ea4f 497a 	mov.w	r9, sl, ror #17
 8004922:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004924:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
 8004928:	448b      	add	fp, r1
 800492a:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 800492e:	44d9      	add	r9, fp
 8004930:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004934:	44b8      	add	r8, r7
 8004936:	443a      	add	r2, r7
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004938:	49b6      	ldr	r1, [pc, #728]	; (8004c14 <sha256_process+0x17f4>)
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 800493a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 800493c:	ea86 0b00 	eor.w	fp, r6, r0
 8004940:	4449      	add	r1, r9
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004942:	ea4f 1af7 	mov.w	sl, r7, ror #7
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004946:	ea08 0b0b 	and.w	fp, r8, fp
 800494a:	ea8b 0b00 	eor.w	fp, fp, r0
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 800494e:	ea8a 4ab7 	eor.w	sl, sl, r7, ror #18
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004952:	440b      	add	r3, r1
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004954:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004956:	ea8a 0ad7 	eor.w	sl, sl, r7, lsr #3
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 800495a:	445b      	add	r3, fp
 800495c:	ea42 0b04 	orr.w	fp, r2, r4
 8004960:	ea0b 0b05 	and.w	fp, fp, r5
 8004964:	ea4f 19b8 	mov.w	r9, r8, ror #6
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004968:	448a      	add	sl, r1
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 800496a:	ea4f 07b2 	mov.w	r7, r2, ror #2
 800496e:	ea02 0104 	and.w	r1, r2, r4
 8004972:	ea89 29f8 	eor.w	r9, r9, r8, ror #11
 8004976:	ea87 3772 	eor.w	r7, r7, r2, ror #13
 800497a:	ea4b 0101 	orr.w	r1, fp, r1
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 800497e:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004982:	ea89 6978 	eor.w	r9, r9, r8, ror #25
 8004986:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 800498a:	444b      	add	r3, r9
 800498c:	4439      	add	r1, r7
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 800498e:	ea4f 497b 	mov.w	r9, fp, ror #17
 8004992:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8004994:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8004998:	44ba      	add	sl, r7
 800499a:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 800499e:	44d1      	add	r9, sl
 80049a0:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80049a4:	449c      	add	ip, r3
 80049a6:	4419      	add	r1, r3
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80049a8:	4f9b      	ldr	r7, [pc, #620]	; (8004c18 <sha256_process+0x17f8>)
 80049aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 80049ac:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80049b0:	ea88 0906 	eor.w	r9, r8, r6
 80049b4:	441f      	add	r7, r3
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 80049b6:	ea4f 1afb 	mov.w	sl, fp, ror #7
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80049ba:	ea0c 0909 	and.w	r9, ip, r9
 80049be:	4407      	add	r7, r0
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 80049c0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80049c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80049c4:	ea89 0906 	eor.w	r9, r9, r6
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 80049c8:	ea8a 4abb 	eor.w	sl, sl, fp, ror #18
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80049cc:	ea4f 1bbc 	mov.w	fp, ip, ror #6
 80049d0:	ea8b 2bfc 	eor.w	fp, fp, ip, ror #11
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 80049d4:	ea8a 0ad0 	eor.w	sl, sl, r0, lsr #3
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80049d8:	444f      	add	r7, r9
 80049da:	ea41 0902 	orr.w	r9, r1, r2
 80049de:	ea8b 607c 	eor.w	r0, fp, ip, ror #25
 80049e2:	ea09 0904 	and.w	r9, r9, r4
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 80049e6:	449a      	add	sl, r3
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80049e8:	ea4f 0bb1 	mov.w	fp, r1, ror #2
 80049ec:	ea01 0302 	and.w	r3, r1, r2
 80049f0:	ea8b 3b71 	eor.w	fp, fp, r1, ror #13
 80049f4:	ea49 0303 	orr.w	r3, r9, r3
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 80049f8:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80049fc:	ea8b 5bb1 	eor.w	fp, fp, r1, ror #22
 8004a00:	4407      	add	r7, r0
 8004a02:	445b      	add	r3, fp
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a04:	ea4f 4079 	mov.w	r0, r9, ror #17
 8004a08:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8004a0c:	ea80 40f9 	eor.w	r0, r0, r9, ror #19
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a10:	443b      	add	r3, r7
 8004a12:	443d      	add	r5, r7
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a14:	44da      	add	sl, fp
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004a16:	9f09      	ldr	r7, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a18:	ea80 2999 	eor.w	r9, r0, r9, lsr #10
 8004a1c:	487f      	ldr	r0, [pc, #508]	; (8004c1c <sha256_process+0x17fc>)
 8004a1e:	44d1      	add	r9, sl
 8004a20:	ea8c 0b08 	eor.w	fp, ip, r8
 8004a24:	4448      	add	r0, r9
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004a26:	ea4f 1af7 	mov.w	sl, r7, ror #7
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a2a:	ea05 0b0b 	and.w	fp, r5, fp
 8004a2e:	ea8b 0b08 	eor.w	fp, fp, r8
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004a32:	ea8a 4ab7 	eor.w	sl, sl, r7, ror #18
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a36:	4406      	add	r6, r0
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004a38:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004a3a:	ea8a 0ad7 	eor.w	sl, sl, r7, lsr #3
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a3e:	445e      	add	r6, fp
 8004a40:	ea43 0b01 	orr.w	fp, r3, r1
 8004a44:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8004a48:	ea0b 0b02 	and.w	fp, fp, r2
 8004a4c:	ea4f 19b5 	mov.w	r9, r5, ror #6
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004a50:	4482      	add	sl, r0
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a52:	ea4f 07b3 	mov.w	r7, r3, ror #2
 8004a56:	ea03 0001 	and.w	r0, r3, r1
 8004a5a:	ea89 29f5 	eor.w	r9, r9, r5, ror #11
 8004a5e:	ea87 3773 	eor.w	r7, r7, r3, ror #13
 8004a62:	ea4b 0000 	orr.w	r0, fp, r0
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004a66:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a6a:	ea89 6975 	eor.w	r9, r9, r5, ror #25
 8004a6e:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
 8004a72:	444e      	add	r6, r9
 8004a74:	4438      	add	r0, r7
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004a76:	ea4f 497b 	mov.w	r9, fp, ror #17
 8004a7a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8004a7c:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8004a80:	44ba      	add	sl, r7
 8004a82:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 8004a86:	44d1      	add	r9, sl
 8004a88:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a8c:	4430      	add	r0, r6
 8004a8e:	4434      	add	r4, r6
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004a90:	4f63      	ldr	r7, [pc, #396]	; (8004c20 <sha256_process+0x1800>)
 8004a92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004a94:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004a98:	4437      	add	r7, r6
 8004a9a:	ea85 0a0c 	eor.w	sl, r5, ip
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004a9e:	ea4f 1bf9 	mov.w	fp, r9, ror #7
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004aa2:	4447      	add	r7, r8
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004aa4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004aa8:	ea04 0a0a 	and.w	sl, r4, sl
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004aac:	ea8b 4bb9 	eor.w	fp, fp, r9, ror #18
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004ab0:	ea8a 0a0c 	eor.w	sl, sl, ip
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004ab4:	ea8b 0bd8 	eor.w	fp, fp, r8, lsr #3
 8004ab8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004abc:	4457      	add	r7, sl
 8004abe:	ea40 0a03 	orr.w	sl, r0, r3
 8004ac2:	ea0a 0a01 	and.w	sl, sl, r1
 8004ac6:	ea00 0603 	and.w	r6, r0, r3
 8004aca:	ea4f 19b4 	mov.w	r9, r4, ror #6
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004ace:	44d8      	add	r8, fp
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004ad0:	ea4f 0bb0 	mov.w	fp, r0, ror #2
 8004ad4:	ea89 29f4 	eor.w	r9, r9, r4, ror #11
 8004ad8:	ea8b 3b70 	eor.w	fp, fp, r0, ror #13
 8004adc:	ea4a 0606 	orr.w	r6, sl, r6
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004ae0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004ae4:	ea8b 5bb0 	eor.w	fp, fp, r0, ror #22
 8004ae8:	ea89 6974 	eor.w	r9, r9, r4, ror #25
 8004aec:	44b9      	add	r9, r7
 8004aee:	445e      	add	r6, fp
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004af0:	ea4f 477a 	mov.w	r7, sl, ror #17
 8004af4:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8004af8:	ea87 47fa 	eor.w	r7, r7, sl, ror #19
 8004afc:	44d8      	add	r8, fp
 8004afe:	ea87 2a9a 	eor.w	sl, r7, sl, lsr #10
 8004b02:	44c2      	add	sl, r8
 8004b04:	4f47      	ldr	r7, [pc, #284]	; (8004c24 <sha256_process+0x1804>)
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004b06:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b0a:	444a      	add	r2, r9
 8004b0c:	444e      	add	r6, r9
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b0e:	ea84 0905 	eor.w	r9, r4, r5
 8004b12:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004b16:	ea4f 1bf8 	mov.w	fp, r8, ror #7
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b1a:	4457      	add	r7, sl
 8004b1c:	ea02 0909 	and.w	r9, r2, r9
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004b20:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b24:	ea89 0905 	eor.w	r9, r9, r5
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004b28:	ea8b 4bb8 	eor.w	fp, fp, r8, ror #18
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b2c:	4467      	add	r7, ip
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004b2e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b32:	444f      	add	r7, r9
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004b34:	ea8b 0bda 	eor.w	fp, fp, sl, lsr #3
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b38:	ea46 0900 	orr.w	r9, r6, r0
 8004b3c:	ea09 0903 	and.w	r9, r9, r3
 8004b40:	ea4f 18b2 	mov.w	r8, r2, ror #6
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004b44:	44e3      	add	fp, ip
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b46:	ea4f 0ab6 	mov.w	sl, r6, ror #2
 8004b4a:	ea06 0c00 	and.w	ip, r6, r0
 8004b4e:	ea88 28f2 	eor.w	r8, r8, r2, ror #11
 8004b52:	ea8a 3a76 	eor.w	sl, sl, r6, ror #13
 8004b56:	ea49 0c0c 	orr.w	ip, r9, ip
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004b5a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b5e:	ea8a 5ab6 	eor.w	sl, sl, r6, ror #22
 8004b62:	ea88 6872 	eor.w	r8, r8, r2, ror #25
 8004b66:	44b8      	add	r8, r7
 8004b68:	44d4      	add	ip, sl
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004b6a:	ea4f 4779 	mov.w	r7, r9, ror #17
 8004b6e:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8004b72:	ea87 47f9 	eor.w	r7, r7, r9, ror #19
 8004b76:	ea87 2999 	eor.w	r9, r7, r9, lsr #10
 8004b7a:	44d3      	add	fp, sl
 8004b7c:	4f2a      	ldr	r7, [pc, #168]	; (8004c28 <sha256_process+0x1808>)
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b7e:	44c4      	add	ip, r8
 8004b80:	4441      	add	r1, r8
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004b82:	44cb      	add	fp, r9
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004b84:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004b88:	445f      	add	r7, fp
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004b8a:	ea4f 1af8 	mov.w	sl, r8, ror #7
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004b8e:	443d      	add	r5, r7
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004b90:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004b92:	ea82 0904 	eor.w	r9, r2, r4
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004b96:	ea8a 4ab8 	eor.w	sl, sl, r8, ror #18
 8004b9a:	ea8a 0ad7 	eor.w	sl, sl, r7, lsr #3
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004b9e:	ea01 0909 	and.w	r9, r1, r9
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004ba2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004ba4:	ea4f 18b1 	mov.w	r8, r1, ror #6
 8004ba8:	ea89 0904 	eor.w	r9, r9, r4
 8004bac:	ea88 28f1 	eor.w	r8, r8, r1, ror #11
 8004bb0:	444d      	add	r5, r9
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004bb2:	4457      	add	r7, sl
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004bb4:	ea4c 0906 	orr.w	r9, ip, r6
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004bb8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004bbc:	ea88 6871 	eor.w	r8, r8, r1, ror #25
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004bc0:	9709      	str	r7, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004bc2:	44a8      	add	r8, r5
 8004bc4:	ea09 0900 	and.w	r9, r9, r0
 8004bc8:	ea0c 0506 	and.w	r5, ip, r6
 8004bcc:	ea4f 07bc 	mov.w	r7, ip, ror #2
 8004bd0:	ea87 377c 	eor.w	r7, r7, ip, ror #13
 8004bd4:	ea49 0505 	orr.w	r5, r9, r5
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004bd8:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004bdc:	ea87 57bc 	eor.w	r7, r7, ip, ror #22
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004be0:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004be4:	443d      	add	r5, r7
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004be6:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 8004bea:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8004bec:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004bf0:	4445      	add	r5, r8
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004bf2:	44ba      	add	sl, r7
 8004bf4:	44d1      	add	r9, sl
 8004bf6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004bfa:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004bfe:	4f0b      	ldr	r7, [pc, #44]	; (8004c2c <sha256_process+0x180c>)
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004c00:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c04:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8004c08:	e012      	b.n	8004c30 <sha256_process+0x1810>
 8004c0a:	bf00      	nop
 8004c0c:	c24b8b70 	subgt	r8, fp, #112, 22	; 0x1c000
 8004c10:	c76c51a3 	strbgt	r5, [ip, -r3, lsr #3]!
 8004c14:	d192e819 	orrsle	lr, r2, r9, lsl r8
 8004c18:	d6990624 	ldrle	r0, [r9], r4, lsr #12
 8004c1c:	f40e3585 	vst3.32	{d3,d5,d7}, [lr], r5
 8004c20:	106aa070 	rsbne	sl, sl, r0, ror r0
 8004c24:	19a4c116 	stmibne	r4!, {r1, r2, r4, r8, lr, pc}
 8004c28:	1e376c08 	cdpne	12, 3, cr6, cr7, cr8, {0}
 8004c2c:	2748774c 	strbcs	r7, [r8, -ip, asr #14]
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c30:	4443      	add	r3, r8
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c32:	444f      	add	r7, r9
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004c34:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c38:	443c      	add	r4, r7
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004c3a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c3c:	ea81 0802 	eor.w	r8, r1, r2
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004c40:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c44:	ea03 0808 	and.w	r8, r3, r8
 8004c48:	ea4f 19b3 	mov.w	r9, r3, ror #6
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004c4c:	ea8a 0ad7 	eor.w	sl, sl, r7, lsr #3
 8004c50:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c52:	ea88 0802 	eor.w	r8, r8, r2
 8004c56:	ea89 29f3 	eor.w	r9, r9, r3, ror #11
 8004c5a:	ea89 6973 	eor.w	r9, r9, r3, ror #25
 8004c5e:	4444      	add	r4, r8
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004c60:	44ba      	add	sl, r7
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c62:	ea45 080c 	orr.w	r8, r5, ip
 8004c66:	ea4f 07b5 	mov.w	r7, r5, ror #2
 8004c6a:	444c      	add	r4, r9
 8004c6c:	ea08 0806 	and.w	r8, r8, r6
 8004c70:	ea05 090c 	and.w	r9, r5, ip
 8004c74:	ea87 3775 	eor.w	r7, r7, r5, ror #13
 8004c78:	ea87 57b5 	eor.w	r7, r7, r5, ror #22
 8004c7c:	ea48 0809 	orr.w	r8, r8, r9
 8004c80:	44b8      	add	r8, r7
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004c82:	ea4f 497b 	mov.w	r9, fp, ror #17
 8004c86:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8004c88:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8004c8c:	44ba      	add	sl, r7
 8004c8e:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 8004c92:	44d1      	add	r9, sl
 8004c94:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004c98:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004c9c:	4fe8      	ldr	r7, [pc, #928]	; (8005040 <sha256_process+0x1c20>)
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004c9e:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004ca2:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004ca6:	44a0      	add	r8, r4
 8004ca8:	4420      	add	r0, r4
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004caa:	ea83 0401 	eor.w	r4, r3, r1
 8004cae:	444f      	add	r7, r9
 8004cb0:	4004      	ands	r4, r0
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004cb2:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004cb6:	404c      	eors	r4, r1
 8004cb8:	4417      	add	r7, r2
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004cba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004cbc:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004cc0:	4427      	add	r7, r4
 8004cc2:	ea4f 19b0 	mov.w	r9, r0, ror #6
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004cc6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8004cc8:	ea8a 0ad2 	eor.w	sl, sl, r2, lsr #3
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004ccc:	ea89 29f0 	eor.w	r9, r9, r0, ror #11
 8004cd0:	ea48 0205 	orr.w	r2, r8, r5
 8004cd4:	ea89 6970 	eor.w	r9, r9, r0, ror #25
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004cd8:	4454      	add	r4, sl
 8004cda:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8004cde:	9409      	str	r4, [sp, #36]	; 0x24
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004ce0:	444f      	add	r7, r9
 8004ce2:	ea02 020c 	and.w	r2, r2, ip
 8004ce6:	ea08 0905 	and.w	r9, r8, r5
 8004cea:	ea4f 04b8 	mov.w	r4, r8, ror #2
 8004cee:	ea84 3478 	eor.w	r4, r4, r8, ror #13
 8004cf2:	ea42 0209 	orr.w	r2, r2, r9
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004cf6:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004cfa:	ea84 54b8 	eor.w	r4, r4, r8, ror #22
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004cfe:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d02:	4422      	add	r2, r4
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d04:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 8004d08:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8004d0a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d0e:	443a      	add	r2, r7
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d10:	44a2      	add	sl, r4
 8004d12:	44d1      	add	r9, sl
 8004d14:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004d18:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d1c:	4cc9      	ldr	r4, [pc, #804]	; (8005044 <sha256_process+0x1c24>)
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004d1e:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d22:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d26:	443e      	add	r6, r7
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d28:	444c      	add	r4, r9
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004d2a:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d2e:	4421      	add	r1, r4
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004d30:	9c11      	ldr	r4, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d32:	ea80 0703 	eor.w	r7, r0, r3
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004d36:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
 8004d3a:	ea8a 0ad4 	eor.w	sl, sl, r4, lsr #3
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d3e:	4037      	ands	r7, r6
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004d40:	9c10      	ldr	r4, [sp, #64]	; 0x40
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d42:	ea4f 19b6 	mov.w	r9, r6, ror #6
 8004d46:	405f      	eors	r7, r3
 8004d48:	ea89 29f6 	eor.w	r9, r9, r6, ror #11
 8004d4c:	ea89 6976 	eor.w	r9, r9, r6, ror #25
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004d50:	4454      	add	r4, sl
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d52:	440f      	add	r7, r1
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004d54:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d58:	ea42 0108 	orr.w	r1, r2, r8
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004d5c:	9409      	str	r4, [sp, #36]	; 0x24
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d5e:	444f      	add	r7, r9
 8004d60:	4029      	ands	r1, r5
 8004d62:	ea02 0908 	and.w	r9, r2, r8
 8004d66:	ea4f 04b2 	mov.w	r4, r2, ror #2
 8004d6a:	ea84 3472 	eor.w	r4, r4, r2, ror #13
 8004d6e:	ea41 0109 	orr.w	r1, r1, r9
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004d72:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d76:	ea84 54b2 	eor.w	r4, r4, r2, ror #22
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004d7a:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d7e:	4421      	add	r1, r4
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004d80:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 8004d84:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004d86:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d8a:	4439      	add	r1, r7
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004d8c:	44a2      	add	sl, r4
 8004d8e:	44d1      	add	r9, sl
 8004d90:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004d94:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004d98:	4cab      	ldr	r4, [pc, #684]	; (8005048 <sha256_process+0x1c28>)
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004d9a:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004d9e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004da2:	44bc      	add	ip, r7
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004da4:	ea86 0700 	eor.w	r7, r6, r0
 8004da8:	444c      	add	r4, r9
 8004daa:	ea0c 0707 	and.w	r7, ip, r7
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004dae:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004db2:	4047      	eors	r7, r0
 8004db4:	4423      	add	r3, r4
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004db6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004db8:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004dbc:	443b      	add	r3, r7
 8004dbe:	ea4f 19bc 	mov.w	r9, ip, ror #6
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004dc2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8004dc4:	ea8a 0ad4 	eor.w	sl, sl, r4, lsr #3
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004dc8:	ea89 29fc 	eor.w	r9, r9, ip, ror #11
 8004dcc:	ea41 0402 	orr.w	r4, r1, r2
 8004dd0:	ea89 697c 	eor.w	r9, r9, ip, ror #25
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004dd4:	4457      	add	r7, sl
 8004dd6:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8004dda:	9709      	str	r7, [sp, #36]	; 0x24
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004ddc:	444b      	add	r3, r9
 8004dde:	ea04 0408 	and.w	r4, r4, r8
 8004de2:	ea01 0902 	and.w	r9, r1, r2
 8004de6:	ea4f 07b1 	mov.w	r7, r1, ror #2
 8004dea:	ea87 3771 	eor.w	r7, r7, r1, ror #13
 8004dee:	ea44 0409 	orr.w	r4, r4, r9
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004df2:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004df6:	ea87 57b1 	eor.w	r7, r7, r1, ror #22
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004dfa:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004dfe:	443c      	add	r4, r7
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e00:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 8004e04:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004e06:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e0a:	441c      	add	r4, r3
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e0c:	44ba      	add	sl, r7
 8004e0e:	44d1      	add	r9, sl
 8004e10:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e14:	441d      	add	r5, r3
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004e16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e18:	4f8c      	ldr	r7, [pc, #560]	; (800504c <sha256_process+0x1c2c>)
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004e1a:	ea4f 19f3 	mov.w	r9, r3, ror #7
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e20:	ea8c 0a06 	eor.w	sl, ip, r6
 8004e24:	441f      	add	r7, r3
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004e26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e28:	4438      	add	r0, r7
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004e2a:	ea89 49b3 	eor.w	r9, r9, r3, ror #18
 8004e2e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e30:	ea4f 13b5 	mov.w	r3, r5, ror #6
 8004e34:	ea83 23f5 	eor.w	r3, r3, r5, ror #11
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004e38:	ea89 09d7 	eor.w	r9, r9, r7, lsr #3
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e3c:	ea05 0a0a 	and.w	sl, r5, sl
 8004e40:	ea83 6775 	eor.w	r7, r3, r5, ror #25
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004e44:	9b12      	ldr	r3, [sp, #72]	; 0x48
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e46:	ea8a 0a06 	eor.w	sl, sl, r6
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004e4a:	444b      	add	r3, r9
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e4c:	4450      	add	r0, sl
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004e4e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e52:	ea44 0a01 	orr.w	sl, r4, r1
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004e56:	9309      	str	r3, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e58:	4438      	add	r0, r7
 8004e5a:	ea0a 0a02 	and.w	sl, sl, r2
 8004e5e:	ea04 0701 	and.w	r7, r4, r1
 8004e62:	ea4f 03b4 	mov.w	r3, r4, ror #2
 8004e66:	ea83 3374 	eor.w	r3, r3, r4, ror #13
 8004e6a:	ea4a 0a07 	orr.w	sl, sl, r7
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004e6e:	ea4f 4779 	mov.w	r7, r9, ror #17
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e72:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004e76:	ea87 47f9 	eor.w	r7, r7, r9, ror #19
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e7a:	449a      	add	sl, r3
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004e7c:	ea87 2799 	eor.w	r7, r7, r9, lsr #10
 8004e80:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004e82:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e86:	4482      	add	sl, r0
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004e88:	4499      	add	r9, r3
 8004e8a:	444f      	add	r7, r9
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e8c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004e90:	9712      	str	r7, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004e92:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e96:	4480      	add	r8, r0
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004e98:	4b6d      	ldr	r3, [pc, #436]	; (8005050 <sha256_process+0x1c30>)
 8004e9a:	9812      	ldr	r0, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004e9c:	ea4f 17fa 	mov.w	r7, sl, ror #7
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004ea0:	4403      	add	r3, r0
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004ea2:	ea87 47ba 	eor.w	r7, r7, sl, ror #18
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004ea6:	ea85 090c 	eor.w	r9, r5, ip
 8004eaa:	441e      	add	r6, r3
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004eac:	ea87 07da 	eor.w	r7, r7, sl, lsr #3
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004eb2:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004eb6:	ea08 0909 	and.w	r9, r8, r9
 8004eba:	ea89 090c 	eor.w	r9, r9, ip
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004ebe:	4457      	add	r7, sl
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004ec0:	ea4f 0ab3 	mov.w	sl, r3, ror #2
 8004ec4:	444e      	add	r6, r9
 8004ec6:	ea8a 3a73 	eor.w	sl, sl, r3, ror #13
 8004eca:	ea43 0904 	orr.w	r9, r3, r4
 8004ece:	ea8a 5ab3 	eor.w	sl, sl, r3, ror #22
 8004ed2:	ea4f 10b8 	mov.w	r0, r8, ror #6
 8004ed6:	4023      	ands	r3, r4
 8004ed8:	ea09 0901 	and.w	r9, r9, r1
 8004edc:	ea80 20f8 	eor.w	r0, r0, r8, ror #11
 8004ee0:	ea49 0903 	orr.w	r9, r9, r3
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004ee4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004ee6:	ea80 6078 	eor.w	r0, r0, r8, ror #25
 8004eea:	4406      	add	r6, r0
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004eec:	ea4f 4073 	mov.w	r0, r3, ror #17
 8004ef0:	ea80 40f3 	eor.w	r0, r0, r3, ror #19
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004ef4:	44d1      	add	r9, sl
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004ef6:	445f      	add	r7, fp
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004ef8:	44b1      	add	r9, r6
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004efa:	ea80 2093 	eor.w	r0, r0, r3, lsr #10
 8004efe:	4b55      	ldr	r3, [pc, #340]	; (8005054 <sha256_process+0x1c34>)
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f00:	4432      	add	r2, r6
 8004f02:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f06:	1838      	adds	r0, r7, r0
 8004f08:	ea88 0605 	eor.w	r6, r8, r5
 8004f0c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004f10:	4403      	add	r3, r0
 8004f12:	4016      	ands	r6, r2
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004f14:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f18:	406e      	eors	r6, r5
 8004f1a:	449c      	add	ip, r3
 8004f1c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8004f20:	44b4      	add	ip, r6
 8004f22:	ea4f 06ba 	mov.w	r6, sl, ror #2
 8004f26:	9013      	str	r0, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004f28:	ea4f 17f9 	mov.w	r7, r9, ror #7
 8004f2c:	9815      	ldr	r0, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f2e:	ea86 367a 	eor.w	r6, r6, sl, ror #13
 8004f32:	ea4a 030b 	orr.w	r3, sl, fp
 8004f36:	ea86 56ba 	eor.w	r6, r6, sl, ror #22
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004f3a:	ea87 47b9 	eor.w	r7, r7, r9, ror #18
 8004f3e:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8004f42:	ea87 07d0 	eor.w	r7, r7, r0, lsr #3
 8004f46:	4457      	add	r7, sl
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f48:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004f4c:	ea4f 19b2 	mov.w	r9, r2, ror #6
 8004f50:	4023      	ands	r3, r4
 8004f52:	ea0a 000b 	and.w	r0, sl, fp
 8004f56:	ea89 29f2 	eor.w	r9, r9, r2, ror #11
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004f5a:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f5e:	ea89 6972 	eor.w	r9, r9, r2, ror #25
 8004f62:	4318      	orrs	r0, r3
 8004f64:	44cc      	add	ip, r9
 8004f66:	4430      	add	r0, r6
 8004f68:	4460      	add	r0, ip
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004f6a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8004f6c:	ea4f 437b 	mov.w	r3, fp, ror #17
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f70:	900d      	str	r0, [sp, #52]	; 0x34
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004f72:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004f76:	ea83 43fb 	eor.w	r3, r3, fp, ror #19
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f7a:	4461      	add	r1, ip
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004f7c:	ea83 239b 	eor.w	r3, r3, fp, lsr #10
 8004f80:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8004f84:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8004f88:	4437      	add	r7, r6
 8004f8a:	441f      	add	r7, r3
 8004f8c:	4e32      	ldr	r6, [pc, #200]	; (8005058 <sha256_process+0x1c38>)
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004f8e:	ea4f 13fa 	mov.w	r3, sl, ror #7
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004f92:	ea82 0908 	eor.w	r9, r2, r8
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004f96:	ea83 43ba 	eor.w	r3, r3, sl, ror #18
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004f9a:	ea4b 0a0c 	orr.w	sl, fp, ip
 8004f9e:	ea4f 0cbb 	mov.w	ip, fp, ror #2
 8004fa2:	443e      	add	r6, r7
 8004fa4:	ea01 0909 	and.w	r9, r1, r9
 8004fa8:	ea8c 3c7b 	eor.w	ip, ip, fp, ror #13
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004fac:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004fb0:	ea89 0908 	eor.w	r9, r9, r8
 8004fb4:	4435      	add	r5, r6
 8004fb6:	444d      	add	r5, r9
 8004fb8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004fba:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004fbe:	ea83 03db 	eor.w	r3, r3, fp, lsr #3
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004fc2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004fc6:	ea0a 0a06 	and.w	sl, sl, r6
 8004fca:	ea09 060b 	and.w	r6, r9, fp
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004fce:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004fd2:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8004fd6:	ea4f 10b1 	mov.w	r0, r1, ror #6
 8004fda:	ea8c 5cbb 	eor.w	ip, ip, fp, ror #22
 8004fde:	ea80 20f1 	eor.w	r0, r0, r1, ror #11
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004fe2:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004fe6:	ea4a 0a06 	orr.w	sl, sl, r6
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004fea:	ea4f 4679 	mov.w	r6, r9, ror #17
 8004fee:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004ff2:	ea80 6071 	eor.w	r0, r0, r1, ror #25
 8004ff6:	44e2      	add	sl, ip
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004ff8:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004ffc:	4428      	add	r0, r5
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004ffe:	ea86 46fb 	eor.w	r6, r6, fp, ror #19
 8005002:	444b      	add	r3, r9
 8005004:	ea86 259b 	eor.w	r5, r6, fp, lsr #10
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8005008:	4482      	add	sl, r0
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 800500a:	4463      	add	r3, ip
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 800500c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005010:	442b      	add	r3, r5
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005012:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8005014:	4404      	add	r4, r0
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005016:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 800501a:	ea4f 10f5 	mov.w	r0, r5, ror #7
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 800501e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005020:	4e0e      	ldr	r6, [pc, #56]	; (800505c <sha256_process+0x1c3c>)
 8005022:	ea4b 0c05 	orr.w	ip, fp, r5
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005026:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 800502a:	441e      	add	r6, r3
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 800502c:	ea80 40bb 	eor.w	r0, r0, fp, ror #18
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005030:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8005034:	4446      	add	r6, r8
 8005036:	ea4f 05bb 	mov.w	r5, fp, ror #2
 800503a:	ea85 357b 	eor.w	r5, r5, fp, ror #13
 800503e:	e00f      	b.n	8005060 <sha256_process+0x1c40>
 8005040:	34b0bcb5 	ldrtcc	fp, [r0], #3253	; 0xcb5
 8005044:	391c0cb3 	ldmdbcc	ip, {r0, r1, r4, r5, r7, sl, fp}
 8005048:	4ed8aa4a 	vfnmami.f32	s21, s16, s20
 800504c:	5b9cca4f 	blpl	6737990 <__Stack_Size+0x6737190>
 8005050:	682e6ff3 	stmdavs	lr!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 8005054:	748f82ee 	strvc	r8, [pc], #750	; 800505c <sha256_process+0x1c3c>
 8005058:	78a5636f 	stmiavc	r5!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}
 800505c:	84c87814 	strbhi	r7, [r8], #2068	; 0x814
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005060:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005064:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005068:	ea80 00db 	eor.w	r0, r0, fp, lsr #3
 800506c:	9014      	str	r0, [sp, #80]	; 0x50
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 800506e:	ea0c 0c08 	and.w	ip, ip, r8
 8005072:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005074:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8005078:	ea81 0a02 	eor.w	sl, r1, r2
 800507c:	ea00 0b08 	and.w	fp, r0, r8
 8005080:	ea4c 0c0b 	orr.w	ip, ip, fp
 8005084:	ea85 55b0 	eor.w	r5, r5, r0, ror #22
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005088:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 800508c:	9814      	ldr	r0, [sp, #80]	; 0x50
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 800508e:	ea04 0a0a 	and.w	sl, r4, sl
 8005092:	ea4f 19b4 	mov.w	r9, r4, ror #6
 8005096:	ea8a 0a02 	eor.w	sl, sl, r2
 800509a:	ea89 29f4 	eor.w	r9, r9, r4, ror #11
 800509e:	44b2      	add	sl, r6
 80050a0:	ea89 6974 	eor.w	r9, r9, r4, ror #25
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80050a4:	ea4f 4677 	mov.w	r6, r7, ror #17
 80050a8:	4458      	add	r0, fp
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 80050aa:	eb0c 0b05 	add.w	fp, ip, r5
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80050ae:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 80050b2:	eb0a 0809 	add.w	r8, sl, r9
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80050b6:	ea86 46f7 	eor.w	r6, r6, r7, ror #19
 80050ba:	ea86 2697 	eor.w	r6, r6, r7, lsr #10
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 80050be:	44c3      	add	fp, r8
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80050c0:	9f18      	ldr	r7, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80050c2:	4460      	add	r0, ip
 80050c4:	4daa      	ldr	r5, [pc, #680]	; (8005370 <sha256_process+0x1f50>)
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 80050c6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80050ca:	4430      	add	r0, r6
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 80050cc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80050d0:	44c4      	add	ip, r8
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80050d2:	ea4f 16f7 	mov.w	r6, r7, ror #7
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80050d6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80050da:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80050dc:	4405      	add	r5, r0
 80050de:	1955      	adds	r5, r2, r5
 80050e0:	950f      	str	r5, [sp, #60]	; 0x3c
 80050e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050e4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80050e6:	ea48 0907 	orr.w	r9, r8, r7
 80050ea:	ea4f 07b8 	mov.w	r7, r8, ror #2
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80050ee:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80050f2:	ea84 0b01 	eor.w	fp, r4, r1
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80050f6:	ea86 46b8 	eor.w	r6, r6, r8, ror #18
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80050fa:	ea02 0805 	and.w	r8, r2, r5
 80050fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005100:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005102:	ea09 0902 	and.w	r9, r9, r2
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005106:	9a18      	ldr	r2, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005108:	ea0c 0b0b 	and.w	fp, ip, fp
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 800510c:	ea86 06d2 	eor.w	r6, r6, r2, lsr #3
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005110:	ea49 0808 	orr.w	r8, r9, r8
 8005114:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005116:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800511a:	ea4f 1abc 	mov.w	sl, ip, ror #6
 800511e:	ea8b 0b01 	eor.w	fp, fp, r1
 8005122:	ea87 3775 	eor.w	r7, r7, r5, ror #13
 8005126:	4493      	add	fp, r2
 8005128:	ea87 57b9 	eor.w	r7, r7, r9, ror #22
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 800512c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 800512e:	ea8a 2afc 	eor.w	sl, sl, ip, ror #11
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005132:	ea4f 4573 	mov.w	r5, r3, ror #17
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005136:	ea8a 6a7c 	eor.w	sl, sl, ip, ror #25
 800513a:	44b8      	add	r8, r7
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 800513c:	9f10      	ldr	r7, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 800513e:	44da      	add	sl, fp
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005140:	4416      	add	r6, r2
 8005142:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 8005146:	443e      	add	r6, r7
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005148:	44d0      	add	r8, sl
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 800514a:	ea85 2593 	eor.w	r5, r5, r3, lsr #10
 800514e:	4f89      	ldr	r7, [pc, #548]	; (8005374 <sha256_process+0x1f54>)
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005150:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005154:	1975      	adds	r5, r6, r5
 8005156:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005158:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 800515c:	950f      	str	r5, [sp, #60]	; 0x3c
 800515e:	442f      	add	r7, r5
 8005160:	9d09      	ldr	r5, [sp, #36]	; 0x24
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005162:	ea4f 18f9 	mov.w	r8, r9, ror #7
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005166:	ea4f 06b3 	mov.w	r6, r3, ror #2
 800516a:	ea43 0905 	orr.w	r9, r3, r5
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 800516e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005170:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005172:	ea88 48b3 	eor.w	r8, r8, r3, ror #18
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005176:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005178:	4452      	add	r2, sl
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 800517a:	ea8c 0b04 	eor.w	fp, ip, r4
 800517e:	ea02 0b0b 	and.w	fp, r2, fp
 8005182:	4439      	add	r1, r7
 8005184:	ea03 0705 	and.w	r7, r3, r5
 8005188:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800518a:	ea8b 0b04 	eor.w	fp, fp, r4
 800518e:	ea86 3673 	eor.w	r6, r6, r3, ror #13
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005194:	ea09 0905 	and.w	r9, r9, r5
 8005198:	4459      	add	r1, fp
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 800519a:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 800519e:	ea4f 1ab2 	mov.w	sl, r2, ror #6
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80051a2:	ea88 08d3 	eor.w	r8, r8, r3, lsr #3
 80051a6:	ea4f 4570 	mov.w	r5, r0, ror #17
 80051aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051ac:	ea49 0707 	orr.w	r7, r9, r7
 80051b0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80051b4:	ea8a 2af2 	eor.w	sl, sl, r2, ror #11
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80051b8:	44d8      	add	r8, fp
 80051ba:	ea85 45f0 	eor.w	r5, r5, r0, ror #19
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051be:	ea8a 6a72 	eor.w	sl, sl, r2, ror #25
 80051c2:	ea86 56b9 	eor.w	r6, r6, r9, ror #22
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80051c6:	4498      	add	r8, r3
 80051c8:	ea85 2590 	eor.w	r5, r5, r0, lsr #10
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80051ce:	4451      	add	r1, sl
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80051d0:	4445      	add	r5, r8
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051d2:	4437      	add	r7, r6
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80051d4:	950d      	str	r5, [sp, #52]	; 0x34
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051d6:	187b      	adds	r3, r7, r1
 80051d8:	4408      	add	r0, r1
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80051da:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80051dc:	4e66      	ldr	r6, [pc, #408]	; (8005378 <sha256_process+0x1f58>)
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80051de:	ea4f 18f1 	mov.w	r8, r1, ror #7
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80051e2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80051e4:	442e      	add	r6, r5
 80051e6:	ea4f 17b0 	mov.w	r7, r0, ror #6
 80051ea:	4434      	add	r4, r6
 80051ec:	ea87 26f0 	eor.w	r6, r7, r0, ror #11
 80051f0:	ea03 0701 	and.w	r7, r3, r1
 80051f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051f6:	ea43 0a09 	orr.w	sl, r3, r9
 80051fa:	ea0a 0a01 	and.w	sl, sl, r1
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80051fe:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005200:	ea82 0b0c 	eor.w	fp, r2, ip
 8005204:	ea4a 0a07 	orr.w	sl, sl, r7
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005208:	4d5c      	ldr	r5, [pc, #368]	; (800537c <sha256_process+0x1f5c>)
 800520a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 800520c:	ea00 0b0b 	and.w	fp, r0, fp
 8005210:	ea4f 09b3 	mov.w	r9, r3, ror #2
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005214:	ea88 48b1 	eor.w	r8, r8, r1, ror #18
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005218:	ea8b 0b0c 	eor.w	fp, fp, ip
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 800521c:	443d      	add	r5, r7
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 800521e:	ea89 3973 	eor.w	r9, r9, r3, ror #13
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005222:	ea88 08d1 	eor.w	r8, r8, r1, lsr #3
 8005226:	990f      	ldr	r1, [sp, #60]	; 0x3c
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005228:	ea86 6670 	eor.w	r6, r6, r0, ror #25
 800522c:	ea89 59b3 	eor.w	r9, r9, r3, ror #22
 8005230:	445c      	add	r4, fp
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005232:	44a8      	add	r8, r5
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005234:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005236:	4434      	add	r4, r6
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005238:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 800523a:	44ca      	add	sl, r9
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 800523c:	ea4f 4b71 	mov.w	fp, r1, ror #17
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005240:	4425      	add	r5, r4
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005242:	ea8b 4bf1 	eor.w	fp, fp, r1, ror #19
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005246:	eb0a 0104 	add.w	r1, sl, r4
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 800524a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800524c:	ea8b 2697 	eor.w	r6, fp, r7, lsr #10
 8005250:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8005254:	44a0      	add	r8, r4
 8005256:	ea41 0403 	orr.w	r4, r1, r3
 800525a:	ea04 040b 	and.w	r4, r4, fp
 800525e:	940b      	str	r4, [sp, #44]	; 0x2c
 8005260:	ea80 0902 	eor.w	r9, r0, r2
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005264:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005266:	4446      	add	r6, r8
 8005268:	ea05 0909 	and.w	r9, r5, r9
 800526c:	4466      	add	r6, ip
 800526e:	ea4f 0ab1 	mov.w	sl, r1, ror #2
 8005272:	ea4f 18b5 	mov.w	r8, r5, ror #6
 8005276:	ea89 0902 	eor.w	r9, r9, r2
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 800527a:	ea4f 1cf4 	mov.w	ip, r4, ror #7
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 800527e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005280:	ea01 0b03 	and.w	fp, r1, r3
 8005284:	44b1      	add	r9, r6
 8005286:	ea8a 3a71 	eor.w	sl, sl, r1, ror #13
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 800528a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 800528c:	ea88 28f5 	eor.w	r8, r8, r5, ror #11
 8005290:	ea8a 5ab1 	eor.w	sl, sl, r1, ror #22
 8005294:	ea88 6875 	eor.w	r8, r8, r5, ror #25
 8005298:	ea44 0b0b 	orr.w	fp, r4, fp
 800529c:	eb0b 040a 	add.w	r4, fp, sl
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 80052a0:	ea8c 4cb6 	eor.w	ip, ip, r6, ror #18
 80052a4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052a8:	eb09 0608 	add.w	r6, r9, r8
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 80052ac:	4f34      	ldr	r7, [pc, #208]	; (8005380 <sha256_process+0x1f60>)
 80052ae:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80052b2:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 80052b6:	4447      	add	r7, r8
 80052b8:	ea4f 487a 	mov.w	r8, sl, ror #17
 80052bc:	ea8c 0cd9 	eor.w	ip, ip, r9, lsr #3
 80052c0:	ea88 48fa 	eor.w	r8, r8, sl, ror #19
 80052c4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80052c8:	4467      	add	r7, ip
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052ca:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 80052ce:	4457      	add	r7, sl
 80052d0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052d4:	4434      	add	r4, r6
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 80052d6:	ea85 0c00 	eor.w	ip, r5, r0
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052da:	445e      	add	r6, fp
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 80052dc:	ea88 289a 	eor.w	r8, r8, sl, lsr #10
 80052e0:	ea06 0c0c 	and.w	ip, r6, ip
 80052e4:	4447      	add	r7, r8
 80052e6:	ea8c 0c00 	eor.w	ip, ip, r0
 80052ea:	4417      	add	r7, r2
 80052ec:	ea44 0b01 	orr.w	fp, r4, r1
 80052f0:	9a04      	ldr	r2, [sp, #16]
 80052f2:	ea4f 09b4 	mov.w	r9, r4, ror #2
 80052f6:	4467      	add	r7, ip
 80052f8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 80052fc:	ea0b 0b03 	and.w	fp, fp, r3
 8005300:	ea04 0a01 	and.w	sl, r4, r1
 8005304:	ea89 3974 	eor.w	r9, r9, r4, ror #13
 8005308:	ea89 59b4 	eor.w	r9, r9, r4, ror #22
 800530c:	4494      	add	ip, r2
 800530e:	ea4b 0a0a 	orr.w	sl, fp, sl
 8005312:	9a08      	ldr	r2, [sp, #32]
 8005314:	44ca      	add	sl, r9
 8005316:	4492      	add	sl, r2
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
 8005318:	9a01      	ldr	r2, [sp, #4]
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 800531a:	ea4f 18b6 	mov.w	r8, r6, ror #6
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
 800531e:	4410      	add	r0, r2
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 8005320:	9a05      	ldr	r2, [sp, #20]
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005322:	ea88 28f6 	eor.w	r8, r8, r6, ror #11

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 8005326:	4413      	add	r3, r2
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 8005328:	9a02      	ldr	r2, [sp, #8]
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 800532a:	ea88 6876 	eor.w	r8, r8, r6, ror #25
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 800532e:	4415      	add	r5, r2
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 8005330:	9a06      	ldr	r2, [sp, #24]
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005332:	4447      	add	r7, r8

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 8005334:	4411      	add	r1, r2
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
 8005336:	9a07      	ldr	r2, [sp, #28]
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
 8005338:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
    ctx->state[1] += B;
 800533c:	4414      	add	r4, r2
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
 800533e:	9a03      	ldr	r2, [sp, #12]
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
 8005340:	44ba      	add	sl, r7
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
 8005342:	4416      	add	r6, r2

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
 8005344:	4467      	add	r7, ip
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
 8005346:	f8c8 a008 	str.w	sl, [r8, #8]
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 800534a:	f8c8 3014 	str.w	r3, [r8, #20]
    ctx->state[4] += E;
 800534e:	f8c8 7018 	str.w	r7, [r8, #24]
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
 8005352:	f8c8 400c 	str.w	r4, [r8, #12]
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
 8005356:	f8c8 601c 	str.w	r6, [r8, #28]
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 800535a:	f8c8 1010 	str.w	r1, [r8, #16]
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 800535e:	f8c8 5020 	str.w	r5, [r8, #32]
    ctx->state[7] += H;
 8005362:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
}
 8005366:	b01c      	add	sp, #112	; 0x70
 8005368:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	8cc70208 	sfmhi	f0, 2, [r7], {8}
 8005374:	90befffa 	ldrshtls	pc, [lr], sl	; <UNPREDICTABLE>
 8005378:	a4506ceb 	ldrbge	r6, [r0], #-3307	; 0xceb
 800537c:	bef9a3f7 	mrclt	3, 7, sl, cr9, cr7, {7}
 8005380:	c67178f2 			; <UNDEFINED> instruction: 0xc67178f2

08005384 <sha256_update>:

void sha256_update( sha256_context *ctx, uint8 *input, uint32 length )
{
 8005384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32 left, fill;

    if( ! length ) return;
 8005388:	4617      	mov	r7, r2
    ctx->state[6] += G;
    ctx->state[7] += H;
}

void sha256_update( sha256_context *ctx, uint8 *input, uint32 length )
{
 800538a:	4606      	mov	r6, r0
 800538c:	4688      	mov	r8, r1
    uint32 left, fill;

    if( ! length ) return;
 800538e:	b302      	cbz	r2, 80053d2 <sha256_update+0x4e>

    left = ctx->total[0] & 0x3F;
 8005390:	6803      	ldr	r3, [r0, #0]
    fill = 64 - left;

    ctx->total[0] += length;
 8005392:	441a      	add	r2, r3
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 8005394:	4297      	cmp	r7, r2
    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += length;
 8005396:	6002      	str	r2, [r0, #0]
{
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
 8005398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += length;
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 800539c:	d902      	bls.n	80053a4 <sha256_update+0x20>
        ctx->total[1]++;
 800539e:	6842      	ldr	r2, [r0, #4]
 80053a0:	3201      	adds	r2, #1
 80053a2:	6042      	str	r2, [r0, #4]

    if( left && length >= fill )
 80053a4:	b9bb      	cbnz	r3, 80053d6 <sha256_update+0x52>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 80053a6:	2f3f      	cmp	r7, #63	; 0x3f
 80053a8:	d912      	bls.n	80053d0 <sha256_update+0x4c>
 80053aa:	463d      	mov	r5, r7
 80053ac:	4644      	mov	r4, r8
    {
        sha256_process( ctx, input );
 80053ae:	4621      	mov	r1, r4
        length -= 64;
 80053b0:	3d40      	subs	r5, #64	; 0x40
        left = 0;
    }

    while( length >= 64 )
    {
        sha256_process( ctx, input );
 80053b2:	4630      	mov	r0, r6
 80053b4:	f7fe f834 	bl	8003420 <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 80053b8:	2d3f      	cmp	r5, #63	; 0x3f
    {
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
 80053ba:	f104 0440 	add.w	r4, r4, #64	; 0x40
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 80053be:	d8f6      	bhi.n	80053ae <sha256_update+0x2a>
 80053c0:	f1a7 0340 	sub.w	r3, r7, #64	; 0x40
 80053c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80053c8:	3340      	adds	r3, #64	; 0x40
 80053ca:	4498      	add	r8, r3
 80053cc:	f007 073f 	and.w	r7, r7, #63	; 0x3f
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
    }

    if( length )
 80053d0:	b9ef      	cbnz	r7, 800540e <sha256_update+0x8a>
 80053d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 80053d6:	f1c3 0440 	rsb	r4, r3, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
 80053da:	42a7      	cmp	r7, r4
 80053dc:	d208      	bcs.n	80053f0 <sha256_update+0x6c>
        input  += 64;
    }

    if( length )
    {
        memcpy( (void *) (ctx->buffer + left),
 80053de:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80053e2:	4430      	add	r0, r6
 80053e4:	4641      	mov	r1, r8
 80053e6:	463a      	mov	r2, r7
                (void *) input, length );
    }
}
 80053e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        input  += 64;
    }

    if( length )
    {
        memcpy( (void *) (ctx->buffer + left),
 80053ec:	f001 ba99 	b.w	8006922 <memcpy>
    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
 80053f0:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80053f4:	4641      	mov	r1, r8
 80053f6:	4622      	mov	r2, r4
 80053f8:	4430      	add	r0, r6
 80053fa:	f001 fa92 	bl	8006922 <memcpy>
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 80053fe:	4630      	mov	r0, r6
 8005400:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8005404:	f7fe f80c 	bl	8003420 <sha256_process>
        length -= fill;
 8005408:	1b3f      	subs	r7, r7, r4
        input  += fill;
 800540a:	44a0      	add	r8, r4
 800540c:	e7cb      	b.n	80053a6 <sha256_update+0x22>
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
    }

    if( length )
 800540e:	2300      	movs	r3, #0
 8005410:	e7e5      	b.n	80053de <sha256_update+0x5a>
 8005412:	bf00      	nop

08005414 <sha256_finish>:
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 8005414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32 last, padn;
    uint32 high, low;
    uint8 msglen[8];

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 8005418:	e890 0088 	ldmia.w	r0, {r3, r7}
    low  = ( ctx->total[0] <<  3 );
 800541c:	00da      	lsls	r2, r3, #3

    PUT_UINT32( high, msglen, 0 );
    PUT_UINT32( low,  msglen, 4 );

    last = ctx->total[0] & 0x3F;
 800541e:	f003 063f 	and.w	r6, r3, #63	; 0x3f
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 8005422:	b083      	sub	sp, #12
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32( high, msglen, 0 );
    PUT_UINT32( low,  msglen, 4 );
 8005424:	ea4f 6812 	mov.w	r8, r2, lsr #24

    last = ctx->total[0] & 0x3F;
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8005428:	2e37      	cmp	r6, #55	; 0x37
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32( high, msglen, 0 );
    PUT_UINT32( low,  msglen, 4 );
 800542a:	f88d 8004 	strb.w	r8, [sp, #4]

    last = ctx->total[0] & 0x3F;
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 800542e:	bf94      	ite	ls
 8005430:	f1c6 0838 	rsbls	r8, r6, #56	; 0x38
 8005434:	f1c6 0878 	rsbhi	r8, r6, #120	; 0x78
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 8005438:	4604      	mov	r4, r0
    uint32 last, padn;
    uint32 high, low;
    uint8 msglen[8];

    high = ( ctx->total[0] >> 29 )
 800543a:	0f58      	lsrs	r0, r3, #29
    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += length;
 800543c:	4443      	add	r3, r8
{
    uint32 last, padn;
    uint32 high, low;
    uint8 msglen[8];

    high = ( ctx->total[0] >> 29 )
 800543e:	ea40 00c7 	orr.w	r0, r0, r7, lsl #3
    fill = 64 - left;

    ctx->total[0] += length;
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 8005442:	4598      	cmp	r8, r3

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32( high, msglen, 0 );
 8005444:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8005448:	ea4f 4a10 	mov.w	sl, r0, lsr #16
 800544c:	ea4f 2910 	mov.w	r9, r0, lsr #8
    PUT_UINT32( low,  msglen, 4 );
 8005450:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005454:	ea4f 2e12 	mov.w	lr, r2, lsr #8

    ctx->total[0] += length;
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;
 8005458:	bf88      	it	hi
 800545a:	3701      	addhi	r7, #1
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 800545c:	460d      	mov	r5, r1

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32( high, msglen, 0 );
 800545e:	f88d 0003 	strb.w	r0, [sp, #3]
 8005462:	f88d b000 	strb.w	fp, [sp]
 8005466:	f88d a001 	strb.w	sl, [sp, #1]
 800546a:	f88d 9002 	strb.w	r9, [sp, #2]
    PUT_UINT32( low,  msglen, 4 );
 800546e:	f88d 2007 	strb.w	r2, [sp, #7]
 8005472:	f88d c005 	strb.w	ip, [sp, #5]
 8005476:	f88d e006 	strb.w	lr, [sp, #6]
    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += length;
 800547a:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;
 800547c:	bf88      	it	hi
 800547e:	6067      	strhi	r7, [r4, #4]

    if( left && length >= fill )
 8005480:	2e00      	cmp	r6, #0
 8005482:	f000 80a1 	beq.w	80055c8 <sha256_finish+0x1b4>
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 8005486:	f1c6 0740 	rsb	r7, r6, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
 800548a:	45b8      	cmp	r8, r7
 800548c:	d273      	bcs.n	8005576 <sha256_finish+0x162>
 800548e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8005628 <sha256_finish+0x214>
 8005492:	4642      	mov	r2, r8
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
    }

    if( length )
 8005494:	b12a      	cbz	r2, 80054a2 <sha256_finish+0x8e>
    {
        memcpy( (void *) (ctx->buffer + left),
 8005496:	f106 0028 	add.w	r0, r6, #40	; 0x28
 800549a:	4420      	add	r0, r4
 800549c:	4649      	mov	r1, r9
 800549e:	f001 fa40 	bl	8006922 <memcpy>
{
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
 80054a2:	6822      	ldr	r2, [r4, #0]
    fill = 64 - left;

    ctx->total[0] += length;
 80054a4:	f102 0308 	add.w	r3, r2, #8
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 80054a8:	2b07      	cmp	r3, #7
    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += length;
 80054aa:	6023      	str	r3, [r4, #0]
{
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
 80054ac:	f002 083f 	and.w	r8, r2, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += length;
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 80054b0:	d802      	bhi.n	80054b8 <sha256_finish+0xa4>
        ctx->total[1]++;
 80054b2:	6863      	ldr	r3, [r4, #4]
 80054b4:	3301      	adds	r3, #1
 80054b6:	6063      	str	r3, [r4, #4]

    if( left && length >= fill )
 80054b8:	f1b8 0f00 	cmp.w	r8, #0
 80054bc:	d005      	beq.n	80054ca <sha256_finish+0xb6>
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 80054be:	f1c8 0940 	rsb	r9, r8, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
 80054c2:	f1b9 0f08 	cmp.w	r9, #8
 80054c6:	f240 8082 	bls.w	80055ce <sha256_finish+0x1ba>
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
        input  += fill;
        left = 0;
 80054ca:	2608      	movs	r6, #8
 80054cc:	46e9      	mov	r9, sp
        input  += 64;
    }

    if( length )
    {
        memcpy( (void *) (ctx->buffer + left),
 80054ce:	f108 0028 	add.w	r0, r8, #40	; 0x28
 80054d2:	4420      	add	r0, r4
 80054d4:	4649      	mov	r1, r9
 80054d6:	4632      	mov	r2, r6
 80054d8:	f001 fa23 	bl	8006922 <memcpy>
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );

    sha256_update( ctx, sha256_padding, padn );
    sha256_update( ctx, msglen, 8 );

    PUT_UINT32( ctx->state[0], digest,  0 );
 80054dc:	7ae3      	ldrb	r3, [r4, #11]
 80054de:	702b      	strb	r3, [r5, #0]
 80054e0:	8963      	ldrh	r3, [r4, #10]
 80054e2:	706b      	strb	r3, [r5, #1]
 80054e4:	68a3      	ldr	r3, [r4, #8]
 80054e6:	0a1b      	lsrs	r3, r3, #8
 80054e8:	70ab      	strb	r3, [r5, #2]
 80054ea:	68a3      	ldr	r3, [r4, #8]
 80054ec:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32( ctx->state[1], digest,  4 );
 80054ee:	7be3      	ldrb	r3, [r4, #15]
 80054f0:	712b      	strb	r3, [r5, #4]
 80054f2:	89e3      	ldrh	r3, [r4, #14]
 80054f4:	716b      	strb	r3, [r5, #5]
 80054f6:	68e3      	ldr	r3, [r4, #12]
 80054f8:	0a1b      	lsrs	r3, r3, #8
 80054fa:	71ab      	strb	r3, [r5, #6]
 80054fc:	68e3      	ldr	r3, [r4, #12]
 80054fe:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32( ctx->state[2], digest,  8 );
 8005500:	7ce3      	ldrb	r3, [r4, #19]
 8005502:	722b      	strb	r3, [r5, #8]
 8005504:	8a63      	ldrh	r3, [r4, #18]
 8005506:	726b      	strb	r3, [r5, #9]
 8005508:	6923      	ldr	r3, [r4, #16]
 800550a:	0a1b      	lsrs	r3, r3, #8
 800550c:	72ab      	strb	r3, [r5, #10]
 800550e:	6923      	ldr	r3, [r4, #16]
 8005510:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32( ctx->state[3], digest, 12 );
 8005512:	7de3      	ldrb	r3, [r4, #23]
 8005514:	732b      	strb	r3, [r5, #12]
 8005516:	8ae3      	ldrh	r3, [r4, #22]
 8005518:	736b      	strb	r3, [r5, #13]
 800551a:	6963      	ldr	r3, [r4, #20]
 800551c:	0a1b      	lsrs	r3, r3, #8
 800551e:	73ab      	strb	r3, [r5, #14]
 8005520:	6963      	ldr	r3, [r4, #20]
 8005522:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32( ctx->state[4], digest, 16 );
 8005524:	7ee3      	ldrb	r3, [r4, #27]
 8005526:	742b      	strb	r3, [r5, #16]
 8005528:	8b63      	ldrh	r3, [r4, #26]
 800552a:	746b      	strb	r3, [r5, #17]
 800552c:	69a3      	ldr	r3, [r4, #24]
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	74ab      	strb	r3, [r5, #18]
 8005532:	69a3      	ldr	r3, [r4, #24]
 8005534:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32( ctx->state[5], digest, 20 );
 8005536:	7fe3      	ldrb	r3, [r4, #31]
 8005538:	752b      	strb	r3, [r5, #20]
 800553a:	8be3      	ldrh	r3, [r4, #30]
 800553c:	756b      	strb	r3, [r5, #21]
 800553e:	69e3      	ldr	r3, [r4, #28]
 8005540:	0a1b      	lsrs	r3, r3, #8
 8005542:	75ab      	strb	r3, [r5, #22]
 8005544:	69e3      	ldr	r3, [r4, #28]
 8005546:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32( ctx->state[6], digest, 24 );
 8005548:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800554c:	762b      	strb	r3, [r5, #24]
 800554e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8005550:	766b      	strb	r3, [r5, #25]
 8005552:	6a23      	ldr	r3, [r4, #32]
 8005554:	0a1b      	lsrs	r3, r3, #8
 8005556:	76ab      	strb	r3, [r5, #26]
 8005558:	6a23      	ldr	r3, [r4, #32]
 800555a:	76eb      	strb	r3, [r5, #27]
    PUT_UINT32( ctx->state[7], digest, 28 );
 800555c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8005560:	772b      	strb	r3, [r5, #28]
 8005562:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005564:	776b      	strb	r3, [r5, #29]
 8005566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005568:	0a1b      	lsrs	r3, r3, #8
 800556a:	77ab      	strb	r3, [r5, #30]
 800556c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800556e:	77eb      	strb	r3, [r5, #31]
 8005570:	b003      	add	sp, #12
 8005572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
 8005576:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8005628 <sha256_finish+0x214>
 800557a:	f106 0028 	add.w	r0, r6, #40	; 0x28
 800557e:	4649      	mov	r1, r9
 8005580:	4420      	add	r0, r4
 8005582:	463a      	mov	r2, r7
 8005584:	f001 f9cd 	bl	8006922 <memcpy>
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 8005588:	4620      	mov	r0, r4
 800558a:	f104 0128 	add.w	r1, r4, #40	; 0x28
        length -= fill;
 800558e:	ebc7 0808 	rsb	r8, r7, r8
        input  += fill;
 8005592:	44b9      	add	r9, r7

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 8005594:	f7fd ff44 	bl	8003420 <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 8005598:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 800559c:	d93a      	bls.n	8005614 <sha256_finish+0x200>
 800559e:	4647      	mov	r7, r8
 80055a0:	464e      	mov	r6, r9
    {
        sha256_process( ctx, input );
 80055a2:	4631      	mov	r1, r6
        length -= 64;
 80055a4:	3f40      	subs	r7, #64	; 0x40
        left = 0;
    }

    while( length >= 64 )
    {
        sha256_process( ctx, input );
 80055a6:	4620      	mov	r0, r4
 80055a8:	f7fd ff3a 	bl	8003420 <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 80055ac:	2f3f      	cmp	r7, #63	; 0x3f
    {
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
 80055ae:	f106 0640 	add.w	r6, r6, #64	; 0x40
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 80055b2:	d8f6      	bhi.n	80055a2 <sha256_finish+0x18e>
 80055b4:	f1a8 0340 	sub.w	r3, r8, #64	; 0x40
 80055b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055bc:	3340      	adds	r3, #64	; 0x40
 80055be:	4499      	add	r9, r3
 80055c0:	f008 023f 	and.w	r2, r8, #63	; 0x3f
 80055c4:	2600      	movs	r6, #0
 80055c6:	e765      	b.n	8005494 <sha256_finish+0x80>
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
 80055c8:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8005628 <sha256_finish+0x214>
 80055cc:	e7e4      	b.n	8005598 <sha256_finish+0x184>
    {
        memcpy( (void *) (ctx->buffer + left),
 80055ce:	f108 0028 	add.w	r0, r8, #40	; 0x28
 80055d2:	464a      	mov	r2, r9
 80055d4:	4669      	mov	r1, sp
 80055d6:	4420      	add	r0, r4
 80055d8:	f001 f9a3 	bl	8006922 <memcpy>
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
 80055dc:	f1a8 0638 	sub.w	r6, r8, #56	; 0x38
        input  += fill;
 80055e0:	ab00      	add	r3, sp, #0

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 80055e2:	4620      	mov	r0, r4
 80055e4:	f104 0128 	add.w	r1, r4, #40	; 0x28
        length -= fill;
        input  += fill;
 80055e8:	4499      	add	r9, r3

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 80055ea:	f7fd ff19 	bl	8003420 <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 80055ee:	2e3f      	cmp	r6, #63	; 0x3f
 80055f0:	d913      	bls.n	800561a <sha256_finish+0x206>
    {
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
        input  += fill;
 80055f2:	464f      	mov	r7, r9
        left = 0;
    }

    while( length >= 64 )
    {
        sha256_process( ctx, input );
 80055f4:	4639      	mov	r1, r7
        length -= 64;
 80055f6:	3e40      	subs	r6, #64	; 0x40
        left = 0;
    }

    while( length >= 64 )
    {
        sha256_process( ctx, input );
 80055f8:	4620      	mov	r0, r4
 80055fa:	f7fd ff11 	bl	8003420 <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 80055fe:	2e3f      	cmp	r6, #63	; 0x3f
    {
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
 8005600:	f107 0740 	add.w	r7, r7, #64	; 0x40
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 8005604:	d8f6      	bhi.n	80055f4 <sha256_finish+0x1e0>
 8005606:	f108 0608 	add.w	r6, r8, #8
 800560a:	f1a9 0940 	sub.w	r9, r9, #64	; 0x40
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
        input  += fill;
        left = 0;
 800560e:	f04f 0800 	mov.w	r8, #0
 8005612:	e75c      	b.n	80054ce <sha256_finish+0xba>
    }

    while( length >= 64 )
 8005614:	4642      	mov	r2, r8
 8005616:	2600      	movs	r6, #0
 8005618:	e73c      	b.n	8005494 <sha256_finish+0x80>
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
    }

    if( length )
 800561a:	2e00      	cmp	r6, #0
 800561c:	f43f af5e 	beq.w	80054dc <sha256_finish+0xc8>
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
        input  += fill;
        left = 0;
 8005620:	f04f 0800 	mov.w	r8, #0
 8005624:	e753      	b.n	80054ce <sha256_finish+0xba>
 8005626:	bf00      	nop
 8005628:	200002cc 	andcs	r0, r0, ip, asr #5

0800562c <sha512_block>:
{
	return (x >> bits) | (x << (64 - bits));
}

void sha512_block(struct sha512_state *s, const uint8_t *blk)
{
 800562c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005630:	b0e4      	sub	sp, #400	; 0x190
 8005632:	460c      	mov	r4, r1
 8005634:	9033      	str	r0, [sp, #204]	; 0xcc
 8005636:	f101 0c80 	add.w	ip, r1, #128	; 0x80
 800563a:	ad42      	add	r5, sp, #264	; 0x108

static inline uint64_t load64(const uint8_t *x)
{
	uint64_t r;

	r = *(x++);
 800563c:	7820      	ldrb	r0, [r4, #0]
	r = (r << 8) | *(x++);
 800563e:	2100      	movs	r1, #0
 8005640:	0e02      	lsrs	r2, r0, #24
 8005642:	0203      	lsls	r3, r0, #8
 8005644:	9211      	str	r2, [sp, #68]	; 0x44
 8005646:	7860      	ldrb	r0, [r4, #1]
 8005648:	9310      	str	r3, [sp, #64]	; 0x40
 800564a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800564e:	4339      	orrs	r1, r7
 8005650:	4330      	orrs	r0, r6
	r = (r << 8) | *(x++);
 8005652:	020f      	lsls	r7, r1, #8
 8005654:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8005658:	0206      	lsls	r6, r0, #8
 800565a:	2100      	movs	r1, #0
 800565c:	78a0      	ldrb	r0, [r4, #2]
 800565e:	4339      	orrs	r1, r7
 8005660:	4330      	orrs	r0, r6
	r = (r << 8) | *(x++);
 8005662:	ea4f 2801 	mov.w	r8, r1, lsl #8
 8005666:	ea48 6910 	orr.w	r9, r8, r0, lsr #24
 800566a:	ea4f 2a00 	mov.w	sl, r0, lsl #8
 800566e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8005672:	78e0      	ldrb	r0, [r4, #3]
 8005674:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005678:	2100      	movs	r1, #0
 800567a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800567e:	4319      	orrs	r1, r3
 8005680:	4310      	orrs	r0, r2
	r = (r << 8) | *(x++);
 8005682:	020b      	lsls	r3, r1, #8
 8005684:	ea43 6810 	orr.w	r8, r3, r0, lsr #24
 8005688:	ea4f 2900 	mov.w	r9, r0, lsl #8
 800568c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8005690:	7920      	ldrb	r0, [r4, #4]
 8005692:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005696:	2100      	movs	r1, #0
 8005698:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 800569c:	ea41 010b 	orr.w	r1, r1, fp
 80056a0:	ea40 000a 	orr.w	r0, r0, sl
	r = (r << 8) | *(x++);
 80056a4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80056a8:	ea4b 6b10 	orr.w	fp, fp, r0, lsr #24
 80056ac:	ea4f 2a00 	mov.w	sl, r0, lsl #8
 80056b0:	2100      	movs	r1, #0
 80056b2:	7960      	ldrb	r0, [r4, #5]
 80056b4:	ea41 010b 	orr.w	r1, r1, fp
 80056b8:	ea40 000a 	orr.w	r0, r0, sl
	r = (r << 8) | *(x++);
 80056bc:	ea4f 2901 	mov.w	r9, r1, lsl #8
 80056c0:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 80056c4:	ea4f 2800 	mov.w	r8, r0, lsl #8
 80056c8:	2100      	movs	r1, #0
 80056ca:	79a0      	ldrb	r0, [r4, #6]
 80056cc:	ea41 0109 	orr.w	r1, r1, r9
 80056d0:	ea40 0008 	orr.w	r0, r0, r8
	r = (r << 8) | *(x++);
 80056d4:	020b      	lsls	r3, r1, #8
 80056d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056da:	0202      	lsls	r2, r0, #8
 80056dc:	79e0      	ldrb	r0, [r4, #7]
 80056de:	2100      	movs	r1, #0
	uint64_t a, b, c, d, e, f, g, h;
	int i;

	for (i = 0; i < 16; i++) {
		w[i] = load64(blk);
		blk += 8;
 80056e0:	3408      	adds	r4, #8
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
 80056e2:	4310      	orrs	r0, r2
 80056e4:	4319      	orrs	r1, r3
{
	uint64_t w[16];
	uint64_t a, b, c, d, e, f, g, h;
	int i;

	for (i = 0; i < 16; i++) {
 80056e6:	4564      	cmp	r4, ip
		w[i] = load64(blk);
 80056e8:	e9e5 0102 	strd	r0, r1, [r5, #8]!
{
	uint64_t w[16];
	uint64_t a, b, c, d, e, f, g, h;
	int i;

	for (i = 0; i < 16; i++) {
 80056ec:	d1a6      	bne.n	800563c <sha512_block+0x10>
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
	b = s->h[1];
 80056ee:	9b33      	ldr	r3, [sp, #204]	; 0xcc
	c = s->h[2];
 80056f0:	9d33      	ldr	r5, [sp, #204]	; 0xcc
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
	b = s->h[1];
 80056f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 80056f6:	9933      	ldr	r1, [sp, #204]	; 0xcc
	b = s->h[1];
 80056f8:	e9cd 2336 	strd	r2, r3, [sp, #216]	; 0xd8
	c = s->h[2];
 80056fc:	e9d5 4504 	ldrd	r4, r5, [r5, #16]
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 8005700:	e9d1 0100 	ldrd	r0, r1, [r1]
	b = s->h[1];
 8005704:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 8005708:	9a33      	ldr	r2, [sp, #204]	; 0xcc
	}

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
 800570a:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 800570e:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
	}

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
 8005716:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
	d = s->h[3];
 800571a:	9f33      	ldr	r7, [sp, #204]	; 0xcc
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 800571c:	ac40      	add	r4, sp, #256	; 0x100
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 800571e:	4689      	mov	r9, r1
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 8005720:	e9c4 2300 	strd	r2, r3, [r4]

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
 8005724:	e9d7 6706 	ldrd	r6, r7, [r7, #24]
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 8005728:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
 800572c:	f8dd b0cc 	ldr.w	fp, [sp, #204]	; 0xcc
	f = s->h[5];
 8005730:	9933      	ldr	r1, [sp, #204]	; 0xcc
	g = s->h[6];
	h = s->h[7];
 8005732:	9c33      	ldr	r4, [sp, #204]	; 0xcc

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
 8005734:	e9cd 673a 	strd	r6, r7, [sp, #232]	; 0xe8
	e = s->h[4];
 8005738:	e9db ab08 	ldrd	sl, fp, [fp, #32]
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];
 800573c:	f104 0538 	add.w	r5, r4, #56	; 0x38
 8005740:	e9d5 4500 	ldrd	r4, r5, [r5]

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
 8005744:	e9cd 672a 	strd	r6, r7, [sp, #168]	; 0xa8
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];
 8005748:	ae42      	add	r6, sp, #264	; 0x108
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 800574a:	4680      	mov	r8, r0
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];

	for (i = 0; i < 80; i++) {
 800574c:	f04f 0c00 	mov.w	ip, #0
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
 8005750:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	; 0x28
	g = s->h[6];
 8005754:	461f      	mov	r7, r3
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
 8005756:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 800575a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	g = s->h[6];
	h = s->h[7];
 800575e:	465b      	mov	r3, fp
 8005760:	e9c6 4500 	strd	r4, r5, [r6]
 8005764:	4620      	mov	r0, r4
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 8005766:	4616      	mov	r6, r2
	h = s->h[7];
 8005768:	4629      	mov	r1, r5
 800576a:	4652      	mov	r2, sl
	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
 800576c:	e9cd ab3c 	strd	sl, fp, [sp, #240]	; 0xf0
 8005770:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];
 8005774:	46c2      	mov	sl, r8
 8005776:	46cb      	mov	fp, r9
 8005778:	4690      	mov	r8, r2
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 800577a:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
	h = s->h[7];
 800577e:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
 8005782:	4699      	mov	r9, r3
 8005784:	4662      	mov	r2, ip
 8005786:	e018      	b.n	80057ba <sha512_block+0x18e>

		/* Update round state */
		h = g;
		g = f;
		f = e;
		e = d + temp1;
 8005788:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 800578c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8005790:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
 8005794:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 8005798:	e9cd 672a 	strd	r6, r7, [sp, #168]	; 0xa8
 800579c:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 80057a0:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 80057a4:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 80057a8:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80057ac:	4690      	mov	r8, r2
 80057ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80057b0:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 80057b4:	4699      	mov	r9, r3
		d = c;
		c = b;
		b = a;
		a = temp1 + temp2;
 80057b6:	4682      	mov	sl, r0
 80057b8:	468b      	mov	fp, r1
	g = s->h[6];
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
 80057ba:	ab64      	add	r3, sp, #400	; 0x190
 80057bc:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80057c0:	ea4f 4298 	mov.w	r2, r8, lsr #18
 80057c4:	ea42 3289 	orr.w	r2, r2, r9, lsl #14
 80057c8:	9216      	str	r2, [sp, #88]	; 0x58
 80057ca:	ea4f 3298 	mov.w	r2, r8, lsr #14
 80057ce:	ea42 4289 	orr.w	r2, r2, r9, lsl #18
 80057d2:	9218      	str	r2, [sp, #96]	; 0x60
 80057d4:	ea4f 4299 	mov.w	r2, r9, lsr #18
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 80057d8:	f10c 0c01 	add.w	ip, ip, #1
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80057dc:	ea42 3288 	orr.w	r2, r2, r8, lsl #14
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 80057e0:	f00c 040f 	and.w	r4, ip, #15
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80057e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80057e6:	ea4f 3299 	mov.w	r2, r9, lsr #14
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 80057ea:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80057ee:	ea42 4288 	orr.w	r2, r2, r8, lsl #18
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 80057f2:	e951 0120 	ldrd	r0, r1, [r1, #-128]	; 0x80
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80057f6:	9219      	str	r2, [sp, #100]	; 0x64
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 80057f8:	09c6      	lsrs	r6, r0, #7
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 80057fa:	9410      	str	r4, [sp, #64]	; 0x40
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80057fc:	ea4f 52c8 	mov.w	r2, r8, lsl #23
 8005800:	0844      	lsrs	r4, r0, #1
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 8005802:	ea46 6741 	orr.w	r7, r6, r1, lsl #25
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005806:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
 800580a:	ea42 2259 	orr.w	r2, r2, r9, lsr #9
 800580e:	f10c 030d 	add.w	r3, ip, #13
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 8005812:	9708      	str	r7, [sp, #32]
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005814:	9422      	str	r4, [sp, #136]	; 0x88
 8005816:	921a      	str	r2, [sp, #104]	; 0x68
 8005818:	0a04      	lsrs	r4, r0, #8

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
 800581a:	af64      	add	r7, sp, #400	; 0x190
 800581c:	f003 030f 	and.w	r3, r3, #15
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005820:	ea4f 52c9 	mov.w	r2, r9, lsl #23
 8005824:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8005828:	084e      	lsrs	r6, r1, #1

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
 800582a:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 800582e:	ea42 2258 	orr.w	r2, r2, r8, lsr #9
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 8005832:	09cf      	lsrs	r7, r1, #7
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005834:	ea46 76c0 	orr.w	r6, r6, r0, lsl #31
 8005838:	9424      	str	r4, [sp, #144]	; 0x90
 800583a:	921b      	str	r2, [sp, #108]	; 0x6c
 800583c:	0a09      	lsrs	r1, r1, #8

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
 800583e:	e953 2320 	ldrd	r2, r3, [r3, #-128]	; 0x80
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 8005842:	0994      	lsrs	r4, r2, #6
 8005844:	940a      	str	r4, [sp, #40]	; 0x28
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 8005846:	9709      	str	r7, [sp, #36]	; 0x24
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005848:	9623      	str	r6, [sp, #140]	; 0x8c
 800584a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800584e:	9125      	str	r1, [sp, #148]	; 0x94
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 8005850:	e9dd 6722 	ldrd	r6, r7, [sp, #136]	; 0x88
 8005854:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005858:	404f      	eors	r7, r1
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 800585a:	990a      	ldr	r1, [sp, #40]	; 0x28
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 800585c:	4046      	eors	r6, r0
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 800585e:	ea41 6183 	orr.w	r1, r1, r3, lsl #26
 8005862:	910a      	str	r1, [sp, #40]	; 0x28
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005864:	0cd1      	lsrs	r1, r2, #19
 8005866:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
 800586a:	9126      	str	r1, [sp, #152]	; 0x98
 800586c:	ea4f 718a 	mov.w	r1, sl, lsl #30
 8005870:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 8005874:	911c      	str	r1, [sp, #112]	; 0x70
 8005876:	ea4f 711a 	mov.w	r1, sl, lsr #28
 800587a:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 800587e:	911e      	str	r1, [sp, #120]	; 0x78
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
 8005880:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8005884:	4070      	eors	r0, r6
 8005886:	4079      	eors	r1, r7
 8005888:	e9cd 0130 	strd	r0, r1, [sp, #192]	; 0xc0
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
 800588c:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 8005890:	0999      	lsrs	r1, r3, #6
 8005892:	910b      	str	r1, [sp, #44]	; 0x2c

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
 8005894:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8005898:	4070      	eors	r0, r6
 800589a:	4079      	eors	r1, r7
 800589c:	f10c 0408 	add.w	r4, ip, #8
 80058a0:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
 80058a4:	4046      	eors	r6, r0
 80058a6:	404f      	eors	r7, r1
 80058a8:	e9cd 672e 	strd	r6, r7, [sp, #184]	; 0xb8
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 80058ac:	e9dd 0130 	ldrd	r0, r1, [sp, #192]	; 0xc0
	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
 80058b0:	af64      	add	r7, sp, #400	; 0x190
 80058b2:	f004 040f 	and.w	r4, r4, #15
 80058b6:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 80058ba:	e955 6720 	ldrd	r6, r7, [r5, #-128]	; 0x80
 80058be:	1980      	adds	r0, r0, r6
 80058c0:	eb41 0107 	adc.w	r1, r1, r7
 80058c4:	e9cd 0130 	strd	r0, r1, [sp, #192]	; 0xc0
 80058c8:	e954 0120 	ldrd	r0, r1, [r4, #-128]	; 0x80
 80058cc:	e9dd 6730 	ldrd	r6, r7, [sp, #192]	; 0xc0
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80058d0:	0cdc      	lsrs	r4, r3, #19
 80058d2:	ea44 3442 	orr.w	r4, r4, r2, lsl #13
 80058d6:	9427      	str	r4, [sp, #156]	; 0x9c
 80058d8:	00d4      	lsls	r4, r2, #3
 80058da:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 80058de:	00db      	lsls	r3, r3, #3
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 80058e0:	1980      	adds	r0, r0, r6
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80058e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 80058e6:	eb41 0107 	adc.w	r1, r1, r7
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80058ea:	9428      	str	r4, [sp, #160]	; 0xa0
 80058ec:	9329      	str	r3, [sp, #164]	; 0xa4
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 80058ee:	e9dd 6726 	ldrd	r6, r7, [sp, #152]	; 0x98
 80058f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058f6:	4056      	eors	r6, r2
 80058f8:	405f      	eors	r7, r3
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
 80058fa:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 80058fe:	4056      	eors	r6, r2
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 8005900:	1982      	adds	r2, r0, r6
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
 8005902:	ea87 0703 	eor.w	r7, r7, r3
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 8005906:	eb41 0307 	adc.w	r3, r1, r7
 800590a:	e9cd 2330 	strd	r2, r3, [sp, #192]	; 0xc0
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
 800590e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005912:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005916:	ea20 0008 	bic.w	r0, r0, r8
 800591a:	ea02 0208 	and.w	r2, r2, r8
 800591e:	ea03 0309 	and.w	r3, r3, r9
 8005922:	ea21 0109 	bic.w	r1, r1, r9
 8005926:	4050      	eors	r0, r2
 8005928:	4059      	eors	r1, r3
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 800592a:	ea4f 738b 	mov.w	r3, fp, lsl #30

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 800592e:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005932:	ea43 039a 	orr.w	r3, r3, sl, lsr #2

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 8005936:	1980      	adds	r0, r0, r6
 8005938:	eb41 0107 	adc.w	r1, r1, r7
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 800593c:	931d      	str	r3, [sp, #116]	; 0x74

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 800593e:	e955 6720 	ldrd	r6, r7, [r5, #-128]	; 0x80
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005942:	ea4f 634a 	mov.w	r3, sl, lsl #25

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 8005946:	1836      	adds	r6, r6, r0
 8005948:	eb47 0701 	adc.w	r7, r7, r1
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 800594c:	ea43 13db 	orr.w	r3, r3, fp, lsr #7
 8005950:	ea4f 721b 	mov.w	r2, fp, lsr #28
		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 8005954:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005958:	ea42 120a 	orr.w	r2, r2, sl, lsl #4
 800595c:	9320      	str	r3, [sp, #128]	; 0x80

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 800595e:	e9cd 672e 	strd	r6, r7, [sp, #184]	; 0xb8
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 8005962:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005966:	ea4f 634b 	mov.w	r3, fp, lsl #25
		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 800596a:	404f      	eors	r7, r1
 800596c:	4953      	ldr	r1, [pc, #332]	; (8005abc <sha512_block+0x490>)
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 800596e:	921f      	str	r2, [sp, #124]	; 0x7c
 8005970:	ea43 13da 	orr.w	r3, r3, sl, lsr #7
		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 8005974:	4046      	eors	r6, r0
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005976:	9321      	str	r3, [sp, #132]	; 0x84
 8005978:	eb01 04cc 	add.w	r4, r1, ip, lsl #3
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
 800597c:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8005980:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8005984:	4042      	eors	r2, r0
 8005986:	404b      	eors	r3, r1
 8005988:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800598c:	4050      	eors	r0, r2
 800598e:	4059      	eors	r1, r3
 8005990:	e9cd 0100 	strd	r0, r1, [sp]
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 8005994:	e9dd 2330 	ldrd	r2, r3, [sp, #192]	; 0xc0

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 8005998:	e9dd 012e 	ldrd	r0, r1, [sp, #184]	; 0xb8
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 800599c:	e945 2320 	strd	r2, r3, [r5, #-128]	; 0x80

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 80059a0:	f1a4 0508 	sub.w	r5, r4, #8
 80059a4:	e9d5 4500 	ldrd	r4, r5, [r5]
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 80059a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 80059ac:	1900      	adds	r0, r0, r4
 80059ae:	eb41 0105 	adc.w	r1, r1, r5
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 80059b2:	ea06 060a 	and.w	r6, r6, sl
 80059b6:	ea07 070b 	and.w	r7, r7, fp
 80059ba:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 80059be:	4014      	ands	r4, r2
 80059c0:	401d      	ands	r5, r3
 80059c2:	4074      	eors	r4, r6
 80059c4:	407d      	eors	r5, r7

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 80059c6:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
 80059ca:	1980      	adds	r0, r0, r6
 80059cc:	eb41 0107 	adc.w	r1, r1, r7
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
		const uint64_t temp2 = S0 + maj;
 80059d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059d4:	18a4      	adds	r4, r4, r2
 80059d6:	eb45 0503 	adc.w	r5, r5, r3

		/* Update round state */
		h = g;
		g = f;
		f = e;
		e = d + temp1;
 80059da:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 80059de:	1812      	adds	r2, r2, r0
 80059e0:	eb43 0301 	adc.w	r3, r3, r1
		d = c;
		c = b;
		b = a;
		a = temp1 + temp2;
 80059e4:	1900      	adds	r0, r0, r4
 80059e6:	eb41 0105 	adc.w	r1, r1, r5
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];

	for (i = 0; i < 80; i++) {
 80059ea:	f1bc 0f50 	cmp.w	ip, #80	; 0x50
 80059ee:	f47f aecb 	bne.w	8005788 <sha512_block+0x15c>
 80059f2:	4614      	mov	r4, r2
 80059f4:	461d      	mov	r5, r3
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	4640      	mov	r0, r8
 80059fc:	4649      	mov	r1, r9
 80059fe:	46d0      	mov	r8, sl
 8005a00:	46d9      	mov	r9, fp
 8005a02:	4682      	mov	sl, r0
 8005a04:	468b      	mov	fp, r1
 8005a06:	4620      	mov	r0, r4
 8005a08:	4629      	mov	r1, r5
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 8005a0a:	e9dd 4534 	ldrd	r4, r5, [sp, #208]	; 0xd0
 8005a0e:	18a4      	adds	r4, r4, r2
 8005a10:	eb45 0503 	adc.w	r5, r5, r3
	s->h[1] += b;
 8005a14:	e9dd 6736 	ldrd	r6, r7, [sp, #216]	; 0xd8
 8005a18:	eb16 0608 	adds.w	r6, r6, r8
 8005a1c:	eb47 0709 	adc.w	r7, r7, r9
	s->h[2] += c;
 8005a20:	e9dd 2338 	ldrd	r2, r3, [sp, #224]	; 0xe0
 8005a24:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 8005a28:	eb18 0802 	adds.w	r8, r8, r2
 8005a2c:	eb49 0903 	adc.w	r9, r9, r3
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 8005a30:	e9cd 4506 	strd	r4, r5, [sp, #24]
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
 8005a34:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
	s->h[4] += e;
 8005a38:	e9dd 233c 	ldrd	r2, r3, [sp, #240]	; 0xf0
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
	s->h[1] += b;
 8005a3c:	e9cd 6704 	strd	r6, r7, [sp, #16]
	s->h[2] += c;
	s->h[3] += d;
 8005a40:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 8005a44:	19a4      	adds	r4, r4, r6
 8005a46:	eb45 0507 	adc.w	r5, r5, r7
	s->h[4] += e;
 8005a4a:	1880      	adds	r0, r0, r2
 8005a4c:	eb41 0103 	adc.w	r1, r1, r3
	s->h[5] += f;
	s->h[6] += g;
 8005a50:	af40      	add	r7, sp, #256	; 0x100
	s->h[0] += a;
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
	s->h[4] += e;
	s->h[5] += f;
 8005a52:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
 8005a56:	eb12 020a 	adds.w	r2, r2, sl
 8005a5a:	eb43 030b 	adc.w	r3, r3, fp
	s->h[6] += g;
 8005a5e:	e9d7 6700 	ldrd	r6, r7, [r7]

	/* Store state */
	s->h[0] += a;
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
 8005a62:	e9cd 4502 	strd	r4, r5, [sp, #8]
	s->h[4] += e;
	s->h[5] += f;
	s->h[6] += g;
 8005a66:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
	s->h[7] += h;
 8005a6a:	f50d 7b84 	add.w	fp, sp, #264	; 0x108
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
	s->h[4] += e;
	s->h[5] += f;
	s->h[6] += g;
 8005a6e:	19a4      	adds	r4, r4, r6
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 8005a70:	f8dd c0cc 	ldr.w	ip, [sp, #204]	; 0xcc
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
	s->h[4] += e;
	s->h[5] += f;
	s->h[6] += g;
 8005a74:	eb45 0507 	adc.w	r5, r5, r7
	s->h[7] += h;
 8005a78:	e9db ab00 	ldrd	sl, fp, [fp]
 8005a7c:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005a80:	eb16 060a 	adds.w	r6, r6, sl
 8005a84:	eb47 070b 	adc.w	r7, r7, fp
	}

	/* Store state */
	s->h[0] += a;
	s->h[1] += b;
	s->h[2] += c;
 8005a88:	e9cc 8904 	strd	r8, r9, [ip, #16]
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 8005a8c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
 8005a90:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 8005a94:	e9cc ab00 	strd	sl, fp, [ip]
	s->h[1] += b;
 8005a98:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
	s->h[2] += c;
	s->h[3] += d;
 8005a9c:	e9cc 8906 	strd	r8, r9, [ip, #24]
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
	s->h[1] += b;
 8005aa0:	e9cc ab02 	strd	sl, fp, [ip, #8]
	s->h[2] += c;
	s->h[3] += d;
	s->h[4] += e;
 8005aa4:	e9cc 0108 	strd	r0, r1, [ip, #32]
	s->h[5] += f;
 8005aa8:	e9cc 230a 	strd	r2, r3, [ip, #40]	; 0x28
	s->h[6] += g;
 8005aac:	e9cc 450c 	strd	r4, r5, [ip, #48]	; 0x30
	s->h[7] += h;
 8005ab0:	e9cc 670e 	strd	r6, r7, [ip, #56]	; 0x38
}
 8005ab4:	b064      	add	sp, #400	; 0x190
 8005ab6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005aba:	4770      	bx	lr
 8005abc:	08007530 	stmdaeq	r0, {r4, r5, r8, sl, ip, sp, lr}

08005ac0 <sha512_final>:

void sha512_final(struct sha512_state *s, const uint8_t *blk,
		  size_t total_size)
{
 8005ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t temp[SHA512_BLOCK_SIZE] = {0};
 8005ac4:	2580      	movs	r5, #128	; 0x80
	s->h[7] += h;
}

void sha512_final(struct sha512_state *s, const uint8_t *blk,
		  size_t total_size)
{
 8005ac6:	b0a0      	sub	sp, #128	; 0x80
 8005ac8:	4614      	mov	r4, r2
 8005aca:	4682      	mov	sl, r0
 8005acc:	460f      	mov	r7, r1
	uint8_t temp[SHA512_BLOCK_SIZE] = {0};
 8005ace:	4668      	mov	r0, sp
 8005ad0:	462a      	mov	r2, r5
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	f000 ff4c 	bl	8006970 <memset>
	const size_t last_size = total_size & (SHA512_BLOCK_SIZE - 1);

	if (last_size)
 8005ad8:	f014 067f 	ands.w	r6, r4, #127	; 0x7f
 8005adc:	d11e      	bne.n	8005b1c <sha512_final+0x5c>
		memcpy(temp, blk, last_size);
	temp[last_size] = 0x80;
 8005ade:	f88d 5000 	strb.w	r5, [sp]
		sha512_block(s, temp);
		memset(temp, 0, sizeof(temp));
	}

	/* Note: we assume total_size fits in 61 bits */
	store64(temp + SHA512_BLOCK_SIZE - 8, total_size << 3);
 8005ae2:	00e2      	lsls	r2, r4, #3

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005ae4:	0a14      	lsrs	r4, r2, #8
	*(x--) = v;
	v >>= 8;
 8005ae6:	0a26      	lsrs	r6, r4, #8

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005ae8:	2500      	movs	r5, #0
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005aea:	ea4f 2816 	mov.w	r8, r6, lsr #8
		memset(temp, 0, sizeof(temp));
	}

	/* Note: we assume total_size fits in 61 bits */
	store64(temp + SHA512_BLOCK_SIZE - 8, total_size << 3);
	sha512_block(s, temp);
 8005aee:	4650      	mov	r0, sl
 8005af0:	4669      	mov	r1, sp
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005af2:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
	v >>= 8;
	*(x--) = v;
 8005af6:	f88d 407e 	strb.w	r4, [sp, #126]	; 0x7e
	v >>= 8;
	*(x--) = v;
 8005afa:	f88d 607d 	strb.w	r6, [sp, #125]	; 0x7d
	v >>= 8;
	*(x--) = v;
 8005afe:	f88d 807c 	strb.w	r8, [sp, #124]	; 0x7c
	v >>= 8;
	*(x--) = v;
 8005b02:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
	v >>= 8;
	*(x--) = v;
 8005b06:	f88d 507a 	strb.w	r5, [sp, #122]	; 0x7a
	v >>= 8;
	*(x--) = v;
 8005b0a:	f88d 5079 	strb.w	r5, [sp, #121]	; 0x79
	v >>= 8;
	*(x--) = v;
 8005b0e:	f88d 5078 	strb.w	r5, [sp, #120]	; 0x78
		memset(temp, 0, sizeof(temp));
	}

	/* Note: we assume total_size fits in 61 bits */
	store64(temp + SHA512_BLOCK_SIZE - 8, total_size << 3);
	sha512_block(s, temp);
 8005b12:	f7ff fd8b 	bl	800562c <sha512_block>
}
 8005b16:	b020      	add	sp, #128	; 0x80
 8005b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{
	uint8_t temp[SHA512_BLOCK_SIZE] = {0};
	const size_t last_size = total_size & (SHA512_BLOCK_SIZE - 1);

	if (last_size)
		memcpy(temp, blk, last_size);
 8005b1c:	4639      	mov	r1, r7
 8005b1e:	4668      	mov	r0, sp
 8005b20:	4632      	mov	r2, r6
 8005b22:	f000 fefe 	bl	8006922 <memcpy>
	temp[last_size] = 0x80;
 8005b26:	eb0d 0305 	add.w	r3, sp, r5
 8005b2a:	4433      	add	r3, r6

	if (last_size > 111) {
 8005b2c:	2e6f      	cmp	r6, #111	; 0x6f
	uint8_t temp[SHA512_BLOCK_SIZE] = {0};
	const size_t last_size = total_size & (SHA512_BLOCK_SIZE - 1);

	if (last_size)
		memcpy(temp, blk, last_size);
	temp[last_size] = 0x80;
 8005b2e:	f803 5c80 	strb.w	r5, [r3, #-128]

	if (last_size > 111) {
 8005b32:	d9d6      	bls.n	8005ae2 <sha512_final+0x22>
		sha512_block(s, temp);
 8005b34:	4650      	mov	r0, sl
 8005b36:	4669      	mov	r1, sp
 8005b38:	f7ff fd78 	bl	800562c <sha512_block>
		memset(temp, 0, sizeof(temp));
 8005b3c:	4668      	mov	r0, sp
 8005b3e:	462a      	mov	r2, r5
 8005b40:	2100      	movs	r1, #0
 8005b42:	f000 ff15 	bl	8006970 <memset>
 8005b46:	e7cc      	b.n	8005ae2 <sha512_final+0x22>

08005b48 <sha512_get>:
	sha512_block(s, temp);
}

void sha512_get(const struct sha512_state *s, uint8_t *hash,
		unsigned int offset, unsigned int len)
{
 8005b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;

	if (offset > SHA512_BLOCK_SIZE)
 8005b4c:	2a80      	cmp	r2, #128	; 0x80
	sha512_block(s, temp);
}

void sha512_get(const struct sha512_state *s, uint8_t *hash,
		unsigned int offset, unsigned int len)
{
 8005b4e:	b09b      	sub	sp, #108	; 0x6c
 8005b50:	9014      	str	r0, [sp, #80]	; 0x50
 8005b52:	910f      	str	r1, [sp, #60]	; 0x3c
	int i;

	if (offset > SHA512_BLOCK_SIZE)
 8005b54:	d87b      	bhi.n	8005c4e <sha512_get+0x106>
		return;

	if (len > SHA512_BLOCK_SIZE - offset)
 8005b56:	f1c2 0180 	rsb	r1, r2, #128	; 0x80
 8005b5a:	4299      	cmp	r1, r3
 8005b5c:	bf28      	it	cs
 8005b5e:	4619      	movcs	r1, r3
		len = SHA512_BLOCK_SIZE - offset;

	/* Skip whole words */
	i = offset >> 3;
 8005b60:	08d0      	lsrs	r0, r2, #3
	offset &= 7;

	/* Skip/read out bytes */
	if (offset) {
 8005b62:	f012 0207 	ands.w	r2, r2, #7
 8005b66:	910d      	str	r1, [sp, #52]	; 0x34

	if (len > SHA512_BLOCK_SIZE - offset)
		len = SHA512_BLOCK_SIZE - offset;

	/* Skip whole words */
	i = offset >> 3;
 8005b68:	900e      	str	r0, [sp, #56]	; 0x38
	offset &= 7;

	/* Skip/read out bytes */
	if (offset) {
 8005b6a:	9215      	str	r2, [sp, #84]	; 0x54
 8005b6c:	d172      	bne.n	8005c54 <sha512_get+0x10c>
		len -= c;
		hash += c;
	}

	/* Read out whole words */
	while (len >= 8) {
 8005b6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005b70:	2d07      	cmp	r5, #7
 8005b72:	d969      	bls.n	8005c48 <sha512_get+0x100>
 8005b74:	f1a5 0308 	sub.w	r3, r5, #8
 8005b78:	08db      	lsrs	r3, r3, #3
 8005b7a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005b7c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005b7e:	469c      	mov	ip, r3
 8005b80:	4484      	add	ip, r0
 8005b82:	930a      	str	r3, [sp, #40]	; 0x28
 8005b84:	f104 0308 	add.w	r3, r4, #8
 8005b88:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 8005b8c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8005b90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b92:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8005b96:	9012      	str	r0, [sp, #72]	; 0x48
		store64(hash, s->h[i++]);
 8005b98:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8005b9a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8005b9e:	e9cd 2306 	strd	r2, r3, [sp, #24]

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005ba2:	9d06      	ldr	r5, [sp, #24]
 8005ba4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005ba8:	0a2a      	lsrs	r2, r5, #8
 8005baa:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 8005bae:	ea4f 231c 	mov.w	r3, ip, lsr #8
	*(x--) = v;
	v >>= 8;
 8005bb2:	0a10      	lsrs	r0, r2, #8
		hash += c;
	}

	/* Read out whole words */
	while (len >= 8) {
		store64(hash, s->h[i++]);
 8005bb4:	9412      	str	r4, [sp, #72]	; 0x48
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005bb6:	ea40 6403 	orr.w	r4, r0, r3, lsl #24
 8005bba:	0a1d      	lsrs	r5, r3, #8
	*(x--) = v;
	v >>= 8;
 8005bbc:	ea4f 2a14 	mov.w	sl, r4, lsr #8
 8005bc0:	ea4a 6a05 	orr.w	sl, sl, r5, lsl #24
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005bc4:	9404      	str	r4, [sp, #16]
	*(x--) = v;
	v >>= 8;
 8005bc6:	ea4f 2b15 	mov.w	fp, r5, lsr #8
	*(x--) = v;
	v >>= 8;
 8005bca:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8005bce:	ea44 640b 	orr.w	r4, r4, fp, lsl #24
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005bd2:	9505      	str	r5, [sp, #20]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005bd4:	0a26      	lsrs	r6, r4, #8
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005bd6:	ea4f 251b 	mov.w	r5, fp, lsr #8
	*(x--) = v;
	v >>= 8;
 8005bda:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
 8005bde:	0a2f      	lsrs	r7, r5, #8
	*(x--) = v;
	v >>= 8;
 8005be0:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8005be4:	ea48 6807 	orr.w	r8, r8, r7, lsl #24
 8005be8:	ea4f 2917 	mov.w	r9, r7, lsr #8
	*(x--) = v;
	v >>= 8;
 8005bec:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8005bf0:	ea40 6c09 	orr.w	ip, r0, r9, lsl #24
 8005bf4:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8005bf8:	9009      	str	r0, [sp, #36]	; 0x24
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005bfa:	f89d 0010 	ldrb.w	r0, [sp, #16]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005bfe:	f8cd c020 	str.w	ip, [sp, #32]
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005c02:	7148      	strb	r0, [r1, #5]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005c04:	f89d c020 	ldrb.w	ip, [sp, #32]
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005c08:	f89d 0018 	ldrb.w	r0, [sp, #24]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005c0c:	f881 8001 	strb.w	r8, [r1, #1]
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005c10:	71c8      	strb	r0, [r1, #7]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005c12:	708e      	strb	r6, [r1, #2]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005c14:	70cc      	strb	r4, [r1, #3]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005c16:	f881 a004 	strb.w	sl, [r1, #4]
static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005c1a:	718a      	strb	r2, [r1, #6]
		len -= c;
		hash += c;
	}

	/* Read out whole words */
	while (len >= 8) {
 8005c1c:	9812      	ldr	r0, [sp, #72]	; 0x48
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005c1e:	f801 cb08 	strb.w	ip, [r1], #8
		len -= c;
		hash += c;
	}

	/* Read out whole words */
	while (len >= 8) {
 8005c22:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8005c26:	4560      	cmp	r0, ip
 8005c28:	d1b6      	bne.n	8005b98 <sha512_get+0x50>
 8005c2a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005c2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c2e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005c30:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005c32:	1c4b      	adds	r3, r1, #1
 8005c34:	f100 0c01 	add.w	ip, r0, #1
 8005c38:	4461      	add	r1, ip
 8005c3a:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8005c3e:	f005 0507 	and.w	r5, r5, #7
 8005c42:	910e      	str	r1, [sp, #56]	; 0x38
 8005c44:	940f      	str	r4, [sp, #60]	; 0x3c
 8005c46:	950d      	str	r5, [sp, #52]	; 0x34
		hash += 8;
		len -= 8;
	}

	/* Read out bytes */
	if (len) {
 8005c48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d173      	bne.n	8005d36 <sha512_get+0x1ee>
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
		memcpy(hash, tmp, len);
	}
}
 8005c4e:	b01b      	add	sp, #108	; 0x6c
 8005c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 8005c54:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005c56:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005c5e:	0a14      	lsrs	r4, r2, #8
 8005c60:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 8005c64:	0a1d      	lsrs	r5, r3, #8
	*(x--) = v;
	v >>= 8;
 8005c66:	0a21      	lsrs	r1, r4, #8
 8005c68:	ea41 6c05 	orr.w	ip, r1, r5, lsl #24
 8005c6c:	ea4f 2e15 	mov.w	lr, r5, lsr #8
	*(x--) = v;
	v >>= 8;
 8005c70:	ea4f 211c 	mov.w	r1, ip, lsr #8
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005c74:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
	*(x--) = v;
	v >>= 8;
 8005c78:	ea41 6c0e 	orr.w	ip, r1, lr, lsl #24
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005c7c:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005c80:	ea4f 211c 	mov.w	r1, ip, lsr #8
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005c84:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8005c88:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
	*(x--) = v;
	v >>= 8;
 8005c8c:	ea41 6c0e 	orr.w	ip, r1, lr, lsl #24
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005c90:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005c94:	ea4f 201c 	mov.w	r0, ip, lsr #8
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005c98:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
	*(x--) = v;
	v >>= 8;
 8005c9c:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
 8005ca0:	ea4f 211e 	mov.w	r1, lr, lsr #8
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005ca4:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005ca8:	0a02      	lsrs	r2, r0, #8
 8005caa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005cae:	0a0b      	lsrs	r3, r1, #8
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005cb0:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005cb4:	0a15      	lsrs	r5, r2, #8
 8005cb6:	ea45 6c03 	orr.w	ip, r5, r3, lsl #24
static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005cba:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005cbe:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005cc2:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005cc6:	f8cd c018 	str.w	ip, [sp, #24]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005cca:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
	offset &= 7;

	/* Skip/read out bytes */
	if (offset) {
		uint8_t tmp[8];
		unsigned int c = 8 - offset;
 8005cce:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005cd2:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
	v >>= 8;
	*(x--) = v;
 8005cd6:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
	v >>= 8;
	*(x--) = v;
 8005cda:	f88d 5063 	strb.w	r5, [sp, #99]	; 0x63
 8005cde:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005ce0:	f89d 5018 	ldrb.w	r5, [sp, #24]
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005ce4:	f88d e065 	strb.w	lr, [sp, #101]	; 0x65
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005ce8:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005cec:	ea4f 2e13 	mov.w	lr, r3, lsr #8
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005cf0:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 8005cf4:	980e      	ldr	r0, [sp, #56]	; 0x38
		memcpy(hash, tmp + offset, c);
 8005cf6:	9a15      	ldr	r2, [sp, #84]	; 0x54
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005cf8:	a91a      	add	r1, sp, #104	; 0x68
	offset &= 7;

	/* Skip/read out bytes */
	if (offset) {
		uint8_t tmp[8];
		unsigned int c = 8 - offset;
 8005cfa:	f1cc 0308 	rsb	r3, ip, #8
 8005cfe:	429c      	cmp	r4, r3
 8005d00:	bf38      	it	cc
 8005d02:	4623      	movcc	r3, r4
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d04:	f801 5d08 	strb.w	r5, [r1, #-8]!
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 8005d08:	f100 0c01 	add.w	ip, r0, #1
		memcpy(hash, tmp + offset, c);
		len -= c;
 8005d0c:	1ae4      	subs	r4, r4, r3

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
		memcpy(hash, tmp + offset, c);
 8005d0e:	4411      	add	r1, r2
 8005d10:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005d12:	461a      	mov	r2, r3
		len -= c;
 8005d14:	940d      	str	r4, [sp, #52]	; 0x34

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
		memcpy(hash, tmp + offset, c);
 8005d16:	9302      	str	r3, [sp, #8]
 8005d18:	f8cd c00c 	str.w	ip, [sp, #12]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d1c:	f8cd e01c 	str.w	lr, [sp, #28]

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
		memcpy(hash, tmp + offset, c);
 8005d20:	f000 fdff 	bl	8006922 <memcpy>
		len -= c;
		hash += c;
 8005d24:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005d26:	9b02      	ldr	r3, [sp, #8]
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 8005d28:	f8dd c00c 	ldr.w	ip, [sp, #12]
		memcpy(hash, tmp + offset, c);
		len -= c;
		hash += c;
 8005d2c:	441c      	add	r4, r3
 8005d2e:	940f      	str	r4, [sp, #60]	; 0x3c
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 8005d30:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8005d34:	e71b      	b.n	8005b6e <sha512_get+0x26>

	/* Read out bytes */
	if (len) {
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
 8005d36:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005d38:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005d3a:	eb04 0cc5 	add.w	ip, r4, r5, lsl #3
 8005d3e:	e9dc 0100 	ldrd	r0, r1, [ip]
 8005d42:	e9cd 0104 	strd	r0, r1, [sp, #16]

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005d46:	ea4f 2a10 	mov.w	sl, r0, lsr #8
 8005d4a:	ea4a 6a01 	orr.w	sl, sl, r1, lsl #24
 8005d4e:	9905      	ldr	r1, [sp, #20]
	*(x--) = v;
	v >>= 8;
 8005d50:	ea4f 281a 	mov.w	r8, sl, lsr #8

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005d54:	ea4f 2b11 	mov.w	fp, r1, lsr #8
	*(x--) = v;
	v >>= 8;
 8005d58:	ea48 680b 	orr.w	r8, r8, fp, lsl #24
 8005d5c:	ea4f 291b 	mov.w	r9, fp, lsr #8
	*(x--) = v;
	v >>= 8;
 8005d60:	ea4f 2618 	mov.w	r6, r8, lsr #8
 8005d64:	ea46 6609 	orr.w	r6, r6, r9, lsl #24
 8005d68:	ea4f 2719 	mov.w	r7, r9, lsr #8
	*(x--) = v;
	v >>= 8;
 8005d6c:	0a34      	lsrs	r4, r6, #8
 8005d6e:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
 8005d72:	0a3d      	lsrs	r5, r7, #8
	*(x--) = v;
	v >>= 8;
 8005d74:	0a20      	lsrs	r0, r4, #8
 8005d76:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 8005d7a:	0a29      	lsrs	r1, r5, #8
	*(x--) = v;
	v >>= 8;
 8005d7c:	0a03      	lsrs	r3, r0, #8
 8005d7e:	ea43 6c01 	orr.w	ip, r3, r1, lsl #24
 8005d82:	ea4f 2e11 	mov.w	lr, r1, lsr #8
	*(x--) = v;
	v >>= 8;
 8005d86:	ea4f 231c 	mov.w	r3, ip, lsr #8
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005d8a:	f89d 2010 	ldrb.w	r2, [sp, #16]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d8e:	f8cd c018 	str.w	ip, [sp, #24]
	*(x--) = v;
	v >>= 8;
 8005d92:	ea43 6c0e 	orr.w	ip, r3, lr, lsl #24
 8005d96:	f8cd c010 	str.w	ip, [sp, #16]
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005d9a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d9e:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005da2:	f89d 2010 	ldrb.w	r2, [sp, #16]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005da6:	f89d 0018 	ldrb.w	r0, [sp, #24]
	v >>= 8;
	*(x--) = v;
 8005daa:	a91a      	add	r1, sp, #104	; 0x68
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005dac:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005db0:	f8cd e01c 	str.w	lr, [sp, #28]
static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005db4:	f88d a066 	strb.w	sl, [sp, #102]	; 0x66
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005db8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005dbc:	f88d 8065 	strb.w	r8, [sp, #101]	; 0x65
	v >>= 8;
	*(x--) = v;
 8005dc0:	f88d 6064 	strb.w	r6, [sp, #100]	; 0x64
	v >>= 8;
	*(x--) = v;
 8005dc4:	f88d 4063 	strb.w	r4, [sp, #99]	; 0x63
	/* Read out bytes */
	if (len) {
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
		memcpy(hash, tmp, len);
 8005dc8:	980f      	ldr	r0, [sp, #60]	; 0x3c
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005dca:	f801 2d08 	strb.w	r2, [r1, #-8]!
	/* Read out bytes */
	if (len) {
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
		memcpy(hash, tmp, len);
 8005dce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005dd0:	f8cd e014 	str.w	lr, [sp, #20]
	/* Read out bytes */
	if (len) {
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
		memcpy(hash, tmp, len);
 8005dd4:	f000 fda5 	bl	8006922 <memcpy>
	}
}
 8005dd8:	b01b      	add	sp, #108	; 0x6c
 8005dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dde:	bf00      	nop

08005de0 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(u8 bEpNum, u16 wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8005de0:	0080      	lsls	r0, r0, #2
 8005de2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8005de6:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8005dea:	6803      	ldr	r3, [r0, #0]
 8005dec:	06ca      	lsls	r2, r1, #27
 8005dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	bf48      	it	mi
 8005dfa:	f083 0310 	eormi.w	r3, r3, #16
 8005dfe:	068a      	lsls	r2, r1, #26
 8005e00:	bf48      	it	mi
 8005e02:	f083 0320 	eormi.w	r3, r3, #32
 8005e06:	6003      	str	r3, [r0, #0]
 8005e08:	4770      	bx	lr

08005e0a <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(u8 bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8005e0a:	0080      	lsls	r0, r0, #2
 8005e0c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8005e10:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8005e14:	6803      	ldr	r3, [r0, #0]
 8005e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005e24:	6003      	str	r3, [r0, #0]
 8005e26:	4770      	bx	lr

08005e28 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(u8 bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8005e28:	0080      	lsls	r0, r0, #2
 8005e2a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8005e2e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8005e32:	6803      	ldr	r3, [r0, #0]
 8005e34:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3c:	041b      	lsls	r3, r3, #16
 8005e3e:	0c1b      	lsrs	r3, r3, #16
 8005e40:	6003      	str	r3, [r0, #0]
 8005e42:	4770      	bx	lr

08005e44 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(u8 bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8005e44:	0080      	lsls	r0, r0, #2
 8005e46:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8005e4a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8005e4e:	6803      	ldr	r3, [r0, #0]
 8005e50:	045b      	lsls	r3, r3, #17
 8005e52:	d506      	bpl.n	8005e62 <ClearDTOG_RX+0x1e>
 8005e54:	6802      	ldr	r2, [r0, #0]
 8005e56:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e60:	6003      	str	r3, [r0, #0]
 8005e62:	4770      	bx	lr

08005e64 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(u8 bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8005e64:	0080      	lsls	r0, r0, #2
 8005e66:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8005e6a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8005e6e:	6803      	ldr	r3, [r0, #0]
 8005e70:	065b      	lsls	r3, r3, #25
 8005e72:	d506      	bpl.n	8005e82 <ClearDTOG_TX+0x1e>
 8005e74:	6802      	ldr	r2, [r0, #0]
 8005e76:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e80:	6003      	str	r3, [r0, #0]
 8005e82:	4770      	bx	lr

08005e84 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPTxAddr(u8 bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8005e84:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <GetEPTxAddr+0x18>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005e8e:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8005e92:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8005e96:	0040      	lsls	r0, r0, #1
}
 8005e98:	8800      	ldrh	r0, [r0, #0]
 8005e9a:	4770      	bx	lr
 8005e9c:	40005c50 	andmi	r5, r0, r0, asr ip

08005ea0 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPRxAddr(u8 bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8005ea0:	4b04      	ldr	r3, [pc, #16]	; (8005eb4 <GetEPRxAddr+0x14>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005eaa:	4b03      	ldr	r3, [pc, #12]	; (8005eb8 <GetEPRxAddr+0x18>)
 8005eac:	4403      	add	r3, r0
 8005eae:	005b      	lsls	r3, r3, #1
}
 8005eb0:	8818      	ldrh	r0, [r3, #0]
 8005eb2:	4770      	bx	lr
 8005eb4:	40005c50 	andmi	r5, r0, r0, asr ip
 8005eb8:	20003004 	andcs	r3, r0, r4

08005ebc <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(u8 bEpNum, u16 wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8005ebc:	4b04      	ldr	r3, [pc, #16]	; (8005ed0 <SetEPTxCount+0x14>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005ec6:	4b03      	ldr	r3, [pc, #12]	; (8005ed4 <SetEPTxCount+0x18>)
 8005ec8:	4403      	add	r3, r0
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	6019      	str	r1, [r3, #0]
 8005ece:	4770      	bx	lr
 8005ed0:	40005c50 	andmi	r5, r0, r0, asr ip
 8005ed4:	20003002 	andcs	r3, r0, r2

08005ed8 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(u8 bEpNum, u16 wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8005ed8:	4b0d      	ldr	r3, [pc, #52]	; (8005f10 <SetEPRxCount+0x38>)
 8005eda:	293e      	cmp	r1, #62	; 0x3e
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <SetEPRxCount+0x3c>)
 8005ee6:	4403      	add	r3, r0
 8005ee8:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8005eec:	d909      	bls.n	8005f02 <SetEPRxCount+0x2a>
 8005eee:	094b      	lsrs	r3, r1, #5
 8005ef0:	06c8      	lsls	r0, r1, #27
 8005ef2:	bf04      	itt	eq
 8005ef4:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8005ef8:	b29b      	uxtheq	r3, r3
 8005efa:	029b      	lsls	r3, r3, #10
 8005efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f00:	e004      	b.n	8005f0c <SetEPRxCount+0x34>
 8005f02:	084b      	lsrs	r3, r1, #1
 8005f04:	07c9      	lsls	r1, r1, #31
 8005f06:	bf48      	it	mi
 8005f08:	3301      	addmi	r3, #1
 8005f0a:	029b      	lsls	r3, r3, #10
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	4770      	bx	lr
 8005f10:	40005c50 	andmi	r5, r0, r0, asr ip
 8005f14:	20003006 	andcs	r3, r0, r6

08005f18 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8005f18:	b570      	push	{r4, r5, r6, lr}
  u32 wEPVal = 0;
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8005f1a:	4a4c      	ldr	r2, [pc, #304]	; (800604c <CTR_LP+0x134>)
 8005f1c:	4b4c      	ldr	r3, [pc, #304]	; (8006050 <CTR_LP+0x138>)
 8005f1e:	6811      	ldr	r1, [r2, #0]
 8005f20:	b288      	uxth	r0, r1
 8005f22:	040c      	lsls	r4, r1, #16
 8005f24:	8018      	strh	r0, [r3, #0]
 8005f26:	f140 8090 	bpl.w	800604a <CTR_LP+0x132>
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
 8005f2a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005f2e:	6011      	str	r1, [r2, #0]
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
 8005f30:	881a      	ldrh	r2, [r3, #0]
 8005f32:	4c48      	ldr	r4, [pc, #288]	; (8006054 <CTR_LP+0x13c>)
 8005f34:	f002 020f 	and.w	r2, r2, #15
 8005f38:	7022      	strb	r2, [r4, #0]
    if (EPindex == 0)
 8005f3a:	2a00      	cmp	r2, #0
 8005f3c:	d15f      	bne.n	8005ffe <CTR_LP+0xe6>
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 8005f3e:	4c46      	ldr	r4, [pc, #280]	; (8006058 <CTR_LP+0x140>)
 8005f40:	4d46      	ldr	r5, [pc, #280]	; (800605c <CTR_LP+0x144>)
 8005f42:	6822      	ldr	r2, [r4, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8005f44:	4e46      	ldr	r6, [pc, #280]	; (8006060 <CTR_LP+0x148>)
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 8005f46:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8005f4a:	802a      	strh	r2, [r5, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8005f4c:	6822      	ldr	r2, [r4, #0]
 8005f4e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005f52:	8032      	strh	r2, [r6, #0]
      _SetEPRxStatus(ENDP0, EP_RX_NAK);
 8005f54:	6822      	ldr	r2, [r4, #0]
 8005f56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f5a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005f5e:	b292      	uxth	r2, r2
 8005f60:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8005f64:	6022      	str	r2, [r4, #0]
      _SetEPTxStatus(ENDP0, EP_TX_NAK);
 8005f66:	6822      	ldr	r2, [r4, #0]
 8005f68:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f70:	b292      	uxth	r2, r2
 8005f72:	f082 0220 	eor.w	r2, r2, #32
 8005f76:	6022      	str	r2, [r4, #0]


      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	06d8      	lsls	r0, r3, #27
 8005f7c:	d502      	bpl.n	8005f84 <CTR_LP+0x6c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8005f7e:	6823      	ldr	r3, [r4, #0]
        if ((wEPVal & EP_CTR_TX) != 0)
 8005f80:	0619      	lsls	r1, r3, #24
 8005f82:	d507      	bpl.n	8005f94 <CTR_LP+0x7c>
        {
          _ClearEP_CTR_TX(ENDP0);
 8005f84:	6822      	ldr	r2, [r4, #0]
 8005f86:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	6023      	str	r3, [r4, #0]
          In0_Process();
 8005f8e:	f000 fc61 	bl	8006854 <In0_Process>
 8005f92:	e012      	b.n	8005fba <CTR_LP+0xa2>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }
        else if ((wEPVal &EP_SETUP) != 0)
 8005f94:	051a      	lsls	r2, r3, #20
 8005f96:	d507      	bpl.n	8005fa8 <CTR_LP+0x90>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8005f98:	6822      	ldr	r2, [r4, #0]
 8005f9a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 8005fa2:	f000 fa69 	bl	8006478 <Setup0_Process>
 8005fa6:	e008      	b.n	8005fba <CTR_LP+0xa2>
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8005fa8:	0418      	lsls	r0, r3, #16
 8005faa:	d5b6      	bpl.n	8005f1a <CTR_LP+0x2>
        {
          _ClearEP_CTR_RX(ENDP0);
 8005fac:	6822      	ldr	r2, [r4, #0]
 8005fae:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8005fb6:	f000 fbcd 	bl	8006754 <Out0_Process>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	882a      	ldrh	r2, [r5, #0]
 8005fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	04d1      	lsls	r1, r2, #19
 8005fca:	bf48      	it	mi
 8005fcc:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 8005fd0:	0495      	lsls	r5, r2, #18
 8005fd2:	4a21      	ldr	r2, [pc, #132]	; (8006058 <CTR_LP+0x140>)
 8005fd4:	bf48      	it	mi
 8005fd6:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 8005fda:	6013      	str	r3, [r2, #0]
          _SetEPTxStatus(ENDP0, SaveTState);
 8005fdc:	6813      	ldr	r3, [r2, #0]
 8005fde:	8831      	ldrh	r1, [r6, #0]
 8005fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	06cc      	lsls	r4, r1, #27
 8005fec:	bf48      	it	mi
 8005fee:	f083 0310 	eormi.w	r3, r3, #16
 8005ff2:	0688      	lsls	r0, r1, #26
 8005ff4:	bf48      	it	mi
 8005ff6:	f083 0320 	eormi.w	r3, r3, #32
 8005ffa:	6013      	str	r3, [r2, #0]
          return;
 8005ffc:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8005ffe:	0093      	lsls	r3, r2, #2
 8006000:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006004:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006008:	681d      	ldr	r5, [r3, #0]
      if ((wEPVal & EP_CTR_RX) != 0)
 800600a:	0429      	lsls	r1, r5, #16
 800600c:	d509      	bpl.n	8006022 <CTR_LP+0x10a>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 800600e:	6818      	ldr	r0, [r3, #0]
 8006010:	f640 718f 	movw	r1, #3983	; 0xf8f
 8006014:	4001      	ands	r1, r0
 8006016:	6019      	str	r1, [r3, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8006018:	4b12      	ldr	r3, [pc, #72]	; (8006064 <CTR_LP+0x14c>)
 800601a:	3a01      	subs	r2, #1
 800601c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006020:	4798      	blx	r3

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8006022:	062b      	lsls	r3, r5, #24
 8006024:	f57f af79 	bpl.w	8005f1a <CTR_LP+0x2>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8006028:	7821      	ldrb	r1, [r4, #0]
 800602a:	f648 720f 	movw	r2, #36623	; 0x8f0f
 800602e:	008b      	lsls	r3, r1, #2
 8006030:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006034:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006038:	6818      	ldr	r0, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800603a:	3901      	subs	r1, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800603c:	4002      	ands	r2, r0
 800603e:	601a      	str	r2, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8006040:	4b09      	ldr	r3, [pc, #36]	; (8006068 <CTR_LP+0x150>)
 8006042:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006046:	4798      	blx	r3
 8006048:	e767      	b.n	8005f1a <CTR_LP+0x2>
 800604a:	bd70      	pop	{r4, r5, r6, pc}
 800604c:	40005c44 	andmi	r5, r0, r4, asr #24
 8006050:	20000474 	andcs	r0, r0, r4, ror r4
 8006054:	20000570 	andcs	r0, r0, r0, ror r5
 8006058:	40005c00 	andmi	r5, r0, r0, lsl #24
 800605c:	20000562 	andcs	r0, r0, r2, ror #10
 8006060:	20000564 	andcs	r0, r0, r4, ror #10
 8006064:	20000064 	andcs	r0, r0, r4, rrx
 8006068:	20000048 	andcs	r0, r0, r8, asr #32

0800606c <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 800606c:	b508      	push	{r3, lr}
  pInformation = &Device_Info;
 800606e:	4a07      	ldr	r2, [pc, #28]	; (800608c <USB_Init+0x20>)
 8006070:	4b07      	ldr	r3, [pc, #28]	; (8006090 <USB_Init+0x24>)
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8006072:	4908      	ldr	r1, [pc, #32]	; (8006094 <USB_Init+0x28>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 8006074:	6013      	str	r3, [r2, #0]
  pInformation->ControlState = 2;
 8006076:	2202      	movs	r2, #2
 8006078:	721a      	strb	r2, [r3, #8]
  pProperty = &Device_Property;
 800607a:	4b07      	ldr	r3, [pc, #28]	; (8006098 <USB_Init+0x2c>)
 800607c:	4a07      	ldr	r2, [pc, #28]	; (800609c <USB_Init+0x30>)
 800607e:	6013      	str	r3, [r2, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8006080:	4a07      	ldr	r2, [pc, #28]	; (80060a0 <USB_Init+0x34>)
  /* Initialize devices one by one */

  pProperty->Init();
 8006082:	681b      	ldr	r3, [r3, #0]
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8006084:	6011      	str	r1, [r2, #0]
  /* Initialize devices one by one */

  pProperty->Init();
 8006086:	4798      	blx	r3
 8006088:	bd08      	pop	{r3, pc}
 800608a:	bf00      	nop
 800608c:	20000594 	mulcs	r0, r4, r5
 8006090:	20000574 	andcs	r0, r0, r4, ror r5
 8006094:	20000080 	andcs	r0, r0, r0, lsl #1
 8006098:	20000014 	andcs	r0, r0, r4, lsl r0
 800609c:	2000056c 	andcs	r0, r0, ip, ror #10
 80060a0:	20000590 	mulcs	r0, r0, r5

080060a4 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetConfiguration(u16 Length)
{
 80060a4:	b510      	push	{r4, lr}
 80060a6:	4c06      	ldr	r4, [pc, #24]	; (80060c0 <Standard_GetConfiguration+0x1c>)
  if (Length == 0)
 80060a8:	b918      	cbnz	r0, 80060b2 <Standard_GetConfiguration+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	2201      	movs	r2, #1
 80060ae:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 80060b0:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetConfiguration();
 80060b2:	4b04      	ldr	r3, [pc, #16]	; (80060c4 <Standard_GetConfiguration+0x20>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4798      	blx	r3
  return (u8 *)&pInformation->Current_Configuration;
 80060ba:	6820      	ldr	r0, [r4, #0]
 80060bc:	300a      	adds	r0, #10
}
 80060be:	bd10      	pop	{r4, pc}
 80060c0:	20000594 	mulcs	r0, r4, r5
 80060c4:	20000590 	mulcs	r0, r0, r5

080060c8 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetInterface(u16 Length)
{
 80060c8:	b510      	push	{r4, lr}
 80060ca:	4c06      	ldr	r4, [pc, #24]	; (80060e4 <Standard_GetInterface+0x1c>)
  if (Length == 0)
 80060cc:	b918      	cbnz	r0, 80060d6 <Standard_GetInterface+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	2201      	movs	r2, #1
 80060d2:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 80060d4:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetInterface();
 80060d6:	4b04      	ldr	r3, [pc, #16]	; (80060e8 <Standard_GetInterface+0x20>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	4798      	blx	r3
  return (u8 *)&pInformation->Current_AlternateSetting;
 80060de:	6820      	ldr	r0, [r4, #0]
 80060e0:	300c      	adds	r0, #12
}
 80060e2:	bd10      	pop	{r4, pc}
 80060e4:	20000594 	mulcs	r0, r4, r5
 80060e8:	20000590 	mulcs	r0, r0, r5

080060ec <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
u8 *Standard_GetStatus(u16 Length)
{
 80060ec:	b510      	push	{r4, lr}
 80060ee:	4b20      	ldr	r3, [pc, #128]	; (8006170 <Standard_GetStatus+0x84>)
  if (Length == 0)
 80060f0:	b918      	cbnz	r0, 80060fa <Standard_GetStatus+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2202      	movs	r2, #2
 80060f6:	821a      	strh	r2, [r3, #16]
    return 0;
 80060f8:	bd10      	pop	{r4, pc}
  }

  StatusInfo.w = 0;
 80060fa:	4a1e      	ldr	r2, [pc, #120]	; (8006174 <Standard_GetStatus+0x88>)
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80060fc:	6819      	ldr	r1, [r3, #0]
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  StatusInfo.w = 0;
 80060fe:	2000      	movs	r0, #0
 8006100:	8010      	strh	r0, [r2, #0]
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8006102:	780c      	ldrb	r4, [r1, #0]
 8006104:	4613      	mov	r3, r2
 8006106:	f014 047f 	ands.w	r4, r4, #127	; 0x7f
 800610a:	d10d      	bne.n	8006128 <Standard_GetStatus+0x3c>
  {
    /*Get Device Status */
    u8 Feature = pInformation->Current_Feature;
 800610c:	7a4a      	ldrb	r2, [r1, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 800610e:	0691      	lsls	r1, r2, #26
    {
      SetBit(StatusInfo0, 1);
 8006110:	bf44      	itt	mi
 8006112:	2102      	movmi	r1, #2
 8006114:	7019      	strbmi	r1, [r3, #0]
    }

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8006116:	f012 0f40 	tst.w	r2, #64	; 0x40
    {
      ClrBit(StatusInfo0, 0);
 800611a:	781a      	ldrb	r2, [r3, #0]
 800611c:	bf14      	ite	ne
 800611e:	f022 0201 	bicne.w	r2, r2, #1
    }
    else /* Self-powered */
    {
      SetBit(StatusInfo0, 0);
 8006122:	f042 0201 	orreq.w	r2, r2, #1
 8006126:	e014      	b.n	8006152 <Standard_GetStatus+0x66>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8006128:	2c01      	cmp	r4, #1
 800612a:	d01f      	beq.n	800616c <Standard_GetStatus+0x80>
  {
    return (u8 *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800612c:	2c02      	cmp	r4, #2
 800612e:	d11e      	bne.n	800616e <Standard_GetStatus+0x82>
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;
 8006130:	7909      	ldrb	r1, [r1, #4]

    Related_Endpoint = (wIndex0 & 0x0f);
 8006132:	f001 020f 	and.w	r2, r1, #15
 8006136:	0092      	lsls	r2, r2, #2
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8006138:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800613c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8006140:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8006144:	6812      	ldr	r2, [r2, #0]
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8006146:	d006      	beq.n	8006156 <Standard_GetStatus+0x6a>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8006148:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800614c:	2a10      	cmp	r2, #16
 800614e:	d107      	bne.n	8006160 <Standard_GetStatus+0x74>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8006150:	2201      	movs	r2, #1
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	e004      	b.n	8006160 <Standard_GetStatus+0x74>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8006156:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800615a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800615e:	e7f6      	b.n	800614e <Standard_GetStatus+0x62>
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8006160:	4b05      	ldr	r3, [pc, #20]	; (8006178 <Standard_GetStatus+0x8c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	4798      	blx	r3
  return (u8 *)&StatusInfo;
 8006168:	4802      	ldr	r0, [pc, #8]	; (8006174 <Standard_GetStatus+0x88>)
 800616a:	bd10      	pop	{r4, pc}
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    return (u8 *)&StatusInfo;
 800616c:	4610      	mov	r0, r2
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
  return (u8 *)&StatusInfo;
}
 800616e:	bd10      	pop	{r4, pc}
 8006170:	20000594 	mulcs	r0, r4, r5
 8006174:	2000059a 	mulcs	r0, sl, r5
 8006178:	20000590 	mulcs	r0, r0, r5

0800617c <DataStageIn>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 800617c:	4a23      	ldr	r2, [pc, #140]	; (800620c <DataStageIn+0x90>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 800617e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8006182:	6814      	ldr	r4, [r2, #0]
 8006184:	4690      	mov	r8, r2
  u32 save_wLength = pEPinfo->Usb_wLength;
 8006186:	8a23      	ldrh	r3, [r4, #16]
  u32 ControlState = pInformation->ControlState;
 8006188:	7a26      	ldrb	r6, [r4, #8]
 800618a:	4f21      	ldr	r7, [pc, #132]	; (8006210 <DataStageIn+0x94>)

  u8 *DataBuffer;
  u32 Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 800618c:	b9a3      	cbnz	r3, 80061b8 <DataStageIn+0x3c>
 800618e:	2e04      	cmp	r6, #4
 8006190:	d112      	bne.n	80061b8 <DataStageIn+0x3c>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8006192:	4920      	ldr	r1, [pc, #128]	; (8006214 <DataStageIn+0x98>)
 8006194:	780a      	ldrb	r2, [r1, #0]
 8006196:	2a01      	cmp	r2, #1
 8006198:	d10a      	bne.n	80061b0 <DataStageIn+0x34>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 800619a:	4a1f      	ldr	r2, [pc, #124]	; (8006218 <DataStageIn+0x9c>)
 800619c:	6810      	ldr	r0, [r2, #0]
 800619e:	4a1f      	ldr	r2, [pc, #124]	; (800621c <DataStageIn+0xa0>)
 80061a0:	b280      	uxth	r0, r0
 80061a2:	4402      	add	r2, r0
 80061a4:	0052      	lsls	r2, r2, #1
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	2230      	movs	r2, #48	; 0x30
 80061aa:	803a      	strh	r2, [r7, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 80061ac:	700b      	strb	r3, [r1, #0]
 80061ae:	e027      	b.n	8006200 <DataStageIn+0x84>
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 80061b0:	2310      	movs	r3, #16
 80061b2:	803b      	strh	r3, [r7, #0]
      Data_Mul_MaxPacketSize = FALSE;
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 80061b4:	2607      	movs	r6, #7
 80061b6:	e023      	b.n	8006200 <DataStageIn+0x84>
    }

    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 80061b8:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 80061ba:	42ab      	cmp	r3, r5
 80061bc:	bf8c      	ite	hi
 80061be:	2602      	movhi	r6, #2
 80061c0:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80061c2:	429d      	cmp	r5, r3
 80061c4:	bf28      	it	cs
 80061c6:	461d      	movcs	r5, r3
 80061c8:	4628      	mov	r0, r5
 80061ca:	69a3      	ldr	r3, [r4, #24]
 80061cc:	4798      	blx	r3
 80061ce:	4681      	mov	r9, r0

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 80061d0:	2000      	movs	r0, #0
 80061d2:	f7ff fe57 	bl	8005e84 <GetEPTxAddr>
 80061d6:	462a      	mov	r2, r5
 80061d8:	4601      	mov	r1, r0
 80061da:	4648      	mov	r0, r9
 80061dc:	f000 fb68 	bl	80068b0 <UserToPMABufferCopy>

  SetEPTxCount(ENDP0, Length);
 80061e0:	4629      	mov	r1, r5
 80061e2:	2000      	movs	r0, #0
 80061e4:	f7ff fe6a 	bl	8005ebc <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 80061e8:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80061ea:	f44f 5240 	mov.w	r2, #12288	; 0x3000

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 80061ee:	1b5b      	subs	r3, r3, r5
 80061f0:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 80061f2:	8a63      	ldrh	r3, [r4, #18]
 80061f4:	441d      	add	r5, r3
  vSetEPTxStatus(EP_TX_VALID);
 80061f6:	2330      	movs	r3, #48	; 0x30
 80061f8:	803b      	strh	r3, [r7, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80061fa:	4b09      	ldr	r3, [pc, #36]	; (8006220 <DataStageIn+0xa4>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 80061fc:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80061fe:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8006200:	f8d8 3000 	ldr.w	r3, [r8]
 8006204:	721e      	strb	r6, [r3, #8]
 8006206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800620a:	bf00      	nop
 800620c:	20000594 	mulcs	r0, r4, r5
 8006210:	20000564 	andcs	r0, r0, r4, ror #10
 8006214:	20000dc1 	andcs	r0, r0, r1, asr #27
 8006218:	40005c50 	andmi	r5, r0, r0, asr ip
 800621c:	20003002 	andcs	r3, r0, r2
 8006220:	20000562 	andcs	r0, r0, r2, ror #10

08006224 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8006224:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 8006226:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <Standard_SetConfiguration+0x2c>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8006228:	490a      	ldr	r1, [pc, #40]	; (8006254 <Standard_SetConfiguration+0x30>)
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	7849      	ldrb	r1, [r1, #1]
 800622e:	789a      	ldrb	r2, [r3, #2]
 8006230:	4291      	cmp	r1, r2
 8006232:	d30a      	bcc.n	800624a <Standard_SetConfiguration+0x26>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8006234:	78d9      	ldrb	r1, [r3, #3]
 8006236:	b941      	cbnz	r1, 800624a <Standard_SetConfiguration+0x26>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8006238:	889c      	ldrh	r4, [r3, #4]
 800623a:	b934      	cbnz	r4, 800624a <Standard_SetConfiguration+0x26>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 800623c:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800623e:	4b06      	ldr	r3, [pc, #24]	; (8006258 <Standard_SetConfiguration+0x34>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	4798      	blx	r3
    return USB_SUCCESS;
 8006246:	4620      	mov	r0, r4
 8006248:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USB_UNSUPPORT;
 800624a:	2002      	movs	r0, #2
  }
}
 800624c:	bd10      	pop	{r4, pc}
 800624e:	bf00      	nop
 8006250:	20000594 	mulcs	r0, r4, r5
 8006254:	200000a4 	andcs	r0, r0, r4, lsr #1
 8006258:	20000590 	mulcs	r0, r0, r5

0800625c <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 800625c:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800625e:	4a0e      	ldr	r2, [pc, #56]	; (8006298 <Standard_SetInterface+0x3c>)
 8006260:	4c0e      	ldr	r4, [pc, #56]	; (800629c <Standard_SetInterface+0x40>)
 8006262:	6812      	ldr	r2, [r2, #0]
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	6992      	ldr	r2, [r2, #24]
 8006268:	7918      	ldrb	r0, [r3, #4]
 800626a:	7899      	ldrb	r1, [r3, #2]
 800626c:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	7a9a      	ldrb	r2, [r3, #10]
 8006272:	b17a      	cbz	r2, 8006294 <Standard_SetInterface+0x38>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8006274:	b970      	cbnz	r0, 8006294 <Standard_SetInterface+0x38>
 8006276:	795a      	ldrb	r2, [r3, #5]
 8006278:	b962      	cbnz	r2, 8006294 <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 800627a:	78dd      	ldrb	r5, [r3, #3]
 800627c:	b955      	cbnz	r5, 8006294 <Standard_SetInterface+0x38>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 800627e:	4b08      	ldr	r3, [pc, #32]	; (80062a0 <Standard_SetInterface+0x44>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8006286:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 8006288:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800628a:	791a      	ldrb	r2, [r3, #4]
 800628c:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800628e:	789a      	ldrb	r2, [r3, #2]
 8006290:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 8006292:	bd38      	pop	{r3, r4, r5, pc}
    }

  }

  return USB_UNSUPPORT;
 8006294:	2002      	movs	r0, #2
}
 8006296:	bd38      	pop	{r3, r4, r5, pc}
 8006298:	2000056c 	andcs	r0, r0, ip, ror #10
 800629c:	20000594 	mulcs	r0, r4, r5
 80062a0:	20000590 	mulcs	r0, r0, r5

080062a4 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 80062a4:	b538      	push	{r3, r4, r5, lr}
  u32     Type_Rec = Type_Recipient;
 80062a6:	4b2f      	ldr	r3, [pc, #188]	; (8006364 <Standard_ClearFeature+0xc0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	7818      	ldrb	r0, [r3, #0]
  u32     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80062ac:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 80062b0:	d104      	bne.n	80062bc <Standard_ClearFeature+0x18>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 80062b2:	7a5a      	ldrb	r2, [r3, #9]
 80062b4:	f022 0220 	bic.w	r2, r2, #32
 80062b8:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80062bc:	2802      	cmp	r0, #2
 80062be:	d14e      	bne.n	800635e <Standard_ClearFeature+0xba>
    DEVICE* pDev;
    u32 Related_Endpoint;
    u32 wIndex0;
    u32 rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 80062c0:	885a      	ldrh	r2, [r3, #2]
 80062c2:	2a00      	cmp	r2, #0
 80062c4:	d14c      	bne.n	8006360 <Standard_ClearFeature+0xbc>
        || (pInformation->USBwIndex1 != 0))
 80062c6:	795a      	ldrb	r2, [r3, #5]
 80062c8:	2a00      	cmp	r2, #0
 80062ca:	d149      	bne.n	8006360 <Standard_ClearFeature+0xbc>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 80062cc:	791a      	ldrb	r2, [r3, #4]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80062ce:	4d26      	ldr	r5, [pc, #152]	; (8006368 <Standard_ClearFeature+0xc4>)
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
 80062d0:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 80062d4:	0084      	lsls	r4, r0, #2

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80062d6:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 80062da:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 80062de:	6809      	ldr	r1, [r1, #0]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80062e0:	782d      	ldrb	r5, [r5, #0]
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 80062e2:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80062e6:	bf14      	ite	ne
 80062e8:	f001 0130 	andne.w	r1, r1, #48	; 0x30
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 80062ec:	f401 5140 	andeq.w	r1, r1, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80062f0:	42a8      	cmp	r0, r5
 80062f2:	d234      	bcs.n	800635e <Standard_ClearFeature+0xba>
 80062f4:	2900      	cmp	r1, #0
 80062f6:	d032      	beq.n	800635e <Standard_ClearFeature+0xba>
        || (pInformation->Current_Configuration == 0))
 80062f8:	7a9b      	ldrb	r3, [r3, #10]
 80062fa:	b383      	cbz	r3, 800635e <Standard_ClearFeature+0xba>


    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80062fc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8006300:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8006304:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8006306:	6823      	ldr	r3, [r4, #0]
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8006308:	d50c      	bpl.n	8006324 <Standard_ClearFeature+0x80>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 800630a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800630e:	2b10      	cmp	r3, #16
 8006310:	d11f      	bne.n	8006352 <Standard_ClearFeature+0xae>
      {
        ClearDTOG_TX(Related_Endpoint);
 8006312:	b2c4      	uxtb	r4, r0
 8006314:	4620      	mov	r0, r4
 8006316:	f7ff fda5 	bl	8005e64 <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 800631a:	4620      	mov	r0, r4
 800631c:	2130      	movs	r1, #48	; 0x30
 800631e:	f7ff fd5f 	bl	8005de0 <SetEPTxStatus>
 8006322:	e016      	b.n	8006352 <Standard_ClearFeature+0xae>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8006324:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800632c:	d111      	bne.n	8006352 <Standard_ClearFeature+0xae>
      {
        if (Related_Endpoint == ENDP0)
 800632e:	b928      	cbnz	r0, 800633c <Standard_ClearFeature+0x98>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8006330:	4b0e      	ldr	r3, [pc, #56]	; (800636c <Standard_ClearFeature+0xc8>)
 8006332:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8006336:	f7ff fdcf 	bl	8005ed8 <SetEPRxCount>
 800633a:	e001      	b.n	8006340 <Standard_ClearFeature+0x9c>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 800633c:	f7ff fd82 	bl	8005e44 <ClearDTOG_RX>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634a:	b29b      	uxth	r3, r3
 800634c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006350:	6023      	str	r3, [r4, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 8006352:	4b07      	ldr	r3, [pc, #28]	; (8006370 <Standard_ClearFeature+0xcc>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	4798      	blx	r3
    return USB_SUCCESS;
 800635a:	2000      	movs	r0, #0
 800635c:	bd38      	pop	{r3, r4, r5, pc}
  }

  return USB_UNSUPPORT;
 800635e:	2002      	movs	r0, #2
}
 8006360:	bd38      	pop	{r3, r4, r5, pc}
 8006362:	bf00      	nop
 8006364:	20000594 	mulcs	r0, r4, r5
 8006368:	200000a4 	andcs	r0, r0, r4, lsr #1
 800636c:	20000014 	andcs	r0, r0, r4, lsl r0
 8006370:	20000590 	mulcs	r0, r0, r5

08006374 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8006374:	b538      	push	{r3, r4, r5, lr}
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 8006376:	4b1d      	ldr	r3, [pc, #116]	; (80063ec <Standard_SetEndPointFeature+0x78>)
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8006378:	4d1d      	ldr	r5, [pc, #116]	; (80063f0 <Standard_SetEndPointFeature+0x7c>)
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 800637a:	6819      	ldr	r1, [r3, #0]
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800637c:	782d      	ldrb	r5, [r5, #0]
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 800637e:	790a      	ldrb	r2, [r1, #4]
  rEP = wIndex0 & ~0x80;
 8006380:	f022 0480 	bic.w	r4, r2, #128	; 0x80
 8006384:	00a3      	lsls	r3, r4, #2

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8006386:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 800638a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800638e:	6800      	ldr	r0, [r0, #0]

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 8006390:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8006394:	bf14      	ite	ne
 8006396:	f000 0030 	andne.w	r0, r0, #48	; 0x30
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 800639a:	f400 5040 	andeq.w	r0, r0, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800639e:	42ac      	cmp	r4, r5
 80063a0:	d222      	bcs.n	80063e8 <Standard_SetEndPointFeature+0x74>
      || pInformation->USBwValue != 0 || Status == 0
 80063a2:	884c      	ldrh	r4, [r1, #2]
 80063a4:	bb04      	cbnz	r4, 80063e8 <Standard_SetEndPointFeature+0x74>
 80063a6:	b1f8      	cbz	r0, 80063e8 <Standard_SetEndPointFeature+0x74>
      || pInformation->Current_Configuration == 0)
 80063a8:	7a89      	ldrb	r1, [r1, #10]
 80063aa:	b1e9      	cbz	r1, 80063e8 <Standard_SetEndPointFeature+0x74>
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80063ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063b0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80063b4:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80063b8:	681a      	ldr	r2, [r3, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80063ba:	d007      	beq.n	80063cc <Standard_SetEndPointFeature+0x58>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80063bc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80063c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063c4:	b292      	uxth	r2, r2
 80063c6:	f082 0210 	eor.w	r2, r2, #16
 80063ca:	e006      	b.n	80063da <Standard_SetEndPointFeature+0x66>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 80063cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80063d4:	b292      	uxth	r2, r2
 80063d6:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 80063da:	601a      	str	r2, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 80063dc:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <Standard_SetEndPointFeature+0x80>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	4798      	blx	r3
  return USB_SUCCESS;
 80063e4:	2000      	movs	r0, #0
 80063e6:	bd38      	pop	{r3, r4, r5, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 80063e8:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 80063ea:	bd38      	pop	{r3, r4, r5, pc}
 80063ec:	20000594 	mulcs	r0, r4, r5
 80063f0:	200000a4 	andcs	r0, r0, r4, lsr #1
 80063f4:	20000590 	mulcs	r0, r0, r5

080063f8 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 80063f8:	b508      	push	{r3, lr}
  SetBit(pInformation->Current_Feature, 5);
 80063fa:	4b06      	ldr	r3, [pc, #24]	; (8006414 <Standard_SetDeviceFeature+0x1c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	7a5a      	ldrb	r2, [r3, #9]
 8006400:	f042 0220 	orr.w	r2, r2, #32
 8006404:	725a      	strb	r2, [r3, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8006406:	4b04      	ldr	r3, [pc, #16]	; (8006418 <Standard_SetDeviceFeature+0x20>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	4798      	blx	r3
  return USB_SUCCESS;
}
 800640e:	2000      	movs	r0, #0
 8006410:	bd08      	pop	{r3, pc}
 8006412:	bf00      	nop
 8006414:	20000594 	mulcs	r0, r4, r5
 8006418:	20000590 	mulcs	r0, r0, r5

0800641c <Standard_GetDescriptorData>:
*******************************************************************************/
u8 *Standard_GetDescriptorData(u16 Length, ONE_DESCRIPTOR *pDesc)
{
  u32  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 800641c:	4b05      	ldr	r3, [pc, #20]	; (8006434 <Standard_GetDescriptorData+0x18>)
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	8a53      	ldrh	r3, [r2, #18]
  if (Length == 0)
 8006422:	b918      	cbnz	r0, 800642c <Standard_GetDescriptorData+0x10>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8006424:	8889      	ldrh	r1, [r1, #4]
 8006426:	1acb      	subs	r3, r1, r3
 8006428:	8213      	strh	r3, [r2, #16]
    return 0;
 800642a:	4770      	bx	lr
  }

  return pDesc->Descriptor + wOffset;
 800642c:	6808      	ldr	r0, [r1, #0]
 800642e:	4418      	add	r0, r3
}
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	20000594 	mulcs	r0, r4, r5

08006438 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
u8 Post0_Process(void)
{
 8006438:	b508      	push	{r3, lr}
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800643a:	4b0b      	ldr	r3, [pc, #44]	; (8006468 <Post0_Process+0x30>)
 800643c:	2000      	movs	r0, #0
 800643e:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8006442:	f7ff fd49 	bl	8005ed8 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 8006446:	4b09      	ldr	r3, [pc, #36]	; (800646c <Post0_Process+0x34>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	7a18      	ldrb	r0, [r3, #8]
 800644c:	2808      	cmp	r0, #8
 800644e:	d106      	bne.n	800645e <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8006450:	4b07      	ldr	r3, [pc, #28]	; (8006470 <Post0_Process+0x38>)
 8006452:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006456:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8006458:	4b06      	ldr	r3, [pc, #24]	; (8006474 <Post0_Process+0x3c>)
 800645a:	2210      	movs	r2, #16
 800645c:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 800645e:	f1b0 0309 	subs.w	r3, r0, #9
 8006462:	4258      	negs	r0, r3
 8006464:	4158      	adcs	r0, r3
 8006466:	bd08      	pop	{r3, pc}
 8006468:	20000014 	andcs	r0, r0, r4, lsl r0
 800646c:	20000594 	mulcs	r0, r4, r5
 8006470:	20000562 	andcs	r0, r0, r2, ror #10
 8006474:	20000564 	andcs	r0, r0, r4, ror #10

08006478 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Setup0_Process(void)
{
 8006478:	b573      	push	{r0, r1, r4, r5, r6, lr}
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800647a:	4e96      	ldr	r6, [pc, #600]	; (80066d4 <Setup0_Process+0x25c>)
 800647c:	4b96      	ldr	r3, [pc, #600]	; (80066d8 <Setup0_Process+0x260>)
 800647e:	6832      	ldr	r2, [r6, #0]

  if (pInformation->ControlState != PAUSE)
 8006480:	4d96      	ldr	r5, [pc, #600]	; (80066dc <Setup0_Process+0x264>)
 8006482:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8006484:	4413      	add	r3, r2
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 800648a:	682b      	ldr	r3, [r5, #0]
 800648c:	7a19      	ldrb	r1, [r3, #8]
 800648e:	2909      	cmp	r1, #9
 8006490:	d00f      	beq.n	80064b2 <Setup0_Process+0x3a>
 8006492:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8006494:	0052      	lsls	r2, r2, #1
 8006496:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800649a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 800649e:	7811      	ldrb	r1, [r2, #0]
 80064a0:	7019      	strb	r1, [r3, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 80064a2:	7851      	ldrb	r1, [r2, #1]
 80064a4:	7059      	strb	r1, [r3, #1]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = *pBuf.w++; /* wValue in Little Endian */
 80064a6:	8891      	ldrh	r1, [r2, #4]
 80064a8:	8059      	strh	r1, [r3, #2]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = *pBuf.w++; /* wIndex in Little Endian */
 80064aa:	8911      	ldrh	r1, [r2, #8]
 80064ac:	8099      	strh	r1, [r3, #4]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength in Little Endian */
 80064ae:	8992      	ldrh	r2, [r2, #12]
 80064b0:	80da      	strh	r2, [r3, #6]
  }

  pInformation->ControlState = SETTING_UP;
 80064b2:	2201      	movs	r2, #1
 80064b4:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 80064b6:	88da      	ldrh	r2, [r3, #6]
 80064b8:	785c      	ldrb	r4, [r3, #1]
 80064ba:	2a00      	cmp	r2, #0
 80064bc:	d161      	bne.n	8006582 <Setup0_Process+0x10a>
{
  RESULT Result = USB_UNSUPPORT;
  u32 RequestNo = pInformation->USBbRequest;
  u32 ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80064be:	781a      	ldrb	r2, [r3, #0]
 80064c0:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 80064c4:	d13a      	bne.n	800653c <Setup0_Process+0xc4>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 80064c6:	2c09      	cmp	r4, #9
 80064c8:	d102      	bne.n	80064d0 <Setup0_Process+0x58>
    {
      Result = Standard_SetConfiguration();
 80064ca:	f7ff feab 	bl	8006224 <Standard_SetConfiguration>
 80064ce:	e044      	b.n	800655a <Setup0_Process+0xe2>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 80064d0:	2c05      	cmp	r4, #5
 80064d2:	d10f      	bne.n	80064f4 <Setup0_Process+0x7c>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 80064d4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80064d8:	2a00      	cmp	r2, #0
 80064da:	da01      	bge.n	80064e0 <Setup0_Process+0x68>
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 80064dc:	2308      	movs	r3, #8
 80064de:	e04d      	b.n	800657c <Setup0_Process+0x104>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 80064e0:	78da      	ldrb	r2, [r3, #3]
 80064e2:	2a00      	cmp	r2, #0
 80064e4:	d1fa      	bne.n	80064dc <Setup0_Process+0x64>
          || (pInformation->USBwIndex != 0)
 80064e6:	889a      	ldrh	r2, [r3, #4]
 80064e8:	2a00      	cmp	r2, #0
 80064ea:	d1f7      	bne.n	80064dc <Setup0_Process+0x64>
          || (pInformation->Current_Configuration != 0))
 80064ec:	7a9b      	ldrb	r3, [r3, #10]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d037      	beq.n	8006562 <Setup0_Process+0xea>
 80064f2:	e7f3      	b.n	80064dc <Setup0_Process+0x64>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 80064f4:	2c03      	cmp	r4, #3
 80064f6:	d113      	bne.n	8006520 <Setup0_Process+0xa8>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 80064f8:	789a      	ldrb	r2, [r3, #2]
 80064fa:	2a01      	cmp	r2, #1
 80064fc:	d007      	beq.n	800650e <Setup0_Process+0x96>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 80064fe:	4b78      	ldr	r3, [pc, #480]	; (80066e0 <Setup0_Process+0x268>)
 8006500:	4620      	mov	r0, r4
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8006508:	2803      	cmp	r0, #3
 800650a:	d128      	bne.n	800655e <Setup0_Process+0xe6>
 800650c:	e035      	b.n	800657a <Setup0_Process+0x102>
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
          && (pInformation->USBwIndex == 0)
 800650e:	889a      	ldrh	r2, [r3, #4]
 8006510:	2a00      	cmp	r2, #0
 8006512:	d1f4      	bne.n	80064fe <Setup0_Process+0x86>
          && (ValBit(pInformation->Current_Feature, 5)))
 8006514:	7a5b      	ldrb	r3, [r3, #9]
 8006516:	0698      	lsls	r0, r3, #26
 8006518:	d5f1      	bpl.n	80064fe <Setup0_Process+0x86>
      {
        Result = Standard_SetDeviceFeature();
 800651a:	f7ff ff6d 	bl	80063f8 <Standard_SetDeviceFeature>
 800651e:	e01c      	b.n	800655a <Setup0_Process+0xe2>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8006520:	2c01      	cmp	r4, #1
 8006522:	d1ec      	bne.n	80064fe <Setup0_Process+0x86>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8006524:	789a      	ldrb	r2, [r3, #2]
 8006526:	2a01      	cmp	r2, #1
 8006528:	d1e9      	bne.n	80064fe <Setup0_Process+0x86>
          && pInformation->USBwIndex == 0
 800652a:	889a      	ldrh	r2, [r3, #4]
 800652c:	2a00      	cmp	r2, #0
 800652e:	d1e6      	bne.n	80064fe <Setup0_Process+0x86>
          && ValBit(pInformation->Current_Feature, 5))
 8006530:	7a5b      	ldrb	r3, [r3, #9]
 8006532:	0699      	lsls	r1, r3, #26
 8006534:	d5e3      	bpl.n	80064fe <Setup0_Process+0x86>
      {
        Result = Standard_ClearFeature();
 8006536:	f7ff feb5 	bl	80062a4 <Standard_ClearFeature>
 800653a:	e00e      	b.n	800655a <Setup0_Process+0xe2>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800653c:	2a01      	cmp	r2, #1
 800653e:	d104      	bne.n	800654a <Setup0_Process+0xd2>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8006540:	2c0b      	cmp	r4, #11
 8006542:	d1dc      	bne.n	80064fe <Setup0_Process+0x86>
    {
      Result = Standard_SetInterface();
 8006544:	f7ff fe8a 	bl	800625c <Standard_SetInterface>
 8006548:	e007      	b.n	800655a <Setup0_Process+0xe2>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800654a:	2a02      	cmp	r2, #2
 800654c:	d1d7      	bne.n	80064fe <Setup0_Process+0x86>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 800654e:	2c01      	cmp	r4, #1
 8006550:	d0f1      	beq.n	8006536 <Setup0_Process+0xbe>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8006552:	2c03      	cmp	r4, #3
 8006554:	d1d3      	bne.n	80064fe <Setup0_Process+0x86>
    {
      Result = Standard_SetEndPointFeature();
 8006556:	f7ff ff0d 	bl	8006374 <Standard_SetEndPointFeature>
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 800655a:	b110      	cbz	r0, 8006562 <Setup0_Process+0xea>
 800655c:	e7cf      	b.n	80064fe <Setup0_Process+0x86>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 800655e:	2800      	cmp	r0, #0
 8006560:	d1bc      	bne.n	80064dc <Setup0_Process+0x64>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8006562:	6832      	ldr	r2, [r6, #0]
 8006564:	4b5f      	ldr	r3, [pc, #380]	; (80066e4 <Setup0_Process+0x26c>)
 8006566:	b292      	uxth	r2, r2
 8006568:	4413      	add	r3, r2
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	4b5d      	ldr	r3, [pc, #372]	; (80066e8 <Setup0_Process+0x270>)
 8006572:	2230      	movs	r2, #48	; 0x30
 8006574:	801a      	strh	r2, [r3, #0]
  {
    ControlState = STALLED;
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 8006576:	2306      	movs	r3, #6
 8006578:	e000      	b.n	800657c <Setup0_Process+0x104>
  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
    {
      ControlState = PAUSE;
 800657a:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800657c:	682a      	ldr	r2, [r5, #0]
 800657e:	7213      	strb	r3, [r2, #8]
 8006580:	e0d4      	b.n	800672c <Setup0_Process+0x2b4>


  CopyRoutine = NULL;
  wOffset = 0;

  if (Request_No == GET_DESCRIPTOR)
 8006582:	2c06      	cmp	r4, #6
 8006584:	d118      	bne.n	80065b8 <Setup0_Process+0x140>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8006586:	781a      	ldrb	r2, [r3, #0]
 8006588:	0652      	lsls	r2, r2, #25
 800658a:	d17c      	bne.n	8006686 <Setup0_Process+0x20e>
    {
      u8 wValue1 = pInformation->USBwValue1;
 800658c:	78da      	ldrb	r2, [r3, #3]
 800658e:	4b54      	ldr	r3, [pc, #336]	; (80066e0 <Setup0_Process+0x268>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 8006590:	2a01      	cmp	r2, #1
 8006592:	d102      	bne.n	800659a <Setup0_Process+0x122>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	e06c      	b.n	8006674 <Setup0_Process+0x1fc>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 800659a:	2a02      	cmp	r2, #2
 800659c:	d102      	bne.n	80065a4 <Setup0_Process+0x12c>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	e067      	b.n	8006674 <Setup0_Process+0x1fc>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 80065a4:	2a03      	cmp	r2, #3
 80065a6:	d102      	bne.n	80065ae <Setup0_Process+0x136>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	e062      	b.n	8006674 <Setup0_Process+0x1fc>
      } else if (wValue1 == 0x21) /* added to support functional descriptors */
 80065ae:	2a21      	cmp	r2, #33	; 0x21
 80065b0:	d169      	bne.n	8006686 <Setup0_Process+0x20e>
      {
	CopyRoutine = pProperty->GetFunctionalDescriptor;
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b6:	e05d      	b.n	8006674 <Setup0_Process+0x1fc>
      } /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 80065b8:	2c00      	cmp	r4, #0
 80065ba:	d13c      	bne.n	8006636 <Setup0_Process+0x1be>
 80065bc:	8859      	ldrh	r1, [r3, #2]
 80065be:	2900      	cmp	r1, #0
 80065c0:	d161      	bne.n	8006686 <Setup0_Process+0x20e>
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80065c8:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80065cc:	d15b      	bne.n	8006686 <Setup0_Process+0x20e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80065ce:	781a      	ldrb	r2, [r3, #0]
 80065d0:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 80065d4:	d104      	bne.n	80065e0 <Setup0_Process+0x168>
        && (pInformation->USBwIndex == 0))
 80065d6:	889b      	ldrh	r3, [r3, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 80ab 	beq.w	8006734 <Setup0_Process+0x2bc>
 80065de:	e052      	b.n	8006686 <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80065e0:	2a01      	cmp	r2, #1
 80065e2:	d10c      	bne.n	80065fe <Setup0_Process+0x186>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 80065e4:	4a3e      	ldr	r2, [pc, #248]	; (80066e0 <Setup0_Process+0x268>)
 80065e6:	7918      	ldrb	r0, [r3, #4]
 80065e8:	6812      	ldr	r2, [r2, #0]
 80065ea:	6992      	ldr	r2, [r2, #24]
 80065ec:	4790      	blx	r2
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d149      	bne.n	8006686 <Setup0_Process+0x20e>
          && (pInformation->Current_Configuration != 0))
 80065f2:	682b      	ldr	r3, [r5, #0]
 80065f4:	7a9b      	ldrb	r3, [r3, #10]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f040 809c 	bne.w	8006734 <Setup0_Process+0x2bc>
 80065fc:	e043      	b.n	8006686 <Setup0_Process+0x20e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80065fe:	2a02      	cmp	r2, #2
 8006600:	d141      	bne.n	8006686 <Setup0_Process+0x20e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8006602:	791b      	ldrb	r3, [r3, #4]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8006604:	4839      	ldr	r0, [pc, #228]	; (80066ec <Setup0_Process+0x274>)
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8006606:	f003 010f 	and.w	r1, r3, #15
 800660a:	008a      	lsls	r2, r1, #2

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800660c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006610:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8006614:	6812      	ldr	r2, [r2, #0]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8006616:	7800      	ldrb	r0, [r0, #0]
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8006618:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800661c:	bf14      	ite	ne
 800661e:	f002 0230 	andne.w	r2, r2, #48	; 0x30
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8006622:	f402 5240 	andeq.w	r2, r2, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8006626:	4281      	cmp	r1, r0
 8006628:	d22d      	bcs.n	8006686 <Setup0_Process+0x20e>
 800662a:	f013 0f70 	tst.w	r3, #112	; 0x70
 800662e:	d12a      	bne.n	8006686 <Setup0_Process+0x20e>
          && (Status != 0))
 8006630:	2a00      	cmp	r2, #0
 8006632:	d17f      	bne.n	8006734 <Setup0_Process+0x2bc>
 8006634:	e027      	b.n	8006686 <Setup0_Process+0x20e>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8006636:	2c08      	cmp	r4, #8
 8006638:	d103      	bne.n	8006642 <Setup0_Process+0x1ca>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	065b      	lsls	r3, r3, #25
 800663e:	d07b      	beq.n	8006738 <Setup0_Process+0x2c0>
 8006640:	e021      	b.n	8006686 <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8006642:	2c0a      	cmp	r4, #10
 8006644:	d11f      	bne.n	8006686 <Setup0_Process+0x20e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8006646:	781a      	ldrb	r2, [r3, #0]
 8006648:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800664c:	2a01      	cmp	r2, #1
 800664e:	d11a      	bne.n	8006686 <Setup0_Process+0x20e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8006650:	7a9a      	ldrb	r2, [r3, #10]
 8006652:	b1c2      	cbz	r2, 8006686 <Setup0_Process+0x20e>
 8006654:	8859      	ldrh	r1, [r3, #2]
 8006656:	b9b1      	cbnz	r1, 8006686 <Setup0_Process+0x20e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800665e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006662:	d110      	bne.n	8006686 <Setup0_Process+0x20e>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8006664:	4a1e      	ldr	r2, [pc, #120]	; (80066e0 <Setup0_Process+0x268>)
 8006666:	7918      	ldrb	r0, [r3, #4]
 8006668:	6812      	ldr	r2, [r2, #0]
 800666a:	6992      	ldr	r2, [r2, #24]
 800666c:	4790      	blx	r2
 800666e:	2800      	cmp	r0, #0
 8006670:	d064      	beq.n	800673c <Setup0_Process+0x2c4>
 8006672:	e008      	b.n	8006686 <Setup0_Process+0x20e>
      CopyRoutine = Standard_GetInterface;
    }

  }

  if (CopyRoutine)
 8006674:	b13b      	cbz	r3, 8006686 <Setup0_Process+0x20e>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8006676:	682a      	ldr	r2, [r5, #0]
 8006678:	2400      	movs	r4, #0
 800667a:	8254      	strh	r4, [r2, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800667c:	6193      	str	r3, [r2, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 800667e:	4620      	mov	r0, r4
 8006680:	4798      	blx	r3
    Result = USB_SUCCESS;
 8006682:	4620      	mov	r0, r4
 8006684:	e00a      	b.n	800669c <Setup0_Process+0x224>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8006686:	4b16      	ldr	r3, [pc, #88]	; (80066e0 <Setup0_Process+0x268>)
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	682b      	ldr	r3, [r5, #0]
 800668c:	6912      	ldr	r2, [r2, #16]
 800668e:	7858      	ldrb	r0, [r3, #1]
 8006690:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 8006692:	2803      	cmp	r0, #3
 8006694:	d102      	bne.n	800669c <Setup0_Process+0x224>
    {
      pInformation->ControlState = PAUSE;
 8006696:	4b11      	ldr	r3, [pc, #68]	; (80066dc <Setup0_Process+0x264>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	e005      	b.n	80066a8 <Setup0_Process+0x230>
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80066a2:	8a1a      	ldrh	r2, [r3, #16]
 80066a4:	428a      	cmp	r2, r1
 80066a6:	d101      	bne.n	80066ac <Setup0_Process+0x234>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 80066a8:	2209      	movs	r2, #9
 80066aa:	e003      	b.n	80066b4 <Setup0_Process+0x23c>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 80066ac:	2802      	cmp	r0, #2
 80066ae:	d000      	beq.n	80066b2 <Setup0_Process+0x23a>
 80066b0:	b912      	cbnz	r2, 80066b8 <Setup0_Process+0x240>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 80066b2:	2208      	movs	r2, #8
 80066b4:	721a      	strb	r2, [r3, #8]
 80066b6:	e039      	b.n	800672c <Setup0_Process+0x2b4>
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 80066b8:	f993 1000 	ldrsb.w	r1, [r3]
 80066bc:	2900      	cmp	r1, #0
 80066be:	da2f      	bge.n	8006720 <Setup0_Process+0x2a8>
  {
    /* Device ==> Host */
    vu32 wLength = pInformation->USBwLength;
 80066c0:	88d9      	ldrh	r1, [r3, #6]
 80066c2:	9101      	str	r1, [sp, #4]

    /* Restrict the data length to be the one host asks */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 80066c4:	9801      	ldr	r0, [sp, #4]
 80066c6:	4282      	cmp	r2, r0
 80066c8:	4805      	ldr	r0, [pc, #20]	; (80066e0 <Setup0_Process+0x268>)
 80066ca:	d911      	bls.n	80066f0 <Setup0_Process+0x278>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 80066cc:	9a01      	ldr	r2, [sp, #4]
 80066ce:	821a      	strh	r2, [r3, #16]
 80066d0:	e01f      	b.n	8006712 <Setup0_Process+0x29a>
 80066d2:	bf00      	nop
 80066d4:	40005c50 	andmi	r5, r0, r0, asr ip
 80066d8:	20003004 	andcs	r3, r0, r4
 80066dc:	20000594 	mulcs	r0, r4, r5
 80066e0:	2000056c 	andcs	r0, r0, ip, ror #10
 80066e4:	20003002 	andcs	r3, r0, r2
 80066e8:	20000564 	andcs	r0, r0, r4, ror #10
 80066ec:	200000a4 	andcs	r0, r0, r4, lsr #1
    }

    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 80066f0:	428a      	cmp	r2, r1
 80066f2:	d20e      	bcs.n	8006712 <Setup0_Process+0x29a>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 80066f4:	6801      	ldr	r1, [r0, #0]
 80066f6:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 80066fa:	428a      	cmp	r2, r1
 80066fc:	d201      	bcs.n	8006702 <Setup0_Process+0x28a>
      {
        Data_Mul_MaxPacketSize = FALSE;
 80066fe:	2100      	movs	r1, #0
 8006700:	e005      	b.n	800670e <Setup0_Process+0x296>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8006702:	fb92 f4f1 	sdiv	r4, r2, r1
 8006706:	fb01 2214 	mls	r2, r1, r4, r2
 800670a:	b912      	cbnz	r2, 8006712 <Setup0_Process+0x29a>
      {
        Data_Mul_MaxPacketSize = TRUE;
 800670c:	2101      	movs	r1, #1
 800670e:	4a0c      	ldr	r2, [pc, #48]	; (8006740 <Setup0_Process+0x2c8>)
 8006710:	7011      	strb	r1, [r2, #0]
      }
    }

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8006712:	6802      	ldr	r2, [r0, #0]
 8006714:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8006718:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 800671a:	f7ff fd2f 	bl	800617c <DataStageIn>
 800671e:	e005      	b.n	800672c <Setup0_Process+0x2b4>
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8006720:	2203      	movs	r2, #3
 8006722:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8006724:	4b07      	ldr	r3, [pc, #28]	; (8006744 <Setup0_Process+0x2cc>)
 8006726:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800672a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 800672c:	f7ff fe84 	bl	8006438 <Post0_Process>
}
 8006730:	b002      	add	sp, #8
 8006732:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
        && (pInformation->USBwIndex == 0))
    {
      CopyRoutine = Standard_GetStatus;
 8006734:	4b04      	ldr	r3, [pc, #16]	; (8006748 <Setup0_Process+0x2d0>)
 8006736:	e79e      	b.n	8006676 <Setup0_Process+0x1fe>
  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      CopyRoutine = Standard_GetConfiguration;
 8006738:	4b04      	ldr	r3, [pc, #16]	; (800674c <Setup0_Process+0x2d4>)
 800673a:	e79c      	b.n	8006676 <Setup0_Process+0x1fe>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
    {
      CopyRoutine = Standard_GetInterface;
 800673c:	4b04      	ldr	r3, [pc, #16]	; (8006750 <Setup0_Process+0x2d8>)
 800673e:	e79a      	b.n	8006676 <Setup0_Process+0x1fe>
 8006740:	20000dc1 	andcs	r0, r0, r1, asr #27
 8006744:	20000562 	andcs	r0, r0, r2, ror #10
 8006748:	080060ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, sp, lr}
 800674c:	080060a5 	stmdaeq	r0, {r0, r2, r5, r7, sp, lr}
 8006750:	080060c9 	stmdaeq	r0, {r0, r3, r6, r7, sp, lr}

08006754 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Out0_Process(void)
{
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32 ControlState = pInformation->ControlState;
 8006756:	4d2b      	ldr	r5, [pc, #172]	; (8006804 <Out0_Process+0xb0>)
 8006758:	682c      	ldr	r4, [r5, #0]
 800675a:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 800675c:	2b03      	cmp	r3, #3
 800675e:	d001      	beq.n	8006764 <Out0_Process+0x10>
 8006760:	2b05      	cmp	r3, #5
 8006762:	d141      	bne.n	80067e8 <Out0_Process+0x94>
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 8006764:	69a3      	ldr	r3, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8006766:	8a22      	ldrh	r2, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8006768:	b1ab      	cbz	r3, 8006796 <Out0_Process+0x42>
 800676a:	b1a2      	cbz	r2, 8006796 <Out0_Process+0x42>
  {
    u8 *Buffer;
    u32 Length;

    Length = pEPinfo->PacketSize;
 800676c:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 800676e:	4296      	cmp	r6, r2
 8006770:	bf28      	it	cs
 8006772:	4616      	movcs	r6, r2
 8006774:	4630      	mov	r0, r6
 8006776:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 8006778:	8a23      	ldrh	r3, [r4, #16]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 800677a:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 800677c:	1b9b      	subs	r3, r3, r6
 800677e:	8223      	strh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8006780:	8a63      	ldrh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8006782:	2000      	movs	r0, #0
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 8006784:	4433      	add	r3, r6
 8006786:	8263      	strh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8006788:	f7ff fb8a 	bl	8005ea0 <GetEPRxAddr>
 800678c:	4632      	mov	r2, r6
 800678e:	4601      	mov	r1, r0
 8006790:	4638      	mov	r0, r7
 8006792:	f000 f8a5 	bl	80068e0 <PMAToUserBufferCopy>
  }

  if (pEPinfo->Usb_rLength != 0)
 8006796:	8a23      	ldrh	r3, [r4, #16]
 8006798:	b153      	cbz	r3, 80067b0 <Out0_Process+0x5c>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800679a:	4b1b      	ldr	r3, [pc, #108]	; (8006808 <Out0_Process+0xb4>)
    SetEPTxCount(ENDP0, 0);
 800679c:	2000      	movs	r0, #0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800679e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 80067a2:	4601      	mov	r1, r0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80067a4:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 80067a6:	f7ff fb89 	bl	8005ebc <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 80067aa:	4b18      	ldr	r3, [pc, #96]	; (800680c <Out0_Process+0xb8>)
 80067ac:	2230      	movs	r2, #48	; 0x30
 80067ae:	801a      	strh	r2, [r3, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80067b0:	8a23      	ldrh	r3, [r4, #16]
 80067b2:	8aa2      	ldrh	r2, [r4, #20]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d802      	bhi.n	80067be <Out0_Process+0x6a>
  {
    pInformation->ControlState = OUT_DATA;
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	2203      	movs	r2, #3
 80067bc:	e002      	b.n	80067c4 <Out0_Process+0x70>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 80067be:	b11b      	cbz	r3, 80067c8 <Out0_Process+0x74>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	2205      	movs	r2, #5
 80067c4:	721a      	strb	r2, [r3, #8]
 80067c6:	e00c      	b.n	80067e2 <Out0_Process+0x8e>
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 80067c8:	682a      	ldr	r2, [r5, #0]
 80067ca:	2106      	movs	r1, #6
 80067cc:	7211      	strb	r1, [r2, #8]
      USB_StatusIn();
 80067ce:	4a10      	ldr	r2, [pc, #64]	; (8006810 <Out0_Process+0xbc>)
 80067d0:	6811      	ldr	r1, [r2, #0]
 80067d2:	4a10      	ldr	r2, [pc, #64]	; (8006814 <Out0_Process+0xc0>)
 80067d4:	b289      	uxth	r1, r1
 80067d6:	440a      	add	r2, r1
 80067d8:	0052      	lsls	r2, r2, #1
 80067da:	6013      	str	r3, [r2, #0]
 80067dc:	4b0b      	ldr	r3, [pc, #44]	; (800680c <Out0_Process+0xb8>)
 80067de:	2230      	movs	r2, #48	; 0x30
 80067e0:	801a      	strh	r2, [r3, #0]
  u32 ControlState = pInformation->ControlState;

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 80067e2:	682b      	ldr	r3, [r5, #0]
 80067e4:	7a1b      	ldrb	r3, [r3, #8]
 80067e6:	e006      	b.n	80067f6 <Out0_Process+0xa2>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 80067e8:	2b07      	cmp	r3, #7
 80067ea:	d103      	bne.n	80067f4 <Out0_Process+0xa0>
  {
    (*pProperty->Process_Status_OUT)();
 80067ec:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <Out0_Process+0xc4>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	4798      	blx	r3
  }

  else if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 80067f4:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 80067f6:	682a      	ldr	r2, [r5, #0]
 80067f8:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 80067fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 80067fe:	f7ff be1b 	b.w	8006438 <Post0_Process>
 8006802:	bf00      	nop
 8006804:	20000594 	mulcs	r0, r4, r5
 8006808:	20000562 	andcs	r0, r0, r2, ror #10
 800680c:	20000564 	andcs	r0, r0, r4, ror #10
 8006810:	40005c50 	andmi	r5, r0, r0, asr ip
 8006814:	20003002 	andcs	r3, r0, r2
 8006818:	2000056c 	andcs	r0, r0, ip, ror #10

0800681c <SetDeviceAddress>:
* Input          : - Val: device adress.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(u8 Val)
{
 800681c:	b530      	push	{r4, r5, lr}
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;
 800681e:	4b0b      	ldr	r3, [pc, #44]	; (800684c <SetDeviceAddress+0x30>)
 8006820:	781c      	ldrb	r4, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8006822:	2300      	movs	r3, #0
 8006824:	42a3      	cmp	r3, r4
 8006826:	d20c      	bcs.n	8006842 <SetDeviceAddress+0x26>
 8006828:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 800682c:	f502 52b8 	add.w	r2, r2, #5888	; 0x1700
 8006830:	0091      	lsls	r1, r2, #2
  {
    _SetEPAddress((u8)i, (u8)i);
 8006832:	680d      	ldr	r5, [r1, #0]
 8006834:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8006838:	402a      	ands	r2, r5
 800683a:	431a      	orrs	r2, r3
 800683c:	600a      	str	r2, [r1, #0]
{
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800683e:	3301      	adds	r3, #1
 8006840:	e7f0      	b.n	8006824 <SetDeviceAddress+0x8>
  {
    _SetEPAddress((u8)i, (u8)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 8006842:	4b03      	ldr	r3, [pc, #12]	; (8006850 <SetDeviceAddress+0x34>)
 8006844:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8006848:	6018      	str	r0, [r3, #0]
 800684a:	bd30      	pop	{r4, r5, pc}
 800684c:	200000a4 	andcs	r0, r0, r4, lsr #1
 8006850:	40005c4c 	andmi	r5, r0, ip, asr #24

08006854 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 In0_Process(void)
{
 8006854:	b510      	push	{r4, lr}
  u32 ControlState = pInformation->ControlState;
 8006856:	4c13      	ldr	r4, [pc, #76]	; (80068a4 <In0_Process+0x50>)
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800685c:	2a02      	cmp	r2, #2
 800685e:	d001      	beq.n	8006864 <In0_Process+0x10>
 8006860:	2a04      	cmp	r2, #4
 8006862:	d104      	bne.n	800686e <In0_Process+0x1a>
  {
    DataStageIn();
 8006864:	f7ff fc8a 	bl	800617c <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	7a1b      	ldrb	r3, [r3, #8]
 800686c:	e013      	b.n	8006896 <In0_Process+0x42>
  }

  else if (ControlState == WAIT_STATUS_IN)
 800686e:	2a06      	cmp	r2, #6
 8006870:	d110      	bne.n	8006894 <In0_Process+0x40>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8006872:	785a      	ldrb	r2, [r3, #1]
 8006874:	2a05      	cmp	r2, #5
 8006876:	d109      	bne.n	800688c <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8006878:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800687a:	0652      	lsls	r2, r2, #25
 800687c:	d106      	bne.n	800688c <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 800687e:	7898      	ldrb	r0, [r3, #2]
 8006880:	f7ff ffcc 	bl	800681c <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 8006884:	4b08      	ldr	r3, [pc, #32]	; (80068a8 <In0_Process+0x54>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
 800688c:	4b07      	ldr	r3, [pc, #28]	; (80068ac <In0_Process+0x58>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	4798      	blx	r3
    ControlState = STALLED;
  }

  else
  {
    ControlState = STALLED;
 8006894:	2308      	movs	r3, #8
  }

  pInformation->ControlState = ControlState;
 8006896:	6822      	ldr	r2, [r4, #0]
 8006898:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 800689a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 800689e:	f7ff bdcb 	b.w	8006438 <Post0_Process>
 80068a2:	bf00      	nop
 80068a4:	20000594 	mulcs	r0, r4, r5
 80068a8:	20000590 	mulcs	r0, r0, r5
 80068ac:	2000056c 	andcs	r0, r0, ip, ror #10

080068b0 <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 80068b0:	b530      	push	{r4, r5, lr}
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 80068b2:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80068b6:	3201      	adds	r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 80068b8:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80068bc:	1052      	asrs	r2, r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 80068be:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 80068c0:	2300      	movs	r3, #0
 80068c2:	4293      	cmp	r3, r2
 80068c4:	f100 0002 	add.w	r0, r0, #2
 80068c8:	d009      	beq.n	80068de <UserToPMABufferCopy+0x2e>
  {
    temp1 = (u16) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 80068ca:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (u16) * pbUsrBuf;
 80068ce:	f810 4c02 	ldrb.w	r4, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 80068d2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    *pdwVal++ = temp2;
 80068d6:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 80068da:	3301      	adds	r3, #1
 80068dc:	e7f1      	b.n	80068c2 <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 80068de:	bd30      	pop	{r4, r5, pc}

080068e0 <PMAToUserBufferCopy>:
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 80068e0:	b510      	push	{r4, lr}
  u32 n = (wNBytes + 1) >> 1;/* /2*/
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 80068e2:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 80068e6:	3201      	adds	r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 80068e8:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 80068ec:	1052      	asrs	r2, r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 80068ee:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 80068f0:	2300      	movs	r3, #0
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d005      	beq.n	8006902 <PMAToUserBufferCopy+0x22>
  {
    *(u16*)pbUsrBuf++ = *pdwVal++;
 80068f6:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 80068fa:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 80068fe:	3301      	adds	r3, #1
 8006900:	e7f7      	b.n	80068f2 <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 8006902:	bd10      	pop	{r4, pc}

08006904 <memcmp>:
 8006904:	b530      	push	{r4, r5, lr}
 8006906:	2300      	movs	r3, #0
 8006908:	4293      	cmp	r3, r2
 800690a:	d008      	beq.n	800691e <memcmp+0x1a>
 800690c:	5cc5      	ldrb	r5, [r0, r3]
 800690e:	3301      	adds	r3, #1
 8006910:	18cc      	adds	r4, r1, r3
 8006912:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 8006916:	42a5      	cmp	r5, r4
 8006918:	d0f6      	beq.n	8006908 <memcmp+0x4>
 800691a:	1b28      	subs	r0, r5, r4
 800691c:	bd30      	pop	{r4, r5, pc}
 800691e:	2000      	movs	r0, #0
 8006920:	bd30      	pop	{r4, r5, pc}

08006922 <memcpy>:
 8006922:	b510      	push	{r4, lr}
 8006924:	2300      	movs	r3, #0
 8006926:	4293      	cmp	r3, r2
 8006928:	d003      	beq.n	8006932 <memcpy+0x10>
 800692a:	5ccc      	ldrb	r4, [r1, r3]
 800692c:	54c4      	strb	r4, [r0, r3]
 800692e:	3301      	adds	r3, #1
 8006930:	e7f9      	b.n	8006926 <memcpy+0x4>
 8006932:	bd10      	pop	{r4, pc}

08006934 <memmem>:
 8006934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006938:	4606      	mov	r6, r0
 800693a:	460f      	mov	r7, r1
 800693c:	4691      	mov	r9, r2
 800693e:	461d      	mov	r5, r3
 8006940:	b18b      	cbz	r3, 8006966 <memmem+0x32>
 8006942:	460c      	mov	r4, r1
 8006944:	eb06 0807 	add.w	r8, r6, r7
 8006948:	42a5      	cmp	r5, r4
 800694a:	ebc4 0808 	rsb	r8, r4, r8
 800694e:	d807      	bhi.n	8006960 <memmem+0x2c>
 8006950:	4640      	mov	r0, r8
 8006952:	4649      	mov	r1, r9
 8006954:	462a      	mov	r2, r5
 8006956:	f7ff ffd5 	bl	8006904 <memcmp>
 800695a:	b130      	cbz	r0, 800696a <memmem+0x36>
 800695c:	3c01      	subs	r4, #1
 800695e:	e7f1      	b.n	8006944 <memmem+0x10>
 8006960:	2000      	movs	r0, #0
 8006962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800696a:	4640      	mov	r0, r8
 800696c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006970 <memset>:
 8006970:	4402      	add	r2, r0
 8006972:	4603      	mov	r3, r0
 8006974:	4293      	cmp	r3, r2
 8006976:	d002      	beq.n	800697e <memset+0xe>
 8006978:	f803 1b01 	strb.w	r1, [r3], #1
 800697c:	e7fa      	b.n	8006974 <memset+0x4>
 800697e:	4770      	bx	lr

08006980 <siprintf>:
 8006980:	b40e      	push	{r1, r2, r3}
 8006982:	b500      	push	{lr}
 8006984:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006988:	b09c      	sub	sp, #112	; 0x70
 800698a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800698e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006992:	9104      	str	r1, [sp, #16]
 8006994:	9107      	str	r1, [sp, #28]
 8006996:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800699a:	ab1d      	add	r3, sp, #116	; 0x74
 800699c:	f8ad 1016 	strh.w	r1, [sp, #22]
 80069a0:	4908      	ldr	r1, [pc, #32]	; (80069c4 <siprintf+0x44>)
 80069a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069a6:	9002      	str	r0, [sp, #8]
 80069a8:	9006      	str	r0, [sp, #24]
 80069aa:	6808      	ldr	r0, [r1, #0]
 80069ac:	a902      	add	r1, sp, #8
 80069ae:	9301      	str	r3, [sp, #4]
 80069b0:	f000 f866 	bl	8006a80 <_svfiprintf_r>
 80069b4:	9b02      	ldr	r3, [sp, #8]
 80069b6:	2200      	movs	r2, #0
 80069b8:	701a      	strb	r2, [r3, #0]
 80069ba:	b01c      	add	sp, #112	; 0x70
 80069bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80069c0:	b003      	add	sp, #12
 80069c2:	4770      	bx	lr
 80069c4:	2000046c 	andcs	r0, r0, ip, ror #8

080069c8 <__ssputs_r>:
 80069c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069cc:	688d      	ldr	r5, [r1, #8]
 80069ce:	4681      	mov	r9, r0
 80069d0:	42ab      	cmp	r3, r5
 80069d2:	460c      	mov	r4, r1
 80069d4:	4692      	mov	sl, r2
 80069d6:	461f      	mov	r7, r3
 80069d8:	d343      	bcc.n	8006a62 <__ssputs_r+0x9a>
 80069da:	898b      	ldrh	r3, [r1, #12]
 80069dc:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80069e0:	d03d      	beq.n	8006a5e <__ssputs_r+0x96>
 80069e2:	6826      	ldr	r6, [r4, #0]
 80069e4:	6909      	ldr	r1, [r1, #16]
 80069e6:	2202      	movs	r2, #2
 80069e8:	ebc1 0806 	rsb	r8, r1, r6
 80069ec:	6966      	ldr	r6, [r4, #20]
 80069ee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80069f2:	fb96 f6f2 	sdiv	r6, r6, r2
 80069f6:	f108 0201 	add.w	r2, r8, #1
 80069fa:	443a      	add	r2, r7
 80069fc:	4296      	cmp	r6, r2
 80069fe:	bf38      	it	cc
 8006a00:	4616      	movcc	r6, r2
 8006a02:	055b      	lsls	r3, r3, #21
 8006a04:	d50f      	bpl.n	8006a26 <__ssputs_r+0x5e>
 8006a06:	4631      	mov	r1, r6
 8006a08:	f000 fb40 	bl	800708c <_malloc_r>
 8006a0c:	4605      	mov	r5, r0
 8006a0e:	b198      	cbz	r0, 8006a38 <__ssputs_r+0x70>
 8006a10:	6921      	ldr	r1, [r4, #16]
 8006a12:	4642      	mov	r2, r8
 8006a14:	f7ff ff85 	bl	8006922 <memcpy>
 8006a18:	89a3      	ldrh	r3, [r4, #12]
 8006a1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a22:	81a3      	strh	r3, [r4, #12]
 8006a24:	e013      	b.n	8006a4e <__ssputs_r+0x86>
 8006a26:	4632      	mov	r2, r6
 8006a28:	f000 fb84 	bl	8007134 <_realloc_r>
 8006a2c:	4605      	mov	r5, r0
 8006a2e:	b970      	cbnz	r0, 8006a4e <__ssputs_r+0x86>
 8006a30:	4648      	mov	r0, r9
 8006a32:	6921      	ldr	r1, [r4, #16]
 8006a34:	f000 fae6 	bl	8007004 <_free_r>
 8006a38:	230c      	movs	r3, #12
 8006a3a:	f8c9 3000 	str.w	r3, [r9]
 8006a3e:	89a3      	ldrh	r3, [r4, #12]
 8006a40:	f04f 30ff 	mov.w	r0, #4294967295
 8006a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a48:	81a3      	strh	r3, [r4, #12]
 8006a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a4e:	6125      	str	r5, [r4, #16]
 8006a50:	6166      	str	r6, [r4, #20]
 8006a52:	4445      	add	r5, r8
 8006a54:	ebc8 0606 	rsb	r6, r8, r6
 8006a58:	6025      	str	r5, [r4, #0]
 8006a5a:	60a6      	str	r6, [r4, #8]
 8006a5c:	463d      	mov	r5, r7
 8006a5e:	42af      	cmp	r7, r5
 8006a60:	d200      	bcs.n	8006a64 <__ssputs_r+0x9c>
 8006a62:	463d      	mov	r5, r7
 8006a64:	462a      	mov	r2, r5
 8006a66:	6820      	ldr	r0, [r4, #0]
 8006a68:	4651      	mov	r1, sl
 8006a6a:	f000 faaf 	bl	8006fcc <memmove>
 8006a6e:	68a3      	ldr	r3, [r4, #8]
 8006a70:	2000      	movs	r0, #0
 8006a72:	1b5b      	subs	r3, r3, r5
 8006a74:	60a3      	str	r3, [r4, #8]
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	441d      	add	r5, r3
 8006a7a:	6025      	str	r5, [r4, #0]
 8006a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006a80 <_svfiprintf_r>:
 8006a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a84:	b09d      	sub	sp, #116	; 0x74
 8006a86:	9303      	str	r3, [sp, #12]
 8006a88:	898b      	ldrh	r3, [r1, #12]
 8006a8a:	4607      	mov	r7, r0
 8006a8c:	061c      	lsls	r4, r3, #24
 8006a8e:	460d      	mov	r5, r1
 8006a90:	4616      	mov	r6, r2
 8006a92:	d50c      	bpl.n	8006aae <_svfiprintf_r+0x2e>
 8006a94:	690b      	ldr	r3, [r1, #16]
 8006a96:	b953      	cbnz	r3, 8006aae <_svfiprintf_r+0x2e>
 8006a98:	2140      	movs	r1, #64	; 0x40
 8006a9a:	f000 faf7 	bl	800708c <_malloc_r>
 8006a9e:	6028      	str	r0, [r5, #0]
 8006aa0:	6128      	str	r0, [r5, #16]
 8006aa2:	b910      	cbnz	r0, 8006aaa <_svfiprintf_r+0x2a>
 8006aa4:	230c      	movs	r3, #12
 8006aa6:	603b      	str	r3, [r7, #0]
 8006aa8:	e0c7      	b.n	8006c3a <_svfiprintf_r+0x1ba>
 8006aaa:	2340      	movs	r3, #64	; 0x40
 8006aac:	616b      	str	r3, [r5, #20]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab2:	2320      	movs	r3, #32
 8006ab4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ab8:	2330      	movs	r3, #48	; 0x30
 8006aba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006abe:	4633      	mov	r3, r6
 8006ac0:	461c      	mov	r4, r3
 8006ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ac6:	b91a      	cbnz	r2, 8006ad0 <_svfiprintf_r+0x50>
 8006ac8:	ebb4 0906 	subs.w	r9, r4, r6
 8006acc:	d00f      	beq.n	8006aee <_svfiprintf_r+0x6e>
 8006ace:	e002      	b.n	8006ad6 <_svfiprintf_r+0x56>
 8006ad0:	2a25      	cmp	r2, #37	; 0x25
 8006ad2:	d1f5      	bne.n	8006ac0 <_svfiprintf_r+0x40>
 8006ad4:	e7f8      	b.n	8006ac8 <_svfiprintf_r+0x48>
 8006ad6:	4638      	mov	r0, r7
 8006ad8:	4629      	mov	r1, r5
 8006ada:	4632      	mov	r2, r6
 8006adc:	464b      	mov	r3, r9
 8006ade:	f7ff ff73 	bl	80069c8 <__ssputs_r>
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	f000 80a4 	beq.w	8006c30 <_svfiprintf_r+0x1b0>
 8006ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aea:	444b      	add	r3, r9
 8006aec:	9309      	str	r3, [sp, #36]	; 0x24
 8006aee:	7823      	ldrb	r3, [r4, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 809d 	beq.w	8006c30 <_svfiprintf_r+0x1b0>
 8006af6:	2300      	movs	r3, #0
 8006af8:	f04f 32ff 	mov.w	r2, #4294967295
 8006afc:	9304      	str	r3, [sp, #16]
 8006afe:	9307      	str	r3, [sp, #28]
 8006b00:	9205      	str	r2, [sp, #20]
 8006b02:	9306      	str	r3, [sp, #24]
 8006b04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b08:	931a      	str	r3, [sp, #104]	; 0x68
 8006b0a:	f104 0901 	add.w	r9, r4, #1
 8006b0e:	4e4d      	ldr	r6, [pc, #308]	; (8006c44 <_svfiprintf_r+0x1c4>)
 8006b10:	464c      	mov	r4, r9
 8006b12:	4630      	mov	r0, r6
 8006b14:	7821      	ldrb	r1, [r4, #0]
 8006b16:	2205      	movs	r2, #5
 8006b18:	f000 fa4a 	bl	8006fb0 <memchr>
 8006b1c:	f109 0901 	add.w	r9, r9, #1
 8006b20:	9b04      	ldr	r3, [sp, #16]
 8006b22:	b128      	cbz	r0, 8006b30 <_svfiprintf_r+0xb0>
 8006b24:	1b86      	subs	r6, r0, r6
 8006b26:	2001      	movs	r0, #1
 8006b28:	40b0      	lsls	r0, r6
 8006b2a:	4303      	orrs	r3, r0
 8006b2c:	9304      	str	r3, [sp, #16]
 8006b2e:	e7ee      	b.n	8006b0e <_svfiprintf_r+0x8e>
 8006b30:	06d9      	lsls	r1, r3, #27
 8006b32:	bf44      	itt	mi
 8006b34:	2220      	movmi	r2, #32
 8006b36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b3a:	071a      	lsls	r2, r3, #28
 8006b3c:	bf44      	itt	mi
 8006b3e:	222b      	movmi	r2, #43	; 0x2b
 8006b40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b44:	7822      	ldrb	r2, [r4, #0]
 8006b46:	2a2a      	cmp	r2, #42	; 0x2a
 8006b48:	d002      	beq.n	8006b50 <_svfiprintf_r+0xd0>
 8006b4a:	9b07      	ldr	r3, [sp, #28]
 8006b4c:	4621      	mov	r1, r4
 8006b4e:	e00e      	b.n	8006b6e <_svfiprintf_r+0xee>
 8006b50:	9a03      	ldr	r2, [sp, #12]
 8006b52:	1d11      	adds	r1, r2, #4
 8006b54:	6812      	ldr	r2, [r2, #0]
 8006b56:	9103      	str	r1, [sp, #12]
 8006b58:	2a00      	cmp	r2, #0
 8006b5a:	db01      	blt.n	8006b60 <_svfiprintf_r+0xe0>
 8006b5c:	9207      	str	r2, [sp, #28]
 8006b5e:	e004      	b.n	8006b6a <_svfiprintf_r+0xea>
 8006b60:	4252      	negs	r2, r2
 8006b62:	f043 0302 	orr.w	r3, r3, #2
 8006b66:	9207      	str	r2, [sp, #28]
 8006b68:	9304      	str	r3, [sp, #16]
 8006b6a:	3401      	adds	r4, #1
 8006b6c:	e00a      	b.n	8006b84 <_svfiprintf_r+0x104>
 8006b6e:	460c      	mov	r4, r1
 8006b70:	7822      	ldrb	r2, [r4, #0]
 8006b72:	3101      	adds	r1, #1
 8006b74:	3a30      	subs	r2, #48	; 0x30
 8006b76:	2a09      	cmp	r2, #9
 8006b78:	d803      	bhi.n	8006b82 <_svfiprintf_r+0x102>
 8006b7a:	200a      	movs	r0, #10
 8006b7c:	fb00 2303 	mla	r3, r0, r3, r2
 8006b80:	e7f5      	b.n	8006b6e <_svfiprintf_r+0xee>
 8006b82:	9307      	str	r3, [sp, #28]
 8006b84:	7823      	ldrb	r3, [r4, #0]
 8006b86:	2b2e      	cmp	r3, #46	; 0x2e
 8006b88:	d119      	bne.n	8006bbe <_svfiprintf_r+0x13e>
 8006b8a:	7863      	ldrb	r3, [r4, #1]
 8006b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8006b8e:	d109      	bne.n	8006ba4 <_svfiprintf_r+0x124>
 8006b90:	9b03      	ldr	r3, [sp, #12]
 8006b92:	3402      	adds	r4, #2
 8006b94:	1d1a      	adds	r2, r3, #4
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	9203      	str	r2, [sp, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	bfb8      	it	lt
 8006b9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ba2:	e00b      	b.n	8006bbc <_svfiprintf_r+0x13c>
 8006ba4:	1c61      	adds	r1, r4, #1
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	460c      	mov	r4, r1
 8006baa:	7822      	ldrb	r2, [r4, #0]
 8006bac:	3101      	adds	r1, #1
 8006bae:	3a30      	subs	r2, #48	; 0x30
 8006bb0:	2a09      	cmp	r2, #9
 8006bb2:	d803      	bhi.n	8006bbc <_svfiprintf_r+0x13c>
 8006bb4:	200a      	movs	r0, #10
 8006bb6:	fb00 2303 	mla	r3, r0, r3, r2
 8006bba:	e7f5      	b.n	8006ba8 <_svfiprintf_r+0x128>
 8006bbc:	9305      	str	r3, [sp, #20]
 8006bbe:	4e22      	ldr	r6, [pc, #136]	; (8006c48 <_svfiprintf_r+0x1c8>)
 8006bc0:	7821      	ldrb	r1, [r4, #0]
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	2203      	movs	r2, #3
 8006bc6:	f000 f9f3 	bl	8006fb0 <memchr>
 8006bca:	b130      	cbz	r0, 8006bda <_svfiprintf_r+0x15a>
 8006bcc:	1b86      	subs	r6, r0, r6
 8006bce:	2040      	movs	r0, #64	; 0x40
 8006bd0:	40b0      	lsls	r0, r6
 8006bd2:	9b04      	ldr	r3, [sp, #16]
 8006bd4:	3401      	adds	r4, #1
 8006bd6:	4303      	orrs	r3, r0
 8006bd8:	9304      	str	r3, [sp, #16]
 8006bda:	7821      	ldrb	r1, [r4, #0]
 8006bdc:	481b      	ldr	r0, [pc, #108]	; (8006c4c <_svfiprintf_r+0x1cc>)
 8006bde:	2206      	movs	r2, #6
 8006be0:	1c66      	adds	r6, r4, #1
 8006be2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006be6:	f000 f9e3 	bl	8006fb0 <memchr>
 8006bea:	b188      	cbz	r0, 8006c10 <_svfiprintf_r+0x190>
 8006bec:	4b18      	ldr	r3, [pc, #96]	; (8006c50 <_svfiprintf_r+0x1d0>)
 8006bee:	b933      	cbnz	r3, 8006bfe <_svfiprintf_r+0x17e>
 8006bf0:	9b03      	ldr	r3, [sp, #12]
 8006bf2:	3307      	adds	r3, #7
 8006bf4:	f023 0307 	bic.w	r3, r3, #7
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	9303      	str	r3, [sp, #12]
 8006bfc:	e014      	b.n	8006c28 <_svfiprintf_r+0x1a8>
 8006bfe:	ab03      	add	r3, sp, #12
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	4638      	mov	r0, r7
 8006c04:	a904      	add	r1, sp, #16
 8006c06:	462a      	mov	r2, r5
 8006c08:	4b12      	ldr	r3, [pc, #72]	; (8006c54 <_svfiprintf_r+0x1d4>)
 8006c0a:	f3af 8000 	nop.w
 8006c0e:	e007      	b.n	8006c20 <_svfiprintf_r+0x1a0>
 8006c10:	ab03      	add	r3, sp, #12
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	4638      	mov	r0, r7
 8006c16:	a904      	add	r1, sp, #16
 8006c18:	462a      	mov	r2, r5
 8006c1a:	4b0e      	ldr	r3, [pc, #56]	; (8006c54 <_svfiprintf_r+0x1d4>)
 8006c1c:	f000 f88e 	bl	8006d3c <_printf_i>
 8006c20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c24:	4680      	mov	r8, r0
 8006c26:	d003      	beq.n	8006c30 <_svfiprintf_r+0x1b0>
 8006c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c2a:	4443      	add	r3, r8
 8006c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c2e:	e746      	b.n	8006abe <_svfiprintf_r+0x3e>
 8006c30:	89ab      	ldrh	r3, [r5, #12]
 8006c32:	065b      	lsls	r3, r3, #25
 8006c34:	d401      	bmi.n	8006c3a <_svfiprintf_r+0x1ba>
 8006c36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c38:	e001      	b.n	8006c3e <_svfiprintf_r+0x1be>
 8006c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3e:	b01d      	add	sp, #116	; 0x74
 8006c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c44:	080077b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, ip, sp, lr}
 8006c48:	080077b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, ip, sp, lr}
 8006c4c:	080077ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl, ip, sp, lr}
 8006c50:	00000000 	andeq	r0, r0, r0
 8006c54:	080069c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, fp, sp, lr}

08006c58 <_printf_common>:
 8006c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c5c:	4615      	mov	r5, r2
 8006c5e:	461f      	mov	r7, r3
 8006c60:	688a      	ldr	r2, [r1, #8]
 8006c62:	690b      	ldr	r3, [r1, #16]
 8006c64:	4606      	mov	r6, r0
 8006c66:	429a      	cmp	r2, r3
 8006c68:	bfa8      	it	ge
 8006c6a:	4613      	movge	r3, r2
 8006c6c:	602b      	str	r3, [r5, #0]
 8006c6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c72:	460c      	mov	r4, r1
 8006c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c78:	b10a      	cbz	r2, 8006c7e <_printf_common+0x26>
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	602b      	str	r3, [r5, #0]
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	0699      	lsls	r1, r3, #26
 8006c82:	d502      	bpl.n	8006c8a <_printf_common+0x32>
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	3302      	adds	r3, #2
 8006c88:	602b      	str	r3, [r5, #0]
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	f013 0906 	ands.w	r9, r3, #6
 8006c90:	d01d      	beq.n	8006cce <_printf_common+0x76>
 8006c92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006c96:	6822      	ldr	r2, [r4, #0]
 8006c98:	3300      	adds	r3, #0
 8006c9a:	bf18      	it	ne
 8006c9c:	2301      	movne	r3, #1
 8006c9e:	0692      	lsls	r2, r2, #26
 8006ca0:	d51f      	bpl.n	8006ce2 <_printf_common+0x8a>
 8006ca2:	18e1      	adds	r1, r4, r3
 8006ca4:	2030      	movs	r0, #48	; 0x30
 8006ca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006caa:	1c5a      	adds	r2, r3, #1
 8006cac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cb0:	4422      	add	r2, r4
 8006cb2:	3302      	adds	r3, #2
 8006cb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cb8:	e013      	b.n	8006ce2 <_printf_common+0x8a>
 8006cba:	4630      	mov	r0, r6
 8006cbc:	4639      	mov	r1, r7
 8006cbe:	f104 0219 	add.w	r2, r4, #25
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	47c0      	blx	r8
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	d007      	beq.n	8006cda <_printf_common+0x82>
 8006cca:	f109 0901 	add.w	r9, r9, #1
 8006cce:	68e2      	ldr	r2, [r4, #12]
 8006cd0:	682b      	ldr	r3, [r5, #0]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	4599      	cmp	r9, r3
 8006cd6:	dbf0      	blt.n	8006cba <_printf_common+0x62>
 8006cd8:	e7db      	b.n	8006c92 <_printf_common+0x3a>
 8006cda:	f04f 30ff 	mov.w	r0, #4294967295
 8006cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	4639      	mov	r1, r7
 8006ce6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cea:	47c0      	blx	r8
 8006cec:	3001      	adds	r0, #1
 8006cee:	d0f4      	beq.n	8006cda <_printf_common+0x82>
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	682a      	ldr	r2, [r5, #0]
 8006cf4:	f003 0306 	and.w	r3, r3, #6
 8006cf8:	68e1      	ldr	r1, [r4, #12]
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	bf08      	it	eq
 8006cfe:	ebc2 0501 	rsbeq	r5, r2, r1
 8006d02:	6923      	ldr	r3, [r4, #16]
 8006d04:	68a2      	ldr	r2, [r4, #8]
 8006d06:	bf0c      	ite	eq
 8006d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d0c:	2500      	movne	r5, #0
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	bfc4      	itt	gt
 8006d12:	ebc3 0302 	rsbgt	r3, r3, r2
 8006d16:	18ed      	addgt	r5, r5, r3
 8006d18:	f04f 0900 	mov.w	r9, #0
 8006d1c:	45a9      	cmp	r9, r5
 8006d1e:	da0a      	bge.n	8006d36 <_printf_common+0xde>
 8006d20:	4630      	mov	r0, r6
 8006d22:	4639      	mov	r1, r7
 8006d24:	f104 021a 	add.w	r2, r4, #26
 8006d28:	2301      	movs	r3, #1
 8006d2a:	47c0      	blx	r8
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d0d4      	beq.n	8006cda <_printf_common+0x82>
 8006d30:	f109 0901 	add.w	r9, r9, #1
 8006d34:	e7f2      	b.n	8006d1c <_printf_common+0xc4>
 8006d36:	2000      	movs	r0, #0
 8006d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006d3c <_printf_i>:
 8006d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d40:	7e0e      	ldrb	r6, [r1, #24]
 8006d42:	4680      	mov	r8, r0
 8006d44:	2e6e      	cmp	r6, #110	; 0x6e
 8006d46:	460c      	mov	r4, r1
 8006d48:	4691      	mov	r9, r2
 8006d4a:	469a      	mov	sl, r3
 8006d4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d4e:	f101 0043 	add.w	r0, r1, #67	; 0x43
 8006d52:	f000 80a5 	beq.w	8006ea0 <_printf_i+0x164>
 8006d56:	d811      	bhi.n	8006d7c <_printf_i+0x40>
 8006d58:	2e63      	cmp	r6, #99	; 0x63
 8006d5a:	d022      	beq.n	8006da2 <_printf_i+0x66>
 8006d5c:	d809      	bhi.n	8006d72 <_printf_i+0x36>
 8006d5e:	2e00      	cmp	r6, #0
 8006d60:	f000 80af 	beq.w	8006ec2 <_printf_i+0x186>
 8006d64:	2e58      	cmp	r6, #88	; 0x58
 8006d66:	f040 80bf 	bne.w	8006ee8 <_printf_i+0x1ac>
 8006d6a:	f881 6045 	strb.w	r6, [r1, #69]	; 0x45
 8006d6e:	4a7b      	ldr	r2, [pc, #492]	; (8006f5c <_printf_i+0x220>)
 8006d70:	e04f      	b.n	8006e12 <_printf_i+0xd6>
 8006d72:	2e64      	cmp	r6, #100	; 0x64
 8006d74:	d01e      	beq.n	8006db4 <_printf_i+0x78>
 8006d76:	2e69      	cmp	r6, #105	; 0x69
 8006d78:	d01c      	beq.n	8006db4 <_printf_i+0x78>
 8006d7a:	e0b5      	b.n	8006ee8 <_printf_i+0x1ac>
 8006d7c:	2e73      	cmp	r6, #115	; 0x73
 8006d7e:	f000 80a4 	beq.w	8006eca <_printf_i+0x18e>
 8006d82:	d809      	bhi.n	8006d98 <_printf_i+0x5c>
 8006d84:	2e6f      	cmp	r6, #111	; 0x6f
 8006d86:	d02b      	beq.n	8006de0 <_printf_i+0xa4>
 8006d88:	2e70      	cmp	r6, #112	; 0x70
 8006d8a:	f040 80ad 	bne.w	8006ee8 <_printf_i+0x1ac>
 8006d8e:	680b      	ldr	r3, [r1, #0]
 8006d90:	f043 0320 	orr.w	r3, r3, #32
 8006d94:	600b      	str	r3, [r1, #0]
 8006d96:	e038      	b.n	8006e0a <_printf_i+0xce>
 8006d98:	2e75      	cmp	r6, #117	; 0x75
 8006d9a:	d021      	beq.n	8006de0 <_printf_i+0xa4>
 8006d9c:	2e78      	cmp	r6, #120	; 0x78
 8006d9e:	d034      	beq.n	8006e0a <_printf_i+0xce>
 8006da0:	e0a2      	b.n	8006ee8 <_printf_i+0x1ac>
 8006da2:	682b      	ldr	r3, [r5, #0]
 8006da4:	f101 0742 	add.w	r7, r1, #66	; 0x42
 8006da8:	1d1a      	adds	r2, r3, #4
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	602a      	str	r2, [r5, #0]
 8006dae:	f881 3042 	strb.w	r3, [r1, #66]	; 0x42
 8006db2:	e09d      	b.n	8006ef0 <_printf_i+0x1b4>
 8006db4:	6822      	ldr	r2, [r4, #0]
 8006db6:	682b      	ldr	r3, [r5, #0]
 8006db8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006dbc:	d003      	beq.n	8006dc6 <_printf_i+0x8a>
 8006dbe:	1d1a      	adds	r2, r3, #4
 8006dc0:	602a      	str	r2, [r5, #0]
 8006dc2:	681d      	ldr	r5, [r3, #0]
 8006dc4:	e005      	b.n	8006dd2 <_printf_i+0x96>
 8006dc6:	0651      	lsls	r1, r2, #25
 8006dc8:	d5f9      	bpl.n	8006dbe <_printf_i+0x82>
 8006dca:	1d1a      	adds	r2, r3, #4
 8006dcc:	602a      	str	r2, [r5, #0]
 8006dce:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006dd2:	2d00      	cmp	r5, #0
 8006dd4:	da39      	bge.n	8006e4a <_printf_i+0x10e>
 8006dd6:	232d      	movs	r3, #45	; 0x2d
 8006dd8:	426d      	negs	r5, r5
 8006dda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dde:	e034      	b.n	8006e4a <_printf_i+0x10e>
 8006de0:	6822      	ldr	r2, [r4, #0]
 8006de2:	682b      	ldr	r3, [r5, #0]
 8006de4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006de8:	d003      	beq.n	8006df2 <_printf_i+0xb6>
 8006dea:	1d1a      	adds	r2, r3, #4
 8006dec:	602a      	str	r2, [r5, #0]
 8006dee:	681d      	ldr	r5, [r3, #0]
 8006df0:	e004      	b.n	8006dfc <_printf_i+0xc0>
 8006df2:	0652      	lsls	r2, r2, #25
 8006df4:	d5f9      	bpl.n	8006dea <_printf_i+0xae>
 8006df6:	1d1a      	adds	r2, r3, #4
 8006df8:	602a      	str	r2, [r5, #0]
 8006dfa:	881d      	ldrh	r5, [r3, #0]
 8006dfc:	7e23      	ldrb	r3, [r4, #24]
 8006dfe:	4a57      	ldr	r2, [pc, #348]	; (8006f5c <_printf_i+0x220>)
 8006e00:	2b6f      	cmp	r3, #111	; 0x6f
 8006e02:	bf14      	ite	ne
 8006e04:	230a      	movne	r3, #10
 8006e06:	2308      	moveq	r3, #8
 8006e08:	e01b      	b.n	8006e42 <_printf_i+0x106>
 8006e0a:	2378      	movs	r3, #120	; 0x78
 8006e0c:	4a54      	ldr	r2, [pc, #336]	; (8006f60 <_printf_i+0x224>)
 8006e0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	6829      	ldr	r1, [r5, #0]
 8006e16:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006e1a:	f101 0604 	add.w	r6, r1, #4
 8006e1e:	602e      	str	r6, [r5, #0]
 8006e20:	d001      	beq.n	8006e26 <_printf_i+0xea>
 8006e22:	680d      	ldr	r5, [r1, #0]
 8006e24:	e002      	b.n	8006e2c <_printf_i+0xf0>
 8006e26:	065f      	lsls	r7, r3, #25
 8006e28:	d5fb      	bpl.n	8006e22 <_printf_i+0xe6>
 8006e2a:	880d      	ldrh	r5, [r1, #0]
 8006e2c:	07de      	lsls	r6, r3, #31
 8006e2e:	bf44      	itt	mi
 8006e30:	f043 0320 	orrmi.w	r3, r3, #32
 8006e34:	6023      	strmi	r3, [r4, #0]
 8006e36:	b91d      	cbnz	r5, 8006e40 <_printf_i+0x104>
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	f023 0320 	bic.w	r3, r3, #32
 8006e3e:	6023      	str	r3, [r4, #0]
 8006e40:	2310      	movs	r3, #16
 8006e42:	2100      	movs	r1, #0
 8006e44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e48:	e001      	b.n	8006e4e <_printf_i+0x112>
 8006e4a:	4a44      	ldr	r2, [pc, #272]	; (8006f5c <_printf_i+0x220>)
 8006e4c:	230a      	movs	r3, #10
 8006e4e:	6866      	ldr	r6, [r4, #4]
 8006e50:	2e00      	cmp	r6, #0
 8006e52:	60a6      	str	r6, [r4, #8]
 8006e54:	db03      	blt.n	8006e5e <_printf_i+0x122>
 8006e56:	6821      	ldr	r1, [r4, #0]
 8006e58:	f021 0104 	bic.w	r1, r1, #4
 8006e5c:	6021      	str	r1, [r4, #0]
 8006e5e:	b905      	cbnz	r5, 8006e62 <_printf_i+0x126>
 8006e60:	b16e      	cbz	r6, 8006e7e <_printf_i+0x142>
 8006e62:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8006e66:	fbb5 f6f3 	udiv	r6, r5, r3
 8006e6a:	fb03 5516 	mls	r5, r3, r6, r5
 8006e6e:	5d55      	ldrb	r5, [r2, r5]
 8006e70:	460f      	mov	r7, r1
 8006e72:	f801 5901 	strb.w	r5, [r1], #-1
 8006e76:	4635      	mov	r5, r6
 8006e78:	2e00      	cmp	r6, #0
 8006e7a:	d1f4      	bne.n	8006e66 <_printf_i+0x12a>
 8006e7c:	e000      	b.n	8006e80 <_printf_i+0x144>
 8006e7e:	4607      	mov	r7, r0
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	d10a      	bne.n	8006e9a <_printf_i+0x15e>
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	07dd      	lsls	r5, r3, #31
 8006e88:	d507      	bpl.n	8006e9a <_printf_i+0x15e>
 8006e8a:	6862      	ldr	r2, [r4, #4]
 8006e8c:	6923      	ldr	r3, [r4, #16]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	dc03      	bgt.n	8006e9a <_printf_i+0x15e>
 8006e92:	2330      	movs	r3, #48	; 0x30
 8006e94:	f807 3c01 	strb.w	r3, [r7, #-1]
 8006e98:	3f01      	subs	r7, #1
 8006e9a:	1bc0      	subs	r0, r0, r7
 8006e9c:	6120      	str	r0, [r4, #16]
 8006e9e:	e02c      	b.n	8006efa <_printf_i+0x1be>
 8006ea0:	6809      	ldr	r1, [r1, #0]
 8006ea2:	682b      	ldr	r3, [r5, #0]
 8006ea4:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006ea8:	6962      	ldr	r2, [r4, #20]
 8006eaa:	d004      	beq.n	8006eb6 <_printf_i+0x17a>
 8006eac:	1d19      	adds	r1, r3, #4
 8006eae:	6029      	str	r1, [r5, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	e005      	b.n	8006ec2 <_printf_i+0x186>
 8006eb6:	0649      	lsls	r1, r1, #25
 8006eb8:	d5f8      	bpl.n	8006eac <_printf_i+0x170>
 8006eba:	1d19      	adds	r1, r3, #4
 8006ebc:	6029      	str	r1, [r5, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	801a      	strh	r2, [r3, #0]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	6123      	str	r3, [r4, #16]
 8006ec6:	4607      	mov	r7, r0
 8006ec8:	e017      	b.n	8006efa <_printf_i+0x1be>
 8006eca:	682b      	ldr	r3, [r5, #0]
 8006ecc:	1d1a      	adds	r2, r3, #4
 8006ece:	602a      	str	r2, [r5, #0]
 8006ed0:	681f      	ldr	r7, [r3, #0]
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	f000 f964 	bl	80071a0 <strlen>
 8006ed8:	6863      	ldr	r3, [r4, #4]
 8006eda:	6120      	str	r0, [r4, #16]
 8006edc:	4298      	cmp	r0, r3
 8006ede:	bf88      	it	hi
 8006ee0:	6123      	strhi	r3, [r4, #16]
 8006ee2:	6923      	ldr	r3, [r4, #16]
 8006ee4:	6063      	str	r3, [r4, #4]
 8006ee6:	e005      	b.n	8006ef4 <_printf_i+0x1b8>
 8006ee8:	f104 0742 	add.w	r7, r4, #66	; 0x42
 8006eec:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	6123      	str	r3, [r4, #16]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006efa:	f8cd a000 	str.w	sl, [sp]
 8006efe:	4640      	mov	r0, r8
 8006f00:	4621      	mov	r1, r4
 8006f02:	aa03      	add	r2, sp, #12
 8006f04:	464b      	mov	r3, r9
 8006f06:	f7ff fea7 	bl	8006c58 <_printf_common>
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	d102      	bne.n	8006f14 <_printf_i+0x1d8>
 8006f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f12:	e01f      	b.n	8006f54 <_printf_i+0x218>
 8006f14:	4640      	mov	r0, r8
 8006f16:	4649      	mov	r1, r9
 8006f18:	463a      	mov	r2, r7
 8006f1a:	6923      	ldr	r3, [r4, #16]
 8006f1c:	47d0      	blx	sl
 8006f1e:	3001      	adds	r0, #1
 8006f20:	d0f5      	beq.n	8006f0e <_printf_i+0x1d2>
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	079b      	lsls	r3, r3, #30
 8006f26:	d405      	bmi.n	8006f34 <_printf_i+0x1f8>
 8006f28:	68e0      	ldr	r0, [r4, #12]
 8006f2a:	9b03      	ldr	r3, [sp, #12]
 8006f2c:	4298      	cmp	r0, r3
 8006f2e:	bfb8      	it	lt
 8006f30:	4618      	movlt	r0, r3
 8006f32:	e00f      	b.n	8006f54 <_printf_i+0x218>
 8006f34:	2500      	movs	r5, #0
 8006f36:	68e2      	ldr	r2, [r4, #12]
 8006f38:	9b03      	ldr	r3, [sp, #12]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	429d      	cmp	r5, r3
 8006f3e:	daf3      	bge.n	8006f28 <_printf_i+0x1ec>
 8006f40:	4640      	mov	r0, r8
 8006f42:	4649      	mov	r1, r9
 8006f44:	f104 0219 	add.w	r2, r4, #25
 8006f48:	2301      	movs	r3, #1
 8006f4a:	47d0      	blx	sl
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	d0de      	beq.n	8006f0e <_printf_i+0x1d2>
 8006f50:	3501      	adds	r5, #1
 8006f52:	e7f0      	b.n	8006f36 <_printf_i+0x1fa>
 8006f54:	b004      	add	sp, #16
 8006f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f5a:	bf00      	nop
 8006f5c:	080077c1 	stmdaeq	r0, {r0, r6, r7, r8, r9, sl, ip, sp, lr}
 8006f60:	080077d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, ip, sp, lr}

08006f64 <_vsiprintf_r>:
 8006f64:	b510      	push	{r4, lr}
 8006f66:	b09a      	sub	sp, #104	; 0x68
 8006f68:	9100      	str	r1, [sp, #0]
 8006f6a:	9104      	str	r1, [sp, #16]
 8006f6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f70:	9102      	str	r1, [sp, #8]
 8006f72:	9105      	str	r1, [sp, #20]
 8006f74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006f78:	f8ad 100e 	strh.w	r1, [sp, #14]
 8006f7c:	f44f 7402 	mov.w	r4, #520	; 0x208
 8006f80:	4669      	mov	r1, sp
 8006f82:	f8ad 400c 	strh.w	r4, [sp, #12]
 8006f86:	f7ff fd7b 	bl	8006a80 <_svfiprintf_r>
 8006f8a:	9b00      	ldr	r3, [sp, #0]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	701a      	strb	r2, [r3, #0]
 8006f90:	b01a      	add	sp, #104	; 0x68
 8006f92:	bd10      	pop	{r4, pc}

08006f94 <vsiprintf>:
 8006f94:	b530      	push	{r4, r5, lr}
 8006f96:	4613      	mov	r3, r2
 8006f98:	4a04      	ldr	r2, [pc, #16]	; (8006fac <vsiprintf+0x18>)
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	6810      	ldr	r0, [r2, #0]
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	4622      	mov	r2, r4
 8006fa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fa8:	f7ff bfdc 	b.w	8006f64 <_vsiprintf_r>
 8006fac:	2000046c 	andcs	r0, r0, ip, ror #8

08006fb0 <memchr>:
 8006fb0:	b510      	push	{r4, lr}
 8006fb2:	b2c9      	uxtb	r1, r1
 8006fb4:	4402      	add	r2, r0
 8006fb6:	4290      	cmp	r0, r2
 8006fb8:	4603      	mov	r3, r0
 8006fba:	d005      	beq.n	8006fc8 <memchr+0x18>
 8006fbc:	781c      	ldrb	r4, [r3, #0]
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	428c      	cmp	r4, r1
 8006fc2:	d1f8      	bne.n	8006fb6 <memchr+0x6>
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	bd10      	pop	{r4, pc}
 8006fc8:	2000      	movs	r0, #0
 8006fca:	bd10      	pop	{r4, pc}

08006fcc <memmove>:
 8006fcc:	4281      	cmp	r1, r0
 8006fce:	b570      	push	{r4, r5, r6, lr}
 8006fd0:	d301      	bcc.n	8006fd6 <memmove+0xa>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	e00e      	b.n	8006ff4 <memmove+0x28>
 8006fd6:	188c      	adds	r4, r1, r2
 8006fd8:	42a0      	cmp	r0, r4
 8006fda:	d2fa      	bcs.n	8006fd2 <memmove+0x6>
 8006fdc:	1885      	adds	r5, r0, r2
 8006fde:	4613      	mov	r3, r2
 8006fe0:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006fe4:	d305      	bcc.n	8006ff2 <memmove+0x26>
 8006fe6:	4251      	negs	r1, r2
 8006fe8:	1866      	adds	r6, r4, r1
 8006fea:	5cf6      	ldrb	r6, [r6, r3]
 8006fec:	4429      	add	r1, r5
 8006fee:	54ce      	strb	r6, [r1, r3]
 8006ff0:	e7f6      	b.n	8006fe0 <memmove+0x14>
 8006ff2:	bd70      	pop	{r4, r5, r6, pc}
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d003      	beq.n	8007000 <memmove+0x34>
 8006ff8:	5ccc      	ldrb	r4, [r1, r3]
 8006ffa:	54c4      	strb	r4, [r0, r3]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	e7f9      	b.n	8006ff4 <memmove+0x28>
 8007000:	bd70      	pop	{r4, r5, r6, pc}
	...

08007004 <_free_r>:
 8007004:	b530      	push	{r4, r5, lr}
 8007006:	2900      	cmp	r1, #0
 8007008:	d03c      	beq.n	8007084 <_free_r+0x80>
 800700a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800700e:	1f0b      	subs	r3, r1, #4
 8007010:	491d      	ldr	r1, [pc, #116]	; (8007088 <_free_r+0x84>)
 8007012:	2a00      	cmp	r2, #0
 8007014:	bfb8      	it	lt
 8007016:	189b      	addlt	r3, r3, r2
 8007018:	680a      	ldr	r2, [r1, #0]
 800701a:	460c      	mov	r4, r1
 800701c:	b912      	cbnz	r2, 8007024 <_free_r+0x20>
 800701e:	605a      	str	r2, [r3, #4]
 8007020:	600b      	str	r3, [r1, #0]
 8007022:	bd30      	pop	{r4, r5, pc}
 8007024:	4293      	cmp	r3, r2
 8007026:	d20d      	bcs.n	8007044 <_free_r+0x40>
 8007028:	6819      	ldr	r1, [r3, #0]
 800702a:	1858      	adds	r0, r3, r1
 800702c:	4290      	cmp	r0, r2
 800702e:	d103      	bne.n	8007038 <_free_r+0x34>
 8007030:	585a      	ldr	r2, [r3, r1]
 8007032:	4411      	add	r1, r2
 8007034:	6842      	ldr	r2, [r0, #4]
 8007036:	6019      	str	r1, [r3, #0]
 8007038:	605a      	str	r2, [r3, #4]
 800703a:	6023      	str	r3, [r4, #0]
 800703c:	bd30      	pop	{r4, r5, pc}
 800703e:	4299      	cmp	r1, r3
 8007040:	d803      	bhi.n	800704a <_free_r+0x46>
 8007042:	460a      	mov	r2, r1
 8007044:	6851      	ldr	r1, [r2, #4]
 8007046:	2900      	cmp	r1, #0
 8007048:	d1f9      	bne.n	800703e <_free_r+0x3a>
 800704a:	6814      	ldr	r4, [r2, #0]
 800704c:	1915      	adds	r5, r2, r4
 800704e:	429d      	cmp	r5, r3
 8007050:	d10a      	bne.n	8007068 <_free_r+0x64>
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4423      	add	r3, r4
 8007056:	18d0      	adds	r0, r2, r3
 8007058:	4288      	cmp	r0, r1
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	d112      	bne.n	8007084 <_free_r+0x80>
 800705e:	6808      	ldr	r0, [r1, #0]
 8007060:	4403      	add	r3, r0
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	684b      	ldr	r3, [r1, #4]
 8007066:	e00c      	b.n	8007082 <_free_r+0x7e>
 8007068:	d902      	bls.n	8007070 <_free_r+0x6c>
 800706a:	230c      	movs	r3, #12
 800706c:	6003      	str	r3, [r0, #0]
 800706e:	bd30      	pop	{r4, r5, pc}
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	181c      	adds	r4, r3, r0
 8007074:	428c      	cmp	r4, r1
 8007076:	d103      	bne.n	8007080 <_free_r+0x7c>
 8007078:	680c      	ldr	r4, [r1, #0]
 800707a:	6849      	ldr	r1, [r1, #4]
 800707c:	4420      	add	r0, r4
 800707e:	6018      	str	r0, [r3, #0]
 8007080:	6059      	str	r1, [r3, #4]
 8007082:	6053      	str	r3, [r2, #4]
 8007084:	bd30      	pop	{r4, r5, pc}
 8007086:	bf00      	nop
 8007088:	20000dc8 	andcs	r0, r0, r8, asr #27

0800708c <_malloc_r>:
 800708c:	b570      	push	{r4, r5, r6, lr}
 800708e:	1ccd      	adds	r5, r1, #3
 8007090:	f025 0503 	bic.w	r5, r5, #3
 8007094:	3508      	adds	r5, #8
 8007096:	2d0c      	cmp	r5, #12
 8007098:	bf38      	it	cc
 800709a:	250c      	movcc	r5, #12
 800709c:	2d00      	cmp	r5, #0
 800709e:	4606      	mov	r6, r0
 80070a0:	db3f      	blt.n	8007122 <_malloc_r+0x96>
 80070a2:	428d      	cmp	r5, r1
 80070a4:	d33d      	bcc.n	8007122 <_malloc_r+0x96>
 80070a6:	4b21      	ldr	r3, [pc, #132]	; (800712c <_malloc_r+0xa0>)
 80070a8:	681c      	ldr	r4, [r3, #0]
 80070aa:	4618      	mov	r0, r3
 80070ac:	4621      	mov	r1, r4
 80070ae:	b1a1      	cbz	r1, 80070da <_malloc_r+0x4e>
 80070b0:	680b      	ldr	r3, [r1, #0]
 80070b2:	1b5b      	subs	r3, r3, r5
 80070b4:	d40e      	bmi.n	80070d4 <_malloc_r+0x48>
 80070b6:	2b0b      	cmp	r3, #11
 80070b8:	d903      	bls.n	80070c2 <_malloc_r+0x36>
 80070ba:	600b      	str	r3, [r1, #0]
 80070bc:	18cc      	adds	r4, r1, r3
 80070be:	50cd      	str	r5, [r1, r3]
 80070c0:	e01f      	b.n	8007102 <_malloc_r+0x76>
 80070c2:	428c      	cmp	r4, r1
 80070c4:	d102      	bne.n	80070cc <_malloc_r+0x40>
 80070c6:	6862      	ldr	r2, [r4, #4]
 80070c8:	6002      	str	r2, [r0, #0]
 80070ca:	e01a      	b.n	8007102 <_malloc_r+0x76>
 80070cc:	684b      	ldr	r3, [r1, #4]
 80070ce:	6063      	str	r3, [r4, #4]
 80070d0:	460c      	mov	r4, r1
 80070d2:	e016      	b.n	8007102 <_malloc_r+0x76>
 80070d4:	460c      	mov	r4, r1
 80070d6:	6849      	ldr	r1, [r1, #4]
 80070d8:	e7e9      	b.n	80070ae <_malloc_r+0x22>
 80070da:	4c15      	ldr	r4, [pc, #84]	; (8007130 <_malloc_r+0xa4>)
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	b91b      	cbnz	r3, 80070e8 <_malloc_r+0x5c>
 80070e0:	4630      	mov	r0, r6
 80070e2:	f000 f84d 	bl	8007180 <_sbrk_r>
 80070e6:	6020      	str	r0, [r4, #0]
 80070e8:	4629      	mov	r1, r5
 80070ea:	4630      	mov	r0, r6
 80070ec:	f000 f848 	bl	8007180 <_sbrk_r>
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	4601      	mov	r1, r0
 80070f4:	d015      	beq.n	8007122 <_malloc_r+0x96>
 80070f6:	1cc4      	adds	r4, r0, #3
 80070f8:	f024 0403 	bic.w	r4, r4, #3
 80070fc:	4284      	cmp	r4, r0
 80070fe:	d10a      	bne.n	8007116 <_malloc_r+0x8a>
 8007100:	6025      	str	r5, [r4, #0]
 8007102:	f104 000b 	add.w	r0, r4, #11
 8007106:	1d23      	adds	r3, r4, #4
 8007108:	f020 0007 	bic.w	r0, r0, #7
 800710c:	1ac3      	subs	r3, r0, r3
 800710e:	d00b      	beq.n	8007128 <_malloc_r+0x9c>
 8007110:	425a      	negs	r2, r3
 8007112:	50e2      	str	r2, [r4, r3]
 8007114:	bd70      	pop	{r4, r5, r6, pc}
 8007116:	4630      	mov	r0, r6
 8007118:	1a61      	subs	r1, r4, r1
 800711a:	f000 f831 	bl	8007180 <_sbrk_r>
 800711e:	3001      	adds	r0, #1
 8007120:	d1ee      	bne.n	8007100 <_malloc_r+0x74>
 8007122:	230c      	movs	r3, #12
 8007124:	6033      	str	r3, [r6, #0]
 8007126:	2000      	movs	r0, #0
 8007128:	bd70      	pop	{r4, r5, r6, pc}
 800712a:	bf00      	nop
 800712c:	20000dc8 	andcs	r0, r0, r8, asr #27
 8007130:	20000dc4 	andcs	r0, r0, r4, asr #27

08007134 <_realloc_r>:
 8007134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007136:	4606      	mov	r6, r0
 8007138:	4614      	mov	r4, r2
 800713a:	460d      	mov	r5, r1
 800713c:	b921      	cbnz	r1, 8007148 <_realloc_r+0x14>
 800713e:	4611      	mov	r1, r2
 8007140:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007144:	f7ff bfa2 	b.w	800708c <_malloc_r>
 8007148:	b91a      	cbnz	r2, 8007152 <_realloc_r+0x1e>
 800714a:	f7ff ff5b 	bl	8007004 <_free_r>
 800714e:	4620      	mov	r0, r4
 8007150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007152:	f000 f82d 	bl	80071b0 <_malloc_usable_size_r>
 8007156:	42a0      	cmp	r0, r4
 8007158:	d20e      	bcs.n	8007178 <_realloc_r+0x44>
 800715a:	4630      	mov	r0, r6
 800715c:	4621      	mov	r1, r4
 800715e:	f7ff ff95 	bl	800708c <_malloc_r>
 8007162:	4607      	mov	r7, r0
 8007164:	b150      	cbz	r0, 800717c <_realloc_r+0x48>
 8007166:	4629      	mov	r1, r5
 8007168:	4622      	mov	r2, r4
 800716a:	f7ff fbda 	bl	8006922 <memcpy>
 800716e:	4630      	mov	r0, r6
 8007170:	4629      	mov	r1, r5
 8007172:	f7ff ff47 	bl	8007004 <_free_r>
 8007176:	e001      	b.n	800717c <_realloc_r+0x48>
 8007178:	4628      	mov	r0, r5
 800717a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800717c:	4638      	mov	r0, r7
 800717e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007180 <_sbrk_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	4c06      	ldr	r4, [pc, #24]	; (800719c <_sbrk_r+0x1c>)
 8007184:	2300      	movs	r3, #0
 8007186:	4605      	mov	r5, r0
 8007188:	4608      	mov	r0, r1
 800718a:	6023      	str	r3, [r4, #0]
 800718c:	f000 f81a 	bl	80071c4 <_sbrk>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	d102      	bne.n	800719a <_sbrk_r+0x1a>
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	b103      	cbz	r3, 800719a <_sbrk_r+0x1a>
 8007198:	602b      	str	r3, [r5, #0]
 800719a:	bd38      	pop	{r3, r4, r5, pc}
 800719c:	2000059c 	mulcs	r0, ip, r5

080071a0 <strlen>:
 80071a0:	4603      	mov	r3, r0
 80071a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071a6:	2a00      	cmp	r2, #0
 80071a8:	d1fb      	bne.n	80071a2 <strlen+0x2>
 80071aa:	1a18      	subs	r0, r3, r0
 80071ac:	3801      	subs	r0, #1
 80071ae:	4770      	bx	lr

080071b0 <_malloc_usable_size_r>:
 80071b0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80071b4:	2800      	cmp	r0, #0
 80071b6:	da02      	bge.n	80071be <_malloc_usable_size_r+0xe>
 80071b8:	3904      	subs	r1, #4
 80071ba:	580b      	ldr	r3, [r1, r0]
 80071bc:	4418      	add	r0, r3
 80071be:	3804      	subs	r0, #4
 80071c0:	4770      	bx	lr
	...

080071c4 <_sbrk>:
 80071c4:	4a09      	ldr	r2, [pc, #36]	; (80071ec <_sbrk+0x28>)
 80071c6:	6813      	ldr	r3, [r2, #0]
 80071c8:	b163      	cbz	r3, 80071e4 <_sbrk+0x20>
 80071ca:	4418      	add	r0, r3
 80071cc:	4669      	mov	r1, sp
 80071ce:	4288      	cmp	r0, r1
 80071d0:	d802      	bhi.n	80071d8 <_sbrk+0x14>
 80071d2:	6010      	str	r0, [r2, #0]
 80071d4:	4618      	mov	r0, r3
 80071d6:	4770      	bx	lr
 80071d8:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <_sbrk+0x2c>)
 80071da:	220c      	movs	r2, #12
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	f04f 30ff 	mov.w	r0, #4294967295
 80071e2:	4770      	bx	lr
 80071e4:	4b03      	ldr	r3, [pc, #12]	; (80071f4 <_sbrk+0x30>)
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	e7ef      	b.n	80071ca <_sbrk+0x6>
 80071ea:	bf00      	nop
 80071ec:	20000dcc 	andcs	r0, r0, ip, asr #27
 80071f0:	2000059c 	mulcs	r0, ip, r5
 80071f4:	200005a0 	andcs	r0, r0, r0, lsr #11
 80071f8:	cefaedfe 	mrcgt	13, 7, lr, cr10, cr14, {7}
 80071fc:	5eb947f3 	mrcpl	7, 5, r4, cr9, cr3, {7}
 8007200:	1362035f 	cmnne	r2, #2080374785	; 0x7c000001
 8007204:	737288f3 	cmnvc	r2, #15925248	; 0xf30000
 8007208:	7391cfea 	orrsvc	ip, r1, #936	; 0x3a8
 800720c:	6872da35 	ldmdavs	r2!, {r0, r2, r4, r5, r9, fp, ip, lr, pc}^
 8007210:	9098f6ae 	addsls	pc, r8, lr, lsr #13
 8007214:	eaff8751 	b	7fe8f60 <__Stack_Size+0x7fe8760>
 8007218:	325bb5d6 	subscc	fp, fp, #897581056	; 0x35800000
 800721c:	5eb947f3 	mrcpl	7, 5, r4, cr9, cr3, {7}
 8007220:	1362035f 	cmnne	r2, #2080374785	; 0x7c000001
 8007224:	737288f3 	cmnvc	r2, #15925248	; 0xf30000
 8007228:	7391cfea 	orrsvc	ip, r1, #936	; 0x3a8
 800722c:	6872da35 	ldmdavs	r2!, {r0, r2, r4, r5, r9, fp, ip, lr, pc}^
 8007230:	9098f6ae 	addsls	pc, r8, lr, lsr #13
 8007234:	eaff8751 	b	7fe8f80 <__Stack_Size+0x7fe8780>
 8007238:	325bb5d6 	subscc	fp, fp, #897581056	; 0x35800000
 800723c:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 8007240:	00000000 	andeq	r0, r0, r0
 8007244:	6f6f420a 	svcvs	0x006f420a
 8007248:	616f6c74 	smcvs	63172	; 0xf6c4
 800724c:	20726564 	rsbscs	r6, r2, r4, ror #10
 8007250:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 8007254:	0a2e2e2e 	beq	8b92b14 <_etext+0xb8b32c>
 8007258:	00000000 	andeq	r0, r0, r0
 800725c:	63656863 	cmnvs	r5, #6488064	; 0x630000
 8007260:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
 8007264:	61686320 	cmnvs	r8, r0, lsr #6
 8007268:	2e2e6e69 	cdpcs	14, 2, cr6, cr14, cr9, {3}
 800726c:	00000a2e 	andeq	r0, r0, lr, lsr #20
 8007270:	746f6f42 	strbtvc	r6, [pc], #-3906	; 8007278 <_sbrk+0xb4>
 8007274:	0a4b4f20 	beq	92daefc <_etext+0x12d3714>
 8007278:	00000000 	andeq	r0, r0, r0
 800727c:	6d726946 	ldclvs	9, cr6, [r2, #-280]!	; 0xfffffee8
 8007280:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
 8007284:	73696d20 	cmnvc	r9, #32, 26	; 0x800
 8007288:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
 800728c:	202e2e2e 	eorcs	r2, lr, lr, lsr #28
 8007290:	74696177 	strbtvc	r6, [r9], #-375	; 0x177
 8007294:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8007298:	44206e69 	strtmi	r6, [r0], #-3689	; 0xe69
 800729c:	000a5546 	andeq	r5, sl, r6, asr #10
 80072a0:	6e676953 	mcrvs	9, 3, r6, cr7, cr3, {2}
 80072a4:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
 80072a8:	6e752065 	cdpvs	0, 7, cr2, cr5, cr5, {3}
 80072ac:	69726576 	ldmdbvs	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
 80072b0:	64656966 	strbtvs	r6, [r5], #-2406	; 0x966
 80072b4:	202e2e2e 	eorcs	r2, lr, lr, lsr #28
 80072b8:	74696177 	strbtvc	r6, [r9], #-375	; 0x177
 80072bc:	20676e69 	rsbcs	r6, r7, r9, ror #28
 80072c0:	44206e69 	strtmi	r6, [r0], #-3689	; 0xe69
 80072c4:	000a5546 	andeq	r5, sl, r6, asr #10
 80072c8:	68736148 	ldmdavs	r3!, {r3, r6, r8, sp, lr}^
 80072cc:	6d6f6320 	stclvs	3, cr6, [pc, #-128]!	; 8007254 <_sbrk+0x90>
 80072d0:	69726170 	ldmdbvs	r2!, {r4, r5, r6, r8, sp, lr}^
 80072d4:	206e6f73 	rsbcs	r6, lr, r3, ror pc
 80072d8:	65766e75 	ldrbvs	r6, [r6, #-3701]!	; 0xe75
 80072dc:	69666972 	stmdbvs	r6!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 80072e0:	2e2e6465 	cdpcs	4, 2, cr6, cr14, cr5, {3}
 80072e4:	6177202e 	cmnvs	r7, lr, lsr #32
 80072e8:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
 80072ec:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
 80072f0:	55464420 	strbpl	r4, [r6, #-1056]	; 0x420
 80072f4:	0000000a 	andeq	r0, r0, sl
 80072f8:	20554644 	subscs	r4, r5, r4, asr #12
 80072fc:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
 8007300:	64656873 	strbtvs	r6, [r5], #-2163	; 0x873
 8007304:	6c707520 	cfldr64vs	mvdx7, [r0], #-128	; 0xffffff80
 8007308:	0a64616f 	beq	991f8cc <_etext+0x19180e4>
 800730c:	00000000 	andeq	r0, r0, r0
 8007310:	706d754a 	rsbvc	r7, sp, sl, asr #10
 8007314:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8007318:	4f206f74 	svcmi	0x00206f74
 800731c:	000a2e53 	andeq	r2, sl, r3, asr lr
 8007320:	58255825 	stmdapl	r5!, {r0, r2, r5, fp, ip, lr}
 8007324:	58255825 	stmdapl	r5!, {r0, r2, r5, fp, ip, lr}
 8007328:	00000000 	andeq	r0, r0, r0
 800732c:	58255825 	stmdapl	r5!, {r0, r2, r5, fp, ip, lr}
 8007330:	58255825 	stmdapl	r5!, {r0, r2, r5, fp, ip, lr}
 8007334:	0000000a 	andeq	r0, r0, sl
 8007338:	6f6c7055 	svcvs	0x006c7055
 800733c:	64656461 	strbtvs	r6, [r5], #-1121	; 0x461
 8007340:	67697320 	strbvs	r7, [r9, -r0, lsr #6]!
 8007344:	7574616e 	ldrbvc	r6, [r4, #-366]!	; 0x16e
 8007348:	76206572 			; <UNDEFINED> instruction: 0x76206572
 800734c:	66697265 	strbtvs	r7, [r9], -r5, ror #4
 8007350:	21646569 	cmncs	r4, r9, ror #10
 8007354:	0000000a 	andeq	r0, r0, sl
 8007358:	6e676953 	mcrvs	9, 3, r6, cr7, cr3, {2}
 800735c:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
 8007360:	6e752065 	cdpvs	0, 7, cr2, cr5, cr5, {3}
 8007364:	69726576 	ldmdbvs	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
 8007368:	64656966 	strbtvs	r6, [r5], #-2406	; 0x966
 800736c:	00000a21 	andeq	r0, r0, r1, lsr #20

08007370 <ed25519_k>:
 8007370:	26b2f159 	ssatcs	pc, #19, r9, asr #2	; <UNPREDICTABLE>
 8007374:	ebd69b94 	bl	75ae1cc <__Stack_Size+0x75ad9cc>
 8007378:	8283b156 	addhi	fp, r3, #-2147483627	; 0x80000015
 800737c:	00e0149a 	smlaleq	r1, r0, sl, r4
 8007380:	eef3d130 	mrc	1, 7, sp, cr3, cr0, {1}
 8007384:	198e80f2 	stmibne	lr, {r1, r4, r5, r6, r7, pc}
 8007388:	56dffce7 	ldrbpl	pc, [pc], r7, ror #25	; <UNPREDICTABLE>
 800738c:	2406d9dc 	strcs	sp, [r6], #-2524	; 0x9dc

08007390 <ed25519_neutral>:
	...
 80073b0:	00000001 	andeq	r0, r0, r1
	...
 80073f0:	00000001 	andeq	r0, r0, r1
	...

08007410 <ed25519_base>:
 8007410:	8f25d51a 	svchi	0x0025d51a
 8007414:	c9562d60 	ldmdbgt	r6, {r5, r6, r8, sl, fp, sp}^
 8007418:	9525a7b2 	strls	sl, [r5, #-1970]!	; 0x7b2
 800741c:	692cc760 	stmdbvs	ip!, {r5, r6, r8, r9, sl, lr, pc}
 8007420:	fdd6dc5c 	ldc2l	12, cr13, [r6, #368]	; 0x170
 8007424:	c0a4e231 	adcgt	lr, r4, r1, lsr r2
 8007428:	cd6e53fe 	stclgt	3, cr5, [lr, #-1016]!	; 0xfffffc08
 800742c:	216936d3 	ldrdcs	r3, [r9, #-99]!	; 0xffffff9d
 8007430:	66666658 			; <UNDEFINED> instruction: 0x66666658
 8007434:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 8007438:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 800743c:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 8007440:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 8007444:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 8007448:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 800744c:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 8007450:	a5b7dda3 	ldrge	sp, [r7, #3491]!	; 0xda3
 8007454:	6dde8ab3 	vldrvs	s17, [lr, #716]	; 0x2cc
 8007458:	775152f5 	smmlsrvc	r1, r5, r2, r5
 800745c:	20f09f80 	rscscs	r9, r0, r0, lsl #31
 8007460:	64abe37d 	strtvs	lr, [fp], #893	; 0x37d
 8007464:	66ea4e8e 	strbtvs	r4, [sl], lr, lsl #29
 8007468:	d78b7665 	strle	r7, [fp, r5, ror #12]
 800746c:	67875f0f 	strvs	r5, [r7, pc, lsl #30]
 8007470:	00000001 	andeq	r0, r0, r1
	...

08007490 <ed25519_d>:
 8007490:	135978a3 	cmpne	r9, #10682368	; 0xa30000
 8007494:	75eb4dca 	strbvc	r4, [fp, #3530]!	; 0xdca
 8007498:	4141d8ab 	smlaltbmi	sp, r1, fp, r8
 800749c:	00700a4d 	rsbseq	r0, r0, sp, asr #20
 80074a0:	7779e898 			; <UNDEFINED> instruction: 0x7779e898
 80074a4:	8cc74079 	stclhi	0, cr4, [r7], {121}	; 0x79
 80074a8:	2b6ffe73 	blcs	9c06e7c <_etext+0x1bff694>
 80074ac:	52036cee 	andpl	r6, r3, #60928	; 0xee00

080074b0 <ed25519_order>:
 80074b0:	5cf5d3ed 	ldclpl	3, cr13, [r5], #948	; 0x3b4
 80074b4:	5812631a 	ldmdapl	r2, {r1, r3, r4, r8, r9, sp, lr}
 80074b8:	a2f79cd6 	rscsge	r9, r7, #54784	; 0xd600
 80074bc:	14def9de 	ldrbne	pc, [lr], #2526	; 0x9de	; <UNPREDICTABLE>
	...
 80074cc:	10000000 	andne	r0, r0, r0

080074d0 <f25519_one>:
 80074d0:	00000001 	andeq	r0, r0, r1
	...

080074f0 <sha512_initial_state>:
 80074f0:	f3bcc908 	vtbl.8	d12, {d12-d13}, d8
 80074f4:	6a09e667 	bvs	8280e98 <_etext+0x2796b0>
 80074f8:	84caa73b 	strbhi	sl, [sl], #1851	; 0x73b
 80074fc:	bb67ae85 	bllt	99f2f18 <_etext+0x19eb730>
 8007500:	fe94f82b 	cdp2	8, 9, cr15, cr4, cr11, {1}
 8007504:	3c6ef372 	stclcc	3, cr15, [lr], #-456	; 0xfffffe38
 8007508:	5f1d36f1 	svcpl	0x001d36f1
 800750c:	a54ff53a 	strbge	pc, [pc, #-1338]	; 8006fda <memmove+0xe>	; <UNPREDICTABLE>
 8007510:	ade682d1 	sfmge	f0, 3, [r6, #836]!	; 0x344
 8007514:	510e527f 	tstpl	lr, pc, ror r2
 8007518:	2b3e6c1f 	blcs	8fa259c <_etext+0xf9adb4>
 800751c:	9b05688c 	blls	8161754 <_etext+0x159f6c>
 8007520:	fb41bd6b 	blx	9076ad6 <_etext+0x106f2ee>
 8007524:	1f83d9ab 	svcne	0x0083d9ab
 8007528:	137e2179 	cmnne	lr, #1073741854	; 0x4000001e
 800752c:	5be0cd19 	blpl	783a998 <__Stack_Size+0x783a198>

08007530 <round_k>:
 8007530:	d728ae22 	strle	sl, [r8, -r2, lsr #28]!
 8007534:	428a2f98 	addmi	r2, sl, #152, 30	; 0x260
 8007538:	23ef65cd 	mvncs	r6, #859832320	; 0x33400000
 800753c:	71374491 			; <UNDEFINED> instruction: 0x71374491
 8007540:	ec4d3b2f 	mcrr	11, 2, r3, sp, cr15
 8007544:	b5c0fbcf 	strblt	pc, [r0, #3023]	; 0xbcf	; <UNPREDICTABLE>
 8007548:	8189dbbc 			; <UNDEFINED> instruction: 0x8189dbbc
 800754c:	e9b5dba5 	ldmib	r5!, {r0, r2, r5, r7, r8, r9, fp, ip, lr, pc}
 8007550:	f348b538 	vqrshl.u8	d27, d24, d8
 8007554:	3956c25b 	ldmdbcc	r6, {r0, r1, r3, r4, r6, r9, lr, pc}^
 8007558:	b605d019 			; <UNDEFINED> instruction: 0xb605d019
 800755c:	59f111f1 	ldmibpl	r1!, {r0, r4, r5, r6, r7, r8, ip}^
 8007560:	af194f9b 	svcge	0x00194f9b
 8007564:	923f82a4 	eorsls	r8, pc, #164, 4	; 0x4000000a
 8007568:	da6d8118 	ble	9b679d0 <_etext+0x1b601e8>
 800756c:	ab1c5ed5 	blge	871f0c8 <_etext+0x7178e0>
 8007570:	a3030242 	movwge	r0, #12866	; 0x3242
 8007574:	d807aa98 	stmdale	r7, {r3, r4, r7, r9, fp, sp, pc}
 8007578:	45706fbe 	ldrbmi	r6, [r0, #-4030]!	; 0xfbe
 800757c:	12835b01 	addne	r5, r3, #1024	; 0x400
 8007580:	4ee4b28c 	cdpmi	2, 14, cr11, cr4, cr12, {4}
 8007584:	243185be 	ldrtcs	r8, [r1], #-1470	; 0x5be
 8007588:	d5ffb4e2 	ldrble	fp, [pc, #1250]!	; 8007a72 <_etext+0x28a>
 800758c:	550c7dc3 	strpl	r7, [ip, #-3523]	; 0xdc3
 8007590:	f27b896f 	vmla.i<illegal width 64>	q12, <illegal reg q5.5>, <illegal reg q15.5>
 8007594:	72be5d74 	adcsvc	r5, lr, #116, 26	; 0x1d00
 8007598:	3b1696b1 	blcc	85ad064 <_etext+0x5a587c>
 800759c:	80deb1fe 	ldrshhi	fp, [lr], #30
 80075a0:	25c71235 	strbcs	r1, [r7, #565]	; 0x235
 80075a4:	9bdc06a7 	blls	7709048 <__Stack_Size+0x7708848>
 80075a8:	cf692694 	svcgt	0x00692694
 80075ac:	c19bf174 	orrsgt	pc, fp, r4, ror r1	; <UNPREDICTABLE>
 80075b0:	9ef14ad2 	mrcls	10, 7, r4, cr1, cr2, {6}
 80075b4:	e49b69c1 	ldr	r6, [fp], #2497	; 0x9c1
 80075b8:	384f25e3 	stmdacc	pc, {r0, r1, r5, r6, r7, r8, sl, sp}^	; <UNPREDICTABLE>
 80075bc:	efbe4786 	svc	0x00be4786
 80075c0:	8b8cd5b5 	blhi	633cc9c <__Stack_Size+0x633c49c>
 80075c4:	0fc19dc6 	svceq	0x00c19dc6
 80075c8:	77ac9c65 	strvc	r9, [ip, r5, ror #24]!
 80075cc:	240ca1cc 	strcs	sl, [ip], #-460	; 0x1cc
 80075d0:	592b0275 	stmdbpl	fp!, {r0, r2, r4, r5, r6, r9}
 80075d4:	2de92c6f 	stclcs	12, cr2, [r9, #444]!	; 0x1bc
 80075d8:	6ea6e483 	cdpvs	4, 10, cr14, cr6, cr3, {4}
 80075dc:	4a7484aa 	bmi	9d2888c <_etext+0x1d210a4>
 80075e0:	bd41fbd4 	vstrlt	d31, [r1, #-848]	; 0xfffffcb0
 80075e4:	5cb0a9dc 	ldcpl	9, cr10, [r0], #880	; 0x370
 80075e8:	831153b5 	tsthi	r1, #-738197502	; 0xd4000002
 80075ec:	76f988da 	usatvc	r8, #25, sl, asr #17
 80075f0:	ee66dfab 	cdp	15, 6, cr13, cr6, cr11, {5}
 80075f4:	983e5152 	ldmdals	lr!, {r1, r4, r6, r8, ip, lr}
 80075f8:	2db43210 	lfmcs	f3, 4, [r4, #64]!	; 0x40
 80075fc:	a831c66d 	ldmdage	r1!, {r0, r2, r3, r5, r6, r9, sl, lr, pc}
 8007600:	98fb213f 	ldmls	fp!, {r0, r1, r2, r3, r4, r5, r8, sp}^
 8007604:	b00327c8 	andlt	r2, r3, r8, asr #15
 8007608:	beef0ee4 	cdplt	14, 14, cr0, cr15, cr4, {7}
 800760c:	bf597fc7 	svclt	0x00597fc7
 8007610:	3da88fc2 	stccc	15, cr8, [r8, #776]!	; 0x308
 8007614:	c6e00bf3 			; <UNDEFINED> instruction: 0xc6e00bf3
 8007618:	930aa725 	movwls	sl, #42789	; 0xa725
 800761c:	d5a79147 	strle	r9, [r7, #327]!	; 0x147
 8007620:	e003826f 	and	r8, r3, pc, ror #4
 8007624:	06ca6351 			; <UNDEFINED> instruction: 0x06ca6351
 8007628:	0a0e6e70 	beq	83a2ff0 <_etext+0x39b808>
 800762c:	14292967 	strtne	r2, [r9], #-2407	; 0x967
 8007630:	46d22ffc 			; <UNDEFINED> instruction: 0x46d22ffc
 8007634:	27b70a85 	ldrcs	r0, [r7, r5, lsl #21]!
 8007638:	5c26c926 	stcpl	9, cr12, [r6], #-152	; 0xffffff68
 800763c:	2e1b2138 	mrccs	1, 0, r2, cr11, cr8, {1}
 8007640:	5ac42aed 	bpl	71121fc <__Stack_Size+0x71119fc>
 8007644:	4d2c6dfc 	stcmi	13, cr6, [ip, #-1008]!	; 0xfffffc10
 8007648:	9d95b3df 	ldcls	3, cr11, [r5, #892]	; 0x37c
 800764c:	53380d13 	teqpl	r8, #1216	; 0x4c0
 8007650:	8baf63de 	blhi	6be05d0 <__Stack_Size+0x6bdfdd0>
 8007654:	650a7354 	strvs	r7, [sl, #-852]	; 0x354
 8007658:	3c77b2a8 	lfmcc	f3, 3, [r7], #-672	; 0xfffffd60
 800765c:	766a0abb 			; <UNDEFINED> instruction: 0x766a0abb
 8007660:	47edaee6 	strbmi	sl, [sp, r6, ror #29]!
 8007664:	81c2c92e 	bichi	ip, r2, lr, lsr #18
 8007668:	1482353b 	strne	r3, [r2], #1339	; 0x53b
 800766c:	92722c85 	rsbsls	r2, r2, #34048	; 0x8500
 8007670:	4cf10364 	ldclmi	3, cr0, [r1], #400	; 0x190
 8007674:	a2bfe8a1 	adcsge	lr, pc, #10551296	; 0xa10000
 8007678:	bc423001 	mcrrlt	0, 0, r3, r2, cr1
 800767c:	a81a664b 	ldmdage	sl, {r0, r1, r3, r6, r9, sl, sp, lr}
 8007680:	d0f89791 	smlalsle	r9, r8, r1, r7
 8007684:	c24b8b70 	subgt	r8, fp, #112, 22	; 0x1c000
 8007688:	0654be30 			; <UNDEFINED> instruction: 0x0654be30
 800768c:	c76c51a3 	strbgt	r5, [ip, -r3, lsr #3]!
 8007690:	d6ef5218 	usatle	r5, #15, r8, lsl #4
 8007694:	d192e819 	orrsle	lr, r2, r9, lsl r8
 8007698:	5565a910 	strbpl	sl, [r5, #-2320]!	; 0x910
 800769c:	d6990624 	ldrle	r0, [r9], r4, lsr #12
 80076a0:	5771202a 	ldrbpl	r2, [r1, -sl, lsr #32]!
 80076a4:	f40e3585 	vst3.32	{d3,d5,d7}, [lr], r5
 80076a8:	32bbd1b8 	adcscc	sp, fp, #184, 2	; 0x2e
 80076ac:	106aa070 	rsbne	sl, sl, r0, ror r0
 80076b0:	b8d2d0c8 	ldmlt	r2, {r3, r6, r7, ip, lr, pc}^
 80076b4:	19a4c116 	stmibne	r4!, {r1, r2, r4, r8, lr, pc}
 80076b8:	5141ab53 	cmppl	r1, r3, asr fp
 80076bc:	1e376c08 	cdpne	12, 3, cr6, cr7, cr8, {0}
 80076c0:	df8eeb99 	svcle	0x008eeb99
 80076c4:	2748774c 	strbcs	r7, [r8, -ip, asr #14]
 80076c8:	e19b48a8 	orrs	r4, fp, r8, lsr #17
 80076cc:	34b0bcb5 	ldrtcc	fp, [r0], #3253	; 0xcb5
 80076d0:	c5c95a63 	strbgt	r5, [r9, #2659]	; 0xa63
 80076d4:	391c0cb3 	ldmdbcc	ip, {r0, r1, r4, r5, r7, sl, fp}
 80076d8:	e3418acb 	movt	r8, #6859	; 0x1acb
 80076dc:	4ed8aa4a 	vfnmami.f32	s21, s16, s20
 80076e0:	7763e373 			; <UNDEFINED> instruction: 0x7763e373
 80076e4:	5b9cca4f 	blpl	673a028 <__Stack_Size+0x6739828>
 80076e8:	d6b2b8a3 	ldrtle	fp, [r2], r3, lsr #17
 80076ec:	682e6ff3 	stmdavs	lr!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 80076f0:	5defb2fc 	sfmpl	f3, 3, [pc, #1008]!	; 8007ae8 <_etext+0x300>
 80076f4:	748f82ee 	strvc	r8, [pc], #750	; 80076fc <round_k+0x1cc>
 80076f8:	43172f60 	tstmi	r7, #96, 30	; 0x180
 80076fc:	78a5636f 	stmiavc	r5!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}
 8007700:	a1f0ab72 	mvnsge	sl, r2, ror fp
 8007704:	84c87814 	strbhi	r7, [r8], #2068	; 0x814
 8007708:	1a6439ec 	bne	9915ec0 <_etext+0x190e6d8>
 800770c:	8cc70208 	sfmhi	f0, 2, [r7], {8}
 8007710:	23631e28 	cmncs	r3, #40, 28	; 0x280
 8007714:	90befffa 	ldrshtls	pc, [lr], sl	; <UNPREDICTABLE>
 8007718:	de82bde9 	cdple	13, 8, cr11, cr2, cr9, {7}
 800771c:	a4506ceb 	ldrbge	r6, [r0], #-3307	; 0xceb
 8007720:	b2c67915 	sbclt	r7, r6, #344064	; 0x54000
 8007724:	bef9a3f7 	mrclt	3, 7, sl, cr9, cr7, {7}
 8007728:	e372532b 	cmn	r2, #-1409286144	; 0xac000000
 800772c:	c67178f2 			; <UNDEFINED> instruction: 0xc67178f2
 8007730:	ea26619c 	b	899fda8 <_etext+0x9985c0>
 8007734:	ca273ece 	bgt	89d7274 <_etext+0x9cfa8c>
 8007738:	21c0c207 	biccs	ip, r0, r7, lsl #4
 800773c:	d186b8c7 	orrle	fp, r6, r7, asr #17
 8007740:	cde0eb1e 	stclgt	11, cr14, [r0, #120]!	; 0x78
 8007744:	eada7dd6 	b	76a6ea4 <__Stack_Size+0x76a66a4>
 8007748:	ee6ed178 	mcr	1, 3, sp, cr14, cr8, {3}
 800774c:	f57d4f7f 			; <UNDEFINED> instruction: 0xf57d4f7f
 8007750:	72176fba 	andsvc	r6, r7, #744	; 0x2e8
 8007754:	06f067aa 	ldrbteq	r6, [r0], sl, lsr #15
 8007758:	a2c898a6 	sbcge	r9, r8, #10878976	; 0xa60000
 800775c:	0a637dc5 	beq	98e6e78 <_etext+0x18df690>
 8007760:	bef90dae 	cdplt	13, 15, cr0, cr9, cr14, {5}
 8007764:	113f9804 	teqne	pc, r4, lsl #16
 8007768:	131c471b 	tstne	ip, #7077888	; 0x6c0000
 800776c:	1b710b35 	blne	9c4a448 <_etext+0x1c42c60>
 8007770:	23047d84 	movwcs	r7, #19844	; 0x4d84
 8007774:	28db77f5 	ldmcs	fp, {r0, r2, r4, r5, r6, r7, r8, r9, sl, ip, sp, lr}^
 8007778:	40c72493 	smullmi	r2, r7, r3, r4
 800777c:	32caab7b 	sbccc	sl, sl, #125952	; 0x1ec00
 8007780:	15c9bebc 	strbne	fp, [r9, #3772]	; 0xebc
 8007784:	3c9ebe0a 	ldccc	14, cr11, [lr], {10}
 8007788:	9c100d4c 	ldcls	13, cr0, [r0], {76}	; 0x4c
 800778c:	431d67c4 	tstmi	sp, #196, 14	; 0x3100000
 8007790:	cb3e42b6 	blgt	8f98270 <_etext+0xf90a88>
 8007794:	4cc5d4be 	cfstrdmi	mvd13, [r5], {190}	; 0xbe
 8007798:	fc657e2a 	stc2l	14, cr7, [r5], #-168	; 0xffffff58
 800779c:	597f299c 	ldmdbpl	pc!, {r2, r3, r4, r7, r8, fp, sp}^	; <UNPREDICTABLE>
 80077a0:	3ad6faec 	bcc	75c6358 <__Stack_Size+0x75c5b58>
 80077a4:	5fcb6fab 	svcpl	0x00cb6fab
 80077a8:	4a475817 	bmi	91dd80c <_etext+0x11d6024>
 80077ac:	6c44198c 	mcrrvs	9, 8, r1, r4, cr12
 80077b0:	2b302d23 	blcs	8c12c44 <_etext+0xc0b45c>
 80077b4:	6c680020 	stclvs	0, cr0, [r8], #-128	; 0xffffff80
 80077b8:	6665004c 	strbtvs	r0, [r5], -ip, asr #32
 80077bc:	47464567 	strbmi	r4, [r6, -r7, ror #10]
 80077c0:	32313000 	eorscc	r3, r1, #0
 80077c4:	36353433 			; <UNDEFINED> instruction: 0x36353433
 80077c8:	41393837 	teqmi	r9, r7, lsr r8
 80077cc:	45444342 	strbmi	r4, [r4, #-834]	; 0x342
 80077d0:	31300046 	teqcc	r0, r6, asr #32
 80077d4:	35343332 	ldrcc	r3, [r4, #-818]!	; 0x332
 80077d8:	39383736 	ldmdbcc	r8!, {r1, r2, r4, r5, r8, r9, sl, ip, sp}
 80077dc:	64636261 	strbtvs	r6, [r3], #-609	; 0x261
 80077e0:	43006665 	movwmi	r6, #1637	; 0x665
 80077e4:	00000000 	andeq	r0, r0, r0

Disassembly of section .data:

20000000 <_sdata>:
20000000:	00000000 	andeq	r0, r0, r0
20000004:	04030201 	streq	r0, [r3], #-513	; 0x201
20000008:	04030201 	streq	r0, [r3], #-513	; 0x201
2000000c:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20000010 <ADCPrescTable>:
20000010:	08060402 	stmdaeq	r6, {r1, sl}

20000014 <Device_Property>:
20000014:	08000d79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sl, fp}
20000018:	08000bf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, fp}
2000001c:	08000b9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, fp}
20000020:	08000ba1 	stmdaeq	r0, {r0, r5, r7, r8, r9, fp}
20000024:	08000c99 	stmdaeq	r0, {r0, r3, r4, r7, sl, fp}
20000028:	08000d51 	stmdaeq	r0, {r0, r4, r6, r8, sl, fp}
2000002c:	08000ba5 	stmdaeq	r0, {r0, r2, r5, r7, r8, r9, fp}
20000030:	08000d0d 	stmdaeq	r0, {r0, r2, r3, r8, sl, fp}
20000034:	08000d19 	stmdaeq	r0, {r0, r3, r4, r8, sl, fp}
20000038:	08000d25 	stmdaeq	r0, {r0, r2, r5, r8, sl, fp}
2000003c:	08000d45 	stmdaeq	r0, {r0, r2, r6, r8, sl, fp}
20000040:	00000000 	andeq	r0, r0, r0
20000044:	00000040 	andeq	r0, r0, r0, asr #32

20000048 <pEpInt_IN>:
20000048:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
2000004c:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000050:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000054:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000058:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
2000005c:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000060:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}

20000064 <pEpInt_OUT>:
20000064:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000068:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
2000006c:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000070:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000074:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000078:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
2000007c:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}

20000080 <User_Standard_Requests>:
20000080:	08000bb1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, fp}
20000084:	08000bb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, fp}
20000088:	08000bcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, fp}
2000008c:	08000bd1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, fp}
20000090:	08000bd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, r9, fp}
20000094:	08000bd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, fp}
20000098:	08000bdd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, r9, fp}
2000009c:	08000be1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, fp}
200000a0:	08000be5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, fp}

200000a4 <Device_Table>:
200000a4:	00000101 	andeq	r0, r0, r1, lsl #2

200000a8 <usbStringDescriptor>:
200000a8:	200000fc 	strdcs	r0, [r0], -ip
200000ac:	00000004 	andeq	r0, r0, r4
200000b0:	2000014c 	andcs	r0, r0, ip, asr #2
200000b4:	00000012 	andeq	r0, r0, r2, lsl r0
200000b8:	20000168 	andcs	r0, r0, r8, ror #2
200000bc:	00000014 	andeq	r0, r0, r4, lsl r0
200000c0:	20000130 	andcs	r0, r0, r0, lsr r1
200000c4:	00000010 	andeq	r0, r0, r0, lsl r0
200000c8:	2000017c 	andcs	r0, r0, ip, ror r1
200000cc:	00000078 	andeq	r0, r0, r8, ror r0
200000d0:	200001f4 	strdcs	r0, [r0], -r4
200000d4:	00000064 	andeq	r0, r0, r4, rrx
200000d8:	20000258 	andcs	r0, r0, r8, asr r2
200000dc:	00000064 	andeq	r0, r0, r4, rrx

200000e0 <u8_usbDeviceDescriptorDFU>:
200000e0:	01000112 	tsteq	r0, r2, lsl r1
200000e4:	40000000 	andmi	r0, r0, r0
200000e8:	00031eaf 	andeq	r1, r3, pc, lsr #29
200000ec:	02010201 	andeq	r0, r1, #268435456	; 0x10000000
200000f0:	00000103 	andeq	r0, r0, r3, lsl #2

200000f4 <usbFunctionalDescriptor>:
200000f4:	20000140 	andcs	r0, r0, r0, asr #2
200000f8:	00000009 	andeq	r0, r0, r9

200000fc <u8_usbStringLangId>:
200000fc:	04090304 	streq	r0, [r9], #-772	; 0x304

20000100 <u8_usbConfigDescriptorDFU>:
20000100:	002d0209 	eoreq	r0, sp, r9, lsl #4
20000104:	80000101 	andhi	r0, r0, r1, lsl #2
20000108:	00040932 	andeq	r0, r4, r2, lsr r9
2000010c:	01fe0000 	mvnseq	r0, r0
20000110:	04090402 	streq	r0, [r9], #-1026	; 0x402
20000114:	fe000100 	cdp2	1, 0, cr0, cr0, cr0, {0}
20000118:	09050201 	stmdbeq	r5, {r0, r9}
2000011c:	00020004 	andeq	r0, r2, r4
20000120:	060201fe 			; <UNDEFINED> instruction: 0x060201fe
20000124:	ff032109 			; <UNDEFINED> instruction: 0xff032109
20000128:	10080000 	andne	r0, r8, r0
2000012c:	00000001 	andeq	r0, r0, r1

20000130 <u8_usbStringSerial>:
20000130:	00440310 	subeq	r0, r4, r0, lsl r3
20000134:	00560045 	subseq	r0, r6, r5, asr #32
20000138:	00300020 	eorseq	r0, r0, r0, lsr #32
2000013c:	00310030 	eorseq	r0, r1, r0, lsr r0

20000140 <u8_usbFunctionalDescriptor>:
20000140:	ff032109 			; <UNDEFINED> instruction: 0xff032109
20000144:	10080000 	andne	r0, r8, r0
20000148:	00000001 	andeq	r0, r0, r1

2000014c <u8_usbStringVendor>:
2000014c:	004c0312 	subeq	r0, ip, r2, lsl r3
20000150:	00610065 	rsbeq	r0, r1, r5, rrx
20000154:	004c0066 	subeq	r0, ip, r6, rrx
20000158:	00620061 	rsbeq	r0, r2, r1, rrx
2000015c:	00000073 	andeq	r0, r0, r3, ror r0

20000160 <usbDeviceDescriptorDFU>:
20000160:	200000e0 	andcs	r0, r0, r0, ror #1
20000164:	00000012 	andeq	r0, r0, r2, lsl r0

20000168 <u8_usbStringProduct>:
20000168:	004d0314 	subeq	r0, sp, r4, lsl r3
2000016c:	00700061 	rsbseq	r0, r0, r1, rrx
20000170:	0065006c 	rsbeq	r0, r5, ip, rrx
20000174:	00300020 	eorseq	r0, r0, r0, lsr #32
20000178:	00330030 	eorseq	r0, r3, r0, lsr r0

2000017c <u8_usbStringAlt0>:
2000017c:	00450378 	subeq	r0, r5, r8, ror r3
20000180:	0063006e 	rsbeq	r0, r3, lr, rrx
20000184:	0061006c 	rsbeq	r0, r1, ip, rrx
20000188:	00650076 	rsbeq	r0, r5, r6, ror r0
2000018c:	00440020 	subeq	r0, r4, r0, lsr #32
20000190:	00550046 	subseq	r0, r5, r6, asr #32
20000194:	00420020 	subeq	r0, r2, r0, lsr #32
20000198:	006f006f 	rsbeq	r0, pc, pc, rrx
2000019c:	006c0074 	rsbeq	r0, ip, r4, ror r0
200001a0:	0061006f 	rsbeq	r0, r1, pc, rrx
200001a4:	00650064 	rsbeq	r0, r5, r4, rrx
200001a8:	00200072 	eoreq	r0, r0, r2, ror r0
200001ac:	00450020 	subeq	r0, r5, r0, lsr #32
200001b0:	00520052 	subseq	r0, r2, r2, asr r0
200001b4:	0052004f 	subseq	r0, r2, pc, asr #32
200001b8:	0020002e 	eoreq	r0, r0, lr, lsr #32
200001bc:	00700055 	rsbseq	r0, r0, r5, asr r0
200001c0:	006f006c 	rsbeq	r0, pc, ip, rrx
200001c4:	00640061 	rsbeq	r0, r4, r1, rrx
200001c8:	00740020 	rsbseq	r0, r4, r0, lsr #32
200001cc:	0020006f 	eoreq	r0, r0, pc, rrx
200001d0:	00410052 	subeq	r0, r1, r2, asr r0
200001d4:	0020004d 	eoreq	r0, r0, sp, asr #32
200001d8:	006f006e 	rsbeq	r0, pc, lr, rrx
200001dc:	00200074 	eoreq	r0, r0, r4, ror r0
200001e0:	00750073 	rsbseq	r0, r5, r3, ror r0
200001e4:	00700070 	rsbseq	r0, r0, r0, ror r0
200001e8:	0072006f 	rsbseq	r0, r2, pc, rrx
200001ec:	00650074 	rsbeq	r0, r5, r4, ror r0
200001f0:	002e0064 	eoreq	r0, lr, r4, rrx

200001f4 <u8_usbStringAlt1>:
200001f4:	00450364 	subeq	r0, r5, r4, ror #6
200001f8:	0063006e 	rsbeq	r0, r3, lr, rrx
200001fc:	0061006c 	rsbeq	r0, r1, ip, rrx
20000200:	00650076 	rsbeq	r0, r5, r6, ror r0
20000204:	00440020 	subeq	r0, r4, r0, lsr #32
20000208:	00550046 	subseq	r0, r5, r6, asr #32
2000020c:	00420020 	subeq	r0, r2, r0, lsr #32
20000210:	006f006f 	rsbeq	r0, pc, pc, rrx
20000214:	006c0074 	rsbeq	r0, ip, r4, ror r0
20000218:	0061006f 	rsbeq	r0, r1, pc, rrx
2000021c:	00650064 	rsbeq	r0, r5, r4, rrx
20000220:	00200072 	eoreq	r0, r0, r2, ror r0
20000224:	00550020 	subseq	r0, r5, r0, lsr #32
20000228:	006c0070 	rsbeq	r0, ip, r0, ror r0
2000022c:	0061006f 	rsbeq	r0, r1, pc, rrx
20000230:	00200064 	eoreq	r0, r0, r4, rrx
20000234:	006f0074 	rsbeq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
20000238:	00460020 	subeq	r0, r6, r0, lsr #32
2000023c:	0061006c 	rsbeq	r0, r1, ip, rrx
20000240:	00680073 	rsbeq	r0, r8, r3, ror r0
20000244:	00300020 	eorseq	r0, r0, r0, lsr #32
20000248:	00380078 	eorseq	r0, r8, r8, ror r0
2000024c:	00300030 	eorseq	r0, r0, r0, lsr r0
20000250:	00300037 	eorseq	r0, r0, r7, lsr r0
20000254:	00300030 	eorseq	r0, r0, r0, lsr r0

20000258 <u8_usbStringAlt2>:
20000258:	00450364 	subeq	r0, r5, r4, ror #6
2000025c:	0063006e 	rsbeq	r0, r3, lr, rrx
20000260:	0061006c 	rsbeq	r0, r1, ip, rrx
20000264:	00650076 	rsbeq	r0, r5, r6, ror r0
20000268:	00440020 	subeq	r0, r4, r0, lsr #32
2000026c:	00550046 	subseq	r0, r5, r6, asr #32
20000270:	00420020 	subeq	r0, r2, r0, lsr #32
20000274:	006f006f 	rsbeq	r0, pc, pc, rrx
20000278:	006c0074 	rsbeq	r0, ip, r4, ror r0
2000027c:	0061006f 	rsbeq	r0, r1, pc, rrx
20000280:	00650064 	rsbeq	r0, r5, r4, rrx
20000284:	00200072 	eoreq	r0, r0, r2, ror r0
20000288:	00550020 	subseq	r0, r5, r0, lsr #32
2000028c:	006c0070 	rsbeq	r0, ip, r0, ror r0
20000290:	0061006f 	rsbeq	r0, r1, pc, rrx
20000294:	00200064 	eoreq	r0, r0, r4, rrx
20000298:	006f0074 	rsbeq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
2000029c:	00460020 	subeq	r0, r6, r0, lsr #32
200002a0:	0061006c 	rsbeq	r0, r1, ip, rrx
200002a4:	00680073 	rsbeq	r0, r8, r3, ror r0
200002a8:	00300020 	eorseq	r0, r0, r0, lsr #32
200002ac:	00380078 	eorseq	r0, r8, r8, ror r0
200002b0:	00300030 	eorseq	r0, r0, r0, lsr r0
200002b4:	00300032 	eorseq	r0, r0, r2, lsr r0
200002b8:	00300030 	eorseq	r0, r0, r0, lsr r0

200002bc <usbConfigDescriptorDFU>:
200002bc:	20000100 	andcs	r0, r0, r0, lsl #2
200002c0:	0000002d 	andeq	r0, r0, sp, lsr #32

200002c4 <userAppEnd>:
200002c4:	20005000 	andcs	r5, r0, r0

200002c8 <userAppAddr>:
200002c8:	20000c00 	andcs	r0, r0, r0, lsl #24

200002cc <sha256_padding>:
200002cc:	00000080 	andeq	r0, r0, r0, lsl #1
	...

2000030c <k>:
2000030c:	428a2f98 	addmi	r2, sl, #152, 30	; 0x260
20000310:	71374491 			; <UNDEFINED> instruction: 0x71374491
20000314:	b5c0fbcf 	strblt	pc, [r0, #3023]	; 0xbcf	; <UNPREDICTABLE>
20000318:	e9b5dba5 	ldmib	r5!, {r0, r2, r5, r7, r8, r9, fp, ip, lr, pc}
2000031c:	3956c25b 	ldmdbcc	r6, {r0, r1, r3, r4, r6, r9, lr, pc}^
20000320:	59f111f1 	ldmibpl	r1!, {r0, r4, r5, r6, r7, r8, ip}^
20000324:	923f82a4 	eorsls	r8, pc, #164, 4	; 0x4000000a
20000328:	ab1c5ed5 	blge	20717e84 <_estack+0x712e84>
2000032c:	d807aa98 	stmdale	r7, {r3, r4, r7, r9, fp, sp, pc}
20000330:	12835b01 	addne	r5, r3, #1024	; 0x400
20000334:	243185be 	ldrtcs	r8, [r1], #-1470	; 0x5be
20000338:	550c7dc3 	strpl	r7, [ip, #-3523]	; 0xdc3
2000033c:	72be5d74 	adcsvc	r5, lr, #116, 26	; 0x1d00
20000340:	80deb1fe 	ldrshhi	fp, [lr], #30
20000344:	9bdc06a7 	blls	1f701de8 <_etext+0x176fa600>
20000348:	c19bf174 	orrsgt	pc, fp, r4, ror r1	; <UNPREDICTABLE>
2000034c:	e49b69c1 	ldr	r6, [fp], #2497	; 0x9c1
20000350:	efbe4786 	svc	0x00be4786
20000354:	0fc19dc6 	svceq	0x00c19dc6
20000358:	240ca1cc 	strcs	sl, [ip], #-460	; 0x1cc
2000035c:	2de92c6f 	stclcs	12, cr2, [r9, #444]!	; 0x1bc
20000360:	4a7484aa 	bmi	21d21610 <_estack+0x1d1c610>
20000364:	5cb0a9dc 	ldcpl	9, cr10, [r0], #880	; 0x370
20000368:	76f988da 	usatvc	r8, #25, sl, asr #17
2000036c:	983e5152 	ldmdals	lr!, {r1, r4, r6, r8, ip, lr}
20000370:	a831c66d 	ldmdage	r1!, {r0, r2, r3, r5, r6, r9, sl, lr, pc}
20000374:	b00327c8 	andlt	r2, r3, r8, asr #15
20000378:	bf597fc7 	svclt	0x00597fc7
2000037c:	c6e00bf3 			; <UNDEFINED> instruction: 0xc6e00bf3
20000380:	d5a79147 	strle	r9, [r7, #327]!	; 0x147
20000384:	06ca6351 			; <UNDEFINED> instruction: 0x06ca6351
20000388:	14292967 	strtne	r2, [r9], #-2407	; 0x967
2000038c:	27b70a85 	ldrcs	r0, [r7, r5, lsl #21]!
20000390:	2e1b2138 	mrccs	1, 0, r2, cr11, cr8, {1}
20000394:	4d2c6dfc 	stcmi	13, cr6, [ip, #-1008]!	; 0xfffffc10
20000398:	53380d13 	teqpl	r8, #1216	; 0x4c0
2000039c:	650a7354 	strvs	r7, [sl, #-852]	; 0x354
200003a0:	766a0abb 			; <UNDEFINED> instruction: 0x766a0abb
200003a4:	81c2c92e 	bichi	ip, r2, lr, lsr #18
200003a8:	92722c85 	rsbsls	r2, r2, #34048	; 0x8500
200003ac:	a2bfe8a1 	adcsge	lr, pc, #10551296	; 0xa10000
200003b0:	a81a664b 	ldmdage	sl, {r0, r1, r3, r6, r9, sl, sp, lr}
200003b4:	c24b8b70 	subgt	r8, fp, #112, 22	; 0x1c000
200003b8:	c76c51a3 	strbgt	r5, [ip, -r3, lsr #3]!
200003bc:	d192e819 	orrsle	lr, r2, r9, lsl r8
200003c0:	d6990624 	ldrle	r0, [r9], r4, lsr #12
200003c4:	f40e3585 	vst3.32	{d3,d5,d7}, [lr], r5
200003c8:	106aa070 	rsbne	sl, sl, r0, ror r0
200003cc:	19a4c116 	stmibne	r4!, {r1, r2, r4, r8, lr, pc}
200003d0:	1e376c08 	cdpne	12, 3, cr6, cr7, cr8, {0}
200003d4:	2748774c 	strbcs	r7, [r8, -ip, asr #14]
200003d8:	34b0bcb5 	ldrtcc	fp, [r0], #3253	; 0xcb5
200003dc:	391c0cb3 	ldmdbcc	ip, {r0, r1, r4, r5, r7, sl, fp}
200003e0:	4ed8aa4a 	vfnmami.f32	s21, s16, s20
200003e4:	5b9cca4f 	blpl	1e732d28 <_etext+0x1672b540>
200003e8:	682e6ff3 	stmdavs	lr!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
200003ec:	748f82ee 	strvc	r8, [pc], #750	; 200003f4 <k+0xe8>
200003f0:	78a5636f 	stmiavc	r5!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}
200003f4:	84c87814 	strbhi	r7, [r8], #2068	; 0x814
200003f8:	8cc70208 	sfmhi	f0, 2, [r7], {8}
200003fc:	90befffa 	ldrshtls	pc, [lr], sl	; <UNPREDICTABLE>
20000400:	a4506ceb 	ldrbge	r6, [r0], #-3307	; 0xceb
20000404:	bef9a3f7 	mrclt	3, 7, sl, cr9, cr7, {7}
20000408:	c67178f2 			; <UNDEFINED> instruction: 0xc67178f2

2000040c <impure_data>:
	...
2000042c:	080077e3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r8, r9, sl, ip, sp, lr}
	...

2000046c <_impure_ptr>:
2000046c:	2000040c 	andcs	r0, r0, ip, lsl #8

Disassembly of section .bss:

20000470 <_sbss>:
20000470:	00000000 	andeq	r0, r0, r0

20000474 <wIstr>:
20000474:	00000000 	andeq	r0, r0, r0

20000478 <ResumeS>:
20000478:	00000000 	andeq	r0, r0, r0

2000047c <input>:
	...

200004d8 <sha256sum>:
	...

200004f8 <ctx>:
	...

20000560 <code_copy_lock>:
	...

20000562 <SaveRState>:
	...

20000564 <SaveTState>:
20000564:	00000000 	andeq	r0, r0, r0

20000568 <SaveState>:
20000568:	00000000 	andeq	r0, r0, r0

2000056c <pProperty>:
2000056c:	00000000 	andeq	r0, r0, r0

20000570 <EPindex>:
20000570:	00000000 	andeq	r0, r0, r0

20000574 <Device_Info>:
	...

20000590 <pUser_Standard_Requests>:
20000590:	00000000 	andeq	r0, r0, r0

20000594 <pInformation>:
20000594:	00000000 	andeq	r0, r0, r0

20000598 <wInterrupt_Mask>:
	...

2000059a <StatusInfo>:
	...

2000059c <errno>:
2000059c:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.bIntPackSOF:

200005a0 <bIntPackSOF>:
	...

Disassembly of section .bss.bDeviceState:

200005a4 <bDeviceState>:
200005a4:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.uploadBlockLen:

200005a8 <uploadBlockLen>:
	...

Disassembly of section .bss.recvBuffer:

200005ac <recvBuffer>:
	...

Disassembly of section .bss.thisBlockLen:

20000dac <thisBlockLen>:
	...

Disassembly of section .bss.userFirmwareLen:

20000db0 <userFirmwareLen>:
20000db0:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.userUploadType:

20000db4 <userUploadType>:
	...

Disassembly of section .bss.dfuAppStatus:

20000db8 <dfuAppStatus>:
	...

Disassembly of section .bss.dfuBusy:

20000dc0 <dfuBusy>:
	...

Disassembly of section .bss.Data_Mul_MaxPacketSize:

20000dc1 <Data_Mul_MaxPacketSize>:
	...

Disassembly of section .bss.__malloc_sbrk_start:

20000dc4 <__malloc_sbrk_start>:
20000dc4:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.__malloc_free_list:

20000dc8 <__malloc_free_list>:
20000dc8:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.heap_end.4246:

20000dcc <heap_end.4246>:
20000dcc:	00000000 	andeq	r0, r0, r0

Disassembly of section ._usrstack:

20000dd0 <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
   0:	3a434347 	bcc	10d0d24 <__Stack_Size+0x10d0524>
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2973726f 	ldmdbcs	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	3220342e 	eorcc	r3, r0, #771751936	; 0x2e000000
  34:	30343130 	eorscc	r3, r4, r0, lsr r1
  38:	20353237 	eorscs	r3, r5, r7, lsr r2

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	415b2029 	cmpmi	fp, r9, lsr #32
  48:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2fe <BootRAM+0xef6fa9f>
  4c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  54:	2d385f34 	ldccs	15, cr5, [r8, #-208]!	; 0xffffff30
  58:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  5c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  60:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  64:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  68:	31333132 	teqcc	r3, r2, lsr r1
  6c:	005d3734 	subseq	r3, sp, r4, lsr r7

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	14041202 	strne	r1, [r4], #-514	; 0x202
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	1a011803 	bne	4603c <__Stack_Size+0x4583c>
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	Address 0x0000002c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	08000b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp}
  14:	00000048 	andeq	r0, r0, r8, asr #32
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
  1c:	00000004 	andeq	r0, r0, r4
	...
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	007c0002 	rsbseq	r0, ip, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	00040000 	andeq	r0, r4, r0
	...

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	0000007a 	andeq	r0, r0, sl, ror r0
	...

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  48:	0000011c 	andeq	r0, r0, ip, lsl r1
  4c:	00fe0002 	rscseq	r0, lr, r2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	08000b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp}
  5c:	00000002 	andeq	r0, r0, r2
  60:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
  64:	00000002 	andeq	r0, r0, r2
  68:	08000ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp}
  6c:	00000002 	andeq	r0, r0, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(u8 bEpNum, u8 bDir, u16 wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
  70:	08000ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp}
  74:	0000000a 	andeq	r0, r0, sl
  78:	08000bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp}
  7c:	00000002 	andeq	r0, r0, r2
  80:	08000bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp}
  84:	00000018 	andeq	r0, r0, r8, lsl r0
  88:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
  8c:	00000002 	andeq	r0, r0, r2
  90:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
  94:	00000002 	andeq	r0, r0, r2
  98:	08000bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	08000bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp}
  a4:	00000002 	andeq	r0, r0, r2
	f25519_select(x, a, b, (a[0] ^ parity) & 1);

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
	f25519_normalize(a);
	f25519_normalize(c);
  a8:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}

	return f25519_eq(a, c);
  ac:	00000002 	andeq	r0, r0, r2
  b0:	08000be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp}
  b4:	00000002 	andeq	r0, r0, r2
	uint8_t ok;

	mx2ey(ey, mx);
	ok = ey2ex(ex, ey, parity);

	f25519_normalize(ex);
  b8:	08000be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp}
	f25519_normalize(ey);
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	08000bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp}

	return ok;
}
  c4:	000000a8 	andeq	r0, r0, r8, lsr #1
  c8:	08000c98 	stmdaeq	r0, {r3, r4, r7, sl, fp}
  cc:	00000074 	andeq	r0, r0, r4, ror r0
  d0:	08000d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp}
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
  d4:	0000000c 	andeq	r0, r0, ip
  d8:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
		minusp[i] = c;
  dc:	0000000c 	andeq	r0, r0, ip
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
  e0:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
  e4:	00000020 	andeq	r0, r0, r0, lsr #32

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
  e8:	08000d44 	stmdaeq	r0, {r2, r6, r8, sl, fp}
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
  ec:	0000000c 	andeq	r0, r0, ip
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
  f0:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
  f8:	08000d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp}
  fc:	0000008c 	andeq	r0, r0, ip, lsl #1
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 100:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 104:	00000070 	andeq	r0, r0, r0, ror r0
 108:	08000e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp}
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 10c:	00000038 	andeq	r0, r0, r8, lsr r0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 110:	00000000 	andeq	r0, r0, r0
 114:	00000004 	andeq	r0, r0, r4
 118:	00000000 	andeq	r0, r0, r0
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 120:	00000000 	andeq	r0, r0, r0
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
 124:	00000018 	andeq	r0, r0, r8, lsl r0
 128:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
		fprime_copy(plusa, r);
		fprime_add(plusa, a, modulus);

		fprime_select(r, r, plusa, bit);
	}
}
 12c:	000000c8 	andeq	r0, r0, r8, asr #1

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
 130:	00000000 	andeq	r0, r0, r0
	i <<= 3;

	while (x) {
 134:	00000048 	andeq	r0, r0, r8, asr #32
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
 138:	00000000 	andeq	r0, r0, r0
 13c:	0000003c 	andeq	r0, r0, ip, lsr r0
	f25519_mul__distinct(x3, a, a);

	f25519_mul_c(a, x1z1, 486662);
	f25519_add(a, x1sq, a);
	f25519_add(a, z1sq, a);
	f25519_mul__distinct(x1sq, x1z1, a);
 140:	08000f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp}
	f25519_mul_c(z3, x1sq, 4);
 144:	0000001c 	andeq	r0, r0, ip, lsl r0
 148:	08000f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp}
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
 14c:	00000016 	andeq	r0, r0, r6, lsl r0
 150:	08000fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp}
 154:	000000e4 	andeq	r0, r0, r4, ror #1
	f25519_sub(b, x3, z3); /* D */
 158:	00000000 	andeq	r0, r0, r0
 15c:	0000000c 	andeq	r0, r0, ip
	...
	f25519_mul__distinct(da, a, b);
 168:	00000014 	andeq	r0, r0, r4, lsl r0

	f25519_sub(b, x2, z2);
 16c:	100a0002 	andne	r0, sl, r2
 170:	00040000 	andeq	r0, r4, r0
	...
	f25519_add(a, x3, z3); /* C */
	f25519_mul__distinct(cb, a, b);
 180:	00000024 	andeq	r0, r0, r4, lsr #32
 184:	12670002 	rsbne	r0, r7, #2

	f25519_add(a, da, cb);
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	0800108c 	stmdaeq	r0, {r2, r3, r7, ip}
	f25519_mul__distinct(b, a, a);
 194:	00000028 	andeq	r0, r0, r8, lsr #32
 198:	080010b4 	stmdaeq	r0, {r2, r4, r5, r7, ip}
	f25519_mul__distinct(x5, z1, b);
 19c:	00000138 	andeq	r0, r0, r8, lsr r1
	...

	f25519_sub(a, da, cb);
 1a8:	000000fc 	strdeq	r0, [r0], -ip
 1ac:	17150002 	ldrne	r0, [r5, -r2]
	f25519_mul__distinct(b, a, a);
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
 1bc:	00000016 	andeq	r0, r0, r6, lsl r0
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
 1c0:	08001204 	stmdaeq	r0, {r2, r9, ip}
 1c4:	00000012 	andeq	r0, r0, r2, lsl r0

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
 1c8:	08001218 	stmdaeq	r0, {r3, r4, r9, ip}
 1cc:	00000060 	andeq	r0, r0, r0, rrx
 1d0:	00000000 	andeq	r0, r0, r0
 1d4:	0000000a 	andeq	r0, r0, sl
		f25519_select(zm1, zm1, zm, bit);
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	00000016 	andeq	r0, r0, r6, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
		f25519_select(xm, xm, xms, bit);
 1e4:	00000038 	andeq	r0, r0, r8, lsr r0
 1e8:	08001278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip}
 1ec:	00000044 	andeq	r0, r0, r4, asr #32
		f25519_select(zm, zm, zms, bit);
 1f0:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
 1f4:	00000088 	andeq	r0, r0, r8, lsl #1
 1f8:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
 1fc:	00000050 	andeq	r0, r0, r0, asr r0
 200:	08001394 	stmdaeq	r0, {r2, r4, r7, r8, r9, ip}
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
 204:	0000006c 	andeq	r0, r0, ip, rrx
 208:	08001400 	stmdaeq	r0, {sl, ip}
	f25519_mul__distinct(result, zm1, xm);
 20c:	00000014 	andeq	r0, r0, r4, lsl r0
 210:	08001414 	stmdaeq	r0, {r2, r4, sl, ip}
	f25519_normalize(result);
 214:	00000020 	andeq	r0, r0, r0, lsr #32
 218:	08001434 	stmdaeq	r0, {r2, r4, r5, sl, ip}
}
 21c:	00000028 	andeq	r0, r0, r8, lsr #32
 220:	0800145c 	stmdaeq	r0, {r2, r3, r4, r6, sl, ip}
 224:	00000178 	andeq	r0, r0, r8, ror r1
 228:	00000000 	andeq	r0, r0, r0
 22c:	00000018 	andeq	r0, r0, r8, lsl r0
 230:	080015d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, ip}
 234:	000000a8 	andeq	r0, r0, r8, lsr #1
 238:	00000000 	andeq	r0, r0, r0
 23c:	00000034 	andeq	r0, r0, r4, lsr r0
 240:	00000000 	andeq	r0, r0, r0
 244:	00000068 	andeq	r0, r0, r8, rrx
 248:	0800167c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip}
 24c:	00000070 	andeq	r0, r0, r0, ror r0
 250:	080016ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, ip}
 254:	00000028 	andeq	r0, r0, r8, lsr #32
 258:	08001714 	stmdaeq	r0, {r2, r4, r8, r9, sl, ip}
 25c:	00000014 	andeq	r0, r0, r4, lsl r0
 260:	08001728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip}
 264:	00000040 	andeq	r0, r0, r0, asr #32
 268:	00000000 	andeq	r0, r0, r0
 26c:	00000060 	andeq	r0, r0, r0, rrx
 270:	08001768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip}
 274:	00000058 	andeq	r0, r0, r8, asr r0
 278:	080017c0 	stmdaeq	r0, {r6, r7, r8, r9, sl, ip}
 27c:	0000000c 	andeq	r0, r0, ip
 280:	080017cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, ip}
 284:	00000018 	andeq	r0, r0, r8, lsl r0
 288:	080017e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, ip}
 28c:	00000012 	andeq	r0, r0, r2, lsl r0
 290:	080017f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, ip}
 294:	00000010 	andeq	r0, r0, r0, lsl r0
 298:	08001808 	stmdaeq	r0, {r3, fp, ip}
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 2a8:	00000084 	andeq	r0, r0, r4, lsl #1
 2ac:	2ed90002 	cdpcs	0, 13, cr0, cr9, cr2, {0}
 2b0:	00040000 	andeq	r0, r4, r0
 2b4:	00000000 	andeq	r0, r0, r0
 2b8:	08001820 	stmdaeq	r0, {r5, fp, ip}
 2bc:	000000a0 	andeq	r0, r0, r0, lsr #1
 2c0:	080018c0 	stmdaeq	r0, {r6, r7, fp, ip}
 2c4:	000003a0 	andeq	r0, r0, r0, lsr #7
 2c8:	08001c60 	stmdaeq	r0, {r5, r6, sl, fp, ip}
 2cc:	00000044 	andeq	r0, r0, r4, asr #32
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	00000002 	andeq	r0, r0, r2
 2d8:	08001ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, ip}
 2dc:	00000018 	andeq	r0, r0, r8, lsl r0
 2e0:	08001cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip}
 2e4:	00000018 	andeq	r0, r0, r8, lsl r0
 2e8:	08001cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, ip}
 2ec:	00000034 	andeq	r0, r0, r4, lsr r0
 2f0:	08001d08 	stmdaeq	r0, {r3, r8, sl, fp, ip}
 2f4:	00000034 	andeq	r0, r0, r4, lsr r0
 2f8:	00000000 	andeq	r0, r0, r0
 2fc:	0000009c 	muleq	r0, ip, r0
 300:	00000000 	andeq	r0, r0, r0
 304:	0000000c 	andeq	r0, r0, ip
 308:	00000000 	andeq	r0, r0, r0
 30c:	0000000c 	andeq	r0, r0, ip
 310:	08001d3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, fp, ip}
 314:	0000000c 	andeq	r0, r0, ip
 318:	00000000 	andeq	r0, r0, r0
 31c:	0000001c 	andeq	r0, r0, ip, lsl r0
 320:	08001d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, ip}
 324:	00000002 	andeq	r0, r0, r2
	...
 330:	0000001c 	andeq	r0, r0, ip, lsl r0
 334:	3a0f0002 	bcc	3c0344 <__Stack_Size+0x3bfb44>
 338:	00040000 	andeq	r0, r4, r0
	...
 344:	00000228 	andeq	r0, r0, r8, lsr #4
	...
 350:	0000004c 	andeq	r0, r0, ip, asr #32
 354:	44460002 	strbmi	r0, [r6], #-2
 358:	00040000 	andeq	r0, r4, r0
 35c:	00000000 	andeq	r0, r0, r0
 360:	08001d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, ip}
 364:	00000070 	andeq	r0, r0, r0, ror r0
 368:	08001dbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, fp, ip}
 36c:	0000003a 	andeq	r0, r0, sl, lsr r0
 370:	08001df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp, ip}
 374:	0000005e 	andeq	r0, r0, lr, asr r0
 378:	08001e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip}
 37c:	000000c8 	andeq	r0, r0, r8, asr #1
 380:	08001f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip}
 384:	000000e0 	andeq	r0, r0, r0, ror #1
 388:	08002000 	stmdaeq	r0, {sp}
 38c:	000000b4 	strheq	r0, [r0], -r4
 390:	080020b4 	stmdaeq	r0, {r2, r4, r5, r7, sp}
 394:	00000084 	andeq	r0, r0, r4, lsl #1
	...
 3a0:	00000024 	andeq	r0, r0, r4, lsr #32
 3a4:	52fc0002 	rscspl	r0, ip, #2
 3a8:	00040000 	andeq	r0, r4, r0
	...
 3b4:	0000007c 	andeq	r0, r0, ip, ror r0
 3b8:	08002138 	stmdaeq	r0, {r3, r4, r5, r8, sp}
 3bc:	0000017c 	andeq	r0, r0, ip, ror r1
	...
 3c8:	0000007c 	andeq	r0, r0, ip, ror r0
 3cc:	5e580002 	cdppl	0, 5, cr0, cr8, cr2, {0}
 3d0:	00040000 	andeq	r0, r4, r0
 3d4:	00000000 	andeq	r0, r0, r0
 3d8:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
 3dc:	0000001e 	andeq	r0, r0, lr, lsl r0
 3e0:	080022d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sp}
 3e4:	0000006e 	andeq	r0, r0, lr, rrx
 3e8:	08002344 	stmdaeq	r0, {r2, r6, r8, r9, sp}
 3ec:	0000009a 	muleq	r0, sl, r0
 3f0:	080023e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sp}
 3f4:	000000c2 	andeq	r0, r0, r2, asr #1
 3f8:	080024a4 	stmdaeq	r0, {r2, r5, r7, sl, sp}
 3fc:	00000046 	andeq	r0, r0, r6, asr #32
 400:	080024ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, sp}
 404:	0000004c 	andeq	r0, r0, ip, asr #32
 408:	08002538 	stmdaeq	r0, {r3, r4, r5, r8, sl, sp}
 40c:	00000046 	andeq	r0, r0, r6, asr #32
 410:	08002580 	stmdaeq	r0, {r7, r8, sl, sp}
 414:	00000088 	andeq	r0, r0, r8, lsl #1
 418:	00000000 	andeq	r0, r0, r0
 41c:	000000b8 	strheq	r0, [r0], -r8
 420:	00000000 	andeq	r0, r0, r0
 424:	00000040 	andeq	r0, r0, r0, asr #32
 428:	08002608 	stmdaeq	r0, {r3, r9, sl, sp}
 42c:	000005ea 	andeq	r0, r0, sl, ror #11
 430:	00000000 	andeq	r0, r0, r0
 434:	00000026 	andeq	r0, r0, r6, lsr #32
 438:	08002bf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, fp, sp}
 43c:	00000634 	andeq	r0, r0, r4, lsr r6
	...
 448:	0000005c 	andeq	r0, r0, ip, asr r0
 44c:	6dff0002 	ldclvs	0, cr0, [pc, #8]!	; 45c <_Minimum_Stack_Size+0x35c>
 450:	00040000 	andeq	r0, r4, r0
	...
 45c:	0000001e 	andeq	r0, r0, lr, lsl r0
 460:	08003228 	stmdaeq	r0, {r3, r5, r9, ip, sp}
 464:	000001a0 	andeq	r0, r0, r0, lsr #3
 468:	00000000 	andeq	r0, r0, r0
 46c:	0000002c 	andeq	r0, r0, ip, lsr #32
 470:	00000000 	andeq	r0, r0, r0
 474:	0000009a 	muleq	r0, sl, r0
 478:	00000000 	andeq	r0, r0, r0
 47c:	000000c2 	andeq	r0, r0, r2, asr #1
 480:	00000000 	andeq	r0, r0, r0
 484:	00000058 	andeq	r0, r0, r8, asr r0
 488:	00000000 	andeq	r0, r0, r0
 48c:	0000008e 	andeq	r0, r0, lr, lsl #1
 490:	00000000 	andeq	r0, r0, r0
 494:	0000013e 	andeq	r0, r0, lr, lsr r1
 498:	00000000 	andeq	r0, r0, r0
 49c:	000000d2 	ldrdeq	r0, [r0], -r2
	...
 4a8:	00000024 	andeq	r0, r0, r4, lsr #32
 4ac:	7b730002 	blvc	1cc04bc <__Stack_Size+0x1cbfcbc>
 4b0:	00040000 	andeq	r0, r4, r0
	...
 4bc:	00000040 	andeq	r0, r0, r0, asr #32
 4c0:	00000000 	andeq	r0, r0, r0
 4c4:	000000d4 	ldrdeq	r0, [r0], -r4
	...
 4d0:	00000034 	andeq	r0, r0, r4, lsr r0
 4d4:	819d0002 	orrshi	r0, sp, r2
 4d8:	00040000 	andeq	r0, r4, r0
 4dc:	00000000 	andeq	r0, r0, r0
 4e0:	080033c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, sp}
 4e4:	00000058 	andeq	r0, r0, r8, asr r0
 4e8:	08003420 	stmdaeq	r0, {r5, sl, ip, sp}
 4ec:	00001f64 	andeq	r1, r0, r4, ror #30
 4f0:	08005384 	stmdaeq	r0, {r2, r7, r8, r9, ip, lr}
 4f4:	0000008e 	andeq	r0, r0, lr, lsl #1
 4f8:	08005414 	stmdaeq	r0, {r2, r4, sl, ip, lr}
 4fc:	00000218 	andeq	r0, r0, r8, lsl r2
	...
 508:	0000002c 	andeq	r0, r0, ip, lsr #32
 50c:	874d0002 	strbhi	r0, [sp, -r2]
 510:	00040000 	andeq	r0, r4, r0
 514:	00000000 	andeq	r0, r0, r0
 518:	0800562c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip, lr}
 51c:	00000494 	muleq	r0, r4, r4
 520:	08005ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, lr}
 524:	00000088 	andeq	r0, r0, r8, lsl #1
 528:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
 52c:	00000296 	muleq	r0, r6, r2
	...
 538:	000001ec 	andeq	r0, r0, ip, ror #3
 53c:	8ed00002 	cdphi	0, 13, cr0, cr0, cr2, {0}
 540:	00040000 	andeq	r0, r4, r0
	...
 54c:	0000000c 	andeq	r0, r0, ip
 550:	00000000 	andeq	r0, r0, r0
 554:	0000000c 	andeq	r0, r0, ip
 558:	00000000 	andeq	r0, r0, r0
 55c:	0000000c 	andeq	r0, r0, ip
 560:	00000000 	andeq	r0, r0, r0
 564:	0000000c 	andeq	r0, r0, ip
 568:	00000000 	andeq	r0, r0, r0
 56c:	0000000c 	andeq	r0, r0, ip
 570:	00000000 	andeq	r0, r0, r0
 574:	0000000c 	andeq	r0, r0, ip
 578:	00000000 	andeq	r0, r0, r0
 57c:	0000000c 	andeq	r0, r0, ip
 580:	00000000 	andeq	r0, r0, r0
 584:	00000010 	andeq	r0, r0, r0, lsl r0
 588:	00000000 	andeq	r0, r0, r0
 58c:	0000000c 	andeq	r0, r0, ip
 590:	00000000 	andeq	r0, r0, r0
 594:	0000000e 	andeq	r0, r0, lr
 598:	00000000 	andeq	r0, r0, r0
 59c:	00000010 	andeq	r0, r0, r0, lsl r0
 5a0:	00000000 	andeq	r0, r0, r0
 5a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a8:	00000000 	andeq	r0, r0, r0
 5ac:	00000012 	andeq	r0, r0, r2, lsl r0
 5b0:	08005de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, ip, lr}
 5b4:	0000002a 	andeq	r0, r0, sl, lsr #32
 5b8:	00000000 	andeq	r0, r0, r0
 5bc:	0000002a 	andeq	r0, r0, sl, lsr #32
 5c0:	00000000 	andeq	r0, r0, r0
 5c4:	00000024 	andeq	r0, r0, r4, lsr #32
 5c8:	00000000 	andeq	r0, r0, r0
 5cc:	00000012 	andeq	r0, r0, r2, lsl r0
 5d0:	00000000 	andeq	r0, r0, r0
 5d4:	00000012 	andeq	r0, r0, r2, lsl r0
 5d8:	00000000 	andeq	r0, r0, r0
 5dc:	0000001e 	andeq	r0, r0, lr, lsl r0
 5e0:	08005e0a 	stmdaeq	r0, {r1, r3, r9, sl, fp, ip, lr}
 5e4:	0000001e 	andeq	r0, r0, lr, lsl r0
 5e8:	00000000 	andeq	r0, r0, r0
 5ec:	0000001e 	andeq	r0, r0, lr, lsl r0
 5f0:	00000000 	andeq	r0, r0, r0
 5f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f8:	08005e28 	stmdaeq	r0, {r3, r5, r9, sl, fp, ip, lr}
 5fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 600:	00000000 	andeq	r0, r0, r0
 604:	0000001e 	andeq	r0, r0, lr, lsl r0
 608:	00000000 	andeq	r0, r0, r0
 60c:	0000001e 	andeq	r0, r0, lr, lsl r0
 610:	00000000 	andeq	r0, r0, r0
 614:	0000001c 	andeq	r0, r0, ip, lsl r0
 618:	00000000 	andeq	r0, r0, r0
 61c:	0000001a 	andeq	r0, r0, sl, lsl r0
 620:	00000000 	andeq	r0, r0, r0
 624:	0000001a 	andeq	r0, r0, sl, lsl r0
 628:	00000000 	andeq	r0, r0, r0
 62c:	00000018 	andeq	r0, r0, r8, lsl r0
 630:	00000000 	andeq	r0, r0, r0
 634:	0000001c 	andeq	r0, r0, ip, lsl r0
 638:	00000000 	andeq	r0, r0, r0
 63c:	00000020 	andeq	r0, r0, r0, lsr #32
 640:	00000000 	andeq	r0, r0, r0
 644:	00000020 	andeq	r0, r0, r0, lsr #32
 648:	08005e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip, lr}
 64c:	00000020 	andeq	r0, r0, r0, lsr #32
 650:	08005e64 	stmdaeq	r0, {r2, r5, r6, r9, sl, fp, ip, lr}
 654:	00000020 	andeq	r0, r0, r0, lsr #32
 658:	00000000 	andeq	r0, r0, r0
 65c:	0000001e 	andeq	r0, r0, lr, lsl r0
 660:	00000000 	andeq	r0, r0, r0
 664:	00000012 	andeq	r0, r0, r2, lsl r0
 668:	00000000 	andeq	r0, r0, r0
 66c:	00000020 	andeq	r0, r0, r0, lsr #32
 670:	00000000 	andeq	r0, r0, r0
 674:	00000020 	andeq	r0, r0, r0, lsr #32
 678:	08005e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, lr}
 67c:	0000001c 	andeq	r0, r0, ip, lsl r0
 680:	08005ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip, lr}
 684:	0000001c 	andeq	r0, r0, ip, lsl r0
 688:	08005ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, lr}
 68c:	0000001c 	andeq	r0, r0, ip, lsl r0
 690:	00000000 	andeq	r0, r0, r0
 694:	00000026 	andeq	r0, r0, r6, lsr #32
 698:	08005ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, lr}
 69c:	00000040 	andeq	r0, r0, r0, asr #32
 6a0:	00000000 	andeq	r0, r0, r0
 6a4:	00000020 	andeq	r0, r0, r0, lsr #32
 6a8:	00000000 	andeq	r0, r0, r0
 6ac:	00000020 	andeq	r0, r0, r0, lsr #32
 6b0:	00000000 	andeq	r0, r0, r0
 6b4:	00000038 	andeq	r0, r0, r8, lsr r0
 6b8:	00000000 	andeq	r0, r0, r0
 6bc:	00000020 	andeq	r0, r0, r0, lsr #32
 6c0:	00000000 	andeq	r0, r0, r0
 6c4:	00000020 	andeq	r0, r0, r0, lsr #32
 6c8:	00000000 	andeq	r0, r0, r0
 6cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 6d0:	00000000 	andeq	r0, r0, r0
 6d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6d8:	00000000 	andeq	r0, r0, r0
 6dc:	000000a8 	andeq	r0, r0, r8, lsr #1
 6e0:	00000000 	andeq	r0, r0, r0
 6e4:	0000005c 	andeq	r0, r0, ip, asr r0
 6e8:	00000000 	andeq	r0, r0, r0
 6ec:	0000005c 	andeq	r0, r0, ip, asr r0
 6f0:	00000000 	andeq	r0, r0, r0
 6f4:	00000020 	andeq	r0, r0, r0, lsr #32
 6f8:	00000000 	andeq	r0, r0, r0
 6fc:	00000020 	andeq	r0, r0, r0, lsr #32
 700:	00000000 	andeq	r0, r0, r0
 704:	00000044 	andeq	r0, r0, r4, asr #32
 708:	00000000 	andeq	r0, r0, r0
 70c:	0000003a 	andeq	r0, r0, sl, lsr r0
 710:	00000000 	andeq	r0, r0, r0
 714:	00000006 	andeq	r0, r0, r6
 718:	00000000 	andeq	r0, r0, r0
 71c:	0000000a 	andeq	r0, r0, sl
	...
 728:	00000024 	andeq	r0, r0, r4, lsr #32
 72c:	9b5c0002 	blls	170073c <__Stack_Size+0x16fff3c>
 730:	00040000 	andeq	r0, r4, r0
 734:	00000000 	andeq	r0, r0, r0
 738:	08005f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip, lr}
 73c:	00000154 	andeq	r0, r0, r4, asr r1
 740:	00000000 	andeq	r0, r0, r0
 744:	00000070 	andeq	r0, r0, r0, ror r0
	...
 750:	0000001c 	andeq	r0, r0, ip, lsl r0
 754:	9d380002 	ldcls	0, cr0, [r8, #-8]!
 758:	00040000 	andeq	r0, r4, r0
 75c:	00000000 	andeq	r0, r0, r0
 760:	0800606c 	stmdaeq	r0, {r2, r3, r5, r6, sp, lr}
 764:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 770:	00000094 	muleq	r0, r4, r0
 774:	a1350002 	teqge	r5, r2
 778:	00040000 	andeq	r0, r4, r0
 77c:	00000000 	andeq	r0, r0, r0
 780:	080060a4 	stmdaeq	r0, {r2, r5, r7, sp, lr}
 784:	00000024 	andeq	r0, r0, r4, lsr #32
 788:	080060c8 	stmdaeq	r0, {r3, r6, r7, sp, lr}
 78c:	00000024 	andeq	r0, r0, r4, lsr #32
 790:	080060ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sp, lr}
 794:	00000090 	muleq	r0, r0, r0
 798:	0800617c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sp, lr}
 79c:	000000a8 	andeq	r0, r0, r8, lsr #1
 7a0:	08006224 	stmdaeq	r0, {r2, r5, r9, sp, lr}
 7a4:	00000038 	andeq	r0, r0, r8, lsr r0
 7a8:	0800625c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sp, lr}
 7ac:	00000048 	andeq	r0, r0, r8, asr #32
 7b0:	080062a4 	stmdaeq	r0, {r2, r5, r7, r9, sp, lr}
 7b4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 7b8:	08006374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sp, lr}
 7bc:	00000084 	andeq	r0, r0, r4, lsl #1
 7c0:	080063f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sp, lr}
 7c4:	00000024 	andeq	r0, r0, r4, lsr #32
 7c8:	0800641c 	stmdaeq	r0, {r2, r3, r4, sl, sp, lr}
 7cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 7d0:	08006438 	stmdaeq	r0, {r3, r4, r5, sl, sp, lr}
 7d4:	00000040 	andeq	r0, r0, r0, asr #32
 7d8:	08006478 	stmdaeq	r0, {r3, r4, r5, r6, sl, sp, lr}
 7dc:	000002dc 	ldrdeq	r0, [r0], -ip
 7e0:	08006754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, sp, lr}
 7e4:	000000c8 	andeq	r0, r0, r8, asr #1
 7e8:	0800681c 	stmdaeq	r0, {r2, r3, r4, fp, sp, lr}
 7ec:	00000038 	andeq	r0, r0, r8, lsr r0
 7f0:	08006854 	stmdaeq	r0, {r2, r4, r6, fp, sp, lr}
 7f4:	0000005c 	andeq	r0, r0, ip, asr r0
 7f8:	00000000 	andeq	r0, r0, r0
 7fc:	00000002 	andeq	r0, r0, r2
	...
 808:	00000024 	andeq	r0, r0, r4, lsr #32
 80c:	af190002 	svcge	0x00190002
 810:	00040000 	andeq	r0, r4, r0
 814:	00000000 	andeq	r0, r0, r0
 818:	080068b0 	stmdaeq	r0, {r4, r5, r7, fp, sp, lr}
 81c:	00000030 	andeq	r0, r0, r0, lsr r0
 820:	080068e0 	stmdaeq	r0, {r5, r6, r7, fp, sp, lr}
 824:	00000024 	andeq	r0, r0, r4, lsr #32
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000078 	andeq	r0, r0, r8, ror r0
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
	...
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      14:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
      1c:	5f632f62 	svcpl	0x00632f62
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      24:	6174735f 	cmnvs	r4, pc, asr r3
      28:	70757472 	rsbsvc	r7, r5, r2, ror r4
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	4300732e 	movwmi	r7, #814	; 0x32e
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
      34:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
      38:	66696168 	strbtvs	r6, [r9], -r8, ror #2

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	68637369 	stmdavs	r3!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	7365445c 	cmnvc	r5, #92, 8	; 0x5c000000
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	706f746b 	rsbvc	r7, pc, fp, ror #8
      48:	636e655c 	cmnvs	lr, #92, 10	; 0x17000000
      4c:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0x16c

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	6f72705f 	svcvs	0x0072705f
      54:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
      58:	6f6f625c 	svcvs	0x006f625c
      5c:	616f6c74 	smcvs	63172	; 0xf6c4
      60:	5c726564 	cfldr64pl	mvdx6, [r2], #-400	; 0xfffffe70
      64:	334d5453 	movtcc	r5, #54355	; 0xd453
      68:	00314632 	eorseq	r4, r1, r2, lsr r6
      6c:	20554e47 	subscs	r4, r5, r7, asr #28
      70:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      74:	2e33322e 	cdpcs	2, 3, cr3, cr3, cr14, {1}
      78:	80010032 	andhi	r0, r1, r2, lsr r0
      7c:	0000007e 	andeq	r0, r0, lr, ror r0
      80:	00120002 	andseq	r0, r2, r2
      84:	01040000 	mrseq	r0, (UNDEF: 4)
      88:	00000075 	andeq	r0, r0, r5, ror r0
	...
      94:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
      98:	5f32336d 	svcpl	0x0032336d
      9c:	2f62696c 	svccs	0x0062696c
      a0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
      a4:	336d7865 	cmncc	sp, #6619136	; 0x650000
	f25519_select(x, a, b, (a[0] ^ parity) & 1);

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
	f25519_normalize(a);
	f25519_normalize(c);
      a8:	63616d5f 	cmnvs	r1, #6080	; 0x17c0

	return f25519_eq(a, c);
      ac:	532e6f72 	teqpl	lr, #456	; 0x1c8
      b0:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
      b4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
	uint8_t ok;

	mx2ey(ey, mx);
	ok = ey2ex(ex, ey, parity);

	f25519_normalize(ex);
      b8:	61685c73 	smcvs	34243	; 0x85c3
	f25519_normalize(ey);
      bc:	73696669 	cmnvc	r9, #110100480	; 0x6900000
      c0:	445c6863 	ldrbmi	r6, [ip], #-2147	; 0x863

	return ok;
}
      c4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
      c8:	655c706f 	ldrbvs	r7, [ip, #-111]	; 0x6f
      cc:	616c636e 	cmnvs	ip, lr, ror #6
      d0:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
      d4:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
      d8:	625c7463 	subsvs	r7, ip, #1660944384	; 0x63000000
		minusp[i] = c;
      dc:	6c746f6f 	ldclvs	15, cr6, [r4], #-444	; 0xfffffe44
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
      e0:	6564616f 	strbvs	r6, [r4, #-367]!	; 0x16f
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
      e4:	54535c72 	ldrbpl	r5, [r3], #-3186	; 0xc72

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
      e8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
      ec:	4e470031 	mcrmi	0, 2, r0, cr7, cr1, {1}
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
      f0:	53412055 	movtpl	r2, #4181	; 0x1055
      f4:	322e3220 	eorcc	r3, lr, #32, 4
      f8:	00322e33 	eorseq	r2, r2, r3, lsr lr
      fc:	0f088001 	svceq	0x00088001
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     100:	00040000 	andeq	r0, r4, r0

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
     104:	00000026 	andeq	r0, r0, r6, lsr #32
     108:	06c00104 	strbeq	r0, [r0], r4, lsl #2
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     10c:	eb010000 	bl	40114 <__Stack_Size+0x3f914>
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
     110:	93000003 	movwls	r0, #3
     114:	d8000008 	stmdale	r0, {r3}
     118:	00000000 	andeq	r0, r0, r0
     11c:	1b000000 	blne	124 <_Minimum_Stack_Size+0x24>
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     120:	02000001 	andeq	r0, r0, #1
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
     124:	02570704 	subseq	r0, r7, #4, 14	; 0x100000
     128:	04030000 	streq	r0, [r3], #-0
		fprime_copy(plusa, r);
		fprime_add(plusa, a, modulus);

		fprime_select(r, r, plusa, bit);
	}
}
     12c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
     130:	06010200 	streq	r0, [r1], -r0, lsl #4
	i <<= 3;

	while (x) {
     134:	0000081a 	andeq	r0, r0, sl, lsl r8
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
     138:	18080102 	stmdane	r8, {r1, r8}
     13c:	02000008 	andeq	r0, r0, #8
	f25519_mul__distinct(x3, a, a);

	f25519_mul_c(a, x1z1, 486662);
	f25519_add(a, x1sq, a);
	f25519_add(a, z1sq, a);
	f25519_mul__distinct(x1sq, x1z1, a);
     140:	065e0502 	ldrbeq	r0, [lr], -r2, lsl #10
	f25519_mul_c(z3, x1sq, 4);
     144:	02020000 	andeq	r0, r2, #0
     148:	00094907 	andeq	r4, r9, r7, lsl #18
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	05040200 	streq	r0, [r4, #-512]	; 0x200
     150:	000004da 	ldrdeq	r0, [r0], -sl
     154:	52070402 	andpl	r0, r7, #33554432	; 0x2000000
	f25519_sub(b, x3, z3); /* D */
     158:	02000002 	andeq	r0, r0, #2
     15c:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
	f25519_mul__distinct(da, a, b);
     160:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     164:	00024d07 	andeq	r4, r2, r7, lsl #26
     168:	07040200 	streq	r0, [r4, -r0, lsl #4]

	f25519_sub(b, x2, z2);
     16c:	0000078b 	andeq	r0, r0, fp, lsl #15
     170:	00780404 	rsbseq	r0, r8, r4, lsl #8
	f25519_add(a, x3, z3); /* C */
     174:	02050000 	andeq	r0, r5, #0
     178:	08210801 	stmdaeq	r1!, {r0, fp}
     17c:	75060000 	strvc	r0, [r6, #-0]
	f25519_mul__distinct(cb, a, b);
     180:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
     184:	00005627 	andeq	r5, r0, r7, lsr #12

	f25519_add(a, da, cb);
     188:	31750600 	cmncc	r5, r0, lsl #12
     18c:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
     190:	00000048 	andeq	r0, r0, r8, asr #32
	f25519_mul__distinct(b, a, a);
     194:	00387506 	eorseq	r7, r8, r6, lsl #10
     198:	003a2902 	eorseq	r2, sl, r2, lsl #18
	f25519_mul__distinct(x5, z1, b);
     19c:	5a070000 	bpl	1c01a4 <__Stack_Size+0x1bf9a4>
     1a0:	02000003 	andeq	r0, r0, #3
     1a4:	0000ab2f 	andeq	sl, r0, pc, lsr #22

	f25519_sub(a, da, cb);
     1a8:	00560800 	subseq	r0, r6, r0, lsl #16
     1ac:	e3070000 	movw	r0, #28672	; 0x7000
	f25519_mul__distinct(b, a, a);
     1b0:	02000001 	andeq	r0, r0, #1
     1b4:	0000bb30 	andeq	fp, r0, r0, lsr fp
     1b8:	00480800 	subeq	r0, r8, r0, lsl #16

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	76060000 	strvc	r0, [r6], -r0
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	02003875 	andeq	r3, r0, #7667712	; 0x750000
     1c4:	0000cb31 	andeq	ip, r0, r1, lsr fp

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	003a0800 	eorseq	r0, sl, r0, lsl #16
     1cc:	01090000 	mrseq	r0, (UNDEF: 9)
     1d0:	00e53702 	rsceq	r3, r5, r2, lsl #14
     1d4:	b50a0000 	strlt	r0, [sl, #-0]
		f25519_select(zm1, zm1, zm, bit);
     1d8:	00000006 	andeq	r0, r0, r6
     1dc:	0001a70a 	andeq	sl, r1, sl, lsl #14
     1e0:	07000100 	streq	r0, [r0, -r0, lsl #2]
		f25519_select(xm, xm, xms, bit);
     1e4:	0000052d 	andeq	r0, r0, sp, lsr #10
     1e8:	00d03702 	sbcseq	r3, r0, r2, lsl #14
     1ec:	040b0000 	streq	r0, [fp], #-0
		f25519_select(zm, zm, zms, bit);
     1f0:	0129a903 	teqeq	r9, r3, lsl #18
     1f4:	b60c0000 	strlt	r0, [ip], -r0
     1f8:	03000005 	movweq	r0, #5
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	000096aa 	andeq	r9, r0, sl, lsr #13
     200:	700c0000 	andvc	r0, ip, r0
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	03000009 	movweq	r0, #9
     208:	000096ab 	andeq	r9, r0, fp, lsr #13
	f25519_mul__distinct(result, zm1, xm);
     20c:	dd0c0100 	stfles	f0, [ip, #-0]
     210:	03000008 	movweq	r0, #8
	f25519_normalize(result);
     214:	000096ac 	andeq	r9, r0, ip, lsr #13
     218:	960c0200 	strls	r0, [ip], -r0, lsl #4
}
     21c:	03000003 	movweq	r0, #3
     220:	0000e5ad 	andeq	lr, r0, sp, lsr #11
     224:	07000300 	streq	r0, [r0, -r0, lsl #6]
     228:	000001f5 	strdeq	r0, [r0], -r5
     22c:	00f0ae03 	rscseq	sl, r0, r3, lsl #28
     230:	280b0000 	stmdacs	fp, {}	; <UNPREDICTABLE>
     234:	01b4d403 			; <UNDEFINED> instruction: 0x01b4d403
     238:	430d0000 	movwmi	r0, #53248	; 0xd000
     23c:	d5030052 	strle	r0, [r3, #-82]	; 0x52
     240:	000000a0 	andeq	r0, r0, r0, lsr #1
     244:	06bb0c00 	ldrteq	r0, [fp], r0, lsl #24
     248:	d6030000 	strle	r0, [r3], -r0
     24c:	000000a0 	andeq	r0, r0, r0, lsr #1
     250:	49430d04 	stmdbmi	r3, {r2, r8, sl, fp}^
     254:	d7030052 	smlsdle	r3, r2, r0, r0
     258:	000000a0 	andeq	r0, r0, r0, lsr #1
     25c:	002a0c08 	eoreq	r0, sl, r8, lsl #24
     260:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
     264:	000000a0 	andeq	r0, r0, r0, lsr #1
     268:	00f10c0c 	rscseq	r0, r1, ip, lsl #24
     26c:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
     270:	000000a0 	andeq	r0, r0, r0, lsr #1
     274:	04450c10 	strbeq	r0, [r5], #-3088	; 0xc10
     278:	da030000 	ble	c0280 <__Stack_Size+0xbfa80>
     27c:	000000a0 	andeq	r0, r0, r0, lsr #1
     280:	05ef0c14 	strbeq	r0, [pc, #3092]!	; e9c <__Stack_Size+0x69c>
     284:	db030000 	blle	c028c <__Stack_Size+0xbfa8c>
     288:	000000a0 	andeq	r0, r0, r0, lsr #1
     28c:	00000c18 	andeq	r0, r0, r8, lsl ip
     290:	dc030000 	stcle	0, cr0, [r3], {-0}
     294:	000000a0 	andeq	r0, r0, r0, lsr #1
     298:	061a0c1c 			; <UNDEFINED> instruction: 0x061a0c1c
     29c:	dd030000 	stcle	0, cr0, [r3, #-0]
     2a0:	000000a0 	andeq	r0, r0, r0, lsr #1
     2a4:	53430d20 	movtpl	r0, #15648	; 0x3d20
     2a8:	de030052 	mcrle	0, 0, r0, cr3, cr2, {2}
     2ac:	000000a0 	andeq	r0, r0, r0, lsr #1
     2b0:	33070024 	movwcc	r0, #28708	; 0x7024
     2b4:	03000003 	movweq	r0, #3
     2b8:	000134df 	ldrdeq	r3, [r1], -pc	; <UNPREDICTABLE>
     2bc:	023d0e00 	eorseq	r0, sp, #0, 28
     2c0:	05010000 	streq	r0, [r1, #-0]
     2c4:	0001e416 	andeq	lr, r1, r6, lsl r4
     2c8:	05320a00 	ldreq	r0, [r2, #-2560]!	; 0xa00
     2cc:	0a000000 	beq	2d4 <_Minimum_Stack_Size+0x1d4>
     2d0:	00000686 	andeq	r0, r0, r6, lsl #13
     2d4:	017e0a01 	cmneq	lr, r1, lsl #20
     2d8:	0a020000 	beq	802e0 <__Stack_Size+0x7fae0>
     2dc:	00000920 	andeq	r0, r0, r0, lsr #18
     2e0:	330f0003 	movwcc	r0, #61443	; 0xf003
     2e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     2e8:	02092404 	andeq	r2, r9, #4, 8	; 0x4000000
     2ec:	e00c0000 	and	r0, ip, r0
     2f0:	04000002 	streq	r0, [r0], #-2
     2f4:	00020926 	andeq	r0, r2, r6, lsr #18
     2f8:	f10c0000 	cpsid	
     2fc:	04000003 	streq	r0, [r0], #-3
     300:	00008b27 	andeq	r8, r0, r7, lsr #22
     304:	04000400 	streq	r0, [r0], #-1024	; 0x400
     308:	00009604 	andeq	r9, r0, r4, lsl #12
     30c:	05720700 	ldrbeq	r0, [r2, #-1792]!	; 0x700
     310:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
     314:	000001e4 	andeq	r0, r0, r4, ror #3
     318:	00057107 	andeq	r7, r5, r7, lsl #2
     31c:	25290400 	strcs	r0, [r9, #-1024]!	; 0x400
     320:	04000002 	streq	r0, [r0], #-2
     324:	0001e404 	andeq	lr, r1, r4, lsl #8
     328:	07c00e00 	strbeq	r0, [r0, r0, lsl #28]
     32c:	04010000 	streq	r0, [r1], #-0
     330:	0002502d 	andeq	r5, r2, sp, lsr #32
     334:	02860a00 	addeq	r0, r6, #0, 20
     338:	0a000000 	beq	340 <_Minimum_Stack_Size+0x240>
     33c:	000009a9 	andeq	r0, r0, r9, lsr #19
     340:	01300a01 	teqeq	r0, r1, lsl #20
     344:	0a020000 	beq	8034c <__Stack_Size+0x7fb4c>
     348:	0000062b 	andeq	r0, r0, fp, lsr #12
     34c:	c1070003 	tstgt	r7, r3
     350:	04000007 	streq	r0, [r0], #-7
     354:	00022b34 	andeq	r2, r2, r4, lsr fp
     358:	05ff0f00 	ldrbeq	r0, [pc, #3840]!	; 1260 <__Stack_Size+0xa60>
     35c:	040c0000 	streq	r0, [ip], #-0
     360:	00029838 	andeq	r9, r2, r8, lsr r8
     364:	01d70c00 	bicseq	r0, r7, r0, lsl #24
     368:	50040000 	andpl	r0, r4, r0
     36c:	0000008b 	andeq	r0, r0, fp, lsl #1
     370:	086d0c00 	stmdaeq	sp!, {sl, fp}^
     374:	51040000 	mrspl	r0, (UNDEF: 4)
     378:	0000008b 	andeq	r0, r0, fp, lsl #1
     37c:	1fbf0c02 	svcne	0x00bf0c02
     380:	52040000 	andpl	r0, r4, #0
     384:	0000008b 	andeq	r0, r0, fp, lsl #1
     388:	069a0c04 	ldreq	r0, [sl], r4, lsl #24
     38c:	53040000 	movwpl	r0, #16384	; 0x4000
     390:	000002a7 	andeq	r0, r0, r7, lsr #5
     394:	09100008 	ldmdbeq	r0, {r3}
     398:	a7000002 	strge	r0, [r0, -r2]
     39c:	11000002 	tstne	r0, r2
     3a0:	0000008b 	andeq	r0, r0, fp, lsl #1
     3a4:	98040400 	stmdals	r4, {sl}
     3a8:	07000002 	streq	r0, [r0, -r2]
     3ac:	00000600 	andeq	r0, r0, r0, lsl #12
     3b0:	025b5404 	subseq	r5, fp, #4, 8	; 0x4000000
     3b4:	230f0000 	movwcs	r0, #61440	; 0xf000
     3b8:	02000006 	andeq	r0, r0, #6
     3bc:	02dd5804 	sbcseq	r5, sp, #4, 16	; 0x40000
     3c0:	700c0000 	andvc	r0, ip, r0
     3c4:	04000003 	streq	r0, [r0], #-3
     3c8:	0000965a 	andeq	r9, r0, sl, asr r6
     3cc:	8c0c0000 	stchi	0, cr0, [ip], {-0}
     3d0:	04000005 	streq	r0, [r0], #-5
     3d4:	0000965b 	andeq	r9, r0, fp, asr r6
     3d8:	07000100 	streq	r0, [r0, -r0, lsl #2]
     3dc:	00000624 	andeq	r0, r0, r4, lsr #12
     3e0:	02b85d04 	adcseq	r5, r8, #4, 26	; 0x100
     3e4:	42120000 	andsmi	r0, r2, #0
     3e8:	04020057 	streq	r0, [r2], #-87	; 0x57
     3ec:	00030c62 	andeq	r0, r3, r2, ror #24
     3f0:	62620d00 	rsbvs	r0, r2, #0, 26
     3f4:	65040030 	strvs	r0, [r4, #-48]	; 0x30
     3f8:	00000096 	muleq	r0, r6, r0
     3fc:	62620d00 	rsbvs	r0, r2, #0, 26
     400:	66040031 			; <UNDEFINED> instruction: 0x66040031
     404:	00000096 	muleq	r0, r6, r0
     408:	02130001 	andseq	r0, r3, #1
     40c:	03285f04 	teqeq	r8, #4, 30
     410:	77140000 	ldrvc	r0, [r4, -r0]
     414:	8b610400 	blhi	184141c <__Stack_Size+0x1840c1c>
     418:	14000000 	strne	r0, [r0], #-0
     41c:	04007762 	streq	r7, [r0], #-1890	; 0x762
     420:	0002e868 	andeq	lr, r2, r8, ror #16
     424:	30070000 	andcc	r0, r7, r0
     428:	04000009 	streq	r0, [r0], #-9
     42c:	00030c69 	andeq	r0, r3, r9, ror #24
     430:	01140f00 	tsteq	r4, r0, lsl #30
     434:	041c0000 	ldreq	r0, [ip], #-0
     438:	0003c46b 	andeq	ip, r3, fp, ror #8
     43c:	07670c00 	strbeq	r0, [r7, -r0, lsl #24]!
     440:	6d040000 	stcvs	0, cr0, [r4, #-0]
     444:	00000096 	muleq	r0, r6, r0
     448:	00150c00 	andseq	r0, r5, r0, lsl #24
     44c:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
     450:	00000096 	muleq	r0, r6, r0
     454:	03110c01 	tsteq	r1, #256	; 0x100
     458:	6f040000 	svcvs	0x00040000
     45c:	00000328 	andeq	r0, r0, r8, lsr #6
     460:	01480c02 	cmpeq	r8, r2, lsl #24
     464:	70040000 	andvc	r0, r4, r0
     468:	00000328 	andeq	r0, r0, r8, lsr #6
     46c:	04eb0c04 	strbteq	r0, [fp], #3076	; 0xc04
     470:	71040000 	mrsvc	r0, (UNDEF: 4)
     474:	00000328 	andeq	r0, r0, r8, lsr #6
     478:	06510c06 	ldrbeq	r0, [r1], -r6, lsl #24
     47c:	73040000 	movwvc	r0, #16384	; 0x4000
     480:	00000096 	muleq	r0, r6, r0
     484:	08080c08 	stmdaeq	r8, {r3, sl, fp}
     488:	74040000 	strvc	r0, [r4], #-0
     48c:	00000096 	muleq	r0, r6, r0
     490:	05070c09 	streq	r0, [r7, #-3081]	; 0xc09
     494:	75040000 	strvc	r0, [r4, #-0]
     498:	00000096 	muleq	r0, r6, r0
     49c:	054f0c0a 	strbeq	r0, [pc, #-3082]	; fffff89a <BootRAM+0xef7003b>
     4a0:	76040000 	strvc	r0, [r4], -r0
     4a4:	00000096 	muleq	r0, r6, r0
     4a8:	05d60c0b 	ldrbeq	r0, [r6, #3083]	; 0xc0b
     4ac:	77040000 	strvc	r0, [r4, -r0]
     4b0:	00000096 	muleq	r0, r6, r0
     4b4:	07c80c0c 	strbeq	r0, [r8, ip, lsl #24]
     4b8:	7a040000 	bvc	1004c0 <__Stack_Size+0xffcc0>
     4bc:	000002ad 	andeq	r0, r0, sp, lsr #5
     4c0:	15070010 	strne	r0, [r7, #-16]
     4c4:	04000001 	streq	r0, [r0], #-1
     4c8:	0003337b 	andeq	r3, r3, fp, ror r3
     4cc:	03a90f00 			; <UNDEFINED> instruction: 0x03a90f00
     4d0:	04340000 	ldrteq	r0, [r4], #-0
     4d4:	0004787d 	andeq	r7, r4, sp, ror r8
     4d8:	02960c00 	addseq	r0, r6, #0, 24
     4dc:	7f040000 	svcvc	0x00040000
     4e0:	00000072 	andeq	r0, r0, r2, ror r0
     4e4:	04b80c00 	ldrteq	r0, [r8], #3072	; 0xc00
     4e8:	80040000 	andhi	r0, r4, r0
     4ec:	00000072 	andeq	r0, r0, r2, ror r0
     4f0:	09370c04 	ldmdbeq	r7!, {r2, sl, fp}
     4f4:	83040000 	movwhi	r0, #16384	; 0x4000
     4f8:	00000072 	andeq	r0, r0, r2, ror r0
     4fc:	07780c08 	ldrbeq	r0, [r8, -r8, lsl #24]!
     500:	84040000 	strhi	r0, [r4], #-0
     504:	00000072 	andeq	r0, r0, r2, ror r0
     508:	02c30c0c 	sbceq	r0, r3, #12, 24	; 0xc00
     50c:	96040000 	strls	r0, [r4], -r0
     510:	00000487 	andeq	r0, r0, r7, lsl #9
     514:	006d0c10 	rsbeq	r0, sp, r0, lsl ip
     518:	a1040000 	mrsge	r0, (UNDEF: 4)
     51c:	00000487 	andeq	r0, r0, r7, lsl #9
     520:	09c50c14 	stmibeq	r5, {r2, r4, sl, fp}^
     524:	ab040000 	blge	10052c <__Stack_Size+0xffd2c>
     528:	000004a1 	andeq	r0, r0, r1, lsr #9
     52c:	02d70c18 	sbcseq	r0, r7, #24, 24	; 0x1800
     530:	ad040000 	stcge	0, cr0, [r4, #-0]
     534:	000002a7 	andeq	r0, r0, r7, lsr #5
     538:	03b90c1c 			; <UNDEFINED> instruction: 0x03b90c1c
     53c:	ae040000 	cdpge	0, 0, cr0, cr4, cr0, {0}
     540:	000002a7 	andeq	r0, r0, r7, lsr #5
     544:	01c30c20 	biceq	r0, r3, r0, lsr #24
     548:	af040000 	svcge	0x00040000
     54c:	000002a7 	andeq	r0, r0, r7, lsr #5
     550:	03420c24 	movteq	r0, #11300	; 0x2c24
     554:	b0040000 	andlt	r0, r4, r0
     558:	000002a7 	andeq	r0, r0, r7, lsr #5
     55c:	04670c28 	strbteq	r0, [r7], #-3112	; 0xc28
     560:	b2040000 	andlt	r0, r4, #0
     564:	00000209 	andeq	r0, r0, r9, lsl #4
     568:	1fbc0c2c 	svcne	0x00bc0c2c
     56c:	b3040000 	movwlt	r0, #16384	; 0x4000
     570:	00000096 	muleq	r0, r6, r0
     574:	50100030 	andspl	r0, r0, r0, lsr r0
     578:	87000002 	strhi	r0, [r0, -r2]
     57c:	11000004 	tstne	r0, r4
     580:	00000096 	muleq	r0, r6, r0
     584:	78040400 	stmdavc	r4, {sl}
     588:	10000004 	andne	r0, r0, r4
     58c:	00000250 	andeq	r0, r0, r0, asr r2
     590:	000004a1 	andeq	r0, r0, r1, lsr #9
     594:	00009611 	andeq	r9, r0, r1, lsl r6
     598:	00961100 	addseq	r1, r6, r0, lsl #2
     59c:	04000000 	streq	r0, [r0], #-0
     5a0:	00048d04 	andeq	r8, r4, r4, lsl #26
     5a4:	03aa0700 			; <UNDEFINED> instruction: 0x03aa0700
     5a8:	b5040000 	strlt	r0, [r4, #-0]
     5ac:	000003cf 	andeq	r0, r0, pc, asr #7
     5b0:	00008a0f 	andeq	r8, r0, pc, lsl #20
     5b4:	b7042400 	strlt	r2, [r4, -r0, lsl #8]
     5b8:	0000052b 	andeq	r0, r0, fp, lsr #10
     5bc:	0005a00c 	andeq	sl, r5, ip
     5c0:	72b90400 	adcsvc	r0, r9, #0, 8
     5c4:	00000000 	andeq	r0, r0, r0
     5c8:	00041d0c 	andeq	r1, r4, ip, lsl #26
     5cc:	72ba0400 	adcsvc	r0, sl, #0, 8
     5d0:	04000000 	streq	r0, [r0], #-0
     5d4:	00029b0c 	andeq	r9, r2, ip, lsl #22
     5d8:	72bb0400 	adcsvc	r0, fp, #0, 8
     5dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     5e0:	0004330c 	andeq	r3, r4, ip, lsl #6
     5e4:	72bc0400 	adcsvc	r0, ip, #0, 8
     5e8:	0c000000 	stceq	0, cr0, [r0], {-0}
     5ec:	0000a20c 	andeq	sl, r0, ip, lsl #4
     5f0:	72bd0400 	adcsvc	r0, sp, #0, 8
     5f4:	10000000 	andne	r0, r0, r0
     5f8:	0006a30c 	andeq	sl, r6, ip, lsl #6
     5fc:	72be0400 	adcsvc	r0, lr, #0, 8
     600:	14000000 	strne	r0, [r0], #-0
     604:	0008f80c 	andeq	pc, r8, ip, lsl #16
     608:	72bf0400 	adcsvc	r0, pc, #0, 8
     60c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     610:	0001910c 	andeq	r9, r1, ip, lsl #2
     614:	72c00400 	sbcvc	r0, r0, #0, 8
     618:	1c000000 	stcne	0, cr0, [r0], {-0}
     61c:	0002ad0c 	andeq	sl, r2, ip, lsl #26
     620:	72c10400 	sbcvc	r0, r1, #0, 8
     624:	20000000 	andcs	r0, r0, r0
     628:	008b0700 	addeq	r0, fp, r0, lsl #14
     62c:	c3040000 	movwgt	r0, #16384	; 0x4000
     630:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
     634:	0000fa0e 	andeq	pc, r0, lr, lsl #20
     638:	3d060100 	stfccs	f0, [r6, #-0]
     63c:	00000573 	andeq	r0, r0, r3, ror r5
     640:	0005c60a 	andeq	ip, r5, sl, lsl #12
     644:	570a0000 	strpl	r0, [sl, -r0]
     648:	01000004 	tsteq	r0, r4
     64c:	0000080a 	andeq	r0, r0, sl, lsl #16
     650:	670a0200 	strvs	r0, [sl, -r0, lsl #4]
     654:	03000001 	movweq	r0, #1
     658:	0008d00a 	andeq	sp, r8, sl
     65c:	8c0a0400 	cfstrshi	mvf0, [sl], {-0}
     660:	05000003 	streq	r0, [r0, #-3]
     664:	0004ca0a 	andeq	ip, r4, sl, lsl #20
     668:	1c0a0600 	stcne	6, cr0, [sl], {-0}
     66c:	07000003 	streq	r0, [r0, -r3]
     670:	00fb0700 	rscseq	r0, fp, r0, lsl #14
     674:	46060000 	strmi	r0, [r6], -r0
     678:	00000536 	andeq	r0, r0, r6, lsr r5
     67c:	0008790e 	andeq	r7, r8, lr, lsl #18
     680:	48060100 	stmdami	r6, {r8}
     684:	000005af 	andeq	r0, r0, pc, lsr #11
     688:	0008870a 	andeq	r8, r8, sl, lsl #14
     68c:	5c0a0000 	stcpl	0, cr0, [sl], {-0}
     690:	01000009 	tsteq	r0, r9
     694:	0004e30a 	andeq	lr, r4, sl, lsl #6
     698:	920a0200 	andls	r0, sl, #0, 4
     69c:	03000009 	movweq	r0, #9
     6a0:	0003cd0a 	andeq	ip, r3, sl, lsl #26
     6a4:	f70a0400 			; <UNDEFINED> instruction: 0xf70a0400
     6a8:	05000007 	streq	r0, [r0, #-7]
     6ac:	087a0700 	ldmdaeq	sl!, {r8, r9, sl}^
     6b0:	4f060000 	svcmi	0x00060000
     6b4:	0000057e 	andeq	r0, r0, lr, ror r5
     6b8:	6301020b 	movwvs	r0, #4619	; 0x120b
     6bc:	000005db 	ldrdeq	r0, [r0], -fp
     6c0:	0003010c 	andeq	r0, r3, ip, lsl #2
     6c4:	db640100 	blle	1900acc <__Stack_Size+0x19002cc>
     6c8:	00000005 	andeq	r0, r0, r5
     6cc:	0003080c 	andeq	r0, r3, ip, lsl #16
     6d0:	e0650100 	rsb	r0, r5, r0, lsl #2
     6d4:	01000005 	tsteq	r0, r5
     6d8:	05730800 	ldrbeq	r0, [r3, #-2048]!	; 0x800
     6dc:	96080000 	strls	r0, [r8], -r0
     6e0:	15000000 	strne	r0, [r0, #-0]
     6e4:	00000121 	andeq	r0, r0, r1, lsr #2
     6e8:	50018801 	andpl	r8, r1, r1, lsl #16
     6ec:	01000002 	tsteq	r0, r2
     6f0:	00000603 	andeq	r0, r0, r3, lsl #12
     6f4:	0005f716 	andeq	pc, r5, r6, lsl r7	; <UNPREDICTABLE>
     6f8:	01880100 	orreq	r0, r8, r0, lsl #2
     6fc:	00000096 	muleq	r0, r6, r0
     700:	03281700 	teqeq	r8, #0, 14
     704:	ad010000 	stcge	0, cr0, [r1, #-0]
     708:	04a71801 	strteq	r1, [r7], #2049	; 0x801
     70c:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
     710:	00062301 	andeq	r2, r6, r1, lsl #6
     714:	05611900 	strbeq	r1, [r1, #-2304]!	; 0x900
     718:	c0010000 	andgt	r0, r1, r0
     71c:	0000008b 	andeq	r0, r0, fp, lsl #1
     720:	04731a00 	ldrbteq	r1, [r3], #-2560	; 0xa00
     724:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
     728:	063d0101 	ldrteq	r0, [sp], -r1, lsl #2
     72c:	011b0000 	tsteq	fp, r0
     730:	01000004 	tsteq	r0, r4
     734:	012901f2 	strdeq	r0, [r9, -r2]!
     738:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     73c:	00000581 	andeq	r0, r0, r1, lsl #11
     740:	5501b301 	strpl	fp, [r1, #-769]	; 0x301
     744:	19000006 	stmdbne	r0, {r1, r2}
     748:	00000561 	andeq	r0, r0, r1, ror #10
     74c:	008bb501 	addeq	fp, fp, r1, lsl #10
     750:	1c000000 	stcne	0, cr0, [r0], {-0}
     754:	00000108 	andeq	r0, r0, r8, lsl #2
     758:	0b98a701 	bleq	fe62a364 <BootRAM+0xd59ab05>
     75c:	00020800 	andeq	r0, r2, r0, lsl #16
     760:	9c010000 	stcls	0, cr0, [r1], {-0}
     764:	0004be1d 	andeq	fp, r4, sp, lsl lr
     768:	01570100 	cmpeq	r7, r0, lsl #2
     76c:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
     770:	00000002 	andeq	r0, r0, r2
     774:	9a1d9c01 	bls	767780 <__Stack_Size+0x766f80>
     778:	01000004 	tsteq	r0, r4
     77c:	0ba0015c 	bleq	fe800cf4 <BootRAM+0xd771495>
     780:	00020800 	andeq	r0, r2, r0, lsl #16
     784:	9c010000 	stcls	0, cr0, [r1], {-0}
     788:	0000da1e 	andeq	sp, r0, lr, lsl sl
     78c:	01930100 	orrseq	r0, r3, r0, lsl #2
     790:	00000250 	andeq	r0, r0, r0, asr r2
     794:	08000ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp}
     798:	0000000a 	andeq	r0, r0, sl
     79c:	06c39c01 	strbeq	r9, [r3], r1, lsl #24
     7a0:	631f0000 	tstvs	pc, #0
     7a4:	01000000 	mrseq	r0, (UNDEF: 0)
     7a8:	00960193 	umullseq	r0, r6, r3, r1
     7ac:	00000000 	andeq	r0, r0, r0
     7b0:	73200000 	teqvc	r0, #0
     7b4:	01000001 	tsteq	r0, r1
     7b8:	00960193 	umullseq	r0, r6, r3, r1
     7bc:	51010000 	mrspl	r0, (UNDEF: 1)
     7c0:	02061d00 	andeq	r1, r6, #0, 26
     7c4:	bf010000 	svclt	0x00010000
     7c8:	000bb001 	andeq	fp, fp, r1
     7cc:	00000208 	andeq	r0, r0, r8, lsl #4
     7d0:	1d9c0100 	ldfnes	f0, [ip]
     7d4:	00000153 	andeq	r0, r0, r3, asr r1
     7d8:	b401c401 	strlt	ip, [r1], #-1025	; 0x401
     7dc:	1808000b 	stmdane	r8, {r0, r1, r3}
     7e0:	01000000 	mrseq	r0, (UNDEF: 0)
     7e4:	06681d9c 			; <UNDEFINED> instruction: 0x06681d9c
     7e8:	cb010000 	blgt	407f0 <__Stack_Size+0x3fff0>
     7ec:	000bcc01 	andeq	ip, fp, r1, lsl #24
     7f0:	00000208 	andeq	r0, r0, r8, lsl #4
     7f4:	1d9c0100 	ldfnes	f0, [ip]
     7f8:	000004f7 	strdeq	r0, [r0], -r7
     7fc:	d001d001 	andle	sp, r1, r1
     800:	0208000b 	andeq	r0, r8, #11
     804:	01000000 	mrseq	r0, (UNDEF: 0)
     808:	084c1d9c 	stmdaeq	ip, {r2, r3, r4, r7, r8, sl, fp, ip}^
     80c:	d5010000 	strle	r0, [r1, #-0]
     810:	000bd401 	andeq	sp, fp, r1, lsl #8
     814:	00000208 	andeq	r0, r0, r8, lsl #4
     818:	1d9c0100 	ldfnes	f0, [ip]
     81c:	00000910 	andeq	r0, r0, r0, lsl r9
     820:	d801da01 	stmdale	r1, {r0, r9, fp, ip, lr, pc}
     824:	0208000b 	andeq	r0, r8, #11
     828:	01000000 	mrseq	r0, (UNDEF: 0)
     82c:	02271d9c 	eoreq	r1, r7, #156, 26	; 0x2700
     830:	df010000 	svcle	0x00010000
     834:	000bdc01 	andeq	sp, fp, r1, lsl #24
     838:	00000208 	andeq	r0, r0, r8, lsl #4
     83c:	1d9c0100 	ldfnes	f0, [ip]
     840:	00000859 	andeq	r0, r0, r9, asr r8
     844:	e001e401 	and	lr, r1, r1, lsl #8
     848:	0208000b 	andeq	r0, r8, #11
     84c:	01000000 	mrseq	r0, (UNDEF: 0)
     850:	01ac1d9c 			; <UNDEFINED> instruction: 0x01ac1d9c
     854:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
     858:	000be401 	andeq	lr, fp, r1, lsl #8
     85c:	00000c08 	andeq	r0, r0, r8, lsl #24
     860:	219c0100 	orrscs	r0, ip, r0, lsl #2
     864:	000004b5 			; <UNDEFINED> instruction: 0x000004b5
     868:	f0013d01 			; <UNDEFINED> instruction: 0xf0013d01
     86c:	a808000b 	stmdage	r8, {r0, r1, r3}
     870:	01000000 	mrseq	r0, (UNDEF: 0)
     874:	0007ea9c 	muleq	r7, ip, sl
     878:	00202200 	eoreq	r2, r0, r0, lsl #4
     87c:	07950000 	ldreq	r0, [r5, r0]
     880:	5e230000 	cdppl	0, 2, cr0, cr3, cr0, {0}
     884:	01000007 	tsteq	r0, r7
     888:	008b0148 	addeq	r0, fp, r8, asr #2
     88c:	00210000 	eoreq	r0, r1, r0
     890:	24000000 	strcs	r0, [r0], #-0
     894:	08000bf6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, fp}
     898:	00000e28 	andeq	r0, r0, r8, lsr #28
     89c:	000c5625 	andeq	r5, ip, r5, lsr #12
     8a0:	000e2f08 	andeq	r2, lr, r8, lsl #30
     8a4:	0007b200 	andeq	fp, r7, r0, lsl #4
     8a8:	50012600 	andpl	r2, r1, r0, lsl #12
     8ac:	00007402 	andeq	r7, r0, r2, lsl #8
     8b0:	000c6425 	andeq	r6, ip, r5, lsr #8
     8b4:	000e4108 	andeq	r4, lr, r8, lsl #2
     8b8:	0007c600 	andeq	ip, r7, r0, lsl #12
     8bc:	50012600 	andpl	r2, r1, r0, lsl #12
     8c0:	00007402 	andeq	r7, r0, r2, lsl #8
     8c4:	000c6a25 	andeq	r6, ip, r5, lsr #20
     8c8:	000e5808 	andeq	r5, lr, r8, lsl #16
     8cc:	0007da00 	andeq	sp, r7, r0, lsl #20
     8d0:	50012600 	andpl	r2, r1, r0, lsl #12
     8d4:	00007402 	andeq	r7, r0, r2, lsl #8
     8d8:	000c7a27 	andeq	r7, ip, r7, lsr #20
     8dc:	000e6a08 	andeq	r6, lr, r8, lsl #20
     8e0:	50012600 	andpl	r2, r1, r0, lsl #12
     8e4:	00003001 	andeq	r3, r0, r1
     8e8:	0007ea1e 	andeq	lr, r7, lr, lsl sl
     8ec:	01610100 	cmneq	r1, r0, lsl #2
     8f0:	00000250 	andeq	r0, r0, r0, asr r2
     8f4:	08000c98 	stmdaeq	r0, {r3, r4, r7, sl, fp}
     8f8:	00000074 	andeq	r0, r0, r4, ror r0
     8fc:	083a9c01 	ldmdaeq	sl!, {r0, sl, fp, ip, pc}
     900:	f71f0000 			; <UNDEFINED> instruction: 0xf71f0000
     904:	01000005 	tsteq	r0, r5
     908:	00960161 	addseq	r0, r6, r1, ror #2
     90c:	00700000 	rsbseq	r0, r0, r0
     910:	0e230000 	cdpeq	0, 2, cr0, cr3, cr0, {0}
     914:	01000006 	tsteq	r0, r6
     918:	02a70162 	adceq	r0, r7, #-2147483624	; 0x80000018
     91c:	00aa0000 	adceq	r0, sl, r0
     920:	b2240000 	eorlt	r0, r4, #0
     924:	7b08000c 	blvc	20095c <__Stack_Size+0x20015c>
     928:	2800000e 	stmdacs	r0, {r1, r2, r3}
     92c:	08000ce6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, fp}
     930:	02500126 	subseq	r0, r0, #-2147483639	; 0x80000009
     934:	00000074 	andeq	r0, r0, r4, ror r0
     938:	0002d41e 	andeq	sp, r2, lr, lsl r4
     93c:	019d0100 	orrseq	r0, sp, r0, lsl #2
     940:	00000209 	andeq	r0, r0, r9, lsl #4
     944:	08000d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp}
     948:	0000000c 	andeq	r0, r0, ip
     94c:	086e9c01 	stmdaeq	lr!, {r0, sl, fp, ip, pc}^
     950:	6c290000 	stcvs	0, cr0, [r9], #-0
     954:	01006e65 	tsteq	r0, r5, ror #28
     958:	008b019d 	umulleq	r0, fp, sp, r1
     95c:	00d50000 	sbcseq	r0, r5, r0
     960:	122a0000 	eorne	r0, sl, #0
     964:	8608000d 	strhi	r0, [r8], -sp
     968:	0000000e 	andeq	r0, r0, lr
     96c:	0003b61e 	andeq	fp, r3, lr, lsl r6
     970:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
     974:	00000209 	andeq	r0, r0, r9, lsl #4
     978:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
     97c:	0000000c 	andeq	r0, r0, ip
     980:	08a29c01 	stmiaeq	r2!, {r0, sl, fp, ip, pc}
     984:	6c290000 	stcvs	0, cr0, [r9], #-0
     988:	01006e65 	tsteq	r0, r5, ror #28
     98c:	008b01a2 	addeq	r0, fp, r2, lsr #3
     990:	00f60000 	rscseq	r0, r6, r0
     994:	1e2a0000 	cdpne	0, 2, cr0, cr10, cr0, {0}
     998:	8608000d 	strhi	r0, [r8], -sp
     99c:	0000000e 	andeq	r0, r0, lr
     9a0:	0001c01e 	andeq	ip, r1, lr, lsl r0
     9a4:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     9a8:	00000209 	andeq	r0, r0, r9, lsl #4
     9ac:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
     9b0:	00000020 	andeq	r0, r0, r0, lsr #32
     9b4:	08e29c01 	stmiaeq	r2!, {r0, sl, fp, ip, pc}^
     9b8:	6c290000 	stcvs	0, cr0, [r9], #-0
     9bc:	01006e65 	tsteq	r0, r5, ror #28
     9c0:	008b01a7 	addeq	r0, fp, r7, lsr #3
     9c4:	01170000 	tsteq	r7, r0
     9c8:	211b0000 	tstcs	fp, r0
     9cc:	01000000 	mrseq	r0, (UNDEF: 0)
     9d0:	009601a9 	addseq	r0, r6, r9, lsr #3
     9d4:	382a0000 	stmdacc	sl!, {}	; <UNPREDICTABLE>
     9d8:	8608000d 	strhi	r0, [r8], -sp
     9dc:	0000000e 	andeq	r0, r0, lr
     9e0:	00033f1e 	andeq	r3, r3, lr, lsl pc
     9e4:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
     9e8:	00000209 	andeq	r0, r0, r9, lsl #4
     9ec:	08000d44 	stmdaeq	r0, {r2, r6, r8, sl, fp}
     9f0:	0000000c 	andeq	r0, r0, ip
     9f4:	09169c01 	ldmdbeq	r6, {r0, sl, fp, ip, pc}
     9f8:	6c290000 	stcvs	0, cr0, [r9], #-0
     9fc:	01006e65 	tsteq	r0, r5, ror #28
     a00:	008b01b1 			; <UNDEFINED> instruction: 0x008b01b1
     a04:	01510000 	cmpeq	r1, r0
     a08:	4a2a0000 	bmi	a80a10 <__Stack_Size+0xa80210>
     a0c:	8608000d 	strhi	r0, [r8], -sp
     a10:	0000000e 	andeq	r0, r0, lr
     a14:	0005e52b 	andeq	lr, r5, fp, lsr #10
     a18:	000d5000 	andeq	r5, sp, r0
     a1c:	00002808 	andeq	r2, r0, r8, lsl #16
     a20:	509c0100 	addspl	r0, ip, r0, lsl #2
     a24:	2c000009 	stccs	0, cr0, [r0], {9}
     a28:	000005f6 	strdeq	r0, [r0], -r6
     a2c:	00000172 	andeq	r0, r0, r2, ror r1
     a30:	000d642d 	andeq	r6, sp, sp, lsr #8
     a34:	00001408 	andeq	r1, r0, r8, lsl #8
     a38:	05f62e00 	ldrbeq	r2, [r6, #3584]!	; 0xe00
     a3c:	f3040000 	vhadd.u8	d0, d4, d0
     a40:	249f5001 	ldrcs	r5, [pc], #1	; a48 <__Stack_Size+0x248>
     a44:	08000d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp}
     a48:	00000e7b 	andeq	r0, r0, fp, ror lr
     a4c:	4c2f0000 	stcmi	0, cr0, [pc], #-0	; a54 <__Stack_Size+0x254>
     a50:	01000004 	tsteq	r0, r4
     a54:	000250fc 	strdeq	r5, [r2], -ip
     a58:	5b210100 	blpl	840e60 <__Stack_Size+0x840660>
     a5c:	01000000 	mrseq	r0, (UNDEF: 0)
     a60:	0d78012d 	ldfeqe	f0, [r8, #-180]!	; 0xffffff4c
     a64:	008c0800 	addeq	r0, ip, r0, lsl #16
     a68:	9c010000 	stcls	0, cr0, [r1], {-0}
     a6c:	000009e2 	andeq	r0, r0, r2, ror #19
     a70:	00095030 	andeq	r5, r9, r0, lsr r0
     a74:	000d8800 	andeq	r8, sp, r0, lsl #16
     a78:	00003808 	andeq	r3, r0, r8, lsl #16
     a7c:	01320100 	teqeq	r2, r0, lsl #2
     a80:	000009a5 	andeq	r0, r0, r5, lsr #19
     a84:	000db831 	andeq	fp, sp, r1, lsr r8
     a88:	000ea008 	andeq	sl, lr, r8
     a8c:	52012600 	andpl	r2, r1, #0, 12
     a90:	26007602 	strcs	r7, [r0], -r2, lsl #12
     a94:	3c015101 	stfccs	f5, [r1], {1}
     a98:	05500126 	ldrbeq	r0, [r0, #-294]	; 0x126
     a9c:	0108000c 	tsteq	r8, ip
     aa0:	30000040 	andcc	r0, r0, r0, asr #32
     aa4:	00000623 	andeq	r0, r0, r3, lsr #12
     aa8:	08000dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp}
     aac:	00000050 	andeq	r0, r0, r0, asr r0
     ab0:	d8013901 	stmdale	r1, {r0, r8, fp, ip, sp}
     ab4:	32000009 	andcc	r0, r0, #9
     ab8:	00000050 	andeq	r0, r0, r0, asr r0
     abc:	00063033 	andeq	r3, r6, r3, lsr r0
     ac0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     ac4:	000ddc31 	andeq	sp, sp, r1, lsr ip
     ac8:	000ebc08 	andeq	fp, lr, r8, lsl #24
     acc:	50012600 	andpl	r2, r1, r0, lsl #12
     ad0:	00649102 	rsbeq	r9, r4, r2, lsl #2
     ad4:	82240000 	eorhi	r0, r4, #0
     ad8:	d408000d 	strle	r0, [r8], #-13
     adc:	0000000e 	andeq	r0, r0, lr
     ae0:	0007d234 	andeq	sp, r7, r4, lsr r2
     ae4:	046c0100 	strbteq	r0, [ip], #-256	; 0x100
     ae8:	7008000e 	andvc	r0, r8, lr
     aec:	01000000 	mrseq	r0, (UNDEF: 0)
     af0:	000a609c 	muleq	sl, ip, r0
     af4:	06803500 	streq	r3, [r0], r0, lsl #10
     af8:	8d010000 	stchi	0, cr0, [r1, #-0]
     afc:	00000a60 	andeq	r0, r0, r0, ror #20
     b00:	366c9102 	strbtcc	r9, [ip], -r2, lsl #2
     b04:	00000603 	andeq	r0, r0, r3, lsl #12
     b08:	08000e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp}
     b0c:	00000004 	andeq	r0, r0, r4
     b10:	0a229c01 	beq	8a7b1c <__Stack_Size+0x8a731c>
     b14:	5c240000 	stcpl	0, cr0, [r4], #-0
     b18:	db08000e 	blle	200b58 <__Stack_Size+0x200358>
     b1c:	0000000e 	andeq	r0, r0, lr
     b20:	000e1425 	andeq	r1, lr, r5, lsr #8
     b24:	000ea008 	andeq	sl, lr, r8
     b28:	000a4300 	andeq	r4, sl, r0, lsl #6
     b2c:	52012600 	andpl	r2, r1, #0, 12
     b30:	01263001 	teqeq	r6, r1
     b34:	263c0151 			; <UNDEFINED> instruction: 0x263c0151
     b38:	0c055001 	stceq	0, cr5, [r5], {1}
     b3c:	40010800 	andmi	r0, r1, r0, lsl #16
     b40:	0e1c2500 	cfmul32eq	mvfx2, mvfx12, mvfx0
     b44:	0ee20800 	cdpeq	8, 14, cr0, cr2, cr0, {0}
     b48:	0a560000 	beq	1580b50 <__Stack_Size+0x1580350>
     b4c:	01260000 	teqeq	r6, r0
     b50:	003c0150 	eorseq	r0, ip, r0, asr r1
     b54:	000e3e24 	andeq	r3, lr, r4, lsr #28
     b58:	000ef808 	andeq	pc, lr, r8, lsl #16
     b5c:	80080000 	andhi	r0, r8, r0
     b60:	37000000 	strcc	r0, [r0, -r0]
     b64:	00000645 	andeq	r0, r0, r5, asr #12
     b68:	50011401 	andpl	r1, r1, r1, lsl #8
     b6c:	01000002 	tsteq	r0, r2
     b70:	00056734 	andeq	r6, r5, r4, lsr r7
     b74:	74a00100 	strtvc	r0, [r0], #256	; 0x100
     b78:	3808000e 	stmdacc	r8, {r1, r2, r3}
     b7c:	01000000 	mrseq	r0, (UNDEF: 0)
     b80:	000ab59c 	muleq	sl, ip, r5
     b84:	0a653800 	beq	194eb8c <__Stack_Size+0x194e38c>
     b88:	0e740000 	cdpeq	0, 7, cr0, cr4, cr0, {0}
     b8c:	00700800 	rsbseq	r0, r0, r0, lsl #16
     b90:	a2010000 	andge	r0, r1, #0
     b94:	000e9431 	andeq	r9, lr, r1, lsr r4
     b98:	000ea008 	andeq	sl, lr, r8
     b9c:	52012600 	andpl	r2, r1, #0, 12
     ba0:	01263001 	teqeq	r6, r1
     ba4:	263c0151 			; <UNDEFINED> instruction: 0x263c0151
     ba8:	0c055001 	stceq	0, cr5, [r5], {1}
     bac:	40010800 	andmi	r0, r1, r0, lsl #16
     bb0:	2b000000 	blcs	bb8 <__Stack_Size+0x3b8>
     bb4:	00000603 	andeq	r0, r0, r3, lsl #12
     bb8:	00000000 	andeq	r0, r0, r0
     bbc:	00000004 	andeq	r0, r0, r4
     bc0:	0ad29c01 	beq	ff4a7bcc <BootRAM+0xe41836d>
     bc4:	002a0000 	eoreq	r0, sl, r0
     bc8:	db000000 	blle	bd0 <__Stack_Size+0x3d0>
     bcc:	0000000e 	andeq	r0, r0, lr
     bd0:	00063d2b 	andeq	r3, r6, fp, lsr #26
     bd4:	00000000 	andeq	r0, r0, r0
     bd8:	00001c00 	andeq	r1, r0, r0, lsl #24
     bdc:	ef9c0100 	svc	0x009c0100
     be0:	3900000a 	stmdbcc	r0, {r1, r3}
     be4:	00000649 	andeq	r0, r0, r9, asr #12
     be8:	000001ac 	andeq	r0, r0, ip, lsr #3
     bec:	060b2b00 	streq	r2, [fp], -r0, lsl #22
     bf0:	00000000 	andeq	r0, r0, r0
     bf4:	00180000 	andseq	r0, r8, r0
     bf8:	9c010000 	stcls	0, cr0, [r1], {-0}
     bfc:	00000b0f 	andeq	r0, r0, pc, lsl #22
     c00:	00061733 	andeq	r1, r6, r3, lsr r7
     c04:	00700600 	rsbseq	r0, r0, r0, lsl #12
     c08:	9f1afb09 	svcls	0x001afb09
     c0c:	047d3400 	ldrbteq	r3, [sp], #-1024	; 0x400
     c10:	cb010000 	blgt	40c18 <__Stack_Size+0x40418>
     c14:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
     c18:	000000c8 	andeq	r0, r0, r8, asr #1
     c1c:	0b859c01 	bleq	fe167c28 <BootRAM+0xd0d83c9>
     c20:	263a0000 	ldrtcs	r0, [sl], -r0
     c24:	01000008 	tsteq	r0, r8
     c28:	000573cb 	andeq	r7, r5, fp, asr #7
     c2c:	0001c300 	andeq	ip, r1, r0, lsl #6
     c30:	05613b00 	strbeq	r3, [r1, #-2816]!	; 0xb00
     c34:	cd010000 	stcgt	0, cr0, [r1, #-0]
     c38:	0000008b 	andeq	r0, r0, fp, lsl #1
     c3c:	0000023a 	andeq	r0, r0, sl, lsr r2
     c40:	00060b3c 	andeq	r0, r6, ip, lsr fp
     c44:	000eea00 	andeq	lr, lr, r0, lsl #20
     c48:	00008808 	andeq	r8, r0, r8, lsl #16
     c4c:	65d40100 	ldrbvs	r0, [r4, #256]	; 0x100
     c50:	3200000b 	andcc	r0, r0, #11
     c54:	00000088 	andeq	r0, r0, r8, lsl #1
     c58:	00061739 	andeq	r1, r6, r9, lsr r7
     c5c:	00026100 	andeq	r6, r2, r0, lsl #2
     c60:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     c64:	0000060b 	andeq	r0, r0, fp, lsl #12
     c68:	08000f06 	stmdaeq	r0, {r1, r2, r8, r9, sl, fp}
     c6c:	000000a0 	andeq	r0, r0, r0, lsr #1
     c70:	a032d801 	eorsge	sp, r2, r1, lsl #16
     c74:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
     c78:	00000617 	andeq	r0, r0, r7, lsl r6
     c7c:	00000279 	andeq	r0, r0, r9, ror r2
     c80:	2b000000 	blcs	c88 <__Stack_Size+0x488>
     c84:	00000950 	andeq	r0, r0, r0, asr r9
     c88:	00000000 	andeq	r0, r0, r0
     c8c:	00000048 	andeq	r0, r0, r8, asr #32
     c90:	0bb69c01 	bleq	feda7c9c <BootRAM+0xdd1843d>
     c94:	00310000 	eorseq	r0, r1, r0
     c98:	a0000000 	andge	r0, r0, r0
     c9c:	2600000e 	strcs	r0, [r0], -lr
     ca0:	31015201 	tstcc	r1, r1, lsl #4
     ca4:	01510126 	cmpeq	r1, r6, lsr #2
     ca8:	5001263c 	andpl	r2, r1, ip, lsr r6
     cac:	08000c05 	stmdaeq	r0, {r0, r2, sl, fp}
     cb0:	00004001 	andeq	r4, r0, r1
     cb4:	000a652b 	andeq	r6, sl, fp, lsr #10
     cb8:	00000000 	andeq	r0, r0, r0
     cbc:	00003c00 	andeq	r3, r0, r0, lsl #24
     cc0:	e89c0100 	ldm	ip, {r8}
     cc4:	3100000b 	tstcc	r0, fp
     cc8:	00000000 	andeq	r0, r0, r0
     ccc:	00000ea0 	andeq	r0, r0, r0, lsr #29
     cd0:	02520126 	subseq	r0, r2, #-2147483639	; 0x80000009
     cd4:	01260074 	teqeq	r6, r4, ror r0
     cd8:	263c0151 			; <UNDEFINED> instruction: 0x263c0151
     cdc:	0c055001 	stceq	0, cr5, [r5], {1}
     ce0:	40010800 	andmi	r0, r1, r0, lsl #16
     ce4:	232b0000 	teqcs	fp, #0
     ce8:	74000006 	strvc	r0, [r0], #-6
     cec:	1c08000f 	stcne	0, cr0, [r8], {15}
     cf0:	01000000 	mrseq	r0, (UNDEF: 0)
     cf4:	000c149c 	muleq	ip, ip, r4
     cf8:	06303300 	ldrteq	r3, [r0], -r0, lsl #6
     cfc:	91020000 	mrsls	r0, (UNDEF: 2)
     d00:	0f843174 	svceq	0x00843174
     d04:	0ebc0800 	cdpeq	8, 11, cr0, cr12, cr0, {0}
     d08:	01260000 	teqeq	r6, r0
     d0c:	74910250 	ldrvc	r0, [r1], #592	; 0x250
     d10:	80210000 	eorhi	r0, r1, r0
     d14:	01000000 	mrseq	r0, (UNDEF: 0)
     d18:	0f9001fb 	svceq	0x009001fb
     d1c:	00160800 	andseq	r0, r6, r0, lsl #16
     d20:	9c010000 	stcls	0, cr0, [r1], {-0}
     d24:	00000c4a 	andeq	r0, r0, sl, asr #24
     d28:	0004013d 	andeq	r0, r4, sp, lsr r1
     d2c:	01fd0100 	mvnseq	r0, r0, lsl #2
     d30:	00000129 	andeq	r0, r0, r9, lsr #2
     d34:	31749102 	cmncc	r4, r2, lsl #2
     d38:	08000fa0 	stmdaeq	r0, {r5, r7, r8, r9, sl, fp}
     d3c:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
     d40:	02500126 	subseq	r0, r0, #-2147483639	; 0x80000009
     d44:	00007491 	muleq	r0, r1, r4
     d48:	0000bf3e 	andeq	fp, r0, lr, lsr pc
     d4c:	02050100 	andeq	r0, r5, #0, 2
     d50:	08000fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp}
     d54:	000000e4 	andeq	r0, r0, r4, ror #1
     d58:	0cb49c01 	ldceq	12, cr9, [r4], #4
     d5c:	3d300000 	ldccc	0, cr0, [r0, #-0]
     d60:	f0000006 			; <UNDEFINED> instruction: 0xf0000006
     d64:	b808000f 	stmdalt	r8, {r0, r1, r2, r3}
     d68:	01000000 	mrseq	r0, (UNDEF: 0)
     d6c:	0c840236 	sfmeq	f0, 4, [r4], {54}	; 0x36
     d70:	b8320000 	ldmdalt	r2!, {}	; <UNPREDICTABLE>
     d74:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
     d78:	00000649 	andeq	r0, r0, r9, asr #12
     d7c:	00000291 	muleq	r0, r1, r2
     d80:	443f0000 	ldrtmi	r0, [pc], #-0	; d88 <__Stack_Size+0x588>
     d84:	0f080010 	svceq	0x00080010
     d88:	9700000b 	strls	r0, [r0, -fp]
     d8c:	2600000c 	strcs	r0, [r0], -ip
     d90:	37015001 	strcc	r5, [r1, -r1]
     d94:	10522500 	subsne	r2, r2, r0, lsl #10
     d98:	0b0f0800 	bleq	3c2da0 <__Stack_Size+0x3c25a0>
     d9c:	0caa0000 	stceq	0, cr0, [sl]
     da0:	01260000 	teqeq	r6, r0
     da4:	00300150 	eorseq	r0, r0, r0, asr r1
     da8:	00106c24 	andseq	r6, r0, r4, lsr #24
     dac:	000f0408 	andeq	r0, pc, r8, lsl #8
     db0:	43400000 	movtmi	r0, #0
     db4:	01000005 	tsteq	r0, r5
     db8:	05af0255 	streq	r0, [pc, #597]!	; 1015 <__Stack_Size+0x815>
     dbc:	00000000 	andeq	r0, r0, r0
     dc0:	000c0000 	andeq	r0, ip, r0
     dc4:	9c010000 	stcls	0, cr0, [r1], {-0}
     dc8:	00041441 	andeq	r1, r4, r1, asr #8
     dcc:	d9690100 	stmdble	r9!, {r8}^
     dd0:	0000000c 	andeq	r0, r0, ip
     dd4:	42400210 	submi	r0, r0, #16, 4
     dd8:	00000cde 	ldrdeq	r0, [r0], -lr
     ddc:	01b40404 			; <UNDEFINED> instruction: 0x01b40404
     de0:	02430000 	subeq	r0, r3, #0
     de4:	01000008 	tsteq	r0, r8
     de8:	0000b02b 	andeq	fp, r0, fp, lsr #32
     dec:	74030500 	strvc	r0, [r3], #-1280	; 0x500
     df0:	43200004 	teqmi	r0, #4
     df4:	000002eb 	andeq	r0, r0, fp, ror #5
     df8:	04a73301 	strteq	r3, [r7], #769	; 0x301
     dfc:	03050000 	movweq	r0, #20480	; 0x5000
     e00:	20000014 	andcs	r0, r0, r4, lsl r0
     e04:	001e0743 	andseq	r0, lr, r3, asr #14
     e08:	2b430100 	blcs	10c1210 <__Stack_Size+0x10c0a10>
     e0c:	05000005 	streq	r0, [r0, #-5]
     e10:	00008003 	andeq	r8, r0, r3
     e14:	021a4320 	andseq	r4, sl, #32, 6	; 0x80000000
     e18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     e1c:	000002dd 	ldrdeq	r0, [r0], -sp
     e20:	00a40305 	adceq	r0, r4, r5, lsl #6
     e24:	e8442000 	stmda	r4, {sp}^
     e28:	07000001 	streq	r0, [r0, -r1]
     e2c:	000d3322 	andeq	r3, sp, r2, lsr #6
     e30:	c4040400 	strgt	r0, [r4], #-1024	; 0x400
     e34:	44000003 	strmi	r0, [r0], #-3
     e38:	0000013e 	andeq	r0, r0, lr, lsr r1
     e3c:	0d442507 	cfstr64eq	mvdx2, [r4, #-28]	; 0xffffffe4
     e40:	04040000 	streq	r0, [r4], #-0
     e44:	000004a7 	andeq	r0, r0, r7, lsr #9
     e48:	00051d44 	andeq	r1, r5, r4, asr #26
     e4c:	8b2d0700 	blhi	b42a54 <__Stack_Size+0xb42254>
     e50:	44000000 	strmi	r0, [r0], #-0
     e54:	00000a27 	andeq	r0, r0, r7, lsr #20
     e58:	020f2308 	andeq	r2, pc, #8, 6	; 0x20000000
     e5c:	44440000 	strbmi	r0, [r4], #-0
     e60:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     e64:	00020f24 	andeq	r0, r2, r4, lsr #30
     e68:	020f4500 	andeq	r4, pc, #0, 10
     e6c:	0d7b0000 	ldcleq	0, cr0, [fp, #-0]
     e70:	6b460000 	blvs	1180e78 <__Stack_Size+0x1180678>
     e74:	06000000 	streq	r0, [r0], -r0
     e78:	03d74400 	bicseq	r4, r7, #0, 8
     e7c:	25080000 	strcs	r0, [r8, #-0]
     e80:	00000d6b 	andeq	r0, r0, fp, ror #26
     e84:	0007a844 	andeq	sl, r7, r4, asr #16
     e88:	0f260800 	svceq	0x00260800
     e8c:	43000002 	movwmi	r0, #2
     e90:	000000b1 	strheq	r0, [r0], -r1
     e94:	002c2c06 	eoreq	r2, ip, r6, lsl #24
     e98:	03050000 	movweq	r0, #20480	; 0x5000
     e9c:	20000470 	andcs	r0, r0, r0, ror r4
     ea0:	00009645 	andeq	r9, r0, r5, asr #12
     ea4:	000dad00 	andeq	sl, sp, r0, lsl #26
     ea8:	44004700 	strmi	r4, [r0], #-1792	; 0x700
     eac:	00000041 	andeq	r0, r0, r1, asr #32
     eb0:	0da22501 	cfstr32eq	mvfx2, [r2, #4]!
     eb4:	a5440000 	strbge	r0, [r4, #-0]
     eb8:	01000007 	tsteq	r0, r7
     ebc:	000da226 	andeq	sl, sp, r6, lsr #4
     ec0:	02fb4300 	rscseq	r4, fp, #0, 6
     ec4:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
     ec8:	000000a0 	andeq	r0, r0, r0, lsr #1
     ecc:	05a40305 	streq	r0, [r4, #773]!	; 0x305
     ed0:	39432000 	stmdbcc	r3, {sp}^
     ed4:	01000006 	tsteq	r0, r6
     ed8:	0000c02c 	andeq	ip, r0, ip, lsr #32
     edc:	a0030500 	andge	r0, r3, r0, lsl #10
     ee0:	45200005 	strmi	r0, [r0, #-5]!
     ee4:	00000072 	andeq	r0, r0, r2, ror r0
     ee8:	00000df5 	strdeq	r0, [r0], -r5
     eec:	00006b46 	andeq	r6, r0, r6, asr #22
     ef0:	43000600 	movwmi	r0, #1536	; 0x600
     ef4:	000009b3 			; <UNDEFINED> instruction: 0x000009b3
     ef8:	0de54f01 	stcleq	15, cr4, [r5, #4]!
     efc:	03050000 	movweq	r0, #20480	; 0x5000
     f00:	20000048 	andcs	r0, r0, r8, asr #32
     f04:	00096543 	andeq	r6, r9, r3, asr #10
     f08:	e5590100 	ldrb	r0, [r9, #-256]	; 0x100
     f0c:	0500000d 	streq	r0, [r0, #-13]
     f10:	00006403 	andeq	r6, r0, r3, lsl #8
     f14:	06784320 	ldrbteq	r4, [r8], -r0, lsr #6
     f18:	66010000 	strvs	r0, [r1], -r0
     f1c:	000005ba 			; <UNDEFINED> instruction: 0x000005ba
     f20:	04780305 	ldrbteq	r0, [r8], #-773	; 0x305
     f24:	3b482000 	blcc	1208f2c <__Stack_Size+0x120872c>
     f28:	09000008 	stmdbeq	r0, {r3}
     f2c:	0794496e 	ldreq	r4, [r4, lr, ror #18]
     f30:	460a0000 	strmi	r0, [sl], -r0
     f34:	000e4102 	andeq	r4, lr, r2, lsl #2
     f38:	00961100 	addseq	r1, r6, r0, lsl #2
     f3c:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
     f40:	0000099c 	muleq	r0, ip, r9
     f44:	5802570a 	stmdapl	r2, {r1, r3, r8, r9, sl, ip, lr}
     f48:	1100000e 	tstne	r0, lr
     f4c:	00000096 	muleq	r0, r6, r0
     f50:	00008b11 	andeq	r8, r0, r1, lsl fp
     f54:	7f490000 	svcvc	0x00490000
     f58:	0a000003 	beq	f6c <__Stack_Size+0x76c>
     f5c:	0e6a0240 	cdpeq	2, 6, cr0, cr10, cr0, {2}
     f60:	96110000 	ldrls	r0, [r1], -r0
     f64:	00000000 	andeq	r0, r0, r0
     f68:	0002b24a 	andeq	fp, r2, sl, asr #4
     f6c:	7be90400 	blvc	ffa41f74 <BootRAM+0xe9b2715>
     f70:	1100000e 	tstne	r0, lr
     f74:	00000096 	muleq	r0, r6, r0
     f78:	04874b00 	streq	r4, [r7], #2816	; 0xb00
     f7c:	6d090000 	stcvs	0, cr0, [r9, #-0]
     f80:	000000e5 	andeq	r0, r0, r5, ror #1
     f84:	0002644c 	andeq	r6, r2, ip, asr #8
     f88:	09e50400 	stmibeq	r5!, {sl}^
     f8c:	a0000002 	andge	r0, r0, r2
     f90:	1100000e 	tstne	r0, lr
     f94:	0000008b 	andeq	r0, r0, fp, lsl #1
     f98:	00021a11 	andeq	r1, r2, r1, lsl sl
     f9c:	db490000 	blle	1240fa4 <__Stack_Size+0x12407a4>
     fa0:	03000007 	movweq	r0, #7
     fa4:	0ebc011f 	mrceq	1, 5, r0, cr12, cr15, {0}
     fa8:	80110000 	andshi	r0, r1, r0
     fac:	11000000 	mrsne	r0, (UNDEF: 0)
     fb0:	00000096 	muleq	r0, r6, r0
     fb4:	00009611 	andeq	r9, r0, r1, lsl r6
     fb8:	e1490000 	mrs	r0, (UNDEF: 73)
     fbc:	03000009 	movweq	r0, #9
     fc0:	0ece0134 	mcreq	1, 6, r0, cr14, cr4, {1}
     fc4:	ce110000 	cdpgt	0, 1, cr0, cr1, cr0, {0}
     fc8:	0000000e 	andeq	r0, r0, lr
     fcc:	01290404 	teqeq	r9, r4, lsl #8
     fd0:	bd480000 	stcllt	0, cr0, [r8, #-0]
     fd4:	09000009 	stmdbeq	r0, {r0, r3}
     fd8:	0292486a 	addseq	r4, r2, #6946816	; 0x6a0000
     fdc:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
     fe0:	00027f4d 	andeq	r7, r2, sp, asr #30
     fe4:	01200300 	teqeq	r0, r0, lsl #6
     fe8:	00000025 	andeq	r0, r0, r5, lsr #32
     fec:	00000ef8 	strdeq	r0, [r0], -r8
     ff0:	00002c11 	andeq	r2, r0, r1, lsl ip
     ff4:	5f4e0000 	svcpl	0x004e0000
     ff8:	03000003 	movweq	r0, #3
     ffc:	002c0138 	eoreq	r0, ip, r8, lsr r1
    1000:	34480000 	strbcc	r0, [r8], #-0
    1004:	0b000008 	bleq	102c <__Stack_Size+0x82c>
    1008:	0259001a 	subseq	r0, r9, #26
    100c:	00040000 	andeq	r0, r4, r0
    1010:	000004a9 	andeq	r0, r0, r9, lsr #9
    1014:	06c00104 	strbeq	r0, [r0], r4, lsl #2
    1018:	9a010000 	bls	41020 <__Stack_Size+0x40820>
    101c:	9300000a 	movwls	r0, #10
    1020:	b3000008 	movwlt	r0, #8
    1024:	02000005 	andeq	r0, r0, #5
    1028:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    102c:	04030074 	streq	r0, [r3], #-116	; 0x74
    1030:	00025707 	andeq	r5, r2, r7, lsl #14
    1034:	06010300 	streq	r0, [r1], -r0, lsl #6
    1038:	0000081a 	andeq	r0, r0, sl, lsl r8
    103c:	18080103 	stmdane	r8, {r0, r1, r8}
    1040:	03000008 	movweq	r0, #8
    1044:	065e0502 	ldrbeq	r0, [lr], -r2, lsl #10
    1048:	02030000 	andeq	r0, r3, #0
    104c:	00094907 	andeq	r4, r9, r7, lsl #18
    1050:	05040300 	streq	r0, [r4, #-768]	; 0x300
    1054:	000004da 	ldrdeq	r0, [r0], -sl
    1058:	52070403 	andpl	r0, r7, #50331648	; 0x3000000
    105c:	03000002 	movweq	r0, #2
    1060:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
    1064:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1068:	00024d07 	andeq	r4, r2, r7, lsl #26
    106c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1070:	0000078b 	andeq	r0, r0, fp, lsl #15
    1074:	21080103 	tstcs	r8, r3, lsl #2
    1078:	04000008 	streq	r0, [r0], #-8
    107c:	00363175 	eorseq	r3, r6, r5, ror r1
    1080:	00402801 	subeq	r2, r0, r1, lsl #16
    1084:	75040000 	strvc	r0, [r4, #-0]
    1088:	29010038 	stmdbcs	r1, {r3, r4, r5}
    108c:	00000032 	andeq	r0, r0, r2, lsr r0
    1090:	00003305 	andeq	r3, r0, r5, lsl #6
    1094:	24020800 	strcs	r0, [r2], #-2048	; 0x800
    1098:	000000ab 	andeq	r0, r0, fp, lsr #1
    109c:	0002e006 	andeq	lr, r2, r6
    10a0:	ab260200 	blge	9818a8 <__Stack_Size+0x9810a8>
    10a4:	00000000 	andeq	r0, r0, r0
    10a8:	0003f106 	andeq	pc, r3, r6, lsl #2
    10ac:	71270200 	teqvc	r7, r0, lsl #4
    10b0:	04000000 	streq	r0, [r0], #-0
    10b4:	7c040700 	stcvc	7, cr0, [r4], {-0}
    10b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    10bc:	00000572 	andeq	r0, r0, r2, ror r5
    10c0:	00862902 	addeq	r2, r6, r2, lsl #18
    10c4:	b1090000 	mrslt	r0, (UNDEF: 9)
    10c8:	03000000 	movweq	r0, #0
    10cc:	00001d2c 	andeq	r1, r0, ip, lsr #26
    10d0:	70030500 	andvc	r0, r3, r0, lsl #10
    10d4:	09200004 	stmdbeq	r0!, {r2}
    10d8:	00000a27 	andeq	r0, r0, r7, lsr #20
    10dc:	00b13d04 	adcseq	r3, r1, r4, lsl #26
    10e0:	03050000 	movweq	r0, #20480	; 0x5000
    10e4:	20000160 	andcs	r0, r0, r0, ror #2
    10e8:	00004409 	andeq	r4, r0, r9, lsl #8
    10ec:	b1970400 	orrslt	r0, r7, r0, lsl #8
    10f0:	05000000 	streq	r0, [r0, #-0]
    10f4:	0002bc03 	andeq	fp, r2, r3, lsl #24
    10f8:	00b10a20 	adcseq	r0, r1, r0, lsr #20
    10fc:	00ff0000 	rscseq	r0, pc, r0
    1100:	630b0000 	movwvs	r0, #45056	; 0xb000
    1104:	06000000 	streq	r0, [r0], -r0
    1108:	03d70900 	bicseq	r0, r7, #0, 18
    110c:	cc040000 	stcgt	0, cr0, [r4], {-0}
    1110:	000000ef 	andeq	r0, r0, pc, ror #1
    1114:	00a80305 	adceq	r0, r8, r5, lsl #6
    1118:	a8092000 	stmdage	r9, {sp}
    111c:	04000007 	streq	r0, [r0], #-7
    1120:	0000b14f 	andeq	fp, r0, pc, asr #2
    1124:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    1128:	0a200000 	beq	801130 <__Stack_Size+0x800930>
    112c:	0000007c 	andeq	r0, r0, ip, ror r0
    1130:	00000131 	andeq	r0, r0, r1, lsr r1
    1134:	0000630b 	andeq	r6, r0, fp, lsl #6
    1138:	09001100 	stmdbeq	r0, {r8, ip}
    113c:	00000a24 	andeq	r0, r0, r4, lsr #20
    1140:	01212604 	teqeq	r1, r4, lsl #12
    1144:	03050000 	movweq	r0, #20480	; 0x5000
    1148:	200000e0 	andcs	r0, r0, r0, ror #1
    114c:	00007c0a 	andeq	r7, r0, sl, lsl #24
    1150:	00015200 	andeq	r5, r1, r0, lsl #4
    1154:	00630b00 	rsbeq	r0, r3, r0, lsl #22
    1158:	00080000 	andeq	r0, r8, r0
    115c:	0007a509 	andeq	sl, r7, r9, lsl #10
    1160:	42420400 	submi	r0, r2, #0, 8
    1164:	05000001 	streq	r0, [r0, #-1]
    1168:	00014003 	andeq	r4, r1, r3
    116c:	007c0a20 	rsbseq	r0, ip, r0, lsr #20
    1170:	01730000 	cmneq	r3, r0
    1174:	630b0000 	movwvs	r0, #45056	; 0xb000
    1178:	2c000000 	stccs	0, cr0, [r0], {-0}
    117c:	00410900 	subeq	r0, r1, r0, lsl #18
    1180:	55040000 	strpl	r0, [r4, #-0]
    1184:	00000163 	andeq	r0, r0, r3, ror #2
    1188:	01000305 	tsteq	r0, r5, lsl #6
    118c:	7c0a2000 	stcvc	0, cr2, [sl], {-0}
    1190:	94000000 	strls	r0, [r0], #-0
    1194:	0b000001 	bleq	11a0 <__Stack_Size+0x9a0>
    1198:	00000063 	andeq	r0, r0, r3, rrx
    119c:	87090003 	strhi	r0, [r9, -r3]
    11a0:	0400000a 	streq	r0, [r0], #-10
    11a4:	0001849d 	muleq	r1, sp, r4
    11a8:	fc030500 	stc2	5, cr0, [r3], {-0}
    11ac:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
    11b0:	000009ea 	andeq	r0, r0, sl, ror #19
    11b4:	0121a404 	teqeq	r1, r4, lsl #8
    11b8:	03050000 	movweq	r0, #20480	; 0x5000
    11bc:	2000014c 	andcs	r0, r0, ip, asr #2
    11c0:	00007c0a 	andeq	r7, r0, sl, lsl #24
    11c4:	0001c600 	andeq	ip, r1, r0, lsl #12
    11c8:	00630b00 	rsbeq	r0, r3, r0, lsl #22
    11cc:	00130000 	andseq	r0, r3, r0
    11d0:	000a7309 	andeq	r7, sl, r9, lsl #6
    11d4:	b6aa0400 	strtlt	r0, [sl], r0, lsl #8
    11d8:	05000001 	streq	r0, [r0, #-1]
    11dc:	00016803 	andeq	r6, r1, r3, lsl #16
    11e0:	007c0a20 	rsbseq	r0, ip, r0, lsr #20
    11e4:	01e70000 	mvneq	r0, r0
    11e8:	630b0000 	movwvs	r0, #45056	; 0xb000
    11ec:	0f000000 	svceq	0x00000000
    11f0:	0a4f0900 	beq	13c35f8 <__Stack_Size+0x13c2df8>
    11f4:	b0040000 	andlt	r0, r4, r0
    11f8:	000001d7 	ldrdeq	r0, [r0], -r7
    11fc:	01300305 	teqeq	r0, r5, lsl #6
    1200:	7c0a2000 	stcvc	0, cr2, [sl], {-0}
    1204:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1208:	0b000002 	bleq	1218 <__Stack_Size+0xa18>
    120c:	00000063 	andeq	r0, r0, r3, rrx
    1210:	62090077 	andvs	r0, r9, #119	; 0x77
    1214:	0400000a 	streq	r0, [r0], #-10
    1218:	0001f8b6 			; <UNDEFINED> instruction: 0x0001f8b6
    121c:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
    1220:	0a200001 	beq	80122c <__Stack_Size+0x800a2c>
    1224:	0000007c 	andeq	r0, r0, ip, ror r0
    1228:	00000229 	andeq	r0, r0, r9, lsr #4
    122c:	0000630b 	andeq	r6, r0, fp, lsl #6
    1230:	09006300 	stmdbeq	r0, {r8, r9, sp, lr}
    1234:	00000a13 	andeq	r0, r0, r3, lsl sl
    1238:	0219bd04 	andseq	fp, r9, #4, 26	; 0x100
    123c:	03050000 	movweq	r0, #20480	; 0x5000
    1240:	200001f4 	strdcs	r0, [r0], -r4
    1244:	000a3e09 	andeq	r3, sl, r9, lsl #28
    1248:	19c40400 	stmibne	r4, {sl}^
    124c:	05000002 	streq	r0, [r0, #-2]
    1250:	00025803 	andeq	r5, r2, r3, lsl #16
    1254:	09fd0920 	ldmibeq	sp!, {r5, r8, fp}^
    1258:	ca040000 	bgt	101260 <__Stack_Size+0x100a60>
    125c:	0000007c 	andeq	r0, r0, ip, ror r0
    1260:	00000305 	andeq	r0, r0, r5, lsl #6
    1264:	aa000000 	bge	126c <__Stack_Size+0xa6c>
    1268:	04000004 	streq	r0, [r0], #-4
    126c:	00053300 	andeq	r3, r5, r0, lsl #6
    1270:	c0010400 	andgt	r0, r1, r0, lsl #8
    1274:	01000006 	tsteq	r0, r6
    1278:	00000b54 	andeq	r0, r0, r4, asr fp
    127c:	00000893 	muleq	r0, r3, r8
    1280:	000001e8 	andeq	r0, r0, r8, ror #3
    1284:	00000000 	andeq	r0, r0, r0
    1288:	00000625 	andeq	r0, r0, r5, lsr #12
    128c:	57070402 	strpl	r0, [r7, -r2, lsl #8]
    1290:	03000002 	movweq	r0, #2
    1294:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1298:	01020074 	tsteq	r2, r4, ror r0
    129c:	00081a06 	andeq	r1, r8, r6, lsl #20
    12a0:	08010200 	stmdaeq	r1, {r9}
    12a4:	00000818 	andeq	r0, r0, r8, lsl r8
    12a8:	5e050202 	cdppl	2, 0, cr0, cr5, cr2, {0}
    12ac:	02000006 	andeq	r0, r0, #6
    12b0:	09490702 	stmdbeq	r9, {r1, r8, r9, sl}^
    12b4:	04020000 	streq	r0, [r2], #-0
    12b8:	0004da05 	andeq	sp, r4, r5, lsl #20
    12bc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    12c0:	00000252 	andeq	r0, r0, r2, asr r2
    12c4:	d5050802 	strle	r0, [r5, #-2050]	; 0x802
    12c8:	02000004 	andeq	r0, r0, #4
    12cc:	024d0708 	subeq	r0, sp, #8, 14	; 0x200000
    12d0:	04020000 	streq	r0, [r2], #-0
    12d4:	00078b07 	andeq	r8, r7, r7, lsl #22
    12d8:	3a040400 	bcc	1022e0 <__Stack_Size+0x101ae0>
    12dc:	02000000 	andeq	r0, r0, #0
    12e0:	08210801 	stmdaeq	r1!, {r0, fp}
    12e4:	04040000 	streq	r0, [r4], #-0
    12e8:	00000085 	andeq	r0, r0, r5, lsl #1
    12ec:	00007805 	andeq	r7, r0, r5, lsl #16
    12f0:	33750600 	cmncc	r5, #0, 12
    12f4:	27020032 	smladxcs	r2, r2, r0, r0
    12f8:	00000056 	andeq	r0, r0, r6, asr r0
    12fc:	00387506 	eorseq	r7, r8, r6, lsl #10
    1300:	003a2902 	eorseq	r2, sl, r2, lsl #18
    1304:	01070000 	mrseq	r0, (UNDEF: 7)
    1308:	00b43702 	adcseq	r3, r4, r2, lsl #14
    130c:	b5080000 	strlt	r0, [r8, #-0]
    1310:	00000006 	andeq	r0, r0, r6
    1314:	0001a708 	andeq	sl, r1, r8, lsl #14
    1318:	09000100 	stmdbeq	r0, {r8}
    131c:	0000052d 	andeq	r0, r0, sp, lsr #10
    1320:	009f3702 	addseq	r3, pc, r2, lsl #14
    1324:	670a0000 	strvs	r0, [sl, -r0]
    1328:	0100000b 	tsteq	r0, fp
    132c:	00108c3c 	andseq	r8, r0, ip, lsr ip
    1330:	00002808 	andeq	r2, r0, r8, lsl #16
    1334:	1d9c0100 	ldfnes	f0, [ip]
    1338:	0b000001 	bleq	1344 <__Stack_Size+0xb44>
    133c:	00000b6d 	andeq	r0, r0, sp, ror #22
    1340:	00723c01 	rsbseq	r3, r2, r1, lsl #24
    1344:	02a80000 	adceq	r0, r8, #0
    1348:	690c0000 	stmdbvs	ip, {}	; <UNPREDICTABLE>
    134c:	01007864 	tsteq	r0, r4, ror #16
    1350:	00002c3e 	andeq	r2, r0, lr, lsr ip
    1354:	0002d400 	andeq	sp, r2, r0, lsl #8
    1358:	109c0d00 	addsne	r0, ip, r0, lsl #26
    135c:	03e10800 	mvneq	r0, #0, 16
    1360:	01090000 	mrseq	r0, (UNDEF: 9)
    1364:	010e0000 	mrseq	r0, (UNDEF: 14)
    1368:	3c030550 	cfstr32cc	mvfx0, [r3], {80}	; 0x50
    136c:	00080072 	andeq	r0, r8, r2, ror r0
    1370:	0010aa0f 	andseq	sl, r0, pc, lsl #20
    1374:	0003e108 	andeq	lr, r3, r8, lsl #2
    1378:	50010e00 	andpl	r0, r1, r0, lsl #28
    137c:	73540305 	cmpvc	r4, #335544320	; 0x14000000
    1380:	00000800 	andeq	r0, r0, r0, lsl #16
    1384:	000b1e10 	andeq	r1, fp, r0, lsl lr
    1388:	2c440100 	stfcse	f0, [r4], {-0}
    138c:	b4000000 	strlt	r0, [r0], #-0
    1390:	38080010 	stmdacc	r8, {r4}
    1394:	01000001 	tsteq	r0, r1
    1398:	0003d09c 	muleq	r3, ip, r0
    139c:	0b471100 	bleq	11c57a4 <__Stack_Size+0x11c4fa4>
    13a0:	46010000 	strmi	r0, [r1], -r0
    13a4:	000000b4 	strheq	r0, [r0], -r4
    13a8:	0000030b 	andeq	r0, r0, fp, lsl #6
    13ac:	000ae612 	andeq	lr, sl, r2, lsl r6
    13b0:	b4470100 	strblt	r0, [r7], #-256	; 0x100
    13b4:	00000000 	andeq	r0, r0, r0
    13b8:	000abf11 	andeq	fp, sl, r1, lsl pc
    13bc:	2c580100 	ldfcse	f0, [r8], {-0}
    13c0:	b5000000 	strlt	r0, [r0, #-0]
    13c4:	11000003 	tstne	r0, r3
    13c8:	00000b5b 	andeq	r0, r0, fp, asr fp
    13cc:	002c7401 	eoreq	r7, ip, r1, lsl #8
    13d0:	03f40000 	mvnseq	r0, #0
    13d4:	bc130000 	ldclt	0, cr0, [r3], {-0}
    13d8:	f4080010 	vst4.8	{d0-d3}, [r8 :64], r0
    13dc:	13000003 	movwne	r0, #3
    13e0:	080010c0 	stmdaeq	r0, {r6, r7, ip}
    13e4:	000003fc 	strdeq	r0, [r0], -ip
    13e8:	0010c413 	andseq	ip, r0, r3, lsl r4
    13ec:	00040408 	andeq	r0, r4, r8, lsl #8
    13f0:	10c81300 	sbcne	r1, r8, r0, lsl #6
    13f4:	040c0800 	streq	r0, [ip], #-2048	; 0x800
    13f8:	cc130000 	ldcgt	0, cr0, [r3], {-0}
    13fc:	13080010 	movwne	r0, #32784	; 0x8010
    1400:	13000004 	movwne	r0, #4
    1404:	080010d0 	stmdaeq	r0, {r4, r6, r7, ip}
    1408:	0000041b 	andeq	r0, r0, fp, lsl r4
    140c:	0010d413 	andseq	sp, r0, r3, lsl r4
    1410:	00042308 	andeq	r2, r4, r8, lsl #6
    1414:	10da0d00 	sbcsne	r0, sl, r0, lsl #26
    1418:	03e10800 	mvneq	r0, #0, 16
    141c:	01c50000 	biceq	r0, r5, r0
    1420:	010e0000 	mrseq	r0, (UNDEF: 14)
    1424:	44030550 	strmi	r0, [r3], #-1360	; 0x550
    1428:	00080072 	andeq	r0, r8, r2, ror r0
    142c:	0010e20d 	andseq	lr, r0, sp, lsl #4
    1430:	00042a08 	andeq	r2, r4, r8, lsl #20
    1434:	0001e100 	andeq	lr, r1, r0, lsl #2
    1438:	51010e00 	tstpl	r1, r0, lsl #28
    143c:	010e3f01 	tsteq	lr, r1, lsl #30
    1440:	000c0550 	andeq	r0, ip, r0, asr r5
    1444:	0040010c 	subeq	r0, r0, ip, lsl #2
    1448:	0010ea0d 	andseq	lr, r0, sp, lsl #20
    144c:	0003e108 	andeq	lr, r3, r8, lsl #2
    1450:	0001f800 	andeq	pc, r1, r0, lsl #16
    1454:	50010e00 	andpl	r0, r1, r0, lsl #28
    1458:	725c0305 	subsvc	r0, ip, #335544320	; 0x14000000
    145c:	0d000800 	stceq	8, cr0, [r0, #-0]
    1460:	080010f0 	stmdaeq	r0, {r4, r5, r6, r7, ip}
    1464:	00000445 	andeq	r0, r0, r5, asr #8
    1468:	0000020f 	andeq	r0, r0, pc, lsl #4
    146c:	0550010e 	ldrbeq	r0, [r0, #-270]	; 0x10e
    1470:	0080000c 	addeq	r0, r0, ip
    1474:	0e0d0008 	cdpeq	0, 0, cr0, cr13, cr8, {0}
    1478:	5b080011 	blpl	2014c4 <__Stack_Size+0x200cc4>
    147c:	3d000004 	stccc	0, cr0, [r0, #-16]
    1480:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1484:	44035301 	strmi	r5, [r3], #-769	; 0x301
    1488:	010e243e 	tsteq	lr, lr, lsr r4
    148c:	0e350152 	mrceq	1, 1, r0, cr5, cr2, {2}
    1490:	3d015101 	stfccs	f5, [r1, #-4]
    1494:	0550010e 	ldrbeq	r0, [r0, #-270]	; 0x10e
    1498:	0110000c 	tsteq	r0, ip
    149c:	7d020e40 	stcvc	14, cr0, [r2, #-256]	; 0xffffff00
    14a0:	00300100 	eorseq	r0, r0, r0, lsl #2
    14a4:	0011220d 	andseq	r2, r1, sp, lsl #4
    14a8:	00045b08 	andeq	r5, r4, r8, lsl #22
    14ac:	00026c00 	andeq	r6, r2, r0, lsl #24
    14b0:	53010e00 	movwpl	r0, #7680	; 0x1e00
    14b4:	24404003 	strbcs	r4, [r0], #-3
    14b8:	0152010e 	cmpeq	r2, lr, lsl #2
    14bc:	51010e31 	tstpl	r1, r1, lsr lr
    14c0:	010e3d01 	tsteq	lr, r1, lsl #26
    14c4:	000c0550 	andeq	r0, ip, r0, asr r5
    14c8:	0e400110 	wfceq	r0
    14cc:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    14d0:	13000074 	movwne	r0, #116	; 0x74
    14d4:	08001126 	stmdaeq	r0, {r1, r2, r5, r8, ip}
    14d8:	00000481 	andeq	r0, r0, r1, lsl #9
    14dc:	0011300d 	andseq	r3, r1, sp
    14e0:	0003e108 	andeq	lr, r3, r8, lsl #2
    14e4:	00028c00 	andeq	r8, r2, r0, lsl #24
    14e8:	50010e00 	andpl	r0, r1, r0, lsl #28
    14ec:	72f80305 	rscsvc	r0, r8, #335544320	; 0x14000000
    14f0:	13000800 	movwne	r0, #2048	; 0x800
    14f4:	08001134 	stmdaeq	r0, {r2, r4, r5, r8, ip}
    14f8:	00000492 	muleq	r0, r2, r4
    14fc:	00113c0d 	andseq	r3, r1, sp, lsl #24
    1500:	0003e108 	andeq	lr, r3, r8, lsl #2
    1504:	0002ac00 	andeq	sl, r2, r0, lsl #24
    1508:	50010e00 	andpl	r0, r1, r0, lsl #28
    150c:	72700305 	rsbsvc	r0, r0, #335544320	; 0x14000000
    1510:	0d000800 	stceq	8, cr0, [r0, #-0]
    1514:	0800114e 	stmdaeq	r0, {r1, r2, r3, r6, r8, ip}
    1518:	0000045b 	andeq	r0, r0, fp, asr r4
    151c:	000002da 	ldrdeq	r0, [r0], -sl
    1520:	0353010e 	cmpeq	r3, #-2147483645	; 0x80000003
    1524:	0e243e44 	cdpeq	14, 2, cr3, cr4, cr4, {2}
    1528:	35015201 	strcc	r5, [r1, #-513]	; 0x201
    152c:	0151010e 	cmpeq	r1, lr, lsl #2
    1530:	50010e3d 	andpl	r0, r1, sp, lsr lr
    1534:	10000c05 	andne	r0, r0, r5, lsl #24
    1538:	020e4001 	andeq	r4, lr, #1
    153c:	3001007d 	andcc	r0, r1, sp, ror r0
    1540:	11680d00 	cmnne	r8, r0, lsl #26
    1544:	045b0800 	ldrbeq	r0, [fp], #-2048	; 0x800
    1548:	03090000 	movweq	r0, #36864	; 0x9000
    154c:	010e0000 	mrseq	r0, (UNDEF: 14)
    1550:	40400353 	submi	r0, r0, r3, asr r3
    1554:	52010e24 	andpl	r0, r1, #36, 28	; 0x240
    1558:	010e3101 	tsteq	lr, r1, lsl #2
    155c:	0e3d0151 	mrceq	1, 1, r0, cr13, cr1, {2}
    1560:	0c055001 	stceq	0, cr5, [r5], {1}
    1564:	40011000 	andmi	r1, r1, r0
    1568:	007d020e 	rsbseq	r0, sp, lr, lsl #4
    156c:	00007502 	andeq	r7, r0, r2, lsl #10
    1570:	00116c13 	andseq	r6, r1, r3, lsl ip
    1574:	00048108 	andeq	r8, r4, r8, lsl #2
    1578:	11760d00 	cmnne	r6, r0, lsl #26
    157c:	03e10800 	mvneq	r0, #0, 16
    1580:	03290000 	teqeq	r9, #0
    1584:	010e0000 	mrseq	r0, (UNDEF: 14)
    1588:	f8030550 			; <UNDEFINED> instruction: 0xf8030550
    158c:	00080072 	andeq	r0, r8, r2, ror r0
    1590:	00117a13 	andseq	r7, r1, r3, lsl sl
    1594:	00049208 	andeq	r9, r4, r8, lsl #4
    1598:	11840d00 	orrne	r0, r4, r0, lsl #26
    159c:	03e10800 	mvneq	r0, #0, 16
    15a0:	03490000 	movteq	r0, #36864	; 0x9000
    15a4:	010e0000 	mrseq	r0, (UNDEF: 14)
    15a8:	10030550 	andne	r0, r3, r0, asr r5
    15ac:	00080073 	andeq	r0, r8, r3, ror r0
    15b0:	00118a0d 	andseq	r8, r1, sp, lsl #20
    15b4:	00049f08 	andeq	r9, r4, r8, lsl #30
    15b8:	00036000 	andeq	r6, r3, r0
    15bc:	50010e00 	andpl	r0, r1, r0, lsl #28
    15c0:	80740c05 	rsbshi	r0, r4, r5, lsl #24
    15c4:	0d000800 	stceq	8, cr0, [r0, #-0]
    15c8:	08001196 	stmdaeq	r0, {r1, r2, r4, r7, r8, ip}
    15cc:	000003e1 	andeq	r0, r0, r1, ror #7
    15d0:	00000377 	andeq	r0, r0, r7, ror r3
    15d4:	0550010e 	ldrbeq	r0, [r0, #-270]	; 0x10e
    15d8:	0072c803 	rsbseq	ip, r2, r3, lsl #16
    15dc:	a80d0008 	stmdage	sp, {r3}
    15e0:	5b080011 	blpl	20162c <__Stack_Size+0x200e2c>
    15e4:	a5000004 	strge	r0, [r0, #-4]
    15e8:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    15ec:	44035301 	strmi	r5, [r3], #-769	; 0x301
    15f0:	010e243e 	tsteq	lr, lr, lsr r4
    15f4:	0e350152 	mrceq	1, 1, r0, cr5, cr2, {2}
    15f8:	3d015101 	stfccs	f5, [r1, #-4]
    15fc:	0550010e 	ldrbeq	r0, [r0, #-270]	; 0x10e
    1600:	0110000c 	tsteq	r0, ip
    1604:	7d020e40 	stcvc	14, cr0, [r2, #-256]	; 0xffffff00
    1608:	00300100 	eorseq	r0, r0, r0, lsl #2
    160c:	0011b00d 	andseq	fp, r1, sp
    1610:	0003e108 	andeq	lr, r3, r8, lsl #2
    1614:	0003bc00 	andeq	fp, r3, r0, lsl #24
    1618:	50010e00 	andpl	r0, r1, r0, lsl #28
    161c:	72a00305 	adcvc	r0, r0, #335544320	; 0x14000000
    1620:	14000800 	strne	r0, [r0], #-2048	; 0x800
    1624:	080011b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, ip}
    1628:	000003e1 	andeq	r0, r0, r1, ror #7
    162c:	0550010e 	ldrbeq	r0, [r0, #-270]	; 0x10e
    1630:	00727c03 	rsbseq	r7, r2, r3, lsl #24
    1634:	15000008 	strne	r0, [r0, #-8]
    1638:	000000b1 	strheq	r0, [r0], -r1
    163c:	002c2c04 	eoreq	r2, ip, r4, lsl #24
    1640:	03050000 	movweq	r0, #20480	; 0x5000
    1644:	20000470 	andcs	r0, r0, r0, ror r4
    1648:	000ab316 	andeq	fp, sl, r6, lsl r3
    164c:	013b0300 	teqeq	fp, r0, lsl #6
    1650:	000003f4 	strdeq	r0, [r0], -r4
    1654:	00007f17 	andeq	r7, r0, r7, lsl pc
    1658:	19001800 	stmdbne	r0, {fp, ip}
    165c:	00000b12 	andeq	r0, r0, r2, lsl fp
    1660:	19012703 	stmdbne	r1, {r0, r1, r8, r9, sl, sp}
    1664:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1668:	19012803 	stmdbne	r1, {r0, r1, fp, sp}
    166c:	00000ad4 	ldrdeq	r0, [r0], -r4
    1670:	1a012903 	bne	4ba84 <__Stack_Size+0x4b284>
    1674:	000007d2 	ldrdeq	r0, [r0], -r2
    1678:	23195104 	tstcs	r9, #4, 2
    167c:	0300000b 	movweq	r0, #11
    1680:	f019012a 			; <UNDEFINED> instruction: 0xf019012a
    1684:	0300000a 	movweq	r0, #10
    1688:	b51a0125 	ldrlt	r0, [sl, #-293]	; 0x125
    168c:	04000004 	streq	r0, [r0], #-4
    1690:	0aab1b5d 	beq	feac840c <BootRAM+0xda38bad>
    1694:	22030000 	andcs	r0, r3, #0
    1698:	0000b401 	andeq	fp, r0, r1, lsl #8
    169c:	00044500 	andeq	r4, r4, r0, lsl #10
    16a0:	008a1700 	addeq	r1, sl, r0, lsl #14
    16a4:	95170000 	ldrls	r0, [r7, #-0]
    16a8:	00000000 	andeq	r0, r0, r0
    16ac:	000af91b 	andeq	pc, sl, fp, lsl r9	; <UNPREDICTABLE>
    16b0:	012b0300 	teqeq	fp, r0, lsl #6
    16b4:	0000002c 	andeq	r0, r0, ip, lsr #32
    16b8:	0000045b 	andeq	r0, r0, fp, asr r4
    16bc:	00008a17 	andeq	r8, r0, r7, lsl sl
    16c0:	ca160000 	bgt	5816c8 <__Stack_Size+0x580ec8>
    16c4:	0300000a 	movweq	r0, #10
    16c8:	04810123 	streq	r0, [r1], #291	; 0x123
    16cc:	8a170000 	bhi	5c16d4 <__Stack_Size+0x5c0ed4>
    16d0:	17000000 	strne	r0, [r0, -r0]
    16d4:	00000095 	muleq	r0, r5, r0
    16d8:	00009517 	andeq	r9, r0, r7, lsl r5
    16dc:	008a1700 	addeq	r1, sl, r0, lsl #14
    16e0:	95170000 	ldrls	r0, [r7, #-0]
    16e4:	00000000 	andeq	r0, r0, r0
    16e8:	000b721c 	andeq	r7, fp, ip, lsl r2
    16ec:	b47c0500 	ldrbtlt	r0, [ip], #-1280	; 0x500
    16f0:	92000000 	andls	r0, r0, #0
    16f4:	18000004 	stmdane	r0, {r2}
    16f8:	0b2e1d00 	bleq	b88b00 <__Stack_Size+0xb88300>
    16fc:	7e050000 	cdpvc	0, 0, cr0, cr5, cr0, {0}
    1700:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    1704:	071e0018 			; <UNDEFINED> instruction: 0x071e0018
    1708:	0300000b 	movweq	r0, #11
    170c:	8a17012c 	bhi	5c1bc4 <__Stack_Size+0x5c13c4>
    1710:	00000000 	andeq	r0, r0, r0
    1714:	0017c000 	andseq	ip, r7, r0
    1718:	e6000400 	str	r0, [r0], -r0, lsl #8
    171c:	04000006 	streq	r0, [r0], #-6
    1720:	0006c001 	andeq	ip, r6, r1
    1724:	0c370100 	ldfeqs	f0, [r7], #-0
    1728:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    172c:	02e80000 	rsceq	r0, r8, #0
    1730:	00000000 	andeq	r0, r0, r0
    1734:	06fc0000 	ldrbteq	r0, [ip], r0
    1738:	63020000 	movwvs	r0, #8192	; 0x2000
    173c:	0200000d 	andeq	r0, r0, #13
    1740:	000030d4 	ldrdeq	r3, [r0], -r4
    1744:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1748:	00000257 	andeq	r0, r0, r7, asr r2
    174c:	000d5402 	andeq	r5, sp, r2, lsl #8
    1750:	42280300 	eormi	r0, r8, #0, 6
    1754:	04000000 	streq	r0, [r0], #-0
    1758:	0000102c 	andeq	r1, r0, ip, lsr #32
    175c:	59000804 	stmdbpl	r0, {r2, fp}
    1760:	05000000 	streq	r0, [r0, #-0]
    1764:	00000e71 	andeq	r0, r0, r1, ror lr
    1768:	00000059 	andeq	r0, r0, r9, asr r0
    176c:	04060000 	streq	r0, [r6], #-0
    1770:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
    1774:	0300746e 	movweq	r7, #1134	; 0x46e
    1778:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    177c:	c9020000 	stmdbgt	r2, {}	; <UNPREDICTABLE>
    1780:	0400000f 	streq	r0, [r0], #-15
    1784:	0000741c 	andeq	r7, r0, ip, lsl r4
    1788:	08010300 	stmdaeq	r1, {r8, r9}
    178c:	00000818 	andeq	r0, r0, r8, lsl r8
    1790:	5e050203 	cdppl	2, 0, cr0, cr5, cr3, {0}
    1794:	02000006 	andeq	r0, r0, #6
    1798:	00000cf5 	strdeq	r0, [r0], -r5
    179c:	008d2604 	addeq	r2, sp, r4, lsl #12
    17a0:	02030000 	andeq	r0, r3, #0
    17a4:	00094907 	andeq	r4, r9, r7, lsl #18
    17a8:	05040300 	streq	r0, [r4, #-768]	; 0x300
    17ac:	000004da 	ldrdeq	r0, [r0], -sl
    17b0:	00107802 	andseq	r7, r0, r2, lsl #16
    17b4:	a6380400 	ldrtge	r0, [r8], -r0, lsl #8
    17b8:	03000000 	movweq	r0, #0
    17bc:	02520704 	subseq	r0, r2, #4, 14	; 0x100000
    17c0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    17c4:	0004d505 	andeq	sp, r4, r5, lsl #10
    17c8:	07080300 	streq	r0, [r8, -r0, lsl #6]
    17cc:	0000024d 	andeq	r0, r0, sp, asr #4
    17d0:	8b070403 	blhi	1c27e4 <__Stack_Size+0x1c1fe4>
    17d4:	08000007 	stmdaeq	r0, {r0, r1, r2}
    17d8:	0000c804 	andeq	ip, r0, r4, lsl #16
    17dc:	04080900 	streq	r0, [r8], #-2304	; 0x900
    17e0:	00000074 	andeq	r0, r0, r4, ror r0
    17e4:	00d50408 	sbcseq	r0, r5, r8, lsl #8
    17e8:	01030000 	mrseq	r0, (UNDEF: 3)
    17ec:	00082108 	andeq	r2, r8, r8, lsl #2
    17f0:	e2040800 	and	r0, r4, #0, 16
    17f4:	0a000000 	beq	17fc <__Stack_Size+0xffc>
    17f8:	000000d5 	ldrdeq	r0, [r0], -r5
    17fc:	000fcb02 	andeq	ip, pc, r2, lsl #22
    1800:	692a0500 	stmdbvs	sl!, {r8, sl}
    1804:	02000000 	andeq	r0, r0, #0
    1808:	00000cf7 	strdeq	r0, [r0], -r7
    180c:	00823605 	addeq	r3, r2, r5, lsl #12
    1810:	7a020000 	bvc	81818 <__Stack_Size+0x81018>
    1814:	05000010 	streq	r0, [r0, #-16]
    1818:	00009b42 	andeq	r9, r0, r2, asr #22
    181c:	102e0200 	eorne	r0, lr, r0, lsl #4
    1820:	62030000 	andvs	r0, r3, #0
    1824:	00000037 	andeq	r0, r0, r7, lsr r0
    1828:	3233750b 	eorscc	r7, r3, #46137344	; 0x2c00000
    182c:	a6270600 	strtge	r0, [r7], -r0, lsl #12
    1830:	0b000000 	bleq	1838 <__Stack_Size+0x1038>
    1834:	00363175 	eorseq	r3, r6, r5, ror r1
    1838:	008d2806 	addeq	r2, sp, r6, lsl #16
    183c:	750b0000 	strvc	r0, [fp, #-0]
    1840:	29060038 	stmdbcs	r6, {r3, r4, r5}
    1844:	00000074 	andeq	r0, r0, r4, ror r0
    1848:	00035a02 	andeq	r5, r3, r2, lsl #20
    184c:	3e2f0600 	cfmadda32cc	mvax0, mvax0, mvfx15, mvfx0
    1850:	0c000001 	stceq	0, cr0, [r0], {1}
    1854:	000000a6 	andeq	r0, r0, r6, lsr #1
    1858:	0001e302 	andeq	lr, r1, r2, lsl #6
    185c:	4e300600 	cfmsuba32mi	mvax0, mvax0, mvfx0, mvfx0
    1860:	0c000001 	stceq	0, cr0, [r0], {1}
    1864:	0000008d 	andeq	r0, r0, sp, lsl #1
    1868:	0010f602 	andseq	pc, r0, r2, lsl #12
    186c:	5e330600 	cfmsuba32pl	mvax0, mvax0, mvfx3, mvfx0
    1870:	0a000001 	beq	187c <__Stack_Size+0x107c>
    1874:	0000013e 	andeq	r0, r0, lr, lsr r1
    1878:	3706010d 	strcc	r0, [r6, -sp, lsl #2]
    187c:	00000178 	andeq	r0, r0, r8, ror r1
    1880:	0006b50e 	andeq	fp, r6, lr, lsl #10
    1884:	a70e0000 	strge	r0, [lr, -r0]
    1888:	01000001 	tsteq	r0, r1
    188c:	052d0200 	streq	r0, [sp, #-512]!	; 0x200
    1890:	37060000 	strcc	r0, [r6, -r0]
    1894:	00000163 	andeq	r0, r0, r3, ror #2
    1898:	3b06010d 	blcc	181cd4 <__Stack_Size+0x1814d4>
    189c:	00000198 	muleq	r0, r8, r1
    18a0:	000dd80e 	andeq	sp, sp, lr, lsl #16
    18a4:	360e0000 	strcc	r0, [lr], -r0
    18a8:	01000010 	tsteq	r0, r0, lsl r0
    18ac:	0bdf0200 	bleq	ff7c20b4 <BootRAM+0xe732855>
    18b0:	3b060000 	blcc	1818b8 <__Stack_Size+0x1810b8>
    18b4:	00000183 	andeq	r0, r0, r3, lsl #3
    18b8:	8d07280f 	stchi	8, cr2, [r7, #-60]	; 0xffffffc4
    18bc:	00000223 	andeq	r0, r0, r3, lsr #4
    18c0:	00524310 	subseq	r4, r2, r0, lsl r3
    18c4:	01338e07 	teqeq	r3, r7, lsl #28
    18c8:	11000000 	mrsne	r0, (UNDEF: 0)
    18cc:	000006bb 			; <UNDEFINED> instruction: 0x000006bb
    18d0:	01338f07 	teqeq	r3, r7, lsl #30
    18d4:	10040000 	andne	r0, r4, r0
    18d8:	00524943 	subseq	r4, r2, r3, asr #18
    18dc:	01339007 	teqeq	r3, r7
    18e0:	11080000 	mrsne	r0, (UNDEF: 8)
    18e4:	0000002a 	andeq	r0, r0, sl, lsr #32
    18e8:	01339107 	teqeq	r3, r7, lsl #2
    18ec:	110c0000 	mrsne	r0, (UNDEF: 12)
    18f0:	00000d96 	muleq	r0, r6, sp
    18f4:	01339207 	teqeq	r3, r7, lsl #4
    18f8:	11100000 	tstne	r0, r0
    18fc:	00000445 	andeq	r0, r0, r5, asr #8
    1900:	01339307 	teqeq	r3, r7, lsl #6
    1904:	11140000 	tstne	r4, r0
    1908:	000005ef 	andeq	r0, r0, pc, ror #11
    190c:	01339407 	teqeq	r3, r7, lsl #8
    1910:	11180000 	tstne	r8, r0
    1914:	00000000 	andeq	r0, r0, r0
    1918:	01339507 	teqeq	r3, r7, lsl #10
    191c:	111c0000 	tstne	ip, r0
    1920:	0000061e 	andeq	r0, r0, lr, lsl r6
    1924:	01339607 	teqeq	r3, r7, lsl #12
    1928:	10200000 	eorne	r0, r0, r0
    192c:	00525343 	subseq	r5, r2, r3, asr #6
    1930:	01339707 	teqeq	r3, r7, lsl #14
    1934:	00240000 	eoreq	r0, r4, r0
    1938:	000eb102 	andeq	fp, lr, r2, lsl #2
    193c:	a3980700 	orrsge	r0, r8, #0, 14
    1940:	12000001 	andne	r0, r0, #1
    1944:	9b07033c 	blls	1c263c <__Stack_Size+0x1c1e3c>
    1948:	000002c3 	andeq	r0, r0, r3, asr #5
    194c:	000cab11 	andeq	sl, ip, r1, lsl fp
    1950:	d39c0700 	orrsle	r0, ip, #0, 14
    1954:	00000002 	andeq	r0, r0, r2
    1958:	000f2a11 	andeq	r2, pc, r1, lsl sl	; <UNPREDICTABLE>
    195c:	d89d0700 	ldmle	sp, {r8, r9, sl}
    1960:	08000002 	stmdaeq	r0, {r1}
    1964:	0010d511 	andseq	sp, r0, r1, lsl r5
    1968:	e89e0700 	ldm	lr, {r8, r9, sl}
    196c:	80000002 	andhi	r0, r0, r2
    1970:	000cb911 	andeq	fp, ip, r1, lsl r9
    1974:	d89f0700 	ldmle	pc, {r8, r9, sl}	; <UNPREDICTABLE>
    1978:	88000002 	stmdahi	r0, {r1}
    197c:	00114f13 	andseq	r4, r1, r3, lsl pc
    1980:	eda00700 	stc	7, cr0, [r0]
    1984:	00000002 	andeq	r0, r0, r2
    1988:	0f3e1301 	svceq	0x003e1301
    198c:	a1070000 	mrsge	r0, (UNDEF: 7)
    1990:	000002d8 	ldrdeq	r0, [r0], -r8
    1994:	ac130108 	ldfges	f0, [r3], {8}
    1998:	0700000e 	streq	r0, [r0, -lr]
    199c:	0002f2a2 	andeq	pc, r2, r2, lsr #5
    19a0:	13018000 	movwne	r8, #4096	; 0x1000
    19a4:	00000f48 	andeq	r0, r0, r8, asr #30
    19a8:	02d8a307 	sbcseq	sl, r8, #469762048	; 0x1c000000
    19ac:	01880000 	orreq	r0, r8, r0
    19b0:	0010f113 	andseq	pc, r0, r3, lsl r1	; <UNPREDICTABLE>
    19b4:	f7a40700 			; <UNDEFINED> instruction: 0xf7a40700
    19b8:	00000002 	andeq	r0, r0, r2
    19bc:	0f521302 	svceq	0x00521302
    19c0:	a5070000 	strge	r0, [r7, #-0]
    19c4:	000002fc 	strdeq	r0, [r0], -ip
    19c8:	49140208 	ldmdbmi	r4, {r3, r9}
    19cc:	07005250 	smlsdeq	r0, r0, r2, r5
    19d0:	00031ca6 	andeq	r1, r3, r6, lsr #25
    19d4:	00030000 	andeq	r0, r3, r0
    19d8:	00013315 	andeq	r3, r1, r5, lsl r3
    19dc:	0002d300 	andeq	sp, r2, r0, lsl #6
    19e0:	00bb1600 	adcseq	r1, fp, r0, lsl #12
    19e4:	00010000 	andeq	r0, r1, r0
    19e8:	0002c30c 	andeq	ip, r2, ip, lsl #6
    19ec:	01131500 	tsteq	r3, r0, lsl #10
    19f0:	02e80000 	rsceq	r0, r8, #0
    19f4:	bb160000 	bllt	5819fc <__Stack_Size+0x5811fc>
    19f8:	1d000000 	stcne	0, cr0, [r0, #-0]
    19fc:	02c30c00 	sbceq	r0, r3, #0, 24
    1a00:	c30c0000 	movwgt	r0, #49152	; 0xc000
    1a04:	0c000002 	stceq	0, cr0, [r0], {2}
    1a08:	000002c3 	andeq	r0, r0, r3, asr #5
    1a0c:	0002c30c 	andeq	ip, r2, ip, lsl #6
    1a10:	01131500 	tsteq	r3, r0, lsl #10
    1a14:	030c0000 	movweq	r0, #49152	; 0xc000
    1a18:	bb160000 	bllt	581a20 <__Stack_Size+0x581220>
    1a1c:	3d000000 	stccc	0, cr0, [r0, #-0]
    1a20:	01331500 	teqeq	r3, r0, lsl #10
    1a24:	031c0000 	tsteq	ip, #0
    1a28:	bb160000 	bllt	581a30 <__Stack_Size+0x581230>
    1a2c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1a30:	030c0c00 	movweq	r0, #52224	; 0xcc00
    1a34:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    1a38:	07000010 	smladeq	r0, r0, r0, r0
    1a3c:	00022ea7 	andeq	r2, r2, r7, lsr #29
    1a40:	07040f00 	streq	r0, [r4, -r0, lsl #30]
    1a44:	000365a9 	andeq	r6, r3, r9, lsr #11
    1a48:	05b61100 	ldreq	r1, [r6, #256]!	; 0x100
    1a4c:	aa070000 	bge	1c1a54 <__Stack_Size+0x1c1254>
    1a50:	00000129 	andeq	r0, r0, r9, lsr #2
    1a54:	09701100 	ldmdbeq	r0!, {r8, ip}^
    1a58:	ab070000 	blge	1c1a60 <__Stack_Size+0x1c1260>
    1a5c:	00000129 	andeq	r0, r0, r9, lsr #2
    1a60:	08dd1101 	ldmeq	sp, {r0, r8, ip}^
    1a64:	ac070000 	stcge	0, cr0, [r7], {-0}
    1a68:	00000129 	andeq	r0, r0, r9, lsr #2
    1a6c:	03961102 	orrseq	r1, r6, #-2147483648	; 0x80000000
    1a70:	ad070000 	stcge	0, cr0, [r7, #-0]
    1a74:	00000178 	andeq	r0, r0, r8, ror r1
    1a78:	f5020003 			; <UNDEFINED> instruction: 0xf5020003
    1a7c:	07000001 	streq	r0, [r0, -r1]
    1a80:	00032cae 	andeq	r2, r3, lr, lsr #25
    1a84:	07400f00 	strbeq	r0, [r0, -r0, lsl #30]
    1a88:	000421b0 			; <UNDEFINED> instruction: 0x000421b0
    1a8c:	0d711100 	ldfeqe	f1, [r1, #-0]
    1a90:	b1070000 	mrslt	r0, (UNDEF: 7)
    1a94:	00000153 	andeq	r0, r0, r3, asr r1
    1a98:	103d1100 	eorsne	r1, sp, r0, lsl #2
    1a9c:	b2070000 	andlt	r0, r7, #0
    1aa0:	00000133 	andeq	r0, r0, r3, lsr r1
    1aa4:	0ff31104 	svceq	0x00f31104
    1aa8:	b3070000 	movwlt	r0, #28672	; 0x7000
    1aac:	00000133 	andeq	r0, r0, r3, lsr r1
    1ab0:	0de01108 	stfeqe	f1, [r0, #32]!
    1ab4:	b4070000 	strlt	r0, [r7], #-0
    1ab8:	00000133 	andeq	r0, r0, r3, lsr r1
    1abc:	4353100c 	cmpmi	r3, #12
    1ac0:	b5070052 	strlt	r0, [r7, #-82]	; 0x52
    1ac4:	00000133 	andeq	r0, r0, r3, lsr r1
    1ac8:	43431010 	movtmi	r1, #12304	; 0x3010
    1acc:	b6070052 			; <UNDEFINED> instruction: 0xb6070052
    1ad0:	00000133 	andeq	r0, r0, r3, lsr r1
    1ad4:	0d7e1114 	ldfeqe	f1, [lr, #-80]!	; 0xffffffb0
    1ad8:	b7070000 	strlt	r0, [r7, -r0]
    1adc:	00000431 	andeq	r0, r0, r1, lsr r4
    1ae0:	0e381118 	mrceq	1, 1, r1, cr8, cr8, {0}
    1ae4:	b8070000 	stmdalt	r7, {}	; <UNPREDICTABLE>
    1ae8:	00000133 	andeq	r0, r0, r3, lsr r1
    1aec:	0e5f1124 	rdfeqep	f1, f7, f4
    1af0:	b9070000 	stmdblt	r7, {}	; <UNPREDICTABLE>
    1af4:	00000133 	andeq	r0, r0, r3, lsr r1
    1af8:	0d9f1128 	ldfeqs	f1, [pc, #160]	; 1ba0 <__Stack_Size+0x13a0>
    1afc:	ba070000 	blt	1c1b04 <__Stack_Size+0x1c1304>
    1b00:	00000133 	andeq	r0, r0, r3, lsr r1
    1b04:	0c0b112c 	stfeqs	f1, [fp], {44}	; 0x2c
    1b08:	bb070000 	bllt	1c1b10 <__Stack_Size+0x1c1310>
    1b0c:	00000133 	andeq	r0, r0, r3, lsr r1
    1b10:	0f081130 	svceq	0x00081130
    1b14:	bc070000 	stclt	0, cr0, [r7], {-0}
    1b18:	00000133 	andeq	r0, r0, r3, lsr r1
    1b1c:	0fe11134 	svceq	0x00e11134
    1b20:	bd070000 	stclt	0, cr0, [r7, #-0]
    1b24:	00000133 	andeq	r0, r0, r3, lsr r1
    1b28:	0d831138 	stfeqs	f1, [r3, #224]	; 0xe0
    1b2c:	be070000 	cdplt	0, 0, cr0, cr7, cr0, {0}
    1b30:	00000133 	andeq	r0, r0, r3, lsr r1
    1b34:	3315003c 	tstcc	r5, #60	; 0x3c
    1b38:	31000001 	tstcc	r0, r1
    1b3c:	16000004 	strne	r0, [r0], -r4
    1b40:	000000bb 	strheq	r0, [r0], -fp
    1b44:	210c0002 	tstcs	ip, r2
    1b48:	02000004 	andeq	r0, r0, #4
    1b4c:	00001047 	andeq	r1, r0, r7, asr #32
    1b50:	0370bf07 	cmneq	r0, #7, 30
    1b54:	1c0f0000 	stcne	0, cr0, [pc], {-0}
    1b58:	04f0c107 	ldrbteq	ip, [r0], #263	; 0x107
    1b5c:	53100000 	tstpl	r0, #0
    1b60:	c3070052 	movwgt	r0, #28754	; 0x7052
    1b64:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1b68:	0f2a1100 	svceq	0x002a1100
    1b6c:	c4070000 	strgt	r0, [r7], #-0
    1b70:	000000f2 	strdeq	r0, [r0], -r2
    1b74:	52441002 	subpl	r1, r4, #2
    1b78:	f0c50700 			; <UNDEFINED> instruction: 0xf0c50700
    1b7c:	04000004 	streq	r0, [r0], #-4
    1b80:	000f3411 	andeq	r3, pc, r1, lsl r4	; <UNPREDICTABLE>
    1b84:	f2c60700 	vabdl.s8	q8, d6, d0
    1b88:	06000000 	streq	r0, [r0], -r0
    1b8c:	52524210 	subspl	r4, r2, #16, 4
    1b90:	f0c70700 			; <UNDEFINED> instruction: 0xf0c70700
    1b94:	08000004 	stmdaeq	r0, {r2}
    1b98:	000f3e11 	andeq	r3, pc, r1, lsl lr	; <UNPREDICTABLE>
    1b9c:	f2c80700 	vabdl.s8	q8, d8, d0
    1ba0:	0a000000 	beq	1ba8 <__Stack_Size+0x13a8>
    1ba4:	31524310 	cmpcc	r2, r0, lsl r3
    1ba8:	f0c90700 			; <UNDEFINED> instruction: 0xf0c90700
    1bac:	0c000004 	stceq	0, cr0, [r0], {4}
    1bb0:	000f4811 	andeq	r4, pc, r1, lsl r8	; <UNPREDICTABLE>
    1bb4:	f2ca0700 	vabdl.s8	q8, d10, d0
    1bb8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1bbc:	32524310 	subscc	r4, r2, #16, 6	; 0x40000000
    1bc0:	f0cb0700 			; <UNDEFINED> instruction: 0xf0cb0700
    1bc4:	10000004 	andne	r0, r0, r4
    1bc8:	000f5211 	andeq	r5, pc, r1, lsl r2	; <UNPREDICTABLE>
    1bcc:	f2cc0700 	vabdl.s8	q8, d12, d0
    1bd0:	12000000 	andne	r0, r0, #0
    1bd4:	33524310 	cmpcc	r2, #16, 6	; 0x40000000
    1bd8:	f0cd0700 			; <UNDEFINED> instruction: 0xf0cd0700
    1bdc:	14000004 	strne	r0, [r0], #-4
    1be0:	000f5c11 	andeq	r5, pc, r1, lsl ip	; <UNPREDICTABLE>
    1be4:	f2ce0700 	vabdl.s8	q8, d14, d0
    1be8:	16000000 	strne	r0, [r0], -r0
    1bec:	000c8f11 	andeq	r8, ip, r1, lsl pc
    1bf0:	f0cf0700 			; <UNDEFINED> instruction: 0xf0cf0700
    1bf4:	18000004 	stmdane	r0, {r2}
    1bf8:	000f6611 	andeq	r6, pc, r1, lsl r6	; <UNPREDICTABLE>
    1bfc:	f2d00700 	vabdl.s16	q8, d0, d0
    1c00:	1a000000 	bne	1c08 <__Stack_Size+0x1408>
    1c04:	00f20c00 	rscseq	r0, r2, r0, lsl #24
    1c08:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    1c0c:	0700000d 	streq	r0, [r0, -sp]
    1c10:	000441d1 	ldrdeq	r4, [r4], -r1
    1c14:	0c510400 	cfldrdeq	mvd0, [r1], {-0}
    1c18:	07080000 	streq	r0, [r8, -r0]
    1c1c:	000524e2 	andeq	r2, r5, r2, ror #9
    1c20:	52431000 	subpl	r1, r3, #0
    1c24:	33e30700 	mvncc	r0, #0, 14
    1c28:	00000001 	andeq	r0, r0, r1
    1c2c:	52534310 	subspl	r4, r3, #16, 6	; 0x40000000
    1c30:	33e40700 	mvncc	r0, #0, 14
    1c34:	04000001 	streq	r0, [r0], #-1
    1c38:	0cd30400 	cfldrdeq	mvd0, [r3], {0}
    1c3c:	07380000 	ldreq	r0, [r8, -r0]!
    1c40:	000658ef 	andeq	r5, r6, pc, ror #17
    1c44:	0f341100 	svceq	0x00341100
    1c48:	f0070000 			; <UNDEFINED> instruction: 0xf0070000
    1c4c:	00000658 	andeq	r0, r0, r8, asr r6
    1c50:	52441000 	subpl	r1, r4, #0
    1c54:	f1070031 			; <UNDEFINED> instruction: 0xf1070031
    1c58:	00000143 	andeq	r0, r0, r3, asr #2
    1c5c:	0f3e1104 	svceq	0x003e1104
    1c60:	f2070000 	vhadd.s8	d0, d7, d0
    1c64:	0000065d 	andeq	r0, r0, sp, asr r6
    1c68:	52441006 	subpl	r1, r4, #6
    1c6c:	f3070032 	vqadd.u8	d0, d7, d18
    1c70:	00000143 	andeq	r0, r0, r3, asr #2
    1c74:	0f481108 	svceq	0x00481108
    1c78:	f4070000 	vst4.8	{d0-d3}, [r7], r0
    1c7c:	0000065d 	andeq	r0, r0, sp, asr r6
    1c80:	5244100a 	subpl	r1, r4, #10
    1c84:	f5070033 			; <UNDEFINED> instruction: 0xf5070033
    1c88:	00000143 	andeq	r0, r0, r3, asr #2
    1c8c:	0f52110c 	svceq	0x0052110c
    1c90:	f6070000 			; <UNDEFINED> instruction: 0xf6070000
    1c94:	0000065d 	andeq	r0, r0, sp, asr r6
    1c98:	5244100e 	subpl	r1, r4, #14
    1c9c:	f7070034 			; <UNDEFINED> instruction: 0xf7070034
    1ca0:	00000143 	andeq	r0, r0, r3, asr #2
    1ca4:	0f5c1110 	svceq	0x005c1110
    1ca8:	f8070000 			; <UNDEFINED> instruction: 0xf8070000
    1cac:	0000065d 	andeq	r0, r0, sp, asr r6
    1cb0:	52441012 	subpl	r1, r4, #18
    1cb4:	f9070035 			; <UNDEFINED> instruction: 0xf9070035
    1cb8:	00000143 	andeq	r0, r0, r3, asr #2
    1cbc:	0f661114 	svceq	0x00661114
    1cc0:	fa070000 	blx	1c1cc8 <__Stack_Size+0x1c14c8>
    1cc4:	0000065d 	andeq	r0, r0, sp, asr r6
    1cc8:	52441016 	subpl	r1, r4, #22
    1ccc:	fb070036 	blx	1c1dae <__Stack_Size+0x1c15ae>
    1cd0:	00000143 	andeq	r0, r0, r3, asr #2
    1cd4:	11731118 	cmnne	r3, r8, lsl r1
    1cd8:	fc070000 	stc2	0, cr0, [r7], {-0}
    1cdc:	0000065d 	andeq	r0, r0, sp, asr r6
    1ce0:	5244101a 	subpl	r1, r4, #26
    1ce4:	fd070037 	stc2	0, cr0, [r7, #-220]	; 0xffffff24
    1ce8:	00000143 	andeq	r0, r0, r3, asr #2
    1cec:	0f70111c 	svceq	0x0070111c
    1cf0:	fe070000 	cdp2	0, 0, cr0, cr7, cr0, {0}
    1cf4:	0000065d 	andeq	r0, r0, sp, asr r6
    1cf8:	5244101e 	subpl	r1, r4, #30
    1cfc:	ff070038 			; <UNDEFINED> instruction: 0xff070038
    1d00:	00000143 	andeq	r0, r0, r3, asr #2
    1d04:	0f7a1720 	svceq	0x007a1720
    1d08:	00070000 	andeq	r0, r7, r0
    1d0c:	00065d01 	andeq	r5, r6, r1, lsl #26
    1d10:	44182200 	ldrmi	r2, [r8], #-512	; 0x200
    1d14:	07003952 	smlsdeq	r0, r2, r9, r3
    1d18:	01430101 	cmpeq	r3, r1, lsl #2
    1d1c:	17240000 	strne	r0, [r4, -r0]!
    1d20:	000010bf 	strheq	r1, [r0], -pc	; <UNPREDICTABLE>
    1d24:	5d010207 	sfmpl	f0, 4, [r1, #-28]	; 0xffffffe4
    1d28:	26000006 	strcs	r0, [r0], -r6
    1d2c:	000ea717 	andeq	sl, lr, r7, lsl r7
    1d30:	01030700 	tsteq	r3, r0, lsl #14
    1d34:	00000143 	andeq	r0, r0, r3, asr #2
    1d38:	10ca1728 	sbcne	r1, sl, r8, lsr #14
    1d3c:	04070000 	streq	r0, [r7], #-0
    1d40:	00065d01 	andeq	r5, r6, r1, lsl #26
    1d44:	13172a00 	tstne	r7, #0, 20
    1d48:	07000011 	smladeq	r0, r1, r0, r0
    1d4c:	01330105 	teqeq	r3, r5, lsl #2
    1d50:	182c0000 	stmdane	ip!, {}	; <UNPREDICTABLE>
    1d54:	07005243 	streq	r5, [r0, -r3, asr #4]
    1d58:	01330106 	teqeq	r3, r6, lsl #2
    1d5c:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
    1d60:	00525343 	subseq	r5, r2, r3, asr #6
    1d64:	33010707 	movwcc	r0, #5895	; 0x1707
    1d68:	34000001 	strcc	r0, [r0], #-1
    1d6c:	01130a00 	tsteq	r3, r0, lsl #20
    1d70:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    1d74:	19000001 	stmdbne	r0, {r0}
    1d78:	00000ee5 	andeq	r0, r0, r5, ror #29
    1d7c:	0110070c 	tsteq	r0, ip, lsl #14
    1d80:	000006a4 	andeq	r0, r0, r4, lsr #13
    1d84:	00104217 	andseq	r4, r0, r7, lsl r2
    1d88:	01110700 	tsteq	r1, r0, lsl #14
    1d8c:	000000f2 	strdeq	r0, [r0], -r2
    1d90:	0fbd1700 	svceq	0x00bd1700
    1d94:	12070000 	andne	r0, r7, #0
    1d98:	0000f201 	andeq	pc, r0, r1, lsl #4
    1d9c:	53170200 	tstpl	r7, #0, 4
    1da0:	07000010 	smladeq	r0, r0, r0, r0
    1da4:	00fd0113 	rscseq	r0, sp, r3, lsl r1
    1da8:	17040000 	strne	r0, [r4, -r0]
    1dac:	00001058 	andeq	r1, r0, r8, asr r0
    1db0:	fd011407 	stc2	4, cr1, [r1, #-28]	; 0xffffffe4
    1db4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1db8:	09680f00 	stmdbeq	r8!, {r8, r9, sl, fp}^
    1dbc:	0006d10c 	andeq	sp, r6, ip, lsl #2
    1dc0:	180b1100 	stmdane	fp, {r8, ip}
    1dc4:	0e090000 	cdpeq	0, 0, cr0, cr9, cr0, {0}
    1dc8:	000006d1 	ldrdeq	r0, [r0], -r1
    1dcc:	16c91100 	strbne	r1, [r9], r0, lsl #2
    1dd0:	0f090000 	svceq	0x00090000
    1dd4:	000006e1 	andeq	r0, r0, r1, ror #13
    1dd8:	046c1108 	strbteq	r1, [ip], #-264	; 0x108
    1ddc:	10090000 	andne	r0, r9, r0
    1de0:	000006f1 	strdeq	r0, [r0], -r1
    1de4:	a6150028 	ldrge	r0, [r5], -r8, lsr #32
    1de8:	e1000000 	mrs	r0, (UNDEF: 0)
    1dec:	16000006 	strne	r0, [r0], -r6
    1df0:	000000bb 	strheq	r0, [r0], -fp
    1df4:	a6150001 	ldrge	r0, [r5], -r1
    1df8:	f1000000 	cps	#0
    1dfc:	16000006 	strne	r0, [r0], -r6
    1e00:	000000bb 	strheq	r0, [r0], -fp
    1e04:	74150007 	ldrvc	r0, [r5], #-7
    1e08:	01000000 	mrseq	r0, (UNDEF: 0)
    1e0c:	16000007 	strne	r0, [r0], -r7
    1e10:	000000bb 	strheq	r0, [r0], -fp
    1e14:	0902003f 	stmdbeq	r2, {r0, r1, r2, r3, r4, r5}
    1e18:	09000010 	stmdbeq	r0, {r4}
    1e1c:	0006a412 	andeq	sl, r6, r2, lsl r4
    1e20:	01100f00 	tsteq	r0, r0, lsl #30
    1e24:	00075d5f 	andeq	r5, r7, pc, asr sp
    1e28:	0c9c1100 	ldfeqs	f1, [ip], {0}
    1e2c:	61010000 	mrsvs	r0, (UNDEF: 1)
    1e30:	000000fd 	strdeq	r0, [r0], -sp
    1e34:	0c261100 	stfeqs	f1, [r6], #-0
    1e38:	66010000 	strvs	r0, [r1], -r0
    1e3c:	000000f2 	strdeq	r0, [r0], -r2
    1e40:	0c421104 	stfeqe	f1, [r2], {4}
    1e44:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    1e48:	000000f2 	strdeq	r0, [r0], -r2
    1e4c:	0ce81106 	stfeqe	f1, [r8], #24
    1e50:	6c010000 	stcvs	0, cr0, [r1], {-0}
    1e54:	000000f2 	strdeq	r0, [r0], -r2
    1e58:	0e081108 	adfeqe	f1, f0, #0.0
    1e5c:	73010000 	movwvc	r0, #4096	; 0x1000
    1e60:	000000f2 	strdeq	r0, [r0], -r2
    1e64:	0e45110a 	dvfeqs	f1, f5, #2.0
    1e68:	76010000 	strvc	r0, [r1], -r0
    1e6c:	000000f2 	strdeq	r0, [r0], -r2
    1e70:	df02000c 	svcle	0x0002000c
    1e74:	01000010 	tsteq	r0, r0, lsl r0
    1e78:	00070c79 	andeq	r0, r7, r9, ror ip
    1e7c:	01010d00 	tsteq	r1, r0, lsl #26
    1e80:	00078392 	muleq	r7, r2, r3
    1e84:	0cc20e00 	stcleq	14, cr0, [r2], {0}
    1e88:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1e8c:	00000c7f 	andeq	r0, r0, pc, ror ip
    1e90:	10930e02 	addsne	r0, r3, r2, lsl #28
    1e94:	00030000 	andeq	r0, r3, r0
    1e98:	00112202 	andseq	r2, r1, r2, lsl #4
    1e9c:	68960100 	ldmvs	r6, {r8}
    1ea0:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    1ea4:	c8990101 	ldmgt	r9, {r0, r8}
    1ea8:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    1eac:	00000f0e 	andeq	r0, r0, lr, lsl #30
    1eb0:	115d0e00 	cmpne	sp, r0, lsl #28
    1eb4:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    1eb8:	00000d0b 	andeq	r0, r0, fp, lsl #26
    1ebc:	0d370e28 	ldceq	14, cr0, [r7, #-160]!	; 0xffffff60
    1ec0:	00c80000 	sbceq	r0, r8, r0
    1ec4:	0010ae0e 	andseq	sl, r0, lr, lsl #28
    1ec8:	c20e1400 	andgt	r1, lr, #0, 8
    1ecc:	1000000d 	andne	r0, r0, sp
    1ed0:	000ebf0e 	andeq	fp, lr, lr, lsl #30
    1ed4:	840e1c00 	strhi	r1, [lr], #-3072	; 0xc00
    1ed8:	1800000f 	stmdane	r0, {r0, r1, r2, r3}
    1edc:	0ff80200 	svceq	0x00f80200
    1ee0:	a1010000 	mrsge	r0, (UNDEF: 1)
    1ee4:	0000078e 	andeq	r0, r0, lr, lsl #15
    1ee8:	a301040f 	movwge	r0, #5135	; 0x140f
    1eec:	00000800 	andeq	r0, r0, r0, lsl #16
    1ef0:	000bb511 	andeq	fp, fp, r1, lsl r5
    1ef4:	f2a50100 	vaddw.s32	q0, <illegal reg q2.5>, d0
    1ef8:	00000000 	andeq	r0, r0, r0
    1efc:	000f9411 	andeq	r9, pc, r1, lsl r4	; <UNPREDICTABLE>
    1f00:	83a80100 			; <UNDEFINED> instruction: 0x83a80100
    1f04:	02000007 	andeq	r0, r0, #7
    1f08:	000bab11 	andeq	sl, fp, r1, lsl fp
    1f0c:	c8ab0100 	stmiagt	fp!, {r8}
    1f10:	03000007 	movweq	r0, #7
    1f14:	105d0200 	subsne	r0, sp, r0, lsl #4
    1f18:	ad010000 	stcge	0, cr0, [r1, #-0]
    1f1c:	000007d3 	ldrdeq	r0, [r0], -r3
    1f20:	af011c0f 	svcge	0x00011c0f
    1f24:	00000868 	andeq	r0, r0, r8, ror #16
    1f28:	4c524310 	mrrcmi	3, 1, r4, r2, cr0
    1f2c:	68b10100 	ldmvs	r1!, {r8}
    1f30:	00000008 	andeq	r0, r0, r8
    1f34:	48524310 	ldmdami	r2, {r4, r8, r9, lr}^
    1f38:	68b20100 	ldmvs	r2!, {r8}
    1f3c:	04000008 	streq	r0, [r0], #-8
    1f40:	52444910 	subpl	r4, r4, #16, 18	; 0x40000
    1f44:	68b30100 	ldmvs	r3!, {r8}
    1f48:	08000008 	stmdaeq	r0, {r3}
    1f4c:	52444f10 	subpl	r4, r4, #16, 30	; 0x40
    1f50:	68b40100 	ldmvs	r4!, {r8}
    1f54:	0c000008 	stceq	0, cr0, [r0], {8}
    1f58:	000ba011 	andeq	sl, fp, r1, lsl r0
    1f5c:	68b50100 	ldmvs	r5!, {r8}
    1f60:	10000008 	andne	r0, r0, r8
    1f64:	52524210 	subspl	r4, r2, #16, 4
    1f68:	68b60100 	ldmvs	r6!, {r8}
    1f6c:	14000008 	strne	r0, [r0], #-8
    1f70:	00119f11 	andseq	r9, r1, r1, lsl pc
    1f74:	68b70100 	ldmvs	r7!, {r8}
    1f78:	18000008 	stmdane	r0, {r3}
    1f7c:	00fd0c00 	rscseq	r0, sp, r0, lsl #24
    1f80:	e6020000 	str	r0, [r2], -r0
    1f84:	0100000f 	tsteq	r0, pc
    1f88:	00080bb8 			; <UNDEFINED> instruction: 0x00080bb8
    1f8c:	07db1a00 	ldrbeq	r1, [fp, r0, lsl #20]
    1f90:	3a010000 	bcc	41f98 <__Stack_Size+0x41798>
    1f94:	0008a601 	andeq	sl, r8, r1, lsl #12
    1f98:	11341b00 	teqne	r4, r0, lsl #22
    1f9c:	3a010000 	bcc	41fa4 <__Stack_Size+0x417a4>
    1fa0:	00000113 	andeq	r0, r0, r3, lsl r1
    1fa4:	6e69701c 	mcrvs	0, 3, r7, cr9, cr12, {0}
    1fa8:	293a0100 	ldmdbcs	sl!, {r8}
    1fac:	1c000001 	stcne	0, cr0, [r0], {1}
    1fb0:	006c6176 	rsbeq	r6, ip, r6, ror r1
    1fb4:	01293a01 	teqeq	r9, r1, lsl #20
    1fb8:	1d000000 	stcne	0, cr0, [r0, #-0]
    1fbc:	00000fa6 	andeq	r0, r0, r6, lsr #31
    1fc0:	01011f01 	tsteq	r1, r1, lsl #30
    1fc4:	000008cb 	andeq	r0, r0, fp, asr #17
    1fc8:	000f011e 	andeq	r0, pc, lr, lsl r1	; <UNPREDICTABLE>
    1fcc:	011f0100 	tsteq	pc, r0, lsl #2
    1fd0:	000008cb 	andeq	r0, r0, fp, asr #17
    1fd4:	0068631f 	rsbeq	r6, r8, pc, lsl r3
    1fd8:	e7011f01 	str	r1, [r1, -r1, lsl #30]
    1fdc:	00000000 	andeq	r0, r0, r0
    1fe0:	04f50408 	ldrbteq	r0, [r5], #1032	; 0x408
    1fe4:	641d0000 	ldrvs	r0, [sp], #-0
    1fe8:	0100000e 	tsteq	r0, lr
    1fec:	f7010125 			; <UNDEFINED> instruction: 0xf7010125
    1ff0:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    1ff4:	00000f01 	andeq	r0, r0, r1, lsl #30
    1ff8:	cb012501 	blgt	4b404 <__Stack_Size+0x4ac04>
    1ffc:	1f000008 	svcne	0x00000008
    2000:	00727473 	rsbseq	r7, r2, r3, ror r4
    2004:	f7012501 			; <UNDEFINED> instruction: 0xf7012501
    2008:	00000008 	andeq	r0, r0, r8
    200c:	00e70408 	rsceq	r0, r7, r8, lsl #8
    2010:	df1d0000 	svcle	0x001d0000
    2014:	0100000c 	tsteq	r0, ip
    2018:	160101ce 	strne	r0, [r1], -lr, asr #3
    201c:	1f000009 	svcne	0x00000009
    2020:	01006469 	tsteq	r0, r9, ror #8
    2024:	091601ce 	ldmdbeq	r6, {r1, r2, r3, r6, r7, r8}
    2028:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    202c:	00066204 	andeq	r6, r6, r4, lsl #4
    2030:	0bce1d00 	bleq	ff389438 <BootRAM+0xe2f9bd9>
    2034:	47010000 	strmi	r0, [r1, -r0]
    2038:	09360102 	ldmdbeq	r6!, {r1, r8}
    203c:	311e0000 	tstcc	lr, r0
    2040:	0100000d 	tsteq	r0, sp
    2044:	011e0247 	tsteq	lr, r7, asr #4
    2048:	20000000 	andcs	r0, r0, r0
    204c:	00000b91 	muleq	r0, r1, fp
    2050:	7802ab01 	stmdavc	r2, {r0, r8, r9, fp, sp, pc}
    2054:	01000001 	tsteq	r0, r1
    2058:	00000960 	andeq	r0, r0, r0, ror #18
    205c:	000cb01e 	andeq	fp, ip, lr, lsl r0
    2060:	02ab0100 	adceq	r0, fp, #0, 2
    2064:	00000113 	andeq	r0, r0, r3, lsl r1
    2068:	000e2121 	andeq	r2, lr, r1, lsr #2
    206c:	02ac0100 	adceq	r0, ip, #0, 2
    2070:	00000113 	andeq	r0, r0, r3, lsl r1
    2074:	0da42200 	sfmeq	f2, 4, [r4]
    2078:	e1010000 	mrs	r0, (UNDEF: 1)
    207c:	101d0102 	andsne	r0, sp, r2, lsl #2
    2080:	0100000c 	tsteq	r0, ip
    2084:	83010295 	movwhi	r0, #4757	; 0x1295
    2088:	21000009 	tstcs	r0, r9
    208c:	00000bd9 	ldrdeq	r0, [r0], -r9
    2090:	83029601 	movwhi	r9, #9729	; 0x2601
    2094:	00000009 	andeq	r0, r0, r9
    2098:	03210408 	teqeq	r1, #8, 8	; 0x8000000
    209c:	d31d0000 	tstle	sp, #0
    20a0:	0100000f 	tsteq	r0, pc
    20a4:	c7010221 	strgt	r0, [r1, -r1, lsr #4]
    20a8:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
    20ac:	00000e30 	andeq	r0, r0, r0, lsr lr
    20b0:	13022101 	movwne	r2, #8449	; 0x2101
    20b4:	23000001 	movwcs	r0, #1
    20b8:	00000de6 	andeq	r0, r0, r6, ror #27
    20bc:	c2022501 	andgt	r2, r2, #4194304	; 0x400000
    20c0:	21000000 	mrscs	r0, (UNDEF: 0)
    20c4:	00001154 	andeq	r1, r0, r4, asr r1
    20c8:	13022601 	movwne	r2, #9729	; 0x2601
    20cc:	21000001 	tstcs	r0, r1
    20d0:	00000e76 	andeq	r0, r0, r6, ror lr
    20d4:	a2022801 	andge	r2, r2, #65536	; 0x10000
    20d8:	00000009 	andeq	r0, r0, r9
    20dc:	00027f20 	andeq	r7, r2, r0, lsr #30
    20e0:	02f00100 	rscseq	r0, r0, #0, 2
    20e4:	00000030 	andeq	r0, r0, r0, lsr r0
    20e8:	0009f101 	andeq	pc, r9, r1, lsl #2
    20ec:	69701f00 	ldmdbvs	r0!, {r8, r9, sl, fp, ip}^
    20f0:	f001006e 			; <UNDEFINED> instruction: 0xf001006e
    20f4:	00005b02 	andeq	r5, r0, r2, lsl #22
    20f8:	0c7a2100 	ldfeqe	f2, [sl], #-0
    20fc:	f2010000 	vhadd.s8	d0, d1, d0
    2100:	00003002 	andeq	r3, r0, r2
    2104:	78240000 	stmdavc	r4!, {}	; <UNPREDICTABLE>
    2108:	ec000008 	stc	0, cr0, [r0], {8}
    210c:	16080011 			; <UNDEFINED> instruction: 0x16080011
    2110:	01000000 	mrseq	r0, (UNDEF: 0)
    2114:	000a1e9c 	muleq	sl, ip, lr
    2118:	08842500 	stmeq	r4, {r8, sl, sp}
    211c:	50010000 	andpl	r0, r1, r0
    2120:	00088f26 	andeq	r8, r8, r6, lsr #30
    2124:	00042000 	andeq	r2, r4, r0
    2128:	089a2600 	ldmeq	sl, {r9, sl, sp}
    212c:	04410000 	strbeq	r0, [r1], #-0
    2130:	27000000 	strcs	r0, [r0, -r0]
    2134:	00000aab 	andeq	r0, r0, fp, lsr #21
    2138:	01783f01 	cmneq	r8, r1, lsl #30
    213c:	12040000 	andne	r0, r4, #0
    2140:	00120800 	andseq	r0, r2, r0, lsl #16
    2144:	9c010000 	stcls	0, cr0, [r1], {-0}
    2148:	00000a56 	andeq	r0, r0, r6, asr sl
    214c:	00113428 	andseq	r3, r1, r8, lsr #8
    2150:	133f0100 	teqne	pc, #0, 2
    2154:	77000001 	strvc	r0, [r0, -r1]
    2158:	29000004 	stmdbcs	r0, {r2}
    215c:	006e6970 	rsbeq	r6, lr, r0, ror r9
    2160:	01293f01 	teqeq	r9, r1, lsl #30
    2164:	04980000 	ldreq	r0, [r8], #0
    2168:	2a000000 	bcs	2170 <__Stack_Size+0x1970>
    216c:	00000aca 	andeq	r0, r0, sl, asr #21
    2170:	12184801 	andsne	r4, r8, #65536	; 0x10000
    2174:	00600800 	rsbeq	r0, r0, r0, lsl #16
    2178:	9c010000 	stcls	0, cr0, [r1], {-0}
    217c:	00000b3f 	andeq	r0, r0, pc, lsr fp
    2180:	00113428 	andseq	r3, r1, r8, lsr #8
    2184:	13480100 	movtne	r0, #33024	; 0x8100
    2188:	b9000001 	stmdblt	r0, {r0}
    218c:	29000004 	stmdbcs	r0, {r2}
    2190:	006e6970 	rsbeq	r6, lr, r0, ror r9
    2194:	01294801 	teqeq	r9, r1, lsl #16
    2198:	04e70000 	strbteq	r0, [r7], #0
    219c:	61280000 	teqvs	r8, r0
    21a0:	0100000b 	tsteq	r0, fp
    21a4:	00012948 	andeq	r2, r1, r8, asr #18
    21a8:	00050800 	andeq	r0, r5, r0, lsl #16
    21ac:	0dd32b00 	vldreq	d18, [r3]
    21b0:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    21b4:	00000113 	andeq	r0, r0, r3, lsl r1
    21b8:	94285301 	strtls	r5, [r8], #-769	; 0x301
    21bc:	0100000c 	tsteq	r0, ip
    21c0:	00012948 	andeq	r2, r1, r8, asr #18
    21c4:	00056c00 	andeq	r6, r5, r0, lsl #24
    21c8:	00632c00 	rsbeq	r2, r3, r0, lsl #24
    21cc:	01134c01 	tsteq	r3, r1, lsl #24
    21d0:	05980000 	ldreq	r0, [r8]
    21d4:	782d0000 	stmdavc	sp!, {}	; <UNPREDICTABLE>
    21d8:	1a000008 	bne	2200 <__Stack_Size+0x1a00>
    21dc:	00080012 	andeq	r0, r8, r2, lsl r0
    21e0:	01000002 	tsteq	r0, r2
    21e4:	000aec4a 	andeq	lr, sl, sl, asr #24
    21e8:	089a2600 	ldmeq	sl, {r9, sl, sp}
    21ec:	06080000 	streq	r0, [r8], -r0
    21f0:	8f2e0000 	svchi	0x002e0000
    21f4:	26000008 	strcs	r0, [r0], -r8
    21f8:	00000884 	andeq	r0, r0, r4, lsl #17
    21fc:	00000645 	andeq	r0, r0, r5, asr #12
    2200:	08782d00 	ldmdaeq	r8!, {r8, sl, fp, sp}^
    2204:	12520000 	subsne	r0, r2, #0
    2208:	02180800 	andseq	r0, r8, #0, 16
    220c:	54010000 	strpl	r0, [r1], #-0
    2210:	00000b17 	andeq	r0, r0, r7, lsl fp
    2214:	00089a26 	andeq	r9, r8, r6, lsr #20
    2218:	00067300 	andeq	r7, r6, r0, lsl #6
    221c:	088f2e00 	stmeq	pc, {r9, sl, fp, sp}	; <UNPREDICTABLE>
    2220:	84260000 	strthi	r0, [r6], #-0
    2224:	9d000008 	stcls	0, cr0, [r0, #-32]	; 0xffffffe0
    2228:	00000006 	andeq	r0, r0, r6
    222c:	0008782f 	andeq	r7, r8, pc, lsr #16
    2230:	00126200 	andseq	r6, r2, r0, lsl #4
    2234:	00023008 	andeq	r3, r2, r8
    2238:	265a0100 	ldrbcs	r0, [sl], -r0, lsl #2
    223c:	0000089a 	muleq	r0, sl, r8
    2240:	000006c0 	andeq	r0, r0, r0, asr #13
    2244:	00088f2e 	andeq	r8, r8, lr, lsr #30
    2248:	08842600 	stmeq	r4, {r9, sl, sp}
    224c:	06ec0000 	strbteq	r0, [ip], r0
    2250:	00000000 	andeq	r0, r0, r0
    2254:	0008a624 	andeq	sl, r8, r4, lsr #12
    2258:	00000000 	andeq	r0, r0, r0
    225c:	00000a00 	andeq	r0, r0, r0, lsl #20
    2260:	619c0100 	orrsvs	r0, ip, r0, lsl #2
    2264:	2500000b 	strcs	r0, [r0, #-11]
    2268:	000008b3 			; <UNDEFINED> instruction: 0x000008b3
    226c:	bf255001 	svclt	0x00255001
    2270:	01000008 	tsteq	r0, r8
    2274:	d1240051 	qsuble	r0, r1, r4
    2278:	00000008 	andeq	r0, r0, r8
    227c:	16000000 	strne	r0, [r0], -r0
    2280:	01000000 	mrseq	r0, (UNDEF: 0)
    2284:	000ba09c 	muleq	fp, ip, r0
    2288:	08de2500 	ldmeq	lr, {r8, sl, sp}^
    228c:	50010000 	andpl	r0, r1, r0
    2290:	0008ea26 	andeq	lr, r8, r6, lsr #20
    2294:	00070f00 	andeq	r0, r7, r0, lsl #30
    2298:	08a63000 	stmiaeq	r6!, {ip, sp}
    229c:	00000000 	andeq	r0, r0, r0
    22a0:	00080000 	andeq	r0, r8, r0
    22a4:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    22a8:	08bf2e01 	ldmeq	pc!, {r0, r9, sl, fp, sp}	; <UNPREDICTABLE>
    22ac:	b32e0000 	teqlt	lr, #0
    22b0:	00000008 	andeq	r0, r0, r8
    22b4:	0efa1d00 	cdpeq	13, 15, cr1, cr10, cr0, {0}
    22b8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    22bc:	0bd20101 	bleq	ff4826c8 <BootRAM+0xe3f2e69>
    22c0:	661f0000 	ldrvs	r0, [pc], -r0
    22c4:	0100746d 	tsteq	r0, sp, ror #8
    22c8:	00dc012e 	sbcseq	r0, ip, lr, lsr #2
    22cc:	d41e0000 	ldrle	r0, [lr], #-0
    22d0:	0100000e 	tsteq	r0, lr
    22d4:	0108012e 	tsteq	r8, lr, lsr #2
    22d8:	ee210000 	cdp	0, 2, cr0, cr1, cr0, {0}
    22dc:	0100000d 	tsteq	r0, sp
    22e0:	0bd20130 	bleq	ff4827a8 <BootRAM+0xe3f2f49>
    22e4:	15000000 	strne	r0, [r0, #-0]
    22e8:	000000d5 	ldrdeq	r0, [r0], -r5
    22ec:	00000be2 	andeq	r0, r0, r2, ror #23
    22f0:	0000bb16 	andeq	fp, r0, r6, lsl fp
    22f4:	2400c700 	strcs	ip, [r0], #-1792	; 0x700
    22f8:	00000ba0 	andeq	r0, r0, r0, lsr #23
    22fc:	00000000 	andeq	r0, r0, r0
    2300:	00000038 	andeq	r0, r0, r8, lsr r0
    2304:	0c669c01 	stcleq	12, cr9, [r6], #-4
    2308:	ad260000 	stcge	0, cr0, [r6, #-0]
    230c:	3a00000b 	bcc	2340 <__Stack_Size+0x1b40>
    2310:	26000007 	strcs	r0, [r0], -r7
    2314:	00000bb9 			; <UNDEFINED> instruction: 0x00000bb9
    2318:	00000766 	andeq	r0, r0, r6, ror #14
    231c:	000bc531 	andeq	ip, fp, r1, lsr r5
    2320:	b0910300 	addslt	r0, r1, r0, lsl #6
    2324:	08d1327e 	ldmeq	r1, {r1, r2, r3, r4, r5, r6, r9, ip, sp}^
    2328:	00000000 	andeq	r0, r0, r0
    232c:	001c0000 	andseq	r0, ip, r0
    2330:	33010000 	movwcc	r0, #4096	; 0x1000
    2334:	000c4e01 	andeq	r4, ip, r1, lsl #28
    2338:	08ea2600 	stmiaeq	sl!, {r9, sl, sp}^
    233c:	07790000 	ldrbeq	r0, [r9, -r0]!
    2340:	de2e0000 	cdple	0, 2, cr0, cr14, cr0, {0}
    2344:	30000008 	andcc	r0, r0, r8
    2348:	000008a6 	andeq	r0, r0, r6, lsr #17
    234c:	00000000 	andeq	r0, r0, r0
    2350:	0000000e 	andeq	r0, r0, lr
    2354:	2e012901 	cdpcs	9, 0, cr2, cr1, cr1, {0}
    2358:	000008bf 			; <UNDEFINED> instruction: 0x000008bf
    235c:	0008b32e 	andeq	fp, r8, lr, lsr #6
    2360:	33000000 	movwcc	r0, #0
    2364:	00000000 	andeq	r0, r0, r0
    2368:	0000162b 	andeq	r1, r0, fp, lsr #12
    236c:	03510134 	cmpeq	r1, #52, 2
    2370:	345001f3 	ldrbcc	r0, [r0], #-499	; 0x1f3
    2374:	7d025001 	stcvc	0, cr5, [r2, #-4]
    2378:	35000000 	strcc	r0, [r0, #-0]
    237c:	00000ab3 			; <UNDEFINED> instruction: 0x00000ab3
    2380:	78013801 	stmdavc	r1, {r0, fp, ip, sp}
    2384:	44080012 	strmi	r0, [r8], #-18
    2388:	01000000 	mrseq	r0, (UNDEF: 0)
    238c:	000d279c 	muleq	sp, ip, r7
    2390:	6d663600 	stclvs	6, cr3, [r6, #-0]
    2394:	38010074 	stmdacc	r1, {r2, r4, r5, r6}
    2398:	0000dc01 	andeq	sp, r0, r1, lsl #24
    239c:	70910200 	addsvc	r0, r1, r0, lsl #4
    23a0:	0ed43837 	mrceq	8, 6, r3, cr4, cr7, {1}
    23a4:	3a010000 	bcc	423ac <__Stack_Size+0x41bac>
    23a8:	00010801 	andeq	r0, r1, r1, lsl #16
    23ac:	9c910300 	ldcls	3, cr0, [r1], {0}
    23b0:	0ba0397e 	bleq	fe8109b0 <BootRAM+0xd781151>
    23b4:	12840000 	addne	r0, r4, #0
    23b8:	02480800 	subeq	r0, r8, #0, 16
    23bc:	3c010000 	stccc	0, cr0, [r1], {-0}
    23c0:	0bb92e01 	bleq	fee4dbcc <BootRAM+0xddbe36d>
    23c4:	ad260000 	stcge	0, cr0, [r6, #-0]
    23c8:	a400000b 	strge	r0, [r0], #-11
    23cc:	3a000007 	bcc	23f0 <__Stack_Size+0x1bf0>
    23d0:	00000248 	andeq	r0, r0, r8, asr #4
    23d4:	000bc531 	andeq	ip, fp, r1, lsr r5
    23d8:	a0910300 	addsge	r0, r1, r0, lsl #6
    23dc:	08d1327e 	ldmeq	r1, {r1, r2, r3, r4, r5, r6, r9, ip, sp}^
    23e0:	12920000 	addsne	r0, r2, #0
    23e4:	001c0800 	andseq	r0, ip, r0, lsl #16
    23e8:	33010000 	movwcc	r0, #4096	; 0x1000
    23ec:	000d0601 	andeq	r0, sp, r1, lsl #12
    23f0:	08ea2600 	stmiaeq	sl!, {r9, sl, sp}^
    23f4:	07db0000 	ldrbeq	r0, [fp, r0]
    23f8:	de2e0000 	cdple	0, 2, cr0, cr14, cr0, {0}
    23fc:	30000008 	andcc	r0, r0, r8
    2400:	000008a6 	andeq	r0, r0, r6, lsr #17
    2404:	08001298 	stmdaeq	r0, {r3, r4, r7, r9, ip}
    2408:	0000000e 	andeq	r0, r0, lr
    240c:	2e012901 	cdpcs	9, 0, cr2, cr1, cr1, {0}
    2410:	000008bf 			; <UNDEFINED> instruction: 0x000008bf
    2414:	0008b32e 	andeq	fp, r8, lr, lsr #6
    2418:	33000000 	movwcc	r0, #0
    241c:	0800128e 	stmdaeq	r0, {r1, r2, r3, r7, r9, ip}
    2420:	0000162b 	andeq	r1, r0, fp, lsr #12
    2424:	02520134 	subseq	r0, r2, #52, 2
    2428:	01345491 			; <UNDEFINED> instruction: 0x01345491
    242c:	50910351 	addspl	r0, r1, r1, asr r3
    2430:	50013406 	andpl	r3, r1, r6, lsl #8
    2434:	7e809103 	sinvcs	f1, f3
    2438:	00000000 	andeq	r0, r0, r0
    243c:	000af035 	andeq	pc, sl, r5, lsr r0	; <UNPREDICTABLE>
    2440:	01660100 	cmneq	r6, r0, lsl #2
    2444:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
    2448:	00000088 	andeq	r0, r0, r8, lsl #1
    244c:	0e199c01 	cdpeq	12, 1, cr9, cr9, cr1, {0}
    2450:	94380000 	ldrtls	r0, [r8], #-0
    2454:	0100000e 	tsteq	r0, lr
    2458:	08000167 	stmdaeq	r0, {r0, r1, r2, r5, r6, r8}
    245c:	91020000 	mrsls	r0, (UNDEF: 2)
    2460:	0dae385c 	stceq	8, cr3, [lr, #368]!	; 0x170
    2464:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    2468:	00075d01 	andeq	r5, r7, r1, lsl #26
    246c:	60910200 	addsvs	r0, r1, r0, lsl #4
    2470:	000d003b 	andeq	r0, sp, fp, lsr r0
    2474:	01830100 	orreq	r0, r3, r0, lsl #2
    2478:	0000005b 	andeq	r0, r0, fp, asr r0
    247c:	00000d6d 	andeq	r0, r0, sp, ror #26
    2480:	a43b0037 	ldrtge	r0, [fp], #-55	; 0x37
    2484:	01000010 	tsteq	r0, r0, lsl r0
    2488:	005b0186 	subseq	r0, fp, r6, lsl #3
    248c:	0d7f0000 	ldcleq	0, cr0, [pc, #-0]	; 2494 <__Stack_Size+0x1c94>
    2490:	00370000 	eorseq	r0, r7, r0
    2494:	0012cc3c 	andseq	ip, r2, ip, lsr ip
    2498:	00164a08 	andseq	r4, r6, r8, lsl #20
    249c:	000d9900 	andeq	r9, sp, r0, lsl #18
    24a0:	51013400 	tstpl	r1, r0, lsl #8
    24a4:	01343101 	teqeq	r4, r1, lsl #2
    24a8:	000a0350 	andeq	r0, sl, r0, asr r3
    24ac:	d43c0040 	ldrtle	r0, [ip], #-64	; 0x40
    24b0:	4a080012 	bmi	202500 <__Stack_Size+0x201d00>
    24b4:	b2000016 	andlt	r0, r0, #22
    24b8:	3400000d 	strcc	r0, [r0], #-13
    24bc:	31015101 	tstcc	r1, r1, lsl #2
    24c0:	02500134 	subseq	r0, r0, #52, 2
    24c4:	3c000074 	stccc	0, cr0, [r0], {116}	; 0x74
    24c8:	080012f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, ip}
    24cc:	00001661 	andeq	r1, r0, r1, ror #12
    24d0:	00000dcc 	andeq	r0, r0, ip, asr #27
    24d4:	02510134 	subseq	r0, r1, #52, 2
    24d8:	01345c91 			; <UNDEFINED> instruction: 0x01345c91
    24dc:	00740250 	rsbseq	r0, r4, r0, asr r2
    24e0:	130c3c00 	movwne	r3, #52224	; 0xcc00
    24e4:	16610800 	strbtne	r0, [r1], -r0, lsl #16
    24e8:	0de90000 	stcleq	0, cr0, [r9]
    24ec:	01340000 	teqeq	r4, r0
    24f0:	5c910251 	lfmpl	f0, 4, [r1], {81}	; 0x51
    24f4:	05500134 	ldrbeq	r0, [r0, #-308]	; 0x134
    24f8:	0108000c 	tsteq	r8, ip
    24fc:	2e3c0040 	cdpcs	0, 3, cr0, cr12, cr0, {2}
    2500:	84080013 	strhi	r0, [r8], #-19
    2504:	03000016 	movweq	r0, #22
    2508:	3400000e 	strcc	r0, [r0], #-14
    250c:	91025101 	tstls	r2, r1, lsl #2
    2510:	50013460 	andpl	r3, r1, r0, ror #8
    2514:	00007502 	andeq	r7, r0, r2, lsl #10
    2518:	00133633 	andseq	r3, r3, r3, lsr r6
    251c:	00169608 	andseq	r9, r6, r8, lsl #12
    2520:	51013400 	tstpl	r1, r0, lsl #8
    2524:	01343101 	teqeq	r4, r1, lsl #2
    2528:	00750250 	rsbseq	r0, r5, r0, asr r2
    252c:	12220000 	eorne	r0, r2, #0
    2530:	0100000b 	tsteq	r0, fp
    2534:	3d010189 	stfccs	f0, [r1, #-548]	; 0xfffffddc
    2538:	00000e19 	andeq	r0, r0, r9, lsl lr
    253c:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
    2540:	00000050 	andeq	r0, r0, r0, asr r0
    2544:	3e359c01 	cdpcc	12, 3, cr9, cr5, cr1, {0}
    2548:	0100000b 	tsteq	r0, fp
    254c:	13940193 	orrsne	r0, r4, #-1073741788	; 0xc0000024
    2550:	006c0800 	rsbeq	r0, ip, r0, lsl #16
    2554:	9c010000 	stcls	0, cr0, [r1], {-0}
    2558:	00000e55 	andeq	r0, r0, r5, asr lr
    255c:	0011903e 	andseq	r9, r1, lr, lsr r0
    2560:	01940100 	orrseq	r0, r4, r0, lsl #2
    2564:	00000030 	andeq	r0, r0, r0, lsr r0
    2568:	d43f0000 	ldrtle	r0, [pc], #-0	; 2570 <__Stack_Size+0x1d70>
    256c:	0100000a 	tsteq	r0, sl
    2570:	140001bd 	strne	r0, [r0], #-445	; 0x1bd
    2574:	00140800 	andseq	r0, r4, r0, lsl #16
    2578:	9c010000 	stcls	0, cr0, [r1], {-0}
    257c:	000b2335 	andeq	r2, fp, r5, lsr r3
    2580:	01c10100 	biceq	r0, r1, r0, lsl #2
    2584:	08001414 	stmdaeq	r0, {r2, r4, sl, ip}
    2588:	00000020 	andeq	r0, r0, r0, lsr #32
    258c:	0e989c01 	cdpeq	12, 9, cr9, cr8, cr1, {0}
    2590:	1c400000 	marne	acc0, r0, r0
    2594:	08080014 	stmdaeq	r8, {r2, r4}
    2598:	41000000 	mrsmi	r0, (UNDEF: 0)
    259c:	00000e21 	andeq	r0, r0, r1, lsr #28
    25a0:	1301c401 	movwne	ip, #5121	; 0x1401
    25a4:	14000001 	strne	r0, [r0], #-1
    25a8:	00000008 	andeq	r0, r0, r8
    25ac:	08fd2400 	ldmeq	sp!, {sl, sp}^
    25b0:	14340000 	ldrtne	r0, [r4], #-0
    25b4:	00280800 	eoreq	r0, r8, r0, lsl #16
    25b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    25bc:	00000eb3 			; <UNDEFINED> instruction: 0x00000eb3
    25c0:	00090a25 	andeq	r0, r9, r5, lsr #20
    25c4:	00500100 	subseq	r0, r0, r0, lsl #2
    25c8:	000af942 	andeq	pc, sl, r2, asr #18
    25cc:	01d60100 	bicseq	r0, r6, r0, lsl #2
    25d0:	0000005b 	andeq	r0, r0, fp, asr r0
    25d4:	0800145c 	stmdaeq	r0, {r2, r3, r4, r6, sl, ip}
    25d8:	00000178 	andeq	r0, r0, r8, ror r1
    25dc:	11e29c01 	mvnne	r9, r1, lsl #24
    25e0:	30430000 	subcc	r0, r3, r0
    25e4:	0100000e 	tsteq	r0, lr
    25e8:	011301d6 			; <UNDEFINED> instruction: 0x011301d6
    25ec:	08270000 	stmdaeq	r7!, {}	; <UNPREDICTABLE>
    25f0:	d9380000 	ldmdble	r8!, {}	; <UNPREDICTABLE>
    25f4:	0100000e 	tsteq	r0, lr
    25f8:	11e201d8 	ldrdne	r0, [r2, #24]!
    25fc:	91030000 	mrsls	r0, (UNDEF: 3)
    2600:	19387d84 	ldmdbne	r8!, {r2, r7, r8, sl, fp, ip, sp, lr}
    2604:	0100000d 	tsteq	r0, sp
    2608:	11f201e3 	mvnsne	r0, r3, ror #3
    260c:	91030000 	mrsls	r0, (UNDEF: 3)
    2610:	4a387de4 	bmi	e21da8 <__Stack_Size+0xe215a8>
    2614:	0100000d 	tsteq	r0, sp
    2618:	11e201e8 	mvnne	r0, r8, ror #3
    261c:	91030000 	mrsls	r0, (UNDEF: 3)
    2620:	a5387da4 	ldrge	r7, [r8, #-3492]!	; 0xda4
    2624:	0100000b 	tsteq	r0, fp
    2628:	120201e9 	andne	r0, r2, #1073741882	; 0x4000003a
    262c:	91030000 	mrsls	r0, (UNDEF: 3)
    2630:	63447ea4 	movtvs	r7, #20132	; 0x4ea4
    2634:	01007874 	tsteq	r0, r4, ror r8
    2638:	070101ee 	streq	r0, [r1, -lr, ror #3]
    263c:	91030000 	mrsls	r0, (UNDEF: 3)
    2640:	6a417f80 	bvs	1062448 <__Stack_Size+0x1061c48>
    2644:	0100000d 	tsteq	r0, sp
    2648:	005b01f2 	ldrsheq	r0, [fp], #-18	; 0xffffffee
    264c:	08530000 	ldmdaeq	r3, {}^	; <UNPREDICTABLE>
    2650:	69450000 	stmdbvs	r5, {}^	; <UNPREDICTABLE>
    2654:	01f30100 	mvnseq	r0, r0, lsl #2
    2658:	0000005b 	andeq	r0, r0, fp, asr r0
    265c:	000008bb 			; <UNDEFINED> instruction: 0x000008bb
    2660:	000fc238 	andeq	ip, pc, r8, lsr r2	; <UNPREDICTABLE>
    2664:	01f50100 	mvnseq	r0, r0, lsl #2
    2668:	00001212 	andeq	r1, r0, r2, lsl r2
    266c:	7ce49103 	stfvcp	f1, [r4], #12
    2670:	000d4538 	andeq	r4, sp, r8, lsr r5
    2674:	01f60100 	mvnseq	r0, r0, lsl #2
    2678:	00001212 	andeq	r1, r0, r2, lsl r2
    267c:	7ce89103 	stfvcp	f1, [r8], #12
    2680:	00646945 	rsbeq	r6, r4, r5, asr #18
    2684:	62020601 	andvs	r0, r2, #1048576	; 0x100000
    2688:	07000006 	streq	r0, [r0, -r6]
    268c:	38000009 	stmdacc	r0, {r0, r3}
    2690:	00001119 	andeq	r1, r0, r9, lsl r1
    2694:	22020801 	andcs	r0, r2, #65536	; 0x10000
    2698:	03000012 	movweq	r0, #18
    269c:	3b7cec91 	blcc	1f3d8e8 <__Stack_Size+0x1f3d0e8>
    26a0:	00000b67 	andeq	r0, r0, r7, ror #22
    26a4:	5b020e01 	blpl	85eb0 <__Stack_Size+0x856b0>
    26a8:	9c000000 	stcls	0, cr0, [r0], {-0}
    26ac:	3700000f 	strcc	r0, [r0, -pc]
    26b0:	0e3e3800 	cdpeq	8, 3, cr3, cr14, cr0, {0}
    26b4:	10010000 	andne	r0, r1, r0
    26b8:	00123202 	andseq	r3, r2, r2, lsl #4
    26bc:	c4910300 	ldrgt	r0, [r1], #768	; 0x300
    26c0:	08fd327d 	ldmeq	sp!, {r0, r2, r3, r4, r5, r6, r9, ip, sp}^
    26c4:	15280000 	strne	r0, [r8, #-0]!
    26c8:	00140800 	andseq	r0, r4, r0, lsl #16
    26cc:	07010000 	streq	r0, [r1, -r0]
    26d0:	000fcd02 	andeq	ip, pc, r2, lsl #26
    26d4:	090a2500 	stmdbeq	sl, {r8, sl, sp}
    26d8:	f2060000 	vhadd.s8	d0, d6, d0
    26dc:	00002680 	andeq	r2, r0, r0, lsl #13
    26e0:	6c3c0000 	ldcvs	0, cr0, [ip], #-0
    26e4:	a8080014 	stmdage	r8, {r2, r4}
    26e8:	ee000016 	mcr	0, 0, r0, cr0, cr6, {0}
    26ec:	3400000f 	strcc	r0, [r0], #-15
    26f0:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    26f4:	51013420 	tstpl	r1, r0, lsr #8
    26f8:	34ff0802 	ldrbtcc	r0, [pc], #2050	; 2700 <__Stack_Size+0x1f00>
    26fc:	91035001 	tstls	r3, r1
    2700:	3c007d84 	stccc	13, cr7, [r0], {132}	; 0x84
    2704:	0800148c 	stmdaeq	r0, {r2, r3, r7, sl, ip}
    2708:	000016c7 	andeq	r1, r0, r7, asr #13
    270c:	0000100e 	andeq	r1, r0, lr
    2710:	02520134 	subseq	r0, r2, #52, 2
    2714:	01342008 	teqeq	r4, r8
    2718:	ff080251 			; <UNDEFINED> instruction: 0xff080251
    271c:	02500134 	subseq	r0, r0, #52, 2
    2720:	3c006075 	stccc	0, cr6, [r0], {117}	; 0x75
    2724:	0800149c 	stmdaeq	r0, {r2, r3, r4, r7, sl, ip}
    2728:	000016a8 	andeq	r1, r0, r8, lsr #13
    272c:	0000102f 	andeq	r1, r0, pc, lsr #32
    2730:	02520134 	subseq	r0, r2, #52, 2
    2734:	01344008 	teqeq	r4, r8
    2738:	ff080251 			; <UNDEFINED> instruction: 0xff080251
    273c:	03500134 	cmpeq	r0, #52, 2
    2740:	007de491 			; <UNDEFINED> instruction: 0x007de491
    2744:	0014c43c 	andseq	ip, r4, ip, lsr r4
    2748:	0016a808 	andseq	sl, r6, r8, lsl #16
    274c:	00105000 	andseq	r5, r0, r0
    2750:	52013400 	andpl	r3, r1, #0, 8
    2754:	34200802 	strtcc	r0, [r0], #-2050	; 0x802
    2758:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    275c:	500134ff 	strdpl	r3, [r1], -pc	; <UNPREDICTABLE>
    2760:	7da49103 	stfvcd	f1, [r4, #12]!
    2764:	14ce3c00 	strbne	r3, [lr], #3072	; 0xc00
    2768:	16a80800 	strtne	r0, [r8], r0, lsl #16
    276c:	10710000 	rsbsne	r0, r1, r0
    2770:	01340000 	teqeq	r4, r0
    2774:	5c080252 	sfmpl	f0, 4, [r8], {82}	; 0x52
    2778:	02510134 	subseq	r0, r1, #52, 2
    277c:	0134ff08 	teqeq	r4, r8, lsl #30
    2780:	a4910350 	ldrge	r0, [r1], #848	; 0x350
    2784:	d43c007e 	ldrtle	r0, [ip], #-126	; 0x7e
    2788:	ed080014 	stc	0, cr0, [r8, #-80]	; 0xffffffb0
    278c:	86000016 			; <UNDEFINED> instruction: 0x86000016
    2790:	34000010 	strcc	r0, [r0], #-16
    2794:	91035001 	tstls	r3, r1
    2798:	3c007f80 	stccc	15, cr7, [r0], {128}	; 0x80
    279c:	080014fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, sl, ip}
    27a0:	00001704 	andeq	r1, r0, r4, lsl #14
    27a4:	0000109b 	muleq	r0, fp, r0
    27a8:	03500134 	cmpeq	r0, #52, 2
    27ac:	007f8091 			; <UNDEFINED> instruction: 0x007f8091
    27b0:	00151a3c 	andseq	r1, r5, ip, lsr sl
    27b4:	00171f08 	andseq	r1, r7, r8, lsl #30
    27b8:	0010c100 	andseq	ip, r0, r0, lsl #2
    27bc:	53013400 	movwpl	r3, #5120	; 0x1400
    27c0:	01343401 	teqeq	r4, r1, lsl #8
    27c4:	e4910352 	ldr	r0, [r1], #850	; 0x352
    27c8:	5101347c 	tstpl	r1, ip, ror r4
    27cc:	01343401 	teqeq	r4, r1, lsl #8
    27d0:	e8910350 	ldm	r1, {r4, r6, r8, r9}
    27d4:	283c007c 	ldmdacs	ip!, {r2, r3, r4, r5, r6}
    27d8:	04080015 	streq	r0, [r8], #-21
    27dc:	e1000017 	tst	r0, r7, lsl r0
    27e0:	34000010 	strcc	r0, [r0], #-16
    27e4:	34015201 	strcc	r5, [r1], #-513	; 0x201
    27e8:	02510134 	subseq	r0, r1, #52, 2
    27ec:	01340075 	teqeq	r4, r5, ror r0
    27f0:	80910350 	addshi	r0, r1, r0, asr r3
    27f4:	4c3c007f 	ldcmi	0, cr0, [ip], #-508	; 0xfffffe04
    27f8:	43080015 	movwmi	r0, #32789	; 0x8015
    27fc:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    2800:	34000011 	strcc	r0, [r0], #-17
    2804:	76025301 	strvc	r5, [r2], -r1, lsl #6
    2808:	52013400 	andpl	r3, r1, #0, 8
    280c:	34007702 	strcc	r7, [r0], #-1794	; 0x702
    2810:	03055101 	movweq	r5, #20737	; 0x5101
    2814:	08007320 	stmdaeq	r0, {r5, r8, r9, ip, sp, lr}
    2818:	03500134 	cmpeq	r0, #52, 2
    281c:	347cec91 	ldrbtcc	lr, [ip], #-3217	; 0xc91
    2820:	02047d02 	andeq	r7, r4, #2, 26	; 0x80
    2824:	02340075 	eorseq	r0, r4, #117	; 0x75
    2828:	7402007d 	strvc	r0, [r2], #-125	; 0x7d
    282c:	5a3c0000 	bpl	f02834 <__Stack_Size+0xf02034>
    2830:	66080015 			; <UNDEFINED> instruction: 0x66080015
    2834:	4900000c 	stmdbmi	r0, {r2, r3}
    2838:	34000011 	strcc	r0, [r0], #-17
    283c:	74025301 	strvc	r5, [r2], #-769	; 0x301
    2840:	52013400 	andpl	r3, r1, #0, 8
    2844:	34007602 	strcc	r7, [r0], #-1538	; 0x602
    2848:	77025101 	strvc	r5, [r2, -r1, lsl #2]
    284c:	50013400 	andpl	r3, r1, r0, lsl #8
    2850:	732c0305 	teqvc	ip, #335544320	; 0x14000000
    2854:	02340800 	eorseq	r0, r4, #0, 16
    2858:	7502007d 	strvc	r0, [r2, #-125]	; 0x7d
    285c:	663c0000 	ldrtvs	r0, [ip], -r0
    2860:	04080015 	streq	r0, [r8], #-21
    2864:	6a000017 	bvs	28c8 <__Stack_Size+0x20c8>
    2868:	34000011 	strcc	r0, [r0], #-17
    286c:	47015201 	strmi	r5, [r1, -r1, lsl #4]
    2870:	03510134 	cmpeq	r1, #52, 2
    2874:	347cec91 	ldrbtcc	lr, [ip], #-3217	; 0xc91
    2878:	91035001 	tstls	r3, r1
    287c:	3c007f80 	stccc	15, cr7, [r0], {128}	; 0x80
    2880:	0800156e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sl, ip}
    2884:	0000175e 	andeq	r1, r0, lr, asr r7
    2888:	00001186 	andeq	r1, r0, r6, lsl #3
    288c:	03510134 	cmpeq	r1, #52, 2
    2890:	347da491 	ldrbtcc	sl, [sp], #-1169	; 0x491
    2894:	91035001 	tstls	r3, r1
    2898:	3c007f80 	stccc	15, cr7, [r0], {128}	; 0x80
    289c:	08001574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, ip}
    28a0:	00001774 	andeq	r1, r0, r4, ror r7
    28a4:	0000119b 	muleq	r0, fp, r1
    28a8:	03500134 	cmpeq	r0, #52, 2
    28ac:	007da491 			; <UNDEFINED> instruction: 0x007da491
    28b0:	0015963c 	andseq	r9, r5, ip, lsr r6
    28b4:	00178608 	andseq	r8, r7, r8, lsl #12
    28b8:	0011c300 	andseq	ip, r1, r0, lsl #6
    28bc:	53013400 	movwpl	r3, #5120	; 0x1400
    28c0:	34200802 	strtcc	r0, [r0], #-2050	; 0x802
    28c4:	91035201 	tstls	r3, r1, lsl #4
    28c8:	01347da4 	teqeq	r4, r4, lsr #27
    28cc:	60740251 	rsbsvs	r0, r4, r1, asr r2
    28d0:	03500134 	cmpeq	r0, #52, 2
    28d4:	007de491 			; <UNDEFINED> instruction: 0x007de491
    28d8:	0015a233 	andseq	sl, r5, r3, lsr r2
    28dc:	0016c708 	andseq	ip, r6, r8, lsl #14
    28e0:	52013400 	andpl	r3, r1, #0, 8
    28e4:	34200802 	strtcc	r0, [r0], #-2050	; 0x802
    28e8:	91035101 	tstls	r3, r1, lsl #2
    28ec:	01347d84 	teqeq	r4, r4, lsl #27
    28f0:	a4910350 	ldrge	r0, [r1], #848	; 0x350
    28f4:	1500007d 	strne	r0, [r0, #-125]	; 0x7d
    28f8:	00000074 	andeq	r0, r0, r4, ror r0
    28fc:	000011f2 	strdeq	r1, [r0], -r2
    2900:	0000bb16 	andeq	fp, r0, r6, lsl fp
    2904:	15001f00 	strne	r1, [r0, #-3840]	; 0xf00
    2908:	000000e7 	andeq	r0, r0, r7, ror #1
    290c:	00001202 	andeq	r1, r0, r2, lsl #4
    2910:	0000bb16 	andeq	fp, r0, r6, lsl fp
    2914:	15003f00 	strne	r3, [r0, #-3840]	; 0xf00
    2918:	000000e7 	andeq	r0, r0, r7, ror #1
    291c:	00001212 	andeq	r1, r0, r2, lsl r2
    2920:	0000bb16 	andeq	fp, r0, r6, lsl fp
    2924:	15005b00 	strne	r5, [r0, #-2816]	; 0xb00
    2928:	000000d5 	ldrdeq	r0, [r0], -r5
    292c:	00001222 	andeq	r1, r0, r2, lsr #4
    2930:	0000bb16 	andeq	fp, r0, r6, lsl fp
    2934:	15000300 	strne	r0, [r0, #-768]	; 0x300
    2938:	00000074 	andeq	r0, r0, r4, ror r0
    293c:	00001232 	andeq	r1, r0, r2, lsr r2
    2940:	0000bb16 	andeq	fp, r0, r6, lsl fp
    2944:	15001600 	strne	r1, [r0, #-1536]	; 0x600
    2948:	000000e7 	andeq	r0, r0, r7, ror #1
    294c:	00001242 	andeq	r1, r0, r2, asr #4
    2950:	0000bb16 	andeq	fp, r0, r6, lsl fp
    2954:	46001f00 	strmi	r1, [r0], -r0, lsl #30
    2958:	00000989 	andeq	r0, r0, r9, lsl #19
    295c:	00000000 	andeq	r0, r0, r0
    2960:	00000018 	andeq	r0, r0, r8, lsl r0
    2964:	12719c01 	rsbsne	r9, r1, #256	; 0x100
    2968:	96260000 	strtls	r0, [r6], -r0
    296c:	6d000009 	stcvs	0, cr0, [r0, #-36]	; 0xffffffdc
    2970:	47000009 	strmi	r0, [r0, -r9]
    2974:	000009ae 	andeq	r0, r0, lr, lsr #19
    2978:	0000098e 	andeq	r0, r0, lr, lsl #19
    297c:	0009ba47 	andeq	fp, r9, r7, asr #20
    2980:	00098e00 	andeq	r8, r9, r0, lsl #28
    2984:	07480000 	strbeq	r0, [r8, -r0]
    2988:	0100000b 	tsteq	r0, fp
    298c:	15d40233 	ldrbne	r0, [r4, #563]	; 0x233
    2990:	00a80800 	adceq	r0, r8, r0, lsl #16
    2994:	9c010000 	stcls	0, cr0, [r1], {-0}
    2998:	00001329 	andeq	r1, r0, r9, lsr #6
    299c:	000e3043 	andeq	r3, lr, r3, asr #32
    29a0:	02330100 	eorseq	r0, r3, #0, 2
    29a4:	00000113 	andeq	r0, r0, r3, lsl r1
    29a8:	000009a1 	andeq	r0, r0, r1, lsr #19
    29ac:	00096049 	andeq	r6, r9, r9, asr #32
    29b0:	0015d400 	andseq	sp, r5, r0, lsl #8
    29b4:	00026008 	andeq	r6, r2, r8
    29b8:	02390100 	eorseq	r0, r9, #0, 2
    29bc:	00096932 	andeq	r6, r9, r2, lsr r9
    29c0:	0015e200 	andseq	lr, r5, r0, lsl #4
    29c4:	00001c08 	andeq	r1, r0, r8, lsl #24
    29c8:	023b0100 	eorseq	r0, fp, #0, 2
    29cc:	000012d0 	ldrdeq	r1, [r0], -r0
    29d0:	0015e240 	andseq	lr, r5, r0, asr #4
    29d4:	00001c08 	andeq	r1, r0, r8, lsl #24
    29d8:	09764a00 	ldmdbeq	r6!, {r9, fp, lr}^
    29dc:	c2800000 	addgt	r0, r0, #0
    29e0:	007e8083 	rsbseq	r8, lr, r3, lsl #1
    29e4:	0e194900 	cdpeq	9, 1, cr4, cr9, cr0, {0}
    29e8:	16020000 	strne	r0, [r2], -r0
    29ec:	02780800 	rsbseq	r0, r8, #0, 16
    29f0:	42010000 	andmi	r0, r1, #0
    29f4:	09894b02 	stmibeq	r9, {r1, r8, r9, fp, lr}
    29f8:	16320000 	ldrtne	r0, [r2], -r0
    29fc:	02980800 	addseq	r0, r8, #0, 16
    2a00:	44010000 	strmi	r0, [r1], #-0
    2a04:	00131602 	andseq	r1, r3, r2, lsl #12
    2a08:	09962600 	ldmibeq	r6, {r9, sl, sp}
    2a0c:	09cd0000 	stmibeq	sp, {}^	; <UNPREDICTABLE>
    2a10:	983a0000 	ldmdals	sl!, {}	; <UNPREDICTABLE>
    2a14:	47000002 	strmi	r0, [r0, -r2]
    2a18:	000009ae 	andeq	r0, r0, lr, lsr #19
    2a1c:	000009ee 	andeq	r0, r0, lr, ror #19
    2a20:	0009ba47 	andeq	fp, r9, r7, asr #20
    2a24:	0009ee00 	andeq	lr, r9, r0, lsl #28
    2a28:	4c000000 	stcmi	0, cr0, [r0], {-0}
    2a2c:	080015e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, sl, ip}
    2a30:	000017b5 			; <UNDEFINED> instruction: 0x000017b5
    2a34:	0016024c 	andseq	r0, r6, ip, asr #4
    2a38:	0017bc08 	andseq	fp, r7, r8, lsl #24
    2a3c:	1c240000 	stcne	0, cr0, [r4], #-0
    2a40:	00000009 	andeq	r0, r0, r9
    2a44:	34000000 	strcc	r0, [r0], #-0
    2a48:	01000000 	mrseq	r0, (UNDEF: 0)
    2a4c:	0013449c 	mulseq	r3, ip, r4
    2a50:	09292500 	stmdbeq	r9!, {r8, sl, sp}
    2a54:	50010000 	andpl	r0, r1, r0
    2a58:	0bef4d00 	bleq	ffbd5e60 <BootRAM+0xeb46601>
    2a5c:	56010000 	strpl	r0, [r1], -r0
    2a60:	00005b02 	andeq	r5, r0, r2, lsl #22
    2a64:	00000000 	andeq	r0, r0, r0
    2a68:	00006800 	andeq	r6, r0, r0, lsl #16
    2a6c:	899c0100 	ldmibhi	ip, {r8}
    2a70:	41000013 	tstmi	r0, r3, lsl r0
    2a74:	00000e28 	andeq	r0, r0, r8, lsr #28
    2a78:	78025801 	stmdavc	r2, {r0, fp, ip, lr}
    2a7c:	01000001 	tsteq	r0, r1
    2a80:	3900000a 	stmdbcc	r0, {r1, r3}
    2a84:	0000091c 	andeq	r0, r0, ip, lsl r9
    2a88:	00000000 	andeq	r0, r0, r0
    2a8c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
    2a90:	26026901 	strcs	r6, [r2], -r1, lsl #18
    2a94:	00000929 	andeq	r0, r0, r9, lsr #18
    2a98:	00000a21 	andeq	r0, r0, r1, lsr #20
    2a9c:	e1350000 	teq	r5, r0
    2aa0:	01000009 	tsteq	r0, r9
    2aa4:	167c0272 			; <UNDEFINED> instruction: 0x167c0272
    2aa8:	00700800 	rsbseq	r0, r0, r0, lsl #16
    2aac:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ab0:	00001420 	andeq	r1, r0, r0, lsr #8
    2ab4:	0010834e 	andseq	r8, r0, lr, asr #6
    2ab8:	02720100 	rsbseq	r0, r2, #0, 2
    2abc:	00001420 	andeq	r1, r0, r0, lsr #8
    2ac0:	84415001 	strbhi	r5, [r1], #-1
    2ac4:	01000011 	tsteq	r0, r1, lsl r0
    2ac8:	01130273 	tsteq	r3, r3, ror r2
    2acc:	0a350000 	beq	d42ad4 <__Stack_Size+0xd422d4>
    2ad0:	77410000 	strbvc	r0, [r1, -r0]
    2ad4:	0100000d 	tsteq	r0, sp
    2ad8:	01130274 	tsteq	r3, r4, ror r2
    2adc:	0a6a0000 	beq	1a82ae4 <__Stack_Size+0x1a822e4>
    2ae0:	77410000 	strbvc	r0, [r1, -r0]
    2ae4:	0100000c 	tsteq	r0, ip
    2ae8:	01130275 	tsteq	r3, r5, ror r2
    2aec:	0a940000 	beq	fe502af4 <BootRAM+0xd473295>
    2af0:	01410000 	mrseq	r0, (UNDEF: 65)
    2af4:	0100000e 	tsteq	r0, lr
    2af8:	01130276 	tsteq	r3, r6, ror r2
    2afc:	0acc0000 	beq	ff302b04 <BootRAM+0xe2732a5>
    2b00:	25410000 	strbcs	r0, [r1, #-0]
    2b04:	01000010 	tsteq	r0, r0, lsl r0
    2b08:	01130277 	tsteq	r3, r7, ror r2
    2b0c:	0b090000 	bleq	242b14 <__Stack_Size+0x242314>
    2b10:	cf4f0000 	svcgt	0x004f0000
    2b14:	0100000e 	tsteq	r0, lr
    2b18:	14260279 	strtne	r0, [r6], #-633	; 0x279
    2b1c:	da800000 	ble	fe002b24 <BootRAM+0xcf732c5>
    2b20:	4f7e8083 	svcmi	0x007e8083
    2b24:	00000bd9 	ldrdeq	r0, [r0], -r9
    2b28:	83027a01 	movwhi	r7, #10753	; 0x2a01
    2b2c:	80000009 	andhi	r0, r0, r9
    2b30:	7e8083c2 	cdpvc	3, 8, cr8, cr0, cr2, {6}
    2b34:	65040800 	strvs	r0, [r4, #-2048]	; 0x800
    2b38:	08000003 	stmdaeq	r0, {r0, r1}
    2b3c:	00043604 	andeq	r3, r4, r4, lsl #12
    2b40:	09692400 	stmdbeq	r9!, {sl, sp}^
    2b44:	16ec0000 	strbtne	r0, [ip], r0
    2b48:	00280800 	eoreq	r0, r8, r0, lsl #16
    2b4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b50:	0000144a 	andeq	r1, r0, sl, asr #8
    2b54:	0009764a 	andeq	r7, r9, sl, asr #12
    2b58:	83c28000 	bichi	r8, r2, #0
    2b5c:	35007e80 	strcc	r7, [r0, #-3712]	; 0xe80
    2b60:	00000bbe 			; <UNDEFINED> instruction: 0x00000bbe
    2b64:	14029f01 	strne	r9, [r2], #-3841	; 0xf01
    2b68:	14080017 	strne	r0, [r8], #-23
    2b6c:	01000000 	mrseq	r0, (UNDEF: 0)
    2b70:	0014729c 	mulseq	r4, ip, r2
    2b74:	0ecf4f00 	cdpeq	15, 12, cr4, cr15, cr0, {0}
    2b78:	a0010000 	andge	r0, r1, r0
    2b7c:	00142602 	andseq	r2, r4, r2, lsl #12
    2b80:	83da8000 	bicshi	r8, sl, #0
    2b84:	24007e80 	strcs	r7, [r0], #-3712	; 0xe80
    2b88:	00000936 	andeq	r0, r0, r6, lsr r9
    2b8c:	08001728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip}
    2b90:	00000040 	andeq	r0, r0, r0, asr #32
    2b94:	14989c01 	ldrne	r9, [r8], #3073	; 0xc01
    2b98:	47260000 	strmi	r0, [r6, -r0]!
    2b9c:	37000009 	strcc	r0, [r0, -r9]
    2ba0:	4700000b 	strmi	r0, [r0, -fp]
    2ba4:	00000953 	andeq	r0, r0, r3, asr r9
    2ba8:	00000b58 	andeq	r0, r0, r8, asr fp
    2bac:	0eea4200 	cdpeq	2, 14, cr4, cr10, cr0, {0}
    2bb0:	bc010000 	stclt	0, cr0, [r1], {-0}
    2bb4:	00017802 	andeq	r7, r1, r2, lsl #16
    2bb8:	00000000 	andeq	r0, r0, r0
    2bbc:	00006000 	andeq	r6, r0, r0
    2bc0:	fa9c0100 	blx	fe702fc8 <BootRAM+0xd673769>
    2bc4:	43000014 	movwmi	r0, #20
    2bc8:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
    2bcc:	1302bc01 	movwne	fp, #11265	; 0x2c01
    2bd0:	78000001 	stmdavc	r0, {r0}
    2bd4:	5000000b 	andpl	r0, r0, fp
    2bd8:	bc01006e 	stclt	0, cr0, [r1], {110}	; 0x6e
    2bdc:	00011e02 	andeq	r1, r1, r2, lsl #28
    2be0:	000b9900 	andeq	r9, fp, r0, lsl #18
    2be4:	09363900 	ldmdbeq	r6!, {r8, fp, ip, sp}
    2be8:	00000000 	andeq	r0, r0, r0
    2bec:	02c80000 	sbceq	r0, r8, #0
    2bf0:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    2bf4:	09472602 	stmdbeq	r7, {r1, r9, sl, sp}^
    2bf8:	0bcf0000 	bleq	ff3c2c00 <BootRAM+0xe3333a1>
    2bfc:	c83a0000 	ldmdagt	sl!, {}	; <UNPREDICTABLE>
    2c00:	47000002 	strmi	r0, [r0, -r2]
    2c04:	00000953 	andeq	r0, r0, r3, asr r9
    2c08:	00000be2 	andeq	r0, r0, r2, ror #23
    2c0c:	42000000 	andmi	r0, r0, #0
    2c10:	00001139 	andeq	r1, r0, r9, lsr r1
    2c14:	7802c601 	stmdavc	r2, {r0, r9, sl, lr, pc}
    2c18:	68000001 	stmdavs	r0, {r0}
    2c1c:	58080017 	stmdapl	r8, {r0, r1, r2, r4}
    2c20:	01000000 	mrseq	r0, (UNDEF: 0)
    2c24:	0015719c 	mulseq	r5, ip, r1
    2c28:	10da4300 	sbcsne	r4, sl, r0, lsl #6
    2c2c:	c6010000 	strgt	r0, [r1], -r0
    2c30:	00011302 	andeq	r1, r1, r2, lsl #6
    2c34:	000c0200 	andeq	r0, ip, r0, lsl #4
    2c38:	0fb84e00 	svceq	0x00b84e00
    2c3c:	c6010000 	strgt	r0, [r1], -r0
    2c40:	00011302 	andeq	r1, r1, r2, lsl #6
    2c44:	41510100 	cmpmi	r1, r0, lsl #2
    2c48:	0000106e 	andeq	r1, r0, lr, rrx
    2c4c:	7102c701 	tstvc	r2, r1, lsl #14
    2c50:	23000015 	movwcs	r0, #21
    2c54:	3800000c 	stmdacc	r0, {r2, r3}
    2c58:	00001148 	andeq	r1, r0, r8, asr #2
    2c5c:	3302c801 	movwcc	ip, #10241	; 0x2801
    2c60:	02000001 	andeq	r0, r0, #1
    2c64:	7d387091 	ldcvc	0, cr7, [r8, #-580]!	; 0xfffffdbc
    2c68:	01000011 	tsteq	r0, r1, lsl r0
    2c6c:	013302c9 	teqeq	r3, r9, asr #5
    2c70:	91020000 	mrsls	r0, (UNDEF: 2)
    2c74:	0e214174 	mcreq	1, 1, r4, cr1, cr4, {3}
    2c78:	cb010000 	blgt	42c80 <__Stack_Size+0x42480>
    2c7c:	00011302 	andeq	r1, r1, r2, lsl #6
    2c80:	000c4400 	andeq	r4, ip, r0, lsl #8
    2c84:	04080000 	streq	r0, [r8], #-0
    2c88:	00000143 	andeq	r0, r0, r3, asr #2
    2c8c:	0009603d 	andeq	r6, r9, sp, lsr r0
    2c90:	0017c000 	andseq	ip, r7, r0
    2c94:	00000c08 	andeq	r0, r0, r8, lsl #24
    2c98:	3f9c0100 	svccc	0x009c0100
    2c9c:	00000df5 	strdeq	r0, [r0], -r5
    2ca0:	cc02e801 	stcgt	8, cr14, [r2], {1}
    2ca4:	18080017 	stmdane	r8, {r0, r1, r2, r4}
    2ca8:	01000000 	mrseq	r0, (UNDEF: 0)
    2cac:	09c7249c 	stmibeq	r7, {r2, r3, r4, r7, sl, sp}^
    2cb0:	17e40000 	strbne	r0, [r4, r0]!
    2cb4:	00120800 	andseq	r0, r2, r0, lsl #16
    2cb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2cbc:	000015be 			; <UNDEFINED> instruction: 0x000015be
    2cc0:	0009d826 	andeq	sp, r9, r6, lsr #16
    2cc4:	000c6200 	andeq	r6, ip, r0, lsl #4
    2cc8:	09e44700 	stmibeq	r4!, {r8, r9, sl, lr}^
    2ccc:	0c800000 	stceq	0, cr0, [r0], {0}
    2cd0:	42000000 	andmi	r0, r0, #0
    2cd4:	00000e7e 	andeq	r0, r0, lr, ror lr
    2cd8:	5b02fc01 	blpl	c1ce4 <__Stack_Size+0xc14e4>
    2cdc:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    2ce0:	10080017 	andne	r0, r8, r7, lsl r0
    2ce4:	01000000 	mrseq	r0, (UNDEF: 0)
    2ce8:	0015e99c 	mulseq	r5, ip, r9
    2cec:	0e8a5100 	rmfeqe	f5, f2, f0
    2cf0:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    2cf4:	0015e902 	andseq	lr, r5, r2, lsl #18
    2cf8:	fff7e000 			; <UNDEFINED> instruction: 0xfff7e000
    2cfc:	0408001f 	streq	r0, [r8], #-31
    2d00:	0000008d 	andeq	r0, r0, sp, lsl #1
    2d04:	00035f42 	andeq	r5, r3, r2, asr #30
    2d08:	03020100 	movweq	r0, #8448	; 0x2100
    2d0c:	0000005b 	andeq	r0, r0, fp, asr r0
    2d10:	08001808 	stmdaeq	r0, {r3, fp, ip}
    2d14:	00000018 	andeq	r0, r0, r8, lsl r0
    2d18:	161a9c01 	ldrne	r9, [sl], -r1, lsl #24
    2d1c:	8a510000 	bhi	1442d24 <__Stack_Size+0x1442524>
    2d20:	0100000e 	tsteq	r0, lr
    2d24:	15e90305 	strbne	r0, [r9, #773]!	; 0x305
    2d28:	f7e00000 			; <UNDEFINED> instruction: 0xf7e00000
    2d2c:	52001fff 	andpl	r1, r0, #1020	; 0x3fc
    2d30:	000000b1 	strheq	r0, [r0], -r1
    2d34:	005b2c0d 	subseq	r2, fp, sp, lsl #24
    2d38:	03050000 	movweq	r0, #20480	; 0x5000
    2d3c:	20000470 	andcs	r0, r0, r0, ror r4
    2d40:	000c5d53 	andeq	r5, ip, r3, asr sp
    2d44:	5bb70a00 	blpl	fedc554c <BootRAM+0xdd35ced>
    2d48:	4a000000 	bmi	2d50 <__Stack_Size+0x2550>
    2d4c:	54000016 	strpl	r0, [r0], #-22
    2d50:	000000cf 	andeq	r0, r0, pc, asr #1
    2d54:	0000dc54 	andeq	sp, r0, r4, asr ip
    2d58:	00375400 	eorseq	r5, r7, r0, lsl #8
    2d5c:	55000000 	strpl	r0, [r0, #-0]
    2d60:	000010fc 	strdeq	r1, [r0], -ip
    2d64:	61011301 	tstvs	r1, r1, lsl #6
    2d68:	54000016 	strpl	r0, [r0], #-22
    2d6c:	000000fd 	strdeq	r0, [r0], -sp
    2d70:	00019854 	andeq	r9, r1, r4, asr r8
    2d74:	66550000 	ldrbvs	r0, [r5], -r0
    2d78:	0100000c 	tsteq	r0, ip
    2d7c:	16780114 			; <UNDEFINED> instruction: 0x16780114
    2d80:	78540000 	ldmdavc	r4, {}^	; <UNPREDICTABLE>
    2d84:	54000016 	strpl	r0, [r0], #-22
    2d88:	0000167e 	andeq	r1, r0, lr, ror r6
    2d8c:	6d040800 	stcvs	8, cr0, [r4, #-0]
    2d90:	08000008 	stmdaeq	r0, {r3}
    2d94:	00080004 	andeq	r0, r8, r4
    2d98:	0d003b00 	vstreq	d3, [r0, #-0]
    2d9c:	83010000 	movwhi	r0, #4096	; 0x1000
    2da0:	00005b01 	andeq	r5, r0, r1, lsl #22
    2da4:	00169600 	andseq	r9, r6, r0, lsl #12
    2da8:	3b003700 	blcc	109b0 <__Stack_Size+0x101b0>
    2dac:	000010a4 	andeq	r1, r0, r4, lsr #1
    2db0:	5b018601 	blpl	645bc <__Stack_Size+0x63dbc>
    2db4:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    2db8:	37000016 	smladcc	r0, r6, r0, r0
    2dbc:	0f9f5300 	svceq	0x009f5300
    2dc0:	190b0000 	stmdbne	fp, {}	; <UNPREDICTABLE>
    2dc4:	00000059 	andeq	r0, r0, r9, asr r0
    2dc8:	000016c7 	andeq	r1, r0, r7, asr #13
    2dcc:	00005954 	andeq	r5, r0, r4, asr r9
    2dd0:	005b5400 	subseq	r5, fp, r0, lsl #8
    2dd4:	25540000 	ldrbcs	r0, [r4, #-0]
    2dd8:	00000000 	andeq	r0, r0, r0
    2ddc:	000fb153 	andeq	fp, pc, r3, asr r1	; <UNPREDICTABLE>
    2de0:	5b160b00 	blpl	5859e8 <__Stack_Size+0x5851e8>
    2de4:	e6000000 	str	r0, [r0], -r0
    2de8:	54000016 	strpl	r0, [r0], #-22
    2dec:	000016e6 	andeq	r1, r0, r6, ror #13
    2df0:	0016e654 	andseq	lr, r6, r4, asr r6
    2df4:	00255400 	eoreq	r5, r5, r0, lsl #8
    2df8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2dfc:	0016ec04 	andseq	lr, r6, r4, lsl #24
    2e00:	1c575600 	mrrcne	6, 0, r5, r7, cr0
    2e04:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    2e08:	0016fe14 	andseq	pc, r6, r4, lsl lr	; <UNPREDICTABLE>
    2e0c:	16fe5400 	ldrbtne	r5, [lr], r0, lsl #8
    2e10:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2e14:	00070104 	andeq	r0, r7, r4, lsl #2
    2e18:	0b835700 	bleq	fe0d8a20 <BootRAM+0xd0491c1>
    2e1c:	15090000 	strne	r0, [r9, #-0]
    2e20:	0000171f 	andeq	r1, r0, pc, lsl r7
    2e24:	0016fe54 	andseq	pc, r6, r4, asr lr	; <UNPREDICTABLE>
    2e28:	00c95400 	sbceq	r5, r9, r0, lsl #8
    2e2c:	a6540000 	ldrbge	r0, [r4], -r0
    2e30:	00000000 	andeq	r0, r0, r0
    2e34:	000c7053 	andeq	r7, ip, r3, asr r0
    2e38:	593a0b00 	ldmdbpl	sl!, {r8, r9, fp}
    2e3c:	43000000 	movwmi	r0, #0
    2e40:	54000017 	strpl	r0, [r0], #-23
    2e44:	000016e6 	andeq	r1, r0, r6, ror #13
    2e48:	00002554 	andeq	r2, r0, r4, asr r5
    2e4c:	16e65400 	strbtne	r5, [r6], r0, lsl #8
    2e50:	25540000 	ldrbcs	r0, [r4, #-0]
    2e54:	00000000 	andeq	r0, r0, r0
    2e58:	000c5e53 	andeq	r5, ip, r3, asr lr
    2e5c:	5bd90a00 	blpl	ff645664 <BootRAM+0xe5b5e05>
    2e60:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    2e64:	54000017 	strpl	r0, [r0], #-23
    2e68:	000000cf 	andeq	r0, r0, pc, asr #1
    2e6c:	0000dc54 	andeq	sp, r0, r4, asr ip
    2e70:	57003700 	strpl	r3, [r0, -r0, lsl #14]
    2e74:	00000e13 	andeq	r0, r0, r3, lsl lr
    2e78:	17741609 	ldrbne	r1, [r4, -r9, lsl #12]!
    2e7c:	fe540000 	cdp2	0, 5, cr0, cr4, cr0, {0}
    2e80:	54000016 	strpl	r0, [r0], #-22
    2e84:	000000c9 	andeq	r0, r0, r9, asr #1
    2e88:	0b673b00 	bleq	19d1a90 <__Stack_Size+0x19d1290>
    2e8c:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    2e90:	00005b02 	andeq	r5, r0, r2, lsl #22
    2e94:	00178600 	andseq	r8, r7, r0, lsl #12
    2e98:	53003700 	movwpl	r3, #1792	; 0x700
    2e9c:	00000d23 	andeq	r0, r0, r3, lsr #26
    2ea0:	00e72f0c 	rsceq	r2, r7, ip, lsl #30
    2ea4:	17aa0000 	strne	r0, [sl, r0]!
    2ea8:	aa540000 	bge	1502eb0 <__Stack_Size+0x15026b0>
    2eac:	54000017 	strpl	r0, [r0], #-23
    2eb0:	000017aa 	andeq	r1, r0, sl, lsr #15
    2eb4:	0017aa54 	andseq	sl, r7, r4, asr sl
    2eb8:	00255400 	eoreq	r5, r5, r0, lsl #8
    2ebc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2ec0:	0017b004 	andseq	fp, r7, r4
    2ec4:	00e70a00 	rsceq	r0, r7, r0, lsl #20
    2ec8:	80580000 	subshi	r0, r8, r0
    2ecc:	0d000000 	stceq	0, cr0, [r0, #-0]
    2ed0:	05675882 	strbeq	r5, [r7, #-2178]!	; 0x882
    2ed4:	520d0000 	andpl	r0, sp, #0
    2ed8:	000b3200 	andeq	r3, fp, r0, lsl #4
    2edc:	e0000400 	and	r0, r0, r0, lsl #8
    2ee0:	0400000b 	streq	r0, [r0], #-11
    2ee4:	0006c001 	andeq	ip, r6, r1
    2ee8:	128d0100 	addne	r0, sp, #0, 2
    2eec:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    2ef0:	04100000 	ldreq	r0, [r0], #-0
    2ef4:	00000000 	andeq	r0, r0, r0
    2ef8:	0cf80000 	ldcleq	0, cr0, [r8]
    2efc:	01020000 	mrseq	r0, (UNDEF: 2)
    2f00:	00081a06 	andeq	r1, r8, r6, lsl #20
    2f04:	0fc90300 	svceq	0x00c90300
    2f08:	1c020000 	stcne	0, cr0, [r2], {-0}
    2f0c:	00000037 	andeq	r0, r0, r7, lsr r0
    2f10:	18080102 	stmdane	r8, {r1, r8}
    2f14:	02000008 	andeq	r0, r0, #8
    2f18:	065e0502 	ldrbeq	r0, [lr], -r2, lsl #10
    2f1c:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    2f20:	0200000c 	andeq	r0, r0, #12
    2f24:	00005026 	andeq	r5, r0, r6, lsr #32
    2f28:	07020200 	streq	r0, [r2, -r0, lsl #4]
    2f2c:	00000949 	andeq	r0, r0, r9, asr #18
    2f30:	da050402 	ble	143f40 <__Stack_Size+0x143740>
    2f34:	03000004 	movweq	r0, #4
    2f38:	00001078 	andeq	r1, r0, r8, ror r0
    2f3c:	00693802 	rsbeq	r3, r9, r2, lsl #16
    2f40:	04020000 	streq	r0, [r2], #-0
    2f44:	00025207 	andeq	r5, r2, r7, lsl #4
    2f48:	05080200 	streq	r0, [r8, #-512]	; 0x200
    2f4c:	000004d5 	ldrdeq	r0, [r0], -r5
    2f50:	4d070802 	stcmi	8, cr0, [r7, #-8]
    2f54:	04000002 	streq	r0, [r0], #-2
    2f58:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2f5c:	04020074 	streq	r0, [r2], #-116	; 0x74
    2f60:	00025707 	andeq	r5, r2, r7, lsl #14
    2f64:	0fcb0300 	svceq	0x00cb0300
    2f68:	2a030000 	bcs	c2f70 <__Stack_Size+0xc2770>
    2f6c:	0000002c 	andeq	r0, r0, ip, lsr #32
    2f70:	000cf703 	andeq	pc, ip, r3, lsl #14
    2f74:	45360300 	ldrmi	r0, [r6, #-768]!	; 0x300
    2f78:	03000000 	movweq	r0, #0
    2f7c:	0000107a 	andeq	r1, r0, sl, ror r0
    2f80:	005e4203 	subseq	r4, lr, r3, lsl #4
    2f84:	75050000 	strvc	r0, [r5, #-0]
    2f88:	04003233 	streq	r3, [r0], #-563	; 0x233
    2f8c:	00006927 	andeq	r6, r0, r7, lsr #18
    2f90:	31750500 	cmncc	r5, r0, lsl #10
    2f94:	28040036 	stmdacs	r4, {r1, r2, r4, r5}
    2f98:	00000050 	andeq	r0, r0, r0, asr r0
    2f9c:	00387505 	eorseq	r7, r8, r5, lsl #10
    2fa0:	00372904 	eorseq	r2, r7, r4, lsl #18
    2fa4:	01060000 	mrseq	r0, (UNDEF: 6)
    2fa8:	00e23704 	rsceq	r3, r2, r4, lsl #14
    2fac:	b5070000 	strlt	r0, [r7, #-0]
    2fb0:	00000006 	andeq	r0, r0, r6
    2fb4:	0001a707 	andeq	sl, r1, r7, lsl #14
    2fb8:	03000100 	movweq	r0, #256	; 0x100
    2fbc:	0000052d 	andeq	r0, r0, sp, lsr #10
    2fc0:	00cd3704 	sbceq	r3, sp, r4, lsl #14
    2fc4:	63030000 	movwvs	r0, #12288	; 0x3000
    2fc8:	0500000d 	streq	r0, [r0, #-13]
    2fcc:	000085d4 	ldrdeq	r8, [r0], -r4
    2fd0:	02040800 	andeq	r0, r4, #0, 16
    2fd4:	078b0704 	streq	r0, [fp, r4, lsl #14]
    2fd8:	04090000 	streq	r0, [r9], #-0
    2fdc:	00000037 	andeq	r0, r0, r7, lsr r0
    2fe0:	010d0409 	tsteq	sp, r9, lsl #8
    2fe4:	01020000 	mrseq	r0, (UNDEF: 2)
    2fe8:	00082108 	andeq	r2, r8, r8, lsl #2
    2fec:	1a040900 	bne	1053f4 <__Stack_Size+0x104bf4>
    2ff0:	0a000001 	beq	2ffc <__Stack_Size+0x27fc>
    2ff4:	0000010d 	andeq	r0, r0, sp, lsl #2
    2ff8:	00c30409 	sbceq	r0, r3, r9, lsl #8
    2ffc:	ff0b0000 			; <UNDEFINED> instruction: 0xff0b0000
    3000:	0c000005 	stceq	0, cr0, [r0], {5}
    3004:	01623806 	cmneq	r2, r6, lsl #16
    3008:	d70c0000 	strle	r0, [ip, -r0]
    300c:	06000001 	streq	r0, [r0], -r1
    3010:	0000b850 	andeq	fp, r0, r0, asr r8
    3014:	6d0c0000 	stcvs	0, cr0, [ip, #-0]
    3018:	06000008 	streq	r0, [r0], -r8
    301c:	0000b851 	andeq	fp, r0, r1, asr r8
    3020:	bf0c0200 	svclt	0x000c0200
    3024:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
    3028:	0000b852 	andeq	fp, r0, r2, asr r8
    302c:	9a0c0400 	bls	304034 <__Stack_Size+0x303834>
    3030:	06000006 	streq	r0, [r0], -r6
    3034:	00017153 	andeq	r7, r1, r3, asr r1
    3038:	0d000800 	stceq	8, cr0, [r0, #-0]
    303c:	0000011f 	andeq	r0, r0, pc, lsl r1
    3040:	00000171 	andeq	r0, r0, r1, ror r1
    3044:	0000b80e 	andeq	fp, r0, lr, lsl #16
    3048:	04090000 	streq	r0, [r9], #-0
    304c:	00000162 	andeq	r0, r0, r2, ror #2
    3050:	00060003 	andeq	r0, r6, r3
    3054:	25540600 	ldrbcs	r0, [r4, #-1536]	; 0x600
    3058:	0f000001 	svceq	0x00000001
    305c:	02005742 	andeq	r5, r0, #17301504	; 0x1080000
    3060:	01a66206 			; <UNDEFINED> instruction: 0x01a66206
    3064:	62100000 	andsvs	r0, r0, #0
    3068:	06003062 	streq	r3, [r0], -r2, rrx
    306c:	0000c365 	andeq	ip, r0, r5, ror #6
    3070:	62100000 	andsvs	r0, r0, #0
    3074:	06003162 	streq	r3, [r0], -r2, ror #2
    3078:	0000c366 	andeq	ip, r0, r6, ror #6
    307c:	11000100 	mrsne	r0, (UNDEF: 16)
    3080:	c25f0602 	subsgt	r0, pc, #2097152	; 0x200000
    3084:	12000001 	andne	r0, r0, #1
    3088:	61060077 	tstvs	r6, r7, ror r0
    308c:	000000b8 	strheq	r0, [r0], -r8
    3090:	00776212 	rsbseq	r6, r7, r2, lsl r2
    3094:	01826806 	orreq	r6, r2, r6, lsl #16
    3098:	03000000 	movweq	r0, #0
    309c:	00000930 	andeq	r0, r0, r0, lsr r9
    30a0:	01a66906 			; <UNDEFINED> instruction: 0x01a66906
    30a4:	140b0000 	strne	r0, [fp], #-0
    30a8:	1c000001 	stcne	0, cr0, [r0], {1}
    30ac:	025e6b06 	subseq	r6, lr, #6144	; 0x1800
    30b0:	670c0000 	strvs	r0, [ip, -r0]
    30b4:	06000007 	streq	r0, [r0], -r7
    30b8:	0000c36d 	andeq	ip, r0, sp, ror #6
    30bc:	150c0000 	strne	r0, [ip, #-0]
    30c0:	06000000 	streq	r0, [r0], -r0
    30c4:	0000c36e 	andeq	ip, r0, lr, ror #6
    30c8:	110c0100 	mrsne	r0, (UNDEF: 28)
    30cc:	06000003 	streq	r0, [r0], -r3
    30d0:	0001c26f 	andeq	ip, r1, pc, ror #4
    30d4:	480c0200 	stmdami	ip, {r9}
    30d8:	06000001 	streq	r0, [r0], -r1
    30dc:	0001c270 	andeq	ip, r1, r0, ror r2
    30e0:	eb0c0400 	bl	3040e8 <__Stack_Size+0x3038e8>
    30e4:	06000004 	streq	r0, [r0], -r4
    30e8:	0001c271 	andeq	ip, r1, r1, ror r2
    30ec:	510c0600 	tstpl	ip, r0, lsl #12
    30f0:	06000006 	streq	r0, [r0], -r6
    30f4:	0000c373 	andeq	ip, r0, r3, ror r3
    30f8:	080c0800 	stmdaeq	ip, {fp}
    30fc:	06000008 	streq	r0, [r0], -r8
    3100:	0000c374 	andeq	ip, r0, r4, ror r3
    3104:	070c0900 	streq	r0, [ip, -r0, lsl #18]
    3108:	06000005 	streq	r0, [r0], -r5
    310c:	0000c375 	andeq	ip, r0, r5, ror r3
    3110:	4f0c0a00 	svcmi	0x000c0a00
    3114:	06000005 	streq	r0, [r0], -r5
    3118:	0000c376 	andeq	ip, r0, r6, ror r3
    311c:	d60c0b00 	strle	r0, [ip], -r0, lsl #22
    3120:	06000005 	streq	r0, [r0], -r5
    3124:	0000c377 	andeq	ip, r0, r7, ror r3
    3128:	c80c0c00 	stmdagt	ip, {sl, fp}
    312c:	06000007 	streq	r0, [r0], -r7
    3130:	0001777a 	andeq	r7, r1, sl, ror r7
    3134:	03001000 	movweq	r1, #0
    3138:	00000115 	andeq	r0, r0, r5, lsl r1
    313c:	01cd7b06 	biceq	r7, sp, r6, lsl #22
    3140:	e5130000 	ldr	r0, [r3, #-0]
    3144:	0c00000e 	stceq	0, cr0, [r0], {14}
    3148:	ab011007 	blge	4716c <__Stack_Size+0x4696c>
    314c:	14000002 	strne	r0, [r0], #-2
    3150:	00001042 	andeq	r1, r0, r2, asr #32
    3154:	97011107 	strls	r1, [r1, -r7, lsl #2]
    3158:	00000000 	andeq	r0, r0, r0
    315c:	000fbd14 	andeq	fp, pc, r4, lsl sp	; <UNPREDICTABLE>
    3160:	01120700 	tsteq	r2, r0, lsl #14
    3164:	00000097 	muleq	r0, r7, r0
    3168:	10531402 	subsne	r1, r3, r2, lsl #8
    316c:	13070000 	movwne	r0, #28672	; 0x7000
    3170:	0000a201 	andeq	sl, r0, r1, lsl #4
    3174:	58140400 	ldmdapl	r4, {sl}
    3178:	07000010 	smladeq	r0, r0, r0, r0
    317c:	00a20114 	adceq	r0, r2, r4, lsl r1
    3180:	00080000 	andeq	r0, r8, r0
    3184:	23080106 	movwcs	r0, #33030	; 0x8106
    3188:	000002de 	ldrdeq	r0, [r0], -lr
    318c:	0012cf07 	andseq	ip, r2, r7, lsl #30
    3190:	1c070000 	stcne	0, cr0, [r7], {-0}
    3194:	01000012 	tsteq	r0, r2, lsl r0
    3198:	00127207 	andseq	r7, r2, r7, lsl #4
    319c:	a4070200 	strge	r0, [r7], #-512	; 0x200
    31a0:	03000011 	movweq	r0, #17
    31a4:	0012b407 	andseq	fp, r2, r7, lsl #8
    31a8:	85070400 	strhi	r0, [r7, #-1024]	; 0x400
    31ac:	05000013 	streq	r0, [r0, #-19]
    31b0:	0011d607 	andseq	sp, r1, r7, lsl #12
    31b4:	03000600 	movweq	r0, #1536	; 0x600
    31b8:	000011fd 	strdeq	r1, [r0], -sp
    31bc:	02ab2308 	adceq	r2, fp, #8, 6	; 0x20000000
    31c0:	fc0b0000 	stc2	0, cr0, [fp], {-0}
    31c4:	06000012 			; <UNDEFINED> instruction: 0x06000012
    31c8:	033e2908 	teqeq	lr, #8, 18	; 0x20000
    31cc:	1b0c0000 	blne	3031d4 <__Stack_Size+0x3029d4>
    31d0:	08000013 	stmdaeq	r0, {r0, r1, r4}
    31d4:	0000c32a 	andeq	ip, r0, sl, lsr #6
    31d8:	310c0000 	mrscc	r0, (UNDEF: 12)
    31dc:	08000013 	stmdaeq	r0, {r0, r1, r4}
    31e0:	0000c32b 	andeq	ip, r0, fp, lsr #6
    31e4:	400c0100 	andmi	r0, ip, r0, lsl #2
    31e8:	08000013 	stmdaeq	r0, {r0, r1, r4}
    31ec:	0000c32c 	andeq	ip, r0, ip, lsr #6
    31f0:	4f0c0200 	svcmi	0x000c0200
    31f4:	08000013 	stmdaeq	r0, {r0, r1, r4}
    31f8:	0000c32d 	andeq	ip, r0, sp, lsr #6
    31fc:	ea0c0300 	b	303e04 <__Stack_Size+0x303604>
    3200:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3204:	0000c32e 	andeq	ip, r0, lr, lsr #6
    3208:	9d0c0400 	cfstrsls	mvf0, [ip, #-0]
    320c:	08000012 	stmdaeq	r0, {r1, r4}
    3210:	0000c32f 	andeq	ip, r0, pc, lsr #6
    3214:	03000500 	movweq	r0, #1280	; 0x500
    3218:	000012fd 	strdeq	r1, [r0], -sp
    321c:	02e93008 	rsceq	r3, r9, #8
    3220:	6c150000 	ldcvs	0, cr0, [r5], {-0}
    3224:	01000012 	tsteq	r0, r2, lsl r0
    3228:	036e3208 	cmneq	lr, #8, 4	; 0x80000000
    322c:	5e070000 	cdppl	0, 0, cr0, cr7, cr0, {0}
    3230:	00000013 	andeq	r0, r0, r3, lsl r0
    3234:	0013b707 	andseq	fp, r3, r7, lsl #14
    3238:	45160100 	ldrmi	r0, [r6, #-256]	; 0x100
    323c:	0200444e 	andeq	r4, r0, #1308622848	; 0x4e000000
    3240:	00016e07 	andeq	r6, r1, r7, lsl #28
    3244:	03000300 	movweq	r0, #768	; 0x300
    3248:	0000126d 	andeq	r1, r0, sp, ror #4
    324c:	03493708 	movteq	r3, #38664	; 0x9708
    3250:	68170000 	ldmdavs	r7, {}	; <UNPREDICTABLE>
    3254:	03a60c09 			; <UNDEFINED> instruction: 0x03a60c09
    3258:	0b0c0000 	bleq	303260 <__Stack_Size+0x302a60>
    325c:	09000018 	stmdbeq	r0, {r3, r4}
    3260:	0003a60e 	andeq	sl, r3, lr, lsl #12
    3264:	c90c0000 	stmdbgt	ip, {}	; <UNPREDICTABLE>
    3268:	09000016 	stmdbeq	r0, {r1, r2, r4}
    326c:	0003b60f 	andeq	fp, r3, pc, lsl #12
    3270:	6c0c0800 	stcvs	8, cr0, [ip], {-0}
    3274:	09000004 	stmdbeq	r0, {r2}
    3278:	0003c610 	andeq	ip, r3, r0, lsl r6
    327c:	18002800 	stmdane	r0, {fp, sp}
    3280:	00000069 	andeq	r0, r0, r9, rrx
    3284:	000003b6 			; <UNDEFINED> instruction: 0x000003b6
    3288:	0000fa19 	andeq	pc, r0, r9, lsl sl	; <UNPREDICTABLE>
    328c:	18000100 	stmdane	r0, {r8}
    3290:	00000069 	andeq	r0, r0, r9, rrx
    3294:	000003c6 	andeq	r0, r0, r6, asr #7
    3298:	0000fa19 	andeq	pc, r0, r9, lsl sl	; <UNPREDICTABLE>
    329c:	18000700 	stmdane	r0, {r8, r9, sl}
    32a0:	00000037 	andeq	r0, r0, r7, lsr r0
    32a4:	000003d6 	ldrdeq	r0, [r0], -r6
    32a8:	0000fa19 	andeq	pc, r0, r9, lsl sl	; <UNPREDICTABLE>
    32ac:	03003f00 	movweq	r3, #3840	; 0xf00
    32b0:	00001009 	andeq	r1, r0, r9
    32b4:	03791209 	cmneq	r9, #-1879048192	; 0x90000000
    32b8:	bd1a0000 	ldclt	0, cr0, [sl, #-0]
    32bc:	01000009 	tsteq	r0, r9
    32c0:	0018203c 	andseq	r2, r8, ip, lsr r0
    32c4:	0000a008 	andeq	sl, r0, r8
    32c8:	509c0100 	addspl	r0, ip, r0, lsl #2
    32cc:	1b000004 	blne	32e4 <__Stack_Size+0x2ae4>
    32d0:	08001876 	stmdaeq	r0, {r1, r2, r4, r5, r6, fp, ip}
    32d4:	000009ed 	andeq	r0, r0, sp, ror #19
    32d8:	00000419 	andeq	r0, r0, r9, lsl r4
    32dc:	0252011c 	subseq	r0, r2, #28, 2
    32e0:	011c2008 	tsteq	ip, r8
    32e4:	ff080251 			; <UNDEFINED> instruction: 0xff080251
    32e8:	0550011c 	ldrbeq	r0, [r0, #-284]	; 0x11c
    32ec:	0004d803 	andeq	sp, r4, r3, lsl #16
    32f0:	801b0020 	andshi	r0, fp, r0, lsr #32
    32f4:	ed080018 	stc	0, cr0, [r8, #-96]	; 0xffffffa0
    32f8:	3c000009 	stccc	0, cr0, [r0], {9}
    32fc:	1c000004 	stcne	0, cr0, [r0], {4}
    3300:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    3304:	51011c5c 	tstpl	r1, ip, asr ip
    3308:	1cff0802 	ldclne	8, cr0, [pc], #8	; 3318 <__Stack_Size+0x2b18>
    330c:	03055001 	movweq	r5, #20481	; 0x5001
    3310:	2000047c 	andcs	r0, r0, ip, ror r4
    3314:	188a1d00 	stmne	sl, {r8, sl, fp, ip}
    3318:	0a0c0800 	beq	305320 <__Stack_Size+0x304b20>
    331c:	011c0000 	tsteq	ip, r0
    3320:	f8030550 			; <UNDEFINED> instruction: 0xf8030550
    3324:	00200004 	eoreq	r0, r0, r4
    3328:	13d61e00 	bicsne	r1, r6, #0, 28
    332c:	b2010000 	andlt	r0, r1, #0
    3330:	04740101 	ldrbteq	r0, [r4], #-257	; 0x101
    3334:	691f0000 	ldmdbvs	pc, {}	; <UNPREDICTABLE>
    3338:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
    333c:	0000007e 	andeq	r0, r0, lr, ror r0
    3340:	00129320 	andseq	r9, r2, r0, lsr #6
    3344:	01b40100 			; <UNDEFINED> instruction: 0x01b40100
    3348:	00000474 	andeq	r0, r0, r4, ror r4
    334c:	ad040900 	stcge	9, cr0, [r4, #-0]
    3350:	21000000 	mrscs	r0, (UNDEF: 0)
    3354:	00000487 	andeq	r0, r0, r7, lsl #9
    3358:	00e25001 	rsceq	r5, r2, r1
    335c:	18c00000 	stmiane	r0, {}^	; <UNPREDICTABLE>
    3360:	03a00800 	moveq	r0, #0, 16
    3364:	9c010000 	stcls	0, cr0, [r1], {-0}
    3368:	00000685 	andeq	r0, r0, r5, lsl #13
    336c:	0011bf22 	andseq	fp, r1, r2, lsr #30
    3370:	c3550100 	cmpgt	r5, #0, 2
    3374:	b2000000 	andlt	r0, r0, #0
    3378:	2300000c 	movwcs	r0, #12
    337c:	00000450 	andeq	r0, r0, r0, asr r4
    3380:	08001960 	stmdaeq	r0, {r5, r6, r8, fp, ip}
    3384:	000003d8 	ldrdeq	r0, [r0], -r8
    3388:	0514de01 	ldreq	sp, [r4, #-3585]	; 0xe01
    338c:	d8240000 	stmdale	r4!, {}	; <UNPREDICTABLE>
    3390:	25000003 	strcs	r0, [r0, #-3]
    3394:	0000045d 	andeq	r0, r0, sp, asr r4
    3398:	00000d1d 	andeq	r0, r0, sp, lsl sp
    339c:	00046725 	andeq	r6, r4, r5, lsr #14
    33a0:	000d5600 	andeq	r5, sp, r0, lsl #12
    33a4:	19881b00 	stmibne	r8, {r8, r9, fp, ip}
    33a8:	0a230800 	beq	8c53b0 <__Stack_Size+0x8c4bb0>
    33ac:	04e00000 	strbteq	r0, [r0], #0
    33b0:	011c0000 	tsteq	ip, r0
    33b4:	00750250 	rsbseq	r0, r5, r0, asr r2
    33b8:	19a81b00 	stmibne	r8!, {r8, r9, fp, ip}
    33bc:	0a390800 	beq	e453c4 <__Stack_Size+0xe44bc4>
    33c0:	04f40000 	ldrbteq	r0, [r4], #0
    33c4:	011c0000 	tsteq	ip, r0
    33c8:	00780250 	rsbseq	r0, r8, r0, asr r2
    33cc:	19cc2600 	stmibne	ip, {r9, sl, sp}^
    33d0:	0a540800 	beq	15053d8 <__Stack_Size+0x1504bd8>
    33d4:	011c0000 	tsteq	ip, r0
    33d8:	1c340152 	ldfnes	f0, [r4], #-328	; 0xfffffeb8
    33dc:	77025101 	strvc	r5, [r2, -r1, lsl #2]
    33e0:	50011c00 	andpl	r1, r1, r0, lsl #24
    33e4:	04f80305 	ldrbteq	r0, [r8], #773	; 0x305
    33e8:	00002000 	andeq	r2, r0, r0
    33ec:	03f82700 	mvnseq	r2, #0, 14
    33f0:	064e0000 	strbeq	r0, [lr], -r0
    33f4:	69280000 	stmdbvs	r8!, {}	; <UNPREDICTABLE>
    33f8:	fa010064 	blx	43590 <__Stack_Size+0x42d90>
    33fc:	00000269 	andeq	r0, r0, r9, ror #4
    3400:	7ed49103 	atnvcs	f1, f3
    3404:	00111929 	andseq	r1, r1, r9, lsr #18
    3408:	85fd0100 	ldrbhi	r0, [sp, #256]!	; 0x100
    340c:	03000006 	movweq	r0, #6
    3410:	2a7ee091 	bcs	1fbb65c <__Stack_Size+0x1fbae5c>
    3414:	00000d19 	andeq	r0, r0, r9, lsl sp
    3418:	95010201 	strls	r0, [r1, #-513]	; 0x201
    341c:	03000006 	movweq	r0, #6
    3420:	2a7f9891 	bcs	1fe966c <__Stack_Size+0x1fe8e6c>
    3424:	00000e3e 	andeq	r0, r0, lr, lsr lr
    3428:	a5010601 	strge	r0, [r1, #-1537]	; 0x601
    342c:	03000006 	movweq	r0, #6
    3430:	1b7ef891 	blne	1fc167c <__Stack_Size+0x1fc0e7c>
    3434:	08001b06 	stmdaeq	r0, {r1, r2, r8, r9, fp, ip}
    3438:	00000a6f 	andeq	r0, r0, pc, ror #20
    343c:	0000056f 	andeq	r0, r0, pc, ror #10
    3440:	0350011c 	cmpeq	r0, #28, 2
    3444:	007ed491 			; <UNDEFINED> instruction: 0x007ed491
    3448:	001b1e1b 	andseq	r1, fp, fp, lsl lr
    344c:	000a8708 	andeq	r8, sl, r8, lsl #14
    3450:	00058d00 	andeq	r8, r5, r0, lsl #26
    3454:	51011c00 	tstpl	r1, r0, lsl #24
    3458:	73200305 	teqvc	r0, #335544320	; 0x14000000
    345c:	011c0800 	tsteq	ip, r0, lsl #16
    3460:	e0910350 	adds	r0, r1, r0, asr r3
    3464:	281b007e 	ldmdacs	fp, {r1, r2, r3, r4, r5, r6}
    3468:	5408001b 	strpl	r0, [r8], #-27
    346c:	b000000a 	andlt	r0, r0, sl
    3470:	1c000005 	stcne	0, cr0, [r0], {5}
    3474:	47015201 	strmi	r5, [r1, -r1, lsl #4]
    3478:	0351011c 	cmpeq	r1, #28, 2
    347c:	1c7ee091 	ldclne	0, cr14, [lr], #-580	; 0xfffffdbc
    3480:	03055001 	movweq	r5, #20481	; 0x5001
    3484:	200004f8 	strdcs	r0, [r0], -r8
    3488:	1b321b00 	blne	c8a090 <__Stack_Size+0xc89890>
    348c:	0aa20800 	beq	fe885494 <BootRAM+0xd7f5c35>
    3490:	05d00000 	ldrbeq	r0, [r0]
    3494:	011c0000 	tsteq	ip, r0
    3498:	d8030551 	stmdale	r3, {r0, r4, r6, r8, sl}
    349c:	1c200004 	stcne	0, cr0, [r0], #-16
    34a0:	03055001 	movweq	r5, #20481	; 0x5001
    34a4:	200004f8 	strdcs	r0, [r0], -r8
    34a8:	1b3e1b00 	blne	f8a0b0 <__Stack_Size+0xf898b0>
    34ac:	09ed0800 	stmibeq	sp!, {fp}^
    34b0:	05f00000 	ldrbeq	r0, [r0, #0]!
    34b4:	011c0000 	tsteq	ip, r0
    34b8:	40080252 	andmi	r0, r8, r2, asr r2
    34bc:	0251011c 	subseq	r0, r1, #28, 2
    34c0:	011cff08 	tsteq	ip, r8, lsl #30
    34c4:	00750250 	rsbseq	r0, r5, r0, asr r2
    34c8:	1b761b00 	blne	1d8a0d0 <__Stack_Size+0x1d898d0>
    34cc:	0ab80800 	beq	fee054d4 <BootRAM+0xdd75c75>
    34d0:	061a0000 	ldreq	r0, [sl], -r0
    34d4:	011c0000 	tsteq	ip, r0
    34d8:	20080253 	andcs	r0, r8, r3, asr r2
    34dc:	0552011c 	ldrbeq	r0, [r2, #-284]	; 0x11c
    34e0:	0004d803 	andeq	sp, r4, r3, lsl #16
    34e4:	51011c20 	tstpl	r1, r0, lsr #24
    34e8:	1c607502 	cfstr64ne	mvdx7, [r0], #-8
    34ec:	91035001 	tstls	r3, r1
    34f0:	1b007f98 	blne	23358 <__Stack_Size+0x22b58>
    34f4:	08001b80 	stmdaeq	r0, {r7, r8, r9, fp, ip}
    34f8:	00000ae7 	andeq	r0, r0, r7, ror #21
    34fc:	00000631 	andeq	r0, r0, r1, lsr r6
    3500:	0550011c 	ldrbeq	r0, [r0, #-284]	; 0x11c
    3504:	00733803 	rsbseq	r3, r3, r3, lsl #16
    3508:	842b0008 	strthi	r0, [fp], #-8
    350c:	fa08001b 	blx	203580 <__Stack_Size+0x202d80>
    3510:	2600000a 	strcs	r0, [r0], -sl
    3514:	08001c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip}
    3518:	00000ae7 	andeq	r0, r0, r7, ror #21
    351c:	0550011c 	ldrbeq	r0, [r0, #-284]	; 0x11c
    3520:	00735803 	rsbseq	r5, r3, r3, lsl #16
    3524:	2b000008 	blcs	354c <__Stack_Size+0x2d4c>
    3528:	08001a28 	stmdaeq	r0, {r3, r5, r9, fp, ip}
    352c:	00000b02 	andeq	r0, r0, r2, lsl #22
    3530:	001a722b 	andseq	r7, sl, fp, lsr #4
    3534:	000b0e08 	andeq	r0, fp, r8, lsl #28
    3538:	1a762b00 	bne	1d8e140 <__Stack_Size+0x1d8d940>
    353c:	0b160800 	bleq	585544 <__Stack_Size+0x584d44>
    3540:	8c2b0000 	stchi	0, cr0, [fp], #-0
    3544:	0208001a 	andeq	r0, r8, #26
    3548:	2b00000b 	blcs	357c <__Stack_Size+0x2d7c>
    354c:	08001af6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, fp, ip}
    3550:	00000b0e 	andeq	r0, r0, lr, lsl #22
    3554:	001afa2b 	andseq	pc, sl, fp, lsr #20
    3558:	000b1608 	andeq	r1, fp, r8, lsl #12
    355c:	37180000 	ldrcc	r0, [r8, -r0]
    3560:	95000000 	strls	r0, [r0, #-0]
    3564:	19000006 	stmdbne	r0, {r1, r2}
    3568:	000000fa 	strdeq	r0, [r0], -sl
    356c:	8c180016 	ldchi	0, cr0, [r8], {22}
    3570:	a5000000 	strge	r0, [r0, #-0]
    3574:	19000006 	stmdbne	r0, {r1, r2}
    3578:	000000fa 	strdeq	r0, [r0], -sl
    357c:	8c18003f 	ldchi	0, cr0, [r8], {63}	; 0x3f
    3580:	b5000000 	strlt	r0, [r0, #-0]
    3584:	19000006 	stmdbne	r0, {r1, r2}
    3588:	000000fa 	strdeq	r0, [r0], -sl
    358c:	3b2c001f 	blcc	b03610 <__Stack_Size+0xb02e10>
    3590:	01000008 	tsteq	r0, r8
    3594:	1c600172 	stfnee	f0, [r0], #-456	; 0xfffffe38
    3598:	00440800 	subeq	r0, r4, r0, lsl #16
    359c:	9c010000 	stcls	0, cr0, [r1], {-0}
    35a0:	000006f7 	strdeq	r0, [r0], -r7
    35a4:	0011bf2d 	andseq	fp, r1, sp, lsr #30
    35a8:	01730100 	cmneq	r3, r0, lsl #2
    35ac:	000000c3 	andeq	r0, r0, r3, asr #1
    35b0:	00000d7f 	andeq	r0, r0, pc, ror sp
    35b4:	001c862e 	andseq	r8, ip, lr, lsr #12
    35b8:	000b1e08 	andeq	r1, fp, r8, lsl #28
    35bc:	1c922b00 	vldmiane	r2, {d2-d1}
    35c0:	0b260800 	bleq	9855c8 <__Stack_Size+0x984dc8>
    35c4:	9a2e0000 	bls	b835cc <__Stack_Size+0xb82dcc>
    35c8:	2e08001c 	mcrcs	0, 0, r0, cr8, cr12, {0}
    35cc:	0000000b 	andeq	r0, r0, fp
    35d0:	0012512f 	andseq	r5, r2, pc, lsr #2
    35d4:	01890100 	orreq	r0, r9, r0, lsl #2
    35d8:	00000000 	andeq	r0, r0, r0
    35dc:	00000002 	andeq	r0, r0, r2
    35e0:	0e309c01 	cdpeq	12, 3, cr9, cr0, cr1, {0}
    35e4:	01000013 	tsteq	r0, r3, lsl r0
    35e8:	011f018c 	tsteq	pc, ip, lsl #3
    35ec:	1ca40000 	stcne	0, cr0, [r4]
    35f0:	00180800 	andseq	r0, r8, r0, lsl #16
    35f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    35f8:	00000734 	andeq	r0, r0, r4, lsr r7
    35fc:	00130731 	andseq	r0, r3, r1, lsr r7
    3600:	018c0100 	orreq	r0, ip, r0, lsl #2
    3604:	000000b8 	strheq	r0, [r0], -r8
    3608:	00000d9d 	muleq	r0, sp, sp
    360c:	13683000 	cmnne	r8, #0
    3610:	95010000 	strls	r0, [r1, #-0]
    3614:	00011f01 	andeq	r1, r1, r1, lsl #30
    3618:	001cbc00 	andseq	fp, ip, r0, lsl #24
    361c:	00001808 	andeq	r1, r0, r8, lsl #16
    3620:	5f9c0100 	svcpl	0x009c0100
    3624:	31000007 	tstcc	r0, r7
    3628:	00001307 	andeq	r1, r0, r7, lsl #6
    362c:	b8019501 	stmdalt	r1, {r0, r8, sl, ip, pc}
    3630:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    3634:	0000000d 	andeq	r0, r0, sp
    3638:	00132330 	andseq	r2, r3, r0, lsr r3
    363c:	019f0100 	orrseq	r0, pc, r0, lsl #2
    3640:	0000011f 	andeq	r0, r0, pc, lsl r1
    3644:	08001cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, ip}
    3648:	00000034 	andeq	r0, r0, r4, lsr r0
    364c:	078a9c01 	streq	r9, [sl, r1, lsl #24]
    3650:	07310000 	ldreq	r0, [r1, -r0]!
    3654:	01000013 	tsteq	r0, r3, lsl r0
    3658:	00b8019f 	umlalseq	r0, r8, pc, r1	; <UNPREDICTABLE>
    365c:	0df50000 	ldcleq	0, cr0, [r5]
    3660:	30000000 	andcc	r0, r0, r0
    3664:	00001236 	andeq	r1, r0, r6, lsr r2
    3668:	1f01a901 	svcne	0x0001a901
    366c:	08000001 	stmdaeq	r0, {r0}
    3670:	3408001d 	strcc	r0, [r8], #-29
    3674:	01000000 	mrseq	r0, (UNDEF: 0)
    3678:	0007b59c 	muleq	r7, ip, r5
    367c:	13073100 	movwne	r3, #28928	; 0x7100
    3680:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    3684:	0000b801 	andeq	fp, r0, r1, lsl #16
    3688:	000e2100 	andeq	r2, lr, r0, lsl #2
    368c:	50320000 	eorspl	r0, r2, r0
    3690:	00000004 	andeq	r0, r0, r4
    3694:	9c000000 	stcls	0, cr0, [r0], {-0}
    3698:	01000000 	mrseq	r0, (UNDEF: 0)
    369c:	0008219c 	muleq	r8, ip, r1
    36a0:	045d2500 	ldrbeq	r2, [sp], #-1280	; 0x500
    36a4:	0e4d0000 	cdpeq	0, 4, cr0, cr13, cr0, {0}
    36a8:	67250000 	strvs	r0, [r5, -r0]!
    36ac:	86000004 	strhi	r0, [r0], -r4
    36b0:	1b00000e 	blne	36f0 <__Stack_Size+0x2ef0>
    36b4:	00000000 	andeq	r0, r0, r0
    36b8:	00000a23 	andeq	r0, r0, r3, lsr #20
    36bc:	000007ee 	andeq	r0, r0, lr, ror #15
    36c0:	0250011c 	subseq	r0, r0, #28, 2
    36c4:	1b000074 	blne	389c <__Stack_Size+0x309c>
    36c8:	00000000 	andeq	r0, r0, r0
    36cc:	00000a39 	andeq	r0, r0, r9, lsr sl
    36d0:	00000802 	andeq	r0, r0, r2, lsl #16
    36d4:	0250011c 	subseq	r0, r0, #28, 2
    36d8:	26000077 			; <UNDEFINED> instruction: 0x26000077
    36dc:	00000000 	andeq	r0, r0, r0
    36e0:	00000a54 	andeq	r0, r0, r4, asr sl
    36e4:	0152011c 	cmpeq	r2, ip, lsl r1
    36e8:	51011c34 	tstpl	r1, r4, lsr ip
    36ec:	1c007602 	stcne	6, cr7, [r0], {2}
    36f0:	03055001 	movweq	r5, #20481	; 0x5001
    36f4:	200004f8 	strdcs	r0, [r0], -r8
    36f8:	a0330000 	eorsge	r0, r3, r0
    36fc:	01000013 	tsteq	r0, r3, lsl r0
    3700:	00c301da 	ldrdeq	r0, [r3], #26
    3704:	00000000 	andeq	r0, r0, r0
    3708:	000c0000 	andeq	r0, ip, r0
    370c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3710:	0011f12c 	andseq	pc, r1, ip, lsr #2
    3714:	01df0100 	bicseq	r0, pc, r0, lsl #2
    3718:	00000000 	andeq	r0, r0, r0
    371c:	0000000c 	andeq	r0, r0, ip
    3720:	085c9c01 	ldmdaeq	ip, {r0, sl, fp, ip, pc}^
    3724:	cd340000 	ldcgt	0, cr0, [r4, #-0]
    3728:	01000013 	tsteq	r0, r3, lsl r0
    372c:	00c301df 	ldrdeq	r0, [r3], #31
    3730:	50010000 	andpl	r0, r1, r0
    3734:	0b723500 	bleq	1c90b3c <__Stack_Size+0x1c9033c>
    3738:	e4010000 	str	r0, [r1], #-0
    373c:	0000e201 	andeq	lr, r0, r1, lsl #4
    3740:	001d3c00 	andseq	r3, sp, r0, lsl #24
    3744:	00000c08 	andeq	r0, r0, r8, lsl #24
    3748:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
    374c:	0000120e 	andeq	r1, r0, lr, lsl #4
    3750:	e201e901 	and	lr, r1, #16384	; 0x4000
    3754:	00000000 	andeq	r0, r0, r0
    3758:	1c000000 	stcne	0, cr0, [r0], {-0}
    375c:	01000000 	mrseq	r0, (UNDEF: 0)
    3760:	0b2e369c 	bleq	b911d8 <__Stack_Size+0xb909d8>
    3764:	ef010000 	svc	0x00010000
    3768:	001d4801 	andseq	r4, sp, r1, lsl #16
    376c:	00000208 	andeq	r0, r0, r8, lsl #4
    3770:	299c0100 	ldmibcs	ip, {r8}
    3774:	000011ca 	andeq	r1, r0, sl, asr #3
    3778:	08ab2701 	stmiaeq	fp!, {r0, r8, r9, sl, sp}
    377c:	03050000 	movweq	r0, #20480	; 0x5000
    3780:	200002c8 	andcs	r0, r0, r8, asr #5
    3784:	0000ad37 	andeq	sl, r0, r7, lsr sp
    3788:	13ac2900 			; <UNDEFINED> instruction: 0x13ac2900
    378c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    3790:	000008ab 	andeq	r0, r0, fp, lsr #17
    3794:	02c40305 	sbceq	r0, r4, #335544320	; 0x14000000
    3798:	ef292000 	svc	0x00292000
    379c:	01000012 	tsteq	r0, r2, lsl r0
    37a0:	0008d229 	andeq	sp, r8, r9, lsr #4
    37a4:	b8030500 	stmdalt	r3, {r8, sl}
    37a8:	3720000d 	strcc	r0, [r0, -sp]!
    37ac:	0000033e 	andeq	r0, r0, lr, lsr r3
    37b0:	0000c318 	andeq	ip, r0, r8, lsl r3
    37b4:	0008e800 	andeq	lr, r8, r0, lsl #16
    37b8:	00fa3800 	rscseq	r3, sl, r0, lsl #16
    37bc:	07ff0000 	ldrbeq	r0, [pc, r0]!
    37c0:	122b2900 	eorne	r2, fp, #0, 18
    37c4:	32010000 	andcc	r0, r1, #0
    37c8:	000008f9 	strdeq	r0, [r0], -r9
    37cc:	05ac0305 	streq	r0, [ip, #773]!	; 0x305
    37d0:	d7372000 	ldrle	r2, [r7, -r0]!
    37d4:	29000008 	stmdbcs	r0, {r3}
    37d8:	000012df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    37dc:	08ab3401 	stmiaeq	fp!, {r0, sl, ip, sp}
    37e0:	03050000 	movweq	r0, #20480	; 0x5000
    37e4:	20000db0 			; <UNDEFINED> instruction: 0x20000db0
    37e8:	00124429 	andseq	r4, r2, r9, lsr #8
    37ec:	20350100 	eorscs	r0, r5, r0, lsl #2
    37f0:	05000009 	streq	r0, [r0, #-9]
    37f4:	000dac03 	andeq	sl, sp, r3, lsl #24
    37f8:	00b83720 	adcseq	r3, r8, r0, lsr #14
    37fc:	a5290000 	strge	r0, [r9, #-0]!
    3800:	01000012 	tsteq	r0, r2, lsl r0
    3804:	00092036 	andeq	r2, r9, r6, lsr r0
    3808:	a8030500 	stmdage	r3, {r8, sl}
    380c:	39200005 	stmdbcc	r0!, {r0, r2}
    3810:	000001e8 	andeq	r0, r0, r8, ror #3
    3814:	0941220a 	stmdbeq	r1, {r1, r3, r9, sp}^
    3818:	04090000 	streq	r0, [r9], #-0
    381c:	0000025e 	andeq	r0, r0, lr, asr r2
    3820:	0000b13a 	andeq	fp, r0, sl, lsr r1
    3824:	7e2c0b00 	vmulvc.f64	d0, d12, d0
    3828:	05000000 	streq	r0, [r0, #-0]
    382c:	00047003 	andeq	r7, r4, r3
    3830:	12643a20 	rsbne	r3, r4, #32, 20	; 0x20000
    3834:	2b010000 	blcs	4383c <__Stack_Size+0x4303c>
    3838:	00000969 	andeq	r0, r0, r9, ror #18
    383c:	0dc00305 	stcleq	3, cr0, [r0, #20]
    3840:	e2372000 	eors	r2, r7, #0
    3844:	3a000000 	bcc	384c <__Stack_Size+0x304c>
    3848:	000013be 			; <UNDEFINED> instruction: 0x000013be
    384c:	097f2a01 	ldmdbeq	pc!, {r0, r9, fp, sp}^	; <UNPREDICTABLE>
    3850:	03050000 	movweq	r0, #20480	; 0x5000
    3854:	20000db4 			; <UNDEFINED> instruction: 0x20000db4
    3858:	0002de37 	andeq	sp, r2, r7, lsr lr
    385c:	00371800 	eorseq	r1, r7, r0, lsl #16
    3860:	09940000 	ldmibeq	r4, {}	; <UNPREDICTABLE>
    3864:	fa190000 	blx	64386c <__Stack_Size+0x64306c>
    3868:	1f000000 	svcne	0x00000000
    386c:	0d4a3a00 	vstreq	s7, [sl, #-0]
    3870:	2d010000 	stccs	0, cr0, [r1, #-0]
    3874:	00000984 	andeq	r0, r0, r4, lsl #19
    3878:	04d80305 	ldrbeq	r0, [r8], #773	; 0x305
    387c:	8c182000 	ldchi	0, cr2, [r8], {-0}
    3880:	b5000000 	strlt	r0, [r0, #-0]
    3884:	19000009 	stmdbne	r0, {r0, r3}
    3888:	000000fa 	strdeq	r0, [r0], -sl
    388c:	a53a005b 	ldrge	r0, [sl, #-91]!	; 0x5b
    3890:	0100000b 	tsteq	r0, fp
    3894:	0009a52e 	andeq	sl, r9, lr, lsr #10
    3898:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
    389c:	3b200004 	blcc	8038b4 <__Stack_Size+0x8030b4>
    38a0:	00787463 	rsbseq	r7, r8, r3, ror #8
    38a4:	03d62f01 	bicseq	r2, r6, #1, 30
    38a8:	03050000 	movweq	r0, #20480	; 0x5000
    38ac:	200004f8 	strdcs	r0, [r0], -r8
    38b0:	0013763a 	andseq	r7, r3, sl, lsr r6
    38b4:	e8390100 	ldmda	r9!, {r8}
    38b8:	05000009 	streq	r0, [r0, #-9]
    38bc:	00056003 	andeq	r6, r5, r3
    38c0:	036e3720 	cmneq	lr, #32, 14	; 0x800000
    38c4:	9f3c0000 	svcls	0x003c0000
    38c8:	0c00000f 	stceq	0, cr0, [r0], {15}
    38cc:	0000f819 	andeq	pc, r0, r9, lsl r8	; <UNPREDICTABLE>
    38d0:	000a0c00 	andeq	r0, sl, r0, lsl #24
    38d4:	00f80e00 	rscseq	r0, r8, r0, lsl #28
    38d8:	7e0e0000 	cdpvc	0, 0, cr0, cr14, cr0, {0}
    38dc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    38e0:	000000ed 	andeq	r0, r0, sp, ror #1
    38e4:	0f1c3d00 	svceq	0x001c3d00
    38e8:	14090000 	strne	r0, [r9], #-0
    38ec:	00000a1d 	andeq	r0, r0, sp, lsl sl
    38f0:	000a1d0e 	andeq	r1, sl, lr, lsl #26
    38f4:	04090000 	streq	r0, [r9], #-0
    38f8:	000003d6 	ldrdeq	r0, [r0], -r6
    38fc:	000b913e 	andeq	r9, fp, lr, lsr r1
    3900:	01300700 	teqeq	r0, r0, lsl #14
    3904:	000000e2 	andeq	r0, r0, r2, ror #1
    3908:	00000a39 	andeq	r0, r0, r9, lsr sl
    390c:	0000ad0e 	andeq	sl, r0, lr, lsl #26
    3910:	393e0000 	ldmdbcc	lr!, {}	; <UNPREDICTABLE>
    3914:	07000011 	smladeq	r0, r1, r0, r0
    3918:	00e2012f 	rsceq	r0, r2, pc, lsr #2
    391c:	0a540000 	beq	1503924 <__Stack_Size+0x1503124>
    3920:	ad0e0000 	stcge	0, cr0, [lr, #-0]
    3924:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    3928:	000000ad 	andeq	r0, r0, sp, lsr #1
    392c:	0b833d00 	bleq	fe0d2d34 <BootRAM+0xd0434d5>
    3930:	15090000 	strne	r0, [r9, #-0]
    3934:	00000a6f 	andeq	r0, r0, pc, ror #20
    3938:	000a1d0e 	andeq	r1, sl, lr, lsl #26
    393c:	01010e00 	tsteq	r1, r0, lsl #28
    3940:	690e0000 	stmdbvs	lr, {}	; <UNPREDICTABLE>
    3944:	00000000 	andeq	r0, r0, r0
    3948:	000cdf3f 	andeq	sp, ip, pc, lsr pc
    394c:	013d0700 	teqeq	sp, r0, lsl #14
    3950:	00000a81 	andeq	r0, r0, r1, lsl #21
    3954:	000a810e 	andeq	r8, sl, lr, lsl #2
    3958:	04090000 	streq	r0, [r9], #-0
    395c:	00000269 	andeq	r0, r0, r9, ror #4
    3960:	000c5e3c 	andeq	r5, ip, ip, lsr lr
    3964:	7ed90d00 	cdpvc	13, 13, cr0, cr9, cr0, {0}
    3968:	a2000000 	andge	r0, r0, #0
    396c:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    3970:	00000107 	andeq	r0, r0, r7, lsl #2
    3974:	0001140e 	andeq	r1, r1, lr, lsl #8
    3978:	3d004000 	stccc	0, cr4, [r0, #-0]
    397c:	00000e13 	andeq	r0, r0, r3, lsl lr
    3980:	0ab81609 	beq	fee091ac <BootRAM+0xdd7994d>
    3984:	1d0e0000 	stcne	0, cr0, [lr, #-0]
    3988:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    398c:	00000101 	andeq	r0, r0, r1, lsl #2
    3990:	0d233c00 	stceq	12, cr3, [r3, #-0]
    3994:	2f0e0000 	svccs	0x000e0000
    3998:	0000008c 	andeq	r0, r0, ip, lsl #1
    399c:	00000adc 	ldrdeq	r0, [r0], -ip
    39a0:	000adc0e 	andeq	sp, sl, lr, lsl #24
    39a4:	0adc0e00 	beq	ff7071ac <BootRAM+0xe67794d>
    39a8:	dc0e0000 	stcle	0, cr0, [lr], {-0}
    39ac:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    39b0:	000000ed 	andeq	r0, r0, sp, ror #1
    39b4:	e2040900 	and	r0, r4, #0, 18
    39b8:	0a00000a 	beq	39e8 <__Stack_Size+0x31e8>
    39bc:	0000008c 	andeq	r0, r0, ip, lsl #1
    39c0:	000ab33f 	andeq	fp, sl, pc, lsr r3
    39c4:	013b0700 	teqeq	fp, r0, lsl #14
    39c8:	00000afa 	strdeq	r0, [r0], -sl
    39cc:	0001140e 	andeq	r1, r1, lr, lsl #8
    39d0:	41004000 	mrsmi	r4, (UNDEF: 0)
    39d4:	00000da4 	andeq	r0, r0, r4, lsr #27
    39d8:	42013207 	andmi	r3, r1, #1879048192	; 0x70000000
    39dc:	00000e7e 	andeq	r0, r0, lr, ror lr
    39e0:	7e013707 	cdpvc	7, 0, cr3, cr1, cr7, {0}
    39e4:	41000000 	mrsmi	r0, (UNDEF: 0)
    39e8:	00000b23 	andeq	r0, r0, r3, lsr #22
    39ec:	41012a07 	tstmi	r1, r7, lsl #20
    39f0:	00000df5 	strdeq	r0, [r0], -r5
    39f4:	41013307 	tstmi	r1, r7, lsl #6
    39f8:	00000bbe 			; <UNDEFINED> instruction: 0x00000bbe
    39fc:	41012607 	tstmi	r1, r7, lsl #12
    3a00:	00000c10 	andeq	r0, r0, r0, lsl ip
    3a04:	43013507 	movwmi	r3, #5383	; 0x1507
    3a08:	00000473 	andeq	r0, r0, r3, ror r4
    3a0c:	3300830b 	movwcc	r8, #779	; 0x30b
    3a10:	0400000a 	streq	r0, [r0], #-10
    3a14:	000fc400 	andeq	ip, pc, r0, lsl #8
    3a18:	c0010400 	andgt	r0, r1, r0, lsl #8
    3a1c:	01000006 	tsteq	r0, r6
    3a20:	000013f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    3a24:	00000893 	muleq	r0, r3, r8
    3a28:	00000508 	andeq	r0, r0, r8, lsl #10
    3a2c:	00000000 	andeq	r0, r0, r0
    3a30:	0000116b 	andeq	r1, r0, fp, ror #2
    3a34:	1a060102 	bne	183e44 <__Stack_Size+0x183644>
    3a38:	03000008 	movweq	r0, #8
    3a3c:	00000fc9 	andeq	r0, r0, r9, asr #31
    3a40:	00371c03 	eorseq	r1, r7, r3, lsl #24
    3a44:	01020000 	mrseq	r0, (UNDEF: 2)
    3a48:	00081808 	andeq	r1, r8, r8, lsl #16
    3a4c:	05020200 	streq	r0, [r2, #-512]	; 0x200
    3a50:	0000065e 	andeq	r0, r0, lr, asr r6
    3a54:	49070202 	stmdbmi	r7, {r1, r9}
    3a58:	02000009 	andeq	r0, r0, #9
    3a5c:	04da0504 	ldrbeq	r0, [sl], #1284	; 0x504
    3a60:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
    3a64:	03000010 	movweq	r0, #16
    3a68:	00005e38 	andeq	r5, r0, r8, lsr lr
    3a6c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3a70:	00000252 	andeq	r0, r0, r2, asr r2
    3a74:	d5050802 	strle	r0, [r5, #-2050]	; 0x802
    3a78:	02000004 	andeq	r0, r0, #4
    3a7c:	024d0708 	subeq	r0, sp, #8, 14	; 0x200000
    3a80:	04040000 	streq	r0, [r4], #-0
    3a84:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    3a88:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3a8c:	00000257 	andeq	r0, r0, r7, asr r2
    3a90:	000fcb03 	andeq	ip, pc, r3, lsl #22
    3a94:	2c2a0400 	cfstrscs	mvf0, [sl], #-0
    3a98:	03000000 	movweq	r0, #0
    3a9c:	0000107a 	andeq	r1, r0, sl, ror r0
    3aa0:	00534204 	subseq	r4, r3, r4, lsl #4
    3aa4:	04020000 	streq	r0, [r2], #-0
    3aa8:	00078b07 	andeq	r8, r7, r7, lsl #22
    3aac:	08010200 	stmdaeq	r1, {r9}
    3ab0:	00000821 	andeq	r0, r0, r1, lsr #16
    3ab4:	00140a05 	andseq	r0, r4, r5, lsl #20
    3ab8:	03220200 	teqeq	r2, #0, 4
    3abc:	000000c4 	andeq	r0, r0, r4, asr #1
    3ac0:	02007806 	andeq	r7, r0, #393216	; 0x60000
    3ac4:	0000c422 	andeq	ip, r0, r2, lsr #8
    3ac8:	00610600 	rsbeq	r0, r1, r0, lsl #12
    3acc:	00ca2202 	sbceq	r2, sl, r2, lsl #4
    3ad0:	07000000 	streq	r0, [r0, -r0]
    3ad4:	00008104 	andeq	r8, r0, r4, lsl #2
    3ad8:	d0040700 	andle	r0, r4, r0, lsl #14
    3adc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3ae0:	00000081 	andeq	r0, r0, r1, lsl #1
    3ae4:	0014be05 	andseq	fp, r4, r5, lsl #28
    3ae8:	012a0100 	teqeq	sl, r0, lsl #2
    3aec:	00000158 	andeq	r0, r0, r8, asr r1
    3af0:	00357806 	eorseq	r7, r5, r6, lsl #16
    3af4:	00c42a01 	sbceq	r2, r4, r1, lsl #20
    3af8:	7a060000 	bvc	183b00 <__Stack_Size+0x183300>
    3afc:	2a010035 	bcs	43bd8 <__Stack_Size+0x433d8>
    3b00:	000000c4 	andeq	r0, r0, r4, asr #1
    3b04:	00317806 	eorseq	r7, r1, r6, lsl #16
    3b08:	00ca2b01 	sbceq	r2, sl, r1, lsl #22
    3b0c:	7a060000 	bvc	183b14 <__Stack_Size+0x183314>
    3b10:	2b010031 	blcs	43bdc <__Stack_Size+0x433dc>
    3b14:	000000ca 	andeq	r0, r0, sl, asr #1
    3b18:	00327806 	eorseq	r7, r2, r6, lsl #16
    3b1c:	00ca2c01 	sbceq	r2, sl, r1, lsl #24
    3b20:	7a060000 	bvc	183b28 <__Stack_Size+0x183328>
    3b24:	2c010032 	stccs	0, cr0, [r1], {50}	; 0x32
    3b28:	000000ca 	andeq	r0, r0, sl, asr #1
    3b2c:	00337806 	eorseq	r7, r3, r6, lsl #16
    3b30:	00ca2d01 	sbceq	r2, sl, r1, lsl #26
    3b34:	7a060000 	bvc	183b3c <__Stack_Size+0x18333c>
    3b38:	2d010033 	stccs	0, cr0, [r1, #-204]	; 0xffffff34
    3b3c:	000000ca 	andeq	r0, r0, sl, asr #1
    3b40:	00616409 	rsbeq	r6, r1, r9, lsl #8
    3b44:	01583d01 	cmpeq	r8, r1, lsl #26
    3b48:	63090000 	movwvs	r0, #36864	; 0x9000
    3b4c:	3e010062 	cdpcc	0, 0, cr0, cr1, cr2, {3}
    3b50:	00000158 	andeq	r0, r0, r8, asr r1
    3b54:	01006109 	tsteq	r0, r9, lsl #2
    3b58:	0001583f 	andeq	r5, r1, pc, lsr r8
    3b5c:	00620900 	rsbeq	r0, r2, r0, lsl #18
    3b60:	01584001 	cmpeq	r8, r1
    3b64:	0a000000 	beq	3b6c <__Stack_Size+0x336c>
    3b68:	00000081 	andeq	r0, r0, r1, lsl #1
    3b6c:	00000168 	andeq	r0, r0, r8, ror #2
    3b70:	0000970b 	andeq	r9, r0, fp, lsl #14
    3b74:	05001f00 	streq	r1, [r0, #-3840]	; 0xf00
    3b78:	00001400 	andeq	r1, r0, r0, lsl #8
    3b7c:	c7010c01 	strgt	r0, [r1, -r1, lsl #24]
    3b80:	06000001 	streq	r0, [r0], -r1
    3b84:	01003378 	tsteq	r0, r8, ror r3
    3b88:	0000c40c 	andeq	ip, r0, ip, lsl #8
    3b8c:	337a0600 	cmncc	sl, #0, 12
    3b90:	c40c0100 	strgt	r0, [ip], #-256	; 0x100
    3b94:	06000000 	streq	r0, [r0], -r0
    3b98:	01003178 	tsteq	r0, r8, ror r1
    3b9c:	0000ca0d 	andeq	ip, r0, sp, lsl #20
    3ba0:	317a0600 	cmncc	sl, r0, lsl #12
    3ba4:	ca0d0100 	bgt	343fac <__Stack_Size+0x3437ac>
    3ba8:	0c000000 	stceq	0, cr0, [r0], {-0}
    3bac:	0000143c 	andeq	r1, r0, ip, lsr r4
    3bb0:	01581601 	cmpeq	r8, r1, lsl #12
    3bb4:	4c0c0000 	stcmi	0, cr0, [ip], {-0}
    3bb8:	01000014 	tsteq	r0, r4, lsl r0
    3bbc:	00015817 	andeq	r5, r1, r7, lsl r8
    3bc0:	14690c00 	strbtne	r0, [r9], #-3072	; 0xc00
    3bc4:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    3bc8:	00000158 	andeq	r0, r0, r8, asr r1
    3bcc:	01006109 	tsteq	r0, r9, lsl #2
    3bd0:	00015819 	andeq	r5, r1, r9, lsl r8
    3bd4:	510d0000 	mrspl	r0, (UNDEF: 13)
    3bd8:	01000014 	tsteq	r0, r4, lsl r0
    3bdc:	00000053 	andeq	r0, r0, r3, asr r0
    3be0:	00022800 	andeq	r2, r2, r0, lsl #16
    3be4:	5c9c0100 	ldfpls	f0, [ip], {0}
    3be8:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    3bec:	000014b7 			; <UNDEFINED> instruction: 0x000014b7
    3bf0:	00c45301 	sbceq	r5, r4, r1, lsl #6
    3bf4:	0eaf0000 	cdpeq	0, 10, cr0, cr15, cr0, {0}
    3bf8:	710f0000 	mrsvc	r0, CPSR
    3bfc:	ca530100 	bgt	14c4004 <__Stack_Size+0x14c3804>
    3c00:	db000000 	blle	3c08 <__Stack_Size+0x3408>
    3c04:	0f00000e 	svceq	0x0000000e
    3c08:	53010065 	movwpl	r0, #4197	; 0x1065
    3c0c:	000000ca 	andeq	r0, r0, sl, asr #1
    3c10:	00000f07 	andeq	r0, r0, r7, lsl #30
    3c14:	006d7810 	rsbeq	r7, sp, r0, lsl r8
    3c18:	01585601 	cmpeq	r8, r1, lsl #12
    3c1c:	91030000 	mrsls	r0, (UNDEF: 3)
    3c20:	7a107da8 	bvc	4232c8 <__Stack_Size+0x422ac8>
    3c24:	5701006d 	strpl	r0, [r1, -sp, rrx]
    3c28:	00000158 	andeq	r0, r0, r8, asr r1
    3c2c:	7dc89103 	stfvcp	f1, [r8, #12]
    3c30:	316d7810 	cmncc	sp, r0, lsl r8
    3c34:	585a0100 	ldmdapl	sl, {r8}^
    3c38:	03000001 	movweq	r0, #1
    3c3c:	107de891 			; <UNDEFINED> instruction: 0x107de891
    3c40:	00316d7a 	eorseq	r6, r1, sl, ror sp
    3c44:	01585b01 	cmpeq	r8, r1, lsl #22
    3c48:	91030000 	mrsls	r0, (UNDEF: 3)
    3c4c:	69117e88 	ldmdbvs	r1, {r3, r7, r9, sl, fp, ip, sp, lr}
    3c50:	735d0100 	cmpvc	sp, #0, 2
    3c54:	33000000 	movwcc	r0, #0
    3c58:	1200000f 	andne	r0, r0, #15
    3c5c:	000000a5 	andeq	r0, r0, r5, lsr #1
    3c60:	00000000 	andeq	r0, r0, r0
    3c64:	00000488 	andeq	r0, r0, r8, lsl #9
    3c68:	02726001 	rsbseq	r6, r2, #1
    3c6c:	ba130000 	blt	4c3c74 <__Stack_Size+0x4c3474>
    3c70:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    3c74:	1300000f 	movwne	r0, #15
    3c78:	000000b1 	strheq	r0, [r0], -r1
    3c7c:	00000f7f 	andeq	r0, r0, pc, ror pc
    3c80:	04b81400 	ldrteq	r1, [r8], #1024	; 0x400
    3c84:	090e0000 	stmdbeq	lr, {}	; <UNPREDICTABLE>
    3c88:	62110000 	andsvs	r0, r1, #0
    3c8c:	01007469 	tsteq	r0, r9, ror #8
    3c90:	00095c63 	andeq	r5, r9, r3, ror #24
    3c94:	000fae00 	andeq	sl, pc, r0, lsl #28
    3c98:	6d781000 	ldclvs	0, cr1, [r8, #-0]
    3c9c:	64010073 	strvs	r0, [r1], #-115	; 0x73
    3ca0:	00000158 	andeq	r0, r0, r8, asr r1
    3ca4:	7ea89103 	tanvce	f1, f3
    3ca8:	736d7a10 	cmnvc	sp, #16, 20	; 0x10000
    3cac:	58650100 	stmdapl	r5!, {r8}^
    3cb0:	03000001 	movweq	r0, #1
    3cb4:	127ec891 	rsbsne	ip, lr, #9502720	; 0x910000
    3cb8:	000000d5 	ldrdeq	r0, [r0], -r5
    3cbc:	00000000 	andeq	r0, r0, r0
    3cc0:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3cc4:	04b76801 	ldrteq	r6, [r7], #2049	; 0x801
    3cc8:	ff150000 			; <UNDEFINED> instruction: 0xff150000
    3ccc:	13000000 	movwne	r0, #0
    3cd0:	00000127 	andeq	r0, r0, r7, lsr #2
    3cd4:	00000fc1 	andeq	r0, r0, r1, asr #31
    3cd8:	00011d13 	andeq	r1, r1, r3, lsl sp
    3cdc:	00103000 	andseq	r3, r0, r0
    3ce0:	01131300 	tsteq	r3, r0, lsl #6
    3ce4:	10860000 	addne	r0, r6, r0
    3ce8:	09130000 	ldmdbeq	r3, {}	; <UNPREDICTABLE>
    3cec:	f5000001 			; <UNDEFINED> instruction: 0xf5000001
    3cf0:	13000010 	movwne	r0, #16
    3cf4:	000000f5 	strdeq	r0, [r0], -r5
    3cf8:	00001124 	andeq	r1, r0, r4, lsr #2
    3cfc:	0000eb13 	andeq	lr, r0, r3, lsl fp
    3d00:	000fc100 	andeq	ip, pc, r0, lsl #2
    3d04:	00e11300 	rsceq	r1, r1, r0, lsl #6
    3d08:	10300000 	eorsne	r0, r0, r0
    3d0c:	d0160000 	andsle	r0, r6, r0
    3d10:	17000004 	strne	r0, [r0, -r4]
    3d14:	00000131 	andeq	r0, r0, r1, lsr r1
    3d18:	7ee89103 	urdvce	f1, f3
    3d1c:	00013b17 	andeq	r3, r1, r7, lsl fp
    3d20:	88910300 	ldmhi	r1, {r8, r9}
    3d24:	0145177f 	hvceq	20863	; 0x517f
    3d28:	91030000 	mrsls	r0, (UNDEF: 3)
    3d2c:	4e177fa8 	cdpmi	15, 1, cr7, cr7, cr8, {5}
    3d30:	02000001 	andeq	r0, r0, #1
    3d34:	00184891 	mulseq	r8, r1, r8
    3d38:	87000000 	strhi	r0, [r0, -r0]
    3d3c:	49000009 	stmdbmi	r0, {r0, r3}
    3d40:	19000003 	stmdbne	r0, {r0, r1}
    3d44:	91035201 	tstls	r3, r1, lsl #4
    3d48:	01197dc8 	tsteq	r9, r8, asr #27
    3d4c:	007d0251 	rsbseq	r0, sp, r1, asr r2
    3d50:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    3d54:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    3d58:	00000018 	andeq	r0, r0, r8, lsl r0
    3d5c:	0009a200 	andeq	sl, r9, r0, lsl #4
    3d60:	00036b00 	andeq	r6, r3, r0, lsl #22
    3d64:	52011900 	andpl	r1, r1, #0, 18
    3d68:	7e889103 	sinvce	f1, f3
    3d6c:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    3d70:	197de891 	ldmdbne	sp!, {r0, r4, r7, fp, sp, lr, pc}^
    3d74:	91025001 	tstls	r2, r1
    3d78:	00180048 	andseq	r0, r8, r8, asr #32
    3d7c:	bd000000 	stclt	0, cr0, [r0, #-0]
    3d80:	8d000009 	stchi	0, cr0, [r0, #-36]	; 0xffffffdc
    3d84:	19000003 	stmdbne	r0, {r0, r1}
    3d88:	91025201 	tstls	r2, r1, lsl #4
    3d8c:	51011948 	tstpl	r1, r8, asr #18
    3d90:	7fa89103 	svcvc	0x00a89103
    3d94:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    3d98:	007ee891 			; <UNDEFINED> instruction: 0x007ee891
    3d9c:	00000018 	andeq	r0, r0, r8, lsl r0
    3da0:	0009a200 	andeq	sl, r9, r0, lsl #4
    3da4:	0003ae00 	andeq	sl, r3, r0, lsl #28
    3da8:	52011900 	andpl	r1, r1, #0, 18
    3dac:	7dc89103 	stfvcp	f1, [r8, #12]
    3db0:	02510119 	subseq	r0, r1, #1073741830	; 0x40000006
    3db4:	0119007d 	tsteq	r9, sp, ror r0
    3db8:	48910250 	ldmmi	r1, {r4, r6, r9}
    3dbc:	00001800 	andeq	r1, r0, r0, lsl #16
    3dc0:	09870000 	stmibeq	r7, {}	; <UNPREDICTABLE>
    3dc4:	03d10000 	bicseq	r0, r1, #0
    3dc8:	01190000 	tsteq	r9, r0
    3dcc:	88910352 	ldmhi	r1, {r1, r4, r6, r8, r9}
    3dd0:	5101197e 	tstpl	r1, lr, ror r9
    3dd4:	7de89103 	stfvcp	f1, [r8, #12]!
    3dd8:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    3ddc:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    3de0:	00000018 	andeq	r0, r0, r8, lsl r0
    3de4:	0009bd00 	andeq	fp, r9, r0, lsl #26
    3de8:	0003f300 	andeq	pc, r3, r0, lsl #6
    3dec:	52011900 	andpl	r1, r1, #0, 18
    3df0:	19489102 	stmdbne	r8, {r1, r8, ip, pc}^
    3df4:	91035101 	tstls	r3, r1, lsl #2
    3df8:	01197fa8 	tsteq	r9, r8, lsr #31
    3dfc:	88910350 	ldmhi	r1, {r4, r6, r8, r9}
    3e00:	0018007f 	andseq	r0, r8, pc, ror r0
    3e04:	87000000 	strhi	r0, [r0, -r0]
    3e08:	16000009 	strne	r0, [r0], -r9
    3e0c:	19000004 	stmdbne	r0, {r2}
    3e10:	91035201 	tstls	r3, r1, lsl #4
    3e14:	01197f88 	tsteq	r9, r8, lsl #31
    3e18:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    3e1c:	5001197e 	andpl	r1, r1, lr, ror r9
    3e20:	7fa89103 	svcvc	0x00a89103
    3e24:	00001800 	andeq	r1, r0, r0, lsl #16
    3e28:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    3e2c:	04380000 	ldrteq	r0, [r8], #-0
    3e30:	01190000 	tsteq	r9, r0
    3e34:	a8910352 	ldmge	r1, {r1, r4, r6, r8, r9}
    3e38:	5101197f 	tstpl	r1, pc, ror r9
    3e3c:	7fa89103 	svcvc	0x00a89103
    3e40:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    3e44:	18004891 	stmdane	r0, {r0, r4, r7, fp, lr}
    3e48:	00000000 	andeq	r0, r0, r0
    3e4c:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    3e50:	00000453 	andeq	r0, r0, r3, asr r4
    3e54:	02520119 	subseq	r0, r2, #1073741830	; 0x40000006
    3e58:	01194891 			; <UNDEFINED> instruction: 0x01194891
    3e5c:	e8910350 	ldm	r1, {r4, r6, r8, r9}
    3e60:	0018007d 	andseq	r0, r8, sp, ror r0
    3e64:	a2000000 	andge	r0, r0, #0
    3e68:	76000009 	strvc	r0, [r0], -r9
    3e6c:	19000004 	stmdbne	r0, {r2}
    3e70:	91035201 	tstls	r3, r1, lsl #4
    3e74:	01197f88 	tsteq	r9, r8, lsl #31
    3e78:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    3e7c:	5001197e 	andpl	r1, r1, lr, ror r9
    3e80:	7fa89103 	svcvc	0x00a89103
    3e84:	00001800 	andeq	r1, r0, r0, lsl #16
    3e88:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    3e8c:	04980000 	ldreq	r0, [r8], #0
    3e90:	01190000 	tsteq	r9, r0
    3e94:	a8910352 	ldmge	r1, {r1, r4, r6, r8, r9}
    3e98:	5101197f 	tstpl	r1, pc, ror r9
    3e9c:	7fa89103 	svcvc	0x00a89103
    3ea0:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    3ea4:	1a004891 	bne	160f0 <__Stack_Size+0x158f0>
    3ea8:	00000000 	andeq	r0, r0, r0
    3eac:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    3eb0:	02520119 	subseq	r0, r2, #1073741830	; 0x40000006
    3eb4:	01194891 			; <UNDEFINED> instruction: 0x01194891
    3eb8:	00760251 	rsbseq	r0, r6, r1, asr r2
    3ebc:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    3ec0:	007e8891 			; <UNDEFINED> instruction: 0x007e8891
    3ec4:	681b0000 	ldmdavs	fp, {}	; <UNPREDICTABLE>
    3ec8:	00000001 	andeq	r0, r0, r1
    3ecc:	64000000 	strvs	r0, [r0], #-0
    3ed0:	01000000 	mrseq	r0, (UNDEF: 0)
    3ed4:	00066969 	andeq	r6, r6, r9, ror #18
    3ed8:	01921300 	orrseq	r1, r2, r0, lsl #6
    3edc:	10860000 	addne	r0, r6, r0
    3ee0:	88130000 	ldmdahi	r3, {}	; <UNPREDICTABLE>
    3ee4:	f5000001 			; <UNDEFINED> instruction: 0xf5000001
    3ee8:	13000010 	movwne	r0, #16
    3eec:	0000017e 	andeq	r0, r0, lr, ror r1
    3ef0:	00001086 	andeq	r1, r0, r6, lsl #1
    3ef4:	00017413 	andeq	r7, r1, r3, lsl r4
    3ef8:	0010f500 	andseq	pc, r0, r0, lsl #10
    3efc:	00001c00 	andeq	r1, r0, r0, lsl #24
    3f00:	00640000 	rsbeq	r0, r4, r0
    3f04:	9c170000 	ldcls	0, cr0, [r7], {-0}
    3f08:	03000001 	movweq	r0, #1
    3f0c:	177ee891 			; <UNDEFINED> instruction: 0x177ee891
    3f10:	000001a7 	andeq	r0, r0, r7, lsr #3
    3f14:	7f889103 	svcvc	0x00889103
    3f18:	0001b217 	andeq	fp, r1, r7, lsl r2
    3f1c:	a8910300 	ldmge	r1, {r8, r9}
    3f20:	01bd177f 			; <UNDEFINED> instruction: 0x01bd177f
    3f24:	91020000 	mrsls	r0, (UNDEF: 2)
    3f28:	00001848 	andeq	r1, r0, r8, asr #16
    3f2c:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    3f30:	053b0000 	ldreq	r0, [fp, #-0]!
    3f34:	01190000 	tsteq	r9, r0
    3f38:	007d0252 	rsbseq	r0, sp, r2, asr r2
    3f3c:	02510119 	subseq	r0, r1, #1073741830	; 0x40000006
    3f40:	0119007d 	tsteq	r9, sp, ror r0
    3f44:	e8910350 	ldm	r1, {r4, r6, r8, r9}
    3f48:	0018007e 	andseq	r0, r8, lr, ror r0
    3f4c:	bd000000 	stclt	0, cr0, [r0, #-0]
    3f50:	5e000009 	cdppl	0, 0, cr0, cr0, cr9, {0}
    3f54:	19000005 	stmdbne	r0, {r0, r2}
    3f58:	91035201 	tstls	r3, r1, lsl #4
    3f5c:	01197dc8 	tsteq	r9, r8, asr #27
    3f60:	c8910351 	ldmgt	r1, {r0, r4, r6, r8, r9}
    3f64:	5001197d 	andpl	r1, r1, sp, ror r9
    3f68:	7f889103 	svcvc	0x00889103
    3f6c:	00001800 	andeq	r1, r0, r0, lsl #16
    3f70:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    3f74:	05800000 	streq	r0, [r0]
    3f78:	01190000 	tsteq	r9, r0
    3f7c:	c8910352 	ldmgt	r1, {r1, r4, r6, r8, r9}
    3f80:	5101197d 	tstpl	r1, sp, ror r9
    3f84:	19007d02 	stmdbne	r0, {r1, r8, sl, fp, ip, sp, lr}
    3f88:	91035001 	tstls	r3, r1
    3f8c:	18007fa8 	stmdane	r0, {r3, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    3f90:	00000000 	andeq	r0, r0, r0
    3f94:	000009a2 	andeq	r0, r0, r2, lsr #19
    3f98:	000005a2 	andeq	r0, r0, r2, lsr #11
    3f9c:	03520119 	cmpeq	r2, #1073741830	; 0x40000006
    3fa0:	197f8891 	ldmdbne	pc!, {r0, r4, r7, fp, pc}^	; <UNPREDICTABLE>
    3fa4:	91035101 	tstls	r3, r1, lsl #2
    3fa8:	01197ee8 	tsteq	r9, r8, ror #29
    3fac:	48910250 	ldmmi	r1, {r4, r6, r9}
    3fb0:	00001800 	andeq	r1, r0, r0, lsl #16
    3fb4:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    3fb8:	05c20000 	strbeq	r0, [r2]
    3fbc:	01190000 	tsteq	r9, r0
    3fc0:	48910252 	ldmmi	r1, {r1, r4, r6, r9}
    3fc4:	02510119 	subseq	r0, r1, #1073741830	; 0x40000006
    3fc8:	01194891 			; <UNDEFINED> instruction: 0x01194891
    3fcc:	007d0250 	rsbseq	r0, sp, r0, asr r2
    3fd0:	00001800 	andeq	r1, r0, r0, lsl #16
    3fd4:	09d80000 	ldmibeq	r8, {}^	; <UNPREDICTABLE>
    3fd8:	05e60000 	strbeq	r0, [r6, #0]!
    3fdc:	01190000 	tsteq	r9, r0
    3fe0:	060c0552 			; <UNDEFINED> instruction: 0x060c0552
    3fe4:	1900076d 	stmdbne	r0, {r0, r2, r3, r5, r6, r8, r9, sl}
    3fe8:	91035101 	tstls	r3, r1, lsl #2
    3fec:	01197fa8 	tsteq	r9, r8, lsr #31
    3ff0:	48910250 	ldmmi	r1, {r4, r6, r9}
    3ff4:	00001800 	andeq	r1, r0, r0, lsl #16
    3ff8:	09870000 	stmibeq	r7, {}	; <UNPREDICTABLE>
    3ffc:	06070000 	streq	r0, [r7], -r0
    4000:	01190000 	tsteq	r9, r0
    4004:	48910252 	ldmmi	r1, {r1, r4, r6, r9}
    4008:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    400c:	197ee891 	ldmdbne	lr!, {r0, r4, r7, fp, sp, lr, pc}^
    4010:	91025001 	tstls	r2, r1
    4014:	00180048 	andseq	r0, r8, r8, asr #32
    4018:	87000000 	strhi	r0, [r0, -r0]
    401c:	28000009 	stmdacs	r0, {r0, r3}
    4020:	19000006 	stmdbne	r0, {r1, r2}
    4024:	91025201 	tstls	r2, r1, lsl #4
    4028:	51011948 	tstpl	r1, r8, asr #18
    402c:	7f889103 	svcvc	0x00889103
    4030:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    4034:	18004891 	stmdane	r0, {r0, r4, r7, fp, lr}
    4038:	00000000 	andeq	r0, r0, r0
    403c:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    4040:	0000064a 	andeq	r0, r0, sl, asr #12
    4044:	02520119 	subseq	r0, r2, #1073741830	; 0x40000006
    4048:	01194891 			; <UNDEFINED> instruction: 0x01194891
    404c:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    4050:	5001197f 	andpl	r1, r1, pc, ror r9
    4054:	7ee89103 	urdvce	f1, f3
    4058:	00001a00 	andeq	r1, r0, r0, lsl #20
    405c:	09d80000 	ldmibeq	r8, {}^	; <UNPREDICTABLE>
    4060:	01190000 	tsteq	r9, r0
    4064:	19340152 	ldmdbne	r4!, {r1, r4, r6, r8}
    4068:	91035101 	tstls	r3, r1, lsl #2
    406c:	01197ee8 	tsteq	r9, r8, ror #29
    4070:	c8910350 	ldmgt	r1, {r4, r6, r8, r9}
    4074:	0000007d 	andeq	r0, r0, sp, ror r0
    4078:	0000d512 	andeq	sp, r0, r2, lsl r5
    407c:	00000000 	andeq	r0, r0, r0
    4080:	0004f000 	andeq	pc, r4, r0
    4084:	706c0100 	rsbvc	r0, ip, r0, lsl #2
    4088:	15000008 	strne	r0, [r0, #-8]
    408c:	00000127 	andeq	r0, r0, r7, lsr #2
    4090:	00011d13 	andeq	r1, r1, r3, lsl sp
    4094:	00112400 	andseq	r2, r1, r0, lsl #8
    4098:	01131300 	tsteq	r3, r0, lsl #6
    409c:	10860000 	addne	r0, r6, r0
    40a0:	09130000 	ldmdbeq	r3, {}	; <UNPREDICTABLE>
    40a4:	f5000001 			; <UNDEFINED> instruction: 0xf5000001
    40a8:	13000010 	movwne	r0, #16
    40ac:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    40b0:	00000fc1 	andeq	r0, r0, r1, asr #31
    40b4:	0000f513 	andeq	pc, r0, r3, lsl r5	; <UNPREDICTABLE>
    40b8:	00103000 	andseq	r3, r0, r0
    40bc:	00eb1300 	rsceq	r1, fp, r0, lsl #6
    40c0:	11450000 	mrsne	r0, (UNDEF: 69)
    40c4:	e1130000 	tst	r3, r0
    40c8:	9b000000 	blls	40d0 <__Stack_Size+0x38d0>
    40cc:	16000011 			; <UNDEFINED> instruction: 0x16000011
    40d0:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    40d4:	00013117 	andeq	r3, r1, r7, lsl r1
    40d8:	e8910300 	ldm	r1, {r8, r9}
    40dc:	013b177e 	teqeq	fp, lr, ror r7
    40e0:	91030000 	mrsls	r0, (UNDEF: 3)
    40e4:	45177f88 	ldrmi	r7, [r7, #-3976]	; 0xf88
    40e8:	03000001 	movweq	r0, #1
    40ec:	177fa891 			; <UNDEFINED> instruction: 0x177fa891
    40f0:	0000014e 	andeq	r0, r0, lr, asr #2
    40f4:	18489102 	stmdane	r8, {r1, r8, ip, pc}^
    40f8:	00000000 	andeq	r0, r0, r0
    40fc:	00000987 	andeq	r0, r0, r7, lsl #19
    4100:	0000070a 	andeq	r0, r0, sl, lsl #14
    4104:	03520119 	cmpeq	r2, #1073741830	; 0x40000006
    4108:	197dc891 	ldmdbne	sp!, {r0, r4, r7, fp, lr, pc}^
    410c:	7d025101 	stfvcs	f5, [r2, #-4]
    4110:	50011900 	andpl	r1, r1, r0, lsl #18
    4114:	7fa89103 	svcvc	0x00a89103
    4118:	00001800 	andeq	r1, r0, r0, lsl #16
    411c:	09a20000 	stmibeq	r2!, {}	; <UNPREDICTABLE>
    4120:	07240000 	streq	r0, [r4, -r0]!
    4124:	01190000 	tsteq	r9, r0
    4128:	00760251 	rsbseq	r0, r6, r1, asr r2
    412c:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    4130:	18004891 	stmdane	r0, {r0, r4, r7, fp, lr}
    4134:	00000000 	andeq	r0, r0, r0
    4138:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    413c:	00000746 	andeq	r0, r0, r6, asr #14
    4140:	02520119 	subseq	r0, r2, #1073741830	; 0x40000006
    4144:	01194891 			; <UNDEFINED> instruction: 0x01194891
    4148:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    414c:	5001197f 	andpl	r1, r1, pc, ror r9
    4150:	7ee89103 	urdvce	f1, f3
    4154:	00001800 	andeq	r1, r0, r0, lsl #16
    4158:	09a20000 	stmibeq	r2!, {}	; <UNPREDICTABLE>
    415c:	07670000 	strbeq	r0, [r7, -r0]!
    4160:	01190000 	tsteq	r9, r0
    4164:	c8910352 	ldmgt	r1, {r1, r4, r6, r8, r9}
    4168:	5101197d 	tstpl	r1, sp, ror r9
    416c:	19007d02 	stmdbne	r0, {r1, r8, sl, fp, ip, sp, lr}
    4170:	91025001 	tstls	r2, r1
    4174:	00180048 	andseq	r0, r8, r8, asr #32
    4178:	87000000 	strhi	r0, [r0, -r0]
    417c:	82000009 	andhi	r0, r0, #9
    4180:	19000007 	stmdbne	r0, {r0, r1, r2}
    4184:	76025101 	strvc	r5, [r2], -r1, lsl #2
    4188:	50011900 	andpl	r1, r1, r0, lsl #18
    418c:	7fa89103 	svcvc	0x00a89103
    4190:	00001800 	andeq	r1, r0, r0, lsl #16
    4194:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    4198:	07a40000 	streq	r0, [r4, r0]!
    419c:	01190000 	tsteq	r9, r0
    41a0:	48910252 	ldmmi	r1, {r1, r4, r6, r9}
    41a4:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    41a8:	197fa891 	ldmdbne	pc!, {r0, r4, r7, fp, sp, pc}^	; <UNPREDICTABLE>
    41ac:	91035001 	tstls	r3, r1
    41b0:	18007f88 	stmdane	r0, {r3, r7, r8, r9, sl, fp, ip, sp, lr}
    41b4:	00000000 	andeq	r0, r0, r0
    41b8:	00000987 	andeq	r0, r0, r7, lsl #19
    41bc:	000007c7 	andeq	r0, r0, r7, asr #15
    41c0:	03520119 	cmpeq	r2, #1073741830	; 0x40000006
    41c4:	197f8891 	ldmdbne	pc!, {r0, r4, r7, fp, pc}^	; <UNPREDICTABLE>
    41c8:	91035101 	tstls	r3, r1, lsl #2
    41cc:	01197ee8 	tsteq	r9, r8, ror #29
    41d0:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    41d4:	0018007f 	andseq	r0, r8, pc, ror r0
    41d8:	bd000000 	stclt	0, cr0, [r0, #-0]
    41dc:	e9000009 	stmdb	r0, {r0, r3}
    41e0:	19000007 	stmdbne	r0, {r0, r1, r2}
    41e4:	91035201 	tstls	r3, r1, lsl #4
    41e8:	01197fa8 	tsteq	r9, r8, lsr #31
    41ec:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    41f0:	5001197f 	andpl	r1, r1, pc, ror r9
    41f4:	00489102 	subeq	r9, r8, r2, lsl #2
    41f8:	00000018 	andeq	r0, r0, r8, lsl r0
    41fc:	0009bd00 	andeq	fp, r9, r0, lsl #26
    4200:	00080b00 	andeq	r0, r8, r0, lsl #22
    4204:	52011900 	andpl	r1, r1, #0, 18
    4208:	19489102 	stmdbne	r8, {r1, r8, ip, pc}^
    420c:	91035101 	tstls	r3, r1, lsl #2
    4210:	01197e88 	tsteq	r9, r8, lsl #29
    4214:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    4218:	0018007e 	andseq	r0, r8, lr, ror r0
    421c:	a2000000 	andge	r0, r0, #0
    4220:	2e000009 	cdpcs	0, 0, cr0, cr0, cr9, {0}
    4224:	19000008 	stmdbne	r0, {r3}
    4228:	91035201 	tstls	r3, r1, lsl #4
    422c:	01197f88 	tsteq	r9, r8, lsl #31
    4230:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    4234:	5001197e 	andpl	r1, r1, lr, ror r9
    4238:	7fa89103 	svcvc	0x00a89103
    423c:	00001800 	andeq	r1, r0, r0, lsl #16
    4240:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    4244:	08500000 	ldmdaeq	r0, {}^	; <UNPREDICTABLE>
    4248:	01190000 	tsteq	r9, r0
    424c:	a8910352 	ldmge	r1, {r1, r4, r6, r8, r9}
    4250:	5101197f 	tstpl	r1, pc, ror r9
    4254:	7fa89103 	svcvc	0x00a89103
    4258:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    425c:	1a004891 	bne	164a8 <__Stack_Size+0x15ca8>
    4260:	00000000 	andeq	r0, r0, r0
    4264:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    4268:	02520119 	subseq	r0, r2, #1073741830	; 0x40000006
    426c:	01194891 			; <UNDEFINED> instruction: 0x01194891
    4270:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    4274:	5001197d 	andpl	r1, r1, sp, ror r9
    4278:	7ec89103 	acsvce	f1, f3
    427c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4280:	00000000 	andeq	r0, r0, r0
    4284:	000009f3 	strdeq	r0, [r0], -r3
    4288:	00000898 	muleq	r0, r8, r8
    428c:	02530119 	subseq	r0, r3, #1073741830	; 0x40000006
    4290:	01190075 	tsteq	r9, r5, ror r0
    4294:	007d0252 	rsbseq	r0, sp, r2, asr r2
    4298:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    429c:	197de891 	ldmdbne	sp!, {r0, r4, r7, fp, sp, lr, pc}^
    42a0:	91035001 	tstls	r3, r1
    42a4:	18007de8 	stmdane	r0, {r3, r5, r6, r7, r8, sl, fp, ip, sp, lr}
    42a8:	00000000 	andeq	r0, r0, r0
    42ac:	000009f3 	strdeq	r0, [r0], -r3
    42b0:	000008c1 	andeq	r0, r0, r1, asr #17
    42b4:	02530119 	subseq	r0, r3, #1073741830	; 0x40000006
    42b8:	01190075 	tsteq	r9, r5, ror r0
    42bc:	c8910352 	ldmgt	r1, {r1, r4, r6, r8, r9}
    42c0:	5101197d 	tstpl	r1, sp, ror r9
    42c4:	7e889103 	sinvce	f1, f3
    42c8:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    42cc:	007e8891 			; <UNDEFINED> instruction: 0x007e8891
    42d0:	00000018 	andeq	r0, r0, r8, lsl r0
    42d4:	0009f300 	andeq	pc, r9, r0, lsl #6
    42d8:	0008e800 	andeq	lr, r8, r0, lsl #16
    42dc:	53011900 	movwpl	r1, #6400	; 0x1900
    42e0:	19007502 	stmdbne	r0, {r1, r8, sl, ip, sp, lr}
    42e4:	91035201 	tstls	r3, r1, lsl #4
    42e8:	01197ea8 	tsteq	r9, r8, lsr #29
    42ec:	007d0251 	rsbseq	r0, sp, r1, asr r2
    42f0:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    42f4:	1a00007d 	bne	44f0 <__Stack_Size+0x3cf0>
    42f8:	00000000 	andeq	r0, r0, r0
    42fc:	000009f3 	strdeq	r0, [r0], -r3
    4300:	02530119 	subseq	r0, r3, #1073741830	; 0x40000006
    4304:	01190075 	tsteq	r9, r5, ror r0
    4308:	c8910352 	ldmgt	r1, {r1, r4, r6, r8, r9}
    430c:	5101197e 	tstpl	r1, lr, ror r9
    4310:	7dc89103 	stfvcp	f1, [r8, #12]
    4314:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    4318:	007dc891 			; <UNDEFINED> instruction: 0x007dc891
    431c:	00001800 	andeq	r1, r0, r0, lsl #16
    4320:	0a130000 	beq	4c4328 <__Stack_Size+0x4c3b28>
    4324:	092a0000 	stmdbeq	sl!, {}	; <UNPREDICTABLE>
    4328:	01190000 	tsteq	r9, r0
    432c:	c8910351 	ldmgt	r1, {r0, r4, r6, r8, r9}
    4330:	5001197d 	andpl	r1, r1, sp, ror r9
    4334:	7e889103 	sinvce	f1, f3
    4338:	00001800 	andeq	r1, r0, r0, lsl #16
    433c:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    4340:	094b0000 	stmdbeq	fp, {}^	; <UNPREDICTABLE>
    4344:	01190000 	tsteq	r9, r0
    4348:	007d0252 	rsbseq	r0, sp, r2, asr r2
    434c:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    4350:	197e8891 	ldmdbne	lr!, {r0, r4, r7, fp, pc}^
    4354:	78025001 	stmdavc	r2, {r0, ip, lr}
    4358:	001a0000 	andseq	r0, sl, r0
    435c:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    4360:	1900000a 	stmdbne	r0, {r1, r3}
    4364:	78025001 	stmdavc	r2, {r0, ip, lr}
    4368:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    436c:	00000073 	andeq	r0, r0, r3, ror r0
    4370:	0014411d 	andseq	r4, r4, sp, lsl r1
    4374:	6c1c0200 	lfmvs	f0, 4, [ip], {-0}
    4378:	08000009 	stmdaeq	r0, {r0, r3}
    437c:	00000158 	andeq	r0, r0, r8, asr r1
    4380:	0014161e 	andseq	r1, r4, lr, lsl r6
    4384:	82090100 	andhi	r0, r9, #0, 2
    4388:	05000009 	streq	r0, [r0, #-9]
    438c:	00000003 	andeq	r0, r0, r3
    4390:	01580800 	cmpeq	r8, r0, lsl #16
    4394:	241f0000 	ldrcs	r0, [pc], #-0	; 439c <__Stack_Size+0x3b9c>
    4398:	02000014 	andeq	r0, r0, #20
    439c:	0009a23a 	andeq	sl, r9, sl, lsr r2
    43a0:	00c42000 	sbceq	r2, r4, r0
    43a4:	ca200000 	bgt	8043ac <__Stack_Size+0x803bac>
    43a8:	20000000 	andcs	r0, r0, r0
    43ac:	000000ca 	andeq	r0, r0, sl, asr #1
    43b0:	145e1f00 	ldrbne	r1, [lr], #-3840	; 0xf00
    43b4:	3b020000 	blcc	843bc <__Stack_Size+0x83bbc>
    43b8:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    43bc:	0000c420 	andeq	ip, r0, r0, lsr #8
    43c0:	00ca2000 	sbceq	r2, sl, r0
    43c4:	ca200000 	bgt	8043cc <__Stack_Size+0x803bcc>
    43c8:	00000000 	andeq	r0, r0, r0
    43cc:	00147f1f 	andseq	r7, r4, pc, lsl pc
    43d0:	d8440200 	stmdale	r4, {r9}^
    43d4:	20000009 	andcs	r0, r0, r9
    43d8:	000000c4 	andeq	r0, r0, r4, asr #1
    43dc:	0000ca20 	andeq	ip, r0, r0, lsr #20
    43e0:	00ca2000 	sbceq	r2, sl, r0
    43e4:	1f000000 	svcne	0x00000000
    43e8:	0000142f 	andeq	r1, r0, pc, lsr #8
    43ec:	09f34b02 	ldmibeq	r3!, {r1, r8, r9, fp, lr}^
    43f0:	c4200000 	strtgt	r0, [r0], #-0
    43f4:	20000000 	andcs	r0, r0, r0
    43f8:	000000ca 	andeq	r0, r0, sl, asr #1
    43fc:	00008c20 	andeq	r8, r0, r0, lsr #24
    4400:	a91f0000 	ldmdbge	pc, {}	; <UNPREDICTABLE>
    4404:	02000014 	andeq	r0, r0, #20
    4408:	000a1333 	andeq	r1, sl, r3, lsr r3
    440c:	00c42000 	sbceq	r2, r4, r0
    4410:	ca200000 	bgt	804418 <__Stack_Size+0x803c18>
    4414:	20000000 	andcs	r0, r0, r0
    4418:	000000ca 	andeq	r0, r0, sl, asr #1
    441c:	00008120 	andeq	r8, r0, r0, lsr #2
    4420:	941f0000 	ldrls	r0, [pc], #-0	; 4428 <__Stack_Size+0x3c28>
    4424:	02000014 	andeq	r0, r0, #20
    4428:	000a2951 	andeq	r2, sl, r1, asr r9
    442c:	00c42000 	sbceq	r2, r4, r0
    4430:	ca200000 	bgt	804438 <__Stack_Size+0x803c38>
    4434:	00000000 	andeq	r0, r0, r0
    4438:	00146e21 	andseq	r6, r4, r1, lsr #28
    443c:	20280200 	eorcs	r0, r8, r0, lsl #4
    4440:	000000c4 	andeq	r0, r0, r4, asr #1
    4444:	0eb20000 	cdpeq	0, 11, cr0, cr2, cr0, {0}
    4448:	00040000 	andeq	r0, r4, r0
    444c:	00001170 	andeq	r1, r0, r0, ror r1
    4450:	06c00104 	strbeq	r0, [r0], r4, lsl #2
    4454:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    4458:	93000015 	movwls	r0, #21
    445c:	80000008 	andhi	r0, r0, r8
    4460:	00000005 	andeq	r0, r0, r5
    4464:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    4468:	02000013 	andeq	r0, r0, #19
    446c:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    4470:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    4474:	0400000f 	streq	r0, [r0], #-15
    4478:	0000371c 	andeq	r3, r0, ip, lsl r7
    447c:	08010200 	stmdaeq	r1, {r9}
    4480:	00000818 	andeq	r0, r0, r8, lsl r8
    4484:	5e050202 	cdppl	2, 0, cr0, cr5, cr2, {0}
    4488:	02000006 	andeq	r0, r0, #6
    448c:	09490702 	stmdbeq	r9, {r1, r8, r9, sl}^
    4490:	04020000 	streq	r0, [r2], #-0
    4494:	0004da05 	andeq	sp, r4, r5, lsl #20
    4498:	10780300 	rsbsne	r0, r8, r0, lsl #6
    449c:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    44a0:	0000005e 	andeq	r0, r0, lr, asr r0
    44a4:	52070402 	andpl	r0, r7, #33554432	; 0x2000000
    44a8:	02000002 	andeq	r0, r0, #2
    44ac:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
    44b0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    44b4:	00024d07 	andeq	r4, r2, r7, lsl #26
    44b8:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    44bc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    44c0:	57070402 	strpl	r0, [r7, -r2, lsl #8]
    44c4:	03000002 	movweq	r0, #2
    44c8:	00000fcb 	andeq	r0, r0, fp, asr #31
    44cc:	002c2a05 	eoreq	r2, ip, r5, lsl #20
    44d0:	7a030000 	bvc	c44d8 <__Stack_Size+0xc3cd8>
    44d4:	05000010 	streq	r0, [r0, #-16]
    44d8:	00005342 	andeq	r5, r0, r2, asr #6
    44dc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    44e0:	0000078b 	andeq	r0, r0, fp, lsl #15
    44e4:	01020405 	tsteq	r2, r5, lsl #8
    44e8:	00082108 	andeq	r2, r8, r8, lsl #2
    44ec:	159a0600 	ldrne	r0, [sl, #1536]	; 0x600
    44f0:	03800000 	orreq	r0, r0, #0
    44f4:	0000dc20 	andeq	sp, r0, r0, lsr #24
    44f8:	00780700 	rsbseq	r0, r8, r0, lsl #14
    44fc:	00dc2103 	sbcseq	r2, ip, r3, lsl #2
    4500:	07000000 	streq	r0, [r0, -r0]
    4504:	22030079 	andcs	r0, r3, #121	; 0x79
    4508:	000000dc 	ldrdeq	r0, [r0], -ip
    450c:	00740720 	rsbseq	r0, r4, r0, lsr #14
    4510:	00dc2303 	sbcseq	r2, ip, r3, lsl #6
    4514:	07400000 	strbeq	r0, [r0, -r0]
    4518:	2403007a 	strcs	r0, [r3], #-122	; 0x7a
    451c:	000000dc 	ldrdeq	r0, [r0], -ip
    4520:	81080060 	tsthi	r8, r0, rrx
    4524:	ec000000 	stc	0, cr0, [r0], {-0}
    4528:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    452c:	00000097 	muleq	r0, r7, r0
    4530:	0a0a001f 	beq	2845b4 <__Stack_Size+0x283db4>
    4534:	02000014 	andeq	r0, r0, #20
    4538:	010b0322 	tsteq	fp, r2, lsr #6
    453c:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
    4540:	0b220200 	bleq	884d48 <__Stack_Size+0x884548>
    4544:	0b000001 	bleq	4550 <__Stack_Size+0x3d50>
    4548:	22020061 	andcs	r0, r2, #97	; 0x61
    454c:	00000111 	andeq	r0, r0, r1, lsl r1
    4550:	81040c00 	tsthi	r4, r0, lsl #24
    4554:	0c000000 	stceq	0, cr0, [r0], {-0}
    4558:	00011704 	andeq	r1, r1, r4, lsl #14
    455c:	00810d00 	addeq	r0, r1, r0, lsl #26
    4560:	b20a0000 	andlt	r0, sl, #0
    4564:	03000015 	movweq	r0, #21
    4568:	013f0346 	teqeq	pc, r6, asr #6
    456c:	640b0000 	strvs	r0, [fp], #-0
    4570:	03007473 	movweq	r7, #1139	; 0x473
    4574:	00013f46 	andeq	r3, r1, r6, asr #30
    4578:	72730b00 	rsbsvc	r0, r3, #0, 22
    457c:	47030063 	strmi	r0, [r3, -r3, rrx]
    4580:	00000145 	andeq	r0, r0, r5, asr #2
    4584:	a7040c00 	strge	r0, [r4, -r0, lsl #24]
    4588:	0c000000 	stceq	0, cr0, [r0], {-0}
    458c:	00014b04 	andeq	r4, r1, r4, lsl #22
    4590:	00a70d00 	adceq	r0, r7, r0, lsl #26
    4594:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
    4598:	01000015 	tsteq	r0, r5, lsl r0
    459c:	001d4c32 	andseq	r4, sp, r2, lsr ip
    45a0:	00007008 	andeq	r7, r0, r8
    45a4:	109c0100 	addsne	r0, ip, r0, lsl #2
    45a8:	0f000002 	svceq	0x00000002
    45ac:	32010070 	andcc	r0, r1, #112	; 0x70
    45b0:	0000013f 	andeq	r0, r0, pc, lsr r1
    45b4:	000011d8 	ldrdeq	r1, [r0], -r8
    45b8:	0100780f 	tsteq	r0, pc, lsl #16
    45bc:	00011133 	andeq	r1, r1, r3, lsr r1
    45c0:	00121100 	andseq	r1, r2, r0, lsl #2
    45c4:	00790f00 	rsbseq	r0, r9, r0, lsl #30
    45c8:	01113301 	tsteq	r1, r1, lsl #6
    45cc:	12480000 	subne	r0, r8, #0
    45d0:	ec100000 	ldc	0, cr0, [r0], {-0}
    45d4:	50000000 	andpl	r0, r0, r0
    45d8:	2808001d 	stmdacs	r8, {r0, r2, r3, r4}
    45dc:	01000000 	mrseq	r0, (UNDEF: 0)
    45e0:	0001b235 	andeq	fp, r1, r5, lsr r2
    45e4:	01011100 	mrseq	r1, (UNDEF: 17)
    45e8:	127f0000 	rsbsne	r0, pc, #0
    45ec:	f8110000 			; <UNDEFINED> instruction: 0xf8110000
    45f0:	ab000000 	blge	45f8 <__Stack_Size+0x3df8>
    45f4:	00000012 	andeq	r0, r0, r2, lsl r0
    45f8:	0000ec12 	andeq	lr, r0, r2, lsl ip
    45fc:	001d7800 	andseq	r7, sp, r0, lsl #16
    4600:	00051808 	andeq	r1, r5, r8, lsl #16
    4604:	d4360100 	ldrtle	r0, [r6], #-256	; 0x100
    4608:	13000001 	movwne	r0, #1
    460c:	00000101 	andeq	r0, r0, r1, lsl #2
    4610:	0000f811 	andeq	pc, r0, r1, lsl r8	; <UNPREDICTABLE>
    4614:	0012e400 	andseq	lr, r2, r0, lsl #8
    4618:	ac140000 	ldcge	0, cr0, [r4], {-0}
    461c:	9d08001d 	stcls	0, cr0, [r8, #-116]	; 0xffffff8c
    4620:	ee00000d 	cdp	0, 0, cr0, cr0, cr13, {0}
    4624:	15000001 	strne	r0, [r0, #-1]
    4628:	31015101 	tstcc	r1, r1, lsl #2
    462c:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4630:	0000e074 	andeq	lr, r0, r4, ror r0
    4634:	001dbc16 	andseq	fp, sp, r6, lsl ip
    4638:	000db308 	andeq	fp, sp, r8, lsl #6
    463c:	52011500 	andpl	r1, r1, #0, 10
    4640:	5201f303 	andpl	pc, r1, #201326592	; 0xc000000
    4644:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4648:	155101f3 	ldrbne	r0, [r1, #-499]	; 0x1f3
    464c:	f3055001 	vhadd.u8	d5, d5, d1
    4650:	40235001 	eormi	r5, r3, r1
    4654:	520e0000 	andpl	r0, lr, #0
    4658:	01000015 	tsteq	r0, r5, lsl r0
    465c:	001dbc3b 	andseq	fp, sp, fp, lsr ip
    4660:	00003a08 	andeq	r3, r0, r8, lsl #20
    4664:	d99c0100 	ldmible	ip, {r8}
    4668:	0f000002 	svceq	0x00000002
    466c:	3b010078 	blcc	44854 <__Stack_Size+0x44054>
    4670:	0000010b 	andeq	r0, r0, fp, lsl #2
    4674:	00001323 	andeq	r1, r0, r3, lsr #6
    4678:	0100790f 	tsteq	r0, pc, lsl #18
    467c:	00010b3b 	andeq	r0, r1, fp, lsr fp
    4680:	00134100 	andseq	r4, r3, r0, lsl #2
    4684:	00700f00 	rsbseq	r0, r0, r0, lsl #30
    4688:	01453c01 	cmpeq	r5, r1, lsl #24
    468c:	135f0000 	cmpne	pc, #0
    4690:	7a170000 	bvc	5c4698 <__Stack_Size+0x5c3e98>
    4694:	3e010031 	mcrcc	0, 0, r0, cr1, cr1, {1}
    4698:	000000dc 	ldrdeq	r0, [r0], -ip
    469c:	14509102 	ldrbne	r9, [r0], #-258	; 0x102
    46a0:	08001dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip}
    46a4:	00000dce 	andeq	r0, r0, lr, asr #27
    46a8:	00000274 	andeq	r0, r0, r4, ror r2
    46ac:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    46b0:	1500e074 	strne	lr, [r0, #-116]	; 0x74
    46b4:	7d025001 	stcvc	0, cr5, [r2, #-4]
    46b8:	da140000 	ble	5046c0 <__Stack_Size+0x503ec0>
    46bc:	b308001d 	movwlt	r0, #32797	; 0x801d
    46c0:	9400000d 	strls	r0, [r0], #-13
    46c4:	15000002 	strne	r0, [r0, #-2]
    46c8:	7d025201 	sfmvc	f5, 4, [r2, #-4]
    46cc:	51011500 	tstpl	r1, r0, lsl #10
    46d0:	15007402 	strne	r7, [r0, #-1026]	; 0x402
    46d4:	76025001 	strvc	r5, [r2], -r1
    46d8:	e6140000 	ldr	r0, [r4], -r0
    46dc:	b308001d 	movwlt	r0, #32797	; 0x801d
    46e0:	b400000d 	strlt	r0, [r0], #-13
    46e4:	15000002 	strne	r0, [r0, #-2]
    46e8:	7d025201 	sfmvc	f5, 4, [r2, #-4]
    46ec:	51011500 	tstpl	r1, r0, lsl #10
    46f0:	15207402 	strne	r7, [r0, #-1026]!	; 0x402
    46f4:	75025001 	strvc	r5, [r2, #-1]
    46f8:	ec140000 	ldc	0, cr0, [r4], {-0}
    46fc:	e408001d 	str	r0, [r8], #-29
    4700:	c800000d 	stmdagt	r0, {r0, r2, r3}
    4704:	15000002 	strne	r0, [r0, #-2]
    4708:	76025001 	strvc	r5, [r2], -r1
    470c:	f2180000 	vhadd.s16	d0, d8, d0
    4710:	e408001d 	str	r0, [r8], #-29
    4714:	1500000d 	strne	r0, [r0, #-13]
    4718:	75025001 	strvc	r5, [r2, #-1]
    471c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4720:	000014e5 	andeq	r1, r0, r5, ror #9
    4724:	1df85e01 	ldclne	14, cr5, [r8, #4]!
    4728:	005e0800 	subseq	r0, lr, r0, lsl #16
    472c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4730:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
    4734:	0100630f 	tsteq	r0, pc, lsl #6
    4738:	00010b5e 	andeq	r0, r1, lr, asr fp
    473c:	00137d00 	andseq	r7, r3, r0, lsl #26
    4740:	00780f00 	rsbseq	r0, r8, r0, lsl #30
    4744:	01115e01 	tsteq	r1, r1, lsl #28
    4748:	139b0000 	orrsne	r0, fp, #0
    474c:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    4750:	115e0100 	cmpne	lr, r0, lsl #2
    4754:	b9000001 	stmdblt	r0, {r0}
    4758:	17000013 	smladne	r0, r3, r0, r0
    475c:	00706d74 	rsbseq	r6, r0, r4, ror sp
    4760:	00dc6001 	sbcseq	r6, ip, r1
    4764:	91020000 	mrsls	r0, (UNDEF: 2)
    4768:	14f21948 	ldrbtne	r1, [r2], #2376	; 0x948
    476c:	61010000 	mrsvs	r0, (UNDEF: 1)
    4770:	00000081 	andeq	r0, r0, r1, lsl #1
    4774:	000013d7 	ldrdeq	r1, [r0], -r7
    4778:	0000ec10 	andeq	lr, r0, r0, lsl ip
    477c:	001e0200 	andseq	r0, lr, r0, lsl #4
    4780:	00001608 	andeq	r1, r0, r8, lsl #12
    4784:	58630100 	stmdapl	r3!, {r8}^
    4788:	11000003 	tstne	r0, r3
    478c:	00000101 	andeq	r0, r0, r1, lsl #2
    4790:	000013ea 	andeq	r1, r0, sl, ror #7
    4794:	0000f811 	andeq	pc, r0, r1, lsl r8	; <UNPREDICTABLE>
    4798:	00140800 	andseq	r0, r4, r0, lsl #16
    479c:	ec100000 	ldc	0, cr0, [r0], {-0}
    47a0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    47a4:	2008001e 	andcs	r0, r8, lr, lsl r0
    47a8:	01000000 	mrseq	r0, (UNDEF: 0)
    47ac:	00037a67 	andeq	r7, r3, r7, ror #20
    47b0:	01011a00 	tsteq	r1, r0, lsl #20
    47b4:	56010000 	strpl	r0, [r1], -r0
    47b8:	0000f81a 	andeq	pc, r0, sl, lsl r8	; <UNPREDICTABLE>
    47bc:	00550100 	subseq	r0, r5, r0, lsl #2
    47c0:	001e1e14 	andseq	r1, lr, r4, lsl lr
    47c4:	000de408 	andeq	lr, sp, r8, lsl #8
    47c8:	00038e00 	andeq	r8, r3, r0, lsl #28
    47cc:	50011500 	andpl	r1, r1, r0, lsl #10
    47d0:	00007d02 	andeq	r7, r0, r2, lsl #26
    47d4:	001e4818 	andseq	r4, lr, r8, lsl r8
    47d8:	000de408 	andeq	lr, sp, r8, lsl #8
    47dc:	50011500 	andpl	r1, r1, r0, lsl #10
    47e0:	00007502 	andeq	r7, r0, r2, lsl #10
    47e4:	15051b00 	strne	r1, [r5, #-2816]	; 0xb00
    47e8:	6c010000 	stcvs	0, cr0, [r1], {-0}
    47ec:	00000081 	andeq	r0, r0, r1, lsl #1
    47f0:	08001e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip}
    47f4:	000000c8 	andeq	r0, r0, r8, asr #1
    47f8:	05b49c01 	ldreq	r9, [r4, #3073]!	; 0xc01
    47fc:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
    4800:	0b6c0100 	bleq	1b04c08 <__Stack_Size+0x1b04408>
    4804:	28000001 	stmdacs	r0, {r0}
    4808:	0f000014 	svceq	0x00000014
    480c:	6c010079 	stcvs	0, cr0, [r1], {121}	; 0x79
    4810:	0000010b 	andeq	r0, r0, fp, lsl #2
    4814:	00001454 	andeq	r1, r0, r4, asr r4
    4818:	0014c91c 	andseq	ip, r4, ip, lsl r9
    481c:	116c0100 	cmnne	ip, r0, lsl #2
    4820:	75000001 	strvc	r0, [r0, #-1]
    4824:	19000014 	stmdbne	r0, {r2, r4}
    4828:	000014f2 	strdeq	r1, [r0], -r2
    482c:	05b46e01 	ldreq	r6, [r4, #3585]!	; 0xe01
    4830:	14960000 	ldrne	r0, [r6], #0
    4834:	61170000 	tstvs	r7, r0
    4838:	dc6f0100 	stflee	f0, [pc], #-0	; 4840 <__Stack_Size+0x4040>
    483c:	03000000 	movweq	r0, #0
    4840:	177f8891 			; <UNDEFINED> instruction: 0x177f8891
    4844:	70010062 	andvc	r0, r1, r2, rrx
    4848:	000000dc 	ldrdeq	r0, [r0], -ip
    484c:	7fa89103 	svcvc	0x00a89103
    4850:	01006317 	tsteq	r0, r7, lsl r3
    4854:	0000dc71 	andeq	sp, r0, r1, ror ip
    4858:	48910200 	ldmmi	r1, {r9}
    485c:	0000ec12 	andeq	lr, r0, r2, lsl ip
    4860:	001e5c00 	andseq	r5, lr, r0, lsl #24
    4864:	00054008 	andeq	r4, r5, r8
    4868:	3c740100 	ldfcce	f0, [r4], #-0
    486c:	11000004 	tstne	r0, r4
    4870:	00000101 	andeq	r0, r0, r1, lsl #2
    4874:	000014b0 			; <UNDEFINED> instruction: 0x000014b0
    4878:	0000f811 	andeq	pc, r0, r1, lsl r8	; <UNPREDICTABLE>
    487c:	0014d100 	andseq	sp, r4, r0, lsl #2
    4880:	9e140000 	cdpls	0, 1, cr0, cr4, cr0, {0}
    4884:	b308001e 	movwlt	r0, #32798	; 0x801e
    4888:	5e00000d 	cdppl	0, 0, cr0, cr0, cr13, {0}
    488c:	15000004 	strne	r0, [r0, #-4]
    4890:	f3035201 	vhsub.u8	d5, d3, d1
    4894:	01155101 	tsteq	r5, r1, lsl #2
    4898:	01f30351 	mvnseq	r0, r1, asr r3
    489c:	50011551 	andpl	r1, r1, r1, asr r5
    48a0:	00489102 	subeq	r9, r8, r2, lsl #2
    48a4:	001ea814 	andseq	sl, lr, r4, lsl r8
    48a8:	000db308 	andeq	fp, sp, r8, lsl #6
    48ac:	00048200 	andeq	r8, r4, r0, lsl #4
    48b0:	52011500 	andpl	r1, r1, #0, 10
    48b4:	74900305 	ldrvc	r0, [r0], #773	; 0x305
    48b8:	01150800 	tsteq	r5, r0, lsl #16
    48bc:	48910251 	ldmmi	r1, {r0, r4, r6, r9}
    48c0:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    48c4:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    48c8:	001eb214 	andseq	fp, lr, r4, lsl r2
    48cc:	000df508 	andeq	pc, sp, r8, lsl #10
    48d0:	0004a300 	andeq	sl, r4, r0, lsl #6
    48d4:	52011500 	andpl	r1, r1, #0, 10
    48d8:	15007502 	strne	r7, [r0, #-1282]	; 0x502
    48dc:	91035101 	tstls	r3, r1, lsl #2
    48e0:	01157fa8 	tsteq	r5, r8, lsr #31
    48e4:	007d0250 	rsbseq	r0, sp, r0, asr r2
    48e8:	1eba1400 	cdpne	4, 11, cr1, cr10, cr0, {0}
    48ec:	0dce0800 	stcleq	8, cr0, [lr]
    48f0:	04be0000 	ldrteq	r0, [lr], #0
    48f4:	01150000 	tsteq	r5, r0
    48f8:	007d0251 	rsbseq	r0, sp, r1, asr r2
    48fc:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4900:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    4904:	001ec414 	andseq	ip, lr, r4, lsl r4
    4908:	000e1008 	andeq	r1, lr, r8
    490c:	0004de00 	andeq	sp, r4, r0, lsl #28
    4910:	52011500 	andpl	r1, r1, #0, 10
    4914:	15007502 	strne	r7, [r0, #-1282]	; 0x502
    4918:	91025101 	tstls	r2, r1, lsl #2
    491c:	50011548 	andpl	r1, r1, r8, asr #10
    4920:	00007d02 	andeq	r7, r0, r2, lsl #26
    4924:	001ece14 	andseq	ip, lr, r4, lsl lr
    4928:	000db308 	andeq	fp, sp, r8, lsl #6
    492c:	0004ff00 	andeq	pc, r4, r0, lsl #30
    4930:	52011500 	andpl	r1, r1, #0, 10
    4934:	7fa89103 	svcvc	0x00a89103
    4938:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    493c:	0115007d 	tsteq	r5, sp, ror r0
    4940:	48910250 	ldmmi	r1, {r4, r6, r9}
    4944:	1ed61400 	cdpne	4, 13, cr1, cr6, cr0, {0}
    4948:	0e2b0800 	cdpeq	8, 2, cr0, cr11, cr0, {0}
    494c:	05190000 	ldreq	r0, [r9, #-0]
    4950:	01150000 	tsteq	r5, r0
    4954:	48910251 	ldmmi	r1, {r0, r4, r6, r9}
    4958:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    495c:	1400007d 	strne	r0, [r0], #-125	; 0x7d
    4960:	08001ede 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, fp, ip}
    4964:	00000e41 	andeq	r0, r0, r1, asr #28
    4968:	00000534 	andeq	r0, r0, r4, lsr r5
    496c:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    4970:	0115007d 	tsteq	r5, sp, ror r0
    4974:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    4978:	f414007f 			; <UNDEFINED> instruction: 0xf414007f
    497c:	5708001e 	smladpl	r8, lr, r0, r0
    4980:	5500000e 	strpl	r0, [r0, #-14]
    4984:	15000005 	strne	r0, [r0, #-5]
    4988:	91035201 	tstls	r3, r1, lsl #4
    498c:	01157fa8 	tsteq	r5, r8, lsr #31
    4990:	007d0251 	rsbseq	r0, sp, r1, asr r2
    4994:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4998:	14000074 	strne	r0, [r0], #-116	; 0x74
    499c:	08001efe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip}
    49a0:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    49a4:	00000575 	andeq	r0, r0, r5, ror r5
    49a8:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    49ac:	01150074 	tsteq	r5, r4, ror r0
    49b0:	00740251 	rsbseq	r0, r4, r1, asr r2
    49b4:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    49b8:	1400007d 	strne	r0, [r0], #-125	; 0x7d
    49bc:	08001f04 	stmdaeq	r0, {r2, r8, r9, sl, fp, ip}
    49c0:	00000de4 	andeq	r0, r0, r4, ror #27
    49c4:	00000589 	andeq	r0, r0, r9, lsl #11
    49c8:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    49cc:	1400007d 	strne	r0, [r0], #-125	; 0x7d
    49d0:	08001f0a 	stmdaeq	r0, {r1, r3, r8, r9, sl, fp, ip}
    49d4:	00000de4 	andeq	r0, r0, r4, ror #27
    49d8:	0000059d 	muleq	r0, sp, r5
    49dc:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    49e0:	18004891 	stmdane	r0, {r0, r4, r7, fp, lr}
    49e4:	08001f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp, ip}
    49e8:	00000e77 	andeq	r0, r0, r7, ror lr
    49ec:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    49f0:	01154891 			; <UNDEFINED> instruction: 0x01154891
    49f4:	007d0250 	rsbseq	r0, sp, r0, asr r2
    49f8:	730d0000 	movwvc	r0, #53248	; 0xd000
    49fc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4a00:	000014f9 	strdeq	r1, [r0], -r9
    4a04:	1f209c01 	svcne	0x00209c01
    4a08:	00e00800 	rsceq	r0, r0, r0, lsl #16
    4a0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4a10:	000008c3 	andeq	r0, r0, r3, asr #17
    4a14:	0100720f 	tsteq	r0, pc, lsl #4
    4a18:	00013f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
    4a1c:	0014f200 	andseq	pc, r4, r0, lsl #4
    4a20:	31700f00 	cmncc	r0, r0, lsl #30
    4a24:	459d0100 	ldrmi	r0, [sp, #256]	; 0x100
    4a28:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    4a2c:	0f000015 	svceq	0x00000015
    4a30:	01003270 	tsteq	r0, r0, ror r2
    4a34:	0001459d 	muleq	r1, sp, r5
    4a38:	00154a00 	andseq	r4, r5, r0, lsl #20
    4a3c:	00611700 	rsbeq	r1, r1, r0, lsl #14
    4a40:	00dcb301 	sbcseq	fp, ip, r1, lsl #6
    4a44:	91030000 	mrsls	r0, (UNDEF: 3)
    4a48:	62177de8 	andsvs	r7, r7, #232, 26	; 0x3a00
    4a4c:	dcb40100 	ldfles	f0, [r4]
    4a50:	03000000 	movweq	r0, #0
    4a54:	177e8891 			; <UNDEFINED> instruction: 0x177e8891
    4a58:	b5010063 	strlt	r0, [r1, #-99]	; 0x63
    4a5c:	000000dc 	ldrdeq	r0, [r0], -ip
    4a60:	7ea89103 	tanvce	f1, f3
    4a64:	01006417 	tsteq	r0, r7, lsl r4
    4a68:	0000dcb6 			; <UNDEFINED> instruction: 0x0000dcb6
    4a6c:	c8910300 	ldmgt	r1, {r8, r9}
    4a70:	0065177e 	rsbeq	r1, r5, lr, ror r7
    4a74:	00dcb701 	sbcseq	fp, ip, r1, lsl #14
    4a78:	91030000 	mrsls	r0, (UNDEF: 3)
    4a7c:	66177ee8 	ldrvs	r7, [r7], -r8, ror #29
    4a80:	dcb80100 	ldfles	f0, [r8]
    4a84:	03000000 	movweq	r0, #0
    4a88:	177f8891 			; <UNDEFINED> instruction: 0x177f8891
    4a8c:	b9010067 	stmdblt	r1, {r0, r1, r2, r5, r6}
    4a90:	000000dc 	ldrdeq	r0, [r0], -ip
    4a94:	7fa89103 	svcvc	0x00a89103
    4a98:	01006817 	tsteq	r0, r7, lsl r8
    4a9c:	0000dcba 			; <UNDEFINED> instruction: 0x0000dcba
    4aa0:	48910200 	ldmmi	r1, {r9}
    4aa4:	001f3e14 	andseq	r3, pc, r4, lsl lr	; <UNPREDICTABLE>
    4aa8:	000e1008 	andeq	r1, lr, r8
    4aac:	00067f00 	andeq	r7, r6, r0, lsl #30
    4ab0:	52011500 	andpl	r1, r1, #0, 10
    4ab4:	15007502 	strne	r7, [r0, #-1282]	; 0x502
    4ab8:	78025101 	stmdavc	r2, {r0, r8, ip, lr}
    4abc:	50011500 	andpl	r1, r1, r0, lsl #10
    4ac0:	7ea89103 	tanvce	f1, f3
    4ac4:	1f481400 	svcne	0x00481400
    4ac8:	0e100800 	cdpeq	8, 1, cr0, cr0, cr0, {0}
    4acc:	06a00000 	strteq	r0, [r0], r0
    4ad0:	01150000 	tsteq	r5, r0
    4ad4:	00740252 	rsbseq	r0, r4, r2, asr r2
    4ad8:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    4adc:	01150077 	tsteq	r5, r7, ror r0
    4ae0:	c8910350 	ldmgt	r1, {r4, r6, r8, r9}
    4ae4:	5214007e 	andspl	r0, r4, #126	; 0x7e
    4ae8:	b308001f 	movwlt	r0, #32799	; 0x801f
    4aec:	c200000d 	andgt	r0, r0, #13
    4af0:	15000006 	strne	r0, [r0, #-6]
    4af4:	91035201 	tstls	r3, r1, lsl #4
    4af8:	01157ec8 	tsteq	r5, r8, asr #29
    4afc:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    4b00:	5001157e 	andpl	r1, r1, lr, ror r5
    4b04:	00007d02 	andeq	r7, r0, r2, lsl #26
    4b08:	001f5c14 	andseq	r5, pc, r4, lsl ip	; <UNPREDICTABLE>
    4b0c:	000df508 	andeq	pc, sp, r8, lsl #10
    4b10:	0006e300 	andeq	lr, r6, r0, lsl #6
    4b14:	52011500 	andpl	r1, r1, #0, 10
    4b18:	15007502 	strne	r7, [r0, #-1282]	; 0x502
    4b1c:	78025101 	stmdavc	r2, {r0, r8, ip, lr}
    4b20:	50011500 	andpl	r1, r1, r0, lsl #10
    4b24:	7ea89103 	tanvce	f1, f3
    4b28:	1f661400 	svcne	0x00661400
    4b2c:	0df50800 	ldcleq	8, cr0, [r5]
    4b30:	07040000 	streq	r0, [r4, -r0]
    4b34:	01150000 	tsteq	r5, r0
    4b38:	00740252 	rsbseq	r0, r4, r2, asr r2
    4b3c:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    4b40:	01150077 	tsteq	r5, r7, ror r0
    4b44:	c8910350 	ldmgt	r1, {r4, r6, r8, r9}
    4b48:	7014007e 	andsvc	r0, r4, lr, ror r0
    4b4c:	b308001f 	movwlt	r0, #32799	; 0x801f
    4b50:	2700000d 	strcs	r0, [r0, -sp]
    4b54:	15000007 	strne	r0, [r0, #-7]
    4b58:	91035201 	tstls	r3, r1, lsl #4
    4b5c:	01157ec8 	tsteq	r5, r8, asr #29
    4b60:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    4b64:	5001157e 	andpl	r1, r1, lr, ror r5
    4b68:	7e889103 	sinvce	f1, f3
    4b6c:	1f7e1400 	svcne	0x007e1400
    4b70:	0db30800 	ldceq	8, cr0, [r3]
    4b74:	074a0000 	strbeq	r0, [sl, -r0]
    4b78:	01150000 	tsteq	r5, r0
    4b7c:	c0740352 	rsbsgt	r0, r4, r2, asr r3
    4b80:	51011500 	tstpl	r1, r0, lsl #10
    4b84:	00c07503 	sbceq	r7, r0, r3, lsl #10
    4b88:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4b8c:	007ec891 			; <UNDEFINED> instruction: 0x007ec891
    4b90:	001f8814 	andseq	r8, pc, r4, lsl r8	; <UNPREDICTABLE>
    4b94:	000db308 	andeq	fp, sp, r8, lsl #6
    4b98:	00076f00 	andeq	r6, r7, r0, lsl #30
    4b9c:	52011500 	andpl	r1, r1, #0, 10
    4ba0:	73700305 	cmnvc	r0, #335544320	; 0x14000000
    4ba4:	01150800 	tsteq	r5, r0, lsl #16
    4ba8:	c8910351 	ldmgt	r1, {r0, r4, r6, r8, r9}
    4bac:	5001157e 	andpl	r1, r1, lr, ror r5
    4bb0:	7ea89103 	tanvce	f1, f3
    4bb4:	1f961400 	svcne	0x00961400
    4bb8:	0db30800 	ldceq	8, cr0, [r3]
    4bbc:	07920000 	ldreq	r0, [r2, r0]
    4bc0:	01150000 	tsteq	r5, r0
    4bc4:	e0740352 	rsbs	r0, r4, r2, asr r3
    4bc8:	51011500 	tstpl	r1, r0, lsl #10
    4bcc:	00e07503 	rsceq	r7, r0, r3, lsl #10
    4bd0:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4bd4:	007ec891 			; <UNDEFINED> instruction: 0x007ec891
    4bd8:	001fa014 	andseq	sl, pc, r4, lsl r0	; <UNPREDICTABLE>
    4bdc:	000df508 	andeq	pc, sp, r8, lsl #10
    4be0:	0007b500 	andeq	fp, r7, r0, lsl #10
    4be4:	52011500 	andpl	r1, r1, #0, 10
    4be8:	7ec89103 	acsvce	f1, f3
    4bec:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4bf0:	157ec891 	ldrbne	ip, [lr, #-2193]!	; 0x891
    4bf4:	91035001 	tstls	r3, r1
    4bf8:	14007ec8 	strne	r7, [r0], #-3784	; 0xec8
    4bfc:	08001faa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, fp, ip}
    4c00:	00000e10 	andeq	r0, r0, r0, lsl lr
    4c04:	000007d7 	ldrdeq	r0, [r0], -r7
    4c08:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4c0c:	0115007d 	tsteq	r5, sp, ror r0
    4c10:	88910351 	ldmhi	r1, {r0, r4, r6, r8, r9}
    4c14:	5001157e 	andpl	r1, r1, lr, ror r5
    4c18:	7ee89103 	urdvce	f1, f3
    4c1c:	1fb41400 	svcne	0x00b41400
    4c20:	0e100800 	cdpeq	8, 1, cr0, cr0, cr0, {0}
    4c24:	07fa0000 	ldrbeq	r0, [sl, r0]!
    4c28:	01150000 	tsteq	r5, r0
    4c2c:	a8910352 	ldmge	r1, {r1, r4, r6, r8, r9}
    4c30:	5101157e 	tstpl	r1, lr, ror r5
    4c34:	7ec89103 	acsvce	f1, f3
    4c38:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4c3c:	007f8891 			; <UNDEFINED> instruction: 0x007f8891
    4c40:	001fbe14 	andseq	fp, pc, r4, lsl lr	; <UNPREDICTABLE>
    4c44:	000df508 	andeq	pc, sp, r8, lsl #10
    4c48:	00081d00 	andeq	r1, r8, r0, lsl #26
    4c4c:	52011500 	andpl	r1, r1, #0, 10
    4c50:	7ea89103 	tanvce	f1, f3
    4c54:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4c58:	157ec891 	ldrbne	ip, [lr, #-2193]!	; 0x891
    4c5c:	91035001 	tstls	r3, r1
    4c60:	14007fa8 	strne	r7, [r0], #-4008	; 0xfa8
    4c64:	08001fc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, fp, ip}
    4c68:	00000df5 	strdeq	r0, [r0], -r5
    4c6c:	0000083e 	andeq	r0, r0, lr, lsr r8
    4c70:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4c74:	0115007d 	tsteq	r5, sp, ror r0
    4c78:	88910351 	ldmhi	r1, {r0, r4, r6, r8, r9}
    4c7c:	5001157e 	andpl	r1, r1, lr, ror r5
    4c80:	00489102 	subeq	r9, r8, r2, lsl #2
    4c84:	001fd214 	andseq	sp, pc, r4, lsl r2	; <UNPREDICTABLE>
    4c88:	000db308 	andeq	fp, sp, r8, lsl #6
    4c8c:	00086000 	andeq	r6, r8, r0
    4c90:	52011500 	andpl	r1, r1, #0, 10
    4c94:	7f889103 	svcvc	0x00889103
    4c98:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4c9c:	157ee891 	ldrbne	lr, [lr, #-2193]!	; 0x891
    4ca0:	76025001 	strvc	r5, [r2], -r1
    4ca4:	de140000 	cdple	0, 1, cr0, cr4, cr0, {0}
    4ca8:	b308001f 	movwlt	r0, #32799	; 0x801f
    4cac:	8100000d 	tsthi	r0, sp
    4cb0:	15000008 	strne	r0, [r0, #-8]
    4cb4:	91025201 	tstls	r2, r1, lsl #4
    4cb8:	51011548 	tstpl	r1, r8, asr #10
    4cbc:	7fa89103 	svcvc	0x00a89103
    4cc0:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4cc4:	14002076 	strne	r2, [r0], #-118	; 0x76
    4cc8:	08001fea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, sl, fp, ip}
    4ccc:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4cd0:	000008a3 	andeq	r0, r0, r3, lsr #17
    4cd4:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4cd8:	01154891 			; <UNDEFINED> instruction: 0x01154891
    4cdc:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    4ce0:	5001157e 	andpl	r1, r1, lr, ror r5
    4ce4:	00c07603 	sbceq	r7, r0, r3, lsl #12
    4ce8:	1ff61800 	svcne	0x00f61800
    4cec:	0db30800 	ldceq	8, cr0, [r3]
    4cf0:	01150000 	tsteq	r5, r0
    4cf4:	a8910352 	ldmge	r1, {r1, r4, r6, r8, r9}
    4cf8:	5101157f 	tstpl	r1, pc, ror r5
    4cfc:	7f889103 	svcvc	0x00889103
    4d00:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4d04:	0000e076 	andeq	lr, r0, r6, ror r0
    4d08:	158b0e00 	strne	r0, [fp, #3584]	; 0xe00
    4d0c:	e7010000 	str	r0, [r1, -r0]
    4d10:	08002000 	stmdaeq	r0, {sp}
    4d14:	000000b4 	strheq	r0, [r0], -r4
    4d18:	0b629c01 	bleq	18abd24 <__Stack_Size+0x18ab524>
    4d1c:	720f0000 	andvc	r0, pc, #0
    4d20:	3fe70100 	svccc	0x00e70100
    4d24:	76000001 	strvc	r0, [r0], -r1
    4d28:	0f000015 	svceq	0x00000015
    4d2c:	e7010070 	smlsdx	r1, r0, r0, r0
    4d30:	00000145 	andeq	r0, r0, r5, asr #2
    4d34:	00001594 	muleq	r0, r4, r5
    4d38:	01006117 	tsteq	r0, r7, lsl r1
    4d3c:	0000dcfa 	strdeq	sp, [r0], -sl
    4d40:	90910300 	addsls	r0, r1, r0, lsl #6
    4d44:	0062177e 	rsbeq	r1, r2, lr, ror r7
    4d48:	00dcfb01 	sbcseq	pc, ip, r1, lsl #22
    4d4c:	91030000 	mrsls	r0, (UNDEF: 3)
    4d50:	63177eb0 	tstvs	r7, #176, 28	; 0xb00
    4d54:	dcfc0100 	ldflee	f0, [ip]
    4d58:	03000000 	movweq	r0, #0
    4d5c:	177ed091 			; <UNDEFINED> instruction: 0x177ed091
    4d60:	fd010065 	stc2	0, cr0, [r1, #-404]	; 0xfffffe6c
    4d64:	000000dc 	ldrdeq	r0, [r0], -ip
    4d68:	7ef09103 	nrmvcs	f1, f3
    4d6c:	01006617 	tsteq	r0, r7, lsl r6
    4d70:	0000dcfe 	strdeq	sp, [r0], -lr
    4d74:	90910300 	addsls	r0, r1, r0, lsl #6
    4d78:	0067177f 	rsbeq	r1, r7, pc, ror r7
    4d7c:	00dcff01 	sbcseq	pc, ip, r1, lsl #30
    4d80:	91030000 	mrsls	r0, (UNDEF: 3)
    4d84:	681d7fb0 	ldmdavs	sp, {r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    4d88:	01000100 	mrseq	r0, (UNDEF: 16)
    4d8c:	000000dc 	ldrdeq	r0, [r0], -ip
    4d90:	14509102 	ldrbne	r9, [r0], #-258	; 0x102
    4d94:	08002014 	stmdaeq	r0, {r2, r4, sp}
    4d98:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4d9c:	0000096d 	andeq	r0, r0, sp, ror #18
    4da0:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4da4:	01150075 	tsteq	r5, r5, ror r0
    4da8:	00750251 	rsbseq	r0, r5, r1, asr r2
    4dac:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4db0:	1400007d 	strne	r0, [r0], #-125	; 0x7d
    4db4:	0800201e 	stmdaeq	r0, {r1, r2, r3, r4, sp}
    4db8:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4dbc:	0000098e 	andeq	r0, r0, lr, lsl #19
    4dc0:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4dc4:	01150076 	tsteq	r5, r6, ror r0
    4dc8:	00760251 	rsbseq	r0, r6, r1, asr r2
    4dcc:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4dd0:	007eb091 			; <UNDEFINED> instruction: 0x007eb091
    4dd4:	00202a14 	eoreq	r2, r0, r4, lsl sl
    4dd8:	000db308 	andeq	fp, sp, r8, lsl #6
    4ddc:	0009b100 	andeq	fp, r9, r0, lsl #2
    4de0:	52011500 	andpl	r1, r1, #0, 10
    4de4:	00e07503 	rsceq	r7, r0, r3, lsl #10
    4de8:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4dec:	1500e075 	strne	lr, [r0, #-117]	; 0x75
    4df0:	91035001 	tstls	r3, r1
    4df4:	14007ed0 	strne	r7, [r0], #-3792	; 0xed0
    4df8:	08002034 	stmdaeq	r0, {r2, r4, r5, sp}
    4dfc:	00000df5 	strdeq	r0, [r0], -r5
    4e00:	000009d4 	ldrdeq	r0, [r0], -r4
    4e04:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    4e08:	157ed091 	ldrbne	sp, [lr, #-145]!	; 0x91
    4e0c:	91035101 	tstls	r3, r1, lsl #2
    4e10:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    4e14:	d0910350 	addsle	r0, r1, r0, asr r3
    4e18:	3e14007e 	mrccc	0, 0, r0, cr4, cr14, {3}
    4e1c:	f5080020 			; <UNDEFINED> instruction: 0xf5080020
    4e20:	f500000d 			; <UNDEFINED> instruction: 0xf500000d
    4e24:	15000009 	strne	r0, [r0, #-9]
    4e28:	76025201 	strvc	r5, [r2], -r1, lsl #4
    4e2c:	51011500 	tstpl	r1, r0, lsl #10
    4e30:	15007502 	strne	r7, [r0, #-1282]	; 0x502
    4e34:	91035001 	tstls	r3, r1
    4e38:	14007f90 	strne	r7, [r0], #-3984	; 0xf90
    4e3c:	08002048 	stmdaeq	r0, {r3, r6, sp}
    4e40:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4e44:	00000a18 	andeq	r0, r0, r8, lsl sl
    4e48:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    4e4c:	157f9091 	ldrbne	r9, [pc, #-145]!	; 4dc3 <__Stack_Size+0x45c3>
    4e50:	91035101 	tstls	r3, r1, lsl #2
    4e54:	01157f90 			; <UNDEFINED> instruction: 0x01157f90
    4e58:	f0910350 			; <UNDEFINED> instruction: 0xf0910350
    4e5c:	5214007e 	andspl	r0, r4, #126	; 0x7e
    4e60:	10080020 	andne	r0, r8, r0, lsr #32
    4e64:	3a00000e 	bcc	4ea4 <__Stack_Size+0x46a4>
    4e68:	1500000a 	strne	r0, [r0, #-10]
    4e6c:	7d025201 	sfmvc	f5, 4, [r2, #-4]
    4e70:	51011500 	tstpl	r1, r0, lsl #10
    4e74:	7ef09103 	nrmvcs	f1, f3
    4e78:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4e7c:	007ef091 			; <UNDEFINED> instruction: 0x007ef091
    4e80:	00205c14 	eoreq	r5, r0, r4, lsl ip
    4e84:	000e1008 	andeq	r1, lr, r8
    4e88:	000a5d00 	andeq	r5, sl, r0, lsl #26
    4e8c:	52011500 	andpl	r1, r1, #0, 10
    4e90:	7eb09103 	asnvcs	f1, f3
    4e94:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4e98:	157ef091 	ldrbne	pc, [lr, #-145]!	; 0x91	; <UNPREDICTABLE>
    4e9c:	91035001 	tstls	r3, r1
    4ea0:	14007ef0 	strne	r7, [r0], #-3824	; 0xef0
    4ea4:	08002066 	stmdaeq	r0, {r1, r2, r5, r6, sp}
    4ea8:	00000e10 	andeq	r0, r0, r0, lsl lr
    4eac:	00000a7f 	andeq	r0, r0, pc, ror sl
    4eb0:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4eb4:	0115007d 	tsteq	r5, sp, ror r0
    4eb8:	b0910351 	addslt	r0, r1, r1, asr r3
    4ebc:	5001157e 	andpl	r1, r1, lr, ror r5
    4ec0:	7fb09103 	svcvc	0x00b09103
    4ec4:	20701400 	rsbscs	r1, r0, r0, lsl #8
    4ec8:	0e100800 	cdpeq	8, 1, cr0, cr0, cr0, {0}
    4ecc:	0aa20000 	beq	fe884ed4 <BootRAM+0xd7f5675>
    4ed0:	01150000 	tsteq	r5, r0
    4ed4:	d0910352 	addsle	r0, r1, r2, asr r3
    4ed8:	5101157e 	tstpl	r1, lr, ror r5
    4edc:	7fb09103 	svcvc	0x00b09103
    4ee0:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4ee4:	007f9091 			; <UNDEFINED> instruction: 0x007f9091
    4ee8:	00207814 	eoreq	r7, r0, r4, lsl r8
    4eec:	000e4108 	andeq	r4, lr, r8, lsl #2
    4ef0:	000abd00 	andeq	fp, sl, r0, lsl #26
    4ef4:	51011500 	tstpl	r1, r0, lsl #10
    4ef8:	7eb09103 	asnvcs	f1, f3
    4efc:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4f00:	14005091 	strne	r5, [r0], #-145	; 0x91
    4f04:	08002082 	stmdaeq	r0, {r1, r7, sp}
    4f08:	00000e10 	andeq	r0, r0, r0, lsl lr
    4f0c:	00000add 	ldrdeq	r0, [r0], -sp
    4f10:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4f14:	0115007d 	tsteq	r5, sp, ror r0
    4f18:	50910251 	addspl	r0, r1, r1, asr r2
    4f1c:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4f20:	14005091 	strne	r5, [r0], #-145	; 0x91
    4f24:	0800208c 	stmdaeq	r0, {r2, r3, r7, sp}
    4f28:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4f2c:	00000aff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4f30:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    4f34:	157f9091 	ldrbne	r9, [pc, #-145]!	; 4eab <__Stack_Size+0x46ab>
    4f38:	91035101 	tstls	r3, r1, lsl #2
    4f3c:	01157ef0 			; <UNDEFINED> instruction: 0x01157ef0
    4f40:	00740250 	rsbseq	r0, r4, r0, asr r2
    4f44:	20981400 	addscs	r1, r8, r0, lsl #8
    4f48:	0db30800 	ldceq	8, cr0, [r3]
    4f4c:	0b200000 	bleq	804f54 <__Stack_Size+0x804754>
    4f50:	01150000 	tsteq	r5, r0
    4f54:	50910252 	addspl	r0, r1, r2, asr r2
    4f58:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4f5c:	157fb091 	ldrbne	fp, [pc, #-145]!	; 4ed3 <__Stack_Size+0x46d3>
    4f60:	74025001 	strvc	r5, [r2], #-1
    4f64:	a4140020 	ldrge	r0, [r4], #-32
    4f68:	b3080020 	movwlt	r0, #32800	; 0x8020
    4f6c:	4200000d 	andmi	r0, r0, #13
    4f70:	1500000b 	strne	r0, [r0, #-11]
    4f74:	91025201 	tstls	r2, r1, lsl #4
    4f78:	51011550 	tstpl	r1, r0, asr r5
    4f7c:	7ef09103 	nrmvcs	f1, f3
    4f80:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4f84:	0000c074 	andeq	ip, r0, r4, ror r0
    4f88:	0020b018 	eoreq	fp, r0, r8, lsl r0
    4f8c:	000db308 	andeq	fp, sp, r8, lsl #6
    4f90:	52011500 	andpl	r1, r1, #0, 10
    4f94:	7fb09103 	svcvc	0x00b09103
    4f98:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4f9c:	157f9091 	ldrbne	r9, [pc, #-145]!	; 4f13 <__Stack_Size+0x4713>
    4fa0:	74035001 	strvc	r5, [r3], #-1
    4fa4:	000000e0 	andeq	r0, r0, r0, ror #1
    4fa8:	0015381e 	andseq	r3, r5, lr, lsl r8
    4fac:	012a0100 	teqeq	sl, r0, lsl #2
    4fb0:	080020b4 	stmdaeq	r0, {r2, r4, r5, r7, sp}
    4fb4:	00000084 	andeq	r0, r0, r4, lsl #1
    4fb8:	0d499c01 	stcleq	12, cr9, [r9, #-4]
    4fbc:	d81f0000 	ldmdale	pc, {}	; <UNPREDICTABLE>
    4fc0:	01000014 	tsteq	r0, r4, lsl r0
    4fc4:	013f012a 	teqeq	pc, sl, lsr #2
    4fc8:	15b20000 	ldrne	r0, [r2, #0]!
    4fcc:	70200000 	eorvc	r0, r0, r0
    4fd0:	012a0100 	teqeq	sl, r0, lsl #2
    4fd4:	00000145 	andeq	r0, r0, r5, asr #2
    4fd8:	000015de 	ldrdeq	r1, [r0], -lr
    4fdc:	01006520 	tsteq	r0, r0, lsr #10
    4fe0:	0111012b 	tsteq	r1, fp, lsr #2
    4fe4:	160a0000 	strne	r0, [sl], -r0
    4fe8:	721d0000 	andsvc	r0, sp, #0
    4fec:	012d0100 	teqeq	sp, r0, lsl #2
    4ff0:	000000a7 	andeq	r0, r0, r7, lsr #1
    4ff4:	7de89103 	stfvcp	f1, [r8, #12]!
    4ff8:	01006921 	tsteq	r0, r1, lsr #18
    4ffc:	0073012e 	rsbseq	r0, r3, lr, lsr #2
    5000:	16360000 	ldrtne	r0, [r6], -r0
    5004:	1c220000 	stcne	0, cr0, [r2], #-0
    5008:	c0000001 	andgt	r0, r0, r1
    500c:	0a080020 	beq	205094 <__Stack_Size+0x204894>
    5010:	01000000 	mrseq	r0, (UNDEF: 0)
    5014:	0c090130 	stfeqs	f0, [r9], {48}	; 0x30
    5018:	331a0000 	tstcc	sl, #0
    501c:	06000001 	streq	r0, [r0], -r1
    5020:	00739003 	rsbseq	r9, r3, r3
    5024:	28119f08 	ldmdacs	r1, {r3, r8, r9, sl, fp, ip, pc}
    5028:	6e000001 	cdpvs	0, 0, cr0, cr0, cr1, {0}
    502c:	18000016 	stmdane	r0, {r1, r2, r4}
    5030:	080020ca 	stmdaeq	r0, {r1, r3, r6, r7, sp}
    5034:	00000e91 	muleq	r0, r1, lr
    5038:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    503c:	01158008 	tsteq	r5, r8
    5040:	90030551 	andls	r0, r3, r1, asr r5
    5044:	15080073 	strne	r0, [r8, #-115]	; 0x73
    5048:	7d025001 	stcvc	0, cr5, [r2, #-4]
    504c:	23000000 	movwcs	r0, #0
    5050:	00000568 	andeq	r0, r0, r8, ror #10
    5054:	00000d09 	andeq	r0, r0, r9, lsl #26
    5058:	74696221 	strbtvc	r6, [r9], #-545	; 0x221
    505c:	01330100 	teqeq	r3, r0, lsl #2
    5060:	00000117 	andeq	r0, r0, r7, lsl r1
    5064:	0000169d 	muleq	r0, sp, r6
    5068:	0100731d 	tsteq	r0, sp, lsl r3
    506c:	00a70134 	adceq	r0, r7, r4, lsr r1
    5070:	91030000 	mrsls	r0, (UNDEF: 3)
    5074:	de147ee8 	cdple	14, 1, cr7, cr4, cr8, {7}
    5078:	c3080020 	movwgt	r0, #32800	; 0x8020
    507c:	4a000008 	bmi	50a4 <__Stack_Size+0x48a4>
    5080:	1500000c 	strne	r0, [r0, #-12]
    5084:	7d025101 	stfvcs	f5, [r2, #-4]
    5088:	50011500 	andpl	r1, r1, r0, lsl #10
    508c:	00007d02 	andeq	r7, r0, r2, lsl #26
    5090:	0020ec14 	eoreq	lr, r0, r4, lsl ip
    5094:	0005b908 	andeq	fp, r5, r8, lsl #18
    5098:	000c6b00 	andeq	r6, ip, r0, lsl #22
    509c:	52011500 	andpl	r1, r1, #0, 10
    50a0:	15007702 	strne	r7, [r0, #-1794]	; 0x702
    50a4:	7d025101 	stfvcs	f5, [r2, #-4]
    50a8:	50011500 	andpl	r1, r1, r0, lsl #10
    50ac:	7ee89103 	urdvce	f1, f3
    50b0:	20f81400 	rscscs	r1, r8, r0, lsl #8
    50b4:	0e570800 	cdpeq	8, 5, cr0, cr7, cr0, {0}
    50b8:	0c920000 	ldceq	0, cr0, [r2], {0}
    50bc:	01150000 	tsteq	r5, r0
    50c0:	00750253 	rsbseq	r0, r5, r3, asr r2
    50c4:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    50c8:	157ee891 	ldrbne	lr, [lr, #-2193]!	; 0x891
    50cc:	7d025101 	stfvcs	f5, [r2, #-4]
    50d0:	50011500 	andpl	r1, r1, r0, lsl #10
    50d4:	00007d02 	andeq	r7, r0, r2, lsl #26
    50d8:	00210414 	eoreq	r0, r1, r4, lsl r4
    50dc:	000e5708 	andeq	r5, lr, r8, lsl #14
    50e0:	000cbb00 	andeq	fp, ip, r0, lsl #22
    50e4:	53011500 	movwpl	r1, #5376	; 0x1500
    50e8:	15007502 	strne	r7, [r0, #-1282]	; 0x502
    50ec:	91035201 	tstls	r3, r1, lsl #4
    50f0:	01157f88 	tsteq	r5, r8, lsl #31
    50f4:	88910351 	ldmhi	r1, {r0, r4, r6, r8, r9}
    50f8:	5001157e 	andpl	r1, r1, lr, ror r5
    50fc:	7e889103 	sinvce	f1, f3
    5100:	21101400 	tstcs	r0, r0, lsl #8
    5104:	0e570800 	cdpeq	8, 5, cr0, cr7, cr0, {0}
    5108:	0ce30000 	stcleq	0, cr0, [r3]
    510c:	01150000 	tsteq	r5, r0
    5110:	00750253 	rsbseq	r0, r5, r3, asr r2
    5114:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    5118:	01154891 			; <UNDEFINED> instruction: 0x01154891
    511c:	c8910351 	ldmgt	r1, {r0, r4, r6, r8, r9}
    5120:	5001157e 	andpl	r1, r1, lr, ror r5
    5124:	7ec89103 	acsvce	f1, f3
    5128:	211e1800 	tstcs	lr, r0, lsl #16
    512c:	0e570800 	cdpeq	8, 5, cr0, cr7, cr0, {0}
    5130:	01150000 	tsteq	r5, r0
    5134:	00750253 	rsbseq	r0, r5, r3, asr r2
    5138:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    513c:	157fa891 	ldrbne	sl, [pc, #-2193]!	; 48b3 <__Stack_Size+0x40b3>
    5140:	91035101 	tstls	r3, r1, lsl #2
    5144:	01157ea8 	tsteq	r5, r8, lsr #29
    5148:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    514c:	2400007e 	strcs	r0, [r0], #-126	; 0x7e
    5150:	0000011c 	andeq	r0, r0, ip, lsl r1
    5154:	08002122 	stmdaeq	r0, {r1, r5, r8, sp}
    5158:	0000000a 	andeq	r0, r0, sl
    515c:	11013f01 	tstne	r1, r1, lsl #30
    5160:	00000133 	andeq	r0, r0, r3, lsr r1
    5164:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
    5168:	00012811 	andeq	r2, r1, r1, lsl r8
    516c:	0016df00 	andseq	sp, r6, r0, lsl #30
    5170:	212c1800 	teqcs	ip, r0, lsl #16
    5174:	0e910800 	cdpeq	8, 9, cr0, cr1, cr0, {0}
    5178:	01150000 	tsteq	r5, r0
    517c:	80080252 	andhi	r0, r8, r2, asr r2
    5180:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    5184:	0115007d 	tsteq	r5, sp, ror r0
    5188:	00780250 	rsbseq	r0, r8, r0, asr r2
    518c:	25000000 	strcs	r0, [r0, #-0]
    5190:	000015bf 			; <UNDEFINED> instruction: 0x000015bf
    5194:	0d5a5701 	ldcleq	7, cr5, [sl, #-4]
    5198:	03050000 	movweq	r0, #20480	; 0x5000
    519c:	08007490 	stmdaeq	r0, {r4, r7, sl, ip, sp, lr}
    51a0:	0000dc0d 	andeq	sp, r0, sp, lsl #24
    51a4:	15c92500 	strbne	r2, [r9, #1280]	; 0x500
    51a8:	95010000 	strls	r0, [r1, #-0]
    51ac:	00000d5a 	andeq	r0, r0, sl, asr sp
    51b0:	73700305 	cmnvc	r0, #335544320	; 0x14000000
    51b4:	41260800 	teqmi	r6, r0, lsl #16
    51b8:	02000014 	andeq	r0, r0, #20
    51bc:	000d5a1c 	andeq	r5, sp, ip, lsl sl
    51c0:	15a52700 	strne	r2, [r5, #1792]!	; 0x700
    51c4:	14010000 	strne	r0, [r1], #-0
    51c8:	0000014b 	andeq	r0, r0, fp, asr #2
    51cc:	74100305 	ldrvc	r0, [r0], #-773	; 0x305
    51d0:	64270800 	strtvs	r0, [r7], #-2048	; 0x800
    51d4:	01000015 	tsteq	r0, r5, lsl r0
    51d8:	00014b2a 	andeq	r4, r1, sl, lsr #22
    51dc:	90030500 	andls	r0, r3, r0, lsl #10
    51e0:	28080073 	stmdacs	r8, {r0, r1, r4, r5, r6}
    51e4:	00001546 	andeq	r1, r0, r6, asr #10
    51e8:	0db31f02 	ldceq	15, cr1, [r3, #8]!
    51ec:	0b290000 	bleq	a451f4 <__Stack_Size+0xa449f4>
    51f0:	29000001 	stmdbcs	r0, {r0}
    51f4:	0000008c 	andeq	r0, r0, ip, lsl #1
    51f8:	147f2800 	ldrbtne	r2, [pc], #-2048	; 5200 <__Stack_Size+0x4a00>
    51fc:	44020000 	strmi	r0, [r2], #-0
    5200:	00000dce 	andeq	r0, r0, lr, asr #27
    5204:	00010b29 	andeq	r0, r1, r9, lsr #22
    5208:	01112900 	tsteq	r1, r0, lsl #18
    520c:	11290000 	teqne	r9, r0
    5210:	00000001 	andeq	r0, r0, r1
    5214:	00149428 	andseq	r9, r4, r8, lsr #8
    5218:	e4510200 	ldrb	r0, [r1], #-512	; 0x200
    521c:	2900000d 	stmdbcs	r0, {r0, r2, r3}
    5220:	0000010b 	andeq	r0, r0, fp, lsl #2
    5224:	00011129 	andeq	r1, r1, r9, lsr #2
    5228:	6e280000 	cdpvs	0, 2, cr0, cr8, cr0, {0}
    522c:	02000014 	andeq	r0, r0, #20
    5230:	000df528 	andeq	pc, sp, r8, lsr #10
    5234:	010b2900 	tsteq	fp, r0, lsl #18
    5238:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    523c:	00001424 	andeq	r1, r0, r4, lsr #8
    5240:	0e103a02 	vnmlseq.f32	s6, s0, s4
    5244:	0b290000 	bleq	a4524c <__Stack_Size+0xa44a4c>
    5248:	29000001 	stmdbcs	r0, {r0}
    524c:	00000111 	andeq	r0, r0, r1, lsl r1
    5250:	00011129 	andeq	r1, r1, r9, lsr #2
    5254:	5e280000 	cdppl	0, 2, cr0, cr8, cr0, {0}
    5258:	02000014 	andeq	r0, r0, #20
    525c:	000e2b3b 	andeq	r2, lr, fp, lsr fp
    5260:	010b2900 	tsteq	fp, r0, lsl #18
    5264:	11290000 	teqne	r9, r0
    5268:	29000001 	stmdbcs	r0, {r0}
    526c:	00000111 	andeq	r0, r0, r1, lsl r1
    5270:	15742800 	ldrbne	r2, [r4, #-2048]!	; 0x800
    5274:	5a020000 	bpl	8527c <__Stack_Size+0x84a7c>
    5278:	00000e41 	andeq	r0, r0, r1, asr #28
    527c:	00010b29 	andeq	r0, r1, r9, lsr #22
    5280:	01112900 	tsteq	r1, r0, lsl #18
    5284:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5288:	00001580 	andeq	r1, r0, r0, lsl #11
    528c:	0e573e02 	cdpeq	14, 5, cr3, cr7, cr2, {0}
    5290:	0b290000 	bleq	a45298 <__Stack_Size+0xa44a98>
    5294:	29000001 	stmdbcs	r0, {r0}
    5298:	00000111 	andeq	r0, r0, r1, lsl r1
    529c:	14a92800 	strtne	r2, [r9], #2048	; 0x800
    52a0:	33020000 	movwcc	r0, #8192	; 0x2000
    52a4:	00000e77 	andeq	r0, r0, r7, ror lr
    52a8:	00010b29 	andeq	r0, r1, r9, lsr #22
    52ac:	01112900 	tsteq	r1, r0, lsl #18
    52b0:	11290000 	teqne	r9, r0
    52b4:	29000001 	stmdbcs	r0, {r0}
    52b8:	00000081 	andeq	r0, r0, r1, lsl #1
    52bc:	14ce2a00 	strbne	r2, [lr], #2560	; 0xa00
    52c0:	2d020000 	stccs	0, cr0, [r2, #-0]
    52c4:	00000081 	andeq	r0, r0, r1, lsl #1
    52c8:	00000e91 	muleq	r0, r1, lr
    52cc:	00011129 	andeq	r1, r1, r9, lsr #2
    52d0:	01112900 	tsteq	r1, r0, lsl #18
    52d4:	2b000000 	blcs	52dc <__Stack_Size+0x4adc>
    52d8:	000014de 	ldrdeq	r1, [r0], -lr
    52dc:	0000009e 	muleq	r0, lr, r0
    52e0:	00000eae 	andeq	r0, r0, lr, lsr #29
    52e4:	00009e29 	andeq	r9, r0, r9, lsr #28
    52e8:	0eae2900 	cdpeq	9, 10, cr2, cr14, cr0, {0}
    52ec:	97290000 	strls	r0, [r9, -r0]!
    52f0:	00000000 	andeq	r0, r0, r0
    52f4:	0eb4040c 	cdpeq	4, 11, cr0, cr4, cr12, {0}
    52f8:	002c0000 	eoreq	r0, ip, r0
    52fc:	00000b58 	andeq	r0, r0, r8, asr fp
    5300:	13e20004 	mvnne	r0, #4
    5304:	01040000 	mrseq	r0, (UNDEF: 4)
    5308:	000006c0 	andeq	r0, r0, r0, asr #13
    530c:	0015eb01 	andseq	lr, r5, r1, lsl #22
    5310:	00089300 	andeq	r9, r8, r0, lsl #6
    5314:	0006d800 	andeq	sp, r6, r0, lsl #16
    5318:	00000000 	andeq	r0, r0, r0
    531c:	00166000 	andseq	r6, r6, r0
    5320:	06010200 	streq	r0, [r1], -r0, lsl #4
    5324:	0000081a 	andeq	r0, r0, sl, lsl r8
    5328:	000fc903 	andeq	ip, pc, r3, lsl #18
    532c:	371c0400 	ldrcc	r0, [ip, -r0, lsl #8]
    5330:	02000000 	andeq	r0, r0, #0
    5334:	08180801 	ldmdaeq	r8, {r0, fp}
    5338:	02020000 	andeq	r0, r2, #0
    533c:	00065e05 	andeq	r5, r6, r5, lsl #28
    5340:	07020200 	streq	r0, [r2, -r0, lsl #4]
    5344:	00000949 	andeq	r0, r0, r9, asr #18
    5348:	da050402 	ble	146358 <__Stack_Size+0x145b58>
    534c:	02000004 	andeq	r0, r0, #4
    5350:	02520704 	subseq	r0, r2, #4, 14	; 0x100000
    5354:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5358:	0004d505 	andeq	sp, r4, r5, lsl #10
    535c:	16530300 	ldrbne	r0, [r3], -r0, lsl #6
    5360:	4e040000 	cdpmi	0, 0, cr0, cr4, cr0, {0}
    5364:	0000006c 	andeq	r0, r0, ip, rrx
    5368:	4d070802 	stcmi	8, cr0, [r7, #-8]
    536c:	04000002 	streq	r0, [r0], #-2
    5370:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    5374:	04020074 	streq	r0, [r2], #-116	; 0x74
    5378:	00025707 	andeq	r5, r2, r7, lsl #14
    537c:	0fcb0300 	svceq	0x00cb0300
    5380:	2a050000 	bcs	145388 <__Stack_Size+0x144b88>
    5384:	0000002c 	andeq	r0, r0, ip, lsr #32
    5388:	00165503 	andseq	r5, r6, r3, lsl #10
    538c:	614e0500 	cmpvs	lr, r0, lsl #10
    5390:	03000000 	movweq	r0, #0
    5394:	00000d63 	andeq	r0, r0, r3, ror #26
    5398:	007ad406 	rsbseq	sp, sl, r6, lsl #8
    539c:	04020000 	streq	r0, [r2], #-0
    53a0:	00078b07 	andeq	r8, r7, r7, lsl #22
    53a4:	02040500 	andeq	r0, r4, #0, 10
    53a8:	08210801 	stmdaeq	r1!, {r0, fp}
    53ac:	9a060000 	bls	1853b4 <__Stack_Size+0x184bb4>
    53b0:	80000015 	andhi	r0, r0, r5, lsl r0
    53b4:	00e72003 	rsceq	r2, r7, r3
    53b8:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
    53bc:	e7210300 	str	r0, [r1, -r0, lsl #6]!
    53c0:	00000000 	andeq	r0, r0, r0
    53c4:	03007907 	movweq	r7, #2311	; 0x907
    53c8:	0000e722 	andeq	lr, r0, r2, lsr #14
    53cc:	74072000 	strvc	r2, [r7], #-0
    53d0:	e7230300 	str	r0, [r3, -r0, lsl #6]!
    53d4:	40000000 	andmi	r0, r0, r0
    53d8:	03007a07 	movweq	r7, #2567	; 0xa07
    53dc:	0000e724 	andeq	lr, r0, r4, lsr #14
    53e0:	08006000 	stmdaeq	r0, {sp, lr}
    53e4:	00000081 	andeq	r0, r0, r1, lsl #1
    53e8:	000000f7 	strdeq	r0, [r0], -r7
    53ec:	0000a209 	andeq	sl, r0, r9, lsl #4
    53f0:	06001f00 	streq	r1, [r0], -r0, lsl #30
    53f4:	000016c2 	andeq	r1, r0, r2, asr #13
    53f8:	0e140240 	cdpeq	2, 1, cr0, cr4, cr0, {2}
    53fc:	07000001 	streq	r0, [r0, -r1]
    5400:	15020068 	strne	r0, [r2, #-104]	; 0x68
    5404:	0000010e 	andeq	r0, r0, lr, lsl #2
    5408:	8c080000 	stchi	0, cr0, [r8], {-0}
    540c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    5410:	09000001 	stmdbeq	r0, {r0}
    5414:	000000a2 	andeq	r0, r0, r2, lsr #1
    5418:	cf0a0007 	svcgt	0x000a0007
    541c:	02000016 	andeq	r0, r0, #22
    5420:	0134031c 	teqeq	r4, ip, lsl r3
    5424:	730b0000 	movwvc	r0, #45056	; 0xb000
    5428:	341c0200 	ldrcc	r0, [ip], #-512	; 0x200
    542c:	00000001 	andeq	r0, r0, r1
    5430:	00f7040c 	rscseq	r0, r7, ip, lsl #8
    5434:	fa0a0000 	blx	28543c <__Stack_Size+0x284c3c>
    5438:	03000015 	movweq	r0, #21
    543c:	0150033e 	cmpeq	r0, lr, lsr r3
    5440:	650b0000 	strvs	r0, [fp, #-0]
    5444:	503e0300 	eorspl	r0, lr, r0, lsl #6
    5448:	00000001 	andeq	r0, r0, r1
    544c:	0081040c 	addeq	r0, r1, ip, lsl #8
    5450:	970a0000 	strls	r0, [sl, -r0]
    5454:	01000016 	tsteq	r0, r6, lsl r0
    5458:	01ae0142 			; <UNDEFINED> instruction: 0x01ae0142
    545c:	350d0000 	strcc	r0, [sp, #-0]
    5460:	01000016 	tsteq	r0, r6, lsl r0
    5464:	00015042 	andeq	r5, r1, r2, asr #32
    5468:	15e00d00 	strbne	r0, [r0, #3328]!	; 0xd00
    546c:	43010000 	movwmi	r0, #4096	; 0x1000
    5470:	00000150 	andeq	r0, r0, r0, asr r1
    5474:	00165e0d 	andseq	r5, r6, sp, lsl #28
    5478:	73430100 	movtvc	r0, #12544	; 0x3100
    547c:	0d000000 	stceq	0, cr0, [r0, #-0]
    5480:	0000168f 	andeq	r1, r0, pc, lsl #13
    5484:	01ae4401 			; <UNDEFINED> instruction: 0x01ae4401
    5488:	6c0b0000 	stcvs	0, cr0, [fp], {-0}
    548c:	01006e65 	tsteq	r0, r5, ror #28
    5490:	00009744 	andeq	r9, r0, r4, asr #14
    5494:	00730e00 	rsbseq	r0, r3, r0, lsl #28
    5498:	00f74601 	rscseq	r4, r7, r1, lsl #12
    549c:	0e0f0000 	cdpeq	0, 0, cr0, cr15, cr0, {0}
    54a0:	4e010069 	cdpmi	0, 0, cr0, cr1, cr9, {3}
    54a4:	00000097 	muleq	r0, r7, r0
    54a8:	040c0000 	streq	r0, [ip], #-0
    54ac:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    54b0:	00008110 	andeq	r8, r0, r0, lsl r1
    54b4:	162a0a00 	strtne	r0, [sl], -r0, lsl #20
    54b8:	15010000 	strne	r0, [r1, #-0]
    54bc:	0001e501 	andeq	lr, r1, r1, lsl #10
    54c0:	16430d00 	strbne	r0, [r3], -r0, lsl #26
    54c4:	15010000 	strne	r0, [r1, #-0]
    54c8:	00000150 	andeq	r0, r0, r0, asr r1
    54cc:	00163c0d 	andseq	r3, r6, sp, lsl #24
    54d0:	ae150100 	mufges	f0, f5, f0
    54d4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    54d8:	17010073 	smlsdxne	r1, r3, r0, r0
    54dc:	000000f7 	strdeq	r0, [r0], -r7
    54e0:	16ba0a00 	ldrtne	r0, [sl], r0, lsl #20
    54e4:	32010000 	andcc	r0, r1, #0
    54e8:	00020d01 	andeq	r0, r2, r1, lsl #26
    54ec:	00720b00 	rsbseq	r0, r2, r0, lsl #22
    54f0:	01503201 	cmpeq	r0, r1, lsl #4
    54f4:	6b0b0000 	blvs	2c54fc <__Stack_Size+0x2c4cfc>
    54f8:	ae320100 	rsfges	f0, f2, f0
    54fc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    5500:	34010070 	strcc	r0, [r1], #-112	; 0x70
    5504:	000000b2 	strheq	r0, [r0], -r2
    5508:	70701100 	rsbsvc	r1, r0, r0, lsl #2
    550c:	01290100 	teqeq	r9, r0, lsl #2
    5510:	0000023f 	andeq	r0, r0, pc, lsr r2
    5514:	00164c0d 	andseq	r4, r6, sp, lsl #24
    5518:	50290100 	eorpl	r0, r9, r0, lsl #2
    551c:	0b000001 	bleq	5528 <__Stack_Size+0x4d28>
    5520:	29010070 	stmdbcs	r1, {r4, r5, r6}
    5524:	0000023f 	andeq	r0, r0, pc, lsr r2
    5528:	0100780e 	tsteq	r0, lr, lsl #16
    552c:	0000e72b 	andeq	lr, r0, fp, lsr #14
    5530:	00790e00 	rsbseq	r0, r9, r0, lsl #28
    5534:	00e72c01 	rsceq	r2, r7, r1, lsl #24
    5538:	0c000000 	stceq	0, cr0, [r0], {-0}
    553c:	00024504 	andeq	r4, r2, r4, lsl #10
    5540:	00b21000 	adcseq	r1, r2, r0
    5544:	a8120000 	ldmdage	r2, {}	; <UNPREDICTABLE>
    5548:	01000016 	tsteq	r0, r6, lsl r0
    554c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5550:	00007c00 	andeq	r7, r0, r0, lsl #24
    5554:	089c0100 	ldmeq	ip, {r8}
    5558:	13000004 	movwne	r0, #4
    555c:	00627570 	rsbeq	r7, r2, r0, ror r5
    5560:	01503a01 	cmpeq	r0, r1, lsl #20
    5564:	17000000 	strne	r0, [r0, -r0]
    5568:	3c140000 	ldccc	0, cr0, [r4], {-0}
    556c:	01000016 	tsteq	r0, r6, lsl r0
    5570:	0001ae3a 	andeq	sl, r1, sl, lsr lr
    5574:	00172c00 	andseq	r2, r7, r0, lsl #24
    5578:	16431500 	strbne	r1, [r3], -r0, lsl #10
    557c:	3c010000 	stccc	0, cr0, [r1], {-0}
    5580:	00000408 	andeq	r0, r0, r8, lsl #8
    5584:	7ea89103 	tanvce	f1, f3
    5588:	0001b916 	andeq	fp, r1, r6, lsl r9
    558c:	00000000 	andeq	r0, r0, r0
    5590:	0005c000 	andeq	ip, r5, r0
    5594:	3d3e0100 	ldfccs	f0, [lr, #-0]
    5598:	17000003 	strne	r0, [r0, -r3]
    559c:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    55a0:	00001758 	andeq	r1, r0, r8, asr r7
    55a4:	0001c517 	andeq	ip, r1, r7, lsl r5
    55a8:	00178400 	andseq	r8, r7, r0, lsl #8
    55ac:	05c01800 	strbeq	r1, [r0, #2048]	; 0x800
    55b0:	db190000 	blle	6455b8 <__Stack_Size+0x644db8>
    55b4:	03000001 	movweq	r0, #1
    55b8:	167ee891 			; <UNDEFINED> instruction: 0x167ee891
    55bc:	0000011e 	andeq	r0, r0, lr, lsl r1
    55c0:	00000000 	andeq	r0, r0, r0
    55c4:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    55c8:	02dc1901 	sbcseq	r1, ip, #16384	; 0x4000
    55cc:	2a170000 	bcs	5c55d4 <__Stack_Size+0x5c4dd4>
    55d0:	da000001 	ble	55dc <__Stack_Size+0x4ddc>
    55d4:	00000017 	andeq	r0, r0, r7, lsl r0
    55d8:	00013a16 	andeq	r3, r1, r6, lsl sl
    55dc:	00000000 	andeq	r0, r0, r0
    55e0:	00061000 	andeq	r1, r6, r0
    55e4:	f91c0100 			; <UNDEFINED> instruction: 0xf91c0100
    55e8:	17000002 	strne	r0, [r0, -r2]
    55ec:	00000146 	andeq	r0, r0, r6, asr #2
    55f0:	00001892 	muleq	r0, r2, r8
    55f4:	00001a00 	andeq	r1, r0, r0, lsl #20
    55f8:	0a040000 	beq	105600 <__Stack_Size+0x104e00>
    55fc:	03190000 	tsteq	r9, #0
    5600:	011b0000 	tsteq	fp, r0
    5604:	20080252 	andcs	r0, r8, r2, asr r2
    5608:	0251011b 	subseq	r0, r1, #-1073741818	; 0xc0000006
    560c:	011b0077 	tsteq	fp, r7, ror r0
    5610:	50740250 	rsbspl	r0, r4, r0, asr r2
    5614:	00001c00 	andeq	r1, r0, r0, lsl #24
    5618:	0a1f0000 	beq	7c5620 <__Stack_Size+0x7c4e20>
    561c:	011b0000 	tsteq	fp, r0
    5620:	40080253 	andmi	r0, r8, r3, asr r2
    5624:	0152011b 	cmpeq	r2, fp, lsl r1
    5628:	51011b30 	tstpl	r1, r0, lsr fp
    562c:	7ea89103 	tanvce	f1, f3
    5630:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    5634:	00005074 	andeq	r5, r0, r4, ror r0
    5638:	01e51d00 	mvneq	r1, r0, lsl #26
    563c:	00000000 	andeq	r0, r0, r0
    5640:	06300000 	ldrteq	r0, [r0], -r0
    5644:	3f010000 	svccc	0x00010000
    5648:	0001fa17 	andeq	pc, r1, r7, lsl sl	; <UNPREDICTABLE>
    564c:	0018cf00 	andseq	ip, r8, r0, lsl #30
    5650:	01f11700 	mvnseq	r1, r0, lsl #14
    5654:	18fe0000 	ldmne	lr!, {}^	; <UNPREDICTABLE>
    5658:	30180000 	andscc	r0, r8, r0
    565c:	19000006 	stmdbne	r0, {r1, r2}
    5660:	00000203 	andeq	r0, r0, r3, lsl #4
    5664:	7ee89103 	urdvce	f1, f3
    5668:	00020d1e 	andeq	r0, r2, lr, lsl sp
    566c:	00000000 	andeq	r0, r0, r0
    5670:	00001400 	andeq	r1, r0, r0, lsl #8
    5674:	ed370100 	ldfs	f0, [r7, #-0]
    5678:	17000003 	strne	r0, [r0, -r3]
    567c:	00000223 	andeq	r0, r0, r3, lsr #4
    5680:	0000191f 	andeq	r1, r0, pc, lsl r9
    5684:	00021817 	andeq	r1, r2, r7, lsl r8
    5688:	00195c00 	andseq	r5, r9, r0, lsl #24
    568c:	00001f00 	andeq	r1, r0, r0, lsl #30
    5690:	00140000 	andseq	r0, r4, r0
    5694:	2c190000 	ldccs	0, cr0, [r9], {-0}
    5698:	03000002 	movweq	r0, #2
    569c:	197de891 	ldmdbne	sp!, {r0, r4, r7, fp, sp, lr, pc}^
    56a0:	00000235 	andeq	r0, r0, r5, lsr r2
    56a4:	7e889103 	sinvce	f1, f3
    56a8:	0000001a 	andeq	r0, r0, sl, lsl r0
    56ac:	000a4500 	andeq	r4, sl, r0, lsl #10
    56b0:	0003ce00 	andeq	ip, r3, r0, lsl #28
    56b4:	52011b00 	andpl	r1, r1, #0, 22
    56b8:	7ee89103 	urdvce	f1, f3
    56bc:	0351011b 	cmpeq	r1, #-1073741818	; 0xc0000006
    56c0:	1b7e8891 	blne	1fa790c <__Stack_Size+0x1fa710c>
    56c4:	7d025001 	stcvc	0, cr5, [r2, #-4]
    56c8:	001c0000 	andseq	r0, ip, r0
    56cc:	60000000 	andvs	r0, r0, r0
    56d0:	1b00000a 	blne	5700 <__Stack_Size+0x4f00>
    56d4:	91035201 	tstls	r3, r1, lsl #4
    56d8:	011b7e88 	tsteq	fp, r8, lsl #29
    56dc:	007d0251 	rsbseq	r0, sp, r1, asr r2
    56e0:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    56e4:	00000076 	andeq	r0, r0, r6, ror r0
    56e8:	00001c00 	andeq	r1, r0, r0, lsl #24
    56ec:	0a7b0000 	beq	1ec56f4 <__Stack_Size+0x1ec4ef4>
    56f0:	011b0000 	tsteq	fp, r0
    56f4:	a8910352 	ldmge	r1, {r1, r4, r6, r8, r9}
    56f8:	50011b7e 	andpl	r1, r1, lr, ror fp
    56fc:	7ee89103 	urdvce	f1, f3
    5700:	00000000 	andeq	r0, r0, r0
    5704:	00008108 	andeq	r8, r0, r8, lsl #2
    5708:	00041800 	andeq	r1, r4, r0, lsl #16
    570c:	00a20900 	adceq	r0, r2, r0, lsl #18
    5710:	003f0000 	eorseq	r0, pc, r0
    5714:	00168a0a 	andseq	r8, r6, sl, lsl #20
    5718:	01690100 	cmneq	r9, r0, lsl #2
    571c:	0000045f 	andeq	r0, r0, pc, asr r4
    5720:	01007a0b 	tsteq	r0, fp, lsl #20
    5724:	00015069 	andeq	r5, r1, r9, rrx
    5728:	00720b00 	rsbseq	r0, r2, r0, lsl #22
    572c:	01ae6901 			; <UNDEFINED> instruction: 0x01ae6901
    5730:	610b0000 	mrsvs	r0, (UNDEF: 11)
    5734:	ae690100 	powgee	f0, f1, f0
    5738:	0b000001 	bleq	5744 <__Stack_Size+0x4f44>
    573c:	6a01006d 	bvs	458f8 <__Stack_Size+0x450f8>
    5740:	000001ae 	andeq	r0, r0, lr, lsr #3
    5744:	6e656c0b 	cdpvs	12, 6, cr6, cr5, cr11, {0}
    5748:	976a0100 	strbls	r0, [sl, -r0, lsl #2]!
    574c:	20000000 	andcs	r0, r0, r0
    5750:	000016e2 	andeq	r1, r0, r2, ror #13
    5754:	045f6c01 	ldrbeq	r6, [pc], #-3073	; 575c <__Stack_Size+0x4f5c>
    5758:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    575c:	00000081 	andeq	r0, r0, r1, lsl #1
    5760:	0000046f 	andeq	r0, r0, pc, ror #8
    5764:	0000a209 	andeq	sl, r0, r9, lsl #4
    5768:	21007f00 	tstcs	r0, r0, lsl #30
    576c:	00707075 	rsbseq	r7, r0, r5, ror r0
    5770:	00811f01 	addeq	r1, r1, r1, lsl #30
    5774:	b0010000 	andlt	r0, r1, r0
    5778:	0b000004 	bleq	5790 <__Stack_Size+0x4f90>
    577c:	1f010070 	svcne	0x00010070
    5780:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    5784:	00164c0d 	andseq	r4, r6, sp, lsl #24
    5788:	ae1f0100 	mufgee	f0, f7, f0
    578c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    5790:	21010078 	tstcs	r1, r8, ror r0
    5794:	000000e7 	andeq	r0, r0, r7, ror #1
    5798:	0100790e 	tsteq	r0, lr, lsl #18
    579c:	0000e722 	andeq	lr, r0, r2, lsr #14
    57a0:	6b6f0e00 	blvs	1bc8fa8 <__Stack_Size+0x1bc87a8>
    57a4:	81230100 	teqhi	r3, r0, lsl #2
    57a8:	00000000 	andeq	r0, r0, r0
    57ac:	00b2040c 	adcseq	r0, r2, ip, lsl #8
    57b0:	23220000 	teqcs	r2, #0
    57b4:	0100000d 	tsteq	r0, sp
    57b8:	0000818c 	andeq	r8, r0, ip, lsl #3
    57bc:	00213800 	eoreq	r3, r1, r0, lsl #16
    57c0:	00017c08 	andeq	r7, r1, r8, lsl #24
    57c4:	d39c0100 	orrsle	r0, ip, #0, 2
    57c8:	14000009 	strne	r0, [r0], #-9
    57cc:	00000d19 	andeq	r0, r0, r9, lsl sp
    57d0:	01ae8c01 			; <UNDEFINED> instruction: 0x01ae8c01
    57d4:	197d0000 	ldmdbne	sp!, {}^	; <UNPREDICTABLE>
    57d8:	70130000 	andsvc	r0, r3, r0
    57dc:	01006275 	tsteq	r0, r5, ror r2
    57e0:	0001ae8c 	andeq	sl, r1, ip, lsl #29
    57e4:	00199b00 	andseq	r9, r9, r0, lsl #22
    57e8:	168f1400 	strne	r1, [pc], r0, lsl #8
    57ec:	8d010000 	stchi	0, cr0, [r1, #-0]
    57f0:	000001ae 	andeq	r0, r0, lr, lsr #3
    57f4:	000019b9 			; <UNDEFINED> instruction: 0x000019b9
    57f8:	6e656c13 	mcrvs	12, 3, r6, cr5, cr3, {0}
    57fc:	978d0100 	strls	r0, [sp, r0, lsl #2]
    5800:	d7000000 	strle	r0, [r0, -r0]
    5804:	23000019 	movwcs	r0, #25
    5808:	8f010070 	svchi	0x00010070
    580c:	000000b2 	strheq	r0, [r0], -r2
    5810:	7de09103 	stfvcp	f1, [r0, #12]!
    5814:	01007123 	tsteq	r0, r3, lsr #2
    5818:	0000b290 	muleq	r0, r0, r2
    581c:	e0910300 	adds	r0, r1, r0, lsl #6
    5820:	686c237e 	stmdavs	ip!, {r1, r2, r3, r4, r5, r6, r8, r9, sp}^
    5824:	91010073 	tstls	r1, r3, ror r0
    5828:	000000e7 	andeq	r0, r0, r7, ror #1
    582c:	7cc09103 	stfvcp	f1, [r0], {3}
    5830:	73687223 	cmnvc	r8, #805306370	; 0x30000002
    5834:	e7920100 	ldr	r0, [r2, r0, lsl #2]
    5838:	03000000 	movweq	r0, #0
    583c:	237ce091 	cmncs	ip, #145	; 0x91
    5840:	9301007a 	movwls	r0, #4218	; 0x107a
    5844:	000000e7 	andeq	r0, r0, r7, ror #1
    5848:	7d809103 	stfvcd	f1, [r0, #12]
    584c:	006b6f24 	rsbeq	r6, fp, r4, lsr #30
    5850:	00819401 	addeq	r9, r1, r1, lsl #8
    5854:	19f50000 	ldmibne	r5!, {}^	; <UNPREDICTABLE>
    5858:	18160000 	ldmdane	r6, {}	; <UNPREDICTABLE>
    585c:	42000004 	andmi	r0, r0, #4
    5860:	50080021 	andpl	r0, r8, r1, lsr #32
    5864:	01000006 	tsteq	r0, r6
    5868:	00070697 	muleq	r7, r7, r6
    586c:	04481700 	strbeq	r1, [r8], #-1792	; 0x700
    5870:	1a360000 	bne	d85878 <__Stack_Size+0xd85078>
    5874:	3f170000 	svccc	0x00170000
    5878:	54000004 	strpl	r0, [r0], #-4
    587c:	1700001a 	smladne	r0, sl, r0, r0
    5880:	00000436 	andeq	r0, r0, r6, lsr r4
    5884:	00001a72 	andeq	r1, r0, r2, ror sl
    5888:	00042d17 	andeq	r2, r4, r7, lsl sp
    588c:	001a9000 	andseq	r9, sl, r0
    5890:	04241700 	strteq	r1, [r4], #-1792	; 0x700
    5894:	1aae0000 	bne	feb8589c <BootRAM+0xdaf603d>
    5898:	50180000 	andspl	r0, r8, r0
    589c:	19000006 	stmdbne	r0, {r1, r2}
    58a0:	00000453 	andeq	r0, r0, r3, asr r4
    58a4:	7ee09103 	urdvcs	f1, f3
    58a8:	0001561d 	andeq	r5, r1, sp, lsl r6
    58ac:	00216800 	eoreq	r6, r1, r0, lsl #16
    58b0:	00067008 	andeq	r7, r6, r8
    58b4:	25700100 	ldrbcs	r0, [r0, #-256]!	; 0x100
    58b8:	00000178 	andeq	r0, r0, r8, ror r1
    58bc:	018e2640 	orreq	r2, lr, r0, asr #12
    58c0:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    58c4:	00018326 	andeq	r8, r1, r6, lsr #6
    58c8:	17590100 	ldrbne	r0, [r9, -r0, lsl #2]
    58cc:	0000016d 	andeq	r0, r0, sp, ror #2
    58d0:	00001af6 	strdeq	r1, [r0], -r6
    58d4:	00016217 	andeq	r6, r1, r7, lsl r2
    58d8:	001c0600 	andseq	r0, ip, r0, lsl #12
    58dc:	06701800 	ldrbteq	r1, [r0], -r0, lsl #16
    58e0:	99190000 	ldmdbls	r9, {}	; <UNPREDICTABLE>
    58e4:	03000001 	movweq	r0, #1
    58e8:	167de091 			; <UNDEFINED> instruction: 0x167de091
    58ec:	0000011e 	andeq	r0, r0, lr, lsl r1
    58f0:	08002168 	stmdaeq	r0, {r3, r5, r6, r8, sp}
    58f4:	00000698 	muleq	r0, r8, r6
    58f8:	060c4801 	streq	r4, [ip], -r1, lsl #16
    58fc:	2a170000 	bcs	5c5904 <__Stack_Size+0x5c5104>
    5900:	4e000001 	cdpmi	0, 0, cr0, cr0, cr1, {0}
    5904:	0000001c 	andeq	r0, r0, ip, lsl r0
    5908:	0006c027 	andeq	ip, r6, r7, lsr #32
    590c:	00067100 	andeq	r7, r6, r0, lsl #2
    5910:	01a32800 			; <UNDEFINED> instruction: 0x01a32800
    5914:	1db60000 	ldcne	0, cr0, [r6]
    5918:	bc1a0000 	ldclt	0, cr0, [sl], {-0}
    591c:	96080021 	strls	r0, [r8], -r1, lsr #32
    5920:	3a00000a 	bcc	5950 <__Stack_Size+0x5150>
    5924:	1b000006 	blne	5944 <__Stack_Size+0x5144>
    5928:	91035101 	tstls	r3, r1, lsl #2
    592c:	011b7ee0 	tsteq	fp, r0, ror #29
    5930:	e0910350 	adds	r0, r1, r0, asr r3
    5934:	d81a007d 	ldmdale	sl, {r0, r2, r3, r4, r5, r6}
    5938:	96080021 	strls	r0, [r8], -r1, lsr #32
    593c:	4f00000a 	svcmi	0x0000000a
    5940:	1b000006 	blne	5960 <__Stack_Size+0x5160>
    5944:	91035001 	tstls	r3, r1
    5948:	1c007de0 	stcne	13, cr7, [r0], {224}	; 0xe0
    594c:	080021ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, sp}
    5950:	00000a04 	andeq	r0, r0, r4, lsl #20
    5954:	0352011b 	cmpeq	r2, #-1073741818	; 0xc0000006
    5958:	1b00c078 	blne	35b40 <__Stack_Size+0x35340>
    595c:	79055101 	stmdbvc	r5, {r0, r8, ip, lr}
    5960:	22007400 	andcs	r7, r0, #0, 8
    5964:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    5968:	007de091 			; <UNDEFINED> instruction: 0x007de091
    596c:	21f61a00 	mvnscs	r1, r0, lsl #20
    5970:	0aac0800 	beq	feb07978 <BootRAM+0xda78119>
    5974:	06920000 	ldreq	r0, [r2], r0
    5978:	011b0000 	tsteq	fp, r0
    597c:	00780252 	rsbseq	r0, r8, r2, asr r2
    5980:	0251011b 	subseq	r0, r1, #-1073741818	; 0xc0000006
    5984:	011b0079 	tsteq	fp, r9, ror r0
    5988:	a0910350 	addsge	r0, r1, r0, asr r3
    598c:	021a007f 	andseq	r0, sl, #127	; 0x7f
    5990:	04080022 	streq	r0, [r8], #-34	; 0x22
    5994:	b400000a 	strlt	r0, [r0], #-10
    5998:	1b000006 	blne	59b8 <__Stack_Size+0x51b8>
    599c:	78035201 	stmdavc	r3, {r0, r9, ip, lr}
    59a0:	011b00c0 	tsteq	fp, r0, asr #1
    59a4:	e0910351 	adds	r0, r1, r1, asr r3
    59a8:	50011b7e 	andpl	r1, r1, lr, ror fp
    59ac:	00507402 	subseq	r7, r0, r2, lsl #8
    59b0:	00220e1a 	eoreq	r0, r2, sl, lsl lr
    59b4:	000a1f08 	andeq	r1, sl, r8, lsl #30
    59b8:	0006db00 	andeq	sp, r6, r0, lsl #22
    59bc:	53011b00 	movwpl	r1, #6912	; 0x1b00
    59c0:	1b400802 	blne	10079d0 <__Stack_Size+0x10071d0>
    59c4:	30015201 	andcc	r5, r1, r1, lsl #4
    59c8:	0351011b 	cmpeq	r1, #-1073741818	; 0xc0000006
    59cc:	1b7ee091 	blne	1fbdc18 <__Stack_Size+0x1fbd418>
    59d0:	91035001 	tstls	r3, r1
    59d4:	1c007de0 	stcne	13, cr7, [r0], {224}	; 0xe0
    59d8:	0800221a 	stmdaeq	r0, {r1, r3, r4, r9, sp}
    59dc:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    59e0:	0553011b 	ldrbeq	r0, [r3, #-283]	; 0x11b
    59e4:	0074b003 	rsbseq	fp, r4, r3
    59e8:	52011b08 	andpl	r1, r1, #8, 22	; 0x2000
    59ec:	1b400802 	blne	10079fc <__Stack_Size+0x10071fc>
    59f0:	91035101 	tstls	r3, r1, lsl #2
    59f4:	011b7ee0 	tsteq	fp, r0, ror #29
    59f8:	80910350 	addshi	r0, r1, r0, asr r3
    59fc:	0000007d 	andeq	r0, r0, sp, ror r0
    5a00:	e51e0000 	ldr	r0, [lr, #-0]
    5a04:	1a000001 	bne	5a10 <__Stack_Size+0x5210>
    5a08:	20080022 	andcs	r0, r8, r2, lsr #32
    5a0c:	01000000 	mrseq	r0, (UNDEF: 0)
    5a10:	0007d99a 	muleq	r7, sl, r9
    5a14:	01fa1700 	mvnseq	r1, r0, lsl #14
    5a18:	1df90000 	ldclne	0, cr0, [r9]
    5a1c:	f1170000 			; <UNDEFINED> instruction: 0xf1170000
    5a20:	26000001 	strcs	r0, [r0], -r1
    5a24:	1f00001e 	svcne	0x0000001e
    5a28:	0800221a 	stmdaeq	r0, {r1, r3, r4, r9, sp}
    5a2c:	00000020 	andeq	r0, r0, r0, lsr #32
    5a30:	00020319 	andeq	r0, r2, r9, lsl r3
    5a34:	e0910300 	adds	r0, r1, r0, lsl #6
    5a38:	020d1e7e 	andeq	r1, sp, #2016	; 0x7e0
    5a3c:	22260000 	eorcs	r0, r6, #0
    5a40:	00140800 	andseq	r0, r4, r0, lsl #16
    5a44:	37010000 	strcc	r0, [r1, -r0]
    5a48:	000007c0 	andeq	r0, r0, r0, asr #15
    5a4c:	00022317 	andeq	r2, r2, r7, lsl r3
    5a50:	001e4700 	andseq	r4, lr, r0, lsl #14
    5a54:	02181700 	andseq	r1, r8, #0, 14
    5a58:	1eda0000 	cdpne	0, 13, cr0, cr10, cr0, {0}
    5a5c:	261f0000 	ldrcs	r0, [pc], -r0
    5a60:	14080022 	strne	r0, [r8], #-34	; 0x22
    5a64:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    5a68:	0000022c 	andeq	r0, r0, ip, lsr #4
    5a6c:	7dc09103 	stfvcp	f1, [r0, #12]
    5a70:	00023519 	andeq	r3, r2, r9, lsl r5
    5a74:	e0910300 	adds	r0, r1, r0, lsl #6
    5a78:	22301a7d 	eorscs	r1, r0, #512000	; 0x7d000
    5a7c:	0a450800 	beq	1147a84 <__Stack_Size+0x1147284>
    5a80:	07a00000 	streq	r0, [r0, r0]!
    5a84:	011b0000 	tsteq	fp, r0
    5a88:	e0910352 	adds	r0, r1, r2, asr r3
    5a8c:	51011b7e 	tstpl	r1, lr, ror fp
    5a90:	7de09103 	stfvcp	f1, [r0, #12]!
    5a94:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    5a98:	007dc091 			; <UNDEFINED> instruction: 0x007dc091
    5a9c:	00223a1c 	eoreq	r3, r2, ip, lsl sl
    5aa0:	000a6008 	andeq	r6, sl, r8
    5aa4:	52011b00 	andpl	r1, r1, #0, 22
    5aa8:	7de09103 	stfvcp	f1, [r0, #12]!
    5aac:	0351011b 	cmpeq	r1, #-1073741818	; 0xc0000006
    5ab0:	1b7dc091 	blne	1f75cfc <__Stack_Size+0x1f754fc>
    5ab4:	7d025001 	stcvc	0, cr5, [r2, #-4]
    5ab8:	00000000 	andeq	r0, r0, r0
    5abc:	0022261c 	eoreq	r2, r2, ip, lsl r6
    5ac0:	000a7b08 	andeq	r7, sl, r8, lsl #22
    5ac4:	52011b00 	andpl	r1, r1, #0, 22
    5ac8:	1b207602 	blne	8232d8 <__Stack_Size+0x822ad8>
    5acc:	91035001 	tstls	r3, r1
    5ad0:	00007ee0 	andeq	r7, r0, r0, ror #29
    5ad4:	046f1e00 	strbteq	r1, [pc], #-3584	; 5adc <__Stack_Size+0x52dc>
    5ad8:	223a0000 	eorscs	r0, sl, #0
    5adc:	00160800 	andseq	r0, r6, r0, lsl #16
    5ae0:	9d010000 	stcls	0, cr0, [r1, #-0]
    5ae4:	00000865 	andeq	r0, r0, r5, ror #16
    5ae8:	00048817 	andeq	r8, r4, r7, lsl r8
    5aec:	001efb00 	andseq	pc, lr, r0, lsl #22
    5af0:	047f1700 	ldrbteq	r1, [pc], #-1792	; 5af8 <__Stack_Size+0x52f8>
    5af4:	1f0e0000 	svcne	0x000e0000
    5af8:	3a1f0000 	bcc	7c5b00 <__Stack_Size+0x7c5300>
    5afc:	16080022 	strne	r0, [r8], -r2, lsr #32
    5b00:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    5b04:	00000493 	muleq	r0, r3, r4
    5b08:	7dc09103 	stfvcp	f1, [r0, #12]
    5b0c:	00049c19 	andeq	r9, r4, r9, lsl ip
    5b10:	e0910300 	adds	r0, r1, r0, lsl #6
    5b14:	04a5287e 	strteq	r2, [r5], #2174	; 0x87e
    5b18:	1f880000 	svcne	0x00880000
    5b1c:	441a0000 	ldrmi	r0, [sl], #-0
    5b20:	f0080022 			; <UNDEFINED> instruction: 0xf0080022
    5b24:	4400000a 	strmi	r0, [r0], #-10
    5b28:	1b000008 	blne	5b50 <__Stack_Size+0x5350>
    5b2c:	77025201 	strvc	r5, [r2, -r1, lsl #4]
    5b30:	51011b00 	tstpl	r1, r0, lsl #22
    5b34:	7ee09103 	urdvcs	f1, f3
    5b38:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    5b3c:	007dc091 			; <UNDEFINED> instruction: 0x007dc091
    5b40:	0022501c 	eoreq	r5, r2, ip, lsl r0
    5b44:	000b0f08 	andeq	r0, fp, r8, lsl #30
    5b48:	52011b00 	andpl	r1, r1, #0, 22
    5b4c:	7ee09103 	urdvcs	f1, f3
    5b50:	0351011b 	cmpeq	r1, #-1073741818	; 0xc0000006
    5b54:	1b7dc091 	blne	1f75da0 <__Stack_Size+0x1f755a0>
    5b58:	91035001 	tstls	r3, r1
    5b5c:	00007de0 	andeq	r7, r0, r0, ror #27
    5b60:	046f1e00 	strbteq	r1, [pc], #-3584	; 5b68 <__Stack_Size+0x5368>
    5b64:	225a0000 	subscs	r0, sl, #0
    5b68:	00160800 	andseq	r0, r6, r0, lsl #16
    5b6c:	9f010000 	svcls	0x00010000
    5b70:	000008f1 	strdeq	r0, [r0], -r1
    5b74:	00048817 	andeq	r8, r4, r7, lsl r8
    5b78:	001fa600 	andseq	sl, pc, r0, lsl #12
    5b7c:	047f1700 	ldrbteq	r1, [pc], #-1792	; 5b84 <__Stack_Size+0x5384>
    5b80:	1fb90000 	svcne	0x00b90000
    5b84:	5a1f0000 	bpl	7c5b8c <__Stack_Size+0x7c538c>
    5b88:	16080022 	strne	r0, [r8], -r2, lsr #32
    5b8c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    5b90:	00000493 	muleq	r0, r3, r4
    5b94:	7da09103 	stfvcd	f1, [r0, #12]!
    5b98:	00049c19 	andeq	r9, r4, r9, lsl ip
    5b9c:	c0910300 	addsgt	r0, r1, r0, lsl #6
    5ba0:	04a5287d 	strteq	r2, [r5], #2173	; 0x87d
    5ba4:	20010000 	andcs	r0, r1, r0
    5ba8:	641a0000 	ldrvs	r0, [sl], #-0
    5bac:	f0080022 			; <UNDEFINED> instruction: 0xf0080022
    5bb0:	d000000a 	andle	r0, r0, sl
    5bb4:	1b000008 	blne	5bdc <__Stack_Size+0x53dc>
    5bb8:	76025201 	strvc	r5, [r2], -r1, lsl #4
    5bbc:	51011b00 	tstpl	r1, r0, lsl #22
    5bc0:	7dc09103 	stfvcp	f1, [r0, #12]
    5bc4:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    5bc8:	007da091 			; <UNDEFINED> instruction: 0x007da091
    5bcc:	0022701c 	eoreq	r7, r2, ip, lsl r0
    5bd0:	000b0f08 	andeq	r0, fp, r8, lsl #30
    5bd4:	52011b00 	andpl	r1, r1, #0, 22
    5bd8:	7dc09103 	stfvcp	f1, [r0, #12]
    5bdc:	0351011b 	cmpeq	r1, #-1073741818	; 0xc0000006
    5be0:	1b7da091 	blne	1f6de2c <__Stack_Size+0x1f6d62c>
    5be4:	91035001 	tstls	r3, r1
    5be8:	00007ee0 	andeq	r7, r0, r0, ror #29
    5bec:	020d1e00 	andeq	r1, sp, #0, 28
    5bf0:	227a0000 	rsbscs	r0, sl, #0
    5bf4:	00140800 	andseq	r0, r4, r0, lsl #16
    5bf8:	a1010000 	mrsge	r0, (UNDEF: 1)
    5bfc:	00000975 	andeq	r0, r0, r5, ror r9
    5c00:	00022317 	andeq	r2, r2, r7, lsl r3
    5c04:	00201f00 	eoreq	r1, r0, r0, lsl #30
    5c08:	02181700 	andseq	r1, r8, #0, 14
    5c0c:	204e0000 	subcs	r0, lr, r0
    5c10:	7a1f0000 	bvc	7c5c18 <__Stack_Size+0x7c5418>
    5c14:	14080022 	strne	r0, [r8], #-34	; 0x22
    5c18:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    5c1c:	0000022c 	andeq	r0, r0, ip, lsr #4
    5c20:	7da09103 	stfvcd	f1, [r0, #12]!
    5c24:	00023519 	andeq	r3, r2, r9, lsl r5
    5c28:	c0910300 	addsgt	r0, r1, r0, lsl #6
    5c2c:	22841a7d 	addcs	r1, r4, #512000	; 0x7d000
    5c30:	0a450800 	beq	1147c38 <__Stack_Size+0x1147438>
    5c34:	09540000 	ldmdbeq	r4, {}^	; <UNPREDICTABLE>
    5c38:	011b0000 	tsteq	fp, r0
    5c3c:	e0910352 	adds	r0, r1, r2, asr r3
    5c40:	51011b7d 	tstpl	r1, sp, ror fp
    5c44:	7dc09103 	stfvcp	f1, [r0, #12]
    5c48:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    5c4c:	007da091 			; <UNDEFINED> instruction: 0x007da091
    5c50:	00228e1c 	eoreq	r8, r2, ip, lsl lr
    5c54:	000a6008 	andeq	r6, sl, r8
    5c58:	52011b00 	andpl	r1, r1, #0, 22
    5c5c:	7dc09103 	stfvcp	f1, [r0, #12]
    5c60:	0351011b 	cmpeq	r1, #-1073741818	; 0xc0000006
    5c64:	1b7da091 	blne	1f6deb0 <__Stack_Size+0x1f6d6b0>
    5c68:	91035001 	tstls	r3, r1
    5c6c:	00007ce0 	andeq	r7, r0, r0, ror #25
    5c70:	225a1a00 	subscs	r1, sl, #0, 20
    5c74:	0a7b0800 	beq	1ec7c7c <__Stack_Size+0x1ec747c>
    5c78:	09980000 	ldmibeq	r8, {}	; <UNPREDICTABLE>
    5c7c:	011b0000 	tsteq	fp, r0
    5c80:	80910352 	addshi	r0, r1, r2, asr r3
    5c84:	51011b7d 	tstpl	r1, sp, ror fp
    5c88:	7de09103 	stfvcp	f1, [r0, #12]!
    5c8c:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    5c90:	007de091 			; <UNDEFINED> instruction: 0x007de091
    5c94:	00227a1a 	eoreq	r7, r2, sl, lsl sl
    5c98:	000b2a08 	andeq	r2, fp, r8, lsl #20
    5c9c:	0009bb00 	andeq	fp, r9, r0, lsl #22
    5ca0:	52011b00 	andpl	r1, r1, #0, 22
    5ca4:	7ee09103 	urdvcs	f1, f3
    5ca8:	0351011b 	cmpeq	r1, #-1073741818	; 0xc0000006
    5cac:	1b7de091 	blne	1f7def8 <__Stack_Size+0x1f7d6f8>
    5cb0:	91035001 	tstls	r3, r1
    5cb4:	1c007de0 	stcne	13, cr7, [r0], {224}	; 0xe0
    5cb8:	08002296 	stmdaeq	r0, {r1, r2, r4, r7, r9, sp}
    5cbc:	00000b45 	andeq	r0, r0, r5, asr #22
    5cc0:	0351011b 	cmpeq	r1, #-1073741818	; 0xc0000006
    5cc4:	1b7ce091 	blne	1f3df10 <__Stack_Size+0x1f3d710>
    5cc8:	7d025001 	stcvc	0, cr5, [r2, #-4]
    5ccc:	15000000 	strne	r0, [r0, #-0]
    5cd0:	0000166a 	andeq	r1, r0, sl, ror #12
    5cd4:	09e40e01 	stmibeq	r4!, {r0, r9, sl, fp}^
    5cd8:	03050000 	movweq	r0, #20480	; 0x5000
    5cdc:	080074b0 	stmdaeq	r0, {r4, r5, r7, sl, ip, sp, lr}
    5ce0:	0000e710 	andeq	lr, r0, r0, lsl r7
    5ce4:	15a52900 	strne	r2, [r5, #2304]!	; 0x900
    5ce8:	27030000 	strcs	r0, [r3, -r0]
    5cec:	00000245 	andeq	r0, r0, r5, asr #4
    5cf0:	00160a29 	andseq	r0, r6, r9, lsr #20
    5cf4:	ff190200 			; <UNDEFINED> instruction: 0xff190200
    5cf8:	10000009 	andne	r0, r0, r9
    5cfc:	000000f7 	strdeq	r0, [r0], -r7
    5d00:	0015d32a 	andseq	sp, r5, sl, lsr #6
    5d04:	1f2b0200 	svcne	0x002b0200
    5d08:	2b00000a 	blcs	5d38 <__Stack_Size+0x5538>
    5d0c:	00000134 	andeq	r0, r0, r4, lsr r1
    5d10:	0001ae2b 	andeq	sl, r1, fp, lsr #28
    5d14:	00972b00 	addseq	r2, r7, r0, lsl #22
    5d18:	2a000000 	bcs	5d20 <__Stack_Size+0x5520>
    5d1c:	0000161f 	andeq	r1, r0, pc, lsl r6
    5d20:	0a3f3102 	beq	fd2130 <__Stack_Size+0xfd1930>
    5d24:	3f2b0000 	svccc	0x002b0000
    5d28:	2b00000a 	blcs	5d58 <__Stack_Size+0x5558>
    5d2c:	00000150 	andeq	r0, r0, r0, asr r1
    5d30:	00007a2b 	andeq	r7, r0, fp, lsr #20
    5d34:	007a2b00 	rsbseq	r2, sl, r0, lsl #22
    5d38:	0c000000 	stceq	0, cr0, [r0], {-0}
    5d3c:	0009ff04 	andeq	pc, r9, r4, lsl #30
    5d40:	15522a00 	ldrbne	r2, [r2, #-2560]	; 0xa00
    5d44:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    5d48:	00000a60 	andeq	r0, r0, r0, ror #20
    5d4c:	0001502b 	andeq	r5, r1, fp, lsr #32
    5d50:	01502b00 	cmpeq	r0, r0, lsl #22
    5d54:	3f2b0000 	svccc	0x002b0000
    5d58:	00000002 	andeq	r0, r0, r2
    5d5c:	0014e52a 	andseq	lr, r4, sl, lsr #10
    5d60:	7b370300 	blvc	dc6968 <__Stack_Size+0xdc6168>
    5d64:	2b00000a 	blcs	5d94 <__Stack_Size+0x5594>
    5d68:	00000150 	andeq	r0, r0, r0, asr r1
    5d6c:	0001ae2b 	andeq	sl, r1, fp, lsr #28
    5d70:	01ae2b00 			; <UNDEFINED> instruction: 0x01ae2b00
    5d74:	2a000000 	bcs	5d7c <__Stack_Size+0x557c>
    5d78:	00001538 	andeq	r1, r0, r8, lsr r5
    5d7c:	0a964f03 	beq	fe599990 <BootRAM+0xd50a131>
    5d80:	b02b0000 	eorlt	r0, fp, r0
    5d84:	2b000004 	blcs	5d9c <__Stack_Size+0x559c>
    5d88:	0000023f 	andeq	r0, r0, pc, lsr r2
    5d8c:	0001ae2b 	andeq	sl, r1, fp, lsr #28
    5d90:	db2a0000 	blle	a85d98 <__Stack_Size+0xa85598>
    5d94:	02000016 	andeq	r0, r0, #22
    5d98:	000aac24 	andeq	sl, sl, r4, lsr #24
    5d9c:	01342b00 	teqeq	r4, r0, lsl #22
    5da0:	ae2b0000 	cdpge	0, 2, cr0, cr11, cr0, {0}
    5da4:	00000001 	andeq	r0, r0, r1
    5da8:	0014de2c 	andseq	sp, r4, ip, lsr #28
    5dac:	0000a900 	andeq	sl, r0, r0, lsl #18
    5db0:	000ac900 	andeq	ip, sl, r0, lsl #18
    5db4:	00a92b00 	adceq	r2, r9, r0, lsl #22
    5db8:	c92b0000 	stmdbgt	fp!, {}	; <UNPREDICTABLE>
    5dbc:	2b00000a 	blcs	5dec <__Stack_Size+0x55ec>
    5dc0:	000000a2 	andeq	r0, r0, r2, lsr #1
    5dc4:	cf040c00 	svcgt	0x00040c00
    5dc8:	2d00000a 	stccs	0, cr0, [r0, #-40]	; 0xffffffd8
    5dcc:	0016782a 	andseq	r7, r6, sl, lsr #16
    5dd0:	f0210700 			; <UNDEFINED> instruction: 0xf0210700
    5dd4:	2b00000a 	blcs	5e04 <__Stack_Size+0x5604>
    5dd8:	00000150 	andeq	r0, r0, r0, asr r1
    5ddc:	0001ae2b 	andeq	sl, r1, fp, lsr #28
    5de0:	00972b00 	addseq	r2, r7, r0, lsl #22
    5de4:	ae2b0000 	cdpge	0, 2, cr0, cr11, cr0, {0}
    5de8:	00000001 	andeq	r0, r0, r1
    5dec:	0015052e 	andseq	r0, r5, lr, lsr #10
    5df0:	81380300 	teqhi	r8, r0, lsl #6
    5df4:	0f000000 	svceq	0x00000000
    5df8:	2b00000b 	blcs	5e2c <__Stack_Size+0x562c>
    5dfc:	00000150 	andeq	r0, r0, r0, asr r1
    5e00:	0001502b 	andeq	r5, r1, fp, lsr #32
    5e04:	01ae2b00 			; <UNDEFINED> instruction: 0x01ae2b00
    5e08:	2a000000 	bcs	5e10 <__Stack_Size+0x5610>
    5e0c:	00001518 	andeq	r1, r0, r8, lsl r5
    5e10:	0b2a2b03 	bleq	a90a24 <__Stack_Size+0xa90224>
    5e14:	b02b0000 	eorlt	r0, fp, r0
    5e18:	2b000004 	blcs	5e30 <__Stack_Size+0x5630>
    5e1c:	000001ae 	andeq	r0, r0, lr, lsr #3
    5e20:	0001ae2b 	andeq	sl, r1, fp, lsr #28
    5e24:	f92a0000 			; <UNDEFINED> instruction: 0xf92a0000
    5e28:	03000014 	movweq	r0, #20
    5e2c:	000b454c 	andeq	r4, fp, ip, asr #10
    5e30:	04b02b00 	ldrteq	r2, [r0], #2816	; 0xb00
    5e34:	3f2b0000 	svccc	0x002b0000
    5e38:	2b000002 	blcs	5e48 <__Stack_Size+0x5648>
    5e3c:	0000023f 	andeq	r0, r0, pc, lsr r2
    5e40:	14ce2f00 	strbne	r2, [lr], #3840	; 0xf00
    5e44:	2d080000 	stccs	0, cr0, [r8, #-0]
    5e48:	00000081 	andeq	r0, r0, r1, lsl #1
    5e4c:	0001ae2b 	andeq	sl, r1, fp, lsr #28
    5e50:	01ae2b00 			; <UNDEFINED> instruction: 0x01ae2b00
    5e54:	00000000 	andeq	r0, r0, r0
    5e58:	00000fa3 	andeq	r0, r0, r3, lsr #31
    5e5c:	16550004 	ldrbne	r0, [r5], -r4
    5e60:	01040000 	mrseq	r0, (UNDEF: 4)
    5e64:	000006c0 	andeq	r0, r0, r0, asr #13
    5e68:	0016fc01 	andseq	pc, r6, r1, lsl #24
    5e6c:	00089300 	andeq	r9, r8, r0, lsl #6
    5e70:	00083000 	andeq	r3, r8, r0
    5e74:	00000000 	andeq	r0, r0, r0
    5e78:	0018ce00 	andseq	ip, r8, r0, lsl #28
    5e7c:	06010200 	streq	r0, [r1], -r0, lsl #4
    5e80:	0000081a 	andeq	r0, r0, sl, lsl r8
    5e84:	000fc903 	andeq	ip, pc, r3, lsl #18
    5e88:	371c0300 	ldrcc	r0, [ip, -r0, lsl #6]
    5e8c:	02000000 	andeq	r0, r0, #0
    5e90:	08180801 	ldmdaeq	r8, {r0, fp}
    5e94:	02020000 	andeq	r0, r2, #0
    5e98:	00065e05 	andeq	r5, r6, r5, lsl #28
    5e9c:	0cf50300 	ldcleq	3, cr0, [r5]
    5ea0:	26030000 	strcs	r0, [r3], -r0
    5ea4:	00000050 	andeq	r0, r0, r0, asr r0
    5ea8:	49070202 	stmdbmi	r7, {r1, r9}
    5eac:	02000009 	andeq	r0, r0, #9
    5eb0:	04da0504 	ldrbeq	r0, [sl], #1284	; 0x504
    5eb4:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
    5eb8:	03000010 	movweq	r0, #16
    5ebc:	00006938 	andeq	r6, r0, r8, lsr r9
    5ec0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5ec4:	00000252 	andeq	r0, r0, r2, asr r2
    5ec8:	d5050802 	strle	r0, [r5, #-2050]	; 0x802
    5ecc:	02000004 	andeq	r0, r0, #4
    5ed0:	024d0708 	subeq	r0, sp, #8, 14	; 0x200000
    5ed4:	04040000 	streq	r0, [r4], #-0
    5ed8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    5edc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5ee0:	00000257 	andeq	r0, r0, r7, asr r2
    5ee4:	000fcb03 	andeq	ip, pc, r3, lsl #22
    5ee8:	2c2a0400 	cfstrscs	mvf0, [sl], #-0
    5eec:	03000000 	movweq	r0, #0
    5ef0:	00000cf7 	strdeq	r0, [r0], -r7
    5ef4:	00453604 	subeq	r3, r5, r4, lsl #12
    5ef8:	7a030000 	bvc	c5f00 <__Stack_Size+0xc5700>
    5efc:	04000010 	streq	r0, [r0], #-16
    5f00:	00005e42 	andeq	r5, r0, r2, asr #28
    5f04:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5f08:	0000078b 	andeq	r0, r0, fp, lsl #15
    5f0c:	01020405 	tsteq	r2, r5, lsl #8
    5f10:	00082108 	andeq	r2, r8, r8, lsl #2
    5f14:	14a90600 	strtne	r0, [r9], #1536	; 0x600
    5f18:	4b010000 	blmi	45f20 <__Stack_Size+0x45720>
    5f1c:	00010a01 	andeq	r0, r1, r1, lsl #20
    5f20:	73640700 	cmnvc	r4, #0, 14
    5f24:	4b010074 	blmi	460fc <__Stack_Size+0x458fc>
    5f28:	0000010a 	andeq	r0, r0, sl, lsl #2
    5f2c:	0016ef08 	andseq	lr, r6, r8, lsl #30
    5f30:	104c0100 	subne	r0, ip, r0, lsl #2
    5f34:	07000001 	streq	r0, [r0, -r1]
    5f38:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    5f3c:	01104c01 	tsteq	r0, r1, lsl #24
    5f40:	21080000 	mrscs	r0, (UNDEF: 8)
    5f44:	01000017 	tsteq	r0, r7, lsl r0
    5f48:	00008c4d 	andeq	r8, r0, sp, asr #24
    5f4c:	0c7a0900 	ldcleq	9, cr0, [sl], #-0
    5f50:	4f010000 	svcmi	0x00010000
    5f54:	00000116 	andeq	r0, r0, r6, lsl r1
    5f58:	0100690a 	tsteq	r0, sl, lsl #18
    5f5c:	00007e50 	andeq	r7, r0, r0, asr lr
    5f60:	040b0000 	streq	r0, [fp], #-0
    5f64:	0000008c 	andeq	r0, r0, ip, lsl #1
    5f68:	0116040b 	tsteq	r6, fp, lsl #8
    5f6c:	8c0c0000 	stchi	0, cr0, [ip], {-0}
    5f70:	0d000000 	stceq	0, cr0, [r0, #-0]
    5f74:	0000140a 	andeq	r1, r0, sl, lsl #8
    5f78:	3a032202 	bcc	ce788 <__Stack_Size+0xcdf88>
    5f7c:	07000001 	streq	r0, [r0, -r1]
    5f80:	22020078 	andcs	r0, r2, #120	; 0x78
    5f84:	0000010a 	andeq	r0, r0, sl, lsl #2
    5f88:	02006107 	andeq	r6, r0, #-1073741823	; 0xc0000001
    5f8c:	00011022 	andeq	r1, r1, r2, lsr #32
    5f90:	46060000 	strmi	r0, [r6], -r0
    5f94:	01000015 	tsteq	r0, r5, lsl r0
    5f98:	0162010c 	cmneq	r2, ip, lsl #2
    5f9c:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
    5fa0:	0a0c0100 	beq	3063a8 <__Stack_Size+0x305ba8>
    5fa4:	07000001 	streq	r0, [r0, -r1]
    5fa8:	0c010063 	stceq	0, cr0, [r1], {99}	; 0x63
    5fac:	000000a2 	andeq	r0, r0, r2, lsr #1
    5fb0:	0100690a 	tsteq	r0, sl, lsl #18
    5fb4:	00007e0e 	andeq	r7, r0, lr, lsl #28
    5fb8:	3a0e0000 	bcc	385fc0 <__Stack_Size+0x3857c0>
    5fbc:	b4000001 	strlt	r0, [r0], #-1
    5fc0:	1e080022 	cdpne	0, 0, cr0, cr8, cr2, {1}
    5fc4:	01000000 	mrseq	r0, (UNDEF: 0)
    5fc8:	0001ae9c 	muleq	r1, ip, lr
    5fcc:	01460f00 	cmpeq	r6, r0, lsl #30
    5fd0:	20960000 	addscs	r0, r6, r0
    5fd4:	4f0f0000 	svcmi	0x000f0000
    5fd8:	c4000001 	strgt	r0, [r0], #-1
    5fdc:	10000020 	andne	r0, r0, r0, lsr #32
    5fe0:	00000158 	andeq	r0, r0, r8, asr r1
    5fe4:	00002116 	andeq	r2, r0, r6, lsl r1
    5fe8:	0022d211 	eoreq	sp, r2, r1, lsl r2
    5fec:	000f8d08 	andeq	r8, pc, r8, lsl #26
    5ff0:	52011200 	andpl	r1, r1, #0, 4
    5ff4:	01124c01 	tsteq	r2, r1, lsl #24
    5ff8:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    5ffc:	f3055001 	vhadd.u8	d5, d5, d1
    6000:	04235001 	strteq	r5, [r3], #-1
    6004:	6e130000 	cdpvs	0, 1, cr0, cr3, cr0, {0}
    6008:	01000014 	tsteq	r0, r4, lsl r0
    600c:	0022d419 	eoreq	sp, r2, r9, lsl r4
    6010:	00006e08 	andeq	r6, r0, r8, lsl #28
    6014:	3d9c0100 	ldfccs	f0, [ip]
    6018:	14000002 	strne	r0, [r0], #-2
    601c:	19010078 	stmdbne	r1, {r3, r4, r5, r6}
    6020:	0000010a 	andeq	r0, r0, sl, lsl #2
    6024:	2b155001 	blcs	55a030 <__Stack_Size+0x559830>
    6028:	01000017 	tsteq	r0, r7, lsl r0
    602c:	00023d1b 	andeq	r3, r2, fp, lsl sp
    6030:	58910200 	ldmpl	r1, {r9}
    6034:	01006316 	tsteq	r0, r6, lsl r3
    6038:	0000971c 	andeq	r9, r0, ip, lsl r7
    603c:	00214e00 	eoreq	r4, r1, r0, lsl #28
    6040:	00691600 	rsbeq	r1, r9, r0, lsl #12
    6044:	007e1d01 	rsbseq	r1, lr, r1, lsl #26
    6048:	216c0000 	cmncs	ip, r0
    604c:	bd170000 	ldclt	0, cr0, [r7, #-0]
    6050:	14000000 	strne	r0, [r0], #-0
    6054:	f0080023 			; <UNDEFINED> instruction: 0xf0080023
    6058:	01000006 	tsteq	r0, r6
    605c:	00ea0f39 	rsceq	r0, sl, r9, lsr pc
    6060:	21ba0000 			; <UNDEFINED> instruction: 0x21ba0000
    6064:	df180000 	svcle	0x00180000
    6068:	01000000 	mrseq	r0, (UNDEF: 0)
    606c:	00d40f50 	sbcseq	r0, r4, r0, asr pc
    6070:	21d10000 	bicscs	r0, r1, r0
    6074:	c9180000 	ldmdbgt	r8, {}	; <UNPREDICTABLE>
    6078:	01000000 	mrseq	r0, (UNDEF: 0)
    607c:	06f01950 	usateq	r1, #16, r0, asr #18
    6080:	f5100000 			; <UNDEFINED> instruction: 0xf5100000
    6084:	f1000000 	cps	#0
    6088:	1a000021 	bne	6114 <__Stack_Size+0x5914>
    608c:	00000100 	andeq	r0, r0, r0, lsl #2
    6090:	00005301 	andeq	r5, r0, r1, lsl #6
    6094:	008c1b00 	addeq	r1, ip, r0, lsl #22
    6098:	024d0000 	subeq	r0, sp, #0
    609c:	ad1c0000 	ldcge	0, cr0, [ip, #-0]
    60a0:	1f000000 	svcne	0x00000000
    60a4:	14ce1d00 	strbne	r1, [lr], #3328	; 0xd00
    60a8:	3c010000 	stccc	0, cr0, [r1], {-0}
    60ac:	0000008c 	andeq	r0, r0, ip, lsl #1
    60b0:	08002344 	stmdaeq	r0, {r2, r6, r8, r9, sp}
    60b4:	0000009a 	muleq	r0, sl, r0
    60b8:	029d9c01 	addseq	r9, sp, #256	; 0x100
    60bc:	781e0000 	ldmdavc	lr, {}	; <UNPREDICTABLE>
    60c0:	103c0100 	eorsne	r0, ip, r0, lsl #2
    60c4:	04000001 	streq	r0, [r0], #-1
    60c8:	1e000022 	cdpne	0, 0, cr0, cr0, cr2, {1}
    60cc:	3c010079 	stccc	0, cr0, [r1], {121}	; 0x79
    60d0:	00000110 	andeq	r0, r0, r0, lsl r1
    60d4:	00002230 	andeq	r2, r0, r0, lsr r2
    60d8:	6d757316 	ldclvs	3, cr7, [r5, #-88]!	; 0xffffffa8
    60dc:	8c3e0100 	ldfhis	f0, [lr], #-0
    60e0:	5c000000 	stcpl	0, cr0, [r0], {-0}
    60e4:	16000022 	strne	r0, [r0], -r2, lsr #32
    60e8:	3f010069 	svccc	0x00010069
    60ec:	0000007e 	andeq	r0, r0, lr, ror r0
    60f0:	000022a4 	andeq	r2, r0, r4, lsr #5
    60f4:	00bd0e00 	adcseq	r0, sp, r0, lsl #28
    60f8:	23e00000 	mvncs	r0, #0
    60fc:	00c20800 	sbceq	r0, r2, r0, lsl #16
    6100:	9c010000 	stcls	0, cr0, [r1], {-0}
    6104:	000002e5 	andeq	r0, r0, r5, ror #5
    6108:	0000c918 	andeq	ip, r0, r8, lsl r9
    610c:	0f500100 	svceq	0x00500100
    6110:	000000d4 	ldrdeq	r0, [r0], -r4
    6114:	000022e7 	andeq	r2, r0, r7, ror #5
    6118:	0000df0f 	andeq	sp, r0, pc, lsl #30
    611c:	00231300 	eoreq	r1, r3, r0, lsl #6
    6120:	00ea0f00 	rsceq	r0, sl, r0, lsl #30
    6124:	233f0000 	teqcs	pc, #0
    6128:	f5100000 			; <UNDEFINED> instruction: 0xf5100000
    612c:	60000000 	andvs	r0, r0, r0
    6130:	10000023 	andne	r0, r0, r3, lsr #32
    6134:	00000100 	andeq	r0, r0, r0, lsl #2
    6138:	00002389 	andeq	r2, r0, r9, lsl #7
    613c:	14241300 	strtne	r1, [r4], #-768	; 0x300
    6140:	56010000 	strpl	r0, [r1], -r0
    6144:	080024a4 	stmdaeq	r0, {r2, r5, r7, sl, sp}
    6148:	00000046 	andeq	r0, r0, r6, asr #32
    614c:	033a9c01 	teqeq	sl, #256	; 0x100
    6150:	72140000 	andsvc	r0, r4, #0
    6154:	0a560100 	beq	158655c <__Stack_Size+0x1585d5c>
    6158:	01000001 	tsteq	r0, r1
    615c:	00611e50 	rsbeq	r1, r1, r0, asr lr
    6160:	01105601 	tsteq	r0, r1, lsl #12
    6164:	23b40000 			; <UNDEFINED> instruction: 0x23b40000
    6168:	621e0000 	andsvs	r0, lr, #0
    616c:	10560100 	subsne	r0, r6, r0, lsl #2
    6170:	d5000001 	strle	r0, [r0, #-1]
    6174:	16000023 	strne	r0, [r0], -r3, lsr #32
    6178:	58010063 	stmdapl	r1, {r0, r1, r5, r6}
    617c:	00000097 	muleq	r0, r7, r0
    6180:	000023f6 	strdeq	r2, [r0], -r6
    6184:	01006916 	tsteq	r0, r6, lsl r9
    6188:	00007e59 	andeq	r7, r0, r9, asr lr
    618c:	00243a00 	eoreq	r3, r4, r0, lsl #20
    6190:	5e060000 	cdppl	0, 0, cr0, cr6, cr0, {0}
    6194:	01000014 	tsteq	r0, r4, lsl r0
    6198:	0374016d 	cmneq	r4, #1073741851	; 0x4000001b
    619c:	72070000 	andvc	r0, r7, #0
    61a0:	0a6d0100 	beq	1b465a8 <__Stack_Size+0x1b45da8>
    61a4:	07000001 	streq	r0, [r0, -r1]
    61a8:	6d010061 	stcvs	0, cr0, [r1, #-388]	; 0xfffffe7c
    61ac:	00000110 	andeq	r0, r0, r0, lsl r1
    61b0:	01006207 	tsteq	r0, r7, lsl #4
    61b4:	0001106d 	andeq	r1, r1, sp, rrx
    61b8:	00630a00 	rsbeq	r0, r3, r0, lsl #20
    61bc:	00a26f01 	adceq	r6, r2, r1, lsl #30
    61c0:	690a0000 	stmdbvs	sl, {}	; <UNPREDICTABLE>
    61c4:	7e700100 	rpwvcs	f0, f0, f0
    61c8:	00000000 	andeq	r0, r0, r0
    61cc:	00033a0e 	andeq	r3, r3, lr, lsl #20
    61d0:	0024ec00 	eoreq	lr, r4, r0, lsl #24
    61d4:	00004c08 	andeq	r4, r0, r8, lsl #24
    61d8:	b39c0100 	orrslt	r0, ip, #0, 2
    61dc:	18000003 	stmdane	r0, {r0, r1}
    61e0:	00000346 	andeq	r0, r0, r6, asr #6
    61e4:	4f0f5001 	svcmi	0x000f5001
    61e8:	88000003 	stmdahi	r0, {r0, r1}
    61ec:	0f000024 	svceq	0x00000024
    61f0:	00000358 	andeq	r0, r0, r8, asr r3
    61f4:	000024a9 	andeq	r2, r0, r9, lsr #9
    61f8:	00036110 	andeq	r6, r3, r0, lsl r1
    61fc:	0024ca00 	eoreq	ip, r4, r0, lsl #20
    6200:	036a1000 	cmneq	sl, #0
    6204:	24f50000 	ldrbtcs	r0, [r5], #0
    6208:	13000000 	movwne	r0, #0
    620c:	00001580 	andeq	r1, r0, r0, lsl #11
    6210:	25388501 	ldrcs	r8, [r8, #-1281]!	; 0x501
    6214:	00460800 	subeq	r0, r6, r0, lsl #16
    6218:	9c010000 	stcls	0, cr0, [r1], {-0}
    621c:	000003fb 	strdeq	r0, [r0], -fp
    6220:	01007214 	tsteq	r0, r4, lsl r2
    6224:	00010a85 	andeq	r0, r1, r5, lsl #21
    6228:	1e500100 	rdfnes	f0, f0, f0
    622c:	85010061 	strhi	r0, [r1, #-97]	; 0x61
    6230:	00000110 	andeq	r0, r0, r0, lsl r1
    6234:	0000254f 	andeq	r2, r0, pc, asr #10
    6238:	01006316 	tsteq	r0, r6, lsl r3
    623c:	0000a287 	andeq	sl, r0, r7, lsl #5
    6240:	00257000 	eoreq	r7, r5, r0
    6244:	00691600 	rsbeq	r1, r9, r0, lsl #12
    6248:	007e8801 	rsbseq	r8, lr, r1, lsl #16
    624c:	259b0000 	ldrcs	r0, [fp]
    6250:	06000000 	streq	r0, [r0], -r0
    6254:	0000147f 	andeq	r1, r0, pc, ror r4
    6258:	40019d01 	andmi	r9, r1, r1, lsl #26
    625c:	07000004 	streq	r0, [r0, -r4]
    6260:	9d010072 	stcls	0, cr0, [r1, #-456]	; 0xfffffe38
    6264:	0000010a 	andeq	r0, r0, sl, lsl #2
    6268:	01006107 	tsteq	r0, r7, lsl #2
    626c:	0001109d 	muleq	r1, sp, r0
    6270:	00620700 	rsbeq	r0, r2, r0, lsl #14
    6274:	01109d01 	tsteq	r0, r1, lsl #26
    6278:	630a0000 	movwvs	r0, #40960	; 0xa000
    627c:	a29f0100 	addsge	r0, pc, #0, 2
    6280:	0a000000 	beq	6288 <__Stack_Size+0x5a88>
    6284:	a0010069 	andge	r0, r1, r9, rrx
    6288:	0000007e 	andeq	r0, r0, lr, ror r0
    628c:	006a0a1f 	rsbeq	r0, sl, pc, lsl sl
    6290:	007ea301 	rsbseq	sl, lr, r1, lsl #6
    6294:	00000000 	andeq	r0, r0, r0
    6298:	0003fb0e 	andeq	pc, r3, lr, lsl #22
    629c:	00258000 	eoreq	r8, r5, r0
    62a0:	00008808 	andeq	r8, r0, r8, lsl #16
    62a4:	929c0100 	addsls	r0, ip, #0, 2
    62a8:	18000004 	stmdane	r0, {r2}
    62ac:	00000407 	andeq	r0, r0, r7, lsl #8
    62b0:	100f5001 	andne	r5, pc, r1
    62b4:	f5000004 			; <UNDEFINED> instruction: 0xf5000004
    62b8:	0f000025 	svceq	0x00000025
    62bc:	00000419 	andeq	r0, r0, r9, lsl r4
    62c0:	00002616 	andeq	r2, r0, r6, lsl r6
    62c4:	00042210 	andeq	r2, r4, r0, lsl r2
    62c8:	00263700 	eoreq	r3, r6, r0, lsl #14
    62cc:	042b1000 	strteq	r1, [fp], #-0
    62d0:	26610000 	strbtcs	r0, [r1], -r0
    62d4:	8a200000 	bhi	8062dc <__Stack_Size+0x805adc>
    62d8:	4a080025 	bmi	206374 <__Stack_Size+0x205b74>
    62dc:	10000000 	andne	r0, r0, r0
    62e0:	00000435 	andeq	r0, r0, r5, lsr r4
    62e4:	000026af 	andeq	r2, r0, pc, lsr #13
    62e8:	16130000 	ldrne	r0, [r3], -r0
    62ec:	01000017 	tsteq	r0, r7, lsl r0
    62f0:	000000ba 	strheq	r0, [r0], -sl
    62f4:	0000b800 	andeq	fp, r0, r0, lsl #16
    62f8:	599c0100 	ldmibpl	ip, {r8}
    62fc:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    6300:	ba010072 	blt	464d0 <__Stack_Size+0x45cd0>
    6304:	0000010a 	andeq	r0, r0, sl, lsl #2
    6308:	000026fe 	strdeq	r2, [r0], -lr
    630c:	0100611e 	tsteq	r0, lr, lsl r1
    6310:	000110ba 	strheq	r1, [r1], -sl
    6314:	00272a00 	eoreq	r2, r7, r0, lsl #20
    6318:	00621e00 	rsbeq	r1, r2, r0, lsl #28
    631c:	0110ba01 	tsteq	r0, r1, lsl #20
    6320:	274b0000 	strbcs	r0, [fp, -r0]
    6324:	74210000 	strtvc	r0, [r1], #-0
    6328:	0100706d 	tsteq	r0, sp, rrx
    632c:	00023dbc 			; <UNDEFINED> instruction: 0x00023dbc
    6330:	48910200 	ldmmi	r1, {r9}
    6334:	0003fb22 	andeq	pc, r3, r2, lsr #22
    6338:	00000000 	andeq	r0, r0, r0
    633c:	00071000 	andeq	r1, r7, r0
    6340:	36be0100 	ldrtcc	r0, [lr], r0, lsl #2
    6344:	0f000005 	svceq	0x00000005
    6348:	00000419 	andeq	r0, r0, r9, lsl r4
    634c:	0000276c 	andeq	r2, r0, ip, ror #14
    6350:	0004100f 	andeq	r1, r4, pc
    6354:	00278d00 	eoreq	r8, r7, r0, lsl #26
    6358:	04070f00 	streq	r0, [r7], #-3840	; 0xf00
    635c:	27ae0000 	strcs	r0, [lr, r0]!
    6360:	10190000 	andsne	r0, r9, r0
    6364:	10000007 	andne	r0, r0, r7
    6368:	00000422 	andeq	r0, r0, r2, lsr #8
    636c:	000027db 	ldrdeq	r2, [r0], -fp
    6370:	00042b10 	andeq	r2, r4, r0, lsl fp
    6374:	00280500 	eoreq	r0, r8, r0, lsl #10
    6378:	00002000 	andeq	r2, r0, r0
    637c:	00480000 	subeq	r0, r8, r0
    6380:	35100000 	ldrcc	r0, [r0, #-0]
    6384:	66000004 	strvs	r0, [r0], -r4
    6388:	00000028 	andeq	r0, r0, r8, lsr #32
    638c:	1b230000 	blne	8c6394 <__Stack_Size+0x8c5b94>
    6390:	00000001 	andeq	r0, r0, r1
    6394:	26000000 	strcs	r0, [r0], -r0
    6398:	01000000 	mrseq	r0, (UNDEF: 0)
    639c:	01300fbf 			; <UNDEFINED> instruction: 0x01300fbf
    63a0:	28b50000 	ldmcs	r5!, {}	; <UNPREDICTABLE>
    63a4:	270f0000 	strcs	r0, [pc, -r0]
    63a8:	e2000001 	and	r0, r0, #1
    63ac:	00000028 	andeq	r0, r0, r8, lsr #32
    63b0:	142f0600 	strtne	r0, [pc], #-1536	; 63b8 <__Stack_Size+0x5bb8>
    63b4:	c2010000 	andgt	r0, r1, #0
    63b8:	00059301 	andeq	r9, r5, r1, lsl #6
    63bc:	00720700 	rsbseq	r0, r2, r0, lsl #14
    63c0:	010ac201 	tsteq	sl, r1, lsl #4
    63c4:	61070000 	mrsvs	r0, (UNDEF: 7)
    63c8:	10c20100 	sbcne	r0, r2, r0, lsl #2
    63cc:	07000001 	streq	r0, [r0, -r1]
    63d0:	c2010062 	andgt	r0, r1, #98	; 0x62
    63d4:	000000a2 	andeq	r0, r0, r2, lsr #1
    63d8:	0100630a 	tsteq	r0, sl, lsl #6
    63dc:	0000a2c4 	andeq	sl, r0, r4, asr #5
    63e0:	00690a00 	rsbeq	r0, r9, r0, lsl #20
    63e4:	007ec501 	rsbseq	ip, lr, r1, lsl #10
    63e8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    63ec:	00000559 	andeq	r0, r0, r9, asr r5
    63f0:	00000000 	andeq	r0, r0, r0
    63f4:	00000040 	andeq	r0, r0, r0, asr #32
    63f8:	05d09c01 	ldrbeq	r9, [r0, #3073]	; 0xc01
    63fc:	65180000 	ldrvs	r0, [r8, #-0]
    6400:	01000005 	tsteq	r0, r5
    6404:	056e1850 	strbeq	r1, [lr, #-2128]!	; 0x850
    6408:	51010000 	mrspl	r0, (UNDEF: 1)
    640c:	0005770f 	andeq	r7, r5, pc, lsl #14
    6410:	00290300 	eoreq	r0, r9, r0, lsl #6
    6414:	05801000 	streq	r1, [r0]
    6418:	29240000 	stmdbcs	r4!, {}	; <UNPREDICTABLE>
    641c:	89100000 	ldmdbhi	r0, {}	; <UNPREDICTABLE>
    6420:	52000005 	andpl	r0, r0, #5
    6424:	00000029 	andeq	r0, r0, r9, lsr #32
    6428:	00149413 	andseq	r9, r4, r3, lsl r4
    642c:	08d80100 	ldmeq	r8, {r8}^
    6430:	ea080026 	b	2064d0 <__Stack_Size+0x205cd0>
    6434:	01000005 	tsteq	r0, r5
    6438:	0009e79c 	muleq	r9, ip, r7
    643c:	00721400 	rsbseq	r1, r2, r0, lsl #8
    6440:	010ad801 	tsteq	sl, r1, lsl #16
    6444:	50010000 	andpl	r0, r1, r0
    6448:	0100781e 	tsteq	r0, lr, lsl r8
    644c:	000110d8 	ldrdeq	r1, [r1], -r8
    6450:	0029a000 	eoreq	sl, r9, r0
    6454:	00732100 	rsbseq	r2, r3, r0, lsl #2
    6458:	023dda01 	eorseq	sp, sp, #4096	; 0x1000
    645c:	91020000 	mrsls	r0, (UNDEF: 2)
    6460:	00690a40 	rsbeq	r0, r9, r0, asr #20
    6464:	007edb01 	rsbseq	sp, lr, r1, lsl #22
    6468:	fb220000 	blx	886472 <__Stack_Size+0x885c72>
    646c:	0c000003 	stceq	0, cr0, [r0], {3}
    6470:	28080026 	stmdacs	r8, {r1, r2, r5}
    6474:	01000007 	tsteq	r0, r7
    6478:	00066cee 	andeq	r6, r6, lr, ror #25
    647c:	04190f00 	ldreq	r0, [r9], #-3840	; 0xf00
    6480:	29c10000 	stmibcs	r1, {}^	; <UNPREDICTABLE>
    6484:	100f0000 	andne	r0, pc, r0
    6488:	c1000004 	tstgt	r0, r4
    648c:	0f000029 	svceq	0x00000029
    6490:	00000407 	andeq	r0, r0, r7, lsl #8
    6494:	000029e2 	andeq	r2, r0, r2, ror #19
    6498:	00072819 	andeq	r2, r7, r9, lsl r8
    649c:	04221000 	strteq	r1, [r2], #-0
    64a0:	2a0f0000 	bcs	3c64a8 <__Stack_Size+0x3c5ca8>
    64a4:	2b100000 	blcs	4064ac <__Stack_Size+0x405cac>
    64a8:	39000004 	stmdbcc	r0, {r2}
    64ac:	2000002a 	andcs	r0, r0, sl, lsr #32
    64b0:	08002612 	stmdaeq	r0, {r1, r4, r9, sl, sp}
    64b4:	00000046 	andeq	r0, r0, r6, asr #32
    64b8:	00043510 	andeq	r3, r4, r0, lsl r5
    64bc:	002a9a00 	eoreq	r9, sl, r0, lsl #20
    64c0:	00000000 	andeq	r0, r0, r0
    64c4:	0003fb22 	andeq	pc, r3, r2, lsr #22
    64c8:	00269400 	eoreq	r9, r6, r0, lsl #8
    64cc:	00074008 	andeq	r4, r7, r8
    64d0:	baef0100 	blt	ffbc68d8 <BootRAM+0xeb37079>
    64d4:	24000006 	strcs	r0, [r0], #-6
    64d8:	00000419 	andeq	r0, r0, r9, lsl r4
    64dc:	00041024 	andeq	r1, r4, r4, lsr #32
    64e0:	04072400 	streq	r2, [r7], #-1024	; 0x400
    64e4:	40190000 	andsmi	r0, r9, r0
    64e8:	10000007 	andne	r0, r0, r7
    64ec:	00000422 	andeq	r0, r0, r2, lsr #8
    64f0:	00002ae9 	andeq	r2, r0, r9, ror #21
    64f4:	00042b10 	andeq	r2, r4, r0, lsl fp
    64f8:	002b0700 	eoreq	r0, fp, r0, lsl #14
    64fc:	26942000 	ldrcs	r2, [r4], r0
    6500:	00440800 	subeq	r0, r4, r0, lsl #16
    6504:	35100000 	ldrcc	r0, [r0, #-0]
    6508:	49000004 	stmdbmi	r0, {r2}
    650c:	0000002b 	andeq	r0, r0, fp, lsr #32
    6510:	fb220000 	blx	88651a <__Stack_Size+0x885d1a>
    6514:	06000003 	streq	r0, [r0], -r3
    6518:	58080027 	stmdapl	r8, {r0, r1, r2, r5}
    651c:	01000007 	tsteq	r0, r7
    6520:	000704f3 	strdeq	r0, [r7], -r3
    6524:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    6528:	10240000 	eorne	r0, r4, r0
    652c:	24000004 	strcs	r0, [r0], #-4
    6530:	00000407 	andeq	r0, r0, r7, lsl #8
    6534:	00075819 	andeq	r5, r7, r9, lsl r8
    6538:	04221000 	strteq	r1, [r2], #-0
    653c:	2bc30000 	blcs	ff0c6544 <BootRAM+0xe036ce5>
    6540:	2b100000 	blcs	406548 <__Stack_Size+0x405d48>
    6544:	ed000004 	stc	0, cr0, [r0, #-16]
    6548:	1900002b 	stmdbne	r0, {r0, r1, r3, r5}
    654c:	00000770 	andeq	r0, r0, r0, ror r7
    6550:	00043510 	andeq	r3, r4, r0, lsl r5
    6554:	002c4e00 	eoreq	r4, ip, r0, lsl #28
    6558:	00000000 	andeq	r0, r0, r0
    655c:	0003fb25 	andeq	pc, r3, r5, lsr #22
    6560:	00279400 	eoreq	r9, r7, r0, lsl #8
    6564:	00007608 	andeq	r7, r0, r8, lsl #12
    6568:	56f40100 	ldrbtpl	r0, [r4], r0, lsl #2
    656c:	24000007 	strcs	r0, [r0], #-7
    6570:	00000419 	andeq	r0, r0, r9, lsl r4
    6574:	00041024 	andeq	r1, r4, r4, lsr #32
    6578:	04072400 	streq	r2, [r7], #-1024	; 0x400
    657c:	94200000 	strtls	r0, [r0], #-0
    6580:	76080027 	strvc	r0, [r8], -r7, lsr #32
    6584:	10000000 	andne	r0, r0, r0
    6588:	00000422 	andeq	r0, r0, r2, lsr #8
    658c:	00002c9d 	muleq	r0, sp, ip
    6590:	00042b10 	andeq	r2, r4, r0, lsl fp
    6594:	002cbb00 	eoreq	fp, ip, r0, lsl #22
    6598:	27942000 	ldrcs	r2, [r4, r0]
    659c:	00480800 	subeq	r0, r8, r0, lsl #16
    65a0:	35100000 	ldrcc	r0, [r0, #-0]
    65a4:	fd000004 	stc2	0, cr0, [r0, #-16]
    65a8:	0000002c 	andeq	r0, r0, ip, lsr #32
    65ac:	fb250000 	blx	9465b6 <__Stack_Size+0x945db6>
    65b0:	14000003 	strne	r0, [r0], #-3
    65b4:	88080028 	stmdahi	r8, {r3, r5}
    65b8:	01000000 	mrseq	r0, (UNDEF: 0)
    65bc:	0007a8f8 	strdeq	sl, [r7], -r8
    65c0:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    65c4:	10240000 	eorne	r0, r4, r0
    65c8:	24000004 	strcs	r0, [r0], #-4
    65cc:	00000407 	andeq	r0, r0, r7, lsl #8
    65d0:	00281420 	eoreq	r1, r8, r0, lsr #8
    65d4:	00008808 	andeq	r8, r0, r8, lsl #16
    65d8:	04221000 	strteq	r1, [r2], #-0
    65dc:	2d770000 	ldclcs	0, cr0, [r7, #-0]
    65e0:	2b100000 	blcs	4065e8 <__Stack_Size+0x405de8>
    65e4:	95000004 	strls	r0, [r0, #-4]
    65e8:	2000002d 	andcs	r0, r0, sp, lsr #32
    65ec:	08002814 	stmdaeq	r0, {r2, r4, fp, sp}
    65f0:	0000004a 	andeq	r0, r0, sl, asr #32
    65f4:	00043510 	andeq	r3, r4, r0, lsl r5
    65f8:	002dea00 	eoreq	lr, sp, r0, lsl #20
    65fc:	00000000 	andeq	r0, r0, r0
    6600:	0003fb25 	andeq	pc, r3, r5, lsr #22
    6604:	00289c00 	eoreq	r9, r8, r0, lsl #24
    6608:	00007408 	andeq	r7, r0, r8, lsl #8
    660c:	fafb0100 	blx	ffec6a14 <BootRAM+0xee371b5>
    6610:	24000007 	strcs	r0, [r0], #-7
    6614:	00000419 	andeq	r0, r0, r9, lsl r4
    6618:	00041024 	andeq	r1, r4, r4, lsr #32
    661c:	04072400 	streq	r2, [r7], #-1024	; 0x400
    6620:	9c200000 	stcls	0, cr0, [r0], #-0
    6624:	74080028 	strvc	r0, [r8], #-40	; 0x28
    6628:	10000000 	andne	r0, r0, r0
    662c:	00000422 	andeq	r0, r0, r2, lsr #8
    6630:	00002e39 	andeq	r2, r0, r9, lsr lr
    6634:	00042b10 	andeq	r2, r4, r0, lsl fp
    6638:	002e5700 	eoreq	r5, lr, r0, lsl #14
    663c:	289c2000 	ldmcs	ip, {sp}
    6640:	00460800 	subeq	r0, r6, r0, lsl #16
    6644:	35100000 	ldrcc	r0, [r0, #-0]
    6648:	99000004 	stmdbls	r0, {r2}
    664c:	0000002e 	andeq	r0, r0, lr, lsr #32
    6650:	fb250000 	blx	94665a <__Stack_Size+0x945e5a>
    6654:	10000003 	andne	r0, r0, r3
    6658:	82080029 	andhi	r0, r8, #41	; 0x29
    665c:	01000000 	mrseq	r0, (UNDEF: 0)
    6660:	00084cfc 	strdeq	r4, [r8], -ip
    6664:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    6668:	10240000 	eorne	r0, r4, r0
    666c:	24000004 	strcs	r0, [r0], #-4
    6670:	00000407 	andeq	r0, r0, r7, lsl #8
    6674:	00291020 	eoreq	r1, r9, r0, lsr #32
    6678:	00008208 	andeq	r8, r0, r8, lsl #4
    667c:	04221000 	strteq	r1, [r2], #-0
    6680:	2f130000 	svccs	0x00130000
    6684:	2b100000 	blcs	40668c <__Stack_Size+0x405e8c>
    6688:	31000004 	tstcc	r0, r4
    668c:	2000002f 	andcs	r0, r0, pc, lsr #32
    6690:	08002910 	stmdaeq	r0, {r4, r8, fp, sp}
    6694:	00000048 	andeq	r0, r0, r8, asr #32
    6698:	00043510 	andeq	r3, r4, r0, lsl r5
    669c:	002f8600 	eoreq	r8, pc, r0, lsl #12
    66a0:	00000000 	andeq	r0, r0, r0
    66a4:	0003fb25 	andeq	pc, r3, r5, lsr #22
    66a8:	00299200 	eoreq	r9, r9, r0, lsl #4
    66ac:	00007408 	andeq	r7, r0, r8, lsl #8
    66b0:	9eff0100 	cdpls	1, 15, cr0, cr15, cr0, {0}
    66b4:	24000008 	strcs	r0, [r0], #-8
    66b8:	00000419 	andeq	r0, r0, r9, lsl r4
    66bc:	00041024 	andeq	r1, r4, r4, lsr #32
    66c0:	04072400 	streq	r2, [r7], #-1024	; 0x400
    66c4:	92200000 	eorls	r0, r0, #0
    66c8:	74080029 	strvc	r0, [r8], #-41	; 0x29
    66cc:	10000000 	andne	r0, r0, r0
    66d0:	00000422 	andeq	r0, r0, r2, lsr #8
    66d4:	00002fd5 	ldrdeq	r2, [r0], -r5
    66d8:	00042b10 	andeq	r2, r4, r0, lsl fp
    66dc:	002ff300 	eoreq	pc, pc, r0, lsl #6
    66e0:	29922000 	ldmibcs	r2, {sp}
    66e4:	00460800 	subeq	r0, r6, r0, lsl #16
    66e8:	35100000 	ldrcc	r0, [r0, #-0]
    66ec:	35000004 	strcc	r0, [r0, #-4]
    66f0:	00000030 	andeq	r0, r0, r0, lsr r0
    66f4:	fb260000 	blx	9866fe <__Stack_Size+0x985efe>
    66f8:	06000003 	streq	r0, [r0], -r3
    66fc:	8208002a 	andhi	r0, r8, #42	; 0x2a
    6700:	01000000 	mrseq	r0, (UNDEF: 0)
    6704:	08f10102 	ldmeq	r1!, {r1, r8}^
    6708:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    670c:	24000004 	strcs	r0, [r0], #-4
    6710:	00000410 	andeq	r0, r0, r0, lsl r4
    6714:	00040724 	andeq	r0, r4, r4, lsr #14
    6718:	2a062000 	bcs	18e720 <__Stack_Size+0x18df20>
    671c:	00820800 	addeq	r0, r2, r0, lsl #16
    6720:	22100000 	andscs	r0, r0, #0
    6724:	af000004 	svcge	0x00000004
    6728:	10000030 	andne	r0, r0, r0, lsr r0
    672c:	0000042b 	andeq	r0, r0, fp, lsr #8
    6730:	000030cd 	andeq	r3, r0, sp, asr #1
    6734:	002a0620 	eoreq	r0, sl, r0, lsr #12
    6738:	00004808 	andeq	r4, r0, r8, lsl #16
    673c:	04351000 	ldrteq	r1, [r5], #-0
    6740:	31220000 	teqcc	r2, r0
    6744:	00000000 	andeq	r0, r0, r0
    6748:	03fb2600 	mvnseq	r2, #0, 12
    674c:	2a880000 	bcs	fe206754 <BootRAM+0xd176ef5>
    6750:	00720800 	rsbseq	r0, r2, r0, lsl #16
    6754:	03010000 	movweq	r0, #4096	; 0x1000
    6758:	00094401 	andeq	r4, r9, r1, lsl #8
    675c:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    6760:	10240000 	eorne	r0, r4, r0
    6764:	24000004 	strcs	r0, [r0], #-4
    6768:	00000407 	andeq	r0, r0, r7, lsl #8
    676c:	002a8820 	eoreq	r8, sl, r0, lsr #16
    6770:	00007208 	andeq	r7, r0, r8, lsl #4
    6774:	04221000 	strteq	r1, [r2], #-0
    6778:	31710000 	cmncc	r1, r0
    677c:	2b100000 	blcs	406784 <__Stack_Size+0x405f84>
    6780:	8f000004 	svchi	0x00000004
    6784:	20000031 	andcs	r0, r0, r1, lsr r0
    6788:	08002a88 	stmdaeq	r0, {r3, r7, r9, fp, sp}
    678c:	00000044 	andeq	r0, r0, r4, asr #32
    6790:	00043510 	andeq	r3, r4, r0, lsl r5
    6794:	0031d100 	eorseq	sp, r1, r0, lsl #2
    6798:	00000000 	andeq	r0, r0, r0
    679c:	0003fb26 	andeq	pc, r3, r6, lsr #22
    67a0:	002afa00 	eoreq	pc, sl, r0, lsl #20
    67a4:	00008208 	andeq	r8, r0, r8, lsl #4
    67a8:	01060100 	mrseq	r0, (UNDEF: 22)
    67ac:	00000997 	muleq	r0, r7, r9
    67b0:	00041924 	andeq	r1, r4, r4, lsr #18
    67b4:	04102400 	ldreq	r2, [r0], #-1024	; 0x400
    67b8:	07240000 	streq	r0, [r4, -r0]!
    67bc:	20000004 	andcs	r0, r0, r4
    67c0:	08002afa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, fp, sp}
    67c4:	00000082 	andeq	r0, r0, r2, lsl #1
    67c8:	00042210 	andeq	r2, r4, r0, lsl r2
    67cc:	00324b00 	eorseq	r4, r2, r0, lsl #22
    67d0:	042b1000 	strteq	r1, [fp], #-0
    67d4:	32690000 	rsbcc	r0, r9, #0
    67d8:	fa200000 	blx	8067e0 <__Stack_Size+0x805fe0>
    67dc:	4808002a 	stmdami	r8, {r1, r3, r5}
    67e0:	10000000 	andne	r0, r0, r0
    67e4:	00000435 	andeq	r0, r0, r5, lsr r4
    67e8:	000032be 			; <UNDEFINED> instruction: 0x000032be
    67ec:	27000000 	strcs	r0, [r0, -r0]
    67f0:	000003fb 	strdeq	r0, [r0], -fp
    67f4:	08002b7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, sp}
    67f8:	0000006e 	andeq	r0, r0, lr, rrx
    67fc:	24010701 	strcs	r0, [r1], #-1793	; 0x701
    6800:	00000419 	andeq	r0, r0, r9, lsl r4
    6804:	00041024 	andeq	r1, r4, r4, lsr #32
    6808:	04072400 	streq	r2, [r7], #-1024	; 0x400
    680c:	7c200000 	stcvc	0, cr0, [r0], #-0
    6810:	6e08002b 	cdpvs	0, 0, cr0, cr8, cr11, {1}
    6814:	10000000 	andne	r0, r0, r0
    6818:	00000422 	andeq	r0, r0, r2, lsr #8
    681c:	0000330d 	andeq	r3, r0, sp, lsl #6
    6820:	00042b10 	andeq	r2, r4, r0, lsl fp
    6824:	00332b00 	eorseq	r2, r3, r0, lsl #22
    6828:	2b7c2000 	blcs	1f0e830 <__Stack_Size+0x1f0e030>
    682c:	00440800 	subeq	r0, r4, r0, lsl #16
    6830:	35100000 	ldrcc	r0, [r0, #-0]
    6834:	6d000004 	stcvs	0, cr0, [r0, #-16]
    6838:	00000033 	andeq	r0, r0, r3, lsr r0
    683c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    6840:	0000170b 	andeq	r1, r0, fp, lsl #14
    6844:	00010a01 	andeq	r0, r1, r1, lsl #20
    6848:	26000000 	strcs	r0, [r0], -r0
    684c:	01000000 	mrseq	r0, (UNDEF: 0)
    6850:	000a659c 	muleq	sl, ip, r5
    6854:	00722900 	rsbseq	r2, r2, r0, lsl #18
    6858:	0a010a01 	beq	49064 <__Stack_Size+0x48864>
    685c:	e7000001 	str	r0, [r0, -r1]
    6860:	29000033 	stmdbcs	r0, {r0, r1, r4, r5}
    6864:	0a010078 	beq	46a4c <__Stack_Size+0x4624c>
    6868:	00011001 	andeq	r1, r1, r1
    686c:	00340500 	eorseq	r0, r4, r0, lsl #10
    6870:	6d742a00 	vldmdbvs	r4!, {s5-s4}
    6874:	0c010070 	stceq	0, cr0, [r1], {112}	; 0x70
    6878:	00023d01 	andeq	r3, r2, r1, lsl #26
    687c:	50910200 	addspl	r0, r1, r0, lsl #4
    6880:	00011b26 	andeq	r1, r1, r6, lsr #22
    6884:	00000000 	andeq	r0, r0, r0
    6888:	00001600 	andeq	r1, r0, r0, lsl #12
    688c:	010f0100 	mrseq	r0, (UNDEF: 31)
    6890:	00000a4d 	andeq	r0, r0, sp, asr #20
    6894:	0001300f 	andeq	r3, r1, pc
    6898:	00342600 	eorseq	r2, r4, r0, lsl #12
    689c:	01271800 	teqeq	r7, r0, lsl #16
    68a0:	55010000 	strpl	r0, [r1, #-0]
    68a4:	00002b00 	andeq	r2, r0, r0, lsl #22
    68a8:	05d00000 	ldrbeq	r0, [r0]
    68ac:	01120000 	tsteq	r2, r0
    68b0:	01f30351 	mvnseq	r0, r1, asr r3
    68b4:	50011251 	andpl	r1, r1, r1, asr r2
    68b8:	00007d02 	andeq	r7, r0, r2, lsl #26
    68bc:	16f42c00 	ldrbtne	r2, [r4], r0, lsl #24
    68c0:	15010000 	strne	r0, [r1, #-0]
    68c4:	0a9b0101 	beq	fe6c6cd0 <BootRAM+0xd637471>
    68c8:	722d0000 	eorvc	r0, sp, #0
    68cc:	01150100 	tsteq	r5, r0, lsl #2
    68d0:	0000010a 	andeq	r0, r0, sl, lsl #2
    68d4:	0100782d 	tsteq	r0, sp, lsr #16
    68d8:	01100115 	tsteq	r0, r5, lsl r1
    68dc:	732d0000 	teqvc	sp, #0
    68e0:	01150100 	tsteq	r5, r0, lsl #2
    68e4:	0000010a 	andeq	r0, r0, sl, lsl #2
    68e8:	0100692e 	tsteq	r0, lr, lsr #18
    68ec:	007e0117 	rsbseq	r0, lr, r7, lsl r1
    68f0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    68f4:	00001574 	andeq	r1, r0, r4, ror r5
    68f8:	f4013001 	vst4.8	{d3-d6}, [r1], r1
    68fc:	3408002b 	strcc	r0, [r8], #-43	; 0x2b
    6900:	01000006 	tsteq	r0, r6
    6904:	000f619c 	muleq	pc, ip, r1	; <UNPREDICTABLE>
    6908:	00722900 	rsbseq	r2, r2, r0, lsl #18
    690c:	0a013001 	beq	52918 <__Stack_Size+0x52118>
    6910:	46000001 	strmi	r0, [r0], -r1
    6914:	29000034 	stmdbcs	r0, {r2, r4, r5}
    6918:	30010061 	andcc	r0, r1, r1, rrx
    691c:	00011001 	andeq	r1, r1, r1
    6920:	00347300 	eorseq	r7, r4, r0, lsl #6
    6924:	00762a00 	rsbseq	r2, r6, r0, lsl #20
    6928:	3d013201 	sfmcc	f3, 4, [r1, #-4]
    692c:	03000002 	movweq	r0, #2
    6930:	2a7ee091 	bcs	1fbeb7c <__Stack_Size+0x1fbe37c>
    6934:	33010069 	movwcc	r0, #4201	; 0x1069
    6938:	00023d01 	andeq	r3, r2, r1, lsl #26
    693c:	80910300 	addshi	r0, r1, r0, lsl #6
    6940:	00782a7f 	rsbseq	r2, r8, pc, ror sl
    6944:	3d013401 	cfstrscc	mvf3, [r1, #-4]
    6948:	03000002 	movweq	r0, #2
    694c:	2a7fa091 	bcs	1feeb98 <__Stack_Size+0x1fee398>
    6950:	35010079 	strcc	r0, [r1, #-121]	; 0x79
    6954:	00023d01 	andeq	r3, r2, r1, lsl #26
    6958:	40910200 	addsmi	r0, r1, r0, lsl #4
    695c:	0005592f 	andeq	r5, r5, pc, lsr #18
    6960:	002bf800 	eoreq	pc, fp, r0, lsl #16
    6964:	00078808 	andeq	r8, r7, r8, lsl #16
    6968:	01380100 	teqeq	r8, r0, lsl #2
    696c:	00000b49 	andeq	r0, r0, r9, asr #22
    6970:	00057730 	andeq	r7, r5, r0, lsr r7
    6974:	6e0f0200 	cdpvs	2, 0, cr0, cr15, cr0, {0}
    6978:	ab000005 	blge	6994 <__Stack_Size+0x6194>
    697c:	0f000034 	svceq	0x00000034
    6980:	00000565 	andeq	r0, r0, r5, ror #10
    6984:	000034e3 	andeq	r3, r0, r3, ror #9
    6988:	00078819 	andeq	r8, r7, r9, lsl r8
    698c:	05801000 	streq	r1, [r0]
    6990:	35120000 	ldrcc	r0, [r2, #-0]
    6994:	89100000 	ldmdbhi	r0, {}	; <UNPREDICTABLE>
    6998:	40000005 	andmi	r0, r0, r5
    699c:	00000035 	andeq	r0, r0, r5, lsr r0
    69a0:	0a652600 	beq	19501a8 <__Stack_Size+0x194f9a8>
    69a4:	2c480000 	marcs	acc0, r0, r8
    69a8:	03940800 	orrseq	r0, r4, #0, 16
    69ac:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    69b0:	000db101 	andeq	fp, sp, r1, lsl #2
    69b4:	0a862400 	beq	fe18f9bc <BootRAM+0xd10015d>
    69b8:	7c240000 	stcvc	0, cr0, [r4], #-0
    69bc:	2400000a 	strcs	r0, [r0], #-10
    69c0:	00000a72 	andeq	r0, r0, r2, ror sl
    69c4:	002c4820 	eoreq	r4, ip, r0, lsr #16
    69c8:	00039408 	andeq	r9, r3, r8, lsl #8
    69cc:	0a903100 	beq	fe412dd4 <BootRAM+0xd383575>
    69d0:	fb260000 	blx	9869da <__Stack_Size+0x9861da>
    69d4:	48000003 	stmdami	r0, {r0, r1}
    69d8:	7a08002c 	bvc	206a90 <__Stack_Size+0x206290>
    69dc:	01000000 	mrseq	r0, (UNDEF: 0)
    69e0:	0bcd011f 	bleq	ff346e64 <BootRAM+0xe2b7605>
    69e4:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    69e8:	24000004 	strcs	r0, [r0], #-4
    69ec:	00000410 	andeq	r0, r0, r0, lsl r4
    69f0:	00040724 	andeq	r0, r4, r4, lsr #14
    69f4:	2c482000 	marcs	acc0, r2, r8
    69f8:	007a0800 	rsbseq	r0, sl, r0, lsl #16
    69fc:	22100000 	andscs	r0, r0, #0
    6a00:	a1000004 	tstge	r0, r4
    6a04:	10000035 	andne	r0, r0, r5, lsr r0
    6a08:	0000042b 	andeq	r0, r0, fp, lsr #8
    6a0c:	000035bf 			; <UNDEFINED> instruction: 0x000035bf
    6a10:	002c4820 	eoreq	r4, ip, r0, lsr #16
    6a14:	00004208 	andeq	r4, r0, r8, lsl #4
    6a18:	04351000 	ldrteq	r1, [r5], #-0
    6a1c:	36170000 	ldrcc	r0, [r7], -r0
    6a20:	00000000 	andeq	r0, r0, r0
    6a24:	03fb2f00 	mvnseq	r2, #0, 30
    6a28:	2cc20000 	stclcs	0, cr0, [r2], {0}
    6a2c:	07a00800 	streq	r0, [r0, r0, lsl #16]!
    6a30:	20010000 	andcs	r0, r1, r0
    6a34:	000c1c01 	andeq	r1, ip, r1, lsl #24
    6a38:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    6a3c:	10240000 	eorne	r0, r4, r0
    6a40:	24000004 	strcs	r0, [r0], #-4
    6a44:	00000407 	andeq	r0, r0, r7, lsl #8
    6a48:	0007a019 	andeq	sl, r7, r9, lsl r0
    6a4c:	04221000 	strteq	r1, [r2], #-0
    6a50:	36910000 	ldrcc	r0, [r1], r0
    6a54:	2b100000 	blcs	406a5c <__Stack_Size+0x40625c>
    6a58:	af000004 	svcge	0x00000004
    6a5c:	20000036 	andcs	r0, r0, r6, lsr r0
    6a60:	08002cc2 	stmdaeq	r0, {r1, r6, r7, sl, fp, sp}
    6a64:	00000044 	andeq	r0, r0, r4, asr #32
    6a68:	00043510 	andeq	r3, r4, r0, lsl r5
    6a6c:	00370400 	eorseq	r0, r7, r0, lsl #8
    6a70:	00000000 	andeq	r0, r0, r0
    6a74:	0003fb2f 	andeq	pc, r3, pc, lsr #22
    6a78:	002d4600 	eoreq	r4, sp, r0, lsl #12
    6a7c:	0007b808 	andeq	fp, r7, r8, lsl #16
    6a80:	01240100 	teqeq	r4, r0, lsl #2
    6a84:	00000c67 	andeq	r0, r0, r7, ror #24
    6a88:	00041924 	andeq	r1, r4, r4, lsr #18
    6a8c:	04102400 	ldreq	r2, [r0], #-1024	; 0x400
    6a90:	07240000 	streq	r0, [r4, -r0]!
    6a94:	19000004 	stmdbne	r0, {r2}
    6a98:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
    6a9c:	00042210 	andeq	r2, r4, r0, lsl r2
    6aa0:	00378100 	eorseq	r8, r7, r0, lsl #2
    6aa4:	042b1000 	strteq	r1, [fp], #-0
    6aa8:	37ab0000 	strcc	r0, [fp, r0]!
    6aac:	d0190000 	andsle	r0, r9, r0
    6ab0:	10000007 	andne	r0, r0, r7
    6ab4:	00000435 	andeq	r0, r0, r5, lsr r4
    6ab8:	0000380f 	andeq	r3, r0, pc, lsl #16
    6abc:	26000000 	strcs	r0, [r0], -r0
    6ac0:	000003fb 	strdeq	r0, [r0], -fp
    6ac4:	08002dd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, fp, sp}
    6ac8:	00000082 	andeq	r0, r0, r2, lsl #1
    6acc:	ba012501 	blt	4fed8 <__Stack_Size+0x4f6d8>
    6ad0:	2400000c 	strcs	r0, [r0], #-12
    6ad4:	00000419 	andeq	r0, r0, r9, lsl r4
    6ad8:	00041024 	andeq	r1, r4, r4, lsr #32
    6adc:	04072400 	streq	r2, [r7], #-1024	; 0x400
    6ae0:	d6200000 	strtle	r0, [r0], -r0
    6ae4:	8208002d 	andhi	r0, r8, #45	; 0x2d
    6ae8:	10000000 	andne	r0, r0, r0
    6aec:	00000422 	andeq	r0, r0, r2, lsr #8
    6af0:	00003889 	andeq	r3, r0, r9, lsl #17
    6af4:	00042b10 	andeq	r2, r4, r0, lsl fp
    6af8:	0038a700 	eorseq	sl, r8, r0, lsl #14
    6afc:	2dd62000 	ldclcs	0, cr2, [r6]
    6b00:	004a0800 	subeq	r0, sl, r0, lsl #16
    6b04:	35100000 	ldrcc	r0, [r0, #-0]
    6b08:	fc000004 	stc2	0, cr0, [r0], {4}
    6b0c:	00000038 	andeq	r0, r0, r8, lsr r0
    6b10:	fb260000 	blx	986b1a <__Stack_Size+0x98631a>
    6b14:	6a000003 	bvs	6b28 <__Stack_Size+0x6328>
    6b18:	7c08002e 	stcvc	0, cr0, [r8], {46}	; 0x2e
    6b1c:	01000000 	mrseq	r0, (UNDEF: 0)
    6b20:	0d0d0129 	stfeqs	f0, [sp, #-164]	; 0xffffff5c
    6b24:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    6b28:	24000004 	strcs	r0, [r0], #-4
    6b2c:	00000410 	andeq	r0, r0, r0, lsl r4
    6b30:	00040724 	andeq	r0, r4, r4, lsr #14
    6b34:	2e6a2000 	cdpcs	0, 6, cr2, cr10, cr0, {0}
    6b38:	007c0800 	rsbseq	r0, ip, r0, lsl #16
    6b3c:	22100000 	andscs	r0, r0, #0
    6b40:	79000004 	stmdbvc	r0, {r2}
    6b44:	10000039 	andne	r0, r0, r9, lsr r0
    6b48:	0000042b 	andeq	r0, r0, fp, lsr #8
    6b4c:	00003997 	muleq	r0, r7, r9
    6b50:	002e6a20 	eoreq	r6, lr, r0, lsr #20
    6b54:	00004608 	andeq	r4, r0, r8, lsl #12
    6b58:	04351000 	ldrteq	r1, [r5], #-0
    6b5c:	39ef0000 	stmibcc	pc!, {}^	; <UNPREDICTABLE>
    6b60:	00000000 	andeq	r0, r0, r0
    6b64:	03fb2600 	mvnseq	r2, #0, 12
    6b68:	2ee60000 	cdpcs	0, 14, cr0, cr6, cr0, {0}
    6b6c:	007e0800 	rsbseq	r0, lr, r0, lsl #16
    6b70:	2c010000 	stccs	0, cr0, [r1], {-0}
    6b74:	000d6001 	andeq	r6, sp, r1
    6b78:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    6b7c:	10240000 	eorne	r0, r4, r0
    6b80:	24000004 	strcs	r0, [r0], #-4
    6b84:	00000407 	andeq	r0, r0, r7, lsl #8
    6b88:	002ee620 	eoreq	lr, lr, r0, lsr #12
    6b8c:	00007e08 	andeq	r7, r0, r8, lsl #28
    6b90:	04221000 	strteq	r1, [r2], #-0
    6b94:	3a690000 	bcc	1a46b9c <__Stack_Size+0x1a4639c>
    6b98:	2b100000 	blcs	406ba0 <__Stack_Size+0x4063a0>
    6b9c:	87000004 	strhi	r0, [r0, -r4]
    6ba0:	2000003a 	andcs	r0, r0, sl, lsr r0
    6ba4:	08002ee6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, fp, sp}
    6ba8:	00000046 	andeq	r0, r0, r6, asr #32
    6bac:	00043510 	andeq	r3, r4, r0, lsl r5
    6bb0:	003adc00 	eorseq	sp, sl, r0, lsl #24
    6bb4:	00000000 	andeq	r0, r0, r0
    6bb8:	0003fb27 	andeq	pc, r3, r7, lsr #22
    6bbc:	002f6400 	eoreq	r6, pc, r0, lsl #8
    6bc0:	00007808 	andeq	r7, r0, r8, lsl #16
    6bc4:	012d0100 	teqeq	sp, r0, lsl #2
    6bc8:	00041924 	andeq	r1, r4, r4, lsr #18
    6bcc:	04102400 	ldreq	r2, [r0], #-1024	; 0x400
    6bd0:	07240000 	streq	r0, [r4, -r0]!
    6bd4:	20000004 	andcs	r0, r0, r4
    6bd8:	08002f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, sp}
    6bdc:	00000078 	andeq	r0, r0, r8, ror r0
    6be0:	00042210 	andeq	r2, r4, r0, lsl r2
    6be4:	003b5900 	eorseq	r5, fp, r0, lsl #18
    6be8:	042b1000 	strteq	r1, [fp], #-0
    6bec:	3b770000 	blcc	1dc6bf4 <__Stack_Size+0x1dc63f4>
    6bf0:	64200000 	strtvs	r0, [r0], #-0
    6bf4:	4208002f 	andmi	r0, r8, #47	; 0x2f
    6bf8:	10000000 	andne	r0, r0, r0
    6bfc:	00000435 	andeq	r0, r0, r5, lsr r4
    6c00:	00003bcf 	andeq	r3, r0, pc, asr #23
    6c04:	00000000 	andeq	r0, r0, r0
    6c08:	03fb2600 	mvnseq	r2, #0, 12
    6c0c:	2fdc0000 	svccs	0x00dc0000
    6c10:	00800800 	addeq	r0, r0, r0, lsl #16
    6c14:	3c010000 	stccc	0, cr0, [r1], {-0}
    6c18:	000e0401 	andeq	r0, lr, r1, lsl #8
    6c1c:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    6c20:	10240000 	eorne	r0, r4, r0
    6c24:	24000004 	strcs	r0, [r0], #-4
    6c28:	00000407 	andeq	r0, r0, r7, lsl #8
    6c2c:	002fdc20 	eoreq	sp, pc, r0, lsr #24
    6c30:	00008008 	andeq	r8, r0, r8
    6c34:	04221000 	strteq	r1, [r2], #-0
    6c38:	3c490000 	marcc	acc0, r0, r9
    6c3c:	2b100000 	blcs	406c44 <__Stack_Size+0x406444>
    6c40:	67000004 	strvs	r0, [r0, -r4]
    6c44:	2000003c 	andcs	r0, r0, ip, lsr r0
    6c48:	08002fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, sp}
    6c4c:	00000046 	andeq	r0, r0, r6, asr #32
    6c50:	00043510 	andeq	r3, r4, r0, lsl r5
    6c54:	003cbc00 	eorseq	fp, ip, r0, lsl #24
    6c58:	00000000 	andeq	r0, r0, r0
    6c5c:	0003fb26 	andeq	pc, r3, r6, lsr #22
    6c60:	00305c00 	eorseq	r5, r0, r0, lsl #24
    6c64:	00007008 	andeq	r7, r0, r8
    6c68:	013d0100 	teqeq	sp, r0, lsl #2
    6c6c:	00000e57 	andeq	r0, r0, r7, asr lr
    6c70:	00041924 	andeq	r1, r4, r4, lsr #18
    6c74:	04102400 	ldreq	r2, [r0], #-1024	; 0x400
    6c78:	07240000 	streq	r0, [r4, -r0]!
    6c7c:	20000004 	andcs	r0, r0, r4
    6c80:	0800305c 	stmdaeq	r0, {r2, r3, r4, r6, ip, sp}
    6c84:	00000070 	andeq	r0, r0, r0, ror r0
    6c88:	00042210 	andeq	r2, r4, r0, lsl r2
    6c8c:	003d3900 	eorseq	r3, sp, r0, lsl #18
    6c90:	042b1000 	strteq	r1, [fp], #-0
    6c94:	3d570000 	ldclcc	0, cr0, [r7, #-0]
    6c98:	5c200000 	stcpl	0, cr0, [r0], #-0
    6c9c:	40080030 	andmi	r0, r8, r0, lsr r0
    6ca0:	10000000 	andne	r0, r0, r0
    6ca4:	00000435 	andeq	r0, r0, r5, lsr r4
    6ca8:	00003dae 	andeq	r3, r0, lr, lsr #27
    6cac:	26000000 	strcs	r0, [r0], -r0
    6cb0:	0000013a 	andeq	r0, r0, sl, lsr r1
    6cb4:	080030cc 	stmdaeq	r0, {r2, r3, r6, r7, ip, sp}
    6cb8:	00000014 	andeq	r0, r0, r4, lsl r0
    6cbc:	8a013e01 	bhi	564c8 <__Stack_Size+0x55cc8>
    6cc0:	3000000e 	andcc	r0, r0, lr
    6cc4:	0000014f 	andeq	r0, r0, pc, asr #2
    6cc8:	01462400 	cmpeq	r6, r0, lsl #8
    6ccc:	cc200000 	stcgt	0, cr0, [r0], #-0
    6cd0:	14080030 	strne	r0, [r8], #-48	; 0x30
    6cd4:	10000000 	andne	r0, r0, r0
    6cd8:	00000158 	andeq	r0, r0, r8, asr r1
    6cdc:	00003e28 	andeq	r3, r0, r8, lsr #28
    6ce0:	3a2f0000 	bcc	bc6ce8 <__Stack_Size+0xbc64e8>
    6ce4:	e0000003 	and	r0, r0, r3
    6ce8:	e8080030 	stmda	r8, {r4, r5}
    6cec:	01000007 	tsteq	r0, r7
    6cf0:	0ec6013f 	mcreq	1, 6, r0, cr6, cr15, {1}
    6cf4:	58240000 	stmdapl	r4!, {}	; <UNPREDICTABLE>
    6cf8:	24000003 	strcs	r0, [r0], #-3
    6cfc:	0000034f 	andeq	r0, r0, pc, asr #6
    6d00:	00034624 	andeq	r4, r3, r4, lsr #12
    6d04:	07e81900 	strbeq	r1, [r8, r0, lsl #18]!
    6d08:	61100000 	tstvs	r0, r0
    6d0c:	48000003 	stmdami	r0, {r0, r1}
    6d10:	1000003e 	andne	r0, r0, lr, lsr r0
    6d14:	0000036a 	andeq	r0, r0, sl, ror #6
    6d18:	00003e71 	andeq	r3, r0, r1, ror lr
    6d1c:	fb2f0000 	blx	bc6d26 <__Stack_Size+0xbc6526>
    6d20:	2a000003 	bcs	6d34 <__Stack_Size+0x6534>
    6d24:	00080031 	andeq	r0, r8, r1, lsr r0
    6d28:	01000008 	tsteq	r0, r8
    6d2c:	0f110142 	svceq	0x00110142
    6d30:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    6d34:	24000004 	strcs	r0, [r0], #-4
    6d38:	00000410 	andeq	r0, r0, r0, lsl r4
    6d3c:	00040724 	andeq	r0, r4, r4, lsr #14
    6d40:	08001900 	stmdaeq	r0, {r8, fp, ip}
    6d44:	22100000 	andscs	r0, r0, #0
    6d48:	d4000004 	strle	r0, [r0], #-4
    6d4c:	1000003e 	andne	r0, r0, lr, lsr r0
    6d50:	0000042b 	andeq	r0, r0, fp, lsr #8
    6d54:	00003ef2 	strdeq	r3, [r0], -r2
    6d58:	00081819 	andeq	r1, r8, r9, lsl r8
    6d5c:	04351000 	ldrteq	r1, [r5], #-0
    6d60:	3f470000 	svccc	0x00470000
    6d64:	00000000 	andeq	r0, r0, r0
    6d68:	03fb2700 	mvnseq	r2, #0, 14
    6d6c:	31b00000 	movscc	r0, r0
    6d70:	00700800 	rsbseq	r0, r0, r0, lsl #16
    6d74:	43010000 	movwmi	r0, #4096	; 0x1000
    6d78:	04192401 	ldreq	r2, [r9], #-1025	; 0x401
    6d7c:	10240000 	eorne	r0, r4, r0
    6d80:	24000004 	strcs	r0, [r0], #-4
    6d84:	00000407 	andeq	r0, r0, r7, lsl #8
    6d88:	0031b020 	eorseq	fp, r1, r0, lsr #32
    6d8c:	00007008 	andeq	r7, r0, r8
    6d90:	04221000 	strteq	r1, [r2], #-0
    6d94:	3fc40000 	svccc	0x00c40000
    6d98:	2b100000 	blcs	406da0 <__Stack_Size+0x4065a0>
    6d9c:	e2000004 	and	r0, r0, #4
    6da0:	2000003f 	andcs	r0, r0, pc, lsr r0
    6da4:	080031b0 	stmdaeq	r0, {r4, r5, r7, r8, ip, sp}
    6da8:	00000042 	andeq	r0, r0, r2, asr #32
    6dac:	00043510 	andeq	r3, r4, r0, lsl r5
    6db0:	00402400 	subeq	r2, r0, r0, lsl #8
    6db4:	00000000 	andeq	r0, r0, r0
    6db8:	16e83200 	strbtne	r3, [r8], r0, lsl #4
    6dbc:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    6dc0:	00000f72 	andeq	r0, r0, r2, ror pc
    6dc4:	00000305 	andeq	r0, r0, r5, lsl #6
    6dc8:	3d0c0000 	stccc	0, cr0, [ip, #-0]
    6dcc:	32000002 	andcc	r0, r0, #2
    6dd0:	00001441 	andeq	r1, r0, r1, asr #8
    6dd4:	0f880a01 	svceq	0x00880a01
    6dd8:	03050000 	movweq	r0, #20480	; 0x5000
    6ddc:	080074d0 	stmdaeq	r0, {r4, r6, r7, sl, ip, sp, lr}
    6de0:	00023d0c 	andeq	r3, r2, ip, lsl #26
    6de4:	0f9f3300 	svceq	0x009f3300
    6de8:	00b40000 	adcseq	r0, r4, r0
    6dec:	b4340000 	ldrtlt	r0, [r4], #-0
    6df0:	34000000 	strcc	r0, [r0], #-0
    6df4:	0000007e 	andeq	r0, r0, lr, ror r0
    6df8:	0000ad34 	andeq	sl, r0, r4, lsr sp
    6dfc:	70000000 	andvc	r0, r0, r0
    6e00:	0400000d 	streq	r0, [r0], #-13
    6e04:	00191200 	andseq	r1, r9, r0, lsl #4
    6e08:	c0010400 	andgt	r0, r1, r0, lsl #8
    6e0c:	01000006 	tsteq	r0, r6
    6e10:	000017f4 	strdeq	r1, [r0], -r4
    6e14:	00000893 	muleq	r0, r3, r8
    6e18:	00000a08 	andeq	r0, r0, r8, lsl #20
    6e1c:	00000000 	andeq	r0, r0, r0
    6e20:	00001fd4 	ldrdeq	r1, [r0], -r4
    6e24:	1a060102 	bne	187234 <__Stack_Size+0x186a34>
    6e28:	03000008 	movweq	r0, #8
    6e2c:	00000fc9 	andeq	r0, r0, r9, asr #31
    6e30:	00371c03 	eorseq	r1, r7, r3, lsl #24
    6e34:	01020000 	mrseq	r0, (UNDEF: 2)
    6e38:	00081808 	andeq	r1, r8, r8, lsl #16
    6e3c:	05020200 	streq	r0, [r2, #-512]	; 0x200
    6e40:	0000065e 	andeq	r0, r0, lr, asr r6
    6e44:	000cf503 	andeq	pc, ip, r3, lsl #10
    6e48:	50260300 	eorpl	r0, r6, r0, lsl #6
    6e4c:	02000000 	andeq	r0, r0, #0
    6e50:	09490702 	stmdbeq	r9, {r1, r8, r9, sl}^
    6e54:	04020000 	streq	r0, [r2], #-0
    6e58:	0004da05 	andeq	sp, r4, r5, lsl #20
    6e5c:	10780300 	rsbsne	r0, r8, r0, lsl #6
    6e60:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    6e64:	00000069 	andeq	r0, r0, r9, rrx
    6e68:	52070402 	andpl	r0, r7, #33554432	; 0x2000000
    6e6c:	02000002 	andeq	r0, r0, #2
    6e70:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
    6e74:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6e78:	00024d07 	andeq	r4, r2, r7, lsl #26
    6e7c:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    6e80:	00746e69 	rsbseq	r6, r4, r9, ror #28
    6e84:	57070402 	strpl	r0, [r7, -r2, lsl #8]
    6e88:	03000002 	movweq	r0, #2
    6e8c:	00000fcb 	andeq	r0, r0, fp, asr #31
    6e90:	002c2a04 	eoreq	r2, ip, r4, lsl #20
    6e94:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    6e98:	0400000c 	streq	r0, [r0], #-12
    6e9c:	00004536 	andeq	r4, r0, r6, lsr r5
    6ea0:	107a0300 	rsbsne	r0, sl, r0, lsl #6
    6ea4:	42040000 	andmi	r0, r4, #0
    6ea8:	0000005e 	andeq	r0, r0, lr, asr r0
    6eac:	000d6303 	andeq	r6, sp, r3, lsl #6
    6eb0:	85d40500 	ldrbhi	r0, [r4, #1280]	; 0x500
    6eb4:	02000000 	andeq	r0, r0, #0
    6eb8:	078b0704 	streq	r0, [fp, r4, lsl #14]
    6ebc:	04050000 	streq	r0, [r5], #-0
    6ec0:	21080102 	tstcs	r8, r2, lsl #2
    6ec4:	06000008 	streq	r0, [r0], -r8
    6ec8:	00001771 	andeq	r1, r0, r1, ror r7
    6ecc:	15018f01 	strne	r8, [r1, #-3841]	; 0xf01
    6ed0:	07000001 	streq	r0, [r0, -r1]
    6ed4:	00747364 	rsbseq	r7, r4, r4, ror #6
    6ed8:	01158f01 	tsteq	r5, r1, lsl #30
    6edc:	ef080000 	svc	0x00080000
    6ee0:	01000016 	tsteq	r0, r6, lsl r0
    6ee4:	00011b90 	muleq	r1, r0, fp
    6ee8:	6e6f0700 	cdpvs	7, 6, cr0, cr15, cr0, {0}
    6eec:	90010065 	andls	r0, r1, r5, rrx
    6ef0:	0000011b 	andeq	r0, r0, fp, lsl r1
    6ef4:	00172108 	andseq	r2, r7, r8, lsl #2
    6ef8:	8c910100 	ldfhis	f0, [r1], {0}
    6efc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    6f00:	00000c7a 	andeq	r0, r0, sl, ror ip
    6f04:	01219301 	teqeq	r1, r1, lsl #6
    6f08:	690a0000 	stmdbvs	sl, {}	; <UNPREDICTABLE>
    6f0c:	7e940100 	fmlvcs	f0, f4, f0
    6f10:	00000000 	andeq	r0, r0, r0
    6f14:	008c040b 	addeq	r0, ip, fp, lsl #8
    6f18:	040b0000 	streq	r0, [fp], #-0
    6f1c:	00000121 	andeq	r0, r0, r1, lsr #2
    6f20:	00008c0c 	andeq	r8, r0, ip, lsl #24
    6f24:	17950d00 	ldrne	r0, [r5, r0, lsl #26]
    6f28:	56010000 	strpl	r0, [r1], -r0
    6f2c:	0000007e 	andeq	r0, r0, lr, ror r0
    6f30:	00014903 	andeq	r4, r1, r3, lsl #18
    6f34:	00610700 	rsbeq	r0, r1, r0, lsl #14
    6f38:	007e5601 	rsbseq	r5, lr, r1, lsl #12
    6f3c:	62070000 	andvs	r0, r7, #0
    6f40:	7e560100 	rdfvcs	f0, f6, f0
    6f44:	00000000 	andeq	r0, r0, r0
    6f48:	0017640e 	andseq	r6, r7, lr, lsl #8
    6f4c:	013d0100 	teqeq	sp, r0, lsl #2
    6f50:	0000017a 	andeq	r0, r0, sl, ror r1
    6f54:	01007807 	tsteq	r0, r7, lsl #16
    6f58:	0001153d 	andeq	r1, r1, sp, lsr r5
    6f5c:	006e0700 	rsbeq	r0, lr, r0, lsl #14
    6f60:	007e3d01 	rsbseq	r3, lr, r1, lsl #26
    6f64:	630a0000 	movwvs	r0, #40960	; 0xa000
    6f68:	973f0100 	ldrls	r0, [pc, -r0, lsl #2]!
    6f6c:	0a000000 	beq	6f74 <__Stack_Size+0x6774>
    6f70:	40010069 	andmi	r0, r1, r9, rrx
    6f74:	0000007e 	andeq	r0, r0, lr, ror r0
    6f78:	17e80e00 	strbne	r0, [r8, r0, lsl #28]!
    6f7c:	26020000 	strcs	r0, [r2], -r0
    6f80:	00019903 	andeq	r9, r1, r3, lsl #18
    6f84:	00780700 	rsbseq	r0, r8, r0, lsl #14
    6f88:	01152602 	tsteq	r5, r2, lsl #12
    6f8c:	61070000 	mrsvs	r0, (UNDEF: 7)
    6f90:	1b260200 	blne	987798 <__Stack_Size+0x986f98>
    6f94:	00000001 	andeq	r0, r0, r1
    6f98:	0018220e 	andseq	r2, r8, lr, lsl #4
    6f9c:	010c0100 	mrseq	r0, (UNDEF: 28)
    6fa0:	000001ca 	andeq	r0, r0, sl, asr #3
    6fa4:	01007807 	tsteq	r0, r7, lsl #16
    6fa8:	0001150c 	andeq	r1, r1, ip, lsl #10
    6fac:	00700700 	rsbseq	r0, r0, r0, lsl #14
    6fb0:	011b0c01 	tsteq	fp, r1, lsl #24
    6fb4:	630a0000 	movwvs	r0, #40960	; 0xa000
    6fb8:	970e0100 	strls	r0, [lr, -r0, lsl #2]
    6fbc:	0a000000 	beq	6fc4 <__Stack_Size+0x67c4>
    6fc0:	0f010069 	svceq	0x00010069
    6fc4:	0000007e 	andeq	r0, r0, lr, ror r0
    6fc8:	17dc0600 	ldrbne	r0, [ip, r0, lsl #12]
    6fcc:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    6fd0:	0001f201 	andeq	pc, r1, r1, lsl #4
    6fd4:	00780700 	rsbseq	r0, r8, r0, lsl #14
    6fd8:	01154901 	tsteq	r5, r1, lsl #18
    6fdc:	63070000 	movwvs	r0, #28672	; 0x7000
    6fe0:	a2490100 	subge	r0, r9, #0, 2
    6fe4:	0a000000 	beq	6fec <__Stack_Size+0x67ec>
    6fe8:	4b010069 	blmi	47194 <__Stack_Size+0x46994>
    6fec:	0000007e 	andeq	r0, r0, lr, ror r0
    6ff0:	01ca0f00 	biceq	r0, sl, r0, lsl #30
    6ff4:	00000000 	andeq	r0, r0, r0
    6ff8:	001e0000 	andseq	r0, lr, r0
    6ffc:	9c010000 	stcls	0, cr0, [r1], {-0}
    7000:	0000023e 	andeq	r0, r0, lr, lsr r2
    7004:	0001d610 	andeq	sp, r1, r0, lsl r6
    7008:	00409e00 	subeq	r9, r0, r0, lsl #28
    700c:	01df1000 	bicseq	r1, pc, r0
    7010:	40cc0000 	sbcmi	r0, ip, r0
    7014:	e8110000 	ldmda	r1, {}	; <UNPREDICTABLE>
    7018:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    701c:	12000041 	andne	r0, r0, #65	; 0x41
    7020:	00000000 	andeq	r0, r0, r0
    7024:	00000d5a 	andeq	r0, r0, sl, asr sp
    7028:	01520113 	cmpeq	r2, r3, lsl r1
    702c:	5101134c 	tstpl	r1, ip, asr #6
    7030:	01133001 	tsteq	r3, r1
    7034:	01f30550 	mvnseq	r0, r0, asr r5
    7038:	00042350 	andeq	r2, r4, r0, asr r3
    703c:	17c80d00 	strbne	r0, [r8, r0, lsl #26]
    7040:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    7044:	0000007e 	andeq	r0, r0, lr, ror r0
    7048:	00026a01 	andeq	r6, r2, r1, lsl #20
    704c:	00700700 	rsbseq	r0, r0, r0, lsl #14
    7050:	011b2801 	tsteq	fp, r1, lsl #16
    7054:	690a0000 	stmdbvs	sl, {}	; <UNPREDICTABLE>
    7058:	7e2a0100 	sufvce	f0, f2, f0
    705c:	0a000000 	beq	7064 <__Stack_Size+0x6864>
    7060:	2b010078 	blcs	47248 <__Stack_Size+0x46a48>
    7064:	0000008c 	andeq	r0, r0, ip, lsl #1
    7068:	17bc0e00 	ldrne	r0, [ip, r0, lsl #28]!
    706c:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    7070:	0002a601 	andeq	sl, r2, r1, lsl #12
    7074:	00780700 	rsbseq	r0, r8, r0, lsl #14
    7078:	01151801 	tsteq	r5, r1, lsl #16
    707c:	70070000 	andvc	r0, r7, r0
    7080:	1b180100 	blne	607488 <__Stack_Size+0x606c88>
    7084:	09000001 	stmdbeq	r0, {r0}
    7088:	0000172b 	andeq	r1, r0, fp, lsr #14
    708c:	02a61a01 	adceq	r1, r6, #4096	; 0x1000
    7090:	630a0000 	movwvs	r0, #40960	; 0xa000
    7094:	971b0100 	ldrls	r0, [fp, -r0, lsl #2]
    7098:	0a000000 	beq	70a0 <__Stack_Size+0x68a0>
    709c:	1c010069 	stcne	0, cr0, [r1], {105}	; 0x69
    70a0:	0000007e 	andeq	r0, r0, lr, ror r0
    70a4:	008c1400 	addeq	r1, ip, r0, lsl #8
    70a8:	02b60000 	adcseq	r0, r6, #0
    70ac:	b8150000 	ldmdalt	r5, {}	; <UNPREDICTABLE>
    70b0:	1f000000 	svcne	0x00000000
    70b4:	16781600 	ldrbtne	r1, [r8], -r0, lsl #12
    70b8:	5b010000 	blpl	470c0 <__Stack_Size+0x468c0>
    70bc:	08003228 	stmdaeq	r0, {r3, r5, r9, ip, sp}
    70c0:	000001a0 	andeq	r0, r0, r0, lsr #3
    70c4:	04d79c01 	ldrbeq	r9, [r7], #3073	; 0xc01
    70c8:	6e170000 	cdpvs	0, 1, cr0, cr7, cr0, {0}
    70cc:	155b0100 	ldrbne	r0, [fp, #-256]	; 0x100
    70d0:	56000001 	strpl	r0, [r0], -r1
    70d4:	17000041 	strne	r0, [r0, -r1, asr #32]
    70d8:	5c010078 	stcpl	0, cr0, [r1], {120}	; 0x78
    70dc:	0000011b 	andeq	r0, r0, fp, lsl r1
    70e0:	00004195 	muleq	r0, r5, r1
    70e4:	6e656c17 	mcrvs	12, 3, r6, cr5, cr7, {0}
    70e8:	ad5c0100 	ldfgee	f0, [ip, #-0]
    70ec:	d4000000 	strle	r0, [r0], #-0
    70f0:	18000041 	stmdane	r0, {r0, r6}
    70f4:	0000179d 	muleq	r0, sp, r7
    70f8:	011b5d01 	tsteq	fp, r1, lsl #26
    70fc:	42180000 	andsmi	r0, r8, #0
    7100:	03090000 	movweq	r0, #36864	; 0x9000
    7104:	01000018 	tsteq	r0, r8, lsl r0
    7108:	0004d75f 	andeq	sp, r4, pc, asr r7
    710c:	17321900 	ldrne	r1, [r2, -r0, lsl #18]!
    7110:	60010000 	andvs	r0, r1, r0
    7114:	000004d7 	ldrdeq	r0, [r0], -r7
    7118:	0000425c 	andeq	r4, r0, ip, asr r2
    711c:	00174019 	andseq	r4, r7, r9, lsl r0
    7120:	d7610100 	strble	r0, [r1, -r0, lsl #2]!
    7124:	7a000004 	bvc	713c <__Stack_Size+0x693c>
    7128:	19000042 	stmdbne	r0, {r1, r6}
    712c:	00001758 	andeq	r1, r0, r8, asr r7
    7130:	04d76201 	ldrbeq	r6, [r7], #513	; 0x201
    7134:	42980000 	addsmi	r0, r8, #0
    7138:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
    713c:	7e630100 	powvcs	f0, f3, f0
    7140:	c3000000 	movwgt	r0, #0
    7144:	1b000042 	blne	7254 <__Stack_Size+0x6a54>
    7148:	0000023e 	andeq	r0, r0, lr, lsr r2
    714c:	08003236 	stmdaeq	r0, {r1, r2, r4, r5, r9, ip, sp}
    7150:	000008a0 	andeq	r0, r0, r0, lsr #17
    7154:	037d5f01 	cmneq	sp, #1, 30
    7158:	4e100000 	cdpmi	0, 1, cr0, cr0, cr0, {0}
    715c:	3c000002 	stccc	0, cr0, [r0], {2}
    7160:	1c000043 	stcne	0, cr0, [r0], {67}	; 0x43
    7164:	000008a0 	andeq	r0, r0, r0, lsr #17
    7168:	00025711 	andeq	r5, r2, r1, lsl r7
    716c:	00438000 	subeq	r8, r3, r0
    7170:	02601100 	rsbeq	r1, r0, #0, 2
    7174:	43de0000 	bicsmi	r0, lr, #0
    7178:	00000000 	andeq	r0, r0, r0
    717c:	0001261d 	andeq	r2, r1, sp, lsl r6
    7180:	00325800 	eorseq	r5, r2, r0, lsl #16
    7184:	00000808 	andeq	r0, r0, r8, lsl #16
    7188:	a35f0100 	cmpge	pc, #0, 2
    718c:	10000003 	andne	r0, r0, r3
    7190:	0000013f 	andeq	r0, r0, pc, lsr r1
    7194:	0000441c 	andeq	r4, r0, ip, lsl r4
    7198:	00013610 	andeq	r3, r1, r0, lsl r6
    719c:	00446c00 	subeq	r6, r4, r0, lsl #24
    71a0:	491d0000 	ldmdbmi	sp, {}	; <UNPREDICTABLE>
    71a4:	08000001 	stmdaeq	r0, {r0}
    71a8:	14080033 	strne	r0, [r8], #-51	; 0x33
    71ac:	01000000 	mrseq	r0, (UNDEF: 0)
    71b0:	0003dd6b 	andeq	sp, r3, fp, ror #26
    71b4:	015e1e00 	cmpeq	lr, r0, lsl #28
    71b8:	551e0000 	ldrpl	r0, [lr, #-0]
    71bc:	1f000001 	svcne	0x00000001
    71c0:	08003308 	stmdaeq	r0, {r3, r8, r9, ip, sp}
    71c4:	00000014 	andeq	r0, r0, r4, lsl r0
    71c8:	00016711 	andeq	r6, r1, r1, lsl r7
    71cc:	00447f00 	subeq	r7, r4, r0, lsl #30
    71d0:	01701100 	cmneq	r0, r0, lsl #2
    71d4:	449d0000 	ldrmi	r0, [sp], #0
    71d8:	00000000 	andeq	r0, r0, r0
    71dc:	00333a20 	eorseq	r3, r3, r0, lsr #20
    71e0:	00006208 	andeq	r6, r0, r8, lsl #4
    71e4:	0004bb00 	andeq	fp, r4, r0, lsl #22
    71e8:	69621a00 	stmdbvs	r2!, {r9, fp, ip}^
    71ec:	70010074 	andvc	r0, r1, r4, ror r0
    71f0:	00000121 	andeq	r0, r0, r1, lsr #2
    71f4:	000044c8 	andeq	r4, r0, r8, asr #9
    71f8:	0001491b 	andeq	r4, r1, fp, lsl r9
    71fc:	00334600 	eorseq	r4, r3, r0, lsl #12
    7200:	0008c008 	andeq	ip, r8, r8
    7204:	33720100 	cmncc	r2, #0, 2
    7208:	10000004 	andne	r0, r0, r4
    720c:	0000015e 	andeq	r0, r0, lr, asr r1
    7210:	000044db 	ldrdeq	r4, [r0], -fp
    7214:	0001551e 	andeq	r5, r1, lr, lsl r5
    7218:	08c01c00 	stmiaeq	r0, {sl, fp, ip}^
    721c:	67110000 	ldrvs	r0, [r1, -r0]
    7220:	ef000001 	svc	0x00000001
    7224:	11000044 	tstne	r0, r4, asr #32
    7228:	00000170 	andeq	r0, r0, r0, ror r1
    722c:	0000450e 	andeq	r4, r0, lr, lsl #10
    7230:	6a210000 	bvs	847238 <__Stack_Size+0x846a38>
    7234:	62000002 	andvs	r0, r0, #2
    7238:	d8080033 	stmdale	r8, {r0, r1, r4, r5}
    723c:	01000008 	tsteq	r0, r8
    7240:	027f1e74 	rsbseq	r1, pc, #116, 28	; 0x740
    7244:	76100000 	ldrvc	r0, [r0], -r0
    7248:	45000002 	strmi	r0, [r0, #-2]
    724c:	1c000045 	stcne	0, cr0, [r0], {69}	; 0x45
    7250:	000008d8 	ldrdeq	r0, [r0], -r8
    7254:	00028822 	andeq	r8, r2, r2, lsr #16
    7258:	b8910300 	ldmlt	r1, {r8, r9}
    725c:	0293117f 	addseq	r1, r3, #-1073741793	; 0xc000001f
    7260:	45580000 	ldrbmi	r0, [r8, #-0]
    7264:	9c110000 	ldcls	0, cr0, [r1], {-0}
    7268:	90000002 	andls	r0, r0, r2
    726c:	23000045 	movwcs	r0, #69	; 0x45
    7270:	000000c8 	andeq	r0, r0, r8, asr #1
    7274:	08003382 	stmdaeq	r0, {r1, r7, r8, r9, ip, sp}
    7278:	0000001a 	andeq	r0, r0, sl, lsl r0
    727c:	f5102401 			; <UNDEFINED> instruction: 0xf5102401
    7280:	c7000000 	strgt	r0, [r0, -r0]
    7284:	1e000045 	cdpne	0, 0, cr0, cr0, cr5, {2}
    7288:	000000ea 	andeq	r0, r0, sl, ror #1
    728c:	0000df10 	andeq	sp, r0, r0, lsl pc
    7290:	0045e800 	subeq	lr, r5, r0, lsl #16
    7294:	00d41e00 	sbcseq	r1, r4, r0, lsl #28
    7298:	821f0000 	andshi	r0, pc, #0
    729c:	1a080033 	bne	207370 <__Stack_Size+0x206b70>
    72a0:	11000000 	mrsne	r0, (UNDEF: 0)
    72a4:	00000100 	andeq	r0, r0, r0, lsl #2
    72a8:	000045fb 	strdeq	r4, [r0], -fp
    72ac:	00010b11 	andeq	r0, r1, r1, lsl fp
    72b0:	00460e00 	subeq	r0, r6, r0, lsl #28
    72b4:	00000000 	andeq	r0, r0, r0
    72b8:	6e240000 	cdpvs	0, 2, cr0, cr4, cr0, {0}
    72bc:	5a080032 	bpl	20738c <__Stack_Size+0x206b8c>
    72c0:	1300000d 	movwne	r0, #13
    72c4:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    72c8:	51011320 	tstpl	r1, r0, lsr #6
    72cc:	01133001 	tsteq	r3, r1
    72d0:	00740250 	rsbseq	r0, r4, r0, asr r2
    72d4:	7e0c0000 	cdpvc	0, 0, cr0, cr12, cr0, {0}
    72d8:	16000000 	strne	r0, [r0], -r0
    72dc:	00001811 	andeq	r1, r0, r1, lsl r8
    72e0:	00007801 	andeq	r7, r0, r1, lsl #16
    72e4:	002c0000 	eoreq	r0, ip, r0
    72e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    72ec:	00000561 	andeq	r0, r0, r1, ror #10
    72f0:	01007817 	tsteq	r0, r7, lsl r8
    72f4:	00011578 	andeq	r1, r1, r8, ror r5
    72f8:	00462d00 	subeq	r2, r6, r0, lsl #26
    72fc:	179d1800 	ldrne	r1, [sp, r0, lsl #16]
    7300:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    7304:	0000011b 	andeq	r0, r0, fp, lsl r1
    7308:	00004656 	andeq	r4, r0, r6, asr r6
    730c:	01006e25 	tsteq	r0, r5, lsr #28
    7310:	0002a67a 	andeq	sl, r2, sl, ror r6
    7314:	50910200 	addspl	r0, r1, r0, lsl #4
    7318:	00017a1d 	andeq	r7, r1, sp, lsl sl
    731c:	00000000 	andeq	r0, r0, r0
    7320:	00001600 	andeq	r1, r0, r0, lsl #12
    7324:	3d7d0100 	ldfcce	f0, [sp, #-0]
    7328:	10000005 	andne	r0, r0, r5
    732c:	0000018f 	andeq	r0, r0, pc, lsl #3
    7330:	00004682 	andeq	r4, r0, r2, lsl #13
    7334:	00018626 	andeq	r8, r1, r6, lsr #12
    7338:	00550100 	subseq	r0, r5, r0, lsl #2
    733c:	00000024 	andeq	r0, r0, r4, lsr #32
    7340:	0002b600 	andeq	fp, r2, r0, lsl #12
    7344:	53011300 	movwpl	r1, #4864	; 0x1300
    7348:	5101f303 	tstpl	r1, r3, lsl #6
    734c:	02520113 	subseq	r0, r2, #-1073741820	; 0xc0000004
    7350:	01132008 	tsteq	r3, r8
    7354:	00750251 	rsbseq	r0, r5, r1, asr r2
    7358:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    735c:	0000007d 	andeq	r0, r0, sp, ror r0
    7360:	0017d227 	andseq	sp, r7, r7, lsr #4
    7364:	8c800100 	stfhis	f0, [r0], {0}
    7368:	00000000 	andeq	r0, r0, r0
    736c:	9a000000 	bls	7374 <__Stack_Size+0x6b74>
    7370:	01000000 	mrseq	r0, (UNDEF: 0)
    7374:	0005b19c 	muleq	r5, ip, r1
    7378:	00781700 	rsbseq	r1, r8, r0, lsl #14
    737c:	011b8001 	tsteq	fp, r1
    7380:	46a20000 	strtmi	r0, [r2], r0
    7384:	79170000 	ldmdbvc	r7, {}	; <UNPREDICTABLE>
    7388:	1b800100 	blne	fe007790 <BootRAM+0xcf77f31>
    738c:	ce000001 	cdpgt	0, 0, cr0, cr0, cr1, {0}
    7390:	1a000046 	bne	74b0 <__Stack_Size+0x6cb0>
    7394:	006d7573 	rsbeq	r7, sp, r3, ror r5
    7398:	008c8201 	addeq	r8, ip, r1, lsl #4
    739c:	46fa0000 	ldrbtmi	r0, [sl], r0
    73a0:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
    73a4:	7e830100 	rmfvcs	f0, f3, f0
    73a8:	42000000 	andmi	r0, r0, #0
    73ac:	00000047 	andeq	r0, r0, r7, asr #32
    73b0:	0000c80f 	andeq	ip, r0, pc, lsl #16
    73b4:	00000000 	andeq	r0, r0, r0
    73b8:	0000c200 	andeq	ip, r0, r0, lsl #4
    73bc:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    73c0:	26000005 	strcs	r0, [r0], -r5
    73c4:	000000d4 	ldrdeq	r0, [r0], -r4
    73c8:	df105001 	svcle	0x00105001
    73cc:	85000000 	strhi	r0, [r0, #-0]
    73d0:	10000047 	andne	r0, r0, r7, asr #32
    73d4:	000000ea 	andeq	r0, r0, sl, ror #1
    73d8:	000047b1 			; <UNDEFINED> instruction: 0x000047b1
    73dc:	0000f510 	andeq	pc, r0, r0, lsl r5	; <UNPREDICTABLE>
    73e0:	0047dd00 	subeq	sp, r7, r0, lsl #26
    73e4:	01001100 	mrseq	r1, (UNDEF: 16)
    73e8:	47fe0000 	ldrbmi	r0, [lr, r0]!
    73ec:	0b110000 	bleq	4473f4 <__Stack_Size+0x446bf4>
    73f0:	27000001 	strcs	r0, [r0, -r1]
    73f4:	00000048 	andeq	r0, r0, r8, asr #32
    73f8:	00178a06 	andseq	r8, r7, r6, lsl #20
    73fc:	019a0100 	orrseq	r0, sl, r0, lsl #2
    7400:	00000623 	andeq	r0, r0, r3, lsr #12
    7404:	01007207 	tsteq	r0, r7, lsl #4
    7408:	0001159a 	muleq	r1, sl, r5
    740c:	00610700 	rsbeq	r0, r1, r0, lsl #14
    7410:	011b9a01 	tsteq	fp, r1, lsl #20
    7414:	9d080000 	stcls	0, cr0, [r8, #-0]
    7418:	01000017 	tsteq	r0, r7, lsl r0
    741c:	00011b9a 	muleq	r1, sl, fp
    7420:	f90f0000 			; <UNDEFINED> instruction: 0xf90f0000
    7424:	00000005 	andeq	r0, r0, r5
    7428:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    742c:	01000000 	mrseq	r0, (UNDEF: 0)
    7430:	0007149c 	muleq	r7, ip, r4
    7434:	06052600 	streq	r2, [r5], -r0, lsl #12
    7438:	50010000 	andpl	r0, r1, r0
    743c:	00060e10 	andeq	r0, r6, r0, lsl lr
    7440:	00485200 	subeq	r5, r8, r0, lsl #4
    7444:	06171000 	ldreq	r1, [r7], -r0
    7448:	48730000 	ldmdami	r3!, {}^	; <UNPREDICTABLE>
    744c:	991b0000 	ldmdbls	fp, {}	; <UNPREDICTABLE>
    7450:	00000001 	andeq	r0, r0, r1
    7454:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    7458:	01000008 	tsteq	r0, r8
    745c:	00068b9c 	muleq	r6, ip, fp
    7460:	01ae1000 			; <UNDEFINED> instruction: 0x01ae1000
    7464:	48940000 	ldmmi	r4, {}	; <UNPREDICTABLE>
    7468:	a5260000 	strge	r0, [r6, #-0]!
    746c:	01000001 	tsteq	r0, r1
    7470:	08f01c50 	ldmeq	r0!, {r4, r6, sl, fp, ip}^
    7474:	b7110000 	ldrlt	r0, [r1, -r0]
    7478:	b5000001 	strlt	r0, [r0, #-1]
    747c:	11000048 	tstne	r0, r8, asr #32
    7480:	000001c0 	andeq	r0, r0, r0, asr #3
    7484:	000048d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    7488:	6a230000 	bvs	8c7490 <__Stack_Size+0x8c6c90>
    748c:	00000002 	andeq	r0, r0, r2
    7490:	32000000 	andcc	r0, r0, #0
    7494:	01000000 	mrseq	r0, (UNDEF: 0)
    7498:	027f1e9d 	rsbseq	r1, pc, #2512	; 0x9d0
    749c:	761e0000 	ldrvc	r0, [lr], -r0
    74a0:	1f000002 	svcne	0x00000002
    74a4:	00000000 	andeq	r0, r0, r0
    74a8:	00000032 	andeq	r0, r0, r2, lsr r0
    74ac:	00028822 	andeq	r8, r2, r2, lsr #16
    74b0:	50910200 	addspl	r0, r1, r0, lsl #4
    74b4:	00029311 	andeq	r9, r2, r1, lsl r3
    74b8:	00490b00 	subeq	r0, r9, r0, lsl #22
    74bc:	029c1100 	addseq	r1, ip, #0, 2
    74c0:	49370000 	ldmdbmi	r7!, {}	; <UNPREDICTABLE>
    74c4:	c8230000 	stmdagt	r3!, {}	; <UNPREDICTABLE>
    74c8:	00000000 	andeq	r0, r0, r0
    74cc:	1a000000 	bne	74d4 <__Stack_Size+0x6cd4>
    74d0:	01000000 	mrseq	r0, (UNDEF: 0)
    74d4:	00f51024 	rscseq	r1, r5, r4, lsr #32
    74d8:	49620000 	stmdbmi	r2!, {}^	; <UNPREDICTABLE>
    74dc:	ea260000 	b	9874e4 <__Stack_Size+0x986ce4>
    74e0:	01000000 	mrseq	r0, (UNDEF: 0)
    74e4:	00df1050 	sbcseq	r1, pc, r0, asr r0	; <UNPREDICTABLE>
    74e8:	49830000 	stmibmi	r3, {}	; <UNPREDICTABLE>
    74ec:	d4260000 	strtle	r0, [r6], #-0
    74f0:	01000000 	mrseq	r0, (UNDEF: 0)
    74f4:	00001f50 	andeq	r1, r0, r0, asr pc
    74f8:	001a0000 	andseq	r0, sl, r0
    74fc:	00220000 	eoreq	r0, r2, r0
    7500:	01000001 	tsteq	r0, r1
    7504:	010b1151 	tsteq	fp, r1, asr r1
    7508:	49b00000 	ldmibmi	r0!, {}	; <UNPREDICTABLE>
    750c:	00000000 	andeq	r0, r0, r0
    7510:	16000000 	strne	r0, [r0], -r0
    7514:	0000177f 	andeq	r1, r0, pc, ror r7
    7518:	0000a001 	andeq	sl, r0, r1
    751c:	008e0000 	addeq	r0, lr, r0
    7520:	9c010000 	stcls	0, cr0, [r1], {-0}
    7524:	000008a9 	andeq	r0, r0, r9, lsr #17
    7528:	01007228 	tsteq	r0, r8, lsr #4
    752c:	000115a0 	andeq	r1, r1, r0, lsr #11
    7530:	17500100 	ldrbne	r0, [r0, -r0, lsl #2]
    7534:	a0010061 	andge	r0, r1, r1, rrx
    7538:	0000011b 	andeq	r0, r0, fp, lsl r1
    753c:	000049cf 	andeq	r4, r0, pc, asr #19
    7540:	00179d18 	andseq	r9, r7, r8, lsl sp
    7544:	1ba00100 	blne	fe80794c <BootRAM+0xd7780ed>
    7548:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
    754c:	1b000049 	blne	7678 <__Stack_Size+0x6e78>
    7550:	00000199 	muleq	r0, r9, r1
    7554:	00000000 	andeq	r0, r0, r0
    7558:	00000908 	andeq	r0, r0, r8, lsl #18
    755c:	078ca201 	streq	sl, [ip, r1, lsl #4]
    7560:	ae100000 	cdpge	0, 1, cr0, cr0, cr0, {0}
    7564:	11000001 	tstne	r0, r1
    7568:	2600004a 	strcs	r0, [r0], -sl, asr #32
    756c:	000001a5 	andeq	r0, r0, r5, lsr #3
    7570:	081c5001 	ldmdaeq	ip, {r0, ip, lr}
    7574:	11000009 	tstne	r0, r9
    7578:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
    757c:	00004a32 	andeq	r4, r0, r2, lsr sl
    7580:	0001c011 	andeq	ip, r1, r1, lsl r0
    7584:	004a5100 	subeq	r5, sl, r0, lsl #2
    7588:	1d000000 	stcne	0, cr0, [r0, #-0]
    758c:	0000026a 	andeq	r0, r0, sl, ror #4
    7590:	00000000 	andeq	r0, r0, r0
    7594:	00000032 	andeq	r0, r0, r2, lsr r0
    7598:	081aa301 	ldmdaeq	sl, {r0, r8, r9, sp, pc}
    759c:	7f1e0000 	svcvc	0x001e0000
    75a0:	1e000002 	cdpne	0, 0, cr0, cr0, cr2, {0}
    75a4:	00000276 	andeq	r0, r0, r6, ror r2
    75a8:	0000001f 	andeq	r0, r0, pc, lsl r0
    75ac:	00003200 	andeq	r3, r0, r0, lsl #4
    75b0:	02882200 	addeq	r2, r8, #0, 4
    75b4:	91020000 	mrsls	r0, (UNDEF: 2)
    75b8:	02931150 	addseq	r1, r3, #80, 2
    75bc:	4a880000 	bmi	fe2075c4 <BootRAM+0xd177d65>
    75c0:	9c110000 	ldcls	0, cr0, [r1], {-0}
    75c4:	b4000002 	strlt	r0, [r0], #-2
    75c8:	2300004a 	movwcs	r0, #74	; 0x4a
    75cc:	000000c8 	andeq	r0, r0, r8, asr #1
    75d0:	00000000 	andeq	r0, r0, r0
    75d4:	0000001a 	andeq	r0, r0, sl, lsl r0
    75d8:	f5102401 			; <UNDEFINED> instruction: 0xf5102401
    75dc:	df000000 	svcle	0x00000000
    75e0:	2600004a 	strcs	r0, [r0], -sl, asr #32
    75e4:	000000ea 	andeq	r0, r0, sl, ror #1
    75e8:	df105001 	svcle	0x00105001
    75ec:	00000000 	andeq	r0, r0, r0
    75f0:	2600004b 	strcs	r0, [r0], -fp, asr #32
    75f4:	000000d4 	ldrdeq	r0, [r0], -r4
    75f8:	001f5001 	andseq	r5, pc, r1
    75fc:	1a000000 	bne	7604 <__Stack_Size+0x6e04>
    7600:	11000000 	mrsne	r0, (UNDEF: 0)
    7604:	00000100 	andeq	r0, r0, r0, lsl #2
    7608:	00004b2d 	andeq	r4, r0, sp, lsr #22
    760c:	00010b11 	andeq	r0, r1, r1, lsl fp
    7610:	004b4000 	subeq	r4, fp, r0
    7614:	00000000 	andeq	r0, r0, r0
    7618:	026a2300 	rsbeq	r2, sl, #0, 6
    761c:	00000000 	andeq	r0, r0, r0
    7620:	00360000 	eorseq	r0, r6, r0
    7624:	a4010000 	strge	r0, [r1], #-0
    7628:	00027f10 	andeq	r7, r2, r0, lsl pc
    762c:	004b5f00 	subeq	r5, fp, r0, lsl #30
    7630:	02762600 	rsbseq	r2, r6, #0, 12
    7634:	50010000 	andpl	r0, r1, r0
    7638:	0000001f 	andeq	r0, r0, pc, lsl r0
    763c:	00003600 	andeq	r3, r0, r0, lsl #12
    7640:	02882200 	addeq	r2, r8, #0, 4
    7644:	91020000 	mrsls	r0, (UNDEF: 2)
    7648:	02931150 	addseq	r1, r3, #80, 2
    764c:	4b800000 	blmi	fe007654 <BootRAM+0xcf77df5>
    7650:	9c110000 	ldcls	0, cr0, [r1], {-0}
    7654:	b8000002 	stmdalt	r0, {r1}
    7658:	2300004b 	movwcs	r0, #75	; 0x4b
    765c:	000000c8 	andeq	r0, r0, r8, asr #1
    7660:	00000000 	andeq	r0, r0, r0
    7664:	0000001a 	andeq	r0, r0, sl, lsl r0
    7668:	f5102401 			; <UNDEFINED> instruction: 0xf5102401
    766c:	ef000000 	svc	0x00000000
    7670:	2600004b 	strcs	r0, [r0], -fp, asr #32
    7674:	000000ea 	andeq	r0, r0, sl, ror #1
    7678:	df105001 	svcle	0x00105001
    767c:	10000000 	andne	r0, r0, r0
    7680:	2600004c 	strcs	r0, [r0], -ip, asr #32
    7684:	000000d4 	ldrdeq	r0, [r0], -r4
    7688:	001f5001 	andseq	r5, pc, r1
    768c:	1a000000 	bne	7694 <__Stack_Size+0x6e94>
    7690:	22000000 	andcs	r0, r0, #0
    7694:	00000100 	andeq	r0, r0, r0, lsl #2
    7698:	0b115101 	bleq	45baa4 <__Stack_Size+0x45b2a4>
    769c:	3d000001 	stccc	0, cr0, [r0, #-4]
    76a0:	0000004c 	andeq	r0, r0, ip, asr #32
    76a4:	00000000 	andeq	r0, r0, r0
    76a8:	0017a516 	andseq	sl, r7, r6, lsl r5
    76ac:	00a70100 	adceq	r0, r7, r0, lsl #2
    76b0:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    76b4:	01000001 	tsteq	r0, r1
    76b8:	000b9b9c 	muleq	fp, ip, fp
    76bc:	00721700 	rsbseq	r1, r2, r0, lsl #14
    76c0:	0115a701 	tsteq	r5, r1, lsl #14
    76c4:	4c5c0000 	mrami	r0, ip, acc0
    76c8:	61170000 	tstvs	r7, r0
    76cc:	1ba70100 	blne	fe9c7ad4 <BootRAM+0xd938275>
    76d0:	7a000001 	bvc	76dc <__Stack_Size+0x6edc>
    76d4:	1700004c 	strne	r0, [r0, -ip, asr #32]
    76d8:	a7010062 	strge	r0, [r1, -r2, rrx]
    76dc:	0000011b 	andeq	r0, r0, fp, lsl r1
    76e0:	00004c98 	muleq	r0, r8, ip
    76e4:	00179d18 	andseq	r9, r7, r8, lsl sp
    76e8:	1ba80100 	blne	fea07af0 <BootRAM+0xd978291>
    76ec:	b6000001 	strlt	r0, [r0], -r1
    76f0:	1a00004c 	bne	7828 <__Stack_Size+0x7028>
    76f4:	aa010069 	bge	478a0 <__Stack_Size+0x470a0>
    76f8:	0000007e 	andeq	r0, r0, lr, ror r0
    76fc:	00004cd4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    7700:	00023e1b 	andeq	r3, r2, fp, lsl lr
    7704:	00000000 	andeq	r0, r0, r0
    7708:	00092000 	andeq	r2, r9, r0
    770c:	34ae0100 	strtcc	r0, [lr], #256	; 0x100
    7710:	26000009 	strcs	r0, [r0], -r9
    7714:	0000024e 	andeq	r0, r0, lr, asr #4
    7718:	201c5701 	andscs	r5, ip, r1, lsl #14
    771c:	11000009 	tstne	r0, r9
    7720:	00000257 	andeq	r0, r0, r7, asr r2
    7724:	00004d01 	andeq	r4, r0, r1, lsl #26
    7728:	00026011 	andeq	r6, r2, r1, lsl r0
    772c:	004d5200 	subeq	r5, sp, r0, lsl #4
    7730:	20000000 	andcs	r0, r0, r0
    7734:	00000000 	andeq	r0, r0, r0
    7738:	000000ea 	andeq	r0, r0, sl, ror #1
    773c:	00000b7f 	andeq	r0, r0, pc, ror fp
    7740:	7469621a 	strbtvc	r6, [r9], #-538	; 0x21a
    7744:	21af0100 			; <UNDEFINED> instruction: 0x21af0100
    7748:	84000001 	strhi	r0, [r0], #-1
    774c:	2900004d 	stmdbcs	r0, {r0, r2, r3, r6}
    7750:	0000175e 	andeq	r1, r0, lr, asr r7
    7754:	02a6b001 	adceq	fp, r6, #1
    7758:	91030000 	mrsls	r0, (UNDEF: 3)
    775c:	491b7f98 	ldmdbmi	fp, {r3, r4, r7, r8, r9, sl, fp, ip, sp, lr}
    7760:	00000001 	andeq	r0, r0, r1
    7764:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    7768:	01000009 	tsteq	r0, r9
    776c:	000999b2 			; <UNDEFINED> instruction: 0x000999b2
    7770:	015e1000 	cmpeq	lr, r0
    7774:	4da50000 	stcmi	0, cr0, [r5]
    7778:	551e0000 	ldrpl	r0, [lr, #-0]
    777c:	1c000001 	stcne	0, cr0, [r0], {1}
    7780:	00000938 	andeq	r0, r0, r8, lsr r9
    7784:	00016711 	andeq	r6, r1, r1, lsl r7
    7788:	004db900 	subeq	fp, sp, r0, lsl #18
    778c:	01701100 	cmneq	r0, r0, lsl #2
    7790:	4dd80000 	ldclmi	0, cr0, [r8]
    7794:	00000000 	andeq	r0, r0, r0
    7798:	00026a1d 	andeq	r6, r2, sp, lsl sl
    779c:	00000000 	andeq	r0, r0, r0
    77a0:	00002e00 	andeq	r2, r0, r0, lsl #28
    77a4:	24b30100 	ldrtcs	r0, [r3], #256	; 0x100
    77a8:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    77ac:	0000027f 	andeq	r0, r0, pc, ror r2
    77b0:	0002761e 	andeq	r7, r2, lr, lsl r6
    77b4:	00001f00 	andeq	r1, r0, r0, lsl #30
    77b8:	002e0000 	eoreq	r0, lr, r0
    77bc:	88220000 	stmdahi	r2!, {}	; <UNPREDICTABLE>
    77c0:	03000002 	movweq	r0, #2
    77c4:	117fb891 			; <UNDEFINED> instruction: 0x117fb891
    77c8:	00000293 	muleq	r0, r3, r2
    77cc:	00004e0f 	andeq	r4, r0, pc, lsl #28
    77d0:	00029c11 	andeq	r9, r2, r1, lsl ip
    77d4:	004e3b00 	subeq	r3, lr, r0, lsl #22
    77d8:	00c82300 	sbceq	r2, r8, r0, lsl #6
    77dc:	00000000 	andeq	r0, r0, r0
    77e0:	00180000 	andseq	r0, r8, r0
    77e4:	24010000 	strcs	r0, [r1], #-0
    77e8:	0000f510 	andeq	pc, r0, r0, lsl r5	; <UNPREDICTABLE>
    77ec:	004e6600 	subeq	r6, lr, r0, lsl #12
    77f0:	00ea1e00 	rsceq	r1, sl, r0, lsl #28
    77f4:	df100000 	svcle	0x00100000
    77f8:	87000000 	strhi	r0, [r0, -r0]
    77fc:	1e00004e 	cdpne	0, 0, cr0, cr0, cr14, {2}
    7800:	000000d4 	ldrdeq	r0, [r0], -r4
    7804:	0000001f 	andeq	r0, r0, pc, lsl r0
    7808:	00001800 	andeq	r1, r0, r0, lsl #16
    780c:	01001100 	mrseq	r1, (UNDEF: 16)
    7810:	4e9a0000 	cdpmi	0, 9, cr0, cr10, cr0, {0}
    7814:	0b110000 	bleq	44781c <__Stack_Size+0x44701c>
    7818:	ad000001 	stcge	0, cr0, [r0, #-4]
    781c:	0000004e 	andeq	r0, r0, lr, asr #32
    7820:	1b000000 	blne	7828 <__Stack_Size+0x7028>
    7824:	0000017a 	andeq	r0, r0, sl, ror r1
    7828:	00000000 	andeq	r0, r0, r0
    782c:	00000950 	andeq	r0, r0, r0, asr r9
    7830:	0a4ab501 	beq	12b4c3c <__Stack_Size+0x12b443c>
    7834:	8f100000 	svchi	0x00100000
    7838:	cc000001 	stcgt	0, cr0, [r0], {1}
    783c:	1000004e 	andne	r0, r0, lr, asr #32
    7840:	00000186 	andeq	r0, r0, r6, lsl #3
    7844:	00004edf 	ldrdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    7848:	05f91b00 	ldrbeq	r1, [r9, #2816]!	; 0xb00
    784c:	00000000 	andeq	r0, r0, r0
    7850:	09680000 	stmdbeq	r8!, {}^	; <UNPREDICTABLE>
    7854:	b6010000 	strlt	r0, [r1], -r0
    7858:	00000b36 	andeq	r0, r0, r6, lsr fp
    785c:	0006171e 	andeq	r1, r6, lr, lsl r7
    7860:	060e1e00 	streq	r1, [lr], -r0, lsl #28
    7864:	05100000 	ldreq	r0, [r0, #-0]
    7868:	f2000006 	vhadd.s8	d0, d0, d6
    786c:	1b00004e 	blne	79ac <__Stack_Size+0x71ac>
    7870:	00000199 	muleq	r0, r9, r1
    7874:	00000000 	andeq	r0, r0, r0
    7878:	00000980 	andeq	r0, r0, r0, lsl #19
    787c:	0aa69c01 	beq	fe9ae888 <BootRAM+0xd91f029>
    7880:	ae1e0000 	cdpge	0, 1, cr0, cr14, cr0, {0}
    7884:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    7888:	000001a5 	andeq	r0, r0, r5, lsr #3
    788c:	0009801c 	andeq	r8, r9, ip, lsl r0
    7890:	01b71100 			; <UNDEFINED> instruction: 0x01b71100
    7894:	4f050000 	svcmi	0x00050000
    7898:	c0110000 	andsgt	r0, r1, r0
    789c:	3a000001 	bcc	78a8 <__Stack_Size+0x70a8>
    78a0:	0000004f 	andeq	r0, r0, pc, asr #32
    78a4:	026a2300 	rsbeq	r2, sl, #0, 6
    78a8:	00000000 	andeq	r0, r0, r0
    78ac:	00340000 	eorseq	r0, r4, r0
    78b0:	9d010000 	stcls	0, cr0, [r1, #-0]
    78b4:	00027f1e 	andeq	r7, r2, lr, lsl pc
    78b8:	02761e00 	rsbseq	r1, r6, #0, 28
    78bc:	001f0000 	andseq	r0, pc, r0
    78c0:	34000000 	strcc	r0, [r0], #-0
    78c4:	22000000 	andcs	r0, r0, #0
    78c8:	00000288 	andeq	r0, r0, r8, lsl #5
    78cc:	7fb89103 	svcvc	0x00b89103
    78d0:	00029311 	andeq	r9, r2, r1, lsl r3
    78d4:	004f7100 	subeq	r7, pc, r0, lsl #2
    78d8:	029c1100 	addseq	r1, ip, #0, 2
    78dc:	4f9d0000 	svcmi	0x009d0000
    78e0:	c8230000 	stmdagt	r3!, {}	; <UNPREDICTABLE>
    78e4:	00000000 	andeq	r0, r0, r0
    78e8:	1c000000 	stcne	0, cr0, [r0], {-0}
    78ec:	01000000 	mrseq	r0, (UNDEF: 0)
    78f0:	00f51024 	rscseq	r1, r5, r4, lsr #32
    78f4:	4fc80000 	svcmi	0x00c80000
    78f8:	ea100000 	b	407900 <__Stack_Size+0x407100>
    78fc:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
    7900:	1000004f 	andne	r0, r0, pc, asr #32
    7904:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7908:	00004ffc 	strdeq	r4, [r0], -ip
    790c:	0000d410 	andeq	sp, r0, r0, lsl r4
    7910:	004fe900 	subeq	lr, pc, r0, lsl #18
    7914:	00001f00 	andeq	r1, r0, r0, lsl #30
    7918:	001c0000 	andseq	r0, ip, r0
    791c:	00110000 	andseq	r0, r1, r0
    7920:	0f000001 	svceq	0x00000001
    7924:	11000050 	qaddne	r0, r0, r0
    7928:	0000010b 	andeq	r0, r0, fp, lsl #2
    792c:	00005022 	andeq	r5, r0, r2, lsr #32
    7930:	00000000 	andeq	r0, r0, r0
    7934:	00c82300 	sbceq	r2, r8, r0, lsl #6
    7938:	00000000 	andeq	r0, r0, r0
    793c:	00200000 	eoreq	r0, r0, r0
    7940:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    7944:	0000f510 	andeq	pc, r0, r0, lsl r5	; <UNPREDICTABLE>
    7948:	00504100 	subseq	r4, r0, r0, lsl #2
    794c:	00ea1000 	rsceq	r1, sl, r0
    7950:	50620000 	rsbpl	r0, r2, r0
    7954:	df1e0000 	svcle	0x001e0000
    7958:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    795c:	000000d4 	ldrdeq	r0, [r0], -r4
    7960:	0000001f 	andeq	r0, r0, pc, lsl r0
    7964:	00002000 	andeq	r2, r0, r0
    7968:	01001100 	mrseq	r1, (UNDEF: 16)
    796c:	50750000 	rsbspl	r0, r5, r0
    7970:	0b110000 	bleq	447978 <__Stack_Size+0x447178>
    7974:	88000001 	stmdahi	r0, {r0}
    7978:	00000050 	andeq	r0, r0, r0, asr r0
    797c:	00240000 	eoreq	r0, r4, r0
    7980:	5a000000 	bpl	7988 <__Stack_Size+0x7188>
    7984:	1300000d 	movwne	r0, #13
    7988:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    798c:	51011320 	tstpl	r1, r0, lsr #6
    7990:	01133001 	tsteq	r3, r1
    7994:	00750250 	rsbseq	r0, r5, r0, asr r2
    7998:	4d160000 	ldcmi	0, cr0, [r6, #-0]
    799c:	01000017 	tsteq	r0, r7, lsl r0
    79a0:	000000bc 	strheq	r0, [r0], -ip
    79a4:	0000d200 	andeq	sp, r0, r0, lsl #4
    79a8:	2e9c0100 	fmlcse	f0, f4, f0
    79ac:	1700000d 	strne	r0, [r0, -sp]
    79b0:	bc010072 	stclt	0, cr0, [r1], {114}	; 0x72
    79b4:	00000115 	andeq	r0, r0, r5, lsl r1
    79b8:	000050a7 	andeq	r5, r0, r7, lsr #1
    79bc:	01006117 	tsteq	r0, r7, lsl r1
    79c0:	00011bbc 			; <UNDEFINED> instruction: 0x00011bbc
    79c4:	0050c500 	subseq	ip, r0, r0, lsl #10
    79c8:	179d1800 	ldrne	r1, [sp, r0, lsl #16]
    79cc:	bc010000 	stclt	0, cr0, [r1], {-0}
    79d0:	0000011b 	andeq	r0, r0, fp, lsl r1
    79d4:	000050e3 	andeq	r5, r0, r3, ror #1
    79d8:	326d7025 	rsbcc	r7, sp, #37	; 0x25
    79dc:	a6be0100 	ldrtge	r0, [lr], r0, lsl #2
    79e0:	03000002 	movweq	r0, #2
    79e4:	1a7fa891 	bne	1ff1c30 <__Stack_Size+0x1ff1430>
    79e8:	bf010063 	svclt	0x00010063
    79ec:	00000097 	muleq	r0, r7, r0
    79f0:	00005101 	andeq	r5, r0, r1, lsl #2
    79f4:	0100691a 	tsteq	r0, sl, lsl r9
    79f8:	00007ec0 	andeq	r7, r0, r0, asr #29
    79fc:	00513600 	subseq	r3, r1, r0, lsl #12
    7a00:	017a1b00 	cmneq	sl, r0, lsl #22
    7a04:	00000000 	andeq	r0, r0, r0
    7a08:	09980000 	ldmibeq	r8, {}	; <UNPREDICTABLE>
    7a0c:	c3010000 	movwgt	r0, #4096	; 0x1000
    7a10:	00000c28 	andeq	r0, r0, r8, lsr #24
    7a14:	00018f10 	andeq	r8, r1, r0, lsl pc
    7a18:	0051b500 	subseq	fp, r1, r0, lsl #10
    7a1c:	01861000 	orreq	r1, r6, r0
    7a20:	51d30000 	bicspl	r0, r3, r0
    7a24:	1d000000 	stcne	0, cr0, [r0, #-0]
    7a28:	000001ca 	andeq	r0, r0, sl, asr #3
    7a2c:	00000000 	andeq	r0, r0, r0
    7a30:	00000018 	andeq	r0, r0, r8, lsl r0
    7a34:	0c5dcb01 	mrrceq	11, 0, ip, sp, cr1
    7a38:	df100000 	svcle	0x00100000
    7a3c:	ff000001 			; <UNDEFINED> instruction: 0xff000001
    7a40:	1e000051 	mcrne	0, 0, r0, cr0, cr1, {2}
    7a44:	000001d6 	ldrdeq	r0, [r0], -r6
    7a48:	0000001f 	andeq	r0, r0, pc, lsl r0
    7a4c:	00001800 	andeq	r1, r0, r0, lsl #16
    7a50:	01e81100 	mvneq	r1, r0, lsl #2
    7a54:	521f0000 	andspl	r0, pc, #0
    7a58:	00000000 	andeq	r0, r0, r0
    7a5c:	00023e1b 	andeq	r3, r2, fp, lsl lr
    7a60:	00000000 	andeq	r0, r0, r0
    7a64:	0009b800 	andeq	fp, r9, r0, lsl #16
    7a68:	8ecd0100 	polhie	f0, f5, f0
    7a6c:	1e00000c 	cdpne	0, 0, cr0, cr0, cr12, {0}
    7a70:	0000024e 	andeq	r0, r0, lr, asr #4
    7a74:	0009b81c 	andeq	fp, r9, ip, lsl r8
    7a78:	02571100 	subseq	r1, r7, #0, 2
    7a7c:	52630000 	rsbpl	r0, r3, #0
    7a80:	60110000 	andsvs	r0, r1, r0
    7a84:	c0000002 	andgt	r0, r0, r2
    7a88:	00000052 	andeq	r0, r0, r2, asr r0
    7a8c:	09d02a00 	ldmibeq	r0, {r9, fp, sp}^
    7a90:	0d130000 	ldceq	0, cr0, [r3, #-0]
    7a94:	72250000 	eorvc	r0, r5, #0
    7a98:	ce010032 	mcrgt	0, 0, r0, cr1, cr2, {1}
    7a9c:	000002a6 	andeq	r0, r0, r6, lsr #5
    7aa0:	1b489102 	blne	122beb0 <__Stack_Size+0x122b6b0>
    7aa4:	0000017a 	andeq	r0, r0, sl, ror r1
    7aa8:	00000000 	andeq	r0, r0, r0
    7aac:	000009f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    7ab0:	0ccad501 	cfstr64eq	mvdx13, [sl], {1}
    7ab4:	8f100000 	svchi	0x00100000
    7ab8:	f2000001 	vhadd.s8	d0, d0, d1
    7abc:	10000052 	andne	r0, r0, r2, asr r0
    7ac0:	00000186 	andeq	r0, r0, r6, lsl #3
    7ac4:	00005351 	andeq	r5, r0, r1, asr r3
    7ac8:	00002b00 	andeq	r2, r0, r0, lsl #22
    7acc:	08a90000 	stmiaeq	r9!, {}	; <UNPREDICTABLE>
    7ad0:	0cf00000 	ldcleq	0, cr0, [r0]
    7ad4:	01130000 	tsteq	r3, r0
    7ad8:	00770253 	rsbseq	r0, r7, r3, asr r2
    7adc:	02520113 	subseq	r0, r2, #-1073741820	; 0xc0000004
    7ae0:	01130076 	tsteq	r3, r6, ror r0
    7ae4:	00760251 	rsbseq	r0, r6, r1, asr r2
    7ae8:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    7aec:	24004891 	strcs	r4, [r0], #-2193	; 0x891
    7af0:	00000000 	andeq	r0, r0, r0
    7af4:	000008a9 	andeq	r0, r0, r9, lsr #17
    7af8:	02530113 	subseq	r0, r3, #-1073741820	; 0xc0000004
    7afc:	01130077 	tsteq	r3, r7, ror r0
    7b00:	00780252 	rsbseq	r0, r8, r2, asr r2
    7b04:	02510113 	subseq	r0, r1, #-1073741820	; 0xc0000004
    7b08:	01134891 			; <UNDEFINED> instruction: 0x01134891
    7b0c:	00760250 	rsbseq	r0, r6, r0, asr r2
    7b10:	00240000 	eoreq	r0, r4, r0
    7b14:	5a000000 	bpl	7b1c <__Stack_Size+0x731c>
    7b18:	1300000d 	movwne	r0, #13
    7b1c:	4c015201 	sfmmi	f5, 4, [r1], {1}
    7b20:	01510113 	cmpeq	r1, r3, lsl r1
    7b24:	50011330 	andpl	r1, r1, r0, lsr r3
    7b28:	00047602 	andeq	r7, r4, r2, lsl #12
    7b2c:	17b02c00 	ldrne	r2, [r0, r0, lsl #24]!
    7b30:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    7b34:	00000d3f 	andeq	r0, r0, pc, lsr sp
    7b38:	00000305 	andeq	r0, r0, r5, lsl #6
    7b3c:	a60c0000 	strge	r0, [ip], -r0
    7b40:	2c000002 	stccs	0, cr0, [r0], {2}
    7b44:	0000182a 	andeq	r1, r0, sl, lsr #16
    7b48:	0d550a01 	vldreq	s1, [r5, #-4]
    7b4c:	03050000 	movweq	r0, #20480	; 0x5000
    7b50:	00000000 	andeq	r0, r0, r0
    7b54:	0002a60c 	andeq	sl, r2, ip, lsl #12
    7b58:	0f9f2d00 	svceq	0x009f2d00
    7b5c:	00bf0000 	adcseq	r0, pc, r0
    7b60:	bf2e0000 	svclt	0x002e0000
    7b64:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    7b68:	0000007e 	andeq	r0, r0, lr, ror r0
    7b6c:	0000b82e 	andeq	fp, r0, lr, lsr #16
    7b70:	26000000 	strcs	r0, [r0], -r0
    7b74:	04000006 	streq	r0, [r0], #-6
    7b78:	001b7800 	andseq	r7, fp, r0, lsl #16
    7b7c:	c0010400 	andgt	r0, r1, r0, lsl #8
    7b80:	01000006 	tsteq	r0, r6
    7b84:	00001835 	andeq	r1, r0, r5, lsr r8
    7b88:	00000893 	muleq	r0, r3, r8
    7b8c:	00000a78 	andeq	r0, r0, r8, ror sl
    7b90:	00000000 	andeq	r0, r0, r0
    7b94:	000023d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    7b98:	1a060102 	bne	187fa8 <__Stack_Size+0x1877a8>
    7b9c:	03000008 	movweq	r0, #8
    7ba0:	00000fc9 	andeq	r0, r0, r9, asr #31
    7ba4:	00371c02 	eorseq	r1, r7, r2, lsl #24
    7ba8:	01020000 	mrseq	r0, (UNDEF: 2)
    7bac:	00081808 	andeq	r1, r8, r8, lsl #16
    7bb0:	05020200 	streq	r0, [r2, #-512]	; 0x200
    7bb4:	0000065e 	andeq	r0, r0, lr, asr r6
    7bb8:	49070202 	stmdbmi	r7, {r1, r9}
    7bbc:	02000009 	andeq	r0, r0, #9
    7bc0:	04da0504 	ldrbeq	r0, [sl], #1284	; 0x504
    7bc4:	04020000 	streq	r0, [r2], #-0
    7bc8:	00025207 	andeq	r5, r2, r7, lsl #4
    7bcc:	05080200 	streq	r0, [r8, #-512]	; 0x200
    7bd0:	000004d5 	ldrdeq	r0, [r0], -r5
    7bd4:	4d070802 	stcmi	8, cr0, [r7, #-8]
    7bd8:	04000002 	streq	r0, [r0], #-2
    7bdc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7be0:	04020074 	streq	r0, [r2], #-116	; 0x74
    7be4:	00025707 	andeq	r5, r2, r7, lsl #14
    7be8:	0fcb0300 	svceq	0x00cb0300
    7bec:	2a030000 	bcs	c7bf4 <__Stack_Size+0xc73f4>
    7bf0:	0000002c 	andeq	r0, r0, ip, lsr #32
    7bf4:	8b070402 	blhi	1c8c04 <__Stack_Size+0x1c8404>
    7bf8:	02000007 	andeq	r0, r0, #7
    7bfc:	08210801 	stmdaeq	r1!, {r0, fp}
    7c00:	4e050000 	cdpmi	0, 0, cr0, cr5, cr0, {0}
    7c04:	01000018 	tsteq	r0, r8, lsl r0
    7c08:	0000000a 	andeq	r0, r0, sl
    7c0c:	00004000 	andeq	r4, r0, r0
    7c10:	689c0100 	ldmvs	ip, {r8}
    7c14:	06000001 	streq	r0, [r0], -r1
    7c18:	00001863 	andeq	r1, r0, r3, ror #16
    7c1c:	01680a01 	cmneq	r8, r1, lsl #20
    7c20:	536f0000 	cmnpl	pc, #0
    7c24:	79070000 	stmdbvc	r7, {}	; <UNPREDICTABLE>
    7c28:	6e0a0100 	adfvse	f0, f2, f0
    7c2c:	9b000001 	blls	7c38 <__Stack_Size+0x7438>
    7c30:	08000053 	stmdaeq	r0, {r0, r1, r4, r6}
    7c34:	00001848 	andeq	r1, r0, r8, asr #16
    7c38:	01790c01 	cmneq	r9, r1, lsl #24
    7c3c:	91030000 	mrsls	r0, (UNDEF: 3)
    7c40:	83087fb0 	movwhi	r7, #36784	; 0x8fb0
    7c44:	01000018 	tsteq	r0, r8, lsl r0
    7c48:	0001790d 	andeq	r7, r1, sp, lsl #18
    7c4c:	50910200 	addspl	r0, r1, r0, lsl #4
    7c50:	00000009 	andeq	r0, r0, r9
    7c54:	00054f00 	andeq	r4, r5, r0, lsl #30
    7c58:	0000fd00 	andeq	pc, r0, r0, lsl #26
    7c5c:	52010a00 	andpl	r0, r1, #0, 20
    7c60:	0a007502 	beq	25070 <__Stack_Size+0x24870>
    7c64:	76025101 	strvc	r5, [r2], -r1, lsl #2
    7c68:	50010a00 	andpl	r0, r1, r0, lsl #20
    7c6c:	00007d02 	andeq	r7, r0, r2, lsl #26
    7c70:	00000009 	andeq	r0, r0, r9
    7c74:	00056a00 	andeq	r6, r5, r0, lsl #20
    7c78:	00011700 	andeq	r1, r1, r0, lsl #14
    7c7c:	51010a00 	tstpl	r1, r0, lsl #20
    7c80:	0a007d02 	beq	27090 <__Stack_Size+0x26890>
    7c84:	91025001 	tstls	r2, r1
    7c88:	00090050 	andeq	r0, r9, r0, asr r0
    7c8c:	80000000 	andhi	r0, r0, r0
    7c90:	37000005 	strcc	r0, [r0, -r5]
    7c94:	0a000001 	beq	7ca0 <__Stack_Size+0x74a0>
    7c98:	75025201 	strvc	r5, [r2, #-513]	; 0x201
    7c9c:	51010a00 	tstpl	r1, r0, lsl #20
    7ca0:	0a007602 	beq	254b0 <__Stack_Size+0x24cb0>
    7ca4:	7d025001 	stcvc	0, cr5, [r2, #-4]
    7ca8:	00090000 	andeq	r0, r9, r0
    7cac:	9b000000 	blls	7cb4 <__Stack_Size+0x74b4>
    7cb0:	57000005 	strpl	r0, [r0, -r5]
    7cb4:	0a000001 	beq	7cc0 <__Stack_Size+0x74c0>
    7cb8:	91025201 	tstls	r2, r1, lsl #4
    7cbc:	51010a50 	tstpl	r1, r0, asr sl
    7cc0:	0a007d02 	beq	270d0 <__Stack_Size+0x268d0>
    7cc4:	74025001 	strvc	r5, [r2], #-1
    7cc8:	000b0000 	andeq	r0, fp, r0
    7ccc:	b6000000 	strlt	r0, [r0], -r0
    7cd0:	0a000005 	beq	7cec <__Stack_Size+0x74ec>
    7cd4:	74025001 	strvc	r5, [r2], #-1
    7cd8:	0c000000 	stceq	0, cr0, [r0], {-0}
    7cdc:	00007604 	andeq	r7, r0, r4, lsl #12
    7ce0:	74040c00 	strvc	r0, [r4], #-3072	; 0xc00
    7ce4:	0d000001 	stceq	0, cr0, [r0, #-4]
    7ce8:	00000076 	andeq	r0, r0, r6, ror r0
    7cec:	0000760e 	andeq	r7, r0, lr, lsl #12
    7cf0:	00018900 	andeq	r8, r1, r0, lsl #18
    7cf4:	00810f00 	addeq	r0, r1, r0, lsl #30
    7cf8:	001f0000 	andseq	r0, pc, r0
    7cfc:	00185d10 	andseq	r5, r8, r0, lsl sp
    7d00:	01160100 	tsteq	r6, r0, lsl #2
    7d04:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    7d08:	00796511 	rsbseq	r6, r9, r1, lsl r5
    7d0c:	01681601 	cmneq	r8, r1, lsl #12
    7d10:	6d110000 	ldcvs	0, cr0, [r1, #-0]
    7d14:	16010078 			; <UNDEFINED> instruction: 0x16010078
    7d18:	0000016e 	andeq	r0, r0, lr, ror #2
    7d1c:	01006e12 	tsteq	r0, r2, lsl lr
    7d20:	00017918 	andeq	r7, r1, r8, lsl r9
    7d24:	00641200 	rsbeq	r1, r4, r0, lsl #4
    7d28:	01791901 	cmneq	r9, r1, lsl #18
    7d2c:	13000000 	movwne	r0, #0
    7d30:	0000186e 	andeq	r1, r0, lr, ror #16
    7d34:	00762101 	rsbseq	r2, r6, r1, lsl #2
    7d38:	2f010000 	svccs	0x00010000
    7d3c:	11000002 	tstne	r0, r2
    7d40:	21010078 	tstcs	r1, r8, ror r0
    7d44:	00000168 	andeq	r0, r0, r8, ror #2
    7d48:	01007911 	tsteq	r0, r1, lsl r9
    7d4c:	00016e21 	andeq	r6, r1, r1, lsr #28
    7d50:	14f21400 	ldrbtne	r1, [r2], #1024	; 0x400
    7d54:	21010000 	mrscs	r0, (UNDEF: 1)
    7d58:	00000068 	andeq	r0, r0, r8, rrx
    7d5c:	01006415 	tsteq	r0, r5, lsl r4
    7d60:	00022f23 	andeq	r2, r2, r3, lsr #30
    7d64:	78a32000 	stmiavc	r3!, {sp}
    7d68:	4dca1359 	stclmi	3, cr1, [sl, #356]	; 0x164
    7d6c:	d8ab75eb 	stmiale	fp!, {r0, r1, r3, r5, r6, r7, r8, sl, ip, sp, lr}
    7d70:	0a4d4141 	beq	135827c <__Stack_Size+0x1357a7c>
    7d74:	e8980070 	ldm	r8, {r4, r5, r6}
    7d78:	40797779 	rsbsmi	r7, r9, r9, ror r7
    7d7c:	fe738cc7 	cdp2	12, 7, cr8, cr3, cr7, {6}
    7d80:	6cee2b6f 	fstmiaxvs	lr!, {d18-d72}	;@ Deprecated
    7d84:	61125203 	tstvs	r2, r3, lsl #4
    7d88:	792a0100 	stmdbvc	sl!, {r8}
    7d8c:	12000001 	andne	r0, r0, #1
    7d90:	2b010062 	blcs	47f20 <__Stack_Size+0x47720>
    7d94:	00000179 	andeq	r0, r0, r9, ror r1
    7d98:	01006312 	tsteq	r0, r2, lsl r3
    7d9c:	0001792c 	andeq	r7, r1, ip, lsr #18
    7da0:	790d0000 	stmdbvc	sp, {}	; <UNPREDICTABLE>
    7da4:	16000001 	strne	r0, [r0], -r1
    7da8:	00001874 	andeq	r1, r0, r4, ror r8
    7dac:	00764b01 	rsbseq	r4, r6, r1, lsl #22
    7db0:	00000000 	andeq	r0, r0, r0
    7db4:	00d40000 	sbcseq	r0, r4, r0
    7db8:	9c010000 	stcls	0, cr0, [r1], {-0}
    7dbc:	0000053f 	andeq	r0, r0, pc, lsr r5
    7dc0:	00786507 	rsbseq	r6, r8, r7, lsl #10
    7dc4:	01684b01 	cmneq	r8, r1, lsl #22
    7dc8:	53d20000 	bicspl	r0, r2, #0
    7dcc:	65070000 	strvs	r0, [r7, #-0]
    7dd0:	4b010079 	blmi	47fbc <__Stack_Size+0x477bc>
    7dd4:	00000168 	andeq	r0, r0, r8, ror #2
    7dd8:	000053fe 	strdeq	r5, [r0], -lr
    7ddc:	00786d07 	rsbseq	r6, r8, r7, lsl #26
    7de0:	016e4c01 	cmneq	lr, r1, lsl #24
    7de4:	542a0000 	strtpl	r0, [sl], #-0
    7de8:	f2060000 	vhadd.s8	d0, d6, d0
    7dec:	01000014 	tsteq	r0, r4, lsl r0
    7df0:	0000684c 	andeq	r6, r0, ip, asr #16
    7df4:	00545600 	subseq	r5, r4, r0, lsl #12
    7df8:	6b6f1200 	blvs	1bcc600 <__Stack_Size+0x1bcbe00>
    7dfc:	764e0100 	strbvc	r0, [lr], -r0, lsl #2
    7e00:	17000000 	strne	r0, [r0, -r0]
    7e04:	00000189 	andeq	r0, r0, r9, lsl #3
    7e08:	00000000 	andeq	r0, r0, r0
    7e0c:	00000a58 	andeq	r0, r0, r8, asr sl
    7e10:	03475001 	movteq	r5, #28673	; 0x7001
    7e14:	9f180000 	svcls	0x00180000
    7e18:	82000001 	andhi	r0, r0, #1
    7e1c:	18000054 	stmdane	r0, {r2, r4, r6}
    7e20:	00000195 	muleq	r0, r5, r1
    7e24:	000054ae 	andeq	r5, r0, lr, lsr #9
    7e28:	000a5819 	andeq	r5, sl, r9, lsl r8
    7e2c:	01a91a00 			; <UNDEFINED> instruction: 0x01a91a00
    7e30:	91030000 	mrsls	r0, (UNDEF: 3)
    7e34:	b21a7fa8 	andslt	r7, sl, #168, 30	; 0x2a0
    7e38:	02000001 	andeq	r0, r0, #1
    7e3c:	00094891 	muleq	r9, r1, r8
    7e40:	80000000 	andhi	r0, r0, r0
    7e44:	ec000005 	stc	0, cr0, [r0], {5}
    7e48:	0a000002 	beq	7e58 <__Stack_Size+0x7658>
    7e4c:	76025201 	strvc	r5, [r2], -r1, lsl #4
    7e50:	51010a00 	tstpl	r1, r0, lsl #20
    7e54:	0a007702 	beq	25a64 <__Stack_Size+0x25264>
    7e58:	91035001 	tstls	r3, r1
    7e5c:	09007fa8 	stmdbeq	r0, {r3, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    7e60:	00000000 	andeq	r0, r0, r0
    7e64:	0000056a 	andeq	r0, r0, sl, ror #10
    7e68:	00000307 	andeq	r0, r0, r7, lsl #6
    7e6c:	0351010a 	cmpeq	r1, #-2147483646	; 0x80000002
    7e70:	0a7fa891 	beq	1ff20bc <__Stack_Size+0x1ff18bc>
    7e74:	91025001 	tstls	r2, r1
    7e78:	00090048 	andeq	r0, r9, r8, asr #32
    7e7c:	4f000000 	svcmi	0x00000000
    7e80:	28000005 	stmdacs	r0, {r0, r2}
    7e84:	0a000003 	beq	7e98 <__Stack_Size+0x7698>
    7e88:	76025201 	strvc	r5, [r2], -r1, lsl #4
    7e8c:	51010a00 	tstpl	r1, r0, lsl #20
    7e90:	0a007702 	beq	25aa0 <__Stack_Size+0x252a0>
    7e94:	91035001 	tstls	r3, r1
    7e98:	0b007fa8 	bleq	27d40 <__Stack_Size+0x27540>
    7e9c:	00000000 	andeq	r0, r0, r0
    7ea0:	0000059b 	muleq	r0, fp, r5
    7ea4:	0252010a 	subseq	r0, r2, #-2147483646	; 0x80000002
    7ea8:	010a4891 			; <UNDEFINED> instruction: 0x010a4891
    7eac:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    7eb0:	50010a7f 	andpl	r0, r1, pc, ror sl
    7eb4:	00007402 	andeq	r7, r0, r2, lsl #8
    7eb8:	bc1b0000 	ldclt	0, cr0, [fp], {-0}
    7ebc:	00000001 	andeq	r0, r0, r1
    7ec0:	80000000 	andhi	r0, r0, r0
    7ec4:	01000000 	mrseq	r0, (UNDEF: 0)
    7ec8:	00051a51 	andeq	r1, r5, r1, asr sl
    7ecc:	01de1800 	bicseq	r1, lr, r0, lsl #16
    7ed0:	54da0000 	ldrbpl	r0, [sl], #0
    7ed4:	d5180000 	ldrle	r0, [r8, #-0]
    7ed8:	fb000001 	blx	7ee6 <__Stack_Size+0x76e6>
    7edc:	18000054 	stmdane	r0, {r2, r4, r6}
    7ee0:	000001cc 	andeq	r0, r0, ip, asr #3
    7ee4:	0000551c 	andeq	r5, r0, ip, lsl r5
    7ee8:	0000001c 	andeq	r0, r0, ip, lsl r0
    7eec:	00008000 	andeq	r8, r0, r0
    7ef0:	02131a00 	andseq	r1, r3, #0, 20
    7ef4:	91030000 	mrsls	r0, (UNDEF: 3)
    7ef8:	1c1a7f88 	ldcne	15, cr7, [sl], {136}	; 0x88
    7efc:	03000002 	movweq	r0, #2
    7f00:	1a7fa891 	bne	1ff214c <__Stack_Size+0x1ff194c>
    7f04:	00000225 	andeq	r0, r0, r5, lsr #4
    7f08:	1a489102 	bne	122c318 <__Stack_Size+0x122bb18>
    7f0c:	000001e9 	andeq	r0, r0, r9, ror #3
    7f10:	00000305 	andeq	r0, r0, r5, lsl #6
    7f14:	00090000 	andeq	r0, r9, r0
    7f18:	9b000000 	blls	7f20 <__Stack_Size+0x7720>
    7f1c:	c3000005 	movwgt	r0, #5
    7f20:	0a000003 	beq	7f34 <__Stack_Size+0x7734>
    7f24:	74025201 	strvc	r5, [r2], #-513	; 0x201
    7f28:	51010a00 	tstpl	r1, r0, lsl #20
    7f2c:	0a007402 	beq	24f3c <__Stack_Size+0x2473c>
    7f30:	91025001 	tstls	r2, r1
    7f34:	00090048 	andeq	r0, r9, r8, asr #32
    7f38:	9b000000 	blls	7f40 <__Stack_Size+0x7740>
    7f3c:	e7000005 	str	r0, [r0, -r5]
    7f40:	0a000003 	beq	7f54 <__Stack_Size+0x7754>
    7f44:	03055201 	movweq	r5, #20993	; 0x5201
    7f48:	00000000 	andeq	r0, r0, r0
    7f4c:	0251010a 	subseq	r0, r1, #-2147483646	; 0x80000002
    7f50:	010a4891 			; <UNDEFINED> instruction: 0x010a4891
    7f54:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    7f58:	0009007f 	andeq	r0, r9, pc, ror r0
    7f5c:	80000000 	andhi	r0, r0, r0
    7f60:	08000005 	stmdaeq	r0, {r0, r2}
    7f64:	0a000004 	beq	7f7c <__Stack_Size+0x777c>
    7f68:	76025201 	strvc	r5, [r2], -r1, lsl #4
    7f6c:	51010a00 	tstpl	r1, r0, lsl #20
    7f70:	7fa89103 	svcvc	0x00a89103
    7f74:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    7f78:	0900007d 	stmdbeq	r0, {r0, r2, r3, r4, r5, r6}
    7f7c:	00000000 	andeq	r0, r0, r0
    7f80:	0000056a 	andeq	r0, r0, sl, ror #10
    7f84:	00000423 	andeq	r0, r0, r3, lsr #8
    7f88:	0251010a 	subseq	r0, r1, #-2147483646	; 0x80000002
    7f8c:	010a007d 	tsteq	sl, sp, ror r0
    7f90:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    7f94:	0009007f 	andeq	r0, r9, pc, ror r0
    7f98:	4f000000 	svcmi	0x00000000
    7f9c:	43000005 	movwmi	r0, #5
    7fa0:	0a000004 	beq	7fb8 <__Stack_Size+0x77b8>
    7fa4:	76025201 	strvc	r5, [r2], -r1, lsl #4
    7fa8:	51010a00 	tstpl	r1, r0, lsl #20
    7fac:	0a489102 	beq	122c3bc <__Stack_Size+0x122bbbc>
    7fb0:	7d025001 	stcvc	0, cr5, [r2, #-4]
    7fb4:	00090000 	andeq	r0, r9, r0
    7fb8:	9b000000 	blls	7fc0 <__Stack_Size+0x77c0>
    7fbc:	64000005 	strvs	r0, [r0], #-5
    7fc0:	0a000004 	beq	7fd8 <__Stack_Size+0x77d8>
    7fc4:	91035201 	tstls	r3, r1, lsl #4
    7fc8:	010a7fa8 	smlatbeq	sl, r8, pc, r7	; <UNPREDICTABLE>
    7fcc:	007d0251 	rsbseq	r0, sp, r1, asr r2
    7fd0:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    7fd4:	09004891 	stmdbeq	r0, {r0, r4, r7, fp, lr}
    7fd8:	00000000 	andeq	r0, r0, r0
    7fdc:	000005c7 	andeq	r0, r0, r7, asr #11
    7fe0:	0000047e 	andeq	r0, r0, lr, ror r4
    7fe4:	0251010a 	subseq	r0, r1, #-2147483646	; 0x80000002
    7fe8:	010a4891 			; <UNDEFINED> instruction: 0x010a4891
    7fec:	007d0250 	rsbseq	r0, sp, r0, asr r2
    7ff0:	00000900 	andeq	r0, r0, r0, lsl #18
    7ff4:	05dd0000 	ldrbeq	r0, [sp]
    7ff8:	04990000 	ldreq	r0, [r9], #0
    7ffc:	010a0000 	mrseq	r0, (UNDEF: 10)
    8000:	007d0251 	rsbseq	r0, sp, r1, asr r2
    8004:	0350010a 	cmpeq	r0, #-2147483646	; 0x80000002
    8008:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    800c:	00000009 	andeq	r0, r0, r9
    8010:	0005f300 	andeq	pc, r5, r0, lsl #6
    8014:	0004ba00 	andeq	fp, r4, r0, lsl #20
    8018:	52010a00 	andpl	r0, r1, #0, 20
    801c:	7fa89103 	svcvc	0x00a89103
    8020:	0251010a 	subseq	r0, r1, #-2147483646	; 0x80000002
    8024:	010a007d 	tsteq	sl, sp, ror r0
    8028:	00750250 	rsbseq	r0, r5, r0, asr r2
    802c:	00000900 	andeq	r0, r0, r0, lsl #18
    8030:	059b0000 	ldreq	r0, [fp]
    8034:	04da0000 	ldrbeq	r0, [sl], #0
    8038:	010a0000 	mrseq	r0, (UNDEF: 10)
    803c:	00750252 	rsbseq	r0, r5, r2, asr r2
    8040:	0251010a 	subseq	r0, r1, #-2147483646	; 0x80000002
    8044:	010a0075 	tsteq	sl, r5, ror r0
    8048:	007d0250 	rsbseq	r0, sp, r0, asr r2
    804c:	00000900 	andeq	r0, r0, r0, lsl #18
    8050:	05b60000 	ldreq	r0, [r6, #0]!
    8054:	04ee0000 	strbteq	r0, [lr], #0
    8058:	010a0000 	mrseq	r0, (UNDEF: 10)
    805c:	007d0250 	rsbseq	r0, sp, r0, asr r2
    8060:	00000900 	andeq	r0, r0, r0, lsl #18
    8064:	05b60000 	ldreq	r0, [r6, #0]!
    8068:	05020000 	streq	r0, [r2, #-0]
    806c:	010a0000 	mrseq	r0, (UNDEF: 10)
    8070:	48910250 	ldmmi	r1, {r4, r6, r9}
    8074:	00000b00 	andeq	r0, r0, r0, lsl #22
    8078:	06130000 	ldreq	r0, [r3], -r0
    807c:	010a0000 	mrseq	r0, (UNDEF: 10)
    8080:	48910251 	ldmmi	r1, {r0, r4, r6, r9}
    8084:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    8088:	0000007d 	andeq	r0, r0, sp, ror r0
    808c:	00000900 	andeq	r0, r0, r0, lsl #18
    8090:	05b60000 	ldreq	r0, [r6, #0]!
    8094:	052e0000 	streq	r0, [lr, #-0]!
    8098:	010a0000 	mrseq	r0, (UNDEF: 10)
    809c:	00750250 	rsbseq	r0, r5, r0, asr r2
    80a0:	00000b00 	andeq	r0, r0, r0, lsl #22
    80a4:	05b60000 	ldreq	r0, [r6, #0]!
    80a8:	010a0000 	mrseq	r0, (UNDEF: 10)
    80ac:	00740250 	rsbseq	r0, r4, r0, asr r2
    80b0:	411d0000 	tstmi	sp, r0
    80b4:	04000014 	streq	r0, [r0], #-20
    80b8:	00054a1c 	andeq	r4, r5, ip, lsl sl
    80bc:	01790d00 	cmneq	r9, r0, lsl #26
    80c0:	5e1e0000 	cdppl	0, 1, cr0, cr14, cr0, {0}
    80c4:	04000014 	streq	r0, [r0], #-20
    80c8:	00056a3b 	andeq	r6, r5, fp, lsr sl
    80cc:	01681f00 	cmneq	r8, r0, lsl #30
    80d0:	6e1f0000 	cdpvs	0, 1, cr0, cr15, cr0, {0}
    80d4:	1f000001 	svcne	0x00000001
    80d8:	0000016e 	andeq	r0, r0, lr, ror #2
    80dc:	14941e00 	ldrne	r1, [r4], #3584	; 0xe00
    80e0:	51040000 	mrspl	r0, (UNDEF: 4)
    80e4:	00000580 	andeq	r0, r0, r0, lsl #11
    80e8:	0001681f 	andeq	r6, r1, pc, lsl r8
    80ec:	016e1f00 	cmneq	lr, r0, lsl #30
    80f0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    80f4:	00001424 	andeq	r1, r0, r4, lsr #8
    80f8:	059b3a04 	ldreq	r3, [fp, #2564]	; 0xa04
    80fc:	681f0000 	ldmdavs	pc, {}	; <UNPREDICTABLE>
    8100:	1f000001 	svcne	0x00000001
    8104:	0000016e 	andeq	r0, r0, lr, ror #2
    8108:	00016e1f 	andeq	r6, r1, pc, lsl lr
    810c:	7f1e0000 	svcvc	0x001e0000
    8110:	04000014 	streq	r0, [r0], #-20
    8114:	0005b644 	andeq	fp, r5, r4, asr #12
    8118:	01681f00 	cmneq	r8, r0, lsl #30
    811c:	6e1f0000 	cdpvs	0, 1, cr0, cr15, cr0, {0}
    8120:	1f000001 	svcne	0x00000001
    8124:	0000016e 	andeq	r0, r0, lr, ror #2
    8128:	146e1e00 	strbtne	r1, [lr], #-3584	; 0xe00
    812c:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
    8130:	000005c7 	andeq	r0, r0, r7, asr #11
    8134:	0001681f 	andeq	r6, r1, pc, lsl r8
    8138:	741e0000 	ldrvc	r0, [lr], #-0
    813c:	04000015 	streq	r0, [r0], #-21
    8140:	0005dd5a 	andeq	sp, r5, sl, asr sp
    8144:	01681f00 	cmneq	r8, r0, lsl #30
    8148:	6e1f0000 	cdpvs	0, 1, cr0, cr15, cr0, {0}
    814c:	00000001 	andeq	r0, r0, r1
    8150:	0015801e 	andseq	r8, r5, lr, lsl r0
    8154:	f33e0400 	vshl.u64	d0, d0, d14
    8158:	1f000005 	svcne	0x00000005
    815c:	00000168 	andeq	r0, r0, r8, ror #2
    8160:	00016e1f 	andeq	r6, r1, pc, lsl lr
    8164:	a91e0000 	ldmdbge	lr, {}	; <UNPREDICTABLE>
    8168:	04000014 	streq	r0, [r0], #-20
    816c:	00061333 	andeq	r1, r6, r3, lsr r3
    8170:	01681f00 	cmneq	r8, r0, lsl #30
    8174:	6e1f0000 	cdpvs	0, 1, cr0, cr15, cr0, {0}
    8178:	1f000001 	svcne	0x00000001
    817c:	0000016e 	andeq	r0, r0, lr, ror #2
    8180:	0000761f 	andeq	r7, r0, pc, lsl r6
    8184:	ce200000 	cdpgt	0, 2, cr0, cr0, cr0, {0}
    8188:	04000014 	streq	r0, [r0], #-20
    818c:	0000762d 	andeq	r7, r0, sp, lsr #12
    8190:	016e1f00 	cmneq	lr, r0, lsl #30
    8194:	6e1f0000 	cdpvs	0, 1, cr0, cr15, cr0, {0}
    8198:	00000001 	andeq	r0, r0, r1
    819c:	0005ac00 	andeq	sl, r5, r0, lsl #24
    81a0:	34000400 	strcc	r0, [r0], #-1024	; 0x400
    81a4:	0400001d 	streq	r0, [r0], #-29
    81a8:	0006c001 	andeq	ip, r6, r1
    81ac:	18aa0100 	stmiane	sl!, {r8}
    81b0:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    81b4:	0b000000 	bleq	81bc <__Stack_Size+0x79bc>
    81b8:	00000000 	andeq	r0, r0, r0
    81bc:	25280000 	strcs	r0, [r8, #-0]!
    81c0:	04020000 	streq	r0, [r2], #-0
    81c4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    81c8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    81cc:	00000257 	andeq	r0, r0, r7, asr r2
    81d0:	1a060103 	bne	1885e4 <__Stack_Size+0x187de4>
    81d4:	03000008 	movweq	r0, #8
    81d8:	08180801 	ldmdaeq	r8, {r0, fp}
    81dc:	02030000 	andeq	r0, r3, #0
    81e0:	00065e05 	andeq	r5, r6, r5, lsl #28
    81e4:	07020300 	streq	r0, [r2, -r0, lsl #6]
    81e8:	00000949 	andeq	r0, r0, r9, asr #18
    81ec:	da050403 	ble	149200 <__Stack_Size+0x148a00>
    81f0:	03000004 	movweq	r0, #4
    81f4:	02520704 	subseq	r0, r2, #4, 14	; 0x100000
    81f8:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    81fc:	0004d505 	andeq	sp, r4, r5, lsl #10
    8200:	07080300 	streq	r0, [r8, -r0, lsl #6]
    8204:	0000024d 	andeq	r0, r0, sp, asr #4
    8208:	8b070403 	blhi	1c921c <__Stack_Size+0x1c8a1c>
    820c:	04000007 	streq	r0, [r0], #-7
    8210:	3a040504 	bcc	109628 <__Stack_Size+0x108e28>
    8214:	03000000 	movweq	r0, #0
    8218:	08210801 	stmdaeq	r1!, {r0, fp}
    821c:	68060000 	stmdavs	r6, {}	; <UNPREDICTABLE>
    8220:	00ae0c02 	adceq	r0, lr, r2, lsl #24
    8224:	0b070000 	bleq	1c822c <__Stack_Size+0x1c7a2c>
    8228:	02000018 	andeq	r0, r0, #24
    822c:	0000ae0e 	andeq	sl, r0, lr, lsl #28
    8230:	c9070000 	stmdbgt	r7, {}	; <UNPREDICTABLE>
    8234:	02000016 	andeq	r0, r0, #22
    8238:	0000be0f 	andeq	fp, r0, pc, lsl #28
    823c:	6c070800 	stcvs	8, cr0, [r7], {-0}
    8240:	02000004 	andeq	r0, r0, #4
    8244:	0000ce10 	andeq	ip, r0, r0, lsl lr
    8248:	08002800 	stmdaeq	r0, {fp, sp}
    824c:	00000056 	andeq	r0, r0, r6, asr r0
    8250:	000000be 	strheq	r0, [r0], -lr
    8254:	00006b09 	andeq	r6, r0, r9, lsl #22
    8258:	08000100 	stmdaeq	r0, {r8}
    825c:	00000056 	andeq	r0, r0, r6, asr r0
    8260:	000000ce 	andeq	r0, r0, lr, asr #1
    8264:	00006b09 	andeq	r6, r0, r9, lsl #22
    8268:	08000700 	stmdaeq	r0, {r8, r9, sl}
    826c:	0000003a 	andeq	r0, r0, sl, lsr r0
    8270:	000000de 	ldrdeq	r0, [r0], -lr
    8274:	00006b09 	andeq	r6, r0, r9, lsl #22
    8278:	0a003f00 	beq	17e80 <__Stack_Size+0x17680>
    827c:	00001009 	andeq	r1, r0, r9
    8280:	00811202 	addeq	r1, r1, r2, lsl #4
    8284:	830b0000 	movwhi	r0, #45056	; 0xb000
    8288:	0100000b 	tsteq	r0, fp
    828c:	012d01c1 	smlawteq	sp, r1, r1, r0
    8290:	630c0000 	movwvs	r0, #49152	; 0xc000
    8294:	01007874 	tsteq	r0, r4, ror r8
    8298:	00012dc1 	andeq	r2, r1, r1, asr #27
    829c:	0ba50d00 	bleq	fe94b6a4 <BootRAM+0xd8bbe45>
    82a0:	c1010000 	mrsgt	r0, (UNDEF: 1)
    82a4:	00000074 	andeq	r0, r0, r4, ror r0
    82a8:	0013070d 	andseq	r0, r3, sp, lsl #14
    82ac:	56c10100 	strbpl	r0, [r1], r0, lsl #2
    82b0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    82b4:	00001891 	muleq	r0, r1, r8
    82b8:	0056c301 	subseq	ip, r6, r1, lsl #6
    82bc:	9b0e0000 	blls	3882c4 <__Stack_Size+0x387ac4>
    82c0:	01000018 	tsteq	r0, r8, lsl r0
    82c4:	000056c3 	andeq	r5, r0, r3, asr #13
    82c8:	04050000 	streq	r0, [r5], #-0
    82cc:	000000de 	ldrdeq	r0, [r0], -lr
    82d0:	000f1c0f 	andeq	r1, pc, pc, lsl #24
    82d4:	c82f0100 	stmdagt	pc!, {r8}	; <UNPREDICTABLE>
    82d8:	58080033 	stmdapl	r8, {r0, r1, r4, r5}
    82dc:	01000000 	mrseq	r0, (UNDEF: 0)
    82e0:	0001569c 	muleq	r1, ip, r6
    82e4:	74631000 	strbtvc	r1, [r3], #-0
    82e8:	2f010078 	svccs	0x00010078
    82ec:	0000012d 	andeq	r0, r0, sp, lsr #2
    82f0:	0f005001 	svceq	0x00005001
    82f4:	000018b9 			; <UNDEFINED> instruction: 0x000018b9
    82f8:	34203e01 	strtcc	r3, [r0], #-3585	; 0xe01
    82fc:	1f640800 	svcne	0x00640800
    8300:	9c010000 	stcls	0, cr0, [r1], {-0}
    8304:	0000021d 	andeq	r0, r0, sp, lsl r2
    8308:	78746311 	ldmdavc	r4!, {r0, r4, r8, r9, sp, lr}^
    830c:	2d3e0100 	ldfcss	f0, [lr, #-0]
    8310:	3d000001 	stccc	0, cr0, [r0, #-4]
    8314:	12000055 	andne	r0, r0, #85	; 0x55
    8318:	00001896 	muleq	r0, r6, r8
    831c:	00743e01 	rsbseq	r3, r4, r1, lsl #28
    8320:	55940000 	ldrpl	r0, [r4]
    8324:	c8130000 	ldmdagt	r3, {}	; <UNPREDICTABLE>
    8328:	01000018 	tsteq	r0, r8, lsl r0
    832c:	00005640 	andeq	r5, r0, r0, asr #12
    8330:	0055b500 	subseq	fp, r5, r0, lsl #10
    8334:	18ce1300 	stmiane	lr, {r8, r9, ip}^
    8338:	40010000 	andmi	r0, r1, r0
    833c:	00000056 	andeq	r0, r0, r6, asr r0
    8340:	00005827 	andeq	r5, r0, r7, lsr #16
    8344:	01005714 	tsteq	r0, r4, lsl r7
    8348:	00021d40 	andeq	r1, r2, r0, asr #26
    834c:	0064d100 	rsbeq	sp, r4, r0, lsl #2
    8350:	00411400 	subeq	r1, r1, r0, lsl #8
    8354:	00564101 	subseq	r4, r6, r1, lsl #2
    8358:	6db60000 	ldcvs	0, cr0, [r6]
    835c:	42140000 	andsmi	r0, r4, #0
    8360:	56410100 	strbpl	r0, [r1], -r0, lsl #2
    8364:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    8368:	1400006e 	strne	r0, [r0], #-110	; 0x6e
    836c:	41010043 	tstmi	r1, r3, asr #32
    8370:	00000056 	andeq	r0, r0, r6, asr r0
    8374:	00006e9b 	muleq	r0, fp, lr
    8378:	01004414 	tsteq	r0, r4, lsl r4
    837c:	00005641 	andeq	r5, r0, r1, asr #12
    8380:	006ef000 	rsbeq	pc, lr, r0
    8384:	00451400 	subeq	r1, r5, r0, lsl #8
    8388:	00564101 	subseq	r4, r6, r1, lsl #2
    838c:	6f450000 	svcvs	0x00450000
    8390:	46140000 	ldrmi	r0, [r4], -r0
    8394:	56410100 	strbpl	r0, [r1], -r0, lsl #2
    8398:	c6000000 	strgt	r0, [r0], -r0
    839c:	1400006f 	strne	r0, [r0], #-111	; 0x6f
    83a0:	41010047 	tstmi	r1, r7, asr #32
    83a4:	00000056 	andeq	r0, r0, r6, asr r0
    83a8:	0000703e 	andeq	r7, r0, lr, lsr r0
    83ac:	01004814 	tsteq	r0, r4, lsl r8
    83b0:	00005641 	andeq	r5, r0, r1, asr #12
    83b4:	0070b600 	rsbseq	fp, r0, r0, lsl #12
    83b8:	56080000 	strpl	r0, [r8], -r0
    83bc:	2d000000 	stccs	0, cr0, [r0, #-0]
    83c0:	09000002 	stmdbeq	r0, {r1}
    83c4:	0000006b 	andeq	r0, r0, fp, rrx
    83c8:	e915003f 	ldmdb	r5, {r0, r1, r2, r3, r4, r5}
    83cc:	84000000 	strhi	r0, [r0], #-0
    83d0:	8e080053 	mcrhi	0, 0, r0, cr8, cr3, {2}
    83d4:	01000000 	mrseq	r0, (UNDEF: 0)
    83d8:	0002f29c 	muleq	r2, ip, r2
    83dc:	00f51600 	rscseq	r1, r5, r0, lsl #12
    83e0:	71390000 	teqvc	r9, r0
    83e4:	00160000 	andseq	r0, r6, r0
    83e8:	91000001 	tstls	r0, r1
    83ec:	16000071 			; <UNDEFINED> instruction: 0x16000071
    83f0:	0000010b 	andeq	r0, r0, fp, lsl #2
    83f4:	000071ef 	andeq	r7, r0, pc, ror #3
    83f8:	00011617 	andeq	r1, r1, r7, lsl r6
    83fc:	01211700 	teqeq	r1, r0, lsl #14
    8400:	90180000 	andsls	r0, r8, r0
    8404:	1600000a 	strne	r0, [r0], -sl
    8408:	0000010b 	andeq	r0, r0, fp, lsl #2
    840c:	0000724d 	andeq	r7, r0, sp, asr #4
    8410:	00010016 	andeq	r0, r1, r6, lsl r0
    8414:	0072a500 	rsbseq	sl, r2, r0, lsl #10
    8418:	00f51600 	rscseq	r1, r5, r0, lsl #12
    841c:	72ef0000 	rscvc	r0, pc, #0
    8420:	90180000 	andsls	r0, r8, r0
    8424:	1900000a 	stmdbne	r0, {r1, r3}
    8428:	00000116 	andeq	r0, r0, r6, lsl r1
    842c:	00007347 	andeq	r7, r0, r7, asr #6
    8430:	00012119 	andeq	r2, r1, r9, lsl r1
    8434:	00738800 	rsbseq	r8, r3, r0, lsl #16
    8438:	53b81a00 			; <UNDEFINED> instruction: 0x53b81a00
    843c:	01560800 	cmpeq	r6, r0, lsl #16
    8440:	02b60000 	adcseq	r0, r6, #0
    8444:	011b0000 	tsteq	fp, r0
    8448:	00740251 	rsbseq	r0, r4, r1, asr r2
    844c:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    8450:	1c000076 	stcne	0, cr0, [r0], {118}	; 0x76
    8454:	080053f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip, lr}
    8458:	0000058b 	andeq	r0, r0, fp, lsl #11
    845c:	0053fe1a 	subseq	pc, r3, sl, lsl lr	; <UNPREDICTABLE>
    8460:	00058b08 	andeq	r8, r5, r8, lsl #22
    8464:	0002d900 	andeq	sp, r2, r0, lsl #18
    8468:	52011b00 	andpl	r1, r1, #0, 22
    846c:	1b007402 	blne	2547c <__Stack_Size+0x24c7c>
    8470:	78025101 	stmdavc	r2, {r0, r8, ip, lr}
    8474:	081d0000 	ldmdaeq	sp, {}	; <UNPREDICTABLE>
    8478:	56080054 			; <UNDEFINED> instruction: 0x56080054
    847c:	1b000001 	blne	8488 <__Stack_Size+0x7c88>
    8480:	76025101 	strvc	r5, [r2], -r1, lsl #2
    8484:	50011b28 	andpl	r1, r1, r8, lsr #22
    8488:	00007602 	andeq	r7, r0, r2, lsl #12
    848c:	0f000000 	svceq	0x00000000
    8490:	00000e13 	andeq	r0, r0, r3, lsl lr
    8494:	5414f001 	ldrpl	pc, [r4], #-1
    8498:	02180800 	andseq	r0, r8, #0, 16
    849c:	9c010000 	stcls	0, cr0, [r1], {-0}
    84a0:	0000054b 	andeq	r0, r0, fp, asr #10
    84a4:	78746311 	ldmdavc	r4!, {r0, r4, r8, r9, sp, lr}^
    84a8:	2df00100 	ldfcse	f0, [r0]
    84ac:	c0000001 	andgt	r0, r0, r1
    84b0:	12000073 	andne	r0, r0, #115	; 0x73
    84b4:	000018e3 	andeq	r1, r0, r3, ror #17
    84b8:	0074f001 	rsbseq	pc, r4, r1
    84bc:	73de0000 	bicsvc	r0, lr, #0
    84c0:	ea130000 	b	4c84c8 <__Stack_Size+0x4c7cc8>
    84c4:	01000018 	tsteq	r0, r8, lsl r0
    84c8:	000056f2 	strdeq	r5, [r0], -r2
    84cc:	00742800 	rsbseq	r2, r4, r0, lsl #16
    84d0:	18a01300 	stmiane	r0!, {r8, r9, ip}
    84d4:	f2010000 	vhadd.s8	d0, d1, d0
    84d8:	00000056 	andeq	r0, r0, r6, asr r0
    84dc:	0000745c 	andeq	r7, r0, ip, asr r4
    84e0:	0018a513 	andseq	sl, r8, r3, lsl r5
    84e4:	56f30100 	ldrbtpl	r0, [r3], r0, lsl #2
    84e8:	85000000 	strhi	r0, [r0, #-0]
    84ec:	14000074 	strne	r0, [r0], #-116	; 0x74
    84f0:	00776f6c 	rsbseq	r6, r7, ip, ror #30
    84f4:	0056f301 	subseq	pc, r6, r1, lsl #6
    84f8:	74ae0000 	strtvc	r0, [lr], #0
    84fc:	8a1e0000 	bhi	788504 <__Stack_Size+0x787d04>
    8500:	01000018 	tsteq	r0, r8, lsl r0
    8504:	00054bf4 	strdeq	r4, [r5], -r4	; <UNPREDICTABLE>
    8508:	50910200 	addspl	r0, r1, r0, lsl #4
    850c:	0000e91f 	andeq	lr, r0, pc, lsl r9
    8510:	00543c00 	subseq	r3, r4, r0, lsl #24
    8514:	000aa808 	andeq	sl, sl, r8, lsl #16
    8518:	01000100 	mrseq	r0, (UNDEF: 16)
    851c:	0000045b 	andeq	r0, r0, fp, asr r4
    8520:	00010b16 	andeq	r0, r1, r6, lsl fp
    8524:	00745c00 	rsbseq	r5, r4, r0, lsl #24
    8528:	01002000 	mrseq	r2, (UNDEF: 0)
    852c:	03060000 	movweq	r0, #24576	; 0x6000
    8530:	200002cc 	andcs	r0, r0, ip, asr #5
    8534:	00f5209f 	smlalseq	r2, r5, pc, r0	; <UNPREDICTABLE>
    8538:	54010000 	strpl	r0, [r1], #-0
    853c:	000aa818 	andeq	sl, sl, r8, lsl r8
    8540:	01161700 	tsteq	r6, r0, lsl #14
    8544:	21170000 	tstcs	r7, r0
    8548:	18000001 	stmdane	r0, {r0}
    854c:	00000aa8 	andeq	r0, r0, r8, lsr #21
    8550:	00010b16 	andeq	r0, r1, r6, lsl fp
    8554:	0074d700 	rsbseq	sp, r4, r0, lsl #14
    8558:	01001600 	tsteq	r0, r0, lsl #12
    855c:	753a0000 	ldrvc	r0, [sl, #-0]!
    8560:	f5200000 			; <UNDEFINED> instruction: 0xf5200000
    8564:	01000000 	mrseq	r0, (UNDEF: 0)
    8568:	0aa81854 	beq	fea0e6c0 <BootRAM+0xd97ee61>
    856c:	16190000 	ldrne	r0, [r9], -r0
    8570:	93000001 	movwls	r0, #1
    8574:	19000075 	stmdbne	r0, {r0, r2, r4, r5, r6}
    8578:	00000121 	andeq	r0, r0, r1, lsr #2
    857c:	000075d4 	ldrdeq	r7, [r0], -r4
    8580:	0054a21a 	subseq	sl, r4, sl, lsl r2
    8584:	00058b08 	andeq	r8, r5, r8, lsl #22
    8588:	00040200 	andeq	r0, r4, r0, lsl #4
    858c:	51011b00 	tstpl	r1, r0, lsl #22
    8590:	1b007902 	blne	269a0 <__Stack_Size+0x261a0>
    8594:	74075001 	strvc	r5, [r7], #-1
    8598:	22007600 	andcs	r7, r0, #0, 12
    859c:	1a002823 	bne	12630 <__Stack_Size+0x11e30>
    85a0:	08005588 	stmdaeq	r0, {r3, r7, r8, sl, ip, lr}
    85a4:	0000058b 	andeq	r0, r0, fp, lsl #11
    85a8:	00000427 	andeq	r0, r0, r7, lsr #8
    85ac:	0252011b 	subseq	r0, r2, #-1073741818	; 0xc0000006
    85b0:	011b0077 	tsteq	fp, r7, ror r0
    85b4:	00790251 	rsbseq	r0, r9, r1, asr r2
    85b8:	0750011b 	smmlaeq	r0, fp, r1, r0
    85bc:	00760074 	rsbseq	r0, r6, r4, ror r0
    85c0:	00282322 	eoreq	r2, r8, r2, lsr #6
    85c4:	0055981a 	subseq	r9, r5, sl, lsl r8
    85c8:	00015608 	andeq	r5, r1, r8, lsl #12
    85cc:	00044100 	andeq	r4, r4, r0, lsl #2
    85d0:	51011b00 	tstpl	r1, r0, lsl #22
    85d4:	1b287402 	blne	a255e4 <__Stack_Size+0xa24de4>
    85d8:	74025001 	strvc	r5, [r2], #-1
    85dc:	ac1d0000 	ldcge	0, cr0, [sp], {-0}
    85e0:	56080055 			; <UNDEFINED> instruction: 0x56080055
    85e4:	1b000001 	blne	85f0 <__Stack_Size+0x7df0>
    85e8:	76025101 	strvc	r5, [r2], -r1, lsl #2
    85ec:	50011b00 	andpl	r1, r1, r0, lsl #22
    85f0:	00007402 	andeq	r7, r0, r2, lsl #8
    85f4:	00000000 	andeq	r0, r0, r0
    85f8:	0000e921 	andeq	lr, r0, r1, lsr #18
    85fc:	0054a200 	subseq	sl, r4, r0, lsl #4
    8600:	000ae008 	andeq	lr, sl, r8
    8604:	01010100 	mrseq	r0, (UNDEF: 17)
    8608:	00010b16 	andeq	r0, r1, r6, lsl fp
    860c:	00763200 	rsbseq	r3, r6, r0, lsl #4
    8610:	01001600 	tsteq	r0, r0, lsl #12
    8614:	765e0000 	ldrbvc	r0, [lr], -r0
    8618:	f5160000 			; <UNDEFINED> instruction: 0xf5160000
    861c:	94000000 	strls	r0, [r0], #-0
    8620:	18000076 	stmdane	r0, {r1, r2, r4, r5, r6}
    8624:	00000ae0 	andeq	r0, r0, r0, ror #21
    8628:	00011617 	andeq	r1, r1, r7, lsl r6
    862c:	01211700 	teqeq	r1, r0, lsl #14
    8630:	e0180000 	ands	r0, r8, r0
    8634:	1600000a 	strne	r0, [r0], -sl
    8638:	0000010b 	andeq	r0, r0, fp, lsl #2
    863c:	000076bd 			; <UNDEFINED> instruction: 0x000076bd
    8640:	00010016 	andeq	r0, r1, r6, lsl r0
    8644:	00770c00 	rsbseq	r0, r7, r0, lsl #24
    8648:	00f51600 	rscseq	r1, r5, r0, lsl #12
    864c:	76940000 	ldrvc	r0, [r4], r0
    8650:	e0180000 	ands	r0, r8, r0
    8654:	1900000a 	stmdbne	r0, {r1, r3}
    8658:	00000116 	andeq	r0, r0, r6, lsl r1
    865c:	0000774b 	andeq	r7, r0, fp, asr #14
    8660:	00012119 	andeq	r2, r1, r9, lsl r1
    8664:	00778100 	rsbseq	r8, r7, r0, lsl #2
    8668:	54dc1a00 	ldrbpl	r1, [ip], #2560	; 0xa00
    866c:	058b0800 	streq	r0, [fp, #2048]	; 0x800
    8670:	04f10000 	ldrbteq	r0, [r1], #0
    8674:	011b0000 	tsteq	fp, r0
    8678:	00760252 	rsbseq	r0, r6, r2, asr r2
    867c:	0251011b 	subseq	r0, r1, #-1073741818	; 0xc0000006
    8680:	011b0079 	tsteq	fp, r9, ror r0
    8684:	00740750 	rsbseq	r0, r4, r0, asr r7
    8688:	23220078 	teqcs	r2, #120	; 0x78
    868c:	dc1a0028 	ldcle	0, cr0, [sl], {40}	; 0x28
    8690:	8b080055 	blhi	2087ec <__Stack_Size+0x207fec>
    8694:	16000005 	strne	r0, [r0], -r5
    8698:	1b000005 	blne	86b4 <__Stack_Size+0x7eb4>
    869c:	79025201 	stmdbvc	r2, {r0, r9, ip, lr}
    86a0:	51011b00 	tstpl	r1, r0, lsl #22
    86a4:	1b007d02 	blne	27ab4 <__Stack_Size+0x272b4>
    86a8:	74075001 	strvc	r5, [r7], #-1
    86ac:	22007800 	andcs	r7, r0, #0, 16
    86b0:	1a002823 	bne	12744 <__Stack_Size+0x11f44>
    86b4:	080055ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl, ip, lr}
    86b8:	00000156 	andeq	r0, r0, r6, asr r1
    86bc:	00000530 	andeq	r0, r0, r0, lsr r5
    86c0:	0251011b 	subseq	r0, r1, #-1073741818	; 0xc0000006
    86c4:	011b2874 	tsteq	fp, r4, ror r8
    86c8:	00740250 	rsbseq	r0, r4, r0, asr r2
    86cc:	55fe1d00 	ldrbpl	r1, [lr, #3328]!	; 0xd00
    86d0:	01560800 	cmpeq	r6, r0, lsl #16
    86d4:	011b0000 	tsteq	fp, r0
    86d8:	00770251 	rsbseq	r0, r7, r1, asr r2
    86dc:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    86e0:	00000074 	andeq	r0, r0, r4, ror r0
    86e4:	00000000 	andeq	r0, r0, r0
    86e8:	00003a08 	andeq	r3, r0, r8, lsl #20
    86ec:	00055b00 	andeq	r5, r5, r0, lsl #22
    86f0:	006b0900 	rsbeq	r0, fp, r0, lsl #18
    86f4:	00070000 	andeq	r0, r7, r0
    86f8:	0018d41e 	andseq	sp, r8, lr, lsl r4
    86fc:	cee80100 	cdpgt	1, 14, cr0, cr8, cr0, {0}
    8700:	05000000 	streq	r0, [r0, #-0]
    8704:	0002cc03 	andeq	ip, r2, r3, lsl #24
    8708:	002c0820 	eoreq	r0, ip, r0, lsr #16
    870c:	057c0000 	ldrbeq	r0, [ip, #-0]!
    8710:	6b090000 	blvs	248718 <__Stack_Size+0x247f18>
    8714:	3f000000 	svccc	0x00000000
    8718:	006b2200 	rsbeq	r2, fp, r0, lsl #4
    871c:	056c1201 	strbeq	r1, [ip, #-513]!	; 0x201
    8720:	03050000 	movweq	r0, #20480	; 0x5000
    8724:	2000030c 	andcs	r0, r0, ip, lsl #6
    8728:	0014de23 	andseq	sp, r4, r3, lsr #28
    872c:	00007200 	andeq	r7, r0, r0, lsl #4
    8730:	0005a800 	andeq	sl, r5, r0, lsl #16
    8734:	00722400 	rsbseq	r2, r2, r0, lsl #8
    8738:	a8240000 	stmdage	r4!, {}	; <UNPREDICTABLE>
    873c:	24000005 	strcs	r0, [r0], #-5
    8740:	0000006b 	andeq	r0, r0, fp, rrx
    8744:	ae040500 	cfsh32ge	mvfx0, mvfx4, #0
    8748:	25000005 	strcs	r0, [r0, #-5]
    874c:	00077f00 	andeq	r7, r7, r0, lsl #30
    8750:	14000400 	strne	r0, [r0], #-1024	; 0x400
    8754:	0400001f 	streq	r0, [r0], #-31
    8758:	0006c001 	andeq	ip, r6, r1
    875c:	191c0100 	ldmdbne	ip, {r8}
    8760:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    8764:	0d780000 	ldcleq	0, cr0, [r8, #-0]
    8768:	00000000 	andeq	r0, r0, r0
    876c:	2d310000 	ldccs	0, cr0, [r1, #-0]
    8770:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    8774:	00024d07 	andeq	r4, r2, r7, lsl #26
    8778:	08010200 	stmdaeq	r1, {r9}
    877c:	00000818 	andeq	r0, r0, r8, lsl r8
    8780:	57070402 	strpl	r0, [r7, -r2, lsl #8]
    8784:	02000002 	andeq	r0, r0, #2
    8788:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    878c:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    8790:	0200000f 	andeq	r0, r0, #15
    8794:	00002c1c 	andeq	r2, r0, ip, lsl ip
    8798:	05020200 	streq	r0, [r2, #-512]	; 0x200
    879c:	0000065e 	andeq	r0, r0, lr, asr r6
    87a0:	49070202 	stmdbmi	r7, {r1, r9}
    87a4:	02000009 	andeq	r0, r0, #9
    87a8:	04da0504 	ldrbeq	r0, [sl], #1284	; 0x504
    87ac:	04020000 	streq	r0, [r2], #-0
    87b0:	00025207 	andeq	r5, r2, r7, lsl #4
    87b4:	05080200 	streq	r0, [r8, #-512]	; 0x200
    87b8:	000004d5 	ldrdeq	r0, [r0], -r5
    87bc:	00165303 	andseq	r5, r6, r3, lsl #6
    87c0:	254e0200 	strbcs	r0, [lr, #-512]	; 0x200
    87c4:	04000000 	streq	r0, [r0], #-0
    87c8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    87cc:	cb030074 	blgt	c89a4 <__Stack_Size+0xc81a4>
    87d0:	0300000f 	movweq	r0, #15
    87d4:	0000412a 	andeq	r4, r0, sl, lsr #2
    87d8:	16550300 	ldrbne	r0, [r5], -r0, lsl #6
    87dc:	4e030000 	cdpmi	0, 0, cr0, cr3, cr0, {0}
    87e0:	0000006f 	andeq	r0, r0, pc, rrx
    87e4:	000d6303 	andeq	r6, sp, r3, lsl #6
    87e8:	33d40400 	bicscc	r0, r4, #0, 8
    87ec:	02000000 	andeq	r0, r0, #0
    87f0:	078b0704 	streq	r0, [fp, r4, lsl #14]
    87f4:	04050000 	streq	r0, [r5], #-0
    87f8:	21080102 	tstcs	r8, r2, lsl #2
    87fc:	06000008 	streq	r0, [r0], -r8
    8800:	000016c2 	andeq	r1, r0, r2, asr #13
    8804:	c9140540 	ldmdbgt	r4, {r6, r8, sl}
    8808:	07000000 	streq	r0, [r0, -r0]
    880c:	15050068 	strne	r0, [r5, #-104]	; 0x68
    8810:	000000c9 	andeq	r0, r0, r9, asr #1
    8814:	8c080000 	stchi	0, cr0, [r8], {-0}
    8818:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
    881c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8820:	000000a2 	andeq	r0, r0, r2, lsr #1
    8824:	0e0a0007 	cdpeq	0, 0, cr0, cr10, cr7, {0}
    8828:	01000019 	tsteq	r0, r9, lsl r0
    882c:	00008c5f 	andeq	r8, r0, pc, asr ip
    8830:	00fe0300 	rscseq	r0, lr, r0, lsl #6
    8834:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
    8838:	8c5f0100 	ldfhie	f0, [pc], {-0}
    883c:	0c000000 	stceq	0, cr0, [r0], {-0}
    8840:	00001748 	andeq	r1, r0, r8, asr #14
    8844:	007a5f01 	rsbseq	r5, sl, r1, lsl #30
    8848:	0d000000 	stceq	0, cr0, [r0, #-0]
    884c:	00001914 	andeq	r1, r0, r4, lsl r9
    8850:	1d034b01 	vstrne	d4, [r3, #-4]
    8854:	0b000001 	bleq	8860 <__Stack_Size+0x8060>
    8858:	4b010078 	blmi	48a40 <__Stack_Size+0x48240>
    885c:	0000011d 	andeq	r0, r0, sp, lsl r1
    8860:	0100760b 	tsteq	r0, fp, lsl #12
    8864:	00008c4b 	andeq	r8, r0, fp, asr #24
    8868:	040e0000 	streq	r0, [lr], #-0
    886c:	00000081 	andeq	r0, r0, r1, lsl #1
    8870:	00192b0a 	andseq	r2, r9, sl, lsl #22
    8874:	8c3b0100 	ldfhis	f0, [fp], #-0
    8878:	03000000 	movweq	r0, #0
    887c:	00000146 	andeq	r0, r0, r6, asr #2
    8880:	0100780b 	tsteq	r0, fp, lsl #16
    8884:	0001463b 	andeq	r4, r1, fp, lsr r6
    8888:	00720f00 	rsbseq	r0, r2, r0, lsl #30
    888c:	008c3d01 	addeq	r3, ip, r1, lsl #26
    8890:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8894:	00014c04 	andeq	r4, r1, r4, lsl #24
    8898:	00811000 	addeq	r1, r1, r0
    889c:	db110000 	blle	4488a4 <__Stack_Size+0x4480a4>
    88a0:	01000016 	tsteq	r0, r6, lsl r0
    88a4:	00562c64 	subseq	r2, r6, r4, ror #24
    88a8:	00049408 	andeq	r9, r4, r8, lsl #8
    88ac:	619c0100 	orrsvs	r0, ip, r0, lsl #2
    88b0:	12000004 	andne	r0, r0, #4
    88b4:	64010073 	strvs	r0, [r1], #-115	; 0x73
    88b8:	00000461 	andeq	r0, r0, r1, ror #8
    88bc:	000077d8 	ldrdeq	r7, [r0], -r8
    88c0:	6b6c6212 	blvs	1b21110 <__Stack_Size+0x1b20910>
    88c4:	46640100 	strbtmi	r0, [r4], -r0, lsl #2
    88c8:	05000001 	streq	r0, [r0, #-1]
    88cc:	13000078 	movwne	r0, #120	; 0x78
    88d0:	66010077 			; <UNDEFINED> instruction: 0x66010077
    88d4:	00000467 	andeq	r0, r0, r7, ror #8
    88d8:	7ee09103 	urdvcs	f1, f3
    88dc:	01006114 	tsteq	r0, r4, lsl r1
    88e0:	00008c67 	andeq	r8, r0, r7, ror #24
    88e4:	00782300 	rsbseq	r2, r8, r0, lsl #6
    88e8:	00621400 	rsbeq	r1, r2, r0, lsl #8
    88ec:	008c6701 	addeq	r6, ip, r1, lsl #14
    88f0:	78830000 	stmvc	r3, {}	; <UNPREDICTABLE>
    88f4:	63140000 	tstvs	r4, #0
    88f8:	8c670100 	stfhie	f0, [r7], #-0
    88fc:	c5000000 	strgt	r0, [r0, #-0]
    8900:	14000078 	strne	r0, [r0], #-120	; 0x78
    8904:	67010064 	strvs	r0, [r1, -r4, rrx]
    8908:	0000008c 	andeq	r0, r0, ip, lsl #1
    890c:	0000790e 	andeq	r7, r0, lr, lsl #18
    8910:	01006514 	tsteq	r0, r4, lsl r5
    8914:	00008c67 	andeq	r8, r0, r7, ror #24
    8918:	00797200 	rsbseq	r7, r9, r0, lsl #4
    891c:	00661400 	rsbeq	r1, r6, r0, lsl #8
    8920:	008c6701 	addeq	r6, ip, r1, lsl #14
    8924:	79c60000 	stmibvc	r6, {}^	; <UNPREDICTABLE>
    8928:	67140000 	ldrvs	r0, [r4, -r0]
    892c:	8c670100 	stfhie	f0, [r7], #-0
    8930:	07000000 	streq	r0, [r0, -r0]
    8934:	1400007a 	strne	r0, [r0], #-122	; 0x7a
    8938:	67010068 	strvs	r0, [r1, -r8, rrx]
    893c:	0000008c 	andeq	r0, r0, ip, lsl #1
    8940:	00007a4f 	andeq	r7, r0, pc, asr #20
    8944:	01006914 	tsteq	r0, r4, lsl r9
    8948:	00007a68 	andeq	r7, r0, r8, ror #20
    894c:	007a9b00 	rsbseq	r9, sl, r0, lsl #22
    8950:	01231500 	teqeq	r3, r0, lsl #10
    8954:	563c0000 	ldrtpl	r0, [ip], -r0
    8958:	0b280800 	bleq	a0a960 <__Stack_Size+0xa0a160>
    895c:	6b010000 	blvs	48964 <__Stack_Size+0x48164>
    8960:	00000230 	andeq	r0, r0, r0, lsr r2
    8964:	00013316 	andeq	r3, r1, r6, lsl r3
    8968:	007ade00 	rsbseq	sp, sl, r0, lsl #28
    896c:	0b281700 	bleq	a0e574 <__Stack_Size+0xa0dd74>
    8970:	3c180000 	ldccc	0, cr0, [r8], {-0}
    8974:	59000001 	stmdbpl	r0, {r0}
    8978:	0000007b 	andeq	r0, r0, fp, ror r0
    897c:	57881900 	strpl	r1, [r8, r0, lsl #18]
    8980:	02620800 	rsbeq	r0, r2, #0, 16
    8984:	77140000 	ldrvc	r0, [r4, -r0]
    8988:	7b010069 	blvc	48b34 <__Stack_Size+0x48334>
    898c:	00000477 	andeq	r0, r0, r7, ror r4
    8990:	00007c35 	andeq	r7, r0, r5, lsr ip
    8994:	0018fa1a 	andseq	pc, r8, sl, lsl sl	; <UNPREDICTABLE>
    8998:	777c0100 	ldrbvc	r0, [ip, -r0, lsl #2]!
    899c:	4a000004 	bmi	89b4 <__Stack_Size+0x81b4>
    89a0:	1400007c 	strne	r0, [r0], #-124	; 0x7c
    89a4:	00326977 	eorseq	r6, r2, r7, ror r9
    89a8:	04777d01 	ldrbteq	r7, [r7], #-3329	; 0xd01
    89ac:	7ca40000 	stcvc	0, cr0, [r4]
    89b0:	77140000 	ldrvc	r0, [r4, -r0]
    89b4:	01003769 	tsteq	r0, r9, ror #14
    89b8:	0004777e 	andeq	r7, r4, lr, ror r7
    89bc:	007ce800 	rsbseq	lr, ip, r0, lsl #16
    89c0:	30731400 	rsbscc	r1, r3, r0, lsl #8
    89c4:	777f0100 	ldrbvc	r0, [pc, -r0, lsl #2]!
    89c8:	30000004 	andcc	r0, r0, r4
    89cc:	1400007d 	strne	r0, [r0], #-125	; 0x7d
    89d0:	01003173 	tsteq	r0, r3, ror r1
    89d4:	00047781 	andeq	r7, r4, r1, lsl #15
    89d8:	007e6c00 	rsbseq	r6, lr, r0, lsl #24
    89dc:	30531400 	subscc	r1, r3, r0, lsl #8
    89e0:	77850100 	strvc	r0, [r5, r0, lsl #2]
    89e4:	55000004 	strpl	r0, [r0, #-4]
    89e8:	1400007f 	strne	r0, [r0], #-127	; 0x7f
    89ec:	01003153 	tsteq	r0, r3, asr r1
    89f0:	00047786 	andeq	r7, r4, r6, lsl #15
    89f4:	00801a00 	addeq	r1, r0, r0, lsl #20
    89f8:	68631400 	stmdavs	r3!, {sl, ip}^
    89fc:	77870100 	strvc	r0, [r7, r0, lsl #2]
    8a00:	dc000004 	stcle	0, cr0, [r0], {4}
    8a04:	1a000080 	bne	8c0c <__Stack_Size+0x840c>
    8a08:	000018c8 	andeq	r1, r0, r8, asr #17
    8a0c:	04778801 	ldrbteq	r8, [r7], #-2049	; 0x801
    8a10:	81260000 	teqhi	r6, r0
    8a14:	6d140000 	ldcvs	0, cr0, [r4, #-0]
    8a18:	01006a61 	tsteq	r0, r1, ror #20
    8a1c:	00047789 	andeq	r7, r4, r9, lsl #15
    8a20:	00813e00 	addeq	r3, r1, r0, lsl #28
    8a24:	18ce1a00 	stmiane	lr, {r9, fp, ip}^
    8a28:	8a010000 	bhi	48a30 <__Stack_Size+0x48230>
    8a2c:	00000477 	andeq	r0, r0, r7, ror r4
    8a30:	0000819a 	muleq	r0, sl, r1
    8a34:	0000d915 	andeq	sp, r0, r5, lsl r9
    8a38:	0057c000 	subseq	ip, r7, r0
    8a3c:	000b4008 	andeq	r4, fp, r8
    8a40:	0d860100 	stfeqs	f0, [r6]
    8a44:	16000003 	strne	r0, [r0], -r3
    8a48:	000000f2 	strdeq	r0, [r0], -r2
    8a4c:	000081c2 	andeq	r8, r0, r2, asr #3
    8a50:	0000e916 	andeq	lr, r0, r6, lsl r9
    8a54:	0081e200 	addeq	lr, r1, r0, lsl #4
    8a58:	d9150000 	ldmdble	r5, {}	; <UNPREDICTABLE>
    8a5c:	ca000000 	bgt	8a64 <__Stack_Size+0x8264>
    8a60:	68080057 	stmdavs	r8, {r0, r1, r2, r4, r6}
    8a64:	0100000b 	tsteq	r0, fp
    8a68:	00033386 	andeq	r3, r3, r6, lsl #7
    8a6c:	00f21600 	rscseq	r1, r2, r0, lsl #12
    8a70:	82170000 	andshi	r0, r7, #0
    8a74:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    8a78:	e2000000 	and	r0, r0, #0
    8a7c:	00000081 	andeq	r0, r0, r1, lsl #1
    8a80:	0000d915 	andeq	sp, r0, r5, lsl r9
    8a84:	0057fc00 	subseq	pc, r7, r0, lsl #24
    8a88:	000b9008 	andeq	r9, fp, r8
    8a8c:	59860100 	stmibpl	r6, {r8}
    8a90:	16000003 	strne	r0, [r0], -r3
    8a94:	000000f2 	strdeq	r0, [r0], -r2
    8a98:	00008237 	andeq	r8, r0, r7, lsr r2
    8a9c:	0000e916 	andeq	lr, r0, r6, lsl r9
    8aa0:	0081e200 	addeq	lr, r1, r0, lsl #4
    8aa4:	d9150000 	ldmdble	r5, {}	; <UNPREDICTABLE>
    8aa8:	00000000 	andeq	r0, r0, r0
    8aac:	c8080058 	stmdagt	r8, {r3, r4, r6}
    8ab0:	0100000b 	tsteq	r0, fp
    8ab4:	00037f80 	andeq	r7, r3, r0, lsl #31
    8ab8:	00f21600 	rscseq	r1, r2, r0, lsl #12
    8abc:	82590000 	subshi	r0, r9, #0
    8ac0:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    8ac4:	4a000000 	bmi	8acc <__Stack_Size+0x82cc>
    8ac8:	0000007c 	andeq	r0, r0, ip, ror r0
    8acc:	0000d915 	andeq	sp, r0, r5, lsl r9
    8ad0:	00581800 	subseq	r1, r8, r0, lsl #16
    8ad4:	000c0008 	andeq	r0, ip, r8
    8ad8:	a5800100 	strge	r0, [r0, #256]	; 0x100
    8adc:	16000003 	strne	r0, [r0], -r3
    8ae0:	000000f2 	strdeq	r0, [r0], -r2
    8ae4:	00008279 	andeq	r8, r0, r9, ror r2
    8ae8:	0000e916 	andeq	lr, r0, r6, lsl r9
    8aec:	007c4a00 	rsbseq	r4, ip, r0, lsl #20
    8af0:	d9150000 	ldmdble	r5, {}	; <UNPREDICTABLE>
    8af4:	64000000 	strvs	r0, [r0], #-0
    8af8:	30080058 	andcc	r0, r8, r8, asr r0
    8afc:	0100000c 	tsteq	r0, ip
    8b00:	0003cb82 	andeq	ip, r3, r2, lsl #23
    8b04:	00f21600 	rscseq	r1, r2, r0, lsl #12
    8b08:	82990000 	addshi	r0, r9, #0
    8b0c:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    8b10:	a4000000 	strge	r0, [r0], #-0
    8b14:	0000007c 	andeq	r0, r0, ip, ror r0
    8b18:	0000d915 	andeq	sp, r0, r5, lsl r9
    8b1c:	00586c00 	subseq	r6, r8, r0, lsl #24
    8b20:	000c4808 	andeq	r4, ip, r8, lsl #16
    8b24:	f1850100 			; <UNDEFINED> instruction: 0xf1850100
    8b28:	16000003 	strne	r0, [r0], -r3
    8b2c:	000000f2 	strdeq	r0, [r0], -r2
    8b30:	000082b9 			; <UNDEFINED> instruction: 0x000082b9
    8b34:	0000e916 	andeq	lr, r0, r6, lsl r9
    8b38:	0082db00 	addeq	sp, r2, r0, lsl #22
    8b3c:	d9150000 	ldmdble	r5, {}	; <UNPREDICTABLE>
    8b40:	76000000 	strvc	r0, [r0], -r0
    8b44:	70080058 	andvc	r0, r8, r8, asr r0
    8b48:	0100000c 	tsteq	r0, ip
    8b4c:	00041785 	andeq	r1, r4, r5, lsl #15
    8b50:	00f21600 	rscseq	r1, r2, r0, lsl #12
    8b54:	83100000 	tsthi	r0, #0
    8b58:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    8b5c:	db000000 	blle	8b64 <__Stack_Size+0x8364>
    8b60:	00000082 	andeq	r0, r0, r2, lsl #1
    8b64:	0000d915 	andeq	sp, r0, r5, lsl r9
    8b68:	0058d800 	subseq	sp, r8, r0, lsl #16
    8b6c:	000c9808 	andeq	r9, ip, r8, lsl #16
    8b70:	3d820100 	stfccs	f0, [r2]
    8b74:	16000004 	strne	r0, [r0], -r4
    8b78:	000000f2 	strdeq	r0, [r0], -r2
    8b7c:	00008330 	andeq	r8, r0, r0, lsr r3
    8b80:	0000e916 	andeq	lr, r0, r6, lsl r9
    8b84:	007ca400 	rsbseq	sl, ip, r0, lsl #8
    8b88:	d91b0000 	ldmdble	fp, {}	; <UNPREDICTABLE>
    8b8c:	42000000 	andmi	r0, r0, #0
    8b90:	b8080059 	stmdalt	r8, {r0, r3, r4, r6}
    8b94:	0100000c 	tsteq	r0, ip
    8b98:	00f21685 	rscseq	r1, r2, r5, lsl #13
    8b9c:	83520000 	cmphi	r2, #0
    8ba0:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    8ba4:	db000000 	blle	8bac <__Stack_Size+0x83ac>
    8ba8:	00000082 	andeq	r0, r0, r2, lsl #1
    8bac:	040e0000 	streq	r0, [lr], #-0
    8bb0:	000000b2 	strheq	r0, [r0], -r2
    8bb4:	00008c08 	andeq	r8, r0, r8, lsl #24
    8bb8:	00047700 	andeq	r7, r4, r0, lsl #14
    8bbc:	00a20900 	adceq	r0, r2, r0, lsl #18
    8bc0:	000f0000 	andeq	r0, pc, r0
    8bc4:	00008c10 	andeq	r8, r0, r0, lsl ip
    8bc8:	15d31100 	ldrbne	r1, [r3, #256]	; 0x100
    8bcc:	a5010000 	strge	r0, [r1, #-0]
    8bd0:	08005ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, lr}
    8bd4:	00000088 	andeq	r0, r0, r8, lsl #1
    8bd8:	058f9c01 	streq	r9, [pc, #3073]	; 97e1 <__Stack_Size+0x8fe1>
    8bdc:	73120000 	tstvc	r2, #0
    8be0:	61a50100 			; <UNDEFINED> instruction: 0x61a50100
    8be4:	74000004 	strvc	r0, [r0], #-4
    8be8:	12000083 	andne	r0, r0, #131	; 0x83
    8bec:	006b6c62 	rsbeq	r6, fp, r2, ror #24
    8bf0:	0146a501 	cmpeq	r6, r1, lsl #10
    8bf4:	83920000 	orrshi	r0, r2, #0
    8bf8:	ef1c0000 	svc	0x001c0000
    8bfc:	01000018 	tsteq	r0, r8, lsl r0
    8c00:	000097a6 	andeq	r9, r0, r6, lsr #15
    8c04:	0083b000 	addeq	fp, r3, r0
    8c08:	19091d00 	stmdbne	r9, {r8, sl, fp, ip}
    8c0c:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    8c10:	0000058f 	andeq	r0, r0, pc, lsl #11
    8c14:	7ee09103 	urdvcs	f1, f3
    8c18:	0018ff1a 	andseq	pc, r8, sl, lsl pc	; <UNPREDICTABLE>
    8c1c:	9fa90100 	svcls	0x00a90100
    8c20:	e7000005 	str	r0, [r0, -r5]
    8c24:	15000083 	strne	r0, [r0, #-131]	; 0x83
    8c28:	000000fe 	strdeq	r0, [r0], -lr
    8c2c:	08005ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, ip, lr}
    8c30:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    8c34:	0500b501 	streq	fp, [r0, #-1281]	; 0x501
    8c38:	13160000 	tstne	r6, #0
    8c3c:	26000001 	strcs	r0, [r0], -r1
    8c40:	16000084 	strne	r0, [r0], -r4, lsl #1
    8c44:	0000010a 	andeq	r0, r0, sl, lsl #2
    8c48:	00008453 	andeq	r8, r0, r3, asr r4
    8c4c:	5ad81e00 	bpl	ff610454 <BootRAM+0xe580bf5>
    8c50:	07410800 	strbeq	r0, [r1, -r0, lsl #16]
    8c54:	051f0000 	ldreq	r0, [pc, #-0]	; 8c5c <__Stack_Size+0x845c>
    8c58:	011f0000 	tsteq	pc, r0
    8c5c:	00750252 	rsbseq	r0, r5, r2, asr r2
    8c60:	0151011f 	cmpeq	r1, pc, lsl r1
    8c64:	50011f30 	andpl	r1, r1, r0, lsr pc
    8c68:	00007d02 	andeq	r7, r0, r2, lsl #26
    8c6c:	005b161e 	subseq	r1, fp, lr, lsl r6
    8c70:	00015108 	andeq	r5, r1, r8, lsl #2
    8c74:	00053900 	andeq	r3, r5, r0, lsl #18
    8c78:	51011f00 	tstpl	r1, r0, lsl #30
    8c7c:	1f007d02 	svcne	0x00007d02
    8c80:	7a025001 	bvc	9cc8c <__Stack_Size+0x9c48c>
    8c84:	261e0000 	ldrcs	r0, [lr], -r0
    8c88:	5e08005b 	mcrpl	0, 0, r0, cr8, cr11, {2}
    8c8c:	59000007 	stmdbpl	r0, {r0, r1, r2}
    8c90:	1f000005 	svcne	0x00000005
    8c94:	76025201 	strvc	r5, [r2], -r1, lsl #4
    8c98:	51011f00 	tstpl	r1, r0, lsl #30
    8c9c:	1f007702 	svcne	0x00007702
    8ca0:	7d025001 	stcvc	0, cr5, [r2, #-4]
    8ca4:	3c1e0000 	ldccc	0, cr0, [lr], {-0}
    8ca8:	5108005b 	qaddpl	r0, fp, r8
    8cac:	73000001 	movwvc	r0, #1
    8cb0:	1f000005 	svcne	0x00000005
    8cb4:	7d025101 	stfvcs	f5, [r2, #-4]
    8cb8:	50011f00 	andpl	r1, r1, r0, lsl #30
    8cbc:	00007a02 	andeq	r7, r0, r2, lsl #20
    8cc0:	005b4620 	subseq	r4, fp, r0, lsr #12
    8cc4:	00074108 	andeq	r4, r7, r8, lsl #2
    8cc8:	52011f00 	andpl	r1, r1, #0, 30
    8ccc:	1f007502 	svcne	0x00007502
    8cd0:	30015101 	andcc	r5, r1, r1, lsl #2
    8cd4:	0250011f 	subseq	r0, r0, #-1073741817	; 0xc0000007
    8cd8:	0000007d 	andeq	r0, r0, sp, ror r0
    8cdc:	00008108 	andeq	r8, r0, r8, lsl #2
    8ce0:	00059f00 	andeq	r9, r5, r0, lsl #30
    8ce4:	00a20900 	adceq	r0, r2, r0, lsl #18
    8ce8:	007f0000 	rsbseq	r0, pc, r0
    8cec:	00009710 	andeq	r9, r0, r0, lsl r7
    8cf0:	161f1100 	ldrne	r1, [pc], -r0, lsl #2
    8cf4:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    8cf8:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
    8cfc:	00000296 	muleq	r0, r6, r2
    8d00:	06ef9c01 	strbteq	r9, [pc], r1, lsl #24
    8d04:	73120000 	tstvc	r2, #0
    8d08:	efb90100 	svc	0x00b90100
    8d0c:	b6000006 	strlt	r0, [r0], -r6
    8d10:	1c000084 	stcne	0, cr0, [r0], {132}	; 0x84
    8d14:	00000b6d 	andeq	r0, r0, sp, ror #22
    8d18:	011db901 	tsteq	sp, r1, lsl #18
    8d1c:	84d50000 	ldrbhi	r0, [r5], #0
    8d20:	6a1c0000 	bvs	708d28 <__Stack_Size+0x708528>
    8d24:	0100000d 	tsteq	r0, sp
    8d28:	000033ba 			; <UNDEFINED> instruction: 0x000033ba
    8d2c:	00851800 	addeq	r1, r5, r0, lsl #16
    8d30:	656c1200 	strbvs	r1, [ip, #-512]!	; 0x200
    8d34:	ba01006e 	blt	48ef4 <__Stack_Size+0x486f4>
    8d38:	00000033 	andeq	r0, r0, r3, lsr r0
    8d3c:	00008539 	andeq	r8, r0, r9, lsr r5
    8d40:	01006914 	tsteq	r0, r4, lsl r9
    8d44:	00007abc 			; <UNDEFINED> instruction: 0x00007abc
    8d48:	0085ae00 	addeq	sl, r5, r0, lsl #28
    8d4c:	00fe1500 	rscseq	r1, lr, r0, lsl #10
    8d50:	5ba20000 	blpl	fe888d58 <BootRAM+0xd7f94f9>
    8d54:	0d080800 	stceq	8, cr0, [r8, #-0]
    8d58:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    8d5c:	00000626 	andeq	r0, r0, r6, lsr #12
    8d60:	00011316 	andeq	r1, r1, r6, lsl r3
    8d64:	0085d200 	addeq	sp, r5, r0, lsl #4
    8d68:	010a1600 	tsteq	sl, r0, lsl #12
    8d6c:	86480000 	strbhi	r0, [r8], -r0
    8d70:	21000000 	mrscs	r0, (UNDEF: 0)
    8d74:	08005c54 	stmdaeq	r0, {r2, r4, r6, sl, fp, ip, lr}
    8d78:	000000e2 	andeq	r0, r0, r2, ror #1
    8d7c:	00000690 	muleq	r0, r0, r6
    8d80:	706d7413 	rsbvc	r7, sp, r3, lsl r4
    8d84:	faca0100 	blx	ff28918c <BootRAM+0xe1f992d>
    8d88:	02000006 	andeq	r0, r0, #6
    8d8c:	63145091 	tstvs	r4, #145	; 0x91
    8d90:	33cb0100 	biccc	r0, fp, #0, 2
    8d94:	b6000000 	strlt	r0, [r0], -r0
    8d98:	15000086 	strne	r0, [r0, #-134]	; 0x86
    8d9c:	000000fe 	strdeq	r0, [r0], -lr
    8da0:	08005c5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, fp, ip, lr}
    8da4:	00000d28 	andeq	r0, r0, r8, lsr #26
    8da8:	0670d001 	ldrbteq	sp, [r0], -r1
    8dac:	13220000 	teqne	r2, #0
    8db0:	16000001 	strne	r0, [r0], -r1
    8db4:	0000010a 	andeq	r0, r0, sl, lsl #2
    8db8:	000086c9 	andeq	r8, r0, r9, asr #13
    8dbc:	5d242000 	stcpl	0, cr2, [r4, #-0]
    8dc0:	075e0800 	ldrbeq	r0, [lr, -r0, lsl #16]
    8dc4:	011f0000 	tsteq	pc, r0
    8dc8:	00910951 	addseq	r0, r1, r1, asr r9
    8dcc:	22064491 	andcs	r4, r6, #-1862270976	; 0x91000000
    8dd0:	1f1c3008 	svcne	0x001c3008
    8dd4:	91045001 	tstls	r4, r1
    8dd8:	00067fac 	andeq	r7, r6, ip, lsr #31
    8ddc:	5d361900 	ldcpl	9, cr1, [r6, #-0]
    8de0:	00a20800 	adceq	r0, r2, r0, lsl #16
    8de4:	74130000 	ldrvc	r0, [r3], #-0
    8de8:	0100706d 	tsteq	r0, sp, rrx
    8dec:	0006fadf 	ldrdeq	pc, [r6], -pc	; <UNPREDICTABLE>
    8df0:	50910200 	addspl	r0, r1, r0, lsl #4
    8df4:	0000fe15 	andeq	pc, r0, r5, lsl lr	; <UNPREDICTABLE>
    8df8:	005d4600 	subseq	r4, sp, r0, lsl #12
    8dfc:	000d5808 	andeq	r5, sp, r8, lsl #16
    8e00:	cde10100 	stfgte	f0, [r1]
    8e04:	16000006 	strne	r0, [r0], -r6
    8e08:	00000113 	andeq	r0, r0, r3, lsl r1
    8e0c:	000086de 	ldrdeq	r8, [r0], -lr
    8e10:	00010a16 	andeq	r0, r1, r6, lsl sl
    8e14:	00875b00 	addeq	r5, r7, r0, lsl #22
    8e18:	d8200000 	stmdale	r0!, {}	; <UNPREDICTABLE>
    8e1c:	5e08005d 	mcrpl	0, 0, r0, cr8, cr13, {2}
    8e20:	1f000007 	svcne	0x00000007
    8e24:	91045201 	tstls	r4, r1, lsl #4
    8e28:	1f067fa4 	svcne	0x00067fa4
    8e2c:	91025101 	tstls	r2, r1, lsl #2
    8e30:	50011f50 	andpl	r1, r1, r0, asr pc
    8e34:	7fac9104 	svcvc	0x00ac9104
    8e38:	00000006 	andeq	r0, r0, r6
    8e3c:	06f5040e 	ldrbteq	r0, [r5], lr, lsl #8
    8e40:	b2100000 	andslt	r0, r0, #0
    8e44:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8e48:	00000081 	andeq	r0, r0, r1, lsl #1
    8e4c:	0000070a 	andeq	r0, r0, sl, lsl #14
    8e50:	0000a209 	andeq	sl, r0, r9, lsl #4
    8e54:	08000700 	stmdaeq	r0, {r8, r9, sl}
    8e58:	0000008c 	andeq	r0, r0, ip, lsl #1
    8e5c:	0000071a 	andeq	r0, r0, sl, lsl r7
    8e60:	0000a209 	andeq	sl, r0, r9, lsl #4
    8e64:	1d004f00 	stcne	15, cr4, [r0, #-0]
    8e68:	00001932 	andeq	r1, r0, r2, lsr r9
    8e6c:	072b1001 	streq	r1, [fp, -r1]!
    8e70:	03050000 	movweq	r0, #20480	; 0x5000
    8e74:	08007530 	stmdaeq	r0, {r4, r5, r8, sl, ip, sp, lr}
    8e78:	00070a10 	andeq	r0, r7, r0, lsl sl
    8e7c:	160a2300 	strne	r2, [sl], -r0, lsl #6
    8e80:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    8e84:	000006f5 	strdeq	r0, [r0], -r5
    8e88:	74f00305 	ldrbtvc	r0, [r0], #773	; 0x305
    8e8c:	9f240800 	svcls	0x00240800
    8e90:	a900000f 	stmdbge	r0, {r0, r1, r2, r3}
    8e94:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    8e98:	25000007 	strcs	r0, [r0, #-7]
    8e9c:	000000a9 	andeq	r0, r0, r9, lsr #1
    8ea0:	00007a25 	andeq	r7, r0, r5, lsr #20
    8ea4:	00a22500 	adceq	r2, r2, r0, lsl #10
    8ea8:	24000000 	strcs	r0, [r0], #-0
    8eac:	000014de 	ldrdeq	r1, [r0], -lr
    8eb0:	000000a9 	andeq	r0, r0, r9, lsr #1
    8eb4:	0000077b 	andeq	r0, r0, fp, ror r7
    8eb8:	0000a925 	andeq	sl, r0, r5, lsr #18
    8ebc:	077b2500 	ldrbeq	r2, [fp, -r0, lsl #10]!
    8ec0:	a2250000 	eorge	r0, r5, #0
    8ec4:	00000000 	andeq	r0, r0, r0
    8ec8:	0781040e 	streq	r0, [r1, lr, lsl #8]
    8ecc:	00260000 	eoreq	r0, r6, r0
    8ed0:	00000c88 	andeq	r0, r0, r8, lsl #25
    8ed4:	20f90004 	rscscs	r0, r9, r4
    8ed8:	01040000 	mrseq	r0, (UNDEF: 4)
    8edc:	00001b0f 	andeq	r1, r0, pc, lsl #22
    8ee0:	001aaf01 	andseq	sl, sl, r1, lsl #30
    8ee4:	00089300 	andeq	r9, r8, r0, lsl #6
    8ee8:	000e4800 	andeq	r4, lr, r0, lsl #16
    8eec:	00000000 	andeq	r0, r0, r0
    8ef0:	00326500 	eorseq	r6, r2, r0, lsl #10
    8ef4:	05040200 	streq	r0, [r4, #-512]	; 0x200
    8ef8:	000004da 	ldrdeq	r0, [r0], -sl
    8efc:	5e050202 	cdppl	2, 0, cr0, cr5, cr2, {0}
    8f00:	02000006 	andeq	r0, r0, #6
    8f04:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    8f08:	75030000 	strvc	r0, [r3, #-0]
    8f0c:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    8f10:	00004524 	andeq	r4, r0, r4, lsr #10
    8f14:	07040200 	streq	r0, [r4, -r0, lsl #4]
    8f18:	00000252 	andeq	r0, r0, r2, asr r2
    8f1c:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    8f20:	57250200 	strpl	r0, [r5, -r0, lsl #4]!
    8f24:	02000000 	andeq	r0, r0, #0
    8f28:	09490702 	stmdbeq	r9, {r1, r8, r9, sl}^
    8f2c:	75030000 	strvc	r0, [r3, #-0]
    8f30:	26020038 			; <UNDEFINED> instruction: 0x26020038
    8f34:	00000068 	andeq	r0, r0, r8, rrx
    8f38:	18080102 	stmdane	r8, {r1, r8}
    8f3c:	04000008 	streq	r0, [r0], #-8
    8f40:	000019c2 	andeq	r1, r0, r2, asr #19
    8f44:	8e160301 	cdphi	3, 1, cr0, cr6, cr1, {0}
    8f48:	05000000 	streq	r0, [r0, #-0]
    8f4c:	00001ac2 	andeq	r1, r0, r2, asr #21
    8f50:	198d0500 	stmibne	sp, {r8, sl}
    8f54:	05010000 	streq	r0, [r1, #-0]
    8f58:	00001a69 	andeq	r1, r0, r9, ror #20
    8f5c:	c3060002 	movwgt	r0, #24578	; 0x6002
    8f60:	03000019 	movweq	r0, #25
    8f64:	00006f1c 	andeq	r6, r0, ip, lsl pc
    8f68:	1c3c0700 	ldcne	7, cr0, [ip], #-0
    8f6c:	9b010000 	blls	48f74 <__Stack_Size+0x48774>
    8f70:	0000004c 	andeq	r0, r0, ip, asr #32
    8f74:	0000b501 	andeq	fp, r0, r1, lsl #10
    8f78:	1d520800 	ldclne	8, cr0, [r2, #-0]
    8f7c:	9b010000 	blls	48f84 <__Stack_Size+0x48784>
    8f80:	0000005e 	andeq	r0, r0, lr, asr r0
    8f84:	1c930900 	ldcne	9, cr0, [r3], {0}
    8f88:	22010000 	andcs	r0, r1, #0
    8f8c:	00000000 	andeq	r0, r0, r0
    8f90:	0000000c 	andeq	r0, r0, ip
    8f94:	00d89c01 	sbcseq	r9, r8, r1, lsl #24
    8f98:	320a0000 	andcc	r0, sl, #0
    8f9c:	0100001c 	tsteq	r0, ip, lsl r0
    8fa0:	00004c22 	andeq	r4, r0, r2, lsr #24
    8fa4:	00500100 	subseq	r0, r0, r0, lsl #2
    8fa8:	0019fc0b 	andseq	pc, r9, fp, lsl #24
    8fac:	4c2e0100 	stfmis	f0, [lr], #-0
    8fb0:	00000000 	andeq	r0, r0, r0
    8fb4:	0c000000 	stceq	0, cr0, [r0], {-0}
    8fb8:	01000000 	mrseq	r0, (UNDEF: 0)
    8fbc:	19cf099c 	stmibne	pc, {r2, r3, r4, r7, r8, fp}^	; <UNPREDICTABLE>
    8fc0:	3a010000 	bcc	48fc8 <__Stack_Size+0x487c8>
    8fc4:	00000000 	andeq	r0, r0, r0
    8fc8:	0000000c 	andeq	r0, r0, ip
    8fcc:	01109c01 	tsteq	r0, r1, lsl #24
    8fd0:	320a0000 	andcc	r0, sl, #0
    8fd4:	0100001c 	tsteq	r0, ip, lsl r0
    8fd8:	00004c3a 	andeq	r4, r0, sl, lsr ip
    8fdc:	00500100 	subseq	r0, r0, r0, lsl #2
    8fe0:	001c2a0b 	andseq	r2, ip, fp, lsl #20
    8fe4:	4c460100 	stfmie	f0, [r6], {-0}
    8fe8:	00000000 	andeq	r0, r0, r0
    8fec:	0c000000 	stceq	0, cr0, [r0], {-0}
    8ff0:	01000000 	mrseq	r0, (UNDEF: 0)
    8ff4:	1cfe0b9c 	vldmiane	lr!, {d16-d29}
    8ff8:	52010000 	andpl	r0, r1, #0
    8ffc:	0000004c 	andeq	r0, r0, ip, asr #32
    9000:	00000000 	andeq	r0, r0, r0
    9004:	0000000c 	andeq	r0, r0, ip
    9008:	60099c01 	andvs	r9, r9, r1, lsl #24
    900c:	0100001c 	tsteq	r0, ip, lsl r0
    9010:	0000005e 	andeq	r0, r0, lr, asr r0
    9014:	00000c00 	andeq	r0, r0, r0, lsl #24
    9018:	5d9c0100 	ldfpls	f0, [ip]
    901c:	0a000001 	beq	9028 <__Stack_Size+0x8828>
    9020:	00001c32 	andeq	r1, r0, r2, lsr ip
    9024:	004c5e01 	subeq	r5, ip, r1, lsl #28
    9028:	50010000 	andpl	r0, r1, r0
    902c:	1a150b00 	bne	54bc34 <__Stack_Size+0x54b434>
    9030:	6a010000 	bvs	49038 <__Stack_Size+0x48838>
    9034:	0000004c 	andeq	r0, r0, ip, asr #32
    9038:	00000000 	andeq	r0, r0, r0
    903c:	0000000c 	andeq	r0, r0, ip
    9040:	9b099c01 	blls	27004c <__Stack_Size+0x26f84c>
    9044:	0100001c 	tsteq	r0, ip, lsl r0
    9048:	00000076 	andeq	r0, r0, r6, ror r0
    904c:	00001000 	andeq	r1, r0, r0
    9050:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
    9054:	0a000001 	beq	9060 <__Stack_Size+0x8860>
    9058:	00001c32 	andeq	r1, r0, r2, lsr ip
    905c:	004c7601 	subeq	r7, ip, r1, lsl #12
    9060:	50010000 	andpl	r0, r1, r0
    9064:	1c200b00 	stcne	11, cr0, [r0], #-0
    9068:	82010000 	andhi	r0, r1, #0
    906c:	0000004c 	andeq	r0, r0, ip, asr #32
    9070:	00000000 	andeq	r0, r0, r0
    9074:	0000000c 	andeq	r0, r0, ip
    9078:	59099c01 	stmdbpl	r9, {r0, sl, fp, ip, pc}
    907c:	0100001d 	tsteq	r0, sp, lsl r0
    9080:	0000008f 	andeq	r0, r0, pc, lsl #1
    9084:	00000e00 	andeq	r0, r0, r0, lsl #28
    9088:	dc9c0100 	ldfles	f0, [ip], {0}
    908c:	0c000001 	stceq	0, cr0, [r0], {1}
    9090:	00001d52 	andeq	r1, r0, r2, asr sp
    9094:	005e8f01 	subseq	r8, lr, r1, lsl #30
    9098:	87be0000 	ldrhi	r0, [lr, r0]!
    909c:	320a0000 	andcc	r0, sl, #0
    90a0:	0100001c 	tsteq	r0, ip, lsl r0
    90a4:	00004c8f 	andeq	r4, r0, pc, lsl #25
    90a8:	00510100 	subseq	r0, r1, r0, lsl #2
    90ac:	0000990d 	andeq	r9, r0, sp, lsl #18
    90b0:	00000000 	andeq	r0, r0, r0
    90b4:	00001000 	andeq	r1, r0, r0
    90b8:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    90bc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    90c0:	000000a9 	andeq	r0, r0, r9, lsr #1
    90c4:	000087df 	ldrdeq	r8, [r0], -pc	; <UNPREDICTABLE>
    90c8:	1a5f0900 	bne	17cb4d0 <__Stack_Size+0x17cacd0>
    90cc:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    90d0:	00000000 	andeq	r0, r0, r0
    90d4:	0000001c 	andeq	r0, r0, ip, lsl r0
    90d8:	022d9c01 	eoreq	r9, sp, #256	; 0x100
    90dc:	520c0000 	andpl	r0, ip, #0
    90e0:	0100001d 	tsteq	r0, sp, lsl r0
    90e4:	00005ea8 	andeq	r5, r0, r8, lsr #29
    90e8:	00880000 	addeq	r0, r8, r0
    90ec:	1aa90c00 	bne	fea4c0f4 <BootRAM+0xd9bc895>
    90f0:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    90f4:	0000004c 	andeq	r0, r0, ip, asr #32
    90f8:	00008821 	andeq	r8, r0, r1, lsr #16
    90fc:	1bd00f00 	blne	ff40cd04 <BootRAM+0xe37d4a5>
    9100:	b4010000 	strlt	r0, [r1], #-0
    9104:	0000004c 	andeq	r0, r0, ip, asr #32
    9108:	00000000 	andeq	r0, r0, r0
    910c:	00000012 	andeq	r0, r0, r2, lsl r0
    9110:	02569c01 	subseq	r9, r6, #256	; 0x100
    9114:	520c0000 	andpl	r0, ip, #0
    9118:	0100001d 	tsteq	r0, sp, lsl r0
    911c:	00005eb4 			; <UNDEFINED> instruction: 0x00005eb4
    9120:	00884200 	addeq	r4, r8, r0, lsl #4
    9124:	44090000 	strmi	r0, [r9], #-0
    9128:	0100001d 	tsteq	r0, sp, lsl r0
    912c:	005de0c1 	subseq	lr, sp, r1, asr #1
    9130:	00002a08 	andeq	r2, r0, r8, lsl #20
    9134:	9f9c0100 	svcls	0x009c0100
    9138:	0c000002 	stceq	0, cr0, [r0], {2}
    913c:	00001d52 	andeq	r1, r0, r2, asr sp
    9140:	005ec101 	subseq	ip, lr, r1, lsl #2
    9144:	88630000 	stmdahi	r3!, {}^	; <UNPREDICTABLE>
    9148:	cf0a0000 	svcgt	0x000a0000
    914c:	01000013 	tsteq	r0, r3, lsl r0
    9150:	00004cc1 	andeq	r4, r0, r1, asr #25
    9154:	10510100 	subsne	r0, r1, r0, lsl #2
    9158:	08005de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, ip, lr}
    915c:	0000002a 	andeq	r0, r0, sl, lsr #32
    9160:	00075e11 	andeq	r5, r7, r1, lsl lr
    9164:	4cc30100 	stfmie	f0, [r3], {0}
    9168:	01000000 	mrseq	r0, (UNDEF: 0)
    916c:	09000053 	stmdbeq	r0, {r0, r1, r4, r6}
    9170:	00001a32 	andeq	r1, r0, r2, lsr sl
    9174:	0000ce01 	andeq	ip, r0, r1, lsl #28
    9178:	002a0000 	eoreq	r0, sl, r0
    917c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9180:	000002e8 	andeq	r0, r0, r8, ror #5
    9184:	001d520c 	andseq	r5, sp, ip, lsl #4
    9188:	5ece0100 	polple	f0, f6, f0
    918c:	84000000 	strhi	r0, [r0], #-0
    9190:	0a000088 	beq	93b8 <__Stack_Size+0x8bb8>
    9194:	000013cf 	andeq	r1, r0, pc, asr #7
    9198:	004cce01 	subeq	ip, ip, r1, lsl #28
    919c:	51010000 	mrspl	r0, (UNDEF: 1)
    91a0:	00000010 	andeq	r0, r0, r0, lsl r0
    91a4:	00002a00 	andeq	r2, r0, r0, lsl #20
    91a8:	075e1100 	ldrbeq	r1, [lr, -r0, lsl #2]
    91ac:	d0010000 	andle	r0, r1, r0
    91b0:	0000004c 	andeq	r0, r0, ip, asr #32
    91b4:	00005301 	andeq	r5, r0, r1, lsl #6
    91b8:	00197809 	andseq	r7, r9, r9, lsl #16
    91bc:	00db0100 	sbcseq	r0, fp, r0, lsl #2
    91c0:	24000000 	strcs	r0, [r0], #-0
    91c4:	01000000 	mrseq	r0, (UNDEF: 0)
    91c8:	00033e9c 	muleq	r3, ip, lr
    91cc:	1d520c00 	ldclne	12, cr0, [r2, #-0]
    91d0:	db010000 	blle	491d8 <__Stack_Size+0x489d8>
    91d4:	0000005e 	andeq	r0, r0, lr, asr r0
    91d8:	000088a5 	andeq	r8, r0, r5, lsr #17
    91dc:	001aa40a 	andseq	sl, sl, sl, lsl #8
    91e0:	5edb0100 	cdppl	1, 13, cr0, cr11, cr0, {0}
    91e4:	01000000 	mrseq	r0, (UNDEF: 0)
    91e8:	1d161251 	lfmne	f1, 4, [r6, #-324]	; 0xfffffebc
    91ec:	dd010000 	stcle	0, cr0, [r1, #-0]
    91f0:	0000004c 	andeq	r0, r0, ip, asr #32
    91f4:	00009913 	andeq	r9, r0, r3, lsl r9
    91f8:	00000000 	andeq	r0, r0, r0
    91fc:	000d9800 	andeq	r9, sp, r0, lsl #16
    9200:	0ede0100 	cdpeq	1, 13, cr0, cr14, cr0, {0}
    9204:	000000a9 	andeq	r0, r0, r9, lsr #1
    9208:	000088a5 	andeq	r8, r0, r5, lsr #17
    920c:	960f0000 	strls	r0, [pc], -r0
    9210:	0100001a 	tsteq	r0, sl, lsl r0
    9214:	00004cf0 	strdeq	r4, [r0], -r0
    9218:	00000000 	andeq	r0, r0, r0
    921c:	00001200 	andeq	r1, r0, r0, lsl #4
    9220:	679c0100 	ldrvs	r0, [ip, r0, lsl #2]
    9224:	0c000003 	stceq	0, cr0, [r0], {3}
    9228:	00001d52 	andeq	r1, r0, r2, asr sp
    922c:	005ef001 	subseq	pc, lr, r1
    9230:	88c60000 	stmiahi	r6, {}^	; <UNPREDICTABLE>
    9234:	0f000000 	svceq	0x00000000
    9238:	00001999 	muleq	r0, r9, r9
    923c:	004cfc01 	subeq	pc, ip, r1, lsl #24
    9240:	00000000 	andeq	r0, r0, r0
    9244:	00120000 	andseq	r0, r2, r0
    9248:	9c010000 	stcls	0, cr0, [r1], {-0}
    924c:	00000390 	muleq	r0, r0, r3
    9250:	001d520c 	andseq	r5, sp, ip, lsl #4
    9254:	5efc0100 	cdppl	1, 15, cr0, cr12, cr0, {0}
    9258:	e7000000 	str	r0, [r0, -r0]
    925c:	00000088 	andeq	r0, r0, r8, lsl #1
    9260:	00196b14 	andseq	r6, r9, r4, lsl fp
    9264:	01080100 	mrseq	r0, (UNDEF: 24)
    9268:	00000000 	andeq	r0, r0, r0
    926c:	0000001e 	andeq	r0, r0, lr, lsl r0
    9270:	03d19c01 	bicseq	r9, r1, #256	; 0x100
    9274:	52150000 	andspl	r0, r5, #0
    9278:	0100001d 	tsteq	r0, sp, lsl r0
    927c:	005e0108 	subseq	r0, lr, r8, lsl #2
    9280:	89080000 	stmdbhi	r8, {}	; <UNPREDICTABLE>
    9284:	00100000 	andseq	r0, r0, r0
    9288:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    928c:	16000000 	strne	r0, [r0], -r0
    9290:	0000075e 	andeq	r0, r0, lr, asr r7
    9294:	4c010a01 	stcmi	10, cr0, [r1], {1}
    9298:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    929c:	00000089 	andeq	r0, r0, r9, lsl #1
    92a0:	037f1400 	cmneq	pc, #0, 8
    92a4:	14010000 	strne	r0, [r1], #-0
    92a8:	005e0a01 	subseq	r0, lr, r1, lsl #20
    92ac:	00001e08 	andeq	r1, r0, r8, lsl #28
    92b0:	129c0100 	addsne	r0, ip, #0, 2
    92b4:	15000004 	strne	r0, [r0, #-4]
    92b8:	00001d52 	andeq	r1, r0, r2, asr sp
    92bc:	5e011401 	cdppl	4, 0, cr1, cr1, cr1, {0}
    92c0:	54000000 	strpl	r0, [r0], #-0
    92c4:	10000089 	andne	r0, r0, r9, lsl #1
    92c8:	08005e0a 	stmdaeq	r0, {r1, r3, r9, sl, fp, ip, lr}
    92cc:	0000001e 	andeq	r0, r0, lr, lsl r0
    92d0:	00075e16 	andeq	r5, r7, r6, lsl lr
    92d4:	01160100 	tsteq	r6, r0, lsl #2
    92d8:	0000004c 	andeq	r0, r0, ip, asr #32
    92dc:	00008975 	andeq	r8, r0, r5, ror r9
    92e0:	fb140000 	blx	5092ea <__Stack_Size+0x508aea>
    92e4:	0100001b 	tsteq	r0, fp, lsl r0
    92e8:	00000120 	andeq	r0, r0, r0, lsr #2
    92ec:	001e0000 	andseq	r0, lr, r0
    92f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    92f4:	00000439 	andeq	r0, r0, r9, lsr r4
    92f8:	001d5215 	andseq	r5, sp, r5, lsl r2
    92fc:	01200100 	teqeq	r0, r0, lsl #2
    9300:	0000005e 	andeq	r0, r0, lr, asr r0
    9304:	000089a3 	andeq	r8, r0, r3, lsr #19
    9308:	1c131400 	cfldrsne	mvf1, [r3], {-0}
    930c:	2c010000 	stccs	0, cr0, [r1], {-0}
    9310:	00000001 	andeq	r0, r0, r1
    9314:	00001c00 	andeq	r1, r0, r0, lsl #24
    9318:	609c0100 	addsvs	r0, ip, r0, lsl #2
    931c:	15000004 	strne	r0, [r0, #-4]
    9320:	00001d52 	andeq	r1, r0, r2, asr sp
    9324:	5e012c01 	cdppl	12, 0, cr2, cr1, cr1, {0}
    9328:	c4000000 	strgt	r0, [r0], #-0
    932c:	00000089 	andeq	r0, r0, r9, lsl #1
    9330:	00079414 	andeq	r9, r7, r4, lsl r4
    9334:	01370100 	teqeq	r7, r0, lsl #2
    9338:	08005e28 	stmdaeq	r0, {r3, r5, r9, sl, fp, ip, lr}
    933c:	0000001c 	andeq	r0, r0, ip, lsl r0
    9340:	04879c01 	streq	r9, [r7], #3073	; 0xc01
    9344:	52150000 	andspl	r0, r5, #0
    9348:	0100001d 	tsteq	r0, sp, lsl r0
    934c:	005e0137 	subseq	r0, lr, r7, lsr r1
    9350:	89e50000 	stmibhi	r5!, {}^	; <UNPREDICTABLE>
    9354:	14000000 	strne	r0, [r0], #-0
    9358:	00001cef 	andeq	r1, r0, pc, ror #25
    935c:	00014201 	andeq	r4, r1, r1, lsl #4
    9360:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    9364:	01000000 	mrseq	r0, (UNDEF: 0)
    9368:	0004ae9c 	muleq	r4, ip, lr
    936c:	1d521500 	cfldr64ne	mvdx1, [r2, #-0]
    9370:	42010000 	andmi	r0, r1, #0
    9374:	00005e01 	andeq	r5, r0, r1, lsl #28
    9378:	008a0600 	addeq	r0, sl, r0, lsl #12
    937c:	ec140000 	ldc	0, cr0, [r4], {-0}
    9380:	0100001a 	tsteq	r0, sl, lsl r0
    9384:	0000014d 	andeq	r0, r0, sp, asr #2
    9388:	001e0000 	andseq	r0, lr, r0
    938c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9390:	000004d5 	ldrdeq	r0, [r0], -r5
    9394:	001d5215 	andseq	r5, sp, r5, lsl r2
    9398:	014d0100 	mrseq	r0, (UNDEF: 93)
    939c:	0000005e 	andeq	r0, r0, lr, asr r0
    93a0:	00008a27 	andeq	r8, r0, r7, lsr #20
    93a4:	1bad1400 	blne	feb4e3ac <BootRAM+0xdabeb4d>
    93a8:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    93ac:	00000001 	andeq	r0, r0, r1
    93b0:	00001c00 	andeq	r1, r0, r0, lsl #24
    93b4:	fc9c0100 	ldc2	1, cr0, [ip], {0}
    93b8:	15000004 	strne	r0, [r0, #-4]
    93bc:	00001d52 	andeq	r1, r0, r2, asr sp
    93c0:	5e015801 	cdppl	8, 0, cr5, cr1, cr1, {0}
    93c4:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    93c8:	0000008a 	andeq	r0, r0, sl, lsl #1
    93cc:	00194917 	andseq	r4, r9, r7, lsl r9
    93d0:	01630100 	cmneq	r3, r0, lsl #2
    93d4:	0000004c 	andeq	r0, r0, ip, asr #32
    93d8:	00000000 	andeq	r0, r0, r0
    93dc:	0000001a 	andeq	r0, r0, sl, lsl r0
    93e0:	05279c01 	streq	r9, [r7, #-3073]!	; 0xc01
    93e4:	52150000 	andspl	r0, r5, #0
    93e8:	0100001d 	tsteq	r0, sp, lsl r0
    93ec:	005e0163 	subseq	r0, lr, r3, ror #2
    93f0:	8a690000 	bhi	1a493f8 <__Stack_Size+0x1a48bf8>
    93f4:	17000000 	strne	r0, [r0, -r0]
    93f8:	00001a04 	andeq	r1, r0, r4, lsl #20
    93fc:	4c016e01 	stcmi	14, cr6, [r1], {1}
    9400:	00000000 	andeq	r0, r0, r0
    9404:	1a000000 	bne	940c <__Stack_Size+0x8c0c>
    9408:	01000000 	mrseq	r0, (UNDEF: 0)
    940c:	0005529c 	muleq	r5, ip, r2
    9410:	1d521500 	cfldr64ne	mvdx1, [r2, #-0]
    9414:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    9418:	00005e01 	andeq	r5, r0, r1, lsl #28
    941c:	008a8a00 	addeq	r8, sl, r0, lsl #20
    9420:	da140000 	ble	509428 <__Stack_Size+0x508c28>
    9424:	0100001b 	tsteq	r0, fp, lsl r0
    9428:	00000179 	andeq	r0, r0, r9, ror r1
    942c:	00180000 	andseq	r0, r8, r0
    9430:	9c010000 	stcls	0, cr0, [r1], {-0}
    9434:	00000579 	andeq	r0, r0, r9, ror r5
    9438:	001d5215 	andseq	r5, sp, r5, lsl r2
    943c:	01790100 	cmneq	r9, r0, lsl #2
    9440:	0000005e 	andeq	r0, r0, lr, asr r0
    9444:	00008aab 	andeq	r8, r0, fp, lsr #21
    9448:	1cb21400 	cfldrsne	mvf1, [r2]
    944c:	84010000 	strhi	r0, [r1], #-0
    9450:	00000001 	andeq	r0, r0, r1
    9454:	00001c00 	andeq	r1, r0, r0, lsl #24
    9458:	a09c0100 	addsge	r0, ip, r0, lsl #2
    945c:	15000005 	strne	r0, [r0, #-5]
    9460:	00001d52 	andeq	r1, r0, r2, asr sp
    9464:	5e018401 	cdppl	4, 0, cr8, cr1, cr1, {0}
    9468:	cc000000 	stcgt	0, cr0, [r0], {-0}
    946c:	0000008a 	andeq	r0, r0, sl, lsl #1
    9470:	001a4014 	andseq	r4, sl, r4, lsl r0
    9474:	018f0100 	orreq	r0, pc, r0, lsl #2
    9478:	00000000 	andeq	r0, r0, r0
    947c:	00000020 	andeq	r0, r0, r0, lsr #32
    9480:	05c79c01 	strbeq	r9, [r7, #3073]	; 0xc01
    9484:	52150000 	andspl	r0, r5, #0
    9488:	0100001d 	tsteq	r0, sp, lsl r0
    948c:	005e018f 	subseq	r0, lr, pc, lsl #3
    9490:	8aed0000 	bhi	ffb49498 <BootRAM+0xeab9c39>
    9494:	14000000 	strne	r0, [r0], #-0
    9498:	000019a7 	andeq	r1, r0, r7, lsr #19
    949c:	00019a01 	andeq	r9, r1, r1, lsl #20
    94a0:	20000000 	andcs	r0, r0, r0
    94a4:	01000000 	mrseq	r0, (UNDEF: 0)
    94a8:	0005ee9c 	muleq	r5, ip, lr
    94ac:	1d521500 	cfldr64ne	mvdx1, [r2, #-0]
    94b0:	9a010000 	bls	494b8 <__Stack_Size+0x48cb8>
    94b4:	00005e01 	andeq	r5, r0, r1, lsl #28
    94b8:	008b0e00 	addeq	r0, fp, r0, lsl #28
    94bc:	e9140000 	ldmdb	r4, {}	; <UNPREDICTABLE>
    94c0:	01000019 	tsteq	r0, r9, lsl r0
    94c4:	5e4401a5 	dvfpldp	f0, f4, f5
    94c8:	00200800 	eoreq	r0, r0, r0, lsl #16
    94cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    94d0:	00000615 	andeq	r0, r0, r5, lsl r6
    94d4:	001d5215 	andseq	r5, sp, r5, lsl r2
    94d8:	01a50100 			; <UNDEFINED> instruction: 0x01a50100
    94dc:	0000005e 	andeq	r0, r0, lr, asr r0
    94e0:	00008b2f 	andeq	r8, r0, pc, lsr #22
    94e4:	1d371400 	cfldrsne	mvf1, [r7, #-0]
    94e8:	b0010000 	andlt	r0, r1, r0
    94ec:	005e6401 	subseq	r6, lr, r1, lsl #8
    94f0:	00002008 	andeq	r2, r0, r8
    94f4:	3c9c0100 	ldfccs	f0, [ip], {0}
    94f8:	15000006 	strne	r0, [r0, #-6]
    94fc:	00001d52 	andeq	r1, r0, r2, asr sp
    9500:	5e01b001 	cdppl	0, 0, cr11, cr1, cr1, {0}
    9504:	50000000 	andpl	r0, r0, r0
    9508:	0000008b 	andeq	r0, r0, fp, lsl #1
    950c:	001a2514 	andseq	r2, sl, r4, lsl r5
    9510:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    9514:	00000000 	andeq	r0, r0, r0
    9518:	0000001e 	andeq	r0, r0, lr, lsl r0
    951c:	06739c01 	ldrbteq	r9, [r3], -r1, lsl #24
    9520:	52150000 	andspl	r0, r5, #0
    9524:	0100001d 	tsteq	r0, sp, lsl r0
    9528:	005e01bc 	ldrheq	r0, [lr], #-28	; 0xffffffe4
    952c:	8b710000 	blhi	1c49534 <__Stack_Size+0x1c48d34>
    9530:	f6150000 			; <UNDEFINED> instruction: 0xf6150000
    9534:	01000019 	tsteq	r0, r9, lsl r0
    9538:	005e01bc 	ldrheq	r0, [lr], #-28	; 0xffffffe4
    953c:	8b920000 	blhi	fe489544 <BootRAM+0xd3f9ce5>
    9540:	17000000 	strne	r0, [r0, -r0]
    9544:	000019b5 			; <UNDEFINED> instruction: 0x000019b5
    9548:	5e01c701 	cdppl	7, 0, cr12, cr1, cr1, {0}
    954c:	00000000 	andeq	r0, r0, r0
    9550:	12000000 	andne	r0, r0, #0
    9554:	01000000 	mrseq	r0, (UNDEF: 0)
    9558:	00069e9c 	muleq	r6, ip, lr
    955c:	1d521500 	cfldr64ne	mvdx1, [r2, #-0]
    9560:	c7010000 	strgt	r0, [r1, -r0]
    9564:	00005e01 	andeq	r5, r0, r1, lsl #28
    9568:	008bb300 	addeq	fp, fp, r0, lsl #6
    956c:	03140000 	tsteq	r4, #0
    9570:	0100001b 	tsteq	r0, fp, lsl r0
    9574:	000001d3 	ldrdeq	r0, [r0], -r3
    9578:	00200000 	eoreq	r0, r0, r0
    957c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9580:	000006d5 	ldrdeq	r0, [r0], -r5
    9584:	001d5215 	andseq	r5, sp, r5, lsl r2
    9588:	01d30100 	bicseq	r0, r3, r0, lsl #2
    958c:	0000005e 	andeq	r0, r0, lr, asr r0
    9590:	00008bd4 	ldrdeq	r8, [r0], -r4
    9594:	001c4815 	andseq	r4, ip, r5, lsl r8
    9598:	01d30100 	bicseq	r0, r3, r0, lsl #2
    959c:	0000004c 	andeq	r0, r0, ip, asr #32
    95a0:	00008bf5 	strdeq	r8, [r0], -r5
    95a4:	1d651400 	cfstrdne	mvd1, [r5, #-0]
    95a8:	df010000 	svcle	0x00010000
    95ac:	00000001 	andeq	r0, r0, r1
    95b0:	00002000 	andeq	r2, r0, r0
    95b4:	0c9c0100 	ldfeqs	f0, [ip], {0}
    95b8:	15000007 	strne	r0, [r0, #-7]
    95bc:	00001d52 	andeq	r1, r0, r2, asr sp
    95c0:	5e01df01 	cdppl	15, 0, cr13, cr1, cr1, {0}
    95c4:	16000000 	strne	r0, [r0], -r0
    95c8:	1500008c 	strne	r0, [r0, #-140]	; 0x8c
    95cc:	00001c48 	andeq	r1, r0, r8, asr #24
    95d0:	4c01df01 	stcmi	15, cr13, [r1], {1}
    95d4:	37000000 	strcc	r0, [r0, -r0]
    95d8:	0000008c 	andeq	r0, r0, ip, lsl #1
    95dc:	001d2b17 	andseq	r2, sp, r7, lsl fp
    95e0:	01ea0100 	mvneq	r0, r0, lsl #2
    95e4:	0000004c 	andeq	r0, r0, ip, asr #32
    95e8:	08005e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, lr}
    95ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    95f0:	07379c01 	ldreq	r9, [r7, -r1, lsl #24]!
    95f4:	52150000 	andspl	r0, r5, #0
    95f8:	0100001d 	tsteq	r0, sp, lsl r0
    95fc:	005e01ea 	subseq	r0, lr, sl, ror #3
    9600:	8c580000 	mrahi	r0, r8, acc0
    9604:	17000000 	strne	r0, [r0, -r0]
    9608:	00001a79 	andeq	r1, r0, r9, ror sl
    960c:	4c01f501 	cfstr32mi	mvfx15, [r1], {1}
    9610:	a0000000 	andge	r0, r0, r0
    9614:	1c08005e 	stcne	0, cr0, [r8], {94}	; 0x5e
    9618:	01000000 	mrseq	r0, (UNDEF: 0)
    961c:	0007629c 	muleq	r7, ip, r2
    9620:	1d521500 	cfldr64ne	mvdx1, [r2, #-0]
    9624:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    9628:	00005e01 	andeq	r5, r0, r1, lsl #28
    962c:	008c7900 	addeq	r7, ip, r0, lsl #18
    9630:	06140000 	ldreq	r0, [r4], -r0
    9634:	0100001c 	tsteq	r0, ip, lsl r0
    9638:	5ebc0201 	cdppl	2, 11, cr0, cr12, cr1, {0}
    963c:	001c0800 	andseq	r0, ip, r0, lsl #16
    9640:	9c010000 	stcls	0, cr0, [r1], {-0}
    9644:	00000797 	muleq	r0, r7, r7
    9648:	001d5215 	andseq	r5, sp, r5, lsl r2
    964c:	02010100 	andeq	r0, r1, #0, 2
    9650:	0000005e 	andeq	r0, r0, lr, asr r0
    9654:	00008c9a 	muleq	r0, sl, ip
    9658:	001a1e18 	andseq	r1, sl, r8, lsl lr
    965c:	02010100 	andeq	r0, r1, #0, 2
    9660:	0000004c 	andeq	r0, r0, ip, asr #32
    9664:	14005101 	strne	r5, [r0], #-257	; 0x101
    9668:	00001c70 	andeq	r1, r0, r0, ror ip
    966c:	00020d01 	andeq	r0, r2, r1, lsl #26
    9670:	26000000 	strcs	r0, [r0], -r0
    9674:	01000000 	mrseq	r0, (UNDEF: 0)
    9678:	0007e69c 	muleq	r7, ip, r6
    967c:	1c691800 	stclne	8, cr1, [r9], #-0
    9680:	0d010000 	stceq	0, cr0, [r1, #-0]
    9684:	0007e602 	andeq	lr, r7, r2, lsl #12
    9688:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    968c:	00001a1e 	andeq	r1, r0, lr, lsl sl
    9690:	4c020d01 	stcmi	13, cr0, [r2], {1}
    9694:	bb000000 	bllt	969c <__Stack_Size+0x8e9c>
    9698:	1000008c 	andne	r0, r0, ip, lsl #1
    969c:	00000000 	andeq	r0, r0, r0
    96a0:	00000026 	andeq	r0, r0, r6, lsr #32
    96a4:	0019e016 	andseq	lr, r9, r6, lsl r0
    96a8:	020f0100 	andeq	r0, pc, #0, 2
    96ac:	0000004c 	andeq	r0, r0, ip, asr #32
    96b0:	00008cf5 	strdeq	r8, [r0], -r5
    96b4:	04190000 	ldreq	r0, [r9], #-0
    96b8:	0000003a 	andeq	r0, r0, sl, lsr r0
    96bc:	00099c14 	andeq	r9, r9, r4, lsl ip
    96c0:	02190100 	andseq	r0, r9, #0, 2
    96c4:	08005ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, lr}
    96c8:	00000040 	andeq	r0, r0, r0, asr #32
    96cc:	08519c01 	ldmdaeq	r1, {r0, sl, fp, ip, pc}^
    96d0:	52150000 	andspl	r0, r5, #0
    96d4:	0100001d 	tsteq	r0, sp, lsl r0
    96d8:	005e0219 	subseq	r0, lr, r9, lsl r2
    96dc:	8d1e0000 	ldchi	0, cr0, [lr, #-0]
    96e0:	1e150000 	cdpne	0, 1, cr0, cr5, cr0, {0}
    96e4:	0100001a 	tsteq	r0, sl, lsl r0
    96e8:	004c0219 	subeq	r0, ip, r9, lsl r2
    96ec:	8d3f0000 	ldchi	0, cr0, [pc, #-0]	; 96f4 <__Stack_Size+0x8ef4>
    96f0:	d8100000 	ldmdale	r0, {}	; <UNPREDICTABLE>
    96f4:	4008005e 	andmi	r0, r8, lr, asr r0
    96f8:	1a000000 	bne	9700 <__Stack_Size+0x8f00>
    96fc:	00001c69 	andeq	r1, r0, r9, ror #24
    9700:	e6021b01 	str	r1, [r2], -r1, lsl #22
    9704:	01000007 	tsteq	r0, r7
    9708:	0db01b52 	ldceq	11, cr1, [r0, #328]!	; 0x148
    970c:	e0160000 	ands	r0, r6, r0
    9710:	01000019 	tsteq	r0, r9, lsl r0
    9714:	004c021b 	subeq	r0, ip, fp, lsl r2
    9718:	8d600000 	stclhi	0, cr0, [r0, #-0]
    971c:	00000000 	andeq	r0, r0, r0
    9720:	1ca51700 	stcne	7, cr1, [r5]
    9724:	24010000 	strcs	r0, [r1], #-0
    9728:	00004c02 	andeq	r4, r0, r2, lsl #24
    972c:	00000000 	andeq	r0, r0, r0
    9730:	00002000 	andeq	r2, r0, r0
    9734:	7c9c0100 	ldfvcs	f0, [ip], {0}
    9738:	15000008 	strne	r0, [r0, #-8]
    973c:	00001d52 	andeq	r1, r0, r2, asr sp
    9740:	5e022401 	cdppl	4, 0, cr2, cr2, cr1, {0}
    9744:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    9748:	0000008d 	andeq	r0, r0, sp, lsl #1
    974c:	001c8017 	andseq	r8, ip, r7, lsl r0
    9750:	022f0100 	eoreq	r0, pc, #0, 2
    9754:	0000004c 	andeq	r0, r0, ip, asr #32
    9758:	00000000 	andeq	r0, r0, r0
    975c:	00000020 	andeq	r0, r0, r0, lsr #32
    9760:	08a79c01 	stmiaeq	r7!, {r0, sl, fp, ip, pc}
    9764:	52150000 	andspl	r0, r5, #0
    9768:	0100001d 	tsteq	r0, sp, lsl r0
    976c:	005e022f 	subseq	r0, lr, pc, lsr #4
    9770:	8db90000 	ldchi	0, cr0, [r9]
    9774:	14000000 	strne	r0, [r0], #-0
    9778:	00001a4e 	andeq	r1, r0, lr, asr #20
    977c:	00023c01 	andeq	r3, r2, r1, lsl #24
    9780:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    9784:	01000000 	mrseq	r0, (UNDEF: 0)
    9788:	0008ee9c 	muleq	r8, ip, lr
    978c:	1d521500 	cfldr64ne	mvdx1, [r2, #-0]
    9790:	3c010000 	stccc	0, cr0, [r1], {-0}
    9794:	00005e02 	andeq	r5, r0, r2, lsl #28
    9798:	008dda00 	addeq	sp, sp, r0, lsl #20
    979c:	1ce51500 	cfstr64ne	mvdx1, [r5]
    97a0:	3c010000 	stccc	0, cr0, [r1], {-0}
    97a4:	00004c02 	andeq	r4, r0, r2, lsl #24
    97a8:	008dfb00 	addeq	pc, sp, r0, lsl #22
    97ac:	1add1500 	bne	ff74ebb4 <BootRAM+0xe6bf355>
    97b0:	3c010000 	stccc	0, cr0, [r1], {-0}
    97b4:	00004c02 	andeq	r4, r0, r2, lsl #24
    97b8:	008e1c00 	addeq	r1, lr, r0, lsl #24
    97bc:	85140000 	ldrhi	r0, [r4, #-0]
    97c0:	0100001a 	tsteq	r0, sl, lsl r0
    97c4:	00000248 	andeq	r0, r0, r8, asr #4
    97c8:	00200000 	eoreq	r0, r0, r0
    97cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    97d0:	00000925 	andeq	r0, r0, r5, lsr #18
    97d4:	001d5215 	andseq	r5, sp, r5, lsl r2
    97d8:	02480100 	subeq	r0, r8, #0, 2
    97dc:	0000005e 	andeq	r0, r0, lr, asr r0
    97e0:	00008e3d 	andeq	r8, r0, sp, lsr lr
    97e4:	001ce515 	andseq	lr, ip, r5, lsl r5
    97e8:	02480100 	subeq	r0, r8, #0, 2
    97ec:	0000004c 	andeq	r0, r0, ip, asr #32
    97f0:	00008e5e 	andeq	r8, r0, lr, asr lr
    97f4:	195a1400 	ldmdbne	sl, {sl, ip}^
    97f8:	54010000 	strpl	r0, [r1], #-0
    97fc:	00000002 	andeq	r0, r0, r2
    9800:	00002000 	andeq	r2, r0, r0
    9804:	5c9c0100 	ldfpls	f0, [ip], {0}
    9808:	15000009 	strne	r0, [r0, #-9]
    980c:	00001d52 	andeq	r1, r0, r2, asr sp
    9810:	5e025401 	cdppl	4, 0, cr5, cr2, cr1, {0}
    9814:	7f000000 	svcvc	0x00000000
    9818:	1500008e 	strne	r0, [r0, #-142]	; 0x8e
    981c:	00001add 	ldrdeq	r1, [r0], -sp
    9820:	4c025401 	cfstrsmi	mvf5, [r2], {1}
    9824:	a0000000 	andge	r0, r0, r0
    9828:	0000008e 	andeq	r0, r0, lr, lsl #1
    982c:	001d0517 	andseq	r0, sp, r7, lsl r5
    9830:	025f0100 	subseq	r0, pc, #0, 2
    9834:	0000004c 	andeq	r0, r0, ip, asr #32
    9838:	00000000 	andeq	r0, r0, r0
    983c:	0000001c 	andeq	r0, r0, ip, lsl r0
    9840:	09879c01 	stmibeq	r7, {r0, sl, fp, ip, pc}
    9844:	52150000 	andspl	r0, r5, #0
    9848:	0100001d 	tsteq	r0, sp, lsl r0
    984c:	005e025f 	subseq	r0, lr, pc, asr r2
    9850:	8ec10000 	cdphi	0, 12, cr0, cr1, cr0, {0}
    9854:	17000000 	strne	r0, [r0, -r0]
    9858:	00001bbf 			; <UNDEFINED> instruction: 0x00001bbf
    985c:	4c026a01 	stcmi	10, cr6, [r2], {1}
    9860:	00000000 	andeq	r0, r0, r0
    9864:	1c000000 	stcne	0, cr0, [r0], {-0}
    9868:	01000000 	mrseq	r0, (UNDEF: 0)
    986c:	0009b29c 	muleq	r9, ip, r2
    9870:	1d521500 	cfldr64ne	mvdx1, [r2, #-0]
    9874:	6a010000 	bvs	4987c <__Stack_Size+0x4907c>
    9878:	00005e02 	andeq	r5, r0, r2, lsl #28
    987c:	008ee200 	addeq	lr, lr, r0, lsl #4
    9880:	e9140000 	ldmdb	r4, {}	; <UNPREDICTABLE>
    9884:	0100001b 	tsteq	r0, fp, lsl r0
    9888:	00000276 	andeq	r0, r0, r6, ror r2
    988c:	00a80000 	adceq	r0, r8, r0
    9890:	9c010000 	stcls	0, cr0, [r1], {-0}
    9894:	00000a59 	andeq	r0, r0, r9, asr sl
    9898:	001d5215 	andseq	r5, sp, r5, lsl r2
    989c:	02760100 	rsbseq	r0, r6, #0, 2
    98a0:	0000005e 	andeq	r0, r0, lr, asr r0
    98a4:	00008f03 	andeq	r8, r0, r3, lsl #30
    98a8:	001aa415 	andseq	sl, sl, r5, lsl r4
    98ac:	02760100 	rsbseq	r0, r6, #0, 2
    98b0:	0000005e 	andeq	r0, r0, lr, asr r0
    98b4:	00008f48 	andeq	r8, r0, r8, asr #30
    98b8:	001a1e15 	andseq	r1, sl, r5, lsl lr
    98bc:	02760100 	rsbseq	r0, r6, #0, 2
    98c0:	0000004c 	andeq	r0, r0, ip, asr #32
    98c4:	00008f8d 	andeq	r8, r0, sp, lsl #31
    98c8:	0000001c 	andeq	r0, r0, ip, lsl r0
    98cc:	00003a00 	andeq	r3, r0, r0, lsl #20
    98d0:	000a2c00 	andeq	r2, sl, r0, lsl #24
    98d4:	1c691600 	stclne	6, cr1, [r9], #-0
    98d8:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    98dc:	0007e602 	andeq	lr, r7, r2, lsl #12
    98e0:	008fb900 	addeq	fp, pc, r0, lsl #18
    98e4:	0dc81b00 	vstreq	d17, [r8]
    98e8:	e0160000 	ands	r0, r6, r0
    98ec:	01000019 	tsteq	r0, r9, lsl r0
    98f0:	004c0278 	subeq	r0, ip, r8, ror r2
    98f4:	8fd70000 	svchi	0x00d70000
    98f8:	00000000 	andeq	r0, r0, r0
    98fc:	000de01b 	andeq	lr, sp, fp, lsl r0
    9900:	1c691600 	stclne	6, cr1, [r9], #-0
    9904:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    9908:	0007e602 	andeq	lr, r7, r2, lsl #12
    990c:	00900f00 	addseq	r0, r0, r0, lsl #30
    9910:	0df81b00 	ldcleq	11, cr1, [r8]
    9914:	e0160000 	ands	r0, r6, r0
    9918:	01000019 	tsteq	r0, r9, lsl r0
    991c:	004c0278 	subeq	r0, ip, r8, ror r2
    9920:	902d0000 	eorls	r0, sp, r0
    9924:	00000000 	andeq	r0, r0, r0
    9928:	1cd31400 	cfldrdne	mvd1, [r3], {0}
    992c:	82010000 	andhi	r0, r1, #0
    9930:	00000002 	andeq	r0, r0, r2
    9934:	00005c00 	andeq	r5, r0, r0, lsl #24
    9938:	d09c0100 	addsle	r0, ip, r0, lsl #2
    993c:	1500000a 	strne	r0, [r0, #-10]
    9940:	00001d52 	andeq	r1, r0, r2, asr sp
    9944:	5e028201 	cdppl	2, 0, cr8, cr2, cr1, {0}
    9948:	65000000 	strvs	r0, [r0, #-0]
    994c:	15000090 	strne	r0, [r0, #-144]	; 0x90
    9950:	00001aa4 	andeq	r1, r0, r4, lsr #21
    9954:	5e028201 	cdppl	2, 0, cr8, cr2, cr1, {0}
    9958:	9f000000 	svcls	0x00000000
    995c:	15000090 	strne	r0, [r0, #-144]	; 0x90
    9960:	00001a1e 	andeq	r1, r0, lr, lsl sl
    9964:	4c028201 	sfmmi	f0, 1, [r2], {1}
    9968:	cb000000 	blgt	9970 <__Stack_Size+0x9170>
    996c:	10000090 	mulne	r0, r0, r0
    9970:	00000000 	andeq	r0, r0, r0
    9974:	00000038 	andeq	r0, r0, r8, lsr r0
    9978:	001c6916 	andseq	r6, ip, r6, lsl r9
    997c:	02840100 	addeq	r0, r4, #0, 2
    9980:	000007e6 	andeq	r0, r0, r6, ror #15
    9984:	000090f7 	strdeq	r9, [r0], -r7
    9988:	000e181b 	andeq	r1, lr, fp, lsl r8
    998c:	19e01600 	stmibne	r0!, {r9, sl, ip}^
    9990:	84010000 	strhi	r0, [r1], #-0
    9994:	00004c02 	andeq	r4, r0, r2, lsl #24
    9998:	00910a00 	addseq	r0, r1, r0, lsl #20
    999c:	00000000 	andeq	r0, r0, r0
    99a0:	001d7114 	andseq	r7, sp, r4, lsl r1
    99a4:	028e0100 	addeq	r0, lr, #0, 2
    99a8:	00000000 	andeq	r0, r0, r0
    99ac:	0000005c 	andeq	r0, r0, ip, asr r0
    99b0:	0b479c01 	bleq	11f09bc <__Stack_Size+0x11f01bc>
    99b4:	52150000 	andspl	r0, r5, #0
    99b8:	0100001d 	tsteq	r0, sp, lsl r0
    99bc:	005e028e 	subseq	r0, lr, lr, lsl #5
    99c0:	91420000 	mrsls	r0, (UNDEF: 66)
    99c4:	a4150000 	ldrge	r0, [r5], #-0
    99c8:	0100001a 	tsteq	r0, sl, lsl r0
    99cc:	005e028e 	subseq	r0, lr, lr, lsl #5
    99d0:	917c0000 	cmnls	ip, r0
    99d4:	1e150000 	cdpne	0, 1, cr0, cr5, cr0, {0}
    99d8:	0100001a 	tsteq	r0, sl, lsl r0
    99dc:	004c028e 	subeq	r0, ip, lr, lsl #5
    99e0:	91a80000 			; <UNDEFINED> instruction: 0x91a80000
    99e4:	00100000 	andseq	r0, r0, r0
    99e8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    99ec:	16000000 	strne	r0, [r0], -r0
    99f0:	00001c69 	andeq	r1, r0, r9, ror #24
    99f4:	e6029001 	str	r9, [r2], -r1
    99f8:	d4000007 	strle	r0, [r0], #-7
    99fc:	1b000091 	blne	9c48 <__Stack_Size+0x9448>
    9a00:	00000e30 	andeq	r0, r0, r0, lsr lr
    9a04:	0019e016 	andseq	lr, r9, r6, lsl r0
    9a08:	02900100 	addseq	r0, r0, #0, 2
    9a0c:	0000004c 	andeq	r0, r0, ip, asr #32
    9a10:	000091e7 	andeq	r9, r0, r7, ror #3
    9a14:	17000000 	strne	r0, [r0, -r0]
    9a18:	00001c4e 	andeq	r1, r0, lr, asr #24
    9a1c:	4c029a01 	stcmi	10, cr9, [r2], {1}
    9a20:	00000000 	andeq	r0, r0, r0
    9a24:	20000000 	andcs	r0, r0, r0
    9a28:	01000000 	mrseq	r0, (UNDEF: 0)
    9a2c:	000b729c 	muleq	fp, ip, r2
    9a30:	1d521500 	cfldr64ne	mvdx1, [r2, #-0]
    9a34:	9a010000 	bls	49a3c <__Stack_Size+0x4923c>
    9a38:	00005e02 	andeq	r5, r0, r2, lsl #28
    9a3c:	00921f00 	addseq	r1, r2, r0, lsl #30
    9a40:	c1170000 	tstgt	r7, r0
    9a44:	0100001c 	tsteq	r0, ip, lsl r0
    9a48:	004c02a6 	subeq	r0, ip, r6, lsr #5
    9a4c:	00000000 	andeq	r0, r0, r0
    9a50:	00200000 	eoreq	r0, r0, r0
    9a54:	9c010000 	stcls	0, cr0, [r1], {-0}
    9a58:	00000b9d 	muleq	r0, sp, fp
    9a5c:	001d5215 	andseq	r5, sp, r5, lsl r2
    9a60:	02a60100 	adceq	r0, r6, #0, 2
    9a64:	0000005e 	andeq	r0, r0, lr, asr r0
    9a68:	00009240 	andeq	r9, r0, r0, asr #4
    9a6c:	1ace1700 	bne	ff38f674 <BootRAM+0xe2ffe15>
    9a70:	b2010000 	andlt	r0, r1, #0
    9a74:	00008e02 	andeq	r8, r0, r2, lsl #28
    9a78:	00000000 	andeq	r0, r0, r0
    9a7c:	00004400 	andeq	r4, r0, r0, lsl #8
    9a80:	c89c0100 	ldmgt	ip, {r8}
    9a84:	1500000b 	strne	r0, [r0, #-11]
    9a88:	00001d52 	andeq	r1, r0, r2, asr sp
    9a8c:	5e02b201 	cdppl	2, 0, cr11, cr2, cr1, {0}
    9a90:	61000000 	mrsvs	r0, (UNDEF: 0)
    9a94:	00000092 	muleq	r0, r2, r0
    9a98:	00193a14 	andseq	r3, r9, r4, lsl sl
    9a9c:	02c30100 	sbceq	r0, r3, #0, 2
    9aa0:	00000000 	andeq	r0, r0, r0
    9aa4:	0000003a 	andeq	r0, r0, sl, lsr r0
    9aa8:	0bfd9c01 	bleq	fff70ab4 <BootRAM+0xeee1255>
    9aac:	52150000 	andspl	r0, r5, #0
    9ab0:	0100001d 	tsteq	r0, sp, lsl r0
    9ab4:	005e02c3 	subseq	r0, lr, r3, asr #5
    9ab8:	92820000 	addls	r0, r2, #0
    9abc:	a4180000 	ldrge	r0, [r8], #-0
    9ac0:	0100001a 	tsteq	r0, sl, lsl r0
    9ac4:	005e02c3 	subseq	r0, lr, r3, asr #5
    9ac8:	51010000 	mrspl	r0, (UNDEF: 1)
    9acc:	1afc1700 	bne	fff0f6d4 <BootRAM+0xee7fe75>
    9ad0:	d6010000 	strle	r0, [r1], -r0
    9ad4:	00004c02 	andeq	r4, r0, r2, lsl #24
    9ad8:	00000000 	andeq	r0, r0, r0
    9adc:	00000600 	andeq	r0, r0, r0, lsl #12
    9ae0:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    9ae4:	1d00000c 	stcne	0, cr0, [r0, #-48]	; 0xffffffd0
    9ae8:	01006862 	tsteq	r0, r2, ror #16
    9aec:	005e02d6 	ldrsbeq	r0, [lr], #-38	; 0xffffffda
    9af0:	92bc0000 	adcsls	r0, ip, #0
    9af4:	621e0000 	andsvs	r0, lr, #0
    9af8:	d601006c 	strle	r0, [r1], -ip, rrx
    9afc:	00005e02 	andeq	r5, r0, r2, lsl #28
    9b00:	16510100 	ldrbne	r0, [r1], -r0, lsl #2
    9b04:	00001a74 	andeq	r1, r0, r4, ror sl
    9b08:	4c02d801 	stcmi	8, cr13, [r2], {1}
    9b0c:	dd000000 	stcle	0, cr0, [r0, #-0]
    9b10:	00000092 	muleq	r0, r2, r0
    9b14:	0019d71f 	andseq	sp, r9, pc, lsl r7
    9b18:	02e30100 	rsceq	r0, r3, #0, 2
    9b1c:	0000004c 	andeq	r0, r0, ip, asr #32
    9b20:	00000000 	andeq	r0, r0, r0
    9b24:	0000000a 	andeq	r0, r0, sl
    9b28:	e7159c01 	ldr	r9, [r5, -r1, lsl #24]
    9b2c:	0100001a 	tsteq	r0, sl, lsl r0
    9b30:	004c02e3 	subeq	r0, ip, r3, ror #5
    9b34:	93160000 	tstls	r6, #0
    9b38:	8d160000 	ldchi	0, cr0, [r6, #-0]
    9b3c:	0100001c 	tsteq	r0, ip, lsl r0
    9b40:	005e02e5 	subseq	r0, lr, r5, ror #5
    9b44:	93370000 	teqls	r7, #0
    9b48:	74160000 	ldrvc	r0, [r6], #-0
    9b4c:	0100001a 	tsteq	r0, sl, lsl r0
    9b50:	004c02e6 	subeq	r0, ip, r6, ror #5
    9b54:	934a0000 	movtls	r0, #40960	; 0xa000
    9b58:	00000000 	andeq	r0, r0, r0
    9b5c:	000001d8 	ldrdeq	r0, [r0], -r8
    9b60:	22ee0004 	rsccs	r0, lr, #4
    9b64:	01040000 	mrseq	r0, (UNDEF: 4)
    9b68:	00001b0f 	andeq	r1, r0, pc, lsl #22
    9b6c:	001db601 	andseq	fp, sp, r1, lsl #12
    9b70:	00089300 	andeq	r9, r8, r0, lsl #6
    9b74:	00102800 	andseq	r2, r0, r0, lsl #16
    9b78:	00000000 	andeq	r0, r0, r0
    9b7c:	00373000 	eorseq	r3, r7, r0
    9b80:	05040200 	streq	r0, [r4, #-512]	; 0x200
    9b84:	000004da 	ldrdeq	r0, [r0], -sl
    9b88:	5e050202 	cdppl	2, 0, cr0, cr5, cr2, {0}
    9b8c:	02000006 	andeq	r0, r0, #6
    9b90:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    9b94:	75030000 	strvc	r0, [r3, #-0]
    9b98:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    9b9c:	00004524 	andeq	r4, r0, r4, lsr #10
    9ba0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9ba4:	00000252 	andeq	r0, r0, r2, asr r2
    9ba8:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    9bac:	57250200 	strpl	r0, [r5, -r0, lsl #4]!
    9bb0:	02000000 	andeq	r0, r0, #0
    9bb4:	09490702 	stmdbeq	r9, {r1, r8, r9, sl}^
    9bb8:	75030000 	strvc	r0, [r3, #-0]
    9bbc:	26020038 			; <UNDEFINED> instruction: 0x26020038
    9bc0:	00000068 	andeq	r0, r0, r8, rrx
    9bc4:	18080102 	stmdane	r8, {r1, r8}
    9bc8:	04000008 	streq	r0, [r0], #-8
    9bcc:	006f0405 	rsbeq	r0, pc, r5, lsl #8
    9bd0:	34060000 	strcc	r0, [r6], #-0
    9bd4:	01000008 	tsteq	r0, r8
    9bd8:	005f1829 	subseq	r1, pc, r9, lsr #16
    9bdc:	00015408 	andeq	r5, r1, r8, lsl #8
    9be0:	2a9c0100 	bcs	fe709fe8 <BootRAM+0xd67a789>
    9be4:	07000001 	streq	r0, [r0, -r1]
    9be8:	00001daf 	andeq	r1, r0, pc, lsr #27
    9bec:	003a2b01 	eorseq	r2, sl, r1, lsl #22
    9bf0:	93690000 	cmnls	r9, #0
    9bf4:	54080000 	strpl	r0, [r8], #-0
    9bf8:	1208005f 	andne	r0, r8, #95	; 0x5f
    9bfc:	b7000000 	strlt	r0, [r0, -r0]
    9c00:	07000000 	streq	r0, [r0, -r0]
    9c04:	0000075e 	andeq	r0, r0, lr, asr r7
    9c08:	004c3c01 	subeq	r3, ip, r1, lsl #24
    9c0c:	93d90000 	bicsls	r0, r9, #0
    9c10:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9c14:	08005f66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}
    9c18:	00000012 	andeq	r0, r0, r2, lsl r0
    9c1c:	000000d4 	ldrdeq	r0, [r0], -r4
    9c20:	00075e07 	andeq	r5, r7, r7, lsl #28
    9c24:	4c3d0100 	ldfmis	f0, [sp], #-0
    9c28:	1d000000 	stcne	0, cr0, [r0, #-0]
    9c2c:	00000094 	muleq	r0, r4, r0
    9c30:	005fba08 	subseq	fp, pc, r8, lsl #20
    9c34:	00002208 	andeq	r2, r0, r8, lsl #4
    9c38:	0000f100 	andeq	pc, r0, r0, lsl #2
    9c3c:	075e0700 	ldrbeq	r0, [lr, -r0, lsl #14]
    9c40:	72010000 	andvc	r0, r1, #0
    9c44:	0000004c 	andeq	r0, r0, ip, asr #32
    9c48:	00009497 	muleq	r0, r7, r4
    9c4c:	5fdc0800 	svcpl	0x00dc0800
    9c50:	00200800 	eoreq	r0, r0, r0, lsl #16
    9c54:	010e0000 	mrseq	r0, (UNDEF: 14)
    9c58:	5e070000 	cdppl	0, 0, cr0, cr7, cr0, {0}
    9c5c:	01000007 	tsteq	r0, r7
    9c60:	00004c73 	andeq	r4, r0, r3, ror ip
    9c64:	0094b800 	addseq	fp, r4, r0, lsl #16
    9c68:	92090000 	andls	r0, r9, #0
    9c6c:	ba08005f 	blt	209df0 <__Stack_Size+0x2095f0>
    9c70:	09000001 	stmdbeq	r0, {r0}
    9c74:	08005fa6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, fp, ip, lr}
    9c78:	000001c5 	andeq	r0, r0, r5, asr #3
    9c7c:	005fba09 	subseq	fp, pc, r9, lsl #20
    9c80:	0001d008 	andeq	sp, r1, r8
    9c84:	83060000 	movwhi	r0, #24576	; 0x6000
    9c88:	0100001d 	tsteq	r0, sp, lsl r0
    9c8c:	0000009e 	muleq	r0, lr, r0
    9c90:	00007000 	andeq	r7, r0, r0
    9c94:	4f9c0100 	svcmi	0x009c0100
    9c98:	07000001 	streq	r0, [r0, -r1]
    9c9c:	00001daf 	andeq	r1, r0, pc, lsr #27
    9ca0:	003aa001 	eorseq	sl, sl, r1
    9ca4:	94cb0000 	strbls	r0, [fp], #0
    9ca8:	0a000000 	beq	9cb0 <__Stack_Size+0x94b0>
    9cac:	00000802 	andeq	r0, r0, r2, lsl #16
    9cb0:	5b022a03 	blpl	944c4 <__Stack_Size+0x93cc4>
    9cb4:	0b000001 	bleq	9cc0 <__Stack_Size+0x94c0>
    9cb8:	0000004c 	andeq	r0, r0, ip, asr #32
    9cbc:	001d990c 	andseq	r9, sp, ip, lsl #18
    9cc0:	4c170100 	ldfmis	f0, [r7], {-0}
    9cc4:	05000000 	streq	r0, [r0, #-0]
    9cc8:	00056203 	andeq	r6, r5, r3, lsl #4
    9ccc:	1da40c20 	stcne	12, cr0, [r4, #128]!	; 0x80
    9cd0:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    9cd4:	0000004c 	andeq	r0, r0, ip, asr #32
    9cd8:	05640305 	strbeq	r0, [r4, #-773]!	; 0x305
    9cdc:	e10d2000 	mrs	r2, (UNDEF: 13)
    9ce0:	0400001d 	streq	r0, [r0], #-29
    9ce4:	00005e1d 	andeq	r5, r0, sp, lsl lr
    9ce8:	00700e00 	rsbseq	r0, r0, r0, lsl #28
    9cec:	019d0000 	orrseq	r0, sp, r0
    9cf0:	9d0f0000 	stcls	0, cr0, [pc, #-0]	; 9cf8 <__Stack_Size+0x94f8>
    9cf4:	06000001 	streq	r0, [r0], -r1
    9cf8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9cfc:	0000078b 	andeq	r0, r0, fp, lsl #15
    9d00:	0009b30d 	andeq	fp, r9, sp, lsl #6
    9d04:	8d1b0100 	ldfhis	f0, [fp, #-0]
    9d08:	0d000001 	stceq	0, cr0, [r0, #-4]
    9d0c:	00000965 	andeq	r0, r0, r5, ror #18
    9d10:	018d1c01 	orreq	r1, sp, r1, lsl #24
    9d14:	c8100000 	ldmdagt	r0, {}	; <UNPREDICTABLE>
    9d18:	0500001d 	streq	r0, [r0, #-29]
    9d1c:	00005edc 	ldrdeq	r5, [r0], -ip
    9d20:	1d8a1000 	stcne	0, cr1, [sl]
    9d24:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
    9d28:	0000005e 	andeq	r0, r0, lr, asr r0
    9d2c:	001dd410 	andseq	sp, sp, r0, lsl r4
    9d30:	5edb0500 	cdppl	5, 13, cr0, cr11, cr0, {0}
    9d34:	00000000 	andeq	r0, r0, r0
    9d38:	000003f9 	strdeq	r0, [r0], -r9
    9d3c:	23c80004 	biccs	r0, r8, #4
    9d40:	01040000 	mrseq	r0, (UNDEF: 4)
    9d44:	00001b0f 	andeq	r1, r0, pc, lsl #22
    9d48:	001df301 	andseq	pc, sp, r1, lsl #6
    9d4c:	00089300 	andeq	r9, r8, r0, lsl #6
    9d50:	00104000 	andseq	r4, r0, r0
    9d54:	00000000 	andeq	r0, r0, r0
    9d58:	0037e800 	eorseq	lr, r7, r0, lsl #16
    9d5c:	05040200 	streq	r0, [r4, #-512]	; 0x200
    9d60:	000004da 	ldrdeq	r0, [r0], -sl
    9d64:	5e050202 	cdppl	2, 0, cr0, cr5, cr2, {0}
    9d68:	02000006 	andeq	r0, r0, #6
    9d6c:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    9d70:	04020000 	streq	r0, [r2], #-0
    9d74:	00025207 	andeq	r5, r2, r7, lsl #4
    9d78:	31750300 	cmncc	r5, r0, lsl #6
    9d7c:	25020036 	strcs	r0, [r2, #-54]	; 0x36
    9d80:	0000004c 	andeq	r0, r0, ip, asr #32
    9d84:	49070202 	stmdbmi	r7, {r1, r9}
    9d88:	03000009 	movweq	r0, #9
    9d8c:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    9d90:	00005d26 	andeq	r5, r0, r6, lsr #26
    9d94:	08010200 	stmdaeq	r1, {r9}
    9d98:	00000818 	andeq	r0, r0, r8, lsl r8
    9d9c:	00530404 	subseq	r0, r3, r4, lsl #8
    9da0:	c0050000 	andgt	r0, r5, r0
    9da4:	01000007 	tsteq	r0, r7
    9da8:	008f2d03 	addeq	r2, pc, r3, lsl #26
    9dac:	86060000 	strhi	r0, [r6], -r0
    9db0:	00000002 	andeq	r0, r0, r2
    9db4:	0009a906 	andeq	sl, r9, r6, lsl #18
    9db8:	30060100 	andcc	r0, r6, r0, lsl #2
    9dbc:	02000001 	andeq	r0, r0, #1
    9dc0:	00062b06 	andeq	r2, r6, r6, lsl #22
    9dc4:	07000300 	streq	r0, [r0, -r0, lsl #6]
    9dc8:	000007c1 	andeq	r0, r0, r1, asr #15
    9dcc:	006a3403 	rsbeq	r3, sl, r3, lsl #8
    9dd0:	ff080000 			; <UNDEFINED> instruction: 0xff080000
    9dd4:	0c000005 	stceq	0, cr0, [r0], {5}
    9dd8:	00d73803 	sbcseq	r3, r7, r3, lsl #16
    9ddc:	d7090000 	strle	r0, [r9, -r0]
    9de0:	03000001 	movweq	r0, #1
    9de4:	00004150 	andeq	r4, r0, r0, asr r1
    9de8:	6d090000 	stcvs	0, cr0, [r9, #-0]
    9dec:	03000008 	movweq	r0, #8
    9df0:	00004151 	andeq	r4, r0, r1, asr r1
    9df4:	bf090200 	svclt	0x00090200
    9df8:	0300001f 	movweq	r0, #31
    9dfc:	00004152 	andeq	r4, r0, r2, asr r1
    9e00:	9a090400 	bls	24ae08 <__Stack_Size+0x24a608>
    9e04:	03000006 	movweq	r0, #6
    9e08:	0000e653 	andeq	lr, r0, r3, asr r6
    9e0c:	0a000800 	beq	be14 <__Stack_Size+0xb614>
    9e10:	00000064 	andeq	r0, r0, r4, rrx
    9e14:	000000e6 	andeq	r0, r0, r6, ror #1
    9e18:	0000410b 	andeq	r4, r0, fp, lsl #2
    9e1c:	04040000 	streq	r0, [r4], #-0
    9e20:	000000d7 	ldrdeq	r0, [r0], -r7
    9e24:	00060007 	andeq	r0, r6, r7
    9e28:	9a540300 	bls	150aa30 <__Stack_Size+0x150a230>
    9e2c:	0c000000 	stceq	0, cr0, [r0], {-0}
    9e30:	02005742 	andeq	r5, r0, #17301504	; 0x1080000
    9e34:	011b6203 	tsteq	fp, r3, lsl #4
    9e38:	620d0000 	andvs	r0, sp, #0
    9e3c:	03003062 	movweq	r3, #98	; 0x62
    9e40:	00005365 	andeq	r5, r0, r5, ror #6
    9e44:	620d0000 	andvs	r0, sp, #0
    9e48:	03003162 	movweq	r3, #354	; 0x162
    9e4c:	00005366 	andeq	r5, r0, r6, ror #6
    9e50:	0e000100 	adfeqs	f0, f0, f0
    9e54:	375f0302 	ldrbcc	r0, [pc, -r2, lsl #6]
    9e58:	0f000001 	svceq	0x00000001
    9e5c:	61030077 	tstvs	r3, r7, ror r0
    9e60:	00000041 	andeq	r0, r0, r1, asr #32
    9e64:	0077620f 	rsbseq	r6, r7, pc, lsl #4
    9e68:	00f76803 	rscseq	r6, r7, r3, lsl #16
    9e6c:	07000000 	streq	r0, [r0, -r0]
    9e70:	00000930 	andeq	r0, r0, r0, lsr r9
    9e74:	011b6903 	tsteq	fp, r3, lsl #18
    9e78:	14080000 	strne	r0, [r8], #-0
    9e7c:	1c000001 	stcne	0, cr0, [r0], {1}
    9e80:	01d36b03 	bicseq	r6, r3, r3, lsl #22
    9e84:	67090000 	strvs	r0, [r9, -r0]
    9e88:	03000007 	movweq	r0, #7
    9e8c:	0000536d 	andeq	r5, r0, sp, ror #6
    9e90:	15090000 	strne	r0, [r9, #-0]
    9e94:	03000000 	movweq	r0, #0
    9e98:	0000536e 	andeq	r5, r0, lr, ror #6
    9e9c:	11090100 	mrsne	r0, (UNDEF: 25)
    9ea0:	03000003 	movweq	r0, #3
    9ea4:	0001376f 	andeq	r3, r1, pc, ror #14
    9ea8:	48090200 	stmdami	r9, {r9}
    9eac:	03000001 	movweq	r0, #1
    9eb0:	00013770 	andeq	r3, r1, r0, ror r7
    9eb4:	eb090400 	bl	24aebc <__Stack_Size+0x24a6bc>
    9eb8:	03000004 	movweq	r0, #4
    9ebc:	00013771 	andeq	r3, r1, r1, ror r7
    9ec0:	51090600 	tstpl	r9, r0, lsl #12
    9ec4:	03000006 	movweq	r0, #6
    9ec8:	00005373 	andeq	r5, r0, r3, ror r3
    9ecc:	08090800 	stmdaeq	r9, {fp}
    9ed0:	03000008 	movweq	r0, #8
    9ed4:	00005374 	andeq	r5, r0, r4, ror r3
    9ed8:	07090900 	streq	r0, [r9, -r0, lsl #18]
    9edc:	03000005 	movweq	r0, #5
    9ee0:	00005375 	andeq	r5, r0, r5, ror r3
    9ee4:	4f090a00 	svcmi	0x00090a00
    9ee8:	03000005 	movweq	r0, #5
    9eec:	00005376 	andeq	r5, r0, r6, ror r3
    9ef0:	d6090b00 	strle	r0, [r9], -r0, lsl #22
    9ef4:	03000005 	movweq	r0, #5
    9ef8:	00005377 	andeq	r5, r0, r7, ror r3
    9efc:	c8090c00 	stmdagt	r9, {sl, fp}
    9f00:	03000007 	movweq	r0, #7
    9f04:	0000ec7a 	andeq	lr, r0, sl, ror ip
    9f08:	07001000 	streq	r1, [r0, -r0]
    9f0c:	00000115 	andeq	r0, r0, r5, lsl r1
    9f10:	01427b03 	cmpeq	r2, r3, lsl #22
    9f14:	a9080000 	stmdbge	r8, {}	; <UNPREDICTABLE>
    9f18:	34000003 	strcc	r0, [r0], #-3
    9f1c:	02877d03 	addeq	r7, r7, #3, 26	; 0xc0
    9f20:	96090000 	strls	r0, [r9], -r0
    9f24:	03000002 	movweq	r0, #2
    9f28:	0002887f 	andeq	r8, r2, pc, ror r8
    9f2c:	b8090000 	stmdalt	r9, {}	; <UNPREDICTABLE>
    9f30:	03000004 	movweq	r0, #4
    9f34:	00028880 	andeq	r8, r2, r0, lsl #17
    9f38:	37090400 	strcc	r0, [r9, -r0, lsl #8]
    9f3c:	03000009 	movweq	r0, #9
    9f40:	00028883 	andeq	r8, r2, r3, lsl #17
    9f44:	78090800 	stmdavc	r9, {fp}
    9f48:	03000007 	movweq	r0, #7
    9f4c:	00028884 	andeq	r8, r2, r4, lsl #17
    9f50:	c3090c00 	movwgt	r0, #39936	; 0x9c00
    9f54:	03000002 	movweq	r0, #2
    9f58:	00029d96 	muleq	r2, r6, sp
    9f5c:	6d091000 	stcvs	0, cr1, [r9, #-0]
    9f60:	03000000 	movweq	r0, #0
    9f64:	00029da1 	andeq	r9, r2, r1, lsr #27
    9f68:	c5091400 	strgt	r1, [r9, #-1024]	; 0x400
    9f6c:	03000009 	movweq	r0, #9
    9f70:	0002b7ab 	andeq	fp, r2, fp, lsr #15
    9f74:	d7091800 	strle	r1, [r9, -r0, lsl #16]
    9f78:	03000002 	movweq	r0, #2
    9f7c:	0000e6ad 	andeq	lr, r0, sp, lsr #13
    9f80:	b9091c00 	stmdblt	r9, {sl, fp, ip}
    9f84:	03000003 	movweq	r0, #3
    9f88:	0000e6ae 	andeq	lr, r0, lr, lsr #13
    9f8c:	c3092000 	movwgt	r2, #36864	; 0x9000
    9f90:	03000001 	movweq	r0, #1
    9f94:	0000e6af 	andeq	lr, r0, pc, lsr #13
    9f98:	42092400 	andmi	r2, r9, #0, 8
    9f9c:	03000003 	movweq	r0, #3
    9fa0:	0000e6b0 			; <UNDEFINED> instruction: 0x0000e6b0
    9fa4:	67092800 	strvs	r2, [r9, -r0, lsl #16]
    9fa8:	03000004 	movweq	r0, #4
    9fac:	000064b2 			; <UNDEFINED> instruction: 0x000064b2
    9fb0:	bc092c00 	stclt	12, cr2, [r9], {-0}
    9fb4:	0300001f 	movweq	r0, #31
    9fb8:	000053b3 			; <UNDEFINED> instruction: 0x000053b3
    9fbc:	10003000 	andne	r3, r0, r0
    9fc0:	02870404 	addeq	r0, r7, #4, 8	; 0x4000000
    9fc4:	8f0a0000 	svchi	0x000a0000
    9fc8:	9d000000 	stcls	0, cr0, [r0, #-0]
    9fcc:	0b000002 	bleq	9fdc <__Stack_Size+0x97dc>
    9fd0:	00000053 	andeq	r0, r0, r3, asr r0
    9fd4:	8e040400 	cfcpyshi	mvf0, mvf4
    9fd8:	0a000002 	beq	9fe8 <__Stack_Size+0x97e8>
    9fdc:	0000008f 	andeq	r0, r0, pc, lsl #1
    9fe0:	000002b7 			; <UNDEFINED> instruction: 0x000002b7
    9fe4:	0000530b 	andeq	r5, r0, fp, lsl #6
    9fe8:	00530b00 	subseq	r0, r3, r0, lsl #22
    9fec:	04000000 	streq	r0, [r0], #-0
    9ff0:	0002a304 	andeq	sl, r2, r4, lsl #6
    9ff4:	03aa0700 			; <UNDEFINED> instruction: 0x03aa0700
    9ff8:	b5030000 	strlt	r0, [r3, #-0]
    9ffc:	000001de 	ldrdeq	r0, [r0], -lr
    a000:	00008a08 	andeq	r8, r0, r8, lsl #20
    a004:	b7032400 	strlt	r2, [r3, -r0, lsl #8]
    a008:	00000341 	andeq	r0, r0, r1, asr #6
    a00c:	0005a009 	andeq	sl, r5, r9
    a010:	88b90300 	ldmhi	r9!, {r8, r9}
    a014:	00000002 	andeq	r0, r0, r2
    a018:	00041d09 	andeq	r1, r4, r9, lsl #26
    a01c:	88ba0300 	ldmhi	sl!, {r8, r9}
    a020:	04000002 	streq	r0, [r0], #-2
    a024:	00029b09 	andeq	r9, r2, r9, lsl #22
    a028:	88bb0300 	ldmhi	fp!, {r8, r9}
    a02c:	08000002 	stmdaeq	r0, {r1}
    a030:	00043309 	andeq	r3, r4, r9, lsl #6
    a034:	88bc0300 	ldmhi	ip!, {r8, r9}
    a038:	0c000002 	stceq	0, cr0, [r0], {2}
    a03c:	0000a209 	andeq	sl, r0, r9, lsl #4
    a040:	88bd0300 	pophi	{r8, r9}
    a044:	10000002 	andne	r0, r0, r2
    a048:	0006a309 	andeq	sl, r6, r9, lsl #6
    a04c:	88be0300 	ldmhi	lr!, {r8, r9}
    a050:	14000002 	strne	r0, [r0], #-2
    a054:	0008f809 	andeq	pc, r8, r9, lsl #16
    a058:	88bf0300 	ldmhi	pc!, {r8, r9}	; <UNPREDICTABLE>
    a05c:	18000002 	stmdane	r0, {r1}
    a060:	00019109 	andeq	r9, r1, r9, lsl #2
    a064:	88c00300 	stmiahi	r0, {r8, r9}^
    a068:	1c000002 	stcne	0, cr0, [r0], {2}
    a06c:	0002ad09 	andeq	sl, r2, r9, lsl #26
    a070:	88c10300 	stmiahi	r1, {r8, r9}^
    a074:	20000002 	andcs	r0, r0, r2
    a078:	008b0700 	addeq	r0, fp, r0, lsl #14
    a07c:	c3030000 	movwgt	r0, #12288	; 0x3000
    a080:	000002c8 	andeq	r0, r0, r8, asr #5
    a084:	00029211 	andeq	r9, r2, r1, lsl r2
    a088:	6c350100 	ldfvss	f0, [r5], #-0
    a08c:	38080060 	stmdacc	r8, {r5, r6}
    a090:	01000000 	mrseq	r0, (UNDEF: 0)
    a094:	02eb129c 	rsceq	r1, fp, #156, 4	; 0xc0000009
    a098:	ec030000 	stc	0, cr0, [r3], {-0}
    a09c:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
    a0a0:	001e0712 	andseq	r0, lr, r2, lsl r7
    a0a4:	41ed0300 	mvnmi	r0, r0, lsl #6
    a0a8:	13000003 	movwne	r0, #3
    a0ac:	00001e1e 	andeq	r1, r0, lr, lsl lr
    a0b0:	01d32701 	bicseq	r2, r3, r1, lsl #14
    a0b4:	03050000 	movweq	r0, #20480	; 0x5000
    a0b8:	20000574 	andcs	r0, r0, r4, ror r5
    a0bc:	001de113 	andseq	lr, sp, r3, lsl r1
    a0c0:	53180100 	tstpl	r8, #0, 2
    a0c4:	05000000 	streq	r0, [r0, #-0]
    a0c8:	00057003 	andeq	r7, r5, r3
    a0cc:	01e81320 	mvneq	r1, r0, lsr #6
    a0d0:	1d010000 	stcne	0, cr0, [r1, #-0]
    a0d4:	000003a6 	andeq	r0, r0, r6, lsr #7
    a0d8:	05940305 	ldreq	r0, [r4, #773]	; 0x305
    a0dc:	04042000 	streq	r2, [r4], #-0
    a0e0:	000001d3 	ldrdeq	r0, [r0], -r3
    a0e4:	00013e13 	andeq	r3, r1, r3, lsl lr
    a0e8:	bd200100 	stflts	f0, [r0, #-0]
    a0ec:	05000003 	streq	r0, [r0, #-3]
    a0f0:	00056c03 	andeq	r6, r5, r3, lsl #24
    a0f4:	bd040420 	cfstrslt	mvf0, [r4, #-128]	; 0xffffff80
    a0f8:	13000002 	movwne	r0, #2
    a0fc:	00001e06 	andeq	r1, r0, r6, lsl #28
    a100:	03d42801 	bicseq	r2, r4, #65536	; 0x10000
    a104:	03050000 	movweq	r0, #20480	; 0x5000
    a108:	20000590 	mulcs	r0, r0, r5
    a10c:	03410404 	movteq	r0, #5124	; 0x1404
    a110:	e9130000 	ldmdb	r3, {}	; <UNPREDICTABLE>
    a114:	0100001d 	tsteq	r0, sp, lsl r0
    a118:	00004125 	andeq	r4, r0, r5, lsr #2
    a11c:	68030500 	stmdavs	r3, {r8, sl}
    a120:	13200005 	teqne	r0, #5
    a124:	0000051d 	andeq	r0, r0, sp, lsl r5
    a128:	00412601 	subeq	r2, r1, r1, lsl #12
    a12c:	03050000 	movweq	r0, #20480	; 0x5000
    a130:	20000598 	mulcs	r0, r8, r5
    a134:	000de000 	andeq	lr, sp, r0
    a138:	cb000400 	blgt	b140 <__Stack_Size+0xa940>
    a13c:	04000024 	streq	r0, [r0], #-36	; 0x24
    a140:	001b0f01 	andseq	r0, fp, r1, lsl #30
    a144:	1e2a0100 	sufnee	f0, f2, f0
    a148:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    a14c:	10880000 	addne	r0, r8, r0
    a150:	00000000 	andeq	r0, r0, r0
    a154:	384f0000 	stmdacc	pc, {}^	; <UNPREDICTABLE>
    a158:	04020000 	streq	r0, [r2], #-0
    a15c:	0004da05 	andeq	sp, r4, r5, lsl #20
    a160:	05020200 	streq	r0, [r2, #-512]	; 0x200
    a164:	0000065e 	andeq	r0, r0, lr, asr r6
    a168:	1a060102 	bne	18a578 <__Stack_Size+0x189d78>
    a16c:	03000008 	movweq	r0, #8
    a170:	00323375 	eorseq	r3, r2, r5, ror r3
    a174:	00452402 	subeq	r2, r5, r2, lsl #8
    a178:	04020000 	streq	r0, [r2], #-0
    a17c:	00025207 	andeq	r5, r2, r7, lsl #4
    a180:	31750300 	cmncc	r5, r0, lsl #6
    a184:	25020036 	strcs	r0, [r2, #-54]	; 0x36
    a188:	00000057 	andeq	r0, r0, r7, asr r0
    a18c:	49070202 	stmdbmi	r7, {r1, r9}
    a190:	03000009 	movweq	r0, #9
    a194:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    a198:	00006826 	andeq	r6, r0, r6, lsr #16
    a19c:	08010200 	stmdaeq	r1, {r9}
    a1a0:	00000818 	andeq	r0, r0, r8, lsl r8
    a1a4:	00035a04 	andeq	r5, r3, r4, lsl #20
    a1a8:	7a2c0200 	bvc	b0a9b0 <__Stack_Size+0xb0a1b0>
    a1ac:	05000000 	streq	r0, [r0, #-0]
    a1b0:	00000045 	andeq	r0, r0, r5, asr #32
    a1b4:	36020106 	strcc	r0, [r2], -r6, lsl #2
    a1b8:	00000094 	muleq	r0, r4, r0
    a1bc:	0006b507 	andeq	fp, r6, r7, lsl #10
    a1c0:	a7070000 	strge	r0, [r7, -r0]
    a1c4:	01000001 	tsteq	r0, r1
    a1c8:	052d0400 	streq	r0, [sp, #-1024]!	; 0x400
    a1cc:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    a1d0:	0000007f 	andeq	r0, r0, pc, ror r0
    a1d4:	00023d08 	andeq	r3, r2, r8, lsl #26
    a1d8:	16030100 	strne	r0, [r3], -r0, lsl #2
    a1dc:	000000c4 	andeq	r0, r0, r4, asr #1
    a1e0:	00053207 	andeq	r3, r5, r7, lsl #4
    a1e4:	86070000 	strhi	r0, [r7], -r0
    a1e8:	01000006 	tsteq	r0, r6
    a1ec:	00017e07 	andeq	r7, r1, r7, lsl #28
    a1f0:	20070200 	andcs	r0, r7, r0, lsl #4
    a1f4:	03000009 	movweq	r0, #9
    a1f8:	008f0800 	addeq	r0, pc, r0, lsl #16
    a1fc:	03010000 	movweq	r0, #4096	; 0x1000
    a200:	0001251f 	andeq	r2, r1, pc, lsl r5
    a204:	1f9c0700 	svcne	0x009c0700
    a208:	07000000 	streq	r0, [r0, -r0]
    a20c:	000021cb 	andeq	r2, r0, fp, asr #3
    a210:	0f340701 	svceq	0x00340701
    a214:	07020000 	streq	r0, [r2, -r0]
    a218:	00001fa7 	andeq	r1, r0, r7, lsr #31
    a21c:	0f3e0703 	svceq	0x003e0703
    a220:	07040000 	streq	r0, [r4, -r0]
    a224:	0000215a 	andeq	r2, r0, sl, asr r1
    a228:	218a0705 	orrcs	r0, sl, r5, lsl #14
    a22c:	07060000 	streq	r0, [r6, -r0]
    a230:	00002011 	andeq	r2, r0, r1, lsl r0
    a234:	20700707 	rsbscs	r0, r0, r7, lsl #14
    a238:	07080000 	streq	r0, [r8, -r0]
    a23c:	000020c1 	andeq	r2, r0, r1, asr #1
    a240:	1f720709 	svcne	0x00720709
    a244:	070a0000 	streq	r0, [sl, -r0]
    a248:	00002020 	andeq	r2, r0, r0, lsr #32
    a24c:	20e3070b 	rsccs	r0, r3, fp, lsl #14
    a250:	070c0000 	streq	r0, [ip, -r0]
    a254:	00001fef 	andeq	r1, r0, pc, ror #31
    a258:	9108000c 	tstls	r8, ip
    a25c:	01000020 	tsteq	r0, r0, lsr #32
    a260:	01503203 	cmpeq	r0, r3, lsl #4
    a264:	dc070000 	stcle	0, cr0, [r7], {-0}
    a268:	0100001e 	tsteq	r0, lr, lsl r0
    a26c:	00213b07 	eoreq	r3, r1, r7, lsl #22
    a270:	ee070200 	cdp	2, 0, cr0, cr7, cr0, {0}
    a274:	0300001e 	movweq	r0, #30
    a278:	0020f207 	eoreq	pc, r0, r7, lsl #4
    a27c:	27070400 	strcs	r0, [r7, -r0, lsl #8]
    a280:	05000021 	streq	r0, [r0, #-33]	; 0x21
    a284:	202e0800 	eorcs	r0, lr, r0, lsl #16
    a288:	03010000 	movweq	r0, #4096	; 0x1000
    a28c:	0001693c 	andeq	r6, r1, ip, lsr r9
    a290:	1e3d0700 	cdpne	7, 3, cr0, cr13, cr0, {0}
    a294:	07000000 	streq	r0, [r0, -r0]
    a298:	00001e9b 	muleq	r0, fp, lr
    a29c:	82080001 	andhi	r0, r8, #1
    a2a0:	01000020 	tsteq	r0, r0, lsr #32
    a2a4:	01b21604 			; <UNDEFINED> instruction: 0x01b21604
    a2a8:	a6070000 	strge	r0, [r7], -r0
    a2ac:	00000021 	andeq	r0, r0, r1, lsr #32
    a2b0:	0020a207 	eoreq	sl, r0, r7, lsl #4
    a2b4:	26070100 	strcs	r0, [r7], -r0, lsl #2
    a2b8:	0200001f 	andeq	r0, r0, #31
    a2bc:	0021de07 	eoreq	sp, r1, r7, lsl #28
    a2c0:	21070300 	mrscs	r0, SP_und
    a2c4:	0400001f 	streq	r0, [r0], #-31
    a2c8:	0021d907 	eoreq	sp, r1, r7, lsl #18
    a2cc:	bc070500 	cfstr32lt	mvfx0, [r7], {-0}
    a2d0:	06000021 	streq	r0, [r0], -r1, lsr #32
    a2d4:	0020d307 	eoreq	sp, r0, r7, lsl #6
    a2d8:	b0070700 	andlt	r0, r7, r0, lsl #14
    a2dc:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    a2e0:	001f6207 	andseq	r6, pc, r7, lsl #4
    a2e4:	09000900 	stmdbeq	r0, {r8, fp}
    a2e8:	00000033 	andeq	r0, r0, r3, lsr r0
    a2ec:	d7240408 	strle	r0, [r4, -r8, lsl #8]!
    a2f0:	0a000001 	beq	a2fc <__Stack_Size+0x9afc>
    a2f4:	000002e0 	andeq	r0, r0, r0, ror #5
    a2f8:	01d72604 	bicseq	r2, r7, r4, lsl #12
    a2fc:	0a000000 	beq	a304 <__Stack_Size+0x9b04>
    a300:	000003f1 	strdeq	r0, [r0], -r1
    a304:	004c2704 	subeq	r2, ip, r4, lsl #14
    a308:	00040000 	andeq	r0, r4, r0
    a30c:	005e040b 	subseq	r0, lr, fp, lsl #8
    a310:	72040000 	andvc	r0, r4, #0
    a314:	04000005 	streq	r0, [r0], #-5
    a318:	0001b229 	andeq	fp, r1, r9, lsr #4
    a31c:	07c00800 	strbeq	r0, [r0, r0, lsl #16]
    a320:	04010000 	streq	r0, [r1], #-0
    a324:	00020d2d 	andeq	r0, r2, sp, lsr #26
    a328:	02860700 	addeq	r0, r6, #0, 14
    a32c:	07000000 	streq	r0, [r0, -r0]
    a330:	000009a9 	andeq	r0, r0, r9, lsr #19
    a334:	01300701 	teqeq	r0, r1, lsl #14
    a338:	07020000 	streq	r0, [r2, -r0]
    a33c:	0000062b 	andeq	r0, r0, fp, lsr #12
    a340:	c1040003 	tstgt	r4, r3
    a344:	04000007 	streq	r0, [r0], #-7
    a348:	0001e834 	andeq	lr, r1, r4, lsr r8
    a34c:	05ff0900 	ldrbeq	r0, [pc, #2304]!	; ac54 <__Stack_Size+0xa454>
    a350:	040c0000 	streq	r0, [ip], #-0
    a354:	00025538 	andeq	r5, r2, r8, lsr r5
    a358:	01d70a00 	bicseq	r0, r7, r0, lsl #20
    a35c:	50040000 	andpl	r0, r4, r0
    a360:	0000004c 	andeq	r0, r0, ip, asr #32
    a364:	086d0a00 	stmdaeq	sp!, {r9, fp}^
    a368:	51040000 	mrspl	r0, (UNDEF: 4)
    a36c:	0000004c 	andeq	r0, r0, ip, asr #32
    a370:	1fbf0a02 	svcne	0x00bf0a02
    a374:	52040000 	andpl	r0, r4, #0
    a378:	0000004c 	andeq	r0, r0, ip, asr #32
    a37c:	069a0a04 	ldreq	r0, [sl], r4, lsl #20
    a380:	53040000 	movwpl	r0, #16384	; 0x4000
    a384:	00000264 	andeq	r0, r0, r4, ror #4
    a388:	d70c0008 	strle	r0, [ip, -r8]
    a38c:	64000001 	strvs	r0, [r0], #-1
    a390:	0d000002 	stceq	0, cr0, [r0, #-8]
    a394:	0000004c 	andeq	r0, r0, ip, asr #32
    a398:	55040b00 	strpl	r0, [r4, #-2816]	; 0xb00
    a39c:	04000002 	streq	r0, [r0], #-2
    a3a0:	00000600 	andeq	r0, r0, r0, lsl #12
    a3a4:	02185404 	andseq	r5, r8, #4, 8	; 0x4000000
    a3a8:	23090000 	movwcs	r0, #36864	; 0x9000
    a3ac:	02000006 	andeq	r0, r0, #6
    a3b0:	029a5804 	addseq	r5, sl, #4, 16	; 0x40000
    a3b4:	700a0000 	andvc	r0, sl, r0
    a3b8:	04000003 	streq	r0, [r0], #-3
    a3bc:	00005e5a 	andeq	r5, r0, sl, asr lr
    a3c0:	8c0a0000 	stchi	0, cr0, [sl], {-0}
    a3c4:	04000005 	streq	r0, [r0], #-5
    a3c8:	00005e5b 	andeq	r5, r0, fp, asr lr
    a3cc:	04000100 	streq	r0, [r0], #-256	; 0x100
    a3d0:	00000624 	andeq	r0, r0, r4, lsr #12
    a3d4:	02755d04 	rsbseq	r5, r5, #4, 26	; 0x100
    a3d8:	420e0000 	andmi	r0, lr, #0
    a3dc:	04020057 	streq	r0, [r2], #-87	; 0x57
    a3e0:	0002c962 	andeq	ip, r2, r2, ror #18
    a3e4:	62620f00 	rsbvs	r0, r2, #0, 30
    a3e8:	65040030 	strvs	r0, [r4, #-48]	; 0x30
    a3ec:	0000005e 	andeq	r0, r0, lr, asr r0
    a3f0:	62620f00 	rsbvs	r0, r2, #0, 30
    a3f4:	66040031 			; <UNDEFINED> instruction: 0x66040031
    a3f8:	0000005e 	andeq	r0, r0, lr, asr r0
    a3fc:	02100001 	andseq	r0, r0, #1
    a400:	02e55f04 	rsceq	r5, r5, #4, 30
    a404:	77110000 	ldrvc	r0, [r1, -r0]
    a408:	4c610400 	cfstrdmi	mvd0, [r1], #-0
    a40c:	11000000 	mrsne	r0, (UNDEF: 0)
    a410:	04007762 	streq	r7, [r0], #-1890	; 0x762
    a414:	0002a568 	andeq	sl, r2, r8, ror #10
    a418:	30040000 	andcc	r0, r4, r0
    a41c:	04000009 	streq	r0, [r0], #-9
    a420:	0002c969 	andeq	ip, r2, r9, ror #18
    a424:	01140900 	tsteq	r4, r0, lsl #18
    a428:	041c0000 	ldreq	r0, [ip], #-0
    a42c:	0003816b 	andeq	r8, r3, fp, ror #2
    a430:	07670a00 	strbeq	r0, [r7, -r0, lsl #20]!
    a434:	6d040000 	stcvs	0, cr0, [r4, #-0]
    a438:	0000005e 	andeq	r0, r0, lr, asr r0
    a43c:	00150a00 	andseq	r0, r5, r0, lsl #20
    a440:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
    a444:	0000005e 	andeq	r0, r0, lr, asr r0
    a448:	03110a01 	tsteq	r1, #4096	; 0x1000
    a44c:	6f040000 	svcvs	0x00040000
    a450:	000002e5 	andeq	r0, r0, r5, ror #5
    a454:	01480a02 	cmpeq	r8, r2, lsl #20
    a458:	70040000 	andvc	r0, r4, r0
    a45c:	000002e5 	andeq	r0, r0, r5, ror #5
    a460:	04eb0a04 	strbteq	r0, [fp], #2564	; 0xa04
    a464:	71040000 	mrsvc	r0, (UNDEF: 4)
    a468:	000002e5 	andeq	r0, r0, r5, ror #5
    a46c:	06510a06 	ldrbeq	r0, [r1], -r6, lsl #20
    a470:	73040000 	movwvc	r0, #16384	; 0x4000
    a474:	0000005e 	andeq	r0, r0, lr, asr r0
    a478:	08080a08 	stmdaeq	r8, {r3, r9, fp}
    a47c:	74040000 	strvc	r0, [r4], #-0
    a480:	0000005e 	andeq	r0, r0, lr, asr r0
    a484:	05070a09 	streq	r0, [r7, #-2569]	; 0xa09
    a488:	75040000 	strvc	r0, [r4, #-0]
    a48c:	0000005e 	andeq	r0, r0, lr, asr r0
    a490:	054f0a0a 	strbeq	r0, [pc, #-2570]	; 9a8e <__Stack_Size+0x928e>
    a494:	76040000 	strvc	r0, [r4], -r0
    a498:	0000005e 	andeq	r0, r0, lr, asr r0
    a49c:	05d60a0b 	ldrbeq	r0, [r6, #2571]	; 0xa0b
    a4a0:	77040000 	strvc	r0, [r4, -r0]
    a4a4:	0000005e 	andeq	r0, r0, lr, asr r0
    a4a8:	07c80a0c 	strbeq	r0, [r8, ip, lsl #20]
    a4ac:	7a040000 	bvc	10a4b4 <__Stack_Size+0x109cb4>
    a4b0:	0000026a 	andeq	r0, r0, sl, ror #4
    a4b4:	15040010 	strne	r0, [r4, #-16]
    a4b8:	04000001 	streq	r0, [r0], #-1
    a4bc:	0002f07b 	andeq	pc, r2, fp, ror r0	; <UNPREDICTABLE>
    a4c0:	03a90900 			; <UNDEFINED> instruction: 0x03a90900
    a4c4:	04340000 	ldrteq	r0, [r4], #-0
    a4c8:	0004357d 	andeq	r3, r4, sp, ror r5
    a4cc:	02960a00 	addseq	r0, r6, #0, 20
    a4d0:	7f040000 	svcvc	0x00040000
    a4d4:	00000436 	andeq	r0, r0, r6, lsr r4
    a4d8:	04b80a00 	ldrteq	r0, [r8], #2560	; 0xa00
    a4dc:	80040000 	andhi	r0, r4, r0
    a4e0:	00000436 	andeq	r0, r0, r6, lsr r4
    a4e4:	09370a04 	ldmdbeq	r7!, {r2, r9, fp}
    a4e8:	83040000 	movwhi	r0, #16384	; 0x4000
    a4ec:	00000436 	andeq	r0, r0, r6, lsr r4
    a4f0:	07780a08 	ldrbeq	r0, [r8, -r8, lsl #20]!
    a4f4:	84040000 	strhi	r0, [r4], #-0
    a4f8:	00000436 	andeq	r0, r0, r6, lsr r4
    a4fc:	02c30a0c 	sbceq	r0, r3, #12, 20	; 0xc000
    a500:	96040000 	strls	r0, [r4], -r0
    a504:	0000044b 	andeq	r0, r0, fp, asr #8
    a508:	006d0a10 	rsbeq	r0, sp, r0, lsl sl
    a50c:	a1040000 	mrsge	r0, (UNDEF: 4)
    a510:	0000044b 	andeq	r0, r0, fp, asr #8
    a514:	09c50a14 	stmibeq	r5, {r2, r4, r9, fp}^
    a518:	ab040000 	blge	10a520 <__Stack_Size+0x109d20>
    a51c:	00000465 	andeq	r0, r0, r5, ror #8
    a520:	02d70a18 	sbcseq	r0, r7, #24, 20	; 0x18000
    a524:	ad040000 	stcge	0, cr0, [r4, #-0]
    a528:	00000264 	andeq	r0, r0, r4, ror #4
    a52c:	03b90a1c 			; <UNDEFINED> instruction: 0x03b90a1c
    a530:	ae040000 	cdpge	0, 0, cr0, cr4, cr0, {0}
    a534:	00000264 	andeq	r0, r0, r4, ror #4
    a538:	01c30a20 	biceq	r0, r3, r0, lsr #20
    a53c:	af040000 	svcge	0x00040000
    a540:	00000264 	andeq	r0, r0, r4, ror #4
    a544:	03420a24 	movteq	r0, #10788	; 0x2a24
    a548:	b0040000 	andlt	r0, r4, r0
    a54c:	00000264 	andeq	r0, r0, r4, ror #4
    a550:	04670a28 	strbteq	r0, [r7], #-2600	; 0xa28
    a554:	b2040000 	andlt	r0, r4, #0
    a558:	000001d7 	ldrdeq	r0, [r0], -r7
    a55c:	1fbc0a2c 	svcne	0x00bc0a2c
    a560:	b3040000 	movwlt	r0, #16384	; 0x4000
    a564:	0000005e 	andeq	r0, r0, lr, asr r0
    a568:	0b120030 	bleq	48a630 <__Stack_Size+0x489e30>
    a56c:	00043504 	andeq	r3, r4, r4, lsl #10
    a570:	020d0c00 	andeq	r0, sp, #0, 24
    a574:	044b0000 	strbeq	r0, [fp], #-0
    a578:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    a57c:	00000000 	andeq	r0, r0, r0
    a580:	043c040b 	ldrteq	r0, [ip], #-1035	; 0x40b
    a584:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    a588:	65000002 	strvs	r0, [r0, #-2]
    a58c:	0d000004 	stceq	0, cr0, [r0, #-16]
    a590:	0000005e 	andeq	r0, r0, lr, asr r0
    a594:	00005e0d 	andeq	r5, r0, sp, lsl #28
    a598:	040b0000 	streq	r0, [fp], #-0
    a59c:	00000451 	andeq	r0, r0, r1, asr r4
    a5a0:	0003aa04 	andeq	sl, r3, r4, lsl #20
    a5a4:	8cb50400 	cfldrshi	mvf0, [r5]
    a5a8:	09000003 	stmdbeq	r0, {r0, r1}
    a5ac:	0000008a 	andeq	r0, r0, sl, lsl #1
    a5b0:	efb70424 	svc	0x00b70424
    a5b4:	0a000004 	beq	a5cc <__Stack_Size+0x9dcc>
    a5b8:	000005a0 	andeq	r0, r0, r0, lsr #11
    a5bc:	0436b904 	ldrteq	fp, [r6], #-2308	; 0x904
    a5c0:	0a000000 	beq	a5c8 <__Stack_Size+0x9dc8>
    a5c4:	0000041d 	andeq	r0, r0, sp, lsl r4
    a5c8:	0436ba04 	ldrteq	fp, [r6], #-2564	; 0xa04
    a5cc:	0a040000 	beq	10a5d4 <__Stack_Size+0x109dd4>
    a5d0:	0000029b 	muleq	r0, fp, r2
    a5d4:	0436bb04 	ldrteq	fp, [r6], #-2820	; 0xb04
    a5d8:	0a080000 	beq	20a5e0 <__Stack_Size+0x209de0>
    a5dc:	00000433 	andeq	r0, r0, r3, lsr r4
    a5e0:	0436bc04 	ldrteq	fp, [r6], #-3076	; 0xc04
    a5e4:	0a0c0000 	beq	30a5ec <__Stack_Size+0x309dec>
    a5e8:	000000a2 	andeq	r0, r0, r2, lsr #1
    a5ec:	0436bd04 	ldrteq	fp, [r6], #-3332	; 0xd04
    a5f0:	0a100000 	beq	40a5f8 <__Stack_Size+0x409df8>
    a5f4:	000006a3 	andeq	r0, r0, r3, lsr #13
    a5f8:	0436be04 	ldrteq	fp, [r6], #-3588	; 0xe04
    a5fc:	0a140000 	beq	50a604 <__Stack_Size+0x509e04>
    a600:	000008f8 	strdeq	r0, [r0], -r8
    a604:	0436bf04 	ldrteq	fp, [r6], #-3844	; 0xf04
    a608:	0a180000 	beq	60a610 <__Stack_Size+0x609e10>
    a60c:	00000191 	muleq	r0, r1, r1
    a610:	0436c004 	ldrteq	ip, [r6], #-4
    a614:	0a1c0000 	beq	70a61c <__Stack_Size+0x709e1c>
    a618:	000002ad 	andeq	r0, r0, sp, lsr #5
    a61c:	0436c104 	ldrteq	ip, [r6], #-260	; 0x104
    a620:	00200000 	eoreq	r0, r0, r0
    a624:	00008b04 	andeq	r8, r0, r4, lsl #22
    a628:	76c30400 	strbvc	r0, [r3], r0, lsl #8
    a62c:	13000004 	movwne	r0, #4
    a630:	00002040 	andeq	r2, r0, r0, asr #32
    a634:	01d73501 	bicseq	r3, r7, r1, lsl #10
    a638:	60a40000 	adcvs	r0, r4, r0
    a63c:	00240800 	eoreq	r0, r4, r0, lsl #16
    a640:	9c010000 	stcls	0, cr0, [r1], {-0}
    a644:	00000523 	andeq	r0, r0, r3, lsr #10
    a648:	000c3014 	andeq	r3, ip, r4, lsl r0
    a64c:	4c350100 	ldfmis	f0, [r5], #-0
    a650:	0d000000 	stceq	0, cr0, [r0, #-0]
    a654:	00000095 	muleq	r0, r5, r0
    a658:	001ffb13 	andseq	pc, pc, r3, lsl fp	; <UNPREDICTABLE>
    a65c:	d7630100 	strble	r0, [r3, -r0, lsl #2]!
    a660:	c8000001 	stmdagt	r0, {r0}
    a664:	24080060 	strcs	r0, [r8], #-96	; 0x60
    a668:	01000000 	mrseq	r0, (UNDEF: 0)
    a66c:	00054c9c 	muleq	r5, ip, ip
    a670:	0c301400 	cfldrseq	mvf1, [r0], #-0
    a674:	63010000 	movwvs	r0, #4096	; 0x1000
    a678:	0000004c 	andeq	r0, r0, ip, asr #32
    a67c:	0000952e 	andeq	r9, r0, lr, lsr #10
    a680:	21141300 	tstcs	r4, r0, lsl #6
    a684:	9b010000 	blls	4a68c <__Stack_Size+0x49e8c>
    a688:	000001d7 	ldrdeq	r0, [r0], -r7
    a68c:	080060ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sp, lr}
    a690:	00000090 	muleq	r0, r0, r0
    a694:	05b69c01 	ldreq	r9, [r6, #3073]!	; 0xc01
    a698:	30140000 	andscc	r0, r4, r0
    a69c:	0100000c 	tsteq	r0, ip
    a6a0:	00004c9b 	muleq	r0, fp, ip
    a6a4:	00954f00 	addseq	r4, r5, r0, lsl #30
    a6a8:	610c1500 	tstvs	ip, r0, lsl #10
    a6ac:	001c0800 	andseq	r0, ip, r0, lsl #16
    a6b0:	05910000 	ldreq	r0, [r1]
    a6b4:	10160000 	andsne	r0, r6, r0
    a6b8:	01000008 	tsteq	r0, r8
    a6bc:	00005ea9 	andeq	r5, r0, r9, lsr #29
    a6c0:	00957000 	addseq	r7, r5, r0
    a6c4:	30170000 	andscc	r0, r7, r0
    a6c8:	30080061 	andcc	r0, r8, r1, rrx
    a6cc:	16000000 	strne	r0, [r0], -r0
    a6d0:	00002166 	andeq	r2, r0, r6, ror #2
    a6d4:	005ec301 	subseq	ip, lr, r1, lsl #6
    a6d8:	95840000 	strls	r0, [r4]
    a6dc:	82180000 	andshi	r0, r8, #0
    a6e0:	01000021 	tsteq	r0, r1, lsr #32
    a6e4:	00005ec4 	andeq	r5, r0, r4, asr #29
    a6e8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    a6ec:	00001e8f 	andeq	r1, r0, pc, lsl #29
    a6f0:	7c01e001 	stcvc	0, cr14, [r1], {1}
    a6f4:	a8080061 	stmdage	r8, {r0, r5, r6}
    a6f8:	01000000 	mrseq	r0, (UNDEF: 0)
    a6fc:	00067b9c 	muleq	r6, ip, fp
    a700:	21521a00 	cmpcs	r2, r0, lsl #20
    a704:	e2010000 	and	r0, r1, #0
    a708:	00067b01 	andeq	r7, r6, r1, lsl #22
    a70c:	0095b500 	addseq	fp, r5, r0, lsl #10
    a710:	21071a00 	tstcs	r7, r0, lsl #20
    a714:	e3010000 	movw	r0, #4096	; 0x1000
    a718:	00003a01 	andeq	r3, r0, r1, lsl #20
    a71c:	0095ca00 	addseq	ip, r5, r0, lsl #20
    a720:	06511a00 	ldrbeq	r1, [r1], -r0, lsl #20
    a724:	e4010000 	str	r0, [r1], #-0
    a728:	00003a01 	andeq	r3, r0, r1, lsl #20
    a72c:	00960e00 	addseq	r0, r6, r0, lsl #28
    a730:	1e611a00 	vmulne.f32	s3, s2, s0
    a734:	e6010000 	str	r0, [r1], -r0
    a738:	0001d701 	andeq	sp, r1, r1, lsl #14
    a73c:	00965900 	addseq	r5, r6, r0, lsl #18
    a740:	0c301a00 	ldceq	10, cr1, [r0], #-0
    a744:	e7010000 	str	r0, [r1, -r0]
    a748:	00003a01 	andeq	r3, r0, r1, lsl #20
    a74c:	00967700 	addseq	r7, r6, r0, lsl #14
    a750:	1f501b00 	svcne	0x00501b00
    a754:	10010000 	andne	r0, r1, r0
    a758:	00620002 	rsbeq	r0, r2, r2
    a75c:	61ce1c08 	bicvs	r1, lr, r8, lsl #24
    a760:	06380800 	ldrteq	r0, [r8], -r0, lsl #16
    a764:	011d0000 	tsteq	sp, r0
    a768:	00750250 	rsbseq	r0, r5, r0, asr r2
    a76c:	61d61e00 	bicsvs	r1, r6, r0, lsl #28
    a770:	0d1c0800 	ldceq	8, cr0, [ip, #-0]
    a774:	064b0000 	strbeq	r0, [fp], -r0
    a778:	011d0000 	tsteq	sp, r0
    a77c:	00300150 	eorseq	r0, r0, r0, asr r1
    a780:	0061e01e 	rsbeq	lr, r1, lr, lsl r0
    a784:	000d3208 	andeq	r3, sp, r8, lsl #4
    a788:	00066500 	andeq	r6, r6, r0, lsl #10
    a78c:	52011d00 	andpl	r1, r1, #0, 26
    a790:	1d007502 	cfstr32ne	mvfx7, [r0, #-8]
    a794:	79025001 	stmdbvc	r2, {r0, ip, lr}
    a798:	e81f0000 	ldmda	pc, {}	; <UNPREDICTABLE>
    a79c:	4d080061 	stcmi	0, cr0, [r8, #-388]	; 0xfffffe7c
    a7a0:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
    a7a4:	75025101 	strvc	r5, [r2, #-257]	; 0x101
    a7a8:	50011d00 	andpl	r1, r1, r0, lsl #26
    a7ac:	00003001 	andeq	r3, r0, r1
    a7b0:	026a040b 	rsbeq	r0, sl, #184549376	; 0xb000000
    a7b4:	75200000 	strvc	r0, [r0, #-0]!
    a7b8:	0100001e 	tsteq	r0, lr, lsl r0
    a7bc:	00020d4a 	andeq	r0, r2, sl, asr #26
    a7c0:	00622400 	rsbeq	r2, r2, r0, lsl #8
    a7c4:	00003808 	andeq	r3, r0, r8, lsl #16
    a7c8:	139c0100 	orrsne	r0, ip, #0, 2
    a7cc:	00001f3a 	andeq	r1, r0, sl, lsr pc
    a7d0:	020d7801 	andeq	r7, sp, #65536	; 0x10000
    a7d4:	625c0000 	subsvs	r0, ip, #0
    a7d8:	00480800 	subeq	r0, r8, r0, lsl #16
    a7dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    a7e0:	000006be 			; <UNDEFINED> instruction: 0x000006be
    a7e4:	00655221 	rsbeq	r5, r5, r1, lsr #4
    a7e8:	020d7a01 	andeq	r7, sp, #4096	; 0x1000
    a7ec:	96b50000 	ldrtls	r0, [r5], r0
    a7f0:	13000000 	movwne	r0, #0
    a7f4:	0000205a 	andeq	r2, r0, sl, asr r0
    a7f8:	020de901 	andeq	lr, sp, #16384	; 0x4000
    a7fc:	62a40000 	adcvs	r0, r4, #0
    a800:	00d00800 	sbcseq	r0, r0, r0, lsl #16
    a804:	9c010000 	stcls	0, cr0, [r1], {-0}
    a808:	00000796 	muleq	r0, r6, r7
    a80c:	001eb816 	andseq	fp, lr, r6, lsl r8
    a810:	3aeb0100 	bcc	ffacac18 <BootRAM+0xea3b3b9>
    a814:	d3000000 	movwle	r0, #0
    a818:	16000096 			; <UNDEFINED> instruction: 0x16000096
    a81c:	00001300 	andeq	r1, r0, r0, lsl #6
    a820:	003aec01 	eorseq	lr, sl, r1, lsl #24
    a824:	970b0000 	strls	r0, [fp, -r0]
    a828:	c0170000 	andsgt	r0, r7, r0
    a82c:	9e080062 	cdpls	0, 0, cr0, cr8, cr2, {3}
    a830:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    a834:	00001fca 	andeq	r1, r0, sl, asr #31
    a838:	0796f601 	ldreq	pc, [r6, r1, lsl #12]
    a83c:	66160000 	ldrvs	r0, [r6], -r0
    a840:	01000021 	tsteq	r0, r1, lsr #32
    a844:	00003af7 	strdeq	r3, [r0], -r7
    a848:	00973400 	addseq	r3, r7, r0, lsl #8
    a84c:	21821600 	orrcs	r1, r2, r0, lsl #12
    a850:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    a854:	0000003a 	andeq	r0, r0, sl, lsr r0
    a858:	0000975d 	andeq	r9, r0, sp, asr r7
    a85c:	50457221 	subpl	r7, r5, r1, lsr #4
    a860:	3af90100 	bcc	ffe4ac68 <BootRAM+0xedbb409>
    a864:	34000000 	strcc	r0, [r0], #-0
    a868:	15000097 	strne	r0, [r0, #-151]	; 0x97
    a86c:	08006340 	stmdaeq	r0, {r6, r8, r9, sp, lr}
    a870:	00000012 	andeq	r0, r0, r2, lsl r0
    a874:	00000754 	andeq	r0, r0, r4, asr r7
    a878:	00075e1a 	andeq	r5, r7, sl, lsl lr
    a87c:	012f0100 	teqeq	pc, r0, lsl #2
    a880:	0000004c 	andeq	r0, r0, ip, asr #32
    a884:	00009775 	andeq	r9, r0, r5, ror r7
    a888:	631a1e00 	tstvs	sl, #0, 28
    a88c:	0d640800 	stcleq	8, cr0, [r4, #-0]
    a890:	07680000 	strbeq	r0, [r8, -r0]!
    a894:	011d0000 	tsteq	sp, r0
    a898:	00740250 	rsbseq	r0, r4, r0, asr r2
    a89c:	63221e00 	teqvs	r2, #0, 28
    a8a0:	0d760800 	ldcleq	8, cr0, [r6, #-0]
    a8a4:	07820000 	streq	r0, [r2, r0]
    a8a8:	011d0000 	tsteq	sp, r0
    a8ac:	30080251 	andcc	r0, r8, r1, asr r2
    a8b0:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    a8b4:	22000074 	andcs	r0, r0, #116	; 0x74
    a8b8:	0800633a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sp, lr}
    a8bc:	00000d8d 	andeq	r0, r0, sp, lsl #27
    a8c0:	00634022 	rsbeq	r4, r3, r2, lsr #32
    a8c4:	000da408 	andeq	sl, sp, r8, lsl #8
    a8c8:	0b000000 	bleq	a8d0 <__Stack_Size+0xa0d0>
    a8cc:	00029a04 	andeq	r9, r2, r4, lsl #20
    a8d0:	1f802300 	svcne	0x00802300
    a8d4:	42010000 	andmi	r0, r1, #0
    a8d8:	00020d01 	andeq	r0, r2, r1, lsl #26
    a8dc:	00637400 	rsbeq	r7, r3, r0, lsl #8
    a8e0:	00008408 	andeq	r8, r0, r8, lsl #8
    a8e4:	2b9c0100 	blcs	fe70acec <BootRAM+0xd67b48d>
    a8e8:	1a000008 	bne	a910 <__Stack_Size+0xa110>
    a8ec:	00002182 	andeq	r2, r0, r2, lsl #3
    a8f0:	3a014401 	bcc	5b8fc <__Stack_Size+0x5b0fc>
    a8f4:	a3000000 	movwge	r0, #0
    a8f8:	1a000097 	bne	ab5c <__Stack_Size+0xa35c>
    a8fc:	00002166 	andeq	r2, r0, r6, ror #2
    a900:	3a014501 	bcc	5bd0c <__Stack_Size+0x5b50c>
    a904:	cb000000 	blgt	a90c <__Stack_Size+0xa10c>
    a908:	24000097 	strcs	r0, [r0], #-151	; 0x97
    a90c:	00504572 	subseq	r4, r0, r2, ror r5
    a910:	3a014601 	bcc	5c11c <__Stack_Size+0x5b91c>
    a914:	cb000000 	blgt	a91c <__Stack_Size+0xa11c>
    a918:	1a000097 	bne	ab7c <__Stack_Size+0xa37c>
    a91c:	00001300 	andeq	r1, r0, r0, lsl #6
    a920:	3a014701 	bcc	5c52c <__Stack_Size+0x5bd2c>
    a924:	00000000 	andeq	r0, r0, r0
    a928:	25000098 	strcs	r0, [r0, #-152]	; 0x98
    a92c:	00001050 	andeq	r1, r0, r0, asr r0
    a930:	00000810 	andeq	r0, r0, r0, lsl r8
    a934:	00075e1a 	andeq	r5, r7, sl, lsl lr
    a938:	01630100 	cmneq	r3, r0, lsl #2
    a93c:	0000004c 	andeq	r0, r0, ip, asr #32
    a940:	0000981e 	andeq	r9, r0, lr, lsl r8
    a944:	63cc1700 	bicvs	r1, ip, #0, 14
    a948:	00100800 	andseq	r0, r0, r0, lsl #16
    a94c:	5e1a0000 	cdppl	0, 1, cr0, cr10, cr0, {0}
    a950:	01000007 	tsteq	r0, r7
    a954:	004c0169 	subeq	r0, ip, r9, ror #2
    a958:	98460000 	stmdals	r6, {}^	; <UNPREDICTABLE>
    a95c:	00000000 	andeq	r0, r0, r0
    a960:	001fcf26 	andseq	ip, pc, r6, lsr #30
    a964:	01780100 	cmneq	r8, r0, lsl #2
    a968:	0000020d 	andeq	r0, r0, sp, lsl #4
    a96c:	080063f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sp, lr}
    a970:	00000024 	andeq	r0, r0, r4, lsr #32
    a974:	64279c01 	strtvs	r9, [r7], #-3073	; 0xc01
    a978:	01000002 	tsteq	r0, r2
    a97c:	01d70192 			; <UNDEFINED> instruction: 0x01d70192
    a980:	641c0000 	ldrvs	r0, [ip], #-0
    a984:	001c0800 	andseq	r0, ip, r0, lsl #16
    a988:	9c010000 	stcls	0, cr0, [r1], {-0}
    a98c:	0000088c 	andeq	r0, r0, ip, lsl #17
    a990:	000c3028 	andeq	r3, ip, r8, lsr #32
    a994:	01920100 	orrseq	r0, r2, r0, lsl #2
    a998:	0000004c 	andeq	r0, r0, ip, asr #32
    a99c:	0000985f 	andeq	r9, r0, pc, asr r8
    a9a0:	001fe928 	andseq	lr, pc, r8, lsr #18
    a9a4:	01920100 	orrseq	r0, r2, r0, lsl #2
    a9a8:	0000088c 	andeq	r0, r0, ip, lsl #17
    a9ac:	00009880 	andeq	r9, r0, r0, lsl #17
    a9b0:	0008711a 	andeq	r7, r8, sl, lsl r1
    a9b4:	01940100 	orrseq	r0, r4, r0, lsl #2
    a9b8:	0000003a 	andeq	r0, r0, sl, lsr r0
    a9bc:	000098ac 	andeq	r9, r0, ip, lsr #17
    a9c0:	dd040b00 	vstrle	d0, [r4, #-0]
    a9c4:	27000001 	strcs	r0, [r0, -r1]
    a9c8:	00001e53 	andeq	r1, r0, r3, asr lr
    a9cc:	5e03c901 	cdppl	9, 0, cr12, cr3, cr1, {0}
    a9d0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    a9d4:	40080064 	andmi	r0, r8, r4, rrx
    a9d8:	01000000 	mrseq	r0, (UNDEF: 0)
    a9dc:	0008bc9c 	muleq	r8, ip, ip
    a9e0:	64461f00 	strbvs	r1, [r6], #-3840	; 0xf00
    a9e4:	0d8d0800 	stceq	8, cr0, [sp]
    a9e8:	011d0000 	tsteq	sp, r0
    a9ec:	00300150 	eorseq	r0, r0, r0, asr r1
    a9f0:	1ec62900 	cdpne	9, 12, cr2, cr6, cr0, {0}
    a9f4:	1b010000 	blne	4a9fc <__Stack_Size+0x4a1fc>
    a9f8:	08f60102 	ldmeq	r6!, {r1, r8}^
    a9fc:	4c2a0000 	stcmi	0, cr0, [sl], #-0
    aa00:	0100001e 	tsteq	r0, lr, lsl r0
    aa04:	020d021d 	andeq	r0, sp, #-805306367	; 0xd0000001
    aa08:	682a0000 	stmdavs	sl!, {}	; <UNPREDICTABLE>
    aa0c:	0100001f 	tsteq	r0, pc, lsl r0
    aa10:	003a021e 	eorseq	r0, sl, lr, lsl r2
    aa14:	512a0000 	teqpl	sl, r0
    aa18:	01000006 	tsteq	r0, r6
    aa1c:	003a021f 	eorseq	r0, sl, pc, lsl r2
    aa20:	c12b0000 	teqgt	fp, r0
    aa24:	0100001e 	tsteq	r0, lr, lsl r0
    aa28:	2900028b 	stmdbcs	r0, {r0, r1, r3, r7, r9}
    aa2c:	00001ec8 	andeq	r1, r0, r8, asr #29
    aa30:	01029701 	tsteq	r2, r1, lsl #14
    aa34:	00000978 	andeq	r0, r0, r8, ror r9
    aa38:	00060e2a 	andeq	r0, r6, sl, lsr #28
    aa3c:	02990100 	addseq	r0, r9, #0, 2
    aa40:	00000264 	andeq	r0, r0, r4, ror #4
    aa44:	001e4c2a 	andseq	r4, lr, sl, lsr #24
    aa48:	029a0100 	addseq	r0, sl, #0, 2
    aa4c:	0000020d 	andeq	r0, r0, sp, lsl #4
    aa50:	0021b12a 	eoreq	fp, r1, sl, lsr #2
    aa54:	029b0100 	addseq	r0, fp, #0, 2
    aa58:	0000003a 	andeq	r0, r0, sl, lsr r0
    aa5c:	0021662a 	eoreq	r6, r1, sl, lsr #12
    aa60:	029d0100 	addseq	r0, sp, #0, 2
    aa64:	0000003a 	andeq	r0, r0, sl, lsr r0
    aa68:	001e6c2a 	andseq	r6, lr, sl, lsr #24
    aa6c:	029d0100 	addseq	r0, sp, #0, 2
    aa70:	0000003a 	andeq	r0, r0, sl, lsr r0
    aa74:	0008712a 	andeq	r7, r8, sl, lsr #2
    aa78:	029e0100 	addseq	r0, lr, #0, 2
    aa7c:	0000003a 	andeq	r0, r0, sl, lsr r0
    aa80:	0013002a 	andseq	r0, r3, sl, lsr #32
    aa84:	029e0100 	addseq	r0, lr, #0, 2
    aa88:	0000003a 	andeq	r0, r0, sl, lsr r0
    aa8c:	0009692c 	andeq	r6, r9, ip, lsr #18
    aa90:	1ed42a00 	vfnmsne.f32	s5, s8, s0
    aa94:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    aa98:	00005e02 	andeq	r5, r0, r2, lsl #28
    aa9c:	2a2d0000 	bcs	b4aaa4 <__Stack_Size+0xb4a2a4>
    aaa0:	000001db 	ldrdeq	r0, [r0], -fp
    aaa4:	6f032501 	svcvs	0x00032501
    aaa8:	00000000 	andeq	r0, r0, r0
    aaac:	1d8a2300 	stcne	3, cr2, [sl]
    aab0:	4c010000 	stcmi	0, cr0, [r1], {-0}
    aab4:	00005e03 	andeq	r5, r0, r3, lsl #28
    aab8:	00647800 	rsbeq	r7, r4, r0, lsl #16
    aabc:	0002dc08 	andeq	sp, r2, r8, lsl #24
    aac0:	e69c0100 	ldr	r0, [ip], r0, lsl #2
    aac4:	2e00000a 	cdpcs	0, 0, cr0, cr0, cr10, {0}
    aac8:	034f0104 	movteq	r0, #61700	; 0xf104
    aacc:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    aad0:	0100622f 	tsteq	r0, pc, lsr #4
    aad4:	01d70351 	bicseq	r0, r7, r1, asr r3
    aad8:	772f0000 	strvc	r0, [pc, -r0]!
    aadc:	03520100 	cmpeq	r2, #0, 2
    aae0:	00000ae6 	andeq	r0, r0, r6, ror #21
    aae4:	214d1a00 	cmpcs	sp, r0, lsl #20
    aae8:	53010000 	movwpl	r0, #4096	; 0x1000
    aaec:	00099203 	andeq	r9, r9, r3, lsl #4
    aaf0:	0098dd00 	addseq	sp, r8, r0, lsl #26
    aaf4:	08bc3000 	ldmeq	ip!, {ip, sp}
    aaf8:	64be0000 	ldrtvs	r0, [lr], #0
    aafc:	00c40800 	sbceq	r0, r4, r0, lsl #16
    ab00:	67010000 	strvs	r0, [r1, -r0]
    ab04:	000a4003 	andeq	r4, sl, r3
    ab08:	64be1700 	ldrtvs	r1, [lr], #1792	; 0x700
    ab0c:	00c40800 	sbceq	r0, r4, r0, lsl #16
    ab10:	c9310000 	ldmdbgt	r1!, {}	; <UNPREDICTABLE>
    ab14:	00000008 	andeq	r0, r0, r8
    ab18:	31000099 	swpcc	r0, r9, [r0]	; <UNPREDICTABLE>
    ab1c:	000008d5 	ldrdeq	r0, [r0], -r5
    ab20:	000099a9 	andeq	r9, r0, r9, lsr #19
    ab24:	0008e131 	andeq	lr, r8, r1, lsr r1
    ab28:	0099bc00 	addseq	fp, r9, r0, lsl #24
    ab2c:	08ed3200 	stmiaeq	sp!, {r9, ip, sp}^
    ab30:	657c0000 	ldrbvs	r0, [ip, #-0]!
    ab34:	ce220800 	cdpgt	8, 2, cr0, cr2, cr0, {0}
    ab38:	81080064 	tsthi	r8, r4, rrx
    ab3c:	1c000006 	stcne	0, cr0, [r0], {6}
    ab40:	08006508 	stmdaeq	r0, {r3, r8, sl, sp, lr}
    ab44:	00000a1a 	andeq	r0, r0, sl, lsl sl
    ab48:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    ab4c:	22000074 	andcs	r0, r0, #116	; 0x74
    ab50:	0800651e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, sp, lr}
    ab54:	0000082b 	andeq	r0, r0, fp, lsr #16
    ab58:	00653a22 	rsbeq	r3, r5, r2, lsr #20
    ab5c:	0006be08 	andeq	fp, r6, r8, lsl #28
    ab60:	65482200 	strbvs	r2, [r8, #-512]	; 0x200
    ab64:	06960800 	ldreq	r0, [r6], r0, lsl #16
    ab68:	5a220000 	bpl	88ab70 <__Stack_Size+0x88a370>
    ab6c:	9c080065 	stcls	0, cr0, [r8], {101}	; 0x65
    ab70:	00000007 	andeq	r0, r0, r7
    ab74:	08f63300 	ldmeq	r6!, {r8, r9, ip, sp}^
    ab78:	65820000 	strvs	r0, [r2]
    ab7c:	10700800 	rsbsne	r0, r0, r0, lsl #16
    ab80:	6c010000 	stcvs	0, cr0, [r1], {-0}
    ab84:	000adc03 	andeq	sp, sl, r3, lsl #24
    ab88:	10703400 	rsbsne	r3, r0, r0, lsl #8
    ab8c:	03310000 	teqeq	r1, #0
    ab90:	db000009 	blle	abbc <__Stack_Size+0xa3bc>
    ab94:	31000099 	swpcc	r0, r9, [r0]	; <UNPREDICTABLE>
    ab98:	0000090f 	andeq	r0, r0, pc, lsl #18
    ab9c:	00009a72 	andeq	r9, r0, r2, ror sl
    aba0:	00091b31 	andeq	r1, r9, r1, lsr fp
    aba4:	009ab200 	addseq	fp, sl, r0, lsl #4
    aba8:	09273100 	stmdbeq	r7!, {r8, ip, sp}
    abac:	9adb0000 	bls	ff6cabb4 <BootRAM+0xe63b355>
    abb0:	33310000 	teqcc	r1, #0
    abb4:	ee000009 	cdp	0, 0, cr0, cr0, cr9, {0}
    abb8:	3100009a 	swpcc	r0, sl, [r0]	; <UNPREDICTABLE>
    abbc:	0000093f 	andeq	r0, r0, pc, lsr r9
    abc0:	00009b09 	andeq	r9, r0, r9, lsl #22
    abc4:	00094b31 	andeq	r4, r9, r1, lsr fp
    abc8:	009b2900 	addseq	r2, fp, r0, lsl #18
    abcc:	658c1500 	strvs	r1, [ip, #1280]	; 0x500
    abd0:	002c0800 	eoreq	r0, ip, r0, lsl #16
    abd4:	0aaf0000 	beq	febcabdc <BootRAM+0xdb3b37d>
    abd8:	5c310000 	ldcpl	0, cr0, [r1], #-0
    abdc:	3c000009 	stccc	0, cr0, [r0], {9}
    abe0:	0000009b 	muleq	r0, fp, r0
    abe4:	0066c015 	rsbeq	ip, r6, r5, lsl r0
    abe8:	00006008 	andeq	r6, r0, r8
    abec:	000ace00 	andeq	ip, sl, r0, lsl #28
    abf0:	096a3500 	stmdbeq	sl!, {r8, sl, ip, sp}^
    abf4:	91020000 	mrsls	r0, (UNDEF: 2)
    abf8:	671e226c 	ldrvs	r2, [lr, -ip, ror #4]
    abfc:	05b60800 	ldreq	r0, [r6, #2048]!	; 0x800
    ac00:	36000000 	strcc	r0, [r0], -r0
    ac04:	08006682 	stmdaeq	r0, {r1, r7, r9, sl, sp, lr}
    ac08:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    ac0c:	00000074 	andeq	r0, r0, r4, ror r0
    ac10:	67302200 	ldrvs	r2, [r0, -r0, lsl #4]!
    ac14:	08920800 	ldmeq	r2, {fp}
    ac18:	0b000000 	bleq	ac20 <__Stack_Size+0xa420>
    ac1c:	00004c04 	andeq	r4, r0, r4, lsl #24
    ac20:	21992900 	orrscs	r2, r9, r0, lsl #18
    ac24:	a7010000 	strge	r0, [r1, -r0]
    ac28:	0b2c0101 	bleq	b0b034 <__Stack_Size+0xb0a834>
    ac2c:	522a0000 	eorpl	r0, sl, #0
    ac30:	01000021 	tsteq	r0, r1, lsr #32
    ac34:	067b01a9 	ldrbteq	r0, [fp], -r9, lsr #3
    ac38:	142a0000 	strtne	r0, [sl], #-0
    ac3c:	0100001f 	tsteq	r0, pc, lsl r0
    ac40:	003a01aa 	eorseq	r0, sl, sl, lsr #3
    ac44:	2a2d0000 	bcs	b4ac4c <__Stack_Size+0xb4a44c>
    ac48:	00001e65 	andeq	r1, r0, r5, ror #28
    ac4c:	d701b001 	strle	fp, [r1, -r1]
    ac50:	2a000001 	bcs	ac5c <__Stack_Size+0xa45c>
    ac54:	00000c30 	andeq	r0, r0, r0, lsr ip
    ac58:	3a01b101 	bcc	77064 <__Stack_Size+0x76864>
    ac5c:	00000000 	andeq	r0, r0, r0
    ac60:	1dd42300 	ldclne	3, cr2, [r4]
    ac64:	a0010000 	andge	r0, r1, r0
    ac68:	00005e03 	andeq	r5, r0, r3, lsl #28
    ac6c:	00675400 	rsbeq	r5, r7, r0, lsl #8
    ac70:	0000c808 	andeq	ip, r0, r8, lsl #16
    ac74:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
    ac78:	1a00000b 	bne	acac <__Stack_Size+0xa4ac>
    ac7c:	00000651 	andeq	r0, r0, r1, asr r6
    ac80:	3a03a201 	bcc	f348c <__Stack_Size+0xf2c8c>
    ac84:	66000000 	strvs	r0, [r0], -r0
    ac88:	3000009b 	mulcc	r0, fp, r0
    ac8c:	00000aec 	andeq	r0, r0, ip, ror #21
    ac90:	08006764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, sp, lr}
    ac94:	0000007e 	andeq	r0, r0, lr, ror r0
    ac98:	f403a601 	vst1.8	{d10-d12}, [r3], r1
    ac9c:	1700000b 	strne	r0, [r0, -fp]
    aca0:	08006764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, sp, lr}
    aca4:	0000007e 	andeq	r0, r0, lr, ror r0
    aca8:	000af931 	andeq	pc, sl, r1, lsr r9	; <UNPREDICTABLE>
    acac:	009bb300 	addseq	fp, fp, r0, lsl #6
    acb0:	0b053100 	bleq	1570b8 <__Stack_Size+0x1568b8>
    acb4:	9bc80000 	blls	ff20acbc <BootRAM+0xe17b45d>
    acb8:	6c150000 	ldcvs	0, cr0, [r5], {-0}
    acbc:	2a080067 	bcs	20ae60 <__Stack_Size+0x20a660>
    acc0:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    acc4:	3100000b 	tstcc	r0, fp
    acc8:	00000b12 	andeq	r0, r0, r2, lsl fp
    accc:	00009bdb 	ldrdeq	r9, [r0], -fp
    acd0:	000b1e31 	andeq	r1, fp, r1, lsr lr
    acd4:	009bf900 	addseq	pc, fp, r0, lsl #18
    acd8:	67781c00 	ldrbvs	r1, [r8, -r0, lsl #24]!
    acdc:	0bb40800 	bleq	fed0cce4 <BootRAM+0xdc7d485>
    ace0:	011d0000 	tsteq	sp, r0
    ace4:	00760250 	rsbseq	r0, r6, r0, asr r2
    ace8:	678c1e00 	strvs	r1, [ip, r0, lsl #28]
    acec:	0db60800 	ldceq	8, cr0, [r6]
    acf0:	0bc70000 	bleq	ff1cacf8 <BootRAM+0xe13b499>
    acf4:	011d0000 	tsteq	sp, r0
    acf8:	00300150 	eorseq	r0, r0, r0, asr r1
    acfc:	0067961f 	rsbeq	r9, r7, pc, lsl r6
    ad00:	000dcc08 	andeq	ip, sp, r8, lsl #24
    ad04:	52011d00 	andpl	r1, r1, #0, 26
    ad08:	1d007602 	stcne	6, cr7, [r0, #-8]
    ad0c:	77025001 	strvc	r5, [r2, -r1]
    ad10:	1f000000 	svcne	0x00000000
    ad14:	080067aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, sp, lr}
    ad18:	00000d4d 	andeq	r0, r0, sp, asr #26
    ad1c:	0151011d 	cmpeq	r1, sp, lsl r1
    ad20:	50011d30 	andpl	r1, r1, r0, lsr sp
    ad24:	00003001 	andeq	r3, r0, r1
    ad28:	68023700 	stmdavs	r2, {r8, r9, sl, ip, sp}
    ad2c:	08920800 	ldmeq	r2, {fp}
    ad30:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    ad34:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    ad38:	1c03dd01 	stcne	13, cr13, [r3], {1}
    ad3c:	38080068 	stmdacc	r8, {r3, r5, r6}
    ad40:	01000000 	mrseq	r0, (UNDEF: 0)
    ad44:	000c439c 	muleq	ip, ip, r3
    ad48:	61563900 	cmpvs	r6, r0, lsl #18
    ad4c:	dd01006c 	stcle	0, cr0, [r1, #-432]	; 0xfffffe50
    ad50:	00005e03 	andeq	r5, r0, r3, lsl #28
    ad54:	009c2c00 	addseq	r2, ip, r0, lsl #24
    ad58:	00692400 	rsbeq	r2, r9, r0, lsl #8
    ad5c:	3a03df01 	bcc	102968 <__Stack_Size+0x102168>
    ad60:	4d000000 	stcmi	0, cr0, [r0, #-0]
    ad64:	2400009c 	strcs	r0, [r0], #-156	; 0x9c
    ad68:	0050456e 	subseq	r4, r0, lr, ror #10
    ad6c:	3a03e001 	bcc	102d78 <__Stack_Size+0x102578>
    ad70:	6c000000 	stcvs	0, cr0, [r0], {-0}
    ad74:	0000009c 	muleq	r0, ip, r0
    ad78:	001dc823 	andseq	ip, sp, r3, lsr #16
    ad7c:	03780100 	cmneq	r8, #0, 2
    ad80:	0000005e 	andeq	r0, r0, lr, asr r0
    ad84:	08006854 	stmdaeq	r0, {r2, r4, r6, fp, sp, lr}
    ad88:	0000005c 	andeq	r0, r0, ip, asr r0
    ad8c:	0c899c01 	stceq	12, cr9, [r9], {1}
    ad90:	511a0000 	tstpl	sl, r0
    ad94:	01000006 	tsteq	r0, r6
    ad98:	003a037a 	eorseq	r0, sl, sl, ror r3
    ad9c:	9c7f0000 	ldclls	0, cr0, [pc], #-0	; ada4 <__Stack_Size+0xa5a4>
    ada0:	68220000 	stmdavs	r2!, {}	; <UNPREDICTABLE>
    ada4:	b6080068 	strlt	r0, [r8], -r8, rrx
    ada8:	22000005 	andcs	r0, r0, #5
    adac:	08006884 	stmdaeq	r0, {r2, r7, fp, sp, lr}
    adb0:	00000bfe 	strdeq	r0, [r0], -lr
    adb4:	0068a237 	rsbeq	sl, r8, r7, lsr r2
    adb8:	00089208 	andeq	r9, r8, r8, lsl #4
    adbc:	2e3a0000 	cdpcs	0, 3, cr0, cr10, cr0, {0}
    adc0:	0100001f 	tsteq	r0, pc, lsl r0
    adc4:	000003f1 	strdeq	r0, [r0], -r1
    adc8:	00020000 	andeq	r0, r2, r0
    adcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    add0:	0002eb3b 	andeq	lr, r2, fp, lsr fp
    add4:	6bec0400 	blvs	ffb0bddc <BootRAM+0xea7c57d>
    add8:	3b000004 	blcc	adf0 <__Stack_Size+0xa5f0>
    addc:	0000021a 	andeq	r0, r0, sl, lsl r2
    ade0:	029aee04 	addseq	lr, sl, #4, 28	; 0x40
    ade4:	993b0000 	ldmdbls	fp!, {}	; <UNPREDICTABLE>
    ade8:	0400001d 	streq	r0, [r0], #-29
    adec:	00004cf2 	strdeq	r4, [r0], -r2
    adf0:	1da43b00 	stcne	11, cr3, [r4]
    adf4:	f3040000 	vhadd.u8	d0, d4, d0
    adf8:	0000004c 	andeq	r0, r0, ip, asr #32
    adfc:	0001e83b 	andeq	lr, r1, fp, lsr r8
    ae00:	d2220500 	eorle	r0, r2, #0, 10
    ae04:	0b00000c 	bleq	ae3c <__Stack_Size+0xa63c>
    ae08:	00038104 	andeq	r8, r3, r4, lsl #2
    ae0c:	013e3b00 	teqeq	lr, r0, lsl #22
    ae10:	25050000 	strcs	r0, [r5, #-0]
    ae14:	00000ce3 	andeq	r0, r0, r3, ror #25
    ae18:	046b040b 	strbteq	r0, [fp], #-1035	; 0x40b
    ae1c:	063b0000 	ldrteq	r0, [fp], -r0
    ae20:	0500001e 	streq	r0, [r0, #-30]
    ae24:	000cf42a 	andeq	pc, ip, sl, lsr #8
    ae28:	ef040b00 	svc	0x00040b00
    ae2c:	3c000004 	stccc	0, cr0, [r0], {4}
    ae30:	00002177 	andeq	r2, r0, r7, ror r1
    ae34:	02e52401 	rsceq	r2, r5, #16777216	; 0x1000000
    ae38:	03050000 	movweq	r0, #20480	; 0x5000
    ae3c:	2000059a 	mulcs	r0, sl, r5
    ae40:	001fb33c 	andseq	fp, pc, ip, lsr r3	; <UNPREDICTABLE>
    ae44:	94250100 	strtls	r0, [r5], #-256	; 0x100
    ae48:	05000000 	streq	r0, [r0, #-0]
    ae4c:	000dc103 	andeq	ip, sp, r3, lsl #2
    ae50:	1d2b3d20 	stcne	13, cr3, [fp, #-128]!	; 0xffffff80
    ae54:	53070000 	movwpl	r0, #28672	; 0x7000
    ae58:	00004c02 	andeq	r4, r0, r2, lsl #24
    ae5c:	000d3200 	andeq	r3, sp, r0, lsl #4
    ae60:	005e0d00 	subseq	r0, lr, r0, lsl #26
    ae64:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    ae68:	00001f00 	andeq	r1, r0, r0, lsl #30
    ae6c:	0d4d1906 	stcleq	9, cr1, [sp, #-24]	; 0xffffffe8
    ae70:	d70d0000 	strle	r0, [sp, -r0]
    ae74:	0d000001 	stceq	0, cr0, [r0, #-4]
    ae78:	0000004c 	andeq	r0, r0, ip, asr #32
    ae7c:	00004c0d 	andeq	r4, r0, sp, lsl #24
    ae80:	063f0000 	ldrteq	r0, [pc], -r0
    ae84:	0700001c 	smladeq	r0, ip, r0, r0
    ae88:	0d640256 	sfmeq	f0, 2, [r4, #-344]!	; 0xfffffea8
    ae8c:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    ae90:	0d000000 	stceq	0, cr0, [r0, #-0]
    ae94:	0000004c 	andeq	r0, r0, ip, asr #32
    ae98:	1d373f00 	ldcne	15, cr3, [r7, #-0]
    ae9c:	4e070000 	cdpmi	0, 0, cr0, cr7, cr0, {0}
    aea0:	000d7602 	andeq	r7, sp, r2, lsl #12
    aea4:	005e0d00 	subseq	r0, lr, r0, lsl #26
    aea8:	3f000000 	svccc	0x00000000
    aeac:	00001d44 	andeq	r1, r0, r4, asr #26
    aeb0:	8d023a07 	vstrhi	s6, [r2, #-28]	; 0xffffffe4
    aeb4:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    aeb8:	0000005e 	andeq	r0, r0, lr, asr r0
    aebc:	00004c0d 	andeq	r4, r0, sp, lsl #24
    aec0:	9c3f0000 	ldcls	0, cr0, [pc], #-0	; aec8 <__Stack_Size+0xa6c8>
    aec4:	07000009 	streq	r0, [r0, -r9]
    aec8:	0da40257 	sfmeq	f0, 4, [r4, #348]!	; 0x15c
    aecc:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    aed0:	0d000000 	stceq	0, cr0, [r0, #-0]
    aed4:	0000004c 	andeq	r0, r0, ip, asr #32
    aed8:	19e93f00 	stmibne	r9!, {r8, r9, sl, fp, ip, sp}^
    aedc:	4d070000 	stcmi	0, cr0, [r7, #-0]
    aee0:	000db602 	andeq	fp, sp, r2, lsl #12
    aee4:	005e0d00 	subseq	r0, lr, r0, lsl #26
    aee8:	3d000000 	stccc	0, cr0, [r0, #-0]
    aeec:	00001a79 	andeq	r1, r0, r9, ror sl
    aef0:	4c025407 	cfstrsmi	mvf5, [r2], {7}
    aef4:	cc000000 	stcgt	0, cr0, [r0], {-0}
    aef8:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    aefc:	0000005e 	andeq	r0, r0, lr, asr r0
    af00:	20ad4000 	adccs	r4, sp, r0
    af04:	1a060000 	bne	18af0c <__Stack_Size+0x18a70c>
    af08:	0001d70d 	andeq	sp, r1, sp, lsl #14
    af0c:	004c0d00 	subeq	r0, ip, r0, lsl #26
    af10:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    af14:	00000000 	andeq	r0, r0, r0
    af18:	00017000 	andeq	r7, r1, r0
    af1c:	6c000400 	cfstrsvs	mvf0, [r0], {-0}
    af20:	04000028 	streq	r0, [r0], #-40	; 0x28
    af24:	001b0f01 	andseq	r0, fp, r1, lsl #30
    af28:	21e70100 	mvncs	r0, r0, lsl #2
    af2c:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    af30:	11100000 	tstne	r0, r0
    af34:	00000000 	andeq	r0, r0, r0
    af38:	3ba30000 	blcc	fe8caf40 <BootRAM+0xd83b6e1>
    af3c:	04020000 	streq	r0, [r2], #-0
    af40:	0004da05 	andeq	sp, r4, r5, lsl #20
    af44:	05020200 	streq	r0, [r2, #-512]	; 0x200
    af48:	0000065e 	andeq	r0, r0, lr, asr r6
    af4c:	1a060102 	bne	18b35c <__Stack_Size+0x18ab5c>
    af50:	03000008 	movweq	r0, #8
    af54:	00323375 	eorseq	r3, r2, r5, ror r3
    af58:	00452402 	subeq	r2, r5, r2, lsl #8
    af5c:	04020000 	streq	r0, [r2], #-0
    af60:	00025207 	andeq	r5, r2, r7, lsl #4
    af64:	31750300 	cmncc	r5, r0, lsl #6
    af68:	25020036 	strcs	r0, [r2, #-54]	; 0x36
    af6c:	00000057 	andeq	r0, r0, r7, asr r0
    af70:	49070202 	stmdbmi	r7, {r1, r9}
    af74:	03000009 	movweq	r0, #9
    af78:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    af7c:	00006826 	andeq	r6, r0, r6, lsr #16
    af80:	08010200 	stmdaeq	r1, {r9}
    af84:	00000818 	andeq	r0, r0, r8, lsl r8
    af88:	005e0404 	subseq	r0, lr, r4, lsl #8
    af8c:	00050000 	andeq	r0, r5, r0
    af90:	0100001f 	tsteq	r0, pc, lsl r0
    af94:	0068b023 	rsbeq	fp, r8, r3, lsr #32
    af98:	00003008 	andeq	r3, r0, r8
    af9c:	fd9c0100 	ldc2	1, cr0, [ip]
    afa0:	06000000 	streq	r0, [r0], -r0
    afa4:	00002201 	andeq	r2, r0, r1, lsl #4
    afa8:	006f2301 	rsbeq	r2, pc, r1, lsl #6
    afac:	9cc50000 	stclls	0, cr0, [r5], {0}
    afb0:	0a060000 	beq	18afb8 <__Stack_Size+0x18a7b8>
    afb4:	01000022 	tsteq	r0, r2, lsr #32
    afb8:	00004c23 	andeq	r4, r0, r3, lsr #24
    afbc:	009d0a00 	addseq	r0, sp, r0, lsl #20
    afc0:	21f90600 	mvnscs	r0, r0, lsl #12
    afc4:	23010000 	movwcs	r0, #4096	; 0x1000
    afc8:	0000004c 	andeq	r0, r0, ip, asr #32
    afcc:	00009d2b 	andeq	r9, r0, fp, lsr #26
    afd0:	01006e07 	tsteq	r0, r7, lsl #28
    afd4:	00003a25 	andeq	r3, r0, r5, lsr #20
    afd8:	08520100 	ldmdaeq	r2, {r8}^
    afdc:	26010069 	strcs	r0, [r1], -r9, rrx
    afe0:	0000003a 	andeq	r0, r0, sl, lsr r0
    afe4:	00009d4c 	andeq	r9, r0, ip, asr #26
    afe8:	0018c809 	andseq	ip, r8, r9, lsl #16
    afec:	3a260100 	bcc	98b3f4 <__Stack_Size+0x98abf4>
    aff0:	ab000000 	blge	aff8 <__Stack_Size+0xa7f8>
    aff4:	0900009d 	stmdbeq	r0, {r0, r2, r3, r4, r7}
    aff8:	000018ce 	andeq	r1, r0, lr, asr #17
    affc:	003a2601 	eorseq	r2, sl, r1, lsl #12
    b000:	9de20000 	stclls	0, cr0, [r2]
    b004:	16090000 	strne	r0, [r9], -r0
    b008:	01000022 	tsteq	r0, r2, lsr #32
    b00c:	0000fd27 	andeq	pc, r0, r7, lsr #26
    b010:	009e0600 	addseq	r0, lr, r0, lsl #12
    b014:	04040000 	streq	r0, [r4], #-0
    b018:	0000004c 	andeq	r0, r0, ip, asr #32
    b01c:	0020ad05 	eoreq	sl, r0, r5, lsl #26
    b020:	e03c0100 	eors	r0, ip, r0, lsl #2
    b024:	24080068 	strcs	r0, [r8], #-104	; 0x68
    b028:	01000000 	mrseq	r0, (UNDEF: 0)
    b02c:	00016d9c 	muleq	r1, ip, sp
    b030:	22010600 	andcs	r0, r1, #0, 12
    b034:	3c010000 	stccc	0, cr0, [r1], {-0}
    b038:	0000006f 	andeq	r0, r0, pc, rrx
    b03c:	00009e41 	andeq	r9, r0, r1, asr #28
    b040:	00220a06 	eoreq	r0, r2, r6, lsl #20
    b044:	4c3c0100 	ldfmis	f0, [ip], #-0
    b048:	7c000000 	stcvc	0, cr0, [r0], {-0}
    b04c:	0600009e 			; <UNDEFINED> instruction: 0x0600009e
    b050:	000021f9 	strdeq	r2, [r0], -r9
    b054:	004c3c01 	subeq	r3, ip, r1, lsl #24
    b058:	9e9d0000 	cdpls	0, 9, cr0, cr13, cr0, {0}
    b05c:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    b060:	3a3e0100 	bcc	f8b468 <__Stack_Size+0xf8ac68>
    b064:	01000000 	mrseq	r0, (UNDEF: 0)
    b068:	00690852 	rsbeq	r0, r9, r2, asr r8
    b06c:	003a3f01 	eorseq	r3, sl, r1, lsl #30
    b070:	9ebe0000 	cdpls	0, 11, cr0, cr14, cr0, {0}
    b074:	16090000 	strne	r0, [r9], -r0
    b078:	01000022 	tsteq	r0, r2, lsr #32
    b07c:	00016d40 	andeq	r6, r1, r0, asr #26
    b080:	009f1d00 	addseq	r1, pc, r0, lsl #26
    b084:	04040000 	streq	r0, [r4], #-0
    b088:	0000003a 	andeq	r0, r0, sl, lsr r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
       c:	00051308 	andeq	r1, r5, r8, lsl #6
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	11010000 	mrsne	r0, (UNDEF: 1)
      14:	11061000 	mrsne	r1, (UNDEF: 6)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	03011201 	movweq	r1, #4609	; 0x1201
      1c:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	00051308 	andeq	r1, r5, r8, lsl #6
      24:	11010000 	mrsne	r0, (UNDEF: 1)
      28:	130e2501 	movwne	r2, #58625	; 0xe501
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	1b0e030b 	blne	380c60 <__Stack_Size+0x380460>
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	1117550e 	tstne	r7, lr, lsl #10
      34:	00171001 	andseq	r1, r7, r1
      38:	00240200 	eoreq	r0, r4, r0, lsl #4

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	0b3e0b0b 	bleq	f82c70 <__Stack_Size+0xf82470>

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	00000e03 	andeq	r0, r0, r3, lsl #28
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	0b002403 	bleq	9058 <__Stack_Size+0x8858>
      48:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
      4c:	04000008 	streq	r0, [r0], #-8

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	0b0b000f 	bleq	2c0094 <__Stack_Size+0x2bf894>
      54:	00001349 	andeq	r1, r0, r9, asr #6
      58:	27001505 	strcs	r1, [r0, -r5, lsl #10]
      5c:	06000019 			; <UNDEFINED> instruction: 0x06000019
      60:	08030016 	stmdaeq	r3, {r1, r2, r4}
      64:	0b3b0b3a 	bleq	ec2d54 <__Stack_Size+0xec2554>
      68:	00001349 	andeq	r1, r0, r9, asr #6
      6c:	03001607 	movweq	r1, #1543	; 0x607
      70:	3b0b3a0e 	blcc	2ce8b0 <__Stack_Size+0x2ce0b0>
      74:	0013490b 	andseq	r4, r3, fp, lsl #18
      78:	00350800 	eorseq	r0, r5, r0, lsl #16
      7c:	00001349 	andeq	r1, r0, r9, asr #6
      80:	0b010409 	bleq	410ac <__Stack_Size+0x408ac>
      84:	3b0b3a0b 	blcc	2ce8b8 <__Stack_Size+0x2ce0b8>
      88:	0013010b 	andseq	r0, r3, fp, lsl #2
      8c:	00280a00 	eoreq	r0, r8, r0, lsl #20
      90:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
      94:	130b0000 	movwne	r0, #45056	; 0xb000
      98:	3a0b0b01 	bcc	2c2ca4 <__Stack_Size+0x2c24a4>
      9c:	010b3b0b 	tsteq	fp, fp, lsl #22
      a0:	0c000013 	stceq	0, cr0, [r0], {19}
      a4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	f25519_select(x, a, b, (a[0] ^ parity) & 1);

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
	f25519_normalize(a);
	f25519_normalize(c);
      a8:	0b3b0b3a 	bleq	ec2d98 <__Stack_Size+0xec2598>

	return f25519_eq(a, c);
      ac:	0b381349 	bleq	e04dd8 <__Stack_Size+0xe045d8>
      b0:	0d0d0000 	stceq	0, cr0, [sp, #-0]
      b4:	3a080300 	bcc	200cbc <__Stack_Size+0x2004bc>
	uint8_t ok;

	mx2ey(ey, mx);
	ok = ey2ex(ex, ey, parity);

	f25519_normalize(ex);
      b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	f25519_normalize(ey);
      bc:	000b3813 	andeq	r3, fp, r3, lsl r8
      c0:	01040e00 	tsteq	r4, r0, lsl #28

	return ok;
}
      c4:	0b0b0e03 	bleq	2c38d8 <__Stack_Size+0x2c30d8>
      c8:	0b3b0b3a 	bleq	ec2db8 <__Stack_Size+0xec25b8>
      cc:	00001301 	andeq	r1, r0, r1, lsl #6
      d0:	0301130f 	movweq	r1, #4879	; 0x130f
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
      d4:	3a0b0b0e 	bcc	2c2d14 <__Stack_Size+0x2c2514>
      d8:	010b3b0b 	tsteq	fp, fp, lsl #22
		minusp[i] = c;
      dc:	10000013 	andne	r0, r0, r3, lsl r0
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
      e0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
      e4:	13011349 	movwne	r1, #4937	; 0x1349

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
      e8:	05110000 	ldreq	r0, [r1, #-0]
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
      ec:	00134900 	andseq	r4, r3, r0, lsl #18
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
      f0:	01131200 	tsteq	r3, r0, lsl #4
      f4:	0b0b0803 	bleq	2c2108 <__Stack_Size+0x2c1908>
      f8:	0b3b0b3a 	bleq	ec2de8 <__Stack_Size+0xec25e8>
      fc:	00001301 	andeq	r1, r0, r1, lsl #6
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     100:	0b011713 	bleq	45d54 <__Stack_Size+0x45554>

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
     104:	3b0b3a0b 	blcc	2ce938 <__Stack_Size+0x2ce138>
     108:	0013010b 	andseq	r0, r3, fp, lsl #2
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     10c:	000d1400 	andeq	r1, sp, r0, lsl #8
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
     110:	0b3a0803 	bleq	e82124 <__Stack_Size+0xe81924>
     114:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     118:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     11c:	03193f01 	tsteq	r9, #1, 30
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     120:	3b0b3a0e 	blcc	2ce960 <__Stack_Size+0x2ce160>
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
     124:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     128:	010b2013 	tsteq	fp, r3, lsl r0
		fprime_copy(plusa, r);
		fprime_add(plusa, a, modulus);

		fprime_select(r, r, plusa, bit);
	}
}
     12c:	16000013 			; <UNDEFINED> instruction: 0x16000013

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
     130:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	i <<= 3;

	while (x) {
     134:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
     138:	00001349 	andeq	r1, r0, r9, asr #6
     13c:	3f002e17 	svccc	0x00002e17
	f25519_mul__distinct(x3, a, a);

	f25519_mul_c(a, x1z1, 486662);
	f25519_add(a, x1sq, a);
	f25519_add(a, z1sq, a);
	f25519_mul__distinct(x1sq, x1z1, a);
     140:	3a0e0319 	bcc	380dac <__Stack_Size+0x3805ac>
	f25519_mul_c(z3, x1sq, 4);
     144:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     148:	000b2019 	andeq	r2, fp, r9, lsl r0
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	012e1800 	teqeq	lr, r0, lsl #16
     150:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     154:	0b3b0b3a 	bleq	ec2e44 <__Stack_Size+0xec2644>
	f25519_sub(b, x3, z3); /* D */
     158:	0b201927 	bleq	8065fc <__Stack_Size+0x805dfc>
     15c:	00001301 	andeq	r1, r0, r1, lsl #6
	f25519_mul__distinct(da, a, b);
     160:	03003419 	movweq	r3, #1049	; 0x419
     164:	3b0b3a0e 	blcc	2ce9a4 <__Stack_Size+0x2ce1a4>
     168:	0013490b 	andseq	r4, r3, fp, lsl #18

	f25519_sub(b, x2, z2);
     16c:	012e1a00 	teqeq	lr, r0, lsl #20
     170:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
	f25519_add(a, x3, z3); /* C */
     174:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     178:	0b201927 	bleq	80661c <__Stack_Size+0x805e1c>
     17c:	00001301 	andeq	r1, r0, r1, lsl #6
	f25519_mul__distinct(cb, a, b);
     180:	0300341b 	movweq	r3, #1051	; 0x41b
     184:	3b0b3a0e 	blcc	2ce9c4 <__Stack_Size+0x2ce1c4>

	f25519_add(a, da, cb);
     188:	00134905 	andseq	r4, r3, r5, lsl #18
     18c:	002e1c00 	eoreq	r1, lr, r0, lsl #24
     190:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
	f25519_mul__distinct(b, a, a);
     194:	0b3b0b3a 	bleq	ec2e84 <__Stack_Size+0xec2684>
     198:	01111927 	tsteq	r1, r7, lsr #18
	f25519_mul__distinct(x5, z1, b);
     19c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     1a0:	00194297 	mulseq	r9, r7, r2
     1a4:	002e1d00 	eoreq	r1, lr, r0, lsl #26

	f25519_sub(a, da, cb);
     1a8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     1ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
	f25519_mul__distinct(b, a, a);
     1b0:	01111927 	tsteq	r1, r7, lsr #18
     1b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     1b8:	00194297 	mulseq	r9, r7, r2

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	012e1e00 	teqeq	lr, r0, lsl #28
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     1c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	13491927 	movtne	r1, #39207	; 0x9927
     1cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     1d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     1d4:	00130119 	andseq	r0, r3, r9, lsl r1
		f25519_select(zm1, zm1, zm, bit);
     1d8:	00051f00 	andeq	r1, r5, r0, lsl #30
     1dc:	0b3a0e03 	bleq	e839f0 <__Stack_Size+0xe831f0>
     1e0:	1349053b 	movtne	r0, #38203	; 0x953b
		f25519_select(xm, xm, xms, bit);
     1e4:	00001702 	andeq	r1, r0, r2, lsl #14
     1e8:	03000520 	movweq	r0, #1312	; 0x520
     1ec:	3b0b3a0e 	blcc	2cea2c <__Stack_Size+0x2ce22c>
		f25519_select(zm, zm, zms, bit);
     1f0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     1f4:	21000018 	tstcs	r0, r8, lsl r0
     1f8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	0b3a0e03 	bleq	e83a10 <__Stack_Size+0xe83210>
     200:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	06120111 			; <UNDEFINED> instruction: 0x06120111
     208:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
	f25519_mul__distinct(result, zm1, xm);
     20c:	00130119 	andseq	r0, r3, r9, lsl r1
     210:	010b2200 	mrseq	r2, R11_fiq
	f25519_normalize(result);
     214:	13011755 	movwne	r1, #5973	; 0x1755
     218:	34230000 	strtcc	r0, [r3], #-0
}
     21c:	3a0e0300 	bcc	380e24 <__Stack_Size+0x380624>
     220:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     224:	00170213 	andseq	r0, r7, r3, lsl r2
     228:	82892400 	addhi	r2, r9, #0, 8
     22c:	01110001 	tsteq	r1, r1
     230:	00001331 	andeq	r1, r0, r1, lsr r3
     234:	01828925 	orreq	r8, r2, r5, lsr #18
     238:	31011101 	tstcc	r1, r1, lsl #2
     23c:	00130113 	andseq	r0, r3, r3, lsl r1
     240:	828a2600 	addhi	r2, sl, #0, 12
     244:	18020001 	stmdane	r2, {r0}
     248:	00184291 	mulseq	r8, r1, r2
     24c:	82892700 	addhi	r2, r9, #0, 14
     250:	01110101 	tsteq	r1, r1, lsl #2
     254:	31194295 			; <UNDEFINED> instruction: 0x31194295
     258:	28000013 	stmdacs	r0, {r0, r1, r4}
     25c:	01018289 	smlabbeq	r1, r9, r2, r8
     260:	00000111 	andeq	r0, r0, r1, lsl r1
     264:	03000529 	movweq	r0, #1321	; 0x529
     268:	3b0b3a08 	blcc	2cea90 <__Stack_Size+0x2ce290>
     26c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     270:	2a000017 	bcs	2d4 <_Minimum_Stack_Size+0x1d4>
     274:	00018289 	andeq	r8, r1, r9, lsl #5
     278:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     27c:	00133119 	andseq	r3, r3, r9, lsl r1
     280:	012e2b00 	teqeq	lr, r0, lsl #22
     284:	01111331 	tsteq	r1, r1, lsr r3
     288:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     28c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     290:	2c000013 	stccs	0, cr0, [r0], {19}
     294:	13310005 	teqne	r1, #5
     298:	00001702 	andeq	r1, r0, r2, lsl #14
     29c:	11010b2d 	tstne	r1, sp, lsr #22
     2a0:	00061201 	andeq	r1, r6, r1, lsl #4
     2a4:	00052e00 	andeq	r2, r5, r0, lsl #28
     2a8:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     2ac:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
     2b0:	03193f00 	tsteq	r9, #0, 30
     2b4:	3b0b3a0e 	blcc	2ceaf4 <__Stack_Size+0x2ce2f4>
     2b8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     2bc:	000b2013 	andeq	r2, fp, r3, lsl r0
     2c0:	011d3000 	tsteq	sp, r0
     2c4:	01521331 	cmpeq	r2, r1, lsr r3
     2c8:	0b581755 	bleq	1606024 <__Stack_Size+0x1605824>
     2cc:	13010559 	movwne	r0, #5465	; 0x1559
     2d0:	89310000 	ldmdbhi	r1!, {}	; <UNPREDICTABLE>
     2d4:	11010182 	smlabbne	r1, r2, r1, r0
     2d8:	00133101 	andseq	r3, r3, r1, lsl #2
     2dc:	010b3200 	mrseq	r3, R11_fiq
     2e0:	00001755 	andeq	r1, r0, r5, asr r7
     2e4:	31003433 	tstcc	r0, r3, lsr r4
     2e8:	00180213 	andseq	r0, r8, r3, lsl r2
     2ec:	012e3400 	teqeq	lr, r0, lsl #8
     2f0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     2f4:	0b3b0b3a 	bleq	ec2fe4 <__Stack_Size+0xec27e4>
     2f8:	01111927 	tsteq	r1, r7, lsr #18
     2fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     300:	01194297 			; <UNDEFINED> instruction: 0x01194297
     304:	35000013 	strcc	r0, [r0, #-19]
     308:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     30c:	0b3b0b3a 	bleq	ec2ffc <__Stack_Size+0xec27fc>
     310:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     314:	1d360000 	ldcne	0, cr0, [r6, #-0]
     318:	11133101 	tstne	r3, r1, lsl #2
     31c:	58061201 	stmdapl	r6, {r0, r9, ip}
     320:	010b590b 	tsteq	fp, fp, lsl #18
     324:	37000013 	smladcc	r0, r3, r0, r0
     328:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     32c:	0b3a0e03 	bleq	e83b40 <__Stack_Size+0xe83340>
     330:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     334:	0b201349 	bleq	805060 <__Stack_Size+0x804860>
     338:	1d380000 	ldcne	0, cr0, [r8, #-0]
     33c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     340:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     344:	000b590b 	andeq	r5, fp, fp, lsl #18
     348:	00343900 	eorseq	r3, r4, r0, lsl #18
     34c:	17021331 	smladxne	r2, r1, r3, r1
     350:	053a0000 	ldreq	r0, [sl, #-0]!
     354:	3a0e0300 	bcc	380f5c <__Stack_Size+0x38075c>
     358:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     35c:	00170213 	andseq	r0, r7, r3, lsl r2
     360:	00343b00 	eorseq	r3, r4, r0, lsl #22
     364:	0b3a0e03 	bleq	e83b78 <__Stack_Size+0xe83378>
     368:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     36c:	00001702 	andeq	r1, r0, r2, lsl #14
     370:	31011d3c 	tstcc	r1, ip, lsr sp
     374:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     378:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     37c:	0013010b 	andseq	r0, r3, fp, lsl #2
     380:	00343d00 	eorseq	r3, r4, r0, lsl #26
     384:	0b3a0e03 	bleq	e83b98 <__Stack_Size+0xe83398>
     388:	1349053b 	movtne	r0, #38203	; 0x953b
     38c:	00001802 	andeq	r1, r0, r2, lsl #16
     390:	3f012e3e 	svccc	0x00012e3e
     394:	3a0e0319 	bcc	381000 <__Stack_Size+0x380800>
     398:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     39c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     3a0:	96184006 	ldrls	r4, [r8], -r6
     3a4:	13011942 	movwne	r1, #6466	; 0x1942
     3a8:	893f0000 	ldmdbhi	pc!, {}	; <UNPREDICTABLE>
     3ac:	11010182 	smlabbne	r1, r2, r1, r0
     3b0:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     3b4:	13011331 	movwne	r1, #4913	; 0x1331
     3b8:	2e400000 	cdpcs	0, 4, cr0, cr0, cr0, {0}
     3bc:	03193f00 	tsteq	r9, #0, 30
     3c0:	3b0b3a0e 	blcc	2cec00 <__Stack_Size+0x2ce400>
     3c4:	11134905 	tstne	r3, r5, lsl #18
     3c8:	40061201 	andmi	r1, r6, r1, lsl #4
     3cc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     3d0:	34410000 	strbcc	r0, [r1], #-0
     3d4:	3a0e0300 	bcc	380fdc <__Stack_Size+0x3807dc>
     3d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3dc:	00061c13 	andeq	r1, r6, r3, lsl ip
     3e0:	00264200 	eoreq	r4, r6, r0, lsl #4
     3e4:	00001349 	andeq	r1, r0, r9, asr #6
     3e8:	03003443 	movweq	r3, #1091	; 0x443
     3ec:	3b0b3a0e 	blcc	2cec2c <__Stack_Size+0x2ce42c>
     3f0:	3f13490b 	svccc	0x0013490b
     3f4:	00180219 	andseq	r0, r8, r9, lsl r2
     3f8:	00344400 	eorseq	r4, r4, r0, lsl #8
     3fc:	0b3a0e03 	bleq	e83c10 <__Stack_Size+0xe83410>
     400:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     404:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     408:	01450000 	mrseq	r0, (UNDEF: 69)
     40c:	01134901 	tsteq	r3, r1, lsl #18
     410:	46000013 			; <UNDEFINED> instruction: 0x46000013
     414:	13490021 	movtne	r0, #36897	; 0x9021
     418:	00000b2f 	andeq	r0, r0, pc, lsr #22
     41c:	00002147 	andeq	r2, r0, r7, asr #2
     420:	002e4800 	eoreq	r4, lr, r0, lsl #16
     424:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     428:	0b3b0b3a 	bleq	ec3118 <__Stack_Size+0xec2918>
     42c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     430:	2e490000 	cdpcs	0, 4, cr0, cr9, cr0, {0}
     434:	03193f01 	tsteq	r9, #1, 30
     438:	3b0b3a0e 	blcc	2cec78 <__Stack_Size+0x2ce478>
     43c:	3c192705 	ldccc	7, cr2, [r9], {5}
     440:	00130119 	andseq	r0, r3, r9, lsl r1
     444:	012e4a00 	teqeq	lr, r0, lsl #20
     448:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     44c:	0b3b0b3a 	bleq	ec313c <__Stack_Size+0xec293c>
     450:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     454:	00001301 	andeq	r1, r0, r1, lsl #6
     458:	3f002e4b 	svccc	0x00002e4b
     45c:	3a0e0319 	bcc	3810c8 <__Stack_Size+0x3808c8>
     460:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     464:	3c134919 	ldccc	9, cr4, [r3], {25}
     468:	4c000019 	stcmi	0, cr0, [r0], {25}
     46c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     470:	0b3a0e03 	bleq	e83c84 <__Stack_Size+0xe83484>
     474:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     478:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     47c:	00001301 	andeq	r1, r0, r1, lsl #6
     480:	3f012e4d 	svccc	0x00012e4d
     484:	3a0e0319 	bcc	3810f0 <__Stack_Size+0x3808f0>
     488:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     48c:	3c134919 	ldccc	9, cr4, [r3], {25}
     490:	00130119 	andseq	r0, r3, r9, lsl r1
     494:	002e4e00 	eoreq	r4, lr, r0, lsl #28
     498:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     49c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     4a0:	13491927 	movtne	r1, #39207	; 0x9927
     4a4:	0000193c 	andeq	r1, r0, ip, lsr r9
     4a8:	01110100 	tsteq	r1, r0, lsl #2
     4ac:	0b130e25 	bleq	4c3d48 <__Stack_Size+0x4c3548>
     4b0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     4b4:	00001710 	andeq	r1, r0, r0, lsl r7
     4b8:	0b002402 	bleq	94c8 <__Stack_Size+0x8cc8>
     4bc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     4c0:	03000008 	movweq	r0, #8
     4c4:	0b0b0024 	bleq	2c055c <__Stack_Size+0x2bfd5c>
     4c8:	0e030b3e 	vmoveq.16	d3[0], r0
     4cc:	16040000 	strne	r0, [r4], -r0
     4d0:	3a080300 	bcc	2010d8 <__Stack_Size+0x2008d8>
     4d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4d8:	05000013 	streq	r0, [r0, #-19]
     4dc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     4e0:	0b3a0b0b 	bleq	e83114 <__Stack_Size+0xe82914>
     4e4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     4e8:	0d060000 	stceq	0, cr0, [r6, #-0]
     4ec:	3a0e0300 	bcc	3810f4 <__Stack_Size+0x3808f4>
     4f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4f4:	000b3813 	andeq	r3, fp, r3, lsl r8
     4f8:	000f0700 	andeq	r0, pc, r0, lsl #14
     4fc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     500:	16080000 	strne	r0, [r8], -r0
     504:	3a0e0300 	bcc	38110c <__Stack_Size+0x38090c>
     508:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     50c:	09000013 	stmdbeq	r0, {r0, r1, r4}
     510:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     514:	0b3b0b3a 	bleq	ec3204 <__Stack_Size+0xec2a04>
     518:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     51c:	00001802 	andeq	r1, r0, r2, lsl #16
     520:	4901010a 	stmdbmi	r1, {r1, r3, r8}
     524:	00130113 	andseq	r0, r3, r3, lsl r1
     528:	00210b00 	eoreq	r0, r1, r0, lsl #22
     52c:	0b2f1349 	bleq	bc5258 <__Stack_Size+0xbc4a58>
     530:	01000000 	mrseq	r0, (UNDEF: 0)
     534:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     538:	0e030b13 	vmoveq.32	d3[0], r0
     53c:	17550e1b 	smmlane	r5, fp, lr, r0
     540:	17100111 			; <UNDEFINED> instruction: 0x17100111
     544:	24020000 	strcs	r0, [r2], #-0
     548:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     54c:	000e030b 	andeq	r0, lr, fp, lsl #6
     550:	00240300 	eoreq	r0, r4, r0, lsl #6
     554:	0b3e0b0b 	bleq	f83188 <__Stack_Size+0xf82988>
     558:	00000803 	andeq	r0, r0, r3, lsl #16
     55c:	0b000f04 	bleq	4174 <__Stack_Size+0x3974>
     560:	0013490b 	andseq	r4, r3, fp, lsl #18
     564:	00260500 	eoreq	r0, r6, r0, lsl #10
     568:	00001349 	andeq	r1, r0, r9, asr #6
     56c:	03001606 	movweq	r1, #1542	; 0x606
     570:	3b0b3a08 	blcc	2ced98 <__Stack_Size+0x2ce598>
     574:	0013490b 	andseq	r4, r3, fp, lsl #18
     578:	01040700 	tsteq	r4, r0, lsl #14
     57c:	0b3a0b0b 	bleq	e831b0 <__Stack_Size+0xe829b0>
     580:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     584:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
     588:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     58c:	0900000d 	stmdbeq	r0, {r0, r2, r3}
     590:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     594:	0b3b0b3a 	bleq	ec3284 <__Stack_Size+0xec2a84>
     598:	00001349 	andeq	r1, r0, r9, asr #6
     59c:	3f012e0a 	svccc	0x00012e0a
     5a0:	3a0e0319 	bcc	38120c <__Stack_Size+0x380a0c>
     5a4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     5a8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     5ac:	97184006 	ldrls	r4, [r8, -r6]
     5b0:	13011942 	movwne	r1, #6466	; 0x1942
     5b4:	050b0000 	streq	r0, [fp, #-0]
     5b8:	3a0e0300 	bcc	3811c0 <__Stack_Size+0x3809c0>
     5bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5c0:	00170213 	andseq	r0, r7, r3, lsl r2
     5c4:	00340c00 	eorseq	r0, r4, r0, lsl #24
     5c8:	0b3a0803 	bleq	e825dc <__Stack_Size+0xe81ddc>
     5cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     5d0:	00001702 	andeq	r1, r0, r2, lsl #14
     5d4:	0182890d 	orreq	r8, r2, sp, lsl #18
     5d8:	31011101 	tstcc	r1, r1, lsl #2
     5dc:	00130113 	andseq	r0, r3, r3, lsl r1
     5e0:	828a0e00 	addhi	r0, sl, #0, 28
     5e4:	18020001 	stmdane	r2, {r0}
     5e8:	00184291 	mulseq	r8, r1, r2
     5ec:	82890f00 	addhi	r0, r9, #0, 30
     5f0:	01110101 	tsteq	r1, r1, lsl #2
     5f4:	31194295 			; <UNDEFINED> instruction: 0x31194295
     5f8:	10000013 	andne	r0, r0, r3, lsl r0
     5fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     600:	0b3a0e03 	bleq	e83e14 <__Stack_Size+0xe83614>
     604:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     608:	06120111 			; <UNDEFINED> instruction: 0x06120111
     60c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     610:	00130119 	andseq	r0, r3, r9, lsl r1
     614:	00341100 	eorseq	r1, r4, r0, lsl #2
     618:	0b3a0e03 	bleq	e83e2c <__Stack_Size+0xe8362c>
     61c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     620:	00001702 	andeq	r1, r0, r2, lsl #14
     624:	03003412 	movweq	r3, #1042	; 0x412
     628:	3b0b3a0e 	blcc	2cee68 <__Stack_Size+0x2ce668>
     62c:	1c13490b 	ldcne	9, cr4, [r3], {11}
     630:	1300000b 	movwne	r0, #11
     634:	00018289 	andeq	r8, r1, r9, lsl #5
     638:	13310111 	teqne	r1, #1073741828	; 0x40000004
     63c:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
     640:	11010182 	smlabbne	r1, r2, r1, r0
     644:	00133101 	andseq	r3, r3, r1, lsl #2
     648:	00341500 	eorseq	r1, r4, r0, lsl #10
     64c:	0b3a0e03 	bleq	e83e60 <__Stack_Size+0xe83660>
     650:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     654:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     658:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     65c:	03193f01 	tsteq	r9, #1, 30
     660:	3b0b3a0e 	blcc	2ceea0 <__Stack_Size+0x2ce6a0>
     664:	3c192705 	ldccc	7, cr2, [r9], {5}
     668:	00130119 	andseq	r0, r3, r9, lsl r1
     66c:	00051700 	andeq	r1, r5, r0, lsl #14
     670:	00001349 	andeq	r1, r0, r9, asr #6
     674:	00001818 	andeq	r1, r0, r8, lsl r8
     678:	002e1900 	eoreq	r1, lr, r0, lsl #18
     67c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     680:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     684:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     688:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
     68c:	03193f00 	tsteq	r9, #0, 30
     690:	3b0b3a0e 	blcc	2ceed0 <__Stack_Size+0x2ce6d0>
     694:	3c19270b 	ldccc	7, cr2, [r9], {11}
     698:	1b000019 	blne	704 <_Minimum_Stack_Size+0x604>
     69c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     6a0:	0b3a0e03 	bleq	e83eb4 <__Stack_Size+0xe836b4>
     6a4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     6a8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     6ac:	00001301 	andeq	r1, r0, r1, lsl #6
     6b0:	3f012e1c 	svccc	0x00012e1c
     6b4:	3a0e0319 	bcc	381320 <__Stack_Size+0x380b20>
     6b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6bc:	01193c13 	tsteq	r9, r3, lsl ip
     6c0:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     6c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     6c8:	0b3a0e03 	bleq	e83edc <__Stack_Size+0xe836dc>
     6cc:	193c0b3b 	ldmdbne	ip!, {r0, r1, r3, r4, r5, r8, r9, fp}
     6d0:	00001301 	andeq	r1, r0, r1, lsl #6
     6d4:	3f012e1e 	svccc	0x00012e1e
     6d8:	3a0e0319 	bcc	381344 <__Stack_Size+0x380b44>
     6dc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     6e0:	00193c19 	andseq	r3, r9, r9, lsl ip
     6e4:	11010000 	mrsne	r0, (UNDEF: 1)
     6e8:	130e2501 	movwne	r2, #58625	; 0xe501
     6ec:	1b0e030b 	blne	381320 <__Stack_Size+0x380b20>
     6f0:	1117550e 	tstne	r7, lr, lsl #10
     6f4:	00171001 	andseq	r1, r7, r1
     6f8:	00160200 	andseq	r0, r6, r0, lsl #4
     6fc:	0b3a0e03 	bleq	e83f10 <__Stack_Size+0xe83710>
     700:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     704:	24030000 	strcs	r0, [r3], #-0
     708:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     70c:	000e030b 	andeq	r0, lr, fp, lsl #6
     710:	01130400 	tsteq	r3, r0, lsl #8
     714:	0b0b0e03 	bleq	2c3f28 <__Stack_Size+0x2c3728>
     718:	0b3b0b3a 	bleq	ec3408 <__Stack_Size+0xec2c08>
     71c:	00001301 	andeq	r1, r0, r1, lsl #6
     720:	03000d05 	movweq	r0, #3333	; 0xd05
     724:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
     728:	0019340b 	andseq	r3, r9, fp, lsl #8
     72c:	000f0600 	andeq	r0, pc, r0, lsl #12
     730:	00000b0b 	andeq	r0, r0, fp, lsl #22
     734:	0b002407 	bleq	9758 <__Stack_Size+0x8f58>
     738:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     73c:	08000008 	stmdaeq	r0, {r3}
     740:	0b0b000f 	bleq	2c0784 <__Stack_Size+0x2bff84>
     744:	00001349 	andeq	r1, r0, r9, asr #6
     748:	27001509 	strcs	r1, [r0, -r9, lsl #10]
     74c:	0a000019 	beq	7b8 <_Minimum_Stack_Size+0x6b8>
     750:	13490026 	movtne	r0, #36902	; 0x9026
     754:	160b0000 	strne	r0, [fp], -r0
     758:	3a080300 	bcc	201360 <__Stack_Size+0x200b60>
     75c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     760:	0c000013 	stceq	0, cr0, [r0], {19}
     764:	13490035 	movtne	r0, #36917	; 0x9035
     768:	040d0000 	streq	r0, [sp], #-0
     76c:	3a0b0b01 	bcc	2c3378 <__Stack_Size+0x2c2b78>
     770:	010b3b0b 	tsteq	fp, fp, lsl #22
     774:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     778:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     77c:	00000d1c 	andeq	r0, r0, ip, lsl sp
     780:	0b01130f 	bleq	453c4 <__Stack_Size+0x44bc4>
     784:	3b0b3a0b 	blcc	2cefb8 <__Stack_Size+0x2ce7b8>
     788:	0013010b 	andseq	r0, r3, fp, lsl #2
     78c:	000d1000 	andeq	r1, sp, r0
     790:	0b3a0803 	bleq	e827a4 <__Stack_Size+0xe81fa4>
     794:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     798:	00000b38 	andeq	r0, r0, r8, lsr fp
     79c:	03000d11 	movweq	r0, #3345	; 0xd11
     7a0:	3b0b3a0e 	blcc	2cefe0 <__Stack_Size+0x2ce7e0>
     7a4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     7a8:	1200000b 	andne	r0, r0, #11
     7ac:	050b0113 	streq	r0, [fp, #-275]	; 0x113
     7b0:	0b3b0b3a 	bleq	ec34a0 <__Stack_Size+0xec2ca0>
     7b4:	00001301 	andeq	r1, r0, r1, lsl #6
     7b8:	03000d13 	movweq	r0, #3347	; 0xd13
     7bc:	3b0b3a0e 	blcc	2ceffc <__Stack_Size+0x2ce7fc>
     7c0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     7c4:	14000005 	strne	r0, [r0], #-5
     7c8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     7cc:	0b3b0b3a 	bleq	ec34bc <__Stack_Size+0xec2cbc>
     7d0:	05381349 	ldreq	r1, [r8, #-841]!	; 0x349
     7d4:	01150000 	tsteq	r5, r0
     7d8:	01134901 	tsteq	r3, r1, lsl #18
     7dc:	16000013 			; <UNDEFINED> instruction: 0x16000013
     7e0:	13490021 	movtne	r0, #36897	; 0x9021
     7e4:	00000b2f 	andeq	r0, r0, pc, lsr #22
     7e8:	03000d17 	movweq	r0, #3351	; 0xd17
     7ec:	3b0b3a0e 	blcc	2cf02c <__Stack_Size+0x2ce82c>
     7f0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     7f4:	1800000b 	stmdane	r0, {r0, r1, r3}
     7f8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     7fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     800:	0b381349 	bleq	e0552c <__Stack_Size+0xe04d2c>
     804:	13190000 	tstne	r9, #0
     808:	0b0e0301 	bleq	381414 <__Stack_Size+0x380c14>
     80c:	3b0b3a0b 	blcc	2cf040 <__Stack_Size+0x2ce840>
     810:	00130105 	andseq	r0, r3, r5, lsl #2
     814:	012e1a00 	teqeq	lr, r0, lsl #20
     818:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     81c:	0b3b0b3a 	bleq	ec350c <__Stack_Size+0xec2d0c>
     820:	0b201927 	bleq	806cc4 <__Stack_Size+0x8064c4>
     824:	00001301 	andeq	r1, r0, r1, lsl #6
     828:	0300051b 	movweq	r0, #1307	; 0x51b
     82c:	3b0b3a0e 	blcc	2cf06c <__Stack_Size+0x2ce86c>
     830:	0013490b 	andseq	r4, r3, fp, lsl #18
     834:	00051c00 	andeq	r1, r5, r0, lsl #24
     838:	0b3a0803 	bleq	e8284c <__Stack_Size+0xe8204c>
     83c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     840:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
     844:	03193f01 	tsteq	r9, #1, 30
     848:	3b0b3a0e 	blcc	2cf088 <__Stack_Size+0x2ce888>
     84c:	20192705 	andscs	r2, r9, r5, lsl #14
     850:	0013010b 	andseq	r0, r3, fp, lsl #2
     854:	00051e00 	andeq	r1, r5, r0, lsl #28
     858:	0b3a0e03 	bleq	e8406c <__Stack_Size+0xe8386c>
     85c:	1349053b 	movtne	r0, #38203	; 0x953b
     860:	051f0000 	ldreq	r0, [pc, #-0]	; 868 <__Stack_Size+0x68>
     864:	3a080300 	bcc	20146c <__Stack_Size+0x200c6c>
     868:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     86c:	20000013 	andcs	r0, r0, r3, lsl r0
     870:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     874:	0b3a0e03 	bleq	e84088 <__Stack_Size+0xe83888>
     878:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     87c:	0b201349 	bleq	8055a8 <__Stack_Size+0x804da8>
     880:	00001301 	andeq	r1, r0, r1, lsl #6
     884:	03003421 	movweq	r3, #1057	; 0x421
     888:	3b0b3a0e 	blcc	2cf0c8 <__Stack_Size+0x2ce8c8>
     88c:	00134905 	andseq	r4, r3, r5, lsl #18
     890:	002e2200 	eoreq	r2, lr, r0, lsl #4
     894:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     898:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     89c:	0b201927 	bleq	806d40 <__Stack_Size+0x806540>
     8a0:	16230000 	strtne	r0, [r3], -r0
     8a4:	3a0e0300 	bcc	3814ac <__Stack_Size+0x380cac>
     8a8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8ac:	24000013 	strcs	r0, [r0], #-19
     8b0:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     8b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     8b8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     8bc:	00130119 	andseq	r0, r3, r9, lsl r1
     8c0:	00052500 	andeq	r2, r5, r0, lsl #10
     8c4:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     8c8:	05260000 	streq	r0, [r6, #-0]!
     8cc:	02133100 	andseq	r3, r3, #0, 2
     8d0:	27000017 	smladcs	r0, r7, r0, r0
     8d4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     8d8:	0b3a0e03 	bleq	e840ec <__Stack_Size+0xe838ec>
     8dc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     8e0:	01111349 	tsteq	r1, r9, asr #6
     8e4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     8e8:	01194297 			; <UNDEFINED> instruction: 0x01194297
     8ec:	28000013 	stmdacs	r0, {r0, r1, r4}
     8f0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     8f4:	0b3b0b3a 	bleq	ec35e4 <__Stack_Size+0xec2de4>
     8f8:	17021349 	strne	r1, [r2, -r9, asr #6]
     8fc:	05290000 	streq	r0, [r9, #-0]!
     900:	3a080300 	bcc	201508 <__Stack_Size+0x200d08>
     904:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     908:	00170213 	andseq	r0, r7, r3, lsl r2
     90c:	012e2a00 	teqeq	lr, r0, lsl #20
     910:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     914:	0b3b0b3a 	bleq	ec3604 <__Stack_Size+0xec2e04>
     918:	01111927 	tsteq	r1, r7, lsr #18
     91c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     920:	01194297 			; <UNDEFINED> instruction: 0x01194297
     924:	2b000013 	blcs	978 <__Stack_Size+0x178>
     928:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     92c:	0b3b0b3a 	bleq	ec361c <__Stack_Size+0xec2e1c>
     930:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     934:	342c0000 	strtcc	r0, [ip], #-0
     938:	3a080300 	bcc	201540 <__Stack_Size+0x200d40>
     93c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     940:	00170213 	andseq	r0, r7, r3, lsl r2
     944:	011d2d00 	tsteq	sp, r0, lsl #26
     948:	01521331 	cmpeq	r2, r1, lsr r3
     94c:	0b581755 	bleq	16066a8 <__Stack_Size+0x1605ea8>
     950:	13010b59 	movwne	r0, #7001	; 0x1b59
     954:	052e0000 	streq	r0, [lr, #-0]!
     958:	00133100 	andseq	r3, r3, r0, lsl #2
     95c:	011d2f00 	tsteq	sp, r0, lsl #30
     960:	01521331 	cmpeq	r2, r1, lsr r3
     964:	0b581755 	bleq	16066c0 <__Stack_Size+0x1605ec0>
     968:	00000b59 	andeq	r0, r0, r9, asr fp
     96c:	31011d30 	tstcc	r1, r0, lsr sp
     970:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     974:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     978:	31000005 	tstcc	r0, r5
     97c:	13310034 	teqne	r1, #52	; 0x34
     980:	00001802 	andeq	r1, r0, r2, lsl #16
     984:	31011d32 	tstcc	r1, r2, lsr sp
     988:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     98c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     990:	00130105 	andseq	r0, r3, r5, lsl #2
     994:	82893300 	addhi	r3, r9, #0, 6
     998:	01110101 	tsteq	r1, r1, lsl #2
     99c:	00001331 	andeq	r1, r0, r1, lsr r3
     9a0:	01828a34 	orreq	r8, r2, r4, lsr sl
     9a4:	91180200 	tstls	r8, r0, lsl #4
     9a8:	00001842 	andeq	r1, r0, r2, asr #16
     9ac:	3f012e35 	svccc	0x00012e35
     9b0:	3a0e0319 	bcc	38161c <__Stack_Size+0x380e1c>
     9b4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     9b8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     9bc:	97184006 	ldrls	r4, [r8, -r6]
     9c0:	13011942 	movwne	r1, #6466	; 0x1942
     9c4:	05360000 	ldreq	r0, [r6, #-0]!
     9c8:	3a080300 	bcc	2015d0 <__Stack_Size+0x200dd0>
     9cc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9d0:	00180213 	andseq	r0, r8, r3, lsl r2
     9d4:	00183700 	andseq	r3, r8, r0, lsl #14
     9d8:	34380000 	ldrtcc	r0, [r8], #-0
     9dc:	3a0e0300 	bcc	3815e4 <__Stack_Size+0x380de4>
     9e0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9e4:	00180213 	andseq	r0, r8, r3, lsl r2
     9e8:	011d3900 	tsteq	sp, r0, lsl #18
     9ec:	01521331 	cmpeq	r2, r1, lsr r3
     9f0:	0b581755 	bleq	160674c <__Stack_Size+0x1605f4c>
     9f4:	00000559 	andeq	r0, r0, r9, asr r5
     9f8:	55010b3a 	strpl	r0, [r1, #-2874]	; 0xb3a
     9fc:	3b000017 	blcc	a60 <__Stack_Size+0x260>
     a00:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     a04:	0b3a0e03 	bleq	e84218 <__Stack_Size+0xe83a18>
     a08:	1349053b 	movtne	r0, #38203	; 0x953b
     a0c:	1301193c 	movwne	r1, #6460	; 0x193c
     a10:	893c0000 	ldmdbhi	ip!, {}	; <UNPREDICTABLE>
     a14:	11010182 	smlabbne	r1, r2, r1, r0
     a18:	01133101 	tsteq	r3, r1, lsl #2
     a1c:	3d000013 	stccc	0, cr0, [r0, #-76]	; 0xffffffb4
     a20:	1331002e 	teqne	r1, #46	; 0x2e
     a24:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a28:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     a2c:	3e000019 	mcrcc	0, 0, r0, cr0, cr9, {0}
     a30:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     a34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a38:	0b1c1349 	bleq	705764 <__Stack_Size+0x704f64>
     a3c:	2e3f0000 	cdpcs	0, 3, cr0, cr15, cr0, {0}
     a40:	03193f00 	tsteq	r9, #0, 30
     a44:	3b0b3a0e 	blcc	2cf284 <__Stack_Size+0x2cea84>
     a48:	11192705 	tstne	r9, r5, lsl #14
     a4c:	40061201 	andmi	r1, r6, r1, lsl #4
     a50:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     a54:	0b400000 	bleq	1000a5c <__Stack_Size+0x100025c>
     a58:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     a5c:	41000006 	tstmi	r0, r6
     a60:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     a64:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a68:	17021349 	strne	r1, [r2, -r9, asr #6]
     a6c:	2e420000 	cdpcs	0, 4, cr0, cr2, cr0, {0}
     a70:	03193f01 	tsteq	r9, #1, 30
     a74:	3b0b3a0e 	blcc	2cf2b4 <__Stack_Size+0x2ceab4>
     a78:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     a7c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a80:	97184006 	ldrls	r4, [r8, -r6]
     a84:	13011942 	movwne	r1, #6466	; 0x1942
     a88:	05430000 	strbeq	r0, [r3, #-0]
     a8c:	3a0e0300 	bcc	381694 <__Stack_Size+0x380e94>
     a90:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a94:	00170213 	andseq	r0, r7, r3, lsl r2
     a98:	00344400 	eorseq	r4, r4, r0, lsl #8
     a9c:	0b3a0803 	bleq	e82ab0 <__Stack_Size+0xe822b0>
     aa0:	1349053b 	movtne	r0, #38203	; 0x953b
     aa4:	00001802 	andeq	r1, r0, r2, lsl #16
     aa8:	03003445 	movweq	r3, #1093	; 0x445
     aac:	3b0b3a08 	blcc	2cf2d4 <__Stack_Size+0x2cead4>
     ab0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     ab4:	46000017 			; <UNDEFINED> instruction: 0x46000017
     ab8:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     abc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ac0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     ac4:	00130119 	andseq	r0, r3, r9, lsl r1
     ac8:	00344700 	eorseq	r4, r4, r0, lsl #14
     acc:	17021331 	smladxne	r2, r1, r3, r1
     ad0:	2e480000 	cdpcs	0, 4, cr0, cr8, cr0, {0}
     ad4:	03193f01 	tsteq	r9, #1, 30
     ad8:	3b0b3a0e 	blcc	2cf318 <__Stack_Size+0x2ceb18>
     adc:	11192705 	tstne	r9, r5, lsl #14
     ae0:	40061201 	andmi	r1, r6, r1, lsl #4
     ae4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     ae8:	00001301 	andeq	r1, r0, r1, lsl #6
     aec:	31001d49 	tstcc	r0, r9, asr #26
     af0:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     af4:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     af8:	4a000005 	bmi	b14 <__Stack_Size+0x314>
     afc:	13310034 	teqne	r1, #52	; 0x34
     b00:	00000d1c 	andeq	r0, r0, ip, lsl sp
     b04:	31011d4b 	tstcc	r1, fp, asr #26
     b08:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     b0c:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     b10:	00130105 	andseq	r0, r3, r5, lsl #2
     b14:	82894c00 	addhi	r4, r9, #0, 24
     b18:	01110001 	tsteq	r1, r1
     b1c:	00001331 	andeq	r1, r0, r1, lsr r3
     b20:	3f012e4d 	svccc	0x00012e4d
     b24:	3a0e0319 	bcc	381790 <__Stack_Size+0x380f90>
     b28:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b2c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b30:	97184006 	ldrls	r4, [r8, -r6]
     b34:	13011942 	movwne	r1, #6466	; 0x1942
     b38:	054e0000 	strbeq	r0, [lr, #-0]
     b3c:	3a0e0300 	bcc	381744 <__Stack_Size+0x380f44>
     b40:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b44:	00180213 	andseq	r0, r8, r3, lsl r2
     b48:	00344f00 	eorseq	r4, r4, r0, lsl #30
     b4c:	0b3a0e03 	bleq	e84360 <__Stack_Size+0xe83b60>
     b50:	1349053b 	movtne	r0, #38203	; 0x953b
     b54:	00000d1c 	andeq	r0, r0, ip, lsl sp
     b58:	03000550 	movweq	r0, #1360	; 0x550
     b5c:	3b0b3a08 	blcc	2cf384 <__Stack_Size+0x2ceb84>
     b60:	02134905 	andseq	r4, r3, #81920	; 0x14000
     b64:	51000017 	tstpl	r0, r7, lsl r0
     b68:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b6c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b70:	061c1349 	ldreq	r1, [ip], -r9, asr #6
     b74:	34520000 	ldrbcc	r0, [r2], #-0
     b78:	3a0e0300 	bcc	381780 <__Stack_Size+0x380f80>
     b7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b80:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     b84:	53000018 	movwpl	r0, #24
     b88:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     b8c:	0b3a0e03 	bleq	e843a0 <__Stack_Size+0xe83ba0>
     b90:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     b94:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     b98:	00001301 	andeq	r1, r0, r1, lsl #6
     b9c:	49000554 	stmdbmi	r0, {r2, r4, r6, r8, sl}
     ba0:	55000013 	strpl	r0, [r0, #-19]
     ba4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     ba8:	0b3a0e03 	bleq	e843bc <__Stack_Size+0xe83bbc>
     bac:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     bb0:	1301193c 	movwne	r1, #6460	; 0x193c
     bb4:	26560000 	ldrbcs	r0, [r6], -r0
     bb8:	57000000 	strpl	r0, [r0, -r0]
     bbc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     bc0:	0b3a0e03 	bleq	e843d4 <__Stack_Size+0xe83bd4>
     bc4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     bc8:	1301193c 	movwne	r1, #6460	; 0x193c
     bcc:	2e580000 	cdpcs	0, 5, cr0, cr8, cr0, {0}
     bd0:	03193f00 	tsteq	r9, #0, 30
     bd4:	3b0b3a0e 	blcc	2cf414 <__Stack_Size+0x2cec14>
     bd8:	3c19270b 	ldccc	7, cr2, [r9], {11}
     bdc:	00000019 	andeq	r0, r0, r9, lsl r0
     be0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     be4:	030b130e 	movweq	r1, #45838	; 0xb30e
     be8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     bec:	10011117 	andne	r1, r1, r7, lsl r1
     bf0:	02000017 	andeq	r0, r0, #23
     bf4:	0b0b0024 	bleq	2c0c8c <__Stack_Size+0x2c048c>
     bf8:	0e030b3e 	vmoveq.16	d3[0], r0
     bfc:	16030000 	strne	r0, [r3], -r0
     c00:	3a0e0300 	bcc	381808 <__Stack_Size+0x381008>
     c04:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c08:	04000013 	streq	r0, [r0], #-19
     c0c:	0b0b0024 	bleq	2c0ca4 <__Stack_Size+0x2c04a4>
     c10:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     c14:	16050000 	strne	r0, [r5], -r0
     c18:	3a080300 	bcc	201820 <__Stack_Size+0x201020>
     c1c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c20:	06000013 			; <UNDEFINED> instruction: 0x06000013
     c24:	0b0b0104 	bleq	2c103c <__Stack_Size+0x2c083c>
     c28:	0b3b0b3a 	bleq	ec3918 <__Stack_Size+0xec3118>
     c2c:	00001301 	andeq	r1, r0, r1, lsl #6
     c30:	03002807 	movweq	r2, #2055	; 0x807
     c34:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     c38:	000f0800 	andeq	r0, pc, r0, lsl #16
     c3c:	00000b0b 	andeq	r0, r0, fp, lsl #22
     c40:	0b000f09 	bleq	486c <__Stack_Size+0x406c>
     c44:	0013490b 	andseq	r4, r3, fp, lsl #18
     c48:	00260a00 	eoreq	r0, r6, r0, lsl #20
     c4c:	00001349 	andeq	r1, r0, r9, asr #6
     c50:	0301130b 	movweq	r1, #4875	; 0x130b
     c54:	3a0b0b0e 	bcc	2c3894 <__Stack_Size+0x2c3094>
     c58:	010b3b0b 	tsteq	fp, fp, lsl #22
     c5c:	0c000013 	stceq	0, cr0, [r0], {19}
     c60:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     c64:	0b3b0b3a 	bleq	ec3954 <__Stack_Size+0xec3154>
     c68:	0b381349 	bleq	e05994 <__Stack_Size+0xe05194>
     c6c:	150d0000 	strne	r0, [sp, #-0]
     c70:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     c74:	00130113 	andseq	r0, r3, r3, lsl r1
     c78:	00050e00 	andeq	r0, r5, r0, lsl #28
     c7c:	00001349 	andeq	r1, r0, r9, asr #6
     c80:	0301130f 	movweq	r1, #4879	; 0x130f
     c84:	3a0b0b08 	bcc	2c38ac <__Stack_Size+0x2c30ac>
     c88:	010b3b0b 	tsteq	fp, fp, lsl #22
     c8c:	10000013 	andne	r0, r0, r3, lsl r0
     c90:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     c94:	0b3b0b3a 	bleq	ec3984 <__Stack_Size+0xec3184>
     c98:	0b381349 	bleq	e059c4 <__Stack_Size+0xe051c4>
     c9c:	17110000 	ldrne	r0, [r1, -r0]
     ca0:	3a0b0b01 	bcc	2c38ac <__Stack_Size+0x2c30ac>
     ca4:	010b3b0b 	tsteq	fp, fp, lsl #22
     ca8:	12000013 	andne	r0, r0, #19
     cac:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     cb0:	0b3b0b3a 	bleq	ec39a0 <__Stack_Size+0xec31a0>
     cb4:	00001349 	andeq	r1, r0, r9, asr #6
     cb8:	03011313 	movweq	r1, #4883	; 0x1313
     cbc:	3a0b0b0e 	bcc	2c38fc <__Stack_Size+0x2c30fc>
     cc0:	01053b0b 	tsteq	r5, fp, lsl #22
     cc4:	14000013 	strne	r0, [r0], #-19
     cc8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     ccc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     cd0:	0b381349 	bleq	e059fc <__Stack_Size+0xe051fc>
     cd4:	04150000 	ldreq	r0, [r5], #-0
     cd8:	0b0e0301 	bleq	3818e4 <__Stack_Size+0x3810e4>
     cdc:	3b0b3a0b 	blcc	2cf510 <__Stack_Size+0x2ced10>
     ce0:	0013010b 	andseq	r0, r3, fp, lsl #2
     ce4:	00281600 	eoreq	r1, r8, r0, lsl #12
     ce8:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     cec:	13170000 	tstne	r7, #0
     cf0:	3a0b0b01 	bcc	2c38fc <__Stack_Size+0x2c30fc>
     cf4:	010b3b0b 	tsteq	fp, fp, lsl #22
     cf8:	18000013 	stmdane	r0, {r0, r1, r4}
     cfc:	13490101 	movtne	r0, #37121	; 0x9101
     d00:	00001301 	andeq	r1, r0, r1, lsl #6
     d04:	49002119 	stmdbmi	r0, {r0, r3, r4, r8, sp}
     d08:	000b2f13 	andeq	r2, fp, r3, lsl pc
     d0c:	012e1a00 	teqeq	lr, r0, lsl #20
     d10:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     d14:	0b3b0b3a 	bleq	ec3a04 <__Stack_Size+0xec3204>
     d18:	01111927 	tsteq	r1, r7, lsr #18
     d1c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d20:	01194297 			; <UNDEFINED> instruction: 0x01194297
     d24:	1b000013 	blne	d78 <__Stack_Size+0x578>
     d28:	01018289 	smlabbeq	r1, r9, r2, r8
     d2c:	13310111 	teqne	r1, #1073741828	; 0x40000004
     d30:	00001301 	andeq	r1, r0, r1, lsl #6
     d34:	01828a1c 	orreq	r8, r2, ip, lsl sl
     d38:	91180200 	tstls	r8, r0, lsl #4
     d3c:	00001842 	andeq	r1, r0, r2, asr #16
     d40:	0182891d 	orreq	r8, r2, sp, lsl r9
     d44:	95011101 	strls	r1, [r1, #-257]	; 0x101
     d48:	13311942 	teqne	r1, #1081344	; 0x108000
     d4c:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
     d50:	03193f01 	tsteq	r9, #1, 30
     d54:	3b0b3a0e 	blcc	2cf594 <__Stack_Size+0x2ced94>
     d58:	20192705 	andscs	r2, r9, r5, lsl #14
     d5c:	0013010b 	andseq	r0, r3, fp, lsl #2
     d60:	00341f00 	eorseq	r1, r4, r0, lsl #30
     d64:	0b3a0803 	bleq	e82d78 <__Stack_Size+0xe82578>
     d68:	1349053b 	movtne	r0, #38203	; 0x953b
     d6c:	34200000 	strtcc	r0, [r0], #-0
     d70:	3a0e0300 	bcc	381978 <__Stack_Size+0x381178>
     d74:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d78:	21000013 	tstcs	r0, r3, lsl r0
     d7c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d80:	0b3a0e03 	bleq	e84594 <__Stack_Size+0xe83d94>
     d84:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d88:	01111349 	tsteq	r1, r9, asr #6
     d8c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d90:	01194297 			; <UNDEFINED> instruction: 0x01194297
     d94:	22000013 	andcs	r0, r0, #19
     d98:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     d9c:	0b3b0b3a 	bleq	ec3a8c <__Stack_Size+0xec328c>
     da0:	17021349 	strne	r1, [r2, -r9, asr #6]
     da4:	1d230000 	stcne	0, cr0, [r3, #-0]
     da8:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     dac:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     db0:	010b590b 	tsteq	fp, fp, lsl #18
     db4:	24000013 	strcs	r0, [r0], #-19
     db8:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
     dbc:	34250000 	strtcc	r0, [r5], #-0
     dc0:	02133100 	andseq	r3, r3, #0, 2
     dc4:	26000017 			; <UNDEFINED> instruction: 0x26000017
     dc8:	01018289 	smlabbeq	r1, r9, r2, r8
     dcc:	13310111 	teqne	r1, #1073741828	; 0x40000004
     dd0:	0b270000 	bleq	9c0dd8 <__Stack_Size+0x9c05d8>
     dd4:	01175501 	tsteq	r7, r1, lsl #10
     dd8:	28000013 	stmdacs	r0, {r0, r1, r4}
     ddc:	08030034 	stmdaeq	r3, {r2, r4, r5}
     de0:	0b3b0b3a 	bleq	ec3ad0 <__Stack_Size+0xec32d0>
     de4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     de8:	34290000 	strtcc	r0, [r9], #-0
     dec:	3a0e0300 	bcc	3819f4 <__Stack_Size+0x3811f4>
     df0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     df4:	00180213 	andseq	r0, r8, r3, lsl r2
     df8:	00342a00 	eorseq	r2, r4, r0, lsl #20
     dfc:	0b3a0e03 	bleq	e84610 <__Stack_Size+0xe83e10>
     e00:	1349053b 	movtne	r0, #38203	; 0x953b
     e04:	00001802 	andeq	r1, r0, r2, lsl #16
     e08:	0182892b 	orreq	r8, r2, fp, lsr #18
     e0c:	31011100 	mrscc	r1, (UNDEF: 17)
     e10:	2c000013 	stccs	0, cr0, [r0], {19}
     e14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     e18:	0b3a0e03 	bleq	e8462c <__Stack_Size+0xe83e2c>
     e1c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     e20:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e24:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     e28:	00130119 	andseq	r0, r3, r9, lsl r1
     e2c:	00342d00 	eorseq	r2, r4, r0, lsl #26
     e30:	0b3a0e03 	bleq	e84644 <__Stack_Size+0xe83e44>
     e34:	1349053b 	movtne	r0, #38203	; 0x953b
     e38:	00001702 	andeq	r1, r0, r2, lsl #14
     e3c:	0182892e 	orreq	r8, r2, lr, lsr #18
     e40:	95011100 	strls	r1, [r1, #-256]	; 0x100
     e44:	13311942 	teqne	r1, #1081344	; 0x108000
     e48:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
     e4c:	03193f00 	tsteq	r9, #0, 30
     e50:	3b0b3a0e 	blcc	2cf690 <__Stack_Size+0x2cee90>
     e54:	11192705 	tstne	r9, r5, lsl #14
     e58:	40061201 	andmi	r1, r6, r1, lsl #4
     e5c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     e60:	2e300000 	cdpcs	0, 3, cr0, cr0, cr0, {0}
     e64:	03193f01 	tsteq	r9, #1, 30
     e68:	3b0b3a0e 	blcc	2cf6a8 <__Stack_Size+0x2ceea8>
     e6c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     e70:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     e74:	97184006 	ldrls	r4, [r8, -r6]
     e78:	13011942 	movwne	r1, #6466	; 0x1942
     e7c:	05310000 	ldreq	r0, [r1, #-0]!
     e80:	3a0e0300 	bcc	381a88 <__Stack_Size+0x381288>
     e84:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e88:	00170213 	andseq	r0, r7, r3, lsl r2
     e8c:	012e3200 	teqeq	lr, r0, lsl #4
     e90:	01111331 	tsteq	r1, r1, lsr r3
     e94:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     e98:	01194297 			; <UNDEFINED> instruction: 0x01194297
     e9c:	33000013 	movwcc	r0, #19
     ea0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     ea4:	0b3a0e03 	bleq	e846b8 <__Stack_Size+0xe83eb8>
     ea8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     eac:	01111349 	tsteq	r1, r9, asr #6
     eb0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     eb4:	00194297 	mulseq	r9, r7, r2
     eb8:	00053400 	andeq	r3, r5, r0, lsl #8
     ebc:	0b3a0e03 	bleq	e846d0 <__Stack_Size+0xe83ed0>
     ec0:	1349053b 	movtne	r0, #38203	; 0x953b
     ec4:	00001802 	andeq	r1, r0, r2, lsl #16
     ec8:	3f002e35 	svccc	0x00002e35
     ecc:	3a0e0319 	bcc	381b38 <__Stack_Size+0x381338>
     ed0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ed4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     ed8:	97184006 	ldrls	r4, [r8, -r6]
     edc:	00001942 	andeq	r1, r0, r2, asr #18
     ee0:	3f002e36 	svccc	0x00002e36
     ee4:	3a0e0319 	bcc	381b50 <__Stack_Size+0x381350>
     ee8:	11053b0b 	tstne	r5, fp, lsl #22
     eec:	40061201 	andmi	r1, r6, r1, lsl #4
     ef0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ef4:	35370000 	ldrcc	r0, [r7, #-0]!
     ef8:	00134900 	andseq	r4, r3, r0, lsl #18
     efc:	00213800 	eoreq	r3, r1, r0, lsl #16
     f00:	052f1349 	streq	r1, [pc, #-841]!	; bbf <__Stack_Size+0x3bf>
     f04:	34390000 	ldrtcc	r0, [r9], #-0
     f08:	3a0e0300 	bcc	381b10 <__Stack_Size+0x381310>
     f0c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f10:	3c193f13 	ldccc	15, cr3, [r9], {19}
     f14:	3a000019 	bcc	f80 <__Stack_Size+0x780>
     f18:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f1c:	0b3b0b3a 	bleq	ec3c0c <__Stack_Size+0xec340c>
     f20:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     f24:	00001802 	andeq	r1, r0, r2, lsl #16
     f28:	0300343b 	movweq	r3, #1083	; 0x43b
     f2c:	3b0b3a08 	blcc	2cf754 <__Stack_Size+0x2cef54>
     f30:	3f13490b 	svccc	0x0013490b
     f34:	00180219 	andseq	r0, r8, r9, lsl r2
     f38:	012e3c00 	teqeq	lr, r0, lsl #24
     f3c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     f40:	0b3b0b3a 	bleq	ec3c30 <__Stack_Size+0xec3430>
     f44:	13491927 	movtne	r1, #39207	; 0x9927
     f48:	1301193c 	movwne	r1, #6460	; 0x193c
     f4c:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
     f50:	03193f01 	tsteq	r9, #1, 30
     f54:	3b0b3a0e 	blcc	2cf794 <__Stack_Size+0x2cef94>
     f58:	3c19270b 	ldccc	7, cr2, [r9], {11}
     f5c:	00130119 	andseq	r0, r3, r9, lsl r1
     f60:	012e3e00 	teqeq	lr, r0, lsl #28
     f64:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     f68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     f6c:	13491927 	movtne	r1, #39207	; 0x9927
     f70:	1301193c 	movwne	r1, #6460	; 0x193c
     f74:	2e3f0000 	cdpcs	0, 3, cr0, cr15, cr0, {0}
     f78:	03193f01 	tsteq	r9, #1, 30
     f7c:	3b0b3a0e 	blcc	2cf7bc <__Stack_Size+0x2cefbc>
     f80:	3c192705 	ldccc	7, cr2, [r9], {5}
     f84:	00130119 	andseq	r0, r3, r9, lsl r1
     f88:	00184000 	andseq	r4, r8, r0
     f8c:	2e410000 	cdpcs	0, 4, cr0, cr1, cr0, {0}
     f90:	03193f00 	tsteq	r9, #0, 30
     f94:	3b0b3a0e 	blcc	2cf7d4 <__Stack_Size+0x2cefd4>
     f98:	3c192705 	ldccc	7, cr2, [r9], {5}
     f9c:	42000019 	andmi	r0, r0, #25
     fa0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     fa4:	0b3a0e03 	bleq	e847b8 <__Stack_Size+0xe83fb8>
     fa8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     fac:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     fb0:	2e430000 	cdpcs	0, 4, cr0, cr3, cr0, {0}
     fb4:	03193f00 	tsteq	r9, #0, 30
     fb8:	3b0b3a0e 	blcc	2cf7f8 <__Stack_Size+0x2ceff8>
     fbc:	3c19270b 	ldccc	7, cr2, [r9], {11}
     fc0:	00000019 	andeq	r0, r0, r9, lsl r0
     fc4:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     fc8:	030b130e 	movweq	r1, #45838	; 0xb30e
     fcc:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     fd0:	10011117 	andne	r1, r1, r7, lsl r1
     fd4:	02000017 	andeq	r0, r0, #23
     fd8:	0b0b0024 	bleq	2c1070 <__Stack_Size+0x2c0870>
     fdc:	0e030b3e 	vmoveq.16	d3[0], r0
     fe0:	16030000 	strne	r0, [r3], -r0
     fe4:	3a0e0300 	bcc	381bec <__Stack_Size+0x3813ec>
     fe8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fec:	04000013 	streq	r0, [r0], #-19
     ff0:	0b0b0024 	bleq	2c1088 <__Stack_Size+0x2c0888>
     ff4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     ff8:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
     ffc:	3a0e0301 	bcc	381c08 <__Stack_Size+0x381408>
    1000:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1004:	010b2019 	tsteq	fp, r9, lsl r0
    1008:	06000013 			; <UNDEFINED> instruction: 0x06000013
    100c:	08030005 	stmdaeq	r3, {r0, r2}
    1010:	0b3b0b3a 	bleq	ec3d00 <__Stack_Size+0xec3500>
    1014:	00001349 	andeq	r1, r0, r9, asr #6
    1018:	0b000f07 	bleq	4c3c <__Stack_Size+0x443c>
    101c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1020:	00260800 	eoreq	r0, r6, r0, lsl #16
    1024:	00001349 	andeq	r1, r0, r9, asr #6
    1028:	03003409 	movweq	r3, #1033	; 0x409
    102c:	3b0b3a08 	blcc	2cf854 <__Stack_Size+0x2cf054>
    1030:	0013490b 	andseq	r4, r3, fp, lsl #18
    1034:	01010a00 	tsteq	r1, r0, lsl #20
    1038:	13011349 	movwne	r1, #4937	; 0x1349
    103c:	210b0000 	mrscs	r0, (UNDEF: 11)
    1040:	2f134900 	svccs	0x00134900
    1044:	0c00000b 	stceq	0, cr0, [r0], {11}
    1048:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    104c:	0b3b0b3a 	bleq	ec3d3c <__Stack_Size+0xec353c>
    1050:	00001349 	andeq	r1, r0, r9, asr #6
    1054:	3f012e0d 	svccc	0x00012e0d
    1058:	3a0e0319 	bcc	381cc4 <__Stack_Size+0x3814c4>
    105c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1060:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1064:	97184006 	ldrls	r4, [r8, -r6]
    1068:	13011942 	movwne	r1, #6466	; 0x1942
    106c:	050e0000 	streq	r0, [lr, #-0]
    1070:	3a0e0300 	bcc	381c78 <__Stack_Size+0x381478>
    1074:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1078:	00170213 	andseq	r0, r7, r3, lsl r2
    107c:	00050f00 	andeq	r0, r5, r0, lsl #30
    1080:	0b3a0803 	bleq	e83094 <__Stack_Size+0xe82894>
    1084:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1088:	00001702 	andeq	r1, r0, r2, lsl #14
    108c:	03003410 	movweq	r3, #1040	; 0x410
    1090:	3b0b3a08 	blcc	2cf8b8 <__Stack_Size+0x2cf0b8>
    1094:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1098:	11000018 	tstne	r0, r8, lsl r0
    109c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    10a0:	0b3b0b3a 	bleq	ec3d90 <__Stack_Size+0xec3590>
    10a4:	17021349 	strne	r1, [r2, -r9, asr #6]
    10a8:	1d120000 	ldcne	0, cr0, [r2, #-0]
    10ac:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    10b0:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    10b4:	010b590b 	tsteq	fp, fp, lsl #18
    10b8:	13000013 	movwne	r0, #19
    10bc:	13310005 	teqne	r1, #5
    10c0:	00001702 	andeq	r1, r0, r2, lsl #14
    10c4:	55010b14 	strpl	r0, [r1, #-2836]	; 0xb14
    10c8:	00130117 	andseq	r0, r3, r7, lsl r1
    10cc:	00051500 	andeq	r1, r5, r0, lsl #10
    10d0:	00001331 	andeq	r1, r0, r1, lsr r3
    10d4:	55010b16 	strpl	r0, [r1, #-2838]	; 0xb16
    10d8:	17000017 	smladne	r0, r7, r0, r0
    10dc:	13310034 	teqne	r1, #52	; 0x34
    10e0:	00001802 	andeq	r1, r0, r2, lsl #16
    10e4:	01828918 	orreq	r8, r2, r8, lsl r9
    10e8:	31011101 	tstcc	r1, r1, lsl #2
    10ec:	00130113 	andseq	r0, r3, r3, lsl r1
    10f0:	828a1900 	addhi	r1, sl, #0, 18
    10f4:	18020001 	stmdane	r2, {r0}
    10f8:	00184291 	mulseq	r8, r1, r2
    10fc:	82891a00 	addhi	r1, r9, #0, 20
    1100:	01110101 	tsteq	r1, r1, lsl #2
    1104:	00001331 	andeq	r1, r0, r1, lsr r3
    1108:	31011d1b 	tstcc	r1, fp, lsl sp
    110c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1110:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1114:	0013010b 	andseq	r0, r3, fp, lsl #2
    1118:	010b1c00 	tsteq	fp, r0, lsl #24
    111c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1120:	341d0000 	ldrcc	r0, [sp], #-0
    1124:	3a0e0300 	bcc	381d2c <__Stack_Size+0x38152c>
    1128:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    112c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1130:	1e000019 	mcrne	0, 0, r0, cr0, cr9, {0}
    1134:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1138:	0b3b0b3a 	bleq	ec3e28 <__Stack_Size+0xec3628>
    113c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1140:	00001802 	andeq	r1, r0, r2, lsl #16
    1144:	3f012e1f 	svccc	0x00012e1f
    1148:	3a0e0319 	bcc	381db4 <__Stack_Size+0x3815b4>
    114c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1150:	01193c19 	tsteq	r9, r9, lsl ip
    1154:	20000013 	andcs	r0, r0, r3, lsl r0
    1158:	13490005 	movtne	r0, #36869	; 0x9005
    115c:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
    1160:	03193f01 	tsteq	r9, #1, 30
    1164:	3b0b3a0e 	blcc	2cf9a4 <__Stack_Size+0x2cf1a4>
    1168:	3c19270b 	ldccc	7, cr2, [r9], {11}
    116c:	00000019 	andeq	r0, r0, r9, lsl r0
    1170:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    1174:	030b130e 	movweq	r1, #45838	; 0xb30e
    1178:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    117c:	10011117 	andne	r1, r1, r7, lsl r1
    1180:	02000017 	andeq	r0, r0, #23
    1184:	0b0b0024 	bleq	2c121c <__Stack_Size+0x2c0a1c>
    1188:	0e030b3e 	vmoveq.16	d3[0], r0
    118c:	16030000 	strne	r0, [r3], -r0
    1190:	3a0e0300 	bcc	381d98 <__Stack_Size+0x381598>
    1194:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1198:	04000013 	streq	r0, [r0], #-19
    119c:	0b0b0024 	bleq	2c1234 <__Stack_Size+0x2c0a34>
    11a0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    11a4:	0f050000 	svceq	0x00050000
    11a8:	000b0b00 	andeq	r0, fp, r0, lsl #22
    11ac:	01130600 	tsteq	r3, r0, lsl #12
    11b0:	0b0b0e03 	bleq	2c49c4 <__Stack_Size+0x2c41c4>
    11b4:	0b3b0b3a 	bleq	ec3ea4 <__Stack_Size+0xec36a4>
    11b8:	00001301 	andeq	r1, r0, r1, lsl #6
    11bc:	03000d07 	movweq	r0, #3335	; 0xd07
    11c0:	3b0b3a08 	blcc	2cf9e8 <__Stack_Size+0x2cf1e8>
    11c4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    11c8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    11cc:	13490101 	movtne	r0, #37121	; 0x9101
    11d0:	00001301 	andeq	r1, r0, r1, lsl #6
    11d4:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    11d8:	000b2f13 	andeq	r2, fp, r3, lsl pc
    11dc:	012e0a00 	teqeq	lr, r0, lsl #20
    11e0:	0b3a0e03 	bleq	e849f4 <__Stack_Size+0xe841f4>
    11e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    11e8:	13010b20 	movwne	r0, #6944	; 0x1b20
    11ec:	050b0000 	streq	r0, [fp, #-0]
    11f0:	3a080300 	bcc	201df8 <__Stack_Size+0x2015f8>
    11f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    11f8:	0c000013 	stceq	0, cr0, [r0], {19}
    11fc:	0b0b000f 	bleq	2c1240 <__Stack_Size+0x2c0a40>
    1200:	00001349 	andeq	r1, r0, r9, asr #6
    1204:	4900260d 	stmdbmi	r0, {r0, r2, r3, r9, sl, sp}
    1208:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    120c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1210:	0b3a0e03 	bleq	e84a24 <__Stack_Size+0xe84224>
    1214:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1218:	06120111 			; <UNDEFINED> instruction: 0x06120111
    121c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1220:	00130119 	andseq	r0, r3, r9, lsl r1
    1224:	00050f00 	andeq	r0, r5, r0, lsl #30
    1228:	0b3a0803 	bleq	e8323c <__Stack_Size+0xe82a3c>
    122c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1230:	00001702 	andeq	r1, r0, r2, lsl #14
    1234:	31011d10 	tstcc	r1, r0, lsl sp
    1238:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    123c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1240:	0013010b 	andseq	r0, r3, fp, lsl #2
    1244:	00051100 	andeq	r1, r5, r0, lsl #2
    1248:	17021331 	smladxne	r2, r1, r3, r1
    124c:	1d120000 	ldcne	0, cr0, [r2, #-0]
    1250:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1254:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    1258:	010b590b 	tsteq	fp, fp, lsl #18
    125c:	13000013 	movwne	r0, #19
    1260:	13310005 	teqne	r1, #5
    1264:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
    1268:	11010182 	smlabbne	r1, r2, r1, r0
    126c:	01133101 	tsteq	r3, r1, lsl #2
    1270:	15000013 	strne	r0, [r0, #-19]
    1274:	0001828a 	andeq	r8, r1, sl, lsl #5
    1278:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    127c:	16000018 			; <UNDEFINED> instruction: 0x16000018
    1280:	01018289 	smlabbeq	r1, r9, r2, r8
    1284:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    1288:	00133119 	andseq	r3, r3, r9, lsl r1
    128c:	00341700 	eorseq	r1, r4, r0, lsl #14
    1290:	0b3a0803 	bleq	e832a4 <__Stack_Size+0xe82aa4>
    1294:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1298:	00001802 	andeq	r1, r0, r2, lsl #16
    129c:	01828918 	orreq	r8, r2, r8, lsl r9
    12a0:	31011101 	tstcc	r1, r1, lsl #2
    12a4:	19000013 	stmdbne	r0, {r0, r1, r4}
    12a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    12ac:	0b3b0b3a 	bleq	ec3f9c <__Stack_Size+0xec379c>
    12b0:	17021349 	strne	r1, [r2, -r9, asr #6]
    12b4:	051a0000 	ldreq	r0, [sl, #-0]
    12b8:	02133100 	andseq	r3, r3, #0, 2
    12bc:	1b000018 	blne	1324 <__Stack_Size+0xb24>
    12c0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    12c4:	0b3a0e03 	bleq	e84ad8 <__Stack_Size+0xe842d8>
    12c8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    12cc:	01111349 	tsteq	r1, r9, asr #6
    12d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    12d4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    12d8:	1c000013 	stcne	0, cr0, [r0], {19}
    12dc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    12e0:	0b3b0b3a 	bleq	ec3fd0 <__Stack_Size+0xec37d0>
    12e4:	17021349 	strne	r1, [r2, -r9, asr #6]
    12e8:	341d0000 	ldrcc	r0, [sp], #-0
    12ec:	3a080300 	bcc	201ef4 <__Stack_Size+0x2016f4>
    12f0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    12f4:	00180213 	andseq	r0, r8, r3, lsl r2
    12f8:	012e1e00 	teqeq	lr, r0, lsl #28
    12fc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1300:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1304:	01111927 	tsteq	r1, r7, lsr #18
    1308:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    130c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1310:	1f000013 	svcne	0x00000013
    1314:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1318:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    131c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1320:	05200000 	streq	r0, [r0, #-0]!
    1324:	3a080300 	bcc	201f2c <__Stack_Size+0x20172c>
    1328:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    132c:	00170213 	andseq	r0, r7, r3, lsl r2
    1330:	00342100 	eorseq	r2, r4, r0, lsl #2
    1334:	0b3a0803 	bleq	e83348 <__Stack_Size+0xe82b48>
    1338:	1349053b 	movtne	r0, #38203	; 0x953b
    133c:	00001702 	andeq	r1, r0, r2, lsl #14
    1340:	31011d22 	tstcc	r1, r2, lsr #26
    1344:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1348:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    134c:	00130105 	andseq	r0, r3, r5, lsl #2
    1350:	010b2300 	mrseq	r2, (UNDEF: 59)
    1354:	13011755 	movwne	r1, #5973	; 0x1755
    1358:	1d240000 	stcne	0, cr0, [r4, #-0]
    135c:	11133101 	tstne	r3, r1, lsl #2
    1360:	58061201 	stmdapl	r6, {r0, r9, ip}
    1364:	0005590b 	andeq	r5, r5, fp, lsl #18
    1368:	00342500 	eorseq	r2, r4, r0, lsl #10
    136c:	0b3a0e03 	bleq	e84b80 <__Stack_Size+0xe84380>
    1370:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1374:	00001802 	andeq	r1, r0, r2, lsl #16
    1378:	03003426 	movweq	r3, #1062	; 0x426
    137c:	3b0b3a0e 	blcc	2cfbbc <__Stack_Size+0x2cf3bc>
    1380:	3f13490b 	svccc	0x0013490b
    1384:	00193c19 	andseq	r3, r9, r9, lsl ip
    1388:	00342700 	eorseq	r2, r4, r0, lsl #14
    138c:	0b3a0e03 	bleq	e84ba0 <__Stack_Size+0xe843a0>
    1390:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1394:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1398:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
    139c:	03193f01 	tsteq	r9, #1, 30
    13a0:	3b0b3a0e 	blcc	2cfbe0 <__Stack_Size+0x2cf3e0>
    13a4:	3c19270b 	ldccc	7, cr2, [r9], {11}
    13a8:	00130119 	andseq	r0, r3, r9, lsl r1
    13ac:	00052900 	andeq	r2, r5, r0, lsl #18
    13b0:	00001349 	andeq	r1, r0, r9, asr #6
    13b4:	3f012e2a 	svccc	0x00012e2a
    13b8:	3a0e0319 	bcc	382024 <__Stack_Size+0x381824>
    13bc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    13c0:	3c134919 	ldccc	9, cr4, [r3], {25}
    13c4:	00130119 	andseq	r0, r3, r9, lsl r1
    13c8:	012e2b00 	teqeq	lr, r0, lsl #22
    13cc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    13d0:	13491927 	movtne	r1, #39207	; 0x9927
    13d4:	193c1934 	ldmdbne	ip!, {r2, r4, r5, r8, fp, ip}
    13d8:	00001301 	andeq	r1, r0, r1, lsl #6
    13dc:	0000262c 	andeq	r2, r0, ip, lsr #12
    13e0:	11010000 	mrsne	r0, (UNDEF: 1)
    13e4:	130e2501 	movwne	r2, #58625	; 0xe501
    13e8:	1b0e030b 	blne	38201c <__Stack_Size+0x38181c>
    13ec:	1117550e 	tstne	r7, lr, lsl #10
    13f0:	00171001 	andseq	r1, r7, r1
    13f4:	00240200 	eoreq	r0, r4, r0, lsl #4
    13f8:	0b3e0b0b 	bleq	f8402c <__Stack_Size+0xf8382c>
    13fc:	00000e03 	andeq	r0, r0, r3, lsl #28
    1400:	03001603 	movweq	r1, #1539	; 0x603
    1404:	3b0b3a0e 	blcc	2cfc44 <__Stack_Size+0x2cf444>
    1408:	0013490b 	andseq	r4, r3, fp, lsl #18
    140c:	00240400 	eoreq	r0, r4, r0, lsl #8
    1410:	0b3e0b0b 	bleq	f84044 <__Stack_Size+0xf83844>
    1414:	00000803 	andeq	r0, r0, r3, lsl #16
    1418:	0b000f05 	bleq	5034 <__Stack_Size+0x4834>
    141c:	0600000b 	streq	r0, [r0], -fp
    1420:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1424:	0b3a0b0b 	bleq	e84058 <__Stack_Size+0xe83858>
    1428:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    142c:	0d070000 	stceq	0, cr0, [r7, #-0]
    1430:	3a080300 	bcc	202038 <__Stack_Size+0x201838>
    1434:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1438:	000b3813 	andeq	r3, fp, r3, lsl r8
    143c:	01010800 	tsteq	r1, r0, lsl #16
    1440:	13011349 	movwne	r1, #4937	; 0x1349
    1444:	21090000 	mrscs	r0, (UNDEF: 9)
    1448:	2f134900 	svccs	0x00134900
    144c:	0a00000b 	beq	1480 <__Stack_Size+0xc80>
    1450:	0e03012e 	adfeqsp	f0, f3, #0.5
    1454:	0b3b0b3a 	bleq	ec4144 <__Stack_Size+0xec3944>
    1458:	0b201927 	bleq	8078fc <__Stack_Size+0x8070fc>
    145c:	00001301 	andeq	r1, r0, r1, lsl #6
    1460:	0300050b 	movweq	r0, #1291	; 0x50b
    1464:	3b0b3a08 	blcc	2cfc8c <__Stack_Size+0x2cf48c>
    1468:	0013490b 	andseq	r4, r3, fp, lsl #18
    146c:	000f0c00 	andeq	r0, pc, r0, lsl #24
    1470:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1474:	050d0000 	streq	r0, [sp, #-0]
    1478:	3a0e0300 	bcc	382080 <__Stack_Size+0x381880>
    147c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1480:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1484:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1488:	0b3b0b3a 	bleq	ec4178 <__Stack_Size+0xec3978>
    148c:	00001349 	andeq	r1, r0, r9, asr #6
    1490:	00010b0f 	andeq	r0, r1, pc, lsl #22
    1494:	00261000 	eoreq	r1, r6, r0
    1498:	00001349 	andeq	r1, r0, r9, asr #6
    149c:	03012e11 	movweq	r2, #7697	; 0x1e11
    14a0:	3b0b3a08 	blcc	2cfcc8 <__Stack_Size+0x2cf4c8>
    14a4:	2019270b 	andscs	r2, r9, fp, lsl #14
    14a8:	0013010b 	andseq	r0, r3, fp, lsl #2
    14ac:	012e1200 	teqeq	lr, r0, lsl #4
    14b0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    14b4:	0b3b0b3a 	bleq	ec41a4 <__Stack_Size+0xec39a4>
    14b8:	01111927 	tsteq	r1, r7, lsr #18
    14bc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    14c0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    14c4:	13000013 	movwne	r0, #19
    14c8:	08030005 	stmdaeq	r3, {r0, r2}
    14cc:	0b3b0b3a 	bleq	ec41bc <__Stack_Size+0xec39bc>
    14d0:	17021349 	strne	r1, [r2, -r9, asr #6]
    14d4:	05140000 	ldreq	r0, [r4, #-0]
    14d8:	3a0e0300 	bcc	3820e0 <__Stack_Size+0x3818e0>
    14dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    14e0:	00170213 	andseq	r0, r7, r3, lsl r2
    14e4:	00341500 	eorseq	r1, r4, r0, lsl #10
    14e8:	0b3a0e03 	bleq	e84cfc <__Stack_Size+0xe844fc>
    14ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    14f0:	00001802 	andeq	r1, r0, r2, lsl #16
    14f4:	31011d16 	tstcc	r1, r6, lsl sp
    14f8:	55015213 	strpl	r5, [r1, #-531]	; 0x213
    14fc:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    1500:	0013010b 	andseq	r0, r3, fp, lsl #2
    1504:	00051700 	andeq	r1, r5, r0, lsl #14
    1508:	17021331 	smladxne	r2, r1, r3, r1
    150c:	0b180000 	bleq	601514 <__Stack_Size+0x600d14>
    1510:	00175501 	andseq	r5, r7, r1, lsl #10
    1514:	00341900 	eorseq	r1, r4, r0, lsl #18
    1518:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    151c:	891a0000 	ldmdbhi	sl, {}	; <UNPREDICTABLE>
    1520:	11010182 	smlabbne	r1, r2, r1, r0
    1524:	01133101 	tsteq	r3, r1, lsl #2
    1528:	1b000013 	blne	157c <__Stack_Size+0xd7c>
    152c:	0001828a 	andeq	r8, r1, sl, lsl #5
    1530:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    1534:	1c000018 	stcne	0, cr0, [r0], {24}
    1538:	01018289 	smlabbeq	r1, r9, r2, r8
    153c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1540:	1d1d0000 	ldcne	0, cr0, [sp, #-0]
    1544:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1548:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    154c:	000b590b 	andeq	r5, fp, fp, lsl #18
    1550:	011d1e00 	tsteq	sp, r0, lsl #28
    1554:	01111331 	tsteq	r1, r1, lsr r3
    1558:	0b580612 	bleq	1602da8 <__Stack_Size+0x16025a8>
    155c:	13010b59 	movwne	r0, #7001	; 0x1b59
    1560:	0b1f0000 	bleq	7c1568 <__Stack_Size+0x7c0d68>
    1564:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    1568:	20000006 	andcs	r0, r0, r6
    156c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1570:	0b3b0b3a 	bleq	ec4260 <__Stack_Size+0xec3a60>
    1574:	00001349 	andeq	r1, r0, r9, asr #6
    1578:	03012e21 	movweq	r2, #7713	; 0x1e21
    157c:	3b0b3a08 	blcc	2cfda4 <__Stack_Size+0x2cf5a4>
    1580:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1584:	010b2013 	tsteq	fp, r3, lsl r0
    1588:	22000013 	andcs	r0, r0, #19
    158c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1590:	0b3a0e03 	bleq	e84da4 <__Stack_Size+0xe845a4>
    1594:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1598:	01111349 	tsteq	r1, r9, asr #6
    159c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    15a0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    15a4:	23000013 	movwcs	r0, #19
    15a8:	08030034 	stmdaeq	r3, {r2, r4, r5}
    15ac:	0b3b0b3a 	bleq	ec429c <__Stack_Size+0xec3a9c>
    15b0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    15b4:	34240000 	strtcc	r0, [r4], #-0
    15b8:	3a080300 	bcc	2021c0 <__Stack_Size+0x2019c0>
    15bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15c0:	00170213 	andseq	r0, r7, r3, lsl r2
    15c4:	00052500 	andeq	r2, r5, r0, lsl #10
    15c8:	0b1c1331 	bleq	706294 <__Stack_Size+0x705a94>
    15cc:	05260000 	streq	r0, [r6, #-0]!
    15d0:	02133100 	andseq	r3, r3, #0, 2
    15d4:	27000018 	smladcs	r0, r8, r0, r0
    15d8:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    15dc:	00001301 	andeq	r1, r0, r1, lsl #6
    15e0:	31003428 	tstcc	r0, r8, lsr #8
    15e4:	00170213 	andseq	r0, r7, r3, lsl r2
    15e8:	00342900 	eorseq	r2, r4, r0, lsl #18
    15ec:	0b3a0e03 	bleq	e84e00 <__Stack_Size+0xe84600>
    15f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    15f4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    15f8:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
    15fc:	03193f01 	tsteq	r9, #1, 30
    1600:	3b0b3a0e 	blcc	2cfe40 <__Stack_Size+0x2cf640>
    1604:	3c19270b 	ldccc	7, cr2, [r9], {11}
    1608:	00130119 	andseq	r0, r3, r9, lsl r1
    160c:	00052b00 	andeq	r2, r5, r0, lsl #22
    1610:	00001349 	andeq	r1, r0, r9, asr #6
    1614:	3f012e2c 	svccc	0x00012e2c
    1618:	270e0319 	smladcs	lr, r9, r3, r0
    161c:	34134919 	ldrcc	r4, [r3], #-2329	; 0x919
    1620:	01193c19 	tsteq	r9, r9, lsl ip
    1624:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
    1628:	00000026 	andeq	r0, r0, r6, lsr #32
    162c:	3f012e2e 	svccc	0x00012e2e
    1630:	3a0e0319 	bcc	38229c <__Stack_Size+0x381a9c>
    1634:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1638:	3c134919 	ldccc	9, cr4, [r3], {25}
    163c:	00130119 	andseq	r0, r3, r9, lsl r1
    1640:	012e2f00 	teqeq	lr, r0, lsl #30
    1644:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1648:	0b3b0b3a 	bleq	ec4338 <__Stack_Size+0xec3b38>
    164c:	13491927 	movtne	r1, #39207	; 0x9927
    1650:	0000193c 	andeq	r1, r0, ip, lsr r9
    1654:	01110100 	tsteq	r1, r0, lsl #2
    1658:	0b130e25 	bleq	4c4ef4 <__Stack_Size+0x4c46f4>
    165c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1660:	01111755 	tsteq	r1, r5, asr r7
    1664:	00001710 	andeq	r1, r0, r0, lsl r7
    1668:	0b002402 	bleq	a678 <__Stack_Size+0x9e78>
    166c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1670:	0300000e 	movweq	r0, #14
    1674:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1678:	0b3b0b3a 	bleq	ec4368 <__Stack_Size+0xec3b68>
    167c:	00001349 	andeq	r1, r0, r9, asr #6
    1680:	0b002404 	bleq	a698 <__Stack_Size+0x9e98>
    1684:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1688:	05000008 	streq	r0, [r0, #-8]
    168c:	0b0b000f 	bleq	2c16d0 <__Stack_Size+0x2c0ed0>
    1690:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    1694:	03193f01 	tsteq	r9, #1, 30
    1698:	3b0b3a0e 	blcc	2cfed8 <__Stack_Size+0x2cf6d8>
    169c:	2019270b 	andscs	r2, r9, fp, lsl #14
    16a0:	0013010b 	andseq	r0, r3, fp, lsl #2
    16a4:	00050700 	andeq	r0, r5, r0, lsl #14
    16a8:	0b3a0803 	bleq	e836bc <__Stack_Size+0xe82ebc>
    16ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    16b0:	05080000 	streq	r0, [r8, #-0]
    16b4:	3a0e0300 	bcc	3822bc <__Stack_Size+0x381abc>
    16b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    16bc:	09000013 	stmdbeq	r0, {r0, r1, r4}
    16c0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    16c4:	0b3b0b3a 	bleq	ec43b4 <__Stack_Size+0xec3bb4>
    16c8:	00001349 	andeq	r1, r0, r9, asr #6
    16cc:	0300340a 	movweq	r3, #1034	; 0x40a
    16d0:	3b0b3a08 	blcc	2cfef8 <__Stack_Size+0x2cf6f8>
    16d4:	0013490b 	andseq	r4, r3, fp, lsl #18
    16d8:	000f0b00 	andeq	r0, pc, r0, lsl #22
    16dc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    16e0:	260c0000 	strcs	r0, [ip], -r0
    16e4:	00134900 	andseq	r4, r3, r0, lsl #18
    16e8:	012e0d00 	teqeq	lr, r0, lsl #26
    16ec:	0b3a0e03 	bleq	e84f00 <__Stack_Size+0xe84700>
    16f0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    16f4:	13010b20 	movwne	r0, #6944	; 0x1b20
    16f8:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    16fc:	11133101 	tstne	r3, r1, lsl #2
    1700:	40061201 	andmi	r1, r6, r1, lsl #4
    1704:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1708:	00001301 	andeq	r1, r0, r1, lsl #6
    170c:	3100050f 	tstcc	r0, pc, lsl #10
    1710:	00170213 	andseq	r0, r7, r3, lsl r2
    1714:	00341000 	eorseq	r1, r4, r0
    1718:	17021331 	smladxne	r2, r1, r3, r1
    171c:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
    1720:	11010182 	smlabbne	r1, r2, r1, r0
    1724:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    1728:	00001331 	andeq	r1, r0, r1, lsr r3
    172c:	01828a12 	orreq	r8, r2, r2, lsl sl
    1730:	91180200 	tstls	r8, r0, lsl #4
    1734:	00001842 	andeq	r1, r0, r2, asr #16
    1738:	3f012e13 	svccc	0x00012e13
    173c:	3a0e0319 	bcc	3823a8 <__Stack_Size+0x381ba8>
    1740:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1744:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1748:	97184006 	ldrls	r4, [r8, -r6]
    174c:	13011942 	movwne	r1, #6466	; 0x1942
    1750:	05140000 	ldreq	r0, [r4, #-0]
    1754:	3a080300 	bcc	20235c <__Stack_Size+0x201b5c>
    1758:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    175c:	00180213 	andseq	r0, r8, r3, lsl r2
    1760:	00341500 	eorseq	r1, r4, r0, lsl #10
    1764:	0b3a0e03 	bleq	e84f78 <__Stack_Size+0xe84778>
    1768:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    176c:	00001802 	andeq	r1, r0, r2, lsl #16
    1770:	03003416 	movweq	r3, #1046	; 0x416
    1774:	3b0b3a08 	blcc	2cff9c <__Stack_Size+0x2cf79c>
    1778:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    177c:	17000017 	smladne	r0, r7, r0, r0
    1780:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1784:	17550152 			; <UNDEFINED> instruction: 0x17550152
    1788:	0b590b58 	bleq	16444f0 <__Stack_Size+0x1643cf0>
    178c:	05180000 	ldreq	r0, [r8, #-0]
    1790:	02133100 	andseq	r3, r3, #0, 2
    1794:	19000018 	stmdbne	r0, {r3, r4}
    1798:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    179c:	341a0000 	ldrcc	r0, [sl], #-0
    17a0:	02133100 	andseq	r3, r3, #0, 2
    17a4:	1b000018 	blne	180c <__Stack_Size+0x100c>
    17a8:	13490101 	movtne	r0, #37121	; 0x9101
    17ac:	00001301 	andeq	r1, r0, r1, lsl #6
    17b0:	4900211c 	stmdbmi	r0, {r2, r3, r4, r8, sp}
    17b4:	000b2f13 	andeq	r2, fp, r3, lsl pc
    17b8:	012e1d00 	teqeq	lr, r0, lsl #26
    17bc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    17c0:	0b3b0b3a 	bleq	ec44b0 <__Stack_Size+0xec3cb0>
    17c4:	13491927 	movtne	r1, #39207	; 0x9927
    17c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    17cc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    17d0:	00130119 	andseq	r0, r3, r9, lsl r1
    17d4:	00051e00 	andeq	r1, r5, r0, lsl #28
    17d8:	0b3a0803 	bleq	e837ec <__Stack_Size+0xe82fec>
    17dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    17e0:	00001702 	andeq	r1, r0, r2, lsl #14
    17e4:	00010b1f 	andeq	r0, r1, pc, lsl fp
    17e8:	010b2000 	mrseq	r2, (UNDEF: 11)
    17ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
    17f0:	34210000 	strtcc	r0, [r1], #-0
    17f4:	3a080300 	bcc	2023fc <__Stack_Size+0x201bfc>
    17f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    17fc:	00180213 	andseq	r0, r8, r3, lsl r2
    1800:	011d2200 	tsteq	sp, r0, lsl #4
    1804:	01521331 	cmpeq	r2, r1, lsr r3
    1808:	0b581755 	bleq	1607564 <__Stack_Size+0x1606d64>
    180c:	13010b59 	movwne	r0, #7001	; 0x1b59
    1810:	1d230000 	stcne	0, cr0, [r3, #-0]
    1814:	11133101 	tstne	r3, r1, lsl #2
    1818:	58061201 	stmdapl	r6, {r0, r9, ip}
    181c:	000b590b 	andeq	r5, fp, fp, lsl #18
    1820:	00052400 	andeq	r2, r5, r0, lsl #8
    1824:	00001331 	andeq	r1, r0, r1, lsr r3
    1828:	31011d25 	tstcc	r1, r5, lsr #26
    182c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1830:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1834:	0013010b 	andseq	r0, r3, fp, lsl #2
    1838:	011d2600 	tsteq	sp, r0, lsl #12
    183c:	01111331 	tsteq	r1, r1, lsr r3
    1840:	0b580612 	bleq	1603090 <__Stack_Size+0x1602890>
    1844:	13010559 	movwne	r0, #5465	; 0x1559
    1848:	1d270000 	stcne	0, cr0, [r7, #-0]
    184c:	11133101 	tstne	r3, r1, lsl #2
    1850:	58061201 	stmdapl	r6, {r0, r9, ip}
    1854:	0005590b 	andeq	r5, r5, fp, lsl #18
    1858:	012e2800 	teqeq	lr, r0, lsl #16
    185c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1860:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1864:	01111927 	tsteq	r1, r7, lsr #18
    1868:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    186c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1870:	29000013 	stmdbcs	r0, {r0, r1, r4}
    1874:	08030005 	stmdaeq	r3, {r0, r2}
    1878:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    187c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1880:	342a0000 	strtcc	r0, [sl], #-0
    1884:	3a080300 	bcc	20248c <__Stack_Size+0x201c8c>
    1888:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    188c:	00180213 	andseq	r0, r8, r3, lsl r2
    1890:	82892b00 	addhi	r2, r9, #0, 22
    1894:	01110101 	tsteq	r1, r1, lsl #2
    1898:	00001331 	andeq	r1, r0, r1, lsr r3
    189c:	03012e2c 	movweq	r2, #7724	; 0x1e2c
    18a0:	3b0b3a0e 	blcc	2d00e0 <__Stack_Size+0x2cf8e0>
    18a4:	20192705 	andscs	r2, r9, r5, lsl #14
    18a8:	0013010b 	andseq	r0, r3, fp, lsl #2
    18ac:	00052d00 	andeq	r2, r5, r0, lsl #26
    18b0:	0b3a0803 	bleq	e838c4 <__Stack_Size+0xe830c4>
    18b4:	1349053b 	movtne	r0, #38203	; 0x953b
    18b8:	342e0000 	strtcc	r0, [lr], #-0
    18bc:	3a080300 	bcc	2024c4 <__Stack_Size+0x201cc4>
    18c0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    18c4:	2f000013 	svccs	0x00000013
    18c8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    18cc:	17550152 			; <UNDEFINED> instruction: 0x17550152
    18d0:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    18d4:	00001301 	andeq	r1, r0, r1, lsl #6
    18d8:	31000530 	tstcc	r0, r0, lsr r5
    18dc:	000b1c13 	andeq	r1, fp, r3, lsl ip
    18e0:	00343100 	eorseq	r3, r4, r0, lsl #2
    18e4:	00001331 	andeq	r1, r0, r1, lsr r3
    18e8:	03003432 	movweq	r3, #1074	; 0x432
    18ec:	3b0b3a0e 	blcc	2d012c <__Stack_Size+0x2cf92c>
    18f0:	3f13490b 	svccc	0x0013490b
    18f4:	00180219 	andseq	r0, r8, r9, lsl r2
    18f8:	012e3300 	teqeq	lr, r0, lsl #6
    18fc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1900:	13491927 	movtne	r1, #39207	; 0x9927
    1904:	193c1934 	ldmdbne	ip!, {r2, r4, r5, r8, fp, ip}
    1908:	05340000 	ldreq	r0, [r4, #-0]!
    190c:	00134900 	andseq	r4, r3, r0, lsl #18
    1910:	11010000 	mrsne	r0, (UNDEF: 1)
    1914:	130e2501 	movwne	r2, #58625	; 0xe501
    1918:	1b0e030b 	blne	38254c <__Stack_Size+0x381d4c>
    191c:	1117550e 	tstne	r7, lr, lsl #10
    1920:	00171001 	andseq	r1, r7, r1
    1924:	00240200 	eoreq	r0, r4, r0, lsl #4
    1928:	0b3e0b0b 	bleq	f8455c <__Stack_Size+0xf83d5c>
    192c:	00000e03 	andeq	r0, r0, r3, lsl #28
    1930:	03001603 	movweq	r1, #1539	; 0x603
    1934:	3b0b3a0e 	blcc	2d0174 <__Stack_Size+0x2cf974>
    1938:	0013490b 	andseq	r4, r3, fp, lsl #18
    193c:	00240400 	eoreq	r0, r4, r0, lsl #8
    1940:	0b3e0b0b 	bleq	f84574 <__Stack_Size+0xf83d74>
    1944:	00000803 	andeq	r0, r0, r3, lsl #16
    1948:	0b000f05 	bleq	5564 <__Stack_Size+0x4d64>
    194c:	0600000b 	streq	r0, [r0], -fp
    1950:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1954:	0b3a0e03 	bleq	e85168 <__Stack_Size+0xe84968>
    1958:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    195c:	13010b20 	movwne	r0, #6944	; 0x1b20
    1960:	05070000 	streq	r0, [r7, #-0]
    1964:	3a080300 	bcc	20256c <__Stack_Size+0x201d6c>
    1968:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    196c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1970:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1974:	0b3b0b3a 	bleq	ec4664 <__Stack_Size+0xec3e64>
    1978:	00001349 	andeq	r1, r0, r9, asr #6
    197c:	03003409 	movweq	r3, #1033	; 0x409
    1980:	3b0b3a0e 	blcc	2d01c0 <__Stack_Size+0x2cf9c0>
    1984:	0013490b 	andseq	r4, r3, fp, lsl #18
    1988:	00340a00 	eorseq	r0, r4, r0, lsl #20
    198c:	0b3a0803 	bleq	e839a0 <__Stack_Size+0xe831a0>
    1990:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1994:	0f0b0000 	svceq	0x000b0000
    1998:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    199c:	0c000013 	stceq	0, cr0, [r0], {19}
    19a0:	13490026 	movtne	r0, #36902	; 0x9026
    19a4:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    19a8:	3a0e0301 	bcc	3825b4 <__Stack_Size+0x381db4>
    19ac:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    19b0:	20134919 	andscs	r4, r3, r9, lsl r9
    19b4:	0013010b 	andseq	r0, r3, fp, lsl #2
    19b8:	012e0e00 	teqeq	lr, r0, lsl #28
    19bc:	0b3a0e03 	bleq	e851d0 <__Stack_Size+0xe849d0>
    19c0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    19c4:	13010b20 	movwne	r0, #6944	; 0x1b20
    19c8:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    19cc:	11133101 	tstne	r3, r1, lsl #2
    19d0:	40061201 	andmi	r1, r6, r1, lsl #4
    19d4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    19d8:	00001301 	andeq	r1, r0, r1, lsl #6
    19dc:	31000510 	tstcc	r0, r0, lsl r5
    19e0:	00170213 	andseq	r0, r7, r3, lsl r2
    19e4:	00341100 	eorseq	r1, r4, r0, lsl #2
    19e8:	17021331 	smladxne	r2, r1, r3, r1
    19ec:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
    19f0:	11010182 	smlabbne	r1, r2, r1, r0
    19f4:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    19f8:	00001331 	andeq	r1, r0, r1, lsr r3
    19fc:	01828a13 	orreq	r8, r2, r3, lsl sl
    1a00:	91180200 	tstls	r8, r0, lsl #4
    1a04:	00001842 	andeq	r1, r0, r2, asr #16
    1a08:	49010114 	stmdbmi	r1, {r2, r4, r8}
    1a0c:	00130113 	andseq	r0, r3, r3, lsl r1
    1a10:	00211500 	eoreq	r1, r1, r0, lsl #10
    1a14:	0b2f1349 	bleq	bc6740 <__Stack_Size+0xbc5f40>
    1a18:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    1a1c:	03193f01 	tsteq	r9, #1, 30
    1a20:	3b0b3a0e 	blcc	2d0260 <__Stack_Size+0x2cfa60>
    1a24:	1119270b 	tstne	r9, fp, lsl #14
    1a28:	40061201 	andmi	r1, r6, r1, lsl #4
    1a2c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1a30:	00001301 	andeq	r1, r0, r1, lsl #6
    1a34:	03000517 	movweq	r0, #1303	; 0x517
    1a38:	3b0b3a08 	blcc	2d0260 <__Stack_Size+0x2cfa60>
    1a3c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1a40:	18000017 	stmdane	r0, {r0, r1, r2, r4}
    1a44:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1a48:	0b3b0b3a 	bleq	ec4738 <__Stack_Size+0xec3f38>
    1a4c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1a50:	34190000 	ldrcc	r0, [r9], #-0
    1a54:	3a0e0300 	bcc	38265c <__Stack_Size+0x381e5c>
    1a58:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a5c:	00170213 	andseq	r0, r7, r3, lsl r2
    1a60:	00341a00 	eorseq	r1, r4, r0, lsl #20
    1a64:	0b3a0803 	bleq	e83a78 <__Stack_Size+0xe83278>
    1a68:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1a6c:	00001702 	andeq	r1, r0, r2, lsl #14
    1a70:	31011d1b 	tstcc	r1, fp, lsl sp
    1a74:	55015213 	strpl	r5, [r1, #-531]	; 0x213
    1a78:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    1a7c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1a80:	010b1c00 	tsteq	fp, r0, lsl #24
    1a84:	00001755 	andeq	r1, r0, r5, asr r7
    1a88:	31011d1d 	tstcc	r1, sp, lsl sp
    1a8c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1a90:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1a94:	0013010b 	andseq	r0, r3, fp, lsl #2
    1a98:	00051e00 	andeq	r1, r5, r0, lsl #28
    1a9c:	00001331 	andeq	r1, r0, r1, lsr r3
    1aa0:	11010b1f 	tstne	r1, pc, lsl fp
    1aa4:	00061201 	andeq	r1, r6, r1, lsl #4
    1aa8:	010b2000 	mrseq	r2, (UNDEF: 11)
    1aac:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1ab0:	00001301 	andeq	r1, r0, r1, lsl #6
    1ab4:	31011d21 	tstcc	r1, r1, lsr #26
    1ab8:	55015213 	strpl	r5, [r1, #-531]	; 0x213
    1abc:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    1ac0:	2200000b 	andcs	r0, r0, #11
    1ac4:	13310034 	teqne	r1, #52	; 0x34
    1ac8:	00001802 	andeq	r1, r0, r2, lsl #16
    1acc:	31011d23 	tstcc	r1, r3, lsr #26
    1ad0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1ad4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1ad8:	2400000b 	strcs	r0, [r0], #-11
    1adc:	01018289 	smlabbeq	r1, r9, r2, r8
    1ae0:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1ae4:	34250000 	strtcc	r0, [r5], #-0
    1ae8:	3a080300 	bcc	2026f0 <__Stack_Size+0x201ef0>
    1aec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1af0:	00180213 	andseq	r0, r8, r3, lsl r2
    1af4:	00052600 	andeq	r2, r5, r0, lsl #12
    1af8:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    1afc:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
    1b00:	03193f01 	tsteq	r9, #1, 30
    1b04:	3b0b3a0e 	blcc	2d0344 <__Stack_Size+0x2cfb44>
    1b08:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1b0c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1b10:	97184006 	ldrls	r4, [r8, -r6]
    1b14:	13011942 	movwne	r1, #6466	; 0x1942
    1b18:	05280000 	streq	r0, [r8, #-0]!
    1b1c:	3a080300 	bcc	202724 <__Stack_Size+0x201f24>
    1b20:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b24:	00180213 	andseq	r0, r8, r3, lsl r2
    1b28:	00342900 	eorseq	r2, r4, r0, lsl #18
    1b2c:	0b3a0e03 	bleq	e85340 <__Stack_Size+0xe84b40>
    1b30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1b34:	00001802 	andeq	r1, r0, r2, lsl #16
    1b38:	55010b2a 	strpl	r0, [r1, #-2858]	; 0xb2a
    1b3c:	00130117 	andseq	r0, r3, r7, lsl r1
    1b40:	82892b00 	addhi	r2, r9, #0, 22
    1b44:	01110101 	tsteq	r1, r1, lsl #2
    1b48:	13011331 	movwne	r1, #4913	; 0x1331
    1b4c:	342c0000 	strtcc	r0, [ip], #-0
    1b50:	3a0e0300 	bcc	382758 <__Stack_Size+0x381f58>
    1b54:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b58:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    1b5c:	2d000018 	stccs	0, cr0, [r0, #-96]	; 0xffffffa0
    1b60:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1b64:	19270e03 	stmdbne	r7!, {r0, r1, r9, sl, fp}
    1b68:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
    1b6c:	0000193c 	andeq	r1, r0, ip, lsr r9
    1b70:	4900052e 	stmdbmi	r0, {r1, r2, r3, r5, r8, sl}
    1b74:	00000013 	andeq	r0, r0, r3, lsl r0
    1b78:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    1b7c:	030b130e 	movweq	r1, #45838	; 0xb30e
    1b80:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    1b84:	10011117 	andne	r1, r1, r7, lsl r1
    1b88:	02000017 	andeq	r0, r0, #23
    1b8c:	0b0b0024 	bleq	2c1c24 <__Stack_Size+0x2c1424>
    1b90:	0e030b3e 	vmoveq.16	d3[0], r0
    1b94:	16030000 	strne	r0, [r3], -r0
    1b98:	3a0e0300 	bcc	3827a0 <__Stack_Size+0x381fa0>
    1b9c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ba0:	04000013 	streq	r0, [r0], #-19
    1ba4:	0b0b0024 	bleq	2c1c3c <__Stack_Size+0x2c143c>
    1ba8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1bac:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    1bb0:	03193f01 	tsteq	r9, #1, 30
    1bb4:	3b0b3a0e 	blcc	2d03f4 <__Stack_Size+0x2cfbf4>
    1bb8:	1119270b 	tstne	r9, fp, lsl #14
    1bbc:	40061201 	andmi	r1, r6, r1, lsl #4
    1bc0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1bc4:	00001301 	andeq	r1, r0, r1, lsl #6
    1bc8:	03000506 	movweq	r0, #1286	; 0x506
    1bcc:	3b0b3a0e 	blcc	2d040c <__Stack_Size+0x2cfc0c>
    1bd0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1bd4:	07000017 	smladeq	r0, r7, r0, r0
    1bd8:	08030005 	stmdaeq	r3, {r0, r2}
    1bdc:	0b3b0b3a 	bleq	ec48cc <__Stack_Size+0xec40cc>
    1be0:	17021349 	strne	r1, [r2, -r9, asr #6]
    1be4:	34080000 	strcc	r0, [r8], #-0
    1be8:	3a0e0300 	bcc	3827f0 <__Stack_Size+0x381ff0>
    1bec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1bf0:	00180213 	andseq	r0, r8, r3, lsl r2
    1bf4:	82890900 	addhi	r0, r9, #0, 18
    1bf8:	01110101 	tsteq	r1, r1, lsl #2
    1bfc:	13011331 	movwne	r1, #4913	; 0x1331
    1c00:	8a0a0000 	bhi	281c08 <__Stack_Size+0x281408>
    1c04:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    1c08:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    1c0c:	890b0000 	stmdbhi	fp, {}	; <UNPREDICTABLE>
    1c10:	11010182 	smlabbne	r1, r2, r1, r0
    1c14:	00133101 	andseq	r3, r3, r1, lsl #2
    1c18:	000f0c00 	andeq	r0, pc, r0, lsl #24
    1c1c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1c20:	260d0000 	strcs	r0, [sp], -r0
    1c24:	00134900 	andseq	r4, r3, r0, lsl #18
    1c28:	01010e00 	tsteq	r1, r0, lsl #28
    1c2c:	13011349 	movwne	r1, #4937	; 0x1349
    1c30:	210f0000 	mrscs	r0, CPSR
    1c34:	2f134900 	svccs	0x00134900
    1c38:	1000000b 	andne	r0, r0, fp
    1c3c:	0e03012e 	adfeqsp	f0, f3, #0.5
    1c40:	0b3b0b3a 	bleq	ec4930 <__Stack_Size+0xec4130>
    1c44:	0b201927 	bleq	8080e8 <__Stack_Size+0x8078e8>
    1c48:	00001301 	andeq	r1, r0, r1, lsl #6
    1c4c:	03000511 	movweq	r0, #1297	; 0x511
    1c50:	3b0b3a08 	blcc	2d0478 <__Stack_Size+0x2cfc78>
    1c54:	0013490b 	andseq	r4, r3, fp, lsl #18
    1c58:	00341200 	eorseq	r1, r4, r0, lsl #4
    1c5c:	0b3a0803 	bleq	e83c70 <__Stack_Size+0xe83470>
    1c60:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1c64:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    1c68:	3a0e0301 	bcc	382874 <__Stack_Size+0x382074>
    1c6c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1c70:	20134919 	andscs	r4, r3, r9, lsl r9
    1c74:	0013010b 	andseq	r0, r3, fp, lsl #2
    1c78:	00051400 	andeq	r1, r5, r0, lsl #8
    1c7c:	0b3a0e03 	bleq	e85490 <__Stack_Size+0xe84c90>
    1c80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1c84:	34150000 	ldrcc	r0, [r5], #-0
    1c88:	3a080300 	bcc	202890 <__Stack_Size+0x202090>
    1c8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c90:	000a1c13 	andeq	r1, sl, r3, lsl ip
    1c94:	012e1600 	teqeq	lr, r0, lsl #12
    1c98:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1c9c:	0b3b0b3a 	bleq	ec498c <__Stack_Size+0xec418c>
    1ca0:	13491927 	movtne	r1, #39207	; 0x9927
    1ca4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1ca8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1cac:	00130119 	andseq	r0, r3, r9, lsl r1
    1cb0:	011d1700 	tsteq	sp, r0, lsl #14
    1cb4:	01521331 	cmpeq	r2, r1, lsr r3
    1cb8:	0b581755 	bleq	1607a14 <__Stack_Size+0x1607214>
    1cbc:	13010b59 	movwne	r0, #7001	; 0x1b59
    1cc0:	05180000 	ldreq	r0, [r8, #-0]
    1cc4:	02133100 	andseq	r3, r3, #0, 2
    1cc8:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    1ccc:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    1cd0:	341a0000 	ldrcc	r0, [sl], #-0
    1cd4:	02133100 	andseq	r3, r3, #0, 2
    1cd8:	1b000018 	blne	1d40 <__Stack_Size+0x1540>
    1cdc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1ce0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1ce4:	0b590b58 	bleq	1644a4c <__Stack_Size+0x164424c>
    1ce8:	00001301 	andeq	r1, r0, r1, lsl #6
    1cec:	11010b1c 	tstne	r1, ip, lsl fp
    1cf0:	00061201 	andeq	r1, r6, r1, lsl #4
    1cf4:	00341d00 	eorseq	r1, r4, r0, lsl #26
    1cf8:	0b3a0e03 	bleq	e8550c <__Stack_Size+0xe84d0c>
    1cfc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1d00:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1d04:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
    1d08:	03193f01 	tsteq	r9, #1, 30
    1d0c:	3b0b3a0e 	blcc	2d054c <__Stack_Size+0x2cfd4c>
    1d10:	3c19270b 	ldccc	7, cr2, [r9], {11}
    1d14:	00130119 	andseq	r0, r3, r9, lsl r1
    1d18:	00051f00 	andeq	r1, r5, r0, lsl #30
    1d1c:	00001349 	andeq	r1, r0, r9, asr #6
    1d20:	3f012e20 	svccc	0x00012e20
    1d24:	3a0e0319 	bcc	382990 <__Stack_Size+0x382190>
    1d28:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1d2c:	3c134919 	ldccc	9, cr4, [r3], {25}
    1d30:	00000019 	andeq	r0, r0, r9, lsl r0
    1d34:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    1d38:	030b130e 	movweq	r1, #45838	; 0xb30e
    1d3c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    1d40:	10011117 	andne	r1, r1, r7, lsl r1
    1d44:	02000017 	andeq	r0, r0, #23
    1d48:	0b0b0024 	bleq	2c1de0 <__Stack_Size+0x2c15e0>
    1d4c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1d50:	24030000 	strcs	r0, [r3], #-0
    1d54:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1d58:	000e030b 	andeq	r0, lr, fp, lsl #6
    1d5c:	000f0400 	andeq	r0, pc, r0, lsl #8
    1d60:	00000b0b 	andeq	r0, r0, fp, lsl #22
    1d64:	0b000f05 	bleq	5980 <__Stack_Size+0x5180>
    1d68:	0013490b 	andseq	r4, r3, fp, lsl #18
    1d6c:	01130600 	tsteq	r3, r0, lsl #12
    1d70:	0b3a0b0b 	bleq	e849a4 <__Stack_Size+0xe841a4>
    1d74:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1d78:	0d070000 	stceq	0, cr0, [r7, #-0]
    1d7c:	3a0e0300 	bcc	382984 <__Stack_Size+0x382184>
    1d80:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d84:	000b3813 	andeq	r3, fp, r3, lsl r8
    1d88:	01010800 	tsteq	r1, r0, lsl #16
    1d8c:	13011349 	movwne	r1, #4937	; 0x1349
    1d90:	21090000 	mrscs	r0, (UNDEF: 9)
    1d94:	2f134900 	svccs	0x00134900
    1d98:	0a00000b 	beq	1dcc <__Stack_Size+0x15cc>
    1d9c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1da0:	0b3b0b3a 	bleq	ec4a90 <__Stack_Size+0xec4290>
    1da4:	00001349 	andeq	r1, r0, r9, asr #6
    1da8:	3f012e0b 	svccc	0x00012e0b
    1dac:	3a0e0319 	bcc	382a18 <__Stack_Size+0x382218>
    1db0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1db4:	010b2019 	tsteq	fp, r9, lsl r0
    1db8:	0c000013 	stceq	0, cr0, [r0], {19}
    1dbc:	08030005 	stmdaeq	r3, {r0, r2}
    1dc0:	0b3b0b3a 	bleq	ec4ab0 <__Stack_Size+0xec42b0>
    1dc4:	00001349 	andeq	r1, r0, r9, asr #6
    1dc8:	0300050d 	movweq	r0, #1293	; 0x50d
    1dcc:	3b0b3a0e 	blcc	2d060c <__Stack_Size+0x2cfe0c>
    1dd0:	0013490b 	andseq	r4, r3, fp, lsl #18
    1dd4:	00340e00 	eorseq	r0, r4, r0, lsl #28
    1dd8:	0b3a0e03 	bleq	e855ec <__Stack_Size+0xe84dec>
    1ddc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1de0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    1de4:	03193f01 	tsteq	r9, #1, 30
    1de8:	3b0b3a0e 	blcc	2d0628 <__Stack_Size+0x2cfe28>
    1dec:	1119270b 	tstne	r9, fp, lsl #14
    1df0:	40061201 	andmi	r1, r6, r1, lsl #4
    1df4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1df8:	00001301 	andeq	r1, r0, r1, lsl #6
    1dfc:	03000510 	movweq	r0, #1296	; 0x510
    1e00:	3b0b3a08 	blcc	2d0628 <__Stack_Size+0x2cfe28>
    1e04:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1e08:	11000018 	tstne	r0, r8, lsl r0
    1e0c:	08030005 	stmdaeq	r3, {r0, r2}
    1e10:	0b3b0b3a 	bleq	ec4b00 <__Stack_Size+0xec4300>
    1e14:	17021349 	strne	r1, [r2, -r9, asr #6]
    1e18:	05120000 	ldreq	r0, [r2, #-0]
    1e1c:	3a0e0300 	bcc	382a24 <__Stack_Size+0x382224>
    1e20:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e24:	00170213 	andseq	r0, r7, r3, lsl r2
    1e28:	00341300 	eorseq	r1, r4, r0, lsl #6
    1e2c:	0b3a0e03 	bleq	e85640 <__Stack_Size+0xe84e40>
    1e30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1e34:	00001702 	andeq	r1, r0, r2, lsl #14
    1e38:	03003414 	movweq	r3, #1044	; 0x414
    1e3c:	3b0b3a08 	blcc	2d0664 <__Stack_Size+0x2cfe64>
    1e40:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1e44:	15000017 	strne	r0, [r0, #-23]
    1e48:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    1e4c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1e50:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1e54:	00130119 	andseq	r0, r3, r9, lsl r1
    1e58:	00051600 	andeq	r1, r5, r0, lsl #12
    1e5c:	17021331 	smladxne	r2, r1, r3, r1
    1e60:	34170000 	ldrcc	r0, [r7], #-0
    1e64:	00133100 	andseq	r3, r3, r0, lsl #2
    1e68:	010b1800 	tsteq	fp, r0, lsl #16
    1e6c:	00001755 	andeq	r1, r0, r5, asr r7
    1e70:	31003419 	tstcc	r0, r9, lsl r4
    1e74:	00170213 	andseq	r0, r7, r3, lsl r2
    1e78:	82891a00 	addhi	r1, r9, #0, 20
    1e7c:	01110101 	tsteq	r1, r1, lsl #2
    1e80:	13011331 	movwne	r1, #4913	; 0x1331
    1e84:	8a1b0000 	bhi	6c1e8c <__Stack_Size+0x6c168c>
    1e88:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    1e8c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    1e90:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    1e94:	11000182 	smlabbne	r0, r2, r1, r0
    1e98:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    1e9c:	00001331 	andeq	r1, r0, r1, lsr r3
    1ea0:	0182891d 	orreq	r8, r2, sp, lsl r9
    1ea4:	31011101 	tstcc	r1, r1, lsl #2
    1ea8:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    1eac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1eb0:	0b3b0b3a 	bleq	ec4ba0 <__Stack_Size+0xec43a0>
    1eb4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1eb8:	1d1f0000 	ldcne	0, cr0, [pc, #-0]	; 1ec0 <__Stack_Size+0x16c0>
    1ebc:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1ec0:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    1ec4:	0105590b 	tsteq	r5, fp, lsl #18
    1ec8:	20000013 	andcs	r0, r0, r3, lsl r0
    1ecc:	13310005 	teqne	r1, #5
    1ed0:	00001802 	andeq	r1, r0, r2, lsl #16
    1ed4:	31011d21 	tstcc	r1, r1, lsr #26
    1ed8:	55015213 	strpl	r5, [r1, #-531]	; 0x213
    1edc:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    1ee0:	22000005 	andcs	r0, r0, #5
    1ee4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1ee8:	0b3b0b3a 	bleq	ec4bd8 <__Stack_Size+0xec43d8>
    1eec:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1ef0:	00001802 	andeq	r1, r0, r2, lsl #16
    1ef4:	3f012e23 	svccc	0x00012e23
    1ef8:	270e0319 	smladcs	lr, r9, r3, r0
    1efc:	34134919 	ldrcc	r4, [r3], #-2329	; 0x919
    1f00:	01193c19 	tsteq	r9, r9, lsl ip
    1f04:	24000013 	strcs	r0, [r0], #-19
    1f08:	13490005 	movtne	r0, #36869	; 0x9005
    1f0c:	26250000 	strtcs	r0, [r5], -r0
    1f10:	00000000 	andeq	r0, r0, r0
    1f14:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    1f18:	030b130e 	movweq	r1, #45838	; 0xb30e
    1f1c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    1f20:	10011117 	andne	r1, r1, r7, lsl r1
    1f24:	02000017 	andeq	r0, r0, #23
    1f28:	0b0b0024 	bleq	2c1fc0 <__Stack_Size+0x2c17c0>
    1f2c:	0e030b3e 	vmoveq.16	d3[0], r0
    1f30:	16030000 	strne	r0, [r3], -r0
    1f34:	3a0e0300 	bcc	382b3c <__Stack_Size+0x38233c>
    1f38:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f3c:	04000013 	streq	r0, [r0], #-19
    1f40:	0b0b0024 	bleq	2c1fd8 <__Stack_Size+0x2c17d8>
    1f44:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1f48:	0f050000 	svceq	0x00050000
    1f4c:	000b0b00 	andeq	r0, fp, r0, lsl #22
    1f50:	01130600 	tsteq	r3, r0, lsl #12
    1f54:	0b0b0e03 	bleq	2c5768 <__Stack_Size+0x2c4f68>
    1f58:	0b3b0b3a 	bleq	ec4c48 <__Stack_Size+0xec4448>
    1f5c:	00001301 	andeq	r1, r0, r1, lsl #6
    1f60:	03000d07 	movweq	r0, #3335	; 0xd07
    1f64:	3b0b3a08 	blcc	2d078c <__Stack_Size+0x2cff8c>
    1f68:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1f6c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1f70:	13490101 	movtne	r0, #37121	; 0x9101
    1f74:	00001301 	andeq	r1, r0, r1, lsl #6
    1f78:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    1f7c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1f80:	012e0a00 	teqeq	lr, r0, lsl #20
    1f84:	0b3a0e03 	bleq	e85798 <__Stack_Size+0xe84f98>
    1f88:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1f8c:	0b201349 	bleq	806cb8 <__Stack_Size+0x8064b8>
    1f90:	00001301 	andeq	r1, r0, r1, lsl #6
    1f94:	0300050b 	movweq	r0, #1291	; 0x50b
    1f98:	3b0b3a08 	blcc	2d07c0 <__Stack_Size+0x2cffc0>
    1f9c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1fa0:	00050c00 	andeq	r0, r5, r0, lsl #24
    1fa4:	0b3a0e03 	bleq	e857b8 <__Stack_Size+0xe84fb8>
    1fa8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1fac:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    1fb0:	3a0e0301 	bcc	382bbc <__Stack_Size+0x3823bc>
    1fb4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1fb8:	010b2019 	tsteq	fp, r9, lsl r0
    1fbc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1fc0:	0b0b000f 	bleq	2c2004 <__Stack_Size+0x2c1804>
    1fc4:	00001349 	andeq	r1, r0, r9, asr #6
    1fc8:	0300340f 	movweq	r3, #1039	; 0x40f
    1fcc:	3b0b3a08 	blcc	2d07f4 <__Stack_Size+0x2cfff4>
    1fd0:	0013490b 	andseq	r4, r3, fp, lsl #18
    1fd4:	00261000 	eoreq	r1, r6, r0
    1fd8:	00001349 	andeq	r1, r0, r9, asr #6
    1fdc:	3f012e11 	svccc	0x00012e11
    1fe0:	3a0e0319 	bcc	382c4c <__Stack_Size+0x38244c>
    1fe4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1fe8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1fec:	97184006 	ldrls	r4, [r8, -r6]
    1ff0:	13011942 	movwne	r1, #6466	; 0x1942
    1ff4:	05120000 	ldreq	r0, [r2, #-0]
    1ff8:	3a080300 	bcc	202c00 <__Stack_Size+0x202400>
    1ffc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2000:	00170213 	andseq	r0, r7, r3, lsl r2
    2004:	00341300 	eorseq	r1, r4, r0, lsl #6
    2008:	0b3a0803 	bleq	e8401c <__Stack_Size+0xe8381c>
    200c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2010:	00001802 	andeq	r1, r0, r2, lsl #16
    2014:	03003414 	movweq	r3, #1044	; 0x414
    2018:	3b0b3a08 	blcc	2d0840 <__Stack_Size+0x2d0040>
    201c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2020:	15000017 	strne	r0, [r0, #-23]
    2024:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2028:	17550152 			; <UNDEFINED> instruction: 0x17550152
    202c:	0b590b58 	bleq	1644d94 <__Stack_Size+0x1644594>
    2030:	00001301 	andeq	r1, r0, r1, lsl #6
    2034:	31000516 	tstcc	r0, r6, lsl r5
    2038:	00170213 	andseq	r0, r7, r3, lsl r2
    203c:	010b1700 	tsteq	fp, r0, lsl #14
    2040:	00001755 	andeq	r1, r0, r5, asr r7
    2044:	31003418 	tstcc	r0, r8, lsl r4
    2048:	00170213 	andseq	r0, r7, r3, lsl r2
    204c:	010b1900 	tsteq	fp, r0, lsl #18
    2050:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2054:	341a0000 	ldrcc	r0, [sl], #-0
    2058:	3a0e0300 	bcc	382c60 <__Stack_Size+0x382460>
    205c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2060:	00170213 	andseq	r0, r7, r3, lsl r2
    2064:	011d1b00 	tsteq	sp, r0, lsl #22
    2068:	01521331 	cmpeq	r2, r1, lsr r3
    206c:	0b581755 	bleq	1607dc8 <__Stack_Size+0x16075c8>
    2070:	00000b59 	andeq	r0, r0, r9, asr fp
    2074:	0300051c 	movweq	r0, #1308	; 0x51c
    2078:	3b0b3a0e 	blcc	2d08b8 <__Stack_Size+0x2d00b8>
    207c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2080:	1d000017 	stcne	0, cr0, [r0, #-92]	; 0xffffffa4
    2084:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2088:	0b3b0b3a 	bleq	ec4d78 <__Stack_Size+0xec4578>
    208c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2090:	891e0000 	ldmdbhi	lr, {}	; <UNPREDICTABLE>
    2094:	11010182 	smlabbne	r1, r2, r1, r0
    2098:	01133101 	tsteq	r3, r1, lsl #2
    209c:	1f000013 	svcne	0x00000013
    20a0:	0001828a 	andeq	r8, r1, sl, lsl #5
    20a4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    20a8:	20000018 	andcs	r0, r0, r8, lsl r0
    20ac:	01018289 	smlabbeq	r1, r9, r2, r8
    20b0:	13310111 	teqne	r1, #1073741828	; 0x40000004
    20b4:	0b210000 	bleq	8420bc <__Stack_Size+0x8418bc>
    20b8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    20bc:	00130106 	andseq	r0, r3, r6, lsl #2
    20c0:	00052200 	andeq	r2, r5, r0, lsl #4
    20c4:	00001331 	andeq	r1, r0, r1, lsr r3
    20c8:	03003423 	movweq	r3, #1059	; 0x423
    20cc:	3b0b3a0e 	blcc	2d090c <__Stack_Size+0x2d010c>
    20d0:	3f13490b 	svccc	0x0013490b
    20d4:	00180219 	andseq	r0, r8, r9, lsl r2
    20d8:	012e2400 	teqeq	lr, r0, lsl #8
    20dc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    20e0:	13491927 	movtne	r1, #39207	; 0x9927
    20e4:	193c1934 	ldmdbne	ip!, {r2, r4, r5, r8, fp, ip}
    20e8:	00001301 	andeq	r1, r0, r1, lsl #6
    20ec:	49000525 	stmdbmi	r0, {r0, r2, r5, r8, sl}
    20f0:	26000013 			; <UNDEFINED> instruction: 0x26000013
    20f4:	00000026 	andeq	r0, r0, r6, lsr #32
    20f8:	01110100 	tsteq	r1, r0, lsl #2
    20fc:	0b130e25 	bleq	4c5998 <__Stack_Size+0x4c5198>
    2100:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2104:	01111755 	tsteq	r1, r5, asr r7
    2108:	00001710 	andeq	r1, r0, r0, lsl r7
    210c:	0b002402 	bleq	b11c <__Stack_Size+0xa91c>
    2110:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2114:	0300000e 	movweq	r0, #14
    2118:	08030016 	stmdaeq	r3, {r1, r2, r4}
    211c:	0b3b0b3a 	bleq	ec4e0c <__Stack_Size+0xec460c>
    2120:	00001349 	andeq	r1, r0, r9, asr #6
    2124:	03010404 	movweq	r0, #5124	; 0x1404
    2128:	3a0b0b0e 	bcc	2c4d68 <__Stack_Size+0x2c4568>
    212c:	010b3b0b 	tsteq	fp, fp, lsl #22
    2130:	05000013 	streq	r0, [r0, #-19]
    2134:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    2138:	00000d1c 	andeq	r0, r0, ip, lsl sp
    213c:	03001606 	movweq	r1, #1542	; 0x606
    2140:	3b0b3a0e 	blcc	2d0980 <__Stack_Size+0x2d0180>
    2144:	0013490b 	andseq	r4, r3, fp, lsl #18
    2148:	012e0700 	teqeq	lr, r0, lsl #14
    214c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2150:	0b3b0b3a 	bleq	ec4e40 <__Stack_Size+0xec4640>
    2154:	13491927 	movtne	r1, #39207	; 0x9927
    2158:	13010b20 	movwne	r0, #6944	; 0x1b20
    215c:	05080000 	streq	r0, [r8, #-0]
    2160:	3a0e0300 	bcc	382d68 <__Stack_Size+0x382568>
    2164:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2168:	09000013 	stmdbeq	r0, {r0, r1, r4}
    216c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2170:	0b3a0e03 	bleq	e85984 <__Stack_Size+0xe85184>
    2174:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2178:	06120111 			; <UNDEFINED> instruction: 0x06120111
    217c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2180:	00130119 	andseq	r0, r3, r9, lsl r1
    2184:	00050a00 	andeq	r0, r5, r0, lsl #20
    2188:	0b3a0e03 	bleq	e8599c <__Stack_Size+0xe8519c>
    218c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2190:	00001802 	andeq	r1, r0, r2, lsl #16
    2194:	3f002e0b 	svccc	0x00002e0b
    2198:	3a0e0319 	bcc	382e04 <__Stack_Size+0x382604>
    219c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    21a0:	11134919 	tstne	r3, r9, lsl r9
    21a4:	40061201 	andmi	r1, r6, r1, lsl #4
    21a8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    21ac:	050c0000 	streq	r0, [ip, #-0]
    21b0:	3a0e0300 	bcc	382db8 <__Stack_Size+0x3825b8>
    21b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    21b8:	00170213 	andseq	r0, r7, r3, lsl r2
    21bc:	012e0d00 	teqeq	lr, r0, lsl #26
    21c0:	01111331 	tsteq	r1, r1, lsr r3
    21c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    21c8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    21cc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    21d0:	13310005 	teqne	r1, #5
    21d4:	00001702 	andeq	r1, r0, r2, lsl #14
    21d8:	3f012e0f 	svccc	0x00012e0f
    21dc:	3a0e0319 	bcc	382e48 <__Stack_Size+0x382648>
    21e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    21e4:	11134919 	tstne	r3, r9, lsl r9
    21e8:	40061201 	andmi	r1, r6, r1, lsl #4
    21ec:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    21f0:	00001301 	andeq	r1, r0, r1, lsl #6
    21f4:	11010b10 	tstne	r1, r0, lsl fp
    21f8:	00061201 	andeq	r1, r6, r1, lsl #4
    21fc:	00341100 	eorseq	r1, r4, r0, lsl #2
    2200:	0b3a0e03 	bleq	e85a14 <__Stack_Size+0xe85214>
    2204:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2208:	00001802 	andeq	r1, r0, r2, lsl #16
    220c:	03003412 	movweq	r3, #1042	; 0x412
    2210:	3b0b3a0e 	blcc	2d0a50 <__Stack_Size+0x2d0250>
    2214:	0013490b 	andseq	r4, r3, fp, lsl #18
    2218:	011d1300 	tsteq	sp, r0, lsl #6
    221c:	01521331 	cmpeq	r2, r1, lsr r3
    2220:	0b581755 	bleq	1607f7c <__Stack_Size+0x160777c>
    2224:	00000b59 	andeq	r0, r0, r9, asr fp
    2228:	3f012e14 	svccc	0x00012e14
    222c:	3a0e0319 	bcc	382e98 <__Stack_Size+0x382698>
    2230:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2234:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2238:	97184006 	ldrls	r4, [r8, -r6]
    223c:	13011942 	movwne	r1, #6466	; 0x1942
    2240:	05150000 	ldreq	r0, [r5, #-0]
    2244:	3a0e0300 	bcc	382e4c <__Stack_Size+0x38264c>
    2248:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    224c:	00170213 	andseq	r0, r7, r3, lsl r2
    2250:	00341600 	eorseq	r1, r4, r0, lsl #12
    2254:	0b3a0e03 	bleq	e85a68 <__Stack_Size+0xe85268>
    2258:	1349053b 	movtne	r0, #38203	; 0x953b
    225c:	00001702 	andeq	r1, r0, r2, lsl #14
    2260:	3f012e17 	svccc	0x00012e17
    2264:	3a0e0319 	bcc	382ed0 <__Stack_Size+0x3826d0>
    2268:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    226c:	11134919 	tstne	r3, r9, lsl r9
    2270:	40061201 	andmi	r1, r6, r1, lsl #4
    2274:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2278:	00001301 	andeq	r1, r0, r1, lsl #6
    227c:	03000518 	movweq	r0, #1304	; 0x518
    2280:	3b0b3a0e 	blcc	2d0ac0 <__Stack_Size+0x2d02c0>
    2284:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2288:	19000018 	stmdbne	r0, {r3, r4}
    228c:	0b0b000f 	bleq	2c22d0 <__Stack_Size+0x2c1ad0>
    2290:	00001349 	andeq	r1, r0, r9, asr #6
    2294:	0300341a 	movweq	r3, #1050	; 0x41a
    2298:	3b0b3a0e 	blcc	2d0ad8 <__Stack_Size+0x2d02d8>
    229c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    22a0:	1b000018 	blne	2308 <__Stack_Size+0x1b08>
    22a4:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    22a8:	0b1c0000 	bleq	7022b0 <__Stack_Size+0x701ab0>
    22ac:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    22b0:	00130106 	andseq	r0, r3, r6, lsl #2
    22b4:	00051d00 	andeq	r1, r5, r0, lsl #26
    22b8:	0b3a0803 	bleq	e842cc <__Stack_Size+0xe83acc>
    22bc:	1349053b 	movtne	r0, #38203	; 0x953b
    22c0:	00001702 	andeq	r1, r0, r2, lsl #14
    22c4:	0300051e 	movweq	r0, #1310	; 0x51e
    22c8:	3b0b3a08 	blcc	2d0af0 <__Stack_Size+0x2d02f0>
    22cc:	02134905 	andseq	r4, r3, #81920	; 0x14000
    22d0:	1f000018 	svcne	0x00000018
    22d4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    22d8:	0b3a0e03 	bleq	e85aec <__Stack_Size+0xe852ec>
    22dc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    22e0:	01111349 	tsteq	r1, r9, asr #6
    22e4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    22e8:	00194297 	mulseq	r9, r7, r2
    22ec:	11010000 	mrsne	r0, (UNDEF: 1)
    22f0:	130e2501 	movwne	r2, #58625	; 0xe501
    22f4:	1b0e030b 	blne	382f28 <__Stack_Size+0x382728>
    22f8:	1117550e 	tstne	r7, lr, lsl #10
    22fc:	00171001 	andseq	r1, r7, r1
    2300:	00240200 	eoreq	r0, r4, r0, lsl #4
    2304:	0b3e0b0b 	bleq	f84f38 <__Stack_Size+0xf84738>
    2308:	00000e03 	andeq	r0, r0, r3, lsl #28
    230c:	03001603 	movweq	r1, #1539	; 0x603
    2310:	3b0b3a08 	blcc	2d0b38 <__Stack_Size+0x2d0338>
    2314:	0013490b 	andseq	r4, r3, fp, lsl #18
    2318:	00150400 	andseq	r0, r5, r0, lsl #8
    231c:	00001927 	andeq	r1, r0, r7, lsr #18
    2320:	0b000f05 	bleq	5f3c <__Stack_Size+0x573c>
    2324:	0013490b 	andseq	r4, r3, fp, lsl #18
    2328:	012e0600 	teqeq	lr, r0, lsl #12
    232c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2330:	0b3b0b3a 	bleq	ec5020 <__Stack_Size+0xec4820>
    2334:	01111927 	tsteq	r1, r7, lsr #18
    2338:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    233c:	01194296 			; <UNDEFINED> instruction: 0x01194296
    2340:	07000013 	smladeq	r0, r3, r0, r0
    2344:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2348:	0b3b0b3a 	bleq	ec5038 <__Stack_Size+0xec4838>
    234c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2350:	0b080000 	bleq	202358 <__Stack_Size+0x201b58>
    2354:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2358:	00130106 	andseq	r0, r3, r6, lsl #2
    235c:	82890900 	addhi	r0, r9, #0, 18
    2360:	01110001 	tsteq	r1, r1
    2364:	00001331 	andeq	r1, r0, r1, lsr r3
    2368:	0300340a 	movweq	r3, #1034	; 0x40a
    236c:	3b0b3a0e 	blcc	2d0bac <__Stack_Size+0x2d03ac>
    2370:	3f134905 	svccc	0x00134905
    2374:	00193c19 	andseq	r3, r9, r9, lsl ip
    2378:	00350b00 	eorseq	r0, r5, r0, lsl #22
    237c:	00001349 	andeq	r1, r0, r9, asr #6
    2380:	0300340c 	movweq	r3, #1036	; 0x40c
    2384:	3b0b3a0e 	blcc	2d0bc4 <__Stack_Size+0x2d03c4>
    2388:	3f13490b 	svccc	0x0013490b
    238c:	00180219 	andseq	r0, r8, r9, lsl r2
    2390:	00340d00 	eorseq	r0, r4, r0, lsl #26
    2394:	0b3a0e03 	bleq	e85ba8 <__Stack_Size+0xe853a8>
    2398:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    239c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    23a0:	010e0000 	mrseq	r0, (UNDEF: 14)
    23a4:	01134901 	tsteq	r3, r1, lsl #18
    23a8:	0f000013 	svceq	0x00000013
    23ac:	13490021 	movtne	r0, #36897	; 0x9021
    23b0:	00000b2f 	andeq	r0, r0, pc, lsr #22
    23b4:	3f002e10 	svccc	0x00002e10
    23b8:	3a0e0319 	bcc	383024 <__Stack_Size+0x382824>
    23bc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    23c0:	3c134919 	ldccc	9, cr4, [r3], {25}
    23c4:	00000019 	andeq	r0, r0, r9, lsl r0
    23c8:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    23cc:	030b130e 	movweq	r1, #45838	; 0xb30e
    23d0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    23d4:	10011117 	andne	r1, r1, r7, lsl r1
    23d8:	02000017 	andeq	r0, r0, #23
    23dc:	0b0b0024 	bleq	2c2474 <__Stack_Size+0x2c1c74>
    23e0:	0e030b3e 	vmoveq.16	d3[0], r0
    23e4:	16030000 	strne	r0, [r3], -r0
    23e8:	3a080300 	bcc	202ff0 <__Stack_Size+0x2027f0>
    23ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    23f0:	04000013 	streq	r0, [r0], #-19
    23f4:	0b0b000f 	bleq	2c2438 <__Stack_Size+0x2c1c38>
    23f8:	00001349 	andeq	r1, r0, r9, asr #6
    23fc:	03010405 	movweq	r0, #5125	; 0x1405
    2400:	3a0b0b0e 	bcc	2c5040 <__Stack_Size+0x2c4840>
    2404:	010b3b0b 	tsteq	fp, fp, lsl #22
    2408:	06000013 			; <UNDEFINED> instruction: 0x06000013
    240c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    2410:	00000d1c 	andeq	r0, r0, ip, lsl sp
    2414:	03001607 	movweq	r1, #1543	; 0x607
    2418:	3b0b3a0e 	blcc	2d0c58 <__Stack_Size+0x2d0458>
    241c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2420:	01130800 	tsteq	r3, r0, lsl #16
    2424:	0b0b0e03 	bleq	2c5c38 <__Stack_Size+0x2c5438>
    2428:	0b3b0b3a 	bleq	ec5118 <__Stack_Size+0xec4918>
    242c:	00001301 	andeq	r1, r0, r1, lsl #6
    2430:	03000d09 	movweq	r0, #3337	; 0xd09
    2434:	3b0b3a0e 	blcc	2d0c74 <__Stack_Size+0x2d0474>
    2438:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    243c:	0a00000b 	beq	2470 <__Stack_Size+0x1c70>
    2440:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    2444:	13011349 	movwne	r1, #4937	; 0x1349
    2448:	050b0000 	streq	r0, [fp, #-0]
    244c:	00134900 	andseq	r4, r3, r0, lsl #18
    2450:	01130c00 	tsteq	r3, r0, lsl #24
    2454:	0b0b0803 	bleq	2c4468 <__Stack_Size+0x2c3c68>
    2458:	0b3b0b3a 	bleq	ec5148 <__Stack_Size+0xec4948>
    245c:	00001301 	andeq	r1, r0, r1, lsl #6
    2460:	03000d0d 	movweq	r0, #3341	; 0xd0d
    2464:	3b0b3a08 	blcc	2d0c8c <__Stack_Size+0x2d048c>
    2468:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    246c:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    2470:	0b0b0117 	bleq	2c28d4 <__Stack_Size+0x2c20d4>
    2474:	0b3b0b3a 	bleq	ec5164 <__Stack_Size+0xec4964>
    2478:	00001301 	andeq	r1, r0, r1, lsl #6
    247c:	03000d0f 	movweq	r0, #3343	; 0xd0f
    2480:	3b0b3a08 	blcc	2d0ca8 <__Stack_Size+0x2d04a8>
    2484:	0013490b 	andseq	r4, r3, fp, lsl #18
    2488:	00151000 	andseq	r1, r5, r0
    248c:	00001927 	andeq	r1, r0, r7, lsr #18
    2490:	3f002e11 	svccc	0x00002e11
    2494:	3a0e0319 	bcc	383100 <__Stack_Size+0x382900>
    2498:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    249c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    24a0:	96184006 	ldrls	r4, [r8], -r6
    24a4:	00001942 	andeq	r1, r0, r2, asr #18
    24a8:	03003412 	movweq	r3, #1042	; 0x412
    24ac:	3b0b3a0e 	blcc	2d0cec <__Stack_Size+0x2d04ec>
    24b0:	3f13490b 	svccc	0x0013490b
    24b4:	00193c19 	andseq	r3, r9, r9, lsl ip
    24b8:	00341300 	eorseq	r1, r4, r0, lsl #6
    24bc:	0b3a0e03 	bleq	e85cd0 <__Stack_Size+0xe854d0>
    24c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    24c4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    24c8:	01000000 	mrseq	r0, (UNDEF: 0)
    24cc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    24d0:	0e030b13 	vmoveq.32	d3[0], r0
    24d4:	17550e1b 	smmlane	r5, fp, lr, r0
    24d8:	17100111 			; <UNDEFINED> instruction: 0x17100111
    24dc:	24020000 	strcs	r0, [r2], #-0
    24e0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    24e4:	000e030b 	andeq	r0, lr, fp, lsl #6
    24e8:	00160300 	andseq	r0, r6, r0, lsl #6
    24ec:	0b3a0803 	bleq	e84500 <__Stack_Size+0xe83d00>
    24f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    24f4:	16040000 	strne	r0, [r4], -r0
    24f8:	3a0e0300 	bcc	383100 <__Stack_Size+0x382900>
    24fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2500:	05000013 	streq	r0, [r0, #-19]
    2504:	13490035 	movtne	r0, #36917	; 0x9035
    2508:	04060000 	streq	r0, [r6], #-0
    250c:	3a0b0b01 	bcc	2c5118 <__Stack_Size+0x2c4918>
    2510:	010b3b0b 	tsteq	fp, fp, lsl #22
    2514:	07000013 	smladeq	r0, r3, r0, r0
    2518:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    251c:	00000d1c 	andeq	r0, r0, ip, lsl sp
    2520:	03010408 	movweq	r0, #5128	; 0x1408
    2524:	3a0b0b0e 	bcc	2c5164 <__Stack_Size+0x2c4964>
    2528:	010b3b0b 	tsteq	fp, fp, lsl #22
    252c:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2530:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2534:	0b3a0b0b 	bleq	e85168 <__Stack_Size+0xe84968>
    2538:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    253c:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    2540:	3a0e0300 	bcc	383148 <__Stack_Size+0x382948>
    2544:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2548:	000b3813 	andeq	r3, fp, r3, lsl r8
    254c:	000f0b00 	andeq	r0, pc, r0, lsl #22
    2550:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2554:	150c0000 	strne	r0, [ip, #-0]
    2558:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    255c:	00130113 	andseq	r0, r3, r3, lsl r1
    2560:	00050d00 	andeq	r0, r5, r0, lsl #26
    2564:	00001349 	andeq	r1, r0, r9, asr #6
    2568:	0301130e 	movweq	r1, #4878	; 0x130e
    256c:	3a0b0b08 	bcc	2c5194 <__Stack_Size+0x2c4994>
    2570:	010b3b0b 	tsteq	fp, fp, lsl #22
    2574:	0f000013 	svceq	0x00000013
    2578:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    257c:	0b3b0b3a 	bleq	ec526c <__Stack_Size+0xec4a6c>
    2580:	0b381349 	bleq	e072ac <__Stack_Size+0xe06aac>
    2584:	17100000 	ldrne	r0, [r0, -r0]
    2588:	3a0b0b01 	bcc	2c5194 <__Stack_Size+0x2c4994>
    258c:	010b3b0b 	tsteq	fp, fp, lsl #22
    2590:	11000013 	tstne	r0, r3, lsl r0
    2594:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    2598:	0b3b0b3a 	bleq	ec5288 <__Stack_Size+0xec4a88>
    259c:	00001349 	andeq	r1, r0, r9, asr #6
    25a0:	27001512 	smladcs	r0, r2, r5, r1
    25a4:	13000019 	movwne	r0, #25
    25a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    25ac:	0b3a0e03 	bleq	e85dc0 <__Stack_Size+0xe855c0>
    25b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    25b4:	01111349 	tsteq	r1, r9, asr #6
    25b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    25bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
    25c0:	14000013 	strne	r0, [r0], #-19
    25c4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    25c8:	0b3b0b3a 	bleq	ec52b8 <__Stack_Size+0xec4ab8>
    25cc:	17021349 	strne	r1, [r2, -r9, asr #6]
    25d0:	0b150000 	bleq	5425d8 <__Stack_Size+0x541dd8>
    25d4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    25d8:	00130106 	andseq	r0, r3, r6, lsl #2
    25dc:	00341600 	eorseq	r1, r4, r0, lsl #12
    25e0:	0b3a0e03 	bleq	e85df4 <__Stack_Size+0xe855f4>
    25e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    25e8:	00001702 	andeq	r1, r0, r2, lsl #14
    25ec:	11010b17 	tstne	r1, r7, lsl fp
    25f0:	00061201 	andeq	r1, r6, r1, lsl #4
    25f4:	00341800 	eorseq	r1, r4, r0, lsl #16
    25f8:	0b3a0e03 	bleq	e85e0c <__Stack_Size+0xe8560c>
    25fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2600:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    2604:	3a0e0301 	bcc	383210 <__Stack_Size+0x382a10>
    2608:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    260c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2610:	97184006 	ldrls	r4, [r8, -r6]
    2614:	13011942 	movwne	r1, #6466	; 0x1942
    2618:	341a0000 	ldrcc	r0, [sl], #-0
    261c:	3a0e0300 	bcc	383224 <__Stack_Size+0x382a24>
    2620:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2624:	00170213 	andseq	r0, r7, r3, lsl r2
    2628:	000a1b00 	andeq	r1, sl, r0, lsl #22
    262c:	0b3a0e03 	bleq	e85e40 <__Stack_Size+0xe85640>
    2630:	0111053b 	tsteq	r1, fp, lsr r5
    2634:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    2638:	11010182 	smlabbne	r1, r2, r1, r0
    263c:	00130101 	andseq	r0, r3, r1, lsl #2
    2640:	828a1d00 	addhi	r1, sl, #0, 26
    2644:	18020001 	stmdane	r2, {r0}
    2648:	00184291 	mulseq	r8, r1, r2
    264c:	82891e00 	addhi	r1, r9, #0, 28
    2650:	01110101 	tsteq	r1, r1, lsl #2
    2654:	13011331 	movwne	r1, #4913	; 0x1331
    2658:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    265c:	11010182 	smlabbne	r1, r2, r1, r0
    2660:	00133101 	andseq	r3, r3, r1, lsl #2
    2664:	002e2000 	eoreq	r2, lr, r0
    2668:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    266c:	0b3b0b3a 	bleq	ec535c <__Stack_Size+0xec4b5c>
    2670:	13491927 	movtne	r1, #39207	; 0x9927
    2674:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2678:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    267c:	21000019 	tstcs	r0, r9, lsl r0
    2680:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2684:	0b3b0b3a 	bleq	ec5374 <__Stack_Size+0xec4b74>
    2688:	17021349 	strne	r1, [r2, -r9, asr #6]
    268c:	89220000 	stmdbhi	r2!, {}	; <UNPREDICTABLE>
    2690:	11000182 	smlabbne	r0, r2, r1, r0
    2694:	00133101 	andseq	r3, r3, r1, lsl #2
    2698:	012e2300 	teqeq	lr, r0, lsl #6
    269c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    26a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    26a4:	13491927 	movtne	r1, #39207	; 0x9927
    26a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    26ac:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    26b0:	00130119 	andseq	r0, r3, r9, lsl r1
    26b4:	00342400 	eorseq	r2, r4, r0, lsl #8
    26b8:	0b3a0803 	bleq	e846cc <__Stack_Size+0xe83ecc>
    26bc:	1349053b 	movtne	r0, #38203	; 0x953b
    26c0:	00001702 	andeq	r1, r0, r2, lsl #14
    26c4:	55010b25 	strpl	r0, [r1, #-2853]	; 0xb25
    26c8:	00130117 	andseq	r0, r3, r7, lsl r1
    26cc:	002e2600 	eoreq	r2, lr, r0, lsl #12
    26d0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    26d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    26d8:	13491927 	movtne	r1, #39207	; 0x9927
    26dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    26e0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    26e4:	27000019 	smladcs	r0, r9, r0, r0
    26e8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    26ec:	0b3a0e03 	bleq	e85f00 <__Stack_Size+0xe85700>
    26f0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    26f4:	01111349 	tsteq	r1, r9, asr #6
    26f8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    26fc:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2700:	28000013 	stmdacs	r0, {r0, r1, r4}
    2704:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2708:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    270c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2710:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
    2714:	3a0e0301 	bcc	383320 <__Stack_Size+0x382b20>
    2718:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    271c:	010b2019 	tsteq	fp, r9, lsl r0
    2720:	2a000013 	bcs	2774 <__Stack_Size+0x1f74>
    2724:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2728:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    272c:	00001349 	andeq	r1, r0, r9, asr #6
    2730:	03000a2b 	movweq	r0, #2603	; 0xa2b
    2734:	3b0b3a0e 	blcc	2d0f74 <__Stack_Size+0x2d0774>
    2738:	2c000005 	stccs	0, cr0, [r0], {5}
    273c:	1301010b 	movwne	r0, #4363	; 0x110b
    2740:	0b2d0000 	bleq	b42748 <__Stack_Size+0xb41f48>
    2744:	2e000001 	cdpcs	0, 0, cr0, cr0, cr1, {0}
    2748:	0b0b0117 	bleq	2c2bac <__Stack_Size+0x2c23ac>
    274c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2750:	00001301 	andeq	r1, r0, r1, lsl #6
    2754:	03000d2f 	movweq	r0, #3375	; 0xd2f
    2758:	3b0b3a08 	blcc	2d0f80 <__Stack_Size+0x2d0780>
    275c:	00134905 	andseq	r4, r3, r5, lsl #18
    2760:	011d3000 	tsteq	sp, r0
    2764:	01111331 	tsteq	r1, r1, lsr r3
    2768:	0b580612 	bleq	1603fb8 <__Stack_Size+0x16037b8>
    276c:	13010559 	movwne	r0, #5465	; 0x1559
    2770:	34310000 	ldrtcc	r0, [r1], #-0
    2774:	02133100 	andseq	r3, r3, #0, 2
    2778:	32000017 	andcc	r0, r0, #23
    277c:	1331000a 	teqne	r1, #10
    2780:	00000111 	andeq	r0, r0, r1, lsl r1
    2784:	31011d33 	tstcc	r1, r3, lsr sp
    2788:	55015213 	strpl	r5, [r1, #-531]	; 0x213
    278c:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    2790:	00130105 	andseq	r0, r3, r5, lsl #2
    2794:	010b3400 	tsteq	fp, r0, lsl #8
    2798:	00001755 	andeq	r1, r0, r5, asr r7
    279c:	31003435 	tstcc	r0, r5, lsr r4
    27a0:	00180213 	andseq	r0, r8, r3, lsl r2
    27a4:	82893600 	addhi	r3, r9, #0, 12
    27a8:	01110101 	tsteq	r1, r1, lsl #2
    27ac:	89370000 	ldmdbhi	r7!, {}	; <UNPREDICTABLE>
    27b0:	11000182 	smlabbne	r0, r2, r1, r0
    27b4:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    27b8:	00001331 	andeq	r1, r0, r1, lsr r3
    27bc:	3f012e38 	svccc	0x00012e38
    27c0:	3a0e0319 	bcc	38342c <__Stack_Size+0x382c2c>
    27c4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    27c8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    27cc:	97184006 	ldrls	r4, [r8, -r6]
    27d0:	13011942 	movwne	r1, #6466	; 0x1942
    27d4:	05390000 	ldreq	r0, [r9, #-0]!
    27d8:	3a080300 	bcc	2033e0 <__Stack_Size+0x202be0>
    27dc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    27e0:	00170213 	andseq	r0, r7, r3, lsl r2
    27e4:	002e3a00 	eoreq	r3, lr, r0, lsl #20
    27e8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    27ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    27f0:	01111927 	tsteq	r1, r7, lsr #18
    27f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    27f8:	00194297 	mulseq	r9, r7, r2
    27fc:	00343b00 	eorseq	r3, r4, r0, lsl #22
    2800:	0b3a0e03 	bleq	e86014 <__Stack_Size+0xe85814>
    2804:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2808:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    280c:	343c0000 	ldrtcc	r0, [ip], #-0
    2810:	3a0e0300 	bcc	383418 <__Stack_Size+0x382c18>
    2814:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2818:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    281c:	3d000018 	stccc	0, cr0, [r0, #-96]	; 0xffffffa0
    2820:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2824:	0b3a0e03 	bleq	e86038 <__Stack_Size+0xe85838>
    2828:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    282c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    2830:	00001301 	andeq	r1, r0, r1, lsl #6
    2834:	3f012e3e 	svccc	0x00012e3e
    2838:	3a0e0319 	bcc	3834a4 <__Stack_Size+0x382ca4>
    283c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2840:	01193c19 	tsteq	r9, r9, lsl ip
    2844:	3f000013 	svccc	0x00000013
    2848:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    284c:	0b3a0e03 	bleq	e86060 <__Stack_Size+0xe85860>
    2850:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2854:	1301193c 	movwne	r1, #6460	; 0x193c
    2858:	2e400000 	cdpcs	0, 4, cr0, cr0, cr0, {0}
    285c:	03193f01 	tsteq	r9, #1, 30
    2860:	3b0b3a0e 	blcc	2d10a0 <__Stack_Size+0x2d08a0>
    2864:	3c19270b 	ldccc	7, cr2, [r9], {11}
    2868:	00000019 	andeq	r0, r0, r9, lsl r0
    286c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    2870:	030b130e 	movweq	r1, #45838	; 0xb30e
    2874:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    2878:	10011117 	andne	r1, r1, r7, lsl r1
    287c:	02000017 	andeq	r0, r0, #23
    2880:	0b0b0024 	bleq	2c2918 <__Stack_Size+0x2c2118>
    2884:	0e030b3e 	vmoveq.16	d3[0], r0
    2888:	16030000 	strne	r0, [r3], -r0
    288c:	3a080300 	bcc	203494 <__Stack_Size+0x202c94>
    2890:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2894:	04000013 	streq	r0, [r0], #-19
    2898:	0b0b000f 	bleq	2c28dc <__Stack_Size+0x2c20dc>
    289c:	00001349 	andeq	r1, r0, r9, asr #6
    28a0:	3f012e05 	svccc	0x00012e05
    28a4:	3a0e0319 	bcc	383510 <__Stack_Size+0x382d10>
    28a8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    28ac:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    28b0:	97184006 	ldrls	r4, [r8, -r6]
    28b4:	13011942 	movwne	r1, #6466	; 0x1942
    28b8:	05060000 	streq	r0, [r6, #-0]
    28bc:	3a0e0300 	bcc	3834c4 <__Stack_Size+0x382cc4>
    28c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    28c4:	00170213 	andseq	r0, r7, r3, lsl r2
    28c8:	00340700 	eorseq	r0, r4, r0, lsl #14
    28cc:	0b3a0803 	bleq	e848e0 <__Stack_Size+0xe840e0>
    28d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    28d4:	00001802 	andeq	r1, r0, r2, lsl #16
    28d8:	03003408 	movweq	r3, #1032	; 0x408
    28dc:	3b0b3a08 	blcc	2d1104 <__Stack_Size+0x2d0904>
    28e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    28e4:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    28e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    28ec:	0b3b0b3a 	bleq	ec55dc <__Stack_Size+0xec4ddc>
    28f0:	17021349 	strne	r1, [r2, -r9, asr #6]
    28f4:	Address 0x000028f4 is out of bounds.


Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000071 	andeq	r0, r0, r1, ror r0
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00310002 	eorseq	r0, r1, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	73010000 	movwvc	r0, #4096	; 0x1000
      1c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
      24:	5f630000 	svcpl	0x00630000
      28:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	6174735f 	cmnvs	r4, pc, asr r3
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	70757472 	rsbsvc	r7, r5, r2, ror r4
      34:	0100732e 	tsteq	r0, lr, lsr #6
      38:	00000000 	andeq	r0, r0, r0

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	0b4c0205 	bleq	1300858 <__Stack_Size+0x1300058>

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	c1030800 	tstgt	r3, r0, lsl #16
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	31210100 	teqcc	r1, r0, lsl #2
      48:	23212121 	teqcs	r1, #1073741832	; 0x40000008
      4c:	21212121 	teqcs	r1, r1, lsr #2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	2131212f 	teqcs	r1, pc, lsr #2
      54:	30212131 	eorcc	r2, r1, r1, lsr r1
      58:	2068032f 	rsbcs	r0, r8, pc, lsr #6
      5c:	36322f34 	shasxcc	r2, r2, r4
      60:	01000202 	tsteq	r0, r2, lsl #4
      64:	02050001 	andeq	r0, r5, #1
      68:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
      6c:	0100eb03 	tsteq	r0, r3, lsl #22
      70:	01000202 	tsteq	r0, r2, lsl #4
      74:	0000a201 	andeq	sl, r0, r1, lsl #4
      78:	33000200 	movwcc	r0, #512	; 0x200
      7c:	02000000 	andeq	r0, r0, #0
      80:	0d0efb01 	vstreq	d15, [lr, #-4]
      84:	01010100 	mrseq	r0, (UNDEF: 17)
      88:	00000001 	andeq	r0, r0, r1
      8c:	01000001 	tsteq	r0, r1
      90:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
      94:	5f32336d 	svcpl	0x0032336d
      98:	0062696c 	rsbeq	r6, r2, ip, ror #18
      9c:	726f6300 	rsbvc	r6, pc, #0, 6
      a0:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
      a4:	616d5f33 	cmnvs	sp, r3, lsr pc
	f25519_select(x, a, b, (a[0] ^ parity) & 1);

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
	f25519_normalize(a);
	f25519_normalize(c);
      a8:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}

	return f25519_eq(a, c);
      ac:	00010053 	andeq	r0, r1, r3, asr r0
      b0:	05000000 	streq	r0, [r0, #-0]
      b4:	00000002 	andeq	r0, r0, r2
	uint8_t ok;

	mx2ey(ey, mx);
	ok = ey2ex(ex, ey, parity);

	f25519_normalize(ex);
      b8:	01370300 	teqeq	r7, r0, lsl #6
	f25519_normalize(ey);
      bc:	200b0321 	andcs	r0, fp, r1, lsr #6
      c0:	200b0321 	andcs	r0, fp, r1, lsr #6

	return ok;
}
      c4:	200b0321 	andcs	r0, fp, r1, lsr #6
      c8:	200b032f 	andcs	r0, fp, pc, lsr #6
      cc:	200b032f 	andcs	r0, fp, pc, lsr #6
      d0:	200b032f 	andcs	r0, fp, pc, lsr #6
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
      d4:	200b0321 	andcs	r0, fp, r1, lsr #6
      d8:	200b032f 	andcs	r0, fp, pc, lsr #6
		minusp[i] = c;
      dc:	0a032f2f 	beq	cbda0 <__Stack_Size+0xcb5a0>
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
      e0:	0b032f20 	bleq	cbd68 <__Stack_Size+0xcb568>
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
      e4:	0b032f20 	bleq	cbd6c <__Stack_Size+0xcb56c>

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
      e8:	0b032f20 	bleq	cbd70 <__Stack_Size+0xcb570>
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
      ec:	0b032f20 	bleq	cbd74 <__Stack_Size+0xcb574>
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
      f0:	0b032120 	bleq	c8578 <__Stack_Size+0xc7d78>
      f4:	0b032120 	bleq	c857c <__Stack_Size+0xc7d7c>
      f8:	0b032f20 	bleq	cbd80 <__Stack_Size+0xcb580>
      fc:	0b032120 	bleq	c8584 <__Stack_Size+0xc7d84>
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     100:	0b032120 	bleq	c8588 <__Stack_Size+0xc7d88>

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
     104:	0b032f20 	bleq	cbd8c <__Stack_Size+0xcb58c>
     108:	0b032f20 	bleq	cbd90 <__Stack_Size+0xcb590>
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     10c:	0a032f20 	beq	cbd94 <__Stack_Size+0xcb594>
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
     110:	0b032120 	bleq	c8598 <__Stack_Size+0xc7d98>
     114:	01022120 	tsteq	r2, r0, lsr #2
     118:	94010100 	strls	r0, [r1], #-256	; 0x100
     11c:	02000004 	andeq	r0, r0, #4
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     120:	0000be00 	andeq	fp, r0, r0, lsl #28
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
     124:	fb010200 	blx	4092e <__Stack_Size+0x4012e>
     128:	01000d0e 	tsteq	r0, lr, lsl #26
		fprime_copy(plusa, r);
		fprime_add(plusa, a, modulus);

		fprime_select(r, r, plusa, bit);
	}
}
     12c:	00010101 	andeq	r0, r1, r1, lsl #2

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
     130:	00010000 	andeq	r0, r1, r0
	i <<= 3;

	while (x) {
     134:	2f2e0100 	svccs	0x002e0100
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
     138:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     13c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
	f25519_mul__distinct(x3, a, a);

	f25519_mul_c(a, x1z1, 486662);
	f25519_add(a, x1sq, a);
	f25519_add(a, z1sq, a);
	f25519_mul__distinct(x1sq, x1z1, a);
     140:	2f2e0062 	svccs	0x002e0062
	f25519_mul_c(z3, x1sq, 4);
     144:	5f627375 	svcpl	0x00627375
     148:	0062696c 	rsbeq	r6, r2, ip, ror #18
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	62737500 	rsbsvs	r7, r3, #0, 10
     150:	0000632e 	andeq	r6, r0, lr, lsr #6
     154:	74730000 	ldrbtvc	r0, [r3], #-0
	f25519_sub(b, x3, z3); /* D */
     158:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     15c:	5f783031 	svcpl	0x00783031
	f25519_mul__distinct(da, a, b);
     160:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     164:	0100682e 	tsteq	r0, lr, lsr #16
     168:	61680000 	cmnvs	r8, r0

	f25519_sub(b, x2, z2);
     16c:	61776472 	cmnvs	r7, r2, ror r4
     170:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
	f25519_add(a, x3, z3); /* C */
     174:	00000000 	andeq	r0, r0, r0
     178:	5f627375 	svcpl	0x00627375
     17c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
	f25519_mul__distinct(cb, a, b);
     180:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     184:	73750000 	cmnvc	r5, #0

	f25519_add(a, da, cb);
     188:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     18c:	00682e66 	rsbeq	r2, r8, r6, ror #28
     190:	75000002 	strvc	r0, [r0, #-2]
	f25519_mul__distinct(b, a, a);
     194:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     198:	00000000 	andeq	r0, r0, r0
	f25519_mul__distinct(x5, z1, b);
     19c:	5f627375 	svcpl	0x00627375
     1a0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     1a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000

	f25519_sub(a, da, cb);
     1a8:	73750000 	cmnvc	r5, #0
     1ac:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
	f25519_mul__distinct(b, a, a);
     1b0:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     1b4:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     1b8:	0000682e 	andeq	r6, r0, lr, lsr #16

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	66640000 	strbtvs	r0, [r4], -r0
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	00682e75 	rsbeq	r2, r8, r5, ror lr
     1c4:	75000000 	strvc	r0, [r0, #-0]

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
     1cc:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
     1d0:	00020068 	andeq	r0, r2, r8, rrx
     1d4:	62737500 	rsbsvs	r7, r3, #0, 10
		f25519_select(zm1, zm1, zm, bit);
     1d8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     1dc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1e0:	00000000 	andeq	r0, r0, r0
		f25519_select(xm, xm, xms, bit);
     1e4:	0b980205 	bleq	fe600a00 <BootRAM+0xd5711a1>
     1e8:	a7030800 	strge	r0, [r3, -r0, lsl #16]
     1ec:	01020101 	tsteq	r2, r1, lsl #2
		f25519_select(zm, zm, zms, bit);
     1f0:	00010100 	andeq	r0, r1, r0, lsl #2
     1f4:	0b9c0205 	bleq	fe700a10 <BootRAM+0xd6711b1>
     1f8:	d7030800 	strle	r0, [r3, -r0, lsl #16]
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	01020102 	tsteq	r2, r2, lsl #2
     200:	00010100 	andeq	r0, r1, r0, lsl #2
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	0ba00205 	bleq	fe800a20 <BootRAM+0xd7711c1>
     208:	dc030800 	stcle	8, cr0, [r3], {-0}
	f25519_mul__distinct(result, zm1, xm);
     20c:	01020102 	tsteq	r2, r2, lsl #2
     210:	00010100 	andeq	r0, r1, r0, lsl #2
	f25519_normalize(result);
     214:	0ba40205 	bleq	fe900a30 <BootRAM+0xd8711d1>
     218:	93030800 	movwls	r0, #14336	; 0x3800
}
     21c:	24150103 	ldrcs	r0, [r5], #-259	; 0x103
     220:	01000402 	tsteq	r0, r2, lsl #8
     224:	02050001 	andeq	r0, r5, #1
     228:	08000bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp}
     22c:	0103bf03 	tsteq	r3, r3, lsl #30
     230:	01000102 	tsteq	r0, r2, lsl #2
     234:	02050001 	andeq	r0, r5, #1
     238:	08000bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp}
     23c:	0103c403 	tsteq	r3, r3, lsl #8
     240:	08024b13 	stmdaeq	r2, {r0, r1, r4, r8, r9, fp, lr}
     244:	00010100 	andeq	r0, r1, r0, lsl #2
     248:	0bcc0205 	bleq	ff300a64 <BootRAM+0xe271205>
     24c:	cb030800 	blgt	c2254 <__Stack_Size+0xc1a54>
     250:	01020103 	tsteq	r2, r3, lsl #2
     254:	00010100 	andeq	r0, r1, r0, lsl #2
     258:	0bd00205 	bleq	ff400a74 <BootRAM+0xe371215>
     25c:	d0030800 	andle	r0, r3, r0, lsl #16
     260:	01020103 	tsteq	r2, r3, lsl #2
     264:	00010100 	andeq	r0, r1, r0, lsl #2
     268:	0bd40205 	bleq	ff500a84 <BootRAM+0xe471225>
     26c:	d5030800 	strle	r0, [r3, #-2048]	; 0x800
     270:	01020103 	tsteq	r2, r3, lsl #2
     274:	00010100 	andeq	r0, r1, r0, lsl #2
     278:	0bd80205 	bleq	ff600a94 <BootRAM+0xe571235>
     27c:	da030800 	ble	c2284 <__Stack_Size+0xc1a84>
     280:	01020103 	tsteq	r2, r3, lsl #2
     284:	00010100 	andeq	r0, r1, r0, lsl #2
     288:	0bdc0205 	bleq	ff700aa4 <BootRAM+0xe671245>
     28c:	df030800 	svcle	0x00030800
     290:	01020103 	tsteq	r2, r3, lsl #2
     294:	00010100 	andeq	r0, r1, r0, lsl #2
     298:	0be00205 	bleq	ff800ab4 <BootRAM+0xe771255>
     29c:	e4030800 	str	r0, [r3], #-2048	; 0x800
     2a0:	01020103 	tsteq	r2, r3, lsl #2
     2a4:	00010100 	andeq	r0, r1, r0, lsl #2
     2a8:	0be40205 	bleq	ff900ac4 <BootRAM+0xe871265>
     2ac:	e9030800 	stmdb	r3, {fp}
     2b0:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     2b4:	01010006 	tsteq	r1, r6
     2b8:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
     2bc:	0308000b 	movweq	r0, #32779	; 0x800b
     2c0:	210102bd 			; <UNDEFINED> instruction: 0x210102bd
     2c4:	211f2130 	tstcs	pc, r0, lsr r1	; <UNPREDICTABLE>
     2c8:	23222f1f 	teqcs	r2, #31, 30	; 0x7c
     2cc:	2323221b 	teqcs	r3, #-1342177279	; 0xb0000001
     2d0:	1e22831d 	mcrne	3, 1, r8, cr2, cr13, {0}
     2d4:	21572184 	cmpcs	r7, r4, lsl #3
     2d8:	232d212d 	teqcs	sp, #1073741835	; 0x4000000b
     2dc:	7630221e 			; <UNDEFINED> instruction: 0x7630221e
     2e0:	221f2f3e 	andscs	r2, pc, #62, 30	; 0xf8
     2e4:	0100082d 	tsteq	r0, sp, lsr #16
     2e8:	02050001 	andeq	r0, r5, #1
     2ec:	08000c98 	stmdaeq	r0, {r3, r4, r7, sl, fp}
     2f0:	0102e003 	tsteq	r2, r3
     2f4:	03251b25 	teqeq	r5, #37888	; 0x9400
     2f8:	0321661f 	teqeq	r1, #32505856	; 0x1f00000
     2fc:	084c2061 	stmdaeq	ip, {r0, r5, r6, sp}^
     300:	20100317 	andscs	r0, r0, r7, lsl r3
     304:	211e2121 	tstcs	lr, r1, lsr #2
     308:	69032221 	stmdbvs	r3, {r0, r5, r9, sp}
     30c:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
     310:	02211c21 	eoreq	r1, r1, #8448	; 0x2100
     314:	0101000c 	tsteq	r1, ip
     318:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
     31c:	0308000d 	movweq	r0, #32781	; 0x800d
     320:	1301039d 	movwne	r0, #5021	; 0x139d
     324:	01000602 	tsteq	r0, r2, lsl #12
     328:	02050001 	andeq	r0, r5, #1
     32c:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
     330:	0103a203 	tsteq	r3, r3, lsl #4
     334:	00060213 	andeq	r0, r6, r3, lsl r2
     338:	05000101 	streq	r0, [r0, #-257]	; 0x101
     33c:	000d2402 	andeq	r2, sp, r2, lsl #8
     340:	03a70308 			; <UNDEFINED> instruction: 0x03a70308
     344:	313d1301 	teqcc	sp, r1, lsl #6
     348:	0006025a 	andeq	r0, r6, sl, asr r2
     34c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     350:	000d4402 	andeq	r4, sp, r2, lsl #8
     354:	03b10308 			; <UNDEFINED> instruction: 0x03b10308
     358:	06021301 	streq	r1, [r2], -r1, lsl #6
     35c:	00010100 	andeq	r0, r1, r0, lsl #2
     360:	0d500205 	lfmeq	f0, 2, [r0, #-20]	; 0xffffffec
     364:	88030800 	stmdahi	r3, {fp}
     368:	7a210103 	bvc	84077c <__Stack_Size+0x83ff7c>
     36c:	023d1b21 	eorseq	r1, sp, #33792	; 0x8400
     370:	01010007 	tsteq	r1, r7
     374:	78020500 	stmdavc	r2, {r8, sl}
     378:	0308000d 	movweq	r0, #32781	; 0x800d
     37c:	3d0102ad 	sfmcc	f0, 4, [r1, #-692]	; 0xfffffd4c
     380:	3c4e0330 	mcrrcc	3, 3, r0, lr, cr0
     384:	03203203 	teqeq	r0, #805306368	; 0x30000000
     388:	2222204e 	eorcs	r2, r2, #78	; 0x4e
     38c:	03241c30 	teqeq	r4, #48, 24	; 0x3000
     390:	0e032e7a 	mcreq	14, 0, r2, cr3, cr10, {3}
     394:	2074033c 	rsbscs	r0, r4, ip, lsr r3
     398:	03200c03 	teqeq	r0, #768	; 0x300
     39c:	0b032075 	bleq	c8578 <__Stack_Size+0xc7d78>
     3a0:	20760320 	rsbscs	r0, r6, r0, lsr #6
     3a4:	03272130 	teqeq	r7, #48, 2
     3a8:	032d2e28 	teqeq	sp, #40, 28	; 0x280
     3ac:	032e01c0 	teqeq	lr, #192, 2	; 0x30
     3b0:	03207ec1 	teqeq	r0, #3088	; 0xc10
     3b4:	032001c3 	teqeq	r0, #-1073741776	; 0xc0000030
     3b8:	03207ebe 	teqeq	r0, #3040	; 0xbe0
     3bc:	2f2001bf 	svccs	0x002001bf
     3c0:	03322b2f 	teqeq	r2, #48128	; 0xbc00
     3c4:	2f2e7ec2 	svccs	0x002e7ec2
     3c8:	01001202 	tsteq	r0, r2, lsl #4
     3cc:	02050001 	andeq	r0, r5, #1
     3d0:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
     3d4:	0100ec03 	tsteq	r0, r3, lsl #24
     3d8:	03201803 	teqeq	r0, #196608	; 0x30000
     3dc:	18032068 	stmdane	r3, {r3, r5, r6, sp}
     3e0:	2f1f2f20 	svccs	0x001f2f20
     3e4:	2e780360 	cdpcs	3, 7, cr0, cr8, cr0, {3}
     3e8:	04020044 	streq	r0, [r2], #-68	; 0x44
     3ec:	063c0602 	ldrteq	r0, [ip], -r2, lsl #12
     3f0:	1c232f6d 	stcne	15, cr2, [r3], #-436	; 0xfffffe4c
     3f4:	212c2121 	teqcs	ip, r1, lsr #2
     3f8:	0321302f 	teqeq	r1, #47	; 0x2f
     3fc:	6d032016 	stcvs	0, cr2, [r3, #-88]	; 0xffffffa8
     400:	000c022e 	andeq	r0, ip, lr, lsr #4
     404:	05000101 	streq	r0, [r0, #-257]	; 0x101
     408:	000e7402 	andeq	r7, lr, r2, lsl #8
     40c:	01a00308 	lsleq	r0, r8, #6
     410:	00f40301 	rscseq	r0, r4, r1, lsl #6
     414:	032d2101 	teqeq	sp, #1073741824	; 0x40000000
     418:	03207f8c 	teqeq	r0, #140, 30	; 0x230
     41c:	222000f4 	eorcs	r0, r0, #244	; 0xf4
     420:	200d031f 	andcs	r0, sp, pc, lsl r3
     424:	033c7403 	teqeq	ip, #50331648	; 0x3000000
     428:	024f200c 	subeq	r2, pc, #12
     42c:	0101000c 	tsteq	r1, ip
     430:	00020500 	andeq	r0, r2, r0, lsl #10
     434:	03000000 	movweq	r0, #0
     438:	140101ad 	strne	r0, [r1], #-429	; 0x1ad
     43c:	01000202 	tsteq	r0, r2, lsl #4
     440:	02050001 	andeq	r0, r5, #1
     444:	00000000 	andeq	r0, r0, r0
     448:	0101b303 	tsteq	r1, r3, lsl #6
     44c:	251b2514 	ldrcs	r2, [fp, #-1300]	; 0x514
     450:	023f221b 	eorseq	r2, pc, #-1342177279	; 0xb0000001
     454:	01010006 	tsteq	r1, r6
     458:	00020500 	andeq	r0, r2, r0, lsl #10
     45c:	03000000 	movweq	r0, #0
     460:	160101be 			; <UNDEFINED> instruction: 0x160101be
     464:	2b252c22 	blcs	94b4f4 <__Stack_Size+0x94acf4>
     468:	00040231 	andeq	r0, r4, r1, lsr r2
     46c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     470:	000eac02 	andeq	sl, lr, r2, lsl #24
     474:	01cb0308 	biceq	r0, fp, r8, lsl #6
     478:	1d1f1601 	ldcne	6, cr1, [pc, #-4]	; 47c <_Minimum_Stack_Size+0x37c>
     47c:	1a033024 	bne	cc514 <__Stack_Size+0xcbd14>
     480:	222f5982 	eorcs	r5, pc, #2129920	; 0x208000
     484:	2f1f232c 	svccs	0x001f232c
     488:	03200903 	teqeq	r0, #49152	; 0xc000
     48c:	2c223c49 	stccs	12, cr3, [r2], #-292	; 0xfffffedc
     490:	10032b25 	andne	r2, r3, r5, lsr #22
     494:	20700320 	rsbscs	r0, r0, r0, lsr #6
     498:	200d0323 	andcs	r0, sp, r3, lsr #6
     49c:	03202503 	teqeq	r0, #12582912	; 0xc00000
     4a0:	2c223c49 	stccs	12, cr3, [r2], #-292	; 0xfffffedc
     4a4:	14032b25 	strne	r2, [r3], #-2853	; 0xb25
     4a8:	206c0320 	rsbcs	r0, ip, r0, lsr #6
     4ac:	20110323 	andscs	r0, r1, r3, lsr #6
     4b0:	03202103 	teqeq	r0, #-1073741824	; 0xc0000000
     4b4:	032f3c62 	teqeq	pc, #25088	; 0x6200
     4b8:	66032e1d 			; <UNDEFINED> instruction: 0x66032e1d
     4bc:	3f3d593c 	svccc	0x003d593c
     4c0:	1c241d23 	stcne	13, cr1, [r4], #-140	; 0xffffff74
     4c4:	03213d22 	teqeq	r1, #2176	; 0x880
     4c8:	31392011 	teqcc	r9, r1, lsl r0
     4cc:	01000802 	tsteq	r0, r2, lsl #16
     4d0:	02050001 	andeq	r0, r5, #1
     4d4:	00000000 	andeq	r0, r0, r0
     4d8:	0101fc03 	tsteq	r1, r3, lsl #24
     4dc:	22221e14 	eorcs	r1, r2, #20, 28	; 0x140
     4e0:	1f1d2222 	svcne	0x001d2222
     4e4:	2e7a0324 	cdpcs	3, 7, cr0, cr10, cr4, {1}
     4e8:	200c033e 	andcs	r0, ip, lr, lsr r3
     4ec:	03207503 	teqeq	r0, #12582912	; 0xc00000
     4f0:	7603200b 	strvc	r2, [r3], -fp
     4f4:	200a0320 	andcs	r0, sl, r0, lsr #6
     4f8:	21207803 	teqcs	r0, r3, lsl #16
     4fc:	0d023327 	stceq	3, cr3, [r2, #-156]	; 0xffffff64
     500:	00010100 	andeq	r0, r1, r0, lsl #2
     504:	00000205 	andeq	r0, r0, r5, lsl #4
     508:	93030000 	movwls	r0, #12288	; 0x3000
     50c:	21130102 	tstcs	r3, r2, lsl #2
     510:	1f21211e 	svcne	0x0021211e
     514:	0d031f22 	stceq	15, cr1, [r3, #-136]	; 0xffffff78
     518:	3c740320 	ldclcc	3, cr0, [r4], #-128	; 0xffffff80
     51c:	4f200c03 	svcmi	0x00200c03
     520:	024d1d23 	subeq	r1, sp, #2240	; 0x8c0
     524:	01010008 	tsteq	r1, r8
     528:	74020500 	strvc	r0, [r2], #-1280	; 0x500
     52c:	0308000f 	movweq	r0, #32783	; 0x800f
     530:	230103f0 	movwcs	r0, #5104	; 0x13f0
     534:	2f40231d 	svccs	0x0040231d
     538:	01000602 	tsteq	r0, r2, lsl #12
     53c:	02050001 	andeq	r0, r5, #1
     540:	08000f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp}
     544:	0103fb03 	tsteq	r3, r3, lsl #22
     548:	022f4e30 	eoreq	r4, pc, #48, 28	; 0x300
     54c:	01010003 	tsteq	r1, r3
     550:	a8020500 	stmdage	r2, {r8, sl}
     554:	0308000f 	movweq	r0, #32783	; 0x800f
     558:	21010485 	smlabbcs	r1, r5, r4, r0
     55c:	60331b41 	eorsvs	r1, r3, r1, asr #22
     560:	59580f03 	ldmdbpl	r8, {r0, r1, r8, r9, sl, fp}^
     564:	84036050 	strhi	r6, [r3], #-80	; 0x50
     568:	1b25587d 	blne	956764 <__Stack_Size+0x955f64>
     56c:	20038603 	andcs	r8, r3, r3, lsl #12
     570:	207cfa03 	rsbscs	pc, ip, r3, lsl #20
     574:	81033122 	tsthi	r3, r2, lsr #2
     578:	fc032003 	stc2	0, cr2, [r3], {3}
     57c:	03232e7c 	teqeq	r3, #124, 28	; 0x7c0
     580:	26200381 	strtcs	r0, [r0], -r1, lsl #7
     584:	3d1f2159 	ldfccs	f2, [pc, #-356]	; 428 <_Minimum_Stack_Size+0x328>
     588:	244d6750 	strbcs	r6, [sp], #-1872	; 0x750
     58c:	2e5d032a 	cdpcs	3, 5, cr0, cr13, cr10, {1}
     590:	5869034b 	stmdapl	r9!, {r0, r1, r3, r6, r8, r9}^
     594:	1f2f1f21 	svcne	0x002f1f21
     598:	3c790321 	ldclcc	3, cr0, [r9], #-132	; 0xffffff7c
     59c:	01001202 	tsteq	r0, r2, lsl #4
     5a0:	02050001 	andeq	r0, r5, #1
     5a4:	00000000 	andeq	r0, r0, r0
     5a8:	0104d503 	tsteq	r4, r3, lsl #10
     5ac:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
     5b0:	6e010100 	adfvss	f0, f1, f0
     5b4:	02000000 	andeq	r0, r0, #0
     5b8:	00006800 	andeq	r6, r0, r0, lsl #16
     5bc:	fb010200 	blx	40dc6 <__Stack_Size+0x405c6>
     5c0:	01000d0e 	tsteq	r0, lr, lsl #26
     5c4:	00010101 	andeq	r0, r1, r1, lsl #2
     5c8:	00010000 	andeq	r0, r1, r0
     5cc:	2f2e0100 	svccs	0x002e0100
     5d0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     5d4:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     5d8:	2f2e0062 	svccs	0x002e0062
     5dc:	5f627375 	svcpl	0x00627375
     5e0:	0062696c 	rsbeq	r6, r2, ip, ror #18
     5e4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     5e8:	31663233 	cmncc	r6, r3, lsr r2
     5ec:	745f7830 	ldrbvc	r7, [pc], #-2096	; 5f4 <_Minimum_Stack_Size+0x4f4>
     5f0:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     5f4:	00010068 	andeq	r0, r1, r8, rrx
     5f8:	62737500 	rsbsvs	r7, r3, #0, 10
     5fc:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
     600:	00682e65 	rsbeq	r2, r8, r5, ror #28
     604:	75000002 	strvc	r0, [r0, #-2]
     608:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     60c:	00000000 	andeq	r0, r0, r0
     610:	5f627375 	svcpl	0x00627375
     614:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
     618:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     61c:	632e726f 	teqvs	lr, #-268435450	; 0xf0000006
     620:	00000000 	andeq	r0, r0, r0
     624:	0000d300 	andeq	sp, r0, r0, lsl #6
     628:	5d000200 	sfmpl	f0, 4, [r0, #-0]
     62c:	02000000 	andeq	r0, r0, #0
     630:	0d0efb01 	vstreq	d15, [lr, #-4]
     634:	01010100 	mrseq	r0, (UNDEF: 17)
     638:	00000001 	andeq	r0, r0, r1
     63c:	01000001 	tsteq	r0, r1
     640:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
     644:	5f32336d 	svcpl	0x0032336d
     648:	0062696c 	rsbeq	r6, r2, ip, ror #18
     64c:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     650:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     654:	73000000 	movwvc	r0, #0
     658:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     65c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     660:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     664:	00682e65 	rsbeq	r2, r8, r5, ror #28
     668:	68000001 	stmdavs	r0, {r0}
     66c:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
     670:	2e657261 	cdpcs	2, 6, cr7, cr5, cr1, {3}
     674:	00000068 	andeq	r0, r0, r8, rrx
     678:	62737500 	rsbsvs	r7, r3, #0, 10
     67c:	0000682e 	andeq	r6, r0, lr, lsr #16
     680:	66640000 	strbtvs	r0, [r4], -r0
     684:	00682e75 	rsbeq	r2, r8, r5, ror lr
     688:	00000000 	andeq	r0, r0, r0
     68c:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
     690:	03080010 	movweq	r0, #32784	; 0x8010
     694:	2220013c 	eorcs	r0, r0, #60, 2
     698:	02040200 	andeq	r0, r4, #0, 4
     69c:	04020021 	streq	r0, [r2], #-33	; 0x21
     6a0:	02002d02 	andeq	r2, r0, #2, 26	; 0x80
     6a4:	00210204 	eoreq	r0, r1, r4, lsl #4
     6a8:	2d020402 	cfstrscs	mvf0, [r2, #-8]
     6ac:	022d2130 	eoreq	r2, sp, #48, 2
     6b0:	01010007 	tsteq	r1, r7
     6b4:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
     6b8:	03080010 	movweq	r0, #32784	; 0x8010
     6bc:	320100c4 	andcc	r0, r1, #196	; 0xc4
     6c0:	2f2f2f2f 	svccs	0x002f2f2f
     6c4:	3e2f2f2f 	cdpcc	15, 2, cr2, cr15, cr15, {1}
     6c8:	033d3d5d 	teqeq	sp, #5952	; 0x1740
     6cc:	92a46619 	adcls	r6, r4, #26214400	; 0x1900000
     6d0:	5f033d4c 	svcpl	0x00033d4c
     6d4:	3c16033c 	ldccc	3, cr0, [r6], {60}	; 0x3c
     6d8:	03905303 	orrseq	r5, r0, #201326592	; 0xc000000
     6dc:	312b2033 	teqcc	fp, r3, lsr r0
     6e0:	033d4c84 	teqeq	sp, #132, 24	; 0x8400
     6e4:	0c032e78 	stceq	14, cr2, [r3], {120}	; 0x78
     6e8:	033f3d2e 	teqeq	pc, #2944	; 0xb80
     6ec:	03433c66 	movteq	r3, #15462	; 0x3c66
     6f0:	033e9e74 	teqeq	lr, #116, 28	; 0x740
     6f4:	023e2079 	eorseq	r2, lr, #121	; 0x79
     6f8:	0101001a 	tsteq	r1, sl, lsl r0
     6fc:	000005f8 	strdeq	r0, [r0], -r8
     700:	01d80002 	bicseq	r0, r8, r2
     704:	01020000 	mrseq	r0, (UNDEF: 2)
     708:	000d0efb 	strdeq	r0, [sp], -fp
     70c:	01010101 	tsteq	r1, r1, lsl #2
     710:	01000000 	mrseq	r0, (UNDEF: 0)
     714:	63010000 	movwvs	r0, #4096	; 0x1000
     718:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
     71c:	6172676f 	cmnvs	r2, pc, ror #14
     720:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
     724:	2073656c 	rsbscs	r6, r3, ip, ror #10
     728:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
     72c:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
     730:	6f742075 	svcvs	0x00742075
     734:	20736c6f 	rsbscs	r6, r3, pc, ror #24
     738:	206d7261 	rsbcs	r7, sp, r1, ror #4
     73c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     740:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     744:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
     748:	31303220 	teqcc	r0, r0, lsr #4
     74c:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
     750:	5c62696c 	stclpl	9, cr6, [r2], #-432	; 0xfffffe50
     754:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
     758:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     75c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     760:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     764:	2e345c69 	cdpcs	12, 3, cr5, cr4, cr9, {3}
     768:	5c342e38 	ldcpl	14, cr2, [r4], #-224	; 0xffffff20
     76c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     770:	00656475 	rsbeq	r6, r5, r5, ror r4
     774:	705c3a63 	subsvc	r3, ip, r3, ror #20
     778:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
     77c:	66206d61 	strtvs	r6, [r0], -r1, ror #26
     780:	73656c69 	cmnvc	r5, #26880	; 0x6900
     784:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
     788:	675c2936 	smmlarvs	ip, r6, r9, r2
     78c:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
     790:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     794:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
     798:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
     79c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     7a0:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
     7a4:	30322038 	eorscc	r2, r2, r8, lsr r0
     7a8:	33713431 	cmncc	r1, #822083584	; 0x31000000
     7ac:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     7b0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     7b4:	61652d65 	cmnvs	r5, r5, ror #26
     7b8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     7bc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     7c0:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     7c4:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     7c8:	6300656e 	movwvs	r6, #1390	; 0x56e
     7cc:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
     7d0:	6172676f 	cmnvs	r2, pc, ror #14
     7d4:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
     7d8:	2073656c 	rsbscs	r6, r3, ip, ror #10
     7dc:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
     7e0:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
     7e4:	6f742075 	svcvs	0x00742075
     7e8:	20736c6f 	rsbscs	r6, r3, pc, ror #24
     7ec:	206d7261 	rsbcs	r7, sp, r1, ror #4
     7f0:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     7f4:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     7f8:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
     7fc:	31303220 	teqcc	r0, r0, lsr #4
     800:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
     804:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     808:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     80c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     810:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     814:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     818:	2f2e0065 	svccs	0x002e0065
     81c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     820:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     824:	2f2e0062 	svccs	0x002e0062
     828:	31353532 	teqcc	r5, r2, lsr r5
     82c:	68000039 	stmdavs	r0, {r0, r3, r4, r5}
     830:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
     834:	2e657261 	cdpcs	2, 6, cr7, cr5, cr1, {3}
     838:	00000063 	andeq	r0, r0, r3, rrx
     83c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     840:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
     844:	00010068 	andeq	r0, r1, r8, rrx
     848:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     84c:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
     850:	00010068 	andeq	r0, r1, r8, rrx
     854:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
     858:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     85c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     860:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     864:	00020068 	andeq	r0, r2, r8, rrx
     868:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     86c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     870:	00030068 	andeq	r0, r3, r8, rrx
     874:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     878:	31663233 	cmncc	r6, r3, lsr r2
     87c:	745f7830 	ldrbvc	r7, [pc], #-2096	; 884 <__Stack_Size+0x84>
     880:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     884:	00040068 	andeq	r0, r4, r8, rrx
     888:	72616800 	rsbvc	r6, r1, #0, 16
     88c:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
     890:	00682e65 	rsbeq	r2, r8, r5, ror #28
     894:	3c000000 	stccc	0, cr0, [r0], {-0}
     898:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
     89c:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
     8a0:	0000003e 	andeq	r0, r0, lr, lsr r0
     8a4:	61687300 	cmnvs	r8, r0, lsl #6
     8a8:	2e363532 	mrccs	5, 1, r3, cr6, cr2, {1}
     8ac:	00050068 	andeq	r0, r5, r8, rrx
     8b0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     8b4:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     8b8:	00000300 	andeq	r0, r0, r0, lsl #6
     8bc:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     8c0:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     8c4:	00000300 	andeq	r0, r0, r0, lsl #6
     8c8:	69736465 	ldmdbvs	r3!, {r0, r2, r5, r6, sl, sp, lr}^
     8cc:	682e6e67 	stmdavs	lr!, {r0, r1, r2, r5, r6, r9, sl, fp, sp, lr}
     8d0:	00000500 	andeq	r0, r0, r0, lsl #10
     8d4:	2e627375 	mcrcs	3, 3, r7, cr2, cr5, {3}
     8d8:	00000068 	andeq	r0, r0, r8, rrx
     8dc:	05000000 	streq	r0, [r0, #-0]
     8e0:	0011ec02 	andseq	lr, r1, r2, lsl #24
     8e4:	01390308 	teqeq	r9, r8, lsl #6
     8e8:	024b3b14 	subeq	r3, fp, #20, 22	; 0x5000
     8ec:	01010004 	tsteq	r1, r4
     8f0:	04020500 	streq	r0, [r2], #-1280	; 0x500
     8f4:	03080012 	movweq	r0, #32786	; 0x8012
     8f8:	5d14013e 	ldfpls	f0, [r4, #-248]	; 0xffffff08
     8fc:	01000402 	tsteq	r0, r2, lsl #8
     900:	02050001 	andeq	r0, r5, #1
     904:	08001218 	stmdaeq	r0, {r3, r4, r9, ip}
     908:	0100c803 	tsteq	r0, r3, lsl #16
     90c:	03207303 	teqeq	r0, #201326592	; 0xc000000
     910:	03323c0d 	teqeq	r2, #3328	; 0xd00
     914:	033d206e 	teqeq	sp, #110	; 0x6e
     918:	02006611 	andeq	r6, r0, #17825792	; 0x1100000
     91c:	06840104 	streq	r0, [r4], r4, lsl #2
     920:	04020020 	streq	r0, [r2], #-32
     924:	00220602 	eoreq	r0, r2, r2, lsl #12
     928:	1e020402 	cdpne	4, 0, cr0, cr2, cr2, {0}
     92c:	002e6d03 	eoreq	r6, lr, r3, lsl #26
     930:	03020402 	movweq	r0, #9218	; 0x2402
     934:	02002e1c 	andeq	r2, r0, #28, 28	; 0x1c0
     938:	031e0204 	tsteq	lr, #4, 4	; 0x40000000
     93c:	6f032e77 	svcvs	0x00032e77
     940:	2011033c 	andscs	r0, r1, ip, lsr r3
     944:	03200f03 	teqeq	r0, #3, 30
     948:	6f032e71 	svcvs	0x00032e71
     94c:	2e11033c 	mrccs	3, 0, r0, cr1, cr12, {1}
     950:	01000202 	tsteq	r0, r2, lsl #4
     954:	02050001 	andeq	r0, r5, #1
     958:	00000000 	andeq	r0, r0, r0
     95c:	01029f03 	tsteq	r2, r3, lsl #30
     960:	01040200 	mrseq	r0, R12_usr
     964:	02023d13 	andeq	r3, r2, #1216	; 0x4c0
     968:	00010100 	andeq	r0, r1, r0, lsl #2
     96c:	00000205 	andeq	r0, r0, r5, lsl #4
     970:	a5030000 	strge	r0, [r3, #-0]
     974:	03130102 	tsteq	r3, #-2147483648	; 0x80000000
     978:	253d2e7a 	ldrcs	r2, [sp, #-3706]!	; 0xe7a
     97c:	01000502 	tsteq	r0, r2, lsl #10
     980:	02050001 	andeq	r0, r5, #1
     984:	00000000 	andeq	r0, r0, r0
     988:	0102ae03 	tsteq	r2, r3, lsl #28
     98c:	7603222e 	strvc	r2, [r3], -lr, lsr #4
     990:	3c7a0366 	ldclcc	3, cr0, [sl], #-408	; 0xfffffe68
     994:	0f032567 	svceq	0x00032567
     998:	0005024a 	andeq	r0, r5, sl, asr #4
     99c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     9a0:	00127802 	andseq	r7, r2, r2, lsl #16
     9a4:	02b80308 	adcseq	r0, r8, #8, 6	; 0x20000000
     9a8:	78033c01 	stmdavc	r3, {r0, sl, fp, ip, sp}
     9ac:	2e0a033c 	mcrcs	3, 0, r0, cr10, cr12, {1}
     9b0:	03207603 	teqeq	r0, #3145728	; 0x300000
     9b4:	7a034a76 	bvc	d3394 <__Stack_Size+0xd2b94>
     9b8:	0325673c 	teqeq	r5, #60, 14	; 0xf00000
     9bc:	07024a17 	smladeq	r2, r7, sl, r4
     9c0:	00010100 	andeq	r0, r1, r0, lsl #2
     9c4:	12bc0205 	adcsne	r0, ip, #1342177280	; 0x50000000
     9c8:	e5030800 	str	r0, [r3, #-2048]	; 0x800
     9cc:	03270102 	teqeq	r7, #-2147483648	; 0x80000000
     9d0:	59262079 	stmdbpl	r6!, {r0, r3, r4, r5, r6, sp}
     9d4:	034a1603 	movteq	r1, #42499	; 0xa603
     9d8:	212c2071 	teqcs	ip, r1, ror r0
     9dc:	2c2f2f1e 	stccs	15, cr2, [pc], #-120	; 96c <__Stack_Size+0x16c>
     9e0:	2f2c3331 	svccs	0x002c3331
     9e4:	2b322f1f 	blcs	c8c668 <__Stack_Size+0xc8be68>
     9e8:	03222432 	teqeq	r2, #838860800	; 0x32000000
     9ec:	2f2f2e7a 	svccs	0x002f2e7a
     9f0:	27292f2f 	strcs	r2, [r9, -pc, lsr #30]!
     9f4:	07024b31 	smladxeq	r2, r1, fp, r4
     9f8:	00010100 	andeq	r0, r1, r0, lsl #2
     9fc:	13440205 	movtne	r0, #16901	; 0x4205
     a00:	88030800 	stmdahi	r3, {fp}
     a04:	21130103 	tstcs	r3, r3, lsl #2
     a08:	3d211f1f 	stccc	15, cr1, [r1, #-124]!	; 0xffffff84
     a0c:	242f1b33 	strtcs	r1, [pc], #-2867	; a14 <__Stack_Size+0x214>
     a10:	4c4b591c 	mcrrmi	9, 1, r5, fp, cr12
     a14:	000c0221 	andeq	r0, ip, r1, lsr #4
     a18:	05000101 	streq	r0, [r0, #-257]	; 0x101
     a1c:	00139402 	andseq	r9, r3, r2, lsl #8
     a20:	03920308 	orrseq	r0, r2, #8, 6	; 0x20000000
     a24:	1f2f1501 	svcne	0x002f1501
     a28:	01040200 	mrseq	r0, R12_usr
     a2c:	03344d3d 	teqeq	r4, #3904	; 0xf40
     a30:	0326207a 	teqeq	r6, #122	; 0x7a
     a34:	7603200a 	strvc	r2, [r3], -sl
     a38:	02005b20 	andeq	r5, r0, #32, 22	; 0x8000
     a3c:	03510104 	cmpeq	r1, #4, 2
     a40:	1f2f4a0b 	svcne	0x002f4a0b
     a44:	01040200 	mrseq	r0, R12_usr
     a48:	02593e3d 	subseq	r3, r9, #976	; 0x3d0
     a4c:	0101000b 	tsteq	r1, fp
     a50:	00020500 	andeq	r0, r2, r0, lsl #10
     a54:	03080014 	movweq	r0, #32788	; 0x8014
     a58:	130103bc 	movwne	r0, #5052	; 0x13bc
     a5c:	01000a02 	tsteq	r0, r2, lsl #20
     a60:	02050001 	andeq	r0, r5, #1
     a64:	08001414 	stmdaeq	r0, {r2, r4, sl, ip}
     a68:	0103c003 	tsteq	r3, r3
     a6c:	2f214b14 	svccs	0x00214b14
     a70:	01040200 	mrseq	r0, R12_usr
     a74:	04024b24 	streq	r4, [r2], #-2852	; 0xb24
     a78:	00010100 	andeq	r0, r1, r0, lsl #2
     a7c:	14340205 	ldrtne	r0, [r4], #-517	; 0x205
     a80:	ce030800 	cdpgt	8, 0, cr0, cr3, cr0, {0}
     a84:	21130103 	tstcs	r3, r3, lsl #2
     a88:	211e221f 	tstcs	lr, pc, lsl r2
     a8c:	211f2121 	tstcs	pc, r1, lsr #2
     a90:	0902221e 	stmdbeq	r2, {r1, r2, r3, r4, r9, sp}
     a94:	00010100 	andeq	r0, r1, r0, lsl #2
     a98:	145c0205 	ldrbne	r0, [ip], #-517	; 0x205
     a9c:	d5030800 	strle	r0, [r3, #-2048]	; 0x800
     aa0:	232e0103 	teqcs	lr, #-1073741824	; 0xc0000000
     aa4:	c203af59 	andgt	sl, r3, #356	; 0x164
     aa8:	45036600 	strmi	r6, [r3, #-1536]	; 0x600
     aac:	59ea592e 	stmibpl	sl!, {r1, r2, r3, r5, r8, fp, ip, lr}^
     ab0:	1d233f5b 	stcne	15, cr3, [r3, #-364]!	; 0xfffffe94
     ab4:	23472377 	movtcs	r2, #29559	; 0x7377
     ab8:	033c0903 	teqeq	ip, #49152	; 0xc000
     abc:	21693c77 	smccs	37831	; 0x93c7
     ac0:	295d211f 	ldmdbcs	sp, {r0, r1, r2, r3, r4, r8, sp}^
     ac4:	3c520330 	mrrccc	3, 3, r0, r2, cr0
     ac8:	1d212121 	stfnes	f2, [r1, #-132]!	; 0xffffff7c
     acc:	1d212121 	stfnes	f2, [r1, #-132]!	; 0xffffff7c
     ad0:	20380321 	eorscs	r0, r8, r1, lsr #6
     ad4:	1b417583 	blne	105e0e8 <__Stack_Size+0x105d8e8>
     ad8:	b33e4c2f 	teqlt	lr, #12032	; 0x2f00
     adc:	034d5978 	movteq	r5, #55672	; 0xd978
     ae0:	02272e79 	eoreq	r2, r7, #1936	; 0x790
     ae4:	01010012 	tsteq	r1, r2, lsl r0
     ae8:	00020500 	andeq	r0, r2, r0, lsl #10
     aec:	03000000 	movweq	r0, #0
     af0:	030104a0 	movweq	r0, #5280	; 0x14a0
     af4:	77030109 	strvc	r0, [r3, -r9, lsl #2]
     af8:	23242520 	teqcs	r4, #32, 10	; 0x8000000
     afc:	0502311f 	streq	r3, [r2, #-287]	; 0x11f
     b00:	00010100 	andeq	r0, r1, r0, lsl #2
     b04:	15d40205 	ldrbne	r0, [r4, #517]	; 0x205
     b08:	b2030800 	andlt	r0, r3, #0, 16
     b0c:	b2030104 	andlt	r0, r3, #4, 2
     b10:	ce030101 	adfgts	f0, f3, f1
     b14:	b2032e7e 	andlt	r2, r3, #2016	; 0x7e0
     b18:	ce032001 	cdpgt	0, 0, cr2, cr3, cr1, {0}
     b1c:	0327207e 	teqeq	r7, #126	; 0x7e
     b20:	252e00dd 	strcs	r0, [lr, #-221]!	; 0xdd
     b24:	2f1b331b 	svccs	0x001b331b
     b28:	03302f2f 	teqeq	r0, #47, 30	; 0xbc
     b2c:	03207fa2 	teqeq	r0, #648	; 0x288
     b30:	212e7ecc 	smlawtcs	lr, ip, lr, r7
     b34:	3d1f211f 	ldfccs	f2, [pc, #-124]	; ac0 <__Stack_Size+0x2c0>
     b38:	242f1b25 	strtcs	r1, [pc], #-2853	; b40 <__Stack_Size+0x340>
     b3c:	b603591c 			; <UNDEFINED> instruction: 0xb603591c
     b40:	ca032001 	bgt	c8b4c <__Stack_Size+0xc834c>
     b44:	033d207e 	teqeq	sp, #126	; 0x7e
     b48:	0320019c 	teqeq	r0, #156, 2	; 0x27
     b4c:	3e207ee4 	cdpcc	14, 2, cr7, cr0, cr4, {7}
     b50:	2001b303 	andcs	fp, r1, r3, lsl #6
     b54:	24666303 	strbtcs	r6, [r6], #-771	; 0x303
     b58:	02311f23 	eorseq	r1, r1, #35, 30	; 0x8c
     b5c:	01010015 	tsteq	r1, r5, lsl r0
     b60:	00020500 	andeq	r0, r2, r0, lsl #10
     b64:	03000000 	movweq	r0, #0
     b68:	140104c7 	strne	r0, [r1], #-1223	; 0x4c7
     b6c:	1d23221e 	sfmne	f2, 4, [r3, #-120]!	; 0xffffff88
     b70:	3f1d233f 	svccc	0x001d233f
     b74:	3d2d2123 	stfccs	f2, [sp, #-140]!	; 0xffffff74
     b78:	01000702 	tsteq	r0, r2, lsl #14
     b7c:	02050001 	andeq	r0, r5, #1
     b80:	00000000 	andeq	r0, r0, r0
     b84:	0104d603 	tsteq	r4, r3, lsl #12
     b88:	1c1e2216 	lfmne	f2, 4, [lr], {22}
     b8c:	6d033e24 	stcvs	14, cr3, [r3, #-144]	; 0xffffff70
     b90:	261d23ac 	ldrcs	r2, [sp], -ip, lsr #7
     b94:	3f207a03 	svccc	0x00207a03
     b98:	233f1d23 	teqcs	pc, #2240	; 0x8c0
     b9c:	03201b03 	teqeq	r0, #3072	; 0xc00
     ba0:	18032065 	stmdane	r3, {r0, r2, r5, r6, sp}
     ba4:	6f034d3c 	svcvs	0x00034d3c
     ba8:	20110320 	andscs	r0, r1, r0, lsr #6
     bac:	022e6f03 	eoreq	r6, lr, #3, 30
     bb0:	01010008 	tsteq	r1, r8
     bb4:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
     bb8:	03080016 	movweq	r0, #32790	; 0x8016
     bbc:	030104f1 	movweq	r0, #5361	; 0x14f1
     bc0:	7403010c 	strvc	r0, [r3], #-268	; 0x10c
     bc4:	200c0320 	andcs	r0, ip, r0, lsr #6
     bc8:	1f3e1c24 	svcne	0x003e1c24
     bcc:	232f222f 	teqcs	pc, #-268435454	; 0xf0000002
     bd0:	1c3f311d 	ldfnes	f3, [pc], #-116	; b64 <__Stack_Size+0x364>
     bd4:	31812321 	orrcc	r2, r1, r1, lsr #6
     bd8:	3122301f 	teqcc	r2, pc, lsl r0
     bdc:	024c4921 	subeq	r4, ip, #540672	; 0x84000
     be0:	01010008 	tsteq	r1, r8
     be4:	ec020500 	cfstr32	mvfx0, [r2], {-0}
     be8:	03080016 	movweq	r0, #32790	; 0x8016
     bec:	14010594 	strne	r0, [r1], #-1428	; 0x594
     bf0:	1b331b25 	blne	cc788c <__Stack_Size+0xcc708c>
     bf4:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
     bf8:	01000702 	tsteq	r0, r2, lsl #14
     bfc:	02050001 	andeq	r0, r5, #1
     c00:	08001714 	stmdaeq	r0, {r2, r4, r8, r9, sl, ip}
     c04:	01059e03 	tsteq	r5, r3, lsl #28
     c08:	04020016 	streq	r0, [r2], #-22
     c0c:	07024001 	streq	r4, [r2, -r1]
     c10:	00010100 	andeq	r0, r1, r0, lsl #2
     c14:	17280205 	strne	r0, [r8, -r5, lsl #4]!
     c18:	aa030800 	bge	c2c20 <__Stack_Size+0xc2420>
     c1c:	22130105 	andscs	r0, r3, #1073741825	; 0x40000001
     c20:	22211b22 	eorcs	r1, r1, #34816	; 0x8800
     c24:	01040200 	mrseq	r0, R12_usr
     c28:	2f213d22 	svccs	0x00213d22
     c2c:	0200211e 	andeq	r2, r0, #-2147483641	; 0x80000007
     c30:	4f210104 	svcmi	0x00210104
     c34:	02231d23 	eoreq	r1, r3, #2240	; 0x8c0
     c38:	0101000a 	tsteq	r1, sl
     c3c:	00020500 	andeq	r0, r2, r0, lsl #10
     c40:	03000000 	movweq	r0, #0
     c44:	2f0105bb 	svccs	0x000105bb
     c48:	404a6f03 	submi	r6, sl, r3, lsl #30
     c4c:	03242b21 	teqeq	r4, #33792	; 0x8400
     c50:	032f200b 	teqeq	pc, #11
     c54:	22222e6e 	eorcs	r2, r2, #1760	; 0x6e0
     c58:	03212f3d 	teqeq	r1, #61, 30	; 0xf4
     c5c:	25374a0a 	ldrcs	r4, [r7, #-2570]!	; 0xa0a
     c60:	000d0227 	andeq	r0, sp, r7, lsr #4
     c64:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c68:	00176802 	andseq	r6, r7, r2, lsl #16
     c6c:	05c50308 	strbeq	r0, [r5, #776]	; 0x308
     c70:	221d2301 	andscs	r2, sp, #67108864	; 0x4000000
     c74:	23211d23 	teqcs	r1, #2240	; 0x8c0
     c78:	00211b24 	eoreq	r1, r1, r4, lsr #22
     c7c:	24010402 	strcs	r0, [r1], #-1026	; 0x402
     c80:	001f213d 	andseq	r2, pc, sp, lsr r1	; <UNPREDICTABLE>
     c84:	2f010402 	svccs	0x00010402
     c88:	001f213d 	andseq	r2, pc, sp, lsr r1	; <UNPREDICTABLE>
     c8c:	2f010402 	svccs	0x00010402
     c90:	232f1f3f 	teqcs	pc, #63, 30	; 0xfc
     c94:	000b0225 	andeq	r0, fp, r5, lsr #4
     c98:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c9c:	0017c002 	andseq	ip, r7, r2
     ca0:	05e00308 	strbeq	r0, [r0, #776]!	; 0x308
     ca4:	06021601 	streq	r1, [r2], -r1, lsl #12
     ca8:	00010100 	andeq	r0, r1, r0, lsl #2
     cac:	17cc0205 	strbne	r0, [ip, r5, lsl #4]
     cb0:	e7030800 	str	r0, [r3, -r0, lsl #16]
     cb4:	2f140105 	svccs	0x00140105
     cb8:	0802211f 	stmdaeq	r2, {r0, r1, r2, r3, r4, r8, sp}
     cbc:	00010100 	andeq	r0, r1, r0, lsl #2
     cc0:	17e40205 	strbne	r0, [r4, r5, lsl #4]!
     cc4:	f0030800 			; <UNDEFINED> instruction: 0xf0030800
     cc8:	22140105 	andscs	r0, r4, #1073741825	; 0x40000001
     ccc:	02024c30 	andeq	r4, r2, #48, 24	; 0x3000
     cd0:	00010100 	andeq	r0, r1, r0, lsl #2
     cd4:	17f80205 	ldrbne	r0, [r8, r5, lsl #4]!
     cd8:	fc030800 	stc2	8, cr0, [r3], {-0}
     cdc:	4b140105 	blmi	5010f8 <__Stack_Size+0x5008f8>
     ce0:	01000402 	tsteq	r0, r2, lsl #8
     ce4:	02050001 	andeq	r0, r5, #1
     ce8:	08001808 	stmdaeq	r0, {r3, fp, ip}
     cec:	01068203 	tsteq	r6, r3, lsl #4
     cf0:	02263015 	eoreq	r3, r6, #21
     cf4:	01010009 	tsteq	r1, r9
     cf8:	0000046f 	andeq	r0, r0, pc, ror #8
     cfc:	01e80002 	mvneq	r0, r2
     d00:	01020000 	mrseq	r0, (UNDEF: 2)
     d04:	000d0efb 	strdeq	r0, [sp], -fp
     d08:	01010101 	tsteq	r1, r1, lsl #2
     d0c:	01000000 	mrseq	r0, (UNDEF: 0)
     d10:	63010000 	movwvs	r0, #4096	; 0x1000
     d14:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
     d18:	6172676f 	cmnvs	r2, pc, ror #14
     d1c:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
     d20:	2073656c 	rsbscs	r6, r3, ip, ror #10
     d24:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
     d28:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
     d2c:	6f742075 	svcvs	0x00742075
     d30:	20736c6f 	rsbscs	r6, r3, pc, ror #24
     d34:	206d7261 	rsbcs	r7, sp, r1, ror #4
     d38:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     d3c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     d40:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
     d44:	31303220 	teqcc	r0, r0, lsr #4
     d48:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
     d4c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     d50:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     d54:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     d58:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     d5c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     d60:	616d5c65 	cmnvs	sp, r5, ror #24
     d64:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     d68:	3a630065 	bcc	18c0f04 <__Stack_Size+0x18c0704>
     d6c:	6f72705c 	svcvs	0x0072705c
     d70:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
     d74:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
     d78:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     d7c:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
     d80:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
     d84:	6f6f7420 	svcvs	0x006f7420
     d88:	6120736c 	teqvs	r0, ip, ror #6
     d8c:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
     d90:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
     d94:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
     d98:	20382e34 	eorscs	r2, r8, r4, lsr lr
     d9c:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
     da0:	615c3371 	cmpvs	ip, r1, ror r3
     da4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     da8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     dac:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     db0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     db4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     db8:	732f2e00 	teqvc	pc, #0, 28
     dbc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     dc0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     dc4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     dc8:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
     dcc:	206d6172 	rsbcs	r6, sp, r2, ror r1
     dd0:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
     dd4:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
     dd8:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
     ddc:	20756e67 	rsbscs	r6, r5, r7, ror #28
     de0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; c18 <__Stack_Size+0x418>
     de4:	72612073 	rsbvc	r2, r1, #115	; 0x73
     de8:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
     dec:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
     df0:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
     df4:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
     df8:	71343130 	teqvc	r4, r0, lsr r1
     dfc:	696c5c33 	stmdbvs	ip!, {r0, r1, r4, r5, sl, fp, ip, lr}^
     e00:	63675c62 	cmnvs	r7, #25088	; 0x6200
     e04:	72615c63 	rsbvc	r5, r1, #25344	; 0x6300
     e08:	6f6e2d6d 	svcvs	0x006e2d6d
     e0c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     e10:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     e14:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     e18:	6e695c34 	mcrvs	12, 3, r5, cr9, cr4, {1}
     e1c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     e20:	2f2e0065 	svccs	0x002e0065
     e24:	5f627375 	svcpl	0x00627375
     e28:	0062696c 	rsbeq	r6, r2, ip, ror #18
     e2c:	35322f2e 	ldrcc	r2, [r2, #-3886]!	; 0xf2e
     e30:	00393135 	eorseq	r3, r9, r5, lsr r1
     e34:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     e38:	0000632e 	andeq	r6, r0, lr, lsr #6
     e3c:	645f0000 	ldrbvs	r0, [pc], #-0	; e44 <__Stack_Size+0x644>
     e40:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
     e44:	745f746c 	ldrbvc	r7, [pc], #-1132	; e4c <__Stack_Size+0x64c>
     e48:	73657079 	cmnvc	r5, #121	; 0x79
     e4c:	0100682e 	tsteq	r0, lr, lsr #16
     e50:	74730000 	ldrbtvc	r0, [r3], #-0
     e54:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     e58:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     e5c:	74730000 	ldrbtvc	r0, [r3], #-0
     e60:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     e64:	5f783031 	svcpl	0x00783031
     e68:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     e6c:	0300682e 	movweq	r6, #2094	; 0x82e
     e70:	74730000 	ldrbtvc	r0, [r3], #-0
     e74:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     e78:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     e7c:	73750000 	cmnvc	r5, #0
     e80:	6f635f62 	svcvs	0x00635f62
     e84:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     e88:	00000500 	andeq	r0, r0, r0, lsl #10
     e8c:	64726168 	ldrbtvs	r6, [r2], #-360	; 0x168
     e90:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     e94:	0000682e 	andeq	r6, r0, lr, lsr #16
     e98:	66640000 	strbtvs	r0, [r4], -r0
     e9c:	00682e75 	rsbeq	r2, r8, r5, ror lr
     ea0:	73000000 	movwvc	r0, #0
     ea4:	35326168 	ldrcc	r6, [r2, #-360]!	; 0x168
     ea8:	00682e36 	rsbeq	r2, r8, r6, lsr lr
     eac:	75000006 	strvc	r0, [r0, #-6]
     eb0:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     eb4:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
     eb8:	00050068 	andeq	r0, r5, r8, rrx
     ebc:	62737500 	rsbsvs	r7, r3, #0, 10
     ec0:	0000682e 	andeq	r6, r0, lr, lsr #16
     ec4:	74730000 	ldrbtvc	r0, [r3], #-0
     ec8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     ecc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     ed0:	74730000 	ldrbtvc	r0, [r3], #-0
     ed4:	2e6f6964 	cdpcs	9, 6, cr6, cr15, cr4, {3}
     ed8:	00020068 	andeq	r0, r2, r8, rrx
     edc:	73646500 	cmnvc	r4, #0, 10
     ee0:	2e6e6769 	cdpcs	7, 6, cr6, cr14, cr9, {3}
     ee4:	00060068 	andeq	r0, r6, r8, rrx
     ee8:	05000000 	streq	r0, [r0, #-0]
     eec:	00182002 	andseq	r2, r8, r2
     ef0:	013b0308 	teqeq	fp, r8, lsl #6
     ef4:	2e09032f 	cdpcs	3, 0, cr0, cr9, cr15, {1}
     ef8:	4c2f2f47 	stcmi	15, cr2, [pc], #-284	; de4 <__Stack_Size+0x5e4>
     efc:	78032121 	stmdavc	r3, {r0, r5, r8, sp}
     f00:	0b031c20 	bleq	c7f88 <__Stack_Size+0xc7788>
     f04:	20760320 	rsbscs	r0, r6, r0, lsr #6
     f08:	03200c03 	teqeq	r0, #768	; 0x300
     f0c:	21212075 	teqcs	r1, r5, ror r0
     f10:	79032821 	stmdbvc	r3, {r0, r5, fp, sp}
     f14:	2f2f2f2e 	svccs	0x002f2f2e
     f18:	2121212f 	teqcs	r1, pc, lsr #2
     f1c:	022d5b2f 	eoreq	r5, sp, #48128	; 0xbc00
     f20:	0101001e 	tsteq	r1, lr, lsl r0
     f24:	c0020500 	andgt	r0, r2, r0, lsl #10
     f28:	03080018 	movweq	r0, #32792	; 0x8018
     f2c:	150100cf 	strne	r0, [r1, #-207]	; 0xcf
     f30:	1e22311d 	mcrne	1, 1, r3, cr2, cr13, {0}
     f34:	251f2122 	ldrcs	r2, [pc, #-290]	; e1a <__Stack_Size+0x61a>
     f38:	26207603 	strtcs	r7, [r0], -r3, lsl #12
     f3c:	00e40324 	rsceq	r0, r4, r4, lsr #6
     f40:	2e290320 	cdpcs	3, 2, cr0, cr9, cr0, {1}
     f44:	032e0a03 	teqeq	lr, #12288	; 0x3000
     f48:	0b033c2f 	bleq	d000c <__Stack_Size+0xcf80c>
     f4c:	0334342e 	teqeq	r4, #771751936	; 0x2e000000
     f50:	69303c23 	ldmdbvs	r0!, {r0, r1, r5, sl, fp, ip, sp}
     f54:	1f21303e 	svcne	0x0021303e
     f58:	7dfa0321 	ldclvc	3, cr0, [sl, #132]!	; 0x84
     f5c:	03221e2e 	teqeq	r2, #736	; 0x2e0
     f60:	24035830 	strcs	r5, [r3], #-2096	; 0x830
     f64:	f003312e 			; <UNDEFINED> instruction: 0xf003312e
     f68:	c6032e00 	strgt	r2, [r3], -r0, lsl #28
     f6c:	1f212e00 	svcne	0x00212e00
     f70:	03212321 	teqeq	r1, #-2080374784	; 0x84000000
     f74:	03747ed0 	cmneq	r4, #208, 28	; 0xd00
     f78:	e803581d 	stmda	r3, {r0, r2, r3, r4, fp, ip, lr}
     f7c:	03212001 	teqeq	r1, #1
     f80:	032e7e97 	teqeq	lr, #2416	; 0x970
     f84:	212001e8 	smulwtcs	r0, r8, r1
     f88:	335b212d 	cmpcc	fp, #1073741835	; 0x4000000b
     f8c:	2d753e2c 	ldclcs	14, cr3, [r5, #-176]!	; 0xffffff50
     f90:	2d675333 	stclcs	3, cr5, [r7, #-204]!	; 0xffffff34
     f94:	03222a33 	teqeq	r2, #208896	; 0x33000
     f98:	4d667e98 	stclmi	14, cr7, [r6, #-608]!	; 0xfffffda0
     f9c:	211f221f 	tstcs	pc, pc, lsl r2	; <UNPREDICTABLE>
     fa0:	032e3503 	teqeq	lr, #12582912	; 0xc00000
     fa4:	032f580d 	teqeq	pc, #851968	; 0xd0000
     fa8:	2a2e7ee3 	bcs	ba0b3c <__Stack_Size+0xba033c>
     fac:	5a4d2132 	bpl	134947c <__Stack_Size+0x1348c7c>
     fb0:	221e221e 	andscs	r2, lr, #-536870911	; 0xe0000001
     fb4:	3d3c0d03 	ldccc	13, cr0, [ip, #-12]!
     fb8:	00cb034b 	sbceq	r0, fp, fp, asr #6
     fbc:	58220320 	stmdapl	r2!, {r5, r8, r9}
     fc0:	38033030 	stmdacc	r3, {r4, r5, ip, sp}
     fc4:	7e8e033c 	mcrvc	3, 4, r0, cr14, cr12, {1}
     fc8:	211e313c 	tstcs	lr, ip, lsr r1
     fcc:	21211e21 	teqcs	r1, r1, lsr #28
     fd0:	213c1803 	teqcs	ip, r3, lsl #16
     fd4:	2f232f2d 	svccs	0x00232f2d
     fd8:	01cc0330 	biceq	r0, ip, r0, lsr r3
     fdc:	211f2120 	tstcs	pc, r0, lsr #2
     fe0:	2e7ed303 	cdpcs	3, 7, cr13, cr14, cr3, {0}
     fe4:	96034b3d 			; <UNDEFINED> instruction: 0x96034b3d
     fe8:	17032001 	strne	r2, [r3, -r1]
     fec:	3d303066 	ldccc	0, cr3, [r0, #-408]!	; 0xfffffe68
     ff0:	3c7f9f03 	ldclcc	15, cr9, [pc], #-12	; fec <__Stack_Size+0x7ec>
     ff4:	7fb9032f 	svcvc	0x00b9032f
     ff8:	211f213c 	tstcs	pc, ip, lsr r1	; <UNPREDICTABLE>
     ffc:	02a60321 	adceq	r0, r6, #-2080374784	; 0x84000000
    1000:	2f1f6720 	svccs	0x001f6720
    1004:	3c7dae03 	ldclcc	14, cr10, [sp], #-12
    1008:	6403222f 	strvs	r2, [r3], #-559	; 0x22f
    100c:	212d2f20 	teqcs	sp, r0, lsr #30
    1010:	03342f23 	teqeq	r4, #35, 30	; 0x8c
    1014:	23200181 	teqcs	r0, #1073741856	; 0x40000020
    1018:	bb31231d 	bllt	c49c94 <__Stack_Size+0xc49494>
    101c:	1f4e1c5d 	svcne	0x004e1c5d
    1020:	4c1e6859 	ldcmi	8, cr6, [lr], {89}	; 0x59
    1024:	020083b3 	andeq	r8, r0, #-872415230	; 0xcc000002
    1028:	03410104 	movteq	r0, #4356	; 0x1104
    102c:	012c0227 	teqeq	ip, r7, lsr #4
    1030:	211f754c 	tstcs	pc, ip, asr #10
    1034:	035985b2 	cmpeq	r9, #746586112	; 0x2c800000
    1038:	b0033c19 	andlt	r3, r3, r9, lsl ip
    103c:	033d3c7f 	teqeq	sp, #32512	; 0x7f00
    1040:	1f3d3c2d 	svcne	0x003d3c2d
    1044:	000e0221 	andeq	r0, lr, r1, lsr #4
    1048:	05000101 	streq	r0, [r0, #-257]	; 0x101
    104c:	001c6002 	andseq	r6, ip, r2
    1050:	02f10308 	rscseq	r0, r1, #8, 6	; 0x20000000
    1054:	1f212101 	svcne	0x00212101
    1058:	1e231f21 	cdpne	15, 2, cr1, cr3, cr1, {1}
    105c:	2f422622 	svccs	0x00422622
    1060:	72032c24 	andvc	r2, r3, #36, 24	; 0x2400
    1064:	03222f3c 	teqeq	r2, #60, 30	; 0xf0
    1068:	74032e0d 	strvc	r2, [r3], #-3597	; 0xe0d
    106c:	0007022e 	andeq	r0, r7, lr, lsr #4
    1070:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1074:	00000002 	andeq	r0, r0, r2
    1078:	03880300 	orreq	r0, r8, #0, 6
    107c:	00010201 	andeq	r0, r1, r1, lsl #4
    1080:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1084:	001ca402 	andseq	sl, ip, r2, lsl #8
    1088:	038b0308 	orreq	r0, fp, #8, 6	; 0x20000000
    108c:	22241301 	eorcs	r1, r4, #67108864	; 0x4000000
    1090:	05024b1b 	streq	r4, [r2, #-2843]	; 0xb1b
    1094:	00010100 	andeq	r0, r1, r0, lsl #2
    1098:	1cbc0205 	lfmne	f0, 4, [ip], #20
    109c:	94030800 	strls	r0, [r3], #-2048	; 0x800
    10a0:	24130103 	ldrcs	r0, [r3], #-259	; 0x103
    10a4:	024b1b22 	subeq	r1, fp, #34816	; 0x8800
    10a8:	01010005 	tsteq	r1, r5
    10ac:	d4020500 	strle	r0, [r2], #-1280	; 0x500
    10b0:	0308001c 	movweq	r0, #32796	; 0x801c
    10b4:	2201039e 	andcs	r0, r1, #2013265922	; 0x78000002
    10b8:	2c3e251f 	cfldr32cs	mvfx2, [lr], #-124	; 0xffffff84
    10bc:	207a0322 	rsbscs	r0, sl, r2, lsr #6
    10c0:	1f2f1f21 	svcne	0x002f1f21
    10c4:	00090234 	andeq	r0, r9, r4, lsr r2
    10c8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    10cc:	001d0802 	andseq	r0, sp, r2, lsl #16
    10d0:	03a80308 			; <UNDEFINED> instruction: 0x03a80308
    10d4:	241f1401 	ldrcs	r1, [pc], #-1025	; 10dc <__Stack_Size+0x8dc>
    10d8:	02671b84 	rsbeq	r1, r7, #132, 22	; 0x21000
    10dc:	01010009 	tsteq	r1, r9
    10e0:	00020500 	andeq	r0, r2, r0, lsl #10
    10e4:	03000000 	movweq	r0, #0
    10e8:	030103b1 	movweq	r0, #5041	; 0x13b1
    10ec:	2d212e13 	stccs	14, cr2, [r1, #-76]!	; 0xffffffb4
    10f0:	5b212d21 	blpl	84c57c <__Stack_Size+0x84bd7c>
    10f4:	593e2c33 	ldmdbpl	lr!, {r0, r1, r4, r5, sl, fp, sp}
    10f8:	5953332d 	ldmdbpl	r3, {r0, r2, r3, r5, r8, r9, ip, sp}^
    10fc:	222a332d 	eorcs	r3, sl, #-1275068416	; 0xb4000000
    1100:	2f1f676b 	svccs	0x001f676b
    1104:	01001002 	tsteq	r0, r2
    1108:	02050001 	andeq	r0, r5, #1
    110c:	00000000 	andeq	r0, r0, r0
    1110:	0103da03 	tsteq	r3, r3, lsl #20
    1114:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
    1118:	00010100 	andeq	r0, r1, r0, lsl #2
    111c:	00000205 	andeq	r0, r0, r5, lsl #4
    1120:	df030000 	svcle	0x00030000
    1124:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
    1128:	01010006 	tsteq	r1, r6
    112c:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    1130:	0308001d 	movweq	r0, #32797	; 0x801d
    1134:	130103e4 	movwne	r0, #5092	; 0x13e4
    1138:	0004022f 	andeq	r0, r4, pc, lsr #4
    113c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1140:	00000002 	andeq	r0, r0, r2
    1144:	03e90300 	mvneq	r0, #0, 6
    1148:	3d2f1301 	stccc	3, cr1, [pc, #-4]!	; 114c <__Stack_Size+0x94c>
    114c:	01040200 	mrseq	r0, R12_usr
    1150:	0008021f 	andeq	r0, r8, pc, lsl r2
    1154:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1158:	001d4802 	andseq	r4, sp, r2, lsl #16
    115c:	03ee0308 	mvneq	r0, #8, 6	; 0x20000000
    1160:	04020001 	streq	r0, [r2], #-1
    1164:	01021601 	tsteq	r2, r1, lsl #12
    1168:	4f010100 	svcmi	0x00010100
    116c:	02000002 	andeq	r0, r0, #2
    1170:	0000f700 	andeq	pc, r0, r0, lsl #14
    1174:	fb010200 	blx	4197e <__Stack_Size+0x4117e>
    1178:	01000d0e 	tsteq	r0, lr, lsl #26
    117c:	00010101 	andeq	r0, r1, r1, lsl #2
    1180:	00010000 	andeq	r0, r1, r0
    1184:	35320100 	ldrcc	r0, [r2, #-256]!	; 0x100
    1188:	00393135 	eorseq	r3, r9, r5, lsr r1
    118c:	705c3a63 	subsvc	r3, ip, r3, ror #20
    1190:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    1194:	66206d61 	strtvs	r6, [r0], -r1, ror #26
    1198:	73656c69 	cmnvc	r5, #26880	; 0x6900
    119c:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
    11a0:	675c2936 	smmlarvs	ip, r6, r9, r2
    11a4:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
    11a8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    11ac:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
    11b0:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
    11b4:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    11b8:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
    11bc:	30322038 	eorscc	r2, r2, r8, lsr r0
    11c0:	33713431 	cmncc	r1, #822083584	; 0x31000000
    11c4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    11c8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    11cc:	61652d65 	cmnvs	r5, r5, ror #26
    11d0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    11d4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    11d8:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    11dc:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    11e0:	6300656e 	movwvs	r6, #1390	; 0x56e
    11e4:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    11e8:	6172676f 	cmnvs	r2, pc, ror #14
    11ec:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    11f0:	2073656c 	rsbscs	r6, r3, ip, ror #10
    11f4:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    11f8:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    11fc:	6f742075 	svcvs	0x00742075
    1200:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    1204:	206d7261 	rsbcs	r7, sp, r1, ror #4
    1208:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    120c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    1210:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    1214:	31303220 	teqcc	r0, r0, lsr #4
    1218:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    121c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1220:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    1224:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1228:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    122c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1230:	63000065 	movwvs	r0, #101	; 0x65
    1234:	31353532 	teqcc	r5, r2, lsr r5
    1238:	00632e39 	rsbeq	r2, r3, r9, lsr lr
    123c:	66000001 	strvs	r0, [r0], -r1
    1240:	31353532 	teqcc	r5, r2, lsr r5
    1244:	00682e39 	rsbeq	r2, r8, r9, lsr lr
    1248:	5f000001 	svcpl	0x00000001
    124c:	61666564 	cmnvs	r6, r4, ror #10
    1250:	5f746c75 	svcpl	0x00746c75
    1254:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    1258:	00682e73 	rsbeq	r2, r8, r3, ror lr
    125c:	73000002 	movwvc	r0, #2
    1260:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1264:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1268:	00000003 	andeq	r0, r0, r3
    126c:	00020500 	andeq	r0, r2, r0, lsl #10
    1270:	03000000 	movweq	r0, #0
    1274:	040100d3 	streq	r0, [r1], #-211	; 0xd3
    1278:	4a500302 	bmi	1401e88 <__Stack_Size+0x1401688>
    127c:	30030104 	andcc	r0, r3, r4, lsl #2
    1280:	03020420 	movweq	r0, #9248	; 0x2420
    1284:	01042e50 	tsteq	r4, r0, asr lr
    1288:	043c3303 	ldrteq	r3, [ip], #-771	; 0x303
    128c:	3c4d0302 	mcrrcc	3, 0, r0, sp, cr2
    1290:	33030104 	movwcc	r0, #12548	; 0x3104
    1294:	691d2320 	ldmdbvs	sp, {r5, r8, r9, sp}
    1298:	043f7e75 	ldrteq	r7, [pc], #-3701	; 12a0 <__Stack_Size+0xaa0>
    129c:	2e4a0302 	cdpcs	3, 4, cr0, cr10, cr2, {0}
    12a0:	3e030104 	adfccs	f0, f3, f4
    12a4:	03020466 	movweq	r0, #9318	; 0x2466
    12a8:	01042042 	tsteq	r4, r2, asr #32
    12ac:	02040200 	andeq	r0, r4, #0, 4
    12b0:	002e3f03 	eoreq	r3, lr, r3, lsl #30
    12b4:	03020402 	movweq	r0, #9218	; 0x2402
    12b8:	02002e5f 	andeq	r2, r0, #1520	; 0x5f0
    12bc:	21030204 	tstcs	r3, r4, lsl #4
    12c0:	04020020 	streq	r0, [r2], #-32
    12c4:	2e5f0302 	cdpcs	3, 5, cr0, cr15, cr2, {0}
    12c8:	02040200 	andeq	r0, r4, #0, 4
    12cc:	002e2103 	eoreq	r2, lr, r3, lsl #2
    12d0:	03020402 	movweq	r0, #9218	; 0x2402
    12d4:	0200205f 	andeq	r2, r0, #95	; 0x5f
    12d8:	002f0204 	eoreq	r0, pc, r4, lsl #4
    12dc:	59020402 	stmdbpl	r2, {r1, sl}
    12e0:	02040200 	andeq	r0, r4, #0, 4
    12e4:	0402005a 	streq	r0, [r2], #-90	; 0x5a
    12e8:	02005902 	andeq	r5, r0, #32768	; 0x8000
    12ec:	00590204 	subseq	r0, r9, r4, lsl #4
    12f0:	5a020402 	bpl	82300 <__Stack_Size+0x81b00>
    12f4:	02040200 	andeq	r0, r4, #0, 4
    12f8:	04020059 	streq	r0, [r2], #-89	; 0x59
    12fc:	02005902 	andeq	r5, r0, #32768	; 0x8000
    1300:	005a0204 	subseq	r0, sl, r4, lsl #4
    1304:	59020402 	stmdbpl	r2, {r1, sl}
    1308:	02040200 	andeq	r0, r4, #0, 4
    130c:	04020059 	streq	r0, [r2], #-89	; 0x59
    1310:	584b0302 	stmdapl	fp, {r1, r8, r9}^
    1314:	02040200 	andeq	r0, r4, #0, 4
    1318:	04020059 	streq	r0, [r2], #-89	; 0x59
    131c:	02005902 	andeq	r5, r0, #32768	; 0x8000
    1320:	005a0204 	subseq	r0, sl, r4, lsl #4
    1324:	59020402 	stmdbpl	r2, {r1, sl}
    1328:	02040200 	andeq	r0, r4, #0, 4
    132c:	0402005a 	streq	r0, [r2], #-90	; 0x5a
    1330:	02005902 	andeq	r5, r0, #32768	; 0x8000
    1334:	00590204 	subseq	r0, r9, r4, lsl #4
    1338:	59020402 	stmdbpl	r2, {r1, sl}
    133c:	02040200 	andeq	r0, r4, #0, 4
    1340:	04020059 	streq	r0, [r2], #-89	; 0x59
    1344:	581c0302 	ldmdapl	ip, {r1, r8, r9}
    1348:	02040200 	andeq	r0, r4, #0, 4
    134c:	04020059 	streq	r0, [r2], #-89	; 0x59
    1350:	02005902 	andeq	r5, r0, #32768	; 0x8000
    1354:	005a0204 	subseq	r0, sl, r4, lsl #4
    1358:	59020402 	stmdbpl	r2, {r1, sl}
    135c:	02040200 	andeq	r0, r4, #0, 4
    1360:	04020059 	streq	r0, [r2], #-89	; 0x59
    1364:	02005a02 	andeq	r5, r0, #8192	; 0x2000
    1368:	00590204 	subseq	r0, r9, r4, lsl #4
    136c:	59020402 	stmdbpl	r2, {r1, sl}
    1370:	02040200 	andeq	r0, r4, #0, 4
    1374:	0402005a 	streq	r0, [r2], #-90	; 0x5a
    1378:	02005902 	andeq	r5, r0, #32768	; 0x8000
    137c:	14030204 	strne	r0, [r3], #-516	; 0x204
    1380:	04020058 	streq	r0, [r2], #-88	; 0x58
    1384:	2e6d0302 	cdpcs	3, 6, cr0, cr13, cr2, {0}
    1388:	02040200 	andeq	r0, r4, #0, 4
    138c:	00582203 	subseq	r2, r8, r3, lsl #4
    1390:	75020402 	strvc	r0, [r2, #-1026]	; 0x402
    1394:	02040200 	andeq	r0, r4, #0, 4
    1398:	04020067 	streq	r0, [r2], #-103	; 0x67
    139c:	02006702 	andeq	r6, r0, #524288	; 0x80000
    13a0:	6d030204 	sfmvs	f0, 4, [r3, #-16]
    13a4:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    13a8:	20130302 	andscs	r0, r3, r2, lsl #6
    13ac:	02040200 	andeq	r0, r4, #0, 4
    13b0:	034a6d03 	movteq	r6, #44291	; 0xad03
    13b4:	594b3c17 	stmdbpl	fp, {r0, r1, r2, r4, sl, fp, ip, sp}^
    13b8:	0007023d 	andeq	r0, r7, sp, lsr r2
    13bc:	029e0101 	addseq	r0, lr, #1073741824	; 0x40000000
    13c0:	00020000 	andeq	r0, r2, r0
    13c4:	00000105 	andeq	r0, r0, r5, lsl #2
    13c8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    13cc:	0101000d 	tsteq	r1, sp
    13d0:	00000101 	andeq	r0, r0, r1, lsl #2
    13d4:	00000100 	andeq	r0, r0, r0, lsl #2
    13d8:	35353201 	ldrcc	r3, [r5, #-513]!	; 0x201
    13dc:	63003931 	movwvs	r3, #2353	; 0x931
    13e0:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    13e4:	6172676f 	cmnvs	r2, pc, ror #14
    13e8:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    13ec:	2073656c 	rsbscs	r6, r3, ip, ror #10
    13f0:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    13f4:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    13f8:	6f742075 	svcvs	0x00742075
    13fc:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    1400:	206d7261 	rsbcs	r7, sp, r1, ror #4
    1404:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    1408:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    140c:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    1410:	31303220 	teqcc	r0, r0, lsr #4
    1414:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    1418:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    141c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    1420:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1424:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    1428:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    142c:	616d5c65 	cmnvs	sp, r5, ror #24
    1430:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    1434:	3a630065 	bcc	18c15d0 <__Stack_Size+0x18c0dd0>
    1438:	6f72705c 	svcvs	0x0072705c
    143c:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    1440:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    1444:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1448:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    144c:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    1450:	6f6f7420 	svcvs	0x006f7420
    1454:	6120736c 	teqvs	r0, ip, ror #6
    1458:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    145c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    1460:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    1464:	20382e34 	eorscs	r2, r8, r4, lsr lr
    1468:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    146c:	615c3371 	cmpvs	ip, r1, ror r3
    1470:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1474:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1478:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    147c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    1480:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1484:	64650000 	strbtvs	r0, [r5], #-0
    1488:	31353532 	teqcc	r5, r2, lsr r5
    148c:	00632e39 	rsbeq	r2, r3, r9, lsr lr
    1490:	66000001 	strvs	r0, [r0], -r1
    1494:	31353532 	teqcc	r5, r2, lsr r5
    1498:	00682e39 	rsbeq	r2, r8, r9, lsr lr
    149c:	65000001 	strvs	r0, [r0, #-1]
    14a0:	35353264 	ldrcc	r3, [r5, #-612]!	; 0x264
    14a4:	682e3931 	stmdavs	lr!, {r0, r4, r5, r8, fp, ip, sp}
    14a8:	00000100 	andeq	r0, r0, r0, lsl #2
    14ac:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    14b0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    14b4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    14b8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    14bc:	00000200 	andeq	r0, r0, r0, lsl #4
    14c0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    14c4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    14c8:	00000300 	andeq	r0, r0, r0, lsl #6
    14cc:	02050000 	andeq	r0, r5, #0
    14d0:	08001d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, ip}
    14d4:	20013303 	andcs	r3, r1, r3, lsl #6
    14d8:	70030204 	andvc	r0, r3, r4, lsl #4
    14dc:	03010420 	movweq	r0, #5152	; 0x1420
    14e0:	04740810 	ldrbteq	r0, [r4], #-2064	; 0x810
    14e4:	20700302 	rsbscs	r0, r0, r2, lsl #6
    14e8:	10030104 	andne	r0, r3, r4, lsl #2
    14ec:	030204ac 	movweq	r0, #9388	; 0x24ac
    14f0:	01042070 	tsteq	r4, r0, ror r0
    14f4:	042e1303 	strteq	r1, [lr], #-771	; 0x303
    14f8:	206d0302 	rsbcs	r0, sp, r2, lsl #6
    14fc:	13030104 	movwne	r0, #12548	; 0x3104
    1500:	2d4b3d3c 	stclcs	13, cr3, [fp, #-240]	; 0xffffff10
    1504:	01000202 	tsteq	r0, r2, lsl #4
    1508:	02050001 	andeq	r0, r5, #1
    150c:	08001dbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, fp, ip}
    1510:	2e013c03 	cdpcs	12, 0, cr3, cr1, cr3, {0}
    1514:	6859593f 	ldmdavs	r9, {r0, r1, r2, r3, r4, r5, r8, fp, ip, lr}^
    1518:	02023d3d 	andeq	r3, r2, #3904	; 0xf40
    151c:	00010100 	andeq	r0, r1, r0, lsl #2
    1520:	1df80205 	lfmne	f0, 2, [r8, #20]!
    1524:	de030800 	cdple	8, 0, cr0, cr3, cr0, {0}
    1528:	02040100 	andeq	r0, r4, #0, 2
    152c:	04584503 	ldrbeq	r4, [r8], #-1283	; 0x503
    1530:	00c00301 	sbceq	r0, r0, r1, lsl #6
    1534:	030204ac 	movweq	r0, #9388	; 0x24ac
    1538:	01043c40 	tsteq	r4, r0, asr #24
    153c:	f200c403 	vshl.s8	d12, d3, d0
    1540:	242b311d 	strtcs	r3, [fp], #-285	; 0x11d
    1544:	022f241c 	eoreq	r2, pc, #28, 8	; 0x1c000000
    1548:	01010002 	tsteq	r1, r2
    154c:	58020500 	stmdapl	r2, {r8, sl}
    1550:	0308001e 	movweq	r0, #32798	; 0x801e
    1554:	040100ec 	streq	r0, [r1], #-236	; 0xec
    1558:	7fb70302 	svcvc	0x00b70302
    155c:	0301042e 	movweq	r0, #5166	; 0x142e
    1560:	215800c9 	cmpcs	r8, r9, asr #1
    1564:	b6030204 	strlt	r0, [r3], -r4, lsl #4
    1568:	01042e7f 	tsteq	r4, pc, ror lr
    156c:	9e00c903 	cdpls	9, 0, cr12, cr0, cr3, {0}
    1570:	03020428 	movweq	r0, #9256	; 0x2428
    1574:	042e7faf 	strteq	r7, [lr], #-4015	; 0xfaf
    1578:	00c90301 	sbceq	r0, r9, r1, lsl #6
    157c:	7803282e 	stmdavc	r3, {r1, r2, r3, r5, fp, sp}
    1580:	03020420 	movweq	r0, #9248	; 0x2420
    1584:	04207fb7 	strteq	r7, [r0], #-4023	; 0xfb7
    1588:	00d40301 	sbcseq	r0, r4, r1, lsl #6
    158c:	311c243c 	tstcc	ip, ip, lsr r4
    1590:	5b4d5959 	blpl	1357afc <__Stack_Size+0x13572fc>
    1594:	af4d4b5b 	svcge	0x004d4b5b
    1598:	4b3e3d59 	blmi	f90b04 <__Stack_Size+0xf90304>
    159c:	01000702 	tsteq	r0, r2, lsl #14
    15a0:	02050001 	andeq	r0, r5, #1
    15a4:	08001f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip}
    15a8:	01019d03 	tsteq	r1, r3, lsl #26
    15ac:	201f034a 	andscs	r0, pc, sl, asr #6
    15b0:	032e6103 	teqeq	lr, #-1073741824	; 0xc0000000
    15b4:	2d3d201f 	ldccs	0, cr2, [sp, #-124]!	; 0xffffff84
    15b8:	595b592f 	ldmdbpl	fp, {r0, r1, r2, r3, r5, r8, fp, ip, lr}^
    15bc:	5b755b59 	blpl	1d58328 <__Stack_Size+0x1d57b28>
    15c0:	5b5b5b75 	blpl	16d839c <__Stack_Size+0x16d7b9c>
    15c4:	695b5b5b 	ldmdbvs	fp, {r0, r1, r3, r4, r6, r8, r9, fp, ip, lr}^
    15c8:	05026769 	streq	r6, [r2, #-1897]	; 0x769
    15cc:	00010100 	andeq	r0, r1, r0, lsl #2
    15d0:	20000205 	andcs	r0, r0, r5, lsl #4
    15d4:	e7030800 	str	r0, [r3, -r0, lsl #16]
    15d8:	032e0101 	teqeq	lr, #1073741824	; 0x40000000
    15dc:	032b201e 	teqeq	fp, #30
    15e0:	1b032e65 	blne	ccf7c <__Stack_Size+0xcc77c>
    15e4:	675b3120 	ldrbvs	r3, [fp, -r0, lsr #2]
    15e8:	5959595c 	ldmdbpl	r9, {r2, r3, r4, r6, r8, fp, ip, lr}^
    15ec:	4b5b5b5b 	blmi	16d8360 <__Stack_Size+0x16d7b60>
    15f0:	69695b5b 	stmdbvs	r9!, {r0, r1, r3, r4, r6, r8, r9, fp, ip, lr}^
    15f4:	00020267 	andeq	r0, r2, r7, ror #4
    15f8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    15fc:	0020b402 	eoreq	fp, r0, r2, lsl #8
    1600:	02ab0308 	adceq	r0, fp, #8, 6	; 0x20000000
    1604:	03043c01 	movweq	r3, #19457	; 0x4c01
    1608:	3c7e9d03 	ldclcc	13, cr9, [lr], #-12
    160c:	e9030104 	stmdb	r3, {r2, r8}
    1610:	02005801 	andeq	r5, r0, #65536	; 0x10000
    1614:	00210204 	eoreq	r0, r1, r4, lsl #4
    1618:	5b020402 	blpl	82628 <__Stack_Size+0x81e28>
    161c:	02040200 	andeq	r0, r4, #0, 4
    1620:	04020047 	streq	r0, [r2], #-71	; 0x47
    1624:	02003202 	andeq	r3, r0, #536870912	; 0x20000000
    1628:	005a0204 	subseq	r0, sl, r4, lsl #4
    162c:	67020402 	strvs	r0, [r2, -r2, lsl #8]
    1630:	02040200 	andeq	r0, r4, #0, 4
    1634:	04020067 	streq	r0, [r2], #-103	; 0x67
    1638:	02006702 	andeq	r6, r0, #524288	; 0x80000
    163c:	76030204 	strvc	r0, [r3], -r4, lsl #4
    1640:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    1644:	200a0302 	andcs	r0, sl, r2, lsl #6
    1648:	02040200 	andeq	r0, r4, #0, 4
    164c:	044a7603 	strbeq	r7, [sl], #-1539	; 0x603
    1650:	7e970303 	cdpvc	3, 9, cr0, cr7, cr3, {0}
    1654:	0301042e 	movweq	r0, #5166	; 0x142e
    1658:	025801f7 	subseq	r0, r8, #-1073741763	; 0xc000003d
    165c:	01010006 	tsteq	r1, r6
    1660:	0000026a 	andeq	r0, r0, sl, ror #4
    1664:	01850002 	orreq	r0, r5, r2
    1668:	01020000 	mrseq	r0, (UNDEF: 2)
    166c:	000d0efb 	strdeq	r0, [sp], -fp
    1670:	01010101 	tsteq	r1, r1, lsl #2
    1674:	01000000 	mrseq	r0, (UNDEF: 0)
    1678:	32010000 	andcc	r0, r1, #0
    167c:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1680:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    1684:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
    1688:	206d6172 	rsbcs	r6, sp, r2, ror r1
    168c:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
    1690:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
    1694:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
    1698:	20756e67 	rsbscs	r6, r5, r7, ror #28
    169c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 14d4 <__Stack_Size+0xcd4>
    16a0:	72612073 	rsbvc	r2, r1, #115	; 0x73
    16a4:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
    16a8:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    16ac:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
    16b0:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
    16b4:	71343130 	teqvc	r4, r0, lsr r1
    16b8:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    16bc:	6f6e2d6d 	svcvs	0x006e2d6d
    16c0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    16c4:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    16c8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    16cc:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    16d0:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    16d4:	00656e69 	rsbeq	r6, r5, r9, ror #28
    16d8:	705c3a63 	subsvc	r3, ip, r3, ror #20
    16dc:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    16e0:	66206d61 	strtvs	r6, [r0], -r1, ror #26
    16e4:	73656c69 	cmnvc	r5, #26880	; 0x6900
    16e8:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
    16ec:	675c2936 	smmlarvs	ip, r6, r9, r2
    16f0:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
    16f4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    16f8:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
    16fc:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
    1700:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    1704:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
    1708:	30322038 	eorscc	r2, r2, r8, lsr r0
    170c:	33713431 	cmncc	r1, #822083584	; 0x31000000
    1710:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    1714:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1718:	61652d65 	cmnvs	r5, r5, ror #26
    171c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    1720:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1724:	63006564 	movwvs	r6, #1380	; 0x564
    1728:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    172c:	6172676f 	cmnvs	r2, pc, ror #14
    1730:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    1734:	2073656c 	rsbscs	r6, r3, ip, ror #10
    1738:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    173c:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    1740:	6f742075 	svcvs	0x00742075
    1744:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    1748:	206d7261 	rsbcs	r7, sp, r1, ror #4
    174c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    1750:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    1754:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    1758:	31303220 	teqcc	r0, r0, lsr #4
    175c:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    1760:	5c62696c 	stclpl	9, cr6, [r2], #-432	; 0xfffffe50
    1764:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
    1768:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    176c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    1770:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1774:	2e345c69 	cdpcs	12, 3, cr5, cr4, cr9, {3}
    1778:	5c342e38 	ldcpl	14, cr2, [r4], #-224	; 0xffffff20
    177c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1780:	00656475 	rsbeq	r6, r5, r5, ror r4
    1784:	73646500 	cmnvc	r4, #0, 10
    1788:	2e6e6769 	cdpcs	7, 6, cr6, cr14, cr9, {3}
    178c:	00010063 	andeq	r0, r1, r3, rrx
    1790:	61687300 	cmnvs	r8, r0, lsl #6
    1794:	2e323135 	mrccs	1, 1, r3, cr2, cr5, {1}
    1798:	00010068 	andeq	r0, r1, r8, rrx
    179c:	32646500 	rsbcc	r6, r4, #0, 10
    17a0:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    17a4:	0100682e 	tsteq	r0, lr, lsr #16
    17a8:	645f0000 	ldrbvs	r0, [pc], #-0	; 17b0 <__Stack_Size+0xfb0>
    17ac:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    17b0:	745f746c 	ldrbvc	r7, [pc], #-1132	; 17b8 <__Stack_Size+0xfb8>
    17b4:	73657079 	cmnvc	r5, #121	; 0x79
    17b8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    17bc:	74730000 	ldrbtvc	r0, [r3], #-0
    17c0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    17c4:	0300682e 	movweq	r6, #2094	; 0x82e
    17c8:	74730000 	ldrbtvc	r0, [r3], #-0
    17cc:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    17d0:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    17d4:	70660000 	rsbvc	r0, r6, r0
    17d8:	656d6972 	strbvs	r6, [sp, #-2418]!	; 0x972
    17dc:	0100682e 	tsteq	r0, lr, lsr #16
    17e0:	32660000 	rsbcc	r0, r6, #0
    17e4:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    17e8:	0100682e 	tsteq	r0, lr, lsr #16
    17ec:	00000000 	andeq	r0, r0, r0
    17f0:	00000205 	andeq	r0, r0, r5, lsl #4
    17f4:	3a030000 	bcc	c17fc <__Stack_Size+0xc0ffc>
    17f8:	03020401 	movweq	r0, #9217	; 0x2401
    17fc:	01042063 	tsteq	r4, r3, rrx
    1800:	04201d03 	strteq	r1, [r0], #-3331	; 0xd03
    1804:	20630302 	rsbcs	r0, r3, r2, lsl #6
    1808:	1d030104 	stfnes	f0, [r3, #-16]
    180c:	03020420 	movweq	r0, #9248	; 0x2420
    1810:	01042e63 	tsteq	r4, r3, ror #28
    1814:	0304599a 	movweq	r5, #18842	; 0x499a
    1818:	2d662603 	stclcs	6, cr2, [r6, #-12]!
    181c:	01042d2f 	tsteq	r4, pc, lsr #26
    1820:	042e7603 	strteq	r7, [lr], #-1539	; 0x603
    1824:	2e0c0303 	cdpcs	3, 0, cr0, cr12, cr3, {0}
    1828:	74030104 	strvc	r0, [r3], #-260	; 0x104
    182c:	0303042e 	movweq	r0, #13358	; 0x342e
    1830:	0430200a 	ldrteq	r2, [r0], #-10
    1834:	2e740301 	cdpcs	3, 7, cr0, cr4, cr1, {0}
    1838:	592e7803 	stmdbpl	lr!, {r0, r1, fp, ip, sp, lr}
    183c:	02581103 	subseq	r1, r8, #-1073741824	; 0xc0000000
    1840:	01010006 	tsteq	r1, r6
    1844:	38020500 	stmdacc	r2, {r8, sl}
    1848:	03080021 	movweq	r0, #32801	; 0x8021
    184c:	0301018d 	movweq	r0, #4493	; 0x118d
    1850:	20035860 	andcs	r5, r3, r0, ror #16
    1854:	2e60032e 	cdpcs	3, 6, cr0, cr0, cr14, {1}
    1858:	04212d83 	strteq	r2, [r1], #-3459	; 0xd83
    185c:	7faf0302 	svcvc	0x00af0302
    1860:	0301044a 	movweq	r0, #5194	; 0x144a
    1864:	042000d1 	strteq	r0, [r0], #-209	; 0xd1
    1868:	7faf0302 	svcvc	0x00af0302
    186c:	03010466 	movweq	r0, #5222	; 0x1466
    1870:	042000d1 	strteq	r0, [r0], #-209	; 0xd1
    1874:	7faf0302 	svcvc	0x00af0302
    1878:	0301042e 	movweq	r0, #5166	; 0x142e
    187c:	0204822c 	andeq	r8, r4, #44, 4	; 0xc0000002
    1880:	042e5403 	strteq	r5, [lr], #-1027	; 0x403
    1884:	2e2c0301 	cdpcs	3, 2, cr0, cr12, cr1, {0}
    1888:	3d4ce626 	stclcc	6, cr14, [ip, #-152]	; 0xffffff68
    188c:	2c223d1f 	stccs	13, cr3, [r2], #-124	; 0xffffff84
    1890:	03332b30 	teqeq	r3, #48, 22	; 0xc000
    1894:	03598272 	cmpeq	r9, #536870919	; 0x20000007
    1898:	03676610 	cmneq	r7, #16, 12	; 0x1000000
    189c:	78036659 	stmdavc	r3, {r0, r3, r4, r6, r9, sl, sp, lr}
    18a0:	74035966 	strvc	r5, [r3], #-2406	; 0x966
    18a4:	221e5a58 	andscs	r5, lr, #88, 20	; 0x58000
    18a8:	4a00f903 	bmi	3fcbc <__Stack_Size+0x3f4bc>
    18ac:	587f8503 	ldmdapl	pc!, {r0, r1, r8, sl, pc}^	; <UNPREDICTABLE>
    18b0:	03221e5a 	teqeq	r2, #1440	; 0x5a0
    18b4:	034a00fb 	movteq	r0, #41211	; 0xa0fb
    18b8:	59587f8e 	ldmdbpl	r8, {r1, r2, r3, r7, r8, r9, sl, fp, ip, sp, lr}^
    18bc:	5800f503 	stmdapl	r0, {r0, r1, r8, sl, ip, sp, lr, pc}
    18c0:	224a7903 	subcs	r7, sl, #49152	; 0xc000
    18c4:	7faf0334 	svcvc	0x00af0334
    18c8:	0008024a 	andeq	r0, r8, sl, asr #4
    18cc:	07020101 	streq	r0, [r2, -r1, lsl #2]
    18d0:	00020000 	andeq	r0, r2, r0
    18d4:	000000f7 	strdeq	r0, [r0], -r7
    18d8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    18dc:	0101000d 	tsteq	r1, sp
    18e0:	00000101 	andeq	r0, r0, r1, lsl #2
    18e4:	00000100 	andeq	r0, r0, r0, lsl #2
    18e8:	35353201 	ldrcc	r3, [r5, #-513]!	; 0x201
    18ec:	63003931 	movwvs	r3, #2353	; 0x931
    18f0:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    18f4:	6172676f 	cmnvs	r2, pc, ror #14
    18f8:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    18fc:	2073656c 	rsbscs	r6, r3, ip, ror #10
    1900:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    1904:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    1908:	6f742075 	svcvs	0x00742075
    190c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    1910:	206d7261 	rsbcs	r7, sp, r1, ror #4
    1914:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    1918:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    191c:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    1920:	31303220 	teqcc	r0, r0, lsr #4
    1924:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    1928:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    192c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    1930:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1934:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    1938:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    193c:	616d5c65 	cmnvs	sp, r5, ror #24
    1940:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    1944:	3a630065 	bcc	18c1ae0 <__Stack_Size+0x18c12e0>
    1948:	6f72705c 	svcvs	0x0072705c
    194c:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    1950:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    1954:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1958:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    195c:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    1960:	6f6f7420 	svcvs	0x006f7420
    1964:	6120736c 	teqvs	r0, ip, ror #6
    1968:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    196c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    1970:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    1974:	20382e34 	eorscs	r2, r8, r4, lsr lr
    1978:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    197c:	615c3371 	cmpvs	ip, r1, ror r3
    1980:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1984:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1988:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    198c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    1990:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1994:	32660000 	rsbcc	r0, r6, #0
    1998:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    199c:	0100632e 	tsteq	r0, lr, lsr #6
    19a0:	32660000 	rsbcc	r0, r6, #0
    19a4:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    19a8:	0100682e 	tsteq	r0, lr, lsr #16
    19ac:	645f0000 	ldrbvs	r0, [pc], #-0	; 19b4 <__Stack_Size+0x11b4>
    19b0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    19b4:	745f746c 	ldrbvc	r7, [pc], #-1132	; 19bc <__Stack_Size+0x11bc>
    19b8:	73657079 	cmnvc	r5, #121	; 0x79
    19bc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    19c0:	74730000 	ldrbtvc	r0, [r3], #-0
    19c4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    19c8:	0300682e 	movweq	r6, #2094	; 0x82e
    19cc:	00000000 	andeq	r0, r0, r0
    19d0:	22b40205 	adcscs	r0, r4, #1342177280	; 0x50000000
    19d4:	0c030800 	stceq	8, cr0, [r3], {-0}
    19d8:	7a3b2501 	bvc	ecade4 <__Stack_Size+0xeca5e4>
    19dc:	01000402 	tsteq	r0, r2, lsl #8
    19e0:	02050001 	andeq	r0, r5, #1
    19e4:	080022d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sp}
    19e8:	26011903 	strcs	r1, [r1], -r3, lsl #18
    19ec:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
    19f0:	1e232d2f 	cdpne	13, 2, cr2, cr3, cr15, {1}
    19f4:	0402001f 	streq	r0, [r2], #-31
    19f8:	02003202 	andeq	r3, r0, #536870912	; 0x20000000
    19fc:	002f0204 	eoreq	r0, pc, r4, lsl #4
    1a00:	1e020402 	cdpne	4, 0, cr0, cr2, cr2, {0}
    1a04:	02040200 	andeq	r0, r4, #0, 4
    1a08:	04020031 	streq	r0, [r2], #-49	; 0x31
    1a0c:	20062b02 	andcs	r2, r6, r2, lsl #22
    1a10:	02040200 	andeq	r0, r4, #0, 4
    1a14:	2e0d0306 	cdpcs	3, 0, cr0, cr13, cr6, {0}
    1a18:	02040200 	andeq	r0, r4, #0, 4
    1a1c:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    1a20:	02002c02 	andeq	r2, r0, #512	; 0x200
    1a24:	00310204 	eorseq	r0, r1, r4, lsl #4
    1a28:	2b020402 	blcs	82a38 <__Stack_Size+0x82238>
    1a2c:	201d0326 	andscs	r0, sp, r6, lsr #6
    1a30:	03206303 	teqeq	r0, #201326592	; 0xc000000
    1a34:	67033c1a 	smladvs	r3, sl, ip, r3
    1a38:	2e19032e 	cdpcs	3, 1, cr0, cr9, cr14, {1}
    1a3c:	68037324 	stmdavs	r3, {r2, r5, r8, r9, ip, sp, lr}
    1a40:	0004023c 	andeq	r0, r4, ip, lsr r2
    1a44:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1a48:	00234402 	eoreq	r4, r3, r2, lsl #8
    1a4c:	013c0308 	teqeq	ip, r8, lsl #6
    1a50:	1431025d 	ldrtne	r0, [r1], #-605	; 0x25d
    1a54:	2f302f2f 	svccs	0x00302f2f
    1a58:	1d4a7803 	stclne	8, cr7, [sl, #-12]
    1a5c:	1f212d24 	svcne	0x00212d24
    1a60:	02022d21 	andeq	r2, r2, #2112	; 0x840
    1a64:	00010100 	andeq	r0, r1, r0, lsl #2
    1a68:	23e00205 	mvncs	r0, #1342177280	; 0x50000000
    1a6c:	cd030800 	stcgt	8, cr0, [r3, #-0]
    1a70:	13080100 	movwne	r0, #33024	; 0x8100
    1a74:	133202be 	teqne	r2, #-536870901	; 0xe000000b
    1a78:	211e4b1f 	tstcs	lr, pc, lsl fp
    1a7c:	02023e65 	andeq	r3, r2, #1616	; 0x650
    1a80:	00010100 	andeq	r0, r1, r0, lsl #2
    1a84:	24a40205 	strtcs	r0, [r4], #517	; 0x205
    1a88:	d6030800 	strle	r0, [r3], -r0, lsl #16
    1a8c:	1b170100 	blne	5c1e94 <__Stack_Size+0x5c1694>
    1a90:	04020021 	streq	r0, [r2], #-33	; 0x21
    1a94:	02002602 	andeq	r2, r0, #2097152	; 0x200000
    1a98:	00590204 	subseq	r0, r9, r4, lsl #4
    1a9c:	1d020402 	cfstrsne	mvf0, [r2, #-8]
    1aa0:	2d212d44 	stccs	13, cr2, [r1, #-272]!	; 0xfffffef0
    1aa4:	22212d2f 	eorcs	r2, r1, #3008	; 0xbc0
    1aa8:	02040200 	andeq	r0, r4, #0, 4
    1aac:	04020021 	streq	r0, [r2], #-33	; 0x21
    1ab0:	02003d02 	andeq	r3, r0, #2, 26	; 0x80
    1ab4:	001e0204 	andseq	r0, lr, r4, lsl #4
    1ab8:	31020402 	tstcc	r2, r2, lsl #8
    1abc:	02040200 	andeq	r0, r4, #0, 4
    1ac0:	0202252b 	andeq	r2, r2, #180355072	; 0xac00000
    1ac4:	00010100 	andeq	r0, r1, r0, lsl #2
    1ac8:	24ec0205 	strbtcs	r0, [ip], #517	; 0x205
    1acc:	ed030800 	stc	8, cr0, [r3, #-0]
    1ad0:	1f260100 	svcne	0x00260100
    1ad4:	02040200 	andeq	r0, r4, #0, 4
    1ad8:	04020022 	streq	r0, [r2], #-34	; 0x22
    1adc:	02006702 	andeq	r6, r0, #524288	; 0x80000
    1ae0:	001e0204 	andseq	r0, lr, r4, lsl #4
    1ae4:	31020402 	tstcc	r2, r2, lsl #8
    1ae8:	02040200 	andeq	r0, r4, #0, 4
    1aec:	1c32262b 	ldcne	6, cr2, [r2], #-172	; 0xffffff54
    1af0:	003d3b30 	eorseq	r3, sp, r0, lsr fp
    1af4:	31020402 	tstcc	r2, r2, lsl #8
    1af8:	02040200 	andeq	r0, r4, #0, 4
    1afc:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    1b00:	02001e02 	andeq	r1, r0, #2, 28
    1b04:	00310204 	eorseq	r0, r1, r4, lsl #4
    1b08:	2b020402 	blcs	82b18 <__Stack_Size+0x82318>
    1b0c:	00020225 	andeq	r0, r2, r5, lsr #4
    1b10:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1b14:	00253802 	eoreq	r3, r5, r2, lsl #16
    1b18:	01850308 	orreq	r0, r5, r8, lsl #6
    1b1c:	001f2601 	andseq	r2, pc, r1, lsl #12
    1b20:	22020402 	andcs	r0, r2, #33554432	; 0x2000000
    1b24:	02040200 	andeq	r0, r4, #0, 4
    1b28:	0402004b 	streq	r0, [r2], #-75	; 0x4b
    1b2c:	02001e02 	andeq	r1, r0, #2, 28
    1b30:	00310204 	eorseq	r0, r1, r4, lsl #4
    1b34:	2b020402 	blcs	82b44 <__Stack_Size+0x82344>
    1b38:	221c2426 	andscs	r2, ip, #637534208	; 0x26000000
    1b3c:	212d2f1f 	teqcs	sp, pc, lsl pc
    1b40:	02040200 	andeq	r0, r4, #0, 4
    1b44:	04020031 	streq	r0, [r2], #-49	; 0x31
    1b48:	02002f02 	andeq	r2, r0, #2, 30
    1b4c:	001e0204 	andseq	r0, lr, r4, lsl #4
    1b50:	31020402 	tstcc	r2, r2, lsl #8
    1b54:	02040200 	andeq	r0, r4, #0, 4
    1b58:	0302252b 	movweq	r2, #9515	; 0x252b
    1b5c:	00010100 	andeq	r0, r1, r0, lsl #2
    1b60:	25800205 	strcs	r0, [r0, #517]	; 0x205
    1b64:	9d030800 	stcls	8, cr0, [r3, #-0]
    1b68:	2b320101 	blcs	c81f74 <__Stack_Size+0xc81774>
    1b6c:	29200b03 	stmdbcs	r0!, {r0, r1, r8, r9, fp}
    1b70:	0402003d 	streq	r0, [r2], #-61	; 0x3d
    1b74:	02002102 	andeq	r2, r0, #-2147483648	; 0x80000000
    1b78:	003b0204 	eorseq	r0, fp, r4, lsl #4
    1b7c:	2f020402 	svccs	0x00020402
    1b80:	02040200 	andeq	r0, r4, #0, 4
    1b84:	0402002d 	streq	r0, [r2], #-45	; 0x2d
    1b88:	02004d01 	andeq	r4, r0, #1, 26	; 0x40
    1b8c:	00760204 	rsbseq	r0, r6, r4, lsl #4
    1b90:	2d020402 	cfstrscs	mvf0, [r2, #-8]
    1b94:	02040200 	andeq	r0, r4, #0, 4
    1b98:	04020049 	streq	r0, [r2], #-73	; 0x49
    1b9c:	02002f02 	andeq	r2, r0, #2, 30
    1ba0:	242d0204 	strtcs	r0, [sp], #-516	; 0x204
    1ba4:	032e7503 	teqeq	lr, #12582912	; 0xc00000
    1ba8:	3b21580e 	blcc	857be8 <__Stack_Size+0x8573e8>
    1bac:	00232d2f 	eoreq	r2, r3, pc, lsr #26
    1bb0:	21020402 	tstcs	r2, r2, lsl #8
    1bb4:	02040200 	andeq	r0, r4, #0, 4
    1bb8:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    1bbc:	02001e02 	andeq	r1, r0, #2, 28
    1bc0:	00310204 	eorseq	r0, r1, r4, lsl #4
    1bc4:	2b020402 	blcs	82bd4 <__Stack_Size+0x823d4>
    1bc8:	00030225 	andeq	r0, r3, r5, lsr #4
    1bcc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1bd0:	00000002 	andeq	r0, r0, r2
    1bd4:	01ba0300 			; <UNDEFINED> instruction: 0x01ba0300
    1bd8:	2e670301 	cdpcs	3, 6, cr0, cr7, cr1, {0}
    1bdc:	032e1903 	teqeq	lr, #49152	; 0xc000
    1be0:	0b032e64 	bleq	cd578 <__Stack_Size+0xccd78>
    1be4:	213d1b20 	teqcs	sp, r0, lsr #22
    1be8:	4d2d2f3b 	stcmi	15, cr2, [sp, #-236]!	; 0xffffff14
    1bec:	2f492d76 	svccs	0x00492d76
    1bf0:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1bf4:	580e032e 	stmdapl	lr, {r1, r2, r3, r5, r8, r9}
    1bf8:	2d2f3b2f 	fstmdbxcs	pc!, {d3-d25}	;@ Deprecated
    1bfc:	232c2f4e 	teqcs	ip, #312	; 0x138
    1c00:	0302042b 	movweq	r0, #9259	; 0x242b
    1c04:	04207ef1 	strteq	r7, [r0], #-3825	; 0xef1
    1c08:	019c0301 	orrseq	r0, ip, r1, lsl #6
    1c0c:	04022e08 	streq	r2, [r2], #-3592	; 0xe08
    1c10:	00010100 	andeq	r0, r1, r0, lsl #2
    1c14:	00000205 	andeq	r0, r0, r5, lsl #4
    1c18:	c2030000 	andgt	r0, r3, #0
    1c1c:	1c160101 	ldfnes	f0, [r6], {1}
    1c20:	04020021 	streq	r0, [r2], #-33	; 0x21
    1c24:	02002502 	andeq	r2, r0, #8388608	; 0x800000
    1c28:	00590204 	subseq	r0, r9, r4, lsl #4
    1c2c:	1d020402 	cfstrsne	mvf0, [r2, #-8]
    1c30:	301f2142 	andscc	r2, pc, r2, asr #2
    1c34:	0030222c 	eorseq	r2, r0, ip, lsr #4
    1c38:	21020402 	tstcs	r2, r2, lsl #8
    1c3c:	02040200 	andeq	r0, r4, #0, 4
    1c40:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    1c44:	02001e02 	andeq	r1, r0, #2, 28
    1c48:	00310204 	eorseq	r0, r1, r4, lsl #4
    1c4c:	2b020402 	blcs	82c5c <__Stack_Size+0x8245c>
    1c50:	00020225 	andeq	r0, r2, r5, lsr #4
    1c54:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1c58:	00260802 	eoreq	r0, r6, r2, lsl #16
    1c5c:	01d80308 	bicseq	r0, r8, r8, lsl #6
    1c60:	2e490301 	cdpcs	3, 4, cr0, cr9, cr1, {0}
    1c64:	03203703 	teqeq	r0, #786432	; 0xc0000
    1c68:	0b032046 	bleq	c9d88 <__Stack_Size+0xc9588>
    1c6c:	212f2920 	teqcs	pc, r0, lsr #18
    1c70:	4d2d2f3b 	stcmi	15, cr2, [sp, #-236]!	; 0xffffff14
    1c74:	2f492d68 	svccs	0x00492d68
    1c78:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1c7c:	3c0e032e 	stccc	3, cr0, [lr], {46}	; 0x2e
    1c80:	2d2f3b2f 	fstmdbxcs	pc!, {d3-d25}	;@ Deprecated
    1c84:	2c2f233d 	stccs	3, cr2, [pc], #-244	; 1b98 <__Stack_Size+0x1398>
    1c88:	77032b23 	strvc	r2, [r3, -r3, lsr #22]
    1c8c:	212f2974 	teqcs	pc, r4, ror r9	; <UNPREDICTABLE>
    1c90:	3f2d2f49 	svccc	0x002d2f49
    1c94:	21492d76 	hvccs	37590	; 0x92d6
    1c98:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1c9c:	3c0e0320 	stccc	3, cr0, [lr], {32}
    1ca0:	2d2f3b21 	fstmdbxcs	pc!, {d3-d18}	;@ Deprecated
    1ca4:	1e2f2123 	sufneep	f2, f7, f3
    1ca8:	77032b31 	smladxvc	r3, r1, fp, r2
    1cac:	3c09033c 	stccc	3, cr0, [r9], {60}	; 0x3c
    1cb0:	3d3c7203 	lfmcc	f7, 4, [ip, #-12]!
    1cb4:	2d2f4921 	stccs	9, cr4, [pc, #-132]!	; 1c38 <__Stack_Size+0x1438>
    1cb8:	492d844d 	pushmi	{r0, r2, r3, r6, sl, pc}
    1cbc:	03242d2f 	teqeq	r4, #3008	; 0xbc0
    1cc0:	0e032e75 	mcreq	14, 0, r2, cr3, cr5, {3}
    1cc4:	2f3b2f58 	svccs	0x003b2f58
    1cc8:	2f232f2d 	svccs	0x00232f2d
    1ccc:	032b232c 	teqeq	fp, #44, 6	; 0xb0000000
    1cd0:	213d4a72 	teqcs	sp, r2, ror sl
    1cd4:	3f2d2f49 	svccc	0x002d2f49
    1cd8:	21492d92 			; <UNDEFINED> instruction: 0x21492d92
    1cdc:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1ce0:	580e032e 	stmdapl	lr, {r1, r2, r3, r5, r8, r9}
    1ce4:	2d2f3b21 	fstmdbxcs	pc!, {d3-d18}	;@ Deprecated
    1ce8:	1e2f2123 	sufneep	f2, f7, f3
    1cec:	02002b31 	andeq	r2, r0, #50176	; 0xc400
    1cf0:	3f030204 	svccc	0x00030204
    1cf4:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
    1cf8:	207fb803 	rsbscs	fp, pc, r3, lsl #16
    1cfc:	3b213d29 	blcc	8511a8 <__Stack_Size+0x8509a8>
    1d00:	764d2d2f 	strbvc	r2, [sp], -pc, lsr #26
    1d04:	2d2f492d 	stccs	9, cr4, [pc, #-180]!	; 1c58 <__Stack_Size+0x1458>
    1d08:	2e750324 	cdpcs	3, 7, cr0, cr5, cr4, {1}
    1d0c:	2f580e03 	svccs	0x00580e03
    1d10:	2f2d2f3b 	svccs	0x002d2f3b
    1d14:	232c2f23 	teqcs	ip, #35, 30	; 0x8c
    1d18:	7477032b 	ldrbtvc	r0, [r7], #-811	; 0x32b
    1d1c:	49212f37 	stmdbmi	r1!, {r0, r1, r2, r4, r5, r8, r9, sl, fp, sp}
    1d20:	763f2d2f 	ldrtvc	r2, [pc], -pc, lsr #26
    1d24:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    1d28:	20750324 	rsbscs	r0, r5, r4, lsr #6
    1d2c:	213c0e03 	teqcs	ip, r3, lsl #28
    1d30:	232d2f3b 	teqcs	sp, #59, 30	; 0xec
    1d34:	311e2f21 	tstcc	lr, r1, lsr #30
    1d38:	3c77032b 	ldclcc	3, cr0, [r7], #-172	; 0xffffff54
    1d3c:	49212f29 	stmdbmi	r1!, {r0, r3, r5, r8, r9, sl, fp, sp}
    1d40:	684d2d2f 	stmdavs	sp, {r0, r1, r2, r3, r5, r8, sl, fp, sp}^
    1d44:	2d2f492d 	stccs	9, cr4, [pc, #-180]!	; 1c98 <__Stack_Size+0x1498>
    1d48:	2e750324 	cdpcs	3, 7, cr0, cr5, cr4, {1}
    1d4c:	2f3c0e03 	svccs	0x003c0e03
    1d50:	2f2d2f3b 	svccs	0x002d2f3b
    1d54:	232c2f23 	teqcs	ip, #35, 30	; 0x8c
    1d58:	7477032b 	ldrbtvc	r0, [r7], #-811	; 0x32b
    1d5c:	49212f37 	stmdbmi	r1!, {r0, r1, r2, r4, r5, r8, r9, sl, fp, sp}
    1d60:	763f2d2f 	ldrtvc	r2, [pc], -pc, lsr #26
    1d64:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    1d68:	20750324 	rsbscs	r0, r5, r4, lsr #6
    1d6c:	213c0e03 	teqcs	ip, r3, lsl #28
    1d70:	232d2f3b 	teqcs	sp, #59, 30	; 0xec
    1d74:	311e2f21 	tstcc	lr, r1, lsr #30
    1d78:	3c77032b 	ldclcc	3, cr0, [r7], #-172	; 0xffffff54
    1d7c:	49212f29 	stmdbmi	r1!, {r0, r3, r5, r8, r9, sl, fp, sp}
    1d80:	684d2d2f 	stmdavs	sp, {r0, r1, r2, r3, r5, r8, sl, fp, sp}^
    1d84:	2d2f492d 	stccs	9, cr4, [pc, #-180]!	; 1cd8 <__Stack_Size+0x14d8>
    1d88:	2e750324 	cdpcs	3, 7, cr0, cr5, cr4, {1}
    1d8c:	2f3c0e03 	svccs	0x003c0e03
    1d90:	2f2d2f3b 	svccs	0x002d2f3b
    1d94:	232c2f23 	teqcs	ip, #35, 30	; 0x8c
    1d98:	7477032b 	ldrbtvc	r0, [r7], #-811	; 0x32b
    1d9c:	49212f29 	stmdbmi	r1!, {r0, r3, r5, r8, r9, sl, fp, sp}
    1da0:	763f2d2f 	ldrtvc	r2, [pc], -pc, lsr #26
    1da4:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    1da8:	20750324 	rsbscs	r0, r5, r4, lsr #6
    1dac:	213c0e03 	teqcs	ip, r3, lsl #28
    1db0:	232d2f3b 	teqcs	sp, #59, 30	; 0xec
    1db4:	311e2f21 	tstcc	lr, r1, lsr #30
    1db8:	3c77032b 	ldclcc	3, cr0, [r7], #-172	; 0xffffff54
    1dbc:	49212f29 	stmdbmi	r1!, {r0, r3, r5, r8, r9, sl, fp, sp}
    1dc0:	684d2d2f 	stmdavs	sp, {r0, r1, r2, r3, r5, r8, sl, fp, sp}^
    1dc4:	2d2f492d 	stccs	9, cr4, [pc, #-180]!	; 1d18 <__Stack_Size+0x1518>
    1dc8:	2e750324 	cdpcs	3, 7, cr0, cr5, cr4, {1}
    1dcc:	2f3c0e03 	svccs	0x003c0e03
    1dd0:	2f2d2f3b 	svccs	0x002d2f3b
    1dd4:	232c2f23 	teqcs	ip, #35, 30	; 0x8c
    1dd8:	7477032b 	ldrbtvc	r0, [r7], #-811	; 0x32b
    1ddc:	49212f29 	stmdbmi	r1!, {r0, r3, r5, r8, r9, sl, fp, sp}
    1de0:	763f2d2f 	ldrtvc	r2, [pc], -pc, lsr #26
    1de4:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    1de8:	20750324 	rsbscs	r0, r5, r4, lsr #6
    1dec:	213c0e03 	teqcs	ip, r3, lsl #28
    1df0:	232d2f3b 	teqcs	sp, #59, 30	; 0xec
    1df4:	311e2f21 	tstcc	lr, r1, lsr #30
    1df8:	00d5032b 	sbcseq	r0, r5, fp, lsr #6
    1dfc:	00040220 	andeq	r0, r4, r0, lsr #4
    1e00:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1e04:	00000002 	andeq	r0, r0, r2
    1e08:	028a0300 	addeq	r0, sl, #0, 6
    1e0c:	04232e01 	strteq	r2, [r3], #-3585	; 0xe01
    1e10:	7e960302 	cdpvc	3, 9, cr0, cr6, cr2, {0}
    1e14:	0301043c 	movweq	r0, #5180	; 0x143c
    1e18:	02ac01ec 	adceq	r0, ip, #236, 2	; 0x3b
    1e1c:	01010002 	tsteq	r1, r2
    1e20:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    1e24:	0308002b 	movweq	r0, #32811	; 0x802b
    1e28:	030102b0 	movweq	r0, #4784	; 0x12b0
    1e2c:	032e7f96 	teqeq	lr, #600	; 0x258
    1e30:	202000ea 	eorcs	r0, r0, sl, ror #1
    1e34:	2e7f9303 	cdpcs	3, 7, cr9, cr15, cr3, {0}
    1e38:	421d4b41 	andsmi	r4, sp, #66560	; 0x10400
    1e3c:	2c301f2f 	ldccs	15, cr1, [r0], #-188	; 0xffffff44
    1e40:	2c2f4d30 	stccs	13, cr4, [pc], #-192	; 1d88 <__Stack_Size+0x1588>
    1e44:	59032b23 	stmdbpl	r3, {r0, r1, r5, r8, r9, fp, sp}
    1e48:	212f1b58 	teqcs	pc, r8, asr fp	; <UNPREDICTABLE>
    1e4c:	3f2d2f49 	svccc	0x002d2f49
    1e50:	21492d68 	cmpcs	r9, r8, ror #26
    1e54:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1e58:	3c0e032e 	stccc	3, cr0, [lr], {46}	; 0x2e
    1e5c:	2d2f3b2f 	fstmdbxcs	pc!, {d3-d25}	;@ Deprecated
    1e60:	2c2f233d 	stccs	3, cr2, [pc], #-244	; 1d74 <__Stack_Size+0x1574>
    1e64:	77032b23 	strvc	r2, [r3, -r3, lsr #22]
    1e68:	212f1b58 	teqcs	pc, r8, asr fp	; <UNPREDICTABLE>
    1e6c:	3f2d2f65 	svccc	0x002d2f65
    1e70:	21492d68 	cmpcs	r9, r8, ror #26
    1e74:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1e78:	3c0e0320 	stccc	3, cr0, [lr], {32}
    1e7c:	2d2f572f 	stccs	7, cr5, [pc, #-188]!	; 1dc8 <__Stack_Size+0x15c8>
    1e80:	2c2f314b 	stfcss	f3, [pc], #-300	; 1d5c <__Stack_Size+0x155c>
    1e84:	77032b23 	strvc	r2, [r3, -r3, lsr #22]
    1e88:	74034358 	strvc	r4, [r3], #-856	; 0x358
    1e8c:	49213d3c 	stmdbmi	r1!, {r2, r3, r4, r5, r8, sl, fp, ip, sp}
    1e90:	843f2d2f 	ldrthi	r2, [pc], #-3375	; 1e98 <__Stack_Size+0x1698>
    1e94:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    1e98:	4a750324 	bmi	1d42b30 <__Stack_Size+0x1d42330>
    1e9c:	2f580e03 	svccs	0x00580e03
    1ea0:	2f2d2f3b 	svccs	0x002d2f3b
    1ea4:	232c3d23 	teqcs	ip, #2240	; 0x8c0
    1ea8:	4a72032b 	bmi	1c82b5c <__Stack_Size+0x1c8235c>
    1eac:	2f65213d 	svccs	0x0065213d
    1eb0:	2d843f2d 	stccs	15, cr3, [r4, #180]	; 0xb4
    1eb4:	242d2149 	strtcs	r2, [sp], #-329	; 0x149
    1eb8:	032e7503 	teqeq	lr, #12582912	; 0xc00000
    1ebc:	3b2f580e 	blcc	bd7efc <__Stack_Size+0xbd76fc>
    1ec0:	232f2d2f 	teqcs	pc, #3008	; 0xbc0
    1ec4:	232c303b 	teqcs	ip, #59	; 0x3b
    1ec8:	00f0032b 	rscseq	r0, r0, fp, lsr #6
    1ecc:	7f870320 	svcvc	0x00870320
    1ed0:	212f1b90 			; <UNDEFINED> instruction: 0x212f1b90
    1ed4:	3f2d2f49 	svccc	0x002d2f49
    1ed8:	21492d68 	cmpcs	r9, r8, ror #26
    1edc:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1ee0:	3c0e034a 	stccc	3, cr0, [lr], {74}	; 0x4a
    1ee4:	2d2f3b2f 	fstmdbxcs	pc!, {d3-d25}	;@ Deprecated
    1ee8:	2c2f232f 	stccs	3, cr2, [pc], #-188	; 1e34 <__Stack_Size+0x1634>
    1eec:	77032b23 	strvc	r2, [r3, -r3, lsr #22]
    1ef0:	212f2958 	teqcs	pc, r8, asr r9	; <UNPREDICTABLE>
    1ef4:	3f2d2f65 	svccc	0x002d2f65
    1ef8:	21492d68 	cmpcs	r9, r8, ror #26
    1efc:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1f00:	3c0e0320 	stccc	3, cr0, [lr], {32}
    1f04:	2d2f3b2f 	fstmdbxcs	pc!, {d3-d25}	;@ Deprecated
    1f08:	222d232f 	eorcs	r2, sp, #-1140850688	; 0xbc000000
    1f0c:	032b232c 	teqeq	fp, #44, 6	; 0xb0000000
    1f10:	2f1b5877 	svccs	0x001b5877
    1f14:	2d2f4921 	stccs	9, cr4, [pc, #-132]!	; 1e98 <__Stack_Size+0x1698>
    1f18:	492d683f 	pushmi	{r0, r1, r2, r3, r4, r5, fp, sp, lr}
    1f1c:	03242d21 	teqeq	r4, #2112	; 0x840
    1f20:	0e032e75 	mcreq	14, 0, r2, cr3, cr5, {3}
    1f24:	2f3b2f3c 	svccs	0x003b2f3c
    1f28:	2f232f2d 	svccs	0x00232f2d
    1f2c:	032b232c 	teqeq	fp, #44, 6	; 0xb0000000
    1f30:	2f295877 	svccs	0x00295877
    1f34:	2d2f6521 	cfstr32cs	mvfx6, [pc, #-132]!	; 1eb8 <__Stack_Size+0x16b8>
    1f38:	492d683f 	pushmi	{r0, r1, r2, r3, r4, r5, fp, sp, lr}
    1f3c:	03242d21 	teqeq	r4, #2112	; 0x840
    1f40:	0e032075 	mcreq	0, 0, r2, cr3, cr5, {3}
    1f44:	4b3b2f3c 	blmi	ecdc3c <__Stack_Size+0xecd43c>
    1f48:	2f232f2d 	svccs	0x00232f2d
    1f4c:	032b232c 	teqeq	fp, #44, 6	; 0xb0000000
    1f50:	2f1b5877 	svccs	0x001b5877
    1f54:	2d2f4921 	stccs	9, cr4, [pc, #-132]!	; 1ed8 <__Stack_Size+0x16d8>
    1f58:	492d683f 	pushmi	{r0, r1, r2, r3, r4, r5, fp, sp, lr}
    1f5c:	03242d21 	teqeq	r4, #2112	; 0x840
    1f60:	0e032075 	mcreq	0, 0, r2, cr3, cr5, {3}
    1f64:	2f3b2f3c 	svccs	0x003b2f3c
    1f68:	2f232f2d 	svccs	0x00232f2d
    1f6c:	032b232c 	teqeq	fp, #44, 6	; 0xb0000000
    1f70:	032e7ede 	teqeq	lr, #3552	; 0xde0
    1f74:	679e00e4 	ldrvs	r0, [lr, r4, ror #1]
    1f78:	262b311e 			; <UNDEFINED> instruction: 0x262b311e
    1f7c:	3b301e4c 	blcc	c098b4 <__Stack_Size+0xc090b4>
    1f80:	2c2f314b 	stfcss	f3, [pc], #-300	; 1e5c <__Stack_Size+0x165c>
    1f84:	2c032b23 	stccs	11, cr2, [r3], {35}	; 0x23
    1f88:	2e54032e 	cdpcs	3, 5, cr0, cr4, cr14, {1}
    1f8c:	1b3c2c03 	blne	f0cfa0 <__Stack_Size+0xf0c7a0>
    1f90:	2f65213d 	svccs	0x0065213d
    1f94:	2d683f2d 	stclcs	15, cr3, [r8, #-180]!	; 0xffffff4c
    1f98:	242d2149 	strtcs	r2, [sp], #-329	; 0x149
    1f9c:	03207503 	teqeq	r0, #12582912	; 0xc00000
    1fa0:	3b2f3c0e 	blcc	bd0fe0 <__Stack_Size+0xbd07e0>
    1fa4:	232f2d2f 	teqcs	pc, #3008	; 0xbc0
    1fa8:	2b232c2f 	blcs	8cd06c <__Stack_Size+0x8cc86c>
    1fac:	29587703 	ldmdbcs	r8, {r0, r1, r8, r9, sl, ip, sp, lr}^
    1fb0:	2f3b212f 	svccs	0x003b212f
    1fb4:	2d683f2d 	stclcs	15, cr3, [r8, #-180]!	; 0xffffff4c
    1fb8:	242d2149 	strtcs	r2, [sp], #-329	; 0x149
    1fbc:	032e7503 	teqeq	lr, #12582912	; 0xc00000
    1fc0:	211f3c0f 	tstcs	pc, pc, lsl #24
    1fc4:	2f2f4d49 	svccs	0x002f4d49
    1fc8:	032b311e 	teqeq	fp, #-2147483641	; 0x80000007
    1fcc:	02200191 	eoreq	r0, r0, #1073741860	; 0x40000024
    1fd0:	01010004 	tsteq	r1, r4
    1fd4:	000003fa 	strdeq	r0, [r0], -sl
    1fd8:	01600002 	cmneq	r0, r2
    1fdc:	01020000 	mrseq	r0, (UNDEF: 2)
    1fe0:	000d0efb 	strdeq	r0, [sp], -fp
    1fe4:	01010101 	tsteq	r1, r1, lsl #2
    1fe8:	01000000 	mrseq	r0, (UNDEF: 0)
    1fec:	32010000 	andcc	r0, r1, #0
    1ff0:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1ff4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    1ff8:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
    1ffc:	206d6172 	rsbcs	r6, sp, r2, ror r1
    2000:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
    2004:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
    2008:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
    200c:	20756e67 	rsbscs	r6, r5, r7, ror #28
    2010:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 1e48 <__Stack_Size+0x1648>
    2014:	72612073 	rsbvc	r2, r1, #115	; 0x73
    2018:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
    201c:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    2020:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
    2024:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
    2028:	71343130 	teqvc	r4, r0, lsr r1
    202c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    2030:	6f6e2d6d 	svcvs	0x006e2d6d
    2034:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    2038:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    203c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2040:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    2044:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    2048:	00656e69 	rsbeq	r6, r5, r9, ror #28
    204c:	705c3a63 	subsvc	r3, ip, r3, ror #20
    2050:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    2054:	66206d61 	strtvs	r6, [r0], -r1, ror #26
    2058:	73656c69 	cmnvc	r5, #26880	; 0x6900
    205c:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
    2060:	675c2936 	smmlarvs	ip, r6, r9, r2
    2064:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
    2068:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    206c:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
    2070:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
    2074:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    2078:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
    207c:	30322038 	eorscc	r2, r2, r8, lsr r0
    2080:	33713431 	cmncc	r1, #822083584	; 0x31000000
    2084:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    2088:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    208c:	61652d65 	cmnvs	r5, r5, ror #26
    2090:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    2094:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2098:	63006564 	movwvs	r6, #1380	; 0x564
    209c:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    20a0:	6172676f 	cmnvs	r2, pc, ror #14
    20a4:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    20a8:	2073656c 	rsbscs	r6, r3, ip, ror #10
    20ac:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    20b0:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    20b4:	6f742075 	svcvs	0x00742075
    20b8:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    20bc:	206d7261 	rsbcs	r7, sp, r1, ror #4
    20c0:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    20c4:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    20c8:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    20cc:	31303220 	teqcc	r0, r0, lsr #4
    20d0:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    20d4:	5c62696c 	stclpl	9, cr6, [r2], #-432	; 0xfffffe50
    20d8:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
    20dc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    20e0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    20e4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    20e8:	2e345c69 	cdpcs	12, 3, cr5, cr4, cr9, {3}
    20ec:	5c342e38 	ldcpl	14, cr2, [r4], #-224	; 0xffffff20
    20f0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    20f4:	00656475 	rsbeq	r6, r5, r5, ror r4
    20f8:	72706600 	rsbsvc	r6, r0, #0, 12
    20fc:	2e656d69 	cdpcs	13, 6, cr6, cr5, cr9, {3}
    2100:	00010063 	andeq	r0, r1, r3, rrx
    2104:	72706600 	rsbsvc	r6, r0, #0, 12
    2108:	2e656d69 	cdpcs	13, 6, cr6, cr5, cr9, {3}
    210c:	00010068 	andeq	r0, r1, r8, rrx
    2110:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    2114:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    2118:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    211c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    2120:	00020068 	andeq	r0, r2, r8, rrx
    2124:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    2128:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    212c:	00030068 	andeq	r0, r3, r8, rrx
    2130:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    2134:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    2138:	00040068 	andeq	r0, r4, r8, rrx
    213c:	05000000 	streq	r0, [r0, #-0]
    2140:	00000002 	andeq	r0, r0, r2
    2144:	00c90300 	sbceq	r0, r9, r0, lsl #6
    2148:	7a3b2501 	bvc	ecb554 <__Stack_Size+0xecad54>
    214c:	01000402 	tsteq	r0, r2, lsl #8
    2150:	02050001 	andeq	r0, r5, #1
    2154:	08003228 	stmdaeq	r0, {r3, r5, r9, ip, sp}
    2158:	0100dd03 	tsteq	r0, r3, lsl #26
    215c:	3c4f034a 	mcrrcc	3, 4, r0, pc, cr10
    2160:	22224067 	eorcs	r4, r2, #103	; 0x67
    2164:	2e2b032c 	cdpcs	3, 2, cr0, cr11, cr12, {1}
    2168:	522e7903 	eorpl	r7, lr, #49152	; 0xc000
    216c:	2d295a33 	vstmdbcs	r9!, {s10-s60}
    2170:	04020034 	streq	r0, [r2], #-52	; 0x34
    2174:	13220202 	teqne	r2, #536870912	; 0x20000000
    2178:	49069e06 	stmdbmi	r6, {r1, r2, r9, sl, fp, ip, pc}
    217c:	3b212d3d 	blcc	84d678 <__Stack_Size+0x84ce78>
    2180:	68211f3d 	stmdavs	r1!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, ip}
    2184:	4b3c5903 	blmi	f18598 <__Stack_Size+0xf17d98>
    2188:	032b311e 	teqeq	fp, #-2147483641	; 0x80000007
    218c:	00bd202a 	adcseq	r2, sp, sl, lsr #32
    2190:	3d020402 	cfstrscc	mvf0, [r2, #-8]
    2194:	02040200 	andeq	r0, r4, #0, 4
    2198:	00664f03 	rsbeq	r4, r6, r3, lsl #30
    219c:	03020402 	movweq	r0, #9218	; 0x2402
    21a0:	02002031 	andeq	r2, r0, #49	; 0x31
    21a4:	52030204 	andpl	r0, r3, #4, 4	; 0x40000000
    21a8:	1e3d212e 	rsfneep	f2, f5, #0.5
    21ac:	02002b31 	andeq	r2, r0, #50176	; 0xc400
    21b0:	31030204 	tstcc	r3, r4, lsl #4
    21b4:	04020020 	streq	r0, [r2], #-32
    21b8:	7fa80302 	svcvc	0x00a80302
    21bc:	04020020 	streq	r0, [r2], #-32
    21c0:	00d80302 	sbcseq	r0, r8, r2, lsl #6
    21c4:	04020020 	streq	r0, [r2], #-32
    21c8:	7fab0302 	svcvc	0x00ab0302
    21cc:	2c59212e 	ldfcse	f2, [r9], {46}	; 0x2e
    21d0:	f5032b31 			; <UNDEFINED> instruction: 0xf5032b31
    21d4:	21312000 	teqcs	r1, r0
    21d8:	3c590373 	mrrccc	3, 7, r0, r9, cr3
    21dc:	7fbb0343 	svcvc	0x00bb0343
    21e0:	031e313c 	tsteq	lr, #60, 2
    21e4:	2d213c35 	stccs	12, cr3, [r1, #-212]!	; 0xffffff2c
    21e8:	024a4d03 	subeq	r4, sl, #3, 26	; 0xc0
    21ec:	01010003 	tsteq	r1, r3
    21f0:	00020500 	andeq	r0, r2, r0, lsl #10
    21f4:	03000000 	movweq	r0, #0
    21f8:	2e0100f8 	mcrcs	0, 0, r0, cr1, cr8, {7}
    21fc:	03020431 	movweq	r0, #9265	; 0x2431
    2200:	04587fac 	ldrbeq	r7, [r8], #-4012	; 0xfac
    2204:	00d60301 	sbcseq	r0, r6, r1, lsl #6
    2208:	000202ac 	andeq	r0, r2, ip, lsr #5
    220c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2210:	00000002 	andeq	r0, r0, r2
    2214:	01800300 	orreq	r0, r0, r0, lsl #6
    2218:	31025d01 	tstcc	r2, r1, lsl #26
    221c:	302f2f14 	eorcc	r2, pc, r4, lsl pc	; <UNPREDICTABLE>
    2220:	4a78032f 	bmi	1e02ee4 <__Stack_Size+0x1e026e4>
    2224:	212d241d 	teqcs	sp, sp, lsl r4
    2228:	022d211f 	eoreq	r2, sp, #-1073741817	; 0xc0000007
    222c:	01010002 	tsteq	r1, r2
    2230:	00020500 	andeq	r0, r2, r0, lsl #10
    2234:	03000000 	movweq	r0, #0
    2238:	08010191 	stmdaeq	r1, {r0, r4, r7, r8}
    223c:	3202be13 	andcc	fp, r2, #304	; 0x130
    2240:	1e4b1f13 	mcrne	15, 2, r1, cr11, cr3, {0}
    2244:	023e6521 	eorseq	r6, lr, #138412032	; 0x8400000
    2248:	01010002 	tsteq	r1, r2
    224c:	00020500 	andeq	r0, r2, r0, lsl #10
    2250:	03000000 	movweq	r0, #0
    2254:	0301019a 	movweq	r0, #4506	; 0x119a
    2258:	03207ef3 	teqeq	r0, #3888	; 0xf30
    225c:	0320018d 	teqeq	r0, #1073741859	; 0x40000023
    2260:	21207ef6 	strdcs	r7, [r0, -r6]!
    2264:	2b311e4b 	blcs	c49b98 <__Stack_Size+0xc49398>
    2268:	593c0e03 	ldmdbpl	ip!, {r0, r1, r9, sl, fp}
    226c:	032b312c 	teqeq	fp, #44, 2
    2270:	312000f5 	strdcc	r0, [r0, -r5]!
    2274:	02447321 	subeq	r7, r4, #-2080374784	; 0x84000000
    2278:	01010003 	tsteq	r1, r3
    227c:	00020500 	andeq	r0, r2, r0, lsl #10
    2280:	03000000 	movweq	r0, #0
    2284:	030101a0 	movweq	r0, #4512	; 0x11a0
    2288:	03207eed 	teqeq	r0, #3792	; 0xed0
    228c:	03200193 	teqeq	r0, #-1073741788	; 0xc0000024
    2290:	21207ef0 	strdcs	r7, [r0, -r0]!
    2294:	2b311e4b 	blcs	c49bc8 <__Stack_Size+0xc493c8>
    2298:	593c0e03 	ldmdbpl	ip!, {r0, r1, r9, sl, fp}
    229c:	032b312c 	teqeq	fp, #44, 2
    22a0:	312000f5 	strdcc	r0, [r0, -r5]!
    22a4:	85037321 	strhi	r7, [r3, #-801]	; 0x321
    22a8:	21233c7f 	teqcs	r3, pc, ror ip
    22ac:	2b312c59 	blcs	c4d418 <__Stack_Size+0xc4cc18>
    22b0:	2000f503 	andcs	pc, r0, r3, lsl #10
    22b4:	03732131 	cmneq	r3, #1073741836	; 0x4000000c
    22b8:	03023c0f 	movweq	r3, #11279	; 0x2c0f
    22bc:	00010100 	andeq	r0, r1, r0, lsl #2
    22c0:	00000205 	andeq	r0, r0, r5, lsl #4
    22c4:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
    22c8:	234a0101 	movtcs	r0, #41217	; 0xa101
    22cc:	8103312b 	tsthi	r3, fp, lsr #2
    22d0:	40672e7f 	rsbmi	r2, r7, pc, ror lr
    22d4:	032c2222 	teqeq	ip, #536870914	; 0x20000002
    22d8:	002000fa 	strdeq	r0, [r0], -sl	; <UNPREDICTABLE>
    22dc:	4b020402 	blmi	832ec <__Stack_Size+0x82aec>
    22e0:	02040200 	andeq	r0, r4, #0, 4
    22e4:	827f9003 	rsbshi	r9, pc, #3
    22e8:	02040200 	andeq	r0, r4, #0, 4
    22ec:	2000f003 	andcs	pc, r0, r3
    22f0:	02040200 	andeq	r0, r4, #0, 4
    22f4:	2e7f9303 	cdpcs	3, 7, cr9, cr15, cr3, {0}
    22f8:	311e3d21 	tstcc	lr, r1, lsr #26
    22fc:	3c5d032b 	mrrccc	3, 2, r0, sp, cr11
    2300:	2b311e59 	blcs	c49c6c <__Stack_Size+0xc4946c>
    2304:	2000f503 	andcs	pc, r0, r3, lsl #10
    2308:	04652131 	strbteq	r2, [r5], #-305	; 0x131
    230c:	7f920302 	svcvc	0x00920302
    2310:	0301043c 	movweq	r0, #5180	; 0x143c
    2314:	02049e66 	andeq	r9, r4, #1632	; 0x660
    2318:	042e1a03 	strteq	r1, [lr], #-2563	; 0xa03
    231c:	20690301 	rsbcs	r0, r9, r1, lsl #6
    2320:	312c6721 	teqcc	ip, r1, lsr #14
    2324:	3c0e032b 	stccc	3, cr0, [lr], {43}	; 0x2b
    2328:	2b311e67 	blcs	c49ccc <__Stack_Size+0xc494cc>
    232c:	2000f503 	andcs	pc, r0, r3, lsl #10
    2330:	39812131 	stmibcc	r1, {r0, r4, r5, r8, sp}
    2334:	0081214d 	addeq	r2, r1, sp, asr #2
    2338:	03020402 	movweq	r0, #9218	; 0x2402
    233c:	0c033c18 	stceq	12, cr3, [r3], {24}
    2340:	7ef7033c 	mrcvc	3, 7, r0, cr7, cr12, {1}
    2344:	022c313c 	eoreq	r3, ip, #60, 2
    2348:	01010003 	tsteq	r1, r3
    234c:	00020500 	andeq	r0, r2, r0, lsl #10
    2350:	03000000 	movweq	r0, #0
    2354:	040101bc 	streq	r0, [r1], #-444	; 0x1bc
    2358:	7eeb0302 	cdpvc	3, 14, cr0, cr11, cr2, {0}
    235c:	0301043c 	movweq	r0, #5180	; 0x143c
    2360:	20200195 	mlacs	r0, r5, r1, r0
    2364:	eb030204 	bl	c2b7c <__Stack_Size+0xc237c>
    2368:	01042e7e 	tsteq	r4, lr, ror lr
    236c:	90019c03 	andls	r9, r1, r3, lsl #24
    2370:	e4030204 	str	r0, [r3], #-516	; 0x204
    2374:	0104207e 	tsteq	r4, lr, ror r0
    2378:	20019703 	andcs	r9, r1, r3, lsl #14
    237c:	02040200 	andeq	r0, r4, #0, 4
    2380:	04020026 	streq	r0, [r2], #-38	; 0x26
    2384:	02003d02 	andeq	r3, r0, #2, 26	; 0x80
    2388:	002c0204 	eoreq	r0, ip, r4, lsl #4
    238c:	31020402 	tstcc	r2, r2, lsl #8
    2390:	02040200 	andeq	r0, r4, #0, 4
    2394:	7f8a032b 	svcvc	0x008a032b
    2398:	5a03a320 	bpl	eb020 <__Stack_Size+0xea820>
    239c:	22403d2e 	subcs	r3, r0, #2944	; 0xb80
    23a0:	99032c22 	stmdbls	r3, {r1, r5, sl, fp, sp}
    23a4:	02042001 	andeq	r2, r4, #1
    23a8:	3c7edb03 	ldclcc	11, cr13, [lr], #-12
    23ac:	a5030104 	strge	r0, [r3, #-260]	; 0x104
    23b0:	02042001 	andeq	r2, r4, #1
    23b4:	2e7edb03 	vaddcs.f64	d29, d14, d3
    23b8:	a5030104 	strge	r0, [r3, #-260]	; 0x104
    23bc:	68239e01 	stmdavs	r3!, {r0, r9, sl, fp, ip, pc}
    23c0:	667a03ad 	ldrbtvs	r0, [sl], -sp, lsr #7
    23c4:	033c0a03 	teqeq	ip, #12288	; 0x3000
    23c8:	313c7eda 			; <UNDEFINED> instruction: 0x313c7eda
    23cc:	0003022c 	andeq	r0, r3, ip, lsr #4
    23d0:	01520101 	cmpeq	r2, r1, lsl #2
    23d4:	00020000 	andeq	r0, r2, r0
    23d8:	000000fb 	strdeq	r0, [r0], -fp
    23dc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    23e0:	0101000d 	tsteq	r1, sp
    23e4:	00000101 	andeq	r0, r0, r1, lsl #2
    23e8:	00000100 	andeq	r0, r0, r0, lsl #2
    23ec:	35353201 	ldrcc	r3, [r5, #-513]!	; 0x201
    23f0:	63003931 	movwvs	r3, #2353	; 0x931
    23f4:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    23f8:	6172676f 	cmnvs	r2, pc, ror #14
    23fc:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    2400:	2073656c 	rsbscs	r6, r3, ip, ror #10
    2404:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    2408:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    240c:	6f742075 	svcvs	0x00742075
    2410:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    2414:	206d7261 	rsbcs	r7, sp, r1, ror #4
    2418:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    241c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    2420:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    2424:	31303220 	teqcc	r0, r0, lsr #4
    2428:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    242c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    2430:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    2434:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    2438:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    243c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    2440:	616d5c65 	cmnvs	sp, r5, ror #24
    2444:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    2448:	3a630065 	bcc	18c25e4 <__Stack_Size+0x18c1de4>
    244c:	6f72705c 	svcvs	0x0072705c
    2450:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    2454:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    2458:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    245c:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    2460:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    2464:	6f6f7420 	svcvs	0x006f7420
    2468:	6120736c 	teqvs	r0, ip, ror #6
    246c:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    2470:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    2474:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    2478:	20382e34 	eorscs	r2, r8, r4, lsr lr
    247c:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    2480:	615c3371 	cmpvs	ip, r1, ror r3
    2484:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    2488:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    248c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    2490:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    2494:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2498:	6f6d0000 	svcvs	0x006d0000
    249c:	32687072 	rsbcc	r7, r8, #114	; 0x72
    24a0:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    24a4:	0100632e 	tsteq	r0, lr, lsr #6
    24a8:	645f0000 	ldrbvs	r0, [pc], #-0	; 24b0 <__Stack_Size+0x1cb0>
    24ac:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    24b0:	745f746c 	ldrbvc	r7, [pc], #-1132	; 24b8 <__Stack_Size+0x1cb8>
    24b4:	73657079 	cmnvc	r5, #121	; 0x79
    24b8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    24bc:	74730000 	ldrbtvc	r0, [r3], #-0
    24c0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    24c4:	0300682e 	movweq	r6, #2094	; 0x82e
    24c8:	32660000 	rsbcc	r0, r6, #0
    24cc:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    24d0:	0100682e 	tsteq	r0, lr, lsr #16
    24d4:	00000000 	andeq	r0, r0, r0
    24d8:	00000205 	andeq	r0, r0, r5, lsl #4
    24dc:	0a030000 	beq	c24e4 <__Stack_Size+0xc1ce4>
    24e0:	201c2401 	andscs	r2, ip, r1, lsl #8
    24e4:	4b241c24 	blmi	90957c <__Stack_Size+0x908d7c>
    24e8:	3d59594b 	ldclcc	9, cr5, [r9, #-300]	; 0xfffffed4
    24ec:	01000502 	tsteq	r0, r2, lsl #10
    24f0:	02050001 	andeq	r0, r5, #1
    24f4:	00000000 	andeq	r0, r0, r0
    24f8:	0100cc03 	tsteq	r0, r3, lsl #24
    24fc:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    2500:	03202032 	teqeq	r0, #50	; 0x32
    2504:	32033c4e 	andcc	r3, r3, #19968	; 0x4e00
    2508:	204e033c 	subcs	r0, lr, ip, lsr r3
    250c:	03594b2f 	cmpeq	r9, #48128	; 0xbc00
    2510:	595b5811 	ldmdbpl	fp, {r0, r4, fp, ip, lr}^
    2514:	5b5b4d59 	blpl	16d5a80 <__Stack_Size+0x16d5280>
    2518:	59af4d4b 	stmibpl	pc!, {r0, r1, r3, r6, r8, sl, fp, lr}	; <UNPREDICTABLE>
    251c:	0b033e3d 	bleq	d1e18 <__Stack_Size+0xd1618>
    2520:	023f3d58 	eorseq	r3, pc, #88, 26	; 0x1600
    2524:	01010009 	tsteq	r1, r9
    2528:	00000805 	andeq	r0, r0, r5, lsl #16
    252c:	00310002 	eorseq	r0, r1, r2
    2530:	01020000 	mrseq	r0, (UNDEF: 2)
    2534:	000d0efb 	strdeq	r0, [sp], -fp
    2538:	01010101 	tsteq	r1, r1, lsl #2
    253c:	01000000 	mrseq	r0, (UNDEF: 0)
    2540:	32010000 	andcc	r0, r1, #0
    2544:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    2548:	68730000 	ldmdavs	r3!, {}^	; <UNPREDICTABLE>
    254c:	36353261 	ldrtcc	r3, [r5], -r1, ror #4
    2550:	0100632e 	tsteq	r0, lr, lsr #6
    2554:	68730000 	ldmdavs	r3!, {}^	; <UNPREDICTABLE>
    2558:	36353261 	ldrtcc	r3, [r5], -r1, ror #4
    255c:	0100682e 	tsteq	r0, lr, lsr #16
    2560:	00000000 	andeq	r0, r0, r0
    2564:	33c80205 	biccc	r0, r8, #1342177280	; 0x50000000
    2568:	2f030800 	svccs	0x00030800
    256c:	302d3301 	eorcc	r3, sp, r1, lsl #6
    2570:	21212121 	teqcs	r1, r1, lsr #2
    2574:	20760321 	rsbscs	r0, r6, r1, lsr #6
    2578:	21213023 	teqcs	r1, r3, lsr #32
    257c:	21331c21 	teqcs	r3, r1, lsr #24
    2580:	21207603 	teqcs	r0, r3, lsl #12
    2584:	02200a03 	eoreq	r0, r0, #12288	; 0x3000
    2588:	01010013 	tsteq	r1, r3, lsl r0
    258c:	20020500 	andcs	r0, r2, r0, lsl #10
    2590:	03080034 	movweq	r0, #32820	; 0x8034
    2594:	033c013e 	teqeq	ip, #-2147483633	; 0x8000000f
    2598:	211e2034 	tstcs	lr, r4, lsr r0
    259c:	20790322 	rsbscs	r0, r9, r2, lsr #6
    25a0:	241f2224 	ldrcs	r2, [pc], #-548	; 25a8 <__Stack_Size+0x1da8>
    25a4:	262e7803 	strtcs	r7, [lr], -r3, lsl #16
    25a8:	26207903 	strtcs	r7, [r0], -r3, lsl #18
    25ac:	271f1c1f 			; <UNDEFINED> instruction: 0x271f1c1f
    25b0:	3c780322 	ldclcc	3, cr0, [r8], #-136	; 0xffffff78
    25b4:	79032721 	stmdbvc	r3, {r0, r5, r8, r9, sl, sp}
    25b8:	20540374 	subscs	r0, r4, r4, ror r3
    25bc:	03203303 	teqeq	r0, #201326592	; 0xc000000
    25c0:	2c03664d 	stccs	6, cr6, [r3], {77}	; 0x4d
    25c4:	2054032e 	subscs	r0, r4, lr, lsr #6
    25c8:	032e3303 	teqeq	lr, #201326592	; 0xc000000
    25cc:	3303664d 	movwcc	r6, #13901	; 0x364d
    25d0:	4a4d0374 	bmi	13433a8 <__Stack_Size+0x1342ba8>
    25d4:	032e3303 	teqeq	lr, #201326592	; 0xc000000
    25d8:	32034a4e 	andcc	r4, r3, #319488	; 0x4e000
    25dc:	2e4e032e 	cdpcs	3, 4, cr0, cr14, cr14, {1}
    25e0:	2e2d031f 	mcrcs	3, 1, r0, cr13, cr15, {0}
    25e4:	207a0326 	rsbscs	r0, sl, r6, lsr #6
    25e8:	204e0326 	subcs	r0, lr, r6, lsr #6
    25ec:	033c3203 	teqeq	ip, #805306368	; 0x30000000
    25f0:	2c032e4e 	stccs	14, cr2, [r3], {78}	; 0x4e
    25f4:	4e03263c 	mcrmi	6, 0, r2, cr3, cr12, {1}
    25f8:	2e330320 	cdpcs	3, 3, cr0, cr3, cr0, {1}
    25fc:	031f2f1f 	tsteq	pc, #31, 30	; 0x7c
    2600:	3203204e 	andcc	r2, r3, #78	; 0x4e
    2604:	3c4e032e 	mcrrcc	3, 2, r0, lr, cr14
    2608:	03203303 	teqeq	r0, #201326592	; 0xc000000
    260c:	039e084e 	orrseq	r0, lr, #5111808	; 0x4e0000
    2610:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    2614:	20320366 	eorscs	r0, r2, r6, ror #6
    2618:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    261c:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    2620:	20320320 	eorscs	r0, r2, r0, lsr #6
    2624:	204d032f 	subcs	r0, sp, pc, lsr #6
    2628:	214a3203 	cmpcs	sl, r3, lsl #4
    262c:	032e4d03 	teqeq	lr, #3, 26	; 0xc0
    2630:	4e033c33 	mcrmi	12, 0, r3, cr3, cr3, {1}
    2634:	32032e08 	andcc	r2, r3, #8, 28	; 0x80
    2638:	664e0320 	strbvs	r0, [lr], -r0, lsr #6
    263c:	03203203 	teqeq	r0, #805306368	; 0x30000000
    2640:	3203664e 	andcc	r6, r3, #81788928	; 0x4e00000
    2644:	4a4e032e 	bmi	1383304 <__Stack_Size+0x1382b04>
    2648:	033c3203 	teqeq	ip, #805306368	; 0x30000000
    264c:	3203204e 	andcc	r2, r3, #78	; 0x4e
    2650:	2e4e0320 	cdpcs	3, 4, cr0, cr14, cr0, {1}
    2654:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    2658:	32033c4f 	andcc	r3, r3, #20224	; 0x4f00
    265c:	204d0320 	subcs	r0, sp, r0, lsr #6
    2660:	03203303 	teqeq	r0, #201326592	; 0xc000000
    2664:	3203204e 	andcc	r2, r3, #78	; 0x4e
    2668:	2e4e0320 	cdpcs	3, 4, cr0, cr14, cr0, {1}
    266c:	03203203 	teqeq	r0, #805306368	; 0x30000000
    2670:	3203584e 	andcc	r5, r3, #5111808	; 0x4e0000
    2674:	2e4e032e 	cdpcs	3, 4, cr0, cr14, cr14, {1}
    2678:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    267c:	3203ba4e 	andcc	fp, r3, #319488	; 0x4e000
    2680:	904e032e 	subls	r0, lr, lr, lsr #6
    2684:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    2688:	32032e4e 	andcc	r2, r3, #1248	; 0x4e0
    268c:	2e4e034a 	cdpcs	3, 4, cr0, cr14, cr10, {2}
    2690:	03203203 	teqeq	r0, #805306368	; 0x30000000
    2694:	32033c4e 	andcc	r3, r3, #19968	; 0x4e00
    2698:	204f032e 	subcs	r0, pc, lr, lsr #6
    269c:	2d203203 	sfmcs	f3, 4, [r0, #-12]!
    26a0:	1f2e4f03 	svcne	0x002e4f03
    26a4:	032e3303 	teqeq	lr, #201326592	; 0xc000000
    26a8:	3103584e 	tstcc	r3, lr, asr #16
    26ac:	204f0320 	subcs	r0, pc, r0, lsr #6
    26b0:	2d203203 	sfmcs	f3, 4, [r0, #-12]!
    26b4:	e44e0321 	strb	r0, [lr], #-801	; 0x321
    26b8:	03203203 	teqeq	r0, #805306368	; 0x30000000
    26bc:	3203584e 	andcc	r5, r3, #5111808	; 0x4e0000
    26c0:	4a4e0320 	bmi	1383348 <__Stack_Size+0x1382b48>
    26c4:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    26c8:	32034a4e 	andcc	r4, r3, #319488	; 0x4e000
    26cc:	204e034a 	subcs	r0, lr, sl, asr #6
    26d0:	03203203 	teqeq	r0, #805306368	; 0x30000000
    26d4:	33032e4e 	movwcc	r2, #15950	; 0x3e4e
    26d8:	4e031f2e 	cdpmi	15, 0, cr1, cr3, cr14, {1}
    26dc:	32032f2e 	andcc	r2, r3, #46, 30	; 0xb8
    26e0:	204e0320 	subcs	r0, lr, r0, lsr #6
    26e4:	ab203203 	blge	80eef8 <__Stack_Size+0x80e6f8>
    26e8:	584e032f 	stmdapl	lr, {r0, r1, r2, r3, r5, r8, r9}^
    26ec:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    26f0:	3203664e 	andcc	r6, r3, #81788928	; 0x4e00000
    26f4:	204e032e 	subcs	r0, lr, lr, lsr #6
    26f8:	03663203 	cmneq	r6, #805306368	; 0x30000000
    26fc:	32034a4e 	andcc	r4, r3, #319488	; 0x4e000
    2700:	3d3b754a 	cfldr32cc	mvfx7, [fp, #-296]!	; 0xfffffed8
    2704:	032d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    2708:	3103204f 	tstcc	r3, pc, asr #32
    270c:	4e032f2e 	cdpmi	15, 0, cr2, cr3, cr14, {1}
    2710:	2e310374 	mrccs	3, 1, r0, cr1, cr4, {3}
    2714:	584e0321 	stmdapl	lr, {r0, r5, r8, r9}^
    2718:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    271c:	3203664e 	andcc	r6, r3, #81788928	; 0x4e00000
    2720:	204e032e 	subcs	r0, lr, lr, lsr #6
    2724:	03583203 	cmpeq	r8, #805306368	; 0x30000000
    2728:	3203664e 	andcc	r6, r3, #81788928	; 0x4e00000
    272c:	2e4e032e 	cdpcs	3, 4, cr0, cr14, cr14, {1}
    2730:	20083203 	andcs	r3, r8, r3, lsl #4
    2734:	1f213b67 	svcne	0x00213b67
    2738:	4f032d21 	svcmi	0x00032d21
    273c:	2e32033c 	mrccs	3, 1, r0, cr2, cr12, {1}
    2740:	03824e03 	orreq	r4, r2, #3, 28	; 0x30
    2744:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    2748:	3c320366 	ldccc	3, cr0, [r2], #-408	; 0xfffffe68
    274c:	03ba4e03 			; <UNDEFINED> instruction: 0x03ba4e03
    2750:	4e033c32 	mcrmi	12, 0, r3, cr3, cr2, {1}
    2754:	2e32034a 	cdpcs	3, 3, cr0, cr2, cr10, {2}
    2758:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    275c:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    2760:	2e32032e 	cdpcs	3, 3, cr0, cr2, cr14, {1}
    2764:	3c4e034b 	mcrrcc	3, 4, r0, lr, cr11
    2768:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    276c:	2d2f204d 	stccs	0, cr2, [pc, #-308]!	; 2640 <__Stack_Size+0x1e40>
    2770:	032e3303 	teqeq	lr, #201326592	; 0xc000000
    2774:	0320084e 	teqeq	r0, #5111808	; 0x4e0000
    2778:	4e033c32 	mcrmi	12, 0, r3, cr3, cr2, {1}
    277c:	3c320390 	ldccc	3, cr0, [r2], #-576	; 0xfffffdc0
    2780:	034a4e03 	movteq	r4, #44547	; 0xae03
    2784:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    2788:	2e32032e 	cdpcs	3, 3, cr0, cr2, cr14, {1}
    278c:	03204e03 	teqeq	r0, #3, 28	; 0x30
    2790:	1f212032 	svcne	0x00212032
    2794:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    2798:	1f3d2e32 	svcne	0x003d2e32
    279c:	3c4e0321 	mcrrcc	3, 2, r0, lr, cr1
    27a0:	2033032d 	eorscs	r0, r3, sp, lsr #6
    27a4:	03584e03 	cmpeq	r8, #3, 28	; 0x30
    27a8:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    27ac:	20320358 	eorscs	r0, r2, r8, asr r3
    27b0:	03824e03 	orreq	r4, r2, #3, 28	; 0x30
    27b4:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    27b8:	3c320374 	ldccc	3, cr0, [r2], #-464	; 0xfffffe30
    27bc:	03584e03 	cmpeq	r8, #3, 28	; 0x30
    27c0:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    27c4:	3c320320 	ldccc	3, cr0, [r2], #-128	; 0xffffff80
    27c8:	1f211f21 	svcne	0x00211f21
    27cc:	03204e03 	teqeq	r0, #3, 28	; 0x30
    27d0:	2f3b2e33 	svccs	0x003b2e33
    27d4:	4e03211f 	mcrmi	1, 0, r2, cr3, cr15, {0}
    27d8:	2e320358 	mrccs	3, 1, r0, cr2, cr8, {2}
    27dc:	03664e03 	cmneq	r6, #3, 28	; 0x30
    27e0:	4d034a32 	vstrmi	s8, [r3, #-200]	; 0xffffff38
    27e4:	2e33034a 	cdpcs	3, 3, cr0, cr3, cr10, {2}
    27e8:	03744e03 	cmneq	r4, #3, 28	; 0x30
    27ec:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    27f0:	3c32034a 	ldccc	3, cr0, [r2], #-296	; 0xfffffed8
    27f4:	034a4e03 	movteq	r4, #44547	; 0xae03
    27f8:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    27fc:	2e32032e 	cdpcs	3, 3, cr0, cr2, cr14, {1}
    2800:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    2804:	031f2033 	tsteq	pc, #51	; 0x33
    2808:	33033c4e 	movwcc	r3, #15438	; 0x3c4e
    280c:	584d032e 	stmdapl	sp, {r1, r2, r3, r5, r8, r9}^
    2810:	032e3303 	teqeq	lr, #201326592	; 0xc000000
    2814:	3203664e 	andcc	r6, r3, #81788928	; 0x4e00000
    2818:	584e032e 	stmdapl	lr, {r1, r2, r3, r5, r8, r9}^
    281c:	033c3203 	teqeq	ip, #805306368	; 0x30000000
    2820:	32039e4e 	andcc	r9, r3, #1248	; 0x4e0
    2824:	4a4e034a 	bmi	1383554 <__Stack_Size+0x1382d54>
    2828:	03203203 	teqeq	r0, #805306368	; 0x30000000
    282c:	32034a4e 	andcc	r4, r3, #319488	; 0x4e000
    2830:	204e034a 	subcs	r0, lr, sl, asr #6
    2834:	21203203 	teqcs	r0, r3, lsl #4
    2838:	204e031f 	subcs	r0, lr, pc, lsl r3
    283c:	2f2e3203 	svccs	0x002e3203
    2840:	4e03211f 	mcrmi	1, 0, r2, cr3, cr15, {0}
    2844:	2e320358 	mrccs	3, 1, r0, cr2, cr8, {2}
    2848:	033c4d03 	teqeq	ip, #3, 26	; 0xc0
    284c:	4e032e33 	mcrmi	14, 0, r2, cr3, cr3, {1}
    2850:	2e32034a 	cdpcs	3, 3, cr0, cr2, cr10, {2}
    2854:	034a4e03 	movteq	r4, #44547	; 0xae03
    2858:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    285c:	4a32032e 	bmi	c8351c <__Stack_Size+0xc82d1c>
    2860:	03584e03 	cmpeq	r8, #3, 28	; 0x30
    2864:	4e034a32 	mcrmi	10, 0, r4, cr3, cr2, {1}
    2868:	2e320374 	mrccs	3, 1, r0, cr2, cr4, {3}
    286c:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    2870:	033d2032 	teqeq	sp, #50	; 0x32
    2874:	3203744e 	andcc	r7, r3, #1308622848	; 0x4e000000
    2878:	584e032e 	stmdapl	lr, {r1, r2, r3, r5, r8, r9}^
    287c:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    2880:	32032e4e 	andcc	r2, r3, #1248	; 0x4e0
    2884:	2e4e0320 	cdpcs	3, 4, cr0, cr14, cr0, {1}
    2888:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    288c:	32033c4e 	andcc	r3, r3, #19968	; 0x4e00
    2890:	4a4e034a 	bmi	13835c0 <__Stack_Size+0x1382dc0>
    2894:	03203203 	teqeq	r0, #805306368	; 0x30000000
    2898:	3203744e 	andcc	r7, r3, #1308622848	; 0x4e000000
    289c:	2e4e032e 	cdpcs	3, 4, cr0, cr14, cr14, {1}
    28a0:	3d203203 	sfmcc	f3, 4, [r0, #-12]!
    28a4:	4e03211f 	mcrmi	1, 0, r2, cr3, cr15, {0}
    28a8:	2e3203e4 	cdpcs	3, 3, cr0, cr2, cr4, {7}
    28ac:	03584e03 	cmpeq	r8, #3, 28	; 0x30
    28b0:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    28b4:	2032032e 	eorscs	r0, r2, lr, lsr #6
    28b8:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    28bc:	4e034a32 	mcrmi	10, 0, r4, cr3, cr2, {1}
    28c0:	3c32033c 	ldccc	3, cr0, [r2], #-240	; 0xffffff10
    28c4:	204d032f 	subcs	r0, sp, pc, lsr #6
    28c8:	082e3203 	stmdaeq	lr!, {r0, r1, r9, ip, sp}
    28cc:	204d0367 	subcs	r0, sp, r7, ror #6
    28d0:	3d2e3203 	sfmcc	f3, 4, [lr, #-12]!
    28d4:	1f2f3b21 	svcne	0x002f3b21
    28d8:	2d751f2f 	ldclcs	15, cr1, [r5, #-188]!	; 0xffffff44
    28dc:	1f592d4b 	svcne	0x00592d4b
    28e0:	65672d2f 	strbvs	r2, [r7, #-3375]!	; 0xd2f
    28e4:	1f212d21 	svcne	0x00212d21
    28e8:	592d5921 	pushpl	{r0, r5, r8, fp, ip, lr}
    28ec:	2f1f4b2d 	svccs	0x001f4b2d
    28f0:	2f2d9f2d 	svccs	0x002d9f2d
    28f4:	2f1f2f2d 	svccs	0x001f2f2d
    28f8:	219d2149 	orrscs	r2, sp, r9, asr #2
    28fc:	2d91213b 	ldfcss	f2, [r1, #236]	; 0xec
    2900:	1f831f3d 	svcne	0x00831f3d
    2904:	2d831f2f 	stccs	15, cr1, [r3, #188]	; 0xbc
    2908:	1f21ff21 	svcne	0x0021ff21
    290c:	4b2d5921 	blmi	b58d98 <__Stack_Size+0xb58598>
    2910:	2f1f2f2d 	svccs	0x001f2f2d
    2914:	2f2d912d 	svccs	0x002d912d
    2918:	2f1f212d 	svccs	0x001f212d
    291c:	219d2149 	orrscs	r2, sp, r9, asr #2
    2920:	1f212181 	svcne	0x00212181
    2924:	1fad1f2f 	svcne	0x00ad1f2f
    2928:	1f831f2f 	svcne	0x00831f2f
    292c:	22490821 	subcs	r0, r9, #2162688	; 0x210000
    2930:	3b1f3d2d 	blcc	7d1dec <__Stack_Size+0x7d15ec>
    2934:	2f1f2121 	svccs	0x001f2121
    2938:	bb1f2f1f 	bllt	7ce5bc <__Stack_Size+0x7cddbc>
    293c:	2f2d2f2d 	svccs	0x002d2f2d
    2940:	218f2149 	orrcs	r2, pc, r9, asr #2
    2944:	2d75211f 	ldfcse	f2, [r5, #-124]!	; 0xffffff84
    2948:	1f4b2d59 	svcne	0x004b2d59
    294c:	2d752d2f 	ldclcs	13, cr2, [r5, #-188]!	; 0xffffff44
    2950:	1f212d2f 	svcne	0x00212d2f
    2954:	e321492f 	teq	r1, #770048	; 0xbc000
    2958:	591f2f2f 	ldmdbpl	pc, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
    295c:	3d2d3d2d 	stccc	13, cr3, [sp, #-180]!	; 0xffffff4c
    2960:	4b2d4b2d 	blmi	b5561c <__Stack_Size+0xb54e1c>
    2964:	2f8f913b 	svccs	0x008f913b
    2968:	49831f21 	stmibmi	r3, {r0, r5, r8, r9, sl, fp, ip}
    296c:	3b212d2f 	blcc	84de30 <__Stack_Size+0x84d630>
    2970:	1f831f83 	svcne	0x00831f83
    2974:	2fe30867 	svccs	0x00e30867
    2978:	2d4b2d2f 	stclcs	13, cr2, [fp, #-188]	; 0xffffff44
    297c:	1f3d2d21 	svcne	0x003d2d21
    2980:	1f4b2d2f 	svcne	0x004b2d2f
    2984:	d7832d59 			; <UNDEFINED> instruction: 0xd7832d59
    2988:	213b212c 	teqcs	fp, ip, lsr #2
    298c:	49213b21 	stmdbmi	r1!, {r0, r5, r8, r9, fp, ip, sp}
    2990:	1f912d21 	svcne	0x00912d21
    2994:	b9671f83 	stmdblt	r7!, {r0, r1, r7, r8, r9, sl, fp, ip}^
    2998:	3d1f212f 	ldfccs	f2, [pc, #-188]	; 28e4 <__Stack_Size+0x20e4>
    299c:	2f3b3d2d 	svccs	0x003b3d2d
    29a0:	911f752d 	tstls	pc, sp, lsr #10
    29a4:	2f57671f 	svccs	0x0057671f
    29a8:	2d832d21 	stccs	13, cr2, [r3, #132]	; 0x84
    29ac:	2d212d21 	stccs	13, cr2, [r1, #-132]!	; 0xffffff7c
    29b0:	2d211f21 	stccs	15, cr1, [r1, #-132]!	; 0xffffff7c
    29b4:	1f9f1f75 	svcne	0x009f1f75
    29b8:	3b2fab67 	blcc	bed75c <__Stack_Size+0xbecf5c>
    29bc:	591f2f21 	ldmdbpl	pc, {r0, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
    29c0:	213b212d 	teqcs	fp, sp, lsr #2
    29c4:	672d2f2d 	strvs	r2, [sp, -sp, lsr #30]!
    29c8:	671f831f 			; <UNDEFINED> instruction: 0x671f831f
    29cc:	1f213d9d 	svcne	0x00213d9d
    29d0:	2d212d67 	stccs	13, cr2, [r1, #-412]!	; 0xfffffe64
    29d4:	1f913b21 	svcne	0x00913b21
    29d8:	8f672d83 	svchi	0x00672d83
    29dc:	49911f30 	ldmibmi	r1, {r4, r5, r8, r9, sl, fp, ip}
    29e0:	3b212d21 	blcc	84de6c <__Stack_Size+0x84d66c>
    29e4:	2d831f83 	stccs	15, cr1, [r3, #524]	; 0x20c
    29e8:	212f8f67 	teqcs	pc, r7, ror #30
    29ec:	2f2d3d1f 	svccs	0x002d3d1f
    29f0:	4b3b3d1f 	blmi	ed1e74 <__Stack_Size+0xed1674>
    29f4:	751f752d 	ldrvc	r7, [pc, #-1325]	; 24cf <__Stack_Size+0x1ccf>
    29f8:	30b94b1f 	adcscc	r4, r9, pc, lsl fp
    29fc:	3b08591f 	blcc	218e80 <__Stack_Size+0x218680>
    2a00:	2d212d2f 	stccs	13, cr2, [r1, #-188]!	; 0xffffff44
    2a04:	1f833b21 	svcne	0x00833b21
    2a08:	bb672d83 	bllt	19ce01c <__Stack_Size+0x19cd81c>
    2a0c:	2d211f1f 	stccs	15, cr1, [r1, #-124]!	; 0xffffff84
    2a10:	4b2d2121 	blmi	b4ae9c <__Stack_Size+0xb4a69c>
    2a14:	9149212d 	cmpls	r9, sp, lsr #2
    2a18:	672d831f 			; <UNDEFINED> instruction: 0x672d831f
    2a1c:	2d2f2fab 	stccs	15, cr2, [pc, #-684]!	; 2778 <__Stack_Size+0x1f78>
    2a20:	2d3d2d3d 	ldccs	13, cr2, [sp, #-244]!	; 0xffffff0c
    2a24:	1f91492f 	svcne	0x0091492f
    2a28:	57672d83 	strbpl	r2, [r7, -r3, lsl #27]!
    2a2c:	751f212f 	ldrvc	r2, [pc, #-303]	; 2905 <__Stack_Size+0x2105>
    2a30:	212d4b2d 	teqcs	sp, sp, lsr #22
    2a34:	9f1f913b 	svcls	0x001f913b
    2a38:	2fd5672d 	svccs	0x00d5672d
    2a3c:	2d592d2f 	ldclcs	13, cr2, [r9, #-188]	; 0xffffff44
    2a40:	2d213b21 	fstmdbxcs	r1!, {d3-d18}	;@ Deprecated
    2a44:	1f672d2f 	svcne	0x00672d2f
    2a48:	bb672d83 	bllt	19ce05c <__Stack_Size+0x19cd85c>
    2a4c:	212d212c 	teqcs	sp, ip, lsr #2
    2a50:	2d752d2f 	ldclcs	13, cr2, [r5, #-188]!	; 0xffffff44
    2a54:	2d2f1f3d 	stccs	15, cr1, [pc, #-244]!	; 2968 <__Stack_Size+0x2168>
    2a58:	f1913b83 			; <UNDEFINED> instruction: 0xf1913b83
    2a5c:	2d752d30 	ldclcs	13, cr2, [r5, #-192]!	; 0xffffff40
    2a60:	49211f21 	stmdbmi	r1!, {r0, r5, r8, r9, sl, fp, ip}
    2a64:	1f672d2f 	svcne	0x00672d2f
    2a68:	bb672d83 	bllt	19ce07c <__Stack_Size+0x19cd87c>
    2a6c:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    2a70:	4b2d2121 	blmi	b4aefc <__Stack_Size+0xb4a6fc>
    2a74:	212d212d 	teqcs	sp, sp, lsr #2
    2a78:	9f1f672d 	svcls	0x001f672d
    2a7c:	2f9d672d 	svccs	0x009d672d
    2a80:	2d592d2f 	ldclcs	13, cr2, [r9, #-188]	; 0xffffff44
    2a84:	49592d21 	ldmdbmi	r9, {r0, r5, r8, sl, fp, sp}^
    2a88:	2d671f75 	stclcs	15, cr1, [r7, #-468]!	; 0xfffffe2c
    2a8c:	2d2f2d59 	stccs	13, cr2, [pc, #-356]!	; 2930 <__Stack_Size+0x2130>
    2a90:	213d3b2f 	teqcs	sp, pc, lsr #22
    2a94:	4991082d 	ldmibmi	r1, {r0, r2, r3, r5, fp}
    2a98:	1f212d21 	svcne	0x00212d21
    2a9c:	1f752d21 	svcne	0x00752d21
    2aa0:	ab672d9f 	blge	19ce124 <__Stack_Size+0x19cd924>
    2aa4:	2d2f2d30 	stccs	13, cr2, [pc, #-192]!	; 29ec <__Stack_Size+0x21ec>
    2aa8:	1f3d2d3d 	svcne	0x003d2d3d
    2aac:	2d2f2d67 	stccs	13, cr2, [pc, #-412]!	; 2918 <__Stack_Size+0x2118>
    2ab0:	2d671f75 	stclcs	15, cr1, [r7, #-468]!	; 0xfffffe2c
    2ab4:	3d2f9d4b 	stccc	13, cr9, [pc, #-300]!	; 2990 <__Stack_Size+0x2190>
    2ab8:	2149592d 	cmpcs	r9, sp, lsr #18
    2abc:	833b212d 	teqhi	fp, #1073741835	; 0x4000000b
    2ac0:	672d831f 			; <UNDEFINED> instruction: 0x672d831f
    2ac4:	1f212fab 	svcne	0x00212fab
    2ac8:	2d4b2d3d 	stclcs	13, cr2, [fp, #-244]	; 0xffffff0c
    2acc:	1f753b21 	svcne	0x00753b21
    2ad0:	ab672d9f 	blge	19ce154 <__Stack_Size+0x19cd954>
    2ad4:	3d2d2f2f 	stccc	15, cr2, [sp, #-188]!	; 0xffffff44
    2ad8:	2f2d3d2d 	svccs	0x002d3d2d
    2adc:	752d4b2d 	strvc	r4, [sp, #-2861]!	; 0xb2d
    2ae0:	4b2d831f 	blmi	b63764 <__Stack_Size+0xb62f64>
    2ae4:	1f212f65 	svcne	0x00212f65
    2ae8:	2d4b2d75 	stclcs	13, cr2, [fp, #-468]	; 0xfffffe2c
    2aec:	1f913b21 	svcne	0x00913b21
    2af0:	ab672d9f 	blge	19ce174 <__Stack_Size+0x19cd974>
    2af4:	3d2d2f2f 	stccc	15, cr2, [sp, #-188]!	; 0xffffff44
    2af8:	2f2d212d 	svccs	0x002d212d
    2afc:	91492f2d 	cmpls	r9, sp, lsr #30
    2b00:	672d831f 			; <UNDEFINED> instruction: 0x672d831f
    2b04:	4b2f2cad 	blmi	bcddc0 <__Stack_Size+0xbcd5c0>
    2b08:	2f2d3d2d 	svccs	0x002d3d2d
    2b0c:	212d212d 	teqcs	sp, sp, lsr #2
    2b10:	9f1f672d 	svcls	0x001f672d
    2b14:	2f9d672d 	svccs	0x009d672d
    2b18:	2d212d21 	stccs	13, cr2, [r1, #-132]!	; 0xffffff7c
    2b1c:	492f1f21 	stmdbmi	pc!, {r0, r5, r8, r9, sl, fp, ip}	; <UNPREDICTABLE>
    2b20:	1f751f2f 	svcne	0x00751f2f
    2b24:	1f2f2d2f 	svcne	0x002f2d2f
    2b28:	2d2f2dad 	stccs	13, cr2, [pc, #-692]!	; 287c <__Stack_Size+0x207c>
    2b2c:	4b215721 	blmi	8587b8 <__Stack_Size+0x857fb8>
    2b30:	082d212d 	stmdaeq	sp!, {r0, r2, r3, r5, r8, sp}
    2b34:	2d212157 	stfcss	f2, [r1, #-348]!	; 0xfffffea4
    2b38:	2d2f1f21 	stccs	15, cr1, [pc, #-132]!	; 2abc <__Stack_Size+0x22bc>
    2b3c:	1f753b4b 	svcne	0x00753b4b
    2b40:	212dadf3 	strdcs	sl, [sp, -r3]!
    2b44:	4b2f2d2d 	blmi	bce000 <__Stack_Size+0xbcd800>
    2b48:	3d3b2f2d 	ldccc	15, cr2, [fp, #-180]!	; 0xffffff4c
    2b4c:	ad49673b 	stclge	7, cr6, [r9, #-236]	; 0xffffff14
    2b50:	212d2f2d 	teqcs	sp, sp, lsr #30
    2b54:	2d4b2157 	stfcse	f2, [fp, #-348]	; 0xfffffea4
    2b58:	212d2d21 	teqcs	sp, r1, lsr #26
    2b5c:	1f212d21 	svcne	0x00212d21
    2b60:	1f21492f 	svcne	0x0021492f
    2b64:	2d211f75 	stccs	15, cr1, [r1, #-468]!	; 0xfffffe2c
    2b68:	2d9f1f2f 	ldccs	15, cr1, [pc, #188]	; 2c2c <__Stack_Size+0x242c>
    2b6c:	57212d2f 	strpl	r2, [r1, -pc, lsr #26]!
    2b70:	212d4b21 	teqcs	sp, r1, lsr #22
    2b74:	59212d2d 	stmdbpl	r1!, {r0, r2, r3, r5, r8, sl, fp, sp}
    2b78:	3d3b2f2d 	ldccc	15, cr2, [fp, #-180]!	; 0xffffff4c
    2b7c:	ad49673b 	stclge	7, cr6, [r9, #-236]	; 0xffffff14
    2b80:	212d2f2d 	teqcs	sp, sp, lsr #30
    2b84:	22492157 	subcs	r2, r9, #-1073741803	; 0xc0000015
    2b88:	4b2d211f 	blmi	b4b00c <__Stack_Size+0xb4a80c>
    2b8c:	4b3b211f 	blmi	ecb010 <__Stack_Size+0xeca810>
    2b90:	2f1f4b2d 	svccs	0x001f4b2d
    2b94:	2f2d211f 	svccs	0x002d211f
    2b98:	2f2dad1f 	svccs	0x002dad1f
    2b9c:	2157212d 	cmpcs	r7, sp, lsr #2
    2ba0:	2c212f2d 	stccs	15, cr2, [r1], #-180	; 0xffffff4c
    2ba4:	212d2f21 	teqcs	sp, r1, lsr #30
    2ba8:	212d3d2d 	teqcs	sp, sp, lsr #26
    2bac:	081f4b2d 	ldmdaeq	pc, {r0, r2, r3, r5, r8, r9, fp, lr}	; <UNPREDICTABLE>
    2bb0:	493d1f21 	ldmdbmi	sp!, {r0, r5, r8, r9, sl, fp, ip}
    2bb4:	3b211f21 	blcc	84a840 <__Stack_Size+0x84a040>
    2bb8:	832d753d 	teqhi	sp, #255852544	; 0xf400000
    2bbc:	9173673b 	cmnls	r3, fp, lsr r7
    2bc0:	223b672d 	eorscs	r6, fp, #11796480	; 0xb40000
    2bc4:	91212d2d 	teqls	r1, sp, lsr #26
    2bc8:	912d2f2d 	teqls	sp, sp, lsr #30
    2bcc:	672d752d 	strvs	r7, [sp, -sp, lsr #10]!
    2bd0:	2f2d832d 	svccs	0x002d832d
    2bd4:	212d3d49 	teqcs	sp, r9, asr #26
    2bd8:	2f1f2157 	svccs	0x001f2157
    2bdc:	2f211e21 	svccs	0x00211e21
    2be0:	212d4b2d 	teqcs	sp, sp, lsr #22
    2be4:	2d75082d 	ldclcs	8, cr0, [r5, #-180]!	; 0xffffff4c
    2be8:	3bc93b2f 	blcc	ff2518ac <BootRAM+0xe1c204d>
    2bec:	2d2f3bad 	fstmdbxcs	pc!, {d3-d88}	;@ Deprecated
    2bf0:	1f22492f 	svcne	0x0022492f
    2bf4:	3e1f2f2d 	cdpcc	15, 1, cr2, cr15, cr13, {1}
    2bf8:	2f2dbb2d 	svccs	0x002dbb2d
    2bfc:	2f1f672d 	svccs	0x001f672d
    2c00:	2f1fd72d 	svccs	0x001fd72d
    2c04:	211f3d2d 	tstcs	pc, sp, lsr #26
    2c08:	2f3b2149 	svccs	0x003b2149
    2c0c:	2d3d2d2f 	ldccs	13, cr2, [sp, #-188]!	; 0xffffff44
    2c10:	2d221e4b 	stccs	14, cr1, [r2, #-300]!	; 0xfffffed4
    2c14:	1fbb211f 	svcne	0x00bb211f
    2c18:	572f2d3d 			; <UNDEFINED> instruction: 0x572f2d3d
    2c1c:	3b4b3b67 	blcc	12d19c0 <__Stack_Size+0x12d11c0>
    2c20:	1f211f2f 	svcne	0x00211f2f
    2c24:	2d211f30 	stccs	15, cr1, [r1, #-192]!	; 0xffffff40
    2c28:	2d4b1fd7 	stclcs	15, cr1, [fp, #-860]	; 0xfffffca4
    2c2c:	1f2f2d4b 	svcne	0x002f2d4b
    2c30:	1f593b2f 	svcne	0x00593b2f
    2c34:	2d211f2f 	stccs	15, cr1, [r1, #-188]!	; 0xffffff44
    2c38:	c92f2d21 	stmdbgt	pc!, {r0, r5, r8, sl, fp, sp}	; <UNPREDICTABLE>
    2c3c:	672d9f1f 			; <UNDEFINED> instruction: 0x672d9f1f
    2c40:	2f499f1f 	svccs	0x00499f1f
    2c44:	213b2fe3 	teqcs	fp, r3, ror #31
    2c48:	0903212d 	stmdbeq	r3, {r0, r2, r3, r5, r8, sp}
    2c4c:	7703c808 	strvc	ip, [r3, -r8, lsl #16]
    2c50:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    2c54:	23331b1c 	teqcs	r3, #28, 22	; 0x7000
    2c58:	36207803 	strtcc	r7, [r0], -r3, lsl #16
    2c5c:	1f241c1c 	svcne	0x00241c1c
    2c60:	1b242f1f 	blne	90e8e4 <__Stack_Size+0x90e0e4>
    2c64:	311c1f25 	tstcc	ip, r5, lsr #30
    2c68:	2b322b2f 	blcs	c8d92c <__Stack_Size+0xc8d12c>
    2c6c:	022f2f32 	eoreq	r2, pc, #50, 30	; 0xc8
    2c70:	0101000f 	tsteq	r1, pc
    2c74:	84020500 	strhi	r0, [r2], #-1280	; 0x500
    2c78:	03080053 	movweq	r0, #32851	; 0x8053
    2c7c:	310101c1 	smlabtcc	r1, r1, r1, r0
    2c80:	2322311d 	teqcs	r2, #1073741831	; 0x40000007
    2c84:	341d1d23 	ldrcc	r1, [sp], #-3363	; 0xd23
    2c88:	0a033e21 	beq	d2514 <__Stack_Size+0xd1d14>
    2c8c:	1f214c20 	svcne	0x00214c20
    2c90:	972a243a 			; <UNDEFINED> instruction: 0x972a243a
    2c94:	363c6703 	ldrtcc	r6, [ip], -r3, lsl #14
    2c98:	5b2e1303 	blpl	b878ac <__Stack_Size+0xb870ac>
    2c9c:	2e6f032b 	cdpcs	3, 6, cr0, cr15, cr11, {1}
    2ca0:	03215976 	teqeq	r1, #1933312	; 0x1d8000
    2ca4:	02022e0b 	andeq	r2, r2, #11, 28	; 0xb0
    2ca8:	00010100 	andeq	r0, r1, r0, lsl #2
    2cac:	54140205 	ldrpl	r0, [r4], #-517	; 0x205
    2cb0:	f0030800 			; <UNDEFINED> instruction: 0xf0030800
    2cb4:	2f340101 	svccs	0x00340101
    2cb8:	2e740325 	cdpcs	3, 7, cr0, cr4, cr5, {1}
    2cbc:	31200a03 	teqcc	r0, r3, lsl #20
    2cc0:	7303311d 	movwvc	r3, #12573	; 0x311d
    2cc4:	54032558 	strpl	r2, [r3], #-1368	; 0x558
    2cc8:	202c0320 	eorcs	r0, ip, r0, lsr #6
    2ccc:	032e5703 	teqeq	lr, #786432	; 0xc0000
    2cd0:	0367202d 	cmneq	r7, #45	; 0x2d
    2cd4:	23034a53 	movwcs	r4, #14931	; 0x3a53
    2cd8:	2009032e 	andcs	r0, r9, lr, lsr #6
    2cdc:	664f0383 	strbvs	r0, [pc], -r3, lsl #7
    2ce0:	78033024 	stmdavc	r3, {r2, r5, ip, sp}
    2ce4:	1103363c 	tstne	r3, ip, lsr r6
    2ce8:	64032258 	strvs	r2, [r3], #-600	; 0x258
    2cec:	1d312366 	ldcne	3, cr2, [r1, #-408]!	; 0xfffffe68
    2cf0:	3e21341d 	mcrcc	4, 1, r3, cr1, cr13, {0}
    2cf4:	363c7803 	ldrtcc	r7, [ip], -r3, lsl #16
    2cf8:	2e0c0351 	mcrcs	3, 0, r0, cr12, cr1, {2}
    2cfc:	91742003 	cmnls	r4, r3
    2d00:	91919191 			; <UNDEFINED> instruction: 0x91919191
    2d04:	039f9f91 	orrseq	r9, pc, #580	; 0x244
    2d08:	3d923c47 	ldccc	12, cr3, [r2, #284]	; 0x11c
    2d0c:	5a341e2f 	bpl	d0a5d0 <__Stack_Size+0xd09dd0>
    2d10:	243a1f21 	ldrtcs	r1, [sl], #-3873	; 0xf21
    2d14:	ac76032a 	ldclge	3, cr0, [r6], #-168	; 0xffffff58
    2d18:	1e2f773e 	mcrne	7, 1, r7, cr15, cr14, {1}
    2d1c:	2a341e3e 	bcs	d0a61c <__Stack_Size+0xd09e1c>
    2d20:	3a1f2126 	bcc	7cb1c0 <__Stack_Size+0x7ca9c0>
    2d24:	3f552a24 	svccc	0x00552a24
    2d28:	3c760343 	ldclcc	3, cr0, [r6], #-268	; 0xfffffef4
    2d2c:	01000602 	tsteq	r0, r2, lsl #12
    2d30:	00053001 	andeq	r3, r5, r1
    2d34:	60000200 	andvs	r0, r0, r0, lsl #4
    2d38:	02000001 	andeq	r0, r0, #1
    2d3c:	0d0efb01 	vstreq	d15, [lr, #-4]
    2d40:	01010100 	mrseq	r0, (UNDEF: 17)
    2d44:	00000001 	andeq	r0, r0, r1
    2d48:	01000001 	tsteq	r0, r1
    2d4c:	31353532 	teqcc	r5, r2, lsr r5
    2d50:	3a630039 	bcc	18c2e3c <__Stack_Size+0x18c263c>
    2d54:	6f72705c 	svcvs	0x0072705c
    2d58:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    2d5c:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    2d60:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    2d64:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    2d68:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    2d6c:	6f6f7420 	svcvs	0x006f7420
    2d70:	6120736c 	teqvs	r0, ip, ror #6
    2d74:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    2d78:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    2d7c:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    2d80:	20382e34 	eorscs	r2, r8, r4, lsr lr
    2d84:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    2d88:	615c3371 	cmpvs	ip, r1, ror r3
    2d8c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    2d90:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    2d94:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    2d98:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    2d9c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2da0:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    2da4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    2da8:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    2dac:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
    2db0:	206d6172 	rsbcs	r6, sp, r2, ror r1
    2db4:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
    2db8:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
    2dbc:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
    2dc0:	20756e67 	rsbscs	r6, r5, r7, ror #28
    2dc4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 2bfc <__Stack_Size+0x23fc>
    2dc8:	72612073 	rsbvc	r2, r1, #115	; 0x73
    2dcc:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
    2dd0:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    2dd4:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
    2dd8:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
    2ddc:	71343130 	teqvc	r4, r0, lsr r1
    2de0:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    2de4:	6f6e2d6d 	svcvs	0x006e2d6d
    2de8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    2dec:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    2df0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2df4:	00656475 	rsbeq	r6, r5, r5, ror r4
    2df8:	705c3a63 	subsvc	r3, ip, r3, ror #20
    2dfc:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    2e00:	66206d61 	strtvs	r6, [r0], -r1, ror #26
    2e04:	73656c69 	cmnvc	r5, #26880	; 0x6900
    2e08:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
    2e0c:	675c2936 	smmlarvs	ip, r6, r9, r2
    2e10:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
    2e14:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    2e18:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
    2e1c:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
    2e20:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    2e24:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
    2e28:	30322038 	eorscc	r2, r2, r8, lsr r0
    2e2c:	33713431 	cmncc	r1, #822083584	; 0x31000000
    2e30:	62696c5c 	rsbvs	r6, r9, #92, 24	; 0x5c00
    2e34:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    2e38:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    2e3c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    2e40:	61652d65 	cmnvs	r5, r5, ror #26
    2e44:	345c6962 	ldrbcc	r6, [ip], #-2402	; 0x962
    2e48:	342e382e 	strtcc	r3, [lr], #-2094	; 0x82e
    2e4c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    2e50:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2e54:	68730000 	ldmdavs	r3!, {}^	; <UNPREDICTABLE>
    2e58:	32313561 	eorscc	r3, r1, #406847488	; 0x18400000
    2e5c:	0100632e 	tsteq	r0, lr, lsr #6
    2e60:	645f0000 	ldrbvs	r0, [pc], #-0	; 2e68 <__Stack_Size+0x2668>
    2e64:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    2e68:	745f746c 	ldrbvc	r7, [pc], #-1132	; 2e70 <__Stack_Size+0x2670>
    2e6c:	73657079 	cmnvc	r5, #121	; 0x79
    2e70:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2e74:	74730000 	ldrbtvc	r0, [r3], #-0
    2e78:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    2e7c:	0300682e 	movweq	r6, #2094	; 0x82e
    2e80:	74730000 	ldrbtvc	r0, [r3], #-0
    2e84:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    2e88:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    2e8c:	68730000 	ldmdavs	r3!, {}^	; <UNPREDICTABLE>
    2e90:	32313561 	eorscc	r3, r1, #406847488	; 0x18400000
    2e94:	0100682e 	tsteq	r0, lr, lsr #16
    2e98:	00000000 	andeq	r0, r0, r0
    2e9c:	562c0205 	strtpl	r0, [ip], -r5, lsl #4
    2ea0:	e4030800 	str	r0, [r3], #-2048	; 0x800
    2ea4:	033c0100 	teqeq	ip, #0, 2
    2ea8:	9f21585a 	svcls	0x0021585a
    2eac:	1308f383 	movwne	pc, #33667	; 0x8383	; <UNPREDICTABLE>
    2eb0:	2603bbbb 			; <UNDEFINED> instruction: 0x2603bbbb
    2eb4:	205a0366 	subscs	r0, sl, r6, ror #6
    2eb8:	212e2403 	teqcs	lr, r3, lsl #8
    2ebc:	1f21272d 	svcne	0x0021272d
    2ec0:	2c2f212d 	stfcss	f2, [pc], #-180	; 2e14 <__Stack_Size+0x2614>
    2ec4:	321c332f 	andscc	r3, ip, #-1140850688	; 0xbc000000
    2ec8:	03232f46 	teqeq	r3, #280	; 0x118
    2ecc:	2b26207a 	blcs	98b0bc <__Stack_Size+0x98a8bc>
    2ed0:	222f322b 	eorcs	r3, pc, #-1342177278	; 0xb0000002
    2ed4:	46312f1c 	shadd16mi	r2, r1, ip
    2ed8:	20790332 	rsbscs	r0, r9, r2, lsr r3
    2edc:	2a200903 	bcs	8052f0 <__Stack_Size+0x804af0>
    2ee0:	494c1f2f 	stmdbmi	ip, {r0, r1, r2, r3, r5, r8, r9, sl, fp, ip}^
    2ee4:	3b4d2b21 	blcc	134db70 <__Stack_Size+0x134d370>
    2ee8:	5819032f 	ldmdapl	r9, {r0, r1, r2, r3, r5, r8, r9}
    2eec:	02006a08 	andeq	r6, r0, #8, 20	; 0x8000
    2ef0:	67030204 	strvs	r0, [r3, -r4, lsl #4]
    2ef4:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    2ef8:	3c660302 	stclcc	3, cr0, [r6], #-8
    2efc:	02040200 	andeq	r0, r4, #0, 4
    2f00:	00ba1b03 	adcseq	r1, sl, r3, lsl #22
    2f04:	03020402 	movweq	r0, #9218	; 0x2402
    2f08:	02002e65 	andeq	r2, r0, #1616	; 0x650
    2f0c:	1b030204 	blne	c3724 <__Stack_Size+0xc2f24>
    2f10:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    2f14:	2e650302 	cdpcs	3, 6, cr0, cr5, cr2, {0}
    2f18:	02040200 	andeq	r0, r4, #0, 4
    2f1c:	003c1b03 	eorseq	r1, ip, r3, lsl #22
    2f20:	03020402 	movweq	r0, #9218	; 0x2402
    2f24:	02002e65 	andeq	r2, r0, #1616	; 0x650
    2f28:	1b030204 	blne	c3740 <__Stack_Size+0xc2f40>
    2f2c:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    2f30:	2e650302 	cdpcs	3, 6, cr0, cr5, cr2, {0}
    2f34:	02040200 	andeq	r0, r4, #0, 4
    2f38:	00201f03 	eoreq	r1, r0, r3, lsl #30
    2f3c:	1c020402 	cfstrsne	mvf0, [r2], {2}
    2f40:	02040200 	andeq	r0, r4, #0, 4
    2f44:	00206503 	eoreq	r6, r0, r3, lsl #10
    2f48:	03020402 	movweq	r0, #9218	; 0x2402
    2f4c:	02003c1f 	andeq	r3, r0, #7936	; 0x1f00
    2f50:	61030204 	tstvs	r3, r4, lsl #4
    2f54:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    2f58:	661f0302 	ldrvs	r0, [pc], -r2, lsl #6
    2f5c:	02040200 	andeq	r0, r4, #0, 4
    2f60:	00206103 	eoreq	r6, r0, r3, lsl #2
    2f64:	03020402 	movweq	r0, #9218	; 0x2402
    2f68:	02003c1c 	andeq	r3, r0, #28, 24	; 0x1c00
    2f6c:	64030204 	strvs	r0, [r3], #-516	; 0x204
    2f70:	0402003c 	streq	r0, [r2], #-60	; 0x3c
    2f74:	581c0302 	ldmdapl	ip, {r1, r8, r9}
    2f78:	02040200 	andeq	r0, r4, #0, 4
    2f7c:	002e6403 	eoreq	r6, lr, r3, lsl #8
    2f80:	03020402 	movweq	r0, #9218	; 0x2402
    2f84:	02002e1f 	andeq	r2, r0, #496	; 0x1f0
    2f88:	61030204 	tstvs	r3, r4, lsl #4
    2f8c:	04020020 	streq	r0, [r2], #-32
    2f90:	581c0302 	ldmdapl	ip, {r1, r8, r9}
    2f94:	02040200 	andeq	r0, r4, #0, 4
    2f98:	04020033 	streq	r0, [r2], #-51	; 0x33
    2f9c:	02002c02 	andeq	r2, r0, #512	; 0x200
    2fa0:	61030204 	tstvs	r3, r4, lsl #4
    2fa4:	04020020 	streq	r0, [r2], #-32
    2fa8:	4a1f0302 	bmi	7c3bb8 <__Stack_Size+0x7c33b8>
    2fac:	02040200 	andeq	r0, r4, #0, 4
    2fb0:	0402005a 	streq	r0, [r2], #-90	; 0x5a
    2fb4:	02001e02 	andeq	r1, r0, #2, 28
    2fb8:	00220204 	eoreq	r0, r2, r4, lsl #4
    2fbc:	03020402 	movweq	r0, #9218	; 0x2402
    2fc0:	02003c5f 	andeq	r3, r0, #24320	; 0x5f00
    2fc4:	1e030204 	cdpne	2, 0, cr0, cr3, cr4, {0}
    2fc8:	040200d6 	streq	r0, [r2], #-214	; 0xd6
    2fcc:	02006d02 	andeq	r6, r0, #2, 26	; 0x80
    2fd0:	002a0204 	eoreq	r0, sl, r4, lsl #4
    2fd4:	32020402 	andcc	r0, r2, #33554432	; 0x2000000
    2fd8:	02040200 	andeq	r0, r4, #0, 4
    2fdc:	00ba1103 	adcseq	r1, sl, r3, lsl #2
    2fe0:	03020402 	movweq	r0, #9218	; 0x2402
    2fe4:	02002e67 	andeq	r2, r0, #1648	; 0x670
    2fe8:	19030204 	stmdbne	r3, {r2, r9}
    2fec:	04020058 	streq	r0, [r2], #-88	; 0x58
    2ff0:	ac4a0302 	mcrrge	3, 0, r0, sl, cr2
    2ff4:	02040200 	andeq	r0, r4, #0, 4
    2ff8:	00823603 	addeq	r3, r2, r3, lsl #12
    2ffc:	03020402 	movweq	r0, #9218	; 0x2402
    3000:	0200204a 	andeq	r2, r0, #74	; 0x4a
    3004:	36030204 	strcc	r0, [r3], -r4, lsl #4
    3008:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    300c:	2e4a0302 	cdpcs	3, 4, cr0, cr10, cr2, {0}
    3010:	02040200 	andeq	r0, r4, #0, 4
    3014:	002e2103 	eoreq	r2, lr, r3, lsl #2
    3018:	65020402 	strvs	r0, [r2, #-1026]	; 0x402
    301c:	02040200 	andeq	r0, r4, #0, 4
    3020:	003c1603 	eorseq	r1, ip, r3, lsl #12
    3024:	03020402 	movweq	r0, #9218	; 0x2402
    3028:	0200206a 	andeq	r2, r0, #106	; 0x6a
    302c:	16030204 	strne	r0, [r3], -r4, lsl #4
    3030:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    3034:	4a700302 	bmi	1c03c44 <__Stack_Size+0x1c03444>
    3038:	02040200 	andeq	r0, r4, #0, 4
    303c:	00d65a03 	sbcseq	r5, r6, r3, lsl #20
    3040:	03020402 	movweq	r0, #9218	; 0x2402
    3044:	02002e27 	andeq	r2, r0, #624	; 0x270
    3048:	59030204 	stmdbpl	r3, {r2, r9}
    304c:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    3050:	2e270302 	cdpcs	3, 2, cr0, cr7, cr2, {0}
    3054:	02040200 	andeq	r0, r4, #0, 4
    3058:	003c5903 	eorseq	r5, ip, r3, lsl #18
    305c:	03020402 	movweq	r0, #9218	; 0x2402
    3060:	02002027 	andeq	r2, r0, #39	; 0x27
    3064:	59030204 	stmdbpl	r3, {r2, r9}
    3068:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    306c:	2e270302 	cdpcs	3, 2, cr0, cr7, cr2, {0}
    3070:	02040200 	andeq	r0, r4, #0, 4
    3074:	003c5903 	eorseq	r5, ip, r3, lsl #18
    3078:	03020402 	movweq	r0, #9218	; 0x2402
    307c:	02004a28 	andeq	r4, r0, #40, 20	; 0x28000
    3080:	58030204 	stmdapl	r3, {r2, r9}
    3084:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    3088:	3c270302 	stccc	3, cr0, [r7], #-8
    308c:	02040200 	andeq	r0, r4, #0, 4
    3090:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    3094:	2e580302 	cdpcs	3, 5, cr0, cr8, cr2, {0}
    3098:	02040200 	andeq	r0, r4, #0, 4
    309c:	002e2803 	eoreq	r2, lr, r3, lsl #16
    30a0:	03020402 	movweq	r0, #9218	; 0x2402
    30a4:	02002e58 	andeq	r2, r0, #88, 28	; 0x580
    30a8:	28030204 	stmdacs	r3, {r2, r9}
    30ac:	0402003c 	streq	r0, [r2], #-60	; 0x3c
    30b0:	20580302 	subscs	r0, r8, r2, lsl #6
    30b4:	02040200 	andeq	r0, r4, #0, 4
    30b8:	003c2403 	eorseq	r2, ip, r3, lsl #8
    30bc:	03020402 	movweq	r0, #9218	; 0x2402
    30c0:	0200ba12 	andeq	fp, r0, #73728	; 0x12000
    30c4:	71030204 	tstvc	r3, r4, lsl #4
    30c8:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    30cc:	2e0f0302 	cdpcs	3, 0, cr0, cr15, cr2, {0}
    30d0:	02040200 	andeq	r0, r4, #0, 4
    30d4:	002e7103 	eoreq	r7, lr, r3, lsl #2
    30d8:	4b020402 	blmi	840e8 <__Stack_Size+0x838e8>
    30dc:	02040200 	andeq	r0, r4, #0, 4
    30e0:	0402002d 	streq	r0, [r2], #-45	; 0x2d
    30e4:	02003d02 	andeq	r3, r0, #2, 26	; 0x80
    30e8:	009d0204 	addseq	r0, sp, r4, lsl #4
    30ec:	5a020402 	bpl	840fc <__Stack_Size+0x838fc>
    30f0:	02040200 	andeq	r0, r4, #0, 4
    30f4:	0402005e 	streq	r0, [r2], #-94	; 0x5e
    30f8:	02005c02 	andeq	r5, r0, #512	; 0x200
    30fc:	65030204 	strvs	r0, [r3, #-516]	; 0x204
    3100:	f222033c 	vcge.s32	d0, d2, d28
    3104:	31806759 	orrcc	r6, r0, r9, asr r7
    3108:	59302b2f 	ldmdbpl	r0!, {r0, r1, r2, r3, r5, r8, r9, fp, sp}
    310c:	2b671f3e 	blcs	19cae0c <__Stack_Size+0x19ca60c>
    3110:	032d2f31 	teqeq	sp, #49, 30	; 0xc4
    3114:	2f34207a 	svccs	0x0034207a
    3118:	2b312c7d 	blcs	c4e314 <__Stack_Size+0xc4db14>
    311c:	312c302f 	teqcc	ip, pc, lsr #32
    3120:	2f2f2f2f 	svccs	0x002f2f2f
    3124:	01000602 	tsteq	r0, r2, lsl #12
    3128:	02050001 	andeq	r0, r5, #1
    312c:	08005ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, lr}
    3130:	0101a603 	tsteq	r1, r3, lsl #12
    3134:	3d201f2f 	stccc	15, cr1, [r0, #-188]!	; 0xffffff44
    3138:	03363e5b 	teqeq	r6, #1456	; 0x5b0
    313c:	22207f9a 	eorcs	r7, r0, #616	; 0x268
    3140:	e303241e 	movw	r2, #13342	; 0x341e
    3144:	98032e00 	stmdals	r3, {r9, sl, fp, sp}
    3148:	30302e7f 	eorscc	r2, r0, pc, ror lr
    314c:	30303030 	eorscc	r3, r0, r0, lsr r0
    3150:	00da0330 	sbcseq	r0, sl, r0, lsr r3
    3154:	75032f2e 	strvc	r2, [r3, #-3886]	; 0xf2e
    3158:	1e3e593c 	mrcne	9, 1, r5, cr14, cr12, {1}
    315c:	024b2130 	subeq	r2, fp, #48, 2
    3160:	01010006 	tsteq	r1, r6
    3164:	48020500 	stmdami	r2, {r8, sl}
    3168:	0308005b 	movweq	r0, #32859	; 0x805b
    316c:	310101ba 			; <UNDEFINED> instruction: 0x310101ba
    3170:	2331201d 	teqcs	r1, #29
    3174:	2438245c 	ldrtcs	r2, [r8], #-1116	; 0x45c
    3178:	01040200 	mrseq	r0, R12_usr
    317c:	062e0e03 	strteq	r0, [lr], -r3, lsl #28
    3180:	4b061208 	blmi	1879a8 <__Stack_Size+0x1871a8>
    3184:	587ef703 	ldmdapl	lr!, {r0, r1, r8, r9, sl, ip, sp, lr, pc}^
    3188:	01870384 	orreq	r0, r7, r4, lsl #7
    318c:	7ef90320 	cdpvc	3, 15, cr0, cr9, cr0, {1}
    3190:	22483e20 	subcs	r3, r8, #32, 28	; 0x200
    3194:	1e264630 	mcrne	6, 1, r4, cr6, cr0, {1}
    3198:	03683e30 	cmneq	r8, #48, 28	; 0x300
    319c:	09037477 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, sl, ip, sp, lr}
    31a0:	2e77032e 	cdpcs	3, 7, cr0, cr7, cr14, {1}
    31a4:	03200a03 	teqeq	r0, #12288	; 0x3000
    31a8:	0c032e72 	stceq	14, cr2, [r3], {114}	; 0x72
    31ac:	2e74032e 	cdpcs	3, 7, cr0, cr4, cr14, {1}
    31b0:	1e200a03 	vmulne.f32	s0, s0, s6
    31b4:	87032a1e 	smladhi	r3, lr, sl, r2
    31b8:	85032001 	strhi	r2, [r3, #-1]
    31bc:	fb03207f 	blx	cb3c2 <__Stack_Size+0xcabc2>
    31c0:	35082e00 	strcc	r2, [r8, #-3584]	; 0xe00
    31c4:	3c6c0342 	stclcc	3, cr0, [ip], #-264	; 0xfffffef8
    31c8:	587eff03 	ldmdapl	lr!, {r0, r1, r8, r9, sl, fp, ip, sp, lr, pc}^
    31cc:	302c5a4c 	eorcc	r5, ip, ip, asr #20
    31d0:	4c2c322c 	sfmmi	f3, 4, [ip], #-176	; 0xffffff50
    31d4:	302c322c 	eorcc	r3, ip, ip, lsr #4
    31d8:	034a7703 	movteq	r7, #42755	; 0xa703
    31dc:	34462e0b 	strbcc	r2, [r6], #-3595	; 0xe0b
    31e0:	343c7503 	ldrtcc	r7, [ip], #-1283	; 0x503
    31e4:	7a03352c 	bvc	d069c <__Stack_Size+0xcfe9c>
    31e8:	00f6032e 	rscseq	r0, r6, lr, lsr #6
    31ec:	7f87032e 	svcvc	0x0087032e
    31f0:	4230302e 	eorsmi	r3, r0, #46	; 0x2e
    31f4:	342e7603 	strtcc	r7, [lr], #-1539	; 0x603
    31f8:	f6032d31 			; <UNDEFINED> instruction: 0xf6032d31
    31fc:	03212e00 	teqeq	r1, #0, 28
    3200:	03207f8b 	teqeq	r0, #556	; 0x22c
    3204:	032000ef 	teqeq	r0, #239	; 0xef
    3208:	03587f91 	cmpeq	r8, #580	; 0x244
    320c:	302e00f4 	strdcc	r0, [lr], -r4	; <UNPREDICTABLE>
    3210:	031f3d1f 	tsteq	pc, #1984	; 0x7c0
    3214:	033c7f8a 	teqeq	ip, #552	; 0x228
    3218:	302e00f6 	strdcc	r0, [lr], -r6	; <UNPREDICTABLE>
    321c:	032b312b 	teqeq	fp, #-1073741814	; 0xc000000a
    3220:	ee033c11 	mcr	12, 0, r3, cr3, cr1, {0}
    3224:	2c5a827e 	lfmcs	f0, 3, [sl], {126}	; 0x7e
    3228:	4c684c30 	stclmi	12, cr4, [r8], #-192	; 0xffffff40
    322c:	73035a4c 	movwvc	r5, #14924	; 0x3a4c
    3230:	2e0b032e 	cdpcs	3, 0, cr0, cr11, cr14, {1}
    3234:	4a730330 	bmi	1cc3efc <__Stack_Size+0x1cc36fc>
    3238:	322e0a03 	eorcc	r0, lr, #12288	; 0x3000
    323c:	2d1e302c 	ldccs	0, cr3, [lr, #-176]	; 0xffffff50
    3240:	032e7703 	teqeq	lr, #786432	; 0xc0000
    3244:	77032e0b 	strvc	r2, [r3, -fp, lsl #28]
    3248:	0330302e 	teqeq	r0, #46	; 0x2e
    324c:	032e018c 	teqeq	lr, #140, 2	; 0x23
    3250:	03207efa 	teqeq	r0, #4000	; 0xfa0
    3254:	032e0186 	teqeq	lr, #-2147483615	; 0x80000021
    3258:	03207ef9 	teqeq	r0, #3984	; 0xf90
    325c:	302e0187 	eorcc	r0, lr, r7, lsl #3
    3260:	01000302 	tsteq	r0, r2, lsl #6
    3264:	0004c701 	andeq	ip, r4, r1, lsl #14
    3268:	45000200 	strmi	r0, [r0, #-512]	; 0x200
    326c:	02000000 	andeq	r0, r0, #0
    3270:	0d0efb01 	vstreq	d15, [lr, #-4]
    3274:	01010100 	mrseq	r0, (UNDEF: 17)
    3278:	00000001 	andeq	r0, r0, r1
    327c:	01000001 	tsteq	r0, r1
    3280:	5f627375 	svcpl	0x00627375
    3284:	0062696c 	rsbeq	r6, r2, ip, ror #18
    3288:	62737500 	rsbsvs	r7, r3, #0, 10
    328c:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    3290:	00632e73 	rsbeq	r2, r3, r3, ror lr
    3294:	75000001 	strvc	r0, [r0, #-1]
    3298:	745f6273 	ldrbvc	r6, [pc], #-627	; 32a0 <__Stack_Size+0x2aa0>
    329c:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    32a0:	00010068 	andeq	r0, r1, r8, rrx
    32a4:	62737500 	rsbsvs	r7, r3, #0, 10
    32a8:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    32ac:	00682e73 	rsbeq	r2, r8, r3, ror lr
    32b0:	00000001 	andeq	r0, r0, r1
    32b4:	00020500 	andeq	r0, r2, r0, lsl #10
    32b8:	03000000 	movweq	r0, #0
    32bc:	02130122 	andseq	r0, r3, #-2147483640	; 0x80000008
    32c0:	01010006 	tsteq	r1, r6
    32c4:	00020500 	andeq	r0, r2, r0, lsl #10
    32c8:	03000000 	movweq	r0, #0
    32cc:	2f13012e 	svccs	0x0013012e
    32d0:	01000402 	tsteq	r0, r2, lsl #8
    32d4:	02050001 	andeq	r0, r5, #1
    32d8:	00000000 	andeq	r0, r0, r0
    32dc:	13013a03 	movwne	r3, #6659	; 0x1a03
    32e0:	01000602 	tsteq	r0, r2, lsl #12
    32e4:	02050001 	andeq	r0, r5, #1
    32e8:	00000000 	andeq	r0, r0, r0
    32ec:	0100c603 	tsteq	r0, r3, lsl #12
    32f0:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
    32f4:	00010100 	andeq	r0, r1, r0, lsl #2
    32f8:	00000205 	andeq	r0, r0, r5, lsl #4
    32fc:	d2030000 	andle	r0, r3, #0
    3300:	2f130100 	svccs	0x00130100
    3304:	01000402 	tsteq	r0, r2, lsl #8
    3308:	02050001 	andeq	r0, r5, #1
    330c:	00000000 	andeq	r0, r0, r0
    3310:	0100de03 	tsteq	r0, r3, lsl #28
    3314:	00060213 	andeq	r0, r6, r3, lsl r2
    3318:	05000101 	streq	r0, [r0, #-257]	; 0x101
    331c:	00000002 	andeq	r0, r0, r2
    3320:	00ea0300 	rsceq	r0, sl, r0, lsl #6
    3324:	022f1301 	eoreq	r1, pc, #67108864	; 0x4000000
    3328:	01010004 	tsteq	r1, r4
    332c:	00020500 	andeq	r0, r2, r0, lsl #10
    3330:	03000000 	movweq	r0, #0
    3334:	130100f6 	movwne	r0, #4342	; 0x10f6
    3338:	01000802 	tsteq	r0, r2, lsl #16
    333c:	02050001 	andeq	r0, r5, #1
    3340:	00000000 	andeq	r0, r0, r0
    3344:	01018203 	tsteq	r1, r3, lsl #4
    3348:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
    334c:	00010100 	andeq	r0, r1, r0, lsl #2
    3350:	00000205 	andeq	r0, r0, r5, lsl #4
    3354:	8f030000 	svchi	0x00030000
    3358:	02130101 	andseq	r0, r3, #1073741824	; 0x40000000
    335c:	01010007 	tsteq	r1, r7
    3360:	00020500 	andeq	r0, r2, r0, lsl #10
    3364:	03000000 	movweq	r0, #0
    3368:	1301019b 	movwne	r0, #4507	; 0x119b
    336c:	00020267 	andeq	r0, r2, r7, ror #4
    3370:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3374:	00000002 	andeq	r0, r0, r2
    3378:	01a80300 			; <UNDEFINED> instruction: 0x01a80300
    337c:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
    3380:	00010100 	andeq	r0, r1, r0, lsl #2
    3384:	00000205 	andeq	r0, r0, r5, lsl #4
    3388:	b4030000 	strlt	r0, [r3], #-0
    338c:	67130101 	ldrvs	r0, [r3, -r1, lsl #2]
    3390:	01000302 	tsteq	r0, r2, lsl #6
    3394:	02050001 	andeq	r0, r5, #1
    3398:	08005de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, ip, lr}
    339c:	0101c103 	tsteq	r1, r3, lsl #2
    33a0:	00150213 	andseq	r0, r5, r3, lsl r2
    33a4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    33a8:	00000002 	andeq	r0, r0, r2
    33ac:	01ce0300 	biceq	r0, lr, r0, lsl #6
    33b0:	15021301 	strne	r1, [r2, #-769]	; 0x301
    33b4:	00010100 	andeq	r0, r1, r0, lsl #2
    33b8:	00000205 	andeq	r0, r0, r5, lsl #4
    33bc:	db030000 	blle	c33c4 <__Stack_Size+0xc2bc4>
    33c0:	41030101 	tstmi	r3, r1, lsl #2
    33c4:	00c20301 	sbceq	r0, r2, r1, lsl #6
    33c8:	7fbe0358 	svcvc	0x00be0358
    33cc:	00c20320 	sbceq	r0, r2, r0, lsr #6
    33d0:	303e2220 	eorscc	r2, lr, r0, lsr #4
    33d4:	01000502 	tsteq	r0, r2, lsl #10
    33d8:	02050001 	andeq	r0, r5, #1
    33dc:	00000000 	andeq	r0, r0, r0
    33e0:	0101f003 	tsteq	r1, r3
    33e4:	03026713 	movweq	r6, #10003	; 0x2713
    33e8:	00010100 	andeq	r0, r1, r0, lsl #2
    33ec:	00000205 	andeq	r0, r0, r5, lsl #4
    33f0:	fc030000 	stc2	0, cr0, [r3], {-0}
    33f4:	67130101 	ldrvs	r0, [r3, -r1, lsl #2]
    33f8:	01000302 	tsteq	r0, r2, lsl #6
    33fc:	02050001 	andeq	r0, r5, #1
    3400:	00000000 	andeq	r0, r0, r0
    3404:	01028803 	tsteq	r2, r3, lsl #16
    3408:	000f0213 	andeq	r0, pc, r3, lsl r2	; <UNPREDICTABLE>
    340c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3410:	005e0a02 	subseq	r0, lr, r2, lsl #20
    3414:	02940308 	addseq	r0, r4, #8, 6	; 0x20000000
    3418:	0f021301 	svceq	0x00021301
    341c:	00010100 	andeq	r0, r1, r0, lsl #2
    3420:	00000205 	andeq	r0, r0, r5, lsl #4
    3424:	a0030000 	andge	r0, r3, r0
    3428:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
    342c:	0101000f 	tsteq	r1, pc
    3430:	00020500 	andeq	r0, r2, r0, lsl #10
    3434:	03000000 	movweq	r0, #0
    3438:	130102ac 	movwne	r0, #4780	; 0x12ac
    343c:	01000e02 	tsteq	r0, r2, lsl #28
    3440:	02050001 	andeq	r0, r5, #1
    3444:	08005e28 	stmdaeq	r0, {r3, r5, r9, sl, fp, ip, lr}
    3448:	0102b703 	tsteq	r2, r3, lsl #14
    344c:	000e0213 	andeq	r0, lr, r3, lsl r2
    3450:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3454:	00000002 	andeq	r0, r0, r2
    3458:	02c20300 	sbceq	r0, r2, #0, 6
    345c:	0f021301 	svceq	0x00021301
    3460:	00010100 	andeq	r0, r1, r0, lsl #2
    3464:	00000205 	andeq	r0, r0, r5, lsl #4
    3468:	cd030000 	stcgt	0, cr0, [r3, #-0]
    346c:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
    3470:	0101000f 	tsteq	r1, pc
    3474:	00020500 	andeq	r0, r2, r0, lsl #10
    3478:	03000000 	movweq	r0, #0
    347c:	130102d8 	movwne	r0, #4824	; 0x12d8
    3480:	01000e02 	tsteq	r0, r2, lsl #28
    3484:	02050001 	andeq	r0, r5, #1
    3488:	00000000 	andeq	r0, r0, r0
    348c:	0102e303 	tsteq	r2, r3, lsl #6
    3490:	05028313 	streq	r8, [r2, #-787]	; 0x313
    3494:	00010100 	andeq	r0, r1, r0, lsl #2
    3498:	00000205 	andeq	r0, r0, r5, lsl #4
    349c:	ee030000 	cdp	0, 0, cr0, cr3, cr0, {0}
    34a0:	83130102 	tsthi	r3, #-2147483648	; 0x80000000
    34a4:	01000502 	tsteq	r0, r2, lsl #10
    34a8:	02050001 	andeq	r0, r5, #1
    34ac:	00000000 	andeq	r0, r0, r0
    34b0:	0102f903 	tsteq	r2, r3, lsl #18
    34b4:	000c0213 	andeq	r0, ip, r3, lsl r2
    34b8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    34bc:	00000002 	andeq	r0, r0, r2
    34c0:	03840300 	orreq	r0, r4, #0, 6
    34c4:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
    34c8:	00010100 	andeq	r0, r1, r0, lsl #2
    34cc:	00000205 	andeq	r0, r0, r5, lsl #4
    34d0:	8f030000 	svchi	0x00030000
    34d4:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
    34d8:	01010010 	tsteq	r1, r0, lsl r0
    34dc:	00020500 	andeq	r0, r2, r0, lsl #10
    34e0:	03000000 	movweq	r0, #0
    34e4:	1301039a 	movwne	r0, #5018	; 0x139a
    34e8:	01001002 	tsteq	r0, r2
    34ec:	02050001 	andeq	r0, r5, #1
    34f0:	08005e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip, lr}
    34f4:	0103a503 	tsteq	r3, r3, lsl #10
    34f8:	04020013 	streq	r0, [r2], #-19
    34fc:	02820601 	addeq	r0, r2, #1048576	; 0x100000
    3500:	01010008 	tsteq	r1, r8
    3504:	64020500 	strvs	r0, [r2], #-1280	; 0x500
    3508:	0308005e 	movweq	r0, #32862	; 0x805e
    350c:	130103b0 	movwne	r0, #5040	; 0x13b0
    3510:	01040200 	mrseq	r0, R12_usr
    3514:	08028206 	stmdaeq	r2, {r1, r2, r9, pc}
    3518:	00010100 	andeq	r0, r1, r0, lsl #2
    351c:	00000205 	andeq	r0, r0, r5, lsl #4
    3520:	bc030000 	stclt	0, cr0, [r3], {-0}
    3524:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
    3528:	0101000f 	tsteq	r1, pc
    352c:	00020500 	andeq	r0, r2, r0, lsl #10
    3530:	03000000 	movweq	r0, #0
    3534:	130103c7 	movwne	r0, #5063	; 0x13c7
    3538:	00030267 	andeq	r0, r3, r7, ror #4
    353c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3540:	00000002 	andeq	r0, r0, r2
    3544:	03d30300 	bicseq	r0, r3, #0, 6
    3548:	10021301 	andne	r1, r2, r1, lsl #6
    354c:	00010100 	andeq	r0, r1, r0, lsl #2
    3550:	00000205 	andeq	r0, r0, r5, lsl #4
    3554:	df030000 	svcle	0x00030000
    3558:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
    355c:	01010010 	tsteq	r1, r0, lsl r0
    3560:	84020500 	strhi	r0, [r2], #-1280	; 0x500
    3564:	0308005e 	movweq	r0, #32862	; 0x805e
    3568:	130103ea 	movwne	r0, #5098	; 0x13ea
    356c:	0004029f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
    3570:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3574:	005ea002 	subseq	sl, lr, r2
    3578:	03f50308 	mvnseq	r0, #8, 6	; 0x20000000
    357c:	02831301 	addeq	r1, r3, #67108864	; 0x4000000
    3580:	01010006 	tsteq	r1, r6
    3584:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
    3588:	0308005e 	movweq	r0, #32862	; 0x805e
    358c:	13010481 	movwne	r0, #5249	; 0x1481
    3590:	01000e02 	tsteq	r0, r2, lsl #28
    3594:	02050001 	andeq	r0, r5, #1
    3598:	00000000 	andeq	r0, r0, r0
    359c:	01048d03 	tsteq	r4, r3, lsl #26
    35a0:	04020013 	streq	r0, [r2], #-19
    35a4:	002e0601 	eoreq	r0, lr, r1, lsl #12
    35a8:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
    35ac:	01000702 	tsteq	r0, r2, lsl #14
    35b0:	02050001 	andeq	r0, r5, #1
    35b4:	08005ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, lr}
    35b8:	01049903 	tsteq	r4, r3, lsl #18
    35bc:	04020013 	streq	r0, [r2], #-19
    35c0:	00ac0601 	adceq	r0, ip, r1, lsl #12
    35c4:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
    35c8:	01000b02 	tsteq	r0, r2, lsl #22
    35cc:	02050001 	andeq	r0, r5, #1
    35d0:	00000000 	andeq	r0, r0, r0
    35d4:	0104a403 	tsteq	r4, r3, lsl #8
    35d8:	07029113 	smladeq	r2, r3, r1, r9
    35dc:	00010100 	andeq	r0, r1, r0, lsl #2
    35e0:	00000205 	andeq	r0, r0, r5, lsl #4
    35e4:	af030000 	svcge	0x00030000
    35e8:	91130104 	tstls	r3, r4, lsl #2
    35ec:	01000702 	tsteq	r0, r2, lsl #14
    35f0:	02050001 	andeq	r0, r5, #1
    35f4:	00000000 	andeq	r0, r0, r0
    35f8:	0104bc03 	tsteq	r4, r3, lsl #24
    35fc:	001b0221 	andseq	r0, fp, r1, lsr #4
    3600:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3604:	00000002 	andeq	r0, r0, r2
    3608:	04c80300 	strbeq	r0, [r8], #768	; 0x300
    360c:	10021301 	andne	r1, r2, r1, lsl #6
    3610:	00010100 	andeq	r0, r1, r0, lsl #2
    3614:	00000205 	andeq	r0, r0, r5, lsl #4
    3618:	d4030000 	strle	r0, [r3], #-0
    361c:	02130104 	andseq	r0, r3, #4, 2
    3620:	01010010 	tsteq	r1, r0, lsl r0
    3624:	00020500 	andeq	r0, r2, r0, lsl #10
    3628:	03000000 	movweq	r0, #0
    362c:	130104df 	movwne	r0, #5343	; 0x14df
    3630:	0004029f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
    3634:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3638:	00000002 	andeq	r0, r0, r2
    363c:	04ea0300 	strbteq	r0, [sl], #768	; 0x300
    3640:	02831301 	addeq	r1, r3, #67108864	; 0x4000000
    3644:	01010006 	tsteq	r1, r6
    3648:	00020500 	andeq	r0, r2, r0, lsl #10
    364c:	03000000 	movweq	r0, #0
    3650:	130104f6 	movwne	r0, #5366	; 0x14f6
    3654:	0200211f 	andeq	r2, r0, #-1073741817	; 0xc0000007
    3658:	20060104 	andcs	r0, r6, r4, lsl #2
    365c:	02040200 	andeq	r0, r4, #0, 4
    3660:	02005808 	andeq	r5, r0, #8, 16	; 0x80000
    3664:	00f20104 	rscseq	r0, r2, r4, lsl #2
    3668:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
    366c:	01040200 	mrseq	r0, R12_usr
    3670:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    3674:	02120802 	andseq	r0, r2, #131072	; 0x20000
    3678:	0101000e 	tsteq	r1, lr
    367c:	00020500 	andeq	r0, r2, r0, lsl #10
    3680:	03000000 	movweq	r0, #0
    3684:	13010582 	movwne	r0, #5506	; 0x1582
    3688:	01040200 	mrseq	r0, R12_usr
    368c:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
    3690:	4a080204 	bmi	203ea8 <__Stack_Size+0x2036a8>
    3694:	01040200 	mrseq	r0, R12_usr
    3698:	000e0290 	muleq	lr, r0, r2
    369c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    36a0:	00000002 	andeq	r0, r0, r2
    36a4:	058e0300 	streq	r0, [lr, #768]	; 0x300
    36a8:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
    36ac:	2e060104 	adfcss	f0, f6, f4
    36b0:	02040200 	andeq	r0, r4, #0, 4
    36b4:	02004a08 	andeq	r4, r0, #8, 20	; 0x8000
    36b8:	02900104 	addseq	r0, r0, #4, 2
    36bc:	0101000e 	tsteq	r1, lr
    36c0:	00020500 	andeq	r0, r2, r0, lsl #10
    36c4:	03000000 	movweq	r0, #0
    36c8:	1301059a 	movwne	r0, #5530	; 0x159a
    36cc:	00070291 	muleq	r7, r1, r2
    36d0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    36d4:	00000002 	andeq	r0, r0, r2
    36d8:	05a60300 	streq	r0, [r6, #768]!	; 0x300
    36dc:	02911301 	addseq	r1, r1, #67108864	; 0x4000000
    36e0:	01010007 	tsteq	r1, r7
    36e4:	00020500 	andeq	r0, r2, r0, lsl #10
    36e8:	03000000 	movweq	r0, #0
    36ec:	130105b2 	movwne	r0, #5554	; 0x15b2
    36f0:	25489fbc 	strbcs	r9, [r8, #-4028]	; 0xfbc
    36f4:	01000702 	tsteq	r0, r2, lsl #14
    36f8:	02050001 	andeq	r0, r5, #1
    36fc:	00000000 	andeq	r0, r0, r0
    3700:	0105c303 	tsteq	r5, r3, lsl #6
    3704:	30bc3013 	adcscc	r3, ip, r3, lsl r0
    3708:	01000d02 	tsteq	r0, r2, lsl #26
    370c:	02050001 	andeq	r0, r5, #1
    3710:	00000000 	andeq	r0, r0, r0
    3714:	0105d603 	tsteq	r5, r3, lsl #12
    3718:	00030216 	andeq	r0, r3, r6, lsl r2
    371c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3720:	00000002 	andeq	r0, r0, r2
    3724:	05e30300 	strbeq	r0, [r3, #768]!	; 0x300
    3728:	02301601 	eorseq	r1, r0, #1048576	; 0x100000
    372c:	01010003 	tsteq	r1, r3
    3730:	000000b4 	strheq	r0, [r0], -r4
    3734:	00600002 	rsbeq	r0, r0, r2
    3738:	01020000 	mrseq	r0, (UNDEF: 2)
    373c:	000d0efb 	strdeq	r0, [sp], -fp
    3740:	01010101 	tsteq	r1, r1, lsl #2
    3744:	01000000 	mrseq	r0, (UNDEF: 0)
    3748:	75010000 	strvc	r0, [r1, #-0]
    374c:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    3750:	00006269 	andeq	r6, r0, r9, ror #4
    3754:	5f627375 	svcpl	0x00627375
    3758:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    375c:	00010063 	andeq	r0, r1, r3, rrx
    3760:	62737500 	rsbsvs	r7, r3, #0, 10
    3764:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    3768:	00682e65 	rsbeq	r2, r8, r5, ror #28
    376c:	75000001 	strvc	r0, [r0, #-1]
    3770:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
    3774:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
    3778:	00010068 	andeq	r0, r1, r8, rrx
    377c:	62737500 	rsbsvs	r7, r3, #0, 10
    3780:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    3784:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3788:	75000001 	strvc	r0, [r0, #-1]
    378c:	635f6273 	cmpvs	pc, #805306375	; 0x30000007
    3790:	2e65726f 	cdpcs	2, 6, cr7, cr5, cr15, {3}
    3794:	00010068 	andeq	r0, r1, r8, rrx
    3798:	05000000 	streq	r0, [r0, #-0]
    379c:	005f1802 	subseq	r1, pc, r2, lsl #16
    37a0:	01290308 	teqeq	r9, r8, lsl #6
    37a4:	593e8423 	ldmdbpl	lr!, {r0, r1, r5, sl, pc}
    37a8:	3d1f3d36 	ldccc	13, cr3, [pc, #-216]	; 36d8 <__Stack_Size+0x2ed8>
    37ac:	0395914b 	orrseq	r9, r5, #-1073741806	; 0xc0000012
    37b0:	30213c17 	eorcc	r3, r1, r7, lsl ip
    37b4:	59304259 	ldmdbpl	r0!, {r0, r3, r4, r6, r9, lr}
    37b8:	30593043 	subscc	r3, r9, r3, asr #32
    37bc:	03f31308 	mvnseq	r1, #8, 6	; 0x20000000
    37c0:	31672009 	cmncc	r7, r9
    37c4:	933f5c5b 	teqls	pc, #23296	; 0x5b00
    37c8:	1602311d 			; <UNDEFINED> instruction: 0x1602311d
    37cc:	00010100 	andeq	r0, r1, r0, lsl #2
    37d0:	00000205 	andeq	r0, r0, r5, lsl #4
    37d4:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    37d8:	76230101 	strtvc	r0, [r3], -r1, lsl #2
    37dc:	31675a3e 	cmncc	r7, lr, lsr sl
    37e0:	5b313f5b 	blpl	c53554 <__Stack_Size+0xc52d54>
    37e4:	01010008 	tsteq	r1, r8
    37e8:	00000063 	andeq	r0, r0, r3, rrx
    37ec:	00450002 	subeq	r0, r5, r2
    37f0:	01020000 	mrseq	r0, (UNDEF: 2)
    37f4:	000d0efb 	strdeq	r0, [sp], -fp
    37f8:	01010101 	tsteq	r1, r1, lsl #2
    37fc:	01000000 	mrseq	r0, (UNDEF: 0)
    3800:	75010000 	strvc	r0, [r1, #-0]
    3804:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    3808:	00006269 	andeq	r6, r0, r9, ror #4
    380c:	5f627375 	svcpl	0x00627375
    3810:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    3814:	0100632e 	tsteq	r0, lr, lsr #6
    3818:	73750000 	cmnvc	r5, #0
    381c:	79745f62 	ldmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    3820:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    3824:	00000100 	andeq	r0, r0, r0, lsl #2
    3828:	5f627375 	svcpl	0x00627375
    382c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    3830:	0100682e 	tsteq	r0, lr, lsr #16
    3834:	00000000 	andeq	r0, r0, r0
    3838:	606c0205 	rsbvs	r0, ip, r5, lsl #4
    383c:	35030800 	strcc	r0, [r3, #-2048]	; 0x800
    3840:	1d312101 	ldfnes	f2, [r1, #-4]!
    3844:	233d2f21 	teqcs	sp, #33, 30	; 0x84
    3848:	0f02231d 	svceq	0x0002231d
    384c:	50010100 	andpl	r0, r1, r0, lsl #2
    3850:	02000003 	andeq	r0, r0, #3
    3854:	00007b00 	andeq	r7, r0, r0, lsl #22
    3858:	fb010200 	blx	44062 <__Stack_Size+0x43862>
    385c:	01000d0e 	tsteq	r0, lr, lsl #26
    3860:	00010101 	andeq	r0, r1, r1, lsl #2
    3864:	00010000 	andeq	r0, r1, r0
    3868:	73750100 	cmnvc	r5, #0, 2
    386c:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    3870:	75000062 	strvc	r0, [r0, #-98]	; 0x62
    3874:	635f6273 	cmpvs	pc, #805306375	; 0x30000007
    3878:	2e65726f 	cdpcs	2, 6, cr7, cr5, cr15, {3}
    387c:	00010063 	andeq	r0, r1, r3, rrx
    3880:	62737500 	rsbsvs	r7, r3, #0, 10
    3884:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    3888:	00682e65 	rsbeq	r2, r8, r5, ror #28
    388c:	75000001 	strvc	r0, [r0, #-1]
    3890:	645f6273 	ldrbvs	r6, [pc], #-627	; 3898 <__Stack_Size+0x3098>
    3894:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    3898:	00000100 	andeq	r0, r0, r0, lsl #2
    389c:	5f627375 	svcpl	0x00627375
    38a0:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    38a4:	0100682e 	tsteq	r0, lr, lsr #16
    38a8:	73750000 	cmnvc	r5, #0
    38ac:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
    38b0:	682e7469 	stmdavs	lr!, {r0, r3, r5, r6, sl, ip, sp, lr}
    38b4:	00000100 	andeq	r0, r0, r0, lsl #2
    38b8:	5f627375 	svcpl	0x00627375
    38bc:	2e6d656d 	cdpcs	5, 6, cr6, cr13, cr13, {3}
    38c0:	00010068 	andeq	r0, r1, r8, rrx
    38c4:	62737500 	rsbsvs	r7, r3, #0, 10
    38c8:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    38cc:	00682e73 	rsbeq	r2, r8, r3, ror lr
    38d0:	00000001 	andeq	r0, r0, r1
    38d4:	a4020500 	strge	r0, [r2], #-1280	; 0x500
    38d8:	03080060 	movweq	r0, #32864	; 0x8060
    38dc:	222f0135 	eorcs	r0, pc, #1073741837	; 0x4000000d
    38e0:	2f4b223e 	svccs	0x004b223e
    38e4:	01000502 	tsteq	r0, r2, lsl #10
    38e8:	02050001 	andeq	r0, r5, #1
    38ec:	080060c8 	stmdaeq	r0, {r3, r6, r7, sp, lr}
    38f0:	0100e303 	tsteq	r0, r3, lsl #6
    38f4:	223e222f 	eorscs	r2, lr, #-268435454	; 0xf0000002
    38f8:	05022f4b 	streq	r2, [r2, #-3915]	; 0xf4b
    38fc:	00010100 	andeq	r0, r1, r0, lsl #2
    3900:	60ec0205 	rscvs	r0, ip, r5, lsl #4
    3904:	9b030800 	blls	c590c <__Stack_Size+0xc510c>
    3908:	222f0101 	eorcs	r0, pc, #1073741824	; 0x40000000
    390c:	1d23233d 	stcne	3, cr2, [r3, #-244]!	; 0xffffff0c
    3910:	22235b31 	eorcs	r5, r3, #50176	; 0xc400
    3914:	404e3040 	submi	r3, lr, r0, asr #32
    3918:	40223133 	eormi	r3, r2, r3, lsr r1
    391c:	231d3147 	tstcs	sp, #-1073741807	; 0xc0000011
    3920:	0b03424c 	bleq	d4258 <__Stack_Size+0xd3a58>
    3924:	60034b58 	andvs	r4, r3, r8, asr fp
    3928:	2021032e 	eorcs	r0, r1, lr, lsr #6
    392c:	01000702 	tsteq	r0, r2, lsl #14
    3930:	02050001 	andeq	r0, r5, #1
    3934:	0800617c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sp, lr}
    3938:	0103e003 	tsteq	r3, r3
    393c:	2f2f1f13 	svccs	0x002f1f13
    3940:	02003321 	andeq	r3, r0, #-2080374784	; 0x84000000
    3944:	20060104 	andcs	r0, r6, r4, lsl #2
    3948:	924d3006 	subls	r3, sp, #6
    394c:	21352d34 	teqcs	r5, r4, lsr sp
    3950:	4c847651 	stcmi	6, cr7, [r4], {81}	; 0x51
    3954:	2f2f2a24 	svccs	0x002f2a24
    3958:	23231d30 	teqcs	r3, #48, 26	; 0xc00
    395c:	01001202 	tsteq	r0, r2, lsl #4
    3960:	02050001 	andeq	r0, r5, #1
    3964:	08006224 	stmdaeq	r0, {r2, r5, r9, sp, lr}
    3968:	0100ca03 	tsteq	r0, r3, lsl #20
    396c:	591f2122 	ldmdbpl	pc, {r1, r5, r8, sp}	; <UNPREDICTABLE>
    3970:	4b21302f 	blmi	84fa34 <__Stack_Size+0x84f234>
    3974:	08022232 	stmdaeq	r2, {r1, r4, r5, r9, sp}
    3978:	00010100 	andeq	r0, r1, r0, lsl #2
    397c:	625c0205 	subsvs	r0, ip, #1342177280	; 0x50000000
    3980:	f8030800 			; <UNDEFINED> instruction: 0xf8030800
    3984:	84240100 	strthi	r0, [r4], #-256	; 0x100
    3988:	0402003e 	streq	r0, [r2], #-62	; 0x3e
    398c:	06200601 	strteq	r0, [r0], -r1, lsl #12
    3990:	224b342f 	subcs	r3, fp, #788529152	; 0x2f000000
    3994:	252f2f1e 	strcs	r2, [pc, #-3870]!	; 2a7e <__Stack_Size+0x227e>
    3998:	00070221 	andeq	r0, r7, r1, lsr #4
    399c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    39a0:	0062a402 	rsbeq	sl, r2, r2, lsl #8
    39a4:	01e90308 	mvneq	r0, r8, lsl #6
    39a8:	3e402101 	dvfccs	f2, f0, f1
    39ac:	3d35224b 	lfmcc	f2, 4, [r5, #-300]!	; 0xfffffed4
    39b0:	200f0342 	andcs	r0, pc, r2, asr #6
    39b4:	43207203 	teqmi	r0, #805306368	; 0x30000000
    39b8:	2075035f 	rsbscs	r0, r5, pc, asr r3
    39bc:	00314032 	eorseq	r4, r1, r2, lsr r0
    39c0:	06010402 	streq	r0, [r1], -r2, lsl #8
    39c4:	032f062e 	teqeq	pc, #48234496	; 0x2e00000
    39c8:	23472e09 	movtcs	r2, #32265	; 0x7e09
    39cc:	4b4c231d 	blmi	130c648 <__Stack_Size+0x130be48>
    39d0:	6b235a5e 	blvs	8da350 <__Stack_Size+0x8d9b50>
    39d4:	314b942f 	cmpcc	fp, pc, lsr #8
    39d8:	000a0221 	andeq	r0, sl, r1, lsr #4
    39dc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    39e0:	00637402 	rsbeq	r7, r3, r2, lsl #8
    39e4:	02c20308 	sbceq	r0, r2, #8, 6	; 0x20000000
    39e8:	0f032601 	svceq	0x00032601
    39ec:	20710320 	rsbscs	r0, r1, r0, lsr #6
    39f0:	03200f03 	teqeq	r0, #3, 30
    39f4:	43212071 	teqmi	r1, #113	; 0x71
    39f8:	31403254 	cmpcc	r0, r4, asr r2
    39fc:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    3a00:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    3a04:	2e090321 	cdpcs	3, 0, cr0, cr9, cr1, {1}
    3a08:	231d3147 	tstcs	sp, #-1073741807	; 0xc0000011
    3a0c:	034b8588 	movteq	r8, #46472	; 0xb588
    3a10:	12032e6f 	andne	r2, r3, #1776	; 0x6f0
    3a14:	00070220 	andeq	r0, r7, r0, lsr #4
    3a18:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3a1c:	0063f802 	rsbeq	pc, r3, r2, lsl #16
    3a20:	02f80308 	rscseq	r0, r8, #8, 6	; 0x20000000
    3a24:	4c672101 	stfmie	f2, [r7], #-4
    3a28:	01000702 	tsteq	r0, r2, lsl #14
    3a2c:	02050001 	andeq	r0, r5, #1
    3a30:	0800641c 	stmdaeq	r0, {r2, r3, r4, sl, sp, lr}
    3a34:	01039203 	tsteq	r3, r3, lsl #4
    3a38:	3d223d15 	stccc	13, cr3, [r2, #-84]!	; 0xffffffac
    3a3c:	04022f23 	streq	r2, [r2], #-3875	; 0xf23
    3a40:	00010100 	andeq	r0, r1, r0, lsl #2
    3a44:	64380205 	ldrtvs	r0, [r8], #-517	; 0x205
    3a48:	c9030800 	stmdbgt	r3, {fp}
    3a4c:	68210107 	stmdavs	r1!, {r0, r1, r2, r8}
    3a50:	02404b5a 	subeq	r4, r0, #92160	; 0x16800
    3a54:	0101000d 	tsteq	r1, sp
    3a58:	78020500 	stmdavc	r2, {r8, sl}
    3a5c:	03080064 	movweq	r0, #32868	; 0x8064
    3a60:	280106cc 	stmdacs	r1, {r2, r3, r6, r7, r9, sl}
    3a64:	563e2c3e 			; <UNDEFINED> instruction: 0x563e2c3e
    3a68:	30302f5c 	eorscc	r2, r0, ip, asr pc
    3a6c:	032f3130 	teqeq	pc, #48, 2
    3a70:	4e4a7dbd 	mcrmi	13, 2, r7, cr10, cr13, {5}
    3a74:	4f304030 	svcmi	0x00304030
    3a78:	033d3d29 	teqeq	sp, #2624	; 0xa40
    3a7c:	03304a0c 	teqeq	r0, #12, 20	; 0xc000
    3a80:	03593c3c 	cmpeq	r9, #60, 24	; 0x3c00
    3a84:	3e3d3c44 	cdpcc	12, 3, cr3, cr13, cr4, {2}
    3a88:	3d3d3044 	ldccc	0, cr3, [sp, #-272]!	; 0xfffffef0
    3a8c:	3c0b033e 	stccc	3, cr0, [fp], {62}	; 0x3e
    3a90:	31413031 	cmpcc	r1, r1, lsr r0
    3a94:	09033033 	stmdbeq	r3, {r0, r1, r4, r5, ip, sp}
    3a98:	2e0a032e 	cdpcs	3, 0, cr0, cr10, cr14, {1}
    3a9c:	75039c36 	strvc	r9, [r3, #-3126]	; 0xc36
    3aa0:	2010032e 	andscs	r0, r0, lr, lsr #6
    3aa4:	303c1903 	eorscc	r1, ip, r3, lsl #18
    3aa8:	3e302f3e 	mrccc	15, 1, r2, cr0, cr14, {1}
    3aac:	3d303e30 	ldccc	14, cr3, [r0, #-192]!	; 0xffffff40
    3ab0:	695a4230 	ldmdbvs	sl, {r4, r5, r9, lr}^
    3ab4:	75305e4b 	ldrvc	r5, [r0, #-3659]!	; 0xe4b
    3ab8:	0e03306d 	cdpeq	0, 0, cr3, cr3, cr13, {3}
    3abc:	20720320 	rsbscs	r0, r2, r0, lsr #6
    3ac0:	75035f43 	strvc	r5, [r3, #-3907]	; 0xf43
    3ac4:	31403220 	cmpcc	r0, r0, lsr #4
    3ac8:	3c090359 	stccc	3, cr0, [r9], {89}	; 0x59
    3acc:	59305030 	ldmdbpl	r0!, {r4, r5, ip, lr}
    3ad0:	2289674b 	addcs	r6, r9, #19660800	; 0x12c0000
    3ad4:	322f233d 	eorcc	r2, pc, #-201326592	; 0xf4000000
    3ad8:	69413067 	stmdbvs	r1, {r0, r1, r2, r5, r6, ip, sp}^
    3adc:	4d413f31 	stclmi	15, cr3, [r1, #-196]	; 0xffffff3c
    3ae0:	23084c31 	movwcs	r4, #35889	; 0x8c31
    3ae4:	5a305a30 	bpl	c1a3ac <__Stack_Size+0xc19bac>
    3ae8:	2f404b40 	svccs	0x00404b40
    3aec:	2f4a2f03 	svccs	0x004a2f03
    3af0:	2e7ed603 	cdpcs	6, 7, cr13, cr14, cr3, {0}
    3af4:	032e2c03 	teqeq	lr, #768	; 0x300
    3af8:	0c022e0b 	stceq	14, cr2, [r2], {11}
    3afc:	00010100 	andeq	r0, r1, r0, lsl #2
    3b00:	67540205 	ldrbvs	r0, [r4, -r5, lsl #4]
    3b04:	a0030800 	andge	r0, r3, r0, lsl #16
    3b08:	3e210107 	sufccs	f0, f1, f7
    3b0c:	01040200 	mrseq	r0, R12_usr
    3b10:	03062e06 	movweq	r2, #28166	; 0x6e06
    3b14:	1e2e7c8a 	cdpne	12, 2, cr7, cr14, cr10, {4}
    3b18:	59263322 	stmdbpl	r6!, {r1, r5, r8, r9, ip, sp}
    3b1c:	222f211f 	eorcs	r2, pc, #-1073741817	; 0xc0000007
    3b20:	3077301e 	rsbscc	r3, r7, lr, lsl r0
    3b24:	1f2f1f21 	svcne	0x002f1f21
    3b28:	4c3f2f21 	ldcmi	15, cr2, [pc], #-132	; 3aac <__Stack_Size+0x32ac>
    3b2c:	3d4e2240 	sfmcc	f2, 2, [lr, #-256]	; 0xffffff00
    3b30:	9e03d303 	cdpls	3, 0, cr13, cr3, cr3, {0}
    3b34:	0351303f 	cmpeq	r1, #63	; 0x3f
    3b38:	2d312009 	ldccs	0, cr2, [r1, #-36]!	; 0xffffffdc
    3b3c:	01000f02 	tsteq	r0, r2, lsl #30
    3b40:	02050001 	andeq	r0, r5, #1
    3b44:	0800681c 	stmdaeq	r0, {r2, r3, r4, fp, sp, lr}
    3b48:	0107dd03 	tsteq	r7, r3, lsl #26
    3b4c:	02003122 	andeq	r3, r0, #-2147483640	; 0x80000008
    3b50:	20060104 	andcs	r0, r6, r4, lsl #2
    3b54:	02040200 	andeq	r0, r4, #0, 4
    3b58:	02007606 	andeq	r7, r0, #6291456	; 0x600000
    3b5c:	32640204 	rsbcc	r0, r4, #4, 4	; 0x40000000
    3b60:	01000902 	tsteq	r0, r2, lsl #18
    3b64:	02050001 	andeq	r0, r5, #1
    3b68:	08006854 	stmdaeq	r0, {r2, r4, r6, fp, sp, lr}
    3b6c:	0106f803 	tsteq	r6, r3, lsl #16
    3b70:	02003e21 	andeq	r3, r0, #528	; 0x210
    3b74:	2e060104 	adfcss	f0, f6, f4
    3b78:	3f303006 	svccc	0x00303006
    3b7c:	04020030 	streq	r0, [r2], #-48	; 0x30
    3b80:	02003d01 	andeq	r3, r0, #1, 26	; 0x40
    3b84:	311f0104 	tstcc	pc, r4, lsl #2
    3b88:	23504c3d 	cmpcs	r0, #15616	; 0x3d00
    3b8c:	09022d31 	stmdbeq	r2, {r0, r4, r5, r8, sl, fp, sp}
    3b90:	00010100 	andeq	r0, r1, r0, lsl #2
    3b94:	00000205 	andeq	r0, r0, r5, lsl #4
    3b98:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    3b9c:	01020107 	tsteq	r2, r7, lsl #2
    3ba0:	8f010100 	svchi	0x00010100
    3ba4:	02000000 	andeq	r0, r0, #0
    3ba8:	00003600 	andeq	r3, r0, r0, lsl #12
    3bac:	fb010200 	blx	443b6 <__Stack_Size+0x43bb6>
    3bb0:	01000d0e 	tsteq	r0, lr, lsl #26
    3bb4:	00010101 	andeq	r0, r1, r1, lsl #2
    3bb8:	00010000 	andeq	r0, r1, r0
    3bbc:	73750100 	cmnvc	r5, #0, 2
    3bc0:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    3bc4:	75000062 	strvc	r0, [r0, #-98]	; 0x62
    3bc8:	6d5f6273 	lfmvs	f6, 2, [pc, #-460]	; 3a04 <__Stack_Size+0x3204>
    3bcc:	632e6d65 	teqvs	lr, #6464	; 0x1940
    3bd0:	00000100 	andeq	r0, r0, r0, lsl #2
    3bd4:	5f627375 	svcpl	0x00627375
    3bd8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    3bdc:	0100682e 	tsteq	r0, lr, lsr #16
    3be0:	00000000 	andeq	r0, r0, r0
    3be4:	68b00205 	ldmvs	r0!, {r0, r2, r9}
    3be8:	23030800 	movwcs	r0, #14336	; 0x3800
    3bec:	232b2401 	teqcs	fp, #16777216	; 0x1000000
    3bf0:	0021232b 	eoreq	r2, r1, fp, lsr #6
    3bf4:	06010402 	streq	r0, [r1], -r2, lsl #8
    3bf8:	04020020 	streq	r0, [r2], #-32
    3bfc:	004e0602 	subeq	r0, lr, r2, lsl #12
    3c00:	2c020402 	cfstrscs	mvf0, [r2], {2}
    3c04:	02040200 	andeq	r0, r4, #0, 4
    3c08:	04020030 	streq	r0, [r2], #-48	; 0x30
    3c0c:	024e2f02 	subeq	r2, lr, #2, 30
    3c10:	01010001 	tsteq	r1, r1
    3c14:	e0020500 	and	r0, r2, r0, lsl #10
    3c18:	03080068 	movweq	r0, #32872	; 0x8068
    3c1c:	2b24013c 	blcs	904114 <__Stack_Size+0x903914>
    3c20:	21232b23 	teqcs	r3, r3, lsr #22
    3c24:	01040200 	mrseq	r0, R12_usr
    3c28:	02002006 	andeq	r2, r0, #6
    3c2c:	30060204 	andcc	r0, r6, r4, lsl #4
    3c30:	00010269 	andeq	r0, r1, r9, ror #4
    3c34:	Address 0x00003c34 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	0000000c 	andeq	r0, r0, ip
      14:	00000000 	andeq	r0, r0, r0
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	08000b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp}
      1c:	00000002 	andeq	r0, r0, r2
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	0000000c 	andeq	r0, r0, ip
      24:	00000000 	andeq	r0, r0, r0
      28:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	00000002 	andeq	r0, r0, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	0000000c 	andeq	r0, r0, ip
      34:	00000000 	andeq	r0, r0, r0
      38:	08000ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	00000002 	andeq	r0, r0, r2

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	0000000c 	andeq	r0, r0, ip
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	00000000 	andeq	r0, r0, r0
      48:	08000ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp}
      4c:	0000000a 	andeq	r0, r0, sl

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	0000000c 	andeq	r0, r0, ip
      54:	00000000 	andeq	r0, r0, r0
      58:	08000bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp}
      5c:	00000002 	andeq	r0, r0, r2
      60:	0000000c 	andeq	r0, r0, ip
      64:	00000000 	andeq	r0, r0, r0
      68:	08000bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp}
      6c:	00000018 	andeq	r0, r0, r8, lsl r0
      70:	0000000c 	andeq	r0, r0, ip
      74:	00000000 	andeq	r0, r0, r0
      78:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
      7c:	00000002 	andeq	r0, r0, r2
      80:	0000000c 	andeq	r0, r0, ip
      84:	00000000 	andeq	r0, r0, r0
      88:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
      8c:	00000002 	andeq	r0, r0, r2
      90:	0000000c 	andeq	r0, r0, ip
      94:	00000000 	andeq	r0, r0, r0
      98:	08000bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp}
      9c:	00000002 	andeq	r0, r0, r2
      a0:	0000000c 	andeq	r0, r0, ip
      a4:	00000000 	andeq	r0, r0, r0
	f25519_select(x, a, b, (a[0] ^ parity) & 1);

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
	f25519_normalize(a);
	f25519_normalize(c);
      a8:	08000bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp}

	return f25519_eq(a, c);
      ac:	00000002 	andeq	r0, r0, r2
      b0:	0000000c 	andeq	r0, r0, ip
      b4:	00000000 	andeq	r0, r0, r0
	uint8_t ok;

	mx2ey(ey, mx);
	ok = ey2ex(ex, ey, parity);

	f25519_normalize(ex);
      b8:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
	f25519_normalize(ey);
      bc:	00000002 	andeq	r0, r0, r2
      c0:	0000000c 	andeq	r0, r0, ip

	return ok;
}
      c4:	00000000 	andeq	r0, r0, r0
      c8:	08000be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp}
      cc:	00000002 	andeq	r0, r0, r2
      d0:	0000000c 	andeq	r0, r0, ip
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
      d4:	00000000 	andeq	r0, r0, r0
      d8:	08000be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp}
		minusp[i] = c;
      dc:	0000000c 	andeq	r0, r0, ip
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
      e0:	0000001c 	andeq	r0, r0, ip, lsl r0
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
      e4:	00000000 	andeq	r0, r0, r0

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
      e8:	08000bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp}
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
      ec:	000000a8 	andeq	r0, r0, r8, lsr #1
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
      f0:	40100e41 	andsmi	r0, r0, r1, asr #28
      f4:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
      f8:	02854003 	addeq	r4, r5, #3
      fc:	00018e40 	andeq	r8, r1, r0, asr #28
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     100:	0000001c 	andeq	r0, r0, ip, lsl r0

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
     104:	00000000 	andeq	r0, r0, r0
     108:	08000c98 	stmdaeq	r0, {r3, r4, r7, sl, fp}
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     10c:	00000074 	andeq	r0, r0, r4, ror r0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
     110:	40100e41 	andsmi	r0, r0, r1, asr #28
     114:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
     118:	02854003 	addeq	r4, r5, #3
     11c:	00018e40 	andeq	r8, r1, r0, asr #28
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     120:	0000000c 	andeq	r0, r0, ip
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
     124:	00000000 	andeq	r0, r0, r0
     128:	08000d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp}
		fprime_copy(plusa, r);
		fprime_add(plusa, a, modulus);

		fprime_select(r, r, plusa, bit);
	}
}
     12c:	0000000c 	andeq	r0, r0, ip

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
     130:	0000000c 	andeq	r0, r0, ip
	i <<= 3;

	while (x) {
     134:	00000000 	andeq	r0, r0, r0
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
     138:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
     13c:	0000000c 	andeq	r0, r0, ip
	f25519_mul__distinct(x3, a, a);

	f25519_mul_c(a, x1z1, 486662);
	f25519_add(a, x1sq, a);
	f25519_add(a, z1sq, a);
	f25519_mul__distinct(x1sq, x1z1, a);
     140:	0000000c 	andeq	r0, r0, ip
	f25519_mul_c(z3, x1sq, 4);
     144:	00000000 	andeq	r0, r0, r0
     148:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	00000020 	andeq	r0, r0, r0, lsr #32
     150:	0000000c 	andeq	r0, r0, ip
     154:	00000000 	andeq	r0, r0, r0
	f25519_sub(b, x3, z3); /* D */
     158:	08000d44 	stmdaeq	r0, {r2, r6, r8, sl, fp}
     15c:	0000000c 	andeq	r0, r0, ip
	f25519_mul__distinct(da, a, b);
     160:	00000018 	andeq	r0, r0, r8, lsl r0
     164:	00000000 	andeq	r0, r0, r0
     168:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}

	f25519_sub(b, x2, z2);
     16c:	00000028 	andeq	r0, r0, r8, lsr #32
     170:	40080e41 	andmi	r0, r8, r1, asr #28
	f25519_add(a, x3, z3); /* C */
     174:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
     178:	00000001 	andeq	r0, r0, r1
     17c:	00000024 	andeq	r0, r0, r4, lsr #32
	f25519_mul__distinct(cb, a, b);
     180:	00000000 	andeq	r0, r0, r0
     184:	08000d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp}

	f25519_add(a, da, cb);
     188:	0000008c 	andeq	r0, r0, ip, lsl #1
     18c:	40180e42 	andsmi	r0, r8, r2, asr #28
     190:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
	f25519_mul__distinct(b, a, a);
     194:	04864005 	streq	r4, [r6], #5
     198:	40038740 	andmi	r8, r3, r0, asr #14
	f25519_mul__distinct(x5, z1, b);
     19c:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     1a0:	200e4101 	andcs	r4, lr, r1, lsl #2
     1a4:	0000001c 	andeq	r0, r0, ip, lsl r0

	f25519_sub(a, da, cb);
     1a8:	00000000 	andeq	r0, r0, r0
     1ac:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
	f25519_mul__distinct(b, a, a);
     1b0:	00000070 	andeq	r0, r0, r0, ror r0
     1b4:	400c0e41 	andmi	r0, ip, r1, asr #28
     1b8:	85400384 	strbhi	r0, [r0, #-900]	; 0x384

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	018e4002 	orreq	r4, lr, r2
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	00180e42 	andseq	r0, r8, r2, asr #28
     1c4:	00000018 	andeq	r0, r0, r8, lsl r0

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	00000000 	andeq	r0, r0, r0
     1cc:	08000e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp}
     1d0:	00000038 	andeq	r0, r0, r8, lsr r0
     1d4:	40080e45 	andmi	r0, r8, r5, asr #28
		f25519_select(zm1, zm1, zm, bit);
     1d8:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     1dc:	00000001 	andeq	r0, r0, r1
     1e0:	0000000c 	andeq	r0, r0, ip
	...
		f25519_select(xm, xm, xms, bit);
     1ec:	00000004 	andeq	r0, r0, r4
		f25519_select(zm, zm, zms, bit);
     1f0:	0000000c 	andeq	r0, r0, ip
	...
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     200:	0000000c 	andeq	r0, r0, ip
	...
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
	f25519_mul__distinct(result, zm1, xm);
     20c:	00000018 	andeq	r0, r0, r8, lsl r0
     210:	00000014 	andeq	r0, r0, r4, lsl r0
	f25519_normalize(result);
     214:	00000000 	andeq	r0, r0, r0
     218:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
}
     21c:	000000c8 	andeq	r0, r0, r8, asr #1
     220:	40040e43 	andmi	r0, r4, r3, asr #28
     224:	00000184 	andeq	r0, r0, r4, lsl #3
     228:	00000024 	andeq	r0, r0, r4, lsr #32
	...
     234:	00000048 	andeq	r0, r0, r8, asr #32
     238:	40180e42 	andsmi	r0, r8, r2, asr #28
     23c:	84400683 	strbhi	r0, [r0], #-1667	; 0x683
     240:	04854005 	streq	r4, [r5], #5
     244:	40038640 	andmi	r8, r3, r0, asr #12
     248:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     24c:	00000001 	andeq	r0, r0, r1
     250:	00000018 	andeq	r0, r0, r8, lsl r0
	...
     25c:	0000003c 	andeq	r0, r0, ip, lsr r0
     260:	40080e43 	andmi	r0, r8, r3, asr #28
     264:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     268:	00000001 	andeq	r0, r0, r1
     26c:	00000018 	andeq	r0, r0, r8, lsl r0
     270:	00000000 	andeq	r0, r0, r0
     274:	08000f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp}
     278:	0000001c 	andeq	r0, r0, ip, lsl r0
     27c:	40040e41 	andmi	r0, r4, r1, asr #28
     280:	0e42018e 	dvfeqd	f0, f2, #0.5
     284:	00000010 	andeq	r0, r0, r0, lsl r0
     288:	00000018 	andeq	r0, r0, r8, lsl r0
     28c:	00000000 	andeq	r0, r0, r0
     290:	08000f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp}
     294:	00000016 	andeq	r0, r0, r6, lsl r0
     298:	40040e41 	andmi	r0, r4, r1, asr #28
     29c:	0e41018e 	dvfeqd	f0, f1, #0.5
     2a0:	00000010 	andeq	r0, r0, r0, lsl r0
     2a4:	00000024 	andeq	r0, r0, r4, lsr #32
     2a8:	00000000 	andeq	r0, r0, r0
     2ac:	08000fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp}
     2b0:	000000e4 	andeq	r0, r0, r4, ror #1
     2b4:	40180e41 	andsmi	r0, r8, r1, asr #28
     2b8:	84400683 	strbhi	r0, [r0], #-1667	; 0x683
     2bc:	04854005 	streq	r4, [r5], #5
     2c0:	40038640 	andmi	r8, r3, r0, asr #12
     2c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     2c8:	00000001 	andeq	r0, r0, r1
     2cc:	0000000c 	andeq	r0, r0, ip
	...
     2d8:	0000000c 	andeq	r0, r0, ip
     2dc:	0000000c 	andeq	r0, r0, ip
     2e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     2e4:	7c020001 	stcvc	0, cr0, [r2], {1}
     2e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     2f0:	000002dc 	ldrdeq	r0, [r0], -ip
     2f4:	0800108c 	stmdaeq	r0, {r2, r3, r7, ip}
     2f8:	00000028 	andeq	r0, r0, r8, lsr #32
     2fc:	40100e41 	andsmi	r0, r0, r1, asr #28
     300:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
     304:	02854003 	addeq	r4, r5, #3
     308:	00018e40 	andeq	r8, r1, r0, asr #28
     30c:	0000001c 	andeq	r0, r0, ip, lsl r0
     310:	000002dc 	ldrdeq	r0, [r0], -ip
     314:	080010b4 	stmdaeq	r0, {r2, r4, r5, r7, ip}
     318:	00000138 	andeq	r0, r0, r8, lsr r1
     31c:	400c0e41 	andmi	r0, ip, r1, asr #28
     320:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     324:	018e4002 	orreq	r4, lr, r2
     328:	00180e41 	andseq	r0, r8, r1, asr #28
     32c:	0000000c 	andeq	r0, r0, ip
     330:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     334:	7c020001 	stcvc	0, cr0, [r2], {1}
     338:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     33c:	0000000c 	andeq	r0, r0, ip
     340:	0000032c 	andeq	r0, r0, ip, lsr #6
     344:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
     348:	00000016 	andeq	r0, r0, r6, lsl r0
     34c:	0000000c 	andeq	r0, r0, ip
     350:	0000032c 	andeq	r0, r0, ip, lsr #6
     354:	08001204 	stmdaeq	r0, {r2, r9, ip}
     358:	00000012 	andeq	r0, r0, r2, lsl r0
     35c:	0000001c 	andeq	r0, r0, ip, lsl r0
     360:	0000032c 	andeq	r0, r0, ip, lsr #6
     364:	08001218 	stmdaeq	r0, {r3, r4, r9, ip}
     368:	00000060 	andeq	r0, r0, r0, rrx
     36c:	40100e41 	andsmi	r0, r0, r1, asr #28
     370:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     374:	02864003 	addeq	r4, r6, #3
     378:	00018740 	andeq	r8, r1, r0, asr #14
     37c:	0000000c 	andeq	r0, r0, ip
     380:	0000032c 	andeq	r0, r0, ip, lsr #6
     384:	00000000 	andeq	r0, r0, r0
     388:	0000000a 	andeq	r0, r0, sl
     38c:	0000000c 	andeq	r0, r0, ip
     390:	0000032c 	andeq	r0, r0, ip, lsr #6
     394:	00000000 	andeq	r0, r0, r0
     398:	00000016 	andeq	r0, r0, r6, lsl r0
     39c:	0000001c 	andeq	r0, r0, ip, lsl r0
     3a0:	0000032c 	andeq	r0, r0, ip, lsr #6
     3a4:	00000000 	andeq	r0, r0, r0
     3a8:	00000038 	andeq	r0, r0, r8, lsr r0
     3ac:	40080e41 	andmi	r0, r8, r1, asr #28
     3b0:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     3b4:	d00e4101 	andle	r4, lr, r1, lsl #2
     3b8:	00000001 	andeq	r0, r0, r1
     3bc:	00000028 	andeq	r0, r0, r8, lsr #32
     3c0:	0000032c 	andeq	r0, r0, ip, lsr #6
     3c4:	08001278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip}
     3c8:	00000044 	andeq	r0, r0, r4, asr #32
     3cc:	40100e41 	andsmi	r0, r0, r1, asr #28
     3d0:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
     3d4:	02824003 	addeq	r4, r2, #3
     3d8:	41018340 	tstmi	r1, r0, asr #6
     3dc:	8440180e 	strbhi	r1, [r0], #-2062	; 0x80e
     3e0:	058e4006 	streq	r4, [lr, #6]
     3e4:	01e80e41 	mvneq	r0, r1, asr #28
     3e8:	00000020 	andeq	r0, r0, r0, lsr #32
     3ec:	0000032c 	andeq	r0, r0, ip, lsr #6
     3f0:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
     3f4:	00000088 	andeq	r0, r0, r8, lsl #1
     3f8:	40100e41 	andsmi	r0, r0, r1, asr #28
     3fc:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     400:	02864003 	addeq	r4, r6, #3
     404:	42018e40 	andmi	r8, r1, #64, 28	; 0x400
     408:	0000280e 	andeq	r2, r0, lr, lsl #16
     40c:	00000014 	andeq	r0, r0, r4, lsl r0
     410:	0000032c 	andeq	r0, r0, ip, lsr #6
     414:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
     418:	00000050 	andeq	r0, r0, r0, asr r0
     41c:	40040e44 	andmi	r0, r4, r4, asr #28
     420:	00000184 	andeq	r0, r0, r4, lsl #3
     424:	0000000c 	andeq	r0, r0, ip
     428:	0000032c 	andeq	r0, r0, ip, lsr #6
     42c:	08001394 	stmdaeq	r0, {r2, r4, r7, r8, r9, ip}
     430:	0000006c 	andeq	r0, r0, ip, rrx
     434:	0000000c 	andeq	r0, r0, ip
     438:	0000032c 	andeq	r0, r0, ip, lsr #6
     43c:	08001400 	stmdaeq	r0, {sl, ip}
     440:	00000014 	andeq	r0, r0, r4, lsl r0
     444:	0000000c 	andeq	r0, r0, ip
     448:	0000032c 	andeq	r0, r0, ip, lsr #6
     44c:	08001414 	stmdaeq	r0, {r2, r4, sl, ip}
     450:	00000020 	andeq	r0, r0, r0, lsr #32
     454:	0000000c 	andeq	r0, r0, ip
     458:	0000032c 	andeq	r0, r0, ip, lsr #6
     45c:	08001434 	stmdaeq	r0, {r2, r4, r5, sl, ip}
     460:	00000028 	andeq	r0, r0, r8, lsr #32
     464:	00000024 	andeq	r0, r0, r4, lsr #32
     468:	0000032c 	andeq	r0, r0, ip, lsr #6
     46c:	0800145c 	stmdaeq	r0, {r2, r3, r4, r6, sl, ip}
     470:	00000178 	andeq	r0, r0, r8, ror r1
     474:	40140e41 	andsmi	r0, r4, r1, asr #28
     478:	85400584 	strbhi	r0, [r0, #-1412]	; 0x584
     47c:	03864004 	orreq	r4, r6, #4
     480:	40028740 	andmi	r8, r2, r0, asr #14
     484:	0e41018e 	dvfeqd	f0, f1, #0.5
     488:	000003a8 	andeq	r0, r0, r8, lsr #7
     48c:	00000018 	andeq	r0, r0, r8, lsl r0
     490:	0000032c 	andeq	r0, r0, ip, lsr #6
     494:	00000000 	andeq	r0, r0, r0
     498:	00000018 	andeq	r0, r0, r8, lsl r0
     49c:	40080e42 	andmi	r0, r8, r2, asr #28
     4a0:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
     4a4:	00000001 	andeq	r0, r0, r1
     4a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     4ac:	0000032c 	andeq	r0, r0, ip, lsr #6
     4b0:	080015d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, ip}
     4b4:	000000a8 	andeq	r0, r0, r8, lsr #1
     4b8:	40100e43 	andsmi	r0, r0, r3, asr #28
     4bc:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     4c0:	02864003 	addeq	r4, r6, #3
     4c4:	00018e40 	andeq	r8, r1, r0, asr #28
     4c8:	00000014 	andeq	r0, r0, r4, lsl r0
     4cc:	0000032c 	andeq	r0, r0, ip, lsr #6
     4d0:	00000000 	andeq	r0, r0, r0
     4d4:	00000034 	andeq	r0, r0, r4, lsr r0
     4d8:	40040e42 	andmi	r0, r4, r2, asr #28
     4dc:	00000184 	andeq	r0, r0, r4, lsl #3
     4e0:	00000018 	andeq	r0, r0, r8, lsl r0
     4e4:	0000032c 	andeq	r0, r0, ip, lsr #6
     4e8:	00000000 	andeq	r0, r0, r0
     4ec:	00000068 	andeq	r0, r0, r8, rrx
     4f0:	40080e44 	andmi	r0, r8, r4, asr #28
     4f4:	85400284 	strbhi	r0, [r0, #-644]	; 0x284
     4f8:	00000001 	andeq	r0, r0, r1
     4fc:	00000014 	andeq	r0, r0, r4, lsl r0
     500:	0000032c 	andeq	r0, r0, ip, lsr #6
     504:	0800167c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip}
     508:	00000070 	andeq	r0, r0, r0, ror r0
     50c:	40040e42 	andmi	r0, r4, r2, asr #28
     510:	00000184 	andeq	r0, r0, r4, lsl #3
     514:	0000000c 	andeq	r0, r0, ip
     518:	0000032c 	andeq	r0, r0, ip, lsr #6
     51c:	080016ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, ip}
     520:	00000028 	andeq	r0, r0, r8, lsr #32
     524:	0000000c 	andeq	r0, r0, ip
     528:	0000032c 	andeq	r0, r0, ip, lsr #6
     52c:	08001714 	stmdaeq	r0, {r2, r4, r8, r9, sl, ip}
     530:	00000014 	andeq	r0, r0, r4, lsl r0
     534:	00000014 	andeq	r0, r0, r4, lsl r0
     538:	0000032c 	andeq	r0, r0, ip, lsr #6
     53c:	08001728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip}
     540:	00000040 	andeq	r0, r0, r0, asr #32
     544:	40040e44 	andmi	r0, r4, r4, asr #28
     548:	00000184 	andeq	r0, r0, r4, lsl #3
     54c:	00000024 	andeq	r0, r0, r4, lsr #32
     550:	0000032c 	andeq	r0, r0, ip, lsr #6
     554:	00000000 	andeq	r0, r0, r0
     558:	00000060 	andeq	r0, r0, r0, rrx
     55c:	40180e42 	andsmi	r0, r8, r2, asr #28
     560:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     564:	04864005 	streq	r4, [r6], #5
     568:	40038740 	andmi	r8, r3, r0, asr #14
     56c:	89400288 	stmdbhi	r0, {r3, r7, r9}^
     570:	00000001 	andeq	r0, r0, r1
     574:	00000018 	andeq	r0, r0, r8, lsl r0
     578:	0000032c 	andeq	r0, r0, ip, lsr #6
     57c:	08001768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip}
     580:	00000058 	andeq	r0, r0, r8, asr r0
     584:	40080e41 	andmi	r0, r8, r1, asr #28
     588:	85400284 	strbhi	r0, [r0, #-644]	; 0x284
     58c:	100e4201 	andne	r4, lr, r1, lsl #4
     590:	0000000c 	andeq	r0, r0, ip
     594:	0000032c 	andeq	r0, r0, ip, lsr #6
     598:	080017c0 	stmdaeq	r0, {r6, r7, r8, r9, sl, ip}
     59c:	0000000c 	andeq	r0, r0, ip
     5a0:	0000000c 	andeq	r0, r0, ip
     5a4:	0000032c 	andeq	r0, r0, ip, lsr #6
     5a8:	080017cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, ip}
     5ac:	00000018 	andeq	r0, r0, r8, lsl r0
     5b0:	0000000c 	andeq	r0, r0, ip
     5b4:	0000032c 	andeq	r0, r0, ip, lsr #6
     5b8:	080017e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, ip}
     5bc:	00000012 	andeq	r0, r0, r2, lsl r0
     5c0:	0000000c 	andeq	r0, r0, ip
     5c4:	0000032c 	andeq	r0, r0, ip, lsr #6
     5c8:	080017f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, ip}
     5cc:	00000010 	andeq	r0, r0, r0, lsl r0
     5d0:	0000000c 	andeq	r0, r0, ip
     5d4:	0000032c 	andeq	r0, r0, ip, lsr #6
     5d8:	08001808 	stmdaeq	r0, {r3, fp, ip}
     5dc:	00000018 	andeq	r0, r0, r8, lsl r0
     5e0:	0000000c 	andeq	r0, r0, ip
     5e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     5e8:	7c020001 	stcvc	0, cr0, [r2], {1}
     5ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     5f0:	00000030 	andeq	r0, r0, r0, lsr r0
     5f4:	000005e0 	andeq	r0, r0, r0, ror #11
     5f8:	08001820 	stmdaeq	r0, {r5, fp, ip}
     5fc:	000000a0 	andeq	r0, r0, r0, lsr #1
     600:	40280e42 	eormi	r0, r8, r2, asr #28
     604:	84400a83 	strbhi	r0, [r0], #-2691	; 0xa83
     608:	08854009 	stmeq	r5, {r0, r3, lr}
     60c:	40078640 	andmi	r8, r7, r0, asr #12
     610:	88400687 	stmdahi	r0, {r0, r1, r2, r7, r9, sl}^
     614:	04894005 	streq	r4, [r9], #5
     618:	40038a40 	andmi	r8, r3, r0, asr #20
     61c:	8e40028b 	cdphi	2, 4, cr0, cr0, cr11, {4}
     620:	00000001 	andeq	r0, r0, r1
     624:	00000030 	andeq	r0, r0, r0, lsr r0
     628:	000005e0 	andeq	r0, r0, r0, ror #11
     62c:	080018c0 	stmdaeq	r0, {r6, r7, fp, ip}
     630:	000003a0 	andeq	r0, r0, r0, lsr #7
     634:	40240e43 	eormi	r0, r4, r3, asr #28
     638:	85400984 	strbhi	r0, [r0, #-2436]	; 0x984
     63c:	07864008 	streq	r4, [r6, r8]
     640:	40068740 	andmi	r8, r6, r0, asr #14
     644:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
     648:	038a4004 	orreq	r4, sl, #4
     64c:	40028b40 	andmi	r8, r2, r0, asr #22
     650:	0e48018e 	dvfeq<illegal precision>	f0, f0, #0.5
     654:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     658:	00000018 	andeq	r0, r0, r8, lsl r0
     65c:	000005e0 	andeq	r0, r0, r0, ror #11
     660:	08001c60 	stmdaeq	r0, {r5, r6, sl, fp, ip}
     664:	00000044 	andeq	r0, r0, r4, asr #32
     668:	40080e41 	andmi	r0, r8, r1, asr #28
     66c:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
     670:	00000001 	andeq	r0, r0, r1
     674:	0000000c 	andeq	r0, r0, ip
     678:	000005e0 	andeq	r0, r0, r0, ror #11
     67c:	00000000 	andeq	r0, r0, r0
     680:	00000002 	andeq	r0, r0, r2
     684:	0000000c 	andeq	r0, r0, ip
     688:	000005e0 	andeq	r0, r0, r0, ror #11
     68c:	08001ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, ip}
     690:	00000018 	andeq	r0, r0, r8, lsl r0
     694:	0000000c 	andeq	r0, r0, ip
     698:	000005e0 	andeq	r0, r0, r0, ror #11
     69c:	08001cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip}
     6a0:	00000018 	andeq	r0, r0, r8, lsl r0
     6a4:	00000014 	andeq	r0, r0, r4, lsl r0
     6a8:	000005e0 	andeq	r0, r0, r0, ror #11
     6ac:	08001cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, ip}
     6b0:	00000034 	andeq	r0, r0, r4, lsr r0
     6b4:	40040e41 	andmi	r0, r4, r1, asr #28
     6b8:	00000184 	andeq	r0, r0, r4, lsl #3
     6bc:	0000000c 	andeq	r0, r0, ip
     6c0:	000005e0 	andeq	r0, r0, r0, ror #11
     6c4:	08001d08 	stmdaeq	r0, {r3, r8, sl, fp, ip}
     6c8:	00000034 	andeq	r0, r0, r4, lsr r0
     6cc:	00000028 	andeq	r0, r0, r8, lsr #32
     6d0:	000005e0 	andeq	r0, r0, r0, ror #11
     6d4:	00000000 	andeq	r0, r0, r0
     6d8:	0000009c 	muleq	r0, ip, r0
     6dc:	40200e42 	eormi	r0, r0, r2, asr #28
     6e0:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     6e4:	06864007 	streq	r4, [r6], r7
     6e8:	40058740 	andmi	r8, r5, r0, asr #14
     6ec:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     6f0:	028a4003 	addeq	r4, sl, #3
     6f4:	00018e40 	andeq	r8, r1, r0, asr #28
     6f8:	0000000c 	andeq	r0, r0, ip
     6fc:	000005e0 	andeq	r0, r0, r0, ror #11
     700:	00000000 	andeq	r0, r0, r0
     704:	0000000c 	andeq	r0, r0, ip
     708:	0000000c 	andeq	r0, r0, ip
     70c:	000005e0 	andeq	r0, r0, r0, ror #11
     710:	00000000 	andeq	r0, r0, r0
     714:	0000000c 	andeq	r0, r0, ip
     718:	0000000c 	andeq	r0, r0, ip
     71c:	000005e0 	andeq	r0, r0, r0, ror #11
     720:	08001d3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, fp, ip}
     724:	0000000c 	andeq	r0, r0, ip
     728:	0000000c 	andeq	r0, r0, ip
     72c:	000005e0 	andeq	r0, r0, r0, ror #11
     730:	00000000 	andeq	r0, r0, r0
     734:	0000001c 	andeq	r0, r0, ip, lsl r0
     738:	0000000c 	andeq	r0, r0, ip
     73c:	000005e0 	andeq	r0, r0, r0, ror #11
     740:	08001d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, ip}
     744:	00000002 	andeq	r0, r0, r2
     748:	0000000c 	andeq	r0, r0, ip
     74c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     750:	7c020001 	stcvc	0, cr0, [r2], {1}
     754:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     758:	00000028 	andeq	r0, r0, r8, lsr #32
     75c:	00000748 	andeq	r0, r0, r8, asr #14
     760:	00000000 	andeq	r0, r0, r0
     764:	00000228 	andeq	r0, r0, r8, lsr #4
     768:	40180e42 	andsmi	r0, r8, r2, asr #28
     76c:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     770:	04864005 	streq	r4, [r6], #5
     774:	40038740 	andmi	r8, r3, r0, asr #14
     778:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     77c:	d80e4201 	stmdale	lr, {r0, r9, lr}
     780:	00000002 	andeq	r0, r0, r2
     784:	0000000c 	andeq	r0, r0, ip
     788:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     78c:	7c020001 	stcvc	0, cr0, [r2], {1}
     790:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     794:	00000024 	andeq	r0, r0, r4, lsr #32
     798:	00000784 	andeq	r0, r0, r4, lsl #15
     79c:	08001d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, ip}
     7a0:	00000070 	andeq	r0, r0, r0, ror r0
     7a4:	40180e41 	andsmi	r0, r8, r1, asr #28
     7a8:	84400683 	strbhi	r0, [r0], #-1667	; 0x683
     7ac:	04854005 	streq	r4, [r5], #5
     7b0:	40038640 	andmi	r8, r3, r0, asr #12
     7b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7b8:	00000001 	andeq	r0, r0, r1
     7bc:	00000020 	andeq	r0, r0, r0, lsr #32
     7c0:	00000784 	andeq	r0, r0, r4, lsl #15
     7c4:	08001dbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, fp, ip}
     7c8:	0000003a 	andeq	r0, r0, sl, lsr r0
     7cc:	40100e41 	andsmi	r0, r0, r1, asr #28
     7d0:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     7d4:	02864003 	addeq	r4, r6, #3
     7d8:	41018e40 	tstmi	r1, r0, asr #28
     7dc:	0000300e 	andeq	r3, r0, lr
     7e0:	00000024 	andeq	r0, r0, r4, lsr #32
     7e4:	00000784 	andeq	r0, r0, r4, lsl #15
     7e8:	08001df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp, ip}
     7ec:	0000005e 	andeq	r0, r0, lr, asr r0
     7f0:	40140e41 	andsmi	r0, r4, r1, asr #28
     7f4:	85400584 	strbhi	r0, [r0, #-1412]	; 0x584
     7f8:	03864004 	orreq	r4, r6, #4
     7fc:	40028740 	andmi	r8, r2, r0, asr #14
     800:	0e44018e 	dvfeqd	f0, f4, #0.5
     804:	00000038 	andeq	r0, r0, r8, lsr r0
     808:	00000024 	andeq	r0, r0, r4, lsr #32
     80c:	00000784 	andeq	r0, r0, r4, lsl #15
     810:	08001e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip}
     814:	000000c8 	andeq	r0, r0, r8, asr #1
     818:	40180e42 	andsmi	r0, r8, r2, asr #28
     81c:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     820:	04864005 	streq	r4, [r6], #5
     824:	40038740 	andmi	r8, r3, r0, asr #14
     828:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     82c:	780e5301 	stmdavc	lr, {r0, r8, r9, ip, lr}
     830:	00000028 	andeq	r0, r0, r8, lsr #32
     834:	00000784 	andeq	r0, r0, r4, lsl #15
     838:	08001f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip}
     83c:	000000e0 	andeq	r0, r0, r0, ror #1
     840:	40180e42 	andsmi	r0, r8, r2, asr #28
     844:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     848:	04864005 	streq	r4, [r6], #5
     84c:	40038740 	andmi	r8, r3, r0, asr #14
     850:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     854:	980e4201 	stmdals	lr, {r0, r9, lr}
     858:	00000002 	andeq	r0, r0, r2
     85c:	00000020 	andeq	r0, r0, r0, lsr #32
     860:	00000784 	andeq	r0, r0, r4, lsl #15
     864:	08002000 	stmdaeq	r0, {sp}
     868:	000000b4 	strheq	r0, [r0], -r4
     86c:	40100e41 	andsmi	r0, r0, r1, asr #28
     870:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     874:	02864003 	addeq	r4, r6, #3
     878:	41018e40 	tstmi	r1, r0, asr #28
     87c:	0001f00e 	andeq	pc, r1, lr
     880:	00000028 	andeq	r0, r0, r8, lsr #32
     884:	00000784 	andeq	r0, r0, r4, lsl #15
     888:	080020b4 	stmdaeq	r0, {r2, r4, r5, r7, sp}
     88c:	00000084 	andeq	r0, r0, r4, lsl #1
     890:	40180e42 	andsmi	r0, r8, r2, asr #28
     894:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     898:	04864005 	streq	r4, [r6], #5
     89c:	40038740 	andmi	r8, r3, r0, asr #14
     8a0:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     8a4:	980e4101 	stmdals	lr, {r0, r8, lr}
     8a8:	00000002 	andeq	r0, r0, r2
     8ac:	0000000c 	andeq	r0, r0, ip
     8b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     8b4:	7c020001 	stcvc	0, cr0, [r2], {1}
     8b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     8bc:	00000024 	andeq	r0, r0, r4, lsr #32
     8c0:	000008ac 	andeq	r0, r0, ip, lsr #17
     8c4:	00000000 	andeq	r0, r0, r0
     8c8:	0000007c 	andeq	r0, r0, ip, ror r0
     8cc:	40140e41 	andsmi	r0, r4, r1, asr #28
     8d0:	85400584 	strbhi	r0, [r0, #-1412]	; 0x584
     8d4:	03864004 	orreq	r4, r6, #4
     8d8:	40028740 	andmi	r8, r2, r0, asr #14
     8dc:	0e42018e 	dvfeqd	f0, f2, #0.5
     8e0:	00000298 	muleq	r0, r8, r2
     8e4:	00000028 	andeq	r0, r0, r8, lsr #32
     8e8:	000008ac 	andeq	r0, r0, ip, lsr #17
     8ec:	08002138 	stmdaeq	r0, {r3, r4, r5, r8, sp}
     8f0:	0000017c 	andeq	r0, r0, ip, ror r1
     8f4:	401c0e42 	andsmi	r0, ip, r2, asr #28
     8f8:	85400784 	strbhi	r0, [r0, #-1924]	; 0x784
     8fc:	05864006 	streq	r4, [r6, #6]
     900:	40048740 	andmi	r8, r4, r0, asr #14
     904:	89400388 	stmdbhi	r0, {r3, r7, r8, r9}^
     908:	018e4002 	orreq	r4, lr, r2
     90c:	03c00e43 	biceq	r0, r0, #1072	; 0x430
     910:	0000000c 	andeq	r0, r0, ip
     914:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     918:	7c020001 	stcvc	0, cr0, [r2], {1}
     91c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     920:	00000014 	andeq	r0, r0, r4, lsl r0
     924:	00000910 	andeq	r0, r0, r0, lsl r9
     928:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
     92c:	0000001e 	andeq	r0, r0, lr, lsl r0
     930:	40040e41 	andmi	r0, r4, r1, asr #28
     934:	00000184 	andeq	r0, r0, r4, lsl #3
     938:	00000018 	andeq	r0, r0, r8, lsl r0
     93c:	00000910 	andeq	r0, r0, r0, lsl r9
     940:	080022d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sp}
     944:	0000006e 	andeq	r0, r0, lr, rrx
     948:	40040e41 	andmi	r0, r4, r1, asr #28
     94c:	0e420184 	dvfeqd	f0, f2, f4
     950:	00000028 	andeq	r0, r0, r8, lsr #32
     954:	0000001c 	andeq	r0, r0, ip, lsl r0
     958:	00000910 	andeq	r0, r0, r0, lsl r9
     95c:	08002344 	stmdaeq	r0, {r2, r6, r8, r9, sp}
     960:	0000009a 	muleq	r0, sl, r0
     964:	40100e44 	andsmi	r0, r0, r4, asr #28
     968:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     96c:	02864003 	addeq	r4, r6, #3
     970:	00018740 	andeq	r8, r1, r0, asr #14
     974:	0000001c 	andeq	r0, r0, ip, lsl r0
     978:	00000910 	andeq	r0, r0, r0, lsl r9
     97c:	080023e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sp}
     980:	000000c2 	andeq	r0, r0, r2, asr #1
     984:	40100e41 	andsmi	r0, r0, r1, asr #28
     988:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     98c:	02864003 	addeq	r4, r6, #3
     990:	00018740 	andeq	r8, r1, r0, asr #14
     994:	00000018 	andeq	r0, r0, r8, lsl r0
     998:	00000910 	andeq	r0, r0, r0, lsl r9
     99c:	080024a4 	stmdaeq	r0, {r2, r5, r7, sl, sp}
     9a0:	00000046 	andeq	r0, r0, r6, asr #32
     9a4:	400c0e42 	andmi	r0, ip, r2, asr #28
     9a8:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     9ac:	01864002 	orreq	r4, r6, r2
     9b0:	00000018 	andeq	r0, r0, r8, lsl r0
     9b4:	00000910 	andeq	r0, r0, r0, lsl r9
     9b8:	080024ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, sp}
     9bc:	0000004c 	andeq	r0, r0, ip, asr #32
     9c0:	400c0e41 	andmi	r0, ip, r1, asr #28
     9c4:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     9c8:	01864002 	orreq	r4, r6, r2
     9cc:	00000014 	andeq	r0, r0, r4, lsl r0
     9d0:	00000910 	andeq	r0, r0, r0, lsl r9
     9d4:	08002538 	stmdaeq	r0, {r3, r4, r5, r8, sl, sp}
     9d8:	00000046 	andeq	r0, r0, r6, asr #32
     9dc:	40040e41 	andmi	r0, r4, r1, asr #28
     9e0:	00000184 	andeq	r0, r0, r4, lsl #3
     9e4:	00000024 	andeq	r0, r0, r4, lsr #32
     9e8:	00000910 	andeq	r0, r0, r0, lsl r9
     9ec:	08002580 	stmdaeq	r0, {r7, r8, sl, sp}
     9f0:	00000088 	andeq	r0, r0, r8, lsl #1
     9f4:	40180e42 	andsmi	r0, r8, r2, asr #28
     9f8:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     9fc:	04864005 	streq	r4, [r6], #5
     a00:	40038740 	andmi	r8, r3, r0, asr #14
     a04:	89400288 	stmdbhi	r0, {r3, r7, r9}^
     a08:	00000001 	andeq	r0, r0, r1
     a0c:	00000024 	andeq	r0, r0, r4, lsr #32
     a10:	00000910 	andeq	r0, r0, r0, lsl r9
     a14:	00000000 	andeq	r0, r0, r0
     a18:	000000b8 	strheq	r0, [r0], -r8
     a1c:	40180e42 	andsmi	r0, r8, r2, asr #28
     a20:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     a24:	04864005 	streq	r4, [r6], #5
     a28:	40038740 	andmi	r8, r3, r0, asr #14
     a2c:	89400288 	stmdbhi	r0, {r3, r7, r9}^
     a30:	380e4401 	stmdacc	lr, {r0, sl, lr}
     a34:	00000018 	andeq	r0, r0, r8, lsl r0
     a38:	00000910 	andeq	r0, r0, r0, lsl r9
     a3c:	00000000 	andeq	r0, r0, r0
     a40:	00000040 	andeq	r0, r0, r0, asr #32
     a44:	40080e42 	andmi	r0, r8, r2, asr #28
     a48:	85400284 	strbhi	r0, [r0, #-644]	; 0x284
     a4c:	00000001 	andeq	r0, r0, r1
     a50:	0000002c 	andeq	r0, r0, ip, lsr #32
     a54:	00000910 	andeq	r0, r0, r0, lsl r9
     a58:	08002608 	stmdaeq	r0, {r3, r9, sl, sp}
     a5c:	000005ea 	andeq	r0, r0, sl, ror #11
     a60:	40200e42 	eormi	r0, r0, r2, asr #28
     a64:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     a68:	06864007 	streq	r4, [r6], r7
     a6c:	40058740 	andmi	r8, r5, r0, asr #14
     a70:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     a74:	028a4003 	addeq	r4, sl, #3
     a78:	42018b40 	andmi	r8, r1, #64, 22	; 0x10000
     a7c:	0000400e 	andeq	r4, r0, lr
     a80:	0000001c 	andeq	r0, r0, ip, lsl r0
     a84:	00000910 	andeq	r0, r0, r0, lsl r9
     a88:	00000000 	andeq	r0, r0, r0
     a8c:	00000026 	andeq	r0, r0, r6, lsr #32
     a90:	400c0e41 	andmi	r0, ip, r1, asr #28
     a94:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     a98:	018e4002 	orreq	r4, lr, r2
     a9c:	00300e41 	eorseq	r0, r0, r1, asr #28
     aa0:	0000002c 	andeq	r0, r0, ip, lsr #32
     aa4:	00000910 	andeq	r0, r0, r0, lsl r9
     aa8:	08002bf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, fp, sp}
     aac:	00000634 	andeq	r0, r0, r4, lsr r6
     ab0:	40200e42 	eormi	r0, r0, r2, asr #28
     ab4:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     ab8:	06864007 	streq	r4, [r6], r7
     abc:	40058740 	andmi	r8, r5, r0, asr #14
     ac0:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     ac4:	028a4003 	addeq	r4, sl, #3
     ac8:	42018b40 	andmi	r8, r1, #64, 22	; 0x10000
     acc:	0001b00e 	andeq	fp, r1, lr
     ad0:	0000000c 	andeq	r0, r0, ip
     ad4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ad8:	7c020001 	stcvc	0, cr0, [r2], {1}
     adc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ae0:	00000014 	andeq	r0, r0, r4, lsl r0
     ae4:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     ae8:	00000000 	andeq	r0, r0, r0
     aec:	0000001e 	andeq	r0, r0, lr, lsl r0
     af0:	40040e41 	andmi	r0, r4, r1, asr #28
     af4:	00000184 	andeq	r0, r0, r4, lsl #3
     af8:	00000030 	andeq	r0, r0, r0, lsr r0
     afc:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     b00:	08003228 	stmdaeq	r0, {r3, r5, r9, ip, sp}
     b04:	000001a0 	andeq	r0, r0, r0, lsr #3
     b08:	40240e42 	eormi	r0, r4, r2, asr #28
     b0c:	85400984 	strbhi	r0, [r0, #-2436]	; 0x984
     b10:	07864008 	streq	r4, [r6, r8]
     b14:	40068740 	andmi	r8, r6, r0, asr #14
     b18:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
     b1c:	038a4004 	orreq	r4, sl, #4
     b20:	40028b40 	andmi	r8, r2, r0, asr #22
     b24:	0e42018e 	dvfeqd	f0, f2, #0.5
     b28:	00000050 	andeq	r0, r0, r0, asr r0
     b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b30:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     b34:	00000000 	andeq	r0, r0, r0
     b38:	0000002c 	andeq	r0, r0, ip, lsr #32
     b3c:	400c0e41 	andmi	r0, ip, r1, asr #28
     b40:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     b44:	018e4002 	orreq	r4, lr, r2
     b48:	00300e41 	eorseq	r0, r0, r1, asr #28
     b4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b50:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     b54:	00000000 	andeq	r0, r0, r0
     b58:	0000009a 	muleq	r0, sl, r0
     b5c:	40100e44 	andsmi	r0, r0, r4, asr #28
     b60:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     b64:	02864003 	addeq	r4, r6, #3
     b68:	00018740 	andeq	r8, r1, r0, asr #14
     b6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b70:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     b74:	00000000 	andeq	r0, r0, r0
     b78:	000000c2 	andeq	r0, r0, r2, asr #1
     b7c:	40100e41 	andsmi	r0, r0, r1, asr #28
     b80:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     b84:	02864003 	addeq	r4, r6, #3
     b88:	00018740 	andeq	r8, r1, r0, asr #14
     b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b90:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     b94:	00000000 	andeq	r0, r0, r0
     b98:	00000058 	andeq	r0, r0, r8, asr r0
     b9c:	400c0e41 	andmi	r0, ip, r1, asr #28
     ba0:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     ba4:	01864002 	orreq	r4, r6, r2
     ba8:	00300e42 	eorseq	r0, r0, r2, asr #28
     bac:	0000001c 	andeq	r0, r0, ip, lsl r0
     bb0:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     bb4:	00000000 	andeq	r0, r0, r0
     bb8:	0000008e 	andeq	r0, r0, lr, lsl #1
     bbc:	400c0e41 	andmi	r0, ip, r1, asr #28
     bc0:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     bc4:	01864002 	orreq	r4, r6, r2
     bc8:	00300e42 	eorseq	r0, r0, r2, asr #28
     bcc:	00000030 	andeq	r0, r0, r0, lsr r0
     bd0:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     bd4:	00000000 	andeq	r0, r0, r0
     bd8:	0000013e 	andeq	r0, r0, lr, lsr r1
     bdc:	40240e42 	eormi	r0, r4, r2, asr #28
     be0:	85400984 	strbhi	r0, [r0, #-2436]	; 0x984
     be4:	07864008 	streq	r4, [r6, r8]
     be8:	40068740 	andmi	r8, r6, r0, asr #14
     bec:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
     bf0:	038a4004 	orreq	r4, sl, #4
     bf4:	40028b40 	andmi	r8, r2, r0, asr #22
     bf8:	0e42018e 	dvfeqd	f0, f2, #0.5
     bfc:	00000068 	andeq	r0, r0, r8, rrx
     c00:	00000024 	andeq	r0, r0, r4, lsr #32
     c04:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     c08:	00000000 	andeq	r0, r0, r0
     c0c:	000000d2 	ldrdeq	r0, [r0], -r2
     c10:	40180e42 	andsmi	r0, r8, r2, asr #28
     c14:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     c18:	04864005 	streq	r4, [r6], #5
     c1c:	40038740 	andmi	r8, r3, r0, asr #14
     c20:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     c24:	580e4301 	stmdapl	lr, {r0, r8, r9, lr}
     c28:	0000000c 	andeq	r0, r0, ip
     c2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c30:	7c020001 	stcvc	0, cr0, [r2], {1}
     c34:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c38:	00000020 	andeq	r0, r0, r0, lsr #32
     c3c:	00000c28 	andeq	r0, r0, r8, lsr #24
     c40:	00000000 	andeq	r0, r0, r0
     c44:	00000040 	andeq	r0, r0, r0, asr #32
     c48:	40100e41 	andsmi	r0, r0, r1, asr #28
     c4c:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     c50:	02864003 	addeq	r4, r6, #3
     c54:	42018e40 	andmi	r8, r1, #64, 28	; 0x400
     c58:	0000500e 	andeq	r5, r0, lr
     c5c:	00000024 	andeq	r0, r0, r4, lsr #32
     c60:	00000c28 	andeq	r0, r0, r8, lsr #24
     c64:	00000000 	andeq	r0, r0, r0
     c68:	000000d4 	ldrdeq	r0, [r0], -r4
     c6c:	40180e42 	andsmi	r0, r8, r2, asr #28
     c70:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     c74:	04864005 	streq	r4, [r6], #5
     c78:	40038740 	andmi	r8, r3, r0, asr #14
     c7c:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     c80:	780e4201 	stmdavc	lr, {r0, r9, lr}
     c84:	0000000c 	andeq	r0, r0, ip
     c88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c8c:	7c020001 	stcvc	0, cr0, [r2], {1}
     c90:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c94:	00000020 	andeq	r0, r0, r0, lsr #32
     c98:	00000c84 	andeq	r0, r0, r4, lsl #25
     c9c:	080033c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, sp}
     ca0:	00000058 	andeq	r0, r0, r8, asr r0
     ca4:	40140e42 	andsmi	r0, r4, r2, asr #28
     ca8:	85400584 	strbhi	r0, [r0, #-1412]	; 0x584
     cac:	03864004 	orreq	r4, r6, #4
     cb0:	40028740 	andmi	r8, r2, r0, asr #14
     cb4:	00000188 	andeq	r0, r0, r8, lsl #3
     cb8:	0000002c 	andeq	r0, r0, ip, lsr #32
     cbc:	00000c84 	andeq	r0, r0, r4, lsl #25
     cc0:	08003420 	stmdaeq	r0, {r5, sl, ip, sp}
     cc4:	00001f64 	andeq	r1, r0, r4, ror #30
     cc8:	40200e42 	eormi	r0, r0, r2, asr #28
     ccc:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     cd0:	06864007 	streq	r4, [r6], r7
     cd4:	40058740 	andmi	r8, r5, r0, asr #14
     cd8:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     cdc:	028a4003 	addeq	r4, sl, #3
     ce0:	41018b40 	tstmi	r1, r0, asr #22
     ce4:	0001900e 	andeq	r9, r1, lr
     ce8:	00000024 	andeq	r0, r0, r4, lsr #32
     cec:	00000c84 	andeq	r0, r0, r4, lsl #25
     cf0:	08005384 	stmdaeq	r0, {r2, r7, r8, r9, ip, lr}
     cf4:	0000008e 	andeq	r0, r0, lr, lsl #1
     cf8:	40180e42 	andsmi	r0, r8, r2, asr #28
     cfc:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     d00:	04864005 	streq	r4, [r6], #5
     d04:	40038740 	andmi	r8, r3, r0, asr #14
     d08:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     d0c:	00000001 	andeq	r0, r0, r1
     d10:	00000030 	andeq	r0, r0, r0, lsr r0
     d14:	00000c84 	andeq	r0, r0, r4, lsl #25
     d18:	08005414 	stmdaeq	r0, {r2, r4, sl, ip, lr}
     d1c:	00000218 	andeq	r0, r0, r8, lsl r2
     d20:	40240e42 	eormi	r0, r4, r2, asr #28
     d24:	85400984 	strbhi	r0, [r0, #-2436]	; 0x984
     d28:	07864008 	streq	r4, [r6, r8]
     d2c:	40068740 	andmi	r8, r6, r0, asr #14
     d30:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
     d34:	038a4004 	orreq	r4, sl, #4
     d38:	40028b40 	andmi	r8, r2, r0, asr #22
     d3c:	0e46018e 	dvfeqd	f0, f6, #0.5
     d40:	00000030 	andeq	r0, r0, r0, lsr r0
     d44:	0000000c 	andeq	r0, r0, ip
     d48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d4c:	7c020001 	stcvc	0, cr0, [r2], {1}
     d50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d54:	0000002c 	andeq	r0, r0, ip, lsr #32
     d58:	00000d44 	andeq	r0, r0, r4, asr #26
     d5c:	0800562c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip, lr}
     d60:	00000494 	muleq	r0, r4, r4
     d64:	40200e42 	eormi	r0, r0, r2, asr #28
     d68:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     d6c:	06864007 	streq	r4, [r6], r7
     d70:	40058740 	andmi	r8, r5, r0, asr #14
     d74:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     d78:	028a4003 	addeq	r4, sl, #3
     d7c:	41018b40 	tstmi	r1, r0, asr #22
     d80:	0003b00e 	andeq	fp, r3, lr
     d84:	0000002c 	andeq	r0, r0, ip, lsr #32
     d88:	00000d44 	andeq	r0, r0, r4, asr #26
     d8c:	08005ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, lr}
     d90:	00000088 	andeq	r0, r0, r8, lsl #1
     d94:	40200e42 	eormi	r0, r0, r2, asr #28
     d98:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     d9c:	06864007 	streq	r4, [r6], r7
     da0:	40058740 	andmi	r8, r5, r0, asr #14
     da4:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     da8:	028a4003 	addeq	r4, sl, #3
     dac:	42018e40 	andmi	r8, r1, #64, 28	; 0x400
     db0:	0001a00e 	andeq	sl, r1, lr
     db4:	00000030 	andeq	r0, r0, r0, lsr r0
     db8:	00000d44 	andeq	r0, r0, r4, asr #26
     dbc:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
     dc0:	00000296 	muleq	r0, r6, r2
     dc4:	40240e42 	eormi	r0, r4, r2, asr #28
     dc8:	85400984 	strbhi	r0, [r0, #-2436]	; 0x984
     dcc:	07864008 	streq	r4, [r6, r8]
     dd0:	40068740 	andmi	r8, r6, r0, asr #14
     dd4:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
     dd8:	038a4004 	orreq	r4, sl, #4
     ddc:	40028b40 	andmi	r8, r2, r0, asr #22
     de0:	0e42018e 	dvfeqd	f0, f2, #0.5
     de4:	00000190 	muleq	r0, r0, r1
     de8:	0000000c 	andeq	r0, r0, ip
     dec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     df0:	7c020001 	stcvc	0, cr0, [r2], {1}
     df4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     df8:	0000000c 	andeq	r0, r0, ip
     dfc:	00000de8 	andeq	r0, r0, r8, ror #27
     e00:	00000000 	andeq	r0, r0, r0
     e04:	0000000c 	andeq	r0, r0, ip
     e08:	0000000c 	andeq	r0, r0, ip
     e0c:	00000de8 	andeq	r0, r0, r8, ror #27
     e10:	00000000 	andeq	r0, r0, r0
     e14:	0000000c 	andeq	r0, r0, ip
     e18:	0000000c 	andeq	r0, r0, ip
     e1c:	00000de8 	andeq	r0, r0, r8, ror #27
     e20:	00000000 	andeq	r0, r0, r0
     e24:	0000000c 	andeq	r0, r0, ip
     e28:	0000000c 	andeq	r0, r0, ip
     e2c:	00000de8 	andeq	r0, r0, r8, ror #27
     e30:	00000000 	andeq	r0, r0, r0
     e34:	0000000c 	andeq	r0, r0, ip
     e38:	0000000c 	andeq	r0, r0, ip
     e3c:	00000de8 	andeq	r0, r0, r8, ror #27
     e40:	00000000 	andeq	r0, r0, r0
     e44:	0000000c 	andeq	r0, r0, ip
     e48:	0000000c 	andeq	r0, r0, ip
     e4c:	00000de8 	andeq	r0, r0, r8, ror #27
     e50:	00000000 	andeq	r0, r0, r0
     e54:	0000000c 	andeq	r0, r0, ip
     e58:	0000000c 	andeq	r0, r0, ip
     e5c:	00000de8 	andeq	r0, r0, r8, ror #27
     e60:	00000000 	andeq	r0, r0, r0
     e64:	0000000c 	andeq	r0, r0, ip
     e68:	0000000c 	andeq	r0, r0, ip
     e6c:	00000de8 	andeq	r0, r0, r8, ror #27
     e70:	00000000 	andeq	r0, r0, r0
     e74:	00000010 	andeq	r0, r0, r0, lsl r0
     e78:	0000000c 	andeq	r0, r0, ip
     e7c:	00000de8 	andeq	r0, r0, r8, ror #27
     e80:	00000000 	andeq	r0, r0, r0
     e84:	0000000c 	andeq	r0, r0, ip
     e88:	0000000c 	andeq	r0, r0, ip
     e8c:	00000de8 	andeq	r0, r0, r8, ror #27
     e90:	00000000 	andeq	r0, r0, r0
     e94:	0000000e 	andeq	r0, r0, lr
     e98:	0000000c 	andeq	r0, r0, ip
     e9c:	00000de8 	andeq	r0, r0, r8, ror #27
     ea0:	00000000 	andeq	r0, r0, r0
     ea4:	00000010 	andeq	r0, r0, r0, lsl r0
     ea8:	0000000c 	andeq	r0, r0, ip
     eac:	00000de8 	andeq	r0, r0, r8, ror #27
     eb0:	00000000 	andeq	r0, r0, r0
     eb4:	0000001c 	andeq	r0, r0, ip, lsl r0
     eb8:	0000000c 	andeq	r0, r0, ip
     ebc:	00000de8 	andeq	r0, r0, r8, ror #27
     ec0:	00000000 	andeq	r0, r0, r0
     ec4:	00000012 	andeq	r0, r0, r2, lsl r0
     ec8:	0000000c 	andeq	r0, r0, ip
     ecc:	00000de8 	andeq	r0, r0, r8, ror #27
     ed0:	08005de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, ip, lr}
     ed4:	0000002a 	andeq	r0, r0, sl, lsr #32
     ed8:	0000000c 	andeq	r0, r0, ip
     edc:	00000de8 	andeq	r0, r0, r8, ror #27
     ee0:	00000000 	andeq	r0, r0, r0
     ee4:	0000002a 	andeq	r0, r0, sl, lsr #32
     ee8:	0000000c 	andeq	r0, r0, ip
     eec:	00000de8 	andeq	r0, r0, r8, ror #27
     ef0:	00000000 	andeq	r0, r0, r0
     ef4:	00000024 	andeq	r0, r0, r4, lsr #32
     ef8:	0000000c 	andeq	r0, r0, ip
     efc:	00000de8 	andeq	r0, r0, r8, ror #27
     f00:	00000000 	andeq	r0, r0, r0
     f04:	00000012 	andeq	r0, r0, r2, lsl r0
     f08:	0000000c 	andeq	r0, r0, ip
     f0c:	00000de8 	andeq	r0, r0, r8, ror #27
     f10:	00000000 	andeq	r0, r0, r0
     f14:	00000012 	andeq	r0, r0, r2, lsl r0
     f18:	0000000c 	andeq	r0, r0, ip
     f1c:	00000de8 	andeq	r0, r0, r8, ror #27
     f20:	00000000 	andeq	r0, r0, r0
     f24:	0000001e 	andeq	r0, r0, lr, lsl r0
     f28:	0000000c 	andeq	r0, r0, ip
     f2c:	00000de8 	andeq	r0, r0, r8, ror #27
     f30:	08005e0a 	stmdaeq	r0, {r1, r3, r9, sl, fp, ip, lr}
     f34:	0000001e 	andeq	r0, r0, lr, lsl r0
     f38:	0000000c 	andeq	r0, r0, ip
     f3c:	00000de8 	andeq	r0, r0, r8, ror #27
     f40:	00000000 	andeq	r0, r0, r0
     f44:	0000001e 	andeq	r0, r0, lr, lsl r0
     f48:	0000000c 	andeq	r0, r0, ip
     f4c:	00000de8 	andeq	r0, r0, r8, ror #27
     f50:	00000000 	andeq	r0, r0, r0
     f54:	0000001c 	andeq	r0, r0, ip, lsl r0
     f58:	0000000c 	andeq	r0, r0, ip
     f5c:	00000de8 	andeq	r0, r0, r8, ror #27
     f60:	08005e28 	stmdaeq	r0, {r3, r5, r9, sl, fp, ip, lr}
     f64:	0000001c 	andeq	r0, r0, ip, lsl r0
     f68:	0000000c 	andeq	r0, r0, ip
     f6c:	00000de8 	andeq	r0, r0, r8, ror #27
     f70:	00000000 	andeq	r0, r0, r0
     f74:	0000001e 	andeq	r0, r0, lr, lsl r0
     f78:	0000000c 	andeq	r0, r0, ip
     f7c:	00000de8 	andeq	r0, r0, r8, ror #27
     f80:	00000000 	andeq	r0, r0, r0
     f84:	0000001e 	andeq	r0, r0, lr, lsl r0
     f88:	0000000c 	andeq	r0, r0, ip
     f8c:	00000de8 	andeq	r0, r0, r8, ror #27
     f90:	00000000 	andeq	r0, r0, r0
     f94:	0000001c 	andeq	r0, r0, ip, lsl r0
     f98:	0000000c 	andeq	r0, r0, ip
     f9c:	00000de8 	andeq	r0, r0, r8, ror #27
     fa0:	00000000 	andeq	r0, r0, r0
     fa4:	0000001a 	andeq	r0, r0, sl, lsl r0
     fa8:	0000000c 	andeq	r0, r0, ip
     fac:	00000de8 	andeq	r0, r0, r8, ror #27
     fb0:	00000000 	andeq	r0, r0, r0
     fb4:	0000001a 	andeq	r0, r0, sl, lsl r0
     fb8:	0000000c 	andeq	r0, r0, ip
     fbc:	00000de8 	andeq	r0, r0, r8, ror #27
     fc0:	00000000 	andeq	r0, r0, r0
     fc4:	00000018 	andeq	r0, r0, r8, lsl r0
     fc8:	0000000c 	andeq	r0, r0, ip
     fcc:	00000de8 	andeq	r0, r0, r8, ror #27
     fd0:	00000000 	andeq	r0, r0, r0
     fd4:	0000001c 	andeq	r0, r0, ip, lsl r0
     fd8:	0000000c 	andeq	r0, r0, ip
     fdc:	00000de8 	andeq	r0, r0, r8, ror #27
     fe0:	00000000 	andeq	r0, r0, r0
     fe4:	00000020 	andeq	r0, r0, r0, lsr #32
     fe8:	0000000c 	andeq	r0, r0, ip
     fec:	00000de8 	andeq	r0, r0, r8, ror #27
     ff0:	00000000 	andeq	r0, r0, r0
     ff4:	00000020 	andeq	r0, r0, r0, lsr #32
     ff8:	0000000c 	andeq	r0, r0, ip
     ffc:	00000de8 	andeq	r0, r0, r8, ror #27
    1000:	08005e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip, lr}
    1004:	00000020 	andeq	r0, r0, r0, lsr #32
    1008:	0000000c 	andeq	r0, r0, ip
    100c:	00000de8 	andeq	r0, r0, r8, ror #27
    1010:	08005e64 	stmdaeq	r0, {r2, r5, r6, r9, sl, fp, ip, lr}
    1014:	00000020 	andeq	r0, r0, r0, lsr #32
    1018:	0000000c 	andeq	r0, r0, ip
    101c:	00000de8 	andeq	r0, r0, r8, ror #27
    1020:	00000000 	andeq	r0, r0, r0
    1024:	0000001e 	andeq	r0, r0, lr, lsl r0
    1028:	0000000c 	andeq	r0, r0, ip
    102c:	00000de8 	andeq	r0, r0, r8, ror #27
    1030:	00000000 	andeq	r0, r0, r0
    1034:	00000012 	andeq	r0, r0, r2, lsl r0
    1038:	0000000c 	andeq	r0, r0, ip
    103c:	00000de8 	andeq	r0, r0, r8, ror #27
    1040:	00000000 	andeq	r0, r0, r0
    1044:	00000020 	andeq	r0, r0, r0, lsr #32
    1048:	0000000c 	andeq	r0, r0, ip
    104c:	00000de8 	andeq	r0, r0, r8, ror #27
    1050:	00000000 	andeq	r0, r0, r0
    1054:	00000020 	andeq	r0, r0, r0, lsr #32
    1058:	0000000c 	andeq	r0, r0, ip
    105c:	00000de8 	andeq	r0, r0, r8, ror #27
    1060:	08005e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, lr}
    1064:	0000001c 	andeq	r0, r0, ip, lsl r0
    1068:	0000000c 	andeq	r0, r0, ip
    106c:	00000de8 	andeq	r0, r0, r8, ror #27
    1070:	08005ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip, lr}
    1074:	0000001c 	andeq	r0, r0, ip, lsl r0
    1078:	0000000c 	andeq	r0, r0, ip
    107c:	00000de8 	andeq	r0, r0, r8, ror #27
    1080:	08005ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, lr}
    1084:	0000001c 	andeq	r0, r0, ip, lsl r0
    1088:	0000000c 	andeq	r0, r0, ip
    108c:	00000de8 	andeq	r0, r0, r8, ror #27
    1090:	00000000 	andeq	r0, r0, r0
    1094:	00000026 	andeq	r0, r0, r6, lsr #32
    1098:	0000000c 	andeq	r0, r0, ip
    109c:	00000de8 	andeq	r0, r0, r8, ror #27
    10a0:	08005ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, lr}
    10a4:	00000040 	andeq	r0, r0, r0, asr #32
    10a8:	0000000c 	andeq	r0, r0, ip
    10ac:	00000de8 	andeq	r0, r0, r8, ror #27
    10b0:	00000000 	andeq	r0, r0, r0
    10b4:	00000020 	andeq	r0, r0, r0, lsr #32
    10b8:	0000000c 	andeq	r0, r0, ip
    10bc:	00000de8 	andeq	r0, r0, r8, ror #27
    10c0:	00000000 	andeq	r0, r0, r0
    10c4:	00000020 	andeq	r0, r0, r0, lsr #32
    10c8:	00000018 	andeq	r0, r0, r8, lsl r0
    10cc:	00000de8 	andeq	r0, r0, r8, ror #27
    10d0:	00000000 	andeq	r0, r0, r0
    10d4:	00000038 	andeq	r0, r0, r8, lsr r0
    10d8:	40080e41 	andmi	r0, r8, r1, asr #28
    10dc:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    10e0:	00000001 	andeq	r0, r0, r1
    10e4:	0000000c 	andeq	r0, r0, ip
    10e8:	00000de8 	andeq	r0, r0, r8, ror #27
    10ec:	00000000 	andeq	r0, r0, r0
    10f0:	00000020 	andeq	r0, r0, r0, lsr #32
    10f4:	0000000c 	andeq	r0, r0, ip
    10f8:	00000de8 	andeq	r0, r0, r8, ror #27
    10fc:	00000000 	andeq	r0, r0, r0
    1100:	00000020 	andeq	r0, r0, r0, lsr #32
    1104:	0000000c 	andeq	r0, r0, ip
    1108:	00000de8 	andeq	r0, r0, r8, ror #27
    110c:	00000000 	andeq	r0, r0, r0
    1110:	0000001c 	andeq	r0, r0, ip, lsl r0
    1114:	0000000c 	andeq	r0, r0, ip
    1118:	00000de8 	andeq	r0, r0, r8, ror #27
    111c:	00000000 	andeq	r0, r0, r0
    1120:	0000001c 	andeq	r0, r0, ip, lsl r0
    1124:	00000018 	andeq	r0, r0, r8, lsl r0
    1128:	00000de8 	andeq	r0, r0, r8, ror #27
    112c:	00000000 	andeq	r0, r0, r0
    1130:	000000a8 	andeq	r0, r0, r8, lsr #1
    1134:	40080e42 	andmi	r0, r8, r2, asr #28
    1138:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    113c:	00000001 	andeq	r0, r0, r1
    1140:	0000000c 	andeq	r0, r0, ip
    1144:	00000de8 	andeq	r0, r0, r8, ror #27
    1148:	00000000 	andeq	r0, r0, r0
    114c:	0000005c 	andeq	r0, r0, ip, asr r0
    1150:	0000000c 	andeq	r0, r0, ip
    1154:	00000de8 	andeq	r0, r0, r8, ror #27
    1158:	00000000 	andeq	r0, r0, r0
    115c:	0000005c 	andeq	r0, r0, ip, asr r0
    1160:	0000000c 	andeq	r0, r0, ip
    1164:	00000de8 	andeq	r0, r0, r8, ror #27
    1168:	00000000 	andeq	r0, r0, r0
    116c:	00000020 	andeq	r0, r0, r0, lsr #32
    1170:	0000000c 	andeq	r0, r0, ip
    1174:	00000de8 	andeq	r0, r0, r8, ror #27
    1178:	00000000 	andeq	r0, r0, r0
    117c:	00000020 	andeq	r0, r0, r0, lsr #32
    1180:	0000000c 	andeq	r0, r0, ip
    1184:	00000de8 	andeq	r0, r0, r8, ror #27
    1188:	00000000 	andeq	r0, r0, r0
    118c:	00000044 	andeq	r0, r0, r4, asr #32
    1190:	0000000c 	andeq	r0, r0, ip
    1194:	00000de8 	andeq	r0, r0, r8, ror #27
    1198:	00000000 	andeq	r0, r0, r0
    119c:	0000003a 	andeq	r0, r0, sl, lsr r0
    11a0:	0000000c 	andeq	r0, r0, ip
    11a4:	00000de8 	andeq	r0, r0, r8, ror #27
    11a8:	00000000 	andeq	r0, r0, r0
    11ac:	00000006 	andeq	r0, r0, r6
    11b0:	0000000c 	andeq	r0, r0, ip
    11b4:	00000de8 	andeq	r0, r0, r8, ror #27
    11b8:	00000000 	andeq	r0, r0, r0
    11bc:	0000000a 	andeq	r0, r0, sl
    11c0:	0000000c 	andeq	r0, r0, ip
    11c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11c8:	7c020001 	stcvc	0, cr0, [r2], {1}
    11cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11d0:	0000001c 	andeq	r0, r0, ip, lsl r0
    11d4:	000011c0 	andeq	r1, r0, r0, asr #3
    11d8:	08005f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip, lr}
    11dc:	00000154 	andeq	r0, r0, r4, asr r1
    11e0:	40100e41 	andsmi	r0, r0, r1, asr #28
    11e4:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
    11e8:	02864003 	addeq	r4, r6, #3
    11ec:	00018e40 	andeq	r8, r1, r0, asr #28
    11f0:	00000018 	andeq	r0, r0, r8, lsl r0
    11f4:	000011c0 	andeq	r1, r0, r0, asr #3
    11f8:	00000000 	andeq	r0, r0, r0
    11fc:	00000070 	andeq	r0, r0, r0, ror r0
    1200:	40080e41 	andmi	r0, r8, r1, asr #28
    1204:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
    1208:	00000001 	andeq	r0, r0, r1
    120c:	0000000c 	andeq	r0, r0, ip
    1210:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1214:	7c020001 	stcvc	0, cr0, [r2], {1}
    1218:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    121c:	00000018 	andeq	r0, r0, r8, lsl r0
    1220:	0000120c 	andeq	r1, r0, ip, lsl #4
    1224:	0800606c 	stmdaeq	r0, {r2, r3, r5, r6, sp, lr}
    1228:	00000038 	andeq	r0, r0, r8, lsr r0
    122c:	40080e41 	andmi	r0, r8, r1, asr #28
    1230:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
    1234:	00000001 	andeq	r0, r0, r1
    1238:	0000000c 	andeq	r0, r0, ip
    123c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1240:	7c020001 	stcvc	0, cr0, [r2], {1}
    1244:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1248:	00000018 	andeq	r0, r0, r8, lsl r0
    124c:	00001238 	andeq	r1, r0, r8, lsr r2
    1250:	080060a4 	stmdaeq	r0, {r2, r5, r7, sp, lr}
    1254:	00000024 	andeq	r0, r0, r4, lsr #32
    1258:	40080e41 	andmi	r0, r8, r1, asr #28
    125c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    1260:	00000001 	andeq	r0, r0, r1
    1264:	00000018 	andeq	r0, r0, r8, lsl r0
    1268:	00001238 	andeq	r1, r0, r8, lsr r2
    126c:	080060c8 	stmdaeq	r0, {r3, r6, r7, sp, lr}
    1270:	00000024 	andeq	r0, r0, r4, lsr #32
    1274:	40080e41 	andmi	r0, r8, r1, asr #28
    1278:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    127c:	00000001 	andeq	r0, r0, r1
    1280:	00000018 	andeq	r0, r0, r8, lsl r0
    1284:	00001238 	andeq	r1, r0, r8, lsr r2
    1288:	080060ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sp, lr}
    128c:	00000090 	muleq	r0, r0, r0
    1290:	40080e41 	andmi	r0, r8, r1, asr #28
    1294:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    1298:	00000001 	andeq	r0, r0, r1
    129c:	00000028 	andeq	r0, r0, r8, lsr #32
    12a0:	00001238 	andeq	r1, r0, r8, lsr r2
    12a4:	0800617c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sp, lr}
    12a8:	000000a8 	andeq	r0, r0, r8, lsr #1
    12ac:	40200e43 	eormi	r0, r0, r3, asr #28
    12b0:	84400883 	strbhi	r0, [r0], #-2179	; 0x883
    12b4:	06854007 	streq	r4, [r5], r7
    12b8:	40058640 	andmi	r8, r5, r0, asr #12
    12bc:	88400487 	stmdahi	r0, {r0, r1, r2, r7, sl}^
    12c0:	02894003 	addeq	r4, r9, #3
    12c4:	00018e40 	andeq	r8, r1, r0, asr #28
    12c8:	00000018 	andeq	r0, r0, r8, lsl r0
    12cc:	00001238 	andeq	r1, r0, r8, lsr r2
    12d0:	08006224 	stmdaeq	r0, {r2, r5, r9, sp, lr}
    12d4:	00000038 	andeq	r0, r0, r8, lsr r0
    12d8:	40080e41 	andmi	r0, r8, r1, asr #28
    12dc:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    12e0:	00000001 	andeq	r0, r0, r1
    12e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    12e8:	00001238 	andeq	r1, r0, r8, lsr r2
    12ec:	0800625c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sp, lr}
    12f0:	00000048 	andeq	r0, r0, r8, asr #32
    12f4:	40100e41 	andsmi	r0, r0, r1, asr #28
    12f8:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
    12fc:	02854003 	addeq	r4, r5, #3
    1300:	00018e40 	andeq	r8, r1, r0, asr #28
    1304:	0000001c 	andeq	r0, r0, ip, lsl r0
    1308:	00001238 	andeq	r1, r0, r8, lsr r2
    130c:	080062a4 	stmdaeq	r0, {r2, r5, r7, r9, sp, lr}
    1310:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1314:	40100e41 	andsmi	r0, r0, r1, asr #28
    1318:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
    131c:	02854003 	addeq	r4, r5, #3
    1320:	00018e40 	andeq	r8, r1, r0, asr #28
    1324:	0000001c 	andeq	r0, r0, ip, lsl r0
    1328:	00001238 	andeq	r1, r0, r8, lsr r2
    132c:	08006374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sp, lr}
    1330:	00000084 	andeq	r0, r0, r4, lsl #1
    1334:	40100e41 	andsmi	r0, r0, r1, asr #28
    1338:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
    133c:	02854003 	addeq	r4, r5, #3
    1340:	00018e40 	andeq	r8, r1, r0, asr #28
    1344:	00000018 	andeq	r0, r0, r8, lsl r0
    1348:	00001238 	andeq	r1, r0, r8, lsr r2
    134c:	080063f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sp, lr}
    1350:	00000024 	andeq	r0, r0, r4, lsr #32
    1354:	40080e41 	andmi	r0, r8, r1, asr #28
    1358:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
    135c:	00000001 	andeq	r0, r0, r1
    1360:	0000000c 	andeq	r0, r0, ip
    1364:	00001238 	andeq	r1, r0, r8, lsr r2
    1368:	0800641c 	stmdaeq	r0, {r2, r3, r4, sl, sp, lr}
    136c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1370:	00000018 	andeq	r0, r0, r8, lsl r0
    1374:	00001238 	andeq	r1, r0, r8, lsr r2
    1378:	08006438 	stmdaeq	r0, {r3, r4, r5, sl, sp, lr}
    137c:	00000040 	andeq	r0, r0, r0, asr #32
    1380:	40080e41 	andmi	r0, r8, r1, asr #28
    1384:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
    1388:	00000001 	andeq	r0, r0, r1
    138c:	00000024 	andeq	r0, r0, r4, lsr #32
    1390:	00001238 	andeq	r1, r0, r8, lsr r2
    1394:	08006478 	stmdaeq	r0, {r3, r4, r5, r6, sl, sp, lr}
    1398:	000002dc 	ldrdeq	r0, [r0], -ip
    139c:	40180e41 	andsmi	r0, r8, r1, asr #28
    13a0:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
    13a4:	04844005 	streq	r4, [r4], #5
    13a8:	40038540 	andmi	r8, r3, r0, asr #10
    13ac:	8e400286 	cdphi	2, 4, cr0, cr0, cr6, {4}
    13b0:	00000001 	andeq	r0, r0, r1
    13b4:	00000024 	andeq	r0, r0, r4, lsr #32
    13b8:	00001238 	andeq	r1, r0, r8, lsr r2
    13bc:	08006754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, sp, lr}
    13c0:	000000c8 	andeq	r0, r0, r8, asr #1
    13c4:	40180e41 	andsmi	r0, r8, r1, asr #28
    13c8:	84400683 	strbhi	r0, [r0], #-1667	; 0x683
    13cc:	04854005 	streq	r4, [r5], #5
    13d0:	40038640 	andmi	r8, r3, r0, asr #12
    13d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    13d8:	00000001 	andeq	r0, r0, r1
    13dc:	00000018 	andeq	r0, r0, r8, lsl r0
    13e0:	00001238 	andeq	r1, r0, r8, lsr r2
    13e4:	0800681c 	stmdaeq	r0, {r2, r3, r4, fp, sp, lr}
    13e8:	00000038 	andeq	r0, r0, r8, lsr r0
    13ec:	400c0e41 	andmi	r0, ip, r1, asr #28
    13f0:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
    13f4:	018e4002 	orreq	r4, lr, r2
    13f8:	00000018 	andeq	r0, r0, r8, lsl r0
    13fc:	00001238 	andeq	r1, r0, r8, lsr r2
    1400:	08006854 	stmdaeq	r0, {r2, r4, r6, fp, sp, lr}
    1404:	0000005c 	andeq	r0, r0, ip, asr r0
    1408:	40080e41 	andmi	r0, r8, r1, asr #28
    140c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    1410:	00000001 	andeq	r0, r0, r1
    1414:	0000000c 	andeq	r0, r0, ip
    1418:	00001238 	andeq	r1, r0, r8, lsr r2
    141c:	00000000 	andeq	r0, r0, r0
    1420:	00000002 	andeq	r0, r0, r2
    1424:	0000000c 	andeq	r0, r0, ip
    1428:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    142c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1430:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1434:	00000018 	andeq	r0, r0, r8, lsl r0
    1438:	00001424 	andeq	r1, r0, r4, lsr #8
    143c:	080068b0 	stmdaeq	r0, {r4, r5, r7, fp, sp, lr}
    1440:	00000030 	andeq	r0, r0, r0, lsr r0
    1444:	400c0e41 	andmi	r0, ip, r1, asr #28
    1448:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
    144c:	018e4002 	orreq	r4, lr, r2
    1450:	00000018 	andeq	r0, r0, r8, lsl r0
    1454:	00001424 	andeq	r1, r0, r4, lsr #8
    1458:	080068e0 	stmdaeq	r0, {r5, r6, r7, fp, sp, lr}
    145c:	00000024 	andeq	r0, r0, r4, lsr #32
    1460:	40080e41 	andmi	r0, r8, r1, asr #28
    1464:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    1468:	00000001 	andeq	r0, r0, r1
    146c:	0000000c 	andeq	r0, r0, ip
    1470:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1474:	7c020001 	stcvc	0, cr0, [r2], {1}
    1478:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    147c:	00000018 	andeq	r0, r0, r8, lsl r0
    1480:	0000146c 	andeq	r1, r0, ip, ror #8
    1484:	08006904 	stmdaeq	r0, {r2, r8, fp, sp, lr}
    1488:	0000001e 	andeq	r0, r0, lr, lsl r0
    148c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    1490:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1494:	00000001 	andeq	r0, r0, r1
    1498:	0000000c 	andeq	r0, r0, ip
    149c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    14a0:	7c020001 	stcvc	0, cr0, [r2], {1}
    14a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14a8:	00000014 	andeq	r0, r0, r4, lsl r0
    14ac:	00001498 	muleq	r0, r8, r4
    14b0:	08006922 	stmdaeq	r0, {r1, r5, r8, fp, sp, lr}
    14b4:	00000012 	andeq	r0, r0, r2, lsl r0
    14b8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    14bc:	00018e02 	andeq	r8, r1, r2, lsl #28
    14c0:	0000000c 	andeq	r0, r0, ip
    14c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    14c8:	7c020001 	stcvc	0, cr0, [r2], {1}
    14cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14d0:	00000020 	andeq	r0, r0, r0, lsr #32
    14d4:	000014c0 	andeq	r1, r0, r0, asr #9
    14d8:	08006934 	stmdaeq	r0, {r2, r4, r5, r8, fp, sp, lr}
    14dc:	0000003c 	andeq	r0, r0, ip, lsr r0
    14e0:	83200e42 	teqhi	r0, #1056	; 0x420
    14e4:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
    14e8:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    14ec:	89038804 	stmdbhi	r3, {r2, fp, pc}
    14f0:	00018e02 	andeq	r8, r1, r2, lsl #28
    14f4:	0000000c 	andeq	r0, r0, ip
    14f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    14fc:	7c020001 	stcvc	0, cr0, [r2], {1}
    1500:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1504:	0000000c 	andeq	r0, r0, ip
    1508:	000014f4 	strdeq	r1, [r0], -r4
    150c:	08006970 	stmdaeq	r0, {r4, r5, r6, r8, fp, sp, lr}
    1510:	00000010 	andeq	r0, r0, r0, lsl r0
    1514:	0000000c 	andeq	r0, r0, ip
    1518:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    151c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1520:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1524:	00000020 	andeq	r0, r0, r0, lsr #32
    1528:	00001514 	andeq	r1, r0, r4, lsl r5
    152c:	00000000 	andeq	r0, r0, r0
    1530:	00000040 	andeq	r0, r0, r0, asr #32
    1534:	82080e41 	andhi	r0, r8, #1040	; 0x410
    1538:	41018302 	tstmi	r1, r2, lsl #6
    153c:	0484100e 	streq	r1, [r4], #14
    1540:	0e41038e 	cdpeq	3, 4, cr0, cr1, cr14, {4}
    1544:	00000180 	andeq	r0, r0, r0, lsl #3
    1548:	00000020 	andeq	r0, r0, r0, lsr #32
    154c:	00001514 	andeq	r1, r0, r4, lsl r5
    1550:	08006980 	stmdaeq	r0, {r7, r8, fp, sp, lr}
    1554:	00000048 	andeq	r0, r0, r8, asr #32
    1558:	810c0e41 	tsthi	ip, r1, asr #28
    155c:	83028203 	movwhi	r8, #8707	; 0x2203
    1560:	100e4101 	andne	r4, lr, r1, lsl #2
    1564:	0e43048e 	cdpeq	4, 4, cr0, cr3, cr14, {4}
    1568:	00000180 	andeq	r0, r0, r0, lsl #3
    156c:	0000000c 	andeq	r0, r0, ip
    1570:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1574:	7c020001 	stcvc	0, cr0, [r2], {1}
    1578:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    157c:	00000020 	andeq	r0, r0, r0, lsr #32
    1580:	0000156c 	andeq	r1, r0, ip, ror #10
    1584:	080069c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, sp, lr}
    1588:	000000b8 	strheq	r0, [r0], -r8
    158c:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
    1590:	86078508 	strhi	r8, [r7], -r8, lsl #10
    1594:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    1598:	8a038904 	bhi	e39b0 <__Stack_Size+0xe31b0>
    159c:	00018e02 	andeq	r8, r1, r2, lsl #28
    15a0:	00000028 	andeq	r0, r0, r8, lsr #32
    15a4:	0000156c 	andeq	r1, r0, ip, ror #10
    15a8:	00000000 	andeq	r0, r0, r0
    15ac:	000000f2 	strdeq	r0, [r0], -r2
    15b0:	80300e42 	eorshi	r0, r0, r2, asr #28
    15b4:	820b810c 	andhi	r8, fp, #12, 2
    15b8:	8509840a 	strhi	r8, [r9, #-1034]	; 0x40a
    15bc:	87078608 	strhi	r8, [r7, -r8, lsl #12]
    15c0:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
    15c4:	8b038a04 	blhi	e3ddc <__Stack_Size+0xe35dc>
    15c8:	00018e02 	andeq	r8, r1, r2, lsl #28
    15cc:	00000024 	andeq	r0, r0, r4, lsr #32
    15d0:	0000156c 	andeq	r1, r0, ip, ror #10
    15d4:	08006a80 	stmdaeq	r0, {r7, r9, fp, sp, lr}
    15d8:	000001d8 	ldrdeq	r0, [r0], -r8
    15dc:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
    15e0:	86068507 	strhi	r8, [r6], -r7, lsl #10
    15e4:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    15e8:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    15ec:	900e4101 	andls	r4, lr, r1, lsl #2
    15f0:	00000001 	andeq	r0, r0, r1
    15f4:	0000000c 	andeq	r0, r0, ip
    15f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    15fc:	7c020001 	stcvc	0, cr0, [r2], {1}
    1600:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1604:	00000020 	andeq	r0, r0, r0, lsr #32
    1608:	000015f4 	strdeq	r1, [r0], -r4
    160c:	08006c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, sp, lr}
    1610:	000000e4 	andeq	r0, r0, r4, ror #1
    1614:	83200e42 	teqhi	r0, #1056	; 0x420
    1618:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
    161c:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    1620:	89038804 	stmdbhi	r3, {r2, fp, pc}
    1624:	00018e02 	andeq	r8, r1, r2, lsl #28
    1628:	00000028 	andeq	r0, r0, r8, lsr #32
    162c:	000015f4 	strdeq	r1, [r0], -r4
    1630:	08006d3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, fp, sp, lr}
    1634:	00000228 	andeq	r0, r0, r8, lsr #4
    1638:	80300e42 	eorshi	r0, r0, r2, asr #28
    163c:	820b810c 	andhi	r8, fp, #12, 2
    1640:	8409830a 	strhi	r8, [r9], #-778	; 0x30a
    1644:	86078508 	strhi	r8, [r7], -r8, lsl #10
    1648:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    164c:	8a038904 	bhi	e3a64 <__Stack_Size+0xe3264>
    1650:	00018e02 	andeq	r8, r1, r2, lsl #28
    1654:	0000000c 	andeq	r0, r0, ip
    1658:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    165c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1660:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1664:	00000018 	andeq	r0, r0, r8, lsl r0
    1668:	00001654 	andeq	r1, r0, r4, asr r6
    166c:	08006f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, sp, lr}
    1670:	00000030 	andeq	r0, r0, r0, lsr r0
    1674:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1678:	41018e02 	tstmi	r1, r2, lsl #28
    167c:	0000700e 	andeq	r7, r0, lr
    1680:	00000018 	andeq	r0, r0, r8, lsl r0
    1684:	00001654 	andeq	r1, r0, r4, asr r6
    1688:	08006f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, sp, lr}
    168c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1690:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    1694:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1698:	00000001 	andeq	r0, r0, r1
    169c:	0000000c 	andeq	r0, r0, ip
    16a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    16a4:	7c020001 	stcvc	0, cr0, [r2], {1}
    16a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16ac:	00000014 	andeq	r0, r0, r4, lsl r0
    16b0:	0000169c 	muleq	r0, ip, r6
    16b4:	08006fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, sp, lr}
    16b8:	0000001c 	andeq	r0, r0, ip, lsl r0
    16bc:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    16c0:	00018e02 	andeq	r8, r1, r2, lsl #28
    16c4:	0000000c 	andeq	r0, r0, ip
    16c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    16cc:	7c020001 	stcvc	0, cr0, [r2], {1}
    16d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16d4:	00000018 	andeq	r0, r0, r8, lsl r0
    16d8:	000016c4 	andeq	r1, r0, r4, asr #13
    16dc:	08006fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, sp, lr}
    16e0:	00000036 	andeq	r0, r0, r6, lsr r0
    16e4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    16e8:	86038504 	strhi	r8, [r3], -r4, lsl #10
    16ec:	00018e02 	andeq	r8, r1, r2, lsl #28
    16f0:	0000000c 	andeq	r0, r0, ip
    16f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    16f8:	7c020001 	stcvc	0, cr0, [r2], {1}
    16fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1700:	00000018 	andeq	r0, r0, r8, lsl r0
    1704:	000016f0 	strdeq	r1, [r0], -r0
    1708:	08007004 	stmdaeq	r0, {r2, ip, sp, lr}
    170c:	00000088 	andeq	r0, r0, r8, lsl #1
    1710:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    1714:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1718:	00000001 	andeq	r0, r0, r1
    171c:	0000000c 	andeq	r0, r0, ip
    1720:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1724:	7c020001 	stcvc	0, cr0, [r2], {1}
    1728:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    172c:	00000018 	andeq	r0, r0, r8, lsl r0
    1730:	0000171c 	andeq	r1, r0, ip, lsl r7
    1734:	0800708c 	stmdaeq	r0, {r2, r3, r7, ip, sp, lr}
    1738:	000000a8 	andeq	r0, r0, r8, lsr #1
    173c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
    1740:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1744:	00018e02 	andeq	r8, r1, r2, lsl #28
    1748:	0000000c 	andeq	r0, r0, ip
    174c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1750:	7c020001 	stcvc	0, cr0, [r2], {1}
    1754:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1758:	0000001c 	andeq	r0, r0, ip, lsl r0
    175c:	00001748 	andeq	r1, r0, r8, asr #14
    1760:	08007134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp, lr}
    1764:	0000004c 	andeq	r0, r0, ip, asr #32
    1768:	83180e41 	tsthi	r8, #1040	; 0x410
    176c:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
    1770:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    1774:	00018e02 	andeq	r8, r1, r2, lsl #28
    1778:	0000000c 	andeq	r0, r0, ip
    177c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1780:	7c020001 	stcvc	0, cr0, [r2], {1}
    1784:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1788:	00000018 	andeq	r0, r0, r8, lsl r0
    178c:	00001778 	andeq	r1, r0, r8, ror r7
    1790:	08007180 	stmdaeq	r0, {r7, r8, ip, sp, lr}
    1794:	00000020 	andeq	r0, r0, r0, lsr #32
    1798:	83100e41 	tsthi	r0, #1040	; 0x410
    179c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
    17a0:	00018e02 	andeq	r8, r1, r2, lsl #28
    17a4:	0000000c 	andeq	r0, r0, ip
    17a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    17ac:	7c020001 	stcvc	0, cr0, [r2], {1}
    17b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    17b4:	0000000c 	andeq	r0, r0, ip
    17b8:	000017a4 	andeq	r1, r0, r4, lsr #15
    17bc:	080071a0 	stmdaeq	r0, {r5, r7, r8, ip, sp, lr}
    17c0:	00000010 	andeq	r0, r0, r0, lsl r0
    17c4:	0000000c 	andeq	r0, r0, ip
    17c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    17cc:	7c020001 	stcvc	0, cr0, [r2], {1}
    17d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    17d4:	0000000c 	andeq	r0, r0, ip
    17d8:	000017c4 	andeq	r1, r0, r4, asr #15
    17dc:	080071b0 	stmdaeq	r0, {r4, r5, r7, r8, ip, sp, lr}
    17e0:	00000012 	andeq	r0, r0, r2, lsl r0
    17e4:	0000000c 	andeq	r0, r0, ip
    17e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    17ec:	7c020001 	stcvc	0, cr0, [r2], {1}
    17f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    17f4:	00000018 	andeq	r0, r0, r8, lsl r0
    17f8:	000017e4 	andeq	r1, r0, r4, ror #15
    17fc:	00000000 	andeq	r0, r0, r0
    1800:	0000001a 	andeq	r0, r0, sl, lsl r0
    1804:	83100e41 	tsthi	r0, #1040	; 0x410
    1808:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
    180c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1810:	00000018 	andeq	r0, r0, r8, lsl r0
    1814:	000017e4 	andeq	r1, r0, r4, ror #15
    1818:	00000000 	andeq	r0, r0, r0
    181c:	000000bc 	strheq	r0, [r0], -ip
    1820:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    1824:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1828:	00018e02 	andeq	r8, r1, r2, lsl #28
    182c:	0000000c 	andeq	r0, r0, ip
    1830:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1834:	7c020001 	stcvc	0, cr0, [r2], {1}
    1838:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    183c:	0000000c 	andeq	r0, r0, ip
    1840:	0000182c 	andeq	r1, r0, ip, lsr #16
    1844:	080071c4 	stmdaeq	r0, {r2, r6, r7, r8, ip, sp, lr}
    1848:	00000034 	andeq	r0, r0, r4, lsr r0

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	31425041 	cmpcc	r2, r1, asr #32
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00524e45 	subseq	r4, r2, r5, asr #28
       8:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
       c:	4c5f454d 	cfldr64mi	mvdx4, [pc], {77}	; 0x4d
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	52455441 	subpl	r5, r5, #1090519040	; 0x41000000
      14:	42535500 	subsmi	r5, r3, #0, 10
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	71655262 	cmnvc	r5, r2, ror #4
      1c:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	72747300 	rsbsvc	r7, r4, #0, 6
      24:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xe49
      28:	50410078 	subpl	r0, r1, r8, ror r0
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	53523242 	cmppl	r2, #536870916	; 0x20000004
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	4f005254 	svcmi	0x00005254
      34:	6544656e 	strbvs	r6, [r4, #-1390]	; 0x56e
      38:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	5f387500 	svcpl	0x00387500
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	43627375 	cmnmi	r2, #-738197503	; 0xd4000001
      48:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      4c:	73654467 	cmnvc	r5, #1728053248	; 0x67000000

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	70697263 	rsbvc	r7, r9, r3, ror #4
      54:	44726f74 	ldrbtmi	r6, [r2], #-3956	; 0xf74
      58:	75005546 	strvc	r5, [r0, #-1350]	; 0x546
      5c:	6e496273 	mcrvs	2, 2, r6, cr9, cr3, {3}
      60:	69007469 	stmdbvs	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
      64:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      68:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
      6c:	616c4300 	cmnvs	ip, r0, lsl #6
      70:	4e5f7373 	mrcmi	3, 2, r7, cr15, cr3, {3}
      74:	7461446f 	strbtvc	r4, [r1], #-1135	; 0x46f
      78:	65535f61 	ldrbvs	r5, [r3, #-3937]	; 0xf61
      7c:	00707574 	rsbseq	r7, r0, r4, ror r5
      80:	44627375 	strbtmi	r7, [r2], #-885	; 0x375
      84:	53496273 	movtpl	r6, #37491	; 0x9273
      88:	555f0052 	ldrbpl	r0, [pc, #-82]	; 3e <_Minimum_Stack_Size-0xc2>
      8c:	5f524553 	svcpl	0x00524553
      90:	4e415453 	mcrmi	4, 2, r5, cr1, cr3, {2}
      94:	44524144 	ldrbmi	r4, [r2], #-324	; 0x144
      98:	5145525f 	cmppl	r5, pc, asr r2
      9c:	54534555 	ldrbpl	r4, [r3], #-1365	; 0x555
      a0:	73550053 	cmpvc	r5, #83	; 0x53
      a4:	475f7265 	ldrbmi	r7, [pc, -r5, ror #4]
	f25519_select(x, a, b, (a[0] ^ parity) & 1);

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
	f25519_normalize(a);
	f25519_normalize(c);
      a8:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465

	return f25519_eq(a, c);
      ac:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
      b0:	72547700 	subsvc	r7, r4, #0, 14
      b4:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
	uint8_t ok;

	mx2ey(ey, mx);
	ok = ey2ex(ex, ey, parity);

	f25519_normalize(ex);
      b8:	69537265 	ldmdbvs	r3, {r0, r2, r5, r6, r9, ip, sp, lr}^
	f25519_normalize(ey);
      bc:	5500657a 	strpl	r6, [r0, #-1402]	; 0x57a
      c0:	4c5f4253 	lfmmi	f4, 2, [pc], {83}	; 0x53

	return ok;
}
      c4:	41435f50 	cmpmi	r3, r0, asr pc
      c8:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
      cc:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
      d0:	61485152 	cmpvs	r8, r2, asr r1
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
      d4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
      d8:	73750072 	cmnvc	r5, #114	; 0x72
		minusp[i] = c;
      dc:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
      e0:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
      e4:	63616672 	cmnvs	r1, #119537664	; 0x7200000

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
      e8:	74655365 	strbtvc	r5, [r5], #-869	; 0x365
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
      ec:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
      f0:	50424100 	subpl	r4, r2, r0, lsl #2
      f4:	54535231 	ldrbpl	r5, [r3], #-561	; 0x231
      f8:	525f0052 	subspl	r0, pc, #82	; 0x52
      fc:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     100:	54535f45 	ldrbpl	r5, [r3], #-3909	; 0xf45

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
     104:	00455441 	subeq	r5, r5, r1, asr #8
     108:	68746f6e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     10c:	50676e69 	rsbpl	r6, r7, r9, ror #28
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
     110:	00636f72 	rsbeq	r6, r3, r2, ror pc
     114:	5645445f 			; <UNDEFINED> instruction: 0x5645445f
     118:	5f454349 	svcpl	0x00454349
     11c:	4f464e49 	svcmi	0x00464e49
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     120:	62737500 	rsbsvs	r7, r3, #0, 10
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
     124:	61446f4e 	cmpvs	r4, lr, asr #30
     128:	65536174 	ldrbvs	r6, [r3, #-372]	; 0x174
		fprime_copy(plusa, r);
		fprime_add(plusa, a, modulus);

		fprime_select(r, r, plusa, bit);
	}
}
     12c:	00707574 	rsbseq	r7, r0, r4, ror r5

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
     130:	5f425355 	svcpl	0x00425355
	i <<= 3;

	while (x) {
     134:	55534e55 	ldrbpl	r4, [r3, #-3669]	; 0xe55
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
     138:	524f5050 	subpl	r5, pc, #80	; 0x50
     13c:	50700054 	rsbspl	r0, r0, r4, asr r0
	f25519_mul__distinct(x3, a, a);

	f25519_mul_c(a, x1z1, 486662);
	f25519_add(a, x1sq, a);
	f25519_add(a, z1sq, a);
	f25519_mul__distinct(x1sq, x1z1, a);
     140:	65706f72 	ldrbvs	r6, [r0, #-3954]!	; 0xf72
	f25519_mul_c(z3, x1sq, 4);
     144:	00797472 	rsbseq	r7, r9, r2, ror r4
     148:	77425355 	smlsldvc	r5, r2, r5, r3
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xe49
     150:	75007378 	strvc	r7, [r0, #-888]	; 0x378
     154:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
	f25519_sub(b, x3, z3); /* D */
     158:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     15c:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
	f25519_mul__distinct(da, a, b);
     160:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     164:	52006e6f 	andpl	r6, r0, #1776	; 0x6f0
     168:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec

	f25519_sub(b, x2, z2);
     16c:	41575f45 	cmpmi	r7, r5, asr #30
     170:	61005449 	tstvs	r0, r9, asr #8
	f25519_add(a, x3, z3); /* C */
     174:	6553746c 	ldrbvs	r7, [r3, #-1132]	; 0x46c
     178:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
     17c:	4e450067 	cdpmi	0, 4, cr0, cr5, cr7, {3}
	f25519_mul__distinct(cb, a, b);
     180:	494f5044 	stmdbmi	pc, {r2, r6, ip, lr}^	; <UNPREDICTABLE>
     184:	525f544e 	subspl	r5, pc, #1308622848	; 0x4e000000

	f25519_add(a, da, cb);
     188:	50494345 	subpl	r4, r9, r5, asr #6
     18c:	544e4549 	strbpl	r4, [lr], #-1353	; 0x549
     190:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
	f25519_mul__distinct(b, a, a);
     194:	65535f72 	ldrbvs	r5, [r3, #-3954]	; 0xf72
     198:	76654474 			; <UNDEFINED> instruction: 0x76654474
	f25519_mul__distinct(x5, z1, b);
     19c:	46656369 	strbtmi	r6, [r5], -r9, ror #6
     1a0:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
     1a4:	54006572 	strpl	r6, [r0], #-1394	; 0x572

	f25519_sub(a, da, cb);
     1a8:	00455552 	subeq	r5, r5, r2, asr r5
     1ac:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
	f25519_mul__distinct(b, a, a);
     1b0:	65447465 	strbvs	r7, [r4, #-1125]	; 0x465
     1b4:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     1b8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	00737365 	rsbseq	r7, r3, r5, ror #6
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	47627375 			; <UNDEFINED> instruction: 0x47627375
     1c4:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     1cc:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     1d0:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     1d4:	5500726f 	strpl	r7, [r0, #-623]	; 0x26f
		f25519_select(zm1, zm1, zm, bit);
     1d8:	775f6273 			; <UNDEFINED> instruction: 0x775f6273
     1dc:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     1e0:	76006874 			; <UNDEFINED> instruction: 0x76006874
		f25519_select(xm, xm, xms, bit);
     1e4:	00363175 	eorseq	r3, r6, r5, ror r1
     1e8:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
     1ec:	616d726f 	cmnvs	sp, pc, ror #4
		f25519_select(zm, zm, zms, bit);
     1f0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1f4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     1f8:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     200:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	73750066 	cmnvc	r5, #102	; 0x66
     208:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
	f25519_mul__distinct(result, zm1, xm);
     20c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     210:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
	f25519_normalize(result);
     214:	6f697461 	svcvs	0x00697461
     218:	6544006e 	strbvs	r0, [r4, #-110]	; 0x6e
}
     21c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     220:	6261545f 	rsbvs	r5, r1, #1593835520	; 0x5f000000
     224:	7500656c 	strvc	r6, [r0, #-1388]	; 0x56c
     228:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
     22c:	646e4574 	strbtvs	r4, [lr], #-1396	; 0x574
     230:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     234:	61654674 	smcvs	21604	; 0x5464
     238:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     23c:	45525f00 	ldrbmi	r5, [r2, #-3840]	; 0xf00
     240:	49504943 	ldmdbmi	r0, {r0, r1, r6, r8, fp, lr}^
     244:	5f544e45 	svcpl	0x00544e45
     248:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0x954
     24c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     250:	6f6c2067 	svcvs	0x006c2067
     254:	7520676e 	strvc	r6, [r0, #-1902]!	; 0x76e
     258:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     25c:	2064656e 	rsbcs	r6, r4, lr, ror #10
     260:	00746e69 	rsbseq	r6, r4, r9, ror #28
     264:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
     268:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
     26c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     270:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     274:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     278:	6144726f 	cmpvs	r4, pc, ror #4
     27c:	63006174 	movwvs	r6, #372	; 0x174
     280:	73614d72 	cmnvc	r1, #7296	; 0x1c80
     284:	5355006b 	cmppl	r5, #107	; 0x6b
     288:	55535f42 	ldrbpl	r5, [r3, #-3906]	; 0xf42
     28c:	53454343 	movtpl	r4, #21315	; 0x5343
     290:	53550053 	cmppl	r5, #83	; 0x53
     294:	6e495f42 	cdpvs	15, 4, cr5, cr9, cr2, {2}
     298:	55007469 	strpl	r7, [r0, #-1129]	; 0x469
     29c:	5f726573 	svcpl	0x00726573
     2a0:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
     2a4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     2a8:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     2ac:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     2b0:	65535f72 	ldrbvs	r5, [r3, #-3954]	; 0xf72
     2b4:	76654474 			; <UNDEFINED> instruction: 0x76654474
     2b8:	41656369 	cmnmi	r5, r9, ror #6
     2bc:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
     2c0:	43007373 	movwmi	r7, #883	; 0x373
     2c4:	7373616c 	cmnvc	r3, #108, 2
     2c8:	7461445f 	strbtvc	r4, [r1], #-1119	; 0x45f
     2cc:	65535f61 	ldrbvs	r5, [r3, #-3937]	; 0xf61
     2d0:	00707574 	rsbseq	r7, r0, r4, ror r5
     2d4:	47627375 			; <UNDEFINED> instruction: 0x47627375
     2d8:	65447465 	strbvs	r7, [r4, #-1125]	; 0x465
     2dc:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     2e0:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     2e4:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     2e8:	4400726f 	strmi	r7, [r0], #-623	; 0x26f
     2ec:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     2f0:	72505f65 	subsvc	r5, r0, #404	; 0x194
     2f4:	7265706f 	rsbvc	r7, r5, #111	; 0x6f
     2f8:	62007974 	andvs	r7, r0, #116, 18	; 0x1d0000
     2fc:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     300:	74536563 	ldrbvc	r6, [r3], #-1379	; 0x563
     304:	00657461 	rsbeq	r7, r5, r1, ror #8
     308:	4f534562 	svcmi	0x00534562
     30c:	746e6346 	strbtvc	r6, [lr], #-838	; 0x346
     310:	42535500 	subsmi	r5, r3, #0, 10
     314:	6c615677 	stclvs	6, cr5, [r1], #-476	; 0xfffffe24
     318:	00736575 	rsbseq	r6, r3, r5, ror r5
     31c:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     320:	455f454d 	ldrbmi	r4, [pc, #-1357]	; fffffddb <BootRAM+0xef7057c>
     324:	00464f53 	subeq	r4, r6, r3, asr pc
     328:	41627375 	smcmi	10037	; 0x2735
     32c:	6e497070 	mcrvs	0, 2, r7, cr9, cr0, {3}
     330:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
     334:	545f4343 	ldrbpl	r4, [pc], #-835	; 33c <_Minimum_Stack_Size+0x23c>
     338:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     33c:	75006665 	strvc	r6, [r0, #-1637]	; 0x665
     340:	65476273 	strbvs	r6, [r7, #-627]	; 0x273
     344:	6e754674 	mrcvs	6, 3, r4, cr5, cr4, {3}
     348:	6f697463 	svcvs	0x00697463
     34c:	446c616e 	strbtmi	r6, [ip], #-366	; 0x16e
     350:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     354:	6f747069 	svcvs	0x00747069
     358:	75760072 	ldrbvc	r0, [r6, #-114]!	; 0x72
     35c:	67003233 	smladxvs	r0, r3, r2, r3
     360:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
     364:	50687361 	rsbpl	r7, r8, r1, ror #6
     368:	53656761 	cmnpl	r5, #25427968	; 0x1840000
     36c:	00657a69 	rsbeq	r7, r5, r9, ror #20
     370:	61746f54 	cmnvs	r4, r4, asr pc
     374:	6e455f6c 	cdpvs	15, 4, cr5, cr5, cr12, {3}
     378:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
     37c:	5300746e 	movwpl	r7, #1134	; 0x46e
     380:	50457465 	subpl	r7, r5, r5, ror #8
     384:	61567852 	cmpvs	r6, r2, asr r8
     388:	0064696c 	rsbeq	r6, r4, ip, ror #18
     38c:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     390:	4f5f454d 	svcmi	0x005f454d
     394:	564e004e 	strbpl	r0, [lr], -lr, asr #32
     398:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     39c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     3a0:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     3a4:	646d436c 	strbtvs	r4, [sp], #-876	; 0x36c
     3a8:	45445f00 	strbmi	r5, [r4, #-3840]	; 0xf00
     3ac:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     3b0:	4f52505f 	svcmi	0x0052505f
     3b4:	73750050 	cmnvc	r5, #80	; 0x50
     3b8:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
     3bc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     3c0:	65446769 	strbvs	r6, [r4, #-1897]	; 0x769
     3c4:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     3c8:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     3cc:	44444100 	strbmi	r4, [r4], #-256	; 0x100
     3d0:	53534552 	cmppl	r3, #343932928	; 0x14800000
     3d4:	75004445 	strvc	r4, [r0, #-1093]	; 0x445
     3d8:	74536273 	ldrbvc	r6, [r3], #-627	; 0x273
     3dc:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     3e0:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     3e4:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     3e8:	7500726f 	strvc	r7, [r0, #-623]	; 0x26f
     3ec:	632e6273 	teqvs	lr, #805306375	; 0x30000007
     3f0:	73654400 	cmnvc	r5, #0, 8
     3f4:	70697263 	rsbvc	r7, r9, r3, ror #4
     3f8:	5f726f74 	svcpl	0x00726f74
     3fc:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
     400:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     404:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     408:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     40c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     410:	00657275 	rsbeq	r7, r5, r5, ror r2
     414:	5f434352 	svcpl	0x00434352
     418:	746f6c42 	strbtvc	r6, [pc], #-3138	; 420 <_Minimum_Stack_Size+0x320>
     41c:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     420:	65535f72 	ldrbvs	r5, [r3, #-3954]	; 0xf72
     424:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     428:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     42c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     430:	55006e6f 	strpl	r6, [r0, #-3695]	; 0xe6f
     434:	5f726573 	svcpl	0x00726573
     438:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
     43c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     440:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     444:	42484100 	submi	r4, r8, #0, 2
     448:	00524e45 	subseq	r4, r2, r5, asr #28
     44c:	50627375 	rsbpl	r7, r2, r5, ror r3
     450:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
     454:	52006e4f 	andpl	r6, r0, #1264	; 0x4f0
     458:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     45c:	4e495f45 	cdpmi	15, 4, cr5, cr9, cr5, {2}
     460:	4e524554 	mrcmi	5, 2, r4, cr2, cr4, {2}
     464:	52004c41 	andpl	r4, r0, #16640	; 0x4100
     468:	5f504578 	svcpl	0x00504578
     46c:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     470:	75007265 	strvc	r7, [r0, #-613]	; 0x265
     474:	6e456273 	mcrvs	2, 2, r6, cr5, cr3, {3}
     478:	52534962 	subspl	r4, r3, #1605632	; 0x188000
     47c:	62737500 	rsbsvs	r7, r3, #0, 10
     480:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0x552
     484:	6400656d 	strvs	r6, [r0], #-1389	; 0x56d
     488:	70557566 	subsvc	r7, r5, r6, ror #10
     48c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
     490:	65527942 	ldrbvs	r7, [r2, #-2370]	; 0x942
     494:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     498:	73750074 	cmnvc	r5, #116	; 0x74
     49c:	61745362 	cmnvs	r4, r2, ror #6
     4a0:	4f737574 	svcmi	0x00737574
     4a4:	75007475 	strvc	r7, [r0, #-1141]	; 0x475
     4a8:	65526273 	ldrbvs	r6, [r2, #-627]	; 0x273
     4ac:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0x573
     4b0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     4b4:	62737500 	rsbsvs	r7, r3, #0, 10
     4b8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     4bc:	73750074 	cmnvc	r5, #116	; 0x74
     4c0:	61745362 	cmnvs	r4, r2, ror #6
     4c4:	49737574 	ldmdbmi	r3!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
     4c8:	4552006e 	ldrbmi	r0, [r2, #-110]	; 0x6e
     4cc:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
     4d0:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
     4d4:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     4d8:	6f6c2067 	svcvs	0x006c2067
     4dc:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     4e0:	5000746e 	andpl	r7, r0, lr, ror #8
     4e4:	5245574f 	subpl	r5, r5, #20709376	; 0x13c0000
     4e8:	55004445 	strpl	r4, [r0, #-1093]	; 0x445
     4ec:	4c774253 	lfmmi	f4, 2, [r7], #-332	; 0xfffffeb4
     4f0:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
     4f4:	75007368 	strvc	r7, [r0, #-872]	; 0x368
     4f8:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
     4fc:	746e4974 	strbtvc	r4, [lr], #-2420	; 0x974
     500:	61667265 	cmnvs	r6, r5, ror #4
     504:	43006563 	movwmi	r6, #1379	; 0x563
     508:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
     50c:	435f746e 	cmpmi	pc, #1845493760	; 0x6e000000
     510:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     514:	61727567 	cmnvs	r2, r7, ror #10
     518:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     51c:	6e497700 	cdpvs	7, 4, cr7, cr9, cr0, {0}
     520:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
     524:	5f747075 	svcpl	0x00747075
     528:	6b73614d 	blvs	1cd8a64 <__Stack_Size+0x1cd8264>
     52c:	6f6f6200 	svcvs	0x006f6200
     530:	4544006c 	strbmi	r0, [r4, #-108]	; 0x6c
     534:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     538:	4345525f 	movtmi	r5, #21087	; 0x525f
     53c:	45495049 	strbmi	r5, [r9, #-73]	; 0x49
     540:	7500544e 	strvc	r5, [r0, #-1102]	; 0x44e
     544:	65476273 	strbvs	r6, [r7, #-627]	; 0x273
     548:	61745374 	cmnvs	r4, r4, ror r3
     54c:	43006574 	movwmi	r6, #1396	; 0x574
     550:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
     554:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     558:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     55c:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     560:	4e437700 	cdpmi	7, 4, cr7, cr3, cr0, {0}
     564:	75005254 	strvc	r5, [r0, #-596]	; 0x254
     568:	73446273 	movtvc	r6, #17011	; 0x4273
     56c:	73754262 	cmnvc	r5, #536870918	; 0x20000006
     570:	4e4f5000 	cdpmi	0, 4, cr5, cr15, cr0, {0}
     574:	45445f45 	strbmi	r5, [r4, #-3909]	; 0xf45
     578:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
     57c:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
     580:	62737500 	rsbsvs	r7, r3, #0, 10
     584:	70737553 	rsbsvc	r7, r3, r3, asr r5
     588:	00646e65 	rsbeq	r6, r4, r5, ror #28
     58c:	61746f54 	cmnvs	r4, r4, asr pc
     590:	6f435f6c 	svcvs	0x00435f6c
     594:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     598:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     59c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     5a0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     5a4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     5a8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     5ac:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     5b0:	6f697461 	svcvs	0x00697461
     5b4:	564e006e 	strbpl	r0, [lr], -lr, rrx
     5b8:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     5bc:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     5c0:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     5c4:	4552006c 	ldrbmi	r0, [r2, #-108]	; 0x6c
     5c8:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
     5cc:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0x55f
     5d0:	414e5245 	cmpmi	lr, r5, asr #4
     5d4:	7543004c 	strbvc	r0, [r3, #-76]	; 0x4c
     5d8:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     5dc:	6c415f74 	mcrrvs	15, 7, r5, r1, cr4
     5e0:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
     5e4:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
     5e8:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     5ec:	4100676e 	tstmi	r0, lr, ror #14
     5f0:	45324250 	ldrmi	r4, [r2, #-592]!	; 0x250
     5f4:	7200524e 	andvc	r5, r0, #-536870908	; 0xe0000004
     5f8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
     5fc:	5f007473 	svcpl	0x00007473
     600:	50444e45 	subpl	r4, r4, r5, asr #28
     604:	544e494f 	strbpl	r4, [lr], #-2383	; 0x94f
     608:	464e495f 			; <UNDEFINED> instruction: 0x464e495f
     60c:	6f43004f 	svcvs	0x0043004f
     610:	6f527970 	svcvs	0x00527970
     614:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     618:	43520065 	cmpmi	r2, #101	; 0x65
     61c:	44425f43 	strbmi	r5, [r2], #-3907	; 0xf43
     620:	5f005243 	svcpl	0x00005243
     624:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
     628:	55004543 	strpl	r4, [r0, #-1347]	; 0x543
     62c:	4e5f4253 	mrcmi	2, 2, r4, cr15, cr3, {2}
     630:	525f544f 	subspl	r5, pc, #1325400064	; 0x4f000000
     634:	59444145 	stmdbpl	r4, {r0, r2, r6, r8, lr}^
     638:	6e496200 	cdpvs	2, 4, cr6, cr9, cr0, {0}
     63c:	63615074 	cmnvs	r1, #116	; 0x74
     640:	464f536b 	strbmi	r5, [pc], -fp, ror #6
     644:	62737500 	rsbsvs	r7, r3, #0, 10
     648:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xf50
     64c:	66664f72 	uqsub16vs	r4, r6, r2
     650:	6e6f4300 	cdpvs	3, 6, cr4, cr15, cr0, {0}
     654:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 48c <_Minimum_Stack_Size+0x38c>
     658:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     65c:	68730065 	ldmdavs	r3!, {r0, r2, r5, r6}^
     660:	2074726f 	rsbscs	r7, r4, pc, ror #4
     664:	00746e69 	rsbseq	r6, r4, r9, ror #28
     668:	47627375 			; <UNDEFINED> instruction: 0x47627375
     66c:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
     670:	66726574 			; <UNDEFINED> instruction: 0x66726574
     674:	00656361 	rsbeq	r6, r5, r1, ror #6
     678:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0x552
     67c:	0053656d 	subseq	r6, r3, sp, ror #10
     680:	616c6564 	cmnvs	ip, r4, ror #10
     684:	4e490079 	mcrmi	0, 2, r0, cr9, cr9, {3}
     688:	46524554 			; <UNDEFINED> instruction: 0x46524554
     68c:	5f454341 	svcpl	0x00454341
     690:	49434552 	stmdbmi	r3, {r1, r4, r6, r8, sl, lr}^
     694:	4e454950 	mcrmi	9, 2, r4, cr5, cr0, {2}
     698:	6f430054 	svcvs	0x00430054
     69c:	61447970 	hvcvs	18320	; 0x4790
     6a0:	55006174 	strpl	r6, [r0, #-372]	; 0x174
     6a4:	5f726573 	svcpl	0x00726573
     6a8:	61656c43 	cmnvs	r5, r3, asr #24
     6ac:	61654672 	smcvs	21602	; 0x5462
     6b0:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     6b4:	4c414600 	mcrrmi	6, 0, r4, r1, cr0
     6b8:	43004553 	movwmi	r4, #1363	; 0x553
     6bc:	00524746 	subseq	r4, r2, r6, asr #14
     6c0:	20554e47 	subscs	r4, r5, r7, asr #28
     6c4:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
     6c8:	20342e38 	eorscs	r2, r4, r8, lsr lr
     6cc:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
     6d0:	35323730 	ldrcc	r3, [r2, #-1840]!	; 0x730
     6d4:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0x820
     6d8:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     6dc:	5b202965 	blpl	80ac78 <__Stack_Size+0x80a478>
     6e0:	2f4d5241 	svccs	0x004d5241
     6e4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     6e8:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     6ec:	385f342d 	ldmdacc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     6f0:	6172622d 	cmnvs	r2, sp, lsr #4
     6f4:	2068636e 	rsbcs	r6, r8, lr, ror #6
     6f8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     6fc:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
     700:	33313220 	teqcc	r1, #32, 4
     704:	5d373431 	cfldrspl	mvf3, [r7, #-196]!	; 0xffffff3c
     708:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
     70c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     710:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
     714:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
     718:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
     71c:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
     720:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
     724:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     728:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
     72c:	6f777265 	svcvs	0x00777265
     730:	2d206b72 	vstmdbcs	r0!, {d6-<overflow reg d62>}
     734:	4f2d2067 	svcmi	0x002d2067
     738:	662d2033 			; <UNDEFINED> instruction: 0x662d2033
     73c:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     740:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     744:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     748:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     74c:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     750:	61746164 	cmnvs	r4, r4, ror #2
     754:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     758:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     75c:	775f0073 			; <UNDEFINED> instruction: 0x775f0073
     760:	56676552 			; <UNDEFINED> instruction: 0x56676552
     764:	55006c61 	strpl	r6, [r0, #-3169]	; 0xc61
     768:	6d624253 	sfmvs	f4, 2, [r2, #-332]!	; 0xfffffeb4
     76c:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
     770:	54747365 	ldrbtpl	r7, [r4], #-869	; 0x365
     774:	00657079 	rsbeq	r7, r5, r9, ror r0
     778:	636f7250 	cmnvs	pc, #80, 4
     77c:	5f737365 	svcpl	0x00737365
     780:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     784:	4f5f7375 	svcmi	0x005f7375
     788:	73005455 	movwvc	r5, #1109	; 0x455
     78c:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xa69
     790:	00657079 	rsbeq	r7, r5, r9, ror r0
     794:	61656c43 	cmnvs	r5, r3, asr #24
     798:	74535f72 	ldrbvc	r5, [r3], #-3954	; 0xf72
     79c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     7a0:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xf5f
     7a4:	5f387500 	svcpl	0x00387500
     7a8:	46627375 			; <UNDEFINED> instruction: 0x46627375
     7ac:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
     7b0:	616e6f69 	cmnvs	lr, r9, ror #30
     7b4:	7365446c 	cmnvc	r5, #108, 8	; 0x6c000000
     7b8:	70697263 	rsbvc	r7, r9, r3, ror #4
     7bc:	00726f74 	rsbseq	r6, r2, r4, ror pc
     7c0:	5345525f 	movtpl	r5, #21087	; 0x525f
     7c4:	00544c55 	subseq	r4, r4, r5, asr ip
     7c8:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
     7cc:	666e495f 			; <UNDEFINED> instruction: 0x666e495f
     7d0:	6573006f 	ldrbvs	r0, [r3, #-111]!	; 0x6f
     7d4:	55707574 	ldrbpl	r7, [r0, #-1396]!	; 0x574
     7d8:	67004253 	smlsdvs	r0, r3, r2, r4
     7dc:	5f6f6970 	svcpl	0x006f6970
     7e0:	74697277 	strbtvc	r7, [r9], #-631	; 0x277
     7e4:	69625f65 	stmdbvs	r2!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     7e8:	73750074 	cmnvc	r5, #116	; 0x74
     7ec:	74614462 	strbtvc	r4, [r1], #-1122	; 0x462
     7f0:	74655361 	strbtvc	r5, [r5], #-865	; 0x361
     7f4:	43007075 	movwmi	r7, #117	; 0x75
     7f8:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
     7fc:	45525547 	ldrbmi	r5, [r2, #-1351]	; 0x547
     800:	49770044 	ldmdbmi	r7!, {r2, r6}^
     804:	00727473 	rsbseq	r7, r2, r3, ror r4
     808:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     80c:	5f746e65 	svcpl	0x00746e65
     810:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     814:	00657275 	rsbeq	r7, r5, r5, ror r2
     818:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     81c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
     820:	61686320 	cmnvs	r8, r0, lsr #6
     824:	52650072 	rsbpl	r0, r5, #114	; 0x72
     828:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
     82c:	74655365 	strbtvc	r5, [r5], #-869	; 0x365
     830:	006c6156 	rsbeq	r6, ip, r6, asr r1
     834:	5f525443 	svcpl	0x00525443
     838:	6400504c 	strvs	r5, [r0], #-76	; 0x4c
     83c:	70557566 	subsvc	r7, r5, r6, ror #10
     840:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
     844:	65527942 	ldrbvs	r7, [r2, #-2370]	; 0x942
     848:	00746573 	rsbseq	r6, r4, r3, ror r5
     84c:	47627375 			; <UNDEFINED> instruction: 0x47627375
     850:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465
     854:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     858:	62737500 	rsbsvs	r7, r3, #0, 10
     85c:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
     860:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     864:	61654665 	cmnvs	r5, r5, ror #12
     868:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     86c:	62735500 	rsbsvs	r5, r3, #0, 10
     870:	664f775f 			; <UNDEFINED> instruction: 0x664f775f
     874:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
     878:	45445f00 	strbmi	r5, [r4, #-3840]	; 0xf00
     87c:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     880:	4154535f 	cmpmi	r4, pc, asr r3
     884:	55004554 	strpl	r4, [r0, #-1364]	; 0x554
     888:	4e4f434e 	cdpmi	3, 4, cr4, cr15, cr14, {2}
     88c:	5443454e 	strbpl	r4, [r3], #-1358	; 0x54e
     890:	43004445 	movwmi	r4, #1093	; 0x445
     894:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
     898:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
     89c:	66696168 	strbtvs	r6, [r9], -r8, ror #2
     8a0:	68637369 	stmdavs	r3!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     8a4:	7365445c 	cmnvc	r5, #92, 8	; 0x5c000000
     8a8:	706f746b 	rsbvc	r7, pc, fp, ror #8
     8ac:	636e655c 	cmnvs	lr, #92, 10	; 0x17000000
     8b0:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0x16c
     8b4:	6f72705f 	svcvs	0x0072705f
     8b8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
     8bc:	6f6f625c 	svcvs	0x006f625c
     8c0:	616f6c74 	smcvs	63172	; 0xf6c4
     8c4:	5c726564 	cfldr64pl	mvdx6, [r2], #-400	; 0xfffffe70
     8c8:	334d5453 	movtcc	r5, #54355	; 0xd453
     8cc:	00314632 	eorseq	r4, r1, r2, lsr r6
     8d0:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     8d4:	535f454d 	cmppl	pc, #322961408	; 0x13400000
     8d8:	54524154 	ldrbpl	r4, [r2], #-340	; 0x154
     8dc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     8e0:	52495f43 	subpl	r5, r9, #268	; 0x10c
     8e4:	61684351 	cmnvs	r8, r1, asr r3
     8e8:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     8ec:	50627553 	rsbpl	r7, r2, r3, asr r5
     8f0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     8f4:	00797469 	rsbseq	r7, r9, r9, ror #8
     8f8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     8fc:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     900:	50646e45 	rsbpl	r6, r4, r5, asr #28
     904:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
     908:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     90c:	00657275 	rsbeq	r7, r5, r5, ror r2
     910:	43627375 	cmnmi	r2, #-738197503	; 0xd4000001
     914:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     918:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     91c:	00657275 	rsbeq	r7, r5, r5, ror r2
     920:	4548544f 	strbmi	r5, [r8, #-1103]	; 0x44f
     924:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
     928:	49504943 	ldmdbmi	r0, {r0, r1, r6, r8, fp, lr}^
     92c:	00544e45 	subseq	r4, r4, r5, asr #28
     930:	5f363175 	svcpl	0x00363175
     934:	50003875 	andpl	r3, r0, r5, ror r8
     938:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
     93c:	535f7373 	cmppl	pc, #-872415231	; 0xcc000001
     940:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     944:	4e495f73 	mcrmi	15, 2, r5, cr9, cr3, {3}
     948:	6f687300 	svcvs	0x00687300
     94c:	75207472 	strvc	r7, [r0, #-1138]!	; 0x472
     950:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     954:	2064656e 	rsbcs	r6, r4, lr, ror #10
     958:	00746e69 	rsbseq	r6, r4, r9, ror #28
     95c:	41545441 	cmpmi	r4, r1, asr #8
     960:	44454843 	strbmi	r4, [r5], #-2115	; 0x843
     964:	70457000 	subvc	r7, r5, r0
     968:	5f746e49 	svcpl	0x00746e49
     96c:	0054554f 	subseq	r5, r4, pc, asr #10
     970:	4349564e 	movtmi	r5, #38478	; 0x964e
     974:	5152495f 	cmppl	r2, pc, asr r9
     978:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     97c:	506c656e 	rsbpl	r6, ip, lr, ror #10
     980:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
     984:	6f697470 	svcvs	0x00697470
     988:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
     98c:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     990:	55530079 	ldrbpl	r0, [r3, #-121]	; 0x79
     994:	4e455053 	mcrmi	0, 2, r5, cr5, cr3, {2}
     998:	00444544 	subeq	r4, r4, r4, asr #10
     99c:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
     9a0:	43785250 	cmnmi	r8, #80, 4
     9a4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     9a8:	42535500 	subsmi	r5, r3, #0, 10
     9ac:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
     9b0:	7000524f 	andvc	r5, r0, pc, asr #4
     9b4:	6e497045 	cdpvs	0, 4, cr7, cr9, cr5, {2}
     9b8:	4e495f74 	mcrmi	15, 2, r5, cr9, cr4, {3}
     9bc:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     9c0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     9c4:	616c4300 	cmnvs	ip, r0, lsl #6
     9c8:	475f7373 			; <UNDEFINED> instruction: 0x475f7373
     9cc:	495f7465 	ldmdbmi	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     9d0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     9d4:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     9d8:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     9dc:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     9e0:	69766e00 	ldmdbvs	r6!, {r9, sl, fp, sp, lr}^
     9e4:	696e4963 	stmdbvs	lr!, {r0, r1, r5, r6, r8, fp, lr}^
     9e8:	38750074 	ldmdacc	r5!, {r2, r4, r5, r6}^
     9ec:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     9f0:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     9f4:	6556676e 	ldrbvs	r6, [r6, #-1902]	; 0x76e
     9f8:	726f646e 	rsbvc	r6, pc, #1845493760	; 0x6e000000
     9fc:	5f387500 	svcpl	0x00387500
     a00:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     a04:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     a08:	746e4967 	strbtvc	r4, [lr], #-2407	; 0x967
     a0c:	61667265 	cmnvs	r6, r5, ror #4
     a10:	75006563 	strvc	r6, [r0, #-1379]	; 0x563
     a14:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a18:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a1c:	41676e69 	cmnmi	r7, r9, ror #28
     a20:	0031746c 	eorseq	r7, r1, ip, ror #8
     a24:	755f3875 	ldrbvc	r3, [pc, #-2165]	; 1b7 <_Minimum_Stack_Size+0xb7>
     a28:	65446273 	strbvs	r6, [r4, #-627]	; 0x273
     a2c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     a30:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     a34:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     a38:	4644726f 	strbmi	r7, [r4], -pc, ror #4
     a3c:	38750055 	ldmdacc	r5!, {r0, r2, r4, r6}^
     a40:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     a44:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     a48:	6c41676e 	mcrrvs	7, 6, r6, r1, cr14
     a4c:	75003274 	strvc	r3, [r0, #-628]	; 0x274
     a50:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a54:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a58:	53676e69 	cmnpl	r7, #1680	; 0x690
     a5c:	61697265 	cmnvs	r9, r5, ror #4
     a60:	3875006c 	ldmdacc	r5!, {r2, r3, r5, r6}^
     a64:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     a68:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     a6c:	6c41676e 	mcrrvs	7, 6, r6, r1, cr14
     a70:	75003074 	strvc	r3, [r0, #-116]	; 0x74
     a74:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a78:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a7c:	50676e69 	rsbpl	r6, r7, r9, ror #28
     a80:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xf72
     a84:	75007463 	strvc	r7, [r0, #-1123]	; 0x463
     a88:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a8c:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a90:	4c676e69 	stclmi	14, cr6, [r7], #-420	; 0xfffffe5c
     a94:	49676e61 	stmdbmi	r7!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     a98:	73750064 	cmnvc	r5, #100	; 0x64
     a9c:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     aa0:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     aa4:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     aa8:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
     aac:	50646165 	rsbpl	r6, r4, r5, ror #2
     ab0:	75006e69 	strvc	r6, [r0, #-3689]	; 0xe69
     ab4:	5f747261 	svcpl	0x00747261
     ab8:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     abc:	69006674 	stmdbvs	r0, {r2, r4, r5, r6, r9, sl, sp, lr}
     ac0:	5674696e 	ldrbtpl	r6, [r4], -lr, ror #18
     ac4:	66697265 	strbtvs	r7, [r9], -r5, ror #4
     ac8:	74730079 	ldrbtvc	r0, [r3], #-121	; 0x79
     acc:	65626f72 	strbvs	r6, [r2, #-3954]!	; 0xf72
     ad0:	006e6950 	rsbeq	r6, lr, r0, asr r9
     ad4:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0x573
     ad8:	44454c70 	strbmi	r4, [r5], #-3184	; 0xc70
     adc:	42646e41 	rsbmi	r6, r4, #1040	; 0x410
     ae0:	6f747475 	svcvs	0x00747475
     ae4:	6f64006e 	svcvs	0x0064006e
     ae8:	775f746e 	ldrbvc	r7, [pc, -lr, ror #8]
     aec:	00746961 	rsbseq	r6, r4, r1, ror #18
     af0:	74726175 	ldrbtvc	r6, [r2], #-373	; 0x175
     af4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     af8:	65686300 	strbvs	r6, [r8, #-768]!	; 0x300
     afc:	73556b63 	cmpvc	r5, #101376	; 0x18c00
     b00:	6f437265 	svcvs	0x00437265
     b04:	6a006564 	bvs	1a09c <__Stack_Size+0x1989c>
     b08:	54706d75 	ldrbtpl	r6, [r0], #-3445	; 0xd75
     b0c:	6573556f 	ldrbvs	r5, [r3, #-1391]!	; 0x56f
     b10:	79730072 	ldmdbvc	r3!, {r1, r4, r5, r6}^
     b14:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     b18:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     b1c:	616d0074 	smcvs	53252	; 0xd004
     b20:	73006e69 	movwvc	r6, #3689	; 0xe69
     b24:	70757465 	rsbsvc	r7, r5, r5, ror #8
     b28:	53414c46 	movtpl	r4, #7238	; 0x1c46
     b2c:	66640048 	strbtvs	r0, [r4], -r8, asr #32
     b30:	6e694675 	mcrvs	6, 3, r4, cr9, cr5, {3}
     b34:	55687369 	strbpl	r7, [r8, #-873]!	; 0x369
     b38:	616f6c70 	smcvs	63168	; 0xf6c0
     b3c:	65730064 	ldrbvs	r0, [r3, #-100]!	; 0x64
     b40:	43707574 	cmnmi	r0, #116, 10	; 0x1d000000
     b44:	6e004b4c 	vmlsvs.f64	d4, d0, d12
     b48:	73755f6f 	cmnvc	r5, #444	; 0x1bc
     b4c:	6a5f7265 	bvs	17dd4e8 <__Stack_Size+0x17dcce8>
     b50:	00706d75 	rsbseq	r6, r0, r5, ror sp
     b54:	6e69616d 	powvsez	f6, f1, #5.0
     b58:	6400632e 	strvs	r6, [r0], #-814	; 0x32e
     b5c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     b60:	756f635f 	strbvc	r6, [pc, #-863]!	; 809 <__Stack_Size+0x9>
     b64:	7000746e 	andvc	r7, r0, lr, ror #8
     b68:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
     b6c:	7361685f 	cmnvc	r1, #6225920	; 0x5f0000
     b70:	66640068 	strbtvs	r0, [r4], -r8, rrx
     b74:	6c705575 	cfldr64vs	mvdx5, [r0], #-468	; 0xfffffe2c
     b78:	5364616f 	cmnpl	r4, #-1073741797	; 0xc000001b
     b7c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     b80:	73006465 	movwvc	r6, #1125	; 0x465
     b84:	35326168 	ldrcc	r6, [r2, #-360]!	; 0x168
     b88:	70755f36 	rsbsvc	r5, r5, r6, lsr pc
     b8c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
     b90:	616c6600 	cmnvs	ip, r0, lsl #12
     b94:	72456873 	subvc	r6, r5, #7536640	; 0x730000
     b98:	50657361 	rsbpl	r7, r5, r1, ror #6
     b9c:	00656761 	rsbeq	r6, r5, r1, ror #14
     ba0:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
     ba4:	706e6900 	rsbvc	r6, lr, r0, lsl #18
     ba8:	47007475 	smlsdxmi	r0, r5, r4, r7
     bac:	5f4f4950 	svcpl	0x004f4950
     bb0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     bb4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     bb8:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     bbc:	7973006e 	ldmdbvc	r3!, {r1, r2, r3, r5, r6}^
     bc0:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     bc4:	64726148 	ldrbtvs	r6, [r2], #-328	; 0x148
     bc8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     bcc:	6b620074 	blvs	1880da4 <__Stack_Size+0x18805a4>
     bd0:	57303170 			; <UNDEFINED> instruction: 0x57303170
     bd4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
     bd8:	564e7200 	strbpl	r7, [lr], -r0, lsl #4
     bdc:	46004349 	strmi	r4, [r0], -r9, asr #6
     be0:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
     be4:	616e6f69 	cmnvs	lr, r9, ror #30
     be8:	6174536c 	cmnvs	r4, ip, ror #6
     bec:	63006574 	movwvs	r6, #1396	; 0x574
     bf0:	6b636568 	blvs	18da198 <__Stack_Size+0x18d9998>
     bf4:	43646e41 	cmnmi	r4, #1040	; 0x410
     bf8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     bfc:	746f6f42 	strbtvc	r6, [pc], #-3906	; c04 <__Stack_Size+0x404>
     c00:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
     c04:	6c467265 	sfmvs	f7, 2, [r6], {101}	; 0x65
     c08:	44006761 	strmi	r6, [r0], #-1889	; 0x761
     c0c:	00525346 	subseq	r5, r2, r6, asr #6
     c10:	6369766e 	cmnvs	r9, #115343360	; 0x6e00000
     c14:	61736944 	cmnvs	r3, r4, asr #18
     c18:	49656c62 	stmdbmi	r5!, {r1, r5, r6, sl, fp, sp, lr}^
     c1c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     c20:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
     c24:	53550073 	cmppl	r5, #115	; 0x73
     c28:	5f545241 	svcpl	0x00545241
     c2c:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
     c30:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     c34:	68006874 	stmdavs	r0, {r2, r4, r5, r6, fp, sp, lr}
     c38:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
     c3c:	2e657261 	cdpcs	2, 6, cr7, cr5, cr1, {3}
     c40:	53550063 	cmppl	r5, #99	; 0x63
     c44:	5f545241 	svcpl	0x00545241
     c48:	706f7453 	rsbvc	r7, pc, r3, asr r4	; <UNPREDICTABLE>
     c4c:	73746942 	cmnvc	r4, #1081344	; 0x108000
     c50:	72777000 	rsbsvc	r7, r7, #0
     c54:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
     c58:	70616d5f 	rsbvc	r6, r1, pc, asr sp
     c5c:	70737600 	rsbsvc	r7, r3, r0, lsl #12
     c60:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
     c64:	50470066 	subpl	r0, r7, r6, rrx
     c68:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     c6c:	0074696e 	rsbseq	r6, r4, lr, ror #18
     c70:	6d6d656d 	cfstr64vs	mvdx6, [sp, #-436]!	; 0xfffffe4c
     c74:	74006d65 	strvc	r6, [r0], #-3429	; 0xd65
     c78:	616d706d 	cmnvs	sp, sp, rrx
     c7c:	47006b73 	smlsdxmi	r0, r3, fp, r6
     c80:	5f4f4950 	svcpl	0x004f4950
     c84:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     c88:	4d325f64 	ldcmi	15, cr5, [r2, #-400]!	; 0xfffffe70
     c8c:	47007a48 	strmi	r7, [r0, -r8, asr #20]
     c90:	00525054 	subseq	r5, r2, r4, asr r0
     c94:	74536e6f 	ldrbvc	r6, [r3], #-3695	; 0xe6f
     c98:	00657461 	rsbeq	r7, r5, r1, ror #8
     c9c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     ca0:	61425f54 	cmpvs	r2, r4, asr pc
     ca4:	61526475 	cmpvs	r2, r5, ror r4
     ca8:	49006574 	stmdbmi	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     cac:	00524553 	subseq	r4, r2, r3, asr r5
     cb0:	65676170 	strbvs	r6, [r7, #-368]!	; 0x170
     cb4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     cb8:	45535200 	ldrbmi	r5, [r3, #-512]	; 0x200
     cbc:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     cc0:	50470031 	subpl	r0, r7, r1, lsr r0
     cc4:	535f4f49 	cmppl	pc, #292	; 0x124
     cc8:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
     ccc:	4d30315f 	ldfmis	f3, [r0, #-380]!	; 0xfffffe84
     cd0:	62007a48 	andvs	r7, r0, #72, 20	; 0x48000
     cd4:	725f706b 	subsvc	r7, pc, #107	; 0x6b
     cd8:	6d5f6765 	ldclvs	7, cr6, [pc, #-404]	; b4c <__Stack_Size+0x34c>
     cdc:	75007061 	strvc	r7, [r0, #-97]	; 0x61
     ce0:	725f6469 	subsvc	r6, pc, #1761607680	; 0x69000000
     ce4:	00646165 	rsbeq	r6, r4, r5, ror #2
     ce8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     cec:	61505f54 	cmpvs	r0, r4, asr pc
     cf0:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     cf4:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffffdfc <BootRAM+0xef7059d>
     cf8:	31746e69 	cmncc	r4, r9, ror #28
     cfc:	00745f36 	rsbseq	r5, r4, r6, lsr pc
     d00:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     d04:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
     d08:	47007469 	strmi	r7, [r0, -r9, ror #8]
     d0c:	5f4f4950 	svcpl	0x004f4950
     d10:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     d14:	4450495f 	ldrbmi	r4, [r0], #-2399	; 0x95f
     d18:	67697300 	strbvs	r7, [r9, -r0, lsl #6]!
     d1c:	7574616e 	ldrbvc	r6, [r4, #-366]!	; 0x16e
     d20:	65006572 	strvs	r6, [r0, #-1394]	; 0x572
     d24:	67697364 	strbvs	r7, [r9, -r4, ror #6]!
     d28:	65765f6e 	ldrbvs	r5, [r6, #-3950]!	; 0xf6e
     d2c:	79666972 	stmdbvc	r6!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     d30:	6c617600 	stclvs	6, cr7, [r1], #-0
     d34:	47006575 	smlsdxmi	r0, r5, r5, r6
     d38:	5f4f4950 	svcpl	0x004f4950
     d3c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     d40:	5550495f 	ldrbpl	r4, [r0, #-2399]	; 0x95f
     d44:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
     d48:	68730066 	ldmdavs	r3!, {r1, r2, r5, r6}^
     d4c:	36353261 	ldrtcc	r3, [r5], -r1, ror #4
     d50:	006d7573 	rsbeq	r7, sp, r3, ror r5
     d54:	6e675f5f 	mcrvs	15, 3, r5, cr7, cr15, {2}
     d58:	765f6375 			; <UNDEFINED> instruction: 0x765f6375
     d5c:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
     d60:	73007473 	movwvc	r7, #1139	; 0x473
     d64:	5f657a69 	svcpl	0x00657a69
     d68:	666f0074 			; <UNDEFINED> instruction: 0x666f0074
     d6c:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
     d70:	55504300 	ldrbpl	r4, [r0, #-768]	; 0x300
     d74:	74004449 	strvc	r4, [r0], #-1097	; 0x449
     d78:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0x6d
     d7c:	48530067 	ldmdami	r3, {r0, r1, r2, r5, r6}^
     d80:	41005250 	tstmi	r0, r0, asr r2
     d84:	00525346 	subseq	r5, r2, r6, asr #6
     d88:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     d8c:	79545f54 	ldmdbvc	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     d90:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     d94:	50410066 	subpl	r0, r1, r6, rrx
     d98:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
     d9c:	48005254 	stmdami	r0, {r2, r4, r6, r9, ip, lr}
     da0:	00525346 	subseq	r5, r2, r6, asr #6
     da4:	73616c66 	cmnvc	r1, #26112	; 0x6600
     da8:	636f4c68 	cmnvs	pc, #104, 24	; 0x6800
     dac:	5355006b 	cmppl	r5, #107	; 0x6b
     db0:	5f545241 	svcpl	0x00545241
     db4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     db8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     dbc:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     dc0:	50470065 	subpl	r0, r7, r5, rrx
     dc4:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; ca8 <__Stack_Size+0x4a8>
     dc8:	5f65646f 	svcpl	0x0065646f
     dcc:	5f74754f 	svcpl	0x0074754f
     dd0:	72005050 	andvc	r5, r0, #80	; 0x50
     dd4:	00657461 	rsbeq	r7, r5, r1, ror #8
     dd8:	41534944 	cmpmi	r3, r4, asr #18
     ddc:	00454c42 	subeq	r4, r5, r2, asr #24
     de0:	43524941 	cmpmi	r2, #1064960	; 0x104000
     de4:	75660052 	strbvc	r0, [r6, #-82]!	; 0x52
     de8:	7450636e 	ldrbvc	r6, [r0], #-878	; 0x36e
     dec:	74730072 	ldrbtvc	r0, [r3], #-114	; 0x72
     df0:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     df4:	616c6600 	cmnvs	ip, r0, lsl #12
     df8:	6e556873 	mrcvs	8, 2, r6, cr5, cr3, {3}
     dfc:	6b636f6c 	blvs	18dcbb4 <__Stack_Size+0x18dc3b4>
     e00:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     e04:	00657270 	rsbeq	r7, r5, r0, ror r2
     e08:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     e0c:	6f4d5f54 	svcvs	0x004d5f54
     e10:	73006564 	movwvc	r6, #1380	; 0x564
     e14:	35326168 	ldrcc	r6, [r2, #-360]!	; 0x168
     e18:	69665f36 	stmdbvs	r6!, {r1, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     e1c:	6873696e 	ldmdavs	r3!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     e20:	6d777200 	lfmvs	f7, 2, [r7, #-0]
     e24:	006c6156 	rsbeq	r6, ip, r6, asr r1
     e28:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     e2c:	00746553 	rsbseq	r6, r4, r3, asr r5
     e30:	41727375 	cmnmi	r2, r5, ror r3
     e34:	00726464 	rsbseq	r6, r2, r4, ror #8
     e38:	53434853 	movtpl	r4, #14419	; 0x3853
     e3c:	6f720052 	svcvs	0x00720052
     e40:	4143746f 	cmpmi	r3, pc, ror #8
     e44:	41535500 	cmpmi	r3, r0, lsl #10
     e48:	485f5452 	ldmdami	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     e4c:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
     e50:	46657261 	strbtmi	r7, [r5], -r1, ror #4
     e54:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
     e58:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     e5c:	43006c6f 	movwmi	r6, #3183	; 0xc6f
     e60:	00525346 	subseq	r5, r2, r6, asr #6
     e64:	505f5555 	subspl	r5, pc, r5, asr r5	; <UNPREDICTABLE>
     e68:	74537475 	ldrbvc	r7, [r3], #-1141	; 0x475
     e6c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     e70:	615f5f00 	cmpvs	pc, r0, lsl #30
     e74:	73750070 	cmnvc	r5, #112	; 0x70
     e78:	69614d72 	stmdbvs	r1!, {r1, r4, r5, r6, r8, sl, fp, lr}^
     e7c:	6567006e 	strbvs	r0, [r7, #-110]!	; 0x6e
     e80:	616c4674 	smcvs	50276	; 0xc464
     e84:	6e456873 	mcrvs	8, 2, r6, cr5, cr3, {3}
     e88:	6c660064 	stclvs	0, cr0, [r6], #-400	; 0xfffffe70
     e8c:	53687361 	cmnpl	r8, #-2080374783	; 0x84000001
     e90:	00657a69 	rsbeq	r7, r5, r9, ror #20
     e94:	4f495047 	svcmi	0x00495047
     e98:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     e9c:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     ea0:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
     ea4:	44006572 	strmi	r6, [r0], #-1394	; 0x572
     ea8:	00303152 	eorseq	r3, r0, r2, asr r1
     eac:	52504349 	subspl	r4, r0, #603979777	; 0x24000001
     eb0:	43435200 	movtmi	r5, #12800	; 0x3200
     eb4:	6765525f 			; <UNDEFINED> instruction: 0x6765525f
     eb8:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     ebc:	47007463 	strmi	r7, [r0, -r3, ror #8]
     ec0:	5f4f4950 	svcpl	0x004f4950
     ec4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     ec8:	5f46415f 	svcpl	0x0046415f
     ecc:	7200444f 	andvc	r4, r0, #1325400064	; 0x4f000000
     ed0:	00424353 	subeq	r4, r2, r3, asr r3
     ed4:	70677261 	rsbvc	r7, r7, r1, ror #4
     ed8:	69727700 	ldmdbvs	r2!, {r8, r9, sl, ip, sp, lr}^
     edc:	6e657474 	mcrvs	4, 3, r7, cr5, cr4, {3}
     ee0:	68736148 	ldmdavs	r3!, {r3, r6, r8, sp, lr}^
     ee4:	695f7500 	ldmdbvs	pc, {r8, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     ee8:	6c660064 	stclvs	0, cr0, [r6], #-400	; 0xfffffe70
     eec:	45687361 	strbmi	r7, [r8, #-865]!	; 0x361
     ef0:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0x172
     ef4:	65676150 	strbvs	r6, [r7, #-336]!	; 0x150
     ef8:	70760073 	rsbsvc	r0, r6, r3, ror r0
     efc:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
     f00:	41535500 	cmpmi	r3, r0, lsl #10
     f04:	00785452 	rsbseq	r5, r8, r2, asr r4
     f08:	41464d4d 	cmpmi	r6, sp, asr #26
     f0c:	50470052 	subpl	r0, r7, r2, asr r0
     f10:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; df4 <__Stack_Size+0x5f4>
     f14:	5f65646f 	svcpl	0x0065646f
     f18:	004e4941 	subeq	r4, lr, r1, asr #18
     f1c:	32616873 	rsbcc	r6, r1, #7536640	; 0x730000
     f20:	735f3635 	cmpvc	pc, #55574528	; 0x3500000
     f24:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     f28:	45520073 	ldrbmi	r0, [r2, #-115]	; 0x73
     f2c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     f30:	00304445 	eorseq	r4, r0, r5, asr #8
     f34:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     f38:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     f3c:	45520031 	ldrbmi	r0, [r2, #-49]	; 0x31
     f40:	56524553 			; <UNDEFINED> instruction: 0x56524553
     f44:	00324445 	eorseq	r4, r2, r5, asr #8
     f48:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     f4c:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     f50:	45520033 	ldrbmi	r0, [r2, #-51]	; 0x33
     f54:	56524553 			; <UNDEFINED> instruction: 0x56524553
     f58:	00344445 	eorseq	r4, r4, r5, asr #8
     f5c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     f60:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     f64:	45520035 	ldrbmi	r0, [r2, #-53]	; 0x35
     f68:	56524553 			; <UNDEFINED> instruction: 0x56524553
     f6c:	00364445 	eorseq	r4, r6, r5, asr #8
     f70:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     f74:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     f78:	45520038 	ldrbmi	r0, [r2, #-56]	; 0x38
     f7c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     f80:	00394445 	eorseq	r4, r9, r5, asr #8
     f84:	4f495047 	svcmi	0x00495047
     f88:	646f4d5f 	strbtvs	r4, [pc], #-3423	; f90 <__Stack_Size+0x790>
     f8c:	46415f65 	strbmi	r5, [r1], -r5, ror #30
     f90:	0050505f 	subseq	r5, r0, pc, asr r0
     f94:	4f495047 	svcmi	0x00495047
     f98:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     f9c:	6d006465 	cfstrsvs	mvf6, [r0, #-404]	; 0xfffffe6c
     fa0:	65736d65 	ldrbvs	r6, [r3, #-3429]!	; 0xd65
     fa4:	55550074 	ldrbpl	r0, [r5, #-116]	; 0x74
     fa8:	7475505f 	ldrbtvc	r5, [r5], #-95	; 0x5f
     fac:	72616843 	rsbvc	r6, r1, #4390912	; 0x430000
     fb0:	6d656d00 	stclvs	13, cr6, [r5, #-0]
     fb4:	00706d63 	rsbseq	r6, r0, r3, ror #26
     fb8:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xf77
     fbc:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
     fc0:	6d630032 	stclvs	0, cr0, [r3, #-200]!	; 0xffffff38
     fc4:	646e4570 	strbtvs	r4, [lr], #-1392	; 0x570
     fc8:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; d0 <_Minimum_Stack_Size-0x30>
     fcc:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     fd0:	7300745f 	movwvc	r7, #1119	; 0x45f
     fd4:	734d7465 	movtvc	r7, #54373	; 0xd465
     fd8:	646e4170 	strbtvs	r4, [lr], #-368	; 0x170
     fdc:	706d754a 	rsbvc	r7, sp, sl, asr #10
     fe0:	41464200 	mrsmi	r4, (UNDEF: 102)
     fe4:	50470052 	subpl	r0, r7, r2, asr r0
     fe8:	545f4f49 	ldrbpl	r4, [pc], #-3913	; ff0 <__Stack_Size+0x7f0>
     fec:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     ff0:	56006665 	strpl	r6, [r0], -r5, ror #12
     ff4:	00524f54 	subseq	r4, r2, r4, asr pc
     ff8:	4f495047 	svcmi	0x00495047
     ffc:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    1000:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1004:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1008:	61687300 	cmnvs	r8, r0, lsl #6
    100c:	5f363532 	svcpl	0x00363532
    1010:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xf63
    1014:	00747865 	rsbseq	r7, r4, r5, ror #16
    1018:	4349564e 	movtmi	r5, #38478	; 0x964e
    101c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1020:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1024:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    1028:	00627573 	rsbeq	r7, r2, r3, ror r5
    102c:	61765f5f 	cmnvs	r6, pc, asr pc
    1030:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
    1034:	4e450074 	mcrmi	0, 2, r0, cr5, cr4, {3}
    1038:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
    103c:	53434900 	movtpl	r4, #14592	; 0x3900
    1040:	666f0052 			; <UNDEFINED> instruction: 0x666f0052
    1044:	53003066 	movwpl	r3, #102	; 0x66
    1048:	545f4243 	ldrbpl	r4, [pc], #-579	; 1050 <__Stack_Size+0x850>
    104c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    1050:	6f006665 	svcvs	0x00006665
    1054:	00346666 	eorseq	r6, r4, r6, ror #12
    1058:	3866666f 	stmdacc	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, sp, lr}^
    105c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1060:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
    1064:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1068:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    106c:	6c660066 	stclvs	0, cr0, [r6], #-408	; 0xfffffe68
    1070:	41687361 	cmnmi	r8, r1, ror #6
    1074:	00726464 	rsbseq	r6, r2, r4, ror #8
    1078:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    107c:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
    1080:	4e00745f 	cfmvsrmi	mvf0, r7
    1084:	5f434956 	svcpl	0x00434956
    1088:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    108c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    1090:	47007463 	strmi	r7, [r0, -r3, ror #8]
    1094:	5f4f4950 	svcpl	0x004f4950
    1098:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
    109c:	30355f64 	eorscc	r5, r5, r4, ror #30
    10a0:	007a484d 	rsbseq	r4, sl, sp, asr #16
    10a4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    10a8:	6d435f54 	stclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
    10ac:	50470064 	subpl	r0, r7, r4, rrx
    10b0:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; f94 <__Stack_Size+0x794>
    10b4:	5f65646f 	svcpl	0x0065646f
    10b8:	5f74754f 	svcpl	0x0074754f
    10bc:	5200444f 	andpl	r4, r0, #1325400064	; 0x4f000000
    10c0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    10c4:	31444556 	cmpcc	r4, r6, asr r5
    10c8:	45520030 	ldrbmi	r0, [r2, #-48]	; 0x30
    10cc:	56524553 			; <UNDEFINED> instruction: 0x56524553
    10d0:	31314445 	teqcc	r1, r5, asr #8
    10d4:	45434900 	strbmi	r4, [r3, #-2304]	; 0x900
    10d8:	64610052 	strbtvs	r0, [r1], #-82	; 0x52
    10dc:	55007264 	strpl	r7, [r0, #-612]	; 0x264
    10e0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    10e4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    10e8:	70795474 	rsbsvc	r5, r9, r4, ror r4
    10ec:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    10f0:	42414900 	submi	r4, r1, #0, 18
    10f4:	75760052 	ldrbvc	r0, [r6, #-82]!	; 0x52
    10f8:	00323363 	eorseq	r3, r2, r3, ror #6
    10fc:	5f434352 	svcpl	0x00434352
    1100:	32425041 	subcc	r5, r2, #65	; 0x41
    1104:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1108:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    110c:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1110:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1114:	52434354 	subpl	r4, r3, #84, 6	; 0x50000001
    1118:	696e7500 	stmdbvs	lr!, {r8, sl, ip, sp, lr}^
    111c:	49657571 	stmdbmi	r5!, {r0, r4, r5, r6, r8, sl, ip, sp, lr}^
    1120:	50470044 	subpl	r0, r7, r4, asr #32
    1124:	70534f49 	subsvc	r4, r3, r9, asr #30
    1128:	5f646565 	svcpl	0x00646565
    112c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1130:	00666544 	rsbeq	r6, r6, r4, asr #10
    1134:	6b6e6162 	blvs	1b996c4 <__Stack_Size+0x1b98ec4>
    1138:	616c6600 	cmnvs	ip, r0, lsl #12
    113c:	72576873 	subsvc	r6, r7, #7536640	; 0x730000
    1140:	57657469 	strbpl	r7, [r5, -r9, ror #8]!
    1144:	0064726f 	rsbeq	r7, r4, pc, ror #4
    1148:	6f57686c 	svcvs	0x0057686c
    114c:	49006472 	stmdbmi	r0, {r1, r4, r5, r6, sl, sp, lr}
    1150:	00525053 	subseq	r5, r2, r3, asr r0
    1154:	706d756a 	rsbvc	r7, sp, sl, ror #10
    1158:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    115c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1160:	6f4d5f4f 	svcvs	0x004d5f4f
    1164:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    1168:	4c465f4e 	mcrrmi	15, 4, r5, r6, cr14
    116c:	4954414f 	ldmdbmi	r4, {r0, r1, r2, r3, r6, r8, lr}^
    1170:	5200474e 	andpl	r4, r0, #20447232	; 0x1380000
    1174:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    1178:	37444556 	smlsldcc	r4, r4, r6, r5	; <UNPREDICTABLE>
    117c:	57686800 	strbpl	r6, [r8, -r0, lsl #16]!
    1180:	0064726f 	rsbeq	r7, r4, pc, ror #4
    1184:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    1188:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    118c:	00797469 	rsbseq	r7, r9, r9, ror #8
    1190:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    1194:	43705574 	cmnmi	r0, #116, 10	; 0x1d000000
    1198:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    119c:	4c007265 	sfmmi	f7, 4, [r0], {101}	; 0x65
    11a0:	00524b43 	subseq	r4, r2, r3, asr #22
    11a4:	5f554644 	svcpl	0x00554644
    11a8:	4f4c5055 	svcmi	0x004c5055
    11ac:	465f4441 	ldrbmi	r4, [pc], -r1, asr #8
    11b0:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    11b4:	3858305f 	ldmdacc	r8, {r0, r1, r2, r3, r4, r6, ip, sp}^
    11b8:	30373030 	eorscc	r3, r7, r0, lsr r0
    11bc:	73003030 	movwvc	r3, #48	; 0x30
    11c0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    11c4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    11c8:	73750065 	cmnvc	r5, #101	; 0x65
    11cc:	70417265 	subvc	r7, r1, r5, ror #4
    11d0:	64644170 	strbtvs	r4, [r4], #-368	; 0x170
    11d4:	46440072 			; <UNDEFINED> instruction: 0x46440072
    11d8:	50555f55 	subspl	r5, r5, r5, asr pc
    11dc:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
    11e0:	414c465f 	cmpmi	ip, pc, asr r6
    11e4:	305f4853 	subscc	r4, pc, r3, asr r8	; <UNPREDICTABLE>
    11e8:	30303858 	eorscc	r3, r0, r8, asr r8
    11ec:	30303032 	eorscc	r3, r0, r2, lsr r0
    11f0:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
    11f4:	53746553 	cmnpl	r4, #348127232	; 0x14c00000
    11f8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    11fc:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
    1200:	6f6c7055 	svcvs	0x006c7055
    1204:	79546461 	ldmdbvc	r4, {r0, r5, r6, sl, sp, lr}^
    1208:	5f736570 	svcpl	0x00736570
    120c:	66640074 			; <UNDEFINED> instruction: 0x66640074
    1210:	6c705575 	cfldr64vs	mvdx5, [r0], #-468	; 0xfffffe2c
    1214:	4464616f 	strbtmi	r6, [r4], #-367	; 0x16f
    1218:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    121c:	5f554644 	svcpl	0x00554644
    1220:	4f4c5055 	svcmi	0x004c5055
    1224:	525f4441 	subspl	r4, pc, #1090519040	; 0x41000000
    1228:	72004d41 	andvc	r4, r0, #4160	; 0x1040
    122c:	42766365 	rsbsmi	r6, r6, #-1811939327	; 0x94000001
    1230:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    1234:	66640072 			; <UNDEFINED> instruction: 0x66640072
    1238:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
    123c:	4c505579 	cfldr64mi	mvdx5, [r0], {121}	; 0x79
    1240:	0044414f 	subeq	r4, r4, pc, asr #2
    1244:	73696874 	cmnvc	r9, #116, 16	; 0x740000
    1248:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    124c:	6e654c6b 	cdpvs	12, 6, cr4, cr5, cr11, {3}
    1250:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
    1254:	61647055 	qdsubvs	r7, r5, r4
    1258:	79426574 	stmdbvc	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
    125c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1260:	0074756f 	rsbseq	r7, r4, pc, ror #10
    1264:	42756664 	rsbsmi	r6, r5, #100, 12	; 0x6400000
    1268:	00797375 	rsbseq	r7, r9, r5, ror r3
    126c:	4f4c505f 	svcmi	0x004c505f
    1270:	46440054 			; <UNDEFINED> instruction: 0x46440054
    1274:	50555f55 	subspl	r5, r5, r5, asr pc
    1278:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
    127c:	414c465f 	cmpmi	ip, pc, asr r6
    1280:	305f4853 	subscc	r4, pc, r3, asr r8	; <UNPREDICTABLE>
    1284:	30303858 	eorscc	r3, r0, r8, asr r8
    1288:	30303036 	eorscc	r3, r0, r6, lsr r0
    128c:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
    1290:	7500632e 	strvc	r6, [r0, #-814]	; 0x32e
    1294:	53726573 	cmnpl	r2, #482344960	; 0x1cc00000
    1298:	65636170 	strbvs	r6, [r3, #-368]!	; 0x170
    129c:	74536900 	ldrbvc	r6, [r3], #-2304	; 0x900
    12a0:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    12a4:	6c707500 	cfldr64vs	mvdx7, [r0], #-0
    12a8:	4264616f 	rsbmi	r6, r4, #-1073741797	; 0xc000001b
    12ac:	6b636f6c 	blvs	18dd064 <__Stack_Size+0x18dc864>
    12b0:	006e654c 	rsbeq	r6, lr, ip, asr #10
    12b4:	5f554644 	svcpl	0x00554644
    12b8:	4f4c5055 	svcmi	0x004c5055
    12bc:	465f4441 	ldrbmi	r4, [pc], -r1, asr #8
    12c0:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    12c4:	3858305f 	ldmdacc	r8, {r0, r1, r2, r3, r4, r6, ip, sp}^
    12c8:	30383030 	eorscc	r3, r8, r0, lsr r0
    12cc:	44003030 	strmi	r3, [r0], #-48	; 0x30
    12d0:	555f5546 	ldrbpl	r5, [pc, #-1350]	; d92 <__Stack_Size+0x592>
    12d4:	414f4c50 	cmpmi	pc, r0, asr ip	; <UNPREDICTABLE>
    12d8:	4f4e5f44 	svcmi	0x004e5f44
    12dc:	7500454e 	strvc	r4, [r0, #-1358]	; 0x54e
    12e0:	46726573 			; <UNDEFINED> instruction: 0x46726573
    12e4:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
    12e8:	4c657261 	sfmmi	f7, 2, [r5], #-388	; 0xfffffe7c
    12ec:	64006e65 	strvs	r6, [r0], #-3685	; 0xe65
    12f0:	70417566 	subvc	r7, r1, r6, ror #10
    12f4:	61745370 	cmnvs	r4, r0, ror r3
    12f8:	00737574 	rsbseq	r7, r3, r4, ror r5
    12fc:	5546445f 	strbpl	r4, [r6, #-1119]	; 0x45f
    1300:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1304:	6c007375 	stcvs	3, cr7, [r0], {117}	; 0x75
    1308:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    130c:	66640068 	strbtvs	r0, [r4], -r8, rrx
    1310:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
    1314:	61745379 	cmnvs	r4, r9, ror r3
    1318:	62006574 	andvs	r6, r0, #116, 10	; 0x1d000000
    131c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1320:	64007375 	strvs	r7, [r0], #-885	; 0x375
    1324:	6f437566 	svcvs	0x00437566
    1328:	4e447970 	mcrmi	9, 2, r7, cr4, cr0, {3}
    132c:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
    1330:	50776200 	rsbspl	r6, r7, r0, lsl #4
    1334:	546c6c6f 	strbtpl	r6, [ip], #-3183	; 0xc6f
    1338:	6f656d69 	svcvs	0x00656d69
    133c:	00307475 	eorseq	r7, r0, r5, ror r4
    1340:	6f507762 	svcvs	0x00507762
    1344:	69546c6c 	ldmdbvs	r4, {r2, r3, r5, r6, sl, fp, sp, lr}^
    1348:	756f656d 	strbvc	r6, [pc, #-1389]!	; de3 <__Stack_Size+0x5e3>
    134c:	62003174 	andvs	r3, r0, #116, 2
    1350:	6c6f5077 	stclvs	0, cr5, [pc], #-476	; 117c <__Stack_Size+0x97c>
    1354:	6d69546c 	cfstrdvs	mvd5, [r9, #-432]!	; 0xfffffe50
    1358:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    135c:	45420032 	strbmi	r0, [r2, #-50]	; 0x32
    1360:	4e4e4947 	cdpmi	9, 4, cr4, cr14, cr7, {2}
    1364:	00474e49 	subeq	r4, r7, r9, asr #28
    1368:	43756664 	cmnmi	r5, #100, 12	; 0x6400000
    136c:	5379706f 	cmnpl	r9, #111	; 0x6f
    1370:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1374:	6f630073 	svcvs	0x00630073
    1378:	635f6564 	cmpvs	pc, #100, 10	; 0x19000000
    137c:	5f79706f 	svcpl	0x0079706f
    1380:	6b636f6c 	blvs	18dd138 <__Stack_Size+0x18dc938>
    1384:	55464400 	strbpl	r4, [r6, #-1024]	; 0x400
    1388:	4c50555f 	cfldr64mi	mvdx5, [r0], {95}	; 0x5f
    138c:	5f44414f 	svcpl	0x0044414f
    1390:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1394:	58305f48 	ldmdapl	r0!, {r3, r6, r8, r9, sl, fp, ip, lr}
    1398:	35303038 	ldrcc	r3, [r0, #-56]!	; 0x38
    139c:	00303030 	eorseq	r3, r0, r0, lsr r0
    13a0:	47756664 	ldrbmi	r6, [r5, -r4, ror #12]!
    13a4:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465
    13a8:	00657461 	rsbeq	r7, r5, r1, ror #8
    13ac:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
    13b0:	45707041 	ldrbmi	r7, [r0, #-65]!	; 0x41
    13b4:	4d00646e 	cfstrsmi	mvf6, [r0, #-440]	; 0xfffffe48
    13b8:	4c444449 	cfstrdmi	mvd4, [r4], {73}	; 0x49
    13bc:	73750045 	cmnvc	r5, #69	; 0x45
    13c0:	70557265 	subsvc	r7, r5, r5, ror #4
    13c4:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
    13c8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    13cc:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
    13d0:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    13d4:	66640065 	strbtvs	r0, [r4], -r5, rrx
    13d8:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
    13dc:	66754279 			; <UNDEFINED> instruction: 0x66754279
    13e0:	54726566 	ldrbtpl	r6, [r2], #-1382	; 0x566
    13e4:	6578456f 	ldrbvs	r4, [r8, #-1391]!	; 0x56f
    13e8:	53620063 	cmnpl	r2, #99	; 0x63
    13ec:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    13f0:	35353200 	ldrcc	r3, [r5, #-512]!	; 0x200
    13f4:	632f3931 	teqvs	pc, #802816	; 0xc4000
    13f8:	31353532 	teqcc	r5, r2, lsr r5
    13fc:	00632e39 	rsbeq	r2, r3, r9, lsr lr
    1400:	645f6378 	ldrbvs	r6, [pc], #-888	; 1408 <__Stack_Size+0xc08>
    1404:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    1408:	32660065 	rsbcc	r0, r6, #101	; 0x65
    140c:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1410:	706f635f 	rsbvc	r6, pc, pc, asr r3	; <UNPREDICTABLE>
    1414:	32630079 	rsbcc	r0, r3, #121	; 0x79
    1418:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    141c:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
    1420:	00785f65 	rsbseq	r5, r8, r5, ror #30
    1424:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    1428:	615f3931 	cmpvs	pc, r1, lsr r9	; <UNPREDICTABLE>
    142c:	66006464 	strvs	r6, [r0], -r4, ror #8
    1430:	31353532 	teqcc	r5, r2, lsr r5
    1434:	756d5f39 	strbvc	r5, [sp, #-3897]!	; 0xf39
    1438:	00635f6c 	rsbeq	r5, r3, ip, ror #30
    143c:	71733178 	cmnvc	r3, r8, ror r1
    1440:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    1444:	5f393135 	svcpl	0x00393135
    1448:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    144c:	7173317a 	cmnvc	r3, sl, ror r1
    1450:	35326300 	ldrcc	r6, [r2, #-768]!	; 0x300
    1454:	5f393135 	svcpl	0x00393135
    1458:	6c756d73 	ldclvs	13, cr6, [r5], #-460	; 0xfffffe34
    145c:	32660074 	rsbcc	r0, r6, #116	; 0x74
    1460:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1464:	6275735f 	rsbsvs	r7, r5, #2080374785	; 0x7c000001
    1468:	7a317800 	bvc	c5f470 <__Stack_Size+0xc5ec70>
    146c:	32660031 	rsbcc	r0, r6, #49	; 0x31
    1470:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1474:	726f6e5f 	rsbvc	r6, pc, #1520	; 0x5f0
    1478:	696c616d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    147c:	6600657a 			; <UNDEFINED> instruction: 0x6600657a
    1480:	31353532 	teqcc	r5, r2, lsr r5
    1484:	756d5f39 	strbvc	r5, [sp, #-3897]!	; 0xf39
    1488:	645f5f6c 	ldrbvs	r5, [pc], #-3948	; 1490 <__Stack_Size+0xc90>
    148c:	69747369 	ldmdbvs	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
    1490:	0074636e 	rsbseq	r6, r4, lr, ror #6
    1494:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    1498:	695f3931 	ldmdbvs	pc, {r0, r4, r5, r8, fp, ip, sp}^	; <UNPREDICTABLE>
    149c:	5f5f766e 	svcpl	0x005f766e
    14a0:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0x964
    14a4:	74636e69 	strbtvc	r6, [r3], #-3689	; 0xe69
    14a8:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    14ac:	5f393135 	svcpl	0x00393135
    14b0:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0x573
    14b4:	72007463 	andvc	r7, r0, #1660944384	; 0x63000000
    14b8:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
    14bc:	63780074 	cmnvs	r8, #116	; 0x74
    14c0:	6669645f 			; <UNDEFINED> instruction: 0x6669645f
    14c4:	64646166 	strbtvs	r6, [r4], #-358	; 0x166
    14c8:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 14d0 <__Stack_Size+0xcd0>
    14cc:	32660070 	rsbcc	r0, r6, #112	; 0x70
    14d0:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    14d4:	0071655f 	rsbseq	r6, r1, pc, asr r5
    14d8:	756f5f72 	strbvc	r5, [pc, #-3954]!	; 56e <_Minimum_Stack_Size+0x46e>
    14dc:	656d0074 	strbvs	r0, [sp, #-116]!	; 0x74
    14e0:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    14e4:	32646500 	rsbcc	r6, r4, #0, 10
    14e8:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    14ec:	6361705f 	cmnvs	r1, #95	; 0x5f
    14f0:	6170006b 	cmnvs	r0, fp, rrx
    14f4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    14f8:	32646500 	rsbcc	r6, r4, #0, 10
    14fc:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1500:	6464615f 	strbtvs	r6, [r4], #-351	; 0x15f
    1504:	32646500 	rsbcc	r6, r4, #0, 10
    1508:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    150c:	7972745f 	ldmdbvc	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    1510:	706e755f 	rsbvc	r7, lr, pc, asr r5
    1514:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1518:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    151c:	5f393135 	svcpl	0x00393135
    1520:	6a6f7270 	bvs	1bddee8 <__Stack_Size+0x1bdd6e8>
    1524:	00746365 	rsbseq	r6, r4, r5, ror #6
    1528:	31353532 	teqcc	r5, r2, lsr r5
    152c:	64652f39 	strbtvs	r2, [r5], #-3897	; 0xf39
    1530:	31353532 	teqcc	r5, r2, lsr r5
    1534:	00632e39 	rsbeq	r2, r3, r9, lsr lr
    1538:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    153c:	5f393135 	svcpl	0x00393135
    1540:	6c756d73 	ldclvs	13, cr6, [r5], #-460	; 0xfffffe34
    1544:	32660074 	rsbcc	r0, r6, #116	; 0x74
    1548:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    154c:	616f6c5f 	cmnvs	pc, pc, asr ip	; <UNPREDICTABLE>
    1550:	64650064 	strbtvs	r0, [r5], #-100	; 0x64
    1554:	31353532 	teqcc	r5, r2, lsr r5
    1558:	6e755f39 	mrcvs	15, 3, r5, cr5, cr9, {1}
    155c:	6a6f7270 	bvs	1bddf24 <__Stack_Size+0x1bdd724>
    1560:	00746365 	rsbseq	r6, r4, r5, ror #6
    1564:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    1568:	5f393135 	svcpl	0x00393135
    156c:	7475656e 	ldrbtvc	r6, [r5], #-1390	; 0x56e
    1570:	006c6172 	rsbeq	r6, ip, r2, ror r1
    1574:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    1578:	735f3931 	cmpvc	pc, #802816	; 0xc4000
    157c:	00747271 	rsbseq	r7, r4, r1, ror r2
    1580:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    1584:	6e5f3931 	mrcvs	9, 2, r3, cr15, cr1, {1}
    1588:	65006765 	strvs	r6, [r0, #-1893]	; 0x765
    158c:	35353264 	ldrcc	r3, [r5, #-612]!	; 0x264
    1590:	645f3931 	ldrbvs	r3, [pc], #-2353	; 1598 <__Stack_Size+0xd98>
    1594:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    1598:	64650065 	strbtvs	r0, [r5], #-101	; 0x65
    159c:	31353532 	teqcc	r5, r2, lsr r5
    15a0:	74705f39 	ldrbtvc	r5, [r0], #-3897	; 0xf39
    15a4:	32646500 	rsbcc	r6, r4, #0, 10
    15a8:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    15ac:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
    15b0:	64650065 	strbtvs	r0, [r5], #-101	; 0x65
    15b4:	31353532 	teqcc	r5, r2, lsr r5
    15b8:	6f635f39 	svcvs	0x00635f39
    15bc:	65007970 	strvs	r7, [r0, #-2416]	; 0x970
    15c0:	35353264 	ldrcc	r3, [r5, #-612]!	; 0x264
    15c4:	645f3931 	ldrbvs	r3, [pc], #-2353	; 15cc <__Stack_Size+0xdcc>
    15c8:	32646500 	rsbcc	r6, r4, #0, 10
    15cc:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    15d0:	73006b5f 	movwvc	r6, #2911	; 0xb5f
    15d4:	31356168 	teqcc	r5, r8, ror #2
    15d8:	69665f32 	stmdbvs	r6!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    15dc:	006c616e 	rsbeq	r6, ip, lr, ror #2
    15e0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    15e4:	6f6c625f 	svcvs	0x006c625f
    15e8:	32006b63 	andcc	r6, r0, #101376	; 0x18c00
    15ec:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    15f0:	7364652f 	cmnvc	r4, #197132288	; 0xbc00000
    15f4:	2e6e6769 	cdpcs	7, 6, cr6, cr14, cr9, {3}
    15f8:	64650063 	strbtvs	r0, [r5], #-99	; 0x63
    15fc:	31353532 	teqcc	r5, r2, lsr r5
    1600:	72705f39 	rsbsvc	r5, r0, #57, 30	; 0xe4
    1604:	72617065 	rsbvc	r7, r1, #101	; 0x65
    1608:	68730065 	ldmdavs	r3!, {r0, r2, r5, r6}^
    160c:	32313561 	eorscc	r3, r1, #406847488	; 0x18400000
    1610:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1614:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    1618:	6174735f 	cmnvs	r4, pc, asr r3
    161c:	73006574 	movwvc	r6, #1396	; 0x574
    1620:	31356168 	teqcc	r5, r8, ror #2
    1624:	65675f32 	strbvs	r5, [r7, #-3890]!	; 0xf32
    1628:	78650074 	stmdavc	r5!, {r2, r4, r5, r6}^
    162c:	646e6170 	strbtvs	r6, [lr], #-368	; 0x170
    1630:	79656b5f 	stmdbvc	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}^
    1634:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xf00
    1638:	0070665f 	rsbseq	r6, r0, pc, asr r6
    163c:	72636573 	rsbvc	r6, r3, #482344960	; 0x1cc00000
    1640:	65007465 	strvs	r7, [r0, #-1125]	; 0x465
    1644:	6e617078 	mcrvs	0, 3, r7, cr1, cr8, {3}
    1648:	00646564 	rsbeq	r6, r4, r4, ror #10
    164c:	6b636170 	blvs	18d9c14 <__Stack_Size+0x18d9414>
    1650:	5f006465 	svcpl	0x00006465
    1654:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
    1658:	5f343674 	svcpl	0x00343674
    165c:	72700074 	rsbsvc	r0, r0, #116	; 0x74
    1660:	78696665 	stmdavc	r9!, {r0, r2, r5, r6, r9, sl, sp, lr}^
    1664:	7a69735f 	bvc	1a5e3e8 <__Stack_Size+0x1a5dbe8>
    1668:	64650065 	strbtvs	r0, [r5], #-101	; 0x65
    166c:	31353532 	teqcc	r5, r2, lsr r5
    1670:	726f5f39 	rsbvc	r5, pc, #57, 30	; 0xe4
    1674:	00726564 	rsbseq	r6, r2, r4, ror #10
    1678:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    167c:	665f656d 	ldrbvs	r6, [pc], -sp, ror #10
    1680:	5f6d6f72 	svcpl	0x006d6f72
    1684:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    1688:	61680073 	smcvs	32771	; 0x8003
    168c:	6d5f6873 	ldclvs	8, cr6, [pc, #-460]	; 14c8 <__Stack_Size+0xcc8>
    1690:	61737365 	cmnvs	r3, r5, ror #6
    1694:	68006567 	stmdavs	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    1698:	5f687361 	svcpl	0x00687361
    169c:	68746977 	ldmdavs	r4!, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    16a0:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0x5f
    16a4:	00786966 	rsbseq	r6, r8, r6, ror #18
    16a8:	69736465 	ldmdbvs	r3!, {r0, r2, r5, r6, sl, sp, lr}^
    16ac:	735f6e67 	cmpvc	pc, #1648	; 0x670
    16b0:	745f6365 	ldrbvc	r6, [pc], #-869	; 16b8 <__Stack_Size+0xeb8>
    16b4:	75705f6f 	ldrbvc	r5, [r0, #-3951]!	; 0xf6f
    16b8:	6d730062 	ldclvs	0, cr0, [r3, #-392]!	; 0xfffffe78
    16bc:	6361705f 	cmnvs	r1, #95	; 0x5f
    16c0:	6873006b 	ldmdavs	r3!, {r0, r1, r3, r5, r6}^
    16c4:	32313561 	eorscc	r3, r1, #406847488	; 0x18400000
    16c8:	6174735f 	cmnvs	r4, pc, asr r3
    16cc:	73006574 	movwvc	r6, #1396	; 0x574
    16d0:	31356168 	teqcc	r5, r8, ror #2
    16d4:	6e695f32 	mcrvs	15, 3, r5, cr9, cr2, {1}
    16d8:	73007469 	movwvc	r7, #1129	; 0x469
    16dc:	31356168 	teqcc	r5, r8, ror #2
    16e0:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
    16e4:	006b636f 	rsbeq	r6, fp, pc, ror #6
    16e8:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    16ec:	7a5f3931 	bvc	17cfbb8 <__Stack_Size+0x17cf3b8>
    16f0:	006f7265 	rsbeq	r7, pc, r5, ror #4
    16f4:	32707865 	rsbscc	r7, r0, #6619136	; 0x650000
    16f8:	00333235 	eorseq	r3, r3, r5, lsr r2
    16fc:	31353532 	teqcc	r5, r2, lsr r5
    1700:	32662f39 	rsbcc	r2, r6, #57, 30	; 0xe4
    1704:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1708:	6600632e 	strvs	r6, [r0], -lr, lsr #6
    170c:	31353532 	teqcc	r5, r2, lsr r5
    1710:	6e695f39 	mcrvs	15, 3, r5, cr9, cr9, {1}
    1714:	32660076 	rsbcc	r0, r6, #118	; 0x76
    1718:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    171c:	6c756d5f 	ldclvs	13, cr6, [r5], #-380	; 0xfffffe84
    1720:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    1724:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
    1728:	6d006e6f 	stcvs	14, cr6, [r0, #-444]	; 0xfffffe44
    172c:	73756e69 	cmnvc	r5, #1680	; 0x690
    1730:	72700070 	rsbsvc	r0, r0, #112	; 0x70
    1734:	616f6c65 	cmnvs	pc, r5, ror #24
    1738:	79625f64 	stmdbvc	r2!, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    173c:	00736574 	rsbseq	r6, r3, r4, ror r5
    1740:	6c657270 	sfmvs	f7, 2, [r5], #-448	; 0xfffffe40
    1744:	5f64616f 	svcpl	0x0064616f
    1748:	73746962 	cmnvc	r4, #1605632	; 0x188000
    174c:	72706600 	rsbsvc	r6, r0, #0, 12
    1750:	5f656d69 	svcpl	0x00656d69
    1754:	00766e69 	rsbseq	r6, r6, r9, ror #28
    1758:	74696272 	strbtvc	r6, [r9], #-626	; 0x272
    175c:	6c700073 	ldclvs	0, cr0, [r0], #-460	; 0xfffffe34
    1760:	00617375 	rsbeq	r7, r1, r5, ror r3
    1764:	66696873 			; <UNDEFINED> instruction: 0x66696873
    1768:	5f6e5f74 	svcpl	0x006e5f74
    176c:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1770:	72706600 	rsbsvc	r6, r0, #0, 12
    1774:	5f656d69 	svcpl	0x00656d69
    1778:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0x573
    177c:	66007463 	strvs	r7, [r0], -r3, ror #8
    1780:	6d697270 	sfmvs	f7, 2, [r9, #-448]!	; 0xfffffe40
    1784:	75735f65 	ldrbvc	r5, [r3, #-3941]!	; 0xf65
    1788:	70660062 	rsbvc	r0, r6, r2, rrx
    178c:	656d6972 	strbvs	r6, [sp, #-2418]!	; 0x972
    1790:	6464615f 	strbtvs	r6, [r4], #-351	; 0x15f
    1794:	6e696d00 	cdpvs	13, 6, cr6, cr9, cr0, {0}
    1798:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    179c:	646f6d00 	strbtvs	r6, [pc], #-3328	; 17a4 <__Stack_Size+0xfa4>
    17a0:	73756c75 	cmnvc	r5, #29952	; 0x7500
    17a4:	72706600 	rsbsvc	r6, r0, #0, 12
    17a8:	5f656d69 	svcpl	0x00656d69
    17ac:	006c756d 	rsbeq	r7, ip, sp, ror #10
    17b0:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    17b4:	7a5f656d 	bvc	17dad70 <__Stack_Size+0x17da570>
    17b8:	006f7265 	rsbeq	r7, pc, r5, ror #4
    17bc:	5f776172 	svcpl	0x00776172
    17c0:	5f797274 	svcpl	0x00797274
    17c4:	00627573 	rsbeq	r7, r2, r3, ror r5
    17c8:	6d697270 	sfmvs	f7, 2, [r9, #-448]!	; 0xfffffe40
    17cc:	736d5f65 	cmnvc	sp, #404	; 0x194
    17d0:	70660062 	rsbvc	r0, r6, r2, rrx
    17d4:	656d6972 	strbvs	r6, [sp, #-2418]!	; 0x972
    17d8:	0071655f 	rsbseq	r6, r1, pc, asr r5
    17dc:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    17e0:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
    17e4:	0064616f 	rsbeq	r6, r4, pc, ror #2
    17e8:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    17ec:	635f656d 	cmpvs	pc, #457179136	; 0x1b400000
    17f0:	0079706f 	rsbseq	r7, r9, pc, rrx
    17f4:	31353532 	teqcc	r5, r2, lsr r5
    17f8:	70662f39 	rsbvc	r2, r6, r9, lsr pc
    17fc:	656d6972 	strbvs	r6, [sp, #-2418]!	; 0x972
    1800:	7000632e 	andvc	r6, r0, lr, lsr #6
    1804:	6f6c6572 	svcvs	0x006c6572
    1808:	745f6461 	ldrbvc	r6, [pc], #-1121	; 1810 <__Stack_Size+0x1010>
    180c:	6c61746f 	cfstrdvs	mvd7, [r1], #-444	; 0xfffffe44
    1810:	72706600 	rsbsvc	r6, r0, #0, 12
    1814:	5f656d69 	svcpl	0x00656d69
    1818:	6d726f6e 	ldclvs	15, cr6, [r2, #-440]!	; 0xfffffe48
    181c:	7a696c61 	bvc	1a5c9a8 <__Stack_Size+0x1a5c1a8>
    1820:	61720065 	cmnvs	r2, r5, rrx
    1824:	64615f77 	strbtvs	r5, [r1], #-3959	; 0xf77
    1828:	70660064 	rsbvc	r0, r6, r4, rrx
    182c:	656d6972 	strbvs	r6, [sp, #-2418]!	; 0x972
    1830:	656e6f5f 	strbvs	r6, [lr, #-3935]!	; 0xf5f
    1834:	35353200 	ldrcc	r3, [r5, #-512]!	; 0x200
    1838:	6d2f3931 	stcvs	9, cr3, [pc, #-196]!	; 177c <__Stack_Size+0xf7c>
    183c:	6870726f 	ldmdavs	r0!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    1840:	31353532 	teqcc	r5, r2, lsr r5
    1844:	00632e39 	rsbeq	r2, r3, r9, lsr lr
    1848:	756c7079 	strbvc	r7, [ip, #-121]!	; 0x79
    184c:	6f6d0073 	svcvs	0x006d0073
    1850:	32687072 	rsbcc	r7, r8, #114	; 0x72
    1854:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1858:	6d32655f 	cfldr32vs	mvfx6, [r2, #-380]!	; 0xfffffe84
    185c:	32786d00 	rsbscc	r6, r8, #0, 26
    1860:	6d007965 	stcvs	9, cr7, [r0, #-404]	; 0xfffffe6c
    1864:	67746e6f 	ldrbvs	r6, [r4, -pc, ror #28]!
    1868:	72656d6f 	rsbvc	r6, r5, #7104	; 0x1bc0
    186c:	79650079 	stmdbvc	r5!, {r0, r3, r4, r5, r6}^
    1870:	00786532 	rsbseq	r6, r8, r2, lsr r5
    1874:	70726f6d 	rsbsvc	r6, r2, sp, ror #30
    1878:	35353268 	ldrcc	r3, [r5, #-616]!	; 0x268
    187c:	6d5f3931 	ldclvs	9, cr3, [pc, #-196]	; 17c0 <__Stack_Size+0xfc0>
    1880:	79006532 	stmdbvc	r0, {r1, r4, r5, r8, sl, sp, lr}
    1884:	756e696d 	strbvc	r6, [lr, #-2413]!	; 0x96d
    1888:	736d0073 	cmnvc	sp, #115	; 0x73
    188c:	6e656c67 	cdpvs	12, 6, cr6, cr5, cr7, {3}
    1890:	66656c00 	strbtvs	r6, [r5], -r0, lsl #24
    1894:	61640074 	smcvs	16388	; 0x4004
    1898:	66006174 			; <UNDEFINED> instruction: 0x66006174
    189c:	006c6c69 	rsbeq	r6, ip, r9, ror #24
    18a0:	6e646170 	mcrvs	1, 3, r6, cr4, cr0, {3}
    18a4:	67696800 	strbvs	r6, [r9, -r0, lsl #16]!
    18a8:	35320068 	ldrcc	r0, [r2, #-104]!	; 0x68
    18ac:	2f393135 	svccs	0x00393135
    18b0:	32616873 	rsbcc	r6, r1, #7536640	; 0x730000
    18b4:	632e3635 	teqvs	lr, #55574528	; 0x3500000
    18b8:	61687300 	cmnvs	r8, r0, lsl #6
    18bc:	5f363532 	svcpl	0x00363532
    18c0:	636f7270 	cmnvs	pc, #112, 4
    18c4:	00737365 	rsbseq	r7, r3, r5, ror #6
    18c8:	706d6574 	rsbvc	r6, sp, r4, ror r5
    18cc:	65740031 	ldrbvs	r0, [r4, #-49]!	; 0x31
    18d0:	0032706d 	eorseq	r7, r2, sp, rrx
    18d4:	32616873 	rsbcc	r6, r1, #7536640	; 0x730000
    18d8:	705f3635 	subsvc	r3, pc, r5, lsr r6	; <UNPREDICTABLE>
    18dc:	69646461 	stmdbvs	r4!, {r0, r5, r6, sl, sp, lr}^
    18e0:	6400676e 	strvs	r6, [r0], #-1902	; 0x76e
    18e4:	73656769 	cmnvc	r5, #27525120	; 0x1a40000
    18e8:	616c0074 	smcvs	49156	; 0xc004
    18ec:	74007473 	strvc	r7, [r0], #-1139	; 0x473
    18f0:	6c61746f 	cfstrdvs	mvd7, [r1], #-444	; 0xfffffe44
    18f4:	7a69735f 	bvc	1a5e678 <__Stack_Size+0x1a5de78>
    18f8:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
    18fc:	6c003531 	cfstr32vs	mvfx3, [r0], {49}	; 0x31
    1900:	5f747361 	svcpl	0x00747361
    1904:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
    1908:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    190c:	6f720070 	svcvs	0x00720070
    1910:	00343674 	eorseq	r3, r4, r4, ror r6
    1914:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
    1918:	00343665 	eorseq	r3, r4, r5, ror #12
    191c:	31353532 	teqcc	r5, r2, lsr r5
    1920:	68732f39 	ldmdavs	r3!, {r0, r3, r4, r5, r8, r9, sl, fp, sp}^
    1924:	32313561 	eorscc	r3, r1, #406847488	; 0x18400000
    1928:	6c00632e 	stcvs	3, cr6, [r0], {46}	; 0x2e
    192c:	3664616f 	strbtcc	r6, [r4], -pc, ror #2
    1930:	6f720034 	svcvs	0x00720034
    1934:	5f646e75 	svcpl	0x00646e75
    1938:	7246006b 	subvc	r0, r6, #107	; 0x6b
    193c:	73556565 	cmpvc	r5, #423624704	; 0x19400000
    1940:	75427265 	strbvc	r7, [r2, #-613]	; 0x265
    1944:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1948:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    194c:	74537854 	ldrbvc	r7, [r3], #-2132	; 0x854
    1950:	536c6c61 	cmnpl	ip, #24832	; 0x6100
    1954:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1958:	65530073 	ldrbvs	r0, [r3, #-115]	; 0x73
    195c:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    1960:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    1964:	64413166 	strbvs	r3, [r1], #-358	; 0x166
    1968:	53007264 	movwpl	r7, #612	; 0x264
    196c:	50457465 	subpl	r7, r5, r5, ror #8
    1970:	61567854 	cmpvs	r6, r4, asr r8
    1974:	0064696c 	rsbeq	r6, r4, ip, ror #18
    1978:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
    197c:	6c42756f 	cfstr64vs	mvdx7, [r2], {111}	; 0x6f
    1980:	66754265 	ldrbtvs	r4, [r5], -r5, ror #4
    1984:	53504566 	cmppl	r0, #427819008	; 0x19800000
    1988:	6c6c6174 	stfvse	f6, [ip], #-464	; 0xfffffe30
    198c:	5f504500 	svcpl	0x00504500
    1990:	46554244 	ldrbmi	r4, [r5], -r4, asr #4
    1994:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xf5f
    1998:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    199c:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
    19a0:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    19a4:	54007375 	strpl	r7, [r0], #-885	; 0x375
    19a8:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
    19ac:	4f544465 	svcmi	0x00544465
    19b0:	58545f47 	ldmdapl	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    19b4:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    19b8:	64415045 	strbvs	r5, [r1], #-69	; 0x45
    19bc:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    19c0:	455f0073 	ldrbmi	r0, [pc, #-115]	; 1955 <__Stack_Size+0x1155>
    19c4:	42445f50 	submi	r5, r4, #80, 30	; 0x140
    19c8:	445f4655 	ldrbmi	r4, [pc], #-1621	; 19d0 <__Stack_Size+0x11d0>
    19cc:	53005249 	movwpl	r5, #585	; 0x249
    19d0:	53497465 	movtpl	r7, #37989	; 0x9465
    19d4:	42005254 	andmi	r5, r0, #84, 4	; 0x40000005
    19d8:	53657479 	cmnpl	r5, #2030043136	; 0x79000000
    19dc:	00706177 	rsbseq	r6, r0, r7, ror r1
    19e0:	6c424e77 	mcrrvs	14, 7, r4, r2, cr7
    19e4:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    19e8:	656c4300 	strbvs	r4, [ip, #-768]!	; 0x300
    19ec:	54447261 	strbpl	r7, [r4], #-609	; 0x261
    19f0:	525f474f 	subspl	r4, pc, #20709376	; 0x13c0000
    19f4:	41620058 	qdsubmi	r0, r8, r2
    19f8:	00726464 	rsbseq	r6, r2, r4, ror #8
    19fc:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1a00:	0052544e 	subseq	r5, r2, lr, asr #8
    1a04:	52746547 	rsbspl	r6, r4, #297795584	; 0x11c00000
    1a08:	61745378 	cmnvs	r4, r8, ror r3
    1a0c:	74536c6c 	ldrbvc	r6, [r3], #-3180	; 0xc6c
    1a10:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1a14:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1a18:	44444144 	strbmi	r4, [r4], #-324	; 0x144
    1a1c:	43770052 	cmnmi	r7, #82	; 0x52
    1a20:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1a24:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1a28:	64415045 	strbvs	r5, [r1], #-69	; 0x45
    1a2c:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    1a30:	65530073 	ldrbvs	r0, [r3, #-115]	; 0x73
    1a34:	52504574 	subspl	r4, r0, #116, 10	; 0x1d000000
    1a38:	61745378 	cmnvs	r4, r8, ror r3
    1a3c:	00737574 	rsbseq	r7, r3, r4, ror r5
    1a40:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
    1a44:	5444656c 	strbpl	r6, [r4], #-1388	; 0x56c
    1a48:	525f474f 	subspl	r4, pc, #20709376	; 0x13c0000
    1a4c:	65530058 	ldrbvs	r0, [r3, #-88]	; 0x58
    1a50:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    1a54:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    1a58:	64416666 	strbvs	r6, [r1], #-1638	; 0x666
    1a5c:	53007264 	movwpl	r7, #612	; 0x264
    1a60:	50457465 	subpl	r7, r5, r5, ror #8
    1a64:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1a68:	5f504500 	svcpl	0x00504500
    1a6c:	46554244 	ldrbmi	r4, [r5], -r4, asr #4
    1a70:	004e495f 	subeq	r4, lr, pc, asr r9
    1a74:	74655277 	strbtvc	r5, [r5], #-631	; 0x277
    1a78:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1a7c:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
    1a80:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1a84:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1a88:	62445045 	subvs	r5, r4, #69	; 0x45
    1a8c:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    1a90:	64644130 	strbtvs	r4, [r4], #-304	; 0x130
    1a94:	65470072 	strbvs	r0, [r7, #-114]	; 0x72
    1a98:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    1a9c:	61745378 	cmnvs	r4, r8, ror r3
    1aa0:	00737574 	rsbseq	r7, r3, r4, ror r5
    1aa4:	72694462 	rsbvc	r4, r9, #1644167168	; 0x62000000
    1aa8:	79547700 	ldmdbvc	r4, {r8, r9, sl, ip, sp, lr}^
    1aac:	75006570 	strvc	r6, [r0, #-1392]	; 0x570
    1ab0:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    1ab4:	752f6269 	strvc	r6, [pc, #-617]!	; 1853 <__Stack_Size+0x1053>
    1ab8:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
    1abc:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
    1ac0:	50450063 	subpl	r0, r5, r3, rrx
    1ac4:	5542445f 	strbpl	r4, [r2, #-1119]	; 0x45f
    1ac8:	52455f46 	subpl	r5, r5, #280	; 0x118
    1acc:	65470052 	strbvs	r0, [r7, #-82]	; 0x52
    1ad0:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    1ad4:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    1ad8:	72694466 	rsbvc	r4, r9, #1711276032	; 0x66000000
    1adc:	75427700 	strbvc	r7, [r2, #-1792]	; 0x700
    1ae0:	64413166 	strbvs	r3, [r1], #-358	; 0x166
    1ae4:	77007264 	strvc	r7, [r0, -r4, ror #4]
    1ae8:	00577753 	subseq	r7, r7, r3, asr r7
    1aec:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1af0:	756f4450 	strbvc	r4, [pc, #-1104]!	; 16a8 <__Stack_Size+0xea8>
    1af4:	42656c62 	rsbmi	r6, r5, #25088	; 0x6200
    1af8:	00666675 	rsbeq	r6, r6, r5, ror r6
    1afc:	6f576f54 	svcvs	0x00576f54
    1b00:	53006472 	movwpl	r6, #1138	; 0x472
    1b04:	50457465 	subpl	r7, r5, r5, ror #8
    1b08:	64417854 	strbvs	r7, [r1], #-2132	; 0x854
    1b0c:	47007264 	strmi	r7, [r0, -r4, ror #4]
    1b10:	4320554e 	teqmi	r0, #327155712	; 0x13800000
    1b14:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
    1b18:	3220342e 	eorcc	r3, r0, #771751936	; 0x2e000000
    1b1c:	30343130 	eorscc	r3, r4, r0, lsr r1
    1b20:	20353237 	eorscs	r3, r5, r7, lsr r2
    1b24:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
    1b28:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
    1b2c:	415b2029 	cmpmi	fp, r9, lsr #32
    1b30:	652f4d52 	strvs	r4, [pc, #-3410]!	; de6 <__Stack_Size+0x5e6>
    1b34:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    1b38:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
    1b3c:	2d385f34 	ldccs	15, cr5, [r8, #-208]!	; 0xffffff30
    1b40:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
    1b44:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
    1b48:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    1b4c:	206e6f69 	rsbcs	r6, lr, r9, ror #30
    1b50:	31333132 	teqcc	r3, r2, lsr r1
    1b54:	205d3734 	subscs	r3, sp, r4, lsr r7
    1b58:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
    1b5c:	20626d75 	rsbcs	r6, r2, r5, ror sp
    1b60:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
    1b64:	6f633d75 	svcvs	0x00633d75
    1b68:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    1b6c:	20336d2d 	eorscs	r6, r3, sp, lsr #26
    1b70:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
    1b74:	2d626d75 	stclcs	13, cr6, [r2, #-468]!	; 0xfffffe2c
    1b78:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    1b7c:	726f7772 	rsbvc	r7, pc, #29884416	; 0x1c80000
    1b80:	672d206b 	strvs	r2, [sp, -fp, rrx]!
    1b84:	734f2d20 	movtvc	r2, #64800	; 0xfd20
    1b88:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
    1b8c:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
    1b90:	2d6e6f69 	stclcs	15, cr6, [lr, #-420]!	; 0xfffffe5c
    1b94:	74636573 	strbtvc	r6, [r3], #-1395	; 0x573
    1b98:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    1b9c:	64662d20 	strbtvs	r2, [r6], #-3360	; 0xd20
    1ba0:	2d617461 	cfstrdcs	mvd7, [r1, #-388]!	; 0xfffffe7c
    1ba4:	74636573 	strbtvc	r6, [r3], #-1395	; 0x573
    1ba8:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    1bac:	656c4300 	strbvs	r4, [ip, #-768]!	; 0x300
    1bb0:	50457261 	subpl	r7, r5, r1, ror #4
    1bb4:	62756f44 	rsbsvs	r6, r5, #68, 30	; 0x110
    1bb8:	7542656c 	strbvc	r6, [r2, #-1388]	; 0x56c
    1bbc:	47006666 	strmi	r6, [r0, -r6, ror #12]
    1bc0:	50457465 	subpl	r7, r5, r5, ror #8
    1bc4:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    1bc8:	41316675 	teqmi	r1, r5, ror r6
    1bcc:	00726464 	rsbseq	r6, r2, r4, ror #8
    1bd0:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1bd4:	70795450 	rsbsvc	r5, r9, r0, asr r4
    1bd8:	6c430065 	mcrrvs	0, 6, r0, r3, cr5
    1bdc:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0x165
    1be0:	54435f50 	strbpl	r5, [r3], #-3920	; 0xf50
    1be4:	58525f52 	ldmdapl	r2, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    1be8:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1bec:	62445045 	subvs	r5, r4, #69	; 0x45
    1bf0:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    1bf4:	756f4366 	strbvc	r4, [pc, #-870]!	; 1896 <__Stack_Size+0x1096>
    1bf8:	5300746e 	movwpl	r7, #1134	; 0x46e
    1bfc:	50457465 	subpl	r7, r5, r5, ror #8
    1c00:	4e494b5f 	vmovmi.8	d9[2], r4
    1c04:	65530044 	ldrbvs	r0, [r3, #-68]	; 0x44
    1c08:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    1c0c:	756f4378 	strbvc	r4, [pc, #-888]!	; 189c <__Stack_Size+0x109c>
    1c10:	4300746e 	movwmi	r7, #1134	; 0x46e
    1c14:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1c18:	4b5f5045 	blmi	17d5d34 <__Stack_Size+0x17d5534>
    1c1c:	00444e49 	subeq	r4, r4, r9, asr #28
    1c20:	42746547 	rsbsmi	r6, r4, #297795584	; 0x11c00000
    1c24:	4c424154 	stfmie	f4, [r2], {84}	; 0x54
    1c28:	65470045 	strbvs	r0, [r7, #-69]	; 0x45
    1c2c:	54534974 	ldrbpl	r4, [r3], #-2420	; 0x974
    1c30:	52770052 	rsbspl	r0, r7, #82	; 0x52
    1c34:	61566765 	cmpvs	r6, r5, ror #14
    1c38:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1c3c:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1c40:	4f50444e 	svcmi	0x0050444e
    1c44:	00544e49 	subseq	r4, r4, r9, asr #28
    1c48:	64644177 	strbtvs	r4, [r4], #-375	; 0x177
    1c4c:	65470072 	strbvs	r0, [r7, #-114]	; 0x72
    1c50:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    1c54:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    1c58:	6f433066 	svcvs	0x00433066
    1c5c:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1c60:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
    1c64:	52444441 	subpl	r4, r4, #1090519040	; 0x41000000
    1c68:	77647000 	strbvc	r7, [r4, -r0]!
    1c6c:	00676552 	rsbeq	r6, r7, r2, asr r5
    1c70:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1c74:	756f4350 	strbvc	r4, [pc, #-848]!	; 192c <__Stack_Size+0x112c>
    1c78:	7852746e 	ldmdavc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1c7c:	00676552 	rsbeq	r6, r7, r2, asr r5
    1c80:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1c84:	43785250 	cmnmi	r8, #80, 4
    1c88:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1c8c:	65546200 	ldrbvs	r6, [r4, #-512]	; 0x200
    1c90:	5300706d 	movwpl	r7, #109	; 0x6d
    1c94:	4e437465 	cdpmi	4, 4, cr7, cr3, cr5, {3}
    1c98:	53005254 	movwpl	r5, #596	; 0x254
    1c9c:	54427465 	strbpl	r7, [r2], #-1125	; 0x465
    1ca0:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
    1ca4:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1ca8:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    1cac:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1cb0:	6c430074 	mcrrvs	0, 7, r0, r3, cr4
    1cb4:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0x165
    1cb8:	54435f50 	strbpl	r5, [r3], #-3920	; 0xf50
    1cbc:	58545f52 	ldmdapl	r4, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    1cc0:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1cc4:	62445045 	subvs	r5, r4, #69	; 0x45
    1cc8:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    1ccc:	756f4331 	strbvc	r4, [pc, #-817]!	; 19a3 <__Stack_Size+0x11a3>
    1cd0:	5300746e 	movwpl	r7, #1134	; 0x46e
    1cd4:	50457465 	subpl	r7, r5, r5, ror #8
    1cd8:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    1cdc:	43306675 	teqmi	r0, #122683392	; 0x7500000
    1ce0:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1ce4:	75427700 	strbvc	r7, [r2, #-1792]	; 0x700
    1ce8:	64413066 	strbvs	r3, [r1], #-102	; 0x66
    1cec:	53007264 	movwpl	r7, #612	; 0x264
    1cf0:	535f7465 	cmppl	pc, #1694498816	; 0x65000000
    1cf4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1cf8:	754f5f73 	strbvc	r5, [pc, #-3955]	; d8d <__Stack_Size+0x58d>
    1cfc:	65470074 	strbvs	r0, [r7, #-116]	; 0x74
    1d00:	524e4674 	subpl	r4, lr, #116, 12	; 0x7400000
    1d04:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1d08:	62445045 	subvs	r5, r4, #69	; 0x45
    1d0c:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    1d10:	64644130 	strbtvs	r4, [r4], #-304	; 0x130
    1d14:	6e450072 	mcrvs	0, 2, r0, cr5, cr2, {3}
    1d18:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    1d1c:	445f746e 	ldrbmi	r7, [pc], #-1134	; 1d24 <__Stack_Size+0x1524>
    1d20:	5f474f54 	svcpl	0x00474f54
    1d24:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1d28:	47007375 	smlsdxmi	r0, r5, r3, r7
    1d2c:	50457465 	subpl	r7, r5, r5, ror #8
    1d30:	64417854 	strbvs	r7, [r1], #-2132	; 0x854
    1d34:	43007264 	movwmi	r7, #612	; 0x264
    1d38:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1d3c:	474f5444 	strbmi	r5, [pc, -r4, asr #8]
    1d40:	0058545f 	subseq	r5, r8, pc, asr r4
    1d44:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1d48:	53785450 	cmnpl	r8, #80, 8	; 0x50000000
    1d4c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1d50:	45620073 	strbmi	r0, [r2, #-115]!	; 0x73
    1d54:	6d754e70 	ldclvs	14, cr4, [r5, #-448]!	; 0xfffffe40
    1d58:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1d5c:	50444e45 	subpl	r4, r4, r5, asr #28
    1d60:	544e494f 	strbpl	r4, [lr], #-2383	; 0x94f
    1d64:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1d68:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
    1d6c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1d70:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1d74:	62445045 	subvs	r5, r4, #69	; 0x45
    1d78:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    1d7c:	756f4331 	strbvc	r4, [pc, #-817]!	; 1a53 <__Stack_Size+0x1253>
    1d80:	4300746e 	movwmi	r7, #1134	; 0x46e
    1d84:	485f5254 	ldmdami	pc, {r2, r4, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    1d88:	65530050 	ldrbvs	r0, [r3, #-80]	; 0x50
    1d8c:	30707574 	rsbscc	r7, r0, r4, ror r5
    1d90:	6f72505f 	svcvs	0x0072505f
    1d94:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    1d98:	76615300 	strbtvc	r5, [r1], -r0, lsl #6
    1d9c:	74535265 	ldrbvc	r5, [r3], #-613	; 0x265
    1da0:	00657461 	rsbeq	r7, r5, r1, ror #8
    1da4:	65766153 	ldrbvs	r6, [r6, #-339]!	; 0x153
    1da8:	61745354 	cmnvs	r4, r4, asr r3
    1dac:	77006574 	smlsdxvc	r0, r4, r5, r6
    1db0:	61565045 	cmpvs	r6, r5, asr #32
    1db4:	7375006c 	cmnvc	r5, #108	; 0x6c
    1db8:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1dbc:	73752f62 	cmnvc	r5, #392	; 0x188
    1dc0:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
    1dc4:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1dc8:	5f306e49 	svcpl	0x00306e49
    1dcc:	636f7250 	cmnvs	pc, #80, 4
    1dd0:	00737365 	rsbseq	r7, r3, r5, ror #6
    1dd4:	3074754f 	rsbscc	r7, r4, pc, asr #10
    1dd8:	6f72505f 	svcvs	0x0072505f
    1ddc:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    1de0:	69504500 	ldmdbvs	r0, {r8, sl, lr}^
    1de4:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    1de8:	76615300 	strbtvc	r5, [r1], -r0, lsl #6
    1dec:	61745365 	cmnvs	r4, r5, ror #6
    1df0:	75006574 	strvc	r6, [r0, #-1396]	; 0x574
    1df4:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    1df8:	752f6269 	strvc	r6, [pc, #-617]!	; 1b97 <__Stack_Size+0x1397>
    1dfc:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    1e00:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
    1e04:	55700063 	ldrbpl	r0, [r0, #-99]!	; 0x63
    1e08:	5f726573 	svcpl	0x00726573
    1e0c:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    1e10:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    1e14:	7165525f 	cmnvc	r5, pc, asr r2
    1e18:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
    1e1c:	65440073 	strbvs	r0, [r4, #-115]	; 0x73
    1e20:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    1e24:	666e495f 			; <UNDEFINED> instruction: 0x666e495f
    1e28:	7375006f 	cmnvc	r5, #111	; 0x6f
    1e2c:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1e30:	73752f62 	cmnvc	r5, #392	; 0x188
    1e34:	6f635f62 	svcvs	0x00635f62
    1e38:	632e6572 	teqvs	lr, #478150656	; 0x1c800000
    1e3c:	444e4500 	strbmi	r4, [lr], #-1280	; 0x500
    1e40:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
    1e44:	54535f54 	ldrbpl	r5, [r3], #-3924	; 0xf54
    1e48:	004c4c41 	subeq	r4, ip, r1, asr #24
    1e4c:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0x552
    1e50:	5000746c 	andpl	r7, r0, ip, ror #8
    1e54:	3074736f 	rsbscc	r7, r4, pc, ror #6
    1e58:	6f72505f 	svcvs	0x0072505f
    1e5c:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    1e60:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    1e64:	66754261 	ldrbtvs	r4, [r5], -r1, ror #4
    1e68:	00726566 	rsbseq	r6, r2, r6, ror #10
    1e6c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
    1e70:	64657672 	strbtvs	r7, [r5], #-1650	; 0x672
    1e74:	61745300 	cmnvs	r4, r0, lsl #6
    1e78:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    1e7c:	65535f64 	ldrbvs	r5, [r3, #-3940]	; 0xf64
    1e80:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1e84:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
    1e88:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1e8c:	44006e6f 	strmi	r6, [r0], #-3695	; 0xe6f
    1e90:	53617461 	cmnpl	r1, #1627389952	; 0x61000000
    1e94:	65676174 	strbvs	r6, [r7, #-372]!	; 0x174
    1e98:	44006e49 	strmi	r6, [r0], #-3657	; 0xe49
    1e9c:	43495645 	movtmi	r5, #38469	; 0x9645
    1ea0:	45525f45 	ldrbmi	r5, [r2, #-3909]	; 0xf45
    1ea4:	45544f4d 	ldrbmi	r4, [r4, #-3917]	; 0xf4d
    1ea8:	4b41575f 	blmi	1057c2c <__Stack_Size+0x105742c>
    1eac:	00505545 	subseq	r5, r0, r5, asr #10
    1eb0:	4c415453 	cfstrdmi	mvd5, [r1], {83}	; 0x53
    1eb4:	0044454c 	subeq	r4, r4, ip, asr #10
    1eb8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1ebc:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    1ec0:	69786500 	ldmdbvs	r8!, {r8, sl, sp, lr}^
    1ec4:	6f4e5f74 	svcvs	0x004e5f74
    1ec8:	61746144 	cmnvs	r4, r4, asr #2
    1ecc:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    1ed0:	00307075 	eorseq	r7, r0, r5, ror r0
    1ed4:	6c615677 	stclvs	6, cr5, [r1], #-476	; 0xfffffe24
    1ed8:	00316575 	eorseq	r6, r1, r5, ror r5
    1edc:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
    1ee0:	445f4543 	ldrbmi	r4, [pc], #-1347	; 1ee8 <__Stack_Size+0x16e8>
    1ee4:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    1ee8:	4f545049 	svcmi	0x00545049
    1eec:	54530052 	ldrbpl	r0, [r3], #-82	; 0x52
    1ef0:	474e4952 	smlsldmi	r4, lr, r2, r9
    1ef4:	5345445f 	movtpl	r4, #21599	; 0x545f
    1ef8:	50495243 	subpl	r5, r9, r3, asr #4
    1efc:	00524f54 	subseq	r4, r2, r4, asr pc
    1f00:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1f04:	4d506f54 	ldclmi	15, cr6, [r0, #-336]	; 0xfffffeb0
    1f08:	66754241 	ldrbtvs	r4, [r5], -r1, asr #4
    1f0c:	43726566 	cmnmi	r2, #427819008	; 0x19800000
    1f10:	0079706f 	rsbseq	r7, r9, pc, rrx
    1f14:	65766173 	ldrbvs	r6, [r6, #-371]!	; 0x173
    1f18:	654c725f 	strbvs	r7, [ip, #-607]	; 0x25f
    1f1c:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1f20:	53414c00 	movtpl	r4, #7168	; 0x1c00
    1f24:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    1f28:	5441445f 	strbpl	r4, [r1], #-1119	; 0x45f
    1f2c:	4f4e0041 	svcmi	0x004e0041
    1f30:	72505f50 	subsvc	r5, r0, #80, 30	; 0x140
    1f34:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    1f38:	74530073 	ldrbvc	r0, [r3], #-115	; 0x73
    1f3c:	61646e61 	cmnvs	r4, r1, ror #28
    1f40:	535f6472 	cmppl	pc, #1912602624	; 0x72000000
    1f44:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
    1f48:	66726574 			; <UNDEFINED> instruction: 0x66726574
    1f4c:	00656361 	rsbeq	r6, r5, r1, ror #6
    1f50:	65707845 	ldrbvs	r7, [r0, #-2117]!	; 0x845
    1f54:	535f7463 	cmppl	pc, #1660944384	; 0x63000000
    1f58:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1f5c:	754f5f73 	strbvc	r5, [pc, #-3955]	; ff1 <__Stack_Size+0x7f1>
    1f60:	41500074 	cmpmi	r0, r4, ror r0
    1f64:	00455355 	subeq	r5, r5, r5, asr r3
    1f68:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
    1f6c:	4e747365 	cdpmi	3, 7, cr7, cr4, cr5, {3}
    1f70:	4547006f 	strbmi	r0, [r7, #-111]	; 0x6f
    1f74:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    1f78:	46524554 			; <UNDEFINED> instruction: 0x46524554
    1f7c:	00454341 	subeq	r4, r5, r1, asr #6
    1f80:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    1f84:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    1f88:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    1f8c:	50646e45 	rsbpl	r6, r4, r5, asr #28
    1f90:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
    1f94:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
    1f98:	00657275 	rsbeq	r7, r5, r5, ror r2
    1f9c:	5f544547 	svcpl	0x00544547
    1fa0:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
    1fa4:	53005355 	movwpl	r5, #853	; 0x355
    1fa8:	465f5445 	ldrbmi	r5, [pc], -r5, asr #8
    1fac:	55544145 	ldrbpl	r4, [r4, #-325]	; 0x145
    1fb0:	44004552 	strmi	r4, [r0], #-1362	; 0x552
    1fb4:	5f617461 	svcpl	0x00617461
    1fb8:	5f6c754d 	svcpl	0x006c754d
    1fbc:	5078614d 	rsbspl	r6, r8, sp, asr #2
    1fc0:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
    1fc4:	7a695374 	bvc	1a56d9c <__Stack_Size+0x1a5659c>
    1fc8:	44700065 	ldrbtmi	r0, [r0], #-101	; 0x65
    1fcc:	53007665 	movwpl	r7, #1637	; 0x665
    1fd0:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    1fd4:	5f647261 	svcpl	0x00647261
    1fd8:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
    1fdc:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    1fe0:	61654665 	cmnvs	r5, r5, ror #12
    1fe4:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    1fe8:	65447000 	strbvs	r7, [r4, #-0]
    1fec:	53006373 	movwpl	r6, #883	; 0x373
    1ff0:	48434e59 	stmdami	r3, {r0, r3, r4, r6, r9, sl, fp, lr}^
    1ff4:	4152465f 	cmpmi	r2, pc, asr r6
    1ff8:	5300454d 	movwpl	r4, #1357	; 0x54d
    1ffc:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    2000:	5f647261 	svcpl	0x00647261
    2004:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    2008:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    200c:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
    2010:	54455300 	strbpl	r5, [r5], #-768	; 0x300
    2014:	5345445f 	movtpl	r4, #21599	; 0x545f
    2018:	50495243 	subpl	r5, r9, r3, asr #4
    201c:	00524f54 	subseq	r4, r2, r4, asr pc
    2020:	5f544553 	svcpl	0x00544553
    2024:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xe49
    2028:	43414652 	movtmi	r4, #5714	; 0x1652
    202c:	465f0045 	ldrbmi	r0, [pc], -r5, asr #32
    2030:	55544145 	ldrbpl	r4, [r4, #-325]	; 0x145
    2034:	535f4552 	cmppl	pc, #343932928	; 0x14800000
    2038:	43454c45 	movtmi	r4, #23621	; 0x5c45
    203c:	00524f54 	subseq	r4, r2, r4, asr pc
    2040:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    2044:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    2048:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    204c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2050:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    2054:	6f697461 	svcvs	0x00697461
    2058:	7453006e 	ldrbvc	r0, [r3], #-110	; 0x6e
    205c:	61646e61 	cmnvs	r4, r1, ror #28
    2060:	435f6472 	cmpmi	pc, #1912602624	; 0x72000000
    2064:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2068:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
    206c:	00657275 	rsbeq	r7, r5, r5, ror r2
    2070:	5f544547 	svcpl	0x00544547
    2074:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    2078:	52554749 	subspl	r4, r5, #19136512	; 0x1240000
    207c:	4f495441 	svcmi	0x00495441
    2080:	435f004e 	cmpmi	pc, #78	; 0x4e
    2084:	52544e4f 	subspl	r4, r4, #1264	; 0x4f0
    2088:	535f4c4f 	cmppl	pc, #20224	; 0x4f00
    208c:	45544154 	ldrbmi	r4, [r4, #-340]	; 0x154
    2090:	45445f00 	strbmi	r5, [r4, #-3840]	; 0xf00
    2094:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    2098:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    209c:	5059545f 	subspl	r5, r9, pc, asr r4
    20a0:	45530045 	ldrbmi	r0, [r3, #-69]	; 0x45
    20a4:	4e495454 	mcrmi	4, 2, r5, cr9, cr4, {2}
    20a8:	50555f47 	subspl	r5, r5, r7, asr #30
    20ac:	414d5000 	mrsmi	r5, (UNDEF: 77)
    20b0:	73556f54 	cmpvc	r5, #84, 30	; 0x150
    20b4:	75427265 	strbvc	r7, [r2, #-613]	; 0x265
    20b8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    20bc:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
    20c0:	54455300 	strbpl	r5, [r5], #-768	; 0x300
    20c4:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    20c8:	55474946 	strbpl	r4, [r7, #-2374]	; 0x946
    20cc:	49544152 	ldmdbmi	r4, {r1, r4, r6, r8, lr}^
    20d0:	57004e4f 	strpl	r4, [r0, -pc, asr #28]
    20d4:	5f544941 	svcpl	0x00544941
    20d8:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
    20dc:	4f5f5355 	svcmi	0x005f5355
    20e0:	54005455 	strpl	r5, [r0], #-1109	; 0x455
    20e4:	4c41544f 	cfstrdmi	mvd5, [r1], {79}	; 0x4f
    20e8:	4552735f 	ldrbmi	r7, [r2, #-863]	; 0x35f
    20ec:	53455551 	movtpl	r5, #21841	; 0x5551
    20f0:	4e490054 	mcrmi	0, 2, r0, cr9, cr4, {2}
    20f4:	46524554 			; <UNDEFINED> instruction: 0x46524554
    20f8:	5f454341 	svcpl	0x00454341
    20fc:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    2100:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    2104:	7300524f 	movwvc	r5, #591	; 0x24f
    2108:	5f657661 	svcpl	0x00657661
    210c:	6e654c77 	mcrvs	12, 3, r4, cr5, cr7, {3}
    2110:	00687467 	rsbeq	r7, r8, r7, ror #8
    2114:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    2118:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    211c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    2120:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    2124:	45007375 	strmi	r7, [r0, #-885]	; 0x375
    2128:	4f50444e 	svcmi	0x0050444e
    212c:	5f544e49 	svcpl	0x00544e49
    2130:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    2134:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    2138:	4300524f 	movwmi	r5, #591	; 0x24f
    213c:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    2140:	45445f47 	strbmi	r5, [r4, #-3911]	; 0xf47
    2144:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    2148:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    214c:	75427000 	strbvc	r7, [r2, #-0]
    2150:	45700066 	ldrbmi	r0, [r0, #-102]!	; 0x66
    2154:	666e6950 			; <UNDEFINED> instruction: 0x666e6950
    2158:	4553006f 	ldrbmi	r0, [r3, #-111]	; 0x6f
    215c:	44415f54 	strbmi	r5, [r1], #-3924	; 0xf54
    2160:	53455244 	movtpl	r5, #21060	; 0x5244
    2164:	65520053 	ldrbvs	r0, [r2, #-83]	; 0x53
    2168:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0x16c
    216c:	6e455f64 	cdpvs	15, 4, cr5, cr5, cr4, {3}
    2170:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    2174:	5300746e 	movwpl	r7, #1134	; 0x46e
    2178:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    217c:	666e4973 			; <UNDEFINED> instruction: 0x666e4973
    2180:	4977006f 	ldmdbmi	r7!, {r0, r1, r2, r3, r5, r6}^
    2184:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    2188:	45470030 	strbmi	r0, [r7, #-48]	; 0x30
    218c:	45445f54 	strbmi	r5, [r4, #-3924]	; 0xf54
    2190:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    2194:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    2198:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    219c:	61745361 	cmnvs	r4, r1, ror #6
    21a0:	754f6567 	strbvc	r6, [pc, #-1383]	; 1c41 <__Stack_Size+0x1441>
    21a4:	41570074 	cmpmi	r7, r4, ror r0
    21a8:	535f5449 	cmppl	pc, #1224736768	; 0x49000000
    21ac:	50555445 	subspl	r5, r5, r5, asr #8
    21b0:	71655200 	cmnvc	r5, r0, lsl #4
    21b4:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
    21b8:	006f4e5f 	rsbeq	r4, pc, pc, asr lr	; <UNPREDICTABLE>
    21bc:	54494157 	strbpl	r4, [r9], #-343	; 0x157
    21c0:	4154535f 	cmpmi	r4, pc, asr r3
    21c4:	5f535554 	svcpl	0x00535554
    21c8:	43004e49 	movwmi	r4, #3657	; 0xe49
    21cc:	5241454c 	subpl	r4, r1, #76, 10	; 0x13000000
    21d0:	4145465f 	cmpmi	r5, pc, asr r6
    21d4:	45525554 	ldrbmi	r5, [r2, #-1364]	; 0x554
    21d8:	53414c00 	movtpl	r4, #7168	; 0x1c00
    21dc:	554f5f54 	strbpl	r5, [pc, #-3924]	; 1290 <__Stack_Size+0xa90>
    21e0:	41445f54 	cmpmi	r4, r4, asr pc
    21e4:	75004154 	strvc	r4, [r0, #-340]	; 0x154
    21e8:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    21ec:	752f6269 	strvc	r6, [pc, #-617]!	; 1f8b <__Stack_Size+0x178b>
    21f0:	6d5f6273 	lfmvs	f6, 2, [pc, #-460]	; 202c <__Stack_Size+0x182c>
    21f4:	632e6d65 	teqvs	lr, #6464	; 0x1940
    21f8:	424e7700 	submi	r7, lr, #0, 14
    21fc:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    2200:	55627000 	strbpl	r7, [r2, #-0]!
    2204:	75427273 	strbvc	r7, [r2, #-627]	; 0x273
    2208:	50770066 	rsbspl	r0, r7, r6, rrx
    220c:	7542414d 	strbvc	r4, [r2, #-333]	; 0x14d
    2210:	64644166 	strbtvs	r4, [r4], #-358	; 0x166
    2214:	64700072 	ldrbtvs	r0, [r0], #-114	; 0x72
    2218:	6c615677 	stclvs	6, cr5, [r1], #-476	; 0xfffffe24
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	08000ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp}
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	08000bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp}
       8:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
       c:	ae08000b 	cdpge	0, 0, cr0, cr8, cr11, {0}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	0408000b 	streq	r0, [r8], #-11
      14:	5001f300 	andpl	pc, r1, r0, lsl #6
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      1c:	00000000 	andeq	r0, r0, r0
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	000c2e00 	andeq	r2, ip, r0, lsl #28
      24:	000c3208 	andeq	r3, ip, r8, lsl #4
      28:	70000508 	andvc	r0, r0, r8, lsl #10
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	9f274000 	svcls	0x00274000
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	08000c32 	stmdaeq	r0, {r1, r4, r5, sl, fp}
      34:	08000c36 	stmdaeq	r0, {r1, r2, r4, r5, sl, fp}
      38:	00700007 	rsbseq	r0, r0, r7

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	27402740 	strbcs	r2, [r0, -r0, asr #14]

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	000c369f 	muleq	ip, pc, r6	; <UNPREDICTABLE>
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	000c3808 	andeq	r3, ip, r8, lsl #16
      48:	73000808 	movwvc	r0, #2056	; 0x808
      4c:	27400600 	strbcs	r0, [r0, -r0, lsl #12]

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	389f2740 	ldmcc	pc, {r6, r8, r9, sl, sp}	; <UNPREDICTABLE>
      54:	5508000c 	strpl	r0, [r8, #-12]
      58:	0b08000c 	bleq	200090 <__Stack_Size+0x1ff890>
      5c:	5c000c00 	stcpl	12, cr0, [r0], {-0}
      60:	40064000 	andmi	r4, r6, r0
      64:	9f274027 	svcls	0x00274027
	...
      70:	08000c98 	stmdaeq	r0, {r3, r4, r7, sl, fp}
      74:	08000caa 	stmdaeq	r0, {r1, r3, r5, r7, sl, fp}
      78:	aa500001 	bge	1400084 <__Stack_Size+0x13ff884>
      7c:	ae08000c 	cdpge	0, 0, cr0, cr8, cr12, {0}
      80:	0408000c 	streq	r0, [r8], #-12
      84:	5001f300 	andpl	pc, r1, r0, lsl #6
      88:	000cae9f 	muleq	ip, pc, lr	; <UNPREDICTABLE>
      8c:	000cb108 	andeq	fp, ip, r8, lsl #2
      90:	50000108 	andpl	r0, r0, r8, lsl #2
      94:	08000cb1 	stmdaeq	r0, {r0, r4, r5, r7, sl, fp}
      98:	08000d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp}
      9c:	01f30004 	mvnseq	r0, r4
      a0:	00009f50 	andeq	r9, r0, r0, asr pc
      a4:	00000000 	andeq	r0, r0, r0
	f25519_select(x, a, b, (a[0] ^ parity) & 1);

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
	f25519_normalize(a);
	f25519_normalize(c);
      a8:	0c980000 	ldceq	0, cr0, [r8], {0}

	return f25519_eq(a, c);
      ac:	0cda0800 	ldcleq	8, cr0, [sl], {0}
      b0:	00020800 	andeq	r0, r2, r0, lsl #16
      b4:	0cda9f30 	ldcleq	15, cr9, [sl], {48}	; 0x30
	uint8_t ok;

	mx2ey(ey, mx);
	ok = ey2ex(ex, ey, parity);

	f25519_normalize(ex);
      b8:	0ce50800 	stcleq	8, cr0, [r5]
	f25519_normalize(ey);
      bc:	00010800 	andeq	r0, r1, r0, lsl #16
      c0:	000cea53 	andeq	lr, ip, r3, asr sl

	return ok;
}
      c4:	000cee08 	andeq	lr, ip, r8, lsl #28
      c8:	30000208 	andcc	r0, r0, r8, lsl #4
      cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      d0:	00000000 	andeq	r0, r0, r0
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
      d4:	000d0c00 	andeq	r0, sp, r0, lsl #24
      d8:	000d1108 	andeq	r1, sp, r8, lsl #2
		minusp[i] = c;
      dc:	50000108 	andpl	r0, r0, r8, lsl #2
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
      e0:	08000d11 	stmdaeq	r0, {r0, r4, r8, sl, fp}
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
      e4:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
      e8:	01f30004 	mvnseq	r0, r4
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
      ec:	00009f50 	andeq	r9, r0, r0, asr pc
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
      f0:	00000000 	andeq	r0, r0, r0
      f4:	0d180000 	ldceq	0, cr0, [r8, #-0]
      f8:	0d1d0800 	ldceq	8, cr0, [sp, #-0]
      fc:	00010800 	andeq	r0, r1, r0, lsl #16
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     100:	000d1d50 	andeq	r1, sp, r0, asr sp

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
     104:	000d2408 	andeq	r2, sp, r8, lsl #8
     108:	f3000408 	vshl.u8	d0, d8, d0
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     10c:	009f5001 	addseq	r5, pc, r1
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
     110:	00000000 	andeq	r0, r0, r0
     114:	24000000 	strcs	r0, [r0], #-0
     118:	3708000d 	strcc	r0, [r8, -sp]
     11c:	0108000d 	tsteq	r8, sp
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     120:	0d375000 	ldceq	0, cr5, [r7, #-0]
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
     124:	0d380800 	ldceq	8, cr0, [r8, #-0]
     128:	00040800 	andeq	r0, r4, r0, lsl #16
		fprime_copy(plusa, r);
		fprime_add(plusa, a, modulus);

		fprime_select(r, r, plusa, bit);
	}
}
     12c:	9f5001f3 	svcls	0x005001f3

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
     130:	08000d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp}
	i <<= 3;

	while (x) {
     134:	08000d3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, fp}
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
     138:	3a500001 	bcc	1400144 <__Stack_Size+0x13ff944>
     13c:	4408000d 	strmi	r0, [r8], #-13
	f25519_mul__distinct(x3, a, a);

	f25519_mul_c(a, x1z1, 486662);
	f25519_add(a, x1sq, a);
	f25519_add(a, z1sq, a);
	f25519_mul__distinct(x1sq, x1z1, a);
     140:	0408000d 	streq	r0, [r8], #-13
	f25519_mul_c(z3, x1sq, 4);
     144:	5001f300 	andpl	pc, r1, r0, lsl #6
     148:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	00000000 	andeq	r0, r0, r0
     150:	000d4400 	andeq	r4, sp, r0, lsl #8
     154:	000d4908 	andeq	r4, sp, r8, lsl #18
	f25519_sub(b, x3, z3); /* D */
     158:	50000108 	andpl	r0, r0, r8, lsl #2
     15c:	08000d49 	stmdaeq	r0, {r0, r3, r6, r8, sl, fp}
	f25519_mul__distinct(da, a, b);
     160:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
     164:	01f30004 	mvnseq	r0, r4
     168:	00009f50 	andeq	r9, r0, r0, asr pc

	f25519_sub(b, x2, z2);
     16c:	00000000 	andeq	r0, r0, r0
     170:	0d500000 	ldcleq	0, cr0, [r0, #-0]
	f25519_add(a, x3, z3); /* C */
     174:	0d620800 	stcleq	8, cr0, [r2, #-0]
     178:	00010800 	andeq	r0, r1, r0, lsl #16
     17c:	000d6250 	andeq	r6, sp, r0, asr r2
	f25519_mul__distinct(cb, a, b);
     180:	000d6408 	andeq	r6, sp, r8, lsl #8
     184:	f3000408 	vshl.u8	d0, d8, d0

	f25519_add(a, da, cb);
     188:	649f5001 	ldrvs	r5, [pc], #1	; 190 <_Minimum_Stack_Size+0x90>
     18c:	6708000d 	strvs	r0, [r8, -sp]
     190:	0108000d 	tsteq	r8, sp
	f25519_mul__distinct(b, a, a);
     194:	0d675000 	stcleq	0, cr5, [r7, #-0]
     198:	0d780800 	ldcleq	8, cr0, [r8, #-0]
	f25519_mul__distinct(x5, z1, b);
     19c:	00040800 	andeq	r0, r4, r0, lsl #16
     1a0:	9f5001f3 	svcls	0x005001f3
	...

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
     1b4:	00700005 	rsbseq	r0, r0, r5
     1b8:	009f213c 	addseq	r2, pc, ip, lsr r1	; <UNPREDICTABLE>

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	00000000 	andeq	r0, r0, r0
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	ac000000 	stcge	0, cr0, [r0], {-0}
     1c4:	de08000e 	cdple	0, 0, cr0, cr8, cr14, {0}

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	0108000e 	tsteq	r8, lr
     1cc:	0ede5000 	cdpeq	0, 13, cr5, cr14, cr0, {0}
     1d0:	0eea0800 	cdpeq	8, 14, cr0, cr10, cr0, {0}
     1d4:	00040800 	andeq	r0, r4, r0, lsl #16
		f25519_select(zm1, zm1, zm, bit);
     1d8:	9f5001f3 	svcls	0x005001f3
     1dc:	08000eea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, fp}
     1e0:	08000ef2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl, fp}
		f25519_select(xm, xm, xms, bit);
     1e4:	f2500001 	vhadd.s16	d16, d0, d1
     1e8:	0608000e 	streq	r0, [r8], -lr
     1ec:	0408000f 	streq	r0, [r8], #-15
		f25519_select(zm, zm, zms, bit);
     1f0:	5001f300 	andpl	pc, r1, r0, lsl #6
     1f4:	000f069f 	muleq	pc, pc, r6	; <UNPREDICTABLE>
     1f8:	000f0e08 	andeq	r0, pc, r8, lsl #28
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	50000108 	andpl	r0, r0, r8, lsl #2
     200:	08000f0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, fp}
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	08000f22 	stmdaeq	r0, {r1, r5, r8, r9, sl, fp}
     208:	01f30004 	mvnseq	r0, r4
	f25519_mul__distinct(result, zm1, xm);
     20c:	0f229f50 	svceq	0x00229f50
     210:	0f4a0800 	svceq	0x004a0800
	f25519_normalize(result);
     214:	00010800 	andeq	r0, r1, r0, lsl #16
     218:	000f4a50 	andeq	r4, pc, r0, asr sl	; <UNPREDICTABLE>
}
     21c:	000f6008 	andeq	r6, pc, r8
     220:	f3000408 	vshl.u8	d0, d8, d0
     224:	609f5001 	addsvs	r5, pc, r1
     228:	7408000f 	strvc	r0, [r8], #-15
     22c:	0108000f 	tsteq	r8, pc
     230:	00005000 	andeq	r5, r0, r0
     234:	00000000 	andeq	r0, r0, r0
     238:	0edc0000 	cdpeq	0, 13, cr0, cr12, cr0, {0}
     23c:	0ee40800 	cdpeq	8, 14, cr0, cr4, cr0, {0}
     240:	00060800 	andeq	r0, r6, r0, lsl #16
     244:	ef090074 	svc	0x00090074
     248:	0f509f1a 	svceq	0x00509f1a
     24c:	0f540800 	svceq	0x00540800
     250:	00050800 	andeq	r0, r5, r0, lsl #16
     254:	21400074 	hvccs	4
     258:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     25c:	00000000 	andeq	r0, r0, r0
     260:	000ef200 	andeq	pc, lr, r0, lsl #4
     264:	000efa08 	andeq	pc, lr, r8, lsl #20
     268:	70000608 	andvc	r0, r0, r8, lsl #12
     26c:	1afb0900 	bne	ffec2674 <BootRAM+0xee32e15>
     270:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     274:	00000000 	andeq	r0, r0, r0
     278:	000f0e00 	andeq	r0, pc, r0, lsl #28
     27c:	000f1608 	andeq	r1, pc, r8, lsl #12
     280:	70000608 	andvc	r0, r0, r8, lsl #12
     284:	1afb0900 	bne	ffec268c <BootRAM+0xee32e2d>
     288:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     28c:	00000000 	andeq	r0, r0, r0
     290:	000ffa00 	andeq	pc, pc, r0, lsl #20
     294:	000ffe08 	andeq	pc, pc, r8, lsl #28
     298:	77000508 	strvc	r0, [r0, -r8, lsl #10]
     29c:	9f213c00 	svcls	0x00213c00
	...
     2a8:	0800108c 	stmdaeq	r0, {r2, r3, r7, ip}
     2ac:	08001092 	stmdaeq	r0, {r1, r4, r7, ip}
     2b0:	92500001 	subsls	r0, r0, #1
     2b4:	a6080010 			; <UNDEFINED> instruction: 0xa6080010
     2b8:	01080010 	tsteq	r8, r0, lsl r0
     2bc:	10a65500 	adcne	r5, r6, r0, lsl #10
     2c0:	10b40800 	adcsne	r0, r4, r0, lsl #16
     2c4:	00040800 	andeq	r0, r4, r0, lsl #16
     2c8:	9f5001f3 	svcls	0x005001f3
	...
     2d4:	0800108c 	stmdaeq	r0, {r2, r3, r7, ip}
     2d8:	08001092 	stmdaeq	r0, {r1, r4, r7, ip}
     2dc:	9f300002 	svcls	0x00300002
     2e0:	08001092 	stmdaeq	r0, {r1, r4, r7, ip}
     2e4:	08001098 	stmdaeq	r0, {r3, r4, r7, ip}
     2e8:	98540001 	ldmdals	r4, {r0}^
     2ec:	9c080010 	stcls	0, cr0, [r8], {16}
     2f0:	03080010 	movweq	r0, #32784	; 0x8010
     2f4:	9f7f7400 	svcls	0x007f7400
     2f8:	0800109c 	stmdaeq	r0, {r2, r3, r4, r7, ip}
     2fc:	080010a6 	stmdaeq	r0, {r1, r2, r5, r7, ip}
     300:	00540001 	subseq	r0, r4, r1
     304:	00000000 	andeq	r0, r0, r0
     308:	b4000000 	strlt	r0, [r0], #-0
     30c:	e4080010 	str	r0, [r8], #-16
     310:	02080010 	andeq	r0, r8, #16
     314:	e49f3000 	ldr	r3, [pc], #0	; 31c <_Minimum_Stack_Size+0x21c>
     318:	e6080010 			; <UNDEFINED> instruction: 0xe6080010
     31c:	07080010 	smladeq	r8, r0, r0, r0
     320:	48007000 	stmdami	r0, {ip, sp, lr}
     324:	9f293024 	svcls	0x00293024
     328:	080010e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, ip}
     32c:	08001110 	stmdaeq	r0, {r4, r8, ip}
     330:	00740007 	rsbseq	r0, r4, r7
     334:	29302448 	ldmdbcs	r0!, {r3, r6, sl, sp}
     338:	0011369f 	mulseq	r1, pc, r6	; <UNPREDICTABLE>
     33c:	00113c08 	andseq	r3, r1, r8, lsl #24
     340:	74000708 	strvc	r0, [r0], #-1800	; 0x708
     344:	30244800 	eorcc	r4, r4, r0, lsl #16
     348:	113c9f29 	teqne	ip, r9, lsr #30
     34c:	114e0800 	cmpne	lr, r0, lsl #16
     350:	00020800 	andeq	r0, r2, r0, lsl #16
     354:	11909f30 	orrsne	r9, r0, r0, lsr pc
     358:	11960800 	orrsne	r0, r6, r0, lsl #16
     35c:	00070800 	andeq	r0, r7, r0, lsl #16
     360:	24480074 	strbcs	r0, [r8], #-116	; 0x74
     364:	969f2930 			; <UNDEFINED> instruction: 0x969f2930
     368:	aa080011 	bge	2003b4 <__Stack_Size+0x1ffbb4>
     36c:	02080011 	andeq	r0, r8, #17
     370:	aa9f3100 	bge	fe7cc778 <BootRAM+0xd73cf19>
     374:	b0080011 	andlt	r0, r8, r1, lsl r0
     378:	07080011 	smladeq	r8, r1, r0, r0
     37c:	48007400 	stmdami	r0, {sl, ip, sp, lr}
     380:	9f293024 	svcls	0x00293024
     384:	080011b0 	stmdaeq	r0, {r4, r5, r7, r8, ip}
     388:	080011b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, ip}
     38c:	9f310002 	svcls	0x00310002
     390:	080011b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, ip}
     394:	080011b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, ip}
     398:	00740007 	rsbseq	r0, r4, r7
     39c:	29302448 	ldmdbcs	r0!, {r3, r6, sl, sp}
     3a0:	0011b89f 	mulseq	r1, pc, r8	; <UNPREDICTABLE>
     3a4:	0011ec08 	andseq	lr, r1, r8, lsl #24
     3a8:	31000208 	tstcc	r0, r8, lsl #4
     3ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     3b0:	00000000 	andeq	r0, r0, r0
     3b4:	0010f000 	andseq	pc, r0, r0
     3b8:	00110208 	andseq	r0, r1, r8, lsl #4
     3bc:	50000108 	andpl	r0, r0, r8, lsl #2
     3c0:	08001136 	stmdaeq	r0, {r1, r2, r4, r5, r8, ip}
     3c4:	08001138 	stmdaeq	r0, {r3, r4, r5, r8, ip}
     3c8:	90500001 	subsls	r0, r0, r1
     3cc:	92080011 	andls	r0, r8, #17
     3d0:	01080011 	tsteq	r8, r1, lsl r0
     3d4:	11aa5000 			; <UNDEFINED> instruction: 0x11aa5000
     3d8:	11ac0800 			; <UNDEFINED> instruction: 0x11ac0800
     3dc:	00010800 	andeq	r0, r1, r0, lsl #16
     3e0:	0011b250 	andseq	fp, r1, r0, asr r2
     3e4:	0011b408 	andseq	fp, r1, r8, lsl #8
     3e8:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     3f4:	0800110e 	stmdaeq	r0, {r1, r2, r3, r8, ip}
     3f8:	08001112 	stmdaeq	r0, {r1, r4, r8, ip}
     3fc:	9f310002 	svcls	0x00310002
     400:	0800114e 	stmdaeq	r0, {r1, r2, r3, r6, r8, ip}
     404:	08001154 	stmdaeq	r0, {r2, r4, r6, r8, ip}
     408:	9f310002 	svcls	0x00310002
     40c:	080011a8 	stmdaeq	r0, {r3, r5, r7, r8, ip}
     410:	080011aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, ip}
     414:	9f310002 	svcls	0x00310002
	...
     420:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
     424:	080011f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, ip}
     428:	f2510001 	vhadd.s16	d16, d1, d1
     42c:	02080011 	andeq	r0, r8, #17
     430:	04080012 	streq	r0, [r8], #-18
     434:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     438:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     43c:	00000000 	andeq	r0, r0, r0
     440:	0011ec00 	andseq	lr, r1, r0, lsl #24
     444:	0011ec08 	andseq	lr, r1, r8, lsl #24
     448:	52000108 	andpl	r0, r0, #8, 2
     44c:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
     450:	080011f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, ip}
     454:	00720007 	rsbseq	r0, r2, r7
     458:	29302448 	ldmdbcs	r0!, {r3, r6, sl, sp}
     45c:	0011f69f 	mulseq	r1, pc, r6	; <UNPREDICTABLE>
     460:	00120208 	andseq	r0, r2, r8, lsl #4
     464:	f3000808 	vsub.i8	d0, d0, d8
     468:	24485201 	strbcs	r5, [r8], #-513	; 0x201
     46c:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
     470:	00000000 	andeq	r0, r0, r0
     474:	04000000 	streq	r0, [r0], #-0
     478:	14080012 	strne	r0, [r8], #-18
     47c:	01080012 	tsteq	r8, r2, lsl r0
     480:	12145000 	andsne	r5, r4, #0
     484:	12160800 	andsne	r0, r6, #0, 16
     488:	00040800 	andeq	r0, r4, r0, lsl #16
     48c:	9f5001f3 	svcls	0x005001f3
	...
     498:	08001204 	stmdaeq	r0, {r2, r9, ip}
     49c:	0800120a 	stmdaeq	r0, {r1, r3, r9, ip}
     4a0:	0a510001 	beq	14404ac <__Stack_Size+0x143fcac>
     4a4:	16080012 			; <UNDEFINED> instruction: 0x16080012
     4a8:	04080012 	streq	r0, [r8], #-18
     4ac:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     4b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     4b4:	00000000 	andeq	r0, r0, r0
     4b8:	00121800 	andseq	r1, r2, r0, lsl #16
     4bc:	00123a08 	andseq	r3, r2, r8, lsl #20
     4c0:	50000108 	andpl	r0, r0, r8, lsl #2
     4c4:	0800123a 	stmdaeq	r0, {r1, r3, r4, r5, r9, ip}
     4c8:	08001268 	stmdaeq	r0, {r3, r5, r6, r9, ip}
     4cc:	70740003 	rsbsvc	r0, r4, r3
     4d0:	0012689f 	mulseq	r2, pc, r8	; <UNPREDICTABLE>
     4d4:	00127808 	andseq	r7, r2, r8, lsl #16
     4d8:	f3000408 	vshl.u8	d0, d8, d0
     4dc:	009f5001 	addseq	r5, pc, r1
     4e0:	00000000 	andeq	r0, r0, r0
     4e4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     4e8:	20080012 	andcs	r0, r8, r2, lsl r0
     4ec:	01080012 	tsteq	r8, r2, lsl r0
     4f0:	12205100 	eorne	r5, r0, #0, 2
     4f4:	12780800 	rsbsne	r0, r8, #0, 16
     4f8:	00040800 	andeq	r0, r4, r0, lsl #16
     4fc:	9f5101f3 	svcls	0x005101f3
	...
     508:	08001218 	stmdaeq	r0, {r3, r4, r9, ip}
     50c:	0800123a 	stmdaeq	r0, {r1, r3, r4, r5, r9, ip}
     510:	3a520001 	bcc	148051c <__Stack_Size+0x147fd1c>
     514:	48080012 	stmdami	r8, {r1, r4}
     518:	01080012 	tsteq	r8, r2, lsl r0
     51c:	12485700 	subne	r5, r8, #0, 14
     520:	125e0800 	subsne	r0, lr, #0, 16
     524:	00010800 	andeq	r0, r1, r0, lsl #16
     528:	00125e50 	andseq	r5, r2, r0, asr lr
     52c:	00126008 	andseq	r6, r2, r8
     530:	70000308 	andvc	r0, r0, r8, lsl #6
     534:	12649f01 	rsbne	r9, r4, #1, 30
     538:	12660800 	rsbne	r0, r6, #0, 16
     53c:	00010800 	andeq	r0, r1, r0, lsl #16
     540:	00126a50 	andseq	r6, r2, r0, asr sl
     544:	00126c08 	andseq	r6, r2, r8, lsl #24
     548:	50000108 	andpl	r0, r0, r8, lsl #2
     54c:	0800126c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip}
     550:	0800126e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, ip}
     554:	01700003 	cmneq	r0, r3
     558:	0012749f 	mulseq	r2, pc, r4	; <UNPREDICTABLE>
     55c:	00127808 	andseq	r7, r2, r8, lsl #16
     560:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     56c:	08001218 	stmdaeq	r0, {r3, r4, r9, ip}
     570:	08001268 	stmdaeq	r0, {r3, r5, r6, r9, ip}
     574:	00910002 	addseq	r0, r1, r2
     578:	08001268 	stmdaeq	r0, {r3, r5, r6, r9, ip}
     57c:	0800126a 	stmdaeq	r0, {r1, r3, r5, r6, r9, ip}
     580:	007d0002 	rsbseq	r0, sp, r2
     584:	0800126a 	stmdaeq	r0, {r1, r3, r5, r6, r9, ip}
     588:	08001278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip}
     58c:	107d0002 	rsbsne	r0, sp, r2
	...
     598:	08001248 	stmdaeq	r0, {r3, r6, r9, ip}
     59c:	0800124c 	stmdaeq	r0, {r2, r3, r6, r9, ip}
     5a0:	4c530001 	mrrcmi	0, 0, r0, r3, cr1
     5a4:	4e080012 	mcrmi	0, 0, r0, cr8, cr2, {0}
     5a8:	01080012 	tsteq	r8, r2, lsl r0
     5ac:	124e5200 	subne	r5, lr, #0, 4
     5b0:	12500800 	subsne	r0, r0, #0, 16
     5b4:	00030800 	andeq	r0, r3, r0, lsl #16
     5b8:	509f7f72 	addspl	r7, pc, r2, ror pc	; <UNPREDICTABLE>
     5bc:	54080012 	strpl	r0, [r8], #-18
     5c0:	01080012 	tsteq	r8, r2, lsl r0
     5c4:	12565200 	subsne	r5, r6, #0, 4
     5c8:	12580800 	subsne	r0, r8, #0, 16
     5cc:	00010800 	andeq	r0, r1, r0, lsl #16
     5d0:	00125852 	andseq	r5, r2, r2, asr r8
     5d4:	00125a08 	andseq	r5, r2, r8, lsl #20
     5d8:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
     5dc:	125a9f7f 	subsne	r9, sl, #508	; 0x1fc
     5e0:	12660800 	rsbne	r0, r6, #0, 16
     5e4:	00010800 	andeq	r0, r1, r0, lsl #16
     5e8:	00126a52 	andseq	r6, r2, r2, asr sl
     5ec:	00127208 	andseq	r7, r2, r8, lsl #4
     5f0:	53000108 	movwpl	r0, #264	; 0x108
     5f4:	08001272 	stmdaeq	r0, {r1, r4, r5, r6, r9, ip}
     5f8:	08001278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip}
     5fc:	9f300002 	svcls	0x00300002
	...
     608:	08001232 	stmdaeq	r0, {r1, r4, r5, r9, ip}
     60c:	08001268 	stmdaeq	r0, {r3, r5, r6, r9, ip}
     610:	00760008 	rsbseq	r0, r6, r8
     614:	311aff08 	tstcc	sl, r8, lsl #30
     618:	12689f29 	rsbne	r9, r8, #41, 30	; 0xa4
     61c:	126a0800 	rsbne	r0, sl, #0, 16
     620:	00070800 	andeq	r0, r7, r0, lsl #16
     624:	0194007d 	orrseq	r0, r4, sp, ror r0
     628:	6a9f2931 	bvs	fe7caaf4 <BootRAM+0xd73b295>
     62c:	78080012 	stmdavc	r8, {r1, r4}
     630:	08080012 	stmdaeq	r8, {r1, r4}
     634:	08007600 	stmdaeq	r0, {r9, sl, ip, sp, lr}
     638:	29311aff 	ldmdbcs	r1!, {r0, r1, r2, r3, r4, r5, r6, r7, r9, fp, ip}
     63c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     640:	00000000 	andeq	r0, r0, r0
     644:	00123200 	andseq	r3, r2, r0, lsl #4
     648:	00123a08 	andseq	r3, r2, r8, lsl #20
     64c:	50000108 	andpl	r0, r0, r8, lsl #2
     650:	0800123a 	stmdaeq	r0, {r1, r3, r4, r5, r9, ip}
     654:	08001268 	stmdaeq	r0, {r3, r5, r6, r9, ip}
     658:	70740003 	rsbsvc	r0, r4, r3
     65c:	0012689f 	mulseq	r2, pc, r8	; <UNPREDICTABLE>
     660:	00127808 	andseq	r7, r2, r8, lsl #16
     664:	f3000408 	vshl.u8	d0, d8, d0
     668:	009f5001 	addseq	r5, pc, r1
     66c:	00000000 	andeq	r0, r0, r0
     670:	52000000 	andpl	r0, r0, #0
     674:	66080012 			; <UNDEFINED> instruction: 0x66080012
     678:	07080012 	smladeq	r8, r2, r0, r0
     67c:	48007600 	stmdami	r0, {r9, sl, ip, sp, lr}
     680:	9f293024 	svcls	0x00293024
     684:	0800126a 	stmdaeq	r0, {r1, r3, r5, r6, r9, ip}
     688:	08001278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip}
     68c:	00760007 	rsbseq	r0, r6, r7
     690:	29302448 	ldmdbcs	r0!, {r3, r6, sl, sp}
     694:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     698:	00000000 	andeq	r0, r0, r0
     69c:	00125200 	andseq	r5, r2, r0, lsl #4
     6a0:	00126608 	andseq	r6, r2, r8, lsl #12
     6a4:	74000308 	strvc	r0, [r0], #-776	; 0x308
     6a8:	126a9f70 	rsbne	r9, sl, #112, 30	; 0x1c0
     6ac:	12780800 	rsbsne	r0, r8, #0, 16
     6b0:	00040800 	andeq	r0, r4, r0, lsl #16
     6b4:	9f5001f3 	svcls	0x005001f3
	...
     6c0:	0800125c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip}
     6c4:	08001266 	stmdaeq	r0, {r1, r2, r5, r6, r9, ip}
     6c8:	00760008 	rsbseq	r0, r6, r8
     6cc:	311aff08 	tstcc	sl, r8, lsl #30
     6d0:	12729f29 	rsbsne	r9, r2, #41, 30	; 0xa4
     6d4:	12780800 	rsbsne	r0, r8, #0, 16
     6d8:	00080800 	andeq	r0, r8, r0, lsl #16
     6dc:	ff080076 			; <UNDEFINED> instruction: 0xff080076
     6e0:	9f29311a 	svcls	0x0029311a
	...
     6ec:	0800125c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip}
     6f0:	08001266 	stmdaeq	r0, {r1, r2, r5, r6, r9, ip}
     6f4:	70740003 	rsbsvc	r0, r4, r3
     6f8:	0012729f 	mulseq	r2, pc, r2	; <UNPREDICTABLE>
     6fc:	00127808 	andseq	r7, r2, r8, lsl #16
     700:	f3000408 	vshl.u8	d0, d8, d0
     704:	009f5001 	addseq	r5, pc, r1
	...
     714:	01000000 	mrseq	r0, (UNDEF: 0)
     718:	00005100 	andeq	r5, r0, r0, lsl #2
     71c:	00000000 	andeq	r0, r0, r0
     720:	00030000 	andeq	r0, r3, r0
     724:	009f0171 	addseq	r0, pc, r1, ror r1	; <UNPREDICTABLE>
     728:	00000000 	andeq	r0, r0, r0
     72c:	01000000 	mrseq	r0, (UNDEF: 0)
     730:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     740:	00010000 	andeq	r0, r1, r0
     744:	00000050 	andeq	r0, r0, r0, asr r0
     748:	00000000 	andeq	r0, r0, r0
     74c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     758:	01f30004 	mvnseq	r0, r4
     75c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     76c:	00010000 	andeq	r0, r1, r0
     770:	00000051 	andeq	r0, r0, r1, asr r0
	...
     780:	5d000100 	stfpls	f0, [r0, #-0]
	...
     78c:	01700003 	cmneq	r0, r3
     790:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     794:	00000000 	andeq	r0, r0, r0
     798:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     7a4:	0800128a 	stmdaeq	r0, {r1, r3, r7, r9, ip}
     7a8:	0800128d 	stmdaeq	r0, {r0, r2, r3, r7, r9, ip}
     7ac:	8d510001 	ldclhi	0, cr0, [r1, #-4]
     7b0:	b4080012 	strlt	r0, [r8], #-18
     7b4:	02080012 	andeq	r0, r8, #18
     7b8:	b4509100 	ldrblt	r9, [r0], #-256	; 0x100
     7bc:	b6080012 			; <UNDEFINED> instruction: 0xb6080012
     7c0:	02080012 	andeq	r0, r8, #18
     7c4:	b6007d00 	strlt	r7, [r0], -r0, lsl #26
     7c8:	bc080012 	stclt	0, cr0, [r8], {18}
     7cc:	02080012 	andeq	r0, r8, #18
     7d0:	00509100 	subseq	r9, r0, r0, lsl #2
     7d4:	00000000 	andeq	r0, r0, r0
     7d8:	92000000 	andls	r0, r0, #0
     7dc:	9c080012 	stcls	0, cr0, [r8], {18}
     7e0:	04080012 	streq	r0, [r8], #-18
     7e4:	7e809100 	sinvcs	f1, f0
     7e8:	00129c9f 	mulseq	r2, pc, ip	; <UNPREDICTABLE>
     7ec:	00129e08 	andseq	r9, r2, r8, lsl #28
     7f0:	50000108 	andpl	r0, r0, r8, lsl #2
     7f4:	080012a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, ip}
     7f8:	080012aa 	stmdaeq	r0, {r1, r3, r5, r7, r9, ip}
     7fc:	01700003 	cmneq	r0, r3
     800:	0012aa9f 	mulseq	r2, pc, sl	; <UNPREDICTABLE>
     804:	0012ae08 	andseq	sl, r2, r8, lsl #28
     808:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     814:	0800141e 	stmdaeq	r0, {r1, r2, r3, r4, sl, ip}
     818:	08001424 	stmdaeq	r0, {r2, r5, sl, ip}
     81c:	00520001 	subseq	r0, r2, r1
     820:	00000000 	andeq	r0, r0, r0
     824:	5c000000 	stcpl	0, cr0, [r0], {-0}
     828:	68080014 	stmdavs	r8, {r2, r4}
     82c:	01080014 	tsteq	r8, r4, lsl r0
     830:	14685000 	strbtne	r5, [r8], #-0
     834:	14f60800 	ldrbtne	r0, [r6], #2048	; 0x800
     838:	00010800 	andeq	r0, r1, r0, lsl #16
     83c:	0014f654 	andseq	pc, r4, r4, asr r6	; <UNPREDICTABLE>
     840:	0015d408 	andseq	sp, r5, r8, lsl #8
     844:	f3000408 	vshl.u8	d0, d8, d0
     848:	009f5001 	addseq	r5, pc, r1
     84c:	00000000 	andeq	r0, r0, r0
     850:	d6000000 	strle	r0, [r0], -r0
     854:	e0080014 	and	r0, r8, r4, lsl r0
     858:	14080014 	strne	r0, [r8], #-20
     85c:	38007300 	stmdacc	r0, {r8, r9, ip, sp, lr}
     860:	ffff0a24 			; <UNDEFINED> instruction: 0xffff0a24
     864:	3800731a 	stmdacc	r0, {r1, r3, r4, r8, r9, ip, sp, lr}
     868:	1aff0826 	bne	fffc2908 <BootRAM+0xef330a9>
     86c:	02c02321 	sbceq	r2, r0, #-2080374784	; 0x84000000
     870:	0014e09f 	mulseq	r4, pc, r0	; <UNPREDICTABLE>
     874:	0014f608 	andseq	pc, r4, r8, lsl #12
     878:	74001808 	strvc	r1, [r0], #-2056	; 0x808
     87c:	380600e0 	stmdacc	r6, {r5, r6, r7}
     880:	ffff0a24 			; <UNDEFINED> instruction: 0xffff0a24
     884:	00e0741a 	rsceq	r7, r0, sl, lsl r4
     888:	08263806 	stmdaeq	r6!, {r1, r2, fp, ip, sp}
     88c:	23211aff 	teqcs	r1, #1044480	; 0xff000
     890:	f69f02c0 			; <UNDEFINED> instruction: 0xf69f02c0
     894:	f8080014 			; <UNDEFINED> instruction: 0xf8080014
     898:	16080014 			; <UNDEFINED> instruction: 0x16080014
     89c:	06687400 	strbteq	r7, [r8], -r0, lsl #8
     8a0:	ff0a2438 			; <UNDEFINED> instruction: 0xff0a2438
     8a4:	68741aff 	ldmdavs	r4!, {r0, r1, r2, r3, r4, r5, r6, r7, r9, fp, ip}^
     8a8:	08263806 	stmdaeq	r6!, {r1, r2, fp, ip, sp}
     8ac:	23211aff 	teqcs	r1, #1044480	; 0xff000
     8b0:	009f02c0 	addseq	r0, pc, r0, asr #5
     8b4:	00000000 	andeq	r0, r0, r0
     8b8:	d6000000 	strle	r0, [r0], -r0
     8bc:	f8080014 			; <UNDEFINED> instruction: 0xf8080014
     8c0:	03080014 	movweq	r0, #32788	; 0x8014
     8c4:	9f740800 	svcls	0x00740800
     8c8:	080014f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, ip}
     8cc:	080014fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, sl, ip}
     8d0:	00740009 	rsbseq	r0, r4, r9
     8d4:	1c5001f3 	ldfnee	f0, [r0], {243}	; 0xf3
     8d8:	fe9f1c34 	mrc2	12, 4, r1, cr15, cr4, {1}
     8dc:	0a080014 	beq	200934 <__Stack_Size+0x200134>
     8e0:	07080015 	smladeq	r8, r5, r0, r0
     8e4:	f3007400 	vshl.u8	d7, d0, d0
     8e8:	9f1c5001 	svcls	0x001c5001
     8ec:	0800150a 	stmdaeq	r0, {r1, r3, r8, sl, ip}
     8f0:	08001528 	stmdaeq	r0, {r3, r5, r8, sl, ip}
     8f4:	00740009 	rsbseq	r0, r4, r9
     8f8:	1c5001f3 	ldfnee	f0, [r0], {243}	; 0xf3
     8fc:	009f1c34 	addseq	r1, pc, r4, lsr ip	; <UNPREDICTABLE>
     900:	00000000 	andeq	r0, r0, r0
     904:	3a000000 	bcc	90c <__Stack_Size+0x10c>
     908:	3c080015 	stccc	0, cr0, [r8], {21}
     90c:	05080015 	streq	r0, [r8, #-21]
     910:	02935700 	addseq	r5, r3, #0, 14
     914:	153c0a93 	ldrne	r0, [ip, #-2707]!	; 0xa93
     918:	15620800 	strbne	r0, [r2, #-2048]!	; 0x800
     91c:	000c0800 	andeq	r0, ip, r0, lsl #16
     920:	56029357 			; <UNDEFINED> instruction: 0x56029357
     924:	93540293 	cmpls	r4, #805306377	; 0x30000009
     928:	04935504 	ldreq	r5, [r3], #1284	; 0x504
     92c:	08001562 	stmdaeq	r0, {r1, r5, r6, r8, sl, ip}
     930:	0800157e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, ip}
     934:	9357000b 	cmpls	r7, #11
     938:	02935602 	addseq	r5, r3, #2097152	; 0x200000
     93c:	93049354 	movwls	r9, #17236	; 0x4354
     940:	00157e04 	andseq	r7, r5, r4, lsl #28
     944:	0015ae08 	andseq	sl, r5, r8, lsl #28
     948:	57000808 	strpl	r0, [r0, -r8, lsl #16]
     94c:	93560293 	cmpls	r6, #805306377	; 0x30000009
     950:	ae089302 	cdpge	3, 0, cr9, cr8, cr2, {0}
     954:	b4080015 	strlt	r0, [r8], #-21
     958:	08080015 	stmdaeq	r8, {r0, r2, r4}
     95c:	02935700 	addseq	r5, r3, #0, 14
     960:	93029356 	movwls	r9, #9046	; 0x2356
     964:	00000008 	andeq	r0, r0, r8
	...
     974:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     980:	01f30004 	mvnseq	r0, r4
     984:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     994:	00010000 	andeq	r0, r1, r0
     998:	00000053 	andeq	r0, r0, r3, asr r0
     99c:	00000000 	andeq	r0, r0, r0
     9a0:	0015d400 	andseq	sp, r5, r0, lsl #8
     9a4:	0015e108 	andseq	lr, r5, r8, lsl #2
     9a8:	50000108 	andpl	r0, r0, r8, lsl #2
     9ac:	080015e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, sl, ip}
     9b0:	08001656 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, ip}
     9b4:	56540001 	ldrbpl	r0, [r4], -r1
     9b8:	7c080016 	stcvc	0, cr0, [r8], {22}
     9bc:	04080016 	streq	r0, [r8], #-22
     9c0:	5001f300 	andpl	pc, r1, r0, lsl #6
     9c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     9c8:	00000000 	andeq	r0, r0, r0
     9cc:	00164800 	andseq	r4, r6, r0, lsl #16
     9d0:	00165608 	andseq	r5, r6, r8, lsl #12
     9d4:	54000108 	strpl	r0, [r0], #-264	; 0x108
     9d8:	08001656 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, ip}
     9dc:	0800167c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip}
     9e0:	01f30004 	mvnseq	r0, r4
     9e4:	00009f50 	andeq	r9, r0, r0, asr pc
     9e8:	00000000 	andeq	r0, r0, r0
     9ec:	164a0000 	strbne	r0, [sl], -r0
     9f0:	16530800 	ldrbne	r0, [r3], -r0, lsl #16
     9f4:	00010800 	andeq	r0, r1, r0, lsl #16
     9f8:	00000053 	andeq	r0, r0, r3, asr r0
	...
     a08:	30000200 	andcc	r0, r0, r0, lsl #4
     a0c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a10:	00000000 	andeq	r0, r0, r0
     a14:	30000200 	andcc	r0, r0, r0, lsl #4
     a18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     a28:	30000200 	andcc	r0, r0, r0, lsl #4
     a2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a30:	00000000 	andeq	r0, r0, r0
     a34:	00167c00 	andseq	r7, r6, r0, lsl #24
     a38:	00168a08 	andseq	r8, r6, r8, lsl #20
     a3c:	30000208 	andcc	r0, r0, r8, lsl #4
     a40:	00168a9f 	mulseq	r6, pc, sl	; <UNPREDICTABLE>
     a44:	00169608 	andseq	r9, r6, r8, lsl #12
     a48:	53000108 	movwpl	r0, #264	; 0x108
     a4c:	08001696 	stmdaeq	r0, {r1, r2, r4, r7, r9, sl, ip}
     a50:	0800169e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, sl, ip}
     a54:	9e520001 	cdpls	0, 5, cr0, cr2, cr1, {0}
     a58:	c0080016 	andgt	r0, r8, r6, lsl r0
     a5c:	01080016 	tsteq	r8, r6, lsl r0
     a60:	00005100 	andeq	r5, r0, r0, lsl #2
     a64:	00000000 	andeq	r0, r0, r0
     a68:	167c0000 	ldrbtne	r0, [ip], -r0
     a6c:	16be0800 	ldrtne	r0, [lr], r0, lsl #16
     a70:	00020800 	andeq	r0, r2, r0, lsl #16
     a74:	16be9f30 			; <UNDEFINED> instruction: 0x16be9f30
     a78:	16c40800 	strbne	r0, [r4], r0, lsl #16
     a7c:	00010800 	andeq	r0, r1, r0, lsl #16
     a80:	0016c454 	andseq	ip, r6, r4, asr r4
     a84:	0016d208 	andseq	sp, r6, r8, lsl #4
     a88:	52000108 	andpl	r0, r0, #8, 2
	...
     a94:	0800167c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip}
     a98:	080016be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, ip}
     a9c:	9f300002 	svcls	0x00300002
     aa0:	080016be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, ip}
     aa4:	080016c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip}
     aa8:	c4520001 	ldrbgt	r0, [r2], #-1
     aac:	ca080016 	bgt	200b0c <__Stack_Size+0x20030c>
     ab0:	0f080016 	svceq	0x00080016
     ab4:	70ff0800 	rscsvc	r0, pc, r0, lsl #16
     ab8:	33019400 	movwcc	r9, #5120	; 0x1400
     abc:	1aff081a 	bne	fffc2b2c <BootRAM+0xef332cd>
     ac0:	9f242433 	svcls	0x00242433
	...
     acc:	0800167c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip}
     ad0:	0800168a 	stmdaeq	r0, {r1, r3, r7, r9, sl, ip}
     ad4:	9f300002 	svcls	0x00300002
     ad8:	0800168a 	stmdaeq	r0, {r1, r3, r7, r9, sl, ip}
     adc:	08001690 	stmdaeq	r0, {r4, r7, r9, sl, ip}
     ae0:	73340005 	teqvc	r4, #5
     ae4:	909f1c00 	addsls	r1, pc, r0, lsl #24
     ae8:	96080016 			; <UNDEFINED> instruction: 0x96080016
     aec:	01080016 	tsteq	r8, r6, lsl r0
     af0:	16965200 	ldrne	r5, [r6], r0, lsl #4
     af4:	169a0800 	ldrne	r0, [sl], r0, lsl #16
     af8:	00050800 	andeq	r0, r5, r0, lsl #16
     afc:	1c007334 	stcne	3, cr7, [r0], {52}	; 0x34
     b00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b04:	00000000 	andeq	r0, r0, r0
     b08:	00167c00 	andseq	r7, r6, r0, lsl #24
     b0c:	00168a08 	andseq	r8, r6, r8, lsl #20
     b10:	3f000208 	svccc	0x00000208
     b14:	00168a9f 	mulseq	r6, pc, sl	; <UNPREDICTABLE>
     b18:	00169208 	andseq	r9, r6, r8, lsl #4
     b1c:	3f000508 	svccc	0x00000508
     b20:	9f250073 	svcls	0x00250073
     b24:	08001692 	stmdaeq	r0, {r1, r4, r7, r9, sl, ip}
     b28:	0800169c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip}
     b2c:	00510001 	subseq	r0, r1, r1
     b30:	00000000 	andeq	r0, r0, r0
     b34:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     b38:	52080017 	andpl	r0, r8, #23
     b3c:	01080017 	tsteq	r8, r7, lsl r0
     b40:	17525000 	ldrbne	r5, [r2, -r0]
     b44:	17680800 	strbne	r0, [r8, -r0, lsl #16]!
     b48:	00040800 	andeq	r0, r4, r0, lsl #16
     b4c:	9f5001f3 	svcls	0x005001f3
	...
     b58:	08001732 	stmdaeq	r0, {r1, r4, r5, r8, r9, sl, ip}
     b5c:	0800174e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sl, ip}
     b60:	9f320002 	svcls	0x00320002
     b64:	0800174e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sl, ip}
     b68:	08001768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip}
     b6c:	9f300002 	svcls	0x00300002
	...
     b80:	00500001 	subseq	r0, r0, r1
     b84:	00000000 	andeq	r0, r0, r0
     b88:	04000000 	streq	r0, [r0], #-0
     b8c:	5001f300 	andpl	pc, r1, r0, lsl #6
     b90:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     ba0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     bac:	00540001 	subseq	r0, r4, r1
     bb0:	00000000 	andeq	r0, r0, r0
     bb4:	03000000 	movweq	r0, #0
     bb8:	9f017400 	svcls	0x00017400
	...
     bc4:	00540001 	subseq	r0, r4, r1
	...
     bd4:	01000000 	mrseq	r0, (UNDEF: 0)
     bd8:	00005900 	andeq	r5, r0, r0, lsl #18
	...
     be8:	00020000 	andeq	r0, r2, r0
     bec:	00009f32 	andeq	r9, r0, r2, lsr pc
     bf0:	00000000 	andeq	r0, r0, r0
     bf4:	00020000 	andeq	r0, r2, r0
     bf8:	00009f30 	andeq	r9, r0, r0, lsr pc
     bfc:	00000000 	andeq	r0, r0, r0
     c00:	17680000 	strbne	r0, [r8, -r0]!
     c04:	17aa0800 	strne	r0, [sl, r0, lsl #16]!
     c08:	00010800 	andeq	r0, r1, r0, lsl #16
     c0c:	0017aa50 	andseq	sl, r7, r0, asr sl
     c10:	0017c008 	andseq	ip, r7, r8
     c14:	f3000408 	vshl.u8	d0, d8, d0
     c18:	009f5001 	addseq	r5, pc, r1
     c1c:	00000000 	andeq	r0, r0, r0
     c20:	7a000000 	bvc	c28 <__Stack_Size+0x428>
     c24:	aa080017 	bge	200c88 <__Stack_Size+0x200488>
     c28:	01080017 	tsteq	r8, r7, lsl r0
     c2c:	17aa5000 	strne	r5, [sl, r0]!
     c30:	17c00800 	strbne	r0, [r0, r0, lsl #16]
     c34:	00040800 	andeq	r0, r4, r0, lsl #16
     c38:	9f5001f3 	svcls	0x005001f3
	...
     c44:	0800177c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip}
     c48:	080017a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, ip}
     c4c:	a6550001 	ldrbge	r0, [r5], -r1
     c50:	c0080017 	andgt	r0, r8, r7, lsl r0
     c54:	01080017 	tsteq	r8, r7, lsl r0
     c58:	00005200 	andeq	r5, r0, r0, lsl #4
     c5c:	00000000 	andeq	r0, r0, r0
     c60:	17e40000 	strbne	r0, [r4, r0]!
     c64:	17ea0800 	strbne	r0, [sl, r0, lsl #16]!
     c68:	00010800 	andeq	r0, r1, r0, lsl #16
     c6c:	0017ea50 	andseq	lr, r7, r0, asr sl
     c70:	0017ee08 	andseq	lr, r7, r8, lsl #28
     c74:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     c80:	080017ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, sl, ip}
     c84:	080017ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, ip}
     c88:	703f0007 	eorsvc	r0, pc, r7
     c8c:	24243200 	strtcs	r3, [r4], #-512	; 0x200
     c90:	0017f29f 	mulseq	r7, pc, r2	; <UNPREDICTABLE>
     c94:	0017f408 	andseq	pc, r7, r8, lsl #8
     c98:	50000108 	andpl	r0, r0, r8, lsl #2
     c9c:	080017f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, ip}
     ca0:	080017f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, ip}
     ca4:	00700004 	rsbseq	r0, r0, r4
     ca8:	00009f20 	andeq	r9, r0, r0, lsr #30
     cac:	00000000 	andeq	r0, r0, r0
     cb0:	18d20000 	ldmne	r2, {}^	; <UNPREDICTABLE>
     cb4:	19000800 	stmdbne	r0, {fp}
     cb8:	00010800 	andeq	r0, r1, r0, lsl #16
     cbc:	00191e53 	andseq	r1, r9, r3, asr lr
     cc0:	00193c08 	andseq	r3, r9, r8, lsl #24
     cc4:	53000108 	movwpl	r0, #264	; 0x108
     cc8:	08001954 	stmdaeq	r0, {r2, r4, r6, r8, fp, ip}
     ccc:	08001962 	stmdaeq	r0, {r1, r5, r6, r8, fp, ip}
     cd0:	ce530001 	cdpgt	0, 5, cr0, cr3, cr1, {0}
     cd4:	dc080019 	stcle	0, cr0, [r8], {25}
     cd8:	01080019 	tsteq	r8, r9, lsl r0
     cdc:	19e25300 	stmibne	r2!, {r8, r9, ip, lr}^
     ce0:	19ee0800 	stmibne	lr!, {fp}^
     ce4:	00010800 	andeq	r0, r1, r0, lsl #16
     ce8:	0019f453 	andseq	pc, r9, r3, asr r4	; <UNPREDICTABLE>
     cec:	0019f608 	andseq	pc, r9, r8, lsl #12
     cf0:	53000108 	movwpl	r0, #264	; 0x108
     cf4:	08001a2e 	stmdaeq	r0, {r1, r2, r3, r5, r9, fp, ip}
     cf8:	08001a30 	stmdaeq	r0, {r4, r5, r9, fp, ip}
     cfc:	4c530001 	mrrcmi	0, 0, r0, r3, cr1
     d00:	4e08001a 	mcrmi	0, 0, r0, cr8, cr10, {0}
     d04:	0108001a 	tsteq	r8, sl, lsl r0
     d08:	1a925300 	bne	fe495910 <BootRAM+0xd4060b1>
     d0c:	1a940800 	bne	fe502d14 <BootRAM+0xd4734b5>
     d10:	00010800 	andeq	r0, r1, r0, lsl #16
     d14:	00000053 	andeq	r0, r0, r3, asr r0
     d18:	00000000 	andeq	r0, r0, r0
     d1c:	00198800 	andseq	r8, r9, r0, lsl #16
     d20:	00199e08 	andseq	r9, r9, r8, lsl #28
     d24:	30000208 	andcc	r0, r0, r8, lsl #4
     d28:	00199e9f 	mulseq	r9, pc, lr	; <UNPREDICTABLE>
     d2c:	0019a808 	andseq	sl, r9, r8, lsl #16
     d30:	76000308 	strvc	r0, [r0], -r8, lsl #6
     d34:	19a89f7c 	stmibne	r8!, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}
     d38:	19bc0800 	ldmibne	ip!, {fp}
     d3c:	00010800 	andeq	r0, r1, r0, lsl #16
     d40:	0019bc56 	andseq	fp, r9, r6, asr ip
     d44:	0019ce08 	andseq	ip, r9, r8, lsl #28
     d48:	76000308 	strvc	r0, [r0], -r8, lsl #6
     d4c:	00009f7c 	andeq	r9, r0, ip, ror pc
     d50:	00000000 	andeq	r0, r0, r0
     d54:	197a0000 	ldmdbne	sl!, {}^	; <UNPREDICTABLE>
     d58:	19c00800 	stmibne	r0, {fp}^
     d5c:	00010800 	andeq	r0, r1, r0, lsl #16
     d60:	0019c055 	andseq	ip, r9, r5, asr r0
     d64:	0019ce08 	andseq	ip, r9, r8, lsl #28
     d68:	58000108 	stmdapl	r0, {r3, r8}
     d6c:	08001ac6 	stmdaeq	r0, {r1, r2, r6, r7, r9, fp, ip}
     d70:	08001ade 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, fp, ip}
     d74:	00550001 	subseq	r0, r5, r1
     d78:	00000000 	andeq	r0, r0, r0
     d7c:	6c000000 	stcvs	0, cr0, [r0], {-0}
     d80:	7a08001c 	bvc	200df8 <__Stack_Size+0x2005f8>
     d84:	0108001c 	tsteq	r8, ip, lsl r0
     d88:	1c865300 	stcne	3, cr5, [r6], {0}
     d8c:	1c8a0800 	stcne	8, cr0, [sl], {0}
     d90:	00010800 	andeq	r0, r1, r0, lsl #16
     d94:	00000053 	andeq	r0, r0, r3, asr r0
     d98:	00000000 	andeq	r0, r0, r0
     d9c:	001ca400 	andseq	sl, ip, r0, lsl #8
     da0:	001ca808 	andseq	sl, ip, r8, lsl #16
     da4:	50000108 	andpl	r0, r0, r8, lsl #2
     da8:	08001ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, ip}
     dac:	08001caa 	stmdaeq	r0, {r1, r3, r5, r7, sl, fp, ip}
     db0:	01f30004 	mvnseq	r0, r4
     db4:	1caa9f50 	stcne	15, cr9, [sl], #320	; 0x140
     db8:	1cbc0800 	ldcne	8, cr0, [ip]
     dbc:	00010800 	andeq	r0, r1, r0, lsl #16
     dc0:	00000050 	andeq	r0, r0, r0, asr r0
     dc4:	00000000 	andeq	r0, r0, r0
     dc8:	001cbc00 	andseq	fp, ip, r0, lsl #24
     dcc:	001cc008 	andseq	ip, ip, r8
     dd0:	50000108 	andpl	r0, r0, r8, lsl #2
     dd4:	08001cc0 	stmdaeq	r0, {r6, r7, sl, fp, ip}
     dd8:	08001cc2 	stmdaeq	r0, {r1, r6, r7, sl, fp, ip}
     ddc:	01f30004 	mvnseq	r0, r4
     de0:	1cc29f50 	stclne	15, cr9, [r2], {80}	; 0x50
     de4:	1cd40800 	ldclne	8, cr0, [r4], {0}
     de8:	00010800 	andeq	r0, r1, r0, lsl #16
     dec:	00000050 	andeq	r0, r0, r0, asr r0
     df0:	00000000 	andeq	r0, r0, r0
     df4:	001cd400 	andseq	sp, ip, r0, lsl #8
     df8:	001cde08 	andseq	sp, ip, r8, lsl #28
     dfc:	50000108 	andpl	r0, r0, r8, lsl #2
     e00:	08001cde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, fp, ip}
     e04:	08001ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp, ip}
     e08:	01f30004 	mvnseq	r0, r4
     e0c:	1ce89f50 	stclne	15, cr9, [r8], #320	; 0x140
     e10:	1d080800 	stcne	8, cr0, [r8, #-0]
     e14:	00010800 	andeq	r0, r1, r0, lsl #16
     e18:	00000050 	andeq	r0, r0, r0, asr r0
     e1c:	00000000 	andeq	r0, r0, r0
     e20:	001d0800 	andseq	r0, sp, r0, lsl #16
     e24:	001d1608 	andseq	r1, sp, r8, lsl #12
     e28:	50000108 	andpl	r0, r0, r8, lsl #2
     e2c:	08001d16 	stmdaeq	r0, {r1, r2, r4, r8, sl, fp, ip}
     e30:	08001d1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, fp, ip}
     e34:	01f30004 	mvnseq	r0, r4
     e38:	1d1e9f50 	ldcne	15, cr9, [lr, #-320]	; 0xfffffec0
     e3c:	1d3c0800 	ldcne	8, cr0, [ip, #-0]
     e40:	00010800 	andeq	r0, r1, r0, lsl #16
     e44:	00000050 	andeq	r0, r0, r0, asr r0
	...
     e54:	30000200 	andcc	r0, r0, r0, lsl #4
     e58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e5c:	00000000 	andeq	r0, r0, r0
     e60:	75000300 	strvc	r0, [r0, #-768]	; 0x300
     e64:	00009f7c 	andeq	r9, r0, ip, ror pc
     e68:	00000000 	andeq	r0, r0, r0
     e6c:	00010000 	andeq	r0, r1, r0
     e70:	00000055 	andeq	r0, r0, r5, asr r0
     e74:	00000000 	andeq	r0, r0, r0
     e78:	75000300 	strvc	r0, [r0, #-768]	; 0x300
     e7c:	00009f7c 	andeq	r9, r0, ip, ror pc
	...
     e8c:	00010000 	andeq	r0, r1, r0
     e90:	00000054 	andeq	r0, r0, r4, asr r0
     e94:	00000000 	andeq	r0, r0, r0
     e98:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
     ea4:	00540001 	subseq	r0, r4, r1
	...
     eb4:	01000000 	mrseq	r0, (UNDEF: 0)
     eb8:	00005000 	andeq	r5, r0, r0
     ebc:	00000000 	andeq	r0, r0, r0
     ec0:	00010000 	andeq	r0, r1, r0
     ec4:	00000058 	andeq	r0, r0, r8, asr r0
     ec8:	00000000 	andeq	r0, r0, r0
     ecc:	f3000400 	vshl.u8	d0, d0, d0
     ed0:	009f5001 	addseq	r5, pc, r1
	...
     ee0:	01000000 	mrseq	r0, (UNDEF: 0)
     ee4:	00005100 	andeq	r5, r0, r0, lsl #2
     ee8:	00000000 	andeq	r0, r0, r0
     eec:	00010000 	andeq	r0, r1, r0
     ef0:	00000056 	andeq	r0, r0, r6, asr r0
     ef4:	00000000 	andeq	r0, r0, r0
     ef8:	f3000400 	vshl.u8	d0, d0, d0
     efc:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     f0c:	01000000 	mrseq	r0, (UNDEF: 0)
     f10:	00005200 	andeq	r5, r0, r0, lsl #4
     f14:	00000000 	andeq	r0, r0, r0
     f18:	00010000 	andeq	r0, r1, r0
     f1c:	00000057 	andeq	r0, r0, r7, asr r0
     f20:	00000000 	andeq	r0, r0, r0
     f24:	f3000400 	vshl.u8	d0, d0, d0
     f28:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
     f38:	01000000 	mrseq	r0, (UNDEF: 0)
     f3c:	00005400 	andeq	r5, r0, r0, lsl #8
     f40:	00000000 	andeq	r0, r0, r0
     f44:	00030000 	andeq	r0, r3, r0
     f48:	009f0174 	addseq	r0, pc, r4, ror r1	; <UNPREDICTABLE>
     f4c:	00000000 	andeq	r0, r0, r0
     f50:	01000000 	mrseq	r0, (UNDEF: 0)
     f54:	00005400 	andeq	r5, r0, r0, lsl #8
	...
     f64:	00010000 	andeq	r0, r1, r0
     f68:	00000056 	andeq	r0, r0, r6, asr r0
     f6c:	00000000 	andeq	r0, r0, r0
     f70:	f3000400 	vshl.u8	d0, d0, d0
     f74:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     f84:	01000000 	mrseq	r0, (UNDEF: 0)
     f88:	00005d00 	andeq	r5, r0, r0, lsl #26
     f8c:	00000000 	andeq	r0, r0, r0
     f90:	00040000 	andeq	r0, r4, r0
     f94:	9f7da891 	svcls	0x007da891
	...
     fa0:	a87d0004 	ldmdage	sp!, {r2}^
     fa4:	00009f7d 	andeq	r9, r0, sp, ror pc
	...
     fb4:	00010000 	andeq	r0, r1, r0
     fb8:	00000055 	andeq	r0, r0, r5, asr r0
	...
     fc8:	91000400 	tstls	r0, r0, lsl #8
     fcc:	009f7e88 	addseq	r7, pc, r8, lsl #29
     fd0:	00000000 	andeq	r0, r0, r0
     fd4:	01000000 	mrseq	r0, (UNDEF: 0)
     fd8:	00005000 	andeq	r5, r0, r0
     fdc:	00000000 	andeq	r0, r0, r0
     fe0:	00040000 	andeq	r0, r4, r0
     fe4:	9f7e8891 	svcls	0x007e8891
	...
     ff0:	00500001 	subseq	r0, r0, r1
     ff4:	00000000 	andeq	r0, r0, r0
     ff8:	04000000 	streq	r0, [r0], #-0
     ffc:	7e889100 	sinvce	f1, f0
    1000:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1004:	00000000 	andeq	r0, r0, r0
    1008:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1014:	88910004 	ldmhi	r1, {r2}
    1018:	00009f7e 	andeq	r9, r0, lr, ror pc
    101c:	00000000 	andeq	r0, r0, r0
    1020:	00040000 	andeq	r0, r4, r0
    1024:	9f7e887d 	svcls	0x007e887d
	...
    1038:	e8910004 	ldm	r1, {r2}
    103c:	00009f7d 	andeq	r9, r0, sp, ror pc
    1040:	00000000 	andeq	r0, r0, r0
    1044:	00010000 	andeq	r0, r1, r0
    1048:	00000051 	andeq	r0, r0, r1, asr r0
    104c:	00000000 	andeq	r0, r0, r0
    1050:	91000400 	tstls	r0, r0, lsl #8
    1054:	009f7de8 	addseq	r7, pc, r8, ror #27
    1058:	00000000 	andeq	r0, r0, r0
    105c:	01000000 	mrseq	r0, (UNDEF: 0)
    1060:	00005000 	andeq	r5, r0, r0
    1064:	00000000 	andeq	r0, r0, r0
    1068:	00040000 	andeq	r0, r4, r0
    106c:	9f7de891 	svcls	0x007de891
	...
    1078:	e87d0004 	ldmda	sp!, {r2}^
    107c:	00009f7d 	andeq	r9, r0, sp, ror pc
	...
    108c:	00040000 	andeq	r0, r4, r0
    1090:	9f7dc891 	svcls	0x007dc891
	...
    109c:	00520001 	subseq	r0, r2, r1
    10a0:	00000000 	andeq	r0, r0, r0
    10a4:	04000000 	streq	r0, [r0], #-0
    10a8:	7dc89100 	stfvcp	f1, [r8]
    10ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    10b0:	00000000 	andeq	r0, r0, r0
    10b4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    10c0:	c8910004 	ldmgt	r1, {r2}
    10c4:	00009f7d 	andeq	r9, r0, sp, ror pc
    10c8:	00000000 	andeq	r0, r0, r0
    10cc:	00010000 	andeq	r0, r1, r0
    10d0:	00000051 	andeq	r0, r0, r1, asr r0
    10d4:	00000000 	andeq	r0, r0, r0
    10d8:	91000400 	tstls	r0, r0, lsl #8
    10dc:	009f7dc8 	addseq	r7, pc, r8, asr #27
    10e0:	00000000 	andeq	r0, r0, r0
    10e4:	04000000 	streq	r0, [r0], #-0
    10e8:	7dc87d00 	stclvc	13, cr7, [r8]
    10ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    10fc:	5d000100 	stfpls	f0, [r0, #-0]
	...
    1108:	a8910004 	ldmge	r1, {r2}
    110c:	00009f7d 	andeq	r9, r0, sp, ror pc
    1110:	00000000 	andeq	r0, r0, r0
    1114:	00040000 	andeq	r0, r4, r0
    1118:	9f7da87d 	svcls	0x007da87d
	...
    112c:	00560001 	subseq	r0, r6, r1
    1130:	00000000 	andeq	r0, r0, r0
    1134:	04000000 	streq	r0, [r0], #-0
    1138:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    113c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    114c:	91000400 	tstls	r0, r0, lsl #8
    1150:	009f7ec8 	addseq	r7, pc, r8, asr #29
    1154:	00000000 	andeq	r0, r0, r0
    1158:	01000000 	mrseq	r0, (UNDEF: 0)
    115c:	00005000 	andeq	r5, r0, r0
    1160:	00000000 	andeq	r0, r0, r0
    1164:	00040000 	andeq	r0, r4, r0
    1168:	9f7ec891 	svcls	0x007ec891
	...
    1174:	00520001 	subseq	r0, r2, r1
    1178:	00000000 	andeq	r0, r0, r0
    117c:	04000000 	streq	r0, [r0], #-0
    1180:	7ec89100 	acsvce	f1, f0
    1184:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1188:	00000000 	andeq	r0, r0, r0
    118c:	7d000400 	cfstrsvc	mvf0, [r0, #-0]
    1190:	009f7ec8 	addseq	r7, pc, r8, asr #29
	...
    11a0:	04000000 	streq	r0, [r0], #-0
    11a4:	7ea89100 	tanvce	f1, f0
    11a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    11ac:	00000000 	andeq	r0, r0, r0
    11b0:	52000100 	andpl	r0, r0, #0, 2
	...
    11bc:	a8910004 	ldmge	r1, {r2}
    11c0:	00009f7e 	andeq	r9, r0, lr, ror pc
    11c4:	00000000 	andeq	r0, r0, r0
    11c8:	00040000 	andeq	r0, r4, r0
    11cc:	9f7ea87d 	svcls	0x007ea87d
	...
    11d8:	08001d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, ip}
    11dc:	08001da0 	stmdaeq	r0, {r5, r7, r8, sl, fp, ip}
    11e0:	a0500001 	subsge	r0, r0, r1
    11e4:	b808001d 	stmdalt	r8, {r0, r2, r3, r4}
    11e8:	0108001d 	tsteq	r8, sp, lsl r0
    11ec:	1db85400 	cfldrsne	mvf5, [r8]
    11f0:	1dbb0800 	ldcne	8, cr0, [fp]
    11f4:	00030800 	andeq	r0, r3, r0, lsl #16
    11f8:	bb9f4070 	bllt	fe7d13c0 <BootRAM+0xd741b61>
    11fc:	bc08001d 	stclt	0, cr0, [r8], {29}
    1200:	0408001d 	streq	r0, [r8], #-29
    1204:	5001f300 	andpl	pc, r1, r0, lsl #6
    1208:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    120c:	00000000 	andeq	r0, r0, r0
    1210:	001d4c00 	andseq	r4, sp, r0, lsl #24
    1214:	001d5a08 	andseq	r5, sp, r8, lsl #20
    1218:	51000108 	tstpl	r0, r8, lsl #2
    121c:	08001d5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, fp, ip}
    1220:	08001db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, ip}
    1224:	b8550001 	ldmdalt	r5, {r0}^
    1228:	bb08001d 	bllt	2012a4 <__Stack_Size+0x200aa4>
    122c:	0108001d 	tsteq	r8, sp, lsl r0
    1230:	1dbb5100 	ldfnes	f5, [fp]
    1234:	1dbc0800 	ldcne	8, cr0, [ip]
    1238:	00040800 	andeq	r0, r4, r0, lsl #16
    123c:	9f5101f3 	svcls	0x005101f3
	...
    1248:	08001d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, ip}
    124c:	08001d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, ip}
    1250:	84520001 	ldrbhi	r0, [r2], #-1
    1254:	b808001d 	stmdalt	r8, {r0, r2, r3, r4}
    1258:	0108001d 	tsteq	r8, sp, lsl r0
    125c:	1db85600 	ldcne	6, cr5, [r8]
    1260:	1dbb0800 	ldcne	8, cr0, [fp]
    1264:	00010800 	andeq	r0, r1, r0, lsl #16
    1268:	001dbb52 	andseq	fp, sp, r2, asr fp
    126c:	001dbc08 	andseq	fp, sp, r8, lsl #24
    1270:	f3000408 	vshl.u8	d0, d8, d0
    1274:	009f5201 	addseq	r5, pc, r1, lsl #4
    1278:	00000000 	andeq	r0, r0, r0
    127c:	9a000000 	bls	1284 <__Stack_Size+0xa84>
    1280:	b808001d 	stmdalt	r8, {r0, r2, r3, r4}
    1284:	0108001d 	tsteq	r8, sp, lsl r0
    1288:	1db85500 	cfldr32ne	mvfx5, [r8]
    128c:	1dbb0800 	ldcne	8, cr0, [fp]
    1290:	00010800 	andeq	r0, r1, r0, lsl #16
    1294:	001dbb51 	andseq	fp, sp, r1, asr fp
    1298:	001dbc08 	andseq	fp, sp, r8, lsl #24
    129c:	f3000408 	vshl.u8	d0, d8, d0
    12a0:	009f5101 	addseq	r5, pc, r1, lsl #2
    12a4:	00000000 	andeq	r0, r0, r0
    12a8:	9a000000 	bls	12b0 <__Stack_Size+0xab0>
    12ac:	a008001d 	andge	r0, r8, sp, lsl r0
    12b0:	0108001d 	tsteq	r8, sp, lsl r0
    12b4:	1da05000 	stcne	0, cr5, [r0]
    12b8:	1db80800 	ldcne	8, cr0, [r8]
    12bc:	00010800 	andeq	r0, r1, r0, lsl #16
    12c0:	001db854 	andseq	fp, sp, r4, asr r8
    12c4:	001dbb08 	andseq	fp, sp, r8, lsl #22
    12c8:	70000308 	andvc	r0, r0, r8, lsl #6
    12cc:	1dbb9f40 	ldcne	15, cr9, [fp, #256]!	; 0x100
    12d0:	1dbc0800 	ldcne	8, cr0, [ip]
    12d4:	00040800 	andeq	r0, r4, r0, lsl #16
    12d8:	9f5001f3 	svcls	0x005001f3
	...
    12e4:	08001d9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, sl, fp, ip}
    12e8:	08001da0 	stmdaeq	r0, {r5, r7, r8, sl, fp, ip}
    12ec:	20700003 	rsbscs	r0, r0, r3
    12f0:	001da09f 	mulseq	sp, pc, r0	; <UNPREDICTABLE>
    12f4:	001db808 	andseq	fp, sp, r8, lsl #16
    12f8:	74000308 	strvc	r0, [r0], #-776	; 0x308
    12fc:	1db89f20 	ldcne	15, cr9, [r8, #128]!	; 0x80
    1300:	1dbb0800 	ldcne	8, cr0, [fp]
    1304:	00030800 	andeq	r0, r3, r0, lsl #16
    1308:	bb9f6070 	bllt	fe7d94d0 <BootRAM+0xd749c71>
    130c:	bc08001d 	stclt	0, cr0, [r8], {29}
    1310:	0608001d 			; <UNDEFINED> instruction: 0x0608001d
    1314:	5001f300 	andpl	pc, r1, r0, lsl #6
    1318:	009f2023 	addseq	r2, pc, r3, lsr #32
    131c:	00000000 	andeq	r0, r0, r0
    1320:	bc000000 	stclt	0, cr0, [r0], {-0}
    1324:	c808001d 	stmdagt	r8, {r0, r2, r3, r4}
    1328:	0108001d 	tsteq	r8, sp, lsl r0
    132c:	1dc85000 	stclne	0, cr5, [r8]
    1330:	1df60800 	ldclne	8, cr0, [r6]
    1334:	00010800 	andeq	r0, r1, r0, lsl #16
    1338:	00000056 	andeq	r0, r0, r6, asr r0
    133c:	00000000 	andeq	r0, r0, r0
    1340:	001dbc00 	andseq	fp, sp, r0, lsl #24
    1344:	001dcc08 	andseq	ip, sp, r8, lsl #24
    1348:	51000108 	tstpl	r0, r8, lsl #2
    134c:	08001dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip}
    1350:	08001df6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sl, fp, ip}
    1354:	00550001 	subseq	r0, r5, r1
    1358:	00000000 	andeq	r0, r0, r0
    135c:	bc000000 	stclt	0, cr0, [r0], {-0}
    1360:	cf08001d 	svcgt	0x0008001d
    1364:	0108001d 	tsteq	r8, sp, lsl r0
    1368:	1dcf5200 	sfmne	f5, 2, [pc]	; 1370 <__Stack_Size+0xb70>
    136c:	1df60800 	ldclne	8, cr0, [r6]
    1370:	00010800 	andeq	r0, r1, r0, lsl #16
    1374:	00000054 	andeq	r0, r0, r4, asr r0
    1378:	00000000 	andeq	r0, r0, r0
    137c:	001df800 	andseq	pc, sp, r0, lsl #16
    1380:	001e0408 	andseq	r0, lr, r8, lsl #8
    1384:	50000108 	andpl	r0, r0, r8, lsl #2
    1388:	08001e04 	stmdaeq	r0, {r2, r9, sl, fp, ip}
    138c:	08001e56 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, fp, ip}
    1390:	00550001 	subseq	r0, r5, r1
    1394:	00000000 	andeq	r0, r0, r0
    1398:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    139c:	0a08001d 	beq	201418 <__Stack_Size+0x200c18>
    13a0:	0108001e 	tsteq	r8, lr, lsl r0
    13a4:	1e0a5100 	adfnee	f5, f2, f0
    13a8:	1e560800 	cdpne	8, 5, cr0, cr6, cr0, {0}
    13ac:	00010800 	andeq	r0, r1, r0, lsl #16
    13b0:	00000057 	andeq	r0, r0, r7, asr r0
    13b4:	00000000 	andeq	r0, r0, r0
    13b8:	001df800 	andseq	pc, sp, r0, lsl #16
    13bc:	001e0608 	andseq	r0, lr, r8, lsl #12
    13c0:	52000108 	andpl	r0, r0, #8, 2
    13c4:	08001e06 	stmdaeq	r0, {r1, r2, r9, sl, fp, ip}
    13c8:	08001e56 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, fp, ip}
    13cc:	00560001 	subseq	r0, r6, r1
    13d0:	00000000 	andeq	r0, r0, r0
    13d4:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    13d8:	5008001e 	andpl	r0, r8, lr, lsl r0
    13dc:	0108001e 	tsteq	r8, lr, lsl r0
    13e0:	00005400 	andeq	r5, r0, r0, lsl #8
    13e4:	00000000 	andeq	r0, r0, r0
    13e8:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    13ec:	1e0a0800 	cdpne	8, 0, cr0, cr10, cr0, {0}
    13f0:	00010800 	andeq	r0, r1, r0, lsl #16
    13f4:	001e0a51 	andseq	r0, lr, r1, asr sl
    13f8:	001e5608 	andseq	r5, lr, r8, lsl #12
    13fc:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    1408:	08001e02 	stmdaeq	r0, {r1, r9, sl, fp, ip}
    140c:	08001e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, ip}
    1410:	545d0001 	ldrbpl	r0, [sp], #-1
    1414:	5608001e 			; <UNDEFINED> instruction: 0x5608001e
    1418:	0308001e 	movweq	r0, #32798	; 0x801e
    141c:	9f489100 	svcls	0x00489100
	...
    1428:	08001e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip}
    142c:	08001e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip}
    1430:	98500001 	ldmdals	r0, {r0}^
    1434:	1808001e 	stmdane	r8, {r1, r2, r3, r4}
    1438:	0108001f 	tsteq	r8, pc, lsl r0
    143c:	1f185400 	svcne	0x00185400
    1440:	1f200800 	svcne	0x00200800
    1444:	00040800 	andeq	r0, r4, r0, lsl #16
    1448:	9f5001f3 	svcls	0x005001f3
	...
    1454:	08001e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip}
    1458:	08001e9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, sl, fp, ip}
    145c:	9d510001 	ldclls	0, cr0, [r1, #-4]
    1460:	2008001e 	andcs	r0, r8, lr, lsl r0
    1464:	0408001f 	streq	r0, [r8], #-31
    1468:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    146c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1470:	00000000 	andeq	r0, r0, r0
    1474:	001e5800 	andseq	r5, lr, r0, lsl #16
    1478:	001e9008 	andseq	r9, lr, r8
    147c:	52000108 	andpl	r0, r0, #8, 2
    1480:	08001e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip}
    1484:	08001f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip}
    1488:	01f30004 	mvnseq	r0, r4
    148c:	00009f52 	andeq	r9, r0, r2, asr pc
    1490:	00000000 	andeq	r0, r0, r0
    1494:	1e6c0000 	cdpne	0, 6, cr0, cr12, cr0, {0}
    1498:	1f180800 	svcne	0x00180800
    149c:	00080800 	andeq	r0, r8, r0, lsl #16
    14a0:	25370078 	ldrcs	r0, [r7, #-120]!	; 0x78
    14a4:	9f1aff08 	svcls	0x001aff08
	...
    14b0:	08001e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip}
    14b4:	08001e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip}
    14b8:	90520001 	subsls	r0, r2, r1
    14bc:	2008001e 	andcs	r0, r8, lr, lsl r0
    14c0:	0408001f 	streq	r0, [r8], #-31
    14c4:	5201f300 	andpl	pc, r1, #0, 6
    14c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    14cc:	00000000 	andeq	r0, r0, r0
    14d0:	001e6c00 	andseq	r6, lr, r0, lsl #24
    14d4:	001e9d08 	andseq	r9, lr, r8, lsl #26
    14d8:	51000108 	tstpl	r0, r8, lsl #2
    14dc:	08001e9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, sl, fp, ip}
    14e0:	08001f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip}
    14e4:	01f30004 	mvnseq	r0, r4
    14e8:	00009f51 	andeq	r9, r0, r1, asr pc
    14ec:	00000000 	andeq	r0, r0, r0
    14f0:	1f200000 	svcne	0x00200000
    14f4:	1f360800 	svcne	0x00360800
    14f8:	00010800 	andeq	r0, r1, r0, lsl #16
    14fc:	001f3650 	andseq	r3, pc, r0, asr r6	; <UNPREDICTABLE>
    1500:	001ffc08 	andseq	pc, pc, r8, lsl #24
    1504:	56000108 	strpl	r0, [r0], -r8, lsl #2
    1508:	08001ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    150c:	08002000 	stmdaeq	r0, {sp}
    1510:	01f30004 	mvnseq	r0, r4
    1514:	00009f50 	andeq	r9, r0, r0, asr pc
    1518:	00000000 	andeq	r0, r0, r0
    151c:	1f200000 	svcne	0x00200000
    1520:	1f320800 	svcne	0x00320800
    1524:	00010800 	andeq	r0, r1, r0, lsl #16
    1528:	001f3251 	andseq	r3, pc, r1, asr r2	; <UNPREDICTABLE>
    152c:	001ffc08 	andseq	pc, pc, r8, lsl #24
    1530:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1534:	08001ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    1538:	08002000 	stmdaeq	r0, {sp}
    153c:	01f30004 	mvnseq	r0, r4
    1540:	00009f51 	andeq	r9, r0, r1, asr pc
    1544:	00000000 	andeq	r0, r0, r0
    1548:	1f200000 	svcne	0x00200000
    154c:	1f340800 	svcne	0x00340800
    1550:	00010800 	andeq	r0, r1, r0, lsl #16
    1554:	001f3452 	andseq	r3, pc, r2, asr r4	; <UNPREDICTABLE>
    1558:	001ffc08 	andseq	pc, pc, r8, lsl #24
    155c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    1560:	08001ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    1564:	08002000 	stmdaeq	r0, {sp}
    1568:	01f30004 	mvnseq	r0, r4
    156c:	00009f52 	andeq	r9, r0, r2, asr pc
    1570:	00000000 	andeq	r0, r0, r0
    1574:	20000000 	andcs	r0, r0, r0
    1578:	200e0800 	andcs	r0, lr, r0, lsl #16
    157c:	00010800 	andeq	r0, r1, r0, lsl #16
    1580:	00200e50 	eoreq	r0, r0, r0, asr lr
    1584:	0020b408 	eoreq	fp, r0, r8, lsl #8
    1588:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    1594:	08002000 	stmdaeq	r0, {sp}
    1598:	08002013 	stmdaeq	r0, {r0, r1, r4, sp}
    159c:	13510001 	cmpne	r1, #1
    15a0:	b4080020 	strlt	r0, [r8], #-32
    15a4:	01080020 	tsteq	r8, r0, lsr #32
    15a8:	00005500 	andeq	r5, r0, r0, lsl #10
    15ac:	00000000 	andeq	r0, r0, r0
    15b0:	20b40000 	adcscs	r0, r4, r0
    15b4:	20c20800 	sbccs	r0, r2, r0, lsl #16
    15b8:	00010800 	andeq	r0, r1, r0, lsl #16
    15bc:	0020c250 	eoreq	ip, r0, r0, asr r2
    15c0:	00213208 	eoreq	r3, r1, r8, lsl #4
    15c4:	58000108 	stmdapl	r0, {r3, r8}
    15c8:	08002132 	stmdaeq	r0, {r1, r4, r5, r8, sp}
    15cc:	08002138 	stmdaeq	r0, {r3, r4, r5, r8, sp}
    15d0:	01f30004 	mvnseq	r0, r4
    15d4:	00009f50 	andeq	r9, r0, r0, asr pc
    15d8:	00000000 	andeq	r0, r0, r0
    15dc:	20b40000 	adcscs	r0, r4, r0
    15e0:	20c40800 	sbccs	r0, r4, r0, lsl #16
    15e4:	00010800 	andeq	r0, r1, r0, lsl #16
    15e8:	0020c451 	eoreq	ip, r0, r1, asr r4
    15ec:	00213208 	eoreq	r3, r1, r8, lsl #4
    15f0:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    15f4:	08002132 	stmdaeq	r0, {r1, r4, r5, r8, sp}
    15f8:	08002138 	stmdaeq	r0, {r3, r4, r5, r8, sp}
    15fc:	01f30004 	mvnseq	r0, r4
    1600:	00009f51 	andeq	r9, r0, r1, asr pc
    1604:	00000000 	andeq	r0, r0, r0
    1608:	20b40000 	adcscs	r0, r4, r0
    160c:	20c60800 	sbccs	r0, r6, r0, lsl #16
    1610:	00010800 	andeq	r0, r1, r0, lsl #16
    1614:	0020c652 	eoreq	ip, r0, r2, asr r6
    1618:	00213208 	eoreq	r3, r1, r8, lsl #4
    161c:	56000108 	strpl	r0, [r0], -r8, lsl #2
    1620:	08002132 	stmdaeq	r0, {r1, r4, r5, r8, sp}
    1624:	08002138 	stmdaeq	r0, {r3, r4, r5, r8, sp}
    1628:	01f30004 	mvnseq	r0, r4
    162c:	00009f52 	andeq	r9, r0, r2, asr pc
    1630:	00000000 	andeq	r0, r0, r0
    1634:	20ca0000 	sbccs	r0, sl, r0
    1638:	20cc0800 	sbccs	r0, ip, r0, lsl #16
    163c:	00030800 	andeq	r0, r3, r0, lsl #16
    1640:	cc9fff08 	ldcgt	15, cr15, [pc], {8}
    1644:	16080020 	strne	r0, [r8], -r0, lsr #32
    1648:	01080021 	tsteq	r8, r1, lsr #32
    164c:	21165400 	tstcs	r6, r0, lsl #8
    1650:	211e0800 	tstcs	lr, r0, lsl #16
    1654:	00030800 	andeq	r0, r3, r0, lsl #16
    1658:	1e9f0174 	mrcne	1, 4, r0, cr15, cr4, {3}
    165c:	32080021 	andcc	r0, r8, #33	; 0x21
    1660:	01080021 	tsteq	r8, r1, lsr #32
    1664:	00005400 	andeq	r5, r0, r0, lsl #8
    1668:	00000000 	andeq	r0, r0, r0
    166c:	20ba0000 	adcscs	r0, sl, r0
    1670:	212e0800 	teqcs	lr, r0, lsl #16
    1674:	00010800 	andeq	r0, r1, r0, lsl #16
    1678:	00212e5d 	eoreq	r2, r1, sp, asr lr
    167c:	00213208 	eoreq	r3, r1, r8, lsl #4
    1680:	91000408 	tstls	r0, r8, lsl #8
    1684:	329f7de8 	addscc	r7, pc, #232, 26	; 0x3a00
    1688:	38080021 	stmdacc	r8, {r0, r5}
    168c:	04080021 	streq	r0, [r8], #-33	; 0x21
    1690:	7de87d00 	stclvc	13, cr7, [r8]
    1694:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1698:	00000000 	andeq	r0, r0, r0
    169c:	0020e200 	eoreq	lr, r0, r0, lsl #4
    16a0:	00213208 	eoreq	r3, r1, r8, lsl #4
    16a4:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    16b0:	08002122 	stmdaeq	r0, {r1, r5, r8, sp}
    16b4:	0800212e 	stmdaeq	r0, {r1, r2, r3, r5, r8, sp}
    16b8:	2e5d0001 	cdpcs	0, 5, cr0, cr13, cr1, {0}
    16bc:	32080021 	andcc	r0, r8, #33	; 0x21
    16c0:	04080021 	streq	r0, [r8], #-33	; 0x21
    16c4:	7de89100 	stfvcp	f1, [r8]
    16c8:	0021329f 	mlaeq	r1, pc, r2, r3	; <UNPREDICTABLE>
    16cc:	00213808 	eoreq	r3, r1, r8, lsl #16
    16d0:	7d000408 	cfstrsvc	mvf0, [r0, #-32]	; 0xffffffe0
    16d4:	009f7de8 	addseq	r7, pc, r8, ror #27
    16d8:	00000000 	andeq	r0, r0, r0
    16dc:	22000000 	andcs	r0, r0, #0
    16e0:	32080021 	andcc	r0, r8, #33	; 0x21
    16e4:	01080021 	tsteq	r8, r1, lsr #32
    16e8:	21325800 	teqcs	r2, r0, lsl #16
    16ec:	21380800 	teqcs	r8, r0, lsl #16
    16f0:	00040800 	andeq	r0, r4, r0, lsl #16
    16f4:	9f5001f3 	svcls	0x005001f3
	...
    1708:	00500001 	subseq	r0, r0, r1
    170c:	00000000 	andeq	r0, r0, r0
    1710:	01000000 	mrseq	r0, (UNDEF: 0)
    1714:	00005600 	andeq	r5, r0, r0, lsl #12
    1718:	00000000 	andeq	r0, r0, r0
    171c:	00040000 	andeq	r0, r4, r0
    1720:	9f5001f3 	svcls	0x005001f3
	...
    1734:	00510001 	subseq	r0, r1, r1
    1738:	00000000 	andeq	r0, r0, r0
    173c:	01000000 	mrseq	r0, (UNDEF: 0)
    1740:	00005700 	andeq	r5, r0, r0, lsl #14
    1744:	00000000 	andeq	r0, r0, r0
    1748:	00040000 	andeq	r0, r4, r0
    174c:	9f5101f3 	svcls	0x005101f3
	...
    1760:	00510001 	subseq	r0, r1, r1
    1764:	00000000 	andeq	r0, r0, r0
    1768:	01000000 	mrseq	r0, (UNDEF: 0)
    176c:	00005700 	andeq	r5, r0, r0, lsl #14
    1770:	00000000 	andeq	r0, r0, r0
    1774:	00040000 	andeq	r0, r4, r0
    1778:	9f5101f3 	svcls	0x005101f3
	...
    178c:	a8910004 	ldmge	r1, {r2}
    1790:	00009f7e 	andeq	r9, r0, lr, ror pc
    1794:	00000000 	andeq	r0, r0, r0
    1798:	00010000 	andeq	r0, r1, r0
    179c:	00000051 	andeq	r0, r0, r1, asr r0
    17a0:	00000000 	andeq	r0, r0, r0
    17a4:	91000400 	tstls	r0, r0, lsl #8
    17a8:	009f7ea8 	addseq	r7, pc, r8, lsr #29
    17ac:	00000000 	andeq	r0, r0, r0
    17b0:	01000000 	mrseq	r0, (UNDEF: 0)
    17b4:	00005200 	andeq	r5, r0, r0, lsl #4
    17b8:	00000000 	andeq	r0, r0, r0
    17bc:	00040000 	andeq	r0, r4, r0
    17c0:	9f7ea891 	svcls	0x007ea891
	...
    17cc:	a87d0004 	ldmdage	sp!, {r2}^
    17d0:	00009f7e 	andeq	r9, r0, lr, ror pc
	...
    17e0:	00010000 	andeq	r0, r1, r0
    17e4:	00000054 	andeq	r0, r0, r4, asr r0
    17e8:	00000000 	andeq	r0, r0, r0
    17ec:	74000300 	strvc	r0, [r0], #-768	; 0x300
    17f0:	00009f70 	andeq	r9, r0, r0, ror pc
    17f4:	00000000 	andeq	r0, r0, r0
    17f8:	00030000 	andeq	r0, r3, r0
    17fc:	009f6074 	addseq	r6, pc, r4, ror r0	; <UNPREDICTABLE>
    1800:	00000000 	andeq	r0, r0, r0
    1804:	03000000 	movweq	r0, #0
    1808:	9f507400 	svcls	0x00507400
	...
    1814:	00500001 	subseq	r0, r0, r1
    1818:	00000000 	andeq	r0, r0, r0
    181c:	03000000 	movweq	r0, #0
    1820:	9f507400 	svcls	0x00507400
	...
    182c:	00500001 	subseq	r0, r0, r1
    1830:	00000000 	andeq	r0, r0, r0
    1834:	03000000 	movweq	r0, #0
    1838:	9f507400 	svcls	0x00507400
	...
    1844:	e8910004 	ldm	r1, {r2}
    1848:	00009f7e 	andeq	r9, r0, lr, ror pc
    184c:	00000000 	andeq	r0, r0, r0
    1850:	00010000 	andeq	r0, r1, r0
    1854:	00000050 	andeq	r0, r0, r0, asr r0
    1858:	00000000 	andeq	r0, r0, r0
    185c:	91000400 	tstls	r0, r0, lsl #8
    1860:	009f7ee8 	addseq	r7, pc, r8, ror #29
    1864:	00000000 	andeq	r0, r0, r0
    1868:	01000000 	mrseq	r0, (UNDEF: 0)
    186c:	00005200 	andeq	r5, r0, r0, lsl #4
    1870:	00000000 	andeq	r0, r0, r0
    1874:	00040000 	andeq	r0, r4, r0
    1878:	9f7ee891 	svcls	0x007ee891
	...
    1884:	e87d0004 	ldmda	sp!, {r2}^
    1888:	00009f7e 	andeq	r9, r0, lr, ror pc
	...
    1898:	00040000 	andeq	r0, r4, r0
    189c:	9f7ea891 	svcls	0x007ea891
	...
    18a8:	00520001 	subseq	r0, r2, r1
    18ac:	00000000 	andeq	r0, r0, r0
    18b0:	04000000 	streq	r0, [r0], #-0
    18b4:	7ea89100 	tanvce	f1, f0
    18b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    18bc:	00000000 	andeq	r0, r0, r0
    18c0:	7d000400 	cfstrsvc	mvf0, [r0, #-0]
    18c4:	009f7ea8 	addseq	r7, pc, r8, lsr #29
	...
    18d4:	01000000 	mrseq	r0, (UNDEF: 0)
    18d8:	00005200 	andeq	r5, r0, r0, lsl #4
    18dc:	00000000 	andeq	r0, r0, r0
    18e0:	00040000 	andeq	r0, r4, r0
    18e4:	9f7ea891 	svcls	0x007ea891
	...
    18f0:	a87d0004 	ldmdage	sp!, {r2}^
    18f4:	00009f7e 	andeq	r9, r0, lr, ror pc
	...
    1904:	00010000 	andeq	r0, r1, r0
    1908:	00000056 	andeq	r0, r0, r6, asr r0
    190c:	00000000 	andeq	r0, r0, r0
    1910:	f3000400 	vshl.u8	d0, d0, d0
    1914:	009f5001 	addseq	r5, pc, r1
	...
    1924:	04000000 	streq	r0, [r0], #-0
    1928:	7ee89100 	urdvce	f1, f0
    192c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1930:	00000000 	andeq	r0, r0, r0
    1934:	52000100 	andpl	r0, r0, #0, 2
	...
    1940:	e8910004 	ldm	r1, {r2}
    1944:	00009f7e 	andeq	r9, r0, lr, ror pc
    1948:	00000000 	andeq	r0, r0, r0
    194c:	00040000 	andeq	r0, r4, r0
    1950:	9f7ee87d 	svcls	0x007ee87d
	...
    1964:	00560001 	subseq	r0, r6, r1
    1968:	00000000 	andeq	r0, r0, r0
    196c:	04000000 	streq	r0, [r0], #-0
    1970:	5001f300 	andpl	pc, r1, r0, lsl #6
    1974:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1978:	00000000 	andeq	r0, r0, r0
    197c:	00213800 	eoreq	r3, r1, r0, lsl #16
    1980:	00214408 	eoreq	r4, r1, r8, lsl #8
    1984:	50000108 	andpl	r0, r0, r8, lsl #2
    1988:	08002144 	stmdaeq	r0, {r2, r6, r8, sp}
    198c:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
    1990:	00560001 	subseq	r0, r6, r1
    1994:	00000000 	andeq	r0, r0, r0
    1998:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    199c:	46080021 	strmi	r0, [r8], -r1, lsr #32
    19a0:	01080021 	tsteq	r8, r1, lsr #32
    19a4:	21465100 	mrscs	r5, (UNDEF: 86)
    19a8:	22b40800 	adcscs	r0, r4, #0, 16
    19ac:	00010800 	andeq	r0, r1, r0, lsl #16
    19b0:	00000057 	andeq	r0, r0, r7, asr r0
    19b4:	00000000 	andeq	r0, r0, r0
    19b8:	00213800 	eoreq	r3, r1, r0, lsl #16
    19bc:	00214e08 	eoreq	r4, r1, r8, lsl #28
    19c0:	52000108 	andpl	r0, r0, #8, 2
    19c4:	0800214e 	stmdaeq	r0, {r1, r2, r3, r6, r8, sp}
    19c8:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
    19cc:	00590001 	subseq	r0, r9, r1
    19d0:	00000000 	andeq	r0, r0, r0
    19d4:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    19d8:	4c080021 	stcmi	0, cr0, [r8], {33}	; 0x21
    19dc:	01080021 	tsteq	r8, r1, lsr #32
    19e0:	214c5300 	mrscs	r5, SPSR_mon
    19e4:	22b40800 	adcscs	r0, r4, #0, 16
    19e8:	00010800 	andeq	r0, r1, r0, lsl #16
    19ec:	00000058 	andeq	r0, r0, r8, asr r0
    19f0:	00000000 	andeq	r0, r0, r0
    19f4:	00213800 	eoreq	r3, r1, r0, lsl #16
    19f8:	00225008 	eoreq	r5, r2, r8
    19fc:	31000208 	tstcc	r0, r8, lsl #4
    1a00:	0022509f 	mlaeq	r2, pc, r0, r5	; <UNPREDICTABLE>
    1a04:	00227008 	eoreq	r7, r2, r8
    1a08:	75000508 	strvc	r0, [r0, #-1288]	; 0x508
    1a0c:	9f1a3100 	svcls	0x001a3100
    1a10:	08002270 	stmdaeq	r0, {r4, r5, r6, r9, sp}
    1a14:	080022a4 	stmdaeq	r0, {r2, r5, r7, r9, sp}
    1a18:	00750008 	rsbseq	r0, r5, r8
    1a1c:	311a0074 	tstcc	sl, r4, ror r0
    1a20:	22a49f1a 	adccs	r9, r4, #26, 30	; 0x68
    1a24:	22b40800 	adcscs	r0, r4, #0, 16
    1a28:	00020800 	andeq	r0, r2, r0, lsl #16
    1a2c:	00009f31 	andeq	r9, r0, r1, lsr pc
    1a30:	00000000 	andeq	r0, r0, r0
    1a34:	214a0000 	mrscs	r0, (UNDEF: 74)
    1a38:	214c0800 	cmpcs	ip, r0, lsl #16
    1a3c:	00010800 	andeq	r0, r1, r0, lsl #16
    1a40:	00214c53 	eoreq	r4, r1, r3, asr ip
    1a44:	0022b408 	eoreq	fp, r2, r8, lsl #8
    1a48:	58000108 	stmdapl	r0, {r3, r8}
	...
    1a54:	0800214a 	stmdaeq	r0, {r1, r3, r6, r8, sp}
    1a58:	0800214e 	stmdaeq	r0, {r1, r2, r3, r6, r8, sp}
    1a5c:	4e520001 	cdpmi	0, 5, cr0, cr2, cr1, {0}
    1a60:	b4080021 	strlt	r0, [r8], #-33	; 0x21
    1a64:	01080022 	tsteq	r8, r2, lsr #32
    1a68:	00005900 	andeq	r5, r0, r0, lsl #18
    1a6c:	00000000 	andeq	r0, r0, r0
    1a70:	21420000 	mrscs	r0, (UNDEF: 66)
    1a74:	21460800 	cmpcs	r6, r0, lsl #16
    1a78:	00010800 	andeq	r0, r1, r0, lsl #16
    1a7c:	00214651 	eoreq	r4, r1, r1, asr r6
    1a80:	0022b408 	eoreq	fp, r2, r8, lsl #8
    1a84:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    1a90:	08002142 	stmdaeq	r0, {r1, r6, r8, sp}
    1a94:	08002144 	stmdaeq	r0, {r2, r6, r8, sp}
    1a98:	44500001 	ldrbmi	r0, [r0], #-1
    1a9c:	b4080021 	strlt	r0, [r8], #-33	; 0x21
    1aa0:	01080022 	tsteq	r8, r2, lsr #32
    1aa4:	00005600 	andeq	r5, r0, r0, lsl #12
    1aa8:	00000000 	andeq	r0, r0, r0
    1aac:	21420000 	mrscs	r0, (UNDEF: 66)
    1ab0:	22120800 	andscs	r0, r2, #0, 16
    1ab4:	00040800 	andeq	r0, r4, r0, lsl #16
    1ab8:	9f7d8091 	svcls	0x007d8091
    1abc:	08002212 	stmdaeq	r0, {r1, r4, r9, sp}
    1ac0:	08002219 	stmdaeq	r0, {r0, r3, r4, r9, sp}
    1ac4:	19500001 	ldmdbne	r0, {r0}^
    1ac8:	56080022 	strpl	r0, [r8], -r2, lsr #32
    1acc:	04080022 	streq	r0, [r8], #-34	; 0x22
    1ad0:	7d809100 	stfvcd	f1, [r0]
    1ad4:	0022569f 	mlaeq	r2, pc, r6, r5	; <UNPREDICTABLE>
    1ad8:	00225908 	eoreq	r5, r2, r8, lsl #18
    1adc:	52000108 	andpl	r0, r0, #8, 2
    1ae0:	08002259 	stmdaeq	r0, {r0, r3, r4, r6, r9, sp}
    1ae4:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
    1ae8:	80910004 	addshi	r0, r1, r4
    1aec:	00009f7d 	andeq	r9, r0, sp, ror pc
    1af0:	00000000 	andeq	r0, r0, r0
    1af4:	217c0000 	cmncs	ip, r0
    1af8:	21b80800 			; <UNDEFINED> instruction: 0x21b80800
    1afc:	00040800 	andeq	r0, r4, r0, lsl #16
    1b00:	9f7ee091 	svcls	0x007ee091
    1b04:	080021b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sp}
    1b08:	080021bb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, r8, sp}
    1b0c:	bb510001 	bllt	1441b18 <__Stack_Size+0x1441318>
    1b10:	fa080021 	blx	201b9c <__Stack_Size+0x20139c>
    1b14:	04080021 	streq	r0, [r8], #-33	; 0x21
    1b18:	7ee09100 	urdvcs	f1, f0
    1b1c:	0021fa9f 	mlaeq	r1, pc, sl, pc	; <UNPREDICTABLE>
    1b20:	00220108 	eoreq	r0, r2, r8, lsl #2
    1b24:	51000108 	tstpl	r0, r8, lsl #2
    1b28:	08002201 	stmdaeq	r0, {r0, r9, sp}
    1b2c:	08002206 	stmdaeq	r0, {r1, r2, r9, sp}
    1b30:	e0910004 	adds	r0, r1, r4
    1b34:	22069f7e 	andcs	r9, r6, #504	; 0x1f8
    1b38:	220d0800 	andcs	r0, sp, #0, 16
    1b3c:	00010800 	andeq	r0, r1, r0, lsl #16
    1b40:	00220d51 	eoreq	r0, r2, r1, asr sp
    1b44:	00221408 	eoreq	r1, r2, r8, lsl #8
    1b48:	91000408 	tstls	r0, r8, lsl #8
    1b4c:	149f7ee0 	ldrne	r7, [pc], #3808	; 1b54 <__Stack_Size+0x1354>
    1b50:	19080022 	stmdbne	r8, {r1, r5}
    1b54:	01080022 	tsteq	r8, r2, lsr #32
    1b58:	22195100 	andscs	r5, r9, #0, 2
    1b5c:	221c0800 	andscs	r0, ip, #0, 16
    1b60:	00040800 	andeq	r0, r4, r0, lsl #16
    1b64:	9f7ee091 	svcls	0x007ee091
    1b68:	0800221c 	stmdaeq	r0, {r2, r3, r4, r9, sp}
    1b6c:	08002225 	stmdaeq	r0, {r0, r2, r5, r9, sp}
    1b70:	25500001 	ldrbcs	r0, [r0, #-1]
    1b74:	2c080022 	stccs	0, cr0, [r8], {34}	; 0x22
    1b78:	04080022 	streq	r0, [r8], #-34	; 0x22
    1b7c:	7ee09100 	urdvcs	f1, f0
    1b80:	00222c9f 	mlaeq	r2, pc, ip, r2	; <UNPREDICTABLE>
    1b84:	00222f08 	eoreq	r2, r2, r8, lsl #30
    1b88:	52000108 	andpl	r0, r0, #8, 2
    1b8c:	0800222f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r9, sp}
    1b90:	0800223c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sp}
    1b94:	e0910004 	adds	r0, r1, r4
    1b98:	223c9f7e 	eorscs	r9, ip, #504	; 0x1f8
    1b9c:	22430800 	subcs	r0, r3, #0, 16
    1ba0:	00010800 	andeq	r0, r1, r0, lsl #16
    1ba4:	00224351 	eoreq	r4, r2, r1, asr r3
    1ba8:	00224a08 	eoreq	r4, r2, r8, lsl #20
    1bac:	91000408 	tstls	r0, r8, lsl #8
    1bb0:	4a9f7ee0 	bmi	fe7e1738 <BootRAM+0xd751ed9>
    1bb4:	4f080022 	svcmi	0x00080022
    1bb8:	01080022 	tsteq	r8, r2, lsr #32
    1bbc:	224f5200 	subcs	r5, pc, #0, 4
    1bc0:	226c0800 	rsbcs	r0, ip, #0, 16
    1bc4:	00040800 	andeq	r0, r4, r0, lsl #16
    1bc8:	9f7ee091 	svcls	0x007ee091
    1bcc:	0800226c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sp}
    1bd0:	0800226f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r9, sp}
    1bd4:	6f500001 	svcvs	0x00500001
    1bd8:	76080022 	strvc	r0, [r8], -r2, lsr #32
    1bdc:	04080022 	streq	r0, [r8], #-34	; 0x22
    1be0:	7ee09100 	urdvcs	f1, f0
    1be4:	0022769f 	mlaeq	r2, pc, r6, r7	; <UNPREDICTABLE>
    1be8:	00227908 	eoreq	r7, r2, r8, lsl #18
    1bec:	52000108 	andpl	r0, r0, #8, 2
    1bf0:	08002279 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sp}
    1bf4:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
    1bf8:	e0910004 	adds	r0, r1, r4
    1bfc:	00009f7e 	andeq	r9, r0, lr, ror pc
    1c00:	00000000 	andeq	r0, r0, r0
    1c04:	217c0000 	cmncs	ip, r0
    1c08:	22120800 	andscs	r0, r2, #0, 16
    1c0c:	00040800 	andeq	r0, r4, r0, lsl #16
    1c10:	9f7d8091 	svcls	0x007d8091
    1c14:	08002212 	stmdaeq	r0, {r1, r4, r9, sp}
    1c18:	08002219 	stmdaeq	r0, {r0, r3, r4, r9, sp}
    1c1c:	19500001 	ldmdbne	r0, {r0}^
    1c20:	56080022 	strpl	r0, [r8], -r2, lsr #32
    1c24:	04080022 	streq	r0, [r8], #-34	; 0x22
    1c28:	7d809100 	stfvcd	f1, [r0]
    1c2c:	0022569f 	mlaeq	r2, pc, r6, r5	; <UNPREDICTABLE>
    1c30:	00225908 	eoreq	r5, r2, r8, lsl #18
    1c34:	52000108 	andpl	r0, r0, #8, 2
    1c38:	08002259 	stmdaeq	r0, {r0, r3, r4, r6, r9, sp}
    1c3c:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
    1c40:	80910004 	addshi	r0, r1, r4
    1c44:	00009f7d 	andeq	r9, r0, sp, ror pc
    1c48:	00000000 	andeq	r0, r0, r0
    1c4c:	217c0000 	cmncs	ip, r0
    1c50:	21800800 	orrcs	r0, r0, r0, lsl #16
    1c54:	00010800 	andeq	r0, r1, r0, lsl #16
    1c58:	00218054 	eoreq	r8, r1, r4, asr r0
    1c5c:	00218408 	eoreq	r8, r1, r8, lsl #8
    1c60:	74000308 	strvc	r0, [r0], #-776	; 0x308
    1c64:	21849f70 	orrcs	r9, r4, r0, ror pc
    1c68:	21880800 	orrcs	r0, r8, r0, lsl #16
    1c6c:	00030800 	andeq	r0, r3, r0, lsl #16
    1c70:	889f6074 	ldmhi	pc, {r2, r4, r5, r6, sp, lr}	; <UNPREDICTABLE>
    1c74:	98080021 	stmdals	r8, {r0, r5}
    1c78:	03080021 	movweq	r0, #32801	; 0x8021
    1c7c:	9f507400 	svcls	0x00507400
    1c80:	08002198 	stmdaeq	r0, {r3, r4, r7, r8, sp}
    1c84:	080021b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sp}
    1c88:	e0910004 	adds	r0, r1, r4
    1c8c:	21b69f7d 			; <UNDEFINED> instruction: 0x21b69f7d
    1c90:	21bb0800 			; <UNDEFINED> instruction: 0x21bb0800
    1c94:	00010800 	andeq	r0, r1, r0, lsl #16
    1c98:	0021bb50 	eoreq	fp, r1, r0, asr fp
    1c9c:	0021d008 	eoreq	sp, r1, r8
    1ca0:	91000408 	tstls	r0, r8, lsl #8
    1ca4:	d09f7de0 	addsle	r7, pc, r0, ror #27
    1ca8:	d7080021 	strle	r0, [r8, -r1, lsr #32]
    1cac:	01080021 	tsteq	r8, r1, lsr #32
    1cb0:	21d75000 	bicscs	r5, r7, r0
    1cb4:	21e60800 	mvncs	r0, r0, lsl #16
    1cb8:	00040800 	andeq	r0, r4, r0, lsl #16
    1cbc:	9f7de091 	svcls	0x007de091
    1cc0:	080021e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sp}
    1cc4:	080021e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, sp}
    1cc8:	e9500001 	ldmdb	r0, {r0}^
    1ccc:	f8080021 			; <UNDEFINED> instruction: 0xf8080021
    1cd0:	04080021 	streq	r0, [r8], #-33	; 0x21
    1cd4:	7de09100 	stfvcp	f1, [r0]
    1cd8:	0021f89f 	mlaeq	r1, pc, r8, pc	; <UNPREDICTABLE>
    1cdc:	00220108 	eoreq	r0, r2, r8, lsl #2
    1ce0:	50000108 	andpl	r0, r0, r8, lsl #2
    1ce4:	08002201 	stmdaeq	r0, {r0, r9, sp}
    1ce8:	08002202 	stmdaeq	r0, {r1, r9, sp}
    1cec:	50740003 	rsbspl	r0, r4, r3
    1cf0:	0022029f 	mlaeq	r2, pc, r2, r0	; <UNPREDICTABLE>
    1cf4:	00220408 	eoreq	r0, r2, r8, lsl #8
    1cf8:	91000408 	tstls	r0, r8, lsl #8
    1cfc:	049f7de0 	ldreq	r7, [pc], #3552	; 1d04 <__Stack_Size+0x1504>
    1d00:	0d080022 	stceq	0, cr0, [r8, #-136]	; 0xffffff78
    1d04:	01080022 	tsteq	r8, r2, lsr #32
    1d08:	220d5000 	andcs	r5, sp, #0
    1d0c:	222a0800 	eorcs	r0, sl, #0, 16
    1d10:	00040800 	andeq	r0, r4, r0, lsl #16
    1d14:	9f7de091 	svcls	0x007de091
    1d18:	0800222a 	stmdaeq	r0, {r1, r3, r5, r9, sp}
    1d1c:	0800222f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r9, sp}
    1d20:	2f510001 	svccs	0x00510001
    1d24:	36080022 	strcc	r0, [r8], -r2, lsr #32
    1d28:	04080022 	streq	r0, [r8], #-34	; 0x22
    1d2c:	7de09100 	stfvcp	f1, [r0]
    1d30:	0022369f 	mlaeq	r2, pc, r6, r3	; <UNPREDICTABLE>
    1d34:	00223908 	eoreq	r3, r2, r8, lsl #18
    1d38:	52000108 	andpl	r0, r0, #8, 2
    1d3c:	08002239 	stmdaeq	r0, {r0, r3, r4, r5, r9, sp}
    1d40:	0800224c 	stmdaeq	r0, {r2, r3, r6, r9, sp}
    1d44:	e0910004 	adds	r0, r1, r4
    1d48:	224c9f7d 	subcs	r9, ip, #500	; 0x1f4
    1d4c:	224f0800 	subcs	r0, pc, #0, 16
    1d50:	00010800 	andeq	r0, r1, r0, lsl #16
    1d54:	00224f50 	eoreq	r4, r2, r0, asr pc
    1d58:	00225208 	eoreq	r5, r2, r8, lsl #4
    1d5c:	91000408 	tstls	r0, r8, lsl #8
    1d60:	529f7de0 	addspl	r7, pc, #224, 26	; 0x3800
    1d64:	59080022 	stmdbpl	r8, {r1, r5}
    1d68:	01080022 	tsteq	r8, r2, lsr #32
    1d6c:	22595000 	subscs	r5, r9, #0
    1d70:	22720800 	rsbscs	r0, r2, #0, 16
    1d74:	00040800 	andeq	r0, r4, r0, lsl #16
    1d78:	9f7de091 	svcls	0x007de091
    1d7c:	08002272 	stmdaeq	r0, {r1, r4, r5, r6, r9, sp}
    1d80:	08002279 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sp}
    1d84:	79500001 	ldmdbvc	r0, {r0}^
    1d88:	80080022 	andhi	r0, r8, r2, lsr #32
    1d8c:	04080022 	streq	r0, [r8], #-34	; 0x22
    1d90:	7de09100 	stfvcp	f1, [r0]
    1d94:	0022809f 	mlaeq	r2, pc, r0, r8	; <UNPREDICTABLE>
    1d98:	00228308 	eoreq	r8, r2, r8, lsl #6
    1d9c:	52000108 	andpl	r0, r0, #8, 2
    1da0:	08002283 	stmdaeq	r0, {r0, r1, r7, r9, sp}
    1da4:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
    1da8:	e0910004 	adds	r0, r1, r4
    1dac:	00009f7d 	andeq	r9, r0, sp, ror pc
    1db0:	00000000 	andeq	r0, r0, r0
    1db4:	21bc0000 			; <UNDEFINED> instruction: 0x21bc0000
    1db8:	21c80800 	biccs	r0, r8, r0, lsl #16
    1dbc:	00030800 	andeq	r0, r3, r0, lsl #16
    1dc0:	c89f4008 	ldmgt	pc, {r3, lr}	; <UNPREDICTABLE>
    1dc4:	cc080021 	stcgt	0, cr0, [r8], {33}	; 0x21
    1dc8:	01080021 	tsteq	r8, r1, lsr #32
    1dcc:	21cc5400 	biccs	r5, ip, r0, lsl #8
    1dd0:	21ce0800 	biccs	r0, lr, r0, lsl #16
    1dd4:	00010800 	andeq	r0, r1, r0, lsl #16
    1dd8:	0021d851 	eoreq	sp, r1, r1, asr r8
    1ddc:	0021dc08 	eoreq	sp, r1, r8, lsl #24
    1de0:	54000108 	strpl	r0, [r0], #-264	; 0x108
    1de4:	080022a4 	stmdaeq	r0, {r2, r5, r7, r9, sp}
    1de8:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
    1dec:	40080003 	andmi	r0, r8, r3
    1df0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1df4:	00000000 	andeq	r0, r0, r0
    1df8:	00221a00 	eoreq	r1, r2, r0, lsl #20
    1dfc:	00222008 	eoreq	r2, r2, r8
    1e00:	76000308 	strvc	r0, [r0], -r8, lsl #6
    1e04:	22209f20 	eorcs	r9, r0, #32, 30	; 0x80
    1e08:	22250800 	eorcs	r0, r5, #0, 16
    1e0c:	00010800 	andeq	r0, r1, r0, lsl #16
    1e10:	00222552 	eoreq	r2, r2, r2, asr r5
    1e14:	0022a408 	eoreq	sl, r2, r8, lsl #8
    1e18:	76000308 	strvc	r0, [r0], -r8, lsl #6
    1e1c:	00009f20 	andeq	r9, r0, r0, lsr #30
    1e20:	00000000 	andeq	r0, r0, r0
    1e24:	221a0000 	andscs	r0, sl, #0
    1e28:	22a00800 	adccs	r0, r0, #0, 16
    1e2c:	00010800 	andeq	r0, r1, r0, lsl #16
    1e30:	0022a05d 	eoreq	sl, r2, sp, asr r0
    1e34:	0022a408 	eoreq	sl, r2, r8, lsl #8
    1e38:	91000408 	tstls	r0, r8, lsl #8
    1e3c:	009f7cc0 	addseq	r7, pc, r0, asr #25
    1e40:	00000000 	andeq	r0, r0, r0
    1e44:	26000000 	strcs	r0, [r0], -r0
    1e48:	2c080022 	stccs	0, cr0, [r8], {34}	; 0x22
    1e4c:	04080022 	streq	r0, [r8], #-34	; 0x22
    1e50:	7ee09100 	urdvcs	f1, f0
    1e54:	00222c9f 	mlaeq	r2, pc, ip, r2	; <UNPREDICTABLE>
    1e58:	00222f08 	eoreq	r2, r2, r8, lsl #30
    1e5c:	52000108 	andpl	r0, r0, #8, 2
    1e60:	0800222f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r9, sp}
    1e64:	0800223c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sp}
    1e68:	e0910004 	adds	r0, r1, r4
    1e6c:	223c9f7e 	eorscs	r9, ip, #504	; 0x1f8
    1e70:	22430800 	subcs	r0, r3, #0, 16
    1e74:	00010800 	andeq	r0, r1, r0, lsl #16
    1e78:	00224351 	eoreq	r4, r2, r1, asr r3
    1e7c:	00224a08 	eoreq	r4, r2, r8, lsl #20
    1e80:	91000408 	tstls	r0, r8, lsl #8
    1e84:	4a9f7ee0 	bmi	fe7e1a0c <BootRAM+0xd7521ad>
    1e88:	4f080022 	svcmi	0x00080022
    1e8c:	01080022 	tsteq	r8, r2, lsr #32
    1e90:	224f5200 	subcs	r5, pc, #0, 4
    1e94:	226c0800 	rsbcs	r0, ip, #0, 16
    1e98:	00040800 	andeq	r0, r4, r0, lsl #16
    1e9c:	9f7ee091 	svcls	0x007ee091
    1ea0:	0800226c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sp}
    1ea4:	0800226f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r9, sp}
    1ea8:	6f500001 	svcvs	0x00500001
    1eac:	76080022 	strvc	r0, [r8], -r2, lsr #32
    1eb0:	04080022 	streq	r0, [r8], #-34	; 0x22
    1eb4:	7ee09100 	urdvcs	f1, f0
    1eb8:	0022769f 	mlaeq	r2, pc, r6, r7	; <UNPREDICTABLE>
    1ebc:	00227908 	eoreq	r7, r2, r8, lsl #18
    1ec0:	52000108 	andpl	r0, r0, #8, 2
    1ec4:	08002279 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sp}
    1ec8:	080022a4 	stmdaeq	r0, {r2, r5, r7, r9, sp}
    1ecc:	e0910004 	adds	r0, r1, r4
    1ed0:	00009f7e 	andeq	r9, r0, lr, ror pc
    1ed4:	00000000 	andeq	r0, r0, r0
    1ed8:	22260000 	eorcs	r0, r6, #0
    1edc:	22a00800 	adccs	r0, r0, #0, 16
    1ee0:	00010800 	andeq	r0, r1, r0, lsl #16
    1ee4:	0022a05d 	eoreq	sl, r2, sp, asr r0
    1ee8:	0022a408 	eoreq	sl, r2, r8, lsl #8
    1eec:	91000408 	tstls	r0, r8, lsl #8
    1ef0:	009f7cc0 	addseq	r7, pc, r0, asr #25
    1ef4:	00000000 	andeq	r0, r0, r0
    1ef8:	3a000000 	bcc	1f00 <__Stack_Size+0x1700>
    1efc:	a4080022 	strge	r0, [r8], #-34	; 0x22
    1f00:	01080022 	tsteq	r8, r2, lsr #32
    1f04:	00005700 	andeq	r5, r0, r0, lsl #14
    1f08:	00000000 	andeq	r0, r0, r0
    1f0c:	223a0000 	eorscs	r0, sl, #0
    1f10:	224c0800 	subcs	r0, ip, #0, 16
    1f14:	00040800 	andeq	r0, r4, r0, lsl #16
    1f18:	9f7de091 	svcls	0x007de091
    1f1c:	0800224c 	stmdaeq	r0, {r2, r3, r6, r9, sp}
    1f20:	0800224f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r9, sp}
    1f24:	4f500001 	svcmi	0x00500001
    1f28:	52080022 	andpl	r0, r8, #34	; 0x22
    1f2c:	04080022 	streq	r0, [r8], #-34	; 0x22
    1f30:	7de09100 	stfvcp	f1, [r0]
    1f34:	0022529f 	mlaeq	r2, pc, r2, r5	; <UNPREDICTABLE>
    1f38:	00225908 	eoreq	r5, r2, r8, lsl #18
    1f3c:	50000108 	andpl	r0, r0, r8, lsl #2
    1f40:	08002259 	stmdaeq	r0, {r0, r3, r4, r6, r9, sp}
    1f44:	08002272 	stmdaeq	r0, {r1, r4, r5, r6, r9, sp}
    1f48:	e0910004 	adds	r0, r1, r4
    1f4c:	22729f7d 	rsbscs	r9, r2, #500	; 0x1f4
    1f50:	22790800 	rsbscs	r0, r9, #0, 16
    1f54:	00010800 	andeq	r0, r1, r0, lsl #16
    1f58:	00227950 	eoreq	r7, r2, r0, asr r9
    1f5c:	00228008 	eoreq	r8, r2, r8
    1f60:	91000408 	tstls	r0, r8, lsl #8
    1f64:	809f7de0 	addshi	r7, pc, r0, ror #27
    1f68:	83080022 	movwhi	r0, #32802	; 0x8022
    1f6c:	01080022 	tsteq	r8, r2, lsr #32
    1f70:	22835200 	addcs	r5, r3, #0, 4
    1f74:	22a40800 	adccs	r0, r4, #0, 16
    1f78:	00040800 	andeq	r0, r4, r0, lsl #16
    1f7c:	9f7de091 	svcls	0x007de091
	...
    1f88:	08002248 	stmdaeq	r0, {r3, r6, r9, sp}
    1f8c:	0800224c 	stmdaeq	r0, {r2, r3, r6, r9, sp}
    1f90:	4c500001 	mrrcmi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1f94:	a4080022 	strge	r0, [r8], #-34	; 0x22
    1f98:	01080022 	tsteq	r8, r2, lsr #32
    1f9c:	00005500 	andeq	r5, r0, r0, lsl #10
    1fa0:	00000000 	andeq	r0, r0, r0
    1fa4:	225a0000 	subscs	r0, sl, #0
    1fa8:	22a40800 	adccs	r0, r4, #0, 16
    1fac:	00010800 	andeq	r0, r1, r0, lsl #16
    1fb0:	00000056 	andeq	r0, r0, r6, asr r0
    1fb4:	00000000 	andeq	r0, r0, r0
    1fb8:	00225a00 	eoreq	r5, r2, r0, lsl #20
    1fbc:	00226c08 	eoreq	r6, r2, r8, lsl #24
    1fc0:	91000408 	tstls	r0, r8, lsl #8
    1fc4:	6c9f7ee0 	ldcvs	14, cr7, [pc], {224}	; 0xe0
    1fc8:	6f080022 	svcvs	0x00080022
    1fcc:	01080022 	tsteq	r8, r2, lsr #32
    1fd0:	226f5000 	rsbcs	r5, pc, #0
    1fd4:	22760800 	rsbscs	r0, r6, #0, 16
    1fd8:	00040800 	andeq	r0, r4, r0, lsl #16
    1fdc:	9f7ee091 	svcls	0x007ee091
    1fe0:	08002276 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, sp}
    1fe4:	08002279 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sp}
    1fe8:	79520001 	ldmdbvc	r2, {r0}^
    1fec:	a4080022 	strge	r0, [r8], #-34	; 0x22
    1ff0:	04080022 	streq	r0, [r8], #-34	; 0x22
    1ff4:	7ee09100 	urdvcs	f1, f0
    1ff8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1ffc:	00000000 	andeq	r0, r0, r0
    2000:	00226800 	eoreq	r6, r2, r0, lsl #16
    2004:	00226c08 	eoreq	r6, r2, r8, lsl #24
    2008:	50000108 	andpl	r0, r0, r8, lsl #2
    200c:	0800226c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sp}
    2010:	080022a4 	stmdaeq	r0, {r2, r5, r7, r9, sp}
    2014:	00540001 	subseq	r0, r4, r1
    2018:	00000000 	andeq	r0, r0, r0
    201c:	7a000000 	bvc	2024 <__Stack_Size+0x1824>
    2020:	80080022 	andhi	r0, r8, r2, lsr #32
    2024:	04080022 	streq	r0, [r8], #-34	; 0x22
    2028:	7de09100 	stfvcp	f1, [r0]
    202c:	0022809f 	mlaeq	r2, pc, r0, r8	; <UNPREDICTABLE>
    2030:	00228308 	eoreq	r8, r2, r8, lsl #6
    2034:	52000108 	andpl	r0, r0, #8, 2
    2038:	08002283 	stmdaeq	r0, {r0, r1, r7, r9, sp}
    203c:	080022a4 	stmdaeq	r0, {r2, r5, r7, r9, sp}
    2040:	e0910004 	adds	r0, r1, r4
    2044:	00009f7d 	andeq	r9, r0, sp, ror pc
    2048:	00000000 	andeq	r0, r0, r0
    204c:	227a0000 	rsbscs	r0, sl, #0
    2050:	228a0800 	addcs	r0, sl, #0, 16
    2054:	00040800 	andeq	r0, r4, r0, lsl #16
    2058:	9f7ce091 	svcls	0x007ce091
    205c:	0800228a 	stmdaeq	r0, {r1, r3, r7, r9, sp}
    2060:	0800228d 	stmdaeq	r0, {r0, r2, r3, r7, r9, sp}
    2064:	8d500001 	ldclhi	0, cr0, [r0, #-4]
    2068:	92080022 	andls	r0, r8, #34	; 0x22
    206c:	04080022 	streq	r0, [r8], #-34	; 0x22
    2070:	7ce09100 	stfvcp	f1, [r0]
    2074:	0022929f 	mlaeq	r2, pc, r2, r9	; <UNPREDICTABLE>
    2078:	00229508 	eoreq	r9, r2, r8, lsl #10
    207c:	51000108 	tstpl	r0, r8, lsl #2
    2080:	08002295 	stmdaeq	r0, {r0, r2, r4, r7, r9, sp}
    2084:	080022a4 	stmdaeq	r0, {r2, r5, r7, r9, sp}
    2088:	e0910004 	adds	r0, r1, r4
    208c:	00009f7c 	andeq	r9, r0, ip, ror pc
    2090:	00000000 	andeq	r0, r0, r0
    2094:	22b40000 	adcscs	r0, r4, #0
    2098:	22c80800 	sbccs	r0, r8, #0, 16
    209c:	00010800 	andeq	r0, r1, r0, lsl #16
    20a0:	0022c850 	eoreq	ip, r2, r0, asr r8
    20a4:	0022d108 	eoreq	sp, r2, r8, lsl #2
    20a8:	70000308 	andvc	r0, r0, r8, lsl #6
    20ac:	22d19f7c 	sbcscs	r9, r1, #124, 30	; 0x1f0
    20b0:	22d20800 	sbcscs	r0, r2, #0, 16
    20b4:	00040800 	andeq	r0, r4, r0, lsl #16
    20b8:	9f5001f3 	svcls	0x005001f3
	...
    20c4:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
    20c8:	080022ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sp}
    20cc:	ba510001 	blt	14420d8 <__Stack_Size+0x14418d8>
    20d0:	c0080022 	andgt	r0, r8, r2, lsr #32
    20d4:	01080022 	tsteq	r8, r2, lsr #32
    20d8:	22c05200 	sbccs	r5, r0, #0, 4
    20dc:	22c40800 	sbccs	r0, r4, #0, 16
    20e0:	00050800 	andeq	r0, r5, r0, lsl #16
    20e4:	25380072 	ldrcs	r0, [r8, #-114]!	; 0x72
    20e8:	0022c49f 	mlaeq	r2, pc, r4, ip	; <UNPREDICTABLE>
    20ec:	0022ca08 	eoreq	ip, r2, r8, lsl #20
    20f0:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
    20f4:	38253800 	stmdacc	r5!, {fp, ip, sp}
    20f8:	22ca9f25 	sbccs	r9, sl, #37, 30	; 0x94
    20fc:	22d20800 	sbcscs	r0, r2, #0, 16
    2100:	000a0800 	andeq	r0, sl, r0, lsl #16
    2104:	405101f3 	ldrshmi	r0, [r1], #-19	; 0xffffffed
    2108:	38253825 	stmdacc	r5!, {r0, r2, r5, fp, ip, sp}
    210c:	00009f25 	andeq	r9, r0, r5, lsr #30
    2110:	00000000 	andeq	r0, r0, r0
    2114:	22b40000 	adcscs	r0, r4, #0
    2118:	22ba0800 	adcscs	r0, sl, #0, 16
    211c:	00020800 	andeq	r0, r2, r0, lsl #16
    2120:	22ba9f30 	adcscs	r9, sl, #48, 30	; 0xc0
    2124:	22c00800 	sbccs	r0, r0, #0, 16
    2128:	00020800 	andeq	r0, r2, r0, lsl #16
    212c:	22c09f32 	sbccs	r9, r0, #50, 30	; 0xc8
    2130:	22c40800 	sbccs	r0, r4, #0, 16
    2134:	00020800 	andeq	r0, r2, r0, lsl #16
    2138:	22c49f33 	sbccs	r9, r4, #51, 30	; 0xcc
    213c:	22d20800 	sbcscs	r0, r2, #0, 16
    2140:	00020800 	andeq	r0, r2, r0, lsl #16
    2144:	00009f34 	andeq	r9, r0, r4, lsr pc
    2148:	00000000 	andeq	r0, r0, r0
    214c:	22ec0000 	rsccs	r0, ip, #0
    2150:	231a0800 	tstcs	sl, #0, 16
    2154:	00010800 	andeq	r0, r1, r0, lsl #16
    2158:	00231c52 	eoreq	r1, r3, r2, asr ip
    215c:	00232608 	eoreq	r2, r3, r8, lsl #12
    2160:	52000108 	andpl	r0, r0, #8, 2
	...
    216c:	080022ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sp}
    2170:	080022f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sp}
    2174:	f4530001 			; <UNDEFINED> instruction: 0xf4530001
    2178:	fa080022 	blx	202208 <__Stack_Size+0x201a08>
    217c:	03080022 	movweq	r0, #32802	; 0x8022
    2180:	9f7f7300 	svcls	0x007f7300
    2184:	080022fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sp}
    2188:	080022fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sp}
    218c:	00530001 	subseq	r0, r3, r1
    2190:	0a080023 	beq	202224 <__Stack_Size+0x201a24>
    2194:	01080023 	tsteq	r8, r3, lsr #32
    2198:	230a5300 	movwcs	r5, #41728	; 0xa300
    219c:	23100800 	tstcs	r0, #0, 16
    21a0:	00030800 	andeq	r0, r3, r0, lsl #16
    21a4:	109f7f73 	addsne	r7, pc, r3, ror pc	; <UNPREDICTABLE>
    21a8:	16080023 	strne	r0, [r8], -r3, lsr #32
    21ac:	01080023 	tsteq	r8, r3, lsr #32
    21b0:	00005300 	andeq	r5, r0, r0, lsl #6
    21b4:	00000000 	andeq	r0, r0, r0
    21b8:	23240000 	teqcs	r4, #0
    21bc:	23260800 	teqcs	r6, #0, 16
    21c0:	00050800 	andeq	r0, r5, r0, lsl #16
    21c4:	253f0072 	ldrcs	r0, [pc, #-114]!	; 215a <__Stack_Size+0x195a>
    21c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    21cc:	00000000 	andeq	r0, r0, r0
    21d0:	00232400 	eoreq	r2, r3, r0, lsl #8
    21d4:	00233c08 	eoreq	r3, r3, r8, lsl #24
    21d8:	5d000108 	stfpls	f0, [r0, #-32]	; 0xffffffe0
    21dc:	0800233c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sp}
    21e0:	08002342 	stmdaeq	r0, {r1, r6, r8, r9, sp}
    21e4:	58910003 	ldmpl	r1, {r0, r1}
    21e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    21ec:	00000000 	andeq	r0, r0, r0
    21f0:	00232600 	eoreq	r2, r3, r0, lsl #12
    21f4:	00234008 	eoreq	r4, r3, r8
    21f8:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    2204:	08002344 	stmdaeq	r0, {r2, r6, r8, r9, sp}
    2208:	0800238e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sp}
    220c:	8e500001 	cdphi	0, 5, cr0, cr0, cr1, {0}
    2210:	c8080023 	stmdagt	r8, {r0, r1, r5}
    2214:	04080023 	streq	r0, [r8], #-35	; 0x23
    2218:	5001f300 	andpl	pc, r1, r0, lsl #6
    221c:	0023c89f 	mlaeq	r3, pc, r8, ip	; <UNPREDICTABLE>
    2220:	0023de08 	eoreq	sp, r3, r8, lsl #28
    2224:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    2230:	08002344 	stmdaeq	r0, {r2, r6, r8, r9, sp}
    2234:	08002390 	stmdaeq	r0, {r4, r7, r8, r9, sp}
    2238:	90510001 	subsls	r0, r1, r1
    223c:	c8080023 	stmdagt	r8, {r0, r1, r5}
    2240:	04080023 	streq	r0, [r8], #-35	; 0x23
    2244:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2248:	0023c89f 	mlaeq	r3, pc, r8, ip	; <UNPREDICTABLE>
    224c:	0023de08 	eoreq	sp, r3, r8, lsl #28
    2250:	51000108 	tstpl	r0, r8, lsl #2
	...
    225c:	08002344 	stmdaeq	r0, {r2, r6, r8, r9, sp}
    2260:	0800234e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sp}
    2264:	9f300002 	svcls	0x00300002
    2268:	080023b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sp}
    226c:	080023b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sp}
    2270:	b8520001 	ldmdalt	r2, {r0}^
    2274:	bc080023 	stclt	0, cr0, [r8], {35}	; 0x23
    2278:	08080023 	stmdaeq	r8, {r0, r1, r5}
    227c:	31007200 	mrscc	r7, R8_usr
    2280:	21007225 	tstcs	r0, r5, lsr #4
    2284:	0023c89f 	mlaeq	r3, pc, r8, ip	; <UNPREDICTABLE>
    2288:	0023cc08 	eoreq	ip, r3, r8, lsl #24
    228c:	30000208 	andcc	r0, r0, r8, lsl #4
    2290:	0023cc9f 	mlaeq	r3, pc, ip, ip	; <UNPREDICTABLE>
    2294:	0023de08 	eoreq	sp, r3, r8, lsl #28
    2298:	52000108 	andpl	r0, r0, #8, 2
	...
    22a4:	08002344 	stmdaeq	r0, {r2, r6, r8, r9, sp}
    22a8:	0800234e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sp}
    22ac:	9f300002 	svcls	0x00300002
    22b0:	080023c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sp}
    22b4:	080023cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sp}
    22b8:	9f300002 	svcls	0x00300002
    22bc:	080023cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sp}
    22c0:	080023d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sp}
    22c4:	d2530001 	subsle	r0, r3, #1
    22c8:	da080023 	ble	20235c <__Stack_Size+0x201b5c>
    22cc:	03080023 	movweq	r0, #32803	; 0x8023
    22d0:	9f7f7300 	svcls	0x007f7300
    22d4:	080023da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sp}
    22d8:	080023de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sp}
    22dc:	00530001 	subseq	r0, r3, r1
    22e0:	00000000 	andeq	r0, r0, r0
    22e4:	e0000000 	and	r0, r0, r0
    22e8:	7c080023 	stcvc	0, cr0, [r8], {35}	; 0x23
    22ec:	01080024 	tsteq	r8, r4, lsr #32
    22f0:	247c5100 	ldrbtcs	r5, [ip], #-256	; 0x100
    22f4:	248a0800 	strcs	r0, [sl], #2048	; 0x800
    22f8:	00040800 	andeq	r0, r4, r0, lsl #16
    22fc:	9f5101f3 	svcls	0x005101f3
    2300:	0800248a 	stmdaeq	r0, {r1, r3, r7, sl, sp}
    2304:	080024a2 	stmdaeq	r0, {r1, r5, r7, sl, sp}
    2308:	00510001 	subseq	r0, r1, r1
    230c:	00000000 	andeq	r0, r0, r0
    2310:	e0000000 	and	r0, r0, r0
    2314:	7e080023 	cdpvc	0, 0, cr0, cr8, cr3, {1}
    2318:	01080024 	tsteq	r8, r4, lsr #32
    231c:	247e5200 	ldrbtcs	r5, [lr], #-512	; 0x200
    2320:	248a0800 	strcs	r0, [sl], #2048	; 0x800
    2324:	00040800 	andeq	r0, r4, r0, lsl #16
    2328:	9f5201f3 	svcls	0x005201f3
    232c:	0800248a 	stmdaeq	r0, {r1, r3, r7, sl, sp}
    2330:	080024a2 	stmdaeq	r0, {r1, r5, r7, sl, sp}
    2334:	00520001 	subseq	r0, r2, r1
    2338:	00000000 	andeq	r0, r0, r0
    233c:	e0000000 	and	r0, r0, r0
    2340:	04080023 	streq	r0, [r8], #-35	; 0x23
    2344:	01080024 	tsteq	r8, r4, lsr #32
    2348:	24045300 	strcs	r5, [r4], #-768	; 0x300
    234c:	24a20800 	strtcs	r0, [r2], #2048	; 0x800
    2350:	00040800 	andeq	r0, r4, r0, lsl #16
    2354:	9f5301f3 	svcls	0x005301f3
	...
    2360:	08002408 	stmdaeq	r0, {r3, sl, sp}
    2364:	0800240e 	stmdaeq	r0, {r1, r2, r3, sl, sp}
    2368:	0e530001 	cdpeq	0, 5, cr0, cr3, cr1, {0}
    236c:	80080024 	andhi	r0, r8, r4, lsr #32
    2370:	01080024 	tsteq	r8, r4, lsr #32
    2374:	248a5600 	strcs	r5, [sl], #1536	; 0x600
    2378:	24a00800 	strtcs	r0, [r0], #2048	; 0x800
    237c:	00010800 	andeq	r0, r1, r0, lsl #16
    2380:	00000056 	andeq	r0, r0, r6, asr r0
    2384:	00000000 	andeq	r0, r0, r0
    2388:	00240800 	eoreq	r0, r4, r0, lsl #16
    238c:	00242a08 	eoreq	r2, r4, r8, lsl #20
    2390:	30000208 	andcc	r0, r0, r8, lsl #4
    2394:	00248a9f 	mlaeq	r4, pc, sl, r8	; <UNPREDICTABLE>
    2398:	00248c08 	eoreq	r8, r4, r8, lsl #24
    239c:	30000208 	andcc	r0, r0, r8, lsl #4
    23a0:	00248c9f 	mlaeq	r4, pc, ip, r8	; <UNPREDICTABLE>
    23a4:	0024a208 	eoreq	sl, r4, r8, lsl #4
    23a8:	53000108 	movwpl	r0, #264	; 0x108
	...
    23b4:	080024a4 	stmdaeq	r0, {r2, r5, r7, sl, sp}
    23b8:	080024d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, sp}
    23bc:	d4510001 	ldrble	r0, [r1], #-1
    23c0:	ea080024 	b	202458 <__Stack_Size+0x201c58>
    23c4:	04080024 	streq	r0, [r8], #-36	; 0x24
    23c8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    23cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    23d0:	00000000 	andeq	r0, r0, r0
    23d4:	0024a400 	eoreq	sl, r4, r0, lsl #8
    23d8:	0024c608 	eoreq	ip, r4, r8, lsl #12
    23dc:	52000108 	andpl	r0, r0, #8, 2
    23e0:	080024c6 	stmdaeq	r0, {r1, r2, r6, r7, sl, sp}
    23e4:	080024ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, sp}
    23e8:	01f30004 	mvnseq	r0, r4
    23ec:	00009f52 	andeq	r9, r0, r2, asr pc
    23f0:	00000000 	andeq	r0, r0, r0
    23f4:	24a40000 	strtcs	r0, [r4], #0
    23f8:	24aa0800 	strtcs	r0, [sl], #2048	; 0x800
    23fc:	00020800 	andeq	r0, r2, r0, lsl #16
    2400:	24aa9f30 	strtcs	r9, [sl], #3888	; 0xf30
    2404:	24b40800 	ldrtcs	r0, [r4], #2048	; 0x800
    2408:	00050800 	andeq	r0, r5, r0, lsl #16
    240c:	25380074 	ldrcs	r0, [r8, #-116]!	; 0x74
    2410:	0024b49f 	mlaeq	r4, pc, r4, fp	; <UNPREDICTABLE>
    2414:	0024c008 	eoreq	ip, r4, r8
    2418:	54000108 	strpl	r0, [r0], #-264	; 0x108
    241c:	080024d2 	stmdaeq	r0, {r1, r4, r6, r7, sl, sp}
    2420:	080024d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, sp}
    2424:	da520001 	ble	1482430 <__Stack_Size+0x1481c30>
    2428:	ea080024 	b	2024c0 <__Stack_Size+0x201cc0>
    242c:	01080024 	tsteq	r8, r4, lsr #32
    2430:	00005200 	andeq	r5, r0, r0, lsl #4
    2434:	00000000 	andeq	r0, r0, r0
    2438:	24a40000 	strtcs	r0, [r4], #0
    243c:	24aa0800 	strtcs	r0, [sl], #2048	; 0x800
    2440:	00020800 	andeq	r0, r2, r0, lsl #16
    2444:	24aa9f30 	strtcs	r9, [sl], #3888	; 0xf30
    2448:	24c20800 	strbcs	r0, [r2], #2048	; 0x800
    244c:	00010800 	andeq	r0, r1, r0, lsl #16
    2450:	0024d253 	eoreq	sp, r4, r3, asr r2
    2454:	0024d408 	eoreq	sp, r4, r8, lsl #8
    2458:	30000208 	andcc	r0, r0, r8, lsl #4
    245c:	0024d49f 	mlaeq	r4, pc, r4, sp	; <UNPREDICTABLE>
    2460:	0024de08 	eoreq	sp, r4, r8, lsl #28
    2464:	53000108 	movwpl	r0, #264	; 0x108
    2468:	080024de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, sp}
    246c:	080024e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, sp}
    2470:	7f730003 	svcvc	0x00730003
    2474:	0024e49f 	mlaeq	r4, pc, r4, lr	; <UNPREDICTABLE>
    2478:	0024ea08 	eoreq	lr, r4, r8, lsl #20
    247c:	53000108 	movwpl	r0, #264	; 0x108
	...
    2488:	080024ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, sp}
    248c:	0800250c 	stmdaeq	r0, {r2, r3, r8, sl, sp}
    2490:	0c510001 	mrrceq	0, 0, r0, r1, cr1
    2494:	38080025 	stmdacc	r8, {r0, r2, r5}
    2498:	04080025 	streq	r0, [r8], #-37	; 0x25
    249c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    24a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    24a4:	00000000 	andeq	r0, r0, r0
    24a8:	0024ec00 	eoreq	lr, r4, r0, lsl #24
    24ac:	00250e08 	eoreq	r0, r5, r8, lsl #28
    24b0:	52000108 	andpl	r0, r0, #8, 2
    24b4:	0800250e 	stmdaeq	r0, {r1, r2, r3, r8, sl, sp}
    24b8:	08002538 	stmdaeq	r0, {r3, r4, r5, r8, sl, sp}
    24bc:	01f30004 	mvnseq	r0, r4
    24c0:	00009f52 	andeq	r9, r0, r2, asr pc
    24c4:	00000000 	andeq	r0, r0, r0
    24c8:	24ec0000 	strbtcs	r0, [ip], #0
    24cc:	24f20800 	ldrbtcs	r0, [r2], #2048	; 0x800
    24d0:	00030800 	andeq	r0, r3, r0, lsl #16
    24d4:	f29fda08 	vmlsl.s16	<illegal reg q6.5>, d15, d8
    24d8:	1e080024 	cdpne	0, 0, cr0, cr8, cr4, {1}
    24dc:	01080025 	tsteq	r8, r5, lsr #32
    24e0:	25245400 	strcs	r5, [r4, #-1024]!	; 0x400
    24e4:	25380800 	ldrcs	r0, [r8, #-2048]!	; 0x800
    24e8:	00010800 	andeq	r0, r1, r0, lsl #16
    24ec:	00000052 	andeq	r0, r0, r2, asr r0
    24f0:	00000000 	andeq	r0, r0, r0
    24f4:	0024ec00 	eoreq	lr, r4, r0, lsl #24
    24f8:	0024f208 	eoreq	pc, r4, r8, lsl #4
    24fc:	30000208 	andcc	r0, r0, r8, lsl #4
    2500:	0024f29f 	mlaeq	r4, pc, r2, pc	; <UNPREDICTABLE>
    2504:	00250208 	eoreq	r0, r5, r8, lsl #4
    2508:	53000108 	movwpl	r0, #264	; 0x108
    250c:	08002502 	stmdaeq	r0, {r1, r8, sl, sp}
    2510:	08002508 	stmdaeq	r0, {r3, r8, sl, sp}
    2514:	7f730003 	svcvc	0x00730003
    2518:	0025089f 	mlaeq	r5, pc, r8, r0	; <UNPREDICTABLE>
    251c:	00251008 	eoreq	r1, r5, r8
    2520:	53000108 	movwpl	r0, #264	; 0x108
    2524:	08002524 	stmdaeq	r0, {r2, r5, r8, sl, sp}
    2528:	0800252c 	stmdaeq	r0, {r2, r3, r5, r8, sl, sp}
    252c:	2c530001 	mrrccs	0, 0, r0, r3, cr1
    2530:	32080025 	andcc	r0, r8, #37	; 0x25
    2534:	03080025 	movweq	r0, #32805	; 0x8025
    2538:	9f7f7300 	svcls	0x007f7300
    253c:	08002532 	stmdaeq	r0, {r1, r4, r5, r8, sl, sp}
    2540:	08002538 	stmdaeq	r0, {r3, r4, r5, r8, sl, sp}
    2544:	00530001 	subseq	r0, r3, r1
    2548:	00000000 	andeq	r0, r0, r0
    254c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2550:	54080025 	strpl	r0, [r8], #-37	; 0x25
    2554:	01080025 	tsteq	r8, r5, lsr #32
    2558:	25545100 	ldrbcs	r5, [r4, #-256]	; 0x100
    255c:	257e0800 	ldrbcs	r0, [lr, #-2048]!	; 0x800
    2560:	00040800 	andeq	r0, r4, r0, lsl #16
    2564:	9f5101f3 	svcls	0x005101f3
	...
    2570:	08002538 	stmdaeq	r0, {r3, r4, r5, r8, sl, sp}
    2574:	0800253e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, sl, sp}
    2578:	da080003 	ble	20258c <__Stack_Size+0x201d8c>
    257c:	00253e9f 	mlaeq	r5, pc, lr, r3	; <UNPREDICTABLE>
    2580:	00256208 	eoreq	r6, r5, r8, lsl #4
    2584:	52000108 	andpl	r0, r0, #8, 2
    2588:	08002568 	stmdaeq	r0, {r3, r5, r6, r8, sl, sp}
    258c:	0800257e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, sp}
    2590:	00520001 	subseq	r0, r2, r1
    2594:	00000000 	andeq	r0, r0, r0
    2598:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    259c:	3e080025 	cdpcc	0, 0, cr0, cr8, cr5, {1}
    25a0:	02080025 	andeq	r0, r8, #37	; 0x25
    25a4:	3e9f3000 	cdpcc	0, 9, cr3, cr15, cr0, {0}
    25a8:	4a080025 	bmi	202644 <__Stack_Size+0x201e44>
    25ac:	01080025 	tsteq	r8, r5, lsr #32
    25b0:	254a5300 	strbcs	r5, [sl, #-768]	; 0x300
    25b4:	25500800 	ldrbcs	r0, [r0, #-2048]	; 0x800
    25b8:	00030800 	andeq	r0, r3, r0, lsl #16
    25bc:	509f7f73 	addspl	r7, pc, r3, ror pc	; <UNPREDICTABLE>
    25c0:	56080025 	strpl	r0, [r8], -r5, lsr #32
    25c4:	01080025 	tsteq	r8, r5, lsr #32
    25c8:	25685300 	strbcs	r5, [r8, #-768]!	; 0x300
    25cc:	25700800 	ldrbcs	r0, [r0, #-2048]!	; 0x800
    25d0:	00010800 	andeq	r0, r1, r0, lsl #16
    25d4:	00257053 	eoreq	r7, r5, r3, asr r0
    25d8:	00257608 	eoreq	r7, r5, r8, lsl #12
    25dc:	73000308 	movwvc	r0, #776	; 0x308
    25e0:	25769f7f 	ldrbcs	r9, [r6, #-3967]!	; 0xf7f
    25e4:	257e0800 	ldrbcs	r0, [lr, #-2048]!	; 0x800
    25e8:	00010800 	andeq	r0, r1, r0, lsl #16
    25ec:	00000053 	andeq	r0, r0, r3, asr r0
    25f0:	00000000 	andeq	r0, r0, r0
    25f4:	00258000 	eoreq	r8, r5, r0
    25f8:	0025e008 	eoreq	lr, r5, r8
    25fc:	51000108 	tstpl	r0, r8, lsl #2
    2600:	080025e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, sp}
    2604:	08002608 	stmdaeq	r0, {r3, r9, sl, sp}
    2608:	01f30004 	mvnseq	r0, r4
    260c:	00009f51 	andeq	r9, r0, r1, asr pc
    2610:	00000000 	andeq	r0, r0, r0
    2614:	25800000 	strcs	r0, [r0]
    2618:	25e60800 	strbcs	r0, [r6, #2048]!	; 0x800
    261c:	00010800 	andeq	r0, r1, r0, lsl #16
    2620:	0025e652 	eoreq	lr, r5, r2, asr r6
    2624:	00260808 	eoreq	r0, r6, r8, lsl #16
    2628:	f3000408 	vshl.u8	d0, d8, d0
    262c:	009f5201 	addseq	r5, pc, r1, lsl #4
    2630:	00000000 	andeq	r0, r0, r0
    2634:	80000000 	andhi	r0, r0, r0
    2638:	8e080025 	cdphi	0, 0, cr0, cr8, cr5, {1}
    263c:	02080025 	andeq	r0, r8, #37	; 0x25
    2640:	8e9f3000 	cdphi	0, 9, cr3, cr15, cr0, {0}
    2644:	e2080025 	and	r0, r8, #37	; 0x25
    2648:	01080025 	tsteq	r8, r5, lsr #32
    264c:	25ee5300 	strbcs	r5, [lr, #768]!	; 0x300
    2650:	26080800 	strcs	r0, [r8], -r0, lsl #16
    2654:	00010800 	andeq	r0, r1, r0, lsl #16
    2658:	00000052 	andeq	r0, r0, r2, asr r0
    265c:	00000000 	andeq	r0, r0, r0
    2660:	00258000 	eoreq	r8, r5, r0
    2664:	00258e08 	eoreq	r8, r5, r8, lsl #28
    2668:	30000208 	andcc	r0, r0, r8, lsl #4
    266c:	00258e9f 	mlaeq	r5, pc, lr, r8	; <UNPREDICTABLE>
    2670:	0025ee08 	eoreq	lr, r5, r8, lsl #28
    2674:	58000108 	stmdapl	r0, {r3, r8}
    2678:	080025ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl, sp}
    267c:	080025f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, sl, sp}
    2680:	9f300002 	svcls	0x00300002
    2684:	080025f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, sl, sp}
    2688:	080025fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, sp}
    268c:	fa530001 	blx	14c2698 <__Stack_Size+0x14c1e98>
    2690:	00080025 	andeq	r0, r8, r5, lsr #32
    2694:	03080026 	movweq	r0, #32806	; 0x8026
    2698:	9f7f7300 	svcls	0x007f7300
    269c:	08002600 	stmdaeq	r0, {r9, sl, sp}
    26a0:	08002608 	stmdaeq	r0, {r3, r9, sl, sp}
    26a4:	00530001 	subseq	r0, r3, r1
    26a8:	00000000 	andeq	r0, r0, r0
    26ac:	90000000 	andls	r0, r0, r0
    26b0:	96080025 	strls	r0, [r8], -r5, lsr #32
    26b4:	02080025 	andeq	r0, r8, #37	; 0x25
    26b8:	969f3000 	ldrls	r3, [pc], r0
    26bc:	9e080025 	cdpls	0, 0, cr0, cr8, cr5, {1}
    26c0:	01080025 	tsteq	r8, r5, lsr #32
    26c4:	259e5400 	ldrcs	r5, [lr, #1024]	; 0x400
    26c8:	25a40800 	strcs	r0, [r4, #2048]!	; 0x800
    26cc:	00030800 	andeq	r0, r3, r0, lsl #16
    26d0:	a49f7f74 	ldrge	r7, [pc], #3956	; 26d8 <__Stack_Size+0x1ed8>
    26d4:	c8080025 	stmdagt	r8, {r0, r2, r5}
    26d8:	01080025 	tsteq	r8, r5, lsr #32
    26dc:	25c85400 	strbcs	r5, [r8, #1024]	; 0x400
    26e0:	25ce0800 	strbcs	r0, [lr, #2048]	; 0x800
    26e4:	00030800 	andeq	r0, r3, r0, lsl #16
    26e8:	ce9f7f74 	mrcgt	15, 4, r7, cr15, cr4, {3}
    26ec:	06080025 	streq	r0, [r8], -r5, lsr #32
    26f0:	01080026 	tsteq	r8, r6, lsr #32
    26f4:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    2704:	00010000 	andeq	r0, r1, r0
    2708:	00000050 	andeq	r0, r0, r0, asr r0
    270c:	00000000 	andeq	r0, r0, r0
    2710:	58000100 	stmdapl	r0, {r8}
	...
    271c:	01f30004 	mvnseq	r0, r4
    2720:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    2730:	00010000 	andeq	r0, r1, r0
    2734:	00000051 	andeq	r0, r0, r1, asr r0
    2738:	00000000 	andeq	r0, r0, r0
    273c:	f3000400 	vshl.u8	d0, d0, d0
    2740:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    2750:	01000000 	mrseq	r0, (UNDEF: 0)
    2754:	00005200 	andeq	r5, r0, r0, lsl #4
    2758:	00000000 	andeq	r0, r0, r0
    275c:	00040000 	andeq	r0, r4, r0
    2760:	9f5201f3 	svcls	0x005201f3
	...
    2774:	00520001 	subseq	r0, r2, r1
    2778:	00000000 	andeq	r0, r0, r0
    277c:	04000000 	streq	r0, [r0], #-0
    2780:	5201f300 	andpl	pc, r1, #0, 6
    2784:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    2794:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    27a0:	01f30004 	mvnseq	r0, r4
    27a4:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    27b4:	00010000 	andeq	r0, r1, r0
    27b8:	0000005d 	andeq	r0, r0, sp, asr r0
    27bc:	00000000 	andeq	r0, r0, r0
    27c0:	74000300 	strvc	r0, [r0], #-768	; 0x300
    27c4:	00009f60 	andeq	r9, r0, r0, ror #30
    27c8:	00000000 	andeq	r0, r0, r0
    27cc:	00030000 	andeq	r0, r3, r0
    27d0:	009f487d 	addseq	r4, pc, sp, ror r8	; <UNPREDICTABLE>
	...
    27e0:	02000000 	andeq	r0, r0, #0
    27e4:	009f3000 	addseq	r3, pc, r0
    27e8:	00000000 	andeq	r0, r0, r0
    27ec:	01000000 	mrseq	r0, (UNDEF: 0)
    27f0:	00005300 	andeq	r5, r0, r0, lsl #6
    27f4:	00000000 	andeq	r0, r0, r0
    27f8:	00010000 	andeq	r0, r1, r0
    27fc:	00000052 	andeq	r0, r0, r2, asr r0
	...
    280c:	30000200 	andcc	r0, r0, r0, lsl #4
    2810:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2814:	00000000 	andeq	r0, r0, r0
    2818:	59000100 	stmdbpl	r0, {r8}
	...
    2824:	9f300002 	svcls	0x00300002
	...
    2830:	00730008 	rsbseq	r0, r3, r8
    2834:	231c0091 	tstcs	ip, #145	; 0x91
    2838:	00009f38 	andeq	r9, r0, r8, lsr pc
    283c:	00000000 	andeq	r0, r0, r0
    2840:	00080000 	andeq	r0, r8, r0
    2844:	00910073 	addseq	r0, r1, r3, ror r0
    2848:	9f37231c 	svcls	0x0037231c
	...
    2854:	00730008 	rsbseq	r0, r3, r8
    2858:	231c0091 	tstcs	ip, #145	; 0x91
    285c:	00009f38 	andeq	r9, r0, r8, lsr pc
	...
    286c:	00020000 	andeq	r0, r2, r0
    2870:	00009f30 	andeq	r9, r0, r0, lsr pc
    2874:	00000000 	andeq	r0, r0, r0
    2878:	00010000 	andeq	r0, r1, r0
    287c:	00000054 	andeq	r0, r0, r4, asr r0
    2880:	00000000 	andeq	r0, r0, r0
    2884:	74000300 	strvc	r0, [r0], #-768	; 0x300
    2888:	00009f7f 	andeq	r9, r0, pc, ror pc
    288c:	00000000 	andeq	r0, r0, r0
    2890:	00010000 	andeq	r0, r1, r0
    2894:	00000054 	andeq	r0, r0, r4, asr r0
    2898:	00000000 	andeq	r0, r0, r0
    289c:	74000300 	strvc	r0, [r0], #-768	; 0x300
    28a0:	00009f7f 	andeq	r9, r0, pc, ror pc
    28a4:	00000000 	andeq	r0, r0, r0
    28a8:	00010000 	andeq	r0, r1, r0
    28ac:	00000054 	andeq	r0, r0, r4, asr r0
	...
    28bc:	5d000100 	stfpls	f0, [r0, #-0]
	...
    28c8:	60740003 	rsbsvs	r0, r4, r3
    28cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    28d0:	00000000 	andeq	r0, r0, r0
    28d4:	7d000300 	stcvc	3, cr0, [r0, #-0]
    28d8:	00009f48 	andeq	r9, r0, r8, asr #30
	...
    28e8:	00010000 	andeq	r0, r1, r0
    28ec:	00000058 	andeq	r0, r0, r8, asr r0
    28f0:	00000000 	andeq	r0, r0, r0
    28f4:	f3000400 	vshl.u8	d0, d0, d0
    28f8:	009f5001 	addseq	r5, pc, r1
	...
    2908:	01000000 	mrseq	r0, (UNDEF: 0)
    290c:	00005200 	andeq	r5, r0, r0, lsl #4
    2910:	00000000 	andeq	r0, r0, r0
    2914:	00040000 	andeq	r0, r4, r0
    2918:	9f5201f3 	svcls	0x005201f3
	...
    292c:	9f300002 	svcls	0x00300002
	...
    2938:	00740005 	rsbseq	r0, r4, r5
    293c:	009f2538 	addseq	r2, pc, r8, lsr r5	; <UNPREDICTABLE>
    2940:	00000000 	andeq	r0, r0, r0
    2944:	01000000 	mrseq	r0, (UNDEF: 0)
    2948:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    2958:	00020000 	andeq	r0, r2, r0
    295c:	00009f30 	andeq	r9, r0, r0, lsr pc
    2960:	00000000 	andeq	r0, r0, r0
    2964:	00010000 	andeq	r0, r1, r0
    2968:	00000053 	andeq	r0, r0, r3, asr r0
    296c:	00000000 	andeq	r0, r0, r0
    2970:	30000200 	andcc	r0, r0, r0, lsl #4
    2974:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2978:	00000000 	andeq	r0, r0, r0
    297c:	53000100 	movwpl	r0, #256	; 0x100
	...
    2988:	7f730003 	svcvc	0x00730003
    298c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2990:	00000000 	andeq	r0, r0, r0
    2994:	53000100 	movwpl	r0, #256	; 0x100
	...
    29a0:	08002608 	stmdaeq	r0, {r3, r9, sl, sp}
    29a4:	08002bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, sp}
    29a8:	c8510001 	ldmdagt	r1, {r0}^
    29ac:	f208002b 	vhadd.s8	d0, d8, d27
    29b0:	0408002b 	streq	r0, [r8], #-43	; 0x2b
    29b4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    29b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    29bc:	00000000 	andeq	r0, r0, r0
    29c0:	00261000 	eoreq	r1, r6, r0
    29c4:	002bc808 	eoreq	ip, fp, r8, lsl #16
    29c8:	51000108 	tstpl	r0, r8, lsl #2
    29cc:	08002bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, sp}
    29d0:	08002bf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, fp, sp}
    29d4:	01f30004 	mvnseq	r0, r4
    29d8:	00009f51 	andeq	r9, r0, r1, asr pc
    29dc:	00000000 	andeq	r0, r0, r0
    29e0:	26100000 	ldrcs	r0, [r0], -r0
    29e4:	2bec0800 	blcs	ffb049ec <BootRAM+0xea7518d>
    29e8:	00010800 	andeq	r0, r1, r0, lsl #16
    29ec:	002bec5d 	eoreq	lr, fp, sp, asr ip
    29f0:	002bf008 	eoreq	pc, fp, r8
    29f4:	91000308 	tstls	r0, r8, lsl #6
    29f8:	2bf09f40 	blcs	ffc2a700 <BootRAM+0xeb9aea1>
    29fc:	2bf20800 	blcs	ffc84a04 <BootRAM+0xebf51a5>
    2a00:	00030800 	andeq	r0, r3, r0, lsl #16
    2a04:	009f407d 	addseq	r4, pc, sp, ror r0	; <UNPREDICTABLE>
    2a08:	00000000 	andeq	r0, r0, r0
    2a0c:	10000000 	andne	r0, r0, r0
    2a10:	16080026 	strne	r0, [r8], -r6, lsr #32
    2a14:	02080026 	andeq	r0, r8, #38	; 0x26
    2a18:	169f3000 	ldrne	r3, [pc], r0
    2a1c:	64080026 	strvs	r0, [r8], #-38	; 0x26
    2a20:	01080026 	tsteq	r8, r6, lsr #32
    2a24:	26705300 	ldrbtcs	r5, [r0], -r0, lsl #6
    2a28:	268e0800 	strcs	r0, [lr], r0, lsl #16
    2a2c:	00010800 	andeq	r0, r1, r0, lsl #16
    2a30:	00000052 	andeq	r0, r0, r2, asr r0
    2a34:	00000000 	andeq	r0, r0, r0
    2a38:	00261000 	eoreq	r1, r6, r0
    2a3c:	00261608 	eoreq	r1, r6, r8, lsl #12
    2a40:	30000208 	andcc	r0, r0, r8, lsl #4
    2a44:	0026169f 	mlaeq	r6, pc, r6, r1	; <UNPREDICTABLE>
    2a48:	00267008 	eoreq	r7, r6, r8
    2a4c:	56000108 	strpl	r0, [r0], -r8, lsl #2
    2a50:	08002670 	stmdaeq	r0, {r4, r5, r6, r9, sl, sp}
    2a54:	08002678 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl, sp}
    2a58:	9f300002 	svcls	0x00300002
    2a5c:	08002678 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl, sp}
    2a60:	08002680 	stmdaeq	r0, {r7, r9, sl, sp}
    2a64:	00730008 	rsbseq	r0, r3, r8
    2a68:	231c0091 	tstcs	ip, #145	; 0x91
    2a6c:	26809f40 	strcs	r9, [r0], r0, asr #30
    2a70:	26860800 	strcs	r0, [r6], r0, lsl #16
    2a74:	00080800 	andeq	r0, r8, r0, lsl #16
    2a78:	00910073 	addseq	r0, r1, r3, ror r0
    2a7c:	9f3f231c 	svcls	0x003f231c
    2a80:	08002686 	stmdaeq	r0, {r1, r2, r7, r9, sl, sp}
    2a84:	08002690 	stmdaeq	r0, {r4, r7, r9, sl, sp}
    2a88:	00730008 	rsbseq	r0, r3, r8
    2a8c:	231c0091 	tstcs	ip, #145	; 0x91
    2a90:	00009f40 	andeq	r9, r0, r0, asr #30
    2a94:	00000000 	andeq	r0, r0, r0
    2a98:	26180000 	ldrcs	r0, [r8], -r0
    2a9c:	261c0800 	ldrcs	r0, [ip], -r0, lsl #16
    2aa0:	00020800 	andeq	r0, r2, r0, lsl #16
    2aa4:	261c9f30 	sasxcs	r9, ip, r0
    2aa8:	26240800 	strtcs	r0, [r4], -r0, lsl #16
    2aac:	00010800 	andeq	r0, r1, r0, lsl #16
    2ab0:	00262452 	eoreq	r2, r6, r2, asr r4
    2ab4:	00262a08 	eoreq	r2, r6, r8, lsl #20
    2ab8:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    2abc:	262a9f7f 	qsub16cs	r9, sl, pc	; <UNPREDICTABLE>
    2ac0:	264c0800 	strbcs	r0, [ip], -r0, lsl #16
    2ac4:	00010800 	andeq	r0, r1, r0, lsl #16
    2ac8:	00264c52 	eoreq	r4, r6, r2, asr ip
    2acc:	00265208 	eoreq	r5, r6, r8, lsl #4
    2ad0:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    2ad4:	26529f7f 	usub16cs	r9, r2, pc	; <UNPREDICTABLE>
    2ad8:	26680800 	strbtcs	r0, [r8], -r0, lsl #16
    2adc:	00010800 	andeq	r0, r1, r0, lsl #16
    2ae0:	00000052 	andeq	r0, r0, r2, asr r0
    2ae4:	00000000 	andeq	r0, r0, r0
    2ae8:	00269800 	eoreq	r9, r6, r0, lsl #16
    2aec:	0026e208 	eoreq	lr, r6, r8, lsl #4
    2af0:	53000108 	movwpl	r0, #264	; 0x108
    2af4:	080026ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, sl, sp}
    2af8:	0800270c 	stmdaeq	r0, {r2, r3, r8, r9, sl, sp}
    2afc:	00520001 	subseq	r0, r2, r1
    2b00:	00000000 	andeq	r0, r0, r0
    2b04:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    2b08:	ee080026 	cdp	0, 0, cr0, cr8, cr6, {1}
    2b0c:	01080026 	tsteq	r8, r6, lsr #32
    2b10:	26ee5500 	strbtcs	r5, [lr], r0, lsl #10
    2b14:	26f20800 	ldrbtcs	r0, [r2], r0, lsl #16
    2b18:	00020800 	andeq	r0, r2, r0, lsl #16
    2b1c:	26f29f30 			; <UNDEFINED> instruction: 0x26f29f30
    2b20:	26fa0800 	ldrbtcs	r0, [sl], r0, lsl #16
    2b24:	00010800 	andeq	r0, r1, r0, lsl #16
    2b28:	0026fa53 	eoreq	pc, r6, r3, asr sl	; <UNPREDICTABLE>
    2b2c:	00270008 	eoreq	r0, r7, r8
    2b30:	73000308 	movwvc	r0, #776	; 0x308
    2b34:	27009f7f 	smlsdxcs	r0, pc, pc, r9	; <UNPREDICTABLE>
    2b38:	270c0800 	strcs	r0, [ip, -r0, lsl #16]
    2b3c:	00010800 	andeq	r0, r1, r0, lsl #16
    2b40:	00000053 	andeq	r0, r0, r3, asr r0
    2b44:	00000000 	andeq	r0, r0, r0
    2b48:	00269a00 	eoreq	r9, r6, r0, lsl #20
    2b4c:	00269e08 	eoreq	r9, r6, r8, lsl #28
    2b50:	30000208 	andcc	r0, r0, r8, lsl #4
    2b54:	00269e9f 	mlaeq	r6, pc, lr, r9	; <UNPREDICTABLE>
    2b58:	0026a808 	eoreq	sl, r6, r8, lsl #16
    2b5c:	52000108 	andpl	r0, r0, #8, 2
    2b60:	080026a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, sp}
    2b64:	080026ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, sp}
    2b68:	7f720003 	svcvc	0x00720003
    2b6c:	0026ae9f 	mlaeq	r6, pc, lr, sl	; <UNPREDICTABLE>
    2b70:	0026b408 	eoreq	fp, r6, r8, lsl #8
    2b74:	52000108 	andpl	r0, r0, #8, 2
    2b78:	080026b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, sp}
    2b7c:	080026c2 	stmdaeq	r0, {r1, r6, r7, r9, sl, sp}
    2b80:	01720003 	cmneq	r2, r3
    2b84:	0026c29f 	mlaeq	r6, pc, r2, ip	; <UNPREDICTABLE>
    2b88:	0026ca08 	eoreq	ip, r6, r8, lsl #20
    2b8c:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2b90:	1c009100 	stfned	f1, [r0], {-0}
    2b94:	ca9f4123 	bgt	fe7d3028 <BootRAM+0xd7437c9>
    2b98:	d4080026 	strle	r0, [r8], #-38	; 0x26
    2b9c:	08080026 	stmdaeq	r8, {r1, r2, r5}
    2ba0:	91007200 	mrsls	r7, R8_usr
    2ba4:	40231c00 	eormi	r1, r3, r0, lsl #24
    2ba8:	0026d49f 	mlaeq	r6, pc, r4, sp	; <UNPREDICTABLE>
    2bac:	0026d608 	eoreq	sp, r6, r8, lsl #12
    2bb0:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2bb4:	1c009100 	stfned	f1, [r0], {-0}
    2bb8:	009f4123 	addseq	r4, pc, r3, lsr #2
    2bbc:	00000000 	andeq	r0, r0, r0
    2bc0:	0c000000 	stceq	0, cr0, [r0], {-0}
    2bc4:	12080027 	andne	r0, r8, #39	; 0x27
    2bc8:	02080027 	andeq	r0, r8, #39	; 0x27
    2bcc:	129f3000 	addsne	r3, pc, #0
    2bd0:	6c080027 	stcvs	0, cr0, [r8], {39}	; 0x27
    2bd4:	01080027 	tsteq	r8, r7, lsr #32
    2bd8:	27785300 	ldrbcs	r5, [r8, -r0, lsl #6]!
    2bdc:	27940800 	ldrcs	r0, [r4, r0, lsl #16]
    2be0:	00010800 	andeq	r0, r1, r0, lsl #16
    2be4:	00000052 	andeq	r0, r0, r2, asr r0
    2be8:	00000000 	andeq	r0, r0, r0
    2bec:	00270c00 	eoreq	r0, r7, r0, lsl #24
    2bf0:	00271208 	eoreq	r1, r7, r8, lsl #4
    2bf4:	30000208 	andcc	r0, r0, r8, lsl #4
    2bf8:	0027129f 	mlaeq	r7, pc, r2, r1	; <UNPREDICTABLE>
    2bfc:	00277808 	eoreq	r7, r7, r8, lsl #16
    2c00:	59000108 	stmdbpl	r0, {r3, r8}
    2c04:	08002778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, sp}
    2c08:	0800277e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, sl, sp}
    2c0c:	9f300002 	svcls	0x00300002
    2c10:	0800277e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, sl, sp}
    2c14:	08002786 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, sp}
    2c18:	00730008 	rsbseq	r0, r3, r8
    2c1c:	231c0091 	tstcs	ip, #145	; 0x91
    2c20:	27869f40 	strcs	r9, [r6, r0, asr #30]
    2c24:	278c0800 	strcs	r0, [ip, r0, lsl #16]
    2c28:	00080800 	andeq	r0, r8, r0, lsl #16
    2c2c:	00910073 	addseq	r0, r1, r3, ror r0
    2c30:	9f3f231c 	svcls	0x003f231c
    2c34:	0800278c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, sp}
    2c38:	08002794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp}
    2c3c:	00730008 	rsbseq	r0, r3, r8
    2c40:	231c0091 	tstcs	ip, #145	; 0x91
    2c44:	00009f40 	andeq	r9, r0, r0, asr #30
    2c48:	00000000 	andeq	r0, r0, r0
    2c4c:	27140000 	ldrcs	r0, [r4, -r0]
    2c50:	271a0800 	ldrcs	r0, [sl, -r0, lsl #16]
    2c54:	00020800 	andeq	r0, r2, r0, lsl #16
    2c58:	271a9f30 			; <UNDEFINED> instruction: 0x271a9f30
    2c5c:	27240800 	strcs	r0, [r4, -r0, lsl #16]!
    2c60:	00010800 	andeq	r0, r1, r0, lsl #16
    2c64:	00272452 	eoreq	r2, r7, r2, asr r4
    2c68:	00272a08 	eoreq	r2, r7, r8, lsl #20
    2c6c:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    2c70:	272a9f7f 			; <UNDEFINED> instruction: 0x272a9f7f
    2c74:	27500800 	ldrbcs	r0, [r0, -r0, lsl #16]
    2c78:	00010800 	andeq	r0, r1, r0, lsl #16
    2c7c:	00275052 	eoreq	r5, r7, r2, asr r0
    2c80:	00275608 	eoreq	r5, r7, r8, lsl #12
    2c84:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    2c88:	27569f7f 			; <UNDEFINED> instruction: 0x27569f7f
    2c8c:	27700800 	ldrbcs	r0, [r0, -r0, lsl #16]!
    2c90:	00010800 	andeq	r0, r1, r0, lsl #16
    2c94:	00000052 	andeq	r0, r0, r2, asr r0
    2c98:	00000000 	andeq	r0, r0, r0
    2c9c:	00279400 	eoreq	r9, r7, r0, lsl #8
    2ca0:	0027ea08 	eoreq	lr, r7, r8, lsl #20
    2ca4:	53000108 	movwpl	r0, #264	; 0x108
    2ca8:	080027f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, sp}
    2cac:	08002818 	stmdaeq	r0, {r3, r4, fp, sp}
    2cb0:	00520001 	subseq	r0, r2, r1
    2cb4:	00000000 	andeq	r0, r0, r0
    2cb8:	94000000 	strls	r0, [r0], #-0
    2cbc:	f6080027 			; <UNDEFINED> instruction: 0xf6080027
    2cc0:	01080027 	tsteq	r8, r7, lsr #32
    2cc4:	27f65900 	ldrbcs	r5, [r6, r0, lsl #18]!
    2cc8:	27fa0800 	ldrbcs	r0, [sl, r0, lsl #16]!
    2ccc:	00020800 	andeq	r0, r2, r0, lsl #16
    2cd0:	27fa9f30 			; <UNDEFINED> instruction: 0x27fa9f30
    2cd4:	28020800 	stmdacs	r2, {fp}
    2cd8:	00010800 	andeq	r0, r1, r0, lsl #16
    2cdc:	00280253 	eoreq	r0, r8, r3, asr r2
    2ce0:	00280808 	eoreq	r0, r8, r8, lsl #16
    2ce4:	73000308 	movwvc	r0, #776	; 0x308
    2ce8:	28089f7f 	stmdacs	r8, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}
    2cec:	28140800 	ldmdacs	r4, {fp}
    2cf0:	00010800 	andeq	r0, r1, r0, lsl #16
    2cf4:	00000053 	andeq	r0, r0, r3, asr r0
    2cf8:	00000000 	andeq	r0, r0, r0
    2cfc:	00279600 	eoreq	r9, r7, r0, lsl #12
    2d00:	00279c08 	eoreq	r9, r7, r8, lsl #24
    2d04:	30000208 	andcc	r0, r0, r8, lsl #4
    2d08:	00279c9f 	mlaeq	r7, pc, ip, r9	; <UNPREDICTABLE>
    2d0c:	0027a608 	eoreq	sl, r7, r8, lsl #12
    2d10:	52000108 	andpl	r0, r0, #8, 2
    2d14:	080027a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, sp}
    2d18:	080027ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, sp}
    2d1c:	7f720003 	svcvc	0x00720003
    2d20:	0027ac9f 	mlaeq	r7, pc, ip, sl	; <UNPREDICTABLE>
    2d24:	0027b208 	eoreq	fp, r7, r8, lsl #4
    2d28:	52000108 	andpl	r0, r0, #8, 2
    2d2c:	080027b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, sl, sp}
    2d30:	080027c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp}
    2d34:	01720003 	cmneq	r2, r3
    2d38:	0027c49f 	mlaeq	r7, pc, r4, ip	; <UNPREDICTABLE>
    2d3c:	0027cc08 	eoreq	ip, r7, r8, lsl #24
    2d40:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2d44:	1c009100 	stfned	f1, [r0], {-0}
    2d48:	cc9f4123 	ldfgts	f4, [pc], {35}	; 0x23
    2d4c:	d6080027 	strle	r0, [r8], -r7, lsr #32
    2d50:	08080027 	stmdaeq	r8, {r0, r1, r2, r5}
    2d54:	91007200 	mrsls	r7, R8_usr
    2d58:	40231c00 	eormi	r1, r3, r0, lsl #24
    2d5c:	0027d69f 	mlaeq	r7, pc, r6, sp	; <UNPREDICTABLE>
    2d60:	0027d808 	eoreq	sp, r7, r8, lsl #16
    2d64:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2d68:	1c009100 	stfned	f1, [r0], {-0}
    2d6c:	009f4123 	addseq	r4, pc, r3, lsr #2
    2d70:	00000000 	andeq	r0, r0, r0
    2d74:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2d78:	6e080028 	cdpvs	0, 0, cr0, cr8, cr8, {1}
    2d7c:	01080028 	tsteq	r8, r8, lsr #32
    2d80:	287a5300 	ldmdacs	sl!, {r8, r9, ip, lr}^
    2d84:	28960800 	ldmcs	r6, {fp}
    2d88:	00010800 	andeq	r0, r1, r0, lsl #16
    2d8c:	00000052 	andeq	r0, r0, r2, asr r0
    2d90:	00000000 	andeq	r0, r0, r0
    2d94:	00281800 	eoreq	r1, r8, r0, lsl #16
    2d98:	00287a08 	eoreq	r7, r8, r8, lsl #20
    2d9c:	5c000108 	stfpls	f0, [r0], {8}
    2da0:	0800287a 	stmdaeq	r0, {r1, r3, r4, r5, r6, fp, sp}
    2da4:	08002880 	stmdaeq	r0, {r7, fp, sp}
    2da8:	9f300002 	svcls	0x00300002
    2dac:	08002880 	stmdaeq	r0, {r7, fp, sp}
    2db0:	08002888 	stmdaeq	r0, {r3, r7, fp, sp}
    2db4:	00730008 	rsbseq	r0, r3, r8
    2db8:	231c0091 	tstcs	ip, #145	; 0x91
    2dbc:	28889f40 	stmcs	r8, {r6, r8, r9, sl, fp, ip, pc}
    2dc0:	288e0800 	stmcs	lr, {fp}
    2dc4:	00080800 	andeq	r0, r8, r0, lsl #16
    2dc8:	00910073 	addseq	r0, r1, r3, ror r0
    2dcc:	9f3f231c 	svcls	0x003f231c
    2dd0:	0800288e 	stmdaeq	r0, {r1, r2, r3, r7, fp, sp}
    2dd4:	08002898 	stmdaeq	r0, {r3, r4, r7, fp, sp}
    2dd8:	00730008 	rsbseq	r0, r3, r8
    2ddc:	231c0091 	tstcs	ip, #145	; 0x91
    2de0:	00009f40 	andeq	r9, r0, r0, asr #30
    2de4:	00000000 	andeq	r0, r0, r0
    2de8:	281a0000 	ldmdacs	sl, {}	; <UNPREDICTABLE>
    2dec:	28200800 	stmdacs	r0!, {fp}
    2df0:	00020800 	andeq	r0, r2, r0, lsl #16
    2df4:	28209f30 	stmdacs	r0!, {r4, r5, r8, r9, sl, fp, ip, pc}
    2df8:	28280800 	stmdacs	r8!, {fp}
    2dfc:	00010800 	andeq	r0, r1, r0, lsl #16
    2e00:	00282852 	eoreq	r2, r8, r2, asr r8
    2e04:	00282e08 	eoreq	r2, r8, r8, lsl #28
    2e08:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    2e0c:	282e9f7f 	stmdacs	lr!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}
    2e10:	28520800 	ldmdacs	r2, {fp}^
    2e14:	00010800 	andeq	r0, r1, r0, lsl #16
    2e18:	00285252 	eoreq	r5, r8, r2, asr r2
    2e1c:	00285808 	eoreq	r5, r8, r8, lsl #16
    2e20:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    2e24:	28589f7f 	ldmdacs	r8, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}^
    2e28:	28720800 	ldmdacs	r2!, {fp}^
    2e2c:	00010800 	andeq	r0, r1, r0, lsl #16
    2e30:	00000052 	andeq	r0, r0, r2, asr r0
    2e34:	00000000 	andeq	r0, r0, r0
    2e38:	0028a000 	eoreq	sl, r8, r0
    2e3c:	0028ec08 	eoreq	lr, r8, r8, lsl #24
    2e40:	53000108 	movwpl	r0, #264	; 0x108
    2e44:	080028f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, sp}
    2e48:	08002914 	stmdaeq	r0, {r2, r4, r8, fp, sp}
    2e4c:	00520001 	subseq	r0, r2, r1
    2e50:	00000000 	andeq	r0, r0, r0
    2e54:	a0000000 	andge	r0, r0, r0
    2e58:	f8080028 			; <UNDEFINED> instruction: 0xf8080028
    2e5c:	01080028 	tsteq	r8, r8, lsr #32
    2e60:	28f85500 	ldmcs	r8!, {r8, sl, ip, lr}^
    2e64:	28fc0800 	ldmcs	ip!, {fp}^
    2e68:	00020800 	andeq	r0, r2, r0, lsl #16
    2e6c:	28fc9f30 	ldmcs	ip!, {r4, r5, r8, r9, sl, fp, ip, pc}^
    2e70:	29040800 	stmdbcs	r4, {fp}
    2e74:	00010800 	andeq	r0, r1, r0, lsl #16
    2e78:	00290453 	eoreq	r0, r9, r3, asr r4
    2e7c:	00290a08 	eoreq	r0, r9, r8, lsl #20
    2e80:	73000308 	movwvc	r0, #776	; 0x308
    2e84:	290a9f7f 	stmdbcs	sl, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}
    2e88:	29100800 	ldmdbcs	r0, {fp}
    2e8c:	00010800 	andeq	r0, r1, r0, lsl #16
    2e90:	00000053 	andeq	r0, r0, r3, asr r0
    2e94:	00000000 	andeq	r0, r0, r0
    2e98:	0028a400 	eoreq	sl, r8, r0, lsl #8
    2e9c:	0028a808 	eoreq	sl, r8, r8, lsl #16
    2ea0:	30000208 	andcc	r0, r0, r8, lsl #4
    2ea4:	0028a89f 	mlaeq	r8, pc, r8, sl	; <UNPREDICTABLE>
    2ea8:	0028b208 	eoreq	fp, r8, r8, lsl #4
    2eac:	52000108 	andpl	r0, r0, #8, 2
    2eb0:	080028b2 	stmdaeq	r0, {r1, r4, r5, r7, fp, sp}
    2eb4:	080028b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, sp}
    2eb8:	7f720003 	svcvc	0x00720003
    2ebc:	0028b89f 	mlaeq	r8, pc, r8, fp	; <UNPREDICTABLE>
    2ec0:	0028be08 	eoreq	fp, r8, r8, lsl #28
    2ec4:	52000108 	andpl	r0, r0, #8, 2
    2ec8:	080028be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, fp, sp}
    2ecc:	080028cc 	stmdaeq	r0, {r2, r3, r6, r7, fp, sp}
    2ed0:	01720003 	cmneq	r2, r3
    2ed4:	0028cc9f 	mlaeq	r8, pc, ip, ip	; <UNPREDICTABLE>
    2ed8:	0028d408 	eoreq	sp, r8, r8, lsl #8
    2edc:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2ee0:	1c009100 	stfned	f1, [r0], {-0}
    2ee4:	d49f4123 	ldrle	r4, [pc], #291	; 2eec <__Stack_Size+0x26ec>
    2ee8:	de080028 	cdple	0, 0, cr0, cr8, cr8, {1}
    2eec:	08080028 	stmdaeq	r8, {r3, r5}
    2ef0:	91007200 	mrsls	r7, R8_usr
    2ef4:	40231c00 	eormi	r1, r3, r0, lsl #24
    2ef8:	0028de9f 	mlaeq	r8, pc, lr, sp	; <UNPREDICTABLE>
    2efc:	0028e008 	eoreq	lr, r8, r8
    2f00:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2f04:	1c009100 	stfned	f1, [r0], {-0}
    2f08:	009f4123 	addseq	r4, pc, r3, lsr #2
    2f0c:	00000000 	andeq	r0, r0, r0
    2f10:	14000000 	strne	r0, [r0], #-0
    2f14:	64080029 	strvs	r0, [r8], #-41	; 0x29
    2f18:	01080029 	tsteq	r8, r9, lsr #32
    2f1c:	29705300 	ldmdbcs	r0!, {r8, r9, ip, lr}^
    2f20:	29960800 	ldmibcs	r6, {fp}
    2f24:	00010800 	andeq	r0, r1, r0, lsl #16
    2f28:	00000052 	andeq	r0, r0, r2, asr r0
    2f2c:	00000000 	andeq	r0, r0, r0
    2f30:	00291400 	eoreq	r1, r9, r0, lsl #8
    2f34:	00297008 	eoreq	r7, r9, r8
    2f38:	56000108 	strpl	r0, [r0], -r8, lsl #2
    2f3c:	08002970 	stmdaeq	r0, {r4, r5, r6, r8, fp, sp}
    2f40:	08002976 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, fp, sp}
    2f44:	9f300002 	svcls	0x00300002
    2f48:	08002976 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, fp, sp}
    2f4c:	0800297e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, fp, sp}
    2f50:	00730008 	rsbseq	r0, r3, r8
    2f54:	231c0091 	tstcs	ip, #145	; 0x91
    2f58:	297e9f40 	ldmdbcs	lr!, {r6, r8, r9, sl, fp, ip, pc}^
    2f5c:	29840800 	stmibcs	r4, {fp}
    2f60:	00080800 	andeq	r0, r8, r0, lsl #16
    2f64:	00910073 	addseq	r0, r1, r3, ror r0
    2f68:	9f3f231c 	svcls	0x003f231c
    2f6c:	08002984 	stmdaeq	r0, {r2, r7, r8, fp, sp}
    2f70:	08002992 	stmdaeq	r0, {r1, r4, r7, r8, fp, sp}
    2f74:	00730008 	rsbseq	r0, r3, r8
    2f78:	231c0091 	tstcs	ip, #145	; 0x91
    2f7c:	00009f40 	andeq	r9, r0, r0, asr #30
    2f80:	00000000 	andeq	r0, r0, r0
    2f84:	29160000 	ldmdbcs	r6, {}	; <UNPREDICTABLE>
    2f88:	291a0800 	ldmdbcs	sl, {fp}
    2f8c:	00020800 	andeq	r0, r2, r0, lsl #16
    2f90:	291a9f30 	ldmdbcs	sl, {r4, r5, r8, r9, sl, fp, ip, pc}
    2f94:	29240800 	stmdbcs	r4!, {fp}
    2f98:	00010800 	andeq	r0, r1, r0, lsl #16
    2f9c:	00292452 	eoreq	r2, r9, r2, asr r4
    2fa0:	00292a08 	eoreq	r2, r9, r8, lsl #20
    2fa4:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    2fa8:	292a9f7f 	stmdbcs	sl!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}
    2fac:	294c0800 	stmdbcs	ip, {fp}^
    2fb0:	00010800 	andeq	r0, r1, r0, lsl #16
    2fb4:	00294c52 	eoreq	r4, r9, r2, asr ip
    2fb8:	00295208 	eoreq	r5, r9, r8, lsl #4
    2fbc:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    2fc0:	29529f7f 	ldmdbcs	r2, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}^
    2fc4:	29680800 	stmdbcs	r8!, {fp}^
    2fc8:	00010800 	andeq	r0, r1, r0, lsl #16
    2fcc:	00000052 	andeq	r0, r0, r2, asr r0
    2fd0:	00000000 	andeq	r0, r0, r0
    2fd4:	00299600 	eoreq	r9, r9, r0, lsl #12
    2fd8:	0029e208 	eoreq	lr, r9, r8, lsl #4
    2fdc:	53000108 	movwpl	r0, #264	; 0x108
    2fe0:	080029ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, fp, sp}
    2fe4:	08002a0a 	stmdaeq	r0, {r1, r3, r9, fp, sp}
    2fe8:	00520001 	subseq	r0, r2, r1
    2fec:	00000000 	andeq	r0, r0, r0
    2ff0:	96000000 	strls	r0, [r0], -r0
    2ff4:	ee080029 	cdp	0, 0, cr0, cr8, cr9, {1}
    2ff8:	01080029 	tsteq	r8, r9, lsr #32
    2ffc:	29ee5500 	stmibcs	lr!, {r8, sl, ip, lr}^
    3000:	29f20800 	ldmibcs	r2!, {fp}^
    3004:	00020800 	andeq	r0, r2, r0, lsl #16
    3008:	29f29f30 	ldmibcs	r2!, {r4, r5, r8, r9, sl, fp, ip, pc}^
    300c:	29fa0800 	ldmibcs	sl!, {fp}^
    3010:	00010800 	andeq	r0, r1, r0, lsl #16
    3014:	0029fa53 	eoreq	pc, r9, r3, asr sl	; <UNPREDICTABLE>
    3018:	002a0008 	eoreq	r0, sl, r8
    301c:	73000308 	movwvc	r0, #776	; 0x308
    3020:	2a009f7f 	bcs	2ae24 <__Stack_Size+0x2a624>
    3024:	2a060800 	bcs	18502c <__Stack_Size+0x18482c>
    3028:	00010800 	andeq	r0, r1, r0, lsl #16
    302c:	00000053 	andeq	r0, r0, r3, asr r0
    3030:	00000000 	andeq	r0, r0, r0
    3034:	00299a00 	eoreq	r9, r9, r0, lsl #20
    3038:	00299e08 	eoreq	r9, r9, r8, lsl #28
    303c:	30000208 	andcc	r0, r0, r8, lsl #4
    3040:	00299e9f 	mlaeq	r9, pc, lr, r9	; <UNPREDICTABLE>
    3044:	0029a808 	eoreq	sl, r9, r8, lsl #16
    3048:	52000108 	andpl	r0, r0, #8, 2
    304c:	080029a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, sp}
    3050:	080029ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, fp, sp}
    3054:	7f720003 	svcvc	0x00720003
    3058:	0029ae9f 	mlaeq	r9, pc, lr, sl	; <UNPREDICTABLE>
    305c:	0029b408 	eoreq	fp, r9, r8, lsl #8
    3060:	52000108 	andpl	r0, r0, #8, 2
    3064:	080029b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp, sp}
    3068:	080029c2 	stmdaeq	r0, {r1, r6, r7, r8, fp, sp}
    306c:	01720003 	cmneq	r2, r3
    3070:	0029c29f 	mlaeq	r9, pc, r2, ip	; <UNPREDICTABLE>
    3074:	0029ca08 	eoreq	ip, r9, r8, lsl #20
    3078:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    307c:	1c009100 	stfned	f1, [r0], {-0}
    3080:	ca9f4123 	bgt	fe7d3514 <BootRAM+0xd743cb5>
    3084:	d4080029 	strle	r0, [r8], #-41	; 0x29
    3088:	08080029 	stmdaeq	r8, {r0, r3, r5}
    308c:	91007200 	mrsls	r7, R8_usr
    3090:	40231c00 	eormi	r1, r3, r0, lsl #24
    3094:	0029d49f 	mlaeq	r9, pc, r4, sp	; <UNPREDICTABLE>
    3098:	0029d608 	eoreq	sp, r9, r8, lsl #12
    309c:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    30a0:	1c009100 	stfned	f1, [r0], {-0}
    30a4:	009f4123 	addseq	r4, pc, r3, lsr #2
    30a8:	00000000 	andeq	r0, r0, r0
    30ac:	0a000000 	beq	30b4 <__Stack_Size+0x28b4>
    30b0:	5a08002a 	bpl	203160 <__Stack_Size+0x202960>
    30b4:	0108002a 	tsteq	r8, sl, lsr #32
    30b8:	2a665300 	bcs	1997cc0 <__Stack_Size+0x19974c0>
    30bc:	2a8c0800 	bcs	fe3050c4 <BootRAM+0xd275865>
    30c0:	00010800 	andeq	r0, r1, r0, lsl #16
    30c4:	00000052 	andeq	r0, r0, r2, asr r0
    30c8:	00000000 	andeq	r0, r0, r0
    30cc:	002a0a00 	eoreq	r0, sl, r0, lsl #20
    30d0:	002a6608 	eoreq	r6, sl, r8, lsl #12
    30d4:	56000108 	strpl	r0, [r0], -r8, lsl #2
    30d8:	08002a66 	stmdaeq	r0, {r1, r2, r5, r6, r9, fp, sp}
    30dc:	08002a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp}
    30e0:	9f300002 	svcls	0x00300002
    30e4:	08002a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp}
    30e8:	08002a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, sp}
    30ec:	00730008 	rsbseq	r0, r3, r8
    30f0:	231c0091 	tstcs	ip, #145	; 0x91
    30f4:	2a749f40 	bcs	1d2adfc <__Stack_Size+0x1d2a5fc>
    30f8:	2a7a0800 	bcs	1e85100 <__Stack_Size+0x1e84900>
    30fc:	00080800 	andeq	r0, r8, r0, lsl #16
    3100:	00910073 	addseq	r0, r1, r3, ror r0
    3104:	9f3f231c 	svcls	0x003f231c
    3108:	08002a7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, fp, sp}
    310c:	08002a88 	stmdaeq	r0, {r3, r7, r9, fp, sp}
    3110:	00730008 	rsbseq	r0, r3, r8
    3114:	231c0091 	tstcs	ip, #145	; 0x91
    3118:	00009f40 	andeq	r9, r0, r0, asr #30
    311c:	00000000 	andeq	r0, r0, r0
    3120:	2a0c0000 	bcs	303128 <__Stack_Size+0x302928>
    3124:	2a100800 	bcs	40512c <__Stack_Size+0x40492c>
    3128:	00020800 	andeq	r0, r2, r0, lsl #16
    312c:	2a109f30 	bcs	42adf4 <__Stack_Size+0x42a5f4>
    3130:	2a1a0800 	bcs	685138 <__Stack_Size+0x684938>
    3134:	00010800 	andeq	r0, r1, r0, lsl #16
    3138:	002a1a52 	eoreq	r1, sl, r2, asr sl
    313c:	002a2008 	eoreq	r2, sl, r8
    3140:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    3144:	2a209f7f 	bcs	82af48 <__Stack_Size+0x82a748>
    3148:	2a420800 	bcs	1085150 <__Stack_Size+0x1084950>
    314c:	00010800 	andeq	r0, r1, r0, lsl #16
    3150:	002a4252 	eoreq	r4, sl, r2, asr r2
    3154:	002a4808 	eoreq	r4, sl, r8, lsl #16
    3158:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    315c:	2a489f7f 	bcs	122af60 <__Stack_Size+0x122a760>
    3160:	2a5e0800 	bcs	1785168 <__Stack_Size+0x1784968>
    3164:	00010800 	andeq	r0, r1, r0, lsl #16
    3168:	00000052 	andeq	r0, r0, r2, asr r0
    316c:	00000000 	andeq	r0, r0, r0
    3170:	002a8c00 	eoreq	r8, sl, r0, lsl #24
    3174:	002ad608 	eoreq	sp, sl, r8, lsl #12
    3178:	53000108 	movwpl	r0, #264	; 0x108
    317c:	08002ae2 	stmdaeq	r0, {r1, r5, r6, r7, r9, fp, sp}
    3180:	08002afe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, fp, sp}
    3184:	00520001 	subseq	r0, r2, r1
    3188:	00000000 	andeq	r0, r0, r0
    318c:	8c000000 	stchi	0, cr0, [r0], {-0}
    3190:	e208002a 	and	r0, r8, #42	; 0x2a
    3194:	0108002a 	tsteq	r8, sl, lsr #32
    3198:	2ae25500 	bcs	ff8985a0 <BootRAM+0xe808d41>
    319c:	2ae60800 	bcs	ff9851a4 <BootRAM+0xe8f5945>
    31a0:	00020800 	andeq	r0, r2, r0, lsl #16
    31a4:	2ae69f30 	bcs	ff9aae6c <BootRAM+0xe91b60d>
    31a8:	2aee0800 	bcs	ffb851b0 <BootRAM+0xeaf5951>
    31ac:	00010800 	andeq	r0, r1, r0, lsl #16
    31b0:	002aee53 	eoreq	lr, sl, r3, asr lr
    31b4:	002af408 	eoreq	pc, sl, r8, lsl #8
    31b8:	73000308 	movwvc	r0, #776	; 0x308
    31bc:	2af49f7f 	bcs	ffd2afc0 <BootRAM+0xec9b761>
    31c0:	2afa0800 	bcs	ffe851c8 <BootRAM+0xedf5969>
    31c4:	00010800 	andeq	r0, r1, r0, lsl #16
    31c8:	00000053 	andeq	r0, r0, r3, asr r0
    31cc:	00000000 	andeq	r0, r0, r0
    31d0:	002a8e00 	eoreq	r8, sl, r0, lsl #28
    31d4:	002a9208 	eoreq	r9, sl, r8, lsl #4
    31d8:	30000208 	andcc	r0, r0, r8, lsl #4
    31dc:	002a929f 	mlaeq	sl, pc, r2, r9	; <UNPREDICTABLE>
    31e0:	002a9c08 	eoreq	r9, sl, r8, lsl #24
    31e4:	52000108 	andpl	r0, r0, #8, 2
    31e8:	08002a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp, sp}
    31ec:	08002aa2 	stmdaeq	r0, {r1, r5, r7, r9, fp, sp}
    31f0:	7f720003 	svcvc	0x00720003
    31f4:	002aa29f 	mlaeq	sl, pc, r2, sl	; <UNPREDICTABLE>
    31f8:	002aa808 	eoreq	sl, sl, r8, lsl #16
    31fc:	52000108 	andpl	r0, r0, #8, 2
    3200:	08002aa8 	stmdaeq	r0, {r3, r5, r7, r9, fp, sp}
    3204:	08002ab6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, fp, sp}
    3208:	01720003 	cmneq	r2, r3
    320c:	002ab69f 	mlaeq	sl, pc, r6, fp	; <UNPREDICTABLE>
    3210:	002abe08 	eoreq	fp, sl, r8, lsl #28
    3214:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    3218:	1c009100 	stfned	f1, [r0], {-0}
    321c:	be9f4123 	fmlltep	f4, f7, f3
    3220:	c808002a 	stmdagt	r8, {r1, r3, r5}
    3224:	0808002a 	stmdaeq	r8, {r1, r3, r5}
    3228:	91007200 	mrsls	r7, R8_usr
    322c:	40231c00 	eormi	r1, r3, r0, lsl #24
    3230:	002ac89f 	mlaeq	sl, pc, r8, ip	; <UNPREDICTABLE>
    3234:	002aca08 	eoreq	ip, sl, r8, lsl #20
    3238:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    323c:	1c009100 	stfned	f1, [r0], {-0}
    3240:	009f4123 	addseq	r4, pc, r3, lsr #2
    3244:	00000000 	andeq	r0, r0, r0
    3248:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    324c:	4e08002a 	cdpmi	0, 0, cr0, cr8, cr10, {1}
    3250:	0108002b 	tsteq	r8, fp, lsr #32
    3254:	2b5a5300 	blcs	1697e5c <__Stack_Size+0x169765c>
    3258:	2b760800 	blcs	1d85260 <__Stack_Size+0x1d84a60>
    325c:	00010800 	andeq	r0, r1, r0, lsl #16
    3260:	00000052 	andeq	r0, r0, r2, asr r0
    3264:	00000000 	andeq	r0, r0, r0
    3268:	002afe00 	eoreq	pc, sl, r0, lsl #28
    326c:	002b5a08 	eoreq	r5, fp, r8, lsl #20
    3270:	56000108 	strpl	r0, [r0], -r8, lsl #2
    3274:	08002b5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, fp, sp}
    3278:	08002b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, sp}
    327c:	9f300002 	svcls	0x00300002
    3280:	08002b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, sp}
    3284:	08002b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, sp}
    3288:	00730008 	rsbseq	r0, r3, r8
    328c:	231c0091 	tstcs	ip, #145	; 0x91
    3290:	2b689f40 	blcs	1a2af98 <__Stack_Size+0x1a2a798>
    3294:	2b6e0800 	blcs	1b8529c <__Stack_Size+0x1b84a9c>
    3298:	00080800 	andeq	r0, r8, r0, lsl #16
    329c:	00910073 	addseq	r0, r1, r3, ror r0
    32a0:	9f3f231c 	svcls	0x003f231c
    32a4:	08002b6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, fp, sp}
    32a8:	08002b78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, fp, sp}
    32ac:	00730008 	rsbseq	r0, r3, r8
    32b0:	231c0091 	tstcs	ip, #145	; 0x91
    32b4:	00009f40 	andeq	r9, r0, r0, asr #30
    32b8:	00000000 	andeq	r0, r0, r0
    32bc:	2b000000 	blcs	32c4 <__Stack_Size+0x2ac4>
    32c0:	2b040800 	blcs	1052c8 <__Stack_Size+0x104ac8>
    32c4:	00020800 	andeq	r0, r2, r0, lsl #16
    32c8:	2b049f30 	blcs	12af90 <__Stack_Size+0x12a790>
    32cc:	2b0e0800 	blcs	3852d4 <__Stack_Size+0x384ad4>
    32d0:	00010800 	andeq	r0, r1, r0, lsl #16
    32d4:	002b0e52 	eoreq	r0, fp, r2, asr lr
    32d8:	002b1408 	eoreq	r1, fp, r8, lsl #8
    32dc:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    32e0:	2b149f7f 	blcs	52b0e4 <__Stack_Size+0x52a8e4>
    32e4:	2b360800 	blcs	d852ec <__Stack_Size+0xd84aec>
    32e8:	00010800 	andeq	r0, r1, r0, lsl #16
    32ec:	002b3652 	eoreq	r3, fp, r2, asr r6
    32f0:	002b3c08 	eoreq	r3, fp, r8, lsl #24
    32f4:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    32f8:	2b3c9f7f 	blcs	f2b0fc <__Stack_Size+0xf2a8fc>
    32fc:	2b520800 	blcs	1485304 <__Stack_Size+0x1484b04>
    3300:	00010800 	andeq	r0, r1, r0, lsl #16
    3304:	00000052 	andeq	r0, r0, r2, asr r0
    3308:	00000000 	andeq	r0, r0, r0
    330c:	002b8000 	eoreq	r8, fp, r0
    3310:	002bca08 	eoreq	ip, fp, r8, lsl #20
    3314:	53000108 	movwpl	r0, #264	; 0x108
    3318:	08002bd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, fp, sp}
    331c:	08002bf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, fp, sp}
    3320:	00520001 	subseq	r0, r2, r1
    3324:	00000000 	andeq	r0, r0, r0
    3328:	80000000 	andhi	r0, r0, r0
    332c:	d608002b 	strle	r0, [r8], -fp, lsr #32
    3330:	0108002b 	tsteq	r8, fp, lsr #32
    3334:	2bd65500 	blcs	ff59873c <BootRAM+0xe508edd>
    3338:	2bda0800 	blcs	ff685340 <BootRAM+0xe5f5ae1>
    333c:	00020800 	andeq	r0, r2, r0, lsl #16
    3340:	2bda9f30 	blcs	ff6ab008 <BootRAM+0xe61b7a9>
    3344:	2be20800 	blcs	ff88534c <BootRAM+0xe7f5aed>
    3348:	00010800 	andeq	r0, r1, r0, lsl #16
    334c:	002be253 	eoreq	lr, fp, r3, asr r2
    3350:	002be808 	eoreq	lr, fp, r8, lsl #16
    3354:	73000308 	movwvc	r0, #776	; 0x308
    3358:	2be89f7f 	blcs	ffa2b15c <BootRAM+0xe99b8fd>
    335c:	2bf20800 	blcs	ffc85364 <BootRAM+0xebf5b05>
    3360:	00010800 	andeq	r0, r1, r0, lsl #16
    3364:	00000053 	andeq	r0, r0, r3, asr r0
    3368:	00000000 	andeq	r0, r0, r0
    336c:	002b8200 	eoreq	r8, fp, r0, lsl #4
    3370:	002b8608 	eoreq	r8, fp, r8, lsl #12
    3374:	30000208 	andcc	r0, r0, r8, lsl #4
    3378:	002b869f 	mlaeq	fp, pc, r6, r8	; <UNPREDICTABLE>
    337c:	002b9008 	eoreq	r9, fp, r8
    3380:	52000108 	andpl	r0, r0, #8, 2
    3384:	08002b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, sp}
    3388:	08002b96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, fp, sp}
    338c:	7f720003 	svcvc	0x00720003
    3390:	002b969f 	mlaeq	fp, pc, r6, r9	; <UNPREDICTABLE>
    3394:	002b9c08 	eoreq	r9, fp, r8, lsl #24
    3398:	52000108 	andpl	r0, r0, #8, 2
    339c:	08002b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, sp}
    33a0:	08002baa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, fp, sp}
    33a4:	01720003 	cmneq	r2, r3
    33a8:	002baa9f 	mlaeq	fp, pc, sl, sl	; <UNPREDICTABLE>
    33ac:	002bb208 	eoreq	fp, fp, r8, lsl #4
    33b0:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    33b4:	1c009100 	stfned	f1, [r0], {-0}
    33b8:	b29f4123 	addslt	r4, pc, #-1073741816	; 0xc0000008
    33bc:	bc08002b 	stclt	0, cr0, [r8], {43}	; 0x2b
    33c0:	0808002b 	stmdaeq	r8, {r0, r1, r3, r5}
    33c4:	91007200 	mrsls	r7, R8_usr
    33c8:	40231c00 	eormi	r1, r3, r0, lsl #24
    33cc:	002bbc9f 	mlaeq	fp, pc, ip, fp	; <UNPREDICTABLE>
    33d0:	002bbe08 	eoreq	fp, fp, r8, lsl #28
    33d4:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    33d8:	1c009100 	stfned	f1, [r0], {-0}
    33dc:	009f4123 	addseq	r4, pc, r3, lsr #2
	...
    33ec:	01000000 	mrseq	r0, (UNDEF: 0)
    33f0:	00005000 	andeq	r5, r0, r0
    33f4:	00000000 	andeq	r0, r0, r0
    33f8:	00010000 	andeq	r0, r1, r0
    33fc:	00000055 	andeq	r0, r0, r5, asr r0
	...
    340c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3418:	01f30004 	mvnseq	r0, r4
    341c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    342c:	00010000 	andeq	r0, r1, r0
    3430:	0000005d 	andeq	r0, r0, sp, asr r0
    3434:	00000000 	andeq	r0, r0, r0
    3438:	74000300 	strvc	r0, [r0], #-768	; 0x300
    343c:	00009f60 	andeq	r9, r0, r0, ror #30
    3440:	00000000 	andeq	r0, r0, r0
    3444:	2bf40000 	blcs	ffd0344c <BootRAM+0xec73bed>
    3448:	2c060800 	stccs	8, cr0, [r6], {-0}
    344c:	00010800 	andeq	r0, r1, r0, lsl #16
    3450:	002c0650 	eoreq	r0, ip, r0, asr r6
    3454:	00322608 	eorseq	r2, r2, r8, lsl #12
    3458:	91000308 	tstls	r0, r8, lsl #6
    345c:	32267ed8 	eorcc	r7, r6, #216, 28	; 0xd80
    3460:	32280800 	eorcc	r0, r8, #0, 16
    3464:	00030800 	andeq	r0, r3, r0, lsl #16
    3468:	007ed87d 	rsbseq	sp, lr, sp, ror r8
    346c:	00000000 	andeq	r0, r0, r0
    3470:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    3474:	0608002b 	streq	r0, [r8], -fp, lsr #32
    3478:	0108002c 	tsteq	r8, ip, lsr #32
    347c:	2c065100 	stfcss	f5, [r6], {-0}
    3480:	2c2e0800 	stccs	8, cr0, [lr], #-0
    3484:	00010800 	andeq	r0, r1, r0, lsl #16
    3488:	002c2e50 	eoreq	r2, ip, r0, asr lr
    348c:	00322608 	eorseq	r2, r2, r8, lsl #12
    3490:	91000308 	tstls	r0, r8, lsl #6
    3494:	32267edc 	eorcc	r7, r6, #220, 28	; 0xdc0
    3498:	32280800 	eorcc	r0, r8, #0, 16
    349c:	00030800 	andeq	r0, r3, r0, lsl #16
    34a0:	007edc7d 	rsbseq	sp, lr, sp, ror ip
	...
    34ac:	0608002c 	streq	r0, [r8], -ip, lsr #32
    34b0:	0108002c 	tsteq	r8, ip, lsr #32
    34b4:	2c065100 	stfcss	f5, [r6], {-0}
    34b8:	2c2e0800 	stccs	8, cr0, [lr], #-0
    34bc:	00010800 	andeq	r0, r1, r0, lsl #16
    34c0:	002c2e50 	eoreq	r2, ip, r0, asr lr
    34c4:	00322608 	eorseq	r2, r2, r8, lsl #12
    34c8:	91000308 	tstls	r0, r8, lsl #6
    34cc:	32267edc 	eorcc	r7, r6, #220, 28	; 0xdc0
    34d0:	32280800 	eorcc	r0, r8, #0, 16
    34d4:	00030800 	andeq	r0, r3, r0, lsl #16
    34d8:	007edc7d 	rsbseq	sp, lr, sp, ror ip
    34dc:	00000000 	andeq	r0, r0, r0
    34e0:	fc000000 	stc2	0, cr0, [r0], {-0}
    34e4:	0408002b 	streq	r0, [r8], #-43	; 0x2b
    34e8:	0408002c 	streq	r0, [r8], #-44	; 0x2c
    34ec:	7fa09100 	svcvc	0x00a09100
    34f0:	002c049f 	mlaeq	ip, pc, r4, r0	; <UNPREDICTABLE>
    34f4:	00322608 	eorseq	r2, r2, r8, lsl #12
    34f8:	56000108 	strpl	r0, [r0], -r8, lsl #2
    34fc:	08003226 	stmdaeq	r0, {r1, r2, r5, r9, ip, sp}
    3500:	08003228 	stmdaeq	r0, {r3, r5, r9, ip, sp}
    3504:	a07d0004 	rsbsge	r0, sp, r4
    3508:	00009f7f 	andeq	r9, r0, pc, ror pc
    350c:	00000000 	andeq	r0, r0, r0
    3510:	2c000000 	stccs	0, cr0, [r0], {-0}
    3514:	2c060800 	stccs	8, cr0, [r6], {-0}
    3518:	00020800 	andeq	r0, r2, r0, lsl #16
    351c:	2c069f30 	stccs	15, cr9, [r6], {48}	; 0x30
    3520:	2c0e0800 	stccs	8, cr0, [lr], {-0}
    3524:	00050800 	andeq	r0, r5, r0, lsl #16
    3528:	25380072 	ldrcs	r0, [r8, #-114]!	; 0x72
    352c:	002c0e9f 	mlaeq	ip, pc, lr, r0	; <UNPREDICTABLE>
    3530:	002c4a08 	eoreq	r4, ip, r8, lsl #20
    3534:	52000108 	andpl	r0, r0, #8, 2
	...
    3540:	08002c00 	stmdaeq	r0, {sl, fp, sp}
    3544:	08002c06 	stmdaeq	r0, {r1, r2, sl, fp, sp}
    3548:	9f300002 	svcls	0x00300002
    354c:	08002c06 	stmdaeq	r0, {r1, r2, sl, fp, sp}
    3550:	08002c1a 	stmdaeq	r0, {r1, r3, r4, sl, fp, sp}
    3554:	2c530001 	mrrccs	0, 0, r0, r3, cr1
    3558:	3008002c 	andcc	r0, r8, ip, lsr #32
    355c:	0208002c 	andeq	r0, r8, #44	; 0x2c
    3560:	309f3000 	addscc	r3, pc, r0
    3564:	3808002c 	stmdacc	r8, {r2, r3, r5}
    3568:	0808002c 	stmdaeq	r8, {r2, r3, r5}
    356c:	91007300 	mrsls	r7, LR_irq
    3570:	60231c00 	eorvs	r1, r3, r0, lsl #24
    3574:	002c389f 	mlaeq	ip, pc, r8, r3	; <UNPREDICTABLE>
    3578:	002c3e08 	eoreq	r3, ip, r8, lsl #28
    357c:	73000808 	movwvc	r0, #2056	; 0x808
    3580:	1c009100 	stfned	f1, [r0], {-0}
    3584:	3e9f5f23 	cdpcc	15, 9, cr5, cr15, cr3, {1}
    3588:	4408002c 	strmi	r0, [r8], #-44	; 0x2c
    358c:	0808002c 	stmdaeq	r8, {r2, r3, r5}
    3590:	91007300 	mrsls	r7, LR_irq
    3594:	60231c00 	eorvs	r1, r3, r0, lsl #24
    3598:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    359c:	00000000 	andeq	r0, r0, r0
    35a0:	002c4a00 	eoreq	r4, ip, r0, lsl #20
    35a4:	002c9608 	eoreq	r9, ip, r8, lsl #12
    35a8:	53000108 	movwpl	r0, #264	; 0x108
    35ac:	08002ca2 	stmdaeq	r0, {r1, r5, r7, sl, fp, sp}
    35b0:	08002cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, sp}
    35b4:	00520001 	subseq	r0, r2, r1
    35b8:	00000000 	andeq	r0, r0, r0
    35bc:	4a000000 	bmi	35c4 <__Stack_Size+0x2dc4>
    35c0:	a208002c 	andge	r0, r8, #44	; 0x2c
    35c4:	0108002c 	tsteq	r8, ip, lsr #32
    35c8:	2ca25400 	cfstrscs	mvf5, [r2]
    35cc:	2caa0800 	stccs	8, cr0, [sl]
    35d0:	00020800 	andeq	r0, r2, r0, lsl #16
    35d4:	2caa9f30 	stccs	15, cr9, [sl], #192	; 0xc0
    35d8:	2cb20800 	ldccs	8, cr0, [r2]
    35dc:	00090800 	andeq	r0, r9, r0, lsl #16
    35e0:	00910073 	addseq	r0, r1, r3, ror r0
    35e4:	01a0231c 	lsleq	r2, ip, r3
    35e8:	002cb29f 	mlaeq	ip, pc, r2, fp	; <UNPREDICTABLE>
    35ec:	002cb808 	eoreq	fp, ip, r8, lsl #16
    35f0:	73000908 	movwvc	r0, #2312	; 0x908
    35f4:	1c009100 	stfned	f1, [r0], {-0}
    35f8:	9f019f23 	svcls	0x00019f23
    35fc:	08002cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp, sp}
    3600:	08002cbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sl, fp, sp}
    3604:	00730009 	rsbseq	r0, r3, r9
    3608:	231c0091 	tstcs	ip, #145	; 0x91
    360c:	009f01a0 	addseq	r0, pc, r0, lsr #3
    3610:	00000000 	andeq	r0, r0, r0
    3614:	4c000000 	stcmi	0, cr0, [r0], {-0}
    3618:	5008002c 	andpl	r0, r8, ip, lsr #32
    361c:	0208002c 	andeq	r0, r8, #44	; 0x2c
    3620:	509f3000 	addspl	r3, pc, r0
    3624:	5a08002c 	bpl	2036dc <__Stack_Size+0x202edc>
    3628:	0108002c 	tsteq	r8, ip, lsr #32
    362c:	2c5a5200 	lfmcs	f5, 2, [sl], {-0}
    3630:	2c600800 	stclcs	8, cr0, [r0], #-0
    3634:	00030800 	andeq	r0, r3, r0, lsl #16
    3638:	609f7f72 	addsvs	r7, pc, r2, ror pc	; <UNPREDICTABLE>
    363c:	6608002c 	strvs	r0, [r8], -ip, lsr #32
    3640:	0108002c 	tsteq	r8, ip, lsr #32
    3644:	2c665200 	sfmcs	f5, 2, [r6], #-0
    3648:	2c720800 	ldclcs	8, cr0, [r2], #-0
    364c:	00030800 	andeq	r0, r3, r0, lsl #16
    3650:	729f0172 	addsvc	r0, pc, #-2147483620	; 0x8000001c
    3654:	7a08002c 	bvc	20370c <__Stack_Size+0x202f0c>
    3658:	0808002c 	stmdaeq	r8, {r2, r3, r5}
    365c:	91007200 	mrsls	r7, R8_usr
    3660:	61231c00 	teqvs	r3, r0, lsl #24
    3664:	002c7a9f 	mlaeq	ip, pc, sl, r7	; <UNPREDICTABLE>
    3668:	002c8408 	eoreq	r8, ip, r8, lsl #8
    366c:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    3670:	1c009100 	stfned	f1, [r0], {-0}
    3674:	849f6023 	ldrhi	r6, [pc], #35	; 367c <__Stack_Size+0x2e7c>
    3678:	8608002c 	strhi	r0, [r8], -ip, lsr #32
    367c:	0808002c 	stmdaeq	r8, {r2, r3, r5}
    3680:	91007200 	mrsls	r7, R8_usr
    3684:	61231c00 	teqvs	r3, r0, lsl #24
    3688:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    368c:	00000000 	andeq	r0, r0, r0
    3690:	002cc400 	eoreq	ip, ip, r0, lsl #8
    3694:	002d1208 	eoreq	r1, sp, r8, lsl #4
    3698:	53000108 	movwpl	r0, #264	; 0x108
    369c:	08002d22 	stmdaeq	r0, {r1, r5, r8, sl, fp, sp}
    36a0:	08002d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, sp}
    36a4:	00520001 	subseq	r0, r2, r1
    36a8:	00000000 	andeq	r0, r0, r0
    36ac:	c4000000 	strgt	r0, [r0], #-0
    36b0:	2208002c 	andcs	r0, r8, #44	; 0x2c
    36b4:	0108002d 	tsteq	r8, sp, lsr #32
    36b8:	2d225400 	cfstrscs	mvf5, [r2, #-0]
    36bc:	2d2e0800 	stccs	8, cr0, [lr, #-0]
    36c0:	00020800 	andeq	r0, r2, r0, lsl #16
    36c4:	2d2e9f30 	stccs	15, cr9, [lr, #-192]!	; 0xffffff40
    36c8:	2d360800 	ldccs	8, cr0, [r6, #-0]
    36cc:	00080800 	andeq	r0, r8, r0, lsl #16
    36d0:	00910073 	addseq	r0, r1, r3, ror r0
    36d4:	9f40231c 	svcls	0x0040231c
    36d8:	08002d36 	stmdaeq	r0, {r1, r2, r4, r5, r8, sl, fp, sp}
    36dc:	08002d3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, fp, sp}
    36e0:	00730008 	rsbseq	r0, r3, r8
    36e4:	231c0091 	tstcs	ip, #145	; 0x91
    36e8:	2d3c9f3f 	ldccs	15, cr9, [ip, #-252]!	; 0xffffff04
    36ec:	2d4c0800 	stclcs	8, cr0, [ip, #-0]
    36f0:	00080800 	andeq	r0, r8, r0, lsl #16
    36f4:	00910073 	addseq	r0, r1, r3, ror r0
    36f8:	9f40231c 	svcls	0x0040231c
	...
    3704:	08002cc6 	stmdaeq	r0, {r1, r2, r6, r7, sl, fp, sp}
    3708:	08002cca 	stmdaeq	r0, {r1, r3, r6, r7, sl, fp, sp}
    370c:	9f300002 	svcls	0x00300002
    3710:	08002cca 	stmdaeq	r0, {r1, r3, r6, r7, sl, fp, sp}
    3714:	08002cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, sp}
    3718:	d8520001 	ldmdale	r2, {r0}^
    371c:	de08002c 	cdple	0, 0, cr0, cr8, cr12, {1}
    3720:	0308002c 	movweq	r0, #32812	; 0x802c
    3724:	9f7f7200 	svcls	0x007f7200
    3728:	08002cde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, fp, sp}
    372c:	08002ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp, sp}
    3730:	e4520001 	ldrb	r0, [r2], #-1
    3734:	f008002c 			; <UNDEFINED> instruction: 0xf008002c
    3738:	0308002c 	movweq	r0, #32812	; 0x802c
    373c:	9f017200 	svcls	0x00017200
    3740:	08002cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, sp}
    3744:	08002cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, sp}
    3748:	00720009 	rsbseq	r0, r2, r9
    374c:	231c0091 	tstcs	ip, #145	; 0x91
    3750:	f89f01a1 			; <UNDEFINED> instruction: 0xf89f01a1
    3754:	0208002c 	andeq	r0, r8, #44	; 0x2c
    3758:	0908002d 	stmdbeq	r8, {r0, r2, r3, r5}
    375c:	91007200 	mrsls	r7, R8_usr
    3760:	a0231c00 	eorge	r1, r3, r0, lsl #24
    3764:	2d029f01 	stccs	15, cr9, [r2, #-4]
    3768:	2d040800 	stccs	8, cr0, [r4, #-0]
    376c:	00090800 	andeq	r0, r9, r0, lsl #16
    3770:	00910072 	addseq	r0, r1, r2, ror r0
    3774:	01a1231c 			; <UNDEFINED> instruction: 0x01a1231c
    3778:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    377c:	00000000 	andeq	r0, r0, r0
    3780:	002d4c00 	eoreq	r4, sp, r0, lsl #24
    3784:	002d5208 	eoreq	r5, sp, r8, lsl #4
    3788:	30000208 	andcc	r0, r0, r8, lsl #4
    378c:	002d529f 	mlaeq	sp, pc, r2, r5	; <UNPREDICTABLE>
    3790:	002dac08 	eoreq	sl, sp, r8, lsl #24
    3794:	53000108 	movwpl	r0, #264	; 0x108
    3798:	08002db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, sp}
    379c:	08002dd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, fp, sp}
    37a0:	00520001 	subseq	r0, r2, r1
    37a4:	00000000 	andeq	r0, r0, r0
    37a8:	4c000000 	stcmi	0, cr0, [r0], {-0}
    37ac:	5208002d 	andpl	r0, r8, #45	; 0x2d
    37b0:	0208002d 	andeq	r0, r8, #45	; 0x2d
    37b4:	529f3000 	addspl	r3, pc, #0
    37b8:	b808002d 	stmdalt	r8, {r0, r2, r3, r5}
    37bc:	0108002d 	tsteq	r8, sp, lsr #32
    37c0:	2db85900 	ldccs	9, cr5, [r8]
    37c4:	2dbe0800 	ldccs	8, cr0, [lr]
    37c8:	00020800 	andeq	r0, r2, r0, lsl #16
    37cc:	2dbe9f30 	ldccs	15, cr9, [lr, #192]!	; 0xc0
    37d0:	2dc80800 	stclcs	8, cr0, [r8]
    37d4:	00090800 	andeq	r0, r9, r0, lsl #16
    37d8:	00910073 	addseq	r0, r1, r3, ror r0
    37dc:	01a0231c 	lsleq	r2, ip, r3
    37e0:	002dc89f 	mlaeq	sp, pc, r8, ip	; <UNPREDICTABLE>
    37e4:	002dce08 	eoreq	ip, sp, r8, lsl #28
    37e8:	73000908 	movwvc	r0, #2312	; 0x908
    37ec:	1c009100 	stfned	f1, [r0], {-0}
    37f0:	9f019f23 	svcls	0x00019f23
    37f4:	08002dce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, fp, sp}
    37f8:	08002dd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, fp, sp}
    37fc:	00730009 	rsbseq	r0, r3, r9
    3800:	231c0091 	tstcs	ip, #145	; 0x91
    3804:	009f01a0 	addseq	r0, pc, r0, lsr #3
    3808:	00000000 	andeq	r0, r0, r0
    380c:	54000000 	strpl	r0, [r0], #-0
    3810:	5a08002d 	bpl	2038cc <__Stack_Size+0x2030cc>
    3814:	0208002d 	andeq	r0, r8, #45	; 0x2d
    3818:	5a9f3000 	bpl	fe7cf820 <BootRAM+0xd73ffc1>
    381c:	6408002d 	strvs	r0, [r8], #-45	; 0x2d
    3820:	0108002d 	tsteq	r8, sp, lsr #32
    3824:	2d645200 	sfmcs	f5, 2, [r4, #-0]
    3828:	2d6a0800 	stclcs	8, cr0, [sl, #-0]
    382c:	00030800 	andeq	r0, r3, r0, lsl #16
    3830:	6a9f7f72 	bvs	fe7e3600 <BootRAM+0xd753da1>
    3834:	7008002d 	andvc	r0, r8, sp, lsr #32
    3838:	0108002d 	tsteq	r8, sp, lsr #32
    383c:	2d705200 	lfmcs	f5, 2, [r0, #-0]
    3840:	2d800800 	stccs	8, cr0, [r0]
    3844:	00030800 	andeq	r0, r3, r0, lsl #16
    3848:	809f0172 	addshi	r0, pc, r2, ror r1	; <UNPREDICTABLE>
    384c:	8808002d 	stmdahi	r8, {r0, r2, r3, r5}
    3850:	0808002d 	stmdaeq	r8, {r0, r2, r3, r5}
    3854:	91007200 	mrsls	r7, R8_usr
    3858:	41231c00 	teqmi	r3, r0, lsl #24
    385c:	002d889f 	mlaeq	sp, pc, r8, r8	; <UNPREDICTABLE>
    3860:	002d9208 	eoreq	r9, sp, r8, lsl #4
    3864:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    3868:	1c009100 	stfned	f1, [r0], {-0}
    386c:	929f4023 	addsls	r4, pc, #35	; 0x23
    3870:	9408002d 	strls	r0, [r8], #-45	; 0x2d
    3874:	0808002d 	stmdaeq	r8, {r0, r2, r3, r5}
    3878:	91007200 	mrsls	r7, R8_usr
    387c:	41231c00 	teqmi	r3, r0, lsl #24
    3880:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3884:	00000000 	andeq	r0, r0, r0
    3888:	002dd600 	eoreq	sp, sp, r0, lsl #12
    388c:	002e3008 	eoreq	r3, lr, r8
    3890:	53000108 	movwpl	r0, #264	; 0x108
    3894:	08002e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, sp}
    3898:	08002e5a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, fp, sp}
    389c:	00520001 	subseq	r0, r2, r1
    38a0:	00000000 	andeq	r0, r0, r0
    38a4:	d6000000 	strle	r0, [r0], -r0
    38a8:	3c08002d 	stccc	0, cr0, [r8], {45}	; 0x2d
    38ac:	0108002e 	tsteq	r8, lr, lsr #32
    38b0:	2e3c5900 	cdpcs	9, 3, cr5, cr12, cr0, {0}
    38b4:	2e420800 	cdpcs	8, 4, cr0, cr2, cr0, {0}
    38b8:	00020800 	andeq	r0, r2, r0, lsl #16
    38bc:	2e429f30 	mcrcs	15, 2, r9, cr2, cr0, {1}
    38c0:	2e500800 	cdpcs	8, 5, cr0, cr0, cr0, {0}
    38c4:	00080800 	andeq	r0, r8, r0, lsl #16
    38c8:	00910073 	addseq	r0, r1, r3, ror r0
    38cc:	9f40231c 	svcls	0x0040231c
    38d0:	08002e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, sp}
    38d4:	08002e56 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, fp, sp}
    38d8:	00730008 	rsbseq	r0, r3, r8
    38dc:	231c0091 	tstcs	ip, #145	; 0x91
    38e0:	2e569f3f 	mrccs	15, 2, r9, cr6, cr15, {1}
    38e4:	2e660800 	cdpcs	8, 6, cr0, cr6, cr0, {0}
    38e8:	00080800 	andeq	r0, r8, r0, lsl #16
    38ec:	00910073 	addseq	r0, r1, r3, ror r0
    38f0:	9f40231c 	svcls	0x0040231c
	...
    38fc:	08002dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, sp}
    3900:	08002dde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sl, fp, sp}
    3904:	9f300002 	svcls	0x00300002
    3908:	08002dde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sl, fp, sp}
    390c:	08002dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, sp}
    3910:	ec520001 	mrrc	0, 0, r0, r2, cr1
    3914:	f208002d 	vhadd.s8	d0, d8, d29
    3918:	0308002d 	movweq	r0, #32813	; 0x802d
    391c:	9f7f7200 	svcls	0x007f7200
    3920:	08002df2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, sl, fp, sp}
    3924:	08002df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp, sp}
    3928:	f8520001 			; <UNDEFINED> instruction: 0xf8520001
    392c:	0808002d 	stmdaeq	r8, {r0, r2, r3, r5}
    3930:	0308002e 	movweq	r0, #32814	; 0x802e
    3934:	9f017200 	svcls	0x00017200
    3938:	08002e08 	stmdaeq	r0, {r3, r9, sl, fp, sp}
    393c:	08002e10 	stmdaeq	r0, {r4, r9, sl, fp, sp}
    3940:	00720009 	rsbseq	r0, r2, r9
    3944:	231c0091 	tstcs	ip, #145	; 0x91
    3948:	109f01a1 	addsne	r0, pc, r1, lsr #3
    394c:	1a08002e 	bne	203a0c <__Stack_Size+0x20320c>
    3950:	0908002e 	stmdbeq	r8, {r1, r2, r3, r5}
    3954:	91007200 	mrsls	r7, R8_usr
    3958:	a0231c00 	eorge	r1, r3, r0, lsl #24
    395c:	2e1a9f01 	cdpcs	15, 1, cr9, cr10, cr1, {0}
    3960:	2e1c0800 	cdpcs	8, 1, cr0, cr12, cr0, {0}
    3964:	00090800 	andeq	r0, r9, r0, lsl #16
    3968:	00910072 	addseq	r0, r1, r2, ror r0
    396c:	01a1231c 			; <UNDEFINED> instruction: 0x01a1231c
    3970:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3974:	00000000 	andeq	r0, r0, r0
    3978:	002e6c00 	eoreq	r6, lr, r0, lsl #24
    397c:	002ebc08 	eoreq	fp, lr, r8, lsl #24
    3980:	53000108 	movwpl	r0, #264	; 0x108
    3984:	08002ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, sp}
    3988:	08002ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, sp}
    398c:	00520001 	subseq	r0, r2, r1
    3990:	00000000 	andeq	r0, r0, r0
    3994:	6c000000 	stcvs	0, cr0, [r0], {-0}
    3998:	c808002e 	stmdagt	r8, {r1, r2, r3, r5}
    399c:	0108002e 	tsteq	r8, lr, lsr #32
    39a0:	2ec85400 	cdpcs	4, 12, cr5, cr8, cr0, {0}
    39a4:	2ece0800 	cdpcs	8, 12, cr0, cr14, cr0, {0}
    39a8:	00020800 	andeq	r0, r2, r0, lsl #16
    39ac:	2ece9f30 	mcrcs	15, 6, r9, cr14, cr0, {1}
    39b0:	2ed60800 	cdpcs	8, 13, cr0, cr6, cr0, {0}
    39b4:	00090800 	andeq	r0, r9, r0, lsl #16
    39b8:	00910073 	addseq	r0, r1, r3, ror r0
    39bc:	01a0231c 	lsleq	r2, ip, r3
    39c0:	002ed69f 	mlaeq	lr, pc, r6, sp	; <UNPREDICTABLE>
    39c4:	002edc08 	eoreq	sp, lr, r8, lsl #24
    39c8:	73000908 	movwvc	r0, #2312	; 0x908
    39cc:	1c009100 	stfned	f1, [r0], {-0}
    39d0:	9f019f23 	svcls	0x00019f23
    39d4:	08002edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, sp}
    39d8:	08002ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, sp}
    39dc:	00730009 	rsbseq	r0, r3, r9
    39e0:	231c0091 	tstcs	ip, #145	; 0x91
    39e4:	009f01a0 	addseq	r0, pc, r0, lsr #3
    39e8:	00000000 	andeq	r0, r0, r0
    39ec:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    39f0:	7208002e 	andvc	r0, r8, #46	; 0x2e
    39f4:	0208002e 	andeq	r0, r8, #46	; 0x2e
    39f8:	729f3000 	addsvc	r3, pc, #0
    39fc:	7c08002e 	stcvc	0, cr0, [r8], {46}	; 0x2e
    3a00:	0108002e 	tsteq	r8, lr, lsr #32
    3a04:	2e7c5200 	cdpcs	2, 7, cr5, cr12, cr0, {0}
    3a08:	2e820800 	cdpcs	8, 8, cr0, cr2, cr0, {0}
    3a0c:	00030800 	andeq	r0, r3, r0, lsl #16
    3a10:	829f7f72 	addshi	r7, pc, #456	; 0x1c8
    3a14:	8808002e 	stmdahi	r8, {r1, r2, r3, r5}
    3a18:	0108002e 	tsteq	r8, lr, lsr #32
    3a1c:	2e885200 	cdpcs	2, 8, cr5, cr8, cr0, {0}
    3a20:	2e940800 	cdpcs	8, 9, cr0, cr4, cr0, {0}
    3a24:	00030800 	andeq	r0, r3, r0, lsl #16
    3a28:	949f0172 	ldrls	r0, [pc], #370	; 3a30 <__Stack_Size+0x3230>
    3a2c:	9c08002e 	stcls	0, cr0, [r8], {46}	; 0x2e
    3a30:	0808002e 	stmdaeq	r8, {r1, r2, r3, r5}
    3a34:	91007200 	mrsls	r7, R8_usr
    3a38:	41231c00 	teqmi	r3, r0, lsl #24
    3a3c:	002e9c9f 	mlaeq	lr, pc, ip, r9	; <UNPREDICTABLE>
    3a40:	002ea608 	eoreq	sl, lr, r8, lsl #12
    3a44:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    3a48:	1c009100 	stfned	f1, [r0], {-0}
    3a4c:	a69f4023 	ldrge	r4, [pc], r3, lsr #32
    3a50:	a808002e 	stmdage	r8, {r1, r2, r3, r5}
    3a54:	0808002e 	stmdaeq	r8, {r1, r2, r3, r5}
    3a58:	91007200 	mrsls	r7, R8_usr
    3a5c:	41231c00 	teqmi	r3, r0, lsl #24
    3a60:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a64:	00000000 	andeq	r0, r0, r0
    3a68:	002ee800 	eoreq	lr, lr, r0, lsl #16
    3a6c:	002f3808 	eoreq	r3, pc, r8, lsl #16
    3a70:	53000108 	movwpl	r0, #264	; 0x108
    3a74:	08002f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, sp}
    3a78:	08002f66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, fp, sp}
    3a7c:	00520001 	subseq	r0, r2, r1
    3a80:	00000000 	andeq	r0, r0, r0
    3a84:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    3a88:	4408002e 	strmi	r0, [r8], #-46	; 0x2e
    3a8c:	0108002f 	tsteq	r8, pc, lsr #32
    3a90:	2f445400 	svccs	0x00445400
    3a94:	2f4a0800 	svccs	0x004a0800
    3a98:	00020800 	andeq	r0, r2, r0, lsl #16
    3a9c:	2f4a9f30 	svccs	0x004a9f30
    3aa0:	2f540800 	svccs	0x00540800
    3aa4:	00080800 	andeq	r0, r8, r0, lsl #16
    3aa8:	00910073 	addseq	r0, r1, r3, ror r0
    3aac:	9f40231c 	svcls	0x0040231c
    3ab0:	08002f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, sp}
    3ab4:	08002f5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sl, fp, sp}
    3ab8:	00730008 	rsbseq	r0, r3, r8
    3abc:	231c0091 	tstcs	ip, #145	; 0x91
    3ac0:	2f5a9f3f 	svccs	0x005a9f3f
    3ac4:	2f600800 	svccs	0x00600800
    3ac8:	00080800 	andeq	r0, r8, r0, lsl #16
    3acc:	00910073 	addseq	r0, r1, r3, ror r0
    3ad0:	9f40231c 	svcls	0x0040231c
	...
    3adc:	08002eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, sp}
    3ae0:	08002ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, sp}
    3ae4:	9f300002 	svcls	0x00300002
    3ae8:	08002ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, sp}
    3aec:	08002efe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, sp}
    3af0:	fe520001 	cdp2	0, 5, cr0, cr2, cr1, {0}
    3af4:	0408002e 	streq	r0, [r8], #-46	; 0x2e
    3af8:	0308002f 	movweq	r0, #32815	; 0x802f
    3afc:	9f7f7200 	svcls	0x007f7200
    3b00:	08002f04 	stmdaeq	r0, {r2, r8, r9, sl, fp, sp}
    3b04:	08002f0a 	stmdaeq	r0, {r1, r3, r8, r9, sl, fp, sp}
    3b08:	0a520001 	beq	1483b14 <__Stack_Size+0x1483314>
    3b0c:	1608002f 	strne	r0, [r8], -pc, lsr #32
    3b10:	0308002f 	movweq	r0, #32815	; 0x802f
    3b14:	9f017200 	svcls	0x00017200
    3b18:	08002f16 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl, fp, sp}
    3b1c:	08002f1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, fp, sp}
    3b20:	00720009 	rsbseq	r0, r2, r9
    3b24:	231c0091 	tstcs	ip, #145	; 0x91
    3b28:	1e9f01a1 	fmlne<illegal precision>p	f0, f7, f1
    3b2c:	2808002f 	stmdacs	r8, {r0, r1, r2, r3, r5}
    3b30:	0908002f 	stmdbeq	r8, {r0, r1, r2, r3, r5}
    3b34:	91007200 	mrsls	r7, R8_usr
    3b38:	a0231c00 	eorge	r1, r3, r0, lsl #24
    3b3c:	2f289f01 	svccs	0x00289f01
    3b40:	2f2a0800 	svccs	0x002a0800
    3b44:	00090800 	andeq	r0, r9, r0, lsl #16
    3b48:	00910072 	addseq	r0, r1, r2, ror r0
    3b4c:	01a1231c 			; <UNDEFINED> instruction: 0x01a1231c
    3b50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b54:	00000000 	andeq	r0, r0, r0
    3b58:	002f6600 	eoreq	r6, pc, r0, lsl #12
    3b5c:	002fb208 	eoreq	fp, pc, r8, lsl #4
    3b60:	53000108 	movwpl	r0, #264	; 0x108
    3b64:	08002fbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, sl, fp, sp}
    3b68:	08002fde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, fp, sp}
    3b6c:	00520001 	subseq	r0, r2, r1
    3b70:	00000000 	andeq	r0, r0, r0
    3b74:	66000000 	strvs	r0, [r0], -r0
    3b78:	be08002f 	cdplt	0, 0, cr0, cr8, cr15, {1}
    3b7c:	0108002f 	tsteq	r8, pc, lsr #32
    3b80:	2fbe5400 	svccs	0x00be5400
    3b84:	2fc40800 	svccs	0x00c40800
    3b88:	00020800 	andeq	r0, r2, r0, lsl #16
    3b8c:	2fc49f30 	svccs	0x00c49f30
    3b90:	2fcc0800 	svccs	0x00cc0800
    3b94:	00090800 	andeq	r0, r9, r0, lsl #16
    3b98:	00910073 	addseq	r0, r1, r3, ror r0
    3b9c:	01a0231c 	lsleq	r2, ip, r3
    3ba0:	002fcc9f 	mlaeq	pc, pc, ip, ip	; <UNPREDICTABLE>
    3ba4:	002fd208 	eoreq	sp, pc, r8, lsl #4
    3ba8:	73000908 	movwvc	r0, #2312	; 0x908
    3bac:	1c009100 	stfned	f1, [r0], {-0}
    3bb0:	9f019f23 	svcls	0x00019f23
    3bb4:	08002fd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, fp, sp}
    3bb8:	08002fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp, sp}
    3bbc:	00730009 	rsbseq	r0, r3, r9
    3bc0:	231c0091 	tstcs	ip, #145	; 0x91
    3bc4:	009f01a0 	addseq	r0, pc, r0, lsr #3
    3bc8:	00000000 	andeq	r0, r0, r0
    3bcc:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    3bd0:	6c08002f 	stcvs	0, cr0, [r8], {47}	; 0x2f
    3bd4:	0208002f 	andeq	r0, r8, #47	; 0x2f
    3bd8:	6c9f3000 	ldcvs	0, cr3, [pc], {0}
    3bdc:	7608002f 	strvc	r0, [r8], -pc, lsr #32
    3be0:	0108002f 	tsteq	r8, pc, lsr #32
    3be4:	2f765200 	svccs	0x00765200
    3be8:	2f7c0800 	svccs	0x007c0800
    3bec:	00030800 	andeq	r0, r3, r0, lsl #16
    3bf0:	7c9f7f72 	ldcvc	15, cr7, [pc], {114}	; 0x72
    3bf4:	8208002f 	andhi	r0, r8, #47	; 0x2f
    3bf8:	0108002f 	tsteq	r8, pc, lsr #32
    3bfc:	2f825200 	svccs	0x00825200
    3c00:	2f8e0800 	svccs	0x008e0800
    3c04:	00030800 	andeq	r0, r3, r0, lsl #16
    3c08:	8e9f0172 	mrchi	1, 4, r0, cr15, cr2, {3}
    3c0c:	9608002f 	strls	r0, [r8], -pc, lsr #32
    3c10:	0808002f 	stmdaeq	r8, {r0, r1, r2, r3, r5}
    3c14:	91007200 	mrsls	r7, R8_usr
    3c18:	41231c00 	teqmi	r3, r0, lsl #24
    3c1c:	002f969f 	mlaeq	pc, pc, r6, r9	; <UNPREDICTABLE>
    3c20:	002fa008 	eoreq	sl, pc, r8
    3c24:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    3c28:	1c009100 	stfned	f1, [r0], {-0}
    3c2c:	a09f4023 	addsge	r4, pc, r3, lsr #32
    3c30:	a208002f 	andge	r0, r8, #47	; 0x2f
    3c34:	0808002f 	stmdaeq	r8, {r0, r1, r2, r3, r5}
    3c38:	91007200 	mrsls	r7, R8_usr
    3c3c:	41231c00 	teqmi	r3, r0, lsl #24
    3c40:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c44:	00000000 	andeq	r0, r0, r0
    3c48:	002fde00 	eoreq	sp, pc, r0, lsl #28
    3c4c:	00302e08 	eorseq	r2, r0, r8, lsl #28
    3c50:	53000108 	movwpl	r0, #264	; 0x108
    3c54:	0800303e 	stmdaeq	r0, {r1, r2, r3, r4, r5, ip, sp}
    3c58:	0800305e 	stmdaeq	r0, {r1, r2, r3, r4, r6, ip, sp}
    3c5c:	00520001 	subseq	r0, r2, r1
    3c60:	00000000 	andeq	r0, r0, r0
    3c64:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    3c68:	3e08002f 	cdpcc	0, 0, cr0, cr8, cr15, {1}
    3c6c:	01080030 	tsteq	r8, r0, lsr r0
    3c70:	303e5400 	eorscc	r5, lr, r0, lsl #8
    3c74:	30440800 	subcc	r0, r4, r0, lsl #16
    3c78:	00020800 	andeq	r0, r2, r0, lsl #16
    3c7c:	30449f30 	subcc	r9, r4, r0, lsr pc
    3c80:	304c0800 	subcc	r0, ip, r0, lsl #16
    3c84:	00080800 	andeq	r0, r8, r0, lsl #16
    3c88:	00910073 	addseq	r0, r1, r3, ror r0
    3c8c:	9f40231c 	svcls	0x0040231c
    3c90:	0800304c 	stmdaeq	r0, {r2, r3, r6, ip, sp}
    3c94:	08003052 	stmdaeq	r0, {r1, r4, r6, ip, sp}
    3c98:	00730008 	rsbseq	r0, r3, r8
    3c9c:	231c0091 	tstcs	ip, #145	; 0x91
    3ca0:	30529f3f 	subscc	r9, r2, pc, lsr pc
    3ca4:	30580800 	subscc	r0, r8, r0, lsl #16
    3ca8:	00080800 	andeq	r0, r8, r0, lsl #16
    3cac:	00910073 	addseq	r0, r1, r3, ror r0
    3cb0:	9f40231c 	svcls	0x0040231c
	...
    3cbc:	08002fe2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, sl, fp, sp}
    3cc0:	08002fe6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, fp, sp}
    3cc4:	9f300002 	svcls	0x00300002
    3cc8:	08002fe6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, fp, sp}
    3ccc:	08002ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp, sp}
    3cd0:	f4520001 			; <UNDEFINED> instruction: 0xf4520001
    3cd4:	fa08002f 	blx	203d98 <__Stack_Size+0x203598>
    3cd8:	0308002f 	movweq	r0, #32815	; 0x802f
    3cdc:	9f7f7200 	svcls	0x007f7200
    3ce0:	08002ffa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp}
    3ce4:	08003000 	stmdaeq	r0, {ip, sp}
    3ce8:	00520001 	subseq	r0, r2, r1
    3cec:	0c080030 	stceq	0, cr0, [r8], {48}	; 0x30
    3cf0:	03080030 	movweq	r0, #32816	; 0x8030
    3cf4:	9f017200 	svcls	0x00017200
    3cf8:	0800300c 	stmdaeq	r0, {r2, r3, ip, sp}
    3cfc:	08003014 	stmdaeq	r0, {r2, r4, ip, sp}
    3d00:	00720009 	rsbseq	r0, r2, r9
    3d04:	231c0091 	tstcs	ip, #145	; 0x91
    3d08:	149f01a1 	ldrne	r0, [pc], #417	; 3d10 <__Stack_Size+0x3510>
    3d0c:	1e080030 	mcrne	0, 0, r0, cr8, cr0, {1}
    3d10:	09080030 	stmdbeq	r8, {r4, r5}
    3d14:	91007200 	mrsls	r7, R8_usr
    3d18:	a0231c00 	eorge	r1, r3, r0, lsl #24
    3d1c:	301e9f01 	andscc	r9, lr, r1, lsl #30
    3d20:	30200800 	eorcc	r0, r0, r0, lsl #16
    3d24:	00090800 	andeq	r0, r9, r0, lsl #16
    3d28:	00910072 	addseq	r0, r1, r2, ror r0
    3d2c:	01a1231c 			; <UNDEFINED> instruction: 0x01a1231c
    3d30:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3d34:	00000000 	andeq	r0, r0, r0
    3d38:	00305e00 	eorseq	r5, r0, r0, lsl #28
    3d3c:	0030a808 	eorseq	sl, r0, r8, lsl #16
    3d40:	53000108 	movwpl	r0, #264	; 0x108
    3d44:	080030b4 	stmdaeq	r0, {r2, r4, r5, r7, ip, sp}
    3d48:	080030ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, ip, sp}
    3d4c:	00520001 	subseq	r0, r2, r1
    3d50:	00000000 	andeq	r0, r0, r0
    3d54:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    3d58:	b4080030 	strlt	r0, [r8], #-48	; 0x30
    3d5c:	01080030 	tsteq	r8, r0, lsr r0
    3d60:	30b45400 	adcscc	r5, r4, r0, lsl #8
    3d64:	30ba0800 	adcscc	r0, sl, r0, lsl #16
    3d68:	00020800 	andeq	r0, r2, r0, lsl #16
    3d6c:	30ba9f30 	adcscc	r9, sl, r0, lsr pc
    3d70:	30c20800 	sbccc	r0, r2, r0, lsl #16
    3d74:	00090800 	andeq	r0, r9, r0, lsl #16
    3d78:	00910073 	addseq	r0, r1, r3, ror r0
    3d7c:	0180231c 	orreq	r2, r0, ip, lsl r3
    3d80:	0030c29f 	mlaseq	r0, pc, r2, ip	; <UNPREDICTABLE>
    3d84:	0030c808 	eorseq	ip, r0, r8, lsl #16
    3d88:	73000808 	movwvc	r0, #2056	; 0x808
    3d8c:	1c009100 	stfned	f1, [r0], {-0}
    3d90:	c89f7f23 	ldmgt	pc, {r0, r1, r5, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    3d94:	cc080030 	stcgt	0, cr0, [r8], {48}	; 0x30
    3d98:	09080030 	stmdbeq	r8, {r4, r5}
    3d9c:	91007300 	mrsls	r7, LR_irq
    3da0:	80231c00 	eorhi	r1, r3, r0, lsl #24
    3da4:	00009f01 	andeq	r9, r0, r1, lsl #30
    3da8:	00000000 	andeq	r0, r0, r0
    3dac:	30600000 	rsbcc	r0, r0, r0
    3db0:	30640800 	rsbcc	r0, r4, r0, lsl #16
    3db4:	00020800 	andeq	r0, r2, r0, lsl #16
    3db8:	30649f30 	rsbcc	r9, r4, r0, lsr pc
    3dbc:	306e0800 	rsbcc	r0, lr, r0, lsl #16
    3dc0:	00010800 	andeq	r0, r1, r0, lsl #16
    3dc4:	00306e52 	eorseq	r6, r0, r2, asr lr
    3dc8:	00307408 	eorseq	r7, r0, r8, lsl #8
    3dcc:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    3dd0:	30749f7f 	rsbscc	r9, r4, pc, ror pc
    3dd4:	307a0800 	rsbscc	r0, sl, r0, lsl #16
    3dd8:	00010800 	andeq	r0, r1, r0, lsl #16
    3ddc:	00307a52 	eorseq	r7, r0, r2, asr sl
    3de0:	00308608 	eorseq	r8, r0, r8, lsl #12
    3de4:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    3de8:	30869f01 	addcc	r9, r6, r1, lsl #30
    3dec:	308e0800 	addcc	r0, lr, r0, lsl #16
    3df0:	00080800 	andeq	r0, r8, r0, lsl #16
    3df4:	00910072 	addseq	r0, r1, r2, ror r0
    3df8:	9f61231c 	svcls	0x0061231c
    3dfc:	0800308e 	stmdaeq	r0, {r1, r2, r3, r7, ip, sp}
    3e00:	08003098 	stmdaeq	r0, {r3, r4, r7, ip, sp}
    3e04:	00720008 	rsbseq	r0, r2, r8
    3e08:	231c0091 	tstcs	ip, #145	; 0x91
    3e0c:	30989f60 	addscc	r9, r8, r0, ror #30
    3e10:	309a0800 	addscc	r0, sl, r0, lsl #16
    3e14:	00080800 	andeq	r0, r8, r0, lsl #16
    3e18:	00910072 	addseq	r0, r1, r2, ror r0
    3e1c:	9f61231c 	svcls	0x0061231c
	...
    3e28:	080030ca 	stmdaeq	r0, {r1, r3, r6, r7, ip, sp}
    3e2c:	080030d0 	stmdaeq	r0, {r4, r6, r7, ip, sp}
    3e30:	9f330002 	svcls	0x00330002
    3e34:	080030d0 	stmdaeq	r0, {r4, r6, r7, ip, sp}
    3e38:	08003228 	stmdaeq	r0, {r3, r5, r9, ip, sp}
    3e3c:	9f340002 	svcls	0x00340002
	...
    3e48:	080030e0 	stmdaeq	r0, {r5, r6, r7, ip, sp}
    3e4c:	08003106 	stmdaeq	r0, {r1, r2, r8, ip, sp}
    3e50:	06520001 	ldrbeq	r0, [r2], -r1
    3e54:	10080031 	andne	r0, r8, r1, lsr r0
    3e58:	01080031 	tsteq	r8, r1, lsr r0
    3e5c:	31185100 	tstcc	r8, r0, lsl #2
    3e60:	31360800 	teqcc	r6, r0, lsl #16
    3e64:	00010800 	andeq	r0, r1, r0, lsl #16
    3e68:	00000052 	andeq	r0, r0, r2, asr r0
    3e6c:	00000000 	andeq	r0, r0, r0
    3e70:	0030e000 	eorseq	lr, r0, r0
    3e74:	0030f008 	eorseq	pc, r0, r8
    3e78:	53000108 	movwpl	r0, #264	; 0x108
    3e7c:	080030f0 	stmdaeq	r0, {r4, r5, r6, r7, ip, sp}
    3e80:	080030f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, ip, sp}
    3e84:	7f730003 	svcvc	0x00730003
    3e88:	0030f69f 	mlaseq	r0, pc, r6, pc	; <UNPREDICTABLE>
    3e8c:	00310208 	eorseq	r0, r1, r8, lsl #4
    3e90:	53000108 	movwpl	r0, #264	; 0x108
    3e94:	08003118 	stmdaeq	r0, {r3, r4, r8, ip, sp}
    3e98:	08003120 	stmdaeq	r0, {r5, r8, ip, sp}
    3e9c:	00730009 	rsbseq	r0, r3, r9
    3ea0:	231c0091 	tstcs	ip, #145	; 0x91
    3ea4:	209f0180 	addscs	r0, pc, r0, lsl #3
    3ea8:	26080031 			; <UNDEFINED> instruction: 0x26080031
    3eac:	08080031 	stmdaeq	r8, {r0, r4, r5}
    3eb0:	91007300 	mrsls	r7, LR_irq
    3eb4:	7f231c00 	svcvc	0x00231c00
    3eb8:	0031269f 	mlaseq	r1, pc, r6, r2	; <UNPREDICTABLE>
    3ebc:	00313008 	eorseq	r3, r1, r8
    3ec0:	73000908 	movwvc	r0, #2312	; 0x908
    3ec4:	1c009100 	stfned	f1, [r0], {-0}
    3ec8:	9f018023 	svcls	0x00018023
	...
    3ed4:	08003136 	stmdaeq	r0, {r1, r2, r4, r5, r8, ip, sp}
    3ed8:	08003186 	stmdaeq	r0, {r1, r2, r7, r8, ip, sp}
    3edc:	92530001 	subsls	r0, r3, #1
    3ee0:	b4080031 	strlt	r0, [r8], #-49	; 0x31
    3ee4:	01080031 	tsteq	r8, r1, lsr r0
    3ee8:	00005200 	andeq	r5, r0, r0, lsl #4
    3eec:	00000000 	andeq	r0, r0, r0
    3ef0:	31360000 	teqcc	r6, r0
    3ef4:	31920800 	orrscc	r0, r2, r0, lsl #16
    3ef8:	00010800 	andeq	r0, r1, r0, lsl #16
    3efc:	00319254 	eorseq	r9, r1, r4, asr r2
    3f00:	00319808 	eorseq	r9, r1, r8, lsl #16
    3f04:	30000208 	andcc	r0, r0, r8, lsl #4
    3f08:	0031989f 	mlaseq	r1, pc, r8, r9	; <UNPREDICTABLE>
    3f0c:	0031a008 	eorseq	sl, r1, r8
    3f10:	73000808 	movwvc	r0, #2056	; 0x808
    3f14:	1c009100 	stfned	f1, [r0], {-0}
    3f18:	a09f6023 	addsge	r6, pc, r3, lsr #32
    3f1c:	a6080031 			; <UNDEFINED> instruction: 0xa6080031
    3f20:	08080031 	stmdaeq	r8, {r0, r4, r5}
    3f24:	91007300 	mrsls	r7, LR_irq
    3f28:	5f231c00 	svcpl	0x00231c00
    3f2c:	0031a69f 	mlaseq	r1, pc, r6, sl	; <UNPREDICTABLE>
    3f30:	0031ac08 	eorseq	sl, r1, r8, lsl #24
    3f34:	73000808 	movwvc	r0, #2056	; 0x808
    3f38:	1c009100 	stfned	f1, [r0], {-0}
    3f3c:	009f6023 	addseq	r6, pc, r3, lsr #32
    3f40:	00000000 	andeq	r0, r0, r0
    3f44:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    3f48:	3e080031 	mcrcc	0, 0, r0, cr8, cr1, {1}
    3f4c:	02080031 	andeq	r0, r8, #49	; 0x31
    3f50:	3e9f3000 	cdpcc	0, 9, cr3, cr15, cr0, {0}
    3f54:	4c080031 	stcmi	0, cr0, [r8], {49}	; 0x31
    3f58:	01080031 	tsteq	r8, r1, lsr r0
    3f5c:	314c5200 	mrscc	r5, (UNDEF: 108)
    3f60:	31520800 	cmpcc	r2, r0, lsl #16
    3f64:	00030800 	andeq	r0, r3, r0, lsl #16
    3f68:	529f7f72 	addspl	r7, pc, #456	; 0x1c8
    3f6c:	58080031 	stmdapl	r8, {r0, r4, r5}
    3f70:	01080031 	tsteq	r8, r1, lsr r0
    3f74:	31585200 	cmpcc	r8, r0, lsl #4
    3f78:	31640800 	cmncc	r4, r0, lsl #16
    3f7c:	00030800 	andeq	r0, r3, r0, lsl #16
    3f80:	649f0172 	ldrvs	r0, [pc], #370	; 3f88 <__Stack_Size+0x3788>
    3f84:	6c080031 	stcvs	0, cr0, [r8], {49}	; 0x31
    3f88:	09080031 	stmdbeq	r8, {r0, r4, r5}
    3f8c:	91007200 	mrsls	r7, R8_usr
    3f90:	a1231c00 	teqge	r3, r0, lsl #24
    3f94:	316c9f01 	cmncc	ip, r1, lsl #30
    3f98:	31760800 	cmncc	r6, r0, lsl #16
    3f9c:	00090800 	andeq	r0, r9, r0, lsl #16
    3fa0:	00910072 	addseq	r0, r1, r2, ror r0
    3fa4:	01a0231c 	lsleq	r2, ip, r3
    3fa8:	0031769f 	mlaseq	r1, pc, r6, r7	; <UNPREDICTABLE>
    3fac:	00317808 	eorseq	r7, r1, r8, lsl #16
    3fb0:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    3fb4:	1c009100 	stfned	f1, [r0], {-0}
    3fb8:	9f01a123 	svcls	0x0001a123
	...
    3fc4:	080031b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, sp}
    3fc8:	080031fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, ip, sp}
    3fcc:	04530001 	ldrbeq	r0, [r3], #-1
    3fd0:	28080032 	stmdacs	r8, {r1, r4, r5}
    3fd4:	01080032 	tsteq	r8, r2, lsr r0
    3fd8:	00005200 	andeq	r5, r0, r0, lsl #4
    3fdc:	00000000 	andeq	r0, r0, r0
    3fe0:	31b40000 			; <UNDEFINED> instruction: 0x31b40000
    3fe4:	32040800 	andcc	r0, r4, #0, 16
    3fe8:	00010800 	andeq	r0, r1, r0, lsl #16
    3fec:	00320450 	eorseq	r0, r2, r0, asr r4
    3ff0:	00321008 	eorseq	r1, r2, r8
    3ff4:	30000208 	andcc	r0, r0, r8, lsl #4
    3ff8:	0032109f 	mlaseq	r2, pc, r0, r1	; <UNPREDICTABLE>
    3ffc:	00321808 	eorseq	r1, r2, r8, lsl #16
    4000:	53000108 	movwpl	r0, #264	; 0x108
    4004:	08003218 	stmdaeq	r0, {r3, r4, r9, ip, sp}
    4008:	0800321e 	stmdaeq	r0, {r1, r2, r3, r4, r9, ip, sp}
    400c:	7f730003 	svcvc	0x00730003
    4010:	00321e9f 	mlaseq	r2, pc, lr, r1	; <UNPREDICTABLE>
    4014:	00322808 	eorseq	r2, r2, r8, lsl #16
    4018:	53000108 	movwpl	r0, #264	; 0x108
	...
    4024:	080031b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, ip, sp}
    4028:	080031ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, ip, sp}
    402c:	9f300002 	svcls	0x00300002
    4030:	080031ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, ip, sp}
    4034:	080031c2 	stmdaeq	r0, {r1, r6, r7, r8, ip, sp}
    4038:	c2520001 	subsgt	r0, r2, #1
    403c:	c8080031 	stmdagt	r8, {r0, r4, r5}
    4040:	03080031 	movweq	r0, #32817	; 0x8031
    4044:	9f7f7200 	svcls	0x007f7200
    4048:	080031c8 	stmdaeq	r0, {r3, r6, r7, r8, ip, sp}
    404c:	080031ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, ip, sp}
    4050:	ce520001 	cdpgt	0, 5, cr0, cr2, cr1, {0}
    4054:	da080031 	ble	204120 <__Stack_Size+0x203920>
    4058:	03080031 	movweq	r0, #32817	; 0x8031
    405c:	9f017200 	svcls	0x00017200
    4060:	080031da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, ip, sp}
    4064:	080031e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, ip, sp}
    4068:	00720008 	rsbseq	r0, r2, r8
    406c:	231c0091 	tstcs	ip, #145	; 0x91
    4070:	31e29f61 	mvncc	r9, r1, ror #30
    4074:	31ec0800 	mvncc	r0, r0, lsl #16
    4078:	00080800 	andeq	r0, r8, r0, lsl #16
    407c:	00910072 	addseq	r0, r1, r2, ror r0
    4080:	9f60231c 	svcls	0x0060231c
    4084:	080031ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip, sp}
    4088:	080031ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, ip, sp}
    408c:	00720008 	rsbseq	r0, r2, r8
    4090:	231c0091 	tstcs	ip, #145	; 0x91
    4094:	00009f61 	andeq	r9, r0, r1, ror #30
	...
    40a4:	00010000 	andeq	r0, r1, r0
    40a8:	00000050 	andeq	r0, r0, r0, asr r0
    40ac:	00000000 	andeq	r0, r0, r0
    40b0:	70000300 	andvc	r0, r0, r0, lsl #6
    40b4:	00009f7c 	andeq	r9, r0, ip, ror pc
    40b8:	00000000 	andeq	r0, r0, r0
    40bc:	00040000 	andeq	r0, r4, r0
    40c0:	9f5001f3 	svcls	0x005001f3
	...
    40d4:	00510001 	subseq	r0, r1, r1
    40d8:	00000000 	andeq	r0, r0, r0
    40dc:	01000000 	mrseq	r0, (UNDEF: 0)
    40e0:	00005200 	andeq	r5, r0, r0, lsl #4
    40e4:	00000000 	andeq	r0, r0, r0
    40e8:	00050000 	andeq	r0, r5, r0
    40ec:	25380072 	ldrcs	r0, [r8, #-114]!	; 0x72
    40f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    40f4:	00000000 	andeq	r0, r0, r0
    40f8:	72000700 	andvc	r0, r0, #0, 14
    40fc:	38253800 	stmdacc	r5!, {fp, ip, sp}
    4100:	00009f25 	andeq	r9, r0, r5, lsr #30
    4104:	00000000 	andeq	r0, r0, r0
    4108:	000a0000 	andeq	r0, sl, r0
    410c:	405101f3 	ldrshmi	r0, [r1], #-19	; 0xffffffed
    4110:	38253825 	stmdacc	r5!, {r0, r2, r5, fp, ip, sp}
    4114:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    4124:	00020000 	andeq	r0, r2, r0
    4128:	00009f30 	andeq	r9, r0, r0, lsr pc
    412c:	00000000 	andeq	r0, r0, r0
    4130:	00020000 	andeq	r0, r2, r0
    4134:	00009f32 	andeq	r9, r0, r2, lsr pc
    4138:	00000000 	andeq	r0, r0, r0
    413c:	00020000 	andeq	r0, r2, r0
    4140:	00009f33 	andeq	r9, r0, r3, lsr pc
    4144:	00000000 	andeq	r0, r0, r0
    4148:	00020000 	andeq	r0, r2, r0
    414c:	00009f34 	andeq	r9, r0, r4, lsr pc
    4150:	00000000 	andeq	r0, r0, r0
    4154:	32280000 	eorcc	r0, r8, #0
    4158:	32660800 	rsbcc	r0, r6, #0, 16
    415c:	00010800 	andeq	r0, r1, r0, lsl #16
    4160:	00326650 	eorseq	r6, r2, r0, asr r6
    4164:	0033a808 	eorseq	sl, r3, r8, lsl #16
    4168:	54000108 	strpl	r0, [r0], #-264	; 0x108
    416c:	080033a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, ip, sp}
    4170:	080033b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip, sp}
    4174:	b4500001 	ldrblt	r0, [r0], #-1
    4178:	c2080033 	andgt	r0, r8, #51	; 0x33
    417c:	01080033 	tsteq	r8, r3, lsr r0
    4180:	33c25400 	biccc	r5, r2, #0, 8
    4184:	33c80800 	biccc	r0, r8, #0, 16
    4188:	00010800 	andeq	r0, r1, r0, lsl #16
    418c:	00000050 	andeq	r0, r0, r0, asr r0
    4190:	00000000 	andeq	r0, r0, r0
    4194:	00322800 	eorseq	r2, r2, r0, lsl #16
    4198:	00326808 	eorseq	r6, r2, r8, lsl #16
    419c:	51000108 	tstpl	r0, r8, lsl #2
    41a0:	08003268 	stmdaeq	r0, {r3, r5, r6, r9, ip, sp}
    41a4:	080033a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, ip, sp}
    41a8:	a8570001 	ldmdage	r7, {r0}^
    41ac:	b4080033 	strlt	r0, [r8], #-51	; 0x33
    41b0:	01080033 	tsteq	r8, r3, lsr r0
    41b4:	33b45100 			; <UNDEFINED> instruction: 0x33b45100
    41b8:	33c20800 	biccc	r0, r2, #0, 16
    41bc:	00010800 	andeq	r0, r1, r0, lsl #16
    41c0:	0033c257 	eorseq	ip, r3, r7, asr r2
    41c4:	0033c808 	eorseq	ip, r3, r8, lsl #16
    41c8:	51000108 	tstpl	r0, r8, lsl #2
	...
    41d4:	08003228 	stmdaeq	r0, {r3, r5, r9, ip, sp}
    41d8:	08003238 	stmdaeq	r0, {r3, r4, r5, r9, ip, sp}
    41dc:	38520001 	ldmdacc	r2, {r0}^
    41e0:	20080032 	andcs	r0, r8, r2, lsr r0
    41e4:	01080033 	tsteq	r8, r3, lsr r0
    41e8:	33205900 	teqcc	r0, #0, 18
    41ec:	33340800 	teqcc	r4, #0, 16
    41f0:	00030800 	andeq	r0, r3, r0, lsl #16
    41f4:	349f0179 	ldrcc	r0, [pc], #377	; 41fc <__Stack_Size+0x39fc>
    41f8:	a8080033 	stmdage	r8, {r0, r1, r4, r5}
    41fc:	04080033 	streq	r0, [r8], #-51	; 0x33
    4200:	5201f300 	andpl	pc, r1, #0, 6
    4204:	0033a89f 	mlaseq	r3, pc, r8, sl	; <UNPREDICTABLE>
    4208:	0033c808 	eorseq	ip, r3, r8, lsl #16
    420c:	59000108 	stmdbpl	r0, {r3, r8}
	...
    4218:	08003228 	stmdaeq	r0, {r3, r5, r9, ip, sp}
    421c:	0800323a 	stmdaeq	r0, {r1, r3, r4, r5, r9, ip, sp}
    4220:	3a530001 	bcc	14c422c <__Stack_Size+0x14c3a2c>
    4224:	be080032 	mcrlt	0, 0, r0, cr8, cr2, {1}
    4228:	01080032 	tsteq	r8, r2, lsr r0
    422c:	32be5500 	adcscc	r5, lr, #0, 10
    4230:	33020800 	movwcc	r0, #10240	; 0x2800
    4234:	00030800 	andeq	r0, r3, r0, lsl #16
    4238:	027fb491 	rsbseq	fp, pc, #-1862270976	; 0x91000000
    423c:	a8080033 	stmdage	r8, {r0, r1, r4, r5}
    4240:	04080033 	streq	r0, [r8], #-51	; 0x33
    4244:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    4248:	0033a89f 	mlaseq	r3, pc, r8, sl	; <UNPREDICTABLE>
    424c:	0033c808 	eorseq	ip, r3, r8, lsl #16
    4250:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    425c:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
    4260:	08003324 	stmdaeq	r0, {r2, r5, r8, r9, ip, sp}
    4264:	b4580001 	ldrblt	r0, [r8], #-1
    4268:	c2080033 	andgt	r0, r8, #51	; 0x33
    426c:	01080033 	tsteq	r8, r3, lsr r0
    4270:	00005800 	andeq	r5, r0, r0, lsl #16
    4274:	00000000 	andeq	r0, r0, r0
    4278:	327a0000 	rsbscc	r0, sl, #0
    427c:	332c0800 	teqcc	ip, #0, 16
    4280:	00010800 	andeq	r0, r1, r0, lsl #16
    4284:	0033b456 	eorseq	fp, r3, r6, asr r4
    4288:	0033c208 	eorseq	ip, r3, r8, lsl #4
    428c:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    4298:	0800327a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, ip, sp}
    429c:	08003338 	stmdaeq	r0, {r3, r4, r5, r8, r9, ip, sp}
    42a0:	385a0001 	ldmdacc	sl, {r0}^
    42a4:	3a080033 	bcc	204378 <__Stack_Size+0x203b78>
    42a8:	03080033 	movweq	r0, #32819	; 0x8033
    42ac:	9f017a00 	svcls	0x00017a00
    42b0:	080033b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip, sp}
    42b4:	080033c2 	stmdaeq	r0, {r1, r6, r7, r8, r9, ip, sp}
    42b8:	005a0001 	subseq	r0, sl, r1
    42bc:	00000000 	andeq	r0, r0, r0
    42c0:	7a000000 	bvc	42c8 <__Stack_Size+0x3ac8>
    42c4:	be080032 	mcrlt	0, 0, r0, cr8, cr2, {1}
    42c8:	02080032 	andeq	r0, r8, #50	; 0x32
    42cc:	d29f3000 	addsle	r3, pc, #0
    42d0:	de080032 	mcrle	0, 0, r0, cr8, cr2, {1}
    42d4:	01080032 	tsteq	r8, r2, lsr r0
    42d8:	32de5b00 	sbcscc	r5, lr, #0, 22
    42dc:	32f40800 	rscscc	r0, r4, #0, 16
    42e0:	00010800 	andeq	r0, r1, r0, lsl #16
    42e4:	0032f453 	eorseq	pc, r2, r3, asr r4	; <UNPREDICTABLE>
    42e8:	00330208 	eorseq	r0, r3, r8, lsl #4
    42ec:	78000908 	stmdavc	r0, {r3, r8, fp}
    42f0:	32253200 	eorcc	r3, r5, #0, 4
    42f4:	9f022324 	svcls	0x00022324
    42f8:	08003334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip, sp}
    42fc:	08003338 	stmdaeq	r0, {r3, r4, r5, r8, r9, ip, sp}
    4300:	7f7a0003 	svcvc	0x007a0003
    4304:	0033389f 	mlaseq	r3, pc, r8, r3	; <UNPREDICTABLE>
    4308:	0033a008 	eorseq	sl, r3, r8
    430c:	5a000108 	bpl	4734 <__Stack_Size+0x3f34>
    4310:	080033a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, sp}
    4314:	080033a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, ip, sp}
    4318:	017a0003 	cmneq	sl, r3
    431c:	0033b49f 	mlaseq	r3, pc, r4, fp	; <UNPREDICTABLE>
    4320:	0033b608 	eorseq	fp, r3, r8, lsl #12
    4324:	30000208 	andcc	r0, r0, r8, lsl #4
    4328:	0033b69f 	mlaseq	r3, pc, r6, fp	; <UNPREDICTABLE>
    432c:	0033c208 	eorseq	ip, r3, r8, lsl #4
    4330:	52000108 	andpl	r0, r0, #8, 2
	...
    433c:	08003236 	stmdaeq	r0, {r1, r2, r4, r5, r9, ip, sp}
    4340:	0800323a 	stmdaeq	r0, {r1, r3, r4, r5, r9, ip, sp}
    4344:	3a530001 	bcc	14c4350 <__Stack_Size+0x14c3b50>
    4348:	be080032 	mcrlt	0, 0, r0, cr8, cr2, {1}
    434c:	01080032 	tsteq	r8, r2, lsr r0
    4350:	32be5500 	adcscc	r5, lr, #0, 10
    4354:	33020800 	movwcc	r0, #10240	; 0x2800
    4358:	00030800 	andeq	r0, r3, r0, lsl #16
    435c:	027fb491 	rsbseq	fp, pc, #-1862270976	; 0x91000000
    4360:	a8080033 	stmdage	r8, {r0, r1, r4, r5}
    4364:	04080033 	streq	r0, [r8], #-51	; 0x33
    4368:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    436c:	0033a89f 	mlaseq	r3, pc, r8, sl	; <UNPREDICTABLE>
    4370:	0033c808 	eorseq	ip, r3, r8, lsl #16
    4374:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    4380:	08003236 	stmdaeq	r0, {r1, r2, r4, r5, r9, ip, sp}
    4384:	0800323a 	stmdaeq	r0, {r1, r3, r4, r5, r9, ip, sp}
    4388:	9f4f0002 	svcls	0x004f0002
    438c:	0800323a 	stmdaeq	r0, {r1, r3, r4, r5, r9, ip, sp}
    4390:	0800323e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, ip, sp}
    4394:	3e520001 	cdpcc	0, 5, cr0, cr2, cr1, {0}
    4398:	42080032 	andmi	r0, r8, #50	; 0x32
    439c:	03080032 	movweq	r0, #32818	; 0x8032
    43a0:	9f017200 	svcls	0x00017200
    43a4:	08003242 	stmdaeq	r0, {r1, r6, r9, ip, sp}
    43a8:	08003254 	stmdaeq	r0, {r2, r4, r6, r9, ip, sp}
    43ac:	a8520001 	ldmdage	r2, {r0}^
    43b0:	ac080033 	stcge	0, cr0, [r8], {51}	; 0x33
    43b4:	03080033 	movweq	r0, #32819	; 0x8033
    43b8:	9f017200 	svcls	0x00017200
    43bc:	080033ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp}
    43c0:	080033b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip, sp}
    43c4:	f8090003 			; <UNDEFINED> instruction: 0xf8090003
    43c8:	0033c29f 	mlaseq	r3, pc, r2, ip	; <UNPREDICTABLE>
    43cc:	0033c808 	eorseq	ip, r3, r8, lsl #16
    43d0:	09000308 	stmdbeq	r0, {r3, r8, r9}
    43d4:	00009ff8 	strdeq	r9, [r0], -r8
    43d8:	00000000 	andeq	r0, r0, r0
    43dc:	32480000 	subcc	r0, r8, #0
    43e0:	324a0800 	subcc	r0, sl, #0, 16
    43e4:	00050800 	andeq	r0, r5, r0, lsl #16
    43e8:	00720075 	rsbseq	r0, r2, r5, ror r0
    43ec:	00324a22 	eorseq	r4, r2, r2, lsr #20
    43f0:	00324c08 	eorseq	r4, r2, r8, lsl #24
    43f4:	73000508 	movwvc	r0, #1288	; 0x508
    43f8:	9f253100 	svcls	0x00253100
    43fc:	080033ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp}
    4400:	080033b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip, sp}
    4404:	7f750002 	svcvc	0x00750002
    4408:	080033c2 	stmdaeq	r0, {r1, r6, r7, r8, r9, ip, sp}
    440c:	080033c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, sp}
    4410:	7f750002 	svcvc	0x00750002
	...
    441c:	08003258 	stmdaeq	r0, {r3, r4, r6, r9, ip, sp}
    4420:	08003276 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, ip, sp}
    4424:	765a0001 	ldrbvc	r0, [sl], -r1
    4428:	20080032 	andcs	r0, r8, r2, lsr r0
    442c:	05080033 	streq	r0, [r8, #-51]	; 0x33
    4430:	33007900 	movwcc	r7, #2304	; 0x900
    4434:	33209f24 	teqcc	r0, #36, 30	; 0x90
    4438:	33340800 	teqcc	r4, #0, 16
    443c:	00050800 	andeq	r0, r5, r0, lsl #16
    4440:	24330179 	ldrtcs	r0, [r3], #-377	; 0x179
    4444:	0033349f 	mlaseq	r3, pc, r4, r3	; <UNPREDICTABLE>
    4448:	0033a808 	eorseq	sl, r3, r8, lsl #16
    444c:	f3000608 	vmax.u8	d0, d0, d8
    4450:	24335201 	ldrtcs	r5, [r3], #-513	; 0x201
    4454:	0033b49f 	mlaseq	r3, pc, r4, fp	; <UNPREDICTABLE>
    4458:	0033c208 	eorseq	ip, r3, r8, lsl #4
    445c:	79000508 	stmdbvc	r0, {r3, r8, sl}
    4460:	9f243300 	svcls	0x00243300
	...
    446c:	08003258 	stmdaeq	r0, {r3, r4, r6, r9, ip, sp}
    4470:	0800326a 	stmdaeq	r0, {r1, r3, r5, r6, r9, ip, sp}
    4474:	00520001 	subseq	r0, r2, r1
    4478:	00000000 	andeq	r0, r0, r0
    447c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4480:	0e080033 	mcreq	0, 0, r0, cr8, cr3, {1}
    4484:	01080033 	tsteq	r8, r3, lsr r0
    4488:	33105200 	tstcc	r0, #0, 4
    448c:	33280800 	teqcc	r8, #0, 16
    4490:	00010800 	andeq	r0, r1, r0, lsl #16
    4494:	00000052 	andeq	r0, r0, r2, asr r0
    4498:	00000000 	andeq	r0, r0, r0
    449c:	00330800 	eorseq	r0, r3, r0, lsl #16
    44a0:	00331408 	eorseq	r1, r3, r8, lsl #8
    44a4:	53000108 	movwpl	r0, #264	; 0x108
    44a8:	08003314 	stmdaeq	r0, {r2, r4, r8, r9, ip, sp}
    44ac:	0800331a 	stmdaeq	r0, {r1, r3, r4, r8, r9, ip, sp}
    44b0:	7f730003 	svcvc	0x00730003
    44b4:	00331a9f 	mlaseq	r3, pc, sl, r1	; <UNPREDICTABLE>
    44b8:	00333008 	eorseq	r3, r3, r8
    44bc:	53000108 	movwpl	r0, #264	; 0x108
	...
    44c8:	0800334c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip, sp}
    44cc:	0800336a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, ip, sp}
    44d0:	00500001 	subseq	r0, r0, r1
    44d4:	00000000 	andeq	r0, r0, r0
    44d8:	4c000000 	stcmi	0, cr0, [r0], {-0}
    44dc:	a2080033 	andge	r0, r8, #51	; 0x33
    44e0:	02080033 	andeq	r0, r8, #51	; 0x33
    44e4:	009f3100 	addseq	r3, pc, r0, lsl #2
    44e8:	00000000 	andeq	r0, r0, r0
    44ec:	4c000000 	stcmi	0, cr0, [r0], {-0}
    44f0:	4e080033 	mcrmi	0, 0, r0, cr8, cr3, {1}
    44f4:	02080033 	andeq	r0, r8, #51	; 0x33
    44f8:	4e9f3000 	cdpmi	0, 9, cr3, cr15, cr0, {0}
    44fc:	64080033 	strvs	r0, [r8], #-51	; 0x33
    4500:	01080033 	tsteq	r8, r3, lsr r0
    4504:	00005200 	andeq	r5, r0, r0, lsl #4
    4508:	00000000 	andeq	r0, r0, r0
    450c:	334c0000 	movtcc	r0, #49152	; 0xc000
    4510:	334e0800 	movtcc	r0, #59392	; 0xe800
    4514:	00020800 	andeq	r0, r2, r0, lsl #16
    4518:	334e9f30 	movtcc	r9, #61232	; 0xef30
    451c:	33580800 	cmpcc	r8, #0, 16
    4520:	00010800 	andeq	r0, r1, r0, lsl #16
    4524:	00335853 	eorseq	r5, r3, r3, asr r8
    4528:	00335e08 	eorseq	r5, r3, r8, lsl #28
    452c:	73000308 	movwvc	r0, #776	; 0x308
    4530:	335e9f7f 	cmpcc	lr, #508	; 0x1fc
    4534:	33620800 	cmncc	r2, #0, 16
    4538:	00010800 	andeq	r0, r1, r0, lsl #16
    453c:	00000053 	andeq	r0, r0, r3, asr r0
    4540:	00000000 	andeq	r0, r0, r0
    4544:	00336800 	eorseq	r6, r3, r0, lsl #16
    4548:	0033a208 	eorseq	sl, r3, r8, lsl #4
    454c:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    4558:	08003368 	stmdaeq	r0, {r3, r5, r6, r8, r9, ip, sp}
    455c:	0800336a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, ip, sp}
    4560:	9f300002 	svcls	0x00300002
    4564:	0800336a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, ip, sp}
    4568:	08003372 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, ip, sp}
    456c:	74520001 	ldrbvc	r0, [r2], #-1
    4570:	84080033 	strhi	r0, [r8], #-51	; 0x33
    4574:	01080033 	tsteq	r8, r3, lsr r0
    4578:	33845200 	orrcc	r5, r4, #0, 4
    457c:	33860800 	orrcc	r0, r6, #0, 16
    4580:	00040800 	andeq	r0, r4, r0, lsl #16
    4584:	9f1f0072 	svcls	0x001f0072
	...
    4590:	08003368 	stmdaeq	r0, {r3, r5, r6, r8, r9, ip, sp}
    4594:	0800336a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, ip, sp}
    4598:	9f300002 	svcls	0x00300002
    459c:	0800336a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, ip, sp}
    45a0:	0800337a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, ip, sp}
    45a4:	7a530001 	bvc	14c45b0 <__Stack_Size+0x14c3db0>
    45a8:	80080033 	andhi	r0, r8, r3, lsr r0
    45ac:	03080033 	movweq	r0, #32819	; 0x8033
    45b0:	9f7f7300 	svcls	0x007f7300
    45b4:	08003380 	stmdaeq	r0, {r7, r8, r9, ip, sp}
    45b8:	08003388 	stmdaeq	r0, {r3, r7, r8, r9, ip, sp}
    45bc:	00530001 	subseq	r0, r3, r1
    45c0:	00000000 	andeq	r0, r0, r0
    45c4:	82000000 	andhi	r0, r0, #0
    45c8:	84080033 	strhi	r0, [r8], #-51	; 0x33
    45cc:	01080033 	tsteq	r8, r3, lsr r0
    45d0:	33845200 	orrcc	r5, r4, #0, 4
    45d4:	33860800 	orrcc	r0, r6, #0, 16
    45d8:	00040800 	andeq	r0, r4, r0, lsl #16
    45dc:	9f1f0072 	svcls	0x001f0072
	...
    45e8:	08003382 	stmdaeq	r0, {r1, r7, r8, r9, ip, sp}
    45ec:	080033a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, ip, sp}
    45f0:	005d0001 	subseq	r0, sp, r1
    45f4:	00000000 	andeq	r0, r0, r0
    45f8:	86000000 	strhi	r0, [r0], -r0
    45fc:	a2080033 	andge	r0, r8, #51	; 0x33
    4600:	01080033 	tsteq	r8, r3, lsr r0
    4604:	00005200 	andeq	r5, r0, r0, lsl #4
    4608:	00000000 	andeq	r0, r0, r0
    460c:	33860000 	orrcc	r0, r6, #0
    4610:	33880800 	orrcc	r0, r8, #0, 16
    4614:	00020800 	andeq	r0, r2, r0, lsl #16
    4618:	33889f30 	orrcc	r9, r8, #48, 30	; 0xc0
    461c:	33a20800 			; <UNDEFINED> instruction: 0x33a20800
    4620:	00010800 	andeq	r0, r1, r0, lsl #16
    4624:	00000053 	andeq	r0, r0, r3, asr r0
	...
    4634:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4640:	00510001 	subseq	r0, r1, r1
    4644:	00000000 	andeq	r0, r0, r0
    4648:	01000000 	mrseq	r0, (UNDEF: 0)
    464c:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    465c:	00010000 	andeq	r0, r1, r0
    4660:	00000051 	andeq	r0, r0, r1, asr r0
    4664:	00000000 	andeq	r0, r0, r0
    4668:	53000100 	movwpl	r0, #256	; 0x100
	...
    4674:	01f30004 	mvnseq	r0, r4
    4678:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    4688:	00010000 	andeq	r0, r1, r0
    468c:	0000005d 	andeq	r0, r0, sp, asr r0
    4690:	00000000 	andeq	r0, r0, r0
    4694:	74000300 	strvc	r0, [r0], #-768	; 0x300
    4698:	00009f60 	andeq	r9, r0, r0, ror #30
	...
    46a8:	00010000 	andeq	r0, r1, r0
    46ac:	00000050 	andeq	r0, r0, r0, asr r0
    46b0:	00000000 	andeq	r0, r0, r0
    46b4:	f3000400 	vshl.u8	d0, d0, d0
    46b8:	009f5001 	addseq	r5, pc, r1
    46bc:	00000000 	andeq	r0, r0, r0
    46c0:	01000000 	mrseq	r0, (UNDEF: 0)
    46c4:	00005000 	andeq	r5, r0, r0
	...
    46d4:	00010000 	andeq	r0, r1, r0
    46d8:	00000051 	andeq	r0, r0, r1, asr r0
    46dc:	00000000 	andeq	r0, r0, r0
    46e0:	f3000400 	vshl.u8	d0, d0, d0
    46e4:	009f5101 	addseq	r5, pc, r1, lsl #2
    46e8:	00000000 	andeq	r0, r0, r0
    46ec:	01000000 	mrseq	r0, (UNDEF: 0)
    46f0:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    4700:	00020000 	andeq	r0, r2, r0
    4704:	00009f30 	andeq	r9, r0, r0, lsr pc
    4708:	00000000 	andeq	r0, r0, r0
    470c:	00010000 	andeq	r0, r1, r0
    4710:	00000052 	andeq	r0, r0, r2, asr r0
    4714:	00000000 	andeq	r0, r0, r0
    4718:	72000800 	andvc	r0, r0, #0, 16
    471c:	72253100 	eorvc	r3, r5, #0, 2
    4720:	009f2100 	addseq	r2, pc, r0, lsl #2
    4724:	00000000 	andeq	r0, r0, r0
    4728:	02000000 	andeq	r0, r0, #0
    472c:	009f3000 	addseq	r3, pc, r0
    4730:	00000000 	andeq	r0, r0, r0
    4734:	01000000 	mrseq	r0, (UNDEF: 0)
    4738:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    4748:	00020000 	andeq	r0, r2, r0
    474c:	00009f30 	andeq	r9, r0, r0, lsr pc
    4750:	00000000 	andeq	r0, r0, r0
    4754:	00020000 	andeq	r0, r2, r0
    4758:	00009f30 	andeq	r9, r0, r0, lsr pc
    475c:	00000000 	andeq	r0, r0, r0
    4760:	00010000 	andeq	r0, r1, r0
    4764:	00000053 	andeq	r0, r0, r3, asr r0
    4768:	00000000 	andeq	r0, r0, r0
    476c:	73000300 	movwvc	r0, #768	; 0x300
    4770:	00009f7f 	andeq	r9, r0, pc, ror pc
    4774:	00000000 	andeq	r0, r0, r0
    4778:	00010000 	andeq	r0, r1, r0
    477c:	00000053 	andeq	r0, r0, r3, asr r0
	...
    478c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4798:	01f30004 	mvnseq	r0, r4
    479c:	00009f51 	andeq	r9, r0, r1, asr pc
    47a0:	00000000 	andeq	r0, r0, r0
    47a4:	00010000 	andeq	r0, r1, r0
    47a8:	00000051 	andeq	r0, r0, r1, asr r0
	...
    47b8:	52000100 	andpl	r0, r0, #0, 2
	...
    47c4:	01f30004 	mvnseq	r0, r4
    47c8:	00009f52 	andeq	r9, r0, r2, asr pc
    47cc:	00000000 	andeq	r0, r0, r0
    47d0:	00010000 	andeq	r0, r1, r0
    47d4:	00000052 	andeq	r0, r0, r2, asr r0
	...
    47e4:	53000100 	movwpl	r0, #256	; 0x100
	...
    47f0:	01f30004 	mvnseq	r0, r4
    47f4:	00009f53 	andeq	r9, r0, r3, asr pc
	...
    4804:	00010000 	andeq	r0, r1, r0
    4808:	00000053 	andeq	r0, r0, r3, asr r0
    480c:	00000000 	andeq	r0, r0, r0
    4810:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    481c:	00560001 	subseq	r0, r6, r1
	...
    482c:	02000000 	andeq	r0, r0, #0
    4830:	009f3000 	addseq	r3, pc, r0
    4834:	00000000 	andeq	r0, r0, r0
    4838:	02000000 	andeq	r0, r0, #0
    483c:	009f3000 	addseq	r3, pc, r0
    4840:	00000000 	andeq	r0, r0, r0
    4844:	01000000 	mrseq	r0, (UNDEF: 0)
    4848:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    4858:	00010000 	andeq	r0, r1, r0
    485c:	00000051 	andeq	r0, r0, r1, asr r0
    4860:	00000000 	andeq	r0, r0, r0
    4864:	f3000400 	vshl.u8	d0, d0, d0
    4868:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    4878:	01000000 	mrseq	r0, (UNDEF: 0)
    487c:	00005200 	andeq	r5, r0, r0, lsl #4
    4880:	00000000 	andeq	r0, r0, r0
    4884:	00040000 	andeq	r0, r4, r0
    4888:	9f5201f3 	svcls	0x005201f3
	...
    489c:	00510001 	subseq	r0, r1, r1
    48a0:	00000000 	andeq	r0, r0, r0
    48a4:	04000000 	streq	r0, [r0], #-0
    48a8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    48ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    48bc:	30000200 	andcc	r0, r0, r0, lsl #4
    48c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    48c4:	00000000 	andeq	r0, r0, r0
    48c8:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    48dc:	9f300002 	svcls	0x00300002
	...
    48e8:	00530001 	subseq	r0, r3, r1
    48ec:	00000000 	andeq	r0, r0, r0
    48f0:	03000000 	movweq	r0, #0
    48f4:	9f7f7300 	svcls	0x007f7300
	...
    4900:	00530001 	subseq	r0, r3, r1
	...
    4910:	01000000 	mrseq	r0, (UNDEF: 0)
    4914:	00005100 	andeq	r5, r0, r0, lsl #2
    4918:	00000000 	andeq	r0, r0, r0
    491c:	00010000 	andeq	r0, r1, r0
    4920:	00000051 	andeq	r0, r0, r1, asr r0
    4924:	00000000 	andeq	r0, r0, r0
    4928:	71000400 	tstvc	r0, r0, lsl #8
    492c:	009f1f00 	addseq	r1, pc, r0, lsl #30
	...
    493c:	01000000 	mrseq	r0, (UNDEF: 0)
    4940:	00005300 	andeq	r5, r0, r0, lsl #6
    4944:	00000000 	andeq	r0, r0, r0
    4948:	00030000 	andeq	r0, r3, r0
    494c:	009f7f73 	addseq	r7, pc, r3, ror pc	; <UNPREDICTABLE>
    4950:	00000000 	andeq	r0, r0, r0
    4954:	01000000 	mrseq	r0, (UNDEF: 0)
    4958:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    4968:	00010000 	andeq	r0, r1, r0
    496c:	00000051 	andeq	r0, r0, r1, asr r0
    4970:	00000000 	andeq	r0, r0, r0
    4974:	71000400 	tstvc	r0, r0, lsl #8
    4978:	009f1f00 	addseq	r1, pc, r0, lsl #30
	...
    4988:	01000000 	mrseq	r0, (UNDEF: 0)
    498c:	00005d00 	andeq	r5, r0, r0, lsl #26
    4990:	00000000 	andeq	r0, r0, r0
    4994:	00030000 	andeq	r0, r3, r0
    4998:	009f5091 	umullseq	r5, pc, r1, r0	; <UNPREDICTABLE>
    499c:	00000000 	andeq	r0, r0, r0
    49a0:	03000000 	movweq	r0, #0
    49a4:	9f507d00 	svcls	0x00507d00
	...
    49b8:	9f300002 	svcls	0x00300002
	...
    49c4:	00530001 	subseq	r0, r3, r1
	...
    49d4:	01000000 	mrseq	r0, (UNDEF: 0)
    49d8:	00005100 	andeq	r5, r0, r0, lsl #2
    49dc:	00000000 	andeq	r0, r0, r0
    49e0:	00040000 	andeq	r0, r4, r0
    49e4:	9f5101f3 	svcls	0x005101f3
	...
    49f8:	00520001 	subseq	r0, r2, r1
    49fc:	00000000 	andeq	r0, r0, r0
    4a00:	04000000 	streq	r0, [r0], #-0
    4a04:	5201f300 	andpl	pc, r1, #0, 6
    4a08:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4a18:	52000100 	andpl	r0, r0, #0, 2
	...
    4a24:	01f30004 	mvnseq	r0, r4
    4a28:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    4a38:	00020000 	andeq	r0, r2, r0
    4a3c:	00009f30 	andeq	r9, r0, r0, lsr pc
    4a40:	00000000 	andeq	r0, r0, r0
    4a44:	00010000 	andeq	r0, r1, r0
    4a48:	00000054 	andeq	r0, r0, r4, asr r0
	...
    4a58:	30000200 	andcc	r0, r0, r0, lsl #4
    4a5c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4a60:	00000000 	andeq	r0, r0, r0
    4a64:	53000100 	movwpl	r0, #256	; 0x100
	...
    4a70:	7f730003 	svcvc	0x00730003
    4a74:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4a78:	00000000 	andeq	r0, r0, r0
    4a7c:	53000100 	movwpl	r0, #256	; 0x100
	...
    4a90:	00540001 	subseq	r0, r4, r1
    4a94:	00000000 	andeq	r0, r0, r0
    4a98:	01000000 	mrseq	r0, (UNDEF: 0)
    4a9c:	00005400 	andeq	r5, r0, r0, lsl #8
    4aa0:	00000000 	andeq	r0, r0, r0
    4aa4:	00040000 	andeq	r0, r4, r0
    4aa8:	9f1f0074 	svcls	0x001f0074
	...
    4abc:	00530001 	subseq	r0, r3, r1
    4ac0:	00000000 	andeq	r0, r0, r0
    4ac4:	03000000 	movweq	r0, #0
    4ac8:	9f7f7300 	svcls	0x007f7300
	...
    4ad4:	00530001 	subseq	r0, r3, r1
	...
    4ae4:	01000000 	mrseq	r0, (UNDEF: 0)
    4ae8:	00005400 	andeq	r5, r0, r0, lsl #8
    4aec:	00000000 	andeq	r0, r0, r0
    4af0:	00040000 	andeq	r0, r4, r0
    4af4:	9f1f0074 	svcls	0x001f0074
	...
    4b08:	005d0001 	subseq	r0, sp, r1
    4b0c:	00000000 	andeq	r0, r0, r0
    4b10:	03000000 	movweq	r0, #0
    4b14:	9f509100 	svcls	0x00509100
	...
    4b20:	507d0003 	rsbspl	r0, sp, r3
    4b24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4b34:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    4b48:	9f300002 	svcls	0x00300002
	...
    4b54:	00530001 	subseq	r0, r3, r1
	...
    4b64:	01000000 	mrseq	r0, (UNDEF: 0)
    4b68:	00005200 	andeq	r5, r0, r0, lsl #4
    4b6c:	00000000 	andeq	r0, r0, r0
    4b70:	00040000 	andeq	r0, r4, r0
    4b74:	9f5201f3 	svcls	0x005201f3
	...
    4b88:	9f300002 	svcls	0x00300002
	...
    4b94:	00510001 	subseq	r0, r1, r1
    4b98:	00000000 	andeq	r0, r0, r0
    4b9c:	01000000 	mrseq	r0, (UNDEF: 0)
    4ba0:	00005100 	andeq	r5, r0, r0, lsl #2
    4ba4:	00000000 	andeq	r0, r0, r0
    4ba8:	00040000 	andeq	r0, r4, r0
    4bac:	9f1f0071 	svcls	0x001f0071
	...
    4bc0:	9f300002 	svcls	0x00300002
	...
    4bcc:	00530001 	subseq	r0, r3, r1
    4bd0:	00000000 	andeq	r0, r0, r0
    4bd4:	03000000 	movweq	r0, #0
    4bd8:	9f7f7300 	svcls	0x007f7300
	...
    4be4:	00530001 	subseq	r0, r3, r1
	...
    4bf4:	01000000 	mrseq	r0, (UNDEF: 0)
    4bf8:	00005100 	andeq	r5, r0, r0, lsl #2
    4bfc:	00000000 	andeq	r0, r0, r0
    4c00:	00040000 	andeq	r0, r4, r0
    4c04:	9f1f0071 	svcls	0x001f0071
	...
    4c18:	005d0001 	subseq	r0, sp, r1
    4c1c:	00000000 	andeq	r0, r0, r0
    4c20:	03000000 	movweq	r0, #0
    4c24:	9f509100 	svcls	0x00509100
	...
    4c30:	507d0003 	rsbspl	r0, sp, r3
    4c34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4c44:	30000200 	andcc	r0, r0, r0, lsl #4
    4c48:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4c4c:	00000000 	andeq	r0, r0, r0
    4c50:	53000100 	movwpl	r0, #256	; 0x100
	...
    4c64:	00500001 	subseq	r0, r0, r1
    4c68:	00000000 	andeq	r0, r0, r0
    4c6c:	01000000 	mrseq	r0, (UNDEF: 0)
    4c70:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    4c80:	00010000 	andeq	r0, r1, r0
    4c84:	00000051 	andeq	r0, r0, r1, asr r0
    4c88:	00000000 	andeq	r0, r0, r0
    4c8c:	58000100 	stmdapl	r0, {r8}
	...
    4ca0:	00520001 	subseq	r0, r2, r1
    4ca4:	00000000 	andeq	r0, r0, r0
    4ca8:	01000000 	mrseq	r0, (UNDEF: 0)
    4cac:	00005a00 	andeq	r5, r0, r0, lsl #20
	...
    4cbc:	00010000 	andeq	r0, r1, r0
    4cc0:	00000053 	andeq	r0, r0, r3, asr r0
    4cc4:	00000000 	andeq	r0, r0, r0
    4cc8:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    4cdc:	7f720003 	svcvc	0x00720003
    4ce0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ce4:	00000000 	andeq	r0, r0, r0
    4ce8:	5c000100 	stfpls	f0, [r0], {-0}
	...
    4cf4:	017c0003 	cmneq	ip, r3
    4cf8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4d08:	4f000200 	svcmi	0x00000200
    4d0c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4d10:	00000000 	andeq	r0, r0, r0
    4d14:	52000100 	andpl	r0, r0, #0, 2
	...
    4d20:	01720003 	cmneq	r2, r3
    4d24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4d28:	00000000 	andeq	r0, r0, r0
    4d2c:	52000100 	andpl	r0, r0, #0, 2
	...
    4d38:	01720003 	cmneq	r2, r3
    4d3c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4d40:	00000000 	andeq	r0, r0, r0
    4d44:	09000300 	stmdbeq	r0, {r8, r9}
    4d48:	00009ff8 	strdeq	r9, [r0], -r8
	...
    4d58:	00050000 	andeq	r0, r5, r0
    4d5c:	00720077 	rsbseq	r0, r2, r7, ror r0
    4d60:	00000022 	andeq	r0, r0, r2, lsr #32
    4d64:	00000000 	andeq	r0, r0, r0
    4d68:	73000500 	movwvc	r0, #1280	; 0x500
    4d6c:	9f253100 	svcls	0x00253100
	...
    4d78:	7f770002 	svcvc	0x00770002
	...
    4d8c:	00590001 	subseq	r0, r9, r1
    4d90:	00000000 	andeq	r0, r0, r0
    4d94:	04000000 	streq	r0, [r0], #-0
    4d98:	1f007900 	svcne	0x00007900
    4d9c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4dac:	31000200 	mrscc	r0, R8_usr
    4db0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4dc0:	30000200 	andcc	r0, r0, r0, lsl #4
    4dc4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4dc8:	00000000 	andeq	r0, r0, r0
    4dcc:	52000100 	andpl	r0, r0, #0, 2
	...
    4de0:	9f300002 	svcls	0x00300002
	...
    4dec:	00530001 	subseq	r0, r3, r1
    4df0:	00000000 	andeq	r0, r0, r0
    4df4:	03000000 	movweq	r0, #0
    4df8:	9f7f7300 	svcls	0x007f7300
	...
    4e04:	00530001 	subseq	r0, r3, r1
	...
    4e14:	01000000 	mrseq	r0, (UNDEF: 0)
    4e18:	00005200 	andeq	r5, r0, r0, lsl #4
    4e1c:	00000000 	andeq	r0, r0, r0
    4e20:	00010000 	andeq	r0, r1, r0
    4e24:	00000052 	andeq	r0, r0, r2, asr r0
    4e28:	00000000 	andeq	r0, r0, r0
    4e2c:	72000400 	andvc	r0, r0, #0, 8
    4e30:	009f1f00 	addseq	r1, pc, r0, lsl #30
	...
    4e40:	01000000 	mrseq	r0, (UNDEF: 0)
    4e44:	00005300 	andeq	r5, r0, r0, lsl #6
    4e48:	00000000 	andeq	r0, r0, r0
    4e4c:	00030000 	andeq	r0, r3, r0
    4e50:	009f7f73 	addseq	r7, pc, r3, ror pc	; <UNPREDICTABLE>
    4e54:	00000000 	andeq	r0, r0, r0
    4e58:	01000000 	mrseq	r0, (UNDEF: 0)
    4e5c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    4e6c:	00010000 	andeq	r0, r1, r0
    4e70:	00000052 	andeq	r0, r0, r2, asr r0
    4e74:	00000000 	andeq	r0, r0, r0
    4e78:	72000400 	andvc	r0, r0, #0, 8
    4e7c:	009f1f00 	addseq	r1, pc, r0, lsl #30
	...
    4e8c:	01000000 	mrseq	r0, (UNDEF: 0)
    4e90:	00005600 	andeq	r5, r0, r0, lsl #12
	...
    4ea0:	00010000 	andeq	r0, r1, r0
    4ea4:	00000052 	andeq	r0, r0, r2, asr r0
	...
    4eb4:	30000200 	andcc	r0, r0, r0, lsl #4
    4eb8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ebc:	00000000 	andeq	r0, r0, r0
    4ec0:	53000100 	movwpl	r0, #256	; 0x100
	...
    4ed4:	00550001 	subseq	r0, r5, r1
	...
    4ee4:	01000000 	mrseq	r0, (UNDEF: 0)
    4ee8:	00005d00 	andeq	r5, r0, r0, lsl #26
	...
    4ef8:	00010000 	andeq	r0, r1, r0
    4efc:	0000005d 	andeq	r0, r0, sp, asr r0
	...
    4f0c:	30000200 	andcc	r0, r0, r0, lsl #4
    4f10:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4f14:	00000000 	andeq	r0, r0, r0
    4f18:	5b000100 	blpl	5320 <__Stack_Size+0x4b20>
	...
    4f24:	00530001 	subseq	r0, r3, r1
    4f28:	00000000 	andeq	r0, r0, r0
    4f2c:	01000000 	mrseq	r0, (UNDEF: 0)
    4f30:	00005b00 	andeq	r5, r0, r0, lsl #22
	...
    4f40:	00020000 	andeq	r0, r2, r0
    4f44:	00009f30 	andeq	r9, r0, r0, lsr pc
    4f48:	00000000 	andeq	r0, r0, r0
    4f4c:	00010000 	andeq	r0, r1, r0
    4f50:	00000054 	andeq	r0, r0, r4, asr r0
    4f54:	00000000 	andeq	r0, r0, r0
    4f58:	74000300 	strvc	r0, [r0], #-768	; 0x300
    4f5c:	00009f7f 	andeq	r9, r0, pc, ror pc
    4f60:	00000000 	andeq	r0, r0, r0
    4f64:	00010000 	andeq	r0, r1, r0
    4f68:	00000054 	andeq	r0, r0, r4, asr r0
	...
    4f78:	53000100 	movwpl	r0, #256	; 0x100
	...
    4f84:	00530001 	subseq	r0, r3, r1
    4f88:	00000000 	andeq	r0, r0, r0
    4f8c:	04000000 	streq	r0, [r0], #-0
    4f90:	1f007300 	svcne	0x00007300
    4f94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4fa4:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    4fb0:	7f740003 	svcvc	0x00740003
    4fb4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4fb8:	00000000 	andeq	r0, r0, r0
    4fbc:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    4fd0:	00530001 	subseq	r0, r3, r1
    4fd4:	00000000 	andeq	r0, r0, r0
    4fd8:	04000000 	streq	r0, [r0], #-0
    4fdc:	1f007300 	svcne	0x00007300
    4fe0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4ff0:	5d000100 	stfpls	f0, [r0, #-0]
	...
    5004:	00560001 	subseq	r0, r6, r1
	...
    5014:	01000000 	mrseq	r0, (UNDEF: 0)
    5018:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    5028:	00020000 	andeq	r0, r2, r0
    502c:	00009f30 	andeq	r9, r0, r0, lsr pc
    5030:	00000000 	andeq	r0, r0, r0
    5034:	00010000 	andeq	r0, r1, r0
    5038:	00000052 	andeq	r0, r0, r2, asr r0
	...
    5048:	59000100 	stmdbpl	r0, {r8}
	...
    5054:	00790004 	rsbseq	r0, r9, r4
    5058:	00009f1f 	andeq	r9, r0, pc, lsl pc
	...
    5068:	00010000 	andeq	r0, r1, r0
    506c:	0000005d 	andeq	r0, r0, sp, asr r0
	...
    507c:	59000100 	stmdbpl	r0, {r8}
	...
    5090:	9f300002 	svcls	0x00300002
	...
    509c:	00530001 	subseq	r0, r3, r1
	...
    50ac:	01000000 	mrseq	r0, (UNDEF: 0)
    50b0:	00005000 	andeq	r5, r0, r0
    50b4:	00000000 	andeq	r0, r0, r0
    50b8:	00010000 	andeq	r0, r1, r0
    50bc:	00000056 	andeq	r0, r0, r6, asr r0
	...
    50cc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    50d8:	00580001 	subseq	r0, r8, r1
	...
    50e8:	01000000 	mrseq	r0, (UNDEF: 0)
    50ec:	00005200 	andeq	r5, r0, r0, lsl #4
    50f0:	00000000 	andeq	r0, r0, r0
    50f4:	00010000 	andeq	r0, r1, r0
    50f8:	00000057 	andeq	r0, r0, r7, asr r0
	...
    5108:	32000200 	andcc	r0, r0, #0, 4
    510c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5110:	00000000 	andeq	r0, r0, r0
    5114:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    5120:	00550001 	subseq	r0, r5, r1
    5124:	00000000 	andeq	r0, r0, r0
    5128:	01000000 	mrseq	r0, (UNDEF: 0)
    512c:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    513c:	00020000 	andeq	r0, r2, r0
    5140:	00009f30 	andeq	r9, r0, r0, lsr pc
    5144:	00000000 	andeq	r0, r0, r0
    5148:	00010000 	andeq	r0, r1, r0
    514c:	00000054 	andeq	r0, r0, r4, asr r0
    5150:	00000000 	andeq	r0, r0, r0
    5154:	74000300 	strvc	r0, [r0], #-768	; 0x300
    5158:	00009f7f 	andeq	r9, r0, pc, ror pc
    515c:	00000000 	andeq	r0, r0, r0
    5160:	00010000 	andeq	r0, r1, r0
    5164:	00000054 	andeq	r0, r0, r4, asr r0
    5168:	00000000 	andeq	r0, r0, r0
    516c:	75000300 	strvc	r0, [r0, #-768]	; 0x300
    5170:	00009f7f 	andeq	r9, r0, pc, ror pc
    5174:	00000000 	andeq	r0, r0, r0
    5178:	00010000 	andeq	r0, r1, r0
    517c:	00000055 	andeq	r0, r0, r5, asr r0
    5180:	00000000 	andeq	r0, r0, r0
    5184:	75000300 	strvc	r0, [r0, #-768]	; 0x300
    5188:	00009f01 	andeq	r9, r0, r1, lsl #30
    518c:	00000000 	andeq	r0, r0, r0
    5190:	00010000 	andeq	r0, r1, r0
    5194:	00000055 	andeq	r0, r0, r5, asr r0
    5198:	00000000 	andeq	r0, r0, r0
    519c:	75000300 	strvc	r0, [r0, #-768]	; 0x300
    51a0:	00009f01 	andeq	r9, r0, r1, lsl #30
    51a4:	00000000 	andeq	r0, r0, r0
    51a8:	00010000 	andeq	r0, r1, r0
    51ac:	00000054 	andeq	r0, r0, r4, asr r0
	...
    51bc:	52000100 	andpl	r0, r0, #0, 2
	...
    51c8:	00570001 	subseq	r0, r7, r1
	...
    51d8:	01000000 	mrseq	r0, (UNDEF: 0)
    51dc:	00005d00 	andeq	r5, r0, r0, lsl #26
    51e0:	00000000 	andeq	r0, r0, r0
    51e4:	00040000 	andeq	r0, r4, r0
    51e8:	9f7fa891 	svcls	0x007fa891
	...
    51f4:	005d0001 	subseq	r0, sp, r1
	...
    5204:	02000000 	andeq	r0, r0, #0
    5208:	009f3100 	addseq	r3, pc, r0, lsl #2
    520c:	00000000 	andeq	r0, r0, r0
    5210:	02000000 	andeq	r0, r0, #0
    5214:	009f3000 	addseq	r3, pc, r0
	...
    5224:	02000000 	andeq	r0, r0, #0
    5228:	009f3000 	addseq	r3, pc, r0
    522c:	00000000 	andeq	r0, r0, r0
    5230:	02000000 	andeq	r0, r0, #0
    5234:	009f3100 	addseq	r3, pc, r0, lsl #2
    5238:	00000000 	andeq	r0, r0, r0
    523c:	02000000 	andeq	r0, r0, #0
    5240:	009f3200 	addseq	r3, pc, r0, lsl #4
    5244:	00000000 	andeq	r0, r0, r0
    5248:	02000000 	andeq	r0, r0, #0
    524c:	009f3300 	addseq	r3, pc, r0, lsl #6
    5250:	00000000 	andeq	r0, r0, r0
    5254:	02000000 	andeq	r0, r0, #0
    5258:	009f3400 	addseq	r3, pc, r0, lsl #8
	...
    5268:	01000000 	mrseq	r0, (UNDEF: 0)
    526c:	00005200 	andeq	r5, r0, r0, lsl #4
    5270:	00000000 	andeq	r0, r0, r0
    5274:	00030000 	andeq	r0, r3, r0
    5278:	009f0172 	addseq	r0, pc, r2, ror r1	; <UNPREDICTABLE>
    527c:	00000000 	andeq	r0, r0, r0
    5280:	01000000 	mrseq	r0, (UNDEF: 0)
    5284:	00005200 	andeq	r5, r0, r0, lsl #4
    5288:	00000000 	andeq	r0, r0, r0
    528c:	00010000 	andeq	r0, r1, r0
    5290:	00000055 	andeq	r0, r0, r5, asr r0
    5294:	00000000 	andeq	r0, r0, r0
    5298:	75000300 	strvc	r0, [r0, #-768]	; 0x300
    529c:	00009f01 	andeq	r9, r0, r1, lsl #30
    52a0:	00000000 	andeq	r0, r0, r0
    52a4:	00030000 	andeq	r0, r3, r0
    52a8:	009f0172 	addseq	r0, pc, r2, ror r1	; <UNPREDICTABLE>
    52ac:	00000000 	andeq	r0, r0, r0
    52b0:	03000000 	movweq	r0, #0
    52b4:	9ff80900 	svcls	0x00f80900
	...
    52c8:	00770005 	rsbseq	r0, r7, r5
    52cc:	00220072 	eoreq	r0, r2, r2, ror r0
    52d0:	00000000 	andeq	r0, r0, r0
    52d4:	05000000 	streq	r0, [r0, #-0]
    52d8:	31007300 	mrscc	r7, LR_irq
    52dc:	00009f25 	andeq	r9, r0, r5, lsr #30
    52e0:	00000000 	andeq	r0, r0, r0
    52e4:	00020000 	andeq	r0, r2, r0
    52e8:	00007f77 	andeq	r7, r0, r7, ror pc
	...
    52f8:	00030000 	andeq	r0, r3, r0
    52fc:	009f4891 	umullseq	r4, pc, r1, r8	; <UNPREDICTABLE>
    5300:	00000000 	andeq	r0, r0, r0
    5304:	01000000 	mrseq	r0, (UNDEF: 0)
    5308:	00005400 	andeq	r5, r0, r0, lsl #8
    530c:	00000000 	andeq	r0, r0, r0
    5310:	00030000 	andeq	r0, r3, r0
    5314:	009f7074 	addseq	r7, pc, r4, ror r0	; <UNPREDICTABLE>
    5318:	00000000 	andeq	r0, r0, r0
    531c:	03000000 	movweq	r0, #0
    5320:	9f607400 	svcls	0x00607400
	...
    532c:	48910003 	ldmmi	r1, {r0, r1}
    5330:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5334:	00000000 	andeq	r0, r0, r0
    5338:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    5344:	48910003 	ldmmi	r1, {r0, r1}
    5348:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5358:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    5364:	00560001 	subseq	r0, r6, r1
	...
    5374:	01000000 	mrseq	r0, (UNDEF: 0)
    5378:	00005000 	andeq	r5, r0, r0
    537c:	00000000 	andeq	r0, r0, r0
    5380:	00010000 	andeq	r0, r1, r0
    5384:	00000054 	andeq	r0, r0, r4, asr r0
    5388:	00000000 	andeq	r0, r0, r0
    538c:	f3000400 	vshl.u8	d0, d0, d0
    5390:	009f5001 	addseq	r5, pc, r1
	...
    53a0:	01000000 	mrseq	r0, (UNDEF: 0)
    53a4:	00005100 	andeq	r5, r0, r0, lsl #2
    53a8:	00000000 	andeq	r0, r0, r0
    53ac:	00010000 	andeq	r0, r1, r0
    53b0:	00000052 	andeq	r0, r0, r2, asr r0
    53b4:	00000000 	andeq	r0, r0, r0
    53b8:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    53c4:	01f30004 	mvnseq	r0, r4
    53c8:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    53d8:	00010000 	andeq	r0, r1, r0
    53dc:	00000050 	andeq	r0, r0, r0, asr r0
    53e0:	00000000 	andeq	r0, r0, r0
    53e4:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    53f0:	01f30004 	mvnseq	r0, r4
    53f4:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    5404:	00010000 	andeq	r0, r1, r0
    5408:	00000051 	andeq	r0, r0, r1, asr r0
    540c:	00000000 	andeq	r0, r0, r0
    5410:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    541c:	01f30004 	mvnseq	r0, r4
    5420:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    5430:	00010000 	andeq	r0, r1, r0
    5434:	00000052 	andeq	r0, r0, r2, asr r0
    5438:	00000000 	andeq	r0, r0, r0
    543c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    5448:	01f30004 	mvnseq	r0, r4
    544c:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    545c:	00010000 	andeq	r0, r1, r0
    5460:	00000053 	andeq	r0, r0, r3, asr r0
    5464:	00000000 	andeq	r0, r0, r0
    5468:	58000100 	stmdapl	r0, {r8}
	...
    5474:	01f30004 	mvnseq	r0, r4
    5478:	00009f53 	andeq	r9, r0, r3, asr pc
	...
    5488:	00010000 	andeq	r0, r1, r0
    548c:	00000052 	andeq	r0, r0, r2, asr r0
    5490:	00000000 	andeq	r0, r0, r0
    5494:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    54a0:	01f30004 	mvnseq	r0, r4
    54a4:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    54b4:	00010000 	andeq	r0, r1, r0
    54b8:	00000051 	andeq	r0, r0, r1, asr r0
    54bc:	00000000 	andeq	r0, r0, r0
    54c0:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    54cc:	01f30004 	mvnseq	r0, r4
    54d0:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    54e0:	00010000 	andeq	r0, r1, r0
    54e4:	00000058 	andeq	r0, r0, r8, asr r0
    54e8:	00000000 	andeq	r0, r0, r0
    54ec:	f3000400 	vshl.u8	d0, d0, d0
    54f0:	009f5301 	addseq	r5, pc, r1, lsl #6
	...
    5500:	01000000 	mrseq	r0, (UNDEF: 0)
    5504:	00005400 	andeq	r5, r0, r0, lsl #8
    5508:	00000000 	andeq	r0, r0, r0
    550c:	00040000 	andeq	r0, r4, r0
    5510:	9f5101f3 	svcls	0x005101f3
	...
    5524:	00550001 	subseq	r0, r5, r1
    5528:	00000000 	andeq	r0, r0, r0
    552c:	04000000 	streq	r0, [r0], #-0
    5530:	5001f300 	andpl	pc, r1, r0, lsl #6
    5534:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5538:	00000000 	andeq	r0, r0, r0
    553c:	00342000 	eorseq	r2, r4, r0
    5540:	00342c08 	eorseq	r2, r4, r8, lsl #24
    5544:	50000108 	andpl	r0, r0, r8, lsl #2
    5548:	0800342c 	stmdaeq	r0, {r2, r3, r5, sl, ip, sp}
    554c:	08003436 	stmdaeq	r0, {r1, r2, r4, r5, sl, ip, sp}
    5550:	36520001 	ldrbcc	r0, [r2], -r1
    5554:	38080034 	stmdacc	r8, {r2, r4, r5}
    5558:	01080034 	tsteq	r8, r4, lsr r0
    555c:	34385300 	ldrtcc	r5, [r8], #-768	; 0x300
    5560:	34400800 	strbcc	r0, [r0], #-2048	; 0x800
    5564:	00010800 	andeq	r0, r1, r0, lsl #16
    5568:	00344054 	eorseq	r4, r4, r4, asr r0
    556c:	00344808 	eorseq	r4, r4, r8, lsl #16
    5570:	50000108 	andpl	r0, r0, r8, lsl #2
    5574:	08003448 	stmdaeq	r0, {r3, r6, sl, ip, sp}
    5578:	0800536c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, ip, lr}
    557c:	54910002 	ldrpl	r0, [r1], #2
    5580:	0800536c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, ip, lr}
    5584:	08005384 	stmdaeq	r0, {r2, r7, r8, r9, ip, lr}
    5588:	547d0002 	ldrbtpl	r0, [sp], #-2
	...
    5594:	08003420 	stmdaeq	r0, {r5, sl, ip, sp}
    5598:	08003b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, ip, sp}
    559c:	60510001 	subsvs	r0, r1, r1
    55a0:	8408003b 	strhi	r0, [r8], #-59	; 0x3b
    55a4:	04080053 	streq	r0, [r8], #-83	; 0x53
    55a8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    55ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    55b0:	00000000 	andeq	r0, r0, r0
    55b4:	003b9c00 	eorseq	r9, fp, r0, lsl #24
    55b8:	003ba408 	eorseq	sl, fp, r8, lsl #8
    55bc:	5a000108 	bpl	59e4 <__Stack_Size+0x51e4>
    55c0:	08003bd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, fp, ip, sp}
    55c4:	08003c0e 	stmdaeq	r0, {r1, r2, r3, sl, fp, ip, sp}
    55c8:	3e5c0001 	cdpcc	0, 5, cr0, cr12, cr1, {0}
    55cc:	8e08003c 	mcrhi	0, 0, r0, cr8, cr12, {1}
    55d0:	0108003c 	tsteq	r8, ip, lsr r0
    55d4:	3cb65000 	ldccc	0, cr5, [r6]
    55d8:	3d020800 	stccc	8, cr0, [r2, #-0]
    55dc:	00010800 	andeq	r0, r1, r0, lsl #16
    55e0:	003d2c52 	eorseq	r2, sp, r2, asr ip
    55e4:	003d8008 	eorseq	r8, sp, r8
    55e8:	53000108 	movwpl	r0, #264	; 0x108
    55ec:	08003d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, ip, sp}
    55f0:	08003e06 	stmdaeq	r0, {r1, r2, r9, sl, fp, ip, sp}
    55f4:	10500001 	subsne	r0, r0, r1
    55f8:	5a08003e 	bpl	2056f8 <__Stack_Size+0x204ef8>
    55fc:	0108003e 	tsteq	r8, lr, lsr r0
    5600:	3e885c00 	cdpcc	12, 8, cr5, cr8, cr0, {0}
    5604:	3ed80800 	cdpcc	8, 13, cr0, cr8, cr0, {0}
    5608:	00010800 	andeq	r0, r1, r0, lsl #16
    560c:	003f0c56 	eorseq	r0, pc, r6, asr ip	; <UNPREDICTABLE>
    5610:	003f4008 	eorseq	r4, pc, r8
    5614:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    5618:	08003f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, ip, sp}
    561c:	08003fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip, sp}
    5620:	16590001 	ldrbne	r0, [r9], -r1
    5624:	5e080040 	cdppl	0, 0, cr0, cr8, cr0, {2}
    5628:	01080040 	tsteq	r8, r0, asr #32
    562c:	40a05800 	adcmi	r5, r0, r0, lsl #16
    5630:	40c20800 	sbcmi	r0, r2, r0, lsl #16
    5634:	00010800 	andeq	r0, r1, r0, lsl #16
    5638:	00410e57 	subeq	r0, r1, r7, asr lr
    563c:	00412408 	subeq	r2, r1, r8, lsl #8
    5640:	58000108 	stmdapl	r0, {r3, r8}
    5644:	0800417e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, lr}
    5648:	080041a8 	stmdaeq	r0, {r3, r5, r7, r8, lr}
    564c:	f6570001 			; <UNDEFINED> instruction: 0xf6570001
    5650:	16080041 	strne	r0, [r8], -r1, asr #32
    5654:	01080042 	tsteq	r8, r2, asr #32
    5658:	42665000 	rsbmi	r5, r6, #0
    565c:	42860800 	addmi	r0, r6, #0, 16
    5660:	00010800 	andeq	r0, r1, r0, lsl #16
    5664:	0042d852 	subeq	sp, r2, r2, asr r8
    5668:	0042f408 	subeq	pc, r2, r8, lsl #8
    566c:	53000108 	movwpl	r0, #264	; 0x108
    5670:	08004342 	stmdaeq	r0, {r1, r6, r8, r9, lr}
    5674:	08004366 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, lr}
    5678:	da520001 	ble	1485684 <__Stack_Size+0x1484e84>
    567c:	06080043 	streq	r0, [r8], -r3, asr #32
    5680:	01080044 	tsteq	r8, r4, asr #32
    5684:	444e5300 	strbmi	r5, [lr], #-768	; 0x300
    5688:	446e0800 	strbtmi	r0, [lr], #-2048	; 0x800
    568c:	00010800 	andeq	r0, r1, r0, lsl #16
    5690:	0044c452 	subeq	ip, r4, r2, asr r4
    5694:	0044d808 	subeq	sp, r4, r8, lsl #16
    5698:	53000108 	movwpl	r0, #264	; 0x108
    569c:	08004534 	stmdaeq	r0, {r2, r4, r5, r8, sl, lr}
    56a0:	0800455e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sl, lr}
    56a4:	ae590001 	cdpge	0, 5, cr0, cr9, cr1, {0}
    56a8:	dc080045 	stcle	0, cr0, [r8], {69}	; 0x45
    56ac:	01080045 	tsteq	r8, r5, asr #32
    56b0:	460a5c00 	strmi	r5, [sl], -r0, lsl #24
    56b4:	46520800 	ldrbmi	r0, [r2], -r0, lsl #16
    56b8:	00010800 	andeq	r0, r1, r0, lsl #16
    56bc:	0046a258 	subeq	sl, r6, r8, asr r2
    56c0:	0046d608 	subeq	sp, r6, r8, lsl #12
    56c4:	5a000108 	bpl	5aec <__Stack_Size+0x52ec>
    56c8:	0800471e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, lr}
    56cc:	08004740 	stmdaeq	r0, {r6, r8, r9, sl, lr}
    56d0:	8c5c0001 	mrrchi	0, 0, r0, ip, cr1
    56d4:	b2080047 	andlt	r0, r8, #71	; 0x47
    56d8:	01080047 	tsteq	r8, r7, asr #32
    56dc:	48305a00 	ldmdami	r0!, {r9, fp, ip, lr}
    56e0:	48520800 	ldmdami	r2, {fp}^
    56e4:	00010800 	andeq	r0, r1, r0, lsl #16
    56e8:	0048a854 	subeq	sl, r8, r4, asr r8
    56ec:	0048c808 	subeq	ip, r8, r8, lsl #16
    56f0:	51000108 	tstpl	r0, r8, lsl #2
    56f4:	0800491c 	stmdaeq	r0, {r2, r3, r4, r8, fp, lr}
    56f8:	0800493c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, lr}
    56fc:	8c570001 	mrrchi	0, 0, r0, r7, cr1
    5700:	ac080049 	stcge	0, cr0, [r8], {73}	; 0x49
    5704:	01080049 	tsteq	r8, r9, asr #32
    5708:	4a025300 	bmi	9a310 <__Stack_Size+0x99b10>
    570c:	4a180800 	bmi	607714 <__Stack_Size+0x606f14>
    5710:	00010800 	andeq	r0, r1, r0, lsl #16
    5714:	004a7457 	subeq	r7, sl, r7, asr r4
    5718:	004a9408 	subeq	r9, sl, r8, lsl #8
    571c:	56000108 	strpl	r0, [r0], -r8, lsl #2
    5720:	08004aee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, fp, lr}
    5724:	08004b12 	stmdaeq	r0, {r1, r4, r8, r9, fp, lr}
    5728:	68590001 	ldmdavs	r9, {r0}^
    572c:	8808004b 	stmdahi	r8, {r0, r1, r3, r6}
    5730:	0108004b 	tsteq	r8, fp, asr #32
    5734:	4bc45800 	blmi	ff11b73c <BootRAM+0xe08bedd>
    5738:	4c400800 	mcrrmi	8, 0, r0, r0, cr0
    573c:	00010800 	andeq	r0, r1, r0, lsl #16
    5740:	004c6c58 	subeq	r6, ip, r8, asr ip
    5744:	004cae08 	subeq	sl, ip, r8, lsl #28
    5748:	54000108 	strpl	r0, [r0], #-264	; 0x108
    574c:	08004ce2 	stmdaeq	r0, {r1, r5, r6, r7, sl, fp, lr}
    5750:	08004d36 	stmdaeq	r0, {r1, r2, r4, r5, r8, sl, fp, lr}
    5754:	60570001 	subsvs	r0, r7, r1
    5758:	a808004d 	stmdage	r8, {r0, r2, r3, r6}
    575c:	0108004d 	tsteq	r8, sp, asr #32
    5760:	4dde5700 	ldclmi	7, cr5, [lr]
    5764:	4e180800 	cdpmi	8, 1, cr0, cr8, cr0, {0}
    5768:	00010800 	andeq	r0, r1, r0, lsl #16
    576c:	004e5a53 	subeq	r5, lr, r3, asr sl
    5770:	004e9c08 	subeq	r9, lr, r8, lsl #24
    5774:	50000108 	andpl	r0, r0, r8, lsl #2
    5778:	08004eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, lr}
    577c:	08004f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, lr}
    5780:	66560001 	ldrbvs	r0, [r6], -r1
    5784:	8408004f 	strhi	r0, [r8], #-79	; 0x4f
    5788:	0108004f 	tsteq	r8, pc, asr #32
    578c:	4ffe5c00 	svcmi	0x00fe5c00
    5790:	501e0800 	andspl	r0, lr, r0, lsl #16
    5794:	00010800 	andeq	r0, r1, r0, lsl #16
    5798:	0050b650 	subseq	fp, r0, r0, asr r6
    579c:	0050da08 	subseq	sp, r0, r8, lsl #20
    57a0:	58000108 	stmdapl	r0, {r3, r8}
    57a4:	080050da 	stmdaeq	r0, {r1, r3, r4, r6, r7, ip, lr}
    57a8:	080050ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, ip, lr}
    57ac:	007a0006 	rsbseq	r0, sl, r6
    57b0:	9f220079 	svcls	0x00220079
    57b4:	080050ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, ip, lr}
    57b8:	0800511e 	stmdaeq	r0, {r1, r2, r3, r4, r8, ip, lr}
    57bc:	0074002a 	rsbseq	r0, r4, sl, lsr #32
    57c0:	24141445 	ldrcs	r1, [r4], #-1093	; 0x445
    57c4:	20231f17 	eorcs	r1, r3, r7, lsl pc
    57c8:	00742125 	rsbseq	r2, r4, r5, lsr #2
    57cc:	1f141436 	svcne	0x00141436
    57d0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    57d4:	74272125 	strtvc	r2, [r7], #-293	; 0x125
    57d8:	14143700 	ldrne	r3, [r4], #-1792	; 0x700
    57dc:	231f1724 	tstcs	pc, #36, 14	; 0x900000
    57e0:	27212520 	strcs	r2, [r1, -r0, lsr #10]!
    57e4:	9f22007a 	svcls	0x0022007a
    57e8:	08005140 	stmdaeq	r0, {r6, r8, ip, lr}
    57ec:	080051a2 	stmdaeq	r0, {r1, r5, r7, r8, ip, lr}
    57f0:	d05a0001 	subsle	r0, sl, r1
    57f4:	dc080051 	stcle	0, cr0, [r8], {81}	; 0x51
    57f8:	01080051 	qaddeq	r0, r1, r8
    57fc:	52385100 	eorspl	r5, r8, #0, 2
    5800:	524c0800 	subpl	r0, ip, #0, 16
    5804:	00010800 	andeq	r0, r1, r0, lsl #16
    5808:	0052ac54 	subseq	sl, r2, r4, asr ip
    580c:	0052dc08 	subseq	sp, r2, r8, lsl #24
    5810:	56000108 	strpl	r0, [r0], -r8, lsl #2
    5814:	08005334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip, lr}
    5818:	08005346 	stmdaeq	r0, {r1, r2, r6, r8, r9, ip, lr}
    581c:	00570001 	subseq	r0, r7, r1
    5820:	00000000 	andeq	r0, r0, r0
    5824:	9c000000 	stcls	0, cr0, [r0], {-0}
    5828:	d608003b 			; <UNDEFINED> instruction: 0xd608003b
    582c:	3808003b 	stmdacc	r8, {r0, r1, r3, r4, r5}
    5830:	7b007600 	blvc	23038 <__Stack_Size+0x22838>
    5834:	94912100 	ldrls	r2, [r1], #256	; 0x100
    5838:	761a067f 			; <UNDEFINED> instruction: 0x761a067f
    583c:	1a007b00 	bne	24444 <__Stack_Size+0x23c44>
    5840:	3d007621 	stccc	6, cr7, [r0, #-132]	; 0xffffff7c
    5844:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5848:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    584c:	32007621 	andcc	r7, r0, #34603008	; 0x2100000
    5850:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5854:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5858:	00762721 	rsbseq	r2, r6, r1, lsr #14
    585c:	1f141446 	svcne	0x00141446
    5860:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5864:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5868:	003bd69f 	mlaseq	fp, pc, r6, sp	; <UNPREDICTABLE>
    586c:	003c3e08 	eorseq	r3, ip, r8, lsl #28
    5870:	77003608 	strvc	r3, [r0, -r8, lsl #12]
    5874:	21007600 	tstcs	r0, r0, lsl #12
    5878:	771a007b 			; <UNDEFINED> instruction: 0x771a007b
    587c:	1a007600 	bne	23084 <__Stack_Size+0x22884>
    5880:	3d007721 	stccc	7, cr7, [r0, #-132]	; 0xffffff7c
    5884:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5888:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    588c:	32007721 	andcc	r7, r0, #8650752	; 0x840000
    5890:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5894:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5898:	00772721 	rsbseq	r2, r7, r1, lsr #14
    589c:	1f141446 	svcne	0x00141446
    58a0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    58a4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    58a8:	003c3e9f 	mlaseq	ip, pc, lr, r3	; <UNPREDICTABLE>
    58ac:	003cb608 	eorseq	fp, ip, r8, lsl #12
    58b0:	75003608 	strvc	r3, [r0, #-1544]	; 0x608
    58b4:	21007700 	tstcs	r0, r0, lsl #14
    58b8:	751a0076 	ldrvc	r0, [sl, #-118]	; 0x76
    58bc:	1a007700 	bne	234c4 <__Stack_Size+0x22cc4>
    58c0:	3d007521 	cfstr32cc	mvfx7, [r0, #-132]	; 0xffffff7c
    58c4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    58c8:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    58cc:	32007521 	andcc	r7, r0, #138412032	; 0x8400000
    58d0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    58d4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    58d8:	00752721 	rsbseq	r2, r5, r1, lsr #14
    58dc:	1f141446 	svcne	0x00141446
    58e0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    58e4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    58e8:	003cb69f 	mlaseq	ip, pc, r6, fp	; <UNPREDICTABLE>
    58ec:	003d2c08 	eorseq	r2, sp, r8, lsl #24
    58f0:	78003608 	stmdavc	r0, {r3, r9, sl, ip, sp}
    58f4:	21007500 	tstcs	r0, r0, lsl #10
    58f8:	781a0077 	ldmdavc	sl, {r0, r1, r2, r4, r5, r6}
    58fc:	1a007500 	bne	22d04 <__Stack_Size+0x22504>
    5900:	3d007821 	stccc	8, cr7, [r0, #-132]	; 0xffffff7c
    5904:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5908:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    590c:	32007821 	andcc	r7, r0, #2162688	; 0x210000
    5910:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5914:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5918:	00782721 	rsbseq	r2, r8, r1, lsr #14
    591c:	1f141446 	svcne	0x00141446
    5920:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5924:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5928:	003d2c9f 	mlaseq	sp, pc, ip, r2	; <UNPREDICTABLE>
    592c:	003d9c08 	eorseq	r9, sp, r8, lsl #24
    5930:	7a003608 	bvc	13158 <__Stack_Size+0x12958>
    5934:	21007800 	tstcs	r0, r0, lsl #16
    5938:	7a1a0075 	bvc	685b14 <__Stack_Size+0x685314>
    593c:	1a007800 	bne	23944 <__Stack_Size+0x23144>
    5940:	3d007a21 	vstrcc	s14, [r0, #-132]	; 0xffffff7c
    5944:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5948:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    594c:	32007a21 	andcc	r7, r0, #135168	; 0x21000
    5950:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5954:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5958:	007a2721 	rsbseq	r2, sl, r1, lsr #14
    595c:	1f141446 	svcne	0x00141446
    5960:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5964:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5968:	003d9c9f 	mlaseq	sp, pc, ip, r9	; <UNPREDICTABLE>
    596c:	003e1008 	eorseq	r1, lr, r8
    5970:	71003608 	tstvc	r0, r8, lsl #12
    5974:	21007a00 	tstcs	r0, r0, lsl #20
    5978:	711a0078 	tstvc	sl, r8, ror r0
    597c:	1a007a00 	bne	24184 <__Stack_Size+0x23984>
    5980:	3d007121 	stfccs	f7, [r0, #-132]	; 0xffffff7c
    5984:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5988:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    598c:	32007121 	andcc	r7, r0, #1073741832	; 0x40000008
    5990:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5994:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5998:	00712721 	rsbseq	r2, r1, r1, lsr #14
    599c:	1f141446 	svcne	0x00141446
    59a0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    59a4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    59a8:	003e109f 	mlaseq	lr, pc, r0, r1	; <UNPREDICTABLE>
    59ac:	003e8808 	eorseq	r8, lr, r8, lsl #16
    59b0:	74003608 	strvc	r3, [r0], #-1544	; 0x608
    59b4:	21007100 	mrscs	r7, (UNDEF: 16)
    59b8:	741a007a 	ldrvc	r0, [sl], #-122	; 0x7a
    59bc:	1a007100 	bne	21dc4 <__Stack_Size+0x215c4>
    59c0:	3d007421 	cfstrscc	mvf7, [r0, #-132]	; 0xffffff7c
    59c4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    59c8:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    59cc:	32007421 	andcc	r7, r0, #553648128	; 0x21000000
    59d0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    59d4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    59d8:	00742721 	rsbseq	r2, r4, r1, lsr #14
    59dc:	1f141446 	svcne	0x00141446
    59e0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    59e4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    59e8:	003e889f 	mlaseq	lr, pc, r8, r8	; <UNPREDICTABLE>
    59ec:	003f0c08 	eorseq	r0, pc, r8, lsl #24
    59f0:	70003608 	andvc	r3, r0, r8, lsl #12
    59f4:	21007400 	tstcs	r0, r0, lsl #8
    59f8:	701a0071 	andsvc	r0, sl, r1, ror r0
    59fc:	1a007400 	bne	22a04 <__Stack_Size+0x22204>
    5a00:	3d007021 	stccc	0, cr7, [r0, #-132]	; 0xffffff7c
    5a04:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5a08:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5a0c:	32007021 	andcc	r7, r0, #33	; 0x21
    5a10:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5a14:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5a18:	00702721 	rsbseq	r2, r0, r1, lsr #14
    5a1c:	1f141446 	svcne	0x00141446
    5a20:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5a24:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5a28:	003f0c9f 	mlaseq	pc, pc, ip, r0	; <UNPREDICTABLE>
    5a2c:	003f9608 	eorseq	r9, pc, r8, lsl #12
    5a30:	72003608 	andvc	r3, r0, #8, 12	; 0x800000
    5a34:	21007000 	mrscs	r7, (UNDEF: 0)
    5a38:	721a0074 	andsvc	r0, sl, #116	; 0x74
    5a3c:	1a007000 	bne	21a44 <__Stack_Size+0x21244>
    5a40:	3d007221 	sfmcc	f7, 4, [r0, #-132]	; 0xffffff7c
    5a44:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5a48:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5a4c:	32007221 	andcc	r7, r0, #268435458	; 0x10000002
    5a50:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5a54:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5a58:	00722721 	rsbseq	r2, r2, r1, lsr #14
    5a5c:	1f141446 	svcne	0x00141446
    5a60:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5a64:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5a68:	003f969f 	mlaseq	pc, pc, r6, r9	; <UNPREDICTABLE>
    5a6c:	00401608 	subeq	r1, r0, r8, lsl #12
    5a70:	73003608 	movwvc	r3, #1544	; 0x608
    5a74:	21007200 	mrscs	r7, R8_usr
    5a78:	731a0070 	tstvc	sl, #112	; 0x70
    5a7c:	1a007200 	bne	22284 <__Stack_Size+0x21a84>
    5a80:	3d007321 	stccc	3, cr7, [r0, #-132]	; 0xffffff7c
    5a84:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5a88:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5a8c:	32007321 	andcc	r7, r0, #-2080374784	; 0x84000000
    5a90:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5a94:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5a98:	00732721 	rsbseq	r2, r3, r1, lsr #14
    5a9c:	1f141446 	svcne	0x00141446
    5aa0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5aa4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5aa8:	0040169f 	umaaleq	r1, r0, pc, r6	; <UNPREDICTABLE>
    5aac:	0040a008 	subeq	sl, r0, r8
    5ab0:	7c003608 	stcvc	6, cr3, [r0], {8}
    5ab4:	21007300 	mrscs	r7, LR_irq
    5ab8:	7c1a0072 	ldcvc	0, cr0, [sl], {114}	; 0x72
    5abc:	1a007300 	bne	226c4 <__Stack_Size+0x21ec4>
    5ac0:	3d007c21 	stccc	12, cr7, [r0, #-132]	; 0xffffff7c
    5ac4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5ac8:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5acc:	32007c21 	andcc	r7, r0, #8448	; 0x2100
    5ad0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5ad4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5ad8:	007c2721 	rsbseq	r2, ip, r1, lsr #14
    5adc:	1f141446 	svcne	0x00141446
    5ae0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5ae4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5ae8:	0040a09f 	umaaleq	sl, r0, pc, r0	; <UNPREDICTABLE>
    5aec:	00410e08 	subeq	r0, r1, r8, lsl #28
    5af0:	76003608 	strvc	r3, [r0], -r8, lsl #12
    5af4:	21007c00 	tstcs	r0, r0, lsl #24
    5af8:	761a0073 			; <UNDEFINED> instruction: 0x761a0073
    5afc:	1a007c00 	bne	24b04 <__Stack_Size+0x24304>
    5b00:	3d007621 	stccc	6, cr7, [r0, #-132]	; 0xffffff7c
    5b04:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5b08:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5b0c:	32007621 	andcc	r7, r0, #34603008	; 0x2100000
    5b10:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5b14:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5b18:	00762721 	rsbseq	r2, r6, r1, lsr #14
    5b1c:	1f141446 	svcne	0x00141446
    5b20:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5b24:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5b28:	00410e9f 	umaaleq	r0, r1, pc, lr	; <UNPREDICTABLE>
    5b2c:	00417e08 	subeq	r7, r1, r8, lsl #28
    5b30:	7a003608 	bvc	13358 <__Stack_Size+0x12b58>
    5b34:	21007600 	tstcs	r0, r0, lsl #12
    5b38:	7a1a007c 	bvc	685d30 <__Stack_Size+0x685530>
    5b3c:	1a007600 	bne	23344 <__Stack_Size+0x22b44>
    5b40:	3d007a21 	vstrcc	s14, [r0, #-132]	; 0xffffff7c
    5b44:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5b48:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5b4c:	32007a21 	andcc	r7, r0, #135168	; 0x21000
    5b50:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5b54:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5b58:	007a2721 	rsbseq	r2, sl, r1, lsr #14
    5b5c:	1f141446 	svcne	0x00141446
    5b60:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5b64:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5b68:	00417e9f 	umaaleq	r7, r1, pc, lr	; <UNPREDICTABLE>
    5b6c:	0041f608 	subeq	pc, r1, r8, lsl #12
    5b70:	71003608 	tstvc	r0, r8, lsl #12
    5b74:	21007a00 	tstcs	r0, r0, lsl #20
    5b78:	711a0076 	tstvc	sl, r6, ror r0
    5b7c:	1a007a00 	bne	24384 <__Stack_Size+0x23b84>
    5b80:	3d007121 	stfccs	f7, [r0, #-132]	; 0xffffff7c
    5b84:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5b88:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5b8c:	32007121 	andcc	r7, r0, #1073741832	; 0x40000008
    5b90:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5b94:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5b98:	00712721 	rsbseq	r2, r1, r1, lsr #14
    5b9c:	1f141446 	svcne	0x00141446
    5ba0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5ba4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5ba8:	0041f69f 	umaaleq	pc, r1, pc, r6	; <UNPREDICTABLE>
    5bac:	00426608 	subeq	r6, r2, r8, lsl #12
    5bb0:	79003608 	stmdbvc	r0, {r3, r9, sl, ip, sp}
    5bb4:	21007100 	mrscs	r7, (UNDEF: 16)
    5bb8:	791a007a 	ldmdbvc	sl, {r1, r3, r4, r5, r6}
    5bbc:	1a007100 	bne	21fc4 <__Stack_Size+0x217c4>
    5bc0:	3d007921 	stccc	9, cr7, [r0, #-132]	; 0xffffff7c
    5bc4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5bc8:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5bcc:	32007921 	andcc	r7, r0, #540672	; 0x84000
    5bd0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5bd4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5bd8:	00792721 	rsbseq	r2, r9, r1, lsr #14
    5bdc:	1f141446 	svcne	0x00141446
    5be0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5be4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5be8:	0042669f 	umaaleq	r6, r2, pc, r6	; <UNPREDICTABLE>
    5bec:	0042d808 	subeq	sp, r2, r8, lsl #16
    5bf0:	7c003608 	stcvc	6, cr3, [r0], {8}
    5bf4:	21007900 	tstcs	r0, r0, lsl #18
    5bf8:	7c1a0071 	ldcvc	0, cr0, [sl], {113}	; 0x71
    5bfc:	1a007900 	bne	24004 <__Stack_Size+0x23804>
    5c00:	3d007c21 	stccc	12, cr7, [r0, #-132]	; 0xffffff7c
    5c04:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5c08:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5c0c:	32007c21 	andcc	r7, r0, #8448	; 0x2100
    5c10:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5c14:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5c18:	007c2721 	rsbseq	r2, ip, r1, lsr #14
    5c1c:	1f141446 	svcne	0x00141446
    5c20:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5c24:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5c28:	0042d89f 	umaaleq	sp, r2, pc, r8	; <UNPREDICTABLE>
    5c2c:	00434208 	subeq	r4, r3, r8, lsl #4
    5c30:	70003608 	andvc	r3, r0, r8, lsl #12
    5c34:	21007c00 	tstcs	r0, r0, lsl #24
    5c38:	701a0079 	andsvc	r0, sl, r9, ror r0
    5c3c:	1a007c00 	bne	24c44 <__Stack_Size+0x24444>
    5c40:	3d007021 	stccc	0, cr7, [r0, #-132]	; 0xffffff7c
    5c44:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5c48:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5c4c:	32007021 	andcc	r7, r0, #33	; 0x21
    5c50:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5c54:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5c58:	00702721 	rsbseq	r2, r0, r1, lsr #14
    5c5c:	1f141446 	svcne	0x00141446
    5c60:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5c64:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5c68:	0043429f 	umaaleq	r4, r3, pc, r2	; <UNPREDICTABLE>
    5c6c:	0043da08 	subeq	sp, r3, r8, lsl #20
    5c70:	76003608 	strvc	r3, [r0], -r8, lsl #12
    5c74:	21007000 	mrscs	r7, (UNDEF: 0)
    5c78:	761a007c 			; <UNDEFINED> instruction: 0x761a007c
    5c7c:	1a007000 	bne	21c84 <__Stack_Size+0x21484>
    5c80:	3d007621 	stccc	6, cr7, [r0, #-132]	; 0xffffff7c
    5c84:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5c88:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5c8c:	32007621 	andcc	r7, r0, #34603008	; 0x2100000
    5c90:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5c94:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5c98:	00762721 	rsbseq	r2, r6, r1, lsr #14
    5c9c:	1f141446 	svcne	0x00141446
    5ca0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5ca4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5ca8:	0043da9f 	umaaleq	sp, r3, pc, sl	; <UNPREDICTABLE>
    5cac:	00444e08 	subeq	r4, r4, r8, lsl #28
    5cb0:	77003608 	strvc	r3, [r0, -r8, lsl #12]
    5cb4:	21007600 	tstcs	r0, r0, lsl #12
    5cb8:	771a0070 			; <UNDEFINED> instruction: 0x771a0070
    5cbc:	1a007600 	bne	234c4 <__Stack_Size+0x22cc4>
    5cc0:	3d007721 	stccc	7, cr7, [r0, #-132]	; 0xffffff7c
    5cc4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5cc8:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5ccc:	32007721 	andcc	r7, r0, #8650752	; 0x840000
    5cd0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5cd4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5cd8:	00772721 	rsbseq	r2, r7, r1, lsr #14
    5cdc:	1f141446 	svcne	0x00141446
    5ce0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5ce4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5ce8:	00444e9f 	umaaleq	r4, r4, pc, lr	; <UNPREDICTABLE>
    5cec:	0044c408 	subeq	ip, r4, r8, lsl #8
    5cf0:	75003608 	strvc	r3, [r0, #-1544]	; 0x608
    5cf4:	21007700 	tstcs	r0, r0, lsl #14
    5cf8:	751a0076 	ldrvc	r0, [sl, #-118]	; 0x76
    5cfc:	1a007700 	bne	23904 <__Stack_Size+0x23104>
    5d00:	3d007521 	cfstr32cc	mvfx7, [r0, #-132]	; 0xffffff7c
    5d04:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5d08:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5d0c:	32007521 	andcc	r7, r0, #138412032	; 0x8400000
    5d10:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5d14:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5d18:	00752721 	rsbseq	r2, r5, r1, lsr #14
    5d1c:	1f141446 	svcne	0x00141446
    5d20:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5d24:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5d28:	0044c49f 	umaaleq	ip, r4, pc, r4	; <UNPREDICTABLE>
    5d2c:	00453408 	subeq	r3, r5, r8, lsl #8
    5d30:	74003608 	strvc	r3, [r0], #-1544	; 0x608
    5d34:	21007500 	tstcs	r0, r0, lsl #10
    5d38:	741a0077 	ldrvc	r0, [sl], #-119	; 0x77
    5d3c:	1a007500 	bne	23144 <__Stack_Size+0x22944>
    5d40:	3d007421 	cfstrscc	mvf7, [r0, #-132]	; 0xffffff7c
    5d44:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5d48:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5d4c:	32007421 	andcc	r7, r0, #553648128	; 0x21000000
    5d50:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5d54:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5d58:	00742721 	rsbseq	r2, r4, r1, lsr #14
    5d5c:	1f141446 	svcne	0x00141446
    5d60:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5d64:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5d68:	0045349f 	umaaleq	r3, r5, pc, r4	; <UNPREDICTABLE>
    5d6c:	0045ae08 	subeq	sl, r5, r8, lsl #28
    5d70:	71003608 	tstvc	r0, r8, lsl #12
    5d74:	21007400 	tstcs	r0, r0, lsl #8
    5d78:	711a0075 	tstvc	sl, r5, ror r0
    5d7c:	1a007400 	bne	22d84 <__Stack_Size+0x22584>
    5d80:	3d007121 	stfccs	f7, [r0, #-132]	; 0xffffff7c
    5d84:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5d88:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5d8c:	32007121 	andcc	r7, r0, #1073741832	; 0x40000008
    5d90:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5d94:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5d98:	00712721 	rsbseq	r2, r1, r1, lsr #14
    5d9c:	1f141446 	svcne	0x00141446
    5da0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5da4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5da8:	0045ae9f 	umaaleq	sl, r5, pc, lr	; <UNPREDICTABLE>
    5dac:	00460a08 	subeq	r0, r6, r8, lsl #20
    5db0:	72003608 	andvc	r3, r0, #8, 12	; 0x800000
    5db4:	21007100 	mrscs	r7, (UNDEF: 16)
    5db8:	721a0074 	andsvc	r0, sl, #116	; 0x74
    5dbc:	1a007100 	bne	221c4 <__Stack_Size+0x219c4>
    5dc0:	3d007221 	sfmcc	f7, 4, [r0, #-132]	; 0xffffff7c
    5dc4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5dc8:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5dcc:	32007221 	andcc	r7, r0, #268435458	; 0x10000002
    5dd0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5dd4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5dd8:	00722721 	rsbseq	r2, r2, r1, lsr #14
    5ddc:	1f141446 	svcne	0x00141446
    5de0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5de4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5de8:	00460a9f 	umaaleq	r0, r6, pc, sl	; <UNPREDICTABLE>
    5dec:	0046a208 	subeq	sl, r6, r8, lsl #4
    5df0:	73003608 	movwvc	r3, #1544	; 0x608
    5df4:	21007200 	mrscs	r7, R8_usr
    5df8:	731a0071 	tstvc	sl, #113	; 0x71
    5dfc:	1a007200 	bne	22604 <__Stack_Size+0x21e04>
    5e00:	3d007321 	stccc	3, cr7, [r0, #-132]	; 0xffffff7c
    5e04:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5e08:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5e0c:	32007321 	andcc	r7, r0, #-2080374784	; 0x84000000
    5e10:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5e14:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5e18:	00732721 	rsbseq	r2, r3, r1, lsr #14
    5e1c:	1f141446 	svcne	0x00141446
    5e20:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5e24:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5e28:	0046a29f 	umaaleq	sl, r6, pc, r2	; <UNPREDICTABLE>
    5e2c:	00471e08 	subeq	r1, r7, r8, lsl #28
    5e30:	70003608 	andvc	r3, r0, r8, lsl #12
    5e34:	21007300 	mrscs	r7, LR_irq
    5e38:	701a0072 	andsvc	r0, sl, r2, ror r0
    5e3c:	1a007300 	bne	22a44 <__Stack_Size+0x22244>
    5e40:	3d007021 	stccc	0, cr7, [r0, #-132]	; 0xffffff7c
    5e44:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5e48:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5e4c:	32007021 	andcc	r7, r0, #33	; 0x21
    5e50:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5e54:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5e58:	00702721 	rsbseq	r2, r0, r1, lsr #14
    5e5c:	1f141446 	svcne	0x00141446
    5e60:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5e64:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5e68:	00471e9f 	umaaleq	r1, r7, pc, lr	; <UNPREDICTABLE>
    5e6c:	00478c08 	subeq	r8, r7, r8, lsl #24
    5e70:	76003608 	strvc	r3, [r0], -r8, lsl #12
    5e74:	21007000 	mrscs	r7, (UNDEF: 0)
    5e78:	761a0073 			; <UNDEFINED> instruction: 0x761a0073
    5e7c:	1a007000 	bne	21e84 <__Stack_Size+0x21684>
    5e80:	3d007621 	stccc	6, cr7, [r0, #-132]	; 0xffffff7c
    5e84:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5e88:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5e8c:	32007621 	andcc	r7, r0, #34603008	; 0x2100000
    5e90:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5e94:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5e98:	00762721 	rsbseq	r2, r6, r1, lsr #14
    5e9c:	1f141446 	svcne	0x00141446
    5ea0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5ea4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5ea8:	00478c9f 	umaaleq	r8, r7, pc, ip	; <UNPREDICTABLE>
    5eac:	00483008 	subeq	r3, r8, r8
    5eb0:	78003608 	stmdavc	r0, {r3, r9, sl, ip, sp}
    5eb4:	21007600 	tstcs	r0, r0, lsl #12
    5eb8:	781a0070 	ldmdavc	sl, {r4, r5, r6}
    5ebc:	1a007600 	bne	236c4 <__Stack_Size+0x22ec4>
    5ec0:	3d007821 	stccc	8, cr7, [r0, #-132]	; 0xffffff7c
    5ec4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5ec8:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5ecc:	32007821 	andcc	r7, r0, #2162688	; 0x210000
    5ed0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5ed4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5ed8:	00782721 	rsbseq	r2, r8, r1, lsr #14
    5edc:	1f141446 	svcne	0x00141446
    5ee0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5ee4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5ee8:	0048309f 	umaaleq	r3, r8, pc, r0	; <UNPREDICTABLE>
    5eec:	0048a808 	subeq	sl, r8, r8, lsl #16
    5ef0:	7c003608 	stcvc	6, cr3, [r0], {8}
    5ef4:	21007800 	tstcs	r0, r0, lsl #16
    5ef8:	7c1a0076 	ldcvc	0, cr0, [sl], {118}	; 0x76
    5efc:	1a007800 	bne	23f04 <__Stack_Size+0x23704>
    5f00:	3d007c21 	stccc	12, cr7, [r0, #-132]	; 0xffffff7c
    5f04:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5f08:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5f0c:	32007c21 	andcc	r7, r0, #8448	; 0x2100
    5f10:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5f14:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5f18:	007c2721 	rsbseq	r2, ip, r1, lsr #14
    5f1c:	1f141446 	svcne	0x00141446
    5f20:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5f24:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5f28:	0048a89f 	umaaleq	sl, r8, pc, r8	; <UNPREDICTABLE>
    5f2c:	00491c08 	subeq	r1, r9, r8, lsl #24
    5f30:	75003608 	strvc	r3, [r0, #-1544]	; 0x608
    5f34:	21007c00 	tstcs	r0, r0, lsl #24
    5f38:	751a0078 	ldrvc	r0, [sl, #-120]	; 0x78
    5f3c:	1a007c00 	bne	24f44 <__Stack_Size+0x24744>
    5f40:	3d007521 	cfstr32cc	mvfx7, [r0, #-132]	; 0xffffff7c
    5f44:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5f48:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5f4c:	32007521 	andcc	r7, r0, #138412032	; 0x8400000
    5f50:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5f54:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5f58:	00752721 	rsbseq	r2, r5, r1, lsr #14
    5f5c:	1f141446 	svcne	0x00141446
    5f60:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5f64:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5f68:	00491c9f 	umaaleq	r1, r9, pc, ip	; <UNPREDICTABLE>
    5f6c:	00498c08 	subeq	r8, r9, r8, lsl #24
    5f70:	74003608 	strvc	r3, [r0], #-1544	; 0x608
    5f74:	21007500 	tstcs	r0, r0, lsl #10
    5f78:	741a007c 	ldrvc	r0, [sl], #-124	; 0x7c
    5f7c:	1a007500 	bne	23384 <__Stack_Size+0x22b84>
    5f80:	3d007421 	cfstrscc	mvf7, [r0, #-132]	; 0xffffff7c
    5f84:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5f88:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5f8c:	32007421 	andcc	r7, r0, #553648128	; 0x21000000
    5f90:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5f94:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5f98:	00742721 	rsbseq	r2, r4, r1, lsr #14
    5f9c:	1f141446 	svcne	0x00141446
    5fa0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5fa4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5fa8:	00498c9f 	umaaleq	r8, r9, pc, ip	; <UNPREDICTABLE>
    5fac:	004a0208 	subeq	r0, sl, r8, lsl #4
    5fb0:	72003608 	andvc	r3, r0, #8, 12	; 0x800000
    5fb4:	21007400 	tstcs	r0, r0, lsl #8
    5fb8:	721a0075 	andsvc	r0, sl, #117	; 0x75
    5fbc:	1a007400 	bne	22fc4 <__Stack_Size+0x227c4>
    5fc0:	3d007221 	sfmcc	f7, 4, [r0, #-132]	; 0xffffff7c
    5fc4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5fc8:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5fcc:	32007221 	andcc	r7, r0, #268435458	; 0x10000002
    5fd0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5fd4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5fd8:	00722721 	rsbseq	r2, r2, r1, lsr #14
    5fdc:	1f141446 	svcne	0x00141446
    5fe0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5fe4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5fe8:	004a029f 	umaaleq	r0, sl, pc, r2	; <UNPREDICTABLE>
    5fec:	004a7408 	subeq	r7, sl, r8, lsl #8
    5ff0:	71003608 	tstvc	r0, r8, lsl #12
    5ff4:	21007200 	mrscs	r7, R8_usr
    5ff8:	711a0074 	tstvc	sl, r4, ror r0
    5ffc:	1a007200 	bne	22804 <__Stack_Size+0x22004>
    6000:	3d007121 	stfccs	f7, [r0, #-132]	; 0xffffff7c
    6004:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6008:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    600c:	32007121 	andcc	r7, r0, #1073741832	; 0x40000008
    6010:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6014:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    6018:	00712721 	rsbseq	r2, r1, r1, lsr #14
    601c:	1f141446 	svcne	0x00141446
    6020:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    6024:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    6028:	004a749f 	umaaleq	r7, sl, pc, r4	; <UNPREDICTABLE>
    602c:	004aee08 	subeq	lr, sl, r8, lsl #28
    6030:	73003608 	movwvc	r3, #1544	; 0x608
    6034:	21007100 	mrscs	r7, (UNDEF: 16)
    6038:	731a0072 	tstvc	sl, #114	; 0x72
    603c:	1a007100 	bne	22444 <__Stack_Size+0x21c44>
    6040:	3d007321 	stccc	3, cr7, [r0, #-132]	; 0xffffff7c
    6044:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6048:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    604c:	32007321 	andcc	r7, r0, #-2080374784	; 0x84000000
    6050:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6054:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    6058:	00732721 	rsbseq	r2, r3, r1, lsr #14
    605c:	1f141446 	svcne	0x00141446
    6060:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    6064:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    6068:	004aee9f 	umaaleq	lr, sl, pc, lr	; <UNPREDICTABLE>
    606c:	004b6808 	subeq	r6, fp, r8, lsl #16
    6070:	70003608 	andvc	r3, r0, r8, lsl #12
    6074:	21007300 	mrscs	r7, LR_irq
    6078:	701a0071 	andsvc	r0, sl, r1, ror r0
    607c:	1a007300 	bne	22c84 <__Stack_Size+0x22484>
    6080:	3d007021 	stccc	0, cr7, [r0, #-132]	; 0xffffff7c
    6084:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6088:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    608c:	32007021 	andcc	r7, r0, #33	; 0x21
    6090:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6094:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    6098:	00702721 	rsbseq	r2, r0, r1, lsr #14
    609c:	1f141446 	svcne	0x00141446
    60a0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    60a4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    60a8:	004b689f 	umaaleq	r6, fp, pc, r8	; <UNPREDICTABLE>
    60ac:	004bc408 	subeq	ip, fp, r8, lsl #8
    60b0:	76003608 	strvc	r3, [r0], -r8, lsl #12
    60b4:	21007000 	mrscs	r7, (UNDEF: 0)
    60b8:	761a0073 			; <UNDEFINED> instruction: 0x761a0073
    60bc:	1a007000 	bne	220c4 <__Stack_Size+0x218c4>
    60c0:	3d007621 	stccc	6, cr7, [r0, #-132]	; 0xffffff7c
    60c4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    60c8:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    60cc:	32007621 	andcc	r7, r0, #34603008	; 0x2100000
    60d0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    60d4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    60d8:	00762721 	rsbseq	r2, r6, r1, lsr #14
    60dc:	1f141446 	svcne	0x00141446
    60e0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    60e4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    60e8:	004bc49f 	umaaleq	ip, fp, pc, r4	; <UNPREDICTABLE>
    60ec:	004c6c08 	subeq	r6, ip, r8, lsl #24
    60f0:	7c003608 	stcvc	6, cr3, [r0], {8}
    60f4:	21007600 	tstcs	r0, r0, lsl #12
    60f8:	7c1a0070 	ldcvc	0, cr0, [sl], {112}	; 0x70
    60fc:	1a007600 	bne	23904 <__Stack_Size+0x23104>
    6100:	3d007c21 	stccc	12, cr7, [r0, #-132]	; 0xffffff7c
    6104:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6108:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    610c:	32007c21 	andcc	r7, r0, #8448	; 0x2100
    6110:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6114:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    6118:	007c2721 	rsbseq	r2, ip, r1, lsr #14
    611c:	1f141446 	svcne	0x00141446
    6120:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    6124:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    6128:	004c6c9f 	umaaleq	r6, ip, pc, ip	; <UNPREDICTABLE>
    612c:	004ce208 	subeq	lr, ip, r8, lsl #4
    6130:	75003608 	strvc	r3, [r0, #-1544]	; 0x608
    6134:	21007c00 	tstcs	r0, r0, lsl #24
    6138:	751a0076 	ldrvc	r0, [sl, #-118]	; 0x76
    613c:	1a007c00 	bne	25144 <__Stack_Size+0x24944>
    6140:	3d007521 	cfstr32cc	mvfx7, [r0, #-132]	; 0xffffff7c
    6144:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6148:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    614c:	32007521 	andcc	r7, r0, #138412032	; 0x8400000
    6150:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6154:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    6158:	00752721 	rsbseq	r2, r5, r1, lsr #14
    615c:	1f141446 	svcne	0x00141446
    6160:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    6164:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    6168:	004ce29f 	umaaleq	lr, ip, pc, r2	; <UNPREDICTABLE>
    616c:	004d6008 	subeq	r6, sp, r8
    6170:	78003608 	stmdavc	r0, {r3, r9, sl, ip, sp}
    6174:	21007500 	tstcs	r0, r0, lsl #10
    6178:	781a007c 	ldmdavc	sl, {r2, r3, r4, r5, r6}
    617c:	1a007500 	bne	23584 <__Stack_Size+0x22d84>
    6180:	3d007821 	stccc	8, cr7, [r0, #-132]	; 0xffffff7c
    6184:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6188:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    618c:	32007821 	andcc	r7, r0, #2162688	; 0x210000
    6190:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6194:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    6198:	00782721 	rsbseq	r2, r8, r1, lsr #14
    619c:	1f141446 	svcne	0x00141446
    61a0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    61a4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    61a8:	004d609f 	umaaleq	r6, sp, pc, r0	; <UNPREDICTABLE>
    61ac:	004dde08 	subeq	sp, sp, r8, lsl #28
    61b0:	72003608 	andvc	r3, r0, #8, 12	; 0x800000
    61b4:	21007800 	tstcs	r0, r0, lsl #16
    61b8:	721a0075 	andsvc	r0, sl, #117	; 0x75
    61bc:	1a007800 	bne	241c4 <__Stack_Size+0x239c4>
    61c0:	3d007221 	sfmcc	f7, 4, [r0, #-132]	; 0xffffff7c
    61c4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    61c8:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    61cc:	32007221 	andcc	r7, r0, #268435458	; 0x10000002
    61d0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    61d4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    61d8:	00722721 	rsbseq	r2, r2, r1, lsr #14
    61dc:	1f141446 	svcne	0x00141446
    61e0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    61e4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    61e8:	004dde9f 	umaaleq	sp, sp, pc, lr	; <UNPREDICTABLE>
    61ec:	004e5a08 	subeq	r5, lr, r8, lsl #20
    61f0:	71003608 	tstvc	r0, r8, lsl #12
    61f4:	21007200 	mrscs	r7, R8_usr
    61f8:	711a0078 	tstvc	sl, r8, ror r0
    61fc:	1a007200 	bne	22a04 <__Stack_Size+0x22204>
    6200:	3d007121 	stfccs	f7, [r0, #-132]	; 0xffffff7c
    6204:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6208:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    620c:	32007121 	andcc	r7, r0, #1073741832	; 0x40000008
    6210:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6214:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    6218:	00712721 	rsbseq	r2, r1, r1, lsr #14
    621c:	1f141446 	svcne	0x00141446
    6220:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    6224:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    6228:	004e5a9f 	umaaleq	r5, lr, pc, sl	; <UNPREDICTABLE>
    622c:	004eec08 	subeq	lr, lr, r8, lsl #24
    6230:	74003608 	strvc	r3, [r0], #-1544	; 0x608
    6234:	21007100 	mrscs	r7, (UNDEF: 16)
    6238:	741a0072 	ldrvc	r0, [sl], #-114	; 0x72
    623c:	1a007100 	bne	22644 <__Stack_Size+0x21e44>
    6240:	3d007421 	cfstrscc	mvf7, [r0, #-132]	; 0xffffff7c
    6244:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6248:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    624c:	32007421 	andcc	r7, r0, #553648128	; 0x21000000
    6250:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6254:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    6258:	00742721 	rsbseq	r2, r4, r1, lsr #14
    625c:	1f141446 	svcne	0x00141446
    6260:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    6264:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    6268:	004eec9f 	umaaleq	lr, lr, pc, ip	; <UNPREDICTABLE>
    626c:	004f6608 	subeq	r6, pc, r8, lsl #12
    6270:	91004008 	tstls	r0, r8
    6274:	74067f94 	strvc	r7, [r6], #-3988	; 0xf94
    6278:	00712100 	rsbseq	r2, r1, r0, lsl #2
    627c:	7f94911a 	svcvc	0x0094911a
    6280:	1a007406 	bne	232a0 <__Stack_Size+0x22aa0>
    6284:	7f949121 	svcvc	0x00949121
    6288:	14143d06 	ldrne	r3, [r4], #-3334	; 0xd06
    628c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    6290:	91212517 	teqls	r1, r7, lsl r5
    6294:	32067f94 	andcc	r7, r6, #148, 30	; 0x250
    6298:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    629c:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    62a0:	94912721 	ldrls	r2, [r1], #1825	; 0x721
    62a4:	1446067f 	strbne	r0, [r6], #-1663	; 0x67f
    62a8:	20231f14 	eorcs	r1, r3, r4, lsl pc
    62ac:	21251724 	teqcs	r5, r4, lsr #14
    62b0:	669f2227 	ldrvs	r2, [pc], r7, lsr #4
    62b4:	fe08004f 	cdp2	0, 0, cr0, cr8, cr15, {2}
    62b8:	4408004f 	strmi	r0, [r8], #-79	; 0x4f
    62bc:	7f989100 	svcvc	0x00989100
    62c0:	7f949106 	svcvc	0x00949106
    62c4:	00742106 	rsbseq	r2, r4, r6, lsl #2
    62c8:	7f98911a 	svcvc	0x0098911a
    62cc:	7f949106 	svcvc	0x00949106
    62d0:	91211a06 	teqls	r1, r6, lsl #20
    62d4:	3d067f98 	stccc	15, cr7, [r6, #-608]	; 0xfffffda0
    62d8:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    62dc:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    62e0:	7f989121 	svcvc	0x00989121
    62e4:	14143206 	ldrne	r3, [r4], #-518	; 0x206
    62e8:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    62ec:	27212517 			; <UNDEFINED> instruction: 0x27212517
    62f0:	067f9891 			; <UNDEFINED> instruction: 0x067f9891
    62f4:	1f141446 	svcne	0x00141446
    62f8:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    62fc:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    6300:	004ffe9f 	umaaleq	pc, pc, pc, lr	; <UNPREDICTABLE>
    6304:	0050b608 	subseq	fp, r0, r8, lsl #12
    6308:	91004608 	tstls	r0, r8, lsl #12
    630c:	91067fa4 	smlatbls	r6, r4, pc, r7	; <UNPREDICTABLE>
    6310:	21067f98 			; <UNDEFINED> instruction: 0x21067f98
    6314:	067f9491 			; <UNDEFINED> instruction: 0x067f9491
    6318:	7fa4911a 	svcvc	0x00a4911a
    631c:	7f989106 	svcvc	0x00989106
    6320:	91211a06 	teqls	r1, r6, lsl #20
    6324:	3d067fa4 	stccc	15, cr7, [r6, #-656]	; 0xfffffd70
    6328:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    632c:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    6330:	7fa49121 	svcvc	0x00a49121
    6334:	14143206 	ldrne	r3, [r4], #-518	; 0x206
    6338:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    633c:	27212517 			; <UNDEFINED> instruction: 0x27212517
    6340:	067fa491 			; <UNDEFINED> instruction: 0x067fa491
    6344:	1f141446 	svcne	0x00141446
    6348:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    634c:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    6350:	0050b69f 			; <UNDEFINED> instruction: 0x0050b69f
    6354:	00514008 	subseq	r4, r1, r8
    6358:	91004608 	tstls	r0, r8, lsl #12
    635c:	91067fa8 	smlatbls	r6, r8, pc, r7	; <UNPREDICTABLE>
    6360:	21067fa4 	smlatbcs	r6, r4, pc, r7	; <UNPREDICTABLE>
    6364:	067f9891 			; <UNDEFINED> instruction: 0x067f9891
    6368:	7fa8911a 	svcvc	0x00a8911a
    636c:	7fa49106 	svcvc	0x00a49106
    6370:	91211a06 	teqls	r1, r6, lsl #20
    6374:	3d067fa8 	stccc	15, cr7, [r6, #-672]	; 0xfffffd60
    6378:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    637c:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    6380:	7fa89121 	svcvc	0x00a89121
    6384:	14143206 	ldrne	r3, [r4], #-518	; 0x206
    6388:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    638c:	27212517 			; <UNDEFINED> instruction: 0x27212517
    6390:	067fa891 			; <UNDEFINED> instruction: 0x067fa891
    6394:	1f141446 	svcne	0x00141446
    6398:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    639c:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    63a0:	0051409f 			; <UNDEFINED> instruction: 0x0051409f
    63a4:	0051d008 	subseq	sp, r1, r8
    63a8:	91004608 	tstls	r0, r8, lsl #12
    63ac:	91067f94 			; <UNDEFINED> instruction: 0x91067f94
    63b0:	21067fa8 	smlatbcs	r6, r8, pc, r7	; <UNPREDICTABLE>
    63b4:	067fa491 			; <UNDEFINED> instruction: 0x067fa491
    63b8:	7f94911a 	svcvc	0x0094911a
    63bc:	7fa89106 	svcvc	0x00a89106
    63c0:	91211a06 	teqls	r1, r6, lsl #20
    63c4:	3d067f94 	stccc	15, cr7, [r6, #-592]	; 0xfffffdb0
    63c8:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    63cc:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    63d0:	7f949121 	svcvc	0x00949121
    63d4:	14143206 	ldrne	r3, [r4], #-518	; 0x206
    63d8:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    63dc:	27212517 			; <UNDEFINED> instruction: 0x27212517
    63e0:	067f9491 			; <UNDEFINED> instruction: 0x067f9491
    63e4:	1f141446 	svcne	0x00141446
    63e8:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    63ec:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    63f0:	0051d09f 			; <UNDEFINED> instruction: 0x0051d09f
    63f4:	00523808 	subseq	r3, r2, r8, lsl #16
    63f8:	91004608 	tstls	r0, r8, lsl #12
    63fc:	91067fb0 			; <UNDEFINED> instruction: 0x91067fb0
    6400:	21067f94 			; <UNDEFINED> instruction: 0x21067f94
    6404:	067fa891 			; <UNDEFINED> instruction: 0x067fa891
    6408:	7fb0911a 	svcvc	0x00b0911a
    640c:	7f949106 	svcvc	0x00949106
    6410:	91211a06 	teqls	r1, r6, lsl #20
    6414:	3d067fb0 	stccc	15, cr7, [r6, #-704]	; 0xfffffd40
    6418:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    641c:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    6420:	7fb09121 	svcvc	0x00b09121
    6424:	14143206 	ldrne	r3, [r4], #-518	; 0x206
    6428:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    642c:	27212517 			; <UNDEFINED> instruction: 0x27212517
    6430:	067fb091 			; <UNDEFINED> instruction: 0x067fb091
    6434:	1f141446 	svcne	0x00141446
    6438:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    643c:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    6440:	0052389f 			; <UNDEFINED> instruction: 0x0052389f
    6444:	0052ac08 	subseq	sl, r2, r8, lsl #24
    6448:	73003c08 	movwvc	r3, #3080	; 0xc08
    644c:	7fb09100 	svcvc	0x00b09100
    6450:	94912106 	ldrls	r2, [r1], #262	; 0x106
    6454:	731a067f 	tstvc	sl, #133169152	; 0x7f00000
    6458:	7fb09100 	svcvc	0x00b09100
    645c:	73211a06 	teqvc	r1, #24576	; 0x6000
    6460:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    6464:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    6468:	73212517 	teqvc	r1, #96468992	; 0x5c00000
    646c:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    6470:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    6474:	27212517 			; <UNDEFINED> instruction: 0x27212517
    6478:	14460073 	strbne	r0, [r6], #-115	; 0x73
    647c:	20231f14 	eorcs	r1, r3, r4, lsl pc
    6480:	21251724 	teqcs	r5, r4, lsr #14
    6484:	ac9f2227 	lfmge	f2, 4, [pc], {39}	; 0x27
    6488:	28080052 	stmdacs	r8, {r1, r4, r6}
    648c:	38080053 	stmdacc	r8, {r0, r1, r4, r6}
    6490:	73007100 	movwvc	r7, #256	; 0x100
    6494:	b0912100 	addslt	r2, r1, r0, lsl #2
    6498:	711a067f 	tstvc	sl, pc, ror r6
    649c:	1a007300 	bne	230a4 <__Stack_Size+0x228a4>
    64a0:	3d007121 	stfccs	f7, [r0, #-132]	; 0xffffff7c
    64a4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    64a8:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    64ac:	32007121 	andcc	r7, r0, #1073741832	; 0x40000008
    64b0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    64b4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    64b8:	00712721 	rsbseq	r2, r1, r1, lsr #14
    64bc:	1f141446 	svcne	0x00141446
    64c0:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    64c4:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    64c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    64cc:	00000000 	andeq	r0, r0, r0
    64d0:	0034ba00 	eorseq	fp, r4, r0, lsl #20
    64d4:	0034f008 	eorseq	pc, r4, r8
    64d8:	59000608 	stmdbpl	r0, {r3, r9, sl}
    64dc:	fc930493 	ldc2	4, cr0, [r3], {147}	; 0x93
    64e0:	0034f001 	eorseq	pc, r4, r1
    64e4:	0034f408 	eorseq	pc, r4, r8, lsl #8
    64e8:	59000908 	stmdbpl	r0, {r3, r8, fp}
    64ec:	93540493 	cmpls	r4, #-1828716544	; 0x93000000
    64f0:	01f89304 	mvnseq	r9, r4, lsl #6
    64f4:	080034f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, ip, sp}
    64f8:	08003504 	stmdaeq	r0, {r2, r8, sl, ip, sp}
    64fc:	9359000b 	cmpls	r9, #11
    6500:	7fa49104 	svcvc	0x00a49104
    6504:	f8930493 			; <UNDEFINED> instruction: 0xf8930493
    6508:	00350401 	eorseq	r0, r5, r1, lsl #8
    650c:	00355a08 	eorseq	r5, r5, r8, lsl #20
    6510:	91000c08 	tstls	r0, r8, lsl #24
    6514:	9104935c 	tstls	r4, ip, asr r3
    6518:	04937fa4 	ldreq	r7, [r3], #4004	; 0xfa4
    651c:	5a01f893 	bpl	84770 <__Stack_Size+0x83f70>
    6520:	78080035 	stmdavc	r8, {r0, r2, r4, r5}
    6524:	0f080035 	svceq	0x00080035
    6528:	935c9100 	cmpls	ip, #0, 2
    652c:	7fa49104 	svcvc	0x00a49104
    6530:	93540493 	cmpls	r4, #-1828716544	; 0x93000000
    6534:	01f49304 	mvnseq	r9, r4, lsl #6
    6538:	08003578 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, ip, sp}
    653c:	0800357e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, ip, sp}
    6540:	5c91000f 	ldcpl	0, cr0, [r1], {15}
    6544:	a4910493 	ldrge	r0, [r1], #1171	; 0x493
    6548:	5704937f 	smlsdxpl	r4, pc, r3, r9	; <UNPREDICTABLE>
    654c:	f4930493 			; <UNDEFINED> instruction: 0xf4930493
    6550:	00357e01 	eorseq	r7, r5, r1, lsl #28
    6554:	0035c608 	eorseq	ip, r5, r8, lsl #12
    6558:	91001108 	tstls	r0, r8, lsl #2
    655c:	9104935c 	tstls	r4, ip, asr r3
    6560:	04937fa4 	ldreq	r7, [r3], #4004	; 0xfa4
    6564:	937fa891 	cmnls	pc, #9502720	; 0x910000
    6568:	01f49304 	mvnseq	r9, r4, lsl #6
    656c:	080035c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sl, ip, sp}
    6570:	080035d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, ip, sp}
    6574:	5c910014 	ldcpl	0, cr0, [r1], {20}
    6578:	a4910493 	ldrge	r0, [r1], #1171	; 0x493
    657c:	9104937f 	tstls	r4, pc, ror r3
    6580:	04937fa8 	ldreq	r7, [r3], #4008	; 0xfa8
    6584:	93049354 	movwls	r9, #17236	; 0x4354
    6588:	35d601f0 	ldrbcc	r0, [r6, #496]	; 0x1f0
    658c:	35e00800 	strbcc	r0, [r0, #2048]!	; 0x800
    6590:	00140800 	andseq	r0, r4, r0, lsl #16
    6594:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    6598:	937fa491 	cmnls	pc, #-1862270976	; 0x91000000
    659c:	7fa89104 	svcvc	0x00a89104
    65a0:	93530493 	cmpls	r3, #-1828716544	; 0x93000000
    65a4:	01f09304 	mvnseq	r9, r4, lsl #6
    65a8:	080035e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, ip, sp}
    65ac:	08003646 	stmdaeq	r0, {r1, r2, r6, r9, sl, ip, sp}
    65b0:	5c910016 	ldcpl	0, cr0, [r1], {22}
    65b4:	a4910493 	ldrge	r0, [r1], #1171	; 0x493
    65b8:	9104937f 	tstls	r4, pc, ror r3
    65bc:	04937fa8 	ldreq	r7, [r3], #4008	; 0xfa8
    65c0:	937fac91 	cmnls	pc, #37120	; 0x9100
    65c4:	01f09304 	mvnseq	r9, r4, lsl #6
    65c8:	08003646 	stmdaeq	r0, {r1, r2, r6, r9, sl, ip, sp}
    65cc:	08003650 	stmdaeq	r0, {r4, r6, r9, sl, ip, sp}
    65d0:	5c910019 	ldcpl	0, cr0, [r1], {25}
    65d4:	a4910493 	ldrge	r0, [r1], #1171	; 0x493
    65d8:	9104937f 	tstls	r4, pc, ror r3
    65dc:	04937fa8 	ldreq	r7, [r3], #4008	; 0xfa8
    65e0:	937fac91 	cmnls	pc, #37120	; 0x9100
    65e4:	04935804 	ldreq	r5, [r3], #2052	; 0x804
    65e8:	5001ec93 	mulpl	r1, r3, ip
    65ec:	da080036 	ble	2066cc <__Stack_Size+0x205ecc>
    65f0:	1b080036 	blne	2066d0 <__Stack_Size+0x205ed0>
    65f4:	935c9100 	cmpls	ip, #0, 2
    65f8:	7fa49104 	svcvc	0x00a49104
    65fc:	a8910493 	ldmge	r1, {r0, r1, r4, r7, sl}
    6600:	9104937f 	tstls	r4, pc, ror r3
    6604:	04937fac 	ldreq	r7, [r3], #4012	; 0xfac
    6608:	937fb091 	cmnls	pc, #145	; 0x91
    660c:	01ec9304 	mvneq	r9, r4, lsl #6
    6610:	080036da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl, ip, sp}
    6614:	08003756 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, ip, sp}
    6618:	5c910020 	ldcpl	0, cr0, [r1], {32}
    661c:	a4910493 	ldrge	r0, [r1], #1171	; 0x493
    6620:	9104937f 	tstls	r4, pc, ror r3
    6624:	04937fa8 	ldreq	r7, [r3], #4008	; 0xfa8
    6628:	937fac91 	cmnls	pc, #37120	; 0x9100
    662c:	7fb09104 	svcvc	0x00b09104
    6630:	b4910493 	ldrlt	r0, [r1], #1171	; 0x493
    6634:	9304937f 	movwls	r9, #17279	; 0x437f
    6638:	375601e8 	ldrbcc	r0, [r6, -r8, ror #3]
    663c:	375a0800 	ldrbcc	r0, [sl, -r0, lsl #16]
    6640:	00230800 	eoreq	r0, r3, r0, lsl #16
    6644:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    6648:	937fa491 	cmnls	pc, #-1862270976	; 0x91000000
    664c:	7fa89104 	svcvc	0x00a89104
    6650:	ac910493 	cfldrsge	mvf0, [r1], {147}	; 0x93
    6654:	9104937f 	tstls	r4, pc, ror r3
    6658:	04937fb0 	ldreq	r7, [r3], #4016	; 0xfb0
    665c:	937fb491 	cmnls	pc, #-1862270976	; 0x91000000
    6660:	04935b04 	ldreq	r5, [r3], #2820	; 0xb04
    6664:	5a01e493 	bpl	7f8b8 <__Stack_Size+0x7f0b8>
    6668:	d6080037 			; <UNDEFINED> instruction: 0xd6080037
    666c:	25080037 	strcs	r0, [r8, #-55]	; 0x37
    6670:	935c9100 	cmpls	ip, #0, 2
    6674:	7fa49104 	svcvc	0x00a49104
    6678:	a8910493 	ldmge	r1, {r0, r1, r4, r7, sl}
    667c:	9104937f 	tstls	r4, pc, ror r3
    6680:	04937fac 	ldreq	r7, [r3], #4012	; 0xfac
    6684:	937fb091 	cmnls	pc, #145	; 0x91
    6688:	7fb49104 	svcvc	0x00b49104
    668c:	b8910493 	ldmlt	r1, {r0, r1, r4, r7, sl}
    6690:	9304937f 	movwls	r9, #17279	; 0x437f
    6694:	37d601e4 	ldrbcc	r0, [r6, r4, ror #3]
    6698:	37f60800 	ldrbcc	r0, [r6, r0, lsl #16]!
    669c:	00280800 	eoreq	r0, r8, r0, lsl #16
    66a0:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    66a4:	937fa491 	cmnls	pc, #-1862270976	; 0x91000000
    66a8:	7fa89104 	svcvc	0x00a89104
    66ac:	ac910493 	cfldrsge	mvf0, [r1], {147}	; 0x93
    66b0:	9104937f 	tstls	r4, pc, ror r3
    66b4:	04937fb0 	ldreq	r7, [r3], #4016	; 0xfb0
    66b8:	937fb491 	cmnls	pc, #-1862270976	; 0x91000000
    66bc:	7fb89104 	svcvc	0x00b89104
    66c0:	935b0493 	cmpls	fp, #-1828716544	; 0x93000000
    66c4:	01e09304 	mvneq	r9, r4, lsl #6
    66c8:	080037f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, ip, sp}
    66cc:	08003cd2 	stmdaeq	r0, {r1, r4, r6, r7, sl, fp, ip, sp}
    66d0:	5c91002a 	ldcpl	0, cr0, [r1], {42}	; 0x2a
    66d4:	a4910493 	ldrge	r0, [r1], #1171	; 0x493
    66d8:	9104937f 	tstls	r4, pc, ror r3
    66dc:	04937fa8 	ldreq	r7, [r3], #4008	; 0xfa8
    66e0:	937fac91 	cmnls	pc, #37120	; 0x9100
    66e4:	7fb09104 	svcvc	0x00b09104
    66e8:	b4910493 	ldrlt	r0, [r1], #1171	; 0x493
    66ec:	9104937f 	tstls	r4, pc, ror r3
    66f0:	04937fb8 	ldreq	r7, [r3], #4024	; 0xfb8
    66f4:	937fbc91 	cmnls	pc, #37120	; 0x9100
    66f8:	01e09304 	mvneq	r9, r4, lsl #6
    66fc:	08003cd2 	stmdaeq	r0, {r1, r4, r6, r7, sl, fp, ip, sp}
    6700:	08003d3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, fp, ip, sp}
    6704:	5c910059 	ldcpl	0, cr0, [r1], {89}	; 0x59
    6708:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    670c:	94042351 	strls	r2, [r4], #-849	; 0x351
    6710:	1aff0801 	bne	fffc871c <BootRAM+0xef38ebd>
    6714:	01f32448 	mvnseq	r2, r8, asr #8
    6718:	94052351 	strls	r2, [r5], #-849	; 0x351
    671c:	1aff0801 	bne	fffc8728 <BootRAM+0xef38ec9>
    6720:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    6724:	06235101 	strteq	r5, [r3], -r1, lsl #2
    6728:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    672c:	2124381a 	teqcs	r4, sl, lsl r8
    6730:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6734:	08019407 	stmdaeq	r1, {r0, r1, r2, sl, ip, pc}
    6738:	9f211aff 	svcls	0x00211aff
    673c:	a8910493 	ldmge	r1, {r0, r1, r4, r7, sl}
    6740:	9104937f 	tstls	r4, pc, ror r3
    6744:	04937fac 	ldreq	r7, [r3], #4012	; 0xfac
    6748:	937fb091 	cmnls	pc, #145	; 0x91
    674c:	7fb49104 	svcvc	0x00b49104
    6750:	b8910493 	ldmlt	r1, {r0, r1, r4, r7, sl}
    6754:	9104937f 	tstls	r4, pc, ror r3
    6758:	04937fbc 	ldreq	r7, [r3], #4028	; 0xfbc
    675c:	3a01e093 	bcc	7e9b0 <__Stack_Size+0x7e1b0>
    6760:	b608003d 			; <UNDEFINED> instruction: 0xb608003d
    6764:	8808003d 	stmdahi	r8, {r0, r2, r3, r4, r5}
    6768:	935c9100 	cmpls	ip, #0, 2
    676c:	5101f304 	tstpl	r1, r4, lsl #6
    6770:	01940423 	orrseq	r0, r4, r3, lsr #8
    6774:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6778:	5101f324 	tstpl	r1, r4, lsr #6
    677c:	01940523 	orrseq	r0, r4, r3, lsr #10
    6780:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6784:	01f32124 	mvnseq	r2, r4, lsr #2
    6788:	94062351 	strls	r2, [r6], #-849	; 0x351
    678c:	1aff0801 	bne	fffc8798 <BootRAM+0xef38f39>
    6790:	f3212438 	vqshl.u32	d2, d24, d1
    6794:	07235101 	streq	r5, [r3, -r1, lsl #2]!
    6798:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    679c:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    67a0:	5101f304 	tstpl	r1, r4, lsl #6
    67a4:	01940823 	orrseq	r0, r4, r3, lsr #16
    67a8:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    67ac:	5101f324 	tstpl	r1, r4, lsr #6
    67b0:	01940923 	orrseq	r0, r4, r3, lsr #18
    67b4:	401aff08 	andsmi	pc, sl, r8, lsl #30
    67b8:	01f32124 	mvnseq	r2, r4, lsr #2
    67bc:	940a2351 	strls	r2, [sl], #-849	; 0x351
    67c0:	1aff0801 	bne	fffc87cc <BootRAM+0xef38f6d>
    67c4:	f3212438 	vqshl.u32	d2, d24, d1
    67c8:	0b235101 	bleq	8dabd4 <__Stack_Size+0x8da3d4>
    67cc:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    67d0:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    67d4:	7fac9104 	svcvc	0x00ac9104
    67d8:	b0910493 	umullslt	r0, r1, r3, r4
    67dc:	9104937f 	tstls	r4, pc, ror r3
    67e0:	04937fb4 	ldreq	r7, [r3], #4020	; 0xfb4
    67e4:	937fb891 	cmnls	pc, #9502720	; 0x910000
    67e8:	7fbc9104 	svcvc	0x00bc9104
    67ec:	e0930493 	umulls	r0, r3, r3, r4
    67f0:	003db601 	eorseq	fp, sp, r1, lsl #12
    67f4:	003e0208 	eorseq	r0, lr, r8, lsl #4
    67f8:	9100b708 	tstls	r0, r8, lsl #14
    67fc:	f304935c 	vcge.u8	<illegal reg q4.5>, q2, q6
    6800:	04235101 	strteq	r5, [r3], #-257	; 0x101
    6804:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6808:	f324481a 	vceq.i32	d4, d4, d10
    680c:	05235101 	streq	r5, [r3, #-257]!	; 0x101
    6810:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6814:	2124401a 	teqcs	r4, sl, lsl r0
    6818:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    681c:	08019406 	stmdaeq	r1, {r1, r2, sl, ip, pc}
    6820:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6824:	5101f321 	tstpl	r1, r1, lsr #6
    6828:	01940723 	orrseq	r0, r4, r3, lsr #14
    682c:	211aff08 	tstcs	sl, r8, lsl #30
    6830:	f304939f 	vcge.u8	d9, d20, d15
    6834:	08235101 	stmdaeq	r3!, {r0, r8, ip, lr}
    6838:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    683c:	f324481a 	vceq.i32	d4, d4, d10
    6840:	09235101 	stmdbeq	r3!, {r0, r8, ip, lr}
    6844:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6848:	2124401a 	teqcs	r4, sl, lsl r0
    684c:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6850:	0801940a 	stmdaeq	r1, {r1, r3, sl, ip, pc}
    6854:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6858:	5101f321 	tstpl	r1, r1, lsr #6
    685c:	01940b23 	orrseq	r0, r4, r3, lsr #22
    6860:	211aff08 	tstcs	sl, r8, lsl #30
    6864:	f304939f 	vcge.u8	d9, d20, d15
    6868:	0c235101 	stfeqs	f5, [r3], #-4
    686c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6870:	f324481a 	vceq.i32	d4, d4, d10
    6874:	0d235101 	stfeqs	f5, [r3, #-4]!
    6878:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    687c:	2124401a 	teqcs	r4, sl, lsl r0
    6880:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6884:	0801940e 	stmdaeq	r1, {r1, r2, r3, sl, ip, pc}
    6888:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    688c:	5101f321 	tstpl	r1, r1, lsr #6
    6890:	01940f23 	orrseq	r0, r4, r3, lsr #30
    6894:	211aff08 	tstcs	sl, r8, lsl #30
    6898:	9104939f 			; <UNDEFINED> instruction: 0x9104939f
    689c:	04937fb0 	ldreq	r7, [r3], #4016	; 0xfb0
    68a0:	937fb491 	cmnls	pc, #-1862270976	; 0x91000000
    68a4:	7fb89104 	svcvc	0x00b89104
    68a8:	bc910493 	cfldrslt	mvf0, [r1], {147}	; 0x93
    68ac:	9304937f 	movwls	r9, #17279	; 0x437f
    68b0:	3e0201e0 	adfccdz	f0, f2, f0
    68b4:	3e960800 	cdpcc	8, 9, cr0, cr6, cr0, {0}
    68b8:	00e60800 	rsceq	r0, r6, r0, lsl #16
    68bc:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    68c0:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    68c4:	08019404 	stmdaeq	r1, {r2, sl, ip, pc}
    68c8:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    68cc:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    68d0:	08019405 	stmdaeq	r1, {r0, r2, sl, ip, pc}
    68d4:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    68d8:	5101f321 	tstpl	r1, r1, lsr #6
    68dc:	01940623 	orrseq	r0, r4, r3, lsr #12
    68e0:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    68e4:	01f32124 	mvnseq	r2, r4, lsr #2
    68e8:	94072351 	strls	r2, [r7], #-849	; 0x351
    68ec:	1aff0801 	bne	fffc88f8 <BootRAM+0xef39099>
    68f0:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    68f4:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    68f8:	08019408 	stmdaeq	r1, {r3, sl, ip, pc}
    68fc:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    6900:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6904:	08019409 	stmdaeq	r1, {r0, r3, sl, ip, pc}
    6908:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    690c:	5101f321 	tstpl	r1, r1, lsr #6
    6910:	01940a23 	orrseq	r0, r4, r3, lsr #20
    6914:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6918:	01f32124 	mvnseq	r2, r4, lsr #2
    691c:	940b2351 	strls	r2, [fp], #-849	; 0x351
    6920:	1aff0801 	bne	fffc892c <BootRAM+0xef390cd>
    6924:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    6928:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    692c:	0801940c 	stmdaeq	r1, {r2, r3, sl, ip, pc}
    6930:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    6934:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6938:	0801940d 	stmdaeq	r1, {r0, r2, r3, sl, ip, pc}
    693c:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    6940:	5101f321 	tstpl	r1, r1, lsr #6
    6944:	01940e23 	orrseq	r0, r4, r3, lsr #28
    6948:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    694c:	01f32124 	mvnseq	r2, r4, lsr #2
    6950:	940f2351 	strls	r2, [pc], #-849	; 6958 <__Stack_Size+0x6158>
    6954:	1aff0801 	bne	fffc8960 <BootRAM+0xef39101>
    6958:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    695c:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6960:	08019410 	stmdaeq	r1, {r4, sl, ip, pc}
    6964:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    6968:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    696c:	08019411 	stmdaeq	r1, {r0, r4, sl, ip, pc}
    6970:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    6974:	5101f321 	tstpl	r1, r1, lsr #6
    6978:	01941223 	orrseq	r1, r4, r3, lsr #4
    697c:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6980:	01f32124 	mvnseq	r2, r4, lsr #2
    6984:	94132351 	ldrls	r2, [r3], #-849	; 0x351
    6988:	1aff0801 	bne	fffc8994 <BootRAM+0xef39135>
    698c:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    6990:	937fb491 	cmnls	pc, #-1862270976	; 0x91000000
    6994:	7fb89104 	svcvc	0x00b89104
    6998:	bc910493 	cfldrslt	mvf0, [r1], {147}	; 0x93
    699c:	9304937f 	movwls	r9, #17279	; 0x437f
    69a0:	3e9601e0 	fmlccdz	f0, f6, f0
    69a4:	3f4e0800 	svccc	0x004e0800
    69a8:	01150800 	tsteq	r5, r0, lsl #16
    69ac:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    69b0:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    69b4:	08019404 	stmdaeq	r1, {r2, sl, ip, pc}
    69b8:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    69bc:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    69c0:	08019405 	stmdaeq	r1, {r0, r2, sl, ip, pc}
    69c4:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    69c8:	5101f321 	tstpl	r1, r1, lsr #6
    69cc:	01940623 	orrseq	r0, r4, r3, lsr #12
    69d0:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    69d4:	01f32124 	mvnseq	r2, r4, lsr #2
    69d8:	94072351 	strls	r2, [r7], #-849	; 0x351
    69dc:	1aff0801 	bne	fffc89e8 <BootRAM+0xef39189>
    69e0:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    69e4:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    69e8:	08019408 	stmdaeq	r1, {r3, sl, ip, pc}
    69ec:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    69f0:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    69f4:	08019409 	stmdaeq	r1, {r0, r3, sl, ip, pc}
    69f8:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    69fc:	5101f321 	tstpl	r1, r1, lsr #6
    6a00:	01940a23 	orrseq	r0, r4, r3, lsr #20
    6a04:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6a08:	01f32124 	mvnseq	r2, r4, lsr #2
    6a0c:	940b2351 	strls	r2, [fp], #-849	; 0x351
    6a10:	1aff0801 	bne	fffc8a1c <BootRAM+0xef391bd>
    6a14:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    6a18:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6a1c:	0801940c 	stmdaeq	r1, {r2, r3, sl, ip, pc}
    6a20:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    6a24:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6a28:	0801940d 	stmdaeq	r1, {r0, r2, r3, sl, ip, pc}
    6a2c:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    6a30:	5101f321 	tstpl	r1, r1, lsr #6
    6a34:	01940e23 	orrseq	r0, r4, r3, lsr #28
    6a38:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6a3c:	01f32124 	mvnseq	r2, r4, lsr #2
    6a40:	940f2351 	strls	r2, [pc], #-849	; 6a48 <__Stack_Size+0x6248>
    6a44:	1aff0801 	bne	fffc8a50 <BootRAM+0xef391f1>
    6a48:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    6a4c:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6a50:	08019410 	stmdaeq	r1, {r4, sl, ip, pc}
    6a54:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    6a58:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6a5c:	08019411 	stmdaeq	r1, {r0, r4, sl, ip, pc}
    6a60:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    6a64:	5101f321 	tstpl	r1, r1, lsr #6
    6a68:	01941223 	orrseq	r1, r4, r3, lsr #4
    6a6c:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6a70:	01f32124 	mvnseq	r2, r4, lsr #2
    6a74:	94132351 	ldrls	r2, [r3], #-849	; 0x351
    6a78:	1aff0801 	bne	fffc8a84 <BootRAM+0xef39225>
    6a7c:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    6a80:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6a84:	08019414 	stmdaeq	r1, {r2, r4, sl, ip, pc}
    6a88:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    6a8c:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6a90:	08019415 	stmdaeq	r1, {r0, r2, r4, sl, ip, pc}
    6a94:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    6a98:	5101f321 	tstpl	r1, r1, lsr #6
    6a9c:	01941623 	orrseq	r1, r4, r3, lsr #12
    6aa0:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6aa4:	01f32124 	mvnseq	r2, r4, lsr #2
    6aa8:	94172351 	ldrls	r2, [r7], #-849	; 0x351
    6aac:	1aff0801 	bne	fffc8ab8 <BootRAM+0xef39259>
    6ab0:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    6ab4:	937fb891 	cmnls	pc, #9502720	; 0x910000
    6ab8:	7fbc9104 	svcvc	0x00bc9104
    6abc:	e0930493 	umulls	r0, r3, r3, r4
    6ac0:	003f4e01 	eorseq	r4, pc, r1, lsl #28
    6ac4:	003fd208 	eorseq	sp, pc, r8, lsl #4
    6ac8:	91014408 	tstls	r1, r8, lsl #8
    6acc:	f304935c 	vcge.u8	<illegal reg q4.5>, q2, q6
    6ad0:	04235101 	strteq	r5, [r3], #-257	; 0x101
    6ad4:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6ad8:	f324481a 	vceq.i32	d4, d4, d10
    6adc:	05235101 	streq	r5, [r3, #-257]!	; 0x101
    6ae0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6ae4:	2124401a 	teqcs	r4, sl, lsl r0
    6ae8:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6aec:	08019406 	stmdaeq	r1, {r1, r2, sl, ip, pc}
    6af0:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6af4:	5101f321 	tstpl	r1, r1, lsr #6
    6af8:	01940723 	orrseq	r0, r4, r3, lsr #14
    6afc:	211aff08 	tstcs	sl, r8, lsl #30
    6b00:	f304939f 	vcge.u8	d9, d20, d15
    6b04:	08235101 	stmdaeq	r3!, {r0, r8, ip, lr}
    6b08:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6b0c:	f324481a 	vceq.i32	d4, d4, d10
    6b10:	09235101 	stmdbeq	r3!, {r0, r8, ip, lr}
    6b14:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6b18:	2124401a 	teqcs	r4, sl, lsl r0
    6b1c:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6b20:	0801940a 	stmdaeq	r1, {r1, r3, sl, ip, pc}
    6b24:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6b28:	5101f321 	tstpl	r1, r1, lsr #6
    6b2c:	01940b23 	orrseq	r0, r4, r3, lsr #22
    6b30:	211aff08 	tstcs	sl, r8, lsl #30
    6b34:	f304939f 	vcge.u8	d9, d20, d15
    6b38:	0c235101 	stfeqs	f5, [r3], #-4
    6b3c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6b40:	f324481a 	vceq.i32	d4, d4, d10
    6b44:	0d235101 	stfeqs	f5, [r3, #-4]!
    6b48:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6b4c:	2124401a 	teqcs	r4, sl, lsl r0
    6b50:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6b54:	0801940e 	stmdaeq	r1, {r1, r2, r3, sl, ip, pc}
    6b58:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6b5c:	5101f321 	tstpl	r1, r1, lsr #6
    6b60:	01940f23 	orrseq	r0, r4, r3, lsr #30
    6b64:	211aff08 	tstcs	sl, r8, lsl #30
    6b68:	f304939f 	vcge.u8	d9, d20, d15
    6b6c:	10235101 	eorne	r5, r3, r1, lsl #2
    6b70:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6b74:	f324481a 	vceq.i32	d4, d4, d10
    6b78:	11235101 	teqne	r3, r1, lsl #2
    6b7c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6b80:	2124401a 	teqcs	r4, sl, lsl r0
    6b84:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6b88:	08019412 	stmdaeq	r1, {r1, r4, sl, ip, pc}
    6b8c:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6b90:	5101f321 	tstpl	r1, r1, lsr #6
    6b94:	01941323 	orrseq	r1, r4, r3, lsr #6
    6b98:	211aff08 	tstcs	sl, r8, lsl #30
    6b9c:	f304939f 	vcge.u8	d9, d20, d15
    6ba0:	14235101 	strtne	r5, [r3], #-257	; 0x101
    6ba4:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6ba8:	f324481a 	vceq.i32	d4, d4, d10
    6bac:	15235101 	strne	r5, [r3, #-257]!	; 0x101
    6bb0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6bb4:	2124401a 	teqcs	r4, sl, lsl r0
    6bb8:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6bbc:	08019416 	stmdaeq	r1, {r1, r2, r4, sl, ip, pc}
    6bc0:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6bc4:	5101f321 	tstpl	r1, r1, lsr #6
    6bc8:	01941723 	orrseq	r1, r4, r3, lsr #14
    6bcc:	211aff08 	tstcs	sl, r8, lsl #30
    6bd0:	f304939f 	vcge.u8	d9, d20, d15
    6bd4:	18235101 	stmdane	r3!, {r0, r8, ip, lr}
    6bd8:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6bdc:	f324481a 	vceq.i32	d4, d4, d10
    6be0:	19235101 	stmdbne	r3!, {r0, r8, ip, lr}
    6be4:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6be8:	2124401a 	teqcs	r4, sl, lsl r0
    6bec:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6bf0:	0801941a 	stmdaeq	r1, {r1, r3, r4, sl, ip, pc}
    6bf4:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6bf8:	5101f321 	tstpl	r1, r1, lsr #6
    6bfc:	01941b23 	orrseq	r1, r4, r3, lsr #22
    6c00:	211aff08 	tstcs	sl, r8, lsl #30
    6c04:	9104939f 			; <UNDEFINED> instruction: 0x9104939f
    6c08:	04937fbc 	ldreq	r7, [r3], #4028	; 0xfbc
    6c0c:	d201e093 	andle	lr, r1, #147	; 0x93
    6c10:	4a08003f 	bmi	206d14 <__Stack_Size+0x206514>
    6c14:	73080053 	movwvc	r0, #32851	; 0x8053
    6c18:	935c9101 	cmpls	ip, #1073741824	; 0x40000000
    6c1c:	5101f304 	tstpl	r1, r4, lsl #6
    6c20:	01940423 	orrseq	r0, r4, r3, lsr #8
    6c24:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6c28:	5101f324 	tstpl	r1, r4, lsr #6
    6c2c:	01940523 	orrseq	r0, r4, r3, lsr #10
    6c30:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6c34:	01f32124 	mvnseq	r2, r4, lsr #2
    6c38:	94062351 	strls	r2, [r6], #-849	; 0x351
    6c3c:	1aff0801 	bne	fffc8c48 <BootRAM+0xef393e9>
    6c40:	f3212438 	vqshl.u32	d2, d24, d1
    6c44:	07235101 	streq	r5, [r3, -r1, lsl #2]!
    6c48:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6c4c:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6c50:	5101f304 	tstpl	r1, r4, lsl #6
    6c54:	01940823 	orrseq	r0, r4, r3, lsr #16
    6c58:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6c5c:	5101f324 	tstpl	r1, r4, lsr #6
    6c60:	01940923 	orrseq	r0, r4, r3, lsr #18
    6c64:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6c68:	01f32124 	mvnseq	r2, r4, lsr #2
    6c6c:	940a2351 	strls	r2, [sl], #-849	; 0x351
    6c70:	1aff0801 	bne	fffc8c7c <BootRAM+0xef3941d>
    6c74:	f3212438 	vqshl.u32	d2, d24, d1
    6c78:	0b235101 	bleq	8db084 <__Stack_Size+0x8da884>
    6c7c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6c80:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6c84:	5101f304 	tstpl	r1, r4, lsl #6
    6c88:	01940c23 	orrseq	r0, r4, r3, lsr #24
    6c8c:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6c90:	5101f324 	tstpl	r1, r4, lsr #6
    6c94:	01940d23 	orrseq	r0, r4, r3, lsr #26
    6c98:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6c9c:	01f32124 	mvnseq	r2, r4, lsr #2
    6ca0:	940e2351 	strls	r2, [lr], #-849	; 0x351
    6ca4:	1aff0801 	bne	fffc8cb0 <BootRAM+0xef39451>
    6ca8:	f3212438 	vqshl.u32	d2, d24, d1
    6cac:	0f235101 	svceq	0x00235101
    6cb0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6cb4:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6cb8:	5101f304 	tstpl	r1, r4, lsl #6
    6cbc:	01941023 	orrseq	r1, r4, r3, lsr #32
    6cc0:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6cc4:	5101f324 	tstpl	r1, r4, lsr #6
    6cc8:	01941123 	orrseq	r1, r4, r3, lsr #2
    6ccc:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6cd0:	01f32124 	mvnseq	r2, r4, lsr #2
    6cd4:	94122351 	ldrls	r2, [r2], #-849	; 0x351
    6cd8:	1aff0801 	bne	fffc8ce4 <BootRAM+0xef39485>
    6cdc:	f3212438 	vqshl.u32	d2, d24, d1
    6ce0:	13235101 	teqne	r3, #1073741824	; 0x40000000
    6ce4:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6ce8:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6cec:	5101f304 	tstpl	r1, r4, lsl #6
    6cf0:	01941423 	orrseq	r1, r4, r3, lsr #8
    6cf4:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6cf8:	5101f324 	tstpl	r1, r4, lsr #6
    6cfc:	01941523 	orrseq	r1, r4, r3, lsr #10
    6d00:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6d04:	01f32124 	mvnseq	r2, r4, lsr #2
    6d08:	94162351 	ldrls	r2, [r6], #-849	; 0x351
    6d0c:	1aff0801 	bne	fffc8d18 <BootRAM+0xef394b9>
    6d10:	f3212438 	vqshl.u32	d2, d24, d1
    6d14:	17235101 	strne	r5, [r3, -r1, lsl #2]!
    6d18:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6d1c:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6d20:	5101f304 	tstpl	r1, r4, lsl #6
    6d24:	01941823 	orrseq	r1, r4, r3, lsr #16
    6d28:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6d2c:	5101f324 	tstpl	r1, r4, lsr #6
    6d30:	01941923 	orrseq	r1, r4, r3, lsr #18
    6d34:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6d38:	01f32124 	mvnseq	r2, r4, lsr #2
    6d3c:	941a2351 	ldrls	r2, [sl], #-849	; 0x351
    6d40:	1aff0801 	bne	fffc8d4c <BootRAM+0xef394ed>
    6d44:	f3212438 	vqshl.u32	d2, d24, d1
    6d48:	1b235101 	blne	8db154 <__Stack_Size+0x8da954>
    6d4c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6d50:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6d54:	5101f304 	tstpl	r1, r4, lsl #6
    6d58:	01941c23 	orrseq	r1, r4, r3, lsr #24
    6d5c:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6d60:	5101f324 	tstpl	r1, r4, lsr #6
    6d64:	01941d23 	orrseq	r1, r4, r3, lsr #26
    6d68:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6d6c:	01f32124 	mvnseq	r2, r4, lsr #2
    6d70:	941e2351 	ldrls	r2, [lr], #-849	; 0x351
    6d74:	1aff0801 	bne	fffc8d80 <BootRAM+0xef39521>
    6d78:	f3212438 	vqshl.u32	d2, d24, d1
    6d7c:	1f235101 	svcne	0x00235101
    6d80:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6d84:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6d88:	01e09304 	mvneq	r9, r4, lsl #6
    6d8c:	0800534a 	stmdaeq	r0, {r1, r3, r6, r8, r9, ip, lr}
    6d90:	0800536c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, ip, lr}
    6d94:	5c910007 	ldcpl	0, cr0, [r1], {7}
    6d98:	fc930493 	ldc2	4, cr0, [r3], {147}	; 0x93
    6d9c:	00536c01 	subseq	r6, r3, r1, lsl #24
    6da0:	00538408 	subseq	r8, r3, r8, lsl #8
    6da4:	7d000708 	stcvc	7, cr0, [r0, #-32]	; 0xffffffe0
    6da8:	9304935c 	movwls	r9, #17244	; 0x435c
    6dac:	000001fc 	strdeq	r0, [r0], -ip
    6db0:	00000000 	andeq	r0, r0, r0
    6db4:	3b9c0000 	blcc	fe706dbc <BootRAM+0xd67755d>
    6db8:	3ba00800 	blcc	fe808dc0 <BootRAM+0xd779561>
    6dbc:	00010800 	andeq	r0, r1, r0, lsl #16
    6dc0:	003c0854 	eorseq	r0, ip, r4, asr r8
    6dc4:	003f5008 	eorseq	r5, pc, r8
    6dc8:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    6dcc:	08003fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, sp}
    6dd0:	0800419a 	stmdaeq	r0, {r1, r3, r4, r7, r8, lr}
    6dd4:	9a5c0001 	bls	1706de0 <__Stack_Size+0x17065e0>
    6dd8:	04080041 	streq	r0, [r8], #-65	; 0x41
    6ddc:	01080043 	tsteq	r8, r3, asr #32
    6de0:	43605400 	cmnmi	r0, #0, 8
    6de4:	46e40800 	strbtmi	r0, [r4], r0, lsl #16
    6de8:	00010800 	andeq	r0, r1, r0, lsl #16
    6dec:	00473857 	subeq	r3, r7, r7, asr r8
    6df0:	004aa808 	subeq	sl, sl, r8, lsl #16
    6df4:	58000108 	stmdapl	r0, {r3, r8}
    6df8:	08004b0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp, lr}
    6dfc:	08004eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, lr}
    6e00:	06560001 	ldrbeq	r0, [r6], -r1
    6e04:	1808004f 	stmdane	r8, {r0, r1, r2, r3, r6}
    6e08:	0108004f 	tsteq	r8, pc, asr #32
    6e0c:	4f185900 	svcmi	0x00185900
    6e10:	4f420800 	svcmi	0x00420800
    6e14:	00010800 	andeq	r0, r1, r0, lsl #16
    6e18:	004f425a 	subeq	r4, pc, sl, asr r2	; <UNPREDICTABLE>
    6e1c:	00517a08 	subseq	r7, r1, r8, lsl #20
    6e20:	91000308 	tstls	r0, r8, lsl #6
    6e24:	517a7f98 			; <UNDEFINED> instruction: 0x517a7f98
    6e28:	52f20800 	rscspl	r0, r2, #0, 16
    6e2c:	00010800 	andeq	r0, r1, r0, lsl #16
    6e30:	00000052 	andeq	r0, r0, r2, asr r0
    6e34:	00000000 	andeq	r0, r0, r0
    6e38:	003b9e00 	eorseq	r9, fp, r0, lsl #28
    6e3c:	003ee808 	eorseq	lr, lr, r8, lsl #16
    6e40:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    6e44:	08003f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, ip, sp}
    6e48:	0800429c 	stmdaeq	r0, {r2, r3, r4, r7, r9, lr}
    6e4c:	f0530001 			; <UNDEFINED> instruction: 0xf0530001
    6e50:	64080042 	strvs	r0, [r8], #-66	; 0x42
    6e54:	01080046 	tsteq	r8, r6, asr #32
    6e58:	46d05600 	ldrbmi	r5, [r0], r0, lsl #12
    6e5c:	4a380800 	bmi	e08e64 <__Stack_Size+0xe08664>
    6e60:	00010800 	andeq	r0, r1, r0, lsl #16
    6e64:	004a9056 	subeq	r9, sl, r6, asr r0
    6e68:	004e2a08 	subeq	r2, lr, r8, lsl #20
    6e6c:	50000108 	andpl	r0, r0, r8, lsl #2
    6e70:	08004e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, lr}
    6e74:	080050d0 	stmdaeq	r0, {r4, r6, r7, ip, lr}
    6e78:	94910003 	ldrls	r0, [r1], #3
    6e7c:	0050d07f 	subseq	sp, r0, pc, ror r0
    6e80:	00527e08 	subseq	r7, r2, r8, lsl #28
    6e84:	5c000108 	stfpls	f0, [r0], {8}
    6e88:	080052dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, ip, lr}
    6e8c:	0800533e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, ip, lr}
    6e90:	00540001 	subseq	r0, r4, r1
    6e94:	00000000 	andeq	r0, r0, r0
    6e98:	9c000000 	stcls	0, cr0, [r0], {-0}
    6e9c:	6a08003b 	bvs	206f90 <__Stack_Size+0x206790>
    6ea0:	0108003e 	tsteq	r8, lr, lsr r0
    6ea4:	3ed25600 	cdpcc	6, 13, cr5, cr2, cr0, {0}
    6ea8:	42280800 	eormi	r0, r8, #0, 16
    6eac:	00010800 	andeq	r0, r1, r0, lsl #16
    6eb0:	00427e52 	subeq	r7, r2, r2, asr lr
    6eb4:	0045f608 	subeq	pc, r5, r8, lsl #12
    6eb8:	50000108 	andpl	r0, r0, r8, lsl #2
    6ebc:	0800464a 	stmdaeq	r0, {r1, r3, r6, r9, sl, lr}
    6ec0:	080049c2 	stmdaeq	r0, {r1, r6, r7, r8, fp, lr}
    6ec4:	14500001 	ldrbne	r0, [r0], #-1
    6ec8:	b608004a 	strlt	r0, [r8], -sl, asr #32
    6ecc:	0108004d 	tsteq	r8, sp, asr #32
    6ed0:	4e165300 	cdpmi	3, 1, cr5, cr6, cr0, {0}
    6ed4:	51ec0800 	mvnpl	r0, r0, lsl #16
    6ed8:	00010800 	andeq	r0, r1, r0, lsl #16
    6edc:	00524a54 	subseq	r4, r2, r4, asr sl
    6ee0:	00533608 	subseq	r3, r3, r8, lsl #12
    6ee4:	51000108 	tstpl	r0, r8, lsl #2
	...
    6ef0:	08003b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, ip, sp}
    6ef4:	08003dee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl, fp, ip, sp}
    6ef8:	525b0001 	subspl	r0, fp, #1
    6efc:	b808003e 	stmdalt	r8, {r1, r2, r3, r4, r5}
    6f00:	01080041 	tsteq	r8, r1, asr #32
    6f04:	42125000 	andsmi	r5, r2, #0
    6f08:	456e0800 	strbmi	r0, [lr, #-2048]!	; 0x800
    6f0c:	00010800 	andeq	r0, r1, r0, lsl #16
    6f10:	0045d45c 	subeq	sp, r5, ip, asr r4
    6f14:	00495408 	subeq	r5, r9, r8, lsl #8
    6f18:	53000108 	movwpl	r0, #264	; 0x108
    6f1c:	080049a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, lr}
    6f20:	08004d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, lr}
    6f24:	a4510001 	ldrbge	r0, [r1], #-1
    6f28:	8408004d 	strhi	r0, [r8], #-77	; 0x4d
    6f2c:	01080051 	qaddeq	r0, r1, r8
    6f30:	51da5100 	bicspl	r5, sl, r0, lsl #2
    6f34:	53280800 	teqpl	r8, #0, 16
    6f38:	00010800 	andeq	r0, r1, r0, lsl #16
    6f3c:	00000053 	andeq	r0, r0, r3, asr r0
    6f40:	00000000 	andeq	r0, r0, r0
    6f44:	003b9c00 	eorseq	r9, fp, r0, lsl #24
    6f48:	003c0408 	eorseq	r0, ip, r8, lsl #8
    6f4c:	91000308 	tstls	r0, r8, lsl #6
    6f50:	3c047f94 	stccc	15, cr7, [r4], {148}	; 0x94
    6f54:	3d900800 	ldccc	8, cr0, [r0]
    6f58:	00010800 	andeq	r0, r1, r0, lsl #16
    6f5c:	003df854 	eorseq	pc, sp, r4, asr r8	; <UNPREDICTABLE>
    6f60:	00414808 	subeq	r4, r1, r8, lsl #16
    6f64:	54000108 	strpl	r0, [r0], #-264	; 0x108
    6f68:	080041a2 	stmdaeq	r0, {r1, r5, r7, r8, lr}
    6f6c:	080044f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, lr}
    6f70:	56590001 	ldrbpl	r0, [r9], -r1
    6f74:	f8080045 			; <UNDEFINED> instruction: 0xf8080045
    6f78:	01080048 	tsteq	r8, r8, asr #32
    6f7c:	49385200 	ldmdbmi	r8!, {r9, ip, lr}
    6f80:	4cbc0800 	ldcmi	8, cr0, [ip]
    6f84:	00010800 	andeq	r0, r1, r0, lsl #16
    6f88:	004d2852 	subeq	r2, sp, r2, asr r8
    6f8c:	0050e408 	subseq	lr, r0, r8, lsl #8
    6f90:	52000108 	andpl	r0, r0, #8, 2
    6f94:	0800517a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, ip, lr}
    6f98:	08005194 	stmdaeq	r0, {r2, r4, r7, r8, ip, lr}
    6f9c:	94530001 	ldrbls	r0, [r3], #-1
    6fa0:	34080051 	strcc	r0, [r8], #-81	; 0x51
    6fa4:	03080053 	movweq	r0, #32851	; 0x8053
    6fa8:	7fb09100 	svcvc	0x00b09100
    6fac:	08005334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip, lr}
    6fb0:	08005346 	stmdaeq	r0, {r1, r2, r6, r8, r9, ip, lr}
    6fb4:	b0910008 	addslt	r0, r1, r8
    6fb8:	0077067f 	rsbseq	r0, r7, pc, ror r6
    6fbc:	00009f22 	andeq	r9, r0, r2, lsr #30
    6fc0:	00000000 	andeq	r0, r0, r0
    6fc4:	3b9c0000 	blcc	fe706fcc <BootRAM+0xd67776d>
    6fc8:	3d0e0800 	stccc	8, cr0, [lr, #-0]
    6fcc:	00010800 	andeq	r0, r1, r0, lsl #16
    6fd0:	003d7c53 	eorseq	r7, sp, r3, asr ip
    6fd4:	0040d208 	subeq	sp, r0, r8, lsl #4
    6fd8:	51000108 	tstpl	r0, r8, lsl #2
    6fdc:	0800411e 	stmdaeq	r0, {r1, r2, r3, r4, r8, lr}
    6fe0:	08004484 	stmdaeq	r0, {r2, r7, sl, lr}
    6fe4:	d4510001 	ldrble	r0, [r1], #-1
    6fe8:	64080044 	strvs	r0, [r8], #-68	; 0x44
    6fec:	01080048 	tsteq	r8, r8, asr #32
    6ff0:	48c25100 	stmiami	r2, {r8, ip, lr}^
    6ff4:	4c3a0800 	ldcmi	8, cr0, [sl], #-0
    6ff8:	00010800 	andeq	r0, r1, r0, lsl #16
    6ffc:	004caa54 	subeq	sl, ip, r4, asr sl
    7000:	00506808 	subseq	r6, r0, r8, lsl #16
    7004:	58000108 	stmdapl	r0, {r3, r8}
    7008:	080050d2 	stmdaeq	r0, {r1, r4, r6, r7, ip, lr}
    700c:	080050f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, ip, lr}
    7010:	f65b0001 			; <UNDEFINED> instruction: 0xf65b0001
    7014:	00080050 	andeq	r0, r8, r0, asr r0
    7018:	01080051 	qaddeq	r0, r1, r8
    701c:	51005200 	mrspl	r5, R8_usr
    7020:	52dc0800 	sbcspl	r0, ip, #0, 16
    7024:	00030800 	andeq	r0, r3, r0, lsl #16
    7028:	dc7f9491 	cfldrdle	mvd9, [pc], #-580	; 6dec <__Stack_Size+0x65ec>
    702c:	44080052 	strmi	r0, [r8], #-82	; 0x52
    7030:	01080053 	qaddeq	r0, r3, r8
    7034:	00005600 	andeq	r5, r0, r0, lsl #12
    7038:	00000000 	andeq	r0, r0, r0
    703c:	3b9c0000 	blcc	fe707044 <BootRAM+0xd6777e5>
    7040:	3ca00800 	stccc	8, cr0, [r0]
    7044:	00010800 	andeq	r0, r1, r0, lsl #16
    7048:	003cfc52 	eorseq	pc, ip, r2, asr ip	; <UNPREDICTABLE>
    704c:	00405a08 	subeq	r5, r0, r8, lsl #20
    7050:	5a000108 	bpl	7478 <__Stack_Size+0x6c78>
    7054:	080040be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, lr}
    7058:	08004418 	stmdaeq	r0, {r3, r4, sl, lr}
    705c:	6a5a0001 	bvs	1687068 <__Stack_Size+0x1686868>
    7060:	f6080044 			; <UNDEFINED> instruction: 0xf6080044
    7064:	01080047 	tsteq	r8, r7, asr #32
    7068:	484c5400 	stmdami	ip, {sl, ip, lr}^
    706c:	4b900800 	blmi	fe409074 <BootRAM+0xd379815>
    7070:	00010800 	andeq	r0, r1, r0, lsl #16
    7074:	004c3255 	subeq	r3, ip, r5, asr r2
    7078:	004fb608 	subeq	fp, pc, r8, lsl #12
    707c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    7080:	08005016 	stmdaeq	r0, {r1, r2, r4, ip, lr}
    7084:	0800507c 	stmdaeq	r0, {r2, r3, r4, r5, r6, ip, lr}
    7088:	7c5a0001 	mrrcvc	0, 0, r0, sl, cr1
    708c:	8e080050 	mcrhi	0, 0, r0, cr8, cr0, {2}
    7090:	01080050 	qaddeq	r0, r0, r8
    7094:	508e5000 	addpl	r5, lr, r0
    7098:	52420800 	subpl	r0, r2, #0, 16
    709c:	00030800 	andeq	r0, r3, r0, lsl #16
    70a0:	427fa891 	rsbsmi	sl, pc, #9502720	; 0x910000
    70a4:	30080052 	andcc	r0, r8, r2, asr r0
    70a8:	01080053 	qaddeq	r0, r3, r8
    70ac:	00005500 	andeq	r5, r0, r0, lsl #10
    70b0:	00000000 	andeq	r0, r0, r0
    70b4:	3b9c0000 	blcc	fe7070bc <BootRAM+0xd67785d>
    70b8:	3c1c0800 	ldccc	8, cr0, [ip], {-0}
    70bc:	00010800 	andeq	r0, r1, r0, lsl #16
    70c0:	003c8850 	eorseq	r8, ip, r0, asr r8
    70c4:	003ff208 	eorseq	pc, pc, r8, lsl #4
    70c8:	58000108 	stmdapl	r0, {r3, r8}
    70cc:	08004058 	stmdaeq	r0, {r3, r4, r6, lr}
    70d0:	08004210 	stmdaeq	r0, {r4, r9, lr}
    70d4:	10560001 	subsne	r0, r6, r1
    70d8:	aa080042 	bge	2071e8 <__Stack_Size+0x2069e8>
    70dc:	01080043 	tsteq	r8, r3, asr #32
    70e0:	44005b00 	strmi	r5, [r0], #-2816	; 0xb00
    70e4:	475e0800 	ldrbmi	r0, [lr, -r0, lsl #16]
    70e8:	00010800 	andeq	r0, r1, r0, lsl #16
    70ec:	0047ac55 	subeq	sl, r7, r5, asr ip
    70f0:	004b3208 	subeq	r3, fp, r8, lsl #4
    70f4:	5c000108 	stfpls	f0, [r0], {8}
    70f8:	08004b82 	stmdaeq	r0, {r1, r7, r8, r9, fp, lr}
    70fc:	08004f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, lr}
    7100:	7c5c0001 	mrrcvc	0, 0, r0, ip, cr1
    7104:	da08004f 	ble	207248 <__Stack_Size+0x206a48>
    7108:	0108004f 	tsteq	r8, pc, asr #32
    710c:	4fda5000 	svcmi	0x00da5000
    7110:	4fe60800 	svcmi	0x00e60800
    7114:	00010800 	andeq	r0, r1, r0, lsl #16
    7118:	004fe65b 	subeq	lr, pc, fp, asr r6	; <UNPREDICTABLE>
    711c:	0051d608 	subseq	sp, r1, r8, lsl #12
    7120:	91000308 	tstls	r0, r8, lsl #6
    7124:	51d67fa4 	bicspl	r7, r6, r4, lsr #31
    7128:	53200800 	teqpl	r0, #0, 16
    712c:	00010800 	andeq	r0, r1, r0, lsl #16
    7130:	00000050 	andeq	r0, r0, r0, asr r0
    7134:	00000000 	andeq	r0, r0, r0
    7138:	00538400 	subseq	r8, r3, r0, lsl #8
    713c:	0053a608 	subseq	sl, r3, r8, lsl #12
    7140:	50000108 	andpl	r0, r0, r8, lsl #2
    7144:	080053a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, ip, lr}
    7148:	080053d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, ip, lr}
    714c:	d6560001 	ldrble	r0, [r6], -r1
    7150:	de080053 	mcrle	0, 0, r0, cr8, cr3, {2}
    7154:	01080053 	qaddeq	r0, r3, r8
    7158:	53de5000 	bicspl	r5, lr, #0
    715c:	53ec0800 	mvnpl	r0, #0, 16
    7160:	00010800 	andeq	r0, r1, r0, lsl #16
    7164:	0053ec56 	subseq	lr, r3, r6, asr ip
    7168:	0053f008 	subseq	pc, r3, r8
    716c:	f3000408 	vshl.u8	d0, d8, d0
    7170:	f09f5001 			; <UNDEFINED> instruction: 0xf09f5001
    7174:	f4080053 	vst4.16	{d0-d3}, [r8 :64], r3
    7178:	01080053 	qaddeq	r0, r3, r8
    717c:	53f45000 	mvnspl	r5, #0
    7180:	54120800 	ldrpl	r0, [r2], #-2048	; 0x800
    7184:	00010800 	andeq	r0, r1, r0, lsl #16
    7188:	00000056 	andeq	r0, r0, r6, asr r0
    718c:	00000000 	andeq	r0, r0, r0
    7190:	00538400 	subseq	r8, r3, r0, lsl #8
    7194:	0053a608 	subseq	sl, r3, r8, lsl #12
    7198:	51000108 	tstpl	r0, r8, lsl #2
    719c:	080053a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, ip, lr}
    71a0:	080053d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, ip, lr}
    71a4:	01f30004 	mvnseq	r0, r4
    71a8:	53d69f51 	bicspl	r9, r6, #324	; 0x144
    71ac:	53de0800 	bicspl	r0, lr, #0, 16
    71b0:	00010800 	andeq	r0, r1, r0, lsl #16
    71b4:	0053de51 	subseq	sp, r3, r1, asr lr
    71b8:	0053f008 	subseq	pc, r3, r8
    71bc:	f3000408 	vshl.u8	d0, d8, d0
    71c0:	f09f5101 			; <UNDEFINED> instruction: 0xf09f5101
    71c4:	f6080053 			; <UNDEFINED> instruction: 0xf6080053
    71c8:	01080053 	qaddeq	r0, r3, r8
    71cc:	53f65100 	mvnspl	r5, #0, 2
    71d0:	540c0800 	strpl	r0, [ip], #-2048	; 0x800
    71d4:	00010800 	andeq	r0, r1, r0, lsl #16
    71d8:	00540c58 	subseq	r0, r4, r8, asr ip
    71dc:	00541208 	subseq	r1, r4, r8, lsl #4
    71e0:	f3000408 	vshl.u8	d0, d8, d0
    71e4:	009f5101 	addseq	r5, pc, r1, lsl #2
    71e8:	00000000 	andeq	r0, r0, r0
    71ec:	84000000 	strhi	r0, [r0], #-0
    71f0:	94080053 	strls	r0, [r8], #-83	; 0x53
    71f4:	01080053 	qaddeq	r0, r3, r8
    71f8:	53945200 	orrspl	r5, r4, #0, 4
    71fc:	53a60800 			; <UNDEFINED> instruction: 0x53a60800
    7200:	00010800 	andeq	r0, r1, r0, lsl #16
    7204:	0053a657 	subseq	sl, r3, r7, asr r6
    7208:	0053d608 	subseq	sp, r3, r8, lsl #12
    720c:	f3000408 	vshl.u8	d0, d8, d0
    7210:	d69f5201 	ldrle	r5, [pc], r1, lsl #4
    7214:	de080053 	mcrle	0, 0, r0, cr8, cr3, {2}
    7218:	01080053 	qaddeq	r0, r3, r8
    721c:	53de5700 	bicspl	r5, lr, #0, 14
    7220:	53f00800 	mvnspl	r0, #0, 16
    7224:	00040800 	andeq	r0, r4, r0, lsl #16
    7228:	9f5201f3 	svcls	0x005201f3
    722c:	080053f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip, lr}
    7230:	0800540a 	stmdaeq	r0, {r1, r3, sl, ip, lr}
    7234:	0a570001 	beq	15c7240 <__Stack_Size+0x15c6a40>
    7238:	12080054 	andne	r0, r8, #84	; 0x54
    723c:	04080054 	streq	r0, [r8], #-84	; 0x54
    7240:	5201f300 	andpl	pc, r1, #0, 6
    7244:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7248:	00000000 	andeq	r0, r0, r0
    724c:	00539000 	subseq	r9, r3, r0
    7250:	00539408 	subseq	r9, r3, r8, lsl #8
    7254:	52000108 	andpl	r0, r0, #8, 2
    7258:	08005394 	stmdaeq	r0, {r2, r4, r7, r8, r9, ip, lr}
    725c:	080053ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, ip, lr}
    7260:	ae570001 	cdpge	0, 5, cr0, cr7, cr1, {0}
    7264:	b2080053 	andlt	r0, r8, #83	; 0x53
    7268:	01080053 	qaddeq	r0, r3, r8
    726c:	53b25500 			; <UNDEFINED> instruction: 0x53b25500
    7270:	53b80800 			; <UNDEFINED> instruction: 0x53b80800
    7274:	00040800 	andeq	r0, r4, r0, lsl #16
    7278:	9f00c075 	svcls	0x0000c075
    727c:	080053b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, ip, lr}
    7280:	080053d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, ip, lr}
    7284:	d6550001 	ldrble	r0, [r5], -r1
    7288:	de080053 	mcrle	0, 0, r0, cr8, cr3, {2}
    728c:	01080053 	qaddeq	r0, r3, r8
    7290:	53f05700 	mvnspl	r5, #0, 14
    7294:	540e0800 	strpl	r0, [lr], #-2048	; 0x800
    7298:	00010800 	andeq	r0, r1, r0, lsl #16
    729c:	00000057 	andeq	r0, r0, r7, asr r0
    72a0:	00000000 	andeq	r0, r0, r0
    72a4:	00539000 	subseq	r9, r3, r0
    72a8:	0053a608 	subseq	sl, r3, r8, lsl #12
    72ac:	51000108 	tstpl	r0, r8, lsl #2
    72b0:	080053a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, ip, lr}
    72b4:	080053ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, ip, lr}
    72b8:	ae580001 	cdpge	0, 5, cr0, cr8, cr1, {0}
    72bc:	d0080053 	andle	r0, r8, r3, asr r0
    72c0:	01080053 	qaddeq	r0, r3, r8
    72c4:	53d65400 	bicspl	r5, r6, #0, 8
    72c8:	53de0800 	bicspl	r0, lr, #0, 16
    72cc:	00010800 	andeq	r0, r1, r0, lsl #16
    72d0:	0053f051 	subseq	pc, r3, r1, asr r0	; <UNPREDICTABLE>
    72d4:	0053f608 	subseq	pc, r3, r8, lsl #12
    72d8:	51000108 	tstpl	r0, r8, lsl #2
    72dc:	080053f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, ip, lr}
    72e0:	0800540e 	stmdaeq	r0, {r1, r2, r3, sl, ip, lr}
    72e4:	00580001 	subseq	r0, r8, r1
    72e8:	00000000 	andeq	r0, r0, r0
    72ec:	90000000 	andls	r0, r0, r0
    72f0:	a6080053 			; <UNDEFINED> instruction: 0xa6080053
    72f4:	01080053 	qaddeq	r0, r3, r8
    72f8:	53a65000 			; <UNDEFINED> instruction: 0x53a65000
    72fc:	53d20800 	bicspl	r0, r2, #0, 16
    7300:	00010800 	andeq	r0, r1, r0, lsl #16
    7304:	0053d656 	subseq	sp, r3, r6, asr r6
    7308:	0053de08 	subseq	sp, r3, r8, lsl #28
    730c:	50000108 	andpl	r0, r0, r8, lsl #2
    7310:	080053de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, ip, lr}
    7314:	080053ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, ip, lr}
    7318:	ec560001 	mrrc	0, 0, r0, r6, cr1
    731c:	f0080053 			; <UNDEFINED> instruction: 0xf0080053
    7320:	04080053 	streq	r0, [r8], #-83	; 0x53
    7324:	5001f300 	andpl	pc, r1, r0, lsl #6
    7328:	0053f09f 			; <UNDEFINED> instruction: 0x0053f09f
    732c:	0053f408 	subseq	pc, r3, r8, lsl #8
    7330:	50000108 	andpl	r0, r0, r8, lsl #2
    7334:	080053f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, ip, lr}
    7338:	08005412 	stmdaeq	r0, {r1, r4, sl, ip, lr}
    733c:	00560001 	subseq	r0, r6, r1
    7340:	00000000 	andeq	r0, r0, r0
    7344:	9c000000 	stcls	0, cr0, [r0], {-0}
    7348:	a6080053 			; <UNDEFINED> instruction: 0xa6080053
    734c:	01080053 	qaddeq	r0, r3, r8
    7350:	53a65300 			; <UNDEFINED> instruction: 0x53a65300
    7354:	53d20800 	bicspl	r0, r2, #0, 16
    7358:	00020800 	andeq	r0, r2, r0, lsl #16
    735c:	53d69f30 	bicspl	r9, r6, #48, 30	; 0xc0
    7360:	53de0800 	bicspl	r0, lr, #0, 16
    7364:	00010800 	andeq	r0, r1, r0, lsl #16
    7368:	0053f053 	subseq	pc, r3, r3, asr r0	; <UNPREDICTABLE>
    736c:	0053fd08 	subseq	pc, r3, r8, lsl #26
    7370:	53000108 	movwpl	r0, #264	; 0x108
    7374:	0800540c 	stmdaeq	r0, {r2, r3, sl, ip, lr}
    7378:	08005412 	stmdaeq	r0, {r1, r4, sl, ip, lr}
    737c:	9f300002 	svcls	0x00300002
	...
    7388:	0800539c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, ip, lr}
    738c:	080053a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, ip, lr}
    7390:	40080006 	andmi	r0, r8, r6
    7394:	9f1c0073 	svcls	0x001c0073
    7398:	080053d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, ip, lr}
    739c:	080053de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, ip, lr}
    73a0:	40080006 	andmi	r0, r8, r6
    73a4:	9f1c0073 	svcls	0x001c0073
    73a8:	080053f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip, lr}
    73ac:	080053fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, r9, ip, lr}
    73b0:	40080006 	andmi	r0, r8, r6
    73b4:	9f1c0073 	svcls	0x001c0073
	...
    73c0:	08005414 	stmdaeq	r0, {r2, r4, sl, ip, lr}
    73c4:	0800543c 	stmdaeq	r0, {r2, r3, r4, r5, sl, ip, lr}
    73c8:	3c500001 	mrrccc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    73cc:	2c080054 	stccs	0, cr0, [r8], {84}	; 0x54
    73d0:	01080056 	qaddeq	r0, r6, r8
    73d4:	00005400 	andeq	r5, r0, r0, lsl #8
    73d8:	00000000 	andeq	r0, r0, r0
    73dc:	54140000 	ldrpl	r0, [r4], #-0
    73e0:	54940800 	ldrpl	r0, [r4], #2048	; 0x800
    73e4:	00010800 	andeq	r0, r1, r0, lsl #16
    73e8:	00549451 	subseq	r9, r4, r1, asr r4
    73ec:	00557608 	subseq	r7, r5, r8, lsl #12
    73f0:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    73f4:	08005576 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, ip, lr}
    73f8:	08005580 	stmdaeq	r0, {r7, r8, sl, ip, lr}
    73fc:	80510001 	subshi	r0, r1, r1
    7400:	c8080055 	stmdagt	r8, {r0, r2, r4, r6}
    7404:	01080055 	qaddeq	r0, r5, r8
    7408:	55c85500 	strbpl	r5, [r8, #1280]	; 0x500
    740c:	55ce0800 	strbpl	r0, [lr, #2048]	; 0x800
    7410:	00010800 	andeq	r0, r1, r0, lsl #16
    7414:	0055ce51 	subseq	ip, r5, r1, asr lr
    7418:	00562c08 	subseq	r2, r6, r8, lsl #24
    741c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    7428:	08005442 	stmdaeq	r0, {r1, r6, sl, ip, lr}
    742c:	08005494 	stmdaeq	r0, {r2, r4, r7, sl, ip, lr}
    7430:	76560001 	ldrbvc	r0, [r6], -r1
    7434:	a2080055 	andge	r0, r8, #85	; 0x55
    7438:	01080055 	qaddeq	r0, r5, r8
    743c:	55c85600 	strbpl	r5, [r8, #1536]	; 0x600
    7440:	55ce0800 	strbpl	r0, [lr, #2048]	; 0x800
    7444:	00010800 	andeq	r0, r1, r0, lsl #16
    7448:	00561456 	subseq	r1, r6, r6, asr r4
    744c:	00561808 	subseq	r1, r6, r8, lsl #16
    7450:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    745c:	08005442 	stmdaeq	r0, {r1, r6, sl, ip, lr}
    7460:	08005494 	stmdaeq	r0, {r2, r4, r7, sl, ip, lr}
    7464:	76580001 	ldrbvc	r0, [r8], -r1
    7468:	92080055 	andls	r0, r8, #85	; 0x55
    746c:	01080055 	qaddeq	r0, r5, r8
    7470:	55c85800 	strbpl	r5, [r8, #2048]	; 0x800
    7474:	55ce0800 	strbpl	r0, [lr, #2048]	; 0x800
    7478:	00010800 	andeq	r0, r1, r0, lsl #16
    747c:	00000058 	andeq	r0, r0, r8, asr r0
    7480:	00000000 	andeq	r0, r0, r0
    7484:	00544200 	subseq	r4, r4, r0, lsl #4
    7488:	00549408 	subseq	r9, r4, r8, lsl #8
    748c:	50000108 	andpl	r0, r0, r8, lsl #2
    7490:	08005576 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, ip, lr}
    7494:	0800557e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, ip, lr}
    7498:	c8500001 	ldmdagt	r0, {r0}^
    749c:	ce080055 	mcrgt	0, 0, r0, cr8, cr5, {2}
    74a0:	01080055 	qaddeq	r0, r5, r8
    74a4:	00005000 	andeq	r5, r0, r0
    74a8:	00000000 	andeq	r0, r0, r0
    74ac:	54420000 	strbpl	r0, [r2], #-0
    74b0:	54940800 	ldrpl	r0, [r4], #2048	; 0x800
    74b4:	00010800 	andeq	r0, r1, r0, lsl #16
    74b8:	00557652 	subseq	r7, r5, r2, asr r6
    74bc:	00558408 	subseq	r8, r5, r8, lsl #8
    74c0:	52000108 	andpl	r0, r0, #8, 2
    74c4:	080055c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, ip, lr}
    74c8:	080055ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, ip, lr}
    74cc:	00520001 	subseq	r0, r2, r1
    74d0:	00000000 	andeq	r0, r0, r0
    74d4:	42000000 	andmi	r0, r0, #0
    74d8:	94080054 	strls	r0, [r8], #-84	; 0x54
    74dc:	01080054 	qaddeq	r0, r4, r8
    74e0:	55765800 	ldrbpl	r5, [r6, #-2048]!	; 0x800
    74e4:	55920800 	ldrpl	r0, [r2, #2048]	; 0x800
    74e8:	00010800 	andeq	r0, r1, r0, lsl #16
    74ec:	00559858 	subseq	r9, r5, r8, asr r8
    74f0:	0055a208 	subseq	sl, r5, r8, lsl #4
    74f4:	58000108 	stmdapl	r0, {r3, r8}
    74f8:	080055a2 	stmdaeq	r0, {r1, r5, r7, r8, sl, ip, lr}
    74fc:	080055a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, sl, ip, lr}
    7500:	a6570001 	ldrbge	r0, [r7], -r1
    7504:	ac080055 	stcge	0, cr0, [r8], {85}	; 0x55
    7508:	04080055 	streq	r0, [r8], #-85	; 0x55
    750c:	00c07700 	sbceq	r7, r0, r0, lsl #14
    7510:	0055ac9f 			; <UNDEFINED> instruction: 0x0055ac9f
    7514:	0055c808 	subseq	ip, r5, r8, lsl #16
    7518:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    751c:	080055c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, ip, lr}
    7520:	080055ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, ip, lr}
    7524:	14580001 	ldrbne	r0, [r8], #-1
    7528:	1a080056 	bne	207688 <__Stack_Size+0x206e88>
    752c:	01080056 	qaddeq	r0, r6, r8
    7530:	00005800 	andeq	r5, r0, r0, lsl #16
    7534:	00000000 	andeq	r0, r0, r0
    7538:	54420000 	strbpl	r0, [r2], #-0
    753c:	54940800 	ldrpl	r0, [r4], #2048	; 0x800
    7540:	00060800 	andeq	r0, r6, r0, lsl #16
    7544:	0002cc03 	andeq	ip, r2, r3, lsl #24
    7548:	55769f20 	ldrbpl	r9, [r6, #-3872]!	; 0xf20
    754c:	55980800 	ldrpl	r0, [r8, #2048]	; 0x800
    7550:	00060800 	andeq	r0, r6, r0, lsl #16
    7554:	0002cc03 	andeq	ip, r2, r3, lsl #24
    7558:	55989f20 	ldrpl	r9, [r8, #3872]	; 0xf20
    755c:	55a20800 	strpl	r0, [r2, #2048]!	; 0x800
    7560:	00010800 	andeq	r0, r1, r0, lsl #16
    7564:	0055a259 	subseq	sl, r5, r9, asr r2
    7568:	0055c608 	subseq	ip, r5, r8, lsl #12
    756c:	56000108 	strpl	r0, [r0], -r8, lsl #2
    7570:	080055c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, ip, lr}
    7574:	080055ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, ip, lr}
    7578:	cc030006 	stcgt	0, cr0, [r3], {6}
    757c:	9f200002 	svcls	0x00200002
    7580:	08005614 	stmdaeq	r0, {r2, r4, r9, sl, ip, lr}
    7584:	0800561a 	stmdaeq	r0, {r1, r3, r4, r9, sl, ip, lr}
    7588:	00590001 	subseq	r0, r9, r1
    758c:	00000000 	andeq	r0, r0, r0
    7590:	42000000 	andmi	r0, r0, #0
    7594:	94080054 	strls	r0, [r8], #-84	; 0x54
    7598:	01080054 	qaddeq	r0, r4, r8
    759c:	55765600 	ldrbpl	r5, [r6, #-1536]!	; 0x600
    75a0:	55980800 	ldrpl	r0, [r8, #2048]	; 0x800
    75a4:	00010800 	andeq	r0, r1, r0, lsl #16
    75a8:	00559856 	subseq	r9, r5, r6, asr r8
    75ac:	0055c808 	subseq	ip, r5, r8, lsl #16
    75b0:	30000208 	andcc	r0, r0, r8, lsl #4
    75b4:	0055c89f 			; <UNDEFINED> instruction: 0x0055c89f
    75b8:	0055ce08 	subseq	ip, r5, r8, lsl #28
    75bc:	56000108 	strpl	r0, [r0], -r8, lsl #2
    75c0:	08005614 	stmdaeq	r0, {r2, r4, r9, sl, ip, lr}
    75c4:	0800561a 	stmdaeq	r0, {r1, r3, r4, r9, sl, ip, lr}
    75c8:	9f300002 	svcls	0x00300002
	...
    75d4:	08005442 	stmdaeq	r0, {r1, r6, sl, ip, lr}
    75d8:	0800548a 	stmdaeq	r0, {r1, r3, r7, sl, ip, lr}
    75dc:	40080006 	andmi	r0, r8, r6
    75e0:	9f1c0076 	svcls	0x001c0076
    75e4:	0800548a 	stmdaeq	r0, {r1, r3, r7, sl, ip, lr}
    75e8:	08005494 	stmdaeq	r0, {r2, r4, r7, sl, ip, lr}
    75ec:	76570001 	ldrbvc	r0, [r7], -r1
    75f0:	98080055 	stmdals	r8, {r0, r2, r4, r6}
    75f4:	01080055 	qaddeq	r0, r5, r8
    75f8:	55985700 	ldrpl	r5, [r8, #1792]	; 0x700
    75fc:	55a20800 	strpl	r0, [r2, #2048]!	; 0x800
    7600:	00060800 	andeq	r0, r6, r0, lsl #16
    7604:	00764008 	rsbseq	r4, r6, r8
    7608:	55c89f1c 	strbpl	r9, [r8, #3868]	; 0xf1c
    760c:	55ce0800 	strbpl	r0, [lr, #2048]	; 0x800
    7610:	00060800 	andeq	r0, r6, r0, lsl #16
    7614:	00764008 	rsbseq	r4, r6, r8
    7618:	56149f1c 	sadd16pl	r9, r4, ip
    761c:	56180800 	ldrpl	r0, [r8], -r0, lsl #16
    7620:	00060800 	andeq	r0, r6, r0, lsl #16
    7624:	00764008 	rsbseq	r4, r6, r8
    7628:	00009f1c 	andeq	r9, r0, ip, lsl pc
    762c:	00000000 	andeq	r0, r0, r0
    7630:	54a20000 	strtpl	r0, [r2], #0
    7634:	55760800 	ldrbpl	r0, [r6, #-2048]!	; 0x800
    7638:	00020800 	andeq	r0, r2, r0, lsl #16
    763c:	55ce9f38 	strbpl	r9, [lr, #3896]	; 0xf38
    7640:	56140800 	ldrpl	r0, [r4], -r0, lsl #16
    7644:	00020800 	andeq	r0, r2, r0, lsl #16
    7648:	561a9f38 	sasxpl	r9, sl, r8
    764c:	562c0800 	strtpl	r0, [ip], -r0, lsl #16
    7650:	00020800 	andeq	r0, r2, r0, lsl #16
    7654:	00009f38 	andeq	r9, r0, r8, lsr pc
    7658:	00000000 	andeq	r0, r0, r0
    765c:	54a20000 	strtpl	r0, [r2], #0
    7660:	55720800 	ldrbpl	r0, [r2, #-2048]!	; 0x800
    7664:	00010800 	andeq	r0, r1, r0, lsl #16
    7668:	0055725d 	subseq	r7, r5, sp, asr r2
    766c:	00557608 	subseq	r7, r5, r8, lsl #12
    7670:	91000308 	tstls	r0, r8, lsl #6
    7674:	55ce9f50 	strbpl	r9, [lr, #3920]	; 0xf50
    7678:	56140800 	ldrpl	r0, [r4], -r0, lsl #16
    767c:	00010800 	andeq	r0, r1, r0, lsl #16
    7680:	00561a5d 	subseq	r1, r6, sp, asr sl
    7684:	00562c08 	subseq	r2, r6, r8, lsl #24
    7688:	5d000108 	stfpls	f0, [r0, #-32]	; 0xffffffe0
	...
    7694:	080054a2 	stmdaeq	r0, {r1, r5, r7, sl, ip, lr}
    7698:	08005576 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, ip, lr}
    769c:	ce540001 	cdpgt	0, 5, cr0, cr4, cr1, {0}
    76a0:	14080055 	strne	r0, [r8], #-85	; 0x55
    76a4:	01080056 	qaddeq	r0, r6, r8
    76a8:	561a5400 	ldrpl	r5, [sl], -r0, lsl #8
    76ac:	562c0800 	strtpl	r0, [ip], -r0, lsl #16
    76b0:	00010800 	andeq	r0, r1, r0, lsl #16
    76b4:	00000054 	andeq	r0, r0, r4, asr r0
    76b8:	00000000 	andeq	r0, r0, r0
    76bc:	0054a200 	subseq	sl, r4, r0, lsl #4
    76c0:	0054ce08 	subseq	ip, r4, r8, lsl #28
    76c4:	38000208 	stmdacc	r0, {r3, r9}
    76c8:	0055ce9f 			; <UNDEFINED> instruction: 0x0055ce9f
    76cc:	0055ee08 	subseq	lr, r5, r8, lsl #28
    76d0:	38000208 	stmdacc	r0, {r3, r9}
    76d4:	0055ee9f 			; <UNDEFINED> instruction: 0x0055ee9f
    76d8:	0055f808 	subseq	pc, r5, r8, lsl #16
    76dc:	56000108 	strpl	r0, [r0], -r8, lsl #2
    76e0:	080055f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, ip, lr}
    76e4:	080055fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, ip, lr}
    76e8:	c0760004 	rsbsgt	r0, r6, r4
    76ec:	55fe9f00 	ldrbpl	r9, [lr, #3840]!	; 0xf00
    76f0:	560a0800 	strpl	r0, [sl], -r0, lsl #16
    76f4:	00010800 	andeq	r0, r1, r0, lsl #16
    76f8:	00561a56 	subseq	r1, r6, r6, asr sl
    76fc:	00562c08 	subseq	r2, r6, r8, lsl #24
    7700:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    770c:	080054a2 	stmdaeq	r0, {r1, r5, r7, sl, ip, lr}
    7710:	080054ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, ip, lr}
    7714:	ce5d0001 	cdpgt	0, 5, cr0, cr13, cr1, {0}
    7718:	ee080055 	mcr	0, 0, r0, cr8, cr5, {2}
    771c:	01080055 	qaddeq	r0, r5, r8
    7720:	55ee5d00 	strbpl	r5, [lr, #3328]!	; 0xd00
    7724:	55f40800 	ldrbpl	r0, [r4, #2048]!	; 0x800
    7728:	00010800 	andeq	r0, r1, r0, lsl #16
    772c:	0055f459 	subseq	pc, r5, r9, asr r4	; <UNPREDICTABLE>
    7730:	00561408 	subseq	r1, r6, r8, lsl #8
    7734:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    7738:	0800561a 	stmdaeq	r0, {r1, r3, r4, r9, sl, ip, lr}
    773c:	0800562c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip, lr}
    7740:	00590001 	subseq	r0, r9, r1
    7744:	00000000 	andeq	r0, r0, r0
    7748:	b0000000 	andlt	r0, r0, r0
    774c:	ce080054 	mcrgt	0, 0, r0, cr8, cr4, {2}
    7750:	01080054 	qaddeq	r0, r4, r8
    7754:	55ce5800 	strbpl	r5, [lr, #2048]	; 0x800
    7758:	55ee0800 	strbpl	r0, [lr, #2048]!	; 0x800
    775c:	00010800 	andeq	r0, r1, r0, lsl #16
    7760:	0055ee58 	subseq	lr, r5, r8, asr lr
    7764:	00561408 	subseq	r1, r6, r8, lsl #8
    7768:	30000208 	andcc	r0, r0, r8, lsl #4
    776c:	00561a9f 			; <UNDEFINED> instruction: 0x00561a9f
    7770:	00562c08 	subseq	r2, r6, r8, lsl #24
    7774:	30000208 	andcc	r0, r0, r8, lsl #4
    7778:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    777c:	00000000 	andeq	r0, r0, r0
    7780:	0054b000 	subseq	fp, r4, r0
    7784:	0054ce08 	subseq	ip, r4, r8, lsl #28
    7788:	08000608 	stmdaeq	r0, {r3, r9, sl}
    778c:	1c007840 	stcne	8, cr7, [r0], {64}	; 0x40
    7790:	0055ce9f 			; <UNDEFINED> instruction: 0x0055ce9f
    7794:	00561208 	subseq	r1, r6, r8, lsl #4
    7798:	08000608 	stmdaeq	r0, {r3, r9, sl}
    779c:	1c007840 	stcne	8, cr7, [r0], {64}	; 0x40
    77a0:	0056129f 			; <UNDEFINED> instruction: 0x0056129f
    77a4:	00561408 	subseq	r1, r6, r8, lsl #8
    77a8:	08000608 	stmdaeq	r0, {r3, r9, sl}
    77ac:	1c007648 	stcne	6, cr7, [r0], {72}	; 0x48
    77b0:	00561a9f 			; <UNDEFINED> instruction: 0x00561a9f
    77b4:	00562408 	subseq	r2, r6, r8, lsl #8
    77b8:	08000608 	stmdaeq	r0, {r3, r9, sl}
    77bc:	1c007840 	stcne	8, cr7, [r0], {64}	; 0x40
    77c0:	0056249f 			; <UNDEFINED> instruction: 0x0056249f
    77c4:	00562c08 	subseq	r2, r6, r8, lsl #24
    77c8:	38000508 	stmdacc	r0, {r3, r8, sl}
    77cc:	9f1c0076 	svcls	0x001c0076
	...
    77d8:	0800562c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip, lr}
    77dc:	0800563c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip, lr}
    77e0:	3c500001 	mrrccc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    77e4:	ba080056 	blt	207944 <__Stack_Size+0x207144>
    77e8:	0308005a 	movweq	r0, #32858	; 0x805a
    77ec:	7e9c9100 	cosvce	f1, f0
    77f0:	08005aba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, fp, ip, lr}
    77f4:	08005ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, lr}
    77f8:	9c7d0003 	ldclls	0, cr0, [sp], #-12
    77fc:	0000007e 	andeq	r0, r0, lr, ror r0
    7800:	00000000 	andeq	r0, r0, r0
    7804:	00562c00 	subseq	r2, r6, r0, lsl #24
    7808:	00563c08 	subseq	r3, r6, r8, lsl #24
    780c:	51000108 	tstpl	r0, r8, lsl #2
    7810:	0800563c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip, lr}
    7814:	08005700 	stmdaeq	r0, {r8, r9, sl, ip, lr}
    7818:	00540001 	subseq	r0, r4, r1
    781c:	00000000 	andeq	r0, r0, r0
    7820:	2c000000 	stccs	0, cr0, [r0], {-0}
    7824:	54080057 	strpl	r0, [r8], #-87	; 0x57
    7828:	06080057 			; <UNDEFINED> instruction: 0x06080057
    782c:	04935000 	ldreq	r5, [r3], #0
    7830:	54049351 	strpl	r9, [r4], #-849	; 0x351
    7834:	6a080057 	bvs	207998 <__Stack_Size+0x207198>
    7838:	02080057 	andeq	r0, r8, #87	; 0x57
    783c:	6a007100 	bvs	23c44 <__Stack_Size+0x23444>
    7840:	88080057 	stmdahi	r8, {r0, r1, r2, r4, r6}
    7844:	02080057 	andeq	r0, r8, #87	; 0x57
    7848:	88007500 	stmdahi	r0, {r8, sl, ip, sp, lr}
    784c:	ba080057 	blt	2079b0 <__Stack_Size+0x2071b0>
    7850:	06080057 			; <UNDEFINED> instruction: 0x06080057
    7854:	04935000 	ldreq	r5, [r3], #0
    7858:	ba049351 	blt	12c5a4 <__Stack_Size+0x12bda4>
    785c:	ea080057 	b	2079c0 <__Stack_Size+0x2071c0>
    7860:	06080059 			; <UNDEFINED> instruction: 0x06080059
    7864:	04935a00 	ldreq	r5, [r3], #2560	; 0xa00
    7868:	ea04935b 	b	12c5dc <__Stack_Size+0x12bddc>
    786c:	fc080059 	stc2	0, cr0, [r8], {89}	; 0x59
    7870:	06080059 			; <UNDEFINED> instruction: 0x06080059
    7874:	04935000 	ldreq	r5, [r3], #0
    7878:	00049351 	andeq	r9, r4, r1, asr r3
    787c:	00000000 	andeq	r0, r0, r0
    7880:	2c000000 	stccs	0, cr0, [r0], {-0}
    7884:	88080057 	stmdahi	r8, {r0, r1, r2, r4, r6}
    7888:	03080057 	movweq	r0, #32855	; 0x8057
    788c:	7d809100 	stfvcd	f1, [r0]
    7890:	08005788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip, lr}
    7894:	080057b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, ip, lr}
    7898:	935a0006 	cmpls	sl, #6
    789c:	04935b04 	ldreq	r5, [r3], #2820	; 0xb04
    78a0:	080057b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, ip, lr}
    78a4:	080059e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp, ip, lr}
    78a8:	80910003 	addshi	r0, r1, r3
    78ac:	0059e47d 	subseq	lr, r9, sp, ror r4
    78b0:	005a0408 	subseq	r0, sl, r8, lsl #8
    78b4:	5a000608 	bpl	90dc <__Stack_Size+0x88dc>
    78b8:	935b0493 	cmpls	fp, #-1828716544	; 0x93000000
    78bc:	00000004 	andeq	r0, r0, r4
    78c0:	00000000 	andeq	r0, r0, r0
    78c4:	00572c00 	subseq	r2, r7, r0, lsl #24
    78c8:	00578808 	subseq	r8, r7, r8, lsl #16
    78cc:	91000308 	tstls	r0, r8, lsl #6
    78d0:	57887d88 	strpl	r7, [r8, r8, lsl #27]
    78d4:	57b40800 	ldrpl	r0, [r4, r0, lsl #16]!
    78d8:	00030800 	andeq	r0, r3, r0, lsl #16
    78dc:	ba7d8091 	blt	1f67b28 <__Stack_Size+0x1f67328>
    78e0:	e4080057 	str	r0, [r8], #-87	; 0x57
    78e4:	03080059 	movweq	r0, #32857	; 0x8059
    78e8:	7d889100 	stfvcd	f1, [r8]
    78ec:	080059e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp, ip, lr}
    78f0:	08005aba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, fp, ip, lr}
    78f4:	80910003 	addshi	r0, r1, r3
    78f8:	005aba7d 	subseq	fp, sl, sp, ror sl
    78fc:	005ac008 	subseq	ip, sl, r8
    7900:	7d000308 	stcvc	3, cr0, [r0, #-32]	; 0xffffffe0
    7904:	00007d80 	andeq	r7, r0, r0, lsl #27
    7908:	00000000 	andeq	r0, r0, r0
    790c:	57380000 	ldrpl	r0, [r8, -r0]!
    7910:	574a0800 	strbpl	r0, [sl, -r0, lsl #16]
    7914:	00060800 	andeq	r0, r6, r0, lsl #16
    7918:	57049356 	smlsdpl	r4, r6, r3, r9
    791c:	574a0493 			; <UNDEFINED> instruction: 0x574a0493
    7920:	576a0800 	strbpl	r0, [sl, -r0, lsl #16]!
    7924:	00020800 	andeq	r0, r2, r0, lsl #16
    7928:	576a1871 			; <UNDEFINED> instruction: 0x576a1871
    792c:	57880800 	strpl	r0, [r8, r0, lsl #16]
    7930:	00020800 	andeq	r0, r2, r0, lsl #16
    7934:	57881875 			; <UNDEFINED> instruction: 0x57881875
    7938:	57a80800 	strpl	r0, [r8, r0, lsl #16]!
    793c:	00030800 	andeq	r0, r3, r0, lsl #16
    7940:	ba7d8891 	blt	1f69b8c <__Stack_Size+0x1f6938c>
    7944:	e4080057 	str	r0, [r8], #-87	; 0x57
    7948:	03080059 	movweq	r0, #32857	; 0x8059
    794c:	7df89100 	ldfvcp	f1, [r8]
    7950:	080059e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp, ip, lr}
    7954:	08005aba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, fp, ip, lr}
    7958:	88910003 	ldmhi	r1, {r0, r1}
    795c:	005aba7d 	subseq	fp, sl, sp, ror sl
    7960:	005ac008 	subseq	ip, sl, r8
    7964:	7d000308 	stcvc	3, cr0, [r0, #-32]	; 0xffffffe0
    7968:	00007d88 	andeq	r7, r0, r8, lsl #27
    796c:	00000000 	andeq	r0, r0, r0
    7970:	57700000 	ldrbpl	r0, [r0, -r0]!
    7974:	57760800 	ldrbpl	r0, [r6, -r0, lsl #16]!
    7978:	00060800 	andeq	r0, r6, r0, lsl #16
    797c:	5b04935a 	blpl	12c6ec <__Stack_Size+0x12beec>
    7980:	57760493 			; <UNDEFINED> instruction: 0x57760493
    7984:	57880800 	strpl	r0, [r8, r0, lsl #16]
    7988:	00020800 	andeq	r0, r2, r0, lsl #16
    798c:	57882075 			; <UNDEFINED> instruction: 0x57882075
    7990:	57b00800 	ldrpl	r0, [r0, r0, lsl #16]!
    7994:	00060800 	andeq	r0, r6, r0, lsl #16
    7998:	53049352 	movwpl	r9, #17234	; 0x4352
    799c:	57ba0493 			; <UNDEFINED> instruction: 0x57ba0493
    79a0:	59e40800 	stmibpl	r4!, {fp}^
    79a4:	00060800 	andeq	r0, r6, r0, lsl #16
    79a8:	59049358 	stmdbpl	r4, {r3, r4, r6, r8, r9, ip, pc}
    79ac:	59e40493 	stmibpl	r4!, {r0, r1, r4, r7, sl}^
    79b0:	59f80800 	ldmibpl	r8!, {fp}^
    79b4:	00060800 	andeq	r0, r6, r0, lsl #16
    79b8:	53049352 	movwpl	r9, #17234	; 0x4352
    79bc:	00000493 	muleq	r0, r3, r4
    79c0:	00000000 	andeq	r0, r0, r0
    79c4:	57700000 	ldrbpl	r0, [r0, -r0]!
    79c8:	57880800 	strpl	r0, [r8, r0, lsl #16]
    79cc:	00020800 	andeq	r0, r2, r0, lsl #16
    79d0:	57882875 			; <UNDEFINED> instruction: 0x57882875
    79d4:	57ae0800 	strpl	r0, [lr, r0, lsl #16]!
    79d8:	00060800 	andeq	r0, r6, r0, lsl #16
    79dc:	59049358 	stmdbpl	r4, {r3, r4, r6, r8, r9, ip, pc}
    79e0:	57ae0493 			; <UNDEFINED> instruction: 0x57ae0493
    79e4:	59da0800 	ldmibpl	sl, {fp}^
    79e8:	00030800 	andeq	r0, r3, r0, lsl #16
    79ec:	da7da091 	ble	1f6fc38 <__Stack_Size+0x1f6f438>
    79f0:	00080059 	andeq	r0, r8, r9, asr r0
    79f4:	0608005a 			; <UNDEFINED> instruction: 0x0608005a
    79f8:	04935800 	ldreq	r5, [r3], #2048	; 0x800
    79fc:	00049359 	andeq	r9, r4, r9, asr r3
    7a00:	00000000 	andeq	r0, r0, r0
    7a04:	70000000 	andvc	r0, r0, r0
    7a08:	88080057 	stmdahi	r8, {r0, r1, r2, r4, r6}
    7a0c:	02080057 	andeq	r0, r8, #87	; 0x57
    7a10:	88307500 	ldmdahi	r0!, {r8, sl, ip, sp, lr}
    7a14:	ac080057 	stcge	0, cr0, [r8], {87}	; 0x57
    7a18:	03080057 	movweq	r0, #32855	; 0x8057
    7a1c:	7da09100 	stfvcd	f1, [r0]
    7a20:	080057ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl, ip, lr}
    7a24:	080059da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp, ip, lr}
    7a28:	98910003 	ldmls	r1, {r0, r1}
    7a2c:	0059da7d 	subseq	sp, r9, sp, ror sl
    7a30:	005aba08 	subseq	fp, sl, r8, lsl #20
    7a34:	91000308 	tstls	r0, r8, lsl #6
    7a38:	5aba7da0 	bpl	feea70c0 <BootRAM+0xde17861>
    7a3c:	5ac00800 	bpl	ff009a44 <BootRAM+0xdf7a1e5>
    7a40:	00030800 	andeq	r0, r3, r0, lsl #16
    7a44:	007da07d 	rsbseq	sl, sp, sp, ror r0
    7a48:	00000000 	andeq	r0, r0, r0
    7a4c:	70000000 	andvc	r0, r0, r0
    7a50:	88080057 	stmdahi	r8, {r0, r1, r2, r4, r6}
    7a54:	06080057 			; <UNDEFINED> instruction: 0x06080057
    7a58:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    7a5c:	88049355 	stmdahi	r4, {r0, r2, r4, r6, r8, r9, ip, pc}
    7a60:	a4080057 	strge	r0, [r8], #-87	; 0x57
    7a64:	03080057 	movweq	r0, #32855	; 0x8057
    7a68:	7d989100 	ldfvcd	f1, [r8]
    7a6c:	080057ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl, ip, lr}
    7a70:	080059da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp, ip, lr}
    7a74:	80910003 	addshi	r0, r1, r3
    7a78:	0059da7e 	subseq	sp, r9, lr, ror sl
    7a7c:	005aba08 	subseq	fp, sl, r8, lsl #20
    7a80:	91000308 	tstls	r0, r8, lsl #6
    7a84:	5aba7d98 	bpl	feea70ec <BootRAM+0xde1788d>
    7a88:	5ac00800 	bpl	ff009a90 <BootRAM+0xdf7a231>
    7a8c:	00030800 	andeq	r0, r3, r0, lsl #16
    7a90:	007d987d 	rsbseq	r9, sp, sp, ror r8
    7a94:	00000000 	andeq	r0, r0, r0
    7a98:	2c000000 	stccs	0, cr0, [r0], {-0}
    7a9c:	3c080056 	stccc	0, cr0, [r8], {86}	; 0x56
    7aa0:	02080056 	andeq	r0, r8, #86	; 0x56
    7aa4:	709f3000 	addsvc	r3, pc, r0
    7aa8:	88080057 	stmdahi	r8, {r0, r1, r2, r4, r6}
    7aac:	02080057 	andeq	r0, r8, #87	; 0x57
    7ab0:	889f3000 	ldmhi	pc, {ip, sp}	; <UNPREDICTABLE>
    7ab4:	dc080057 	stcle	0, cr0, [r8], {87}	; 0x57
    7ab8:	01080057 	qaddeq	r0, r7, r8
    7abc:	57dc5c00 	ldrbpl	r5, [ip, r0, lsl #24]
    7ac0:	59ea0800 	stmibpl	sl!, {fp}^
    7ac4:	00030800 	andeq	r0, r3, r0, lsl #16
    7ac8:	ea9f7f7c 	b	fe7e78c0 <BootRAM+0xd758061>
    7acc:	74080059 	strvc	r0, [r8], #-89	; 0x59
    7ad0:	0108005a 	qaddeq	r0, sl, r8
    7ad4:	00005c00 	andeq	r5, r0, r0, lsl #24
    7ad8:	00000000 	andeq	r0, r0, r0
    7adc:	563c0000 	ldrtpl	r0, [ip], -r0
    7ae0:	564a0800 	strbpl	r0, [sl], -r0, lsl #16
    7ae4:	00030800 	andeq	r0, r3, r0, lsl #16
    7ae8:	4a9f0174 	bmi	fe7c80c0 <BootRAM+0xd738861>
    7aec:	5a080056 	bpl	207c4c <__Stack_Size+0x20744c>
    7af0:	03080056 	movweq	r0, #32854	; 0x8056
    7af4:	9f027400 	svcls	0x00027400
    7af8:	0800565a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, ip, lr}
    7afc:	08005678 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl, ip, lr}
    7b00:	03740003 	cmneq	r4, #3
    7b04:	0056789f 			; <UNDEFINED> instruction: 0x0056789f
    7b08:	00569608 	subseq	r9, r6, r8, lsl #12
    7b0c:	74000308 	strvc	r0, [r0], #-776	; 0x308
    7b10:	56969f04 	ldrpl	r9, [r6], r4, lsl #30
    7b14:	56b00800 	ldrtpl	r0, [r0], r0, lsl #16
    7b18:	00030800 	andeq	r0, r3, r0, lsl #16
    7b1c:	b09f0574 	addslt	r0, pc, r4, ror r5	; <UNPREDICTABLE>
    7b20:	c8080056 	stmdagt	r8, {r1, r2, r4, r6}
    7b24:	03080056 	movweq	r0, #32854	; 0x8056
    7b28:	9f067400 	svcls	0x00067400
    7b2c:	080056c8 	stmdaeq	r0, {r3, r6, r7, r9, sl, ip, lr}
    7b30:	080056dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, ip, lr}
    7b34:	07740003 	ldrbeq	r0, [r4, -r3]!
    7b38:	0056dc9f 			; <UNDEFINED> instruction: 0x0056dc9f
    7b3c:	0056e208 	subseq	lr, r6, r8, lsl #4
    7b40:	74000308 	strvc	r0, [r0], #-776	; 0x308
    7b44:	56e29f08 	strbtpl	r9, [r2], r8, lsl #30
    7b48:	57000800 	strpl	r0, [r0, -r0, lsl #16]
    7b4c:	00010800 	andeq	r0, r1, r0, lsl #16
    7b50:	00000054 	andeq	r0, r0, r4, asr r0
    7b54:	00000000 	andeq	r0, r0, r0
    7b58:	00563c00 	subseq	r3, r6, r0, lsl #24
    7b5c:	00564a08 	subseq	r4, r6, r8, lsl #20
    7b60:	74000908 	strvc	r0, [r0], #-2312	; 0x908
    7b64:	f7019400 			; <UNDEFINED> instruction: 0xf7019400
    7b68:	9f25f72c 	svcls	0x0025f72c
    7b6c:	0800564a 	stmdaeq	r0, {r1, r3, r6, r9, sl, ip, lr}
    7b70:	0800565a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, ip, lr}
    7b74:	01740010 	cmneq	r4, r0, lsl r0
    7b78:	2cf70194 	ldfcse	f0, [r7], #592	; 0x250
    7b7c:	909125f7 			; <UNDEFINED> instruction: 0x909125f7
    7b80:	2508f67d 	strcs	pc, [r8, #-1661]	; 0x67d
    7b84:	565a9f21 	ldrbpl	r9, [sl], -r1, lsr #30
    7b88:	56780800 	ldrbtpl	r0, [r8], -r0, lsl #16
    7b8c:	000d0800 	andeq	r0, sp, r0, lsl #16
    7b90:	01940274 	orrseq	r0, r4, r4, ror r2
    7b94:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    7b98:	212506f5 	strdcs	r0, [r5, -r5]!
    7b9c:	0056789f 			; <UNDEFINED> instruction: 0x0056789f
    7ba0:	00569608 	subseq	r9, r6, r8, lsl #12
    7ba4:	74001008 	strvc	r1, [r0], #-8
    7ba8:	f7019403 			; <UNDEFINED> instruction: 0xf7019403
    7bac:	9125f72c 	msrls	SP_abt, ip
    7bb0:	08f67d80 	ldmeq	r6!, {r7, r8, sl, fp, ip, sp, lr}^
    7bb4:	969f2125 	ldrls	r2, [pc], r5, lsr #2
    7bb8:	b0080056 	andlt	r0, r8, r6, asr r0
    7bbc:	10080056 	andne	r0, r8, r6, asr r0
    7bc0:	94047400 	strls	r7, [r4], #-1024	; 0x400
    7bc4:	f72cf701 			; <UNDEFINED> instruction: 0xf72cf701
    7bc8:	7d889125 	stfvcd	f1, [r8, #148]	; 0x94
    7bcc:	212508f6 	strdcs	r0, [r5, -r6]!
    7bd0:	0056b09f 			; <UNDEFINED> instruction: 0x0056b09f
    7bd4:	0056c808 	subseq	ip, r6, r8, lsl #16
    7bd8:	74000d08 	strvc	r0, [r0], #-3336	; 0xd08
    7bdc:	f7019405 			; <UNDEFINED> instruction: 0xf7019405
    7be0:	f525f72c 			; <UNDEFINED> instruction: 0xf525f72c
    7be4:	9f21250a 	svcls	0x0021250a
    7be8:	080056c8 	stmdaeq	r0, {r3, r6, r7, r9, sl, ip, lr}
    7bec:	080056dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, ip, lr}
    7bf0:	0674000d 	ldrbteq	r0, [r4], -sp
    7bf4:	2cf70194 	ldfcse	f0, [r7], #592	; 0x250
    7bf8:	08f525f7 	ldmeq	r5!, {r0, r1, r2, r4, r5, r6, r7, r8, sl, sp}^
    7bfc:	dc9f2125 	ldfles	f2, [pc], {37}	; 0x25
    7c00:	e2080056 	and	r0, r8, #86	; 0x56
    7c04:	0d080056 	stceq	0, cr0, [r8, #-344]	; 0xfffffea8
    7c08:	94077400 	strls	r7, [r7], #-1024	; 0x400
    7c0c:	f72cf701 			; <UNDEFINED> instruction: 0xf72cf701
    7c10:	2502f525 	strcs	pc, [r2, #-1317]	; 0x525
    7c14:	56e29f21 	strbtpl	r9, [r2], r1, lsr #30
    7c18:	56f60800 	ldrbtpl	r0, [r6], r0, lsl #16
    7c1c:	000d0800 	andeq	r0, sp, r0, lsl #16
    7c20:	01947f74 	orrseq	r7, r4, r4, ror pc
    7c24:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    7c28:	212502f5 	strdcs	r0, [r5, -r5]!
    7c2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7c30:	00000000 	andeq	r0, r0, r0
    7c34:	00584600 	subseq	r4, r8, r0, lsl #12
    7c38:	0059a008 	subseq	sl, r9, r8
    7c3c:	75000308 	strvc	r0, [r0, #-776]	; 0x308
    7c40:	00007f80 	andeq	r7, r0, r0, lsl #31
    7c44:	00000000 	andeq	r0, r0, r0
    7c48:	58460000 	stmdapl	r6, {}^	; <UNPREDICTABLE>
    7c4c:	58580800 	ldmdapl	r8, {fp}^
    7c50:	00060800 	andeq	r0, r6, r0, lsl #16
    7c54:	51049350 	tstpl	r4, r0, asr r3
    7c58:	58580493 	ldmdapl	r8, {r0, r1, r4, r7, sl}^
    7c5c:	58b20800 	ldmpl	r2!, {fp}
    7c60:	000c0800 	andeq	r0, ip, r0, lsl #16
    7c64:	067d9091 			; <UNDEFINED> instruction: 0x067d9091
    7c68:	00912433 	addseq	r2, r1, r3, lsr r4
    7c6c:	1ca00822 	stcne	8, cr0, [r0], #136	; 0x88
    7c70:	080058b2 	stmdaeq	r0, {r1, r4, r5, r7, fp, ip, lr}
    7c74:	080058fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, fp, ip, lr}
    7c78:	9091000c 	addsls	r0, r1, ip
    7c7c:	2433067d 	ldrtcs	r0, [r3], #-1661	; 0x67d
    7c80:	08220077 	stmdaeq	r2!, {r0, r1, r2, r4, r5, r6}
    7c84:	58fa1c80 	ldmpl	sl!, {r7, sl, fp, ip}^
    7c88:	59a00800 	stmibpl	r0!, {fp}
    7c8c:	000c0800 	andeq	r0, ip, r0, lsl #16
    7c90:	067d9091 			; <UNDEFINED> instruction: 0x067d9091
    7c94:	00912433 	addseq	r2, r1, r3, lsr r4
    7c98:	1ca00822 	stcne	8, cr0, [r0], #136	; 0x88
	...
    7ca4:	08005846 	stmdaeq	r0, {r1, r2, r6, fp, ip, lr}
    7ca8:	080058f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, fp, ip, lr}
    7cac:	93520006 	cmpls	r2, #6
    7cb0:	04935304 	ldreq	r5, [r3], #772	; 0x304
    7cb4:	080058f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, fp, ip, lr}
    7cb8:	080058fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, fp, ip, lr}
    7cbc:	0d7c000c 	ldcleq	0, cr0, [ip, #-48]!	; 0xffffffd0
    7cc0:	24331a3f 	ldrtcs	r1, [r3], #-2623	; 0xa3f
    7cc4:	08220077 	stmdaeq	r2!, {r0, r1, r2, r4, r5, r6}
    7cc8:	58fa1c80 	ldmpl	sl!, {r7, sl, fp, ip}^
    7ccc:	59a00800 	stmibpl	r0!, {fp}
    7cd0:	000c0800 	andeq	r0, ip, r0, lsl #16
    7cd4:	1a3f0d7c 	bne	fcb2cc <__Stack_Size+0xfcaacc>
    7cd8:	00912433 	addseq	r2, r1, r3, lsr r4
    7cdc:	1ca00822 	stcne	8, cr0, [r0], #136	; 0x88
	...
    7ce8:	08005846 	stmdaeq	r0, {r1, r2, r6, fp, ip, lr}
    7cec:	080058b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, fp, ip, lr}
    7cf0:	087c000c 	ldmdaeq	ip!, {r2, r3}^
    7cf4:	24331a3f 	ldrtcs	r1, [r3], #-2623	; 0xa3f
    7cf8:	08220091 	stmdaeq	r2!, {r0, r4, r7}
    7cfc:	58b61ca8 	ldmpl	r6!, {r3, r5, r7, sl, fp, ip}
    7d00:	58ba0800 	ldmpl	sl!, {fp}
    7d04:	000a0800 	andeq	r0, sl, r0, lsl #16
    7d08:	24330074 	ldrtcs	r0, [r3], #-116	; 0x74
    7d0c:	08220091 	stmdaeq	r2!, {r0, r4, r7}
    7d10:	58ba1ca8 	ldmpl	sl!, {r3, r5, r7, sl, fp, ip}
    7d14:	59a00800 	stmibpl	r0!, {fp}
    7d18:	000c0800 	andeq	r0, ip, r0, lsl #16
    7d1c:	1a3f087c 	bne	fc9f14 <__Stack_Size+0xfc9714>
    7d20:	00912433 	addseq	r2, r1, r3, lsr r4
    7d24:	1ca80822 	stcne	8, cr0, [r8], #136	; 0x88
	...
    7d30:	08005846 	stmdaeq	r0, {r1, r2, r6, fp, ip, lr}
    7d34:	08005858 	stmdaeq	r0, {r3, r4, r6, fp, ip, lr}
    7d38:	00f50028 	rscseq	r0, r5, r8, lsr #32
    7d3c:	25f73125 	ldrbcs	r3, [r7, #293]!	; 0x125
    7d40:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7d44:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7d48:	2500f521 	strcs	pc, [r0, #-1313]	; 0x521
    7d4c:	2525f737 	strcs	pc, [r5, #-1847]!	; 0x737
    7d50:	2500f527 	strcs	pc, [r0, #-1319]	; 0x527
    7d54:	1425f738 	strtne	pc, [r5], #-1848	; 0x738
    7d58:	40231f14 	eormi	r1, r3, r4, lsl pc
    7d5c:	21251724 	teqcs	r5, r4, lsr #14
    7d60:	58589f27 	ldmdapl	r8, {r0, r1, r2, r5, r8, r9, sl, fp, ip, pc}^
    7d64:	58b20800 	ldmpl	r2!, {fp}
    7d68:	004c0800 	subeq	r0, ip, r0, lsl #16
    7d6c:	067d9091 			; <UNDEFINED> instruction: 0x067d9091
    7d70:	00912433 	addseq	r2, r1, r3, lsr r4
    7d74:	1ca00822 	stcne	8, cr0, [r0], #136	; 0x88
    7d78:	312508f6 	strdcc	r0, [r5, -r6]!
    7d7c:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7d80:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7d84:	91212517 	teqls	r1, r7, lsl r5
    7d88:	33067d90 	movwcc	r7, #28048	; 0x6d90
    7d8c:	22009124 	andcs	r9, r0, #36, 2
    7d90:	f61ca008 			; <UNDEFINED> instruction: 0xf61ca008
    7d94:	f7372508 			; <UNDEFINED> instruction: 0xf7372508
    7d98:	91272525 	teqls	r7, r5, lsr #10
    7d9c:	33067d90 	movwcc	r7, #28048	; 0x6d90
    7da0:	22009124 	andcs	r9, r0, #36, 2
    7da4:	f61ca008 			; <UNDEFINED> instruction: 0xf61ca008
    7da8:	f7382508 			; <UNDEFINED> instruction: 0xf7382508
    7dac:	1f141425 	svcne	0x00141425
    7db0:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7db4:	9f272125 	svcls	0x00272125
    7db8:	080058b2 	stmdaeq	r0, {r1, r4, r5, r7, fp, ip, lr}
    7dbc:	080058fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, fp, ip, lr}
    7dc0:	9091004c 	addsls	r0, r1, ip, asr #32
    7dc4:	2433067d 	ldrtcs	r0, [r3], #-1661	; 0x67d
    7dc8:	08220077 	stmdaeq	r2!, {r0, r1, r2, r4, r5, r6}
    7dcc:	08f61c80 	ldmeq	r6!, {r7, sl, fp, ip}^
    7dd0:	25f73125 	ldrbcs	r3, [r7, #293]!	; 0x125
    7dd4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7dd8:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7ddc:	7d909121 	ldfvcd	f1, [r0, #132]	; 0x84
    7de0:	77243306 	strvc	r3, [r4, -r6, lsl #6]!
    7de4:	80082200 	andhi	r2, r8, r0, lsl #4
    7de8:	2508f61c 	strcs	pc, [r8, #-1564]	; 0x61c
    7dec:	2525f737 	strcs	pc, [r5, #-1847]!	; 0x737
    7df0:	7d909127 	ldfvcd	f1, [r0, #156]	; 0x9c
    7df4:	77243306 	strvc	r3, [r4, -r6, lsl #6]!
    7df8:	80082200 	andhi	r2, r8, r0, lsl #4
    7dfc:	2508f61c 	strcs	pc, [r8, #-1564]	; 0x61c
    7e00:	1425f738 	strtne	pc, [r5], #-1848	; 0x738
    7e04:	40231f14 	eormi	r1, r3, r4, lsl pc
    7e08:	21251724 	teqcs	r5, r4, lsr #14
    7e0c:	58fa9f27 	ldmpl	sl!, {r0, r1, r2, r5, r8, r9, sl, fp, ip, pc}^
    7e10:	59a00800 	stmibpl	r0!, {fp}
    7e14:	004c0800 	subeq	r0, ip, r0, lsl #16
    7e18:	067d9091 			; <UNDEFINED> instruction: 0x067d9091
    7e1c:	00912433 	addseq	r2, r1, r3, lsr r4
    7e20:	1ca00822 	stcne	8, cr0, [r0], #136	; 0x88
    7e24:	312508f6 	strdcc	r0, [r5, -r6]!
    7e28:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7e2c:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7e30:	91212517 	teqls	r1, r7, lsl r5
    7e34:	33067d90 	movwcc	r7, #28048	; 0x6d90
    7e38:	22009124 	andcs	r9, r0, #36, 2
    7e3c:	f61ca008 			; <UNDEFINED> instruction: 0xf61ca008
    7e40:	f7372508 			; <UNDEFINED> instruction: 0xf7372508
    7e44:	91272525 	teqls	r7, r5, lsr #10
    7e48:	33067d90 	movwcc	r7, #28048	; 0x6d90
    7e4c:	22009124 	andcs	r9, r0, #36, 2
    7e50:	f61ca008 			; <UNDEFINED> instruction: 0xf61ca008
    7e54:	f7382508 			; <UNDEFINED> instruction: 0xf7382508
    7e58:	1f141425 	svcne	0x00141425
    7e5c:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7e60:	9f272125 	svcls	0x00272125
	...
    7e6c:	08005846 	stmdaeq	r0, {r1, r2, r6, fp, ip, lr}
    7e70:	080058f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, fp, ip, lr}
    7e74:	02f50029 	rscseq	r0, r5, #41	; 0x29
    7e78:	25f74325 	ldrbcs	r4, [r7, #805]!	; 0x325
    7e7c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7e80:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7e84:	2502f521 	strcs	pc, [r2, #-1313]	; 0x521
    7e88:	2525f736 	strcs	pc, [r5, #-1846]!	; 0x736
    7e8c:	2502f527 	strcs	pc, [r2, #-1319]	; 0x527
    7e90:	25f73d08 	ldrbcs	r3, [r7, #3336]!	; 0xd08
    7e94:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7e98:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7e9c:	f69f2721 			; <UNDEFINED> instruction: 0xf69f2721
    7ea0:	fa080058 	blx	208008 <__Stack_Size+0x207808>
    7ea4:	4d080058 	stcmi	0, cr0, [r8, #-352]	; 0xfffffea0
    7ea8:	3f0d7c00 	svccc	0x000d7c00
    7eac:	7724331a 			; <UNDEFINED> instruction: 0x7724331a
    7eb0:	80082200 	andhi	r2, r8, r0, lsl #4
    7eb4:	2508f61c 	strcs	pc, [r8, #-1564]	; 0x61c
    7eb8:	1425f743 	strtne	pc, [r5], #-1859	; 0x743
    7ebc:	40231f14 	eormi	r1, r3, r4, lsl pc
    7ec0:	21251724 	teqcs	r5, r4, lsr #14
    7ec4:	1a3f0d7c 	bne	fcb4bc <__Stack_Size+0xfcacbc>
    7ec8:	00772433 	rsbseq	r2, r7, r3, lsr r4
    7ecc:	1c800822 	stcne	8, cr0, [r0], {34}	; 0x22
    7ed0:	362508f6 			; <UNDEFINED> instruction: 0x362508f6
    7ed4:	272525f7 			; <UNDEFINED> instruction: 0x272525f7
    7ed8:	1a3f0d7c 	bne	fcb4d0 <__Stack_Size+0xfcacd0>
    7edc:	00772433 	rsbseq	r2, r7, r3, lsr r4
    7ee0:	1c800822 	stcne	8, cr0, [r0], {34}	; 0x22
    7ee4:	082508f6 	stmdaeq	r5!, {r1, r2, r4, r5, r6, r7, fp}
    7ee8:	1425f73d 	strtne	pc, [r5], #-1853	; 0x73d
    7eec:	40231f14 	eormi	r1, r3, r4, lsl pc
    7ef0:	21251724 	teqcs	r5, r4, lsr #14
    7ef4:	58fa9f27 	ldmpl	sl!, {r0, r1, r2, r5, r8, r9, sl, fp, ip, pc}^
    7ef8:	59a00800 	stmibpl	r0!, {fp}
    7efc:	004d0800 	subeq	r0, sp, r0, lsl #16
    7f00:	1a3f0d7c 	bne	fcb4f8 <__Stack_Size+0xfcacf8>
    7f04:	00912433 	addseq	r2, r1, r3, lsr r4
    7f08:	1ca00822 	stcne	8, cr0, [r0], #136	; 0x88
    7f0c:	432508f6 	teqmi	r5, #16121856	; 0xf60000
    7f10:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7f14:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7f18:	7c212517 	cfstr32vc	mvfx2, [r1], #-92	; 0xffffffa4
    7f1c:	331a3f0d 	tstcc	sl, #13, 30	; 0x34
    7f20:	22009124 	andcs	r9, r0, #36, 2
    7f24:	f61ca008 			; <UNDEFINED> instruction: 0xf61ca008
    7f28:	f7362508 			; <UNDEFINED> instruction: 0xf7362508
    7f2c:	7c272525 	cfstr32vc	mvfx2, [r7], #-148	; 0xffffff6c
    7f30:	331a3f0d 	tstcc	sl, #13, 30	; 0x34
    7f34:	22009124 	andcs	r9, r0, #36, 2
    7f38:	f61ca008 			; <UNDEFINED> instruction: 0xf61ca008
    7f3c:	3d082508 	cfstr32cc	mvfx2, [r8, #-32]	; 0xffffffe0
    7f40:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7f44:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7f48:	27212517 			; <UNDEFINED> instruction: 0x27212517
    7f4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7f50:	00000000 	andeq	r0, r0, r0
    7f54:	00578800 	subseq	r8, r7, r0, lsl #16
    7f58:	0057b808 	subseq	fp, r7, r8, lsl #16
    7f5c:	f5003208 			; <UNDEFINED> instruction: 0xf5003208
    7f60:	2208250a 	andcs	r2, r8, #41943040	; 0x2800000
    7f64:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7f68:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7f6c:	f5212517 			; <UNDEFINED> instruction: 0xf5212517
    7f70:	f74c250a 			; <UNDEFINED> instruction: 0xf74c250a
    7f74:	1f141425 	svcne	0x00141425
    7f78:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7f7c:	f5272125 			; <UNDEFINED> instruction: 0xf5272125
    7f80:	2708250a 	strcs	r2, [r8, -sl, lsl #10]
    7f84:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7f88:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7f8c:	27212517 			; <UNDEFINED> instruction: 0x27212517
    7f90:	0057b89f 			; <UNDEFINED> instruction: 0x0057b89f
    7f94:	0057ba08 	subseq	fp, r7, r8, lsl #20
    7f98:	91003b08 	tstls	r0, r8, lsl #22
    7f9c:	08f67d80 	ldmeq	r6!, {r7, r8, sl, fp, ip, sp, lr}^
    7fa0:	f7220825 			; <UNDEFINED> instruction: 0xf7220825
    7fa4:	1f141425 	svcne	0x00141425
    7fa8:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7fac:	80912125 	addshi	r2, r1, r5, lsr #2
    7fb0:	2508f67d 	strcs	pc, [r8, #-1661]	; 0x67d
    7fb4:	1425f74c 	strtne	pc, [r5], #-1868	; 0x74c
    7fb8:	40231f14 	eormi	r1, r3, r4, lsl pc
    7fbc:	21251724 	teqcs	r5, r4, lsr #14
    7fc0:	7d809127 	stfvcd	f1, [r0, #156]	; 0x9c
    7fc4:	082508f6 	stmdaeq	r5!, {r1, r2, r4, r5, r6, r7, fp}
    7fc8:	1425f727 	strtne	pc, [r5], #-1831	; 0x727
    7fcc:	40231f14 	eormi	r1, r3, r4, lsl pc
    7fd0:	21251724 	teqcs	r5, r4, lsr #14
    7fd4:	58469f27 	stmdapl	r6, {r0, r1, r2, r5, r8, r9, sl, fp, ip, pc}^
    7fd8:	5a040800 	bpl	109fe0 <__Stack_Size+0x1097e0>
    7fdc:	00320800 	eorseq	r0, r2, r0, lsl #16
    7fe0:	08250af5 	stmdaeq	r5!, {r0, r2, r4, r5, r6, r7, r9, fp}
    7fe4:	1425f722 	strtne	pc, [r5], #-1826	; 0x722
    7fe8:	40231f14 	eormi	r1, r3, r4, lsl pc
    7fec:	21251724 	teqcs	r5, r4, lsr #14
    7ff0:	4c250af5 	stcmi	10, cr0, [r5], #-980	; 0xfffffc2c
    7ff4:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7ff8:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7ffc:	27212517 			; <UNDEFINED> instruction: 0x27212517
    8000:	08250af5 	stmdaeq	r5!, {r0, r2, r4, r5, r6, r7, r9, fp}
    8004:	1425f727 	strtne	pc, [r5], #-1831	; 0x727
    8008:	40231f14 	eormi	r1, r3, r4, lsl pc
    800c:	21251724 	teqcs	r5, r4, lsr #14
    8010:	00009f27 	andeq	r9, r0, r7, lsr #30
    8014:	00000000 	andeq	r0, r0, r0
    8018:	57880000 	strpl	r0, [r8, r0]
    801c:	57ae0800 	strpl	r0, [lr, r0, lsl #16]!
    8020:	00310800 	eorseq	r0, r1, r0, lsl #16
    8024:	422508f5 	eormi	r0, r5, #16056320	; 0xf50000
    8028:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    802c:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    8030:	f5212517 			; <UNDEFINED> instruction: 0xf5212517
    8034:	f73e2508 			; <UNDEFINED> instruction: 0xf73e2508
    8038:	1f141425 	svcne	0x00141425
    803c:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    8040:	f5272125 			; <UNDEFINED> instruction: 0xf5272125
    8044:	29082508 	stmdbcs	r8, {r3, r8, sl, sp}
    8048:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    804c:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    8050:	27212517 			; <UNDEFINED> instruction: 0x27212517
    8054:	0057ae9f 			; <UNDEFINED> instruction: 0x0057ae9f
    8058:	0057ba08 	subseq	fp, r7, r8, lsl #20
    805c:	91003a08 	tstls	r0, r8, lsl #20
    8060:	08f67da0 	ldmeq	r6!, {r5, r7, r8, sl, fp, ip, sp, lr}^
    8064:	25f74225 	ldrbcs	r4, [r7, #549]!	; 0x225
    8068:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    806c:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    8070:	7da09121 	stfvcd	f1, [r0, #132]!	; 0x84
    8074:	3e2508f6 	mcrcc	8, 1, r0, cr5, cr6, {7}
    8078:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    807c:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    8080:	27212517 			; <UNDEFINED> instruction: 0x27212517
    8084:	f67da091 			; <UNDEFINED> instruction: 0xf67da091
    8088:	29082508 	stmdbcs	r8, {r3, r8, sl, sp}
    808c:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    8090:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    8094:	27212517 			; <UNDEFINED> instruction: 0x27212517
    8098:	0058469f 			; <UNDEFINED> instruction: 0x0058469f
    809c:	005a0008 	subseq	r0, sl, r8
    80a0:	f5003108 			; <UNDEFINED> instruction: 0xf5003108
    80a4:	f7422508 			; <UNDEFINED> instruction: 0xf7422508
    80a8:	1f141425 	svcne	0x00141425
    80ac:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    80b0:	08f52125 	ldmeq	r5!, {r0, r2, r5, r8, sp}^
    80b4:	25f73e25 	ldrbcs	r3, [r7, #3621]!	; 0xe25
    80b8:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    80bc:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    80c0:	08f52721 	ldmeq	r5!, {r0, r5, r8, r9, sl, sp}^
    80c4:	f7290825 			; <UNDEFINED> instruction: 0xf7290825
    80c8:	1f141425 	svcne	0x00141425
    80cc:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    80d0:	9f272125 	svcls	0x00272125
	...
    80dc:	08005788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip, lr}
    80e0:	080057a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, ip, lr}
    80e4:	08f50017 	ldmeq	r5!, {r0, r1, r2, r4}^
    80e8:	98912025 	ldmls	r1, {r0, r2, r5, sp}
    80ec:	2508f67d 	strcs	pc, [r8, #-1661]	; 0x67d
    80f0:	7da0911a 	stfvcd	f1, [r0, #104]!	; 0x68
    80f4:	f52508f6 			; <UNDEFINED> instruction: 0xf52508f6
    80f8:	271a2508 	ldrcs	r2, [sl, -r8, lsl #10]
    80fc:	0058469f 			; <UNDEFINED> instruction: 0x0058469f
    8100:	005a0008 	subseq	r0, sl, r8
    8104:	f5001708 			; <UNDEFINED> instruction: 0xf5001708
    8108:	91202508 	teqls	r0, r8, lsl #10
    810c:	08f67d98 	ldmeq	r6!, {r3, r4, r7, r8, sl, fp, ip, sp, lr}^
    8110:	a0911a25 	addsge	r1, r1, r5, lsr #20
    8114:	2508f67d 	strcs	pc, [r8, #-1661]	; 0x67d
    8118:	1a2508f5 	bne	94a4f4 <__Stack_Size+0x949cf4>
    811c:	00009f27 	andeq	r9, r0, r7, lsr #30
    8120:	00000000 	andeq	r0, r0, r0
    8124:	59d00000 	ldmibpl	r0, {}^	; <UNPREDICTABLE>
    8128:	59e60800 	stmibpl	r6!, {fp}^
    812c:	00060800 	andeq	r0, r6, r0, lsl #16
    8130:	51049350 	tstpl	r4, r0, asr r3
    8134:	00000493 	muleq	r0, r3, r4
    8138:	00000000 	andeq	r0, r0, r0
    813c:	57880000 	strpl	r0, [r8, r0]
    8140:	57a80800 	strpl	r0, [r8, r0, lsl #16]!
    8144:	00200800 	eoreq	r0, r0, r0, lsl #16
    8148:	f67d8891 			; <UNDEFINED> instruction: 0xf67d8891
    814c:	80912508 	addshi	r2, r1, r8, lsl #10
    8150:	2508f67d 	strcs	pc, [r8, #-1661]	; 0x67d
    8154:	250af527 	strcs	pc, [sl, #-1319]	; 0x527
    8158:	7d88911a 	stfvcd	f1, [r8, #104]	; 0x68
    815c:	912508f6 	strdls	r0, [r5, -r6]!
    8160:	08f67d80 	ldmeq	r6!, {r7, r8, sl, fp, ip, sp, lr}^
    8164:	9f271a25 	svcls	0x00271a25
    8168:	080059d0 	stmdaeq	r0, {r4, r6, r7, r8, fp, ip, lr}
    816c:	08005a04 	stmdaeq	r0, {r2, r9, fp, ip, lr}
    8170:	88910020 	ldmhi	r1, {r5}
    8174:	2508f67d 	strcs	pc, [r8, #-1661]	; 0x67d
    8178:	f67d8091 			; <UNDEFINED> instruction: 0xf67d8091
    817c:	f5272508 			; <UNDEFINED> instruction: 0xf5272508
    8180:	911a250a 	tstls	sl, sl, lsl #10
    8184:	08f67d88 	ldmeq	r6!, {r3, r7, r8, sl, fp, ip, sp, lr}^
    8188:	7d809125 	stfvcd	f1, [r0, #148]	; 0x94
    818c:	1a2508f6 	bne	94a56c <__Stack_Size+0x949d6c>
    8190:	00009f27 	andeq	r9, r0, r7, lsr #30
    8194:	00000000 	andeq	r0, r0, r0
    8198:	57880000 	strpl	r0, [r8, r0]
    819c:	578c0800 	strpl	r0, [ip, r0, lsl #16]
    81a0:	00060800 	andeq	r0, r6, r0, lsl #16
    81a4:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    81a8:	59da0493 	ldmibpl	sl, {r0, r1, r4, r7, sl}^
    81ac:	59f40800 	ldmibpl	r4!, {fp}^
    81b0:	00060800 	andeq	r0, r6, r0, lsl #16
    81b4:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    81b8:	00000493 	muleq	r0, r3, r4
    81bc:	00000000 	andeq	r0, r0, r0
    81c0:	57880000 	strpl	r0, [r8, r0]
    81c4:	57ba0800 	ldrpl	r0, [sl, r0, lsl #16]!
    81c8:	00020800 	andeq	r0, r2, r0, lsl #16
    81cc:	58469f42 	stmdapl	r6, {r1, r6, r8, r9, sl, fp, ip, pc}^
    81d0:	5ac00800 	bpl	ff00a1d8 <BootRAM+0xdf7a979>
    81d4:	00020800 	andeq	r0, r2, r0, lsl #16
    81d8:	00009f42 	andeq	r9, r0, r2, asr #30
    81dc:	00000000 	andeq	r0, r0, r0
    81e0:	57880000 	strpl	r0, [r8, r0]
    81e4:	57ae0800 	strpl	r0, [lr, r0, lsl #16]!
    81e8:	00060800 	andeq	r0, r6, r0, lsl #16
    81ec:	59049358 	stmdbpl	r4, {r3, r4, r6, r8, r9, ip, pc}
    81f0:	57ae0493 			; <UNDEFINED> instruction: 0x57ae0493
    81f4:	57ba0800 	ldrpl	r0, [sl, r0, lsl #16]!
    81f8:	00030800 	andeq	r0, r3, r0, lsl #16
    81fc:	467da091 			; <UNDEFINED> instruction: 0x467da091
    8200:	00080058 	andeq	r0, r8, r8, asr r0
    8204:	0608005a 			; <UNDEFINED> instruction: 0x0608005a
    8208:	04935800 	ldreq	r5, [r3], #2048	; 0x800
    820c:	00049359 	andeq	r9, r4, r9, asr r3
    8210:	00000000 	andeq	r0, r0, r0
    8214:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    8218:	ba080057 	blt	20837c <__Stack_Size+0x207b7c>
    821c:	02080057 	andeq	r0, r8, #87	; 0x57
    8220:	469f3e00 	ldrmi	r3, [pc], r0, lsl #28
    8224:	c0080058 	andgt	r0, r8, r8, asr r0
    8228:	0208005a 	andeq	r0, r8, #90	; 0x5a
    822c:	009f3e00 	addseq	r3, pc, r0, lsl #28
    8230:	00000000 	andeq	r0, r0, r0
    8234:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    8238:	ba080057 	blt	20839c <__Stack_Size+0x207b9c>
    823c:	03080057 	movweq	r0, #32855	; 0x8057
    8240:	9f290800 	svcls	0x00290800
    8244:	08005846 	stmdaeq	r0, {r1, r2, r6, fp, ip, lr}
    8248:	08005ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, lr}
    824c:	29080003 	stmdbcs	r8, {r0, r1}
    8250:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8254:	00000000 	andeq	r0, r0, r0
    8258:	00578800 	subseq	r8, r7, r0, lsl #16
    825c:	0057ba08 	subseq	fp, r7, r8, lsl #20
    8260:	31000208 	tstcc	r0, r8, lsl #4
    8264:	0058469f 			; <UNDEFINED> instruction: 0x0058469f
    8268:	005ac008 	subseq	ip, sl, r8
    826c:	31000208 	tstcc	r0, r8, lsl #4
    8270:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8274:	00000000 	andeq	r0, r0, r0
    8278:	00578800 	subseq	r8, r7, r0, lsl #16
    827c:	0057ba08 	subseq	fp, r7, r8, lsl #20
    8280:	38000208 	stmdacc	r0, {r3, r9}
    8284:	0058469f 			; <UNDEFINED> instruction: 0x0058469f
    8288:	005ac008 	subseq	ip, sl, r8
    828c:	38000208 	stmdacc	r0, {r3, r9}
    8290:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8294:	00000000 	andeq	r0, r0, r0
    8298:	00578800 	subseq	r8, r7, r0, lsl #16
    829c:	0057ba08 	subseq	fp, r7, r8, lsl #20
    82a0:	43000208 	movwmi	r0, #520	; 0x208
    82a4:	0058469f 			; <UNDEFINED> instruction: 0x0058469f
    82a8:	005ac008 	subseq	ip, sl, r8
    82ac:	43000208 	movwmi	r0, #520	; 0x208
    82b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    82b4:	00000000 	andeq	r0, r0, r0
    82b8:	00578800 	subseq	r8, r7, r0, lsl #16
    82bc:	0057ba08 	subseq	fp, r7, r8, lsl #20
    82c0:	08000308 	stmdaeq	r0, {r3, r8, r9}
    82c4:	58469f22 	stmdapl	r6, {r1, r5, r8, r9, sl, fp, ip, pc}^
    82c8:	5ac00800 	bpl	ff00a2d0 <BootRAM+0xdf7aa71>
    82cc:	00030800 	andeq	r0, r3, r0, lsl #16
    82d0:	009f2208 	addseq	r2, pc, r8, lsl #4
    82d4:	00000000 	andeq	r0, r0, r0
    82d8:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    82dc:	b8080057 	stmdalt	r8, {r0, r1, r2, r4, r6}
    82e0:	06080057 			; <UNDEFINED> instruction: 0x06080057
    82e4:	04935a00 	ldreq	r5, [r3], #2560	; 0xa00
    82e8:	b804935b 	stmdalt	r4, {r0, r1, r3, r4, r6, r8, r9, ip, pc}
    82ec:	ba080057 	blt	208450 <__Stack_Size+0x207c50>
    82f0:	03080057 	movweq	r0, #32855	; 0x8057
    82f4:	7d809100 	stfvcd	f1, [r0]
    82f8:	08005846 	stmdaeq	r0, {r1, r2, r6, fp, ip, lr}
    82fc:	08005a04 	stmdaeq	r0, {r2, r9, fp, ip, lr}
    8300:	935a0006 	cmpls	sl, #6
    8304:	04935b04 	ldreq	r5, [r3], #2820	; 0xb04
	...
    8310:	08005788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip, lr}
    8314:	080057ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl, ip, lr}
    8318:	9f4c0002 	svcls	0x004c0002
    831c:	08005846 	stmdaeq	r0, {r1, r2, r6, fp, ip, lr}
    8320:	08005ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, lr}
    8324:	9f4c0002 	svcls	0x004c0002
	...
    8330:	08005788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip, lr}
    8334:	080057ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl, ip, lr}
    8338:	3d080003 	stccc	0, cr0, [r8, #-12]
    833c:	0058469f 			; <UNDEFINED> instruction: 0x0058469f
    8340:	005ac008 	subseq	ip, sl, r8
    8344:	08000308 	stmdaeq	r0, {r3, r8, r9}
    8348:	00009f3d 	andeq	r9, r0, sp, lsr pc
    834c:	00000000 	andeq	r0, r0, r0
    8350:	57880000 	strpl	r0, [r8, r0]
    8354:	57ba0800 	ldrpl	r0, [sl, r0, lsl #16]!
    8358:	00030800 	andeq	r0, r3, r0, lsl #16
    835c:	469f2708 	ldrmi	r2, [pc], r8, lsl #14
    8360:	c0080058 	andgt	r0, r8, r8, asr r0
    8364:	0308005a 	movweq	r0, #32858	; 0x805a
    8368:	9f270800 	svcls	0x00270800
	...
    8374:	08005ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, lr}
    8378:	08005ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp, ip, lr}
    837c:	d0500001 	subsle	r0, r0, r1
    8380:	4808005a 	stmdami	r8, {r1, r3, r4, r6}
    8384:	0108005b 	qaddeq	r0, fp, r8
    8388:	00005a00 	andeq	r5, r0, r0, lsl #20
    838c:	00000000 	andeq	r0, r0, r0
    8390:	5ac00000 	bpl	ff008398 <BootRAM+0xdf78b39>
    8394:	5ad40800 	bpl	ff50a39c <BootRAM+0xe47ab3d>
    8398:	00010800 	andeq	r0, r1, r0, lsl #16
    839c:	005ad451 	subseq	sp, sl, r1, asr r4
    83a0:	005b4808 	subseq	r4, fp, r8, lsl #16
    83a4:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    83b0:	08005ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, lr}
    83b4:	08005ad2 	stmdaeq	r0, {r1, r4, r6, r7, r9, fp, ip, lr}
    83b8:	d2520001 	subsle	r0, r2, #1
    83bc:	e608005a 			; <UNDEFINED> instruction: 0xe608005a
    83c0:	0108005a 	qaddeq	r0, sl, r8
    83c4:	5ae65400 	bpl	ff99d3cc <BootRAM+0xe90db6d>
    83c8:	5b1c0800 	blpl	70a3d0 <__Stack_Size+0x709bd0>
    83cc:	00040800 	andeq	r0, r4, r0, lsl #16
    83d0:	9f5201f3 	svcls	0x005201f3
    83d4:	08005b1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, fp, ip, lr}
    83d8:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
    83dc:	00540001 	subseq	r0, r4, r1
    83e0:	00000000 	andeq	r0, r0, r0
    83e4:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    83e8:	dc08005a 	stcle	0, cr0, [r8], {90}	; 0x5a
    83ec:	0608005a 			; <UNDEFINED> instruction: 0x0608005a
    83f0:	08007400 	stmdaeq	r0, {sl, ip, sp, lr}
    83f4:	dc9f1a7f 	vldmiale	pc, {s2-s128}
    83f8:	e808005a 	stmda	r8, {r1, r3, r4, r6}
    83fc:	0108005a 	qaddeq	r0, sl, r8
    8400:	5ae85600 	bpl	ffa1dc08 <BootRAM+0xe98e3a9>
    8404:	5b1c0800 	blpl	70a40c <__Stack_Size+0x709c0c>
    8408:	00070800 	andeq	r0, r7, r0, lsl #16
    840c:	085201f3 	ldmdaeq	r2, {r0, r1, r4, r5, r6, r7, r8}^
    8410:	1c9f1a7f 	vldmiane	pc, {s2-s128}
    8414:	4808005b 	stmdami	r8, {r0, r1, r3, r4, r6}
    8418:	0108005b 	qaddeq	r0, fp, r8
    841c:	00005600 	andeq	r5, r0, r0, lsl #12
    8420:	00000000 	andeq	r0, r0, r0
    8424:	5ae40000 	bpl	ff90842c <BootRAM+0xe878bcd>
    8428:	5aea0800 	bpl	ffa8a430 <BootRAM+0xe9fabd1>
    842c:	00070800 	andeq	r0, r7, r0, lsl #16
    8430:	33f70072 	mvnscc	r0, #114	; 0x72
    8434:	029f25f7 	addseq	r2, pc, #1035993088	; 0x3dc00000
    8438:	1c08005b 	stcne	0, cr0, [r8], {91}	; 0x5b
    843c:	0a08005b 	beq	2085b0 <__Stack_Size+0x207db0>
    8440:	00089e00 	andeq	r9, r8, r0, lsl #28
	...
    8450:	e4000000 	str	r0, [r0], #-0
    8454:	ea08005a 	b	2085c4 <__Stack_Size+0x207dc4>
    8458:	0308005a 	movweq	r0, #32858	; 0x805a
    845c:	9f5e9100 	svcls	0x005e9100
    8460:	08005aea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, fp, ip, lr}
    8464:	08005afe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, fp, ip, lr}
    8468:	5c910003 	ldcpl	0, cr0, [r1], {3}
    846c:	005afe9f 			; <UNDEFINED> instruction: 0x005afe9f
    8470:	005b0208 	subseq	r0, fp, r8, lsl #4
    8474:	91000308 	tstls	r0, r8, lsl #6
    8478:	5b029f5b 	blpl	b01ec <__Stack_Size+0xaf9ec>
    847c:	5b060800 	blpl	18a484 <__Stack_Size+0x189c84>
    8480:	00030800 	andeq	r0, r3, r0, lsl #16
    8484:	069f5a91 			; <UNDEFINED> instruction: 0x069f5a91
    8488:	0a08005b 	beq	2085fc <__Stack_Size+0x207dfc>
    848c:	0308005b 	movweq	r0, #32859	; 0x805b
    8490:	9f599100 	svcls	0x00599100
    8494:	08005b0a 	stmdaeq	r0, {r1, r3, r8, r9, fp, ip, lr}
    8498:	08005b0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp, ip, lr}
    849c:	58910003 	ldmpl	r1, {r0, r1}
    84a0:	005b0e9f 			; <UNDEFINED> instruction: 0x005b0e9f
    84a4:	005b1c08 	subseq	r1, fp, r8, lsl #24
    84a8:	91000308 	tstls	r0, r8, lsl #6
    84ac:	00009f57 	andeq	r9, r0, r7, asr pc
    84b0:	00000000 	andeq	r0, r0, r0
    84b4:	5b480000 	blpl	12084bc <__Stack_Size+0x1207cbc>
    84b8:	5b620800 	blpl	188a4c0 <__Stack_Size+0x1889cc0>
    84bc:	00010800 	andeq	r0, r1, r0, lsl #16
    84c0:	005b6250 	subseq	r6, fp, r0, asr r2
    84c4:	005dde08 	subseq	sp, sp, r8, lsl #28
    84c8:	91000208 	tstls	r0, r8, lsl #4
    84cc:	00000040 	andeq	r0, r0, r0, asr #32
    84d0:	00000000 	andeq	r0, r0, r0
    84d4:	005b4800 	subseq	r4, fp, r0, lsl #16
    84d8:	005b5a08 	subseq	r5, fp, r8, lsl #20
    84dc:	51000108 	tstpl	r0, r8, lsl #2
    84e0:	08005b5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, fp, ip, lr}
    84e4:	08005b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp, ip, lr}
    84e8:	ac910003 	ldcge	0, cr0, [r1], {3}
    84ec:	005b987f 	subseq	r9, fp, pc, ror r8
    84f0:	005c2e08 	subseq	r2, ip, r8, lsl #28
    84f4:	51000108 	tstpl	r0, r8, lsl #2
    84f8:	08005c54 	stmdaeq	r0, {r2, r4, r6, sl, fp, ip, lr}
    84fc:	08005d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, ip, lr}
    8500:	ac910003 	ldcge	0, cr0, [r1], {3}
    8504:	005d307f 	subseq	r3, sp, pc, ror r0
    8508:	005d3608 	subseq	r3, sp, r8, lsl #12
    850c:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    8518:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
    851c:	08005b66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, fp, ip, lr}
    8520:	66520001 	ldrbvs	r0, [r2], -r1
    8524:	6a08005b 	bvs	208698 <__Stack_Size+0x207e98>
    8528:	0408005b 	streq	r0, [r8], #-91	; 0x5b
    852c:	5201f300 	andpl	pc, r1, #0, 6
    8530:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8534:	00000000 	andeq	r0, r0, r0
    8538:	005b4800 	subseq	r4, fp, r0, lsl #16
    853c:	005b6808 	subseq	r6, fp, r8, lsl #16
    8540:	53000108 	movwpl	r0, #264	; 0x108
    8544:	08005b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, ip, lr}
    8548:	08005b6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, fp, ip, lr}
    854c:	6e510001 	cdpvs	0, 5, cr0, cr1, cr1, {0}
    8550:	9808005b 	stmdals	r8, {r0, r1, r3, r4, r6}
    8554:	0308005b 	movweq	r0, #32859	; 0x805b
    8558:	7fa49100 	svcvc	0x00a49100
    855c:	08005c54 	stmdaeq	r0, {r2, r4, r6, sl, fp, ip, lr}
    8560:	08005c68 	stmdaeq	r0, {r3, r5, r6, sl, fp, ip, lr}
    8564:	68510001 	ldmdavs	r1, {r0}^
    8568:	1608005c 			; <UNDEFINED> instruction: 0x1608005c
    856c:	0308005d 	movweq	r0, #32861	; 0x805d
    8570:	7fa49100 	svcvc	0x00a49100
    8574:	08005d16 	stmdaeq	r0, {r1, r2, r4, r8, sl, fp, ip, lr}
    8578:	08005d24 	stmdaeq	r0, {r2, r5, r8, sl, fp, ip, lr}
    857c:	8008001b 	andhi	r0, r8, fp, lsl r0
    8580:	1c5201f3 	ldfnee	f0, [r2], {243}	; 0xf3
    8584:	244b4012 	strbcs	r4, [fp], #-18
    8588:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    858c:	4b401416 	blmi	100d5ec <__Stack_Size+0x100cdec>
    8590:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    8594:	13160001 	tstne	r6, #1
    8598:	005d249f 			; <UNDEFINED> instruction: 0x005d249f
    859c:	005d3608 	subseq	r3, sp, r8, lsl #12
    85a0:	91000308 	tstls	r0, r8, lsl #6
    85a4:	00007fa4 	andeq	r7, r0, r4, lsr #31
    85a8:	00000000 	andeq	r0, r0, r0
    85ac:	5d200000 	stcpl	0, cr0, [r0, #-0]
    85b0:	5d230800 	stcpl	8, cr0, [r3, #-0]
    85b4:	00010800 	andeq	r0, r1, r0, lsl #16
    85b8:	005d235c 	subseq	r2, sp, ip, asr r3
    85bc:	005d3408 	subseq	r3, sp, r8, lsl #8
    85c0:	91000708 	tstls	r0, r8, lsl #14
    85c4:	23067fa8 	movwcs	r7, #28584	; 0x6fa8
    85c8:	00009f01 	andeq	r9, r0, r1, lsl #30
    85cc:	00000000 	andeq	r0, r0, r0
    85d0:	5ba20000 	blpl	fe8885d8 <BootRAM+0xd7f8d79>
    85d4:	5baa0800 	blpl	fea8a5dc <BootRAM+0xd9fad7d>
    85d8:	00060800 	andeq	r0, r6, r0, lsl #16
    85dc:	53049352 	movwpl	r9, #17234	; 0x4352
    85e0:	5baa0493 	blpl	fea89834 <BootRAM+0xd9f9fd5>
    85e4:	5bb20800 	blpl	fec8a5ec <BootRAM+0xdbfad8d>
    85e8:	00040800 	andeq	r0, r4, r0, lsl #16
    85ec:	067fb891 			; <UNDEFINED> instruction: 0x067fb891
    85f0:	08005bb2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, fp, ip, lr}
    85f4:	08005bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp, ip, lr}
    85f8:	93520006 	cmpls	r2, #6
    85fc:	04935304 	ldreq	r5, [r3], #772	; 0x304
    8600:	08005bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp, ip, lr}
    8604:	08005bda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, fp, ip, lr}
    8608:	935a0006 	cmpls	sl, #6
    860c:	04935b04 	ldreq	r5, [r3], #2820	; 0xb04
    8610:	08005bda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, fp, ip, lr}
    8614:	08005be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp, ip, lr}
    8618:	93540006 	cmpls	r4, #6
    861c:	04935504 	ldreq	r5, [r3], #1284	; 0x504
    8620:	08005be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp, ip, lr}
    8624:	08005bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
    8628:	93560006 	cmpls	r6, #6
    862c:	04935704 	ldreq	r5, [r3], #1796	; 0x704
    8630:	08005bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
    8634:	08005c10 	stmdaeq	r0, {r4, sl, fp, ip, lr}
    8638:	93580006 	cmpls	r8, #6
    863c:	04935904 	ldreq	r5, [r3], #2308	; 0x904
	...
    8648:	08005ba2 	stmdaeq	r0, {r1, r5, r7, r8, r9, fp, ip, lr}
    864c:	08005bb2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, fp, ip, lr}
    8650:	06710003 	ldrbteq	r0, [r1], -r3
    8654:	005bb29f 			; <UNDEFINED> instruction: 0x005bb29f
    8658:	005bd408 	subseq	sp, fp, r8, lsl #8
    865c:	71000308 	tstvc	r0, r8, lsl #6
    8660:	5bd49f05 	blpl	ff53027c <BootRAM+0xe4a0a1d>
    8664:	5bda0800 	blpl	ff68a66c <BootRAM+0xe5fae0d>
    8668:	00030800 	andeq	r0, r3, r0, lsl #16
    866c:	da9f0371 	ble	fe7c9438 <BootRAM+0xd739bd9>
    8670:	e008005b 	and	r0, r8, fp, asr r0
    8674:	0308005b 	movweq	r0, #32859	; 0x805b
    8678:	9f027100 	svcls	0x00027100
    867c:	08005be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp, ip, lr}
    8680:	08005bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
    8684:	01710003 	cmneq	r1, r3
    8688:	005bec9f 			; <UNDEFINED> instruction: 0x005bec9f
    868c:	005c1008 	subseq	r1, ip, r8
    8690:	51000108 	tstpl	r0, r8, lsl #2
    8694:	08005c10 	stmdaeq	r0, {r4, sl, fp, ip, lr}
    8698:	08005c22 	stmdaeq	r0, {r1, r5, sl, fp, ip, lr}
    869c:	7f710003 	svcvc	0x00710003
    86a0:	005c229f 			; <UNDEFINED> instruction: 0x005c229f
    86a4:	005c2e08 	subseq	r2, ip, r8, lsl #28
    86a8:	71000308 	tstvc	r0, r8, lsl #6
    86ac:	00009f77 	andeq	r9, r0, r7, ror pc
    86b0:	00000000 	andeq	r0, r0, r0
    86b4:	5d200000 	stcpl	0, cr0, [r0, #-0]
    86b8:	5d230800 	stcpl	8, cr0, [r3, #-0]
    86bc:	00010800 	andeq	r0, r1, r0, lsl #16
    86c0:	00000052 	andeq	r0, r0, r2, asr r0
    86c4:	00000000 	andeq	r0, r0, r0
    86c8:	005d2000 	subseq	r2, sp, r0
    86cc:	005d3608 	subseq	r3, sp, r8, lsl #12
    86d0:	91000308 	tstls	r0, r8, lsl #6
    86d4:	00009f47 	andeq	r9, r0, r7, asr #30
    86d8:	00000000 	andeq	r0, r0, r0
    86dc:	5d460000 	stclpl	0, cr0, [r6, #-0]
    86e0:	5d580800 	ldclpl	8, cr0, [r8, #-0]
    86e4:	00060800 	andeq	r0, r6, r0, lsl #16
    86e8:	51049350 	tstpl	r4, r0, asr r3
    86ec:	5d580493 	cfldrdpl	mvd0, [r8, #-588]	; 0xfffffdb4
    86f0:	5d600800 	stclpl	8, cr0, [r0, #-0]
    86f4:	00060800 	andeq	r0, r6, r0, lsl #16
    86f8:	5b04935a 	blpl	12d468 <__Stack_Size+0x12cc68>
    86fc:	5d600493 	cfstrdpl	mvd0, [r0, #-588]!	; 0xfffffdb4
    8700:	5d6c0800 	stclpl	8, cr0, [ip, #-0]
    8704:	00060800 	andeq	r0, r6, r0, lsl #16
    8708:	59049358 	stmdbpl	r4, {r3, r4, r6, r8, r9, ip, pc}
    870c:	5d6c0493 	cfstrdpl	mvd0, [ip, #-588]!	; 0xfffffdb4
    8710:	5d740800 	ldclpl	8, cr0, [r4, #-0]
    8714:	00060800 	andeq	r0, r6, r0, lsl #16
    8718:	57049356 	smlsdpl	r4, r6, r3, r9
    871c:	5d740493 	cfldrdpl	mvd0, [r4, #-588]!	; 0xfffffdb4
    8720:	5d7c0800 	ldclpl	8, cr0, [ip, #-0]
    8724:	00060800 	andeq	r0, r6, r0, lsl #16
    8728:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    872c:	5d7c0493 	cfldrdpl	mvd0, [ip, #-588]!	; 0xfffffdb4
    8730:	5daa0800 	stcpl	8, cr0, [sl]
    8734:	00060800 	andeq	r0, r6, r0, lsl #16
    8738:	51049350 	tstpl	r4, r0, asr r3
    873c:	5db40493 	cfldrspl	mvf0, [r4, #588]!	; 0x24c
    8740:	5dde0800 	ldclpl	8, cr0, [lr]
    8744:	000b0800 	andeq	r0, fp, r0, lsl #16
    8748:	f67f8891 			; <UNDEFINED> instruction: 0xf67f8891
    874c:	f7382508 			; <UNDEFINED> instruction: 0xf7382508
    8750:	009f2525 	addseq	r2, pc, r5, lsr #10
    8754:	00000000 	andeq	r0, r0, r0
    8758:	46000000 	strmi	r0, [r0], -r0
    875c:	5808005d 	stmdapl	r8, {r0, r2, r3, r4, r6}
    8760:	0308005d 	movweq	r0, #32861	; 0x805d
    8764:	9f4e9100 	svcls	0x004e9100
    8768:	08005d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, ip, lr}
    876c:	08005d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, ip, lr}
    8770:	4d910003 	ldcmi	0, cr0, [r1, #12]
    8774:	005d609f 			; <UNDEFINED> instruction: 0x005d609f
    8778:	005d6c08 	subseq	r6, sp, r8, lsl #24
    877c:	91000308 	tstls	r0, r8, lsl #6
    8780:	5d6c9f4c 	stclpl	15, cr9, [ip, #-304]!	; 0xfffffed0
    8784:	5d740800 	ldclpl	8, cr0, [r4, #-0]
    8788:	00030800 	andeq	r0, r3, r0, lsl #16
    878c:	749f4b91 	ldrvc	r4, [pc], #2961	; 8794 <__Stack_Size+0x7f94>
    8790:	7c08005d 	stcvc	0, cr0, [r8], {93}	; 0x5d
    8794:	0308005d 	movweq	r0, #32861	; 0x805d
    8798:	9f4a9100 	svcls	0x004a9100
    879c:	08005d7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, fp, ip, lr}
    87a0:	08005db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip, lr}
    87a4:	49910003 	ldmibmi	r1, {r0, r1}
    87a8:	005db49f 			; <UNDEFINED> instruction: 0x005db49f
    87ac:	005dde08 	subseq	sp, sp, r8, lsl #28
    87b0:	91000308 	tstls	r0, r8, lsl #6
    87b4:	00009f47 	andeq	r9, r0, r7, asr #30
	...
    87c4:	00010000 	andeq	r0, r1, r0
    87c8:	00000050 	andeq	r0, r0, r0, asr r0
    87cc:	00000000 	andeq	r0, r0, r0
    87d0:	f3000400 	vshl.u8	d0, d0, d0
    87d4:	009f5001 	addseq	r5, pc, r1
	...
    87e4:	01000000 	mrseq	r0, (UNDEF: 0)
    87e8:	00005000 	andeq	r5, r0, r0
    87ec:	00000000 	andeq	r0, r0, r0
    87f0:	00040000 	andeq	r0, r4, r0
    87f4:	9f5001f3 	svcls	0x005001f3
	...
    8808:	00500001 	subseq	r0, r0, r1
    880c:	00000000 	andeq	r0, r0, r0
    8810:	04000000 	streq	r0, [r0], #-0
    8814:	5001f300 	andpl	pc, r1, r0, lsl #6
    8818:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8828:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    8834:	01f30004 	mvnseq	r0, r4
    8838:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    8848:	00010000 	andeq	r0, r1, r0
    884c:	00000050 	andeq	r0, r0, r0, asr r0
    8850:	00000000 	andeq	r0, r0, r0
    8854:	f3000400 	vshl.u8	d0, d0, d0
    8858:	009f5001 	addseq	r5, pc, r1
    885c:	00000000 	andeq	r0, r0, r0
    8860:	e0000000 	and	r0, r0, r0
    8864:	e208005d 	and	r0, r8, #93	; 0x5d
    8868:	0108005d 	qaddeq	r0, sp, r8
    886c:	5de25000 	stclpl	0, cr5, [r2]
    8870:	5e0a0800 	cdppl	8, 0, cr0, cr10, cr0, {0}
    8874:	00040800 	andeq	r0, r4, r0, lsl #16
    8878:	9f5001f3 	svcls	0x005001f3
	...
    888c:	00500001 	subseq	r0, r0, r1
    8890:	00000000 	andeq	r0, r0, r0
    8894:	04000000 	streq	r0, [r0], #-0
    8898:	5001f300 	andpl	pc, r1, r0, lsl #6
    889c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    88ac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    88b8:	01f30004 	mvnseq	r0, r4
    88bc:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    88cc:	00010000 	andeq	r0, r1, r0
    88d0:	00000050 	andeq	r0, r0, r0, asr r0
    88d4:	00000000 	andeq	r0, r0, r0
    88d8:	f3000400 	vshl.u8	d0, d0, d0
    88dc:	009f5001 	addseq	r5, pc, r1
	...
    88ec:	01000000 	mrseq	r0, (UNDEF: 0)
    88f0:	00005000 	andeq	r5, r0, r0
    88f4:	00000000 	andeq	r0, r0, r0
    88f8:	00040000 	andeq	r0, r4, r0
    88fc:	9f5001f3 	svcls	0x005001f3
	...
    8910:	00500001 	subseq	r0, r0, r1
    8914:	00000000 	andeq	r0, r0, r0
    8918:	04000000 	streq	r0, [r0], #-0
    891c:	5001f300 	andpl	pc, r1, r0, lsl #6
    8920:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8930:	73000600 	movwvc	r0, #1536	; 0x600
    8934:	27300800 	ldrcs	r0, [r0, -r0, lsl #16]!
    8938:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    893c:	00000000 	andeq	r0, r0, r0
    8940:	73000900 	movwvc	r0, #2304	; 0x900
    8944:	27300800 	ldrcs	r0, [r0, -r0, lsl #16]!
    8948:	9f273008 	svcls	0x00273008
	...
    8954:	08005e0a 	stmdaeq	r0, {r1, r3, r9, sl, fp, ip, lr}
    8958:	08005e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, lr}
    895c:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    8960:	2808005e 	stmdacs	r8, {r1, r2, r3, r4, r6}
    8964:	0408005e 	streq	r0, [r8], #-94	; 0x5e
    8968:	5001f300 	andpl	pc, r1, r0, lsl #6
    896c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8970:	00000000 	andeq	r0, r0, r0
    8974:	005e2000 	subseq	r2, lr, r0
    8978:	005e2408 	subseq	r2, lr, r8, lsl #8
    897c:	73000708 	movwvc	r0, #1800	; 0x708
    8980:	30000a00 	andcc	r0, r0, r0, lsl #20
    8984:	5e249f27 	cdppl	15, 2, cr9, cr4, cr7, {1}
    8988:	5e280800 	cdppl	8, 2, cr0, cr8, cr0, {0}
    898c:	000b0800 	andeq	r0, fp, r0, lsl #16
    8990:	000a0073 	andeq	r0, sl, r3, ror r0
    8994:	000a2730 	andeq	r2, sl, r0, lsr r7
    8998:	009f2730 	addseq	r2, pc, r0, lsr r7	; <UNPREDICTABLE>
	...
    89a8:	01000000 	mrseq	r0, (UNDEF: 0)
    89ac:	00005000 	andeq	r5, r0, r0
    89b0:	00000000 	andeq	r0, r0, r0
    89b4:	00040000 	andeq	r0, r4, r0
    89b8:	9f5001f3 	svcls	0x005001f3
	...
    89cc:	00500001 	subseq	r0, r0, r1
    89d0:	00000000 	andeq	r0, r0, r0
    89d4:	04000000 	streq	r0, [r0], #-0
    89d8:	5001f300 	andpl	pc, r1, r0, lsl #6
    89dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    89e0:	00000000 	andeq	r0, r0, r0
    89e4:	005e2800 	subseq	r2, lr, r0, lsl #16
    89e8:	005e2a08 	subseq	r2, lr, r8, lsl #20
    89ec:	50000108 	andpl	r0, r0, r8, lsl #2
    89f0:	08005e2a 	stmdaeq	r0, {r1, r3, r5, r9, sl, fp, ip, lr}
    89f4:	08005e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip, lr}
    89f8:	01f30004 	mvnseq	r0, r4
    89fc:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8a0c:	00010000 	andeq	r0, r1, r0
    8a10:	00000050 	andeq	r0, r0, r0, asr r0
    8a14:	00000000 	andeq	r0, r0, r0
    8a18:	f3000400 	vshl.u8	d0, d0, d0
    8a1c:	009f5001 	addseq	r5, pc, r1
	...
    8a2c:	01000000 	mrseq	r0, (UNDEF: 0)
    8a30:	00005000 	andeq	r5, r0, r0
    8a34:	00000000 	andeq	r0, r0, r0
    8a38:	00040000 	andeq	r0, r4, r0
    8a3c:	9f5001f3 	svcls	0x005001f3
	...
    8a50:	00500001 	subseq	r0, r0, r1
    8a54:	00000000 	andeq	r0, r0, r0
    8a58:	04000000 	streq	r0, [r0], #-0
    8a5c:	5001f300 	andpl	pc, r1, r0, lsl #6
    8a60:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8a70:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8a7c:	01f30004 	mvnseq	r0, r4
    8a80:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8a90:	00010000 	andeq	r0, r1, r0
    8a94:	00000050 	andeq	r0, r0, r0, asr r0
    8a98:	00000000 	andeq	r0, r0, r0
    8a9c:	f3000400 	vshl.u8	d0, d0, d0
    8aa0:	009f5001 	addseq	r5, pc, r1
	...
    8ab0:	01000000 	mrseq	r0, (UNDEF: 0)
    8ab4:	00005000 	andeq	r5, r0, r0
    8ab8:	00000000 	andeq	r0, r0, r0
    8abc:	00040000 	andeq	r0, r4, r0
    8ac0:	9f5001f3 	svcls	0x005001f3
	...
    8ad4:	00500001 	subseq	r0, r0, r1
    8ad8:	00000000 	andeq	r0, r0, r0
    8adc:	04000000 	streq	r0, [r0], #-0
    8ae0:	5001f300 	andpl	pc, r1, r0, lsl #6
    8ae4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8af4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8b00:	01f30004 	mvnseq	r0, r4
    8b04:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8b14:	00010000 	andeq	r0, r1, r0
    8b18:	00000050 	andeq	r0, r0, r0, asr r0
    8b1c:	00000000 	andeq	r0, r0, r0
    8b20:	f3000400 	vshl.u8	d0, d0, d0
    8b24:	009f5001 	addseq	r5, pc, r1
    8b28:	00000000 	andeq	r0, r0, r0
    8b2c:	44000000 	strmi	r0, [r0], #-0
    8b30:	4608005e 			; <UNDEFINED> instruction: 0x4608005e
    8b34:	0108005e 	qaddeq	r0, lr, r8
    8b38:	5e465000 	cdppl	0, 4, cr5, cr6, cr0, {0}
    8b3c:	5e640800 	cdppl	8, 6, cr0, cr4, cr0, {0}
    8b40:	00040800 	andeq	r0, r4, r0, lsl #16
    8b44:	9f5001f3 	svcls	0x005001f3
	...
    8b50:	08005e64 	stmdaeq	r0, {r2, r5, r6, r9, sl, fp, ip, lr}
    8b54:	08005e66 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, fp, ip, lr}
    8b58:	66500001 	ldrbvs	r0, [r0], -r1
    8b5c:	8408005e 	strhi	r0, [r8], #-94	; 0x5e
    8b60:	0408005e 	streq	r0, [r8], #-94	; 0x5e
    8b64:	5001f300 	andpl	pc, r1, r0, lsl #6
    8b68:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8b78:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8b84:	01f30004 	mvnseq	r0, r4
    8b88:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8b98:	00010000 	andeq	r0, r1, r0
    8b9c:	00000051 	andeq	r0, r0, r1, asr r0
    8ba0:	00000000 	andeq	r0, r0, r0
    8ba4:	f3000400 	vshl.u8	d0, d0, d0
    8ba8:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    8bb8:	01000000 	mrseq	r0, (UNDEF: 0)
    8bbc:	00005000 	andeq	r5, r0, r0
    8bc0:	00000000 	andeq	r0, r0, r0
    8bc4:	00040000 	andeq	r0, r4, r0
    8bc8:	9f5001f3 	svcls	0x005001f3
	...
    8bdc:	00500001 	subseq	r0, r0, r1
    8be0:	00000000 	andeq	r0, r0, r0
    8be4:	04000000 	streq	r0, [r0], #-0
    8be8:	5001f300 	andpl	pc, r1, r0, lsl #6
    8bec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8bfc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    8c08:	01f30004 	mvnseq	r0, r4
    8c0c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    8c1c:	00010000 	andeq	r0, r1, r0
    8c20:	00000050 	andeq	r0, r0, r0, asr r0
    8c24:	00000000 	andeq	r0, r0, r0
    8c28:	f3000400 	vshl.u8	d0, d0, d0
    8c2c:	009f5001 	addseq	r5, pc, r1
	...
    8c3c:	01000000 	mrseq	r0, (UNDEF: 0)
    8c40:	00005100 	andeq	r5, r0, r0, lsl #2
    8c44:	00000000 	andeq	r0, r0, r0
    8c48:	00040000 	andeq	r0, r4, r0
    8c4c:	9f5101f3 	svcls	0x005101f3
	...
    8c58:	08005e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, lr}
    8c5c:	08005e8e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sl, fp, ip, lr}
    8c60:	8e500001 	cdphi	0, 5, cr0, cr0, cr1, {0}
    8c64:	a008005e 	andge	r0, r8, lr, asr r0
    8c68:	0408005e 	streq	r0, [r8], #-94	; 0x5e
    8c6c:	5001f300 	andpl	pc, r1, r0, lsl #6
    8c70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8c74:	00000000 	andeq	r0, r0, r0
    8c78:	005ea000 	subseq	sl, lr, r0
    8c7c:	005eaa08 	subseq	sl, lr, r8, lsl #20
    8c80:	50000108 	andpl	r0, r0, r8, lsl #2
    8c84:	08005eaa 	stmdaeq	r0, {r1, r3, r5, r7, r9, sl, fp, ip, lr}
    8c88:	08005ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, lr}
    8c8c:	01f30004 	mvnseq	r0, r4
    8c90:	00009f50 	andeq	r9, r0, r0, asr pc
    8c94:	00000000 	andeq	r0, r0, r0
    8c98:	5ebc0000 	cdppl	0, 11, cr0, cr12, cr0, {0}
    8c9c:	5ec60800 	cdppl	8, 12, cr0, cr6, cr0, {0}
    8ca0:	00010800 	andeq	r0, r1, r0, lsl #16
    8ca4:	005ec650 	subseq	ip, lr, r0, asr r6
    8ca8:	005ed808 	subseq	sp, lr, r8, lsl #16
    8cac:	f3000408 	vshl.u8	d0, d8, d0
    8cb0:	009f5001 	addseq	r5, pc, r1
	...
    8cc0:	01000000 	mrseq	r0, (UNDEF: 0)
    8cc4:	00005100 	andeq	r5, r0, r0, lsl #2
    8cc8:	00000000 	andeq	r0, r0, r0
    8ccc:	00040000 	andeq	r0, r4, r0
    8cd0:	9f5101f3 	svcls	0x005101f3
	...
    8cdc:	00510001 	subseq	r0, r1, r1
    8ce0:	00000000 	andeq	r0, r0, r0
    8ce4:	04000000 	streq	r0, [r0], #-0
    8ce8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    8cec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8cfc:	53000100 	movwpl	r0, #256	; 0x100
	...
    8d08:	00530001 	subseq	r0, r3, r1
    8d0c:	00000000 	andeq	r0, r0, r0
    8d10:	01000000 	mrseq	r0, (UNDEF: 0)
    8d14:	00005300 	andeq	r5, r0, r0, lsl #6
    8d18:	00000000 	andeq	r0, r0, r0
    8d1c:	5ed80000 	cdppl	0, 13, cr0, cr8, cr0, {0}
    8d20:	5ee40800 	cdppl	8, 14, cr0, cr4, cr0, {0}
    8d24:	00010800 	andeq	r0, r1, r0, lsl #16
    8d28:	005ee450 	subseq	lr, lr, r0, asr r4
    8d2c:	005f1808 	subseq	r1, pc, r8, lsl #16
    8d30:	f3000408 	vshl.u8	d0, d8, d0
    8d34:	009f5001 	addseq	r5, pc, r1
    8d38:	00000000 	andeq	r0, r0, r0
    8d3c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    8d40:	0608005e 			; <UNDEFINED> instruction: 0x0608005e
    8d44:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    8d48:	5f065100 	svcpl	0x00065100
    8d4c:	5f180800 	svcpl	0x00180800
    8d50:	00040800 	andeq	r0, r4, r0, lsl #16
    8d54:	9f5101f3 	svcls	0x005101f3
	...
    8d60:	08005ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, ip, lr}
    8d64:	08005ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp, ip, lr}
    8d68:	f8530001 			; <UNDEFINED> instruction: 0xf8530001
    8d6c:	fa08005e 	blx	208eec <__Stack_Size+0x2086ec>
    8d70:	0508005e 	streq	r0, [r8, #-94]	; 0x5e
    8d74:	35007100 	strcc	r7, [r0, #-256]	; 0x100
    8d78:	5efa9f25 	cdppl	15, 15, cr9, cr10, cr5, {1}
    8d7c:	5efc0800 	cdppl	8, 15, cr0, cr12, cr0, {0}
    8d80:	00010800 	andeq	r0, r1, r0, lsl #16
    8d84:	005f0453 	subseq	r0, pc, r3, asr r4	; <UNPREDICTABLE>
    8d88:	005f0c08 	subseq	r0, pc, r8, lsl #24
    8d8c:	53000108 	movwpl	r0, #264	; 0x108
	...
    8da0:	00500001 	subseq	r0, r0, r1
    8da4:	00000000 	andeq	r0, r0, r0
    8da8:	04000000 	streq	r0, [r0], #-0
    8dac:	5001f300 	andpl	pc, r1, r0, lsl #6
    8db0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8dc0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8dcc:	01f30004 	mvnseq	r0, r4
    8dd0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8de0:	00010000 	andeq	r0, r1, r0
    8de4:	00000050 	andeq	r0, r0, r0, asr r0
    8de8:	00000000 	andeq	r0, r0, r0
    8dec:	f3000400 	vshl.u8	d0, d0, d0
    8df0:	009f5001 	addseq	r5, pc, r1
	...
    8e00:	01000000 	mrseq	r0, (UNDEF: 0)
    8e04:	00005100 	andeq	r5, r0, r0, lsl #2
    8e08:	00000000 	andeq	r0, r0, r0
    8e0c:	00040000 	andeq	r0, r4, r0
    8e10:	9f5101f3 	svcls	0x005101f3
	...
    8e24:	00520001 	subseq	r0, r2, r1
    8e28:	00000000 	andeq	r0, r0, r0
    8e2c:	04000000 	streq	r0, [r0], #-0
    8e30:	5201f300 	andpl	pc, r1, #0, 6
    8e34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8e44:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8e50:	01f30004 	mvnseq	r0, r4
    8e54:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8e64:	00010000 	andeq	r0, r1, r0
    8e68:	00000051 	andeq	r0, r0, r1, asr r0
    8e6c:	00000000 	andeq	r0, r0, r0
    8e70:	f3000400 	vshl.u8	d0, d0, d0
    8e74:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    8e84:	01000000 	mrseq	r0, (UNDEF: 0)
    8e88:	00005000 	andeq	r5, r0, r0
    8e8c:	00000000 	andeq	r0, r0, r0
    8e90:	00040000 	andeq	r0, r4, r0
    8e94:	9f5001f3 	svcls	0x005001f3
	...
    8ea8:	00510001 	subseq	r0, r1, r1
    8eac:	00000000 	andeq	r0, r0, r0
    8eb0:	04000000 	streq	r0, [r0], #-0
    8eb4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    8eb8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8ec8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8ed4:	01f30004 	mvnseq	r0, r4
    8ed8:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8ee8:	00010000 	andeq	r0, r1, r0
    8eec:	00000050 	andeq	r0, r0, r0, asr r0
    8ef0:	00000000 	andeq	r0, r0, r0
    8ef4:	f3000400 	vshl.u8	d0, d0, d0
    8ef8:	009f5001 	addseq	r5, pc, r1
	...
    8f08:	01000000 	mrseq	r0, (UNDEF: 0)
    8f0c:	00005000 	andeq	r5, r0, r0
    8f10:	00000000 	andeq	r0, r0, r0
    8f14:	00040000 	andeq	r0, r4, r0
    8f18:	9f5001f3 	svcls	0x005001f3
	...
    8f24:	00500001 	subseq	r0, r0, r1
    8f28:	00000000 	andeq	r0, r0, r0
    8f2c:	04000000 	streq	r0, [r0], #-0
    8f30:	5001f300 	andpl	pc, r1, r0, lsl #6
    8f34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8f38:	00000000 	andeq	r0, r0, r0
    8f3c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8f50:	00510001 	subseq	r0, r1, r1
    8f54:	00000000 	andeq	r0, r0, r0
    8f58:	04000000 	streq	r0, [r0], #-0
    8f5c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    8f60:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8f64:	00000000 	andeq	r0, r0, r0
    8f68:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    8f74:	01f30004 	mvnseq	r0, r4
    8f78:	00009f51 	andeq	r9, r0, r1, asr pc
    8f7c:	00000000 	andeq	r0, r0, r0
    8f80:	00010000 	andeq	r0, r1, r0
    8f84:	00000051 	andeq	r0, r0, r1, asr r0
	...
    8f94:	52000100 	andpl	r0, r0, #0, 2
	...
    8fa0:	01f30004 	mvnseq	r0, r4
    8fa4:	00009f52 	andeq	r9, r0, r2, asr pc
    8fa8:	00000000 	andeq	r0, r0, r0
    8fac:	00010000 	andeq	r0, r1, r0
    8fb0:	00000052 	andeq	r0, r0, r2, asr r0
	...
    8fc0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    8fcc:	00510001 	subseq	r0, r1, r1
	...
    8fdc:	01000000 	mrseq	r0, (UNDEF: 0)
    8fe0:	00005300 	andeq	r5, r0, r0, lsl #6
    8fe4:	00000000 	andeq	r0, r0, r0
    8fe8:	00050000 	andeq	r0, r5, r0
    8fec:	25350072 	ldrcs	r0, [r5, #-114]!	; 0x72
    8ff0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8ff4:	00000000 	andeq	r0, r0, r0
    8ff8:	53000100 	movwpl	r0, #256	; 0x100
	...
    9004:	00530001 	subseq	r0, r3, r1
	...
    9014:	01000000 	mrseq	r0, (UNDEF: 0)
    9018:	00005300 	andeq	r5, r0, r0, lsl #6
    901c:	00000000 	andeq	r0, r0, r0
    9020:	00010000 	andeq	r0, r1, r0
    9024:	00000053 	andeq	r0, r0, r3, asr r0
	...
    9034:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    9040:	00720005 	rsbseq	r0, r2, r5
    9044:	009f2535 	addseq	r2, pc, r5, lsr r5	; <UNPREDICTABLE>
    9048:	00000000 	andeq	r0, r0, r0
    904c:	01000000 	mrseq	r0, (UNDEF: 0)
    9050:	00005100 	andeq	r5, r0, r0, lsl #2
    9054:	00000000 	andeq	r0, r0, r0
    9058:	00010000 	andeq	r0, r1, r0
    905c:	00000051 	andeq	r0, r0, r1, asr r0
	...
    906c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    9078:	01f30004 	mvnseq	r0, r4
    907c:	00009f50 	andeq	r9, r0, r0, asr pc
    9080:	00000000 	andeq	r0, r0, r0
    9084:	00010000 	andeq	r0, r1, r0
    9088:	00000050 	andeq	r0, r0, r0, asr r0
    908c:	00000000 	andeq	r0, r0, r0
    9090:	f3000400 	vshl.u8	d0, d0, d0
    9094:	009f5001 	addseq	r5, pc, r1
	...
    90a4:	01000000 	mrseq	r0, (UNDEF: 0)
    90a8:	00005100 	andeq	r5, r0, r0, lsl #2
    90ac:	00000000 	andeq	r0, r0, r0
    90b0:	00040000 	andeq	r0, r4, r0
    90b4:	9f5101f3 	svcls	0x005101f3
	...
    90c0:	00510001 	subseq	r0, r1, r1
	...
    90d0:	01000000 	mrseq	r0, (UNDEF: 0)
    90d4:	00005200 	andeq	r5, r0, r0, lsl #4
    90d8:	00000000 	andeq	r0, r0, r0
    90dc:	00040000 	andeq	r0, r4, r0
    90e0:	9f5201f3 	svcls	0x005201f3
	...
    90ec:	00520001 	subseq	r0, r2, r1
	...
    90fc:	01000000 	mrseq	r0, (UNDEF: 0)
    9100:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    9110:	00010000 	andeq	r0, r1, r0
    9114:	00000053 	andeq	r0, r0, r3, asr r0
    9118:	00000000 	andeq	r0, r0, r0
    911c:	72000500 	andvc	r0, r0, #0, 10
    9120:	9f253500 	svcls	0x00253500
	...
    912c:	00530001 	subseq	r0, r3, r1
    9130:	00000000 	andeq	r0, r0, r0
    9134:	01000000 	mrseq	r0, (UNDEF: 0)
    9138:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    9148:	00010000 	andeq	r0, r1, r0
    914c:	00000050 	andeq	r0, r0, r0, asr r0
    9150:	00000000 	andeq	r0, r0, r0
    9154:	f3000400 	vshl.u8	d0, d0, d0
    9158:	009f5001 	addseq	r5, pc, r1
    915c:	00000000 	andeq	r0, r0, r0
    9160:	01000000 	mrseq	r0, (UNDEF: 0)
    9164:	00005000 	andeq	r5, r0, r0
    9168:	00000000 	andeq	r0, r0, r0
    916c:	00040000 	andeq	r0, r4, r0
    9170:	9f5001f3 	svcls	0x005001f3
	...
    9184:	00510001 	subseq	r0, r1, r1
    9188:	00000000 	andeq	r0, r0, r0
    918c:	04000000 	streq	r0, [r0], #-0
    9190:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    9194:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9198:	00000000 	andeq	r0, r0, r0
    919c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    91b0:	00520001 	subseq	r0, r2, r1
    91b4:	00000000 	andeq	r0, r0, r0
    91b8:	04000000 	streq	r0, [r0], #-0
    91bc:	5201f300 	andpl	pc, r1, #0, 6
    91c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    91c4:	00000000 	andeq	r0, r0, r0
    91c8:	52000100 	andpl	r0, r0, #0, 2
	...
    91dc:	00510001 	subseq	r0, r1, r1
	...
    91ec:	01000000 	mrseq	r0, (UNDEF: 0)
    91f0:	00005300 	andeq	r5, r0, r0, lsl #6
    91f4:	00000000 	andeq	r0, r0, r0
    91f8:	00050000 	andeq	r0, r5, r0
    91fc:	25350072 	ldrcs	r0, [r5, #-114]!	; 0x72
    9200:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9204:	00000000 	andeq	r0, r0, r0
    9208:	53000100 	movwpl	r0, #256	; 0x100
	...
    9214:	00530001 	subseq	r0, r3, r1
	...
    9224:	01000000 	mrseq	r0, (UNDEF: 0)
    9228:	00005000 	andeq	r5, r0, r0
    922c:	00000000 	andeq	r0, r0, r0
    9230:	00040000 	andeq	r0, r4, r0
    9234:	9f5001f3 	svcls	0x005001f3
	...
    9248:	00500001 	subseq	r0, r0, r1
    924c:	00000000 	andeq	r0, r0, r0
    9250:	04000000 	streq	r0, [r0], #-0
    9254:	5001f300 	andpl	pc, r1, r0, lsl #6
    9258:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    9268:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    9274:	01f30004 	mvnseq	r0, r4
    9278:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    9288:	00010000 	andeq	r0, r1, r0
    928c:	00000050 	andeq	r0, r0, r0, asr r0
    9290:	00000000 	andeq	r0, r0, r0
    9294:	f3000400 	vshl.u8	d0, d0, d0
    9298:	009f5001 	addseq	r5, pc, r1
    929c:	00000000 	andeq	r0, r0, r0
    92a0:	01000000 	mrseq	r0, (UNDEF: 0)
    92a4:	00005000 	andeq	r5, r0, r0
    92a8:	00000000 	andeq	r0, r0, r0
    92ac:	00040000 	andeq	r0, r4, r0
    92b0:	9f5001f3 	svcls	0x005001f3
	...
    92c4:	00500001 	subseq	r0, r0, r1
    92c8:	00000000 	andeq	r0, r0, r0
    92cc:	04000000 	streq	r0, [r0], #-0
    92d0:	5001f300 	andpl	pc, r1, r0, lsl #6
    92d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    92e4:	70000e00 	andvc	r0, r0, r0, lsl #28
    92e8:	1aff0800 	bne	fffcb2f0 <BootRAM+0xef3ba91>
    92ec:	00712438 	rsbseq	r2, r1, r8, lsr r4
    92f0:	211aff08 	tstcs	sl, r8, lsl #30
    92f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    92f8:	00000000 	andeq	r0, r0, r0
    92fc:	f3000f00 	vpmax.f32	d0, d0, d0
    9300:	ff085001 			; <UNDEFINED> instruction: 0xff085001
    9304:	7124381a 	teqvc	r4, sl, lsl r8
    9308:	1aff0800 	bne	fffcb310 <BootRAM+0xef3bab1>
    930c:	00009f21 	andeq	r9, r0, r1, lsr #30
	...
    931c:	00010000 	andeq	r0, r1, r0
    9320:	00000050 	andeq	r0, r0, r0, asr r0
    9324:	00000000 	andeq	r0, r0, r0
    9328:	f3000400 	vshl.u8	d0, d0, d0
    932c:	009f5001 	addseq	r5, pc, r1
	...
    933c:	01000000 	mrseq	r0, (UNDEF: 0)
    9340:	00005000 	andeq	r5, r0, r0
	...
    9350:	000d0000 	andeq	r0, sp, r0
    9354:	25380070 	ldrcs	r0, [r8, #-112]!	; 0x70
    9358:	ff080070 			; <UNDEFINED> instruction: 0xff080070
    935c:	2124381a 	teqcs	r4, sl, lsl r8
    9360:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9364:	00000000 	andeq	r0, r0, r0
    9368:	005f1a00 	subseq	r1, pc, r0, lsl #20
    936c:	005f8008 	subseq	r8, pc, r8
    9370:	30000208 	andcc	r0, r0, r8, lsl #4
    9374:	005f809f 			; <UNDEFINED> instruction: 0x005f809f
    9378:	005f8408 	subseq	r8, pc, r8, lsl #8
    937c:	73000708 	movwvc	r0, #1800	; 0x708
    9380:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    9384:	5f949f1a 	svcpl	0x00949f1a
    9388:	5f9e0800 	svcpl	0x009e0800
    938c:	00070800 	andeq	r0, r7, r0, lsl #16
    9390:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    9394:	a89f1aff 	ldmge	pc, {r0, r1, r2, r3, r4, r5, r6, r7, r9, fp, ip}	; <UNPREDICTABLE>
    9398:	b208005f 	andlt	r0, r8, #95	; 0x5f
    939c:	0708005f 	smlsdeq	r8, pc, r0, r0	; <UNPREDICTABLE>
    93a0:	0a007300 	beq	25fa8 <__Stack_Size+0x257a8>
    93a4:	9f1affff 	svcls	0x001affff
    93a8:	08005ffe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    93ac:	0800600a 	stmdaeq	r0, {r1, r3, sp, lr}
    93b0:	9f300002 	svcls	0x00300002
    93b4:	0800600a 	stmdaeq	r0, {r1, r3, sp, lr}
    93b8:	0800604a 	stmdaeq	r0, {r1, r3, r6, sp, lr}
    93bc:	00750007 	rsbseq	r0, r5, r7
    93c0:	1affff0a 	bne	8ff0 <__Stack_Size+0x87f0>
    93c4:	00604a9f 	mlseq	r0, pc, sl, r4	; <UNPREDICTABLE>
    93c8:	00606c08 	rsbeq	r6, r0, r8, lsl #24
    93cc:	30000208 	andcc	r0, r0, r8, lsl #4
    93d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    93d4:	00000000 	andeq	r0, r0, r0
    93d8:	005f6000 	subseq	r6, pc, r0
    93dc:	005f6408 	subseq	r6, pc, r8, lsl #8
    93e0:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
    93e4:	20000a00 	andcs	r0, r0, r0, lsl #20
    93e8:	5f649f27 	svcpl	0x00649f27
    93ec:	5f680800 	svcpl	0x00680800
    93f0:	000b0800 	andeq	r0, fp, r0, lsl #16
    93f4:	000a0072 	andeq	r0, sl, r2, ror r0
    93f8:	000a2720 	andeq	r2, sl, r0, lsr #14
    93fc:	689f2720 	ldmvs	pc, {r5, r8, r9, sl, sp}	; <UNPREDICTABLE>
    9400:	7808005f 	stmdavc	r8, {r0, r1, r2, r3, r4, r6}
    9404:	0c08005f 	stceq	0, cr0, [r8], {95}	; 0x5f
    9408:	06007400 	streq	r7, [r0], -r0, lsl #8
    940c:	2720000a 	strcs	r0, [r0, -sl]!
    9410:	2720000a 	strcs	r0, [r0, -sl]!
    9414:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9418:	00000000 	andeq	r0, r0, r0
    941c:	005f7200 	subseq	r7, pc, r0, lsl #4
    9420:	005f7608 	subseq	r7, pc, r8, lsl #12
    9424:	72000608 	andvc	r0, r0, #8, 12	; 0x800000
    9428:	27200800 	strcs	r0, [r0, -r0, lsl #16]!
    942c:	005f769f 			; <UNDEFINED> instruction: 0x005f769f
    9430:	005f8608 	subseq	r8, pc, r8, lsl #12
    9434:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    9438:	27200800 	strcs	r0, [r0, -r0, lsl #16]!
    943c:	9f272008 	svcls	0x00272008
    9440:	08005f86 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, fp, ip, lr}
    9444:	08005f8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sl, fp, ip, lr}
    9448:	0074000a 	rsbseq	r0, r4, sl
    944c:	27200806 	strcs	r0, [r0, -r6, lsl #16]!
    9450:	9f272008 	svcls	0x00272008
    9454:	08005f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip, lr}
    9458:	08005f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, ip, lr}
    945c:	00720009 	rsbseq	r0, r2, r9
    9460:	08272008 	stmdaeq	r7!, {r3, sp}
    9464:	969f2720 	ldrls	r2, [pc], r0, lsr #14
    9468:	a208005f 	andge	r0, r8, #95	; 0x5f
    946c:	0a08005f 	beq	2095f0 <__Stack_Size+0x208df0>
    9470:	06007400 	streq	r7, [r0], -r0, lsl #8
    9474:	08272008 	stmdaeq	r7!, {r3, sp}
    9478:	a89f2720 	ldmge	pc, {r5, r8, r9, sl, sp}	; <UNPREDICTABLE>
    947c:	b608005f 			; <UNDEFINED> instruction: 0xb608005f
    9480:	0a08005f 	beq	209604 <__Stack_Size+0x208e04>
    9484:	06007400 	streq	r7, [r0], -r0, lsl #8
    9488:	08272008 	stmdaeq	r7!, {r3, sp}
    948c:	009f2720 	addseq	r2, pc, r0, lsr #14
    9490:	00000000 	andeq	r0, r0, r0
    9494:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    9498:	de08005f 	mcrle	0, 0, r0, cr8, cr15, {2}
    949c:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    94a0:	5fde5300 	svcpl	0x00de5300
    94a4:	5ffc0800 	svcpl	0x00fc0800
    94a8:	00040800 	andeq	r0, r4, r0, lsl #16
    94ac:	9f060072 	svcls	0x00060072
	...
    94b8:	08005fea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    94bc:	08005ffe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    94c0:	00530001 	subseq	r0, r3, r1
	...
    94d0:	02000000 	andeq	r0, r0, #0
    94d4:	009f3000 	addseq	r3, pc, r0
    94d8:	00000000 	andeq	r0, r0, r0
    94dc:	07000000 	streq	r0, [r0, -r0]
    94e0:	0a007100 	beq	258e8 <__Stack_Size+0x250e8>
    94e4:	9f1affff 	svcls	0x001affff
	...
    94f0:	00710007 	rsbseq	r0, r1, r7
    94f4:	1affff0a 	bne	9124 <__Stack_Size+0x8924>
    94f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    94fc:	00000000 	andeq	r0, r0, r0
    9500:	30000200 	andcc	r0, r0, r0, lsl #4
    9504:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9508:	00000000 	andeq	r0, r0, r0
    950c:	0060a400 	rsbeq	sl, r0, r0, lsl #8
    9510:	0060b908 	rsbeq	fp, r0, r8, lsl #18
    9514:	50000108 	andpl	r0, r0, r8, lsl #2
    9518:	080060b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, sp, lr}
    951c:	080060c8 	stmdaeq	r0, {r3, r6, r7, sp, lr}
    9520:	01f30004 	mvnseq	r0, r4
    9524:	00009f50 	andeq	r9, r0, r0, asr pc
    9528:	00000000 	andeq	r0, r0, r0
    952c:	60c80000 	sbcvs	r0, r8, r0
    9530:	60dd0800 	sbcsvs	r0, sp, r0, lsl #16
    9534:	00010800 	andeq	r0, r1, r0, lsl #16
    9538:	0060dd50 	rsbeq	sp, r0, r0, asr sp
    953c:	0060ec08 	rsbeq	lr, r0, r8, lsl #24
    9540:	f3000408 	vshl.u8	d0, d8, d0
    9544:	009f5001 	addseq	r5, pc, r1
    9548:	00000000 	andeq	r0, r0, r0
    954c:	ec000000 	stc	0, cr0, [r0], {-0}
    9550:	00080060 	andeq	r0, r8, r0, rrx
    9554:	01080061 	tsteq	r8, r1, rrx
    9558:	61005000 	mrsvs	r5, (UNDEF: 0)
    955c:	617c0800 	cmnvs	ip, r0, lsl #16
    9560:	00040800 	andeq	r0, r4, r0, lsl #16
    9564:	9f5001f3 	svcls	0x005001f3
	...
    9570:	0800610e 	stmdaeq	r0, {r1, r2, r3, r8, sp, lr}
    9574:	08006110 	stmdaeq	r0, {r4, r8, sp, lr}
    9578:	09710002 	ldmdbeq	r1!, {r1}^
	...
    9584:	08006136 	stmdaeq	r0, {r1, r2, r4, r5, r8, sp, lr}
    9588:	08006138 	stmdaeq	r0, {r3, r4, r5, r8, sp, lr}
    958c:	38520001 	ldmdacc	r2, {r0}^
    9590:	52080061 	andpl	r0, r8, #97	; 0x61
    9594:	05080061 	streq	r0, [r8, #-97]	; 0x61
    9598:	3f007100 	svccc	0x00007100
    959c:	61569f1a 	cmpvs	r6, sl, lsl pc
    95a0:	61600800 	cmnvs	r0, r0, lsl #16
    95a4:	00050800 	andeq	r0, r5, r0, lsl #16
    95a8:	1a3f0071 	bne	fc9774 <__Stack_Size+0xfc8f74>
    95ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    95b0:	00000000 	andeq	r0, r0, r0
    95b4:	00618400 	rsbeq	r8, r1, r0, lsl #8
    95b8:	00620a08 	rsbeq	r0, r2, r8, lsl #20
    95bc:	74000308 	strvc	r0, [r0], #-776	; 0x308
    95c0:	00009f10 	andeq	r9, r0, r0, lsl pc
    95c4:	00000000 	andeq	r0, r0, r0
    95c8:	61880000 	orrvs	r0, r8, r0
    95cc:	61b20800 			; <UNDEFINED> instruction: 0x61b20800
    95d0:	00010800 	andeq	r0, r1, r0, lsl #16
    95d4:	0061b253 	rsbeq	fp, r1, r3, asr r2
    95d8:	0061b808 	rsbeq	fp, r1, r8, lsl #16
    95dc:	74000908 	strvc	r0, [r0], #-2312	; 0x908
    95e0:	0a029410 	beq	ae628 <__Stack_Size+0xade28>
    95e4:	9f1affff 	svcls	0x001affff
    95e8:	080061b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sp, lr}
    95ec:	080061cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sp, lr}
    95f0:	cc530001 	mrrcgt	0, 0, r0, r3, cr1
    95f4:	cd080061 	stcgt	0, cr0, [r8, #-388]	; 0xfffffe7c
    95f8:	09080061 	stmdbeq	r8, {r0, r5, r6}
    95fc:	94107400 	ldrls	r7, [r0], #-1024	; 0x400
    9600:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    9604:	00009f1a 	andeq	r9, r0, sl, lsl pc
    9608:	00000000 	andeq	r0, r0, r0
    960c:	618a0000 	orrvs	r0, sl, r0
    9610:	61ac0800 			; <UNDEFINED> instruction: 0x61ac0800
    9614:	00060800 	andeq	r0, r6, r0, lsl #16
    9618:	ff080076 			; <UNDEFINED> instruction: 0xff080076
    961c:	61ac9f1a 			; <UNDEFINED> instruction: 0x61ac9f1a
    9620:	61b00800 	lslsvs	r0, r0, #16
    9624:	00020800 	andeq	r0, r2, r0, lsl #16
    9628:	61b09f34 	lsrsvs	r9, r4, pc
    962c:	61b80800 			; <UNDEFINED> instruction: 0x61b80800
    9630:	00020800 	andeq	r0, r2, r0, lsl #16
    9634:	61b89f37 			; <UNDEFINED> instruction: 0x61b89f37
    9638:	61c20800 	bicvs	r0, r2, r0, lsl #16
    963c:	00060800 	andeq	r0, r6, r0, lsl #16
    9640:	ff080076 			; <UNDEFINED> instruction: 0xff080076
    9644:	61c29f1a 	bicvs	r9, r2, sl, lsl pc
    9648:	620a0800 	andvs	r0, sl, #0, 16
    964c:	00010800 	andeq	r0, r1, r0, lsl #16
    9650:	00000056 	andeq	r0, r0, r6, asr r0
    9654:	00000000 	andeq	r0, r0, r0
    9658:	0061d000 	rsbeq	sp, r1, r0
    965c:	0061d208 	rsbeq	sp, r1, r8, lsl #4
    9660:	50000108 	andpl	r0, r0, r8, lsl #2
    9664:	080061d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, sp, lr}
    9668:	08006200 	stmdaeq	r0, {r9, sp, lr}
    966c:	00590001 	subseq	r0, r9, r1
    9670:	00000000 	andeq	r0, r0, r0
    9674:	ba000000 	blt	967c <__Stack_Size+0x8e7c>
    9678:	c2080061 	andgt	r0, r8, #97	; 0x61
    967c:	01080061 	tsteq	r8, r1, rrx
    9680:	61c25500 	bicvs	r5, r2, r0, lsl #10
    9684:	61c80800 	bicvs	r0, r8, r0, lsl #16
    9688:	00160800 	andseq	r0, r6, r0, lsl #16
    968c:	40120075 	andsmi	r0, r2, r5, ror r0
    9690:	7322244b 	teqvc	r2, #1258291200	; 0x4b000000
    9694:	40141600 	andsmi	r1, r4, r0, lsl #12
    9698:	2d22244b 	cfstrscs	mvf2, [r2, #-300]!	; 0xfffffed4
    969c:	16000128 	strne	r0, [r0], -r8, lsr #2
    96a0:	61c89f13 	bicvs	r9, r8, r3, lsl pc
    96a4:	61f60800 	mvnsvs	r0, r0, lsl #16
    96a8:	00010800 	andeq	r0, r1, r0, lsl #16
    96ac:	00000055 	andeq	r0, r0, r5, asr r0
    96b0:	00000000 	andeq	r0, r0, r0
    96b4:	00626e00 	rsbeq	r6, r2, r0, lsl #28
    96b8:	00628508 	rsbeq	r8, r2, r8, lsl #10
    96bc:	50000108 	andpl	r0, r0, r8, lsl #2
    96c0:	08006294 	stmdaeq	r0, {r2, r4, r7, r9, sp, lr}
    96c4:	08006296 	stmdaeq	r0, {r1, r2, r4, r7, r9, sp, lr}
    96c8:	00500001 	subseq	r0, r0, r1
    96cc:	00000000 	andeq	r0, r0, r0
    96d0:	ac000000 	stcge	0, cr0, [r0], {-0}
    96d4:	b0080062 	andlt	r0, r8, r2, rrx
    96d8:	06080062 	streq	r0, [r8], -r2, rrx
    96dc:	08007000 	stmdaeq	r0, {ip, sp, lr}
    96e0:	b09f1a7f 	addslt	r1, pc, pc, ror sl	; <UNPREDICTABLE>
    96e4:	d4080062 	strle	r0, [r8], #-98	; 0x62
    96e8:	01080062 	tsteq	r8, r2, rrx
    96ec:	62d45000 	sbcsvs	r5, r4, #0
    96f0:	62fa0800 	rscsvs	r0, sl, #0, 16
    96f4:	000b0800 	andeq	r0, fp, r0, lsl #16
    96f8:	01940073 	orrseq	r0, r4, r3, ror r0
    96fc:	081a7f08 	ldmdaeq	sl, {r3, r8, r9, sl, fp, ip, sp, lr}
    9700:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    9704:	00000000 	andeq	r0, r0, r0
    9708:	ec000000 	stc	0, cr0, [r0], {-0}
    970c:	19080062 	stmdbne	r8, {r1, r5, r6}
    9710:	01080063 	tsteq	r8, r3, rrx
    9714:	63245100 	teqvs	r4, #0, 2
    9718:	63360800 	teqvs	r6, #0, 16
    971c:	00010800 	andeq	r0, r1, r0, lsl #16
    9720:	00633c51 	rsbeq	r3, r3, r1, asr ip
    9724:	00633f08 	rsbeq	r3, r3, r8, lsl #30
    9728:	51000108 	tstpl	r0, r8, lsl #2
	...
    9734:	080062d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sp, lr}
    9738:	08006316 	stmdaeq	r0, {r1, r2, r4, r8, r9, sp, lr}
    973c:	24500001 	ldrbcs	r0, [r0], #-1
    9740:	39080063 	stmdbcc	r8, {r0, r1, r5, r6}
    9744:	01080063 	tsteq	r8, r3, rrx
    9748:	633c5000 	teqvs	ip, #0
    974c:	633f0800 	teqvs	pc, #0, 16
    9750:	00010800 	andeq	r0, r1, r0, lsl #16
    9754:	00000050 	andeq	r0, r0, r0, asr r0
    9758:	00000000 	andeq	r0, r0, r0
    975c:	0062ce00 	rsbeq	ip, r2, r0, lsl #28
    9760:	00630608 	rsbeq	r0, r3, r8, lsl #12
    9764:	72000608 	andvc	r0, r0, #8, 12	; 0x800000
    9768:	1aff0800 	bne	fffcb770 <BootRAM+0xef3bf11>
    976c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9770:	00000000 	andeq	r0, r0, r0
    9774:	00634c00 	rsbeq	r4, r3, r0, lsl #24
    9778:	00635008 	rsbeq	r5, r3, r8
    977c:	73000708 	movwvc	r0, #1800	; 0x708
    9780:	30000a00 	andcc	r0, r0, r0, lsl #20
    9784:	63509f27 	cmpvs	r0, #39, 30	; 0x9c
    9788:	63520800 	cmpvs	r2, #0, 16
    978c:	000b0800 	andeq	r0, fp, r0, lsl #16
    9790:	000a0073 	andeq	r0, sl, r3, ror r0
    9794:	000a2730 	andeq	r2, sl, r0, lsr r7
    9798:	009f2730 	addseq	r2, pc, r0, lsr r7	; <UNPREDICTABLE>
    979c:	00000000 	andeq	r0, r0, r0
    97a0:	80000000 	andhi	r0, r0, r0
    97a4:	ba080063 	blt	209938 <__Stack_Size+0x209138>
    97a8:	06080063 	streq	r0, [r8], -r3, rrx
    97ac:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    97b0:	e89f1aff 	ldm	pc, {r0, r1, r2, r3, r4, r5, r6, r7, r9, fp, ip}	; <UNPREDICTABLE>
    97b4:	f8080063 			; <UNDEFINED> instruction: 0xf8080063
    97b8:	06080063 	streq	r0, [r8], -r3, rrx
    97bc:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    97c0:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    97c4:	00000000 	andeq	r0, r0, r0
    97c8:	84000000 	strhi	r0, [r0], #-0
    97cc:	a4080063 	strge	r0, [r8], #-99	; 0x63
    97d0:	01080063 	tsteq	r8, r3, rrx
    97d4:	63a45400 			; <UNDEFINED> instruction: 0x63a45400
    97d8:	63ba0800 			; <UNDEFINED> instruction: 0x63ba0800
    97dc:	00070800 	andeq	r0, r7, r0, lsl #16
    97e0:	7f0b0072 	svcvc	0x000b0072
    97e4:	e89f1aff 	ldm	pc, {r0, r1, r2, r3, r4, r5, r6, r7, r9, fp, ip}	; <UNPREDICTABLE>
    97e8:	f8080063 			; <UNDEFINED> instruction: 0xf8080063
    97ec:	07080063 	streq	r0, [r8, -r3, rrx]
    97f0:	0b007200 	bleq	25ff8 <__Stack_Size+0x257f8>
    97f4:	9f1aff7f 	svcls	0x001aff7f
	...
    9800:	0800639a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sp, lr}
    9804:	080063e3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r8, r9, sp, lr}
    9808:	e8500001 	ldmda	r0, {r0}^
    980c:	ea080063 	b	2099a0 <__Stack_Size+0x2091a0>
    9810:	01080063 	tsteq	r8, r3, rrx
    9814:	00005000 	andeq	r5, r0, r0
    9818:	00000000 	andeq	r0, r0, r0
    981c:	63c60000 	bicvs	r0, r6, #0
    9820:	63ca0800 	bicvs	r0, sl, #0, 16
    9824:	00050800 	andeq	r0, r5, r0, lsl #16
    9828:	27400072 	smlsldxcs	r0, r0, r2, r0	; <UNPREDICTABLE>
    982c:	0063ca9f 	mlseq	r3, pc, sl, ip	; <UNPREDICTABLE>
    9830:	0063cc08 	rsbeq	ip, r3, r8, lsl #24
    9834:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
    9838:	40274000 	eormi	r4, r7, r0
    983c:	00009f27 	andeq	r9, r0, r7, lsr #30
    9840:	00000000 	andeq	r0, r0, r0
    9844:	63d60000 	bicsvs	r0, r6, #0
    9848:	63da0800 	bicsvs	r0, sl, #0, 16
    984c:	00070800 	andeq	r0, r7, r0, lsl #16
    9850:	000a0072 	andeq	r0, sl, r2, ror r0
    9854:	009f2710 	addseq	r2, pc, r0, lsl r7	; <UNPREDICTABLE>
    9858:	00000000 	andeq	r0, r0, r0
    985c:	1c000000 	stcne	0, cr0, [r0], {-0}
    9860:	2e080064 	cdpcs	0, 0, cr0, cr8, cr4, {3}
    9864:	01080064 	tsteq	r8, r4, rrx
    9868:	642e5000 	strtvs	r5, [lr], #-0
    986c:	64380800 	ldrtvs	r0, [r8], #-2048	; 0x800
    9870:	00040800 	andeq	r0, r4, r0, lsl #16
    9874:	9f5001f3 	svcls	0x005001f3
	...
    9880:	0800641c 	stmdaeq	r0, {r2, r3, r4, sl, sp, lr}
    9884:	08006426 	stmdaeq	r0, {r1, r2, r5, sl, sp, lr}
    9888:	26510001 	ldrbcs	r0, [r1], -r1
    988c:	2c080064 	stccs	0, cr0, [r8], {100}	; 0x64
    9890:	04080064 	streq	r0, [r8], #-100	; 0x64
    9894:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    9898:	00642c9f 	mlseq	r4, pc, ip, r2	; <UNPREDICTABLE>
    989c:	00643808 	rsbeq	r3, r4, r8, lsl #16
    98a0:	51000108 	tstpl	r0, r8, lsl #2
	...
    98ac:	08006422 	stmdaeq	r0, {r1, r5, sl, sp, lr}
    98b0:	08006428 	stmdaeq	r0, {r3, r5, sl, sp, lr}
    98b4:	28530001 	ldmdacs	r3, {r0}^
    98b8:	2c080064 	stccs	0, cr0, [r8], {100}	; 0x64
    98bc:	09080064 	stmdbeq	r8, {r2, r5, r6}
    98c0:	94127200 	ldrls	r7, [r2], #-512	; 0x200
    98c4:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    98c8:	642c9f1a 	strtvs	r9, [ip], #-3866	; 0xf1a
    98cc:	64380800 	ldrtvs	r0, [r8], #-2048	; 0x800
    98d0:	00010800 	andeq	r0, r1, r0, lsl #16
    98d4:	00000053 	andeq	r0, r0, r3, asr r0
    98d8:	00000000 	andeq	r0, r0, r0
    98dc:	00648a00 	rsbeq	r8, r4, r0, lsl #20
    98e0:	00649408 	rsbeq	r9, r4, r8, lsl #8
    98e4:	72001108 	andvc	r1, r0, #8, 2
    98e8:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    98ec:	2324311a 	teqcs	r4, #-2147483642	; 0x80000006
    98f0:	8081c080 	addhi	ip, r1, r0, lsl #1
    98f4:	04939f04 	ldreq	r9, [r3], #3844	; 0xf04
	...
    9900:	080064be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sl, sp, lr}
    9904:	080064ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, sp, lr}
    9908:	9f320002 	svcls	0x00320002
    990c:	080064ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, sp, lr}
    9910:	080064d0 	stmdaeq	r0, {r4, r6, r7, sl, sp, lr}
    9914:	d0500001 	subsle	r0, r0, r1
    9918:	dc080064 	stcle	0, cr0, [r8], {100}	; 0x64
    991c:	02080064 	andeq	r0, r8, #100	; 0x64
    9920:	e09f3200 	adds	r3, pc, r0, lsl #4
    9924:	fe080064 	cdp2	0, 0, cr0, cr8, cr4, {3}
    9928:	02080064 	andeq	r0, r8, #100	; 0x64
    992c:	089f3200 	ldmeq	pc, {r9, ip, sp}	; <UNPREDICTABLE>
    9930:	0e080065 	cdpeq	0, 0, cr0, cr8, cr5, {3}
    9934:	01080065 	tsteq	r8, r5, rrx
    9938:	650e5000 	strvs	r5, [lr, #-0]
    993c:	651e0800 	ldrvs	r0, [lr, #-2048]	; 0x800
    9940:	00020800 	andeq	r0, r2, r0, lsl #16
    9944:	651e9f32 	ldrvs	r9, [lr, #-3890]	; 0xf32
    9948:	65200800 	strvs	r0, [r0, #-2048]!	; 0x800
    994c:	00010800 	andeq	r0, r1, r0, lsl #16
    9950:	00652050 	rsbeq	r2, r5, r0, asr r0
    9954:	00653a08 	rsbeq	r3, r5, r8, lsl #20
    9958:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    995c:	00653a9f 	mlseq	r5, pc, sl, r3	; <UNPREDICTABLE>
    9960:	00653c08 	rsbeq	r3, r5, r8, lsl #24
    9964:	50000108 	andpl	r0, r0, r8, lsl #2
    9968:	0800653c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, sp, lr}
    996c:	08006548 	stmdaeq	r0, {r3, r6, r8, sl, sp, lr}
    9970:	9f320002 	svcls	0x00320002
    9974:	08006548 	stmdaeq	r0, {r3, r6, r8, sl, sp, lr}
    9978:	0800654a 	stmdaeq	r0, {r1, r3, r6, r8, sl, sp, lr}
    997c:	4a500001 	bmi	1409988 <__Stack_Size+0x1409188>
    9980:	5a080065 	bpl	209b1c <__Stack_Size+0x20931c>
    9984:	02080065 	andeq	r0, r8, #101	; 0x65
    9988:	5a9f3200 	bpl	fe7d6190 <BootRAM+0xd746931>
    998c:	62080065 	andvs	r0, r8, #101	; 0x65
    9990:	01080065 	tsteq	r8, r5, rrx
    9994:	657a5000 	ldrbvs	r5, [sl, #-0]!
    9998:	657c0800 	ldrbvs	r0, [ip, #-2048]!	; 0x800
    999c:	00010800 	andeq	r0, r1, r0, lsl #16
    99a0:	00000050 	andeq	r0, r0, r0, asr r0
    99a4:	00000000 	andeq	r0, r0, r0
    99a8:	0064be00 	rsbeq	fp, r4, r0, lsl #28
    99ac:	00658208 	rsbeq	r8, r5, r8, lsl #4
    99b0:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    99bc:	08006562 	stmdaeq	r0, {r1, r5, r6, r8, sl, sp, lr}
    99c0:	0800657a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
    99c4:	9f360002 	svcls	0x00360002
    99c8:	0800657c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, sp, lr}
    99cc:	08006582 	stmdaeq	r0, {r1, r7, r8, sl, sp, lr}
    99d0:	00530001 	subseq	r0, r3, r1
    99d4:	00000000 	andeq	r0, r0, r0
    99d8:	82000000 	andhi	r0, r0, #0
    99dc:	98080065 	stmdals	r8, {r0, r2, r5, r6}
    99e0:	02080065 	andeq	r0, r8, #101	; 0x65
    99e4:	989f3000 	ldmls	pc, {ip, sp}	; <UNPREDICTABLE>
    99e8:	9a080065 	bls	209b84 <__Stack_Size+0x209384>
    99ec:	01080065 	tsteq	r8, r5, rrx
    99f0:	659a5300 	ldrvs	r5, [sl, #768]	; 0x300
    99f4:	65a20800 	strvs	r0, [r2, #2048]!	; 0x800
    99f8:	00020800 	andeq	r0, r2, r0, lsl #16
    99fc:	65a29f30 	strvs	r9, [r2, #3888]!	; 0xf30
    9a00:	65a40800 	strvs	r0, [r4, #2048]!	; 0x800
    9a04:	00010800 	andeq	r0, r1, r0, lsl #16
    9a08:	0065a453 	rsbeq	sl, r5, r3, asr r4
    9a0c:	0065ac08 	rsbeq	sl, r5, r8, lsl #24
    9a10:	30000208 	andcc	r0, r0, r8, lsl #4
    9a14:	0065ac9f 	mlseq	r5, pc, ip, sl	; <UNPREDICTABLE>
    9a18:	0065ae08 	rsbeq	sl, r5, r8, lsl #28
    9a1c:	53000108 	movwpl	r0, #264	; 0x108
    9a20:	080065ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, sl, sp, lr}
    9a24:	080065b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, sp, lr}
    9a28:	9f300002 	svcls	0x00300002
    9a2c:	080065b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, sp, lr}
    9a30:	080065b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, sp, lr}
    9a34:	b8530001 	ldmdalt	r3, {r0}^
    9a38:	74080065 	strvc	r0, [r8], #-101	; 0x65
    9a3c:	02080066 	andeq	r0, r8, #102	; 0x66
    9a40:	749f3000 	ldrvc	r3, [pc], #0	; 9a48 <__Stack_Size+0x9248>
    9a44:	81080066 	tsthi	r8, r6, rrx
    9a48:	01080066 	tsteq	r8, r6, rrx
    9a4c:	67345300 	ldrvs	r5, [r4, -r0, lsl #6]!
    9a50:	673e0800 	ldrvs	r0, [lr, -r0, lsl #16]!
    9a54:	00020800 	andeq	r0, r2, r0, lsl #16
    9a58:	673e9f30 			; <UNDEFINED> instruction: 0x673e9f30
    9a5c:	67540800 	ldrbvs	r0, [r4, -r0, lsl #16]
    9a60:	00060800 	andeq	r0, r6, r0, lsl #16
    9a64:	0060c903 	rsbeq	ip, r0, r3, lsl #18
    9a68:	00009f08 	andeq	r9, r0, r8, lsl #30
    9a6c:	00000000 	andeq	r0, r0, r0
    9a70:	66820000 	strvs	r0, [r2], r0
    9a74:	66860800 	strvs	r0, [r6], r0, lsl #16
    9a78:	00020800 	andeq	r0, r2, r0, lsl #16
    9a7c:	66929f30 			; <UNDEFINED> instruction: 0x66929f30
    9a80:	66a80800 	strtvs	r0, [r8], r0, lsl #16
    9a84:	00010800 	andeq	r0, r1, r0, lsl #16
    9a88:	0066ac50 	rsbeq	sl, r6, r0, asr ip
    9a8c:	0066b408 	rsbeq	fp, r6, r8, lsl #8
    9a90:	50000108 	andpl	r0, r0, r8, lsl #2
    9a94:	080066b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, sp, lr}
    9a98:	080066c6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, sp, lr}
    9a9c:	20500001 	subscs	r0, r0, r1
    9aa0:	2c080067 	stccs	0, cr0, [r8], {103}	; 0x67
    9aa4:	01080067 	tsteq	r8, r7, rrx
    9aa8:	00005000 	andeq	r5, r0, r0
    9aac:	00000000 	andeq	r0, r0, r0
    9ab0:	65820000 	strvs	r0, [r2]
    9ab4:	667a0800 	ldrbtvs	r0, [sl], -r0, lsl #16
    9ab8:	00010800 	andeq	r0, r1, r0, lsl #16
    9abc:	00668654 	rsbeq	r8, r6, r4, asr r6
    9ac0:	00669c08 	rsbeq	r9, r6, r8, lsl #24
    9ac4:	54000108 	strpl	r0, [r0], #-264	; 0x108
    9ac8:	08006734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, sp, lr}
    9acc:	08006754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, sp, lr}
    9ad0:	00540001 	subseq	r0, r4, r1
    9ad4:	00000000 	andeq	r0, r0, r0
    9ad8:	0a000000 	beq	9ae0 <__Stack_Size+0x92e0>
    9adc:	36080066 	strcc	r0, [r8], -r6, rrx
    9ae0:	01080066 	tsteq	r8, r6, rrx
    9ae4:	00005100 	andeq	r5, r0, r0, lsl #2
    9ae8:	00000000 	andeq	r0, r0, r0
    9aec:	660a0000 	strvs	r0, [sl], -r0
    9af0:	66360800 	ldrtvs	r0, [r6], -r0, lsl #16
    9af4:	00090800 	andeq	r0, r9, r0, lsl #16
    9af8:	70080073 	andvc	r0, r8, r3, ror r0
    9afc:	1aff081a 	bne	fffcbb6c <BootRAM+0xef3c30d>
    9b00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9b04:	00000000 	andeq	r0, r0, r0
    9b08:	00658200 	rsbeq	r8, r5, r0, lsl #4
    9b0c:	00672c08 	rsbeq	r2, r7, r8, lsl #24
    9b10:	30000208 	andcc	r0, r0, r8, lsl #4
    9b14:	0067349f 	mlseq	r7, pc, r4, r3	; <UNPREDICTABLE>
    9b18:	00675408 	rsbeq	r5, r7, r8, lsl #8
    9b1c:	30000208 	andcc	r0, r0, r8, lsl #4
    9b20:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9b24:	00000000 	andeq	r0, r0, r0
    9b28:	00662200 	rsbeq	r2, r6, r0, lsl #4
    9b2c:	00663608 	rsbeq	r3, r6, r8, lsl #12
    9b30:	52000108 	andpl	r0, r0, #8, 2
	...
    9b3c:	0800658e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sl, sp, lr}
    9b40:	08006590 	stmdaeq	r0, {r4, r7, r8, sl, sp, lr}
    9b44:	03730002 	cmneq	r3, #2
    9b48:	08006590 	stmdaeq	r0, {r4, r7, r8, sl, sp, lr}
    9b4c:	080065b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, sp, lr}
    9b50:	74520001 	ldrbvc	r0, [r2], #-1
    9b54:	76080066 	strvc	r0, [r8], -r6, rrx
    9b58:	01080066 	tsteq	r8, r6, rrx
    9b5c:	00005200 	andeq	r5, r0, r0, lsl #4
    9b60:	00000000 	andeq	r0, r0, r0
    9b64:	675c0000 	ldrbvs	r0, [ip, -r0]
    9b68:	67660800 	strbvs	r0, [r6, -r0, lsl #16]!
    9b6c:	00010800 	andeq	r0, r1, r0, lsl #16
    9b70:	00676653 	rsbeq	r6, r7, r3, asr r6
    9b74:	00677708 	rsbeq	r7, r7, r8, lsl #14
    9b78:	74000808 	strvc	r0, [r0], #-2056	; 0x808
    9b7c:	08019408 	stmdaeq	r1, {r3, sl, ip, pc}
    9b80:	e69f1aff 			; <UNDEFINED> instruction: 0xe69f1aff
    9b84:	ee080067 	cdp	0, 0, cr0, cr8, cr7, {3}
    9b88:	01080067 	tsteq	r8, r7, rrx
    9b8c:	67ee5300 	strbvs	r5, [lr, r0, lsl #6]!
    9b90:	67f30800 	ldrbvs	r0, [r3, r0, lsl #16]!
    9b94:	00080800 	andeq	r0, r8, r0, lsl #16
    9b98:	01940874 	orrseq	r0, r4, r4, ror r8
    9b9c:	9f1aff08 	svcls	0x001aff08
    9ba0:	080067f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, sp, lr}
    9ba4:	080067fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}
    9ba8:	00530001 	subseq	r0, r3, r1
    9bac:	00000000 	andeq	r0, r0, r0
    9bb0:	64000000 	strvs	r0, [r0], #-0
    9bb4:	e8080067 	stmda	r8, {r0, r1, r2, r5, r6}
    9bb8:	03080067 	movweq	r0, #32871	; 0x8067
    9bbc:	9f107400 	svcls	0x00107400
	...
    9bc8:	08006768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, sp, lr}
    9bcc:	08006777 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r8, r9, sl, sp, lr}
    9bd0:	00520001 	subseq	r0, r2, r1
    9bd4:	00000000 	andeq	r0, r0, r0
    9bd8:	7c000000 	stcvc	0, cr0, [r0], {-0}
    9bdc:	84080067 	strhi	r0, [r8], #-103	; 0x67
    9be0:	01080067 	tsteq	r8, r7, rrx
    9be4:	67845000 	strvs	r5, [r4, r0]
    9be8:	67960800 	ldrvs	r0, [r6, r0, lsl #16]
    9bec:	00010800 	andeq	r0, r1, r0, lsl #16
    9bf0:	00000057 	andeq	r0, r0, r7, asr r0
    9bf4:	00000000 	andeq	r0, r0, r0
    9bf8:	00676e00 	rsbeq	r6, r7, r0, lsl #28
    9bfc:	00677408 	rsbeq	r7, r7, r8, lsl #8
    9c00:	76001608 	strvc	r1, [r0], -r8, lsl #12
    9c04:	4b401200 	blmi	100e40c <__Stack_Size+0x100dc0c>
    9c08:	00722224 	rsbseq	r2, r2, r4, lsr #4
    9c0c:	4b401416 	blmi	100ec6c <__Stack_Size+0x100e46c>
    9c10:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    9c14:	13160001 	tstne	r6, #1
    9c18:	0067749f 	mlseq	r7, pc, r4, r7	; <UNPREDICTABLE>
    9c1c:	00679608 	rsbeq	r9, r7, r8, lsl #12
    9c20:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    9c2c:	0800681c 	stmdaeq	r0, {r2, r3, r4, fp, sp, lr}
    9c30:	08006848 	stmdaeq	r0, {r3, r6, fp, sp, lr}
    9c34:	48500001 	ldmdami	r0, {r0}^
    9c38:	54080068 	strpl	r0, [r8], #-104	; 0x68
    9c3c:	04080068 	streq	r0, [r8], #-104	; 0x68
    9c40:	5001f300 	andpl	pc, r1, r0, lsl #6
    9c44:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9c48:	00000000 	andeq	r0, r0, r0
    9c4c:	00682200 	rsbeq	r2, r8, r0, lsl #4
    9c50:	00682408 	rsbeq	r2, r8, r8, lsl #8
    9c54:	30000208 	andcc	r0, r0, r8, lsl #4
    9c58:	0068249f 	mlseq	r8, pc, r4, r2	; <UNPREDICTABLE>
    9c5c:	00684408 	rsbeq	r4, r8, r8, lsl #8
    9c60:	53000108 	movwpl	r0, #264	; 0x108
	...
    9c6c:	08006822 	stmdaeq	r0, {r1, r5, fp, sp, lr}
    9c70:	0800684c 	stmdaeq	r0, {r2, r3, r6, fp, sp, lr}
    9c74:	00540001 	subseq	r0, r4, r1
    9c78:	00000000 	andeq	r0, r0, r0
    9c7c:	5c000000 	stcpl	0, cr0, [r0], {-0}
    9c80:	67080068 	strvs	r0, [r8, -r8, rrx]
    9c84:	01080068 	tsteq	r8, r8, rrx
    9c88:	686c5200 	stmdavs	ip!, {r9, ip, lr}^
    9c8c:	686e0800 	stmdavs	lr!, {fp}^
    9c90:	00010800 	andeq	r0, r1, r0, lsl #16
    9c94:	00686e53 	rsbeq	r6, r8, r3, asr lr
    9c98:	00687408 	rsbeq	r7, r8, r8, lsl #8
    9c9c:	52000108 	andpl	r0, r0, #8, 2
    9ca0:	08006874 	stmdaeq	r0, {r2, r4, r5, r6, fp, sp, lr}
    9ca4:	08006883 	stmdaeq	r0, {r0, r1, r7, fp, sp, lr}
    9ca8:	08730008 	ldmdaeq	r3!, {r3}^
    9cac:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    9cb0:	68969f1a 	ldmvs	r6, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
    9cb4:	68a10800 	stmiavs	r1!, {fp}
    9cb8:	00010800 	andeq	r0, r1, r0, lsl #16
    9cbc:	00000053 	andeq	r0, r0, r3, asr r0
    9cc0:	00000000 	andeq	r0, r0, r0
    9cc4:	0068b000 	rsbeq	fp, r8, r0
    9cc8:	0068c808 	rsbeq	ip, r8, r8, lsl #16
    9ccc:	50000108 	andpl	r0, r0, r8, lsl #2
    9cd0:	080068c8 	stmdaeq	r0, {r3, r6, r7, fp, sp, lr}
    9cd4:	080068ca 	stmdaeq	r0, {r1, r3, r6, r7, fp, sp, lr}
    9cd8:	7e700003 	cdpvc	0, 7, cr0, cr0, cr3, {0}
    9cdc:	0068ca9f 	mlseq	r8, pc, sl, ip	; <UNPREDICTABLE>
    9ce0:	0068da08 	rsbeq	sp, r8, r8, lsl #20
    9ce4:	70000308 	andvc	r0, r0, r8, lsl #6
    9ce8:	68da9f7f 	ldmvs	sl, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}^
    9cec:	68de0800 	ldmvs	lr, {fp}^
    9cf0:	00010800 	andeq	r0, r1, r0, lsl #16
    9cf4:	0068de50 	rsbeq	sp, r8, r0, asr lr
    9cf8:	0068e008 	rsbeq	lr, r8, r8
    9cfc:	70000308 	andvc	r0, r0, r8, lsl #6
    9d00:	00009f7e 	andeq	r9, r0, lr, ror pc
    9d04:	00000000 	andeq	r0, r0, r0
    9d08:	68b00000 	ldmvs	r0!, {}	; <UNPREDICTABLE>
    9d0c:	68b60800 	ldmvs	r6!, {fp}
    9d10:	00010800 	andeq	r0, r1, r0, lsl #16
    9d14:	0068b651 	rsbeq	fp, r8, r1, asr r6
    9d18:	0068e008 	rsbeq	lr, r8, r8
    9d1c:	f3000408 	vshl.u8	d0, d8, d0
    9d20:	009f5101 	addseq	r5, pc, r1, lsl #2
    9d24:	00000000 	andeq	r0, r0, r0
    9d28:	b0000000 	andlt	r0, r0, r0
    9d2c:	b8080068 	stmdalt	r8, {r3, r5, r6}
    9d30:	01080068 	tsteq	r8, r8, rrx
    9d34:	68b85200 	ldmvs	r8!, {r9, ip, lr}
    9d38:	68e00800 	stmiavs	r0!, {fp}^
    9d3c:	00040800 	andeq	r0, r4, r0, lsl #16
    9d40:	9f5201f3 	svcls	0x005201f3
	...
    9d4c:	080068c0 	stmdaeq	r0, {r6, r7, fp, sp, lr}
    9d50:	080068c2 	stmdaeq	r0, {r1, r6, r7, fp, sp, lr}
    9d54:	c2520001 	subsgt	r0, r2, #1
    9d58:	da080068 	ble	209f00 <__Stack_Size+0x209700>
    9d5c:	0f080068 	svceq	0x00080068
    9d60:	5201f300 	andpl	pc, r1, #0, 6
    9d64:	1affff0a 	bne	9994 <__Stack_Size+0x9194>
    9d68:	26310123 	ldrtcs	r0, [r1], -r3, lsr #2
    9d6c:	9f1c0073 	svcls	0x001c0073
    9d70:	080068da 	stmdaeq	r0, {r1, r3, r4, r6, r7, fp, sp, lr}
    9d74:	080068dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, sp, lr}
    9d78:	01f30010 	mvnseq	r0, r0, lsl r0
    9d7c:	ffff0a52 			; <UNDEFINED> instruction: 0xffff0a52
    9d80:	3101231a 	tstcc	r1, sl, lsl r3
    9d84:	20007326 	andcs	r7, r0, r6, lsr #6
    9d88:	68dc9f22 	ldmvs	ip, {r1, r5, r8, r9, sl, fp, ip, pc}^
    9d8c:	68e00800 	stmiavs	r0!, {fp}^
    9d90:	000f0800 	andeq	r0, pc, r0, lsl #16
    9d94:	0a5201f3 	beq	148a568 <__Stack_Size+0x1489d68>
    9d98:	231affff 	tstcs	sl, #1020	; 0x3fc
    9d9c:	73263101 	teqvc	r6, #1073741824	; 0x40000000
    9da0:	009f1c00 	addseq	r1, pc, r0, lsl #24
    9da4:	00000000 	andeq	r0, r0, r0
    9da8:	ca000000 	bgt	9db0 <__Stack_Size+0x95b0>
    9dac:	d2080068 	andle	r0, r8, #104	; 0x68
    9db0:	08080068 	stmdaeq	r8, {r3, r5, r6}
    9db4:	947e7000 	ldrbtls	r7, [lr], #-0
    9db8:	1aff0801 	bne	fffcbdc4 <BootRAM+0xef3c565>
    9dbc:	0068d29f 	mlseq	r8, pc, r2, sp	; <UNPREDICTABLE>
    9dc0:	0068d608 	rsbeq	sp, r8, r8, lsl #12
    9dc4:	54000108 	strpl	r0, [r0], #-264	; 0x108
    9dc8:	080068d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, fp, sp, lr}
    9dcc:	080068da 	stmdaeq	r0, {r1, r3, r4, r6, r7, fp, sp, lr}
    9dd0:	7e700008 	cdpvc	0, 7, cr0, cr0, cr8, {0}
    9dd4:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    9dd8:	00009f1a 	andeq	r9, r0, sl, lsl pc
    9ddc:	00000000 	andeq	r0, r0, r0
    9de0:	68ca0000 	stmiavs	sl, {}^	; <UNPREDICTABLE>
    9de4:	68da0800 	ldmvs	sl, {fp}^
    9de8:	00120800 	andseq	r0, r2, r0, lsl #16
    9dec:	01947f70 	orrseq	r7, r4, r0, ror pc
    9df0:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    9df4:	947e7024 	ldrbtls	r7, [lr], #-36	; 0x24
    9df8:	1aff0801 	bne	fffcbe04 <BootRAM+0xef3c5a5>
    9dfc:	00009f21 	andeq	r9, r0, r1, lsr #30
    9e00:	00000000 	andeq	r0, r0, r0
    9e04:	68c00000 	stmiavs	r0, {}^	; <UNPREDICTABLE>
    9e08:	68c20800 	stmiavs	r2, {fp}^
    9e0c:	00010800 	andeq	r0, r1, r0, lsl #16
    9e10:	0068da51 	rsbeq	sp, r8, r1, asr sl
    9e14:	0068dc08 	rsbeq	sp, r8, r8, lsl #24
    9e18:	73000a08 	movwvc	r0, #2568	; 0xa08
    9e1c:	71243200 	teqvc	r4, r0, lsl #4
    9e20:	04232200 	strteq	r2, [r3], #-512	; 0x200
    9e24:	0068dc9f 	mlseq	r8, pc, ip, sp	; <UNPREDICTABLE>
    9e28:	0068de08 	rsbeq	sp, r8, r8, lsl #28
    9e2c:	73000a08 	movwvc	r0, #2568	; 0xa08
    9e30:	7124327f 	teqvc	r4, pc, ror r2
    9e34:	04232200 	strteq	r2, [r3], #-512	; 0x200
    9e38:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9e3c:	00000000 	andeq	r0, r0, r0
    9e40:	0068e000 	rsbeq	lr, r8, r0
    9e44:	0068f208 	rsbeq	pc, r8, r8, lsl #4
    9e48:	50000108 	andpl	r0, r0, r8, lsl #2
    9e4c:	080068fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, fp, sp, lr}
    9e50:	08006900 	stmdaeq	r0, {r8, fp, sp, lr}
    9e54:	0073000a 	rsbseq	r0, r3, sl
    9e58:	00702431 	rsbseq	r2, r0, r1, lsr r4
    9e5c:	9f022322 	svcls	0x00022322
    9e60:	08006900 	stmdaeq	r0, {r8, fp, sp, lr}
    9e64:	08006902 	stmdaeq	r0, {r1, r8, fp, sp, lr}
    9e68:	7f73000a 	svcvc	0x0073000a
    9e6c:	00702431 	rsbseq	r2, r0, r1, lsr r4
    9e70:	9f022322 	svcls	0x00022322
	...
    9e7c:	080068e0 	stmdaeq	r0, {r5, r6, r7, fp, sp, lr}
    9e80:	080068e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, fp, sp, lr}
    9e84:	e6510001 	ldrb	r0, [r1], -r1
    9e88:	04080068 	streq	r0, [r8], #-104	; 0x68
    9e8c:	04080069 	streq	r0, [r8], #-105	; 0x69
    9e90:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    9e94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9e98:	00000000 	andeq	r0, r0, r0
    9e9c:	0068e000 	rsbeq	lr, r8, r0
    9ea0:	0068e808 	rsbeq	lr, r8, r8, lsl #16
    9ea4:	52000108 	andpl	r0, r0, #8, 2
    9ea8:	080068e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, sp, lr}
    9eac:	08006904 	stmdaeq	r0, {r2, r8, fp, sp, lr}
    9eb0:	01f30004 	mvnseq	r0, r4
    9eb4:	00009f52 	andeq	r9, r0, r2, asr pc
    9eb8:	00000000 	andeq	r0, r0, r0
    9ebc:	68f00000 	ldmvs	r0!, {}^	; <UNPREDICTABLE>
    9ec0:	68f20800 	ldmvs	r2!, {fp}^
    9ec4:	00010800 	andeq	r0, r1, r0, lsl #16
    9ec8:	0068f252 	rsbeq	pc, r8, r2, asr r2	; <UNPREDICTABLE>
    9ecc:	0068fe08 	rsbeq	pc, r8, r8, lsl #28
    9ed0:	f3000f08 	vpmax.f32	d0, d0, d8
    9ed4:	ff0a5201 			; <UNDEFINED> instruction: 0xff0a5201
    9ed8:	01231aff 	strdeq	r1, [r3, -pc]!
    9edc:	00732631 	rsbseq	r2, r3, r1, lsr r6
    9ee0:	68fe9f1c 	ldmvs	lr!, {r2, r3, r4, r8, r9, sl, fp, ip, pc}^
    9ee4:	69000800 	stmdbvs	r0, {fp}
    9ee8:	00100800 	andseq	r0, r0, r0, lsl #16
    9eec:	0a5201f3 	beq	148a6c0 <__Stack_Size+0x1489ec0>
    9ef0:	231affff 	tstcs	sl, #1020	; 0x3fc
    9ef4:	73263101 	teqvc	r6, #1073741824	; 0x40000000
    9ef8:	9f222000 	svcls	0x00222000
    9efc:	08006900 	stmdaeq	r0, {r8, fp, sp, lr}
    9f00:	08006904 	stmdaeq	r0, {r2, r8, fp, sp, lr}
    9f04:	01f3000f 	mvnseq	r0, pc
    9f08:	ffff0a52 			; <UNDEFINED> instruction: 0xffff0a52
    9f0c:	3101231a 	tstcc	r1, sl, lsl r3
    9f10:	1c007326 	stcne	3, cr7, [r0], {38}	; 0x26
    9f14:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9f18:	00000000 	andeq	r0, r0, r0
    9f1c:	0068f000 	rsbeq	pc, r8, r0
    9f20:	0068f208 	rsbeq	pc, r8, r8, lsl #4
    9f24:	51000108 	tstpl	r0, r8, lsl #2
    9f28:	080068f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, fp, sp, lr}
    9f2c:	08006900 	stmdaeq	r0, {r8, fp, sp, lr}
    9f30:	0073000a 	rsbseq	r0, r3, sl
    9f34:	00712432 	rsbseq	r2, r1, r2, lsr r4
    9f38:	9f042322 	svcls	0x00042322
    9f3c:	08006900 	stmdaeq	r0, {r8, fp, sp, lr}
    9f40:	08006902 	stmdaeq	r0, {r1, r8, fp, sp, lr}
    9f44:	7f73000a 	svcvc	0x0073000a
    9f48:	00712432 	rsbseq	r2, r1, r2, lsr r4
    9f4c:	9f042322 	svcls	0x00042322
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00000000 	andeq	r0, r0, r0
       8:	08000b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp}
       c:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
      14:	08000b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp}
	...
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	08000c20 	stmdaeq	r0, {r5, sl, fp}
      24:	08000c22 	stmdaeq	r0, {r1, r5, sl, fp}
      28:	08000c24 	stmdaeq	r0, {r2, r5, sl, fp}
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	08000c34 	stmdaeq	r0, {r2, r4, r5, sl, fp}
	...
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      38:	08000d88 	stmdaeq	r0, {r3, r7, r8, sl, fp}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	08000d8a 	stmdaeq	r0, {r1, r3, r7, r8, sl, fp}

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	08000d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp}
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	08000db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp}
	...

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	08000dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp}
      54:	08000dc2 	stmdaeq	r0, {r1, r6, r7, r8, sl, fp}
      58:	08000dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp}
      5c:	08000dc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sl, fp}
      60:	08000dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp}
      64:	08000ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp}
	...
      70:	08000e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp}
      74:	08000e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp}
      78:	08000e7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, fp}
      7c:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
	...
      88:	08000eea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, fp}
      8c:	08000ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp}
      90:	08000efa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp}
      94:	08000efe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, fp}
	...
      a0:	08000f06 	stmdaeq	r0, {r1, r2, r8, r9, sl, fp}
      a4:	08000f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp}
	f25519_select(x, a, b, (a[0] ^ parity) & 1);

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
	f25519_normalize(a);
	f25519_normalize(c);
      a8:	08000f16 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl, fp}

	return f25519_eq(a, c);
      ac:	08000f1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, fp}
	...
	uint8_t ok;

	mx2ey(ey, mx);
	ok = ey2ex(ex, ey, parity);

	f25519_normalize(ex);
      b8:	08000ff0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
	f25519_normalize(ey);
      bc:	08000ff6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp}
      c0:	08000ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp}

	return ok;
}
      c4:	08001000 	stmdaeq	r0, {ip}
      c8:	08001004 	stmdaeq	r0, {r2, ip}
      cc:	08001008 	stmdaeq	r0, {r3, ip}
	...
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
      d8:	08000b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp}
		minusp[i] = c;
      dc:	08000b9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, fp}
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
      e0:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
      e4:	08000b9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp}

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
      e8:	08000ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp}
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
      ec:	08000ba2 	stmdaeq	r0, {r1, r5, r7, r8, r9, fp}
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
      f0:	08000ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp}
      f4:	08000bae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, fp}
      f8:	08000bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp}
      fc:	08000bb2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, fp}
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     100:	08000bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp}

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
     104:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
     108:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     10c:	08000bce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, fp}
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
     110:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
     114:	08000bd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, fp}
     118:	08000bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp}
     11c:	08000bd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, fp}
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
     120:	08000bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp}
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
     124:	08000bda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, fp}
     128:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
		fprime_copy(plusa, r);
		fprime_add(plusa, a, modulus);

		fprime_select(r, r, plusa, bit);
	}
}
     12c:	08000bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp}

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
     130:	08000be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp}
	i <<= 3;

	while (x) {
     134:	08000be2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, fp}
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
     138:	08000be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp}
     13c:	08000bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp}
	f25519_mul__distinct(x3, a, a);

	f25519_mul_c(a, x1z1, 486662);
	f25519_add(a, x1sq, a);
	f25519_add(a, z1sq, a);
	f25519_mul__distinct(x1sq, x1z1, a);
     140:	08000bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp}
	f25519_mul_c(z3, x1sq, 4);
     144:	08000c98 	stmdaeq	r0, {r3, r4, r7, sl, fp}
     148:	08000c98 	stmdaeq	r0, {r3, r4, r7, sl, fp}
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	08000d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp}
     150:	08000d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp}
     154:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
	f25519_sub(b, x3, z3); /* D */
     158:	08000d18 	stmdaeq	r0, {r3, r4, r8, sl, fp}
     15c:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
	f25519_mul__distinct(da, a, b);
     160:	08000d24 	stmdaeq	r0, {r2, r5, r8, sl, fp}
     164:	08000d44 	stmdaeq	r0, {r2, r6, r8, sl, fp}
     168:	08000d44 	stmdaeq	r0, {r2, r6, r8, sl, fp}

	f25519_sub(b, x2, z2);
     16c:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
     170:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
	f25519_add(a, x3, z3); /* C */
     174:	08000d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp}
     178:	08000d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp}
     17c:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
	f25519_mul__distinct(cb, a, b);
     180:	08000e04 	stmdaeq	r0, {r2, r9, sl, fp}
     184:	08000e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp}

	f25519_add(a, da, cb);
     188:	08000e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp}
     18c:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
     190:	00000001 	andeq	r0, r0, r1
	f25519_mul__distinct(b, a, a);
     194:	00000001 	andeq	r0, r0, r1
     198:	00000001 	andeq	r0, r0, r1
	f25519_mul__distinct(x5, z1, b);
     19c:	00000001 	andeq	r0, r0, r1
     1a0:	00000001 	andeq	r0, r0, r1
     1a4:	00000001 	andeq	r0, r0, r1

	f25519_sub(a, da, cb);
     1a8:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
     1ac:	08000f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp}
	f25519_mul__distinct(b, a, a);
     1b0:	00000001 	andeq	r0, r0, r1
     1b4:	00000001 	andeq	r0, r0, r1
     1b8:	00000001 	andeq	r0, r0, r1

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	00000001 	andeq	r0, r0, r1
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	08000f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp}
     1c4:	08000f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp}

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	08000f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp}
     1cc:	08000fa6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, fp}
     1d0:	08000fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp}
     1d4:	0800108c 	stmdaeq	r0, {r2, r3, r7, ip}
		f25519_select(zm1, zm1, zm, bit);
     1d8:	00000001 	andeq	r0, r0, r1
     1dc:	00000001 	andeq	r0, r0, r1
	...
		f25519_select(xm, xm, xms, bit);
     1e8:	0800108c 	stmdaeq	r0, {r2, r3, r7, ip}
     1ec:	080010b4 	stmdaeq	r0, {r2, r4, r5, r7, ip}
		f25519_select(zm, zm, zms, bit);
     1f0:	080010b4 	stmdaeq	r0, {r2, r4, r5, r7, ip}
     1f4:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
	...
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     200:	0800121a 	stmdaeq	r0, {r1, r3, r4, r9, ip}
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	08001220 	stmdaeq	r0, {r5, r9, ip}
     208:	08001226 	stmdaeq	r0, {r1, r2, r5, r9, ip}
	f25519_mul__distinct(result, zm1, xm);
     20c:	08001238 	stmdaeq	r0, {r3, r4, r5, r9, ip}
	...
	f25519_normalize(result);
     218:	08001252 	stmdaeq	r0, {r1, r4, r6, r9, ip}
}
     21c:	08001256 	stmdaeq	r0, {r1, r2, r4, r6, r9, ip}
     220:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
     224:	08001272 	stmdaeq	r0, {r1, r4, r5, r6, r9, ip}
	...
     230:	08001262 	stmdaeq	r0, {r1, r5, r6, r9, ip}
     234:	08001264 	stmdaeq	r0, {r2, r5, r6, r9, ip}
     238:	08001272 	stmdaeq	r0, {r1, r4, r5, r6, r9, ip}
     23c:	08001274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip}
	...
     248:	08001284 	stmdaeq	r0, {r2, r7, r9, ip}
     24c:	08001288 	stmdaeq	r0, {r3, r7, r9, ip}
     250:	0800128a 	stmdaeq	r0, {r1, r3, r7, r9, ip}
     254:	080012ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, ip}
	...
     260:	080015d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, ip}
     264:	080015d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, ip}
     268:	080015da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, ip}
     26c:	080015dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, ip}
	...
     278:	08001602 	stmdaeq	r0, {r1, r9, sl, ip}
     27c:	08001628 	stmdaeq	r0, {r3, r5, r9, sl, ip}
     280:	0800162a 	stmdaeq	r0, {r1, r3, r5, r9, sl, ip}
     284:	08001632 	stmdaeq	r0, {r1, r4, r5, r9, sl, ip}
     288:	08001634 	stmdaeq	r0, {r2, r4, r5, r9, sl, ip}
     28c:	0800163c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip}
	...
     298:	08001632 	stmdaeq	r0, {r1, r4, r5, r9, sl, ip}
     29c:	08001634 	stmdaeq	r0, {r2, r4, r5, r9, sl, ip}
     2a0:	08001648 	stmdaeq	r0, {r3, r6, r9, sl, ip}
     2a4:	0800167c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip}
	...
     2b0:	00000001 	andeq	r0, r0, r1
     2b4:	00000001 	andeq	r0, r0, r1
     2b8:	00000001 	andeq	r0, r0, r1
     2bc:	00000001 	andeq	r0, r0, r1
	...
     2c8:	00000001 	andeq	r0, r0, r1
     2cc:	00000001 	andeq	r0, r0, r1
     2d0:	00000001 	andeq	r0, r0, r1
     2d4:	00000001 	andeq	r0, r0, r1
     2d8:	00000001 	andeq	r0, r0, r1
     2dc:	00000001 	andeq	r0, r0, r1
	...
     2e8:	080011ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip}
     2ec:	08001202 	stmdaeq	r0, {r1, r9, ip}
     2f0:	08001204 	stmdaeq	r0, {r2, r9, ip}
     2f4:	08001216 	stmdaeq	r0, {r1, r2, r4, r9, ip}
     2f8:	08001218 	stmdaeq	r0, {r3, r4, r9, ip}
     2fc:	08001278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip}
     300:	00000001 	andeq	r0, r0, r1
     304:	00000001 	andeq	r0, r0, r1
     308:	00000001 	andeq	r0, r0, r1
     30c:	00000001 	andeq	r0, r0, r1
     310:	00000001 	andeq	r0, r0, r1
     314:	00000001 	andeq	r0, r0, r1
     318:	08001278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip}
     31c:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
     320:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
     324:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
     328:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
     32c:	08001394 	stmdaeq	r0, {r2, r4, r7, r8, r9, ip}
     330:	08001394 	stmdaeq	r0, {r2, r4, r7, r8, r9, ip}
     334:	08001400 	stmdaeq	r0, {sl, ip}
     338:	08001400 	stmdaeq	r0, {sl, ip}
     33c:	08001414 	stmdaeq	r0, {r2, r4, sl, ip}
     340:	08001414 	stmdaeq	r0, {r2, r4, sl, ip}
     344:	08001434 	stmdaeq	r0, {r2, r4, r5, sl, ip}
     348:	08001434 	stmdaeq	r0, {r2, r4, r5, sl, ip}
     34c:	0800145c 	stmdaeq	r0, {r2, r3, r4, r6, sl, ip}
     350:	0800145c 	stmdaeq	r0, {r2, r3, r4, r6, sl, ip}
     354:	080015d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, ip}
     358:	00000001 	andeq	r0, r0, r1
     35c:	00000001 	andeq	r0, r0, r1
     360:	080015d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, ip}
     364:	0800167c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip}
     368:	00000001 	andeq	r0, r0, r1
     36c:	00000001 	andeq	r0, r0, r1
     370:	00000001 	andeq	r0, r0, r1
     374:	00000001 	andeq	r0, r0, r1
     378:	0800167c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip}
     37c:	080016ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, ip}
     380:	080016ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, ip}
     384:	08001714 	stmdaeq	r0, {r2, r4, r8, r9, sl, ip}
     388:	08001714 	stmdaeq	r0, {r2, r4, r8, r9, sl, ip}
     38c:	08001728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip}
     390:	08001728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip}
     394:	08001768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip}
     398:	00000001 	andeq	r0, r0, r1
     39c:	00000001 	andeq	r0, r0, r1
     3a0:	08001768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip}
     3a4:	080017c0 	stmdaeq	r0, {r6, r7, r8, r9, sl, ip}
     3a8:	080017c0 	stmdaeq	r0, {r6, r7, r8, r9, sl, ip}
     3ac:	080017cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, ip}
     3b0:	080017cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, ip}
     3b4:	080017e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, ip}
     3b8:	080017e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, ip}
     3bc:	080017f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, ip}
     3c0:	080017f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, ip}
     3c4:	08001808 	stmdaeq	r0, {r3, fp, ip}
     3c8:	08001808 	stmdaeq	r0, {r3, fp, ip}
     3cc:	08001820 	stmdaeq	r0, {r5, fp, ip}
	...
     3d8:	08001960 	stmdaeq	r0, {r5, r6, r8, fp, ip}
     3dc:	08001966 	stmdaeq	r0, {r1, r2, r5, r6, r8, fp, ip}
     3e0:	08001968 	stmdaeq	r0, {r3, r5, r6, r8, fp, ip}
     3e4:	080019ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, fp, ip}
     3e8:	08001ac6 	stmdaeq	r0, {r1, r2, r6, r7, r9, fp, ip}
     3ec:	08001ade 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, fp, ip}
	...
     3f8:	08001afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, ip}
     3fc:	08001bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, ip}
     400:	08001c2e 	stmdaeq	r0, {r1, r2, r3, r5, sl, fp, ip}
     404:	08001c3a 	stmdaeq	r0, {r1, r3, r4, r5, sl, fp, ip}
	...
     410:	08001820 	stmdaeq	r0, {r5, fp, ip}
     414:	080018c0 	stmdaeq	r0, {r6, r7, fp, ip}
     418:	080018c0 	stmdaeq	r0, {r6, r7, fp, ip}
     41c:	08001c60 	stmdaeq	r0, {r5, r6, sl, fp, ip}
     420:	08001c60 	stmdaeq	r0, {r5, r6, sl, fp, ip}
     424:	08001ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, ip}
     428:	00000001 	andeq	r0, r0, r1
     42c:	00000001 	andeq	r0, r0, r1
     430:	08001ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, ip}
     434:	08001cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip}
     438:	08001cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip}
     43c:	08001cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, ip}
     440:	08001cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, ip}
     444:	08001d08 	stmdaeq	r0, {r3, r8, sl, fp, ip}
     448:	08001d08 	stmdaeq	r0, {r3, r8, sl, fp, ip}
     44c:	08001d3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, fp, ip}
     450:	00000001 	andeq	r0, r0, r1
     454:	00000001 	andeq	r0, r0, r1
     458:	00000001 	andeq	r0, r0, r1
     45c:	00000001 	andeq	r0, r0, r1
     460:	00000001 	andeq	r0, r0, r1
     464:	00000001 	andeq	r0, r0, r1
     468:	08001d3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, fp, ip}
     46c:	08001d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, ip}
     470:	00000001 	andeq	r0, r0, r1
     474:	00000001 	andeq	r0, r0, r1
     478:	08001d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, ip}
     47c:	08001d4a 	stmdaeq	r0, {r1, r3, r6, r8, sl, fp, ip}
	...
     488:	00000001 	andeq	r0, r0, r1
     48c:	00000001 	andeq	r0, r0, r1
     490:	00000001 	andeq	r0, r0, r1
     494:	00000001 	andeq	r0, r0, r1
     498:	00000001 	andeq	r0, r0, r1
     49c:	00000001 	andeq	r0, r0, r1
     4a0:	00000001 	andeq	r0, r0, r1
     4a4:	00000001 	andeq	r0, r0, r1
     4a8:	00000001 	andeq	r0, r0, r1
     4ac:	00000001 	andeq	r0, r0, r1
	...
     4b8:	00000001 	andeq	r0, r0, r1
     4bc:	00000001 	andeq	r0, r0, r1
     4c0:	00000001 	andeq	r0, r0, r1
     4c4:	00000001 	andeq	r0, r0, r1
	...
     4d0:	00000001 	andeq	r0, r0, r1
     4d4:	00000001 	andeq	r0, r0, r1
     4d8:	00000001 	andeq	r0, r0, r1
     4dc:	00000001 	andeq	r0, r0, r1
     4e0:	00000001 	andeq	r0, r0, r1
     4e4:	00000001 	andeq	r0, r0, r1
	...
     4f0:	00000001 	andeq	r0, r0, r1
     4f4:	00000001 	andeq	r0, r0, r1
     4f8:	00000001 	andeq	r0, r0, r1
     4fc:	00000001 	andeq	r0, r0, r1
	...
     508:	00000001 	andeq	r0, r0, r1
     50c:	00000001 	andeq	r0, r0, r1
	...
     518:	08001d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, ip}
     51c:	08001d80 	stmdaeq	r0, {r7, r8, sl, fp, ip}
     520:	08001d82 	stmdaeq	r0, {r1, r7, r8, sl, fp, ip}
     524:	08001d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, ip}
     528:	08001d9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, sl, fp, ip}
     52c:	08001d9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, sl, fp, ip}
     530:	08001da0 	stmdaeq	r0, {r5, r7, r8, sl, fp, ip}
     534:	08001da6 	stmdaeq	r0, {r1, r2, r5, r7, r8, sl, fp, ip}
	...
     540:	08001e5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, fp, ip}
     544:	08001e66 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, fp, ip}
     548:	08001e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip}
     54c:	08001e80 	stmdaeq	r0, {r7, r9, sl, fp, ip}
     550:	08001e86 	stmdaeq	r0, {r1, r2, r7, r9, sl, fp, ip}
     554:	08001e8a 	stmdaeq	r0, {r1, r3, r7, r9, sl, fp, ip}
     558:	08001e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip}
     55c:	08001e96 	stmdaeq	r0, {r1, r2, r4, r7, r9, sl, fp, ip}
	...
     568:	080020cc 	stmdaeq	r0, {r2, r3, r6, r7, sp}
     56c:	08002114 	stmdaeq	r0, {r2, r4, r8, sp}
     570:	08002116 	stmdaeq	r0, {r1, r2, r4, r8, sp}
     574:	0800211e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sp}
	...
     580:	08001d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, ip}
     584:	08001dbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, fp, ip}
     588:	08001dbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, fp, ip}
     58c:	08001df6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sl, fp, ip}
     590:	08001df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp, ip}
     594:	08001e56 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, fp, ip}
     598:	08001e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip}
     59c:	08001f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip}
     5a0:	08001f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip}
     5a4:	08002000 	stmdaeq	r0, {sp}
     5a8:	08002000 	stmdaeq	r0, {sp}
     5ac:	080020b4 	stmdaeq	r0, {r2, r4, r5, r7, sp}
     5b0:	080020b4 	stmdaeq	r0, {r2, r4, r5, r7, sp}
     5b4:	08002138 	stmdaeq	r0, {r3, r4, r5, r8, sp}
	...
     5c0:	00000001 	andeq	r0, r0, r1
     5c4:	00000001 	andeq	r0, r0, r1
     5c8:	00000001 	andeq	r0, r0, r1
     5cc:	00000001 	andeq	r0, r0, r1
     5d0:	00000001 	andeq	r0, r0, r1
     5d4:	00000001 	andeq	r0, r0, r1
     5d8:	00000001 	andeq	r0, r0, r1
     5dc:	00000001 	andeq	r0, r0, r1
     5e0:	00000001 	andeq	r0, r0, r1
     5e4:	00000001 	andeq	r0, r0, r1
	...
     5f0:	00000001 	andeq	r0, r0, r1
     5f4:	00000001 	andeq	r0, r0, r1
     5f8:	00000001 	andeq	r0, r0, r1
     5fc:	00000001 	andeq	r0, r0, r1
     600:	00000001 	andeq	r0, r0, r1
     604:	00000001 	andeq	r0, r0, r1
	...
     610:	00000001 	andeq	r0, r0, r1
     614:	00000001 	andeq	r0, r0, r1
     618:	00000001 	andeq	r0, r0, r1
     61c:	00000001 	andeq	r0, r0, r1
     620:	00000001 	andeq	r0, r0, r1
     624:	00000001 	andeq	r0, r0, r1
	...
     630:	00000001 	andeq	r0, r0, r1
     634:	00000001 	andeq	r0, r0, r1
     638:	00000001 	andeq	r0, r0, r1
     63c:	00000001 	andeq	r0, r0, r1
     640:	00000001 	andeq	r0, r0, r1
     644:	00000001 	andeq	r0, r0, r1
	...
     650:	08002142 	stmdaeq	r0, {r1, r6, r8, sp}
     654:	08002146 	stmdaeq	r0, {r1, r2, r6, r8, sp}
     658:	0800214a 	stmdaeq	r0, {r1, r3, r6, r8, sp}
     65c:	0800221a 	stmdaeq	r0, {r1, r3, r4, r9, sp}
     660:	080022a4 	stmdaeq	r0, {r2, r5, r7, r9, sp}
     664:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
	...
     670:	08002168 	stmdaeq	r0, {r3, r5, r6, r8, sp}
     674:	0800216a 	stmdaeq	r0, {r1, r3, r5, r6, r8, sp}
     678:	08002176 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sp}
     67c:	08002178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp}
     680:	0800217c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sp}
     684:	0800221a 	stmdaeq	r0, {r1, r3, r4, r9, sp}
     688:	080022a4 	stmdaeq	r0, {r2, r5, r7, r9, sp}
     68c:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
	...
     698:	08002168 	stmdaeq	r0, {r3, r5, r6, r8, sp}
     69c:	0800216a 	stmdaeq	r0, {r1, r3, r5, r6, r8, sp}
     6a0:	08002176 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sp}
     6a4:	08002178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp}
     6a8:	0800217c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sp}
     6ac:	0800218c 	stmdaeq	r0, {r2, r3, r7, r8, sp}
     6b0:	08002190 	stmdaeq	r0, {r4, r7, r8, sp}
     6b4:	08002194 	stmdaeq	r0, {r2, r4, r7, r8, sp}
	...
     6c0:	08002196 	stmdaeq	r0, {r1, r2, r4, r7, r8, sp}
     6c4:	080021ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sp}
     6c8:	080022a4 	stmdaeq	r0, {r2, r5, r7, r9, sp}
     6cc:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
	...
     6d8:	00000001 	andeq	r0, r0, r1
     6dc:	00000001 	andeq	r0, r0, r1
     6e0:	08002138 	stmdaeq	r0, {r3, r4, r5, r8, sp}
     6e4:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
	...
     6f0:	08002314 	stmdaeq	r0, {r2, r4, r8, r9, sp}
     6f4:	08002316 	stmdaeq	r0, {r1, r2, r4, r8, r9, sp}
     6f8:	0800231c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sp}
     6fc:	08002320 	stmdaeq	r0, {r5, r8, r9, sp}
     700:	08002324 	stmdaeq	r0, {r2, r5, r8, r9, sp}
     704:	0800233a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sp}
	...
     710:	00000001 	andeq	r0, r0, r1
     714:	00000001 	andeq	r0, r0, r1
     718:	00000001 	andeq	r0, r0, r1
     71c:	00000001 	andeq	r0, r0, r1
	...
     728:	0800260c 	stmdaeq	r0, {r2, r3, r9, sl, sp}
     72c:	0800260e 	stmdaeq	r0, {r1, r2, r3, r9, sl, sp}
     730:	08002610 	stmdaeq	r0, {r4, r9, sl, sp}
     734:	08002694 	stmdaeq	r0, {r2, r4, r7, r9, sl, sp}
	...
     740:	08002694 	stmdaeq	r0, {r2, r4, r7, r9, sl, sp}
     744:	08002706 	stmdaeq	r0, {r1, r2, r8, r9, sl, sp}
     748:	0800270c 	stmdaeq	r0, {r2, r3, r8, r9, sl, sp}
     74c:	08002712 	stmdaeq	r0, {r1, r4, r8, r9, sl, sp}
	...
     758:	08002706 	stmdaeq	r0, {r1, r2, r8, r9, sl, sp}
     75c:	0800270c 	stmdaeq	r0, {r2, r3, r8, r9, sl, sp}
     760:	08002712 	stmdaeq	r0, {r1, r4, r8, r9, sl, sp}
     764:	08002794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp}
	...
     770:	08002706 	stmdaeq	r0, {r1, r2, r8, r9, sl, sp}
     774:	0800270c 	stmdaeq	r0, {r2, r3, r8, r9, sl, sp}
     778:	08002712 	stmdaeq	r0, {r1, r4, r8, r9, sl, sp}
     77c:	0800275c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, sp}
	...
     788:	08002bf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, fp, sp}
     78c:	08002bfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, fp, sp}
     790:	08002c00 	stmdaeq	r0, {sl, fp, sp}
     794:	08002c48 	stmdaeq	r0, {r3, r6, sl, fp, sp}
	...
     7a0:	08002cc2 	stmdaeq	r0, {r1, r6, r7, sl, fp, sp}
     7a4:	08002d46 	stmdaeq	r0, {r1, r2, r6, r8, sl, fp, sp}
     7a8:	08002d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, sp}
     7ac:	08002d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp, sp}
	...
     7b8:	08002d46 	stmdaeq	r0, {r1, r2, r6, r8, sl, fp, sp}
     7bc:	08002d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, sp}
     7c0:	08002d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp, sp}
     7c4:	08002dd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, fp, sp}
	...
     7d0:	08002d46 	stmdaeq	r0, {r1, r2, r6, r8, sl, fp, sp}
     7d4:	08002d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp, sp}
     7d8:	08002d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp, sp}
     7dc:	08002d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, sp}
	...
     7e8:	080030e0 	stmdaeq	r0, {r5, r6, r7, ip, sp}
     7ec:	0800312a 	stmdaeq	r0, {r1, r3, r5, r8, ip, sp}
     7f0:	0800312e 	stmdaeq	r0, {r1, r2, r3, r5, r8, ip, sp}
     7f4:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
	...
     800:	0800312a 	stmdaeq	r0, {r1, r3, r5, r8, ip, sp}
     804:	0800312e 	stmdaeq	r0, {r1, r2, r3, r5, r8, ip, sp}
     808:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
     80c:	080031b0 	stmdaeq	r0, {r4, r5, r7, r8, ip, sp}
	...
     818:	0800312a 	stmdaeq	r0, {r1, r3, r5, r8, ip, sp}
     81c:	0800312e 	stmdaeq	r0, {r1, r2, r3, r5, r8, ip, sp}
     820:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
     824:	0800317a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, ip, sp}
	...
     830:	080022b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp}
     834:	080022d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sp}
     838:	080022d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sp}
     83c:	08002342 	stmdaeq	r0, {r1, r6, r8, r9, sp}
     840:	08002344 	stmdaeq	r0, {r2, r6, r8, r9, sp}
     844:	080023de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sp}
     848:	080023e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sp}
     84c:	080024a2 	stmdaeq	r0, {r1, r5, r7, sl, sp}
     850:	080024a4 	stmdaeq	r0, {r2, r5, r7, sl, sp}
     854:	080024ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, sp}
     858:	080024ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, sp}
     85c:	08002538 	stmdaeq	r0, {r3, r4, r5, r8, sl, sp}
     860:	08002538 	stmdaeq	r0, {r3, r4, r5, r8, sl, sp}
     864:	0800257e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, sp}
     868:	08002580 	stmdaeq	r0, {r7, r8, sl, sp}
     86c:	08002608 	stmdaeq	r0, {r3, r9, sl, sp}
     870:	00000001 	andeq	r0, r0, r1
     874:	00000001 	andeq	r0, r0, r1
     878:	00000001 	andeq	r0, r0, r1
     87c:	00000001 	andeq	r0, r0, r1
     880:	08002608 	stmdaeq	r0, {r3, r9, sl, sp}
     884:	08002bf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, fp, sp}
     888:	00000001 	andeq	r0, r0, r1
     88c:	00000001 	andeq	r0, r0, r1
     890:	08002bf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, fp, sp}
     894:	08003228 	stmdaeq	r0, {r3, r5, r9, ip, sp}
	...
     8a0:	08003236 	stmdaeq	r0, {r1, r2, r4, r5, r9, ip, sp}
     8a4:	08003254 	stmdaeq	r0, {r2, r4, r6, r9, ip, sp}
     8a8:	080033a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, ip, sp}
     8ac:	080033b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip, sp}
     8b0:	080033c2 	stmdaeq	r0, {r1, r6, r7, r8, r9, ip, sp}
     8b4:	080033c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, sp}
	...
     8c0:	08003346 	stmdaeq	r0, {r1, r2, r6, r8, r9, ip, sp}
     8c4:	08003348 	stmdaeq	r0, {r3, r6, r8, r9, ip, sp}
     8c8:	0800334c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip, sp}
     8cc:	08003360 	stmdaeq	r0, {r5, r6, r8, r9, ip, sp}
	...
     8d8:	08003362 	stmdaeq	r0, {r1, r5, r6, r8, r9, ip, sp}
     8dc:	08003364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip, sp}
     8e0:	08003368 	stmdaeq	r0, {r3, r5, r6, r8, r9, ip, sp}
     8e4:	0800339c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, ip, sp}
	...
     8f0:	00000001 	andeq	r0, r0, r1
     8f4:	00000001 	andeq	r0, r0, r1
     8f8:	00000001 	andeq	r0, r0, r1
     8fc:	00000001 	andeq	r0, r0, r1
	...
     908:	00000001 	andeq	r0, r0, r1
     90c:	00000001 	andeq	r0, r0, r1
     910:	00000001 	andeq	r0, r0, r1
     914:	00000001 	andeq	r0, r0, r1
	...
     920:	00000001 	andeq	r0, r0, r1
     924:	00000001 	andeq	r0, r0, r1
     928:	00000001 	andeq	r0, r0, r1
     92c:	00000001 	andeq	r0, r0, r1
	...
     938:	00000001 	andeq	r0, r0, r1
     93c:	00000001 	andeq	r0, r0, r1
     940:	00000001 	andeq	r0, r0, r1
     944:	00000001 	andeq	r0, r0, r1
	...
     950:	00000001 	andeq	r0, r0, r1
     954:	00000001 	andeq	r0, r0, r1
     958:	00000001 	andeq	r0, r0, r1
     95c:	00000001 	andeq	r0, r0, r1
	...
     968:	00000001 	andeq	r0, r0, r1
     96c:	00000001 	andeq	r0, r0, r1
     970:	00000001 	andeq	r0, r0, r1
     974:	00000001 	andeq	r0, r0, r1
	...
     980:	00000001 	andeq	r0, r0, r1
     984:	00000001 	andeq	r0, r0, r1
     988:	00000001 	andeq	r0, r0, r1
     98c:	00000001 	andeq	r0, r0, r1
	...
     998:	00000001 	andeq	r0, r0, r1
     99c:	00000001 	andeq	r0, r0, r1
     9a0:	00000001 	andeq	r0, r0, r1
     9a4:	00000001 	andeq	r0, r0, r1
     9a8:	00000001 	andeq	r0, r0, r1
     9ac:	00000001 	andeq	r0, r0, r1
	...
     9b8:	00000001 	andeq	r0, r0, r1
     9bc:	00000001 	andeq	r0, r0, r1
     9c0:	00000001 	andeq	r0, r0, r1
     9c4:	00000001 	andeq	r0, r0, r1
	...
     9d0:	00000001 	andeq	r0, r0, r1
     9d4:	00000001 	andeq	r0, r0, r1
     9d8:	00000001 	andeq	r0, r0, r1
     9dc:	00000001 	andeq	r0, r0, r1
     9e0:	00000001 	andeq	r0, r0, r1
     9e4:	00000001 	andeq	r0, r0, r1
	...
     9f0:	00000001 	andeq	r0, r0, r1
     9f4:	00000001 	andeq	r0, r0, r1
     9f8:	00000001 	andeq	r0, r0, r1
     9fc:	00000001 	andeq	r0, r0, r1
	...
     a08:	00000001 	andeq	r0, r0, r1
     a0c:	00000001 	andeq	r0, r0, r1
     a10:	08003228 	stmdaeq	r0, {r3, r5, r9, ip, sp}
     a14:	080033c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, sp}
     a18:	00000001 	andeq	r0, r0, r1
     a1c:	00000001 	andeq	r0, r0, r1
     a20:	00000001 	andeq	r0, r0, r1
     a24:	00000001 	andeq	r0, r0, r1
     a28:	00000001 	andeq	r0, r0, r1
     a2c:	00000001 	andeq	r0, r0, r1
     a30:	00000001 	andeq	r0, r0, r1
     a34:	00000001 	andeq	r0, r0, r1
     a38:	00000001 	andeq	r0, r0, r1
     a3c:	00000001 	andeq	r0, r0, r1
     a40:	00000001 	andeq	r0, r0, r1
     a44:	00000001 	andeq	r0, r0, r1
     a48:	00000001 	andeq	r0, r0, r1
     a4c:	00000001 	andeq	r0, r0, r1
	...
     a58:	00000001 	andeq	r0, r0, r1
     a5c:	00000001 	andeq	r0, r0, r1
     a60:	00000001 	andeq	r0, r0, r1
     a64:	00000001 	andeq	r0, r0, r1
     a68:	00000001 	andeq	r0, r0, r1
     a6c:	00000001 	andeq	r0, r0, r1
	...
     a78:	00000001 	andeq	r0, r0, r1
     a7c:	00000001 	andeq	r0, r0, r1
     a80:	00000001 	andeq	r0, r0, r1
     a84:	00000001 	andeq	r0, r0, r1
	...
     a90:	08005390 	stmdaeq	r0, {r4, r7, r8, r9, ip, lr}
     a94:	080053e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip, lr}
     a98:	080053ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, ip, lr}
     a9c:	08005412 	stmdaeq	r0, {r1, r4, sl, ip, lr}
	...
     aa8:	0800543c 	stmdaeq	r0, {r2, r3, r4, r5, sl, ip, lr}
     aac:	0800543e 	stmdaeq	r0, {r1, r2, r3, r4, r5, sl, ip, lr}
     ab0:	08005442 	stmdaeq	r0, {r1, r6, sl, ip, lr}
     ab4:	08005444 	stmdaeq	r0, {r2, r6, sl, ip, lr}
     ab8:	08005458 	stmdaeq	r0, {r3, r4, r6, sl, ip, lr}
     abc:	0800545c 	stmdaeq	r0, {r2, r3, r4, r6, sl, ip, lr}
     ac0:	0800547a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, ip, lr}
     ac4:	080054a2 	stmdaeq	r0, {r1, r5, r7, sl, ip, lr}
     ac8:	08005576 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, ip, lr}
     acc:	080055ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, ip, lr}
     ad0:	08005614 	stmdaeq	r0, {r2, r4, r9, sl, ip, lr}
     ad4:	0800561a 	stmdaeq	r0, {r1, r3, r4, r9, sl, ip, lr}
	...
     ae0:	080054a2 	stmdaeq	r0, {r1, r5, r7, sl, ip, lr}
     ae4:	080054dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, ip, lr}
     ae8:	080055ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, ip, lr}
     aec:	08005614 	stmdaeq	r0, {r2, r4, r9, sl, ip, lr}
     af0:	0800561a 	stmdaeq	r0, {r1, r3, r4, r9, sl, ip, lr}
     af4:	0800562c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip, lr}
	...
     b00:	080033c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, sp}
     b04:	08003420 	stmdaeq	r0, {r5, sl, ip, sp}
     b08:	08003420 	stmdaeq	r0, {r5, sl, ip, sp}
     b0c:	08005384 	stmdaeq	r0, {r2, r7, r8, r9, ip, lr}
     b10:	08005384 	stmdaeq	r0, {r2, r7, r8, r9, ip, lr}
     b14:	08005412 	stmdaeq	r0, {r1, r4, sl, ip, lr}
     b18:	08005414 	stmdaeq	r0, {r2, r4, sl, ip, lr}
     b1c:	0800562c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip, lr}
	...
     b28:	0800563c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip, lr}
     b2c:	080056e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, ip, lr}
     b30:	080056e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, ip, lr}
     b34:	080056e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, ip, lr}
	...
     b40:	080057c0 	stmdaeq	r0, {r6, r7, r8, r9, sl, ip, lr}
     b44:	080057ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, sl, ip, lr}
     b48:	080057d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip, lr}
     b4c:	080057d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, ip, lr}
     b50:	080057dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, ip, lr}
     b54:	080057e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip, lr}
     b58:	080057e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, ip, lr}
     b5c:	080057e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, ip, lr}
	...
     b68:	080057ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, sl, ip, lr}
     b6c:	080057d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, ip, lr}
     b70:	080057e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, ip, lr}
     b74:	080057ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, sl, ip, lr}
     b78:	080057ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, ip, lr}
     b7c:	080057f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sl, ip, lr}
     b80:	080057f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, ip, lr}
     b84:	080057f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, ip, lr}
	...
     b90:	080057fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip, lr}
     b94:	08005800 	stmdaeq	r0, {fp, ip, lr}
     b98:	0800580a 	stmdaeq	r0, {r1, r3, fp, ip, lr}
     b9c:	08005812 	stmdaeq	r0, {r1, r4, fp, ip, lr}
     ba0:	08005816 	stmdaeq	r0, {r1, r2, r4, fp, ip, lr}
     ba4:	08005818 	stmdaeq	r0, {r3, r4, fp, ip, lr}
     ba8:	08005820 	stmdaeq	r0, {r5, fp, ip, lr}
     bac:	08005824 	stmdaeq	r0, {r2, r5, fp, ip, lr}
     bb0:	0800582e 	stmdaeq	r0, {r1, r2, r3, r5, fp, ip, lr}
     bb4:	08005832 	stmdaeq	r0, {r1, r4, r5, fp, ip, lr}
     bb8:	0800583a 	stmdaeq	r0, {r1, r3, r4, r5, fp, ip, lr}
     bbc:	0800583c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip, lr}
	...
     bc8:	08005800 	stmdaeq	r0, {fp, ip, lr}
     bcc:	08005802 	stmdaeq	r0, {r1, fp, ip, lr}
     bd0:	08005806 	stmdaeq	r0, {r1, r2, fp, ip, lr}
     bd4:	0800580a 	stmdaeq	r0, {r1, r3, fp, ip, lr}
     bd8:	08005814 	stmdaeq	r0, {r2, r4, fp, ip, lr}
     bdc:	08005816 	stmdaeq	r0, {r1, r2, r4, fp, ip, lr}
     be0:	08005828 	stmdaeq	r0, {r3, r5, fp, ip, lr}
     be4:	0800582a 	stmdaeq	r0, {r1, r3, r5, fp, ip, lr}
     be8:	08005834 	stmdaeq	r0, {r2, r4, r5, fp, ip, lr}
     bec:	08005838 	stmdaeq	r0, {r3, r4, r5, fp, ip, lr}
     bf0:	08005848 	stmdaeq	r0, {r3, r6, fp, ip, lr}
     bf4:	0800584a 	stmdaeq	r0, {r1, r3, r6, fp, ip, lr}
	...
     c00:	08005818 	stmdaeq	r0, {r3, r4, fp, ip, lr}
     c04:	0800581a 	stmdaeq	r0, {r1, r3, r4, fp, ip, lr}
     c08:	08005824 	stmdaeq	r0, {r2, r5, fp, ip, lr}
     c0c:	08005828 	stmdaeq	r0, {r3, r5, fp, ip, lr}
     c10:	08005838 	stmdaeq	r0, {r3, r4, r5, fp, ip, lr}
     c14:	0800583a 	stmdaeq	r0, {r1, r3, r4, r5, fp, ip, lr}
     c18:	0800583c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip, lr}
     c1c:	0800583e 	stmdaeq	r0, {r1, r2, r3, r4, r5, fp, ip, lr}
     c20:	0800584a 	stmdaeq	r0, {r1, r3, r6, fp, ip, lr}
     c24:	08005850 	stmdaeq	r0, {r4, r6, fp, ip, lr}
	...
     c30:	08005864 	stmdaeq	r0, {r2, r5, r6, fp, ip, lr}
     c34:	0800586c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, lr}
     c38:	080058d0 	stmdaeq	r0, {r4, r6, r7, fp, ip, lr}
     c3c:	080058d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, ip, lr}
	...
     c48:	0800586c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, lr}
     c4c:	08005876 	stmdaeq	r0, {r1, r2, r4, r5, r6, fp, ip, lr}
     c50:	0800592a 	stmdaeq	r0, {r1, r3, r5, r8, fp, ip, lr}
     c54:	0800592e 	stmdaeq	r0, {r1, r2, r3, r5, r8, fp, ip, lr}
     c58:	08005932 	stmdaeq	r0, {r1, r4, r5, r8, fp, ip, lr}
     c5c:	08005936 	stmdaeq	r0, {r1, r2, r4, r5, r8, fp, ip, lr}
     c60:	0800593c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip, lr}
     c64:	0800593e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
	...
     c70:	08005876 	stmdaeq	r0, {r1, r2, r4, r5, r6, fp, ip, lr}
     c74:	08005880 	stmdaeq	r0, {r7, fp, ip, lr}
     c78:	08005950 	stmdaeq	r0, {r4, r6, r8, fp, ip, lr}
     c7c:	08005954 	stmdaeq	r0, {r2, r4, r6, r8, fp, ip, lr}
     c80:	08005958 	stmdaeq	r0, {r3, r4, r6, r8, fp, ip, lr}
     c84:	0800595c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp, ip, lr}
     c88:	0800596e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, fp, ip, lr}
     c8c:	08005970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, lr}
	...
     c98:	080058d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, ip, lr}
     c9c:	080058e0 	stmdaeq	r0, {r5, r6, r7, fp, ip, lr}
     ca0:	080058e2 	stmdaeq	r0, {r1, r5, r6, r7, fp, ip, lr}
     ca4:	080058e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, fp, ip, lr}
     ca8:	080058ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, fp, ip, lr}
     cac:	080058ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, fp, ip, lr}
	...
     cb8:	08005942 	stmdaeq	r0, {r1, r6, r8, fp, ip, lr}
     cbc:	08005946 	stmdaeq	r0, {r1, r2, r6, r8, fp, ip, lr}
     cc0:	0800594c 	stmdaeq	r0, {r2, r3, r6, r8, fp, ip, lr}
     cc4:	08005950 	stmdaeq	r0, {r4, r6, r8, fp, ip, lr}
     cc8:	0800595c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp, ip, lr}
     ccc:	0800595e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, fp, ip, lr}
     cd0:	08005966 	stmdaeq	r0, {r1, r2, r5, r6, r8, fp, ip, lr}
     cd4:	0800596a 	stmdaeq	r0, {r1, r3, r5, r6, r8, fp, ip, lr}
     cd8:	08005970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, lr}
     cdc:	08005974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp, ip, lr}
     ce0:	08005976 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, fp, ip, lr}
     ce4:	0800597c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, ip, lr}
	...
     cf0:	08005ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, ip, lr}
     cf4:	08005aee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, fp, ip, lr}
     cf8:	08005af2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, fp, ip, lr}
     cfc:	08005b12 	stmdaeq	r0, {r1, r4, r8, r9, fp, ip, lr}
	...
     d08:	08005ba2 	stmdaeq	r0, {r1, r5, r7, r8, r9, fp, ip, lr}
     d0c:	08005bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, ip, lr}
     d10:	08005bb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, fp, ip, lr}
     d14:	08005c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, ip, lr}
     d18:	08005c1e 	stmdaeq	r0, {r1, r2, r3, r4, sl, fp, ip, lr}
     d1c:	08005c22 	stmdaeq	r0, {r1, r5, sl, fp, ip, lr}
	...
     d28:	08005c5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, fp, ip, lr}
     d2c:	08005cce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, fp, ip, lr}
     d30:	08005cd2 	stmdaeq	r0, {r1, r4, r6, r7, sl, fp, ip, lr}
     d34:	08005cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip, lr}
     d38:	08005cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, ip, lr}
     d3c:	08005cfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sl, fp, ip, lr}
     d40:	08005d04 	stmdaeq	r0, {r2, r8, sl, fp, ip, lr}
     d44:	08005d08 	stmdaeq	r0, {r3, r8, sl, fp, ip, lr}
     d48:	08005d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp, ip, lr}
     d4c:	08005d20 	stmdaeq	r0, {r5, r8, sl, fp, ip, lr}
	...
     d58:	08005d46 	stmdaeq	r0, {r1, r2, r6, r8, sl, fp, ip, lr}
     d5c:	08005dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, ip, lr}
     d60:	08005dca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl, fp, ip, lr}
     d64:	08005dce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, fp, ip, lr}
     d68:	08005dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip, lr}
     d6c:	08005dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, ip, lr}
	...
     d78:	0800562c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip, lr}
     d7c:	08005ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, lr}
     d80:	08005ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, lr}
     d84:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
     d88:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
     d8c:	08005dde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sl, fp, ip, lr}
	...
     d98:	00000001 	andeq	r0, r0, r1
     d9c:	00000001 	andeq	r0, r0, r1
     da0:	00000001 	andeq	r0, r0, r1
     da4:	00000001 	andeq	r0, r0, r1
	...
     db0:	08005eda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl, fp, ip, lr}
     db4:	08005edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, ip, lr}
     db8:	08005eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, ip, lr}
     dbc:	08005f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip, lr}
	...
     dc8:	00000001 	andeq	r0, r0, r1
     dcc:	00000001 	andeq	r0, r0, r1
     dd0:	00000001 	andeq	r0, r0, r1
     dd4:	00000001 	andeq	r0, r0, r1
	...
     de0:	00000001 	andeq	r0, r0, r1
     de4:	00000001 	andeq	r0, r0, r1
     de8:	00000001 	andeq	r0, r0, r1
     dec:	00000001 	andeq	r0, r0, r1
	...
     df8:	00000001 	andeq	r0, r0, r1
     dfc:	00000001 	andeq	r0, r0, r1
     e00:	00000001 	andeq	r0, r0, r1
     e04:	00000001 	andeq	r0, r0, r1
     e08:	00000001 	andeq	r0, r0, r1
     e0c:	00000001 	andeq	r0, r0, r1
	...
     e18:	00000001 	andeq	r0, r0, r1
     e1c:	00000001 	andeq	r0, r0, r1
     e20:	00000001 	andeq	r0, r0, r1
     e24:	00000001 	andeq	r0, r0, r1
	...
     e30:	00000001 	andeq	r0, r0, r1
     e34:	00000001 	andeq	r0, r0, r1
     e38:	00000001 	andeq	r0, r0, r1
     e3c:	00000001 	andeq	r0, r0, r1
	...
     e48:	00000001 	andeq	r0, r0, r1
     e4c:	00000001 	andeq	r0, r0, r1
     e50:	00000001 	andeq	r0, r0, r1
     e54:	00000001 	andeq	r0, r0, r1
     e58:	00000001 	andeq	r0, r0, r1
     e5c:	00000001 	andeq	r0, r0, r1
     e60:	00000001 	andeq	r0, r0, r1
     e64:	00000001 	andeq	r0, r0, r1
     e68:	00000001 	andeq	r0, r0, r1
     e6c:	00000001 	andeq	r0, r0, r1
     e70:	00000001 	andeq	r0, r0, r1
     e74:	00000001 	andeq	r0, r0, r1
     e78:	00000001 	andeq	r0, r0, r1
     e7c:	00000001 	andeq	r0, r0, r1
     e80:	00000001 	andeq	r0, r0, r1
     e84:	00000001 	andeq	r0, r0, r1
     e88:	00000001 	andeq	r0, r0, r1
     e8c:	00000001 	andeq	r0, r0, r1
     e90:	00000001 	andeq	r0, r0, r1
     e94:	00000001 	andeq	r0, r0, r1
     e98:	00000001 	andeq	r0, r0, r1
     e9c:	00000001 	andeq	r0, r0, r1
     ea0:	00000001 	andeq	r0, r0, r1
     ea4:	00000001 	andeq	r0, r0, r1
     ea8:	00000001 	andeq	r0, r0, r1
     eac:	00000001 	andeq	r0, r0, r1
     eb0:	08005de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, ip, lr}
     eb4:	08005e0a 	stmdaeq	r0, {r1, r3, r9, sl, fp, ip, lr}
     eb8:	00000001 	andeq	r0, r0, r1
     ebc:	00000001 	andeq	r0, r0, r1
     ec0:	00000001 	andeq	r0, r0, r1
     ec4:	00000001 	andeq	r0, r0, r1
     ec8:	00000001 	andeq	r0, r0, r1
     ecc:	00000001 	andeq	r0, r0, r1
     ed0:	00000001 	andeq	r0, r0, r1
     ed4:	00000001 	andeq	r0, r0, r1
     ed8:	00000001 	andeq	r0, r0, r1
     edc:	00000001 	andeq	r0, r0, r1
     ee0:	08005e0a 	stmdaeq	r0, {r1, r3, r9, sl, fp, ip, lr}
     ee4:	08005e28 	stmdaeq	r0, {r3, r5, r9, sl, fp, ip, lr}
     ee8:	00000001 	andeq	r0, r0, r1
     eec:	00000001 	andeq	r0, r0, r1
     ef0:	00000001 	andeq	r0, r0, r1
     ef4:	00000001 	andeq	r0, r0, r1
     ef8:	08005e28 	stmdaeq	r0, {r3, r5, r9, sl, fp, ip, lr}
     efc:	08005e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip, lr}
     f00:	00000001 	andeq	r0, r0, r1
     f04:	00000001 	andeq	r0, r0, r1
     f08:	00000001 	andeq	r0, r0, r1
     f0c:	00000001 	andeq	r0, r0, r1
     f10:	00000001 	andeq	r0, r0, r1
     f14:	00000001 	andeq	r0, r0, r1
     f18:	00000001 	andeq	r0, r0, r1
     f1c:	00000001 	andeq	r0, r0, r1
     f20:	00000001 	andeq	r0, r0, r1
     f24:	00000001 	andeq	r0, r0, r1
     f28:	00000001 	andeq	r0, r0, r1
     f2c:	00000001 	andeq	r0, r0, r1
     f30:	00000001 	andeq	r0, r0, r1
     f34:	00000001 	andeq	r0, r0, r1
     f38:	00000001 	andeq	r0, r0, r1
     f3c:	00000001 	andeq	r0, r0, r1
     f40:	00000001 	andeq	r0, r0, r1
     f44:	00000001 	andeq	r0, r0, r1
     f48:	08005e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip, lr}
     f4c:	08005e64 	stmdaeq	r0, {r2, r5, r6, r9, sl, fp, ip, lr}
     f50:	08005e64 	stmdaeq	r0, {r2, r5, r6, r9, sl, fp, ip, lr}
     f54:	08005e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, lr}
     f58:	00000001 	andeq	r0, r0, r1
     f5c:	00000001 	andeq	r0, r0, r1
     f60:	00000001 	andeq	r0, r0, r1
     f64:	00000001 	andeq	r0, r0, r1
     f68:	00000001 	andeq	r0, r0, r1
     f6c:	00000001 	andeq	r0, r0, r1
     f70:	00000001 	andeq	r0, r0, r1
     f74:	00000001 	andeq	r0, r0, r1
     f78:	08005e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, lr}
     f7c:	08005ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip, lr}
     f80:	08005ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip, lr}
     f84:	08005ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, lr}
     f88:	08005ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, lr}
     f8c:	08005ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, lr}
     f90:	00000001 	andeq	r0, r0, r1
     f94:	00000001 	andeq	r0, r0, r1
     f98:	08005ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, lr}
     f9c:	08005f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip, lr}
     fa0:	00000001 	andeq	r0, r0, r1
     fa4:	00000001 	andeq	r0, r0, r1
     fa8:	00000001 	andeq	r0, r0, r1
     fac:	00000001 	andeq	r0, r0, r1
     fb0:	00000001 	andeq	r0, r0, r1
     fb4:	00000001 	andeq	r0, r0, r1
     fb8:	00000001 	andeq	r0, r0, r1
     fbc:	00000001 	andeq	r0, r0, r1
     fc0:	00000001 	andeq	r0, r0, r1
     fc4:	00000001 	andeq	r0, r0, r1
     fc8:	00000001 	andeq	r0, r0, r1
     fcc:	00000001 	andeq	r0, r0, r1
     fd0:	00000001 	andeq	r0, r0, r1
     fd4:	00000001 	andeq	r0, r0, r1
     fd8:	00000001 	andeq	r0, r0, r1
     fdc:	00000001 	andeq	r0, r0, r1
     fe0:	00000001 	andeq	r0, r0, r1
     fe4:	00000001 	andeq	r0, r0, r1
     fe8:	00000001 	andeq	r0, r0, r1
     fec:	00000001 	andeq	r0, r0, r1
     ff0:	00000001 	andeq	r0, r0, r1
     ff4:	00000001 	andeq	r0, r0, r1
     ff8:	00000001 	andeq	r0, r0, r1
     ffc:	00000001 	andeq	r0, r0, r1
    1000:	00000001 	andeq	r0, r0, r1
    1004:	00000001 	andeq	r0, r0, r1
    1008:	00000001 	andeq	r0, r0, r1
    100c:	00000001 	andeq	r0, r0, r1
    1010:	00000001 	andeq	r0, r0, r1
    1014:	00000001 	andeq	r0, r0, r1
    1018:	00000001 	andeq	r0, r0, r1
    101c:	00000001 	andeq	r0, r0, r1
	...
    1028:	08005f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip, lr}
    102c:	0800606c 	stmdaeq	r0, {r2, r3, r5, r6, sp, lr}
    1030:	00000001 	andeq	r0, r0, r1
    1034:	00000001 	andeq	r0, r0, r1
	...
    1040:	0800606c 	stmdaeq	r0, {r2, r3, r5, r6, sp, lr}
    1044:	080060a4 	stmdaeq	r0, {r2, r5, r7, sp, lr}
	...
    1050:	080063ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sp, lr}
    1054:	080063b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sp, lr}
    1058:	080063b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sp, lr}
    105c:	080063ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sp, lr}
    1060:	080063bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sp, lr}
    1064:	080063cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sp, lr}
	...
    1070:	08006582 	stmdaeq	r0, {r1, r7, r8, sl, sp, lr}
    1074:	0800672c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, sp, lr}
    1078:	08006734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, sp, lr}
    107c:	08006754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, sp, lr}
	...
    1088:	080060a4 	stmdaeq	r0, {r2, r5, r7, sp, lr}
    108c:	080060c8 	stmdaeq	r0, {r3, r6, r7, sp, lr}
    1090:	080060c8 	stmdaeq	r0, {r3, r6, r7, sp, lr}
    1094:	080060ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sp, lr}
    1098:	080060ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sp, lr}
    109c:	0800617c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sp, lr}
    10a0:	0800617c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sp, lr}
    10a4:	08006224 	stmdaeq	r0, {r2, r5, r9, sp, lr}
    10a8:	08006224 	stmdaeq	r0, {r2, r5, r9, sp, lr}
    10ac:	0800625c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sp, lr}
    10b0:	0800625c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sp, lr}
    10b4:	080062a4 	stmdaeq	r0, {r2, r5, r7, r9, sp, lr}
    10b8:	080062a4 	stmdaeq	r0, {r2, r5, r7, r9, sp, lr}
    10bc:	08006374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sp, lr}
    10c0:	08006374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sp, lr}
    10c4:	080063f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sp, lr}
    10c8:	080063f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sp, lr}
    10cc:	0800641c 	stmdaeq	r0, {r2, r3, r4, sl, sp, lr}
    10d0:	0800641c 	stmdaeq	r0, {r2, r3, r4, sl, sp, lr}
    10d4:	08006438 	stmdaeq	r0, {r3, r4, r5, sl, sp, lr}
    10d8:	08006438 	stmdaeq	r0, {r3, r4, r5, sl, sp, lr}
    10dc:	08006478 	stmdaeq	r0, {r3, r4, r5, r6, sl, sp, lr}
    10e0:	08006478 	stmdaeq	r0, {r3, r4, r5, r6, sl, sp, lr}
    10e4:	08006754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, sp, lr}
    10e8:	08006754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, sp, lr}
    10ec:	0800681c 	stmdaeq	r0, {r2, r3, r4, fp, sp, lr}
    10f0:	0800681c 	stmdaeq	r0, {r2, r3, r4, fp, sp, lr}
    10f4:	08006854 	stmdaeq	r0, {r2, r4, r6, fp, sp, lr}
    10f8:	08006854 	stmdaeq	r0, {r2, r4, r6, fp, sp, lr}
    10fc:	080068b0 	stmdaeq	r0, {r4, r5, r7, fp, sp, lr}
    1100:	00000001 	andeq	r0, r0, r1
    1104:	00000001 	andeq	r0, r0, r1
	...
    1110:	080068b0 	stmdaeq	r0, {r4, r5, r7, fp, sp, lr}
    1114:	080068e0 	stmdaeq	r0, {r5, r6, r7, fp, sp, lr}
    1118:	080068e0 	stmdaeq	r0, {r5, r6, r7, fp, sp, lr}
    111c:	08006904 	stmdaeq	r0, {r2, r8, fp, sp, lr}
	...
