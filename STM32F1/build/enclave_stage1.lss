
build/enclave_stage1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000f0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b6c  080000f0  080000f0  000080f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000488  20000000  08007c5c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000012c  20000488  080080e4  00010488  2**2
                  ALLOC
  4 .bss.bIntPackSOF 00000001  200005b4  08008210  00010488  2**0
                  ALLOC
  5 .bss.bDeviceState 00000004  200005b8  08008214  00010488  2**2
                  ALLOC
  6 .bss.recvBuffer 00000800  200005bc  08008218  00010488  2**2
                  ALLOC
  7 .bss.uploadBlockLen 00000002  20000dbc  08008a18  00010488  2**1
                  ALLOC
  8 .bss.thisBlockLen 00000002  20000dbe  08008a1a  00010488  2**1
                  ALLOC
  9 .bss.userFirmwareLen 00000004  20000dc0  08008a1c  00010488  2**2
                  ALLOC
 10 .bss.userUploadType 00000001  20000dc4  08008a20  00010488  2**0
                  ALLOC
 11 .bss.dfuAppStatus 00000006  20000dc5  08008a21  00010488  2**0
                  ALLOC
 12 .bss.dfuBusy  00000001  20000dcb  08008a27  00010488  2**0
                  ALLOC
 13 .bss.Data_Mul_MaxPacketSize 00000001  20000dcc  08008a28  00010488  2**0
                  ALLOC
 14 .bss.__malloc_sbrk_start 00000004  20000dd0  08008a2c  00010488  2**2
                  ALLOC
 15 .bss.__malloc_free_list 00000004  20000dd4  08008a30  00010488  2**2
                  ALLOC
 16 .bss.heap_end.4246 00000004  20000dd8  08008a34  00010488  2**2
                  ALLOC
 17 ._usrstack    00000100  20000ddc  08008a38  00010488  2**0
                  ALLOC
 18 .comment      00000070  00000000  00000000  00010488  2**0
                  CONTENTS, READONLY
 19 .ARM.attributes 0000002f  00000000  00000000  000104f8  2**0
                  CONTENTS, READONLY
 20 .debug_aranges 000008f8  00000000  00000000  00010528  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_info   0000bfbe  00000000  00000000  00010e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_abbrev 00002c86  00000000  00000000  0001cdde  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   00003fe3  00000000  00000000  0001fa64  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_frame  000019f0  00000000  00000000  00023a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    000025be  00000000  00000000  00025438  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_loc    0000a2ad  00000000  00000000  000279f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_ranges 00000f30  00000000  00000000  00031ca8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20005000 	andcs	r5, r0, r0
 8000004:	08000b4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, fp}
 8000008:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800000c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000010:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000014:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000018:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
	...
 800002c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000030:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800003c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000040:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000044:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000048:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800004c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000050:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000054:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000058:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800005c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000060:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000064:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000068:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800006c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000070:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000074:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000078:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800007c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000080:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000084:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000088:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800008c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000090:	08000f81 	stmdaeq	r0, {r0, r7, r8, r9, sl, fp}
 8000094:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000098:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800009c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000a0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000a4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000a8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000ac:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000b0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000b4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000b8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000bc:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000c0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000c4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000c8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000cc:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000d0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000d4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000d8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000dc:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000e0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000e4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000e8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000ec:	f108f85f 			; <UNDEFINED> instruction: 0xf108f85f

Disassembly of section .text:

080000f0 <GPIO_DeInit>:
 80000f0:	b508      	push	{r3, lr}
 80000f2:	4b2f      	ldr	r3, [pc, #188]	; (80001b0 <GPIO_DeInit+0xc0>)
 80000f4:	4298      	cmp	r0, r3
 80000f6:	d01e      	beq.n	8000136 <GPIO_DeInit+0x46>
 80000f8:	4b2e      	ldr	r3, [pc, #184]	; (80001b4 <GPIO_DeInit+0xc4>)
 80000fa:	4298      	cmp	r0, r3
 80000fc:	d025      	beq.n	800014a <GPIO_DeInit+0x5a>
 80000fe:	4b2e      	ldr	r3, [pc, #184]	; (80001b8 <GPIO_DeInit+0xc8>)
 8000100:	4298      	cmp	r0, r3
 8000102:	d02c      	beq.n	800015e <GPIO_DeInit+0x6e>
 8000104:	4b2d      	ldr	r3, [pc, #180]	; (80001bc <GPIO_DeInit+0xcc>)
 8000106:	4298      	cmp	r0, r3
 8000108:	d033      	beq.n	8000172 <GPIO_DeInit+0x82>
 800010a:	4b2d      	ldr	r3, [pc, #180]	; (80001c0 <GPIO_DeInit+0xd0>)
 800010c:	4298      	cmp	r0, r3
 800010e:	d03a      	beq.n	8000186 <GPIO_DeInit+0x96>
 8000110:	4b2c      	ldr	r3, [pc, #176]	; (80001c4 <GPIO_DeInit+0xd4>)
 8000112:	4298      	cmp	r0, r3
 8000114:	d041      	beq.n	800019a <GPIO_DeInit+0xaa>
 8000116:	4b2c      	ldr	r3, [pc, #176]	; (80001c8 <GPIO_DeInit+0xd8>)
 8000118:	4298      	cmp	r0, r3
 800011a:	d000      	beq.n	800011e <GPIO_DeInit+0x2e>
 800011c:	bd08      	pop	{r3, pc}
 800011e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000122:	2101      	movs	r1, #1
 8000124:	f000 faac 	bl	8000680 <RCC_APB2PeriphResetCmd>
 8000128:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800012c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000130:	2100      	movs	r1, #0
 8000132:	f000 baa5 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 8000136:	2004      	movs	r0, #4
 8000138:	2101      	movs	r1, #1
 800013a:	f000 faa1 	bl	8000680 <RCC_APB2PeriphResetCmd>
 800013e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000142:	2004      	movs	r0, #4
 8000144:	2100      	movs	r1, #0
 8000146:	f000 ba9b 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 800014a:	2008      	movs	r0, #8
 800014c:	2101      	movs	r1, #1
 800014e:	f000 fa97 	bl	8000680 <RCC_APB2PeriphResetCmd>
 8000152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000156:	2008      	movs	r0, #8
 8000158:	2100      	movs	r1, #0
 800015a:	f000 ba91 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 800015e:	2010      	movs	r0, #16
 8000160:	2101      	movs	r1, #1
 8000162:	f000 fa8d 	bl	8000680 <RCC_APB2PeriphResetCmd>
 8000166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800016a:	2010      	movs	r0, #16
 800016c:	2100      	movs	r1, #0
 800016e:	f000 ba87 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 8000172:	2020      	movs	r0, #32
 8000174:	2101      	movs	r1, #1
 8000176:	f000 fa83 	bl	8000680 <RCC_APB2PeriphResetCmd>
 800017a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800017e:	2020      	movs	r0, #32
 8000180:	2100      	movs	r1, #0
 8000182:	f000 ba7d 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 8000186:	2040      	movs	r0, #64	; 0x40
 8000188:	2101      	movs	r1, #1
 800018a:	f000 fa79 	bl	8000680 <RCC_APB2PeriphResetCmd>
 800018e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000192:	2040      	movs	r0, #64	; 0x40
 8000194:	2100      	movs	r1, #0
 8000196:	f000 ba73 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 800019a:	2080      	movs	r0, #128	; 0x80
 800019c:	2101      	movs	r1, #1
 800019e:	f000 fa6f 	bl	8000680 <RCC_APB2PeriphResetCmd>
 80001a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80001a6:	2080      	movs	r0, #128	; 0x80
 80001a8:	2100      	movs	r1, #0
 80001aa:	f000 ba69 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 80001ae:	bf00      	nop
 80001b0:	40010800 	andmi	r0, r1, r0, lsl #16
 80001b4:	40010c00 	andmi	r0, r1, r0, lsl #24
 80001b8:	40011000 	andmi	r1, r1, r0
 80001bc:	40011400 	andmi	r1, r1, r0, lsl #8
 80001c0:	40011800 	andmi	r1, r1, r0, lsl #16
 80001c4:	40011c00 	andmi	r1, r1, r0, lsl #24
 80001c8:	40012000 	andmi	r2, r1, r0

080001cc <GPIO_AFIODeInit>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	2001      	movs	r0, #1
 80001d0:	4601      	mov	r1, r0
 80001d2:	f000 fa55 	bl	8000680 <RCC_APB2PeriphResetCmd>
 80001d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80001da:	2001      	movs	r0, #1
 80001dc:	2100      	movs	r1, #0
 80001de:	f000 ba4f 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 80001e2:	bf00      	nop

080001e4 <GPIO_Init>:
 80001e4:	78cb      	ldrb	r3, [r1, #3]
 80001e6:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ea:	f003 060f 	and.w	r6, r3, #15
 80001ee:	06db      	lsls	r3, r3, #27
 80001f0:	bf48      	it	mi
 80001f2:	788b      	ldrbmi	r3, [r1, #2]
 80001f4:	880a      	ldrh	r2, [r1, #0]
 80001f6:	bf48      	it	mi
 80001f8:	431e      	orrmi	r6, r3
 80001fa:	f012 0fff 	tst.w	r2, #255	; 0xff
 80001fe:	d026      	beq.n	800024e <GPIO_Init+0x6a>
 8000200:	6807      	ldr	r7, [r0, #0]
 8000202:	2300      	movs	r3, #0
 8000204:	2501      	movs	r5, #1
 8000206:	f04f 080f 	mov.w	r8, #15
 800020a:	e003      	b.n	8000214 <GPIO_Init+0x30>
 800020c:	3301      	adds	r3, #1
 800020e:	2b08      	cmp	r3, #8
 8000210:	d01b      	beq.n	800024a <GPIO_Init+0x66>
 8000212:	880a      	ldrh	r2, [r1, #0]
 8000214:	fa05 f403 	lsl.w	r4, r5, r3
 8000218:	4022      	ands	r2, r4
 800021a:	42a2      	cmp	r2, r4
 800021c:	d1f6      	bne.n	800020c <GPIO_Init+0x28>
 800021e:	009c      	lsls	r4, r3, #2
 8000220:	fa08 f904 	lsl.w	r9, r8, r4
 8000224:	fa06 f404 	lsl.w	r4, r6, r4
 8000228:	f891 c003 	ldrb.w	ip, [r1, #3]
 800022c:	ea27 0709 	bic.w	r7, r7, r9
 8000230:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8000234:	ea47 0704 	orr.w	r7, r7, r4
 8000238:	d034      	beq.n	80002a4 <GPIO_Init+0xc0>
 800023a:	f1bc 0f48 	cmp.w	ip, #72	; 0x48
 800023e:	f103 0301 	add.w	r3, r3, #1
 8000242:	bf08      	it	eq
 8000244:	6102      	streq	r2, [r0, #16]
 8000246:	2b08      	cmp	r3, #8
 8000248:	d1e3      	bne.n	8000212 <GPIO_Init+0x2e>
 800024a:	6007      	str	r7, [r0, #0]
 800024c:	880a      	ldrh	r2, [r1, #0]
 800024e:	2aff      	cmp	r2, #255	; 0xff
 8000250:	d925      	bls.n	800029e <GPIO_Init+0xba>
 8000252:	6847      	ldr	r7, [r0, #4]
 8000254:	2300      	movs	r3, #0
 8000256:	2501      	movs	r5, #1
 8000258:	f04f 0c0f 	mov.w	ip, #15
 800025c:	e003      	b.n	8000266 <GPIO_Init+0x82>
 800025e:	3301      	adds	r3, #1
 8000260:	2b08      	cmp	r3, #8
 8000262:	d01b      	beq.n	800029c <GPIO_Init+0xb8>
 8000264:	880a      	ldrh	r2, [r1, #0]
 8000266:	f103 0408 	add.w	r4, r3, #8
 800026a:	fa05 f404 	lsl.w	r4, r5, r4
 800026e:	4022      	ands	r2, r4
 8000270:	42a2      	cmp	r2, r4
 8000272:	d1f4      	bne.n	800025e <GPIO_Init+0x7a>
 8000274:	009c      	lsls	r4, r3, #2
 8000276:	fa0c f904 	lsl.w	r9, ip, r4
 800027a:	fa06 f804 	lsl.w	r8, r6, r4
 800027e:	78cc      	ldrb	r4, [r1, #3]
 8000280:	3301      	adds	r3, #1
 8000282:	2c28      	cmp	r4, #40	; 0x28
 8000284:	bf04      	itt	eq
 8000286:	6142      	streq	r2, [r0, #20]
 8000288:	78cc      	ldrbeq	r4, [r1, #3]
 800028a:	ea27 0709 	bic.w	r7, r7, r9
 800028e:	2c48      	cmp	r4, #72	; 0x48
 8000290:	bf08      	it	eq
 8000292:	6102      	streq	r2, [r0, #16]
 8000294:	2b08      	cmp	r3, #8
 8000296:	ea47 0708 	orr.w	r7, r7, r8
 800029a:	d1e3      	bne.n	8000264 <GPIO_Init+0x80>
 800029c:	6047      	str	r7, [r0, #4]
 800029e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002a2:	4770      	bx	lr
 80002a4:	6142      	str	r2, [r0, #20]
 80002a6:	e7b1      	b.n	800020c <GPIO_Init+0x28>

080002a8 <GPIO_StructInit>:
 80002a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80002ac:	2202      	movs	r2, #2
 80002ae:	2304      	movs	r3, #4
 80002b0:	8001      	strh	r1, [r0, #0]
 80002b2:	7082      	strb	r2, [r0, #2]
 80002b4:	70c3      	strb	r3, [r0, #3]
 80002b6:	4770      	bx	lr

080002b8 <GPIO_ReadInputDataBit>:
 80002b8:	6883      	ldr	r3, [r0, #8]
 80002ba:	4219      	tst	r1, r3
 80002bc:	bf0c      	ite	eq
 80002be:	2000      	moveq	r0, #0
 80002c0:	2001      	movne	r0, #1
 80002c2:	4770      	bx	lr

080002c4 <GPIO_ReadInputData>:
 80002c4:	6880      	ldr	r0, [r0, #8]
 80002c6:	b280      	uxth	r0, r0
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop

080002cc <GPIO_ReadOutputDataBit>:
 80002cc:	68c3      	ldr	r3, [r0, #12]
 80002ce:	4219      	tst	r1, r3
 80002d0:	bf0c      	ite	eq
 80002d2:	2000      	moveq	r0, #0
 80002d4:	2001      	movne	r0, #1
 80002d6:	4770      	bx	lr

080002d8 <GPIO_ReadOutputData>:
 80002d8:	68c0      	ldr	r0, [r0, #12]
 80002da:	b280      	uxth	r0, r0
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <GPIO_SetBits>:
 80002e0:	6101      	str	r1, [r0, #16]
 80002e2:	4770      	bx	lr

080002e4 <GPIO_ResetBits>:
 80002e4:	6141      	str	r1, [r0, #20]
 80002e6:	4770      	bx	lr

080002e8 <GPIO_WriteBit>:
 80002e8:	b90a      	cbnz	r2, 80002ee <GPIO_WriteBit+0x6>
 80002ea:	6141      	str	r1, [r0, #20]
 80002ec:	4770      	bx	lr
 80002ee:	6101      	str	r1, [r0, #16]
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop

080002f4 <GPIO_Write>:
 80002f4:	60c1      	str	r1, [r0, #12]
 80002f6:	4770      	bx	lr

080002f8 <GPIO_PinLockConfig>:
 80002f8:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
 80002fc:	6183      	str	r3, [r0, #24]
 80002fe:	6181      	str	r1, [r0, #24]
 8000300:	6183      	str	r3, [r0, #24]
 8000302:	6983      	ldr	r3, [r0, #24]
 8000304:	6983      	ldr	r3, [r0, #24]
 8000306:	4770      	bx	lr

08000308 <GPIO_EventOutputConfig>:
 8000308:	b410      	push	{r4}
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <GPIO_EventOutputConfig+0x1c>)
 800030c:	f64f 7280 	movw	r2, #65408	; 0xff80
 8000310:	681c      	ldr	r4, [r3, #0]
 8000312:	4022      	ands	r2, r4
 8000314:	4311      	orrs	r1, r2
 8000316:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
 800031a:	6018      	str	r0, [r3, #0]
 800031c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40010000 	andmi	r0, r1, r0

08000328 <GPIO_EventOutputCmd>:
 8000328:	4b01      	ldr	r3, [pc, #4]	; (8000330 <GPIO_EventOutputCmd+0x8>)
 800032a:	6018      	str	r0, [r3, #0]
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	4220001c 	eormi	r0, r0, #28

08000334 <GPIO_PinRemapConfig>:
 8000334:	b430      	push	{r4, r5}
 8000336:	2800      	cmp	r0, #0
 8000338:	4b18      	ldr	r3, [pc, #96]	; (800039c <GPIO_PinRemapConfig+0x68>)
 800033a:	f400 1240 	and.w	r2, r0, #3145728	; 0x300000
 800033e:	bfb4      	ite	lt
 8000340:	69db      	ldrlt	r3, [r3, #28]
 8000342:	685b      	ldrge	r3, [r3, #4]
 8000344:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8000348:	b284      	uxth	r4, r0
 800034a:	d01f      	beq.n	800038c <GPIO_PinRemapConfig+0x58>
 800034c:	02c2      	lsls	r2, r0, #11
 800034e:	d514      	bpl.n	800037a <GPIO_PinRemapConfig+0x46>
 8000350:	f3c0 4203 	ubfx	r2, r0, #16, #4
 8000354:	2503      	movs	r5, #3
 8000356:	fa05 f202 	lsl.w	r2, r5, r2
 800035a:	ea23 0302 	bic.w	r3, r3, r2
 800035e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000362:	b119      	cbz	r1, 800036c <GPIO_PinRemapConfig+0x38>
 8000364:	0d42      	lsrs	r2, r0, #21
 8000366:	0112      	lsls	r2, r2, #4
 8000368:	4094      	lsls	r4, r2
 800036a:	4323      	orrs	r3, r4
 800036c:	4a0b      	ldr	r2, [pc, #44]	; (800039c <GPIO_PinRemapConfig+0x68>)
 800036e:	2800      	cmp	r0, #0
 8000370:	bfb4      	ite	lt
 8000372:	61d3      	strlt	r3, [r2, #28]
 8000374:	6053      	strge	r3, [r2, #4]
 8000376:	bc30      	pop	{r4, r5}
 8000378:	4770      	bx	lr
 800037a:	0d42      	lsrs	r2, r0, #21
 800037c:	0112      	lsls	r2, r2, #4
 800037e:	fa04 f202 	lsl.w	r2, r4, r2
 8000382:	ea23 0302 	bic.w	r3, r3, r2
 8000386:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800038a:	e7ea      	b.n	8000362 <GPIO_PinRemapConfig+0x2e>
 800038c:	4a03      	ldr	r2, [pc, #12]	; (800039c <GPIO_PinRemapConfig+0x68>)
 800038e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000392:	6855      	ldr	r5, [r2, #4]
 8000394:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8000398:	6055      	str	r5, [r2, #4]
 800039a:	e7e2      	b.n	8000362 <GPIO_PinRemapConfig+0x2e>
 800039c:	40010000 	andmi	r0, r1, r0

080003a0 <GPIO_EXTILineConfig>:
 80003a0:	f001 0303 	and.w	r3, r1, #3
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	220f      	movs	r2, #15
 80003a8:	409a      	lsls	r2, r3
 80003aa:	fa00 f303 	lsl.w	r3, r0, r3
 80003ae:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80003b2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80003b6:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 80003ba:	6888      	ldr	r0, [r1, #8]
 80003bc:	ea20 0202 	bic.w	r2, r0, r2
 80003c0:	608a      	str	r2, [r1, #8]
 80003c2:	688a      	ldr	r2, [r1, #8]
 80003c4:	4313      	orrs	r3, r2
 80003c6:	608b      	str	r3, [r1, #8]
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop

080003cc <GPIO_ETH_MediaInterfaceConfig>:
 80003cc:	4b01      	ldr	r3, [pc, #4]	; (80003d4 <GPIO_ETH_MediaInterfaceConfig+0x8>)
 80003ce:	6018      	str	r0, [r3, #0]
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	422000dc 	eormi	r0, r0, #220	; 0xdc

080003d8 <RCC_DeInit>:
 80003d8:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <RCC_DeInit+0x38>)
 80003da:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <RCC_DeInit+0x3c>)
 80003dc:	6818      	ldr	r0, [r3, #0]
 80003de:	f44f 011f 	mov.w	r1, #10420224	; 0x9f0000
 80003e2:	f040 0001 	orr.w	r0, r0, #1
 80003e6:	6018      	str	r0, [r3, #0]
 80003e8:	6858      	ldr	r0, [r3, #4]
 80003ea:	4002      	ands	r2, r0
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80003f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	685a      	ldr	r2, [r3, #4]
 8000404:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	6099      	str	r1, [r3, #8]
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40021000 	andmi	r1, r2, r0
 8000414:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000

08000418 <RCC_HSEConfig>:
 8000418:	4b0c      	ldr	r3, [pc, #48]	; (800044c <RCC_HSEConfig+0x34>)
 800041a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	d008      	beq.n	8000442 <RCC_HSEConfig+0x2a>
 8000430:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8000434:	d104      	bne.n	8000440 <RCC_HSEConfig+0x28>
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	4770      	bx	lr
 8000440:	4770      	bx	lr
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	4770      	bx	lr
 800044c:	40021000 	andmi	r1, r2, r0

08000450 <RCC_WaitForHSEStartUp>:
 8000450:	b082      	sub	sp, #8
 8000452:	2300      	movs	r3, #0
 8000454:	4a0b      	ldr	r2, [pc, #44]	; (8000484 <RCC_WaitForHSEStartUp+0x34>)
 8000456:	9301      	str	r3, [sp, #4]
 8000458:	6813      	ldr	r3, [r2, #0]
 800045a:	039b      	lsls	r3, r3, #14
 800045c:	d40c      	bmi.n	8000478 <RCC_WaitForHSEStartUp+0x28>
 800045e:	9b01      	ldr	r3, [sp, #4]
 8000460:	3301      	adds	r3, #1
 8000462:	9301      	str	r3, [sp, #4]
 8000464:	9b01      	ldr	r3, [sp, #4]
 8000466:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800046a:	d1f5      	bne.n	8000458 <RCC_WaitForHSEStartUp+0x8>
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <RCC_WaitForHSEStartUp+0x34>)
 800046e:	6818      	ldr	r0, [r3, #0]
 8000470:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8000474:	b002      	add	sp, #8
 8000476:	4770      	bx	lr
 8000478:	9b01      	ldr	r3, [sp, #4]
 800047a:	3301      	adds	r3, #1
 800047c:	9301      	str	r3, [sp, #4]
 800047e:	9b01      	ldr	r3, [sp, #4]
 8000480:	e7f4      	b.n	800046c <RCC_WaitForHSEStartUp+0x1c>
 8000482:	bf00      	nop
 8000484:	40021000 	andmi	r1, r2, r0

08000488 <RCC_AdjustHSICalibrationValue>:
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <RCC_AdjustHSICalibrationValue+0x10>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000490:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000494:	6018      	str	r0, [r3, #0]
 8000496:	4770      	bx	lr
 8000498:	40021000 	andmi	r1, r2, r0

0800049c <RCC_HSICmd>:
 800049c:	4b01      	ldr	r3, [pc, #4]	; (80004a4 <RCC_HSICmd+0x8>)
 800049e:	6018      	str	r0, [r3, #0]
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	42420000 	submi	r0, r2, #0

080004a8 <RCC_PLLConfig>:
 80004a8:	4b03      	ldr	r3, [pc, #12]	; (80004b8 <RCC_PLLConfig+0x10>)
 80004aa:	685a      	ldr	r2, [r3, #4]
 80004ac:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80004b0:	4311      	orrs	r1, r2
 80004b2:	4308      	orrs	r0, r1
 80004b4:	6058      	str	r0, [r3, #4]
 80004b6:	4770      	bx	lr
 80004b8:	40021000 	andmi	r1, r2, r0

080004bc <RCC_PLLCmd>:
 80004bc:	4b01      	ldr	r3, [pc, #4]	; (80004c4 <RCC_PLLCmd+0x8>)
 80004be:	6018      	str	r0, [r3, #0]
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	42420060 	submi	r0, r2, #96	; 0x60

080004c8 <RCC_SYSCLKConfig>:
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <RCC_SYSCLKConfig+0x10>)
 80004ca:	685a      	ldr	r2, [r3, #4]
 80004cc:	f022 0203 	bic.w	r2, r2, #3
 80004d0:	4310      	orrs	r0, r2
 80004d2:	6058      	str	r0, [r3, #4]
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40021000 	andmi	r1, r2, r0

080004dc <RCC_GetSYSCLKSource>:
 80004dc:	4b02      	ldr	r3, [pc, #8]	; (80004e8 <RCC_GetSYSCLKSource+0xc>)
 80004de:	6858      	ldr	r0, [r3, #4]
 80004e0:	f000 000c 	and.w	r0, r0, #12
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40021000 	andmi	r1, r2, r0

080004ec <RCC_HCLKConfig>:
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <RCC_HCLKConfig+0x10>)
 80004ee:	685a      	ldr	r2, [r3, #4]
 80004f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80004f4:	4310      	orrs	r0, r2
 80004f6:	6058      	str	r0, [r3, #4]
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40021000 	andmi	r1, r2, r0

08000500 <RCC_PCLK1Config>:
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <RCC_PCLK1Config+0x10>)
 8000502:	685a      	ldr	r2, [r3, #4]
 8000504:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000508:	4310      	orrs	r0, r2
 800050a:	6058      	str	r0, [r3, #4]
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	andmi	r1, r2, r0

08000514 <RCC_PCLK2Config>:
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <RCC_PCLK2Config+0x10>)
 8000516:	685a      	ldr	r2, [r3, #4]
 8000518:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 800051c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000520:	6058      	str	r0, [r3, #4]
 8000522:	4770      	bx	lr
 8000524:	40021000 	andmi	r1, r2, r0

08000528 <RCC_ITConfig>:
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <RCC_ITConfig+0x14>)
 800052a:	781a      	ldrb	r2, [r3, #0]
 800052c:	b919      	cbnz	r1, 8000536 <RCC_ITConfig+0xe>
 800052e:	ea22 0000 	bic.w	r0, r2, r0
 8000532:	7018      	strb	r0, [r3, #0]
 8000534:	4770      	bx	lr
 8000536:	4310      	orrs	r0, r2
 8000538:	7018      	strb	r0, [r3, #0]
 800053a:	4770      	bx	lr
 800053c:	40021009 	andmi	r1, r2, r9

08000540 <RCC_USBCLKConfig>:
 8000540:	4b01      	ldr	r3, [pc, #4]	; (8000548 <RCC_USBCLKConfig+0x8>)
 8000542:	6018      	str	r0, [r3, #0]
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	424200d8 	submi	r0, r2, #216	; 0xd8

0800054c <RCC_ADCCLKConfig>:
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <RCC_ADCCLKConfig+0x10>)
 800054e:	685a      	ldr	r2, [r3, #4]
 8000550:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000554:	4310      	orrs	r0, r2
 8000556:	6058      	str	r0, [r3, #4]
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40021000 	andmi	r1, r2, r0

08000560 <RCC_LSEConfig>:
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <RCC_LSEConfig+0x1c>)
 8000562:	2200      	movs	r2, #0
 8000564:	2801      	cmp	r0, #1
 8000566:	701a      	strb	r2, [r3, #0]
 8000568:	701a      	strb	r2, [r3, #0]
 800056a:	d005      	beq.n	8000578 <RCC_LSEConfig+0x18>
 800056c:	2804      	cmp	r0, #4
 800056e:	d102      	bne.n	8000576 <RCC_LSEConfig+0x16>
 8000570:	2205      	movs	r2, #5
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	4770      	bx	lr
 8000576:	4770      	bx	lr
 8000578:	7018      	strb	r0, [r3, #0]
 800057a:	4770      	bx	lr
 800057c:	40021020 	andmi	r1, r2, r0, lsr #32

08000580 <RCC_LSICmd>:
 8000580:	4b01      	ldr	r3, [pc, #4]	; (8000588 <RCC_LSICmd+0x8>)
 8000582:	6018      	str	r0, [r3, #0]
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	42420480 	submi	r0, r2, #128, 8	; 0x80000000

0800058c <RCC_RTCCLKConfig>:
 800058c:	4b02      	ldr	r3, [pc, #8]	; (8000598 <RCC_RTCCLKConfig+0xc>)
 800058e:	6a1a      	ldr	r2, [r3, #32]
 8000590:	4310      	orrs	r0, r2
 8000592:	6218      	str	r0, [r3, #32]
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40021000 	andmi	r1, r2, r0

0800059c <RCC_RTCCLKCmd>:
 800059c:	4b01      	ldr	r3, [pc, #4]	; (80005a4 <RCC_RTCCLKCmd+0x8>)
 800059e:	6018      	str	r0, [r3, #0]
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	4242043c 	submi	r0, r2, #60, 8	; 0x3c000000

080005a8 <RCC_GetClocksFreq>:
 80005a8:	b410      	push	{r4}
 80005aa:	4a1f      	ldr	r2, [pc, #124]	; (8000628 <RCC_GetClocksFreq+0x80>)
 80005ac:	6853      	ldr	r3, [r2, #4]
 80005ae:	f003 030c 	and.w	r3, r3, #12
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d001      	beq.n	80005ba <RCC_GetClocksFreq+0x12>
 80005b6:	2b08      	cmp	r3, #8
 80005b8:	d021      	beq.n	80005fe <RCC_GetClocksFreq+0x56>
 80005ba:	491c      	ldr	r1, [pc, #112]	; (800062c <RCC_GetClocksFreq+0x84>)
 80005bc:	6001      	str	r1, [r0, #0]
 80005be:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <RCC_GetClocksFreq+0x80>)
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <RCC_GetClocksFreq+0x88>)
 80005c2:	6854      	ldr	r4, [r2, #4]
 80005c4:	f3c4 1403 	ubfx	r4, r4, #4, #4
 80005c8:	5d1c      	ldrb	r4, [r3, r4]
 80005ca:	40e1      	lsrs	r1, r4
 80005cc:	6041      	str	r1, [r0, #4]
 80005ce:	6854      	ldr	r4, [r2, #4]
 80005d0:	f3c4 2402 	ubfx	r4, r4, #8, #3
 80005d4:	5d1c      	ldrb	r4, [r3, r4]
 80005d6:	fa21 f404 	lsr.w	r4, r1, r4
 80005da:	6084      	str	r4, [r0, #8]
 80005dc:	6854      	ldr	r4, [r2, #4]
 80005de:	f3c4 24c2 	ubfx	r4, r4, #11, #3
 80005e2:	5d1c      	ldrb	r4, [r3, r4]
 80005e4:	40e1      	lsrs	r1, r4
 80005e6:	60c1      	str	r1, [r0, #12]
 80005e8:	6852      	ldr	r2, [r2, #4]
 80005ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005ee:	f3c2 3281 	ubfx	r2, r2, #14, #2
 80005f2:	4413      	add	r3, r2
 80005f4:	7c1b      	ldrb	r3, [r3, #16]
 80005f6:	fbb1 f1f3 	udiv	r1, r1, r3
 80005fa:	6101      	str	r1, [r0, #16]
 80005fc:	4770      	bx	lr
 80005fe:	6851      	ldr	r1, [r2, #4]
 8000600:	6853      	ldr	r3, [r2, #4]
 8000602:	f3c1 4183 	ubfx	r1, r1, #18, #4
 8000606:	03dc      	lsls	r4, r3, #15
 8000608:	f101 0102 	add.w	r1, r1, #2
 800060c:	d507      	bpl.n	800061e <RCC_GetClocksFreq+0x76>
 800060e:	6853      	ldr	r3, [r2, #4]
 8000610:	039b      	lsls	r3, r3, #14
 8000612:	d404      	bmi.n	800061e <RCC_GetClocksFreq+0x76>
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <RCC_GetClocksFreq+0x84>)
 8000616:	fb03 f101 	mul.w	r1, r3, r1
 800061a:	6001      	str	r1, [r0, #0]
 800061c:	e7cf      	b.n	80005be <RCC_GetClocksFreq+0x16>
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <RCC_GetClocksFreq+0x8c>)
 8000620:	fb03 f101 	mul.w	r1, r3, r1
 8000624:	6001      	str	r1, [r0, #0]
 8000626:	e7ca      	b.n	80005be <RCC_GetClocksFreq+0x16>
 8000628:	40021000 	andmi	r1, r2, r0
 800062c:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8000630:	20000000 	andcs	r0, r0, r0
 8000634:	003d0900 	eorseq	r0, sp, r0, lsl #18

08000638 <RCC_AHBPeriphClockCmd>:
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <RCC_AHBPeriphClockCmd+0x14>)
 800063a:	695a      	ldr	r2, [r3, #20]
 800063c:	b919      	cbnz	r1, 8000646 <RCC_AHBPeriphClockCmd+0xe>
 800063e:	ea22 0000 	bic.w	r0, r2, r0
 8000642:	6158      	str	r0, [r3, #20]
 8000644:	4770      	bx	lr
 8000646:	4310      	orrs	r0, r2
 8000648:	6158      	str	r0, [r3, #20]
 800064a:	4770      	bx	lr
 800064c:	40021000 	andmi	r1, r2, r0

08000650 <RCC_APB2PeriphClockCmd>:
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <RCC_APB2PeriphClockCmd+0x14>)
 8000652:	699a      	ldr	r2, [r3, #24]
 8000654:	b919      	cbnz	r1, 800065e <RCC_APB2PeriphClockCmd+0xe>
 8000656:	ea22 0000 	bic.w	r0, r2, r0
 800065a:	6198      	str	r0, [r3, #24]
 800065c:	4770      	bx	lr
 800065e:	4310      	orrs	r0, r2
 8000660:	6198      	str	r0, [r3, #24]
 8000662:	4770      	bx	lr
 8000664:	40021000 	andmi	r1, r2, r0

08000668 <RCC_APB1PeriphClockCmd>:
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <RCC_APB1PeriphClockCmd+0x14>)
 800066a:	69da      	ldr	r2, [r3, #28]
 800066c:	b919      	cbnz	r1, 8000676 <RCC_APB1PeriphClockCmd+0xe>
 800066e:	ea22 0000 	bic.w	r0, r2, r0
 8000672:	61d8      	str	r0, [r3, #28]
 8000674:	4770      	bx	lr
 8000676:	4310      	orrs	r0, r2
 8000678:	61d8      	str	r0, [r3, #28]
 800067a:	4770      	bx	lr
 800067c:	40021000 	andmi	r1, r2, r0

08000680 <RCC_APB2PeriphResetCmd>:
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <RCC_APB2PeriphResetCmd+0x14>)
 8000682:	68da      	ldr	r2, [r3, #12]
 8000684:	b919      	cbnz	r1, 800068e <RCC_APB2PeriphResetCmd+0xe>
 8000686:	ea22 0000 	bic.w	r0, r2, r0
 800068a:	60d8      	str	r0, [r3, #12]
 800068c:	4770      	bx	lr
 800068e:	4310      	orrs	r0, r2
 8000690:	60d8      	str	r0, [r3, #12]
 8000692:	4770      	bx	lr
 8000694:	40021000 	andmi	r1, r2, r0

08000698 <RCC_APB1PeriphResetCmd>:
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <RCC_APB1PeriphResetCmd+0x14>)
 800069a:	691a      	ldr	r2, [r3, #16]
 800069c:	b919      	cbnz	r1, 80006a6 <RCC_APB1PeriphResetCmd+0xe>
 800069e:	ea22 0000 	bic.w	r0, r2, r0
 80006a2:	6118      	str	r0, [r3, #16]
 80006a4:	4770      	bx	lr
 80006a6:	4310      	orrs	r0, r2
 80006a8:	6118      	str	r0, [r3, #16]
 80006aa:	4770      	bx	lr
 80006ac:	40021000 	andmi	r1, r2, r0

080006b0 <RCC_BackupResetCmd>:
 80006b0:	4b01      	ldr	r3, [pc, #4]	; (80006b8 <RCC_BackupResetCmd+0x8>)
 80006b2:	6018      	str	r0, [r3, #0]
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	42420440 	submi	r0, r2, #64, 8	; 0x40000000

080006bc <RCC_ClockSecuritySystemCmd>:
 80006bc:	4b01      	ldr	r3, [pc, #4]	; (80006c4 <RCC_ClockSecuritySystemCmd+0x8>)
 80006be:	6018      	str	r0, [r3, #0]
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	4242004c 	submi	r0, r2, #76	; 0x4c

080006c8 <RCC_MCOConfig>:
 80006c8:	4b01      	ldr	r3, [pc, #4]	; (80006d0 <RCC_MCOConfig+0x8>)
 80006ca:	7018      	strb	r0, [r3, #0]
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40021007 	andmi	r1, r2, r7

080006d4 <RCC_GetFlagStatus>:
 80006d4:	0943      	lsrs	r3, r0, #5
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d00b      	beq.n	80006f2 <RCC_GetFlagStatus+0x1e>
 80006da:	2b02      	cmp	r3, #2
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <RCC_GetFlagStatus+0x30>)
 80006de:	f000 001f 	and.w	r0, r0, #31
 80006e2:	bf0c      	ite	eq
 80006e4:	6a1b      	ldreq	r3, [r3, #32]
 80006e6:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
 80006e8:	fa23 f000 	lsr.w	r0, r3, r0
 80006ec:	f000 0001 	and.w	r0, r0, #1
 80006f0:	4770      	bx	lr
 80006f2:	4b04      	ldr	r3, [pc, #16]	; (8000704 <RCC_GetFlagStatus+0x30>)
 80006f4:	f000 001f 	and.w	r0, r0, #31
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	fa23 f000 	lsr.w	r0, r3, r0
 80006fe:	f000 0001 	and.w	r0, r0, #1
 8000702:	4770      	bx	lr
 8000704:	40021000 	andmi	r1, r2, r0

08000708 <RCC_ClearFlag>:
 8000708:	4b02      	ldr	r3, [pc, #8]	; (8000714 <RCC_ClearFlag+0xc>)
 800070a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800070c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
 8000712:	4770      	bx	lr
 8000714:	40021000 	andmi	r1, r2, r0

08000718 <RCC_GetITStatus>:
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <RCC_GetITStatus+0x10>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	4218      	tst	r0, r3
 800071e:	bf0c      	ite	eq
 8000720:	2000      	moveq	r0, #0
 8000722:	2001      	movne	r0, #1
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40021000 	andmi	r1, r2, r0

0800072c <RCC_ClearITPendingBit>:
 800072c:	4b01      	ldr	r3, [pc, #4]	; (8000734 <RCC_ClearITPendingBit+0x8>)
 800072e:	7018      	strb	r0, [r3, #0]
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	4002100a 	andmi	r1, r2, sl

08000738 <USART_DeInit>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <USART_DeInit+0x9c>)
 800073c:	4298      	cmp	r0, r3
 800073e:	d018      	beq.n	8000772 <USART_DeInit+0x3a>
 8000740:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <USART_DeInit+0xa0>)
 8000742:	4298      	cmp	r0, r3
 8000744:	d021      	beq.n	800078a <USART_DeInit+0x52>
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <USART_DeInit+0xa4>)
 8000748:	4298      	cmp	r0, r3
 800074a:	d02a      	beq.n	80007a2 <USART_DeInit+0x6a>
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <USART_DeInit+0xa8>)
 800074e:	4298      	cmp	r0, r3
 8000750:	d033      	beq.n	80007ba <USART_DeInit+0x82>
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <USART_DeInit+0xac>)
 8000754:	4298      	cmp	r0, r3
 8000756:	d000      	beq.n	800075a <USART_DeInit+0x22>
 8000758:	bd08      	pop	{r3, pc}
 800075a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800075e:	2101      	movs	r1, #1
 8000760:	f7ff ff9a 	bl	8000698 <RCC_APB1PeriphResetCmd>
 8000764:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000768:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800076c:	2100      	movs	r1, #0
 800076e:	f7ff bf93 	b.w	8000698 <RCC_APB1PeriphResetCmd>
 8000772:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000776:	2101      	movs	r1, #1
 8000778:	f7ff ff82 	bl	8000680 <RCC_APB2PeriphResetCmd>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000784:	2100      	movs	r1, #0
 8000786:	f7ff bf7b 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 800078a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800078e:	2101      	movs	r1, #1
 8000790:	f7ff ff82 	bl	8000698 <RCC_APB1PeriphResetCmd>
 8000794:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000798:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800079c:	2100      	movs	r1, #0
 800079e:	f7ff bf7b 	b.w	8000698 <RCC_APB1PeriphResetCmd>
 80007a2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80007a6:	2101      	movs	r1, #1
 80007a8:	f7ff ff76 	bl	8000698 <RCC_APB1PeriphResetCmd>
 80007ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007b0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80007b4:	2100      	movs	r1, #0
 80007b6:	f7ff bf6f 	b.w	8000698 <RCC_APB1PeriphResetCmd>
 80007ba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80007be:	2101      	movs	r1, #1
 80007c0:	f7ff ff6a 	bl	8000698 <RCC_APB1PeriphResetCmd>
 80007c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80007cc:	2100      	movs	r1, #0
 80007ce:	f7ff bf63 	b.w	8000698 <RCC_APB1PeriphResetCmd>
 80007d2:	bf00      	nop
 80007d4:	40013800 	andmi	r3, r1, r0, lsl #16
 80007d8:	40004400 	andmi	r4, r0, r0, lsl #8
 80007dc:	40004800 	andmi	r4, r0, r0, lsl #16
 80007e0:	40004c00 	andmi	r4, r0, r0, lsl #24
 80007e4:	40005000 	andmi	r5, r0, r0

080007e8 <USART_Init>:
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	8a03      	ldrh	r3, [r0, #16]
 80007ec:	88ca      	ldrh	r2, [r1, #6]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007f4:	4313      	orrs	r3, r2
 80007f6:	8203      	strh	r3, [r0, #16]
 80007f8:	8982      	ldrh	r2, [r0, #12]
 80007fa:	4604      	mov	r4, r0
 80007fc:	890b      	ldrh	r3, [r1, #8]
 80007fe:	8888      	ldrh	r0, [r1, #4]
 8000800:	460d      	mov	r5, r1
 8000802:	b292      	uxth	r2, r2
 8000804:	8949      	ldrh	r1, [r1, #10]
 8000806:	4303      	orrs	r3, r0
 8000808:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800080c:	430b      	orrs	r3, r1
 800080e:	f022 020c 	bic.w	r2, r2, #12
 8000812:	4313      	orrs	r3, r2
 8000814:	b29b      	uxth	r3, r3
 8000816:	81a3      	strh	r3, [r4, #12]
 8000818:	8aa3      	ldrh	r3, [r4, #20]
 800081a:	89aa      	ldrh	r2, [r5, #12]
 800081c:	b29b      	uxth	r3, r3
 800081e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000822:	b087      	sub	sp, #28
 8000824:	4313      	orrs	r3, r2
 8000826:	82a3      	strh	r3, [r4, #20]
 8000828:	a801      	add	r0, sp, #4
 800082a:	f7ff febd 	bl	80005a8 <RCC_GetClocksFreq>
 800082e:	89a1      	ldrh	r1, [r4, #12]
 8000830:	9a04      	ldr	r2, [sp, #16]
 8000832:	481a      	ldr	r0, [pc, #104]	; (800089c <USART_Init+0xb4>)
 8000834:	9b03      	ldr	r3, [sp, #12]
 8000836:	b209      	sxth	r1, r1
 8000838:	4284      	cmp	r4, r0
 800083a:	bf08      	it	eq
 800083c:	4613      	moveq	r3, r2
 800083e:	682a      	ldr	r2, [r5, #0]
 8000840:	2900      	cmp	r1, #0
 8000842:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000846:	bfb4      	ite	lt
 8000848:	0052      	lsllt	r2, r2, #1
 800084a:	0092      	lslge	r2, r2, #2
 800084c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000850:	4913      	ldr	r1, [pc, #76]	; (80008a0 <USART_Init+0xb8>)
 8000852:	fbb3 f3f2 	udiv	r3, r3, r2
 8000856:	fba1 5203 	umull	r5, r2, r1, r3
 800085a:	89a0      	ldrh	r0, [r4, #12]
 800085c:	0952      	lsrs	r2, r2, #5
 800085e:	b200      	sxth	r0, r0
 8000860:	2564      	movs	r5, #100	; 0x64
 8000862:	2800      	cmp	r0, #0
 8000864:	fb02 3315 	mls	r3, r2, r5, r3
 8000868:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800086c:	db0a      	blt.n	8000884 <USART_Init+0x9c>
 800086e:	011b      	lsls	r3, r3, #4
 8000870:	3332      	adds	r3, #50	; 0x32
 8000872:	fba1 5103 	umull	r5, r1, r1, r3
 8000876:	f3c1 1143 	ubfx	r1, r1, #5, #4
 800087a:	430a      	orrs	r2, r1
 800087c:	b292      	uxth	r2, r2
 800087e:	8122      	strh	r2, [r4, #8]
 8000880:	b007      	add	sp, #28
 8000882:	bd30      	pop	{r4, r5, pc}
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	3332      	adds	r3, #50	; 0x32
 8000888:	fba1 0103 	umull	r0, r1, r1, r3
 800088c:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8000890:	430a      	orrs	r2, r1
 8000892:	b292      	uxth	r2, r2
 8000894:	8122      	strh	r2, [r4, #8]
 8000896:	b007      	add	sp, #28
 8000898:	bd30      	pop	{r4, r5, pc}
 800089a:	bf00      	nop
 800089c:	40013800 	andmi	r3, r1, r0, lsl #16
 80008a0:	51eb851f 	mvnpl	r8, pc, lsl r5

080008a4 <USART_StructInit>:
 80008a4:	2300      	movs	r3, #0
 80008a6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80008aa:	220c      	movs	r2, #12
 80008ac:	6001      	str	r1, [r0, #0]
 80008ae:	8142      	strh	r2, [r0, #10]
 80008b0:	8083      	strh	r3, [r0, #4]
 80008b2:	80c3      	strh	r3, [r0, #6]
 80008b4:	8103      	strh	r3, [r0, #8]
 80008b6:	8183      	strh	r3, [r0, #12]
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop

080008bc <USART_ClockInit>:
 80008bc:	b430      	push	{r4, r5}
 80008be:	884d      	ldrh	r5, [r1, #2]
 80008c0:	880b      	ldrh	r3, [r1, #0]
 80008c2:	888c      	ldrh	r4, [r1, #4]
 80008c4:	8a02      	ldrh	r2, [r0, #16]
 80008c6:	432b      	orrs	r3, r5
 80008c8:	88c9      	ldrh	r1, [r1, #6]
 80008ca:	4323      	orrs	r3, r4
 80008cc:	b292      	uxth	r2, r2
 80008ce:	430b      	orrs	r3, r1
 80008d0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80008d4:	4313      	orrs	r3, r2
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	8203      	strh	r3, [r0, #16]
 80008da:	bc30      	pop	{r4, r5}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop

080008e0 <USART_ClockStructInit>:
 80008e0:	2300      	movs	r3, #0
 80008e2:	8003      	strh	r3, [r0, #0]
 80008e4:	8043      	strh	r3, [r0, #2]
 80008e6:	8083      	strh	r3, [r0, #4]
 80008e8:	80c3      	strh	r3, [r0, #6]
 80008ea:	4770      	bx	lr

080008ec <USART_Cmd>:
 80008ec:	8983      	ldrh	r3, [r0, #12]
 80008ee:	b929      	cbnz	r1, 80008fc <USART_Cmd+0x10>
 80008f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008f4:	041b      	lsls	r3, r3, #16
 80008f6:	0c1b      	lsrs	r3, r3, #16
 80008f8:	8183      	strh	r3, [r0, #12]
 80008fa:	4770      	bx	lr
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000902:	8183      	strh	r3, [r0, #12]
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <USART_ITConfig>:
 8000908:	f001 031f 	and.w	r3, r1, #31
 800090c:	b410      	push	{r4}
 800090e:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8000912:	2401      	movs	r4, #1
 8000914:	42a1      	cmp	r1, r4
 8000916:	fa04 f303 	lsl.w	r3, r4, r3
 800091a:	d010      	beq.n	800093e <USART_ITConfig+0x36>
 800091c:	2902      	cmp	r1, #2
 800091e:	bf0c      	ite	eq
 8000920:	3010      	addeq	r0, #16
 8000922:	3014      	addne	r0, #20
 8000924:	6804      	ldr	r4, [r0, #0]
 8000926:	b92a      	cbnz	r2, 8000934 <USART_ITConfig+0x2c>
 8000928:	ea24 0303 	bic.w	r3, r4, r3
 800092c:	6003      	str	r3, [r0, #0]
 800092e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	4323      	orrs	r3, r4
 8000936:	6003      	str	r3, [r0, #0]
 8000938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	300c      	adds	r0, #12
 8000940:	e7f0      	b.n	8000924 <USART_ITConfig+0x1c>
 8000942:	bf00      	nop

08000944 <USART_DMACmd>:
 8000944:	8a83      	ldrh	r3, [r0, #20]
 8000946:	b29b      	uxth	r3, r3
 8000948:	b91a      	cbnz	r2, 8000952 <USART_DMACmd+0xe>
 800094a:	ea23 0101 	bic.w	r1, r3, r1
 800094e:	8281      	strh	r1, [r0, #20]
 8000950:	4770      	bx	lr
 8000952:	4319      	orrs	r1, r3
 8000954:	8281      	strh	r1, [r0, #20]
 8000956:	4770      	bx	lr

08000958 <USART_SetAddress>:
 8000958:	8a03      	ldrh	r3, [r0, #16]
 800095a:	f023 030f 	bic.w	r3, r3, #15
 800095e:	041b      	lsls	r3, r3, #16
 8000960:	0c1b      	lsrs	r3, r3, #16
 8000962:	8203      	strh	r3, [r0, #16]
 8000964:	8a03      	ldrh	r3, [r0, #16]
 8000966:	b29b      	uxth	r3, r3
 8000968:	4319      	orrs	r1, r3
 800096a:	8201      	strh	r1, [r0, #16]
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <USART_WakeUpConfig>:
 8000970:	8983      	ldrh	r3, [r0, #12]
 8000972:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000976:	041b      	lsls	r3, r3, #16
 8000978:	0c1b      	lsrs	r3, r3, #16
 800097a:	8183      	strh	r3, [r0, #12]
 800097c:	8983      	ldrh	r3, [r0, #12]
 800097e:	b29b      	uxth	r3, r3
 8000980:	4319      	orrs	r1, r3
 8000982:	8181      	strh	r1, [r0, #12]
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <USART_ReceiverWakeUpCmd>:
 8000988:	8983      	ldrh	r3, [r0, #12]
 800098a:	b929      	cbnz	r1, 8000998 <USART_ReceiverWakeUpCmd+0x10>
 800098c:	f023 0302 	bic.w	r3, r3, #2
 8000990:	041b      	lsls	r3, r3, #16
 8000992:	0c1b      	lsrs	r3, r3, #16
 8000994:	8183      	strh	r3, [r0, #12]
 8000996:	4770      	bx	lr
 8000998:	b29b      	uxth	r3, r3
 800099a:	f043 0302 	orr.w	r3, r3, #2
 800099e:	8183      	strh	r3, [r0, #12]
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <USART_LINBreakDetectLengthConfig>:
 80009a4:	8a03      	ldrh	r3, [r0, #16]
 80009a6:	f023 0320 	bic.w	r3, r3, #32
 80009aa:	041b      	lsls	r3, r3, #16
 80009ac:	0c1b      	lsrs	r3, r3, #16
 80009ae:	8203      	strh	r3, [r0, #16]
 80009b0:	8a03      	ldrh	r3, [r0, #16]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	4319      	orrs	r1, r3
 80009b6:	8201      	strh	r1, [r0, #16]
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <USART_LINCmd>:
 80009bc:	8a03      	ldrh	r3, [r0, #16]
 80009be:	b929      	cbnz	r1, 80009cc <USART_LINCmd+0x10>
 80009c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009c4:	041b      	lsls	r3, r3, #16
 80009c6:	0c1b      	lsrs	r3, r3, #16
 80009c8:	8203      	strh	r3, [r0, #16]
 80009ca:	4770      	bx	lr
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d2:	8203      	strh	r3, [r0, #16]
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <USART_SendData>:
 80009d8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80009dc:	8081      	strh	r1, [r0, #4]
 80009de:	4770      	bx	lr

080009e0 <USART_ReceiveData>:
 80009e0:	8880      	ldrh	r0, [r0, #4]
 80009e2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80009e6:	4770      	bx	lr

080009e8 <USART_SendBreak>:
 80009e8:	8983      	ldrh	r3, [r0, #12]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	8183      	strh	r3, [r0, #12]
 80009f2:	4770      	bx	lr

080009f4 <USART_SetGuardTime>:
 80009f4:	8b03      	ldrh	r3, [r0, #24]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	8303      	strh	r3, [r0, #24]
 80009fa:	8b03      	ldrh	r3, [r0, #24]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8000a02:	8301      	strh	r1, [r0, #24]
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <USART_SetPrescaler>:
 8000a08:	8b03      	ldrh	r3, [r0, #24]
 8000a0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000a0e:	8303      	strh	r3, [r0, #24]
 8000a10:	8b03      	ldrh	r3, [r0, #24]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	4319      	orrs	r1, r3
 8000a16:	8301      	strh	r1, [r0, #24]
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <USART_SmartCardCmd>:
 8000a1c:	8a83      	ldrh	r3, [r0, #20]
 8000a1e:	b929      	cbnz	r1, 8000a2c <USART_SmartCardCmd+0x10>
 8000a20:	f023 0320 	bic.w	r3, r3, #32
 8000a24:	041b      	lsls	r3, r3, #16
 8000a26:	0c1b      	lsrs	r3, r3, #16
 8000a28:	8283      	strh	r3, [r0, #20]
 8000a2a:	4770      	bx	lr
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	f043 0320 	orr.w	r3, r3, #32
 8000a32:	8283      	strh	r3, [r0, #20]
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <USART_SmartCardNACKCmd>:
 8000a38:	8a83      	ldrh	r3, [r0, #20]
 8000a3a:	b929      	cbnz	r1, 8000a48 <USART_SmartCardNACKCmd+0x10>
 8000a3c:	f023 0310 	bic.w	r3, r3, #16
 8000a40:	041b      	lsls	r3, r3, #16
 8000a42:	0c1b      	lsrs	r3, r3, #16
 8000a44:	8283      	strh	r3, [r0, #20]
 8000a46:	4770      	bx	lr
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	8283      	strh	r3, [r0, #20]
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <USART_HalfDuplexCmd>:
 8000a54:	8a83      	ldrh	r3, [r0, #20]
 8000a56:	b929      	cbnz	r1, 8000a64 <USART_HalfDuplexCmd+0x10>
 8000a58:	f023 0308 	bic.w	r3, r3, #8
 8000a5c:	041b      	lsls	r3, r3, #16
 8000a5e:	0c1b      	lsrs	r3, r3, #16
 8000a60:	8283      	strh	r3, [r0, #20]
 8000a62:	4770      	bx	lr
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	f043 0308 	orr.w	r3, r3, #8
 8000a6a:	8283      	strh	r3, [r0, #20]
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <USART_OverSampling8Cmd>:
 8000a70:	8983      	ldrh	r3, [r0, #12]
 8000a72:	b919      	cbnz	r1, 8000a7c <USART_OverSampling8Cmd+0xc>
 8000a74:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a78:	8183      	strh	r3, [r0, #12]
 8000a7a:	4770      	bx	lr
 8000a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	8183      	strh	r3, [r0, #12]
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <USART_OneBitMethodCmd>:
 8000a8c:	8a83      	ldrh	r3, [r0, #20]
 8000a8e:	b929      	cbnz	r1, 8000a9c <USART_OneBitMethodCmd+0x10>
 8000a90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a94:	041b      	lsls	r3, r3, #16
 8000a96:	0c1b      	lsrs	r3, r3, #16
 8000a98:	8283      	strh	r3, [r0, #20]
 8000a9a:	4770      	bx	lr
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aa2:	8283      	strh	r3, [r0, #20]
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <USART_IrDAConfig>:
 8000aa8:	8a83      	ldrh	r3, [r0, #20]
 8000aaa:	f023 0304 	bic.w	r3, r3, #4
 8000aae:	041b      	lsls	r3, r3, #16
 8000ab0:	0c1b      	lsrs	r3, r3, #16
 8000ab2:	8283      	strh	r3, [r0, #20]
 8000ab4:	8a83      	ldrh	r3, [r0, #20]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	4319      	orrs	r1, r3
 8000aba:	8281      	strh	r1, [r0, #20]
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <USART_IrDACmd>:
 8000ac0:	8a83      	ldrh	r3, [r0, #20]
 8000ac2:	b929      	cbnz	r1, 8000ad0 <USART_IrDACmd+0x10>
 8000ac4:	f023 0302 	bic.w	r3, r3, #2
 8000ac8:	041b      	lsls	r3, r3, #16
 8000aca:	0c1b      	lsrs	r3, r3, #16
 8000acc:	8283      	strh	r3, [r0, #20]
 8000ace:	4770      	bx	lr
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	f043 0302 	orr.w	r3, r3, #2
 8000ad6:	8283      	strh	r3, [r0, #20]
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <USART_GetFlagStatus>:
 8000adc:	8803      	ldrh	r3, [r0, #0]
 8000ade:	4219      	tst	r1, r3
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2000      	moveq	r0, #0
 8000ae4:	2001      	movne	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <USART_ClearFlag>:
 8000ae8:	43c9      	mvns	r1, r1
 8000aea:	b289      	uxth	r1, r1
 8000aec:	8001      	strh	r1, [r0, #0]
 8000aee:	4770      	bx	lr

08000af0 <USART_GetITStatus>:
 8000af0:	b410      	push	{r4}
 8000af2:	f3c1 1342 	ubfx	r3, r1, #5, #3
 8000af6:	2401      	movs	r4, #1
 8000af8:	f001 021f 	and.w	r2, r1, #31
 8000afc:	42a3      	cmp	r3, r4
 8000afe:	fa04 f202 	lsl.w	r2, r4, r2
 8000b02:	d017      	beq.n	8000b34 <USART_GetITStatus+0x44>
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	bf0c      	ite	eq
 8000b08:	8a03      	ldrheq	r3, [r0, #16]
 8000b0a:	8a83      	ldrhne	r3, [r0, #20]
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	4013      	ands	r3, r2
 8000b10:	8802      	ldrh	r2, [r0, #0]
 8000b12:	b292      	uxth	r2, r2
 8000b14:	b153      	cbz	r3, 8000b2c <USART_GetITStatus+0x3c>
 8000b16:	0a09      	lsrs	r1, r1, #8
 8000b18:	2301      	movs	r3, #1
 8000b1a:	fa03 f101 	lsl.w	r1, r3, r1
 8000b1e:	4211      	tst	r1, r2
 8000b20:	bf0c      	ite	eq
 8000b22:	2000      	moveq	r0, #0
 8000b24:	2001      	movne	r0, #1
 8000b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	8983      	ldrh	r3, [r0, #12]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	4013      	ands	r3, r2
 8000b3a:	e7e9      	b.n	8000b10 <USART_GetITStatus+0x20>

08000b3c <USART_ClearITPendingBit>:
 8000b3c:	0a09      	lsrs	r1, r1, #8
 8000b3e:	2301      	movs	r3, #1
 8000b40:	408b      	lsls	r3, r1
 8000b42:	43db      	mvns	r3, r3
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	8003      	strh	r3, [r0, #0]
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b4e:	f000 b804 	b.w	8000b5a <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <LoopFillZerobss+0xe>)
	ldr	r3, [r3, r1]
 8000b54:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b56:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b58:	3104      	adds	r1, #4

08000b5a <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <LoopFillZerobss+0x12>)
	ldr	r3, =_edata
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <LoopFillZerobss+0x16>)
	adds	r2, r0, r1
 8000b5e:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b60:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b62:	f4ff aff6 	bcc.w	8000b52 <CopyDataInit>
	ldr	r2, =_sbss
 8000b66:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <LoopFillZerobss+0x1a>)
	b	LoopFillZerobss
 8000b68:	f000 b803 	b.w	8000b72 <LoopFillZerobss>

08000b6c <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b6c:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b6e:	f842 3b04 	str.w	r3, [r2], #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <LoopFillZerobss+0x1e>)
	cmp	r2, r3
 8000b74:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b76:	f4ff aff9 	bcc.w	8000b6c <FillZerobss>
/* Call the application's entry point.*/
	bl	main
 8000b7a:	f000 fac1 	bl	8001100 <main>
	bx	lr
 8000b7e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000b80:	08007c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, ip, sp, lr}
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b84:	20000000 	andcs	r0, r0, r0
	ldr	r3, =_edata
 8000b88:	20000488 	andcs	r0, r0, r8, lsl #9
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000b8c:	20000488 	andcs	r0, r0, r8, lsl #9
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b90:	200005b4 			; <UNDEFINED> instruction: 0x200005b4

08000b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b94:	f7ff bffe 	b.w	8000b94 <ADC1_2_IRQHandler>

08000b98 <nothingProc>:
}


/* dummy proc */
void nothingProc(void)
{
 8000b98:	4770      	bx	lr

08000b9a <usbStatusIn>:
    bDeviceState = ATTACHED;
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
}

void usbStatusIn(void)
{
 8000b9a:	4770      	bx	lr

08000b9c <usbStatusOut>:
    return;
}

void usbStatusOut(void)
{
 8000b9c:	4770      	bx	lr

08000b9e <usbGetInterfaceSetting>:

RESULT usbGetInterfaceSetting(u8 interface, u8 altSetting)
{
    // alt setting 0 -> program RAM, alt setting 1 or higher -> FLASH
    if (interface > NUM_ALT_SETTINGS) {
        return USB_UNSUPPORT;
 8000b9e:	2803      	cmp	r0, #3
    }

    return USB_SUCCESS;
}
 8000ba0:	bf8c      	ite	hi
 8000ba2:	2002      	movhi	r0, #2
 8000ba4:	2000      	movls	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <usbGetConfiguration>:
 * in the core but we are given these callbacks at the
 * application level
 *******************************************/

void usbGetConfiguration(void)
{
 8000ba8:	4770      	bx	lr
	...

08000bac <usbSetConfiguration>:
    /* nothing process */
}

void usbSetConfiguration(void)
{
    if (pInformation->Current_Configuration != 0) {
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <usbSetConfiguration+0x10>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	7a9b      	ldrb	r3, [r3, #10]
 8000bb2:	b113      	cbz	r3, 8000bba <usbSetConfiguration+0xe>
        bDeviceState = CONFIGURED;
 8000bb4:	4b02      	ldr	r3, [pc, #8]	; (8000bc0 <usbSetConfiguration+0x14>)
 8000bb6:	2205      	movs	r2, #5
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	4770      	bx	lr
 8000bbc:	200005a8 	andcs	r0, r0, r8, lsr #11
 8000bc0:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

08000bc4 <usbGetInterface>:
    }
}

void usbGetInterface(void)
{
 8000bc4:	4770      	bx	lr

08000bc6 <usbSetInterface>:
    /* nothing process */
}

void usbSetInterface(void)
{
 8000bc6:	4770      	bx	lr

08000bc8 <usbGetStatus>:
    /* nothing process */
}

void usbGetStatus(void)
{
 8000bc8:	4770      	bx	lr

08000bca <usbClearFeature>:
    /* nothing process */
}

void usbClearFeature(void)
{
 8000bca:	4770      	bx	lr

08000bcc <usbSetEndpointFeature>:
    /* nothing process */
}

void usbSetEndpointFeature(void)
{
 8000bcc:	4770      	bx	lr

08000bce <usbSetDeviceFeature>:
    /* nothing process */
}

void usbSetDeviceFeature(void)
{
 8000bce:	4770      	bx	lr

08000bd0 <usbSetDeviceAddress>:
    /* nothing process */
}

void usbSetDeviceAddress(void)
{
    bDeviceState = ADDRESSED;
 8000bd0:	4b01      	ldr	r3, [pc, #4]	; (8000bd8 <usbSetDeviceAddress+0x8>)
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	4770      	bx	lr
 8000bd8:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

08000bdc <usbReset>:
    usbEnbISR();
    bDeviceState = UNCONNECTED;
}

void usbReset(void)
{    
 8000bdc:	b510      	push	{r4, lr}
    dfuUpdateByReset();
 8000bde:	f000 fdc5 	bl	800176c <dfuUpdateByReset>

    pInformation->Current_Configuration = 0;
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <usbReset+0x8c>)
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000be4:	4a21      	ldr	r2, [pc, #132]	; (8000c6c <usbReset+0x90>)

void usbReset(void)
{    
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2400      	movs	r4, #0
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000bea:	6812      	ldr	r2, [r2, #0]

void usbReset(void)
{    
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 8000bec:	729c      	strb	r4, [r3, #10]
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000bee:	79d2      	ldrb	r2, [r2, #7]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);

    Clear_Status_Out(ENDP0);
 8000bf0:	4620      	mov	r0, r4
void usbReset(void)
{    
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000bf2:	725a      	strb	r2, [r3, #9]

    _SetBTABLE(BTABLE_ADDRESS);
 8000bf4:	4a1e      	ldr	r2, [pc, #120]	; (8000c70 <usbReset+0x94>)

    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <usbReset+0x98>)
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];

    _SetBTABLE(BTABLE_ADDRESS);
 8000bf8:	6014      	str	r4, [r2, #0]

    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
 8000bfa:	6819      	ldr	r1, [r3, #0]
 8000bfc:	f421 41ec 	bic.w	r1, r1, #30208	; 0x7600
 8000c00:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8000c04:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8000c08:	b289      	uxth	r1, r1
 8000c0a:	6019      	str	r1, [r3, #0]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);
 8000c0c:	6819      	ldr	r1, [r3, #0]
 8000c0e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8000c12:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8000c16:	b289      	uxth	r1, r1
 8000c18:	f081 0110 	eor.w	r1, r1, #16
 8000c1c:	6019      	str	r1, [r3, #0]

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8000c1e:	6811      	ldr	r1, [r2, #0]
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <usbReset+0x9c>)
 8000c22:	b289      	uxth	r1, r1
 8000c24:	440b      	add	r3, r1
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	2140      	movs	r1, #64	; 0x40
 8000c2a:	6019      	str	r1, [r3, #0]
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8000c2c:	6813      	ldr	r3, [r2, #0]
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000c36:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	601a      	str	r2, [r3, #0]

    Clear_Status_Out(ENDP0);
 8000c3e:	f005 fac9 	bl	80061d4 <Clear_Status_Out>

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <usbReset+0xa0>)
 8000c44:	4620      	mov	r0, r4
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8000c4c:	f005 fb1a 	bl	8006284 <SetEPRxCount>
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);
 8000c50:	4620      	mov	r0, r4
 8000c52:	f005 fab0 	bl	80061b6 <SetEPRxValid>

    bDeviceState = ATTACHED;
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <usbReset+0xa4>)
 8000c58:	2201      	movs	r2, #1
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 8000c5a:	4620      	mov	r0, r4
}
 8000c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);

    bDeviceState = ATTACHED;
 8000c60:	601a      	str	r2, [r3, #0]
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 8000c62:	f005 bfb1 	b.w	8006bc8 <SetDeviceAddress>
 8000c66:	bf00      	nop
 8000c68:	200005a8 	andcs	r0, r0, r8, lsr #11
 8000c6c:	200002b4 			; <UNDEFINED> instruction: 0x200002b4
 8000c70:	40005c50 	andmi	r5, r0, r0, asr ip
 8000c74:	40005c00 	andmi	r5, r0, r0, lsl #24
 8000c78:	20003004 	andcs	r3, r0, r4
 8000c7c:	20000580 	andcs	r0, r0, r0, lsl #11
 8000c80:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

08000c84 <usbDataSetup>:
void usbStatusOut(void)
{
    return;
}

RESULT usbDataSetup(u8 request) {
 8000c84:	b538      	push	{r3, r4, r5, lr}
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    // handle dfu class requests
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <usbDataSetup+0x4c>)
void usbStatusOut(void)
{
    return;
}

RESULT usbDataSetup(u8 request) {
 8000c88:	4605      	mov	r5, r0
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    // handle dfu class requests
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	461c      	mov	r4, r3
 8000c8e:	7812      	ldrb	r2, [r2, #0]
 8000c90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000c94:	2a21      	cmp	r2, #33	; 0x21
 8000c96:	d119      	bne.n	8000ccc <usbDataSetup+0x48>
        if (dfuUpdateByRequest()) {
 8000c98:	f000 fdfc 	bl	8001894 <dfuUpdateByRequest>
 8000c9c:	b1b0      	cbz	r0, 8000ccc <usbDataSetup+0x48>
            // successfull state transition, handle the request
            switch (request) {
 8000c9e:	1e68      	subs	r0, r5, #1
 8000ca0:	2804      	cmp	r0, #4
 8000ca2:	d813      	bhi.n	8000ccc <usbDataSetup+0x48>
 8000ca4:	e8df f000 	tbb	[pc, r0]
 8000ca8:	12070503 	andne	r0, r7, #12582912	; 0xc00000
 8000cac:	4b090009 	blmi	8240cd8 <_etext+0x23907c>
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
                break;
            case(DFU_DNLOAD):
                CopyRoutine = dfuCopyDNLOAD;
                break;
 8000cb0:	e004      	b.n	8000cbc <usbDataSetup+0x38>
            case(DFU_UPLOAD):
                CopyRoutine = dfuCopyUPLOAD;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <usbDataSetup+0x54>)
                break;
 8000cb4:	e002      	b.n	8000cbc <usbDataSetup+0x38>
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
        if (dfuUpdateByRequest()) {
            // successfull state transition, handle the request
            switch (request) {
            case(DFU_GETSTATUS):
                CopyRoutine = dfuCopyStatus;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <usbDataSetup+0x58>)
 8000cb8:	e000      	b.n	8000cbc <usbDataSetup+0x38>
                break;
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <usbDataSetup+0x5c>)
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000cbc:	6822      	ldr	r2, [r4, #0]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000cbe:	2400      	movs	r4, #0
        (*CopyRoutine)(0);
 8000cc0:	4620      	mov	r0, r4
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000cc2:	6193      	str	r3, [r2, #24]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000cc4:	8254      	strh	r4, [r2, #18]
        (*CopyRoutine)(0);
 8000cc6:	4798      	blx	r3

        return USB_SUCCESS;
 8000cc8:	4620      	mov	r0, r4
 8000cca:	bd38      	pop	{r3, r4, r5, pc}
    }

    return USB_UNSUPPORT;
 8000ccc:	2002      	movs	r0, #2
}
 8000cce:	bd38      	pop	{r3, r4, r5, pc}
 8000cd0:	200005a8 	andcs	r0, r0, r8, lsr #11
 8000cd4:	080017e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, sl, ip}
 8000cd8:	08001809 	stmdaeq	r0, {r0, r3, fp, ip}
 8000cdc:	080017c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, sl, ip}
 8000ce0:	080017b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, ip}

08000ce4 <usbGetDeviceDescriptor>:
    return USB_SUCCESS;
}

u8 *usbGetDeviceDescriptor(u16 len)
{
    return Standard_GetDescriptorData(len, &usbDeviceDescriptorDFU);
 8000ce4:	4901      	ldr	r1, [pc, #4]	; (8000cec <usbGetDeviceDescriptor+0x8>)
 8000ce6:	f005 bd6f 	b.w	80067c8 <Standard_GetDescriptorData>
 8000cea:	bf00      	nop
 8000cec:	20000158 	andcs	r0, r0, r8, asr r1

08000cf0 <usbGetConfigDescriptor>:
}

u8 *usbGetConfigDescriptor(u16 len)
{
    return Standard_GetDescriptorData(len, &usbConfigDescriptorDFU);
 8000cf0:	4901      	ldr	r1, [pc, #4]	; (8000cf8 <usbGetConfigDescriptor+0x8>)
 8000cf2:	f005 bd69 	b.w	80067c8 <Standard_GetDescriptorData>
 8000cf6:	bf00      	nop
 8000cf8:	200002b4 			; <UNDEFINED> instruction: 0x200002b4

08000cfc <usbGetStringDescriptor>:
}

u8 *usbGetStringDescriptor(u16 len)
{
    u8 strIndex = pInformation->USBwValue0;
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <usbGetStringDescriptor+0x18>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	789b      	ldrb	r3, [r3, #2]
    if (strIndex > STR_DESC_LEN) {
 8000d02:	2b07      	cmp	r3, #7
 8000d04:	d804      	bhi.n	8000d10 <usbGetStringDescriptor+0x14>
        return NULL;
    } else {
        return Standard_GetDescriptorData(len, &usbStringDescriptor[strIndex]);
 8000d06:	4904      	ldr	r1, [pc, #16]	; (8000d18 <usbGetStringDescriptor+0x1c>)
 8000d08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8000d0c:	f005 bd5c 	b.w	80067c8 <Standard_GetDescriptorData>
    }
}
 8000d10:	2000      	movs	r0, #0
 8000d12:	4770      	bx	lr
 8000d14:	200005a8 	andcs	r0, r0, r8, lsr #11
 8000d18:	200000a8 	andcs	r0, r0, r8, lsr #1

08000d1c <usbGetFunctionalDescriptor>:

u8 *usbGetFunctionalDescriptor(u16 len)
{
    return Standard_GetDescriptorData(len, &usbFunctionalDescriptor);
 8000d1c:	4901      	ldr	r1, [pc, #4]	; (8000d24 <usbGetFunctionalDescriptor+0x8>)
 8000d1e:	f005 bd53 	b.w	80067c8 <Standard_GetDescriptorData>
 8000d22:	bf00      	nop
 8000d24:	200000f4 	strdcs	r0, [r0], -r4

08000d28 <usbNoDataSetup>:

    return USB_UNSUPPORT;
}

RESULT usbNoDataSetup(u8 request)
{
 8000d28:	b508      	push	{r3, lr}
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <usbNoDataSetup+0x24>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d34:	2b21      	cmp	r3, #33	; 0x21
 8000d36:	d106      	bne.n	8000d46 <usbNoDataSetup+0x1e>
        // todo, keep track of the destination interface, often stored in wIndex
        if (dfuUpdateByRequest()) {
 8000d38:	f000 fdac 	bl	8001894 <dfuUpdateByRequest>
 8000d3c:	2800      	cmp	r0, #0
            return USB_SUCCESS;
 8000d3e:	bf0c      	ite	eq
 8000d40:	2002      	moveq	r0, #2
 8000d42:	2000      	movne	r0, #0
 8000d44:	bd08      	pop	{r3, pc}
        }
    }
    return USB_UNSUPPORT;
 8000d46:	2002      	movs	r0, #2
}
 8000d48:	bd08      	pop	{r3, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200005a8 	andcs	r0, r0, r8, lsr #11

08000d50 <setupUSB>:

static RCC_TypeDef *RCC_Blot = (RCC_TypeDef *)RCC;


void setupUSB (void)
{
 8000d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    #ifndef USB_DISC_PIN  
    #define USB_DISC_PIN    12
    #endif

    // set up pin in host disconnected state
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <setupUSB+0x54>)
 8000d54:	210c      	movs	r1, #12
 8000d56:	2200      	movs	r2, #0
    SET_REG(GPIO_CR(USB_DISC_BANK, USB_DISC_PIN),
 8000d58:	4c13      	ldr	r4, [pc, #76]	; (8000da8 <setupUSB+0x58>)
    #ifndef USB_DISC_PIN  
    #define USB_DISC_PIN    12
    #endif

    // set up pin in host disconnected state
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
 8000d5a:	f000 fa4f 	bl	80011fc <gpio_write_bit>
    SET_REG(GPIO_CR(USB_DISC_BANK, USB_DISC_PIN),
 8000d5e:	200c      	movs	r0, #12
 8000d60:	6825      	ldr	r5, [r4, #0]
 8000d62:	f000 fca1 	bl	80016a8 <crMask>
 8000d66:	4028      	ands	r0, r5
 8000d68:	f440 3580 	orr.w	r5, r0, #65536	; 0x10000
 8000d6c:	6025      	str	r5, [r4, #0]
            | CR_OUTPUT_PP << CR_SHITF(USB_DISC_PIN)
        );

    // wait a while to make sure host disconnects us
    volatile u32 delay;
    for(delay = 256; delay; delay--);
 8000d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	9b01      	ldr	r3, [sp, #4]
 8000d76:	b113      	cbz	r3, 8000d7e <setupUSB+0x2e>
 8000d78:	9b01      	ldr	r3, [sp, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	e7f9      	b.n	8000d72 <setupUSB+0x22>
    #endif
#endif
#endif

  // initialize the usb application  
  wTransferSize = getFlashPageSize();
 8000d7e:	f000 fca5 	bl	80016cc <getFlashPageSize>
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <setupUSB+0x5c>)
  u8_usbConfigDescriptorDFU[41] = (wTransferSize & 0x00FF);
 8000d84:	b2c2      	uxtb	r2, r0
    #endif
#endif
#endif

  // initialize the usb application  
  wTransferSize = getFlashPageSize();
 8000d86:	6018      	str	r0, [r3, #0]
  u8_usbConfigDescriptorDFU[41] = (wTransferSize & 0x00FF);
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <setupUSB+0x60>)
  u8_usbConfigDescriptorDFU[42] = (wTransferSize & 0xFF00) >> 8;
 8000d8a:	f3c0 2007 	ubfx	r0, r0, #8, #8
#endif
#endif

  // initialize the usb application  
  wTransferSize = getFlashPageSize();
  u8_usbConfigDescriptorDFU[41] = (wTransferSize & 0x00FF);
 8000d8e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  u8_usbConfigDescriptorDFU[42] = (wTransferSize & 0xFF00) >> 8;
 8000d92:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
  
  u8_usbFunctionalDescriptor[5] = (wTransferSize & 0x00FF);
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <setupUSB+0x64>)
 8000d98:	715a      	strb	r2, [r3, #5]
  u8_usbFunctionalDescriptor[6] = (wTransferSize & 0xFF00) >> 8;  
 8000d9a:	7198      	strb	r0, [r3, #6]

/* application function definitions */
void usbAppInit(void)
{
    // hook in to usb_core, depends on all those damn non encapsulated externs!
    USB_Init();
 8000d9c:	f005 fb3c 	bl	8006418 <USB_Init>
  
  u8_usbFunctionalDescriptor[5] = (wTransferSize & 0x00FF);
  u8_usbFunctionalDescriptor[6] = (wTransferSize & 0xFF00) >> 8;  
  
  usbAppInit();
}
 8000da0:	b003      	add	sp, #12
 8000da2:	bd30      	pop	{r4, r5, pc}
 8000da4:	40010800 	andmi	r0, r1, r0, lsl #16
 8000da8:	40010804 	andmi	r0, r1, r4, lsl #16
 8000dac:	20000488 	andcs	r0, r0, r8, lsl #9
 8000db0:	20000100 	andcs	r0, r0, r0, lsl #2
 8000db4:	2000013d 	andcs	r0, r0, sp, lsr r1

08000db8 <usbSuspend>:
}

void usbSuspend(void)
{
    u16 wCNTR;
    wCNTR = _GetCNTR();
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <usbSuspend+0x14>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	b292      	uxth	r2, r2
    wCNTR |= CNTR_FSUSP | CNTR_LPMODE;
    _SetCNTR(wCNTR);
 8000dbe:	f042 020c 	orr.w	r2, r2, #12
 8000dc2:	601a      	str	r2, [r3, #0]

    // run any power reduction handlers
    bDeviceState = SUSPENDED;
 8000dc4:	4b02      	ldr	r3, [pc, #8]	; (8000dd0 <usbSuspend+0x18>)
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	4770      	bx	lr
 8000dcc:	40005c40 	andmi	r5, r0, r0, asr #24
 8000dd0:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

08000dd4 <usbResumeInit>:
void usbResumeInit(void)
{
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <usbResumeInit+0x14>)
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000dd6:	f64f 72fb 	movw	r2, #65531	; 0xfffb
void usbResumeInit(void)
{
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
 8000dda:	6819      	ldr	r1, [r3, #0]
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000ddc:	400a      	ands	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]

    // undo power reduction handlers here
    _SetCNTR(ISR_MSK);
 8000de0:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	4770      	bx	lr
 8000de8:	40005c40 	andmi	r5, r0, r0, asr #24

08000dec <usbResume>:
}

void usbResume(RESUME_STATE eResumeSetVal)
{
 8000dec:	b510      	push	{r4, lr}
 8000dee:	4c1e      	ldr	r4, [pc, #120]	; (8000e68 <usbResume+0x7c>)
    u16 wCNTR;

    if (eResumeSetVal != RESUME_ESOF)
 8000df0:	2807      	cmp	r0, #7
        ResumeS.eState = eResumeSetVal;
 8000df2:	bf18      	it	ne
 8000df4:	7020      	strbne	r0, [r4, #0]

    switch (ResumeS.eState) {
 8000df6:	7823      	ldrb	r3, [r4, #0]
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d832      	bhi.n	8000e62 <usbResume+0x76>
 8000dfc:	e8df f003 	tbb	[pc, r3]
 8000e00:	0e0a0603 	cfmadd32eq	mvax0, mvfx0, mvfx10, mvfx3
 8000e04:	f7ff2116 			; <UNDEFINED> instruction: 0xf7ff2116
    case RESUME_EXTERNAL:
        usbResumeInit();
 8000e08:	ffe5 e02a 	vaddl.u32	q15, d5, d26
        ResumeS.eState = RESUME_OFF;
        break;
    case RESUME_INTERNAL:
        usbResumeInit();
 8000e0c:	f7ff ffe2 	bl	8000dd4 <usbResumeInit>
        ResumeS.eState = RESUME_START;
 8000e10:	2304      	movs	r3, #4
 8000e12:	e027      	b.n	8000e64 <usbResume+0x78>
        break;
    case RESUME_LATER:
        ResumeS.bESOFcnt = 2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	7063      	strb	r3, [r4, #1]
        ResumeS.eState = RESUME_WAIT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e023      	b.n	8000e64 <usbResume+0x78>
        break;
    case RESUME_WAIT:
        ResumeS.bESOFcnt--;
 8000e1c:	7863      	ldrb	r3, [r4, #1]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	7063      	strb	r3, [r4, #1]
        if (ResumeS.bESOFcnt == 0)
 8000e24:	7863      	ldrb	r3, [r4, #1]
 8000e26:	b9f3      	cbnz	r3, 8000e66 <usbResume+0x7a>
            ResumeS.eState = RESUME_START;
 8000e28:	2204      	movs	r2, #4
 8000e2a:	e017      	b.n	8000e5c <usbResume+0x70>
        break;
    case RESUME_START:
        wCNTR = _GetCNTR();
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <usbResume+0x80>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	b292      	uxth	r2, r2
        wCNTR |= CNTR_RESUME;
        _SetCNTR(wCNTR);
 8000e32:	f042 0210 	orr.w	r2, r2, #16
 8000e36:	601a      	str	r2, [r3, #0]
        ResumeS.eState = RESUME_ON;
 8000e38:	2305      	movs	r3, #5
 8000e3a:	7023      	strb	r3, [r4, #0]
        ResumeS.bESOFcnt = 10;
 8000e3c:	230a      	movs	r3, #10
 8000e3e:	7063      	strb	r3, [r4, #1]
        break;
 8000e40:	bd10      	pop	{r4, pc}
    case RESUME_ON:
        ResumeS.bESOFcnt--;
 8000e42:	7863      	ldrb	r3, [r4, #1]
 8000e44:	3b01      	subs	r3, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	7063      	strb	r3, [r4, #1]
        if (ResumeS.bESOFcnt == 0) {
 8000e4a:	7863      	ldrb	r3, [r4, #1]
 8000e4c:	b95b      	cbnz	r3, 8000e66 <usbResume+0x7a>
            wCNTR = _GetCNTR();
 8000e4e:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <usbResume+0x80>)
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 8000e50:	f64f 73ef 	movw	r3, #65519	; 0xffef
        ResumeS.bESOFcnt = 10;
        break;
    case RESUME_ON:
        ResumeS.bESOFcnt--;
        if (ResumeS.bESOFcnt == 0) {
            wCNTR = _GetCNTR();
 8000e54:	6811      	ldr	r1, [r2, #0]
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 8000e56:	400b      	ands	r3, r1
 8000e58:	6013      	str	r3, [r2, #0]
            ResumeS.eState = RESUME_OFF;
 8000e5a:	2206      	movs	r2, #6
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <usbResume+0x7c>)
 8000e5e:	701a      	strb	r2, [r3, #0]
 8000e60:	bd10      	pop	{r4, pc}
        }
        break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
 8000e62:	2306      	movs	r3, #6
 8000e64:	7023      	strb	r3, [r4, #0]
 8000e66:	bd10      	pop	{r4, pc}
 8000e68:	2000048e 	andcs	r0, r0, lr, lsl #9
 8000e6c:	40005c40 	andmi	r5, r0, r0, asr #24

08000e70 <usbPowerOn>:
}

RESULT usbPowerOn(void)
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <usbPowerOn+0x38>)
        break;
    }
}

RESULT usbPowerOn(void)
{
 8000e72:	b510      	push	{r4, lr}
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;
 8000e74:	69da      	ldr	r2, [r3, #28]

    _SetCNTR(CNTR_FRES);
    _SetCNTR(0);
    _SetISTR(0);
 8000e76:	490d      	ldr	r1, [pc, #52]	; (8000eac <usbPowerOn+0x3c>)
}

RESULT usbPowerOn(void)
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;
 8000e78:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e7c:	61da      	str	r2, [r3, #28]

    _SetCNTR(CNTR_FRES);
 8000e7e:	f5a3 33d9 	sub.w	r3, r3, #111104	; 0x1b200
 8000e82:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
    _SetCNTR(0);
 8000e86:	2400      	movs	r4, #0
RESULT usbPowerOn(void)
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;

    _SetCNTR(CNTR_FRES);
 8000e88:	2201      	movs	r2, #1
    _SetCNTR(0);
    _SetISTR(0);

    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000e8a:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <usbPowerOn+0x40>)
RESULT usbPowerOn(void)
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;

    _SetCNTR(CNTR_FRES);
 8000e8c:	601a      	str	r2, [r3, #0]
    _SetCNTR(0);
 8000e8e:	601c      	str	r4, [r3, #0]
    _SetISTR(0);
 8000e90:	600c      	str	r4, [r1, #0]

    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000e92:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000e96:	8001      	strh	r1, [r0, #0]
    _SetCNTR(wInterrupt_Mask);
 8000e98:	6019      	str	r1, [r3, #0]
    // present to host
#ifndef USB_DISC_HARDWIRED
#ifdef HAS_MAPLE_HARDWARE
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
#else
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 1);
 8000e9a:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <usbPowerOn+0x44>)
 8000e9c:	210c      	movs	r1, #12
 8000e9e:	f000 f9ad 	bl	80011fc <gpio_write_bit>
#endif
#endif

    return USB_SUCCESS;
}
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	bd10      	pop	{r4, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	andmi	r1, r2, r0
 8000eac:	40005c44 	andmi	r5, r0, r4, asr #24
 8000eb0:	200005ac 	andcs	r0, r0, ip, lsr #11
 8000eb4:	40010800 	andmi	r0, r1, r0, lsl #16

08000eb8 <usbPowerOff>:

RESULT usbPowerOff(void) {
    _SetCNTR(CNTR_FRES);
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <usbPowerOff+0x2c>)
 8000eba:	2201      	movs	r2, #1
#endif

    return USB_SUCCESS;
}

RESULT usbPowerOff(void) {
 8000ebc:	b510      	push	{r4, lr}
    _SetCNTR(CNTR_FRES);
 8000ebe:	601a      	str	r2, [r3, #0]
    _SetISTR(0);
 8000ec0:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <usbPowerOff+0x30>)
 8000ec2:	2400      	movs	r4, #0
 8000ec4:	6014      	str	r4, [r2, #0]
    _SetCNTR(CNTR_FRES + CNTR_PDWN);
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	601a      	str	r2, [r3, #0]
    // act unplugged to host
#ifndef USB_DISC_HARDWIRED
#ifdef HAS_MAPLE_HARDWARE
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 1);
#else
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
 8000eca:	4808      	ldr	r0, [pc, #32]	; (8000eec <usbPowerOff+0x34>)
 8000ecc:	4622      	mov	r2, r4
 8000ece:	210c      	movs	r1, #12
 8000ed0:	f000 f994 	bl	80011fc <gpio_write_bit>
#endif
#endif

    // Disable USB clock
    RCC_Blot->APB1ENR &= ~RCC_APB1ENR_USB_CLK;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <usbPowerOff+0x38>)

    return USB_SUCCESS;
}
 8000ed6:	4620      	mov	r0, r4
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
#endif
#endif

    // Disable USB clock
    RCC_Blot->APB1ENR &= ~RCC_APB1ENR_USB_CLK;
 8000ed8:	69da      	ldr	r2, [r3, #28]
 8000eda:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000ede:	61da      	str	r2, [r3, #28]

    return USB_SUCCESS;
}
 8000ee0:	bd10      	pop	{r4, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40005c40 	andmi	r5, r0, r0, asr #24
 8000ee8:	40005c44 	andmi	r5, r0, r4, asr #24
 8000eec:	40010800 	andmi	r0, r1, r0, lsl #16
 8000ef0:	40021000 	andmi	r1, r2, r0

08000ef4 <usbDsbBus>:
}


void usbDsbBus(void)
{
    usbPowerOff();
 8000ef4:	f7ff bfe0 	b.w	8000eb8 <usbPowerOff>

08000ef8 <usbEnbISR>:
}
/***** end of USER STANDARD REQUESTS *****/


void usbEnbISR(void)
{
 8000ef8:	b507      	push	{r0, r1, r2, lr}
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 8000efa:	2314      	movs	r3, #20
 8000efc:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000f06:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
 8000f0a:	a801      	add	r0, sp, #4
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	f88d 3007 	strb.w	r3, [sp, #7]
    nvicInit(&NVIC_InitStructure);
 8000f12:	f000 fb15 	bl	8001540 <nvicInit>
}
 8000f16:	b003      	add	sp, #12
 8000f18:	f85d fb04 	ldr.w	pc, [sp], #4

08000f1c <usbInit>:

    return USB_SUCCESS;
}

void usbInit(void)
{
 8000f1c:	b510      	push	{r4, lr}
    dfuInit();
 8000f1e:	f000 fbe1 	bl	80016e4 <dfuInit>

    pInformation->Current_Configuration = 0;
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <usbInit+0x2c>)
 8000f24:	2400      	movs	r4, #0
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	729c      	strb	r4, [r3, #10]
    usbPowerOn();
 8000f2a:	f7ff ffa1 	bl	8000e70 <usbPowerOn>

    _SetISTR(0);
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <usbInit+0x30>)
    wInterrupt_Mask = ISR_MSK;
 8000f30:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <usbInit+0x34>)
    dfuInit();

    pInformation->Current_Configuration = 0;
    usbPowerOn();

    _SetISTR(0);
 8000f32:	601c      	str	r4, [r3, #0]
    wInterrupt_Mask = ISR_MSK;
 8000f34:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8000f38:	8013      	strh	r3, [r2, #0]
    _SetCNTR(wInterrupt_Mask);
 8000f3a:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <usbInit+0x38>)
 8000f3c:	6013      	str	r3, [r2, #0]

    // configure the cortex M3 private peripheral NVIC
    usbEnbISR();
 8000f3e:	f7ff ffdb 	bl	8000ef8 <usbEnbISR>
    bDeviceState = UNCONNECTED;
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <usbInit+0x3c>)
 8000f44:	601c      	str	r4, [r3, #0]
 8000f46:	bd10      	pop	{r4, pc}
 8000f48:	200005a8 	andcs	r0, r0, r8, lsr #11
 8000f4c:	40005c44 	andmi	r5, r0, r4, asr #24
 8000f50:	200005ac 	andcs	r0, r0, ip, lsr #11
 8000f54:	40005c40 	andmi	r5, r0, r0, asr #24
 8000f58:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

08000f5c <usbDsbISR>:
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
}

void usbDsbISR(void)
{
 8000f5c:	b507      	push	{r0, r1, r2, lr}
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 8000f5e:	2314      	movs	r3, #20
 8000f60:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
    nvicInit(&NVIC_InitStructure);
 8000f64:	a801      	add	r0, sp, #4

void usbDsbISR(void)
{
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000f6c:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
 8000f70:	f88d 3007 	strb.w	r3, [sp, #7]
    nvicInit(&NVIC_InitStructure);
 8000f74:	f000 fae4 	bl	8001540 <nvicInit>
}
 8000f78:	b003      	add	sp, #12
 8000f7a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000f80 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f80:	b570      	push	{r4, r5, r6, lr}
    wIstr = _GetISTR();
 8000f82:	4c27      	ldr	r4, [pc, #156]	; (8001020 <USB_LP_CAN1_RX0_IRQHandler+0xa0>)
 8000f84:	4d27      	ldr	r5, [pc, #156]	; (8001024 <USB_LP_CAN1_RX0_IRQHandler+0xa4>)
 8000f86:	6823      	ldr	r3, [r4, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
 8000f88:	4e27      	ldr	r6, [pc, #156]	; (8001028 <USB_LP_CAN1_RX0_IRQHandler+0xa8>)
    nvicInit(&NVIC_InitStructure);
}

void USB_LP_CAN1_RX0_IRQHandler(void)
{
    wIstr = _GetISTR();
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	802b      	strh	r3, [r5, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
 8000f8e:	882a      	ldrh	r2, [r5, #0]
 8000f90:	8833      	ldrh	r3, [r6, #0]
 8000f92:	4013      	ands	r3, r2
 8000f94:	0418      	lsls	r0, r3, #16
 8000f96:	d501      	bpl.n	8000f9c <USB_LP_CAN1_RX0_IRQHandler+0x1c>
        /* servicing of the endpoint correct transfer interrupt */
        /* clear of the CTR flag into the sub */
        CTR_LP(); /* low priority ISR defined in the usb core lib */
 8000f98:	f005 f994 	bl	80062c4 <CTR_LP>
    }
#endif

#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
 8000f9c:	882a      	ldrh	r2, [r5, #0]
 8000f9e:	8833      	ldrh	r3, [r6, #0]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	0559      	lsls	r1, r3, #21
 8000fa4:	d505      	bpl.n	8000fb2 <USB_LP_CAN1_RX0_IRQHandler+0x32>
        _SetISTR((u16)CLR_RESET);
 8000fa6:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8000faa:	6023      	str	r3, [r4, #0]
        Device_Property.Reset();
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <USB_LP_CAN1_RX0_IRQHandler+0xac>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	4798      	blx	r3
    }
#endif


#if (ISR_MSK & ISTR_ERR)
    if (wIstr & ISTR_ERR & wInterrupt_Mask) {
 8000fb2:	882a      	ldrh	r2, [r5, #0]
 8000fb4:	8833      	ldrh	r3, [r6, #0]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	0492      	lsls	r2, r2, #18
        _SetISTR((u16)CLR_ERR);
 8000fba:	bf44      	itt	mi
 8000fbc:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 8000fc0:	6022      	strmi	r2, [r4, #0]
    }
#endif


#if (ISR_MSK & ISTR_WKUP)
    if (wIstr & ISTR_WKUP & wInterrupt_Mask) {
 8000fc2:	882a      	ldrh	r2, [r5, #0]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	04d8      	lsls	r0, r3, #19
 8000fc8:	d505      	bpl.n	8000fd6 <USB_LP_CAN1_RX0_IRQHandler+0x56>
        _SetISTR((u16)CLR_WKUP);
 8000fca:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000fce:	6023      	str	r3, [r4, #0]
        usbResume(RESUME_EXTERNAL);
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff ff0b 	bl	8000dec <usbResume>
    }
#endif

    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_SUSP)
    if (wIstr & ISTR_SUSP & wInterrupt_Mask) {
 8000fd6:	882a      	ldrh	r2, [r5, #0]
 8000fd8:	8833      	ldrh	r3, [r6, #0]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	0519      	lsls	r1, r3, #20
 8000fde:	d504      	bpl.n	8000fea <USB_LP_CAN1_RX0_IRQHandler+0x6a>

        // check if SUSPEND is possible
        if (F_SUSPEND_ENABLED) {
            usbSuspend();
 8000fe0:	f7ff feea 	bl	8000db8 <usbSuspend>
        } else {
            // if not possible then resume after xx ms
            usbResume(RESUME_LATER);
        }
        // clear of the ISTR bit must be done after setting of CNTR_FSUSP
        _SetISTR((u16)CLR_SUSP);
 8000fe4:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8000fe8:	6023      	str	r3, [r4, #0]
    }
#endif


#if (ISR_MSK & ISTR_SOF)
    if (wIstr & ISTR_SOF & wInterrupt_Mask) {
 8000fea:	882a      	ldrh	r2, [r5, #0]
 8000fec:	8833      	ldrh	r3, [r6, #0]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	0592      	lsls	r2, r2, #22
 8000ff2:	d507      	bpl.n	8001004 <USB_LP_CAN1_RX0_IRQHandler+0x84>
        _SetISTR((u16)CLR_SOF);
 8000ff4:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8000ff8:	6022      	str	r2, [r4, #0]
        bIntPackSOF++;
 8000ffa:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <USB_LP_CAN1_RX0_IRQHandler+0xb0>)
 8000ffc:	7811      	ldrb	r1, [r2, #0]
 8000ffe:	3101      	adds	r1, #1
 8001000:	b2c9      	uxtb	r1, r1
 8001002:	7011      	strb	r1, [r2, #0]
    }
#endif


#if (ISR_MSK & ISTR_ESOF)
    if (wIstr & ISTR_ESOF & wInterrupt_Mask) {
 8001004:	882a      	ldrh	r2, [r5, #0]
 8001006:	4013      	ands	r3, r2
 8001008:	05db      	lsls	r3, r3, #23
 800100a:	d507      	bpl.n	800101c <USB_LP_CAN1_RX0_IRQHandler+0x9c>
        _SetISTR((u16)CLR_ESOF);
 800100c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8001010:	6023      	str	r3, [r4, #0]
        // resume handling timing is made with ESOFs
        // request without change of the machine state
        usbResume(RESUME_ESOF); 
 8001012:	2007      	movs	r0, #7
    }
#endif

}
 8001014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#if (ISR_MSK & ISTR_ESOF)
    if (wIstr & ISTR_ESOF & wInterrupt_Mask) {
        _SetISTR((u16)CLR_ESOF);
        // resume handling timing is made with ESOFs
        // request without change of the machine state
        usbResume(RESUME_ESOF); 
 8001018:	f7ff bee8 	b.w	8000dec <usbResume>
 800101c:	bd70      	pop	{r4, r5, r6, pc}
 800101e:	bf00      	nop
 8001020:	40005c44 	andmi	r5, r0, r4, asr #24
 8001024:	2000048c 	andcs	r0, r0, ip, lsl #9
 8001028:	200005ac 	andcs	r0, r0, ip, lsr #11
 800102c:	20000014 	andcs	r0, r0, r4, lsl r0
 8001030:	200005b4 			; <UNDEFINED> instruction: 0x200005b4

08001034 <encode_b64>:

    return cnt;
}

size_t encode_b64(const char* input, char* output)
{
 8001034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001036:	4605      	mov	r5, r0
    base64_encodestate s;
    size_t cnt;

    base64_init_encodestate(&s);
 8001038:	4668      	mov	r0, sp

    return cnt;
}

size_t encode_b64(const char* input, char* output)
{
 800103a:	460c      	mov	r4, r1
    base64_encodestate s;
    size_t cnt;

    base64_init_encodestate(&s);
 800103c:	f004 ff14 	bl	8005e68 <base64_init_encodestate>
    cnt = base64_encode_block(input, strlen(input), output, &s);
 8001040:	4628      	mov	r0, r5
 8001042:	f005 fe6b 	bl	8006d1c <strlen>
 8001046:	466b      	mov	r3, sp
 8001048:	4601      	mov	r1, r0
 800104a:	4622      	mov	r2, r4
 800104c:	4628      	mov	r0, r5
 800104e:	f004 ff19 	bl	8005e84 <base64_encode_block>
    cnt += base64_encode_blockend(output + cnt, &s);
 8001052:	4669      	mov	r1, sp
{
    base64_encodestate s;
    size_t cnt;

    base64_init_encodestate(&s);
    cnt = base64_encode_block(input, strlen(input), output, &s);
 8001054:	4605      	mov	r5, r0
    cnt += base64_encode_blockend(output + cnt, &s);
 8001056:	1820      	adds	r0, r4, r0
 8001058:	f004 ff7f 	bl	8005f5a <base64_encode_blockend>
    output[cnt] = 0;
 800105c:	2300      	movs	r3, #0
    base64_encodestate s;
    size_t cnt;

    base64_init_encodestate(&s);
    cnt = base64_encode_block(input, strlen(input), output, &s);
    cnt += base64_encode_blockend(output + cnt, &s);
 800105e:	4428      	add	r0, r5
    output[cnt] = 0;
 8001060:	5423      	strb	r3, [r4, r0]

    return cnt;
}
 8001062:	b003      	add	sp, #12
 8001064:	bd30      	pop	{r4, r5, pc}
	...

08001068 <transmit_publickey_data>:

/*
  Print the device's public key + signature (ed25519 between the device and the root ca)
  the device is probably in DFU when this is needed -- the restore tool should use this to request a signed firmware from the signing server.
*/
void transmit_publickey_data() {
 8001068:	b500      	push	{lr}
 800106a:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
  char publickey[EDSIGN_PUBLIC_KEY_SIZE];
  char base64_pub[256];
  char base64_signature[256];

  // read our unique id
  uid_read(&id);
 800106e:	a803      	add	r0, sp, #12
 8001070:	f000 fa44 	bl	80014fc <uid_read>
  sprintf(uniqueID,"%X%X%X%X", id.off0, id.off2, id.off4, id.off8);
 8001074:	9904      	ldr	r1, [sp, #16]
 8001076:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800107a:	9100      	str	r1, [sp, #0]
 800107c:	9905      	ldr	r1, [sp, #20]
 800107e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8001082:	9101      	str	r1, [sp, #4]
 8001084:	a806      	add	r0, sp, #24
 8001086:	491a      	ldr	r1, [pc, #104]	; (80010f0 <transmit_publickey_data+0x88>)
 8001088:	f005 fe24 	bl	8006cd4 <siprintf>
  // start sha256 context
  sha256_context ctx;
  sha256_starts(&ctx);
 800108c:	a82c      	add	r0, sp, #176	; 0xb0
 800108e:	f002 f9df 	bl	8003450 <sha256_starts>
  // hash in our unique id
  sha256_update(&ctx, uniqueID, 0x17);
 8001092:	2217      	movs	r2, #23
 8001094:	a82c      	add	r0, sp, #176	; 0xb0
 8001096:	a906      	add	r1, sp, #24
 8001098:	f004 f9b8 	bl	800540c <sha256_update>
  sha256_finish(&ctx, sha256sum);
 800109c:	a82c      	add	r0, sp, #176	; 0xb0
 800109e:	a90c      	add	r1, sp, #48	; 0x30
 80010a0:	f004 f9fc 	bl	800549c <sha256_finish>
  // get our public key
  edsign_sec_to_pub((uint8_t*)publickey, sha256sum);
 80010a4:	a814      	add	r0, sp, #80	; 0x50
 80010a6:	a90c      	add	r1, sp, #48	; 0x30
 80010a8:	f000 ffb0 	bl	800200c <edsign_sec_to_pub>
  encode_b64(publickey, base64_pub);
 80010ac:	a946      	add	r1, sp, #280	; 0x118
 80010ae:	a814      	add	r0, sp, #80	; 0x50
 80010b0:	f7ff ffc0 	bl	8001034 <encode_b64>

  memset(signature, 0, EDSIGN_SIGNATURE_SIZE);
 80010b4:	a81c      	add	r0, sp, #112	; 0x70
 80010b6:	2100      	movs	r1, #0
 80010b8:	2240      	movs	r2, #64	; 0x40
 80010ba:	f005 fe02 	bl	8006cc2 <memset>
  // sign the pub
  edsign_sign((uint8_t*)signature, rootCA, sha256sum, (uint8_t*)publickey, EDSIGN_PUBLIC_KEY_SIZE);
 80010be:	2320      	movs	r3, #32
 80010c0:	aa0c      	add	r2, sp, #48	; 0x30
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	a81c      	add	r0, sp, #112	; 0x70
 80010c6:	ab14      	add	r3, sp, #80	; 0x50
 80010c8:	490a      	ldr	r1, [pc, #40]	; (80010f4 <transmit_publickey_data+0x8c>)
 80010ca:	f000 ffab 	bl	8002024 <edsign_sign>
  
  encode_b64(signature, base64_signature);
 80010ce:	a986      	add	r1, sp, #536	; 0x218
 80010d0:	a81c      	add	r0, sp, #112	; 0x70
 80010d2:	f7ff ffaf 	bl	8001034 <encode_b64>

  debug_print("[BEGIN_PUB_DATA][BEGIN_PUB]%s[END_PUB][END_PUB_DATA]", base64_pub);
 80010d6:	a946      	add	r1, sp, #280	; 0x118
 80010d8:	4807      	ldr	r0, [pc, #28]	; (80010f8 <transmit_publickey_data+0x90>)
 80010da:	f000 f8ef 	bl	80012bc <uart_printf>
  debug_print("[BEGIN_SIGNATURE_DATA][BEGIN_SIGNATURE]%s[END_SIGNATURE][END_SIGNATURE_DATA]", base64_signature);
 80010de:	4807      	ldr	r0, [pc, #28]	; (80010fc <transmit_publickey_data+0x94>)
 80010e0:	a986      	add	r1, sp, #536	; 0x218
 80010e2:	f000 f8eb 	bl	80012bc <uart_printf>
}
 80010e6:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
 80010ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80010ee:	bf00      	nop
 80010f0:	0800754c 	stmdaeq	r0, {r2, r3, r6, r8, sl, ip, sp, lr}
 80010f4:	20000404 	andcs	r0, r0, r4, lsl #8
 80010f8:	08007555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl, ip, sp, lr}
 80010fc:	0800758a 	stmdaeq	r0, {r1, r3, r7, r8, sl, ip, sp, lr}

08001100 <main>:

/*
	Bootloader main
*/
int main() 
{
 8001100:	b530      	push	{r4, r5, lr}
 8001102:	b085      	sub	sp, #20
	bool no_user_jump = FALSE;

	// low level hardware init	
    systemReset(); // peripherals but not PC
 8001104:	f000 f98e 	bl	8001424 <systemReset>
    setupCLK();
 8001108:	f000 f9b0 	bl	800146c <setupCLK>
    setupLEDAndButton();
 800110c:	f000 f9de 	bl	80014cc <setupLEDAndButton>
    setupFLASH();
 8001110:	f000 f9e6 	bl	80014e0 <setupFLASH>
    uartInit();
 8001114:	f000 f942 	bl	800139c <uartInit>
	setupUSB();
 8001118:	f7ff fe1a 	bl	8000d50 <setupUSB>

	uart_printf("\nBootloader init...\n");
 800111c:	482a      	ldr	r0, [pc, #168]	; (80011c8 <main+0xc8>)
 800111e:	f000 f8cd 	bl	80012bc <uart_printf>
    if (readPin(GPIOB, 15) == 0x0) // force dfu
 8001122:	210f      	movs	r1, #15
 8001124:	4829      	ldr	r0, [pc, #164]	; (80011cc <main+0xcc>)
 8001126:	f000 f874 	bl	8001212 <readPin>
 800112a:	4604      	mov	r4, r0
	{
		no_user_jump = TRUE;
	} 

	// verify chain
	debug_print("checking chain...\n");
 800112c:	4828      	ldr	r0, [pc, #160]	; (80011d0 <main+0xd0>)
 800112e:	f000 f8c5 	bl	80012bc <uart_printf>
	ImageObjectHandle imageHandle;
    int ret = imageCheckFromAddress(&imageHandle, USER_CODE_FLASH0X8008000, 0);
 8001132:	4928      	ldr	r1, [pc, #160]	; (80011d4 <main+0xd4>)
 8001134:	2200      	movs	r2, #0
 8001136:	a803      	add	r0, sp, #12
 8001138:	f004 ff52 	bl	8005fe0 <imageCheckFromAddress>
 800113c:	4605      	mov	r5, r0
    debug_print("image check ret: %X\n", ret);
 800113e:	4629      	mov	r1, r5
 8001140:	4825      	ldr	r0, [pc, #148]	; (80011d8 <main+0xd8>)
	switch (ret) // if anything fails to verify we need to kick ourselves into the DFU loop
 8001142:	3d02      	subs	r5, #2

	// verify chain
	debug_print("checking chain...\n");
	ImageObjectHandle imageHandle;
    int ret = imageCheckFromAddress(&imageHandle, USER_CODE_FLASH0X8008000, 0);
    debug_print("image check ret: %X\n", ret);
 8001144:	f000 f8ba 	bl	80012bc <uart_printf>
	switch (ret) // if anything fails to verify we need to kick ourselves into the DFU loop
 8001148:	2d03      	cmp	r5, #3
 800114a:	d803      	bhi.n	8001154 <main+0x54>
 800114c:	e8df f005 	tbb	[pc, r5]
 8001150:	120c0710 	andne	r0, ip, #16, 14	; 0x400000
	setupUSB();

	uart_printf("\nBootloader init...\n");
    if (readPin(GPIOB, 15) == 0x0) // force dfu
	{
		no_user_jump = TRUE;
 8001154:	f1d4 0401 	rsbs	r4, r4, #1
 8001158:	bf38      	it	cc
 800115a:	2400      	movcc	r4, #0
 800115c:	e00e      	b.n	800117c <main+0x7c>
    int ret = imageCheckFromAddress(&imageHandle, USER_CODE_FLASH0X8008000, 0);
    debug_print("image check ret: %X\n", ret);
	switch (ret) // if anything fails to verify we need to kick ourselves into the DFU loop
	{
		case kImageImageIsTrusted:
			debug_print("Boot OK\n");
 800115e:	481f      	ldr	r0, [pc, #124]	; (80011dc <main+0xdc>)
 8001160:	f000 f8ac 	bl	80012bc <uart_printf>
			no_user_jump = FALSE;
 8001164:	2400      	movs	r4, #0
			break;
 8001166:	e009      	b.n	800117c <main+0x7c>

		case kImageImageMissingMagic:
			transmit_publickey_data();
 8001168:	f7ff ff7e 	bl	8001068 <transmit_publickey_data>
			debug_print("\nFirmware missing... waiting in DFU\n");
 800116c:	481c      	ldr	r0, [pc, #112]	; (80011e0 <main+0xe0>)
 800116e:	e002      	b.n	8001176 <main+0x76>
			no_user_jump = TRUE;
			break;

		case kImageImageRejectSignature:
			debug_print("\nSignature unverified... waiting in DFU\n");
 8001170:	481c      	ldr	r0, [pc, #112]	; (80011e4 <main+0xe4>)
 8001172:	e000      	b.n	8001176 <main+0x76>
			no_user_jump = TRUE;
			break;

		case kImageImageHashCalcFailed:
			debug_print("\nHash calculation failed... waiting in DFU\n");
 8001174:	481c      	ldr	r0, [pc, #112]	; (80011e8 <main+0xe8>)
 8001176:	f000 f8a1 	bl	80012bc <uart_printf>
			no_user_jump = TRUE;
 800117a:	2401      	movs	r4, #1
			
		default:
			break;
	}

	strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);
 800117c:	2300      	movs	r3, #0
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	481a      	ldr	r0, [pc, #104]	; (80011ec <main+0xec>)
 8001182:	210d      	movs	r1, #13
 8001184:	2205      	movs	r2, #5
 8001186:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800118a:	f000 f84b 	bl	8001224 <strobePin>
	while (no_user_jump)
 800118e:	b194      	cbz	r4, 80011b6 <main+0xb6>
	{
		// we're spinning in DFU waiting for an upload...
		strobePin(LED_BANK, LED_PIN, 1, BLINK_SLOW,LED_ON_STATE);
 8001190:	2300      	movs	r3, #0
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	4815      	ldr	r0, [pc, #84]	; (80011ec <main+0xec>)
 8001196:	210d      	movs	r1, #13
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800119e:	f000 f841 	bl	8001224 <strobePin>
		if (dfuUploadStarted()) 
 80011a2:	f000 fca7 	bl	8001af4 <dfuUploadStarted>
 80011a6:	2800      	cmp	r0, #0
 80011a8:	d0f2      	beq.n	8001190 <main+0x90>
		{
			debug_print("DFU finished upload\n");
 80011aa:	4811      	ldr	r0, [pc, #68]	; (80011f0 <main+0xf0>)
 80011ac:	f000 f886 	bl	80012bc <uart_printf>
			dfuFinishUpload(); // systemHardReset from DFU once done
 80011b0:	f000 fca6 	bl	8001b00 <dfuFinishUpload>
 80011b4:	e7ec      	b.n	8001190 <main+0x90>
	}

	// we have the OS verified so lets jump to it. 
	if (no_user_jump == FALSE)
	{
		debug_print("Jumping to OS.\n");
 80011b6:	480f      	ldr	r0, [pc, #60]	; (80011f4 <main+0xf4>)
 80011b8:	f000 f880 	bl	80012bc <uart_printf>
		jumpToUser((USER_CODE_FLASH0X8008000+0x84));	
 80011bc:	480e      	ldr	r0, [pc, #56]	; (80011f8 <main+0xf8>)
 80011be:	f000 fa07 	bl	80015d0 <jumpToUser>
	}
	
	return 0;// Added to please the compiler
 80011c2:	4620      	mov	r0, r4
 80011c4:	b005      	add	sp, #20
 80011c6:	bd30      	pop	{r4, r5, pc}
 80011c8:	080075d7 	stmdaeq	r0, {r0, r1, r2, r4, r6, r7, r8, sl, ip, sp, lr}
 80011cc:	40010c00 	andmi	r0, r1, r0, lsl #24
 80011d0:	080075ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, ip, sp, lr}
 80011d4:	08009000 	stmdaeq	r0, {ip, pc}
 80011d8:	080075ff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, sl, ip, sp, lr}
 80011dc:	08007614 	stmdaeq	r0, {r2, r4, r9, sl, ip, sp, lr}
 80011e0:	0800761d 	stmdaeq	r0, {r0, r2, r3, r4, r9, sl, ip, sp, lr}
 80011e4:	08007642 	stmdaeq	r0, {r1, r6, r9, sl, ip, sp, lr}
 80011e8:	0800766b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r9, sl, ip, sp, lr}
 80011ec:	40011000 	andmi	r1, r1, r0
 80011f0:	08007697 	stmdaeq	r0, {r0, r1, r2, r4, r7, r9, sl, ip, sp, lr}
 80011f4:	080076ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, ip, sp, lr}
 80011f8:	08009084 	stmdaeq	r0, {r2, r7, ip, pc}

080011fc <gpio_write_bit>:
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 80011fc:	2301      	movs	r3, #1
 80011fe:	fa03 f101 	lsl.w	r1, r3, r1
    u32 pinMask = 0x1 << (16 + pin);
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
 8001202:	f1d2 0201 	rsbs	r2, r2, #1
 8001206:	bf38      	it	cc
 8001208:	2200      	movcc	r2, #0
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 800120a:	0113      	lsls	r3, r2, #4
 800120c:	4099      	lsls	r1, r3
 800120e:	6101      	str	r1, [r0, #16]
 8001210:	4770      	bx	lr

08001212 <readPin>:
}

bool readPin(u32 bank, u8 pin) {
    // todo, implement read
    if (GET_REG(GPIO_IDR(bank)) & (0x01 << pin)) {
 8001212:	2201      	movs	r2, #1
 8001214:	fa02 f101 	lsl.w	r1, r2, r1
 8001218:	6883      	ldr	r3, [r0, #8]
 800121a:	420b      	tst	r3, r1
        return TRUE;
    } else {
        return FALSE;
    }
}
 800121c:	bf0c      	ite	eq
 800121e:	2000      	moveq	r0, #0
 8001220:	2001      	movne	r0, #1
 8001222:	4770      	bx	lr

08001224 <strobePin>:

void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
 8001224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001228:	f89d a020 	ldrb.w	sl, [sp, #32]
 800122c:	4614      	mov	r4, r2
    gpio_write_bit( bank,pin,1-onState);
 800122e:	f1ca 0701 	rsb	r7, sl, #1
 8001232:	b2ff      	uxtb	r7, r7
 8001234:	463a      	mov	r2, r7
        return FALSE;
    }
}

void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
 8001236:	4680      	mov	r8, r0
 8001238:	4689      	mov	r9, r1
 800123a:	461e      	mov	r6, r3
    gpio_write_bit( bank,pin,1-onState);
 800123c:	f7ff ffde 	bl	80011fc <gpio_write_bit>

    u32 c;
    while (count-- > 0) 
 8001240:	b1b4      	cbz	r4, 8001270 <strobePin+0x4c>
 8001242:	4635      	mov	r5, r6
	{
        for (c = rate; c > 0; c--)
 8001244:	b115      	cbz	r5, 800124c <strobePin+0x28>
		{
            asm volatile("nop");
 8001246:	bf00      	nop
    gpio_write_bit( bank,pin,1-onState);

    u32 c;
    while (count-- > 0) 
	{
        for (c = rate; c > 0; c--)
 8001248:	3d01      	subs	r5, #1
 800124a:	e7fb      	b.n	8001244 <strobePin+0x20>
		{
            asm volatile("nop");
        }
		
        gpio_write_bit( bank,pin,onState);
 800124c:	4640      	mov	r0, r8
 800124e:	4649      	mov	r1, r9
 8001250:	4652      	mov	r2, sl
 8001252:	f7ff ffd3 	bl	80011fc <gpio_write_bit>
		
        for (c = rate; c > 0; c--)
 8001256:	4635      	mov	r5, r6
 8001258:	b115      	cbz	r5, 8001260 <strobePin+0x3c>
		{
            asm volatile("nop");
 800125a:	bf00      	nop
            asm volatile("nop");
        }
		
        gpio_write_bit( bank,pin,onState);
		
        for (c = rate; c > 0; c--)
 800125c:	3d01      	subs	r5, #1
 800125e:	e7fb      	b.n	8001258 <strobePin+0x34>
		{
            asm volatile("nop");
        }
        gpio_write_bit( bank,pin,1-onState);
 8001260:	4640      	mov	r0, r8
 8001262:	4649      	mov	r1, r9
 8001264:	463a      	mov	r2, r7
 8001266:	3c01      	subs	r4, #1
 8001268:	f7ff ffc8 	bl	80011fc <gpio_write_bit>
 800126c:	b2e4      	uxtb	r4, r4
 800126e:	e7e7      	b.n	8001240 <strobePin+0x1c>
 8001270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001274 <UU_PutChar>:

//DebugLog
#ifdef DEBUG
void UU_PutChar(USART_TypeDef* USARTx, uint8_t ch)
{
  while(!(USARTx->SR & USART_SR_TXE));
 8001274:	8803      	ldrh	r3, [r0, #0]
 8001276:	061b      	lsls	r3, r3, #24
 8001278:	d5fc      	bpl.n	8001274 <UU_PutChar>
  USARTx->DR = ch;  
 800127a:	8081      	strh	r1, [r0, #4]
 800127c:	4770      	bx	lr

0800127e <UU_PutString>:
}

void UU_PutString(USART_TypeDef* USARTx, uint8_t * str)
{
 800127e:	b538      	push	{r3, r4, r5, lr}
 8001280:	4605      	mov	r5, r0
 8001282:	1e4c      	subs	r4, r1, #1
  while(*str != 0)
 8001284:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001288:	b119      	cbz	r1, 8001292 <UU_PutString+0x14>
  {
    UU_PutChar(USARTx, *str);
 800128a:	4628      	mov	r0, r5
 800128c:	f7ff fff2 	bl	8001274 <UU_PutChar>
 8001290:	e7f8      	b.n	8001284 <UU_PutString+0x6>
    str++;
  }
}
 8001292:	bd38      	pop	{r3, r4, r5, pc}

08001294 <vprint>:

void vprint(const char *fmt, va_list argp)
{
 8001294:	b500      	push	{lr}
 8001296:	4603      	mov	r3, r0
 8001298:	b0b3      	sub	sp, #204	; 0xcc
 800129a:	460a      	mov	r2, r1
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 800129c:	4668      	mov	r0, sp
 800129e:	4619      	mov	r1, r3
 80012a0:	f006 f82a 	bl	80072f8 <vsiprintf>
 80012a4:	2800      	cmp	r0, #0
 80012a6:	dd03      	ble.n	80012b0 <vprint+0x1c>
    {
        UU_PutString(USART1, (uint8_t*)string); // send message via UART
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <vprint+0x24>)
 80012aa:	4669      	mov	r1, sp
 80012ac:	f7ff ffe7 	bl	800127e <UU_PutString>

    }
}
 80012b0:	b033      	add	sp, #204	; 0xcc
 80012b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80012b6:	bf00      	nop
 80012b8:	40013800 	andmi	r3, r1, r0, lsl #16

080012bc <uart_printf>:

void uart_printf(const char *fmt, ...) // custom printf() function
{
 80012bc:	b40f      	push	{r0, r1, r2, r3}
 80012be:	b507      	push	{r0, r1, r2, lr}
 80012c0:	a904      	add	r1, sp, #16
 80012c2:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list argp;
    va_start(argp, fmt);
 80012c6:	9101      	str	r1, [sp, #4]
    vprint(fmt, argp);
 80012c8:	f7ff ffe4 	bl	8001294 <vprint>
    va_end(argp);
}
 80012cc:	b003      	add	sp, #12
 80012ce:	f85d eb04 	ldr.w	lr, [sp], #4
 80012d2:	b004      	add	sp, #16
 80012d4:	4770      	bx	lr
	...

080012d8 <hexdump>:

void hexdump(unsigned char *data, size_t size)
{
 80012d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012da:	b087      	sub	sp, #28
 80012dc:	4606      	mov	r6, r0
 80012de:	460f      	mov	r7, r1
    int i;
    char cs[17];
    memset(cs, 0, 17);
 80012e0:	a801      	add	r0, sp, #4
 80012e2:	2100      	movs	r1, #0
 80012e4:	2211      	movs	r2, #17
 80012e6:	f005 fcec 	bl	8006cc2 <memset>

    for(i = 0; i < size; i++)
 80012ea:	2400      	movs	r4, #0
 80012ec:	42bc      	cmp	r4, r7
 80012ee:	f004 050f 	and.w	r5, r4, #15
 80012f2:	d021      	beq.n	8001338 <hexdump+0x60>
    {
        if(i != 0 && i % 0x10 == 0)
 80012f4:	b184      	cbz	r4, 8001318 <hexdump+0x40>
 80012f6:	b94d      	cbnz	r5, 800130c <hexdump+0x34>
        {
            debug_print(" |%s|\n", cs);
 80012f8:	a901      	add	r1, sp, #4
 80012fa:	481a      	ldr	r0, [pc, #104]	; (8001364 <hexdump+0x8c>)
 80012fc:	f7ff ffde 	bl	80012bc <uart_printf>
            memset(cs, 0, 17);
 8001300:	a801      	add	r0, sp, #4
 8001302:	4629      	mov	r1, r5
 8001304:	2211      	movs	r2, #17
 8001306:	f005 fcdc 	bl	8006cc2 <memset>
 800130a:	e005      	b.n	8001318 <hexdump+0x40>
        }
        else if(i != 0 && i % 0x8 == 0)
 800130c:	f014 0107 	ands.w	r1, r4, #7
 8001310:	d102      	bne.n	8001318 <hexdump+0x40>
        {
            debug_print(" ",0);
 8001312:	4815      	ldr	r0, [pc, #84]	; (8001368 <hexdump+0x90>)
 8001314:	f7ff ffd2 	bl	80012bc <uart_printf>
        }
        debug_print("%02X ", data[i]);
 8001318:	5d31      	ldrb	r1, [r6, r4]
 800131a:	4814      	ldr	r0, [pc, #80]	; (800136c <hexdump+0x94>)
 800131c:	f7ff ffce 	bl	80012bc <uart_printf>
        cs[(i % 0x10)] = (data[i] >= 0x20 && data[i] <= 0x7e) ? data[i] : '.';
 8001320:	5d33      	ldrb	r3, [r6, r4]
{
    int i;
    char cs[17];
    memset(cs, 0, 17);

    for(i = 0; i < size; i++)
 8001322:	3401      	adds	r4, #1
        else if(i != 0 && i % 0x8 == 0)
        {
            debug_print(" ",0);
        }
        debug_print("%02X ", data[i]);
        cs[(i % 0x10)] = (data[i] >= 0x20 && data[i] <= 0x7e) ? data[i] : '.';
 8001324:	f1a3 0220 	sub.w	r2, r3, #32
 8001328:	2a5e      	cmp	r2, #94	; 0x5e
 800132a:	aa06      	add	r2, sp, #24
 800132c:	bf88      	it	hi
 800132e:	232e      	movhi	r3, #46	; 0x2e
 8001330:	4415      	add	r5, r2
 8001332:	f805 3c14 	strb.w	r3, [r5, #-20]
 8001336:	e7d9      	b.n	80012ec <hexdump+0x14>
    }

    i = i % 0x10;
    if(i != 0)
 8001338:	b92d      	cbnz	r5, 8001346 <hexdump+0x6e>
        while(i++ < 0x10)
        {
            debug_print("   ",0);
        }
    }
    debug_print(" |%s|\n", cs);
 800133a:	480a      	ldr	r0, [pc, #40]	; (8001364 <hexdump+0x8c>)
 800133c:	a901      	add	r1, sp, #4
 800133e:	f7ff ffbd 	bl	80012bc <uart_printf>
}
 8001342:	b007      	add	sp, #28
 8001344:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }

    i = i % 0x10;
    if(i != 0)
    {
        if(i <= 0x8)
 8001346:	2d08      	cmp	r5, #8
 8001348:	dc03      	bgt.n	8001352 <hexdump+0x7a>
        {
            debug_print(" ",0);
 800134a:	4807      	ldr	r0, [pc, #28]	; (8001368 <hexdump+0x90>)
 800134c:	2100      	movs	r1, #0
 800134e:	f7ff ffb5 	bl	80012bc <uart_printf>
        }
        while(i++ < 0x10)
 8001352:	2d10      	cmp	r5, #16
 8001354:	d0f1      	beq.n	800133a <hexdump+0x62>
        {
            debug_print("   ",0);
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <hexdump+0x98>)
 8001358:	2100      	movs	r1, #0
 800135a:	f7ff ffaf 	bl	80012bc <uart_printf>
 800135e:	3501      	adds	r5, #1
 8001360:	e7f7      	b.n	8001352 <hexdump+0x7a>
 8001362:	bf00      	nop
 8001364:	080076bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, ip, sp, lr}
 8001368:	080076cb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r9, sl, ip, sp, lr}
 800136c:	080076c3 	stmdaeq	r0, {r0, r1, r6, r7, r9, sl, ip, sp, lr}
 8001370:	080076c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, sl, ip, sp, lr}

08001374 <print_hash>:
    }
    debug_print(" |%s|\n", cs);
}

void print_hash(unsigned char hash[])
{
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	4605      	mov	r5, r0
   int idx;
   for (idx=0; idx < 32; idx++)
 8001378:	2400      	movs	r4, #0
      debug_print("%02x",hash[idx]);
 800137a:	5d29      	ldrb	r1, [r5, r4]
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <print_hash+0x20>)
}

void print_hash(unsigned char hash[])
{
   int idx;
   for (idx=0; idx < 32; idx++)
 800137e:	3401      	adds	r4, #1
      debug_print("%02x",hash[idx]);
 8001380:	f7ff ff9c 	bl	80012bc <uart_printf>
}

void print_hash(unsigned char hash[])
{
   int idx;
   for (idx=0; idx < 32; idx++)
 8001384:	2c20      	cmp	r4, #32
 8001386:	d1f8      	bne.n	800137a <print_hash+0x6>
      debug_print("%02x",hash[idx]);
   debug_print("\n", 0);
 8001388:	4803      	ldr	r0, [pc, #12]	; (8001398 <print_hash+0x24>)
 800138a:	2100      	movs	r1, #0
}
 800138c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void print_hash(unsigned char hash[])
{
   int idx;
   for (idx=0; idx < 32; idx++)
      debug_print("%02x",hash[idx]);
   debug_print("\n", 0);
 8001390:	f7ff bf94 	b.w	80012bc <uart_printf>
 8001394:	080076cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, ip, sp, lr}
 8001398:	080076ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, sl, ip, sp, lr}

0800139c <uartInit>:
}

#endif
void uartInit(void) {
 800139c:	b510      	push	{r4, lr}
    USART_InitTypeDef USART_InitStructure;
    
    /* Enable peripheral clocks for USART1 on GPIOA */
    //RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
        RCC_APB2PeriphClockCmd(GPIOA, ENABLE);
 800139e:	4c20      	ldr	r4, [pc, #128]	; (8001420 <uartInit+0x84>)
      debug_print("%02x",hash[idx]);
   debug_print("\n", 0);
}

#endif
void uartInit(void) {
 80013a0:	b086      	sub	sp, #24
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    
    /* Enable peripheral clocks for USART1 on GPIOA */
    //RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80013a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013a6:	2101      	movs	r1, #1
 80013a8:	f7ff f952 	bl	8000650 <RCC_APB2PeriphClockCmd>
        RCC_APB2PeriphClockCmd(GPIOA, ENABLE);
 80013ac:	4620      	mov	r0, r4
 80013ae:	2101      	movs	r1, #1
 80013b0:	f7ff f94e 	bl	8000650 <RCC_APB2PeriphClockCmd>
    /* Configure PA9 and PA10 as USART1 TX/RX */
    
    /* PA9 = alternate function push/pull output */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 80013b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b8:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80013bc:	2303      	movs	r3, #3
 80013be:	f88d 3006 	strb.w	r3, [sp, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
 80013c2:	4620      	mov	r0, r4
    /* Configure PA9 and PA10 as USART1 TX/RX */
    
    /* PA9 = alternate function push/pull output */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80013c4:	2318      	movs	r3, #24
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
 80013c6:	a901      	add	r1, sp, #4
    /* Configure PA9 and PA10 as USART1 TX/RX */
    
    /* PA9 = alternate function push/pull output */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80013c8:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
 80013cc:	f7fe ff0a 	bl	80001e4 <GPIO_Init>
    
    /* PA10 = floating input */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80013d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d4:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80013d8:	2304      	movs	r3, #4
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
 80013da:	eb0d 0103 	add.w	r1, sp, r3
 80013de:	4620      	mov	r0, r4
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
    
    /* PA10 = floating input */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80013e0:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
 80013e4:	f7fe fefe 	bl	80001e4 <GPIO_Init>
    
    /* Configure and initialize usart... */
    USART_InitStructure.USART_BaudRate = 115200;
 80013e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80013ec:	9302      	str	r3, [sp, #8]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
        
    USART_Init(USART1, &USART_InitStructure);
 80013ee:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
    
    /* Configure and initialize usart... */
    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8ad 300c 	strh.w	r3, [sp, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80013f8:	f8ad 300e 	strh.w	r3, [sp, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 80013fc:	f8ad 3010 	strh.w	r3, [sp, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001400:	f8ad 3014 	strh.w	r3, [sp, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
        
    USART_Init(USART1, &USART_InitStructure);
 8001404:	a902      	add	r1, sp, #8
    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001406:	230c      	movs	r3, #12
        
    USART_Init(USART1, &USART_InitStructure);
 8001408:	4620      	mov	r0, r4
    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800140a:	f8ad 3012 	strh.w	r3, [sp, #18]
        
    USART_Init(USART1, &USART_InitStructure);
 800140e:	f7ff f9eb 	bl	80007e8 <USART_Init>
    
    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);   
 8001412:	4620      	mov	r0, r4
 8001414:	2101      	movs	r1, #1
 8001416:	f7ff fa69 	bl	80008ec <USART_Cmd>
}
 800141a:	b006      	add	sp, #24
 800141c:	bd10      	pop	{r4, pc}
 800141e:	bf00      	nop
 8001420:	40010800 	andmi	r0, r1, r0, lsl #16

08001424 <systemReset>:

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <systemReset+0x38>)
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8001426:	490e      	ldr	r1, [pc, #56]	; (8001460 <systemReset+0x3c>)
    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);   
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	f042 0201 	orr.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8001430:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <systemReset+0x40>)
 8001432:	6810      	ldr	r0, [r2, #0]
 8001434:	4001      	ands	r1, r0
 8001436:	6011      	str	r1, [r2, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
 8001438:	6819      	ldr	r1, [r3, #0]
 800143a:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800143e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001442:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
 8001444:	6819      	ldr	r1, [r3, #0]
 8001446:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800144a:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);
 800144c:	6813      	ldr	r3, [r2, #0]
 800144e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001452:	6013      	str	r3, [r2, #0]

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <systemReset+0x44>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	4770      	bx	lr
 800145c:	40021000 	andmi	r1, r2, r0
 8001460:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000
 8001464:	40021004 	andmi	r1, r2, r4
 8001468:	40021008 	andmi	r1, r2, r8

0800146c <setupCLK>:
}

void setupCLK(void) {
	unsigned int StartUpCounter=0;
    /* enable HSE */
    SET_REG(RCC_CR, GET_REG(RCC_CR) | 0x00010001);
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <setupCLK+0x58>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 8001474:	601a      	str	r2, [r3, #0]
    while ((GET_REG(RCC_CR) & 0x00020000) == 0); /* for it to come on */
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4812      	ldr	r0, [pc, #72]	; (80014c4 <setupCLK+0x58>)
 800147a:	0392      	lsls	r2, r2, #14
 800147c:	d5fb      	bpl.n	8001476 <setupCLK+0xa>

    /* enable flash prefetch buffer */
    SET_REG(FLASH_ACR, 0x00000012);
 800147e:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <setupCLK+0x5c>)
 8001480:	2112      	movs	r1, #18
 8001482:	6011      	str	r1, [r2, #0]
	
     /* Configure PLL */
#ifdef XTAL12M
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00110400); /* pll=72Mhz(x6),APB1=36Mhz,AHB=72Mhz */
#else
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x001D0400); /* pll=72Mhz(x9),APB1=36Mhz,AHB=72Mhz */
 8001484:	f6a2 72fc 	subw	r2, r2, #4092	; 0xffc
 8001488:	6811      	ldr	r1, [r2, #0]
 800148a:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 800148e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001492:	6011      	str	r1, [r2, #0]
#endif	

    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x01000000); /* enable the pll */
 8001494:	6801      	ldr	r1, [r0, #0]
 8001496:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800149a:	6001      	str	r1, [r0, #0]

#if !defined  (HSE_STARTUP_TIMEOUT) 
  #define HSE_STARTUP_TIMEOUT    ((unsigned int)0x0500)   /*!< Time out for HSE start up */
#endif /* HSE_STARTUP_TIMEOUT */   

    while ((GET_REG(RCC_CR) & 0x03000000) == 0 && StartUpCounter < HSE_STARTUP_TIMEOUT)
 800149c:	6819      	ldr	r1, [r3, #0]
 800149e:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
 80014a2:	d0fb      	beq.n	800149c <setupCLK+0x30>
	{
		// HSE has not started. Try restarting the processor
		systemHardReset(); 
	}
    /* Set SYSCLK as PLL */
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00000002);
 80014a4:	6811      	ldr	r1, [r2, #0]
 80014a6:	f041 0102 	orr.w	r1, r1, #2
 80014aa:	6011      	str	r1, [r2, #0]
    while ((GET_REG(RCC_CFGR) & 0x00000008) == 0); /* wait for it to come on */
 80014ac:	6811      	ldr	r1, [r2, #0]
 80014ae:	0709      	lsls	r1, r1, #28
 80014b0:	d5fc      	bpl.n	80014ac <setupCLK+0x40>
	
    pRCC->APB2ENR |= 0B111111100;// Enable All GPIO channels (A to G)
 80014b2:	699a      	ldr	r2, [r3, #24]
 80014b4:	f442 72fe 	orr.w	r2, r2, #508	; 0x1fc
 80014b8:	619a      	str	r2, [r3, #24]
	pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
 80014ba:	69da      	ldr	r2, [r3, #28]
 80014bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014c0:	61da      	str	r2, [r3, #28]
 80014c2:	4770      	bx	lr
 80014c4:	40021000 	andmi	r1, r2, r0
 80014c8:	40022000 	andmi	r2, r2, r0

080014cc <setupLEDAndButton>:

}

void setupLEDAndButton (void) { 
  SET_REG(GPIO_CR(LED_BANK,LED_PIN),(GET_REG(GPIO_CR(LED_BANK,LED_PIN)) & crMask(LED_PIN)) | CR_OUTPUT_PP << CR_SHITF(LED_PIN));
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <setupLEDAndButton+0x10>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	4770      	bx	lr
 80014dc:	40011004 	andmi	r1, r1, r4

080014e0 <setupFLASH>:
}

void setupFLASH() {
    /* configure the HSI oscillator */
    if ((pRCC->CR & 0x01) == 0x00) {
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <setupFLASH+0x18>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	07d1      	lsls	r1, r2, #31
 80014e6:	d403      	bmi.n	80014f0 <setupFLASH+0x10>
        u32 rwmVal = pRCC->CR;
 80014e8:	681a      	ldr	r2, [r3, #0]
        rwmVal |= 0x01;
 80014ea:	f042 0201 	orr.w	r2, r2, #1
        pRCC->CR = rwmVal;
 80014ee:	601a      	str	r2, [r3, #0]
    }

    /* wait for it to come on */
    while ((pRCC->CR & 0x02) == 0x00) {}
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	0792      	lsls	r2, r2, #30
 80014f4:	d5fc      	bpl.n	80014f0 <setupFLASH+0x10>
}   
 80014f6:	4770      	bx	lr
 80014f8:	40021000 	andmi	r1, r2, r0

080014fc <uid_read>:
{
  if (QEMU_BUILD) // put an arbitrary ECID in qemu
  {
    memcpy(&id, (unsigned char*)0xFF, 23);
  } else {
    id->off0 = MMIO16(U_ID + 0x0);
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <uid_read+0x1c>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	8003      	strh	r3, [r0, #0]
    id->off2 = MMIO16(U_ID + 0x2);
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <uid_read+0x20>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	8043      	strh	r3, [r0, #2]
    id->off4 = MMIO32(U_ID + 0x4);
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <uid_read+0x24>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6043      	str	r3, [r0, #4]
    id->off8 = MMIO32(U_ID + 0x8);
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <uid_read+0x28>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6083      	str	r3, [r0, #8]
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	1ffff7e8 	svcne	0x00fff7e8
 800151c:	1ffff7ea 	svcne	0x00fff7ea
 8001520:	1ffff7ec 	svcne	0x00fff7ec
 8001524:	1ffff7f0 	svcne	0x00fff7f0

08001528 <setMspAndJump>:
  typedef void (*funcPtr)(void);
  u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */

  funcPtr usrMain = (funcPtr) jumpAddr;

  SET_REG(SCB_VTOR, (vu32) (usrAddr));
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <setMspAndJump+0x14>)
    id->off4 = MMIO32(U_ID + 0x4);
    id->off8 = MMIO32(U_ID + 0x8);
  }
}

void setMspAndJump(u32 usrAddr) {
 800152a:	b508      	push	{r3, lr}
  // Dedicated function with no call to any function (appart the last call)
  // This way, there is no manipulation of the stack here, ensuring that GGC
  // didn't insert any pop from the SP after having set the MSP.
  typedef void (*funcPtr)(void);
  u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */
 800152c:	6843      	ldr	r3, [r0, #4]

  funcPtr usrMain = (funcPtr) jumpAddr;

  SET_REG(SCB_VTOR, (vu32) (usrAddr));
 800152e:	6010      	str	r0, [r2, #0]

  asm volatile("msr msp, %0"::"g"
               (*(volatile u32 *)usrAddr));
 8001530:	6802      	ldr	r2, [r0, #0]

  funcPtr usrMain = (funcPtr) jumpAddr;

  SET_REG(SCB_VTOR, (vu32) (usrAddr));

  asm volatile("msr msp, %0"::"g"
 8001532:	f382 8808 	msr	MSP, r2
               (*(volatile u32 *)usrAddr));

  usrMain();                                /* go! */
 8001536:	4798      	blx	r3
 8001538:	bd08      	pop	{r3, pc}
 800153a:	bf00      	nop
 800153c:	e000ed08 	and	lr, r0, r8, lsl #26

08001540 <nvicInit>:
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <nvicInit+0x64>)
		pRCC->APB1ENR &= ~(RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
	}
    return flagSet;
}

void nvicInit(NVIC_InitTypeDef *NVIC_InitStruct) {
 8001542:	b530      	push	{r4, r5, lr}
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 8001544:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001546:	7844      	ldrb	r4, [r0, #1]
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 8001548:	43db      	mvns	r3, r3
 800154a:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 800154e:	f1c3 0204 	rsb	r2, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001552:	fa04 f202 	lsl.w	r2, r4, r2


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8001556:	240f      	movs	r4, #15
 8001558:	40dc      	lsrs	r4, r3

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800155a:	7881      	ldrb	r1, [r0, #2]

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 800155c:	7803      	ldrb	r3, [r0, #0]
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800155e:	400c      	ands	r4, r1
 8001560:	4314      	orrs	r4, r2

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8001562:	f003 0103 	and.w	r1, r3, #3
 8001566:	00c9      	lsls	r1, r1, #3
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 8001568:	0124      	lsls	r4, r4, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 800156a:	22ff      	movs	r2, #255	; 0xff

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 800156c:	408c      	lsls	r4, r1

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 800156e:	408a      	lsls	r2, r1
 8001570:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8001574:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001578:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 800157c:	f8d3 5300 	ldr.w	r5, [r3, #768]	; 0x300
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 8001580:	ea25 0102 	bic.w	r1, r5, r2
    tmppriority &= tmpmask;
 8001584:	4022      	ands	r2, r4
    tmpreg |= tmppriority;
 8001586:	430a      	orrs	r2, r1

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 8001588:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 800158c:	7803      	ldrb	r3, [r0, #0]
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 800158e:	2201      	movs	r2, #1
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8001590:	0959      	lsrs	r1, r3, #5
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8001592:	f003 031f 	and.w	r3, r3, #31
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 800159a:	4a03      	ldr	r2, [pc, #12]	; (80015a8 <nvicInit+0x68>)
 800159c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80015a0:	bd30      	pop	{r4, r5, pc}
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	and	lr, r0, r0, lsl #26
 80015a8:	e000e100 	and	lr, r0, r0, lsl #2

080015ac <nvicDisableInterrupts>:
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <nvicDisableInterrupts+0x20>)
 80015ae:	f04f 32ff 	mov.w	r2, #4294967295
 80015b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    rNVIC->ICER[1] = 0xFFFFFFFF;
 80015b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    rNVIC->ICPR[0] = 0xFFFFFFFF;
 80015ba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    rNVIC->ICPR[1] = 0xFFFFFFFF;
 80015be:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 80015c2:	2204      	movs	r2, #4
 80015c4:	f843 2cf0 	str.w	r2, [r3, #-240]
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	and	lr, r0, r0, lsl #2

080015d0 <jumpToUser>:

  usrMain();                                /* go! */
}


void jumpToUser(u32 usrAddr) {
 80015d0:	b510      	push	{r4, lr}
 80015d2:	4604      	mov	r4, r0
    /* tear down all the dfu related setup */
    // disable usb interrupts, clear them, turn off usb, set the disc pin
    // todo pick exactly what we want to do here, now its just a conservative

    //flashLock();
    usbDsbISR();
 80015d4:	f7ff fcc2 	bl	8000f5c <usbDsbISR>
    nvicDisableInterrupts();
 80015d8:	f7ff ffe8 	bl	80015ac <nvicDisableInterrupts>
	
#ifndef HAS_MAPLE_HARDWARE	
	usbDsbBus();
 80015dc:	f7ff fc8a 	bl	8000ef4 <usbDsbBus>
#endif
	
// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs
 80015e0:	f7ff ff20 	bl	8001424 <systemReset>
    //SET_REG(AFIO_MAPR,(GET_REG(AFIO_MAPR) & ~AFIO_MAPR_SWJ_CFG) | AFIO_MAPR_SWJ_CFG_NO_JTAG_NO_SW);// Try to disable SWD AND JTAG so we can use those pins (not sure if this works).
    setMspAndJump(usrAddr);
 80015e4:	4620      	mov	r0, r4
}
 80015e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
	
// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs
    //SET_REG(AFIO_MAPR,(GET_REG(AFIO_MAPR) & ~AFIO_MAPR_SWJ_CFG) | AFIO_MAPR_SWJ_CFG_NO_JTAG_NO_SW);// Try to disable SWD AND JTAG so we can use those pins (not sure if this works).
    setMspAndJump(usrAddr);
 80015ea:	f7ff bf9d 	b.w	8001528 <setMspAndJump>
	...

080015f0 <systemHardReset>:

void systemHardReset(void) {
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;

    /* Reset  */
    rSCB->AIRCR = (u32)AIRCR_RESET_REQ;
 80015f0:	4a02      	ldr	r2, [pc, #8]	; (80015fc <systemHardReset+0xc>)
 80015f2:	4b03      	ldr	r3, [pc, #12]	; (8001600 <systemHardReset+0x10>)
 80015f4:	60da      	str	r2, [r3, #12]

    /*  should never get here */
    while (1) {
        asm volatile("nop");
 80015f6:	bf00      	nop
 80015f8:	e7fd      	b.n	80015f6 <systemHardReset+0x6>
 80015fa:	bf00      	nop
 80015fc:	05fa0004 	ldrbeq	r0, [sl, #4]!
 8001600:	e000ed00 	and	lr, r0, r0, lsl #26

08001604 <flashErasePage>:
    }
}

bool flashErasePage(u32 pageAddr) {
    u32 rwmVal = GET_REG(FLASH_CR);
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <flashErasePage+0x2c>)
    while (1) {
        asm volatile("nop");
    }
}

bool flashErasePage(u32 pageAddr) {
 8001606:	b510      	push	{r4, lr}
    u32 rwmVal = GET_REG(FLASH_CR);
 8001608:	681a      	ldr	r2, [r3, #0]
    rwmVal = FLASH_CR_PER;
    SET_REG(FLASH_CR, rwmVal);
 800160a:	2202      	movs	r2, #2
 800160c:	601a      	str	r2, [r3, #0]

    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 800160e:	4a09      	ldr	r2, [pc, #36]	; (8001634 <flashErasePage+0x30>)
 8001610:	6811      	ldr	r1, [r2, #0]
 8001612:	4614      	mov	r4, r2
 8001614:	f011 0f01 	tst.w	r1, #1
 8001618:	d1f9      	bne.n	800160e <flashErasePage+0xa>
    SET_REG(FLASH_AR, pageAddr);
 800161a:	6090      	str	r0, [r2, #8]
    SET_REG(FLASH_CR, FLASH_CR_START | FLASH_CR_PER);
 800161c:	2242      	movs	r2, #66	; 0x42
 800161e:	601a      	str	r2, [r3, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8001620:	6822      	ldr	r2, [r4, #0]
 8001622:	f012 0101 	ands.w	r1, r2, #1
 8001626:	d1fb      	bne.n	8001620 <flashErasePage+0x1c>

    /* todo: verify the page was erased */

    rwmVal = 0x00;
    SET_REG(FLASH_CR, rwmVal);
 8001628:	6019      	str	r1, [r3, #0]

    return TRUE;
}
 800162a:	2001      	movs	r0, #1
 800162c:	bd10      	pop	{r4, pc}
 800162e:	bf00      	nop
 8001630:	40022010 	andmi	r2, r2, r0, lsl r0
 8001634:	4002200c 	andmi	r2, r2, ip

08001638 <flashWriteWord>:
    }

    return TRUE;
}

bool flashWriteWord(u32 addr, u32 word) {
 8001638:	b537      	push	{r0, r1, r2, r4, r5, lr}
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
 800163a:	b28b      	uxth	r3, r1
 800163c:	9300      	str	r3, [sp, #0]
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;
 800163e:	0c0b      	lsrs	r3, r1, #16
 8001640:	9301      	str	r3, [sp, #4]

    u32 rwmVal = GET_REG(FLASH_CR);
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <flashWriteWord+0x44>)
    SET_REG(FLASH_CR, FLASH_CR_PG);
 8001644:	2201      	movs	r2, #1
bool flashWriteWord(u32 addr, u32 word) {
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;

    u32 rwmVal = GET_REG(FLASH_CR);
 8001646:	681c      	ldr	r4, [r3, #0]
    SET_REG(FLASH_CR, FLASH_CR_PG);
 8001648:	601a      	str	r2, [r3, #0]

    /* apparently we need not write to FLASH_AR and can
       simply do a native write of a half word */
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 800164a:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <flashWriteWord+0x48>)
 800164c:	6815      	ldr	r5, [r2, #0]
 800164e:	07ed      	lsls	r5, r5, #31
 8001650:	d4fb      	bmi.n	800164a <flashWriteWord+0x12>
    *(flashAddr + 0x01) = (vu16)hhWord;
 8001652:	9d01      	ldr	r5, [sp, #4]
 8001654:	b2ad      	uxth	r5, r5
 8001656:	8045      	strh	r5, [r0, #2]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8001658:	6815      	ldr	r5, [r2, #0]
 800165a:	07ed      	lsls	r5, r5, #31
 800165c:	d4fc      	bmi.n	8001658 <flashWriteWord+0x20>
    *(flashAddr) = (vu16)lhWord;
 800165e:	9d00      	ldr	r5, [sp, #0]
 8001660:	b2ad      	uxth	r5, r5
 8001662:	8005      	strh	r5, [r0, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8001664:	6815      	ldr	r5, [r2, #0]
 8001666:	07ed      	lsls	r5, r5, #31
 8001668:	d4fc      	bmi.n	8001664 <flashWriteWord+0x2c>

    rwmVal &= 0xFFFFFFFE;
 800166a:	f024 0201 	bic.w	r2, r4, #1
    SET_REG(FLASH_CR, rwmVal);
 800166e:	601a      	str	r2, [r3, #0]

    /* verify the write */
    if (*(vu32 *)addr != word) {
 8001670:	6800      	ldr	r0, [r0, #0]
        return FALSE;
    }

    return TRUE;
}
 8001672:	1a43      	subs	r3, r0, r1
 8001674:	4258      	negs	r0, r3
 8001676:	4158      	adcs	r0, r3
 8001678:	b003      	add	sp, #12
 800167a:	bd30      	pop	{r4, r5, pc}
 800167c:	40022010 	andmi	r2, r2, r0, lsl r0
 8001680:	4002200c 	andmi	r2, r2, ip

08001684 <flashLock>:

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 8001684:	4b01      	ldr	r3, [pc, #4]	; (800168c <flashLock+0x8>)
 8001686:	2280      	movs	r2, #128	; 0x80
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	4770      	bx	lr
 800168c:	40022010 	andmi	r2, r2, r0, lsl r0

08001690 <flashUnlock>:
}

void flashUnlock() {
    /* unlock the flash */
    SET_REG(FLASH_KEYR, FLASH_KEY1);
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <flashUnlock+0x10>)
 8001692:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <flashUnlock+0x14>)
 8001694:	601a      	str	r2, [r3, #0]
    SET_REG(FLASH_KEYR, FLASH_KEY2);
 8001696:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40022004 	andmi	r2, r2, r4
 80016a4:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123

080016a8 <crMask>:

// Used to create the control register masking pattern, when setting control register mode.
unsigned int crMask(int pin)
{
	unsigned int mask;
	if (pin>=8)
 80016a8:	2807      	cmp	r0, #7
	{
		pin-=8;
 80016aa:	bfc8      	it	gt
 80016ac:	3808      	subgt	r0, #8
	}
	mask = 0x0F << (pin<<2);
 80016ae:	230f      	movs	r3, #15
 80016b0:	0080      	lsls	r0, r0, #2
 80016b2:	fa03 f000 	lsl.w	r0, r3, r0
	return ~mask;
}	
 80016b6:	43c0      	mvns	r0, r0
 80016b8:	4770      	bx	lr
	...

080016bc <getFlashEnd>:

#define FLASH_SIZE_REG 0x1FFFF7E0
int getFlashEnd(void)
{
	unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register 
	return ((int)(*flashSize & 0xffff) * 1024) + 0x08000000;
 80016bc:	4b02      	ldr	r3, [pc, #8]	; (80016c8 <getFlashEnd+0xc>)
 80016be:	8818      	ldrh	r0, [r3, #0]
 80016c0:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
}
 80016c4:	0280      	lsls	r0, r0, #10
 80016c6:	4770      	bx	lr
 80016c8:	1ffff7e0 	svcne	0x00fff7e0

080016cc <getFlashPageSize>:

int getFlashPageSize(void)
{

	unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register 
	if ((*flashSize & 0xffff) > 128)
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <getFlashPageSize+0x14>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
	{
		return 0x800;
 80016d0:	2b81      	cmp	r3, #129	; 0x81
	}
	else
	{
		return 0x400;
	}
}
 80016d2:	bf34      	ite	cc
 80016d4:	f44f 6080 	movcc.w	r0, #1024	; 0x400
 80016d8:	f44f 6000 	movcs.w	r0, #2048	; 0x800
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	1ffff7e0 	svcne	0x00fff7e0

080016e4 <dfuInit>:

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 80016e4:	4a15      	ldr	r2, [pc, #84]	; (800173c <dfuInit+0x58>)


volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
 80016e6:	b508      	push	{r3, lr}
    dfuAppStatus.bStatus = OK;
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
 80016e8:	2102      	movs	r1, #2

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	7013      	strb	r3, [r2, #0]
    dfuAppStatus.bwPollTimeout0 = 0x00;
 80016ee:	7053      	strb	r3, [r2, #1]
    dfuAppStatus.bwPollTimeout1 = 0x00;
 80016f0:	7093      	strb	r3, [r2, #2]
    dfuAppStatus.bwPollTimeout2 = 0x00;
 80016f2:	70d3      	strb	r3, [r2, #3]
    dfuAppStatus.bState = dfuIDLE;
 80016f4:	7111      	strb	r1, [r2, #4]
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
 80016f6:	7153      	strb	r3, [r2, #5]
    userFirmwareLen = 0;
 80016f8:	4a11      	ldr	r2, [pc, #68]	; (8001740 <dfuInit+0x5c>)
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 80016fa:	4912      	ldr	r1, [pc, #72]	; (8001744 <dfuInit+0x60>)
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
 80016fc:	6013      	str	r3, [r2, #0]
    thisBlockLen = 0;;
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <dfuInit+0x64>)
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
    code_copy_lock = WAIT;
    dfuBusy = FALSE;
    memset(sha256sum, 0xFF, sizeof(sha256sum));
 8001700:	4812      	ldr	r0, [pc, #72]	; (800174c <dfuInit+0x68>)
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
    thisBlockLen = 0;;
 8001702:	8013      	strh	r3, [r2, #0]
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 8001704:	4a12      	ldr	r2, [pc, #72]	; (8001750 <dfuInit+0x6c>)
 8001706:	6011      	str	r1, [r2, #0]
    userAppEnd = RAM_END;
 8001708:	4a12      	ldr	r2, [pc, #72]	; (8001754 <dfuInit+0x70>)
 800170a:	f501 4188 	add.w	r1, r1, #17408	; 0x4400
 800170e:	6011      	str	r1, [r2, #0]
    userUploadType=DFU_UPLOAD_NONE;
 8001710:	4a11      	ldr	r2, [pc, #68]	; (8001758 <dfuInit+0x74>)
    code_copy_lock = WAIT;
 8001712:	2103      	movs	r1, #3
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
 8001714:	7013      	strb	r3, [r2, #0]
    code_copy_lock = WAIT;
 8001716:	4a11      	ldr	r2, [pc, #68]	; (800175c <dfuInit+0x78>)
 8001718:	7011      	strb	r1, [r2, #0]
    dfuBusy = FALSE;
 800171a:	4a11      	ldr	r2, [pc, #68]	; (8001760 <dfuInit+0x7c>)
    memset(sha256sum, 0xFF, sizeof(sha256sum));
 800171c:	21ff      	movs	r1, #255	; 0xff
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
    code_copy_lock = WAIT;
    dfuBusy = FALSE;
 800171e:	7013      	strb	r3, [r2, #0]
    memset(sha256sum, 0xFF, sizeof(sha256sum));
 8001720:	2220      	movs	r2, #32
 8001722:	f005 face 	bl	8006cc2 <memset>
    memset(input, 0xFF, sizeof(input));
 8001726:	480f      	ldr	r0, [pc, #60]	; (8001764 <dfuInit+0x80>)
 8001728:	21ff      	movs	r1, #255	; 0xff
 800172a:	225c      	movs	r2, #92	; 0x5c
 800172c:	f005 fac9 	bl	8006cc2 <memset>

    sha256_starts(&ctx);
}
 8001730:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    code_copy_lock = WAIT;
    dfuBusy = FALSE;
    memset(sha256sum, 0xFF, sizeof(sha256sum));
    memset(input, 0xFF, sizeof(input));

    sha256_starts(&ctx);
 8001734:	480c      	ldr	r0, [pc, #48]	; (8001768 <dfuInit+0x84>)
 8001736:	f001 be8b 	b.w	8003450 <sha256_starts>
 800173a:	bf00      	nop
 800173c:	20000dc5 	andcs	r0, r0, r5, asr #27
 8001740:	20000dc0 	andcs	r0, r0, r0, asr #27
 8001744:	20000c00 	andcs	r0, r0, r0, lsl #24
 8001748:	20000dbe 			; <UNDEFINED> instruction: 0x20000dbe
 800174c:	200004ec 	andcs	r0, r0, ip, ror #9
 8001750:	200002c0 	andcs	r0, r0, r0, asr #5
 8001754:	200002bc 			; <UNDEFINED> instruction: 0x200002bc
 8001758:	20000dc4 	andcs	r0, r0, r4, asr #27
 800175c:	20000574 	andcs	r0, r0, r4, ror r5
 8001760:	20000dcb 	andcs	r0, r0, fp, asr #27
 8001764:	20000490 	mulcs	r0, r0, r4
 8001768:	2000050c 	andcs	r0, r0, ip, lsl #10

0800176c <dfuUpdateByReset>:
    }

    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
}

void dfuUpdateByReset(void) {
 800176c:	b508      	push	{r3, lr}
    u8 startState = dfuAppStatus.bState;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <dfuUpdateByReset+0x3c>)
    userFirmwareLen = 0;
 8001770:	480e      	ldr	r0, [pc, #56]	; (80017ac <dfuUpdateByReset+0x40>)

    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 8001772:	7919      	ldrb	r1, [r3, #4]
    userFirmwareLen = 0;
 8001774:	2200      	movs	r2, #0

    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 8001776:	b2c9      	uxtb	r1, r1
    userFirmwareLen = 0;

    if (startState == appDETACH) {
 8001778:	2901      	cmp	r1, #1
    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
    userFirmwareLen = 0;
 800177a:	6002      	str	r2, [r0, #0]

    if (startState == appDETACH) {
 800177c:	d108      	bne.n	8001790 <dfuUpdateByReset+0x24>
        dfuAppStatus.bState = dfuIDLE;
 800177e:	2102      	movs	r1, #2
 8001780:	7119      	strb	r1, [r3, #4]
        dfuAppStatus.bStatus = OK;
 8001782:	701a      	strb	r2, [r3, #0]

        nvicDisableInterrupts();
 8001784:	f7ff ff12 	bl	80015ac <nvicDisableInterrupts>
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
    }
}
 8001788:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (startState == appDETACH) {
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        nvicDisableInterrupts();
        usbEnbISR();
 800178c:	f7ff bbb4 	b.w	8000ef8 <usbEnbISR>
    } else if (startState == appIDLE || startState == dfuIDLE) {
 8001790:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8001794:	d006      	beq.n	80017a4 <dfuUpdateByReset+0x38>
        /* do nothing...might be normal usb bus activity */
    } else {
        /* we reset from the dfu, reset everything and startover,
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
 8001796:	2102      	movs	r1, #2
 8001798:	7119      	strb	r1, [r3, #4]
        dfuAppStatus.bStatus = OK;
 800179a:	701a      	strb	r2, [r3, #0]

        systemHardReset();
    }
}
 800179c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
 80017a0:	f7ff bf26 	b.w	80015f0 <systemHardReset>
 80017a4:	bd08      	pop	{r3, pc}
 80017a6:	bf00      	nop
 80017a8:	20000dc5 	andcs	r0, r0, r5, asr #27
 80017ac:	20000dc0 	andcs	r0, r0, r0, asr #27

080017b0 <dfuCopyState>:

void dfuUpdateByTimeout(void) {
}

u8 *dfuCopyState(u16 length) {
    if (length == 0) {
 80017b0:	b920      	cbnz	r0, 80017bc <dfuCopyState+0xc>
        pInformation->Ctrl_Info.Usb_wLength = 1;
 80017b2:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <dfuCopyState+0x10>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	821a      	strh	r2, [r3, #16]
        return NULL;
 80017ba:	4770      	bx	lr
    } else {
        return (u8 *)(&(dfuAppStatus.bState));
 80017bc:	4801      	ldr	r0, [pc, #4]	; (80017c4 <dfuCopyState+0x14>)
    }
}
 80017be:	4770      	bx	lr
 80017c0:	200005a8 	andcs	r0, r0, r8, lsr #11
 80017c4:	20000dc9 	andcs	r0, r0, r9, asr #27

080017c8 <dfuCopyStatus>:

u8 *dfuCopyStatus(u16 length) {
    if (length == 0) {
 80017c8:	b920      	cbnz	r0, 80017d4 <dfuCopyStatus+0xc>
        pInformation->Ctrl_Info.Usb_wLength = 6;
 80017ca:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <dfuCopyStatus+0x10>)
 80017cc:	2206      	movs	r2, #6
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	821a      	strh	r2, [r3, #16]
        return NULL;
 80017d2:	4770      	bx	lr
    } else {
        return (u8*)(&dfuAppStatus);
 80017d4:	4801      	ldr	r0, [pc, #4]	; (80017dc <dfuCopyStatus+0x14>)
    }
}
 80017d6:	4770      	bx	lr
 80017d8:	200005a8 	andcs	r0, r0, r8, lsr #11
 80017dc:	20000dc5 	andcs	r0, r0, r5, asr #27

080017e0 <dfuCopyDNLOAD>:


u8 *dfuCopyDNLOAD(u16 length) {
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <dfuCopyDNLOAD+0x1c>)
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 80017e2:	681b      	ldr	r3, [r3, #0]
    }
}


u8 *dfuCopyDNLOAD(u16 length) {
    if (length == 0) {
 80017e4:	b930      	cbnz	r0, 80017f4 <dfuCopyDNLOAD+0x14>
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 80017e6:	88da      	ldrh	r2, [r3, #6]
 80017e8:	8a59      	ldrh	r1, [r3, #18]
 80017ea:	1a51      	subs	r1, r2, r1
 80017ec:	8219      	strh	r1, [r3, #16]
        thisBlockLen = pInformation->USBwLengths.w;
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <dfuCopyDNLOAD+0x20>)
 80017f0:	801a      	strh	r2, [r3, #0]
        return NULL;
 80017f2:	4770      	bx	lr
    } else {
        return ((u8 *)recvBuffer + pInformation->Ctrl_Info.Usb_wOffset);
 80017f4:	8a5b      	ldrh	r3, [r3, #18]
 80017f6:	4803      	ldr	r0, [pc, #12]	; (8001804 <dfuCopyDNLOAD+0x24>)
 80017f8:	4418      	add	r0, r3
    }
}
 80017fa:	4770      	bx	lr
 80017fc:	200005a8 	andcs	r0, r0, r8, lsr #11
 8001800:	20000dbe 			; <UNDEFINED> instruction: 0x20000dbe
 8001804:	200005bc 			; <UNDEFINED> instruction: 0x200005bc

08001808 <dfuCopyUPLOAD>:

u8 *dfuCopyUPLOAD(u16 length) {
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <dfuCopyUPLOAD+0x24>)
    if (length == 0) {
 800180a:	b930      	cbnz	r0, 800181a <dfuCopyUPLOAD+0x12>
        pInformation->Ctrl_Info.Usb_wLength = thisBlockLen - pInformation->Ctrl_Info.Usb_wOffset;
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <dfuCopyUPLOAD+0x28>)
 8001810:	8811      	ldrh	r1, [r2, #0]
 8001812:	8a5a      	ldrh	r2, [r3, #18]
 8001814:	1a8a      	subs	r2, r1, r2
 8001816:	821a      	strh	r2, [r3, #16]
        return NULL;
 8001818:	4770      	bx	lr
    } else {
        return((u8*) userAppAddr + userFirmwareLen + pInformation->Ctrl_Info.Usb_wOffset);
 800181a:	4906      	ldr	r1, [pc, #24]	; (8001834 <dfuCopyUPLOAD+0x2c>)
 800181c:	4a06      	ldr	r2, [pc, #24]	; (8001838 <dfuCopyUPLOAD+0x30>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	6808      	ldr	r0, [r1, #0]
 8001824:	8a5b      	ldrh	r3, [r3, #18]
 8001826:	4410      	add	r0, r2
 8001828:	4418      	add	r0, r3
    }
}
 800182a:	4770      	bx	lr
 800182c:	200005a8 	andcs	r0, r0, r8, lsr #11
 8001830:	20000dbe 			; <UNDEFINED> instruction: 0x20000dbe
 8001834:	200002c0 	andcs	r0, r0, r0, asr #5
 8001838:	20000dc0 	andcs	r0, r0, r0, asr #27

0800183c <dfuCopyBufferToExec>:

void dfuCopyBufferToExec() {
 800183c:	b538      	push	{r3, r4, r5, lr}
        }
    } 
	else 
*/
	
	if (userUploadType == DFU_UPLOAD_FLASH_0X8008000) {
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <dfuCopyBufferToExec+0x48>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b04      	cmp	r3, #4
 8001844:	d105      	bne.n	8001852 <dfuCopyBufferToExec+0x16>
		userSpace = (u32 *)(USER_CODE_FLASH0X8008000 + userFirmwareLen);
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <dfuCopyBufferToExec+0x4c>)
 8001848:	681d      	ldr	r5, [r3, #0]
 800184a:	f105 6500 	add.w	r5, r5, #134217728	; 0x8000000
 800184e:	f505 4510 	add.w	r5, r5, #36864	; 0x9000
	}

    flashErasePage((u32)(userSpace));
 8001852:	4628      	mov	r0, r5
 8001854:	f7ff fed6 	bl	8001604 <flashErasePage>

    for (i = 0; i < thisBlockLen; i = i + 4) {
 8001858:	2400      	movs	r4, #0
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <dfuCopyBufferToExec+0x50>)
 800185c:	881a      	ldrh	r2, [r3, #0]
 800185e:	b292      	uxth	r2, r2
 8001860:	4294      	cmp	r4, r2
 8001862:	da06      	bge.n	8001872 <dfuCopyBufferToExec+0x36>
        /*if ((u32)(userSpace) >= 0x8008074)
        {
            sha256_update(&ctx, recvBuffer +i, sizeof(u32));
        }*/
        flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <dfuCopyBufferToExec+0x54>)
 8001866:	1928      	adds	r0, r5, r4
 8001868:	58e1      	ldr	r1, [r4, r3]
 800186a:	f7ff fee5 	bl	8001638 <flashWriteWord>
		userSpace = (u32 *)(USER_CODE_FLASH0X8008000 + userFirmwareLen);
	}

    flashErasePage((u32)(userSpace));

    for (i = 0; i < thisBlockLen; i = i + 4) {
 800186e:	3404      	adds	r4, #4
 8001870:	e7f3      	b.n	800185a <dfuCopyBufferToExec+0x1e>
            sha256_update(&ctx, recvBuffer +i, sizeof(u32));
        }*/
        flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
    }
    
    userFirmwareLen += thisBlockLen;
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <dfuCopyBufferToExec+0x4c>)
 8001874:	6810      	ldr	r0, [r2, #0]
 8001876:	8819      	ldrh	r1, [r3, #0]
 8001878:	b289      	uxth	r1, r1
 800187a:	4401      	add	r1, r0
 800187c:	6011      	str	r1, [r2, #0]
    thisBlockLen = 0;
 800187e:	2200      	movs	r2, #0
 8001880:	801a      	strh	r2, [r3, #0]
 8001882:	bd38      	pop	{r3, r4, r5, pc}
 8001884:	20000dc4 	andcs	r0, r0, r4, asr #27
 8001888:	20000dc0 	andcs	r0, r0, r0, asr #27
 800188c:	20000dbe 			; <UNDEFINED> instruction: 0x20000dbe
 8001890:	200005bc 			; <UNDEFINED> instruction: 0x200005bc

08001894 <dfuUpdateByRequest>:
    memset(input, 0xFF, sizeof(input));

    sha256_starts(&ctx);
}

bool dfuUpdateByRequest(void) {
 8001894:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 8001898:	4987      	ldr	r1, [pc, #540]	; (8001ab8 <dfuUpdateByRequest+0x224>)

    u8 startState = dfuAppStatus.bState;
 800189a:	4c88      	ldr	r4, [pc, #544]	; (8001abc <dfuUpdateByRequest+0x228>)
}

bool dfuUpdateByRequest(void) {
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 800189c:	2001      	movs	r0, #1
 800189e:	7008      	strb	r0, [r1, #0]

    u8 startState = dfuAppStatus.bState;
 80018a0:	7923      	ldrb	r3, [r4, #4]
    dfuAppStatus.bStatus = OK;
 80018a2:	2200      	movs	r2, #0
bool dfuUpdateByRequest(void) {
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;

    u8 startState = dfuAppStatus.bState;
 80018a4:	b2db      	uxtb	r3, r3
    dfuAppStatus.bStatus = OK;
    
    /* often leaner to nest if's then embed a switch/case */
    /* but who the fuck cares? use a better compiler. we have space */
    if (startState == dfuIDLE)  {
 80018a6:	2b02      	cmp	r3, #2
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;

    u8 startState = dfuAppStatus.bState;
    dfuAppStatus.bStatus = OK;
 80018a8:	7022      	strb	r2, [r4, #0]
    
    /* often leaner to nest if's then embed a switch/case */
    /* but who the fuck cares? use a better compiler. we have space */
    if (startState == dfuIDLE)  {
 80018aa:	d151      	bne.n	8001950 <dfuUpdateByRequest+0xbc>
        /*  device running inside DFU mode */
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop
 80018ac:	7008      	strb	r0, [r1, #0]

        if (pInformation->USBbRequest == DFU_DNLOAD) {
 80018ae:	4984      	ldr	r1, [pc, #528]	; (8001ac0 <dfuUpdateByRequest+0x22c>)
 80018b0:	6809      	ldr	r1, [r1, #0]
 80018b2:	7848      	ldrb	r0, [r1, #1]
 80018b4:	2801      	cmp	r0, #1
 80018b6:	d121      	bne.n	80018fc <dfuUpdateByRequest+0x68>
            if (pInformation->USBwLengths.w > 0) {
 80018b8:	88cb      	ldrh	r3, [r1, #6]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 80d1 	beq.w	8001a62 <dfuUpdateByRequest+0x1ce>
                userFirmwareLen = 0;
 80018c0:	4b80      	ldr	r3, [pc, #512]	; (8001ac4 <dfuUpdateByRequest+0x230>)
 80018c2:	601a      	str	r2, [r3, #0]
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
				switch(pInformation->Current_AlternateSetting) {
 80018c4:	7b0a      	ldrb	r2, [r1, #12]
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop

        if (pInformation->USBbRequest == DFU_DNLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                userFirmwareLen = 0;
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 80018c6:	2303      	movs	r3, #3
				switch(pInformation->Current_AlternateSetting) {
 80018c8:	2a01      	cmp	r2, #1
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop

        if (pInformation->USBbRequest == DFU_DNLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                userFirmwareLen = 0;
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 80018ca:	7123      	strb	r3, [r4, #4]
				switch(pInformation->Current_AlternateSetting) {
 80018cc:	d008      	beq.n	80018e0 <dfuUpdateByRequest+0x4c>
 80018ce:	2a02      	cmp	r2, #2
 80018d0:	d111      	bne.n	80018f6 <dfuUpdateByRequest+0x62>
						//flashErasePage((u32)USER_CODE_FLASH0X8002000);

						break;

					case 2:
						userUploadType = DFU_UPLOAD_FLASH_0X8002000;
 80018d2:	4b7d      	ldr	r3, [pc, #500]	; (8001ac8 <dfuUpdateByRequest+0x234>)
 80018d4:	2206      	movs	r2, #6
 80018d6:	701a      	strb	r2, [r3, #0]
						userAppAddr = USER_CODE_FLASH0X8002000;
 80018d8:	4a7c      	ldr	r2, [pc, #496]	; (8001acc <dfuUpdateByRequest+0x238>)
 80018da:	4b7d      	ldr	r3, [pc, #500]	; (8001ad0 <dfuUpdateByRequest+0x23c>)
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	e005      	b.n	80018ec <dfuUpdateByRequest+0x58>
						userUploadType = DFU_UPLOAD_RAM;
						break;
						*/

					case 1:
					    userAppAddr = USER_CODE_FLASH0X8008000;
 80018e0:	4a7c      	ldr	r2, [pc, #496]	; (8001ad4 <dfuUpdateByRequest+0x240>)
 80018e2:	4b7b      	ldr	r3, [pc, #492]	; (8001ad0 <dfuUpdateByRequest+0x23c>)
 80018e4:	601a      	str	r2, [r3, #0]
						userUploadType = DFU_UPLOAD_FLASH_0X8008000;
 80018e6:	4b78      	ldr	r3, [pc, #480]	; (8001ac8 <dfuUpdateByRequest+0x234>)
 80018e8:	2204      	movs	r2, #4
 80018ea:	701a      	strb	r2, [r3, #0]
					case 2:
						userUploadType = DFU_UPLOAD_FLASH_0X8002000;
						userAppAddr = USER_CODE_FLASH0X8002000;
						
                        /* make sure the flash is setup properly, unlock it */
                        setupFLASH();
 80018ec:	f7ff fdf8 	bl	80014e0 <setupFLASH>
						flashUnlock();
 80018f0:	f7ff fece 	bl	8001690 <flashUnlock>

						break;
 80018f4:	e0d8      	b.n	8001aa8 <dfuUpdateByRequest+0x214>

					default:
					    // Roger Clark. Report error 
						dfuAppStatus.bState  = dfuERROR;
 80018f6:	220a      	movs	r2, #10
 80018f8:	7122      	strb	r2, [r4, #4]
 80018fa:	e0d4      	b.n	8001aa6 <dfuUpdateByRequest+0x212>
				}
            } else {
                dfuAppStatus.bState  = dfuERROR;
                dfuAppStatus.bStatus = errNOTDONE;
            }
        } else if (pInformation->USBbRequest == DFU_UPLOAD) {
 80018fc:	2802      	cmp	r0, #2
 80018fe:	d121      	bne.n	8001944 <dfuUpdateByRequest+0xb0>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8001900:	2309      	movs	r3, #9
 8001902:	7123      	strb	r3, [r4, #4]
            
            /* record length of first block for calculating target
               address from wValue in consecutive blocks */
            uploadBlockLen = pInformation->USBwLengths.w;
 8001904:	88ca      	ldrh	r2, [r1, #6]
 8001906:	4b74      	ldr	r3, [pc, #464]	; (8001ad8 <dfuUpdateByRequest+0x244>)
 8001908:	801a      	strh	r2, [r3, #0]
            thisBlockLen = uploadBlockLen; /* for this first block as well */
 800190a:	8818      	ldrh	r0, [r3, #0]
 800190c:	4a73      	ldr	r2, [pc, #460]	; (8001adc <dfuUpdateByRequest+0x248>)
 800190e:	b280      	uxth	r0, r0
 8001910:	8010      	strh	r0, [r2, #0]
            
            /* calculate where the data should be copied from */
            userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8001912:	881a      	ldrh	r2, [r3, #0]
 8001914:	884b      	ldrh	r3, [r1, #2]
 8001916:	b292      	uxth	r2, r2
 8001918:	435a      	muls	r2, r3
 800191a:	4b6a      	ldr	r3, [pc, #424]	; (8001ac4 <dfuUpdateByRequest+0x230>)
 800191c:	601a      	str	r2, [r3, #0]
			
            switch(pInformation->Current_AlternateSetting) {
 800191e:	7b0b      	ldrb	r3, [r1, #12]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d003      	beq.n	800192c <dfuUpdateByRequest+0x98>
 8001924:	2b02      	cmp	r3, #2
 8001926:	d109      	bne.n	800193c <dfuUpdateByRequest+0xa8>
				    userAppAddr = USER_CODE_FLASH0X8008000;
					userAppEnd = getFlashEnd();
					break;

				case 2: 
				    userAppAddr = USER_CODE_FLASH0X8002000;
 8001928:	4a68      	ldr	r2, [pc, #416]	; (8001acc <dfuUpdateByRequest+0x238>)
 800192a:	e000      	b.n	800192e <dfuUpdateByRequest+0x9a>
					userAppAddr = USER_CODE_RAM;
					userAppEnd = RAM_END;
					*/

				case 1:
				    userAppAddr = USER_CODE_FLASH0X8008000;
 800192c:	4a69      	ldr	r2, [pc, #420]	; (8001ad4 <dfuUpdateByRequest+0x240>)
					userAppEnd = getFlashEnd();
					break;

				case 2: 
				    userAppAddr = USER_CODE_FLASH0X8002000;
 800192e:	4b68      	ldr	r3, [pc, #416]	; (8001ad0 <dfuUpdateByRequest+0x23c>)
 8001930:	601a      	str	r2, [r3, #0]
					userAppEnd = getFlashEnd();
 8001932:	f7ff fec3 	bl	80016bc <getFlashEnd>
 8001936:	4b6a      	ldr	r3, [pc, #424]	; (8001ae0 <dfuUpdateByRequest+0x24c>)
 8001938:	6018      	str	r0, [r3, #0]
					break;
 800193a:	e0b5      	b.n	8001aa8 <dfuUpdateByRequest+0x214>

				default:
				// Roger Clark. 
				// Changed this to report error that its unable to write to this memory
				// However the code should never get here as only AlternateSetting 1 and 2 are allowed (see above)
					dfuAppStatus.bState  = dfuERROR;
 800193c:	230a      	movs	r3, #10
 800193e:	7123      	strb	r3, [r4, #4]
					dfuAppStatus.bStatus = errWRITE;
 8001940:	2303      	movs	r3, #3
 8001942:	e0b0      	b.n	8001aa6 <dfuUpdateByRequest+0x212>
					break;					
			}
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8001944:	2806      	cmp	r0, #6
 8001946:	d051      	beq.n	80019ec <dfuUpdateByRequest+0x158>
            dfuAppStatus.bState  = dfuIDLE;
            dfuAppStatus.bStatus = OK;  /* are we really ok? we were just aborted */
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8001948:	2803      	cmp	r0, #3
 800194a:	d019      	beq.n	8001980 <dfuUpdateByRequest+0xec>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 800194c:	2805      	cmp	r0, #5
 800194e:	e051      	b.n	80019f4 <dfuUpdateByRequest+0x160>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNLOAD_SYNC)         {
 8001950:	2b03      	cmp	r3, #3
 8001952:	d10b      	bne.n	800196c <dfuUpdateByRequest+0xd8>
        /* device received block, waiting for DFU_GETSTATUS request */
        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8001954:	4a5a      	ldr	r2, [pc, #360]	; (8001ac0 <dfuUpdateByRequest+0x22c>)
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	7852      	ldrb	r2, [r2, #1]
 800195a:	2a03      	cmp	r2, #3
 800195c:	d104      	bne.n	8001968 <dfuUpdateByRequest+0xd4>

            } 
			else 
			*/
			{
                dfuAppStatus.bState = dfuDNLOAD_IDLE;
 800195e:	2305      	movs	r3, #5
 8001960:	7123      	strb	r3, [r4, #4]
                dfuCopyBufferToExec();
 8001962:	f7ff ff6b 	bl	800183c <dfuCopyBufferToExec>
 8001966:	e09f      	b.n	8001aa8 <dfuUpdateByRequest+0x214>
            }

        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8001968:	2a05      	cmp	r2, #5
 800196a:	e043      	b.n	80019f4 <dfuUpdateByRequest+0x160>
            dfuAppStatus.bState  = dfuDNLOAD_SYNC;
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else if (startState == dfuDNBUSY)              {
 800196c:	2b04      	cmp	r3, #4
 800196e:	d109      	bne.n	8001984 <dfuUpdateByRequest+0xf0>
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {
 8001970:	495c      	ldr	r1, [pc, #368]	; (8001ae4 <dfuUpdateByRequest+0x250>)
 8001972:	7808      	ldrb	r0, [r1, #0]
 8001974:	2802      	cmp	r0, #2
 8001976:	d103      	bne.n	8001980 <dfuUpdateByRequest+0xec>

            dfuAppStatus.bwPollTimeout0 = 0x00;
            code_copy_lock = WAIT;
 8001978:	2303      	movs	r3, #3
        }
    } else if (startState == dfuDNBUSY)              {
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {

            dfuAppStatus.bwPollTimeout0 = 0x00;
 800197a:	7062      	strb	r2, [r4, #1]
            code_copy_lock = WAIT;
 800197c:	700b      	strb	r3, [r1, #0]
            dfuAppStatus.bState = dfuDNLOAD_IDLE;
 800197e:	2305      	movs	r3, #5
 8001980:	7123      	strb	r3, [r4, #4]
 8001982:	e091      	b.n	8001aa8 <dfuUpdateByRequest+0x214>
        } else {
            dfuAppStatus.bState = dfuDNBUSY;
        }
    } else if (startState == dfuDNLOAD_IDLE)         {
 8001984:	2b05      	cmp	r3, #5
 8001986:	d129      	bne.n	80019dc <dfuUpdateByRequest+0x148>
        /* device is expecting dfu_dnload requests */
        if (pInformation->USBbRequest == DFU_DNLOAD) {
 8001988:	4b4d      	ldr	r3, [pc, #308]	; (8001ac0 <dfuUpdateByRequest+0x22c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	7853      	ldrb	r3, [r2, #1]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d11d      	bne.n	80019ce <dfuUpdateByRequest+0x13a>
            if (pInformation->USBwLengths.w > 0) {
 8001992:	88d2      	ldrh	r2, [r2, #6]
 8001994:	b10a      	cbz	r2, 800199a <dfuUpdateByRequest+0x106>
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 8001996:	2303      	movs	r3, #3
 8001998:	e7f2      	b.n	8001980 <dfuUpdateByRequest+0xec>
            } else {
                /* todo, support "disagreement" if device expects more data than this */
                dfuAppStatus.bState  = dfuMANIFEST_SYNC;
 800199a:	2306      	movs	r3, #6
                ImageObjectHandle imageHandle;
                int ret = imageCheckFromAddress(&imageHandle, USER_CODE_FLASH0X8008000, 0);
 800199c:	494d      	ldr	r1, [pc, #308]	; (8001ad4 <dfuUpdateByRequest+0x240>)
 800199e:	a801      	add	r0, sp, #4
        if (pInformation->USBbRequest == DFU_DNLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
            } else {
                /* todo, support "disagreement" if device expects more data than this */
                dfuAppStatus.bState  = dfuMANIFEST_SYNC;
 80019a0:	7123      	strb	r3, [r4, #4]
                ImageObjectHandle imageHandle;
                int ret = imageCheckFromAddress(&imageHandle, USER_CODE_FLASH0X8008000, 0);
 80019a2:	f004 fb1d 	bl	8005fe0 <imageCheckFromAddress>
 80019a6:	4605      	mov	r5, r0
                debug_print("image check ret: %X\n", ret);
 80019a8:	4629      	mov	r1, r5
 80019aa:	484f      	ldr	r0, [pc, #316]	; (8001ae8 <dfuUpdateByRequest+0x254>)
                switch (ret)
 80019ac:	3d02      	subs	r5, #2
            } else {
                /* todo, support "disagreement" if device expects more data than this */
                dfuAppStatus.bState  = dfuMANIFEST_SYNC;
                ImageObjectHandle imageHandle;
                int ret = imageCheckFromAddress(&imageHandle, USER_CODE_FLASH0X8008000, 0);
                debug_print("image check ret: %X\n", ret);
 80019ae:	f7ff fc85 	bl	80012bc <uart_printf>
                switch (ret)
 80019b2:	2d03      	cmp	r5, #3
 80019b4:	d808      	bhi.n	80019c8 <dfuUpdateByRequest+0x134>
 80019b6:	e8df f005 	tbb	[pc, r5]
 80019ba:	04040204 	streq	r0, [r4], #-516	; 0x204
                {
                    case kImageImageIsTrusted:
                        uart_printf("Uploaded signature verified!\n");
 80019be:	484b      	ldr	r0, [pc, #300]	; (8001aec <dfuUpdateByRequest+0x258>)
 80019c0:	e000      	b.n	80019c4 <dfuUpdateByRequest+0x130>
                        break;

                    case kImageImageMissingMagic:
                    case kImageImageRejectSignature:
                    case kImageImageHashCalcFailed:
                        uart_printf("Image unverified...\n");
 80019c2:	484b      	ldr	r0, [pc, #300]	; (8001af0 <dfuUpdateByRequest+0x25c>)
 80019c4:	f7ff fc7a 	bl	80012bc <uart_printf>
                        break;

                    default:
                        break;
                }
                flashLock();
 80019c8:	f7ff fe5c 	bl	8001684 <flashLock>
 80019cc:	e06c      	b.n	8001aa8 <dfuUpdateByRequest+0x214>
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d04d      	beq.n	8001a6e <dfuUpdateByRequest+0x1da>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d04b      	beq.n	8001a6e <dfuUpdateByRequest+0x1da>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 80019d6:	2b05      	cmp	r3, #5
 80019d8:	d162      	bne.n	8001aa0 <dfuUpdateByRequest+0x20c>
 80019da:	e048      	b.n	8001a6e <dfuUpdateByRequest+0x1da>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST_SYNC) {
 80019dc:	2b06      	cmp	r3, #6
 80019de:	d10b      	bne.n	80019f8 <dfuUpdateByRequest+0x164>
        /* device has received last block, waiting DFU_GETSTATUS request */
        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 80019e0:	4937      	ldr	r1, [pc, #220]	; (8001ac0 <dfuUpdateByRequest+0x22c>)
 80019e2:	6809      	ldr	r1, [r1, #0]
 80019e4:	7849      	ldrb	r1, [r1, #1]
 80019e6:	2903      	cmp	r1, #3
 80019e8:	d103      	bne.n	80019f2 <dfuUpdateByRequest+0x15e>
            dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
 80019ea:	2308      	movs	r3, #8
 80019ec:	7123      	strb	r3, [r4, #4]
            dfuAppStatus.bStatus = OK;
 80019ee:	7022      	strb	r2, [r4, #0]
 80019f0:	e05a      	b.n	8001aa8 <dfuUpdateByRequest+0x214>
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 80019f2:	2905      	cmp	r1, #5
 80019f4:	d154      	bne.n	8001aa0 <dfuUpdateByRequest+0x20c>
 80019f6:	e7c3      	b.n	8001980 <dfuUpdateByRequest+0xec>
            dfuAppStatus.bState  = dfuMANIFEST_SYNC;
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else if (startState == dfuMANIFEST) {
 80019f8:	2b07      	cmp	r3, #7
 80019fa:	d0f6      	beq.n	80019ea <dfuUpdateByRequest+0x156>
        /* device is in manifestation phase */

        /* should never receive request while in manifest! */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
        dfuAppStatus.bStatus = OK;
    } else if (startState == dfuMANIFEST_WAIT_RESET) {
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d0bf      	beq.n	8001980 <dfuUpdateByRequest+0xec>
        /* device has programmed new firmware but needs external
           usb reset or power on reset to run the new code */

        /* consider timing out and self-resetting */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
    } else if (startState == dfuUPLOAD_IDLE) {
 8001a00:	2b09      	cmp	r3, #9
 8001a02:	d13c      	bne.n	8001a7e <dfuUpdateByRequest+0x1ea>
        /* device expecting further dfu_upload requests */
        if (pInformation->USBbRequest == DFU_UPLOAD) {
 8001a04:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <dfuUpdateByRequest+0x22c>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	7853      	ldrb	r3, [r2, #1]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d12d      	bne.n	8001a6a <dfuUpdateByRequest+0x1d6>
            if (pInformation->USBwLengths.w > 0) {
 8001a0e:	88d0      	ldrh	r0, [r2, #6]
 8001a10:	b338      	cbz	r0, 8001a62 <dfuUpdateByRequest+0x1ce>
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8001a12:	4931      	ldr	r1, [pc, #196]	; (8001ad8 <dfuUpdateByRequest+0x244>)
 8001a14:	8852      	ldrh	r2, [r2, #2]
 8001a16:	880b      	ldrh	r3, [r1, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8001a18:	4d2d      	ldr	r5, [pc, #180]	; (8001ad0 <dfuUpdateByRequest+0x23c>)
    } else if (startState == dfuUPLOAD_IDLE) {
        /* device expecting further dfu_upload requests */
        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4353      	muls	r3, r2
 8001a1e:	4a29      	ldr	r2, [pc, #164]	; (8001ac4 <dfuUpdateByRequest+0x230>)
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8001a20:	4e2f      	ldr	r6, [pc, #188]	; (8001ae0 <dfuUpdateByRequest+0x24c>)
    } else if (startState == dfuUPLOAD_IDLE) {
        /* device expecting further dfu_upload requests */
        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8001a22:	6013      	str	r3, [r2, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8001a24:	682f      	ldr	r7, [r5, #0]
 8001a26:	f8d2 8000 	ldr.w	r8, [r2]
 8001a2a:	f8b1 c000 	ldrh.w	ip, [r1]
 8001a2e:	4447      	add	r7, r8
 8001a30:	6833      	ldr	r3, [r6, #0]
 8001a32:	fa1f fc8c 	uxth.w	ip, ip
 8001a36:	4467      	add	r7, ip
 8001a38:	429f      	cmp	r7, r3
 8001a3a:	4b28      	ldr	r3, [pc, #160]	; (8001adc <dfuUpdateByRequest+0x248>)
 8001a3c:	d803      	bhi.n	8001a46 <dfuUpdateByRequest+0x1b2>
                    thisBlockLen = uploadBlockLen;
 8001a3e:	880a      	ldrh	r2, [r1, #0]
 8001a40:	b292      	uxth	r2, r2
 8001a42:	801a      	strh	r2, [r3, #0]
 8001a44:	e019      	b.n	8001a7a <dfuUpdateByRequest+0x1e6>
                    dfuAppStatus.bState  = dfuUPLOAD_IDLE;
                } else {
                    /* if above comparison was just equal, thisBlockLen becomes zero
                    next time when USBWValue has been increased by one */
                    thisBlockLen = userAppEnd - userAppAddr - userFirmwareLen;
 8001a46:	6836      	ldr	r6, [r6, #0]
 8001a48:	682d      	ldr	r5, [r5, #0]
 8001a4a:	6811      	ldr	r1, [r2, #0]
 8001a4c:	1b72      	subs	r2, r6, r5
 8001a4e:	1a52      	subs	r2, r2, r1
 8001a50:	b292      	uxth	r2, r2
 8001a52:	801a      	strh	r2, [r3, #0]
                    
                    /* check for overflow due to USBwValue out of range */
                    if (thisBlockLen >= pInformation->USBwLengths.w) {
 8001a54:	881a      	ldrh	r2, [r3, #0]
 8001a56:	b292      	uxth	r2, r2
 8001a58:	4282      	cmp	r2, r0
 8001a5a:	d308      	bcc.n	8001a6e <dfuUpdateByRequest+0x1da>
                        thisBlockLen = 0;
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	801a      	strh	r2, [r3, #0]
 8001a60:	e005      	b.n	8001a6e <dfuUpdateByRequest+0x1da>
                    }
                    
                    dfuAppStatus.bState  = dfuIDLE;
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
 8001a62:	230a      	movs	r3, #10
 8001a64:	7123      	strb	r3, [r4, #4]
                dfuAppStatus.bStatus = errNOTDONE;
 8001a66:	2309      	movs	r3, #9
 8001a68:	e01d      	b.n	8001aa6 <dfuUpdateByRequest+0x212>
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d101      	bne.n	8001a72 <dfuUpdateByRequest+0x1de>
            dfuAppStatus.bState  = dfuIDLE;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e786      	b.n	8001980 <dfuUpdateByRequest+0xec>
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d001      	beq.n	8001a7a <dfuUpdateByRequest+0x1e6>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8001a76:	2b05      	cmp	r3, #5
 8001a78:	d112      	bne.n	8001aa0 <dfuUpdateByRequest+0x20c>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8001a7a:	2309      	movs	r3, #9
 8001a7c:	e780      	b.n	8001980 <dfuUpdateByRequest+0xec>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else if (startState == dfuERROR)               {
 8001a7e:	2b0a      	cmp	r3, #10
 8001a80:	d10e      	bne.n	8001aa0 <dfuUpdateByRequest+0x20c>
        /* status is in error, awaiting DFU_CLRSTATUS request */
        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <dfuUpdateByRequest+0x22c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	785b      	ldrb	r3, [r3, #1]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d101      	bne.n	8001a90 <dfuUpdateByRequest+0x1fc>
            /* todo, add routine to wait for last block write to finish */
            dfuAppStatus.bState  = dfuERROR;
 8001a8c:	230a      	movs	r3, #10
 8001a8e:	e777      	b.n	8001980 <dfuUpdateByRequest+0xec>
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8001a90:	2b05      	cmp	r3, #5
 8001a92:	d0fb      	beq.n	8001a8c <dfuUpdateByRequest+0x1f8>
            dfuAppStatus.bState  = dfuERROR;
        } else if (pInformation->USBbRequest == DFU_CLRSTATUS) {
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d103      	bne.n	8001aa0 <dfuUpdateByRequest+0x20c>
            /* todo handle any cleanup we need here */
            dfuAppStatus.bState  = dfuIDLE;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	7123      	strb	r3, [r4, #4]
            dfuAppStatus.bStatus = OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e002      	b.n	8001aa6 <dfuUpdateByRequest+0x212>
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else {
        /* some kind of error... */
        dfuAppStatus.bState  = dfuERROR;
 8001aa0:	230a      	movs	r3, #10
 8001aa2:	7123      	strb	r3, [r4, #4]
        dfuAppStatus.bStatus = errSTALLEDPKT;
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	7023      	strb	r3, [r4, #0]
    }

    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
 8001aa8:	7820      	ldrb	r0, [r4, #0]
}
 8001aaa:	f1d0 0001 	rsbs	r0, r0, #1
 8001aae:	bf38      	it	cc
 8001ab0:	2000      	movcc	r0, #0
 8001ab2:	b002      	add	sp, #8
 8001ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ab8:	20000dcb 	andcs	r0, r0, fp, asr #27
 8001abc:	20000dc5 	andcs	r0, r0, r5, asr #27
 8001ac0:	200005a8 	andcs	r0, r0, r8, lsr #11
 8001ac4:	20000dc0 	andcs	r0, r0, r0, asr #27
 8001ac8:	20000dc4 	andcs	r0, r0, r4, asr #27
 8001acc:	08002000 	stmdaeq	r0, {sp}
 8001ad0:	200002c0 	andcs	r0, r0, r0, asr #5
 8001ad4:	08009000 	stmdaeq	r0, {ip, pc}
 8001ad8:	20000dbc 			; <UNDEFINED> instruction: 0x20000dbc
 8001adc:	20000dbe 			; <UNDEFINED> instruction: 0x20000dbe
 8001ae0:	200002bc 			; <UNDEFINED> instruction: 0x200002bc
 8001ae4:	20000574 	andcs	r0, r0, r4, ror r5
 8001ae8:	080075ff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, sl, ip, sp, lr}
 8001aec:	080076d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, ip, sp, lr}
 8001af0:	080076f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, ip, sp, lr}

08001af4 <dfuUploadStarted>:
    dfuAppStatus.bState = newState;
}

bool dfuUploadStarted()
{
    return dfuBusy;
 8001af4:	4b01      	ldr	r3, [pc, #4]	; (8001afc <dfuUploadStarted+0x8>)
 8001af6:	7818      	ldrb	r0, [r3, #0]
}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000dcb 	andcs	r0, r0, fp, asr #27

08001b00 <dfuFinishUpload>:

void dfuFinishUpload() {

    while (1)
	{
		__asm__ __volatile__ ("");
 8001b00:	e7fe      	b.n	8001b00 <dfuFinishUpload>
	...

08001b04 <ed25519_project>:
};

/* Conversion to and from projective coordinates */
void ed25519_project(struct ed25519_pt *p,
		     const uint8_t *x, const uint8_t *y)
{
 8001b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b06:	460d      	mov	r5, r1
void f25519_load(uint8_t *x, uint32_t c);

/* Copy two points */
static inline void f25519_copy(uint8_t *x, const uint8_t *a)
{
	memcpy(x, a, F25519_SIZE);
 8001b08:	f8d1 e000 	ldr.w	lr, [r1]
 8001b0c:	684f      	ldr	r7, [r1, #4]
 8001b0e:	68eb      	ldr	r3, [r5, #12]
 8001b10:	6889      	ldr	r1, [r1, #8]
 8001b12:	f8c0 e000 	str.w	lr, [r0]
 8001b16:	6047      	str	r7, [r0, #4]
 8001b18:	6081      	str	r1, [r0, #8]
 8001b1a:	60c3      	str	r3, [r0, #12]
 8001b1c:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8001b20:	696f      	ldr	r7, [r5, #20]
 8001b22:	69a9      	ldr	r1, [r5, #24]
 8001b24:	69eb      	ldr	r3, [r5, #28]
 8001b26:	f8c0 e010 	str.w	lr, [r0, #16]
 8001b2a:	61c3      	str	r3, [r0, #28]
 8001b2c:	6147      	str	r7, [r0, #20]
 8001b2e:	6181      	str	r1, [r0, #24]
 8001b30:	f8d2 e000 	ldr.w	lr, [r2]
 8001b34:	6857      	ldr	r7, [r2, #4]
 8001b36:	6891      	ldr	r1, [r2, #8]
 8001b38:	4616      	mov	r6, r2
 8001b3a:	68d2      	ldr	r2, [r2, #12]
 8001b3c:	f8c0 e020 	str.w	lr, [r0, #32]
 8001b40:	6247      	str	r7, [r0, #36]	; 0x24
 8001b42:	6281      	str	r1, [r0, #40]	; 0x28
 8001b44:	62c2      	str	r2, [r0, #44]	; 0x2c
 8001b46:	69b1      	ldr	r1, [r6, #24]
 8001b48:	69f2      	ldr	r2, [r6, #28]
 8001b4a:	f8d6 e010 	ldr.w	lr, [r6, #16]
 8001b4e:	6977      	ldr	r7, [r6, #20]
 8001b50:	4604      	mov	r4, r0
 8001b52:	63a1      	str	r1, [r4, #56]	; 0x38
 8001b54:	63e2      	str	r2, [r4, #60]	; 0x3c
	f25519_copy(p->x, x);
	f25519_copy(p->y, y);
	f25519_load(p->z, 1);
 8001b56:	3060      	adds	r0, #96	; 0x60
 8001b58:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
 8001b5c:	6367      	str	r7, [r4, #52]	; 0x34
 8001b5e:	2101      	movs	r1, #1
 8001b60:	f000 fb20 	bl	80021a4 <f25519_load>
	f25519_mul__distinct(p->t, x, y);
 8001b64:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001b68:	4629      	mov	r1, r5
 8001b6a:	4632      	mov	r2, r6
}
 8001b6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		     const uint8_t *x, const uint8_t *y)
{
	f25519_copy(p->x, x);
	f25519_copy(p->y, y);
	f25519_load(p->z, 1);
	f25519_mul__distinct(p->t, x, y);
 8001b70:	f000 bc7e 	b.w	8002470 <f25519_mul__distinct>

08001b74 <ed25519_unproject>:
}

void ed25519_unproject(uint8_t *x, uint8_t *y,
		       const struct ed25519_pt *p)
{
 8001b74:	b570      	push	{r4, r5, r6, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	4614      	mov	r4, r2
 8001b7a:	4606      	mov	r6, r0
 8001b7c:	460d      	mov	r5, r1
	uint8_t z1[F25519_SIZE];

	f25519_inv__distinct(z1, p->z);
 8001b7e:	4668      	mov	r0, sp
 8001b80:	f102 0160 	add.w	r1, r2, #96	; 0x60
 8001b84:	f000 fcb8 	bl	80024f8 <f25519_inv__distinct>
	f25519_mul__distinct(x, p->x, z1);
 8001b88:	4630      	mov	r0, r6
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	466a      	mov	r2, sp
 8001b8e:	f000 fc6f 	bl	8002470 <f25519_mul__distinct>
	f25519_mul__distinct(y, p->y, z1);
 8001b92:	f104 0120 	add.w	r1, r4, #32
 8001b96:	466a      	mov	r2, sp
 8001b98:	4628      	mov	r0, r5
 8001b9a:	f000 fc69 	bl	8002470 <f25519_mul__distinct>

	f25519_normalize(x);
 8001b9e:	4630      	mov	r0, r6
 8001ba0:	f000 fb10 	bl	80021c4 <f25519_normalize>
	f25519_normalize(y);
 8001ba4:	4628      	mov	r0, r5
 8001ba6:	f000 fb0d 	bl	80021c4 <f25519_normalize>
}
 8001baa:	b008      	add	sp, #32
 8001bac:	bd70      	pop	{r4, r5, r6, pc}
 8001bae:	bf00      	nop

08001bb0 <ed25519_pack>:
	0x98, 0xe8, 0x79, 0x77, 0x79, 0x40, 0xc7, 0x8c,
	0x73, 0xfe, 0x6f, 0x2b, 0xee, 0x6c, 0x03, 0x52
};

void ed25519_pack(uint8_t *c, const uint8_t *x, const uint8_t *y)
{
 8001bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb2:	460f      	mov	r7, r1
 8001bb4:	4605      	mov	r5, r0
 8001bb6:	4616      	mov	r6, r2
 8001bb8:	b089      	sub	sp, #36	; 0x24
 8001bba:	6808      	ldr	r0, [r1, #0]
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6849      	ldr	r1, [r1, #4]
 8001bc2:	466c      	mov	r4, sp
 8001bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bc6:	6938      	ldr	r0, [r7, #16]
 8001bc8:	6979      	ldr	r1, [r7, #20]
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	uint8_t tmp[F25519_SIZE];
	uint8_t parity;

	f25519_copy(tmp, x);
	f25519_normalize(tmp);
 8001bd0:	4668      	mov	r0, sp
 8001bd2:	f000 faf7 	bl	80021c4 <f25519_normalize>
 8001bd6:	6830      	ldr	r0, [r6, #0]
 8001bd8:	6871      	ldr	r1, [r6, #4]
 8001bda:	68b2      	ldr	r2, [r6, #8]
 8001bdc:	68f3      	ldr	r3, [r6, #12]
 8001bde:	6028      	str	r0, [r5, #0]
 8001be0:	6069      	str	r1, [r5, #4]
 8001be2:	60aa      	str	r2, [r5, #8]
 8001be4:	60eb      	str	r3, [r5, #12]
 8001be6:	6930      	ldr	r0, [r6, #16]
 8001be8:	69f3      	ldr	r3, [r6, #28]
 8001bea:	6971      	ldr	r1, [r6, #20]
 8001bec:	69b2      	ldr	r2, [r6, #24]
 8001bee:	6128      	str	r0, [r5, #16]
 8001bf0:	61eb      	str	r3, [r5, #28]
 8001bf2:	6169      	str	r1, [r5, #20]
 8001bf4:	61aa      	str	r2, [r5, #24]
	parity = (tmp[0] & 1) << 7;

	f25519_copy(c, y);
	f25519_normalize(c);
 8001bf6:	4628      	mov	r0, r5
	uint8_t tmp[F25519_SIZE];
	uint8_t parity;

	f25519_copy(tmp, x);
	f25519_normalize(tmp);
	parity = (tmp[0] & 1) << 7;
 8001bf8:	f89d 4000 	ldrb.w	r4, [sp]

	f25519_copy(c, y);
	f25519_normalize(c);
 8001bfc:	f000 fae2 	bl	80021c4 <f25519_normalize>
	uint8_t tmp[F25519_SIZE];
	uint8_t parity;

	f25519_copy(tmp, x);
	f25519_normalize(tmp);
	parity = (tmp[0] & 1) << 7;
 8001c00:	01e4      	lsls	r4, r4, #7

	f25519_copy(c, y);
	f25519_normalize(c);
	c[31] |= parity;
 8001c02:	7feb      	ldrb	r3, [r5, #31]
	uint8_t tmp[F25519_SIZE];
	uint8_t parity;

	f25519_copy(tmp, x);
	f25519_normalize(tmp);
	parity = (tmp[0] & 1) << 7;
 8001c04:	b2e4      	uxtb	r4, r4

	f25519_copy(c, y);
	f25519_normalize(c);
	c[31] |= parity;
 8001c06:	431c      	orrs	r4, r3
 8001c08:	77ec      	strb	r4, [r5, #31]
}
 8001c0a:	b009      	add	sp, #36	; 0x24
 8001c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c0e:	bf00      	nop

08001c10 <ed25519_try_unpack>:

uint8_t ed25519_try_unpack(uint8_t *x, uint8_t *y, const uint8_t *comp)
{
 8001c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c14:	6817      	ldr	r7, [r2, #0]
 8001c16:	6856      	ldr	r6, [r2, #4]
 8001c18:	6895      	ldr	r5, [r2, #8]
 8001c1a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8001c1e:	4614      	mov	r4, r2
	const int parity = comp[31] >> 7;
 8001c20:	f894 801f 	ldrb.w	r8, [r4, #31]
 8001c24:	600f      	str	r7, [r1, #0]
 8001c26:	604e      	str	r6, [r1, #4]
 8001c28:	608d      	str	r5, [r1, #8]
 8001c2a:	f8c1 e00c 	str.w	lr, [r1, #12]
 8001c2e:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8001c32:	6927      	ldr	r7, [r4, #16]
 8001c34:	6966      	ldr	r6, [r4, #20]
 8001c36:	69a5      	ldr	r5, [r4, #24]
	f25519_normalize(c);
	c[31] |= parity;
}

uint8_t ed25519_try_unpack(uint8_t *x, uint8_t *y, const uint8_t *comp)
{
 8001c38:	b098      	sub	sp, #96	; 0x60
	uint8_t b[F25519_SIZE];
	uint8_t c[F25519_SIZE];

	/* Unpack y */
	f25519_copy(y, comp);
	y[31] &= 127;
 8001c3a:	f008 037f 	and.w	r3, r8, #127	; 0x7f
 8001c3e:	f8c1 e01c 	str.w	lr, [r1, #28]
	f25519_normalize(c);
	c[31] |= parity;
}

uint8_t ed25519_try_unpack(uint8_t *x, uint8_t *y, const uint8_t *comp)
{
 8001c42:	4604      	mov	r4, r0
	uint8_t b[F25519_SIZE];
	uint8_t c[F25519_SIZE];

	/* Unpack y */
	f25519_copy(y, comp);
	y[31] &= 127;
 8001c44:	77cb      	strb	r3, [r1, #31]
	f25519_normalize(c);
	c[31] |= parity;
}

uint8_t ed25519_try_unpack(uint8_t *x, uint8_t *y, const uint8_t *comp)
{
 8001c46:	460a      	mov	r2, r1
 8001c48:	610f      	str	r7, [r1, #16]
 8001c4a:	614e      	str	r6, [r1, #20]
 8001c4c:	618d      	str	r5, [r1, #24]
	/* Unpack y */
	f25519_copy(y, comp);
	y[31] &= 127;

	/* Compute c = y^2 */
	f25519_mul__distinct(c, y, y);
 8001c4e:	a810      	add	r0, sp, #64	; 0x40

	/* Compute b = (1+dy^2)^-1 */
	f25519_mul__distinct(b, c, ed25519_d);
	f25519_add(a, b, f25519_one);
 8001c50:	4d1f      	ldr	r5, [pc, #124]	; (8001cd0 <ed25519_try_unpack+0xc0>)
	/* Unpack y */
	f25519_copy(y, comp);
	y[31] &= 127;

	/* Compute c = y^2 */
	f25519_mul__distinct(c, y, y);
 8001c52:	f000 fc0d 	bl	8002470 <f25519_mul__distinct>

	/* Compute b = (1+dy^2)^-1 */
	f25519_mul__distinct(b, c, ed25519_d);
 8001c56:	a910      	add	r1, sp, #64	; 0x40
 8001c58:	a808      	add	r0, sp, #32
 8001c5a:	4a1e      	ldr	r2, [pc, #120]	; (8001cd4 <ed25519_try_unpack+0xc4>)
 8001c5c:	f000 fc08 	bl	8002470 <f25519_mul__distinct>
	f25519_add(a, b, f25519_one);
 8001c60:	462a      	mov	r2, r5
 8001c62:	a908      	add	r1, sp, #32
 8001c64:	4668      	mov	r0, sp
 8001c66:	f000 fb95 	bl	8002394 <f25519_add>
	f25519_inv__distinct(b, a);
 8001c6a:	a808      	add	r0, sp, #32
 8001c6c:	4669      	mov	r1, sp
 8001c6e:	f000 fc43 	bl	80024f8 <f25519_inv__distinct>

	/* Compute a = y^2-1 */
	f25519_sub(a, c, f25519_one);
 8001c72:	4668      	mov	r0, sp
 8001c74:	a910      	add	r1, sp, #64	; 0x40
 8001c76:	462a      	mov	r2, r5
 8001c78:	f000 fbb0 	bl	80023dc <f25519_sub>

	/* Compute c = a*b = (y^2-1)/(1-dy^2) */
	f25519_mul__distinct(c, a, b);
 8001c7c:	aa08      	add	r2, sp, #32
 8001c7e:	a810      	add	r0, sp, #64	; 0x40
 8001c80:	4669      	mov	r1, sp
 8001c82:	f000 fbf5 	bl	8002470 <f25519_mul__distinct>

	/* Compute a, b = +/-sqrt(c), if c is square */
	f25519_sqrt(a, c);
 8001c86:	4668      	mov	r0, sp
 8001c88:	a910      	add	r1, sp, #64	; 0x40
 8001c8a:	f000 ff2b 	bl	8002ae4 <f25519_sqrt>
	f25519_neg(b, a);
 8001c8e:	a808      	add	r0, sp, #32
 8001c90:	4669      	mov	r1, sp
 8001c92:	f000 fbc9 	bl	8002428 <f25519_neg>

	/* Select one of them, based on the compressed parity bit */
	f25519_select(x, a, b, (a[0] ^ parity) & 1);
 8001c96:	f89d 3000 	ldrb.w	r3, [sp]
 8001c9a:	aa08      	add	r2, sp, #32
 8001c9c:	ea83 13d8 	eor.w	r3, r3, r8, lsr #7
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	4669      	mov	r1, sp
 8001ca8:	f000 fb12 	bl	80022d0 <f25519_select>

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
 8001cac:	4621      	mov	r1, r4
 8001cae:	4622      	mov	r2, r4
 8001cb0:	4668      	mov	r0, sp
 8001cb2:	f000 fbdd 	bl	8002470 <f25519_mul__distinct>
	f25519_normalize(a);
 8001cb6:	4668      	mov	r0, sp
 8001cb8:	f000 fa84 	bl	80021c4 <f25519_normalize>
	f25519_normalize(c);
 8001cbc:	a810      	add	r0, sp, #64	; 0x40
 8001cbe:	f000 fa81 	bl	80021c4 <f25519_normalize>

	return f25519_eq(a, c);
 8001cc2:	4668      	mov	r0, sp
 8001cc4:	a910      	add	r1, sp, #64	; 0x40
 8001cc6:	f000 fab5 	bl	8002234 <f25519_eq>
}
 8001cca:	b018      	add	sp, #96	; 0x60
 8001ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cd0:	08007868 	stmdaeq	r0, {r3, r5, r6, fp, ip, sp, lr}
 8001cd4:	08007828 	stmdaeq	r0, {r3, r5, fp, ip, sp, lr}

08001cd8 <ed25519_add>:
	0xe7, 0xfc, 0xdf, 0x56, 0xdc, 0xd9, 0x06, 0x24
};

void ed25519_add(struct ed25519_pt *r,
		 const struct ed25519_pt *p1, const struct ed25519_pt *p2)
{
 8001cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cdc:	4614      	mov	r4, r2
 8001cde:	b0c0      	sub	sp, #256	; 0x100
 8001ce0:	460d      	mov	r5, r1
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = (Y1-X1)(Y2-X2) */
	f25519_sub(c, p1->y, p1->x);
 8001ce2:	f101 0820 	add.w	r8, r1, #32
	0xe7, 0xfc, 0xdf, 0x56, 0xdc, 0xd9, 0x06, 0x24
};

void ed25519_add(struct ed25519_pt *r,
		 const struct ed25519_pt *p1, const struct ed25519_pt *p2)
{
 8001ce6:	4606      	mov	r6, r0
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = (Y1-X1)(Y2-X2) */
	f25519_sub(c, p1->y, p1->x);
 8001ce8:	4641      	mov	r1, r8
 8001cea:	462a      	mov	r2, r5
 8001cec:	a810      	add	r0, sp, #64	; 0x40
	f25519_sub(d, p2->y, p2->x);
 8001cee:	f104 0720 	add.w	r7, r4, #32
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = (Y1-X1)(Y2-X2) */
	f25519_sub(c, p1->y, p1->x);
 8001cf2:	f000 fb73 	bl	80023dc <f25519_sub>
	f25519_sub(d, p2->y, p2->x);
 8001cf6:	4639      	mov	r1, r7
 8001cf8:	4622      	mov	r2, r4
 8001cfa:	a818      	add	r0, sp, #96	; 0x60
 8001cfc:	f000 fb6e 	bl	80023dc <f25519_sub>
	f25519_mul__distinct(a, c, d);
 8001d00:	a910      	add	r1, sp, #64	; 0x40
 8001d02:	aa18      	add	r2, sp, #96	; 0x60
 8001d04:	4668      	mov	r0, sp
 8001d06:	f000 fbb3 	bl	8002470 <f25519_mul__distinct>

	/* B = (Y1+X1)(Y2+X2) */
	f25519_add(c, p1->y, p1->x);
 8001d0a:	a810      	add	r0, sp, #64	; 0x40
 8001d0c:	4641      	mov	r1, r8
 8001d0e:	462a      	mov	r2, r5
 8001d10:	f000 fb40 	bl	8002394 <f25519_add>
	f25519_add(d, p2->y, p2->x);
 8001d14:	a818      	add	r0, sp, #96	; 0x60
 8001d16:	4639      	mov	r1, r7
 8001d18:	4622      	mov	r2, r4
 8001d1a:	f000 fb3b 	bl	8002394 <f25519_add>
	f25519_mul__distinct(b, c, d);
 8001d1e:	a910      	add	r1, sp, #64	; 0x40
 8001d20:	aa18      	add	r2, sp, #96	; 0x60
 8001d22:	a808      	add	r0, sp, #32
 8001d24:	f000 fba4 	bl	8002470 <f25519_mul__distinct>

	/* C = T1 k T2 */
	f25519_mul__distinct(d, p1->t, p2->t);
 8001d28:	a818      	add	r0, sp, #96	; 0x60
 8001d2a:	f105 0140 	add.w	r1, r5, #64	; 0x40
 8001d2e:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8001d32:	f000 fb9d 	bl	8002470 <f25519_mul__distinct>
	f25519_mul__distinct(c, d, ed25519_k);
 8001d36:	a810      	add	r0, sp, #64	; 0x40
 8001d38:	a918      	add	r1, sp, #96	; 0x60
 8001d3a:	4a1e      	ldr	r2, [pc, #120]	; (8001db4 <ed25519_add+0xdc>)
 8001d3c:	f000 fb98 	bl	8002470 <f25519_mul__distinct>

	/* D = Z1 2 Z2 */
	f25519_mul__distinct(d, p1->z, p2->z);
 8001d40:	a818      	add	r0, sp, #96	; 0x60
 8001d42:	f105 0160 	add.w	r1, r5, #96	; 0x60
 8001d46:	f104 0260 	add.w	r2, r4, #96	; 0x60
 8001d4a:	f000 fb91 	bl	8002470 <f25519_mul__distinct>
	f25519_add(d, d, d);
 8001d4e:	a818      	add	r0, sp, #96	; 0x60
 8001d50:	4601      	mov	r1, r0
 8001d52:	4602      	mov	r2, r0
 8001d54:	f000 fb1e 	bl	8002394 <f25519_add>

	/* E = B - A */
	f25519_sub(e, b, a);
 8001d58:	a908      	add	r1, sp, #32
 8001d5a:	466a      	mov	r2, sp
 8001d5c:	a820      	add	r0, sp, #128	; 0x80
 8001d5e:	f000 fb3d 	bl	80023dc <f25519_sub>

	/* F = D - C */
	f25519_sub(f, d, c);
 8001d62:	a918      	add	r1, sp, #96	; 0x60
 8001d64:	aa10      	add	r2, sp, #64	; 0x40
 8001d66:	a828      	add	r0, sp, #160	; 0xa0
 8001d68:	f000 fb38 	bl	80023dc <f25519_sub>

	/* G = D + C */
	f25519_add(g, d, c);
 8001d6c:	a918      	add	r1, sp, #96	; 0x60
 8001d6e:	aa10      	add	r2, sp, #64	; 0x40
 8001d70:	a830      	add	r0, sp, #192	; 0xc0
 8001d72:	f000 fb0f 	bl	8002394 <f25519_add>

	/* H = B + A */
	f25519_add(h, b, a);
 8001d76:	a908      	add	r1, sp, #32
 8001d78:	466a      	mov	r2, sp
 8001d7a:	a838      	add	r0, sp, #224	; 0xe0
 8001d7c:	f000 fb0a 	bl	8002394 <f25519_add>

	/* X3 = E F */
	f25519_mul__distinct(r->x, e, f);
 8001d80:	4630      	mov	r0, r6
 8001d82:	a920      	add	r1, sp, #128	; 0x80
 8001d84:	aa28      	add	r2, sp, #160	; 0xa0
 8001d86:	f000 fb73 	bl	8002470 <f25519_mul__distinct>

	/* Y3 = G H */
	f25519_mul__distinct(r->y, g, h);
 8001d8a:	f106 0020 	add.w	r0, r6, #32
 8001d8e:	a930      	add	r1, sp, #192	; 0xc0
 8001d90:	aa38      	add	r2, sp, #224	; 0xe0
 8001d92:	f000 fb6d 	bl	8002470 <f25519_mul__distinct>

	/* T3 = E H */
	f25519_mul__distinct(r->t, e, h);
 8001d96:	a920      	add	r1, sp, #128	; 0x80
 8001d98:	aa38      	add	r2, sp, #224	; 0xe0
 8001d9a:	f106 0040 	add.w	r0, r6, #64	; 0x40
 8001d9e:	f000 fb67 	bl	8002470 <f25519_mul__distinct>

	/* Z3 = F G */
	f25519_mul__distinct(r->z, f, g);
 8001da2:	f106 0060 	add.w	r0, r6, #96	; 0x60
 8001da6:	a928      	add	r1, sp, #160	; 0xa0
 8001da8:	aa30      	add	r2, sp, #192	; 0xc0
 8001daa:	f000 fb61 	bl	8002470 <f25519_mul__distinct>
}
 8001dae:	b040      	add	sp, #256	; 0x100
 8001db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001db4:	08007708 	stmdaeq	r0, {r3, r8, r9, sl, ip, sp, lr}

08001db8 <ed25519_double>:

void ed25519_double(struct ed25519_pt *r, const struct ed25519_pt *p)
{
 8001db8:	b570      	push	{r4, r5, r6, lr}
 8001dba:	b0b8      	sub	sp, #224	; 0xe0
 8001dbc:	4604      	mov	r4, r0

	/* A = X1^2 */
	f25519_mul__distinct(a, p->x, p->x);

	/* B = Y1^2 */
	f25519_mul__distinct(b, p->y, p->y);
 8001dbe:	f101 0620 	add.w	r6, r1, #32
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = X1^2 */
	f25519_mul__distinct(a, p->x, p->x);
 8001dc2:	460a      	mov	r2, r1
 8001dc4:	4668      	mov	r0, sp
	/* Z3 = F G */
	f25519_mul__distinct(r->z, f, g);
}

void ed25519_double(struct ed25519_pt *r, const struct ed25519_pt *p)
{
 8001dc6:	460d      	mov	r5, r1
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = X1^2 */
	f25519_mul__distinct(a, p->x, p->x);
 8001dc8:	f000 fb52 	bl	8002470 <f25519_mul__distinct>

	/* B = Y1^2 */
	f25519_mul__distinct(b, p->y, p->y);
 8001dcc:	4631      	mov	r1, r6
 8001dce:	4632      	mov	r2, r6
 8001dd0:	a808      	add	r0, sp, #32
 8001dd2:	f000 fb4d 	bl	8002470 <f25519_mul__distinct>

	/* C = 2 Z1^2 */
	f25519_mul__distinct(c, p->z, p->z);
 8001dd6:	f105 0160 	add.w	r1, r5, #96	; 0x60
 8001dda:	460a      	mov	r2, r1
 8001ddc:	a810      	add	r0, sp, #64	; 0x40
 8001dde:	f000 fb47 	bl	8002470 <f25519_mul__distinct>
	f25519_add(c, c, c);
 8001de2:	a810      	add	r0, sp, #64	; 0x40
 8001de4:	4601      	mov	r1, r0
 8001de6:	4602      	mov	r2, r0
 8001de8:	f000 fad4 	bl	8002394 <f25519_add>

	/* D = a A (alter sign) */
	/* E = (X1+Y1)^2-A-B */
	f25519_add(f, p->x, p->y);
 8001dec:	4632      	mov	r2, r6
 8001dee:	4629      	mov	r1, r5
 8001df0:	a820      	add	r0, sp, #128	; 0x80
 8001df2:	f000 facf 	bl	8002394 <f25519_add>
	f25519_mul__distinct(e, f, f);
 8001df6:	a920      	add	r1, sp, #128	; 0x80
 8001df8:	460a      	mov	r2, r1
 8001dfa:	a818      	add	r0, sp, #96	; 0x60
 8001dfc:	f000 fb38 	bl	8002470 <f25519_mul__distinct>
	f25519_sub(e, e, a);
 8001e00:	a818      	add	r0, sp, #96	; 0x60
 8001e02:	4601      	mov	r1, r0
 8001e04:	466a      	mov	r2, sp
 8001e06:	f000 fae9 	bl	80023dc <f25519_sub>
	f25519_sub(e, e, b);
 8001e0a:	a818      	add	r0, sp, #96	; 0x60
 8001e0c:	4601      	mov	r1, r0
 8001e0e:	aa08      	add	r2, sp, #32
 8001e10:	f000 fae4 	bl	80023dc <f25519_sub>

	/* G = D + B */
	f25519_sub(g, b, a);
 8001e14:	a908      	add	r1, sp, #32
 8001e16:	466a      	mov	r2, sp
 8001e18:	a828      	add	r0, sp, #160	; 0xa0
 8001e1a:	f000 fadf 	bl	80023dc <f25519_sub>

	/* F = G - C */
	f25519_sub(f, g, c);
 8001e1e:	aa10      	add	r2, sp, #64	; 0x40
 8001e20:	a820      	add	r0, sp, #128	; 0x80
 8001e22:	a928      	add	r1, sp, #160	; 0xa0
 8001e24:	f000 fada 	bl	80023dc <f25519_sub>

	/* H = D - B */
	f25519_neg(h, b);
 8001e28:	a908      	add	r1, sp, #32
 8001e2a:	a830      	add	r0, sp, #192	; 0xc0
 8001e2c:	f000 fafc 	bl	8002428 <f25519_neg>
	f25519_sub(h, h, a);
 8001e30:	a830      	add	r0, sp, #192	; 0xc0
 8001e32:	4601      	mov	r1, r0
 8001e34:	466a      	mov	r2, sp
 8001e36:	f000 fad1 	bl	80023dc <f25519_sub>

	/* X3 = E F */
	f25519_mul__distinct(r->x, e, f);
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	a918      	add	r1, sp, #96	; 0x60
 8001e3e:	aa20      	add	r2, sp, #128	; 0x80
 8001e40:	f000 fb16 	bl	8002470 <f25519_mul__distinct>

	/* Y3 = G H */
	f25519_mul__distinct(r->y, g, h);
 8001e44:	f104 0020 	add.w	r0, r4, #32
 8001e48:	a928      	add	r1, sp, #160	; 0xa0
 8001e4a:	aa30      	add	r2, sp, #192	; 0xc0
 8001e4c:	f000 fb10 	bl	8002470 <f25519_mul__distinct>

	/* T3 = E H */
	f25519_mul__distinct(r->t, e, h);
 8001e50:	a918      	add	r1, sp, #96	; 0x60
 8001e52:	aa30      	add	r2, sp, #192	; 0xc0
 8001e54:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001e58:	f000 fb0a 	bl	8002470 <f25519_mul__distinct>

	/* Z3 = F G */
	f25519_mul__distinct(r->z, f, g);
 8001e5c:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8001e60:	a920      	add	r1, sp, #128	; 0x80
 8001e62:	aa28      	add	r2, sp, #160	; 0xa0
 8001e64:	f000 fb04 	bl	8002470 <f25519_mul__distinct>
}
 8001e68:	b038      	add	sp, #224	; 0xe0
 8001e6a:	bd70      	pop	{r4, r5, r6, pc}

08001e6c <ed25519_smult>:

void ed25519_smult(struct ed25519_pt *r_out, const struct ed25519_pt *p,
		   const uint8_t *e)
{
 8001e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e70:	b0c0      	sub	sp, #256	; 0x100
 8001e72:	4680      	mov	r8, r0
 8001e74:	460f      	mov	r7, r1
 8001e76:	4616      	mov	r6, r2

/* Order of the group generated by the base point */
static inline void ed25519_copy(struct ed25519_pt *dst,
				const struct ed25519_pt *src)
{
	memcpy(dst, src, sizeof(*dst));
 8001e78:	4668      	mov	r0, sp
 8001e7a:	491c      	ldr	r1, [pc, #112]	; (8001eec <ed25519_smult+0x80>)
 8001e7c:	2280      	movs	r2, #128	; 0x80
 8001e7e:	f004 ff17 	bl	8006cb0 <memcpy>
	struct ed25519_pt r;
	int i;

	ed25519_copy(&r, &ed25519_neutral);

	for (i = 255; i >= 0; i--) {
 8001e82:	24ff      	movs	r4, #255	; 0xff
		const uint8_t bit = (e[i >> 3] >> (i & 7)) & 1;
 8001e84:	10e3      	asrs	r3, r4, #3
 8001e86:	5cf5      	ldrb	r5, [r6, r3]
 8001e88:	f004 0307 	and.w	r3, r4, #7
 8001e8c:	411d      	asrs	r5, r3
		struct ed25519_pt s;

		ed25519_double(&r, &r);
 8001e8e:	4668      	mov	r0, sp
 8001e90:	4669      	mov	r1, sp
 8001e92:	f7ff ff91 	bl	8001db8 <ed25519_double>
	int i;

	ed25519_copy(&r, &ed25519_neutral);

	for (i = 255; i >= 0; i--) {
		const uint8_t bit = (e[i >> 3] >> (i & 7)) & 1;
 8001e96:	f005 0501 	and.w	r5, r5, #1
		struct ed25519_pt s;

		ed25519_double(&r, &r);
		ed25519_add(&s, &r, p);
 8001e9a:	a820      	add	r0, sp, #128	; 0x80
 8001e9c:	4669      	mov	r1, sp
 8001e9e:	463a      	mov	r2, r7
 8001ea0:	f7ff ff1a 	bl	8001cd8 <ed25519_add>

		f25519_select(r.x, r.x, s.x, bit);
 8001ea4:	4668      	mov	r0, sp
 8001ea6:	4669      	mov	r1, sp
 8001ea8:	aa20      	add	r2, sp, #128	; 0x80
 8001eaa:	462b      	mov	r3, r5
 8001eac:	f000 fa10 	bl	80022d0 <f25519_select>
		f25519_select(r.y, r.y, s.y, bit);
 8001eb0:	a808      	add	r0, sp, #32
 8001eb2:	4601      	mov	r1, r0
 8001eb4:	aa28      	add	r2, sp, #160	; 0xa0
 8001eb6:	462b      	mov	r3, r5
 8001eb8:	f000 fa0a 	bl	80022d0 <f25519_select>
		f25519_select(r.z, r.z, s.z, bit);
 8001ebc:	a818      	add	r0, sp, #96	; 0x60
 8001ebe:	4601      	mov	r1, r0
 8001ec0:	aa38      	add	r2, sp, #224	; 0xe0
 8001ec2:	462b      	mov	r3, r5
 8001ec4:	f000 fa04 	bl	80022d0 <f25519_select>
		f25519_select(r.t, r.t, s.t, bit);
 8001ec8:	a810      	add	r0, sp, #64	; 0x40
 8001eca:	462b      	mov	r3, r5
	struct ed25519_pt r;
	int i;

	ed25519_copy(&r, &ed25519_neutral);

	for (i = 255; i >= 0; i--) {
 8001ecc:	3c01      	subs	r4, #1
		ed25519_add(&s, &r, p);

		f25519_select(r.x, r.x, s.x, bit);
		f25519_select(r.y, r.y, s.y, bit);
		f25519_select(r.z, r.z, s.z, bit);
		f25519_select(r.t, r.t, s.t, bit);
 8001ece:	4601      	mov	r1, r0
 8001ed0:	aa30      	add	r2, sp, #192	; 0xc0
 8001ed2:	f000 f9fd 	bl	80022d0 <f25519_select>
	struct ed25519_pt r;
	int i;

	ed25519_copy(&r, &ed25519_neutral);

	for (i = 255; i >= 0; i--) {
 8001ed6:	1c63      	adds	r3, r4, #1
 8001ed8:	d1d4      	bne.n	8001e84 <ed25519_smult+0x18>
 8001eda:	4640      	mov	r0, r8
 8001edc:	4669      	mov	r1, sp
 8001ede:	2280      	movs	r2, #128	; 0x80
 8001ee0:	f004 fee6 	bl	8006cb0 <memcpy>
		f25519_select(r.z, r.z, s.z, bit);
		f25519_select(r.t, r.t, s.t, bit);
	}

	ed25519_copy(r_out, &r);
}
 8001ee4:	b040      	add	sp, #256	; 0x100
 8001ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001eea:	bf00      	nop
 8001eec:	08007728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip, sp, lr}

08001ef0 <expand_key>:
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10
};

static void expand_key(uint8_t *expanded, const uint8_t *secret)
{
 8001ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
extern const struct sha512_state sha512_initial_state;

/* Set up a new context */
static inline void sha512_init(struct sha512_state *s)
{
	memcpy(s, &sha512_initial_state, sizeof(*s));
 8001ef2:	4d13      	ldr	r5, [pc, #76]	; (8001f40 <expand_key+0x50>)
 8001ef4:	b091      	sub	sp, #68	; 0x44
 8001ef6:	466c      	mov	r4, sp
 8001ef8:	4606      	mov	r6, r0
 8001efa:	460f      	mov	r7, r1
 8001efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	struct sha512_state s;

	sha512_init(&s);
	sha512_final(&s, secret, EDSIGN_SECRET_KEY_SIZE);
 8001f10:	4668      	mov	r0, sp
 8001f12:	4639      	mov	r1, r7
 8001f14:	2220      	movs	r2, #32
 8001f16:	f003 fe17 	bl	8005b48 <sha512_final>
	sha512_get(&s, expanded, 0, EXPANDED_SIZE);
 8001f1a:	4668      	mov	r0, sp
 8001f1c:	4631      	mov	r1, r6
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2340      	movs	r3, #64	; 0x40
 8001f22:	f003 fe55 	bl	8005bd0 <sha512_get>
#define ED25519_EXPONENT_SIZE	32

/* Prepare an exponent by clamping appropriate bits */
static inline void ed25519_prepare(uint8_t *e)
{
	e[0] &= 0xf8;
 8001f26:	7833      	ldrb	r3, [r6, #0]
 8001f28:	f023 0307 	bic.w	r3, r3, #7
 8001f2c:	7033      	strb	r3, [r6, #0]
	e[31] &= 0x7f;
 8001f2e:	7ff3      	ldrb	r3, [r6, #31]
 8001f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	e[31] |= 0x40;
 8001f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f38:	77f3      	strb	r3, [r6, #31]
	ed25519_prepare(expanded);
}
 8001f3a:	b011      	add	sp, #68	; 0x44
 8001f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	08007888 	stmdaeq	r0, {r3, r7, fp, ip, sp, lr}

08001f44 <hash_with_prefix>:
}

static void hash_with_prefix(uint8_t *out_fp,
			     uint8_t *init_block, int prefix_size,
			     const uint8_t *message, size_t len)
{
 8001f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f48:	4d23      	ldr	r5, [pc, #140]	; (8001fd8 <hash_with_prefix+0x94>)
 8001f4a:	b090      	sub	sp, #64	; 0x40
 8001f4c:	466c      	mov	r4, sp
 8001f4e:	4690      	mov	r8, r2
 8001f50:	460e      	mov	r6, r1
 8001f52:	4699      	mov	r9, r3
 8001f54:	4682      	mov	sl, r0
 8001f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f62:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f66:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8001f68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	struct sha512_state s;

	sha512_init(&s);

	if (len < SHA512_BLOCK_SIZE - prefix_size) {
 8001f6c:	f1c8 0480 	rsb	r4, r8, #128	; 0x80
 8001f70:	42a7      	cmp	r7, r4
		memcpy(init_block + prefix_size, message, len);
 8001f72:	4649      	mov	r1, r9
 8001f74:	eb06 0008 	add.w	r0, r6, r8
{
	struct sha512_state s;

	sha512_init(&s);

	if (len < SHA512_BLOCK_SIZE - prefix_size) {
 8001f78:	d205      	bcs.n	8001f86 <hash_with_prefix+0x42>
		memcpy(init_block + prefix_size, message, len);
 8001f7a:	463a      	mov	r2, r7
 8001f7c:	f004 fe98 	bl	8006cb0 <memcpy>
		sha512_final(&s, init_block, len + prefix_size);
 8001f80:	4668      	mov	r0, sp
 8001f82:	4631      	mov	r1, r6
 8001f84:	e015      	b.n	8001fb2 <hash_with_prefix+0x6e>
	} else {
		size_t i;

		memcpy(init_block + prefix_size, message,
 8001f86:	4622      	mov	r2, r4
 8001f88:	f004 fe92 	bl	8006cb0 <memcpy>
		       SHA512_BLOCK_SIZE - prefix_size);
		sha512_block(&s, init_block);
 8001f8c:	4668      	mov	r0, sp
 8001f8e:	4631      	mov	r1, r6
 8001f90:	f003 fb90 	bl	80056b4 <sha512_block>

		for (i = SHA512_BLOCK_SIZE - prefix_size;
		     i + SHA512_BLOCK_SIZE <= len;
 8001f94:	f104 0580 	add.w	r5, r4, #128	; 0x80

		memcpy(init_block + prefix_size, message,
		       SHA512_BLOCK_SIZE - prefix_size);
		sha512_block(&s, init_block);

		for (i = SHA512_BLOCK_SIZE - prefix_size;
 8001f98:	42bd      	cmp	r5, r7
 8001f9a:	d807      	bhi.n	8001fac <hash_with_prefix+0x68>
 8001f9c:	f1a9 0180 	sub.w	r1, r9, #128	; 0x80
		     i + SHA512_BLOCK_SIZE <= len;
		     i += SHA512_BLOCK_SIZE)
			sha512_block(&s, message + i);
 8001fa0:	4668      	mov	r0, sp
 8001fa2:	4429      	add	r1, r5
 8001fa4:	f003 fb86 	bl	80056b4 <sha512_block>
 8001fa8:	462c      	mov	r4, r5
 8001faa:	e7f3      	b.n	8001f94 <hash_with_prefix+0x50>

		sha512_final(&s, message + i, len + prefix_size);
 8001fac:	4668      	mov	r0, sp
 8001fae:	eb09 0104 	add.w	r1, r9, r4
 8001fb2:	eb08 0207 	add.w	r2, r8, r7
 8001fb6:	f003 fdc7 	bl	8005b48 <sha512_final>
	}

	sha512_get(&s, init_block, 0, SHA512_HASH_SIZE);
 8001fba:	4668      	mov	r0, sp
 8001fbc:	4631      	mov	r1, r6
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2340      	movs	r3, #64	; 0x40
 8001fc2:	f003 fe05 	bl	8005bd0 <sha512_get>
	fprime_from_bytes(out_fp, init_block, SHA512_HASH_SIZE, ed25519_order);
 8001fc6:	4650      	mov	r0, sl
 8001fc8:	4631      	mov	r1, r6
 8001fca:	2240      	movs	r2, #64	; 0x40
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <hash_with_prefix+0x98>)
 8001fce:	f001 f8a3 	bl	8003118 <fprime_from_bytes>
}
 8001fd2:	b010      	add	sp, #64	; 0x40
 8001fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fd8:	08007888 	stmdaeq	r0, {r3, r7, fp, ip, sp, lr}
 8001fdc:	08007848 	stmdaeq	r0, {r3, r6, fp, ip, sp, lr}

08001fe0 <sm_pack>:
	ed25519_unproject(x, y, p);
	ed25519_pack(packed, x, y);
}

static void sm_pack(uint8_t *r, const uint8_t *k)
{
 8001fe0:	b510      	push	{r4, lr}
 8001fe2:	b0b0      	sub	sp, #192	; 0xc0
 8001fe4:	4604      	mov	r4, r0
 8001fe6:	460a      	mov	r2, r1
	struct ed25519_pt p;

	ed25519_smult(&p, &ed25519_base, k);
 8001fe8:	a810      	add	r0, sp, #64	; 0x40
 8001fea:	4907      	ldr	r1, [pc, #28]	; (8002008 <sm_pack+0x28>)
 8001fec:	f7ff ff3e 	bl	8001e6c <ed25519_smult>
static void pp(uint8_t *packed, const struct ed25519_pt *p)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];

	ed25519_unproject(x, y, p);
 8001ff0:	4668      	mov	r0, sp
 8001ff2:	a908      	add	r1, sp, #32
 8001ff4:	aa10      	add	r2, sp, #64	; 0x40
 8001ff6:	f7ff fdbd 	bl	8001b74 <ed25519_unproject>
	ed25519_pack(packed, x, y);
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	4669      	mov	r1, sp
 8001ffe:	aa08      	add	r2, sp, #32
 8002000:	f7ff fdd6 	bl	8001bb0 <ed25519_pack>
{
	struct ed25519_pt p;

	ed25519_smult(&p, &ed25519_base, k);
	pp(r, &p);
}
 8002004:	b030      	add	sp, #192	; 0xc0
 8002006:	bd10      	pop	{r4, pc}
 8002008:	080077a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, ip, sp, lr}

0800200c <edsign_sec_to_pub>:

void edsign_sec_to_pub(uint8_t *pub, const uint8_t *secret)
{
 800200c:	b510      	push	{r4, lr}
 800200e:	b090      	sub	sp, #64	; 0x40
 8002010:	4604      	mov	r4, r0
	uint8_t expanded[EXPANDED_SIZE];

	expand_key(expanded, secret);
 8002012:	4668      	mov	r0, sp
 8002014:	f7ff ff6c 	bl	8001ef0 <expand_key>
	sm_pack(pub, expanded);
 8002018:	4620      	mov	r0, r4
 800201a:	4669      	mov	r1, sp
 800201c:	f7ff ffe0 	bl	8001fe0 <sm_pack>
}
 8002020:	b010      	add	sp, #64	; 0x40
 8002022:	bd10      	pop	{r4, pc}

08002024 <edsign_sign>:
}

void edsign_sign(uint8_t *signature, const uint8_t *pub,
		 const uint8_t *secret,
		 const uint8_t *message, size_t len)
{
 8002024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002028:	b0cb      	sub	sp, #300	; 0x12c
 800202a:	4680      	mov	r8, r0
 800202c:	4689      	mov	r9, r1
	uint8_t e[FPRIME_SIZE];
	uint8_t s[FPRIME_SIZE];
	uint8_t k[FPRIME_SIZE];
	uint8_t z[FPRIME_SIZE];

	expand_key(expanded, secret);
 800202e:	a81a      	add	r0, sp, #104	; 0x68
 8002030:	4611      	mov	r1, r2
static void generate_k(uint8_t *k, const uint8_t *kgen_key,
		       const uint8_t *message, size_t len)
{
	uint8_t block[SHA512_BLOCK_SIZE];

	memcpy(block, kgen_key, 32);
 8002032:	ac2a      	add	r4, sp, #168	; 0xa8
 8002034:	ad22      	add	r5, sp, #136	; 0x88
}

void edsign_sign(uint8_t *signature, const uint8_t *pub,
		 const uint8_t *secret,
		 const uint8_t *message, size_t len)
{
 8002036:	461e      	mov	r6, r3
 8002038:	9f52      	ldr	r7, [sp, #328]	; 0x148
	uint8_t e[FPRIME_SIZE];
	uint8_t s[FPRIME_SIZE];
	uint8_t k[FPRIME_SIZE];
	uint8_t z[FPRIME_SIZE];

	expand_key(expanded, secret);
 800203a:	f7ff ff59 	bl	8001ef0 <expand_key>
static void generate_k(uint8_t *k, const uint8_t *kgen_key,
		       const uint8_t *message, size_t len)
{
	uint8_t block[SHA512_BLOCK_SIZE];

	memcpy(block, kgen_key, 32);
 800203e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002042:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002046:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	hash_with_prefix(k, block, 32, message, len);
 800204a:	4633      	mov	r3, r6
 800204c:	a80a      	add	r0, sp, #40	; 0x28
 800204e:	a92a      	add	r1, sp, #168	; 0xa8
 8002050:	2220      	movs	r2, #32
 8002052:	9700      	str	r7, [sp, #0]
 8002054:	f7ff ff76 	bl	8001f44 <hash_with_prefix>
	uint8_t z[FPRIME_SIZE];

	expand_key(expanded, secret);

	generate_k(k, expanded + 32, message, len);
	sm_pack(signature, k);
 8002058:	4640      	mov	r0, r8
 800205a:	a90a      	add	r1, sp, #40	; 0x28
 800205c:	f7ff ffc0 	bl	8001fe0 <sm_pack>
static void hash_message(uint8_t *z, const uint8_t *r, const uint8_t *a,
			 const uint8_t *m, size_t len)
{
	uint8_t block[SHA512_BLOCK_SIZE];

	memcpy(block, r, 32);
 8002060:	4644      	mov	r4, r8
 8002062:	ab2a      	add	r3, sp, #168	; 0xa8
 8002064:	f108 0820 	add.w	r8, r8, #32
 8002068:	6820      	ldr	r0, [r4, #0]
 800206a:	6861      	ldr	r1, [r4, #4]
 800206c:	461d      	mov	r5, r3
 800206e:	c503      	stmia	r5!, {r0, r1}
 8002070:	3408      	adds	r4, #8
 8002072:	4544      	cmp	r4, r8
 8002074:	462b      	mov	r3, r5
 8002076:	d1f7      	bne.n	8002068 <edsign_sign+0x44>
	memcpy(block + 32, a, 32);
 8002078:	ad32      	add	r5, sp, #200	; 0xc8
 800207a:	464a      	mov	r2, r9
 800207c:	462b      	mov	r3, r5
 800207e:	f109 0e20 	add.w	lr, r9, #32
 8002082:	6810      	ldr	r0, [r2, #0]
 8002084:	6851      	ldr	r1, [r2, #4]
 8002086:	461c      	mov	r4, r3
 8002088:	c403      	stmia	r4!, {r0, r1}
 800208a:	3208      	adds	r2, #8
 800208c:	4572      	cmp	r2, lr
 800208e:	4623      	mov	r3, r4
 8002090:	d1f7      	bne.n	8002082 <edsign_sign+0x5e>
	hash_with_prefix(z, block, 64, m, len);
 8002092:	a812      	add	r0, sp, #72	; 0x48
 8002094:	a92a      	add	r1, sp, #168	; 0xa8
 8002096:	2240      	movs	r2, #64	; 0x40
 8002098:	4633      	mov	r3, r6
 800209a:	9700      	str	r7, [sp, #0]
 800209c:	f7ff ff52 	bl	8001f44 <hash_with_prefix>
	generate_k(k, expanded + 32, message, len);
	sm_pack(signature, k);

	hash_message(z, signature, pub, message, len);

	fprime_from_bytes(e, expanded, 32, ed25519_order);
 80020a0:	a802      	add	r0, sp, #8
 80020a2:	a91a      	add	r1, sp, #104	; 0x68
 80020a4:	2220      	movs	r2, #32
 80020a6:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <edsign_sign+0xbc>)
 80020a8:	f001 f836 	bl	8003118 <fprime_from_bytes>

	fprime_mul(s, z, e, ed25519_order);
 80020ac:	a82a      	add	r0, sp, #168	; 0xa8
 80020ae:	a912      	add	r1, sp, #72	; 0x48
 80020b0:	aa02      	add	r2, sp, #8
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <edsign_sign+0xbc>)
 80020b4:	f001 f92c 	bl	8003310 <fprime_mul>
	fprime_add(s, k, ed25519_order);
 80020b8:	4a09      	ldr	r2, [pc, #36]	; (80020e0 <edsign_sign+0xbc>)
 80020ba:	a82a      	add	r0, sp, #168	; 0xa8
 80020bc:	a90a      	add	r1, sp, #40	; 0x28
 80020be:	f001 f8fb 	bl	80032b8 <fprime_add>
	memcpy(signature + 32, s, 32);
 80020c2:	ac2a      	add	r4, sp, #168	; 0xa8
 80020c4:	4642      	mov	r2, r8
 80020c6:	4623      	mov	r3, r4
 80020c8:	cb03      	ldmia	r3!, {r0, r1}
 80020ca:	42ab      	cmp	r3, r5
 80020cc:	6010      	str	r0, [r2, #0]
 80020ce:	6051      	str	r1, [r2, #4]
 80020d0:	461c      	mov	r4, r3
 80020d2:	f102 0208 	add.w	r2, r2, #8
 80020d6:	d1f6      	bne.n	80020c6 <edsign_sign+0xa2>
}
 80020d8:	b04b      	add	sp, #300	; 0x12c
 80020da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020de:	bf00      	nop
 80020e0:	08007848 	stmdaeq	r0, {r3, r6, fp, ip, sp, lr}

080020e4 <edsign_verify>:
uint8_t edsign_verify(const uint8_t *signature, const uint8_t *pub,
		      const uint8_t *message, size_t len)
{
 80020e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020e8:	b0ea      	sub	sp, #424	; 0x1a8
 80020ea:	4606      	mov	r6, r0
 80020ec:	460f      	mov	r7, r1
 80020ee:	4694      	mov	ip, r2
static void hash_message(uint8_t *z, const uint8_t *r, const uint8_t *a,
			 const uint8_t *m, size_t len)
{
	uint8_t block[SHA512_BLOCK_SIZE];

	memcpy(block, r, 32);
 80020f0:	4604      	mov	r4, r0
 80020f2:	f50d 7e94 	add.w	lr, sp, #296	; 0x128
 80020f6:	f100 0820 	add.w	r8, r0, #32
 80020fa:	6820      	ldr	r0, [r4, #0]
 80020fc:	6861      	ldr	r1, [r4, #4]
 80020fe:	4675      	mov	r5, lr
 8002100:	c503      	stmia	r5!, {r0, r1}
 8002102:	3408      	adds	r4, #8
 8002104:	4544      	cmp	r4, r8
 8002106:	46ae      	mov	lr, r5
 8002108:	d1f7      	bne.n	80020fa <edsign_verify+0x16>
	memcpy(block + 32, a, 32);
 800210a:	463c      	mov	r4, r7
 800210c:	f50d 7ea4 	add.w	lr, sp, #328	; 0x148
 8002110:	f107 0220 	add.w	r2, r7, #32
 8002114:	6820      	ldr	r0, [r4, #0]
 8002116:	6861      	ldr	r1, [r4, #4]
 8002118:	4675      	mov	r5, lr
 800211a:	c503      	stmia	r5!, {r0, r1}
 800211c:	3408      	adds	r4, #8
 800211e:	4294      	cmp	r4, r2
 8002120:	46ae      	mov	lr, r5
 8002122:	d1f7      	bne.n	8002114 <edsign_verify+0x30>
	hash_with_prefix(z, block, 64, m, len);
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	a812      	add	r0, sp, #72	; 0x48
 8002128:	4663      	mov	r3, ip
 800212a:	a94a      	add	r1, sp, #296	; 0x128
 800212c:	2240      	movs	r2, #64	; 0x40
 800212e:	f7ff ff09 	bl	8001f44 <hash_with_prefix>

	/* Compute z = H(R, A, M) */
	hash_message(z, signature, pub, message, len);

	/* sB = (ze + k)B = ... */
	sm_pack(lhs, signature + 32);
 8002132:	a802      	add	r0, sp, #8
 8002134:	4641      	mov	r1, r8
 8002136:	f7ff ff53 	bl	8001fe0 <sm_pack>

static uint8_t upp(struct ed25519_pt *p, const uint8_t *packed)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];
	uint8_t ok = ed25519_try_unpack(x, y, packed);
 800213a:	a94a      	add	r1, sp, #296	; 0x128
 800213c:	463a      	mov	r2, r7
 800213e:	a822      	add	r0, sp, #136	; 0x88
 8002140:	f7ff fd66 	bl	8001c10 <ed25519_try_unpack>

	ed25519_project(p, x, y);
 8002144:	a922      	add	r1, sp, #136	; 0x88

static uint8_t upp(struct ed25519_pt *p, const uint8_t *packed)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];
	uint8_t ok = ed25519_try_unpack(x, y, packed);
 8002146:	4605      	mov	r5, r0

	ed25519_project(p, x, y);
 8002148:	aa4a      	add	r2, sp, #296	; 0x128
 800214a:	a82a      	add	r0, sp, #168	; 0xa8
 800214c:	f7ff fcda 	bl	8001b04 <ed25519_project>
	/* sB = (ze + k)B = ... */
	sm_pack(lhs, signature + 32);

	/* ... = zA + R */
	ok &= upp(&p, pub);
	ed25519_smult(&p, &p, z);
 8002150:	a82a      	add	r0, sp, #168	; 0xa8
 8002152:	4601      	mov	r1, r0
 8002154:	aa12      	add	r2, sp, #72	; 0x48
 8002156:	f7ff fe89 	bl	8001e6c <ed25519_smult>

static uint8_t upp(struct ed25519_pt *p, const uint8_t *packed)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];
	uint8_t ok = ed25519_try_unpack(x, y, packed);
 800215a:	a922      	add	r1, sp, #136	; 0x88
 800215c:	4632      	mov	r2, r6
 800215e:	a81a      	add	r0, sp, #104	; 0x68
 8002160:	f7ff fd56 	bl	8001c10 <ed25519_try_unpack>

	ed25519_project(p, x, y);
 8002164:	a91a      	add	r1, sp, #104	; 0x68

static uint8_t upp(struct ed25519_pt *p, const uint8_t *packed)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];
	uint8_t ok = ed25519_try_unpack(x, y, packed);
 8002166:	4604      	mov	r4, r0

	ed25519_project(p, x, y);
 8002168:	aa22      	add	r2, sp, #136	; 0x88
 800216a:	a84a      	add	r0, sp, #296	; 0x128
 800216c:	f7ff fcca 	bl	8001b04 <ed25519_project>

	/* ... = zA + R */
	ok &= upp(&p, pub);
	ed25519_smult(&p, &p, z);
	ok &= upp(&q, signature);
	ed25519_add(&p, &p, &q);
 8002170:	a82a      	add	r0, sp, #168	; 0xa8
 8002172:	4601      	mov	r1, r0
 8002174:	aa4a      	add	r2, sp, #296	; 0x128
 8002176:	f7ff fdaf 	bl	8001cd8 <ed25519_add>
static void pp(uint8_t *packed, const struct ed25519_pt *p)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];

	ed25519_unproject(x, y, p);
 800217a:	a81a      	add	r0, sp, #104	; 0x68
 800217c:	a922      	add	r1, sp, #136	; 0x88
 800217e:	aa2a      	add	r2, sp, #168	; 0xa8
 8002180:	f7ff fcf8 	bl	8001b74 <ed25519_unproject>
	ed25519_pack(packed, x, y);
 8002184:	a80a      	add	r0, sp, #40	; 0x28
 8002186:	a91a      	add	r1, sp, #104	; 0x68
 8002188:	aa22      	add	r2, sp, #136	; 0x88
 800218a:	f7ff fd11 	bl	8001bb0 <ed25519_pack>
	ok &= upp(&q, signature);
	ed25519_add(&p, &p, &q);
	pp(rhs, &p);

	/* Equal? */
	return ok & f25519_eq(lhs, rhs);
 800218e:	a802      	add	r0, sp, #8
 8002190:	a90a      	add	r1, sp, #40	; 0x28
 8002192:	f000 f84f 	bl	8002234 <f25519_eq>

	/* sB = (ze + k)B = ... */
	sm_pack(lhs, signature + 32);

	/* ... = zA + R */
	ok &= upp(&p, pub);
 8002196:	4028      	ands	r0, r5
	ed25519_smult(&p, &p, z);
	ok &= upp(&q, signature);
 8002198:	f000 0001 	and.w	r0, r0, #1
	ed25519_add(&p, &p, &q);
	pp(rhs, &p);

	/* Equal? */
	return ok & f25519_eq(lhs, rhs);
}
 800219c:	4020      	ands	r0, r4
 800219e:	b06a      	add	sp, #424	; 0x1a8
 80021a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080021a4 <f25519_load>:

const uint8_t f25519_zero[F25519_SIZE] = {0};
const uint8_t f25519_one[F25519_SIZE] = {1};

void f25519_load(uint8_t *x, uint32_t c)
{
 80021a4:	b410      	push	{r4}
	int i;

	for (i = 0; i < sizeof(c); i++) {
		x[i] = c;
		c >>= 8;
 80021a6:	0c0a      	lsrs	r2, r1, #16
 80021a8:	0a0c      	lsrs	r4, r1, #8
 80021aa:	0e0b      	lsrs	r3, r1, #24
void f25519_load(uint8_t *x, uint32_t c)
{
	int i;

	for (i = 0; i < sizeof(c); i++) {
		x[i] = c;
 80021ac:	7001      	strb	r1, [r0, #0]
 80021ae:	7082      	strb	r2, [r0, #2]
 80021b0:	7044      	strb	r4, [r0, #1]
 80021b2:	70c3      	strb	r3, [r0, #3]
 80021b4:	2100      	movs	r1, #0
 80021b6:	3004      	adds	r0, #4
 80021b8:	221c      	movs	r2, #28
		c >>= 8;
	}

	for (; i < F25519_SIZE; i++)
		x[i] = 0;
}
 80021ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021be:	f004 bd80 	b.w	8006cc2 <memset>
 80021c2:	bf00      	nop

080021c4 <f25519_normalize>:

void f25519_normalize(uint8_t *x)
{
 80021c4:	b410      	push	{r4}
	uint8_t minusp[F25519_SIZE];
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
 80021c6:	7fc4      	ldrb	r4, [r0, #31]
	for (; i < F25519_SIZE; i++)
		x[i] = 0;
}

void f25519_normalize(uint8_t *x)
{
 80021c8:	b089      	sub	sp, #36	; 0x24
	uint8_t minusp[F25519_SIZE];
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
 80021ca:	09e1      	lsrs	r1, r4, #7
 80021cc:	00ca      	lsls	r2, r1, #3
	x[31] &= 127;
 80021ce:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	uint8_t minusp[F25519_SIZE];
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
 80021d2:	440a      	add	r2, r1
	x[31] &= 127;

	for (i = 0; i < F25519_SIZE; i++) {
 80021d4:	2300      	movs	r3, #0
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
	x[31] &= 127;
 80021d6:	77c4      	strb	r4, [r0, #31]
	uint8_t minusp[F25519_SIZE];
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
 80021d8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
	x[31] &= 127;

	for (i = 0; i < F25519_SIZE; i++) {
		c += x[i];
 80021dc:	5cc1      	ldrb	r1, [r0, r3]
 80021de:	440a      	add	r2, r1
		x[i] = c;
 80021e0:	54c2      	strb	r2, [r0, r3]

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
	x[31] &= 127;

	for (i = 0; i < F25519_SIZE; i++) {
 80021e2:	3301      	adds	r3, #1
 80021e4:	2b20      	cmp	r3, #32
		c += x[i];
		x[i] = c;
		c >>= 8;
 80021e6:	f3c2 220f 	ubfx	r2, r2, #8, #16

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
	x[31] &= 127;

	for (i = 0; i < F25519_SIZE; i++) {
 80021ea:	d1f7      	bne.n	80021dc <f25519_normalize+0x18>
 80021ec:	2300      	movs	r3, #0
 80021ee:	2213      	movs	r2, #19
	 * value if underflow did not occur.
	 */
	c = 19;

	for (i = 0; i + 1 < F25519_SIZE; i++) {
		c += x[i];
 80021f0:	5cc1      	ldrb	r1, [r0, r3]
 80021f2:	440a      	add	r2, r1
		minusp[i] = c;
 80021f4:	f80d 2003 	strb.w	r2, [sp, r3]
	 * 2p. Try subtracting p, and conditionally load the subtracted
	 * value if underflow did not occur.
	 */
	c = 19;

	for (i = 0; i + 1 < F25519_SIZE; i++) {
 80021f8:	3301      	adds	r3, #1
 80021fa:	2b1f      	cmp	r3, #31
		c += x[i];
		minusp[i] = c;
		c >>= 8;
 80021fc:	f3c2 220f 	ubfx	r2, r2, #8, #16
	 * 2p. Try subtracting p, and conditionally load the subtracted
	 * value if underflow did not occur.
	 */
	c = 19;

	for (i = 0; i + 1 < F25519_SIZE; i++) {
 8002200:	d1f6      	bne.n	80021f0 <f25519_normalize+0x2c>
		c += x[i];
		minusp[i] = c;
		c >>= 8;
	}

	c += ((uint16_t)x[i]) - 128;
 8002202:	7fc1      	ldrb	r1, [r0, #31]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 8002204:	2300      	movs	r3, #0
		c += x[i];
		minusp[i] = c;
		c >>= 8;
	}

	c += ((uint16_t)x[i]) - 128;
 8002206:	3980      	subs	r1, #128	; 0x80
 8002208:	440a      	add	r2, r1
 800220a:	b292      	uxth	r2, r2

void f25519_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 800220c:	f342 34c0 	sbfx	r4, r2, #15, #1
		minusp[i] = c;
		c >>= 8;
	}

	c += ((uint16_t)x[i]) - 128;
	minusp[31] = c;
 8002210:	f88d 201f 	strb.w	r2, [sp, #31]

void f25519_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 8002214:	b2e4      	uxtb	r4, r4
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 8002216:	f81d 2003 	ldrb.w	r2, [sp, r3]
 800221a:	5cc1      	ldrb	r1, [r0, r3]
 800221c:	4051      	eors	r1, r2
 800221e:	4021      	ands	r1, r4
 8002220:	404a      	eors	r2, r1
 8002222:	54c2      	strb	r2, [r0, r3]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 8002224:	3301      	adds	r3, #1
 8002226:	2b20      	cmp	r3, #32
 8002228:	d1f5      	bne.n	8002216 <f25519_normalize+0x52>
	c += ((uint16_t)x[i]) - 128;
	minusp[31] = c;

	/* Load x-p if no underflow */
	f25519_select(x, minusp, x, (c >> 15) & 1);
}
 800222a:	b009      	add	sp, #36	; 0x24
 800222c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop

08002234 <f25519_eq>:

uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
 8002234:	ea40 0301 	orr.w	r3, r0, r1
 8002238:	079b      	lsls	r3, r3, #30
 800223a:	b4f0      	push	{r4, r5, r6, r7}
 800223c:	d13c      	bne.n	80022b8 <f25519_eq+0x84>
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		sum |= x[i] ^ y[i];
 800223e:	6807      	ldr	r7, [r0, #0]
 8002240:	6842      	ldr	r2, [r0, #4]
 8002242:	684b      	ldr	r3, [r1, #4]
 8002244:	680e      	ldr	r6, [r1, #0]
 8002246:	6885      	ldr	r5, [r0, #8]
 8002248:	688c      	ldr	r4, [r1, #8]
 800224a:	ea82 0c03 	eor.w	ip, r2, r3
 800224e:	407e      	eors	r6, r7
 8002250:	68c2      	ldr	r2, [r0, #12]
 8002252:	68cb      	ldr	r3, [r1, #12]
 8002254:	ea46 060c 	orr.w	r6, r6, ip
 8002258:	ea85 0c04 	eor.w	ip, r5, r4
 800225c:	6905      	ldr	r5, [r0, #16]
 800225e:	690c      	ldr	r4, [r1, #16]
 8002260:	ea46 0c0c 	orr.w	ip, r6, ip
 8002264:	ea82 0603 	eor.w	r6, r2, r3
 8002268:	6942      	ldr	r2, [r0, #20]
 800226a:	694b      	ldr	r3, [r1, #20]
 800226c:	ea4c 0c06 	orr.w	ip, ip, r6
 8002270:	6987      	ldr	r7, [r0, #24]
 8002272:	698e      	ldr	r6, [r1, #24]
 8002274:	406c      	eors	r4, r5
 8002276:	ea4c 0404 	orr.w	r4, ip, r4
 800227a:	4053      	eors	r3, r2
 800227c:	69c0      	ldr	r0, [r0, #28]
 800227e:	69c9      	ldr	r1, [r1, #28]
 8002280:	ea44 0203 	orr.w	r2, r4, r3
 8002284:	ea87 0406 	eor.w	r4, r7, r6
 8002288:	4322      	orrs	r2, r4
 800228a:	ea80 0301 	eor.w	r3, r0, r1
 800228e:	4313      	orrs	r3, r2
 8002290:	ea43 2213 	orr.w	r2, r3, r3, lsr #8
 8002294:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
 8002298:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 800229c:	ea42 6213 	orr.w	r2, r2, r3, lsr #24

	sum |= (sum >> 4);
 80022a0:	ea42 1212 	orr.w	r2, r2, r2, lsr #4
	sum |= (sum >> 2);
 80022a4:	ea42 0292 	orr.w	r2, r2, r2, lsr #2
	sum |= (sum >> 1);
 80022a8:	ea42 0252 	orr.w	r2, r2, r2, lsr #1

	return (sum ^ 1) & 1;
 80022ac:	f002 0001 	and.w	r0, r2, #1
}
 80022b0:	f080 0001 	eor.w	r0, r0, #1
 80022b4:	bcf0      	pop	{r4, r5, r6, r7}
 80022b6:	4770      	bx	lr
uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 80022b8:	2300      	movs	r3, #0
	f25519_select(x, minusp, x, (c >> 15) & 1);
}

uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
 80022ba:	461a      	mov	r2, r3
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		sum |= x[i] ^ y[i];
 80022bc:	5cc5      	ldrb	r5, [r0, r3]
 80022be:	5ccc      	ldrb	r4, [r1, r3]
uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 80022c0:	3301      	adds	r3, #1
		sum |= x[i] ^ y[i];
 80022c2:	406c      	eors	r4, r5
uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 80022c4:	2b20      	cmp	r3, #32
		sum |= x[i] ^ y[i];
 80022c6:	ea42 0204 	orr.w	r2, r2, r4
uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 80022ca:	d1f7      	bne.n	80022bc <f25519_eq+0x88>
 80022cc:	e7e8      	b.n	80022a0 <f25519_eq+0x6c>
 80022ce:	bf00      	nop

080022d0 <f25519_select>:
}

void f25519_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
 80022d0:	b4f0      	push	{r4, r5, r6, r7}
 80022d2:	1d04      	adds	r4, r0, #4
 80022d4:	1d0f      	adds	r7, r1, #4
 80022d6:	42b8      	cmp	r0, r7
 80022d8:	bf38      	it	cc
 80022da:	42a1      	cmpcc	r1, r4
 80022dc:	f102 0504 	add.w	r5, r2, #4
 80022e0:	bf34      	ite	cc
 80022e2:	2700      	movcc	r7, #0
 80022e4:	2701      	movcs	r7, #1
 80022e6:	42a8      	cmp	r0, r5
 80022e8:	bf38      	it	cc
 80022ea:	42a2      	cmpcc	r2, r4
 80022ec:	bf34      	ite	cc
 80022ee:	2400      	movcc	r4, #0
 80022f0:	2401      	movcs	r4, #1
	const uint8_t mask = -condition;
 80022f2:	425b      	negs	r3, r3
 80022f4:	4227      	tst	r7, r4
 80022f6:	b2de      	uxtb	r6, r3
 80022f8:	d03f      	beq.n	800237a <f25519_select+0xaa>
 80022fa:	ea41 0302 	orr.w	r3, r1, r2
 80022fe:	4303      	orrs	r3, r0
 8002300:	079b      	lsls	r3, r3, #30
 8002302:	d13a      	bne.n	800237a <f25519_select+0xaa>
 8002304:	2300      	movs	r3, #0
 8002306:	f366 0307 	bfi	r3, r6, #0, #8
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 800230a:	680c      	ldr	r4, [r1, #0]
 800230c:	6815      	ldr	r5, [r2, #0]
 800230e:	f366 230f 	bfi	r3, r6, #8, #8
 8002312:	f366 4317 	bfi	r3, r6, #16, #8
 8002316:	f366 631f 	bfi	r3, r6, #24, #8
 800231a:	4065      	eors	r5, r4
 800231c:	401d      	ands	r5, r3
 800231e:	406c      	eors	r4, r5
 8002320:	6004      	str	r4, [r0, #0]
 8002322:	684c      	ldr	r4, [r1, #4]
 8002324:	6855      	ldr	r5, [r2, #4]
 8002326:	4065      	eors	r5, r4
 8002328:	401d      	ands	r5, r3
 800232a:	406c      	eors	r4, r5
 800232c:	6044      	str	r4, [r0, #4]
 800232e:	688c      	ldr	r4, [r1, #8]
 8002330:	6895      	ldr	r5, [r2, #8]
 8002332:	4065      	eors	r5, r4
 8002334:	401d      	ands	r5, r3
 8002336:	406c      	eors	r4, r5
 8002338:	6084      	str	r4, [r0, #8]
 800233a:	68cc      	ldr	r4, [r1, #12]
 800233c:	68d5      	ldr	r5, [r2, #12]
 800233e:	4065      	eors	r5, r4
 8002340:	401d      	ands	r5, r3
 8002342:	406c      	eors	r4, r5
 8002344:	60c4      	str	r4, [r0, #12]
 8002346:	690c      	ldr	r4, [r1, #16]
 8002348:	6915      	ldr	r5, [r2, #16]
 800234a:	4065      	eors	r5, r4
 800234c:	401d      	ands	r5, r3
 800234e:	406c      	eors	r4, r5
 8002350:	6104      	str	r4, [r0, #16]
 8002352:	694c      	ldr	r4, [r1, #20]
 8002354:	6955      	ldr	r5, [r2, #20]
 8002356:	4065      	eors	r5, r4
 8002358:	401d      	ands	r5, r3
 800235a:	406c      	eors	r4, r5
 800235c:	6144      	str	r4, [r0, #20]
 800235e:	698c      	ldr	r4, [r1, #24]
 8002360:	6995      	ldr	r5, [r2, #24]
 8002362:	4065      	eors	r5, r4
 8002364:	401d      	ands	r5, r3
 8002366:	406c      	eors	r4, r5
 8002368:	6184      	str	r4, [r0, #24]
 800236a:	69c9      	ldr	r1, [r1, #28]
 800236c:	69d2      	ldr	r2, [r2, #28]
}
 800236e:	bcf0      	pop	{r4, r5, r6, r7}
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 8002370:	404a      	eors	r2, r1
 8002372:	4013      	ands	r3, r2
 8002374:	4059      	eors	r1, r3
 8002376:	61c1      	str	r1, [r0, #28]
}
 8002378:	4770      	bx	lr
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 800237a:	2300      	movs	r3, #0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 800237c:	5ccc      	ldrb	r4, [r1, r3]
 800237e:	5cd5      	ldrb	r5, [r2, r3]
 8002380:	4065      	eors	r5, r4
 8002382:	4035      	ands	r5, r6
 8002384:	406c      	eors	r4, r5
 8002386:	54c4      	strb	r4, [r0, r3]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 8002388:	3301      	adds	r3, #1
 800238a:	2b20      	cmp	r3, #32
 800238c:	d1f6      	bne.n	800237c <f25519_select+0xac>
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
}
 800238e:	bcf0      	pop	{r4, r5, r6, r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop

08002394 <f25519_add>:
{
	uint16_t c = 0;
	int i;

	/* Add */
	for (i = 0; i < F25519_SIZE; i++) {
 8002394:	2300      	movs	r3, #0
	for (i = 0; i < F25519_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
}

void f25519_add(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
 8002396:	b470      	push	{r4, r5, r6}
	uint16_t c = 0;
 8002398:	461c      	mov	r4, r3
	int i;

	/* Add */
	for (i = 0; i < F25519_SIZE; i++) {
		c >>= 8;
		c += ((uint16_t)a[i]) + ((uint16_t)b[i]);
 800239a:	5cce      	ldrb	r6, [r1, r3]
 800239c:	5cd5      	ldrb	r5, [r2, r3]
 800239e:	4435      	add	r5, r6
 80023a0:	eb05 2414 	add.w	r4, r5, r4, lsr #8
		r[i] = c;
 80023a4:	54c4      	strb	r4, [r0, r3]
{
	uint16_t c = 0;
	int i;

	/* Add */
	for (i = 0; i < F25519_SIZE; i++) {
 80023a6:	3301      	adds	r3, #1
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d1f6      	bne.n	800239a <f25519_add+0x6>
		r[i] = c;
	}

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
	c = (c >> 7) * 19;
 80023ac:	f3c4 14cf 	ubfx	r4, r4, #7, #16
		c += ((uint16_t)a[i]) + ((uint16_t)b[i]);
		r[i] = c;
	}

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
 80023b0:	7fc3      	ldrb	r3, [r0, #31]
	c = (c >> 7) * 19;
 80023b2:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
		c += ((uint16_t)a[i]) + ((uint16_t)b[i]);
		r[i] = c;
	}

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
 80023b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	c = (c >> 7) * 19;
 80023ba:	eb04 0242 	add.w	r2, r4, r2, lsl #1
		c += ((uint16_t)a[i]) + ((uint16_t)b[i]);
		r[i] = c;
	}

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
 80023be:	77c3      	strb	r3, [r0, #31]
	c = (c >> 7) * 19;
 80023c0:	b292      	uxth	r2, r2

	for (i = 0; i < F25519_SIZE; i++) {
 80023c2:	2300      	movs	r3, #0
		c += r[i];
 80023c4:	5cc1      	ldrb	r1, [r0, r3]
 80023c6:	440a      	add	r2, r1
 80023c8:	b292      	uxth	r2, r2
		r[i] = c;
 80023ca:	54c2      	strb	r2, [r0, r3]

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80023cc:	3301      	adds	r3, #1
 80023ce:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 80023d0:	ea4f 2212 	mov.w	r2, r2, lsr #8

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80023d4:	d1f6      	bne.n	80023c4 <f25519_add+0x30>
		c += r[i];
		r[i] = c;
		c >>= 8;
	}
}
 80023d6:	bc70      	pop	{r4, r5, r6}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop

080023dc <f25519_sub>:

void f25519_sub(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
 80023dc:	b470      	push	{r4, r5, r6}
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 80023de:	2300      	movs	r3, #0
{
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
 80023e0:	24da      	movs	r4, #218	; 0xda
	for (i = 0; i + 1 < F25519_SIZE; i++) {
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
 80023e2:	5ccd      	ldrb	r5, [r1, r3]
 80023e4:	5cd6      	ldrb	r6, [r2, r3]
 80023e6:	f505 457f 	add.w	r5, r5, #65280	; 0xff00
 80023ea:	1bad      	subs	r5, r5, r6
 80023ec:	442c      	add	r4, r5
		r[i] = c;
 80023ee:	54c4      	strb	r4, [r0, r3]
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 80023f0:	3301      	adds	r3, #1
 80023f2:	2b1f      	cmp	r3, #31
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
 80023f4:	ea4f 2414 	mov.w	r4, r4, lsr #8
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 80023f8:	d1f3      	bne.n	80023e2 <f25519_sub+0x6>
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
 80023fa:	7fc9      	ldrb	r1, [r1, #31]
 80023fc:	7fd2      	ldrb	r2, [r2, #31]
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80023fe:	2300      	movs	r3, #0
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
 8002400:	1a8a      	subs	r2, r1, r2
 8002402:	4414      	add	r4, r2
	r[31] = c & 127;
	c = (c >> 7) * 19;
 8002404:	09e2      	lsrs	r2, r4, #7
 8002406:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
 800240a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 800240e:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;
 8002410:	eb02 0241 	add.w	r2, r2, r1, lsl #1

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002414:	5cc1      	ldrb	r1, [r0, r3]
 8002416:	440a      	add	r2, r1
		r[i] = c;
 8002418:	54c2      	strb	r2, [r0, r3]

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800241a:	3301      	adds	r3, #1
 800241c:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 800241e:	ea4f 2212 	mov.w	r2, r2, lsr #8

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002422:	d1f7      	bne.n	8002414 <f25519_sub+0x38>
		c += r[i];
		r[i] = c;
		c >>= 8;
	}
}
 8002424:	bc70      	pop	{r4, r5, r6}
 8002426:	4770      	bx	lr

08002428 <f25519_neg>:

void f25519_neg(uint8_t *r, const uint8_t *a)
{
 8002428:	b410      	push	{r4}
	uint32_t c = 0;
	int i;

	/* Calculate 2p - a, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 800242a:	2300      	movs	r3, #0
{
	uint32_t c = 0;
	int i;

	/* Calculate 2p - a, to avoid underflow */
	c = 218;
 800242c:	22da      	movs	r2, #218	; 0xda
	for (i = 0; i + 1 < F25519_SIZE; i++) {
		c += 65280 - ((uint32_t)a[i]);
 800242e:	5ccc      	ldrb	r4, [r1, r3]
 8002430:	f5c4 447f 	rsb	r4, r4, #65280	; 0xff00
 8002434:	4422      	add	r2, r4
		r[i] = c;
 8002436:	54c2      	strb	r2, [r0, r3]
	uint32_t c = 0;
	int i;

	/* Calculate 2p - a, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 8002438:	3301      	adds	r3, #1
 800243a:	2b1f      	cmp	r3, #31
		c += 65280 - ((uint32_t)a[i]);
		r[i] = c;
		c >>= 8;
 800243c:	ea4f 2212 	mov.w	r2, r2, lsr #8
	uint32_t c = 0;
	int i;

	/* Calculate 2p - a, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 8002440:	d1f5      	bne.n	800242e <f25519_neg+0x6>
		c += 65280 - ((uint32_t)a[i]);
		r[i] = c;
		c >>= 8;
	}

	c -= ((uint32_t)a[31]);
 8002442:	7fc9      	ldrb	r1, [r1, #31]
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002444:	2300      	movs	r3, #0
		c += 65280 - ((uint32_t)a[i]);
		r[i] = c;
		c >>= 8;
	}

	c -= ((uint32_t)a[31]);
 8002446:	1a52      	subs	r2, r2, r1
	r[31] = c & 127;
	c = (c >> 7) * 19;
 8002448:	09d1      	lsrs	r1, r2, #7
		r[i] = c;
		c >>= 8;
	}

	c -= ((uint32_t)a[31]);
	r[31] = c & 127;
 800244a:	f002 047f 	and.w	r4, r2, #127	; 0x7f
	c = (c >> 7) * 19;
 800244e:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
		r[i] = c;
		c >>= 8;
	}

	c -= ((uint32_t)a[31]);
	r[31] = c & 127;
 8002452:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;
 8002454:	eb01 0242 	add.w	r2, r1, r2, lsl #1

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002458:	5cc1      	ldrb	r1, [r0, r3]
 800245a:	440a      	add	r2, r1
		r[i] = c;
 800245c:	54c2      	strb	r2, [r0, r3]

	c -= ((uint32_t)a[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800245e:	3301      	adds	r3, #1
 8002460:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002462:	ea4f 2212 	mov.w	r2, r2, lsr #8

	c -= ((uint32_t)a[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002466:	d1f7      	bne.n	8002458 <f25519_neg+0x30>
		c += r[i];
		r[i] = c;
		c >>= 8;
	}
}
 8002468:	f85d 4b04 	ldr.w	r4, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop

08002470 <f25519_mul__distinct>:

void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
 8002470:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002474:	f04f 0800 	mov.w	r8, #0
	}
}

void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
 8002478:	4643      	mov	r3, r8
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 800247a:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 800247e:	0a1b      	lsrs	r3, r3, #8
 8002480:	eb02 0508 	add.w	r5, r2, r8
		for (j = 0; j <= i; j++)
 8002484:	2400      	movs	r4, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002486:	5d0f      	ldrb	r7, [r1, r4]
 8002488:	f815 6901 	ldrb.w	r6, [r5], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800248c:	3401      	adds	r4, #1
 800248e:	4544      	cmp	r4, r8
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002490:	fb07 3306 	mla	r3, r7, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002494:	ddf7      	ble.n	8002486 <f25519_mul__distinct+0x16>
 8002496:	ea28 75e8 	bic.w	r5, r8, r8, asr #31
 800249a:	1c6c      	adds	r4, r5, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800249c:	2c20      	cmp	r4, #32
 800249e:	d00f      	beq.n	80024c0 <f25519_mul__distinct+0x50>
 80024a0:	ebc5 0608 	rsb	r6, r5, r8
 80024a4:	3620      	adds	r6, #32
 80024a6:	4416      	add	r6, r2
 80024a8:	440d      	add	r5, r1
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80024aa:	f816 7d01 	ldrb.w	r7, [r6, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80024ae:	f815 cf01 	ldrb.w	ip, [r5, #1]!
 80024b2:	fb09 f707 	mul.w	r7, r9, r7

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80024b6:	3401      	adds	r4, #1
 80024b8:	2c20      	cmp	r4, #32
			c += ((uint32_t)a[j]) *
 80024ba:	fb0c 3307 	mla	r3, ip, r7, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80024be:	d1f4      	bne.n	80024aa <f25519_mul__distinct+0x3a>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80024c0:	f800 3008 	strb.w	r3, [r0, r8]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80024c4:	f108 0801 	add.w	r8, r8, #1
 80024c8:	f1b8 0f20 	cmp.w	r8, #32
 80024cc:	d1d7      	bne.n	800247e <f25519_mul__distinct+0xe>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80024ce:	7fc1      	ldrb	r1, [r0, #31]
	c = (c >> 7) * 19;
 80024d0:	09db      	lsrs	r3, r3, #7
 80024d2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80024d6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 80024da:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80024de:	77c1      	strb	r1, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80024e0:	2300      	movs	r3, #0
		c += r[i];
 80024e2:	5cc1      	ldrb	r1, [r0, r3]
 80024e4:	440a      	add	r2, r1
		r[i] = c;
 80024e6:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80024e8:	3301      	adds	r3, #1
 80024ea:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 80024ec:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80024f0:	d1f7      	bne.n	80024e2 <f25519_mul__distinct+0x72>
		c += r[i];
		r[i] = c;
		c >>= 8;
	}
}
 80024f2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80024f6:	4770      	bx	lr

080024f8 <f25519_inv__distinct>:
		c >>= 8;
	}
}

void f25519_inv__distinct(uint8_t *r, const uint8_t *x)
{
 80024f8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80024fc:	2600      	movs	r6, #0
		c >>= 8;
	}
}

void f25519_inv__distinct(uint8_t *r, const uint8_t *x)
{
 80024fe:	b088      	sub	sp, #32
	}
}

void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
 8002500:	4633      	mov	r3, r6
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002502:	f04f 0826 	mov.w	r8, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	1874      	adds	r4, r6, r1
		for (j = 0; j <= i; j++)
 800250a:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800250c:	5c8f      	ldrb	r7, [r1, r2]
 800250e:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002512:	3201      	adds	r2, #1
 8002514:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002516:	fb07 3305 	mla	r3, r7, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800251a:	ddf7      	ble.n	800250c <f25519_inv__distinct+0x14>
 800251c:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
 8002520:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002522:	2a20      	cmp	r2, #32
 8002524:	d00e      	beq.n	8002544 <f25519_inv__distinct+0x4c>
 8002526:	1b35      	subs	r5, r6, r4
 8002528:	3520      	adds	r5, #32
 800252a:	440d      	add	r5, r1
 800252c:	440c      	add	r4, r1
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 800252e:	f815 7d01 	ldrb.w	r7, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002532:	f814 cf01 	ldrb.w	ip, [r4, #1]!
 8002536:	fb08 f707 	mul.w	r7, r8, r7

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800253a:	3201      	adds	r2, #1
 800253c:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 800253e:	fb0c 3307 	mla	r3, ip, r7, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002542:	d1f4      	bne.n	800252e <f25519_inv__distinct+0x36>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002544:	f80d 3006 	strb.w	r3, [sp, r6]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002548:	3601      	adds	r6, #1
 800254a:	2e20      	cmp	r6, #32
 800254c:	d1db      	bne.n	8002506 <f25519_inv__distinct+0xe>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800254e:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002552:	09db      	lsrs	r3, r3, #7
 8002554:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002558:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 800255c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002560:	f88d 401f 	strb.w	r4, [sp, #31]
 8002564:	af08      	add	r7, sp, #32
	c = (c >> 7) * 19;
 8002566:	466b      	mov	r3, sp

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002568:	781c      	ldrb	r4, [r3, #0]
 800256a:	4422      	add	r2, r4
		r[i] = c;
 800256c:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002570:	42bb      	cmp	r3, r7
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002572:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002576:	d1f7      	bne.n	8002568 <f25519_inv__distinct+0x70>
 8002578:	2500      	movs	r5, #0
 800257a:	eb0d 0205 	add.w	r2, sp, r5
 800257e:	462b      	mov	r3, r5
 8002580:	f102 091f 	add.w	r9, r2, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002584:	f04f 0826 	mov.w	r8, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	194c      	adds	r4, r1, r5
		for (j = 0; j <= i; j++)
 800258c:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800258e:	f81d c002 	ldrb.w	ip, [sp, r2]
 8002592:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002596:	3201      	adds	r2, #1
 8002598:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800259a:	fb0c 3306 	mla	r3, ip, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800259e:	ddf6      	ble.n	800258e <f25519_inv__distinct+0x96>
 80025a0:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80025a4:	2a1f      	cmp	r2, #31
 80025a6:	d00e      	beq.n	80025c6 <f25519_inv__distinct+0xce>
 80025a8:	1aac      	subs	r4, r5, r2
 80025aa:	3420      	adds	r4, #32
 80025ac:	ae00      	add	r6, sp, #0
 80025ae:	440c      	add	r4, r1
 80025b0:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80025b2:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80025b6:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 80025ba:	fb08 f606 	mul.w	r6, r8, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80025be:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) *
 80025c0:	fb0c 3306 	mla	r3, ip, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80025c4:	d1f5      	bne.n	80025b2 <f25519_inv__distinct+0xba>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80025c6:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80025c8:	3501      	adds	r5, #1
 80025ca:	2d20      	cmp	r5, #32
 80025cc:	d1dc      	bne.n	8002588 <f25519_inv__distinct+0x90>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80025ce:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 80025d0:	09db      	lsrs	r3, r3, #7
 80025d2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80025d6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 80025da:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80025de:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80025e0:	2300      	movs	r3, #0
		c += r[i];
 80025e2:	5cc4      	ldrb	r4, [r0, r3]
 80025e4:	4422      	add	r2, r4
		r[i] = c;
 80025e6:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80025e8:	3301      	adds	r3, #1
 80025ea:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 80025ec:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80025f0:	d1f7      	bne.n	80025e2 <f25519_inv__distinct+0xea>
 80025f2:	f04f 0cf8 	mov.w	ip, #248	; 0xf8
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80025f6:	2526      	movs	r5, #38	; 0x26
 80025f8:	f10d 061f 	add.w	r6, sp, #31
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80025fc:	f04f 0900 	mov.w	r9, #0
 8002600:	464b      	mov	r3, r9
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	eb09 0400 	add.w	r4, r9, r0
		for (j = 0; j <= i; j++)
 8002608:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800260a:	f810 a002 	ldrb.w	sl, [r0, r2]
 800260e:	f814 8901 	ldrb.w	r8, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002612:	3201      	adds	r2, #1
 8002614:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002616:	fb0a 3308 	mla	r3, sl, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800261a:	ddf6      	ble.n	800260a <f25519_inv__distinct+0x112>
 800261c:	ea29 74e9 	bic.w	r4, r9, r9, asr #31
 8002620:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002622:	2a20      	cmp	r2, #32
 8002624:	d010      	beq.n	8002648 <f25519_inv__distinct+0x150>
 8002626:	ebc4 0809 	rsb	r8, r4, r9
 800262a:	f108 0820 	add.w	r8, r8, #32
 800262e:	4480      	add	r8, r0
 8002630:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002632:	f818 ad01 	ldrb.w	sl, [r8, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002636:	f814 bf01 	ldrb.w	fp, [r4, #1]!
 800263a:	fb05 fa0a 	mul.w	sl, r5, sl

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800263e:	3201      	adds	r2, #1
 8002640:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 8002642:	fb0b 330a 	mla	r3, fp, sl, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002646:	d1f4      	bne.n	8002632 <f25519_inv__distinct+0x13a>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002648:	f80d 3009 	strb.w	r3, [sp, r9]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 800264c:	f109 0901 	add.w	r9, r9, #1
 8002650:	f1b9 0f20 	cmp.w	r9, #32
 8002654:	d1d5      	bne.n	8002602 <f25519_inv__distinct+0x10a>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002656:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 800265a:	09db      	lsrs	r3, r3, #7
 800265c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002660:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002664:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002668:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 800266c:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 800266e:	781c      	ldrb	r4, [r3, #0]
 8002670:	4422      	add	r2, r4
		r[i] = c;
 8002672:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002676:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002678:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800267c:	d1f7      	bne.n	800266e <f25519_inv__distinct+0x176>
 800267e:	f04f 0900 	mov.w	r9, #0
 8002682:	464b      	mov	r3, r9
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002684:	0a1b      	lsrs	r3, r3, #8
 8002686:	eb01 0409 	add.w	r4, r1, r9
		for (j = 0; j <= i; j++)
 800268a:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800268c:	f81d a002 	ldrb.w	sl, [sp, r2]
 8002690:	f814 8901 	ldrb.w	r8, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002694:	3201      	adds	r2, #1
 8002696:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002698:	fb0a 3308 	mla	r3, sl, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800269c:	ddf6      	ble.n	800268c <f25519_inv__distinct+0x194>
 800269e:	ea29 72e9 	bic.w	r2, r9, r9, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80026a2:	2a1f      	cmp	r2, #31
 80026a4:	d010      	beq.n	80026c8 <f25519_inv__distinct+0x1d0>
 80026a6:	ebc2 0409 	rsb	r4, r2, r9
 80026aa:	3420      	adds	r4, #32
 80026ac:	f10d 0800 	add.w	r8, sp, #0
 80026b0:	440c      	add	r4, r1
 80026b2:	4442      	add	r2, r8
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80026b4:	f814 8d01 	ldrb.w	r8, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80026b8:	f812 af01 	ldrb.w	sl, [r2, #1]!
 80026bc:	fb05 f808 	mul.w	r8, r5, r8

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80026c0:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) *
 80026c2:	fb0a 3308 	mla	r3, sl, r8, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80026c6:	d1f5      	bne.n	80026b4 <f25519_inv__distinct+0x1bc>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80026c8:	f800 3009 	strb.w	r3, [r0, r9]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80026cc:	f109 0901 	add.w	r9, r9, #1
 80026d0:	f1b9 0f20 	cmp.w	r9, #32
 80026d4:	d1d6      	bne.n	8002684 <f25519_inv__distinct+0x18c>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80026d6:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 80026d8:	09db      	lsrs	r3, r3, #7
 80026da:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80026de:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 80026e2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80026e6:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80026e8:	2300      	movs	r3, #0
		c += r[i];
 80026ea:	5cc4      	ldrb	r4, [r0, r3]
 80026ec:	4422      	add	r2, r4
		r[i] = c;
 80026ee:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80026f0:	3301      	adds	r3, #1
 80026f2:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 80026f4:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80026f8:	d1f7      	bne.n	80026ea <f25519_inv__distinct+0x1f2>
	/* 1 1 */
	f25519_mul__distinct(s, x, x);
	f25519_mul__distinct(r, s, x);

	/* 1 x 248 */
	for (i = 0; i < 248; i++) {
 80026fa:	f1bc 0c01 	subs.w	ip, ip, #1
 80026fe:	f47f af7d 	bne.w	80025fc <f25519_inv__distinct+0x104>
 8002702:	4663      	mov	r3, ip
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002704:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	eb00 040c 	add.w	r4, r0, ip
		for (j = 0; j <= i; j++)
 800270e:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002710:	5c86      	ldrb	r6, [r0, r2]
 8002712:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002716:	3201      	adds	r2, #1
 8002718:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800271a:	fb06 3305 	mla	r3, r6, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800271e:	ddf7      	ble.n	8002710 <f25519_inv__distinct+0x218>
 8002720:	ea2c 74ec 	bic.w	r4, ip, ip, asr #31
 8002724:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002726:	2a20      	cmp	r2, #32
 8002728:	d00f      	beq.n	800274a <f25519_inv__distinct+0x252>
 800272a:	ebc4 050c 	rsb	r5, r4, ip
 800272e:	3520      	adds	r5, #32
 8002730:	4405      	add	r5, r0
 8002732:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002734:	f815 6d01 	ldrb.w	r6, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002738:	f814 8f01 	ldrb.w	r8, [r4, #1]!
 800273c:	fb09 f606 	mul.w	r6, r9, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002740:	3201      	adds	r2, #1
 8002742:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 8002744:	fb08 3306 	mla	r3, r8, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002748:	d1f4      	bne.n	8002734 <f25519_inv__distinct+0x23c>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 800274a:	f80d 300c 	strb.w	r3, [sp, ip]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 800274e:	f10c 0c01 	add.w	ip, ip, #1
 8002752:	f1bc 0f20 	cmp.w	ip, #32
 8002756:	d1d7      	bne.n	8002708 <f25519_inv__distinct+0x210>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002758:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 800275c:	09db      	lsrs	r3, r3, #7
 800275e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002762:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002766:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800276a:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 800276e:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002770:	781c      	ldrb	r4, [r3, #0]
 8002772:	4422      	add	r2, r4
		r[i] = c;
 8002774:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002778:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 800277a:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800277e:	d1f7      	bne.n	8002770 <f25519_inv__distinct+0x278>
 8002780:	2500      	movs	r5, #0
 8002782:	eb0d 0205 	add.w	r2, sp, r5
 8002786:	462b      	mov	r3, r5
 8002788:	f102 091f 	add.w	r9, r2, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 800278c:	f04f 0826 	mov.w	r8, #38	; 0x26
 8002790:	ac00      	add	r4, sp, #0
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	442c      	add	r4, r5
		for (j = 0; j <= i; j++)
 8002796:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002798:	f81d c002 	ldrb.w	ip, [sp, r2]
 800279c:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80027a0:	3201      	adds	r2, #1
 80027a2:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80027a4:	fb0c 3306 	mla	r3, ip, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80027a8:	ddf6      	ble.n	8002798 <f25519_inv__distinct+0x2a0>
 80027aa:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80027ae:	2a1f      	cmp	r2, #31
 80027b0:	d00e      	beq.n	80027d0 <f25519_inv__distinct+0x2d8>
 80027b2:	1aac      	subs	r4, r5, r2
 80027b4:	ae00      	add	r6, sp, #0
 80027b6:	3420      	adds	r4, #32
 80027b8:	4434      	add	r4, r6
 80027ba:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80027bc:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80027c0:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 80027c4:	fb08 f606 	mul.w	r6, r8, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80027c8:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) *
 80027ca:	fb0c 3306 	mla	r3, ip, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80027ce:	d1f5      	bne.n	80027bc <f25519_inv__distinct+0x2c4>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80027d0:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80027d2:	3501      	adds	r5, #1
 80027d4:	2d20      	cmp	r5, #32
 80027d6:	d1db      	bne.n	8002790 <f25519_inv__distinct+0x298>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80027d8:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 80027da:	09db      	lsrs	r3, r3, #7
 80027dc:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80027e0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 80027e4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80027e8:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80027ea:	2300      	movs	r3, #0
		c += r[i];
 80027ec:	5cc4      	ldrb	r4, [r0, r3]
 80027ee:	4422      	add	r2, r4
		r[i] = c;
 80027f0:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80027f2:	3301      	adds	r3, #1
 80027f4:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 80027f6:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80027fa:	d1f7      	bne.n	80027ec <f25519_inv__distinct+0x2f4>
 80027fc:	2600      	movs	r6, #0
 80027fe:	4633      	mov	r3, r6
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002800:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002804:	0a1b      	lsrs	r3, r3, #8
 8002806:	198c      	adds	r4, r1, r6
		for (j = 0; j <= i; j++)
 8002808:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800280a:	f810 c002 	ldrb.w	ip, [r0, r2]
 800280e:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002812:	3201      	adds	r2, #1
 8002814:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002816:	fb0c 3305 	mla	r3, ip, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800281a:	ddf6      	ble.n	800280a <f25519_inv__distinct+0x312>
 800281c:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
 8002820:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002822:	2a20      	cmp	r2, #32
 8002824:	d00e      	beq.n	8002844 <f25519_inv__distinct+0x34c>
 8002826:	1b35      	subs	r5, r6, r4
 8002828:	3520      	adds	r5, #32
 800282a:	440d      	add	r5, r1
 800282c:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 800282e:	f815 cd01 	ldrb.w	ip, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002832:	f814 8f01 	ldrb.w	r8, [r4, #1]!
 8002836:	fb09 fc0c 	mul.w	ip, r9, ip

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800283a:	3201      	adds	r2, #1
 800283c:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 800283e:	fb08 330c 	mla	r3, r8, ip, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002842:	d1f4      	bne.n	800282e <f25519_inv__distinct+0x336>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002844:	f80d 3006 	strb.w	r3, [sp, r6]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002848:	3601      	adds	r6, #1
 800284a:	2e20      	cmp	r6, #32
 800284c:	d1da      	bne.n	8002804 <f25519_inv__distinct+0x30c>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800284e:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002852:	09db      	lsrs	r3, r3, #7
 8002854:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002858:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 800285c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002860:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002864:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002866:	781c      	ldrb	r4, [r3, #0]
 8002868:	4422      	add	r2, r4
		r[i] = c;
 800286a:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800286e:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002870:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002874:	d1f7      	bne.n	8002866 <f25519_inv__distinct+0x36e>
 8002876:	2500      	movs	r5, #0
 8002878:	eb0d 0805 	add.w	r8, sp, r5
 800287c:	f108 091f 	add.w	r9, r8, #31
 8002880:	462b      	mov	r3, r5
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002882:	f04f 0826 	mov.w	r8, #38	; 0x26
 8002886:	ac00      	add	r4, sp, #0
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002888:	0a1b      	lsrs	r3, r3, #8
 800288a:	442c      	add	r4, r5
		for (j = 0; j <= i; j++)
 800288c:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800288e:	f81d c002 	ldrb.w	ip, [sp, r2]
 8002892:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002896:	3201      	adds	r2, #1
 8002898:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800289a:	fb0c 3306 	mla	r3, ip, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800289e:	ddf6      	ble.n	800288e <f25519_inv__distinct+0x396>
 80028a0:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80028a4:	2a1f      	cmp	r2, #31
 80028a6:	d00e      	beq.n	80028c6 <f25519_inv__distinct+0x3ce>
 80028a8:	1aac      	subs	r4, r5, r2
 80028aa:	ae00      	add	r6, sp, #0
 80028ac:	3420      	adds	r4, #32
 80028ae:	4434      	add	r4, r6
 80028b0:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80028b2:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80028b6:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 80028ba:	fb08 f606 	mul.w	r6, r8, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80028be:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) *
 80028c0:	fb0c 3306 	mla	r3, ip, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80028c4:	d1f5      	bne.n	80028b2 <f25519_inv__distinct+0x3ba>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80028c6:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80028c8:	3501      	adds	r5, #1
 80028ca:	2d20      	cmp	r5, #32
 80028cc:	d1db      	bne.n	8002886 <f25519_inv__distinct+0x38e>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80028ce:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 80028d0:	09db      	lsrs	r3, r3, #7
 80028d2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80028d6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 80028da:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80028de:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80028e0:	2300      	movs	r3, #0
		c += r[i];
 80028e2:	5cc4      	ldrb	r4, [r0, r3]
 80028e4:	4422      	add	r2, r4
		r[i] = c;
 80028e6:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80028e8:	3301      	adds	r3, #1
 80028ea:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 80028ec:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80028f0:	d1f7      	bne.n	80028e2 <f25519_inv__distinct+0x3ea>
 80028f2:	2600      	movs	r6, #0
 80028f4:	4633      	mov	r3, r6
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80028f6:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	1984      	adds	r4, r0, r6
		for (j = 0; j <= i; j++)
 80028fe:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002900:	f810 c002 	ldrb.w	ip, [r0, r2]
 8002904:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002908:	3201      	adds	r2, #1
 800290a:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800290c:	fb0c 3305 	mla	r3, ip, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002910:	ddf6      	ble.n	8002900 <f25519_inv__distinct+0x408>
 8002912:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
 8002916:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002918:	2a20      	cmp	r2, #32
 800291a:	d00e      	beq.n	800293a <f25519_inv__distinct+0x442>
 800291c:	1b35      	subs	r5, r6, r4
 800291e:	3520      	adds	r5, #32
 8002920:	4405      	add	r5, r0
 8002922:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002924:	f815 cd01 	ldrb.w	ip, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002928:	f814 8f01 	ldrb.w	r8, [r4, #1]!
 800292c:	fb09 fc0c 	mul.w	ip, r9, ip

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002930:	3201      	adds	r2, #1
 8002932:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 8002934:	fb08 330c 	mla	r3, r8, ip, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002938:	d1f4      	bne.n	8002924 <f25519_inv__distinct+0x42c>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 800293a:	f80d 3006 	strb.w	r3, [sp, r6]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 800293e:	3601      	adds	r6, #1
 8002940:	2e20      	cmp	r6, #32
 8002942:	d1da      	bne.n	80028fa <f25519_inv__distinct+0x402>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002944:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002948:	09db      	lsrs	r3, r3, #7
 800294a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800294e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002952:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002956:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 800295a:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 800295c:	781c      	ldrb	r4, [r3, #0]
 800295e:	4422      	add	r2, r4
		r[i] = c;
 8002960:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002964:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002966:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800296a:	d1f7      	bne.n	800295c <f25519_inv__distinct+0x464>
 800296c:	2500      	movs	r5, #0
 800296e:	eb0d 0805 	add.w	r8, sp, r5
 8002972:	f108 091f 	add.w	r9, r8, #31
 8002976:	462b      	mov	r3, r5
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002978:	f04f 0826 	mov.w	r8, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	194c      	adds	r4, r1, r5
		for (j = 0; j <= i; j++)
 8002980:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002982:	f81d c002 	ldrb.w	ip, [sp, r2]
 8002986:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800298a:	3201      	adds	r2, #1
 800298c:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800298e:	fb0c 3306 	mla	r3, ip, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002992:	ddf6      	ble.n	8002982 <f25519_inv__distinct+0x48a>
 8002994:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002998:	2a1f      	cmp	r2, #31
 800299a:	d00e      	beq.n	80029ba <f25519_inv__distinct+0x4c2>
 800299c:	1aac      	subs	r4, r5, r2
 800299e:	3420      	adds	r4, #32
 80029a0:	ae00      	add	r6, sp, #0
 80029a2:	440c      	add	r4, r1
 80029a4:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80029a6:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80029aa:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 80029ae:	fb08 f606 	mul.w	r6, r8, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80029b2:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) *
 80029b4:	fb0c 3306 	mla	r3, ip, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80029b8:	d1f5      	bne.n	80029a6 <f25519_inv__distinct+0x4ae>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80029ba:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80029bc:	3501      	adds	r5, #1
 80029be:	2d20      	cmp	r5, #32
 80029c0:	d1dc      	bne.n	800297c <f25519_inv__distinct+0x484>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80029c2:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 80029c4:	09db      	lsrs	r3, r3, #7
 80029c6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80029ca:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 80029ce:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80029d2:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80029d4:	2300      	movs	r3, #0
		c += r[i];
 80029d6:	5cc4      	ldrb	r4, [r0, r3]
 80029d8:	4422      	add	r2, r4
		r[i] = c;
 80029da:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80029dc:	3301      	adds	r3, #1
 80029de:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 80029e0:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80029e4:	d1f7      	bne.n	80029d6 <f25519_inv__distinct+0x4de>
 80029e6:	2600      	movs	r6, #0
 80029e8:	4633      	mov	r3, r6
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80029ea:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	1984      	adds	r4, r0, r6
		for (j = 0; j <= i; j++)
 80029f2:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80029f4:	f810 c002 	ldrb.w	ip, [r0, r2]
 80029f8:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80029fc:	3201      	adds	r2, #1
 80029fe:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002a00:	fb0c 3305 	mla	r3, ip, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002a04:	ddf6      	ble.n	80029f4 <f25519_inv__distinct+0x4fc>
 8002a06:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
 8002a0a:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002a0c:	2a20      	cmp	r2, #32
 8002a0e:	d00e      	beq.n	8002a2e <f25519_inv__distinct+0x536>
 8002a10:	1b35      	subs	r5, r6, r4
 8002a12:	3520      	adds	r5, #32
 8002a14:	4405      	add	r5, r0
 8002a16:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002a18:	f815 cd01 	ldrb.w	ip, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002a1c:	f814 8f01 	ldrb.w	r8, [r4, #1]!
 8002a20:	fb09 fc0c 	mul.w	ip, r9, ip

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002a24:	3201      	adds	r2, #1
 8002a26:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 8002a28:	fb08 330c 	mla	r3, r8, ip, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002a2c:	d1f4      	bne.n	8002a18 <f25519_inv__distinct+0x520>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002a2e:	f80d 3006 	strb.w	r3, [sp, r6]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002a32:	3601      	adds	r6, #1
 8002a34:	2e20      	cmp	r6, #32
 8002a36:	d1da      	bne.n	80029ee <f25519_inv__distinct+0x4f6>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002a38:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002a3c:	09db      	lsrs	r3, r3, #7
 8002a3e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002a42:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002a46:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002a4a:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002a4e:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002a50:	781c      	ldrb	r4, [r3, #0]
 8002a52:	4422      	add	r2, r4
		r[i] = c;
 8002a54:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002a58:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002a5a:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002a5e:	d1f7      	bne.n	8002a50 <f25519_inv__distinct+0x558>
 8002a60:	2500      	movs	r5, #0
 8002a62:	eb0d 0205 	add.w	r2, sp, r5
 8002a66:	462b      	mov	r3, r5
 8002a68:	f102 081f 	add.w	r8, r2, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002a6c:	f04f 0c26 	mov.w	ip, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002a70:	0a1b      	lsrs	r3, r3, #8
 8002a72:	194c      	adds	r4, r1, r5
		for (j = 0; j <= i; j++)
 8002a74:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002a76:	f81d 7002 	ldrb.w	r7, [sp, r2]
 8002a7a:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002a7e:	3201      	adds	r2, #1
 8002a80:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002a82:	fb07 3306 	mla	r3, r7, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002a86:	ddf6      	ble.n	8002a76 <f25519_inv__distinct+0x57e>
 8002a88:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002a8c:	2a1f      	cmp	r2, #31
 8002a8e:	d00e      	beq.n	8002aae <f25519_inv__distinct+0x5b6>
 8002a90:	1aac      	subs	r4, r5, r2
 8002a92:	3420      	adds	r4, #32
 8002a94:	ae00      	add	r6, sp, #0
 8002a96:	440c      	add	r4, r1
 8002a98:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002a9a:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002a9e:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8002aa2:	fb0c f606 	mul.w	r6, ip, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002aa6:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002aa8:	fb07 3306 	mla	r3, r7, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002aac:	d1f5      	bne.n	8002a9a <f25519_inv__distinct+0x5a2>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002aae:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002ab0:	3501      	adds	r5, #1
 8002ab2:	2d20      	cmp	r5, #32
 8002ab4:	d1dc      	bne.n	8002a70 <f25519_inv__distinct+0x578>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002ab6:	7fc1      	ldrb	r1, [r0, #31]
	c = (c >> 7) * 19;
 8002ab8:	09db      	lsrs	r3, r3, #7
 8002aba:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002abe:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002ac2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002ac6:	77c1      	strb	r1, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002ac8:	2300      	movs	r3, #0
		c += r[i];
 8002aca:	5cc1      	ldrb	r1, [r0, r3]
 8002acc:	440a      	add	r2, r1
		r[i] = c;
 8002ace:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002ad4:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002ad8:	d1f7      	bne.n	8002aca <f25519_inv__distinct+0x5d2>
	f25519_mul__distinct(r, s, x);

	/* 1 */
	f25519_mul__distinct(s, r, r);
	f25519_mul__distinct(r, s, x);
}
 8002ada:	b008      	add	sp, #32
 8002adc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop

08002ae4 <f25519_sqrt>:
	f25519_mul__distinct(s, r, r);
	f25519_mul__distinct(r, s, x);
}

void f25519_sqrt(uint8_t *r, const uint8_t *a)
{
 8002ae4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
void f25519_mul_c(uint8_t *r, const uint8_t *a, uint32_t b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002ae8:	2300      	movs	r3, #0
	f25519_mul__distinct(s, r, r);
	f25519_mul__distinct(r, s, x);
}

void f25519_sqrt(uint8_t *r, const uint8_t *a)
{
 8002aea:	b0a4      	sub	sp, #144	; 0x90
 8002aec:	9002      	str	r0, [sp, #8]
 8002aee:	9103      	str	r1, [sp, #12]
	f25519_copy(r, tmp);
}

void f25519_mul_c(uint8_t *r, const uint8_t *a, uint32_t b)
{
	uint32_t c = 0;
 8002af0:	461a      	mov	r2, r3
 8002af2:	ae14      	add	r6, sp, #80	; 0x50
 8002af4:	4608      	mov	r0, r1
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		c >>= 8;
		c += b * ((uint32_t)a[i]);
 8002af6:	5cc1      	ldrb	r1, [r0, r3]
 8002af8:	0049      	lsls	r1, r1, #1
 8002afa:	eb01 2212 	add.w	r2, r1, r2, lsr #8
		r[i] = c;
 8002afe:	54f2      	strb	r2, [r6, r3]
void f25519_mul_c(uint8_t *r, const uint8_t *a, uint32_t b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002b00:	3301      	adds	r3, #1
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d1f7      	bne.n	8002af6 <f25519_sqrt+0x12>
		c >>= 8;
		c += b * ((uint32_t)a[i]);
		r[i] = c;
	}

	r[31] &= 127;
 8002b06:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
	c >>= 7;
 8002b0a:	09d2      	lsrs	r2, r2, #7
		c >>= 8;
		c += b * ((uint32_t)a[i]);
		r[i] = c;
	}

	r[31] &= 127;
 8002b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	c >>= 7;
	c *= 19;
 8002b10:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
		c >>= 8;
		c += b * ((uint32_t)a[i]);
		r[i] = c;
	}

	r[31] &= 127;
 8002b14:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
	c >>= 7;
	c *= 19;
 8002b18:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8002b1c:	a81c      	add	r0, sp, #112	; 0x70
 8002b1e:	4633      	mov	r3, r6

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002b20:	7819      	ldrb	r1, [r3, #0]
 8002b22:	440a      	add	r2, r1
		r[i] = c;
 8002b24:	f803 2b01 	strb.w	r2, [r3], #1

	r[31] &= 127;
	c >>= 7;
	c *= 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002b28:	4283      	cmp	r3, r0
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002b2a:	ea4f 2212 	mov.w	r2, r2, lsr #8

	r[31] &= 127;
	c >>= 7;
	c *= 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002b2e:	d1f7      	bne.n	8002b20 <f25519_sqrt+0x3c>
 8002b30:	2400      	movs	r4, #0
 8002b32:	4623      	mov	r3, r4
 8002b34:	f106 0c1f 	add.w	ip, r6, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002b38:	2726      	movs	r7, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	1931      	adds	r1, r6, r4
		for (j = 0; j <= i; j++)
 8002b3e:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002b40:	f816 8002 	ldrb.w	r8, [r6, r2]
 8002b44:	f811 5901 	ldrb.w	r5, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002b48:	3201      	adds	r2, #1
 8002b4a:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002b4c:	fb08 3305 	mla	r3, r8, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002b50:	ddf6      	ble.n	8002b40 <f25519_sqrt+0x5c>
 8002b52:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002b56:	2a1f      	cmp	r2, #31
 8002b58:	d00d      	beq.n	8002b76 <f25519_sqrt+0x92>
 8002b5a:	1aa1      	subs	r1, r4, r2
 8002b5c:	3120      	adds	r1, #32
 8002b5e:	4431      	add	r1, r6
 8002b60:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002b62:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002b66:	f812 8f01 	ldrb.w	r8, [r2, #1]!
 8002b6a:	fb07 f505 	mul.w	r5, r7, r5

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002b6e:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) *
 8002b70:	fb08 3305 	mla	r3, r8, r5, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002b74:	d1f5      	bne.n	8002b62 <f25519_sqrt+0x7e>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002b76:	a904      	add	r1, sp, #16
 8002b78:	550b      	strb	r3, [r1, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002b7a:	3401      	adds	r4, #1
 8002b7c:	2c20      	cmp	r4, #32
 8002b7e:	d1dc      	bne.n	8002b3a <f25519_sqrt+0x56>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002b80:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002b84:	09db      	lsrs	r3, r3, #7
 8002b86:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002b8a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002b8e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002b92:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8002b96:	af0c      	add	r7, sp, #48	; 0x30
	c = (c >> 7) * 19;
 8002b98:	ab04      	add	r3, sp, #16

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002b9a:	7819      	ldrb	r1, [r3, #0]
 8002b9c:	440a      	add	r2, r1
		r[i] = c;
 8002b9e:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002ba2:	42bb      	cmp	r3, r7
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002ba4:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002ba8:	d1f7      	bne.n	8002b9a <f25519_sqrt+0xb6>
 8002baa:	2400      	movs	r4, #0
 8002bac:	4623      	mov	r3, r4
 8002bae:	f10d 0c2f 	add.w	ip, sp, #47	; 0x2f
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002bb2:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002bb4:	0a1b      	lsrs	r3, r3, #8
 8002bb6:	1931      	adds	r1, r6, r4
		for (j = 0; j <= i; j++)
 8002bb8:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002bba:	f10d 0a10 	add.w	sl, sp, #16
 8002bbe:	f81a 9002 	ldrb.w	r9, [sl, r2]
 8002bc2:	f811 8901 	ldrb.w	r8, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002bc6:	3201      	adds	r2, #1
 8002bc8:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002bca:	fb09 3308 	mla	r3, r9, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002bce:	ddf4      	ble.n	8002bba <f25519_sqrt+0xd6>
 8002bd0:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002bd4:	2a1f      	cmp	r2, #31
 8002bd6:	d00d      	beq.n	8002bf4 <f25519_sqrt+0x110>
 8002bd8:	1aa1      	subs	r1, r4, r2
 8002bda:	3120      	adds	r1, #32
 8002bdc:	4431      	add	r1, r6
 8002bde:	4452      	add	r2, sl
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002be0:	f811 8d01 	ldrb.w	r8, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002be4:	f812 9f01 	ldrb.w	r9, [r2, #1]!
 8002be8:	fb05 f808 	mul.w	r8, r5, r8

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002bec:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) *
 8002bee:	fb09 3308 	mla	r3, r9, r8, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002bf2:	d1f5      	bne.n	8002be0 <f25519_sqrt+0xfc>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002bf4:	5503      	strb	r3, [r0, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002bf6:	3401      	adds	r4, #1
 8002bf8:	2c20      	cmp	r4, #32
 8002bfa:	d1db      	bne.n	8002bb4 <f25519_sqrt+0xd0>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002bfc:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002c00:	09db      	lsrs	r3, r3, #7
 8002c02:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002c06:	f10d 0b90 	add.w	fp, sp, #144	; 0x90
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002c0a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002c0e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002c12:	f88d 108f 	strb.w	r1, [sp, #143]	; 0x8f
 8002c16:	f8cd b000 	str.w	fp, [sp]
	c = (c >> 7) * 19;
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	46dc      	mov	ip, fp

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002c1e:	7819      	ldrb	r1, [r3, #0]
 8002c20:	440a      	add	r2, r1
		r[i] = c;
 8002c22:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002c26:	4563      	cmp	r3, ip
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002c28:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002c2c:	d1f7      	bne.n	8002c1e <f25519_sqrt+0x13a>
 8002c2e:	21f8      	movs	r1, #248	; 0xf8
 8002c30:	9101      	str	r1, [sp, #4]
 8002c32:	f100 051f 	add.w	r5, r0, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002c36:	2126      	movs	r1, #38	; 0x26
 8002c38:	f10d 042f 	add.w	r4, sp, #47	; 0x2f

		r[i] = c;
	}

	r[31] &= 127;
	c = (c >> 7) * 19;
 8002c3c:	f04f 0900 	mov.w	r9, #0
 8002c40:	464b      	mov	r3, r9
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002c42:	0a1b      	lsrs	r3, r3, #8
 8002c44:	eb00 0809 	add.w	r8, r0, r9
		for (j = 0; j <= i; j++)
 8002c48:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002c4a:	f810 b002 	ldrb.w	fp, [r0, r2]
 8002c4e:	f818 a901 	ldrb.w	sl, [r8], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002c52:	3201      	adds	r2, #1
 8002c54:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002c56:	fb0b 330a 	mla	r3, fp, sl, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002c5a:	ddf6      	ble.n	8002c4a <f25519_sqrt+0x166>
 8002c5c:	ea29 72e9 	bic.w	r2, r9, r9, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002c60:	2a1f      	cmp	r2, #31
 8002c62:	d00f      	beq.n	8002c84 <f25519_sqrt+0x1a0>
 8002c64:	ebc2 0809 	rsb	r8, r2, r9
 8002c68:	f108 0820 	add.w	r8, r8, #32
 8002c6c:	4480      	add	r8, r0
 8002c6e:	4402      	add	r2, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002c70:	f818 ad01 	ldrb.w	sl, [r8, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002c74:	f812 bf01 	ldrb.w	fp, [r2, #1]!
 8002c78:	fb01 fa0a 	mul.w	sl, r1, sl

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002c7c:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) *
 8002c7e:	fb0b 330a 	mla	r3, fp, sl, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002c82:	d1f5      	bne.n	8002c70 <f25519_sqrt+0x18c>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002c84:	f10d 0810 	add.w	r8, sp, #16
 8002c88:	f808 3009 	strb.w	r3, [r8, r9]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002c8c:	f109 0901 	add.w	r9, r9, #1
 8002c90:	f1b9 0f20 	cmp.w	r9, #32
 8002c94:	d1d5      	bne.n	8002c42 <f25519_sqrt+0x15e>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002c96:	f89d 802f 	ldrb.w	r8, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002c9a:	09db      	lsrs	r3, r3, #7
 8002c9c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002ca0:	f008 087f 	and.w	r8, r8, #127	; 0x7f
	c = (c >> 7) * 19;
 8002ca4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002ca8:	f88d 802f 	strb.w	r8, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002cac:	ab04      	add	r3, sp, #16

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002cae:	f893 8000 	ldrb.w	r8, [r3]
 8002cb2:	4442      	add	r2, r8
		r[i] = c;
 8002cb4:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002cb8:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002cba:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002cbe:	d1f6      	bne.n	8002cae <f25519_sqrt+0x1ca>
 8002cc0:	f04f 0900 	mov.w	r9, #0
 8002cc4:	464b      	mov	r3, r9
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	eb06 0809 	add.w	r8, r6, r9
		for (j = 0; j <= i; j++)
 8002ccc:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002cce:	f10d 0c10 	add.w	ip, sp, #16
 8002cd2:	f81c b002 	ldrb.w	fp, [ip, r2]
 8002cd6:	f818 a901 	ldrb.w	sl, [r8], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002cda:	3201      	adds	r2, #1
 8002cdc:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002cde:	fb0b 330a 	mla	r3, fp, sl, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002ce2:	ddf4      	ble.n	8002cce <f25519_sqrt+0x1ea>
 8002ce4:	ea29 72e9 	bic.w	r2, r9, r9, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002ce8:	2a1f      	cmp	r2, #31
 8002cea:	d00f      	beq.n	8002d0c <f25519_sqrt+0x228>
 8002cec:	ebc2 0809 	rsb	r8, r2, r9
 8002cf0:	f108 0820 	add.w	r8, r8, #32
 8002cf4:	44b0      	add	r8, r6
 8002cf6:	4462      	add	r2, ip
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002cf8:	f818 ad01 	ldrb.w	sl, [r8, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002cfc:	f812 bf01 	ldrb.w	fp, [r2, #1]!
 8002d00:	fb01 fa0a 	mul.w	sl, r1, sl

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002d04:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) *
 8002d06:	fb0b 330a 	mla	r3, fp, sl, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002d0a:	d1f5      	bne.n	8002cf8 <f25519_sqrt+0x214>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002d0c:	f800 3009 	strb.w	r3, [r0, r9]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002d10:	f109 0901 	add.w	r9, r9, #1
 8002d14:	f1b9 0f20 	cmp.w	r9, #32
 8002d18:	d1d5      	bne.n	8002cc6 <f25519_sqrt+0x1e2>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002d1a:	f89d 808f 	ldrb.w	r8, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002d1e:	09db      	lsrs	r3, r3, #7
 8002d20:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002d24:	f008 087f 	and.w	r8, r8, #127	; 0x7f
	c = (c >> 7) * 19;
 8002d28:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002d2c:	f88d 808f 	strb.w	r8, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002d30:	4603      	mov	r3, r0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002d32:	f893 8000 	ldrb.w	r8, [r3]
 8002d36:	4442      	add	r2, r8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002d38:	f8dd 8000 	ldr.w	r8, [sp]
		c += r[i];
		r[i] = c;
 8002d3c:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002d40:	4598      	cmp	r8, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002d42:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002d46:	d1f4      	bne.n	8002d32 <f25519_sqrt+0x24e>
	/* 1 1 */
	f25519_mul__distinct(r, x, x);
	f25519_mul__distinct(s, r, x);

	/* 1 x 248 */
	for (i = 0; i < 248; i++) {
 8002d48:	9a01      	ldr	r2, [sp, #4]
 8002d4a:	3a01      	subs	r2, #1
 8002d4c:	9201      	str	r2, [sp, #4]
 8002d4e:	f47f af75 	bne.w	8002c3c <f25519_sqrt+0x158>
 8002d52:	4614      	mov	r4, r2
 8002d54:	4613      	mov	r3, r2
 8002d56:	f100 081f 	add.w	r8, r0, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002d5a:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002d5c:	0a1b      	lsrs	r3, r3, #8
 8002d5e:	1901      	adds	r1, r0, r4
		for (j = 0; j <= i; j++)
 8002d60:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002d62:	f810 a002 	ldrb.w	sl, [r0, r2]
 8002d66:	f811 9901 	ldrb.w	r9, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002d6a:	3201      	adds	r2, #1
 8002d6c:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002d6e:	fb0a 3309 	mla	r3, sl, r9, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002d72:	ddf6      	ble.n	8002d62 <f25519_sqrt+0x27e>
 8002d74:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002d78:	2a1f      	cmp	r2, #31
 8002d7a:	d00d      	beq.n	8002d98 <f25519_sqrt+0x2b4>
 8002d7c:	1aa1      	subs	r1, r4, r2
 8002d7e:	3120      	adds	r1, #32
 8002d80:	4401      	add	r1, r0
 8002d82:	4402      	add	r2, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002d84:	f811 9d01 	ldrb.w	r9, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002d88:	f812 af01 	ldrb.w	sl, [r2, #1]!
 8002d8c:	fb05 f909 	mul.w	r9, r5, r9

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002d90:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002d92:	fb0a 3309 	mla	r3, sl, r9, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002d96:	d1f5      	bne.n	8002d84 <f25519_sqrt+0x2a0>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002d98:	f10d 0a10 	add.w	sl, sp, #16
 8002d9c:	f80a 3004 	strb.w	r3, [sl, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002da0:	3401      	adds	r4, #1
 8002da2:	2c20      	cmp	r4, #32
 8002da4:	d1da      	bne.n	8002d5c <f25519_sqrt+0x278>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002da6:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002daa:	09db      	lsrs	r3, r3, #7
 8002dac:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002db0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002db4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002db8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002dbc:	4653      	mov	r3, sl

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002dbe:	7819      	ldrb	r1, [r3, #0]
 8002dc0:	440a      	add	r2, r1
		r[i] = c;
 8002dc2:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002dc6:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002dc8:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002dcc:	d1f7      	bne.n	8002dbe <f25519_sqrt+0x2da>
 8002dce:	2400      	movs	r4, #0
 8002dd0:	4623      	mov	r3, r4
 8002dd2:	f10d 082f 	add.w	r8, sp, #47	; 0x2f
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002dd6:	2526      	movs	r5, #38	; 0x26
 8002dd8:	a904      	add	r1, sp, #16
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	4421      	add	r1, r4
		for (j = 0; j <= i; j++)
 8002dde:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002de0:	f10d 0c10 	add.w	ip, sp, #16
 8002de4:	f81c a002 	ldrb.w	sl, [ip, r2]
 8002de8:	f811 9901 	ldrb.w	r9, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002dec:	3201      	adds	r2, #1
 8002dee:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002df0:	fb0a 3309 	mla	r3, sl, r9, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002df4:	ddf4      	ble.n	8002de0 <f25519_sqrt+0x2fc>
 8002df6:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002dfa:	2a1f      	cmp	r2, #31
 8002dfc:	d00d      	beq.n	8002e1a <f25519_sqrt+0x336>
 8002dfe:	1aa1      	subs	r1, r4, r2
 8002e00:	3120      	adds	r1, #32
 8002e02:	4461      	add	r1, ip
 8002e04:	4462      	add	r2, ip
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002e06:	f811 9d01 	ldrb.w	r9, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002e0a:	f812 af01 	ldrb.w	sl, [r2, #1]!
 8002e0e:	fb05 f909 	mul.w	r9, r5, r9

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002e12:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002e14:	fb0a 3309 	mla	r3, sl, r9, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002e18:	d1f5      	bne.n	8002e06 <f25519_sqrt+0x322>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002e1a:	5503      	strb	r3, [r0, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002e1c:	3401      	adds	r4, #1
 8002e1e:	2c20      	cmp	r4, #32
 8002e20:	d1da      	bne.n	8002dd8 <f25519_sqrt+0x2f4>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002e22:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002e26:	09db      	lsrs	r3, r3, #7
 8002e28:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002e2c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002e30:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002e34:	f88d 108f 	strb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002e38:	4603      	mov	r3, r0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002e3a:	7819      	ldrb	r1, [r3, #0]
 8002e3c:	440a      	add	r2, r1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002e3e:	9900      	ldr	r1, [sp, #0]
		c += r[i];
		r[i] = c;
 8002e40:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002e44:	4299      	cmp	r1, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002e46:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002e4a:	d1f6      	bne.n	8002e3a <f25519_sqrt+0x356>
 8002e4c:	2400      	movs	r4, #0
 8002e4e:	4623      	mov	r3, r4
 8002e50:	f100 081f 	add.w	r8, r0, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002e54:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002e56:	0a1b      	lsrs	r3, r3, #8
 8002e58:	1931      	adds	r1, r6, r4
		for (j = 0; j <= i; j++)
 8002e5a:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002e5c:	f810 a002 	ldrb.w	sl, [r0, r2]
 8002e60:	f811 9901 	ldrb.w	r9, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002e64:	3201      	adds	r2, #1
 8002e66:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002e68:	fb0a 3309 	mla	r3, sl, r9, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002e6c:	ddf6      	ble.n	8002e5c <f25519_sqrt+0x378>
 8002e6e:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002e72:	2a1f      	cmp	r2, #31
 8002e74:	d00d      	beq.n	8002e92 <f25519_sqrt+0x3ae>
 8002e76:	1aa1      	subs	r1, r4, r2
 8002e78:	3120      	adds	r1, #32
 8002e7a:	4431      	add	r1, r6
 8002e7c:	4402      	add	r2, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002e7e:	f811 9d01 	ldrb.w	r9, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002e82:	f812 af01 	ldrb.w	sl, [r2, #1]!
 8002e86:	fb05 f909 	mul.w	r9, r5, r9

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002e8a:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002e8c:	fb0a 3309 	mla	r3, sl, r9, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002e90:	d1f5      	bne.n	8002e7e <f25519_sqrt+0x39a>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002e92:	aa04      	add	r2, sp, #16
 8002e94:	5513      	strb	r3, [r2, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002e96:	3401      	adds	r4, #1
 8002e98:	2c20      	cmp	r4, #32
 8002e9a:	d1dc      	bne.n	8002e56 <f25519_sqrt+0x372>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002e9c:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002ea0:	09db      	lsrs	r3, r3, #7
 8002ea2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002ea6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002eaa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002eae:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002eb2:	ab04      	add	r3, sp, #16

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002eb4:	7819      	ldrb	r1, [r3, #0]
 8002eb6:	440a      	add	r2, r1
		r[i] = c;
 8002eb8:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002ebc:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002ebe:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002ec2:	d1f7      	bne.n	8002eb4 <f25519_sqrt+0x3d0>
 8002ec4:	2400      	movs	r4, #0
 8002ec6:	4623      	mov	r3, r4
 8002ec8:	f10d 082f 	add.w	r8, sp, #47	; 0x2f
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002ecc:	2526      	movs	r5, #38	; 0x26
 8002ece:	a904      	add	r1, sp, #16
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002ed0:	0a1b      	lsrs	r3, r3, #8
 8002ed2:	4421      	add	r1, r4
		for (j = 0; j <= i; j++)
 8002ed4:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002ed6:	f10d 0b10 	add.w	fp, sp, #16
 8002eda:	f81b a002 	ldrb.w	sl, [fp, r2]
 8002ede:	f811 9901 	ldrb.w	r9, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002ee2:	3201      	adds	r2, #1
 8002ee4:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002ee6:	fb0a 3309 	mla	r3, sl, r9, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002eea:	ddf4      	ble.n	8002ed6 <f25519_sqrt+0x3f2>
 8002eec:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002ef0:	2a1f      	cmp	r2, #31
 8002ef2:	d00d      	beq.n	8002f10 <f25519_sqrt+0x42c>
 8002ef4:	1aa1      	subs	r1, r4, r2
 8002ef6:	3120      	adds	r1, #32
 8002ef8:	4459      	add	r1, fp
 8002efa:	445a      	add	r2, fp
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002efc:	f811 9d01 	ldrb.w	r9, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002f00:	f812 af01 	ldrb.w	sl, [r2, #1]!
 8002f04:	fb05 f909 	mul.w	r9, r5, r9

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f08:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002f0a:	fb0a 3309 	mla	r3, sl, r9, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f0e:	d1f5      	bne.n	8002efc <f25519_sqrt+0x418>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002f10:	5503      	strb	r3, [r0, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002f12:	3401      	adds	r4, #1
 8002f14:	2c20      	cmp	r4, #32
 8002f16:	d1da      	bne.n	8002ece <f25519_sqrt+0x3ea>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002f18:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002f1c:	09db      	lsrs	r3, r3, #7
 8002f1e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002f22:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002f26:	f8dd c000 	ldr.w	ip, [sp]
	c = (c >> 7) * 19;
 8002f2a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002f2e:	f88d 108f 	strb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002f32:	4603      	mov	r3, r0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002f34:	7819      	ldrb	r1, [r3, #0]
 8002f36:	440a      	add	r2, r1
		r[i] = c;
 8002f38:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002f3c:	459c      	cmp	ip, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002f3e:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002f42:	d1f7      	bne.n	8002f34 <f25519_sqrt+0x450>
 8002f44:	2400      	movs	r4, #0
 8002f46:	4623      	mov	r3, r4
 8002f48:	f106 0c1f 	add.w	ip, r6, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002f4c:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002f4e:	0a1b      	lsrs	r3, r3, #8
 8002f50:	1901      	adds	r1, r0, r4
		for (j = 0; j <= i; j++)
 8002f52:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002f54:	f816 9002 	ldrb.w	r9, [r6, r2]
 8002f58:	f811 8901 	ldrb.w	r8, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002f5c:	3201      	adds	r2, #1
 8002f5e:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002f60:	fb09 3308 	mla	r3, r9, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002f64:	ddf6      	ble.n	8002f54 <f25519_sqrt+0x470>
 8002f66:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	d00d      	beq.n	8002f8a <f25519_sqrt+0x4a6>
 8002f6e:	1aa1      	subs	r1, r4, r2
 8002f70:	3120      	adds	r1, #32
 8002f72:	4401      	add	r1, r0
 8002f74:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002f76:	f811 8d01 	ldrb.w	r8, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002f7a:	f812 9f01 	ldrb.w	r9, [r2, #1]!
 8002f7e:	fb05 f808 	mul.w	r8, r5, r8

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f82:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) *
 8002f84:	fb09 3308 	mla	r3, r9, r8, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f88:	d1f5      	bne.n	8002f76 <f25519_sqrt+0x492>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002f8a:	553b      	strb	r3, [r7, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002f8c:	3401      	adds	r4, #1
 8002f8e:	2c20      	cmp	r4, #32
 8002f90:	d1dd      	bne.n	8002f4e <f25519_sqrt+0x46a>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002f92:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
	c = (c >> 7) * 19;
 8002f96:	09db      	lsrs	r3, r3, #7
 8002f98:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002f9c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002fa0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002fa4:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
	c = (c >> 7) * 19;
 8002fa8:	463b      	mov	r3, r7

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002faa:	7819      	ldrb	r1, [r3, #0]
 8002fac:	440a      	add	r2, r1
		r[i] = c;
 8002fae:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002fb2:	42b3      	cmp	r3, r6
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002fb4:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002fb8:	d1f7      	bne.n	8002faa <f25519_sqrt+0x4c6>
 8002fba:	2300      	movs	r3, #0
void f25519_load(uint8_t *x, uint32_t c)
{
	int i;

	for (i = 0; i < sizeof(c); i++) {
		x[i] = c;
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	921c      	str	r2, [sp, #112]	; 0x70
 8002fc0:	931d      	str	r3, [sp, #116]	; 0x74
 8002fc2:	931e      	str	r3, [sp, #120]	; 0x78
 8002fc4:	931f      	str	r3, [sp, #124]	; 0x7c
 8002fc6:	9320      	str	r3, [sp, #128]	; 0x80
 8002fc8:	9321      	str	r3, [sp, #132]	; 0x84
 8002fca:	9322      	str	r3, [sp, #136]	; 0x88
 8002fcc:	9323      	str	r3, [sp, #140]	; 0x8c
 8002fce:	22da      	movs	r2, #218	; 0xda
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
 8002fd0:	5cfc      	ldrb	r4, [r7, r3]
 8002fd2:	5cc1      	ldrb	r1, [r0, r3]
 8002fd4:	f504 447f 	add.w	r4, r4, #65280	; 0xff00
 8002fd8:	1a61      	subs	r1, r4, r1
 8002fda:	440a      	add	r2, r1
		r[i] = c;
 8002fdc:	54fa      	strb	r2, [r7, r3]
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 8002fde:	3301      	adds	r3, #1
 8002fe0:	2b1f      	cmp	r3, #31
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
 8002fe2:	ea4f 2212 	mov.w	r2, r2, lsr #8
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 8002fe6:	d1f3      	bne.n	8002fd0 <f25519_sqrt+0x4ec>
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
 8002fe8:	f89d 404f 	ldrb.w	r4, [sp, #79]	; 0x4f
 8002fec:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
	r[31] = c & 127;
	c = (c >> 7) * 19;
 8002ff0:	463b      	mov	r3, r7
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
 8002ff2:	1a61      	subs	r1, r4, r1
 8002ff4:	4411      	add	r1, r2
	r[31] = c & 127;
	c = (c >> 7) * 19;
 8002ff6:	09ca      	lsrs	r2, r1, #7
 8002ff8:	eb02 04c2 	add.w	r4, r2, r2, lsl #3
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
 8002ffc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003000:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
	c = (c >> 7) * 19;
 8003004:	eb02 0244 	add.w	r2, r2, r4, lsl #1

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8003008:	7819      	ldrb	r1, [r3, #0]
 800300a:	440a      	add	r2, r1
		r[i] = c;
 800300c:	f803 2b01 	strb.w	r2, [r3], #1

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8003010:	429e      	cmp	r6, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8003012:	ea4f 2212 	mov.w	r2, r2, lsr #8

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8003016:	d1f7      	bne.n	8003008 <f25519_sqrt+0x524>
 8003018:	2400      	movs	r4, #0
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 800301a:	f8dd 900c 	ldr.w	r9, [sp, #12]

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800301e:	4623      	mov	r3, r4
 8003020:	f10d 0c2f 	add.w	ip, sp, #47	; 0x2f
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8003024:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	eb09 0104 	add.w	r1, r9, r4
		for (j = 0; j <= i; j++)
 800302c:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800302e:	f10d 0b10 	add.w	fp, sp, #16
 8003032:	f81b a002 	ldrb.w	sl, [fp, r2]
 8003036:	f811 8901 	ldrb.w	r8, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800303a:	3201      	adds	r2, #1
 800303c:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800303e:	fb0a 3308 	mla	r3, sl, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8003042:	ddf4      	ble.n	800302e <f25519_sqrt+0x54a>
 8003044:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8003048:	2a1f      	cmp	r2, #31
 800304a:	d00d      	beq.n	8003068 <f25519_sqrt+0x584>
 800304c:	1aa1      	subs	r1, r4, r2
 800304e:	3120      	adds	r1, #32
 8003050:	4449      	add	r1, r9
 8003052:	445a      	add	r2, fp
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8003054:	f811 8d01 	ldrb.w	r8, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8003058:	f812 af01 	ldrb.w	sl, [r2, #1]!
 800305c:	fb05 f808 	mul.w	r8, r5, r8

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8003060:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) *
 8003062:	fb0a 3308 	mla	r3, sl, r8, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8003066:	d1f5      	bne.n	8003054 <f25519_sqrt+0x570>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8003068:	5533      	strb	r3, [r6, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 800306a:	3401      	adds	r4, #1
 800306c:	2c20      	cmp	r4, #32
 800306e:	d1da      	bne.n	8003026 <f25519_sqrt+0x542>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8003070:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
	c = (c >> 7) * 19;
 8003074:	09db      	lsrs	r3, r3, #7
 8003076:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800307a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 800307e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8003082:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
	c = (c >> 7) * 19;
 8003086:	4633      	mov	r3, r6

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8003088:	7819      	ldrb	r1, [r3, #0]
 800308a:	440a      	add	r2, r1
		r[i] = c;
 800308c:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8003090:	4298      	cmp	r0, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8003092:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8003096:	d1f7      	bne.n	8003088 <f25519_sqrt+0x5a4>
 8003098:	2000      	movs	r0, #0
 800309a:	4603      	mov	r3, r0
 800309c:	f106 081f 	add.w	r8, r6, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80030a0:	f04f 0c26 	mov.w	ip, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	1839      	adds	r1, r7, r0
		for (j = 0; j <= i; j++)
 80030a8:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80030aa:	5cb5      	ldrb	r5, [r6, r2]
 80030ac:	f811 4901 	ldrb.w	r4, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80030b0:	3201      	adds	r2, #1
 80030b2:	4282      	cmp	r2, r0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80030b4:	fb05 3304 	mla	r3, r5, r4, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80030b8:	ddf7      	ble.n	80030aa <f25519_sqrt+0x5c6>
 80030ba:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80030be:	2a1f      	cmp	r2, #31
 80030c0:	d00d      	beq.n	80030de <f25519_sqrt+0x5fa>
 80030c2:	1a81      	subs	r1, r0, r2
 80030c4:	3120      	adds	r1, #32
 80030c6:	4439      	add	r1, r7
 80030c8:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80030ca:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80030ce:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80030d2:	fb0c f404 	mul.w	r4, ip, r4

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80030d6:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 80030d8:	fb05 3304 	mla	r3, r5, r4, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80030dc:	d1f5      	bne.n	80030ca <f25519_sqrt+0x5e6>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80030de:	9a02      	ldr	r2, [sp, #8]
 80030e0:	5413      	strb	r3, [r2, r0]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80030e2:	3001      	adds	r0, #1
 80030e4:	2820      	cmp	r0, #32
 80030e6:	d1dd      	bne.n	80030a4 <f25519_sqrt+0x5c0>

		r[i] = c;
	}

	r[31] &= 127;
	c = (c >> 7) * 19;
 80030e8:	09db      	lsrs	r3, r3, #7
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80030ea:	7fd1      	ldrb	r1, [r2, #31]
	c = (c >> 7) * 19;
 80030ec:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80030f0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80030f4:	9b02      	ldr	r3, [sp, #8]
 80030f6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80030fa:	77d9      	strb	r1, [r3, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80030fc:	9902      	ldr	r1, [sp, #8]
 80030fe:	2300      	movs	r3, #0
		c += r[i];
 8003100:	5cc8      	ldrb	r0, [r1, r3]
 8003102:	4402      	add	r2, r0
		r[i] = c;
 8003104:	54ca      	strb	r2, [r1, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8003106:	3301      	adds	r3, #1
 8003108:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 800310a:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800310e:	d1f7      	bne.n	8003100 <f25519_sqrt+0x61c>
	f25519_sub(i, i, y);

	/* r = avi */
	f25519_mul__distinct(x, v, a);
	f25519_mul__distinct(r, x, i);
}
 8003110:	b024      	add	sp, #144	; 0x90
 8003112:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003116:	4770      	bx	lr

08003118 <fprime_from_bytes>:
}

void fprime_from_bytes(uint8_t *n,
		       const uint8_t *x, size_t len,
		       const uint8_t *modulus)
{
 8003118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800311c:	4691      	mov	r9, r2
 800311e:	b08b      	sub	sp, #44	; 0x2c
 8003120:	4604      	mov	r4, r0
 8003122:	460f      	mov	r7, r1
 8003124:	461d      	mov	r5, r3
static int prime_msb(const uint8_t *p)
{
	int i;
	uint8_t x;

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
 8003126:	221f      	movs	r2, #31
 8003128:	e003      	b.n	8003132 <fprime_from_bytes+0x1a>
 800312a:	f112 32ff 	adds.w	r2, r2, #4294967295
 800312e:	f0c0 80b3 	bcc.w	8003298 <fprime_from_bytes+0x180>
		if (p[i])
 8003132:	5cab      	ldrb	r3, [r5, r2]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f8      	beq.n	800312a <fprime_from_bytes+0x12>
			break;

	x = p[i];
	i <<= 3;
 8003138:	00d2      	lsls	r2, r2, #3

	while (x) {
 800313a:	085b      	lsrs	r3, r3, #1
		x >>= 1;
		i++;
 800313c:	f102 0201 	add.w	r2, r2, #1
			break;

	x = p[i];
	i <<= 3;

	while (x) {
 8003140:	d1fb      	bne.n	800313a <fprime_from_bytes+0x22>
 8003142:	3a02      	subs	r2, #2

void fprime_from_bytes(uint8_t *n,
		       const uint8_t *x, size_t len,
		       const uint8_t *modulus)
{
	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
 8003144:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
		x[i] = 0;
}

static inline int min_int(int a, int b)
{
	return a < b ? a : b;
 8003148:	4552      	cmp	r2, sl
 800314a:	bfb4      	ite	lt
 800314c:	4616      	movlt	r6, r2
 800314e:	4656      	movge	r6, sl
void fprime_from_bytes(uint8_t *n,
		       const uint8_t *x, size_t len,
		       const uint8_t *modulus)
{
	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
	const int preload_bytes = preload_total >> 3;
 8003150:	ea4f 08e6 	mov.w	r8, r6, asr #3
	const int preload_bits = preload_total & 7;
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);
 8003154:	4620      	mov	r0, r4
 8003156:	2100      	movs	r1, #0
 8003158:	2220      	movs	r2, #32
 800315a:	f003 fdb2 	bl	8006cc2 <memset>

	for (i = 0; i < preload_bytes; i++)
 800315e:	f1b8 0f00 	cmp.w	r8, #0
		       const uint8_t *modulus)
{
	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
	const int preload_bytes = preload_total >> 3;
	const int preload_bits = preload_total & 7;
	const int rbits = (len << 3) - preload_total;
 8003162:	ebc6 0a0a 	rsb	sl, r6, sl
		       const uint8_t *x, size_t len,
		       const uint8_t *modulus)
{
	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
	const int preload_bytes = preload_total >> 3;
	const int preload_bits = preload_total & 7;
 8003166:	f006 0607 	and.w	r6, r6, #7
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 800316a:	dd42      	ble.n	80031f2 <fprime_from_bytes+0xda>
 800316c:	ebc8 0c09 	rsb	ip, r8, r9
 8003170:	eb07 030c 	add.w	r3, r7, ip
 8003174:	1d22      	adds	r2, r4, #4
 8003176:	1d19      	adds	r1, r3, #4
 8003178:	4293      	cmp	r3, r2
 800317a:	bf38      	it	cc
 800317c:	428c      	cmpcc	r4, r1
 800317e:	bf34      	ite	cc
 8003180:	2200      	movcc	r2, #0
 8003182:	2201      	movcs	r2, #1
 8003184:	f1b8 0f09 	cmp.w	r8, #9
 8003188:	bf94      	ite	ls
 800318a:	2200      	movls	r2, #0
 800318c:	f002 0201 	andhi.w	r2, r2, #1
 8003190:	2a00      	cmp	r2, #0
 8003192:	f000 8087 	beq.w	80032a4 <fprime_from_bytes+0x18c>
 8003196:	ea43 0204 	orr.w	r2, r3, r4
 800319a:	0792      	lsls	r2, r2, #30
 800319c:	f040 8082 	bne.w	80032a4 <fprime_from_bytes+0x18c>
 80031a0:	ea4f 0298 	mov.w	r2, r8, lsr #2
 80031a4:	2100      	movs	r1, #0
 80031a6:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 80031aa:	4608      	mov	r0, r1
 80031ac:	9501      	str	r5, [sp, #4]
		n[i] = x[len - preload_bytes + i];
 80031ae:	585d      	ldr	r5, [r3, r1]
 80031b0:	3001      	adds	r0, #1
 80031b2:	4282      	cmp	r2, r0
 80031b4:	5065      	str	r5, [r4, r1]
 80031b6:	f101 0104 	add.w	r1, r1, #4
 80031ba:	d8f8      	bhi.n	80031ae <fprime_from_bytes+0x96>
 80031bc:	45c3      	cmp	fp, r8
 80031be:	9d01      	ldr	r5, [sp, #4]
 80031c0:	d017      	beq.n	80031f2 <fprime_from_bytes+0xda>
 80031c2:	eb07 030b 	add.w	r3, r7, fp
 80031c6:	f813 100c 	ldrb.w	r1, [r3, ip]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 80031ca:	f10b 0301 	add.w	r3, fp, #1
 80031ce:	4598      	cmp	r8, r3
		n[i] = x[len - preload_bytes + i];
 80031d0:	f804 1022 	strb.w	r1, [r4, r2, lsl #2]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 80031d4:	dd0d      	ble.n	80031f2 <fprime_from_bytes+0xda>
		n[i] = x[len - preload_bytes + i];
 80031d6:	18fa      	adds	r2, r7, r3
 80031d8:	f812 200c 	ldrb.w	r2, [r2, ip]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 80031dc:	f10b 0b02 	add.w	fp, fp, #2
 80031e0:	45d8      	cmp	r8, fp
		n[i] = x[len - preload_bytes + i];
 80031e2:	54e2      	strb	r2, [r4, r3]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 80031e4:	dd05      	ble.n	80031f2 <fprime_from_bytes+0xda>
		n[i] = x[len - preload_bytes + i];
 80031e6:	eb07 030b 	add.w	r3, r7, fp
 80031ea:	f813 300c 	ldrb.w	r3, [r3, ip]
 80031ee:	f804 300b 	strb.w	r3, [r4, fp]

	if (preload_bits) {
 80031f2:	b1be      	cbz	r6, 8003224 <fprime_from_bytes+0x10c>
 80031f4:	2200      	movs	r2, #0
 80031f6:	4613      	mov	r3, r2
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c |= ((uint16_t)x[i]) << n;
 80031f8:	5ce1      	ldrb	r1, [r4, r3]
 80031fa:	40b1      	lsls	r1, r6
 80031fc:	430a      	orrs	r2, r1
 80031fe:	b292      	uxth	r2, r2
		x[i] = c;
 8003200:	54e2      	strb	r2, [r4, r3]
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003202:	3301      	adds	r3, #1
 8003204:	2b20      	cmp	r3, #32
		c |= ((uint16_t)x[i]) << n;
		x[i] = c;
		c >>= 8;
 8003206:	ea4f 2212 	mov.w	r2, r2, lsr #8
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 800320a:	d1f5      	bne.n	80031f8 <fprime_from_bytes+0xe0>
	for (i = 0; i < preload_bytes; i++)
		n[i] = x[len - preload_bytes + i];

	if (preload_bits) {
		shift_n_bits(n, preload_bits);
		n[0] |= x[len - preload_bytes - 1] >> (8 - preload_bits);
 800320c:	f109 39ff 	add.w	r9, r9, #4294967295
 8003210:	ebc8 0809 	rsb	r8, r8, r9
 8003214:	f817 2008 	ldrb.w	r2, [r7, r8]
 8003218:	f1c6 0608 	rsb	r6, r6, #8
 800321c:	4132      	asrs	r2, r6
 800321e:	7823      	ldrb	r3, [r4, #0]
 8003220:	4313      	orrs	r3, r2
 8003222:	7023      	strb	r3, [r4, #0]
	}

	for (i = rbits - 1; i >= 0; i--) {
 8003224:	f1ba 0a01 	subs.w	sl, sl, #1
 8003228:	d433      	bmi.n	8003292 <fprime_from_bytes+0x17a>
		const uint8_t bit = (x[i >> 3] >> (i & 7)) & 1;
 800322a:	ea4f 03ea 	mov.w	r3, sl, asr #3
 800322e:	5cf8      	ldrb	r0, [r7, r3]
 8003230:	f00a 0307 	and.w	r3, sl, #7
 8003234:	4118      	asrs	r0, r3
}

/* Warning: this function may be variable-time in the argument n */
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
 8003236:	2200      	movs	r2, #0
		shift_n_bits(n, preload_bits);
		n[0] |= x[len - preload_bytes - 1] >> (8 - preload_bits);
	}

	for (i = rbits - 1; i >= 0; i--) {
		const uint8_t bit = (x[i >> 3] >> (i & 7)) & 1;
 8003238:	f000 0001 	and.w	r0, r0, #1
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 800323c:	4613      	mov	r3, r2
		c |= ((uint16_t)x[i]) << n;
 800323e:	5ce1      	ldrb	r1, [r4, r3]
 8003240:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
		x[i] = c;
 8003244:	54e2      	strb	r2, [r4, r3]
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003246:	3301      	adds	r3, #1
 8003248:	2b20      	cmp	r3, #32
		c |= ((uint16_t)x[i]) << n;
		x[i] = c;
		c >>= 8;
 800324a:	ea4f 2212 	mov.w	r2, r2, lsr #8
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 800324e:	d1f6      	bne.n	800323e <fprime_from_bytes+0x126>

	for (i = rbits - 1; i >= 0; i--) {
		const uint8_t bit = (x[i >> 3] >> (i & 7)) & 1;

		shift_n_bits(n, 1);
		n[0] |= bit;
 8003250:	7823      	ldrb	r3, [r4, #0]
}

static void raw_try_sub(uint8_t *x, const uint8_t *p)
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
 8003252:	2200      	movs	r2, #0

	for (i = rbits - 1; i >= 0; i--) {
		const uint8_t bit = (x[i >> 3] >> (i & 7)) & 1;

		shift_n_bits(n, 1);
		n[0] |= bit;
 8003254:	4303      	orrs	r3, r0
 8003256:	7023      	strb	r3, [r4, #0]
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003258:	4613      	mov	r3, r2
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
 800325a:	5ce0      	ldrb	r0, [r4, r3]
 800325c:	5ce9      	ldrb	r1, [r5, r3]
 800325e:	1a41      	subs	r1, r0, r1
 8003260:	1a8a      	subs	r2, r1, r2
 8003262:	b292      	uxth	r2, r2
		minusp[i] = c;
 8003264:	a802      	add	r0, sp, #8
 8003266:	54c2      	strb	r2, [r0, r3]
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003268:	3301      	adds	r3, #1
 800326a:	2b20      	cmp	r3, #32
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
 800326c:	f3c2 2200 	ubfx	r2, r2, #8, #1
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003270:	d1f3      	bne.n	800325a <fprime_from_bytes+0x142>

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 8003272:	4252      	negs	r2, r2
 8003274:	b2d2      	uxtb	r2, r2
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 8003276:	2300      	movs	r3, #0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 8003278:	a802      	add	r0, sp, #8
 800327a:	5cc1      	ldrb	r1, [r0, r3]
 800327c:	5ce0      	ldrb	r0, [r4, r3]
 800327e:	4048      	eors	r0, r1
 8003280:	4010      	ands	r0, r2
 8003282:	4041      	eors	r1, r0
 8003284:	54e1      	strb	r1, [r4, r3]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 8003286:	3301      	adds	r3, #1
 8003288:	2b20      	cmp	r3, #32
 800328a:	d1f5      	bne.n	8003278 <fprime_from_bytes+0x160>
	if (preload_bits) {
		shift_n_bits(n, preload_bits);
		n[0] |= x[len - preload_bytes - 1] >> (8 - preload_bits);
	}

	for (i = rbits - 1; i >= 0; i--) {
 800328c:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8003290:	d2cb      	bcs.n	800322a <fprime_from_bytes+0x112>

		shift_n_bits(n, 1);
		n[0] |= bit;
		raw_try_sub(n, modulus);
	}
}
 8003292:	b00b      	add	sp, #44	; 0x2c
 8003294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
 8003298:	f815 3c01 	ldrb.w	r3, [r5, #-1]
	i <<= 3;

	while (x) {
 800329c:	b14b      	cbz	r3, 80032b2 <fprime_from_bytes+0x19a>
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
 800329e:	f06f 0207 	mvn.w	r2, #7
 80032a2:	e74a      	b.n	800313a <fprime_from_bytes+0x22>
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 80032a4:	2200      	movs	r2, #0
		n[i] = x[len - preload_bytes + i];
 80032a6:	5c99      	ldrb	r1, [r3, r2]
 80032a8:	54a1      	strb	r1, [r4, r2]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 80032aa:	3201      	adds	r2, #1
 80032ac:	4542      	cmp	r2, r8
 80032ae:	d1fa      	bne.n	80032a6 <fprime_from_bytes+0x18e>
 80032b0:	e79f      	b.n	80031f2 <fprime_from_bytes+0xda>
			break;

	x = p[i];
	i <<= 3;

	while (x) {
 80032b2:	f06f 0209 	mvn.w	r2, #9
 80032b6:	e745      	b.n	8003144 <fprime_from_bytes+0x2c>

080032b8 <fprime_add>:
	for (i = 0; i < FPRIME_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
}

void fprime_add(uint8_t *r, const uint8_t *a, const uint8_t *modulus)
{
 80032b8:	b470      	push	{r4, r5, r6}
const uint8_t fprime_zero[FPRIME_SIZE] = {0};
const uint8_t fprime_one[FPRIME_SIZE] = {1};

static void raw_add(uint8_t *x, const uint8_t *p)
{
	uint16_t c = 0;
 80032ba:	2400      	movs	r4, #0
	for (i = 0; i < FPRIME_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
}

void fprime_add(uint8_t *r, const uint8_t *a, const uint8_t *modulus)
{
 80032bc:	b089      	sub	sp, #36	; 0x24
static void raw_add(uint8_t *x, const uint8_t *p)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80032be:	4623      	mov	r3, r4
		c += ((uint16_t)x[i]) + ((uint16_t)p[i]);
 80032c0:	5cce      	ldrb	r6, [r1, r3]
 80032c2:	5cc5      	ldrb	r5, [r0, r3]
 80032c4:	4435      	add	r5, r6
 80032c6:	442c      	add	r4, r5
		x[i] = c;
 80032c8:	54c4      	strb	r4, [r0, r3]
static void raw_add(uint8_t *x, const uint8_t *p)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80032ca:	3301      	adds	r3, #1
 80032cc:	2b20      	cmp	r3, #32
		c += ((uint16_t)x[i]) + ((uint16_t)p[i]);
		x[i] = c;
		c >>= 8;
 80032ce:	f3c4 240f 	ubfx	r4, r4, #8, #16
static void raw_add(uint8_t *x, const uint8_t *p)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80032d2:	d1f5      	bne.n	80032c0 <fprime_add+0x8>
 80032d4:	2100      	movs	r1, #0
 80032d6:	460b      	mov	r3, r1
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
 80032d8:	5cc5      	ldrb	r5, [r0, r3]
 80032da:	5cd4      	ldrb	r4, [r2, r3]
 80032dc:	1b2c      	subs	r4, r5, r4
 80032de:	1a61      	subs	r1, r4, r1
 80032e0:	b289      	uxth	r1, r1
		minusp[i] = c;
 80032e2:	f80d 1003 	strb.w	r1, [sp, r3]
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80032e6:	3301      	adds	r3, #1
 80032e8:	2b20      	cmp	r3, #32
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
 80032ea:	f3c1 2100 	ubfx	r1, r1, #8, #1
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80032ee:	d1f3      	bne.n	80032d8 <fprime_add+0x20>

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 80032f0:	4249      	negs	r1, r1
 80032f2:	b2c9      	uxtb	r1, r1
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 80032f4:	2300      	movs	r3, #0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 80032f6:	f81d 2003 	ldrb.w	r2, [sp, r3]
 80032fa:	5cc4      	ldrb	r4, [r0, r3]
 80032fc:	4054      	eors	r4, r2
 80032fe:	400c      	ands	r4, r1
 8003300:	4062      	eors	r2, r4
 8003302:	54c2      	strb	r2, [r0, r3]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 8003304:	3301      	adds	r3, #1
 8003306:	2b20      	cmp	r3, #32
 8003308:	d1f5      	bne.n	80032f6 <fprime_add+0x3e>

void fprime_add(uint8_t *r, const uint8_t *a, const uint8_t *modulus)
{
	raw_add(r, a);
	raw_try_sub(r, modulus);
}
 800330a:	b009      	add	sp, #36	; 0x24
 800330c:	bc70      	pop	{r4, r5, r6}
 800330e:	4770      	bx	lr

08003310 <fprime_mul>:
	raw_try_sub(r, modulus);
}

void fprime_mul(uint8_t *r, const uint8_t *a, const uint8_t *b,
		const uint8_t *modulus)
{
 8003310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003314:	4688      	mov	r8, r1
 8003316:	b091      	sub	sp, #68	; 0x44
 8003318:	4692      	mov	sl, r2
	int i;

	memset(r, 0, FPRIME_SIZE);
 800331a:	2100      	movs	r1, #0
 800331c:	2220      	movs	r2, #32
	raw_try_sub(r, modulus);
}

void fprime_mul(uint8_t *r, const uint8_t *a, const uint8_t *b,
		const uint8_t *modulus)
{
 800331e:	461f      	mov	r7, r3
 8003320:	4605      	mov	r5, r0
	int i;

	memset(r, 0, FPRIME_SIZE);
 8003322:	f003 fcce 	bl	8006cc2 <memset>
static int prime_msb(const uint8_t *p)
{
	int i;
	uint8_t x;

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
 8003326:	221f      	movs	r2, #31
 8003328:	e003      	b.n	8003332 <fprime_mul+0x22>
 800332a:	f112 32ff 	adds.w	r2, r2, #4294967295
 800332e:	f0c0 8087 	bcc.w	8003440 <fprime_mul+0x130>
		if (p[i])
 8003332:	5cbb      	ldrb	r3, [r7, r2]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f8      	beq.n	800332a <fprime_mul+0x1a>
			break;

	x = p[i];
	i <<= 3;
 8003338:	00d2      	lsls	r2, r2, #3

	while (x) {
 800333a:	085b      	lsrs	r3, r3, #1
		x >>= 1;
		i++;
 800333c:	f102 0201 	add.w	r2, r2, #1
			break;

	x = p[i];
	i <<= 3;

	while (x) {
 8003340:	d1fb      	bne.n	800333a <fprime_mul+0x2a>
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
 8003342:	f1b2 0c01 	subs.w	ip, r2, #1
 8003346:	d478      	bmi.n	800343a <fprime_mul+0x12a>
 8003348:	ae08      	add	r6, sp, #32
		const uint8_t bit = (b[i >> 3] >> (i & 7)) & 1;
 800334a:	ea4f 03ec 	mov.w	r3, ip, asr #3
 800334e:	f81a 9003 	ldrb.w	r9, [sl, r3]
 8003352:	f00c 0307 	and.w	r3, ip, #7
 8003356:	fa49 f903 	asr.w	r9, r9, r3
}

/* Warning: this function may be variable-time in the argument n */
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
 800335a:	2200      	movs	r2, #0
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
		const uint8_t bit = (b[i >> 3] >> (i & 7)) & 1;
 800335c:	f009 0901 	and.w	r9, r9, #1
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003360:	4613      	mov	r3, r2
		c |= ((uint16_t)x[i]) << n;
 8003362:	5ce9      	ldrb	r1, [r5, r3]
 8003364:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
		x[i] = c;
 8003368:	54ea      	strb	r2, [r5, r3]
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 800336a:	3301      	adds	r3, #1
 800336c:	2b20      	cmp	r3, #32
		c |= ((uint16_t)x[i]) << n;
		x[i] = c;
		c >>= 8;
 800336e:	ea4f 2212 	mov.w	r2, r2, lsr #8
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003372:	d1f6      	bne.n	8003362 <fprime_mul+0x52>
 8003374:	2200      	movs	r2, #0
 8003376:	4613      	mov	r3, r2
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
 8003378:	5ce8      	ldrb	r0, [r5, r3]
 800337a:	5cf9      	ldrb	r1, [r7, r3]
 800337c:	1a41      	subs	r1, r0, r1
 800337e:	1a8a      	subs	r2, r1, r2
 8003380:	b292      	uxth	r2, r2
		minusp[i] = c;
 8003382:	54f2      	strb	r2, [r6, r3]
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003384:	3301      	adds	r3, #1
 8003386:	2b20      	cmp	r3, #32
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
 8003388:	f3c2 2200 	ubfx	r2, r2, #8, #1
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 800338c:	d1f4      	bne.n	8003378 <fprime_mul+0x68>

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 800338e:	4252      	negs	r2, r2
 8003390:	b2d2      	uxtb	r2, r2
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 8003392:	2300      	movs	r3, #0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 8003394:	5cf1      	ldrb	r1, [r6, r3]
 8003396:	5ce8      	ldrb	r0, [r5, r3]
 8003398:	4048      	eors	r0, r1
 800339a:	4010      	ands	r0, r2
 800339c:	4041      	eors	r1, r0
 800339e:	54e9      	strb	r1, [r5, r3]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 80033a0:	3301      	adds	r3, #1
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d1f6      	bne.n	8003394 <fprime_mul+0x84>
		       const uint8_t *modulus);

/* Copy an element */
static inline void fprime_copy(uint8_t *x, const uint8_t *a)
{
	memcpy(x, a, FPRIME_SIZE);
 80033a6:	6828      	ldr	r0, [r5, #0]
 80033a8:	6869      	ldr	r1, [r5, #4]
 80033aa:	68aa      	ldr	r2, [r5, #8]
 80033ac:	68eb      	ldr	r3, [r5, #12]
 80033ae:	466c      	mov	r4, sp
 80033b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033b2:	6928      	ldr	r0, [r5, #16]
 80033b4:	6969      	ldr	r1, [r5, #20]
 80033b6:	69aa      	ldr	r2, [r5, #24]
 80033b8:	69eb      	ldr	r3, [r5, #28]
const uint8_t fprime_zero[FPRIME_SIZE] = {0};
const uint8_t fprime_one[FPRIME_SIZE] = {1};

static void raw_add(uint8_t *x, const uint8_t *p)
{
	uint16_t c = 0;
 80033ba:	f04f 0b00 	mov.w	fp, #0
 80033be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80033c0:	465c      	mov	r4, fp
		c += ((uint16_t)x[i]) + ((uint16_t)p[i]);
 80033c2:	f81d 3004 	ldrb.w	r3, [sp, r4]
 80033c6:	f818 2004 	ldrb.w	r2, [r8, r4]
 80033ca:	4413      	add	r3, r2
 80033cc:	445b      	add	r3, fp
		x[i] = c;
 80033ce:	f80d 3004 	strb.w	r3, [sp, r4]
static void raw_add(uint8_t *x, const uint8_t *p)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80033d2:	3401      	adds	r4, #1
 80033d4:	2c20      	cmp	r4, #32
		c += ((uint16_t)x[i]) + ((uint16_t)p[i]);
		x[i] = c;
		c >>= 8;
 80033d6:	f3c3 2b0f 	ubfx	fp, r3, #8, #16
static void raw_add(uint8_t *x, const uint8_t *p)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80033da:	d1f2      	bne.n	80033c2 <fprime_mul+0xb2>
 80033dc:	2300      	movs	r3, #0
 80033de:	461c      	mov	r4, r3
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
 80033e0:	f81d 1004 	ldrb.w	r1, [sp, r4]
 80033e4:	5d3a      	ldrb	r2, [r7, r4]
 80033e6:	1a8a      	subs	r2, r1, r2
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	b29b      	uxth	r3, r3
		minusp[i] = c;
 80033ec:	5533      	strb	r3, [r6, r4]
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80033ee:	3401      	adds	r4, #1
 80033f0:	2c20      	cmp	r4, #32
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
 80033f2:	f3c3 2300 	ubfx	r3, r3, #8, #1
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80033f6:	d1f3      	bne.n	80033e0 <fprime_mul+0xd0>

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 80033f8:	425b      	negs	r3, r3
 80033fa:	b2db      	uxtb	r3, r3
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 80033fc:	2200      	movs	r2, #0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 80033fe:	5cb1      	ldrb	r1, [r6, r2]
 8003400:	f81d 0002 	ldrb.w	r0, [sp, r2]
 8003404:	4048      	eors	r0, r1
 8003406:	4018      	ands	r0, r3
 8003408:	4041      	eors	r1, r0
 800340a:	f80d 1002 	strb.w	r1, [sp, r2]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 800340e:	3201      	adds	r2, #1
 8003410:	2a20      	cmp	r2, #32
 8003412:	d1f4      	bne.n	80033fe <fprime_mul+0xee>

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 8003414:	f1c9 0900 	rsb	r9, r9, #0
 8003418:	fa5f f989 	uxtb.w	r9, r9
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 800341c:	2300      	movs	r3, #0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 800341e:	5cea      	ldrb	r2, [r5, r3]
 8003420:	f81d 1003 	ldrb.w	r1, [sp, r3]
 8003424:	4051      	eors	r1, r2
 8003426:	ea09 0101 	and.w	r1, r9, r1
 800342a:	404a      	eors	r2, r1
 800342c:	54ea      	strb	r2, [r5, r3]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 800342e:	3301      	adds	r3, #1
 8003430:	2b20      	cmp	r3, #32
 8003432:	d1f4      	bne.n	800341e <fprime_mul+0x10e>
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
 8003434:	f11c 3cff 	adds.w	ip, ip, #4294967295
 8003438:	d287      	bcs.n	800334a <fprime_mul+0x3a>
		fprime_copy(plusa, r);
		fprime_add(plusa, a, modulus);

		fprime_select(r, r, plusa, bit);
	}
}
 800343a:	b011      	add	sp, #68	; 0x44
 800343c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
 8003440:	f817 3c01 	ldrb.w	r3, [r7, #-1]
	i <<= 3;

	while (x) {
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f8      	beq.n	800343a <fprime_mul+0x12a>
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
 8003448:	f06f 0207 	mvn.w	r2, #7
 800344c:	e775      	b.n	800333a <fprime_mul+0x2a>
 800344e:	bf00      	nop

08003450 <sha256_starts>:
    (b)[(i) + 2] = (uint8) ( (n) >>  8 );       \
    (b)[(i) + 3] = (uint8) ( (n)       );       \
}

void sha256_starts( sha256_context *ctx )
{
 8003450:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x6A09E667;
    ctx->state[1] = 0xBB67AE85;
 8003454:	f8df c048 	ldr.w	ip, [pc, #72]	; 80034a0 <sha256_starts+0x50>
void sha256_starts( sha256_context *ctx )
{
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x6A09E667;
 8003458:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80034a4 <sha256_starts+0x54>
    ctx->state[1] = 0xBB67AE85;
    ctx->state[2] = 0x3C6EF372;
 800345c:	4f0a      	ldr	r7, [pc, #40]	; (8003488 <sha256_starts+0x38>)
    ctx->state[3] = 0xA54FF53A;
 800345e:	4e0b      	ldr	r6, [pc, #44]	; (800348c <sha256_starts+0x3c>)
    ctx->state[4] = 0x510E527F;
 8003460:	4d0b      	ldr	r5, [pc, #44]	; (8003490 <sha256_starts+0x40>)
    ctx->state[5] = 0x9B05688C;
 8003462:	4c0c      	ldr	r4, [pc, #48]	; (8003494 <sha256_starts+0x44>)
    ctx->state[6] = 0x1F83D9AB;
 8003464:	490c      	ldr	r1, [pc, #48]	; (8003498 <sha256_starts+0x48>)
    ctx->state[7] = 0x5BE0CD19;
 8003466:	4a0d      	ldr	r2, [pc, #52]	; (800349c <sha256_starts+0x4c>)
    (b)[(i) + 3] = (uint8) ( (n)       );       \
}

void sha256_starts( sha256_context *ctx )
{
    ctx->total[0] = 0;
 8003468:	2300      	movs	r3, #0
    ctx->total[1] = 0;

    ctx->state[0] = 0x6A09E667;
 800346a:	f8c0 8008 	str.w	r8, [r0, #8]
    ctx->state[1] = 0xBB67AE85;
    ctx->state[2] = 0x3C6EF372;
 800346e:	6107      	str	r7, [r0, #16]
    ctx->state[3] = 0xA54FF53A;
 8003470:	6146      	str	r6, [r0, #20]
    ctx->state[4] = 0x510E527F;
 8003472:	6185      	str	r5, [r0, #24]
    ctx->state[5] = 0x9B05688C;
 8003474:	61c4      	str	r4, [r0, #28]
{
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x6A09E667;
    ctx->state[1] = 0xBB67AE85;
 8003476:	f8c0 c00c 	str.w	ip, [r0, #12]
    ctx->state[2] = 0x3C6EF372;
    ctx->state[3] = 0xA54FF53A;
    ctx->state[4] = 0x510E527F;
    ctx->state[5] = 0x9B05688C;
    ctx->state[6] = 0x1F83D9AB;
 800347a:	6201      	str	r1, [r0, #32]
    ctx->state[7] = 0x5BE0CD19;
 800347c:	6242      	str	r2, [r0, #36]	; 0x24
    (b)[(i) + 3] = (uint8) ( (n)       );       \
}

void sha256_starts( sha256_context *ctx )
{
    ctx->total[0] = 0;
 800347e:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 8003480:	6043      	str	r3, [r0, #4]
    ctx->state[3] = 0xA54FF53A;
    ctx->state[4] = 0x510E527F;
    ctx->state[5] = 0x9B05688C;
    ctx->state[6] = 0x1F83D9AB;
    ctx->state[7] = 0x5BE0CD19;
}
 8003482:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8003486:	4770      	bx	lr
 8003488:	3c6ef372 	stclcc	3, cr15, [lr], #-456	; 0xfffffe38
 800348c:	a54ff53a 	strbge	pc, [pc, #-1338]	; 8002f5a <f25519_sqrt+0x476>	; <UNPREDICTABLE>
 8003490:	510e527f 	tstpl	lr, pc, ror r2
 8003494:	9b05688c 	blls	815d6cc <_etext+0x155a70>
 8003498:	1f83d9ab 	svcne	0x0083d9ab
 800349c:	5be0cd19 	blpl	7836908 <__Stack_Size+0x7836108>
 80034a0:	bb67ae85 	bllt	99eeebc <_etext+0x19e7260>
 80034a4:	6a09e667 	bvs	827ce48 <_etext+0x2751ec>

080034a8 <sha256_process>:

void sha256_process( sha256_context *ctx, uint8 data[64] )
{
 80034a8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80034ac:	b09c      	sub	sp, #112	; 0x70
 80034ae:	9019      	str	r0, [sp, #100]	; 0x64
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
 80034b0:	9a19      	ldr	r2, [sp, #100]	; 0x64

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
 80034b2:	6980      	ldr	r0, [r0, #24]
    F = ctx->state[5];
 80034b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    G = ctx->state[6];
    H = ctx->state[7];
 80034b6:	9c19      	ldr	r4, [sp, #100]	; 0x64
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
 80034b8:	9e19      	ldr	r6, [sp, #100]	; 0x64
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
 80034ba:	9004      	str	r0, [sp, #16]
    F = ctx->state[5];
    G = ctx->state[6];
 80034bc:	6a12      	ldr	r2, [r2, #32]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
 80034be:	69db      	ldr	r3, [r3, #28]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 80034c0:	ea4f 15b0 	mov.w	r5, r0, ror #6
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
 80034c4:	9819      	ldr	r0, [sp, #100]	; 0x64
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];
 80034c6:	6a64      	ldr	r4, [r4, #36]	; 0x24
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
 80034c8:	68b6      	ldr	r6, [r6, #8]
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
 80034ca:	9202      	str	r2, [sp, #8]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
 80034cc:	9303      	str	r3, [sp, #12]
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
 80034ce:	68c0      	ldr	r0, [r0, #12]
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
 80034d0:	9608      	str	r6, [sp, #32]
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];
 80034d2:	9401      	str	r4, [sp, #4]

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 80034d4:	9a04      	ldr	r2, [sp, #16]
 80034d6:	9c02      	ldr	r4, [sp, #8]
 80034d8:	9e03      	ldr	r6, [sp, #12]
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
 80034da:	9007      	str	r0, [sp, #28]
    C = ctx->state[2];
 80034dc:	9819      	ldr	r0, [sp, #100]	; 0x64
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 80034de:	ea85 25f2 	eor.w	r5, r5, r2, ror #11
 80034e2:	4bd0      	ldr	r3, [pc, #832]	; (8003824 <sha256_process+0x37c>)
 80034e4:	ea84 0206 	eor.w	r2, r4, r6
 80034e8:	9c04      	ldr	r4, [sp, #16]
 80034ea:	9e01      	ldr	r6, [sp, #4]
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
 80034ec:	6900      	ldr	r0, [r0, #16]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 80034ee:	784f      	ldrb	r7, [r1, #1]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 80034f0:	ea85 6574 	eor.w	r5, r5, r4, ror #25
 80034f4:	4433      	add	r3, r6
 80034f6:	4022      	ands	r2, r4
 80034f8:	9e08      	ldr	r6, [sp, #32]
 80034fa:	9c07      	ldr	r4, [sp, #28]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 80034fc:	f891 a000 	ldrb.w	sl, [r1]
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
 8003500:	9006      	str	r0, [sp, #24]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 8003502:	f891 c003 	ldrb.w	ip, [r1, #3]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003506:	eb03 0805 	add.w	r8, r3, r5
 800350a:	ea44 0006 	orr.w	r0, r4, r6
 800350e:	9b02      	ldr	r3, [sp, #8]
 8003510:	9c06      	ldr	r4, [sp, #24]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 8003512:	043f      	lsls	r7, r7, #16
 8003514:	f891 9002 	ldrb.w	r9, [r1, #2]
 8003518:	ea47 670a 	orr.w	r7, r7, sl, lsl #24
 800351c:	ea47 070c 	orr.w	r7, r7, ip
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003520:	405a      	eors	r2, r3
 8003522:	4020      	ands	r0, r4
 8003524:	9b07      	ldr	r3, [sp, #28]
 8003526:	9c08      	ldr	r4, [sp, #32]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 8003528:	ea47 2909 	orr.w	r9, r7, r9, lsl #8
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 800352c:	ea4f 06b6 	mov.w	r6, r6, ror #2
 8003530:	ea03 0504 	and.w	r5, r3, r4
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 8003534:	f891 a005 	ldrb.w	sl, [r1, #5]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003538:	ea86 3674 	eor.w	r6, r6, r4, ror #13
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 800353c:	790c      	ldrb	r4, [r1, #4]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 800353e:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 8003542:	9f19      	ldr	r7, [sp, #100]	; 0x64
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003544:	9b08      	ldr	r3, [sp, #32]
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 8003546:	697f      	ldr	r7, [r7, #20]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003548:	4328      	orrs	r0, r5
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 800354a:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 800354e:	79cd      	ldrb	r5, [r1, #7]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003550:	ea86 56b3 	eor.w	r6, r6, r3, ror #22
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 8003554:	ea4a 6a04 	orr.w	sl, sl, r4, lsl #24
 8003558:	798c      	ldrb	r4, [r1, #6]
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 800355a:	9705      	str	r7, [sp, #20]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 800355c:	4430      	add	r0, r6
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 800355e:	ea4a 0a05 	orr.w	sl, sl, r5
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 8003562:	9e03      	ldr	r6, [sp, #12]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003564:	4442      	add	r2, r8
 8003566:	46bc      	mov	ip, r7
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 8003568:	9f04      	ldr	r7, [sp, #16]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 800356a:	444a      	add	r2, r9
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 800356c:	ea4a 2404 	orr.w	r4, sl, r4, lsl #8
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003570:	eb00 0b02 	add.w	fp, r0, r2
 8003574:	4494      	add	ip, r2
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 8003576:	940d      	str	r4, [sp, #52]	; 0x34
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 8003578:	9d03      	ldr	r5, [sp, #12]
 800357a:	9c08      	ldr	r4, [sp, #32]
 800357c:	ea86 0207 	eor.w	r2, r6, r7
 8003580:	9802      	ldr	r0, [sp, #8]
 8003582:	ea0c 0202 	and.w	r2, ip, r2
 8003586:	4ba8      	ldr	r3, [pc, #672]	; (8003828 <sha256_process+0x380>)
 8003588:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 800358c:	ea4b 0704 	orr.w	r7, fp, r4
 8003590:	406a      	eors	r2, r5
 8003592:	ea0b 0504 	and.w	r5, fp, r4
 8003596:	9c07      	ldr	r4, [sp, #28]
 8003598:	4403      	add	r3, r0
 800359a:	ea4f 18bc 	mov.w	r8, ip, ror #6
 800359e:	ea4f 06bb 	mov.w	r6, fp, ror #2
 80035a2:	444b      	add	r3, r9
 80035a4:	ea88 28fc 	eor.w	r8, r8, ip, ror #11
 80035a8:	4027      	ands	r7, r4
 80035aa:	ea86 367b 	eor.w	r6, r6, fp, ror #13
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 80035ae:	7a48      	ldrb	r0, [r1, #9]
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 80035b0:	ea88 687c 	eor.w	r8, r8, ip, ror #25
 80035b4:	ea86 56bb 	eor.w	r6, r6, fp, ror #22
 80035b8:	4413      	add	r3, r2
 80035ba:	432f      	orrs	r7, r5
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 80035bc:	7a0c      	ldrb	r4, [r1, #8]
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 80035be:	4443      	add	r3, r8
 80035c0:	4437      	add	r7, r6
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 80035c2:	7acd      	ldrb	r5, [r1, #11]
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 80035c4:	441f      	add	r7, r3
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 80035c6:	0400      	lsls	r0, r0, #16
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 80035c8:	970b      	str	r7, [sp, #44]	; 0x2c
 80035ca:	9e06      	ldr	r6, [sp, #24]
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 80035cc:	9f04      	ldr	r7, [sp, #16]
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 80035ce:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 80035d2:	7a8c      	ldrb	r4, [r1, #10]
 80035d4:	4328      	orrs	r0, r5
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 80035d6:	441e      	add	r6, r3
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 80035d8:	ea8c 0907 	eor.w	r9, ip, r7
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 80035dc:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
 80035e0:	940e      	str	r4, [sp, #56]	; 0x38
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 80035e2:	9803      	ldr	r0, [sp, #12]
 80035e4:	ea06 0909 	and.w	r9, r6, r9
 80035e8:	4a90      	ldr	r2, [pc, #576]	; (800382c <sha256_process+0x384>)
 80035ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80035ec:	ea89 0907 	eor.w	r9, r9, r7
 80035f0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80035f2:	4402      	add	r2, r0
 80035f4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80035f8:	ea43 080b 	orr.w	r8, r3, fp
 80035fc:	ea4f 04b3 	mov.w	r4, r3, ror #2
 8003600:	443a      	add	r2, r7
 8003602:	ea03 070b 	and.w	r7, r3, fp
 8003606:	9b08      	ldr	r3, [sp, #32]
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 8003608:	7b48      	ldrb	r0, [r1, #13]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 800360a:	ea4f 15b6 	mov.w	r5, r6, ror #6
 800360e:	ea08 0803 	and.w	r8, r8, r3
 8003612:	ea84 347a 	eor.w	r4, r4, sl, ror #13
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 8003616:	7b0b      	ldrb	r3, [r1, #12]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 8003618:	ea84 54ba 	eor.w	r4, r4, sl, ror #22
 800361c:	ea85 25f6 	eor.w	r5, r5, r6, ror #11
 8003620:	ea48 0807 	orr.w	r8, r8, r7
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 8003624:	0400      	lsls	r0, r0, #16
 8003626:	7bcf      	ldrb	r7, [r1, #15]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 8003628:	ea85 6576 	eor.w	r5, r5, r6, ror #25
 800362c:	444a      	add	r2, r9
 800362e:	44a0      	add	r8, r4
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 8003630:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 8003634:	7b8c      	ldrb	r4, [r1, #14]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 8003636:	442a      	add	r2, r5
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 8003638:	433b      	orrs	r3, r7
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 800363a:	9d07      	ldr	r5, [sp, #28]
 800363c:	4490      	add	r8, r2
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 800363e:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 8003642:	4415      	add	r5, r2
 8003644:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 8003648:	7c4f      	ldrb	r7, [r1, #17]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 800364a:	4879      	ldr	r0, [pc, #484]	; (8003830 <sha256_process+0x388>)
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 800364c:	940f      	str	r4, [sp, #60]	; 0x3c
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 800364e:	9a04      	ldr	r2, [sp, #16]

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 8003650:	7c0b      	ldrb	r3, [r1, #16]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 8003652:	4410      	add	r0, r2
 8003654:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 8003656:	930a      	str	r3, [sp, #40]	; 0x28
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 8003658:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800365a:	ea48 0402 	orr.w	r4, r8, r2
 800365e:	ea4f 02b8 	mov.w	r2, r8, ror #2

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 8003662:	f891 8013 	ldrb.w	r8, [r1, #19]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 8003666:	4403      	add	r3, r0
 8003668:	9309      	str	r3, [sp, #36]	; 0x24

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 800366a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 800366e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003670:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8003674:	ea86 0a0c 	eor.w	sl, r6, ip
 8003678:	ea03 0008 	and.w	r0, r3, r8
 800367c:	ea05 0a0a 	and.w	sl, r5, sl
 8003680:	ea82 3273 	eor.w	r2, r2, r3, ror #13
 8003684:	9b09      	ldr	r3, [sp, #36]	; 0x24

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 8003686:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 800368a:	ea04 040b 	and.w	r4, r4, fp
 800368e:	ea8a 0a0c 	eor.w	sl, sl, ip
 8003692:	449a      	add	sl, r3
 8003694:	ea4f 19b5 	mov.w	r9, r5, ror #6
 8003698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800369a:	4320      	orrs	r0, r4

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 800369c:	043f      	lsls	r7, r7, #16
 800369e:	9c10      	ldr	r4, [sp, #64]	; 0x40
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80036a0:	ea89 29f5 	eor.w	r9, r9, r5, ror #11

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80036a4:	ea47 6708 	orr.w	r7, r7, r8, lsl #24
 80036a8:	f891 8012 	ldrb.w	r8, [r1, #18]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80036ac:	ea82 52b3 	eor.w	r2, r2, r3, ror #22

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80036b0:	4327      	orrs	r7, r4
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80036b2:	ea89 6975 	eor.w	r9, r9, r5, ror #25
 80036b6:	44d1      	add	r9, sl

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80036b8:	ea47 2808 	orr.w	r8, r7, r8, lsl #8
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80036bc:	4410      	add	r0, r2
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 80036be:	7d4f      	ldrb	r7, [r1, #21]

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 80036c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80036c2:	4b5c      	ldr	r3, [pc, #368]	; (8003834 <sha256_process+0x38c>)
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80036c4:	4448      	add	r0, r9
 80036c6:	9009      	str	r0, [sp, #36]	; 0x24
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 80036c8:	9712      	str	r7, [sp, #72]	; 0x48

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80036ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 80036ce:	4443      	add	r3, r8
 80036d0:	ea4f 07b0 	mov.w	r7, r0, ror #2
 80036d4:	ea40 0802 	orr.w	r8, r0, r2
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 80036d8:	7d08      	ldrb	r0, [r1, #20]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80036da:	9c08      	ldr	r4, [sp, #32]
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 80036dc:	9011      	str	r0, [sp, #68]	; 0x44

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 80036de:	4463      	add	r3, ip
 80036e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80036e2:	444c      	add	r4, r9
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 80036e4:	930a      	str	r3, [sp, #40]	; 0x28
 80036e6:	ea85 0a06 	eor.w	sl, r5, r6
 80036ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036ec:	ea08 0800 	and.w	r8, r8, r0
 80036f0:	ea04 0a0a 	and.w	sl, r4, sl
 80036f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80036f6:	ea03 0c02 	and.w	ip, r3, r2
 80036fa:	ea8a 0a06 	eor.w	sl, sl, r6
 80036fe:	ea87 3773 	eor.w	r7, r7, r3, ror #13
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 8003702:	9b12      	ldr	r3, [sp, #72]	; 0x48

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8003704:	ea4f 19b4 	mov.w	r9, r4, ror #6
 8003708:	4482      	add	sl, r0
 800370a:	ea48 0c0c 	orr.w	ip, r8, ip
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 800370e:	9811      	ldr	r0, [sp, #68]	; 0x44

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8003710:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8003714:	ea89 29f4 	eor.w	r9, r9, r4, ror #11
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 8003718:	041a      	lsls	r2, r3, #16
 800371a:	7dcb      	ldrb	r3, [r1, #23]

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 800371c:	ea89 6974 	eor.w	r9, r9, r4, ror #25
 8003720:	ea87 57b8 	eor.w	r7, r7, r8, ror #22
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 8003724:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8003728:	f891 8016 	ldrb.w	r8, [r1, #22]

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 800372c:	44ca      	add	sl, r9
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 800372e:	431a      	orrs	r2, r3

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8003730:	44bc      	add	ip, r7
 8003732:	44d4      	add	ip, sl
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 8003734:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8003738:	4b3f      	ldr	r3, [pc, #252]	; (8003838 <sha256_process+0x390>)

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 800373a:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 800373e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    GET_UINT32( W[6],  data, 24 );
 8003742:	7e4a      	ldrb	r2, [r1, #25]
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8003744:	4443      	add	r3, r8
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 8003746:	9212      	str	r2, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8003748:	441e      	add	r6, r3
 800374a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800374c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800374e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003750:	ea02 0803 	and.w	r8, r2, r3
 8003754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003756:	ea4c 0907 	orr.w	r9, ip, r7
 800375a:	ea4f 0cbc 	mov.w	ip, ip, ror #2

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 800375e:	eb0a 000b 	add.w	r0, sl, fp
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8003762:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003764:	ea84 0b05 	eor.w	fp, r4, r5
 8003768:	ea8c 3c73 	eor.w	ip, ip, r3, ror #13
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 800376c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800376e:	7e0f      	ldrb	r7, [r1, #24]
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8003770:	ea00 0b0b 	and.w	fp, r0, fp
 8003774:	ea8b 0b05 	eor.w	fp, fp, r5
 8003778:	ea09 0902 	and.w	r9, r9, r2
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 800377c:	041a      	lsls	r2, r3, #16
 800377e:	7ecb      	ldrb	r3, [r1, #27]
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8003780:	445e      	add	r6, fp
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 8003782:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
 8003786:	f891 b01a 	ldrb.w	fp, [r1, #26]
 800378a:	ea42 0703 	orr.w	r7, r2, r3
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 800378e:	ea49 0808 	orr.w	r8, r9, r8
 8003792:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 8003796:	ea47 2b0b 	orr.w	fp, r7, fp, lsl #8
 800379a:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 800379e:	ea8c 5cb9 	eor.w	ip, ip, r9, ror #22
 80037a2:	ea4f 1ab0 	mov.w	sl, r0, ror #6
 80037a6:	ea8a 2af0 	eor.w	sl, sl, r0, ror #11
 80037aa:	44e0      	add	r8, ip
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80037ac:	4b23      	ldr	r3, [pc, #140]	; (800383c <sha256_process+0x394>)
 80037ae:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80037b2:	ea8a 6a70 	eor.w	sl, sl, r0, ror #25
 80037b6:	4456      	add	r6, sl
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80037b8:	4463      	add	r3, ip
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80037ba:	44b0      	add	r8, r6
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80037bc:	441d      	add	r5, r3
 80037be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80037c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 80037c2:	f891 a01d 	ldrb.w	sl, [r1, #29]
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80037c6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80037ca:	ea48 0909 	orr.w	r9, r8, r9
 80037ce:	ea4f 0cb8 	mov.w	ip, r8, ror #2
 80037d2:	ea08 0803 	and.w	r8, r8, r3
 80037d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 80037d8:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80037dc:	4432      	add	r2, r6
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80037de:	ea80 0b04 	eor.w	fp, r0, r4
 80037e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80037e4:	ea8c 3c73 	eor.w	ip, ip, r3, ror #13
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 80037e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80037ea:	7f0f      	ldrb	r7, [r1, #28]
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80037ec:	ea02 0b0b 	and.w	fp, r2, fp
 80037f0:	ea8b 0b04 	eor.w	fp, fp, r4
 80037f4:	ea09 0906 	and.w	r9, r9, r6
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 80037f8:	041e      	lsls	r6, r3, #16
 80037fa:	7fcb      	ldrb	r3, [r1, #31]
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80037fc:	445d      	add	r5, fp
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 80037fe:	ea46 6607 	orr.w	r6, r6, r7, lsl #24
 8003802:	f891 b01e 	ldrb.w	fp, [r1, #30]
 8003806:	431e      	orrs	r6, r3
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003808:	ea4f 1ab2 	mov.w	sl, r2, ror #6
 800380c:	ea49 0808 	orr.w	r8, r9, r8
 8003810:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 8003814:	ea46 2b0b 	orr.w	fp, r6, fp, lsl #8
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003818:	ea8a 2af2 	eor.w	sl, sl, r2, ror #11
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 800381c:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8003820:	e00e      	b.n	8003840 <sha256_process+0x398>
 8003822:	bf00      	nop
 8003824:	428a2f98 	addmi	r2, sl, #152, 30	; 0x260
 8003828:	71374491 			; <UNDEFINED> instruction: 0x71374491
 800382c:	b5c0fbcf 	strblt	pc, [r0, #3023]	; 0xbcf	; <UNPREDICTABLE>
 8003830:	e9b5dba5 	ldmib	r5!, {r0, r2, r5, r7, r8, r9, fp, ip, lr, pc}
 8003834:	3956c25b 	ldmdbcc	r6, {r0, r1, r3, r4, r6, r9, lr, pc}^
 8003838:	59f111f1 	ldmibpl	r1!, {r0, r4, r5, r6, r7, r8, ip}^
 800383c:	923f82a4 	eorsls	r8, pc, #164, 4	; 0x4000000a
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003840:	ea8c 5cb9 	eor.w	ip, ip, r9, ror #22
 8003844:	ea8a 6a72 	eor.w	sl, sl, r2, ror #25
 8003848:	44aa      	add	sl, r5
 800384a:	44e0      	add	r8, ip
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 800384c:	4de9      	ldr	r5, [pc, #932]	; (8003bf4 <sha256_process+0x74c>)
 800384e:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003852:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 8003854:	4465      	add	r5, ip
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003856:	44d0      	add	r8, sl
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 8003858:	442c      	add	r4, r5
 800385a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 800385c:	4453      	add	r3, sl
 800385e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 8003862:	f891 a021 	ldrb.w	sl, [r1, #33]	; 0x21
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 8003866:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003868:	ea48 0909 	orr.w	r9, r8, r9
 800386c:	ea4f 0cb8 	mov.w	ip, r8, ror #2
 8003870:	ea08 0805 	and.w	r8, r8, r5
 8003874:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 8003876:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 800387a:	ea82 0b00 	eor.w	fp, r2, r0
 800387e:	ea09 0906 	and.w	r9, r9, r6
 8003882:	ea8c 3c75 	eor.w	ip, ip, r5, ror #13
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 8003886:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003888:	f891 7020 	ldrb.w	r7, [r1, #32]
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 800388c:	ea03 0b0b 	and.w	fp, r3, fp
 8003890:	ea4f 1ab3 	mov.w	sl, r3, ror #6
 8003894:	ea49 0808 	orr.w	r8, r9, r8
 8003898:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800389c:	ea8b 0b00 	eor.w	fp, fp, r0
 80038a0:	ea8a 2af3 	eor.w	sl, sl, r3, ror #11
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80038a4:	042e      	lsls	r6, r5, #16
 80038a6:	f891 5023 	ldrb.w	r5, [r1, #35]	; 0x23
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80038aa:	ea8a 6a73 	eor.w	sl, sl, r3, ror #25
 80038ae:	ea8c 5cb9 	eor.w	ip, ip, r9, ror #22
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80038b2:	ea46 6607 	orr.w	r6, r6, r7, lsl #24
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80038b6:	445c      	add	r4, fp
 80038b8:	4454      	add	r4, sl
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80038ba:	4335      	orrs	r5, r6
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80038bc:	44e0      	add	r8, ip
 80038be:	9e09      	ldr	r6, [sp, #36]	; 0x24
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80038c0:	f891 b022 	ldrb.w	fp, [r1, #34]	; 0x22
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80038c4:	44a0      	add	r8, r4
 80038c6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80038ca:	4426      	add	r6, r4
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 80038cc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80038d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 80038d2:	f891 a025 	ldrb.w	sl, [r1, #37]	; 0x25
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 80038d6:	4fc8      	ldr	r7, [pc, #800]	; (8003bf8 <sha256_process+0x750>)
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80038d8:	ea45 2b0b 	orr.w	fp, r5, fp, lsl #8
    GET_UINT32( W[9],  data, 36 );
 80038dc:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80038e0:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 80038e4:	ea83 0902 	eor.w	r9, r3, r2
 80038e8:	445f      	add	r7, fp
 80038ea:	ea4f 0abc 	mov.w	sl, ip, ror #2
 80038ee:	ea4c 0b04 	orr.w	fp, ip, r4
 80038f2:	ea0c 0c04 	and.w	ip, ip, r4
 80038f6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80038f8:	ea06 0909 	and.w	r9, r6, r9
 80038fc:	ea89 0902 	eor.w	r9, r9, r2
 8003900:	4438      	add	r0, r7
 8003902:	ea8a 3a74 	eor.w	sl, sl, r4, ror #13
 8003906:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 8003908:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800390a:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 800390e:	ea4f 18b6 	mov.w	r8, r6, ror #6
 8003912:	4448      	add	r0, r9
 8003914:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003918:	ea88 28f6 	eor.w	r8, r8, r6, ror #11
 800391c:	ea0b 0b07 	and.w	fp, fp, r7
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 8003920:	0427      	lsls	r7, r4, #16
 8003922:	f891 4027 	ldrb.w	r4, [r1, #39]	; 0x27
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 8003926:	ea88 6876 	eor.w	r8, r8, r6, ror #25
 800392a:	ea8a 5ab9 	eor.w	sl, sl, r9, ror #22
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 800392e:	ea47 6505 	orr.w	r5, r7, r5, lsl #24
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 8003932:	ea4b 0b0c 	orr.w	fp, fp, ip
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 8003936:	f891 7026 	ldrb.w	r7, [r1, #38]	; 0x26
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 800393a:	4440      	add	r0, r8
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 800393c:	432c      	orrs	r4, r5
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 800393e:	44d3      	add	fp, sl
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 8003940:	4dae      	ldr	r5, [pc, #696]	; (8003bfc <sha256_process+0x754>)
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 8003942:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 8003946:	ea44 2707 	orr.w	r7, r4, r7, lsl #8
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 800394a:	4483      	add	fp, r0
 800394c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 8003950:	443d      	add	r5, r7
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 8003952:	4481      	add	r9, r0
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 8003954:	442a      	add	r2, r5
 8003956:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003958:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 800395a:	f891 a029 	ldrb.w	sl, [r1, #41]	; 0x29
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 800395e:	9714      	str	r7, [sp, #80]	; 0x50
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 8003960:	ea4b 0b00 	orr.w	fp, fp, r0
 8003964:	ea05 0700 	and.w	r7, r5, r0
 8003968:	980c      	ldr	r0, [sp, #48]	; 0x30
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 800396a:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 800396e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003970:	ea86 0803 	eor.w	r8, r6, r3
 8003974:	ea0b 0b00 	and.w	fp, fp, r0
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 8003978:	9815      	ldr	r0, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 800397a:	ea09 0808 	and.w	r8, r9, r8
 800397e:	ea4f 1cb9 	mov.w	ip, r9, ror #6
 8003982:	ea4f 0ab4 	mov.w	sl, r4, ror #2
 8003986:	ea4b 0b07 	orr.w	fp, fp, r7
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 800398a:	f891 4028 	ldrb.w	r4, [r1, #40]	; 0x28
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 800398e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003990:	ea88 0803 	eor.w	r8, r8, r3
 8003994:	ea8c 2cf9 	eor.w	ip, ip, r9, ror #11
 8003998:	ea8a 3a75 	eor.w	sl, sl, r5, ror #13
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 800399c:	0405      	lsls	r5, r0, #16
 800399e:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80039a2:	ea8c 6c79 	eor.w	ip, ip, r9, ror #25
 80039a6:	ea8a 5ab7 	eor.w	sl, sl, r7, ror #22
 80039aa:	4442      	add	r2, r8
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 80039ac:	ea45 6404 	orr.w	r4, r5, r4, lsl #24
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80039b0:	4462      	add	r2, ip
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 80039b2:	f891 802a 	ldrb.w	r8, [r1, #42]	; 0x2a
 80039b6:	4304      	orrs	r4, r0
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80039b8:	44d3      	add	fp, sl
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80039ba:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80039bc:	4493      	add	fp, r2
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80039be:	4d90      	ldr	r5, [pc, #576]	; (8003c00 <sha256_process+0x758>)
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80039c0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 80039c2:	ea44 2808 	orr.w	r8, r4, r8, lsl #8
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80039c6:	ea4b 0c00 	orr.w	ip, fp, r0
 80039ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80039cc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80039d0:	4445      	add	r5, r8
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80039d2:	4417      	add	r7, r2
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80039d4:	ea89 0a06 	eor.w	sl, r9, r6
 80039d8:	ea4f 04bb 	mov.w	r4, fp, ror #2
 80039dc:	442b      	add	r3, r5
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 80039de:	f891 b02c 	ldrb.w	fp, [r1, #44]	; 0x2c
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80039e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80039e4:	ea0c 0c00 	and.w	ip, ip, r0
 80039e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80039ea:	ea07 0a0a 	and.w	sl, r7, sl
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 80039ee:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
 80039f2:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80039f6:	ea05 0b00 	and.w	fp, r5, r0
 80039fa:	ea8a 0a06 	eor.w	sl, sl, r6
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 80039fe:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003a02:	4453      	add	r3, sl
 8003a04:	ea4f 18b7 	mov.w	r8, r7, ror #6
 8003a08:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8003a0c:	ea4c 0c0b 	orr.w	ip, ip, fp
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003a10:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003a14:	ea88 28f7 	eor.w	r8, r8, r7, ror #11
 8003a18:	ea84 3475 	eor.w	r4, r4, r5, ror #13
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003a1c:	0412      	lsls	r2, r2, #16
 8003a1e:	f891 502f 	ldrb.w	r5, [r1, #47]	; 0x2f
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003a22:	ea88 6877 	eor.w	r8, r8, r7, ror #25
 8003a26:	ea84 54ba 	eor.w	r4, r4, sl, ror #22
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003a2a:	ea42 620b 	orr.w	r2, r2, fp, lsl #24
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003a2e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003a32:	f891 b02e 	ldrb.w	fp, [r1, #46]	; 0x2e
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003a36:	4443      	add	r3, r8
 8003a38:	44a4      	add	ip, r4
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003a3a:	432a      	orrs	r2, r5
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003a3c:	4c71      	ldr	r4, [pc, #452]	; (8003c04 <sha256_process+0x75c>)
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003a3e:	eb0c 0803 	add.w	r8, ip, r3
 8003a42:	449a      	add	sl, r3
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003a44:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003a48:	ea87 0c09 	eor.w	ip, r7, r9
 8003a4c:	445c      	add	r4, fp
 8003a4e:	ea0a 0c0c 	and.w	ip, sl, ip
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003a52:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003a56:	ea8c 0c09 	eor.w	ip, ip, r9
 8003a5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003a5c:	4426      	add	r6, r4
 8003a5e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003a62:	f891 4030 	ldrb.w	r4, [r1, #48]	; 0x30
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003a66:	4466      	add	r6, ip
 8003a68:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8003a6c:	ea48 0002 	orr.w	r0, r8, r2
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003a70:	940c      	str	r4, [sp, #48]	; 0x30
 8003a72:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003a76:	ea00 000b 	and.w	r0, r0, fp
 8003a7a:	ea08 0b0c 	and.w	fp, r8, ip
 8003a7e:	ea4f 15ba 	mov.w	r5, sl, ror #6
 8003a82:	ea4f 02b8 	mov.w	r2, r8, ror #2
 8003a86:	ea40 000b 	orr.w	r0, r0, fp
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003a8a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8003a8e:	f891 4033 	ldrb.w	r4, [r1, #51]	; 0x33
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003a92:	ea85 25fa 	eor.w	r5, r5, sl, ror #11
 8003a96:	ea82 3278 	eor.w	r2, r2, r8, ror #13
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003a9a:	041b      	lsls	r3, r3, #16
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003a9c:	ea85 657a 	eor.w	r5, r5, sl, ror #25
 8003aa0:	ea82 52b8 	eor.w	r2, r2, r8, ror #22
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003aa4:	ea43 630b 	orr.w	r3, r3, fp, lsl #24
 8003aa8:	f891 b032 	ldrb.w	fp, [r1, #50]	; 0x32
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003aac:	442e      	add	r6, r5
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003aae:	4323      	orrs	r3, r4
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003ab0:	4410      	add	r0, r2
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003ab2:	4a55      	ldr	r2, [pc, #340]	; (8003c08 <sha256_process+0x760>)
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003ab4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003ab6:	ea43 2b0b 	orr.w	fp, r3, fp, lsl #8
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003aba:	4430      	add	r0, r6
 8003abc:	9009      	str	r0, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003abe:	445a      	add	r2, fp
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003ac0:	4434      	add	r4, r6
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003ac2:	4491      	add	r9, r2
 8003ac4:	ea8a 0607 	eor.w	r6, sl, r7
 8003ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003aca:	4026      	ands	r6, r4
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003acc:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003ad0:	407e      	eors	r6, r7
 8003ad2:	ea4f 0cb2 	mov.w	ip, r2, ror #2
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003ad6:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003ada:	ea8c 3c72 	eor.w	ip, ip, r2, ror #13
 8003ade:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003ae2:	f891 2034 	ldrb.w	r2, [r1, #52]	; 0x34
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003ae6:	44b1      	add	r9, r6
 8003ae8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003aea:	ea40 0008 	orr.w	r0, r0, r8
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003aee:	041b      	lsls	r3, r3, #16
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003af0:	ea00 000b 	and.w	r0, r0, fp
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003af4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003af8:	f891 b037 	ldrb.w	fp, [r1, #55]	; 0x37
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003afc:	ea06 0208 	and.w	r2, r6, r8
 8003b00:	4310      	orrs	r0, r2
 8003b02:	ea4f 15b4 	mov.w	r5, r4, ror #6
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003b06:	f891 2036 	ldrb.w	r2, [r1, #54]	; 0x36
 8003b0a:	ea43 030b 	orr.w	r3, r3, fp
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003b0e:	ea85 25f4 	eor.w	r5, r5, r4, ror #11
 8003b12:	ea8c 5cb6 	eor.w	ip, ip, r6, ror #22
 8003b16:	ea85 6574 	eor.w	r5, r5, r4, ror #25
 8003b1a:	4484      	add	ip, r0
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003b1c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003b20:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003b22:	44a9      	add	r9, r5
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003b24:	9218      	str	r2, [sp, #96]	; 0x60
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003b26:	eb0c 0b09 	add.w	fp, ip, r9
 8003b2a:	4448      	add	r0, r9
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003b2c:	4e37      	ldr	r6, [pc, #220]	; (8003c0c <sha256_process+0x764>)
 8003b2e:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8003b32:	ea84 020a 	eor.w	r2, r4, sl
 8003b36:	444e      	add	r6, r9
 8003b38:	4002      	ands	r2, r0
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003b3a:	f891 5039 	ldrb.w	r5, [r1, #57]	; 0x39
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003b3e:	ea82 020a 	eor.w	r2, r2, sl
 8003b42:	443e      	add	r6, r7
 8003b44:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003b46:	4416      	add	r6, r2
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003b48:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003b4c:	ea4b 0307 	orr.w	r3, fp, r7
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003b50:	042d      	lsls	r5, r5, #16
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003b52:	ea03 0308 	and.w	r3, r3, r8
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003b56:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003b5a:	ea0b 0207 	and.w	r2, fp, r7
 8003b5e:	4313      	orrs	r3, r2
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003b60:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
 8003b64:	f891 703a 	ldrb.w	r7, [r1, #58]	; 0x3a
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003b68:	ea4f 1cb0 	mov.w	ip, r0, ror #6
 8003b6c:	ea4f 09bb 	mov.w	r9, fp, ror #2
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003b70:	4315      	orrs	r5, r2
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003b72:	ea8c 2cf0 	eor.w	ip, ip, r0, ror #11
 8003b76:	ea89 397b 	eor.w	r9, r9, fp, ror #13
 8003b7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003b7c:	ea8c 6c70 	eor.w	ip, ip, r0, ror #25
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003b80:	ea45 2707 	orr.w	r7, r5, r7, lsl #8
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003b84:	ea89 59bb 	eor.w	r9, r9, fp, ror #22
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003b88:	970b      	str	r7, [sp, #44]	; 0x2c
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003b8a:	4466      	add	r6, ip
 8003b8c:	4499      	add	r9, r3
 8003b8e:	4432      	add	r2, r6
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003b90:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <sha256_process+0x768>)
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003b92:	444e      	add	r6, r9
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003b94:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8003b98:	ea80 0704 	eor.w	r7, r0, r4
 8003b9c:	444b      	add	r3, r9
 8003b9e:	4017      	ands	r7, r2
 8003ba0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8003ba4:	4067      	eors	r7, r4
 8003ba6:	449a      	add	sl, r3
 8003ba8:	44ba      	add	sl, r7
 8003baa:	ea46 070b 	orr.w	r7, r6, fp
 8003bae:	ea06 030b 	and.w	r3, r6, fp
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003bb2:	f891 503d 	ldrb.w	r5, [r1, #61]	; 0x3d
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003bb6:	ea07 070c 	and.w	r7, r7, ip
 8003bba:	431f      	orrs	r7, r3
 8003bbc:	ea4f 0cb6 	mov.w	ip, r6, ror #2
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003bc0:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003bc4:	ea8c 3c76 	eor.w	ip, ip, r6, ror #13
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003bc8:	042d      	lsls	r5, r5, #16
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003bca:	ea8c 5cb6 	eor.w	ip, ip, r6, ror #22
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003bce:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8003bd2:	f891 303f 	ldrb.w	r3, [r1, #63]	; 0x3f
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003bd6:	ea4f 19b2 	mov.w	r9, r2, ror #6
 8003bda:	4467      	add	r7, ip
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003bdc:	f891 c03e 	ldrb.w	ip, [r1, #62]	; 0x3e
 8003be0:	431d      	orrs	r5, r3
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003be2:	ea89 29f2 	eor.w	r9, r9, r2, ror #11
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003be6:	490b      	ldr	r1, [pc, #44]	; (8003c14 <sha256_process+0x76c>)
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003be8:	ea45 2c0c 	orr.w	ip, r5, ip, lsl #8
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003bec:	ea89 6972 	eor.w	r9, r9, r2, ror #25
 8003bf0:	e012      	b.n	8003c18 <sha256_process+0x770>
 8003bf2:	bf00      	nop
 8003bf4:	ab1c5ed5 	blge	871b750 <_etext+0x713af4>
 8003bf8:	d807aa98 	stmdale	r7, {r3, r4, r7, r9, fp, sp, pc}
 8003bfc:	12835b01 	addne	r5, r3, #1024	; 0x400
 8003c00:	243185be 	ldrtcs	r8, [r1], #-1470	; 0x5be
 8003c04:	550c7dc3 	strpl	r7, [ip, #-3523]	; 0xdc3
 8003c08:	72be5d74 	adcsvc	r5, lr, #116, 26	; 0x1d00
 8003c0c:	80deb1fe 	ldrshhi	fp, [lr], #30
 8003c10:	9bdc06a7 	blls	77056b4 <__Stack_Size+0x7704eb4>
 8003c14:	c19bf174 	orrsgt	pc, fp, r4, ror r1	; <UNPREDICTABLE>
 8003c18:	44ca      	add	sl, r9
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c1a:	4461      	add	r1, ip
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003c1c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003c20:	eb0a 0308 	add.w	r3, sl, r8
 8003c24:	4457      	add	r7, sl
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c26:	440c      	add	r4, r1
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c28:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8003c2c:	991b      	ldr	r1, [sp, #108]	; 0x6c
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c2e:	ea82 0900 	eor.w	r9, r2, r0
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c32:	448a      	add	sl, r1
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c34:	ea03 0909 	and.w	r9, r3, r9
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c38:	990b      	ldr	r1, [sp, #44]	; 0x2c
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c3a:	ea89 0900 	eor.w	r9, r9, r0
 8003c3e:	ea4f 1cb3 	mov.w	ip, r3, ror #6
 8003c42:	444c      	add	r4, r9
 8003c44:	ea8c 2cf3 	eor.w	ip, ip, r3, ror #11
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c48:	ea4f 4971 	mov.w	r9, r1, ror #17
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c4c:	ea47 0506 	orr.w	r5, r7, r6
 8003c50:	ea4f 08b7 	mov.w	r8, r7, ror #2
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c54:	ea89 49f1 	eor.w	r9, r9, r1, ror #19
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c58:	ea8c 6c73 	eor.w	ip, ip, r3, ror #25
 8003c5c:	44a4      	add	ip, r4
 8003c5e:	ea05 050b 	and.w	r5, r5, fp
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c62:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c64:	ea88 3877 	eor.w	r8, r8, r7, ror #13
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c68:	ea89 2991 	eor.w	r9, r9, r1, lsr #10
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c6c:	ea07 0106 	and.w	r1, r7, r6
 8003c70:	ea88 58b7 	eor.w	r8, r8, r7, ror #22
 8003c74:	430d      	orrs	r5, r1
 8003c76:	4445      	add	r5, r8
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c78:	ea4f 18f4 	mov.w	r8, r4, ror #7
 8003c7c:	ea88 48b4 	eor.w	r8, r8, r4, ror #18
 8003c80:	ea88 08d4 	eor.w	r8, r8, r4, lsr #3
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c84:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c86:	44d1      	add	r9, sl
 8003c88:	49eb      	ldr	r1, [pc, #940]	; (8004038 <sha256_process+0xb90>)
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c8a:	4464      	add	r4, ip
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c8c:	44c8      	add	r8, r9
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c8e:	4465      	add	r5, ip
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c90:	4441      	add	r1, r8
 8003c92:	ea83 0c02 	eor.w	ip, r3, r2
 8003c96:	ea4f 19b4 	mov.w	r9, r4, ror #6
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003c9a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c9e:	ea04 0c0c 	and.w	ip, r4, ip
 8003ca2:	4408      	add	r0, r1
 8003ca4:	ea89 21f4 	eor.w	r1, r9, r4, ror #11
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003ca8:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003cac:	ea8c 0c02 	eor.w	ip, ip, r2
 8003cb0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003cb4:	44d1      	add	r9, sl
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003cb6:	ea45 0807 	orr.w	r8, r5, r7
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003cba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003cbe:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8003cc2:	4460      	add	r0, ip
 8003cc4:	4408      	add	r0, r1
 8003cc6:	ea08 0806 	and.w	r8, r8, r6
 8003cca:	ea05 0107 	and.w	r1, r5, r7
 8003cce:	ea4f 0cb5 	mov.w	ip, r5, ror #2
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003cd2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003cd6:	ea8c 3c75 	eor.w	ip, ip, r5, ror #13
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003cda:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003cde:	ea48 0801 	orr.w	r8, r8, r1
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003ce2:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003ce4:	ea8c 5cb5 	eor.w	ip, ip, r5, ror #22
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003ce8:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
 8003cec:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003cf0:	44e0      	add	r8, ip
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003cf2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003cf6:	ea4f 1cf1 	mov.w	ip, r1, ror #7
 8003cfa:	ea8c 4cb1 	eor.w	ip, ip, r1, ror #18
 8003cfe:	44d1      	add	r9, sl
 8003d00:	ea8c 0cd1 	eor.w	ip, ip, r1, lsr #3
 8003d04:	49cd      	ldr	r1, [pc, #820]	; (800403c <sha256_process+0xb94>)
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003d06:	4483      	add	fp, r0
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d08:	44cc      	add	ip, r9
 8003d0a:	ea84 0903 	eor.w	r9, r4, r3
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003d0e:	4480      	add	r8, r0
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d10:	4461      	add	r1, ip
 8003d12:	ea4f 10bb 	mov.w	r0, fp, ror #6
 8003d16:	ea0b 0909 	and.w	r9, fp, r9
 8003d1a:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8003d1e:	ea89 0903 	eor.w	r9, r9, r3
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d22:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d26:	440a      	add	r2, r1
 8003d28:	ea80 21fb 	eor.w	r1, r0, fp, ror #11
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d2c:	980e      	ldr	r0, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d2e:	ea48 0a05 	orr.w	sl, r8, r5
 8003d32:	ea81 617b 	eor.w	r1, r1, fp, ror #25
 8003d36:	444a      	add	r2, r9
 8003d38:	ea4f 09b8 	mov.w	r9, r8, ror #2
 8003d3c:	440a      	add	r2, r1
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d3e:	4484      	add	ip, r0
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d40:	ea08 0105 	and.w	r1, r8, r5
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d44:	980f      	ldr	r0, [sp, #60]	; 0x3c
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d46:	ea0a 0a07 	and.w	sl, sl, r7
 8003d4a:	ea89 3978 	eor.w	r9, r9, r8, ror #13
 8003d4e:	ea89 59b8 	eor.w	r9, r9, r8, ror #22
 8003d52:	ea4a 0a01 	orr.w	sl, sl, r1
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d56:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d5a:	44ca      	add	sl, r9
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d5c:	ea4f 1cf0 	mov.w	ip, r0, ror #7
 8003d60:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003d64:	ea8c 4cb0 	eor.w	ip, ip, r0, ror #18
 8003d68:	ea8c 0cd0 	eor.w	ip, ip, r0, lsr #3
 8003d6c:	ea4f 4179 	mov.w	r1, r9, ror #17
 8003d70:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003d72:	ea81 41f9 	eor.w	r1, r1, r9, ror #19
 8003d76:	4484      	add	ip, r0
 8003d78:	ea81 2199 	eor.w	r1, r1, r9, lsr #10
 8003d7c:	48b0      	ldr	r0, [pc, #704]	; (8004040 <sha256_process+0xb98>)
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d7e:	4416      	add	r6, r2
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d80:	4461      	add	r1, ip
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d82:	4492      	add	sl, r2
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d84:	4408      	add	r0, r1
 8003d86:	ea8b 0204 	eor.w	r2, fp, r4
 8003d8a:	ea4f 1cb6 	mov.w	ip, r6, ror #6
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003d8e:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d92:	4032      	ands	r2, r6
 8003d94:	4403      	add	r3, r0
 8003d96:	ea8c 20f6 	eor.w	r0, ip, r6, ror #11
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003d9a:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d9e:	4062      	eors	r2, r4
 8003da0:	910d      	str	r1, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003da2:	44e1      	add	r9, ip
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003da4:	ea4a 0108 	orr.w	r1, sl, r8
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003da8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003dac:	ea80 6076 	eor.w	r0, r0, r6, ror #25
 8003db0:	4413      	add	r3, r2
 8003db2:	4403      	add	r3, r0
 8003db4:	4029      	ands	r1, r5
 8003db6:	ea0a 0008 	and.w	r0, sl, r8
 8003dba:	ea4f 02ba 	mov.w	r2, sl, ror #2
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003dbe:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003dc2:	ea82 327a 	eor.w	r2, r2, sl, ror #13
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003dc6:	ea4f 19fc 	mov.w	r9, ip, ror #7
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003dca:	4301      	orrs	r1, r0
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003dcc:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003dce:	ea82 52ba 	eor.w	r2, r2, sl, ror #22
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003dd2:	ea89 49bc 	eor.w	r9, r9, ip, ror #18
 8003dd6:	ea89 09dc 	eor.w	r9, r9, ip, lsr #3
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003dda:	4411      	add	r1, r2
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003ddc:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8003de0:	ea4f 4270 	mov.w	r2, r0, ror #17
 8003de4:	ea82 42f0 	eor.w	r2, r2, r0, ror #19
 8003de8:	44cc      	add	ip, r9
 8003dea:	ea82 2290 	eor.w	r2, r2, r0, lsr #10
 8003dee:	4895      	ldr	r0, [pc, #596]	; (8004044 <sha256_process+0xb9c>)
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003df0:	441f      	add	r7, r3
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003df2:	4462      	add	r2, ip
 8003df4:	ea86 090b 	eor.w	r9, r6, fp
 8003df8:	4410      	add	r0, r2
 8003dfa:	ea07 0909 	and.w	r9, r7, r9
 8003dfe:	ea4f 1cb7 	mov.w	ip, r7, ror #6
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003e02:	4419      	add	r1, r3
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003e04:	920e      	str	r2, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e06:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003e08:	ea89 090b 	eor.w	r9, r9, fp
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e0c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003e0e:	4420      	add	r0, r4
 8003e10:	ea8c 2cf7 	eor.w	ip, ip, r7, ror #11
 8003e14:	ea41 040a 	orr.w	r4, r1, sl
 8003e18:	ea8c 6c77 	eor.w	ip, ip, r7, ror #25
 8003e1c:	4448      	add	r0, r9
 8003e1e:	ea4f 09b1 	mov.w	r9, r1, ror #2
 8003e22:	4460      	add	r0, ip
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e24:	441a      	add	r2, r3
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003e26:	ea01 0c0a 	and.w	ip, r1, sl
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003e2c:	ea04 0408 	and.w	r4, r4, r8
 8003e30:	ea89 3971 	eor.w	r9, r9, r1, ror #13
 8003e34:	ea89 59b1 	eor.w	r9, r9, r1, ror #22
 8003e38:	ea44 040c 	orr.w	r4, r4, ip
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e3c:	920f      	str	r2, [sp, #60]	; 0x3c
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003e3e:	444c      	add	r4, r9
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e40:	ea4f 12f3 	mov.w	r2, r3, ror #7
 8003e44:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8003e48:	ea82 42b3 	eor.w	r2, r2, r3, ror #18
 8003e4c:	ea82 02d3 	eor.w	r2, r2, r3, lsr #3
 8003e50:	ea4f 4c79 	mov.w	ip, r9, ror #17
 8003e54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003e56:	ea8c 4cf9 	eor.w	ip, ip, r9, ror #19
 8003e5a:	4413      	add	r3, r2
 8003e5c:	ea8c 2c99 	eor.w	ip, ip, r9, lsr #10
 8003e60:	4a79      	ldr	r2, [pc, #484]	; (8004048 <sha256_process+0xba0>)
 8003e62:	449c      	add	ip, r3
 8003e64:	4462      	add	r2, ip
 8003e66:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003e6a:	4405      	add	r5, r0
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e6c:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e70:	ea87 0306 	eor.w	r3, r7, r6
 8003e74:	4493      	add	fp, r2
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e78:	402b      	ands	r3, r5
 8003e7a:	ea4f 1cb5 	mov.w	ip, r5, ror #6
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003e7e:	4404      	add	r4, r0
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e80:	4073      	eors	r3, r6
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e82:	444a      	add	r2, r9
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e84:	ea8c 2cf5 	eor.w	ip, ip, r5, ror #11
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e88:	9210      	str	r2, [sp, #64]	; 0x40
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e8a:	ea44 0001 	orr.w	r0, r4, r1
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e90:	449b      	add	fp, r3
 8003e92:	ea8c 6c75 	eor.w	ip, ip, r5, ror #25
 8003e96:	44dc      	add	ip, fp
 8003e98:	ea00 000a 	and.w	r0, r0, sl
 8003e9c:	ea04 0b01 	and.w	fp, r4, r1
 8003ea0:	ea4f 09b4 	mov.w	r9, r4, ror #2
 8003ea4:	ea89 3974 	eor.w	r9, r9, r4, ror #13
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003ea8:	ea4f 13f2 	mov.w	r3, r2, ror #7
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003eac:	ea40 000b 	orr.w	r0, r0, fp
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003eb0:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003eb4:	ea89 59b4 	eor.w	r9, r9, r4, ror #22
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003eb8:	ea83 43b2 	eor.w	r3, r3, r2, ror #18
 8003ebc:	ea83 03d2 	eor.w	r3, r3, r2, lsr #3
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003ec0:	4448      	add	r0, r9
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003ec2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003ec4:	ea4f 497b 	mov.w	r9, fp, ror #17
 8003ec8:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8003ecc:	441a      	add	r2, r3
 8003ece:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 8003ed2:	4b5e      	ldr	r3, [pc, #376]	; (800404c <sha256_process+0xba4>)
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003ed4:	44e0      	add	r8, ip
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003ed6:	4491      	add	r9, r2
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003ed8:	4460      	add	r0, ip
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003eda:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8003ede:	ea85 0c07 	eor.w	ip, r5, r7
 8003ee2:	444b      	add	r3, r9
 8003ee4:	ea4f 19b8 	mov.w	r9, r8, ror #6
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003ee8:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003eec:	ea08 0c0c 	and.w	ip, r8, ip
 8003ef0:	441e      	add	r6, r3
 8003ef2:	ea89 23f8 	eor.w	r3, r9, r8, ror #11
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003ef6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003efa:	ea8c 0c07 	eor.w	ip, ip, r7
 8003efe:	ea40 0204 	orr.w	r2, r0, r4
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f02:	44d9      	add	r9, fp
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003f04:	ea83 6378 	eor.w	r3, r3, r8, ror #25
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f08:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003f0c:	4466      	add	r6, ip
 8003f0e:	441e      	add	r6, r3
 8003f10:	400a      	ands	r2, r1
 8003f12:	ea00 0304 	and.w	r3, r0, r4
 8003f16:	ea4f 0cb0 	mov.w	ip, r0, ror #2
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f1a:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003f1e:	ea8c 3c70 	eor.w	ip, ip, r0, ror #13
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f22:	ea4f 19fb 	mov.w	r9, fp, ror #7
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003f26:	431a      	orrs	r2, r3
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003f2a:	ea8c 5cb0 	eor.w	ip, ip, r0, ror #22
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f2e:	ea89 49bb 	eor.w	r9, r9, fp, ror #18
 8003f32:	ea89 09db 	eor.w	r9, r9, fp, lsr #3
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003f36:	4462      	add	r2, ip
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f38:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8003f3c:	ea4f 4c73 	mov.w	ip, r3, ror #17
 8003f40:	ea8c 4cf3 	eor.w	ip, ip, r3, ror #19
 8003f44:	44cb      	add	fp, r9
 8003f46:	ea8c 2c93 	eor.w	ip, ip, r3, lsr #10
 8003f4a:	44dc      	add	ip, fp
 8003f4c:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8003f50:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8003f54:	4b3e      	ldr	r3, [pc, #248]	; (8004050 <sha256_process+0xba8>)
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003f56:	4432      	add	r2, r6
 8003f58:	44b2      	add	sl, r6
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f5a:	ea88 0c05 	eor.w	ip, r8, r5
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f5e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f60:	444b      	add	r3, r9
 8003f62:	ea0a 0c0c 	and.w	ip, sl, ip
 8003f66:	ea8c 0c05 	eor.w	ip, ip, r5
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f6a:	ea4f 1bf6 	mov.w	fp, r6, ror #7
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f6e:	441f      	add	r7, r3
 8003f70:	ea4f 19ba 	mov.w	r9, sl, ror #6
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f74:	ea8b 4bb6 	eor.w	fp, fp, r6, ror #18
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f78:	ea89 29fa 	eor.w	r9, r9, sl, ror #11
 8003f7c:	4467      	add	r7, ip
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f7e:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f82:	ea42 0300 	orr.w	r3, r2, r0
 8003f86:	ea89 697a 	eor.w	r9, r9, sl, ror #25
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f8a:	ea8b 0bd6 	eor.w	fp, fp, r6, lsr #3
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f8e:	ea4f 06b2 	mov.w	r6, r2, ror #2
 8003f92:	444f      	add	r7, r9
 8003f94:	4023      	ands	r3, r4
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f96:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8003f9a:	44e3      	add	fp, ip
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f9c:	ea86 3672 	eor.w	r6, r6, r2, ror #13
 8003fa0:	ea02 0c00 	and.w	ip, r2, r0
 8003fa4:	ea86 56b2 	eor.w	r6, r6, r2, ror #22
 8003fa8:	ea43 030c 	orr.w	r3, r3, ip
 8003fac:	4433      	add	r3, r6
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003fae:	ea4f 4c79 	mov.w	ip, r9, ror #17
 8003fb2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003fb4:	ea8c 4cf9 	eor.w	ip, ip, r9, ror #19
 8003fb8:	44b3      	add	fp, r6
 8003fba:	ea8c 2c99 	eor.w	ip, ip, r9, lsr #10
 8003fbe:	4e25      	ldr	r6, [pc, #148]	; (8004054 <sha256_process+0xbac>)
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003fc0:	443b      	add	r3, r7
 8003fc2:	4439      	add	r1, r7
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003fc4:	44dc      	add	ip, fp
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003fc6:	9f14      	ldr	r7, [sp, #80]	; 0x50
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003fc8:	ea8a 0908 	eor.w	r9, sl, r8
 8003fcc:	4466      	add	r6, ip
 8003fce:	ea01 0909 	and.w	r9, r1, r9
 8003fd2:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8003fd6:	4435      	add	r5, r6
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003fd8:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8003fdc:	ea4f 1bf7 	mov.w	fp, r7, ror #7
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003fe0:	ea89 0908 	eor.w	r9, r9, r8
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003fe4:	ea8b 4bb7 	eor.w	fp, fp, r7, ror #18
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003fe8:	44a9      	add	r9, r5
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003fea:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8003fec:	ea8b 0bdc 	eor.w	fp, fp, ip, lsr #3
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003ff0:	ea43 0c02 	orr.w	ip, r3, r2
 8003ff4:	ea03 0602 	and.w	r6, r3, r2
 8003ff8:	ea4f 17b1 	mov.w	r7, r1, ror #6
 8003ffc:	ea0c 0c00 	and.w	ip, ip, r0
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8004000:	445d      	add	r5, fp
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8004002:	ea4f 0bb3 	mov.w	fp, r3, ror #2
 8004006:	ea87 27f1 	eor.w	r7, r7, r1, ror #11
 800400a:	ea8b 3b73 	eor.w	fp, fp, r3, ror #13
 800400e:	ea4c 0c06 	orr.w	ip, ip, r6
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8004012:	9e11      	ldr	r6, [sp, #68]	; 0x44
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8004014:	ea87 6771 	eor.w	r7, r7, r1, ror #25
 8004018:	ea8b 5bb3 	eor.w	fp, fp, r3, ror #22
 800401c:	44b9      	add	r9, r7
 800401e:	44dc      	add	ip, fp
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8004020:	ea4f 4776 	mov.w	r7, r6, ror #17
 8004024:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004028:	ea87 47f6 	eor.w	r7, r7, r6, ror #19
 800402c:	445d      	add	r5, fp
 800402e:	ea87 2796 	eor.w	r7, r7, r6, lsr #10
 8004032:	19ef      	adds	r7, r5, r7
 8004034:	e010      	b.n	8004058 <sha256_process+0xbb0>
 8004036:	bf00      	nop
 8004038:	e49b69c1 	ldr	r6, [fp], #2497	; 0x9c1
 800403c:	efbe4786 	svc	0x00be4786
 8004040:	0fc19dc6 	svceq	0x00c19dc6
 8004044:	240ca1cc 	strcs	sl, [ip], #-460	; 0x1cc
 8004048:	2de92c6f 	stclcs	12, cr2, [r9, #444]!	; 0x1bc
 800404c:	4a7484aa 	bmi	9d252fc <_etext+0x1d1d6a0>
 8004050:	5cb0a9dc 	ldcpl	9, cr10, [r0], #880	; 0x370
 8004054:	76f988da 	usatvc	r8, #25, sl, asr #17
 8004058:	9713      	str	r7, [sp, #76]	; 0x4c
 800405a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800405e:	4ee6      	ldr	r6, [pc, #920]	; (80043f8 <sha256_process+0xf50>)
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8004060:	44cc      	add	ip, r9
 8004062:	444c      	add	r4, r9
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8004064:	ea81 050a 	eor.w	r5, r1, sl
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8004068:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 800406c:	445e      	add	r6, fp
 800406e:	4025      	ands	r5, r4
 8004070:	ea85 050a 	eor.w	r5, r5, sl
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8004074:	ea4f 17f9 	mov.w	r7, r9, ror #7
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8004078:	44b0      	add	r8, r6
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 800407a:	ea87 47b9 	eor.w	r7, r7, r9, ror #18
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 800407e:	ea4f 1bb4 	mov.w	fp, r4, ror #6
 8004082:	44a8      	add	r8, r5
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8004084:	9d14      	ldr	r5, [sp, #80]	; 0x50
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8004086:	ea8b 2bf4 	eor.w	fp, fp, r4, ror #11
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 800408a:	ea87 07d9 	eor.w	r7, r7, r9, lsr #3
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 800408e:	ea4c 0603 	orr.w	r6, ip, r3
 8004092:	ea8b 6b74 	eor.w	fp, fp, r4, ror #25
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8004096:	442f      	add	r7, r5
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8004098:	ea4f 05bc 	mov.w	r5, ip, ror #2
 800409c:	44d8      	add	r8, fp
 800409e:	ea0c 0903 	and.w	r9, ip, r3
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 80040a2:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 80040a6:	4016      	ands	r6, r2
 80040a8:	ea85 357c 	eor.w	r5, r5, ip, ror #13
 80040ac:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
 80040b0:	ea46 0609 	orr.w	r6, r6, r9
 80040b4:	442e      	add	r6, r5
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 80040b6:	ea4f 497b 	mov.w	r9, fp, ror #17
 80040ba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80040bc:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 80040c0:	442f      	add	r7, r5
 80040c2:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 80040c6:	44b9      	add	r9, r7
 80040c8:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 80040cc:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 80040d0:	4dca      	ldr	r5, [pc, #808]	; (80043fc <sha256_process+0xf54>)
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 80040d2:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 80040d6:	4440      	add	r0, r8
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 80040d8:	ea84 0701 	eor.w	r7, r4, r1
 80040dc:	445d      	add	r5, fp
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 80040de:	4446      	add	r6, r8
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 80040e0:	44aa      	add	sl, r5
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 80040e2:	ea4f 18f9 	mov.w	r8, r9, ror #7
 80040e6:	9d16      	ldr	r5, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 80040e8:	4007      	ands	r7, r0
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 80040ea:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 80040ee:	ea88 48b9 	eor.w	r8, r8, r9, ror #18
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 80040f2:	404f      	eors	r7, r1
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 80040f4:	ea88 08d5 	eor.w	r8, r8, r5, lsr #3
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 80040f8:	4457      	add	r7, sl
 80040fa:	ea46 0a0c 	orr.w	sl, r6, ip
 80040fe:	ea06 050c 	and.w	r5, r6, ip
 8004102:	ea4f 19b0 	mov.w	r9, r0, ror #6
 8004106:	ea0a 0a03 	and.w	sl, sl, r3
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 800410a:	44d8      	add	r8, fp
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 800410c:	ea4f 0bb6 	mov.w	fp, r6, ror #2
 8004110:	ea89 29f0 	eor.w	r9, r9, r0, ror #11
 8004114:	ea8b 3b76 	eor.w	fp, fp, r6, ror #13
 8004118:	ea4a 0a05 	orr.w	sl, sl, r5
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 800411c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 800411e:	ea89 6970 	eor.w	r9, r9, r0, ror #25
 8004122:	ea8b 5bb6 	eor.w	fp, fp, r6, ror #22
 8004126:	444f      	add	r7, r9
 8004128:	44da      	add	sl, fp
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 800412a:	ea4f 4975 	mov.w	r9, r5, ror #17
 800412e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8004132:	ea89 49f5 	eor.w	r9, r9, r5, ror #19
 8004136:	44d8      	add	r8, fp
 8004138:	ea89 2995 	eor.w	r9, r9, r5, lsr #10
 800413c:	44c1      	add	r9, r8
 800413e:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8004142:	44ba      	add	sl, r7
 8004144:	443a      	add	r2, r7
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8004146:	4dae      	ldr	r5, [pc, #696]	; (8004400 <sha256_process+0xf58>)
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004148:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 800414a:	ea80 0804 	eor.w	r8, r0, r4
 800414e:	444d      	add	r5, r9
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004150:	ea4f 1bf7 	mov.w	fp, r7, ror #7
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8004154:	ea02 0808 	and.w	r8, r2, r8
 8004158:	4429      	add	r1, r5
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 800415a:	ea8b 4bb7 	eor.w	fp, fp, r7, ror #18
 800415e:	9d16      	ldr	r5, [sp, #88]	; 0x58
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8004160:	ea88 0804 	eor.w	r8, r8, r4
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004164:	ea8b 0bd7 	eor.w	fp, fp, r7, lsr #3
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8004168:	4488      	add	r8, r1
 800416a:	ea4a 0106 	orr.w	r1, sl, r6
 800416e:	ea4f 19b2 	mov.w	r9, r2, ror #6
 8004172:	ea01 010c 	and.w	r1, r1, ip
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004176:	44ab      	add	fp, r5
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8004178:	ea4f 07ba 	mov.w	r7, sl, ror #2
 800417c:	ea0a 0506 	and.w	r5, sl, r6
 8004180:	ea89 29f2 	eor.w	r9, r9, r2, ror #11
 8004184:	ea87 377a 	eor.w	r7, r7, sl, ror #13
 8004188:	4329      	orrs	r1, r5
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 800418a:	9d14      	ldr	r5, [sp, #80]	; 0x50
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 800418c:	ea89 6972 	eor.w	r9, r9, r2, ror #25
 8004190:	ea87 57ba 	eor.w	r7, r7, sl, ror #22
 8004194:	44c8      	add	r8, r9
 8004196:	4439      	add	r1, r7
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004198:	ea4f 4975 	mov.w	r9, r5, ror #17
 800419c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800419e:	ea89 49f5 	eor.w	r9, r9, r5, ror #19
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 80041a2:	4441      	add	r1, r8
 80041a4:	4443      	add	r3, r8
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80041a6:	44bb      	add	fp, r7
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80041ac:	ea89 2995 	eor.w	r9, r9, r5, lsr #10
 80041b0:	4f94      	ldr	r7, [pc, #592]	; (8004404 <sha256_process+0xf5c>)
 80041b2:	44d9      	add	r9, fp
 80041b4:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 80041b8:	ea82 0500 	eor.w	r5, r2, r0
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041bc:	ea4f 1bf8 	mov.w	fp, r8, ror #7
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80041c0:	444f      	add	r7, r9
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041c2:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80041c6:	401d      	ands	r5, r3
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041c8:	ea8b 4bb8 	eor.w	fp, fp, r8, ror #18
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80041cc:	4427      	add	r7, r4
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041ce:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80041d0:	4045      	eors	r5, r0
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041d2:	ea8b 0bd9 	eor.w	fp, fp, r9, lsr #3
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80041d6:	ea41 090a 	orr.w	r9, r1, sl
 80041da:	ea4f 18b3 	mov.w	r8, r3, ror #6
 80041de:	442f      	add	r7, r5
 80041e0:	ea09 0906 	and.w	r9, r9, r6
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041e4:	44a3      	add	fp, r4
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80041e6:	ea4f 05b1 	mov.w	r5, r1, ror #2
 80041ea:	ea01 040a 	and.w	r4, r1, sl
 80041ee:	ea88 28f3 	eor.w	r8, r8, r3, ror #11
 80041f2:	ea85 3571 	eor.w	r5, r5, r1, ror #13
 80041f6:	ea49 0904 	orr.w	r9, r9, r4
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041fa:	9c15      	ldr	r4, [sp, #84]	; 0x54
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80041fc:	ea88 6873 	eor.w	r8, r8, r3, ror #25
 8004200:	ea85 55b1 	eor.w	r5, r5, r1, ror #22
 8004204:	4447      	add	r7, r8
 8004206:	44a9      	add	r9, r5
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004208:	ea4f 4874 	mov.w	r8, r4, ror #17
 800420c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800420e:	ea88 48f4 	eor.w	r8, r8, r4, ror #19
 8004212:	44ab      	add	fp, r5
 8004214:	ea88 2894 	eor.w	r8, r8, r4, lsr #10
 8004218:	44d8      	add	r8, fp
 800421a:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 800421e:	eb07 040c 	add.w	r4, r7, ip
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004222:	4d79      	ldr	r5, [pc, #484]	; (8004408 <sha256_process+0xf60>)
 8004224:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004228:	44b9      	add	r9, r7
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 800422a:	ea83 0b02 	eor.w	fp, r3, r2
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 800422e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004230:	4465      	add	r5, ip
 8004232:	ea04 0b0b 	and.w	fp, r4, fp
 8004236:	ea8b 0b02 	eor.w	fp, fp, r2
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 800423a:	ea4f 18f7 	mov.w	r8, r7, ror #7
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 800423e:	4428      	add	r0, r5
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8004240:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004242:	ea88 48b7 	eor.w	r8, r8, r7, ror #18
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004246:	4458      	add	r0, fp
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8004248:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 800424c:	ea49 0c01 	orr.w	ip, r9, r1
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8004250:	ea88 08d5 	eor.w	r8, r8, r5, lsr #3
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004254:	ea4f 17b4 	mov.w	r7, r4, ror #6
 8004258:	ea09 0501 	and.w	r5, r9, r1
 800425c:	ea0c 0c0a 	and.w	ip, ip, sl
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8004260:	44d8      	add	r8, fp
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004262:	ea4f 0bb9 	mov.w	fp, r9, ror #2
 8004266:	ea87 27f4 	eor.w	r7, r7, r4, ror #11
 800426a:	ea8b 3b79 	eor.w	fp, fp, r9, ror #13
 800426e:	ea4c 0c05 	orr.w	ip, ip, r5
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8004272:	9d16      	ldr	r5, [sp, #88]	; 0x58
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004274:	ea87 6774 	eor.w	r7, r7, r4, ror #25
 8004278:	ea8b 5bb9 	eor.w	fp, fp, r9, ror #22
 800427c:	4438      	add	r0, r7
 800427e:	44dc      	add	ip, fp
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8004280:	ea4f 4775 	mov.w	r7, r5, ror #17
 8004284:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8004288:	ea87 47f5 	eor.w	r7, r7, r5, ror #19
 800428c:	44d8      	add	r8, fp
 800428e:	ea87 2795 	eor.w	r7, r7, r5, lsr #10
 8004292:	4d5e      	ldr	r5, [pc, #376]	; (800440c <sha256_process+0xf64>)
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004294:	eb00 0b06 	add.w	fp, r0, r6
 8004298:	4484      	add	ip, r0
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 800429a:	4447      	add	r7, r8
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 800429c:	980c      	ldr	r0, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 800429e:	ea84 0603 	eor.w	r6, r4, r3
 80042a2:	443d      	add	r5, r7
 80042a4:	ea0b 0606 	and.w	r6, fp, r6
 80042a8:	405e      	eors	r6, r3
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 80042aa:	ea4f 18f0 	mov.w	r8, r0, ror #7
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80042ae:	442a      	add	r2, r5
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 80042b0:	ea88 48b0 	eor.w	r8, r8, r0, ror #18
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80042b4:	4432      	add	r2, r6
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 80042b6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80042b8:	ea88 05d0 	eor.w	r5, r8, r0, lsr #3
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80042bc:	ea4c 0809 	orr.w	r8, ip, r9
 80042c0:	9718      	str	r7, [sp, #96]	; 0x60
 80042c2:	ea08 0801 	and.w	r8, r8, r1
 80042c6:	ea0c 0009 	and.w	r0, ip, r9
 80042ca:	ea4f 17bb 	mov.w	r7, fp, ror #6
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 80042ce:	4435      	add	r5, r6
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80042d0:	ea4f 06bc 	mov.w	r6, ip, ror #2
 80042d4:	ea87 27fb 	eor.w	r7, r7, fp, ror #11
 80042d8:	ea86 367c 	eor.w	r6, r6, ip, ror #13
 80042dc:	ea48 0000 	orr.w	r0, r8, r0
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 80042e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80042e4:	ea87 677b 	eor.w	r7, r7, fp, ror #25
 80042e8:	ea86 56bc 	eor.w	r6, r6, ip, ror #22
 80042ec:	443a      	add	r2, r7
 80042ee:	4430      	add	r0, r6
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 80042f0:	ea4f 4778 	mov.w	r7, r8, ror #17
 80042f4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80042f6:	ea87 47f8 	eor.w	r7, r7, r8, ror #19
 80042fa:	4435      	add	r5, r6
 80042fc:	ea87 2898 	eor.w	r8, r7, r8, lsr #10
 8004300:	4e43      	ldr	r6, [pc, #268]	; (8004410 <sha256_process+0xf68>)
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8004302:	4492      	add	sl, r2
 8004304:	4410      	add	r0, r2
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004306:	9f09      	ldr	r7, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004308:	44a8      	add	r8, r5
 800430a:	ea8b 0204 	eor.w	r2, fp, r4
 800430e:	4446      	add	r6, r8
 8004310:	ea0a 0202 	and.w	r2, sl, r2
 8004314:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8004318:	4062      	eors	r2, r4
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 800431a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800431e:	ea4f 15f7 	mov.w	r5, r7, ror #7
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004322:	4433      	add	r3, r6
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004324:	ea85 45b7 	eor.w	r5, r5, r7, ror #18
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004328:	4413      	add	r3, r2
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 800432a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800432c:	ea85 05d8 	eor.w	r5, r5, r8, lsr #3
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004330:	ea40 080c 	orr.w	r8, r0, ip
 8004334:	ea08 0809 	and.w	r8, r8, r9
 8004338:	ea00 060c 	and.w	r6, r0, ip
 800433c:	ea4f 17ba 	mov.w	r7, sl, ror #6
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004340:	4415      	add	r5, r2
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004342:	ea4f 02b0 	mov.w	r2, r0, ror #2
 8004346:	ea87 27fa 	eor.w	r7, r7, sl, ror #11
 800434a:	ea82 3270 	eor.w	r2, r2, r0, ror #13
 800434e:	ea48 0606 	orr.w	r6, r8, r6
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004352:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004356:	ea87 677a 	eor.w	r7, r7, sl, ror #25
 800435a:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 800435e:	443b      	add	r3, r7
 8004360:	4416      	add	r6, r2
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004362:	ea4f 4778 	mov.w	r7, r8, ror #17
 8004366:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004368:	ea87 47f8 	eor.w	r7, r7, r8, ror #19
 800436c:	4415      	add	r5, r2
 800436e:	ea87 2798 	eor.w	r7, r7, r8, lsr #10
 8004372:	4a28      	ldr	r2, [pc, #160]	; (8004414 <sha256_process+0xf6c>)
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004374:	4419      	add	r1, r3
 8004376:	441e      	add	r6, r3
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004378:	19ef      	adds	r7, r5, r7
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 800437a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 800437c:	ea8a 050b 	eor.w	r5, sl, fp
 8004380:	443a      	add	r2, r7
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004382:	ea4f 18f3 	mov.w	r8, r3, ror #7
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004386:	400d      	ands	r5, r1
 8004388:	4422      	add	r2, r4
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 800438a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 800438c:	970c      	str	r7, [sp, #48]	; 0x30
 800438e:	ea85 050b 	eor.w	r5, r5, fp
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004392:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004394:	ea88 48b3 	eor.w	r8, r8, r3, ror #18
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004398:	ea4f 13b1 	mov.w	r3, r1, ror #6
 800439c:	ea83 23f1 	eor.w	r3, r3, r1, ror #11
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80043a0:	ea88 08d4 	eor.w	r8, r8, r4, lsr #3
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80043a4:	442a      	add	r2, r5
 80043a6:	ea46 0500 	orr.w	r5, r6, r0
 80043aa:	ea83 6471 	eor.w	r4, r3, r1, ror #25
 80043ae:	ea05 050c 	and.w	r5, r5, ip
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80043b2:	44b8      	add	r8, r7
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80043b4:	ea4f 03b6 	mov.w	r3, r6, ror #2
 80043b8:	ea06 0700 	and.w	r7, r6, r0
 80043bc:	ea83 3376 	eor.w	r3, r3, r6, ror #13
 80043c0:	432f      	orrs	r7, r5
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80043c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80043c4:	ea83 53b6 	eor.w	r3, r3, r6, ror #22
 80043c8:	4422      	add	r2, r4
 80043ca:	441f      	add	r7, r3
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80043cc:	ea4f 4475 	mov.w	r4, r5, ror #17
 80043d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80043d2:	ea84 44f5 	eor.w	r4, r4, r5, ror #19
 80043d6:	4498      	add	r8, r3
 80043d8:	ea84 2495 	eor.w	r4, r4, r5, lsr #10
 80043dc:	4444      	add	r4, r8
 80043de:	9409      	str	r4, [sp, #36]	; 0x24
 80043e0:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <sha256_process+0xf70>)
 80043e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80043e4:	4417      	add	r7, r2
 80043e6:	4491      	add	r9, r2
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80043e8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80043ea:	ea81 020a 	eor.w	r2, r1, sl
 80043ee:	442b      	add	r3, r5
 80043f0:	ea09 0202 	and.w	r2, r9, r2
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80043f4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80043f6:	e011      	b.n	800441c <sha256_process+0xf74>
 80043f8:	983e5152 	ldmdals	lr!, {r1, r4, r6, r8, ip, lr}
 80043fc:	a831c66d 	ldmdage	r1!, {r0, r2, r3, r5, r6, r9, sl, lr, pc}
 8004400:	b00327c8 	andlt	r2, r3, r8, asr #15
 8004404:	bf597fc7 	svclt	0x00597fc7
 8004408:	c6e00bf3 			; <UNDEFINED> instruction: 0xc6e00bf3
 800440c:	d5a79147 	strle	r9, [r7, #327]!	; 0x147
 8004410:	06ca6351 			; <UNDEFINED> instruction: 0x06ca6351
 8004414:	14292967 	strtne	r2, [r9], #-2407	; 0x967
 8004418:	27b70a85 	ldrcs	r0, [r7, r5, lsl #21]!
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 800441c:	ea82 020a 	eor.w	r2, r2, sl
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004420:	ea4f 18f4 	mov.w	r8, r4, ror #7
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004424:	445b      	add	r3, fp
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004426:	ea88 48b4 	eor.w	r8, r8, r4, ror #18
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 800442a:	4413      	add	r3, r2
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 800442c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800442e:	ea88 0bd5 	eor.w	fp, r8, r5, lsr #3
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004432:	ea47 0806 	orr.w	r8, r7, r6
 8004436:	ea08 0800 	and.w	r8, r8, r0
 800443a:	ea07 0506 	and.w	r5, r7, r6
 800443e:	ea4f 14b9 	mov.w	r4, r9, ror #6
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004442:	4493      	add	fp, r2
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004444:	ea4f 02b7 	mov.w	r2, r7, ror #2
 8004448:	ea84 24f9 	eor.w	r4, r4, r9, ror #11
 800444c:	ea82 3277 	eor.w	r2, r2, r7, ror #13
 8004450:	ea48 0505 	orr.w	r5, r8, r5
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004454:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004458:	ea84 6479 	eor.w	r4, r4, r9, ror #25
 800445c:	ea82 52b7 	eor.w	r2, r2, r7, ror #22
 8004460:	4423      	add	r3, r4
 8004462:	4415      	add	r5, r2
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004464:	ea4f 4478 	mov.w	r4, r8, ror #17
 8004468:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800446a:	ea84 44f8 	eor.w	r4, r4, r8, ror #19
 800446e:	4493      	add	fp, r2
 8004470:	ea84 2498 	eor.w	r4, r4, r8, lsr #10
 8004474:	445c      	add	r4, fp
 8004476:	940a      	str	r4, [sp, #40]	; 0x28
 8004478:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 800447c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 800447e:	4af1      	ldr	r2, [pc, #964]	; (8004844 <sha256_process+0x139c>)
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004480:	449c      	add	ip, r3
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004482:	ea89 0b01 	eor.w	fp, r9, r1
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004486:	441d      	add	r5, r3
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004488:	4442      	add	r2, r8
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 800448a:	ea4f 13f4 	mov.w	r3, r4, ror #7
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 800448e:	ea0c 0b0b 	and.w	fp, ip, fp
 8004492:	ea8b 0b01 	eor.w	fp, fp, r1
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004496:	ea83 43b4 	eor.w	r3, r3, r4, ror #18
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 800449a:	4452      	add	r2, sl
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 800449c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80044a0:	ea83 03d4 	eor.w	r3, r3, r4, lsr #3
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80044a4:	445a      	add	r2, fp
 80044a6:	ea45 0b07 	orr.w	fp, r5, r7
 80044aa:	ea0b 0b06 	and.w	fp, fp, r6
 80044ae:	ea05 0407 	and.w	r4, r5, r7
 80044b2:	ea4f 18bc 	mov.w	r8, ip, ror #6
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80044b6:	449a      	add	sl, r3
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80044b8:	ea4f 03b5 	mov.w	r3, r5, ror #2
 80044bc:	ea88 28fc 	eor.w	r8, r8, ip, ror #11
 80044c0:	ea83 3375 	eor.w	r3, r3, r5, ror #13
 80044c4:	ea4b 0404 	orr.w	r4, fp, r4
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80044c8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80044cc:	ea88 687c 	eor.w	r8, r8, ip, ror #25
 80044d0:	ea83 53b5 	eor.w	r3, r3, r5, ror #22
 80044d4:	4442      	add	r2, r8
 80044d6:	441c      	add	r4, r3
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80044d8:	ea4f 487b 	mov.w	r8, fp, ror #17
 80044dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80044de:	ea88 48fb 	eor.w	r8, r8, fp, ror #19
 80044e2:	449a      	add	sl, r3
 80044e4:	ea88 289b 	eor.w	r8, r8, fp, lsr #10
 80044e8:	44d0      	add	r8, sl
 80044ea:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80044ee:	4410      	add	r0, r2
 80044f0:	4414      	add	r4, r2
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80044f2:	4bd5      	ldr	r3, [pc, #852]	; (8004848 <sha256_process+0x13a0>)
 80044f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 80044f6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80044fa:	ea8c 0b09 	eor.w	fp, ip, r9
 80044fe:	4413      	add	r3, r2
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004500:	ea4f 1af8 	mov.w	sl, r8, ror #7
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004504:	ea00 0b0b 	and.w	fp, r0, fp
 8004508:	440b      	add	r3, r1
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800450a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800450c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 800450e:	ea8b 0b09 	eor.w	fp, fp, r9
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004512:	ea8a 4ab8 	eor.w	sl, sl, r8, ror #18
 8004516:	ea8a 0ad1 	eor.w	sl, sl, r1, lsr #3
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 800451a:	445b      	add	r3, fp
 800451c:	ea44 0b05 	orr.w	fp, r4, r5
 8004520:	ea0b 0b07 	and.w	fp, fp, r7
 8004524:	ea04 0105 	and.w	r1, r4, r5
 8004528:	ea4f 18b0 	mov.w	r8, r0, ror #6
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800452c:	4492      	add	sl, r2
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 800452e:	ea4f 02b4 	mov.w	r2, r4, ror #2
 8004532:	ea88 28f0 	eor.w	r8, r8, r0, ror #11
 8004536:	ea82 3274 	eor.w	r2, r2, r4, ror #13
 800453a:	ea4b 0101 	orr.w	r1, fp, r1
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800453e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004542:	ea88 6870 	eor.w	r8, r8, r0, ror #25
 8004546:	ea82 52b4 	eor.w	r2, r2, r4, ror #22
 800454a:	4443      	add	r3, r8
 800454c:	4411      	add	r1, r2
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800454e:	ea4f 487b 	mov.w	r8, fp, ror #17
 8004552:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004554:	ea88 48fb 	eor.w	r8, r8, fp, ror #19
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004558:	441e      	add	r6, r3
 800455a:	4419      	add	r1, r3
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800455c:	4492      	add	sl, r2
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 800455e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004560:	ea88 289b 	eor.w	r8, r8, fp, lsr #10
 8004564:	4ab9      	ldr	r2, [pc, #740]	; (800484c <sha256_process+0x13a4>)
 8004566:	44d0      	add	r8, sl
 8004568:	ea80 0b0c 	eor.w	fp, r0, ip
 800456c:	4442      	add	r2, r8
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 800456e:	ea4f 1af3 	mov.w	sl, r3, ror #7
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004572:	ea06 0b0b 	and.w	fp, r6, fp
 8004576:	ea8b 0b0c 	eor.w	fp, fp, ip
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 800457a:	ea8a 4ab3 	eor.w	sl, sl, r3, ror #18
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800457e:	4491      	add	r9, r2
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004580:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004582:	ea8a 0ad3 	eor.w	sl, sl, r3, lsr #3
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004586:	44d9      	add	r9, fp
 8004588:	ea41 0b04 	orr.w	fp, r1, r4
 800458c:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004590:	ea0b 0b05 	and.w	fp, fp, r5
 8004594:	ea4f 18b6 	mov.w	r8, r6, ror #6
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004598:	4492      	add	sl, r2
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800459a:	ea4f 03b1 	mov.w	r3, r1, ror #2
 800459e:	ea01 0204 	and.w	r2, r1, r4
 80045a2:	ea88 28f6 	eor.w	r8, r8, r6, ror #11
 80045a6:	ea83 3371 	eor.w	r3, r3, r1, ror #13
 80045aa:	ea4b 0202 	orr.w	r2, fp, r2
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80045ae:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 80045b2:	ea88 6876 	eor.w	r8, r8, r6, ror #25
 80045b6:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
 80045ba:	44c1      	add	r9, r8
 80045bc:	441a      	add	r2, r3
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80045be:	ea4f 487b 	mov.w	r8, fp, ror #17
 80045c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80045c4:	ea88 48fb 	eor.w	r8, r8, fp, ror #19
 80045c8:	449a      	add	sl, r3
 80045ca:	ea88 289b 	eor.w	r8, r8, fp, lsr #10
 80045ce:	44d0      	add	r8, sl
 80045d0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80045d4:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80045d8:	4b9d      	ldr	r3, [pc, #628]	; (8004850 <sha256_process+0x13a8>)
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 80045da:	444a      	add	r2, r9
 80045dc:	444f      	add	r7, r9
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80045de:	ea86 0800 	eor.w	r8, r6, r0
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80045e2:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80045e6:	445b      	add	r3, fp
 80045e8:	ea07 0808 	and.w	r8, r7, r8
 80045ec:	ea88 0800 	eor.w	r8, r8, r0
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80045f0:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80045f4:	449c      	add	ip, r3
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80045f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045f8:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80045fc:	44c4      	add	ip, r8
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80045fe:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004602:	ea42 0b01 	orr.w	fp, r2, r1
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004606:	ea8a 0ad3 	eor.w	sl, sl, r3, lsr #3
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 800460a:	ea0b 0b04 	and.w	fp, fp, r4
 800460e:	ea02 0301 	and.w	r3, r2, r1
 8004612:	ea4f 19b7 	mov.w	r9, r7, ror #6
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004616:	44c2      	add	sl, r8
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004618:	ea4f 08b2 	mov.w	r8, r2, ror #2
 800461c:	ea89 29f7 	eor.w	r9, r9, r7, ror #11
 8004620:	ea88 3872 	eor.w	r8, r8, r2, ror #13
 8004624:	ea4b 0303 	orr.w	r3, fp, r3
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004628:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 800462c:	ea89 6977 	eor.w	r9, r9, r7, ror #25
 8004630:	ea88 58b2 	eor.w	r8, r8, r2, ror #22
 8004634:	44cc      	add	ip, r9
 8004636:	4443      	add	r3, r8
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004638:	ea4f 497b 	mov.w	r9, fp, ror #17
 800463c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8004640:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8004644:	44c2      	add	sl, r8
 8004646:	ea89 2b9b 	eor.w	fp, r9, fp, lsr #10
 800464a:	44d3      	add	fp, sl
 800464c:	f8df 820c 	ldr.w	r8, [pc, #524]	; 800485c <sha256_process+0x13b4>
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004650:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004654:	4465      	add	r5, ip
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004656:	ea87 0906 	eor.w	r9, r7, r6
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 800465a:	4463      	add	r3, ip
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 800465c:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004660:	ea4f 1cfa 	mov.w	ip, sl, ror #7
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004664:	44d8      	add	r8, fp
 8004666:	ea05 0909 	and.w	r9, r5, r9
 800466a:	ea4f 1bb5 	mov.w	fp, r5, ror #6
 800466e:	ea89 0906 	eor.w	r9, r9, r6
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004672:	ea8c 4cba 	eor.w	ip, ip, sl, ror #18
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004676:	4480      	add	r8, r0
 8004678:	ea8b 2bf5 	eor.w	fp, fp, r5, ror #11
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 800467c:	9811      	ldr	r0, [sp, #68]	; 0x44
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 800467e:	ea8b 6b75 	eor.w	fp, fp, r5, ror #25
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004682:	ea8c 0cda 	eor.w	ip, ip, sl, lsr #3
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004686:	44c8      	add	r8, r9
 8004688:	ea43 0a02 	orr.w	sl, r3, r2
 800468c:	ea4f 09b3 	mov.w	r9, r3, ror #2
 8004690:	44d8      	add	r8, fp
 8004692:	ea0a 0a01 	and.w	sl, sl, r1
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004696:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800469a:	4484      	add	ip, r0
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 800469c:	ea89 3973 	eor.w	r9, r9, r3, ror #13
 80046a0:	ea03 0002 	and.w	r0, r3, r2
 80046a4:	ea89 59b3 	eor.w	r9, r9, r3, ror #22
 80046a8:	ea4a 0000 	orr.w	r0, sl, r0
 80046ac:	4448      	add	r0, r9
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80046ae:	ea4f 4a7b 	mov.w	sl, fp, ror #17
 80046b2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80046b6:	ea8a 4afb 	eor.w	sl, sl, fp, ror #19
 80046ba:	44cc      	add	ip, r9
 80046bc:	ea8a 2a9b 	eor.w	sl, sl, fp, lsr #10
 80046c0:	44e2      	add	sl, ip
 80046c2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80046c6:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8004860 <sha256_process+0x13b8>
 80046ca:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80046ce:	4440      	add	r0, r8
 80046d0:	4444      	add	r4, r8
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80046d2:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80046d6:	ea85 0807 	eor.w	r8, r5, r7
 80046da:	44d9      	add	r9, fp
 80046dc:	ea04 0808 	and.w	r8, r4, r8
 80046e0:	ea88 0807 	eor.w	r8, r8, r7
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80046e4:	ea4f 1cfa 	mov.w	ip, sl, ror #7
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80046e8:	44b1      	add	r9, r6
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80046ea:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80046ec:	44c1      	add	r9, r8
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80046ee:	ea8c 4cba 	eor.w	ip, ip, sl, ror #18
 80046f2:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80046f6:	ea40 0b03 	orr.w	fp, r0, r3
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80046fa:	ea8c 0cd6 	eor.w	ip, ip, r6, lsr #3
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80046fe:	ea0b 0b02 	and.w	fp, fp, r2
 8004702:	ea00 0603 	and.w	r6, r0, r3
 8004706:	ea4f 1ab4 	mov.w	sl, r4, ror #6
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 800470a:	44c4      	add	ip, r8
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 800470c:	ea4f 08b0 	mov.w	r8, r0, ror #2
 8004710:	ea8a 2af4 	eor.w	sl, sl, r4, ror #11
 8004714:	ea88 3870 	eor.w	r8, r8, r0, ror #13
 8004718:	ea4b 0606 	orr.w	r6, fp, r6
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 800471c:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004720:	ea88 58b0 	eor.w	r8, r8, r0, ror #22
 8004724:	ea8a 6a74 	eor.w	sl, sl, r4, ror #25
 8004728:	44ca      	add	sl, r9
 800472a:	4446      	add	r6, r8
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 800472c:	ea4f 497b 	mov.w	r9, fp, ror #17
 8004730:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8004734:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8004738:	44c4      	add	ip, r8
 800473a:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 800473e:	44e1      	add	r9, ip
 8004740:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004744:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004748:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 800474c:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8004864 <sha256_process+0x13bc>
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004750:	4451      	add	r1, sl
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004752:	ea84 0905 	eor.w	r9, r4, r5
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004756:	4456      	add	r6, sl
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004758:	44e0      	add	r8, ip
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 800475a:	ea4f 1afb 	mov.w	sl, fp, ror #7
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 800475e:	ea01 0909 	and.w	r9, r1, r9
 8004762:	ea89 0905 	eor.w	r9, r9, r5
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004766:	ea8a 4abb 	eor.w	sl, sl, fp, ror #18
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 800476a:	4447      	add	r7, r8
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 800476c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004770:	444f      	add	r7, r9
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004772:	ea8a 0adb 	eor.w	sl, sl, fp, lsr #3
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004776:	ea46 0900 	orr.w	r9, r6, r0
 800477a:	ea09 0903 	and.w	r9, r9, r3
 800477e:	ea4f 1cb1 	mov.w	ip, r1, ror #6
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004782:	44c2      	add	sl, r8
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004784:	ea4f 0bb6 	mov.w	fp, r6, ror #2
 8004788:	ea06 0800 	and.w	r8, r6, r0
 800478c:	ea8c 2cf1 	eor.w	ip, ip, r1, ror #11
 8004790:	ea8b 3b76 	eor.w	fp, fp, r6, ror #13
 8004794:	ea49 0808 	orr.w	r8, r9, r8
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004798:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 800479c:	ea8b 5bb6 	eor.w	fp, fp, r6, ror #22
 80047a0:	ea8c 6c71 	eor.w	ip, ip, r1, ror #25
 80047a4:	44bc      	add	ip, r7
 80047a6:	44d8      	add	r8, fp
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80047a8:	ea4f 4779 	mov.w	r7, r9, ror #17
 80047ac:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80047b0:	ea87 47f9 	eor.w	r7, r7, r9, ror #19
 80047b4:	44da      	add	sl, fp
 80047b6:	ea87 2999 	eor.w	r9, r7, r9, lsr #10
 80047ba:	44d1      	add	r9, sl
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80047bc:	4462      	add	r2, ip
 80047be:	44e0      	add	r8, ip
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80047c0:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80047c4:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80047c8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80047cc:	4f21      	ldr	r7, [pc, #132]	; (8004854 <sha256_process+0x13ac>)
 80047ce:	ea81 0b04 	eor.w	fp, r1, r4
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80047d2:	ea4f 19fc 	mov.w	r9, ip, ror #7
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80047d6:	4457      	add	r7, sl
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80047d8:	ea89 49bc 	eor.w	r9, r9, ip, ror #18
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80047dc:	ea02 0b0b 	and.w	fp, r2, fp
 80047e0:	ea8b 0b04 	eor.w	fp, fp, r4
 80047e4:	443d      	add	r5, r7
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80047e6:	ea89 07dc 	eor.w	r7, r9, ip, lsr #3
 80047ea:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80047ee:	445d      	add	r5, fp
 80047f0:	ea48 0b06 	orr.w	fp, r8, r6
 80047f4:	ea0b 0b00 	and.w	fp, fp, r0
 80047f8:	ea4f 1ab2 	mov.w	sl, r2, ror #6
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80047fc:	4467      	add	r7, ip
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80047fe:	ea08 0c06 	and.w	ip, r8, r6
 8004802:	ea8a 2af2 	eor.w	sl, sl, r2, ror #11
 8004806:	ea4b 0c0c 	orr.w	ip, fp, ip
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 800480a:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 800480e:	ea8a 6a72 	eor.w	sl, sl, r2, ror #25
 8004812:	44aa      	add	sl, r5
 8004814:	ea4f 09b8 	mov.w	r9, r8, ror #2
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004818:	ea4f 457b 	mov.w	r5, fp, ror #17
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 800481c:	ea89 3978 	eor.w	r9, r9, r8, ror #13
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004820:	ea85 45fb 	eor.w	r5, r5, fp, ror #19
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004824:	ea89 59b8 	eor.w	r9, r9, r8, ror #22
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004828:	ea85 2b9b 	eor.w	fp, r5, fp, lsr #10
 800482c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 800482e:	44cc      	add	ip, r9
 8004830:	44d4      	add	ip, sl
 8004832:	4453      	add	r3, sl
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004834:	442f      	add	r7, r5
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004836:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 800483a:	4d07      	ldr	r5, [pc, #28]	; (8004858 <sha256_process+0x13b0>)
 800483c:	44bb      	add	fp, r7
 800483e:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
 8004842:	e011      	b.n	8004868 <sha256_process+0x13c0>
 8004844:	2e1b2138 	mrccs	1, 0, r2, cr11, cr8, {1}
 8004848:	4d2c6dfc 	stcmi	13, cr6, [ip, #-1008]!	; 0xfffffc10
 800484c:	53380d13 	teqpl	r8, #1216	; 0x4c0
 8004850:	650a7354 	strvs	r7, [sl, #-852]	; 0x354
 8004854:	a2bfe8a1 	adcsge	lr, pc, #10551296	; 0xa10000
 8004858:	a81a664b 	ldmdage	sl, {r0, r1, r3, r6, r9, sl, sp, lr}
 800485c:	766a0abb 			; <UNDEFINED> instruction: 0x766a0abb
 8004860:	81c2c92e 	bichi	ip, r2, lr, lsr #18
 8004864:	92722c85 	rsbsls	r2, r2, #34048	; 0x8500
 8004868:	ea82 0701 	eor.w	r7, r2, r1
 800486c:	445d      	add	r5, fp
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 800486e:	ea4f 19fa 	mov.w	r9, sl, ror #7
 8004872:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004876:	401f      	ands	r7, r3
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004878:	ea89 49ba 	eor.w	r9, r9, sl, ror #18
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 800487c:	442c      	add	r4, r5
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 800487e:	9d15      	ldr	r5, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004880:	404f      	eors	r7, r1
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004882:	ea89 09db 	eor.w	r9, r9, fp, lsr #3
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004886:	ea4c 0b08 	orr.w	fp, ip, r8
 800488a:	ea0b 0b06 	and.w	fp, fp, r6
 800488e:	ea4f 1ab3 	mov.w	sl, r3, ror #6
 8004892:	443c      	add	r4, r7
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004894:	44a9      	add	r9, r5
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004896:	ea4f 07bc 	mov.w	r7, ip, ror #2
 800489a:	ea0c 0508 	and.w	r5, ip, r8
 800489e:	ea8a 2af3 	eor.w	sl, sl, r3, ror #11
 80048a2:	ea87 377c 	eor.w	r7, r7, ip, ror #13
 80048a6:	ea4b 0505 	orr.w	r5, fp, r5
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80048aa:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80048ae:	ea8a 6a73 	eor.w	sl, sl, r3, ror #25
 80048b2:	ea87 57bc 	eor.w	r7, r7, ip, ror #22
 80048b6:	4454      	add	r4, sl
 80048b8:	443d      	add	r5, r7
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80048ba:	ea4f 4a7b 	mov.w	sl, fp, ror #17
 80048be:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80048c0:	ea8a 4afb 	eor.w	sl, sl, fp, ror #19
 80048c4:	44b9      	add	r9, r7
 80048c6:	ea8a 2a9b 	eor.w	sl, sl, fp, lsr #10
 80048ca:	44ca      	add	sl, r9
 80048cc:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80048d0:	4420      	add	r0, r4
 80048d2:	4425      	add	r5, r4
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80048d4:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80048d8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80048da:	4fee      	ldr	r7, [pc, #952]	; (8004c94 <sha256_process+0x17ec>)
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80048dc:	ea4f 19fb 	mov.w	r9, fp, ror #7
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80048e0:	4427      	add	r7, r4
 80048e2:	ea83 0a02 	eor.w	sl, r3, r2
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80048e6:	ea89 49bb 	eor.w	r9, r9, fp, ror #18
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80048ea:	4439      	add	r1, r7
 80048ec:	ea4f 1bb0 	mov.w	fp, r0, ror #6
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80048f0:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80048f2:	ea8b 2bf0 	eor.w	fp, fp, r0, ror #11
 80048f6:	ea00 0a0a 	and.w	sl, r0, sl
 80048fa:	ea8a 0a02 	eor.w	sl, sl, r2
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80048fe:	ea89 09d7 	eor.w	r9, r9, r7, lsr #3
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004902:	ea8b 6770 	eor.w	r7, fp, r0, ror #25
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004906:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 800490a:	4451      	add	r1, sl
 800490c:	ea45 0a0c 	orr.w	sl, r5, ip
 8004910:	ea0a 0a08 	and.w	sl, sl, r8
 8004914:	ea05 040c 	and.w	r4, r5, ip
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004918:	44d9      	add	r9, fp
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 800491a:	ea4f 0bb5 	mov.w	fp, r5, ror #2
 800491e:	ea8b 3b75 	eor.w	fp, fp, r5, ror #13
 8004922:	ea4a 0404 	orr.w	r4, sl, r4
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004926:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 800492a:	ea8b 5bb5 	eor.w	fp, fp, r5, ror #22
 800492e:	4439      	add	r1, r7
 8004930:	445c      	add	r4, fp
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004932:	ea4f 477a 	mov.w	r7, sl, ror #17
 8004936:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800493a:	ea87 47fa 	eor.w	r7, r7, sl, ror #19
 800493e:	44d9      	add	r9, fp
 8004940:	ea87 2a9a 	eor.w	sl, r7, sl, lsr #10
 8004944:	4fd4      	ldr	r7, [pc, #848]	; (8004c98 <sha256_process+0x17f0>)
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004946:	440c      	add	r4, r1
 8004948:	440e      	add	r6, r1
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 800494a:	44ca      	add	sl, r9
 800494c:	ea80 0103 	eor.w	r1, r0, r3
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004950:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004954:	4457      	add	r7, sl
 8004956:	4031      	ands	r1, r6
 8004958:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
 800495c:	4059      	eors	r1, r3
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 800495e:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8004962:	ea4f 1bf9 	mov.w	fp, r9, ror #7
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004966:	4417      	add	r7, r2
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004968:	ea8b 4bb9 	eor.w	fp, fp, r9, ror #18
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 800496c:	440f      	add	r7, r1
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 800496e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8004970:	ea8b 0bda 	eor.w	fp, fp, sl, lsr #3
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004974:	ea44 0a05 	orr.w	sl, r4, r5
 8004978:	ea0a 0a0c 	and.w	sl, sl, ip
 800497c:	ea04 0205 	and.w	r2, r4, r5
 8004980:	ea4f 19b6 	mov.w	r9, r6, ror #6
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004984:	448b      	add	fp, r1
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004986:	ea4f 01b4 	mov.w	r1, r4, ror #2
 800498a:	ea89 29f6 	eor.w	r9, r9, r6, ror #11
 800498e:	ea81 3174 	eor.w	r1, r1, r4, ror #13
 8004992:	ea4a 0202 	orr.w	r2, sl, r2
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004996:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 800499a:	ea89 6976 	eor.w	r9, r9, r6, ror #25
 800499e:	ea81 51b4 	eor.w	r1, r1, r4, ror #22
 80049a2:	444f      	add	r7, r9
 80049a4:	440a      	add	r2, r1
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80049a6:	ea4f 497a 	mov.w	r9, sl, ror #17
 80049aa:	9910      	ldr	r1, [sp, #64]	; 0x40
 80049ac:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
 80049b0:	448b      	add	fp, r1
 80049b2:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 80049b6:	44d9      	add	r9, fp
 80049b8:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80049bc:	44b8      	add	r8, r7
 80049be:	443a      	add	r2, r7
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80049c0:	49b6      	ldr	r1, [pc, #728]	; (8004c9c <sha256_process+0x17f4>)
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80049c2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80049c4:	ea86 0b00 	eor.w	fp, r6, r0
 80049c8:	4449      	add	r1, r9
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80049ca:	ea4f 1af7 	mov.w	sl, r7, ror #7
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80049ce:	ea08 0b0b 	and.w	fp, r8, fp
 80049d2:	ea8b 0b00 	eor.w	fp, fp, r0
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80049d6:	ea8a 4ab7 	eor.w	sl, sl, r7, ror #18
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80049da:	440b      	add	r3, r1
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80049dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80049de:	ea8a 0ad7 	eor.w	sl, sl, r7, lsr #3
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80049e2:	445b      	add	r3, fp
 80049e4:	ea42 0b04 	orr.w	fp, r2, r4
 80049e8:	ea0b 0b05 	and.w	fp, fp, r5
 80049ec:	ea4f 19b8 	mov.w	r9, r8, ror #6
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80049f0:	448a      	add	sl, r1
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80049f2:	ea4f 07b2 	mov.w	r7, r2, ror #2
 80049f6:	ea02 0104 	and.w	r1, r2, r4
 80049fa:	ea89 29f8 	eor.w	r9, r9, r8, ror #11
 80049fe:	ea87 3772 	eor.w	r7, r7, r2, ror #13
 8004a02:	ea4b 0101 	orr.w	r1, fp, r1
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a06:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004a0a:	ea89 6978 	eor.w	r9, r9, r8, ror #25
 8004a0e:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 8004a12:	444b      	add	r3, r9
 8004a14:	4439      	add	r1, r7
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a16:	ea4f 497b 	mov.w	r9, fp, ror #17
 8004a1a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8004a1c:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8004a20:	44ba      	add	sl, r7
 8004a22:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 8004a26:	44d1      	add	r9, sl
 8004a28:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004a2c:	449c      	add	ip, r3
 8004a2e:	4419      	add	r1, r3
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a30:	4f9b      	ldr	r7, [pc, #620]	; (8004ca0 <sha256_process+0x17f8>)
 8004a32:	9b18      	ldr	r3, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a34:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a38:	ea88 0906 	eor.w	r9, r8, r6
 8004a3c:	441f      	add	r7, r3
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a3e:	ea4f 1afb 	mov.w	sl, fp, ror #7
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a42:	ea0c 0909 	and.w	r9, ip, r9
 8004a46:	4407      	add	r7, r0
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a48:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a4c:	ea89 0906 	eor.w	r9, r9, r6
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a50:	ea8a 4abb 	eor.w	sl, sl, fp, ror #18
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a54:	ea4f 1bbc 	mov.w	fp, ip, ror #6
 8004a58:	ea8b 2bfc 	eor.w	fp, fp, ip, ror #11
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a5c:	ea8a 0ad0 	eor.w	sl, sl, r0, lsr #3
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a60:	444f      	add	r7, r9
 8004a62:	ea41 0902 	orr.w	r9, r1, r2
 8004a66:	ea8b 607c 	eor.w	r0, fp, ip, ror #25
 8004a6a:	ea09 0904 	and.w	r9, r9, r4
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a6e:	449a      	add	sl, r3
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a70:	ea4f 0bb1 	mov.w	fp, r1, ror #2
 8004a74:	ea01 0302 	and.w	r3, r1, r2
 8004a78:	ea8b 3b71 	eor.w	fp, fp, r1, ror #13
 8004a7c:	ea49 0303 	orr.w	r3, r9, r3
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a80:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a84:	ea8b 5bb1 	eor.w	fp, fp, r1, ror #22
 8004a88:	4407      	add	r7, r0
 8004a8a:	445b      	add	r3, fp
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a8c:	ea4f 4079 	mov.w	r0, r9, ror #17
 8004a90:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8004a94:	ea80 40f9 	eor.w	r0, r0, r9, ror #19
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a98:	443b      	add	r3, r7
 8004a9a:	443d      	add	r5, r7
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a9c:	44da      	add	sl, fp
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004a9e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004aa0:	ea80 2999 	eor.w	r9, r0, r9, lsr #10
 8004aa4:	487f      	ldr	r0, [pc, #508]	; (8004ca4 <sha256_process+0x17fc>)
 8004aa6:	44d1      	add	r9, sl
 8004aa8:	ea8c 0b08 	eor.w	fp, ip, r8
 8004aac:	4448      	add	r0, r9
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004aae:	ea4f 1af7 	mov.w	sl, r7, ror #7
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004ab2:	ea05 0b0b 	and.w	fp, r5, fp
 8004ab6:	ea8b 0b08 	eor.w	fp, fp, r8
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004aba:	ea8a 4ab7 	eor.w	sl, sl, r7, ror #18
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004abe:	4406      	add	r6, r0
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004ac0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004ac2:	ea8a 0ad7 	eor.w	sl, sl, r7, lsr #3
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004ac6:	445e      	add	r6, fp
 8004ac8:	ea43 0b01 	orr.w	fp, r3, r1
 8004acc:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8004ad0:	ea0b 0b02 	and.w	fp, fp, r2
 8004ad4:	ea4f 19b5 	mov.w	r9, r5, ror #6
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004ad8:	4482      	add	sl, r0
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004ada:	ea4f 07b3 	mov.w	r7, r3, ror #2
 8004ade:	ea03 0001 	and.w	r0, r3, r1
 8004ae2:	ea89 29f5 	eor.w	r9, r9, r5, ror #11
 8004ae6:	ea87 3773 	eor.w	r7, r7, r3, ror #13
 8004aea:	ea4b 0000 	orr.w	r0, fp, r0
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004aee:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004af2:	ea89 6975 	eor.w	r9, r9, r5, ror #25
 8004af6:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
 8004afa:	444e      	add	r6, r9
 8004afc:	4438      	add	r0, r7
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004afe:	ea4f 497b 	mov.w	r9, fp, ror #17
 8004b02:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8004b04:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8004b08:	44ba      	add	sl, r7
 8004b0a:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 8004b0e:	44d1      	add	r9, sl
 8004b10:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004b14:	4430      	add	r0, r6
 8004b16:	4434      	add	r4, r6
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b18:	4f63      	ldr	r7, [pc, #396]	; (8004ca8 <sha256_process+0x1800>)
 8004b1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b1c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b20:	4437      	add	r7, r6
 8004b22:	ea85 0a0c 	eor.w	sl, r5, ip
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b26:	ea4f 1bf9 	mov.w	fp, r9, ror #7
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b2a:	4447      	add	r7, r8
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b2c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b30:	ea04 0a0a 	and.w	sl, r4, sl
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b34:	ea8b 4bb9 	eor.w	fp, fp, r9, ror #18
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b38:	ea8a 0a0c 	eor.w	sl, sl, ip
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b3c:	ea8b 0bd8 	eor.w	fp, fp, r8, lsr #3
 8004b40:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b44:	4457      	add	r7, sl
 8004b46:	ea40 0a03 	orr.w	sl, r0, r3
 8004b4a:	ea0a 0a01 	and.w	sl, sl, r1
 8004b4e:	ea00 0603 	and.w	r6, r0, r3
 8004b52:	ea4f 19b4 	mov.w	r9, r4, ror #6
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b56:	44d8      	add	r8, fp
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b58:	ea4f 0bb0 	mov.w	fp, r0, ror #2
 8004b5c:	ea89 29f4 	eor.w	r9, r9, r4, ror #11
 8004b60:	ea8b 3b70 	eor.w	fp, fp, r0, ror #13
 8004b64:	ea4a 0606 	orr.w	r6, sl, r6
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b68:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b6c:	ea8b 5bb0 	eor.w	fp, fp, r0, ror #22
 8004b70:	ea89 6974 	eor.w	r9, r9, r4, ror #25
 8004b74:	44b9      	add	r9, r7
 8004b76:	445e      	add	r6, fp
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b78:	ea4f 477a 	mov.w	r7, sl, ror #17
 8004b7c:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8004b80:	ea87 47fa 	eor.w	r7, r7, sl, ror #19
 8004b84:	44d8      	add	r8, fp
 8004b86:	ea87 2a9a 	eor.w	sl, r7, sl, lsr #10
 8004b8a:	44c2      	add	sl, r8
 8004b8c:	4f47      	ldr	r7, [pc, #284]	; (8004cac <sha256_process+0x1804>)
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004b8e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b92:	444a      	add	r2, r9
 8004b94:	444e      	add	r6, r9
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b96:	ea84 0905 	eor.w	r9, r4, r5
 8004b9a:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004b9e:	ea4f 1bf8 	mov.w	fp, r8, ror #7
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004ba2:	4457      	add	r7, sl
 8004ba4:	ea02 0909 	and.w	r9, r2, r9
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004ba8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004bac:	ea89 0905 	eor.w	r9, r9, r5
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004bb0:	ea8b 4bb8 	eor.w	fp, fp, r8, ror #18
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004bb4:	4467      	add	r7, ip
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004bb6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004bba:	444f      	add	r7, r9
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004bbc:	ea8b 0bda 	eor.w	fp, fp, sl, lsr #3
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004bc0:	ea46 0900 	orr.w	r9, r6, r0
 8004bc4:	ea09 0903 	and.w	r9, r9, r3
 8004bc8:	ea4f 18b2 	mov.w	r8, r2, ror #6
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004bcc:	44e3      	add	fp, ip
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004bce:	ea4f 0ab6 	mov.w	sl, r6, ror #2
 8004bd2:	ea06 0c00 	and.w	ip, r6, r0
 8004bd6:	ea88 28f2 	eor.w	r8, r8, r2, ror #11
 8004bda:	ea8a 3a76 	eor.w	sl, sl, r6, ror #13
 8004bde:	ea49 0c0c 	orr.w	ip, r9, ip
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004be2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004be6:	ea8a 5ab6 	eor.w	sl, sl, r6, ror #22
 8004bea:	ea88 6872 	eor.w	r8, r8, r2, ror #25
 8004bee:	44b8      	add	r8, r7
 8004bf0:	44d4      	add	ip, sl
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004bf2:	ea4f 4779 	mov.w	r7, r9, ror #17
 8004bf6:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8004bfa:	ea87 47f9 	eor.w	r7, r7, r9, ror #19
 8004bfe:	ea87 2999 	eor.w	r9, r7, r9, lsr #10
 8004c02:	44d3      	add	fp, sl
 8004c04:	4f2a      	ldr	r7, [pc, #168]	; (8004cb0 <sha256_process+0x1808>)
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004c06:	44c4      	add	ip, r8
 8004c08:	4441      	add	r1, r8
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c0a:	44cb      	add	fp, r9
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c0c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c10:	445f      	add	r7, fp
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c12:	ea4f 1af8 	mov.w	sl, r8, ror #7
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c16:	443d      	add	r5, r7
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c18:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c1a:	ea82 0904 	eor.w	r9, r2, r4
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c1e:	ea8a 4ab8 	eor.w	sl, sl, r8, ror #18
 8004c22:	ea8a 0ad7 	eor.w	sl, sl, r7, lsr #3
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c26:	ea01 0909 	and.w	r9, r1, r9
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c2a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c2c:	ea4f 18b1 	mov.w	r8, r1, ror #6
 8004c30:	ea89 0904 	eor.w	r9, r9, r4
 8004c34:	ea88 28f1 	eor.w	r8, r8, r1, ror #11
 8004c38:	444d      	add	r5, r9
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c3a:	4457      	add	r7, sl
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c3c:	ea4c 0906 	orr.w	r9, ip, r6
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c40:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c44:	ea88 6871 	eor.w	r8, r8, r1, ror #25
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c48:	9709      	str	r7, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c4a:	44a8      	add	r8, r5
 8004c4c:	ea09 0900 	and.w	r9, r9, r0
 8004c50:	ea0c 0506 	and.w	r5, ip, r6
 8004c54:	ea4f 07bc 	mov.w	r7, ip, ror #2
 8004c58:	ea87 377c 	eor.w	r7, r7, ip, ror #13
 8004c5c:	ea49 0505 	orr.w	r5, r9, r5
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c60:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c64:	ea87 57bc 	eor.w	r7, r7, ip, ror #22
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c68:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c6c:	443d      	add	r5, r7
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c6e:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 8004c72:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8004c74:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c78:	4445      	add	r5, r8
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c7a:	44ba      	add	sl, r7
 8004c7c:	44d1      	add	r9, sl
 8004c7e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004c82:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c86:	4f0b      	ldr	r7, [pc, #44]	; (8004cb4 <sha256_process+0x180c>)
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004c88:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c8c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8004c90:	e012      	b.n	8004cb8 <sha256_process+0x1810>
 8004c92:	bf00      	nop
 8004c94:	c24b8b70 	subgt	r8, fp, #112, 22	; 0x1c000
 8004c98:	c76c51a3 	strbgt	r5, [ip, -r3, lsr #3]!
 8004c9c:	d192e819 	orrsle	lr, r2, r9, lsl r8
 8004ca0:	d6990624 	ldrle	r0, [r9], r4, lsr #12
 8004ca4:	f40e3585 	vst3.32	{d3,d5,d7}, [lr], r5
 8004ca8:	106aa070 	rsbne	sl, sl, r0, ror r0
 8004cac:	19a4c116 	stmibne	r4!, {r1, r2, r4, r8, lr, pc}
 8004cb0:	1e376c08 	cdpne	12, 3, cr6, cr7, cr8, {0}
 8004cb4:	2748774c 	strbcs	r7, [r8, -ip, asr #14]
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004cb8:	4443      	add	r3, r8
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004cba:	444f      	add	r7, r9
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004cbc:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004cc0:	443c      	add	r4, r7
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004cc2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004cc4:	ea81 0802 	eor.w	r8, r1, r2
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004cc8:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004ccc:	ea03 0808 	and.w	r8, r3, r8
 8004cd0:	ea4f 19b3 	mov.w	r9, r3, ror #6
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004cd4:	ea8a 0ad7 	eor.w	sl, sl, r7, lsr #3
 8004cd8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004cda:	ea88 0802 	eor.w	r8, r8, r2
 8004cde:	ea89 29f3 	eor.w	r9, r9, r3, ror #11
 8004ce2:	ea89 6973 	eor.w	r9, r9, r3, ror #25
 8004ce6:	4444      	add	r4, r8
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004ce8:	44ba      	add	sl, r7
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004cea:	ea45 080c 	orr.w	r8, r5, ip
 8004cee:	ea4f 07b5 	mov.w	r7, r5, ror #2
 8004cf2:	444c      	add	r4, r9
 8004cf4:	ea08 0806 	and.w	r8, r8, r6
 8004cf8:	ea05 090c 	and.w	r9, r5, ip
 8004cfc:	ea87 3775 	eor.w	r7, r7, r5, ror #13
 8004d00:	ea87 57b5 	eor.w	r7, r7, r5, ror #22
 8004d04:	ea48 0809 	orr.w	r8, r8, r9
 8004d08:	44b8      	add	r8, r7
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d0a:	ea4f 497b 	mov.w	r9, fp, ror #17
 8004d0e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8004d10:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8004d14:	44ba      	add	sl, r7
 8004d16:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 8004d1a:	44d1      	add	r9, sl
 8004d1c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d20:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d24:	4fe8      	ldr	r7, [pc, #928]	; (80050c8 <sha256_process+0x1c20>)
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d26:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d2a:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004d2e:	44a0      	add	r8, r4
 8004d30:	4420      	add	r0, r4
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d32:	ea83 0401 	eor.w	r4, r3, r1
 8004d36:	444f      	add	r7, r9
 8004d38:	4004      	ands	r4, r0
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d3a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d3e:	404c      	eors	r4, r1
 8004d40:	4417      	add	r7, r2
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004d44:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d48:	4427      	add	r7, r4
 8004d4a:	ea4f 19b0 	mov.w	r9, r0, ror #6
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d4e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8004d50:	ea8a 0ad2 	eor.w	sl, sl, r2, lsr #3
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d54:	ea89 29f0 	eor.w	r9, r9, r0, ror #11
 8004d58:	ea48 0205 	orr.w	r2, r8, r5
 8004d5c:	ea89 6970 	eor.w	r9, r9, r0, ror #25
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d60:	4454      	add	r4, sl
 8004d62:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8004d66:	9409      	str	r4, [sp, #36]	; 0x24
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d68:	444f      	add	r7, r9
 8004d6a:	ea02 020c 	and.w	r2, r2, ip
 8004d6e:	ea08 0905 	and.w	r9, r8, r5
 8004d72:	ea4f 04b8 	mov.w	r4, r8, ror #2
 8004d76:	ea84 3478 	eor.w	r4, r4, r8, ror #13
 8004d7a:	ea42 0209 	orr.w	r2, r2, r9
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d7e:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d82:	ea84 54b8 	eor.w	r4, r4, r8, ror #22
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d86:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d8a:	4422      	add	r2, r4
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d8c:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 8004d90:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8004d92:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d96:	443a      	add	r2, r7
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d98:	44a2      	add	sl, r4
 8004d9a:	44d1      	add	r9, sl
 8004d9c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004da0:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004da4:	4cc9      	ldr	r4, [pc, #804]	; (80050cc <sha256_process+0x1c24>)
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004da6:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004daa:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004dae:	443e      	add	r6, r7
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004db0:	444c      	add	r4, r9
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004db2:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004db6:	4421      	add	r1, r4
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004db8:	9c11      	ldr	r4, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004dba:	ea80 0703 	eor.w	r7, r0, r3
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004dbe:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
 8004dc2:	ea8a 0ad4 	eor.w	sl, sl, r4, lsr #3
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004dc6:	4037      	ands	r7, r6
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004dc8:	9c10      	ldr	r4, [sp, #64]	; 0x40
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004dca:	ea4f 19b6 	mov.w	r9, r6, ror #6
 8004dce:	405f      	eors	r7, r3
 8004dd0:	ea89 29f6 	eor.w	r9, r9, r6, ror #11
 8004dd4:	ea89 6976 	eor.w	r9, r9, r6, ror #25
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004dd8:	4454      	add	r4, sl
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004dda:	440f      	add	r7, r1
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004ddc:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004de0:	ea42 0108 	orr.w	r1, r2, r8
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004de4:	9409      	str	r4, [sp, #36]	; 0x24
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004de6:	444f      	add	r7, r9
 8004de8:	4029      	ands	r1, r5
 8004dea:	ea02 0908 	and.w	r9, r2, r8
 8004dee:	ea4f 04b2 	mov.w	r4, r2, ror #2
 8004df2:	ea84 3472 	eor.w	r4, r4, r2, ror #13
 8004df6:	ea41 0109 	orr.w	r1, r1, r9
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004dfa:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004dfe:	ea84 54b2 	eor.w	r4, r4, r2, ror #22
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e02:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004e06:	4421      	add	r1, r4
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e08:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 8004e0c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004e0e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004e12:	4439      	add	r1, r7
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e14:	44a2      	add	sl, r4
 8004e16:	44d1      	add	r9, sl
 8004e18:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e1c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e20:	4cab      	ldr	r4, [pc, #684]	; (80050d0 <sha256_process+0x1c28>)
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e22:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e26:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004e2a:	44bc      	add	ip, r7
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e2c:	ea86 0700 	eor.w	r7, r6, r0
 8004e30:	444c      	add	r4, r9
 8004e32:	ea0c 0707 	and.w	r7, ip, r7
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e36:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e3a:	4047      	eors	r7, r0
 8004e3c:	4423      	add	r3, r4
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e3e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004e40:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e44:	443b      	add	r3, r7
 8004e46:	ea4f 19bc 	mov.w	r9, ip, ror #6
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e4a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8004e4c:	ea8a 0ad4 	eor.w	sl, sl, r4, lsr #3
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e50:	ea89 29fc 	eor.w	r9, r9, ip, ror #11
 8004e54:	ea41 0402 	orr.w	r4, r1, r2
 8004e58:	ea89 697c 	eor.w	r9, r9, ip, ror #25
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e5c:	4457      	add	r7, sl
 8004e5e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8004e62:	9709      	str	r7, [sp, #36]	; 0x24
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e64:	444b      	add	r3, r9
 8004e66:	ea04 0408 	and.w	r4, r4, r8
 8004e6a:	ea01 0902 	and.w	r9, r1, r2
 8004e6e:	ea4f 07b1 	mov.w	r7, r1, ror #2
 8004e72:	ea87 3771 	eor.w	r7, r7, r1, ror #13
 8004e76:	ea44 0409 	orr.w	r4, r4, r9
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e7a:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e7e:	ea87 57b1 	eor.w	r7, r7, r1, ror #22
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e82:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e86:	443c      	add	r4, r7
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e88:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 8004e8c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004e8e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e92:	441c      	add	r4, r3
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e94:	44ba      	add	sl, r7
 8004e96:	44d1      	add	r9, sl
 8004e98:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e9c:	441d      	add	r5, r3
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004e9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004ea0:	4f8c      	ldr	r7, [pc, #560]	; (80050d4 <sha256_process+0x1c2c>)
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004ea2:	ea4f 19f3 	mov.w	r9, r3, ror #7
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004ea6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ea8:	ea8c 0a06 	eor.w	sl, ip, r6
 8004eac:	441f      	add	r7, r3
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004eae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004eb0:	4438      	add	r0, r7
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004eb2:	ea89 49b3 	eor.w	r9, r9, r3, ror #18
 8004eb6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004eb8:	ea4f 13b5 	mov.w	r3, r5, ror #6
 8004ebc:	ea83 23f5 	eor.w	r3, r3, r5, ror #11
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004ec0:	ea89 09d7 	eor.w	r9, r9, r7, lsr #3
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004ec4:	ea05 0a0a 	and.w	sl, r5, sl
 8004ec8:	ea83 6775 	eor.w	r7, r3, r5, ror #25
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004ecc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004ece:	ea8a 0a06 	eor.w	sl, sl, r6
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004ed2:	444b      	add	r3, r9
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004ed4:	4450      	add	r0, sl
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004ed6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004eda:	ea44 0a01 	orr.w	sl, r4, r1
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004ede:	9309      	str	r3, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004ee0:	4438      	add	r0, r7
 8004ee2:	ea0a 0a02 	and.w	sl, sl, r2
 8004ee6:	ea04 0701 	and.w	r7, r4, r1
 8004eea:	ea4f 03b4 	mov.w	r3, r4, ror #2
 8004eee:	ea83 3374 	eor.w	r3, r3, r4, ror #13
 8004ef2:	ea4a 0a07 	orr.w	sl, sl, r7
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004ef6:	ea4f 4779 	mov.w	r7, r9, ror #17
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004efa:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004efe:	ea87 47f9 	eor.w	r7, r7, r9, ror #19
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004f02:	449a      	add	sl, r3
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f04:	ea87 2799 	eor.w	r7, r7, r9, lsr #10
 8004f08:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004f0a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004f0e:	4482      	add	sl, r0
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f10:	4499      	add	r9, r3
 8004f12:	444f      	add	r7, r9
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004f14:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f18:	9712      	str	r7, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f1a:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004f1e:	4480      	add	r8, r0
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f20:	4b6d      	ldr	r3, [pc, #436]	; (80050d8 <sha256_process+0x1c30>)
 8004f22:	9812      	ldr	r0, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f24:	ea4f 17fa 	mov.w	r7, sl, ror #7
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f28:	4403      	add	r3, r0
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f2a:	ea87 47ba 	eor.w	r7, r7, sl, ror #18
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f2e:	ea85 090c 	eor.w	r9, r5, ip
 8004f32:	441e      	add	r6, r3
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f34:	ea87 07da 	eor.w	r7, r7, sl, lsr #3
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f3a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f3e:	ea08 0909 	and.w	r9, r8, r9
 8004f42:	ea89 090c 	eor.w	r9, r9, ip
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f46:	4457      	add	r7, sl
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f48:	ea4f 0ab3 	mov.w	sl, r3, ror #2
 8004f4c:	444e      	add	r6, r9
 8004f4e:	ea8a 3a73 	eor.w	sl, sl, r3, ror #13
 8004f52:	ea43 0904 	orr.w	r9, r3, r4
 8004f56:	ea8a 5ab3 	eor.w	sl, sl, r3, ror #22
 8004f5a:	ea4f 10b8 	mov.w	r0, r8, ror #6
 8004f5e:	4023      	ands	r3, r4
 8004f60:	ea09 0901 	and.w	r9, r9, r1
 8004f64:	ea80 20f8 	eor.w	r0, r0, r8, ror #11
 8004f68:	ea49 0903 	orr.w	r9, r9, r3
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f6e:	ea80 6078 	eor.w	r0, r0, r8, ror #25
 8004f72:	4406      	add	r6, r0
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f74:	ea4f 4073 	mov.w	r0, r3, ror #17
 8004f78:	ea80 40f3 	eor.w	r0, r0, r3, ror #19
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f7c:	44d1      	add	r9, sl
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f7e:	445f      	add	r7, fp
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f80:	44b1      	add	r9, r6
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f82:	ea80 2093 	eor.w	r0, r0, r3, lsr #10
 8004f86:	4b55      	ldr	r3, [pc, #340]	; (80050dc <sha256_process+0x1c34>)
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f88:	4432      	add	r2, r6
 8004f8a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f8e:	1838      	adds	r0, r7, r0
 8004f90:	ea88 0605 	eor.w	r6, r8, r5
 8004f94:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004f98:	4403      	add	r3, r0
 8004f9a:	4016      	ands	r6, r2
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004f9c:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004fa0:	406e      	eors	r6, r5
 8004fa2:	449c      	add	ip, r3
 8004fa4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8004fa8:	44b4      	add	ip, r6
 8004faa:	ea4f 06ba 	mov.w	r6, sl, ror #2
 8004fae:	9013      	str	r0, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004fb0:	ea4f 17f9 	mov.w	r7, r9, ror #7
 8004fb4:	9815      	ldr	r0, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004fb6:	ea86 367a 	eor.w	r6, r6, sl, ror #13
 8004fba:	ea4a 030b 	orr.w	r3, sl, fp
 8004fbe:	ea86 56ba 	eor.w	r6, r6, sl, ror #22
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004fc2:	ea87 47b9 	eor.w	r7, r7, r9, ror #18
 8004fc6:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8004fca:	ea87 07d0 	eor.w	r7, r7, r0, lsr #3
 8004fce:	4457      	add	r7, sl
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004fd0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004fd4:	ea4f 19b2 	mov.w	r9, r2, ror #6
 8004fd8:	4023      	ands	r3, r4
 8004fda:	ea0a 000b 	and.w	r0, sl, fp
 8004fde:	ea89 29f2 	eor.w	r9, r9, r2, ror #11
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004fe2:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004fe6:	ea89 6972 	eor.w	r9, r9, r2, ror #25
 8004fea:	4318      	orrs	r0, r3
 8004fec:	44cc      	add	ip, r9
 8004fee:	4430      	add	r0, r6
 8004ff0:	4460      	add	r0, ip
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004ff2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8004ff4:	ea4f 437b 	mov.w	r3, fp, ror #17
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004ff8:	900d      	str	r0, [sp, #52]	; 0x34
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8004ffa:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004ffe:	ea83 43fb 	eor.w	r3, r3, fp, ror #19
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8005002:	4461      	add	r1, ip
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8005004:	ea83 239b 	eor.w	r3, r3, fp, lsr #10
 8005008:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800500c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8005010:	4437      	add	r7, r6
 8005012:	441f      	add	r7, r3
 8005014:	4e32      	ldr	r6, [pc, #200]	; (80050e0 <sha256_process+0x1c38>)
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005016:	ea4f 13fa 	mov.w	r3, sl, ror #7
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 800501a:	ea82 0908 	eor.w	r9, r2, r8
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 800501e:	ea83 43ba 	eor.w	r3, r3, sl, ror #18
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8005022:	ea4b 0a0c 	orr.w	sl, fp, ip
 8005026:	ea4f 0cbb 	mov.w	ip, fp, ror #2
 800502a:	443e      	add	r6, r7
 800502c:	ea01 0909 	and.w	r9, r1, r9
 8005030:	ea8c 3c7b 	eor.w	ip, ip, fp, ror #13
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005034:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8005038:	ea89 0908 	eor.w	r9, r9, r8
 800503c:	4435      	add	r5, r6
 800503e:	444d      	add	r5, r9
 8005040:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005042:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005046:	ea83 03db 	eor.w	r3, r3, fp, lsr #3
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 800504a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800504e:	ea0a 0a06 	and.w	sl, sl, r6
 8005052:	ea09 060b 	and.w	r6, r9, fp
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005056:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 800505a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800505e:	ea4f 10b1 	mov.w	r0, r1, ror #6
 8005062:	ea8c 5cbb 	eor.w	ip, ip, fp, ror #22
 8005066:	ea80 20f1 	eor.w	r0, r0, r1, ror #11
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 800506a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 800506e:	ea4a 0a06 	orr.w	sl, sl, r6
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005072:	ea4f 4679 	mov.w	r6, r9, ror #17
 8005076:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 800507a:	ea80 6071 	eor.w	r0, r0, r1, ror #25
 800507e:	44e2      	add	sl, ip
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005080:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8005084:	4428      	add	r0, r5
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005086:	ea86 46fb 	eor.w	r6, r6, fp, ror #19
 800508a:	444b      	add	r3, r9
 800508c:	ea86 259b 	eor.w	r5, r6, fp, lsr #10
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8005090:	4482      	add	sl, r0
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005092:	4463      	add	r3, ip
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8005094:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005098:	442b      	add	r3, r5
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 800509a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 800509c:	4404      	add	r4, r0
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 800509e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80050a2:	ea4f 10f5 	mov.w	r0, r5, ror #7
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 80050a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80050a8:	4e0e      	ldr	r6, [pc, #56]	; (80050e4 <sha256_process+0x1c3c>)
 80050aa:	ea4b 0c05 	orr.w	ip, fp, r5
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80050ae:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 80050b2:	441e      	add	r6, r3
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80050b4:	ea80 40bb 	eor.w	r0, r0, fp, ror #18
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 80050b8:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80050bc:	4446      	add	r6, r8
 80050be:	ea4f 05bb 	mov.w	r5, fp, ror #2
 80050c2:	ea85 357b 	eor.w	r5, r5, fp, ror #13
 80050c6:	e00f      	b.n	80050e8 <sha256_process+0x1c40>
 80050c8:	34b0bcb5 	ldrtcc	fp, [r0], #3253	; 0xcb5
 80050cc:	391c0cb3 	ldmdbcc	ip, {r0, r1, r4, r5, r7, sl, fp}
 80050d0:	4ed8aa4a 	vfnmami.f32	s21, s16, s20
 80050d4:	5b9cca4f 	blpl	6737a18 <__Stack_Size+0x6737218>
 80050d8:	682e6ff3 	stmdavs	lr!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 80050dc:	748f82ee 	strvc	r8, [pc], #750	; 80050e4 <sha256_process+0x1c3c>
 80050e0:	78a5636f 	stmiavc	r5!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}
 80050e4:	84c87814 	strbhi	r7, [r8], #2068	; 0x814
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80050e8:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 80050ec:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80050f0:	ea80 00db 	eor.w	r0, r0, fp, lsr #3
 80050f4:	9014      	str	r0, [sp, #80]	; 0x50
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 80050f6:	ea0c 0c08 	and.w	ip, ip, r8
 80050fa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80050fc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8005100:	ea81 0a02 	eor.w	sl, r1, r2
 8005104:	ea00 0b08 	and.w	fp, r0, r8
 8005108:	ea4c 0c0b 	orr.w	ip, ip, fp
 800510c:	ea85 55b0 	eor.w	r5, r5, r0, ror #22
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005110:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 8005114:	9814      	ldr	r0, [sp, #80]	; 0x50
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005116:	ea04 0a0a 	and.w	sl, r4, sl
 800511a:	ea4f 19b4 	mov.w	r9, r4, ror #6
 800511e:	ea8a 0a02 	eor.w	sl, sl, r2
 8005122:	ea89 29f4 	eor.w	r9, r9, r4, ror #11
 8005126:	44b2      	add	sl, r6
 8005128:	ea89 6974 	eor.w	r9, r9, r4, ror #25
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 800512c:	ea4f 4677 	mov.w	r6, r7, ror #17
 8005130:	4458      	add	r0, fp
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005132:	eb0c 0b05 	add.w	fp, ip, r5
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005136:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 800513a:	eb0a 0809 	add.w	r8, sl, r9
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 800513e:	ea86 46f7 	eor.w	r6, r6, r7, ror #19
 8005142:	ea86 2697 	eor.w	r6, r6, r7, lsr #10
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005146:	44c3      	add	fp, r8
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005148:	9f18      	ldr	r7, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 800514a:	4460      	add	r0, ip
 800514c:	4daa      	ldr	r5, [pc, #680]	; (80053f8 <sha256_process+0x1f50>)
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 800514e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005152:	4430      	add	r0, r6
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005154:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8005158:	44c4      	add	ip, r8
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 800515a:	ea4f 16f7 	mov.w	r6, r7, ror #7
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 800515e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8005162:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005164:	4405      	add	r5, r0
 8005166:	1955      	adds	r5, r2, r5
 8005168:	950f      	str	r5, [sp, #60]	; 0x3c
 800516a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800516c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800516e:	ea48 0907 	orr.w	r9, r8, r7
 8005172:	ea4f 07b8 	mov.w	r7, r8, ror #2
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005176:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 800517a:	ea84 0b01 	eor.w	fp, r4, r1
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 800517e:	ea86 46b8 	eor.w	r6, r6, r8, ror #18
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005182:	ea02 0805 	and.w	r8, r2, r5
 8005186:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005188:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800518a:	ea09 0902 	and.w	r9, r9, r2
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 800518e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005190:	ea0c 0b0b 	and.w	fp, ip, fp
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005194:	ea86 06d2 	eor.w	r6, r6, r2, lsr #3
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005198:	ea49 0808 	orr.w	r8, r9, r8
 800519c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800519e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80051a2:	ea4f 1abc 	mov.w	sl, ip, ror #6
 80051a6:	ea8b 0b01 	eor.w	fp, fp, r1
 80051aa:	ea87 3775 	eor.w	r7, r7, r5, ror #13
 80051ae:	4493      	add	fp, r2
 80051b0:	ea87 57b9 	eor.w	r7, r7, r9, ror #22
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80051b6:	ea8a 2afc 	eor.w	sl, sl, ip, ror #11
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051ba:	ea4f 4573 	mov.w	r5, r3, ror #17
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80051be:	ea8a 6a7c 	eor.w	sl, sl, ip, ror #25
 80051c2:	44b8      	add	r8, r7
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051c4:	9f10      	ldr	r7, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80051c6:	44da      	add	sl, fp
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051c8:	4416      	add	r6, r2
 80051ca:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 80051ce:	443e      	add	r6, r7
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80051d0:	44d0      	add	r8, sl
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051d2:	ea85 2593 	eor.w	r5, r5, r3, lsr #10
 80051d6:	4f89      	ldr	r7, [pc, #548]	; (80053fc <sha256_process+0x1f54>)
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80051d8:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051dc:	1975      	adds	r5, r6, r5
 80051de:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80051e0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051e4:	950f      	str	r5, [sp, #60]	; 0x3c
 80051e6:	442f      	add	r7, r5
 80051e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80051ea:	ea4f 18f9 	mov.w	r8, r9, ror #7
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051ee:	ea4f 06b3 	mov.w	r6, r3, ror #2
 80051f2:	ea43 0905 	orr.w	r9, r3, r5
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80051f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80051f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80051fa:	ea88 48b3 	eor.w	r8, r8, r3, ror #18
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005200:	4452      	add	r2, sl
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005202:	ea8c 0b04 	eor.w	fp, ip, r4
 8005206:	ea02 0b0b 	and.w	fp, r2, fp
 800520a:	4439      	add	r1, r7
 800520c:	ea03 0705 	and.w	r7, r3, r5
 8005210:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005212:	ea8b 0b04 	eor.w	fp, fp, r4
 8005216:	ea86 3673 	eor.w	r6, r6, r3, ror #13
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 800521a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 800521c:	ea09 0905 	and.w	r9, r9, r5
 8005220:	4459      	add	r1, fp
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005222:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005226:	ea4f 1ab2 	mov.w	sl, r2, ror #6
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 800522a:	ea88 08d3 	eor.w	r8, r8, r3, lsr #3
 800522e:	ea4f 4570 	mov.w	r5, r0, ror #17
 8005232:	9b11      	ldr	r3, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005234:	ea49 0707 	orr.w	r7, r9, r7
 8005238:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800523c:	ea8a 2af2 	eor.w	sl, sl, r2, ror #11
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005240:	44d8      	add	r8, fp
 8005242:	ea85 45f0 	eor.w	r5, r5, r0, ror #19
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005246:	ea8a 6a72 	eor.w	sl, sl, r2, ror #25
 800524a:	ea86 56b9 	eor.w	r6, r6, r9, ror #22
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 800524e:	4498      	add	r8, r3
 8005250:	ea85 2590 	eor.w	r5, r5, r0, lsr #10
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005254:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005256:	4451      	add	r1, sl
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005258:	4445      	add	r5, r8
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 800525a:	4437      	add	r7, r6
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 800525c:	950d      	str	r5, [sp, #52]	; 0x34
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 800525e:	187b      	adds	r3, r7, r1
 8005260:	4408      	add	r0, r1
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005262:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005264:	4e66      	ldr	r6, [pc, #408]	; (8005400 <sha256_process+0x1f58>)
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005266:	ea4f 18f1 	mov.w	r8, r1, ror #7
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 800526a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800526c:	442e      	add	r6, r5
 800526e:	ea4f 17b0 	mov.w	r7, r0, ror #6
 8005272:	4434      	add	r4, r6
 8005274:	ea87 26f0 	eor.w	r6, r7, r0, ror #11
 8005278:	ea03 0701 	and.w	r7, r3, r1
 800527c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800527e:	ea43 0a09 	orr.w	sl, r3, r9
 8005282:	ea0a 0a01 	and.w	sl, sl, r1
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005286:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005288:	ea82 0b0c 	eor.w	fp, r2, ip
 800528c:	ea4a 0a07 	orr.w	sl, sl, r7
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005290:	4d5c      	ldr	r5, [pc, #368]	; (8005404 <sha256_process+0x1f5c>)
 8005292:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005294:	ea00 0b0b 	and.w	fp, r0, fp
 8005298:	ea4f 09b3 	mov.w	r9, r3, ror #2
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 800529c:	ea88 48b1 	eor.w	r8, r8, r1, ror #18
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80052a0:	ea8b 0b0c 	eor.w	fp, fp, ip
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052a4:	443d      	add	r5, r7
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80052a6:	ea89 3973 	eor.w	r9, r9, r3, ror #13
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052aa:	ea88 08d1 	eor.w	r8, r8, r1, lsr #3
 80052ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80052b0:	ea86 6670 	eor.w	r6, r6, r0, ror #25
 80052b4:	ea89 59b3 	eor.w	r9, r9, r3, ror #22
 80052b8:	445c      	add	r4, fp
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052ba:	44a8      	add	r8, r5
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80052bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80052be:	4434      	add	r4, r6
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052c0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80052c2:	44ca      	add	sl, r9
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052c4:	ea4f 4b71 	mov.w	fp, r1, ror #17
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80052c8:	4425      	add	r5, r4
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052ca:	ea8b 4bf1 	eor.w	fp, fp, r1, ror #19
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80052ce:	eb0a 0104 	add.w	r1, sl, r4
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052d2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80052d4:	ea8b 2697 	eor.w	r6, fp, r7, lsr #10
 80052d8:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 80052dc:	44a0      	add	r8, r4
 80052de:	ea41 0403 	orr.w	r4, r1, r3
 80052e2:	ea04 040b 	and.w	r4, r4, fp
 80052e6:	940b      	str	r4, [sp, #44]	; 0x2c
 80052e8:	ea80 0902 	eor.w	r9, r0, r2
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 80052ec:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052ee:	4446      	add	r6, r8
 80052f0:	ea05 0909 	and.w	r9, r5, r9
 80052f4:	4466      	add	r6, ip
 80052f6:	ea4f 0ab1 	mov.w	sl, r1, ror #2
 80052fa:	ea4f 18b5 	mov.w	r8, r5, ror #6
 80052fe:	ea89 0902 	eor.w	r9, r9, r2
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005302:	ea4f 1cf4 	mov.w	ip, r4, ror #7
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005306:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005308:	ea01 0b03 	and.w	fp, r1, r3
 800530c:	44b1      	add	r9, r6
 800530e:	ea8a 3a71 	eor.w	sl, sl, r1, ror #13
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005312:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005314:	ea88 28f5 	eor.w	r8, r8, r5, ror #11
 8005318:	ea8a 5ab1 	eor.w	sl, sl, r1, ror #22
 800531c:	ea88 6875 	eor.w	r8, r8, r5, ror #25
 8005320:	ea44 0b0b 	orr.w	fp, r4, fp
 8005324:	eb0b 040a 	add.w	r4, fp, sl
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005328:	ea8c 4cb6 	eor.w	ip, ip, r6, ror #18
 800532c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005330:	eb09 0608 	add.w	r6, r9, r8
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005334:	4f34      	ldr	r7, [pc, #208]	; (8005408 <sha256_process+0x1f60>)
 8005336:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800533a:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800533e:	4447      	add	r7, r8
 8005340:	ea4f 487a 	mov.w	r8, sl, ror #17
 8005344:	ea8c 0cd9 	eor.w	ip, ip, r9, lsr #3
 8005348:	ea88 48fa 	eor.w	r8, r8, sl, ror #19
 800534c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005350:	4467      	add	r7, ip
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005352:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005356:	4457      	add	r7, sl
 8005358:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 800535c:	4434      	add	r4, r6
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 800535e:	ea85 0c00 	eor.w	ip, r5, r0
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005362:	445e      	add	r6, fp
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005364:	ea88 289a 	eor.w	r8, r8, sl, lsr #10
 8005368:	ea06 0c0c 	and.w	ip, r6, ip
 800536c:	4447      	add	r7, r8
 800536e:	ea8c 0c00 	eor.w	ip, ip, r0
 8005372:	4417      	add	r7, r2
 8005374:	ea44 0b01 	orr.w	fp, r4, r1
 8005378:	9a04      	ldr	r2, [sp, #16]
 800537a:	ea4f 09b4 	mov.w	r9, r4, ror #2
 800537e:	4467      	add	r7, ip
 8005380:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8005384:	ea0b 0b03 	and.w	fp, fp, r3
 8005388:	ea04 0a01 	and.w	sl, r4, r1
 800538c:	ea89 3974 	eor.w	r9, r9, r4, ror #13
 8005390:	ea89 59b4 	eor.w	r9, r9, r4, ror #22
 8005394:	4494      	add	ip, r2
 8005396:	ea4b 0a0a 	orr.w	sl, fp, sl
 800539a:	9a08      	ldr	r2, [sp, #32]
 800539c:	44ca      	add	sl, r9
 800539e:	4492      	add	sl, r2
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
 80053a0:	9a01      	ldr	r2, [sp, #4]
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 80053a2:	ea4f 18b6 	mov.w	r8, r6, ror #6
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
 80053a6:	4410      	add	r0, r2
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 80053a8:	9a05      	ldr	r2, [sp, #20]
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 80053aa:	ea88 28f6 	eor.w	r8, r8, r6, ror #11

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 80053ae:	4413      	add	r3, r2
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 80053b0:	9a02      	ldr	r2, [sp, #8]
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 80053b2:	ea88 6876 	eor.w	r8, r8, r6, ror #25
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 80053b6:	4415      	add	r5, r2
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 80053b8:	9a06      	ldr	r2, [sp, #24]
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 80053ba:	4447      	add	r7, r8

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 80053bc:	4411      	add	r1, r2
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
 80053be:	9a07      	ldr	r2, [sp, #28]
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
 80053c0:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
    ctx->state[1] += B;
 80053c4:	4414      	add	r4, r2
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
 80053c6:	9a03      	ldr	r2, [sp, #12]
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
 80053c8:	44ba      	add	sl, r7
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
 80053ca:	4416      	add	r6, r2

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
 80053cc:	4467      	add	r7, ip
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
 80053ce:	f8c8 a008 	str.w	sl, [r8, #8]
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 80053d2:	f8c8 3014 	str.w	r3, [r8, #20]
    ctx->state[4] += E;
 80053d6:	f8c8 7018 	str.w	r7, [r8, #24]
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
 80053da:	f8c8 400c 	str.w	r4, [r8, #12]
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
 80053de:	f8c8 601c 	str.w	r6, [r8, #28]
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 80053e2:	f8c8 1010 	str.w	r1, [r8, #16]
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 80053e6:	f8c8 5020 	str.w	r5, [r8, #32]
    ctx->state[7] += H;
 80053ea:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
}
 80053ee:	b01c      	add	sp, #112	; 0x70
 80053f0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	8cc70208 	sfmhi	f0, 2, [r7], {8}
 80053fc:	90befffa 	ldrshtls	pc, [lr], sl	; <UNPREDICTABLE>
 8005400:	a4506ceb 	ldrbge	r6, [r0], #-3307	; 0xceb
 8005404:	bef9a3f7 	mrclt	3, 7, sl, cr9, cr7, {7}
 8005408:	c67178f2 			; <UNDEFINED> instruction: 0xc67178f2

0800540c <sha256_update>:

void sha256_update( sha256_context *ctx, uint8 *input, uint32 length )
{
 800540c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32 left, fill;

    if( ! length ) return;
 8005410:	4617      	mov	r7, r2
    ctx->state[6] += G;
    ctx->state[7] += H;
}

void sha256_update( sha256_context *ctx, uint8 *input, uint32 length )
{
 8005412:	4606      	mov	r6, r0
 8005414:	4688      	mov	r8, r1
    uint32 left, fill;

    if( ! length ) return;
 8005416:	b302      	cbz	r2, 800545a <sha256_update+0x4e>

    left = ctx->total[0] & 0x3F;
 8005418:	6803      	ldr	r3, [r0, #0]
    fill = 64 - left;

    ctx->total[0] += length;
 800541a:	441a      	add	r2, r3
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 800541c:	4297      	cmp	r7, r2
    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += length;
 800541e:	6002      	str	r2, [r0, #0]
{
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
 8005420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += length;
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 8005424:	d902      	bls.n	800542c <sha256_update+0x20>
        ctx->total[1]++;
 8005426:	6842      	ldr	r2, [r0, #4]
 8005428:	3201      	adds	r2, #1
 800542a:	6042      	str	r2, [r0, #4]

    if( left && length >= fill )
 800542c:	b9bb      	cbnz	r3, 800545e <sha256_update+0x52>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 800542e:	2f3f      	cmp	r7, #63	; 0x3f
 8005430:	d912      	bls.n	8005458 <sha256_update+0x4c>
 8005432:	463d      	mov	r5, r7
 8005434:	4644      	mov	r4, r8
    {
        sha256_process( ctx, input );
 8005436:	4621      	mov	r1, r4
        length -= 64;
 8005438:	3d40      	subs	r5, #64	; 0x40
        left = 0;
    }

    while( length >= 64 )
    {
        sha256_process( ctx, input );
 800543a:	4630      	mov	r0, r6
 800543c:	f7fe f834 	bl	80034a8 <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 8005440:	2d3f      	cmp	r5, #63	; 0x3f
    {
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
 8005442:	f104 0440 	add.w	r4, r4, #64	; 0x40
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 8005446:	d8f6      	bhi.n	8005436 <sha256_update+0x2a>
 8005448:	f1a7 0340 	sub.w	r3, r7, #64	; 0x40
 800544c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005450:	3340      	adds	r3, #64	; 0x40
 8005452:	4498      	add	r8, r3
 8005454:	f007 073f 	and.w	r7, r7, #63	; 0x3f
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
    }

    if( length )
 8005458:	b9ef      	cbnz	r7, 8005496 <sha256_update+0x8a>
 800545a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 800545e:	f1c3 0440 	rsb	r4, r3, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
 8005462:	42a7      	cmp	r7, r4
 8005464:	d208      	bcs.n	8005478 <sha256_update+0x6c>
        input  += 64;
    }

    if( length )
    {
        memcpy( (void *) (ctx->buffer + left),
 8005466:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800546a:	4430      	add	r0, r6
 800546c:	4641      	mov	r1, r8
 800546e:	463a      	mov	r2, r7
                (void *) input, length );
    }
}
 8005470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        input  += 64;
    }

    if( length )
    {
        memcpy( (void *) (ctx->buffer + left),
 8005474:	f001 bc1c 	b.w	8006cb0 <memcpy>
    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
 8005478:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800547c:	4641      	mov	r1, r8
 800547e:	4622      	mov	r2, r4
 8005480:	4430      	add	r0, r6
 8005482:	f001 fc15 	bl	8006cb0 <memcpy>
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 8005486:	4630      	mov	r0, r6
 8005488:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800548c:	f7fe f80c 	bl	80034a8 <sha256_process>
        length -= fill;
 8005490:	1b3f      	subs	r7, r7, r4
        input  += fill;
 8005492:	44a0      	add	r8, r4
 8005494:	e7cb      	b.n	800542e <sha256_update+0x22>
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
    }

    if( length )
 8005496:	2300      	movs	r3, #0
 8005498:	e7e5      	b.n	8005466 <sha256_update+0x5a>
 800549a:	bf00      	nop

0800549c <sha256_finish>:
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 800549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32 last, padn;
    uint32 high, low;
    uint8 msglen[8];

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 80054a0:	e890 0088 	ldmia.w	r0, {r3, r7}
    low  = ( ctx->total[0] <<  3 );
 80054a4:	00da      	lsls	r2, r3, #3

    PUT_UINT32( high, msglen, 0 );
    PUT_UINT32( low,  msglen, 4 );

    last = ctx->total[0] & 0x3F;
 80054a6:	f003 063f 	and.w	r6, r3, #63	; 0x3f
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 80054aa:	b083      	sub	sp, #12
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32( high, msglen, 0 );
    PUT_UINT32( low,  msglen, 4 );
 80054ac:	ea4f 6812 	mov.w	r8, r2, lsr #24

    last = ctx->total[0] & 0x3F;
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 80054b0:	2e37      	cmp	r6, #55	; 0x37
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32( high, msglen, 0 );
    PUT_UINT32( low,  msglen, 4 );
 80054b2:	f88d 8004 	strb.w	r8, [sp, #4]

    last = ctx->total[0] & 0x3F;
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 80054b6:	bf94      	ite	ls
 80054b8:	f1c6 0838 	rsbls	r8, r6, #56	; 0x38
 80054bc:	f1c6 0878 	rsbhi	r8, r6, #120	; 0x78
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 80054c0:	4604      	mov	r4, r0
    uint32 last, padn;
    uint32 high, low;
    uint8 msglen[8];

    high = ( ctx->total[0] >> 29 )
 80054c2:	0f58      	lsrs	r0, r3, #29
    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += length;
 80054c4:	4443      	add	r3, r8
{
    uint32 last, padn;
    uint32 high, low;
    uint8 msglen[8];

    high = ( ctx->total[0] >> 29 )
 80054c6:	ea40 00c7 	orr.w	r0, r0, r7, lsl #3
    fill = 64 - left;

    ctx->total[0] += length;
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 80054ca:	4598      	cmp	r8, r3

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32( high, msglen, 0 );
 80054cc:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80054d0:	ea4f 4a10 	mov.w	sl, r0, lsr #16
 80054d4:	ea4f 2910 	mov.w	r9, r0, lsr #8
    PUT_UINT32( low,  msglen, 4 );
 80054d8:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80054dc:	ea4f 2e12 	mov.w	lr, r2, lsr #8

    ctx->total[0] += length;
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;
 80054e0:	bf88      	it	hi
 80054e2:	3701      	addhi	r7, #1
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 80054e4:	460d      	mov	r5, r1

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32( high, msglen, 0 );
 80054e6:	f88d 0003 	strb.w	r0, [sp, #3]
 80054ea:	f88d b000 	strb.w	fp, [sp]
 80054ee:	f88d a001 	strb.w	sl, [sp, #1]
 80054f2:	f88d 9002 	strb.w	r9, [sp, #2]
    PUT_UINT32( low,  msglen, 4 );
 80054f6:	f88d 2007 	strb.w	r2, [sp, #7]
 80054fa:	f88d c005 	strb.w	ip, [sp, #5]
 80054fe:	f88d e006 	strb.w	lr, [sp, #6]
    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += length;
 8005502:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;
 8005504:	bf88      	it	hi
 8005506:	6067      	strhi	r7, [r4, #4]

    if( left && length >= fill )
 8005508:	2e00      	cmp	r6, #0
 800550a:	f000 80a1 	beq.w	8005650 <sha256_finish+0x1b4>
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 800550e:	f1c6 0740 	rsb	r7, r6, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
 8005512:	45b8      	cmp	r8, r7
 8005514:	d273      	bcs.n	80055fe <sha256_finish+0x162>
 8005516:	f8df 9198 	ldr.w	r9, [pc, #408]	; 80056b0 <sha256_finish+0x214>
 800551a:	4642      	mov	r2, r8
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
    }

    if( length )
 800551c:	b12a      	cbz	r2, 800552a <sha256_finish+0x8e>
    {
        memcpy( (void *) (ctx->buffer + left),
 800551e:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8005522:	4420      	add	r0, r4
 8005524:	4649      	mov	r1, r9
 8005526:	f001 fbc3 	bl	8006cb0 <memcpy>
{
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
 800552a:	6822      	ldr	r2, [r4, #0]
    fill = 64 - left;

    ctx->total[0] += length;
 800552c:	f102 0308 	add.w	r3, r2, #8
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 8005530:	2b07      	cmp	r3, #7
    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += length;
 8005532:	6023      	str	r3, [r4, #0]
{
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
 8005534:	f002 083f 	and.w	r8, r2, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += length;
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 8005538:	d802      	bhi.n	8005540 <sha256_finish+0xa4>
        ctx->total[1]++;
 800553a:	6863      	ldr	r3, [r4, #4]
 800553c:	3301      	adds	r3, #1
 800553e:	6063      	str	r3, [r4, #4]

    if( left && length >= fill )
 8005540:	f1b8 0f00 	cmp.w	r8, #0
 8005544:	d005      	beq.n	8005552 <sha256_finish+0xb6>
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 8005546:	f1c8 0940 	rsb	r9, r8, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
 800554a:	f1b9 0f08 	cmp.w	r9, #8
 800554e:	f240 8082 	bls.w	8005656 <sha256_finish+0x1ba>
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
        input  += fill;
        left = 0;
 8005552:	2608      	movs	r6, #8
 8005554:	46e9      	mov	r9, sp
        input  += 64;
    }

    if( length )
    {
        memcpy( (void *) (ctx->buffer + left),
 8005556:	f108 0028 	add.w	r0, r8, #40	; 0x28
 800555a:	4420      	add	r0, r4
 800555c:	4649      	mov	r1, r9
 800555e:	4632      	mov	r2, r6
 8005560:	f001 fba6 	bl	8006cb0 <memcpy>
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );

    sha256_update( ctx, sha256_padding, padn );
    sha256_update( ctx, msglen, 8 );

    PUT_UINT32( ctx->state[0], digest,  0 );
 8005564:	7ae3      	ldrb	r3, [r4, #11]
 8005566:	702b      	strb	r3, [r5, #0]
 8005568:	8963      	ldrh	r3, [r4, #10]
 800556a:	706b      	strb	r3, [r5, #1]
 800556c:	68a3      	ldr	r3, [r4, #8]
 800556e:	0a1b      	lsrs	r3, r3, #8
 8005570:	70ab      	strb	r3, [r5, #2]
 8005572:	68a3      	ldr	r3, [r4, #8]
 8005574:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32( ctx->state[1], digest,  4 );
 8005576:	7be3      	ldrb	r3, [r4, #15]
 8005578:	712b      	strb	r3, [r5, #4]
 800557a:	89e3      	ldrh	r3, [r4, #14]
 800557c:	716b      	strb	r3, [r5, #5]
 800557e:	68e3      	ldr	r3, [r4, #12]
 8005580:	0a1b      	lsrs	r3, r3, #8
 8005582:	71ab      	strb	r3, [r5, #6]
 8005584:	68e3      	ldr	r3, [r4, #12]
 8005586:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32( ctx->state[2], digest,  8 );
 8005588:	7ce3      	ldrb	r3, [r4, #19]
 800558a:	722b      	strb	r3, [r5, #8]
 800558c:	8a63      	ldrh	r3, [r4, #18]
 800558e:	726b      	strb	r3, [r5, #9]
 8005590:	6923      	ldr	r3, [r4, #16]
 8005592:	0a1b      	lsrs	r3, r3, #8
 8005594:	72ab      	strb	r3, [r5, #10]
 8005596:	6923      	ldr	r3, [r4, #16]
 8005598:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32( ctx->state[3], digest, 12 );
 800559a:	7de3      	ldrb	r3, [r4, #23]
 800559c:	732b      	strb	r3, [r5, #12]
 800559e:	8ae3      	ldrh	r3, [r4, #22]
 80055a0:	736b      	strb	r3, [r5, #13]
 80055a2:	6963      	ldr	r3, [r4, #20]
 80055a4:	0a1b      	lsrs	r3, r3, #8
 80055a6:	73ab      	strb	r3, [r5, #14]
 80055a8:	6963      	ldr	r3, [r4, #20]
 80055aa:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32( ctx->state[4], digest, 16 );
 80055ac:	7ee3      	ldrb	r3, [r4, #27]
 80055ae:	742b      	strb	r3, [r5, #16]
 80055b0:	8b63      	ldrh	r3, [r4, #26]
 80055b2:	746b      	strb	r3, [r5, #17]
 80055b4:	69a3      	ldr	r3, [r4, #24]
 80055b6:	0a1b      	lsrs	r3, r3, #8
 80055b8:	74ab      	strb	r3, [r5, #18]
 80055ba:	69a3      	ldr	r3, [r4, #24]
 80055bc:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32( ctx->state[5], digest, 20 );
 80055be:	7fe3      	ldrb	r3, [r4, #31]
 80055c0:	752b      	strb	r3, [r5, #20]
 80055c2:	8be3      	ldrh	r3, [r4, #30]
 80055c4:	756b      	strb	r3, [r5, #21]
 80055c6:	69e3      	ldr	r3, [r4, #28]
 80055c8:	0a1b      	lsrs	r3, r3, #8
 80055ca:	75ab      	strb	r3, [r5, #22]
 80055cc:	69e3      	ldr	r3, [r4, #28]
 80055ce:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32( ctx->state[6], digest, 24 );
 80055d0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80055d4:	762b      	strb	r3, [r5, #24]
 80055d6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80055d8:	766b      	strb	r3, [r5, #25]
 80055da:	6a23      	ldr	r3, [r4, #32]
 80055dc:	0a1b      	lsrs	r3, r3, #8
 80055de:	76ab      	strb	r3, [r5, #26]
 80055e0:	6a23      	ldr	r3, [r4, #32]
 80055e2:	76eb      	strb	r3, [r5, #27]
    PUT_UINT32( ctx->state[7], digest, 28 );
 80055e4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80055e8:	772b      	strb	r3, [r5, #28]
 80055ea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80055ec:	776b      	strb	r3, [r5, #29]
 80055ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055f0:	0a1b      	lsrs	r3, r3, #8
 80055f2:	77ab      	strb	r3, [r5, #30]
 80055f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055f6:	77eb      	strb	r3, [r5, #31]
 80055f8:	b003      	add	sp, #12
 80055fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
 80055fe:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80056b0 <sha256_finish+0x214>
 8005602:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8005606:	4649      	mov	r1, r9
 8005608:	4420      	add	r0, r4
 800560a:	463a      	mov	r2, r7
 800560c:	f001 fb50 	bl	8006cb0 <memcpy>
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 8005610:	4620      	mov	r0, r4
 8005612:	f104 0128 	add.w	r1, r4, #40	; 0x28
        length -= fill;
 8005616:	ebc7 0808 	rsb	r8, r7, r8
        input  += fill;
 800561a:	44b9      	add	r9, r7

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 800561c:	f7fd ff44 	bl	80034a8 <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 8005620:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8005624:	d93a      	bls.n	800569c <sha256_finish+0x200>
 8005626:	4647      	mov	r7, r8
 8005628:	464e      	mov	r6, r9
    {
        sha256_process( ctx, input );
 800562a:	4631      	mov	r1, r6
        length -= 64;
 800562c:	3f40      	subs	r7, #64	; 0x40
        left = 0;
    }

    while( length >= 64 )
    {
        sha256_process( ctx, input );
 800562e:	4620      	mov	r0, r4
 8005630:	f7fd ff3a 	bl	80034a8 <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 8005634:	2f3f      	cmp	r7, #63	; 0x3f
    {
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
 8005636:	f106 0640 	add.w	r6, r6, #64	; 0x40
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 800563a:	d8f6      	bhi.n	800562a <sha256_finish+0x18e>
 800563c:	f1a8 0340 	sub.w	r3, r8, #64	; 0x40
 8005640:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005644:	3340      	adds	r3, #64	; 0x40
 8005646:	4499      	add	r9, r3
 8005648:	f008 023f 	and.w	r2, r8, #63	; 0x3f
 800564c:	2600      	movs	r6, #0
 800564e:	e765      	b.n	800551c <sha256_finish+0x80>
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
 8005650:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80056b0 <sha256_finish+0x214>
 8005654:	e7e4      	b.n	8005620 <sha256_finish+0x184>
    {
        memcpy( (void *) (ctx->buffer + left),
 8005656:	f108 0028 	add.w	r0, r8, #40	; 0x28
 800565a:	464a      	mov	r2, r9
 800565c:	4669      	mov	r1, sp
 800565e:	4420      	add	r0, r4
 8005660:	f001 fb26 	bl	8006cb0 <memcpy>
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
 8005664:	f1a8 0638 	sub.w	r6, r8, #56	; 0x38
        input  += fill;
 8005668:	ab00      	add	r3, sp, #0

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 800566a:	4620      	mov	r0, r4
 800566c:	f104 0128 	add.w	r1, r4, #40	; 0x28
        length -= fill;
        input  += fill;
 8005670:	4499      	add	r9, r3

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 8005672:	f7fd ff19 	bl	80034a8 <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 8005676:	2e3f      	cmp	r6, #63	; 0x3f
 8005678:	d913      	bls.n	80056a2 <sha256_finish+0x206>
    {
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
        input  += fill;
 800567a:	464f      	mov	r7, r9
        left = 0;
    }

    while( length >= 64 )
    {
        sha256_process( ctx, input );
 800567c:	4639      	mov	r1, r7
        length -= 64;
 800567e:	3e40      	subs	r6, #64	; 0x40
        left = 0;
    }

    while( length >= 64 )
    {
        sha256_process( ctx, input );
 8005680:	4620      	mov	r0, r4
 8005682:	f7fd ff11 	bl	80034a8 <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 8005686:	2e3f      	cmp	r6, #63	; 0x3f
    {
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
 8005688:	f107 0740 	add.w	r7, r7, #64	; 0x40
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 800568c:	d8f6      	bhi.n	800567c <sha256_finish+0x1e0>
 800568e:	f108 0608 	add.w	r6, r8, #8
 8005692:	f1a9 0940 	sub.w	r9, r9, #64	; 0x40
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
        input  += fill;
        left = 0;
 8005696:	f04f 0800 	mov.w	r8, #0
 800569a:	e75c      	b.n	8005556 <sha256_finish+0xba>
    }

    while( length >= 64 )
 800569c:	4642      	mov	r2, r8
 800569e:	2600      	movs	r6, #0
 80056a0:	e73c      	b.n	800551c <sha256_finish+0x80>
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
    }

    if( length )
 80056a2:	2e00      	cmp	r6, #0
 80056a4:	f43f af5e 	beq.w	8005564 <sha256_finish+0xc8>
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
        input  += fill;
        left = 0;
 80056a8:	f04f 0800 	mov.w	r8, #0
 80056ac:	e753      	b.n	8005556 <sha256_finish+0xba>
 80056ae:	bf00      	nop
 80056b0:	200002c4 	andcs	r0, r0, r4, asr #5

080056b4 <sha512_block>:
{
	return (x >> bits) | (x << (64 - bits));
}

void sha512_block(struct sha512_state *s, const uint8_t *blk)
{
 80056b4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056b8:	b0e4      	sub	sp, #400	; 0x190
 80056ba:	460c      	mov	r4, r1
 80056bc:	9033      	str	r0, [sp, #204]	; 0xcc
 80056be:	f101 0c80 	add.w	ip, r1, #128	; 0x80
 80056c2:	ad42      	add	r5, sp, #264	; 0x108

static inline uint64_t load64(const uint8_t *x)
{
	uint64_t r;

	r = *(x++);
 80056c4:	7820      	ldrb	r0, [r4, #0]
	r = (r << 8) | *(x++);
 80056c6:	2100      	movs	r1, #0
 80056c8:	0e02      	lsrs	r2, r0, #24
 80056ca:	0203      	lsls	r3, r0, #8
 80056cc:	9211      	str	r2, [sp, #68]	; 0x44
 80056ce:	7860      	ldrb	r0, [r4, #1]
 80056d0:	9310      	str	r3, [sp, #64]	; 0x40
 80056d2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80056d6:	4339      	orrs	r1, r7
 80056d8:	4330      	orrs	r0, r6
	r = (r << 8) | *(x++);
 80056da:	020f      	lsls	r7, r1, #8
 80056dc:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80056e0:	0206      	lsls	r6, r0, #8
 80056e2:	2100      	movs	r1, #0
 80056e4:	78a0      	ldrb	r0, [r4, #2]
 80056e6:	4339      	orrs	r1, r7
 80056e8:	4330      	orrs	r0, r6
	r = (r << 8) | *(x++);
 80056ea:	ea4f 2801 	mov.w	r8, r1, lsl #8
 80056ee:	ea48 6910 	orr.w	r9, r8, r0, lsr #24
 80056f2:	ea4f 2a00 	mov.w	sl, r0, lsl #8
 80056f6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80056fa:	78e0      	ldrb	r0, [r4, #3]
 80056fc:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005700:	2100      	movs	r1, #0
 8005702:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005706:	4319      	orrs	r1, r3
 8005708:	4310      	orrs	r0, r2
	r = (r << 8) | *(x++);
 800570a:	020b      	lsls	r3, r1, #8
 800570c:	ea43 6810 	orr.w	r8, r3, r0, lsr #24
 8005710:	ea4f 2900 	mov.w	r9, r0, lsl #8
 8005714:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8005718:	7920      	ldrb	r0, [r4, #4]
 800571a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800571e:	2100      	movs	r1, #0
 8005720:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 8005724:	ea41 010b 	orr.w	r1, r1, fp
 8005728:	ea40 000a 	orr.w	r0, r0, sl
	r = (r << 8) | *(x++);
 800572c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8005730:	ea4b 6b10 	orr.w	fp, fp, r0, lsr #24
 8005734:	ea4f 2a00 	mov.w	sl, r0, lsl #8
 8005738:	2100      	movs	r1, #0
 800573a:	7960      	ldrb	r0, [r4, #5]
 800573c:	ea41 010b 	orr.w	r1, r1, fp
 8005740:	ea40 000a 	orr.w	r0, r0, sl
	r = (r << 8) | *(x++);
 8005744:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8005748:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 800574c:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8005750:	2100      	movs	r1, #0
 8005752:	79a0      	ldrb	r0, [r4, #6]
 8005754:	ea41 0109 	orr.w	r1, r1, r9
 8005758:	ea40 0008 	orr.w	r0, r0, r8
	r = (r << 8) | *(x++);
 800575c:	020b      	lsls	r3, r1, #8
 800575e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005762:	0202      	lsls	r2, r0, #8
 8005764:	79e0      	ldrb	r0, [r4, #7]
 8005766:	2100      	movs	r1, #0
	uint64_t a, b, c, d, e, f, g, h;
	int i;

	for (i = 0; i < 16; i++) {
		w[i] = load64(blk);
		blk += 8;
 8005768:	3408      	adds	r4, #8
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
 800576a:	4310      	orrs	r0, r2
 800576c:	4319      	orrs	r1, r3
{
	uint64_t w[16];
	uint64_t a, b, c, d, e, f, g, h;
	int i;

	for (i = 0; i < 16; i++) {
 800576e:	4564      	cmp	r4, ip
		w[i] = load64(blk);
 8005770:	e9e5 0102 	strd	r0, r1, [r5, #8]!
{
	uint64_t w[16];
	uint64_t a, b, c, d, e, f, g, h;
	int i;

	for (i = 0; i < 16; i++) {
 8005774:	d1a6      	bne.n	80056c4 <sha512_block+0x10>
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
	b = s->h[1];
 8005776:	9b33      	ldr	r3, [sp, #204]	; 0xcc
	c = s->h[2];
 8005778:	9d33      	ldr	r5, [sp, #204]	; 0xcc
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
	b = s->h[1];
 800577a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 800577e:	9933      	ldr	r1, [sp, #204]	; 0xcc
	b = s->h[1];
 8005780:	e9cd 2336 	strd	r2, r3, [sp, #216]	; 0xd8
	c = s->h[2];
 8005784:	e9d5 4504 	ldrd	r4, r5, [r5, #16]
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 8005788:	e9d1 0100 	ldrd	r0, r1, [r1]
	b = s->h[1];
 800578c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 8005790:	9a33      	ldr	r2, [sp, #204]	; 0xcc
	}

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
 8005792:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 8005796:	f102 0330 	add.w	r3, r2, #48	; 0x30
 800579a:	e9d3 2300 	ldrd	r2, r3, [r3]
	}

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
 800579e:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
	d = s->h[3];
 80057a2:	9f33      	ldr	r7, [sp, #204]	; 0xcc
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 80057a4:	ac40      	add	r4, sp, #256	; 0x100
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 80057a6:	4689      	mov	r9, r1
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 80057a8:	e9c4 2300 	strd	r2, r3, [r4]

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
 80057ac:	e9d7 6706 	ldrd	r6, r7, [r7, #24]
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 80057b0:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
 80057b4:	f8dd b0cc 	ldr.w	fp, [sp, #204]	; 0xcc
	f = s->h[5];
 80057b8:	9933      	ldr	r1, [sp, #204]	; 0xcc
	g = s->h[6];
	h = s->h[7];
 80057ba:	9c33      	ldr	r4, [sp, #204]	; 0xcc

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
 80057bc:	e9cd 673a 	strd	r6, r7, [sp, #232]	; 0xe8
	e = s->h[4];
 80057c0:	e9db ab08 	ldrd	sl, fp, [fp, #32]
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];
 80057c4:	f104 0538 	add.w	r5, r4, #56	; 0x38
 80057c8:	e9d5 4500 	ldrd	r4, r5, [r5]

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
 80057cc:	e9cd 672a 	strd	r6, r7, [sp, #168]	; 0xa8
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];
 80057d0:	ae42      	add	r6, sp, #264	; 0x108
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 80057d2:	4680      	mov	r8, r0
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];

	for (i = 0; i < 80; i++) {
 80057d4:	f04f 0c00 	mov.w	ip, #0
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
 80057d8:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	; 0x28
	g = s->h[6];
 80057dc:	461f      	mov	r7, r3
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
 80057de:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 80057e2:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	g = s->h[6];
	h = s->h[7];
 80057e6:	465b      	mov	r3, fp
 80057e8:	e9c6 4500 	strd	r4, r5, [r6]
 80057ec:	4620      	mov	r0, r4
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 80057ee:	4616      	mov	r6, r2
	h = s->h[7];
 80057f0:	4629      	mov	r1, r5
 80057f2:	4652      	mov	r2, sl
	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
 80057f4:	e9cd ab3c 	strd	sl, fp, [sp, #240]	; 0xf0
 80057f8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];
 80057fc:	46c2      	mov	sl, r8
 80057fe:	46cb      	mov	fp, r9
 8005800:	4690      	mov	r8, r2
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 8005802:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
	h = s->h[7];
 8005806:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
 800580a:	4699      	mov	r9, r3
 800580c:	4662      	mov	r2, ip
 800580e:	e018      	b.n	8005842 <sha512_block+0x18e>

		/* Update round state */
		h = g;
		g = f;
		f = e;
		e = d + temp1;
 8005810:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8005814:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8005818:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
 800581c:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 8005820:	e9cd 672a 	strd	r6, r7, [sp, #168]	; 0xa8
 8005824:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8005828:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 800582c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8005830:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8005834:	4690      	mov	r8, r2
 8005836:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005838:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 800583c:	4699      	mov	r9, r3
		d = c;
		c = b;
		b = a;
		a = temp1 + temp2;
 800583e:	4682      	mov	sl, r0
 8005840:	468b      	mov	fp, r1
	g = s->h[6];
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
 8005842:	ab64      	add	r3, sp, #400	; 0x190
 8005844:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005848:	ea4f 4298 	mov.w	r2, r8, lsr #18
 800584c:	ea42 3289 	orr.w	r2, r2, r9, lsl #14
 8005850:	9216      	str	r2, [sp, #88]	; 0x58
 8005852:	ea4f 3298 	mov.w	r2, r8, lsr #14
 8005856:	ea42 4289 	orr.w	r2, r2, r9, lsl #18
 800585a:	9218      	str	r2, [sp, #96]	; 0x60
 800585c:	ea4f 4299 	mov.w	r2, r9, lsr #18
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 8005860:	f10c 0c01 	add.w	ip, ip, #1
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005864:	ea42 3288 	orr.w	r2, r2, r8, lsl #14
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 8005868:	f00c 040f 	and.w	r4, ip, #15
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 800586c:	9217      	str	r2, [sp, #92]	; 0x5c
 800586e:	ea4f 3299 	mov.w	r2, r9, lsr #14
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 8005872:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005876:	ea42 4288 	orr.w	r2, r2, r8, lsl #18
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 800587a:	e951 0120 	ldrd	r0, r1, [r1, #-128]	; 0x80
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 800587e:	9219      	str	r2, [sp, #100]	; 0x64
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 8005880:	09c6      	lsrs	r6, r0, #7
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 8005882:	9410      	str	r4, [sp, #64]	; 0x40
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005884:	ea4f 52c8 	mov.w	r2, r8, lsl #23
 8005888:	0844      	lsrs	r4, r0, #1
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 800588a:	ea46 6741 	orr.w	r7, r6, r1, lsl #25
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 800588e:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
 8005892:	ea42 2259 	orr.w	r2, r2, r9, lsr #9
 8005896:	f10c 030d 	add.w	r3, ip, #13
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 800589a:	9708      	str	r7, [sp, #32]
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 800589c:	9422      	str	r4, [sp, #136]	; 0x88
 800589e:	921a      	str	r2, [sp, #104]	; 0x68
 80058a0:	0a04      	lsrs	r4, r0, #8

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
 80058a2:	af64      	add	r7, sp, #400	; 0x190
 80058a4:	f003 030f 	and.w	r3, r3, #15
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80058a8:	ea4f 52c9 	mov.w	r2, r9, lsl #23
 80058ac:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80058b0:	084e      	lsrs	r6, r1, #1

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
 80058b2:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80058b6:	ea42 2258 	orr.w	r2, r2, r8, lsr #9
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 80058ba:	09cf      	lsrs	r7, r1, #7
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80058bc:	ea46 76c0 	orr.w	r6, r6, r0, lsl #31
 80058c0:	9424      	str	r4, [sp, #144]	; 0x90
 80058c2:	921b      	str	r2, [sp, #108]	; 0x6c
 80058c4:	0a09      	lsrs	r1, r1, #8

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
 80058c6:	e953 2320 	ldrd	r2, r3, [r3, #-128]	; 0x80
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 80058ca:	0994      	lsrs	r4, r2, #6
 80058cc:	940a      	str	r4, [sp, #40]	; 0x28
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 80058ce:	9709      	str	r7, [sp, #36]	; 0x24
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80058d0:	9623      	str	r6, [sp, #140]	; 0x8c
 80058d2:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 80058d6:	9125      	str	r1, [sp, #148]	; 0x94
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 80058d8:	e9dd 6722 	ldrd	r6, r7, [sp, #136]	; 0x88
 80058dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80058e0:	404f      	eors	r7, r1
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 80058e2:	990a      	ldr	r1, [sp, #40]	; 0x28
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 80058e4:	4046      	eors	r6, r0
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 80058e6:	ea41 6183 	orr.w	r1, r1, r3, lsl #26
 80058ea:	910a      	str	r1, [sp, #40]	; 0x28
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80058ec:	0cd1      	lsrs	r1, r2, #19
 80058ee:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
 80058f2:	9126      	str	r1, [sp, #152]	; 0x98
 80058f4:	ea4f 718a 	mov.w	r1, sl, lsl #30
 80058f8:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 80058fc:	911c      	str	r1, [sp, #112]	; 0x70
 80058fe:	ea4f 711a 	mov.w	r1, sl, lsr #28
 8005902:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 8005906:	911e      	str	r1, [sp, #120]	; 0x78
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
 8005908:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800590c:	4070      	eors	r0, r6
 800590e:	4079      	eors	r1, r7
 8005910:	e9cd 0130 	strd	r0, r1, [sp, #192]	; 0xc0
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
 8005914:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 8005918:	0999      	lsrs	r1, r3, #6
 800591a:	910b      	str	r1, [sp, #44]	; 0x2c

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
 800591c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8005920:	4070      	eors	r0, r6
 8005922:	4079      	eors	r1, r7
 8005924:	f10c 0408 	add.w	r4, ip, #8
 8005928:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
 800592c:	4046      	eors	r6, r0
 800592e:	404f      	eors	r7, r1
 8005930:	e9cd 672e 	strd	r6, r7, [sp, #184]	; 0xb8
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 8005934:	e9dd 0130 	ldrd	r0, r1, [sp, #192]	; 0xc0
	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
 8005938:	af64      	add	r7, sp, #400	; 0x190
 800593a:	f004 040f 	and.w	r4, r4, #15
 800593e:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 8005942:	e955 6720 	ldrd	r6, r7, [r5, #-128]	; 0x80
 8005946:	1980      	adds	r0, r0, r6
 8005948:	eb41 0107 	adc.w	r1, r1, r7
 800594c:	e9cd 0130 	strd	r0, r1, [sp, #192]	; 0xc0
 8005950:	e954 0120 	ldrd	r0, r1, [r4, #-128]	; 0x80
 8005954:	e9dd 6730 	ldrd	r6, r7, [sp, #192]	; 0xc0
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005958:	0cdc      	lsrs	r4, r3, #19
 800595a:	ea44 3442 	orr.w	r4, r4, r2, lsl #13
 800595e:	9427      	str	r4, [sp, #156]	; 0x9c
 8005960:	00d4      	lsls	r4, r2, #3
 8005962:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 8005966:	00db      	lsls	r3, r3, #3
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 8005968:	1980      	adds	r0, r0, r6
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 800596a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 800596e:	eb41 0107 	adc.w	r1, r1, r7
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005972:	9428      	str	r4, [sp, #160]	; 0xa0
 8005974:	9329      	str	r3, [sp, #164]	; 0xa4
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 8005976:	e9dd 6726 	ldrd	r6, r7, [sp, #152]	; 0x98
 800597a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800597e:	4056      	eors	r6, r2
 8005980:	405f      	eors	r7, r3
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
 8005982:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 8005986:	4056      	eors	r6, r2
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 8005988:	1982      	adds	r2, r0, r6
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
 800598a:	ea87 0703 	eor.w	r7, r7, r3
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 800598e:	eb41 0307 	adc.w	r3, r1, r7
 8005992:	e9cd 2330 	strd	r2, r3, [sp, #192]	; 0xc0
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
 8005996:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800599a:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800599e:	ea20 0008 	bic.w	r0, r0, r8
 80059a2:	ea02 0208 	and.w	r2, r2, r8
 80059a6:	ea03 0309 	and.w	r3, r3, r9
 80059aa:	ea21 0109 	bic.w	r1, r1, r9
 80059ae:	4050      	eors	r0, r2
 80059b0:	4059      	eors	r1, r3
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80059b2:	ea4f 738b 	mov.w	r3, fp, lsl #30

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 80059b6:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80059ba:	ea43 039a 	orr.w	r3, r3, sl, lsr #2

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 80059be:	1980      	adds	r0, r0, r6
 80059c0:	eb41 0107 	adc.w	r1, r1, r7
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80059c4:	931d      	str	r3, [sp, #116]	; 0x74

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 80059c6:	e955 6720 	ldrd	r6, r7, [r5, #-128]	; 0x80
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80059ca:	ea4f 634a 	mov.w	r3, sl, lsl #25

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 80059ce:	1836      	adds	r6, r6, r0
 80059d0:	eb47 0701 	adc.w	r7, r7, r1
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80059d4:	ea43 13db 	orr.w	r3, r3, fp, lsr #7
 80059d8:	ea4f 721b 	mov.w	r2, fp, lsr #28
		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 80059dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80059e0:	ea42 120a 	orr.w	r2, r2, sl, lsl #4
 80059e4:	9320      	str	r3, [sp, #128]	; 0x80

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 80059e6:	e9cd 672e 	strd	r6, r7, [sp, #184]	; 0xb8
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 80059ea:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80059ee:	ea4f 634b 	mov.w	r3, fp, lsl #25
		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 80059f2:	404f      	eors	r7, r1
 80059f4:	4953      	ldr	r1, [pc, #332]	; (8005b44 <sha512_block+0x490>)
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80059f6:	921f      	str	r2, [sp, #124]	; 0x7c
 80059f8:	ea43 13da 	orr.w	r3, r3, sl, lsr #7
		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 80059fc:	4046      	eors	r6, r0
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80059fe:	9321      	str	r3, [sp, #132]	; 0x84
 8005a00:	eb01 04cc 	add.w	r4, r1, ip, lsl #3
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
 8005a04:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8005a08:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8005a0c:	4042      	eors	r2, r0
 8005a0e:	404b      	eors	r3, r1
 8005a10:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8005a14:	4050      	eors	r0, r2
 8005a16:	4059      	eors	r1, r3
 8005a18:	e9cd 0100 	strd	r0, r1, [sp]
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 8005a1c:	e9dd 2330 	ldrd	r2, r3, [sp, #192]	; 0xc0

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 8005a20:	e9dd 012e 	ldrd	r0, r1, [sp, #184]	; 0xb8
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 8005a24:	e945 2320 	strd	r2, r3, [r5, #-128]	; 0x80

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 8005a28:	f1a4 0508 	sub.w	r5, r4, #8
 8005a2c:	e9d5 4500 	ldrd	r4, r5, [r5]
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 8005a30:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 8005a34:	1900      	adds	r0, r0, r4
 8005a36:	eb41 0105 	adc.w	r1, r1, r5
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 8005a3a:	ea06 060a 	and.w	r6, r6, sl
 8005a3e:	ea07 070b 	and.w	r7, r7, fp
 8005a42:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 8005a46:	4014      	ands	r4, r2
 8005a48:	401d      	ands	r5, r3
 8005a4a:	4074      	eors	r4, r6
 8005a4c:	407d      	eors	r5, r7

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 8005a4e:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
 8005a52:	1980      	adds	r0, r0, r6
 8005a54:	eb41 0107 	adc.w	r1, r1, r7
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
		const uint64_t temp2 = S0 + maj;
 8005a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a5c:	18a4      	adds	r4, r4, r2
 8005a5e:	eb45 0503 	adc.w	r5, r5, r3

		/* Update round state */
		h = g;
		g = f;
		f = e;
		e = d + temp1;
 8005a62:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8005a66:	1812      	adds	r2, r2, r0
 8005a68:	eb43 0301 	adc.w	r3, r3, r1
		d = c;
		c = b;
		b = a;
		a = temp1 + temp2;
 8005a6c:	1900      	adds	r0, r0, r4
 8005a6e:	eb41 0105 	adc.w	r1, r1, r5
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];

	for (i = 0; i < 80; i++) {
 8005a72:	f1bc 0f50 	cmp.w	ip, #80	; 0x50
 8005a76:	f47f aecb 	bne.w	8005810 <sha512_block+0x15c>
 8005a7a:	4614      	mov	r4, r2
 8005a7c:	461d      	mov	r5, r3
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4640      	mov	r0, r8
 8005a84:	4649      	mov	r1, r9
 8005a86:	46d0      	mov	r8, sl
 8005a88:	46d9      	mov	r9, fp
 8005a8a:	4682      	mov	sl, r0
 8005a8c:	468b      	mov	fp, r1
 8005a8e:	4620      	mov	r0, r4
 8005a90:	4629      	mov	r1, r5
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 8005a92:	e9dd 4534 	ldrd	r4, r5, [sp, #208]	; 0xd0
 8005a96:	18a4      	adds	r4, r4, r2
 8005a98:	eb45 0503 	adc.w	r5, r5, r3
	s->h[1] += b;
 8005a9c:	e9dd 6736 	ldrd	r6, r7, [sp, #216]	; 0xd8
 8005aa0:	eb16 0608 	adds.w	r6, r6, r8
 8005aa4:	eb47 0709 	adc.w	r7, r7, r9
	s->h[2] += c;
 8005aa8:	e9dd 2338 	ldrd	r2, r3, [sp, #224]	; 0xe0
 8005aac:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 8005ab0:	eb18 0802 	adds.w	r8, r8, r2
 8005ab4:	eb49 0903 	adc.w	r9, r9, r3
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 8005ab8:	e9cd 4506 	strd	r4, r5, [sp, #24]
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
 8005abc:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
	s->h[4] += e;
 8005ac0:	e9dd 233c 	ldrd	r2, r3, [sp, #240]	; 0xf0
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
	s->h[1] += b;
 8005ac4:	e9cd 6704 	strd	r6, r7, [sp, #16]
	s->h[2] += c;
	s->h[3] += d;
 8005ac8:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 8005acc:	19a4      	adds	r4, r4, r6
 8005ace:	eb45 0507 	adc.w	r5, r5, r7
	s->h[4] += e;
 8005ad2:	1880      	adds	r0, r0, r2
 8005ad4:	eb41 0103 	adc.w	r1, r1, r3
	s->h[5] += f;
	s->h[6] += g;
 8005ad8:	af40      	add	r7, sp, #256	; 0x100
	s->h[0] += a;
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
	s->h[4] += e;
	s->h[5] += f;
 8005ada:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
 8005ade:	eb12 020a 	adds.w	r2, r2, sl
 8005ae2:	eb43 030b 	adc.w	r3, r3, fp
	s->h[6] += g;
 8005ae6:	e9d7 6700 	ldrd	r6, r7, [r7]

	/* Store state */
	s->h[0] += a;
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
 8005aea:	e9cd 4502 	strd	r4, r5, [sp, #8]
	s->h[4] += e;
	s->h[5] += f;
	s->h[6] += g;
 8005aee:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
	s->h[7] += h;
 8005af2:	f50d 7b84 	add.w	fp, sp, #264	; 0x108
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
	s->h[4] += e;
	s->h[5] += f;
	s->h[6] += g;
 8005af6:	19a4      	adds	r4, r4, r6
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 8005af8:	f8dd c0cc 	ldr.w	ip, [sp, #204]	; 0xcc
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
	s->h[4] += e;
	s->h[5] += f;
	s->h[6] += g;
 8005afc:	eb45 0507 	adc.w	r5, r5, r7
	s->h[7] += h;
 8005b00:	e9db ab00 	ldrd	sl, fp, [fp]
 8005b04:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005b08:	eb16 060a 	adds.w	r6, r6, sl
 8005b0c:	eb47 070b 	adc.w	r7, r7, fp
	}

	/* Store state */
	s->h[0] += a;
	s->h[1] += b;
	s->h[2] += c;
 8005b10:	e9cc 8904 	strd	r8, r9, [ip, #16]
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 8005b14:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
 8005b18:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 8005b1c:	e9cc ab00 	strd	sl, fp, [ip]
	s->h[1] += b;
 8005b20:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
	s->h[2] += c;
	s->h[3] += d;
 8005b24:	e9cc 8906 	strd	r8, r9, [ip, #24]
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
	s->h[1] += b;
 8005b28:	e9cc ab02 	strd	sl, fp, [ip, #8]
	s->h[2] += c;
	s->h[3] += d;
	s->h[4] += e;
 8005b2c:	e9cc 0108 	strd	r0, r1, [ip, #32]
	s->h[5] += f;
 8005b30:	e9cc 230a 	strd	r2, r3, [ip, #40]	; 0x28
	s->h[6] += g;
 8005b34:	e9cc 450c 	strd	r4, r5, [ip, #48]	; 0x30
	s->h[7] += h;
 8005b38:	e9cc 670e 	strd	r6, r7, [ip, #56]	; 0x38
}
 8005b3c:	b064      	add	sp, #400	; 0x190
 8005b3e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b42:	4770      	bx	lr
 8005b44:	080078c8 	stmdaeq	r0, {r3, r6, r7, fp, ip, sp, lr}

08005b48 <sha512_final>:

void sha512_final(struct sha512_state *s, const uint8_t *blk,
		  size_t total_size)
{
 8005b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t temp[SHA512_BLOCK_SIZE] = {0};
 8005b4c:	2580      	movs	r5, #128	; 0x80
	s->h[7] += h;
}

void sha512_final(struct sha512_state *s, const uint8_t *blk,
		  size_t total_size)
{
 8005b4e:	b0a0      	sub	sp, #128	; 0x80
 8005b50:	4614      	mov	r4, r2
 8005b52:	4682      	mov	sl, r0
 8005b54:	460f      	mov	r7, r1
	uint8_t temp[SHA512_BLOCK_SIZE] = {0};
 8005b56:	4668      	mov	r0, sp
 8005b58:	462a      	mov	r2, r5
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	f001 f8b1 	bl	8006cc2 <memset>
	const size_t last_size = total_size & (SHA512_BLOCK_SIZE - 1);

	if (last_size)
 8005b60:	f014 067f 	ands.w	r6, r4, #127	; 0x7f
 8005b64:	d11e      	bne.n	8005ba4 <sha512_final+0x5c>
		memcpy(temp, blk, last_size);
	temp[last_size] = 0x80;
 8005b66:	f88d 5000 	strb.w	r5, [sp]
		sha512_block(s, temp);
		memset(temp, 0, sizeof(temp));
	}

	/* Note: we assume total_size fits in 61 bits */
	store64(temp + SHA512_BLOCK_SIZE - 8, total_size << 3);
 8005b6a:	00e2      	lsls	r2, r4, #3

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005b6c:	0a14      	lsrs	r4, r2, #8
	*(x--) = v;
	v >>= 8;
 8005b6e:	0a26      	lsrs	r6, r4, #8

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005b70:	2500      	movs	r5, #0
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005b72:	ea4f 2816 	mov.w	r8, r6, lsr #8
		memset(temp, 0, sizeof(temp));
	}

	/* Note: we assume total_size fits in 61 bits */
	store64(temp + SHA512_BLOCK_SIZE - 8, total_size << 3);
	sha512_block(s, temp);
 8005b76:	4650      	mov	r0, sl
 8005b78:	4669      	mov	r1, sp
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005b7a:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
	v >>= 8;
	*(x--) = v;
 8005b7e:	f88d 407e 	strb.w	r4, [sp, #126]	; 0x7e
	v >>= 8;
	*(x--) = v;
 8005b82:	f88d 607d 	strb.w	r6, [sp, #125]	; 0x7d
	v >>= 8;
	*(x--) = v;
 8005b86:	f88d 807c 	strb.w	r8, [sp, #124]	; 0x7c
	v >>= 8;
	*(x--) = v;
 8005b8a:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
	v >>= 8;
	*(x--) = v;
 8005b8e:	f88d 507a 	strb.w	r5, [sp, #122]	; 0x7a
	v >>= 8;
	*(x--) = v;
 8005b92:	f88d 5079 	strb.w	r5, [sp, #121]	; 0x79
	v >>= 8;
	*(x--) = v;
 8005b96:	f88d 5078 	strb.w	r5, [sp, #120]	; 0x78
		memset(temp, 0, sizeof(temp));
	}

	/* Note: we assume total_size fits in 61 bits */
	store64(temp + SHA512_BLOCK_SIZE - 8, total_size << 3);
	sha512_block(s, temp);
 8005b9a:	f7ff fd8b 	bl	80056b4 <sha512_block>
}
 8005b9e:	b020      	add	sp, #128	; 0x80
 8005ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{
	uint8_t temp[SHA512_BLOCK_SIZE] = {0};
	const size_t last_size = total_size & (SHA512_BLOCK_SIZE - 1);

	if (last_size)
		memcpy(temp, blk, last_size);
 8005ba4:	4639      	mov	r1, r7
 8005ba6:	4668      	mov	r0, sp
 8005ba8:	4632      	mov	r2, r6
 8005baa:	f001 f881 	bl	8006cb0 <memcpy>
	temp[last_size] = 0x80;
 8005bae:	eb0d 0305 	add.w	r3, sp, r5
 8005bb2:	4433      	add	r3, r6

	if (last_size > 111) {
 8005bb4:	2e6f      	cmp	r6, #111	; 0x6f
	uint8_t temp[SHA512_BLOCK_SIZE] = {0};
	const size_t last_size = total_size & (SHA512_BLOCK_SIZE - 1);

	if (last_size)
		memcpy(temp, blk, last_size);
	temp[last_size] = 0x80;
 8005bb6:	f803 5c80 	strb.w	r5, [r3, #-128]

	if (last_size > 111) {
 8005bba:	d9d6      	bls.n	8005b6a <sha512_final+0x22>
		sha512_block(s, temp);
 8005bbc:	4650      	mov	r0, sl
 8005bbe:	4669      	mov	r1, sp
 8005bc0:	f7ff fd78 	bl	80056b4 <sha512_block>
		memset(temp, 0, sizeof(temp));
 8005bc4:	4668      	mov	r0, sp
 8005bc6:	462a      	mov	r2, r5
 8005bc8:	2100      	movs	r1, #0
 8005bca:	f001 f87a 	bl	8006cc2 <memset>
 8005bce:	e7cc      	b.n	8005b6a <sha512_final+0x22>

08005bd0 <sha512_get>:
	sha512_block(s, temp);
}

void sha512_get(const struct sha512_state *s, uint8_t *hash,
		unsigned int offset, unsigned int len)
{
 8005bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;

	if (offset > SHA512_BLOCK_SIZE)
 8005bd4:	2a80      	cmp	r2, #128	; 0x80
	sha512_block(s, temp);
}

void sha512_get(const struct sha512_state *s, uint8_t *hash,
		unsigned int offset, unsigned int len)
{
 8005bd6:	b09b      	sub	sp, #108	; 0x6c
 8005bd8:	9014      	str	r0, [sp, #80]	; 0x50
 8005bda:	910f      	str	r1, [sp, #60]	; 0x3c
	int i;

	if (offset > SHA512_BLOCK_SIZE)
 8005bdc:	d87b      	bhi.n	8005cd6 <sha512_get+0x106>
		return;

	if (len > SHA512_BLOCK_SIZE - offset)
 8005bde:	f1c2 0180 	rsb	r1, r2, #128	; 0x80
 8005be2:	4299      	cmp	r1, r3
 8005be4:	bf28      	it	cs
 8005be6:	4619      	movcs	r1, r3
		len = SHA512_BLOCK_SIZE - offset;

	/* Skip whole words */
	i = offset >> 3;
 8005be8:	08d0      	lsrs	r0, r2, #3
	offset &= 7;

	/* Skip/read out bytes */
	if (offset) {
 8005bea:	f012 0207 	ands.w	r2, r2, #7
 8005bee:	910d      	str	r1, [sp, #52]	; 0x34

	if (len > SHA512_BLOCK_SIZE - offset)
		len = SHA512_BLOCK_SIZE - offset;

	/* Skip whole words */
	i = offset >> 3;
 8005bf0:	900e      	str	r0, [sp, #56]	; 0x38
	offset &= 7;

	/* Skip/read out bytes */
	if (offset) {
 8005bf2:	9215      	str	r2, [sp, #84]	; 0x54
 8005bf4:	d172      	bne.n	8005cdc <sha512_get+0x10c>
		len -= c;
		hash += c;
	}

	/* Read out whole words */
	while (len >= 8) {
 8005bf6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005bf8:	2d07      	cmp	r5, #7
 8005bfa:	d969      	bls.n	8005cd0 <sha512_get+0x100>
 8005bfc:	f1a5 0308 	sub.w	r3, r5, #8
 8005c00:	08db      	lsrs	r3, r3, #3
 8005c02:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005c04:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005c06:	469c      	mov	ip, r3
 8005c08:	4484      	add	ip, r0
 8005c0a:	930a      	str	r3, [sp, #40]	; 0x28
 8005c0c:	f104 0308 	add.w	r3, r4, #8
 8005c10:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 8005c14:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8005c18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005c1a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8005c1e:	9012      	str	r0, [sp, #72]	; 0x48
		store64(hash, s->h[i++]);
 8005c20:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8005c22:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8005c26:	e9cd 2306 	strd	r2, r3, [sp, #24]

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005c2a:	9d06      	ldr	r5, [sp, #24]
 8005c2c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005c30:	0a2a      	lsrs	r2, r5, #8
 8005c32:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 8005c36:	ea4f 231c 	mov.w	r3, ip, lsr #8
	*(x--) = v;
	v >>= 8;
 8005c3a:	0a10      	lsrs	r0, r2, #8
		hash += c;
	}

	/* Read out whole words */
	while (len >= 8) {
		store64(hash, s->h[i++]);
 8005c3c:	9412      	str	r4, [sp, #72]	; 0x48
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005c3e:	ea40 6403 	orr.w	r4, r0, r3, lsl #24
 8005c42:	0a1d      	lsrs	r5, r3, #8
	*(x--) = v;
	v >>= 8;
 8005c44:	ea4f 2a14 	mov.w	sl, r4, lsr #8
 8005c48:	ea4a 6a05 	orr.w	sl, sl, r5, lsl #24
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005c4c:	9404      	str	r4, [sp, #16]
	*(x--) = v;
	v >>= 8;
 8005c4e:	ea4f 2b15 	mov.w	fp, r5, lsr #8
	*(x--) = v;
	v >>= 8;
 8005c52:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8005c56:	ea44 640b 	orr.w	r4, r4, fp, lsl #24
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005c5a:	9505      	str	r5, [sp, #20]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005c5c:	0a26      	lsrs	r6, r4, #8
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005c5e:	ea4f 251b 	mov.w	r5, fp, lsr #8
	*(x--) = v;
	v >>= 8;
 8005c62:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
 8005c66:	0a2f      	lsrs	r7, r5, #8
	*(x--) = v;
	v >>= 8;
 8005c68:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8005c6c:	ea48 6807 	orr.w	r8, r8, r7, lsl #24
 8005c70:	ea4f 2917 	mov.w	r9, r7, lsr #8
	*(x--) = v;
	v >>= 8;
 8005c74:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8005c78:	ea40 6c09 	orr.w	ip, r0, r9, lsl #24
 8005c7c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8005c80:	9009      	str	r0, [sp, #36]	; 0x24
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005c82:	f89d 0010 	ldrb.w	r0, [sp, #16]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005c86:	f8cd c020 	str.w	ip, [sp, #32]
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005c8a:	7148      	strb	r0, [r1, #5]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005c8c:	f89d c020 	ldrb.w	ip, [sp, #32]
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005c90:	f89d 0018 	ldrb.w	r0, [sp, #24]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005c94:	f881 8001 	strb.w	r8, [r1, #1]
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005c98:	71c8      	strb	r0, [r1, #7]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005c9a:	708e      	strb	r6, [r1, #2]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005c9c:	70cc      	strb	r4, [r1, #3]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005c9e:	f881 a004 	strb.w	sl, [r1, #4]
static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005ca2:	718a      	strb	r2, [r1, #6]
		len -= c;
		hash += c;
	}

	/* Read out whole words */
	while (len >= 8) {
 8005ca4:	9812      	ldr	r0, [sp, #72]	; 0x48
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005ca6:	f801 cb08 	strb.w	ip, [r1], #8
		len -= c;
		hash += c;
	}

	/* Read out whole words */
	while (len >= 8) {
 8005caa:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8005cae:	4560      	cmp	r0, ip
 8005cb0:	d1b6      	bne.n	8005c20 <sha512_get+0x50>
 8005cb2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005cb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005cb6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005cb8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005cba:	1c4b      	adds	r3, r1, #1
 8005cbc:	f100 0c01 	add.w	ip, r0, #1
 8005cc0:	4461      	add	r1, ip
 8005cc2:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8005cc6:	f005 0507 	and.w	r5, r5, #7
 8005cca:	910e      	str	r1, [sp, #56]	; 0x38
 8005ccc:	940f      	str	r4, [sp, #60]	; 0x3c
 8005cce:	950d      	str	r5, [sp, #52]	; 0x34
		hash += 8;
		len -= 8;
	}

	/* Read out bytes */
	if (len) {
 8005cd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d173      	bne.n	8005dbe <sha512_get+0x1ee>
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
		memcpy(hash, tmp, len);
	}
}
 8005cd6:	b01b      	add	sp, #108	; 0x6c
 8005cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 8005cdc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005cde:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005ce6:	0a14      	lsrs	r4, r2, #8
 8005ce8:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 8005cec:	0a1d      	lsrs	r5, r3, #8
	*(x--) = v;
	v >>= 8;
 8005cee:	0a21      	lsrs	r1, r4, #8
 8005cf0:	ea41 6c05 	orr.w	ip, r1, r5, lsl #24
 8005cf4:	ea4f 2e15 	mov.w	lr, r5, lsr #8
	*(x--) = v;
	v >>= 8;
 8005cf8:	ea4f 211c 	mov.w	r1, ip, lsr #8
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005cfc:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
	*(x--) = v;
	v >>= 8;
 8005d00:	ea41 6c0e 	orr.w	ip, r1, lr, lsl #24
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d04:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d08:	ea4f 211c 	mov.w	r1, ip, lsr #8
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d0c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8005d10:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
	*(x--) = v;
	v >>= 8;
 8005d14:	ea41 6c0e 	orr.w	ip, r1, lr, lsl #24
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d18:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d1c:	ea4f 201c 	mov.w	r0, ip, lsr #8
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d20:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
	*(x--) = v;
	v >>= 8;
 8005d24:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
 8005d28:	ea4f 211e 	mov.w	r1, lr, lsr #8
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005d2c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d30:	0a02      	lsrs	r2, r0, #8
 8005d32:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005d36:	0a0b      	lsrs	r3, r1, #8
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d38:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d3c:	0a15      	lsrs	r5, r2, #8
 8005d3e:	ea45 6c03 	orr.w	ip, r5, r3, lsl #24
static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d42:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d46:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d4a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d4e:	f8cd c018 	str.w	ip, [sp, #24]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d52:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
	offset &= 7;

	/* Skip/read out bytes */
	if (offset) {
		uint8_t tmp[8];
		unsigned int c = 8 - offset;
 8005d56:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d5a:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
	v >>= 8;
	*(x--) = v;
 8005d5e:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
	v >>= 8;
	*(x--) = v;
 8005d62:	f88d 5063 	strb.w	r5, [sp, #99]	; 0x63
 8005d66:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d68:	f89d 5018 	ldrb.w	r5, [sp, #24]
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d6c:	f88d e065 	strb.w	lr, [sp, #101]	; 0x65
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d70:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d74:	ea4f 2e13 	mov.w	lr, r3, lsr #8
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d78:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 8005d7c:	980e      	ldr	r0, [sp, #56]	; 0x38
		memcpy(hash, tmp + offset, c);
 8005d7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d80:	a91a      	add	r1, sp, #104	; 0x68
	offset &= 7;

	/* Skip/read out bytes */
	if (offset) {
		uint8_t tmp[8];
		unsigned int c = 8 - offset;
 8005d82:	f1cc 0308 	rsb	r3, ip, #8
 8005d86:	429c      	cmp	r4, r3
 8005d88:	bf38      	it	cc
 8005d8a:	4623      	movcc	r3, r4
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d8c:	f801 5d08 	strb.w	r5, [r1, #-8]!
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 8005d90:	f100 0c01 	add.w	ip, r0, #1
		memcpy(hash, tmp + offset, c);
		len -= c;
 8005d94:	1ae4      	subs	r4, r4, r3

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
		memcpy(hash, tmp + offset, c);
 8005d96:	4411      	add	r1, r2
 8005d98:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005d9a:	461a      	mov	r2, r3
		len -= c;
 8005d9c:	940d      	str	r4, [sp, #52]	; 0x34

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
		memcpy(hash, tmp + offset, c);
 8005d9e:	9302      	str	r3, [sp, #8]
 8005da0:	f8cd c00c 	str.w	ip, [sp, #12]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005da4:	f8cd e01c 	str.w	lr, [sp, #28]

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
		memcpy(hash, tmp + offset, c);
 8005da8:	f000 ff82 	bl	8006cb0 <memcpy>
		len -= c;
		hash += c;
 8005dac:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005dae:	9b02      	ldr	r3, [sp, #8]
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 8005db0:	f8dd c00c 	ldr.w	ip, [sp, #12]
		memcpy(hash, tmp + offset, c);
		len -= c;
		hash += c;
 8005db4:	441c      	add	r4, r3
 8005db6:	940f      	str	r4, [sp, #60]	; 0x3c
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 8005db8:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8005dbc:	e71b      	b.n	8005bf6 <sha512_get+0x26>

	/* Read out bytes */
	if (len) {
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
 8005dbe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005dc0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005dc2:	eb04 0cc5 	add.w	ip, r4, r5, lsl #3
 8005dc6:	e9dc 0100 	ldrd	r0, r1, [ip]
 8005dca:	e9cd 0104 	strd	r0, r1, [sp, #16]

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005dce:	ea4f 2a10 	mov.w	sl, r0, lsr #8
 8005dd2:	ea4a 6a01 	orr.w	sl, sl, r1, lsl #24
 8005dd6:	9905      	ldr	r1, [sp, #20]
	*(x--) = v;
	v >>= 8;
 8005dd8:	ea4f 281a 	mov.w	r8, sl, lsr #8

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005ddc:	ea4f 2b11 	mov.w	fp, r1, lsr #8
	*(x--) = v;
	v >>= 8;
 8005de0:	ea48 680b 	orr.w	r8, r8, fp, lsl #24
 8005de4:	ea4f 291b 	mov.w	r9, fp, lsr #8
	*(x--) = v;
	v >>= 8;
 8005de8:	ea4f 2618 	mov.w	r6, r8, lsr #8
 8005dec:	ea46 6609 	orr.w	r6, r6, r9, lsl #24
 8005df0:	ea4f 2719 	mov.w	r7, r9, lsr #8
	*(x--) = v;
	v >>= 8;
 8005df4:	0a34      	lsrs	r4, r6, #8
 8005df6:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
 8005dfa:	0a3d      	lsrs	r5, r7, #8
	*(x--) = v;
	v >>= 8;
 8005dfc:	0a20      	lsrs	r0, r4, #8
 8005dfe:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 8005e02:	0a29      	lsrs	r1, r5, #8
	*(x--) = v;
	v >>= 8;
 8005e04:	0a03      	lsrs	r3, r0, #8
 8005e06:	ea43 6c01 	orr.w	ip, r3, r1, lsl #24
 8005e0a:	ea4f 2e11 	mov.w	lr, r1, lsr #8
	*(x--) = v;
	v >>= 8;
 8005e0e:	ea4f 231c 	mov.w	r3, ip, lsr #8
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005e12:	f89d 2010 	ldrb.w	r2, [sp, #16]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005e16:	f8cd c018 	str.w	ip, [sp, #24]
	*(x--) = v;
	v >>= 8;
 8005e1a:	ea43 6c0e 	orr.w	ip, r3, lr, lsl #24
 8005e1e:	f8cd c010 	str.w	ip, [sp, #16]
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005e22:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005e26:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005e2a:	f89d 2010 	ldrb.w	r2, [sp, #16]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005e2e:	f89d 0018 	ldrb.w	r0, [sp, #24]
	v >>= 8;
	*(x--) = v;
 8005e32:	a91a      	add	r1, sp, #104	; 0x68
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005e34:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005e38:	f8cd e01c 	str.w	lr, [sp, #28]
static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005e3c:	f88d a066 	strb.w	sl, [sp, #102]	; 0x66
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005e40:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005e44:	f88d 8065 	strb.w	r8, [sp, #101]	; 0x65
	v >>= 8;
	*(x--) = v;
 8005e48:	f88d 6064 	strb.w	r6, [sp, #100]	; 0x64
	v >>= 8;
	*(x--) = v;
 8005e4c:	f88d 4063 	strb.w	r4, [sp, #99]	; 0x63
	/* Read out bytes */
	if (len) {
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
		memcpy(hash, tmp, len);
 8005e50:	980f      	ldr	r0, [sp, #60]	; 0x3c
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005e52:	f801 2d08 	strb.w	r2, [r1, #-8]!
	/* Read out bytes */
	if (len) {
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
		memcpy(hash, tmp, len);
 8005e56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005e58:	f8cd e014 	str.w	lr, [sp, #20]
	/* Read out bytes */
	if (len) {
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
		memcpy(hash, tmp, len);
 8005e5c:	f000 ff28 	bl	8006cb0 <memcpy>
	}
}
 8005e60:	b01b      	add	sp, #108	; 0x6c
 8005e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e66:	bf00      	nop

08005e68 <base64_init_encodestate>:

const int CHARS_PER_LINE = 72;

void base64_init_encodestate(base64_encodestate* state_in)
{
	state_in->step = step_A;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	7003      	strb	r3, [r0, #0]
	state_in->result = 0;
 8005e6c:	7043      	strb	r3, [r0, #1]
	state_in->stepcount = 0;
 8005e6e:	6043      	str	r3, [r0, #4]
 8005e70:	4770      	bx	lr
	...

08005e74 <base64_encode_value>:
}

char base64_encode_value(char value_in)
{
	static const char* encoding = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	if (value_in > 63) return '=';
 8005e74:	283f      	cmp	r0, #63	; 0x3f
	return encoding[(int)value_in];
 8005e76:	bf9a      	itte	ls
 8005e78:	4b01      	ldrls	r3, [pc, #4]	; (8005e80 <base64_encode_value+0xc>)
 8005e7a:	5cc0      	ldrbls	r0, [r0, r3]
}

char base64_encode_value(char value_in)
{
	static const char* encoding = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	if (value_in > 63) return '=';
 8005e7c:	203d      	movhi	r0, #61	; 0x3d
	return encoding[(int)value_in];
}
 8005e7e:	4770      	bx	lr
 8005e80:	08007b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, sp, lr}

08005e84 <base64_encode_block>:

int base64_encode_block(const char* plaintext_in, int length_in, char* code_out, base64_encodestate* state_in)
{
 8005e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e88:	461c      	mov	r4, r3
	const char* const plaintextend = plaintext_in + length_in;
	char* codechar = code_out;
	char result;
	char fragment;
	
	result = state_in->result;
 8005e8a:	785e      	ldrb	r6, [r3, #1]
	
	switch (state_in->step)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
	if (value_in > 63) return '=';
	return encoding[(int)value_in];
}

int base64_encode_block(const char* plaintext_in, int length_in, char* code_out, base64_encodestate* state_in)
{
 8005e8e:	4605      	mov	r5, r0
	char result;
	char fragment;
	
	result = state_in->result;
	
	switch (state_in->step)
 8005e90:	2b01      	cmp	r3, #1
	if (value_in > 63) return '=';
	return encoding[(int)value_in];
}

int base64_encode_block(const char* plaintext_in, int length_in, char* code_out, base64_encodestate* state_in)
{
 8005e92:	4690      	mov	r8, r2
	const char* plainchar = plaintext_in;
	const char* const plaintextend = plaintext_in + length_in;
 8005e94:	eb00 0b01 	add.w	fp, r0, r1
	char result;
	char fragment;
	
	result = state_in->result;
	
	switch (state_in->step)
 8005e98:	d01e      	beq.n	8005ed8 <base64_encode_block+0x54>
 8005e9a:	d304      	bcc.n	8005ea6 <base64_encode_block+0x22>
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d158      	bne.n	8005f52 <base64_encode_block+0xce>

int base64_encode_block(const char* plaintext_in, int length_in, char* code_out, base64_encodestate* state_in)
{
	const char* plainchar = plaintext_in;
	const char* const plaintextend = plaintext_in + length_in;
	char* codechar = code_out;
 8005ea0:	4617      	mov	r7, r2
	return encoding[(int)value_in];
}

int base64_encode_block(const char* plaintext_in, int length_in, char* code_out, base64_encodestate* state_in)
{
	const char* plainchar = plaintext_in;
 8005ea2:	4682      	mov	sl, r0
 8005ea4:	e02f      	b.n	8005f06 <base64_encode_block+0x82>
	const char* const plaintextend = plaintext_in + length_in;
	char* codechar = code_out;
 8005ea6:	4691      	mov	r9, r2
	switch (state_in->step)
	{
		while (1)
		{
	case step_A:
			if (plainchar == plaintextend)
 8005ea8:	455d      	cmp	r5, fp
 8005eaa:	d105      	bne.n	8005eb8 <base64_encode_block+0x34>
			{
				state_in->result = result;
				state_in->step = step_A;
 8005eac:	2300      	movs	r3, #0
		while (1)
		{
	case step_A:
			if (plainchar == plaintextend)
			{
				state_in->result = result;
 8005eae:	7066      	strb	r6, [r4, #1]
				state_in->step = step_A;
 8005eb0:	7023      	strb	r3, [r4, #0]
				return codechar - code_out;
 8005eb2:	ebc8 0009 	rsb	r0, r8, r9
 8005eb6:	e04d      	b.n	8005f54 <base64_encode_block+0xd0>
			}
			fragment = *plainchar++;
 8005eb8:	782e      	ldrb	r6, [r5, #0]
			result = (fragment & 0x0fc) >> 2;
			*codechar++ = base64_encode_value(result);
 8005eba:	f109 0301 	add.w	r3, r9, #1
 8005ebe:	08b0      	lsrs	r0, r6, #2
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	f7ff ffd7 	bl	8005e74 <base64_encode_value>
			{
				state_in->result = result;
				state_in->step = step_A;
				return codechar - code_out;
			}
			fragment = *plainchar++;
 8005ec6:	1c6f      	adds	r7, r5, #1
			result = (fragment & 0x0fc) >> 2;
			*codechar++ = base64_encode_value(result);
 8005ec8:	f889 0000 	strb.w	r0, [r9]
			result = (fragment & 0x003) << 4;
 8005ecc:	f006 0603 	and.w	r6, r6, #3
 8005ed0:	0136      	lsls	r6, r6, #4
			{
				state_in->result = result;
				state_in->step = step_A;
				return codechar - code_out;
			}
			fragment = *plainchar++;
 8005ed2:	463d      	mov	r5, r7
 8005ed4:	9b01      	ldr	r3, [sp, #4]
 8005ed6:	e000      	b.n	8005eda <base64_encode_block+0x56>

int base64_encode_block(const char* plaintext_in, int length_in, char* code_out, base64_encodestate* state_in)
{
	const char* plainchar = plaintext_in;
	const char* const plaintextend = plaintext_in + length_in;
	char* codechar = code_out;
 8005ed8:	4613      	mov	r3, r2
			fragment = *plainchar++;
			result = (fragment & 0x0fc) >> 2;
			*codechar++ = base64_encode_value(result);
			result = (fragment & 0x003) << 4;
	case step_B:
			if (plainchar == plaintextend)
 8005eda:	455d      	cmp	r5, fp
 8005edc:	d105      	bne.n	8005eea <base64_encode_block+0x66>
			{
				state_in->result = result;
				state_in->step = step_B;
 8005ede:	2201      	movs	r2, #1
			*codechar++ = base64_encode_value(result);
			result = (fragment & 0x003) << 4;
	case step_B:
			if (plainchar == plaintextend)
			{
				state_in->result = result;
 8005ee0:	7066      	strb	r6, [r4, #1]
				state_in->step = step_B;
 8005ee2:	7022      	strb	r2, [r4, #0]
				return codechar - code_out;
 8005ee4:	ebc8 0003 	rsb	r0, r8, r3
 8005ee8:	e034      	b.n	8005f54 <base64_encode_block+0xd0>
			}
			fragment = *plainchar++;
 8005eea:	f105 0a01 	add.w	sl, r5, #1
 8005eee:	782d      	ldrb	r5, [r5, #0]
			result |= (fragment & 0x0f0) >> 4;
			*codechar++ = base64_encode_value(result);
 8005ef0:	1c5f      	adds	r7, r3, #1
 8005ef2:	ea46 1015 	orr.w	r0, r6, r5, lsr #4
 8005ef6:	9301      	str	r3, [sp, #4]
 8005ef8:	f7ff ffbc 	bl	8005e74 <base64_encode_value>
 8005efc:	9b01      	ldr	r3, [sp, #4]
			result = (fragment & 0x00f) << 2;
 8005efe:	f005 060f 	and.w	r6, r5, #15
				state_in->step = step_B;
				return codechar - code_out;
			}
			fragment = *plainchar++;
			result |= (fragment & 0x0f0) >> 4;
			*codechar++ = base64_encode_value(result);
 8005f02:	7018      	strb	r0, [r3, #0]
			result = (fragment & 0x00f) << 2;
 8005f04:	00b6      	lsls	r6, r6, #2
	case step_C:
			if (plainchar == plaintextend)
 8005f06:	45da      	cmp	sl, fp
 8005f08:	d105      	bne.n	8005f16 <base64_encode_block+0x92>
			{
				state_in->result = result;
				state_in->step = step_C;
 8005f0a:	2302      	movs	r3, #2
			*codechar++ = base64_encode_value(result);
			result = (fragment & 0x00f) << 2;
	case step_C:
			if (plainchar == plaintextend)
			{
				state_in->result = result;
 8005f0c:	7066      	strb	r6, [r4, #1]
				state_in->step = step_C;
 8005f0e:	7023      	strb	r3, [r4, #0]
				return codechar - code_out;
 8005f10:	ebc8 0007 	rsb	r0, r8, r7
 8005f14:	e01e      	b.n	8005f54 <base64_encode_block+0xd0>
			}
			fragment = *plainchar++;
 8005f16:	f89a 9000 	ldrb.w	r9, [sl]
 8005f1a:	f10a 0501 	add.w	r5, sl, #1
			result |= (fragment & 0x0c0) >> 6;
			*codechar++ = base64_encode_value(result);
 8005f1e:	ea46 1099 	orr.w	r0, r6, r9, lsr #6
 8005f22:	f7ff ffa7 	bl	8005e74 <base64_encode_value>
			result  = (fragment & 0x03f) >> 0;
 8005f26:	f009 063f 	and.w	r6, r9, #63	; 0x3f
				state_in->step = step_C;
				return codechar - code_out;
			}
			fragment = *plainchar++;
			result |= (fragment & 0x0c0) >> 6;
			*codechar++ = base64_encode_value(result);
 8005f2a:	7038      	strb	r0, [r7, #0]
			result  = (fragment & 0x03f) >> 0;
			*codechar++ = base64_encode_value(result);
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	f7ff ffa1 	bl	8005e74 <base64_encode_value>
 8005f32:	7078      	strb	r0, [r7, #1]
			
			++(state_in->stepcount);
 8005f34:	6863      	ldr	r3, [r4, #4]
 8005f36:	3301      	adds	r3, #1
			if (state_in->stepcount == CHARS_PER_LINE/4)
 8005f38:	2b12      	cmp	r3, #18
			result |= (fragment & 0x0c0) >> 6;
			*codechar++ = base64_encode_value(result);
			result  = (fragment & 0x03f) >> 0;
			*codechar++ = base64_encode_value(result);
			
			++(state_in->stepcount);
 8005f3a:	6063      	str	r3, [r4, #4]
			if (state_in->stepcount == CHARS_PER_LINE/4)
 8005f3c:	d002      	beq.n	8005f44 <base64_encode_block+0xc0>
			}
			fragment = *plainchar++;
			result |= (fragment & 0x0c0) >> 6;
			*codechar++ = base64_encode_value(result);
			result  = (fragment & 0x03f) >> 0;
			*codechar++ = base64_encode_value(result);
 8005f3e:	f107 0902 	add.w	r9, r7, #2
 8005f42:	e7b1      	b.n	8005ea8 <base64_encode_block+0x24>
			
			++(state_in->stepcount);
			if (state_in->stepcount == CHARS_PER_LINE/4)
			{
				*codechar++ = '\n';
 8005f44:	230a      	movs	r3, #10
 8005f46:	70bb      	strb	r3, [r7, #2]
				state_in->stepcount = 0;
 8005f48:	2300      	movs	r3, #0
			*codechar++ = base64_encode_value(result);
			
			++(state_in->stepcount);
			if (state_in->stepcount == CHARS_PER_LINE/4)
			{
				*codechar++ = '\n';
 8005f4a:	f107 0903 	add.w	r9, r7, #3
				state_in->stepcount = 0;
 8005f4e:	6063      	str	r3, [r4, #4]
 8005f50:	e7aa      	b.n	8005ea8 <base64_encode_block+0x24>
			}
		}
	}
	/* control should not reach here */
	return codechar - code_out;
 8005f52:	2000      	movs	r0, #0
}
 8005f54:	b003      	add	sp, #12
 8005f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005f5a <base64_encode_blockend>:

int base64_encode_blockend(char* code_out, base64_encodestate* state_in)
{
	char* codechar = code_out;
	
	switch (state_in->step)
 8005f5a:	780b      	ldrb	r3, [r1, #0]
	/* control should not reach here */
	return codechar - code_out;
}

int base64_encode_blockend(char* code_out, base64_encodestate* state_in)
{
 8005f5c:	b510      	push	{r4, lr}
	char* codechar = code_out;
	
	switch (state_in->step)
 8005f5e:	2b01      	cmp	r3, #1
	/* control should not reach here */
	return codechar - code_out;
}

int base64_encode_blockend(char* code_out, base64_encodestate* state_in)
{
 8005f60:	4604      	mov	r4, r0
	char* codechar = code_out;
	
	switch (state_in->step)
 8005f62:	d00a      	beq.n	8005f7a <base64_encode_blockend+0x20>
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d111      	bne.n	8005f8c <base64_encode_blockend+0x32>
		*codechar++ = base64_encode_value(state_in->result);
		*codechar++ = '=';
		*codechar++ = '=';
		break;
	case step_C:
		*codechar++ = base64_encode_value(state_in->result);
 8005f68:	7848      	ldrb	r0, [r1, #1]
 8005f6a:	f7ff ff83 	bl	8005e74 <base64_encode_value>
 8005f6e:	4623      	mov	r3, r4
		*codechar++ = '=';
 8005f70:	223d      	movs	r2, #61	; 0x3d
		*codechar++ = base64_encode_value(state_in->result);
		*codechar++ = '=';
		*codechar++ = '=';
		break;
	case step_C:
		*codechar++ = base64_encode_value(state_in->result);
 8005f72:	f803 0b02 	strb.w	r0, [r3], #2
		*codechar++ = '=';
 8005f76:	7062      	strb	r2, [r4, #1]
		break;
 8005f78:	e009      	b.n	8005f8e <base64_encode_blockend+0x34>
	char* codechar = code_out;
	
	switch (state_in->step)
	{
	case step_B:
		*codechar++ = base64_encode_value(state_in->result);
 8005f7a:	7848      	ldrb	r0, [r1, #1]
 8005f7c:	f7ff ff7a 	bl	8005e74 <base64_encode_value>
		*codechar++ = '=';
 8005f80:	223d      	movs	r2, #61	; 0x3d
	char* codechar = code_out;
	
	switch (state_in->step)
	{
	case step_B:
		*codechar++ = base64_encode_value(state_in->result);
 8005f82:	7020      	strb	r0, [r4, #0]
		*codechar++ = '=';
 8005f84:	7062      	strb	r2, [r4, #1]
		*codechar++ = '=';
 8005f86:	1ce3      	adds	r3, r4, #3
 8005f88:	70a2      	strb	r2, [r4, #2]
		break;
 8005f8a:	e000      	b.n	8005f8e <base64_encode_blockend+0x34>

int base64_encode_blockend(char* code_out, base64_encodestate* state_in)
{
	char* codechar = code_out;
	
	switch (state_in->step)
 8005f8c:	4603      	mov	r3, r0
		*codechar++ = '=';
		break;
	case step_A:
		break;
	}
	*codechar++ = '\n';
 8005f8e:	4618      	mov	r0, r3
 8005f90:	220a      	movs	r2, #10
 8005f92:	f800 2b01 	strb.w	r2, [r0], #1
	
	return codechar - code_out;
}
 8005f96:	1b00      	subs	r0, r0, r4
 8005f98:	bd10      	pop	{r4, pc}
	...

08005f9c <failErase>:
    for (i = 0; i < len; i++)
        uart_printf("%02x", data[i]);
    uart_printf("\n");
}

void failErase () {
 8005f9c:	b508      	push	{r3, lr}
	// for whatever reason this only flashes upto 0x08008800
	flashErasePage((u32)(0x08008000));
 8005f9e:	480a      	ldr	r0, [pc, #40]	; (8005fc8 <failErase+0x2c>)
 8005fa0:	f7fb fb30 	bl	8001604 <flashErasePage>
	flashErasePage((u32)(0x08008000+1024));
 8005fa4:	4809      	ldr	r0, [pc, #36]	; (8005fcc <failErase+0x30>)
 8005fa6:	f7fb fb2d 	bl	8001604 <flashErasePage>
	flashErasePage((u32)(0x08008000+(u32)(0x190*2)));
 8005faa:	4809      	ldr	r0, [pc, #36]	; (8005fd0 <failErase+0x34>)
 8005fac:	f7fb fb2a 	bl	8001604 <flashErasePage>
	flashErasePage((u32)(0x08008000+(u32)(0x190*3)));
 8005fb0:	4808      	ldr	r0, [pc, #32]	; (8005fd4 <failErase+0x38>)
 8005fb2:	f7fb fb27 	bl	8001604 <flashErasePage>
	flashErasePage((u32)(0x08008000+(u32)(0x190*4)));
 8005fb6:	4808      	ldr	r0, [pc, #32]	; (8005fd8 <failErase+0x3c>)
 8005fb8:	f7fb fb24 	bl	8001604 <flashErasePage>
	flashErasePage((u32)(0x08008000+(u32)(0x190*5)));
}
 8005fbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	flashErasePage((u32)(0x08008000));
	flashErasePage((u32)(0x08008000+1024));
	flashErasePage((u32)(0x08008000+(u32)(0x190*2)));
	flashErasePage((u32)(0x08008000+(u32)(0x190*3)));
	flashErasePage((u32)(0x08008000+(u32)(0x190*4)));
	flashErasePage((u32)(0x08008000+(u32)(0x190*5)));
 8005fc0:	4806      	ldr	r0, [pc, #24]	; (8005fdc <failErase+0x40>)
 8005fc2:	f7fb bb1f 	b.w	8001604 <flashErasePage>
 8005fc6:	bf00      	nop
 8005fc8:	08008000 	stmdaeq	r0, {pc}
 8005fcc:	08008400 	stmdaeq	r0, {sl, pc}
 8005fd0:	08008320 	stmdaeq	r0, {r5, r8, r9, pc}
 8005fd4:	080084b0 	stmdaeq	r0, {r4, r5, r7, sl, pc}
 8005fd8:	08008640 	stmdaeq	r0, {r6, r9, sl, pc}
 8005fdc:	080087d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, pc}

08005fe0 <imageCheckFromAddress>:
}

int imageCheckFromAddress(ImageObjectHandle *newHandle, vu32 flashAddress, bool shouldEraseFlashOnFail)
{
 8005fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe4:	b0f8      	sub	sp, #480	; 0x1e0
 8005fe6:	9103      	str	r1, [sp, #12]
 8005fe8:	4607      	mov	r7, r0
	ImageRootHeader		*hdr;
	ImageInternalState		state;
	int bufferSize = 0x28+0x40;
	unsigned char imageBuffer[bufferSize];
    memset(imageBuffer, 0xFF, sizeof(imageBuffer));
 8005fea:	21ff      	movs	r1, #255	; 0xff
	flashErasePage((u32)(0x08008000+(u32)(0x190*4)));
	flashErasePage((u32)(0x08008000+(u32)(0x190*5)));
}

int imageCheckFromAddress(ImageObjectHandle *newHandle, vu32 flashAddress, bool shouldEraseFlashOnFail)
{
 8005fec:	4690      	mov	r8, r2
	ImageRootHeader		*hdr;
	ImageInternalState		state;
	int bufferSize = 0x28+0x40;
	unsigned char imageBuffer[bufferSize];
    memset(imageBuffer, 0xFF, sizeof(imageBuffer));
 8005fee:	a85e      	add	r0, sp, #376	; 0x178
 8005ff0:	2268      	movs	r2, #104	; 0x68
 8005ff2:	f000 fe66 	bl	8006cc2 <memset>
    memcpy(imageBuffer, (vu32 *)flashAddress, bufferSize);
    memset(&state, 0, sizeof(state));
 8005ff6:	ae07      	add	r6, sp, #28
	ImageRootHeader		*hdr;
	ImageInternalState		state;
	int bufferSize = 0x28+0x40;
	unsigned char imageBuffer[bufferSize];
    memset(imageBuffer, 0xFF, sizeof(imageBuffer));
    memcpy(imageBuffer, (vu32 *)flashAddress, bufferSize);
 8005ff8:	9903      	ldr	r1, [sp, #12]
 8005ffa:	2268      	movs	r2, #104	; 0x68
 8005ffc:	a85e      	add	r0, sp, #376	; 0x178
 8005ffe:	f000 fe57 	bl	8006cb0 <memcpy>
    memset(&state, 0, sizeof(state));
 8006002:	2100      	movs	r1, #0
 8006004:	2214      	movs	r2, #20
 8006006:	4630      	mov	r0, r6
 8006008:	f000 fe5b 	bl	8006cc2 <memset>
		{
			failErase();
		}
		return(EINVAL);		/* buffer too small to really contain header */
	}
	if ((hdr->header.magic) != kImageHeaderMagic) {
 800600c:	995e      	ldr	r1, [sp, #376]	; 0x178
 800600e:	4a55      	ldr	r2, [pc, #340]	; (8006164 <imageCheckFromAddress+0x184>)
 8006010:	4291      	cmp	r1, r2
 8006012:	d001      	beq.n	8006018 <imageCheckFromAddress+0x38>
		debug_print("bad magic 0x%08x expecting 0x%08x\n", (hdr->header.magic), kImageHeaderMagic);
 8006014:	4854      	ldr	r0, [pc, #336]	; (8006168 <imageCheckFromAddress+0x188>)
 8006016:	e004      	b.n	8006022 <imageCheckFromAddress+0x42>
			failErase();
		}
		*newHandle = &state;
		return(kImageImageMissingMagic);		/* magic must match */
	}
	if ((hdr->signing.imageType) != 0x45444f53)
 8006018:	9962      	ldr	r1, [sp, #392]	; 0x188
 800601a:	4a54      	ldr	r2, [pc, #336]	; (800616c <imageCheckFromAddress+0x18c>)
 800601c:	4291      	cmp	r1, r2
 800601e:	d00c      	beq.n	800603a <imageCheckFromAddress+0x5a>
	{
		debug_print("bad magic 0x%08x expecting 0x%X\n", (hdr->signing.imageType), 0x45444f53);
 8006020:	4853      	ldr	r0, [pc, #332]	; (8006170 <imageCheckFromAddress+0x190>)
 8006022:	f7fb f94b 	bl	80012bc <uart_printf>
		state.flags = kImageImageMissingMagic;
 8006026:	2304      	movs	r3, #4
 8006028:	6073      	str	r3, [r6, #4]
		if (shouldEraseFlashOnFail)
 800602a:	f1b8 0f00 	cmp.w	r8, #0
 800602e:	d001      	beq.n	8006034 <imageCheckFromAddress+0x54>
		{
			failErase();
 8006030:	f7ff ffb4 	bl	8005f9c <failErase>
		}
		*newHandle = &state;
 8006034:	603e      	str	r6, [r7, #0]
		return(kImageImageMissingMagic);		/* magic must match */
 8006036:	2004      	movs	r0, #4
 8006038:	e090      	b.n	800615c <imageCheckFromAddress+0x17c>
	}
	state.flags = kImageImageWasInstantiated;
 800603a:	2301      	movs	r3, #1
 800603c:	6073      	str	r3, [r6, #4]

	debug_print("dataSize: 0x%X\n", (hdr->header.dataSize));
 800603e:	484d      	ldr	r0, [pc, #308]	; (8006174 <imageCheckFromAddress+0x194>)
 8006040:	9960      	ldr	r1, [sp, #384]	; 0x180
 8006042:	f7fb f93b 	bl	80012bc <uart_printf>

	state.cursor = hdr->header.dataSize;
 8006046:	9b60      	ldr	r3, [sp, #384]	; 0x180
	state.lastTag = -1;

	unsigned char sha256sum[32];

    memset(sha256sum, 0xFF, sizeof(sha256sum));
 8006048:	2220      	movs	r2, #32
 800604a:	21ff      	movs	r1, #255	; 0xff
	}
	state.flags = kImageImageWasInstantiated;

	debug_print("dataSize: 0x%X\n", (hdr->header.dataSize));

	state.cursor = hdr->header.dataSize;
 800604c:	60f3      	str	r3, [r6, #12]
	state.lastTag = -1;

	unsigned char sha256sum[32];

    memset(sha256sum, 0xFF, sizeof(sha256sum));
 800604e:	a812      	add	r0, sp, #72	; 0x48
	state.flags = kImageImageWasInstantiated;

	debug_print("dataSize: 0x%X\n", (hdr->header.dataSize));

	state.cursor = hdr->header.dataSize;
	state.lastTag = -1;
 8006050:	f04f 33ff 	mov.w	r3, #4294967295
 8006054:	6133      	str	r3, [r6, #16]

	unsigned char sha256sum[32];

    memset(sha256sum, 0xFF, sizeof(sha256sum));
 8006056:	f000 fe34 	bl	8006cc2 <memset>

    sha256_context ctx;
    sha256_starts(&ctx);
 800605a:	a82a      	add	r0, sp, #168	; 0xa8
 800605c:	f7fd f9f8 	bl	8003450 <sha256_starts>

    int buffSize = 0x1;
    char buff[buffSize];

    int i = 0x84;
    hexdump((flashAddress+i), 0x10);
 8006060:	9803      	ldr	r0, [sp, #12]
 8006062:	2110      	movs	r1, #16
 8006064:	3084      	adds	r0, #132	; 0x84
 8006066:	f7fb f937 	bl	80012d8 <hexdump>

    int finish = hdr->header.dataSize + 0x84;
 800606a:	9d60      	ldr	r5, [sp, #384]	; 0x180
    debug_print("Start: %X\nFinish: %X\n", (flashAddress+i), (flashAddress+ finish));
 800606c:	9903      	ldr	r1, [sp, #12]
 800606e:	9a03      	ldr	r2, [sp, #12]
    char buff[buffSize];

    int i = 0x84;
    hexdump((flashAddress+i), 0x10);

    int finish = hdr->header.dataSize + 0x84;
 8006070:	3584      	adds	r5, #132	; 0x84
    debug_print("Start: %X\nFinish: %X\n", (flashAddress+i), (flashAddress+ finish));
 8006072:	4841      	ldr	r0, [pc, #260]	; (8006178 <imageCheckFromAddress+0x198>)
 8006074:	3184      	adds	r1, #132	; 0x84
 8006076:	442a      	add	r2, r5
 8006078:	f7fb f920 	bl	80012bc <uart_printf>
    sha256_starts(&ctx);

    int buffSize = 0x1;
    char buff[buffSize];

    int i = 0x84;
 800607c:	2484      	movs	r4, #132	; 0x84
    hexdump((flashAddress+i), 0x10);

    int finish = hdr->header.dataSize + 0x84;
    debug_print("Start: %X\nFinish: %X\n", (flashAddress+i), (flashAddress+ finish));
    while (i < finish)
 800607e:	42ac      	cmp	r4, r5
 8006080:	da08      	bge.n	8006094 <imageCheckFromAddress+0xb4>
    {
    	memset(buff, 0xFF, buffSize);
    	memcpy(buff, (unsigned char *)(flashAddress+i), buffSize);
 8006082:	9b03      	ldr	r3, [sp, #12]
		sha256_update(&ctx, (vu32 *)(flashAddress+i), buffSize);
 8006084:	9903      	ldr	r1, [sp, #12]
 8006086:	a82a      	add	r0, sp, #168	; 0xa8
 8006088:	4421      	add	r1, r4
 800608a:	2201      	movs	r2, #1
 800608c:	f7ff f9be 	bl	800540c <sha256_update>
		i += 0x1;
 8006090:	3401      	adds	r4, #1
 8006092:	e7f4      	b.n	800607e <imageCheckFromAddress+0x9e>
    }
    debug_print("Ended at: %X\n", (flashAddress+i));
 8006094:	9903      	ldr	r1, [sp, #12]
 8006096:	4839      	ldr	r0, [pc, #228]	; (800617c <imageCheckFromAddress+0x19c>)
 8006098:	4421      	add	r1, r4
 800609a:	f7fb f90f 	bl	80012bc <uart_printf>
    hexdump((vu32 *)(flashAddress+i), 0x10);
 800609e:	9803      	ldr	r0, [sp, #12]
 80060a0:	2110      	movs	r1, #16
 80060a2:	4420      	add	r0, r4
 80060a4:	f7fb f918 	bl	80012d8 <hexdump>
    if ((flashAddress+i) != (flashAddress+finish))
 80060a8:	9a03      	ldr	r2, [sp, #12]
 80060aa:	9b03      	ldr	r3, [sp, #12]
 80060ac:	4414      	add	r4, r2
 80060ae:	441d      	add	r5, r3
 80060b0:	42ac      	cmp	r4, r5
 80060b2:	d005      	beq.n	80060c0 <imageCheckFromAddress+0xe0>
    {
    	debug_print("Calculated hash is probably wrong...\n");
 80060b4:	4832      	ldr	r0, [pc, #200]	; (8006180 <imageCheckFromAddress+0x1a0>)
 80060b6:	f7fb f901 	bl	80012bc <uart_printf>
    	state.flags = kImageImageHashCalcFailed;
    	*newHandle = &state;
 80060ba:	603e      	str	r6, [r7, #0]
		return(kImageImageHashCalcFailed);
 80060bc:	2005      	movs	r0, #5
 80060be:	e04d      	b.n	800615c <imageCheckFromAddress+0x17c>
		char publickey[EDSIGN_PUBLIC_KEY_SIZE];
		char base64_pub[256];
		char base64_signature[256];

		// read our unique id
		uid_read(&id);
 80060c0:	a804      	add	r0, sp, #16
 80060c2:	f7fb fa1b 	bl	80014fc <uid_read>
		sprintf(uniqueID,"%X%X%X%X", id.off0, id.off2, id.off4, id.off8);
 80060c6:	9905      	ldr	r1, [sp, #20]
 80060c8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80060cc:	9100      	str	r1, [sp, #0]
 80060ce:	9906      	ldr	r1, [sp, #24]
 80060d0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80060d4:	9101      	str	r1, [sp, #4]
 80060d6:	a80c      	add	r0, sp, #48	; 0x30
 80060d8:	492a      	ldr	r1, [pc, #168]	; (8006184 <imageCheckFromAddress+0x1a4>)
 80060da:	f000 fdfb 	bl	8006cd4 <siprintf>
		// start sha256 context
		sha256_context uniqueIDHash;
		sha256_starts(&uniqueIDHash);
 80060de:	a844      	add	r0, sp, #272	; 0x110
 80060e0:	f7fd f9b6 	bl	8003450 <sha256_starts>
		// hash in our unique id
		sha256_update(&uniqueIDHash, uniqueID, 0x17);
 80060e4:	2217      	movs	r2, #23
 80060e6:	a844      	add	r0, sp, #272	; 0x110
 80060e8:	a90c      	add	r1, sp, #48	; 0x30
 80060ea:	f7ff f98f 	bl	800540c <sha256_update>
		sha256_finish(&uniqueIDHash, sha256sum);
 80060ee:	a844      	add	r0, sp, #272	; 0x110
 80060f0:	a91a      	add	r1, sp, #104	; 0x68
 80060f2:	f7ff f9d3 	bl	800549c <sha256_finish>
		// get our public key
		edsign_sec_to_pub((uint8_t*)publickey, sha256sum);
 80060f6:	a822      	add	r0, sp, #136	; 0x88
 80060f8:	a91a      	add	r1, sp, #104	; 0x68
 80060fa:	f7fb ff87 	bl	800200c <edsign_sec_to_pub>
		hexdump(publickey, 32);
 80060fe:	a822      	add	r0, sp, #136	; 0x88
 8006100:	2120      	movs	r1, #32
 8006102:	f7fb f8e9 	bl	80012d8 <hexdump>
    	/*
    	struct u_id id;
	    uid_read(&id);
	    sprintf(uniqueID,"%X%X%X%X", id.off0, id.off2, id.off4, id.off8);
	    */
	    sha256_update(&ctx, publickey, 32);
 8006106:	2220      	movs	r2, #32
 8006108:	a82a      	add	r0, sp, #168	; 0xa8
 800610a:	a922      	add	r1, sp, #136	; 0x88
 800610c:	f7ff f97e 	bl	800540c <sha256_update>
    }

    //debug_print("%s\n", uniqueID);
    
    sha256_finish(&ctx, sha256sum);
 8006110:	a912      	add	r1, sp, #72	; 0x48
 8006112:	a82a      	add	r0, sp, #168	; 0xa8
 8006114:	f7ff f9c2 	bl	800549c <sha256_finish>
    print_hash(sha256sum);
    // verify signature against recalc hash
    uint8_t sigbuff[0x40];
    memcpy(sigbuff, (uint8_t*)(hdr->signing.imageSignature), 0x40);
 8006118:	ac44      	add	r4, sp, #272	; 0x110
    }

    //debug_print("%s\n", uniqueID);
    
    sha256_finish(&ctx, sha256sum);
    print_hash(sha256sum);
 800611a:	a812      	add	r0, sp, #72	; 0x48
    // verify signature against recalc hash
    uint8_t sigbuff[0x40];
    memcpy(sigbuff, (uint8_t*)(hdr->signing.imageSignature), 0x40);
 800611c:	ad63      	add	r5, sp, #396	; 0x18c
    }

    //debug_print("%s\n", uniqueID);
    
    sha256_finish(&ctx, sha256sum);
    print_hash(sha256sum);
 800611e:	f7fb f929 	bl	8001374 <print_hash>
    // verify signature against recalc hash
    uint8_t sigbuff[0x40];
    memcpy(sigbuff, (uint8_t*)(hdr->signing.imageSignature), 0x40);
 8006122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800612a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800612c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800612e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006132:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if (edsign_verify(sigbuff, rootCA, sha256sum, 32) <= 0) {
 8006136:	a844      	add	r0, sp, #272	; 0x110
 8006138:	4913      	ldr	r1, [pc, #76]	; (8006188 <imageCheckFromAddress+0x1a8>)
 800613a:	aa12      	add	r2, sp, #72	; 0x48
 800613c:	2320      	movs	r3, #32
 800613e:	f7fb ffd1 	bl	80020e4 <edsign_verify>
 8006142:	b948      	cbnz	r0, 8006158 <imageCheckFromAddress+0x178>
    	state.flags = kImageImageRejectSignature;
 8006144:	2302      	movs	r3, #2
 8006146:	6073      	str	r3, [r6, #4]
    	if (shouldEraseFlashOnFail)
 8006148:	f1b8 0f00 	cmp.w	r8, #0
 800614c:	d001      	beq.n	8006152 <imageCheckFromAddress+0x172>
		{
			failErase();
 800614e:	f7ff ff25 	bl	8005f9c <failErase>
		}
    	*newHandle = &state;
 8006152:	603e      	str	r6, [r7, #0]
    	return kImageImageRejectSignature;
 8006154:	2002      	movs	r0, #2
 8006156:	e001      	b.n	800615c <imageCheckFromAddress+0x17c>
    } else {
    	state.flags = kImageImageIsTrusted;
    	*newHandle = &state;
 8006158:	603e      	str	r6, [r7, #0]
    	return kImageImageIsTrusted;
 800615a:	2003      	movs	r0, #3
    }
	*newHandle = &state;
	return(0);
}
 800615c:	b078      	add	sp, #480	; 0x1e0
 800615e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006162:	bf00      	nop
 8006164:	45626332 	strbmi	r6, [r2, #-818]!	; 0x332
 8006168:	08007b89 	stmdaeq	r0, {r0, r3, r7, r8, r9, fp, ip, sp, lr}
 800616c:	45444f53 	strbmi	r4, [r4, #-3923]	; 0xf53
 8006170:	08007bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, ip, sp, lr}
 8006174:	08007bcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, fp, ip, sp, lr}
 8006178:	08007bdd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, r9, fp, ip, sp, lr}
 800617c:	08007bf3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8, r9, fp, ip, sp, lr}
 8006180:	08007c01 	stmdaeq	r0, {r0, sl, fp, ip, sp, lr}
 8006184:	0800754c 	stmdaeq	r0, {r2, r3, r6, r8, sl, ip, sp, lr}
 8006188:	20000404 	andcs	r0, r0, r4, lsl #8

0800618c <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(u8 bEpNum, u16 wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800618c:	0080      	lsls	r0, r0, #2
 800618e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8006192:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8006196:	6803      	ldr	r3, [r0, #0]
 8006198:	06ca      	lsls	r2, r1, #27
 800619a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800619e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	bf48      	it	mi
 80061a6:	f083 0310 	eormi.w	r3, r3, #16
 80061aa:	068a      	lsls	r2, r1, #26
 80061ac:	bf48      	it	mi
 80061ae:	f083 0320 	eormi.w	r3, r3, #32
 80061b2:	6003      	str	r3, [r0, #0]
 80061b4:	4770      	bx	lr

080061b6 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(u8 bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 80061b6:	0080      	lsls	r0, r0, #2
 80061b8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80061bc:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80061c0:	6803      	ldr	r3, [r0, #0]
 80061c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80061d0:	6003      	str	r3, [r0, #0]
 80061d2:	4770      	bx	lr

080061d4 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(u8 bEpNum)
{
  _ClearEP_KIND(bEpNum);
 80061d4:	0080      	lsls	r0, r0, #2
 80061d6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80061da:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80061de:	6803      	ldr	r3, [r0, #0]
 80061e0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80061e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e8:	041b      	lsls	r3, r3, #16
 80061ea:	0c1b      	lsrs	r3, r3, #16
 80061ec:	6003      	str	r3, [r0, #0]
 80061ee:	4770      	bx	lr

080061f0 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(u8 bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 80061f0:	0080      	lsls	r0, r0, #2
 80061f2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80061f6:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80061fa:	6803      	ldr	r3, [r0, #0]
 80061fc:	045b      	lsls	r3, r3, #17
 80061fe:	d506      	bpl.n	800620e <ClearDTOG_RX+0x1e>
 8006200:	6802      	ldr	r2, [r0, #0]
 8006202:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8006206:	4013      	ands	r3, r2
 8006208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800620c:	6003      	str	r3, [r0, #0]
 800620e:	4770      	bx	lr

08006210 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(u8 bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8006210:	0080      	lsls	r0, r0, #2
 8006212:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8006216:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800621a:	6803      	ldr	r3, [r0, #0]
 800621c:	065b      	lsls	r3, r3, #25
 800621e:	d506      	bpl.n	800622e <ClearDTOG_TX+0x1e>
 8006220:	6802      	ldr	r2, [r0, #0]
 8006222:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8006226:	4013      	ands	r3, r2
 8006228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800622c:	6003      	str	r3, [r0, #0]
 800622e:	4770      	bx	lr

08006230 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPTxAddr(u8 bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8006230:	4b05      	ldr	r3, [pc, #20]	; (8006248 <GetEPTxAddr+0x18>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	b29b      	uxth	r3, r3
 8006236:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800623a:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800623e:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8006242:	0040      	lsls	r0, r0, #1
}
 8006244:	8800      	ldrh	r0, [r0, #0]
 8006246:	4770      	bx	lr
 8006248:	40005c50 	andmi	r5, r0, r0, asr ip

0800624c <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPRxAddr(u8 bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 800624c:	4b04      	ldr	r3, [pc, #16]	; (8006260 <GetEPRxAddr+0x14>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8006256:	4b03      	ldr	r3, [pc, #12]	; (8006264 <GetEPRxAddr+0x18>)
 8006258:	4403      	add	r3, r0
 800625a:	005b      	lsls	r3, r3, #1
}
 800625c:	8818      	ldrh	r0, [r3, #0]
 800625e:	4770      	bx	lr
 8006260:	40005c50 	andmi	r5, r0, r0, asr ip
 8006264:	20003004 	andcs	r3, r0, r4

08006268 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(u8 bEpNum, u16 wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8006268:	4b04      	ldr	r3, [pc, #16]	; (800627c <SetEPTxCount+0x14>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	b29b      	uxth	r3, r3
 800626e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8006272:	4b03      	ldr	r3, [pc, #12]	; (8006280 <SetEPTxCount+0x18>)
 8006274:	4403      	add	r3, r0
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	6019      	str	r1, [r3, #0]
 800627a:	4770      	bx	lr
 800627c:	40005c50 	andmi	r5, r0, r0, asr ip
 8006280:	20003002 	andcs	r3, r0, r2

08006284 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(u8 bEpNum, u16 wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8006284:	4b0d      	ldr	r3, [pc, #52]	; (80062bc <SetEPRxCount+0x38>)
 8006286:	293e      	cmp	r1, #62	; 0x3e
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	b29b      	uxth	r3, r3
 800628c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8006290:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <SetEPRxCount+0x3c>)
 8006292:	4403      	add	r3, r0
 8006294:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8006298:	d909      	bls.n	80062ae <SetEPRxCount+0x2a>
 800629a:	094b      	lsrs	r3, r1, #5
 800629c:	06c8      	lsls	r0, r1, #27
 800629e:	bf04      	itt	eq
 80062a0:	f103 33ff 	addeq.w	r3, r3, #4294967295
 80062a4:	b29b      	uxtheq	r3, r3
 80062a6:	029b      	lsls	r3, r3, #10
 80062a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ac:	e004      	b.n	80062b8 <SetEPRxCount+0x34>
 80062ae:	084b      	lsrs	r3, r1, #1
 80062b0:	07c9      	lsls	r1, r1, #31
 80062b2:	bf48      	it	mi
 80062b4:	3301      	addmi	r3, #1
 80062b6:	029b      	lsls	r3, r3, #10
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	4770      	bx	lr
 80062bc:	40005c50 	andmi	r5, r0, r0, asr ip
 80062c0:	20003006 	andcs	r3, r0, r6

080062c4 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 80062c4:	b570      	push	{r4, r5, r6, lr}
  u32 wEPVal = 0;
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80062c6:	4a4c      	ldr	r2, [pc, #304]	; (80063f8 <CTR_LP+0x134>)
 80062c8:	4b4c      	ldr	r3, [pc, #304]	; (80063fc <CTR_LP+0x138>)
 80062ca:	6811      	ldr	r1, [r2, #0]
 80062cc:	b288      	uxth	r0, r1
 80062ce:	040c      	lsls	r4, r1, #16
 80062d0:	8018      	strh	r0, [r3, #0]
 80062d2:	f140 8090 	bpl.w	80063f6 <CTR_LP+0x132>
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
 80062d6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80062da:	6011      	str	r1, [r2, #0]
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
 80062dc:	881a      	ldrh	r2, [r3, #0]
 80062de:	4c48      	ldr	r4, [pc, #288]	; (8006400 <CTR_LP+0x13c>)
 80062e0:	f002 020f 	and.w	r2, r2, #15
 80062e4:	7022      	strb	r2, [r4, #0]
    if (EPindex == 0)
 80062e6:	2a00      	cmp	r2, #0
 80062e8:	d15f      	bne.n	80063aa <CTR_LP+0xe6>
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 80062ea:	4c46      	ldr	r4, [pc, #280]	; (8006404 <CTR_LP+0x140>)
 80062ec:	4d46      	ldr	r5, [pc, #280]	; (8006408 <CTR_LP+0x144>)
 80062ee:	6822      	ldr	r2, [r4, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 80062f0:	4e46      	ldr	r6, [pc, #280]	; (800640c <CTR_LP+0x148>)
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 80062f2:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80062f6:	802a      	strh	r2, [r5, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 80062f8:	6822      	ldr	r2, [r4, #0]
 80062fa:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80062fe:	8032      	strh	r2, [r6, #0]
      _SetEPRxStatus(ENDP0, EP_RX_NAK);
 8006300:	6822      	ldr	r2, [r4, #0]
 8006302:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006306:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800630a:	b292      	uxth	r2, r2
 800630c:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8006310:	6022      	str	r2, [r4, #0]
      _SetEPTxStatus(ENDP0, EP_TX_NAK);
 8006312:	6822      	ldr	r2, [r4, #0]
 8006314:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800631c:	b292      	uxth	r2, r2
 800631e:	f082 0220 	eor.w	r2, r2, #32
 8006322:	6022      	str	r2, [r4, #0]


      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	06d8      	lsls	r0, r3, #27
 8006328:	d502      	bpl.n	8006330 <CTR_LP+0x6c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 800632a:	6823      	ldr	r3, [r4, #0]
        if ((wEPVal & EP_CTR_TX) != 0)
 800632c:	0619      	lsls	r1, r3, #24
 800632e:	d507      	bpl.n	8006340 <CTR_LP+0x7c>
        {
          _ClearEP_CTR_TX(ENDP0);
 8006330:	6822      	ldr	r2, [r4, #0]
 8006332:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8006336:	4013      	ands	r3, r2
 8006338:	6023      	str	r3, [r4, #0]
          In0_Process();
 800633a:	f000 fc61 	bl	8006c00 <In0_Process>
 800633e:	e012      	b.n	8006366 <CTR_LP+0xa2>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }
        else if ((wEPVal &EP_SETUP) != 0)
 8006340:	051a      	lsls	r2, r3, #20
 8006342:	d507      	bpl.n	8006354 <CTR_LP+0x90>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8006344:	6822      	ldr	r2, [r4, #0]
 8006346:	f640 738f 	movw	r3, #3983	; 0xf8f
 800634a:	4013      	ands	r3, r2
 800634c:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 800634e:	f000 fa69 	bl	8006824 <Setup0_Process>
 8006352:	e008      	b.n	8006366 <CTR_LP+0xa2>
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8006354:	0418      	lsls	r0, r3, #16
 8006356:	d5b6      	bpl.n	80062c6 <CTR_LP+0x2>
        {
          _ClearEP_CTR_RX(ENDP0);
 8006358:	6822      	ldr	r2, [r4, #0]
 800635a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800635e:	4013      	ands	r3, r2
 8006360:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8006362:	f000 fbcd 	bl	8006b00 <Out0_Process>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	882a      	ldrh	r2, [r5, #0]
 800636a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800636e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006372:	b29b      	uxth	r3, r3
 8006374:	04d1      	lsls	r1, r2, #19
 8006376:	bf48      	it	mi
 8006378:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 800637c:	0495      	lsls	r5, r2, #18
 800637e:	4a21      	ldr	r2, [pc, #132]	; (8006404 <CTR_LP+0x140>)
 8006380:	bf48      	it	mi
 8006382:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 8006386:	6013      	str	r3, [r2, #0]
          _SetEPTxStatus(ENDP0, SaveTState);
 8006388:	6813      	ldr	r3, [r2, #0]
 800638a:	8831      	ldrh	r1, [r6, #0]
 800638c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006394:	b29b      	uxth	r3, r3
 8006396:	06cc      	lsls	r4, r1, #27
 8006398:	bf48      	it	mi
 800639a:	f083 0310 	eormi.w	r3, r3, #16
 800639e:	0688      	lsls	r0, r1, #26
 80063a0:	bf48      	it	mi
 80063a2:	f083 0320 	eormi.w	r3, r3, #32
 80063a6:	6013      	str	r3, [r2, #0]
          return;
 80063a8:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 80063aa:	0093      	lsls	r3, r2, #2
 80063ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063b0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80063b4:	681d      	ldr	r5, [r3, #0]
      if ((wEPVal & EP_CTR_RX) != 0)
 80063b6:	0429      	lsls	r1, r5, #16
 80063b8:	d509      	bpl.n	80063ce <CTR_LP+0x10a>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	f640 718f 	movw	r1, #3983	; 0xf8f
 80063c0:	4001      	ands	r1, r0
 80063c2:	6019      	str	r1, [r3, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 80063c4:	4b12      	ldr	r3, [pc, #72]	; (8006410 <CTR_LP+0x14c>)
 80063c6:	3a01      	subs	r2, #1
 80063c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063cc:	4798      	blx	r3

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 80063ce:	062b      	lsls	r3, r5, #24
 80063d0:	f57f af79 	bpl.w	80062c6 <CTR_LP+0x2>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 80063d4:	7821      	ldrb	r1, [r4, #0]
 80063d6:	f648 720f 	movw	r2, #36623	; 0x8f0f
 80063da:	008b      	lsls	r3, r1, #2
 80063dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063e0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80063e4:	6818      	ldr	r0, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 80063e6:	3901      	subs	r1, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 80063e8:	4002      	ands	r2, r0
 80063ea:	601a      	str	r2, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 80063ec:	4b09      	ldr	r3, [pc, #36]	; (8006414 <CTR_LP+0x150>)
 80063ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80063f2:	4798      	blx	r3
 80063f4:	e767      	b.n	80062c6 <CTR_LP+0x2>
 80063f6:	bd70      	pop	{r4, r5, r6, pc}
 80063f8:	40005c44 	andmi	r5, r0, r4, asr #24
 80063fc:	2000048c 	andcs	r0, r0, ip, lsl #9
 8006400:	20000584 	andcs	r0, r0, r4, lsl #11
 8006404:	40005c00 	andmi	r5, r0, r0, lsl #24
 8006408:	20000576 	andcs	r0, r0, r6, ror r5
 800640c:	20000578 	andcs	r0, r0, r8, ror r5
 8006410:	20000064 	andcs	r0, r0, r4, rrx
 8006414:	20000048 	andcs	r0, r0, r8, asr #32

08006418 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8006418:	b508      	push	{r3, lr}
  pInformation = &Device_Info;
 800641a:	4a07      	ldr	r2, [pc, #28]	; (8006438 <USB_Init+0x20>)
 800641c:	4b07      	ldr	r3, [pc, #28]	; (800643c <USB_Init+0x24>)
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 800641e:	4908      	ldr	r1, [pc, #32]	; (8006440 <USB_Init+0x28>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 8006420:	6013      	str	r3, [r2, #0]
  pInformation->ControlState = 2;
 8006422:	2202      	movs	r2, #2
 8006424:	721a      	strb	r2, [r3, #8]
  pProperty = &Device_Property;
 8006426:	4b07      	ldr	r3, [pc, #28]	; (8006444 <USB_Init+0x2c>)
 8006428:	4a07      	ldr	r2, [pc, #28]	; (8006448 <USB_Init+0x30>)
 800642a:	6013      	str	r3, [r2, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 800642c:	4a07      	ldr	r2, [pc, #28]	; (800644c <USB_Init+0x34>)
  /* Initialize devices one by one */

  pProperty->Init();
 800642e:	681b      	ldr	r3, [r3, #0]
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8006430:	6011      	str	r1, [r2, #0]
  /* Initialize devices one by one */

  pProperty->Init();
 8006432:	4798      	blx	r3
 8006434:	bd08      	pop	{r3, pc}
 8006436:	bf00      	nop
 8006438:	200005a8 	andcs	r0, r0, r8, lsr #11
 800643c:	20000588 	andcs	r0, r0, r8, lsl #11
 8006440:	20000080 	andcs	r0, r0, r0, lsl #1
 8006444:	20000014 	andcs	r0, r0, r4, lsl r0
 8006448:	20000580 	andcs	r0, r0, r0, lsl #11
 800644c:	200005a4 	andcs	r0, r0, r4, lsr #11

08006450 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetConfiguration(u16 Length)
{
 8006450:	b510      	push	{r4, lr}
 8006452:	4c06      	ldr	r4, [pc, #24]	; (800646c <Standard_GetConfiguration+0x1c>)
  if (Length == 0)
 8006454:	b918      	cbnz	r0, 800645e <Standard_GetConfiguration+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	2201      	movs	r2, #1
 800645a:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 800645c:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetConfiguration();
 800645e:	4b04      	ldr	r3, [pc, #16]	; (8006470 <Standard_GetConfiguration+0x20>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4798      	blx	r3
  return (u8 *)&pInformation->Current_Configuration;
 8006466:	6820      	ldr	r0, [r4, #0]
 8006468:	300a      	adds	r0, #10
}
 800646a:	bd10      	pop	{r4, pc}
 800646c:	200005a8 	andcs	r0, r0, r8, lsr #11
 8006470:	200005a4 	andcs	r0, r0, r4, lsr #11

08006474 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetInterface(u16 Length)
{
 8006474:	b510      	push	{r4, lr}
 8006476:	4c06      	ldr	r4, [pc, #24]	; (8006490 <Standard_GetInterface+0x1c>)
  if (Length == 0)
 8006478:	b918      	cbnz	r0, 8006482 <Standard_GetInterface+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	2201      	movs	r2, #1
 800647e:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8006480:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetInterface();
 8006482:	4b04      	ldr	r3, [pc, #16]	; (8006494 <Standard_GetInterface+0x20>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	4798      	blx	r3
  return (u8 *)&pInformation->Current_AlternateSetting;
 800648a:	6820      	ldr	r0, [r4, #0]
 800648c:	300c      	adds	r0, #12
}
 800648e:	bd10      	pop	{r4, pc}
 8006490:	200005a8 	andcs	r0, r0, r8, lsr #11
 8006494:	200005a4 	andcs	r0, r0, r4, lsr #11

08006498 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
u8 *Standard_GetStatus(u16 Length)
{
 8006498:	b510      	push	{r4, lr}
 800649a:	4b20      	ldr	r3, [pc, #128]	; (800651c <Standard_GetStatus+0x84>)
  if (Length == 0)
 800649c:	b918      	cbnz	r0, 80064a6 <Standard_GetStatus+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2202      	movs	r2, #2
 80064a2:	821a      	strh	r2, [r3, #16]
    return 0;
 80064a4:	bd10      	pop	{r4, pc}
  }

  StatusInfo.w = 0;
 80064a6:	4a1e      	ldr	r2, [pc, #120]	; (8006520 <Standard_GetStatus+0x88>)
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80064a8:	6819      	ldr	r1, [r3, #0]
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  StatusInfo.w = 0;
 80064aa:	2000      	movs	r0, #0
 80064ac:	8010      	strh	r0, [r2, #0]
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80064ae:	780c      	ldrb	r4, [r1, #0]
 80064b0:	4613      	mov	r3, r2
 80064b2:	f014 047f 	ands.w	r4, r4, #127	; 0x7f
 80064b6:	d10d      	bne.n	80064d4 <Standard_GetStatus+0x3c>
  {
    /*Get Device Status */
    u8 Feature = pInformation->Current_Feature;
 80064b8:	7a4a      	ldrb	r2, [r1, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 80064ba:	0691      	lsls	r1, r2, #26
    {
      SetBit(StatusInfo0, 1);
 80064bc:	bf44      	itt	mi
 80064be:	2102      	movmi	r1, #2
 80064c0:	7019      	strbmi	r1, [r3, #0]
    }

    /* Bus-powered */
    if (ValBit(Feature, 6))
 80064c2:	f012 0f40 	tst.w	r2, #64	; 0x40
    {
      ClrBit(StatusInfo0, 0);
 80064c6:	781a      	ldrb	r2, [r3, #0]
 80064c8:	bf14      	ite	ne
 80064ca:	f022 0201 	bicne.w	r2, r2, #1
    }
    else /* Self-powered */
    {
      SetBit(StatusInfo0, 0);
 80064ce:	f042 0201 	orreq.w	r2, r2, #1
 80064d2:	e014      	b.n	80064fe <Standard_GetStatus+0x66>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80064d4:	2c01      	cmp	r4, #1
 80064d6:	d01f      	beq.n	8006518 <Standard_GetStatus+0x80>
  {
    return (u8 *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80064d8:	2c02      	cmp	r4, #2
 80064da:	d11e      	bne.n	800651a <Standard_GetStatus+0x82>
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;
 80064dc:	7909      	ldrb	r1, [r1, #4]

    Related_Endpoint = (wIndex0 & 0x0f);
 80064de:	f001 020f 	and.w	r2, r1, #15
 80064e2:	0092      	lsls	r2, r2, #2
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80064e4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80064e8:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80064ec:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80064f0:	6812      	ldr	r2, [r2, #0]
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80064f2:	d006      	beq.n	8006502 <Standard_GetStatus+0x6a>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80064f4:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80064f8:	2a10      	cmp	r2, #16
 80064fa:	d107      	bne.n	800650c <Standard_GetStatus+0x74>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 80064fc:	2201      	movs	r2, #1
 80064fe:	701a      	strb	r2, [r3, #0]
 8006500:	e004      	b.n	800650c <Standard_GetStatus+0x74>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8006502:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8006506:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800650a:	e7f6      	b.n	80064fa <Standard_GetStatus+0x62>
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 800650c:	4b05      	ldr	r3, [pc, #20]	; (8006524 <Standard_GetStatus+0x8c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	4798      	blx	r3
  return (u8 *)&StatusInfo;
 8006514:	4802      	ldr	r0, [pc, #8]	; (8006520 <Standard_GetStatus+0x88>)
 8006516:	bd10      	pop	{r4, pc}
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    return (u8 *)&StatusInfo;
 8006518:	4610      	mov	r0, r2
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
  return (u8 *)&StatusInfo;
}
 800651a:	bd10      	pop	{r4, pc}
 800651c:	200005a8 	andcs	r0, r0, r8, lsr #11
 8006520:	200005ae 	andcs	r0, r0, lr, lsr #11
 8006524:	200005a4 	andcs	r0, r0, r4, lsr #11

08006528 <DataStageIn>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8006528:	4a23      	ldr	r2, [pc, #140]	; (80065b8 <DataStageIn+0x90>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 800652a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 800652e:	6814      	ldr	r4, [r2, #0]
 8006530:	4690      	mov	r8, r2
  u32 save_wLength = pEPinfo->Usb_wLength;
 8006532:	8a23      	ldrh	r3, [r4, #16]
  u32 ControlState = pInformation->ControlState;
 8006534:	7a26      	ldrb	r6, [r4, #8]
 8006536:	4f21      	ldr	r7, [pc, #132]	; (80065bc <DataStageIn+0x94>)

  u8 *DataBuffer;
  u32 Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8006538:	b9a3      	cbnz	r3, 8006564 <DataStageIn+0x3c>
 800653a:	2e04      	cmp	r6, #4
 800653c:	d112      	bne.n	8006564 <DataStageIn+0x3c>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 800653e:	4920      	ldr	r1, [pc, #128]	; (80065c0 <DataStageIn+0x98>)
 8006540:	780a      	ldrb	r2, [r1, #0]
 8006542:	2a01      	cmp	r2, #1
 8006544:	d10a      	bne.n	800655c <DataStageIn+0x34>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8006546:	4a1f      	ldr	r2, [pc, #124]	; (80065c4 <DataStageIn+0x9c>)
 8006548:	6810      	ldr	r0, [r2, #0]
 800654a:	4a1f      	ldr	r2, [pc, #124]	; (80065c8 <DataStageIn+0xa0>)
 800654c:	b280      	uxth	r0, r0
 800654e:	4402      	add	r2, r0
 8006550:	0052      	lsls	r2, r2, #1
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	2230      	movs	r2, #48	; 0x30
 8006556:	803a      	strh	r2, [r7, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8006558:	700b      	strb	r3, [r1, #0]
 800655a:	e027      	b.n	80065ac <DataStageIn+0x84>
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 800655c:	2310      	movs	r3, #16
 800655e:	803b      	strh	r3, [r7, #0]
      Data_Mul_MaxPacketSize = FALSE;
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 8006560:	2607      	movs	r6, #7
 8006562:	e023      	b.n	80065ac <DataStageIn+0x84>
    }

    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8006564:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8006566:	42ab      	cmp	r3, r5
 8006568:	bf8c      	ite	hi
 800656a:	2602      	movhi	r6, #2
 800656c:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800656e:	429d      	cmp	r5, r3
 8006570:	bf28      	it	cs
 8006572:	461d      	movcs	r5, r3
 8006574:	4628      	mov	r0, r5
 8006576:	69a3      	ldr	r3, [r4, #24]
 8006578:	4798      	blx	r3
 800657a:	4681      	mov	r9, r0

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 800657c:	2000      	movs	r0, #0
 800657e:	f7ff fe57 	bl	8006230 <GetEPTxAddr>
 8006582:	462a      	mov	r2, r5
 8006584:	4601      	mov	r1, r0
 8006586:	4648      	mov	r0, r9
 8006588:	f000 fb68 	bl	8006c5c <UserToPMABufferCopy>

  SetEPTxCount(ENDP0, Length);
 800658c:	4629      	mov	r1, r5
 800658e:	2000      	movs	r0, #0
 8006590:	f7ff fe6a 	bl	8006268 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 8006594:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8006596:	f44f 5240 	mov.w	r2, #12288	; 0x3000

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 800659a:	1b5b      	subs	r3, r3, r5
 800659c:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 800659e:	8a63      	ldrh	r3, [r4, #18]
 80065a0:	441d      	add	r5, r3
  vSetEPTxStatus(EP_TX_VALID);
 80065a2:	2330      	movs	r3, #48	; 0x30
 80065a4:	803b      	strh	r3, [r7, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80065a6:	4b09      	ldr	r3, [pc, #36]	; (80065cc <DataStageIn+0xa4>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 80065a8:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80065aa:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 80065ac:	f8d8 3000 	ldr.w	r3, [r8]
 80065b0:	721e      	strb	r6, [r3, #8]
 80065b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065b6:	bf00      	nop
 80065b8:	200005a8 	andcs	r0, r0, r8, lsr #11
 80065bc:	20000578 	andcs	r0, r0, r8, ror r5
 80065c0:	20000dcc 	andcs	r0, r0, ip, asr #27
 80065c4:	40005c50 	andmi	r5, r0, r0, asr ip
 80065c8:	20003002 	andcs	r3, r0, r2
 80065cc:	20000576 	andcs	r0, r0, r6, ror r5

080065d0 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 80065d0:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 80065d2:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <Standard_SetConfiguration+0x2c>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 80065d4:	490a      	ldr	r1, [pc, #40]	; (8006600 <Standard_SetConfiguration+0x30>)
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	7849      	ldrb	r1, [r1, #1]
 80065da:	789a      	ldrb	r2, [r3, #2]
 80065dc:	4291      	cmp	r1, r2
 80065de:	d30a      	bcc.n	80065f6 <Standard_SetConfiguration+0x26>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 80065e0:	78d9      	ldrb	r1, [r3, #3]
 80065e2:	b941      	cbnz	r1, 80065f6 <Standard_SetConfiguration+0x26>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 80065e4:	889c      	ldrh	r4, [r3, #4]
 80065e6:	b934      	cbnz	r4, 80065f6 <Standard_SetConfiguration+0x26>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 80065e8:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 80065ea:	4b06      	ldr	r3, [pc, #24]	; (8006604 <Standard_SetConfiguration+0x34>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	4798      	blx	r3
    return USB_SUCCESS;
 80065f2:	4620      	mov	r0, r4
 80065f4:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USB_UNSUPPORT;
 80065f6:	2002      	movs	r0, #2
  }
}
 80065f8:	bd10      	pop	{r4, pc}
 80065fa:	bf00      	nop
 80065fc:	200005a8 	andcs	r0, r0, r8, lsr #11
 8006600:	200000a4 	andcs	r0, r0, r4, lsr #1
 8006604:	200005a4 	andcs	r0, r0, r4, lsr #11

08006608 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8006608:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800660a:	4a0e      	ldr	r2, [pc, #56]	; (8006644 <Standard_SetInterface+0x3c>)
 800660c:	4c0e      	ldr	r4, [pc, #56]	; (8006648 <Standard_SetInterface+0x40>)
 800660e:	6812      	ldr	r2, [r2, #0]
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	6992      	ldr	r2, [r2, #24]
 8006614:	7918      	ldrb	r0, [r3, #4]
 8006616:	7899      	ldrb	r1, [r3, #2]
 8006618:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	7a9a      	ldrb	r2, [r3, #10]
 800661e:	b17a      	cbz	r2, 8006640 <Standard_SetInterface+0x38>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8006620:	b970      	cbnz	r0, 8006640 <Standard_SetInterface+0x38>
 8006622:	795a      	ldrb	r2, [r3, #5]
 8006624:	b962      	cbnz	r2, 8006640 <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 8006626:	78dd      	ldrb	r5, [r3, #3]
 8006628:	b955      	cbnz	r5, 8006640 <Standard_SetInterface+0x38>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 800662a:	4b08      	ldr	r3, [pc, #32]	; (800664c <Standard_SetInterface+0x44>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8006632:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 8006634:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8006636:	791a      	ldrb	r2, [r3, #4]
 8006638:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800663a:	789a      	ldrb	r2, [r3, #2]
 800663c:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 800663e:	bd38      	pop	{r3, r4, r5, pc}
    }

  }

  return USB_UNSUPPORT;
 8006640:	2002      	movs	r0, #2
}
 8006642:	bd38      	pop	{r3, r4, r5, pc}
 8006644:	20000580 	andcs	r0, r0, r0, lsl #11
 8006648:	200005a8 	andcs	r0, r0, r8, lsr #11
 800664c:	200005a4 	andcs	r0, r0, r4, lsr #11

08006650 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8006650:	b538      	push	{r3, r4, r5, lr}
  u32     Type_Rec = Type_Recipient;
 8006652:	4b2f      	ldr	r3, [pc, #188]	; (8006710 <Standard_ClearFeature+0xc0>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	7818      	ldrb	r0, [r3, #0]
  u32     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8006658:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 800665c:	d104      	bne.n	8006668 <Standard_ClearFeature+0x18>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 800665e:	7a5a      	ldrb	r2, [r3, #9]
 8006660:	f022 0220 	bic.w	r2, r2, #32
 8006664:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8006666:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8006668:	2802      	cmp	r0, #2
 800666a:	d14e      	bne.n	800670a <Standard_ClearFeature+0xba>
    DEVICE* pDev;
    u32 Related_Endpoint;
    u32 wIndex0;
    u32 rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 800666c:	885a      	ldrh	r2, [r3, #2]
 800666e:	2a00      	cmp	r2, #0
 8006670:	d14c      	bne.n	800670c <Standard_ClearFeature+0xbc>
        || (pInformation->USBwIndex1 != 0))
 8006672:	795a      	ldrb	r2, [r3, #5]
 8006674:	2a00      	cmp	r2, #0
 8006676:	d149      	bne.n	800670c <Standard_ClearFeature+0xbc>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8006678:	791a      	ldrb	r2, [r3, #4]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800667a:	4d26      	ldr	r5, [pc, #152]	; (8006714 <Standard_ClearFeature+0xc4>)
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
 800667c:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 8006680:	0084      	lsls	r4, r0, #2

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8006682:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 8006686:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 800668a:	6809      	ldr	r1, [r1, #0]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800668c:	782d      	ldrb	r5, [r5, #0]
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 800668e:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8006692:	bf14      	ite	ne
 8006694:	f001 0130 	andne.w	r1, r1, #48	; 0x30
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8006698:	f401 5140 	andeq.w	r1, r1, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800669c:	42a8      	cmp	r0, r5
 800669e:	d234      	bcs.n	800670a <Standard_ClearFeature+0xba>
 80066a0:	2900      	cmp	r1, #0
 80066a2:	d032      	beq.n	800670a <Standard_ClearFeature+0xba>
        || (pInformation->Current_Configuration == 0))
 80066a4:	7a9b      	ldrb	r3, [r3, #10]
 80066a6:	b383      	cbz	r3, 800670a <Standard_ClearFeature+0xba>


    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80066a8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80066ac:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 80066b0:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80066b2:	6823      	ldr	r3, [r4, #0]
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 80066b4:	d50c      	bpl.n	80066d0 <Standard_ClearFeature+0x80>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80066b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066ba:	2b10      	cmp	r3, #16
 80066bc:	d11f      	bne.n	80066fe <Standard_ClearFeature+0xae>
      {
        ClearDTOG_TX(Related_Endpoint);
 80066be:	b2c4      	uxtb	r4, r0
 80066c0:	4620      	mov	r0, r4
 80066c2:	f7ff fda5 	bl	8006210 <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 80066c6:	4620      	mov	r0, r4
 80066c8:	2130      	movs	r1, #48	; 0x30
 80066ca:	f7ff fd5f 	bl	800618c <SetEPTxStatus>
 80066ce:	e016      	b.n	80066fe <Standard_ClearFeature+0xae>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80066d0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80066d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d8:	d111      	bne.n	80066fe <Standard_ClearFeature+0xae>
      {
        if (Related_Endpoint == ENDP0)
 80066da:	b928      	cbnz	r0, 80066e8 <Standard_ClearFeature+0x98>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 80066dc:	4b0e      	ldr	r3, [pc, #56]	; (8006718 <Standard_ClearFeature+0xc8>)
 80066de:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80066e2:	f7ff fdcf 	bl	8006284 <SetEPRxCount>
 80066e6:	e001      	b.n	80066ec <Standard_ClearFeature+0x9c>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 80066e8:	f7ff fd82 	bl	80061f0 <ClearDTOG_RX>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80066fc:	6023      	str	r3, [r4, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 80066fe:	4b07      	ldr	r3, [pc, #28]	; (800671c <Standard_ClearFeature+0xcc>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	4798      	blx	r3
    return USB_SUCCESS;
 8006706:	2000      	movs	r0, #0
 8006708:	bd38      	pop	{r3, r4, r5, pc}
  }

  return USB_UNSUPPORT;
 800670a:	2002      	movs	r0, #2
}
 800670c:	bd38      	pop	{r3, r4, r5, pc}
 800670e:	bf00      	nop
 8006710:	200005a8 	andcs	r0, r0, r8, lsr #11
 8006714:	200000a4 	andcs	r0, r0, r4, lsr #1
 8006718:	20000014 	andcs	r0, r0, r4, lsl r0
 800671c:	200005a4 	andcs	r0, r0, r4, lsr #11

08006720 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8006720:	b538      	push	{r3, r4, r5, lr}
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 8006722:	4b1d      	ldr	r3, [pc, #116]	; (8006798 <Standard_SetEndPointFeature+0x78>)
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8006724:	4d1d      	ldr	r5, [pc, #116]	; (800679c <Standard_SetEndPointFeature+0x7c>)
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 8006726:	6819      	ldr	r1, [r3, #0]
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8006728:	782d      	ldrb	r5, [r5, #0]
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 800672a:	790a      	ldrb	r2, [r1, #4]
  rEP = wIndex0 & ~0x80;
 800672c:	f022 0480 	bic.w	r4, r2, #128	; 0x80
 8006730:	00a3      	lsls	r3, r4, #2

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8006732:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8006736:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800673a:	6800      	ldr	r0, [r0, #0]

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 800673c:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8006740:	bf14      	ite	ne
 8006742:	f000 0030 	andne.w	r0, r0, #48	; 0x30
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8006746:	f400 5040 	andeq.w	r0, r0, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800674a:	42ac      	cmp	r4, r5
 800674c:	d222      	bcs.n	8006794 <Standard_SetEndPointFeature+0x74>
      || pInformation->USBwValue != 0 || Status == 0
 800674e:	884c      	ldrh	r4, [r1, #2]
 8006750:	bb04      	cbnz	r4, 8006794 <Standard_SetEndPointFeature+0x74>
 8006752:	b1f8      	cbz	r0, 8006794 <Standard_SetEndPointFeature+0x74>
      || pInformation->Current_Configuration == 0)
 8006754:	7a89      	ldrb	r1, [r1, #10]
 8006756:	b1e9      	cbz	r1, 8006794 <Standard_SetEndPointFeature+0x74>
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8006758:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800675c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8006760:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8006764:	681a      	ldr	r2, [r3, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8006766:	d007      	beq.n	8006778 <Standard_SetEndPointFeature+0x58>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8006768:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800676c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006770:	b292      	uxth	r2, r2
 8006772:	f082 0210 	eor.w	r2, r2, #16
 8006776:	e006      	b.n	8006786 <Standard_SetEndPointFeature+0x66>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8006778:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800677c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006780:	b292      	uxth	r2, r2
 8006782:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8006786:	601a      	str	r2, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8006788:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <Standard_SetEndPointFeature+0x80>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	4798      	blx	r3
  return USB_SUCCESS;
 8006790:	2000      	movs	r0, #0
 8006792:	bd38      	pop	{r3, r4, r5, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8006794:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8006796:	bd38      	pop	{r3, r4, r5, pc}
 8006798:	200005a8 	andcs	r0, r0, r8, lsr #11
 800679c:	200000a4 	andcs	r0, r0, r4, lsr #1
 80067a0:	200005a4 	andcs	r0, r0, r4, lsr #11

080067a4 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 80067a4:	b508      	push	{r3, lr}
  SetBit(pInformation->Current_Feature, 5);
 80067a6:	4b06      	ldr	r3, [pc, #24]	; (80067c0 <Standard_SetDeviceFeature+0x1c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	7a5a      	ldrb	r2, [r3, #9]
 80067ac:	f042 0220 	orr.w	r2, r2, #32
 80067b0:	725a      	strb	r2, [r3, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 80067b2:	4b04      	ldr	r3, [pc, #16]	; (80067c4 <Standard_SetDeviceFeature+0x20>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	4798      	blx	r3
  return USB_SUCCESS;
}
 80067ba:	2000      	movs	r0, #0
 80067bc:	bd08      	pop	{r3, pc}
 80067be:	bf00      	nop
 80067c0:	200005a8 	andcs	r0, r0, r8, lsr #11
 80067c4:	200005a4 	andcs	r0, r0, r4, lsr #11

080067c8 <Standard_GetDescriptorData>:
*******************************************************************************/
u8 *Standard_GetDescriptorData(u16 Length, ONE_DESCRIPTOR *pDesc)
{
  u32  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 80067c8:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <Standard_GetDescriptorData+0x18>)
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	8a53      	ldrh	r3, [r2, #18]
  if (Length == 0)
 80067ce:	b918      	cbnz	r0, 80067d8 <Standard_GetDescriptorData+0x10>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 80067d0:	8889      	ldrh	r1, [r1, #4]
 80067d2:	1acb      	subs	r3, r1, r3
 80067d4:	8213      	strh	r3, [r2, #16]
    return 0;
 80067d6:	4770      	bx	lr
  }

  return pDesc->Descriptor + wOffset;
 80067d8:	6808      	ldr	r0, [r1, #0]
 80067da:	4418      	add	r0, r3
}
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	200005a8 	andcs	r0, r0, r8, lsr #11

080067e4 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
u8 Post0_Process(void)
{
 80067e4:	b508      	push	{r3, lr}
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80067e6:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <Post0_Process+0x30>)
 80067e8:	2000      	movs	r0, #0
 80067ea:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80067ee:	f7ff fd49 	bl	8006284 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 80067f2:	4b09      	ldr	r3, [pc, #36]	; (8006818 <Post0_Process+0x34>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	7a18      	ldrb	r0, [r3, #8]
 80067f8:	2808      	cmp	r0, #8
 80067fa:	d106      	bne.n	800680a <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 80067fc:	4b07      	ldr	r3, [pc, #28]	; (800681c <Post0_Process+0x38>)
 80067fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006802:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8006804:	4b06      	ldr	r3, [pc, #24]	; (8006820 <Post0_Process+0x3c>)
 8006806:	2210      	movs	r2, #16
 8006808:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 800680a:	f1b0 0309 	subs.w	r3, r0, #9
 800680e:	4258      	negs	r0, r3
 8006810:	4158      	adcs	r0, r3
 8006812:	bd08      	pop	{r3, pc}
 8006814:	20000014 	andcs	r0, r0, r4, lsl r0
 8006818:	200005a8 	andcs	r0, r0, r8, lsr #11
 800681c:	20000576 	andcs	r0, r0, r6, ror r5
 8006820:	20000578 	andcs	r0, r0, r8, ror r5

08006824 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Setup0_Process(void)
{
 8006824:	b573      	push	{r0, r1, r4, r5, r6, lr}
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8006826:	4e96      	ldr	r6, [pc, #600]	; (8006a80 <Setup0_Process+0x25c>)
 8006828:	4b96      	ldr	r3, [pc, #600]	; (8006a84 <Setup0_Process+0x260>)
 800682a:	6832      	ldr	r2, [r6, #0]

  if (pInformation->ControlState != PAUSE)
 800682c:	4d96      	ldr	r5, [pc, #600]	; (8006a88 <Setup0_Process+0x264>)
 800682e:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8006830:	4413      	add	r3, r2
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8006836:	682b      	ldr	r3, [r5, #0]
 8006838:	7a19      	ldrb	r1, [r3, #8]
 800683a:	2909      	cmp	r1, #9
 800683c:	d00f      	beq.n	800685e <Setup0_Process+0x3a>
 800683e:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8006840:	0052      	lsls	r2, r2, #1
 8006842:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006846:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 800684a:	7811      	ldrb	r1, [r2, #0]
 800684c:	7019      	strb	r1, [r3, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 800684e:	7851      	ldrb	r1, [r2, #1]
 8006850:	7059      	strb	r1, [r3, #1]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = *pBuf.w++; /* wValue in Little Endian */
 8006852:	8891      	ldrh	r1, [r2, #4]
 8006854:	8059      	strh	r1, [r3, #2]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = *pBuf.w++; /* wIndex in Little Endian */
 8006856:	8911      	ldrh	r1, [r2, #8]
 8006858:	8099      	strh	r1, [r3, #4]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength in Little Endian */
 800685a:	8992      	ldrh	r2, [r2, #12]
 800685c:	80da      	strh	r2, [r3, #6]
  }

  pInformation->ControlState = SETTING_UP;
 800685e:	2201      	movs	r2, #1
 8006860:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 8006862:	88da      	ldrh	r2, [r3, #6]
 8006864:	785c      	ldrb	r4, [r3, #1]
 8006866:	2a00      	cmp	r2, #0
 8006868:	d161      	bne.n	800692e <Setup0_Process+0x10a>
{
  RESULT Result = USB_UNSUPPORT;
  u32 RequestNo = pInformation->USBbRequest;
  u32 ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800686a:	781a      	ldrb	r2, [r3, #0]
 800686c:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 8006870:	d13a      	bne.n	80068e8 <Setup0_Process+0xc4>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8006872:	2c09      	cmp	r4, #9
 8006874:	d102      	bne.n	800687c <Setup0_Process+0x58>
    {
      Result = Standard_SetConfiguration();
 8006876:	f7ff feab 	bl	80065d0 <Standard_SetConfiguration>
 800687a:	e044      	b.n	8006906 <Setup0_Process+0xe2>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 800687c:	2c05      	cmp	r4, #5
 800687e:	d10f      	bne.n	80068a0 <Setup0_Process+0x7c>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8006880:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8006884:	2a00      	cmp	r2, #0
 8006886:	da01      	bge.n	800688c <Setup0_Process+0x68>
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 8006888:	2308      	movs	r3, #8
 800688a:	e04d      	b.n	8006928 <Setup0_Process+0x104>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 800688c:	78da      	ldrb	r2, [r3, #3]
 800688e:	2a00      	cmp	r2, #0
 8006890:	d1fa      	bne.n	8006888 <Setup0_Process+0x64>
          || (pInformation->USBwIndex != 0)
 8006892:	889a      	ldrh	r2, [r3, #4]
 8006894:	2a00      	cmp	r2, #0
 8006896:	d1f7      	bne.n	8006888 <Setup0_Process+0x64>
          || (pInformation->Current_Configuration != 0))
 8006898:	7a9b      	ldrb	r3, [r3, #10]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d037      	beq.n	800690e <Setup0_Process+0xea>
 800689e:	e7f3      	b.n	8006888 <Setup0_Process+0x64>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 80068a0:	2c03      	cmp	r4, #3
 80068a2:	d113      	bne.n	80068cc <Setup0_Process+0xa8>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 80068a4:	789a      	ldrb	r2, [r3, #2]
 80068a6:	2a01      	cmp	r2, #1
 80068a8:	d007      	beq.n	80068ba <Setup0_Process+0x96>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 80068aa:	4b78      	ldr	r3, [pc, #480]	; (8006a8c <Setup0_Process+0x268>)
 80068ac:	4620      	mov	r0, r4
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 80068b4:	2803      	cmp	r0, #3
 80068b6:	d128      	bne.n	800690a <Setup0_Process+0xe6>
 80068b8:	e035      	b.n	8006926 <Setup0_Process+0x102>
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
          && (pInformation->USBwIndex == 0)
 80068ba:	889a      	ldrh	r2, [r3, #4]
 80068bc:	2a00      	cmp	r2, #0
 80068be:	d1f4      	bne.n	80068aa <Setup0_Process+0x86>
          && (ValBit(pInformation->Current_Feature, 5)))
 80068c0:	7a5b      	ldrb	r3, [r3, #9]
 80068c2:	0698      	lsls	r0, r3, #26
 80068c4:	d5f1      	bpl.n	80068aa <Setup0_Process+0x86>
      {
        Result = Standard_SetDeviceFeature();
 80068c6:	f7ff ff6d 	bl	80067a4 <Standard_SetDeviceFeature>
 80068ca:	e01c      	b.n	8006906 <Setup0_Process+0xe2>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 80068cc:	2c01      	cmp	r4, #1
 80068ce:	d1ec      	bne.n	80068aa <Setup0_Process+0x86>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 80068d0:	789a      	ldrb	r2, [r3, #2]
 80068d2:	2a01      	cmp	r2, #1
 80068d4:	d1e9      	bne.n	80068aa <Setup0_Process+0x86>
          && pInformation->USBwIndex == 0
 80068d6:	889a      	ldrh	r2, [r3, #4]
 80068d8:	2a00      	cmp	r2, #0
 80068da:	d1e6      	bne.n	80068aa <Setup0_Process+0x86>
          && ValBit(pInformation->Current_Feature, 5))
 80068dc:	7a5b      	ldrb	r3, [r3, #9]
 80068de:	0699      	lsls	r1, r3, #26
 80068e0:	d5e3      	bpl.n	80068aa <Setup0_Process+0x86>
      {
        Result = Standard_ClearFeature();
 80068e2:	f7ff feb5 	bl	8006650 <Standard_ClearFeature>
 80068e6:	e00e      	b.n	8006906 <Setup0_Process+0xe2>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80068e8:	2a01      	cmp	r2, #1
 80068ea:	d104      	bne.n	80068f6 <Setup0_Process+0xd2>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 80068ec:	2c0b      	cmp	r4, #11
 80068ee:	d1dc      	bne.n	80068aa <Setup0_Process+0x86>
    {
      Result = Standard_SetInterface();
 80068f0:	f7ff fe8a 	bl	8006608 <Standard_SetInterface>
 80068f4:	e007      	b.n	8006906 <Setup0_Process+0xe2>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80068f6:	2a02      	cmp	r2, #2
 80068f8:	d1d7      	bne.n	80068aa <Setup0_Process+0x86>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 80068fa:	2c01      	cmp	r4, #1
 80068fc:	d0f1      	beq.n	80068e2 <Setup0_Process+0xbe>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 80068fe:	2c03      	cmp	r4, #3
 8006900:	d1d3      	bne.n	80068aa <Setup0_Process+0x86>
    {
      Result = Standard_SetEndPointFeature();
 8006902:	f7ff ff0d 	bl	8006720 <Standard_SetEndPointFeature>
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8006906:	b110      	cbz	r0, 800690e <Setup0_Process+0xea>
 8006908:	e7cf      	b.n	80068aa <Setup0_Process+0x86>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 800690a:	2800      	cmp	r0, #0
 800690c:	d1bc      	bne.n	8006888 <Setup0_Process+0x64>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 800690e:	6832      	ldr	r2, [r6, #0]
 8006910:	4b5f      	ldr	r3, [pc, #380]	; (8006a90 <Setup0_Process+0x26c>)
 8006912:	b292      	uxth	r2, r2
 8006914:	4413      	add	r3, r2
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	4b5d      	ldr	r3, [pc, #372]	; (8006a94 <Setup0_Process+0x270>)
 800691e:	2230      	movs	r2, #48	; 0x30
 8006920:	801a      	strh	r2, [r3, #0]
  {
    ControlState = STALLED;
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 8006922:	2306      	movs	r3, #6
 8006924:	e000      	b.n	8006928 <Setup0_Process+0x104>
  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
    {
      ControlState = PAUSE;
 8006926:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8006928:	682a      	ldr	r2, [r5, #0]
 800692a:	7213      	strb	r3, [r2, #8]
 800692c:	e0d4      	b.n	8006ad8 <Setup0_Process+0x2b4>


  CopyRoutine = NULL;
  wOffset = 0;

  if (Request_No == GET_DESCRIPTOR)
 800692e:	2c06      	cmp	r4, #6
 8006930:	d118      	bne.n	8006964 <Setup0_Process+0x140>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8006932:	781a      	ldrb	r2, [r3, #0]
 8006934:	0652      	lsls	r2, r2, #25
 8006936:	d17c      	bne.n	8006a32 <Setup0_Process+0x20e>
    {
      u8 wValue1 = pInformation->USBwValue1;
 8006938:	78da      	ldrb	r2, [r3, #3]
 800693a:	4b54      	ldr	r3, [pc, #336]	; (8006a8c <Setup0_Process+0x268>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 800693c:	2a01      	cmp	r2, #1
 800693e:	d102      	bne.n	8006946 <Setup0_Process+0x122>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	e06c      	b.n	8006a20 <Setup0_Process+0x1fc>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8006946:	2a02      	cmp	r2, #2
 8006948:	d102      	bne.n	8006950 <Setup0_Process+0x12c>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	e067      	b.n	8006a20 <Setup0_Process+0x1fc>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8006950:	2a03      	cmp	r2, #3
 8006952:	d102      	bne.n	800695a <Setup0_Process+0x136>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	e062      	b.n	8006a20 <Setup0_Process+0x1fc>
      } else if (wValue1 == 0x21) /* added to support functional descriptors */
 800695a:	2a21      	cmp	r2, #33	; 0x21
 800695c:	d169      	bne.n	8006a32 <Setup0_Process+0x20e>
      {
	CopyRoutine = pProperty->GetFunctionalDescriptor;
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006962:	e05d      	b.n	8006a20 <Setup0_Process+0x1fc>
      } /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8006964:	2c00      	cmp	r4, #0
 8006966:	d13c      	bne.n	80069e2 <Setup0_Process+0x1be>
 8006968:	8859      	ldrh	r1, [r3, #2]
 800696a:	2900      	cmp	r1, #0
 800696c:	d161      	bne.n	8006a32 <Setup0_Process+0x20e>
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006974:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8006978:	d15b      	bne.n	8006a32 <Setup0_Process+0x20e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800697a:	781a      	ldrb	r2, [r3, #0]
 800697c:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 8006980:	d104      	bne.n	800698c <Setup0_Process+0x168>
        && (pInformation->USBwIndex == 0))
 8006982:	889b      	ldrh	r3, [r3, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 80ab 	beq.w	8006ae0 <Setup0_Process+0x2bc>
 800698a:	e052      	b.n	8006a32 <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800698c:	2a01      	cmp	r2, #1
 800698e:	d10c      	bne.n	80069aa <Setup0_Process+0x186>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8006990:	4a3e      	ldr	r2, [pc, #248]	; (8006a8c <Setup0_Process+0x268>)
 8006992:	7918      	ldrb	r0, [r3, #4]
 8006994:	6812      	ldr	r2, [r2, #0]
 8006996:	6992      	ldr	r2, [r2, #24]
 8006998:	4790      	blx	r2
 800699a:	2800      	cmp	r0, #0
 800699c:	d149      	bne.n	8006a32 <Setup0_Process+0x20e>
          && (pInformation->Current_Configuration != 0))
 800699e:	682b      	ldr	r3, [r5, #0]
 80069a0:	7a9b      	ldrb	r3, [r3, #10]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f040 809c 	bne.w	8006ae0 <Setup0_Process+0x2bc>
 80069a8:	e043      	b.n	8006a32 <Setup0_Process+0x20e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80069aa:	2a02      	cmp	r2, #2
 80069ac:	d141      	bne.n	8006a32 <Setup0_Process+0x20e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 80069ae:	791b      	ldrb	r3, [r3, #4]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80069b0:	4839      	ldr	r0, [pc, #228]	; (8006a98 <Setup0_Process+0x274>)
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 80069b2:	f003 010f 	and.w	r1, r3, #15
 80069b6:	008a      	lsls	r2, r1, #2

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 80069b8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80069bc:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80069c0:	6812      	ldr	r2, [r2, #0]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80069c2:	7800      	ldrb	r0, [r0, #0]
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 80069c4:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 80069c8:	bf14      	ite	ne
 80069ca:	f002 0230 	andne.w	r2, r2, #48	; 0x30
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 80069ce:	f402 5240 	andeq.w	r2, r2, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80069d2:	4281      	cmp	r1, r0
 80069d4:	d22d      	bcs.n	8006a32 <Setup0_Process+0x20e>
 80069d6:	f013 0f70 	tst.w	r3, #112	; 0x70
 80069da:	d12a      	bne.n	8006a32 <Setup0_Process+0x20e>
          && (Status != 0))
 80069dc:	2a00      	cmp	r2, #0
 80069de:	d17f      	bne.n	8006ae0 <Setup0_Process+0x2bc>
 80069e0:	e027      	b.n	8006a32 <Setup0_Process+0x20e>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 80069e2:	2c08      	cmp	r4, #8
 80069e4:	d103      	bne.n	80069ee <Setup0_Process+0x1ca>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	065b      	lsls	r3, r3, #25
 80069ea:	d07b      	beq.n	8006ae4 <Setup0_Process+0x2c0>
 80069ec:	e021      	b.n	8006a32 <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 80069ee:	2c0a      	cmp	r4, #10
 80069f0:	d11f      	bne.n	8006a32 <Setup0_Process+0x20e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80069f2:	781a      	ldrb	r2, [r3, #0]
 80069f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069f8:	2a01      	cmp	r2, #1
 80069fa:	d11a      	bne.n	8006a32 <Setup0_Process+0x20e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 80069fc:	7a9a      	ldrb	r2, [r3, #10]
 80069fe:	b1c2      	cbz	r2, 8006a32 <Setup0_Process+0x20e>
 8006a00:	8859      	ldrh	r1, [r3, #2]
 8006a02:	b9b1      	cbnz	r1, 8006a32 <Setup0_Process+0x20e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006a0a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006a0e:	d110      	bne.n	8006a32 <Setup0_Process+0x20e>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8006a10:	4a1e      	ldr	r2, [pc, #120]	; (8006a8c <Setup0_Process+0x268>)
 8006a12:	7918      	ldrb	r0, [r3, #4]
 8006a14:	6812      	ldr	r2, [r2, #0]
 8006a16:	6992      	ldr	r2, [r2, #24]
 8006a18:	4790      	blx	r2
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d064      	beq.n	8006ae8 <Setup0_Process+0x2c4>
 8006a1e:	e008      	b.n	8006a32 <Setup0_Process+0x20e>
      CopyRoutine = Standard_GetInterface;
    }

  }

  if (CopyRoutine)
 8006a20:	b13b      	cbz	r3, 8006a32 <Setup0_Process+0x20e>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8006a22:	682a      	ldr	r2, [r5, #0]
 8006a24:	2400      	movs	r4, #0
 8006a26:	8254      	strh	r4, [r2, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8006a28:	6193      	str	r3, [r2, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	4798      	blx	r3
    Result = USB_SUCCESS;
 8006a2e:	4620      	mov	r0, r4
 8006a30:	e00a      	b.n	8006a48 <Setup0_Process+0x224>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8006a32:	4b16      	ldr	r3, [pc, #88]	; (8006a8c <Setup0_Process+0x268>)
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	682b      	ldr	r3, [r5, #0]
 8006a38:	6912      	ldr	r2, [r2, #16]
 8006a3a:	7858      	ldrb	r0, [r3, #1]
 8006a3c:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 8006a3e:	2803      	cmp	r0, #3
 8006a40:	d102      	bne.n	8006a48 <Setup0_Process+0x224>
    {
      pInformation->ControlState = PAUSE;
 8006a42:	4b11      	ldr	r3, [pc, #68]	; (8006a88 <Setup0_Process+0x264>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	e005      	b.n	8006a54 <Setup0_Process+0x230>
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006a4e:	8a1a      	ldrh	r2, [r3, #16]
 8006a50:	428a      	cmp	r2, r1
 8006a52:	d101      	bne.n	8006a58 <Setup0_Process+0x234>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8006a54:	2209      	movs	r2, #9
 8006a56:	e003      	b.n	8006a60 <Setup0_Process+0x23c>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8006a58:	2802      	cmp	r0, #2
 8006a5a:	d000      	beq.n	8006a5e <Setup0_Process+0x23a>
 8006a5c:	b912      	cbnz	r2, 8006a64 <Setup0_Process+0x240>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8006a5e:	2208      	movs	r2, #8
 8006a60:	721a      	strb	r2, [r3, #8]
 8006a62:	e039      	b.n	8006ad8 <Setup0_Process+0x2b4>
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8006a64:	f993 1000 	ldrsb.w	r1, [r3]
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	da2f      	bge.n	8006acc <Setup0_Process+0x2a8>
  {
    /* Device ==> Host */
    vu32 wLength = pInformation->USBwLength;
 8006a6c:	88d9      	ldrh	r1, [r3, #6]
 8006a6e:	9101      	str	r1, [sp, #4]

    /* Restrict the data length to be the one host asks */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8006a70:	9801      	ldr	r0, [sp, #4]
 8006a72:	4282      	cmp	r2, r0
 8006a74:	4805      	ldr	r0, [pc, #20]	; (8006a8c <Setup0_Process+0x268>)
 8006a76:	d911      	bls.n	8006a9c <Setup0_Process+0x278>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8006a78:	9a01      	ldr	r2, [sp, #4]
 8006a7a:	821a      	strh	r2, [r3, #16]
 8006a7c:	e01f      	b.n	8006abe <Setup0_Process+0x29a>
 8006a7e:	bf00      	nop
 8006a80:	40005c50 	andmi	r5, r0, r0, asr ip
 8006a84:	20003004 	andcs	r3, r0, r4
 8006a88:	200005a8 	andcs	r0, r0, r8, lsr #11
 8006a8c:	20000580 	andcs	r0, r0, r0, lsl #11
 8006a90:	20003002 	andcs	r3, r0, r2
 8006a94:	20000578 	andcs	r0, r0, r8, ror r5
 8006a98:	200000a4 	andcs	r0, r0, r4, lsr #1
    }

    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8006a9c:	428a      	cmp	r2, r1
 8006a9e:	d20e      	bcs.n	8006abe <Setup0_Process+0x29a>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8006aa0:	6801      	ldr	r1, [r0, #0]
 8006aa2:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 8006aa6:	428a      	cmp	r2, r1
 8006aa8:	d201      	bcs.n	8006aae <Setup0_Process+0x28a>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8006aaa:	2100      	movs	r1, #0
 8006aac:	e005      	b.n	8006aba <Setup0_Process+0x296>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8006aae:	fb92 f4f1 	sdiv	r4, r2, r1
 8006ab2:	fb01 2214 	mls	r2, r1, r4, r2
 8006ab6:	b912      	cbnz	r2, 8006abe <Setup0_Process+0x29a>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8006ab8:	2101      	movs	r1, #1
 8006aba:	4a0c      	ldr	r2, [pc, #48]	; (8006aec <Setup0_Process+0x2c8>)
 8006abc:	7011      	strb	r1, [r2, #0]
      }
    }

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8006abe:	6802      	ldr	r2, [r0, #0]
 8006ac0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8006ac4:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8006ac6:	f7ff fd2f 	bl	8006528 <DataStageIn>
 8006aca:	e005      	b.n	8006ad8 <Setup0_Process+0x2b4>
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8006acc:	2203      	movs	r2, #3
 8006ace:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8006ad0:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <Setup0_Process+0x2cc>)
 8006ad2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006ad6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8006ad8:	f7ff fe84 	bl	80067e4 <Post0_Process>
}
 8006adc:	b002      	add	sp, #8
 8006ade:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
        && (pInformation->USBwIndex == 0))
    {
      CopyRoutine = Standard_GetStatus;
 8006ae0:	4b04      	ldr	r3, [pc, #16]	; (8006af4 <Setup0_Process+0x2d0>)
 8006ae2:	e79e      	b.n	8006a22 <Setup0_Process+0x1fe>
  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      CopyRoutine = Standard_GetConfiguration;
 8006ae4:	4b04      	ldr	r3, [pc, #16]	; (8006af8 <Setup0_Process+0x2d4>)
 8006ae6:	e79c      	b.n	8006a22 <Setup0_Process+0x1fe>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
    {
      CopyRoutine = Standard_GetInterface;
 8006ae8:	4b04      	ldr	r3, [pc, #16]	; (8006afc <Setup0_Process+0x2d8>)
 8006aea:	e79a      	b.n	8006a22 <Setup0_Process+0x1fe>
 8006aec:	20000dcc 	andcs	r0, r0, ip, asr #27
 8006af0:	20000576 	andcs	r0, r0, r6, ror r5
 8006af4:	08006499 	stmdaeq	r0, {r0, r3, r4, r7, sl, sp, lr}
 8006af8:	08006451 	stmdaeq	r0, {r0, r4, r6, sl, sp, lr}
 8006afc:	08006475 	stmdaeq	r0, {r0, r2, r4, r5, r6, sl, sp, lr}

08006b00 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Out0_Process(void)
{
 8006b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32 ControlState = pInformation->ControlState;
 8006b02:	4d2b      	ldr	r5, [pc, #172]	; (8006bb0 <Out0_Process+0xb0>)
 8006b04:	682c      	ldr	r4, [r5, #0]
 8006b06:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8006b08:	2b03      	cmp	r3, #3
 8006b0a:	d001      	beq.n	8006b10 <Out0_Process+0x10>
 8006b0c:	2b05      	cmp	r3, #5
 8006b0e:	d141      	bne.n	8006b94 <Out0_Process+0x94>
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 8006b10:	69a3      	ldr	r3, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8006b12:	8a22      	ldrh	r2, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8006b14:	b1ab      	cbz	r3, 8006b42 <Out0_Process+0x42>
 8006b16:	b1a2      	cbz	r2, 8006b42 <Out0_Process+0x42>
  {
    u8 *Buffer;
    u32 Length;

    Length = pEPinfo->PacketSize;
 8006b18:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8006b1a:	4296      	cmp	r6, r2
 8006b1c:	bf28      	it	cs
 8006b1e:	4616      	movcs	r6, r2
 8006b20:	4630      	mov	r0, r6
 8006b22:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 8006b24:	8a23      	ldrh	r3, [r4, #16]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8006b26:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 8006b28:	1b9b      	subs	r3, r3, r6
 8006b2a:	8223      	strh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8006b2c:	8a63      	ldrh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8006b2e:	2000      	movs	r0, #0
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 8006b30:	4433      	add	r3, r6
 8006b32:	8263      	strh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8006b34:	f7ff fb8a 	bl	800624c <GetEPRxAddr>
 8006b38:	4632      	mov	r2, r6
 8006b3a:	4601      	mov	r1, r0
 8006b3c:	4638      	mov	r0, r7
 8006b3e:	f000 f8a5 	bl	8006c8c <PMAToUserBufferCopy>
  }

  if (pEPinfo->Usb_rLength != 0)
 8006b42:	8a23      	ldrh	r3, [r4, #16]
 8006b44:	b153      	cbz	r3, 8006b5c <Out0_Process+0x5c>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8006b46:	4b1b      	ldr	r3, [pc, #108]	; (8006bb4 <Out0_Process+0xb4>)
    SetEPTxCount(ENDP0, 0);
 8006b48:	2000      	movs	r0, #0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8006b4a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 8006b4e:	4601      	mov	r1, r0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8006b50:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 8006b52:	f7ff fb89 	bl	8006268 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8006b56:	4b18      	ldr	r3, [pc, #96]	; (8006bb8 <Out0_Process+0xb8>)
 8006b58:	2230      	movs	r2, #48	; 0x30
 8006b5a:	801a      	strh	r2, [r3, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8006b5c:	8a23      	ldrh	r3, [r4, #16]
 8006b5e:	8aa2      	ldrh	r2, [r4, #20]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d802      	bhi.n	8006b6a <Out0_Process+0x6a>
  {
    pInformation->ControlState = OUT_DATA;
 8006b64:	682b      	ldr	r3, [r5, #0]
 8006b66:	2203      	movs	r2, #3
 8006b68:	e002      	b.n	8006b70 <Out0_Process+0x70>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8006b6a:	b11b      	cbz	r3, 8006b74 <Out0_Process+0x74>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8006b6c:	682b      	ldr	r3, [r5, #0]
 8006b6e:	2205      	movs	r2, #5
 8006b70:	721a      	strb	r2, [r3, #8]
 8006b72:	e00c      	b.n	8006b8e <Out0_Process+0x8e>
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8006b74:	682a      	ldr	r2, [r5, #0]
 8006b76:	2106      	movs	r1, #6
 8006b78:	7211      	strb	r1, [r2, #8]
      USB_StatusIn();
 8006b7a:	4a10      	ldr	r2, [pc, #64]	; (8006bbc <Out0_Process+0xbc>)
 8006b7c:	6811      	ldr	r1, [r2, #0]
 8006b7e:	4a10      	ldr	r2, [pc, #64]	; (8006bc0 <Out0_Process+0xc0>)
 8006b80:	b289      	uxth	r1, r1
 8006b82:	440a      	add	r2, r1
 8006b84:	0052      	lsls	r2, r2, #1
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	4b0b      	ldr	r3, [pc, #44]	; (8006bb8 <Out0_Process+0xb8>)
 8006b8a:	2230      	movs	r2, #48	; 0x30
 8006b8c:	801a      	strh	r2, [r3, #0]
  u32 ControlState = pInformation->ControlState;

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 8006b8e:	682b      	ldr	r3, [r5, #0]
 8006b90:	7a1b      	ldrb	r3, [r3, #8]
 8006b92:	e006      	b.n	8006ba2 <Out0_Process+0xa2>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8006b94:	2b07      	cmp	r3, #7
 8006b96:	d103      	bne.n	8006ba0 <Out0_Process+0xa0>
  {
    (*pProperty->Process_Status_OUT)();
 8006b98:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <Out0_Process+0xc4>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	4798      	blx	r3
  }

  else if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 8006ba0:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8006ba2:	682a      	ldr	r2, [r5, #0]
 8006ba4:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 8006ba6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 8006baa:	f7ff be1b 	b.w	80067e4 <Post0_Process>
 8006bae:	bf00      	nop
 8006bb0:	200005a8 	andcs	r0, r0, r8, lsr #11
 8006bb4:	20000576 	andcs	r0, r0, r6, ror r5
 8006bb8:	20000578 	andcs	r0, r0, r8, ror r5
 8006bbc:	40005c50 	andmi	r5, r0, r0, asr ip
 8006bc0:	20003002 	andcs	r3, r0, r2
 8006bc4:	20000580 	andcs	r0, r0, r0, lsl #11

08006bc8 <SetDeviceAddress>:
* Input          : - Val: device adress.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(u8 Val)
{
 8006bc8:	b530      	push	{r4, r5, lr}
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;
 8006bca:	4b0b      	ldr	r3, [pc, #44]	; (8006bf8 <SetDeviceAddress+0x30>)
 8006bcc:	781c      	ldrb	r4, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8006bce:	2300      	movs	r3, #0
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	d20c      	bcs.n	8006bee <SetDeviceAddress+0x26>
 8006bd4:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8006bd8:	f502 52b8 	add.w	r2, r2, #5888	; 0x1700
 8006bdc:	0091      	lsls	r1, r2, #2
  {
    _SetEPAddress((u8)i, (u8)i);
 8006bde:	680d      	ldr	r5, [r1, #0]
 8006be0:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8006be4:	402a      	ands	r2, r5
 8006be6:	431a      	orrs	r2, r3
 8006be8:	600a      	str	r2, [r1, #0]
{
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8006bea:	3301      	adds	r3, #1
 8006bec:	e7f0      	b.n	8006bd0 <SetDeviceAddress+0x8>
  {
    _SetEPAddress((u8)i, (u8)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 8006bee:	4b03      	ldr	r3, [pc, #12]	; (8006bfc <SetDeviceAddress+0x34>)
 8006bf0:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8006bf4:	6018      	str	r0, [r3, #0]
 8006bf6:	bd30      	pop	{r4, r5, pc}
 8006bf8:	200000a4 	andcs	r0, r0, r4, lsr #1
 8006bfc:	40005c4c 	andmi	r5, r0, ip, asr #24

08006c00 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 In0_Process(void)
{
 8006c00:	b510      	push	{r4, lr}
  u32 ControlState = pInformation->ControlState;
 8006c02:	4c13      	ldr	r4, [pc, #76]	; (8006c50 <In0_Process+0x50>)
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8006c08:	2a02      	cmp	r2, #2
 8006c0a:	d001      	beq.n	8006c10 <In0_Process+0x10>
 8006c0c:	2a04      	cmp	r2, #4
 8006c0e:	d104      	bne.n	8006c1a <In0_Process+0x1a>
  {
    DataStageIn();
 8006c10:	f7ff fc8a 	bl	8006528 <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	7a1b      	ldrb	r3, [r3, #8]
 8006c18:	e013      	b.n	8006c42 <In0_Process+0x42>
  }

  else if (ControlState == WAIT_STATUS_IN)
 8006c1a:	2a06      	cmp	r2, #6
 8006c1c:	d110      	bne.n	8006c40 <In0_Process+0x40>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8006c1e:	785a      	ldrb	r2, [r3, #1]
 8006c20:	2a05      	cmp	r2, #5
 8006c22:	d109      	bne.n	8006c38 <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8006c24:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8006c26:	0652      	lsls	r2, r2, #25
 8006c28:	d106      	bne.n	8006c38 <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8006c2a:	7898      	ldrb	r0, [r3, #2]
 8006c2c:	f7ff ffcc 	bl	8006bc8 <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 8006c30:	4b08      	ldr	r3, [pc, #32]	; (8006c54 <In0_Process+0x54>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
 8006c38:	4b07      	ldr	r3, [pc, #28]	; (8006c58 <In0_Process+0x58>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	4798      	blx	r3
    ControlState = STALLED;
  }

  else
  {
    ControlState = STALLED;
 8006c40:	2308      	movs	r3, #8
  }

  pInformation->ControlState = ControlState;
 8006c42:	6822      	ldr	r2, [r4, #0]
 8006c44:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 8006c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 8006c4a:	f7ff bdcb 	b.w	80067e4 <Post0_Process>
 8006c4e:	bf00      	nop
 8006c50:	200005a8 	andcs	r0, r0, r8, lsr #11
 8006c54:	200005a4 	andcs	r0, r0, r4, lsr #11
 8006c58:	20000580 	andcs	r0, r0, r0, lsl #11

08006c5c <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 8006c5c:	b530      	push	{r4, r5, lr}
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 8006c5e:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8006c62:	3201      	adds	r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 8006c64:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8006c68:	1052      	asrs	r2, r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 8006c6a:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	f100 0002 	add.w	r0, r0, #2
 8006c74:	d009      	beq.n	8006c8a <UserToPMABufferCopy+0x2e>
  {
    temp1 = (u16) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 8006c76:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (u16) * pbUsrBuf;
 8006c7a:	f810 4c02 	ldrb.w	r4, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 8006c7e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    *pdwVal++ = temp2;
 8006c82:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 8006c86:	3301      	adds	r3, #1
 8006c88:	e7f1      	b.n	8006c6e <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8006c8a:	bd30      	pop	{r4, r5, pc}

08006c8c <PMAToUserBufferCopy>:
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 8006c8c:	b510      	push	{r4, lr}
  u32 n = (wNBytes + 1) >> 1;/* /2*/
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 8006c8e:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 8006c92:	3201      	adds	r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 8006c94:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 8006c98:	1052      	asrs	r2, r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 8006c9a:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d005      	beq.n	8006cae <PMAToUserBufferCopy+0x22>
  {
    *(u16*)pbUsrBuf++ = *pdwVal++;
 8006ca2:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8006ca6:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 8006caa:	3301      	adds	r3, #1
 8006cac:	e7f7      	b.n	8006c9e <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 8006cae:	bd10      	pop	{r4, pc}

08006cb0 <memcpy>:
 8006cb0:	b510      	push	{r4, lr}
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d003      	beq.n	8006cc0 <memcpy+0x10>
 8006cb8:	5ccc      	ldrb	r4, [r1, r3]
 8006cba:	54c4      	strb	r4, [r0, r3]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	e7f9      	b.n	8006cb4 <memcpy+0x4>
 8006cc0:	bd10      	pop	{r4, pc}

08006cc2 <memset>:
 8006cc2:	4402      	add	r2, r0
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d002      	beq.n	8006cd0 <memset+0xe>
 8006cca:	f803 1b01 	strb.w	r1, [r3], #1
 8006cce:	e7fa      	b.n	8006cc6 <memset+0x4>
 8006cd0:	4770      	bx	lr
	...

08006cd4 <siprintf>:
 8006cd4:	b40e      	push	{r1, r2, r3}
 8006cd6:	b500      	push	{lr}
 8006cd8:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006cdc:	b09c      	sub	sp, #112	; 0x70
 8006cde:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006ce2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ce6:	9104      	str	r1, [sp, #16]
 8006ce8:	9107      	str	r1, [sp, #28]
 8006cea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006cee:	ab1d      	add	r3, sp, #116	; 0x74
 8006cf0:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006cf4:	4908      	ldr	r1, [pc, #32]	; (8006d18 <siprintf+0x44>)
 8006cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cfa:	9002      	str	r0, [sp, #8]
 8006cfc:	9006      	str	r0, [sp, #24]
 8006cfe:	6808      	ldr	r0, [r1, #0]
 8006d00:	a902      	add	r1, sp, #8
 8006d02:	9301      	str	r3, [sp, #4]
 8006d04:	f000 f86e 	bl	8006de4 <_svfiprintf_r>
 8006d08:	9b02      	ldr	r3, [sp, #8]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	701a      	strb	r2, [r3, #0]
 8006d0e:	b01c      	add	sp, #112	; 0x70
 8006d10:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d14:	b003      	add	sp, #12
 8006d16:	4770      	bx	lr
 8006d18:	20000484 	andcs	r0, r0, r4, lsl #9

08006d1c <strlen>:
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d22:	2a00      	cmp	r2, #0
 8006d24:	d1fb      	bne.n	8006d1e <strlen+0x2>
 8006d26:	1a18      	subs	r0, r3, r0
 8006d28:	3801      	subs	r0, #1
 8006d2a:	4770      	bx	lr

08006d2c <__ssputs_r>:
 8006d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d30:	688d      	ldr	r5, [r1, #8]
 8006d32:	4681      	mov	r9, r0
 8006d34:	42ab      	cmp	r3, r5
 8006d36:	460c      	mov	r4, r1
 8006d38:	4692      	mov	sl, r2
 8006d3a:	461f      	mov	r7, r3
 8006d3c:	d343      	bcc.n	8006dc6 <__ssputs_r+0x9a>
 8006d3e:	898b      	ldrh	r3, [r1, #12]
 8006d40:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8006d44:	d03d      	beq.n	8006dc2 <__ssputs_r+0x96>
 8006d46:	6826      	ldr	r6, [r4, #0]
 8006d48:	6909      	ldr	r1, [r1, #16]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	ebc1 0806 	rsb	r8, r1, r6
 8006d50:	6966      	ldr	r6, [r4, #20]
 8006d52:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006d56:	fb96 f6f2 	sdiv	r6, r6, r2
 8006d5a:	f108 0201 	add.w	r2, r8, #1
 8006d5e:	443a      	add	r2, r7
 8006d60:	4296      	cmp	r6, r2
 8006d62:	bf38      	it	cc
 8006d64:	4616      	movcc	r6, r2
 8006d66:	055b      	lsls	r3, r3, #21
 8006d68:	d50f      	bpl.n	8006d8a <__ssputs_r+0x5e>
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	f000 fb40 	bl	80073f0 <_malloc_r>
 8006d70:	4605      	mov	r5, r0
 8006d72:	b198      	cbz	r0, 8006d9c <__ssputs_r+0x70>
 8006d74:	6921      	ldr	r1, [r4, #16]
 8006d76:	4642      	mov	r2, r8
 8006d78:	f7ff ff9a 	bl	8006cb0 <memcpy>
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d86:	81a3      	strh	r3, [r4, #12]
 8006d88:	e013      	b.n	8006db2 <__ssputs_r+0x86>
 8006d8a:	4632      	mov	r2, r6
 8006d8c:	f000 fb84 	bl	8007498 <_realloc_r>
 8006d90:	4605      	mov	r5, r0
 8006d92:	b970      	cbnz	r0, 8006db2 <__ssputs_r+0x86>
 8006d94:	4648      	mov	r0, r9
 8006d96:	6921      	ldr	r1, [r4, #16]
 8006d98:	f000 fae6 	bl	8007368 <_free_r>
 8006d9c:	230c      	movs	r3, #12
 8006d9e:	f8c9 3000 	str.w	r3, [r9]
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	f04f 30ff 	mov.w	r0, #4294967295
 8006da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dac:	81a3      	strh	r3, [r4, #12]
 8006dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db2:	6125      	str	r5, [r4, #16]
 8006db4:	6166      	str	r6, [r4, #20]
 8006db6:	4445      	add	r5, r8
 8006db8:	ebc8 0606 	rsb	r6, r8, r6
 8006dbc:	6025      	str	r5, [r4, #0]
 8006dbe:	60a6      	str	r6, [r4, #8]
 8006dc0:	463d      	mov	r5, r7
 8006dc2:	42af      	cmp	r7, r5
 8006dc4:	d200      	bcs.n	8006dc8 <__ssputs_r+0x9c>
 8006dc6:	463d      	mov	r5, r7
 8006dc8:	462a      	mov	r2, r5
 8006dca:	6820      	ldr	r0, [r4, #0]
 8006dcc:	4651      	mov	r1, sl
 8006dce:	f000 faaf 	bl	8007330 <memmove>
 8006dd2:	68a3      	ldr	r3, [r4, #8]
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	1b5b      	subs	r3, r3, r5
 8006dd8:	60a3      	str	r3, [r4, #8]
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	441d      	add	r5, r3
 8006dde:	6025      	str	r5, [r4, #0]
 8006de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006de4 <_svfiprintf_r>:
 8006de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006de8:	b09d      	sub	sp, #116	; 0x74
 8006dea:	9303      	str	r3, [sp, #12]
 8006dec:	898b      	ldrh	r3, [r1, #12]
 8006dee:	4607      	mov	r7, r0
 8006df0:	061c      	lsls	r4, r3, #24
 8006df2:	460d      	mov	r5, r1
 8006df4:	4616      	mov	r6, r2
 8006df6:	d50c      	bpl.n	8006e12 <_svfiprintf_r+0x2e>
 8006df8:	690b      	ldr	r3, [r1, #16]
 8006dfa:	b953      	cbnz	r3, 8006e12 <_svfiprintf_r+0x2e>
 8006dfc:	2140      	movs	r1, #64	; 0x40
 8006dfe:	f000 faf7 	bl	80073f0 <_malloc_r>
 8006e02:	6028      	str	r0, [r5, #0]
 8006e04:	6128      	str	r0, [r5, #16]
 8006e06:	b910      	cbnz	r0, 8006e0e <_svfiprintf_r+0x2a>
 8006e08:	230c      	movs	r3, #12
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	e0c7      	b.n	8006f9e <_svfiprintf_r+0x1ba>
 8006e0e:	2340      	movs	r3, #64	; 0x40
 8006e10:	616b      	str	r3, [r5, #20]
 8006e12:	2300      	movs	r3, #0
 8006e14:	9309      	str	r3, [sp, #36]	; 0x24
 8006e16:	2320      	movs	r3, #32
 8006e18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e1c:	2330      	movs	r3, #48	; 0x30
 8006e1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e22:	4633      	mov	r3, r6
 8006e24:	461c      	mov	r4, r3
 8006e26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e2a:	b91a      	cbnz	r2, 8006e34 <_svfiprintf_r+0x50>
 8006e2c:	ebb4 0906 	subs.w	r9, r4, r6
 8006e30:	d00f      	beq.n	8006e52 <_svfiprintf_r+0x6e>
 8006e32:	e002      	b.n	8006e3a <_svfiprintf_r+0x56>
 8006e34:	2a25      	cmp	r2, #37	; 0x25
 8006e36:	d1f5      	bne.n	8006e24 <_svfiprintf_r+0x40>
 8006e38:	e7f8      	b.n	8006e2c <_svfiprintf_r+0x48>
 8006e3a:	4638      	mov	r0, r7
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	4632      	mov	r2, r6
 8006e40:	464b      	mov	r3, r9
 8006e42:	f7ff ff73 	bl	8006d2c <__ssputs_r>
 8006e46:	3001      	adds	r0, #1
 8006e48:	f000 80a4 	beq.w	8006f94 <_svfiprintf_r+0x1b0>
 8006e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4e:	444b      	add	r3, r9
 8006e50:	9309      	str	r3, [sp, #36]	; 0x24
 8006e52:	7823      	ldrb	r3, [r4, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 809d 	beq.w	8006f94 <_svfiprintf_r+0x1b0>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e60:	9304      	str	r3, [sp, #16]
 8006e62:	9307      	str	r3, [sp, #28]
 8006e64:	9205      	str	r2, [sp, #20]
 8006e66:	9306      	str	r3, [sp, #24]
 8006e68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e6c:	931a      	str	r3, [sp, #104]	; 0x68
 8006e6e:	f104 0901 	add.w	r9, r4, #1
 8006e72:	4e4d      	ldr	r6, [pc, #308]	; (8006fa8 <_svfiprintf_r+0x1c4>)
 8006e74:	464c      	mov	r4, r9
 8006e76:	4630      	mov	r0, r6
 8006e78:	7821      	ldrb	r1, [r4, #0]
 8006e7a:	2205      	movs	r2, #5
 8006e7c:	f000 fa4a 	bl	8007314 <memchr>
 8006e80:	f109 0901 	add.w	r9, r9, #1
 8006e84:	9b04      	ldr	r3, [sp, #16]
 8006e86:	b128      	cbz	r0, 8006e94 <_svfiprintf_r+0xb0>
 8006e88:	1b86      	subs	r6, r0, r6
 8006e8a:	2001      	movs	r0, #1
 8006e8c:	40b0      	lsls	r0, r6
 8006e8e:	4303      	orrs	r3, r0
 8006e90:	9304      	str	r3, [sp, #16]
 8006e92:	e7ee      	b.n	8006e72 <_svfiprintf_r+0x8e>
 8006e94:	06d9      	lsls	r1, r3, #27
 8006e96:	bf44      	itt	mi
 8006e98:	2220      	movmi	r2, #32
 8006e9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006e9e:	071a      	lsls	r2, r3, #28
 8006ea0:	bf44      	itt	mi
 8006ea2:	222b      	movmi	r2, #43	; 0x2b
 8006ea4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ea8:	7822      	ldrb	r2, [r4, #0]
 8006eaa:	2a2a      	cmp	r2, #42	; 0x2a
 8006eac:	d002      	beq.n	8006eb4 <_svfiprintf_r+0xd0>
 8006eae:	9b07      	ldr	r3, [sp, #28]
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	e00e      	b.n	8006ed2 <_svfiprintf_r+0xee>
 8006eb4:	9a03      	ldr	r2, [sp, #12]
 8006eb6:	1d11      	adds	r1, r2, #4
 8006eb8:	6812      	ldr	r2, [r2, #0]
 8006eba:	9103      	str	r1, [sp, #12]
 8006ebc:	2a00      	cmp	r2, #0
 8006ebe:	db01      	blt.n	8006ec4 <_svfiprintf_r+0xe0>
 8006ec0:	9207      	str	r2, [sp, #28]
 8006ec2:	e004      	b.n	8006ece <_svfiprintf_r+0xea>
 8006ec4:	4252      	negs	r2, r2
 8006ec6:	f043 0302 	orr.w	r3, r3, #2
 8006eca:	9207      	str	r2, [sp, #28]
 8006ecc:	9304      	str	r3, [sp, #16]
 8006ece:	3401      	adds	r4, #1
 8006ed0:	e00a      	b.n	8006ee8 <_svfiprintf_r+0x104>
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	7822      	ldrb	r2, [r4, #0]
 8006ed6:	3101      	adds	r1, #1
 8006ed8:	3a30      	subs	r2, #48	; 0x30
 8006eda:	2a09      	cmp	r2, #9
 8006edc:	d803      	bhi.n	8006ee6 <_svfiprintf_r+0x102>
 8006ede:	200a      	movs	r0, #10
 8006ee0:	fb00 2303 	mla	r3, r0, r3, r2
 8006ee4:	e7f5      	b.n	8006ed2 <_svfiprintf_r+0xee>
 8006ee6:	9307      	str	r3, [sp, #28]
 8006ee8:	7823      	ldrb	r3, [r4, #0]
 8006eea:	2b2e      	cmp	r3, #46	; 0x2e
 8006eec:	d119      	bne.n	8006f22 <_svfiprintf_r+0x13e>
 8006eee:	7863      	ldrb	r3, [r4, #1]
 8006ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ef2:	d109      	bne.n	8006f08 <_svfiprintf_r+0x124>
 8006ef4:	9b03      	ldr	r3, [sp, #12]
 8006ef6:	3402      	adds	r4, #2
 8006ef8:	1d1a      	adds	r2, r3, #4
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	9203      	str	r2, [sp, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	bfb8      	it	lt
 8006f02:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f06:	e00b      	b.n	8006f20 <_svfiprintf_r+0x13c>
 8006f08:	1c61      	adds	r1, r4, #1
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	460c      	mov	r4, r1
 8006f0e:	7822      	ldrb	r2, [r4, #0]
 8006f10:	3101      	adds	r1, #1
 8006f12:	3a30      	subs	r2, #48	; 0x30
 8006f14:	2a09      	cmp	r2, #9
 8006f16:	d803      	bhi.n	8006f20 <_svfiprintf_r+0x13c>
 8006f18:	200a      	movs	r0, #10
 8006f1a:	fb00 2303 	mla	r3, r0, r3, r2
 8006f1e:	e7f5      	b.n	8006f0c <_svfiprintf_r+0x128>
 8006f20:	9305      	str	r3, [sp, #20]
 8006f22:	4e22      	ldr	r6, [pc, #136]	; (8006fac <_svfiprintf_r+0x1c8>)
 8006f24:	7821      	ldrb	r1, [r4, #0]
 8006f26:	4630      	mov	r0, r6
 8006f28:	2203      	movs	r2, #3
 8006f2a:	f000 f9f3 	bl	8007314 <memchr>
 8006f2e:	b130      	cbz	r0, 8006f3e <_svfiprintf_r+0x15a>
 8006f30:	1b86      	subs	r6, r0, r6
 8006f32:	2040      	movs	r0, #64	; 0x40
 8006f34:	40b0      	lsls	r0, r6
 8006f36:	9b04      	ldr	r3, [sp, #16]
 8006f38:	3401      	adds	r4, #1
 8006f3a:	4303      	orrs	r3, r0
 8006f3c:	9304      	str	r3, [sp, #16]
 8006f3e:	7821      	ldrb	r1, [r4, #0]
 8006f40:	481b      	ldr	r0, [pc, #108]	; (8006fb0 <_svfiprintf_r+0x1cc>)
 8006f42:	2206      	movs	r2, #6
 8006f44:	1c66      	adds	r6, r4, #1
 8006f46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f4a:	f000 f9e3 	bl	8007314 <memchr>
 8006f4e:	b188      	cbz	r0, 8006f74 <_svfiprintf_r+0x190>
 8006f50:	4b18      	ldr	r3, [pc, #96]	; (8006fb4 <_svfiprintf_r+0x1d0>)
 8006f52:	b933      	cbnz	r3, 8006f62 <_svfiprintf_r+0x17e>
 8006f54:	9b03      	ldr	r3, [sp, #12]
 8006f56:	3307      	adds	r3, #7
 8006f58:	f023 0307 	bic.w	r3, r3, #7
 8006f5c:	3308      	adds	r3, #8
 8006f5e:	9303      	str	r3, [sp, #12]
 8006f60:	e014      	b.n	8006f8c <_svfiprintf_r+0x1a8>
 8006f62:	ab03      	add	r3, sp, #12
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	4638      	mov	r0, r7
 8006f68:	a904      	add	r1, sp, #16
 8006f6a:	462a      	mov	r2, r5
 8006f6c:	4b12      	ldr	r3, [pc, #72]	; (8006fb8 <_svfiprintf_r+0x1d4>)
 8006f6e:	f3af 8000 	nop.w
 8006f72:	e007      	b.n	8006f84 <_svfiprintf_r+0x1a0>
 8006f74:	ab03      	add	r3, sp, #12
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	4638      	mov	r0, r7
 8006f7a:	a904      	add	r1, sp, #16
 8006f7c:	462a      	mov	r2, r5
 8006f7e:	4b0e      	ldr	r3, [pc, #56]	; (8006fb8 <_svfiprintf_r+0x1d4>)
 8006f80:	f000 f88e 	bl	80070a0 <_printf_i>
 8006f84:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006f88:	4680      	mov	r8, r0
 8006f8a:	d003      	beq.n	8006f94 <_svfiprintf_r+0x1b0>
 8006f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f8e:	4443      	add	r3, r8
 8006f90:	9309      	str	r3, [sp, #36]	; 0x24
 8006f92:	e746      	b.n	8006e22 <_svfiprintf_r+0x3e>
 8006f94:	89ab      	ldrh	r3, [r5, #12]
 8006f96:	065b      	lsls	r3, r3, #25
 8006f98:	d401      	bmi.n	8006f9e <_svfiprintf_r+0x1ba>
 8006f9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f9c:	e001      	b.n	8006fa2 <_svfiprintf_r+0x1be>
 8006f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa2:	b01d      	add	sp, #116	; 0x74
 8006fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fa8:	08007c27 	stmdaeq	r0, {r0, r1, r2, r5, sl, fp, ip, sp, lr}
 8006fac:	08007c2d 	stmdaeq	r0, {r0, r2, r3, r5, sl, fp, ip, sp, lr}
 8006fb0:	08007c31 	stmdaeq	r0, {r0, r4, r5, sl, fp, ip, sp, lr}
 8006fb4:	00000000 	andeq	r0, r0, r0
 8006fb8:	08006d2d 	stmdaeq	r0, {r0, r2, r3, r5, r8, sl, fp, sp, lr}

08006fbc <_printf_common>:
 8006fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc0:	4615      	mov	r5, r2
 8006fc2:	461f      	mov	r7, r3
 8006fc4:	688a      	ldr	r2, [r1, #8]
 8006fc6:	690b      	ldr	r3, [r1, #16]
 8006fc8:	4606      	mov	r6, r0
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	bfa8      	it	ge
 8006fce:	4613      	movge	r3, r2
 8006fd0:	602b      	str	r3, [r5, #0]
 8006fd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fd6:	460c      	mov	r4, r1
 8006fd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fdc:	b10a      	cbz	r2, 8006fe2 <_printf_common+0x26>
 8006fde:	3301      	adds	r3, #1
 8006fe0:	602b      	str	r3, [r5, #0]
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	0699      	lsls	r1, r3, #26
 8006fe6:	d502      	bpl.n	8006fee <_printf_common+0x32>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	3302      	adds	r3, #2
 8006fec:	602b      	str	r3, [r5, #0]
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	f013 0906 	ands.w	r9, r3, #6
 8006ff4:	d01d      	beq.n	8007032 <_printf_common+0x76>
 8006ff6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006ffa:	6822      	ldr	r2, [r4, #0]
 8006ffc:	3300      	adds	r3, #0
 8006ffe:	bf18      	it	ne
 8007000:	2301      	movne	r3, #1
 8007002:	0692      	lsls	r2, r2, #26
 8007004:	d51f      	bpl.n	8007046 <_printf_common+0x8a>
 8007006:	18e1      	adds	r1, r4, r3
 8007008:	2030      	movs	r0, #48	; 0x30
 800700a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007014:	4422      	add	r2, r4
 8007016:	3302      	adds	r3, #2
 8007018:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800701c:	e013      	b.n	8007046 <_printf_common+0x8a>
 800701e:	4630      	mov	r0, r6
 8007020:	4639      	mov	r1, r7
 8007022:	f104 0219 	add.w	r2, r4, #25
 8007026:	2301      	movs	r3, #1
 8007028:	47c0      	blx	r8
 800702a:	3001      	adds	r0, #1
 800702c:	d007      	beq.n	800703e <_printf_common+0x82>
 800702e:	f109 0901 	add.w	r9, r9, #1
 8007032:	68e2      	ldr	r2, [r4, #12]
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	4599      	cmp	r9, r3
 800703a:	dbf0      	blt.n	800701e <_printf_common+0x62>
 800703c:	e7db      	b.n	8006ff6 <_printf_common+0x3a>
 800703e:	f04f 30ff 	mov.w	r0, #4294967295
 8007042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007046:	4630      	mov	r0, r6
 8007048:	4639      	mov	r1, r7
 800704a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800704e:	47c0      	blx	r8
 8007050:	3001      	adds	r0, #1
 8007052:	d0f4      	beq.n	800703e <_printf_common+0x82>
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	682a      	ldr	r2, [r5, #0]
 8007058:	f003 0306 	and.w	r3, r3, #6
 800705c:	68e1      	ldr	r1, [r4, #12]
 800705e:	2b04      	cmp	r3, #4
 8007060:	bf08      	it	eq
 8007062:	ebc2 0501 	rsbeq	r5, r2, r1
 8007066:	6923      	ldr	r3, [r4, #16]
 8007068:	68a2      	ldr	r2, [r4, #8]
 800706a:	bf0c      	ite	eq
 800706c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007070:	2500      	movne	r5, #0
 8007072:	429a      	cmp	r2, r3
 8007074:	bfc4      	itt	gt
 8007076:	ebc3 0302 	rsbgt	r3, r3, r2
 800707a:	18ed      	addgt	r5, r5, r3
 800707c:	f04f 0900 	mov.w	r9, #0
 8007080:	45a9      	cmp	r9, r5
 8007082:	da0a      	bge.n	800709a <_printf_common+0xde>
 8007084:	4630      	mov	r0, r6
 8007086:	4639      	mov	r1, r7
 8007088:	f104 021a 	add.w	r2, r4, #26
 800708c:	2301      	movs	r3, #1
 800708e:	47c0      	blx	r8
 8007090:	3001      	adds	r0, #1
 8007092:	d0d4      	beq.n	800703e <_printf_common+0x82>
 8007094:	f109 0901 	add.w	r9, r9, #1
 8007098:	e7f2      	b.n	8007080 <_printf_common+0xc4>
 800709a:	2000      	movs	r0, #0
 800709c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080070a0 <_printf_i>:
 80070a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070a4:	7e0e      	ldrb	r6, [r1, #24]
 80070a6:	4680      	mov	r8, r0
 80070a8:	2e6e      	cmp	r6, #110	; 0x6e
 80070aa:	460c      	mov	r4, r1
 80070ac:	4691      	mov	r9, r2
 80070ae:	469a      	mov	sl, r3
 80070b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070b2:	f101 0043 	add.w	r0, r1, #67	; 0x43
 80070b6:	f000 80a5 	beq.w	8007204 <_printf_i+0x164>
 80070ba:	d811      	bhi.n	80070e0 <_printf_i+0x40>
 80070bc:	2e63      	cmp	r6, #99	; 0x63
 80070be:	d022      	beq.n	8007106 <_printf_i+0x66>
 80070c0:	d809      	bhi.n	80070d6 <_printf_i+0x36>
 80070c2:	2e00      	cmp	r6, #0
 80070c4:	f000 80af 	beq.w	8007226 <_printf_i+0x186>
 80070c8:	2e58      	cmp	r6, #88	; 0x58
 80070ca:	f040 80bf 	bne.w	800724c <_printf_i+0x1ac>
 80070ce:	f881 6045 	strb.w	r6, [r1, #69]	; 0x45
 80070d2:	4a7b      	ldr	r2, [pc, #492]	; (80072c0 <_printf_i+0x220>)
 80070d4:	e04f      	b.n	8007176 <_printf_i+0xd6>
 80070d6:	2e64      	cmp	r6, #100	; 0x64
 80070d8:	d01e      	beq.n	8007118 <_printf_i+0x78>
 80070da:	2e69      	cmp	r6, #105	; 0x69
 80070dc:	d01c      	beq.n	8007118 <_printf_i+0x78>
 80070de:	e0b5      	b.n	800724c <_printf_i+0x1ac>
 80070e0:	2e73      	cmp	r6, #115	; 0x73
 80070e2:	f000 80a4 	beq.w	800722e <_printf_i+0x18e>
 80070e6:	d809      	bhi.n	80070fc <_printf_i+0x5c>
 80070e8:	2e6f      	cmp	r6, #111	; 0x6f
 80070ea:	d02b      	beq.n	8007144 <_printf_i+0xa4>
 80070ec:	2e70      	cmp	r6, #112	; 0x70
 80070ee:	f040 80ad 	bne.w	800724c <_printf_i+0x1ac>
 80070f2:	680b      	ldr	r3, [r1, #0]
 80070f4:	f043 0320 	orr.w	r3, r3, #32
 80070f8:	600b      	str	r3, [r1, #0]
 80070fa:	e038      	b.n	800716e <_printf_i+0xce>
 80070fc:	2e75      	cmp	r6, #117	; 0x75
 80070fe:	d021      	beq.n	8007144 <_printf_i+0xa4>
 8007100:	2e78      	cmp	r6, #120	; 0x78
 8007102:	d034      	beq.n	800716e <_printf_i+0xce>
 8007104:	e0a2      	b.n	800724c <_printf_i+0x1ac>
 8007106:	682b      	ldr	r3, [r5, #0]
 8007108:	f101 0742 	add.w	r7, r1, #66	; 0x42
 800710c:	1d1a      	adds	r2, r3, #4
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	602a      	str	r2, [r5, #0]
 8007112:	f881 3042 	strb.w	r3, [r1, #66]	; 0x42
 8007116:	e09d      	b.n	8007254 <_printf_i+0x1b4>
 8007118:	6822      	ldr	r2, [r4, #0]
 800711a:	682b      	ldr	r3, [r5, #0]
 800711c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007120:	d003      	beq.n	800712a <_printf_i+0x8a>
 8007122:	1d1a      	adds	r2, r3, #4
 8007124:	602a      	str	r2, [r5, #0]
 8007126:	681d      	ldr	r5, [r3, #0]
 8007128:	e005      	b.n	8007136 <_printf_i+0x96>
 800712a:	0651      	lsls	r1, r2, #25
 800712c:	d5f9      	bpl.n	8007122 <_printf_i+0x82>
 800712e:	1d1a      	adds	r2, r3, #4
 8007130:	602a      	str	r2, [r5, #0]
 8007132:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007136:	2d00      	cmp	r5, #0
 8007138:	da39      	bge.n	80071ae <_printf_i+0x10e>
 800713a:	232d      	movs	r3, #45	; 0x2d
 800713c:	426d      	negs	r5, r5
 800713e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007142:	e034      	b.n	80071ae <_printf_i+0x10e>
 8007144:	6822      	ldr	r2, [r4, #0]
 8007146:	682b      	ldr	r3, [r5, #0]
 8007148:	f012 0f80 	tst.w	r2, #128	; 0x80
 800714c:	d003      	beq.n	8007156 <_printf_i+0xb6>
 800714e:	1d1a      	adds	r2, r3, #4
 8007150:	602a      	str	r2, [r5, #0]
 8007152:	681d      	ldr	r5, [r3, #0]
 8007154:	e004      	b.n	8007160 <_printf_i+0xc0>
 8007156:	0652      	lsls	r2, r2, #25
 8007158:	d5f9      	bpl.n	800714e <_printf_i+0xae>
 800715a:	1d1a      	adds	r2, r3, #4
 800715c:	602a      	str	r2, [r5, #0]
 800715e:	881d      	ldrh	r5, [r3, #0]
 8007160:	7e23      	ldrb	r3, [r4, #24]
 8007162:	4a57      	ldr	r2, [pc, #348]	; (80072c0 <_printf_i+0x220>)
 8007164:	2b6f      	cmp	r3, #111	; 0x6f
 8007166:	bf14      	ite	ne
 8007168:	230a      	movne	r3, #10
 800716a:	2308      	moveq	r3, #8
 800716c:	e01b      	b.n	80071a6 <_printf_i+0x106>
 800716e:	2378      	movs	r3, #120	; 0x78
 8007170:	4a54      	ldr	r2, [pc, #336]	; (80072c4 <_printf_i+0x224>)
 8007172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	6829      	ldr	r1, [r5, #0]
 800717a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800717e:	f101 0604 	add.w	r6, r1, #4
 8007182:	602e      	str	r6, [r5, #0]
 8007184:	d001      	beq.n	800718a <_printf_i+0xea>
 8007186:	680d      	ldr	r5, [r1, #0]
 8007188:	e002      	b.n	8007190 <_printf_i+0xf0>
 800718a:	065f      	lsls	r7, r3, #25
 800718c:	d5fb      	bpl.n	8007186 <_printf_i+0xe6>
 800718e:	880d      	ldrh	r5, [r1, #0]
 8007190:	07de      	lsls	r6, r3, #31
 8007192:	bf44      	itt	mi
 8007194:	f043 0320 	orrmi.w	r3, r3, #32
 8007198:	6023      	strmi	r3, [r4, #0]
 800719a:	b91d      	cbnz	r5, 80071a4 <_printf_i+0x104>
 800719c:	6823      	ldr	r3, [r4, #0]
 800719e:	f023 0320 	bic.w	r3, r3, #32
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	2310      	movs	r3, #16
 80071a6:	2100      	movs	r1, #0
 80071a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071ac:	e001      	b.n	80071b2 <_printf_i+0x112>
 80071ae:	4a44      	ldr	r2, [pc, #272]	; (80072c0 <_printf_i+0x220>)
 80071b0:	230a      	movs	r3, #10
 80071b2:	6866      	ldr	r6, [r4, #4]
 80071b4:	2e00      	cmp	r6, #0
 80071b6:	60a6      	str	r6, [r4, #8]
 80071b8:	db03      	blt.n	80071c2 <_printf_i+0x122>
 80071ba:	6821      	ldr	r1, [r4, #0]
 80071bc:	f021 0104 	bic.w	r1, r1, #4
 80071c0:	6021      	str	r1, [r4, #0]
 80071c2:	b905      	cbnz	r5, 80071c6 <_printf_i+0x126>
 80071c4:	b16e      	cbz	r6, 80071e2 <_printf_i+0x142>
 80071c6:	f104 0142 	add.w	r1, r4, #66	; 0x42
 80071ca:	fbb5 f6f3 	udiv	r6, r5, r3
 80071ce:	fb03 5516 	mls	r5, r3, r6, r5
 80071d2:	5d55      	ldrb	r5, [r2, r5]
 80071d4:	460f      	mov	r7, r1
 80071d6:	f801 5901 	strb.w	r5, [r1], #-1
 80071da:	4635      	mov	r5, r6
 80071dc:	2e00      	cmp	r6, #0
 80071de:	d1f4      	bne.n	80071ca <_printf_i+0x12a>
 80071e0:	e000      	b.n	80071e4 <_printf_i+0x144>
 80071e2:	4607      	mov	r7, r0
 80071e4:	2b08      	cmp	r3, #8
 80071e6:	d10a      	bne.n	80071fe <_printf_i+0x15e>
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	07dd      	lsls	r5, r3, #31
 80071ec:	d507      	bpl.n	80071fe <_printf_i+0x15e>
 80071ee:	6862      	ldr	r2, [r4, #4]
 80071f0:	6923      	ldr	r3, [r4, #16]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	dc03      	bgt.n	80071fe <_printf_i+0x15e>
 80071f6:	2330      	movs	r3, #48	; 0x30
 80071f8:	f807 3c01 	strb.w	r3, [r7, #-1]
 80071fc:	3f01      	subs	r7, #1
 80071fe:	1bc0      	subs	r0, r0, r7
 8007200:	6120      	str	r0, [r4, #16]
 8007202:	e02c      	b.n	800725e <_printf_i+0x1be>
 8007204:	6809      	ldr	r1, [r1, #0]
 8007206:	682b      	ldr	r3, [r5, #0]
 8007208:	f011 0f80 	tst.w	r1, #128	; 0x80
 800720c:	6962      	ldr	r2, [r4, #20]
 800720e:	d004      	beq.n	800721a <_printf_i+0x17a>
 8007210:	1d19      	adds	r1, r3, #4
 8007212:	6029      	str	r1, [r5, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	e005      	b.n	8007226 <_printf_i+0x186>
 800721a:	0649      	lsls	r1, r1, #25
 800721c:	d5f8      	bpl.n	8007210 <_printf_i+0x170>
 800721e:	1d19      	adds	r1, r3, #4
 8007220:	6029      	str	r1, [r5, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	801a      	strh	r2, [r3, #0]
 8007226:	2300      	movs	r3, #0
 8007228:	6123      	str	r3, [r4, #16]
 800722a:	4607      	mov	r7, r0
 800722c:	e017      	b.n	800725e <_printf_i+0x1be>
 800722e:	682b      	ldr	r3, [r5, #0]
 8007230:	1d1a      	adds	r2, r3, #4
 8007232:	602a      	str	r2, [r5, #0]
 8007234:	681f      	ldr	r7, [r3, #0]
 8007236:	4638      	mov	r0, r7
 8007238:	f7ff fd70 	bl	8006d1c <strlen>
 800723c:	6863      	ldr	r3, [r4, #4]
 800723e:	6120      	str	r0, [r4, #16]
 8007240:	4298      	cmp	r0, r3
 8007242:	bf88      	it	hi
 8007244:	6123      	strhi	r3, [r4, #16]
 8007246:	6923      	ldr	r3, [r4, #16]
 8007248:	6063      	str	r3, [r4, #4]
 800724a:	e005      	b.n	8007258 <_printf_i+0x1b8>
 800724c:	f104 0742 	add.w	r7, r4, #66	; 0x42
 8007250:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
 8007254:	2301      	movs	r3, #1
 8007256:	6123      	str	r3, [r4, #16]
 8007258:	2300      	movs	r3, #0
 800725a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800725e:	f8cd a000 	str.w	sl, [sp]
 8007262:	4640      	mov	r0, r8
 8007264:	4621      	mov	r1, r4
 8007266:	aa03      	add	r2, sp, #12
 8007268:	464b      	mov	r3, r9
 800726a:	f7ff fea7 	bl	8006fbc <_printf_common>
 800726e:	3001      	adds	r0, #1
 8007270:	d102      	bne.n	8007278 <_printf_i+0x1d8>
 8007272:	f04f 30ff 	mov.w	r0, #4294967295
 8007276:	e01f      	b.n	80072b8 <_printf_i+0x218>
 8007278:	4640      	mov	r0, r8
 800727a:	4649      	mov	r1, r9
 800727c:	463a      	mov	r2, r7
 800727e:	6923      	ldr	r3, [r4, #16]
 8007280:	47d0      	blx	sl
 8007282:	3001      	adds	r0, #1
 8007284:	d0f5      	beq.n	8007272 <_printf_i+0x1d2>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	079b      	lsls	r3, r3, #30
 800728a:	d405      	bmi.n	8007298 <_printf_i+0x1f8>
 800728c:	68e0      	ldr	r0, [r4, #12]
 800728e:	9b03      	ldr	r3, [sp, #12]
 8007290:	4298      	cmp	r0, r3
 8007292:	bfb8      	it	lt
 8007294:	4618      	movlt	r0, r3
 8007296:	e00f      	b.n	80072b8 <_printf_i+0x218>
 8007298:	2500      	movs	r5, #0
 800729a:	68e2      	ldr	r2, [r4, #12]
 800729c:	9b03      	ldr	r3, [sp, #12]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	429d      	cmp	r5, r3
 80072a2:	daf3      	bge.n	800728c <_printf_i+0x1ec>
 80072a4:	4640      	mov	r0, r8
 80072a6:	4649      	mov	r1, r9
 80072a8:	f104 0219 	add.w	r2, r4, #25
 80072ac:	2301      	movs	r3, #1
 80072ae:	47d0      	blx	sl
 80072b0:	3001      	adds	r0, #1
 80072b2:	d0de      	beq.n	8007272 <_printf_i+0x1d2>
 80072b4:	3501      	adds	r5, #1
 80072b6:	e7f0      	b.n	800729a <_printf_i+0x1fa>
 80072b8:	b004      	add	sp, #16
 80072ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072be:	bf00      	nop
 80072c0:	08007c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, ip, sp, lr}
 80072c4:	08007c49 	stmdaeq	r0, {r0, r3, r6, sl, fp, ip, sp, lr}

080072c8 <_vsiprintf_r>:
 80072c8:	b510      	push	{r4, lr}
 80072ca:	b09a      	sub	sp, #104	; 0x68
 80072cc:	9100      	str	r1, [sp, #0]
 80072ce:	9104      	str	r1, [sp, #16]
 80072d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072d4:	9102      	str	r1, [sp, #8]
 80072d6:	9105      	str	r1, [sp, #20]
 80072d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80072dc:	f8ad 100e 	strh.w	r1, [sp, #14]
 80072e0:	f44f 7402 	mov.w	r4, #520	; 0x208
 80072e4:	4669      	mov	r1, sp
 80072e6:	f8ad 400c 	strh.w	r4, [sp, #12]
 80072ea:	f7ff fd7b 	bl	8006de4 <_svfiprintf_r>
 80072ee:	9b00      	ldr	r3, [sp, #0]
 80072f0:	2200      	movs	r2, #0
 80072f2:	701a      	strb	r2, [r3, #0]
 80072f4:	b01a      	add	sp, #104	; 0x68
 80072f6:	bd10      	pop	{r4, pc}

080072f8 <vsiprintf>:
 80072f8:	b530      	push	{r4, r5, lr}
 80072fa:	4613      	mov	r3, r2
 80072fc:	4a04      	ldr	r2, [pc, #16]	; (8007310 <vsiprintf+0x18>)
 80072fe:	4605      	mov	r5, r0
 8007300:	460c      	mov	r4, r1
 8007302:	6810      	ldr	r0, [r2, #0]
 8007304:	4629      	mov	r1, r5
 8007306:	4622      	mov	r2, r4
 8007308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800730c:	f7ff bfdc 	b.w	80072c8 <_vsiprintf_r>
 8007310:	20000484 	andcs	r0, r0, r4, lsl #9

08007314 <memchr>:
 8007314:	b510      	push	{r4, lr}
 8007316:	b2c9      	uxtb	r1, r1
 8007318:	4402      	add	r2, r0
 800731a:	4290      	cmp	r0, r2
 800731c:	4603      	mov	r3, r0
 800731e:	d005      	beq.n	800732c <memchr+0x18>
 8007320:	781c      	ldrb	r4, [r3, #0]
 8007322:	3001      	adds	r0, #1
 8007324:	428c      	cmp	r4, r1
 8007326:	d1f8      	bne.n	800731a <memchr+0x6>
 8007328:	4618      	mov	r0, r3
 800732a:	bd10      	pop	{r4, pc}
 800732c:	2000      	movs	r0, #0
 800732e:	bd10      	pop	{r4, pc}

08007330 <memmove>:
 8007330:	4281      	cmp	r1, r0
 8007332:	b570      	push	{r4, r5, r6, lr}
 8007334:	d301      	bcc.n	800733a <memmove+0xa>
 8007336:	2300      	movs	r3, #0
 8007338:	e00e      	b.n	8007358 <memmove+0x28>
 800733a:	188c      	adds	r4, r1, r2
 800733c:	42a0      	cmp	r0, r4
 800733e:	d2fa      	bcs.n	8007336 <memmove+0x6>
 8007340:	1885      	adds	r5, r0, r2
 8007342:	4613      	mov	r3, r2
 8007344:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007348:	d305      	bcc.n	8007356 <memmove+0x26>
 800734a:	4251      	negs	r1, r2
 800734c:	1866      	adds	r6, r4, r1
 800734e:	5cf6      	ldrb	r6, [r6, r3]
 8007350:	4429      	add	r1, r5
 8007352:	54ce      	strb	r6, [r1, r3]
 8007354:	e7f6      	b.n	8007344 <memmove+0x14>
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	4293      	cmp	r3, r2
 800735a:	d003      	beq.n	8007364 <memmove+0x34>
 800735c:	5ccc      	ldrb	r4, [r1, r3]
 800735e:	54c4      	strb	r4, [r0, r3]
 8007360:	3301      	adds	r3, #1
 8007362:	e7f9      	b.n	8007358 <memmove+0x28>
 8007364:	bd70      	pop	{r4, r5, r6, pc}
	...

08007368 <_free_r>:
 8007368:	b530      	push	{r4, r5, lr}
 800736a:	2900      	cmp	r1, #0
 800736c:	d03c      	beq.n	80073e8 <_free_r+0x80>
 800736e:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8007372:	1f0b      	subs	r3, r1, #4
 8007374:	491d      	ldr	r1, [pc, #116]	; (80073ec <_free_r+0x84>)
 8007376:	2a00      	cmp	r2, #0
 8007378:	bfb8      	it	lt
 800737a:	189b      	addlt	r3, r3, r2
 800737c:	680a      	ldr	r2, [r1, #0]
 800737e:	460c      	mov	r4, r1
 8007380:	b912      	cbnz	r2, 8007388 <_free_r+0x20>
 8007382:	605a      	str	r2, [r3, #4]
 8007384:	600b      	str	r3, [r1, #0]
 8007386:	bd30      	pop	{r4, r5, pc}
 8007388:	4293      	cmp	r3, r2
 800738a:	d20d      	bcs.n	80073a8 <_free_r+0x40>
 800738c:	6819      	ldr	r1, [r3, #0]
 800738e:	1858      	adds	r0, r3, r1
 8007390:	4290      	cmp	r0, r2
 8007392:	d103      	bne.n	800739c <_free_r+0x34>
 8007394:	585a      	ldr	r2, [r3, r1]
 8007396:	4411      	add	r1, r2
 8007398:	6842      	ldr	r2, [r0, #4]
 800739a:	6019      	str	r1, [r3, #0]
 800739c:	605a      	str	r2, [r3, #4]
 800739e:	6023      	str	r3, [r4, #0]
 80073a0:	bd30      	pop	{r4, r5, pc}
 80073a2:	4299      	cmp	r1, r3
 80073a4:	d803      	bhi.n	80073ae <_free_r+0x46>
 80073a6:	460a      	mov	r2, r1
 80073a8:	6851      	ldr	r1, [r2, #4]
 80073aa:	2900      	cmp	r1, #0
 80073ac:	d1f9      	bne.n	80073a2 <_free_r+0x3a>
 80073ae:	6814      	ldr	r4, [r2, #0]
 80073b0:	1915      	adds	r5, r2, r4
 80073b2:	429d      	cmp	r5, r3
 80073b4:	d10a      	bne.n	80073cc <_free_r+0x64>
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4423      	add	r3, r4
 80073ba:	18d0      	adds	r0, r2, r3
 80073bc:	4288      	cmp	r0, r1
 80073be:	6013      	str	r3, [r2, #0]
 80073c0:	d112      	bne.n	80073e8 <_free_r+0x80>
 80073c2:	6808      	ldr	r0, [r1, #0]
 80073c4:	4403      	add	r3, r0
 80073c6:	6013      	str	r3, [r2, #0]
 80073c8:	684b      	ldr	r3, [r1, #4]
 80073ca:	e00c      	b.n	80073e6 <_free_r+0x7e>
 80073cc:	d902      	bls.n	80073d4 <_free_r+0x6c>
 80073ce:	230c      	movs	r3, #12
 80073d0:	6003      	str	r3, [r0, #0]
 80073d2:	bd30      	pop	{r4, r5, pc}
 80073d4:	6818      	ldr	r0, [r3, #0]
 80073d6:	181c      	adds	r4, r3, r0
 80073d8:	428c      	cmp	r4, r1
 80073da:	d103      	bne.n	80073e4 <_free_r+0x7c>
 80073dc:	680c      	ldr	r4, [r1, #0]
 80073de:	6849      	ldr	r1, [r1, #4]
 80073e0:	4420      	add	r0, r4
 80073e2:	6018      	str	r0, [r3, #0]
 80073e4:	6059      	str	r1, [r3, #4]
 80073e6:	6053      	str	r3, [r2, #4]
 80073e8:	bd30      	pop	{r4, r5, pc}
 80073ea:	bf00      	nop
 80073ec:	20000dd4 	ldrdcs	r0, [r0], -r4

080073f0 <_malloc_r>:
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	1ccd      	adds	r5, r1, #3
 80073f4:	f025 0503 	bic.w	r5, r5, #3
 80073f8:	3508      	adds	r5, #8
 80073fa:	2d0c      	cmp	r5, #12
 80073fc:	bf38      	it	cc
 80073fe:	250c      	movcc	r5, #12
 8007400:	2d00      	cmp	r5, #0
 8007402:	4606      	mov	r6, r0
 8007404:	db3f      	blt.n	8007486 <_malloc_r+0x96>
 8007406:	428d      	cmp	r5, r1
 8007408:	d33d      	bcc.n	8007486 <_malloc_r+0x96>
 800740a:	4b21      	ldr	r3, [pc, #132]	; (8007490 <_malloc_r+0xa0>)
 800740c:	681c      	ldr	r4, [r3, #0]
 800740e:	4618      	mov	r0, r3
 8007410:	4621      	mov	r1, r4
 8007412:	b1a1      	cbz	r1, 800743e <_malloc_r+0x4e>
 8007414:	680b      	ldr	r3, [r1, #0]
 8007416:	1b5b      	subs	r3, r3, r5
 8007418:	d40e      	bmi.n	8007438 <_malloc_r+0x48>
 800741a:	2b0b      	cmp	r3, #11
 800741c:	d903      	bls.n	8007426 <_malloc_r+0x36>
 800741e:	600b      	str	r3, [r1, #0]
 8007420:	18cc      	adds	r4, r1, r3
 8007422:	50cd      	str	r5, [r1, r3]
 8007424:	e01f      	b.n	8007466 <_malloc_r+0x76>
 8007426:	428c      	cmp	r4, r1
 8007428:	d102      	bne.n	8007430 <_malloc_r+0x40>
 800742a:	6862      	ldr	r2, [r4, #4]
 800742c:	6002      	str	r2, [r0, #0]
 800742e:	e01a      	b.n	8007466 <_malloc_r+0x76>
 8007430:	684b      	ldr	r3, [r1, #4]
 8007432:	6063      	str	r3, [r4, #4]
 8007434:	460c      	mov	r4, r1
 8007436:	e016      	b.n	8007466 <_malloc_r+0x76>
 8007438:	460c      	mov	r4, r1
 800743a:	6849      	ldr	r1, [r1, #4]
 800743c:	e7e9      	b.n	8007412 <_malloc_r+0x22>
 800743e:	4c15      	ldr	r4, [pc, #84]	; (8007494 <_malloc_r+0xa4>)
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	b91b      	cbnz	r3, 800744c <_malloc_r+0x5c>
 8007444:	4630      	mov	r0, r6
 8007446:	f000 f84d 	bl	80074e4 <_sbrk_r>
 800744a:	6020      	str	r0, [r4, #0]
 800744c:	4629      	mov	r1, r5
 800744e:	4630      	mov	r0, r6
 8007450:	f000 f848 	bl	80074e4 <_sbrk_r>
 8007454:	1c43      	adds	r3, r0, #1
 8007456:	4601      	mov	r1, r0
 8007458:	d015      	beq.n	8007486 <_malloc_r+0x96>
 800745a:	1cc4      	adds	r4, r0, #3
 800745c:	f024 0403 	bic.w	r4, r4, #3
 8007460:	4284      	cmp	r4, r0
 8007462:	d10a      	bne.n	800747a <_malloc_r+0x8a>
 8007464:	6025      	str	r5, [r4, #0]
 8007466:	f104 000b 	add.w	r0, r4, #11
 800746a:	1d23      	adds	r3, r4, #4
 800746c:	f020 0007 	bic.w	r0, r0, #7
 8007470:	1ac3      	subs	r3, r0, r3
 8007472:	d00b      	beq.n	800748c <_malloc_r+0x9c>
 8007474:	425a      	negs	r2, r3
 8007476:	50e2      	str	r2, [r4, r3]
 8007478:	bd70      	pop	{r4, r5, r6, pc}
 800747a:	4630      	mov	r0, r6
 800747c:	1a61      	subs	r1, r4, r1
 800747e:	f000 f831 	bl	80074e4 <_sbrk_r>
 8007482:	3001      	adds	r0, #1
 8007484:	d1ee      	bne.n	8007464 <_malloc_r+0x74>
 8007486:	230c      	movs	r3, #12
 8007488:	6033      	str	r3, [r6, #0]
 800748a:	2000      	movs	r0, #0
 800748c:	bd70      	pop	{r4, r5, r6, pc}
 800748e:	bf00      	nop
 8007490:	20000dd4 	ldrdcs	r0, [r0], -r4
 8007494:	20000dd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08007498 <_realloc_r>:
 8007498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749a:	4606      	mov	r6, r0
 800749c:	4614      	mov	r4, r2
 800749e:	460d      	mov	r5, r1
 80074a0:	b921      	cbnz	r1, 80074ac <_realloc_r+0x14>
 80074a2:	4611      	mov	r1, r2
 80074a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80074a8:	f7ff bfa2 	b.w	80073f0 <_malloc_r>
 80074ac:	b91a      	cbnz	r2, 80074b6 <_realloc_r+0x1e>
 80074ae:	f7ff ff5b 	bl	8007368 <_free_r>
 80074b2:	4620      	mov	r0, r4
 80074b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b6:	f000 f825 	bl	8007504 <_malloc_usable_size_r>
 80074ba:	42a0      	cmp	r0, r4
 80074bc:	d20e      	bcs.n	80074dc <_realloc_r+0x44>
 80074be:	4630      	mov	r0, r6
 80074c0:	4621      	mov	r1, r4
 80074c2:	f7ff ff95 	bl	80073f0 <_malloc_r>
 80074c6:	4607      	mov	r7, r0
 80074c8:	b150      	cbz	r0, 80074e0 <_realloc_r+0x48>
 80074ca:	4629      	mov	r1, r5
 80074cc:	4622      	mov	r2, r4
 80074ce:	f7ff fbef 	bl	8006cb0 <memcpy>
 80074d2:	4630      	mov	r0, r6
 80074d4:	4629      	mov	r1, r5
 80074d6:	f7ff ff47 	bl	8007368 <_free_r>
 80074da:	e001      	b.n	80074e0 <_realloc_r+0x48>
 80074dc:	4628      	mov	r0, r5
 80074de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074e0:	4638      	mov	r0, r7
 80074e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080074e4 <_sbrk_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4c06      	ldr	r4, [pc, #24]	; (8007500 <_sbrk_r+0x1c>)
 80074e8:	2300      	movs	r3, #0
 80074ea:	4605      	mov	r5, r0
 80074ec:	4608      	mov	r0, r1
 80074ee:	6023      	str	r3, [r4, #0]
 80074f0:	f000 f812 	bl	8007518 <_sbrk>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	d102      	bne.n	80074fe <_sbrk_r+0x1a>
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	b103      	cbz	r3, 80074fe <_sbrk_r+0x1a>
 80074fc:	602b      	str	r3, [r5, #0]
 80074fe:	bd38      	pop	{r3, r4, r5, pc}
 8007500:	200005b0 			; <UNDEFINED> instruction: 0x200005b0

08007504 <_malloc_usable_size_r>:
 8007504:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8007508:	2800      	cmp	r0, #0
 800750a:	da02      	bge.n	8007512 <_malloc_usable_size_r+0xe>
 800750c:	3904      	subs	r1, #4
 800750e:	580b      	ldr	r3, [r1, r0]
 8007510:	4418      	add	r0, r3
 8007512:	3804      	subs	r0, #4
 8007514:	4770      	bx	lr
	...

08007518 <_sbrk>:
 8007518:	4a09      	ldr	r2, [pc, #36]	; (8007540 <_sbrk+0x28>)
 800751a:	6813      	ldr	r3, [r2, #0]
 800751c:	b163      	cbz	r3, 8007538 <_sbrk+0x20>
 800751e:	4418      	add	r0, r3
 8007520:	4669      	mov	r1, sp
 8007522:	4288      	cmp	r0, r1
 8007524:	d802      	bhi.n	800752c <_sbrk+0x14>
 8007526:	6010      	str	r0, [r2, #0]
 8007528:	4618      	mov	r0, r3
 800752a:	4770      	bx	lr
 800752c:	4b05      	ldr	r3, [pc, #20]	; (8007544 <_sbrk+0x2c>)
 800752e:	220c      	movs	r2, #12
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	f04f 30ff 	mov.w	r0, #4294967295
 8007536:	4770      	bx	lr
 8007538:	4b03      	ldr	r3, [pc, #12]	; (8007548 <_sbrk+0x30>)
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	e7ef      	b.n	800751e <_sbrk+0x6>
 800753e:	bf00      	nop
 8007540:	20000dd8 	ldrdcs	r0, [r0], -r8
 8007544:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
 8007548:	200005b4 			; <UNDEFINED> instruction: 0x200005b4
 800754c:	58255825 	stmdapl	r5!, {r0, r2, r5, fp, ip, lr}
 8007550:	58255825 	stmdapl	r5!, {r0, r2, r5, fp, ip, lr}
 8007554:	45425b00 	strbmi	r5, [r2, #-2816]	; 0xb00
 8007558:	5f4e4947 	svcpl	0x004e4947
 800755c:	5f425550 	svcpl	0x00425550
 8007560:	41544144 	cmpmi	r4, r4, asr #2
 8007564:	45425b5d 	strbmi	r5, [r2, #-2909]	; 0xb5d
 8007568:	5f4e4947 	svcpl	0x004e4947
 800756c:	5d425550 	cfstr64pl	mvdx5, [r2, #-320]	; 0xfffffec0
 8007570:	455b7325 	ldrbmi	r7, [fp, #-805]	; 0x325
 8007574:	505f444e 	subspl	r4, pc, lr, asr #8
 8007578:	5b5d4255 	blpl	9757ed4 <_etext+0x1750278>
 800757c:	5f444e45 	svcpl	0x00444e45
 8007580:	5f425550 	svcpl	0x00425550
 8007584:	41544144 	cmpmi	r4, r4, asr #2
 8007588:	425b005d 	subsmi	r0, fp, #93	; 0x5d
 800758c:	4e494745 	cdpmi	7, 4, cr4, cr9, cr5, {2}
 8007590:	4749535f 	smlsldmi	r5, r9, pc, r3	; <UNPREDICTABLE>
 8007594:	5554414e 	ldrbpl	r4, [r4, #-334]	; 0x14e
 8007598:	445f4552 	ldrbmi	r4, [pc], #-1362	; 80075a0 <_sbrk+0x88>
 800759c:	5d415441 	cfstrdpl	mvd5, [r1, #-260]	; 0xfffffefc
 80075a0:	4745425b 	smlsldmi	r4, r5, fp, r2
 80075a4:	535f4e49 	cmppl	pc, #1168	; 0x490
 80075a8:	414e4749 	cmpmi	lr, r9, asr #14
 80075ac:	45525554 	ldrbmi	r5, [r2, #-1364]	; 0x554
 80075b0:	5b73255d 	blpl	9cd0b2c <_etext+0x1cc8ed0>
 80075b4:	5f444e45 	svcpl	0x00444e45
 80075b8:	4e474953 	mcrmi	9, 2, r4, cr7, cr3, {2}
 80075bc:	52555441 	subspl	r5, r5, #1090519040	; 0x41000000
 80075c0:	455b5d45 	ldrbmi	r5, [fp, #-3397]	; 0xd45
 80075c4:	535f444e 	cmppl	pc, #1308622848	; 0x4e000000
 80075c8:	414e4749 	cmpmi	lr, r9, asr #14
 80075cc:	45525554 	ldrbmi	r5, [r2, #-1364]	; 0x554
 80075d0:	5441445f 	strbpl	r4, [r1], #-1119	; 0x45f
 80075d4:	0a005d41 	beq	801eae0 <_etext+0x16e84>
 80075d8:	746f6f42 	strbtvc	r6, [pc], #-3906	; 80075e0 <_sbrk+0xc8>
 80075dc:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
 80075e0:	69207265 	stmdbvs	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
 80075e4:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
 80075e8:	000a2e2e 	andeq	r2, sl, lr, lsr #28
 80075ec:	63656863 	cmnvs	r5, #6488064	; 0x630000
 80075f0:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
 80075f4:	61686320 	cmnvs	r8, r0, lsr #6
 80075f8:	2e2e6e69 	cdpcs	14, 2, cr6, cr14, cr9, {3}
 80075fc:	69000a2e 	stmdbvs	r0, {r1, r2, r3, r5, r9, fp}
 8007600:	6567616d 	strbvs	r6, [r7, #-365]!	; 0x16d
 8007604:	65686320 	strbvs	r6, [r8, #-800]!	; 0x320
 8007608:	72206b63 	eorvc	r6, r0, #101376	; 0x18c00
 800760c:	203a7465 	eorscs	r7, sl, r5, ror #8
 8007610:	000a5825 	andeq	r5, sl, r5, lsr #16
 8007614:	746f6f42 	strbtvc	r6, [pc], #-3906	; 800761c <_sbrk+0x104>
 8007618:	0a4b4f20 	beq	92db2a0 <_etext+0x12d3644>
 800761c:	69460a00 	stmdbvs	r6, {r9, fp}^
 8007620:	61776d72 	cmnvs	r7, r2, ror sp
 8007624:	6d206572 	cfstr32vs	mvfx6, [r0, #-456]!	; 0xfffffe38
 8007628:	69737369 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
 800762c:	2e2e676e 	cdpcs	7, 2, cr6, cr14, cr14, {3}
 8007630:	6177202e 	cmnvs	r7, lr, lsr #32
 8007634:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
 8007638:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
 800763c:	55464420 	strbpl	r4, [r6, #-1056]	; 0x420
 8007640:	530a000a 	movwpl	r0, #40970	; 0xa00a
 8007644:	616e6769 	cmnvs	lr, r9, ror #14
 8007648:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
 800764c:	766e7520 	strbtvc	r7, [lr], -r0, lsr #10
 8007650:	66697265 	strbtvs	r7, [r9], -r5, ror #4
 8007654:	2e646569 	cdpcs	5, 6, cr6, cr4, cr9, {3}
 8007658:	77202e2e 	strvc	r2, [r0, -lr, lsr #28]!
 800765c:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
 8007660:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 8007664:	4644206e 	strbmi	r2, [r4], -lr, rrx
 8007668:	0a000a55 	beq	8009fc4 <_etext+0x2368>
 800766c:	68736148 	ldmdavs	r3!, {r3, r6, r8, sp, lr}^
 8007670:	6c616320 	stclvs	3, cr6, [r1], #-128	; 0xffffff80
 8007674:	616c7563 	cmnvs	ip, r3, ror #10
 8007678:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
 800767c:	69616620 	stmdbvs	r1!, {r5, r9, sl, sp, lr}^
 8007680:	2e64656c 	cdpcs	5, 6, cr6, cr4, cr12, {3}
 8007684:	77202e2e 	strvc	r2, [r0, -lr, lsr #28]!
 8007688:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
 800768c:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 8007690:	4644206e 	strbmi	r2, [r4], -lr, rrx
 8007694:	44000a55 	strmi	r0, [r0], #-2645	; 0xa55
 8007698:	66205546 	strtvs	r5, [r0], -r6, asr #10
 800769c:	73696e69 	cmnvc	r9, #1680	; 0x690
 80076a0:	20646568 	rsbcs	r6, r4, r8, ror #10
 80076a4:	6f6c7075 	svcvs	0x006c7075
 80076a8:	000a6461 	andeq	r6, sl, r1, ror #8
 80076ac:	706d754a 	rsbvc	r7, sp, sl, asr #10
 80076b0:	20676e69 	rsbcs	r6, r7, r9, ror #28
 80076b4:	4f206f74 	svcmi	0x00206f74
 80076b8:	000a2e53 	andeq	r2, sl, r3, asr lr
 80076bc:	73257c20 	teqvc	r5, #32, 24	; 0x2000
 80076c0:	25000a7c 	strcs	r0, [r0, #-2684]	; 0xa7c
 80076c4:	20583230 	subscs	r3, r8, r0, lsr r2
 80076c8:	20202000 	eorcs	r2, r0, r0
 80076cc:	32302500 	eorscc	r2, r0, #0, 10
 80076d0:	70550078 	subsvc	r0, r5, r8, ror r0
 80076d4:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
 80076d8:	73206465 	teqvc	r0, #1694498816	; 0x65000000
 80076dc:	616e6769 	cmnvs	lr, r9, ror #14
 80076e0:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
 80076e4:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 80076e8:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
 80076ec:	000a2164 	andeq	r2, sl, r4, ror #2
 80076f0:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
 80076f4:	6e752065 	cdpvs	0, 7, cr2, cr5, cr5, {3}
 80076f8:	69726576 	ldmdbvs	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
 80076fc:	64656966 	strbtvs	r6, [r5], #-2406	; 0x966
 8007700:	0a2e2e2e 	beq	8b92fc0 <_etext+0xb8b364>
 8007704:	00000000 	andeq	r0, r0, r0

08007708 <ed25519_k>:
 8007708:	26b2f159 	ssatcs	pc, #19, r9, asr #2	; <UNPREDICTABLE>
 800770c:	ebd69b94 	bl	75ae564 <__Stack_Size+0x75add64>
 8007710:	8283b156 	addhi	fp, r3, #-2147483627	; 0x80000015
 8007714:	00e0149a 	smlaleq	r1, r0, sl, r4
 8007718:	eef3d130 	mrc	1, 7, sp, cr3, cr0, {1}
 800771c:	198e80f2 	stmibne	lr, {r1, r4, r5, r6, r7, pc}
 8007720:	56dffce7 	ldrbpl	pc, [pc], r7, ror #25	; <UNPREDICTABLE>
 8007724:	2406d9dc 	strcs	sp, [r6], #-2524	; 0x9dc

08007728 <ed25519_neutral>:
	...
 8007748:	00000001 	andeq	r0, r0, r1
	...
 8007788:	00000001 	andeq	r0, r0, r1
	...

080077a8 <ed25519_base>:
 80077a8:	8f25d51a 	svchi	0x0025d51a
 80077ac:	c9562d60 	ldmdbgt	r6, {r5, r6, r8, sl, fp, sp}^
 80077b0:	9525a7b2 	strls	sl, [r5, #-1970]!	; 0x7b2
 80077b4:	692cc760 	stmdbvs	ip!, {r5, r6, r8, r9, sl, lr, pc}
 80077b8:	fdd6dc5c 	ldc2l	12, cr13, [r6, #368]	; 0x170
 80077bc:	c0a4e231 	adcgt	lr, r4, r1, lsr r2
 80077c0:	cd6e53fe 	stclgt	3, cr5, [lr, #-1016]!	; 0xfffffc08
 80077c4:	216936d3 	ldrdcs	r3, [r9, #-99]!	; 0xffffff9d
 80077c8:	66666658 			; <UNDEFINED> instruction: 0x66666658
 80077cc:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 80077d0:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 80077d4:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 80077d8:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 80077dc:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 80077e0:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 80077e4:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 80077e8:	a5b7dda3 	ldrge	sp, [r7, #3491]!	; 0xda3
 80077ec:	6dde8ab3 	vldrvs	s17, [lr, #716]	; 0x2cc
 80077f0:	775152f5 	smmlsrvc	r1, r5, r2, r5
 80077f4:	20f09f80 	rscscs	r9, r0, r0, lsl #31
 80077f8:	64abe37d 	strtvs	lr, [fp], #893	; 0x37d
 80077fc:	66ea4e8e 	strbtvs	r4, [sl], lr, lsl #29
 8007800:	d78b7665 	strle	r7, [fp, r5, ror #12]
 8007804:	67875f0f 	strvs	r5, [r7, pc, lsl #30]
 8007808:	00000001 	andeq	r0, r0, r1
	...

08007828 <ed25519_d>:
 8007828:	135978a3 	cmpne	r9, #10682368	; 0xa30000
 800782c:	75eb4dca 	strbvc	r4, [fp, #3530]!	; 0xdca
 8007830:	4141d8ab 	smlaltbmi	sp, r1, fp, r8
 8007834:	00700a4d 	rsbseq	r0, r0, sp, asr #20
 8007838:	7779e898 			; <UNDEFINED> instruction: 0x7779e898
 800783c:	8cc74079 	stclhi	0, cr4, [r7], {121}	; 0x79
 8007840:	2b6ffe73 	blcs	9c07214 <_etext+0x1bff5b8>
 8007844:	52036cee 	andpl	r6, r3, #60928	; 0xee00

08007848 <ed25519_order>:
 8007848:	5cf5d3ed 	ldclpl	3, cr13, [r5], #948	; 0x3b4
 800784c:	5812631a 	ldmdapl	r2, {r1, r3, r4, r8, r9, sp, lr}
 8007850:	a2f79cd6 	rscsge	r9, r7, #54784	; 0xd600
 8007854:	14def9de 	ldrbne	pc, [lr], #2526	; 0x9de	; <UNPREDICTABLE>
	...
 8007864:	10000000 	andne	r0, r0, r0

08007868 <f25519_one>:
 8007868:	00000001 	andeq	r0, r0, r1
	...

08007888 <sha512_initial_state>:
 8007888:	f3bcc908 	vtbl.8	d12, {d12-d13}, d8
 800788c:	6a09e667 	bvs	8281230 <_etext+0x2795d4>
 8007890:	84caa73b 	strbhi	sl, [sl], #1851	; 0x73b
 8007894:	bb67ae85 	bllt	99f32b0 <_etext+0x19eb654>
 8007898:	fe94f82b 	cdp2	8, 9, cr15, cr4, cr11, {1}
 800789c:	3c6ef372 	stclcc	3, cr15, [lr], #-456	; 0xfffffe38
 80078a0:	5f1d36f1 	svcpl	0x001d36f1
 80078a4:	a54ff53a 	strbge	pc, [pc, #-1338]	; 8007372 <_free_r+0xa>	; <UNPREDICTABLE>
 80078a8:	ade682d1 	sfmge	f0, 3, [r6, #836]!	; 0x344
 80078ac:	510e527f 	tstpl	lr, pc, ror r2
 80078b0:	2b3e6c1f 	blcs	8fa2934 <_etext+0xf9acd8>
 80078b4:	9b05688c 	blls	8161aec <_etext+0x159e90>
 80078b8:	fb41bd6b 	blx	9076e6e <_etext+0x106f212>
 80078bc:	1f83d9ab 	svcne	0x0083d9ab
 80078c0:	137e2179 	cmnne	lr, #1073741854	; 0x4000001e
 80078c4:	5be0cd19 	blpl	783ad30 <__Stack_Size+0x783a530>

080078c8 <round_k>:
 80078c8:	d728ae22 	strle	sl, [r8, -r2, lsr #28]!
 80078cc:	428a2f98 	addmi	r2, sl, #152, 30	; 0x260
 80078d0:	23ef65cd 	mvncs	r6, #859832320	; 0x33400000
 80078d4:	71374491 			; <UNDEFINED> instruction: 0x71374491
 80078d8:	ec4d3b2f 	mcrr	11, 2, r3, sp, cr15
 80078dc:	b5c0fbcf 	strblt	pc, [r0, #3023]	; 0xbcf	; <UNPREDICTABLE>
 80078e0:	8189dbbc 			; <UNDEFINED> instruction: 0x8189dbbc
 80078e4:	e9b5dba5 	ldmib	r5!, {r0, r2, r5, r7, r8, r9, fp, ip, lr, pc}
 80078e8:	f348b538 	vqrshl.u8	d27, d24, d8
 80078ec:	3956c25b 	ldmdbcc	r6, {r0, r1, r3, r4, r6, r9, lr, pc}^
 80078f0:	b605d019 			; <UNDEFINED> instruction: 0xb605d019
 80078f4:	59f111f1 	ldmibpl	r1!, {r0, r4, r5, r6, r7, r8, ip}^
 80078f8:	af194f9b 	svcge	0x00194f9b
 80078fc:	923f82a4 	eorsls	r8, pc, #164, 4	; 0x4000000a
 8007900:	da6d8118 	ble	9b67d68 <_etext+0x1b6010c>
 8007904:	ab1c5ed5 	blge	871f460 <_etext+0x717804>
 8007908:	a3030242 	movwge	r0, #12866	; 0x3242
 800790c:	d807aa98 	stmdale	r7, {r3, r4, r7, r9, fp, sp, pc}
 8007910:	45706fbe 	ldrbmi	r6, [r0, #-4030]!	; 0xfbe
 8007914:	12835b01 	addne	r5, r3, #1024	; 0x400
 8007918:	4ee4b28c 	cdpmi	2, 14, cr11, cr4, cr12, {4}
 800791c:	243185be 	ldrtcs	r8, [r1], #-1470	; 0x5be
 8007920:	d5ffb4e2 	ldrble	fp, [pc, #1250]!	; 8007e0a <_etext+0x1ae>
 8007924:	550c7dc3 	strpl	r7, [ip, #-3523]	; 0xdc3
 8007928:	f27b896f 	vmla.i<illegal width 64>	q12, <illegal reg q5.5>, <illegal reg q15.5>
 800792c:	72be5d74 	adcsvc	r5, lr, #116, 26	; 0x1d00
 8007930:	3b1696b1 	blcc	85ad3fc <_etext+0x5a57a0>
 8007934:	80deb1fe 	ldrshhi	fp, [lr], #30
 8007938:	25c71235 	strbcs	r1, [r7, #565]	; 0x235
 800793c:	9bdc06a7 	blls	77093e0 <__Stack_Size+0x7708be0>
 8007940:	cf692694 	svcgt	0x00692694
 8007944:	c19bf174 	orrsgt	pc, fp, r4, ror r1	; <UNPREDICTABLE>
 8007948:	9ef14ad2 	mrcls	10, 7, r4, cr1, cr2, {6}
 800794c:	e49b69c1 	ldr	r6, [fp], #2497	; 0x9c1
 8007950:	384f25e3 	stmdacc	pc, {r0, r1, r5, r6, r7, r8, sl, sp}^	; <UNPREDICTABLE>
 8007954:	efbe4786 	svc	0x00be4786
 8007958:	8b8cd5b5 	blhi	633d034 <__Stack_Size+0x633c834>
 800795c:	0fc19dc6 	svceq	0x00c19dc6
 8007960:	77ac9c65 	strvc	r9, [ip, r5, ror #24]!
 8007964:	240ca1cc 	strcs	sl, [ip], #-460	; 0x1cc
 8007968:	592b0275 	stmdbpl	fp!, {r0, r2, r4, r5, r6, r9}
 800796c:	2de92c6f 	stclcs	12, cr2, [r9, #444]!	; 0x1bc
 8007970:	6ea6e483 	cdpvs	4, 10, cr14, cr6, cr3, {4}
 8007974:	4a7484aa 	bmi	9d28c24 <_etext+0x1d20fc8>
 8007978:	bd41fbd4 	vstrlt	d31, [r1, #-848]	; 0xfffffcb0
 800797c:	5cb0a9dc 	ldcpl	9, cr10, [r0], #880	; 0x370
 8007980:	831153b5 	tsthi	r1, #-738197502	; 0xd4000002
 8007984:	76f988da 	usatvc	r8, #25, sl, asr #17
 8007988:	ee66dfab 	cdp	15, 6, cr13, cr6, cr11, {5}
 800798c:	983e5152 	ldmdals	lr!, {r1, r4, r6, r8, ip, lr}
 8007990:	2db43210 	lfmcs	f3, 4, [r4, #64]!	; 0x40
 8007994:	a831c66d 	ldmdage	r1!, {r0, r2, r3, r5, r6, r9, sl, lr, pc}
 8007998:	98fb213f 	ldmls	fp!, {r0, r1, r2, r3, r4, r5, r8, sp}^
 800799c:	b00327c8 	andlt	r2, r3, r8, asr #15
 80079a0:	beef0ee4 	cdplt	14, 14, cr0, cr15, cr4, {7}
 80079a4:	bf597fc7 	svclt	0x00597fc7
 80079a8:	3da88fc2 	stccc	15, cr8, [r8, #776]!	; 0x308
 80079ac:	c6e00bf3 			; <UNDEFINED> instruction: 0xc6e00bf3
 80079b0:	930aa725 	movwls	sl, #42789	; 0xa725
 80079b4:	d5a79147 	strle	r9, [r7, #327]!	; 0x147
 80079b8:	e003826f 	and	r8, r3, pc, ror #4
 80079bc:	06ca6351 			; <UNDEFINED> instruction: 0x06ca6351
 80079c0:	0a0e6e70 	beq	83a3388 <_etext+0x39b72c>
 80079c4:	14292967 	strtne	r2, [r9], #-2407	; 0x967
 80079c8:	46d22ffc 			; <UNDEFINED> instruction: 0x46d22ffc
 80079cc:	27b70a85 	ldrcs	r0, [r7, r5, lsl #21]!
 80079d0:	5c26c926 	stcpl	9, cr12, [r6], #-152	; 0xffffff68
 80079d4:	2e1b2138 	mrccs	1, 0, r2, cr11, cr8, {1}
 80079d8:	5ac42aed 	bpl	7112594 <__Stack_Size+0x7111d94>
 80079dc:	4d2c6dfc 	stcmi	13, cr6, [ip, #-1008]!	; 0xfffffc10
 80079e0:	9d95b3df 	ldcls	3, cr11, [r5, #892]	; 0x37c
 80079e4:	53380d13 	teqpl	r8, #1216	; 0x4c0
 80079e8:	8baf63de 	blhi	6be0968 <__Stack_Size+0x6be0168>
 80079ec:	650a7354 	strvs	r7, [sl, #-852]	; 0x354
 80079f0:	3c77b2a8 	lfmcc	f3, 3, [r7], #-672	; 0xfffffd60
 80079f4:	766a0abb 			; <UNDEFINED> instruction: 0x766a0abb
 80079f8:	47edaee6 	strbmi	sl, [sp, r6, ror #29]!
 80079fc:	81c2c92e 	bichi	ip, r2, lr, lsr #18
 8007a00:	1482353b 	strne	r3, [r2], #1339	; 0x53b
 8007a04:	92722c85 	rsbsls	r2, r2, #34048	; 0x8500
 8007a08:	4cf10364 	ldclmi	3, cr0, [r1], #400	; 0x190
 8007a0c:	a2bfe8a1 	adcsge	lr, pc, #10551296	; 0xa10000
 8007a10:	bc423001 	mcrrlt	0, 0, r3, r2, cr1
 8007a14:	a81a664b 	ldmdage	sl, {r0, r1, r3, r6, r9, sl, sp, lr}
 8007a18:	d0f89791 	smlalsle	r9, r8, r1, r7
 8007a1c:	c24b8b70 	subgt	r8, fp, #112, 22	; 0x1c000
 8007a20:	0654be30 			; <UNDEFINED> instruction: 0x0654be30
 8007a24:	c76c51a3 	strbgt	r5, [ip, -r3, lsr #3]!
 8007a28:	d6ef5218 	usatle	r5, #15, r8, lsl #4
 8007a2c:	d192e819 	orrsle	lr, r2, r9, lsl r8
 8007a30:	5565a910 	strbpl	sl, [r5, #-2320]!	; 0x910
 8007a34:	d6990624 	ldrle	r0, [r9], r4, lsr #12
 8007a38:	5771202a 	ldrbpl	r2, [r1, -sl, lsr #32]!
 8007a3c:	f40e3585 	vst3.32	{d3,d5,d7}, [lr], r5
 8007a40:	32bbd1b8 	adcscc	sp, fp, #184, 2	; 0x2e
 8007a44:	106aa070 	rsbne	sl, sl, r0, ror r0
 8007a48:	b8d2d0c8 	ldmlt	r2, {r3, r6, r7, ip, lr, pc}^
 8007a4c:	19a4c116 	stmibne	r4!, {r1, r2, r4, r8, lr, pc}
 8007a50:	5141ab53 	cmppl	r1, r3, asr fp
 8007a54:	1e376c08 	cdpne	12, 3, cr6, cr7, cr8, {0}
 8007a58:	df8eeb99 	svcle	0x008eeb99
 8007a5c:	2748774c 	strbcs	r7, [r8, -ip, asr #14]
 8007a60:	e19b48a8 	orrs	r4, fp, r8, lsr #17
 8007a64:	34b0bcb5 	ldrtcc	fp, [r0], #3253	; 0xcb5
 8007a68:	c5c95a63 	strbgt	r5, [r9, #2659]	; 0xa63
 8007a6c:	391c0cb3 	ldmdbcc	ip, {r0, r1, r4, r5, r7, sl, fp}
 8007a70:	e3418acb 	movt	r8, #6859	; 0x1acb
 8007a74:	4ed8aa4a 	vfnmami.f32	s21, s16, s20
 8007a78:	7763e373 			; <UNDEFINED> instruction: 0x7763e373
 8007a7c:	5b9cca4f 	blpl	673a3c0 <__Stack_Size+0x6739bc0>
 8007a80:	d6b2b8a3 	ldrtle	fp, [r2], r3, lsr #17
 8007a84:	682e6ff3 	stmdavs	lr!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 8007a88:	5defb2fc 	sfmpl	f3, 3, [pc, #1008]!	; 8007e80 <_etext+0x224>
 8007a8c:	748f82ee 	strvc	r8, [pc], #750	; 8007a94 <round_k+0x1cc>
 8007a90:	43172f60 	tstmi	r7, #96, 30	; 0x180
 8007a94:	78a5636f 	stmiavc	r5!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}
 8007a98:	a1f0ab72 	mvnsge	sl, r2, ror fp
 8007a9c:	84c87814 	strbhi	r7, [r8], #2068	; 0x814
 8007aa0:	1a6439ec 	bne	9916258 <_etext+0x190e5fc>
 8007aa4:	8cc70208 	sfmhi	f0, 2, [r7], {8}
 8007aa8:	23631e28 	cmncs	r3, #40, 28	; 0x280
 8007aac:	90befffa 	ldrshtls	pc, [lr], sl	; <UNPREDICTABLE>
 8007ab0:	de82bde9 	cdple	13, 8, cr11, cr2, cr9, {7}
 8007ab4:	a4506ceb 	ldrbge	r6, [r0], #-3307	; 0xceb
 8007ab8:	b2c67915 	sbclt	r7, r6, #344064	; 0x54000
 8007abc:	bef9a3f7 	mrclt	3, 7, sl, cr9, cr7, {7}
 8007ac0:	e372532b 	cmn	r2, #-1409286144	; 0xac000000
 8007ac4:	c67178f2 			; <UNDEFINED> instruction: 0xc67178f2
 8007ac8:	ea26619c 	b	89a0140 <_etext+0x9984e4>
 8007acc:	ca273ece 	bgt	89d760c <_etext+0x9cf9b0>
 8007ad0:	21c0c207 	biccs	ip, r0, r7, lsl #4
 8007ad4:	d186b8c7 	orrle	fp, r6, r7, asr #17
 8007ad8:	cde0eb1e 	stclgt	11, cr14, [r0, #120]!	; 0x78
 8007adc:	eada7dd6 	b	76a723c <__Stack_Size+0x76a6a3c>
 8007ae0:	ee6ed178 	mcr	1, 3, sp, cr14, cr8, {3}
 8007ae4:	f57d4f7f 			; <UNDEFINED> instruction: 0xf57d4f7f
 8007ae8:	72176fba 	andsvc	r6, r7, #744	; 0x2e8
 8007aec:	06f067aa 	ldrbteq	r6, [r0], sl, lsr #15
 8007af0:	a2c898a6 	sbcge	r9, r8, #10878976	; 0xa60000
 8007af4:	0a637dc5 	beq	98e7210 <_etext+0x18df5b4>
 8007af8:	bef90dae 	cdplt	13, 15, cr0, cr9, cr14, {5}
 8007afc:	113f9804 	teqne	pc, r4, lsl #16
 8007b00:	131c471b 	tstne	ip, #7077888	; 0x6c0000
 8007b04:	1b710b35 	blne	9c4a7e0 <_etext+0x1c42b84>
 8007b08:	23047d84 	movwcs	r7, #19844	; 0x4d84
 8007b0c:	28db77f5 	ldmcs	fp, {r0, r2, r4, r5, r6, r7, r8, r9, sl, ip, sp, lr}^
 8007b10:	40c72493 	smullmi	r2, r7, r3, r4
 8007b14:	32caab7b 	sbccc	sl, sl, #125952	; 0x1ec00
 8007b18:	15c9bebc 	strbne	fp, [r9, #3772]	; 0xebc
 8007b1c:	3c9ebe0a 	ldccc	14, cr11, [lr], {10}
 8007b20:	9c100d4c 	ldcls	13, cr0, [r0], {76}	; 0x4c
 8007b24:	431d67c4 	tstmi	sp, #196, 14	; 0x3100000
 8007b28:	cb3e42b6 	blgt	8f98608 <_etext+0xf909ac>
 8007b2c:	4cc5d4be 	cfstrdmi	mvd13, [r5], {190}	; 0xbe
 8007b30:	fc657e2a 	stc2l	14, cr7, [r5], #-168	; 0xffffff58
 8007b34:	597f299c 	ldmdbpl	pc!, {r2, r3, r4, r7, r8, fp, sp}^	; <UNPREDICTABLE>
 8007b38:	3ad6faec 	bcc	75c66f0 <__Stack_Size+0x75c5ef0>
 8007b3c:	5fcb6fab 	svcpl	0x00cb6fab
 8007b40:	4a475817 	bmi	91ddba4 <_etext+0x11d5f48>
 8007b44:	6c44198c 	mcrrvs	9, 8, r1, r4, cr12
 8007b48:	44434241 	strbmi	r4, [r3], #-577	; 0x241
 8007b4c:	48474645 	stmdami	r7, {r0, r2, r6, r9, sl, lr}^
 8007b50:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 8007b54:	504f4e4d 	subpl	r4, pc, sp, asr #28
 8007b58:	54535251 	ldrbpl	r5, [r3], #-593	; 0x251
 8007b5c:	58575655 	ldmdapl	r7, {r0, r2, r4, r6, r9, sl, ip, lr}^
 8007b60:	62615a59 	rsbvs	r5, r1, #364544	; 0x59000
 8007b64:	66656463 	strbtvs	r6, [r5], -r3, ror #8
 8007b68:	6a696867 	bvs	9a61d0c <_etext+0x1a5a0b0>
 8007b6c:	6e6d6c6b 	cdpvs	12, 6, cr6, cr13, cr11, {3}
 8007b70:	7271706f 	rsbsvc	r7, r1, #111	; 0x6f
 8007b74:	76757473 			; <UNDEFINED> instruction: 0x76757473
 8007b78:	7a797877 	bvc	9e65d5c <_etext+0x1e5e100>
 8007b7c:	33323130 	teqcc	r2, #48, 2
 8007b80:	37363534 			; <UNDEFINED> instruction: 0x37363534
 8007b84:	2f2b3938 	svccs	0x002b3938
 8007b88:	64616200 	strbtvs	r6, [r1], #-512	; 0x200
 8007b8c:	67616d20 	strbvs	r6, [r1, -r0, lsr #26]!
 8007b90:	30206369 	eorcc	r6, r0, r9, ror #6
 8007b94:	38302578 	ldmdacc	r0!, {r3, r4, r5, r6, r8, sl, sp}
 8007b98:	78652078 	stmdavc	r5!, {r3, r4, r5, r6, sp}^
 8007b9c:	74636570 	strbtvc	r6, [r3], #-1392	; 0x570
 8007ba0:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8007ba4:	30257830 	eorcc	r7, r5, r0, lsr r8
 8007ba8:	000a7838 	andeq	r7, sl, r8, lsr r8
 8007bac:	20646162 	rsbcs	r6, r4, r2, ror #2
 8007bb0:	6967616d 	stmdbvs	r7!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 8007bb4:	78302063 	ldmdavc	r0!, {r0, r1, r5, r6, sp}
 8007bb8:	78383025 	ldmdavc	r8!, {r0, r2, r5, ip, sp}
 8007bbc:	70786520 	rsbsvc	r6, r8, r0, lsr #10
 8007bc0:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 8007bc4:	3020676e 	eorcc	r6, r0, lr, ror #14
 8007bc8:	0a582578 	beq	96111b0 <_etext+0x1609554>
 8007bcc:	74616400 	strbtvc	r6, [r1], #-1024	; 0x400
 8007bd0:	7a695361 	bvc	9a5c95c <_etext+0x1a54d00>
 8007bd4:	30203a65 	eorcc	r3, r0, r5, ror #20
 8007bd8:	0a582578 	beq	96111c0 <_etext+0x1609564>
 8007bdc:	61745300 	cmnvs	r4, r0, lsl #6
 8007be0:	203a7472 	eorscs	r7, sl, r2, ror r4
 8007be4:	460a5825 	strmi	r5, [sl], -r5, lsr #16
 8007be8:	73696e69 	cmnvc	r9, #1680	; 0x690
 8007bec:	25203a68 	strcs	r3, [r0, #-2664]!	; 0xa68
 8007bf0:	45000a58 	strmi	r0, [r0, #-2648]	; 0xa58
 8007bf4:	6465646e 	strbtvs	r6, [r5], #-1134	; 0x46e
 8007bf8:	3a746120 	bcc	9d20080 <_etext+0x1d18424>
 8007bfc:	0a582520 	beq	9611084 <_etext+0x1609428>
 8007c00:	6c614300 	stclvs	3, cr4, [r1], #-0
 8007c04:	616c7563 	cmnvs	ip, r3, ror #10
 8007c08:	20646574 	rsbcs	r6, r4, r4, ror r5
 8007c0c:	68736168 	ldmdavs	r3!, {r3, r5, r6, r8, sp, lr}^
 8007c10:	20736920 	rsbscs	r6, r3, r0, lsr #18
 8007c14:	626f7270 	rsbvs	r7, pc, #112, 4
 8007c18:	796c6261 	stmdbvc	ip!, {r0, r5, r6, r9, sp, lr}^
 8007c1c:	6f727720 	svcvs	0x00727720
 8007c20:	2e2e676e 	cdpcs	7, 2, cr6, cr14, cr14, {3}
 8007c24:	23000a2e 	movwcs	r0, #2606	; 0xa2e
 8007c28:	202b302d 	eorcs	r3, fp, sp, lsr #32
 8007c2c:	4c6c6800 	stclmi	8, cr6, [ip], #-0
 8007c30:	67666500 	strbvs	r6, [r6, -r0, lsl #10]!
 8007c34:	00474645 	subeq	r4, r7, r5, asr #12
 8007c38:	33323130 	teqcc	r2, #48, 2
 8007c3c:	37363534 			; <UNDEFINED> instruction: 0x37363534
 8007c40:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
 8007c44:	46454443 	strbmi	r4, [r5], -r3, asr #8
 8007c48:	32313000 	eorscc	r3, r1, #0
 8007c4c:	36353433 			; <UNDEFINED> instruction: 0x36353433
 8007c50:	61393837 	teqvs	r9, r7, lsr r8
 8007c54:	65646362 	strbvs	r6, [r4, #-866]!	; 0x362
 8007c58:	00430066 	subeq	r0, r3, r6, rrx

Disassembly of section .data:

20000000 <_sdata>:
20000000:	00000000 	andeq	r0, r0, r0
20000004:	04030201 	streq	r0, [r3], #-513	; 0x201
20000008:	04030201 	streq	r0, [r3], #-513	; 0x201
2000000c:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20000010 <ADCPrescTable>:
20000010:	08060402 	stmdaeq	r6, {r1, sl}

20000014 <Device_Property>:
20000014:	08000f1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, sl, fp}
20000018:	08000bdd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, r9, fp}
2000001c:	08000b9b 	stmdaeq	r0, {r0, r1, r3, r4, r7, r8, r9, fp}
20000020:	08000b9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, fp}
20000024:	08000c85 	stmdaeq	r0, {r0, r2, r7, sl, fp}
20000028:	08000d29 	stmdaeq	r0, {r0, r3, r5, r8, sl, fp}
2000002c:	08000b9f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, r8, r9, fp}
20000030:	08000ce5 	stmdaeq	r0, {r0, r2, r5, r6, r7, sl, fp}
20000034:	08000cf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, sl, fp}
20000038:	08000cfd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, sl, fp}
2000003c:	08000d1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, sl, fp}
20000040:	00000000 	andeq	r0, r0, r0
20000044:	00000040 	andeq	r0, r0, r0, asr #32

20000048 <pEpInt_IN>:
20000048:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
2000004c:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000050:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000054:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000058:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
2000005c:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000060:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}

20000064 <pEpInt_OUT>:
20000064:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000068:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
2000006c:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000070:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000074:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000078:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
2000007c:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}

20000080 <User_Standard_Requests>:
20000080:	08000ba9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, fp}
20000084:	08000bad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, fp}
20000088:	08000bc5 	stmdaeq	r0, {r0, r2, r6, r7, r8, r9, fp}
2000008c:	08000bc7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r8, r9, fp}
20000090:	08000bc9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, fp}
20000094:	08000bcb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r8, r9, fp}
20000098:	08000bcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, fp}
2000009c:	08000bcf 	stmdaeq	r0, {r0, r1, r2, r3, r6, r7, r8, r9, fp}
200000a0:	08000bd1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, fp}

200000a4 <Device_Table>:
200000a4:	00000101 	andeq	r0, r0, r1, lsl #2

200000a8 <usbStringDescriptor>:
200000a8:	200000fc 	strdcs	r0, [r0], -ip
200000ac:	00000004 	andeq	r0, r0, r4
200000b0:	20000146 	andcs	r0, r0, r6, asr #2
200000b4:	00000012 	andeq	r0, r0, r2, lsl r0
200000b8:	20000160 	andcs	r0, r0, r0, ror #2
200000bc:	00000014 	andeq	r0, r0, r4, lsl r0
200000c0:	2000012d 	andcs	r0, r0, sp, lsr #2
200000c4:	00000010 	andeq	r0, r0, r0, lsl r0
200000c8:	20000174 	andcs	r0, r0, r4, ror r1
200000cc:	00000078 	andeq	r0, r0, r8, ror r0
200000d0:	200001ec 	andcs	r0, r0, ip, ror #3
200000d4:	00000064 	andeq	r0, r0, r4, rrx
200000d8:	20000250 	andcs	r0, r0, r0, asr r2
200000dc:	00000064 	andeq	r0, r0, r4, rrx

200000e0 <u8_usbDeviceDescriptorDFU>:
200000e0:	01000112 	tsteq	r0, r2, lsl r1
200000e4:	40000000 	andmi	r0, r0, r0
200000e8:	00031eaf 	andeq	r1, r3, pc, lsr #29
200000ec:	02010201 	andeq	r0, r1, #268435456	; 0x10000000
200000f0:	00000103 	andeq	r0, r0, r3, lsl #2

200000f4 <usbFunctionalDescriptor>:
200000f4:	2000013d 	andcs	r0, r0, sp, lsr r1
200000f8:	00000009 	andeq	r0, r0, r9

200000fc <u8_usbStringLangId>:
200000fc:	04090304 	streq	r0, [r9], #-772	; 0x304

20000100 <u8_usbConfigDescriptorDFU>:
20000100:	002d0209 	eoreq	r0, sp, r9, lsl #4
20000104:	80000101 	andhi	r0, r0, r1, lsl #2
20000108:	00040932 	andeq	r0, r4, r2, lsr r9
2000010c:	01fe0000 	mvnseq	r0, r0
20000110:	04090402 	streq	r0, [r9], #-1026	; 0x402
20000114:	fe000100 	cdp2	1, 0, cr0, cr0, cr0, {0}
20000118:	09050201 	stmdbeq	r5, {r0, r9}
2000011c:	00020004 	andeq	r0, r2, r4
20000120:	060201fe 			; <UNDEFINED> instruction: 0x060201fe
20000124:	ff032109 			; <UNDEFINED> instruction: 0xff032109
20000128:	10080000 	andne	r0, r8, r0
2000012c:	44031001 	strmi	r1, [r3], #-1

2000012d <u8_usbStringSerial>:
2000012d:	00440310 	subeq	r0, r4, r0, lsl r3
20000131:	00560045 	subseq	r0, r6, r5, asr #32
20000135:	00300020 	eorseq	r0, r0, r0, lsr #32
20000139:	00310030 	eorseq	r0, r1, r0, lsr r0

2000013d <u8_usbFunctionalDescriptor>:
2000013d:	ff032109 			; <UNDEFINED> instruction: 0xff032109
20000141:	10080000 	andne	r0, r8, r0
20000145:	4c031201 	sfmmi	f1, 4, [r3], {1}

20000146 <u8_usbStringVendor>:
20000146:	004c0312 	subeq	r0, ip, r2, lsl r3
2000014a:	00610065 	rsbeq	r0, r1, r5, rrx
2000014e:	004c0066 	subeq	r0, ip, r6, rrx
20000152:	00620061 	rsbeq	r0, r2, r1, rrx
20000156:	00e00073 	rsceq	r0, r0, r3, ror r0

20000158 <usbDeviceDescriptorDFU>:
20000158:	200000e0 	andcs	r0, r0, r0, ror #1
2000015c:	00000012 	andeq	r0, r0, r2, lsl r0

20000160 <u8_usbStringProduct>:
20000160:	004d0314 	subeq	r0, sp, r4, lsl r3
20000164:	00700061 	rsbseq	r0, r0, r1, rrx
20000168:	0065006c 	rsbeq	r0, r5, ip, rrx
2000016c:	00300020 	eorseq	r0, r0, r0, lsr #32
20000170:	00330030 	eorseq	r0, r3, r0, lsr r0

20000174 <u8_usbStringAlt0>:
20000174:	00450378 	subeq	r0, r5, r8, ror r3
20000178:	0063006e 	rsbeq	r0, r3, lr, rrx
2000017c:	0061006c 	rsbeq	r0, r1, ip, rrx
20000180:	00650076 	rsbeq	r0, r5, r6, ror r0
20000184:	00440020 	subeq	r0, r4, r0, lsr #32
20000188:	00550046 	subseq	r0, r5, r6, asr #32
2000018c:	00420020 	subeq	r0, r2, r0, lsr #32
20000190:	006f006f 	rsbeq	r0, pc, pc, rrx
20000194:	006c0074 	rsbeq	r0, ip, r4, ror r0
20000198:	0061006f 	rsbeq	r0, r1, pc, rrx
2000019c:	00650064 	rsbeq	r0, r5, r4, rrx
200001a0:	00200072 	eoreq	r0, r0, r2, ror r0
200001a4:	00450020 	subeq	r0, r5, r0, lsr #32
200001a8:	00520052 	subseq	r0, r2, r2, asr r0
200001ac:	0052004f 	subseq	r0, r2, pc, asr #32
200001b0:	0020002e 	eoreq	r0, r0, lr, lsr #32
200001b4:	00700055 	rsbseq	r0, r0, r5, asr r0
200001b8:	006f006c 	rsbeq	r0, pc, ip, rrx
200001bc:	00640061 	rsbeq	r0, r4, r1, rrx
200001c0:	00740020 	rsbseq	r0, r4, r0, lsr #32
200001c4:	0020006f 	eoreq	r0, r0, pc, rrx
200001c8:	00410052 	subeq	r0, r1, r2, asr r0
200001cc:	0020004d 	eoreq	r0, r0, sp, asr #32
200001d0:	006f006e 	rsbeq	r0, pc, lr, rrx
200001d4:	00200074 	eoreq	r0, r0, r4, ror r0
200001d8:	00750073 	rsbseq	r0, r5, r3, ror r0
200001dc:	00700070 	rsbseq	r0, r0, r0, ror r0
200001e0:	0072006f 	rsbseq	r0, r2, pc, rrx
200001e4:	00650074 	rsbeq	r0, r5, r4, ror r0
200001e8:	002e0064 	eoreq	r0, lr, r4, rrx

200001ec <u8_usbStringAlt1>:
200001ec:	00450364 	subeq	r0, r5, r4, ror #6
200001f0:	0063006e 	rsbeq	r0, r3, lr, rrx
200001f4:	0061006c 	rsbeq	r0, r1, ip, rrx
200001f8:	00650076 	rsbeq	r0, r5, r6, ror r0
200001fc:	00440020 	subeq	r0, r4, r0, lsr #32
20000200:	00550046 	subseq	r0, r5, r6, asr #32
20000204:	00420020 	subeq	r0, r2, r0, lsr #32
20000208:	006f006f 	rsbeq	r0, pc, pc, rrx
2000020c:	006c0074 	rsbeq	r0, ip, r4, ror r0
20000210:	0061006f 	rsbeq	r0, r1, pc, rrx
20000214:	00650064 	rsbeq	r0, r5, r4, rrx
20000218:	00200072 	eoreq	r0, r0, r2, ror r0
2000021c:	00550020 	subseq	r0, r5, r0, lsr #32
20000220:	006c0070 	rsbeq	r0, ip, r0, ror r0
20000224:	0061006f 	rsbeq	r0, r1, pc, rrx
20000228:	00200064 	eoreq	r0, r0, r4, rrx
2000022c:	006f0074 	rsbeq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
20000230:	00460020 	subeq	r0, r6, r0, lsr #32
20000234:	0061006c 	rsbeq	r0, r1, ip, rrx
20000238:	00680073 	rsbeq	r0, r8, r3, ror r0
2000023c:	00300020 	eorseq	r0, r0, r0, lsr #32
20000240:	00380078 	eorseq	r0, r8, r8, ror r0
20000244:	00300030 	eorseq	r0, r0, r0, lsr r0
20000248:	00300037 	eorseq	r0, r0, r7, lsr r0
2000024c:	00300030 	eorseq	r0, r0, r0, lsr r0

20000250 <u8_usbStringAlt2>:
20000250:	00450364 	subeq	r0, r5, r4, ror #6
20000254:	0063006e 	rsbeq	r0, r3, lr, rrx
20000258:	0061006c 	rsbeq	r0, r1, ip, rrx
2000025c:	00650076 	rsbeq	r0, r5, r6, ror r0
20000260:	00440020 	subeq	r0, r4, r0, lsr #32
20000264:	00550046 	subseq	r0, r5, r6, asr #32
20000268:	00420020 	subeq	r0, r2, r0, lsr #32
2000026c:	006f006f 	rsbeq	r0, pc, pc, rrx
20000270:	006c0074 	rsbeq	r0, ip, r4, ror r0
20000274:	0061006f 	rsbeq	r0, r1, pc, rrx
20000278:	00650064 	rsbeq	r0, r5, r4, rrx
2000027c:	00200072 	eoreq	r0, r0, r2, ror r0
20000280:	00550020 	subseq	r0, r5, r0, lsr #32
20000284:	006c0070 	rsbeq	r0, ip, r0, ror r0
20000288:	0061006f 	rsbeq	r0, r1, pc, rrx
2000028c:	00200064 	eoreq	r0, r0, r4, rrx
20000290:	006f0074 	rsbeq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
20000294:	00460020 	subeq	r0, r6, r0, lsr #32
20000298:	0061006c 	rsbeq	r0, r1, ip, rrx
2000029c:	00680073 	rsbeq	r0, r8, r3, ror r0
200002a0:	00300020 	eorseq	r0, r0, r0, lsr #32
200002a4:	00380078 	eorseq	r0, r8, r8, ror r0
200002a8:	00300030 	eorseq	r0, r0, r0, lsr r0
200002ac:	00300032 	eorseq	r0, r0, r2, lsr r0
200002b0:	00300030 	eorseq	r0, r0, r0, lsr r0

200002b4 <usbConfigDescriptorDFU>:
200002b4:	20000100 	andcs	r0, r0, r0, lsl #2
200002b8:	0000002d 	andeq	r0, r0, sp, lsr #32

200002bc <userAppEnd>:
200002bc:	20005000 	andcs	r5, r0, r0

200002c0 <userAppAddr>:
200002c0:	20000c00 	andcs	r0, r0, r0, lsl #24

200002c4 <sha256_padding>:
200002c4:	00000080 	andeq	r0, r0, r0, lsl #1
	...

20000304 <k>:
20000304:	428a2f98 	addmi	r2, sl, #152, 30	; 0x260
20000308:	71374491 			; <UNDEFINED> instruction: 0x71374491
2000030c:	b5c0fbcf 	strblt	pc, [r0, #3023]	; 0xbcf	; <UNPREDICTABLE>
20000310:	e9b5dba5 	ldmib	r5!, {r0, r2, r5, r7, r8, r9, fp, ip, lr, pc}
20000314:	3956c25b 	ldmdbcc	r6, {r0, r1, r3, r4, r6, r9, lr, pc}^
20000318:	59f111f1 	ldmibpl	r1!, {r0, r4, r5, r6, r7, r8, ip}^
2000031c:	923f82a4 	eorsls	r8, pc, #164, 4	; 0x4000000a
20000320:	ab1c5ed5 	blge	20717e7c <_estack+0x712e7c>
20000324:	d807aa98 	stmdale	r7, {r3, r4, r7, r9, fp, sp, pc}
20000328:	12835b01 	addne	r5, r3, #1024	; 0x400
2000032c:	243185be 	ldrtcs	r8, [r1], #-1470	; 0x5be
20000330:	550c7dc3 	strpl	r7, [ip, #-3523]	; 0xdc3
20000334:	72be5d74 	adcsvc	r5, lr, #116, 26	; 0x1d00
20000338:	80deb1fe 	ldrshhi	fp, [lr], #30
2000033c:	9bdc06a7 	blls	1f701de0 <_etext+0x176fa184>
20000340:	c19bf174 	orrsgt	pc, fp, r4, ror r1	; <UNPREDICTABLE>
20000344:	e49b69c1 	ldr	r6, [fp], #2497	; 0x9c1
20000348:	efbe4786 	svc	0x00be4786
2000034c:	0fc19dc6 	svceq	0x00c19dc6
20000350:	240ca1cc 	strcs	sl, [ip], #-460	; 0x1cc
20000354:	2de92c6f 	stclcs	12, cr2, [r9, #444]!	; 0x1bc
20000358:	4a7484aa 	bmi	21d21608 <_estack+0x1d1c608>
2000035c:	5cb0a9dc 	ldcpl	9, cr10, [r0], #880	; 0x370
20000360:	76f988da 	usatvc	r8, #25, sl, asr #17
20000364:	983e5152 	ldmdals	lr!, {r1, r4, r6, r8, ip, lr}
20000368:	a831c66d 	ldmdage	r1!, {r0, r2, r3, r5, r6, r9, sl, lr, pc}
2000036c:	b00327c8 	andlt	r2, r3, r8, asr #15
20000370:	bf597fc7 	svclt	0x00597fc7
20000374:	c6e00bf3 			; <UNDEFINED> instruction: 0xc6e00bf3
20000378:	d5a79147 	strle	r9, [r7, #327]!	; 0x147
2000037c:	06ca6351 			; <UNDEFINED> instruction: 0x06ca6351
20000380:	14292967 	strtne	r2, [r9], #-2407	; 0x967
20000384:	27b70a85 	ldrcs	r0, [r7, r5, lsl #21]!
20000388:	2e1b2138 	mrccs	1, 0, r2, cr11, cr8, {1}
2000038c:	4d2c6dfc 	stcmi	13, cr6, [ip, #-1008]!	; 0xfffffc10
20000390:	53380d13 	teqpl	r8, #1216	; 0x4c0
20000394:	650a7354 	strvs	r7, [sl, #-852]	; 0x354
20000398:	766a0abb 			; <UNDEFINED> instruction: 0x766a0abb
2000039c:	81c2c92e 	bichi	ip, r2, lr, lsr #18
200003a0:	92722c85 	rsbsls	r2, r2, #34048	; 0x8500
200003a4:	a2bfe8a1 	adcsge	lr, pc, #10551296	; 0xa10000
200003a8:	a81a664b 	ldmdage	sl, {r0, r1, r3, r6, r9, sl, sp, lr}
200003ac:	c24b8b70 	subgt	r8, fp, #112, 22	; 0x1c000
200003b0:	c76c51a3 	strbgt	r5, [ip, -r3, lsr #3]!
200003b4:	d192e819 	orrsle	lr, r2, r9, lsl r8
200003b8:	d6990624 	ldrle	r0, [r9], r4, lsr #12
200003bc:	f40e3585 	vst3.32	{d3,d5,d7}, [lr], r5
200003c0:	106aa070 	rsbne	sl, sl, r0, ror r0
200003c4:	19a4c116 	stmibne	r4!, {r1, r2, r4, r8, lr, pc}
200003c8:	1e376c08 	cdpne	12, 3, cr6, cr7, cr8, {0}
200003cc:	2748774c 	strbcs	r7, [r8, -ip, asr #14]
200003d0:	34b0bcb5 	ldrtcc	fp, [r0], #3253	; 0xcb5
200003d4:	391c0cb3 	ldmdbcc	ip, {r0, r1, r4, r5, r7, sl, fp}
200003d8:	4ed8aa4a 	vfnmami.f32	s21, s16, s20
200003dc:	5b9cca4f 	blpl	1e732d20 <_etext+0x1672b0c4>
200003e0:	682e6ff3 	stmdavs	lr!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
200003e4:	748f82ee 	strvc	r8, [pc], #750	; 200003ec <k+0xe8>
200003e8:	78a5636f 	stmiavc	r5!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}
200003ec:	84c87814 	strbhi	r7, [r8], #2068	; 0x814
200003f0:	8cc70208 	sfmhi	f0, 2, [r7], {8}
200003f4:	90befffa 	ldrshtls	pc, [lr], sl	; <UNPREDICTABLE>
200003f8:	a4506ceb 	ldrbge	r6, [r0], #-3307	; 0xceb
200003fc:	bef9a3f7 	mrclt	3, 7, sl, cr9, cr7, {7}
20000400:	c67178f2 			; <UNDEFINED> instruction: 0xc67178f2

20000404 <rootCA>:
20000404:	042d0cbd 	strteq	r0, [sp], #-3261	; 0xcbd
20000408:	c6955a2e 	ldrgt	r5, [r5], lr, lsr #20
2000040c:	3ffc28b6 	svccc	0x00fc28b6
20000410:	fba16c85 	blx	1e85b62e <_etext+0x168539d2>
20000414:	380725b5 	stmdacc	r7, {r0, r2, r4, r5, r7, r8, sl, sp}
20000418:	449d05c0 	ldrmi	r0, [sp], #1472	; 0x5c0
2000041c:	a6e3a704 	strbtge	sl, [r3], r4, lsl #14
20000420:	41b83bac 			; <UNDEFINED> instruction: 0x41b83bac

20000424 <impure_data>:
	...
20000444:	08007c5a 	stmdaeq	r0, {r1, r3, r4, r6, sl, fp, ip, sp, lr}
	...

20000484 <_impure_ptr>:
20000484:	20000424 	andcs	r0, r0, r4, lsr #8

Disassembly of section .bss:

20000488 <_sbss>:
20000488:	00000000 	andeq	r0, r0, r0

2000048c <wIstr>:
	...

2000048e <ResumeS>:
	...

20000490 <input>:
	...

200004ec <sha256sum>:
	...

2000050c <ctx>:
	...

20000574 <code_copy_lock>:
	...

20000576 <SaveRState>:
	...

20000578 <SaveTState>:
20000578:	00000000 	andeq	r0, r0, r0

2000057c <SaveState>:
2000057c:	00000000 	andeq	r0, r0, r0

20000580 <pProperty>:
20000580:	00000000 	andeq	r0, r0, r0

20000584 <EPindex>:
20000584:	00000000 	andeq	r0, r0, r0

20000588 <Device_Info>:
	...

200005a4 <pUser_Standard_Requests>:
200005a4:	00000000 	andeq	r0, r0, r0

200005a8 <pInformation>:
200005a8:	00000000 	andeq	r0, r0, r0

200005ac <wInterrupt_Mask>:
	...

200005ae <StatusInfo>:
	...

200005b0 <errno>:
200005b0:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.bIntPackSOF:

200005b4 <bIntPackSOF>:
	...

Disassembly of section .bss.bDeviceState:

200005b8 <bDeviceState>:
200005b8:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.recvBuffer:

200005bc <recvBuffer>:
	...

Disassembly of section .bss.uploadBlockLen:

20000dbc <uploadBlockLen>:
	...

Disassembly of section .bss.thisBlockLen:

20000dbe <thisBlockLen>:
	...

Disassembly of section .bss.userFirmwareLen:

20000dc0 <userFirmwareLen>:
20000dc0:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.userUploadType:

20000dc4 <userUploadType>:
	...

Disassembly of section .bss.dfuAppStatus:

20000dc5 <dfuAppStatus>:
20000dc5:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .bss.dfuBusy:

20000dcb <dfuBusy>:
	...

Disassembly of section .bss.Data_Mul_MaxPacketSize:

20000dcc <Data_Mul_MaxPacketSize>:
	...

Disassembly of section .bss.__malloc_sbrk_start:

20000dd0 <__malloc_sbrk_start>:
20000dd0:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.__malloc_free_list:

20000dd4 <__malloc_free_list>:
20000dd4:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.heap_end.4246:

20000dd8 <heap_end.4246>:
20000dd8:	00000000 	andeq	r0, r0, r0

Disassembly of section ._usrstack:

20000ddc <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
   0:	3a434347 	bcc	10d0d24 <__Stack_Size+0x10d0524>
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2973726f 	ldmdbcs	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	3220342e 	eorcc	r3, r0, #771751936	; 0x2e000000
  34:	30343130 	eorscc	r3, r4, r0, lsr r1
  38:	20353237 	eorscs	r3, r5, r7, lsr r2

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	415b2029 	cmpmi	fp, r9, lsr #32
  48:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2fe <BootRAM+0xef6fa9f>
  4c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  54:	2d385f34 	ldccs	15, cr5, [r8, #-208]!	; 0xffffff30
  58:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  5c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  60:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  64:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  68:	31333132 	teqcc	r3, r2, lsr r1
  6c:	005d3734 	subseq	r3, sp, r4, lsr r7

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	14041202 	strne	r1, [r4], #-514	; 0x202
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	1a011803 	bne	4603c <__Stack_Size+0x4583c>
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	Address 0x0000002c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	08000b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp}
  14:	00000048 	andeq	r0, r0, r8, asr #32
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
  1c:	00000004 	andeq	r0, r0, r4
	...
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	007c0002 	rsbseq	r0, ip, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	00040000 	andeq	r0, r4, r0
	...

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	0000007a 	andeq	r0, r0, sl, ror r0
	...

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  48:	0000011c 	andeq	r0, r0, ip, lsl r1
  4c:	00fe0002 	rscseq	r0, lr, r2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	08000b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp}
  5c:	00000002 	andeq	r0, r0, r2
  60:	08000b9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, fp}
  64:	00000002 	andeq	r0, r0, r2
  68:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
  6c:	00000002 	andeq	r0, r0, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(u8 bEpNum, u8 bDir, u16 wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
  70:	08000b9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp}
  74:	0000000a 	andeq	r0, r0, sl
  78:	08000ba8 	stmdaeq	r0, {r3, r5, r7, r8, r9, fp}
  7c:	00000002 	andeq	r0, r0, r2
  80:	08000bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp}
  84:	00000018 	andeq	r0, r0, r8, lsl r0
  88:	08000bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp}
  8c:	00000002 	andeq	r0, r0, r2
  90:	08000bc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, fp}
  94:	00000002 	andeq	r0, r0, r2
  98:	08000bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	08000bca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, fp}
  a4:	00000002 	andeq	r0, r0, r2
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
  a8:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
				{
					state_in->step = step_c;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
  ac:	00000002 	andeq	r0, r0, r2
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
  b0:	08000bce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, fp}
  b4:	00000002 	andeq	r0, r0, r2
			*plainchar    = (fragment & 0x003) << 6;
  b8:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
  bc:	0000000c 	andeq	r0, r0, ip
	state_in->plainchar = 0;
}

int base64_decode_block(const char* code_in, const int length_in, char* plaintext_out, base64_decodestate* state_in)
{
	const char* codechar = code_in;
  c0:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
			*plainchar    = (fragment & 0x003) << 6;
	case step_d:
			do {
				if (codechar == code_in+length_in)
  c4:	000000a8 	andeq	r0, r0, r8, lsr #1
  c8:	08000c84 	stmdaeq	r0, {r2, r7, sl, fp}
				{
					state_in->step = step_d;
  cc:	00000060 	andeq	r0, r0, r0, rrx
					state_in->plainchar = *plainchar;
  d0:	08000ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp}
					return plainchar - plaintext_out;
  d4:	0000000c 	andeq	r0, r0, ip
  d8:	08000cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp}
				}
				fragment = (char)base64_decode_value(*codechar++);
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	08000cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp}
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
  e4:	00000020 	andeq	r0, r0, r0, lsr #32
  e8:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
				{
					state_in->step = step_d;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
  ec:	0000000c 	andeq	r0, r0, ip
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
  f0:	08000d28 	stmdaeq	r0, {r3, r5, r8, sl, fp}
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
		}
  f8:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
	}
	/* control should not reach here */
	return plainchar - plaintext_out;
}
  fc:	00000068 	andeq	r0, r0, r8, rrx
	uint8_t x1z1[F25519_SIZE];
	uint8_t a[F25519_SIZE];

	f25519_mul__distinct(x1sq, x1, x1);
	f25519_mul__distinct(z1sq, z1, z1);
	f25519_mul__distinct(x1z1, x1, z1);
 100:	00000000 	andeq	r0, r0, r0
 104:	00000004 	andeq	r0, r0, r4

	f25519_sub(a, x1sq, z1sq);
 108:	08000db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp}
 10c:	0000001c 	andeq	r0, r0, ip, lsl r0
	f25519_mul__distinct(x3, a, a);
 110:	08000dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp}
 114:	00000018 	andeq	r0, r0, r8, lsl r0
 118:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}

	f25519_mul_c(a, x1z1, 486662);
 11c:	00000084 	andeq	r0, r0, r4, lsl #1
 120:	08000e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp}
	f25519_add(a, x1sq, a);
 124:	00000048 	andeq	r0, r0, r8, asr #32
 128:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
 12c:	0000003c 	andeq	r0, r0, ip, lsr r0
	f25519_add(a, z1sq, a);
 130:	08000ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp}
 134:	00000004 	andeq	r0, r0, r4
	f25519_mul__distinct(x1sq, x1z1, a);
 138:	08000ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp}
 13c:	00000024 	andeq	r0, r0, r4, lsr #32
 140:	08000f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp}
	f25519_mul_c(z3, x1sq, 4);
 144:	00000040 	andeq	r0, r0, r0, asr #32
 148:	08000f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp}
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
 14c:	00000022 	andeq	r0, r0, r2, lsr #32
 150:	08000f80 	stmdaeq	r0, {r7, r8, r9, sl, fp}
 154:	000000b4 	strheq	r0, [r0], -r4
	f25519_sub(b, x3, z3); /* D */
 158:	00000000 	andeq	r0, r0, r0
 15c:	0000000c 	andeq	r0, r0, ip
	...
	f25519_mul__distinct(da, a, b);
 168:	00000014 	andeq	r0, r0, r4, lsl r0

	f25519_sub(b, x2, z2);
 16c:	0f0a0002 	svceq	0x000a0002
 170:	00040000 	andeq	r0, r4, r0
	...
	f25519_add(a, x3, z3); /* C */
	f25519_mul__distinct(cb, a, b);
 180:	00000034 	andeq	r0, r0, r4, lsr r0
 184:	11670002 	cmnne	r7, r2

	f25519_add(a, da, cb);
 188:	00040000 	andeq	r0, r4, r0
	...
	f25519_mul__distinct(b, a, a);
 194:	00000026 	andeq	r0, r0, r6, lsr #32
 198:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
	f25519_mul__distinct(x5, z1, b);
 19c:	00000032 	andeq	r0, r0, r2, lsr r0
 1a0:	08001068 	stmdaeq	r0, {r3, r5, r6, ip}
 1a4:	00000098 	muleq	r0, r8, r0

	f25519_sub(a, da, cb);
 1a8:	08001100 	stmdaeq	r0, {r8, ip}
 1ac:	000000fc 	strdeq	r0, [r0], -ip
	...
	f25519_mul__distinct(b, a, a);
 1b8:	00000104 	andeq	r0, r0, r4, lsl #2

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
 1bc:	1cb60002 	ldcne	0, cr0, [r6], #8
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
 1c0:	00040000 	andeq	r0, r4, r0
 1c4:	00000000 	andeq	r0, r0, r0

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
 1c8:	080011fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, ip}
 1cc:	00000016 	andeq	r0, r0, r6, lsl r0
 1d0:	08001212 	stmdaeq	r0, {r1, r4, r9, ip}
 1d4:	00000012 	andeq	r0, r0, r2, lsl r0
		f25519_select(zm1, zm1, zm, bit);
 1d8:	08001224 	stmdaeq	r0, {r2, r5, r9, ip}
 1dc:	00000050 	andeq	r0, r0, r0, asr r0
 1e0:	08001274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip}
		f25519_select(xm, xm, xms, bit);
 1e4:	0000000a 	andeq	r0, r0, sl
 1e8:	0800127e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, ip}
 1ec:	00000016 	andeq	r0, r0, r6, lsl r0
		f25519_select(zm, zm, zms, bit);
 1f0:	08001294 	stmdaeq	r0, {r2, r4, r7, r9, ip}
 1f4:	00000028 	andeq	r0, r0, r8, lsr #32
 1f8:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
 1fc:	0000001a 	andeq	r0, r0, sl, lsl r0
 200:	080012d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip}
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
 204:	0000009c 	muleq	r0, ip, r0
 208:	08001374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip}
	f25519_mul__distinct(result, zm1, xm);
 20c:	00000028 	andeq	r0, r0, r8, lsr #32
 210:	0800139c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, ip}
	f25519_normalize(result);
 214:	00000088 	andeq	r0, r0, r8, lsl #1
 218:	08001424 	stmdaeq	r0, {r2, r5, sl, ip}
}
 21c:	00000048 	andeq	r0, r0, r8, asr #32
 220:	0800146c 	stmdaeq	r0, {r2, r3, r5, r6, sl, ip}
 224:	00000060 	andeq	r0, r0, r0, rrx
 228:	080014cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, ip}
 22c:	00000014 	andeq	r0, r0, r4, lsl r0
 230:	080014e0 	stmdaeq	r0, {r5, r6, r7, sl, ip}
 234:	0000001c 	andeq	r0, r0, ip, lsl r0
 238:	080014fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip}
 23c:	0000002c 	andeq	r0, r0, ip, lsr #32
 240:	08001528 	stmdaeq	r0, {r3, r5, r8, sl, ip}
 244:	00000018 	andeq	r0, r0, r8, lsl r0
 248:	00000000 	andeq	r0, r0, r0
 24c:	0000002c 	andeq	r0, r0, ip, lsr #32
 250:	00000000 	andeq	r0, r0, r0
 254:	00000048 	andeq	r0, r0, r8, asr #32
 258:	08001540 	stmdaeq	r0, {r6, r8, sl, ip}
 25c:	0000006c 	andeq	r0, r0, ip, rrx
 260:	080015ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, ip}
 264:	00000024 	andeq	r0, r0, r4, lsr #32
 268:	080015d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, ip}
 26c:	0000001e 	andeq	r0, r0, lr, lsl r0
 270:	080015f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip}
 274:	00000014 	andeq	r0, r0, r4, lsl r0
 278:	08001604 	stmdaeq	r0, {r2, r9, sl, ip}
 27c:	00000034 	andeq	r0, r0, r4, lsr r0
 280:	00000000 	andeq	r0, r0, r0
 284:	00000030 	andeq	r0, r0, r0, lsr r0
 288:	08001638 	stmdaeq	r0, {r3, r4, r5, r9, sl, ip}
 28c:	0000004c 	andeq	r0, r0, ip, asr #32
 290:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
 294:	0000000c 	andeq	r0, r0, ip
 298:	08001690 	stmdaeq	r0, {r4, r7, r9, sl, ip}
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	080016a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip}
 2a4:	00000012 	andeq	r0, r0, r2, lsl r0
 2a8:	080016bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, ip}
 2ac:	00000010 	andeq	r0, r0, r0, lsl r0
 2b0:	080016cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip}
 2b4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 2c0:	00000084 	andeq	r0, r0, r4, lsl #1
 2c4:	2f520002 	svccs	0x00520002
 2c8:	00040000 	andeq	r0, r4, r0
 2cc:	00000000 	andeq	r0, r0, r0
 2d0:	080016e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, ip}
 2d4:	00000088 	andeq	r0, r0, r8, lsl #1
 2d8:	0800176c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, ip}
 2dc:	00000044 	andeq	r0, r0, r4, asr #32
 2e0:	00000000 	andeq	r0, r0, r0
 2e4:	00000002 	andeq	r0, r0, r2
 2e8:	080017b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, ip}
 2ec:	00000018 	andeq	r0, r0, r8, lsl r0
 2f0:	080017c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip}
 2f4:	00000018 	andeq	r0, r0, r8, lsl r0
 2f8:	080017e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip}
 2fc:	00000028 	andeq	r0, r0, r8, lsr #32
 300:	08001808 	stmdaeq	r0, {r3, fp, ip}
 304:	00000034 	andeq	r0, r0, r4, lsr r0
 308:	0800183c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip}
 30c:	00000058 	andeq	r0, r0, r8, asr r0
 310:	08001894 	stmdaeq	r0, {r2, r4, r7, fp, ip}
 314:	00000260 	andeq	r0, r0, r0, ror #4
 318:	00000000 	andeq	r0, r0, r0
 31c:	0000000c 	andeq	r0, r0, ip
 320:	00000000 	andeq	r0, r0, r0
 324:	0000000c 	andeq	r0, r0, ip
 328:	08001af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip}
 32c:	0000000c 	andeq	r0, r0, ip
 330:	00000000 	andeq	r0, r0, r0
 334:	0000001c 	andeq	r0, r0, ip, lsl r0
 338:	08001b00 	stmdaeq	r0, {r8, r9, fp, ip}
 33c:	00000002 	andeq	r0, r0, r2
	...
 348:	0000001c 	andeq	r0, r0, ip, lsl r0
 34c:	39070002 	stmdbcc	r7, {r1}
 350:	00040000 	andeq	r0, r4, r0
	...
 35c:	00000228 	andeq	r0, r0, r8, lsr #4
	...
 368:	0000004c 	andeq	r0, r0, ip, asr #32
 36c:	433e0002 	teqmi	lr, #2
 370:	00040000 	andeq	r0, r4, r0
 374:	00000000 	andeq	r0, r0, r0
 378:	08001b04 	stmdaeq	r0, {r2, r8, r9, fp, ip}
 37c:	00000070 	andeq	r0, r0, r0, ror r0
 380:	08001b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, ip}
 384:	0000003a 	andeq	r0, r0, sl, lsr r0
 388:	08001bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp, ip}
 38c:	0000005e 	andeq	r0, r0, lr, asr r0
 390:	08001c10 	stmdaeq	r0, {r4, sl, fp, ip}
 394:	000000c8 	andeq	r0, r0, r8, asr #1
 398:	08001cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, ip}
 39c:	000000e0 	andeq	r0, r0, r0, ror #1
 3a0:	08001db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, ip}
 3a4:	000000b4 	strheq	r0, [r0], -r4
 3a8:	08001e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip}
 3ac:	00000084 	andeq	r0, r0, r4, lsl #1
	...
 3b8:	00000044 	andeq	r0, r0, r4, asr #32
 3bc:	51f40002 	mvnspl	r0, r2
 3c0:	00040000 	andeq	r0, r4, r0
 3c4:	00000000 	andeq	r0, r0, r0
 3c8:	08001ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, ip}
 3cc:	00000054 	andeq	r0, r0, r4, asr r0
 3d0:	08001f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, ip}
 3d4:	0000009c 	muleq	r0, ip, r0
 3d8:	08001fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip}
 3dc:	0000002c 	andeq	r0, r0, ip, lsr #32
 3e0:	0800200c 	stmdaeq	r0, {r2, r3, sp}
 3e4:	00000018 	andeq	r0, r0, r8, lsl r0
 3e8:	08002024 	stmdaeq	r0, {r2, r5, sp}
 3ec:	000000c0 	andeq	r0, r0, r0, asr #1
 3f0:	080020e4 	stmdaeq	r0, {r2, r5, r6, r7, sp}
 3f4:	000000c0 	andeq	r0, r0, r0, asr #1
	...
 400:	0000007c 	andeq	r0, r0, ip, ror r0
 404:	5f3e0002 	svcpl	0x003e0002
 408:	00040000 	andeq	r0, r4, r0
 40c:	00000000 	andeq	r0, r0, r0
 410:	080021a4 	stmdaeq	r0, {r2, r5, r7, r8, sp}
 414:	0000001e 	andeq	r0, r0, lr, lsl r0
 418:	080021c4 	stmdaeq	r0, {r2, r6, r7, r8, sp}
 41c:	0000006e 	andeq	r0, r0, lr, rrx
 420:	08002234 	stmdaeq	r0, {r2, r4, r5, r9, sp}
 424:	0000009a 	muleq	r0, sl, r0
 428:	080022d0 	stmdaeq	r0, {r4, r6, r7, r9, sp}
 42c:	000000c2 	andeq	r0, r0, r2, asr #1
 430:	08002394 	stmdaeq	r0, {r2, r4, r7, r8, r9, sp}
 434:	00000046 	andeq	r0, r0, r6, asr #32
 438:	080023dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sp}
 43c:	0000004c 	andeq	r0, r0, ip, asr #32
 440:	08002428 	stmdaeq	r0, {r3, r5, sl, sp}
 444:	00000046 	andeq	r0, r0, r6, asr #32
 448:	08002470 	stmdaeq	r0, {r4, r5, r6, sl, sp}
 44c:	00000088 	andeq	r0, r0, r8, lsl #1
 450:	00000000 	andeq	r0, r0, r0
 454:	000000b8 	strheq	r0, [r0], -r8
 458:	00000000 	andeq	r0, r0, r0
 45c:	00000040 	andeq	r0, r0, r0, asr #32
 460:	080024f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, sp}
 464:	000005ea 	andeq	r0, r0, sl, ror #11
 468:	00000000 	andeq	r0, r0, r0
 46c:	00000026 	andeq	r0, r0, r6, lsr #32
 470:	08002ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, sp}
 474:	00000634 	andeq	r0, r0, r4, lsr r6
	...
 480:	0000005c 	andeq	r0, r0, ip, asr r0
 484:	6ee50002 	cdpvs	0, 14, cr0, cr5, cr2, {0}
 488:	00040000 	andeq	r0, r4, r0
	...
 494:	0000001e 	andeq	r0, r0, lr, lsl r0
 498:	08003118 	stmdaeq	r0, {r3, r4, r8, ip, sp}
 49c:	000001a0 	andeq	r0, r0, r0, lsr #3
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	0000002c 	andeq	r0, r0, ip, lsr #32
 4a8:	00000000 	andeq	r0, r0, r0
 4ac:	0000009a 	muleq	r0, sl, r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	000000c2 	andeq	r0, r0, r2, asr #1
 4b8:	080032b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, ip, sp}
 4bc:	00000058 	andeq	r0, r0, r8, asr r0
 4c0:	00000000 	andeq	r0, r0, r0
 4c4:	0000008e 	andeq	r0, r0, lr, lsl #1
 4c8:	08003310 	stmdaeq	r0, {r4, r8, r9, ip, sp}
 4cc:	0000013e 	andeq	r0, r0, lr, lsr r1
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	000000d2 	ldrdeq	r0, [r0], -r2
	...
 4e0:	00000024 	andeq	r0, r0, r4, lsr #32
 4e4:	7c590002 	mrrcvc	0, 0, r0, r9, cr2
 4e8:	00040000 	andeq	r0, r4, r0
	...
 4f4:	00000040 	andeq	r0, r0, r0, asr #32
 4f8:	00000000 	andeq	r0, r0, r0
 4fc:	000000d4 	ldrdeq	r0, [r0], -r4
	...
 508:	00000034 	andeq	r0, r0, r4, lsr r0
 50c:	82830002 	addhi	r0, r3, #2
 510:	00040000 	andeq	r0, r4, r0
 514:	00000000 	andeq	r0, r0, r0
 518:	08003450 	stmdaeq	r0, {r4, r6, sl, ip, sp}
 51c:	00000058 	andeq	r0, r0, r8, asr r0
 520:	080034a8 	stmdaeq	r0, {r3, r5, r7, sl, ip, sp}
 524:	00001f64 	andeq	r1, r0, r4, ror #30
 528:	0800540c 	stmdaeq	r0, {r2, r3, sl, ip, lr}
 52c:	0000008e 	andeq	r0, r0, lr, lsl #1
 530:	0800549c 	stmdaeq	r0, {r2, r3, r4, r7, sl, ip, lr}
 534:	00000218 	andeq	r0, r0, r8, lsl r2
	...
 540:	0000002c 	andeq	r0, r0, ip, lsr #32
 544:	88330002 	ldmdahi	r3!, {r1}
 548:	00040000 	andeq	r0, r4, r0
 54c:	00000000 	andeq	r0, r0, r0
 550:	080056b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, ip, lr}
 554:	00000494 	muleq	r0, r4, r4
 558:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
 55c:	00000088 	andeq	r0, r0, r8, lsl #1
 560:	08005bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, ip, lr}
 564:	00000296 	muleq	r0, r6, r2
	...
 570:	0000002c 	andeq	r0, r0, ip, lsr #32
 574:	8fb60002 	svchi	0x00b60002
 578:	00040000 	andeq	r0, r4, r0
	...
 584:	00000018 	andeq	r0, r0, r8, lsl r0
 588:	00000000 	andeq	r0, r0, r0
 58c:	00000008 	andeq	r0, r0, r8
 590:	00000000 	andeq	r0, r0, r0
 594:	00000100 	andeq	r0, r0, r0, lsl #2
	...
 5a0:	00000034 	andeq	r0, r0, r4, lsr r0
 5a4:	91860002 	orrls	r0, r6, r2
 5a8:	00040000 	andeq	r0, r4, r0
 5ac:	00000000 	andeq	r0, r0, r0
 5b0:	08005e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, ip, lr}
 5b4:	0000000a 	andeq	r0, r0, sl
 5b8:	08005e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp, ip, lr}
 5bc:	00000010 	andeq	r0, r0, r0, lsl r0
 5c0:	08005e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, lr}
 5c4:	000000d6 	ldrdeq	r0, [r0], -r6
 5c8:	08005f5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sl, fp, ip, lr}
 5cc:	00000040 	andeq	r0, r0, r0, asr #32
	...
 5d8:	00000024 	andeq	r0, r0, r4, lsr #32
 5dc:	93f10002 	mvnsls	r0, #2
 5e0:	00040000 	andeq	r0, r4, r0
 5e4:	00000000 	andeq	r0, r0, r0
 5e8:	08005f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip, lr}
 5ec:	00000044 	andeq	r0, r0, r4, asr #32
 5f0:	08005fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
 5f4:	000001ac 	andeq	r0, r0, ip, lsr #3
	...
 600:	000001ec 	andeq	r0, r0, ip, ror #3
 604:	9e010002 	cdpls	0, 0, cr0, cr1, cr2, {0}
 608:	00040000 	andeq	r0, r4, r0
	...
 614:	0000000c 	andeq	r0, r0, ip
 618:	00000000 	andeq	r0, r0, r0
 61c:	0000000c 	andeq	r0, r0, ip
 620:	00000000 	andeq	r0, r0, r0
 624:	0000000c 	andeq	r0, r0, ip
 628:	00000000 	andeq	r0, r0, r0
 62c:	0000000c 	andeq	r0, r0, ip
 630:	00000000 	andeq	r0, r0, r0
 634:	0000000c 	andeq	r0, r0, ip
 638:	00000000 	andeq	r0, r0, r0
 63c:	0000000c 	andeq	r0, r0, ip
 640:	00000000 	andeq	r0, r0, r0
 644:	0000000c 	andeq	r0, r0, ip
 648:	00000000 	andeq	r0, r0, r0
 64c:	00000010 	andeq	r0, r0, r0, lsl r0
 650:	00000000 	andeq	r0, r0, r0
 654:	0000000c 	andeq	r0, r0, ip
 658:	00000000 	andeq	r0, r0, r0
 65c:	0000000e 	andeq	r0, r0, lr
 660:	00000000 	andeq	r0, r0, r0
 664:	00000010 	andeq	r0, r0, r0, lsl r0
 668:	00000000 	andeq	r0, r0, r0
 66c:	0000001c 	andeq	r0, r0, ip, lsl r0
 670:	00000000 	andeq	r0, r0, r0
 674:	00000012 	andeq	r0, r0, r2, lsl r0
 678:	0800618c 	stmdaeq	r0, {r2, r3, r7, r8, sp, lr}
 67c:	0000002a 	andeq	r0, r0, sl, lsr #32
 680:	00000000 	andeq	r0, r0, r0
 684:	0000002a 	andeq	r0, r0, sl, lsr #32
 688:	00000000 	andeq	r0, r0, r0
 68c:	00000024 	andeq	r0, r0, r4, lsr #32
 690:	00000000 	andeq	r0, r0, r0
 694:	00000012 	andeq	r0, r0, r2, lsl r0
 698:	00000000 	andeq	r0, r0, r0
 69c:	00000012 	andeq	r0, r0, r2, lsl r0
 6a0:	00000000 	andeq	r0, r0, r0
 6a4:	0000001e 	andeq	r0, r0, lr, lsl r0
 6a8:	080061b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sp, lr}
 6ac:	0000001e 	andeq	r0, r0, lr, lsl r0
 6b0:	00000000 	andeq	r0, r0, r0
 6b4:	0000001e 	andeq	r0, r0, lr, lsl r0
 6b8:	00000000 	andeq	r0, r0, r0
 6bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c0:	080061d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sp, lr}
 6c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c8:	00000000 	andeq	r0, r0, r0
 6cc:	0000001e 	andeq	r0, r0, lr, lsl r0
 6d0:	00000000 	andeq	r0, r0, r0
 6d4:	0000001e 	andeq	r0, r0, lr, lsl r0
 6d8:	00000000 	andeq	r0, r0, r0
 6dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 6e0:	00000000 	andeq	r0, r0, r0
 6e4:	0000001a 	andeq	r0, r0, sl, lsl r0
 6e8:	00000000 	andeq	r0, r0, r0
 6ec:	0000001a 	andeq	r0, r0, sl, lsl r0
 6f0:	00000000 	andeq	r0, r0, r0
 6f4:	00000018 	andeq	r0, r0, r8, lsl r0
 6f8:	00000000 	andeq	r0, r0, r0
 6fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 700:	00000000 	andeq	r0, r0, r0
 704:	00000020 	andeq	r0, r0, r0, lsr #32
 708:	00000000 	andeq	r0, r0, r0
 70c:	00000020 	andeq	r0, r0, r0, lsr #32
 710:	080061f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sp, lr}
 714:	00000020 	andeq	r0, r0, r0, lsr #32
 718:	08006210 	stmdaeq	r0, {r4, r9, sp, lr}
 71c:	00000020 	andeq	r0, r0, r0, lsr #32
 720:	00000000 	andeq	r0, r0, r0
 724:	0000001e 	andeq	r0, r0, lr, lsl r0
 728:	00000000 	andeq	r0, r0, r0
 72c:	00000012 	andeq	r0, r0, r2, lsl r0
 730:	00000000 	andeq	r0, r0, r0
 734:	00000020 	andeq	r0, r0, r0, lsr #32
 738:	00000000 	andeq	r0, r0, r0
 73c:	00000020 	andeq	r0, r0, r0, lsr #32
 740:	08006230 	stmdaeq	r0, {r4, r5, r9, sp, lr}
 744:	0000001c 	andeq	r0, r0, ip, lsl r0
 748:	0800624c 	stmdaeq	r0, {r2, r3, r6, r9, sp, lr}
 74c:	0000001c 	andeq	r0, r0, ip, lsl r0
 750:	08006268 	stmdaeq	r0, {r3, r5, r6, r9, sp, lr}
 754:	0000001c 	andeq	r0, r0, ip, lsl r0
 758:	00000000 	andeq	r0, r0, r0
 75c:	00000026 	andeq	r0, r0, r6, lsr #32
 760:	08006284 	stmdaeq	r0, {r2, r7, r9, sp, lr}
 764:	00000040 	andeq	r0, r0, r0, asr #32
 768:	00000000 	andeq	r0, r0, r0
 76c:	00000020 	andeq	r0, r0, r0, lsr #32
 770:	00000000 	andeq	r0, r0, r0
 774:	00000020 	andeq	r0, r0, r0, lsr #32
 778:	00000000 	andeq	r0, r0, r0
 77c:	00000038 	andeq	r0, r0, r8, lsr r0
 780:	00000000 	andeq	r0, r0, r0
 784:	00000020 	andeq	r0, r0, r0, lsr #32
 788:	00000000 	andeq	r0, r0, r0
 78c:	00000020 	andeq	r0, r0, r0, lsr #32
 790:	00000000 	andeq	r0, r0, r0
 794:	0000001c 	andeq	r0, r0, ip, lsl r0
 798:	00000000 	andeq	r0, r0, r0
 79c:	0000001c 	andeq	r0, r0, ip, lsl r0
 7a0:	00000000 	andeq	r0, r0, r0
 7a4:	000000a8 	andeq	r0, r0, r8, lsr #1
 7a8:	00000000 	andeq	r0, r0, r0
 7ac:	0000005c 	andeq	r0, r0, ip, asr r0
 7b0:	00000000 	andeq	r0, r0, r0
 7b4:	0000005c 	andeq	r0, r0, ip, asr r0
 7b8:	00000000 	andeq	r0, r0, r0
 7bc:	00000020 	andeq	r0, r0, r0, lsr #32
 7c0:	00000000 	andeq	r0, r0, r0
 7c4:	00000020 	andeq	r0, r0, r0, lsr #32
 7c8:	00000000 	andeq	r0, r0, r0
 7cc:	00000044 	andeq	r0, r0, r4, asr #32
 7d0:	00000000 	andeq	r0, r0, r0
 7d4:	0000003a 	andeq	r0, r0, sl, lsr r0
 7d8:	00000000 	andeq	r0, r0, r0
 7dc:	00000006 	andeq	r0, r0, r6
 7e0:	00000000 	andeq	r0, r0, r0
 7e4:	0000000a 	andeq	r0, r0, sl
	...
 7f0:	00000024 	andeq	r0, r0, r4, lsr #32
 7f4:	aa8d0002 	bge	fe340804 <BootRAM+0xd2b0fa5>
 7f8:	00040000 	andeq	r0, r4, r0
 7fc:	00000000 	andeq	r0, r0, r0
 800:	080062c4 	stmdaeq	r0, {r2, r6, r7, r9, sp, lr}
 804:	00000154 	andeq	r0, r0, r4, asr r1
 808:	00000000 	andeq	r0, r0, r0
 80c:	00000070 	andeq	r0, r0, r0, ror r0
	...
 818:	0000001c 	andeq	r0, r0, ip, lsl r0
 81c:	ac690002 	stclge	0, cr0, [r9], #-8
 820:	00040000 	andeq	r0, r4, r0
 824:	00000000 	andeq	r0, r0, r0
 828:	08006418 	stmdaeq	r0, {r3, r4, sl, sp, lr}
 82c:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 838:	00000094 	muleq	r0, r4, r0
 83c:	b0660002 	rsblt	r0, r6, r2
 840:	00040000 	andeq	r0, r4, r0
 844:	00000000 	andeq	r0, r0, r0
 848:	08006450 	stmdaeq	r0, {r4, r6, sl, sp, lr}
 84c:	00000024 	andeq	r0, r0, r4, lsr #32
 850:	08006474 	stmdaeq	r0, {r2, r4, r5, r6, sl, sp, lr}
 854:	00000024 	andeq	r0, r0, r4, lsr #32
 858:	08006498 	stmdaeq	r0, {r3, r4, r7, sl, sp, lr}
 85c:	00000090 	muleq	r0, r0, r0
 860:	08006528 	stmdaeq	r0, {r3, r5, r8, sl, sp, lr}
 864:	000000a8 	andeq	r0, r0, r8, lsr #1
 868:	080065d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, sp, lr}
 86c:	00000038 	andeq	r0, r0, r8, lsr r0
 870:	08006608 	stmdaeq	r0, {r3, r9, sl, sp, lr}
 874:	00000048 	andeq	r0, r0, r8, asr #32
 878:	08006650 	stmdaeq	r0, {r4, r6, r9, sl, sp, lr}
 87c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 880:	08006720 	stmdaeq	r0, {r5, r8, r9, sl, sp, lr}
 884:	00000084 	andeq	r0, r0, r4, lsl #1
 888:	080067a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, sp, lr}
 88c:	00000024 	andeq	r0, r0, r4, lsr #32
 890:	080067c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, sp, lr}
 894:	0000001c 	andeq	r0, r0, ip, lsl r0
 898:	080067e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, sp, lr}
 89c:	00000040 	andeq	r0, r0, r0, asr #32
 8a0:	08006824 	stmdaeq	r0, {r2, r5, fp, sp, lr}
 8a4:	000002dc 	ldrdeq	r0, [r0], -ip
 8a8:	08006b00 	stmdaeq	r0, {r8, r9, fp, sp, lr}
 8ac:	000000c8 	andeq	r0, r0, r8, asr #1
 8b0:	08006bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, sp, lr}
 8b4:	00000038 	andeq	r0, r0, r8, lsr r0
 8b8:	08006c00 	stmdaeq	r0, {sl, fp, sp, lr}
 8bc:	0000005c 	andeq	r0, r0, ip, asr r0
 8c0:	00000000 	andeq	r0, r0, r0
 8c4:	00000002 	andeq	r0, r0, r2
	...
 8d0:	00000024 	andeq	r0, r0, r4, lsr #32
 8d4:	be4a0002 	cdplt	0, 4, cr0, cr10, cr2, {0}
 8d8:	00040000 	andeq	r0, r4, r0
 8dc:	00000000 	andeq	r0, r0, r0
 8e0:	08006c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, sp, lr}
 8e4:	00000030 	andeq	r0, r0, r0, lsr r0
 8e8:	08006c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, sp, lr}
 8ec:	00000024 	andeq	r0, r0, r4, lsr #32
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000078 	andeq	r0, r0, r8, ror r0
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
	...
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      14:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
      1c:	5f632f62 	svcpl	0x00632f62
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      24:	6174735f 	cmnvs	r4, pc, asr r3
      28:	70757472 	rsbsvc	r7, r5, r2, ror r4
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	4300732e 	movwmi	r7, #814	; 0x32e
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
      34:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
      38:	66696168 	strbtvs	r6, [r9], -r8, ror #2

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	68637369 	stmdavs	r3!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	7365445c 	cmnvc	r5, #92, 8	; 0x5c000000
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	706f746b 	rsbvc	r7, pc, fp, ror #8
      48:	636e655c 	cmnvs	lr, #92, 10	; 0x17000000
      4c:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0x16c

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	6f72705f 	svcvs	0x0072705f
      54:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
      58:	6f6f625c 	svcvs	0x006f625c
      5c:	616f6c74 	smcvs	63172	; 0xf6c4
      60:	5c726564 	cfldr64pl	mvdx6, [r2], #-400	; 0xfffffe70
      64:	334d5453 	movtcc	r5, #54355	; 0xd453
      68:	00314632 	eorseq	r4, r1, r2, lsr r6
      6c:	20554e47 	subscs	r4, r5, r7, asr #28
      70:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      74:	2e33322e 	cdpcs	2, 3, cr3, cr3, cr14, {1}
      78:	80010032 	andhi	r0, r1, r2, lsr r0
      7c:	0000007e 	andeq	r0, r0, lr, ror r0
      80:	00120002 	andseq	r0, r2, r2
      84:	01040000 	mrseq	r0, (UNDEF: 4)
      88:	00000075 	andeq	r0, r0, r5, ror r0
	...
      94:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
      98:	5f32336d 	svcpl	0x0032336d
      9c:	2f62696c 	svccs	0x0062696c
      a0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
      a4:	336d7865 	cmncc	sp, #6619136	; 0x650000
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      a8:	63616d5f 	cmnvs	r1, #6080	; 0x17c0
				{
					state_in->step = step_c;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ac:	532e6f72 	teqpl	lr, #456	; 0x1c8
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      b0:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
      b4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
			*plainchar    = (fragment & 0x003) << 6;
      b8:	61685c73 	smcvs	34243	; 0x85c3
      bc:	73696669 	cmnvc	r9, #110100480	; 0x6900000
	state_in->plainchar = 0;
}

int base64_decode_block(const char* code_in, const int length_in, char* plaintext_out, base64_decodestate* state_in)
{
	const char* codechar = code_in;
      c0:	445c6863 	ldrbmi	r6, [ip], #-2147	; 0x863
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
			*plainchar    = (fragment & 0x003) << 6;
	case step_d:
			do {
				if (codechar == code_in+length_in)
      c4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
      c8:	655c706f 	ldrbvs	r7, [ip, #-111]	; 0x6f
				{
					state_in->step = step_d;
      cc:	616c636e 	cmnvs	ip, lr, ror #6
					state_in->plainchar = *plainchar;
      d0:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
					return plainchar - plaintext_out;
      d4:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
      d8:	625c7463 	subsvs	r7, ip, #1660944384	; 0x63000000
				}
				fragment = (char)base64_decode_value(*codechar++);
      dc:	6c746f6f 	ldclvs	15, cr6, [r4], #-444	; 0xfffffe44
      e0:	6564616f 	strbvs	r6, [r4, #-367]!	; 0x16f
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      e4:	54535c72 	ldrbpl	r5, [r3], #-3186	; 0xc72
      e8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
				{
					state_in->step = step_d;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ec:	4e470031 	mcrmi	0, 2, r0, cr7, cr1, {1}
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      f0:	53412055 	movtpl	r2, #4181	; 0x1055
      f4:	322e3220 	eorcc	r3, lr, #32, 4
		}
      f8:	00322e33 	eorseq	r2, r2, r3, lsr lr
	}
	/* control should not reach here */
	return plainchar - plaintext_out;
}
      fc:	0e088001 	cdpeq	0, 0, cr8, cr8, cr1, {0}
	uint8_t x1z1[F25519_SIZE];
	uint8_t a[F25519_SIZE];

	f25519_mul__distinct(x1sq, x1, x1);
	f25519_mul__distinct(z1sq, z1, z1);
	f25519_mul__distinct(x1z1, x1, z1);
     100:	00040000 	andeq	r0, r4, r0
     104:	00000026 	andeq	r0, r0, r6, lsr #32

	f25519_sub(a, x1sq, z1sq);
     108:	06390104 	ldrteq	r0, [r9], -r4, lsl #2
     10c:	eb010000 	bl	40114 <__Stack_Size+0x3f914>
	f25519_mul__distinct(x3, a, a);
     110:	93000003 	movwls	r0, #3
     114:	20000008 	andcs	r0, r0, r8
     118:	00000000 	andeq	r0, r0, r0

	f25519_mul_c(a, x1z1, 486662);
     11c:	1b000000 	blne	124 <_Minimum_Stack_Size+0x24>
     120:	02000001 	andeq	r0, r0, #1
	f25519_add(a, x1sq, a);
     124:	02570704 	subseq	r0, r7, #4, 14	; 0x100000
     128:	04030000 	streq	r0, [r3], #-0
     12c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
	f25519_add(a, z1sq, a);
     130:	06010200 	streq	r0, [r1], -r0, lsl #4
     134:	0000081a 	andeq	r0, r0, sl, lsl r8
	f25519_mul__distinct(x1sq, x1z1, a);
     138:	18080102 	stmdane	r8, {r1, r8}
     13c:	02000008 	andeq	r0, r0, #8
     140:	06fc0502 	ldrbteq	r0, [ip], r2, lsl #10
	f25519_mul_c(z3, x1sq, 4);
     144:	02020000 	andeq	r0, r2, #0
     148:	00094907 	andeq	r4, r9, r7, lsl #18
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	05040200 	streq	r0, [r4, #-512]	; 0x200
     150:	000004da 	ldrdeq	r0, [r0], -sl
     154:	52070402 	andpl	r0, r7, #33554432	; 0x2000000
	f25519_sub(b, x3, z3); /* D */
     158:	02000002 	andeq	r0, r0, #2
     15c:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
	f25519_mul__distinct(da, a, b);
     160:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     164:	00024d07 	andeq	r4, r2, r7, lsl #26
     168:	07040200 	streq	r0, [r4, -r0, lsl #4]

	f25519_sub(b, x2, z2);
     16c:	0000078b 	andeq	r0, r0, fp, lsl #15
     170:	00780404 	rsbseq	r0, r8, r4, lsl #8
	f25519_add(a, x3, z3); /* C */
     174:	02050000 	andeq	r0, r5, #0
     178:	08210801 	stmdaeq	r1!, {r0, fp}
     17c:	75060000 	strvc	r0, [r6, #-0]
	f25519_mul__distinct(cb, a, b);
     180:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
     184:	00005627 	andeq	r5, r0, r7, lsr #12

	f25519_add(a, da, cb);
     188:	31750600 	cmncc	r5, r0, lsl #12
     18c:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
     190:	00000048 	andeq	r0, r0, r8, asr #32
	f25519_mul__distinct(b, a, a);
     194:	00387506 	eorseq	r7, r8, r6, lsl #10
     198:	003a2902 	eorseq	r2, sl, r2, lsl #18
	f25519_mul__distinct(x5, z1, b);
     19c:	5a070000 	bpl	1c01a4 <__Stack_Size+0x1bf9a4>
     1a0:	02000003 	andeq	r0, r0, #3
     1a4:	0000ab2f 	andeq	sl, r0, pc, lsr #22

	f25519_sub(a, da, cb);
     1a8:	00560800 	subseq	r0, r6, r0, lsl #16
     1ac:	e3070000 	movw	r0, #28672	; 0x7000
	f25519_mul__distinct(b, a, a);
     1b0:	02000001 	andeq	r0, r0, #1
     1b4:	0000bb30 	andeq	fp, r0, r0, lsr fp
     1b8:	00480800 	subeq	r0, r8, r0, lsl #16

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	76060000 	strvc	r0, [r6], -r0
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	02003875 	andeq	r3, r0, #7667712	; 0x750000
     1c4:	0000cb31 	andeq	ip, r0, r1, lsr fp

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	003a0800 	eorseq	r0, sl, r0, lsl #16
     1cc:	01090000 	mrseq	r0, (UNDEF: 9)
     1d0:	00e53702 	rsceq	r3, r5, r2, lsl #14
     1d4:	530a0000 	movwpl	r0, #40960	; 0xa000
		f25519_select(zm1, zm1, zm, bit);
     1d8:	00000007 	andeq	r0, r0, r7
     1dc:	0001a70a 	andeq	sl, r1, sl, lsl #14
     1e0:	07000100 	streq	r0, [r0, -r0, lsl #2]
		f25519_select(xm, xm, xms, bit);
     1e4:	0000052d 	andeq	r0, r0, sp, lsr #10
     1e8:	00d03702 	sbcseq	r3, r0, r2, lsl #14
     1ec:	040b0000 	streq	r0, [fp], #-0
		f25519_select(zm, zm, zms, bit);
     1f0:	0129ae03 	teqeq	r9, r3, lsl #28
     1f4:	b60c0000 	strlt	r0, [ip], -r0
     1f8:	03000005 	movweq	r0, #5
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	000096af 	andeq	r9, r0, pc, lsr #13
     200:	700c0000 	andvc	r0, ip, r0
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	03000009 	movweq	r0, #9
     208:	000096b0 			; <UNDEFINED> instruction: 0x000096b0
	f25519_mul__distinct(result, zm1, xm);
     20c:	dd0c0100 	stfles	f0, [ip, #-0]
     210:	03000008 	movweq	r0, #8
	f25519_normalize(result);
     214:	000096b1 			; <UNDEFINED> instruction: 0x000096b1
     218:	960c0200 	strls	r0, [ip], -r0, lsl #4
}
     21c:	03000003 	movweq	r0, #3
     220:	0000e5b2 			; <UNDEFINED> instruction: 0x0000e5b2
     224:	07000300 	streq	r0, [r0, -r0, lsl #6]
     228:	000001f5 	strdeq	r0, [r0], -r5
     22c:	00f0b303 	rscseq	fp, r0, r3, lsl #6
     230:	280b0000 	stmdacs	fp, {}	; <UNPREDICTABLE>
     234:	01b4d903 			; <UNDEFINED> instruction: 0x01b4d903
     238:	430d0000 	movwmi	r0, #53248	; 0xd000
     23c:	da030052 	ble	c038c <__Stack_Size+0xbfb8c>
     240:	000000a0 	andeq	r0, r0, r0, lsr #1
     244:	07590c00 	ldrbeq	r0, [r9, -r0, lsl #24]
     248:	db030000 	blle	c0250 <__Stack_Size+0xbfa50>
     24c:	000000a0 	andeq	r0, r0, r0, lsr #1
     250:	49430d04 	stmdbmi	r3, {r2, r8, sl, fp}^
     254:	dc030052 	stcle	0, cr0, [r3], {82}	; 0x52
     258:	000000a0 	andeq	r0, r0, r0, lsr #1
     25c:	002a0c08 	eoreq	r0, sl, r8, lsl #24
     260:	dd030000 	stcle	0, cr0, [r3, #-0]
     264:	000000a0 	andeq	r0, r0, r0, lsr #1
     268:	00f10c0c 	rscseq	r0, r1, ip, lsl #24
     26c:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
     270:	000000a0 	andeq	r0, r0, r0, lsr #1
     274:	04450c10 	strbeq	r0, [r5], #-3088	; 0xc10
     278:	df030000 	svcle	0x00030000
     27c:	000000a0 	andeq	r0, r0, r0, lsr #1
     280:	05ef0c14 	strbeq	r0, [pc, #3092]!	; e9c <__Stack_Size+0x69c>
     284:	e0030000 	and	r0, r3, r0
     288:	000000a0 	andeq	r0, r0, r0, lsr #1
     28c:	00000c18 	andeq	r0, r0, r8, lsl ip
     290:	e1030000 	mrs	r0, (UNDEF: 3)
     294:	000000a0 	andeq	r0, r0, r0, lsr #1
     298:	061a0c1c 			; <UNDEFINED> instruction: 0x061a0c1c
     29c:	e2030000 	and	r0, r3, #0
     2a0:	000000a0 	andeq	r0, r0, r0, lsr #1
     2a4:	53430d20 	movtpl	r0, #15648	; 0x3d20
     2a8:	e3030052 	movw	r0, #12370	; 0x3052
     2ac:	000000a0 	andeq	r0, r0, r0, lsr #1
     2b0:	33070024 	movwcc	r0, #28708	; 0x7024
     2b4:	03000003 	movweq	r0, #3
     2b8:	000134e4 	andeq	r3, r1, r4, ror #9
     2bc:	023d0e00 	eorseq	r0, sp, #0, 28
     2c0:	05010000 	streq	r0, [r1, #-0]
     2c4:	0001e416 	andeq	lr, r1, r6, lsl r4
     2c8:	05320a00 	ldreq	r0, [r2, #-2560]!	; 0xa00
     2cc:	0a000000 	beq	2d4 <_Minimum_Stack_Size+0x1d4>
     2d0:	00000724 	andeq	r0, r0, r4, lsr #14
     2d4:	017e0a01 	cmneq	lr, r1, lsl #20
     2d8:	0a020000 	beq	802e0 <__Stack_Size+0x7fae0>
     2dc:	00000920 	andeq	r0, r0, r0, lsr #18
     2e0:	330f0003 	movwcc	r0, #61443	; 0xf003
     2e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     2e8:	02092404 	andeq	r2, r9, #4, 8	; 0x4000000
     2ec:	e00c0000 	and	r0, ip, r0
     2f0:	04000002 	streq	r0, [r0], #-2
     2f4:	00020926 	andeq	r0, r2, r6, lsr #18
     2f8:	f10c0000 	cpsid	
     2fc:	04000003 	streq	r0, [r0], #-3
     300:	00008b27 	andeq	r8, r0, r7, lsr #22
     304:	04000400 	streq	r0, [r0], #-1024	; 0x400
     308:	00009604 	andeq	r9, r0, r4, lsl #12
     30c:	05720700 	ldrbeq	r0, [r2, #-1792]!	; 0x700
     310:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
     314:	000001e4 	andeq	r0, r0, r4, ror #3
     318:	00057107 	andeq	r7, r5, r7, lsl #2
     31c:	25290400 	strcs	r0, [r9, #-1024]!	; 0x400
     320:	04000002 	streq	r0, [r0], #-2
     324:	0001e404 	andeq	lr, r1, r4, lsl #8
     328:	07c00e00 	strbeq	r0, [r0, r0, lsl #28]
     32c:	04010000 	streq	r0, [r1], #-0
     330:	0002502d 	andeq	r5, r2, sp, lsr #32
     334:	02860a00 	addeq	r0, r6, #0, 20
     338:	0a000000 	beq	340 <_Minimum_Stack_Size+0x240>
     33c:	000009a9 	andeq	r0, r0, r9, lsr #19
     340:	01300a01 	teqeq	r0, r1, lsl #20
     344:	0a020000 	beq	8034c <__Stack_Size+0x7fb4c>
     348:	0000062b 	andeq	r0, r0, fp, lsr #12
     34c:	c1070003 	tstgt	r7, r3
     350:	04000007 	streq	r0, [r0], #-7
     354:	00022b34 	andeq	r2, r2, r4, lsr fp
     358:	05ff0f00 	ldrbeq	r0, [pc, #3840]!	; 1260 <__Stack_Size+0xa60>
     35c:	040c0000 	streq	r0, [ip], #-0
     360:	00029838 	andeq	r9, r2, r8, lsr r8
     364:	01d70c00 	bicseq	r0, r7, r0, lsl #24
     368:	50040000 	andpl	r0, r4, r0
     36c:	0000008b 	andeq	r0, r0, fp, lsl #1
     370:	086d0c00 	stmdaeq	sp!, {sl, fp}^
     374:	51040000 	mrspl	r0, (UNDEF: 4)
     378:	0000008b 	andeq	r0, r0, fp, lsl #1
     37c:	23600c02 	cmncs	r0, #512	; 0x200
     380:	52040000 	andpl	r0, r4, #0
     384:	0000008b 	andeq	r0, r0, fp, lsl #1
     388:	07380c04 	ldreq	r0, [r8, -r4, lsl #24]!
     38c:	53040000 	movwpl	r0, #16384	; 0x4000
     390:	000002a7 	andeq	r0, r0, r7, lsr #5
     394:	09100008 	ldmdbeq	r0, {r3}
     398:	a7000002 	strge	r0, [r0, -r2]
     39c:	11000002 	tstne	r0, r2
     3a0:	0000008b 	andeq	r0, r0, fp, lsl #1
     3a4:	98040400 	stmdals	r4, {sl}
     3a8:	07000002 	streq	r0, [r0, -r2]
     3ac:	00000600 	andeq	r0, r0, r0, lsl #12
     3b0:	025b5404 	subseq	r5, fp, #4, 8	; 0x4000000
     3b4:	230f0000 	movwcs	r0, #61440	; 0xf000
     3b8:	02000006 	andeq	r0, r0, #6
     3bc:	02dd5804 	sbcseq	r5, sp, #4, 16	; 0x40000
     3c0:	700c0000 	andvc	r0, ip, r0
     3c4:	04000003 	streq	r0, [r0], #-3
     3c8:	0000965a 	andeq	r9, r0, sl, asr r6
     3cc:	8c0c0000 	stchi	0, cr0, [ip], {-0}
     3d0:	04000005 	streq	r0, [r0], #-5
     3d4:	0000965b 	andeq	r9, r0, fp, asr r6
     3d8:	07000100 	streq	r0, [r0, -r0, lsl #2]
     3dc:	00000624 	andeq	r0, r0, r4, lsr #12
     3e0:	02b85d04 	adcseq	r5, r8, #4, 26	; 0x100
     3e4:	42120000 	andsmi	r0, r2, #0
     3e8:	04020057 	streq	r0, [r2], #-87	; 0x57
     3ec:	00030c62 	andeq	r0, r3, r2, ror #24
     3f0:	62620d00 	rsbvs	r0, r2, #0, 26
     3f4:	65040030 	strvs	r0, [r4, #-48]	; 0x30
     3f8:	00000096 	muleq	r0, r6, r0
     3fc:	62620d00 	rsbvs	r0, r2, #0, 26
     400:	66040031 			; <UNDEFINED> instruction: 0x66040031
     404:	00000096 	muleq	r0, r6, r0
     408:	02130001 	andseq	r0, r3, #1
     40c:	03285f04 	teqeq	r8, #4, 30
     410:	77140000 	ldrvc	r0, [r4, -r0]
     414:	8b610400 	blhi	184141c <__Stack_Size+0x1840c1c>
     418:	14000000 	strne	r0, [r0], #-0
     41c:	04007762 	streq	r7, [r0], #-1890	; 0x762
     420:	0002e868 	andeq	lr, r2, r8, ror #16
     424:	30070000 	andcc	r0, r7, r0
     428:	04000009 	streq	r0, [r0], #-9
     42c:	00030c69 	andeq	r0, r3, r9, ror #24
     430:	01140f00 	tsteq	r4, r0, lsl #30
     434:	041c0000 	ldreq	r0, [ip], #-0
     438:	0003c46b 	andeq	ip, r3, fp, ror #8
     43c:	07670c00 	strbeq	r0, [r7, -r0, lsl #24]!
     440:	6d040000 	stcvs	0, cr0, [r4, #-0]
     444:	00000096 	muleq	r0, r6, r0
     448:	00150c00 	andseq	r0, r5, r0, lsl #24
     44c:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
     450:	00000096 	muleq	r0, r6, r0
     454:	03110c01 	tsteq	r1, #256	; 0x100
     458:	6f040000 	svcvs	0x00040000
     45c:	00000328 	andeq	r0, r0, r8, lsr #6
     460:	01480c02 	cmpeq	r8, r2, lsl #24
     464:	70040000 	andvc	r0, r4, r0
     468:	00000328 	andeq	r0, r0, r8, lsr #6
     46c:	04eb0c04 	strbteq	r0, [fp], #3076	; 0xc04
     470:	71040000 	mrsvc	r0, (UNDEF: 4)
     474:	00000328 	andeq	r0, r0, r8, lsr #6
     478:	06ef0c06 	strbteq	r0, [pc], r6, lsl #24
     47c:	73040000 	movwvc	r0, #16384	; 0x4000
     480:	00000096 	muleq	r0, r6, r0
     484:	08080c08 	stmdaeq	r8, {r3, sl, fp}
     488:	74040000 	strvc	r0, [r4], #-0
     48c:	00000096 	muleq	r0, r6, r0
     490:	05070c09 	streq	r0, [r7, #-3081]	; 0xc09
     494:	75040000 	strvc	r0, [r4, #-0]
     498:	00000096 	muleq	r0, r6, r0
     49c:	054f0c0a 	strbeq	r0, [pc, #-3082]	; fffff89a <BootRAM+0xef7003b>
     4a0:	76040000 	strvc	r0, [r4], -r0
     4a4:	00000096 	muleq	r0, r6, r0
     4a8:	05d60c0b 	ldrbeq	r0, [r6, #3083]	; 0xc0b
     4ac:	77040000 	strvc	r0, [r4, -r0]
     4b0:	00000096 	muleq	r0, r6, r0
     4b4:	07c80c0c 	strbeq	r0, [r8, ip, lsl #24]
     4b8:	7a040000 	bvc	1004c0 <__Stack_Size+0xffcc0>
     4bc:	000002ad 	andeq	r0, r0, sp, lsr #5
     4c0:	15070010 	strne	r0, [r7, #-16]
     4c4:	04000001 	streq	r0, [r0], #-1
     4c8:	0003337b 	andeq	r3, r3, fp, ror r3
     4cc:	03a90f00 			; <UNDEFINED> instruction: 0x03a90f00
     4d0:	04340000 	ldrteq	r0, [r4], #-0
     4d4:	0004787d 	andeq	r7, r4, sp, ror r8
     4d8:	02960c00 	addseq	r0, r6, #0, 24
     4dc:	7f040000 	svcvc	0x00040000
     4e0:	00000072 	andeq	r0, r0, r2, ror r0
     4e4:	04b80c00 	ldrteq	r0, [r8], #3072	; 0xc00
     4e8:	80040000 	andhi	r0, r4, r0
     4ec:	00000072 	andeq	r0, r0, r2, ror r0
     4f0:	09370c04 	ldmdbeq	r7!, {r2, sl, fp}
     4f4:	83040000 	movwhi	r0, #16384	; 0x4000
     4f8:	00000072 	andeq	r0, r0, r2, ror r0
     4fc:	07780c08 	ldrbeq	r0, [r8, -r8, lsl #24]!
     500:	84040000 	strhi	r0, [r4], #-0
     504:	00000072 	andeq	r0, r0, r2, ror r0
     508:	02c30c0c 	sbceq	r0, r3, #12, 24	; 0xc00
     50c:	96040000 	strls	r0, [r4], -r0
     510:	00000487 	andeq	r0, r0, r7, lsl #9
     514:	006d0c10 	rsbeq	r0, sp, r0, lsl ip
     518:	a1040000 	mrsge	r0, (UNDEF: 4)
     51c:	00000487 	andeq	r0, r0, r7, lsl #9
     520:	09c50c14 	stmibeq	r5, {r2, r4, sl, fp}^
     524:	ab040000 	blge	10052c <__Stack_Size+0xffd2c>
     528:	000004a1 	andeq	r0, r0, r1, lsr #9
     52c:	02d70c18 	sbcseq	r0, r7, #24, 24	; 0x1800
     530:	ad040000 	stcge	0, cr0, [r4, #-0]
     534:	000002a7 	andeq	r0, r0, r7, lsr #5
     538:	03b90c1c 			; <UNDEFINED> instruction: 0x03b90c1c
     53c:	ae040000 	cdpge	0, 0, cr0, cr4, cr0, {0}
     540:	000002a7 	andeq	r0, r0, r7, lsr #5
     544:	01c30c20 	biceq	r0, r3, r0, lsr #24
     548:	af040000 	svcge	0x00040000
     54c:	000002a7 	andeq	r0, r0, r7, lsr #5
     550:	03420c24 	movteq	r0, #11300	; 0x2c24
     554:	b0040000 	andlt	r0, r4, r0
     558:	000002a7 	andeq	r0, r0, r7, lsr #5
     55c:	04670c28 	strbteq	r0, [r7], #-3112	; 0xc28
     560:	b2040000 	andlt	r0, r4, #0
     564:	00000209 	andeq	r0, r0, r9, lsl #4
     568:	235d0c2c 	cmpcs	sp, #44, 24	; 0x2c00
     56c:	b3040000 	movwlt	r0, #16384	; 0x4000
     570:	00000096 	muleq	r0, r6, r0
     574:	50100030 	andspl	r0, r0, r0, lsr r0
     578:	87000002 	strhi	r0, [r0, -r2]
     57c:	11000004 	tstne	r0, r4
     580:	00000096 	muleq	r0, r6, r0
     584:	78040400 	stmdavc	r4, {sl}
     588:	10000004 	andne	r0, r0, r4
     58c:	00000250 	andeq	r0, r0, r0, asr r2
     590:	000004a1 	andeq	r0, r0, r1, lsr #9
     594:	00009611 	andeq	r9, r0, r1, lsl r6
     598:	00961100 	addseq	r1, r6, r0, lsl #2
     59c:	04000000 	streq	r0, [r0], #-0
     5a0:	00048d04 	andeq	r8, r4, r4, lsl #26
     5a4:	03aa0700 			; <UNDEFINED> instruction: 0x03aa0700
     5a8:	b5040000 	strlt	r0, [r4, #-0]
     5ac:	000003cf 	andeq	r0, r0, pc, asr #7
     5b0:	00008a0f 	andeq	r8, r0, pc, lsl #20
     5b4:	b7042400 	strlt	r2, [r4, -r0, lsl #8]
     5b8:	0000052b 	andeq	r0, r0, fp, lsr #10
     5bc:	0005a00c 	andeq	sl, r5, ip
     5c0:	72b90400 	adcsvc	r0, r9, #0, 8
     5c4:	00000000 	andeq	r0, r0, r0
     5c8:	00041d0c 	andeq	r1, r4, ip, lsl #26
     5cc:	72ba0400 	adcsvc	r0, sl, #0, 8
     5d0:	04000000 	streq	r0, [r0], #-0
     5d4:	00029b0c 	andeq	r9, r2, ip, lsl #22
     5d8:	72bb0400 	adcsvc	r0, fp, #0, 8
     5dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     5e0:	0004330c 	andeq	r3, r4, ip, lsl #6
     5e4:	72bc0400 	adcsvc	r0, ip, #0, 8
     5e8:	0c000000 	stceq	0, cr0, [r0], {-0}
     5ec:	0000a20c 	andeq	sl, r0, ip, lsl #4
     5f0:	72bd0400 	adcsvc	r0, sp, #0, 8
     5f4:	10000000 	andne	r0, r0, r0
     5f8:	0007410c 	andeq	r4, r7, ip, lsl #2
     5fc:	72be0400 	adcsvc	r0, lr, #0, 8
     600:	14000000 	strne	r0, [r0], #-0
     604:	0008f80c 	andeq	pc, r8, ip, lsl #16
     608:	72bf0400 	adcsvc	r0, pc, #0, 8
     60c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     610:	0001910c 	andeq	r9, r1, ip, lsl #2
     614:	72c00400 	sbcvc	r0, r0, #0, 8
     618:	1c000000 	stcne	0, cr0, [r0], {-0}
     61c:	0002ad0c 	andeq	sl, r2, ip, lsl #26
     620:	72c10400 	sbcvc	r0, r1, #0, 8
     624:	20000000 	andcs	r0, r0, r0
     628:	008b0700 	addeq	r0, fp, r0, lsl #14
     62c:	c3040000 	movwgt	r0, #16384	; 0x4000
     630:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
     634:	0000fa0e 	andeq	pc, r0, lr, lsl #20
     638:	3d060100 	stfccs	f0, [r6, #-0]
     63c:	00000573 	andeq	r0, r0, r3, ror r5
     640:	0005c60a 	andeq	ip, r5, sl, lsl #12
     644:	570a0000 	strpl	r0, [sl, -r0]
     648:	01000004 	tsteq	r0, r4
     64c:	0000080a 	andeq	r0, r0, sl, lsl #16
     650:	670a0200 	strvs	r0, [sl, -r0, lsl #4]
     654:	03000001 	movweq	r0, #1
     658:	0008d00a 	andeq	sp, r8, sl
     65c:	8c0a0400 	cfstrshi	mvf0, [sl], {-0}
     660:	05000003 	streq	r0, [r0, #-3]
     664:	0004ca0a 	andeq	ip, r4, sl, lsl #20
     668:	1c0a0600 	stcne	6, cr0, [sl], {-0}
     66c:	07000003 	streq	r0, [r0, -r3]
     670:	00fb0700 	rscseq	r0, fp, r0, lsl #14
     674:	46060000 	strmi	r0, [r6], -r0
     678:	00000536 	andeq	r0, r0, r6, lsr r5
     67c:	0008790e 	andeq	r7, r8, lr, lsl #18
     680:	48060100 	stmdami	r6, {r8}
     684:	000005af 	andeq	r0, r0, pc, lsr #11
     688:	0008870a 	andeq	r8, r8, sl, lsl #14
     68c:	5c0a0000 	stcpl	0, cr0, [sl], {-0}
     690:	01000009 	tsteq	r0, r9
     694:	0004e30a 	andeq	lr, r4, sl, lsl #6
     698:	920a0200 	andls	r0, sl, #0, 4
     69c:	03000009 	movweq	r0, #9
     6a0:	0003cd0a 	andeq	ip, r3, sl, lsl #26
     6a4:	f70a0400 			; <UNDEFINED> instruction: 0xf70a0400
     6a8:	05000007 	streq	r0, [r0, #-7]
     6ac:	087a0700 	ldmdaeq	sl!, {r8, r9, sl}^
     6b0:	4f060000 	svcmi	0x00060000
     6b4:	0000057e 	andeq	r0, r0, lr, ror r5
     6b8:	6301020b 	movwvs	r0, #4619	; 0x120b
     6bc:	000005db 	ldrdeq	r0, [r0], -fp
     6c0:	0003010c 	andeq	r0, r3, ip, lsl #2
     6c4:	db640100 	blle	1900acc <__Stack_Size+0x19002cc>
     6c8:	00000005 	andeq	r0, r0, r5
     6cc:	0003080c 	andeq	r0, r3, ip, lsl #16
     6d0:	e0650100 	rsb	r0, r5, r0, lsl #2
     6d4:	01000005 	tsteq	r0, r5
     6d8:	05730800 	ldrbeq	r0, [r3, #-2048]!	; 0x800
     6dc:	96080000 	strls	r0, [r8], -r0
     6e0:	15000000 	strne	r0, [r0, #-0]
     6e4:	00000121 	andeq	r0, r0, r1, lsr #2
     6e8:	50018801 	andpl	r8, r1, r1, lsl #16
     6ec:	01000002 	tsteq	r0, r2
     6f0:	00000603 	andeq	r0, r0, r3, lsl #12
     6f4:	0005f716 	andeq	pc, r5, r6, lsl r7	; <UNPREDICTABLE>
     6f8:	01880100 	orreq	r0, r8, r0, lsl #2
     6fc:	00000096 	muleq	r0, r6, r0
     700:	03281700 	teqeq	r8, #0, 14
     704:	ad010000 	stcge	0, cr0, [r1, #-0]
     708:	01081801 	tsteq	r8, r1, lsl #16
     70c:	a7010000 	strge	r0, [r1, -r0]
     710:	08000b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp}
     714:	00000002 	andeq	r0, r0, r2
     718:	be199c01 	cdplt	12, 1, cr9, cr9, cr1, {0}
     71c:	01000004 	tsteq	r0, r4
     720:	0b9a0157 	bleq	fe680c84 <BootRAM+0xd5f1425>
     724:	00020800 	andeq	r0, r2, r0, lsl #16
     728:	9c010000 	stcls	0, cr0, [r1], {-0}
     72c:	00049a19 	andeq	r9, r4, r9, lsl sl
     730:	015c0100 	cmpeq	ip, r0, lsl #2
     734:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
     738:	00000002 	andeq	r0, r0, r2
     73c:	da1a9c01 	ble	6a7748 <__Stack_Size+0x6a6f48>
     740:	01000000 	mrseq	r0, (UNDEF: 0)
     744:	02500193 	subseq	r0, r0, #-1073741788	; 0xc0000024
     748:	0b9e0000 	bleq	fe780750 <BootRAM+0xd6f0ef1>
     74c:	000a0800 	andeq	r0, sl, r0, lsl #16
     750:	9c010000 	stcls	0, cr0, [r1], {-0}
     754:	00000679 	andeq	r0, r0, r9, ror r6
     758:	0000631b 	andeq	r6, r0, fp, lsl r3
     75c:	01930100 	orrseq	r0, r3, r0, lsl #2
     760:	00000096 	muleq	r0, r6, r0
     764:	00000000 	andeq	r0, r0, r0
     768:	0001731c 	andeq	r7, r1, ip, lsl r3
     76c:	01930100 	orrseq	r0, r3, r0, lsl #2
     770:	00000096 	muleq	r0, r6, r0
     774:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
     778:	00000206 	andeq	r0, r0, r6, lsl #4
     77c:	a801bf01 	stmdage	r1, {r0, r8, r9, sl, fp, ip, sp, pc}
     780:	0208000b 	andeq	r0, r8, #11
     784:	01000000 	mrseq	r0, (UNDEF: 0)
     788:	0153199c 			; <UNDEFINED> instruction: 0x0153199c
     78c:	c4010000 	strgt	r0, [r1], #-0
     790:	000bac01 	andeq	sl, fp, r1, lsl #24
     794:	00001808 	andeq	r1, r0, r8, lsl #16
     798:	199c0100 	ldmibne	ip, {r8}
     79c:	00000706 	andeq	r0, r0, r6, lsl #14
     7a0:	c401cb01 	strgt	ip, [r1], #-2817	; 0xb01
     7a4:	0208000b 	andeq	r0, r8, #11
     7a8:	01000000 	mrseq	r0, (UNDEF: 0)
     7ac:	04f7199c 	ldrbteq	r1, [r7], #2460	; 0x99c
     7b0:	d0010000 	andle	r0, r1, r0
     7b4:	000bc601 	andeq	ip, fp, r1, lsl #12
     7b8:	00000208 	andeq	r0, r0, r8, lsl #4
     7bc:	199c0100 	ldmibne	ip, {r8}
     7c0:	0000084c 	andeq	r0, r0, ip, asr #16
     7c4:	c801d501 	stmdagt	r1, {r0, r8, sl, ip, lr, pc}
     7c8:	0208000b 	andeq	r0, r8, #11
     7cc:	01000000 	mrseq	r0, (UNDEF: 0)
     7d0:	0910199c 	ldmdbeq	r0, {r2, r3, r4, r7, r8, fp, ip}
     7d4:	da010000 	ble	407dc <__Stack_Size+0x3ffdc>
     7d8:	000bca01 	andeq	ip, fp, r1, lsl #20
     7dc:	00000208 	andeq	r0, r0, r8, lsl #4
     7e0:	199c0100 	ldmibne	ip, {r8}
     7e4:	00000227 	andeq	r0, r0, r7, lsr #4
     7e8:	cc01df01 	stcgt	15, cr13, [r1], {1}
     7ec:	0208000b 	andeq	r0, r8, #11
     7f0:	01000000 	mrseq	r0, (UNDEF: 0)
     7f4:	0859199c 	ldmdaeq	r9, {r2, r3, r4, r7, r8, fp, ip}^
     7f8:	e4010000 	str	r0, [r1], #-0
     7fc:	000bce01 	andeq	ip, fp, r1, lsl #28
     800:	00000208 	andeq	r0, r0, r8, lsl #4
     804:	199c0100 	ldmibne	ip, {r8}
     808:	000001ac 	andeq	r0, r0, ip, lsr #3
     80c:	d001e901 	andle	lr, r1, r1, lsl #18
     810:	0c08000b 	stceq	0, cr0, [r8], {11}
     814:	01000000 	mrseq	r0, (UNDEF: 0)
     818:	04b51d9c 	ldrteq	r1, [r5], #3484	; 0xd9c
     81c:	3d010000 	stccc	0, cr0, [r1, #-0]
     820:	000bdc01 	andeq	sp, fp, r1, lsl #24
     824:	0000a808 	andeq	sl, r0, r8, lsl #16
     828:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
     82c:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
     830:	08000c0c 	stmdaeq	r0, {r2, r3, sl, fp}
     834:	00000012 	andeq	r0, r0, r2, lsl r0
     838:	0000074f 	andeq	r0, r0, pc, asr #14
     83c:	00075e1f 	andeq	r5, r7, pc, lsl lr
     840:	01480100 	mrseq	r0, (UNDEF: 88)
     844:	0000008b 	andeq	r0, r0, fp, lsl #1
     848:	00000021 	andeq	r0, r0, r1, lsr #32
     84c:	0be22000 	bleq	ff888854 <BootRAM+0xe7f8ff5>
     850:	0d280800 	stceq	8, cr0, [r8, #-0]
     854:	42210000 	eormi	r0, r1, #0
     858:	2f08000c 	svccs	0x0008000c
     85c:	6c00000d 	stcvs	0, cr0, [r0], {13}
     860:	22000007 	andcs	r0, r0, #7
     864:	74025001 	strvc	r5, [r2], #-1
     868:	50210000 	eorpl	r0, r1, r0
     86c:	4108000c 	tstmi	r8, ip
     870:	8000000d 	andhi	r0, r0, sp
     874:	22000007 	andcs	r0, r0, #7
     878:	74025001 	strvc	r5, [r2], #-1
     87c:	56210000 	strtpl	r0, [r1], -r0
     880:	5808000c 	stmdapl	r8, {r2, r3}
     884:	9400000d 	strls	r0, [r0], #-13
     888:	22000007 	andcs	r0, r0, #7
     88c:	74025001 	strvc	r5, [r2], #-1
     890:	66230000 	strtvs	r0, [r3], -r0
     894:	6a08000c 	bvs	2008cc <__Stack_Size+0x2000cc>
     898:	2200000d 	andcs	r0, r0, #13
     89c:	30015001 	andcc	r5, r1, r1
     8a0:	ea1a0000 	b	6808a8 <__Stack_Size+0x6800a8>
     8a4:	01000007 	tsteq	r0, r7
     8a8:	02500161 	subseq	r0, r0, #1073741848	; 0x40000018
     8ac:	0c840000 	stceq	0, cr0, [r4], {0}
     8b0:	00600800 	rsbeq	r0, r0, r0, lsl #16
     8b4:	9c010000 	stcls	0, cr0, [r1], {-0}
     8b8:	000007f4 	strdeq	r0, [r0], -r4
     8bc:	0005f71b 	andeq	pc, r5, fp, lsl r7	; <UNPREDICTABLE>
     8c0:	01610100 	cmneq	r1, r0, lsl #2
     8c4:	00000096 	muleq	r0, r6, r0
     8c8:	00000070 	andeq	r0, r0, r0, ror r0
     8cc:	00060e1f 	andeq	r0, r6, pc, lsl lr
     8d0:	01620100 	cmneq	r2, r0, lsl #2
     8d4:	000002a7 	andeq	r0, r0, r7, lsr #5
     8d8:	00000091 	muleq	r0, r1, r0
     8dc:	000c9c20 	andeq	r9, ip, r0, lsr #24
     8e0:	000d7b08 	andeq	r7, sp, r8, lsl #22
     8e4:	0cc82400 	cfstrdeq	mvd2, [r8], {0}
     8e8:	01220800 	teqeq	r2, r0, lsl #16
     8ec:	00740250 	rsbseq	r0, r4, r0, asr r2
     8f0:	d41a0000 	ldrle	r0, [sl], #-0
     8f4:	01000002 	tsteq	r0, r2
     8f8:	0209019d 	andeq	r0, r9, #1073741863	; 0x40000027
     8fc:	0ce40000 	stcleq	0, cr0, [r4]
     900:	000c0800 	andeq	r0, ip, r0, lsl #16
     904:	9c010000 	stcls	0, cr0, [r1], {-0}
     908:	00000828 	andeq	r0, r0, r8, lsr #16
     90c:	6e656c25 	cdpvs	12, 6, cr6, cr5, cr5, {1}
     910:	019d0100 	orrseq	r0, sp, r0, lsl #2
     914:	0000008b 	andeq	r0, r0, fp, lsl #1
     918:	000000c8 	andeq	r0, r0, r8, asr #1
     91c:	000cea26 	andeq	lr, ip, r6, lsr #20
     920:	000d8608 	andeq	r8, sp, r8, lsl #12
     924:	b61a0000 	ldrlt	r0, [sl], -r0
     928:	01000003 	tsteq	r0, r3
     92c:	020901a2 	andeq	r0, r9, #-2147483608	; 0x80000028
     930:	0cf00000 	ldcleq	0, cr0, [r0]
     934:	000c0800 	andeq	r0, ip, r0, lsl #16
     938:	9c010000 	stcls	0, cr0, [r1], {-0}
     93c:	0000085c 	andeq	r0, r0, ip, asr r8
     940:	6e656c25 	cdpvs	12, 6, cr6, cr5, cr5, {1}
     944:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
     948:	0000008b 	andeq	r0, r0, fp, lsl #1
     94c:	000000e9 	andeq	r0, r0, r9, ror #1
     950:	000cf626 	andeq	pc, ip, r6, lsr #12
     954:	000d8608 	andeq	r8, sp, r8, lsl #12
     958:	c01a0000 	andsgt	r0, sl, r0
     95c:	01000001 	tsteq	r0, r1
     960:	020901a7 	andeq	r0, r9, #-1073741783	; 0xc0000029
     964:	0cfc0000 	ldcleq	0, cr0, [ip]
     968:	00200800 	eoreq	r0, r0, r0, lsl #16
     96c:	9c010000 	stcls	0, cr0, [r1], {-0}
     970:	0000089c 	muleq	r0, ip, r8
     974:	6e656c25 	cdpvs	12, 6, cr6, cr5, cr5, {1}
     978:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     97c:	0000008b 	andeq	r0, r0, fp, lsl #1
     980:	0000010a 	andeq	r0, r0, sl, lsl #2
     984:	00002127 	andeq	r2, r0, r7, lsr #2
     988:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
     98c:	00000096 	muleq	r0, r6, r0
     990:	000d1026 	andeq	r1, sp, r6, lsr #32
     994:	000d8608 	andeq	r8, sp, r8, lsl #12
     998:	3f1a0000 	svccc	0x001a0000
     99c:	01000003 	tsteq	r0, r3
     9a0:	020901b1 	andeq	r0, r9, #1073741868	; 0x4000002c
     9a4:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
     9a8:	000c0800 	andeq	r0, ip, r0, lsl #16
     9ac:	9c010000 	stcls	0, cr0, [r1], {-0}
     9b0:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     9b4:	6e656c25 	cdpvs	12, 6, cr6, cr5, cr5, {1}
     9b8:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
     9bc:	0000008b 	andeq	r0, r0, fp, lsl #1
     9c0:	00000144 	andeq	r0, r0, r4, asr #2
     9c4:	000d2226 	andeq	r2, sp, r6, lsr #4
     9c8:	000d8608 	andeq	r8, sp, r8, lsl #12
     9cc:	e5280000 	str	r0, [r8, #-0]!
     9d0:	28000005 	stmdacs	r0, {r0, r2}
     9d4:	2808000d 	stmdacs	r8, {r0, r2, r3}
     9d8:	01000000 	mrseq	r0, (UNDEF: 0)
     9dc:	0009099c 	muleq	r9, ip, r9
     9e0:	05f62900 	ldrbeq	r2, [r6, #2304]!	; 0x900
     9e4:	01650000 	cmneq	r5, r0
     9e8:	382a0000 	stmdacc	sl!, {}	; <UNPREDICTABLE>
     9ec:	0e08000d 	cdpeq	0, 0, cr0, cr8, cr13, {0}
     9f0:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
     9f4:	000005f6 	strdeq	r0, [r0], -r6
     9f8:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
     9fc:	000d3c20 	andeq	r3, sp, r0, lsr #24
     a00:	000d7b08 	andeq	r7, sp, r8, lsl #22
     a04:	2b000000 	blcs	a0c <__Stack_Size+0x20c>
     a08:	000007d2 	ldrdeq	r0, [r0], -r2
     a0c:	0d506c01 	ldcleq	12, cr6, [r0, #-4]
     a10:	00680800 	rsbeq	r0, r8, r0, lsl #16
     a14:	9c010000 	stcls	0, cr0, [r1], {-0}
     a18:	00000987 	andeq	r0, r0, r7, lsl #19
     a1c:	00071e2c 	andeq	r1, r7, ip, lsr #28
     a20:	878d0100 	strhi	r0, [sp, r0, lsl #2]
     a24:	02000009 	andeq	r0, r0, #9
     a28:	032d6c91 	teqeq	sp, #37120	; 0x9100
     a2c:	9c000006 	stcls	0, cr0, [r0], {6}
     a30:	0408000d 	streq	r0, [r8], #-13
     a34:	01000000 	mrseq	r0, (UNDEF: 0)
     a38:	0009499c 	muleq	r9, ip, r9
     a3c:	0da02000 	stceq	0, cr2, [r0]
     a40:	0da00800 	stceq	8, cr0, [r0]
     a44:	21000000 	mrscs	r0, (UNDEF: 0)
     a48:	08000d5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sl, fp}
     a4c:	00000da7 	andeq	r0, r0, r7, lsr #27
     a50:	0000096a 	andeq	r0, r0, sl, ror #18
     a54:	01520122 	cmpeq	r2, r2, lsr #2
     a58:	51012230 	tstpl	r1, r0, lsr r2
     a5c:	01223c01 	teqeq	r2, r1, lsl #24
     a60:	000c0550 	andeq	r0, ip, r0, asr r5
     a64:	00400108 	subeq	r0, r0, r8, lsl #2
     a68:	000d6621 	andeq	r6, sp, r1, lsr #12
     a6c:	000dc308 	andeq	ip, sp, r8, lsl #6
     a70:	00097d00 	andeq	r7, r9, r0, lsl #26
     a74:	50012200 	andpl	r2, r1, r0, lsl #4
     a78:	20003c01 	andcs	r3, r0, r1, lsl #24
     a7c:	08000d82 	stmdaeq	r0, {r1, r7, r8, sl, fp}
     a80:	00000dd9 	ldrdeq	r0, [r0], -r9
     a84:	00800800 	addeq	r0, r0, r0, lsl #16
     a88:	03280000 	teqeq	r8, #0
     a8c:	00000006 	andeq	r0, r0, r6
     a90:	04000000 	streq	r0, [r0], #-0
     a94:	01000000 	mrseq	r0, (UNDEF: 0)
     a98:	0009a99c 	muleq	r9, ip, r9
     a9c:	00002600 	andeq	r2, r0, r0, lsl #12
     aa0:	0da00000 	stceq	0, cr0, [r0]
     aa4:	2b000000 	blcs	aac <__Stack_Size+0x2ac>
     aa8:	00000581 	andeq	r0, r0, r1, lsl #11
     aac:	0db8b301 	ldceq	3, cr11, [r8, #4]!
     ab0:	001c0800 	andseq	r0, ip, r0, lsl #16
     ab4:	9c010000 	stcls	0, cr0, [r1], {-0}
     ab8:	000009ce 	andeq	r0, r0, lr, asr #19
     abc:	0005612e 	andeq	r6, r5, lr, lsr #2
     ac0:	8bb50100 	blhi	fed40ec8 <BootRAM+0xdcb1669>
     ac4:	b5000000 	strlt	r0, [r0, #-0]
     ac8:	00000001 	andeq	r0, r0, r1
     acc:	0004a72b 	andeq	sl, r4, fp, lsr #14
     ad0:	d4be0100 	ldrtle	r0, [lr], #256	; 0x100
     ad4:	1808000d 	stmdane	r8, {r0, r2, r3}
     ad8:	01000000 	mrseq	r0, (UNDEF: 0)
     adc:	0009f69c 	muleq	r9, ip, r6
     ae0:	05612c00 	strbeq	r2, [r1, #-3072]!	; 0xc00
     ae4:	c0010000 	andgt	r0, r1, r0
     ae8:	0000008b 	andeq	r0, r0, fp, lsl #1
     aec:	09007106 	stmdbeq	r0, {r1, r2, r8, ip, sp, lr}
     af0:	009f1afb 			; <UNDEFINED> instruction: 0x009f1afb
     af4:	00047d2b 	andeq	r7, r4, fp, lsr #26
     af8:	eccb0100 	stfe	f0, [fp], {0}
     afc:	8408000d 	strhi	r0, [r8], #-13
     b00:	01000000 	mrseq	r0, (UNDEF: 0)
     b04:	000a3c9c 	muleq	sl, ip, ip
     b08:	08262f00 	stmdaeq	r6!, {r8, r9, sl, fp, sp}
     b0c:	cb010000 	blgt	40b14 <__Stack_Size+0x40314>
     b10:	00000573 	andeq	r0, r0, r3, ror r5
     b14:	000001cc 	andeq	r0, r0, ip, asr #3
     b18:	0005612e 	andeq	r6, r5, lr, lsr #2
     b1c:	8bcd0100 	blhi	ff340f24 <BootRAM+0xe2b16c5>
     b20:	1f000000 	svcne	0x00000000
     b24:	20000002 	andcs	r0, r0, r2
     b28:	08000e0a 	stmdaeq	r0, {r1, r3, r9, sl, fp}
     b2c:	000009ce 	andeq	r0, r0, lr, asr #19
     b30:	000e1020 	andeq	r1, lr, r0, lsr #32
     b34:	0009ce08 	andeq	ip, r9, r8, lsl #28
     b38:	4c300000 	ldcmi	0, cr0, [r0], #-0
     b3c:	01000004 	tsteq	r0, r4
     b40:	000250fc 	strdeq	r5, [r2], -ip
     b44:	000e7000 	andeq	r7, lr, r0
     b48:	00004808 	andeq	r4, r0, r8, lsl #16
     b4c:	739c0100 	orrsvc	r0, ip, #0, 2
     b50:	3100000a 	tstcc	r0, sl
     b54:	08000ea2 	stmdaeq	r0, {r1, r5, r7, r9, sl, fp}
     b58:	00000da7 	andeq	r0, r0, r7, lsr #27
     b5c:	01520122 	cmpeq	r2, r2, lsr #2
     b60:	51012231 	tstpl	r1, r1, lsr r2
     b64:	01223c01 	teqeq	r2, r1, lsl #24
     b68:	000c0550 	andeq	r0, ip, r0, asr r5
     b6c:	00400108 	subeq	r0, r0, r8, lsl #2
     b70:	06e31a00 	strbteq	r1, [r3], r0, lsl #20
     b74:	14010000 	strne	r0, [r1], #-0
     b78:	00025001 	andeq	r5, r2, r1
     b7c:	000eb800 	andeq	fp, lr, r0, lsl #16
     b80:	00003c08 	andeq	r3, r0, r8, lsl #24
     b84:	ac9c0100 	ldfges	f0, [ip], {0}
     b88:	3100000a 	tstcc	r0, sl
     b8c:	08000ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp}
     b90:	00000da7 	andeq	r0, r0, r7, lsr #27
     b94:	02520122 	subseq	r0, r2, #-2147483640	; 0x80000008
     b98:	01220074 	teqeq	r2, r4, ror r0
     b9c:	223c0151 	eorscs	r0, ip, #1073741844	; 0x40000014
     ba0:	0c055001 	stceq	0, cr5, [r5], {1}
     ba4:	40010800 	andmi	r0, r1, r0, lsl #16
     ba8:	672b0000 	strvs	r0, [fp, -r0]!
     bac:	01000005 	tsteq	r0, r5
     bb0:	000ef4a0 	andeq	pc, lr, r0, lsr #9
     bb4:	00000408 	andeq	r0, r0, r8, lsl #8
     bb8:	cb9c0100 	blgt	fe700fc0 <BootRAM+0xd671761>
     bbc:	2600000a 	strcs	r0, [r0], -sl
     bc0:	08000ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp}
     bc4:	00000a73 	andeq	r0, r0, r3, ror sl
     bc8:	04731d00 	ldrbteq	r1, [r3], #-3328	; 0xd00
     bcc:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
     bd0:	000ef801 	andeq	pc, lr, r1, lsl #16
     bd4:	00002408 	andeq	r2, r0, r8, lsl #8
     bd8:	019c0100 	orrseq	r0, ip, r0, lsl #2
     bdc:	3200000b 	andcc	r0, r0, #11
     be0:	00000401 	andeq	r0, r0, r1, lsl #8
     be4:	2901f201 	stmdbcs	r1, {r0, r9, ip, sp, lr, pc}
     be8:	02000001 	andeq	r0, r0, #1
     bec:	16317491 			; <UNDEFINED> instruction: 0x16317491
     bf0:	e508000f 	str	r0, [r8, #-15]
     bf4:	2200000d 	andcs	r0, r0, #13
     bf8:	7d025001 	stcvc	0, cr5, [r2, #-4]
     bfc:	1d000004 	stcne	0, cr0, [r0, #-16]
     c00:	0000005b 	andeq	r0, r0, fp, asr r0
     c04:	1c012d01 	stcne	13, cr2, [r1], {1}
     c08:	4008000f 	andmi	r0, r8, pc
     c0c:	01000000 	mrseq	r0, (UNDEF: 0)
     c10:	000b339c 	muleq	fp, ip, r3
     c14:	0f222000 	svceq	0x00222000
     c18:	0dfd0800 	ldcleq	8, cr0, [sp]
     c1c:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     c20:	3c08000f 	stccc	0, cr0, [r8], {15}
     c24:	2000000a 	andcs	r0, r0, sl
     c28:	08000f42 	stmdaeq	r0, {r1, r6, r8, r9, sl, fp}
     c2c:	00000acb 	andeq	r0, r0, fp, asr #21
     c30:	00801d00 	addeq	r1, r0, r0, lsl #26
     c34:	fb010000 	blx	40c3e <__Stack_Size+0x4043e>
     c38:	000f5c01 	andeq	r5, pc, r1, lsl #24
     c3c:	00002208 	andeq	r2, r0, r8, lsl #4
     c40:	699c0100 	ldmibvs	ip, {r8}
     c44:	3200000b 	andcc	r0, r0, #11
     c48:	00000401 	andeq	r0, r0, r1, lsl #8
     c4c:	2901fd01 	stmdbcs	r1, {r0, r8, sl, fp, ip, sp, lr, pc}
     c50:	02000001 	andeq	r0, r0, #1
     c54:	78317491 	ldmdavc	r1!, {r0, r4, r7, sl, ip, sp, lr}
     c58:	e508000f 	str	r0, [r8, #-15]
     c5c:	2200000d 	andcs	r0, r0, #13
     c60:	7d025001 	stcvc	0, cr5, [r2, #-4]
     c64:	33000004 	movwcc	r0, #4
     c68:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
     c6c:	80020501 	andhi	r0, r2, r1, lsl #10
     c70:	b408000f 	strlt	r0, [r8], #-15
     c74:	01000000 	mrseq	r0, (UNDEF: 0)
     c78:	000bb49c 	muleq	fp, ip, r4
     c7c:	0f9c2000 	svceq	0x009c2000
     c80:	0e040800 	cdpeq	8, 0, cr0, cr4, cr0, {0}
     c84:	d6210000 	strtle	r0, [r1], -r0
     c88:	f608000f 			; <UNDEFINED> instruction: 0xf608000f
     c8c:	9b000009 	blls	cb8 <__Stack_Size+0x4b8>
     c90:	2200000b 	andcs	r0, r0, #11
     c94:	30015001 	andcc	r5, r1, r1
     c98:	0fe42000 	svceq	0x00e42000
     c9c:	09a90800 	stmibeq	r9!, {fp}
     ca0:	1c230000 	stcne	0, cr0, [r3], #-0
     ca4:	f6080010 			; <UNDEFINED> instruction: 0xf6080010
     ca8:	22000009 	andcs	r0, r0, #9
     cac:	37015001 	strcc	r5, [r1, -r1]
     cb0:	43340000 	teqmi	r4, #0
     cb4:	01000005 	tsteq	r0, r5
     cb8:	05af0255 	streq	r0, [pc, #597]!	; f15 <__Stack_Size+0x715>
     cbc:	00000000 	andeq	r0, r0, r0
     cc0:	000c0000 	andeq	r0, ip, r0
     cc4:	9c010000 	stcls	0, cr0, [r1], {-0}
     cc8:	00041435 	andeq	r1, r4, r5, lsr r4
     ccc:	d9690100 	stmdble	r9!, {r8}^
     cd0:	0000000b 	andeq	r0, r0, fp
     cd4:	36400210 			; <UNDEFINED> instruction: 0x36400210
     cd8:	00000bde 	ldrdeq	r0, [r0], -lr
     cdc:	01b40404 			; <UNDEFINED> instruction: 0x01b40404
     ce0:	02370000 	eorseq	r0, r7, #0
     ce4:	01000008 	tsteq	r0, r8
     ce8:	0000b02b 	andeq	fp, r0, fp, lsr #32
     cec:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
     cf0:	37200004 	strcc	r0, [r0, -r4]!
     cf4:	000002eb 	andeq	r0, r0, fp, ror #5
     cf8:	04a73301 	strteq	r3, [r7], #769	; 0x301
     cfc:	03050000 	movweq	r0, #20480	; 0x5000
     d00:	20000014 	andcs	r0, r0, r4, lsl r0
     d04:	0021a837 	eoreq	sl, r1, r7, lsr r8
     d08:	2b430100 	blcs	10c1110 <__Stack_Size+0x10c0910>
     d0c:	05000005 	streq	r0, [r0, #-5]
     d10:	00008003 	andeq	r8, r0, r3
     d14:	021a3720 	andseq	r3, sl, #32, 14	; 0x800000
     d18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     d1c:	000002dd 	ldrdeq	r0, [r0], -sp
     d20:	00a40305 	adceq	r0, r4, r5, lsl #6
     d24:	e8382000 	ldmda	r8!, {sp}
     d28:	07000001 	streq	r0, [r0, -r1]
     d2c:	000c3322 	andeq	r3, ip, r2, lsr #6
     d30:	c4040400 	strgt	r0, [r4], #-1024	; 0x400
     d34:	38000003 	stmdacc	r0, {r0, r1}
     d38:	0000013e 	andeq	r0, r0, lr, lsr r1
     d3c:	0c442507 	cfstr64eq	mvdx2, [r4], {7}
     d40:	04040000 	streq	r0, [r4], #-0
     d44:	000004a7 	andeq	r0, r0, r7, lsr #9
     d48:	00051d38 	andeq	r1, r5, r8, lsr sp
     d4c:	8b2d0700 	blhi	b42954 <__Stack_Size+0xb42154>
     d50:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     d54:	00000a27 	andeq	r0, r0, r7, lsr #20
     d58:	020f2308 	andeq	r2, pc, #8, 6	; 0x20000000
     d5c:	44380000 	ldrtmi	r0, [r8], #-0
     d60:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     d64:	00020f24 	andeq	r0, r2, r4, lsr #30
     d68:	020f3900 	andeq	r3, pc, #0, 18
     d6c:	0c7b0000 	ldcleq	0, cr0, [fp], #-0
     d70:	6b3a0000 	blvs	e80d78 <__Stack_Size+0xe80578>
     d74:	06000000 	streq	r0, [r0], -r0
     d78:	03d73800 	bicseq	r3, r7, #0, 16
     d7c:	25080000 	strcs	r0, [r8, #-0]
     d80:	00000c6b 	andeq	r0, r0, fp, ror #24
     d84:	0007a838 	andeq	sl, r7, r8, lsr r8
     d88:	0f260800 	svceq	0x00260800
     d8c:	37000002 	strcc	r0, [r0, -r2]
     d90:	000000b1 	strheq	r0, [r0], -r1
     d94:	002c2c06 	eoreq	r2, ip, r6, lsl #24
     d98:	03050000 	movweq	r0, #20480	; 0x5000
     d9c:	20000488 	andcs	r0, r0, r8, lsl #9
     da0:	00009639 	andeq	r9, r0, r9, lsr r6
     da4:	000cad00 	andeq	sl, ip, r0, lsl #26
     da8:	38003b00 	stmdacc	r0, {r8, r9, fp, ip, sp}
     dac:	00000041 	andeq	r0, r0, r1, asr #32
     db0:	0ca22501 	cfstr32eq	mvfx2, [r2], #4
     db4:	a5380000 	ldrge	r0, [r8, #-0]!
     db8:	01000007 	tsteq	r0, r7
     dbc:	000ca226 	andeq	sl, ip, r6, lsr #4
     dc0:	02fb3700 	rscseq	r3, fp, #0, 14
     dc4:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
     dc8:	000000a0 	andeq	r0, r0, r0, lsr #1
     dcc:	05b80305 	ldreq	r0, [r8, #773]!	; 0x305
     dd0:	d7372000 	ldrle	r2, [r7, -r0]!
     dd4:	01000006 	tsteq	r0, r6
     dd8:	0000c02c 	andeq	ip, r0, ip, lsr #32
     ddc:	b4030500 	strlt	r0, [r3], #-1280	; 0x500
     de0:	39200005 	stmdbcc	r0!, {r0, r2}
     de4:	00000072 	andeq	r0, r0, r2, ror r0
     de8:	00000cf5 	strdeq	r0, [r0], -r5
     dec:	00006b3a 	andeq	r6, r0, sl, lsr fp
     df0:	37000600 	strcc	r0, [r0, -r0, lsl #12]
     df4:	000009b3 			; <UNDEFINED> instruction: 0x000009b3
     df8:	0ce54f01 	stcleq	15, cr4, [r5], #4
     dfc:	03050000 	movweq	r0, #20480	; 0x5000
     e00:	20000048 	andcs	r0, r0, r8, asr #32
     e04:	00096537 	andeq	r6, r9, r7, lsr r5
     e08:	e5590100 	ldrb	r0, [r9, #-256]	; 0x100
     e0c:	0500000c 	streq	r0, [r0, #-12]
     e10:	00006403 	andeq	r6, r0, r3, lsl #8
     e14:	07163720 	ldreq	r3, [r6, -r0, lsr #14]
     e18:	66010000 	strvs	r0, [r1], -r0
     e1c:	000005ba 			; <UNDEFINED> instruction: 0x000005ba
     e20:	048e0305 	streq	r0, [lr], #773	; 0x305
     e24:	3b3c2000 	blcc	f08e2c <__Stack_Size+0xf0862c>
     e28:	09000008 	stmdbeq	r0, {r3}
     e2c:	07943d6e 	ldreq	r3, [r4, lr, ror #26]
     e30:	460a0000 	strmi	r0, [sl], -r0
     e34:	000d4102 	andeq	r4, sp, r2, lsl #2
     e38:	00961100 	addseq	r1, r6, r0, lsl #2
     e3c:	3d000000 	stccc	0, cr0, [r0, #-0]
     e40:	0000099c 	muleq	r0, ip, r9
     e44:	5802570a 	stmdapl	r2, {r1, r3, r8, r9, sl, ip, lr}
     e48:	1100000d 	tstne	r0, sp
     e4c:	00000096 	muleq	r0, r6, r0
     e50:	00008b11 	andeq	r8, r0, r1, lsl fp
     e54:	7f3d0000 	svcvc	0x003d0000
     e58:	0a000003 	beq	e6c <__Stack_Size+0x66c>
     e5c:	0d6a0240 	sfmeq	f0, 2, [sl, #-256]!	; 0xffffff00
     e60:	96110000 	ldrls	r0, [r1], -r0
     e64:	00000000 	andeq	r0, r0, r0
     e68:	0002b23e 	andeq	fp, r2, lr, lsr r2
     e6c:	7be90400 	blvc	ffa41e74 <BootRAM+0xe9b2615>
     e70:	1100000d 	tstne	r0, sp
     e74:	00000096 	muleq	r0, r6, r0
     e78:	04873f00 	streq	r3, [r7], #3840	; 0xf00
     e7c:	6d090000 	stcvs	0, cr0, [r9, #-0]
     e80:	000000e5 	andeq	r0, r0, r5, ror #1
     e84:	00026440 	andeq	r6, r2, r0, asr #8
     e88:	09e50400 	stmibeq	r5!, {sl}^
     e8c:	a0000002 	andge	r0, r0, r2
     e90:	1100000d 	tstne	r0, sp
     e94:	0000008b 	andeq	r0, r0, fp, lsl #1
     e98:	00021a11 	andeq	r1, r2, r1, lsl sl
     e9c:	923c0000 	eorsls	r0, ip, #0
     ea0:	07000002 	streq	r0, [r0, -r2]
     ea4:	07db3d19 	bfieq	r3, r9, #26, #2
     ea8:	24030000 	strcs	r0, [r3], #-0
     eac:	000dc301 	andeq	ip, sp, r1, lsl #6
     eb0:	00801100 	addeq	r1, r0, r0, lsl #2
     eb4:	96110000 	ldrls	r0, [r1], -r0
     eb8:	11000000 	mrsne	r0, (UNDEF: 0)
     ebc:	00000096 	muleq	r0, r6, r0
     ec0:	027f4100 	rsbseq	r4, pc, #0, 2
     ec4:	25030000 	strcs	r0, [r3, #-0]
     ec8:	00002501 	andeq	r2, r0, r1, lsl #10
     ecc:	000dd900 	andeq	sp, sp, r0, lsl #18
     ed0:	002c1100 	eoreq	r1, ip, r0, lsl #2
     ed4:	42000000 	andmi	r0, r0, #0
     ed8:	0000035f 	andeq	r0, r0, pc, asr r3
     edc:	2c013c03 	stccs	12, cr3, [r1], {3}
     ee0:	3d000000 	stccc	0, cr0, [r0, #-0]
     ee4:	000009e1 	andeq	r0, r0, r1, ror #19
     ee8:	f7013803 			; <UNDEFINED> instruction: 0xf7013803
     eec:	1100000d 	tstne	r0, sp
     ef0:	00000df7 	strdeq	r0, [r0], -r7
     ef4:	29040400 	stmdbcs	r4, {sl}
     ef8:	3c000001 	stccc	0, cr0, [r0], {1}
     efc:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
     f00:	343c6a09 	ldrtcc	r6, [ip], #-2569	; 0xa09
     f04:	0b000008 	bleq	f2c <__Stack_Size+0x72c>
     f08:	0259001a 	subseq	r0, r9, #26
     f0c:	00040000 	andeq	r0, r4, r0
     f10:	0000040b 	andeq	r0, r0, fp, lsl #8
     f14:	06390104 	ldrteq	r0, [r9], -r4, lsl #2
     f18:	9a010000 	bls	40f20 <__Stack_Size+0x40720>
     f1c:	9300000a 	movwls	r0, #10
     f20:	c6000008 	strgt	r0, [r0], -r8
     f24:	02000004 	andeq	r0, r0, #4
     f28:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     f2c:	04030074 	streq	r0, [r3], #-116	; 0x74
     f30:	00025707 	andeq	r5, r2, r7, lsl #14
     f34:	06010300 	streq	r0, [r1], -r0, lsl #6
     f38:	0000081a 	andeq	r0, r0, sl, lsl r8
     f3c:	18080103 	stmdane	r8, {r0, r1, r8}
     f40:	03000008 	movweq	r0, #8
     f44:	06fc0502 	ldrbteq	r0, [ip], r2, lsl #10
     f48:	02030000 	andeq	r0, r3, #0
     f4c:	00094907 	andeq	r4, r9, r7, lsl #18
     f50:	05040300 	streq	r0, [r4, #-768]	; 0x300
     f54:	000004da 	ldrdeq	r0, [r0], -sl
     f58:	52070403 	andpl	r0, r7, #50331648	; 0x3000000
     f5c:	03000002 	movweq	r0, #2
     f60:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
     f64:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     f68:	00024d07 	andeq	r4, r2, r7, lsl #26
     f6c:	07040300 	streq	r0, [r4, -r0, lsl #6]
     f70:	0000078b 	andeq	r0, r0, fp, lsl #15
     f74:	21080103 	tstcs	r8, r3, lsl #2
     f78:	04000008 	streq	r0, [r0], #-8
     f7c:	00363175 	eorseq	r3, r6, r5, ror r1
     f80:	00402801 	subeq	r2, r0, r1, lsl #16
     f84:	75040000 	strvc	r0, [r4, #-0]
     f88:	29010038 	stmdbcs	r1, {r3, r4, r5}
     f8c:	00000032 	andeq	r0, r0, r2, lsr r0
     f90:	00003305 	andeq	r3, r0, r5, lsl #6
     f94:	24020800 	strcs	r0, [r2], #-2048	; 0x800
     f98:	000000ab 	andeq	r0, r0, fp, lsr #1
     f9c:	0002e006 	andeq	lr, r2, r6
     fa0:	ab260200 	blge	9817a8 <__Stack_Size+0x980fa8>
     fa4:	00000000 	andeq	r0, r0, r0
     fa8:	0003f106 	andeq	pc, r3, r6, lsl #2
     fac:	71270200 	teqvc	r7, r0, lsl #4
     fb0:	04000000 	streq	r0, [r0], #-0
     fb4:	7c040700 	stcvc	7, cr0, [r4], {-0}
     fb8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     fbc:	00000572 	andeq	r0, r0, r2, ror r5
     fc0:	00862902 	addeq	r2, r6, r2, lsl #18
     fc4:	b1090000 	mrslt	r0, (UNDEF: 9)
     fc8:	03000000 	movweq	r0, #0
     fcc:	00001d2c 	andeq	r1, r0, ip, lsr #26
     fd0:	88030500 	stmdahi	r3, {r8, sl}
     fd4:	09200004 	stmdbeq	r0!, {r2}
     fd8:	00000a27 	andeq	r0, r0, r7, lsr #20
     fdc:	00b13d04 	adcseq	r3, r1, r4, lsl #26
     fe0:	03050000 	movweq	r0, #20480	; 0x5000
     fe4:	20000158 	andcs	r0, r0, r8, asr r1
     fe8:	00004409 	andeq	r4, r0, r9, lsl #8
     fec:	b1970400 	orrslt	r0, r7, r0, lsl #8
     ff0:	05000000 	streq	r0, [r0, #-0]
     ff4:	0002b403 	andeq	fp, r2, r3, lsl #8
     ff8:	00b10a20 	adcseq	r0, r1, r0, lsr #20
     ffc:	00ff0000 	rscseq	r0, pc, r0
    1000:	630b0000 	movwvs	r0, #45056	; 0xb000
    1004:	06000000 	streq	r0, [r0], -r0
    1008:	03d70900 	bicseq	r0, r7, #0, 18
    100c:	cc040000 	stcgt	0, cr0, [r4], {-0}
    1010:	000000ef 	andeq	r0, r0, pc, ror #1
    1014:	00a80305 	adceq	r0, r8, r5, lsl #6
    1018:	a8092000 	stmdage	r9, {sp}
    101c:	04000007 	streq	r0, [r0], #-7
    1020:	0000b14f 	andeq	fp, r0, pc, asr #2
    1024:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    1028:	0a200000 	beq	801030 <__Stack_Size+0x800830>
    102c:	0000007c 	andeq	r0, r0, ip, ror r0
    1030:	00000131 	andeq	r0, r0, r1, lsr r1
    1034:	0000630b 	andeq	r6, r0, fp, lsl #6
    1038:	09001100 	stmdbeq	r0, {r8, ip}
    103c:	00000a24 	andeq	r0, r0, r4, lsr #20
    1040:	01212604 	teqeq	r1, r4, lsl #12
    1044:	03050000 	movweq	r0, #20480	; 0x5000
    1048:	200000e0 	andcs	r0, r0, r0, ror #1
    104c:	00007c0a 	andeq	r7, r0, sl, lsl #24
    1050:	00015200 	andeq	r5, r1, r0, lsl #4
    1054:	00630b00 	rsbeq	r0, r3, r0, lsl #22
    1058:	00080000 	andeq	r0, r8, r0
    105c:	0007a509 	andeq	sl, r7, r9, lsl #10
    1060:	42420400 	submi	r0, r2, #0, 8
    1064:	05000001 	streq	r0, [r0, #-1]
    1068:	00013d03 	andeq	r3, r1, r3, lsl #26
    106c:	007c0a20 	rsbseq	r0, ip, r0, lsr #20
    1070:	01730000 	cmneq	r3, r0
    1074:	630b0000 	movwvs	r0, #45056	; 0xb000
    1078:	2c000000 	stccs	0, cr0, [r0], {-0}
    107c:	00410900 	subeq	r0, r1, r0, lsl #18
    1080:	55040000 	strpl	r0, [r4, #-0]
    1084:	00000163 	andeq	r0, r0, r3, ror #2
    1088:	01000305 	tsteq	r0, r5, lsl #6
    108c:	7c0a2000 	stcvc	0, cr2, [sl], {-0}
    1090:	94000000 	strls	r0, [r0], #-0
    1094:	0b000001 	bleq	10a0 <__Stack_Size+0x8a0>
    1098:	00000063 	andeq	r0, r0, r3, rrx
    109c:	87090003 	strhi	r0, [r9, -r3]
    10a0:	0400000a 	streq	r0, [r0], #-10
    10a4:	0001849d 	muleq	r1, sp, r4
    10a8:	fc030500 	stc2	5, cr0, [r3], {-0}
    10ac:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
    10b0:	000009ea 	andeq	r0, r0, sl, ror #19
    10b4:	0121a404 	teqeq	r1, r4, lsl #8
    10b8:	03050000 	movweq	r0, #20480	; 0x5000
    10bc:	20000146 	andcs	r0, r0, r6, asr #2
    10c0:	00007c0a 	andeq	r7, r0, sl, lsl #24
    10c4:	0001c600 	andeq	ip, r1, r0, lsl #12
    10c8:	00630b00 	rsbeq	r0, r3, r0, lsl #22
    10cc:	00130000 	andseq	r0, r3, r0
    10d0:	000a7309 	andeq	r7, sl, r9, lsl #6
    10d4:	b6aa0400 	strtlt	r0, [sl], r0, lsl #8
    10d8:	05000001 	streq	r0, [r0, #-1]
    10dc:	00016003 	andeq	r6, r1, r3
    10e0:	007c0a20 	rsbseq	r0, ip, r0, lsr #20
    10e4:	01e70000 	mvneq	r0, r0
    10e8:	630b0000 	movwvs	r0, #45056	; 0xb000
    10ec:	0f000000 	svceq	0x00000000
    10f0:	0a4f0900 	beq	13c34f8 <__Stack_Size+0x13c2cf8>
    10f4:	b0040000 	andlt	r0, r4, r0
    10f8:	000001d7 	ldrdeq	r0, [r0], -r7
    10fc:	012d0305 	teqeq	sp, r5, lsl #6
    1100:	7c0a2000 	stcvc	0, cr2, [sl], {-0}
    1104:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1108:	0b000002 	bleq	1118 <__Stack_Size+0x918>
    110c:	00000063 	andeq	r0, r0, r3, rrx
    1110:	62090077 	andvs	r0, r9, #119	; 0x77
    1114:	0400000a 	streq	r0, [r0], #-10
    1118:	0001f8b6 			; <UNDEFINED> instruction: 0x0001f8b6
    111c:	74030500 	strvc	r0, [r3], #-1280	; 0x500
    1120:	0a200001 	beq	80112c <__Stack_Size+0x80092c>
    1124:	0000007c 	andeq	r0, r0, ip, ror r0
    1128:	00000229 	andeq	r0, r0, r9, lsr #4
    112c:	0000630b 	andeq	r6, r0, fp, lsl #6
    1130:	09006300 	stmdbeq	r0, {r8, r9, sp, lr}
    1134:	00000a13 	andeq	r0, r0, r3, lsl sl
    1138:	0219bd04 	andseq	fp, r9, #4, 26	; 0x100
    113c:	03050000 	movweq	r0, #20480	; 0x5000
    1140:	200001ec 	andcs	r0, r0, ip, ror #3
    1144:	000a3e09 	andeq	r3, sl, r9, lsl #28
    1148:	19c40400 	stmibne	r4, {sl}^
    114c:	05000002 	streq	r0, [r0, #-2]
    1150:	00025003 	andeq	r5, r2, r3
    1154:	09fd0920 	ldmibeq	sp!, {r5, r8, fp}^
    1158:	ca040000 	bgt	101160 <__Stack_Size+0x100960>
    115c:	0000007c 	andeq	r0, r0, ip, ror r0
    1160:	00000305 	andeq	r0, r0, r5, lsl #6
    1164:	4b000000 	blmi	116c <__Stack_Size+0x96c>
    1168:	0400000b 	streq	r0, [r0], #-11
    116c:	00049500 	andeq	r9, r4, r0, lsl #10
    1170:	39010400 	stmdbcc	r1, {sl}
    1174:	01000006 	tsteq	r0, r6
    1178:	00000d48 	andeq	r0, r0, r8, asr #26
    117c:	00000893 	muleq	r0, r3, r8
    1180:	00000130 	andeq	r0, r0, r0, lsr r1
    1184:	00000000 	andeq	r0, r0, r0
    1188:	00000538 	andeq	r0, r0, r8, lsr r5
    118c:	000b1f02 	andeq	r1, fp, r2, lsl #30
    1190:	30d40200 	sbcscc	r0, r4, r0, lsl #4
    1194:	03000000 	movweq	r0, #0
    1198:	02570704 	subseq	r0, r7, #4, 14	; 0x100000
    119c:	04040000 	streq	r0, [r4], #-0
    11a0:	69050405 	stmdbvs	r5, {r0, r2, sl}
    11a4:	0300746e 	movweq	r7, #1134	; 0x46e
    11a8:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    11ac:	40020000 	andmi	r0, r2, r0
    11b0:	0300000c 	movweq	r0, #12
    11b4:	0000521c 	andeq	r5, r0, ip, lsl r2
    11b8:	08010300 	stmdaeq	r1, {r8, r9}
    11bc:	00000818 	andeq	r0, r0, r8, lsl r8
    11c0:	fc050203 	stc2	2, cr0, [r5], {3}
    11c4:	02000006 	andeq	r0, r0, #6
    11c8:	00000b67 	andeq	r0, r0, r7, ror #22
    11cc:	006b2603 	rsbeq	r2, fp, r3, lsl #12
    11d0:	02030000 	andeq	r0, r3, #0
    11d4:	00094907 	andeq	r4, r9, r7, lsl #18
    11d8:	05040300 	streq	r0, [r4, #-768]	; 0x300
    11dc:	000004da 	ldrdeq	r0, [r0], -sl
    11e0:	000b4e02 	andeq	r4, fp, r2, lsl #28
    11e4:	84380300 	ldrthi	r0, [r8], #-768	; 0x300
    11e8:	03000000 	movweq	r0, #0
    11ec:	02520704 	subseq	r0, r2, #4, 14	; 0x100000
    11f0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    11f4:	0004d505 	andeq	sp, r4, r5, lsl #10
    11f8:	07080300 	streq	r0, [r8, -r0, lsl #6]
    11fc:	0000024d 	andeq	r0, r0, sp, asr #4
    1200:	8b070403 	blhi	1c2214 <__Stack_Size+0x1c1a14>
    1204:	06000007 	streq	r0, [r0], -r7
    1208:	00005204 	andeq	r5, r0, r4, lsl #4
    120c:	ac040600 	stcge	6, cr0, [r4], {-0}
    1210:	03000000 	movweq	r0, #0
    1214:	08210801 	stmdaeq	r1!, {r0, fp}
    1218:	04060000 	streq	r0, [r6], #-0
    121c:	000000b9 	strheq	r0, [r0], -r9
    1220:	0000ac07 	andeq	sl, r0, r7, lsl #24
    1224:	0c420200 	sfmeq	f0, 2, [r2], {-0}
    1228:	2a040000 	bcs	101230 <__Stack_Size+0x100a30>
    122c:	00000047 	andeq	r0, r0, r7, asr #32
    1230:	000b6902 	andeq	r6, fp, r2, lsl #18
    1234:	60360400 	eorsvs	r0, r6, r0, lsl #8
    1238:	02000000 	andeq	r0, r0, #0
    123c:	00000b50 	andeq	r0, r0, r0, asr fp
    1240:	00794204 	rsbseq	r4, r9, r4, lsl #4
    1244:	75080000 	strvc	r0, [r8, #-0]
    1248:	05003233 	streq	r3, [r0, #-563]	; 0x233
    124c:	00008427 	andeq	r8, r0, r7, lsr #8
    1250:	38750800 	ldmdacc	r5!, {fp}^
    1254:	52290500 	eorpl	r0, r9, #0, 10
    1258:	02000000 	andeq	r0, r0, #0
    125c:	0000035a 	andeq	r0, r0, sl, asr r3
    1260:	00ff2f05 	rscseq	r2, pc, r5, lsl #30
    1264:	84090000 	strhi	r0, [r9], #-0
    1268:	0a000000 	beq	1270 <__Stack_Size+0xa70>
    126c:	19370501 	ldmdbne	r7!, {r0, r8, sl}
    1270:	0b000001 	bleq	127c <__Stack_Size+0xa7c>
    1274:	00000753 	andeq	r0, r0, r3, asr r7
    1278:	01a70b00 			; <UNDEFINED> instruction: 0x01a70b00
    127c:	00010000 	andeq	r0, r1, r0
    1280:	00052d02 	andeq	r2, r5, r2, lsl #26
    1284:	04370500 	ldrteq	r0, [r7], #-1280	; 0x500
    1288:	0c000001 	stceq	0, cr0, [r0], {1}
    128c:	00000d4f 	andeq	r0, r0, pc, asr #26
    1290:	0115060c 	tsteq	r5, ip, lsl #12
    1294:	00000166 	andeq	r0, r0, r6, ror #2
    1298:	000c3b0d 	andeq	r3, ip, sp, lsl #22
    129c:	01160600 	tsteq	r6, r0, lsl #12
    12a0:	000000c9 	andeq	r0, r0, r9, asr #1
    12a4:	0ae30d00 	beq	ff8c46ac <BootRAM+0xe834e4d>
    12a8:	17060000 	strne	r0, [r6, -r0]
    12ac:	0000c901 	andeq	ip, r0, r1, lsl #18
    12b0:	fb0d0200 	blx	341aba <__Stack_Size+0x3412ba>
    12b4:	0600000a 	streq	r0, [r0], -sl
    12b8:	00d40118 	sbcseq	r0, r4, r8, lsl r1
    12bc:	0d040000 	stceq	0, cr0, [r4, #-0]
    12c0:	00000b11 	andeq	r0, r0, r1, lsl fp
    12c4:	d4011906 	strle	r1, [r1], #-2310	; 0x906
    12c8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    12cc:	0ae80e00 	beq	ffa04ad4 <BootRAM+0xe975275>
    12d0:	07140000 	ldreq	r0, [r4, -r0]
    12d4:	0001bb0d 	andeq	fp, r1, sp, lsl #22
    12d8:	0c550f00 	mrrceq	15, 0, r0, r5, cr0
    12dc:	0e070000 	cdpeq	0, 0, cr0, cr7, cr0, {0}
    12e0:	000000d4 	ldrdeq	r0, [r0], -r4
    12e4:	0df70f00 	ldcleq	15, cr0, [r7]
    12e8:	10070000 	andne	r0, r7, r0
    12ec:	000000d4 	ldrdeq	r0, [r0], -r4
    12f0:	0ce00f04 	stcleq	15, cr0, [r0], #16
    12f4:	11070000 	mrsne	r0, (UNDEF: 7)
    12f8:	000000d4 	ldrdeq	r0, [r0], -r4
    12fc:	0de00f08 	stcleq	15, cr0, [r0, #32]!
    1300:	13070000 	movwne	r0, #28672	; 0x7000
    1304:	000000d4 	ldrdeq	r0, [r0], -r4
    1308:	0d2a0f0c 	stceq	15, cr0, [sl, #-48]!	; 0xffffffd0
    130c:	14070000 	strne	r0, [r7], #-0
    1310:	000000d4 	ldrdeq	r0, [r0], -r4
    1314:	0bec0f10 	bleq	ffb04f5c <BootRAM+0xea756fd>
    1318:	15070000 	strne	r0, [r7, #-0]
    131c:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    1320:	be100014 	mrclt	0, 0, r0, cr0, cr4, {0}
    1324:	ca000000 	bgt	132c <__Stack_Size+0xb2c>
    1328:	11000001 	tstne	r0, r1
    132c:	00000099 	muleq	r0, r9, r0
    1330:	0ae90200 	beq	ffa41b38 <BootRAM+0xe9b22d9>
    1334:	16070000 	strne	r0, [r7], -r0
    1338:	00000166 	andeq	r0, r0, r6, ror #2
    133c:	000c670e 	andeq	r6, ip, lr, lsl #14
    1340:	18071400 	stmdane	r7, {sl, ip}
    1344:	0000021e 	andeq	r0, r0, lr, lsl r2
    1348:	000d540f 	andeq	r5, sp, pc, lsl #8
    134c:	1e190700 	cdpne	7, 1, cr0, cr9, cr0, {0}
    1350:	00000002 	andeq	r0, r0, r2
    1354:	000cc80f 	andeq	ip, ip, pc, lsl #16
    1358:	d41a0700 	ldrle	r0, [sl], #-1792	; 0x700
    135c:	04000000 	streq	r0, [r0], #-0
    1360:	000d070f 	andeq	r0, sp, pc, lsl #14
    1364:	25200700 	strcs	r0, [r0, #-1792]!	; 0x700
    1368:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    136c:	000c940f 	andeq	r9, ip, pc, lsl #8
    1370:	39220700 	stmdbcc	r2!, {r8, r9, sl}
    1374:	0c000000 	stceq	0, cr0, [r0], {-0}
    1378:	000def0f 	andeq	lr, sp, pc, lsl #30
    137c:	39230700 	stmdbcc	r3!, {r8, r9, sl}
    1380:	10000000 	andne	r0, r0, r0
    1384:	ca040600 	bgt	102b8c <__Stack_Size+0x10238c>
    1388:	02000001 	andeq	r0, r0, #1
    138c:	00000bfd 	strdeq	r0, [r0], -sp
    1390:	022f2707 	eoreq	r2, pc, #1835008	; 0x1c0000
    1394:	04060000 	streq	r0, [r6], #-0
    1398:	000001d5 	ldrdeq	r0, [r0], -r5
    139c:	0c086812 	stceq	8, cr6, [r8], {18}
    13a0:	00000262 	andeq	r0, r0, r2, ror #4
    13a4:	001a8a0f 	andseq	r8, sl, pc, lsl #20
    13a8:	620e0800 	andvs	r0, lr, #0, 16
    13ac:	00000002 	andeq	r0, r0, r2
    13b0:	0019500f 	andseq	r5, r9, pc
    13b4:	720f0800 	andvc	r0, pc, #0, 16
    13b8:	08000002 	stmdaeq	r0, {r1}
    13bc:	00046c0f 	andeq	r6, r4, pc, lsl #24
    13c0:	82100800 	andshi	r0, r0, #0, 16
    13c4:	28000002 	stmdacs	r0, {r1}
    13c8:	00841000 	addeq	r1, r4, r0
    13cc:	02720000 	rsbseq	r0, r2, #0
    13d0:	99130000 	ldmdbls	r3, {}	; <UNPREDICTABLE>
    13d4:	01000000 	mrseq	r0, (UNDEF: 0)
    13d8:	00841000 	addeq	r1, r4, r0
    13dc:	02820000 	addeq	r0, r2, #0
    13e0:	99130000 	ldmdbls	r3, {}	; <UNPREDICTABLE>
    13e4:	07000000 	streq	r0, [r0, -r0]
    13e8:	00521000 	subseq	r1, r2, r0
    13ec:	02920000 	addseq	r0, r2, #0
    13f0:	99130000 	ldmdbls	r3, {}	; <UNPREDICTABLE>
    13f4:	3f000000 	svccc	0x00000000
    13f8:	0cef0200 	sfmeq	f0, 2, [pc]	; 1400 <__Stack_Size+0xc00>
    13fc:	12080000 	andne	r0, r8, #0
    1400:	00000235 	andeq	r0, r0, r5, lsr r2
    1404:	0c09010a 	stfeqs	f0, [r9], {10}
    1408:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    140c:	000aca0b 	andeq	ip, sl, fp, lsl #20
    1410:	0f0b0000 	svceq	0x000b0000
    1414:	0100000c 	tsteq	r0, ip
    1418:	000adc0b 	andeq	sp, sl, fp, lsl #24
    141c:	02000200 	andeq	r0, r0, #0, 4
    1420:	00000d18 	andeq	r0, r0, r8, lsl sp
    1424:	029d0e09 	addseq	r0, sp, #9, 28	; 0x90
    1428:	08120000 	ldmdaeq	r2, {}	; <UNPREDICTABLE>
    142c:	02f01009 	rscseq	r1, r0, #9
    1430:	db0f0000 	blle	3c1438 <__Stack_Size+0x3c0c38>
    1434:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    1438:	0002b812 	andeq	fp, r2, r2, lsl r8
    143c:	c30f0000 	movwgt	r0, #61440	; 0xf000
    1440:	0900000a 	stmdbeq	r0, {r1, r3}
    1444:	0000ac13 	andeq	sl, r0, r3, lsl ip
    1448:	060f0100 	streq	r0, [pc], -r0, lsl #2
    144c:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    1450:	00003914 	andeq	r3, r0, r4, lsl r9
    1454:	02000400 	andeq	r0, r0, #0, 8
    1458:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    145c:	02c31509 	sbceq	r1, r3, #37748736	; 0x2400000
    1460:	010a0000 	mrseq	r0, (UNDEF: 10)
    1464:	031c0c0a 	tsteq	ip, #2560	; 0xa00
    1468:	590b0000 	stmdbpl	fp, {}	; <UNPREDICTABLE>
    146c:	0000000b 	andeq	r0, r0, fp
    1470:	000b600b 	andeq	r6, fp, fp
    1474:	110b0100 	mrsne	r0, (UNDEF: 27)
    1478:	0200000d 	andeq	r0, r0, #13
    147c:	000b720b 	andeq	r7, fp, fp, lsl #4
    1480:	02000300 	andeq	r0, r0, #0, 6
    1484:	00000dce 	andeq	r0, r0, lr, asr #27
    1488:	02fb0e0a 	rscseq	r0, fp, #10, 28	; 0xa0
    148c:	02120000 	andseq	r0, r2, #0
    1490:	0348100a 	movteq	r1, #32778	; 0x800a
    1494:	db0f0000 	blle	3c149c <__Stack_Size+0x3c0c9c>
    1498:	0a00000d 	beq	14d4 <__Stack_Size+0xcd4>
    149c:	00031c12 	andeq	r1, r3, r2, lsl ip
    14a0:	870f0000 	strhi	r0, [pc, -r0]
    14a4:	0a00000b 	beq	14d8 <__Stack_Size+0xcd8>
    14a8:	0000ac13 	andeq	sl, r0, r3, lsl ip
    14ac:	02000100 	andeq	r0, r0, #0, 2
    14b0:	00000ba7 	andeq	r0, r0, r7, lsr #23
    14b4:	0327140a 	teqeq	r7, #167772160	; 0xa000000
    14b8:	4a140000 	bmi	5014c0 <__Stack_Size+0x500cc0>
    14bc:	0100000c 	tsteq	r0, ip
    14c0:	00002532 	andeq	r2, r0, r2, lsr r5
    14c4:	00000000 	andeq	r0, r0, r0
    14c8:	00002600 	andeq	r2, r0, r0, lsl #12
    14cc:	e89c0100 	ldm	ip, {r8}
    14d0:	15000003 	strne	r0, [r0, #-3]
    14d4:	00000b26 	andeq	r0, r0, r6, lsr #22
    14d8:	00b33201 	adcseq	r3, r3, r1, lsl #4
    14dc:	02460000 	subeq	r0, r6, #0
    14e0:	c7150000 	ldrgt	r0, [r5, -r0]
    14e4:	0100000d 	tsteq	r0, sp
    14e8:	0000a632 	andeq	sl, r0, r2, lsr r6
    14ec:	00026400 	andeq	r6, r2, r0, lsl #8
    14f0:	00731600 	rsbseq	r1, r3, r0, lsl #12
    14f4:	03483401 	movteq	r3, #33793	; 0x8401
    14f8:	91020000 	mrsls	r0, (UNDEF: 2)
    14fc:	6e63166c 	cdpvs	6, 6, cr1, cr3, cr12, {3}
    1500:	35010074 	strcc	r0, [r1, #-116]	; 0x74
    1504:	00000025 	andeq	r0, r0, r5, lsr #32
    1508:	00175001 	andseq	r5, r7, r1
    150c:	ec000000 	stc	0, cr0, [r0], {-0}
    1510:	b7000008 	strlt	r0, [r0, -r8]
    1514:	18000003 	stmdane	r0, {r0, r1}
    1518:	7d025001 	stcvc	0, cr5, [r2, #-4]
    151c:	00170004 	andseq	r0, r7, r4
    1520:	03000000 	movweq	r0, #0
    1524:	cb000009 	blgt	1550 <__Stack_Size+0xd50>
    1528:	18000003 	stmdane	r0, {r0, r1}
    152c:	75025001 	strvc	r5, [r2, #-1]
    1530:	00190000 	andseq	r0, r9, r0
    1534:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1538:	18000009 	stmdane	r0, {r0, r3}
    153c:	7d025301 	stcvc	3, cr5, [r2, #-4]
    1540:	52011804 	andpl	r1, r1, #4, 16	; 0x40000
    1544:	18007402 	stmdane	r0, {r1, sl, ip, sp, lr}
    1548:	75025001 	strvc	r5, [r2, #-1]
    154c:	14000000 	strne	r0, [r0], #-0
    1550:	00000b43 	andeq	r0, r0, r3, asr #22
    1554:	00253e01 	eoreq	r3, r5, r1, lsl #28
    1558:	10340000 	eorsne	r0, r4, r0
    155c:	00320800 	eorseq	r0, r2, r0, lsl #16
    1560:	9c010000 	stcls	0, cr0, [r1], {-0}
    1564:	0000049c 	muleq	r0, ip, r4
    1568:	000b2615 	andeq	r2, fp, r5, lsl r6
    156c:	b33e0100 	teqlt	lr, #0, 2
    1570:	82000000 	andhi	r0, r0, #0
    1574:	15000002 	strne	r0, [r0, #-2]
    1578:	00000dc7 	andeq	r0, r0, r7, asr #27
    157c:	00a63e01 	adceq	r3, r6, r1, lsl #28
    1580:	02ae0000 	adceq	r0, lr, #0
    1584:	73160000 	tstvc	r6, #0
    1588:	f0400100 			; <UNDEFINED> instruction: 0xf0400100
    158c:	02000002 	andeq	r0, r0, #2
    1590:	631a6891 	tstvs	sl, #9502720	; 0x910000
    1594:	0100746e 	tsteq	r0, lr, ror #8
    1598:	00002541 	andeq	r2, r0, r1, asr #10
    159c:	0002cc00 	andeq	ip, r2, r0, lsl #24
    15a0:	10401700 	subne	r1, r0, r0, lsl #14
    15a4:	09410800 	stmdbeq	r1, {fp}^
    15a8:	044e0000 	strbeq	r0, [lr], #-0
    15ac:	01180000 	tsteq	r8, r0
    15b0:	007d0250 	rsbseq	r0, sp, r0, asr r2
    15b4:	10461700 	subne	r1, r6, r0, lsl #14
    15b8:	09030800 	stmdbeq	r3, {fp}
    15bc:	04620000 	strbteq	r0, [r2], #-0
    15c0:	01180000 	tsteq	r8, r0
    15c4:	00750250 	rsbseq	r0, r5, r0, asr r2
    15c8:	10521700 	subsne	r1, r2, r0, lsl #14
    15cc:	09580800 	ldmdbeq	r8, {fp}^
    15d0:	04820000 	streq	r0, [r2], #0
    15d4:	01180000 	tsteq	r8, r0
    15d8:	007d0253 	rsbseq	r0, sp, r3, asr r2
    15dc:	02520118 	subseq	r0, r2, #24, 2
    15e0:	01180074 	tsteq	r8, r4, ror r0
    15e4:	00750250 	rsbseq	r0, r5, r0, asr r2
    15e8:	105c1900 	subsne	r1, ip, r0, lsl #18
    15ec:	097c0800 	ldmdbeq	ip!, {fp}^
    15f0:	01180000 	tsteq	r8, r0
    15f4:	007d0251 	rsbseq	r0, sp, r1, asr r2
    15f8:	05500118 	ldrbeq	r0, [r0, #-280]	; 0x118
    15fc:	00750074 	rsbseq	r0, r5, r4, ror r0
    1600:	1b000022 	blne	1690 <__Stack_Size+0xe90>
    1604:	00000d77 	andeq	r0, r0, r7, ror sp
    1608:	10684f01 	rsbne	r4, r8, r1, lsl #30
    160c:	00980800 	addseq	r0, r8, r0, lsl #16
    1610:	9c010000 	stcls	0, cr0, [r1], {-0}
    1614:	0000068d 	andeq	r0, r0, sp, lsl #13
    1618:	00646916 	rsbeq	r6, r4, r6, lsl r9
    161c:	01245001 	teqeq	r4, r1
    1620:	91030000 	mrsls	r0, (UNDEF: 3)
    1624:	9b1c79ec 	blls	71fddc <__Stack_Size+0x71f5dc>
    1628:	0100000d 	tsteq	r0, sp
    162c:	00068d51 	andeq	r8, r6, r1, asr sp
    1630:	f8910300 			; <UNDEFINED> instruction: 0xf8910300
    1634:	0b911c79 	bleq	fe448820 <BootRAM+0xd3b8fc1>
    1638:	52010000 	andpl	r0, r1, #0
    163c:	0000069d 	muleq	r0, sp, r6
    1640:	7a909103 	bvc	fe425a54 <BootRAM+0xd3961f5>
    1644:	000b071c 	andeq	r0, fp, ip, lsl r7
    1648:	ad530100 	ldfgee	f0, [r3, #-0]
    164c:	03000006 	movweq	r0, #6
    1650:	1c7ad091 	ldclne	0, cr13, [sl], #-580	; 0xfffffdbc
    1654:	00000c5d 	andeq	r0, r0, sp, asr ip
    1658:	06bd5401 	ldrteq	r5, [sp], r1, lsl #8
    165c:	91030000 	mrsls	r0, (UNDEF: 3)
    1660:	d11c7ab0 			; <UNDEFINED> instruction: 0xd11c7ab0
    1664:	0100000a 	tsteq	r0, sl
    1668:	0006cd55 	andeq	ip, r6, r5, asr sp
    166c:	f8910300 			; <UNDEFINED> instruction: 0xf8910300
    1670:	0b001c7b 	bleq	8864 <__Stack_Size+0x8064>
    1674:	56010000 	strpl	r0, [r1], -r0
    1678:	000006cd 	andeq	r0, r0, sp, asr #13
    167c:	7df89103 	ldfvcp	f1, [r8, #12]!
    1680:	78746316 	ldmdavc	r4!, {r1, r2, r4, r8, r9, sp, lr}^
    1684:	925c0100 	subsls	r0, ip, #0, 2
    1688:	03000002 	movweq	r0, #2
    168c:	177b9091 			; <UNDEFINED> instruction: 0x177b9091
    1690:	08001074 	stmdaeq	r0, {r2, r4, r5, r6, ip}
    1694:	00000996 	muleq	r0, r6, r9
    1698:	0000053d 	andeq	r0, r0, sp, lsr r5
    169c:	03500118 	cmpeq	r0, #24, 2
    16a0:	0079ec91 			; <UNDEFINED> instruction: 0x0079ec91
    16a4:	00108c17 	andseq	r8, r0, r7, lsl ip
    16a8:	0009ae08 	andeq	sl, r9, r8, lsl #28
    16ac:	00055b00 	andeq	r5, r5, r0, lsl #22
    16b0:	51011800 	tstpl	r1, r0, lsl #16
    16b4:	754c0305 	strbvc	r0, [ip, #-773]	; 0x305
    16b8:	01180800 	tsteq	r8, r0, lsl #16
    16bc:	f8910350 			; <UNDEFINED> instruction: 0xf8910350
    16c0:	92170079 	andsls	r0, r7, #121	; 0x79
    16c4:	c9080010 	stmdbgt	r8, {r4}
    16c8:	70000009 	andvc	r0, r0, r9
    16cc:	18000005 	stmdane	r0, {r0, r2}
    16d0:	91035001 	tstls	r3, r1
    16d4:	17007b90 			; <UNDEFINED> instruction: 0x17007b90
    16d8:	0800109c 	stmdaeq	r0, {r2, r3, r4, r7, ip}
    16dc:	000009e0 	andeq	r0, r0, r0, ror #19
    16e0:	00000591 	muleq	r0, r1, r5
    16e4:	01520118 	cmpeq	r2, r8, lsl r1
    16e8:	51011847 	tstpl	r1, r7, asr #16
    16ec:	79f89103 	ldmibvc	r8!, {r0, r1, r8, ip, pc}^
    16f0:	03500118 	cmpeq	r0, #24, 2
    16f4:	007b9091 			; <UNDEFINED> instruction: 0x007b9091
    16f8:	0010a417 	andseq	sl, r0, r7, lsl r4
    16fc:	0009fb08 	andeq	pc, r9, r8, lsl #22
    1700:	0005ad00 	andeq	sl, r5, r0, lsl #26
    1704:	51011800 	tstpl	r1, r0, lsl #16
    1708:	7a909103 	bvc	fe425b1c <BootRAM+0xd3962bd>
    170c:	03500118 	cmpeq	r0, #24, 2
    1710:	007b9091 			; <UNDEFINED> instruction: 0x007b9091
    1714:	0010ac17 	andseq	sl, r0, r7, lsl ip
    1718:	000a1108 	andeq	r1, sl, r8, lsl #2
    171c:	0005c900 	andeq	ip, r5, r0, lsl #18
    1720:	51011800 	tstpl	r1, r0, lsl #16
    1724:	7a909103 	bvc	fe425b38 <BootRAM+0xd3962d9>
    1728:	03500118 	cmpeq	r0, #24, 2
    172c:	007ab091 			; <UNDEFINED> instruction: 0x007ab091
    1730:	0010b417 	andseq	fp, r0, r7, lsl r4
    1734:	0003e808 	andeq	lr, r3, r8, lsl #16
    1738:	0005e500 	andeq	lr, r5, r0, lsl #10
    173c:	51011800 	tstpl	r1, r0, lsl #16
    1740:	7bf89103 	blvc	ffe25b54 <BootRAM+0xed962f5>
    1744:	03500118 	cmpeq	r0, #24, 2
    1748:	007ab091 			; <UNDEFINED> instruction: 0x007ab091
    174c:	0010be17 	andseq	fp, r0, r7, lsl lr
    1750:	000a3808 	andeq	r3, sl, r8, lsl #16
    1754:	00060500 	andeq	r0, r6, r0, lsl #10
    1758:	52011800 	andpl	r1, r1, #0, 16
    175c:	18400802 	stmdane	r0, {r1, fp}^
    1760:	30015101 	andcc	r5, r1, r1, lsl #2
    1764:	03500118 	cmpeq	r0, #24, 2
    1768:	007ad091 			; <UNDEFINED> instruction: 0x007ad091
    176c:	0010ce17 	andseq	ip, r0, r7, lsl lr
    1770:	000a5508 	andeq	r5, sl, r8, lsl #10
    1774:	00063800 	andeq	r3, r6, r0, lsl #16
    1778:	53011800 	movwpl	r1, #6144	; 0x1800
    177c:	7ab09103 	bvc	fec25b90 <BootRAM+0xdb96331>
    1780:	03520118 	cmpeq	r2, #24, 2
    1784:	187a9091 	ldmdane	sl!, {r0, r4, r7, ip, pc}^
    1788:	03055101 	movweq	r5, #20737	; 0x5101
    178c:	20000404 	andcs	r0, r0, r4, lsl #8
    1790:	03500118 	cmpeq	r0, #24, 2
    1794:	187ad091 	ldmdane	sl!, {r0, r4, r7, ip, lr, pc}^
    1798:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    179c:	17002008 	strne	r2, [r0, -r8]
    17a0:	080010d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, ip}
    17a4:	000003e8 	andeq	r0, r0, r8, ror #7
    17a8:	00000654 	andeq	r0, r0, r4, asr r6
    17ac:	03510118 	cmpeq	r1, #24, 2
    17b0:	187df891 	ldmdane	sp!, {r0, r4, r7, fp, ip, sp, lr, pc}^
    17b4:	91035001 	tstls	r3, r1
    17b8:	17007ad0 			; <UNDEFINED> instruction: 0x17007ad0
    17bc:	080010de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, ip}
    17c0:	00000a7a 	andeq	r0, r0, sl, ror sl
    17c4:	00000672 	andeq	r0, r0, r2, ror r6
    17c8:	03510118 	cmpeq	r1, #24, 2
    17cc:	187bf891 	ldmdane	fp!, {r0, r4, r7, fp, ip, sp, lr, pc}^
    17d0:	03055001 	movweq	r5, #20481	; 0x5001
    17d4:	08007555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl, ip, sp, lr}
    17d8:	10e61900 	rscne	r1, r6, r0, lsl #18
    17dc:	0a7a0800 	beq	1e837e4 <__Stack_Size+0x1e82fe4>
    17e0:	01180000 	tsteq	r8, r0
    17e4:	f8910351 			; <UNDEFINED> instruction: 0xf8910351
    17e8:	5001187d 	andpl	r1, r1, sp, ror r8
    17ec:	758a0305 	strvc	r0, [sl, #773]	; 0x305
    17f0:	00000800 	andeq	r0, r0, r0, lsl #16
    17f4:	00005210 	andeq	r5, r0, r0, lsl r2
    17f8:	00069d00 	andeq	r9, r6, r0, lsl #26
    17fc:	00991300 	addseq	r1, r9, r0, lsl #6
    1800:	00160000 	andseq	r0, r6, r0
    1804:	00005210 	andeq	r5, r0, r0, lsl r2
    1808:	0006ad00 	andeq	sl, r6, r0, lsl #26
    180c:	00991300 	addseq	r1, r9, r0, lsl #6
    1810:	001f0000 	andseq	r0, pc, r0
    1814:	0000ac10 	andeq	sl, r0, r0, lsl ip
    1818:	0006bd00 	andeq	fp, r6, r0, lsl #26
    181c:	00991300 	addseq	r1, r9, r0, lsl #6
    1820:	003f0000 	eorseq	r0, pc, r0
    1824:	0000ac10 	andeq	sl, r0, r0, lsl ip
    1828:	0006cd00 	andeq	ip, r6, r0, lsl #26
    182c:	00991300 	addseq	r1, r9, r0, lsl #6
    1830:	001f0000 	andseq	r0, pc, r0
    1834:	0000ac10 	andeq	sl, r0, r0, lsl ip
    1838:	0006dd00 	andeq	sp, r6, r0, lsl #26
    183c:	00991300 	addseq	r1, r9, r0, lsl #6
    1840:	00ff0000 	rscseq	r0, pc, r0
    1844:	000d311d 	andeq	r3, sp, sp, lsl r1
    1848:	39720100 	ldmdbcc	r2!, {r8}^
    184c:	00000000 	andeq	r0, r0, r0
    1850:	fc080011 	stc2	0, cr0, [r8], {17}
    1854:	01000000 	mrseq	r0, (UNDEF: 0)
    1858:	0008ba9c 	muleq	r8, ip, sl
    185c:	0cbb1e00 	ldceq	14, cr1, [fp]
    1860:	74010000 	strvc	r0, [r1], #-0
    1864:	00000119 	andeq	r0, r0, r9, lsl r1
    1868:	000002f5 	strdeq	r0, [r0], -r5
    186c:	000d8f1c 	andeq	r8, sp, ip, lsl pc
    1870:	24860100 	strcs	r0, [r6], #256	; 0x100
    1874:	02000002 	andeq	r0, r0, #2
    1878:	721a6c91 	andsvc	r6, sl, #37120	; 0x9100
    187c:	01007465 	tsteq	r0, r5, ror #8
    1880:	00003987 	andeq	r3, r0, r7, lsl #19
    1884:	00037b00 	andeq	r7, r3, r0, lsl #22
    1888:	11081f00 	tstne	r8, r0, lsl #30
    188c:	0a8d0800 	beq	fe343894 <BootRAM+0xd2b4035>
    1890:	0c1f0000 	ldceq	0, cr0, [pc], {-0}
    1894:	95080011 	strls	r0, [r8, #-17]
    1898:	1f00000a 	svcne	0x0000000a
    189c:	08001110 	stmdaeq	r0, {r4, r8, ip}
    18a0:	00000a9d 	muleq	r0, sp, sl
    18a4:	0011141f 	andseq	r1, r1, pc, lsl r4
    18a8:	000aa508 	andeq	sl, sl, r8, lsl #10
    18ac:	11181f00 	tstne	r8, r0, lsl #30
    18b0:	0aad0800 	beq	feb438b8 <BootRAM+0xdab4059>
    18b4:	1c1f0000 	ldcne	0, cr0, [pc], {-0}
    18b8:	b5080011 	strlt	r0, [r8, #-17]
    18bc:	1700000a 	strne	r0, [r0, -sl]
    18c0:	08001122 	stmdaeq	r0, {r1, r5, r8, ip}
    18c4:	00000a7a 	andeq	r0, r0, sl, ror sl
    18c8:	0000076f 	andeq	r0, r0, pc, ror #14
    18cc:	05500118 	ldrbeq	r0, [r0, #-280]	; 0x118
    18d0:	0075d703 	rsbseq	sp, r5, r3, lsl #14
    18d4:	2a170008 	bcs	5c18fc <__Stack_Size+0x5c10fc>
    18d8:	bc080011 	stclt	0, cr0, [r8], {17}
    18dc:	8b00000a 	blhi	190c <__Stack_Size+0x110c>
    18e0:	18000007 	stmdane	r0, {r0, r1, r2}
    18e4:	3f015101 	svccc	0x00015101
    18e8:	05500118 	ldrbeq	r0, [r0, #-280]	; 0x118
    18ec:	010c000c 	tsteq	ip, ip
    18f0:	32170040 	andscc	r0, r7, #64	; 0x40
    18f4:	7a080011 	bvc	201940 <__Stack_Size+0x201140>
    18f8:	a200000a 	andge	r0, r0, #10
    18fc:	18000007 	stmdane	r0, {r0, r1, r2}
    1900:	03055001 	movweq	r5, #20481	; 0x5001
    1904:	080075ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, ip, sp, lr}
    1908:	113c1700 	teqne	ip, r0, lsl #14
    190c:	0ad70800 	beq	ff5c3914 <BootRAM+0xe5340b5>
    1910:	07c40000 	strbeq	r0, [r4, r0]
    1914:	01180000 	tsteq	r8, r0
    1918:	18300152 	ldmdane	r0!, {r1, r4, r6, r8}
    191c:	0c055101 	stfeqs	f5, [r5], {1}
    1920:	08009000 	stmdaeq	r0, {ip, pc}
    1924:	02500118 	subseq	r0, r0, #24, 2
    1928:	17006c91 			; <UNDEFINED> instruction: 0x17006c91
    192c:	08001148 	stmdaeq	r0, {r3, r6, r8, ip}
    1930:	00000a7a 	andeq	r0, r0, sl, ror sl
    1934:	000007e1 	andeq	r0, r0, r1, ror #15
    1938:	02510118 	subseq	r0, r1, #24, 2
    193c:	01180275 	tsteq	r8, r5, ror r2
    1940:	ff030550 			; <UNDEFINED> instruction: 0xff030550
    1944:	00080075 	andeq	r0, r8, r5, ror r0
    1948:	00116417 	andseq	r6, r1, r7, lsl r4
    194c:	000a7a08 	andeq	r7, sl, r8, lsl #20
    1950:	0007f800 	andeq	pc, r7, r0, lsl #16
    1954:	50011800 	andpl	r1, r1, r0, lsl #16
    1958:	76140305 	ldrvc	r0, [r4], -r5, lsl #6
    195c:	1f000800 	svcne	0x00000800
    1960:	0800116c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip}
    1964:	0000049c 	muleq	r0, ip, r4
    1968:	00117a1f 	andseq	r7, r1, pc, lsl sl
    196c:	000a7a08 	andeq	r7, sl, r8, lsl #20
    1970:	118e1700 	orrne	r1, lr, r0, lsl #14
    1974:	0afc0800 	beq	fff0397c <BootRAM+0xee7411d>
    1978:	08380000 	ldmdaeq	r8!, {}	; <UNPREDICTABLE>
    197c:	01180000 	tsteq	r8, r0
    1980:	3e440353 	mcrcc	3, 2, r0, cr4, cr3, {2}
    1984:	52011824 	andpl	r1, r1, #36, 16	; 0x240000
    1988:	01183501 	tsteq	r8, r1, lsl #10
    198c:	183d0151 	ldmdane	sp!, {r0, r4, r6, r8}
    1990:	0c055001 	stceq	0, cr5, [r5], {1}
    1994:	40011000 	andmi	r1, r1, r0
    1998:	007d0218 	rsbseq	r0, sp, r8, lsl r2
    199c:	17003001 	strne	r3, [r0, -r1]
    19a0:	080011a2 	stmdaeq	r0, {r1, r5, r7, r8, ip}
    19a4:	00000afc 	strdeq	r0, [r0], -ip
    19a8:	00000866 	andeq	r0, r0, r6, ror #16
    19ac:	03530118 	cmpeq	r3, #24, 2
    19b0:	18244040 	stmdane	r4!, {r6, lr}
    19b4:	31015201 	tstcc	r1, r1, lsl #4
    19b8:	01510118 	cmpeq	r1, r8, lsl r1
    19bc:	5001183d 	andpl	r1, r1, sp, lsr r8
    19c0:	10000c05 	andne	r0, r0, r5, lsl #24
    19c4:	02184001 	andseq	r4, r8, #1
    19c8:	3001007d 	andcc	r0, r1, sp, ror r0
    19cc:	11a61f00 			; <UNDEFINED> instruction: 0x11a61f00
    19d0:	0b220800 	bleq	8839d8 <__Stack_Size+0x8831d8>
    19d4:	b0170000 	andslt	r0, r7, r0
    19d8:	7a080011 	bvc	201a24 <__Stack_Size+0x201224>
    19dc:	8600000a 	strhi	r0, [r0], -sl
    19e0:	18000008 	stmdane	r0, {r3}
    19e4:	03055001 	movweq	r5, #20481	; 0x5001
    19e8:	08007697 	stmdaeq	r0, {r0, r1, r2, r4, r7, r9, sl, ip, sp, lr}
    19ec:	11b41f00 			; <UNDEFINED> instruction: 0x11b41f00
    19f0:	0b330800 	bleq	cc39f8 <__Stack_Size+0xcc31f8>
    19f4:	bc170000 	ldclt	0, cr0, [r7], {-0}
    19f8:	7a080011 	bvc	201a44 <__Stack_Size+0x201244>
    19fc:	a600000a 	strge	r0, [r0], -sl
    1a00:	18000008 	stmdane	r0, {r3}
    1a04:	03055001 	movweq	r5, #20481	; 0x5001
    1a08:	080076ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, ip, sp, lr}
    1a0c:	11c21900 	bicne	r1, r2, r0, lsl #18
    1a10:	0b400800 	bleq	1003a18 <__Stack_Size+0x1003218>
    1a14:	01180000 	tsteq	r8, r0
    1a18:	840c0550 	strhi	r0, [ip], #-1360	; 0x550
    1a1c:	00080090 	muleq	r8, r0, r0
    1a20:	00b12000 	adcseq	r2, r1, r0
    1a24:	2c0b0000 	stccs	0, cr0, [fp], {-0}
    1a28:	00000039 	andeq	r0, r0, r9, lsr r0
    1a2c:	04880305 	streq	r0, [r8], #773	; 0x305
    1a30:	be102000 	cdplt	0, 1, cr2, cr0, cr0, {0}
    1a34:	db000000 	blle	1a3c <__Stack_Size+0x123c>
    1a38:	13000008 	movwne	r0, #8
    1a3c:	00000099 	muleq	r0, r9, r0
    1a40:	7b20001f 	blvc	801ac4 <__Stack_Size+0x8012c4>
    1a44:	0700000c 	streq	r0, [r0, -ip]
    1a48:	0008cb6b 	andeq	ip, r8, fp, ror #22
    1a4c:	04030500 	streq	r0, [r3], #-1280	; 0x500
    1a50:	21200004 	teqcs	r0, r4
    1a54:	00000e24 	andeq	r0, r0, r4, lsr #28
    1a58:	08fd160a 	ldmeq	sp!, {r1, r3, r9, sl, ip}^
    1a5c:	fd220000 	stc2	0, cr0, [r2, #-0]
    1a60:	00000008 	andeq	r0, r0, r8
    1a64:	03480406 	movteq	r0, #33798	; 0x8406
    1a68:	36230000 	strtcc	r0, [r3], -r0
    1a6c:	0c00000d 	stceq	0, cr0, [r0], {13}
    1a70:	00002521 	andeq	r2, r0, r1, lsr #10
    1a74:	00091800 	andeq	r1, r9, r0, lsl #16
    1a78:	00b32200 	adcseq	r2, r3, r0, lsl #4
    1a7c:	23000000 	movwcs	r0, #0
    1a80:	00000bcd 	andeq	r0, r0, sp, asr #23
    1a84:	00391a0a 	eorseq	r1, r9, sl, lsl #20
    1a88:	093c0000 	ldmdbeq	ip!, {}	; <UNPREDICTABLE>
    1a8c:	b3220000 	teqlt	r2, #0
    1a90:	22000000 	andcs	r0, r0, #0
    1a94:	0000093c 	andeq	r0, r0, ip, lsr r9
    1a98:	0000a622 	andeq	sl, r0, r2, lsr #12
    1a9c:	08fd2200 	ldmeq	sp!, {r9, sp}^
    1aa0:	07000000 	streq	r0, [r0, -r0]
    1aa4:	00000039 	andeq	r0, r0, r9, lsr r0
    1aa8:	000aab21 	andeq	sl, sl, r1, lsr #22
    1aac:	52170900 	andspl	r0, r7, #0, 18
    1ab0:	22000009 	andcs	r0, r0, #9
    1ab4:	00000952 	andeq	r0, r0, r2, asr r9
    1ab8:	f0040600 			; <UNDEFINED> instruction: 0xf0040600
    1abc:	23000002 	movwcs	r0, #2
    1ac0:	00000e10 	andeq	r0, r0, r0, lsl lr
    1ac4:	00391b09 	eorseq	r1, r9, r9, lsl #22
    1ac8:	097c0000 	ldmdbeq	ip!, {}^	; <UNPREDICTABLE>
    1acc:	b3220000 	teqlt	r2, #0
    1ad0:	22000000 	andcs	r0, r0, #0
    1ad4:	00000039 	andeq	r0, r0, r9, lsr r0
    1ad8:	0000a622 	andeq	sl, r0, r2, lsr #12
    1adc:	09522200 	ldmdbeq	r2, {r9, sp}^
    1ae0:	23000000 	movwcs	r0, #0
    1ae4:	00000da4 	andeq	r0, r0, r4, lsr #27
    1ae8:	00391d09 	eorseq	r1, r9, r9, lsl #26
    1aec:	09960000 	ldmibeq	r6, {}	; <UNPREDICTABLE>
    1af0:	a6220000 	strtge	r0, [r2], -r0
    1af4:	22000000 	andcs	r0, r0, #0
    1af8:	00000952 	andeq	r0, r0, r2, asr r9
    1afc:	0b2c2400 	bleq	b0ab04 <__Stack_Size+0xb0a304>
    1b00:	42060000 	andmi	r0, r6, #0
    1b04:	0009a801 	andeq	sl, r9, r1, lsl #16
    1b08:	09a82200 	stmibeq	r8!, {r9, sp}
    1b0c:	06000000 	streq	r0, [r0], -r0
    1b10:	00012404 	andeq	r2, r1, r4, lsl #8
    1b14:	0f032300 	svceq	0x00032300
    1b18:	d90d0000 	stmdble	sp, {}	; <UNPREDICTABLE>
    1b1c:	00000039 	andeq	r0, r0, r9, lsr r0
    1b20:	000009c9 	andeq	r0, r0, r9, asr #19
    1b24:	0000a622 	andeq	sl, r0, r2, lsr #12
    1b28:	00b32200 	adcseq	r2, r3, r0, lsl #4
    1b2c:	00250000 	eoreq	r0, r5, r0
    1b30:	000c1d21 	andeq	r1, ip, r1, lsr #26
    1b34:	da140800 	ble	503b3c <__Stack_Size+0x50333c>
    1b38:	22000009 	andcs	r0, r0, #9
    1b3c:	000009da 	ldrdeq	r0, [r0], -sl
    1b40:	92040600 	andls	r0, r4, #0, 12
    1b44:	21000002 	tstcs	r0, r2
    1b48:	00000b35 	andeq	r0, r0, r5, lsr fp
    1b4c:	09fb1508 	ldmibeq	fp!, {r3, r8, sl, ip}^
    1b50:	da220000 	ble	881b58 <__Stack_Size+0x881358>
    1b54:	22000009 	andcs	r0, r0, #9
    1b58:	000000a0 	andeq	r0, r0, r0, lsr #1
    1b5c:	00008422 	andeq	r8, r0, r2, lsr #8
    1b60:	79210000 	stmdbvc	r1!, {}	; <UNPREDICTABLE>
    1b64:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1b68:	000a1116 	andeq	r1, sl, r6, lsl r1
    1b6c:	09da2200 	ldmibeq	sl, {r9, sp}^
    1b70:	a0220000 	eorge	r0, r2, r0
    1b74:	00000000 	andeq	r0, r0, r0
    1b78:	000c8221 	andeq	r8, ip, r1, lsr #4
    1b7c:	27250e00 	strcs	r0, [r5, -r0, lsl #28]!
    1b80:	2200000a 	andcs	r0, r0, #10
    1b84:	00000a27 	andeq	r0, r0, r7, lsr #20
    1b88:	000a2d22 	andeq	r2, sl, r2, lsr #26
    1b8c:	04060000 	streq	r0, [r6], #-0
    1b90:	000000be 	strheq	r0, [r0], -lr
    1b94:	0a330406 	beq	cc2bb4 <__Stack_Size+0xcc23b4>
    1b98:	be070000 	cdplt	0, 0, cr0, cr7, cr0, {0}
    1b9c:	26000000 	strcs	r0, [r0], -r0
    1ba0:	00000c16 	andeq	r0, r0, r6, lsl ip
    1ba4:	00000037 	andeq	r0, r0, r7, lsr r0
    1ba8:	00000a55 	andeq	r0, r0, r5, asr sl
    1bac:	00003722 	andeq	r3, r0, r2, lsr #14
    1bb0:	00392200 	eorseq	r2, r9, r0, lsl #4
    1bb4:	99220000 	stmdbls	r2!, {}	; <UNPREDICTABLE>
    1bb8:	00000000 	andeq	r0, r0, r0
    1bbc:	000d5a21 	andeq	r5, sp, r1, lsr #20
    1bc0:	7a2a0e00 	bvc	a853c8 <__Stack_Size+0xa84bc8>
    1bc4:	2200000a 	andcs	r0, r0, #10
    1bc8:	00000a27 	andeq	r0, r0, r7, lsr #20
    1bcc:	000a2d22 	andeq	r2, sl, r2, lsr #26
    1bd0:	0a2d2200 	beq	b4a3d8 <__Stack_Size+0xb49bd8>
    1bd4:	2d220000 	stccs	0, cr0, [r2, #-0]
    1bd8:	2200000a 	andcs	r0, r0, #10
    1bdc:	00000025 	andeq	r0, r0, r5, lsr #32
    1be0:	0dbb2400 	cfldrseq	mvf2, [fp]
    1be4:	3f060000 	svccc	0x00060000
    1be8:	000a8d01 	andeq	r8, sl, r1, lsl #26
    1bec:	00b32200 	adcseq	r2, r3, r0, lsl #4
    1bf0:	00250000 	eoreq	r0, r5, r0
    1bf4:	000b9b27 	andeq	r9, fp, r7, lsr #22
    1bf8:	012c0600 	teqeq	ip, r0, lsl #12
    1bfc:	000b1627 	andeq	r1, fp, r7, lsr #12
    1c00:	012d0600 	teqeq	sp, r0, lsl #12
    1c04:	000cce27 	andeq	ip, ip, r7, lsr #28
    1c08:	012e0600 	teqeq	lr, r0, lsl #12
    1c0c:	000be127 	andeq	lr, fp, r7, lsr #2
    1c10:	012f0600 	teqeq	pc, r0, lsl #12
    1c14:	000cfe27 	andeq	pc, ip, r7, lsr #28
    1c18:	012a0600 	teqeq	sl, r0, lsl #12
    1c1c:	0007d228 	andeq	sp, r7, r8, lsr #4
    1c20:	29510b00 	ldmdbcs	r1, {r8, r9, fp}^
    1c24:	00000bf5 	strdeq	r0, [r0], -r5
    1c28:	19012706 	stmdbne	r1, {r1, r2, r8, r9, sl, sp}
    1c2c:	d7000001 	strle	r0, [r0, -r1]
    1c30:	2200000a 	andcs	r0, r0, #10
    1c34:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1c38:	0000ea22 	andeq	lr, r0, r2, lsr #20
    1c3c:	9b230000 	blls	8c1c44 <__Stack_Size+0x8c1444>
    1c40:	0700000c 	streq	r0, [r0, -ip]
    1c44:	00003967 	andeq	r3, r0, r7, ror #18
    1c48:	000af600 	andeq	pc, sl, r0, lsl #12
    1c4c:	0af62200 	beq	ffd8a454 <BootRAM+0xecfabf5>
    1c50:	f4220000 	vld4.8	{d0-d3}, [r2], r0
    1c54:	22000000 	andcs	r0, r0, #0
    1c58:	00000119 	andeq	r0, r0, r9, lsl r1
    1c5c:	24040600 	strcs	r0, [r4], #-1536	; 0x600
    1c60:	24000002 	strcs	r0, [r0], #-2
    1c64:	00000cb1 			; <UNDEFINED> instruction: 0x00000cb1
    1c68:	22012806 	andcs	r2, r1, #393216	; 0x60000
    1c6c:	2200000b 	andcs	r0, r0, #11
    1c70:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1c74:	0000ea22 	andeq	lr, r0, r2, lsr #20
    1c78:	00ea2200 	rsceq	r2, sl, r0, lsl #4
    1c7c:	df220000 	svcle	0x00220000
    1c80:	22000000 	andcs	r0, r0, #0
    1c84:	000000ea 	andeq	r0, r0, sl, ror #1
    1c88:	0d662a00 	vstmdbeq	r6!, {s5-s4}
    1c8c:	7c0f0000 	stcvc	0, cr0, [pc], {-0}
    1c90:	00000119 	andeq	r0, r0, r9, lsl r1
    1c94:	00000b33 	andeq	r0, r0, r3, lsr fp
    1c98:	2b2b0025 	blcs	ac1d34 <__Stack_Size+0xac1534>
    1c9c:	0f00000c 	svceq	0x0000000c
    1ca0:	000b407e 	andeq	r4, fp, lr, ror r0
    1ca4:	2c002500 	cfstr32cs	mvfx2, [r0], {-0}
    1ca8:	00000d3d 	andeq	r0, r0, sp, lsr sp
    1cac:	22013006 	andcs	r3, r1, #6
    1cb0:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1cb4:	12980000 	addsne	r0, r8, #0
    1cb8:	00040000 	andeq	r0, r4, r0
    1cbc:	0000070e 	andeq	r0, r0, lr, lsl #14
    1cc0:	06390104 	ldrteq	r0, [r9], -r4, lsl #2
    1cc4:	dc010000 	stcle	0, cr0, [r1], {-0}
    1cc8:	9300000e 	movwls	r0, #14
    1ccc:	58000008 	stmdapl	r0, {r3}
    1cd0:	00000001 	andeq	r0, r0, r1
    1cd4:	e3000000 	movw	r0, #0
    1cd8:	02000007 	andeq	r0, r0, #7
    1cdc:	00000b1f 	andeq	r0, r0, pc, lsl fp
    1ce0:	0030d402 	eorseq	sp, r0, r2, lsl #8
    1ce4:	04030000 	streq	r0, [r3], #-0
    1ce8:	00025707 	andeq	r5, r2, r7, lsl #14
    1cec:	0fbb0200 	svceq	0x00bb0200
    1cf0:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    1cf4:	00000042 	andeq	r0, r0, r2, asr #32
    1cf8:	00122d04 	andseq	r2, r2, r4, lsl #26
    1cfc:	00080400 	andeq	r0, r8, r0, lsl #8
    1d00:	00000059 	andeq	r0, r0, r9, asr r0
    1d04:	0010ba05 	andseq	fp, r0, r5, lsl #20
    1d08:	00005900 	andeq	r5, r0, r0, lsl #18
    1d0c:	06000000 	streq	r0, [r0], -r0
    1d10:	05040704 	streq	r0, [r4, #-1796]	; 0x704
    1d14:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1d18:	1a060103 	bne	18212c <__Stack_Size+0x18192c>
    1d1c:	02000008 	andeq	r0, r0, #8
    1d20:	00000c40 	andeq	r0, r0, r0, asr #24
    1d24:	00741c04 	rsbseq	r1, r4, r4, lsl #24
    1d28:	01030000 	mrseq	r0, (UNDEF: 3)
    1d2c:	00081808 	andeq	r1, r8, r8, lsl #16
    1d30:	05020300 	streq	r0, [r2, #-768]	; 0x300
    1d34:	000006fc 	strdeq	r0, [r0], -ip
    1d38:	000b6702 	andeq	r6, fp, r2, lsl #14
    1d3c:	8d260400 	cfstrshi	mvf0, [r6, #-0]
    1d40:	03000000 	movweq	r0, #0
    1d44:	09490702 	stmdbeq	r9, {r1, r8, r9, sl}^
    1d48:	04030000 	streq	r0, [r3], #-0
    1d4c:	0004da05 	andeq	sp, r4, r5, lsl #20
    1d50:	0b4e0200 	bleq	1382558 <__Stack_Size+0x1381d58>
    1d54:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    1d58:	000000a6 	andeq	r0, r0, r6, lsr #1
    1d5c:	52070403 	andpl	r0, r7, #50331648	; 0x3000000
    1d60:	03000002 	movweq	r0, #2
    1d64:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
    1d68:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1d6c:	00024d07 	andeq	r4, r2, r7, lsl #26
    1d70:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1d74:	0000078b 	andeq	r0, r0, fp, lsl #15
    1d78:	00c80408 	sbceq	r0, r8, r8, lsl #8
    1d7c:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    1d80:	00007404 	andeq	r7, r0, r4, lsl #8
    1d84:	d5040800 	strle	r0, [r4, #-2048]	; 0x800
    1d88:	03000000 	movweq	r0, #0
    1d8c:	08210801 	stmdaeq	r1!, {r0, fp}
    1d90:	04080000 	streq	r0, [r8], #-0
    1d94:	000000e2 	andeq	r0, r0, r2, ror #1
    1d98:	0000d50a 	andeq	sp, r0, sl, lsl #10
    1d9c:	0c420200 	sfmeq	f0, 2, [r2], {-0}
    1da0:	2a050000 	bcs	141da8 <__Stack_Size+0x1415a8>
    1da4:	00000069 	andeq	r0, r0, r9, rrx
    1da8:	000b6902 	andeq	r6, fp, r2, lsl #18
    1dac:	82360500 	eorshi	r0, r6, #0, 10
    1db0:	02000000 	andeq	r0, r0, #0
    1db4:	00000b50 	andeq	r0, r0, r0, asr fp
    1db8:	009b4205 	addseq	r4, fp, r5, lsl #4
    1dbc:	2f020000 	svccs	0x00020000
    1dc0:	03000012 	movweq	r0, #18
    1dc4:	00003762 	andeq	r3, r0, r2, ror #14
    1dc8:	33750b00 	cmncc	r5, #0, 22
    1dcc:	27060032 	smladxcs	r6, r2, r0, r0
    1dd0:	000000a6 	andeq	r0, r0, r6, lsr #1
    1dd4:	3631750b 	ldrtcc	r7, [r1], -fp, lsl #10
    1dd8:	8d280600 	stchi	6, cr0, [r8, #-0]
    1ddc:	0b000000 	bleq	1de4 <__Stack_Size+0x15e4>
    1de0:	06003875 			; <UNDEFINED> instruction: 0x06003875
    1de4:	00007429 	andeq	r7, r0, r9, lsr #8
    1de8:	035a0200 	cmpeq	sl, #0, 4
    1dec:	2f060000 	svccs	0x00060000
    1df0:	0000013e 	andeq	r0, r0, lr, lsr r1
    1df4:	0000a60c 	andeq	sl, r0, ip, lsl #12
    1df8:	01e30200 	mvneq	r0, r0, lsl #4
    1dfc:	30060000 	andcc	r0, r6, r0
    1e00:	0000014e 	andeq	r0, r0, lr, asr #2
    1e04:	00008d0c 	andeq	r8, r0, ip, lsl #26
    1e08:	12dd0200 	sbcsne	r0, sp, #0, 4
    1e0c:	33060000 	movwcc	r0, #24576	; 0x6000
    1e10:	0000015e 	andeq	r0, r0, lr, asr r1
    1e14:	00013e0a 	andeq	r3, r1, sl, lsl #28
    1e18:	06010d00 	streq	r0, [r1], -r0, lsl #26
    1e1c:	00017837 	andeq	r7, r1, r7, lsr r8
    1e20:	07530e00 	ldrbeq	r0, [r3, -r0, lsl #28]
    1e24:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1e28:	000001a7 	andeq	r0, r0, r7, lsr #3
    1e2c:	2d020001 	stccs	0, cr0, [r2, #-4]
    1e30:	06000005 	streq	r0, [r0], -r5
    1e34:	00016337 	andeq	r6, r1, r7, lsr r3
    1e38:	06010d00 	streq	r0, [r1], -r0, lsl #26
    1e3c:	0001983b 	andeq	r9, r1, fp, lsr r8
    1e40:	10360e00 	eorsne	r0, r6, r0, lsl #28
    1e44:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1e48:	00001237 	andeq	r1, r0, r7, lsr r2
    1e4c:	84020001 	strhi	r0, [r2], #-1
    1e50:	0600000e 	streq	r0, [r0], -lr
    1e54:	0001833b 	andeq	r8, r1, fp, lsr r3
    1e58:	07280f00 	streq	r0, [r8, -r0, lsl #30]!
    1e5c:	00022392 	muleq	r2, r2, r3
    1e60:	52431000 	subpl	r1, r3, #0
    1e64:	33930700 	orrscc	r0, r3, #0, 14
    1e68:	00000001 	andeq	r0, r0, r1
    1e6c:	00075911 	andeq	r5, r7, r1, lsl r9
    1e70:	33940700 	orrscc	r0, r4, #0, 14
    1e74:	04000001 	streq	r0, [r0], #-1
    1e78:	52494310 	subpl	r4, r9, #16, 6	; 0x40000000
    1e7c:	33950700 	orrscc	r0, r5, #0, 14
    1e80:	08000001 	stmdaeq	r0, {r0}
    1e84:	00002a11 	andeq	r2, r0, r1, lsl sl
    1e88:	33960700 	orrscc	r0, r6, #0, 14
    1e8c:	0c000001 	stceq	0, cr0, [r0], {1}
    1e90:	000fef11 	andeq	lr, pc, r1, lsl pc	; <UNPREDICTABLE>
    1e94:	33970700 	orrscc	r0, r7, #0, 14
    1e98:	10000001 	andne	r0, r0, r1
    1e9c:	00044511 	andeq	r4, r4, r1, lsl r5
    1ea0:	33980700 	orrscc	r0, r8, #0, 14
    1ea4:	14000001 	strne	r0, [r0], #-1
    1ea8:	0005ef11 	andeq	lr, r5, r1, lsl pc
    1eac:	33990700 	orrscc	r0, r9, #0, 14
    1eb0:	18000001 	stmdane	r0, {r0}
    1eb4:	00000011 	andeq	r0, r0, r1, lsl r0
    1eb8:	339a0700 	orrscc	r0, sl, #0, 14
    1ebc:	1c000001 	stcne	0, cr0, [r0], {1}
    1ec0:	00061e11 	andeq	r1, r6, r1, lsl lr
    1ec4:	339b0700 	orrscc	r0, fp, #0, 14
    1ec8:	20000001 	andcs	r0, r0, r1
    1ecc:	52534310 	subspl	r4, r3, #16, 6	; 0x40000000
    1ed0:	339c0700 	orrscc	r0, ip, #0, 14
    1ed4:	24000001 	strcs	r0, [r0], #-1
    1ed8:	10fa0200 	rscsne	r0, sl, r0, lsl #4
    1edc:	9d070000 	stcls	0, cr0, [r7, #-0]
    1ee0:	000001a3 	andeq	r0, r0, r3, lsr #3
    1ee4:	07033c12 	smladeq	r3, r2, ip, r3
    1ee8:	0002c3a0 	andeq	ip, r2, r0, lsr #7
    1eec:	0f511100 	svceq	0x00511100
    1ef0:	a1070000 	mrsge	r0, (UNDEF: 7)
    1ef4:	000002d3 	ldrdeq	r0, [r0], -r3
    1ef8:	11541100 	cmpne	r4, r0, lsl #2
    1efc:	a2070000 	andge	r0, r7, #0
    1f00:	000002d8 	ldrdeq	r0, [r0], -r8
    1f04:	12bc1108 	adcsne	r1, ip, #8, 2
    1f08:	a3070000 	movwge	r0, #28672	; 0x7000
    1f0c:	000002e8 	andeq	r0, r0, r8, ror #5
    1f10:	0f561180 	svceq	0x00561180
    1f14:	a4070000 	strge	r0, [r7], #-0
    1f18:	000002d8 	ldrdeq	r0, [r0], -r8
    1f1c:	13271388 	teqne	r7, #136, 6	; 0x20000002
    1f20:	a5070000 	strge	r0, [r7, #-0]
    1f24:	000002ed 	andeq	r0, r0, sp, ror #5
    1f28:	68130100 	ldmdavs	r3, {r8}
    1f2c:	07000011 	smladeq	r0, r1, r0, r0
    1f30:	0002d8a6 	andeq	sp, r2, r6, lsr #17
    1f34:	13010800 	movwne	r0, #6144	; 0x1800
    1f38:	000010f5 	strdeq	r1, [r0], -r5
    1f3c:	02f2a707 	rscseq	sl, r2, #1835008	; 0x1c0000
    1f40:	01800000 	orreq	r0, r0, r0
    1f44:	00117213 	andseq	r7, r1, r3, lsl r2
    1f48:	d8a80700 	stmiale	r8!, {r8, r9, sl}
    1f4c:	88000002 	stmdahi	r0, {r1}
    1f50:	12d81301 	sbcsne	r1, r8, #67108864	; 0x4000000
    1f54:	a9070000 	stmdbge	r7, {}	; <UNPREDICTABLE>
    1f58:	000002f7 	strdeq	r0, [r0], -r7
    1f5c:	7c130200 	lfmvc	f0, 4, [r3], {-0}
    1f60:	07000011 	smladeq	r0, r1, r0, r0
    1f64:	0002fcaa 	andeq	pc, r2, sl, lsr #25
    1f68:	14020800 	strne	r0, [r2], #-2048	; 0x800
    1f6c:	00525049 	subseq	r5, r2, r9, asr #32
    1f70:	031cab07 	tsteq	ip, #7168	; 0x1c00
    1f74:	03000000 	movweq	r0, #0
    1f78:	01331500 	teqeq	r3, r0, lsl #10
    1f7c:	02d30000 	sbcseq	r0, r3, #0
    1f80:	bb160000 	bllt	581f88 <__Stack_Size+0x581788>
    1f84:	01000000 	mrseq	r0, (UNDEF: 0)
    1f88:	02c30c00 	sbceq	r0, r3, #0, 24
    1f8c:	13150000 	tstne	r5, #0
    1f90:	e8000001 	stmda	r0, {r0}
    1f94:	16000002 	strne	r0, [r0], -r2
    1f98:	000000bb 	strheq	r0, [r0], -fp
    1f9c:	c30c001d 	movwgt	r0, #49181	; 0xc01d
    1fa0:	0c000002 	stceq	0, cr0, [r0], {2}
    1fa4:	000002c3 	andeq	r0, r0, r3, asr #5
    1fa8:	0002c30c 	andeq	ip, r2, ip, lsl #6
    1fac:	02c30c00 	sbceq	r0, r3, #0, 24
    1fb0:	13150000 	tstne	r5, #0
    1fb4:	0c000001 	stceq	0, cr0, [r0], {1}
    1fb8:	16000003 	strne	r0, [r0], -r3
    1fbc:	000000bb 	strheq	r0, [r0], -fp
    1fc0:	3315003d 	tstcc	r5, #61	; 0x3d
    1fc4:	1c000001 	stcne	0, cr0, [r0], {1}
    1fc8:	16000003 	strne	r0, [r0], -r3
    1fcc:	000000bb 	strheq	r0, [r0], -fp
    1fd0:	0c0c000e 	stceq	0, cr0, [ip], {14}
    1fd4:	02000003 	andeq	r0, r0, #3
    1fd8:	00001219 	andeq	r1, r0, r9, lsl r2
    1fdc:	022eac07 	eoreq	sl, lr, #1792	; 0x700
    1fe0:	040f0000 	streq	r0, [pc], #-0	; 1fe8 <__Stack_Size+0x17e8>
    1fe4:	0365ae07 	cmneq	r5, #7, 28	; 0x70
    1fe8:	b6110000 	ldrlt	r0, [r1], -r0
    1fec:	07000005 	streq	r0, [r0, -r5]
    1ff0:	000129af 	andeq	r2, r1, pc, lsr #19
    1ff4:	70110000 	andsvc	r0, r1, r0
    1ff8:	07000009 	streq	r0, [r0, -r9]
    1ffc:	000129b0 			; <UNDEFINED> instruction: 0x000129b0
    2000:	dd110100 	ldfles	f0, [r1, #-0]
    2004:	07000008 	streq	r0, [r0, -r8]
    2008:	000129b1 			; <UNDEFINED> instruction: 0x000129b1
    200c:	96110200 	ldrls	r0, [r1], -r0, lsl #4
    2010:	07000003 	streq	r0, [r0, -r3]
    2014:	000178b2 			; <UNDEFINED> instruction: 0x000178b2
    2018:	02000300 	andeq	r0, r0, #0, 6
    201c:	000001f5 	strdeq	r0, [r0], -r5
    2020:	032cb307 	teqeq	ip, #469762048	; 0x1c000000
    2024:	400f0000 	andmi	r0, pc, r0
    2028:	0421b507 	strteq	fp, [r1], #-1287	; 0x507
    202c:	ca110000 	bgt	442034 <__Stack_Size+0x441834>
    2030:	0700000f 	streq	r0, [r0, -pc]
    2034:	000153b6 			; <UNDEFINED> instruction: 0x000153b6
    2038:	3e110000 	cdpcc	0, 1, cr0, cr1, cr0, {0}
    203c:	07000012 	smladeq	r0, r2, r0, r0
    2040:	000133b7 			; <UNDEFINED> instruction: 0x000133b7
    2044:	03110400 	tsteq	r1, #0, 8
    2048:	07000012 	smladeq	r0, r2, r0, r0
    204c:	000133b8 			; <UNDEFINED> instruction: 0x000133b8
    2050:	3e110800 	cdpcc	8, 1, cr0, cr1, cr0, {0}
    2054:	07000010 	smladeq	r0, r0, r0, r0
    2058:	000133b9 			; <UNDEFINED> instruction: 0x000133b9
    205c:	53100c00 	tstpl	r0, #0, 24
    2060:	07005243 	streq	r5, [r0, -r3, asr #4]
    2064:	000133ba 			; <UNDEFINED> instruction: 0x000133ba
    2068:	43101000 	tstmi	r0, #0
    206c:	07005243 	streq	r5, [r0, -r3, asr #4]
    2070:	000133bb 			; <UNDEFINED> instruction: 0x000133bb
    2074:	d7111400 	ldrle	r1, [r1, -r0, lsl #8]
    2078:	0700000f 	streq	r0, [r0, -pc]
    207c:	000431bc 			; <UNDEFINED> instruction: 0x000431bc
    2080:	88111800 	ldmdahi	r1, {fp, ip}
    2084:	07000010 	smladeq	r0, r0, r0, r0
    2088:	000133bd 			; <UNDEFINED> instruction: 0x000133bd
    208c:	a8112400 	ldmdage	r1, {sl, sp}
    2090:	07000010 	smladeq	r0, r0, r0, r0
    2094:	000133be 			; <UNDEFINED> instruction: 0x000133be
    2098:	f8112800 			; <UNDEFINED> instruction: 0xf8112800
    209c:	0700000f 	streq	r0, [r0, -pc]
    20a0:	000133bf 			; <UNDEFINED> instruction: 0x000133bf
    20a4:	b0112c00 	andslt	r2, r1, r0, lsl #24
    20a8:	0700000e 	streq	r0, [r0, -lr]
    20ac:	000133c0 	andeq	r3, r1, r0, asr #7
    20b0:	40113000 	andsmi	r3, r1, r0
    20b4:	07000011 	smladeq	r0, r1, r0, r0
    20b8:	000133c1 	andeq	r3, r1, r1, asr #7
    20bc:	f1113400 			; <UNDEFINED> instruction: 0xf1113400
    20c0:	07000011 	smladeq	r0, r1, r0, r0
    20c4:	000133c2 	andeq	r3, r1, r2, asr #7
    20c8:	dc113800 	ldcle	8, cr3, [r1], {-0}
    20cc:	0700000f 	streq	r0, [r0, -pc]
    20d0:	000133c3 	andeq	r3, r1, r3, asr #7
    20d4:	15003c00 	strne	r3, [r0, #-3072]	; 0xc00
    20d8:	00000133 	andeq	r0, r0, r3, lsr r1
    20dc:	00000431 	andeq	r0, r0, r1, lsr r4
    20e0:	0000bb16 	andeq	fp, r0, r6, lsl fp
    20e4:	0c000200 	sfmeq	f0, 4, [r0], {-0}
    20e8:	00000421 	andeq	r0, r0, r1, lsr #8
    20ec:	00124302 	andseq	r4, r2, r2, lsl #6
    20f0:	70c40700 	sbcvc	r0, r4, r0, lsl #14
    20f4:	0f000003 	svceq	0x00000003
    20f8:	f0c6071c 			; <UNDEFINED> instruction: 0xf0c6071c
    20fc:	10000004 	andne	r0, r0, r4
    2100:	07005253 	smlsdeq	r0, r3, r2, r5
    2104:	0004f0c8 	andeq	pc, r4, r8, asr #1
    2108:	54110000 	ldrpl	r0, [r1], #-0
    210c:	07000011 	smladeq	r0, r1, r0, r0
    2110:	0000f2c9 	andeq	pc, r0, r9, asr #5
    2114:	44100200 	ldrmi	r0, [r0], #-512	; 0x200
    2118:	ca070052 	bgt	1c2268 <__Stack_Size+0x1c1a68>
    211c:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2120:	115e1104 	cmpne	lr, r4, lsl #2
    2124:	cb070000 	blgt	1c212c <__Stack_Size+0x1c192c>
    2128:	000000f2 	strdeq	r0, [r0], -r2
    212c:	52421006 	subpl	r1, r2, #6
    2130:	cc070052 	stcgt	0, cr0, [r7], {82}	; 0x52
    2134:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2138:	11681108 	cmnne	r8, r8, lsl #2
    213c:	cd070000 	stcgt	0, cr0, [r7, #-0]
    2140:	000000f2 	strdeq	r0, [r0], -r2
    2144:	5243100a 	subpl	r1, r3, #10
    2148:	ce070031 	mcrgt	0, 0, r0, cr7, cr1, {1}
    214c:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2150:	1172110c 	cmnne	r2, ip, lsl #2
    2154:	cf070000 	svcgt	0x00070000
    2158:	000000f2 	strdeq	r0, [r0], -r2
    215c:	5243100e 	subpl	r1, r3, #14
    2160:	d0070032 	andle	r0, r7, r2, lsr r0
    2164:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2168:	117c1110 	cmnne	ip, r0, lsl r1
    216c:	d1070000 	mrsle	r0, (UNDEF: 7)
    2170:	000000f2 	strdeq	r0, [r0], -r2
    2174:	52431012 	subpl	r1, r3, #18
    2178:	d2070033 	andle	r0, r7, #51	; 0x33
    217c:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2180:	11861114 	orrne	r1, r6, r4, lsl r1
    2184:	d3070000 	movwle	r0, #28672	; 0x7000
    2188:	000000f2 	strdeq	r0, [r0], -r2
    218c:	0f351116 	svceq	0x00351116
    2190:	d4070000 	strle	r0, [r7], #-0
    2194:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2198:	11901118 	orrsne	r1, r0, r8, lsl r1
    219c:	d5070000 	strle	r0, [r7, #-0]
    21a0:	000000f2 	strdeq	r0, [r0], -r2
    21a4:	f20c001a 	vqadd.s8	d0, d12, d10
    21a8:	02000000 	andeq	r0, r0, #0
    21ac:	00000fe1 	andeq	r0, r0, r1, ror #31
    21b0:	0441d607 	strbeq	sp, [r1], #-1543	; 0x607
    21b4:	f6040000 			; <UNDEFINED> instruction: 0xf6040000
    21b8:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    21bc:	0524e707 	streq	lr, [r4, #-1799]!	; 0x707
    21c0:	43100000 	tstmi	r0, #0
    21c4:	e8070052 	stmda	r7, {r1, r4, r6}
    21c8:	00000133 	andeq	r0, r0, r3, lsr r1
    21cc:	53431000 	movtpl	r1, #12288	; 0x3000
    21d0:	e9070052 	stmdb	r7, {r1, r4, r6}
    21d4:	00000133 	andeq	r0, r0, r3, lsr r1
    21d8:	70040004 	andvc	r0, r4, r4
    21dc:	3800000f 	stmdacc	r0, {r0, r1, r2, r3}
    21e0:	065df407 	ldrbeq	pc, [sp], -r7, lsl #8	; <UNPREDICTABLE>
    21e4:	5e110000 	cdppl	0, 1, cr0, cr1, cr0, {0}
    21e8:	07000011 	smladeq	r0, r1, r0, r0
    21ec:	00065df5 	strdeq	r5, [r6], -r5	; <UNPREDICTABLE>
    21f0:	44100000 	ldrmi	r0, [r0], #-0
    21f4:	07003152 	smlsdeq	r0, r2, r1, r3
    21f8:	000143f6 	strdeq	r4, [r1], -r6
    21fc:	68110400 	ldmdavs	r1, {sl}
    2200:	07000011 	smladeq	r0, r1, r0, r0
    2204:	000662f7 	strdeq	r6, [r6], -r7
    2208:	44100600 	ldrmi	r0, [r0], #-1536	; 0x600
    220c:	07003252 	smlsdeq	r0, r2, r2, r3
    2210:	000143f8 	strdeq	r4, [r1], -r8
    2214:	72110800 	andsvc	r0, r1, #0, 16
    2218:	07000011 	smladeq	r0, r1, r0, r0
    221c:	000662f9 	strdeq	r6, [r6], -r9
    2220:	44100a00 	ldrmi	r0, [r0], #-2560	; 0xa00
    2224:	07003352 	smlsdeq	r0, r2, r3, r3
    2228:	000143fa 	strdeq	r4, [r1], -sl
    222c:	7c110c00 	ldcvc	12, cr0, [r1], {-0}
    2230:	07000011 	smladeq	r0, r1, r0, r0
    2234:	000662fb 	strdeq	r6, [r6], -fp
    2238:	44100e00 	ldrmi	r0, [r0], #-3584	; 0xe00
    223c:	07003452 	smlsdeq	r0, r2, r4, r3
    2240:	000143fc 	strdeq	r4, [r1], -ip
    2244:	86111000 	ldrhi	r1, [r1], -r0
    2248:	07000011 	smladeq	r0, r1, r0, r0
    224c:	000662fd 	strdeq	r6, [r6], -sp
    2250:	44101200 	ldrmi	r1, [r0], #-512	; 0x200
    2254:	07003552 	smlsdeq	r0, r2, r5, r3
    2258:	000143fe 	strdeq	r4, [r1], -lr
    225c:	90111400 	andsls	r1, r1, r0, lsl #8
    2260:	07000011 	smladeq	r0, r1, r0, r0
    2264:	000662ff 	strdeq	r6, [r6], -pc	; <UNPREDICTABLE>
    2268:	44171600 	ldrmi	r1, [r7], #-1536	; 0x600
    226c:	07003652 	smlsdeq	r0, r2, r6, r3
    2270:	01430100 	mrseq	r0, (UNDEF: 83)
    2274:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
    2278:	0000134b 	andeq	r1, r0, fp, asr #6
    227c:	62010107 	andvs	r0, r1, #-1073741823	; 0xc0000001
    2280:	1a000006 	bne	22a0 <__Stack_Size+0x1aa0>
    2284:	37524417 	smmlacc	r2, r7, r4, r4
    2288:	01020700 	tsteq	r2, r0, lsl #14
    228c:	00000143 	andeq	r0, r0, r3, asr #2
    2290:	119a181c 	orrsne	r1, sl, ip, lsl r8
    2294:	03070000 	movweq	r0, #28672	; 0x7000
    2298:	00066201 	andeq	r6, r6, r1, lsl #4
    229c:	44171e00 	ldrmi	r1, [r7], #-3584	; 0xe00
    22a0:	07003852 	smlsdeq	r0, r2, r8, r3
    22a4:	01430104 	cmpeq	r3, r4, lsl #2
    22a8:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
    22ac:	000011a4 	andeq	r1, r0, r4, lsr #3
    22b0:	62010507 	andvs	r0, r1, #29360128	; 0x1c00000
    22b4:	22000006 	andcs	r0, r0, #6
    22b8:	39524417 	ldmdbcc	r2, {r0, r1, r2, r4, sl, lr}^
    22bc:	01060700 	tsteq	r6, r0, lsl #14
    22c0:	00000143 	andeq	r0, r0, r3, asr #2
    22c4:	12a61824 	adcne	r1, r6, #36, 16	; 0x240000
    22c8:	07070000 	streq	r0, [r7, -r0]
    22cc:	00066201 	andeq	r6, r6, r1, lsl #4
    22d0:	f0182600 			; <UNDEFINED> instruction: 0xf0182600
    22d4:	07000010 	smladeq	r0, r0, r0, r0
    22d8:	01430108 	cmpeq	r3, r8, lsl #2
    22dc:	18280000 	stmdane	r8!, {}	; <UNPREDICTABLE>
    22e0:	000012b1 			; <UNDEFINED> instruction: 0x000012b1
    22e4:	62010907 	andvs	r0, r1, #114688	; 0x1c000
    22e8:	2a000006 	bcs	2308 <__Stack_Size+0x1b08>
    22ec:	0012fa18 	andseq	pc, r2, r8, lsl sl	; <UNPREDICTABLE>
    22f0:	010a0700 	tsteq	sl, r0, lsl #14
    22f4:	00000133 	andeq	r0, r0, r3, lsr r1
    22f8:	5243172c 	subpl	r1, r3, #44, 14	; 0xb00000
    22fc:	010b0700 	tsteq	fp, r0, lsl #14
    2300:	00000133 	andeq	r0, r0, r3, lsr r1
    2304:	53431730 	movtpl	r1, #14128	; 0x3730
    2308:	0c070052 	stceq	0, cr0, [r7], {82}	; 0x52
    230c:	00013301 	andeq	r3, r1, r1, lsl #6
    2310:	0a003400 	beq	f318 <__Stack_Size+0xeb18>
    2314:	00000113 	andeq	r0, r0, r3, lsl r1
    2318:	00011e0a 	andeq	r1, r1, sl, lsl #28
    231c:	0d4f1900 	stcleq	9, cr1, [pc, #-0]	; 2324 <__Stack_Size+0x1b24>
    2320:	070c0000 	streq	r0, [ip, -r0]
    2324:	06a90115 	ssateq	r0, #10, r5, lsl #2
    2328:	3b180000 	blcc	602330 <__Stack_Size+0x601b30>
    232c:	0700000c 	streq	r0, [r0, -ip]
    2330:	00f20116 	rscseq	r0, r2, r6, lsl r1
    2334:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2338:	00000ae3 	andeq	r0, r0, r3, ror #21
    233c:	f2011707 	vabd.s8	d1, d1, d7
    2340:	02000000 	andeq	r0, r0, #0
    2344:	000afb18 	andeq	pc, sl, r8, lsl fp	; <UNPREDICTABLE>
    2348:	01180700 	tsteq	r8, r0, lsl #14
    234c:	000000fd 	strdeq	r0, [r0], -sp
    2350:	0b111804 	bleq	448368 <__Stack_Size+0x447b68>
    2354:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    2358:	0000fd01 	andeq	pc, r0, r1, lsl #26
    235c:	0f000800 	svceq	0x00000800
    2360:	fa600110 	blx	18027a8 <__Stack_Size+0x1801fa8>
    2364:	11000006 	tstne	r0, r6
    2368:	00000f42 	andeq	r0, r0, r2, asr #30
    236c:	00fd6201 	rscseq	r6, sp, r1, lsl #4
    2370:	11000000 	mrsne	r0, (UNDEF: 0)
    2374:	00000ecb 	andeq	r0, r0, fp, asr #29
    2378:	00f26701 	rscseq	r6, r2, r1, lsl #14
    237c:	11040000 	mrsne	r0, (UNDEF: 4)
    2380:	00000ee7 	andeq	r0, r0, r7, ror #29
    2384:	00f26a01 	rscseq	r6, r2, r1, lsl #20
    2388:	11060000 	mrsne	r0, (UNDEF: 6)
    238c:	00000f87 	andeq	r0, r0, r7, lsl #31
    2390:	00f26d01 	rscseq	r6, r2, r1, lsl #26
    2394:	11080000 	mrsne	r0, (UNDEF: 8)
    2398:	00001066 	andeq	r1, r0, r6, rrx
    239c:	00f27401 	rscseq	r7, r2, r1, lsl #8
    23a0:	110a0000 	mrsne	r0, (UNDEF: 10)
    23a4:	0000108e 	andeq	r1, r0, lr, lsl #1
    23a8:	00f27701 	rscseq	r7, r2, r1, lsl #14
    23ac:	000c0000 	andeq	r0, ip, r0
    23b0:	0012c602 	andseq	ip, r2, r2, lsl #12
    23b4:	a97a0100 	ldmdbge	sl!, {r8}^
    23b8:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
    23bc:	20930101 	addscs	r0, r3, r1, lsl #2
    23c0:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    23c4:	00000f5f 	andeq	r0, r0, pc, asr pc
    23c8:	0f250e01 	svceq	0x00250e01
    23cc:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    23d0:	0000127a 	andeq	r1, r0, sl, ror r2
    23d4:	00020003 	andeq	r0, r2, r3
    23d8:	01000013 	tsteq	r0, r3, lsl r0
    23dc:	00070597 	muleq	r7, r7, r5
    23e0:	01010d00 	tsteq	r1, r0, lsl #26
    23e4:	0007659a 	muleq	r7, sl, r5
    23e8:	11460e00 	cmpne	r6, r0, lsl #28
    23ec:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    23f0:	00001335 	andeq	r1, r0, r5, lsr r3
    23f4:	0f9f0e04 	svceq	0x009f0e04
    23f8:	0e280000 	cdpeq	0, 2, cr0, cr8, cr0, {0}
    23fc:	00000fad 	andeq	r0, r0, sp, lsr #31
    2400:	950e00c8 	strls	r0, [lr, #-200]	; 0xc8
    2404:	14000012 	strne	r0, [r0], #-18
    2408:	0010200e 	andseq	r2, r0, lr
    240c:	080e1000 	stmdaeq	lr, {ip}
    2410:	1c000011 	stcne	0, cr0, [r0], {17}
    2414:	0011ae0e 	andseq	sl, r1, lr, lsl #28
    2418:	02001800 	andeq	r1, r0, #0, 16
    241c:	00001208 	andeq	r1, r0, r8, lsl #4
    2420:	072ba201 	streq	sl, [fp, -r1, lsl #4]!
    2424:	040f0000 	streq	r0, [pc], #-0	; 242c <__Stack_Size+0x1c2c>
    2428:	079da401 	ldreq	sl, [sp, r1, lsl #8]
    242c:	5a110000 	bpl	442434 <__Stack_Size+0x441c34>
    2430:	0100000e 	tsteq	r0, lr
    2434:	0000f2a6 	andeq	pc, r0, r6, lsr #5
    2438:	be110000 	cdplt	0, 1, cr0, cr1, cr0, {0}
    243c:	01000011 	tsteq	r0, r1, lsl r0
    2440:	000720a9 	andeq	r2, r7, r9, lsr #1
    2444:	50110200 	andspl	r0, r1, r0, lsl #4
    2448:	0100000e 	tsteq	r0, lr
    244c:	000765ac 	andeq	r6, r7, ip, lsr #11
    2450:	02000300 	andeq	r0, r0, #0, 6
    2454:	0000124f 	andeq	r1, r0, pc, asr #4
    2458:	0770ae01 	ldrbeq	sl, [r0, -r1, lsl #28]!
    245c:	1c0f0000 	stcne	0, cr0, [pc], {-0}
    2460:	0805b001 	stmdaeq	r5, {r0, ip, sp, pc}
    2464:	43100000 	tstmi	r0, #0
    2468:	01004c52 	tsteq	r0, r2, asr ip
    246c:	000805b2 			; <UNDEFINED> instruction: 0x000805b2
    2470:	43100000 	tstmi	r0, #0
    2474:	01004852 	tsteq	r0, r2, asr r8
    2478:	000805b3 			; <UNDEFINED> instruction: 0x000805b3
    247c:	49100400 	ldmdbmi	r0, {sl}
    2480:	01005244 	tsteq	r0, r4, asr #4
    2484:	000805b4 			; <UNDEFINED> instruction: 0x000805b4
    2488:	4f100800 	svcmi	0x00100800
    248c:	01005244 	tsteq	r0, r4, asr #4
    2490:	000805b5 			; <UNDEFINED> instruction: 0x000805b5
    2494:	4b110c00 	blmi	44549c <__Stack_Size+0x444c9c>
    2498:	0100000e 	tsteq	r0, lr
    249c:	000805b6 			; <UNDEFINED> instruction: 0x000805b6
    24a0:	42101000 	andsmi	r1, r0, #0
    24a4:	01005252 	tsteq	r0, r2, asr r2
    24a8:	000805b7 			; <UNDEFINED> instruction: 0x000805b7
    24ac:	77111400 	ldrvc	r1, [r1, -r0, lsl #8]
    24b0:	01000013 	tsteq	r0, r3, lsl r0
    24b4:	000805b8 			; <UNDEFINED> instruction: 0x000805b8
    24b8:	0c001800 	stceq	8, cr1, [r0], {-0}
    24bc:	000000fd 	strdeq	r0, [r0], -sp
    24c0:	0011f602 	andseq	pc, r1, r2, lsl #12
    24c4:	a8b90100 	ldmge	r9!, {r8}
    24c8:	1a000007 	bne	24ec <__Stack_Size+0x1cec>
    24cc:	000007db 	ldrdeq	r0, [r0], -fp
    24d0:	11fc3b01 	mvnsne	r3, r1, lsl #22
    24d4:	00160800 	andseq	r0, r6, r0, lsl #16
    24d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    24dc:	00000856 	andeq	r0, r0, r6, asr r8
    24e0:	0013121b 	andseq	r1, r3, fp, lsl r2
    24e4:	133b0100 	teqne	fp, #0, 2
    24e8:	01000001 	tsteq	r0, r1
    24ec:	69701c50 	ldmdbvs	r0!, {r4, r6, sl, fp, ip}^
    24f0:	3b01006e 	blcc	426b0 <__Stack_Size+0x41eb0>
    24f4:	00000129 	andeq	r0, r0, r9, lsr #2
    24f8:	000003a6 	andeq	r0, r0, r6, lsr #7
    24fc:	6c61761c 	stclvs	6, cr7, [r1], #-112	; 0xffffff90
    2500:	293b0100 	ldmdbcs	fp!, {r8}
    2504:	c7000001 	strgt	r0, [r0, -r1]
    2508:	00000003 	andeq	r0, r0, r3
    250c:	000bf51d 	andeq	pc, fp, sp, lsl r5	; <UNPREDICTABLE>
    2510:	78400100 	stmdavc	r0, {r8}^
    2514:	12000001 	andne	r0, r0, #1
    2518:	12080012 	andne	r0, r8, #18
    251c:	01000000 	mrseq	r0, (UNDEF: 0)
    2520:	00088e9c 	muleq	r8, ip, lr
    2524:	13121e00 	tstne	r2, #0, 28
    2528:	40010000 	andmi	r0, r1, r0
    252c:	00000113 	andeq	r0, r0, r3, lsl r1
    2530:	000003fd 	strdeq	r0, [r0], -sp
    2534:	6e69701c 	mcrvs	0, 3, r7, cr9, cr12, {0}
    2538:	29400100 	stmdbcs	r0, {r8}^
    253c:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    2540:	00000004 	andeq	r0, r0, r4
    2544:	000cb11a 	andeq	fp, ip, sl, lsl r1
    2548:	24490100 	strbcs	r0, [r9], #-256	; 0x100
    254c:	50080012 	andpl	r0, r8, r2, lsl r0
    2550:	01000000 	mrseq	r0, (UNDEF: 0)
    2554:	0009579c 	muleq	r9, ip, r7
    2558:	13121e00 	tstne	r2, #0, 28
    255c:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    2560:	00000113 	andeq	r0, r0, r3, lsl r1
    2564:	0000043f 	andeq	r0, r0, pc, lsr r4
    2568:	6e69701c 	mcrvs	0, 3, r7, cr9, cr12, {0}
    256c:	29490100 	stmdbcs	r9, {r8}^
    2570:	5d000001 	stcpl	0, cr0, [r0, #-4]
    2574:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    2578:	00000e0a 	andeq	r0, r0, sl, lsl #28
    257c:	01294901 	teqeq	r9, r1, lsl #18
    2580:	047e0000 	ldrbteq	r0, [lr], #-0
    2584:	311e0000 	tstcc	lr, r0
    2588:	01000010 	tsteq	r0, r0, lsl r0
    258c:	00011349 	andeq	r1, r1, r9, asr #6
    2590:	0004c600 	andeq	ip, r4, r0, lsl #12
    2594:	0f3a1b00 	svceq	0x003a1b00
    2598:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    259c:	00000129 	andeq	r0, r0, r9, lsr #2
    25a0:	1f009102 	svcne	0x00009102
    25a4:	4d010063 	stcmi	0, cr0, [r1, #-396]	; 0xfffffe74
    25a8:	00000113 	andeq	r0, r0, r3, lsl r1
    25ac:	000004e4 	andeq	r0, r0, r4, ror #9
    25b0:	00124020 	andseq	r4, r2, r0, lsr #32
    25b4:	00081508 	andeq	r1, r8, r8, lsl #10
    25b8:	00091a00 	andeq	r1, r9, r0, lsl #20
    25bc:	52012100 	andpl	r2, r1, #0, 2
    25c0:	21007702 	tstcs	r0, r2, lsl #14
    25c4:	79025101 	stmdbvc	r2, {r0, r8, ip, lr}
    25c8:	50012100 	andpl	r2, r1, r0, lsl #2
    25cc:	00007802 	andeq	r7, r0, r2, lsl #16
    25d0:	00125620 	andseq	r5, r2, r0, lsr #12
    25d4:	00081508 	andeq	r1, r8, r8, lsl #10
    25d8:	00093a00 	andeq	r3, r9, r0, lsl #20
    25dc:	52012100 	andpl	r2, r1, #0, 2
    25e0:	21007a02 	tstcs	r0, r2, lsl #20
    25e4:	79025101 	stmdbvc	r2, {r0, r8, ip, lr}
    25e8:	50012100 	andpl	r2, r1, r0, lsl #2
    25ec:	00007802 	andeq	r7, r0, r2, lsl #16
    25f0:	00126c22 	andseq	r6, r2, r2, lsr #24
    25f4:	00081508 	andeq	r1, r8, r8, lsl #10
    25f8:	52012100 	andpl	r2, r1, #0, 2
    25fc:	21007702 	tstcs	r0, r2, lsl #14
    2600:	79025101 	stmdbvc	r2, {r0, r8, ip, lr}
    2604:	50012100 	andpl	r2, r1, r0, lsl #2
    2608:	00007802 	andeq	r7, r0, r2, lsl #16
    260c:	11c92300 	bicne	r2, r9, r0, lsl #6
    2610:	20010000 	andcs	r0, r1, r0
    2614:	00127401 	andseq	r7, r2, r1, lsl #8
    2618:	00000a08 	andeq	r0, r0, r8, lsl #20
    261c:	899c0100 	ldmibhi	ip, {r8}
    2620:	24000009 	strcs	r0, [r0], #-9
    2624:	00001139 	andeq	r1, r0, r9, lsr r1
    2628:	89012001 	stmdbhi	r1, {r0, sp}
    262c:	01000009 	tsteq	r0, r9
    2630:	68632550 	stmdavs	r3!, {r4, r6, r8, sl, sp}^
    2634:	01200100 	teqeq	r0, r0, lsl #2
    2638:	000000e7 	andeq	r0, r0, r7, ror #1
    263c:	08005101 	stmdaeq	r0, {r0, r8, ip, lr}
    2640:	0004f504 	andeq	pc, r4, r4, lsl #10
    2644:	10ad2300 	adcne	r2, sp, r0, lsl #6
    2648:	26010000 	strcs	r0, [r1], -r0
    264c:	00127e01 	andseq	r7, r2, r1, lsl #28
    2650:	00001608 	andeq	r1, r0, r8, lsl #12
    2654:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
    2658:	26000009 	strcs	r0, [r0], -r9
    265c:	00001139 	andeq	r1, r0, r9, lsr r1
    2660:	89012601 	stmdbhi	r1, {r0, r9, sl, sp}
    2664:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    2668:	27000005 	strcs	r0, [r0, -r5]
    266c:	00727473 	rsbseq	r7, r2, r3, ror r4
    2670:	d6012601 	strle	r2, [r1], -r1, lsl #12
    2674:	2b000009 	blcs	26a0 <__Stack_Size+0x1ea0>
    2678:	22000005 	andcs	r0, r0, #5
    267c:	08001290 	stmdaeq	r0, {r4, r7, r9, ip}
    2680:	00000957 	andeq	r0, r0, r7, asr r9
    2684:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
    2688:	00000075 	andeq	r0, r0, r5, ror r0
    268c:	00e70408 	rsceq	r0, r7, r8, lsl #8
    2690:	32230000 	eorcc	r0, r3, #0
    2694:	01000011 	tsteq	r0, r1, lsl r0
    2698:	1294012f 	addsne	r0, r4, #-1073741813	; 0xc000000b
    269c:	00280800 	eoreq	r0, r8, r0, lsl #16
    26a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    26a4:	00000a57 	andeq	r0, r0, r7, asr sl
    26a8:	746d6627 	strbtvc	r6, [sp], #-1575	; 0x627
    26ac:	012f0100 	teqeq	pc, r0, lsl #2
    26b0:	000000dc 	ldrdeq	r0, [r0], -ip
    26b4:	0000056e 	andeq	r0, r0, lr, ror #10
    26b8:	00111d26 	andseq	r1, r1, r6, lsr #26
    26bc:	012f0100 	teqeq	pc, r0, lsl #2
    26c0:	00000108 	andeq	r0, r0, r8, lsl #2
    26c4:	0000059a 	muleq	r0, sl, r5
    26c8:	00104c28 	andseq	r4, r0, r8, lsr #24
    26cc:	01310100 	teqeq	r1, r0, lsl #2
    26d0:	00000a57 	andeq	r0, r0, r7, asr sl
    26d4:	7eb09103 	asnvcs	f1, f3
    26d8:	0012a420 	andseq	sl, r2, r0, lsr #8
    26dc:	0011f308 	andseq	pc, r1, r8, lsl #6
    26e0:	000a3d00 	andeq	r3, sl, r0, lsl #26
    26e4:	51012100 	mrspl	r2, (UNDEF: 17)
    26e8:	5001f303 	andpl	pc, r1, r3, lsl #6
    26ec:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
    26f0:	2200007d 	andcs	r0, r0, #125	; 0x7d
    26f4:	080012b0 	stmdaeq	r0, {r4, r5, r7, r9, ip}
    26f8:	0000098f 	andeq	r0, r0, pc, lsl #19
    26fc:	02510121 	subseq	r0, r1, #1073741832	; 0x40000008
    2700:	0121007d 	teqeq	r1, sp, ror r0
    2704:	000c0550 	andeq	r0, ip, r0, asr r5
    2708:	00400138 	subeq	r0, r0, r8, lsr r1
    270c:	00d51500 	sbcseq	r1, r5, r0, lsl #10
    2710:	0a670000 	beq	19c2718 <__Stack_Size+0x19c1f18>
    2714:	bb160000 	bllt	58271c <__Stack_Size+0x581f1c>
    2718:	c7000000 	strgt	r0, [r0, -r0]
    271c:	0dbb2300 	ldceq	3, cr2, [fp]
    2720:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    2724:	0012bc01 	andseq	fp, r2, r1, lsl #24
    2728:	00001a08 	andeq	r1, r0, r8, lsl #20
    272c:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    2730:	2500000a 	strcs	r0, [r0, #-10]
    2734:	00746d66 	rsbseq	r6, r4, r6, ror #26
    2738:	dc013901 	stcle	9, cr3, [r1], {1}
    273c:	02000000 	andeq	r0, r0, #0
    2740:	28297091 	stmdacs	r9!, {r0, r4, r7, ip, sp, lr}
    2744:	0000111d 	andeq	r1, r0, sp, lsl r1
    2748:	08013b01 	stmdaeq	r1, {r0, r8, r9, fp, ip, sp}
    274c:	02000001 	andeq	r0, r0, #1
    2750:	cc226491 	cfstrsgt	mvf6, [r2], #-580	; 0xfffffdbc
    2754:	dc080012 	stcle	0, cr0, [r8], {18}
    2758:	21000009 	tstcs	r0, r9
    275c:	91025101 	tstls	r2, r1, lsl #2
    2760:	50012154 	andpl	r2, r1, r4, asr r1
    2764:	06509103 	ldrbeq	r9, [r0], -r3, lsl #2
    2768:	1d230000 	stcne	0, cr0, [r3, #-0]
    276c:	0100000f 	tsteq	r0, pc
    2770:	12d80141 	sbcsne	r0, r8, #1073741840	; 0x40000010
    2774:	009c0800 	addseq	r0, ip, r0, lsl #16
    2778:	9c010000 	stcls	0, cr0, [r1], {-0}
    277c:	00000be8 	andeq	r0, r0, r8, ror #23
    2780:	000d8a26 	andeq	r8, sp, r6, lsr #20
    2784:	01410100 	mrseq	r0, (UNDEF: 81)
    2788:	000000c9 	andeq	r0, r0, r9, asr #1
    278c:	000005ad 	andeq	r0, r0, sp, lsr #11
    2790:	001be926 	andseq	lr, fp, r6, lsr #18
    2794:	01410100 	mrseq	r0, (UNDEF: 81)
    2798:	00000025 	andeq	r0, r0, r5, lsr #32
    279c:	000005cb 	andeq	r0, r0, fp, asr #11
    27a0:	0100692a 	tsteq	r0, sl, lsr #18
    27a4:	005b0143 	subseq	r0, fp, r3, asr #2
    27a8:	05e90000 	strbeq	r0, [r9, #0]!
    27ac:	632b0000 	teqvs	fp, #0
    27b0:	44010073 	strmi	r0, [r1], #-115	; 0x73
    27b4:	000be801 	andeq	lr, fp, r1, lsl #16
    27b8:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    27bc:	0012ea20 	andseq	lr, r2, r0, lsr #20
    27c0:	00121208 	andseq	r1, r2, r8, lsl #4
    27c4:	000b2400 	andeq	r2, fp, r0, lsl #8
    27c8:	52012100 	andpl	r2, r1, #0, 2
    27cc:	01214101 	teqeq	r1, r1, lsl #2
    27d0:	21300151 	teqcs	r0, r1, asr r1
    27d4:	91025001 	tstls	r2, r1
    27d8:	00200054 	eoreq	r0, r0, r4, asr r0
    27dc:	67080013 	smladvs	r8, r3, r0, r0
    27e0:	4100000a 	tstmi	r0, sl
    27e4:	2100000b 	tstcs	r0, fp
    27e8:	91025101 	tstls	r2, r1, lsl #2
    27ec:	50012154 	andpl	r2, r1, r4, asr r1
    27f0:	76bc0305 	ldrtvc	r0, [ip], r5, lsl #6
    27f4:	20000800 	andcs	r0, r0, r0, lsl #16
    27f8:	0800130a 	stmdaeq	r0, {r1, r3, r8, r9, ip}
    27fc:	00001212 	andeq	r1, r0, r2, lsl r2
    2800:	00000b60 	andeq	r0, r0, r0, ror #22
    2804:	01520121 	cmpeq	r2, r1, lsr #2
    2808:	51012141 	tstpl	r1, r1, asr #2
    280c:	21007502 	tstcs	r0, r2, lsl #10
    2810:	91025001 	tstls	r2, r1
    2814:	18200054 	stmdane	r0!, {r2, r4, r6}
    2818:	67080013 	smladvs	r8, r3, r0, r0
    281c:	7f00000a 	svcvc	0x0000000a
    2820:	2100000b 	tstcs	r0, fp
    2824:	74045101 	strvc	r5, [r4], #-257	; 0x101
    2828:	211a3700 	tstcs	sl, r0, lsl #14
    282c:	03055001 	movweq	r5, #20481	; 0x5001
    2830:	080076cb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r9, sl, ip, sp, lr}
    2834:	13202000 	teqne	r0, #0
    2838:	0a670800 	beq	19c4840 <__Stack_Size+0x19c4040>
    283c:	0b960000 	bleq	fe582844 <BootRAM+0xd4f2fe5>
    2840:	01210000 	teqeq	r1, r0
    2844:	c3030550 	movwgt	r0, #13648	; 0x3550
    2848:	00080076 	andeq	r0, r8, r6, ror r0
    284c:	00134220 	andseq	r4, r3, r0, lsr #4
    2850:	000a6708 	andeq	r6, sl, r8, lsl #14
    2854:	000bb300 	andeq	fp, fp, r0, lsl #6
    2858:	51012100 	mrspl	r2, (UNDEF: 17)
    285c:	21549102 	cmpcs	r4, r2, lsl #2
    2860:	03055001 	movweq	r5, #20481	; 0x5001
    2864:	080076bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, ip, sp, lr}
    2868:	13522000 	cmpne	r2, #0
    286c:	0a670800 	beq	19c4874 <__Stack_Size+0x19c4074>
    2870:	0bcf0000 	bleq	ff3c2878 <BootRAM+0xe333019>
    2874:	01210000 	teqeq	r1, r0
    2878:	21300151 	teqcs	r0, r1, asr r1
    287c:	03055001 	movweq	r5, #20481	; 0x5001
    2880:	080076cb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r9, sl, ip, sp, lr}
    2884:	135e2200 	cmpne	lr, #0, 4
    2888:	0a670800 	beq	19c4890 <__Stack_Size+0x19c4090>
    288c:	01210000 	teqeq	r1, r0
    2890:	21300151 	teqcs	r0, r1, asr r1
    2894:	03055001 	movweq	r5, #20481	; 0x5001
    2898:	080076c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, sl, ip, sp, lr}
    289c:	d5150000 	ldrle	r0, [r5, #-0]
    28a0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    28a4:	1600000b 	strne	r0, [r0], -fp
    28a8:	000000bb 	strheq	r0, [r0], -fp
    28ac:	7c230010 	stcvc	0, cr0, [r3], #-64	; 0xffffffc0
    28b0:	0100000f 	tsteq	r0, pc
    28b4:	13740165 	cmnne	r4, #1073741849	; 0x40000019
    28b8:	00280800 	eoreq	r0, r8, r0, lsl #16
    28bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    28c0:	00000c5e 	andeq	r0, r0, lr, asr ip
    28c4:	000f8226 	andeq	r8, pc, r6, lsr #4
    28c8:	01650100 	cmneq	r5, r0, lsl #2
    28cc:	000000c9 	andeq	r0, r0, r9, asr #1
    28d0:	00000636 	andeq	r0, r0, r6, lsr r6
    28d4:	7864692a 	stmdavc	r4!, {r1, r3, r5, r8, fp, sp, lr}^
    28d8:	01670100 	cmneq	r7, r0, lsl #2
    28dc:	0000005b 	andeq	r0, r0, fp, asr r0
    28e0:	00000662 	andeq	r0, r0, r2, ror #12
    28e4:	00138420 	andseq	r8, r3, r0, lsr #8
    28e8:	000a6708 	andeq	r6, sl, r8, lsl #14
    28ec:	000c4500 	andeq	r4, ip, r0, lsl #10
    28f0:	50012100 	andpl	r2, r1, r0, lsl #2
    28f4:	76cd0305 	strbvc	r0, [sp], r5, lsl #6
    28f8:	2c000800 	stccs	8, cr0, [r0], {-0}
    28fc:	08001394 	stmdaeq	r0, {r2, r4, r7, r8, r9, ip}
    2900:	00000a67 	andeq	r0, r0, r7, ror #20
    2904:	01510121 	cmpeq	r1, r1, lsr #2
    2908:	50012130 	andpl	r2, r1, r0, lsr r1
    290c:	76ee0305 	strbtvc	r0, [lr], r5, lsl #6
    2910:	00000800 	andeq	r0, r0, r0, lsl #16
    2914:	000cfe23 	andeq	pc, ip, r3, lsr #28
    2918:	016e0100 	cmneq	lr, r0, lsl #2
    291c:	0800139c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, ip}
    2920:	00000088 	andeq	r0, r0, r8, lsl #1
    2924:	0d4d9c01 	stcleq	12, cr9, [sp, #-4]
    2928:	dd280000 	stcle	0, cr0, [r8, #-0]
    292c:	01000010 	tsteq	r0, r0, lsl r0
    2930:	079d016f 	ldreq	r0, [sp, pc, ror #2]
    2934:	91020000 	mrsls	r0, (UNDEF: 2)
    2938:	100c2864 	andne	r2, ip, r4, ror #16
    293c:	70010000 	andvc	r0, r1, r0
    2940:	0006fa01 	andeq	pc, r6, r1, lsl #20
    2944:	68910200 	ldmvs	r1, {r9}
    2948:	000f942d 	andeq	r9, pc, sp, lsr #8
    294c:	018b0100 	orreq	r0, fp, r0, lsl #2
    2950:	0000005b 	andeq	r0, r0, fp, asr r0
    2954:	00000ca4 	andeq	r0, r0, r4, lsr #25
    2958:	8b2d0029 	blhi	b42a04 <__Stack_Size+0xb42204>
    295c:	01000012 	tsteq	r0, r2, lsl r0
    2960:	005b018e 	subseq	r0, fp, lr, lsl #3
    2964:	0cb60000 	ldceq	0, cr0, [r6]
    2968:	00290000 	eoreq	r0, r9, r0
    296c:	0013ac20 	andseq	sl, r3, r0, lsr #24
    2970:	00122f08 	andseq	r2, r2, r8, lsl #30
    2974:	000cd000 	andeq	sp, ip, r0
    2978:	51012100 	mrspl	r2, (UNDEF: 17)
    297c:	01213101 	teqeq	r1, r1, lsl #2
    2980:	000a0350 	andeq	r0, sl, r0, asr r3
    2984:	b4200040 	strtlt	r0, [r0], #-64	; 0x40
    2988:	2f080013 	svccs	0x00080013
    298c:	e9000012 	stmdb	r0, {r1, r4}
    2990:	2100000c 	tstcs	r0, ip
    2994:	31015101 	tstcc	r1, r1, lsl #2
    2998:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
    299c:	20000074 	andcs	r0, r0, r4, ror r0
    29a0:	080013d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, ip}
    29a4:	00001246 	andeq	r1, r0, r6, asr #4
    29a8:	00000d03 	andeq	r0, r0, r3, lsl #26
    29ac:	02510121 	subseq	r0, r1, #1073741832	; 0x40000008
    29b0:	01216491 			; <UNDEFINED> instruction: 0x01216491
    29b4:	00740250 	rsbseq	r0, r4, r0, asr r2
    29b8:	13e82000 	mvnne	r2, #0
    29bc:	12460800 	subne	r0, r6, #0, 16
    29c0:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
    29c4:	01210000 	teqeq	r1, r0
    29c8:	64910251 	ldrvs	r0, [r1], #593	; 0x251
    29cc:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
    29d0:	20000074 	andcs	r0, r0, r4, ror r0
    29d4:	08001412 	stmdaeq	r0, {r1, r4, sl, ip}
    29d8:	00001269 	andeq	r1, r0, r9, ror #4
    29dc:	00000d37 	andeq	r0, r0, r7, lsr sp
    29e0:	02510121 	subseq	r0, r1, #1073741832	; 0x40000008
    29e4:	01216891 			; <UNDEFINED> instruction: 0x01216891
    29e8:	00740250 	rsbseq	r0, r4, r0, asr r2
    29ec:	141a2200 	ldrne	r2, [sl], #-512	; 0x200
    29f0:	127b0800 	rsbsne	r0, fp, #0, 16
    29f4:	01210000 	teqeq	r1, r0
    29f8:	21310151 	teqcs	r1, r1, asr r1
    29fc:	74025001 	strvc	r5, [r2], #-1
    2a00:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    2a04:	00000b9b 	muleq	r0, fp, fp
    2a08:	24019101 	strcs	r9, [r1], #-257	; 0x101
    2a0c:	48080014 	stmdami	r8, {r2, r4}
    2a10:	01000000 	mrseq	r0, (UNDEF: 0)
    2a14:	0b16239c 	bleq	58b88c <__Stack_Size+0x58b08c>
    2a18:	9b010000 	blls	42a20 <__Stack_Size+0x42220>
    2a1c:	00146c01 	andseq	r6, r4, r1, lsl #24
    2a20:	00006008 	andeq	r6, r0, r8
    2a24:	839c0100 	orrshi	r0, ip, #0, 2
    2a28:	2f00000d 	svccs	0x0000000d
    2a2c:	00001368 	andeq	r1, r0, r8, ror #6
    2a30:	30019c01 	andcc	r9, r1, r1, lsl #24
    2a34:	00000000 	andeq	r0, r0, r0
    2a38:	027f3000 	rsbseq	r3, pc, #0
    2a3c:	b0010000 	andlt	r0, r1, r0
    2a40:	00003002 	andeq	r3, r0, r2
    2a44:	0dad0100 	stfeqs	f0, [sp]
    2a48:	70310000 	eorsvc	r0, r1, r0
    2a4c:	01006e69 	tsteq	r0, r9, ror #28
    2a50:	005b02b0 	ldrheq	r0, [fp], #-32	; 0xffffffe0
    2a54:	18320000 	ldmdane	r2!, {}	; <UNPREDICTABLE>
    2a58:	0100000f 	tsteq	r0, pc
    2a5c:	003002b2 	ldrhteq	r0, [r0], -r2
    2a60:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    2a64:	00000cce 	andeq	r0, r0, lr, asr #25
    2a68:	cc01c501 	cfstr32gt	mvfx12, [r1], {1}
    2a6c:	14080014 	strne	r0, [r8], #-20
    2a70:	01000000 	mrseq	r0, (UNDEF: 0)
    2a74:	0be1239c 	bleq	ff84b8ec <BootRAM+0xe7bc08d>
    2a78:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    2a7c:	0014e001 	andseq	lr, r4, r1
    2a80:	00001c08 	andeq	r1, r0, r8, lsl #24
    2a84:	f09c0100 			; <UNDEFINED> instruction: 0xf09c0100
    2a88:	3300000d 	movwcc	r0, #13
    2a8c:	080014e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip}
    2a90:	00000008 	andeq	r0, r0, r8
    2a94:	00107134 	andseq	r7, r0, r4, lsr r1
    2a98:	01cc0100 	biceq	r0, ip, r0, lsl #2
    2a9c:	00000113 	andeq	r0, r0, r3, lsl r1
    2aa0:	00000699 	muleq	r0, r9, r6
    2aa4:	2c230000 	stccs	0, cr0, [r3], #-0
    2aa8:	0100000b 	tsteq	r0, fp
    2aac:	14fc01d6 	ldrbtne	r0, [ip], #470	; 0x1d6
    2ab0:	002c0800 	eoreq	r0, ip, r0, lsl #16
    2ab4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ab8:	00000e14 	andeq	r0, r0, r4, lsl lr
    2abc:	00646925 	rsbeq	r6, r4, r5, lsr #18
    2ac0:	1401d601 	strne	sp, [r1], #-1537	; 0x601
    2ac4:	0100000e 	tsteq	r0, lr
    2ac8:	04080050 	streq	r0, [r8], #-80	; 0x50
    2acc:	00000667 	andeq	r0, r0, r7, ror #12
    2ad0:	0011e335 	andseq	lr, r1, r5, lsr r3
    2ad4:	01e30100 	mvneq	r0, r0, lsl #2
    2ad8:	08001528 	stmdaeq	r0, {r3, r5, r8, sl, ip}
    2adc:	00000018 	andeq	r0, r0, r8, lsl r0
    2ae0:	0e6d9c01 	cdpeq	12, 6, cr9, cr13, cr1, {0}
    2ae4:	80260000 	eorhi	r0, r6, r0
    2ae8:	01000010 	tsteq	r0, r0, lsl r0
    2aec:	011301e3 	tsteq	r3, r3, ror #3
    2af0:	06ac0000 	strteq	r0, [ip], r0
    2af4:	44360000 	ldrtmi	r0, [r6], #-0
    2af8:	01000010 	tsteq	r0, r0, lsl r0
    2afc:	00c201e7 	sbceq	r0, r2, r7, ror #3
    2b00:	2c340000 	ldccs	0, cr0, [r4], #-0
    2b04:	01000013 	tsteq	r0, r3, lsl r0
    2b08:	011301e8 	tsteq	r3, r8, ror #3
    2b0c:	06cd0000 	strbeq	r0, [sp], r0
    2b10:	bf340000 	svclt	0x00340000
    2b14:	01000010 	tsteq	r0, r0, lsl r0
    2b18:	0e4001ea 	dvfeqdz	f0, f0, #2.0
    2b1c:	06cd0000 	strbeq	r0, [sp], r0
    2b20:	23000000 	movwcs	r0, #0
    2b24:	00000e73 	andeq	r0, r0, r3, ror lr
    2b28:	00020901 	andeq	r0, r2, r1, lsl #18
    2b2c:	2c000000 	stccs	0, cr0, [r0], {-0}
    2b30:	01000000 	mrseq	r0, (UNDEF: 0)
    2b34:	000e929c 	muleq	lr, ip, r2
    2b38:	1c052400 	cfstrsne	mvf2, [r5], {-0}
    2b3c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    2b40:	00011e02 	andeq	r1, r1, r2, lsl #28
    2b44:	00500100 	subseq	r0, r0, r0, lsl #2
    2b48:	000e9437 	andeq	r9, lr, r7, lsr r4
    2b4c:	02180100 	andseq	r0, r8, #0, 2
    2b50:	0000005b 	andeq	r0, r0, fp, asr r0
    2b54:	00000000 	andeq	r0, r0, r0
    2b58:	00000048 	andeq	r0, r0, r8, asr #32
    2b5c:	0ecc9c01 	cdpeq	12, 12, cr9, cr12, cr1, {0}
    2b60:	78340000 	ldmdavc	r4!, {}	; <UNPREDICTABLE>
    2b64:	01000010 	tsteq	r0, r0, lsl r0
    2b68:	0178021a 	cmneq	r8, sl, lsl r2
    2b6c:	06e00000 	strbteq	r0, [r0], r0
    2b70:	00220000 	eoreq	r0, r2, r0
    2b74:	6d000000 	stcvs	0, cr0, [r0, #-0]
    2b78:	2100000e 	tstcs	r0, lr
    2b7c:	30015001 	andcc	r5, r1, r1
    2b80:	e1230000 	teq	r3, r0
    2b84:	01000009 	tsteq	r0, r9
    2b88:	15400232 	strbne	r0, [r0, #-562]	; 0x232
    2b8c:	006c0800 	rsbeq	r0, ip, r0, lsl #16
    2b90:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b94:	00000f63 	andeq	r0, r0, r3, ror #30
    2b98:	00126a24 	andseq	r6, r2, r4, lsr #20
    2b9c:	02320100 	eorseq	r0, r2, #0, 2
    2ba0:	00000f63 	andeq	r0, r0, r3, ror #30
    2ba4:	5c345001 	ldcpl	0, cr5, [r4], #-4
    2ba8:	01000013 	tsteq	r0, r3, lsl r0
    2bac:	01130233 	tsteq	r3, r3, lsr r2
    2bb0:	06ff0000 	ldrbteq	r0, [pc], r0
    2bb4:	d0340000 	eorsle	r0, r4, r0
    2bb8:	0100000f 	tsteq	r0, pc
    2bbc:	01130234 	tsteq	r3, r4, lsr r2
    2bc0:	076b0000 	strbeq	r0, [fp, -r0]!
    2bc4:	15340000 	ldrne	r0, [r4, #-0]!
    2bc8:	0100000f 	tsteq	r0, pc
    2bcc:	01130235 	tsteq	r3, r5, lsr r2
    2bd0:	07a00000 	streq	r0, [r0, r0]!
    2bd4:	5f340000 	svcpl	0x00340000
    2bd8:	01000010 	tsteq	r0, r0, lsl r0
    2bdc:	01130236 	tsteq	r3, r6, lsr r2
    2be0:	07d80000 	ldrbeq	r0, [r8, r0]
    2be4:	26340000 	ldrtcs	r0, [r4], -r0
    2be8:	01000012 	tsteq	r0, r2, lsl r0
    2bec:	01130237 	tsteq	r3, r7, lsr r2
    2bf0:	08150000 	ldmdaeq	r5, {}	; <UNPREDICTABLE>
    2bf4:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
    2bf8:	01000011 	tsteq	r0, r1, lsl r0
    2bfc:	0f690239 	svceq	0x00690239
    2c00:	da800000 	ble	fe002c08 <BootRAM+0xcf733a9>
    2c04:	387e8083 	ldmdacc	lr!, {r0, r1, r7, pc}^
    2c08:	00000e7e 	andeq	r0, r0, lr, ror lr
    2c0c:	6f023a01 	svcvs	0x00023a01
    2c10:	8000000f 	andhi	r0, r0, pc
    2c14:	7e8083c2 	cdpvc	3, 8, cr8, cr0, cr2, {6}
    2c18:	65040800 	strvs	r0, [r4, #-2048]	; 0x800
    2c1c:	08000003 	stmdaeq	r0, {r0, r1}
    2c20:	00043604 	andeq	r3, r4, r4, lsl #12
    2c24:	21040800 	tstcs	r4, r0, lsl #16
    2c28:	23000003 	movwcs	r0, #3
    2c2c:	00000eb5 			; <UNDEFINED> instruction: 0x00000eb5
    2c30:	ac025501 	cfstr32ge	mvfx5, [r2], {1}
    2c34:	24080015 	strcs	r0, [r8], #-21
    2c38:	01000000 	mrseq	r0, (UNDEF: 0)
    2c3c:	000f9d9c 	muleq	pc, ip, sp	; <UNPREDICTABLE>
    2c40:	0e7e3800 	cdpeq	8, 7, cr3, cr14, cr0, {0}
    2c44:	56010000 	strpl	r0, [r1], -r0
    2c48:	000f6f02 	andeq	r6, pc, r2, lsl #30
    2c4c:	83c28000 	bichi	r8, r2, #0
    2c50:	23007e80 	movwcs	r7, #3712	; 0xe80
    2c54:	00000d3d 	andeq	r0, r0, sp, lsr sp
    2c58:	d001f501 	andle	pc, r1, r1, lsl #10
    2c5c:	1e080015 	mcrne	0, 0, r0, cr8, cr5, {0}
    2c60:	01000000 	mrseq	r0, (UNDEF: 0)
    2c64:	000ff99c 	muleq	pc, ip, r9	; <UNPREDICTABLE>
    2c68:	10802600 	addne	r2, r0, r0, lsl #12
    2c6c:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    2c70:	00011301 	andeq	r1, r1, r1, lsl #6
    2c74:	00084300 	andeq	r4, r8, r0, lsl #6
    2c78:	15d83900 	ldrbne	r3, [r8, #2304]	; 0x900
    2c7c:	128d0800 	addne	r0, sp, #0, 16
    2c80:	dc390000 	ldcle	0, cr0, [r9], #-0
    2c84:	75080015 	strvc	r0, [r8, #-21]
    2c88:	3900000f 	stmdbcc	r0, {r0, r1, r2, r3}
    2c8c:	080015e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, ip}
    2c90:	00001294 	muleq	r0, r4, r2
    2c94:	0015e439 	andseq	lr, r5, r9, lsr r4
    2c98:	000d4d08 	andeq	r4, sp, r8, lsl #26
    2c9c:	15ee2c00 	strbne	r2, [lr, #3072]!	; 0xc00
    2ca0:	0e1a0800 	cdpeq	8, 1, cr0, cr10, cr0, {0}
    2ca4:	01210000 	teqeq	r1, r0
    2ca8:	01f30350 	mvnseq	r0, r0, asr r3
    2cac:	23000050 	movwcs	r0, #80	; 0x50
    2cb0:	00000e63 	andeq	r0, r0, r3, ror #28
    2cb4:	f0025f01 			; <UNDEFINED> instruction: 0xf0025f01
    2cb8:	14080015 	strne	r0, [r8], #-21
    2cbc:	01000000 	mrseq	r0, (UNDEF: 0)
    2cc0:	0010219c 	mulseq	r0, ip, r1
    2cc4:	11183800 	tstne	r8, r0, lsl #16
    2cc8:	60010000 	andvs	r0, r1, r0
    2ccc:	000f6902 	andeq	r6, pc, r2, lsl #18
    2cd0:	83da8000 	bicshi	r8, sl, #0
    2cd4:	3a007e80 	bcc	226dc <__Stack_Size+0x21edc>
    2cd8:	00000e3c 	andeq	r0, r0, ip, lsr lr
    2cdc:	78026b01 	stmdavc	r2, {r0, r8, r9, fp, sp, lr}
    2ce0:	04000001 	streq	r0, [r0], #-1
    2ce4:	34080016 	strcc	r0, [r8], #-22
    2ce8:	01000000 	mrseq	r0, (UNDEF: 0)
    2cec:	00105c9c 	mulseq	r0, ip, ip
    2cf0:	13172600 	tstne	r7, #0, 12
    2cf4:	6b010000 	blvs	42cfc <__Stack_Size+0x424fc>
    2cf8:	00011302 	andeq	r1, r1, r2, lsl #6
    2cfc:	00087a00 	andeq	r7, r8, r0, lsl #20
    2d00:	10713400 	rsbsne	r3, r1, r0, lsl #8
    2d04:	6c010000 	stcvs	0, cr0, [r1], {-0}
    2d08:	00011302 	andeq	r1, r1, r2, lsl #6
    2d0c:	00089b00 	andeq	r9, r8, r0, lsl #22
    2d10:	223a0000 	eorscs	r0, sl, #0
    2d14:	01000011 	tsteq	r0, r1, lsl r0
    2d18:	0178027c 	cmneq	r8, ip, ror r2
    2d1c:	00000000 	andeq	r0, r0, r0
    2d20:	00300000 	eorseq	r0, r0, r0
    2d24:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d28:	0000109e 	muleq	r0, lr, r0
    2d2c:	00131726 	andseq	r1, r3, r6, lsr #14
    2d30:	027c0100 	rsbseq	r0, ip, #0, 2
    2d34:	00000113 	andeq	r0, r0, r3, lsl r1
    2d38:	000008bb 			; <UNDEFINED> instruction: 0x000008bb
    2d3c:	01006e27 	tsteq	r0, r7, lsr #28
    2d40:	011e027c 	tsteq	lr, ip, ror r2
    2d44:	08e70000 	stmiaeq	r7!, {}^	; <UNPREDICTABLE>
    2d48:	00390000 	eorseq	r0, r9, r0
    2d4c:	21000000 	mrscs	r0, (UNDEF: 0)
    2d50:	00000010 	andeq	r0, r0, r0, lsl r0
    2d54:	000ffd3a 	andeq	pc, pc, sl, lsr sp	; <UNPREDICTABLE>
    2d58:	02860100 	addeq	r0, r6, #0, 2
    2d5c:	00000178 	andeq	r0, r0, r8, ror r1
    2d60:	08001638 	stmdaeq	r0, {r3, r4, r5, r9, sl, ip}
    2d64:	0000004c 	andeq	r0, r0, ip, asr #32
    2d68:	11159c01 	tstne	r5, r1, lsl #24
    2d6c:	c1260000 	teqgt	r6, r0
    2d70:	01000012 	tsteq	r0, r2, lsl r0
    2d74:	01130286 	tsteq	r3, r6, lsl #5
    2d78:	092b0000 	stmdbeq	fp!, {}	; <UNPREDICTABLE>
    2d7c:	de240000 	cdple	0, 2, cr0, cr4, cr0, {0}
    2d80:	01000011 	tsteq	r0, r1, lsl r0
    2d84:	01130286 	tsteq	r3, r6, lsl #5
    2d88:	51010000 	mrspl	r0, (UNDEF: 1)
    2d8c:	00126034 	andseq	r6, r2, r4, lsr r0
    2d90:	02870100 	addeq	r0, r7, #0, 2
    2d94:	00001115 	andeq	r1, r0, r5, lsl r1
    2d98:	0000092b 	andeq	r0, r0, fp, lsr #18
    2d9c:	00132028 	andseq	r2, r3, r8, lsr #32
    2da0:	02880100 	addeq	r0, r8, #0, 2
    2da4:	00000133 	andeq	r0, r0, r3, lsr r1
    2da8:	28689102 	stmdacs	r8!, {r1, r8, ip, pc}^
    2dac:	00001355 	andeq	r1, r0, r5, asr r3
    2db0:	33028901 	movwcc	r8, #10497	; 0x2901
    2db4:	02000001 	andeq	r0, r0, #1
    2db8:	71346c91 			; <UNDEFINED> instruction: 0x71346c91
    2dbc:	01000010 	tsteq	r0, r0, lsl r0
    2dc0:	0113028b 	tsteq	r3, fp, lsl #5
    2dc4:	094c0000 	stmdbeq	ip, {}^	; <UNPREDICTABLE>
    2dc8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2dcc:	00014304 	andeq	r4, r1, r4, lsl #6
    2dd0:	11d42e00 	bicsne	r2, r4, r0, lsl #28
    2dd4:	a1010000 	mrsge	r0, (UNDEF: 1)
    2dd8:	00168402 	andseq	r8, r6, r2, lsl #8
    2ddc:	00000c08 	andeq	r0, r0, r8, lsl #24
    2de0:	2e9c0100 	fmlcse	f0, f4, f0
    2de4:	00001053 	andeq	r1, r0, r3, asr r0
    2de8:	9002a801 	andls	sl, r2, r1, lsl #16
    2dec:	18080016 	stmdane	r8, {r1, r2, r4}
    2df0:	01000000 	mrseq	r0, (UNDEF: 0)
    2df4:	0d833b9c 	vstreq	d3, [r3, #624]	; 0x270
    2df8:	16a80000 	strtne	r0, [r8], r0
    2dfc:	00120800 	andseq	r0, r2, r0, lsl #16
    2e00:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e04:	00001165 	andeq	r1, r0, r5, ror #2
    2e08:	000d943c 	andeq	r9, sp, ip, lsr r4
    2e0c:	00096a00 	andeq	r6, r9, r0, lsl #20
    2e10:	0da03d00 	stceq	13, cr3, [r0]
    2e14:	09880000 	stmibeq	r8, {}	; <UNPREDICTABLE>
    2e18:	3a000000 	bcc	2e20 <__Stack_Size+0x2620>
    2e1c:	000010c7 	andeq	r1, r0, r7, asr #1
    2e20:	5b02bc01 	blpl	b1e2c <__Stack_Size+0xb162c>
    2e24:	bc000000 	stclt	0, cr0, [r0], {-0}
    2e28:	10080016 	andne	r0, r8, r6, lsl r0
    2e2c:	01000000 	mrseq	r0, (UNDEF: 0)
    2e30:	0011909c 	mulseq	r1, ip, r0
    2e34:	10d33e00 	sbcsne	r3, r3, r0, lsl #28
    2e38:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    2e3c:	00119002 	andseq	r9, r1, r2
    2e40:	fff7e000 			; <UNDEFINED> instruction: 0xfff7e000
    2e44:	0408001f 	streq	r0, [r8], #-31
    2e48:	0000008d 	andeq	r0, r0, sp, lsl #1
    2e4c:	00035f3a 	andeq	r5, r3, sl, lsr pc
    2e50:	02c20100 	sbceq	r0, r2, #0, 2
    2e54:	0000005b 	andeq	r0, r0, fp, asr r0
    2e58:	080016cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip}
    2e5c:	00000018 	andeq	r0, r0, r8, lsl r0
    2e60:	11c19c01 	bicne	r9, r1, r1, lsl #24
    2e64:	d33e0000 	teqle	lr, #0
    2e68:	01000010 	tsteq	r0, r0, lsl r0
    2e6c:	119002c5 	orrsne	r0, r0, r5, asr #5
    2e70:	f7e00000 			; <UNDEFINED> instruction: 0xf7e00000
    2e74:	3f001fff 	svccc	0x00001fff
    2e78:	000000b1 	strheq	r0, [r0], -r1
    2e7c:	005b2c09 	subseq	r2, fp, r9, lsl #24
    2e80:	03050000 	movweq	r0, #20480	; 0x5000
    2e84:	20000488 	andcs	r0, r0, r8, lsl #9
    2e88:	0000e715 	andeq	lr, r0, r5, lsl r7
    2e8c:	0011e200 	andseq	lr, r1, r0, lsl #4
    2e90:	00bb1600 	adcseq	r1, fp, r0, lsl #12
    2e94:	001f0000 	andseq	r0, pc, r0
    2e98:	000c7b3f 	andeq	r7, ip, pc, lsr fp
    2e9c:	d26b0a00 	rsble	r0, fp, #0, 20
    2ea0:	05000011 	streq	r0, [r0, #-17]
    2ea4:	00040403 	andeq	r0, r4, r3, lsl #8
    2ea8:	0f024020 	svceq	0x00024020
    2eac:	b70b0000 	strlt	r0, [fp, -r0]
    2eb0:	0000005b 	andeq	r0, r0, fp, asr r0
    2eb4:	00001212 	andeq	r1, r0, r2, lsl r2
    2eb8:	0000cf41 	andeq	ip, r0, r1, asr #30
    2ebc:	00dc4100 	sbcseq	r4, ip, r0, lsl #2
    2ec0:	37410000 	strbcc	r0, [r1, -r0]
    2ec4:	00000000 	andeq	r0, r0, r0
    2ec8:	000c1642 	andeq	r1, ip, r2, asr #12
    2ecc:	00005900 	andeq	r5, r0, r0, lsl #18
    2ed0:	00122f00 	andseq	r2, r2, r0, lsl #30
    2ed4:	00594100 	subseq	r4, r9, r0, lsl #2
    2ed8:	5b410000 	blpl	1042ee0 <__Stack_Size+0x10426e0>
    2edc:	41000000 	mrsmi	r0, (UNDEF: 0)
    2ee0:	000000bb 	strheq	r0, [r0], -fp
    2ee4:	12e34300 	rscne	r4, r3, #0, 6
    2ee8:	14010000 	strne	r0, [r1], #-0
    2eec:	00124601 	andseq	r4, r2, r1, lsl #12
    2ef0:	00fd4100 	rscseq	r4, sp, r0, lsl #2
    2ef4:	98410000 	stmdals	r1, {}^	; <UNPREDICTABLE>
    2ef8:	00000001 	andeq	r0, r0, r1
    2efc:	000f0b43 	andeq	r0, pc, r3, asr #22
    2f00:	01150100 	tsteq	r5, r0, lsl #2
    2f04:	0000125d 	andeq	r1, r0, sp, asr r2
    2f08:	00125d41 	andseq	r5, r2, r1, asr #26
    2f0c:	12634100 	rsbne	r4, r3, #0, 2
    2f10:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2f14:	00080a04 	andeq	r0, r8, r4, lsl #20
    2f18:	9d040800 	stcls	8, cr0, [r4, #-0]
    2f1c:	2d000007 	stccs	0, cr0, [r0, #-28]	; 0xffffffe4
    2f20:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    2f24:	5b018b01 	blpl	65b30 <__Stack_Size+0x65330>
    2f28:	7b000000 	blvc	2f30 <__Stack_Size+0x2730>
    2f2c:	29000012 	stmdbcs	r0, {r1, r4}
    2f30:	128b2d00 	addne	r2, fp, #0, 26
    2f34:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    2f38:	00005b01 	andeq	r5, r0, r1, lsl #22
    2f3c:	00128d00 	andseq	r8, r2, r0, lsl #26
    2f40:	44002900 	strmi	r2, [r0], #-2304	; 0x900
    2f44:	00000080 	andeq	r0, r0, r0, lsl #1
    2f48:	67448209 	strbvs	r8, [r4, -r9, lsl #4]
    2f4c:	09000005 	stmdbeq	r0, {r0, r2}
    2f50:	09b10052 	ldmibeq	r1!, {r1, r4, r6}
    2f54:	00040000 	andeq	r0, r4, r0
    2f58:	00000af9 	strdeq	r0, [r0], -r9
    2f5c:	06390104 	ldrteq	r0, [r9], -r4, lsl #2
    2f60:	65010000 	strvs	r0, [r1, #-0]
    2f64:	93000014 	movwls	r0, #20
    2f68:	50000008 	andpl	r0, r0, r8
    2f6c:	00000002 	andeq	r0, r0, r2
    2f70:	24000000 	strcs	r0, [r0], #-0
    2f74:	0200000d 	andeq	r0, r0, #13
    2f78:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    2f7c:	40030000 	andmi	r0, r3, r0
    2f80:	0200000c 	andeq	r0, r0, #12
    2f84:	0000371c 	andeq	r3, r0, ip, lsl r7
    2f88:	08010200 	stmdaeq	r1, {r9}
    2f8c:	00000818 	andeq	r0, r0, r8, lsl r8
    2f90:	fc050202 	stc2	2, cr0, [r5], {2}
    2f94:	02000006 	andeq	r0, r0, #6
    2f98:	09490702 	stmdbeq	r9, {r1, r8, r9, sl}^
    2f9c:	04020000 	streq	r0, [r2], #-0
    2fa0:	0004da05 	andeq	sp, r4, r5, lsl #20
    2fa4:	0b4e0300 	bleq	1383bac <__Stack_Size+0x13833ac>
    2fa8:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    2fac:	0000005e 	andeq	r0, r0, lr, asr r0
    2fb0:	52070402 	andpl	r0, r7, #33554432	; 0x2000000
    2fb4:	02000002 	andeq	r0, r0, #2
    2fb8:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
    2fbc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2fc0:	00024d07 	andeq	r4, r2, r7, lsl #26
    2fc4:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    2fc8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2fcc:	57070402 	strpl	r0, [r7, -r2, lsl #8]
    2fd0:	03000002 	movweq	r0, #2
    2fd4:	00000c42 	andeq	r0, r0, r2, asr #24
    2fd8:	002c2a03 	eoreq	r2, ip, r3, lsl #20
    2fdc:	50030000 	andpl	r0, r3, r0
    2fe0:	0300000b 	movweq	r0, #11
    2fe4:	00005342 	andeq	r5, r0, r2, asr #6
    2fe8:	33750500 	cmncc	r5, #0, 10
    2fec:	27040032 	smladxcs	r4, r2, r0, r0
    2ff0:	0000005e 	andeq	r0, r0, lr, asr r0
    2ff4:	36317505 	ldrtcc	r7, [r1], -r5, lsl #10
    2ff8:	45280400 	strmi	r0, [r8, #-1024]!	; 0x400
    2ffc:	05000000 	streq	r0, [r0, #-0]
    3000:	04003875 	streq	r3, [r0], #-2165	; 0x875
    3004:	00003729 	andeq	r3, r0, r9, lsr #14
    3008:	035a0300 	cmpeq	sl, #0, 6
    300c:	2f040000 	svccs	0x00040000
    3010:	000000c2 	andeq	r0, r0, r2, asr #1
    3014:	00005e06 	andeq	r5, r0, r6, lsl #28
    3018:	04010700 	streq	r0, [r1], #-1792	; 0x700
    301c:	0000dc37 	andeq	sp, r0, r7, lsr ip
    3020:	07530800 	ldrbeq	r0, [r3, -r0, lsl #16]
    3024:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3028:	000001a7 	andeq	r0, r0, r7, lsr #3
    302c:	2d030001 	stccs	0, cr0, [r3, #-4]
    3030:	04000005 	streq	r0, [r0], #-5
    3034:	0000c737 	andeq	ip, r0, r7, lsr r7
    3038:	0b1f0300 	bleq	7c3c40 <__Stack_Size+0x7c3440>
    303c:	d4050000 	strle	r0, [r5], #-0
    3040:	0000007a 	andeq	r0, r0, sl, ror r0
    3044:	04020409 	streq	r0, [r2], #-1033	; 0x409
    3048:	00078b07 	andeq	r8, r7, r7, lsl #22
    304c:	08010200 	stmdaeq	r1, {r9}
    3050:	00000821 	andeq	r0, r0, r1, lsr #16
    3054:	0108040a 	tsteq	r8, sl, lsl #8
    3058:	fb0b0000 	blx	2c3062 <__Stack_Size+0x2c2862>
    305c:	0a000000 	beq	3064 <__Stack_Size+0x2864>
    3060:	0000ad04 	andeq	sl, r0, r4, lsl #26
    3064:	05ff0c00 	ldrbeq	r0, [pc, #3072]!	; 3c6c <__Stack_Size+0x346c>
    3068:	060c0000 	streq	r0, [ip], -r0
    306c:	00015038 	andeq	r5, r1, r8, lsr r0
    3070:	01d70d00 	bicseq	r0, r7, r0, lsl #26
    3074:	50060000 	andpl	r0, r6, r0
    3078:	000000a2 	andeq	r0, r0, r2, lsr #1
    307c:	086d0d00 	stmdaeq	sp!, {r8, sl, fp}^
    3080:	51060000 	mrspl	r0, (UNDEF: 6)
    3084:	000000a2 	andeq	r0, r0, r2, lsr #1
    3088:	23600d02 	cmncs	r0, #2, 26	; 0x80
    308c:	52060000 	andpl	r0, r6, #0
    3090:	000000a2 	andeq	r0, r0, r2, lsr #1
    3094:	07380d04 	ldreq	r0, [r8, -r4, lsl #26]!
    3098:	53060000 	movwpl	r0, #24576	; 0x6000
    309c:	0000015f 	andeq	r0, r0, pc, asr r1
    30a0:	0d0e0008 	stceq	0, cr0, [lr, #-32]	; 0xffffffe0
    30a4:	5f000001 	svcpl	0x00000001
    30a8:	0f000001 	svceq	0x00000001
    30ac:	000000a2 	andeq	r0, r0, r2, lsr #1
    30b0:	50040a00 	andpl	r0, r4, r0, lsl #20
    30b4:	03000001 	movweq	r0, #1
    30b8:	00000600 	andeq	r0, r0, r0, lsl #12
    30bc:	01135406 	tsteq	r3, r6, lsl #8
    30c0:	42100000 	andsmi	r0, r0, #0
    30c4:	06020057 			; <UNDEFINED> instruction: 0x06020057
    30c8:	00019462 	andeq	r9, r1, r2, ror #8
    30cc:	62621100 	rsbvs	r1, r2, #0, 2
    30d0:	65060030 	strvs	r0, [r6, #-48]	; 0x30
    30d4:	000000ad 	andeq	r0, r0, sp, lsr #1
    30d8:	62621100 	rsbvs	r1, r2, #0, 2
    30dc:	66060031 			; <UNDEFINED> instruction: 0x66060031
    30e0:	000000ad 	andeq	r0, r0, sp, lsr #1
    30e4:	02120001 	andseq	r0, r2, #1
    30e8:	01b05f06 	lslseq	r5, r6, #30
    30ec:	77130000 	ldrvc	r0, [r3, -r0]
    30f0:	a2610600 	rsbge	r0, r1, #0, 12
    30f4:	13000000 	movwne	r0, #0
    30f8:	06007762 	streq	r7, [r0], -r2, ror #14
    30fc:	00017068 	andeq	r7, r1, r8, rrx
    3100:	30030000 	andcc	r0, r3, r0
    3104:	06000009 	streq	r0, [r0], -r9
    3108:	00019469 	andeq	r9, r1, r9, ror #8
    310c:	01140c00 	tsteq	r4, r0, lsl #24
    3110:	061c0000 	ldreq	r0, [ip], -r0
    3114:	00024c6b 	andeq	r4, r2, fp, ror #24
    3118:	07670d00 	strbeq	r0, [r7, -r0, lsl #26]!
    311c:	6d060000 	stcvs	0, cr0, [r6, #-0]
    3120:	000000ad 	andeq	r0, r0, sp, lsr #1
    3124:	00150d00 	andseq	r0, r5, r0, lsl #26
    3128:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
    312c:	000000ad 	andeq	r0, r0, sp, lsr #1
    3130:	03110d01 	tsteq	r1, #1, 26	; 0x40
    3134:	6f060000 	svcvs	0x00060000
    3138:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    313c:	01480d02 	cmpeq	r8, r2, lsl #26
    3140:	70060000 	andvc	r0, r6, r0
    3144:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    3148:	04eb0d04 	strbteq	r0, [fp], #3332	; 0xd04
    314c:	71060000 	mrsvc	r0, (UNDEF: 6)
    3150:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    3154:	06ef0d06 	strbteq	r0, [pc], r6, lsl #26
    3158:	73060000 	movwvc	r0, #24576	; 0x6000
    315c:	000000ad 	andeq	r0, r0, sp, lsr #1
    3160:	08080d08 	stmdaeq	r8, {r3, r8, sl, fp}
    3164:	74060000 	strvc	r0, [r6], #-0
    3168:	000000ad 	andeq	r0, r0, sp, lsr #1
    316c:	05070d09 	streq	r0, [r7, #-3337]	; 0xd09
    3170:	75060000 	strvc	r0, [r6, #-0]
    3174:	000000ad 	andeq	r0, r0, sp, lsr #1
    3178:	054f0d0a 	strbeq	r0, [pc, #-3338]	; 2476 <__Stack_Size+0x1c76>
    317c:	76060000 	strvc	r0, [r6], -r0
    3180:	000000ad 	andeq	r0, r0, sp, lsr #1
    3184:	05d60d0b 	ldrbeq	r0, [r6, #3339]	; 0xd0b
    3188:	77060000 	strvc	r0, [r6, -r0]
    318c:	000000ad 	andeq	r0, r0, sp, lsr #1
    3190:	07c80d0c 	strbeq	r0, [r8, ip, lsl #26]
    3194:	7a060000 	bvc	18319c <__Stack_Size+0x18299c>
    3198:	00000165 	andeq	r0, r0, r5, ror #2
    319c:	15030010 	strne	r0, [r3, #-16]
    31a0:	06000001 	streq	r0, [r0], -r1
    31a4:	0001bb7b 	andeq	fp, r1, fp, ror fp
    31a8:	07010700 	streq	r0, [r1, -r0, lsl #14]
    31ac:	00028a23 	andeq	r8, r2, r3, lsr #20
    31b0:	14a70800 	strtne	r0, [r7], #2048	; 0x800
    31b4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    31b8:	000013f4 	strdeq	r1, [r0], -r4
    31bc:	144a0801 	strbne	r0, [sl], #-2049	; 0x801
    31c0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    31c4:	0000137c 	andeq	r1, r0, ip, ror r3
    31c8:	148c0803 	strne	r0, [ip], #2051	; 0x803
    31cc:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    31d0:	0000155d 	andeq	r1, r0, sp, asr r5
    31d4:	13ae0805 			; <UNDEFINED> instruction: 0x13ae0805
    31d8:	00060000 	andeq	r0, r6, r0
    31dc:	0013d503 	andseq	sp, r3, r3, lsl #10
    31e0:	57230700 	strpl	r0, [r3, -r0, lsl #14]!
    31e4:	0c000002 	stceq	0, cr0, [r0], {2}
    31e8:	000014d4 	ldrdeq	r1, [r0], -r4
    31ec:	ea290706 	b	a44e0c <__Stack_Size+0xa4460c>
    31f0:	0d000002 	stceq	0, cr0, [r0, #-8]
    31f4:	000014f3 	strdeq	r1, [r0], -r3
    31f8:	00ad2a07 	adceq	r2, sp, r7, lsl #20
    31fc:	0d000000 	stceq	0, cr0, [r0, #-0]
    3200:	00001509 	andeq	r1, r0, r9, lsl #10
    3204:	00ad2b07 	adceq	r2, sp, r7, lsl #22
    3208:	0d010000 	stceq	0, cr0, [r1, #-0]
    320c:	00001518 	andeq	r1, r0, r8, lsl r5
    3210:	00ad2c07 	adceq	r2, sp, r7, lsl #24
    3214:	0d020000 	stceq	0, cr0, [r2, #-0]
    3218:	00001527 	andeq	r1, r0, r7, lsr #10
    321c:	00ad2d07 	adceq	r2, sp, r7, lsl #26
    3220:	0d030000 	stceq	0, cr0, [r3, #-0]
    3224:	000015c2 	andeq	r1, r0, r2, asr #11
    3228:	00ad2e07 	adceq	r2, sp, r7, lsl #28
    322c:	0d040000 	stceq	0, cr0, [r4, #-0]
    3230:	00001475 	andeq	r1, r0, r5, ror r4
    3234:	00ad2f07 	adceq	r2, sp, r7, lsl #30
    3238:	00050000 	andeq	r0, r5, r0
    323c:	0014d503 	andseq	sp, r4, r3, lsl #10
    3240:	95300700 	ldrls	r0, [r0, #-1792]!	; 0x700
    3244:	14000002 	strne	r0, [r0], #-2
    3248:	00001444 	andeq	r1, r0, r4, asr #8
    324c:	1a320701 	bne	c84e58 <__Stack_Size+0xc84658>
    3250:	08000003 	stmdaeq	r0, {r0, r1}
    3254:	00001536 	andeq	r1, r0, r6, lsr r5
    3258:	158f0800 	strne	r0, [pc, #2048]	; 3a60 <__Stack_Size+0x3260>
    325c:	15010000 	strne	r0, [r1, #-0]
    3260:	00444e45 	subeq	r4, r4, r5, asr #28
    3264:	016e0802 	cmneq	lr, r2, lsl #16
    3268:	00030000 	andeq	r0, r3, r0
    326c:	00144503 	andseq	r4, r4, r3, lsl #10
    3270:	f5370700 			; <UNDEFINED> instruction: 0xf5370700
    3274:	16000002 	strne	r0, [r0], -r2
    3278:	520c0868 	andpl	r0, ip, #104, 16	; 0x680000
    327c:	0d000003 	stceq	0, cr0, [r0, #-12]
    3280:	00001a8a 	andeq	r1, r0, sl, lsl #21
    3284:	03520e08 	cmpeq	r2, #8, 28	; 0x80
    3288:	0d000000 	stceq	0, cr0, [r0, #-0]
    328c:	00001950 	andeq	r1, r0, r0, asr r9
    3290:	03620f08 	cmneq	r2, #8, 30
    3294:	0d080000 	stceq	0, cr0, [r8, #-0]
    3298:	0000046c 	andeq	r0, r0, ip, ror #8
    329c:	03721008 	cmneq	r2, #8
    32a0:	00280000 	eoreq	r0, r8, r0
    32a4:	00005e17 	andeq	r5, r0, r7, lsl lr
    32a8:	00036200 	andeq	r6, r3, r0, lsl #4
    32ac:	00f41800 	rscseq	r1, r4, r0, lsl #16
    32b0:	00010000 	andeq	r0, r1, r0
    32b4:	00005e17 	andeq	r5, r0, r7, lsl lr
    32b8:	00037200 	andeq	r7, r3, r0, lsl #4
    32bc:	00f41800 	rscseq	r1, r4, r0, lsl #16
    32c0:	00070000 	andeq	r0, r7, r0
    32c4:	00003717 	andeq	r3, r0, r7, lsl r7
    32c8:	00038200 	andeq	r8, r3, r0, lsl #4
    32cc:	00f41800 	rscseq	r1, r4, r0, lsl #16
    32d0:	003f0000 	eorseq	r0, pc, r0
    32d4:	000cef03 	andeq	lr, ip, r3, lsl #30
    32d8:	25120800 	ldrcs	r0, [r2, #-2048]	; 0x800
    32dc:	0c000003 	stceq	0, cr0, [r0], {3}
    32e0:	00000ae8 	andeq	r0, r0, r8, ror #21
    32e4:	e20d0914 	and	r0, sp, #20, 18	; 0x50000
    32e8:	0d000003 	stceq	0, cr0, [r0, #-12]
    32ec:	00000c55 	andeq	r0, r0, r5, asr ip
    32f0:	008c0e09 	addeq	r0, ip, r9, lsl #28
    32f4:	0d000000 	stceq	0, cr0, [r0, #-0]
    32f8:	00000df7 	strdeq	r0, [r0], -r7
    32fc:	008c1009 	addeq	r1, ip, r9
    3300:	0d040000 	stceq	0, cr0, [r4, #-0]
    3304:	00000ce0 	andeq	r0, r0, r0, ror #25
    3308:	008c1109 	addeq	r1, ip, r9, lsl #2
    330c:	0d080000 	stceq	0, cr0, [r8, #-0]
    3310:	00000de0 	andeq	r0, r0, r0, ror #27
    3314:	008c1309 	addeq	r1, ip, r9, lsl #6
    3318:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    331c:	00000d2a 	andeq	r0, r0, sl, lsr #26
    3320:	008c1409 	addeq	r1, ip, r9, lsl #8
    3324:	0d100000 	ldceq	0, cr0, [r0, #-0]
    3328:	00000bec 	andeq	r0, r0, ip, ror #23
    332c:	03e21509 	mvneq	r1, #37748736	; 0x2400000
    3330:	00140000 	andseq	r0, r4, r0
    3334:	00008117 	andeq	r8, r0, r7, lsl r1
    3338:	0003f100 	andeq	pc, r3, r0, lsl #2
    333c:	00f41900 	rscseq	r1, r4, r0, lsl #18
    3340:	03000000 	movweq	r0, #0
    3344:	00000ae9 	andeq	r0, r0, r9, ror #21
    3348:	038d1609 	orreq	r1, sp, #9437184	; 0x900000
    334c:	670c0000 	strvs	r0, [ip, -r0]
    3350:	1400000c 	strne	r0, [r0], #-12
    3354:	04451809 	strbeq	r1, [r5], #-2057	; 0x809
    3358:	540d0000 	strpl	r0, [sp], #-0
    335c:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    3360:	00044519 	andeq	r4, r4, r9, lsl r5
    3364:	c80d0000 	stmdagt	sp, {}	; <UNPREDICTABLE>
    3368:	0900000c 	stmdbeq	r0, {r2, r3}
    336c:	00008c1a 	andeq	r8, r0, sl, lsl ip
    3370:	070d0400 	streq	r0, [sp, -r0, lsl #8]
    3374:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    3378:	0000e720 	andeq	lr, r0, r0, lsr #14
    337c:	940d0800 	strls	r0, [sp], #-2048	; 0x800
    3380:	0900000c 	stmdbeq	r0, {r2, r3}
    3384:	00007322 	andeq	r7, r0, r2, lsr #6
    3388:	ef0d0c00 	svc	0x000d0c00
    338c:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    3390:	00007323 	andeq	r7, r0, r3, lsr #6
    3394:	0a001000 	beq	739c <__Stack_Size+0x6b9c>
    3398:	0003f104 	andeq	pc, r3, r4, lsl #2
    339c:	0bfd0300 	bleq	fff43fa4 <BootRAM+0xeeb4745>
    33a0:	27090000 	strcs	r0, [r9, -r0]
    33a4:	00000456 	andeq	r0, r0, r6, asr r4
    33a8:	03fc040a 	mvnseq	r0, #167772160	; 0xa000000
    33ac:	bd1a0000 	ldclt	0, cr0, [sl, #-0]
    33b0:	01000009 	tsteq	r0, r9
    33b4:	0016e43d 	andseq	lr, r6, sp, lsr r4
    33b8:	00008808 	andeq	r8, r0, r8, lsl #16
    33bc:	cb9c0100 	blgt	fe7037c4 <BootRAM+0xd673f65>
    33c0:	1b000004 	blne	33d8 <__Stack_Size+0x2bd8>
    33c4:	08001726 	stmdaeq	r0, {r1, r2, r5, r8, r9, sl, ip}
    33c8:	000008da 	ldrdeq	r0, [r0], -sl
    33cc:	00000494 	muleq	r0, r4, r4
    33d0:	0252011c 	subseq	r0, r2, #28, 2
    33d4:	011c2008 	tsteq	ip, r8
    33d8:	ff080251 			; <UNDEFINED> instruction: 0xff080251
    33dc:	0550011c 	ldrbeq	r0, [r0, #-284]	; 0x11c
    33e0:	0004ec03 	andeq	lr, r4, r3, lsl #24
    33e4:	301b0020 	andscc	r0, fp, r0, lsr #32
    33e8:	da080017 	ble	20344c <__Stack_Size+0x202c4c>
    33ec:	b7000008 	strlt	r0, [r0, -r8]
    33f0:	1c000004 	stcne	0, cr0, [r0], {4}
    33f4:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    33f8:	51011c5c 	tstpl	r1, ip, asr ip
    33fc:	1cff0802 	ldclne	8, cr0, [pc], #8	; 340c <__Stack_Size+0x2c0c>
    3400:	03055001 	movweq	r5, #20481	; 0x5001
    3404:	20000490 	mulcs	r0, r0, r4
    3408:	173a1d00 	ldrne	r1, [sl, -r0, lsl #26]!
    340c:	08f90800 	ldmeq	r9!, {fp}^
    3410:	011c0000 	tsteq	ip, r0
    3414:	0c030550 	cfstr32eq	mvfx0, [r3], {80}	; 0x50
    3418:	00200005 	eoreq	r0, r0, r5
    341c:	083b1e00 	ldmdaeq	fp!, {r9, sl, fp, ip}
    3420:	6b010000 	blvs	43428 <__Stack_Size+0x42c28>
    3424:	00176c01 	andseq	r6, r7, r1, lsl #24
    3428:	00004408 	andeq	r4, r0, r8, lsl #8
    342c:	0d9c0100 	ldfeqs	f0, [ip]
    3430:	1f000005 	svcne	0x00000005
    3434:	00001397 	muleq	r0, r7, r3
    3438:	ad016c01 	stcge	12, cr6, [r1, #-4]
    343c:	ba000000 	blt	3444 <__Stack_Size+0x2c44>
    3440:	20000009 	andcs	r0, r0, r9
    3444:	08001788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip}
    3448:	00000910 	andeq	r0, r0, r0, lsl r9
    344c:	00179021 	andseq	r9, r7, r1, lsr #32
    3450:	00091808 	andeq	r1, r9, r8, lsl #16
    3454:	17a42100 	strne	r2, [r4, r0, lsl #2]!
    3458:	091f0800 	ldmdbeq	pc, {fp}	; <UNPREDICTABLE>
    345c:	22000000 	andcs	r0, r0, #0
    3460:	00001429 	andeq	r1, r0, r9, lsr #8
    3464:	00018201 	andeq	r8, r1, r1, lsl #4
    3468:	02000000 	andeq	r0, r0, #0
    346c:	01000000 	mrseq	r0, (UNDEF: 0)
    3470:	14e6239c 	strbtne	r2, [r6], #924	; 0x39c
    3474:	85010000 	strhi	r0, [r1, #-0]
    3478:	00010d01 	andeq	r0, r1, r1, lsl #26
    347c:	0017b000 	andseq	fp, r7, r0
    3480:	00001808 	andeq	r1, r0, r8, lsl #16
    3484:	4a9c0100 	bmi	fe70388c <BootRAM+0xd67402d>
    3488:	24000005 	strcs	r0, [r0], #-5
    348c:	000014df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    3490:	a2018501 	andge	r8, r1, #4194304	; 0x400000
    3494:	e3000000 	movw	r0, #0
    3498:	00000009 	andeq	r0, r0, r9
    349c:	00154023 	andseq	r4, r5, r3, lsr #32
    34a0:	018e0100 	orreq	r0, lr, r0, lsl #2
    34a4:	0000010d 	andeq	r0, r0, sp, lsl #2
    34a8:	080017c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip}
    34ac:	00000018 	andeq	r0, r0, r8, lsl r0
    34b0:	05759c01 	ldrbeq	r9, [r5, #-3073]!	; 0xc01
    34b4:	df240000 	svcle	0x00240000
    34b8:	01000014 	tsteq	r0, r4, lsl r0
    34bc:	00a2018e 	adceq	r0, r2, lr, lsl #3
    34c0:	0a040000 	beq	1034c8 <__Stack_Size+0x102cc8>
    34c4:	23000000 	movwcs	r0, #0
    34c8:	000014fb 	strdeq	r1, [r0], -fp
    34cc:	0d019801 	stceq	8, cr9, [r1, #-4]
    34d0:	e0000001 	and	r0, r0, r1
    34d4:	28080017 	stmdacs	r8, {r0, r1, r2, r4}
    34d8:	01000000 	mrseq	r0, (UNDEF: 0)
    34dc:	0005a09c 	muleq	r5, ip, r0
    34e0:	14df2400 	ldrbne	r2, [pc], #1024	; 34e8 <__Stack_Size+0x2ce8>
    34e4:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    34e8:	0000a201 	andeq	sl, r0, r1, lsl #4
    34ec:	000a2500 	andeq	r2, sl, r0, lsl #10
    34f0:	0e230000 	cdpeq	0, 2, cr0, cr3, cr0, {0}
    34f4:	01000014 	tsteq	r0, r4, lsl r0
    34f8:	010d01a2 	smlatbeq	sp, r2, r1, r0
    34fc:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    3500:	00340800 	eorseq	r0, r4, r0, lsl #16
    3504:	9c010000 	stcls	0, cr0, [r1], {-0}
    3508:	000005cb 	andeq	r0, r0, fp, asr #11
    350c:	0014df24 	andseq	sp, r4, r4, lsr #30
    3510:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
    3514:	000000a2 	andeq	r0, r0, r2, lsr #1
    3518:	00000a46 	andeq	r0, r0, r6, asr #20
    351c:	15ae1e00 	strne	r1, [lr, #3584]!	; 0xe00
    3520:	ab010000 	blge	43528 <__Stack_Size+0x42d28>
    3524:	00183c01 	andseq	r3, r8, r1, lsl #24
    3528:	00005808 	andeq	r5, r0, r8, lsl #16
    352c:	239c0100 	orrscs	r0, ip, #0, 2
    3530:	25000006 	strcs	r0, [r0, #-6]
    3534:	ac010069 	stcge	0, cr0, [r1], {105}	; 0x69
    3538:	00007301 	andeq	r7, r0, r1, lsl #6
    353c:	000a6700 	andeq	r6, sl, r0, lsl #14
    3540:	146b2600 	strbtne	r2, [fp], #-1536	; 0x600
    3544:	ad010000 	stcge	0, cr0, [r1, #-0]
    3548:	00062301 	andeq	r2, r6, r1, lsl #6
    354c:	18581b00 	ldmdane	r8, {r8, r9, fp, ip}^
    3550:	09270800 	stmdbeq	r7!, {fp}
    3554:	060f0000 	streq	r0, [pc], -r0
    3558:	011c0000 	tsteq	ip, r0
    355c:	00750250 	rsbseq	r0, r5, r0, asr r2
    3560:	186e2700 	stmdane	lr!, {r8, r9, sl, sp}^
    3564:	093d0800 	ldmdbeq	sp!, {fp}
    3568:	011c0000 	tsteq	ip, r0
    356c:	00750550 	rsbseq	r0, r5, r0, asr r5
    3570:	00220074 	eoreq	r0, r2, r4, ror r0
    3574:	97040a00 	strls	r0, [r4, -r0, lsl #20]
    3578:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    357c:	00000487 	andeq	r0, r0, r7, lsl #9
    3580:	00dc5101 	sbcseq	r5, ip, r1, lsl #2
    3584:	18940000 	ldmne	r4, {}	; <UNPREDICTABLE>
    3588:	02600800 	rsbeq	r0, r0, #0, 16
    358c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3590:	000006ed 	andeq	r0, r0, sp, ror #13
    3594:	00139729 	andseq	r9, r3, r9, lsr #14
    3598:	ad560100 	ldfgee	f0, [r6, #-0]
    359c:	86000000 	strhi	r0, [r0], -r0
    35a0:	2a00000a 	bcs	35d0 <__Stack_Size+0x2dd0>
    35a4:	0800199a 	stmdaeq	r0, {r1, r3, r4, r7, r8, fp, ip}
    35a8:	00000034 	andeq	r0, r0, r4, lsr r0
    35ac:	000006c8 	andeq	r0, r0, r8, asr #13
    35b0:	000d8f2b 	andeq	r8, sp, fp, lsr #30
    35b4:	4bfa0100 	blmi	ffe839bc <BootRAM+0xedf415d>
    35b8:	02000004 	andeq	r0, r0, #4
    35bc:	722c6491 	eorvc	r6, ip, #-1862270976	; 0x91000000
    35c0:	01007465 	tsteq	r0, r5, ror #8
    35c4:	000073fb 	strdeq	r7, [r0], -fp
    35c8:	000ae600 	andeq	lr, sl, r0, lsl #12
    35cc:	19a61b00 	stmibne	r6!, {r8, r9, fp, ip}
    35d0:	09580800 	ldmdbeq	r8, {fp}^
    35d4:	06980000 	ldreq	r0, [r8], r0
    35d8:	011c0000 	tsteq	ip, r0
    35dc:	000c0551 	andeq	r0, ip, r1, asr r5
    35e0:	1c080090 	stcne	0, cr0, [r8], {144}	; 0x90
    35e4:	7d025001 	stcvc	0, cr5, [r2, #-4]
    35e8:	b21b0004 	andslt	r0, fp, #4
    35ec:	7d080019 	stcvc	0, cr0, [r8, #-100]	; 0xffffff9c
    35f0:	b5000009 	strlt	r0, [r0, #-9]
    35f4:	1c000006 	stcne	0, cr0, [r0], {6}
    35f8:	75025101 	strvc	r5, [r2, #-257]	; 0x101
    35fc:	50011c02 	andpl	r1, r1, r2, lsl #24
    3600:	75ff0305 	ldrbvc	r0, [pc, #773]!	; 390d <__Stack_Size+0x310d>
    3604:	20000800 	andcs	r0, r0, r0, lsl #16
    3608:	080019c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, ip}
    360c:	0000097d 	andeq	r0, r0, sp, ror r9
    3610:	0019cc20 	andseq	ip, r9, r0, lsr #24
    3614:	00099008 	andeq	r9, r9, r8
    3618:	f0200000 			; <UNDEFINED> instruction: 0xf0200000
    361c:	98080018 	stmdals	r8, {r3, r4}
    3620:	20000009 	andcs	r0, r0, r9
    3624:	080018f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip}
    3628:	000009a0 	andeq	r0, r0, r0, lsr #19
    362c:	00193620 	andseq	r3, r9, r0, lsr #12
    3630:	0009a808 	andeq	sl, r9, r8, lsl #16
    3634:	19662000 	stmdbne	r6!, {sp}^
    3638:	05cb0800 	strbeq	r0, [fp, #2048]	; 0x800
    363c:	2d000000 	stccs	0, cr0, [r0, #-0]
    3640:	00001578 	andeq	r1, r0, r8, ror r5
    3644:	ad01d001 	stcge	0, cr13, [r1, #-4]
    3648:	00000000 	andeq	r0, r0, r0
    364c:	0c000000 	stceq	0, cr0, [r0], {-0}
    3650:	01000000 	mrseq	r0, (UNDEF: 0)
    3654:	13c91e9c 	bicne	r1, r9, #156, 28	; 0x9c0
    3658:	d5010000 	strle	r0, [r1, #-0]
    365c:	00000001 	andeq	r0, r0, r1
    3660:	00000c00 	andeq	r0, r0, r0, lsl #24
    3664:	289c0100 	ldmcs	ip, {r8}
    3668:	2e000007 	cdpcs	0, 0, cr0, cr0, cr7, {0}
    366c:	000015a5 	andeq	r1, r0, r5, lsr #11
    3670:	ad01d501 	cfstr32ge	mvfx13, [r1, #-4]
    3674:	01000000 	mrseq	r0, (UNDEF: 0)
    3678:	662f0050 			; <UNDEFINED> instruction: 0x662f0050
    367c:	0100000d 	tsteq	r0, sp
    3680:	00dc01da 	ldrsbeq	r0, [ip], #26
    3684:	1af40000 	bne	ffd0368c <BootRAM+0xec73e2d>
    3688:	000c0800 	andeq	r0, ip, r0, lsl #16
    368c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3690:	0013e62f 	andseq	lr, r3, pc, lsr #12
    3694:	01df0100 	bicseq	r0, pc, r0, lsl #2
    3698:	000000dc 	ldrdeq	r0, [r0], -ip
    369c:	00000000 	andeq	r0, r0, r0
    36a0:	0000001c 	andeq	r0, r0, ip, lsl r0
    36a4:	2b309c01 	blcs	c2a6b0 <__Stack_Size+0xc29eb0>
    36a8:	0100000c 	tsteq	r0, ip
    36ac:	1b0001e5 	blne	3e48 <__Stack_Size+0x3648>
    36b0:	00020800 	andeq	r0, r2, r0, lsl #16
    36b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    36b8:	0013a22b 	andseq	sl, r3, fp, lsr #4
    36bc:	77280100 	strvc	r0, [r8, -r0, lsl #2]!
    36c0:	05000007 	streq	r0, [r0, #-7]
    36c4:	0002c003 	andeq	ip, r2, r3
    36c8:	00970620 	addseq	r0, r7, r0, lsr #12
    36cc:	842b0000 	strthi	r0, [fp], #-0
    36d0:	01000015 	tsteq	r0, r5, lsl r0
    36d4:	00077729 	andeq	r7, r7, r9, lsr #14
    36d8:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    36dc:	2b200002 	blcs	8036ec <__Stack_Size+0x802eec>
    36e0:	000014c7 	andeq	r1, r0, r7, asr #9
    36e4:	079e2a01 	ldreq	r2, [lr, r1, lsl #20]
    36e8:	03050000 	movweq	r0, #20480	; 0x5000
    36ec:	20000dc5 	andcs	r0, r0, r5, asr #27
    36f0:	0002ea06 	andeq	lr, r2, r6, lsl #20
    36f4:	00ad1700 	adceq	r1, sp, r0, lsl #14
    36f8:	07b40000 	ldreq	r0, [r4, r0]!
    36fc:	f4310000 			; <UNDEFINED> instruction: 0xf4310000
    3700:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    3704:	032b0007 	teqeq	fp, #7
    3708:	01000014 	tsteq	r0, r4, lsl r0
    370c:	0007c533 	andeq	ip, r7, r3, lsr r5
    3710:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    3714:	06200005 	strteq	r0, [r0], -r5
    3718:	000007a3 	andeq	r0, r0, r3, lsr #15
    371c:	0014b72b 	andseq	fp, r4, fp, lsr #14
    3720:	77350100 	ldrvc	r0, [r5, -r0, lsl #2]!
    3724:	05000007 	streq	r0, [r0, #-7]
    3728:	000dc003 	andeq	ip, sp, r3
    372c:	141c2b20 	ldrne	r2, [ip], #-2848	; 0xb20
    3730:	36010000 	strcc	r0, [r1], -r0
    3734:	000007ec 	andeq	r0, r0, ip, ror #15
    3738:	0dbe0305 	ldceq	3, cr0, [lr, #20]!
    373c:	a2062000 	andge	r2, r6, #0
    3740:	2b000000 	blcs	3748 <__Stack_Size+0x2f48>
    3744:	0000147d 	andeq	r1, r0, sp, ror r4
    3748:	07ec3701 	strbeq	r3, [ip, r1, lsl #14]!
    374c:	03050000 	movweq	r0, #20480	; 0x5000
    3750:	20000dbc 			; <UNDEFINED> instruction: 0x20000dbc
    3754:	0001e832 	andeq	lr, r1, r2, lsr r8
    3758:	0d220a00 	vstmdbeq	r2!, {s0-s-1}
    375c:	0a000008 	beq	3784 <__Stack_Size+0x2f84>
    3760:	00024c04 	andeq	r4, r2, r4, lsl #24
    3764:	00b13300 	adcseq	r3, r1, r0, lsl #6
    3768:	2c0b0000 	stccs	0, cr0, [fp], {-0}
    376c:	00000073 	andeq	r0, r0, r3, ror r0
    3770:	04880305 	streq	r0, [r8], #773	; 0x305
    3774:	3c332000 	ldccc	0, cr2, [r3], #-0
    3778:	01000014 	tsteq	r0, r4, lsl r0
    377c:	0008352c 	andeq	r3, r8, ip, lsr #10
    3780:	cb030500 	blgt	c4b88 <__Stack_Size+0xc4388>
    3784:	0620000d 	strteq	r0, [r0], -sp
    3788:	000000dc 	ldrdeq	r0, [r0], -ip
    378c:	00008117 	andeq	r8, r0, r7, lsl r1
    3790:	00084a00 	andeq	r4, r8, r0, lsl #20
    3794:	00f41800 	rscseq	r1, r4, r0, lsl #16
    3798:	001f0000 	andseq	r0, pc, r0
    379c:	000c7b33 	andeq	r7, ip, r3, lsr fp
    37a0:	3a6b0900 	bcc	1ac5ba8 <__Stack_Size+0x1ac53a8>
    37a4:	05000008 	streq	r0, [r0, #-8]
    37a8:	00040403 	andeq	r0, r4, r3, lsl #8
    37ac:	15963320 	ldrne	r3, [r6, #800]	; 0x320
    37b0:	2b010000 	blcs	437b8 <__Stack_Size+0x42fb8>
    37b4:	0000086c 	andeq	r0, r0, ip, ror #16
    37b8:	0dc40305 	stcleq	3, cr0, [r4, #20]
    37bc:	8a062000 	bhi	18b7c4 <__Stack_Size+0x18afc4>
    37c0:	17000002 	strne	r0, [r0, -r2]
    37c4:	00000037 	andeq	r0, r0, r7, lsr r0
    37c8:	00000881 	andeq	r0, r0, r1, lsl #17
    37cc:	0000f418 	andeq	pc, r0, r8, lsl r4	; <UNPREDICTABLE>
    37d0:	33001f00 	movwcc	r1, #3840	; 0xf00
    37d4:	00000b91 	muleq	r0, r1, fp
    37d8:	08712e01 	ldmdaeq	r1!, {r0, r9, sl, fp, sp}^
    37dc:	03050000 	movweq	r0, #20480	; 0x5000
    37e0:	200004ec 	andcs	r0, r0, ip, ror #9
    37e4:	00008117 	andeq	r8, r0, r7, lsl r1
    37e8:	0008a200 	andeq	sl, r8, r0, lsl #4
    37ec:	00f41800 	rscseq	r1, r4, r0, lsl #16
    37f0:	005b0000 	subseq	r0, fp, r0
    37f4:	000b2633 	andeq	r2, fp, r3, lsr r6
    37f8:	922f0100 	eorls	r0, pc, #0, 2
    37fc:	05000008 	streq	r0, [r0, #-8]
    3800:	00049003 	andeq	r9, r4, r3
    3804:	74633420 	strbtvc	r3, [r3], #-1056	; 0x420
    3808:	30010078 	andcc	r0, r1, r8, ror r0
    380c:	00000382 	andeq	r0, r0, r2, lsl #7
    3810:	050c0305 	streq	r0, [ip, #-773]	; 0x305
    3814:	4e332000 	cdpmi	0, 3, cr2, cr3, cr0, {0}
    3818:	01000015 	tsteq	r0, r5, lsl r0
    381c:	0008d53a 	andeq	sp, r8, sl, lsr r5
    3820:	74030500 	strvc	r0, [r3], #-1280	; 0x500
    3824:	06200005 	strteq	r0, [r0], -r5
    3828:	0000031a 	andeq	r0, r0, sl, lsl r3
    382c:	000c1635 	andeq	r1, ip, r5, lsr r6
    3830:	f2190d00 	vadd.f<illegal width 64>	d0, d9, d0
    3834:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
    3838:	0f000008 	svceq	0x00000008
    383c:	000000f2 	strdeq	r0, [r0], -r2
    3840:	0000730f 	andeq	r7, r0, pc, lsl #6
    3844:	00e70f00 	rsceq	r0, r7, r0, lsl #30
    3848:	36000000 	strcc	r0, [r0], -r0
    384c:	00000c1d 	andeq	r0, r0, sp, lsl ip
    3850:	090a1408 	stmdbeq	sl, {r3, sl, ip}
    3854:	0a0f0000 	beq	3c385c <__Stack_Size+0x3c305c>
    3858:	00000009 	andeq	r0, r0, r9
    385c:	0382040a 	orreq	r0, r2, #167772160	; 0xa000000
    3860:	b5370000 	ldrlt	r0, [r7, #-0]!
    3864:	0c00000e 	stceq	0, cr0, [r0], {14}
    3868:	73380139 	teqvc	r8, #1073741838	; 0x4000000e
    386c:	0b000004 	bleq	3884 <__Stack_Size+0x3084>
    3870:	0e633783 	cdpeq	7, 6, cr3, cr3, cr3, {4}
    3874:	2b0c0000 	blcs	30387c <__Stack_Size+0x30307c>
    3878:	0e3c3901 	cdpeq	9, 3, cr3, cr12, cr1, {0}
    387c:	340c0000 	strcc	r0, [ip], #-0
    3880:	0000dc01 	andeq	sp, r0, r1, lsl #24
    3884:	00093d00 	andeq	r3, r9, r0, lsl #26
    3888:	00970f00 	addseq	r0, r7, r0, lsl #30
    388c:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    3890:	00000ffd 	strdeq	r0, [r0], -sp
    3894:	dc01330c 	stcle	3, cr3, [r1], {12}
    3898:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    389c:	0f000009 	svceq	0x00000009
    38a0:	00000097 	muleq	r0, r7, r0
    38a4:	0000970f 	andeq	r9, r0, pc, lsl #14
    38a8:	9b350000 	blls	d438b0 <__Stack_Size+0xd430b0>
    38ac:	0900000c 	stmdbeq	r0, {r2, r3}
    38b0:	00007367 	andeq	r7, r0, r7, ror #6
    38b4:	00097700 	andeq	r7, r9, r0, lsl #14
    38b8:	09770f00 	ldmdbeq	r7!, {r8, r9, sl, fp}^
    38bc:	b70f0000 	strlt	r0, [pc, -r0]
    38c0:	0f000000 	svceq	0x00000000
    38c4:	000000dc 	ldrdeq	r0, [r0], -ip
    38c8:	4b040a00 	blmi	1060d0 <__Stack_Size+0x1058d0>
    38cc:	3a000004 	bcc	38e4 <__Stack_Size+0x30e4>
    38d0:	00000dbb 			; <UNDEFINED> instruction: 0x00000dbb
    38d4:	90013f0c 	andls	r3, r1, ip, lsl #30
    38d8:	0f000009 	svceq	0x00000009
    38dc:	00000102 	andeq	r0, r0, r2, lsl #2
    38e0:	d437003b 	ldrtle	r0, [r7], #-59	; 0x3b
    38e4:	0c000011 	stceq	0, cr0, [r0], {17}
    38e8:	e1370136 	teq	r7, r6, lsr r1
    38ec:	0c00000b 	stceq	0, cr0, [r0], {11}
    38f0:	5337012f 	teqpl	r7, #-1073741813	; 0xc000000b
    38f4:	0c000010 	stceq	0, cr0, [r0], {16}
    38f8:	c73c0137 			; <UNDEFINED> instruction: 0xc73c0137
    38fc:	0c000010 	stceq	0, cr0, [r0], {16}
    3900:	0073013b 	rsbseq	r0, r3, fp, lsr r1
    3904:	33000000 	movwcc	r0, #0
    3908:	0400000a 	streq	r0, [r0], #-10
    390c:	000e7500 	andeq	r7, lr, r0, lsl #10
    3910:	36010400 	strcc	r0, [r1], -r0, lsl #8
    3914:	01000016 	tsteq	r0, r6, lsl r0
    3918:	000015c9 	andeq	r1, r0, r9, asr #11
    391c:	00000893 	muleq	r0, r3, r8
    3920:	00000348 	andeq	r0, r0, r8, asr #6
    3924:	00000000 	andeq	r0, r0, r0
    3928:	000010da 	ldrdeq	r1, [r0], -sl
    392c:	1a060102 	bne	183d3c <__Stack_Size+0x18353c>
    3930:	03000008 	movweq	r0, #8
    3934:	00000c40 	andeq	r0, r0, r0, asr #24
    3938:	00371c03 	eorseq	r1, r7, r3, lsl #24
    393c:	01020000 	mrseq	r0, (UNDEF: 2)
    3940:	00081808 	andeq	r1, r8, r8, lsl #16
    3944:	05020200 	streq	r0, [r2, #-512]	; 0x200
    3948:	000006fc 	strdeq	r0, [r0], -ip
    394c:	49070202 	stmdbmi	r7, {r1, r9}
    3950:	02000009 	andeq	r0, r0, #9
    3954:	04da0504 	ldrbeq	r0, [sl], #1284	; 0x504
    3958:	4e030000 	cdpmi	0, 0, cr0, cr3, cr0, {0}
    395c:	0300000b 	movweq	r0, #11
    3960:	00005e38 	andeq	r5, r0, r8, lsr lr
    3964:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3968:	00000252 	andeq	r0, r0, r2, asr r2
    396c:	d5050802 	strle	r0, [r5, #-2050]	; 0x802
    3970:	02000004 	andeq	r0, r0, #4
    3974:	024d0708 	subeq	r0, sp, #8, 14	; 0x200000
    3978:	04040000 	streq	r0, [r4], #-0
    397c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    3980:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3984:	00000257 	andeq	r0, r0, r7, asr r2
    3988:	000c4203 	andeq	r4, ip, r3, lsl #4
    398c:	2c2a0400 	cfstrscs	mvf0, [sl], #-0
    3990:	03000000 	movweq	r0, #0
    3994:	00000b50 	andeq	r0, r0, r0, asr fp
    3998:	00534204 	subseq	r4, r3, r4, lsl #4
    399c:	04020000 	streq	r0, [r2], #-0
    39a0:	00078b07 	andeq	r8, r7, r7, lsl #22
    39a4:	08010200 	stmdaeq	r1, {r9}
    39a8:	00000821 	andeq	r0, r0, r1, lsr #16
    39ac:	0015e205 	andseq	lr, r5, r5, lsl #4
    39b0:	03220200 	teqeq	r2, #0, 4
    39b4:	000000c4 	andeq	r0, r0, r4, asr #1
    39b8:	02007806 	andeq	r7, r0, #393216	; 0x60000
    39bc:	0000c422 	andeq	ip, r0, r2, lsr #8
    39c0:	00610600 	rsbeq	r0, r1, r0, lsl #12
    39c4:	00ca2202 	sbceq	r2, sl, r2, lsl #4
    39c8:	07000000 	streq	r0, [r0, -r0]
    39cc:	00008104 	andeq	r8, r0, r4, lsl #2
    39d0:	d0040700 	andle	r0, r4, r0, lsl #14
    39d4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    39d8:	00000081 	andeq	r0, r0, r1, lsl #1
    39dc:	00172d05 	andseq	r2, r7, r5, lsl #26
    39e0:	012a0100 	teqeq	sl, r0, lsl #2
    39e4:	00000158 	andeq	r0, r0, r8, asr r1
    39e8:	00357806 	eorseq	r7, r5, r6, lsl #16
    39ec:	00c42a01 	sbceq	r2, r4, r1, lsl #20
    39f0:	7a060000 	bvc	1839f8 <__Stack_Size+0x1831f8>
    39f4:	2a010035 	bcs	43ad0 <__Stack_Size+0x432d0>
    39f8:	000000c4 	andeq	r0, r0, r4, asr #1
    39fc:	00317806 	eorseq	r7, r1, r6, lsl #16
    3a00:	00ca2b01 	sbceq	r2, sl, r1, lsl #22
    3a04:	7a060000 	bvc	183a0c <__Stack_Size+0x18320c>
    3a08:	2b010031 	blcs	43ad4 <__Stack_Size+0x432d4>
    3a0c:	000000ca 	andeq	r0, r0, sl, asr #1
    3a10:	00327806 	eorseq	r7, r2, r6, lsl #16
    3a14:	00ca2c01 	sbceq	r2, sl, r1, lsl #24
    3a18:	7a060000 	bvc	183a20 <__Stack_Size+0x183220>
    3a1c:	2c010032 	stccs	0, cr0, [r1], {50}	; 0x32
    3a20:	000000ca 	andeq	r0, r0, sl, asr #1
    3a24:	00337806 	eorseq	r7, r3, r6, lsl #16
    3a28:	00ca2d01 	sbceq	r2, sl, r1, lsl #26
    3a2c:	7a060000 	bvc	183a34 <__Stack_Size+0x183234>
    3a30:	2d010033 	stccs	0, cr0, [r1, #-204]	; 0xffffff34
    3a34:	000000ca 	andeq	r0, r0, sl, asr #1
    3a38:	00616409 	rsbeq	r6, r1, r9, lsl #8
    3a3c:	01583d01 	cmpeq	r8, r1, lsl #26
    3a40:	63090000 	movwvs	r0, #36864	; 0x9000
    3a44:	3e010062 	cdpcc	0, 0, cr0, cr1, cr2, {3}
    3a48:	00000158 	andeq	r0, r0, r8, asr r1
    3a4c:	01006109 	tsteq	r0, r9, lsl #2
    3a50:	0001583f 	andeq	r5, r1, pc, lsr r8
    3a54:	00620900 	rsbeq	r0, r2, r0, lsl #18
    3a58:	01584001 	cmpeq	r8, r1
    3a5c:	0a000000 	beq	3a64 <__Stack_Size+0x3264>
    3a60:	00000081 	andeq	r0, r0, r1, lsl #1
    3a64:	00000168 	andeq	r0, r0, r8, ror #2
    3a68:	0000970b 	andeq	r9, r0, fp, lsl #14
    3a6c:	05001f00 	streq	r1, [r0, #-3840]	; 0xf00
    3a70:	000015d8 	ldrdeq	r1, [r0], -r8
    3a74:	c7010c01 	strgt	r0, [r1, -r1, lsl #24]
    3a78:	06000001 	streq	r0, [r0], -r1
    3a7c:	01003378 	tsteq	r0, r8, ror r3
    3a80:	0000c40c 	andeq	ip, r0, ip, lsl #8
    3a84:	337a0600 	cmncc	sl, #0, 12
    3a88:	c40c0100 	strgt	r0, [ip], #-256	; 0x100
    3a8c:	06000000 	streq	r0, [r0], -r0
    3a90:	01003178 	tsteq	r0, r8, ror r1
    3a94:	0000ca0d 	andeq	ip, r0, sp, lsl #20
    3a98:	317a0600 	cmncc	sl, r0, lsl #12
    3a9c:	ca0d0100 	bgt	343ea4 <__Stack_Size+0x3436a4>
    3aa0:	0c000000 	stceq	0, cr0, [r0], {-0}
    3aa4:	00001614 	andeq	r1, r0, r4, lsl r6
    3aa8:	01581601 	cmpeq	r8, r1, lsl #12
    3aac:	240c0000 	strcs	r0, [ip], #-0
    3ab0:	01000016 	tsteq	r0, r6, lsl r0
    3ab4:	00015817 	andeq	r5, r1, r7, lsl r8
    3ab8:	16df0c00 	ldrbne	r0, [pc], r0, lsl #24
    3abc:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    3ac0:	00000158 	andeq	r0, r0, r8, asr r1
    3ac4:	01006109 	tsteq	r0, r9, lsl #2
    3ac8:	00015819 	andeq	r5, r1, r9, lsl r8
    3acc:	290d0000 	stmdbcs	sp, {}	; <UNPREDICTABLE>
    3ad0:	01000016 	tsteq	r0, r6, lsl r0
    3ad4:	00000053 	andeq	r0, r0, r3, asr r0
    3ad8:	00022800 	andeq	r2, r2, r0, lsl #16
    3adc:	5c9c0100 	ldfpls	f0, [ip], {0}
    3ae0:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    3ae4:	00000ac3 	andeq	r0, r0, r3, asr #21
    3ae8:	00c45301 	sbceq	r5, r4, r1, lsl #6
    3aec:	0b110000 	bleq	443af4 <__Stack_Size+0x4432f4>
    3af0:	710f0000 	mrsvc	r0, CPSR
    3af4:	ca530100 	bgt	14c3efc <__Stack_Size+0x14c36fc>
    3af8:	3d000000 	stccc	0, cr0, [r0, #-0]
    3afc:	0f00000b 	svceq	0x0000000b
    3b00:	53010065 	movwpl	r0, #4197	; 0x1065
    3b04:	000000ca 	andeq	r0, r0, sl, asr #1
    3b08:	00000b69 	andeq	r0, r0, r9, ror #22
    3b0c:	006d7810 	rsbeq	r7, sp, r0, lsl r8
    3b10:	01585601 	cmpeq	r8, r1, lsl #12
    3b14:	91030000 	mrsls	r0, (UNDEF: 3)
    3b18:	7a107da8 	bvc	4231c0 <__Stack_Size+0x4229c0>
    3b1c:	5701006d 	strpl	r0, [r1, -sp, rrx]
    3b20:	00000158 	andeq	r0, r0, r8, asr r1
    3b24:	7dc89103 	stfvcp	f1, [r8, #12]
    3b28:	316d7810 	cmncc	sp, r0, lsl r8
    3b2c:	585a0100 	ldmdapl	sl, {r8}^
    3b30:	03000001 	movweq	r0, #1
    3b34:	107de891 			; <UNDEFINED> instruction: 0x107de891
    3b38:	00316d7a 	eorseq	r6, r1, sl, ror sp
    3b3c:	01585b01 	cmpeq	r8, r1, lsl #22
    3b40:	91030000 	mrsls	r0, (UNDEF: 3)
    3b44:	69117e88 	ldmdbvs	r1, {r3, r7, r9, sl, fp, ip, sp, lr}
    3b48:	735d0100 	cmpvc	sp, #0, 2
    3b4c:	95000000 	strls	r0, [r0, #-0]
    3b50:	1200000b 	andne	r0, r0, #11
    3b54:	000000a5 	andeq	r0, r0, r5, lsr #1
    3b58:	00000000 	andeq	r0, r0, r0
    3b5c:	000002c8 	andeq	r0, r0, r8, asr #5
    3b60:	02726001 	rsbseq	r6, r2, #1
    3b64:	ba130000 	blt	4c3b6c <__Stack_Size+0x4c336c>
    3b68:	c0000000 	andgt	r0, r0, r0
    3b6c:	1300000b 	movwne	r0, #11
    3b70:	000000b1 	strheq	r0, [r0], -r1
    3b74:	00000be1 	andeq	r0, r0, r1, ror #23
    3b78:	02f81400 	rscseq	r1, r8, #0, 8
    3b7c:	090e0000 	stmdbeq	lr, {}	; <UNPREDICTABLE>
    3b80:	62110000 	andsvs	r0, r1, #0
    3b84:	01007469 	tsteq	r0, r9, ror #8
    3b88:	00095c63 	andeq	r5, r9, r3, ror #24
    3b8c:	000c1000 	andeq	r1, ip, r0
    3b90:	6d781000 	ldclvs	0, cr1, [r8, #-0]
    3b94:	64010073 	strvs	r0, [r1], #-115	; 0x73
    3b98:	00000158 	andeq	r0, r0, r8, asr r1
    3b9c:	7ea89103 	tanvce	f1, f3
    3ba0:	736d7a10 	cmnvc	sp, #16, 20	; 0x10000
    3ba4:	58650100 	stmdapl	r5!, {r8}^
    3ba8:	03000001 	movweq	r0, #1
    3bac:	127ec891 	rsbsne	ip, lr, #9502720	; 0x910000
    3bb0:	000000d5 	ldrdeq	r0, [r0], -r5
    3bb4:	00000000 	andeq	r0, r0, r0
    3bb8:	00000310 	andeq	r0, r0, r0, lsl r3
    3bbc:	04b76801 	ldrteq	r6, [r7], #2049	; 0x801
    3bc0:	ff150000 			; <UNDEFINED> instruction: 0xff150000
    3bc4:	13000000 	movwne	r0, #0
    3bc8:	00000127 	andeq	r0, r0, r7, lsr #2
    3bcc:	00000c23 	andeq	r0, r0, r3, lsr #24
    3bd0:	00011d13 	andeq	r1, r1, r3, lsl sp
    3bd4:	000c9200 	andeq	r9, ip, r0, lsl #4
    3bd8:	01131300 	tsteq	r3, r0, lsl #6
    3bdc:	0ce80000 	stcleq	0, cr0, [r8]
    3be0:	09130000 	ldmdbeq	r3, {}	; <UNPREDICTABLE>
    3be4:	57000001 	strpl	r0, [r0, -r1]
    3be8:	1300000d 	movwne	r0, #13
    3bec:	000000f5 	strdeq	r0, [r0], -r5
    3bf0:	00000d86 	andeq	r0, r0, r6, lsl #27
    3bf4:	0000eb13 	andeq	lr, r0, r3, lsl fp
    3bf8:	000c2300 	andeq	r2, ip, r0, lsl #6
    3bfc:	00e11300 	rsceq	r1, r1, r0, lsl #6
    3c00:	0c920000 	ldceq	0, cr0, [r2], {0}
    3c04:	10160000 	andsne	r0, r6, r0
    3c08:	17000003 	strne	r0, [r0, -r3]
    3c0c:	00000131 	andeq	r0, r0, r1, lsr r1
    3c10:	7ee89103 	urdvce	f1, f3
    3c14:	00013b17 	andeq	r3, r1, r7, lsl fp
    3c18:	88910300 	ldmhi	r1, {r8, r9}
    3c1c:	0145177f 	hvceq	20863	; 0x517f
    3c20:	91030000 	mrsls	r0, (UNDEF: 3)
    3c24:	4e177fa8 	cdpmi	15, 1, cr7, cr7, cr8, {5}
    3c28:	02000001 	andeq	r0, r0, #1
    3c2c:	00184891 	mulseq	r8, r1, r8
    3c30:	87000000 	strhi	r0, [r0, -r0]
    3c34:	49000009 	stmdbmi	r0, {r0, r3}
    3c38:	19000003 	stmdbne	r0, {r0, r1}
    3c3c:	91035201 	tstls	r3, r1, lsl #4
    3c40:	01197dc8 	tsteq	r9, r8, asr #27
    3c44:	007d0251 	rsbseq	r0, sp, r1, asr r2
    3c48:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    3c4c:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    3c50:	00000018 	andeq	r0, r0, r8, lsl r0
    3c54:	0009a200 	andeq	sl, r9, r0, lsl #4
    3c58:	00036b00 	andeq	r6, r3, r0, lsl #22
    3c5c:	52011900 	andpl	r1, r1, #0, 18
    3c60:	7e889103 	sinvce	f1, f3
    3c64:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    3c68:	197de891 	ldmdbne	sp!, {r0, r4, r7, fp, sp, lr, pc}^
    3c6c:	91025001 	tstls	r2, r1
    3c70:	00180048 	andseq	r0, r8, r8, asr #32
    3c74:	bd000000 	stclt	0, cr0, [r0, #-0]
    3c78:	8d000009 	stchi	0, cr0, [r0, #-36]	; 0xffffffdc
    3c7c:	19000003 	stmdbne	r0, {r0, r1}
    3c80:	91025201 	tstls	r2, r1, lsl #4
    3c84:	51011948 	tstpl	r1, r8, asr #18
    3c88:	7fa89103 	svcvc	0x00a89103
    3c8c:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    3c90:	007ee891 			; <UNDEFINED> instruction: 0x007ee891
    3c94:	00000018 	andeq	r0, r0, r8, lsl r0
    3c98:	0009a200 	andeq	sl, r9, r0, lsl #4
    3c9c:	0003ae00 	andeq	sl, r3, r0, lsl #28
    3ca0:	52011900 	andpl	r1, r1, #0, 18
    3ca4:	7dc89103 	stfvcp	f1, [r8, #12]
    3ca8:	02510119 	subseq	r0, r1, #1073741830	; 0x40000006
    3cac:	0119007d 	tsteq	r9, sp, ror r0
    3cb0:	48910250 	ldmmi	r1, {r4, r6, r9}
    3cb4:	00001800 	andeq	r1, r0, r0, lsl #16
    3cb8:	09870000 	stmibeq	r7, {}	; <UNPREDICTABLE>
    3cbc:	03d10000 	bicseq	r0, r1, #0
    3cc0:	01190000 	tsteq	r9, r0
    3cc4:	88910352 	ldmhi	r1, {r1, r4, r6, r8, r9}
    3cc8:	5101197e 	tstpl	r1, lr, ror r9
    3ccc:	7de89103 	stfvcp	f1, [r8, #12]!
    3cd0:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    3cd4:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    3cd8:	00000018 	andeq	r0, r0, r8, lsl r0
    3cdc:	0009bd00 	andeq	fp, r9, r0, lsl #26
    3ce0:	0003f300 	andeq	pc, r3, r0, lsl #6
    3ce4:	52011900 	andpl	r1, r1, #0, 18
    3ce8:	19489102 	stmdbne	r8, {r1, r8, ip, pc}^
    3cec:	91035101 	tstls	r3, r1, lsl #2
    3cf0:	01197fa8 	tsteq	r9, r8, lsr #31
    3cf4:	88910350 	ldmhi	r1, {r4, r6, r8, r9}
    3cf8:	0018007f 	andseq	r0, r8, pc, ror r0
    3cfc:	87000000 	strhi	r0, [r0, -r0]
    3d00:	16000009 	strne	r0, [r0], -r9
    3d04:	19000004 	stmdbne	r0, {r2}
    3d08:	91035201 	tstls	r3, r1, lsl #4
    3d0c:	01197f88 	tsteq	r9, r8, lsl #31
    3d10:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    3d14:	5001197e 	andpl	r1, r1, lr, ror r9
    3d18:	7fa89103 	svcvc	0x00a89103
    3d1c:	00001800 	andeq	r1, r0, r0, lsl #16
    3d20:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    3d24:	04380000 	ldrteq	r0, [r8], #-0
    3d28:	01190000 	tsteq	r9, r0
    3d2c:	a8910352 	ldmge	r1, {r1, r4, r6, r8, r9}
    3d30:	5101197f 	tstpl	r1, pc, ror r9
    3d34:	7fa89103 	svcvc	0x00a89103
    3d38:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    3d3c:	18004891 	stmdane	r0, {r0, r4, r7, fp, lr}
    3d40:	00000000 	andeq	r0, r0, r0
    3d44:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    3d48:	00000453 	andeq	r0, r0, r3, asr r4
    3d4c:	02520119 	subseq	r0, r2, #1073741830	; 0x40000006
    3d50:	01194891 			; <UNDEFINED> instruction: 0x01194891
    3d54:	e8910350 	ldm	r1, {r4, r6, r8, r9}
    3d58:	0018007d 	andseq	r0, r8, sp, ror r0
    3d5c:	a2000000 	andge	r0, r0, #0
    3d60:	76000009 	strvc	r0, [r0], -r9
    3d64:	19000004 	stmdbne	r0, {r2}
    3d68:	91035201 	tstls	r3, r1, lsl #4
    3d6c:	01197f88 	tsteq	r9, r8, lsl #31
    3d70:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    3d74:	5001197e 	andpl	r1, r1, lr, ror r9
    3d78:	7fa89103 	svcvc	0x00a89103
    3d7c:	00001800 	andeq	r1, r0, r0, lsl #16
    3d80:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    3d84:	04980000 	ldreq	r0, [r8], #0
    3d88:	01190000 	tsteq	r9, r0
    3d8c:	a8910352 	ldmge	r1, {r1, r4, r6, r8, r9}
    3d90:	5101197f 	tstpl	r1, pc, ror r9
    3d94:	7fa89103 	svcvc	0x00a89103
    3d98:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    3d9c:	1a004891 	bne	15fe8 <__Stack_Size+0x157e8>
    3da0:	00000000 	andeq	r0, r0, r0
    3da4:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    3da8:	02520119 	subseq	r0, r2, #1073741830	; 0x40000006
    3dac:	01194891 			; <UNDEFINED> instruction: 0x01194891
    3db0:	00760251 	rsbseq	r0, r6, r1, asr r2
    3db4:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    3db8:	007e8891 			; <UNDEFINED> instruction: 0x007e8891
    3dbc:	681b0000 	ldmdavs	fp, {}	; <UNPREDICTABLE>
    3dc0:	00000001 	andeq	r0, r0, r1
    3dc4:	64000000 	strvs	r0, [r0], #-0
    3dc8:	01000000 	mrseq	r0, (UNDEF: 0)
    3dcc:	00066969 	andeq	r6, r6, r9, ror #18
    3dd0:	01921300 	orrseq	r1, r2, r0, lsl #6
    3dd4:	0ce80000 	stcleq	0, cr0, [r8]
    3dd8:	88130000 	ldmdahi	r3, {}	; <UNPREDICTABLE>
    3ddc:	57000001 	strpl	r0, [r0, -r1]
    3de0:	1300000d 	movwne	r0, #13
    3de4:	0000017e 	andeq	r0, r0, lr, ror r1
    3de8:	00000ce8 	andeq	r0, r0, r8, ror #25
    3dec:	00017413 	andeq	r7, r1, r3, lsl r4
    3df0:	000d5700 	andeq	r5, sp, r0, lsl #14
    3df4:	00001c00 	andeq	r1, r0, r0, lsl #24
    3df8:	00640000 	rsbeq	r0, r4, r0
    3dfc:	9c170000 	ldcls	0, cr0, [r7], {-0}
    3e00:	03000001 	movweq	r0, #1
    3e04:	177ee891 			; <UNDEFINED> instruction: 0x177ee891
    3e08:	000001a7 	andeq	r0, r0, r7, lsr #3
    3e0c:	7f889103 	svcvc	0x00889103
    3e10:	0001b217 	andeq	fp, r1, r7, lsl r2
    3e14:	a8910300 	ldmge	r1, {r8, r9}
    3e18:	01bd177f 			; <UNDEFINED> instruction: 0x01bd177f
    3e1c:	91020000 	mrsls	r0, (UNDEF: 2)
    3e20:	00001848 	andeq	r1, r0, r8, asr #16
    3e24:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    3e28:	053b0000 	ldreq	r0, [fp, #-0]!
    3e2c:	01190000 	tsteq	r9, r0
    3e30:	007d0252 	rsbseq	r0, sp, r2, asr r2
    3e34:	02510119 	subseq	r0, r1, #1073741830	; 0x40000006
    3e38:	0119007d 	tsteq	r9, sp, ror r0
    3e3c:	e8910350 	ldm	r1, {r4, r6, r8, r9}
    3e40:	0018007e 	andseq	r0, r8, lr, ror r0
    3e44:	bd000000 	stclt	0, cr0, [r0, #-0]
    3e48:	5e000009 	cdppl	0, 0, cr0, cr0, cr9, {0}
    3e4c:	19000005 	stmdbne	r0, {r0, r2}
    3e50:	91035201 	tstls	r3, r1, lsl #4
    3e54:	01197dc8 	tsteq	r9, r8, asr #27
    3e58:	c8910351 	ldmgt	r1, {r0, r4, r6, r8, r9}
    3e5c:	5001197d 	andpl	r1, r1, sp, ror r9
    3e60:	7f889103 	svcvc	0x00889103
    3e64:	00001800 	andeq	r1, r0, r0, lsl #16
    3e68:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    3e6c:	05800000 	streq	r0, [r0]
    3e70:	01190000 	tsteq	r9, r0
    3e74:	c8910352 	ldmgt	r1, {r1, r4, r6, r8, r9}
    3e78:	5101197d 	tstpl	r1, sp, ror r9
    3e7c:	19007d02 	stmdbne	r0, {r1, r8, sl, fp, ip, sp, lr}
    3e80:	91035001 	tstls	r3, r1
    3e84:	18007fa8 	stmdane	r0, {r3, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    3e88:	00000000 	andeq	r0, r0, r0
    3e8c:	000009a2 	andeq	r0, r0, r2, lsr #19
    3e90:	000005a2 	andeq	r0, r0, r2, lsr #11
    3e94:	03520119 	cmpeq	r2, #1073741830	; 0x40000006
    3e98:	197f8891 	ldmdbne	pc!, {r0, r4, r7, fp, pc}^	; <UNPREDICTABLE>
    3e9c:	91035101 	tstls	r3, r1, lsl #2
    3ea0:	01197ee8 	tsteq	r9, r8, ror #29
    3ea4:	48910250 	ldmmi	r1, {r4, r6, r9}
    3ea8:	00001800 	andeq	r1, r0, r0, lsl #16
    3eac:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    3eb0:	05c20000 	strbeq	r0, [r2]
    3eb4:	01190000 	tsteq	r9, r0
    3eb8:	48910252 	ldmmi	r1, {r1, r4, r6, r9}
    3ebc:	02510119 	subseq	r0, r1, #1073741830	; 0x40000006
    3ec0:	01194891 			; <UNDEFINED> instruction: 0x01194891
    3ec4:	007d0250 	rsbseq	r0, sp, r0, asr r2
    3ec8:	00001800 	andeq	r1, r0, r0, lsl #16
    3ecc:	09d80000 	ldmibeq	r8, {}^	; <UNPREDICTABLE>
    3ed0:	05e60000 	strbeq	r0, [r6, #0]!
    3ed4:	01190000 	tsteq	r9, r0
    3ed8:	060c0552 			; <UNDEFINED> instruction: 0x060c0552
    3edc:	1900076d 	stmdbne	r0, {r0, r2, r3, r5, r6, r8, r9, sl}
    3ee0:	91035101 	tstls	r3, r1, lsl #2
    3ee4:	01197fa8 	tsteq	r9, r8, lsr #31
    3ee8:	48910250 	ldmmi	r1, {r4, r6, r9}
    3eec:	00001800 	andeq	r1, r0, r0, lsl #16
    3ef0:	09870000 	stmibeq	r7, {}	; <UNPREDICTABLE>
    3ef4:	06070000 	streq	r0, [r7], -r0
    3ef8:	01190000 	tsteq	r9, r0
    3efc:	48910252 	ldmmi	r1, {r1, r4, r6, r9}
    3f00:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    3f04:	197ee891 	ldmdbne	lr!, {r0, r4, r7, fp, sp, lr, pc}^
    3f08:	91025001 	tstls	r2, r1
    3f0c:	00180048 	andseq	r0, r8, r8, asr #32
    3f10:	87000000 	strhi	r0, [r0, -r0]
    3f14:	28000009 	stmdacs	r0, {r0, r3}
    3f18:	19000006 	stmdbne	r0, {r1, r2}
    3f1c:	91025201 	tstls	r2, r1, lsl #4
    3f20:	51011948 	tstpl	r1, r8, asr #18
    3f24:	7f889103 	svcvc	0x00889103
    3f28:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    3f2c:	18004891 	stmdane	r0, {r0, r4, r7, fp, lr}
    3f30:	00000000 	andeq	r0, r0, r0
    3f34:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    3f38:	0000064a 	andeq	r0, r0, sl, asr #12
    3f3c:	02520119 	subseq	r0, r2, #1073741830	; 0x40000006
    3f40:	01194891 			; <UNDEFINED> instruction: 0x01194891
    3f44:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    3f48:	5001197f 	andpl	r1, r1, pc, ror r9
    3f4c:	7ee89103 	urdvce	f1, f3
    3f50:	00001a00 	andeq	r1, r0, r0, lsl #20
    3f54:	09d80000 	ldmibeq	r8, {}^	; <UNPREDICTABLE>
    3f58:	01190000 	tsteq	r9, r0
    3f5c:	19340152 	ldmdbne	r4!, {r1, r4, r6, r8}
    3f60:	91035101 	tstls	r3, r1, lsl #2
    3f64:	01197ee8 	tsteq	r9, r8, ror #29
    3f68:	c8910350 	ldmgt	r1, {r4, r6, r8, r9}
    3f6c:	0000007d 	andeq	r0, r0, sp, ror r0
    3f70:	0000d512 	andeq	sp, r0, r2, lsl r5
    3f74:	00000000 	andeq	r0, r0, r0
    3f78:	00033000 	andeq	r3, r3, r0
    3f7c:	706c0100 	rsbvc	r0, ip, r0, lsl #2
    3f80:	15000008 	strne	r0, [r0, #-8]
    3f84:	00000127 	andeq	r0, r0, r7, lsr #2
    3f88:	00011d13 	andeq	r1, r1, r3, lsl sp
    3f8c:	000d8600 	andeq	r8, sp, r0, lsl #12
    3f90:	01131300 	tsteq	r3, r0, lsl #6
    3f94:	0ce80000 	stcleq	0, cr0, [r8]
    3f98:	09130000 	ldmdbeq	r3, {}	; <UNPREDICTABLE>
    3f9c:	57000001 	strpl	r0, [r0, -r1]
    3fa0:	1300000d 	movwne	r0, #13
    3fa4:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3fa8:	00000c23 	andeq	r0, r0, r3, lsr #24
    3fac:	0000f513 	andeq	pc, r0, r3, lsl r5	; <UNPREDICTABLE>
    3fb0:	000c9200 	andeq	r9, ip, r0, lsl #4
    3fb4:	00eb1300 	rsceq	r1, fp, r0, lsl #6
    3fb8:	0da70000 	stceq	0, cr0, [r7]
    3fbc:	e1130000 	tst	r3, r0
    3fc0:	fd000000 	stc2	0, cr0, [r0, #-0]
    3fc4:	1600000d 	strne	r0, [r0], -sp
    3fc8:	00000330 	andeq	r0, r0, r0, lsr r3
    3fcc:	00013117 	andeq	r3, r1, r7, lsl r1
    3fd0:	e8910300 	ldm	r1, {r8, r9}
    3fd4:	013b177e 	teqeq	fp, lr, ror r7
    3fd8:	91030000 	mrsls	r0, (UNDEF: 3)
    3fdc:	45177f88 	ldrmi	r7, [r7, #-3976]	; 0xf88
    3fe0:	03000001 	movweq	r0, #1
    3fe4:	177fa891 			; <UNDEFINED> instruction: 0x177fa891
    3fe8:	0000014e 	andeq	r0, r0, lr, asr #2
    3fec:	18489102 	stmdane	r8, {r1, r8, ip, pc}^
    3ff0:	00000000 	andeq	r0, r0, r0
    3ff4:	00000987 	andeq	r0, r0, r7, lsl #19
    3ff8:	0000070a 	andeq	r0, r0, sl, lsl #14
    3ffc:	03520119 	cmpeq	r2, #1073741830	; 0x40000006
    4000:	197dc891 	ldmdbne	sp!, {r0, r4, r7, fp, lr, pc}^
    4004:	7d025101 	stfvcs	f5, [r2, #-4]
    4008:	50011900 	andpl	r1, r1, r0, lsl #18
    400c:	7fa89103 	svcvc	0x00a89103
    4010:	00001800 	andeq	r1, r0, r0, lsl #16
    4014:	09a20000 	stmibeq	r2!, {}	; <UNPREDICTABLE>
    4018:	07240000 	streq	r0, [r4, -r0]!
    401c:	01190000 	tsteq	r9, r0
    4020:	00760251 	rsbseq	r0, r6, r1, asr r2
    4024:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    4028:	18004891 	stmdane	r0, {r0, r4, r7, fp, lr}
    402c:	00000000 	andeq	r0, r0, r0
    4030:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    4034:	00000746 	andeq	r0, r0, r6, asr #14
    4038:	02520119 	subseq	r0, r2, #1073741830	; 0x40000006
    403c:	01194891 			; <UNDEFINED> instruction: 0x01194891
    4040:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    4044:	5001197f 	andpl	r1, r1, pc, ror r9
    4048:	7ee89103 	urdvce	f1, f3
    404c:	00001800 	andeq	r1, r0, r0, lsl #16
    4050:	09a20000 	stmibeq	r2!, {}	; <UNPREDICTABLE>
    4054:	07670000 	strbeq	r0, [r7, -r0]!
    4058:	01190000 	tsteq	r9, r0
    405c:	c8910352 	ldmgt	r1, {r1, r4, r6, r8, r9}
    4060:	5101197d 	tstpl	r1, sp, ror r9
    4064:	19007d02 	stmdbne	r0, {r1, r8, sl, fp, ip, sp, lr}
    4068:	91025001 	tstls	r2, r1
    406c:	00180048 	andseq	r0, r8, r8, asr #32
    4070:	87000000 	strhi	r0, [r0, -r0]
    4074:	82000009 	andhi	r0, r0, #9
    4078:	19000007 	stmdbne	r0, {r0, r1, r2}
    407c:	76025101 	strvc	r5, [r2], -r1, lsl #2
    4080:	50011900 	andpl	r1, r1, r0, lsl #18
    4084:	7fa89103 	svcvc	0x00a89103
    4088:	00001800 	andeq	r1, r0, r0, lsl #16
    408c:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    4090:	07a40000 	streq	r0, [r4, r0]!
    4094:	01190000 	tsteq	r9, r0
    4098:	48910252 	ldmmi	r1, {r1, r4, r6, r9}
    409c:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    40a0:	197fa891 	ldmdbne	pc!, {r0, r4, r7, fp, sp, pc}^	; <UNPREDICTABLE>
    40a4:	91035001 	tstls	r3, r1
    40a8:	18007f88 	stmdane	r0, {r3, r7, r8, r9, sl, fp, ip, sp, lr}
    40ac:	00000000 	andeq	r0, r0, r0
    40b0:	00000987 	andeq	r0, r0, r7, lsl #19
    40b4:	000007c7 	andeq	r0, r0, r7, asr #15
    40b8:	03520119 	cmpeq	r2, #1073741830	; 0x40000006
    40bc:	197f8891 	ldmdbne	pc!, {r0, r4, r7, fp, pc}^	; <UNPREDICTABLE>
    40c0:	91035101 	tstls	r3, r1, lsl #2
    40c4:	01197ee8 	tsteq	r9, r8, ror #29
    40c8:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    40cc:	0018007f 	andseq	r0, r8, pc, ror r0
    40d0:	bd000000 	stclt	0, cr0, [r0, #-0]
    40d4:	e9000009 	stmdb	r0, {r0, r3}
    40d8:	19000007 	stmdbne	r0, {r0, r1, r2}
    40dc:	91035201 	tstls	r3, r1, lsl #4
    40e0:	01197fa8 	tsteq	r9, r8, lsr #31
    40e4:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    40e8:	5001197f 	andpl	r1, r1, pc, ror r9
    40ec:	00489102 	subeq	r9, r8, r2, lsl #2
    40f0:	00000018 	andeq	r0, r0, r8, lsl r0
    40f4:	0009bd00 	andeq	fp, r9, r0, lsl #26
    40f8:	00080b00 	andeq	r0, r8, r0, lsl #22
    40fc:	52011900 	andpl	r1, r1, #0, 18
    4100:	19489102 	stmdbne	r8, {r1, r8, ip, pc}^
    4104:	91035101 	tstls	r3, r1, lsl #2
    4108:	01197e88 	tsteq	r9, r8, lsl #29
    410c:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    4110:	0018007e 	andseq	r0, r8, lr, ror r0
    4114:	a2000000 	andge	r0, r0, #0
    4118:	2e000009 	cdpcs	0, 0, cr0, cr0, cr9, {0}
    411c:	19000008 	stmdbne	r0, {r3}
    4120:	91035201 	tstls	r3, r1, lsl #4
    4124:	01197f88 	tsteq	r9, r8, lsl #31
    4128:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    412c:	5001197e 	andpl	r1, r1, lr, ror r9
    4130:	7fa89103 	svcvc	0x00a89103
    4134:	00001800 	andeq	r1, r0, r0, lsl #16
    4138:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    413c:	08500000 	ldmdaeq	r0, {}^	; <UNPREDICTABLE>
    4140:	01190000 	tsteq	r9, r0
    4144:	a8910352 	ldmge	r1, {r1, r4, r6, r8, r9}
    4148:	5101197f 	tstpl	r1, pc, ror r9
    414c:	7fa89103 	svcvc	0x00a89103
    4150:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    4154:	1a004891 	bne	163a0 <__Stack_Size+0x15ba0>
    4158:	00000000 	andeq	r0, r0, r0
    415c:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    4160:	02520119 	subseq	r0, r2, #1073741830	; 0x40000006
    4164:	01194891 			; <UNDEFINED> instruction: 0x01194891
    4168:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    416c:	5001197d 	andpl	r1, r1, sp, ror r9
    4170:	7ec89103 	acsvce	f1, f3
    4174:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4178:	00000000 	andeq	r0, r0, r0
    417c:	000009f3 	strdeq	r0, [r0], -r3
    4180:	00000898 	muleq	r0, r8, r8
    4184:	02530119 	subseq	r0, r3, #1073741830	; 0x40000006
    4188:	01190075 	tsteq	r9, r5, ror r0
    418c:	007d0252 	rsbseq	r0, sp, r2, asr r2
    4190:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    4194:	197de891 	ldmdbne	sp!, {r0, r4, r7, fp, sp, lr, pc}^
    4198:	91035001 	tstls	r3, r1
    419c:	18007de8 	stmdane	r0, {r3, r5, r6, r7, r8, sl, fp, ip, sp, lr}
    41a0:	00000000 	andeq	r0, r0, r0
    41a4:	000009f3 	strdeq	r0, [r0], -r3
    41a8:	000008c1 	andeq	r0, r0, r1, asr #17
    41ac:	02530119 	subseq	r0, r3, #1073741830	; 0x40000006
    41b0:	01190075 	tsteq	r9, r5, ror r0
    41b4:	c8910352 	ldmgt	r1, {r1, r4, r6, r8, r9}
    41b8:	5101197d 	tstpl	r1, sp, ror r9
    41bc:	7e889103 	sinvce	f1, f3
    41c0:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    41c4:	007e8891 			; <UNDEFINED> instruction: 0x007e8891
    41c8:	00000018 	andeq	r0, r0, r8, lsl r0
    41cc:	0009f300 	andeq	pc, r9, r0, lsl #6
    41d0:	0008e800 	andeq	lr, r8, r0, lsl #16
    41d4:	53011900 	movwpl	r1, #6400	; 0x1900
    41d8:	19007502 	stmdbne	r0, {r1, r8, sl, ip, sp, lr}
    41dc:	91035201 	tstls	r3, r1, lsl #4
    41e0:	01197ea8 	tsteq	r9, r8, lsr #29
    41e4:	007d0251 	rsbseq	r0, sp, r1, asr r2
    41e8:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    41ec:	1a00007d 	bne	43e8 <__Stack_Size+0x3be8>
    41f0:	00000000 	andeq	r0, r0, r0
    41f4:	000009f3 	strdeq	r0, [r0], -r3
    41f8:	02530119 	subseq	r0, r3, #1073741830	; 0x40000006
    41fc:	01190075 	tsteq	r9, r5, ror r0
    4200:	c8910352 	ldmgt	r1, {r1, r4, r6, r8, r9}
    4204:	5101197e 	tstpl	r1, lr, ror r9
    4208:	7dc89103 	stfvcp	f1, [r8, #12]
    420c:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    4210:	007dc891 			; <UNDEFINED> instruction: 0x007dc891
    4214:	00001800 	andeq	r1, r0, r0, lsl #16
    4218:	0a130000 	beq	4c4220 <__Stack_Size+0x4c3a20>
    421c:	092a0000 	stmdbeq	sl!, {}	; <UNPREDICTABLE>
    4220:	01190000 	tsteq	r9, r0
    4224:	c8910351 	ldmgt	r1, {r0, r4, r6, r8, r9}
    4228:	5001197d 	andpl	r1, r1, sp, ror r9
    422c:	7e889103 	sinvce	f1, f3
    4230:	00001800 	andeq	r1, r0, r0, lsl #16
    4234:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    4238:	094b0000 	stmdbeq	fp, {}^	; <UNPREDICTABLE>
    423c:	01190000 	tsteq	r9, r0
    4240:	007d0252 	rsbseq	r0, sp, r2, asr r2
    4244:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    4248:	197e8891 	ldmdbne	lr!, {r0, r4, r7, fp, pc}^
    424c:	78025001 	stmdavc	r2, {r0, ip, lr}
    4250:	001a0000 	andseq	r0, sl, r0
    4254:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    4258:	1900000a 	stmdbne	r0, {r1, r3}
    425c:	78025001 	stmdavc	r2, {r0, ip, lr}
    4260:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4264:	00000073 	andeq	r0, r0, r3, ror r0
    4268:	0016191d 	andseq	r1, r6, sp, lsl r9
    426c:	6c1c0200 	lfmvs	f0, 4, [ip], {-0}
    4270:	08000009 	stmdaeq	r0, {r0, r3}
    4274:	00000158 	andeq	r0, r0, r8, asr r1
    4278:	0015ee1e 	andseq	lr, r5, lr, lsl lr
    427c:	82090100 	andhi	r0, r9, #0, 2
    4280:	05000009 	streq	r0, [r0, #-9]
    4284:	00000003 	andeq	r0, r0, r3
    4288:	01580800 	cmpeq	r8, r0, lsl #16
    428c:	fc1f0000 	ldc2	0, cr0, [pc], {-0}
    4290:	02000015 	andeq	r0, r0, #21
    4294:	0009a23a 	andeq	sl, r9, sl, lsr r2
    4298:	00c42000 	sbceq	r2, r4, r0
    429c:	ca200000 	bgt	8042a4 <__Stack_Size+0x803aa4>
    42a0:	20000000 	andcs	r0, r0, r0
    42a4:	000000ca 	andeq	r0, r0, sl, asr #1
    42a8:	16d41f00 	ldrbne	r1, [r4], r0, lsl #30
    42ac:	3b020000 	blcc	842b4 <__Stack_Size+0x83ab4>
    42b0:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    42b4:	0000c420 	andeq	ip, r0, r0, lsr #8
    42b8:	00ca2000 	sbceq	r2, sl, r0
    42bc:	ca200000 	bgt	8042c4 <__Stack_Size+0x803ac4>
    42c0:	00000000 	andeq	r0, r0, r0
    42c4:	0016f51f 	andseq	pc, r6, pc, lsl r5	; <UNPREDICTABLE>
    42c8:	d8440200 	stmdale	r4, {r9}^
    42cc:	20000009 	andcs	r0, r0, r9
    42d0:	000000c4 	andeq	r0, r0, r4, asr #1
    42d4:	0000ca20 	andeq	ip, r0, r0, lsr #20
    42d8:	00ca2000 	sbceq	r2, sl, r0
    42dc:	1f000000 	svcne	0x00000000
    42e0:	00001607 	andeq	r1, r0, r7, lsl #12
    42e4:	09f34b02 	ldmibeq	r3!, {r1, r8, r9, fp, lr}^
    42e8:	c4200000 	strtgt	r0, [r0], #-0
    42ec:	20000000 	andcs	r0, r0, r0
    42f0:	000000ca 	andeq	r0, r0, sl, asr #1
    42f4:	00008c20 	andeq	r8, r0, r0, lsr #24
    42f8:	1f1f0000 	svcne	0x001f0000
    42fc:	02000017 	andeq	r0, r0, #23
    4300:	000a1333 	andeq	r1, sl, r3, lsr r3
    4304:	00c42000 	sbceq	r2, r4, r0
    4308:	ca200000 	bgt	804310 <__Stack_Size+0x803b10>
    430c:	20000000 	andcs	r0, r0, r0
    4310:	000000ca 	andeq	r0, r0, sl, asr #1
    4314:	00008120 	andeq	r8, r0, r0, lsr #2
    4318:	0a1f0000 	beq	7c4320 <__Stack_Size+0x7c3b20>
    431c:	02000017 	andeq	r0, r0, #23
    4320:	000a2951 	andeq	r2, sl, r1, asr r9
    4324:	00c42000 	sbceq	r2, r4, r0
    4328:	ca200000 	bgt	804330 <__Stack_Size+0x803b30>
    432c:	00000000 	andeq	r0, r0, r0
    4330:	0016e421 	andseq	lr, r6, r1, lsr #8
    4334:	20280200 	eorcs	r0, r8, r0, lsl #4
    4338:	000000c4 	andeq	r0, r0, r4, asr #1
    433c:	0eb20000 	cdpeq	0, 11, cr0, cr2, cr0, {0}
    4340:	00040000 	andeq	r0, r4, r0
    4344:	00001021 	andeq	r1, r0, r1, lsr #32
    4348:	16360104 	ldrtne	r0, [r6], -r4, lsl #2
    434c:	97010000 	strls	r0, [r1, -r0]
    4350:	93000017 	movwls	r0, #23
    4354:	c0000008 	andgt	r0, r0, r8
    4358:	00000003 	andeq	r0, r0, r3
    435c:	2d000000 	stccs	0, cr0, [r0, #-0]
    4360:	02000013 	andeq	r0, r0, #19
    4364:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    4368:	40030000 	andmi	r0, r3, r0
    436c:	0400000c 	streq	r0, [r0], #-12
    4370:	0000371c 	andeq	r3, r0, ip, lsl r7
    4374:	08010200 	stmdaeq	r1, {r9}
    4378:	00000818 	andeq	r0, r0, r8, lsl r8
    437c:	fc050202 	stc2	2, cr0, [r5], {2}
    4380:	02000006 	andeq	r0, r0, #6
    4384:	09490702 	stmdbeq	r9, {r1, r8, r9, sl}^
    4388:	04020000 	streq	r0, [r2], #-0
    438c:	0004da05 	andeq	sp, r4, r5, lsl #20
    4390:	0b4e0300 	bleq	1384f98 <__Stack_Size+0x1384798>
    4394:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    4398:	0000005e 	andeq	r0, r0, lr, asr r0
    439c:	52070402 	andpl	r0, r7, #33554432	; 0x2000000
    43a0:	02000002 	andeq	r0, r0, #2
    43a4:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
    43a8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    43ac:	00024d07 	andeq	r4, r2, r7, lsl #26
    43b0:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    43b4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    43b8:	57070402 	strpl	r0, [r7, -r2, lsl #8]
    43bc:	03000002 	movweq	r0, #2
    43c0:	00000c42 	andeq	r0, r0, r2, asr #24
    43c4:	002c2a05 	eoreq	r2, ip, r5, lsl #20
    43c8:	50030000 	andpl	r0, r3, r0
    43cc:	0500000b 	streq	r0, [r0, #-11]
    43d0:	00005342 	andeq	r5, r0, r2, asr #6
    43d4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    43d8:	0000078b 	andeq	r0, r0, fp, lsl #15
    43dc:	01020405 	tsteq	r2, r5, lsl #8
    43e0:	00082108 	andeq	r2, r8, r8, lsl #2
    43e4:	18090600 	stmdane	r9, {r9, sl}
    43e8:	03800000 	orreq	r0, r0, #0
    43ec:	0000dc20 	andeq	sp, r0, r0, lsr #24
    43f0:	00780700 	rsbseq	r0, r8, r0, lsl #14
    43f4:	00dc2103 	sbcseq	r2, ip, r3, lsl #2
    43f8:	07000000 	streq	r0, [r0, -r0]
    43fc:	22030079 	andcs	r0, r3, #121	; 0x79
    4400:	000000dc 	ldrdeq	r0, [r0], -ip
    4404:	00740720 	rsbseq	r0, r4, r0, lsr #14
    4408:	00dc2303 	sbcseq	r2, ip, r3, lsl #6
    440c:	07400000 	strbeq	r0, [r0, -r0]
    4410:	2403007a 	strcs	r0, [r3], #-122	; 0x7a
    4414:	000000dc 	ldrdeq	r0, [r0], -ip
    4418:	81080060 	tsthi	r8, r0, rrx
    441c:	ec000000 	stc	0, cr0, [r0], {-0}
    4420:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    4424:	00000097 	muleq	r0, r7, r0
    4428:	e20a001f 	and	r0, sl, #31
    442c:	02000015 	andeq	r0, r0, #21
    4430:	010b0322 	tsteq	fp, r2, lsr #6
    4434:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
    4438:	0b220200 	bleq	884c40 <__Stack_Size+0x884440>
    443c:	0b000001 	bleq	4448 <__Stack_Size+0x3c48>
    4440:	22020061 	andcs	r0, r2, #97	; 0x61
    4444:	00000111 	andeq	r0, r0, r1, lsl r1
    4448:	81040c00 	tsthi	r4, r0, lsl #24
    444c:	0c000000 	stceq	0, cr0, [r0], {-0}
    4450:	00011704 	andeq	r1, r1, r4, lsl #14
    4454:	00810d00 	addeq	r0, r1, r0, lsl #26
    4458:	210a0000 	mrscs	r0, (UNDEF: 10)
    445c:	03000018 	movweq	r0, #24
    4460:	013f0346 	teqeq	pc, r6, asr #6
    4464:	640b0000 	strvs	r0, [fp], #-0
    4468:	03007473 	movweq	r7, #1139	; 0x473
    446c:	00013f46 	andeq	r3, r1, r6, asr #30
    4470:	72730b00 	rsbsvc	r0, r3, #0, 22
    4474:	47030063 	strmi	r0, [r3, -r3, rrx]
    4478:	00000145 	andeq	r0, r0, r5, asr #2
    447c:	a7040c00 	strge	r0, [r4, -r0, lsl #24]
    4480:	0c000000 	stceq	0, cr0, [r0], {-0}
    4484:	00014b04 	andeq	r4, r1, r4, lsl #22
    4488:	00a70d00 	adceq	r0, r7, r0, lsl #26
    448c:	870e0000 	strhi	r0, [lr, -r0]
    4490:	01000017 	tsteq	r0, r7, lsl r0
    4494:	001b0432 	andseq	r0, fp, r2, lsr r4
    4498:	00007008 	andeq	r7, r0, r8
    449c:	109c0100 	addsne	r0, ip, r0, lsl #2
    44a0:	0f000002 	svceq	0x00000002
    44a4:	32010070 	andcc	r0, r1, #112	; 0x70
    44a8:	0000013f 	andeq	r0, r0, pc, lsr r1
    44ac:	00000e3a 	andeq	r0, r0, sl, lsr lr
    44b0:	0100780f 	tsteq	r0, pc, lsl #16
    44b4:	00011133 	andeq	r1, r1, r3, lsr r1
    44b8:	000e7300 	andeq	r7, lr, r0, lsl #6
    44bc:	00790f00 	rsbseq	r0, r9, r0, lsl #30
    44c0:	01113301 	tsteq	r1, r1, lsl #6
    44c4:	0eaa0000 	cdpeq	0, 10, cr0, cr10, cr0, {0}
    44c8:	ec100000 	ldc	0, cr0, [r0], {-0}
    44cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    44d0:	2808001b 	stmdacs	r8, {r0, r1, r3, r4}
    44d4:	01000000 	mrseq	r0, (UNDEF: 0)
    44d8:	0001b235 	andeq	fp, r1, r5, lsr r2
    44dc:	01011100 	mrseq	r1, (UNDEF: 17)
    44e0:	0ee10000 	cdpeq	0, 14, cr0, cr1, cr0, {0}
    44e4:	f8110000 			; <UNDEFINED> instruction: 0xf8110000
    44e8:	0d000000 	stceq	0, cr0, [r0, #-0]
    44ec:	0000000f 	andeq	r0, r0, pc
    44f0:	0000ec12 	andeq	lr, r0, r2, lsl ip
    44f4:	001b3000 	andseq	r3, fp, r0
    44f8:	00035808 	andeq	r5, r3, r8, lsl #16
    44fc:	d4360100 	ldrtle	r0, [r6], #-256	; 0x100
    4500:	13000001 	movwne	r0, #1
    4504:	00000101 	andeq	r0, r0, r1, lsl #2
    4508:	0000f811 	andeq	pc, r0, r1, lsl r8	; <UNPREDICTABLE>
    450c:	000f4600 	andeq	r4, pc, r0, lsl #12
    4510:	64140000 	ldrvs	r0, [r4], #-0
    4514:	9d08001b 	stcls	0, cr0, [r8, #-108]	; 0xffffff94
    4518:	ee00000d 	cdp	0, 0, cr0, cr0, cr13, {0}
    451c:	15000001 	strne	r0, [r0, #-1]
    4520:	31015101 	tstcc	r1, r1, lsl #2
    4524:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4528:	0000e074 	andeq	lr, r0, r4, ror r0
    452c:	001b7416 	andseq	r7, fp, r6, lsl r4
    4530:	000db308 	andeq	fp, sp, r8, lsl #6
    4534:	52011500 	andpl	r1, r1, #0, 10
    4538:	5201f303 	andpl	pc, r1, #201326592	; 0xc000000
    453c:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4540:	155101f3 	ldrbne	r0, [r1, #-499]	; 0x1f3
    4544:	f3055001 	vhadd.u8	d5, d5, d1
    4548:	40235001 	eormi	r5, r3, r1
    454c:	c10e0000 	mrsgt	r0, (UNDEF: 14)
    4550:	01000017 	tsteq	r0, r7, lsl r0
    4554:	001b743b 	andseq	r7, fp, fp, lsr r4
    4558:	00003a08 	andeq	r3, r0, r8, lsl #20
    455c:	d99c0100 	ldmible	ip, {r8}
    4560:	0f000002 	svceq	0x00000002
    4564:	3b010078 	blcc	4474c <__Stack_Size+0x43f4c>
    4568:	0000010b 	andeq	r0, r0, fp, lsl #2
    456c:	00000f85 	andeq	r0, r0, r5, lsl #31
    4570:	0100790f 	tsteq	r0, pc, lsl #18
    4574:	00010b3b 	andeq	r0, r1, fp, lsr fp
    4578:	000fa300 	andeq	sl, pc, r0, lsl #6
    457c:	00700f00 	rsbseq	r0, r0, r0, lsl #30
    4580:	01453c01 	cmpeq	r5, r1, lsl #24
    4584:	0fc10000 	svceq	0x00c10000
    4588:	7a170000 	bvc	5c4590 <__Stack_Size+0x5c3d90>
    458c:	3e010031 	mcrcc	0, 0, r0, cr1, cr1, {1}
    4590:	000000dc 	ldrdeq	r0, [r0], -ip
    4594:	14509102 	ldrbne	r9, [r0], #-258	; 0x102
    4598:	08001b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, ip}
    459c:	00000dce 	andeq	r0, r0, lr, asr #27
    45a0:	00000274 	andeq	r0, r0, r4, ror r2
    45a4:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    45a8:	1500e074 	strne	lr, [r0, #-116]	; 0x74
    45ac:	7d025001 	stcvc	0, cr5, [r2, #-4]
    45b0:	92140000 	andsls	r0, r4, #0
    45b4:	b308001b 	movwlt	r0, #32795	; 0x801b
    45b8:	9400000d 	strls	r0, [r0], #-13
    45bc:	15000002 	strne	r0, [r0, #-2]
    45c0:	7d025201 	sfmvc	f5, 4, [r2, #-4]
    45c4:	51011500 	tstpl	r1, r0, lsl #10
    45c8:	15007402 	strne	r7, [r0, #-1026]	; 0x402
    45cc:	76025001 	strvc	r5, [r2], -r1
    45d0:	9e140000 	cdpls	0, 1, cr0, cr4, cr0, {0}
    45d4:	b308001b 	movwlt	r0, #32795	; 0x801b
    45d8:	b400000d 	strlt	r0, [r0], #-13
    45dc:	15000002 	strne	r0, [r0, #-2]
    45e0:	7d025201 	sfmvc	f5, 4, [r2, #-4]
    45e4:	51011500 	tstpl	r1, r0, lsl #10
    45e8:	15207402 	strne	r7, [r0, #-1026]!	; 0x402
    45ec:	75025001 	strvc	r5, [r2, #-1]
    45f0:	a4140000 	ldrge	r0, [r4], #-0
    45f4:	e408001b 	str	r0, [r8], #-27
    45f8:	c800000d 	stmdagt	r0, {r0, r2, r3}
    45fc:	15000002 	strne	r0, [r0, #-2]
    4600:	76025001 	strvc	r5, [r2], -r1
    4604:	aa180000 	bge	60460c <__Stack_Size+0x603e0c>
    4608:	e408001b 	str	r0, [r8], #-27
    460c:	1500000d 	strne	r0, [r0, #-13]
    4610:	75025001 	strvc	r5, [r2, #-1]
    4614:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4618:	00001754 	andeq	r1, r0, r4, asr r7
    461c:	1bb05e01 	blne	fec1be28 <BootRAM+0xdb8c5c9>
    4620:	005e0800 	subseq	r0, lr, r0, lsl #16
    4624:	9c010000 	stcls	0, cr0, [r1], {-0}
    4628:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
    462c:	0100630f 	tsteq	r0, pc, lsl #6
    4630:	00010b5e 	andeq	r0, r1, lr, asr fp
    4634:	000fdf00 	andeq	sp, pc, r0, lsl #30
    4638:	00780f00 	rsbseq	r0, r8, r0, lsl #30
    463c:	01115e01 	tsteq	r1, r1, lsl #28
    4640:	0ffd0000 	svceq	0x00fd0000
    4644:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    4648:	115e0100 	cmpne	lr, r0, lsl #2
    464c:	1b000001 	blne	4658 <__Stack_Size+0x3e58>
    4650:	17000010 	smladne	r0, r0, r0, r0
    4654:	00706d74 	rsbseq	r6, r0, r4, ror sp
    4658:	00dc6001 	sbcseq	r6, ip, r1
    465c:	91020000 	mrsls	r0, (UNDEF: 2)
    4660:	17611948 	strbne	r1, [r1, -r8, asr #18]!
    4664:	61010000 	mrsvs	r0, (UNDEF: 1)
    4668:	00000081 	andeq	r0, r0, r1, lsl #1
    466c:	00001039 	andeq	r1, r0, r9, lsr r0
    4670:	0000ec10 	andeq	lr, r0, r0, lsl ip
    4674:	001bba00 	andseq	fp, fp, r0, lsl #20
    4678:	00001608 	andeq	r1, r0, r8, lsl #12
    467c:	58630100 	stmdapl	r3!, {r8}^
    4680:	11000003 	tstne	r0, r3
    4684:	00000101 	andeq	r0, r0, r1, lsl #2
    4688:	0000104c 	andeq	r1, r0, ip, asr #32
    468c:	0000f811 	andeq	pc, r0, r1, lsl r8	; <UNPREDICTABLE>
    4690:	00106a00 	andseq	r6, r0, r0, lsl #20
    4694:	ec100000 	ldc	0, cr0, [r0], {-0}
    4698:	d6000000 	strle	r0, [r0], -r0
    469c:	2008001b 	andcs	r0, r8, fp, lsl r0
    46a0:	01000000 	mrseq	r0, (UNDEF: 0)
    46a4:	00037a67 	andeq	r7, r3, r7, ror #20
    46a8:	01011a00 	tsteq	r1, r0, lsl #20
    46ac:	56010000 	strpl	r0, [r1], -r0
    46b0:	0000f81a 	andeq	pc, r0, sl, lsl r8	; <UNPREDICTABLE>
    46b4:	00550100 	subseq	r0, r5, r0, lsl #2
    46b8:	001bd614 	andseq	sp, fp, r4, lsl r6
    46bc:	000de408 	andeq	lr, sp, r8, lsl #8
    46c0:	00038e00 	andeq	r8, r3, r0, lsl #28
    46c4:	50011500 	andpl	r1, r1, r0, lsl #10
    46c8:	00007d02 	andeq	r7, r0, r2, lsl #26
    46cc:	001c0018 	andseq	r0, ip, r8, lsl r0
    46d0:	000de408 	andeq	lr, sp, r8, lsl #8
    46d4:	50011500 	andpl	r1, r1, r0, lsl #10
    46d8:	00007502 	andeq	r7, r0, r2, lsl #10
    46dc:	17741b00 	ldrbne	r1, [r4, -r0, lsl #22]!
    46e0:	6c010000 	stcvs	0, cr0, [r1], {-0}
    46e4:	00000081 	andeq	r0, r0, r1, lsl #1
    46e8:	08001c10 	stmdaeq	r0, {r4, sl, fp, ip}
    46ec:	000000c8 	andeq	r0, r0, r8, asr #1
    46f0:	05b49c01 	ldreq	r9, [r4, #3073]!	; 0xc01
    46f4:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
    46f8:	0b6c0100 	bleq	1b04b00 <__Stack_Size+0x1b04300>
    46fc:	8a000001 	bhi	4708 <__Stack_Size+0x3f08>
    4700:	0f000010 	svceq	0x00000010
    4704:	6c010079 	stcvs	0, cr0, [r1], {121}	; 0x79
    4708:	0000010b 	andeq	r0, r0, fp, lsl #2
    470c:	000010b6 	strheq	r1, [r0], -r6
    4710:	0017381c 	andseq	r3, r7, ip, lsl r8
    4714:	116c0100 	cmnne	ip, r0, lsl #2
    4718:	d7000001 	strle	r0, [r0, -r1]
    471c:	19000010 	stmdbne	r0, {r4}
    4720:	00001761 	andeq	r1, r0, r1, ror #14
    4724:	05b46e01 	ldreq	r6, [r4, #3585]!	; 0xe01
    4728:	10f80000 	rscsne	r0, r8, r0
    472c:	61170000 	tstvs	r7, r0
    4730:	dc6f0100 	stflee	f0, [pc], #-0	; 4738 <__Stack_Size+0x3f38>
    4734:	03000000 	movweq	r0, #0
    4738:	177f8891 			; <UNDEFINED> instruction: 0x177f8891
    473c:	70010062 	andvc	r0, r1, r2, rrx
    4740:	000000dc 	ldrdeq	r0, [r0], -ip
    4744:	7fa89103 	svcvc	0x00a89103
    4748:	01006317 	tsteq	r0, r7, lsl r3
    474c:	0000dc71 	andeq	sp, r0, r1, ror ip
    4750:	48910200 	ldmmi	r1, {r9}
    4754:	0000ec12 	andeq	lr, r0, r2, lsl ip
    4758:	001c1400 	andseq	r1, ip, r0, lsl #8
    475c:	00038008 	andeq	r8, r3, r8
    4760:	3c740100 	ldfcce	f0, [r4], #-0
    4764:	11000004 	tstne	r0, r4
    4768:	00000101 	andeq	r0, r0, r1, lsl #2
    476c:	00001112 	andeq	r1, r0, r2, lsl r1
    4770:	0000f811 	andeq	pc, r0, r1, lsl r8	; <UNPREDICTABLE>
    4774:	00113300 	andseq	r3, r1, r0, lsl #6
    4778:	56140000 	ldrpl	r0, [r4], -r0
    477c:	b308001c 	movwlt	r0, #32796	; 0x801c
    4780:	5e00000d 	cdppl	0, 0, cr0, cr0, cr13, {0}
    4784:	15000004 	strne	r0, [r0, #-4]
    4788:	f3035201 	vhsub.u8	d5, d3, d1
    478c:	01155101 	tsteq	r5, r1, lsl #2
    4790:	01f30351 	mvnseq	r0, r1, asr r3
    4794:	50011551 	andpl	r1, r1, r1, asr r5
    4798:	00489102 	subeq	r9, r8, r2, lsl #2
    479c:	001c6014 	andseq	r6, ip, r4, lsl r0
    47a0:	000db308 	andeq	fp, sp, r8, lsl #6
    47a4:	00048200 	andeq	r8, r4, r0, lsl #4
    47a8:	52011500 	andpl	r1, r1, #0, 10
    47ac:	78280305 	stmdavc	r8!, {r0, r2, r8, r9}
    47b0:	01150800 	tsteq	r5, r0, lsl #16
    47b4:	48910251 	ldmmi	r1, {r0, r4, r6, r9}
    47b8:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    47bc:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    47c0:	001c6a14 	andseq	r6, ip, r4, lsl sl
    47c4:	000df508 	andeq	pc, sp, r8, lsl #10
    47c8:	0004a300 	andeq	sl, r4, r0, lsl #6
    47cc:	52011500 	andpl	r1, r1, #0, 10
    47d0:	15007502 	strne	r7, [r0, #-1282]	; 0x502
    47d4:	91035101 	tstls	r3, r1, lsl #2
    47d8:	01157fa8 	tsteq	r5, r8, lsr #31
    47dc:	007d0250 	rsbseq	r0, sp, r0, asr r2
    47e0:	1c721400 	cfldrdne	mvd1, [r2], #-0
    47e4:	0dce0800 	stcleq	8, cr0, [lr]
    47e8:	04be0000 	ldrteq	r0, [lr], #0
    47ec:	01150000 	tsteq	r5, r0
    47f0:	007d0251 	rsbseq	r0, sp, r1, asr r2
    47f4:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    47f8:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    47fc:	001c7c14 	andseq	r7, ip, r4, lsl ip
    4800:	000e1008 	andeq	r1, lr, r8
    4804:	0004de00 	andeq	sp, r4, r0, lsl #28
    4808:	52011500 	andpl	r1, r1, #0, 10
    480c:	15007502 	strne	r7, [r0, #-1282]	; 0x502
    4810:	91025101 	tstls	r2, r1, lsl #2
    4814:	50011548 	andpl	r1, r1, r8, asr #10
    4818:	00007d02 	andeq	r7, r0, r2, lsl #26
    481c:	001c8614 	andseq	r8, ip, r4, lsl r6
    4820:	000db308 	andeq	fp, sp, r8, lsl #6
    4824:	0004ff00 	andeq	pc, r4, r0, lsl #30
    4828:	52011500 	andpl	r1, r1, #0, 10
    482c:	7fa89103 	svcvc	0x00a89103
    4830:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    4834:	0115007d 	tsteq	r5, sp, ror r0
    4838:	48910250 	ldmmi	r1, {r4, r6, r9}
    483c:	1c8e1400 	cfstrsne	mvf1, [lr], {0}
    4840:	0e2b0800 	cdpeq	8, 2, cr0, cr11, cr0, {0}
    4844:	05190000 	ldreq	r0, [r9, #-0]
    4848:	01150000 	tsteq	r5, r0
    484c:	48910251 	ldmmi	r1, {r0, r4, r6, r9}
    4850:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4854:	1400007d 	strne	r0, [r0], #-125	; 0x7d
    4858:	08001c96 	stmdaeq	r0, {r1, r2, r4, r7, sl, fp, ip}
    485c:	00000e41 	andeq	r0, r0, r1, asr #28
    4860:	00000534 	andeq	r0, r0, r4, lsr r5
    4864:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    4868:	0115007d 	tsteq	r5, sp, ror r0
    486c:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    4870:	ac14007f 	ldcge	0, cr0, [r4], {127}	; 0x7f
    4874:	5708001c 	smladpl	r8, ip, r0, r0
    4878:	5500000e 	strpl	r0, [r0, #-14]
    487c:	15000005 	strne	r0, [r0, #-5]
    4880:	91035201 	tstls	r3, r1, lsl #4
    4884:	01157fa8 	tsteq	r5, r8, lsr #31
    4888:	007d0251 	rsbseq	r0, sp, r1, asr r2
    488c:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4890:	14000074 	strne	r0, [r0], #-116	; 0x74
    4894:	08001cb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, sl, fp, ip}
    4898:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    489c:	00000575 	andeq	r0, r0, r5, ror r5
    48a0:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    48a4:	01150074 	tsteq	r5, r4, ror r0
    48a8:	00740251 	rsbseq	r0, r4, r1, asr r2
    48ac:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    48b0:	1400007d 	strne	r0, [r0], #-125	; 0x7d
    48b4:	08001cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip}
    48b8:	00000de4 	andeq	r0, r0, r4, ror #27
    48bc:	00000589 	andeq	r0, r0, r9, lsl #11
    48c0:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    48c4:	1400007d 	strne	r0, [r0], #-125	; 0x7d
    48c8:	08001cc2 	stmdaeq	r0, {r1, r6, r7, sl, fp, ip}
    48cc:	00000de4 	andeq	r0, r0, r4, ror #27
    48d0:	0000059d 	muleq	r0, sp, r5
    48d4:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    48d8:	18004891 	stmdane	r0, {r0, r4, r7, fp, lr}
    48dc:	08001cca 	stmdaeq	r0, {r1, r3, r6, r7, sl, fp, ip}
    48e0:	00000e77 	andeq	r0, r0, r7, ror lr
    48e4:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    48e8:	01154891 			; <UNDEFINED> instruction: 0x01154891
    48ec:	007d0250 	rsbseq	r0, sp, r0, asr r2
    48f0:	730d0000 	movwvc	r0, #53248	; 0xd000
    48f4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    48f8:	00001768 	andeq	r1, r0, r8, ror #14
    48fc:	1cd89c01 	ldclne	12, cr9, [r8], {1}
    4900:	00e00800 	rsceq	r0, r0, r0, lsl #16
    4904:	9c010000 	stcls	0, cr0, [r1], {-0}
    4908:	000008c3 	andeq	r0, r0, r3, asr #17
    490c:	0100720f 	tsteq	r0, pc, lsl #4
    4910:	00013f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
    4914:	00115400 	andseq	r5, r1, r0, lsl #8
    4918:	31700f00 	cmncc	r0, r0, lsl #30
    491c:	459d0100 	ldrmi	r0, [sp, #256]	; 0x100
    4920:	80000001 	andhi	r0, r0, r1
    4924:	0f000011 	svceq	0x00000011
    4928:	01003270 	tsteq	r0, r0, ror r2
    492c:	0001459d 	muleq	r1, sp, r5
    4930:	0011ac00 	andseq	sl, r1, r0, lsl #24
    4934:	00611700 	rsbeq	r1, r1, r0, lsl #14
    4938:	00dcb301 	sbcseq	fp, ip, r1, lsl #6
    493c:	91030000 	mrsls	r0, (UNDEF: 3)
    4940:	62177de8 	andsvs	r7, r7, #232, 26	; 0x3a00
    4944:	dcb40100 	ldfles	f0, [r4]
    4948:	03000000 	movweq	r0, #0
    494c:	177e8891 			; <UNDEFINED> instruction: 0x177e8891
    4950:	b5010063 	strlt	r0, [r1, #-99]	; 0x63
    4954:	000000dc 	ldrdeq	r0, [r0], -ip
    4958:	7ea89103 	tanvce	f1, f3
    495c:	01006417 	tsteq	r0, r7, lsl r4
    4960:	0000dcb6 			; <UNDEFINED> instruction: 0x0000dcb6
    4964:	c8910300 	ldmgt	r1, {r8, r9}
    4968:	0065177e 	rsbeq	r1, r5, lr, ror r7
    496c:	00dcb701 	sbcseq	fp, ip, r1, lsl #14
    4970:	91030000 	mrsls	r0, (UNDEF: 3)
    4974:	66177ee8 	ldrvs	r7, [r7], -r8, ror #29
    4978:	dcb80100 	ldfles	f0, [r8]
    497c:	03000000 	movweq	r0, #0
    4980:	177f8891 			; <UNDEFINED> instruction: 0x177f8891
    4984:	b9010067 	stmdblt	r1, {r0, r1, r2, r5, r6}
    4988:	000000dc 	ldrdeq	r0, [r0], -ip
    498c:	7fa89103 	svcvc	0x00a89103
    4990:	01006817 	tsteq	r0, r7, lsl r8
    4994:	0000dcba 			; <UNDEFINED> instruction: 0x0000dcba
    4998:	48910200 	ldmmi	r1, {r9}
    499c:	001cf614 	andseq	pc, ip, r4, lsl r6	; <UNPREDICTABLE>
    49a0:	000e1008 	andeq	r1, lr, r8
    49a4:	00067f00 	andeq	r7, r6, r0, lsl #30
    49a8:	52011500 	andpl	r1, r1, #0, 10
    49ac:	15007502 	strne	r7, [r0, #-1282]	; 0x502
    49b0:	78025101 	stmdavc	r2, {r0, r8, ip, lr}
    49b4:	50011500 	andpl	r1, r1, r0, lsl #10
    49b8:	7ea89103 	tanvce	f1, f3
    49bc:	1d001400 	cfstrsne	mvf1, [r0, #-0]
    49c0:	0e100800 	cdpeq	8, 1, cr0, cr0, cr0, {0}
    49c4:	06a00000 	strteq	r0, [r0], r0
    49c8:	01150000 	tsteq	r5, r0
    49cc:	00740252 	rsbseq	r0, r4, r2, asr r2
    49d0:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    49d4:	01150077 	tsteq	r5, r7, ror r0
    49d8:	c8910350 	ldmgt	r1, {r4, r6, r8, r9}
    49dc:	0a14007e 	beq	504bdc <__Stack_Size+0x5043dc>
    49e0:	b308001d 	movwlt	r0, #32797	; 0x801d
    49e4:	c200000d 	andgt	r0, r0, #13
    49e8:	15000006 	strne	r0, [r0, #-6]
    49ec:	91035201 	tstls	r3, r1, lsl #4
    49f0:	01157ec8 	tsteq	r5, r8, asr #29
    49f4:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    49f8:	5001157e 	andpl	r1, r1, lr, ror r5
    49fc:	00007d02 	andeq	r7, r0, r2, lsl #26
    4a00:	001d1414 	andseq	r1, sp, r4, lsl r4
    4a04:	000df508 	andeq	pc, sp, r8, lsl #10
    4a08:	0006e300 	andeq	lr, r6, r0, lsl #6
    4a0c:	52011500 	andpl	r1, r1, #0, 10
    4a10:	15007502 	strne	r7, [r0, #-1282]	; 0x502
    4a14:	78025101 	stmdavc	r2, {r0, r8, ip, lr}
    4a18:	50011500 	andpl	r1, r1, r0, lsl #10
    4a1c:	7ea89103 	tanvce	f1, f3
    4a20:	1d1e1400 	cfldrsne	mvf1, [lr, #-0]
    4a24:	0df50800 	ldcleq	8, cr0, [r5]
    4a28:	07040000 	streq	r0, [r4, -r0]
    4a2c:	01150000 	tsteq	r5, r0
    4a30:	00740252 	rsbseq	r0, r4, r2, asr r2
    4a34:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    4a38:	01150077 	tsteq	r5, r7, ror r0
    4a3c:	c8910350 	ldmgt	r1, {r4, r6, r8, r9}
    4a40:	2814007e 	ldmdacs	r4, {r1, r2, r3, r4, r5, r6}
    4a44:	b308001d 	movwlt	r0, #32797	; 0x801d
    4a48:	2700000d 	strcs	r0, [r0, -sp]
    4a4c:	15000007 	strne	r0, [r0, #-7]
    4a50:	91035201 	tstls	r3, r1, lsl #4
    4a54:	01157ec8 	tsteq	r5, r8, asr #29
    4a58:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    4a5c:	5001157e 	andpl	r1, r1, lr, ror r5
    4a60:	7e889103 	sinvce	f1, f3
    4a64:	1d361400 	cfldrsne	mvf1, [r6, #-0]
    4a68:	0db30800 	ldceq	8, cr0, [r3]
    4a6c:	074a0000 	strbeq	r0, [sl, -r0]
    4a70:	01150000 	tsteq	r5, r0
    4a74:	c0740352 	rsbsgt	r0, r4, r2, asr r3
    4a78:	51011500 	tstpl	r1, r0, lsl #10
    4a7c:	00c07503 	sbceq	r7, r0, r3, lsl #10
    4a80:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4a84:	007ec891 			; <UNDEFINED> instruction: 0x007ec891
    4a88:	001d4014 	andseq	r4, sp, r4, lsl r0
    4a8c:	000db308 	andeq	fp, sp, r8, lsl #6
    4a90:	00076f00 	andeq	r6, r7, r0, lsl #30
    4a94:	52011500 	andpl	r1, r1, #0, 10
    4a98:	77080305 	strvc	r0, [r8, -r5, lsl #6]
    4a9c:	01150800 	tsteq	r5, r0, lsl #16
    4aa0:	c8910351 	ldmgt	r1, {r0, r4, r6, r8, r9}
    4aa4:	5001157e 	andpl	r1, r1, lr, ror r5
    4aa8:	7ea89103 	tanvce	f1, f3
    4aac:	1d4e1400 	cfstrdne	mvd1, [lr, #-0]
    4ab0:	0db30800 	ldceq	8, cr0, [r3]
    4ab4:	07920000 	ldreq	r0, [r2, r0]
    4ab8:	01150000 	tsteq	r5, r0
    4abc:	e0740352 	rsbs	r0, r4, r2, asr r3
    4ac0:	51011500 	tstpl	r1, r0, lsl #10
    4ac4:	00e07503 	rsceq	r7, r0, r3, lsl #10
    4ac8:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4acc:	007ec891 			; <UNDEFINED> instruction: 0x007ec891
    4ad0:	001d5814 	andseq	r5, sp, r4, lsl r8
    4ad4:	000df508 	andeq	pc, sp, r8, lsl #10
    4ad8:	0007b500 	andeq	fp, r7, r0, lsl #10
    4adc:	52011500 	andpl	r1, r1, #0, 10
    4ae0:	7ec89103 	acsvce	f1, f3
    4ae4:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4ae8:	157ec891 	ldrbne	ip, [lr, #-2193]!	; 0x891
    4aec:	91035001 	tstls	r3, r1
    4af0:	14007ec8 	strne	r7, [r0], #-3784	; 0xec8
    4af4:	08001d62 	stmdaeq	r0, {r1, r5, r6, r8, sl, fp, ip}
    4af8:	00000e10 	andeq	r0, r0, r0, lsl lr
    4afc:	000007d7 	ldrdeq	r0, [r0], -r7
    4b00:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4b04:	0115007d 	tsteq	r5, sp, ror r0
    4b08:	88910351 	ldmhi	r1, {r0, r4, r6, r8, r9}
    4b0c:	5001157e 	andpl	r1, r1, lr, ror r5
    4b10:	7ee89103 	urdvce	f1, f3
    4b14:	1d6c1400 	cfstrdne	mvd1, [ip, #-0]
    4b18:	0e100800 	cdpeq	8, 1, cr0, cr0, cr0, {0}
    4b1c:	07fa0000 	ldrbeq	r0, [sl, r0]!
    4b20:	01150000 	tsteq	r5, r0
    4b24:	a8910352 	ldmge	r1, {r1, r4, r6, r8, r9}
    4b28:	5101157e 	tstpl	r1, lr, ror r5
    4b2c:	7ec89103 	acsvce	f1, f3
    4b30:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4b34:	007f8891 			; <UNDEFINED> instruction: 0x007f8891
    4b38:	001d7614 	andseq	r7, sp, r4, lsl r6
    4b3c:	000df508 	andeq	pc, sp, r8, lsl #10
    4b40:	00081d00 	andeq	r1, r8, r0, lsl #26
    4b44:	52011500 	andpl	r1, r1, #0, 10
    4b48:	7ea89103 	tanvce	f1, f3
    4b4c:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4b50:	157ec891 	ldrbne	ip, [lr, #-2193]!	; 0x891
    4b54:	91035001 	tstls	r3, r1
    4b58:	14007fa8 	strne	r7, [r0], #-4008	; 0xfa8
    4b5c:	08001d80 	stmdaeq	r0, {r7, r8, sl, fp, ip}
    4b60:	00000df5 	strdeq	r0, [r0], -r5
    4b64:	0000083e 	andeq	r0, r0, lr, lsr r8
    4b68:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4b6c:	0115007d 	tsteq	r5, sp, ror r0
    4b70:	88910351 	ldmhi	r1, {r0, r4, r6, r8, r9}
    4b74:	5001157e 	andpl	r1, r1, lr, ror r5
    4b78:	00489102 	subeq	r9, r8, r2, lsl #2
    4b7c:	001d8a14 	andseq	r8, sp, r4, lsl sl
    4b80:	000db308 	andeq	fp, sp, r8, lsl #6
    4b84:	00086000 	andeq	r6, r8, r0
    4b88:	52011500 	andpl	r1, r1, #0, 10
    4b8c:	7f889103 	svcvc	0x00889103
    4b90:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4b94:	157ee891 	ldrbne	lr, [lr, #-2193]!	; 0x891
    4b98:	76025001 	strvc	r5, [r2], -r1
    4b9c:	96140000 	ldrls	r0, [r4], -r0
    4ba0:	b308001d 	movwlt	r0, #32797	; 0x801d
    4ba4:	8100000d 	tsthi	r0, sp
    4ba8:	15000008 	strne	r0, [r0, #-8]
    4bac:	91025201 	tstls	r2, r1, lsl #4
    4bb0:	51011548 	tstpl	r1, r8, asr #10
    4bb4:	7fa89103 	svcvc	0x00a89103
    4bb8:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4bbc:	14002076 	strne	r2, [r0], #-118	; 0x76
    4bc0:	08001da2 	stmdaeq	r0, {r1, r5, r7, r8, sl, fp, ip}
    4bc4:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4bc8:	000008a3 	andeq	r0, r0, r3, lsr #17
    4bcc:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4bd0:	01154891 			; <UNDEFINED> instruction: 0x01154891
    4bd4:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    4bd8:	5001157e 	andpl	r1, r1, lr, ror r5
    4bdc:	00c07603 	sbceq	r7, r0, r3, lsl #12
    4be0:	1dae1800 	stcne	8, cr1, [lr]
    4be4:	0db30800 	ldceq	8, cr0, [r3]
    4be8:	01150000 	tsteq	r5, r0
    4bec:	a8910352 	ldmge	r1, {r1, r4, r6, r8, r9}
    4bf0:	5101157f 	tstpl	r1, pc, ror r5
    4bf4:	7f889103 	svcvc	0x00889103
    4bf8:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4bfc:	0000e076 	andeq	lr, r0, r6, ror r0
    4c00:	17fa0e00 	ldrbne	r0, [sl, r0, lsl #28]!
    4c04:	e7010000 	str	r0, [r1, -r0]
    4c08:	08001db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, ip}
    4c0c:	000000b4 	strheq	r0, [r0], -r4
    4c10:	0b629c01 	bleq	18abc1c <__Stack_Size+0x18ab41c>
    4c14:	720f0000 	andvc	r0, pc, #0
    4c18:	3fe70100 	svccc	0x00e70100
    4c1c:	d8000001 	stmdale	r0, {r0}
    4c20:	0f000011 	svceq	0x00000011
    4c24:	e7010070 	smlsdx	r1, r0, r0, r0
    4c28:	00000145 	andeq	r0, r0, r5, asr #2
    4c2c:	000011f6 	strdeq	r1, [r0], -r6
    4c30:	01006117 	tsteq	r0, r7, lsl r1
    4c34:	0000dcfa 	strdeq	sp, [r0], -sl
    4c38:	90910300 	addsls	r0, r1, r0, lsl #6
    4c3c:	0062177e 	rsbeq	r1, r2, lr, ror r7
    4c40:	00dcfb01 	sbcseq	pc, ip, r1, lsl #22
    4c44:	91030000 	mrsls	r0, (UNDEF: 3)
    4c48:	63177eb0 	tstvs	r7, #176, 28	; 0xb00
    4c4c:	dcfc0100 	ldflee	f0, [ip]
    4c50:	03000000 	movweq	r0, #0
    4c54:	177ed091 			; <UNDEFINED> instruction: 0x177ed091
    4c58:	fd010065 	stc2	0, cr0, [r1, #-404]	; 0xfffffe6c
    4c5c:	000000dc 	ldrdeq	r0, [r0], -ip
    4c60:	7ef09103 	nrmvcs	f1, f3
    4c64:	01006617 	tsteq	r0, r7, lsl r6
    4c68:	0000dcfe 	strdeq	sp, [r0], -lr
    4c6c:	90910300 	addsls	r0, r1, r0, lsl #6
    4c70:	0067177f 	rsbeq	r1, r7, pc, ror r7
    4c74:	00dcff01 	sbcseq	pc, ip, r1, lsl #30
    4c78:	91030000 	mrsls	r0, (UNDEF: 3)
    4c7c:	681d7fb0 	ldmdavs	sp, {r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    4c80:	01000100 	mrseq	r0, (UNDEF: 16)
    4c84:	000000dc 	ldrdeq	r0, [r0], -ip
    4c88:	14509102 	ldrbne	r9, [r0], #-258	; 0x102
    4c8c:	08001dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip}
    4c90:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4c94:	0000096d 	andeq	r0, r0, sp, ror #18
    4c98:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4c9c:	01150075 	tsteq	r5, r5, ror r0
    4ca0:	00750251 	rsbseq	r0, r5, r1, asr r2
    4ca4:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4ca8:	1400007d 	strne	r0, [r0], #-125	; 0x7d
    4cac:	08001dd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, fp, ip}
    4cb0:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4cb4:	0000098e 	andeq	r0, r0, lr, lsl #19
    4cb8:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4cbc:	01150076 	tsteq	r5, r6, ror r0
    4cc0:	00760251 	rsbseq	r0, r6, r1, asr r2
    4cc4:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4cc8:	007eb091 			; <UNDEFINED> instruction: 0x007eb091
    4ccc:	001de214 	andseq	lr, sp, r4, lsl r2
    4cd0:	000db308 	andeq	fp, sp, r8, lsl #6
    4cd4:	0009b100 	andeq	fp, r9, r0, lsl #2
    4cd8:	52011500 	andpl	r1, r1, #0, 10
    4cdc:	00e07503 	rsceq	r7, r0, r3, lsl #10
    4ce0:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4ce4:	1500e075 	strne	lr, [r0, #-117]	; 0x75
    4ce8:	91035001 	tstls	r3, r1
    4cec:	14007ed0 	strne	r7, [r0], #-3792	; 0xed0
    4cf0:	08001dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, ip}
    4cf4:	00000df5 	strdeq	r0, [r0], -r5
    4cf8:	000009d4 	ldrdeq	r0, [r0], -r4
    4cfc:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    4d00:	157ed091 	ldrbne	sp, [lr, #-145]!	; 0x91
    4d04:	91035101 	tstls	r3, r1, lsl #2
    4d08:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    4d0c:	d0910350 	addsle	r0, r1, r0, asr r3
    4d10:	f614007e 			; <UNDEFINED> instruction: 0xf614007e
    4d14:	f508001d 			; <UNDEFINED> instruction: 0xf508001d
    4d18:	f500000d 			; <UNDEFINED> instruction: 0xf500000d
    4d1c:	15000009 	strne	r0, [r0, #-9]
    4d20:	76025201 	strvc	r5, [r2], -r1, lsl #4
    4d24:	51011500 	tstpl	r1, r0, lsl #10
    4d28:	15007502 	strne	r7, [r0, #-1282]	; 0x502
    4d2c:	91035001 	tstls	r3, r1
    4d30:	14007f90 	strne	r7, [r0], #-3984	; 0xf90
    4d34:	08001e00 	stmdaeq	r0, {r9, sl, fp, ip}
    4d38:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4d3c:	00000a18 	andeq	r0, r0, r8, lsl sl
    4d40:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    4d44:	157f9091 	ldrbne	r9, [pc, #-145]!	; 4cbb <__Stack_Size+0x44bb>
    4d48:	91035101 	tstls	r3, r1, lsl #2
    4d4c:	01157f90 			; <UNDEFINED> instruction: 0x01157f90
    4d50:	f0910350 			; <UNDEFINED> instruction: 0xf0910350
    4d54:	0a14007e 	beq	504f54 <__Stack_Size+0x504754>
    4d58:	1008001e 	andne	r0, r8, lr, lsl r0
    4d5c:	3a00000e 	bcc	4d9c <__Stack_Size+0x459c>
    4d60:	1500000a 	strne	r0, [r0, #-10]
    4d64:	7d025201 	sfmvc	f5, 4, [r2, #-4]
    4d68:	51011500 	tstpl	r1, r0, lsl #10
    4d6c:	7ef09103 	nrmvcs	f1, f3
    4d70:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4d74:	007ef091 			; <UNDEFINED> instruction: 0x007ef091
    4d78:	001e1414 	andseq	r1, lr, r4, lsl r4
    4d7c:	000e1008 	andeq	r1, lr, r8
    4d80:	000a5d00 	andeq	r5, sl, r0, lsl #26
    4d84:	52011500 	andpl	r1, r1, #0, 10
    4d88:	7eb09103 	asnvcs	f1, f3
    4d8c:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4d90:	157ef091 	ldrbne	pc, [lr, #-145]!	; 0x91	; <UNPREDICTABLE>
    4d94:	91035001 	tstls	r3, r1
    4d98:	14007ef0 	strne	r7, [r0], #-3824	; 0xef0
    4d9c:	08001e1e 	stmdaeq	r0, {r1, r2, r3, r4, r9, sl, fp, ip}
    4da0:	00000e10 	andeq	r0, r0, r0, lsl lr
    4da4:	00000a7f 	andeq	r0, r0, pc, ror sl
    4da8:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4dac:	0115007d 	tsteq	r5, sp, ror r0
    4db0:	b0910351 	addslt	r0, r1, r1, asr r3
    4db4:	5001157e 	andpl	r1, r1, lr, ror r5
    4db8:	7fb09103 	svcvc	0x00b09103
    4dbc:	1e281400 	cdpne	4, 2, cr1, cr8, cr0, {0}
    4dc0:	0e100800 	cdpeq	8, 1, cr0, cr0, cr0, {0}
    4dc4:	0aa20000 	beq	fe884dcc <BootRAM+0xd7f556d>
    4dc8:	01150000 	tsteq	r5, r0
    4dcc:	d0910352 	addsle	r0, r1, r2, asr r3
    4dd0:	5101157e 	tstpl	r1, lr, ror r5
    4dd4:	7fb09103 	svcvc	0x00b09103
    4dd8:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4ddc:	007f9091 			; <UNDEFINED> instruction: 0x007f9091
    4de0:	001e3014 	andseq	r3, lr, r4, lsl r0
    4de4:	000e4108 	andeq	r4, lr, r8, lsl #2
    4de8:	000abd00 	andeq	fp, sl, r0, lsl #26
    4dec:	51011500 	tstpl	r1, r0, lsl #10
    4df0:	7eb09103 	asnvcs	f1, f3
    4df4:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4df8:	14005091 	strne	r5, [r0], #-145	; 0x91
    4dfc:	08001e3a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl, fp, ip}
    4e00:	00000e10 	andeq	r0, r0, r0, lsl lr
    4e04:	00000add 	ldrdeq	r0, [r0], -sp
    4e08:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4e0c:	0115007d 	tsteq	r5, sp, ror r0
    4e10:	50910251 	addspl	r0, r1, r1, asr r2
    4e14:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4e18:	14005091 	strne	r5, [r0], #-145	; 0x91
    4e1c:	08001e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip}
    4e20:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4e24:	00000aff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4e28:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    4e2c:	157f9091 	ldrbne	r9, [pc, #-145]!	; 4da3 <__Stack_Size+0x45a3>
    4e30:	91035101 	tstls	r3, r1, lsl #2
    4e34:	01157ef0 			; <UNDEFINED> instruction: 0x01157ef0
    4e38:	00740250 	rsbseq	r0, r4, r0, asr r2
    4e3c:	1e501400 	cdpne	4, 5, cr1, cr0, cr0, {0}
    4e40:	0db30800 	ldceq	8, cr0, [r3]
    4e44:	0b200000 	bleq	804e4c <__Stack_Size+0x80464c>
    4e48:	01150000 	tsteq	r5, r0
    4e4c:	50910252 	addspl	r0, r1, r2, asr r2
    4e50:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4e54:	157fb091 	ldrbne	fp, [pc, #-145]!	; 4dcb <__Stack_Size+0x45cb>
    4e58:	74025001 	strvc	r5, [r2], #-1
    4e5c:	5c140020 	ldcpl	0, cr0, [r4], {32}
    4e60:	b308001e 	movwlt	r0, #32798	; 0x801e
    4e64:	4200000d 	andmi	r0, r0, #13
    4e68:	1500000b 	strne	r0, [r0, #-11]
    4e6c:	91025201 	tstls	r2, r1, lsl #4
    4e70:	51011550 	tstpl	r1, r0, asr r5
    4e74:	7ef09103 	nrmvcs	f1, f3
    4e78:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4e7c:	0000c074 	andeq	ip, r0, r4, ror r0
    4e80:	001e6818 	andseq	r6, lr, r8, lsl r8
    4e84:	000db308 	andeq	fp, sp, r8, lsl #6
    4e88:	52011500 	andpl	r1, r1, #0, 10
    4e8c:	7fb09103 	svcvc	0x00b09103
    4e90:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4e94:	157f9091 	ldrbne	r9, [pc, #-145]!	; 4e0b <__Stack_Size+0x460b>
    4e98:	74035001 	strvc	r5, [r3], #-1
    4e9c:	000000e0 	andeq	r0, r0, r0, ror #1
    4ea0:	0017a71e 	andseq	sl, r7, lr, lsl r7
    4ea4:	012a0100 	teqeq	sl, r0, lsl #2
    4ea8:	08001e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip}
    4eac:	00000084 	andeq	r0, r0, r4, lsl #1
    4eb0:	0d499c01 	stcleq	12, cr9, [r9, #-4]
    4eb4:	471f0000 	ldrmi	r0, [pc, -r0]
    4eb8:	01000017 	tsteq	r0, r7, lsl r0
    4ebc:	013f012a 	teqeq	pc, sl, lsr #2
    4ec0:	12140000 	andsne	r0, r4, #0
    4ec4:	70200000 	eorvc	r0, r0, r0
    4ec8:	012a0100 	teqeq	sl, r0, lsl #2
    4ecc:	00000145 	andeq	r0, r0, r5, asr #2
    4ed0:	00001240 	andeq	r1, r0, r0, asr #4
    4ed4:	01006520 	tsteq	r0, r0, lsr #10
    4ed8:	0111012b 	tsteq	r1, fp, lsr #2
    4edc:	126c0000 	rsbne	r0, ip, #0
    4ee0:	721d0000 	andsvc	r0, sp, #0
    4ee4:	012d0100 	teqeq	sp, r0, lsl #2
    4ee8:	000000a7 	andeq	r0, r0, r7, lsr #1
    4eec:	7de89103 	stfvcp	f1, [r8, #12]!
    4ef0:	01006921 	tsteq	r0, r1, lsr #18
    4ef4:	0073012e 	rsbseq	r0, r3, lr, lsr #2
    4ef8:	12980000 	addsne	r0, r8, #0
    4efc:	1c220000 	stcne	0, cr0, [r2], #-0
    4f00:	78000001 	stmdavc	r0, {r0}
    4f04:	0a08001e 	beq	204f84 <__Stack_Size+0x204784>
    4f08:	01000000 	mrseq	r0, (UNDEF: 0)
    4f0c:	0c090130 	stfeqs	f0, [r9], {48}	; 0x30
    4f10:	331a0000 	tstcc	sl, #0
    4f14:	06000001 	streq	r0, [r0], -r1
    4f18:	00772803 	rsbseq	r2, r7, r3, lsl #16
    4f1c:	28119f08 	ldmdacs	r1, {r3, r8, r9, sl, fp, ip, pc}
    4f20:	d0000001 	andle	r0, r0, r1
    4f24:	18000012 	stmdane	r0, {r1, r4}
    4f28:	08001e82 	stmdaeq	r0, {r1, r7, r9, sl, fp, ip}
    4f2c:	00000e91 	muleq	r0, r1, lr
    4f30:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4f34:	01158008 	tsteq	r5, r8
    4f38:	28030551 	stmdacs	r3, {r0, r4, r6, r8, sl}
    4f3c:	15080077 	strne	r0, [r8, #-119]	; 0x77
    4f40:	7d025001 	stcvc	0, cr5, [r2, #-4]
    4f44:	23000000 	movwcs	r0, #0
    4f48:	000003a8 	andeq	r0, r0, r8, lsr #7
    4f4c:	00000d09 	andeq	r0, r0, r9, lsl #26
    4f50:	74696221 	strbtvc	r6, [r9], #-545	; 0x221
    4f54:	01330100 	teqeq	r3, r0, lsl #2
    4f58:	00000117 	andeq	r0, r0, r7, lsl r1
    4f5c:	000012ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    4f60:	0100731d 	tsteq	r0, sp, lsl r3
    4f64:	00a70134 	adceq	r0, r7, r4, lsr r1
    4f68:	91030000 	mrsls	r0, (UNDEF: 3)
    4f6c:	96147ee8 	ldrls	r7, [r4], -r8, ror #29
    4f70:	c308001e 	movwgt	r0, #32798	; 0x801e
    4f74:	4a000008 	bmi	4f9c <__Stack_Size+0x479c>
    4f78:	1500000c 	strne	r0, [r0, #-12]
    4f7c:	7d025101 	stfvcs	f5, [r2, #-4]
    4f80:	50011500 	andpl	r1, r1, r0, lsl #10
    4f84:	00007d02 	andeq	r7, r0, r2, lsl #26
    4f88:	001ea414 	andseq	sl, lr, r4, lsl r4
    4f8c:	0005b908 	andeq	fp, r5, r8, lsl #18
    4f90:	000c6b00 	andeq	r6, ip, r0, lsl #22
    4f94:	52011500 	andpl	r1, r1, #0, 10
    4f98:	15007702 	strne	r7, [r0, #-1794]	; 0x702
    4f9c:	7d025101 	stfvcs	f5, [r2, #-4]
    4fa0:	50011500 	andpl	r1, r1, r0, lsl #10
    4fa4:	7ee89103 	urdvce	f1, f3
    4fa8:	1eb01400 	cdpne	4, 11, cr1, cr0, cr0, {0}
    4fac:	0e570800 	cdpeq	8, 5, cr0, cr7, cr0, {0}
    4fb0:	0c920000 	ldceq	0, cr0, [r2], {0}
    4fb4:	01150000 	tsteq	r5, r0
    4fb8:	00750253 	rsbseq	r0, r5, r3, asr r2
    4fbc:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    4fc0:	157ee891 	ldrbne	lr, [lr, #-2193]!	; 0x891
    4fc4:	7d025101 	stfvcs	f5, [r2, #-4]
    4fc8:	50011500 	andpl	r1, r1, r0, lsl #10
    4fcc:	00007d02 	andeq	r7, r0, r2, lsl #26
    4fd0:	001ebc14 	andseq	fp, lr, r4, lsl ip
    4fd4:	000e5708 	andeq	r5, lr, r8, lsl #14
    4fd8:	000cbb00 	andeq	fp, ip, r0, lsl #22
    4fdc:	53011500 	movwpl	r1, #5376	; 0x1500
    4fe0:	15007502 	strne	r7, [r0, #-1282]	; 0x502
    4fe4:	91035201 	tstls	r3, r1, lsl #4
    4fe8:	01157f88 	tsteq	r5, r8, lsl #31
    4fec:	88910351 	ldmhi	r1, {r0, r4, r6, r8, r9}
    4ff0:	5001157e 	andpl	r1, r1, lr, ror r5
    4ff4:	7e889103 	sinvce	f1, f3
    4ff8:	1ec81400 	cdpne	4, 12, cr1, cr8, cr0, {0}
    4ffc:	0e570800 	cdpeq	8, 5, cr0, cr7, cr0, {0}
    5000:	0ce30000 	stcleq	0, cr0, [r3]
    5004:	01150000 	tsteq	r5, r0
    5008:	00750253 	rsbseq	r0, r5, r3, asr r2
    500c:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    5010:	01154891 			; <UNDEFINED> instruction: 0x01154891
    5014:	c8910351 	ldmgt	r1, {r0, r4, r6, r8, r9}
    5018:	5001157e 	andpl	r1, r1, lr, ror r5
    501c:	7ec89103 	acsvce	f1, f3
    5020:	1ed61800 	cdpne	8, 13, cr1, cr6, cr0, {0}
    5024:	0e570800 	cdpeq	8, 5, cr0, cr7, cr0, {0}
    5028:	01150000 	tsteq	r5, r0
    502c:	00750253 	rsbseq	r0, r5, r3, asr r2
    5030:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    5034:	157fa891 	ldrbne	sl, [pc, #-2193]!	; 47ab <__Stack_Size+0x3fab>
    5038:	91035101 	tstls	r3, r1, lsl #2
    503c:	01157ea8 	tsteq	r5, r8, lsr #29
    5040:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    5044:	2400007e 	strcs	r0, [r0], #-126	; 0x7e
    5048:	0000011c 	andeq	r0, r0, ip, lsl r1
    504c:	08001eda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl, fp, ip}
    5050:	0000000a 	andeq	r0, r0, sl
    5054:	11013f01 	tstne	r1, r1, lsl #30
    5058:	00000133 	andeq	r0, r0, r3, lsr r1
    505c:	00001312 	andeq	r1, r0, r2, lsl r3
    5060:	00012811 	andeq	r2, r1, r1, lsl r8
    5064:	00134100 	andseq	r4, r3, r0, lsl #2
    5068:	1ee41800 	cdpne	8, 14, cr1, cr4, cr0, {0}
    506c:	0e910800 	cdpeq	8, 9, cr0, cr1, cr0, {0}
    5070:	01150000 	tsteq	r5, r0
    5074:	80080252 	andhi	r0, r8, r2, asr r2
    5078:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    507c:	0115007d 	tsteq	r5, sp, ror r0
    5080:	00780250 	rsbseq	r0, r8, r0, asr r2
    5084:	25000000 	strcs	r0, [r0, #-0]
    5088:	0000182e 	andeq	r1, r0, lr, lsr #16
    508c:	0d5a5701 	ldcleq	7, cr5, [sl, #-4]
    5090:	03050000 	movweq	r0, #20480	; 0x5000
    5094:	08007828 	stmdaeq	r0, {r3, r5, fp, ip, sp, lr}
    5098:	0000dc0d 	andeq	sp, r0, sp, lsl #24
    509c:	18382500 	ldmdane	r8!, {r8, sl, sp}
    50a0:	95010000 	strls	r0, [r1, #-0]
    50a4:	00000d5a 	andeq	r0, r0, sl, asr sp
    50a8:	77080305 	strvc	r0, [r8, -r5, lsl #6]
    50ac:	19260800 	stmdbne	r6!, {fp}
    50b0:	02000016 	andeq	r0, r0, #22
    50b4:	000d5a1c 	andeq	r5, sp, ip, lsl sl
    50b8:	18142700 	ldmdane	r4, {r8, r9, sl, sp}
    50bc:	14010000 	strne	r0, [r1], #-0
    50c0:	0000014b 	andeq	r0, r0, fp, asr #2
    50c4:	77a80305 	strvc	r0, [r8, r5, lsl #6]!
    50c8:	d3270800 	teqle	r7, #0, 16
    50cc:	01000017 	tsteq	r0, r7, lsl r0
    50d0:	00014b2a 	andeq	r4, r1, sl, lsr #22
    50d4:	28030500 	stmdacs	r3, {r8, sl}
    50d8:	28080077 	stmdacs	r8, {r0, r1, r2, r4, r5, r6}
    50dc:	000017b5 			; <UNDEFINED> instruction: 0x000017b5
    50e0:	0db31f02 	ldceq	15, cr1, [r3, #8]!
    50e4:	0b290000 	bleq	a450ec <__Stack_Size+0xa448ec>
    50e8:	29000001 	stmdbcs	r0, {r0}
    50ec:	0000008c 	andeq	r0, r0, ip, lsl #1
    50f0:	16f52800 	ldrbtne	r2, [r5], r0, lsl #16
    50f4:	44020000 	strmi	r0, [r2], #-0
    50f8:	00000dce 	andeq	r0, r0, lr, asr #27
    50fc:	00010b29 	andeq	r0, r1, r9, lsr #22
    5100:	01112900 	tsteq	r1, r0, lsl #18
    5104:	11290000 	teqne	r9, r0
    5108:	00000001 	andeq	r0, r0, r1
    510c:	00170a28 	andseq	r0, r7, r8, lsr #20
    5110:	e4510200 	ldrb	r0, [r1], #-512	; 0x200
    5114:	2900000d 	stmdbcs	r0, {r0, r2, r3}
    5118:	0000010b 	andeq	r0, r0, fp, lsl #2
    511c:	00011129 	andeq	r1, r1, r9, lsr #2
    5120:	e4280000 	strt	r0, [r8], #-0
    5124:	02000016 	andeq	r0, r0, #22
    5128:	000df528 	andeq	pc, sp, r8, lsr #10
    512c:	010b2900 	tsteq	fp, r0, lsl #18
    5130:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5134:	000015fc 	strdeq	r1, [r0], -ip
    5138:	0e103a02 	vnmlseq.f32	s6, s0, s4
    513c:	0b290000 	bleq	a45144 <__Stack_Size+0xa44944>
    5140:	29000001 	stmdbcs	r0, {r0}
    5144:	00000111 	andeq	r0, r0, r1, lsl r1
    5148:	00011129 	andeq	r1, r1, r9, lsr #2
    514c:	d4280000 	strtle	r0, [r8], #-0
    5150:	02000016 	andeq	r0, r0, #22
    5154:	000e2b3b 	andeq	r2, lr, fp, lsr fp
    5158:	010b2900 	tsteq	fp, r0, lsl #18
    515c:	11290000 	teqne	r9, r0
    5160:	29000001 	stmdbcs	r0, {r0}
    5164:	00000111 	andeq	r0, r0, r1, lsl r1
    5168:	17e32800 	strbne	r2, [r3, r0, lsl #16]!
    516c:	5a020000 	bpl	85174 <__Stack_Size+0x84974>
    5170:	00000e41 	andeq	r0, r0, r1, asr #28
    5174:	00010b29 	andeq	r0, r1, r9, lsr #22
    5178:	01112900 	tsteq	r1, r0, lsl #18
    517c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5180:	000017ef 	andeq	r1, r0, pc, ror #15
    5184:	0e573e02 	cdpeq	14, 5, cr3, cr7, cr2, {0}
    5188:	0b290000 	bleq	a45190 <__Stack_Size+0xa44990>
    518c:	29000001 	stmdbcs	r0, {r0}
    5190:	00000111 	andeq	r0, r0, r1, lsl r1
    5194:	171f2800 	ldrne	r2, [pc, -r0, lsl #16]
    5198:	33020000 	movwcc	r0, #8192	; 0x2000
    519c:	00000e77 	andeq	r0, r0, r7, ror lr
    51a0:	00010b29 	andeq	r0, r1, r9, lsr #22
    51a4:	01112900 	tsteq	r1, r0, lsl #18
    51a8:	11290000 	teqne	r9, r0
    51ac:	29000001 	stmdbcs	r0, {r0}
    51b0:	00000081 	andeq	r0, r0, r1, lsl #1
    51b4:	173d2a00 	ldrne	r2, [sp, -r0, lsl #20]!
    51b8:	2d020000 	stccs	0, cr0, [r2, #-0]
    51bc:	00000081 	andeq	r0, r0, r1, lsl #1
    51c0:	00000e91 	muleq	r0, r1, lr
    51c4:	00011129 	andeq	r1, r1, r9, lsr #2
    51c8:	01112900 	tsteq	r1, r0, lsl #18
    51cc:	2b000000 	blcs	51d4 <__Stack_Size+0x49d4>
    51d0:	0000174d 	andeq	r1, r0, sp, asr #14
    51d4:	0000009e 	muleq	r0, lr, r0
    51d8:	00000eae 	andeq	r0, r0, lr, lsr #29
    51dc:	00009e29 	andeq	r9, r0, r9, lsr #28
    51e0:	0eae2900 	cdpeq	9, 10, cr2, cr14, cr0, {0}
    51e4:	97290000 	strls	r0, [r9, -r0]!
    51e8:	00000000 	andeq	r0, r0, r0
    51ec:	0eb4040c 	cdpeq	4, 11, cr0, cr4, cr12, {0}
    51f0:	002c0000 	eoreq	r0, ip, r0
    51f4:	00000d46 	andeq	r0, r0, r6, asr #26
    51f8:	12930004 	addsne	r0, r3, #4
    51fc:	01040000 	mrseq	r0, (UNDEF: 4)
    5200:	00000639 	andeq	r0, r0, r9, lsr r6
    5204:	00185a01 	andseq	r5, r8, r1, lsl #20
    5208:	00089300 	andeq	r9, r8, r0, lsl #6
    520c:	00046000 	andeq	r6, r4, r0
    5210:	00000000 	andeq	r0, r0, r0
    5214:	0015cf00 	andseq	ip, r5, r0, lsl #30
    5218:	06010200 	streq	r0, [r1], -r0, lsl #4
    521c:	0000081a 	andeq	r0, r0, sl, lsl r8
    5220:	000c4003 	andeq	r4, ip, r3
    5224:	371c0400 	ldrcc	r0, [ip, -r0, lsl #8]
    5228:	02000000 	andeq	r0, r0, #0
    522c:	08180801 	ldmdaeq	r8, {r0, fp}
    5230:	02020000 	andeq	r0, r2, #0
    5234:	0006fc05 	andeq	pc, r6, r5, lsl #24
    5238:	07020200 	streq	r0, [r2, -r0, lsl #4]
    523c:	00000949 	andeq	r0, r0, r9, asr #18
    5240:	da050402 	ble	146250 <__Stack_Size+0x145a50>
    5244:	02000004 	andeq	r0, r0, #4
    5248:	02520704 	subseq	r0, r2, #4, 14	; 0x100000
    524c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5250:	0004d505 	andeq	sp, r4, r5, lsl #10
    5254:	18d80300 	ldmne	r8, {r8, r9}^
    5258:	4e040000 	cdpmi	0, 0, cr0, cr4, cr0, {0}
    525c:	0000006c 	andeq	r0, r0, ip, rrx
    5260:	4d070802 	stcmi	8, cr0, [r7, #-8]
    5264:	04000002 	streq	r0, [r0], #-2
    5268:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    526c:	04020074 	streq	r0, [r2], #-116	; 0x74
    5270:	00025707 	andeq	r5, r2, r7, lsl #14
    5274:	0c420300 	mcrreq	3, 0, r0, r2, cr0
    5278:	2a050000 	bcs	145280 <__Stack_Size+0x144a80>
    527c:	0000002c 	andeq	r0, r0, ip, lsr #32
    5280:	0018da03 	andseq	sp, r8, r3, lsl #20
    5284:	614e0500 	cmpvs	lr, r0, lsl #10
    5288:	03000000 	movweq	r0, #0
    528c:	00000b1f 	andeq	r0, r0, pc, lsl fp
    5290:	007ad406 	rsbseq	sp, sl, r6, lsl #8
    5294:	04020000 	streq	r0, [r2], #-0
    5298:	00078b07 	andeq	r8, r7, r7, lsl #22
    529c:	02040500 	andeq	r0, r4, #0, 10
    52a0:	08210801 	stmdaeq	r1!, {r0, fp}
    52a4:	09060000 	stmdbeq	r6, {}	; <UNPREDICTABLE>
    52a8:	80000018 	andhi	r0, r0, r8, lsl r0
    52ac:	00e72003 	rsceq	r2, r7, r3
    52b0:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
    52b4:	e7210300 	str	r0, [r1, -r0, lsl #6]!
    52b8:	00000000 	andeq	r0, r0, r0
    52bc:	03007907 	movweq	r7, #2311	; 0x907
    52c0:	0000e722 	andeq	lr, r0, r2, lsr #14
    52c4:	74072000 	strvc	r2, [r7], #-0
    52c8:	e7230300 	str	r0, [r3, -r0, lsl #6]!
    52cc:	40000000 	andmi	r0, r0, r0
    52d0:	03007a07 	movweq	r7, #2567	; 0xa07
    52d4:	0000e724 	andeq	lr, r0, r4, lsr #14
    52d8:	08006000 	stmdaeq	r0, {sp, lr}
    52dc:	00000081 	andeq	r0, r0, r1, lsl #1
    52e0:	000000f7 	strdeq	r0, [r0], -r7
    52e4:	0000a209 	andeq	sl, r0, r9, lsl #4
    52e8:	06001f00 	streq	r1, [r0], -r0, lsl #30
    52ec:	00001949 	andeq	r1, r0, r9, asr #18
    52f0:	0e140240 	cdpeq	2, 1, cr0, cr4, cr0, {2}
    52f4:	07000001 	streq	r0, [r0, -r1]
    52f8:	15020068 	strne	r0, [r2, #-104]	; 0x68
    52fc:	0000010e 	andeq	r0, r0, lr, lsl #2
    5300:	8c080000 	stchi	0, cr0, [r8], {-0}
    5304:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    5308:	09000001 	stmdbeq	r0, {r0}
    530c:	000000a2 	andeq	r0, r0, r2, lsr #1
    5310:	640a0007 	strvs	r0, [sl], #-7
    5314:	02000019 	andeq	r0, r0, #25
    5318:	0134031c 	teqeq	r4, ip, lsl r3
    531c:	730b0000 	movwvc	r0, #45056	; 0xb000
    5320:	341c0200 	ldrcc	r0, [ip], #-512	; 0x200
    5324:	00000001 	andeq	r0, r0, r1
    5328:	00f7040c 	rscseq	r0, r7, ip, lsl #8
    532c:	690a0000 	stmdbvs	sl, {}	; <UNPREDICTABLE>
    5330:	03000018 	movweq	r0, #24
    5334:	0150033e 	cmpeq	r0, lr, lsr r3
    5338:	650b0000 	strvs	r0, [fp, #-0]
    533c:	503e0300 	eorspl	r0, lr, r0, lsl #6
    5340:	00000001 	andeq	r0, r0, r1
    5344:	0081040c 	addeq	r0, r1, ip, lsl #8
    5348:	af0d0000 	svcge	0x000d0000
    534c:	01000018 	tsteq	r0, r8, lsl r0
    5350:	001ef015 	andseq	pc, lr, r5, lsl r0	; <UNPREDICTABLE>
    5354:	00005408 	andeq	r5, r0, r8, lsl #8
    5358:	129c0100 	addsne	r0, ip, #0, 2
    535c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    5360:	000018ba 			; <UNDEFINED> instruction: 0x000018ba
    5364:	01501501 	cmpeq	r0, r1, lsl #10
    5368:	13620000 	cmnne	r2, #0
    536c:	ca0e0000 	bgt	385374 <__Stack_Size+0x384b74>
    5370:	01000018 	tsteq	r0, r8, lsl r0
    5374:	00021215 	andeq	r1, r2, r5, lsl r2
    5378:	00138e00 	andseq	r8, r3, r0, lsl #28
    537c:	00730f00 	rsbseq	r0, r3, r0, lsl #30
    5380:	00f71701 	rscseq	r1, r7, r1, lsl #14
    5384:	91030000 	mrsls	r0, (UNDEF: 3)
    5388:	1e107fa8 	cdpne	15, 1, cr7, cr0, cr8, {5}
    538c:	f2000001 	vhadd.s8	d0, d0, d1
    5390:	0008001e 	andeq	r0, r8, lr, lsl r0
    5394:	01000004 	tsteq	r0, r4
    5398:	0001b319 	andeq	fp, r1, r9, lsl r3
    539c:	012a1100 	teqeq	sl, r0, lsl #2
    53a0:	13ba0000 			; <UNDEFINED> instruction: 0x13ba0000
    53a4:	12000000 	andne	r0, r0, #0
    53a8:	0000013a 	andeq	r0, r0, sl, lsr r1
    53ac:	08001f26 	stmdaeq	r0, {r1, r2, r5, r8, r9, sl, fp, ip}
    53b0:	00000014 	andeq	r0, r0, r4, lsl r0
    53b4:	01d01c01 	bicseq	r1, r0, r1, lsl #24
    53b8:	46110000 	ldrmi	r0, [r1], -r0
    53bc:	e8000001 	stmda	r0, {r0}
    53c0:	00000013 	andeq	r0, r0, r3, lsl r0
    53c4:	001f1a13 	andseq	r1, pc, r3, lsl sl	; <UNPREDICTABLE>
    53c8:	000bb708 	andeq	fp, fp, r8, lsl #14
    53cc:	0001f000 	andeq	pc, r1, r0
    53d0:	52011400 	andpl	r1, r1, #0, 8
    53d4:	14200802 	strtne	r0, [r0], #-2050	; 0x802
    53d8:	77025101 	strvc	r5, [r2, -r1, lsl #2]
    53dc:	50011400 	andpl	r1, r1, r0, lsl #8
    53e0:	00007d02 	andeq	r7, r0, r2, lsl #26
    53e4:	001f2615 	andseq	r2, pc, r5, lsl r6	; <UNPREDICTABLE>
    53e8:	000bd208 	andeq	sp, fp, r8, lsl #4
    53ec:	53011400 	movwpl	r1, #5120	; 0x1400
    53f0:	14400802 	strbne	r0, [r0], #-2050	; 0x802
    53f4:	30015201 	andcc	r5, r1, r1, lsl #4
    53f8:	02510114 	subseq	r0, r1, #20, 2
    53fc:	01140076 	tsteq	r4, r6, ror r0
    5400:	007d0250 	rsbseq	r0, sp, r0, asr r2
    5404:	040c0000 	streq	r0, [ip], #-0
    5408:	00000218 	andeq	r0, r0, r8, lsl r2
    540c:	00008116 	andeq	r8, r0, r6, lsl r1
    5410:	19250d00 	stmdbne	r5!, {r8, sl, fp}
    5414:	42010000 	andmi	r0, r1, #0
    5418:	08001f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, ip}
    541c:	0000009c 	muleq	r0, ip, r0
    5420:	03919c01 	orrseq	r9, r1, #256	; 0x100
    5424:	c30e0000 	movwgt	r0, #57344	; 0xe000
    5428:	01000018 	tsteq	r0, r8, lsl r0
    542c:	00015042 	andeq	r5, r1, r2, asr #32
    5430:	00140900 	andseq	r0, r4, r0, lsl #18
    5434:	184f0e00 	stmdane	pc, {r9, sl, fp}^	; <UNPREDICTABLE>
    5438:	43010000 	movwmi	r0, #4096	; 0x1000
    543c:	00000150 	andeq	r0, r0, r0, asr r1
    5440:	00001435 	andeq	r1, r0, r5, lsr r4
    5444:	0018ec0e 	andseq	lr, r8, lr, lsl #24
    5448:	73430100 	movtvc	r0, #12544	; 0x3100
    544c:	61000000 	mrsvs	r0, (UNDEF: 0)
    5450:	0e000014 	mcreq	0, 0, r0, cr0, cr4, {0}
    5454:	0000191d 	andeq	r1, r0, sp, lsl r9
    5458:	02124401 	andseq	r4, r2, #16777216	; 0x1000000
    545c:	148d0000 	strne	r0, [sp], #0
    5460:	6c170000 	ldcvs	0, cr0, [r7], {-0}
    5464:	01006e65 	tsteq	r0, r5, ror #28
    5468:	00009744 	andeq	r9, r0, r4, asr #14
    546c:	0014cf00 	andseq	ip, r4, r0, lsl #30
    5470:	00730f00 	rsbseq	r0, r3, r0, lsl #30
    5474:	00f74601 	rscseq	r4, r7, r1, lsl #12
    5478:	91030000 	mrsls	r0, (UNDEF: 3)
    547c:	1e107fa0 	cdpne	15, 1, cr7, cr0, cr0, {5}
    5480:	48000001 	stmdami	r0, {r0}
    5484:	2008001f 	andcs	r0, r8, pc, lsl r0
    5488:	01000004 	tsteq	r0, r4
    548c:	0002a748 	andeq	sl, r2, r8, asr #14
    5490:	012a1100 	teqeq	sl, r0, lsl #2
    5494:	14ef0000 	strbtne	r0, [pc], #0	; 549c <__Stack_Size+0x4c9c>
    5498:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    549c:	08001f86 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, fp, ip}
    54a0:	00000034 	andeq	r0, r0, r4, lsr r0
    54a4:	00000323 	andeq	r0, r0, r3, lsr #6
    54a8:	01006919 	tsteq	r0, r9, lsl r9
    54ac:	0000974e 	andeq	r9, r0, lr, asr #14
    54b0:	00151e00 	andseq	r1, r5, r0, lsl #28
    54b4:	1f8c1300 	svcne	0x008c1300
    54b8:	0bf80800 	bleq	ffe074c0 <BootRAM+0xed77c61>
    54bc:	02d50000 	sbcseq	r0, r5, #0
    54c0:	01140000 	tsteq	r4, r0
    54c4:	00740252 	rsbseq	r0, r4, r2, asr r2
    54c8:	1f941300 	svcne	0x00941300
    54cc:	0c1c0800 	ldceq	8, cr0, [ip], {-0}
    54d0:	02ef0000 	rsceq	r0, pc, #0
    54d4:	01140000 	tsteq	r4, r0
    54d8:	00760251 	rsbseq	r0, r6, r1, asr r2
    54dc:	02500114 	subseq	r0, r0, #20, 2
    54e0:	1300007d 	movwne	r0, #125	; 0x7d
    54e4:	08001fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp, ip}
    54e8:	00000c1c 	andeq	r0, r0, ip, lsl ip
    54ec:	0000030f 	andeq	r0, r0, pc, lsl #6
    54f0:	08510114 	ldmdaeq	r1, {r2, r4, r8}^
    54f4:	00750079 	rsbseq	r0, r5, r9, ror r0
    54f8:	1c800822 	stcne	8, cr0, [r0], {34}	; 0x22
    54fc:	02500114 	subseq	r0, r0, #20, 2
    5500:	1500007d 	strne	r0, [r0, #-125]	; 0x7d
    5504:	08001fba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl, fp, ip}
    5508:	00000bb7 			; <UNDEFINED> instruction: 0x00000bb7
    550c:	05520114 	ldrbeq	r0, [r2, #-276]	; 0x114
    5510:	00770078 	rsbseq	r0, r7, r8, ror r0
    5514:	13000022 	movwne	r0, #34	; 0x22
    5518:	08001f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, ip}
    551c:	00000bf8 	strdeq	r0, [r0], -r8
    5520:	00000346 	andeq	r0, r0, r6, asr #6
    5524:	02520114 	subseq	r0, r2, #20, 2
    5528:	01140077 	tsteq	r4, r7, ror r0
    552c:	00790251 	rsbseq	r0, r9, r1, asr r2
    5530:	05500114 	ldrbeq	r0, [r0, #-276]	; 0x114
    5534:	00780076 	rsbseq	r0, r8, r6, ror r0
    5538:	c6130022 	ldrgt	r0, [r3], -r2, lsr #32
    553c:	d208001f 	andle	r0, r8, #31
    5540:	6b00000b 	blvs	5574 <__Stack_Size+0x4d74>
    5544:	14000003 	strne	r0, [r0], #-3
    5548:	08025301 	stmdaeq	r2, {r0, r8, r9, ip, lr}
    554c:	52011440 	andpl	r1, r1, #64, 8	; 0x40000000
    5550:	01143001 	tsteq	r4, r1
    5554:	00760251 	rsbseq	r0, r6, r1, asr r2
    5558:	02500114 	subseq	r0, r0, #20, 2
    555c:	1500007d 	strne	r0, [r0, #-125]	; 0x7d
    5560:	08001fd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, fp, ip}
    5564:	00000c32 	andeq	r0, r0, r2, lsr ip
    5568:	05530114 	ldrbeq	r0, [r3, #-276]	; 0x114
    556c:	00784803 	rsbseq	r4, r8, r3, lsl #16
    5570:	52011408 	andpl	r1, r1, #8, 8	; 0x8000000
    5574:	14400802 	strbne	r0, [r0], #-2050	; 0x802
    5578:	76025101 	strvc	r5, [r2], -r1, lsl #2
    557c:	50011400 	andpl	r1, r1, r0, lsl #8
    5580:	00007a02 	andeq	r7, r0, r2, lsl #20
    5584:	70701a00 	rsbsvc	r1, r0, r0, lsl #20
    5588:	01290100 	teqeq	r9, r0, lsl #2
    558c:	000003c3 	andeq	r0, r0, r3, asr #7
    5590:	0018d11b 	andseq	sp, r8, fp, lsl r1
    5594:	50290100 	eorpl	r0, r9, r0, lsl #2
    5598:	0b000001 	bleq	55a4 <__Stack_Size+0x4da4>
    559c:	29010070 	stmdbcs	r1, {r4, r5, r6}
    55a0:	000003c3 	andeq	r0, r0, r3, asr #7
    55a4:	0100781c 	tsteq	r0, ip, lsl r8
    55a8:	0000e72b 	andeq	lr, r0, fp, lsr #14
    55ac:	00791c00 	rsbseq	r1, r9, r0, lsl #24
    55b0:	00e72c01 	rsceq	r2, r7, r1, lsl #24
    55b4:	0c000000 	stceq	0, cr0, [r0], {-0}
    55b8:	0003c904 	andeq	ip, r3, r4, lsl #18
    55bc:	00b21600 	adcseq	r1, r2, r0, lsl #12
    55c0:	360d0000 	strcc	r0, [sp], -r0
    55c4:	01000019 	tsteq	r0, r9, lsl r0
    55c8:	001fe032 	andseq	lr, pc, r2, lsr r0	; <UNPREDICTABLE>
    55cc:	00002c08 	andeq	r2, r0, r8, lsl #24
    55d0:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
    55d4:	17000004 	strne	r0, [r0, -r4]
    55d8:	32010072 	andcc	r0, r1, #114	; 0x72
    55dc:	00000150 	andeq	r0, r0, r0, asr r1
    55e0:	00001547 	andeq	r1, r0, r7, asr #10
    55e4:	01006b17 	tsteq	r0, r7, lsl fp
    55e8:	00021232 	andeq	r1, r2, r2, lsr r2
    55ec:	00157300 	andseq	r7, r5, r0, lsl #6
    55f0:	00700f00 	rsbseq	r0, r0, r0, lsl #30
    55f4:	00b23401 	adcseq	r3, r2, r1, lsl #8
    55f8:	91030000 	mrsls	r0, (UNDEF: 3)
    55fc:	91127ef8 			; <UNDEFINED> instruction: 0x91127ef8
    5600:	f0000003 			; <UNDEFINED> instruction: 0xf0000003
    5604:	1408001f 	strne	r0, [r8], #-31
    5608:	01000000 	mrseq	r0, (UNDEF: 0)
    560c:	00048b37 	andeq	r8, r4, r7, lsr fp
    5610:	03a71100 			; <UNDEFINED> instruction: 0x03a71100
    5614:	159f0000 	ldrne	r0, [pc]	; 561c <__Stack_Size+0x4e1c>
    5618:	9c110000 	ldcls	0, cr0, [r1], {-0}
    561c:	dc000003 	stcle	0, cr0, [r0], {3}
    5620:	1d000015 	stcne	0, cr0, [r0, #-84]	; 0xffffffac
    5624:	08001ff0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5628:	00000014 	andeq	r0, r0, r4, lsl r0
    562c:	0003b01e 	andeq	fp, r3, lr, lsl r0
    5630:	b8910300 	ldmlt	r1, {r8, r9}
    5634:	03b91e7e 			; <UNDEFINED> instruction: 0x03b91e7e
    5638:	91030000 	mrsls	r0, (UNDEF: 3)
    563c:	fa137ed8 	blx	4e51a4 <__Stack_Size+0x4e49a4>
    5640:	5208001f 	andpl	r0, r8, #31
    5644:	6c00000c 	stcvs	0, cr0, [r0], {12}
    5648:	14000004 	strne	r0, [r0], #-4
    564c:	91035201 	tstls	r3, r1, lsl #4
    5650:	01147ef8 			; <UNDEFINED> instruction: 0x01147ef8
    5654:	d8910351 	ldmle	r1, {r0, r4, r6, r8, r9}
    5658:	5001147e 	andpl	r1, r1, lr, ror r4
    565c:	00007d02 	andeq	r7, r0, r2, lsl #26
    5660:	00200415 	eoreq	r0, r0, r5, lsl r4
    5664:	000c6d08 	andeq	r6, ip, r8, lsl #26
    5668:	52011400 	andpl	r1, r1, #0, 8
    566c:	7ed89103 	atnvce	f1, f3
    5670:	02510114 	subseq	r0, r1, #20, 2
    5674:	0114007d 	tsteq	r4, sp, ror r0
    5678:	00740250 	rsbseq	r0, r4, r0, asr r2
    567c:	15000000 	strne	r0, [r0, #-0]
    5680:	08001ff0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5684:	00000c88 	andeq	r0, r0, r8, lsl #25
    5688:	03520114 	cmpeq	r2, #20, 2
    568c:	145101f3 	ldrbne	r0, [r1], #-499	; 0x1f3
    5690:	91035001 	tstls	r3, r1
    5694:	00007ef8 	strdeq	r7, [r0], -r8
    5698:	000c821f 	andeq	r8, ip, pc, lsl r2
    569c:	0c3a0100 	ldfeqs	f0, [sl], #-0
    56a0:	18080020 	stmdane	r8, {r5}
    56a4:	01000000 	mrseq	r0, (UNDEF: 0)
    56a8:	0005189c 	muleq	r5, ip, r8
    56ac:	75701700 	ldrbvc	r1, [r0, #-1792]!	; 0x700
    56b0:	3a010062 	bcc	45840 <__Stack_Size+0x45040>
    56b4:	00000150 	andeq	r0, r0, r0, asr r1
    56b8:	000015fd 	strdeq	r1, [r0], -sp
    56bc:	0018ca0e 	andseq	ip, r8, lr, lsl #20
    56c0:	123a0100 	eorsne	r0, sl, #0, 2
    56c4:	1b000002 	blne	56d4 <__Stack_Size+0x4ed4>
    56c8:	20000016 	andcs	r0, r0, r6, lsl r0
    56cc:	000018ba 			; <UNDEFINED> instruction: 0x000018ba
    56d0:	05183c01 	ldreq	r3, [r8, #-3073]	; 0xc01
    56d4:	91030000 	mrsls	r0, (UNDEF: 3)
    56d8:	18137fb8 	ldmdane	r3, {r3, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    56dc:	56080020 	strpl	r0, [r8], -r0, lsr #32
    56e0:	01000001 	tsteq	r0, r1
    56e4:	14000005 	strne	r0, [r0], #-5
    56e8:	f3035101 	vrhadd.u8	d5, d3, d1
    56ec:	01145101 	tsteq	r4, r1, lsl #2
    56f0:	007d0250 	rsbseq	r0, sp, r0, asr r2
    56f4:	20201500 	eorcs	r1, r0, r0, lsl #10
    56f8:	03ce0800 	biceq	r0, lr, #0, 16
    56fc:	01140000 	tsteq	r4, r0
    5700:	007d0251 	rsbseq	r0, sp, r1, asr r2
    5704:	02500114 	subseq	r0, r0, #20, 2
    5708:	00000074 	andeq	r0, r0, r4, ror r0
    570c:	00008108 	andeq	r8, r0, r8, lsl #2
    5710:	00052800 	andeq	r2, r5, r0, lsl #16
    5714:	00a20900 	adceq	r0, r2, r0, lsl #18
    5718:	003f0000 	eorseq	r0, pc, r0
    571c:	00193e0a 	andseq	r3, r9, sl, lsl #28
    5720:	01600100 	cmneq	r0, r0, lsl #2
    5724:	0000056a 	andeq	r0, r0, sl, ror #10
    5728:	01006b0b 	tsteq	r0, fp, lsl #22
    572c:	00015060 	andeq	r5, r1, r0, rrx
    5730:	18e31b00 	stmiane	r3!, {r8, r9, fp, ip}^
    5734:	60010000 	andvs	r0, r1, r0
    5738:	00000212 	andeq	r0, r0, r2, lsl r2
    573c:	00191d1b 	andseq	r1, r9, fp, lsl sp
    5740:	12610100 	rsbne	r0, r1, #0, 2
    5744:	0b000002 	bleq	5754 <__Stack_Size+0x4f54>
    5748:	006e656c 	rsbeq	r6, lr, ip, ror #10
    574c:	00976101 	addseq	r6, r7, r1, lsl #2
    5750:	77210000 	strvc	r0, [r1, -r0]!
    5754:	01000019 	tsteq	r0, r9, lsl r0
    5758:	00056a63 	andeq	r6, r5, r3, ror #20
    575c:	81080000 	mrshi	r0, (UNDEF: 8)
    5760:	7a000000 	bvc	5768 <__Stack_Size+0x4f68>
    5764:	09000005 	stmdbeq	r0, {r0, r2}
    5768:	000000a2 	andeq	r0, r0, r2, lsr #1
    576c:	180a007f 	stmdane	sl, {r0, r1, r2, r3, r4, r5, r6}
    5770:	01000019 	tsteq	r0, r9, lsl r0
    5774:	05c10169 	strbeq	r0, [r1, #361]	; 0x169
    5778:	7a0b0000 	bvc	2c5780 <__Stack_Size+0x2c4f80>
    577c:	50690100 	rsbpl	r0, r9, r0, lsl #2
    5780:	0b000001 	bleq	578c <__Stack_Size+0x4f8c>
    5784:	69010072 	stmdbvs	r1, {r1, r4, r5, r6}
    5788:	00000212 	andeq	r0, r0, r2, lsl r2
    578c:	0100610b 	tsteq	r0, fp, lsl #2
    5790:	00021269 	andeq	r1, r2, r9, ror #4
    5794:	006d0b00 	rsbeq	r0, sp, r0, lsl #22
    5798:	02126a01 	andseq	r6, r2, #4096	; 0x1000
    579c:	6c0b0000 	stcvs	0, cr0, [fp], {-0}
    57a0:	01006e65 	tsteq	r0, r5, ror #28
    57a4:	0000976a 	andeq	r9, r0, sl, ror #14
    57a8:	19772100 	ldmdbne	r7!, {r8, sp}^
    57ac:	6c010000 	stcvs	0, cr0, [r1], {-0}
    57b0:	0000056a 	andeq	r0, r0, sl, ror #10
    57b4:	0d5a1f00 	ldcleq	15, cr1, [sl, #-0]
    57b8:	73010000 	movwvc	r0, #4096	; 0x1000
    57bc:	08002024 	stmdaeq	r0, {r2, r5, sp}
    57c0:	000000c0 	andeq	r0, r0, r0, asr #1
    57c4:	08049c01 	stmdaeq	r4, {r0, sl, fp, ip, pc}
    57c8:	070e0000 	streq	r0, [lr, -r0]
    57cc:	0100000b 	tsteq	r0, fp
    57d0:	00015073 	andeq	r5, r1, r3, ror r0
    57d4:	00163c00 	andseq	r3, r6, r0, lsl #24
    57d8:	75701700 	ldrbvc	r1, [r0, #-1792]!	; 0x700
    57dc:	73010062 	movwvc	r0, #4194	; 0x1062
    57e0:	00000212 	andeq	r0, r0, r2, lsl r2
    57e4:	00001675 	andeq	r1, r0, r5, ror r6
    57e8:	0018ca0e 	andseq	ip, r8, lr, lsl #20
    57ec:	12740100 	rsbsne	r0, r4, #0, 2
    57f0:	a1000002 	tstge	r0, r2
    57f4:	0e000016 	mcreq	0, 0, r0, cr0, cr6, {0}
    57f8:	0000191d 	andeq	r1, r0, sp, lsl r9
    57fc:	02127501 	andseq	r7, r2, #4194304	; 0x400000
    5800:	16c20000 	strbne	r0, [r2], r0
    5804:	6c170000 	ldcvs	0, cr0, [r7], {-0}
    5808:	01006e65 	tsteq	r0, r5, ror #28
    580c:	00009775 	andeq	r9, r0, r5, ror r7
    5810:	0016ee00 	andseq	lr, r6, r0, lsl #28
    5814:	18ba2000 	ldmne	sl!, {sp}
    5818:	77010000 	strvc	r0, [r1, -r0]
    581c:	00000518 	andeq	r0, r0, r8, lsl r5
    5820:	7ea09103 	tanvcs	f1, f3
    5824:	0100650f 	tsteq	r0, pc, lsl #10
    5828:	0000e778 	andeq	lr, r0, r8, ror r7
    582c:	c0910300 	addsgt	r0, r1, r0, lsl #6
    5830:	00730f7d 	rsbseq	r0, r3, sp, ror pc
    5834:	00e77901 	rsceq	r7, r7, r1, lsl #18
    5838:	91030000 	mrsls	r0, (UNDEF: 3)
    583c:	6b0f7ee0 	blvs	3e53c4 <__Stack_Size+0x3e4bc4>
    5840:	e77a0100 	ldrb	r0, [sl, -r0, lsl #2]!
    5844:	03000000 	movweq	r0, #0
    5848:	0f7de091 	svceq	0x007de091
    584c:	7b01007a 	blvc	45a3c <__Stack_Size+0x4523c>
    5850:	000000e7 	andeq	r0, r0, r7, ror #1
    5854:	7e809103 	sinvcs	f1, f3
    5858:	00052810 	andeq	r2, r5, r0, lsl r8
    585c:	00203200 	eoreq	r3, r0, r0, lsl #4
    5860:	00044808 	andeq	r4, r4, r8, lsl #16
    5864:	d57f0100 	ldrble	r0, [pc, #-256]!	; 576c <__Stack_Size+0x4f6c>
    5868:	11000006 	tstne	r0, r6
    586c:	00000553 	andeq	r0, r0, r3, asr r5
    5870:	0000170e 	andeq	r1, r0, lr, lsl #14
    5874:	00054811 	andeq	r4, r5, r1, lsl r8
    5878:	00172100 	andseq	r2, r7, r0, lsl #2
    587c:	053d1100 	ldreq	r1, [sp, #-256]!	; 0x100
    5880:	17420000 	strbne	r0, [r2, -r0]
    5884:	34110000 	ldrcc	r0, [r1], #-0
    5888:	7e000005 	cdpvc	0, 0, cr0, cr0, cr5, {0}
    588c:	22000017 	andcs	r0, r0, #23
    5890:	00000448 	andeq	r0, r0, r8, asr #8
    5894:	00055e1e 	andeq	r5, r5, lr, lsl lr
    5898:	e0910300 	adds	r0, r1, r0, lsl #6
    589c:	2058157e 	subscs	r1, r8, lr, ror r5
    58a0:	021d0800 	andseq	r0, sp, #0, 16
    58a4:	01140000 	tsteq	r4, r0
    58a8:	00760253 	rsbseq	r0, r6, r3, asr r2
    58ac:	02520114 	subseq	r0, r2, #20, 2
    58b0:	01142008 	tsteq	r4, r8
    58b4:	70740251 	rsbsvc	r0, r4, r1, asr r2
    58b8:	03500114 	cmpeq	r0, #20, 2
    58bc:	147de091 	ldrbtne	lr, [sp], #-145	; 0x91
    58c0:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    58c4:	00000077 	andeq	r0, r0, r7, ror r0
    58c8:	057a1200 	ldrbeq	r1, [sl, #-512]!	; 0x200
    58cc:	20600000 	rsbcs	r0, r0, r0
    58d0:	00400800 	subeq	r0, r0, r0, lsl #16
    58d4:	82010000 	andhi	r0, r1, #0
    58d8:	00000754 	andeq	r0, r0, r4, asr r7
    58dc:	0005aa11 	andeq	sl, r5, r1, lsl sl
    58e0:	0017ed00 	andseq	lr, r7, r0, lsl #26
    58e4:	05a11100 	streq	r1, [r1, #256]!	; 0x100
    58e8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    58ec:	98110000 	ldmdals	r1, {}	; <UNPREDICTABLE>
    58f0:	21000005 	tstcs	r0, r5
    58f4:	11000018 	tstne	r0, r8, lsl r0
    58f8:	0000058f 	andeq	r0, r0, pc, lsl #11
    58fc:	00001842 	andeq	r1, r0, r2, asr #16
    5900:	00058611 	andeq	r8, r5, r1, lsl r6
    5904:	00187000 	andseq	r7, r8, r0
    5908:	20601d00 	rsbcs	r1, r0, r0, lsl #26
    590c:	00400800 	subeq	r0, r0, r0, lsl #16
    5910:	b51e0000 	ldrlt	r0, [lr, #-0]
    5914:	03000005 	movweq	r0, #5
    5918:	157ee091 	ldrbne	lr, [lr, #-145]!	; 0x91
    591c:	080020a0 	stmdaeq	r0, {r5, r7, sp}
    5920:	0000021d 	andeq	r0, r0, sp, lsl r2
    5924:	02530114 	subseq	r0, r3, #20, 2
    5928:	01140076 	tsteq	r4, r6, ror r0
    592c:	40080252 	andmi	r0, r8, r2, asr r2
    5930:	03510114 	cmpeq	r1, #20, 2
    5934:	147ee091 	ldrbtne	lr, [lr], #-145	; 0x91
    5938:	91035001 	tstls	r3, r1
    593c:	02147e80 	andseq	r7, r4, #128, 28	; 0x800
    5940:	7702007d 	smlsdxvc	r2, sp, r0, r0
    5944:	00000000 	andeq	r0, r0, r0
    5948:	00203e13 	eoreq	r3, r0, r3, lsl lr
    594c:	00015608 	andeq	r5, r1, r8, lsl #12
    5950:	00077000 	andeq	r7, r7, r0
    5954:	51011400 	tstpl	r1, r0, lsl #8
    5958:	5201f303 	andpl	pc, r1, #201326592	; 0xc000000
    595c:	03500114 	cmpeq	r0, #20, 2
    5960:	007ea091 			; <UNDEFINED> instruction: 0x007ea091
    5964:	00206013 	eoreq	r6, r0, r3, lsl r0
    5968:	0003ce08 	andeq	ip, r3, r8, lsl #28
    596c:	00078b00 	andeq	r8, r7, r0, lsl #22
    5970:	51011400 	tstpl	r1, r0, lsl #8
    5974:	7de09103 	stfvcp	f1, [r0, #12]!
    5978:	02500114 	subseq	r0, r0, #20, 2
    597c:	13000078 	movwne	r0, #120	; 0x78
    5980:	080020ac 	stmdaeq	r0, {r2, r3, r5, r7, sp}
    5984:	00000c32 	andeq	r0, r0, r2, lsr ip
    5988:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
    598c:	05530114 	ldrbeq	r0, [r3, #-276]	; 0x114
    5990:	00784803 	rsbseq	r4, r8, r3, lsl #16
    5994:	52011408 	andpl	r1, r1, #8, 8	; 0x8000000
    5998:	14200802 	strtne	r0, [r0], #-2050	; 0x802
    599c:	91035101 	tstls	r3, r1, lsl #2
    59a0:	01147ea0 	tsteq	r4, r0, lsr #29
    59a4:	c0910350 	addsgt	r0, r1, r0, asr r3
    59a8:	b813007d 	ldmdalt	r3, {r0, r2, r3, r4, r5, r6}
    59ac:	a3080020 	movwge	r0, #32800	; 0x8020
    59b0:	e200000c 	and	r0, r0, #12
    59b4:	14000007 	strne	r0, [r0], #-7
    59b8:	03055301 	movweq	r5, #21249	; 0x5301
    59bc:	08007848 	stmdaeq	r0, {r3, r6, fp, ip, sp, lr}
    59c0:	03520114 	cmpeq	r2, #20, 2
    59c4:	147dc091 	ldrbtne	ip, [sp], #-145	; 0x91
    59c8:	91035101 	tstls	r3, r1, lsl #2
    59cc:	01147e80 	tsteq	r4, r0, lsl #29
    59d0:	e0910350 	adds	r0, r1, r0, asr r3
    59d4:	c215007e 	andsgt	r0, r5, #126	; 0x7e
    59d8:	c3080020 	movwgt	r0, #32800	; 0x8020
    59dc:	1400000c 	strne	r0, [r0], #-12
    59e0:	03055201 	movweq	r5, #20993	; 0x5201
    59e4:	08007848 	stmdaeq	r0, {r3, r6, fp, ip, sp, lr}
    59e8:	03510114 	cmpeq	r1, #20, 2
    59ec:	147de091 	ldrbtne	lr, [sp], #-145	; 0x91
    59f0:	91035001 	tstls	r3, r1
    59f4:	00007ee0 	andeq	r7, r0, r0, ror #29
    59f8:	70707523 	rsbsvc	r7, r0, r3, lsr #10
    59fc:	811f0100 	tsthi	pc, r0, lsl #2
    5a00:	01000000 	mrseq	r0, (UNDEF: 0)
    5a04:	00000845 	andeq	r0, r0, r5, asr #16
    5a08:	0100700b 	tsteq	r0, fp
    5a0c:	0008451f 	andeq	r4, r8, pc, lsl r5
    5a10:	18d11b00 	ldmne	r1, {r8, r9, fp, ip}^
    5a14:	1f010000 	svcne	0x00010000
    5a18:	00000212 	andeq	r0, r0, r2, lsl r2
    5a1c:	0100781c 	tsteq	r0, ip, lsl r8
    5a20:	0000e721 	andeq	lr, r0, r1, lsr #14
    5a24:	00791c00 	rsbseq	r1, r9, r0, lsl #24
    5a28:	00e72201 	rsceq	r2, r7, r1, lsl #4
    5a2c:	6f1c0000 	svcvs	0x001c0000
    5a30:	2301006b 	movwcs	r0, #4203	; 0x106b
    5a34:	00000081 	andeq	r0, r0, r1, lsl #1
    5a38:	b2040c00 	andlt	r0, r4, #0, 24
    5a3c:	24000000 	strcs	r0, [r0], #-0
    5a40:	00001956 	andeq	r1, r0, r6, asr r9
    5a44:	00818a01 	addeq	r8, r1, r1, lsl #20
    5a48:	20e40000 	rsccs	r0, r4, r0
    5a4c:	00c00800 	sbceq	r0, r0, r0, lsl #16
    5a50:	9c010000 	stcls	0, cr0, [r1], {-0}
    5a54:	00000b86 	andeq	r0, r0, r6, lsl #23
    5a58:	000b070e 	andeq	r0, fp, lr, lsl #14
    5a5c:	128a0100 	addne	r0, sl, #0, 2
    5a60:	c6000002 	strgt	r0, [r0], -r2
    5a64:	17000018 	smladne	r0, r8, r0, r0
    5a68:	00627570 	rsbeq	r7, r2, r0, ror r5
    5a6c:	02128a01 	andseq	r8, r2, #4096	; 0x1000
    5a70:	18e40000 	stmiane	r4!, {}^	; <UNPREDICTABLE>
    5a74:	1d0e0000 	stcne	0, cr0, [lr, #-0]
    5a78:	01000019 	tsteq	r0, r9, lsl r0
    5a7c:	0002128b 	andeq	r1, r2, fp, lsl #5
    5a80:	00190200 	andseq	r0, r9, r0, lsl #4
    5a84:	656c1700 	strbvs	r1, [ip, #-1792]!	; 0x700
    5a88:	8b01006e 	blhi	45c48 <__Stack_Size+0x45448>
    5a8c:	00000097 	muleq	r0, r7, r0
    5a90:	0000192e 	andeq	r1, r0, lr, lsr #18
    5a94:	0100700f 	tsteq	r0, pc
    5a98:	0000b28d 	andeq	fp, r0, sp, lsl #5
    5a9c:	e8910300 	ldm	r1, {r8, r9}
    5aa0:	00710f7d 	rsbseq	r0, r1, sp, ror pc
    5aa4:	00b28e01 	adcseq	r8, r2, r1, lsl #28
    5aa8:	91030000 	mrsls	r0, (UNDEF: 3)
    5aac:	6c0f7ee8 	stcvs	14, cr7, [pc], {232}	; 0xe8
    5ab0:	01007368 	tsteq	r0, r8, ror #6
    5ab4:	0000e78f 	andeq	lr, r0, pc, lsl #15
    5ab8:	c8910300 	ldmgt	r1, {r8, r9}
    5abc:	68720f7c 	ldmdavs	r2!, {r2, r3, r4, r5, r6, r8, r9, sl, fp}^
    5ac0:	90010073 	andls	r0, r1, r3, ror r0
    5ac4:	000000e7 	andeq	r0, r0, r7, ror #1
    5ac8:	7ce89103 	stfvcp	f1, [r8], #12
    5acc:	01007a0f 	tsteq	r0, pc, lsl #20
    5ad0:	0000e791 	muleq	r0, r1, r7
    5ad4:	88910300 	ldmhi	r1, {r8, r9}
    5ad8:	6b6f197d 	blvs	1bcc0d4 <__Stack_Size+0x1bcb8d4>
    5adc:	81920100 	orrshi	r0, r2, r0, lsl #2
    5ae0:	5b000000 	blpl	5ae8 <__Stack_Size+0x52e8>
    5ae4:	12000019 	andne	r0, r0, #25
    5ae8:	0000057a 	andeq	r0, r0, sl, ror r5
    5aec:	080020f0 	stmdaeq	r0, {r4, r5, r6, r7, sp}
    5af0:	00000042 	andeq	r0, r0, r2, asr #32
    5af4:	09749501 	ldmdbeq	r4!, {r0, r8, sl, ip, pc}^
    5af8:	aa110000 	bge	445b00 <__Stack_Size+0x445300>
    5afc:	90000005 	andls	r0, r0, r5
    5b00:	11000019 	tstne	r0, r9, lsl r0
    5b04:	000005a1 	andeq	r0, r0, r1, lsr #11
    5b08:	000019bd 			; <UNDEFINED> instruction: 0x000019bd
    5b0c:	00059811 	andeq	r9, r5, r1, lsl r8
    5b10:	0019e900 	andseq	lr, r9, r0, lsl #18
    5b14:	058f1100 	streq	r1, [pc, #256]	; 5c1c <__Stack_Size+0x541c>
    5b18:	1a070000 	bne	1c5b20 <__Stack_Size+0x1c5320>
    5b1c:	86110000 	ldrhi	r0, [r1], -r0
    5b20:	25000005 	strcs	r0, [r0, #-5]
    5b24:	1d00001a 	stcne	0, cr0, [r0, #-104]	; 0xffffff98
    5b28:	080020f0 	stmdaeq	r0, {r4, r5, r6, r7, sp}
    5b2c:	00000042 	andeq	r0, r0, r2, asr #32
    5b30:	0005b51e 	andeq	fp, r5, lr, lsl r5
    5b34:	e8910300 	ldm	r1, {r8, r9}
    5b38:	2132157e 	teqcs	r2, lr, ror r5
    5b3c:	021d0800 	andseq	r0, sp, #0, 16
    5b40:	01140000 	tsteq	r4, r0
    5b44:	01f30353 	mvnseq	r0, r3, asr r3
    5b48:	52011452 	andpl	r1, r1, #1375731712	; 0x52000000
    5b4c:	14400802 	strbne	r0, [r0], #-2050	; 0x802
    5b50:	91035101 	tstls	r3, r1, lsl #2
    5b54:	01147ee8 	tsteq	r4, r8, ror #29
    5b58:	88910350 	ldmhi	r1, {r4, r6, r8, r9}
    5b5c:	7d02147d 	cfstrsvc	mvf1, [r2, #-500]	; 0xfffffe0c
    5b60:	01f30300 	mvnseq	r0, r0, lsl #6
    5b64:	00000053 	andeq	r0, r0, r3, asr r0
    5b68:	00080412 	andeq	r0, r8, r2, lsl r4
    5b6c:	00213a00 	eoreq	r3, r1, r0, lsl #20
    5b70:	00001608 	andeq	r1, r0, r8, lsl #12
    5b74:	fe9b0100 	cdp2	1, 9, cr0, cr11, cr0, {0}
    5b78:	25000009 	strcs	r0, [r0, #-9]
    5b7c:	0000081d 	andeq	r0, r0, sp, lsl r8
    5b80:	14115701 	ldrne	r5, [r1], #-1793	; 0x701
    5b84:	6d000008 	stcvs	0, cr0, [r0, #-32]	; 0xffffffe0
    5b88:	1d00001a 	stcne	0, cr0, [r0, #-104]	; 0xffffff98
    5b8c:	0800213a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sp}
    5b90:	00000016 	andeq	r0, r0, r6, lsl r0
    5b94:	0008281e 	andeq	r2, r8, lr, lsl r8
    5b98:	c8910300 	ldmgt	r1, {r8, r9}
    5b9c:	08311e7d 	ldmdaeq	r1!, {r0, r2, r3, r4, r5, r6, r9, sl, fp, ip}
    5ba0:	91030000 	mrsls	r0, (UNDEF: 3)
    5ba4:	3a267ee8 	bcc	9a574c <__Stack_Size+0x9a4f4c>
    5ba8:	e7000008 	str	r0, [r0, -r8]
    5bac:	1300001a 	movwne	r0, #26
    5bb0:	08002144 	stmdaeq	r0, {r2, r6, r8, sp}
    5bb4:	00000cde 	ldrdeq	r0, [r0], -lr
    5bb8:	000009dd 	ldrdeq	r0, [r0], -sp
    5bbc:	02520114 	subseq	r0, r2, #20, 2
    5bc0:	01140077 	tsteq	r4, r7, ror r0
    5bc4:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    5bc8:	5001147e 	andpl	r1, r1, lr, ror r4
    5bcc:	7dc89103 	stfvcp	f1, [r8, #12]
    5bd0:	21501500 	cmpcs	r0, r0, lsl #10
    5bd4:	0cfd0800 	ldcleq	8, cr0, [sp]
    5bd8:	01140000 	tsteq	r4, r0
    5bdc:	e8910352 	ldm	r1, {r1, r4, r6, r8, r9}
    5be0:	5101147e 	tstpl	r1, lr, ror r4
    5be4:	7dc89103 	stfvcp	f1, [r8, #12]
    5be8:	03500114 	cmpeq	r0, #20, 2
    5bec:	007de891 			; <UNDEFINED> instruction: 0x007de891
    5bf0:	04120000 	ldreq	r0, [r2], #-0
    5bf4:	5a000008 	bpl	5c1c <__Stack_Size+0x541c>
    5bf8:	16080021 	strne	r0, [r8], -r1, lsr #32
    5bfc:	01000000 	mrseq	r0, (UNDEF: 0)
    5c00:	000a889d 	muleq	sl, sp, r8
    5c04:	081d2500 	ldmdaeq	sp, {r8, sl, sp}
    5c08:	56010000 	strpl	r0, [r1], -r0
    5c0c:	00081411 	andeq	r1, r8, r1, lsl r4
    5c10:	001b0500 	andseq	r0, fp, r0, lsl #10
    5c14:	215a1d00 	cmpcs	sl, r0, lsl #26
    5c18:	00160800 	andseq	r0, r6, r0, lsl #16
    5c1c:	281e0000 	ldmdacs	lr, {}	; <UNPREDICTABLE>
    5c20:	03000008 	movweq	r0, #8
    5c24:	1e7da891 	mrcne	8, 3, sl, cr13, cr1, {4}
    5c28:	00000831 	andeq	r0, r0, r1, lsr r8
    5c2c:	7dc89103 	stfvcp	f1, [r8, #12]
    5c30:	00083a26 	andeq	r3, r8, r6, lsr #20
    5c34:	001b4d00 	andseq	r4, fp, r0, lsl #26
    5c38:	21641300 	cmncs	r4, r0, lsl #6
    5c3c:	0cde0800 	ldcleq	8, cr0, [lr], {0}
    5c40:	0a670000 	beq	19c5c48 <__Stack_Size+0x19c5448>
    5c44:	01140000 	tsteq	r4, r0
    5c48:	00760252 	rsbseq	r0, r6, r2, asr r2
    5c4c:	03510114 	cmpeq	r1, #20, 2
    5c50:	147dc891 	ldrbtne	ip, [sp], #-2193	; 0x891
    5c54:	91035001 	tstls	r3, r1
    5c58:	15007da8 	strne	r7, [r0, #-3496]	; 0xda8
    5c5c:	08002170 	stmdaeq	r0, {r4, r5, r6, r8, sp}
    5c60:	00000cfd 	strdeq	r0, [r0], -sp
    5c64:	03520114 	cmpeq	r2, #20, 2
    5c68:	147dc891 	ldrbtne	ip, [sp], #-2193	; 0x891
    5c6c:	91035101 	tstls	r3, r1, lsl #2
    5c70:	01147da8 	tsteq	r4, r8, lsr #27
    5c74:	e8910350 	ldm	r1, {r4, r6, r8, r9}
    5c78:	0000007e 	andeq	r0, r0, lr, ror r0
    5c7c:	00039112 	andeq	r9, r3, r2, lsl r1
    5c80:	00217a00 	eoreq	r7, r1, r0, lsl #20
    5c84:	00001408 	andeq	r1, r0, r8, lsl #8
    5c88:	0c9f0100 	ldfeqs	f0, [pc], {0}
    5c8c:	1100000b 	tstne	r0, fp
    5c90:	000003a7 	andeq	r0, r0, r7, lsr #7
    5c94:	00001b6b 	andeq	r1, r0, fp, ror #22
    5c98:	00039c11 	andeq	r9, r3, r1, lsl ip
    5c9c:	001b9a00 	andseq	r9, fp, r0, lsl #20
    5ca0:	217a1d00 	cmncs	sl, r0, lsl #26
    5ca4:	00140800 	andseq	r0, r4, r0, lsl #16
    5ca8:	b01e0000 	andslt	r0, lr, r0
    5cac:	03000003 	movweq	r0, #3
    5cb0:	1e7da891 	mrcne	8, 3, sl, cr13, cr1, {4}
    5cb4:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    5cb8:	7dc89103 	stfvcp	f1, [r8, #12]
    5cbc:	00218413 	eoreq	r8, r1, r3, lsl r4
    5cc0:	000c5208 	andeq	r5, ip, r8, lsl #4
    5cc4:	000aeb00 	andeq	lr, sl, r0, lsl #22
    5cc8:	52011400 	andpl	r1, r1, #0, 8
    5ccc:	7de89103 	stfvcp	f1, [r8, #12]!
    5cd0:	03510114 	cmpeq	r1, #20, 2
    5cd4:	147dc891 	ldrbtne	ip, [sp], #-2193	; 0x891
    5cd8:	91035001 	tstls	r3, r1
    5cdc:	15007da8 	strne	r7, [r0, #-3496]	; 0xda8
    5ce0:	0800218e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sp}
    5ce4:	00000c6d 	andeq	r0, r0, sp, ror #24
    5ce8:	03520114 	cmpeq	r2, #20, 2
    5cec:	147dc891 	ldrbtne	ip, [sp], #-2193	; 0x891
    5cf0:	91035101 	tstls	r3, r1, lsl #2
    5cf4:	01147da8 	tsteq	r4, r8, lsr #27
    5cf8:	e8910350 	ldm	r1, {r4, r6, r8, r9}
    5cfc:	0000007c 	andeq	r0, r0, ip, ror r0
    5d00:	00213a13 	eoreq	r3, r1, r3, lsl sl
    5d04:	0003ce08 	andeq	ip, r3, r8, lsl #28
    5d08:	000b2700 	andeq	r2, fp, r0, lsl #14
    5d0c:	51011400 	tstpl	r1, r0, lsl #8
    5d10:	14007802 	strne	r7, [r0], #-2050	; 0x802
    5d14:	91035001 	tstls	r3, r1
    5d18:	13007cc8 	movwne	r7, #3272	; 0xcc8
    5d1c:	0800215a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sp}
    5d20:	00000c88 	andeq	r0, r0, r8, lsl #25
    5d24:	00000b4a 	andeq	r0, r0, sl, asr #22
    5d28:	03520114 	cmpeq	r2, #20, 2
    5d2c:	147d8891 	ldrbtne	r8, [sp], #-2193	; 0x891
    5d30:	91035101 	tstls	r3, r1, lsl #2
    5d34:	01147de8 	tsteq	r4, r8, ror #27
    5d38:	e8910350 	ldm	r1, {r4, r6, r8, r9}
    5d3c:	7a13007d 	bvc	4c5f38 <__Stack_Size+0x4c5738>
    5d40:	18080021 	stmdane	r8, {r0, r5}
    5d44:	6d00000d 	stcvs	0, cr0, [r0, #-52]	; 0xffffffcc
    5d48:	1400000b 	strne	r0, [r0], #-11
    5d4c:	91035201 	tstls	r3, r1, lsl #4
    5d50:	01147ee8 	tsteq	r4, r8, ror #29
    5d54:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    5d58:	5001147d 	andpl	r1, r1, sp, ror r4
    5d5c:	7de89103 	stfvcp	f1, [r8, #12]!
    5d60:	21961500 	orrscs	r1, r6, r0, lsl #10
    5d64:	0d330800 	ldceq	8, cr0, [r3, #-0]
    5d68:	01140000 	tsteq	r4, r0
    5d6c:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    5d70:	5001147c 	andpl	r1, r1, ip, ror r4
    5d74:	7cc89103 	stfvcp	f1, [r8], {3}
    5d78:	f8200000 			; <UNDEFINED> instruction: 0xf8200000
    5d7c:	01000018 	tsteq	r0, r8, lsl r0
    5d80:	000b970e 	andeq	r9, fp, lr, lsl #14
    5d84:	48030500 	stmdami	r3, {r8, sl}
    5d88:	16080078 			; <UNDEFINED> instruction: 0x16080078
    5d8c:	000000e7 	andeq	r0, r0, r7, ror #1
    5d90:	00181427 	andseq	r1, r8, r7, lsr #8
    5d94:	c9270300 	stmdbgt	r7!, {r8, r9}
    5d98:	27000003 	strcs	r0, [r0, -r3]
    5d9c:	00001884 	andeq	r1, r0, r4, lsl #17
    5da0:	0bb21902 	bleq	fec8c1b0 <BootRAM+0xdbfc951>
    5da4:	f7160000 			; <UNDEFINED> instruction: 0xf7160000
    5da8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5dac:	00001842 	andeq	r1, r0, r2, asr #16
    5db0:	0bd22b02 	bleq	ff4909c0 <BootRAM+0xe401161>
    5db4:	34290000 	strtcc	r0, [r9], #-0
    5db8:	29000001 	stmdbcs	r0, {r0}
    5dbc:	00000212 	andeq	r0, r0, r2, lsl r2
    5dc0:	00009729 	andeq	r9, r0, r9, lsr #14
    5dc4:	99280000 	stmdbls	r8!, {}	; <UNPREDICTABLE>
    5dc8:	02000018 	andeq	r0, r0, #24
    5dcc:	000bf231 	andeq	pc, fp, r1, lsr r2	; <UNPREDICTABLE>
    5dd0:	0bf22900 	bleq	ffc901d8 <BootRAM+0xec00979>
    5dd4:	50290000 	eorpl	r0, r9, r0
    5dd8:	29000001 	stmdbcs	r0, {r0}
    5ddc:	0000007a 	andeq	r0, r0, sl, ror r0
    5de0:	00007a29 	andeq	r7, r0, r9, lsr #20
    5de4:	040c0000 	streq	r0, [ip], #-0
    5de8:	00000bb2 			; <UNDEFINED> instruction: 0x00000bb2
    5dec:	00174d2a 	andseq	r4, r7, sl, lsr #26
    5df0:	0000a900 	andeq	sl, r0, r0, lsl #18
    5df4:	000c1500 	andeq	r1, ip, r0, lsl #10
    5df8:	00a92900 	adceq	r2, r9, r0, lsl #18
    5dfc:	15290000 	strne	r0, [r9, #-0]!
    5e00:	2900000c 	stmdbcs	r0, {r2, r3}
    5e04:	000000a2 	andeq	r0, r0, r2, lsr #1
    5e08:	1b040c00 	blne	108e10 <__Stack_Size+0x108610>
    5e0c:	2b00000c 	blcs	5e44 <__Stack_Size+0x5644>
    5e10:	00197028 	andseq	r7, r9, r8, lsr #32
    5e14:	32240200 	eorcc	r0, r4, #0, 4
    5e18:	2900000c 	stmdbcs	r0, {r2, r3}
    5e1c:	00000134 	andeq	r0, r0, r4, lsr r1
    5e20:	00021229 	andeq	r1, r2, r9, lsr #4
    5e24:	06280000 	strteq	r0, [r8], -r0
    5e28:	07000019 	smladeq	r0, r9, r0, r0
    5e2c:	000c5221 	andeq	r5, ip, r1, lsr #4
    5e30:	01502900 	cmpeq	r0, r0, lsl #18
    5e34:	12290000 	eorne	r0, r9, #0
    5e38:	29000002 	stmdbcs	r0, {r1}
    5e3c:	00000097 	muleq	r0, r7, r0
    5e40:	00021229 	andeq	r1, r2, r9, lsr #4
    5e44:	c1280000 	teqgt	r8, r0
    5e48:	03000017 	movweq	r0, #23
    5e4c:	000c6d2e 	andeq	r6, ip, lr, lsr #26
    5e50:	01502900 	cmpeq	r0, r0, lsl #18
    5e54:	50290000 	eorpl	r0, r9, r0
    5e58:	29000001 	stmdbcs	r0, {r0}
    5e5c:	000003c3 	andeq	r0, r0, r3, asr #7
    5e60:	17542800 	ldrbne	r2, [r4, -r0, lsl #16]
    5e64:	37030000 	strcc	r0, [r3, -r0]
    5e68:	00000c88 	andeq	r0, r0, r8, lsl #25
    5e6c:	00015029 	andeq	r5, r1, r9, lsr #32
    5e70:	02122900 	andseq	r2, r2, #0, 18
    5e74:	12290000 	eorne	r0, r9, #0
    5e78:	00000002 	andeq	r0, r0, r2
    5e7c:	0017a728 	andseq	sl, r7, r8, lsr #14
    5e80:	a34f0300 	movtge	r0, #62208	; 0xf300
    5e84:	2900000c 	stmdbcs	r0, {r2, r3}
    5e88:	00000845 	andeq	r0, r0, r5, asr #16
    5e8c:	0003c329 	andeq	ip, r3, r9, lsr #6
    5e90:	02122900 	andseq	r2, r2, #0, 18
    5e94:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5e98:	000018a4 	andeq	r1, r0, r4, lsr #17
    5e9c:	0cc34007 	stcleq	0, cr4, [r3], {7}
    5ea0:	50290000 	eorpl	r0, r9, r0
    5ea4:	29000001 	stmdbcs	r0, {r0}
    5ea8:	00000212 	andeq	r0, r0, r2, lsl r2
    5eac:	00021229 	andeq	r1, r2, r9, lsr #4
    5eb0:	02122900 	andseq	r2, r2, #0, 18
    5eb4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5eb8:	00001879 	andeq	r1, r0, r9, ror r8
    5ebc:	0cde3c07 	ldcleq	12, cr3, [lr], {7}
    5ec0:	50290000 	eorpl	r0, r9, r0
    5ec4:	29000001 	stmdbcs	r0, {r0}
    5ec8:	00000212 	andeq	r0, r0, r2, lsl r2
    5ecc:	00021229 	andeq	r1, r2, r9, lsr #4
    5ed0:	742c0000 	strtvc	r0, [ip], #-0
    5ed4:	03000017 	movweq	r0, #23
    5ed8:	00008138 	andeq	r8, r0, r8, lsr r1
    5edc:	000cfd00 	andeq	pc, ip, r0, lsl #26
    5ee0:	01502900 	cmpeq	r0, r0, lsl #18
    5ee4:	50290000 	eorpl	r0, r9, r0
    5ee8:	29000001 	stmdbcs	r0, {r0}
    5eec:	00000212 	andeq	r0, r0, r2, lsl r2
    5ef0:	17872800 	strne	r2, [r7, r0, lsl #16]
    5ef4:	2b030000 	blcs	c5efc <__Stack_Size+0xc56fc>
    5ef8:	00000d18 	andeq	r0, r0, r8, lsl sp
    5efc:	00084529 	andeq	r4, r8, r9, lsr #10
    5f00:	02122900 	andseq	r2, r2, #0, 18
    5f04:	12290000 	eorne	r0, r9, #0
    5f08:	00000002 	andeq	r0, r0, r2
    5f0c:	00176828 	andseq	r6, r7, r8, lsr #16
    5f10:	334c0300 	movtcc	r0, #49920	; 0xc300
    5f14:	2900000d 	stmdbcs	r0, {r0, r2, r3}
    5f18:	00000845 	andeq	r0, r0, r5, asr #16
    5f1c:	0003c329 	andeq	ip, r3, r9, lsr #6
    5f20:	03c32900 	biceq	r2, r3, #0, 18
    5f24:	2d000000 	stccs	0, cr0, [r0, #-0]
    5f28:	0000173d 	andeq	r1, r0, sp, lsr r7
    5f2c:	00812d08 	addeq	r2, r1, r8, lsl #26
    5f30:	12290000 	eorne	r0, r9, #0
    5f34:	29000002 	stmdbcs	r0, {r1}
    5f38:	00000212 	andeq	r0, r0, r2, lsl r2
    5f3c:	0fa30000 	svceq	0x00a30000
    5f40:	00040000 	andeq	r0, r4, r0
    5f44:	00001503 	andeq	r1, r0, r3, lsl #10
    5f48:	16360104 	ldrtne	r0, [r6], -r4, lsl #2
    5f4c:	91010000 	mrsls	r0, (UNDEF: 1)
    5f50:	93000019 	movwls	r0, #25
    5f54:	d8000008 	stmdale	r0, {r3}
    5f58:	00000005 	andeq	r0, r0, r5
    5f5c:	71000000 	mrsvc	r0, (UNDEF: 0)
    5f60:	02000018 	andeq	r0, r0, #24
    5f64:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    5f68:	40030000 	andmi	r0, r3, r0
    5f6c:	0300000c 	movweq	r0, #12
    5f70:	0000371c 	andeq	r3, r0, ip, lsl r7
    5f74:	08010200 	stmdaeq	r1, {r9}
    5f78:	00000818 	andeq	r0, r0, r8, lsl r8
    5f7c:	fc050202 	stc2	2, cr0, [r5], {2}
    5f80:	03000006 	movweq	r0, #6
    5f84:	00000b67 	andeq	r0, r0, r7, ror #22
    5f88:	00502603 	subseq	r2, r0, r3, lsl #12
    5f8c:	02020000 	andeq	r0, r2, #0
    5f90:	00094907 	andeq	r4, r9, r7, lsl #18
    5f94:	05040200 	streq	r0, [r4, #-512]	; 0x200
    5f98:	000004da 	ldrdeq	r0, [r0], -sl
    5f9c:	000b4e03 	andeq	r4, fp, r3, lsl #28
    5fa0:	69380300 	ldmdbvs	r8!, {r8, r9}
    5fa4:	02000000 	andeq	r0, r0, #0
    5fa8:	02520704 	subseq	r0, r2, #4, 14	; 0x100000
    5fac:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5fb0:	0004d505 	andeq	sp, r4, r5, lsl #10
    5fb4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    5fb8:	0000024d 	andeq	r0, r0, sp, asr #4
    5fbc:	69050404 	stmdbvs	r5, {r2, sl}
    5fc0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    5fc4:	02570704 	subseq	r0, r7, #4, 14	; 0x100000
    5fc8:	42030000 	andmi	r0, r3, #0
    5fcc:	0400000c 	streq	r0, [r0], #-12
    5fd0:	00002c2a 	andeq	r2, r0, sl, lsr #24
    5fd4:	0b690300 	bleq	1a46bdc <__Stack_Size+0x1a463dc>
    5fd8:	36040000 	strcc	r0, [r4], -r0
    5fdc:	00000045 	andeq	r0, r0, r5, asr #32
    5fe0:	000b5003 	andeq	r5, fp, r3
    5fe4:	5e420400 	cdppl	4, 4, cr0, cr2, cr0, {0}
    5fe8:	02000000 	andeq	r0, r0, #0
    5fec:	078b0704 	streq	r0, [fp, r4, lsl #14]
    5ff0:	04050000 	streq	r0, [r5], #-0
    5ff4:	21080102 	tstcs	r8, r2, lsl #2
    5ff8:	06000008 	streq	r0, [r0], -r8
    5ffc:	0000171f 	andeq	r1, r0, pc, lsl r7
    6000:	0a014b01 	beq	58c0c <__Stack_Size+0x5840c>
    6004:	07000001 	streq	r0, [r0, -r1]
    6008:	00747364 	rsbseq	r7, r4, r4, ror #6
    600c:	010a4b01 	tsteq	sl, r1, lsl #22
    6010:	84080000 	strhi	r0, [r8], #-0
    6014:	01000019 	tsteq	r0, r9, lsl r0
    6018:	0001104c 	andeq	r1, r1, ip, asr #32
    601c:	6e6f0700 	cdpvs	7, 6, cr0, cr15, cr0, {0}
    6020:	4c010065 	stcmi	0, cr0, [r1], {101}	; 0x65
    6024:	00000110 	andeq	r0, r0, r0, lsl r1
    6028:	0019b608 	andseq	fp, r9, r8, lsl #12
    602c:	8c4d0100 	stfhie	f0, [sp], {-0}
    6030:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    6034:	00000f18 	andeq	r0, r0, r8, lsl pc
    6038:	01164f01 	tsteq	r6, r1, lsl #30
    603c:	690a0000 	stmdbvs	sl, {}	; <UNPREDICTABLE>
    6040:	7e500100 	rdfvcs	f0, f0, f0
    6044:	00000000 	andeq	r0, r0, r0
    6048:	008c040b 	addeq	r0, ip, fp, lsl #8
    604c:	040b0000 	streq	r0, [fp], #-0
    6050:	00000116 	andeq	r0, r0, r6, lsl r1
    6054:	00008c0c 	andeq	r8, r0, ip, lsl #24
    6058:	15e20d00 	strbne	r0, [r2, #3328]!	; 0xd00
    605c:	22020000 	andcs	r0, r2, #0
    6060:	00013a03 	andeq	r3, r1, r3, lsl #20
    6064:	00780700 	rsbseq	r0, r8, r0, lsl #14
    6068:	010a2202 	tsteq	sl, r2, lsl #4
    606c:	61070000 	mrsvs	r0, (UNDEF: 7)
    6070:	10220200 	eorne	r0, r2, r0, lsl #4
    6074:	00000001 	andeq	r0, r0, r1
    6078:	0017b506 	andseq	fp, r7, r6, lsl #10
    607c:	010c0100 	mrseq	r0, (UNDEF: 28)
    6080:	00000162 	andeq	r0, r0, r2, ror #2
    6084:	01007807 	tsteq	r0, r7, lsl #16
    6088:	00010a0c 	andeq	r0, r1, ip, lsl #20
    608c:	00630700 	rsbeq	r0, r3, r0, lsl #14
    6090:	00a20c01 	adceq	r0, r2, r1, lsl #24
    6094:	690a0000 	stmdbvs	sl, {}	; <UNPREDICTABLE>
    6098:	7e0e0100 	adfvce	f0, f6, f0
    609c:	00000000 	andeq	r0, r0, r0
    60a0:	00013a0e 	andeq	r3, r1, lr, lsl #20
    60a4:	0021a400 	eoreq	sl, r1, r0, lsl #8
    60a8:	00001e08 	andeq	r1, r0, r8, lsl #28
    60ac:	ae9c0100 	fmlgee	f0, f4, f0
    60b0:	0f000001 	svceq	0x00000001
    60b4:	00000146 	andeq	r0, r0, r6, asr #2
    60b8:	00001be2 	andeq	r1, r0, r2, ror #23
    60bc:	00014f0f 	andeq	r4, r1, pc, lsl #30
    60c0:	001c1000 	andseq	r1, ip, r0
    60c4:	01581000 	cmpeq	r8, r0
    60c8:	1c620000 	stclne	0, cr0, [r2], #-0
    60cc:	c2110000 	andsgt	r0, r1, #0
    60d0:	8d080021 	stchi	0, cr0, [r8, #-132]	; 0xffffff7c
    60d4:	1200000f 	andne	r0, r0, #15
    60d8:	4c015201 	sfmmi	f5, 4, [r1], {1}
    60dc:	01510112 	cmpeq	r1, r2, lsl r1
    60e0:	50011230 	andpl	r1, r1, r0, lsr r2
    60e4:	5001f305 	andpl	pc, r1, r5, lsl #6
    60e8:	00000423 	andeq	r0, r0, r3, lsr #8
    60ec:	0016e413 	andseq	lr, r6, r3, lsl r4
    60f0:	c4190100 	ldrgt	r0, [r9], #-256	; 0x100
    60f4:	6e080021 	cdpvs	0, 0, cr0, cr8, cr1, {1}
    60f8:	01000000 	mrseq	r0, (UNDEF: 0)
    60fc:	00023d9c 	muleq	r2, ip, sp
    6100:	00781400 	rsbseq	r1, r8, r0, lsl #8
    6104:	010a1901 	tsteq	sl, r1, lsl #18
    6108:	50010000 	andpl	r0, r1, r0
    610c:	0019c015 	andseq	ip, r9, r5, lsl r0
    6110:	3d1b0100 	ldfccs	f0, [fp, #-0]
    6114:	02000002 	andeq	r0, r0, #2
    6118:	63165891 	tstvs	r6, #9502720	; 0x910000
    611c:	971c0100 	ldrls	r0, [ip, -r0, lsl #2]
    6120:	9a000000 	bls	6128 <__Stack_Size+0x5928>
    6124:	1600001c 			; <UNDEFINED> instruction: 0x1600001c
    6128:	1d010069 	stcne	0, cr0, [r1, #-420]	; 0xfffffe5c
    612c:	0000007e 	andeq	r0, r0, lr, ror r0
    6130:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
    6134:	0000bd17 	andeq	fp, r0, r7, lsl sp
    6138:	00220400 	eoreq	r0, r2, r0, lsl #8
    613c:	00049808 	andeq	r9, r4, r8, lsl #16
    6140:	0f390100 	svceq	0x00390100
    6144:	000000ea 	andeq	r0, r0, sl, ror #1
    6148:	00001d06 	andeq	r1, r0, r6, lsl #26
    614c:	0000df18 	andeq	sp, r0, r8, lsl pc
    6150:	0f500100 	svceq	0x00500100
    6154:	000000d4 	ldrdeq	r0, [r0], -r4
    6158:	00001d1d 	andeq	r1, r0, sp, lsl sp
    615c:	0000c918 	andeq	ip, r0, r8, lsl r9
    6160:	19500100 	ldmdbne	r0, {r8}^
    6164:	00000498 	muleq	r0, r8, r4
    6168:	0000f510 	andeq	pc, r0, r0, lsl r5	; <UNPREDICTABLE>
    616c:	001d3d00 	andseq	r3, sp, r0, lsl #26
    6170:	01001a00 	tsteq	r0, r0, lsl #20
    6174:	53010000 	movwpl	r0, #4096	; 0x1000
    6178:	1b000000 	blne	6180 <__Stack_Size+0x5980>
    617c:	0000008c 	andeq	r0, r0, ip, lsl #1
    6180:	0000024d 	andeq	r0, r0, sp, asr #4
    6184:	0000ad1c 	andeq	sl, r0, ip, lsl sp
    6188:	1d001f00 	stcne	15, cr1, [r0, #-0]
    618c:	0000173d 	andeq	r1, r0, sp, lsr r7
    6190:	008c3c01 	addeq	r3, ip, r1, lsl #24
    6194:	22340000 	eorscs	r0, r4, #0
    6198:	009a0800 	addseq	r0, sl, r0, lsl #16
    619c:	9c010000 	stcls	0, cr0, [r1], {-0}
    61a0:	0000029d 	muleq	r0, sp, r2
    61a4:	0100781e 	tsteq	r0, lr, lsl r8
    61a8:	0001103c 	andeq	r1, r1, ip, lsr r0
    61ac:	001d5000 	andseq	r5, sp, r0
    61b0:	00791e00 	rsbseq	r1, r9, r0, lsl #28
    61b4:	01103c01 	tsteq	r0, r1, lsl #24
    61b8:	1d7c0000 	ldclne	0, cr0, [ip, #-0]
    61bc:	73160000 	tstvc	r6, #0
    61c0:	01006d75 	tsteq	r0, r5, ror sp
    61c4:	00008c3e 	andeq	r8, r0, lr, lsr ip
    61c8:	001da800 	andseq	sl, sp, r0, lsl #16
    61cc:	00691600 	rsbeq	r1, r9, r0, lsl #12
    61d0:	007e3f01 	rsbseq	r3, lr, r1, lsl #30
    61d4:	1df00000 	ldclne	0, cr0, [r0]
    61d8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    61dc:	000000bd 	strheq	r0, [r0], -sp
    61e0:	080022d0 	stmdaeq	r0, {r4, r6, r7, r9, sp}
    61e4:	000000c2 	andeq	r0, r0, r2, asr #1
    61e8:	02e59c01 	rsceq	r9, r5, #256	; 0x100
    61ec:	c9180000 	ldmdbgt	r8, {}	; <UNPREDICTABLE>
    61f0:	01000000 	mrseq	r0, (UNDEF: 0)
    61f4:	00d40f50 	sbcseq	r0, r4, r0, asr pc
    61f8:	1e330000 	cdpne	0, 3, cr0, cr3, cr0, {0}
    61fc:	df0f0000 	svcle	0x000f0000
    6200:	5f000000 	svcpl	0x00000000
    6204:	0f00001e 	svceq	0x0000001e
    6208:	000000ea 	andeq	r0, r0, sl, ror #1
    620c:	00001e8b 	andeq	r1, r0, fp, lsl #29
    6210:	0000f510 	andeq	pc, r0, r0, lsl r5	; <UNPREDICTABLE>
    6214:	001eac00 	andseq	sl, lr, r0, lsl #24
    6218:	01001000 	mrseq	r1, (UNDEF: 0)
    621c:	1ed50000 	cdpne	0, 13, cr0, cr5, cr0, {0}
    6220:	13000000 	movwne	r0, #0
    6224:	000015fc 	strdeq	r1, [r0], -ip
    6228:	23945601 	orrscs	r5, r4, #1048576	; 0x100000
    622c:	00460800 	subeq	r0, r6, r0, lsl #16
    6230:	9c010000 	stcls	0, cr0, [r1], {-0}
    6234:	0000033a 	andeq	r0, r0, sl, lsr r3
    6238:	01007214 	tsteq	r0, r4, lsl r2
    623c:	00010a56 	andeq	r0, r1, r6, asr sl
    6240:	1e500100 	rdfnes	f0, f0, f0
    6244:	56010061 	strpl	r0, [r1], -r1, rrx
    6248:	00000110 	andeq	r0, r0, r0, lsl r1
    624c:	00001f00 	andeq	r1, r0, r0, lsl #30
    6250:	0100621e 	tsteq	r0, lr, lsl r2
    6254:	00011056 	andeq	r1, r1, r6, asr r0
    6258:	001f2100 	andseq	r2, pc, r0, lsl #2
    625c:	00631600 	rsbeq	r1, r3, r0, lsl #12
    6260:	00975801 	addseq	r5, r7, r1, lsl #16
    6264:	1f420000 	svcne	0x00420000
    6268:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
    626c:	7e590100 	rdfvce	f0, f1, f0
    6270:	86000000 	strhi	r0, [r0], -r0
    6274:	0000001f 	andeq	r0, r0, pc, lsl r0
    6278:	0016d406 	andseq	sp, r6, r6, lsl #8
    627c:	016d0100 	cmneq	sp, r0, lsl #2
    6280:	00000374 	andeq	r0, r0, r4, ror r3
    6284:	01007207 	tsteq	r0, r7, lsl #4
    6288:	00010a6d 	andeq	r0, r1, sp, ror #20
    628c:	00610700 	rsbeq	r0, r1, r0, lsl #14
    6290:	01106d01 	tsteq	r0, r1, lsl #26
    6294:	62070000 	andvs	r0, r7, #0
    6298:	106d0100 	rsbne	r0, sp, r0, lsl #2
    629c:	0a000001 	beq	62a8 <__Stack_Size+0x5aa8>
    62a0:	6f010063 	svcvs	0x00010063
    62a4:	000000a2 	andeq	r0, r0, r2, lsr #1
    62a8:	0100690a 	tsteq	r0, sl, lsl #18
    62ac:	00007e70 	andeq	r7, r0, r0, ror lr
    62b0:	3a0e0000 	bcc	3862b8 <__Stack_Size+0x385ab8>
    62b4:	dc000003 	stcle	0, cr0, [r0], {3}
    62b8:	4c080023 	stcmi	0, cr0, [r8], {35}	; 0x23
    62bc:	01000000 	mrseq	r0, (UNDEF: 0)
    62c0:	0003b39c 	muleq	r3, ip, r3
    62c4:	03461800 	movteq	r1, #26624	; 0x6800
    62c8:	50010000 	andpl	r0, r1, r0
    62cc:	00034f0f 	andeq	r4, r3, pc, lsl #30
    62d0:	001fd400 	andseq	sp, pc, r0, lsl #8
    62d4:	03580f00 	cmpeq	r8, #0, 30
    62d8:	1ff50000 	svcne	0x00f50000
    62dc:	61100000 	tstvs	r0, r0
    62e0:	16000003 	strne	r0, [r0], -r3
    62e4:	10000020 	andne	r0, r0, r0, lsr #32
    62e8:	0000036a 	andeq	r0, r0, sl, ror #6
    62ec:	00002041 	andeq	r2, r0, r1, asr #32
    62f0:	17ef1300 	strbne	r1, [pc, r0, lsl #6]!
    62f4:	85010000 	strhi	r0, [r1, #-0]
    62f8:	08002428 	stmdaeq	r0, {r3, r5, sl, sp}
    62fc:	00000046 	andeq	r0, r0, r6, asr #32
    6300:	03fb9c01 	mvnseq	r9, #256	; 0x100
    6304:	72140000 	andsvc	r0, r4, #0
    6308:	0a850100 	beq	fe146710 <BootRAM+0xd0b6eb1>
    630c:	01000001 	tsteq	r0, r1
    6310:	00611e50 	rsbeq	r1, r1, r0, asr lr
    6314:	01108501 	tsteq	r0, r1, lsl #10
    6318:	209b0000 	addscs	r0, fp, r0
    631c:	63160000 	tstvs	r6, #0
    6320:	a2870100 	addge	r0, r7, #0, 2
    6324:	bc000000 	stclt	0, cr0, [r0], {-0}
    6328:	16000020 	strne	r0, [r0], -r0, lsr #32
    632c:	88010069 	stmdahi	r1, {r0, r3, r5, r6}
    6330:	0000007e 	andeq	r0, r0, lr, ror r0
    6334:	000020e7 	andeq	r2, r0, r7, ror #1
    6338:	16f50600 	ldrbtne	r0, [r5], r0, lsl #12
    633c:	9d010000 	stcls	0, cr0, [r1, #-0]
    6340:	00044001 	andeq	r4, r4, r1
    6344:	00720700 	rsbseq	r0, r2, r0, lsl #14
    6348:	010a9d01 	tsteq	sl, r1, lsl #26
    634c:	61070000 	mrsvs	r0, (UNDEF: 7)
    6350:	109d0100 	addsne	r0, sp, r0, lsl #2
    6354:	07000001 	streq	r0, [r0, -r1]
    6358:	9d010062 	stcls	0, cr0, [r1, #-392]	; 0xfffffe78
    635c:	00000110 	andeq	r0, r0, r0, lsl r1
    6360:	0100630a 	tsteq	r0, sl, lsl #6
    6364:	0000a29f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    6368:	00690a00 	rsbeq	r0, r9, r0, lsl #20
    636c:	007ea001 	rsbseq	sl, lr, r1
    6370:	0a1f0000 	beq	7c6378 <__Stack_Size+0x7c5b78>
    6374:	a301006a 	movwge	r0, #4202	; 0x106a
    6378:	0000007e 	andeq	r0, r0, lr, ror r0
    637c:	fb0e0000 	blx	386386 <__Stack_Size+0x385b86>
    6380:	70000003 	andvc	r0, r0, r3
    6384:	88080024 	stmdahi	r8, {r2, r5}
    6388:	01000000 	mrseq	r0, (UNDEF: 0)
    638c:	0004929c 	muleq	r4, ip, r2
    6390:	04071800 	streq	r1, [r7], #-2048	; 0x800
    6394:	50010000 	andpl	r0, r1, r0
    6398:	0004100f 	andeq	r1, r4, pc
    639c:	00214100 	eoreq	r4, r1, r0, lsl #2
    63a0:	04190f00 	ldreq	r0, [r9], #-3840	; 0xf00
    63a4:	21620000 	cmncs	r2, r0
    63a8:	22100000 	andscs	r0, r0, #0
    63ac:	83000004 	movwhi	r0, #4
    63b0:	10000021 	andne	r0, r0, r1, lsr #32
    63b4:	0000042b 	andeq	r0, r0, fp, lsr #8
    63b8:	000021ad 	andeq	r2, r0, sp, lsr #3
    63bc:	00247a20 	eoreq	r7, r4, r0, lsr #20
    63c0:	00004a08 	andeq	r4, r0, r8, lsl #20
    63c4:	04351000 	ldrteq	r1, [r5], #-0
    63c8:	21fb0000 	mvnscs	r0, r0
    63cc:	00000000 	andeq	r0, r0, r0
    63d0:	0019ab13 	andseq	sl, r9, r3, lsl fp
    63d4:	00ba0100 	adcseq	r0, sl, r0, lsl #2
    63d8:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    63dc:	01000000 	mrseq	r0, (UNDEF: 0)
    63e0:	0005599c 	muleq	r5, ip, r9
    63e4:	00721e00 	rsbseq	r1, r2, r0, lsl #28
    63e8:	010aba01 	tsteq	sl, r1, lsl #20
    63ec:	224a0000 	subcs	r0, sl, #0
    63f0:	611e0000 	tstvs	lr, r0
    63f4:	10ba0100 	adcsne	r0, sl, r0, lsl #2
    63f8:	76000001 	strvc	r0, [r0], -r1
    63fc:	1e000022 	cdpne	0, 0, cr0, cr0, cr2, {1}
    6400:	ba010062 	blt	46590 <__Stack_Size+0x45d90>
    6404:	00000110 	andeq	r0, r0, r0, lsl r1
    6408:	00002297 	muleq	r0, r7, r2
    640c:	706d7421 	rsbvc	r7, sp, r1, lsr #8
    6410:	3dbc0100 	ldfccs	f0, [ip]
    6414:	02000002 	andeq	r0, r0, #2
    6418:	fb224891 	blx	898666 <__Stack_Size+0x897e66>
    641c:	00000003 	andeq	r0, r0, r3
    6420:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    6424:	01000004 	tsteq	r0, r4
    6428:	000536be 			; <UNDEFINED> instruction: 0x000536be
    642c:	04190f00 	ldreq	r0, [r9], #-3840	; 0xf00
    6430:	22b80000 	adcscs	r0, r8, #0
    6434:	100f0000 	andne	r0, pc, r0
    6438:	d9000004 	stmdble	r0, {r2}
    643c:	0f000022 	svceq	0x00000022
    6440:	00000407 	andeq	r0, r0, r7, lsl #8
    6444:	000022fa 	strdeq	r2, [r0], -sl
    6448:	0004b819 	andeq	fp, r4, r9, lsl r8
    644c:	04221000 	strteq	r1, [r2], #-0
    6450:	23270000 	teqcs	r7, #0
    6454:	2b100000 	blcs	40645c <__Stack_Size+0x405c5c>
    6458:	51000004 	tstpl	r0, r4
    645c:	20000023 	andcs	r0, r0, r3, lsr #32
    6460:	00000000 	andeq	r0, r0, r0
    6464:	00000048 	andeq	r0, r0, r8, asr #32
    6468:	00043510 	andeq	r3, r4, r0, lsl r5
    646c:	0023b200 	eoreq	fp, r3, r0, lsl #4
    6470:	00000000 	andeq	r0, r0, r0
    6474:	00011b23 	andeq	r1, r1, r3, lsr #22
    6478:	00000000 	andeq	r0, r0, r0
    647c:	00002600 	andeq	r2, r0, r0, lsl #12
    6480:	0fbf0100 	svceq	0x00bf0100
    6484:	00000130 	andeq	r0, r0, r0, lsr r1
    6488:	00002401 	andeq	r2, r0, r1, lsl #8
    648c:	0001270f 	andeq	r2, r1, pc, lsl #14
    6490:	00242e00 	eoreq	r2, r4, r0, lsl #28
    6494:	06000000 	streq	r0, [r0], -r0
    6498:	00001607 	andeq	r1, r0, r7, lsl #12
    649c:	9301c201 	movwls	ip, #4609	; 0x1201
    64a0:	07000005 	streq	r0, [r0, -r5]
    64a4:	c2010072 	andgt	r0, r1, #114	; 0x72
    64a8:	0000010a 	andeq	r0, r0, sl, lsl #2
    64ac:	01006107 	tsteq	r0, r7, lsl #2
    64b0:	000110c2 	andeq	r1, r1, r2, asr #1
    64b4:	00620700 	rsbeq	r0, r2, r0, lsl #14
    64b8:	00a2c201 	adceq	ip, r2, r1, lsl #4
    64bc:	630a0000 	movwvs	r0, #40960	; 0xa000
    64c0:	a2c40100 	sbcge	r0, r4, #0, 2
    64c4:	0a000000 	beq	64cc <__Stack_Size+0x5ccc>
    64c8:	c5010069 	strgt	r0, [r1, #-105]	; 0x69
    64cc:	0000007e 	andeq	r0, r0, lr, ror r0
    64d0:	05590e00 	ldrbeq	r0, [r9, #-3584]	; 0xe00
    64d4:	00000000 	andeq	r0, r0, r0
    64d8:	00400000 	subeq	r0, r0, r0
    64dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    64e0:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    64e4:	00056518 	andeq	r6, r5, r8, lsl r5
    64e8:	18500100 	ldmdane	r0, {r8}^
    64ec:	0000056e 	andeq	r0, r0, lr, ror #10
    64f0:	770f5101 	strvc	r5, [pc, -r1, lsl #2]
    64f4:	4f000005 	svcmi	0x00000005
    64f8:	10000024 	andne	r0, r0, r4, lsr #32
    64fc:	00000580 	andeq	r0, r0, r0, lsl #11
    6500:	00002470 	andeq	r2, r0, r0, ror r4
    6504:	00058910 	andeq	r8, r5, r0, lsl r9
    6508:	00249e00 	eoreq	r9, r4, r0, lsl #28
    650c:	0a130000 	beq	4c6514 <__Stack_Size+0x4c5d14>
    6510:	01000017 	tsteq	r0, r7, lsl r0
    6514:	0024f8d8 	ldrdeq	pc, [r4], -r8	; <UNPREDICTABLE>
    6518:	0005ea08 	andeq	lr, r5, r8, lsl #20
    651c:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    6520:	14000009 	strne	r0, [r0], #-9
    6524:	d8010072 	stmdale	r1, {r1, r4, r5, r6}
    6528:	0000010a 	andeq	r0, r0, sl, lsl #2
    652c:	781e5001 	ldmdavc	lr, {r0, ip, lr}
    6530:	10d80100 	sbcsne	r0, r8, r0, lsl #2
    6534:	ec000001 	stc	0, cr0, [r0], {1}
    6538:	21000024 	tstcs	r0, r4, lsr #32
    653c:	da010073 	ble	46710 <__Stack_Size+0x45f10>
    6540:	0000023d 	andeq	r0, r0, sp, lsr r2
    6544:	0a409102 	beq	102a954 <__Stack_Size+0x102a154>
    6548:	db010069 	blle	466f4 <__Stack_Size+0x45ef4>
    654c:	0000007e 	andeq	r0, r0, lr, ror r0
    6550:	0003fb22 	andeq	pc, r3, r2, lsr #22
    6554:	0024fc00 	eoreq	pc, r4, r0, lsl #24
    6558:	0004d008 	andeq	sp, r4, r8
    655c:	6cee0100 	stfvse	f0, [lr]
    6560:	0f000006 	svceq	0x00000006
    6564:	00000419 	andeq	r0, r0, r9, lsl r4
    6568:	0000250d 	andeq	r2, r0, sp, lsl #10
    656c:	0004100f 	andeq	r1, r4, pc
    6570:	00250d00 	eoreq	r0, r5, r0, lsl #26
    6574:	04070f00 	streq	r0, [r7], #-3840	; 0xf00
    6578:	252e0000 	strcs	r0, [lr, #-0]!
    657c:	d0190000 	andsle	r0, r9, r0
    6580:	10000004 	andne	r0, r0, r4
    6584:	00000422 	andeq	r0, r0, r2, lsr #8
    6588:	0000255b 	andeq	r2, r0, fp, asr r5
    658c:	00042b10 	andeq	r2, r4, r0, lsl fp
    6590:	00258500 	eoreq	r8, r5, r0, lsl #10
    6594:	25022000 	strcs	r2, [r2, #-0]
    6598:	00460800 	subeq	r0, r6, r0, lsl #16
    659c:	35100000 	ldrcc	r0, [r0, #-0]
    65a0:	e6000004 	str	r0, [r0], -r4
    65a4:	00000025 	andeq	r0, r0, r5, lsr #32
    65a8:	fb220000 	blx	8865b2 <__Stack_Size+0x885db2>
    65ac:	84000003 	strhi	r0, [r0], #-3
    65b0:	e8080025 	stmda	r8, {r0, r2, r5}
    65b4:	01000004 	tsteq	r0, r4
    65b8:	0006baef 	andeq	fp, r6, pc, ror #21
    65bc:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    65c0:	10240000 	eorne	r0, r4, r0
    65c4:	24000004 	strcs	r0, [r0], #-4
    65c8:	00000407 	andeq	r0, r0, r7, lsl #8
    65cc:	0004e819 	andeq	lr, r4, r9, lsl r8
    65d0:	04221000 	strteq	r1, [r2], #-0
    65d4:	26350000 	ldrtcs	r0, [r5], -r0
    65d8:	2b100000 	blcs	4065e0 <__Stack_Size+0x405de0>
    65dc:	53000004 	movwpl	r0, #4
    65e0:	20000026 	andcs	r0, r0, r6, lsr #32
    65e4:	08002584 	stmdaeq	r0, {r2, r7, r8, sl, sp}
    65e8:	00000044 	andeq	r0, r0, r4, asr #32
    65ec:	00043510 	andeq	r3, r4, r0, lsl r5
    65f0:	00269500 	eoreq	r9, r6, r0, lsl #10
    65f4:	00000000 	andeq	r0, r0, r0
    65f8:	0003fb22 	andeq	pc, r3, r2, lsr #22
    65fc:	0025f600 	eoreq	pc, r5, r0, lsl #12
    6600:	00050008 	andeq	r0, r5, r8
    6604:	04f30100 	ldrbteq	r0, [r3], #256	; 0x100
    6608:	24000007 	strcs	r0, [r0], #-7
    660c:	00000419 	andeq	r0, r0, r9, lsl r4
    6610:	00041024 	andeq	r1, r4, r4, lsr #32
    6614:	04072400 	streq	r2, [r7], #-1024	; 0x400
    6618:	00190000 	andseq	r0, r9, r0
    661c:	10000005 	andne	r0, r0, r5
    6620:	00000422 	andeq	r0, r0, r2, lsr #8
    6624:	0000270f 	andeq	r2, r0, pc, lsl #14
    6628:	00042b10 	andeq	r2, r4, r0, lsl fp
    662c:	00273900 	eoreq	r3, r7, r0, lsl #18
    6630:	05181900 	ldreq	r1, [r8, #-2304]	; 0x900
    6634:	35100000 	ldrcc	r0, [r0, #-0]
    6638:	9a000004 	bls	6650 <__Stack_Size+0x5e50>
    663c:	00000027 	andeq	r0, r0, r7, lsr #32
    6640:	fb250000 	blx	94664a <__Stack_Size+0x945e4a>
    6644:	84000003 	strhi	r0, [r0], #-3
    6648:	76080026 	strvc	r0, [r8], -r6, lsr #32
    664c:	01000000 	mrseq	r0, (UNDEF: 0)
    6650:	000756f4 	strdeq	r5, [r7], -r4
    6654:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    6658:	10240000 	eorne	r0, r4, r0
    665c:	24000004 	strcs	r0, [r0], #-4
    6660:	00000407 	andeq	r0, r0, r7, lsl #8
    6664:	00268420 	eoreq	r8, r6, r0, lsr #8
    6668:	00007608 	andeq	r7, r0, r8, lsl #12
    666c:	04221000 	strteq	r1, [r2], #-0
    6670:	27e90000 	strbcs	r0, [r9, r0]!
    6674:	2b100000 	blcs	40667c <__Stack_Size+0x405e7c>
    6678:	07000004 	streq	r0, [r0, -r4]
    667c:	20000028 	andcs	r0, r0, r8, lsr #32
    6680:	08002684 	stmdaeq	r0, {r2, r7, r9, sl, sp}
    6684:	00000048 	andeq	r0, r0, r8, asr #32
    6688:	00043510 	andeq	r3, r4, r0, lsl r5
    668c:	00284900 	eoreq	r4, r8, r0, lsl #18
    6690:	00000000 	andeq	r0, r0, r0
    6694:	0003fb25 	andeq	pc, r3, r5, lsr #22
    6698:	00270400 	eoreq	r0, r7, r0, lsl #8
    669c:	00008808 	andeq	r8, r0, r8, lsl #16
    66a0:	a8f80100 	ldmge	r8!, {r8}^
    66a4:	24000007 	strcs	r0, [r0], #-7
    66a8:	00000419 	andeq	r0, r0, r9, lsl r4
    66ac:	00041024 	andeq	r1, r4, r4, lsr #32
    66b0:	04072400 	streq	r2, [r7], #-1024	; 0x400
    66b4:	04200000 	strteq	r0, [r0], #-0
    66b8:	88080027 	stmdahi	r8, {r0, r1, r2, r5}
    66bc:	10000000 	andne	r0, r0, r0
    66c0:	00000422 	andeq	r0, r0, r2, lsr #8
    66c4:	000028c3 	andeq	r2, r0, r3, asr #17
    66c8:	00042b10 	andeq	r2, r4, r0, lsl fp
    66cc:	0028e100 	eoreq	lr, r8, r0, lsl #2
    66d0:	27042000 	strcs	r2, [r4, -r0]
    66d4:	004a0800 	subeq	r0, sl, r0, lsl #16
    66d8:	35100000 	ldrcc	r0, [r0, #-0]
    66dc:	36000004 	strcc	r0, [r0], -r4
    66e0:	00000029 	andeq	r0, r0, r9, lsr #32
    66e4:	fb250000 	blx	9466ee <__Stack_Size+0x945eee>
    66e8:	8c000003 	stchi	0, cr0, [r0], {3}
    66ec:	74080027 	strvc	r0, [r8], #-39	; 0x27
    66f0:	01000000 	mrseq	r0, (UNDEF: 0)
    66f4:	0007fafb 	strdeq	pc, [r7], -fp
    66f8:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    66fc:	10240000 	eorne	r0, r4, r0
    6700:	24000004 	strcs	r0, [r0], #-4
    6704:	00000407 	andeq	r0, r0, r7, lsl #8
    6708:	00278c20 	eoreq	r8, r7, r0, lsr #24
    670c:	00007408 	andeq	r7, r0, r8, lsl #8
    6710:	04221000 	strteq	r1, [r2], #-0
    6714:	29850000 	stmibcs	r5, {}	; <UNPREDICTABLE>
    6718:	2b100000 	blcs	406720 <__Stack_Size+0x405f20>
    671c:	a3000004 	movwge	r0, #4
    6720:	20000029 	andcs	r0, r0, r9, lsr #32
    6724:	0800278c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, sp}
    6728:	00000046 	andeq	r0, r0, r6, asr #32
    672c:	00043510 	andeq	r3, r4, r0, lsl r5
    6730:	0029e500 	eoreq	lr, r9, r0, lsl #10
    6734:	00000000 	andeq	r0, r0, r0
    6738:	0003fb25 	andeq	pc, r3, r5, lsr #22
    673c:	00280000 	eoreq	r0, r8, r0
    6740:	00008208 	andeq	r8, r0, r8, lsl #4
    6744:	4cfc0100 	ldfmie	f0, [ip]
    6748:	24000008 	strcs	r0, [r0], #-8
    674c:	00000419 	andeq	r0, r0, r9, lsl r4
    6750:	00041024 	andeq	r1, r4, r4, lsr #32
    6754:	04072400 	streq	r2, [r7], #-1024	; 0x400
    6758:	00200000 	eoreq	r0, r0, r0
    675c:	82080028 	andhi	r0, r8, #40	; 0x28
    6760:	10000000 	andne	r0, r0, r0
    6764:	00000422 	andeq	r0, r0, r2, lsr #8
    6768:	00002a5f 	andeq	r2, r0, pc, asr sl
    676c:	00042b10 	andeq	r2, r4, r0, lsl fp
    6770:	002a7d00 	eoreq	r7, sl, r0, lsl #26
    6774:	28002000 	stmdacs	r0, {sp}
    6778:	00480800 	subeq	r0, r8, r0, lsl #16
    677c:	35100000 	ldrcc	r0, [r0, #-0]
    6780:	d2000004 	andle	r0, r0, #4
    6784:	0000002a 	andeq	r0, r0, sl, lsr #32
    6788:	fb250000 	blx	946792 <__Stack_Size+0x945f92>
    678c:	82000003 	andhi	r0, r0, #3
    6790:	74080028 	strvc	r0, [r8], #-40	; 0x28
    6794:	01000000 	mrseq	r0, (UNDEF: 0)
    6798:	00089eff 	strdeq	r9, [r8], -pc	; <UNPREDICTABLE>
    679c:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    67a0:	10240000 	eorne	r0, r4, r0
    67a4:	24000004 	strcs	r0, [r0], #-4
    67a8:	00000407 	andeq	r0, r0, r7, lsl #8
    67ac:	00288220 	eoreq	r8, r8, r0, lsr #4
    67b0:	00007408 	andeq	r7, r0, r8, lsl #8
    67b4:	04221000 	strteq	r1, [r2], #-0
    67b8:	2b210000 	blcs	8467c0 <__Stack_Size+0x845fc0>
    67bc:	2b100000 	blcs	4067c4 <__Stack_Size+0x405fc4>
    67c0:	3f000004 	svccc	0x00000004
    67c4:	2000002b 	andcs	r0, r0, fp, lsr #32
    67c8:	08002882 	stmdaeq	r0, {r1, r7, fp, sp}
    67cc:	00000046 	andeq	r0, r0, r6, asr #32
    67d0:	00043510 	andeq	r3, r4, r0, lsl r5
    67d4:	002b8100 	eoreq	r8, fp, r0, lsl #2
    67d8:	00000000 	andeq	r0, r0, r0
    67dc:	0003fb26 	andeq	pc, r3, r6, lsr #22
    67e0:	0028f600 	eoreq	pc, r8, r0, lsl #12
    67e4:	00008208 	andeq	r8, r0, r8, lsl #4
    67e8:	01020100 	mrseq	r0, (UNDEF: 18)
    67ec:	000008f1 	strdeq	r0, [r0], -r1
    67f0:	00041924 	andeq	r1, r4, r4, lsr #18
    67f4:	04102400 	ldreq	r2, [r0], #-1024	; 0x400
    67f8:	07240000 	streq	r0, [r4, -r0]!
    67fc:	20000004 	andcs	r0, r0, r4
    6800:	080028f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, fp, sp}
    6804:	00000082 	andeq	r0, r0, r2, lsl #1
    6808:	00042210 	andeq	r2, r4, r0, lsl r2
    680c:	002bfb00 	eoreq	pc, fp, r0, lsl #22
    6810:	042b1000 	strteq	r1, [fp], #-0
    6814:	2c190000 	ldccs	0, cr0, [r9], {-0}
    6818:	f6200000 			; <UNDEFINED> instruction: 0xf6200000
    681c:	48080028 	stmdami	r8, {r3, r5}
    6820:	10000000 	andne	r0, r0, r0
    6824:	00000435 	andeq	r0, r0, r5, lsr r4
    6828:	00002c6e 	andeq	r2, r0, lr, ror #24
    682c:	26000000 	strcs	r0, [r0], -r0
    6830:	000003fb 	strdeq	r0, [r0], -fp
    6834:	08002978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, sp}
    6838:	00000072 	andeq	r0, r0, r2, ror r0
    683c:	44010301 	strmi	r0, [r1], #-769	; 0x301
    6840:	24000009 	strcs	r0, [r0], #-9
    6844:	00000419 	andeq	r0, r0, r9, lsl r4
    6848:	00041024 	andeq	r1, r4, r4, lsr #32
    684c:	04072400 	streq	r2, [r7], #-1024	; 0x400
    6850:	78200000 	stmdavc	r0!, {}	; <UNPREDICTABLE>
    6854:	72080029 	andvc	r0, r8, #41	; 0x29
    6858:	10000000 	andne	r0, r0, r0
    685c:	00000422 	andeq	r0, r0, r2, lsr #8
    6860:	00002cbd 			; <UNDEFINED> instruction: 0x00002cbd
    6864:	00042b10 	andeq	r2, r4, r0, lsl fp
    6868:	002cdb00 	eoreq	sp, ip, r0, lsl #22
    686c:	29782000 	ldmdbcs	r8!, {sp}^
    6870:	00440800 	subeq	r0, r4, r0, lsl #16
    6874:	35100000 	ldrcc	r0, [r0, #-0]
    6878:	1d000004 	stcne	0, cr0, [r0, #-16]
    687c:	0000002d 	andeq	r0, r0, sp, lsr #32
    6880:	fb260000 	blx	98688a <__Stack_Size+0x98608a>
    6884:	ea000003 	b	6898 <__Stack_Size+0x6098>
    6888:	82080029 	andhi	r0, r8, #41	; 0x29
    688c:	01000000 	mrseq	r0, (UNDEF: 0)
    6890:	09970106 	ldmibeq	r7, {r1, r2, r8}
    6894:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    6898:	24000004 	strcs	r0, [r0], #-4
    689c:	00000410 	andeq	r0, r0, r0, lsl r4
    68a0:	00040724 	andeq	r0, r4, r4, lsr #14
    68a4:	29ea2000 	stmibcs	sl!, {sp}^
    68a8:	00820800 	addeq	r0, r2, r0, lsl #16
    68ac:	22100000 	andscs	r0, r0, #0
    68b0:	97000004 	strls	r0, [r0, -r4]
    68b4:	1000002d 	andne	r0, r0, sp, lsr #32
    68b8:	0000042b 	andeq	r0, r0, fp, lsr #8
    68bc:	00002db5 			; <UNDEFINED> instruction: 0x00002db5
    68c0:	0029ea20 	eoreq	lr, r9, r0, lsr #20
    68c4:	00004808 	andeq	r4, r0, r8, lsl #16
    68c8:	04351000 	ldrteq	r1, [r5], #-0
    68cc:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
    68d0:	00000000 	andeq	r0, r0, r0
    68d4:	03fb2700 	mvnseq	r2, #0, 14
    68d8:	2a6c0000 	bcs	1b068e0 <__Stack_Size+0x1b060e0>
    68dc:	006e0800 	rsbeq	r0, lr, r0, lsl #16
    68e0:	07010000 	streq	r0, [r1, -r0]
    68e4:	04192401 	ldreq	r2, [r9], #-1025	; 0x401
    68e8:	10240000 	eorne	r0, r4, r0
    68ec:	24000004 	strcs	r0, [r0], #-4
    68f0:	00000407 	andeq	r0, r0, r7, lsl #8
    68f4:	002a6c20 	eoreq	r6, sl, r0, lsr #24
    68f8:	00006e08 	andeq	r6, r0, r8, lsl #28
    68fc:	04221000 	strteq	r1, [r2], #-0
    6900:	2e590000 	cdpcs	0, 5, cr0, cr9, cr0, {0}
    6904:	2b100000 	blcs	40690c <__Stack_Size+0x40610c>
    6908:	77000004 	strvc	r0, [r0, -r4]
    690c:	2000002e 	andcs	r0, r0, lr, lsr #32
    6910:	08002a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp}
    6914:	00000044 	andeq	r0, r0, r4, asr #32
    6918:	00043510 	andeq	r3, r4, r0, lsl r5
    691c:	002eb900 	eoreq	fp, lr, r0, lsl #18
    6920:	00000000 	andeq	r0, r0, r0
    6924:	19a02800 	stmibne	r0!, {fp, sp}
    6928:	0a010000 	beq	46930 <__Stack_Size+0x46130>
    692c:	00000001 	andeq	r0, r0, r1
    6930:	00002600 	andeq	r2, r0, r0, lsl #12
    6934:	659c0100 	ldrvs	r0, [ip, #256]	; 0x100
    6938:	2900000a 	stmdbcs	r0, {r1, r3}
    693c:	0a010072 	beq	46b0c <__Stack_Size+0x4630c>
    6940:	00010a01 	andeq	r0, r1, r1, lsl #20
    6944:	002f3300 	eoreq	r3, pc, r0, lsl #6
    6948:	00782900 	rsbseq	r2, r8, r0, lsl #18
    694c:	10010a01 	andne	r0, r1, r1, lsl #20
    6950:	51000001 	tstpl	r0, r1
    6954:	2a00002f 	bcs	6a18 <__Stack_Size+0x6218>
    6958:	00706d74 	rsbseq	r6, r0, r4, ror sp
    695c:	3d010c01 	stccc	12, cr0, [r1, #-4]
    6960:	02000002 	andeq	r0, r0, #2
    6964:	1b265091 	blne	99abb0 <__Stack_Size+0x99a3b0>
    6968:	00000001 	andeq	r0, r0, r1
    696c:	16000000 	strne	r0, [r0], -r0
    6970:	01000000 	mrseq	r0, (UNDEF: 0)
    6974:	0a4d010f 	beq	1346db8 <__Stack_Size+0x13465b8>
    6978:	300f0000 	andcc	r0, pc, r0
    697c:	72000001 	andvc	r0, r0, #1
    6980:	1800002f 	stmdane	r0, {r0, r1, r2, r3, r5}
    6984:	00000127 	andeq	r0, r0, r7, lsr #2
    6988:	2b005501 	blcs	1bd94 <__Stack_Size+0x1b594>
    698c:	00000000 	andeq	r0, r0, r0
    6990:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6994:	03510112 	cmpeq	r1, #-2147483644	; 0x80000004
    6998:	125101f3 	subsne	r0, r1, #-1073741764	; 0xc000003c
    699c:	7d025001 	stcvc	0, cr5, [r2, #-4]
    69a0:	2c000000 	stccs	0, cr0, [r0], {-0}
    69a4:	00001989 	andeq	r1, r0, r9, lsl #19
    69a8:	01011501 	tsteq	r1, r1, lsl #10
    69ac:	00000a9b 	muleq	r0, fp, sl
    69b0:	0100722d 	tsteq	r0, sp, lsr #4
    69b4:	010a0115 	tsteq	sl, r5, lsl r1
    69b8:	782d0000 	stmdavc	sp!, {}	; <UNPREDICTABLE>
    69bc:	01150100 	tsteq	r5, r0, lsl #2
    69c0:	00000110 	andeq	r0, r0, r0, lsl r1
    69c4:	0100732d 	tsteq	r0, sp, lsr #6
    69c8:	010a0115 	tsteq	sl, r5, lsl r1
    69cc:	692e0000 	stmdbvs	lr!, {}	; <UNPREDICTABLE>
    69d0:	01170100 	tsteq	r7, r0, lsl #2
    69d4:	0000007e 	andeq	r0, r0, lr, ror r0
    69d8:	17e32800 	strbne	r2, [r3, r0, lsl #16]!
    69dc:	30010000 	andcc	r0, r1, r0
    69e0:	002ae401 	eoreq	lr, sl, r1, lsl #8
    69e4:	00063408 	andeq	r3, r6, r8, lsl #8
    69e8:	619c0100 	orrsvs	r0, ip, r0, lsl #2
    69ec:	2900000f 	stmdbcs	r0, {r0, r1, r2, r3}
    69f0:	30010072 	andcc	r0, r1, r2, ror r0
    69f4:	00010a01 	andeq	r0, r1, r1, lsl #20
    69f8:	002f9200 	eoreq	r9, pc, r0, lsl #4
    69fc:	00612900 	rsbeq	r2, r1, r0, lsl #18
    6a00:	10013001 	andne	r3, r1, r1
    6a04:	bf000001 	svclt	0x00000001
    6a08:	2a00002f 	bcs	6acc <__Stack_Size+0x62cc>
    6a0c:	32010076 	andcc	r0, r1, #118	; 0x76
    6a10:	00023d01 	andeq	r3, r2, r1, lsl #26
    6a14:	e0910300 	adds	r0, r1, r0, lsl #6
    6a18:	00692a7e 	rsbeq	r2, r9, lr, ror sl
    6a1c:	3d013301 	stccc	3, cr3, [r1, #-4]
    6a20:	03000002 	movweq	r0, #2
    6a24:	2a7f8091 	bcs	1fe6c70 <__Stack_Size+0x1fe6470>
    6a28:	34010078 	strcc	r0, [r1], #-120	; 0x78
    6a2c:	00023d01 	andeq	r3, r2, r1, lsl #26
    6a30:	a0910300 	addsge	r0, r1, r0, lsl #6
    6a34:	00792a7f 	rsbseq	r2, r9, pc, ror sl
    6a38:	3d013501 	cfstr32cc	mvfx3, [r1, #-4]
    6a3c:	02000002 	andeq	r0, r0, #2
    6a40:	592f4091 	stmdbpl	pc!, {r0, r4, r7, lr}	; <UNPREDICTABLE>
    6a44:	e8000005 	stmda	r0, {r0, r2}
    6a48:	3008002a 	andcc	r0, r8, sl, lsr #32
    6a4c:	01000005 	tsteq	r0, r5
    6a50:	0b490138 	bleq	1246f38 <__Stack_Size+0x1246738>
    6a54:	77300000 	ldrvc	r0, [r0, -r0]!
    6a58:	02000005 	andeq	r0, r0, #5
    6a5c:	00056e0f 	andeq	r6, r5, pc, lsl #28
    6a60:	002ff700 	eoreq	pc, pc, r0, lsl #14
    6a64:	05650f00 	strbeq	r0, [r5, #-3840]!	; 0xf00
    6a68:	302f0000 	eorcc	r0, pc, r0
    6a6c:	30190000 	andscc	r0, r9, r0
    6a70:	10000005 	andne	r0, r0, r5
    6a74:	00000580 	andeq	r0, r0, r0, lsl #11
    6a78:	0000305e 	andeq	r3, r0, lr, asr r0
    6a7c:	00058910 	andeq	r8, r5, r0, lsl r9
    6a80:	00308c00 	eorseq	r8, r0, r0, lsl #24
    6a84:	26000000 	strcs	r0, [r0], -r0
    6a88:	00000a65 	andeq	r0, r0, r5, ror #20
    6a8c:	08002b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, sp}
    6a90:	00000394 	muleq	r0, r4, r3
    6a94:	b1013901 	tstlt	r1, r1, lsl #18
    6a98:	2400000d 	strcs	r0, [r0], #-13
    6a9c:	00000a86 	andeq	r0, r0, r6, lsl #21
    6aa0:	000a7c24 	andeq	r7, sl, r4, lsr #24
    6aa4:	0a722400 	beq	1c8faac <__Stack_Size+0x1c8f2ac>
    6aa8:	38200000 	stmdacc	r0!, {}	; <UNPREDICTABLE>
    6aac:	9408002b 	strls	r0, [r8], #-43	; 0x2b
    6ab0:	31000003 	tstcc	r0, r3
    6ab4:	00000a90 	muleq	r0, r0, sl
    6ab8:	0003fb26 	andeq	pc, r3, r6, lsr #22
    6abc:	002b3800 	eoreq	r3, fp, r0, lsl #16
    6ac0:	00007a08 	andeq	r7, r0, r8, lsl #20
    6ac4:	011f0100 	tsteq	pc, r0, lsl #2
    6ac8:	00000bcd 	andeq	r0, r0, sp, asr #23
    6acc:	00041924 	andeq	r1, r4, r4, lsr #18
    6ad0:	04102400 	ldreq	r2, [r0], #-1024	; 0x400
    6ad4:	07240000 	streq	r0, [r4, -r0]!
    6ad8:	20000004 	andcs	r0, r0, r4
    6adc:	08002b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, sp}
    6ae0:	0000007a 	andeq	r0, r0, sl, ror r0
    6ae4:	00042210 	andeq	r2, r4, r0, lsl r2
    6ae8:	0030ed00 	eorseq	lr, r0, r0, lsl #26
    6aec:	042b1000 	strteq	r1, [fp], #-0
    6af0:	310b0000 	mrscc	r0, (UNDEF: 11)
    6af4:	38200000 	stmdacc	r0!, {}	; <UNPREDICTABLE>
    6af8:	4208002b 	andmi	r0, r8, #43	; 0x2b
    6afc:	10000000 	andne	r0, r0, r0
    6b00:	00000435 	andeq	r0, r0, r5, lsr r4
    6b04:	00003163 	andeq	r3, r0, r3, ror #2
    6b08:	2f000000 	svccs	0x00000000
    6b0c:	000003fb 	strdeq	r0, [r0], -fp
    6b10:	08002bb2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, fp, sp}
    6b14:	00000548 	andeq	r0, r0, r8, asr #10
    6b18:	1c012001 	stcne	0, cr2, [r1], {1}
    6b1c:	2400000c 	strcs	r0, [r0], #-12
    6b20:	00000419 	andeq	r0, r0, r9, lsl r4
    6b24:	00041024 	andeq	r1, r4, r4, lsr #32
    6b28:	04072400 	streq	r2, [r7], #-1024	; 0x400
    6b2c:	48190000 	ldmdami	r9, {}	; <UNPREDICTABLE>
    6b30:	10000005 	andne	r0, r0, r5
    6b34:	00000422 	andeq	r0, r0, r2, lsr #8
    6b38:	000031dd 	ldrdeq	r3, [r0], -sp
    6b3c:	00042b10 	andeq	r2, r4, r0, lsl fp
    6b40:	0031fb00 	eorseq	pc, r1, r0, lsl #22
    6b44:	2bb22000 	blcs	fec8eb4c <BootRAM+0xdbff2ed>
    6b48:	00440800 	subeq	r0, r4, r0, lsl #16
    6b4c:	35100000 	ldrcc	r0, [r0, #-0]
    6b50:	50000004 	andpl	r0, r0, r4
    6b54:	00000032 	andeq	r0, r0, r2, lsr r0
    6b58:	fb2f0000 	blx	bc6b62 <__Stack_Size+0xbc6362>
    6b5c:	36000003 	strcc	r0, [r0], -r3
    6b60:	6008002c 	andvs	r0, r8, ip, lsr #32
    6b64:	01000005 	tsteq	r0, r5
    6b68:	0c670124 	stfeqe	f0, [r7], #-144	; 0xffffff70
    6b6c:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    6b70:	24000004 	strcs	r0, [r0], #-4
    6b74:	00000410 	andeq	r0, r0, r0, lsl r4
    6b78:	00040724 	andeq	r0, r4, r4, lsr #14
    6b7c:	05601900 	strbeq	r1, [r0, #-2304]!	; 0x900
    6b80:	22100000 	andscs	r0, r0, #0
    6b84:	cd000004 	stcgt	0, cr0, [r0, #-16]
    6b88:	10000032 	andne	r0, r0, r2, lsr r0
    6b8c:	0000042b 	andeq	r0, r0, fp, lsr #8
    6b90:	000032f7 	strdeq	r3, [r0], -r7
    6b94:	00057819 	andeq	r7, r5, r9, lsl r8
    6b98:	04351000 	ldrteq	r1, [r5], #-0
    6b9c:	335b0000 	cmpcc	fp, #0
    6ba0:	00000000 	andeq	r0, r0, r0
    6ba4:	03fb2600 	mvnseq	r2, #0, 12
    6ba8:	2cc60000 	stclcs	0, cr0, [r6], {0}
    6bac:	00820800 	addeq	r0, r2, r0, lsl #16
    6bb0:	25010000 	strcs	r0, [r1, #-0]
    6bb4:	000cba01 	andeq	fp, ip, r1, lsl #20
    6bb8:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    6bbc:	10240000 	eorne	r0, r4, r0
    6bc0:	24000004 	strcs	r0, [r0], #-4
    6bc4:	00000407 	andeq	r0, r0, r7, lsl #8
    6bc8:	002cc620 	eoreq	ip, ip, r0, lsr #12
    6bcc:	00008208 	andeq	r8, r0, r8, lsl #4
    6bd0:	04221000 	strteq	r1, [r2], #-0
    6bd4:	33d50000 	bicscc	r0, r5, #0
    6bd8:	2b100000 	blcs	406be0 <__Stack_Size+0x4063e0>
    6bdc:	f3000004 	vhadd.u8	d0, d0, d4
    6be0:	20000033 	andcs	r0, r0, r3, lsr r0
    6be4:	08002cc6 	stmdaeq	r0, {r1, r2, r6, r7, sl, fp, sp}
    6be8:	0000004a 	andeq	r0, r0, sl, asr #32
    6bec:	00043510 	andeq	r3, r4, r0, lsl r5
    6bf0:	00344800 	eorseq	r4, r4, r0, lsl #16
    6bf4:	00000000 	andeq	r0, r0, r0
    6bf8:	0003fb26 	andeq	pc, r3, r6, lsr #22
    6bfc:	002d5a00 	eoreq	r5, sp, r0, lsl #20
    6c00:	00007c08 	andeq	r7, r0, r8, lsl #24
    6c04:	01290100 	teqeq	r9, r0, lsl #2
    6c08:	00000d0d 	andeq	r0, r0, sp, lsl #26
    6c0c:	00041924 	andeq	r1, r4, r4, lsr #18
    6c10:	04102400 	ldreq	r2, [r0], #-1024	; 0x400
    6c14:	07240000 	streq	r0, [r4, -r0]!
    6c18:	20000004 	andcs	r0, r0, r4
    6c1c:	08002d5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, fp, sp}
    6c20:	0000007c 	andeq	r0, r0, ip, ror r0
    6c24:	00042210 	andeq	r2, r4, r0, lsl r2
    6c28:	0034c500 	eorseq	ip, r4, r0, lsl #10
    6c2c:	042b1000 	strteq	r1, [fp], #-0
    6c30:	34e30000 	strbtcc	r0, [r3], #0
    6c34:	5a200000 	bpl	806c3c <__Stack_Size+0x80643c>
    6c38:	4608002d 	strmi	r0, [r8], -sp, lsr #32
    6c3c:	10000000 	andne	r0, r0, r0
    6c40:	00000435 	andeq	r0, r0, r5, lsr r4
    6c44:	0000353b 	andeq	r3, r0, fp, lsr r5
    6c48:	26000000 	strcs	r0, [r0], -r0
    6c4c:	000003fb 	strdeq	r0, [r0], -fp
    6c50:	08002dd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, fp, sp}
    6c54:	0000007e 	andeq	r0, r0, lr, ror r0
    6c58:	60012c01 	andvs	r2, r1, r1, lsl #24
    6c5c:	2400000d 	strcs	r0, [r0], #-13
    6c60:	00000419 	andeq	r0, r0, r9, lsl r4
    6c64:	00041024 	andeq	r1, r4, r4, lsr #32
    6c68:	04072400 	streq	r2, [r7], #-1024	; 0x400
    6c6c:	d6200000 	strtle	r0, [r0], -r0
    6c70:	7e08002d 	cdpvc	0, 0, cr0, cr8, cr13, {1}
    6c74:	10000000 	andne	r0, r0, r0
    6c78:	00000422 	andeq	r0, r0, r2, lsr #8
    6c7c:	000035b5 			; <UNDEFINED> instruction: 0x000035b5
    6c80:	00042b10 	andeq	r2, r4, r0, lsl fp
    6c84:	0035d300 	eorseq	sp, r5, r0, lsl #6
    6c88:	2dd62000 	ldclcs	0, cr2, [r6]
    6c8c:	00460800 	subeq	r0, r6, r0, lsl #16
    6c90:	35100000 	ldrcc	r0, [r0, #-0]
    6c94:	28000004 	stmdacs	r0, {r2}
    6c98:	00000036 	andeq	r0, r0, r6, lsr r0
    6c9c:	fb270000 	blx	9c6ca6 <__Stack_Size+0x9c64a6>
    6ca0:	54000003 	strpl	r0, [r0], #-3
    6ca4:	7808002e 	stmdavc	r8, {r1, r2, r3, r5}
    6ca8:	01000000 	mrseq	r0, (UNDEF: 0)
    6cac:	1924012d 	stmdbne	r4!, {r0, r2, r3, r5, r8}
    6cb0:	24000004 	strcs	r0, [r0], #-4
    6cb4:	00000410 	andeq	r0, r0, r0, lsl r4
    6cb8:	00040724 	andeq	r0, r4, r4, lsr #14
    6cbc:	2e542000 	cdpcs	0, 5, cr2, cr4, cr0, {0}
    6cc0:	00780800 	rsbseq	r0, r8, r0, lsl #16
    6cc4:	22100000 	andscs	r0, r0, #0
    6cc8:	a5000004 	strge	r0, [r0, #-4]
    6ccc:	10000036 	andne	r0, r0, r6, lsr r0
    6cd0:	0000042b 	andeq	r0, r0, fp, lsr #8
    6cd4:	000036c3 	andeq	r3, r0, r3, asr #13
    6cd8:	002e5420 	eoreq	r5, lr, r0, lsr #8
    6cdc:	00004208 	andeq	r4, r0, r8, lsl #4
    6ce0:	04351000 	ldrteq	r1, [r5], #-0
    6ce4:	371b0000 	ldrcc	r0, [fp, -r0]
    6ce8:	00000000 	andeq	r0, r0, r0
    6cec:	26000000 	strcs	r0, [r0], -r0
    6cf0:	000003fb 	strdeq	r0, [r0], -fp
    6cf4:	08002ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, sp}
    6cf8:	00000080 	andeq	r0, r0, r0, lsl #1
    6cfc:	04013c01 	streq	r3, [r1], #-3073	; 0xc01
    6d00:	2400000e 	strcs	r0, [r0], #-14
    6d04:	00000419 	andeq	r0, r0, r9, lsl r4
    6d08:	00041024 	andeq	r1, r4, r4, lsr #32
    6d0c:	04072400 	streq	r2, [r7], #-1024	; 0x400
    6d10:	cc200000 	stcgt	0, cr0, [r0], #-0
    6d14:	8008002e 	andhi	r0, r8, lr, lsr #32
    6d18:	10000000 	andne	r0, r0, r0
    6d1c:	00000422 	andeq	r0, r0, r2, lsr #8
    6d20:	00003795 	muleq	r0, r5, r7
    6d24:	00042b10 	andeq	r2, r4, r0, lsl fp
    6d28:	0037b300 	eorseq	fp, r7, r0, lsl #6
    6d2c:	2ecc2000 	cdpcs	0, 12, cr2, cr12, cr0, {0}
    6d30:	00460800 	subeq	r0, r6, r0, lsl #16
    6d34:	35100000 	ldrcc	r0, [r0, #-0]
    6d38:	08000004 	stmdaeq	r0, {r2}
    6d3c:	00000038 	andeq	r0, r0, r8, lsr r0
    6d40:	fb260000 	blx	986d4a <__Stack_Size+0x98654a>
    6d44:	4c000003 	stcmi	0, cr0, [r0], {3}
    6d48:	7008002f 	andvc	r0, r8, pc, lsr #32
    6d4c:	01000000 	mrseq	r0, (UNDEF: 0)
    6d50:	0e57013d 	mrceq	1, 2, r0, cr7, cr13, {1}
    6d54:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    6d58:	24000004 	strcs	r0, [r0], #-4
    6d5c:	00000410 	andeq	r0, r0, r0, lsl r4
    6d60:	00040724 	andeq	r0, r4, r4, lsr #14
    6d64:	2f4c2000 	svccs	0x004c2000
    6d68:	00700800 	rsbseq	r0, r0, r0, lsl #16
    6d6c:	22100000 	andscs	r0, r0, #0
    6d70:	85000004 	strhi	r0, [r0, #-4]
    6d74:	10000038 	andne	r0, r0, r8, lsr r0
    6d78:	0000042b 	andeq	r0, r0, fp, lsr #8
    6d7c:	000038a3 	andeq	r3, r0, r3, lsr #17
    6d80:	002f4c20 	eoreq	r4, pc, r0, lsr #24
    6d84:	00004008 	andeq	r4, r0, r8
    6d88:	04351000 	ldrteq	r1, [r5], #-0
    6d8c:	38fa0000 	ldmcc	sl!, {}^	; <UNPREDICTABLE>
    6d90:	00000000 	andeq	r0, r0, r0
    6d94:	013a2600 	teqeq	sl, r0, lsl #12
    6d98:	2fbc0000 	svccs	0x00bc0000
    6d9c:	00140800 	andseq	r0, r4, r0, lsl #16
    6da0:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    6da4:	000e8a01 	andeq	r8, lr, r1, lsl #20
    6da8:	014f3000 	mrseq	r3, SPSR
    6dac:	24000000 	strcs	r0, [r0], #-0
    6db0:	00000146 	andeq	r0, r0, r6, asr #2
    6db4:	002fbc20 	eoreq	fp, pc, r0, lsr #24
    6db8:	00001408 	andeq	r1, r0, r8, lsl #8
    6dbc:	01581000 	cmpeq	r8, r0
    6dc0:	39740000 	ldmdbcc	r4!, {}^	; <UNPREDICTABLE>
    6dc4:	00000000 	andeq	r0, r0, r0
    6dc8:	00033a2f 	andeq	r3, r3, pc, lsr #20
    6dcc:	002fd000 	eoreq	sp, pc, r0
    6dd0:	00059008 	andeq	r9, r5, r8
    6dd4:	013f0100 	teqeq	pc, r0, lsl #2
    6dd8:	00000ec6 	andeq	r0, r0, r6, asr #29
    6ddc:	00035824 	andeq	r5, r3, r4, lsr #16
    6de0:	034f2400 	movteq	r2, #62464	; 0xf400
    6de4:	46240000 	strtmi	r0, [r4], -r0
    6de8:	19000003 	stmdbne	r0, {r0, r1}
    6dec:	00000590 	muleq	r0, r0, r5
    6df0:	00036110 	andeq	r6, r3, r0, lsl r1
    6df4:	00399400 	eorseq	r9, r9, r0, lsl #8
    6df8:	036a1000 	cmneq	sl, #0
    6dfc:	39bd0000 	ldmibcc	sp!, {}	; <UNPREDICTABLE>
    6e00:	00000000 	andeq	r0, r0, r0
    6e04:	0003fb2f 	andeq	pc, r3, pc, lsr #22
    6e08:	00301a00 	eorseq	r1, r0, r0, lsl #20
    6e0c:	0005a808 	andeq	sl, r5, r8, lsl #16
    6e10:	01420100 	mrseq	r0, (UNDEF: 82)
    6e14:	00000f11 	andeq	r0, r0, r1, lsl pc
    6e18:	00041924 	andeq	r1, r4, r4, lsr #18
    6e1c:	04102400 	ldreq	r2, [r0], #-1024	; 0x400
    6e20:	07240000 	streq	r0, [r4, -r0]!
    6e24:	19000004 	stmdbne	r0, {r2}
    6e28:	000005a8 	andeq	r0, r0, r8, lsr #11
    6e2c:	00042210 	andeq	r2, r4, r0, lsl r2
    6e30:	003a2000 	eorseq	r2, sl, r0
    6e34:	042b1000 	strteq	r1, [fp], #-0
    6e38:	3a3e0000 	bcc	f86e40 <__Stack_Size+0xf86640>
    6e3c:	c0190000 	andsgt	r0, r9, r0
    6e40:	10000005 	andne	r0, r0, r5
    6e44:	00000435 	andeq	r0, r0, r5, lsr r4
    6e48:	00003a93 	muleq	r0, r3, sl
    6e4c:	27000000 	strcs	r0, [r0, -r0]
    6e50:	000003fb 	strdeq	r0, [r0], -fp
    6e54:	080030a0 	stmdaeq	r0, {r5, r7, ip, sp}
    6e58:	00000070 	andeq	r0, r0, r0, ror r0
    6e5c:	24014301 	strcs	r4, [r1], #-769	; 0x301
    6e60:	00000419 	andeq	r0, r0, r9, lsl r4
    6e64:	00041024 	andeq	r1, r4, r4, lsr #32
    6e68:	04072400 	streq	r2, [r7], #-1024	; 0x400
    6e6c:	a0200000 	eorge	r0, r0, r0
    6e70:	70080030 	andvc	r0, r8, r0, lsr r0
    6e74:	10000000 	andne	r0, r0, r0
    6e78:	00000422 	andeq	r0, r0, r2, lsr #8
    6e7c:	00003b10 	andeq	r3, r0, r0, lsl fp
    6e80:	00042b10 	andeq	r2, r4, r0, lsl fp
    6e84:	003b2e00 	eorseq	r2, fp, r0, lsl #28
    6e88:	30a02000 	adccc	r2, r0, r0
    6e8c:	00420800 	subeq	r0, r2, r0, lsl #16
    6e90:	35100000 	ldrcc	r0, [r0, #-0]
    6e94:	70000004 	andvc	r0, r0, r4
    6e98:	0000003b 	andeq	r0, r0, fp, lsr r0
    6e9c:	32000000 	andcc	r0, r0, #0
    6ea0:	0000197d 	andeq	r1, r0, sp, ror r9
    6ea4:	0f720901 	svceq	0x00720901
    6ea8:	03050000 	movweq	r0, #20480	; 0x5000
    6eac:	00000000 	andeq	r0, r0, r0
    6eb0:	00023d0c 	andeq	r3, r2, ip, lsl #26
    6eb4:	16193200 	ldrne	r3, [r9], -r0, lsl #4
    6eb8:	0a010000 	beq	46ec0 <__Stack_Size+0x466c0>
    6ebc:	00000f88 	andeq	r0, r0, r8, lsl #31
    6ec0:	78680305 	stmdavc	r8!, {r0, r2, r8, r9}^
    6ec4:	3d0c0800 	stccc	8, cr0, [ip, #-0]
    6ec8:	33000002 	movwcc	r0, #2
    6ecc:	00000c16 	andeq	r0, r0, r6, lsl ip
    6ed0:	000000b4 	strheq	r0, [r0], -r4
    6ed4:	0000b434 	andeq	fp, r0, r4, lsr r4
    6ed8:	007e3400 	rsbseq	r3, lr, r0, lsl #8
    6edc:	ad340000 	ldcge	0, cr0, [r4, #-0]
    6ee0:	00000000 	andeq	r0, r0, r0
    6ee4:	000d7000 	andeq	r7, sp, r0
    6ee8:	c0000400 	andgt	r0, r0, r0, lsl #8
    6eec:	04000017 	streq	r0, [r0], #-23
    6ef0:	00163601 	andseq	r3, r6, r1, lsl #12
    6ef4:	1a730100 	bne	1cc72fc <__Stack_Size+0x1cc6afc>
    6ef8:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    6efc:	07b00000 	ldreq	r0, [r0, r0]!
    6f00:	00000000 	andeq	r0, r0, r0
    6f04:	1f770000 	svcne	0x00770000
    6f08:	01020000 	mrseq	r0, (UNDEF: 2)
    6f0c:	00081a06 	andeq	r1, r8, r6, lsl #20
    6f10:	0c400300 	mcrreq	3, 0, r0, r0, cr0
    6f14:	1c030000 	stcne	0, cr0, [r3], {-0}
    6f18:	00000037 	andeq	r0, r0, r7, lsr r0
    6f1c:	18080102 	stmdane	r8, {r1, r8}
    6f20:	02000008 	andeq	r0, r0, #8
    6f24:	06fc0502 	ldrbteq	r0, [ip], r2, lsl #10
    6f28:	67030000 	strvs	r0, [r3, -r0]
    6f2c:	0300000b 	movweq	r0, #11
    6f30:	00005026 	andeq	r5, r0, r6, lsr #32
    6f34:	07020200 	streq	r0, [r2, -r0, lsl #4]
    6f38:	00000949 	andeq	r0, r0, r9, asr #18
    6f3c:	da050402 	ble	147f4c <__Stack_Size+0x14774c>
    6f40:	03000004 	movweq	r0, #4
    6f44:	00000b4e 	andeq	r0, r0, lr, asr #22
    6f48:	00693803 	rsbeq	r3, r9, r3, lsl #16
    6f4c:	04020000 	streq	r0, [r2], #-0
    6f50:	00025207 	andeq	r5, r2, r7, lsl #4
    6f54:	05080200 	streq	r0, [r8, #-512]	; 0x200
    6f58:	000004d5 	ldrdeq	r0, [r0], -r5
    6f5c:	4d070802 	stcmi	8, cr0, [r7, #-8]
    6f60:	04000002 	streq	r0, [r0], #-2
    6f64:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    6f68:	04020074 	streq	r0, [r2], #-116	; 0x74
    6f6c:	00025707 	andeq	r5, r2, r7, lsl #14
    6f70:	0c420300 	mcrreq	3, 0, r0, r2, cr0
    6f74:	2a040000 	bcs	106f7c <__Stack_Size+0x10677c>
    6f78:	0000002c 	andeq	r0, r0, ip, lsr #32
    6f7c:	000b6903 	andeq	r6, fp, r3, lsl #18
    6f80:	45360400 	ldrmi	r0, [r6, #-1024]!	; 0x400
    6f84:	03000000 	movweq	r0, #0
    6f88:	00000b50 	andeq	r0, r0, r0, asr fp
    6f8c:	005e4204 	subseq	r4, lr, r4, lsl #4
    6f90:	1f030000 	svcne	0x00030000
    6f94:	0500000b 	streq	r0, [r0, #-11]
    6f98:	000085d4 	ldrdeq	r8, [r0], -r4
    6f9c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6fa0:	0000078b 	andeq	r0, r0, fp, lsl #15
    6fa4:	01020405 	tsteq	r2, r5, lsl #8
    6fa8:	00082108 	andeq	r2, r8, r8, lsl #2
    6fac:	1a060600 	bne	1887b4 <__Stack_Size+0x187fb4>
    6fb0:	8f010000 	svchi	0x00010000
    6fb4:	00011501 	andeq	r1, r1, r1, lsl #10
    6fb8:	73640700 	cmnvc	r4, #0, 14
    6fbc:	8f010074 	svchi	0x00010074
    6fc0:	00000115 	andeq	r0, r0, r5, lsl r1
    6fc4:	00198408 	andseq	r8, r9, r8, lsl #8
    6fc8:	1b900100 	blne	fe4073d0 <BootRAM+0xd377b71>
    6fcc:	07000001 	streq	r0, [r0, -r1]
    6fd0:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    6fd4:	011b9001 	tsteq	fp, r1
    6fd8:	b6080000 	strlt	r0, [r8], -r0
    6fdc:	01000019 	tsteq	r0, r9, lsl r0
    6fe0:	00008c91 	muleq	r0, r1, ip
    6fe4:	0f180900 	svceq	0x00180900
    6fe8:	93010000 	movwls	r0, #4096	; 0x1000
    6fec:	00000121 	andeq	r0, r0, r1, lsr #2
    6ff0:	0100690a 	tsteq	r0, sl, lsl #18
    6ff4:	00007e94 	muleq	r0, r4, lr
    6ff8:	040b0000 	streq	r0, [fp], #-0
    6ffc:	0000008c 	andeq	r0, r0, ip, lsl #1
    7000:	0121040b 	teqeq	r1, fp, lsl #8
    7004:	8c0c0000 	stchi	0, cr0, [ip], {-0}
    7008:	0d000000 	stceq	0, cr0, [r0, #-0]
    700c:	00001a1f 	andeq	r1, r0, pc, lsl sl
    7010:	007e5601 	rsbseq	r5, lr, r1, lsl #12
    7014:	49030000 	stmdbmi	r3, {}	; <UNPREDICTABLE>
    7018:	07000001 	streq	r0, [r0, -r1]
    701c:	56010061 	strpl	r0, [r1], -r1, rrx
    7020:	0000007e 	andeq	r0, r0, lr, ror r0
    7024:	01006207 	tsteq	r0, r7, lsl #4
    7028:	00007e56 	andeq	r7, r0, r6, asr lr
    702c:	f90e0000 			; <UNDEFINED> instruction: 0xf90e0000
    7030:	01000019 	tsteq	r0, r9, lsl r0
    7034:	017a013d 	cmneq	sl, sp, lsr r1
    7038:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
    703c:	153d0100 	ldrne	r0, [sp, #-256]!	; 0x100
    7040:	07000001 	streq	r0, [r0, -r1]
    7044:	3d01006e 	stccc	0, cr0, [r1, #-440]	; 0xfffffe48
    7048:	0000007e 	andeq	r0, r0, lr, ror r0
    704c:	0100630a 	tsteq	r0, sl, lsl #6
    7050:	0000973f 	andeq	r9, r0, pc, lsr r7
    7054:	00690a00 	rsbeq	r0, r9, r0, lsl #20
    7058:	007e4001 	rsbseq	r4, lr, r1
    705c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    7060:	00001a67 	andeq	r1, r0, r7, ror #20
    7064:	99032602 	stmdbls	r3, {r1, r9, sl, sp}
    7068:	07000001 	streq	r0, [r0, -r1]
    706c:	26020078 			; <UNDEFINED> instruction: 0x26020078
    7070:	00000115 	andeq	r0, r0, r5, lsl r1
    7074:	02006107 	andeq	r6, r0, #-1073741823	; 0xc0000001
    7078:	00011b26 	andeq	r1, r1, r6, lsr #22
    707c:	a10e0000 	mrsge	r0, (UNDEF: 14)
    7080:	0100001a 	tsteq	r0, sl, lsl r0
    7084:	01ca010c 	biceq	r0, sl, ip, lsl #2
    7088:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
    708c:	150c0100 	strne	r0, [ip, #-256]	; 0x100
    7090:	07000001 	streq	r0, [r0, -r1]
    7094:	0c010070 	stceq	0, cr0, [r1], {112}	; 0x70
    7098:	0000011b 	andeq	r0, r0, fp, lsl r1
    709c:	0100630a 	tsteq	r0, sl, lsl #6
    70a0:	0000970e 	andeq	r9, r0, lr, lsl #14
    70a4:	00690a00 	rsbeq	r0, r9, r0, lsl #20
    70a8:	007e0f01 	rsbseq	r0, lr, r1, lsl #30
    70ac:	06000000 	streq	r0, [r0], -r0
    70b0:	00001a5b 	andeq	r1, r0, fp, asr sl
    70b4:	f2014901 	vmla.i8	d4, d1, d1
    70b8:	07000001 	streq	r0, [r0, -r1]
    70bc:	49010078 	stmdbmi	r1, {r3, r4, r5, r6}
    70c0:	00000115 	andeq	r0, r0, r5, lsl r1
    70c4:	01006307 	tsteq	r0, r7, lsl #6
    70c8:	0000a249 	andeq	sl, r0, r9, asr #4
    70cc:	00690a00 	rsbeq	r0, r9, r0, lsl #20
    70d0:	007e4b01 	rsbseq	r4, lr, r1, lsl #22
    70d4:	0f000000 	svceq	0x00000000
    70d8:	000001ca 	andeq	r0, r0, sl, asr #3
    70dc:	00000000 	andeq	r0, r0, r0
    70e0:	0000001e 	andeq	r0, r0, lr, lsl r0
    70e4:	023e9c01 	eorseq	r9, lr, #256	; 0x100
    70e8:	d6100000 	ldrle	r0, [r0], -r0
    70ec:	ea000001 	b	70f8 <__Stack_Size+0x68f8>
    70f0:	1000003b 	andne	r0, r0, fp, lsr r0
    70f4:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    70f8:	00003c18 	andeq	r3, r0, r8, lsl ip
    70fc:	0001e811 	andeq	lr, r1, r1, lsl r8
    7100:	003c6a00 	eorseq	r6, ip, r0, lsl #20
    7104:	00001200 	andeq	r1, r0, r0, lsl #4
    7108:	0d5a0000 	ldcleq	0, cr0, [sl, #-0]
    710c:	01130000 	tsteq	r3, r0
    7110:	134c0152 	movtne	r0, #49490	; 0xc152
    7114:	30015101 	andcc	r5, r1, r1, lsl #2
    7118:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    711c:	235001f3 	cmpcs	r0, #-1073741764	; 0xc000003c
    7120:	0d000004 	stceq	0, cr0, [r0, #-16]
    7124:	00001a47 	andeq	r1, r0, r7, asr #20
    7128:	007e2801 	rsbseq	r2, lr, r1, lsl #16
    712c:	6a010000 	bvs	47134 <__Stack_Size+0x46934>
    7130:	07000002 	streq	r0, [r0, -r2]
    7134:	28010070 	stmdacs	r1, {r4, r5, r6}
    7138:	0000011b 	andeq	r0, r0, fp, lsl r1
    713c:	0100690a 	tsteq	r0, sl, lsl #18
    7140:	00007e2a 	andeq	r7, r0, sl, lsr #28
    7144:	00780a00 	rsbseq	r0, r8, r0, lsl #20
    7148:	008c2b01 	addeq	r2, ip, r1, lsl #22
    714c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    7150:	00001a3b 	andeq	r1, r0, fp, lsr sl
    7154:	a6011801 	strge	r1, [r1], -r1, lsl #16
    7158:	07000002 	streq	r0, [r0, -r2]
    715c:	18010078 	stmdane	r1, {r3, r4, r5, r6}
    7160:	00000115 	andeq	r0, r0, r5, lsl r1
    7164:	01007007 	tsteq	r0, r7
    7168:	00011b18 	andeq	r1, r1, r8, lsl fp
    716c:	19c00900 	stmibne	r0, {r8, fp}^
    7170:	1a010000 	bne	47178 <__Stack_Size+0x46978>
    7174:	000002a6 	andeq	r0, r0, r6, lsr #5
    7178:	0100630a 	tsteq	r0, sl, lsl #6
    717c:	0000971b 	andeq	r9, r0, fp, lsl r7
    7180:	00690a00 	rsbeq	r0, r9, r0, lsl #20
    7184:	007e1c01 	rsbseq	r1, lr, r1, lsl #24
    7188:	14000000 	strne	r0, [r0], #-0
    718c:	0000008c 	andeq	r0, r0, ip, lsl #1
    7190:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    7194:	0000b815 	andeq	fp, r0, r5, lsl r8
    7198:	16001f00 	strne	r1, [r0], -r0, lsl #30
    719c:	00001906 	andeq	r1, r0, r6, lsl #18
    71a0:	31185b01 	tstcc	r8, r1, lsl #22
    71a4:	01a00800 	lsleq	r0, r0, #16
    71a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    71ac:	000004d7 	ldrdeq	r0, [r0], -r7
    71b0:	01006e17 	tsteq	r0, r7, lsl lr
    71b4:	0001155b 	andeq	r1, r1, fp, asr r5
    71b8:	003ca200 	eorseq	sl, ip, r0, lsl #4
    71bc:	00781700 	rsbseq	r1, r8, r0, lsl #14
    71c0:	011b5c01 	tsteq	fp, r1, lsl #24
    71c4:	3ce10000 	stclcc	0, cr0, [r1]
    71c8:	6c170000 	ldcvs	0, cr0, [r7], {-0}
    71cc:	01006e65 	tsteq	r0, r5, ror #28
    71d0:	0000ad5c 	andeq	sl, r0, ip, asr sp
    71d4:	003d2000 	eorseq	r2, sp, r0
    71d8:	1a271800 	bne	9cd1e0 <__Stack_Size+0x9cc9e0>
    71dc:	5d010000 	stcpl	0, cr0, [r1, #-0]
    71e0:	0000011b 	andeq	r0, r0, fp, lsl r1
    71e4:	00003d64 	andeq	r3, r0, r4, ror #26
    71e8:	001a8209 	andseq	r8, sl, r9, lsl #4
    71ec:	d75f0100 	ldrble	r0, [pc, -r0, lsl #2]
    71f0:	19000004 	stmdbne	r0, {r2}
    71f4:	000019c7 	andeq	r1, r0, r7, asr #19
    71f8:	04d76001 	ldrbeq	r6, [r7], #1
    71fc:	3da80000 	stccc	0, cr0, [r8]
    7200:	d5190000 	ldrle	r0, [r9, #-0]
    7204:	01000019 	tsteq	r0, r9, lsl r0
    7208:	0004d761 	andeq	sp, r4, r1, ror #14
    720c:	003dc600 	eorseq	ip, sp, r0, lsl #12
    7210:	19ed1900 	stmibne	sp!, {r8, fp, ip}^
    7214:	62010000 	andvs	r0, r1, #0
    7218:	000004d7 	ldrdeq	r0, [r0], -r7
    721c:	00003de4 	andeq	r3, r0, r4, ror #27
    7220:	0100691a 	tsteq	r0, sl, lsl r9
    7224:	00007e63 	andeq	r7, r0, r3, ror #28
    7228:	003e0f00 	eorseq	r0, lr, r0, lsl #30
    722c:	023e1b00 	eorseq	r1, lr, #0, 22
    7230:	31260000 	teqcc	r6, r0
    7234:	06480800 	strbeq	r0, [r8], -r0, lsl #16
    7238:	5f010000 	svcpl	0x00010000
    723c:	0000037d 	andeq	r0, r0, sp, ror r3
    7240:	00024e10 	andeq	r4, r2, r0, lsl lr
    7244:	003e8800 	eorseq	r8, lr, r0, lsl #16
    7248:	06481c00 	strbeq	r1, [r8], -r0, lsl #24
    724c:	57110000 	ldrpl	r0, [r1, -r0]
    7250:	cc000002 	stcgt	0, cr0, [r0], {2}
    7254:	1100003e 	tstne	r0, lr, lsr r0
    7258:	00000260 	andeq	r0, r0, r0, ror #4
    725c:	00003f2a 	andeq	r3, r0, sl, lsr #30
    7260:	261d0000 	ldrcs	r0, [sp], -r0
    7264:	48000001 	stmdami	r0, {r0}
    7268:	08080031 	stmdaeq	r8, {r0, r4, r5}
    726c:	01000000 	mrseq	r0, (UNDEF: 0)
    7270:	0003a35f 	andeq	sl, r3, pc, asr r3
    7274:	013f1000 	teqeq	pc, r0
    7278:	3f680000 	svccc	0x00680000
    727c:	36100000 	ldrcc	r0, [r0], -r0
    7280:	b8000001 	stmdalt	r0, {r0}
    7284:	0000003f 	andeq	r0, r0, pc, lsr r0
    7288:	0001491d 	andeq	r4, r1, sp, lsl r9
    728c:	0031f800 	eorseq	pc, r1, r0, lsl #16
    7290:	00001408 	andeq	r1, r0, r8, lsl #8
    7294:	dd6b0100 	stflee	f0, [fp, #-0]
    7298:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    729c:	0000015e 	andeq	r0, r0, lr, asr r1
    72a0:	0001551e 	andeq	r5, r1, lr, lsl r5
    72a4:	31f81f00 	mvnscc	r1, r0, lsl #30
    72a8:	00140800 	andseq	r0, r4, r0, lsl #16
    72ac:	67110000 	ldrvs	r0, [r1, -r0]
    72b0:	cb000001 	blgt	72bc <__Stack_Size+0x6abc>
    72b4:	1100003f 	tstne	r0, pc, lsr r0
    72b8:	00000170 	andeq	r0, r0, r0, ror r1
    72bc:	00003fe9 	andeq	r3, r0, r9, ror #31
    72c0:	2a200000 	bcs	8072c8 <__Stack_Size+0x806ac8>
    72c4:	62080032 	andvs	r0, r8, #50	; 0x32
    72c8:	bb000000 	bllt	72d0 <__Stack_Size+0x6ad0>
    72cc:	1a000004 	bne	72e4 <__Stack_Size+0x6ae4>
    72d0:	00746962 	rsbseq	r6, r4, r2, ror #18
    72d4:	01217001 	teqeq	r1, r1
    72d8:	40140000 	andsmi	r0, r4, r0
    72dc:	491b0000 	ldmdbmi	fp, {}	; <UNPREDICTABLE>
    72e0:	36000001 	strcc	r0, [r0], -r1
    72e4:	68080032 	stmdavs	r8, {r1, r4, r5}
    72e8:	01000006 	tsteq	r0, r6
    72ec:	00043372 	andeq	r3, r4, r2, ror r3
    72f0:	015e1000 	cmpeq	lr, r0
    72f4:	40270000 	eormi	r0, r7, r0
    72f8:	551e0000 	ldrpl	r0, [lr, #-0]
    72fc:	1c000001 	stcne	0, cr0, [r0], {1}
    7300:	00000668 	andeq	r0, r0, r8, ror #12
    7304:	00016711 	andeq	r6, r1, r1, lsl r7
    7308:	00403b00 	subeq	r3, r0, r0, lsl #22
    730c:	01701100 	cmneq	r0, r0, lsl #2
    7310:	405a0000 	subsmi	r0, sl, r0
    7314:	00000000 	andeq	r0, r0, r0
    7318:	00026a21 	andeq	r6, r2, r1, lsr #20
    731c:	00325200 	eorseq	r5, r2, r0, lsl #4
    7320:	00068008 	andeq	r8, r6, r8
    7324:	1e740100 	rpwnes	f0, f4, f0
    7328:	0000027f 	andeq	r0, r0, pc, ror r2
    732c:	00027610 	andeq	r7, r2, r0, lsl r6
    7330:	00409100 	subeq	r9, r0, r0, lsl #2
    7334:	06801c00 	streq	r1, [r0], r0, lsl #24
    7338:	88220000 	stmdahi	r2!, {}	; <UNPREDICTABLE>
    733c:	03000002 	movweq	r0, #2
    7340:	117fb891 			; <UNDEFINED> instruction: 0x117fb891
    7344:	00000293 	muleq	r0, r3, r2
    7348:	000040a4 	andeq	r4, r0, r4, lsr #1
    734c:	00029c11 	andeq	r9, r2, r1, lsl ip
    7350:	0040dc00 	subeq	sp, r0, r0, lsl #24
    7354:	00c82300 	sbceq	r2, r8, r0, lsl #6
    7358:	32720000 	rsbscc	r0, r2, #0
    735c:	001a0800 	andseq	r0, sl, r0, lsl #16
    7360:	24010000 	strcs	r0, [r1], #-0
    7364:	0000f510 	andeq	pc, r0, r0, lsl r5	; <UNPREDICTABLE>
    7368:	00411300 	subeq	r1, r1, r0, lsl #6
    736c:	00ea1e00 	rsceq	r1, sl, r0, lsl #28
    7370:	df100000 	svcle	0x00100000
    7374:	34000000 	strcc	r0, [r0], #-0
    7378:	1e000041 	cdpne	0, 0, cr0, cr0, cr1, {2}
    737c:	000000d4 	ldrdeq	r0, [r0], -r4
    7380:	0032721f 	eorseq	r7, r2, pc, lsl r2
    7384:	00001a08 	andeq	r1, r0, r8, lsl #20
    7388:	01001100 	mrseq	r1, (UNDEF: 16)
    738c:	41470000 	mrsmi	r0, (UNDEF: 71)
    7390:	0b110000 	bleq	447398 <__Stack_Size+0x446b98>
    7394:	5a000001 	bpl	73a0 <__Stack_Size+0x6ba0>
    7398:	00000041 	andeq	r0, r0, r1, asr #32
    739c:	00000000 	andeq	r0, r0, r0
    73a0:	00315e24 	eorseq	r5, r1, r4, lsr #28
    73a4:	000d5a08 	andeq	r5, sp, r8, lsl #20
    73a8:	52011300 	andpl	r1, r1, #0, 6
    73ac:	13200802 	teqne	r0, #131072	; 0x20000
    73b0:	30015101 	andcc	r5, r1, r1, lsl #2
    73b4:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    73b8:	00000074 	andeq	r0, r0, r4, ror r0
    73bc:	00007e0c 	andeq	r7, r0, ip, lsl #28
    73c0:	1a901600 	bne	fe40cbc8 <BootRAM+0xd37d369>
    73c4:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    73c8:	00000000 	andeq	r0, r0, r0
    73cc:	0000002c 	andeq	r0, r0, ip, lsr #32
    73d0:	05619c01 	strbeq	r9, [r1, #-3073]!	; 0xc01
    73d4:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
    73d8:	15780100 	ldrbne	r0, [r8, #-256]!	; 0x100
    73dc:	79000001 	stmdbvc	r0, {r0}
    73e0:	18000041 	stmdane	r0, {r0, r6}
    73e4:	00001a27 	andeq	r1, r0, r7, lsr #20
    73e8:	011b7801 	tsteq	fp, r1, lsl #16
    73ec:	41a20000 			; <UNDEFINED> instruction: 0x41a20000
    73f0:	6e250000 	cdpvs	0, 2, cr0, cr5, cr0, {0}
    73f4:	a67a0100 	ldrbtge	r0, [sl], -r0, lsl #2
    73f8:	02000002 	andeq	r0, r0, #2
    73fc:	7a1d5091 	bvc	75b648 <__Stack_Size+0x75ae48>
    7400:	00000001 	andeq	r0, r0, r1
    7404:	16000000 	strne	r0, [r0], -r0
    7408:	01000000 	mrseq	r0, (UNDEF: 0)
    740c:	00053d7d 	andeq	r3, r5, sp, ror sp
    7410:	018f1000 	orreq	r1, pc, r0
    7414:	41ce0000 	bicmi	r0, lr, r0
    7418:	86260000 	strthi	r0, [r6], -r0
    741c:	01000001 	tsteq	r0, r1
    7420:	00240055 	eoreq	r0, r4, r5, asr r0
    7424:	b6000000 	strlt	r0, [r0], -r0
    7428:	13000002 	movwne	r0, #2
    742c:	f3035301 	vcgt.u8	d5, d3, d1
    7430:	01135101 	tsteq	r3, r1, lsl #2
    7434:	20080252 	andcs	r0, r8, r2, asr r2
    7438:	02510113 	subseq	r0, r1, #-1073741820	; 0xc0000004
    743c:	01130075 	tsteq	r3, r5, ror r0
    7440:	007d0250 	rsbseq	r0, sp, r0, asr r2
    7444:	51270000 	teqpl	r7, r0
    7448:	0100001a 	tsteq	r0, sl, lsl r0
    744c:	00008c80 	andeq	r8, r0, r0, lsl #25
    7450:	00000000 	andeq	r0, r0, r0
    7454:	00009a00 	andeq	r9, r0, r0, lsl #20
    7458:	b19c0100 	orrslt	r0, ip, r0, lsl #2
    745c:	17000005 	strne	r0, [r0, -r5]
    7460:	80010078 	andhi	r0, r1, r8, ror r0
    7464:	0000011b 	andeq	r0, r0, fp, lsl r1
    7468:	000041ee 	andeq	r4, r0, lr, ror #3
    746c:	01007917 	tsteq	r0, r7, lsl r9
    7470:	00011b80 	andeq	r1, r1, r0, lsl #23
    7474:	00421a00 	subeq	r1, r2, r0, lsl #20
    7478:	75731a00 	ldrbvc	r1, [r3, #-2560]!	; 0xa00
    747c:	8201006d 	andhi	r0, r1, #109	; 0x6d
    7480:	0000008c 	andeq	r0, r0, ip, lsl #1
    7484:	00004246 	andeq	r4, r0, r6, asr #4
    7488:	0100691a 	tsteq	r0, sl, lsl r9
    748c:	00007e83 	andeq	r7, r0, r3, lsl #29
    7490:	00428e00 	subeq	r8, r2, r0, lsl #28
    7494:	c80f0000 	stmdagt	pc, {}	; <UNPREDICTABLE>
    7498:	00000000 	andeq	r0, r0, r0
    749c:	c2000000 	andgt	r0, r0, #0
    74a0:	01000000 	mrseq	r0, (UNDEF: 0)
    74a4:	0005f99c 	muleq	r5, ip, r9
    74a8:	00d42600 	sbcseq	r2, r4, r0, lsl #12
    74ac:	50010000 	andpl	r0, r1, r0
    74b0:	0000df10 	andeq	sp, r0, r0, lsl pc
    74b4:	0042d100 	subeq	sp, r2, r0, lsl #2
    74b8:	00ea1000 	rsceq	r1, sl, r0
    74bc:	42fd0000 	rscsmi	r0, sp, #0
    74c0:	f5100000 			; <UNDEFINED> instruction: 0xf5100000
    74c4:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    74c8:	11000043 	tstne	r0, r3, asr #32
    74cc:	00000100 	andeq	r0, r0, r0, lsl #2
    74d0:	0000434a 	andeq	r4, r0, sl, asr #6
    74d4:	00010b11 	andeq	r0, r1, r1, lsl fp
    74d8:	00437300 	subeq	r7, r3, r0, lsl #6
    74dc:	79060000 	stmdbvc	r6, {}	; <UNPREDICTABLE>
    74e0:	01000018 	tsteq	r0, r8, lsl r0
    74e4:	0623019a 			; <UNDEFINED> instruction: 0x0623019a
    74e8:	72070000 	andvc	r0, r7, #0
    74ec:	159a0100 	ldrne	r0, [sl, #256]	; 0x100
    74f0:	07000001 	streq	r0, [r0, -r1]
    74f4:	9a010061 	bls	47680 <__Stack_Size+0x46e80>
    74f8:	0000011b 	andeq	r0, r0, fp, lsl r1
    74fc:	001a2708 	andseq	r2, sl, r8, lsl #14
    7500:	1b9a0100 	blne	fe687908 <BootRAM+0xd5f80a9>
    7504:	00000001 	andeq	r0, r0, r1
    7508:	0005f90f 	andeq	pc, r5, pc, lsl #18
    750c:	0032b800 	eorseq	fp, r2, r0, lsl #16
    7510:	00005808 	andeq	r5, r0, r8, lsl #16
    7514:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    7518:	26000007 	strcs	r0, [r0], -r7
    751c:	00000605 	andeq	r0, r0, r5, lsl #12
    7520:	0e105001 	cdpeq	0, 1, cr5, cr0, cr1, {0}
    7524:	9e000006 	cdpls	0, 0, cr0, cr0, cr6, {0}
    7528:	10000043 	andne	r0, r0, r3, asr #32
    752c:	00000617 	andeq	r0, r0, r7, lsl r6
    7530:	000043bf 			; <UNDEFINED> instruction: 0x000043bf
    7534:	0001991b 	andeq	r9, r1, fp, lsl r9
    7538:	0032ba00 	eorseq	fp, r2, r0, lsl #20
    753c:	00069808 	andeq	r9, r6, r8, lsl #16
    7540:	8b9c0100 	blhi	fe707948 <BootRAM+0xd6780e9>
    7544:	10000006 	andne	r0, r0, r6
    7548:	000001ae 	andeq	r0, r0, lr, lsr #3
    754c:	000043e0 	andeq	r4, r0, r0, ror #7
    7550:	0001a526 	andeq	sl, r1, r6, lsr #10
    7554:	1c500100 	ldfnee	f0, [r0], {-0}
    7558:	00000698 	muleq	r0, r8, r6
    755c:	0001b711 	andeq	fp, r1, r1, lsl r7
    7560:	00440100 	subeq	r0, r4, r0, lsl #2
    7564:	01c01100 	biceq	r1, r0, r0, lsl #2
    7568:	44200000 	strtmi	r0, [r0], #-0
    756c:	00000000 	andeq	r0, r0, r0
    7570:	00026a23 	andeq	r6, r2, r3, lsr #20
    7574:	0032d800 	eorseq	sp, r2, r0, lsl #16
    7578:	00003208 	andeq	r3, r0, r8, lsl #4
    757c:	1e9d0100 	fmlnee	f0, f5, f0
    7580:	0000027f 	andeq	r0, r0, pc, ror r2
    7584:	0002761e 	andeq	r7, r2, lr, lsl r6
    7588:	32d81f00 	sbcscc	r1, r8, #0, 30
    758c:	00320800 	eorseq	r0, r2, r0, lsl #16
    7590:	88220000 	stmdahi	r2!, {}	; <UNPREDICTABLE>
    7594:	02000002 	andeq	r0, r0, #2
    7598:	93115091 	tstls	r1, #145	; 0x91
    759c:	57000002 	strpl	r0, [r0, -r2]
    75a0:	11000044 	tstne	r0, r4, asr #32
    75a4:	0000029c 	muleq	r0, ip, r2
    75a8:	00004483 	andeq	r4, r0, r3, lsl #9
    75ac:	0000c823 	andeq	ip, r0, r3, lsr #16
    75b0:	0032f000 	eorseq	pc, r2, r0
    75b4:	00001a08 	andeq	r1, r0, r8, lsl #20
    75b8:	10240100 	eorne	r0, r4, r0, lsl #2
    75bc:	000000f5 	strdeq	r0, [r0], -r5
    75c0:	000044ae 	andeq	r4, r0, lr, lsr #9
    75c4:	0000ea26 	andeq	lr, r0, r6, lsr #20
    75c8:	10500100 	subsne	r0, r0, r0, lsl #2
    75cc:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    75d0:	000044cf 	andeq	r4, r0, pc, asr #9
    75d4:	0000d426 	andeq	sp, r0, r6, lsr #8
    75d8:	1f500100 	svcne	0x00500100
    75dc:	080032f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, ip, sp}
    75e0:	0000001a 	andeq	r0, r0, sl, lsl r0
    75e4:	00010022 	andeq	r0, r1, r2, lsr #32
    75e8:	11510100 	cmpne	r1, r0, lsl #2
    75ec:	0000010b 	andeq	r0, r0, fp, lsl #2
    75f0:	000044fc 	strdeq	r4, [r0], -ip
    75f4:	00000000 	andeq	r0, r0, r0
    75f8:	1a141600 	bne	50ce00 <__Stack_Size+0x50c600>
    75fc:	a0010000 	andge	r0, r1, r0
    7600:	00000000 	andeq	r0, r0, r0
    7604:	0000008e 	andeq	r0, r0, lr, lsl #1
    7608:	08a99c01 	stmiaeq	r9!, {r0, sl, fp, ip, pc}
    760c:	72280000 	eorvc	r0, r8, #0
    7610:	15a00100 	strne	r0, [r0, #256]!	; 0x100
    7614:	01000001 	tsteq	r0, r1
    7618:	00611750 	rsbeq	r1, r1, r0, asr r7
    761c:	011ba001 	tsteq	fp, r1
    7620:	451b0000 	ldrmi	r0, [fp, #-0]
    7624:	27180000 	ldrcs	r0, [r8, -r0]
    7628:	0100001a 	tsteq	r0, sl, lsl r0
    762c:	00011ba0 	andeq	r1, r1, r0, lsr #23
    7630:	00453c00 	subeq	r3, r5, r0, lsl #24
    7634:	01991b00 	orrseq	r1, r9, r0, lsl #22
    7638:	00000000 	andeq	r0, r0, r0
    763c:	06b00000 	ldrteq	r0, [r0], r0
    7640:	a2010000 	andge	r0, r1, #0
    7644:	0000078c 	andeq	r0, r0, ip, lsl #15
    7648:	0001ae10 	andeq	sl, r1, r0, lsl lr
    764c:	00455d00 	subeq	r5, r5, r0, lsl #26
    7650:	01a52600 			; <UNDEFINED> instruction: 0x01a52600
    7654:	50010000 	andpl	r0, r1, r0
    7658:	0006b01c 	andeq	fp, r6, ip, lsl r0
    765c:	01b71100 			; <UNDEFINED> instruction: 0x01b71100
    7660:	457e0000 	ldrbmi	r0, [lr, #-0]!
    7664:	c0110000 	andsgt	r0, r1, r0
    7668:	9d000001 	stcls	0, cr0, [r0, #-4]
    766c:	00000045 	andeq	r0, r0, r5, asr #32
    7670:	026a1d00 	rsbeq	r1, sl, #0, 26
    7674:	00000000 	andeq	r0, r0, r0
    7678:	00320000 	eorseq	r0, r2, r0
    767c:	a3010000 	movwge	r0, #4096	; 0x1000
    7680:	0000081a 	andeq	r0, r0, sl, lsl r8
    7684:	00027f1e 	andeq	r7, r2, lr, lsl pc
    7688:	02761e00 	rsbseq	r1, r6, #0, 28
    768c:	001f0000 	andseq	r0, pc, r0
    7690:	32000000 	andcc	r0, r0, #0
    7694:	22000000 	andcs	r0, r0, #0
    7698:	00000288 	andeq	r0, r0, r8, lsl #5
    769c:	11509102 	cmpne	r0, r2, lsl #2
    76a0:	00000293 	muleq	r0, r3, r2
    76a4:	000045d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    76a8:	00029c11 	andeq	r9, r2, r1, lsl ip
    76ac:	00460000 	subeq	r0, r6, r0
    76b0:	00c82300 	sbceq	r2, r8, r0, lsl #6
    76b4:	00000000 	andeq	r0, r0, r0
    76b8:	001a0000 	andseq	r0, sl, r0
    76bc:	24010000 	strcs	r0, [r1], #-0
    76c0:	0000f510 	andeq	pc, r0, r0, lsl r5	; <UNPREDICTABLE>
    76c4:	00462b00 	subeq	r2, r6, r0, lsl #22
    76c8:	00ea2600 	rsceq	r2, sl, r0, lsl #12
    76cc:	50010000 	andpl	r0, r1, r0
    76d0:	0000df10 	andeq	sp, r0, r0, lsl pc
    76d4:	00464c00 	subeq	r4, r6, r0, lsl #24
    76d8:	00d42600 	sbcseq	r2, r4, r0, lsl #12
    76dc:	50010000 	andpl	r0, r1, r0
    76e0:	0000001f 	andeq	r0, r0, pc, lsl r0
    76e4:	00001a00 	andeq	r1, r0, r0, lsl #20
    76e8:	01001100 	mrseq	r1, (UNDEF: 16)
    76ec:	46790000 	ldrbtmi	r0, [r9], -r0
    76f0:	0b110000 	bleq	4476f8 <__Stack_Size+0x446ef8>
    76f4:	8c000001 	stchi	0, cr0, [r0], {1}
    76f8:	00000046 	andeq	r0, r0, r6, asr #32
    76fc:	23000000 	movwcs	r0, #0
    7700:	0000026a 	andeq	r0, r0, sl, ror #4
    7704:	00000000 	andeq	r0, r0, r0
    7708:	00000036 	andeq	r0, r0, r6, lsr r0
    770c:	7f10a401 	svcvc	0x0010a401
    7710:	ab000002 	blge	7720 <__Stack_Size+0x6f20>
    7714:	26000046 	strcs	r0, [r0], -r6, asr #32
    7718:	00000276 	andeq	r0, r0, r6, ror r2
    771c:	001f5001 	andseq	r5, pc, r1
    7720:	36000000 	strcc	r0, [r0], -r0
    7724:	22000000 	andcs	r0, r0, #0
    7728:	00000288 	andeq	r0, r0, r8, lsl #5
    772c:	11509102 	cmpne	r0, r2, lsl #2
    7730:	00000293 	muleq	r0, r3, r2
    7734:	000046cc 	andeq	r4, r0, ip, asr #13
    7738:	00029c11 	andeq	r9, r2, r1, lsl ip
    773c:	00470400 	subeq	r0, r7, r0, lsl #8
    7740:	00c82300 	sbceq	r2, r8, r0, lsl #6
    7744:	00000000 	andeq	r0, r0, r0
    7748:	001a0000 	andseq	r0, sl, r0
    774c:	24010000 	strcs	r0, [r1], #-0
    7750:	0000f510 	andeq	pc, r0, r0, lsl r5	; <UNPREDICTABLE>
    7754:	00473b00 	subeq	r3, r7, r0, lsl #22
    7758:	00ea2600 	rsceq	r2, sl, r0, lsl #12
    775c:	50010000 	andpl	r0, r1, r0
    7760:	0000df10 	andeq	sp, r0, r0, lsl pc
    7764:	00475c00 	subeq	r5, r7, r0, lsl #24
    7768:	00d42600 	sbcseq	r2, r4, r0, lsl #12
    776c:	50010000 	andpl	r0, r1, r0
    7770:	0000001f 	andeq	r0, r0, pc, lsl r0
    7774:	00001a00 	andeq	r1, r0, r0, lsl #20
    7778:	01002200 	mrseq	r2, R8_usr
    777c:	51010000 	mrspl	r0, (UNDEF: 1)
    7780:	00010b11 	andeq	r0, r1, r1, lsl fp
    7784:	00478900 	subeq	r8, r7, r0, lsl #18
    7788:	00000000 	andeq	r0, r0, r0
    778c:	a4160000 	ldrge	r0, [r6], #-0
    7790:	01000018 	tsteq	r0, r8, lsl r0
    7794:	003310a7 	eorseq	r1, r3, r7, lsr #1
    7798:	00013e08 	andeq	r3, r1, r8, lsl #28
    779c:	9b9c0100 	blls	fe707ba4 <BootRAM+0xd678345>
    77a0:	1700000b 	strne	r0, [r0, -fp]
    77a4:	a7010072 	smlsdxge	r1, r2, r0, r0
    77a8:	00000115 	andeq	r0, r0, r5, lsl r1
    77ac:	000047a8 	andeq	r4, r0, r8, lsr #15
    77b0:	01006117 	tsteq	r0, r7, lsl r1
    77b4:	00011ba7 	andeq	r1, r1, r7, lsr #23
    77b8:	0047c600 	subeq	ip, r7, r0, lsl #12
    77bc:	00621700 	rsbeq	r1, r2, r0, lsl #14
    77c0:	011ba701 	tsteq	fp, r1, lsl #14
    77c4:	47e40000 	strbmi	r0, [r4, r0]!
    77c8:	27180000 	ldrcs	r0, [r8, -r0]
    77cc:	0100001a 	tsteq	r0, sl, lsl r0
    77d0:	00011ba8 	andeq	r1, r1, r8, lsr #23
    77d4:	00480200 	subeq	r0, r8, r0, lsl #4
    77d8:	00691a00 	rsbeq	r1, r9, r0, lsl #20
    77dc:	007eaa01 	rsbseq	sl, lr, r1, lsl #20
    77e0:	48200000 	stmdami	r0!, {}	; <UNPREDICTABLE>
    77e4:	3e1b0000 	cdpcc	0, 1, cr0, cr11, cr0, {0}
    77e8:	26000002 	strcs	r0, [r0], -r2
    77ec:	c8080033 	stmdagt	r8, {r0, r1, r4, r5}
    77f0:	01000006 	tsteq	r0, r6
    77f4:	000934ae 	andeq	r3, r9, lr, lsr #9
    77f8:	024e2600 	subeq	r2, lr, #0, 12
    77fc:	57010000 	strpl	r0, [r1, -r0]
    7800:	0006c81c 	andeq	ip, r6, ip, lsl r8
    7804:	02571100 	subseq	r1, r7, #0, 2
    7808:	484d0000 	stmdami	sp, {}^	; <UNPREDICTABLE>
    780c:	60110000 	andsvs	r0, r1, r0
    7810:	9e000002 	cdpls	0, 0, cr0, cr0, cr2, {0}
    7814:	00000048 	andeq	r0, r0, r8, asr #32
    7818:	334a2000 	movtcc	r2, #40960	; 0xa000
    781c:	00ea0800 	rsceq	r0, sl, r0, lsl #16
    7820:	0b7f0000 	bleq	1fc7828 <__Stack_Size+0x1fc7028>
    7824:	621a0000 	andsvs	r0, sl, #0
    7828:	01007469 	tsteq	r0, r9, ror #8
    782c:	000121af 	andeq	r2, r1, pc, lsr #3
    7830:	0048d000 	subeq	sp, r8, r0
    7834:	19f32900 	ldmibne	r3!, {r8, fp, sp}^
    7838:	b0010000 	andlt	r0, r1, r0
    783c:	000002a6 	andeq	r0, r0, r6, lsr #5
    7840:	7f989103 	svcvc	0x00989103
    7844:	0001491b 	andeq	r4, r1, fp, lsl r9
    7848:	00335a00 	eorseq	r5, r3, r0, lsl #20
    784c:	0006e008 	andeq	lr, r6, r8
    7850:	99b20100 	ldmibls	r2!, {r8}
    7854:	10000009 	andne	r0, r0, r9
    7858:	0000015e 	andeq	r0, r0, lr, asr r1
    785c:	000048f1 	strdeq	r4, [r0], -r1
    7860:	0001551e 	andeq	r5, r1, lr, lsl r5
    7864:	06e01c00 	strbteq	r1, [r0], r0, lsl #24
    7868:	67110000 	ldrvs	r0, [r1, -r0]
    786c:	05000001 	streq	r0, [r0, #-1]
    7870:	11000049 	tstne	r0, r9, asr #32
    7874:	00000170 	andeq	r0, r0, r0, ror r1
    7878:	00004924 	andeq	r4, r0, r4, lsr #18
    787c:	6a1d0000 	bvs	747884 <__Stack_Size+0x747084>
    7880:	78000002 	stmdavc	r0, {r1}
    7884:	2e080033 	mcrcs	0, 0, r0, cr8, cr3, {1}
    7888:	01000000 	mrseq	r0, (UNDEF: 0)
    788c:	000a24b3 			; <UNDEFINED> instruction: 0x000a24b3
    7890:	027f1e00 	rsbseq	r1, pc, #0, 28
    7894:	761e0000 	ldrvc	r0, [lr], -r0
    7898:	1f000002 	svcne	0x00000002
    789c:	08003378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, ip, sp}
    78a0:	0000002e 	andeq	r0, r0, lr, lsr #32
    78a4:	00028822 	andeq	r8, r2, r2, lsr #16
    78a8:	b8910300 	ldmlt	r1, {r8, r9}
    78ac:	0293117f 	addseq	r1, r3, #-1073741793	; 0xc000001f
    78b0:	495b0000 	ldmdbmi	fp, {}^	; <UNPREDICTABLE>
    78b4:	9c110000 	ldcls	0, cr0, [r1], {-0}
    78b8:	87000002 	strhi	r0, [r0, -r2]
    78bc:	23000049 	movwcs	r0, #73	; 0x49
    78c0:	000000c8 	andeq	r0, r0, r8, asr #1
    78c4:	0800338e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, ip, sp}
    78c8:	00000018 	andeq	r0, r0, r8, lsl r0
    78cc:	f5102401 			; <UNDEFINED> instruction: 0xf5102401
    78d0:	b2000000 	andlt	r0, r0, #0
    78d4:	1e000049 	cdpne	0, 0, cr0, cr0, cr9, {2}
    78d8:	000000ea 	andeq	r0, r0, sl, ror #1
    78dc:	0000df10 	andeq	sp, r0, r0, lsl pc
    78e0:	0049d300 	subeq	sp, r9, r0, lsl #6
    78e4:	00d41e00 	sbcseq	r1, r4, r0, lsl #28
    78e8:	8e1f0000 	cdphi	0, 1, cr0, cr15, cr0, {0}
    78ec:	18080033 	stmdane	r8, {r0, r1, r4, r5}
    78f0:	11000000 	mrsne	r0, (UNDEF: 0)
    78f4:	00000100 	andeq	r0, r0, r0, lsl #2
    78f8:	000049e6 	andeq	r4, r0, r6, ror #19
    78fc:	00010b11 	andeq	r0, r1, r1, lsl fp
    7900:	0049f900 	subeq	pc, r9, r0, lsl #18
    7904:	00000000 	andeq	r0, r0, r0
    7908:	017a1b00 	cmneq	sl, r0, lsl #22
    790c:	33a60000 			; <UNDEFINED> instruction: 0x33a60000
    7910:	06f80800 	ldrbteq	r0, [r8], r0, lsl #16
    7914:	b5010000 	strlt	r0, [r1, #-0]
    7918:	00000a4a 	andeq	r0, r0, sl, asr #20
    791c:	00018f10 	andeq	r8, r1, r0, lsl pc
    7920:	004a1800 	subeq	r1, sl, r0, lsl #16
    7924:	01861000 	orreq	r1, r6, r0
    7928:	4a2b0000 	bmi	ac7930 <__Stack_Size+0xac7130>
    792c:	1b000000 	blne	7934 <__Stack_Size+0x7134>
    7930:	000005f9 	strdeq	r0, [r0], -r9
    7934:	080033ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, ip, sp}
    7938:	00000710 	andeq	r0, r0, r0, lsl r7
    793c:	0b36b601 	bleq	db5148 <__Stack_Size+0xdb4948>
    7940:	171e0000 	ldrne	r0, [lr, -r0]
    7944:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    7948:	0000060e 	andeq	r0, r0, lr, lsl #12
    794c:	00060510 	andeq	r0, r6, r0, lsl r5
    7950:	004a3e00 	subeq	r3, sl, r0, lsl #28
    7954:	01991b00 	orrseq	r1, r9, r0, lsl #22
    7958:	33ba0000 			; <UNDEFINED> instruction: 0x33ba0000
    795c:	07280800 	streq	r0, [r8, -r0, lsl #16]!
    7960:	9c010000 	stcls	0, cr0, [r1], {-0}
    7964:	00000aa6 	andeq	r0, r0, r6, lsr #21
    7968:	0001ae1e 	andeq	sl, r1, lr, lsl lr
    796c:	01a51e00 			; <UNDEFINED> instruction: 0x01a51e00
    7970:	281c0000 	ldmdacs	ip, {}	; <UNPREDICTABLE>
    7974:	11000007 	tstne	r0, r7
    7978:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
    797c:	00004a51 	andeq	r4, r0, r1, asr sl
    7980:	0001c011 	andeq	ip, r1, r1, lsl r0
    7984:	004a8600 	subeq	r8, sl, r0, lsl #12
    7988:	23000000 	movwcs	r0, #0
    798c:	0000026a 	andeq	r0, r0, sl, ror #4
    7990:	080033e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip, sp}
    7994:	00000034 	andeq	r0, r0, r4, lsr r0
    7998:	7f1e9d01 	svcvc	0x001e9d01
    799c:	1e000002 	cdpne	0, 0, cr0, cr0, cr2, {0}
    79a0:	00000276 	andeq	r0, r0, r6, ror r2
    79a4:	0033e01f 	eorseq	lr, r3, pc, lsl r0
    79a8:	00003408 	andeq	r3, r0, r8, lsl #8
    79ac:	02882200 	addeq	r2, r8, #0, 4
    79b0:	91030000 	mrsls	r0, (UNDEF: 3)
    79b4:	93117fb8 	tstls	r1, #184, 30	; 0x2e0
    79b8:	bd000002 	stclt	0, cr0, [r0, #-8]
    79bc:	1100004a 	tstne	r0, sl, asr #32
    79c0:	0000029c 	muleq	r0, ip, r2
    79c4:	00004ae9 	andeq	r4, r0, r9, ror #21
    79c8:	0000c823 	andeq	ip, r0, r3, lsr #16
    79cc:	0033f800 	eorseq	pc, r3, r0, lsl #16
    79d0:	00001c08 	andeq	r1, r0, r8, lsl #24
    79d4:	10240100 	eorne	r0, r4, r0, lsl #2
    79d8:	000000f5 	strdeq	r0, [r0], -r5
    79dc:	00004b14 	andeq	r4, r0, r4, lsl fp
    79e0:	0000ea10 	andeq	lr, r0, r0, lsl sl
    79e4:	004b3500 	subeq	r3, fp, r0, lsl #10
    79e8:	00df1000 	sbcseq	r1, pc, r0
    79ec:	4b480000 	blmi	12079f4 <__Stack_Size+0x12071f4>
    79f0:	d4100000 	ldrle	r0, [r0], #-0
    79f4:	35000000 	strcc	r0, [r0, #-0]
    79f8:	1f00004b 	svcne	0x0000004b
    79fc:	080033f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip, sp}
    7a00:	0000001c 	andeq	r0, r0, ip, lsl r0
    7a04:	00010011 	andeq	r0, r1, r1, lsl r0
    7a08:	004b5b00 	subeq	r5, fp, r0, lsl #22
    7a0c:	010b1100 	mrseq	r1, (UNDEF: 27)
    7a10:	4b6e0000 	blmi	1b87a18 <__Stack_Size+0x1b87218>
    7a14:	00000000 	andeq	r0, r0, r0
    7a18:	23000000 	movwcs	r0, #0
    7a1c:	000000c8 	andeq	r0, r0, r8, asr #1
    7a20:	08003414 	stmdaeq	r0, {r2, r4, sl, ip, sp}
    7a24:	00000020 	andeq	r0, r0, r0, lsr #32
    7a28:	f510b801 			; <UNDEFINED> instruction: 0xf510b801
    7a2c:	8d000000 	stchi	0, cr0, [r0, #-0]
    7a30:	1000004b 	andne	r0, r0, fp, asr #32
    7a34:	000000ea 	andeq	r0, r0, sl, ror #1
    7a38:	00004bae 	andeq	r4, r0, lr, lsr #23
    7a3c:	0000df1e 	andeq	sp, r0, lr, lsl pc
    7a40:	00d41e00 	sbcseq	r1, r4, r0, lsl #28
    7a44:	141f0000 	ldrne	r0, [pc], #-0	; 7a4c <__Stack_Size+0x724c>
    7a48:	20080034 	andcs	r0, r8, r4, lsr r0
    7a4c:	11000000 	mrsne	r0, (UNDEF: 0)
    7a50:	00000100 	andeq	r0, r0, r0, lsl #2
    7a54:	00004bc1 	andeq	r4, r0, r1, asr #23
    7a58:	00010b11 	andeq	r0, r1, r1, lsl fp
    7a5c:	004bd400 	subeq	sp, fp, r0, lsl #8
    7a60:	00000000 	andeq	r0, r0, r0
    7a64:	00332624 	eorseq	r2, r3, r4, lsr #12
    7a68:	000d5a08 	andeq	r5, sp, r8, lsl #20
    7a6c:	52011300 	andpl	r1, r1, #0, 6
    7a70:	13200802 	teqne	r0, #131072	; 0x20000
    7a74:	30015101 	andcc	r5, r1, r1, lsl #2
    7a78:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    7a7c:	00000075 	andeq	r0, r0, r5, ror r0
    7a80:	0019e216 	andseq	lr, r9, r6, lsl r2
    7a84:	00bc0100 	adcseq	r0, ip, r0, lsl #2
    7a88:	d2000000 	andle	r0, r0, #0
    7a8c:	01000000 	mrseq	r0, (UNDEF: 0)
    7a90:	000d2e9c 	muleq	sp, ip, lr
    7a94:	00721700 	rsbseq	r1, r2, r0, lsl #14
    7a98:	0115bc01 	tsteq	r5, r1, lsl #24
    7a9c:	4bf30000 	blmi	ffcc7aa4 <BootRAM+0xec38245>
    7aa0:	61170000 	tstvs	r7, r0
    7aa4:	1bbc0100 	blne	fef07eac <BootRAM+0xde7864d>
    7aa8:	11000001 	tstne	r0, r1
    7aac:	1800004c 	stmdane	r0, {r2, r3, r6}
    7ab0:	00001a27 	andeq	r1, r0, r7, lsr #20
    7ab4:	011bbc01 	tsteq	fp, r1, lsl #24
    7ab8:	4c2f0000 	stcmi	0, cr0, [pc], #-0	; 7ac0 <__Stack_Size+0x72c0>
    7abc:	70250000 	eorvc	r0, r5, r0
    7ac0:	0100326d 	tsteq	r0, sp, ror #4
    7ac4:	0002a6be 			; <UNDEFINED> instruction: 0x0002a6be
    7ac8:	a8910300 	ldmge	r1, {r8, r9}
    7acc:	00631a7f 	rsbeq	r1, r3, pc, ror sl
    7ad0:	0097bf01 	addseq	fp, r7, r1, lsl #30
    7ad4:	4c4d0000 	marmi	acc0, r0, sp
    7ad8:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
    7adc:	7ec00100 	polvcs	f0, f0, f0
    7ae0:	82000000 	andhi	r0, r0, #0
    7ae4:	1b00004c 	blne	7c1c <__Stack_Size+0x741c>
    7ae8:	0000017a 	andeq	r0, r0, sl, ror r1
    7aec:	00000000 	andeq	r0, r0, r0
    7af0:	00000740 	andeq	r0, r0, r0, asr #14
    7af4:	0c28c301 	stceq	3, cr12, [r8], #-4
    7af8:	8f100000 	svchi	0x00100000
    7afc:	01000001 	tsteq	r0, r1
    7b00:	1000004d 	andne	r0, r0, sp, asr #32
    7b04:	00000186 	andeq	r0, r0, r6, lsl #3
    7b08:	00004d1f 	andeq	r4, r0, pc, lsl sp
    7b0c:	01ca1d00 	biceq	r1, sl, r0, lsl #26
    7b10:	00000000 	andeq	r0, r0, r0
    7b14:	00180000 	andseq	r0, r8, r0
    7b18:	cb010000 	blgt	47b20 <__Stack_Size+0x47320>
    7b1c:	00000c5d 	andeq	r0, r0, sp, asr ip
    7b20:	0001df10 	andeq	sp, r1, r0, lsl pc
    7b24:	004d4b00 	subeq	r4, sp, r0, lsl #22
    7b28:	01d61e00 	bicseq	r1, r6, r0, lsl #28
    7b2c:	001f0000 	andseq	r0, pc, r0
    7b30:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7b34:	11000000 	mrsne	r0, (UNDEF: 0)
    7b38:	000001e8 	andeq	r0, r0, r8, ror #3
    7b3c:	00004d6b 	andeq	r4, r0, fp, ror #26
    7b40:	3e1b0000 	cdpcc	0, 1, cr0, cr11, cr0, {0}
    7b44:	00000002 	andeq	r0, r0, r2
    7b48:	60000000 	andvs	r0, r0, r0
    7b4c:	01000007 	tsteq	r0, r7
    7b50:	000c8ecd 	andeq	r8, ip, sp, asr #29
    7b54:	024e1e00 	subeq	r1, lr, #0, 28
    7b58:	601c0000 	andsvs	r0, ip, r0
    7b5c:	11000007 	tstne	r0, r7
    7b60:	00000257 	andeq	r0, r0, r7, asr r2
    7b64:	00004daf 	andeq	r4, r0, pc, lsr #27
    7b68:	00026011 	andeq	r6, r2, r1, lsl r0
    7b6c:	004e0c00 	subeq	r0, lr, r0, lsl #24
    7b70:	2a000000 	bcs	7b78 <__Stack_Size+0x7378>
    7b74:	00000778 	andeq	r0, r0, r8, ror r7
    7b78:	00000d13 	andeq	r0, r0, r3, lsl sp
    7b7c:	00327225 	eorseq	r7, r2, r5, lsr #4
    7b80:	02a6ce01 	adceq	ip, r6, #1, 28
    7b84:	91020000 	mrsls	r0, (UNDEF: 2)
    7b88:	017a1b48 	cmneq	sl, r8, asr #22
    7b8c:	00000000 	andeq	r0, r0, r0
    7b90:	07980000 	ldreq	r0, [r8, r0]
    7b94:	d5010000 	strle	r0, [r1, #-0]
    7b98:	00000cca 	andeq	r0, r0, sl, asr #25
    7b9c:	00018f10 	andeq	r8, r1, r0, lsl pc
    7ba0:	004e3e00 	subeq	r3, lr, r0, lsl #28
    7ba4:	01861000 	orreq	r1, r6, r0
    7ba8:	4e9d0000 	cdpmi	0, 9, cr0, cr13, cr0, {0}
    7bac:	2b000000 	blcs	7bb4 <__Stack_Size+0x73b4>
    7bb0:	00000000 	andeq	r0, r0, r0
    7bb4:	000008a9 	andeq	r0, r0, r9, lsr #17
    7bb8:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    7bbc:	02530113 	subseq	r0, r3, #-1073741820	; 0xc0000004
    7bc0:	01130077 	tsteq	r3, r7, ror r0
    7bc4:	00760252 	rsbseq	r0, r6, r2, asr r2
    7bc8:	02510113 	subseq	r0, r1, #-1073741820	; 0xc0000004
    7bcc:	01130076 	tsteq	r3, r6, ror r0
    7bd0:	48910250 	ldmmi	r1, {r4, r6, r9}
    7bd4:	00002400 	andeq	r2, r0, r0, lsl #8
    7bd8:	08a90000 	stmiaeq	r9!, {}	; <UNPREDICTABLE>
    7bdc:	01130000 	tsteq	r3, r0
    7be0:	00770253 	rsbseq	r0, r7, r3, asr r2
    7be4:	02520113 	subseq	r0, r2, #-1073741820	; 0xc0000004
    7be8:	01130078 	tsteq	r3, r8, ror r0
    7bec:	48910251 	ldmmi	r1, {r0, r4, r6, r9}
    7bf0:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    7bf4:	00000076 	andeq	r0, r0, r6, ror r0
    7bf8:	00000024 	andeq	r0, r0, r4, lsr #32
    7bfc:	000d5a00 	andeq	r5, sp, r0, lsl #20
    7c00:	52011300 	andpl	r1, r1, #0, 6
    7c04:	01134c01 	tsteq	r3, r1, lsl #24
    7c08:	13300151 	teqne	r0, #1073741844	; 0x40000014
    7c0c:	76025001 	strvc	r5, [r2], -r1
    7c10:	2c000004 	stccs	0, cr0, [r0], {4}
    7c14:	00001a2f 	andeq	r1, r0, pc, lsr #20
    7c18:	0d3f0901 	ldceq	9, cr0, [pc, #-4]!	; 7c1c <__Stack_Size+0x741c>
    7c1c:	03050000 	movweq	r0, #20480	; 0x5000
    7c20:	00000000 	andeq	r0, r0, r0
    7c24:	0002a60c 	andeq	sl, r2, ip, lsl #12
    7c28:	1aa92c00 	bne	fea52c30 <BootRAM+0xd9c33d1>
    7c2c:	0a010000 	beq	47c34 <__Stack_Size+0x47434>
    7c30:	00000d55 	andeq	r0, r0, r5, asr sp
    7c34:	00000305 	andeq	r0, r0, r5, lsl #6
    7c38:	a60c0000 	strge	r0, [ip], -r0
    7c3c:	2d000002 	stccs	0, cr0, [r0, #-8]
    7c40:	00000c16 	andeq	r0, r0, r6, lsl ip
    7c44:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    7c48:	0000bf2e 	andeq	fp, r0, lr, lsr #30
    7c4c:	007e2e00 	rsbseq	r2, lr, r0, lsl #28
    7c50:	b82e0000 	stmdalt	lr!, {}	; <UNPREDICTABLE>
    7c54:	00000000 	andeq	r0, r0, r0
    7c58:	00062600 	andeq	r2, r6, r0, lsl #12
    7c5c:	26000400 	strcs	r0, [r0], -r0, lsl #8
    7c60:	0400001a 	streq	r0, [r0], #-26
    7c64:	00163601 	andseq	r3, r6, r1, lsl #12
    7c68:	1ab40100 	bne	fed08070 <BootRAM+0xdc78811>
    7c6c:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    7c70:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    7c74:	00000000 	andeq	r0, r0, r0
    7c78:	23750000 	cmncs	r5, #0
    7c7c:	01020000 	mrseq	r0, (UNDEF: 2)
    7c80:	00081a06 	andeq	r1, r8, r6, lsl #20
    7c84:	0c400300 	mcrreq	3, 0, r0, r0, cr0
    7c88:	1c020000 	stcne	0, cr0, [r2], {-0}
    7c8c:	00000037 	andeq	r0, r0, r7, lsr r0
    7c90:	18080102 	stmdane	r8, {r1, r8}
    7c94:	02000008 	andeq	r0, r0, #8
    7c98:	06fc0502 	ldrbteq	r0, [ip], r2, lsl #10
    7c9c:	02020000 	andeq	r0, r2, #0
    7ca0:	00094907 	andeq	r4, r9, r7, lsl #18
    7ca4:	05040200 	streq	r0, [r4, #-512]	; 0x200
    7ca8:	000004da 	ldrdeq	r0, [r0], -sl
    7cac:	52070402 	andpl	r0, r7, #33554432	; 0x2000000
    7cb0:	02000002 	andeq	r0, r0, #2
    7cb4:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
    7cb8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7cbc:	00024d07 	andeq	r4, r2, r7, lsl #26
    7cc0:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    7cc4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7cc8:	57070402 	strpl	r0, [r7, -r2, lsl #8]
    7ccc:	03000002 	movweq	r0, #2
    7cd0:	00000c42 	andeq	r0, r0, r2, asr #24
    7cd4:	002c2a03 	eoreq	r2, ip, r3, lsl #20
    7cd8:	04020000 	streq	r0, [r2], #-0
    7cdc:	00078b07 	andeq	r8, r7, r7, lsl #22
    7ce0:	08010200 	stmdaeq	r1, {r9}
    7ce4:	00000821 	andeq	r0, r0, r1, lsr #16
    7ce8:	001acd05 	andseq	ip, sl, r5, lsl #26
    7cec:	000a0100 	andeq	r0, sl, r0, lsl #2
    7cf0:	40000000 	andmi	r0, r0, r0
    7cf4:	01000000 	mrseq	r0, (UNDEF: 0)
    7cf8:	0001689c 	muleq	r1, ip, r8
    7cfc:	1ae20600 	bne	ff889504 <BootRAM+0xe7f9ca5>
    7d00:	0a010000 	beq	47d08 <__Stack_Size+0x47508>
    7d04:	00000168 	andeq	r0, r0, r8, ror #2
    7d08:	00004ebb 			; <UNDEFINED> instruction: 0x00004ebb
    7d0c:	01007907 	tsteq	r0, r7, lsl #18
    7d10:	00016e0a 	andeq	r6, r1, sl, lsl #28
    7d14:	004ee700 	subeq	lr, lr, r0, lsl #14
    7d18:	1ac70800 	bne	ff1c9d20 <BootRAM+0xe13a4c1>
    7d1c:	0c010000 	stceq	0, cr0, [r1], {-0}
    7d20:	00000179 	andeq	r0, r0, r9, ror r1
    7d24:	7fb09103 	svcvc	0x00b09103
    7d28:	001b0208 	andseq	r0, fp, r8, lsl #4
    7d2c:	790d0100 	stmdbvc	sp, {r8}
    7d30:	02000001 	andeq	r0, r0, #1
    7d34:	00095091 	muleq	r9, r1, r0
    7d38:	4f000000 	svcmi	0x00000000
    7d3c:	fd000005 	stc2	0, cr0, [r0, #-20]	; 0xffffffec
    7d40:	0a000000 	beq	7d48 <__Stack_Size+0x7548>
    7d44:	75025201 	strvc	r5, [r2, #-513]	; 0x201
    7d48:	51010a00 	tstpl	r1, r0, lsl #20
    7d4c:	0a007602 	beq	2555c <__Stack_Size+0x24d5c>
    7d50:	7d025001 	stcvc	0, cr5, [r2, #-4]
    7d54:	00090000 	andeq	r0, r9, r0
    7d58:	6a000000 	bvs	7d60 <__Stack_Size+0x7560>
    7d5c:	17000005 	strne	r0, [r0, -r5]
    7d60:	0a000001 	beq	7d6c <__Stack_Size+0x756c>
    7d64:	7d025101 	stfvcs	f5, [r2, #-4]
    7d68:	50010a00 	andpl	r0, r1, r0, lsl #20
    7d6c:	00509102 	subseq	r9, r0, r2, lsl #2
    7d70:	00000009 	andeq	r0, r0, r9
    7d74:	00058000 	andeq	r8, r5, r0
    7d78:	00013700 	andeq	r3, r1, r0, lsl #14
    7d7c:	52010a00 	andpl	r0, r1, #0, 20
    7d80:	0a007502 	beq	25190 <__Stack_Size+0x24990>
    7d84:	76025101 	strvc	r5, [r2], -r1, lsl #2
    7d88:	50010a00 	andpl	r0, r1, r0, lsl #20
    7d8c:	00007d02 	andeq	r7, r0, r2, lsl #26
    7d90:	00000009 	andeq	r0, r0, r9
    7d94:	00059b00 	andeq	r9, r5, r0, lsl #22
    7d98:	00015700 	andeq	r5, r1, r0, lsl #14
    7d9c:	52010a00 	andpl	r0, r1, #0, 20
    7da0:	0a509102 	beq	142c1b0 <__Stack_Size+0x142b9b0>
    7da4:	7d025101 	stfvcs	f5, [r2, #-4]
    7da8:	50010a00 	andpl	r0, r1, r0, lsl #20
    7dac:	00007402 	andeq	r7, r0, r2, lsl #8
    7db0:	0000000b 	andeq	r0, r0, fp
    7db4:	0005b600 	andeq	fp, r5, r0, lsl #12
    7db8:	50010a00 	andpl	r0, r1, r0, lsl #20
    7dbc:	00007402 	andeq	r7, r0, r2, lsl #8
    7dc0:	76040c00 	strvc	r0, [r4], -r0, lsl #24
    7dc4:	0c000000 	stceq	0, cr0, [r0], {-0}
    7dc8:	00017404 	andeq	r7, r1, r4, lsl #8
    7dcc:	00760d00 	rsbseq	r0, r6, r0, lsl #26
    7dd0:	760e0000 	strvc	r0, [lr], -r0
    7dd4:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
    7dd8:	0f000001 	svceq	0x00000001
    7ddc:	00000081 	andeq	r0, r0, r1, lsl #1
    7de0:	dc10001f 	ldcle	0, cr0, [r0], {31}
    7de4:	0100001a 	tsteq	r0, sl, lsl r0
    7de8:	01bc0116 			; <UNDEFINED> instruction: 0x01bc0116
    7dec:	65110000 	ldrvs	r0, [r1, #-0]
    7df0:	16010079 			; <UNDEFINED> instruction: 0x16010079
    7df4:	00000168 	andeq	r0, r0, r8, ror #2
    7df8:	00786d11 	rsbseq	r6, r8, r1, lsl sp
    7dfc:	016e1601 	cmneq	lr, r1, lsl #12
    7e00:	6e120000 	cdpvs	0, 1, cr0, cr2, cr0, {0}
    7e04:	79180100 	ldmdbvc	r8, {r8}
    7e08:	12000001 	andne	r0, r0, #1
    7e0c:	19010064 	stmdbne	r1, {r2, r5, r6}
    7e10:	00000179 	andeq	r0, r0, r9, ror r1
    7e14:	1aed1300 	bne	ffb4ca1c <BootRAM+0xeabd1bd>
    7e18:	21010000 	mrscs	r0, (UNDEF: 1)
    7e1c:	00000076 	andeq	r0, r0, r6, ror r0
    7e20:	00022f01 	andeq	r2, r2, r1, lsl #30
    7e24:	00781100 	rsbseq	r1, r8, r0, lsl #2
    7e28:	01682101 	cmneq	r8, r1, lsl #2
    7e2c:	79110000 	ldmdbvc	r1, {}	; <UNPREDICTABLE>
    7e30:	6e210100 	sufvss	f0, f1, f0
    7e34:	14000001 	strne	r0, [r0], #-1
    7e38:	00001761 	andeq	r1, r0, r1, ror #14
    7e3c:	00682101 	rsbeq	r2, r8, r1, lsl #2
    7e40:	64150000 	ldrvs	r0, [r5], #-0
    7e44:	2f230100 	svccs	0x00230100
    7e48:	20000002 	andcs	r0, r0, r2
    7e4c:	135978a3 	cmpne	r9, #10682368	; 0xa30000
    7e50:	75eb4dca 	strbvc	r4, [fp, #3530]!	; 0xdca
    7e54:	4141d8ab 	smlaltbmi	sp, r1, fp, r8
    7e58:	00700a4d 	rsbseq	r0, r0, sp, asr #20
    7e5c:	7779e898 			; <UNDEFINED> instruction: 0x7779e898
    7e60:	8cc74079 	stclhi	0, cr4, [r7], {121}	; 0x79
    7e64:	2b6ffe73 	blcs	1c07838 <__Stack_Size+0x1c07038>
    7e68:	52036cee 	andpl	r6, r3, #60928	; 0xee00
    7e6c:	01006112 	tsteq	r0, r2, lsl r1
    7e70:	0001792a 	andeq	r7, r1, sl, lsr #18
    7e74:	00621200 	rsbeq	r1, r2, r0, lsl #4
    7e78:	01792b01 	cmneq	r9, r1, lsl #22
    7e7c:	63120000 	tstvs	r2, #0
    7e80:	792c0100 	stmdbvc	ip!, {r8}
    7e84:	00000001 	andeq	r0, r0, r1
    7e88:	0001790d 	andeq	r7, r1, sp, lsl #18
    7e8c:	1af31600 	bne	ffccd694 <BootRAM+0xec3de35>
    7e90:	4b010000 	blmi	47e98 <__Stack_Size+0x47698>
    7e94:	00000076 	andeq	r0, r0, r6, ror r0
    7e98:	00000000 	andeq	r0, r0, r0
    7e9c:	000000d4 	ldrdeq	r0, [r0], -r4
    7ea0:	053f9c01 	ldreq	r9, [pc, #-3073]!	; 72a7 <__Stack_Size+0x6aa7>
    7ea4:	65070000 	strvs	r0, [r7, #-0]
    7ea8:	4b010078 	blmi	48090 <__Stack_Size+0x47890>
    7eac:	00000168 	andeq	r0, r0, r8, ror #2
    7eb0:	00004f1e 	andeq	r4, r0, lr, lsl pc
    7eb4:	00796507 	rsbseq	r6, r9, r7, lsl #10
    7eb8:	01684b01 	cmneq	r8, r1, lsl #22
    7ebc:	4f4a0000 	svcmi	0x004a0000
    7ec0:	6d070000 	stcvs	0, cr0, [r7, #-0]
    7ec4:	4c010078 	stcmi	0, cr0, [r1], {120}	; 0x78
    7ec8:	0000016e 	andeq	r0, r0, lr, ror #2
    7ecc:	00004f76 	andeq	r4, r0, r6, ror pc
    7ed0:	00176106 	andseq	r6, r7, r6, lsl #2
    7ed4:	684c0100 	stmdavs	ip, {r8}^
    7ed8:	a2000000 	andge	r0, r0, #0
    7edc:	1200004f 	andne	r0, r0, #79	; 0x4f
    7ee0:	01006b6f 	tsteq	r0, pc, ror #22
    7ee4:	0000764e 	andeq	r7, r0, lr, asr #12
    7ee8:	01891700 	orreq	r1, r9, r0, lsl #14
    7eec:	00000000 	andeq	r0, r0, r0
    7ef0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7ef4:	50010000 	andpl	r0, r1, r0
    7ef8:	00000347 	andeq	r0, r0, r7, asr #6
    7efc:	00019f18 	andeq	r9, r1, r8, lsl pc
    7f00:	004fce00 	subeq	ip, pc, r0, lsl #28
    7f04:	01951800 	orrseq	r1, r5, r0, lsl #16
    7f08:	4ffa0000 	svcmi	0x00fa0000
    7f0c:	00190000 	andseq	r0, r9, r0
    7f10:	1a000008 	bne	7f38 <__Stack_Size+0x7738>
    7f14:	000001a9 	andeq	r0, r0, r9, lsr #3
    7f18:	7fa89103 	svcvc	0x00a89103
    7f1c:	0001b21a 	andeq	fp, r1, sl, lsl r2
    7f20:	48910200 	ldmmi	r1, {r9}
    7f24:	00000009 	andeq	r0, r0, r9
    7f28:	00058000 	andeq	r8, r5, r0
    7f2c:	0002ec00 	andeq	lr, r2, r0, lsl #24
    7f30:	52010a00 	andpl	r0, r1, #0, 20
    7f34:	0a007602 	beq	25744 <__Stack_Size+0x24f44>
    7f38:	77025101 	strvc	r5, [r2, -r1, lsl #2]
    7f3c:	50010a00 	andpl	r0, r1, r0, lsl #20
    7f40:	7fa89103 	svcvc	0x00a89103
    7f44:	00000900 	andeq	r0, r0, r0, lsl #18
    7f48:	056a0000 	strbeq	r0, [sl, #-0]!
    7f4c:	03070000 	movweq	r0, #28672	; 0x7000
    7f50:	010a0000 	mrseq	r0, (UNDEF: 10)
    7f54:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    7f58:	50010a7f 	andpl	r0, r1, pc, ror sl
    7f5c:	00489102 	subeq	r9, r8, r2, lsl #2
    7f60:	00000009 	andeq	r0, r0, r9
    7f64:	00054f00 	andeq	r4, r5, r0, lsl #30
    7f68:	00032800 	andeq	r2, r3, r0, lsl #16
    7f6c:	52010a00 	andpl	r0, r1, #0, 20
    7f70:	0a007602 	beq	25780 <__Stack_Size+0x24f80>
    7f74:	77025101 	strvc	r5, [r2, -r1, lsl #2]
    7f78:	50010a00 	andpl	r0, r1, r0, lsl #20
    7f7c:	7fa89103 	svcvc	0x00a89103
    7f80:	00000b00 	andeq	r0, r0, r0, lsl #22
    7f84:	059b0000 	ldreq	r0, [fp]
    7f88:	010a0000 	mrseq	r0, (UNDEF: 10)
    7f8c:	48910252 	ldmmi	r1, {r1, r4, r6, r9}
    7f90:	0351010a 	cmpeq	r1, #-2147483646	; 0x80000002
    7f94:	0a7fa891 	beq	1ff21e0 <__Stack_Size+0x1ff19e0>
    7f98:	74025001 	strvc	r5, [r2], #-1
    7f9c:	00000000 	andeq	r0, r0, r0
    7fa0:	0001bc1b 	andeq	fp, r1, fp, lsl ip
    7fa4:	00000000 	andeq	r0, r0, r0
    7fa8:	00008000 	andeq	r8, r0, r0
    7fac:	1a510100 	bne	14483b4 <__Stack_Size+0x1447bb4>
    7fb0:	18000005 	stmdane	r0, {r0, r2}
    7fb4:	000001de 	ldrdeq	r0, [r0], -lr
    7fb8:	00005026 	andeq	r5, r0, r6, lsr #32
    7fbc:	0001d518 	andeq	sp, r1, r8, lsl r5
    7fc0:	00504700 	subseq	r4, r0, r0, lsl #14
    7fc4:	01cc1800 	biceq	r1, ip, r0, lsl #16
    7fc8:	50680000 	rsbpl	r0, r8, r0
    7fcc:	001c0000 	andseq	r0, ip, r0
    7fd0:	80000000 	andhi	r0, r0, r0
    7fd4:	1a000000 	bne	7fdc <__Stack_Size+0x77dc>
    7fd8:	00000213 	andeq	r0, r0, r3, lsl r2
    7fdc:	7f889103 	svcvc	0x00889103
    7fe0:	00021c1a 	andeq	r1, r2, sl, lsl ip
    7fe4:	a8910300 	ldmge	r1, {r8, r9}
    7fe8:	02251a7f 	eoreq	r1, r5, #520192	; 0x7f000
    7fec:	91020000 	mrsls	r0, (UNDEF: 2)
    7ff0:	01e91a48 	mvneq	r1, r8, asr #20
    7ff4:	03050000 	movweq	r0, #20480	; 0x5000
    7ff8:	00000000 	andeq	r0, r0, r0
    7ffc:	00000009 	andeq	r0, r0, r9
    8000:	00059b00 	andeq	r9, r5, r0, lsl #22
    8004:	0003c300 	andeq	ip, r3, r0, lsl #6
    8008:	52010a00 	andpl	r0, r1, #0, 20
    800c:	0a007402 	beq	2501c <__Stack_Size+0x2481c>
    8010:	74025101 	strvc	r5, [r2], #-257	; 0x101
    8014:	50010a00 	andpl	r0, r1, r0, lsl #20
    8018:	00489102 	subeq	r9, r8, r2, lsl #2
    801c:	00000009 	andeq	r0, r0, r9
    8020:	00059b00 	andeq	r9, r5, r0, lsl #22
    8024:	0003e700 	andeq	lr, r3, r0, lsl #14
    8028:	52010a00 	andpl	r0, r1, #0, 20
    802c:	00000305 	andeq	r0, r0, r5, lsl #6
    8030:	010a0000 	mrseq	r0, (UNDEF: 10)
    8034:	48910251 	ldmmi	r1, {r0, r4, r6, r9}
    8038:	0350010a 	cmpeq	r0, #-2147483646	; 0x80000002
    803c:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    8040:	00000009 	andeq	r0, r0, r9
    8044:	00058000 	andeq	r8, r5, r0
    8048:	00040800 	andeq	r0, r4, r0, lsl #16
    804c:	52010a00 	andpl	r0, r1, #0, 20
    8050:	0a007602 	beq	25860 <__Stack_Size+0x25060>
    8054:	91035101 	tstls	r3, r1, lsl #2
    8058:	010a7fa8 	smlatbeq	sl, r8, pc, r7	; <UNPREDICTABLE>
    805c:	007d0250 	rsbseq	r0, sp, r0, asr r2
    8060:	00000900 	andeq	r0, r0, r0, lsl #18
    8064:	056a0000 	strbeq	r0, [sl, #-0]!
    8068:	04230000 	strteq	r0, [r3], #-0
    806c:	010a0000 	mrseq	r0, (UNDEF: 10)
    8070:	007d0251 	rsbseq	r0, sp, r1, asr r2
    8074:	0350010a 	cmpeq	r0, #-2147483646	; 0x80000002
    8078:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    807c:	00000009 	andeq	r0, r0, r9
    8080:	00054f00 	andeq	r4, r5, r0, lsl #30
    8084:	00044300 	andeq	r4, r4, r0, lsl #6
    8088:	52010a00 	andpl	r0, r1, #0, 20
    808c:	0a007602 	beq	2589c <__Stack_Size+0x2509c>
    8090:	91025101 	tstls	r2, r1, lsl #2
    8094:	50010a48 	andpl	r0, r1, r8, asr #20
    8098:	00007d02 	andeq	r7, r0, r2, lsl #26
    809c:	00000009 	andeq	r0, r0, r9
    80a0:	00059b00 	andeq	r9, r5, r0, lsl #22
    80a4:	00046400 	andeq	r6, r4, r0, lsl #8
    80a8:	52010a00 	andpl	r0, r1, #0, 20
    80ac:	7fa89103 	svcvc	0x00a89103
    80b0:	0251010a 	subseq	r0, r1, #-2147483646	; 0x80000002
    80b4:	010a007d 	tsteq	sl, sp, ror r0
    80b8:	48910250 	ldmmi	r1, {r4, r6, r9}
    80bc:	00000900 	andeq	r0, r0, r0, lsl #18
    80c0:	05c70000 	strbeq	r0, [r7]
    80c4:	047e0000 	ldrbteq	r0, [lr], #-0
    80c8:	010a0000 	mrseq	r0, (UNDEF: 10)
    80cc:	48910251 	ldmmi	r1, {r0, r4, r6, r9}
    80d0:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    80d4:	0900007d 	stmdbeq	r0, {r0, r2, r3, r4, r5, r6}
    80d8:	00000000 	andeq	r0, r0, r0
    80dc:	000005dd 	ldrdeq	r0, [r0], -sp
    80e0:	00000499 	muleq	r0, r9, r4
    80e4:	0251010a 	subseq	r0, r1, #-2147483646	; 0x80000002
    80e8:	010a007d 	tsteq	sl, sp, ror r0
    80ec:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    80f0:	0009007f 	andeq	r0, r9, pc, ror r0
    80f4:	f3000000 	vhadd.u8	d0, d0, d0
    80f8:	ba000005 	blt	8114 <__Stack_Size+0x7914>
    80fc:	0a000004 	beq	8114 <__Stack_Size+0x7914>
    8100:	91035201 	tstls	r3, r1, lsl #4
    8104:	010a7fa8 	smlatbeq	sl, r8, pc, r7	; <UNPREDICTABLE>
    8108:	007d0251 	rsbseq	r0, sp, r1, asr r2
    810c:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    8110:	09000075 	stmdbeq	r0, {r0, r2, r4, r5, r6}
    8114:	00000000 	andeq	r0, r0, r0
    8118:	0000059b 	muleq	r0, fp, r5
    811c:	000004da 	ldrdeq	r0, [r0], -sl
    8120:	0252010a 	subseq	r0, r2, #-2147483646	; 0x80000002
    8124:	010a0075 	tsteq	sl, r5, ror r0
    8128:	00750251 	rsbseq	r0, r5, r1, asr r2
    812c:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    8130:	0900007d 	stmdbeq	r0, {r0, r2, r3, r4, r5, r6}
    8134:	00000000 	andeq	r0, r0, r0
    8138:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    813c:	000004ee 	andeq	r0, r0, lr, ror #9
    8140:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    8144:	0900007d 	stmdbeq	r0, {r0, r2, r3, r4, r5, r6}
    8148:	00000000 	andeq	r0, r0, r0
    814c:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    8150:	00000502 	andeq	r0, r0, r2, lsl #10
    8154:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    8158:	0b004891 	bleq	1a3a4 <__Stack_Size+0x19ba4>
    815c:	00000000 	andeq	r0, r0, r0
    8160:	00000613 	andeq	r0, r0, r3, lsl r6
    8164:	0251010a 	subseq	r0, r1, #-2147483646	; 0x80000002
    8168:	010a4891 			; <UNDEFINED> instruction: 0x010a4891
    816c:	007d0250 	rsbseq	r0, sp, r0, asr r2
    8170:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8174:	00000000 	andeq	r0, r0, r0
    8178:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    817c:	0000052e 	andeq	r0, r0, lr, lsr #10
    8180:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    8184:	0b000075 	bleq	8360 <__Stack_Size+0x7b60>
    8188:	00000000 	andeq	r0, r0, r0
    818c:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    8190:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    8194:	00000074 	andeq	r0, r0, r4, ror r0
    8198:	0016191d 	andseq	r1, r6, sp, lsl r9
    819c:	4a1c0400 	bmi	7091a4 <__Stack_Size+0x7089a4>
    81a0:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    81a4:	00000179 	andeq	r0, r0, r9, ror r1
    81a8:	0016d41e 	andseq	sp, r6, lr, lsl r4
    81ac:	6a3b0400 	bvs	ec91b4 <__Stack_Size+0xec89b4>
    81b0:	1f000005 	svcne	0x00000005
    81b4:	00000168 	andeq	r0, r0, r8, ror #2
    81b8:	00016e1f 	andeq	r6, r1, pc, lsl lr
    81bc:	016e1f00 	cmneq	lr, r0, lsl #30
    81c0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    81c4:	0000170a 	andeq	r1, r0, sl, lsl #14
    81c8:	05805104 	streq	r5, [r0, #260]	; 0x104
    81cc:	681f0000 	ldmdavs	pc, {}	; <UNPREDICTABLE>
    81d0:	1f000001 	svcne	0x00000001
    81d4:	0000016e 	andeq	r0, r0, lr, ror #2
    81d8:	15fc1e00 	ldrbne	r1, [ip, #3584]!	; 0xe00
    81dc:	3a040000 	bcc	1081e4 <__Stack_Size+0x1079e4>
    81e0:	0000059b 	muleq	r0, fp, r5
    81e4:	0001681f 	andeq	r6, r1, pc, lsl r8
    81e8:	016e1f00 	cmneq	lr, r0, lsl #30
    81ec:	6e1f0000 	cdpvs	0, 1, cr0, cr15, cr0, {0}
    81f0:	00000001 	andeq	r0, r0, r1
    81f4:	0016f51e 	andseq	pc, r6, lr, lsl r5	; <UNPREDICTABLE>
    81f8:	b6440400 	strblt	r0, [r4], -r0, lsl #8
    81fc:	1f000005 	svcne	0x00000005
    8200:	00000168 	andeq	r0, r0, r8, ror #2
    8204:	00016e1f 	andeq	r6, r1, pc, lsl lr
    8208:	016e1f00 	cmneq	lr, r0, lsl #30
    820c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    8210:	000016e4 	andeq	r1, r0, r4, ror #13
    8214:	05c72804 	strbeq	r2, [r7, #2052]	; 0x804
    8218:	681f0000 	ldmdavs	pc, {}	; <UNPREDICTABLE>
    821c:	00000001 	andeq	r0, r0, r1
    8220:	0017e31e 	andseq	lr, r7, lr, lsl r3
    8224:	dd5a0400 	cfldrdle	mvd0, [sl, #-0]
    8228:	1f000005 	svcne	0x00000005
    822c:	00000168 	andeq	r0, r0, r8, ror #2
    8230:	00016e1f 	andeq	r6, r1, pc, lsl lr
    8234:	ef1e0000 	svc	0x001e0000
    8238:	04000017 	streq	r0, [r0], #-23
    823c:	0005f33e 	andeq	pc, r5, lr, lsr r3	; <UNPREDICTABLE>
    8240:	01681f00 	cmneq	r8, r0, lsl #30
    8244:	6e1f0000 	cdpvs	0, 1, cr0, cr15, cr0, {0}
    8248:	00000001 	andeq	r0, r0, r1
    824c:	00171f1e 	andseq	r1, r7, lr, lsl pc
    8250:	13330400 	teqne	r3, #0, 8
    8254:	1f000006 	svcne	0x00000006
    8258:	00000168 	andeq	r0, r0, r8, ror #2
    825c:	00016e1f 	andeq	r6, r1, pc, lsl lr
    8260:	016e1f00 	cmneq	lr, r0, lsl #30
    8264:	761f0000 	ldrvc	r0, [pc], -r0
    8268:	00000000 	andeq	r0, r0, r0
    826c:	00173d20 	andseq	r3, r7, r0, lsr #26
    8270:	762d0400 	strtvc	r0, [sp], -r0, lsl #8
    8274:	1f000000 	svcne	0x00000000
    8278:	0000016e 	andeq	r0, r0, lr, ror #2
    827c:	00016e1f 	andeq	r6, r1, pc, lsl lr
    8280:	ac000000 	stcge	0, cr0, [r0], {-0}
    8284:	04000005 	streq	r0, [r0], #-5
    8288:	001be200 	andseq	lr, fp, r0, lsl #4
    828c:	36010400 	strcc	r0, [r1], -r0, lsl #8
    8290:	01000016 	tsteq	r0, r6, lsl r0
    8294:	00001b24 	andeq	r1, r0, r4, lsr #22
    8298:	00000893 	muleq	r0, r3, r8
    829c:	000008a8 	andeq	r0, r0, r8, lsr #17
    82a0:	00000000 	andeq	r0, r0, r0
    82a4:	000024cb 	andeq	r2, r0, fp, asr #9
    82a8:	69050402 	stmdbvs	r5, {r1, sl}
    82ac:	0300746e 	movweq	r7, #1134	; 0x46e
    82b0:	02570704 	subseq	r0, r7, #4, 14	; 0x100000
    82b4:	01030000 	mrseq	r0, (UNDEF: 3)
    82b8:	00081a06 	andeq	r1, r8, r6, lsl #20
    82bc:	08010300 	stmdaeq	r1, {r8, r9}
    82c0:	00000818 	andeq	r0, r0, r8, lsl r8
    82c4:	fc050203 	stc2	2, cr0, [r5], {3}
    82c8:	03000006 	movweq	r0, #6
    82cc:	09490702 	stmdbeq	r9, {r1, r8, r9, sl}^
    82d0:	04030000 	streq	r0, [r3], #-0
    82d4:	0004da05 	andeq	sp, r4, r5, lsl #20
    82d8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    82dc:	00000252 	andeq	r0, r0, r2, asr r2
    82e0:	d5050803 	strle	r0, [r5, #-2051]	; 0x803
    82e4:	03000004 	movweq	r0, #4
    82e8:	024d0708 	subeq	r0, sp, #8, 14	; 0x200000
    82ec:	04030000 	streq	r0, [r3], #-0
    82f0:	00078b07 	andeq	r8, r7, r7, lsl #22
    82f4:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    82f8:	00003a04 	andeq	r3, r0, r4, lsl #20
    82fc:	08010300 	stmdaeq	r1, {r8, r9}
    8300:	00000821 	andeq	r0, r0, r1, lsr #16
    8304:	0c026806 	stceq	8, cr6, [r2], {6}
    8308:	000000ae 	andeq	r0, r0, lr, lsr #1
    830c:	001a8a07 	andseq	r8, sl, r7, lsl #20
    8310:	ae0e0200 	cdpge	2, 0, cr0, cr14, cr0, {0}
    8314:	00000000 	andeq	r0, r0, r0
    8318:	00195007 	andseq	r5, r9, r7
    831c:	be0f0200 	cdplt	2, 0, cr0, cr15, cr0, {0}
    8320:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8324:	00046c07 	andeq	r6, r4, r7, lsl #24
    8328:	ce100200 	cdpgt	2, 1, cr0, cr0, cr0, {0}
    832c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    8330:	00560800 	subseq	r0, r6, r0, lsl #16
    8334:	00be0000 	adcseq	r0, lr, r0
    8338:	6b090000 	blvs	248340 <__Stack_Size+0x247b40>
    833c:	01000000 	mrseq	r0, (UNDEF: 0)
    8340:	00560800 	subseq	r0, r6, r0, lsl #16
    8344:	00ce0000 	sbceq	r0, lr, r0
    8348:	6b090000 	blvs	248350 <__Stack_Size+0x247b50>
    834c:	07000000 	streq	r0, [r0, -r0]
    8350:	003a0800 	eorseq	r0, sl, r0, lsl #16
    8354:	00de0000 	sbcseq	r0, lr, r0
    8358:	6b090000 	blvs	248360 <__Stack_Size+0x247b60>
    835c:	3f000000 	svccc	0x00000000
    8360:	0cef0a00 	vstmiaeq	pc!, {s1-s0}
    8364:	12020000 	andne	r0, r2, #0
    8368:	00000081 	andeq	r0, r0, r1, lsl #1
    836c:	000b350b 	andeq	r3, fp, fp, lsl #10
    8370:	01c10100 	biceq	r0, r1, r0, lsl #2
    8374:	0000012d 	andeq	r0, r0, sp, lsr #2
    8378:	7874630c 	ldmdavc	r4!, {r2, r3, r8, r9, sp, lr}^
    837c:	2dc10100 	stfcse	f0, [r1]
    8380:	0d000001 	stceq	0, cr0, [r0, #-4]
    8384:	00000b26 	andeq	r0, r0, r6, lsr #22
    8388:	0074c101 	rsbseq	ip, r4, r1, lsl #2
    838c:	df0d0000 	svcle	0x000d0000
    8390:	01000014 	tsteq	r0, r4, lsl r0
    8394:	000056c1 	andeq	r5, r0, r1, asr #13
    8398:	1b100e00 	blne	40bba0 <__Stack_Size+0x40b3a0>
    839c:	c3010000 	movwgt	r0, #4096	; 0x1000
    83a0:	00000056 	andeq	r0, r0, r6, asr r0
    83a4:	001b150e 	andseq	r1, fp, lr, lsl #10
    83a8:	56c30100 	strbpl	r0, [r3], r0, lsl #2
    83ac:	00000000 	andeq	r0, r0, r0
    83b0:	00de0405 	sbcseq	r0, lr, r5, lsl #8
    83b4:	1d0f0000 	stcne	0, cr0, [pc, #-0]	; 83bc <__Stack_Size+0x7bbc>
    83b8:	0100000c 	tsteq	r0, ip
    83bc:	0034502f 	eorseq	r5, r4, pc, lsr #32
    83c0:	00005808 	andeq	r5, r0, r8, lsl #16
    83c4:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
    83c8:	10000001 	andne	r0, r0, r1
    83cc:	00787463 	rsbseq	r7, r8, r3, ror #8
    83d0:	012d2f01 	teqeq	sp, r1, lsl #30
    83d4:	50010000 	andpl	r0, r1, r0
    83d8:	1b330f00 	blne	ccbfe0 <__Stack_Size+0xccb7e0>
    83dc:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    83e0:	080034a8 	stmdaeq	r0, {r3, r5, r7, sl, ip, sp}
    83e4:	00001f64 	andeq	r1, r0, r4, ror #30
    83e8:	021d9c01 	andseq	r9, sp, #256	; 0x100
    83ec:	63110000 	tstvs	r1, #0
    83f0:	01007874 	tsteq	r0, r4, ror r8
    83f4:	00012d3e 	andeq	r2, r1, lr, lsr sp
    83f8:	00508900 	subseq	r8, r0, r0, lsl #18
    83fc:	0d8a1200 	sfmeq	f1, 4, [sl]
    8400:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    8404:	00000074 	andeq	r0, r0, r4, ror r0
    8408:	000050e0 	andeq	r5, r0, r0, ror #1
    840c:	001b4213 	andseq	r4, fp, r3, lsl r2
    8410:	56400100 	strbpl	r0, [r0], -r0, lsl #2
    8414:	01000000 	mrseq	r0, (UNDEF: 0)
    8418:	13000051 	movwne	r0, #81	; 0x51
    841c:	00001b48 	andeq	r1, r0, r8, asr #22
    8420:	00564001 	subseq	r4, r6, r1
    8424:	53730000 	cmnpl	r3, #0
    8428:	57140000 	ldrpl	r0, [r4, -r0]
    842c:	1d400100 	stfnee	f0, [r0, #-0]
    8430:	1d000002 	stcne	0, cr0, [r0, #-8]
    8434:	14000060 	strne	r0, [r0], #-96	; 0x60
    8438:	41010041 	tstmi	r1, r1, asr #32
    843c:	00000056 	andeq	r0, r0, r6, asr r0
    8440:	00006902 	andeq	r6, r0, r2, lsl #18
    8444:	01004214 	tsteq	r0, r4, lsl r2
    8448:	00005641 	andeq	r5, r0, r1, asr #12
    844c:	00698500 	rsbeq	r8, r9, r0, lsl #10
    8450:	00431400 	subeq	r1, r3, r0, lsl #8
    8454:	00564101 	subseq	r4, r6, r1, lsl #2
    8458:	69e70000 	stmibvs	r7!, {}^	; <UNPREDICTABLE>
    845c:	44140000 	ldrmi	r0, [r4], #-0
    8460:	56410100 	strbpl	r0, [r1], -r0, lsl #2
    8464:	3c000000 	stccc	0, cr0, [r0], {-0}
    8468:	1400006a 	strne	r0, [r0], #-106	; 0x6a
    846c:	41010045 	tstmi	r1, r5, asr #32
    8470:	00000056 	andeq	r0, r0, r6, asr r0
    8474:	00006a91 	muleq	r0, r1, sl
    8478:	01004614 	tsteq	r0, r4, lsl r6
    847c:	00005641 	andeq	r5, r0, r1, asr #12
    8480:	006b1200 	rsbeq	r1, fp, r0, lsl #4
    8484:	00471400 	subeq	r1, r7, r0, lsl #8
    8488:	00564101 	subseq	r4, r6, r1, lsl #2
    848c:	6b8a0000 	blvs	fe288494 <BootRAM+0xd1f8c35>
    8490:	48140000 	ldmdami	r4, {}	; <UNPREDICTABLE>
    8494:	56410100 	strbpl	r0, [r1], -r0, lsl #2
    8498:	02000000 	andeq	r0, r0, #0
    849c:	0000006c 	andeq	r0, r0, ip, rrx
    84a0:	00005608 	andeq	r5, r0, r8, lsl #12
    84a4:	00022d00 	andeq	r2, r2, r0, lsl #26
    84a8:	006b0900 	rsbeq	r0, fp, r0, lsl #18
    84ac:	003f0000 	eorseq	r0, pc, r0
    84b0:	0000e915 	andeq	lr, r0, r5, lsl r9
    84b4:	00540c00 	subseq	r0, r4, r0, lsl #24
    84b8:	00008e08 	andeq	r8, r0, r8, lsl #28
    84bc:	f29c0100 	vaddw.s16	q0, q6, d0
    84c0:	16000002 	strne	r0, [r0], -r2
    84c4:	000000f5 	strdeq	r0, [r0], -r5
    84c8:	00006c85 	andeq	r6, r0, r5, lsl #25
    84cc:	00010016 	andeq	r0, r1, r6, lsl r0
    84d0:	006cdd00 	rsbeq	sp, ip, r0, lsl #26
    84d4:	010b1600 	tsteq	fp, r0, lsl #12
    84d8:	6d3b0000 	ldcvs	0, cr0, [fp, #-0]
    84dc:	16170000 	ldrne	r0, [r7], -r0
    84e0:	17000001 	strne	r0, [r0, -r1]
    84e4:	00000121 	andeq	r0, r0, r1, lsr #2
    84e8:	00083818 	andeq	r3, r8, r8, lsl r8
    84ec:	010b1600 	tsteq	fp, r0, lsl #12
    84f0:	6d990000 	ldcvs	0, cr0, [r9]
    84f4:	00160000 	andseq	r0, r6, r0
    84f8:	f1000001 	cps	#1
    84fc:	1600006d 	strne	r0, [r0], -sp, rrx
    8500:	000000f5 	strdeq	r0, [r0], -r5
    8504:	00006e3b 	andeq	r6, r0, fp, lsr lr
    8508:	00083818 	andeq	r3, r8, r8, lsl r8
    850c:	01161900 	tsteq	r6, r0, lsl #18
    8510:	6e930000 	cdpvs	0, 9, cr0, cr3, cr0, {0}
    8514:	21190000 	tstcs	r9, r0
    8518:	d4000001 	strle	r0, [r0], #-1
    851c:	1a00006e 	bne	86dc <__Stack_Size+0x7edc>
    8520:	08005440 	stmdaeq	r0, {r6, sl, ip, lr}
    8524:	00000156 	andeq	r0, r0, r6, asr r1
    8528:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    852c:	0251011b 	subseq	r0, r1, #-1073741818	; 0xc0000006
    8530:	011b0074 	tsteq	fp, r4, ror r0
    8534:	00760250 	rsbseq	r0, r6, r0, asr r2
    8538:	54781c00 	ldrbtpl	r1, [r8], #-3072	; 0xc00
    853c:	058b0800 	streq	r0, [fp, #2048]	; 0x800
    8540:	861a0000 	ldrhi	r0, [sl], -r0
    8544:	8b080054 	blhi	20869c <__Stack_Size+0x207e9c>
    8548:	d9000005 	stmdble	r0, {r0, r2}
    854c:	1b000002 	blne	855c <__Stack_Size+0x7d5c>
    8550:	74025201 	strvc	r5, [r2], #-513	; 0x201
    8554:	51011b00 	tstpl	r1, r0, lsl #22
    8558:	00007802 	andeq	r7, r0, r2, lsl #16
    855c:	0054901d 	subseq	r9, r4, sp, lsl r0
    8560:	00015608 	andeq	r5, r1, r8, lsl #12
    8564:	51011b00 	tstpl	r1, r0, lsl #22
    8568:	1b287602 	blne	a25d78 <__Stack_Size+0xa25578>
    856c:	76025001 	strvc	r5, [r2], -r1
    8570:	00000000 	andeq	r0, r0, r0
    8574:	0b790f00 	bleq	1e4c17c <__Stack_Size+0x1e4b97c>
    8578:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    857c:	0800549c 	stmdaeq	r0, {r2, r3, r4, r7, sl, ip, lr}
    8580:	00000218 	andeq	r0, r0, r8, lsl r2
    8584:	054b9c01 	strbeq	r9, [fp, #-3073]	; 0xc01
    8588:	63110000 	tstvs	r1, #0
    858c:	01007874 	tsteq	r0, r4, ror r8
    8590:	00012df0 	strdeq	r2, [r1], -r0
    8594:	006f0c00 	rsbeq	r0, pc, r0, lsl #24
    8598:	1b5d1200 	blne	174cda0 <__Stack_Size+0x174c5a0>
    859c:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    85a0:	00000074 	andeq	r0, r0, r4, ror r0
    85a4:	00006f2a 	andeq	r6, r0, sl, lsr #30
    85a8:	001b6413 	andseq	r6, fp, r3, lsl r4
    85ac:	56f20100 	ldrbtpl	r0, [r2], r0, lsl #2
    85b0:	74000000 	strvc	r0, [r0], #-0
    85b4:	1300006f 	movwne	r0, #111	; 0x6f
    85b8:	00001b1a 	andeq	r1, r0, sl, lsl fp
    85bc:	0056f201 	subseq	pc, r6, r1, lsl #4
    85c0:	6fa80000 	svcvs	0x00a80000
    85c4:	1f130000 	svcne	0x00130000
    85c8:	0100001b 	tsteq	r0, fp, lsl r0
    85cc:	000056f3 	strdeq	r5, [r0], -r3
    85d0:	006fd100 	rsbeq	sp, pc, r0, lsl #2
    85d4:	6f6c1400 	svcvs	0x006c1400
    85d8:	f3010077 	vqadd.u8	q0, <illegal reg q0.5>, <illegal reg q11.5>
    85dc:	00000056 	andeq	r0, r0, r6, asr r0
    85e0:	00006ffa 	strdeq	r6, [r0], -sl
    85e4:	001b091e 	andseq	r0, fp, lr, lsl r9
    85e8:	4bf40100 	blmi	ffd089f0 <BootRAM+0xec79191>
    85ec:	02000005 	andeq	r0, r0, #5
    85f0:	e91f5091 	ldmdb	pc, {r0, r4, r7, ip, lr}	; <UNPREDICTABLE>
    85f4:	c4000000 	strgt	r0, [r0], #-0
    85f8:	50080054 	andpl	r0, r8, r4, asr r0
    85fc:	01000008 	tsteq	r0, r8
    8600:	045b0100 	ldrbeq	r0, [fp], #-256	; 0x100
    8604:	0b160000 	bleq	58860c <__Stack_Size+0x587e0c>
    8608:	a8000001 	stmdage	r0, {r0}
    860c:	2000006f 	andcs	r0, r0, pc, rrx
    8610:	00000100 	andeq	r0, r0, r0, lsl #2
    8614:	02c40306 	sbceq	r0, r4, #402653184	; 0x18000000
    8618:	209f2000 	addscs	r2, pc, r0
    861c:	000000f5 	strdeq	r0, [r0], -r5
    8620:	50185401 	andspl	r5, r8, r1, lsl #8
    8624:	17000008 	strne	r0, [r0, -r8]
    8628:	00000116 	andeq	r0, r0, r6, lsl r1
    862c:	00012117 	andeq	r2, r1, r7, lsl r1
    8630:	08501800 	ldmdaeq	r0, {fp, ip}^
    8634:	0b160000 	bleq	58863c <__Stack_Size+0x587e3c>
    8638:	23000001 	movwcs	r0, #1
    863c:	16000070 			; <UNDEFINED> instruction: 0x16000070
    8640:	00000100 	andeq	r0, r0, r0, lsl #2
    8644:	00007086 	andeq	r7, r0, r6, lsl #1
    8648:	0000f520 	andeq	pc, r0, r0, lsr #10
    864c:	18540100 	ldmdane	r4, {r8}^
    8650:	00000850 	andeq	r0, r0, r0, asr r8
    8654:	00011619 	andeq	r1, r1, r9, lsl r6
    8658:	0070df00 	rsbseq	sp, r0, r0, lsl #30
    865c:	01211900 	teqeq	r1, r0, lsl #18
    8660:	71200000 	teqvc	r0, r0
    8664:	2a1a0000 	bcs	68866c <__Stack_Size+0x687e6c>
    8668:	8b080055 	blhi	2087c4 <__Stack_Size+0x207fc4>
    866c:	02000005 	andeq	r0, r0, #5
    8670:	1b000004 	blne	8688 <__Stack_Size+0x7e88>
    8674:	79025101 	stmdbvc	r2, {r0, r8, ip, lr}
    8678:	50011b00 	andpl	r1, r1, r0, lsl #22
    867c:	76007407 	strvc	r7, [r0], -r7, lsl #8
    8680:	28232200 	stmdacs	r3!, {r9, sp}
    8684:	56101a00 	ldrpl	r1, [r0], -r0, lsl #20
    8688:	058b0800 	streq	r0, [fp, #2048]	; 0x800
    868c:	04270000 	strteq	r0, [r7], #-0
    8690:	011b0000 	tsteq	fp, r0
    8694:	00770252 	rsbseq	r0, r7, r2, asr r2
    8698:	0251011b 	subseq	r0, r1, #-1073741818	; 0xc0000006
    869c:	011b0079 	tsteq	fp, r9, ror r0
    86a0:	00740750 	rsbseq	r0, r4, r0, asr r7
    86a4:	23220076 	teqcs	r2, #118	; 0x76
    86a8:	201a0028 	andscs	r0, sl, r8, lsr #32
    86ac:	56080056 			; <UNDEFINED> instruction: 0x56080056
    86b0:	41000001 	tstmi	r0, r1
    86b4:	1b000004 	blne	86cc <__Stack_Size+0x7ecc>
    86b8:	74025101 	strvc	r5, [r2], #-257	; 0x101
    86bc:	50011b28 	andpl	r1, r1, r8, lsr #22
    86c0:	00007402 	andeq	r7, r0, r2, lsl #8
    86c4:	0056341d 	subseq	r3, r6, sp, lsl r4
    86c8:	00015608 	andeq	r5, r1, r8, lsl #12
    86cc:	51011b00 	tstpl	r1, r0, lsl #22
    86d0:	1b007602 	blne	25ee0 <__Stack_Size+0x256e0>
    86d4:	74025001 	strvc	r5, [r2], #-1
    86d8:	00000000 	andeq	r0, r0, r0
    86dc:	e9210000 	stmdb	r1!, {}	; <UNPREDICTABLE>
    86e0:	2a000000 	bcs	86e8 <__Stack_Size+0x7ee8>
    86e4:	88080055 	stmdahi	r8, {r0, r2, r4, r6}
    86e8:	01000008 	tsteq	r0, r8
    86ec:	0b160101 	bleq	588af8 <__Stack_Size+0x5882f8>
    86f0:	7e000001 	cdpvc	0, 0, cr0, cr0, cr1, {0}
    86f4:	16000071 			; <UNDEFINED> instruction: 0x16000071
    86f8:	00000100 	andeq	r0, r0, r0, lsl #2
    86fc:	000071aa 	andeq	r7, r0, sl, lsr #3
    8700:	0000f516 	andeq	pc, r0, r6, lsl r5	; <UNPREDICTABLE>
    8704:	0071e000 	rsbseq	lr, r1, r0
    8708:	08881800 	stmeq	r8, {fp, ip}
    870c:	16170000 	ldrne	r0, [r7], -r0
    8710:	17000001 	strne	r0, [r0, -r1]
    8714:	00000121 	andeq	r0, r0, r1, lsr #2
    8718:	00088818 	andeq	r8, r8, r8, lsl r8
    871c:	010b1600 	tsteq	fp, r0, lsl #12
    8720:	72090000 	andvc	r0, r9, #0
    8724:	00160000 	andseq	r0, r6, r0
    8728:	58000001 	stmdapl	r0, {r0}
    872c:	16000072 			; <UNDEFINED> instruction: 0x16000072
    8730:	000000f5 	strdeq	r0, [r0], -r5
    8734:	000071e0 	andeq	r7, r0, r0, ror #3
    8738:	00088818 	andeq	r8, r8, r8, lsl r8
    873c:	01161900 	tsteq	r6, r0, lsl #18
    8740:	72970000 	addsvc	r0, r7, #0
    8744:	21190000 	tstcs	r9, r0
    8748:	cd000001 	stcgt	0, cr0, [r0, #-4]
    874c:	1a000072 	bne	891c <__Stack_Size+0x811c>
    8750:	08005564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip, lr}
    8754:	0000058b 	andeq	r0, r0, fp, lsl #11
    8758:	000004f1 	strdeq	r0, [r0], -r1
    875c:	0252011b 	subseq	r0, r2, #-1073741818	; 0xc0000006
    8760:	011b0076 	tsteq	fp, r6, ror r0
    8764:	00790251 	rsbseq	r0, r9, r1, asr r2
    8768:	0750011b 	smmlaeq	r0, fp, r1, r0
    876c:	00780074 	rsbseq	r0, r8, r4, ror r0
    8770:	00282322 	eoreq	r2, r8, r2, lsr #6
    8774:	0056641a 	subseq	r6, r6, sl, lsl r4
    8778:	00058b08 	andeq	r8, r5, r8, lsl #22
    877c:	00051600 	andeq	r1, r5, r0, lsl #12
    8780:	52011b00 	andpl	r1, r1, #0, 22
    8784:	1b007902 	blne	26b94 <__Stack_Size+0x26394>
    8788:	7d025101 	stfvcs	f5, [r2, #-4]
    878c:	50011b00 	andpl	r1, r1, r0, lsl #22
    8790:	78007407 	stmdavc	r0, {r0, r1, r2, sl, ip, sp, lr}
    8794:	28232200 	stmdacs	r3!, {r9, sp}
    8798:	56761a00 	ldrbtpl	r1, [r6], -r0, lsl #20
    879c:	01560800 	cmpeq	r6, r0, lsl #16
    87a0:	05300000 	ldreq	r0, [r0, #-0]!
    87a4:	011b0000 	tsteq	fp, r0
    87a8:	28740251 	ldmdacs	r4!, {r0, r4, r6, r9}^
    87ac:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    87b0:	1d000074 	stcne	0, cr0, [r0, #-464]	; 0xfffffe30
    87b4:	08005686 	stmdaeq	r0, {r1, r2, r7, r9, sl, ip, lr}
    87b8:	00000156 	andeq	r0, r0, r6, asr r1
    87bc:	0251011b 	subseq	r0, r1, #-1073741818	; 0xc0000006
    87c0:	011b0077 	tsteq	fp, r7, ror r0
    87c4:	00740250 	rsbseq	r0, r4, r0, asr r2
    87c8:	00000000 	andeq	r0, r0, r0
    87cc:	3a080000 	bcc	2087d4 <__Stack_Size+0x207fd4>
    87d0:	5b000000 	blpl	87d8 <__Stack_Size+0x7fd8>
    87d4:	09000005 	stmdbeq	r0, {r0, r2}
    87d8:	0000006b 	andeq	r0, r0, fp, rrx
    87dc:	4e1e0007 	cdpmi	0, 1, cr0, cr14, cr7, {0}
    87e0:	0100001b 	tsteq	r0, fp, lsl r0
    87e4:	0000cee8 	andeq	ip, r0, r8, ror #29
    87e8:	c4030500 	strgt	r0, [r3], #-1280	; 0x500
    87ec:	08200002 	stmdaeq	r0!, {r1}
    87f0:	0000002c 	andeq	r0, r0, ip, lsr #32
    87f4:	0000057c 	andeq	r0, r0, ip, ror r5
    87f8:	00006b09 	andeq	r6, r0, r9, lsl #22
    87fc:	22003f00 	andcs	r3, r0, #0, 30
    8800:	1201006b 	andne	r0, r1, #107	; 0x6b
    8804:	0000056c 	andeq	r0, r0, ip, ror #10
    8808:	03040305 	movweq	r0, #17157	; 0x4305
    880c:	4d232000 	stcmi	0, cr2, [r3, #-0]
    8810:	72000017 	andvc	r0, r0, #23
    8814:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    8818:	24000005 	strcs	r0, [r0], #-5
    881c:	00000072 	andeq	r0, r0, r2, ror r0
    8820:	0005a824 	andeq	sl, r5, r4, lsr #16
    8824:	006b2400 	rsbeq	r2, fp, r0, lsl #8
    8828:	05000000 	streq	r0, [r0, #-0]
    882c:	0005ae04 	andeq	sl, r5, r4, lsl #28
    8830:	7f002500 	svcvc	0x00002500
    8834:	04000007 	streq	r0, [r0], #-7
    8838:	001dc200 	andseq	ip, sp, r0, lsl #4
    883c:	36010400 	strcc	r0, [r1], -r0, lsl #8
    8840:	01000016 	tsteq	r0, r6, lsl r0
    8844:	00001b9d 	muleq	r0, sp, fp
    8848:	00000893 	muleq	r0, r3, r8
    884c:	00000b20 	andeq	r0, r0, r0, lsr #22
    8850:	00000000 	andeq	r0, r0, r0
    8854:	00002cd4 	ldrdeq	r2, [r0], -r4
    8858:	4d070802 	stcmi	8, cr0, [r7, #-8]
    885c:	02000002 	andeq	r0, r0, #2
    8860:	08180801 	ldmdaeq	r8, {r0, fp}
    8864:	04020000 	streq	r0, [r2], #-0
    8868:	00025707 	andeq	r5, r2, r7, lsl #14
    886c:	06010200 	streq	r0, [r1], -r0, lsl #4
    8870:	0000081a 	andeq	r0, r0, sl, lsl r8
    8874:	000c4003 	andeq	r4, ip, r3
    8878:	2c1c0200 	lfmcs	f0, 4, [ip], {-0}
    887c:	02000000 	andeq	r0, r0, #0
    8880:	06fc0502 	ldrbteq	r0, [ip], r2, lsl #10
    8884:	02020000 	andeq	r0, r2, #0
    8888:	00094907 	andeq	r4, r9, r7, lsl #18
    888c:	05040200 	streq	r0, [r4, #-512]	; 0x200
    8890:	000004da 	ldrdeq	r0, [r0], -sl
    8894:	52070402 	andpl	r0, r7, #33554432	; 0x2000000
    8898:	02000002 	andeq	r0, r0, #2
    889c:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
    88a0:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    88a4:	02000018 	andeq	r0, r0, #24
    88a8:	0000254e 	andeq	r2, r0, lr, asr #10
    88ac:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    88b0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    88b4:	000c4203 	andeq	r4, ip, r3, lsl #4
    88b8:	412a0300 	teqmi	sl, r0, lsl #6
    88bc:	03000000 	movweq	r0, #0
    88c0:	000018da 	ldrdeq	r1, [r0], -sl
    88c4:	006f4e03 	rsbeq	r4, pc, r3, lsl #28
    88c8:	1f030000 	svcne	0x00030000
    88cc:	0400000b 	streq	r0, [r0], #-11
    88d0:	000033d4 	ldrdeq	r3, [r0], -r4
    88d4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    88d8:	0000078b 	andeq	r0, r0, fp, lsl #15
    88dc:	01020405 	tsteq	r2, r5, lsl #8
    88e0:	00082108 	andeq	r2, r8, r8, lsl #2
    88e4:	19490600 	stmdbne	r9, {r9, sl}^
    88e8:	05400000 	strbeq	r0, [r0, #-0]
    88ec:	0000c914 	andeq	ip, r0, r4, lsl r9
    88f0:	00680700 	rsbeq	r0, r8, r0, lsl #14
    88f4:	00c91505 	sbceq	r1, r9, r5, lsl #10
    88f8:	00000000 	andeq	r0, r0, r0
    88fc:	00008c08 	andeq	r8, r0, r8, lsl #24
    8900:	0000d900 	andeq	sp, r0, r0, lsl #18
    8904:	00a20900 	adceq	r0, r2, r0, lsl #18
    8908:	00070000 	andeq	r0, r7, r0
    890c:	001b8f0a 	andseq	r8, fp, sl, lsl #30
    8910:	8c5f0100 	ldfhie	f0, [pc], {-0}
    8914:	03000000 	movweq	r0, #0
    8918:	000000fe 	strdeq	r0, [r0], -lr
    891c:	0100780b 	tsteq	r0, fp, lsl #16
    8920:	00008c5f 	andeq	r8, r0, pc, asr ip
    8924:	19dd0c00 	ldmibne	sp, {sl, fp}^
    8928:	5f010000 	svcpl	0x00010000
    892c:	0000007a 	andeq	r0, r0, sl, ror r0
    8930:	1b950d00 	blne	fe54bd38 <BootRAM+0xd4bc4d9>
    8934:	4b010000 	blmi	4893c <__Stack_Size+0x4813c>
    8938:	00011d03 	andeq	r1, r1, r3, lsl #26
    893c:	00780b00 	rsbseq	r0, r8, r0, lsl #22
    8940:	011d4b01 	tsteq	sp, r1, lsl #22
    8944:	760b0000 	strvc	r0, [fp], -r0
    8948:	8c4b0100 	stfhie	f0, [fp], {-0}
    894c:	00000000 	andeq	r0, r0, r0
    8950:	0081040e 	addeq	r0, r1, lr, lsl #8
    8954:	ac0a0000 	stcge	0, cr0, [sl], {-0}
    8958:	0100001b 	tsteq	r0, fp, lsl r0
    895c:	00008c3b 	andeq	r8, r0, fp, lsr ip
    8960:	01460300 	mrseq	r0, SPSR_und
    8964:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
    8968:	463b0100 	ldrtmi	r0, [fp], -r0, lsl #2
    896c:	0f000001 	svceq	0x00000001
    8970:	3d010072 	stccc	0, cr0, [r1, #-456]	; 0xfffffe38
    8974:	0000008c 	andeq	r0, r0, ip, lsl #1
    8978:	4c040e00 	stcmi	14, cr0, [r4], {-0}
    897c:	10000001 	andne	r0, r0, r1
    8980:	00000081 	andeq	r0, r0, r1, lsl #1
    8984:	00197011 	andseq	r7, r9, r1, lsl r0
    8988:	b4640100 	strbtlt	r0, [r4], #-256	; 0x100
    898c:	94080056 	strls	r0, [r8], #-86	; 0x56
    8990:	01000004 	tsteq	r0, r4
    8994:	0004619c 	muleq	r4, ip, r1
    8998:	00731200 	rsbseq	r1, r3, r0, lsl #4
    899c:	04616401 	strbteq	r6, [r1], #-1025	; 0x401
    89a0:	73240000 	teqvc	r4, #0
    89a4:	62120000 	andsvs	r0, r2, #0
    89a8:	01006b6c 	tsteq	r0, ip, ror #22
    89ac:	00014664 	andeq	r4, r1, r4, ror #12
    89b0:	00735100 	rsbseq	r5, r3, r0, lsl #2
    89b4:	00771300 	rsbseq	r1, r7, r0, lsl #6
    89b8:	04676601 	strbteq	r6, [r7], #-1537	; 0x601
    89bc:	91030000 	mrsls	r0, (UNDEF: 3)
    89c0:	61147ee0 	tstvs	r4, r0, ror #29
    89c4:	8c670100 	stfhie	f0, [r7], #-0
    89c8:	6f000000 	svcvs	0x00000000
    89cc:	14000073 	strne	r0, [r0], #-115	; 0x73
    89d0:	67010062 	strvs	r0, [r1, -r2, rrx]
    89d4:	0000008c 	andeq	r0, r0, ip, lsl #1
    89d8:	000073cf 	andeq	r7, r0, pc, asr #7
    89dc:	01006314 	tsteq	r0, r4, lsl r3
    89e0:	00008c67 	andeq	r8, r0, r7, ror #24
    89e4:	00741100 	rsbseq	r1, r4, r0, lsl #2
    89e8:	00641400 	rsbeq	r1, r4, r0, lsl #8
    89ec:	008c6701 	addeq	r6, ip, r1, lsl #14
    89f0:	745a0000 	ldrbvc	r0, [sl], #-0
    89f4:	65140000 	ldrvs	r0, [r4, #-0]
    89f8:	8c670100 	stfhie	f0, [r7], #-0
    89fc:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    8a00:	14000074 	strne	r0, [r0], #-116	; 0x74
    8a04:	67010066 	strvs	r0, [r1, -r6, rrx]
    8a08:	0000008c 	andeq	r0, r0, ip, lsl #1
    8a0c:	00007512 	andeq	r7, r0, r2, lsl r5
    8a10:	01006714 	tsteq	r0, r4, lsl r7
    8a14:	00008c67 	andeq	r8, r0, r7, ror #24
    8a18:	00755300 	rsbseq	r5, r5, r0, lsl #6
    8a1c:	00681400 	rsbeq	r1, r8, r0, lsl #8
    8a20:	008c6701 	addeq	r6, ip, r1, lsl #14
    8a24:	759b0000 	ldrvc	r0, [fp]
    8a28:	69140000 	ldmdbvs	r4, {}	; <UNPREDICTABLE>
    8a2c:	7a680100 	bvc	1a08e34 <__Stack_Size+0x1a08634>
    8a30:	e7000000 	str	r0, [r0, -r0]
    8a34:	15000075 	strne	r0, [r0, #-117]	; 0x75
    8a38:	00000123 	andeq	r0, r0, r3, lsr #2
    8a3c:	080056c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip, lr}
    8a40:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    8a44:	02306b01 	eorseq	r6, r0, #1024	; 0x400
    8a48:	33160000 	tstcc	r6, #0
    8a4c:	2a000001 	bcs	8a58 <__Stack_Size+0x8258>
    8a50:	17000076 	smlsdxne	r0, r6, r0, r0
    8a54:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    8a58:	00013c18 	andeq	r3, r1, r8, lsl ip
    8a5c:	0076a500 	rsbseq	sl, r6, r0, lsl #10
    8a60:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    8a64:	08005810 	stmdaeq	r0, {r4, fp, ip, lr}
    8a68:	00000262 	andeq	r0, r0, r2, ror #4
    8a6c:	00697714 	rsbeq	r7, r9, r4, lsl r7
    8a70:	04777b01 	ldrbteq	r7, [r7], #-2817	; 0xb01
    8a74:	77810000 	strvc	r0, [r1, r0]
    8a78:	741a0000 	ldrvc	r0, [sl], #-0
    8a7c:	0100001b 	tsteq	r0, fp, lsl r0
    8a80:	0004777c 	andeq	r7, r4, ip, ror r7
    8a84:	00779600 	rsbseq	r9, r7, r0, lsl #12
    8a88:	69771400 	ldmdbvs	r7!, {sl, ip}^
    8a8c:	7d010032 	stcvc	0, cr0, [r1, #-200]	; 0xffffff38
    8a90:	00000477 	andeq	r0, r0, r7, ror r4
    8a94:	000077f0 	strdeq	r7, [r0], -r0
    8a98:	37697714 			; <UNDEFINED> instruction: 0x37697714
    8a9c:	777e0100 	ldrbvc	r0, [lr, -r0, lsl #2]!
    8aa0:	34000004 	strcc	r0, [r0], #-4
    8aa4:	14000078 	strne	r0, [r0], #-120	; 0x78
    8aa8:	01003073 	tsteq	r0, r3, ror r0
    8aac:	0004777f 	andeq	r7, r4, pc, ror r7
    8ab0:	00787c00 	rsbseq	r7, r8, r0, lsl #24
    8ab4:	31731400 	cmncc	r3, r0, lsl #8
    8ab8:	77810100 	strvc	r0, [r1, r0, lsl #2]
    8abc:	b8000004 	stmdalt	r0, {r2}
    8ac0:	14000079 	strne	r0, [r0], #-121	; 0x79
    8ac4:	01003053 	qaddeq	r3, r3, r0
    8ac8:	00047785 	andeq	r7, r4, r5, lsl #15
    8acc:	007aa100 	rsbseq	sl, sl, r0, lsl #2
    8ad0:	31531400 	cmpcc	r3, r0, lsl #8
    8ad4:	77860100 	strvc	r0, [r6, r0, lsl #2]
    8ad8:	66000004 	strvs	r0, [r0], -r4
    8adc:	1400007b 	strne	r0, [r0], #-123	; 0x7b
    8ae0:	01006863 	tsteq	r0, r3, ror #16
    8ae4:	00047787 	andeq	r7, r4, r7, lsl #15
    8ae8:	007c2800 	rsbseq	r2, ip, r0, lsl #16
    8aec:	1b421a00 	blne	108f2f4 <__Stack_Size+0x108eaf4>
    8af0:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    8af4:	00000477 	andeq	r0, r0, r7, ror r4
    8af8:	00007c72 	andeq	r7, r0, r2, ror ip
    8afc:	6a616d14 	bvs	1863f54 <__Stack_Size+0x1863754>
    8b00:	77890100 	strvc	r0, [r9, r0, lsl #2]
    8b04:	8a000004 	bhi	8b1c <__Stack_Size+0x831c>
    8b08:	1a00007c 	bne	8d00 <__Stack_Size+0x8500>
    8b0c:	00001b48 	andeq	r1, r0, r8, asr #22
    8b10:	04778a01 	ldrbteq	r8, [r7], #-2561	; 0xa01
    8b14:	7ce60000 	stclvc	0, cr0, [r6]
    8b18:	d9150000 	ldmdble	r5, {}	; <UNPREDICTABLE>
    8b1c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    8b20:	e8080058 	stmda	r8, {r3, r4, r6}
    8b24:	01000008 	tsteq	r0, r8
    8b28:	00030d86 	andeq	r0, r3, r6, lsl #27
    8b2c:	00f21600 	rscseq	r1, r2, r0, lsl #12
    8b30:	7d0e0000 	stcvc	0, cr0, [lr, #-0]
    8b34:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    8b38:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    8b3c:	0000007d 	andeq	r0, r0, sp, ror r0
    8b40:	0000d915 	andeq	sp, r0, r5, lsl r9
    8b44:	00585200 	subseq	r5, r8, r0, lsl #4
    8b48:	00091008 	andeq	r1, r9, r8
    8b4c:	33860100 	orrcc	r0, r6, #0, 2
    8b50:	16000003 	strne	r0, [r0], -r3
    8b54:	000000f2 	strdeq	r0, [r0], -r2
    8b58:	00007d63 	andeq	r7, r0, r3, ror #26
    8b5c:	0000e916 	andeq	lr, r0, r6, lsl r9
    8b60:	007d2e00 	rsbseq	r2, sp, r0, lsl #28
    8b64:	d9150000 	ldmdble	r5, {}	; <UNPREDICTABLE>
    8b68:	84000000 	strhi	r0, [r0], #-0
    8b6c:	38080058 	stmdacc	r8, {r3, r4, r6}
    8b70:	01000009 	tsteq	r0, r9
    8b74:	00035986 	andeq	r5, r3, r6, lsl #19
    8b78:	00f21600 	rscseq	r1, r2, r0, lsl #12
    8b7c:	7d830000 	stcvc	0, cr0, [r3]
    8b80:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    8b84:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    8b88:	0000007d 	andeq	r0, r0, sp, ror r0
    8b8c:	0000d915 	andeq	sp, r0, r5, lsl r9
    8b90:	00588800 	subseq	r8, r8, r0, lsl #16
    8b94:	00097008 	andeq	r7, r9, r8
    8b98:	7f800100 	svcvc	0x00800100
    8b9c:	16000003 	strne	r0, [r0], -r3
    8ba0:	000000f2 	strdeq	r0, [r0], -r2
    8ba4:	00007da5 	andeq	r7, r0, r5, lsr #27
    8ba8:	0000e916 	andeq	lr, r0, r6, lsl r9
    8bac:	00779600 	rsbseq	r9, r7, r0, lsl #12
    8bb0:	d9150000 	ldmdble	r5, {}	; <UNPREDICTABLE>
    8bb4:	a0000000 	andge	r0, r0, r0
    8bb8:	a8080058 	stmdage	r8, {r3, r4, r6}
    8bbc:	01000009 	tsteq	r0, r9
    8bc0:	0003a580 	andeq	sl, r3, r0, lsl #11
    8bc4:	00f21600 	rscseq	r1, r2, r0, lsl #12
    8bc8:	7dc50000 	stclvc	0, cr0, [r5]
    8bcc:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    8bd0:	96000000 	strls	r0, [r0], -r0
    8bd4:	00000077 	andeq	r0, r0, r7, ror r0
    8bd8:	0000d915 	andeq	sp, r0, r5, lsl r9
    8bdc:	0058ec00 	subseq	lr, r8, r0, lsl #24
    8be0:	0009d808 	andeq	sp, r9, r8, lsl #16
    8be4:	cb820100 	blgt	fe088fec <BootRAM+0xcff978d>
    8be8:	16000003 	strne	r0, [r0], -r3
    8bec:	000000f2 	strdeq	r0, [r0], -r2
    8bf0:	00007de5 	andeq	r7, r0, r5, ror #27
    8bf4:	0000e916 	andeq	lr, r0, r6, lsl r9
    8bf8:	0077f000 	rsbseq	pc, r7, r0
    8bfc:	d9150000 	ldmdble	r5, {}	; <UNPREDICTABLE>
    8c00:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    8c04:	f0080058 			; <UNDEFINED> instruction: 0xf0080058
    8c08:	01000009 	tsteq	r0, r9
    8c0c:	0003f185 	andeq	pc, r3, r5, lsl #3
    8c10:	00f21600 	rscseq	r1, r2, r0, lsl #12
    8c14:	7e050000 	cdpvc	0, 0, cr0, cr5, cr0, {0}
    8c18:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    8c1c:	27000000 	strcs	r0, [r0, -r0]
    8c20:	0000007e 	andeq	r0, r0, lr, ror r0
    8c24:	0000d915 	andeq	sp, r0, r5, lsl r9
    8c28:	0058fe00 	subseq	pc, r8, r0, lsl #28
    8c2c:	000a1808 	andeq	r1, sl, r8, lsl #16
    8c30:	17850100 	strne	r0, [r5, r0, lsl #2]
    8c34:	16000004 	strne	r0, [r0], -r4
    8c38:	000000f2 	strdeq	r0, [r0], -r2
    8c3c:	00007e5c 	andeq	r7, r0, ip, asr lr
    8c40:	0000e916 	andeq	lr, r0, r6, lsl r9
    8c44:	007e2700 	rsbseq	r2, lr, r0, lsl #14
    8c48:	d9150000 	ldmdble	r5, {}	; <UNPREDICTABLE>
    8c4c:	60000000 	andvs	r0, r0, r0
    8c50:	40080059 	andmi	r0, r8, r9, asr r0
    8c54:	0100000a 	tsteq	r0, sl
    8c58:	00043d82 	andeq	r3, r4, r2, lsl #27
    8c5c:	00f21600 	rscseq	r1, r2, r0, lsl #12
    8c60:	7e7c0000 	cdpvc	0, 7, cr0, cr12, cr0, {0}
    8c64:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    8c68:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    8c6c:	00000077 	andeq	r0, r0, r7, ror r0
    8c70:	0000d91b 	andeq	sp, r0, fp, lsl r9
    8c74:	0059ca00 	subseq	ip, r9, r0, lsl #20
    8c78:	000a6008 	andeq	r6, sl, r8
    8c7c:	16850100 	strne	r0, [r5], r0, lsl #2
    8c80:	000000f2 	strdeq	r0, [r0], -r2
    8c84:	00007e9e 	muleq	r0, lr, lr
    8c88:	0000e916 	andeq	lr, r0, r6, lsl r9
    8c8c:	007e2700 	rsbseq	r2, lr, r0, lsl #14
    8c90:	00000000 	andeq	r0, r0, r0
    8c94:	00b2040e 	adcseq	r0, r2, lr, lsl #8
    8c98:	8c080000 	stchi	0, cr0, [r8], {-0}
    8c9c:	77000000 	strvc	r0, [r0, -r0]
    8ca0:	09000004 	stmdbeq	r0, {r2}
    8ca4:	000000a2 	andeq	r0, r0, r2, lsr #1
    8ca8:	8c10000f 	ldchi	0, cr0, [r0], {15}
    8cac:	11000000 	mrsne	r0, (UNDEF: 0)
    8cb0:	00001842 	andeq	r1, r0, r2, asr #16
    8cb4:	5b48a501 	blpl	12320c0 <__Stack_Size+0x12318c0>
    8cb8:	00880800 	addeq	r0, r8, r0, lsl #16
    8cbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    8cc0:	0000058f 	andeq	r0, r0, pc, lsl #11
    8cc4:	01007312 	tsteq	r0, r2, lsl r3
    8cc8:	000461a5 	andeq	r6, r4, r5, lsr #3
    8ccc:	007ec000 	rsbseq	ip, lr, r0
    8cd0:	6c621200 	sfmvs	f1, 2, [r2], #-0
    8cd4:	a501006b 	strge	r0, [r1, #-107]	; 0x6b
    8cd8:	00000146 	andeq	r0, r0, r6, asr #2
    8cdc:	00007ede 	ldrdeq	r7, [r0], -lr
    8ce0:	001b691c 	andseq	r6, fp, ip, lsl r9
    8ce4:	97a60100 	strls	r0, [r6, r0, lsl #2]!
    8ce8:	fc000000 	stc2	0, cr0, [r0], {-0}
    8cec:	1d00007e 	stcne	0, cr0, [r0, #-504]	; 0xfffffe08
    8cf0:	00001b8a 	andeq	r1, r0, sl, lsl #23
    8cf4:	058fa801 	streq	sl, [pc, #2049]	; 94fd <__Stack_Size+0x8cfd>
    8cf8:	91030000 	mrsls	r0, (UNDEF: 3)
    8cfc:	791a7ee0 	ldmdbvc	sl, {r5, r6, r7, r9, sl, fp, ip, sp, lr}
    8d00:	0100001b 	tsteq	r0, fp, lsl r0
    8d04:	00059fa9 	andeq	r9, r5, r9, lsr #31
    8d08:	007f3300 	rsbseq	r3, pc, r0, lsl #6
    8d0c:	00fe1500 	rscseq	r1, lr, r0, lsl #10
    8d10:	5b6c0000 	blpl	1b08d18 <__Stack_Size+0x1b08518>
    8d14:	0a980800 	beq	fe60ad1c <BootRAM+0xd57b4bd>
    8d18:	b5010000 	strlt	r0, [r1, #-0]
    8d1c:	00000500 	andeq	r0, r0, r0, lsl #10
    8d20:	00011316 	andeq	r1, r1, r6, lsl r3
    8d24:	007f7200 	rsbseq	r7, pc, r0, lsl #4
    8d28:	010a1600 	tsteq	sl, r0, lsl #12
    8d2c:	7f9f0000 	svcvc	0x009f0000
    8d30:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    8d34:	08005b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, ip, lr}
    8d38:	00000741 	andeq	r0, r0, r1, asr #14
    8d3c:	0000051f 	andeq	r0, r0, pc, lsl r5
    8d40:	0252011f 	subseq	r0, r2, #-1073741817	; 0xc0000007
    8d44:	011f0075 	tsteq	pc, r5, ror r0	; <UNPREDICTABLE>
    8d48:	1f300151 	svcne	0x00300151
    8d4c:	7d025001 	stcvc	0, cr5, [r2, #-4]
    8d50:	9e1e0000 	cdpls	0, 1, cr0, cr14, cr0, {0}
    8d54:	5108005b 	qaddpl	r0, fp, r8
    8d58:	39000001 	stmdbcc	r0, {r0}
    8d5c:	1f000005 	svcne	0x00000005
    8d60:	7d025101 	stfvcs	f5, [r2, #-4]
    8d64:	50011f00 	andpl	r1, r1, r0, lsl #30
    8d68:	00007a02 	andeq	r7, r0, r2, lsl #20
    8d6c:	005bae1e 	subseq	sl, fp, lr, lsl lr
    8d70:	00075e08 	andeq	r5, r7, r8, lsl #28
    8d74:	00055900 	andeq	r5, r5, r0, lsl #18
    8d78:	52011f00 	andpl	r1, r1, #0, 30
    8d7c:	1f007602 	svcne	0x00007602
    8d80:	77025101 	strvc	r5, [r2, -r1, lsl #2]
    8d84:	50011f00 	andpl	r1, r1, r0, lsl #30
    8d88:	00007d02 	andeq	r7, r0, r2, lsl #26
    8d8c:	005bc41e 	subseq	ip, fp, lr, lsl r4
    8d90:	00015108 	andeq	r5, r1, r8, lsl #2
    8d94:	00057300 	andeq	r7, r5, r0, lsl #6
    8d98:	51011f00 	tstpl	r1, r0, lsl #30
    8d9c:	1f007d02 	svcne	0x00007d02
    8da0:	7a025001 	bvc	9cdac <__Stack_Size+0x9c5ac>
    8da4:	ce200000 	cdpgt	0, 2, cr0, cr0, cr0, {0}
    8da8:	4108005b 	qaddmi	r0, fp, r8
    8dac:	1f000007 	svcne	0x00000007
    8db0:	75025201 	strvc	r5, [r2, #-513]	; 0x201
    8db4:	51011f00 	tstpl	r1, r0, lsl #30
    8db8:	011f3001 	tsteq	pc, r1
    8dbc:	007d0250 	rsbseq	r0, sp, r0, asr r2
    8dc0:	81080000 	mrshi	r0, (UNDEF: 8)
    8dc4:	9f000000 	svcls	0x00000000
    8dc8:	09000005 	stmdbeq	r0, {r0, r2}
    8dcc:	000000a2 	andeq	r0, r0, r2, lsr #1
    8dd0:	9710007f 			; <UNDEFINED> instruction: 0x9710007f
    8dd4:	11000000 	mrsne	r0, (UNDEF: 0)
    8dd8:	00001899 	muleq	r0, r9, r8
    8ddc:	5bd0b901 	blpl	ff4371e8 <BootRAM+0xe3a7989>
    8de0:	02960800 	addseq	r0, r6, #0, 16
    8de4:	9c010000 	stcls	0, cr0, [r1], {-0}
    8de8:	000006ef 	andeq	r0, r0, pc, ror #13
    8dec:	01007312 	tsteq	r0, r2, lsl r3
    8df0:	0006efb9 			; <UNDEFINED> instruction: 0x0006efb9
    8df4:	00800200 	addeq	r0, r0, r0, lsl #4
    8df8:	0f821c00 	svceq	0x00821c00
    8dfc:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    8e00:	0000011d 	andeq	r0, r0, sp, lsl r1
    8e04:	00008021 	andeq	r8, r0, r1, lsr #32
    8e08:	001b831c 	andseq	r8, fp, ip, lsl r3
    8e0c:	33ba0100 			; <UNDEFINED> instruction: 0x33ba0100
    8e10:	64000000 	strvs	r0, [r0], #-0
    8e14:	12000080 	andne	r0, r0, #128	; 0x80
    8e18:	006e656c 	rsbeq	r6, lr, ip, ror #10
    8e1c:	0033ba01 	eorseq	fp, r3, r1, lsl #20
    8e20:	80850000 	addhi	r0, r5, r0
    8e24:	69140000 	ldmdbvs	r4, {}	; <UNPREDICTABLE>
    8e28:	7abc0100 	bvc	fef09230 <BootRAM+0xde799d1>
    8e2c:	fa000000 	blx	8e34 <__Stack_Size+0x8634>
    8e30:	15000080 	strne	r0, [r0, #-128]	; 0x80
    8e34:	000000fe 	strdeq	r0, [r0], -lr
    8e38:	08005c2a 	stmdaeq	r0, {r1, r3, r5, sl, fp, ip, lr}
    8e3c:	00000ab0 			; <UNDEFINED> instruction: 0x00000ab0
    8e40:	0626d801 	strteq	sp, [r6], -r1, lsl #16
    8e44:	13160000 	tstne	r6, #0
    8e48:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    8e4c:	16000081 	strne	r0, [r0], -r1, lsl #1
    8e50:	0000010a 	andeq	r0, r0, sl, lsl #2
    8e54:	00008194 	muleq	r0, r4, r1
    8e58:	5cdc2100 	ldfple	f2, [ip], {0}
    8e5c:	00e20800 	rsceq	r0, r2, r0, lsl #16
    8e60:	06900000 	ldreq	r0, [r0], r0
    8e64:	74130000 	ldrvc	r0, [r3], #-0
    8e68:	0100706d 	tsteq	r0, sp, rrx
    8e6c:	0006faca 	andeq	pc, r6, sl, asr #21
    8e70:	50910200 	addspl	r0, r1, r0, lsl #4
    8e74:	01006314 	tsteq	r0, r4, lsl r3
    8e78:	000033cb 	andeq	r3, r0, fp, asr #7
    8e7c:	00820200 	addeq	r0, r2, r0, lsl #4
    8e80:	00fe1500 	rscseq	r1, lr, r0, lsl #10
    8e84:	5ce60000 	stclpl	0, cr0, [r6]
    8e88:	0ad00800 	beq	ff40ae90 <BootRAM+0xe37b631>
    8e8c:	d0010000 	andle	r0, r1, r0
    8e90:	00000670 	andeq	r0, r0, r0, ror r6
    8e94:	00011322 	andeq	r1, r1, r2, lsr #6
    8e98:	010a1600 	tsteq	sl, r0, lsl #12
    8e9c:	82150000 	andshi	r0, r5, #0
    8ea0:	20000000 	andcs	r0, r0, r0
    8ea4:	08005dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp, ip, lr}
    8ea8:	0000075e 	andeq	r0, r0, lr, asr r7
    8eac:	0951011f 	ldmdbeq	r1, {r0, r1, r2, r3, r4, r8}^
    8eb0:	44910091 	ldrmi	r0, [r1], #145	; 0x91
    8eb4:	30082206 	andcc	r2, r8, r6, lsl #4
    8eb8:	50011f1c 	andpl	r1, r1, ip, lsl pc
    8ebc:	7fac9104 	svcvc	0x00ac9104
    8ec0:	19000006 	stmdbne	r0, {r1, r2}
    8ec4:	08005dbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, sl, fp, ip, lr}
    8ec8:	000000a2 	andeq	r0, r0, r2, lsr #1
    8ecc:	706d7413 	rsbvc	r7, sp, r3, lsl r4
    8ed0:	fadf0100 	blx	ff7c92d8 <BootRAM+0xe739a79>
    8ed4:	02000006 	andeq	r0, r0, #6
    8ed8:	fe155091 	mrc2	0, 0, r5, cr5, cr1, {4}
    8edc:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    8ee0:	0008005d 	andeq	r0, r8, sp, asr r0
    8ee4:	0100000b 	tsteq	r0, fp
    8ee8:	0006cde1 	andeq	ip, r6, r1, ror #27
    8eec:	01131600 	tsteq	r3, r0, lsl #12
    8ef0:	822a0000 	eorhi	r0, sl, #0
    8ef4:	0a160000 	beq	588efc <__Stack_Size+0x5886fc>
    8ef8:	a7000001 	strge	r0, [r0, -r1]
    8efc:	00000082 	andeq	r0, r0, r2, lsl #1
    8f00:	005e6020 	subseq	r6, lr, r0, lsr #32
    8f04:	00075e08 	andeq	r5, r7, r8, lsl #28
    8f08:	52011f00 	andpl	r1, r1, #0, 30
    8f0c:	7fa49104 	svcvc	0x00a49104
    8f10:	51011f06 	tstpl	r1, r6, lsl #30
    8f14:	1f509102 	svcne	0x00509102
    8f18:	91045001 	tstls	r4, r1
    8f1c:	00067fac 	andeq	r7, r6, ip, lsr #31
    8f20:	040e0000 	streq	r0, [lr], #-0
    8f24:	000006f5 	strdeq	r0, [r0], -r5
    8f28:	0000b210 	andeq	fp, r0, r0, lsl r2
    8f2c:	00810800 	addeq	r0, r1, r0, lsl #16
    8f30:	070a0000 	streq	r0, [sl, -r0]
    8f34:	a2090000 	andge	r0, r9, #0
    8f38:	07000000 	streq	r0, [r0, -r0]
    8f3c:	008c0800 	addeq	r0, ip, r0, lsl #16
    8f40:	071a0000 	ldreq	r0, [sl, -r0]
    8f44:	a2090000 	andge	r0, r9, #0
    8f48:	4f000000 	svcmi	0x00000000
    8f4c:	1bb31d00 	blne	fecd0354 <BootRAM+0xdc40af5>
    8f50:	10010000 	andne	r0, r1, r0
    8f54:	0000072b 	andeq	r0, r0, fp, lsr #14
    8f58:	78c80305 	stmiavc	r8, {r0, r2, r8, r9}^
    8f5c:	0a100800 	beq	40af64 <__Stack_Size+0x40a764>
    8f60:	23000007 	movwcs	r0, #7
    8f64:	00001884 	andeq	r1, r0, r4, lsl #17
    8f68:	06f50901 	ldrbteq	r0, [r5], r1, lsl #18
    8f6c:	03050000 	movweq	r0, #20480	; 0x5000
    8f70:	08007888 	stmdaeq	r0, {r3, r7, fp, ip, sp, lr}
    8f74:	000c1624 	andeq	r1, ip, r4, lsr #12
    8f78:	0000a900 	andeq	sl, r0, r0, lsl #18
    8f7c:	00075e00 	andeq	r5, r7, r0, lsl #28
    8f80:	00a92500 	adceq	r2, r9, r0, lsl #10
    8f84:	7a250000 	bvc	948f8c <__Stack_Size+0x94878c>
    8f88:	25000000 	strcs	r0, [r0, #-0]
    8f8c:	000000a2 	andeq	r0, r0, r2, lsr #1
    8f90:	174d2400 	strbne	r2, [sp, -r0, lsl #8]
    8f94:	00a90000 	adceq	r0, r9, r0
    8f98:	077b0000 	ldrbeq	r0, [fp, -r0]!
    8f9c:	a9250000 	stmdbge	r5!, {}	; <UNPREDICTABLE>
    8fa0:	25000000 	strcs	r0, [r0, #-0]
    8fa4:	0000077b 	andeq	r0, r0, fp, ror r7
    8fa8:	0000a225 	andeq	sl, r0, r5, lsr #4
    8fac:	040e0000 	streq	r0, [lr], #-0
    8fb0:	00000781 	andeq	r0, r0, r1, lsl #15
    8fb4:	01cc0026 	biceq	r0, ip, r6, lsr #32
    8fb8:	00040000 	andeq	r0, r4, r0
    8fbc:	00001fa7 	andeq	r1, r0, r7, lsr #31
    8fc0:	06390104 	ldrteq	r0, [r9], -r4, lsl #2
    8fc4:	2a010000 	bcs	48fcc <__Stack_Size+0x487cc>
    8fc8:	9300001c 	movwls	r0, #28
    8fcc:	40000008 	andmi	r0, r0, r8
    8fd0:	0000000b 	andeq	r0, r0, fp
    8fd4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8fd8:	02000032 	andeq	r0, r0, #50	; 0x32
    8fdc:	460c0201 	strmi	r0, [ip], -r1, lsl #4
    8fe0:	03000000 	movweq	r0, #0
    8fe4:	00000b59 	andeq	r0, r0, r9, asr fp
    8fe8:	0b600300 	bleq	1809bf0 <__Stack_Size+0x18093f0>
    8fec:	03010000 	movweq	r0, #4096	; 0x1000
    8ff0:	00000d11 	andeq	r0, r0, r1, lsl sp
    8ff4:	0b720302 	bleq	1c89c04 <__Stack_Size+0x1c89404>
    8ff8:	00030000 	andeq	r0, r3, r0
    8ffc:	000dce04 	andeq	ip, sp, r4, lsl #28
    9000:	250e0200 	strcs	r0, [lr, #-512]	; 0x200
    9004:	05000000 	streq	r0, [r0, #-0]
    9008:	72100202 	andsvc	r0, r0, #536870912	; 0x20000000
    900c:	06000000 	streq	r0, [r0], -r0
    9010:	00000ddb 	ldrdeq	r0, [r0], -fp
    9014:	00461202 	subeq	r1, r6, r2, lsl #4
    9018:	06000000 	streq	r0, [r0], -r0
    901c:	00000b87 	andeq	r0, r0, r7, lsl #23
    9020:	00721302 	rsbseq	r1, r2, r2, lsl #6
    9024:	00010000 	andeq	r0, r1, r0
    9028:	21080107 	tstcs	r8, r7, lsl #2
    902c:	04000008 	streq	r0, [r0], #-8
    9030:	00000ba7 	andeq	r0, r0, r7, lsr #23
    9034:	00511402 	subseq	r1, r1, r2, lsl #8
    9038:	f7080000 			; <UNDEFINED> instruction: 0xf7080000
    903c:	0100001b 	tsteq	r0, fp, lsl r0
    9040:	0000ca0a 	andeq	ip, r0, sl, lsl #20
    9044:	00000000 	andeq	r0, r0, r0
    9048:	00001800 	andeq	r1, r0, r0, lsl #16
    904c:	ca9c0100 	bgt	fe709454 <BootRAM+0xd679bf5>
    9050:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    9054:	00001bbb 			; <UNDEFINED> instruction: 0x00001bbb
    9058:	00720a01 	rsbseq	r0, r2, r1, lsl #20
    905c:	830a0000 	movwhi	r0, #40960	; 0xa000
    9060:	c40a0000 	strgt	r0, [sl], #-0
    9064:	0100001b 	tsteq	r0, fp, lsl r0
    9068:	0000e80c 	andeq	lr, r0, ip, lsl #16
    906c:	00030500 	andeq	r0, r3, r0, lsl #10
    9070:	0b000000 	bleq	9078 <__Stack_Size+0x8878>
    9074:	00001be0 	andeq	r1, r0, r0, ror #23
    9078:	00ed0d01 	rsceq	r0, sp, r1, lsl #26
    907c:	00500000 	subseq	r0, r0, r0
    9080:	6905040c 	stmdbvs	r5, {r2, r3, sl}
    9084:	0d00746e 	cfstrseq	mvf7, [r0, #-440]	; 0xfffffe48
    9088:	00000072 	andeq	r0, r0, r2, ror r0
    908c:	000000e1 	andeq	r0, r0, r1, ror #1
    9090:	0000e10e 	andeq	lr, r0, lr, lsl #2
    9094:	07004f00 	streq	r4, [r0, -r0, lsl #30]
    9098:	078b0704 	streq	r0, [fp, r4, lsl #14]
    909c:	d10f0000 	mrsle	r0, CPSR
    90a0:	0f000000 	svceq	0x00000000
    90a4:	00000072 	andeq	r0, r0, r2, ror r0
    90a8:	000e2410 	andeq	r2, lr, r0, lsl r4
    90ac:	00130100 	andseq	r0, r3, r0, lsl #2
    90b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    90b4:	01000000 	mrseq	r0, (UNDEF: 0)
    90b8:	0001159c 	muleq	r1, ip, r5
    90bc:	1c131100 	ldfnes	f1, [r3], {-0}
    90c0:	13010000 	movwne	r0, #4096	; 0x1000
    90c4:	00000115 	andeq	r0, r0, r5, lsl r1
    90c8:	12005001 	andne	r5, r0, #1
    90cc:	00007904 	andeq	r7, r0, r4, lsl #18
    90d0:	0bcd0800 	bleq	ff34b0d8 <BootRAM+0xe2bb879>
    90d4:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    90d8:	000000ca 	andeq	r0, r0, sl, asr #1
    90dc:	00000000 	andeq	r0, r0, r0
    90e0:	00000100 	andeq	r0, r0, r0, lsl #2
    90e4:	01be9c01 			; <UNDEFINED> instruction: 0x01be9c01
    90e8:	0b090000 	bleq	2490f0 <__Stack_Size+0x2488f0>
    90ec:	0100001c 	tsteq	r0, ip, lsl r0
    90f0:	0001be19 	andeq	fp, r1, r9, lsl lr
    90f4:	00833600 	addeq	r3, r3, r0, lsl #12
    90f8:	1bcd0900 	blne	ff34b500 <BootRAM+0xe2bbca1>
    90fc:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    9100:	000001c4 	andeq	r0, r0, r4, asr #3
    9104:	000083ac 	andeq	r8, r0, ip, lsr #7
    9108:	001c1c09 	andseq	r1, ip, r9, lsl #24
    910c:	c9190100 	ldmdbgt	r9, {r8}
    9110:	17000001 	strne	r0, [r0, -r1]
    9114:	09000084 	stmdbeq	r0, {r2, r7}
    9118:	00001c13 	andeq	r1, r0, r3, lsl ip
    911c:	01151901 	tsteq	r5, r1, lsl #18
    9120:	84350000 	ldrthi	r0, [r5], #-0
    9124:	ee130000 	cdp	0, 1, cr0, cr3, cr0, {0}
    9128:	0100001b 	tsteq	r0, fp, lsl r0
    912c:	0001be1b 	andeq	fp, r1, fp, lsl lr
    9130:	00845300 	addeq	r5, r4, r0, lsl #6
    9134:	0b871300 	bleq	fe1cdd3c <BootRAM+0xd13e4dd>
    9138:	1c010000 	stcne	0, cr0, [r1], {-0}
    913c:	000001c9 	andeq	r0, r0, r9, asr #3
    9140:	00008500 	andeq	r8, r0, r0, lsl #10
    9144:	001bd714 	andseq	sp, fp, r4, lsl r7
    9148:	721d0100 	andsvc	r0, sp, #0, 2
    914c:	15000000 	strne	r0, [r0, #-0]
    9150:	00000000 	andeq	r0, r0, r0
    9154:	00000084 	andeq	r0, r0, r4, lsl #1
    9158:	00000015 	andeq	r0, r0, r5, lsl r0
    915c:	00008400 	andeq	r8, r0, r0, lsl #8
    9160:	00001500 	andeq	r1, r0, r0, lsl #10
    9164:	00840000 	addeq	r0, r4, r0
    9168:	00150000 	andseq	r0, r5, r0
    916c:	84000000 	strhi	r0, [r0], #-0
    9170:	00000000 	andeq	r0, r0, r0
    9174:	00ed0412 	rsceq	r0, sp, r2, lsl r4
    9178:	ca0f0000 	bgt	3c9180 <__Stack_Size+0x3c8980>
    917c:	12000000 	andne	r0, r0, #0
    9180:	00007204 	andeq	r7, r0, r4, lsl #4
    9184:	02670000 	rsbeq	r0, r7, #0
    9188:	00040000 	andeq	r0, r4, r0
    918c:	000020cb 	andeq	r2, r0, fp, asr #1
    9190:	06390104 	ldrteq	r0, [r9], -r4, lsl #2
    9194:	8a010000 	bhi	4919c <__Stack_Size+0x4899c>
    9198:	9300001c 	movwls	r0, #28
    919c:	60000008 	andvs	r0, r0, r8
    91a0:	0000000b 	andeq	r0, r0, fp
    91a4:	cc000000 	stcgt	0, cr0, [r0], {-0}
    91a8:	02000032 	andeq	r0, r0, #50	; 0x32
    91ac:	400c0201 	andmi	r0, ip, r1, lsl #4
    91b0:	03000000 	movweq	r0, #0
    91b4:	00000aca 	andeq	r0, r0, sl, asr #21
    91b8:	0c0f0300 	stceq	3, cr0, [pc], {-0}
    91bc:	03010000 	movweq	r0, #4096	; 0x1000
    91c0:	00000adc 	ldrdeq	r0, [r0], -ip
    91c4:	18040002 	stmdane	r4, {r1}
    91c8:	0200000d 	andeq	r0, r0, #13
    91cc:	0000250e 	andeq	r2, r0, lr, lsl #10
    91d0:	02080500 	andeq	r0, r8, #0, 10
    91d4:	00007810 	andeq	r7, r0, r0, lsl r8
    91d8:	0ddb0600 	ldcleq	6, cr0, [fp]
    91dc:	12020000 	andne	r0, r2, #0
    91e0:	00000040 	andeq	r0, r0, r0, asr #32
    91e4:	0ac30600 	beq	ff0ca9ec <BootRAM+0xe03b18d>
    91e8:	13020000 	movwne	r0, #8192	; 0x2000
    91ec:	00000078 	andeq	r0, r0, r8, ror r0
    91f0:	0e060601 	cfmadd32eq	mvax0, mvfx0, mvfx6, mvfx1
    91f4:	14020000 	strne	r0, [r2], #-0
    91f8:	0000007f 	andeq	r0, r0, pc, ror r0
    91fc:	01070004 	tsteq	r7, r4
    9200:	00082108 	andeq	r2, r8, r8, lsl #2
    9204:	05040800 	streq	r0, [r4, #-2048]	; 0x800
    9208:	00746e69 	rsbseq	r6, r4, r9, ror #28
    920c:	000bba04 	andeq	fp, fp, r4, lsl #20
    9210:	4b150200 	blmi	549a18 <__Stack_Size+0x549218>
    9214:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    9218:	00000aab 	andeq	r0, r0, fp, lsr #21
    921c:	5e680c01 	cdppl	12, 6, cr0, cr8, cr1, {0}
    9220:	000a0800 	andeq	r0, sl, r0, lsl #16
    9224:	9c010000 	stcls	0, cr0, [r1], {-0}
    9228:	000000b4 	strheq	r0, [r0], -r4
    922c:	001c130a 	andseq	r1, ip, sl, lsl #6
    9230:	b40c0100 	strlt	r0, [ip], #-256	; 0x100
    9234:	01000000 	mrseq	r0, (UNDEF: 0)
    9238:	040b0050 	streq	r0, [fp], #-80	; 0x50
    923c:	00000086 	andeq	r0, r0, r6, lsl #1
    9240:	001c3b0c 	andseq	r3, ip, ip, lsl #22
    9244:	78130100 	ldmdavc	r3, {r8}
    9248:	74000000 	strvc	r0, [r0], #-0
    924c:	1008005e 	andne	r0, r8, lr, asr r0
    9250:	01000000 	mrseq	r0, (UNDEF: 0)
    9254:	0000ee9c 	muleq	r0, ip, lr
    9258:	1bbb0d00 	blne	feecc660 <BootRAM+0xde3ce01>
    925c:	13010000 	movwne	r0, #4096	; 0x1000
    9260:	00000078 	andeq	r0, r0, r8, ror r0
    9264:	00008597 	muleq	r0, r7, r5
    9268:	001c690e 	andseq	r6, ip, lr, lsl #18
    926c:	ee150100 	mufs	f0, f5, f0
    9270:	00000000 	andeq	r0, r0, r0
    9274:	0000f30f 	andeq	pc, r0, pc, lsl #6
    9278:	f9040b00 			; <UNDEFINED> instruction: 0xf9040b00
    927c:	0f000000 	svceq	0x00000000
    9280:	00000078 	andeq	r0, r0, r8, ror r0
    9284:	000e100c 	andeq	r1, lr, ip
    9288:	7f1a0100 	svcvc	0x001a0100
    928c:	84000000 	strhi	r0, [r0], #-0
    9290:	d608005e 			; <UNDEFINED> instruction: 0xd608005e
    9294:	01000000 	mrseq	r0, (UNDEF: 0)
    9298:	0001f59c 	muleq	r1, ip, r5
    929c:	1c5c0d00 	mrrcne	13, 0, r0, ip, cr0
    92a0:	1a010000 	bne	492a8 <__Stack_Size+0x48aa8>
    92a4:	000000f3 	strdeq	r0, [r0], -r3
    92a8:	000085b8 			; <UNDEFINED> instruction: 0x000085b8
    92ac:	001bcd0d 	andseq	ip, fp, sp, lsl #26
    92b0:	7f1a0100 	svcvc	0x001a0100
    92b4:	0b000000 	bleq	92bc <__Stack_Size+0x8abc>
    92b8:	0d000086 	stceq	0, cr0, [r0, #-536]	; 0xfffffde8
    92bc:	00001c81 	andeq	r1, r0, r1, lsl #25
    92c0:	01f51a01 	mvnseq	r1, r1, lsl #20
    92c4:	865e0000 	ldrbhi	r0, [lr], -r0
    92c8:	130d0000 	movwne	r0, #53248	; 0xd000
    92cc:	0100001c 	tsteq	r0, ip, lsl r0
    92d0:	0000b41a 	andeq	fp, r0, sl, lsl r4
    92d4:	0086a800 	addeq	sl, r6, r0, lsl #16
    92d8:	0b871000 	bleq	fe1cd2e0 <BootRAM+0xd13da81>
    92dc:	1c010000 	stcne	0, cr0, [r1], {-0}
    92e0:	000000f3 	strdeq	r0, [r0], -r3
    92e4:	000086c6 	andeq	r8, r0, r6, asr #13
    92e8:	001c4f11 	andseq	r4, ip, r1, lsl pc
    92ec:	ee1d0100 	mufe	f0, f5, f0
    92f0:	01000000 	mrseq	r0, (UNDEF: 0)
    92f4:	1bee105b 	blne	ffb8d468 <BootRAM+0xeafdc09>
    92f8:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    92fc:	000001f5 	strdeq	r0, [r0], -r5
    9300:	00008726 	andeq	r8, r0, r6, lsr #14
    9304:	000ac310 	andeq	ip, sl, r0, lsl r3
    9308:	781f0100 	ldmdavc	pc, {r8}	; <UNPREDICTABLE>
    930c:	ad000000 	stcge	0, cr0, [r0, #-0]
    9310:	10000087 	andne	r0, r0, r7, lsl #1
    9314:	00001bd7 	ldrdeq	r1, [r0], -r7
    9318:	00782001 	rsbseq	r2, r8, r1
    931c:	88430000 	stmdahi	r3, {}^	; <UNPREDICTABLE>
    9320:	c6120000 	ldrgt	r0, [r2], -r0
    9324:	ba08005e 	blt	2094a4 <__Stack_Size+0x208ca4>
    9328:	b2000000 	andlt	r0, r0, #0
    932c:	13000001 	movwne	r0, #1
    9330:	76045001 	strvc	r5, [r4], -r1
    9334:	00253200 	eoreq	r3, r5, r0, lsl #4
    9338:	005efc12 	subseq	pc, lr, r2, lsl ip	; <UNPREDICTABLE>
    933c:	0000ba08 	andeq	fp, r0, r8, lsl #20
    9340:	0001cb00 	andeq	ip, r1, r0, lsl #22
    9344:	50011300 	andpl	r1, r1, r0, lsl #6
    9348:	34007507 	strcc	r7, [r0], #-1287	; 0x507
    934c:	21007625 	tstcs	r0, r5, lsr #12
    9350:	5f261200 	svcpl	0x00261200
    9354:	00ba0800 	adcseq	r0, sl, r0, lsl #16
    9358:	01e40000 	mvneq	r0, r0
    935c:	01130000 	tsteq	r3, r0
    9360:	00790750 	rsbseq	r0, r9, r0, asr r7
    9364:	00762536 	rsbseq	r2, r6, r6, lsr r5
    9368:	32140021 	andscc	r0, r4, #33	; 0x21
    936c:	ba08005f 	blt	2094f0 <__Stack_Size+0x208cf0>
    9370:	13000000 	movwne	r0, #0
    9374:	76025001 	strvc	r5, [r2], -r1
    9378:	0b000000 	bleq	9380 <__Stack_Size+0x8b80>
    937c:	00007804 	andeq	r7, r0, r4, lsl #16
    9380:	0da40c00 	stceq	12, cr0, [r4]
    9384:	57010000 	strpl	r0, [r1, -r0]
    9388:	0000007f 	andeq	r0, r0, pc, ror r0
    938c:	08005f5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sl, fp, ip, lr}
    9390:	00000040 	andeq	r0, r0, r0, asr #32
    9394:	02549c01 	subseq	r9, r4, #256	; 0x100
    9398:	810d0000 	mrshi	r0, (UNDEF: 13)
    939c:	0100001c 	tsteq	r0, ip, lsl r0
    93a0:	0001f557 	andeq	pc, r1, r7, asr r5	; <UNPREDICTABLE>
    93a4:	00888f00 	addeq	r8, r8, r0, lsl #30
    93a8:	1c130d00 	ldcne	13, cr0, [r3], {-0}
    93ac:	57010000 	strpl	r0, [r1, -r0]
    93b0:	000000b4 	strheq	r0, [r0], -r4
    93b4:	000088d9 	ldrdeq	r8, [r0], -r9
    93b8:	001bee10 	andseq	lr, fp, r0, lsl lr
    93bc:	f5590100 			; <UNDEFINED> instruction: 0xf5590100
    93c0:	2c000001 	stccs	0, cr0, [r0], {1}
    93c4:	15000089 	strne	r0, [r0, #-137]	; 0x89
    93c8:	08005f6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}
    93cc:	000000ba 	strheq	r0, [r0], -sl
    93d0:	005f8015 	subseq	r8, pc, r5, lsl r0	; <UNPREDICTABLE>
    93d4:	0000ba08 	andeq	fp, r0, r8, lsl #20
    93d8:	72160000 	andsvc	r0, r6, #0
    93dc:	0100001c 	tsteq	r0, ip, lsl r0
    93e0:	0002650a 	andeq	r6, r2, sl, lsl #10
    93e4:	00030500 	andeq	r0, r3, r0, lsl #10
    93e8:	0f000000 	svceq	0x00000000
    93ec:	0000007f 	andeq	r0, r0, pc, ror r0
    93f0:	000a0c00 	andeq	r0, sl, r0, lsl #24
    93f4:	03000400 	movweq	r0, #1024	; 0x400
    93f8:	04000022 	streq	r0, [r0], #-34	; 0x22
    93fc:	00063901 	andeq	r3, r6, r1, lsl #18
    9400:	1c9b0100 	ldfnes	f0, [fp], {0}
    9404:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    9408:	0b880000 	bleq	fe209410 <BootRAM+0xd179bb1>
    940c:	00000000 	andeq	r0, r0, r0
    9410:	33ab0000 			; <UNDEFINED> instruction: 0x33ab0000
    9414:	1f020000 	svcne	0x00020000
    9418:	0200000b 	andeq	r0, r0, #11
    941c:	000030d4 	ldrdeq	r3, [r0], -r4
    9420:	07040300 	streq	r0, [r4, -r0, lsl #6]
    9424:	00000257 	andeq	r0, r0, r7, asr r2
    9428:	04050404 	streq	r0, [r5], #-1028	; 0x404
    942c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    9430:	06010300 	streq	r0, [r1], -r0, lsl #6
    9434:	0000081a 	andeq	r0, r0, sl, lsl r8
    9438:	000c4002 	andeq	r4, ip, r2
    943c:	521c0300 	andspl	r0, ip, #0, 6
    9440:	03000000 	movweq	r0, #0
    9444:	08180801 	ldmdaeq	r8, {r0, fp}
    9448:	02030000 	andeq	r0, r3, #0
    944c:	0006fc05 	andeq	pc, r6, r5, lsl #24
    9450:	0b670200 	bleq	19c9c58 <__Stack_Size+0x19c9458>
    9454:	26030000 	strcs	r0, [r3], -r0
    9458:	0000006b 	andeq	r0, r0, fp, rrx
    945c:	49070203 	stmdbmi	r7, {r0, r1, r9}
    9460:	03000009 	movweq	r0, #9
    9464:	04da0504 	ldrbeq	r0, [sl], #1284	; 0x504
    9468:	4e020000 	cdpmi	0, 0, cr0, cr2, cr0, {0}
    946c:	0300000b 	movweq	r0, #11
    9470:	00008438 	andeq	r8, r0, r8, lsr r4
    9474:	07040300 	streq	r0, [r4, -r0, lsl #6]
    9478:	00000252 	andeq	r0, r0, r2, asr r2
    947c:	d5050803 	strle	r0, [r5, #-2051]	; 0x803
    9480:	03000004 	movweq	r0, #4
    9484:	024d0708 	subeq	r0, sp, #8, 14	; 0x200000
    9488:	04030000 	streq	r0, [r3], #-0
    948c:	00078b07 	andeq	r8, r7, r7, lsl #22
    9490:	52040600 	andpl	r0, r4, #0, 12
    9494:	06000000 	streq	r0, [r0], -r0
    9498:	0000ac04 	andeq	sl, r0, r4, lsl #24
    949c:	08010300 	stmdaeq	r1, {r8, r9}
    94a0:	00000821 	andeq	r0, r0, r1, lsr #16
    94a4:	00b90406 	adcseq	r0, r9, r6, lsl #8
    94a8:	ac070000 	stcge	0, cr0, [r7], {-0}
    94ac:	02000000 	andeq	r0, r0, #0
    94b0:	00000c42 	andeq	r0, r0, r2, asr #24
    94b4:	00472a04 	subeq	r2, r7, r4, lsl #20
    94b8:	69020000 	stmdbvs	r2, {}	; <UNPREDICTABLE>
    94bc:	0400000b 	streq	r0, [r0], #-11
    94c0:	00006036 	andeq	r6, r0, r6, lsr r0
    94c4:	0b500200 	bleq	1409ccc <__Stack_Size+0x14094cc>
    94c8:	42040000 	andmi	r0, r4, #0
    94cc:	00000079 	andeq	r0, r0, r9, ror r0
    94d0:	32337508 	eorscc	r7, r3, #8, 10	; 0x2000000
    94d4:	84270500 	strthi	r0, [r7], #-1280	; 0x500
    94d8:	02000000 	andeq	r0, r0, #0
    94dc:	0000035a 	andeq	r0, r0, sl, asr r3
    94e0:	00f52f05 	rscseq	r2, r5, r5, lsl #30
    94e4:	84090000 	strhi	r0, [r9], #-0
    94e8:	0a000000 	beq	94f0 <__Stack_Size+0x8cf0>
    94ec:	0f370501 	svceq	0x00370501
    94f0:	0b000001 	bleq	94fc <__Stack_Size+0x8cfc>
    94f4:	00000753 	andeq	r0, r0, r3, asr r7
    94f8:	01a70b00 			; <UNDEFINED> instruction: 0x01a70b00
    94fc:	00010000 	andeq	r0, r1, r0
    9500:	00052d02 	andeq	r2, r5, r2, lsl #26
    9504:	fa370500 	blx	dca90c <__Stack_Size+0xdca10c>
    9508:	0c000000 	stceq	0, cr0, [r0], {-0}
    950c:	00000d4f 	andeq	r0, r0, pc, asr #26
    9510:	0115060c 	tsteq	r5, ip, lsl #12
    9514:	0000015c 	andeq	r0, r0, ip, asr r1
    9518:	000c3b0d 	andeq	r3, ip, sp, lsl #22
    951c:	01160600 	tsteq	r6, r0, lsl #12
    9520:	000000c9 	andeq	r0, r0, r9, asr #1
    9524:	0ae30d00 	beq	ff8cc92c <BootRAM+0xe83d0cd>
    9528:	17060000 	strne	r0, [r6, -r0]
    952c:	0000c901 	andeq	ip, r0, r1, lsl #18
    9530:	fb0d0200 	blx	349d3a <__Stack_Size+0x34953a>
    9534:	0600000a 	streq	r0, [r0], -sl
    9538:	00d40118 	sbcseq	r0, r4, r8, lsl r1
    953c:	0d040000 	stceq	0, cr0, [r4, #-0]
    9540:	00000b11 	andeq	r0, r0, r1, lsl fp
    9544:	d4011906 	strle	r1, [r1], #-2310	; 0x906
    9548:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    954c:	07680e00 	strbeq	r0, [r8, -r0, lsl #28]!
    9550:	0001890c 	andeq	r8, r1, ip, lsl #18
    9554:	1a8a0f00 	bne	fe28d15c <BootRAM+0xd1fd8fd>
    9558:	0e070000 	cdpeq	0, 0, cr0, cr7, cr0, {0}
    955c:	00000189 	andeq	r0, r0, r9, lsl #3
    9560:	19500f00 	ldmdbne	r0, {r8, r9, sl, fp}^
    9564:	0f070000 	svceq	0x00070000
    9568:	00000199 	muleq	r0, r9, r1
    956c:	046c0f08 	strbteq	r0, [ip], #-3848	; 0xf08
    9570:	10070000 	andne	r0, r7, r0
    9574:	000001a9 	andeq	r0, r0, r9, lsr #3
    9578:	84100028 	ldrhi	r0, [r0], #-40	; 0x28
    957c:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    9580:	11000001 	tstne	r0, r1
    9584:	00000099 	muleq	r0, r9, r0
    9588:	84100001 	ldrhi	r0, [r0], #-1
    958c:	a9000000 	stmdbge	r0, {}	; <UNPREDICTABLE>
    9590:	11000001 	tstne	r0, r1
    9594:	00000099 	muleq	r0, r9, r0
    9598:	52100007 	andspl	r0, r0, #7
    959c:	b9000000 	stmdblt	r0, {}	; <UNPREDICTABLE>
    95a0:	11000001 	tstne	r0, r1
    95a4:	00000099 	muleq	r0, r9, r0
    95a8:	ef02003f 	svc	0x0002003f
    95ac:	0700000c 	streq	r0, [r0, -ip]
    95b0:	00015c12 	andeq	r5, r1, r2, lsl ip
    95b4:	0ae81200 	beq	ffa0ddbc <BootRAM+0xe97e55d>
    95b8:	08140000 	ldmdaeq	r4, {}	; <UNPREDICTABLE>
    95bc:	0002190d 	andeq	r1, r2, sp, lsl #18
    95c0:	0c550f00 	mrrceq	15, 0, r0, r5, cr0
    95c4:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    95c8:	000000d4 	ldrdeq	r0, [r0], -r4
    95cc:	0df70f00 	ldcleq	15, cr0, [r7]
    95d0:	10080000 	andne	r0, r8, r0
    95d4:	000000d4 	ldrdeq	r0, [r0], -r4
    95d8:	0ce00f04 	stcleq	15, cr0, [r0], #16
    95dc:	11080000 	mrsne	r0, (UNDEF: 8)
    95e0:	000000d4 	ldrdeq	r0, [r0], -r4
    95e4:	0de00f08 	stcleq	15, cr0, [r0, #32]!
    95e8:	13080000 	movwne	r0, #32768	; 0x8000
    95ec:	000000d4 	ldrdeq	r0, [r0], -r4
    95f0:	0d2a0f0c 	stceq	15, cr0, [sl, #-48]!	; 0xffffffd0
    95f4:	14080000 	strne	r0, [r8], #-0
    95f8:	000000d4 	ldrdeq	r0, [r0], -r4
    95fc:	0bec0f10 	bleq	ffb0d244 <BootRAM+0xea7d9e5>
    9600:	15080000 	strne	r0, [r8, #-0]
    9604:	00000219 	andeq	r0, r0, r9, lsl r2
    9608:	be100014 	mrclt	0, 0, r0, cr0, cr4, {0}
    960c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    9610:	13000002 	movwne	r0, #2
    9614:	00000099 	muleq	r0, r9, r0
    9618:	0ae90200 	beq	ffa49e20 <BootRAM+0xe9ba5c1>
    961c:	16080000 	strne	r0, [r8], -r0
    9620:	000001c4 	andeq	r0, r0, r4, asr #3
    9624:	000c6712 	andeq	r6, ip, r2, lsl r7
    9628:	18081400 	stmdane	r8, {sl, ip}
    962c:	0000027c 	andeq	r0, r0, ip, ror r2
    9630:	000d540f 	andeq	r5, sp, pc, lsl #8
    9634:	7c190800 	ldcvc	8, cr0, [r9], {-0}
    9638:	00000002 	andeq	r0, r0, r2
    963c:	000cc80f 	andeq	ip, ip, pc, lsl #16
    9640:	d41a0800 	ldrle	r0, [sl], #-2048	; 0x800
    9644:	04000000 	streq	r0, [r0], #-0
    9648:	000d070f 	andeq	r0, sp, pc, lsl #14
    964c:	25200800 	strcs	r0, [r0, #-2048]!	; 0x800
    9650:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9654:	000c940f 	andeq	r9, ip, pc, lsl #8
    9658:	39220800 	stmdbcc	r2!, {fp}
    965c:	0c000000 	stceq	0, cr0, [r0], {-0}
    9660:	000def0f 	andeq	lr, sp, pc, lsl #30
    9664:	39230800 	stmdbcc	r3!, {fp}
    9668:	10000000 	andne	r0, r0, r0
    966c:	28040600 	stmdacs	r4, {r9, sl}
    9670:	02000002 	andeq	r0, r0, #2
    9674:	00000c68 	andeq	r0, r0, r8, ror #24
    9678:	02332408 	eorseq	r2, r3, #8, 8	; 0x8000000
    967c:	fd020000 	stc2	0, cr0, [r2, #-0]
    9680:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    9684:	00029827 	andeq	r9, r2, r7, lsr #16
    9688:	33040600 	movwcc	r0, #17920	; 0x4600
    968c:	12000002 	andne	r0, r0, #2
    9690:	00001d6d 	andeq	r1, r0, sp, ror #26
    9694:	db380810 	blle	e0b6dc <__Stack_Size+0xe0aedc>
    9698:	0f000002 	svceq	0x00000002
    969c:	00001cc4 	andeq	r1, r0, r4, asr #25
    96a0:	00d43908 	sbcseq	r3, r4, r8, lsl #18
    96a4:	0f000000 	svceq	0x00000000
    96a8:	00001be9 	andeq	r1, r0, r9, ror #23
    96ac:	00d43a08 	sbcseq	r3, r4, r8, lsl #20
    96b0:	0f040000 	svceq	0x00040000
    96b4:	00001cca 	andeq	r1, r0, sl, asr #25
    96b8:	00d43b08 	sbcseq	r3, r4, r8, lsl #22
    96bc:	0f080000 	svceq	0x00080000
    96c0:	00001cdc 	ldrdeq	r1, [r0], -ip
    96c4:	00d43c08 	sbcseq	r3, r4, r8, lsl #24
    96c8:	000c0000 	andeq	r0, ip, r0
    96cc:	001d6d02 	andseq	r6, sp, r2, lsl #26
    96d0:	9e3d0800 	cdpls	8, 3, cr0, cr13, cr0, {0}
    96d4:	12000002 	andne	r0, r0, #2
    96d8:	00001cfb 	strdeq	r1, [r0], -fp
    96dc:	0b3f0844 	bleq	fcb7f4 <__Stack_Size+0xfcaff4>
    96e0:	0f000003 	svceq	0x00000003
    96e4:	00001cdc 	ldrdeq	r1, [r0], -ip
    96e8:	00d44008 	sbcseq	r4, r4, r8
    96ec:	0f000000 	svceq	0x00000000
    96f0:	00001d54 	andeq	r1, r0, r4, asr sp
    96f4:	030b4108 	movweq	r4, #45320	; 0xb108
    96f8:	00040000 	andeq	r0, r4, r0
    96fc:	0000be10 	andeq	fp, r0, r0, lsl lr
    9700:	00031b00 	andeq	r1, r3, r0, lsl #22
    9704:	00991100 	addseq	r1, r9, r0, lsl #2
    9708:	003f0000 	eorseq	r0, pc, r0
    970c:	001cfb02 	andseq	pc, ip, r2, lsl #22
    9710:	e6420800 	strb	r0, [r2], -r0, lsl #16
    9714:	12000002 	andne	r0, r0, #2
    9718:	00001cb4 			; <UNDEFINED> instruction: 0x00001cb4
    971c:	4b450854 	blmi	114b874 <__Stack_Size+0x114b074>
    9720:	0f000003 	svceq	0x00000003
    9724:	00001ca3 	andeq	r1, r0, r3, lsr #25
    9728:	02db4608 	sbcseq	r4, fp, #8, 12	; 0x800000
    972c:	0f000000 	svceq	0x00000000
    9730:	00001cf3 	strdeq	r1, [r0], -r3
    9734:	031b4708 	tsteq	fp, #8, 14	; 0x200000
    9738:	00100000 	andseq	r0, r0, r0
    973c:	001cb402 	andseq	fp, ip, r2, lsl #8
    9740:	26480800 	strbcs	r0, [r8], -r0, lsl #16
    9744:	06000003 	streq	r0, [r0], -r3
    9748:	00034b04 	andeq	r4, r3, r4, lsl #22
    974c:	1d631400 	cfstrdne	mvd1, [r3, #-0]
    9750:	26010000 	strcs	r0, [r1], -r0
    9754:	08005f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip, lr}
    9758:	00000044 	andeq	r0, r0, r4, asr #32
    975c:	03f89c01 	mvnseq	r9, #256	; 0x100
    9760:	a4150000 	ldrge	r0, [r5], #-0
    9764:	9c08005f 	stcls	0, cr0, [r8], {95}	; 0x5f
    9768:	88000008 	stmdahi	r0, {r3}
    976c:	16000003 	strne	r0, [r0], -r3
    9770:	0c055001 	stceq	0, cr5, [r5], {1}
    9774:	08008000 	stmdaeq	r0, {pc}
    9778:	5faa1500 	svcpl	0x00aa1500
    977c:	089c0800 	ldmeq	ip, {fp}
    9780:	039f0000 	orrseq	r0, pc, #0
    9784:	01160000 	tsteq	r6, r0
    9788:	000c0550 	andeq	r0, ip, r0, asr r5
    978c:	00080084 	andeq	r0, r8, r4, lsl #1
    9790:	005fb015 	subseq	fp, pc, r5, lsl r0	; <UNPREDICTABLE>
    9794:	00089c08 	andeq	r9, r8, r8, lsl #24
    9798:	0003b600 	andeq	fp, r3, r0, lsl #12
    979c:	50011600 	andpl	r1, r1, r0, lsl #12
    97a0:	83200c05 	teqhi	r0, #1280	; 0x500
    97a4:	15000800 	strne	r0, [r0, #-2048]	; 0x800
    97a8:	08005fb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, fp, ip, lr}
    97ac:	0000089c 	muleq	r0, ip, r8
    97b0:	000003cd 	andeq	r0, r0, sp, asr #7
    97b4:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
    97b8:	0084b00c 	addeq	fp, r4, ip
    97bc:	bc150008 	ldclt	0, cr0, [r5], {8}
    97c0:	9c08005f 	stcls	0, cr0, [r8], {95}	; 0x5f
    97c4:	e4000008 	str	r0, [r0], #-8
    97c8:	16000003 	strne	r0, [r0], -r3
    97cc:	0c055001 	stceq	0, cr5, [r5], {1}
    97d0:	08008640 	stmdaeq	r0, {r6, r9, sl, pc}
    97d4:	5fc61700 	svcpl	0x00c61700
    97d8:	089c0800 	ldmeq	ip, {fp}
    97dc:	01160000 	tsteq	r6, r0
    97e0:	d00c0550 	andle	r0, ip, r0, asr r5
    97e4:	00080087 	andeq	r0, r8, r7, lsl #1
    97e8:	0c9b1800 	ldceq	8, cr1, [fp], {0}
    97ec:	30010000 	andcc	r0, r1, r0
    97f0:	00000039 	andeq	r0, r0, r9, lsr r0
    97f4:	08005fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
    97f8:	000001ac 	andeq	r0, r0, ip, lsr #3
    97fc:	07ea9c01 	strbeq	r9, [sl, r1, lsl #24]!
    9800:	aa190000 	bge	649808 <__Stack_Size+0x649008>
    9804:	0100001c 	tsteq	r0, ip, lsl r0
    9808:	0007ea30 	andeq	lr, r7, r0, lsr sl
    980c:	0089c600 	addeq	ip, r9, r0, lsl #12
    9810:	1ce61900 	stclne	9, cr1, [r6]
    9814:	30010000 	andcc	r0, r1, r0
    9818:	000000ea 	andeq	r0, r0, sl, ror #1
    981c:	000089f2 	strdeq	r8, [r0], -r2
    9820:	001d1d19 	andseq	r1, sp, r9, lsl sp
    9824:	0f300100 	svceq	0x00300100
    9828:	1f000001 	svcne	0x00000001
    982c:	1a00008a 	bne	9a5c <__Stack_Size+0x925c>
    9830:	00726468 	rsbseq	r6, r2, r8, ror #8
    9834:	03563201 	cmpeq	r6, #268435456	; 0x10000000
    9838:	8a400000 	bhi	1009840 <__Stack_Size+0x1009040>
    983c:	501b0000 	andspl	r0, fp, r0
    9840:	01000019 	tsteq	r0, r9, lsl r0
    9844:	00028233 	andeq	r8, r2, r3, lsr r2
    9848:	a4910300 	ldrge	r0, [r1], #768	; 0x300
    984c:	1d491c7c 	stclne	12, cr1, [r9, #-496]	; 0xfffffe10
    9850:	34010000 	strcc	r0, [r1], #-0
    9854:	00000039 	andeq	r0, r0, r9, lsr r0
    9858:	1d111d68 	ldcne	13, cr1, [r1, #-416]	; 0xfffffe60
    985c:	35010000 	strcc	r0, [r1, #-0]
    9860:	000007f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    9864:	00008a64 	andeq	r8, r0, r4, ror #20
    9868:	000b911b 	andeq	r9, fp, fp, lsl r1
    986c:	025f0100 	subseq	r0, pc, #0, 2
    9870:	03000008 	movweq	r0, #8
    9874:	1e7cd091 	mrcne	0, 3, sp, cr12, cr1, {4}
    9878:	00787463 	rsbseq	r7, r8, r3, ror #8
    987c:	01b96301 			; <UNDEFINED> instruction: 0x01b96301
    9880:	91030000 	mrsls	r0, (UNDEF: 3)
    9884:	d31d7db0 	tstle	sp, #176, 26	; 0x2c00
    9888:	0100001c 	tsteq	r0, ip, lsl r0
    988c:	00003966 	andeq	r3, r0, r6, ror #18
    9890:	008ab800 	addeq	fp, sl, r0, lsl #16
    9894:	08251f00 	stmdaeq	r5!, {r8, r9, sl, fp, ip}
    9898:	8acc0000 	bhi	ff3098a0 <BootRAM+0xe27a041>
    989c:	44200000 	strtmi	r0, [r0], #-0
    98a0:	0100001d 	tsteq	r0, sp, lsl r0
    98a4:	00081267 	andeq	r1, r8, r7, ror #4
    98a8:	00691a00 	rsbeq	r1, r9, r0, lsl #20
    98ac:	00396901 	eorseq	r6, r9, r1, lsl #18
    98b0:	8ae00000 	bhi	ff8098b8 <BootRAM+0xe77a059>
    98b4:	801d0000 	andshi	r0, sp, r0
    98b8:	0100000b 	tsteq	r0, fp
    98bc:	0000396c 	andeq	r3, r0, ip, ror #18
    98c0:	008b0000 	addeq	r0, fp, r0
    98c4:	0f7c2100 	svceq	0x007c2100
    98c8:	9f010000 	svcls	0x00010000
    98cc:	00000039 	andeq	r0, r0, r9, lsr r0
    98d0:	000004e5 	andeq	r0, r0, r5, ror #9
    98d4:	411b0022 	tstmi	fp, r2, lsr #32
    98d8:	0100001d 	tsteq	r0, sp, lsl r0
    98dc:	00030ba1 	andeq	r0, r3, r1, lsr #23
    98e0:	98910300 	ldmls	r1, {r8, r9}
    98e4:	60c0237e 	sbcvs	r2, r0, lr, ror r3
    98e8:	00500800 	subseq	r0, r0, r0, lsl #16
    98ec:	06470000 	strbeq	r0, [r7], -r0
    98f0:	691e0000 	ldmdbvs	lr, {}	; <UNPREDICTABLE>
    98f4:	80010064 	andhi	r0, r1, r4, rrx
    98f8:	0000011a 	andeq	r0, r0, sl, lsl r1
    98fc:	7c989103 	ldfvcd	f1, [r8], {3}
    9900:	000d9b1b 	andeq	r9, sp, fp, lsl fp
    9904:	2a810100 	bcs	fe049d0c <BootRAM+0xcfba4ad>
    9908:	03000008 	movweq	r0, #8
    990c:	1b7cb891 	blne	1f37b58 <__Stack_Size+0x1f37358>
    9910:	00000b91 	muleq	r0, r1, fp
    9914:	08028201 	stmdaeq	r2, {r0, r9, pc}
    9918:	91030000 	mrsls	r0, (UNDEF: 3)
    991c:	07207cf0 			; <UNDEFINED> instruction: 0x07207cf0
    9920:	0100000b 	tsteq	r0, fp
    9924:	00083a83 	andeq	r3, r8, r3, lsl #21
    9928:	0c5d1b00 	mrrceq	11, 0, r1, sp, cr0
    992c:	84010000 	strhi	r0, [r1], #-0
    9930:	0000084a 	andeq	r0, r0, sl, asr #16
    9934:	7d909103 	ldfvcd	f1, [r0, #12]
    9938:	000ad120 	andeq	sp, sl, r0, lsr #2
    993c:	5a850100 	bpl	fe149d44 <BootRAM+0xd0ba4e5>
    9940:	20000008 	andcs	r0, r0, r8
    9944:	00000b00 	andeq	r0, r0, r0, lsl #22
    9948:	085a8601 	ldmdaeq	sl, {r0, r9, sl, pc}^
    994c:	341b0000 	ldrcc	r0, [fp], #-0
    9950:	0100001d 	tsteq	r0, sp, lsl r0
    9954:	0001b98c 	andeq	fp, r1, ip, lsl #19
    9958:	98910300 	ldmls	r1, {r8, r9}
    995c:	60c6157e 	sbcvs	r1, r6, lr, ror r5
    9960:	08b20800 	ldmeq	r2!, {fp}
    9964:	05810000 	streq	r0, [r1]
    9968:	01160000 	tsteq	r6, r0
    996c:	98910350 	ldmls	r1, {r4, r6, r8, r9}
    9970:	de15007c 	mrcle	0, 0, r0, cr5, cr12, {3}
    9974:	ca080060 	bgt	209afc <__Stack_Size+0x2092fc>
    9978:	9f000008 	svcls	0x00000008
    997c:	16000005 	strne	r0, [r0], -r5
    9980:	03055101 	movweq	r5, #20737	; 0x5101
    9984:	0800754c 	stmdaeq	r0, {r2, r3, r6, r8, sl, ip, sp, lr}
    9988:	03500116 	cmpeq	r0, #-2147483643	; 0x80000005
    998c:	007cb891 			; <UNDEFINED> instruction: 0x007cb891
    9990:	0060e415 	rsbeq	lr, r0, r5, lsl r4
    9994:	0008e508 	andeq	lr, r8, r8, lsl #10
    9998:	0005b400 	andeq	fp, r5, r0, lsl #8
    999c:	50011600 	andpl	r1, r1, r0, lsl #12
    99a0:	7e989103 	cosvce	f1, f3
    99a4:	60ee1500 	rscvs	r1, lr, r0, lsl #10
    99a8:	08fc0800 	ldmeq	ip!, {fp}^
    99ac:	05d50000 	ldrbeq	r0, [r5]
    99b0:	01160000 	tsteq	r6, r0
    99b4:	16470152 			; <UNDEFINED> instruction: 0x16470152
    99b8:	91035101 	tstls	r3, r1, lsl #2
    99bc:	01167cb8 			; <UNDEFINED> instruction: 0x01167cb8
    99c0:	98910350 	ldmls	r1, {r4, r6, r8, r9}
    99c4:	f615007e 			; <UNDEFINED> instruction: 0xf615007e
    99c8:	17080060 	strne	r0, [r8, -r0, rrx]
    99cc:	f1000009 	cps	#9
    99d0:	16000005 	strne	r0, [r0], -r5
    99d4:	91035101 	tstls	r3, r1, lsl #2
    99d8:	01167cf0 			; <UNDEFINED> instruction: 0x01167cf0
    99dc:	98910350 	ldmls	r1, {r4, r6, r8, r9}
    99e0:	fe15007e 	mrc2	0, 0, r0, cr5, cr14, {3}
    99e4:	2d080060 	stccs	0, cr0, [r8, #-384]	; 0xfffffe80
    99e8:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    99ec:	16000006 	strne	r0, [r0], -r6
    99f0:	91035101 	tstls	r3, r1, lsl #2
    99f4:	01167cf0 			; <UNDEFINED> instruction: 0x01167cf0
    99f8:	90910350 	addsls	r0, r1, r0, asr r3
    99fc:	0615007d 			; <UNDEFINED> instruction: 0x0615007d
    9a00:	54080061 	strpl	r0, [r8], #-97	; 0x61
    9a04:	28000009 	stmdacs	r0, {r0, r3}
    9a08:	16000006 	strne	r0, [r0], -r6
    9a0c:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    9a10:	50011620 	andpl	r1, r1, r0, lsr #12
    9a14:	7d909103 	ldfvcd	f1, [r0, #12]
    9a18:	61102400 	tstvs	r0, r0, lsl #8
    9a1c:	08fc0800 	ldmeq	ip!, {fp}^
    9a20:	01160000 	tsteq	r6, r0
    9a24:	20080252 	andcs	r0, r8, r2, asr r2
    9a28:	03510116 	cmpeq	r1, #-2147483643	; 0x80000005
    9a2c:	167d9091 			; <UNDEFINED> instruction: 0x167d9091
    9a30:	91035001 	tstls	r3, r1
    9a34:	00007db0 			; <UNDEFINED> instruction: 0x00007db0
    9a38:	005ff615 	subseq	pc, pc, r5, lsl r6	; <UNPREDICTABLE>
    9a3c:	00096b08 	andeq	r6, r9, r8, lsl #22
    9a40:	00066800 	andeq	r6, r6, r0, lsl #16
    9a44:	52011600 	andpl	r1, r1, #0, 12
    9a48:	16680802 	strbtne	r0, [r8], -r2, lsl #16
    9a4c:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    9a50:	500116ff 	strdpl	r1, [r1], -pc	; <UNPREDICTABLE>
    9a54:	7f809103 	svcvc	0x00809103
    9a58:	60021500 	andvs	r1, r2, r0, lsl #10
    9a5c:	098a0800 	stmibeq	sl, {fp}
    9a60:	06830000 	streq	r0, [r3], r0
    9a64:	01160000 	tsteq	r6, r0
    9a68:	68080252 	stmdavs	r8, {r1, r4, r6, r9}
    9a6c:	03500116 	cmpeq	r0, #-2147483643	; 0x80000005
    9a70:	007f8091 			; <UNDEFINED> instruction: 0x007f8091
    9a74:	00600c15 	rsbeq	r0, r0, r5, lsl ip
    9a78:	0009ae08 	andeq	sl, r9, r8, lsl #28
    9a7c:	0006a100 	andeq	sl, r6, r0, lsl #2
    9a80:	52011600 	andpl	r1, r1, #0, 12
    9a84:	01164401 	tsteq	r6, r1, lsl #8
    9a88:	16300151 			; <UNDEFINED> instruction: 0x16300151
    9a8c:	76025001 	strvc	r5, [r2], -r1
    9a90:	26250000 	strtcs	r0, [r5], -r0
    9a94:	cb080060 	blgt	209c1c <__Stack_Size+0x20941c>
    9a98:	25000009 	strcs	r0, [r0, #-9]
    9a9c:	08006034 	stmdaeq	r0, {r2, r4, r5, sp, lr}
    9aa0:	0000035c 	andeq	r0, r0, ip, asr r3
    9aa4:	00604615 	rsbeq	r4, r0, r5, lsl r6
    9aa8:	0009cb08 	andeq	ip, r9, r8, lsl #22
    9aac:	0006ca00 	andeq	ip, r6, r0, lsl #20
    9ab0:	50011600 	andpl	r1, r1, r0, lsl #12
    9ab4:	7bcd0305 	blvc	ff34a6d0 <BootRAM+0xe2bae71>
    9ab8:	15000800 	strne	r0, [r0, #-2048]	; 0x800
    9abc:	0800605a 	stmdaeq	r0, {r1, r3, r4, r6, sp, lr}
    9ac0:	0000096b 	andeq	r0, r0, fp, ror #18
    9ac4:	000006eb 	andeq	r0, r0, fp, ror #13
    9ac8:	02520116 	subseq	r0, r2, #-2147483643	; 0x80000005
    9acc:	01162008 	tsteq	r6, r8
    9ad0:	ff080251 			; <UNDEFINED> instruction: 0xff080251
    9ad4:	03500116 	cmpeq	r0, #-2147483643	; 0x80000005
    9ad8:	007cd091 			; <UNDEFINED> instruction: 0x007cd091
    9adc:	00606015 	rsbeq	r6, r0, r5, lsl r0
    9ae0:	0008e508 	andeq	lr, r8, r8, lsl #10
    9ae4:	00070000 	andeq	r0, r7, r0
    9ae8:	50011600 	andpl	r1, r1, r0, lsl #12
    9aec:	7db09103 	ldfvcd	f1, [r0, #12]!
    9af0:	606a1500 	rsbvs	r1, sl, r0, lsl #10
    9af4:	09540800 	ldmdbeq	r4, {fp}^
    9af8:	07130000 	ldreq	r0, [r3, -r0]
    9afc:	01160000 	tsteq	r6, r0
    9b00:	00400151 	subeq	r0, r0, r1, asr r1
    9b04:	00607c15 	rsbeq	r7, r0, r5, lsl ip
    9b08:	0009cb08 	andeq	ip, r9, r8, lsl #22
    9b0c:	00072a00 	andeq	r2, r7, r0, lsl #20
    9b10:	50011600 	andpl	r1, r1, r0, lsl #12
    9b14:	7bdd0305 	blvc	ff74a730 <BootRAM+0xe6baed1>
    9b18:	15000800 	strne	r0, [r0, #-2048]	; 0x800
    9b1c:	08006090 	stmdaeq	r0, {r4, r7, sp, lr}
    9b20:	000008fc 	strdeq	r0, [r0], -ip
    9b24:	00000744 	andeq	r0, r0, r4, asr #14
    9b28:	01520116 	cmpeq	r2, r6, lsl r1
    9b2c:	50011631 	andpl	r1, r1, r1, lsr r6
    9b30:	7db09103 	ldfvcd	f1, [r0, #12]!
    9b34:	609e1500 	addsvs	r1, lr, r0, lsl #10
    9b38:	09cb0800 	stmibeq	fp, {fp}^
    9b3c:	075b0000 	ldrbeq	r0, [fp, -r0]
    9b40:	01160000 	tsteq	r6, r0
    9b44:	f3030550 	vqrshl.u8	q0, q0, <illegal reg q1.5>
    9b48:	0008007b 	andeq	r0, r8, fp, ror r0
    9b4c:	0060a815 	rsbeq	sl, r0, r5, lsl r8
    9b50:	00095408 	andeq	r5, r9, r8, lsl #8
    9b54:	00076e00 	andeq	r6, r7, r0, lsl #28
    9b58:	51011600 	tstpl	r1, r0, lsl #12
    9b5c:	15004001 	strne	r4, [r0, #-1]
    9b60:	080060ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sp, lr}
    9b64:	000009cb 	andeq	r0, r0, fp, asr #19
    9b68:	00000785 	andeq	r0, r0, r5, lsl #15
    9b6c:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
    9b70:	007c0103 	rsbseq	r0, ip, r3, lsl #2
    9b74:	18150008 	ldmdane	r5, {r3}
    9b78:	17080061 	strne	r0, [r8, -r1, rrx]
    9b7c:	a1000009 	tstge	r0, r9
    9b80:	16000007 	strne	r0, [r0], -r7
    9b84:	91035101 	tstls	r3, r1, lsl #2
    9b88:	01167cd0 			; <UNDEFINED> instruction: 0x01167cd0
    9b8c:	b0910350 	addslt	r0, r1, r0, asr r3
    9b90:	2215007d 	andscs	r0, r5, #125	; 0x7d
    9b94:	de080061 	cdple	0, 0, cr0, cr8, cr1, {3}
    9b98:	b6000009 	strlt	r0, [r0], -r9
    9b9c:	16000007 	strne	r0, [r0], -r7
    9ba0:	91035001 	tstls	r3, r1
    9ba4:	15007cd0 	strne	r7, [r0, #-3280]	; 0xcd0
    9ba8:	08006142 	stmdaeq	r0, {r1, r6, r8, sp, lr}
    9bac:	000009ef 	andeq	r0, r0, pc, ror #19
    9bb0:	000007e0 	andeq	r0, r0, r0, ror #15
    9bb4:	02530116 	subseq	r0, r3, #-2147483643	; 0x80000005
    9bb8:	01162008 	tsteq	r6, r8
    9bbc:	d0910352 	addsle	r0, r1, r2, asr r3
    9bc0:	5101167c 	tstpl	r1, ip, ror r6
    9bc4:	04040305 	streq	r0, [r4], #-773	; 0x305
    9bc8:	01162000 	tsteq	r6, r0
    9bcc:	50740250 	rsbspl	r0, r4, r0, asr r2
    9bd0:	61522500 	cmpvs	r2, r0, lsl #10
    9bd4:	035c0800 	cmpeq	ip, #0, 16
    9bd8:	06000000 	streq	r0, [r0], -r0
    9bdc:	00028d04 	andeq	r8, r2, r4, lsl #26
    9be0:	00521000 	subseq	r1, r2, r0
    9be4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    9be8:	99260000 	stmdbls	r6!, {}	; <UNPREDICTABLE>
    9bec:	02000000 	andeq	r0, r0, #0
    9bf0:	10006708 	andne	r6, r0, r8, lsl #14
    9bf4:	00000052 	andeq	r0, r0, r2, asr r0
    9bf8:	00000812 	andeq	r0, r0, r2, lsl r8
    9bfc:	00009911 	andeq	r9, r0, r1, lsl r9
    9c00:	10001f00 	andne	r1, r0, r0, lsl #30
    9c04:	000000ac 	andeq	r0, r0, ip, lsr #1
    9c08:	00000825 	andeq	r0, r0, r5, lsr #16
    9c0c:	00009927 	andeq	r9, r0, r7, lsr #18
    9c10:	0004a400 	andeq	sl, r4, r0, lsl #8
    9c14:	99070000 	stmdbls	r7, {}	; <UNPREDICTABLE>
    9c18:	10000000 	andne	r0, r0, r0
    9c1c:	00000052 	andeq	r0, r0, r2, asr r0
    9c20:	0000083a 	andeq	r0, r0, sl, lsr r8
    9c24:	00009911 	andeq	r9, r0, r1, lsl r9
    9c28:	10001600 	andne	r1, r0, r0, lsl #12
    9c2c:	000000ac 	andeq	r0, r0, ip, lsr #1
    9c30:	0000084a 	andeq	r0, r0, sl, asr #16
    9c34:	00009911 	andeq	r9, r0, r1, lsl r9
    9c38:	10003f00 	andne	r3, r0, r0, lsl #30
    9c3c:	000000ac 	andeq	r0, r0, ip, lsr #1
    9c40:	0000085a 	andeq	r0, r0, sl, asr r8
    9c44:	00009911 	andeq	r9, r0, r1, lsl r9
    9c48:	10001f00 	andne	r1, r0, r0, lsl #30
    9c4c:	000000ac 	andeq	r0, r0, ip, lsr #1
    9c50:	0000086a 	andeq	r0, r0, sl, ror #16
    9c54:	00009911 	andeq	r9, r0, r1, lsl r9
    9c58:	2800ff00 	stmdacs	r0, {r8, r9, sl, fp, ip, sp, lr, pc}
    9c5c:	000000b1 	strheq	r0, [r0], -r1
    9c60:	00392c09 	eorseq	r2, r9, r9, lsl #24
    9c64:	03050000 	movweq	r0, #20480	; 0x5000
    9c68:	20000488 	andcs	r0, r0, r8, lsl #9
    9c6c:	0000be10 	andeq	fp, r0, r0, lsl lr
    9c70:	00088b00 	andeq	r8, r8, r0, lsl #22
    9c74:	00991100 	addseq	r1, r9, r0, lsl #2
    9c78:	001f0000 	andseq	r0, pc, r0
    9c7c:	000c7b28 	andeq	r7, ip, r8, lsr #22
    9c80:	7b180100 	blvc	60a088 <__Stack_Size+0x609888>
    9c84:	05000008 	streq	r0, [r0, #-8]
    9c88:	00040403 	andeq	r0, r4, r3, lsl #8
    9c8c:	0e3c2920 	cdpeq	9, 3, cr2, cr12, cr0, {1}
    9c90:	34060000 	strcc	r0, [r6], #-0
    9c94:	00010f01 	andeq	r0, r1, r1, lsl #30
    9c98:	0008b200 	andeq	fp, r8, r0, lsl #4
    9c9c:	00df2a00 	sbcseq	r2, pc, r0, lsl #20
    9ca0:	2b000000 	blcs	9ca8 <__Stack_Size+0x94a8>
    9ca4:	00000b2c 	andeq	r0, r0, ip, lsr #22
    9ca8:	c4014206 	strgt	r4, [r1], #-518	; 0x206
    9cac:	2a000008 	bcs	9cd4 <__Stack_Size+0x94d4>
    9cb0:	000008c4 	andeq	r0, r0, r4, asr #17
    9cb4:	1a040600 	bne	10b4bc <__Stack_Size+0x10acbc>
    9cb8:	2c000001 	stccs	0, cr0, [r0], {1}
    9cbc:	00000f03 	andeq	r0, r0, r3, lsl #30
    9cc0:	0039d90a 	eorseq	sp, r9, sl, lsl #18
    9cc4:	08e50000 	stmiaeq	r5!, {}^	; <UNPREDICTABLE>
    9cc8:	a62a0000 	strtge	r0, [sl], -r0
    9ccc:	2a000000 	bcs	9cd4 <__Stack_Size+0x94d4>
    9cd0:	000000b3 	strheq	r0, [r0], -r3
    9cd4:	1d2d0022 	stcne	0, cr0, [sp, #-136]!	; 0xffffff78
    9cd8:	0700000c 	streq	r0, [r0, -ip]
    9cdc:	0008f614 	andeq	pc, r8, r4, lsl r6	; <UNPREDICTABLE>
    9ce0:	08f62a00 	ldmeq	r6!, {r9, fp, sp}^
    9ce4:	06000000 	streq	r0, [r0], -r0
    9ce8:	0001b904 	andeq	fp, r1, r4, lsl #18
    9cec:	0b352d00 	bleq	d550f4 <__Stack_Size+0xd548f4>
    9cf0:	15070000 	strne	r0, [r7, #-0]
    9cf4:	00000917 	andeq	r0, r0, r7, lsl r9
    9cf8:	0008f62a 	andeq	pc, r8, sl, lsr #12
    9cfc:	00a02a00 	adceq	r2, r0, r0, lsl #20
    9d00:	842a0000 	strthi	r0, [sl], #-0
    9d04:	00000000 	andeq	r0, r0, r0
    9d08:	000b792d 	andeq	r7, fp, sp, lsr #18
    9d0c:	2d160700 	ldccs	7, cr0, [r6, #-0]
    9d10:	2a000009 	bcs	9d3c <__Stack_Size+0x953c>
    9d14:	000008f6 	strdeq	r0, [r0], -r6
    9d18:	0000a02a 	andeq	sl, r0, sl, lsr #32
    9d1c:	822d0000 	eorhi	r0, sp, #0
    9d20:	0b00000c 	bleq	9d58 <__Stack_Size+0x9558>
    9d24:	00094325 	andeq	r4, r9, r5, lsr #6
    9d28:	09432a00 	stmdbeq	r3, {r9, fp, sp}^
    9d2c:	492a0000 	stmdbmi	sl!, {}	; <UNPREDICTABLE>
    9d30:	00000009 	andeq	r0, r0, r9
    9d34:	00be0406 	adcseq	r0, lr, r6, lsl #8
    9d38:	04060000 	streq	r0, [r6], #-0
    9d3c:	0000094f 	andeq	r0, r0, pc, asr #18
    9d40:	0000be07 	andeq	fp, r0, r7, lsl #28
    9d44:	0f1d2b00 	svceq	0x001d2b00
    9d48:	40060000 	andmi	r0, r6, r0
    9d4c:	00096b01 	andeq	r6, r9, r1, lsl #22
    9d50:	00a02a00 	adceq	r2, r0, r0, lsl #20
    9d54:	252a0000 	strcs	r0, [sl, #-0]!
    9d58:	00000000 	andeq	r0, r0, r0
    9d5c:	000c162c 	andeq	r1, ip, ip, lsr #12
    9d60:	37190c00 	ldrcc	r0, [r9, -r0, lsl #24]
    9d64:	8a000000 	bhi	9d6c <__Stack_Size+0x956c>
    9d68:	2a000009 	bcs	9d94 <__Stack_Size+0x9594>
    9d6c:	00000037 	andeq	r0, r0, r7, lsr r0
    9d70:	0000392a 	andeq	r3, r0, sl, lsr #18
    9d74:	00252a00 	eoreq	r2, r5, r0, lsl #20
    9d78:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    9d7c:	0000174d 	andeq	r1, r0, sp, asr #14
    9d80:	00000037 	andeq	r0, r0, r7, lsr r0
    9d84:	000009a7 	andeq	r0, r0, r7, lsr #19
    9d88:	0000372a 	andeq	r3, r0, sl, lsr #14
    9d8c:	09a72a00 	stmibeq	r7!, {r9, fp, sp}
    9d90:	992a0000 	stmdbls	sl!, {}	; <UNPREDICTABLE>
    9d94:	00000000 	andeq	r0, r0, r0
    9d98:	09ad0406 	stmibeq	sp!, {r1, r2, sl}
    9d9c:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
    9da0:	00000c16 	andeq	r0, r0, r6, lsl ip
    9da4:	00000037 	andeq	r0, r0, r7, lsr r0
    9da8:	000009cb 	andeq	r0, r0, fp, asr #19
    9dac:	0000372a 	andeq	r3, r0, sl, lsr #14
    9db0:	00392a00 	eorseq	r2, r9, r0, lsl #20
    9db4:	992a0000 	stmdbls	sl!, {}	; <UNPREDICTABLE>
    9db8:	00000000 	andeq	r0, r0, r0
    9dbc:	000dbb2b 	andeq	fp, sp, fp, lsr #22
    9dc0:	013f0600 	teqeq	pc, r0, lsl #12
    9dc4:	000009de 	ldrdeq	r0, [r0], -lr
    9dc8:	0000b32a 	andeq	fp, r0, sl, lsr #6
    9dcc:	21002200 	mrscs	r2, R8_usr
    9dd0:	00000f7c 	andeq	r0, r0, ip, ror pc
    9dd4:	00399f01 	eorseq	r9, r9, r1, lsl #30
    9dd8:	09ef0000 	stmibeq	pc!, {}^	; <UNPREDICTABLE>
    9ddc:	00220000 	eoreq	r0, r2, r0
    9de0:	00195630 	andseq	r5, r9, r0, lsr r6
    9de4:	be2f0b00 	vmullt.f64	d0, d15, d0
    9de8:	2a000000 	bcs	9df0 <__Stack_Size+0x95f0>
    9dec:	00000949 	andeq	r0, r0, r9, asr #18
    9df0:	0009492a 	andeq	r4, r9, sl, lsr #18
    9df4:	09492a00 	stmdbeq	r9, {r9, fp, sp}^
    9df8:	252a0000 	strcs	r0, [sl, #-0]!
    9dfc:	00000000 	andeq	r0, r0, r0
    9e00:	000c8800 	andeq	r8, ip, r0, lsl #16
    9e04:	88000400 	stmdahi	r0, {sl}
    9e08:	04000024 	streq	r0, [r0], #-36	; 0x24
    9e0c:	00063901 	andeq	r3, r6, r1, lsl #18
    9e10:	1eee0100 	cdpne	1, 14, cr0, cr14, cr0, {0}
    9e14:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    9e18:	0c500000 	mraeq	r0, r0, acc0
    9e1c:	00000000 	andeq	r0, r0, r0
    9e20:	36120000 	ldrcc	r0, [r2], -r0
    9e24:	04020000 	streq	r0, [r2], #-0
    9e28:	0004da05 	andeq	sp, r4, r5, lsl #20
    9e2c:	05020200 	streq	r0, [r2, #-512]	; 0x200
    9e30:	000006fc 	strdeq	r0, [r0], -ip
    9e34:	1a060102 	bne	18a244 <__Stack_Size+0x189a44>
    9e38:	03000008 	movweq	r0, #8
    9e3c:	00323375 	eorseq	r3, r2, r5, ror r3
    9e40:	00452402 	subeq	r2, r5, r2, lsl #8
    9e44:	04020000 	streq	r0, [r2], #-0
    9e48:	00025207 	andeq	r5, r2, r7, lsl #4
    9e4c:	31750300 	cmncc	r5, r0, lsl #6
    9e50:	25020036 	strcs	r0, [r2, #-54]	; 0x36
    9e54:	00000057 	andeq	r0, r0, r7, asr r0
    9e58:	49070202 	stmdbmi	r7, {r1, r9}
    9e5c:	03000009 	movweq	r0, #9
    9e60:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    9e64:	00006826 	andeq	r6, r0, r6, lsr #16
    9e68:	08010200 	stmdaeq	r1, {r9}
    9e6c:	00000818 	andeq	r0, r0, r8, lsl r8
    9e70:	001e0104 	andseq	r0, lr, r4, lsl #2
    9e74:	16030100 	strne	r0, [r3], -r0, lsl #2
    9e78:	0000008e 	andeq	r0, r0, lr, lsl #1
    9e7c:	001f0105 	andseq	r0, pc, r5, lsl #2
    9e80:	cc050000 	stcgt	0, cr0, [r5], {-0}
    9e84:	0100001d 	tsteq	r0, sp, lsl r0
    9e88:	001ea805 	andseq	sl, lr, r5, lsl #16
    9e8c:	06000200 	streq	r0, [r0], -r0, lsl #4
    9e90:	00001e02 	andeq	r1, r0, r2, lsl #28
    9e94:	006f1c03 	rsbeq	r1, pc, r3, lsl #24
    9e98:	dd070000 	stcle	0, cr0, [r7, #-0]
    9e9c:	0100001f 	tsteq	r0, pc, lsl r0
    9ea0:	00004c9b 	muleq	r0, fp, ip
    9ea4:	00b50100 	adcseq	r0, r5, r0, lsl #2
    9ea8:	f3080000 	vhadd.u8	d0, d8, d0
    9eac:	01000020 	tsteq	r0, r0, lsr #32
    9eb0:	00005e9b 	muleq	r0, fp, lr
    9eb4:	34090000 	strcc	r0, [r9], #-0
    9eb8:	01000020 	tsteq	r0, r0, lsr #32
    9ebc:	00000022 	andeq	r0, r0, r2, lsr #32
    9ec0:	00000c00 	andeq	r0, r0, r0, lsl #24
    9ec4:	d89c0100 	ldmle	ip, {r8}
    9ec8:	0a000000 	beq	9ed0 <__Stack_Size+0x96d0>
    9ecc:	00001fd3 	ldrdeq	r1, [r0], -r3
    9ed0:	004c2201 	subeq	r2, ip, r1, lsl #4
    9ed4:	50010000 	andpl	r0, r1, r0
    9ed8:	1e3b0b00 	vaddne.f64	d0, d11, d0
    9edc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    9ee0:	0000004c 	andeq	r0, r0, ip, asr #32
    9ee4:	00000000 	andeq	r0, r0, r0
    9ee8:	0000000c 	andeq	r0, r0, ip
    9eec:	0e099c01 	cdpeq	12, 0, cr9, cr9, cr1, {0}
    9ef0:	0100001e 	tsteq	r0, lr, lsl r0
    9ef4:	0000003a 	andeq	r0, r0, sl, lsr r0
    9ef8:	00000c00 	andeq	r0, r0, r0, lsl #24
    9efc:	109c0100 	addsne	r0, ip, r0, lsl #2
    9f00:	0a000001 	beq	9f0c <__Stack_Size+0x970c>
    9f04:	00001fd3 	ldrdeq	r1, [r0], -r3
    9f08:	004c3a01 	subeq	r3, ip, r1, lsl #20
    9f0c:	50010000 	andpl	r0, r1, r0
    9f10:	1fcb0b00 	svcne	0x00cb0b00
    9f14:	46010000 	strmi	r0, [r1], -r0
    9f18:	0000004c 	andeq	r0, r0, ip, asr #32
    9f1c:	00000000 	andeq	r0, r0, r0
    9f20:	0000000c 	andeq	r0, r0, ip
    9f24:	9f0b9c01 	svcls	0x000b9c01
    9f28:	01000020 	tsteq	r0, r0, lsr #32
    9f2c:	00004c52 	andeq	r4, r0, r2, asr ip
    9f30:	00000000 	andeq	r0, r0, r0
    9f34:	00000c00 	andeq	r0, r0, r0, lsl #24
    9f38:	099c0100 	ldmibeq	ip, {r8}
    9f3c:	00002001 	andeq	r2, r0, r1
    9f40:	00005e01 	andeq	r5, r0, r1, lsl #28
    9f44:	000c0000 	andeq	r0, ip, r0
    9f48:	9c010000 	stcls	0, cr0, [r1], {-0}
    9f4c:	0000015d 	andeq	r0, r0, sp, asr r1
    9f50:	001fd30a 	andseq	sp, pc, sl, lsl #6
    9f54:	4c5e0100 	ldfmie	f0, [lr], {-0}
    9f58:	01000000 	mrseq	r0, (UNDEF: 0)
    9f5c:	540b0050 	strpl	r0, [fp], #-80	; 0x50
    9f60:	0100001e 	tsteq	r0, lr, lsl r0
    9f64:	00004c6a 	andeq	r4, r0, sl, ror #24
    9f68:	00000000 	andeq	r0, r0, r0
    9f6c:	00000c00 	andeq	r0, r0, r0, lsl #24
    9f70:	099c0100 	ldmibeq	ip, {r8}
    9f74:	0000203c 	andeq	r2, r0, ip, lsr r0
    9f78:	00007601 	andeq	r7, r0, r1, lsl #12
    9f7c:	00100000 	andseq	r0, r0, r0
    9f80:	9c010000 	stcls	0, cr0, [r1], {-0}
    9f84:	00000195 	muleq	r0, r5, r1
    9f88:	001fd30a 	andseq	sp, pc, sl, lsl #6
    9f8c:	4c760100 	ldfmie	f0, [r6], #-0
    9f90:	01000000 	mrseq	r0, (UNDEF: 0)
    9f94:	c10b0050 	qaddgt	r0, r0, fp
    9f98:	0100001f 	tsteq	r0, pc, lsl r0
    9f9c:	00004c82 	andeq	r4, r0, r2, lsl #25
    9fa0:	00000000 	andeq	r0, r0, r0
    9fa4:	00000c00 	andeq	r0, r0, r0, lsl #24
    9fa8:	099c0100 	ldmibeq	ip, {r8}
    9fac:	000020fa 	strdeq	r2, [r0], -sl
    9fb0:	00008f01 	andeq	r8, r0, r1, lsl #30
    9fb4:	000e0000 	andeq	r0, lr, r0
    9fb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    9fbc:	000001dc 	ldrdeq	r0, [r0], -ip
    9fc0:	0020f30c 	eoreq	pc, r0, ip, lsl #6
    9fc4:	5e8f0100 	rmfple	f0, f7, f0
    9fc8:	13000000 	movwne	r0, #0
    9fcc:	0a00008b 	beq	a200 <__Stack_Size+0x9a00>
    9fd0:	00001fd3 	ldrdeq	r1, [r0], -r3
    9fd4:	004c8f01 	subeq	r8, ip, r1, lsl #30
    9fd8:	51010000 	mrspl	r0, (UNDEF: 1)
    9fdc:	00990d00 	addseq	r0, r9, r0, lsl #26
    9fe0:	00000000 	andeq	r0, r0, r0
    9fe4:	00100000 	andseq	r0, r0, r0
    9fe8:	9c010000 	stcls	0, cr0, [r1], {-0}
    9fec:	000001f9 	strdeq	r0, [r0], -r9
    9ff0:	0000a90e 	andeq	sl, r0, lr, lsl #18
    9ff4:	008b3400 	addeq	r3, fp, r0, lsl #8
    9ff8:	9e090000 	cdpls	0, 0, cr0, cr9, cr0, {0}
    9ffc:	0100001e 	tsteq	r0, lr, lsl r0
    a000:	000000a8 	andeq	r0, r0, r8, lsr #1
    a004:	00001c00 	andeq	r1, r0, r0, lsl #24
    a008:	2d9c0100 	ldfcss	f0, [ip]
    a00c:	0c000002 	stceq	0, cr0, [r0], {2}
    a010:	000020f3 	strdeq	r2, [r0], -r3
    a014:	005ea801 	subseq	sl, lr, r1, lsl #16
    a018:	8b550000 	blhi	154a020 <__Stack_Size+0x1549820>
    a01c:	e80c0000 	stmda	ip, {}	; <UNPREDICTABLE>
    a020:	0100001e 	tsteq	r0, lr, lsl r0
    a024:	00004ca8 	andeq	r4, r0, r8, lsr #25
    a028:	008b7600 	addeq	r7, fp, r0, lsl #12
    a02c:	710f0000 	mrsvc	r0, CPSR
    a030:	0100001f 	tsteq	r0, pc, lsl r0
    a034:	00004cb4 			; <UNDEFINED> instruction: 0x00004cb4
    a038:	00000000 	andeq	r0, r0, r0
    a03c:	00001200 	andeq	r1, r0, r0, lsl #4
    a040:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
    a044:	0c000002 	stceq	0, cr0, [r0], {2}
    a048:	000020f3 	strdeq	r2, [r0], -r3
    a04c:	005eb401 	subseq	fp, lr, r1, lsl #8
    a050:	8b970000 	blhi	fe5ca058 <BootRAM+0xd53a7f9>
    a054:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    a058:	000020e5 	andeq	r2, r0, r5, ror #1
    a05c:	618cc101 	orrvs	ip, ip, r1, lsl #2
    a060:	002a0800 	eoreq	r0, sl, r0, lsl #16
    a064:	9c010000 	stcls	0, cr0, [r1], {-0}
    a068:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    a06c:	0020f30c 	eoreq	pc, r0, ip, lsl #6
    a070:	5ec10100 	polpls	f0, f1, f0
    a074:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    a078:	0a00008b 	beq	a2ac <__Stack_Size+0x9aac>
    a07c:	000015a7 	andeq	r1, r0, r7, lsr #11
    a080:	004cc101 	subeq	ip, ip, r1, lsl #2
    a084:	51010000 	mrspl	r0, (UNDEF: 1)
    a088:	00618c10 	rsbeq	r8, r1, r0, lsl ip
    a08c:	00002a08 	andeq	r2, r0, r8, lsl #20
    a090:	075e1100 	ldrbeq	r1, [lr, -r0, lsl #2]
    a094:	c3010000 	movwgt	r0, #4096	; 0x1000
    a098:	0000004c 	andeq	r0, r0, ip, asr #32
    a09c:	00005301 	andeq	r5, r0, r1, lsl #6
    a0a0:	001e7109 	andseq	r7, lr, r9, lsl #2
    a0a4:	00ce0100 	sbceq	r0, lr, r0, lsl #2
    a0a8:	2a000000 	bcs	a0b0 <__Stack_Size+0x98b0>
    a0ac:	01000000 	mrseq	r0, (UNDEF: 0)
    a0b0:	0002e89c 	muleq	r2, ip, r8
    a0b4:	20f30c00 	rscscs	r0, r3, r0, lsl #24
    a0b8:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    a0bc:	0000005e 	andeq	r0, r0, lr, asr r0
    a0c0:	00008bd9 	ldrdeq	r8, [r0], -r9
    a0c4:	0015a70a 	andseq	sl, r5, sl, lsl #14
    a0c8:	4cce0100 	stfmie	f0, [lr], {0}
    a0cc:	01000000 	mrseq	r0, (UNDEF: 0)
    a0d0:	00001051 	andeq	r1, r0, r1, asr r0
    a0d4:	002a0000 	eoreq	r0, sl, r0
    a0d8:	5e110000 	cdppl	0, 1, cr0, cr1, cr0, {0}
    a0dc:	01000007 	tsteq	r0, r7
    a0e0:	00004cd0 	ldrdeq	r4, [r0], -r0
    a0e4:	00530100 	subseq	r0, r3, r0, lsl #2
    a0e8:	1db70900 	ldcne	9, cr0, [r7]
    a0ec:	db010000 	blle	4a0f4 <__Stack_Size+0x498f4>
    a0f0:	00000000 	andeq	r0, r0, r0
    a0f4:	00000024 	andeq	r0, r0, r4, lsr #32
    a0f8:	033e9c01 	teqeq	lr, #256	; 0x100
    a0fc:	f30c0000 	vhadd.u8	d0, d12, d0
    a100:	01000020 	tsteq	r0, r0, lsr #32
    a104:	00005edb 	ldrdeq	r5, [r0], -fp
    a108:	008bfa00 	addeq	pc, fp, r0, lsl #20
    a10c:	1ee30a00 	vfmane.f32	s1, s6, s0
    a110:	db010000 	blle	4a118 <__Stack_Size+0x49918>
    a114:	0000005e 	andeq	r0, r0, lr, asr r0
    a118:	b7125101 	ldrlt	r5, [r2, -r1, lsl #2]
    a11c:	01000020 	tsteq	r0, r0, lsr #32
    a120:	00004cdd 	ldrdeq	r4, [r0], -sp
    a124:	00991300 	addseq	r1, r9, r0, lsl #6
    a128:	00000000 	andeq	r0, r0, r0
    a12c:	0ba00000 	bleq	fe80a134 <BootRAM+0xd77a8d5>
    a130:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    a134:	0000a90e 	andeq	sl, r0, lr, lsl #18
    a138:	008bfa00 	addeq	pc, fp, r0, lsl #20
    a13c:	0f000000 	svceq	0x00000000
    a140:	00001ed5 	ldrdeq	r1, [r0], -r5
    a144:	004cf001 	subeq	pc, ip, r1
    a148:	00000000 	andeq	r0, r0, r0
    a14c:	00120000 	andseq	r0, r2, r0
    a150:	9c010000 	stcls	0, cr0, [r1], {-0}
    a154:	00000367 	andeq	r0, r0, r7, ror #6
    a158:	0020f30c 	eoreq	pc, r0, ip, lsl #6
    a15c:	5ef00100 	cdppl	1, 15, cr0, cr0, cr0, {0}
    a160:	1b000000 	blne	a168 <__Stack_Size+0x9968>
    a164:	0000008c 	andeq	r0, r0, ip, lsl #1
    a168:	001dd80f 	andseq	sp, sp, pc, lsl #16
    a16c:	4cfc0100 	ldfmie	f0, [ip]
    a170:	00000000 	andeq	r0, r0, r0
    a174:	12000000 	andne	r0, r0, #0
    a178:	01000000 	mrseq	r0, (UNDEF: 0)
    a17c:	0003909c 	muleq	r3, ip, r0
    a180:	20f30c00 	rscscs	r0, r3, r0, lsl #24
    a184:	fc010000 	stc2	0, cr0, [r1], {-0}
    a188:	0000005e 	andeq	r0, r0, lr, asr r0
    a18c:	00008c3c 	andeq	r8, r0, ip, lsr ip
    a190:	1daa1400 	cfstrsne	mvf1, [sl]
    a194:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    a198:	00000001 	andeq	r0, r0, r1
    a19c:	00001e00 	andeq	r1, r0, r0, lsl #28
    a1a0:	d19c0100 	orrsle	r0, ip, r0, lsl #2
    a1a4:	15000003 	strne	r0, [r0, #-3]
    a1a8:	000020f3 	strdeq	r2, [r0], -r3
    a1ac:	5e010801 	cdppl	8, 0, cr0, cr1, cr1, {0}
    a1b0:	5d000000 	stcpl	0, cr0, [r0, #-0]
    a1b4:	1000008c 	andne	r0, r0, ip, lsl #1
    a1b8:	00000000 	andeq	r0, r0, r0
    a1bc:	0000001e 	andeq	r0, r0, lr, lsl r0
    a1c0:	00075e16 	andeq	r5, r7, r6, lsl lr
    a1c4:	010a0100 	mrseq	r0, (UNDEF: 26)
    a1c8:	0000004c 	andeq	r0, r0, ip, asr #32
    a1cc:	00008c7e 	andeq	r8, r0, lr, ror ip
    a1d0:	7f140000 	svcvc	0x00140000
    a1d4:	01000003 	tsteq	r0, r3
    a1d8:	61b60114 			; <UNDEFINED> instruction: 0x61b60114
    a1dc:	001e0800 	andseq	r0, lr, r0, lsl #16
    a1e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    a1e4:	00000412 	andeq	r0, r0, r2, lsl r4
    a1e8:	0020f315 	eoreq	pc, r0, r5, lsl r3	; <UNPREDICTABLE>
    a1ec:	01140100 	tsteq	r4, r0, lsl #2
    a1f0:	0000005e 	andeq	r0, r0, lr, asr r0
    a1f4:	00008ca9 	andeq	r8, r0, r9, lsr #25
    a1f8:	0061b610 	rsbeq	fp, r1, r0, lsl r6
    a1fc:	00001e08 	andeq	r1, r0, r8, lsl #28
    a200:	075e1600 	ldrbeq	r1, [lr, -r0, lsl #12]
    a204:	16010000 	strne	r0, [r1], -r0
    a208:	00004c01 	andeq	r4, r0, r1, lsl #24
    a20c:	008cca00 	addeq	ip, ip, r0, lsl #20
    a210:	14000000 	strne	r0, [r0], #-0
    a214:	00001f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
    a218:	00012001 	andeq	r2, r1, r1
    a21c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    a220:	01000000 	mrseq	r0, (UNDEF: 0)
    a224:	0004399c 	muleq	r4, ip, r9
    a228:	20f31500 	rscscs	r1, r3, r0, lsl #10
    a22c:	20010000 	andcs	r0, r1, r0
    a230:	00005e01 	andeq	r5, r0, r1, lsl #28
    a234:	008cf800 	addeq	pc, ip, r0, lsl #16
    a238:	b4140000 	ldrlt	r0, [r4], #-0
    a23c:	0100001f 	tsteq	r0, pc, lsl r0
    a240:	0000012c 	andeq	r0, r0, ip, lsr #2
    a244:	001c0000 	andseq	r0, ip, r0
    a248:	9c010000 	stcls	0, cr0, [r1], {-0}
    a24c:	00000460 	andeq	r0, r0, r0, ror #8
    a250:	0020f315 	eoreq	pc, r0, r5, lsl r3	; <UNPREDICTABLE>
    a254:	012c0100 	teqeq	ip, r0, lsl #2
    a258:	0000005e 	andeq	r0, r0, lr, asr r0
    a25c:	00008d19 	andeq	r8, r0, r9, lsl sp
    a260:	07941400 	ldreq	r1, [r4, r0, lsl #8]
    a264:	37010000 	strcc	r0, [r1, -r0]
    a268:	0061d401 	rsbeq	sp, r1, r1, lsl #8
    a26c:	00001c08 	andeq	r1, r0, r8, lsl #24
    a270:	879c0100 	ldrhi	r0, [ip, r0, lsl #2]
    a274:	15000004 	strne	r0, [r0, #-4]
    a278:	000020f3 	strdeq	r2, [r0], -r3
    a27c:	5e013701 	cdppl	7, 0, cr3, cr1, cr1, {0}
    a280:	3a000000 	bcc	a288 <__Stack_Size+0x9a88>
    a284:	0000008d 	andeq	r0, r0, sp, lsl #1
    a288:	00209014 	eoreq	r9, r0, r4, lsl r0
    a28c:	01420100 	mrseq	r0, (UNDEF: 82)
    a290:	00000000 	andeq	r0, r0, r0
    a294:	0000001e 	andeq	r0, r0, lr, lsl r0
    a298:	04ae9c01 	strteq	r9, [lr], #3073	; 0xc01
    a29c:	f3150000 	vhadd.u16	d0, d5, d0
    a2a0:	01000020 	tsteq	r0, r0, lsr #32
    a2a4:	005e0142 	subseq	r0, lr, r2, asr #2
    a2a8:	8d5b0000 	ldclhi	0, cr0, [fp, #-0]
    a2ac:	14000000 	strne	r0, [r0], #-0
    a2b0:	00001f2b 	andeq	r1, r0, fp, lsr #30
    a2b4:	00014d01 	andeq	r4, r1, r1, lsl #26
    a2b8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    a2bc:	01000000 	mrseq	r0, (UNDEF: 0)
    a2c0:	0004d59c 	muleq	r4, ip, r5
    a2c4:	20f31500 	rscscs	r1, r3, r0, lsl #10
    a2c8:	4d010000 	stcmi	0, cr0, [r1, #-0]
    a2cc:	00005e01 	andeq	r5, r0, r1, lsl #28
    a2d0:	008d7c00 	addeq	r7, sp, r0, lsl #24
    a2d4:	4e140000 	cdpmi	0, 1, cr0, cr4, cr0, {0}
    a2d8:	0100001f 	tsteq	r0, pc, lsl r0
    a2dc:	00000158 	andeq	r0, r0, r8, asr r1
    a2e0:	001c0000 	andseq	r0, ip, r0
    a2e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    a2e8:	000004fc 	strdeq	r0, [r0], -ip
    a2ec:	0020f315 	eoreq	pc, r0, r5, lsl r3	; <UNPREDICTABLE>
    a2f0:	01580100 	cmpeq	r8, r0, lsl #2
    a2f4:	0000005e 	andeq	r0, r0, lr, asr r0
    a2f8:	00008d9d 	muleq	r0, sp, sp
    a2fc:	1d881700 	stcne	7, cr1, [r8]
    a300:	63010000 	movwvs	r0, #4096	; 0x1000
    a304:	00004c01 	andeq	r4, r0, r1, lsl #24
    a308:	00000000 	andeq	r0, r0, r0
    a30c:	00001a00 	andeq	r1, r0, r0, lsl #20
    a310:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
    a314:	15000005 	strne	r0, [r0, #-5]
    a318:	000020f3 	strdeq	r2, [r0], -r3
    a31c:	5e016301 	cdppl	3, 0, cr6, cr1, cr1, {0}
    a320:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    a324:	0000008d 	andeq	r0, r0, sp, lsl #1
    a328:	001e4317 	andseq	r4, lr, r7, lsl r3
    a32c:	016e0100 	cmneq	lr, r0, lsl #2
    a330:	0000004c 	andeq	r0, r0, ip, asr #32
    a334:	00000000 	andeq	r0, r0, r0
    a338:	0000001a 	andeq	r0, r0, sl, lsl r0
    a33c:	05529c01 	ldrbeq	r9, [r2, #-3073]	; 0xc01
    a340:	f3150000 	vhadd.u16	d0, d5, d0
    a344:	01000020 	tsteq	r0, r0, lsr #32
    a348:	005e016e 	subseq	r0, lr, lr, ror #2
    a34c:	8ddf0000 	ldclhi	0, cr0, [pc]	; a354 <__Stack_Size+0x9b54>
    a350:	14000000 	strne	r0, [r0], #-0
    a354:	00001f7b 	andeq	r1, r0, fp, ror pc
    a358:	00017901 	andeq	r7, r1, r1, lsl #18
    a35c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    a360:	01000000 	mrseq	r0, (UNDEF: 0)
    a364:	0005799c 	muleq	r5, ip, r9
    a368:	20f31500 	rscscs	r1, r3, r0, lsl #10
    a36c:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    a370:	00005e01 	andeq	r5, r0, r1, lsl #28
    a374:	008e0000 	addeq	r0, lr, r0
    a378:	53140000 	tstpl	r4, #0
    a37c:	01000020 	tsteq	r0, r0, lsr #32
    a380:	00000184 	andeq	r0, r0, r4, lsl #3
    a384:	001c0000 	andseq	r0, ip, r0
    a388:	9c010000 	stcls	0, cr0, [r1], {-0}
    a38c:	000005a0 	andeq	r0, r0, r0, lsr #11
    a390:	0020f315 	eoreq	pc, r0, r5, lsl r3	; <UNPREDICTABLE>
    a394:	01840100 	orreq	r0, r4, r0, lsl #2
    a398:	0000005e 	andeq	r0, r0, lr, asr r0
    a39c:	00008e21 	andeq	r8, r0, r1, lsr #28
    a3a0:	1e7f1400 	cdpne	4, 7, cr1, cr15, cr0, {0}
    a3a4:	8f010000 	svchi	0x00010000
    a3a8:	00000001 	andeq	r0, r0, r1
    a3ac:	00002000 	andeq	r2, r0, r0
    a3b0:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    a3b4:	15000005 	strne	r0, [r0, #-5]
    a3b8:	000020f3 	strdeq	r2, [r0], -r3
    a3bc:	5e018f01 	cdppl	15, 0, cr8, cr1, cr1, {0}
    a3c0:	42000000 	andmi	r0, r0, #0
    a3c4:	0000008e 	andeq	r0, r0, lr, lsl #1
    a3c8:	001de614 	andseq	lr, sp, r4, lsl r6
    a3cc:	019a0100 	orrseq	r0, sl, r0, lsl #2
    a3d0:	00000000 	andeq	r0, r0, r0
    a3d4:	00000020 	andeq	r0, r0, r0, lsr #32
    a3d8:	05ee9c01 	strbeq	r9, [lr, #3073]!	; 0xc01
    a3dc:	f3150000 	vhadd.u16	d0, d5, d0
    a3e0:	01000020 	tsteq	r0, r0, lsr #32
    a3e4:	005e019a 			; <UNDEFINED> instruction: 0x005e019a
    a3e8:	8e630000 	cdphi	0, 6, cr0, cr3, cr0, {0}
    a3ec:	14000000 	strne	r0, [r0], #-0
    a3f0:	00001e28 	andeq	r1, r0, r8, lsr #28
    a3f4:	f001a501 			; <UNDEFINED> instruction: 0xf001a501
    a3f8:	20080061 	andcs	r0, r8, r1, rrx
    a3fc:	01000000 	mrseq	r0, (UNDEF: 0)
    a400:	0006159c 	muleq	r6, ip, r5
    a404:	20f31500 	rscscs	r1, r3, r0, lsl #10
    a408:	a5010000 	strge	r0, [r1, #-0]
    a40c:	00005e01 	andeq	r5, r0, r1, lsl #28
    a410:	008e8400 	addeq	r8, lr, r0, lsl #8
    a414:	d8140000 	ldmdale	r4, {}	; <UNPREDICTABLE>
    a418:	01000020 	tsteq	r0, r0, lsr #32
    a41c:	621001b0 	andsvs	r0, r0, #176, 2	; 0x2c
    a420:	00200800 	eoreq	r0, r0, r0, lsl #16
    a424:	9c010000 	stcls	0, cr0, [r1], {-0}
    a428:	0000063c 	andeq	r0, r0, ip, lsr r6
    a42c:	0020f315 	eoreq	pc, r0, r5, lsl r3	; <UNPREDICTABLE>
    a430:	01b00100 	lslseq	r0, r0, #2
    a434:	0000005e 	andeq	r0, r0, lr, asr r0
    a438:	00008ea5 	andeq	r8, r0, r5, lsr #29
    a43c:	1e641400 	cdpne	4, 6, cr1, cr4, cr0, {0}
    a440:	bc010000 	stclt	0, cr0, [r1], {-0}
    a444:	00000001 	andeq	r0, r0, r1
    a448:	00001e00 	andeq	r1, r0, r0, lsl #28
    a44c:	739c0100 	orrsvc	r0, ip, #0, 2
    a450:	15000006 	strne	r0, [r0, #-6]
    a454:	000020f3 	strdeq	r2, [r0], -r3
    a458:	5e01bc01 	cdppl	12, 0, cr11, cr1, cr1, {0}
    a45c:	c6000000 	strgt	r0, [r0], -r0
    a460:	1500008e 	strne	r0, [r0, #-142]	; 0x8e
    a464:	00001e35 	andeq	r1, r0, r5, lsr lr
    a468:	5e01bc01 	cdppl	12, 0, cr11, cr1, cr1, {0}
    a46c:	e7000000 	str	r0, [r0, -r0]
    a470:	0000008e 	andeq	r0, r0, lr, lsl #1
    a474:	001df417 	andseq	pc, sp, r7, lsl r4	; <UNPREDICTABLE>
    a478:	01c70100 	biceq	r0, r7, r0, lsl #2
    a47c:	0000005e 	andeq	r0, r0, lr, asr r0
    a480:	00000000 	andeq	r0, r0, r0
    a484:	00000012 	andeq	r0, r0, r2, lsl r0
    a488:	069e9c01 	ldreq	r9, [lr], r1, lsl #24
    a48c:	f3150000 	vhadd.u16	d0, d5, d0
    a490:	01000020 	tsteq	r0, r0, lsr #32
    a494:	005e01c7 	subseq	r0, lr, r7, asr #3
    a498:	8f080000 	svchi	0x00080000
    a49c:	14000000 	strne	r0, [r0], #-0
    a4a0:	00001f42 	andeq	r1, r0, r2, asr #30
    a4a4:	0001d301 	andeq	sp, r1, r1, lsl #6
    a4a8:	20000000 	andcs	r0, r0, r0
    a4ac:	01000000 	mrseq	r0, (UNDEF: 0)
    a4b0:	0006d59c 	muleq	r6, ip, r5
    a4b4:	20f31500 	rscscs	r1, r3, r0, lsl #10
    a4b8:	d3010000 	movwle	r0, #4096	; 0x1000
    a4bc:	00005e01 	andeq	r5, r0, r1, lsl #28
    a4c0:	008f2900 	addeq	r2, pc, r0, lsl #18
    a4c4:	1fe91500 	svcne	0x00e91500
    a4c8:	d3010000 	movwle	r0, #4096	; 0x1000
    a4cc:	00004c01 	andeq	r4, r0, r1, lsl #24
    a4d0:	008f4a00 	addeq	r4, pc, r0, lsl #20
    a4d4:	06140000 	ldreq	r0, [r4], -r0
    a4d8:	01000021 	tsteq	r0, r1, lsr #32
    a4dc:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    a4e0:	00200000 	eoreq	r0, r0, r0
    a4e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    a4e8:	0000070c 	andeq	r0, r0, ip, lsl #14
    a4ec:	0020f315 	eoreq	pc, r0, r5, lsl r3	; <UNPREDICTABLE>
    a4f0:	01df0100 	bicseq	r0, pc, r0, lsl #2
    a4f4:	0000005e 	andeq	r0, r0, lr, asr r0
    a4f8:	00008f6b 	andeq	r8, r0, fp, ror #30
    a4fc:	001fe915 	andseq	lr, pc, r5, lsl r9	; <UNPREDICTABLE>
    a500:	01df0100 	bicseq	r0, pc, r0, lsl #2
    a504:	0000004c 	andeq	r0, r0, ip, asr #32
    a508:	00008f8c 	andeq	r8, r0, ip, lsl #31
    a50c:	20cc1700 	sbccs	r1, ip, r0, lsl #14
    a510:	ea010000 	b	4a518 <__Stack_Size+0x49d18>
    a514:	00004c01 	andeq	r4, r0, r1, lsl #24
    a518:	00623000 	rsbeq	r3, r2, r0
    a51c:	00001c08 	andeq	r1, r0, r8, lsl #24
    a520:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
    a524:	15000007 	strne	r0, [r0, #-7]
    a528:	000020f3 	strdeq	r2, [r0], -r3
    a52c:	5e01ea01 	vmlapl.f32	s28, s2, s2
    a530:	ad000000 	stcge	0, cr0, [r0, #-0]
    a534:	0000008f 	andeq	r0, r0, pc, lsl #1
    a538:	001eb817 	andseq	fp, lr, r7, lsl r8
    a53c:	01f50100 	mvnseq	r0, r0, lsl #2
    a540:	0000004c 	andeq	r0, r0, ip, asr #32
    a544:	0800624c 	stmdaeq	r0, {r2, r3, r6, r9, sp, lr}
    a548:	0000001c 	andeq	r0, r0, ip, lsl r0
    a54c:	07629c01 	strbeq	r9, [r2, -r1, lsl #24]!
    a550:	f3150000 	vhadd.u16	d0, d5, d0
    a554:	01000020 	tsteq	r0, r0, lsr #32
    a558:	005e01f5 	ldrsheq	r0, [lr], #-21	; 0xffffffeb
    a55c:	8fce0000 	svchi	0x00ce0000
    a560:	14000000 	strne	r0, [r0], #-0
    a564:	00001fa7 	andeq	r1, r0, r7, lsr #31
    a568:	68020101 	stmdavs	r2, {r0, r8}
    a56c:	1c080062 	stcne	0, cr0, [r8], {98}	; 0x62
    a570:	01000000 	mrseq	r0, (UNDEF: 0)
    a574:	0007979c 	muleq	r7, ip, r7
    a578:	20f31500 	rscscs	r1, r3, r0, lsl #10
    a57c:	01010000 	mrseq	r0, (UNDEF: 1)
    a580:	00005e02 	andeq	r5, r0, r2, lsl #28
    a584:	008fef00 	addeq	lr, pc, r0, lsl #30
    a588:	1e5d1800 	cdpne	8, 5, cr1, cr13, cr0, {0}
    a58c:	01010000 	mrseq	r0, (UNDEF: 1)
    a590:	00004c02 	andeq	r4, r0, r2, lsl #24
    a594:	00510100 	subseq	r0, r1, r0, lsl #2
    a598:	00201114 	eoreq	r1, r0, r4, lsl r1
    a59c:	020d0100 	andeq	r0, sp, #0, 2
    a5a0:	00000000 	andeq	r0, r0, r0
    a5a4:	00000026 	andeq	r0, r0, r6, lsr #32
    a5a8:	07e69c01 	strbeq	r9, [r6, r1, lsl #24]!
    a5ac:	0a180000 	beq	60a5b4 <__Stack_Size+0x609db4>
    a5b0:	01000020 	tsteq	r0, r0, lsr #32
    a5b4:	07e6020d 	strbeq	r0, [r6, sp, lsl #4]!
    a5b8:	50010000 	andpl	r0, r1, r0
    a5bc:	001e5d15 	andseq	r5, lr, r5, lsl sp
    a5c0:	020d0100 	andeq	r0, sp, #0, 2
    a5c4:	0000004c 	andeq	r0, r0, ip, asr #32
    a5c8:	00009010 	andeq	r9, r0, r0, lsl r0
    a5cc:	00000010 	andeq	r0, r0, r0, lsl r0
    a5d0:	00002600 	andeq	r2, r0, r0, lsl #12
    a5d4:	1e1f1600 	cfmsub32ne	mvax0, mvfx1, mvfx15, mvfx0
    a5d8:	0f010000 	svceq	0x00010000
    a5dc:	00004c02 	andeq	r4, r0, r2, lsl #24
    a5e0:	00904a00 	addseq	r4, r0, r0, lsl #20
    a5e4:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    a5e8:	00003a04 	andeq	r3, r0, r4, lsl #20
    a5ec:	099c1400 	ldmibeq	ip, {sl, ip}
    a5f0:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    a5f4:	00628402 	rsbeq	r8, r2, r2, lsl #8
    a5f8:	00004008 	andeq	r4, r0, r8
    a5fc:	519c0100 	orrspl	r0, ip, r0, lsl #2
    a600:	15000008 	strne	r0, [r0, #-8]
    a604:	000020f3 	strdeq	r2, [r0], -r3
    a608:	5e021901 	cdppl	9, 0, cr1, cr2, cr1, {0}
    a60c:	73000000 	movwvc	r0, #0
    a610:	15000090 	strne	r0, [r0, #-144]	; 0x90
    a614:	00001e5d 	andeq	r1, r0, sp, asr lr
    a618:	4c021901 	stcmi	9, cr1, [r2], {1}
    a61c:	94000000 	strls	r0, [r0], #-0
    a620:	10000090 	mulne	r0, r0, r0
    a624:	08006284 	stmdaeq	r0, {r2, r7, r9, sp, lr}
    a628:	00000040 	andeq	r0, r0, r0, asr #32
    a62c:	00200a1a 	eoreq	r0, r0, sl, lsl sl
    a630:	021b0100 	andseq	r0, fp, #0, 2
    a634:	000007e6 	andeq	r0, r0, r6, ror #15
    a638:	b81b5201 	ldmdalt	fp, {r0, r9, ip, lr}
    a63c:	1600000b 	strne	r0, [r0], -fp
    a640:	00001e1f 	andeq	r1, r0, pc, lsl lr
    a644:	4c021b01 	stcmi	11, cr1, [r2], {1}
    a648:	b5000000 	strlt	r0, [r0, #-0]
    a64c:	00000090 	muleq	r0, r0, r0
    a650:	46170000 	ldrmi	r0, [r7], -r0
    a654:	01000020 	tsteq	r0, r0, lsr #32
    a658:	004c0224 	subeq	r0, ip, r4, lsr #4
    a65c:	00000000 	andeq	r0, r0, r0
    a660:	00200000 	eoreq	r0, r0, r0
    a664:	9c010000 	stcls	0, cr0, [r1], {-0}
    a668:	0000087c 	andeq	r0, r0, ip, ror r8
    a66c:	0020f315 	eoreq	pc, r0, r5, lsl r3	; <UNPREDICTABLE>
    a670:	02240100 	eoreq	r0, r4, #0, 2
    a674:	0000005e 	andeq	r0, r0, lr, asr r0
    a678:	000090ed 	andeq	r9, r0, sp, ror #1
    a67c:	20211700 	eorcs	r1, r1, r0, lsl #14
    a680:	2f010000 	svccs	0x00010000
    a684:	00004c02 	andeq	r4, r0, r2, lsl #24
    a688:	00000000 	andeq	r0, r0, r0
    a68c:	00002000 	andeq	r2, r0, r0
    a690:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
    a694:	15000008 	strne	r0, [r0, #-8]
    a698:	000020f3 	strdeq	r2, [r0], -r3
    a69c:	5e022f01 	cdppl	15, 0, cr2, cr2, cr1, {0}
    a6a0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    a6a4:	00000091 	muleq	r0, r1, r0
    a6a8:	001e8d14 	andseq	r8, lr, r4, lsl sp
    a6ac:	023c0100 	eorseq	r0, ip, #0, 2
    a6b0:	00000000 	andeq	r0, r0, r0
    a6b4:	00000038 	andeq	r0, r0, r8, lsr r0
    a6b8:	08ee9c01 	stmiaeq	lr!, {r0, sl, fp, ip, pc}^
    a6bc:	f3150000 	vhadd.u16	d0, d5, d0
    a6c0:	01000020 	tsteq	r0, r0, lsr #32
    a6c4:	005e023c 	subseq	r0, lr, ip, lsr r2
    a6c8:	912f0000 	teqls	pc, r0
    a6cc:	86150000 	ldrhi	r0, [r5], -r0
    a6d0:	01000020 	tsteq	r0, r0, lsr #32
    a6d4:	004c023c 	subeq	r0, ip, ip, lsr r2
    a6d8:	91500000 	cmpls	r0, r0
    a6dc:	1c150000 	ldcne	0, cr0, [r5], {-0}
    a6e0:	0100001f 	tsteq	r0, pc, lsl r0
    a6e4:	004c023c 	subeq	r0, ip, ip, lsr r2
    a6e8:	91710000 	cmnls	r1, r0
    a6ec:	14000000 	strne	r0, [r0], #-0
    a6f0:	00001ec4 	andeq	r1, r0, r4, asr #29
    a6f4:	00024801 	andeq	r4, r2, r1, lsl #16
    a6f8:	20000000 	andcs	r0, r0, r0
    a6fc:	01000000 	mrseq	r0, (UNDEF: 0)
    a700:	0009259c 	muleq	r9, ip, r5
    a704:	20f31500 	rscscs	r1, r3, r0, lsl #10
    a708:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    a70c:	00005e02 	andeq	r5, r0, r2, lsl #28
    a710:	00919200 	addseq	r9, r1, r0, lsl #4
    a714:	20861500 	addcs	r1, r6, r0, lsl #10
    a718:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    a71c:	00004c02 	andeq	r4, r0, r2, lsl #24
    a720:	0091b300 	addseq	fp, r1, r0, lsl #6
    a724:	99140000 	ldmdbls	r4, {}	; <UNPREDICTABLE>
    a728:	0100001d 	tsteq	r0, sp, lsl r0
    a72c:	00000254 	andeq	r0, r0, r4, asr r2
    a730:	00200000 	eoreq	r0, r0, r0
    a734:	9c010000 	stcls	0, cr0, [r1], {-0}
    a738:	0000095c 	andeq	r0, r0, ip, asr r9
    a73c:	0020f315 	eoreq	pc, r0, r5, lsl r3	; <UNPREDICTABLE>
    a740:	02540100 	subseq	r0, r4, #0, 2
    a744:	0000005e 	andeq	r0, r0, lr, asr r0
    a748:	000091d4 	ldrdeq	r9, [r0], -r4
    a74c:	001f1c15 	andseq	r1, pc, r5, lsl ip	; <UNPREDICTABLE>
    a750:	02540100 	subseq	r0, r4, #0, 2
    a754:	0000004c 	andeq	r0, r0, ip, asr #32
    a758:	000091f5 	strdeq	r9, [r0], -r5
    a75c:	20a61700 	adccs	r1, r6, r0, lsl #14
    a760:	5f010000 	svcpl	0x00010000
    a764:	00004c02 	andeq	r4, r0, r2, lsl #24
    a768:	00000000 	andeq	r0, r0, r0
    a76c:	00001c00 	andeq	r1, r0, r0, lsl #24
    a770:	879c0100 	ldrhi	r0, [ip, r0, lsl #2]
    a774:	15000009 	strne	r0, [r0, #-9]
    a778:	000020f3 	strdeq	r2, [r0], -r3
    a77c:	5e025f01 	cdppl	15, 0, cr5, cr2, cr1, {0}
    a780:	16000000 	strne	r0, [r0], -r0
    a784:	00000092 	muleq	r0, r2, r0
    a788:	001f6017 	andseq	r6, pc, r7, lsl r0	; <UNPREDICTABLE>
    a78c:	026a0100 	rsbeq	r0, sl, #0, 2
    a790:	0000004c 	andeq	r0, r0, ip, asr #32
    a794:	00000000 	andeq	r0, r0, r0
    a798:	0000001c 	andeq	r0, r0, ip, lsl r0
    a79c:	09b29c01 	ldmibeq	r2!, {r0, sl, fp, ip, pc}
    a7a0:	f3150000 	vhadd.u16	d0, d5, d0
    a7a4:	01000020 	tsteq	r0, r0, lsr #32
    a7a8:	005e026a 	subseq	r0, lr, sl, ror #4
    a7ac:	92370000 	eorsls	r0, r7, #0
    a7b0:	14000000 	strne	r0, [r0], #-0
    a7b4:	00001f8a 	andeq	r1, r0, sl, lsl #31
    a7b8:	00027601 	andeq	r7, r2, r1, lsl #12
    a7bc:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    a7c0:	01000000 	mrseq	r0, (UNDEF: 0)
    a7c4:	000a599c 	muleq	sl, ip, r9
    a7c8:	20f31500 	rscscs	r1, r3, r0, lsl #10
    a7cc:	76010000 	strvc	r0, [r1], -r0
    a7d0:	00005e02 	andeq	r5, r0, r2, lsl #28
    a7d4:	00925800 	addseq	r5, r2, r0, lsl #16
    a7d8:	1ee31500 	cdpne	5, 14, cr1, cr3, cr0, {0}
    a7dc:	76010000 	strvc	r0, [r1], -r0
    a7e0:	00005e02 	andeq	r5, r0, r2, lsl #28
    a7e4:	00929d00 	addseq	r9, r2, r0, lsl #26
    a7e8:	1e5d1500 	cdpne	5, 5, cr1, cr13, cr0, {0}
    a7ec:	76010000 	strvc	r0, [r1], -r0
    a7f0:	00004c02 	andeq	r4, r0, r2, lsl #24
    a7f4:	0092e200 	addseq	lr, r2, r0, lsl #4
    a7f8:	00001c00 	andeq	r1, r0, r0, lsl #24
    a7fc:	003a0000 	eorseq	r0, sl, r0
    a800:	0a2c0000 	beq	b0a808 <__Stack_Size+0xb0a008>
    a804:	0a160000 	beq	58a80c <__Stack_Size+0x58a00c>
    a808:	01000020 	tsteq	r0, r0, lsr #32
    a80c:	07e60278 			; <UNDEFINED> instruction: 0x07e60278
    a810:	930e0000 	movwls	r0, #57344	; 0xe000
    a814:	d01b0000 	andsle	r0, fp, r0
    a818:	1600000b 	strne	r0, [r0], -fp
    a81c:	00001e1f 	andeq	r1, r0, pc, lsl lr
    a820:	4c027801 	stcmi	8, cr7, [r2], {1}
    a824:	2c000000 	stccs	0, cr0, [r0], {-0}
    a828:	00000093 	muleq	r0, r3, r0
    a82c:	0be81b00 	bleq	ffa11434 <BootRAM+0xe981bd5>
    a830:	0a160000 	beq	58a838 <__Stack_Size+0x58a038>
    a834:	01000020 	tsteq	r0, r0, lsr #32
    a838:	07e60278 			; <UNDEFINED> instruction: 0x07e60278
    a83c:	93640000 	cmnls	r4, #0
    a840:	001b0000 	andseq	r0, fp, r0
    a844:	1600000c 	strne	r0, [r0], -ip
    a848:	00001e1f 	andeq	r1, r0, pc, lsl lr
    a84c:	4c027801 	stcmi	8, cr7, [r2], {1}
    a850:	82000000 	andhi	r0, r0, #0
    a854:	00000093 	muleq	r0, r3, r0
    a858:	74140000 	ldrvc	r0, [r4], #-0
    a85c:	01000020 	tsteq	r0, r0, lsr #32
    a860:	00000282 	andeq	r0, r0, r2, lsl #5
    a864:	005c0000 	subseq	r0, ip, r0
    a868:	9c010000 	stcls	0, cr0, [r1], {-0}
    a86c:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    a870:	0020f315 	eoreq	pc, r0, r5, lsl r3	; <UNPREDICTABLE>
    a874:	02820100 	addeq	r0, r2, #0, 2
    a878:	0000005e 	andeq	r0, r0, lr, asr r0
    a87c:	000093ba 			; <UNDEFINED> instruction: 0x000093ba
    a880:	001ee315 	andseq	lr, lr, r5, lsl r3
    a884:	02820100 	addeq	r0, r2, #0, 2
    a888:	0000005e 	andeq	r0, r0, lr, asr r0
    a88c:	000093f4 	strdeq	r9, [r0], -r4
    a890:	001e5d15 	andseq	r5, lr, r5, lsl sp
    a894:	02820100 	addeq	r0, r2, #0, 2
    a898:	0000004c 	andeq	r0, r0, ip, asr #32
    a89c:	00009420 	andeq	r9, r0, r0, lsr #8
    a8a0:	00000010 	andeq	r0, r0, r0, lsl r0
    a8a4:	00003800 	andeq	r3, r0, r0, lsl #16
    a8a8:	200a1600 	andcs	r1, sl, r0, lsl #12
    a8ac:	84010000 	strhi	r0, [r1], #-0
    a8b0:	0007e602 	andeq	lr, r7, r2, lsl #12
    a8b4:	00944c00 	addseq	r4, r4, r0, lsl #24
    a8b8:	0c201b00 	stceq	11, cr1, [r0], #-0
    a8bc:	1f160000 	svcne	0x00160000
    a8c0:	0100001e 	tsteq	r0, lr, lsl r0
    a8c4:	004c0284 	subeq	r0, ip, r4, lsl #5
    a8c8:	945f0000 	ldrbls	r0, [pc], #-0	; a8d0 <__Stack_Size+0xa0d0>
    a8cc:	00000000 	andeq	r0, r0, r0
    a8d0:	21121400 	tstcs	r2, r0, lsl #8
    a8d4:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    a8d8:	00000002 	andeq	r0, r0, r2
    a8dc:	00005c00 	andeq	r5, r0, r0, lsl #24
    a8e0:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
    a8e4:	1500000b 	strne	r0, [r0, #-11]
    a8e8:	000020f3 	strdeq	r2, [r0], -r3
    a8ec:	5e028e01 	cdppl	14, 0, cr8, cr2, cr1, {0}
    a8f0:	97000000 	strls	r0, [r0, -r0]
    a8f4:	15000094 	strne	r0, [r0, #-148]	; 0x94
    a8f8:	00001ee3 	andeq	r1, r0, r3, ror #29
    a8fc:	5e028e01 	cdppl	14, 0, cr8, cr2, cr1, {0}
    a900:	d1000000 	mrsle	r0, (UNDEF: 0)
    a904:	15000094 	strne	r0, [r0, #-148]	; 0x94
    a908:	00001e5d 	andeq	r1, r0, sp, asr lr
    a90c:	4c028e01 	stcmi	14, cr8, [r2], {1}
    a910:	fd000000 	stc2	0, cr0, [r0, #-0]
    a914:	10000094 	mulne	r0, r4, r0
    a918:	00000000 	andeq	r0, r0, r0
    a91c:	00000038 	andeq	r0, r0, r8, lsr r0
    a920:	00200a16 	eoreq	r0, r0, r6, lsl sl
    a924:	02900100 	addseq	r0, r0, #0, 2
    a928:	000007e6 	andeq	r0, r0, r6, ror #15
    a92c:	00009529 	andeq	r9, r0, r9, lsr #10
    a930:	000c381b 	andeq	r3, ip, fp, lsl r8
    a934:	1e1f1600 	cfmsub32ne	mvax0, mvfx1, mvfx15, mvfx0
    a938:	90010000 	andls	r0, r1, r0
    a93c:	00004c02 	andeq	r4, r0, r2, lsl #24
    a940:	00953c00 	addseq	r3, r5, r0, lsl #24
    a944:	00000000 	andeq	r0, r0, r0
    a948:	001fef17 	andseq	lr, pc, r7, lsl pc	; <UNPREDICTABLE>
    a94c:	029a0100 	addseq	r0, sl, #0, 2
    a950:	0000004c 	andeq	r0, r0, ip, asr #32
    a954:	00000000 	andeq	r0, r0, r0
    a958:	00000020 	andeq	r0, r0, r0, lsr #32
    a95c:	0b729c01 	bleq	1cb1968 <__Stack_Size+0x1cb1168>
    a960:	f3150000 	vhadd.u16	d0, d5, d0
    a964:	01000020 	tsteq	r0, r0, lsr #32
    a968:	005e029a 			; <UNDEFINED> instruction: 0x005e029a
    a96c:	95740000 	ldrbls	r0, [r4, #-0]!
    a970:	17000000 	strne	r0, [r0, -r0]
    a974:	00002062 	andeq	r2, r0, r2, rrx
    a978:	4c02a601 	stcmi	6, cr10, [r2], {1}
    a97c:	00000000 	andeq	r0, r0, r0
    a980:	20000000 	andcs	r0, r0, r0
    a984:	01000000 	mrseq	r0, (UNDEF: 0)
    a988:	000b9d9c 	muleq	fp, ip, sp
    a98c:	20f31500 	rscscs	r1, r3, r0, lsl #10
    a990:	a6010000 	strge	r0, [r1], -r0
    a994:	00005e02 	andeq	r5, r0, r2, lsl #28
    a998:	00959500 	addseq	r9, r5, r0, lsl #10
    a99c:	0d170000 	ldceq	0, cr0, [r7, #-0]
    a9a0:	0100001f 	tsteq	r0, pc, lsl r0
    a9a4:	008e02b2 			; <UNDEFINED> instruction: 0x008e02b2
    a9a8:	00000000 	andeq	r0, r0, r0
    a9ac:	00440000 	subeq	r0, r4, r0
    a9b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    a9b4:	00000bc8 	andeq	r0, r0, r8, asr #23
    a9b8:	0020f315 	eoreq	pc, r0, r5, lsl r3	; <UNPREDICTABLE>
    a9bc:	02b20100 	adcseq	r0, r2, #0, 2
    a9c0:	0000005e 	andeq	r0, r0, lr, asr r0
    a9c4:	000095b6 			; <UNDEFINED> instruction: 0x000095b6
    a9c8:	1d791400 	cfldrdne	mvd1, [r9, #-0]
    a9cc:	c3010000 	movwgt	r0, #4096	; 0x1000
    a9d0:	00000002 	andeq	r0, r0, r2
    a9d4:	00003a00 	andeq	r3, r0, r0, lsl #20
    a9d8:	fd9c0100 	ldc2	1, cr0, [ip]
    a9dc:	1500000b 	strne	r0, [r0, #-11]
    a9e0:	000020f3 	strdeq	r2, [r0], -r3
    a9e4:	5e02c301 	cdppl	3, 0, cr12, cr2, cr1, {0}
    a9e8:	d7000000 	strle	r0, [r0, -r0]
    a9ec:	18000095 	stmdane	r0, {r0, r2, r4, r7}
    a9f0:	00001ee3 	andeq	r1, r0, r3, ror #29
    a9f4:	5e02c301 	cdppl	3, 0, cr12, cr2, cr1, {0}
    a9f8:	01000000 	mrseq	r0, (UNDEF: 0)
    a9fc:	3b170051 	blcc	5cab48 <__Stack_Size+0x5ca348>
    aa00:	0100001f 	tsteq	r0, pc, lsl r0
    aa04:	004c02d6 	ldrdeq	r0, [ip], #-38	; 0xffffffda
    aa08:	00000000 	andeq	r0, r0, r0
    aa0c:	00060000 	andeq	r0, r6, r0
    aa10:	9c010000 	stcls	0, cr0, [r1], {-0}
    aa14:	00000c44 	andeq	r0, r0, r4, asr #24
    aa18:	0068621d 	rsbeq	r6, r8, sp, lsl r2
    aa1c:	5e02d601 	cfmadd32pl	mvax0, mvfx13, mvfx2, mvfx1
    aa20:	11000000 	mrsne	r0, (UNDEF: 0)
    aa24:	1e000096 	mcrne	0, 0, r0, cr0, cr6, {4}
    aa28:	01006c62 	tsteq	r0, r2, ror #24
    aa2c:	005e02d6 	ldrsbeq	r0, [lr], #-38	; 0xffffffda
    aa30:	51010000 	mrspl	r0, (UNDEF: 1)
    aa34:	001eb316 	andseq	fp, lr, r6, lsl r3
    aa38:	02d80100 	sbcseq	r0, r8, #0, 2
    aa3c:	0000004c 	andeq	r0, r0, ip, asr #32
    aa40:	00009632 	andeq	r9, r0, r2, lsr r6
    aa44:	1e161f00 	cdpne	15, 1, cr1, cr6, cr0, {0}
    aa48:	e3010000 	movw	r0, #4096	; 0x1000
    aa4c:	00004c02 	andeq	r4, r0, r2, lsl #24
    aa50:	00000000 	andeq	r0, r0, r0
    aa54:	00000a00 	andeq	r0, r0, r0, lsl #20
    aa58:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    aa5c:	00001f26 	andeq	r1, r0, r6, lsr #30
    aa60:	4c02e301 	stcmi	3, cr14, [r2], {1}
    aa64:	6b000000 	blvs	aa6c <__Stack_Size+0xa26c>
    aa68:	16000096 			; <UNDEFINED> instruction: 0x16000096
    aa6c:	0000202e 	andeq	r2, r0, lr, lsr #32
    aa70:	5e02e501 	cfsh32pl	mvfx14, mvfx2, #1
    aa74:	8c000000 	stchi	0, cr0, [r0], {-0}
    aa78:	16000096 			; <UNDEFINED> instruction: 0x16000096
    aa7c:	00001eb3 			; <UNDEFINED> instruction: 0x00001eb3
    aa80:	4c02e601 	stcmi	6, cr14, [r2], {1}
    aa84:	9f000000 	svcls	0x00000000
    aa88:	00000096 	muleq	r0, r6, r0
    aa8c:	0001d800 	andeq	sp, r1, r0, lsl #16
    aa90:	7d000400 	cfstrsvc	mvf0, [r0, #-0]
    aa94:	04000026 	streq	r0, [r0], #-38	; 0x26
    aa98:	00063901 	andeq	r3, r6, r1, lsl #18
    aa9c:	21570100 	cmpcs	r7, r0, lsl #2
    aaa0:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    aaa4:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    aaa8:	00000000 	andeq	r0, r0, r0
    aaac:	3add0000 	bcc	ff74aab4 <BootRAM+0xe6bb255>
    aab0:	04020000 	streq	r0, [r2], #-0
    aab4:	0004da05 	andeq	sp, r4, r5, lsl #20
    aab8:	05020200 	streq	r0, [r2, #-512]	; 0x200
    aabc:	000006fc 	strdeq	r0, [r0], -ip
    aac0:	1a060102 	bne	18aed0 <__Stack_Size+0x18a6d0>
    aac4:	03000008 	movweq	r0, #8
    aac8:	00323375 	eorseq	r3, r2, r5, ror r3
    aacc:	00452402 	subeq	r2, r5, r2, lsl #8
    aad0:	04020000 	streq	r0, [r2], #-0
    aad4:	00025207 	andeq	r5, r2, r7, lsl #4
    aad8:	31750300 	cmncc	r5, r0, lsl #6
    aadc:	25020036 	strcs	r0, [r2, #-54]	; 0x36
    aae0:	00000057 	andeq	r0, r0, r7, asr r0
    aae4:	49070202 	stmdbmi	r7, {r1, r9}
    aae8:	03000009 	movweq	r0, #9
    aaec:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    aaf0:	00006826 	andeq	r6, r0, r6, lsr #16
    aaf4:	08010200 	stmdaeq	r1, {r9}
    aaf8:	00000818 	andeq	r0, r0, r8, lsl r8
    aafc:	6f040504 	svcvs	0x00040504
    ab00:	06000000 	streq	r0, [r0], -r0
    ab04:	00000834 	andeq	r0, r0, r4, lsr r8
    ab08:	62c42901 	sbcvs	r2, r4, #16384	; 0x4000
    ab0c:	01540800 	cmpeq	r4, r0, lsl #16
    ab10:	9c010000 	stcls	0, cr0, [r1], {-0}
    ab14:	0000012a 	andeq	r0, r0, sl, lsr #2
    ab18:	00215007 	eoreq	r5, r1, r7
    ab1c:	3a2b0100 	bcc	acaf24 <__Stack_Size+0xaca724>
    ab20:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    ab24:	08000096 	stmdaeq	r0, {r1, r2, r4, r7}
    ab28:	08006300 	stmdaeq	r0, {r8, r9, sp, lr}
    ab2c:	00000012 	andeq	r0, r0, r2, lsl r0
    ab30:	000000b7 	strheq	r0, [r0], -r7
    ab34:	00075e07 	andeq	r5, r7, r7, lsl #28
    ab38:	4c3c0100 	ldfmis	f0, [ip], #-0
    ab3c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    ab40:	00000097 	muleq	r0, r7, r0
    ab44:	00631208 	rsbeq	r1, r3, r8, lsl #4
    ab48:	00001208 	andeq	r1, r0, r8, lsl #4
    ab4c:	0000d400 	andeq	sp, r0, r0, lsl #8
    ab50:	075e0700 	ldrbeq	r0, [lr, -r0, lsl #14]
    ab54:	3d010000 	stccc	0, cr0, [r1, #-0]
    ab58:	0000004c 	andeq	r0, r0, ip, asr #32
    ab5c:	00009772 	andeq	r9, r0, r2, ror r7
    ab60:	63660800 	cmnvs	r6, #0, 16
    ab64:	00220800 	eoreq	r0, r2, r0, lsl #16
    ab68:	00f10000 	rscseq	r0, r1, r0
    ab6c:	5e070000 	cdppl	0, 0, cr0, cr7, cr0, {0}
    ab70:	01000007 	tsteq	r0, r7
    ab74:	00004c72 	andeq	r4, r0, r2, ror ip
    ab78:	0097ec00 	addseq	lr, r7, r0, lsl #24
    ab7c:	88080000 	stmdahi	r8, {}	; <UNPREDICTABLE>
    ab80:	20080063 	andcs	r0, r8, r3, rrx
    ab84:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    ab88:	07000001 	streq	r0, [r0, -r1]
    ab8c:	0000075e 	andeq	r0, r0, lr, asr r7
    ab90:	004c7301 	subeq	r7, ip, r1, lsl #6
    ab94:	980d0000 	stmdals	sp, {}	; <UNPREDICTABLE>
    ab98:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    ab9c:	0800633e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sp, lr}
    aba0:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
    aba4:	00635209 	rsbeq	r5, r3, r9, lsl #4
    aba8:	0001c508 	andeq	ip, r1, r8, lsl #10
    abac:	63660900 	cmnvs	r6, #0, 18
    abb0:	01d00800 	bicseq	r0, r0, r0, lsl #16
    abb4:	06000000 	streq	r0, [r0], -r0
    abb8:	00002124 	andeq	r2, r0, r4, lsr #2
    abbc:	00009e01 	andeq	r9, r0, r1, lsl #28
    abc0:	00700000 	rsbseq	r0, r0, r0
    abc4:	9c010000 	stcls	0, cr0, [r1], {-0}
    abc8:	0000014f 	andeq	r0, r0, pc, asr #2
    abcc:	00215007 	eoreq	r5, r1, r7
    abd0:	3aa00100 	bcc	fe80afd8 <BootRAM+0xd77b779>
    abd4:	20000000 	andcs	r0, r0, r0
    abd8:	00000098 	muleq	r0, r8, r0
    abdc:	0008020a 	andeq	r0, r8, sl, lsl #4
    abe0:	022a0300 	eoreq	r0, sl, #0, 6
    abe4:	0000015b 	andeq	r0, r0, fp, asr r1
    abe8:	00004c0b 	andeq	r4, r0, fp, lsl #24
    abec:	213a0c00 	teqcs	sl, r0, lsl #24
    abf0:	17010000 	strne	r0, [r1, -r0]
    abf4:	0000004c 	andeq	r0, r0, ip, asr #32
    abf8:	05760305 	ldrbeq	r0, [r6, #-773]!	; 0x305
    abfc:	450c2000 	strmi	r2, [ip, #-0]
    ac00:	01000021 	tsteq	r0, r1, lsr #32
    ac04:	00004c18 	andeq	r4, r0, r8, lsl ip
    ac08:	78030500 	stmdavc	r3, {r8, sl}
    ac0c:	0d200005 	stceq	0, cr0, [r0, #-20]!	; 0xffffffec
    ac10:	00002182 	andeq	r2, r0, r2, lsl #3
    ac14:	005e1d04 	subseq	r1, lr, r4, lsl #26
    ac18:	700e0000 	andvc	r0, lr, r0
    ac1c:	9d000000 	stcls	0, cr0, [r0, #-0]
    ac20:	0f000001 	svceq	0x00000001
    ac24:	0000019d 	muleq	r0, sp, r1
    ac28:	04020006 	streq	r0, [r2], #-6
    ac2c:	00078b07 	andeq	r8, r7, r7, lsl #22
    ac30:	09b30d00 	ldmibeq	r3!, {r8, sl, fp}
    ac34:	1b010000 	blne	4ac3c <__Stack_Size+0x4a43c>
    ac38:	0000018d 	andeq	r0, r0, sp, lsl #3
    ac3c:	0009650d 	andeq	r6, r9, sp, lsl #10
    ac40:	8d1c0100 	ldfhis	f0, [ip, #-0]
    ac44:	10000001 	andne	r0, r0, r1
    ac48:	00002169 	andeq	r2, r0, r9, ror #2
    ac4c:	005edc05 	subseq	sp, lr, r5, lsl #24
    ac50:	2b100000 	blcs	40ac58 <__Stack_Size+0x40a458>
    ac54:	05000021 	streq	r0, [r0, #-33]	; 0x21
    ac58:	00005ed9 	ldrdeq	r5, [r0], -r9
    ac5c:	21751000 	cmncs	r5, r0
    ac60:	db050000 	blle	14ac68 <__Stack_Size+0x14a468>
    ac64:	0000005e 	andeq	r0, r0, lr, asr r0
    ac68:	0003f900 	andeq	pc, r3, r0, lsl #18
    ac6c:	57000400 	strpl	r0, [r0, -r0, lsl #8]
    ac70:	04000027 	streq	r0, [r0], #-39	; 0x27
    ac74:	00063901 	andeq	r3, r6, r1, lsl #18
    ac78:	21940100 	orrscs	r0, r4, r0, lsl #2
    ac7c:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    ac80:	0e480000 	cdpeq	0, 4, cr0, cr8, cr0, {0}
    ac84:	00000000 	andeq	r0, r0, r0
    ac88:	3b950000 	blcc	fe54ac90 <BootRAM+0xd4bb431>
    ac8c:	04020000 	streq	r0, [r2], #-0
    ac90:	0004da05 	andeq	sp, r4, r5, lsl #20
    ac94:	05020200 	streq	r0, [r2, #-512]	; 0x200
    ac98:	000006fc 	strdeq	r0, [r0], -ip
    ac9c:	1a060102 	bne	18b0ac <__Stack_Size+0x18a8ac>
    aca0:	02000008 	andeq	r0, r0, #8
    aca4:	02520704 	subseq	r0, r2, #4, 14	; 0x100000
    aca8:	75030000 	strvc	r0, [r3, #-0]
    acac:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    acb0:	00004c25 	andeq	r4, r0, r5, lsr #24
    acb4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    acb8:	00000949 	andeq	r0, r0, r9, asr #18
    acbc:	00387503 	eorseq	r7, r8, r3, lsl #10
    acc0:	005d2602 	subseq	r2, sp, r2, lsl #12
    acc4:	01020000 	mrseq	r0, (UNDEF: 2)
    acc8:	00081808 	andeq	r1, r8, r8, lsl #16
    accc:	53040400 	movwpl	r0, #17408	; 0x4400
    acd0:	05000000 	streq	r0, [r0, #-0]
    acd4:	000007c0 	andeq	r0, r0, r0, asr #15
    acd8:	8f2d0301 	svchi	0x002d0301
    acdc:	06000000 	streq	r0, [r0], -r0
    ace0:	00000286 	andeq	r0, r0, r6, lsl #5
    ace4:	09a90600 	stmibeq	r9!, {r9, sl}
    ace8:	06010000 	streq	r0, [r1], -r0
    acec:	00000130 	andeq	r0, r0, r0, lsr r1
    acf0:	062b0602 	strteq	r0, [fp], -r2, lsl #12
    acf4:	00030000 	andeq	r0, r3, r0
    acf8:	0007c107 	andeq	ip, r7, r7, lsl #2
    acfc:	6a340300 	bvs	d0b904 <__Stack_Size+0xd0b104>
    ad00:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    ad04:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    ad08:	d738030c 	ldrle	r0, [r8, -ip, lsl #6]!
    ad0c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    ad10:	000001d7 	ldrdeq	r0, [r0], -r7
    ad14:	00415003 	subeq	r5, r1, r3
    ad18:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    ad1c:	0000086d 	andeq	r0, r0, sp, ror #16
    ad20:	00415103 	subeq	r5, r1, r3, lsl #2
    ad24:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    ad28:	00002360 	andeq	r2, r0, r0, ror #6
    ad2c:	00415203 	subeq	r5, r1, r3, lsl #4
    ad30:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    ad34:	00000738 	andeq	r0, r0, r8, lsr r7
    ad38:	00e65303 	rsceq	r5, r6, r3, lsl #6
    ad3c:	00080000 	andeq	r0, r8, r0
    ad40:	0000640a 	andeq	r6, r0, sl, lsl #8
    ad44:	0000e600 	andeq	lr, r0, r0, lsl #12
    ad48:	00410b00 	subeq	r0, r1, r0, lsl #22
    ad4c:	04000000 	streq	r0, [r0], #-0
    ad50:	0000d704 	andeq	sp, r0, r4, lsl #14
    ad54:	06000700 	streq	r0, [r0], -r0, lsl #14
    ad58:	54030000 	strpl	r0, [r3], #-0
    ad5c:	0000009a 	muleq	r0, sl, r0
    ad60:	0057420c 	subseq	r4, r7, ip, lsl #4
    ad64:	1b620302 	blne	188b974 <__Stack_Size+0x188b174>
    ad68:	0d000001 	stceq	0, cr0, [r0, #-4]
    ad6c:	00306262 	eorseq	r6, r0, r2, ror #4
    ad70:	00536503 	subseq	r6, r3, r3, lsl #10
    ad74:	0d000000 	stceq	0, cr0, [r0, #-0]
    ad78:	00316262 	eorseq	r6, r1, r2, ror #4
    ad7c:	00536603 	subseq	r6, r3, r3, lsl #12
    ad80:	00010000 	andeq	r0, r1, r0
    ad84:	5f03020e 	svcpl	0x0003020e
    ad88:	00000137 	andeq	r0, r0, r7, lsr r1
    ad8c:	0300770f 	movweq	r7, #1807	; 0x70f
    ad90:	00004161 	andeq	r4, r0, r1, ror #2
    ad94:	77620f00 	strbvc	r0, [r2, -r0, lsl #30]!
    ad98:	f7680300 			; <UNDEFINED> instruction: 0xf7680300
    ad9c:	00000000 	andeq	r0, r0, r0
    ada0:	00093007 	andeq	r3, r9, r7
    ada4:	1b690300 	blne	1a4b9ac <__Stack_Size+0x1a4b1ac>
    ada8:	08000001 	stmdaeq	r0, {r0}
    adac:	00000114 	andeq	r0, r0, r4, lsl r1
    adb0:	d36b031c 	cmnle	fp, #28, 6	; 0x70000000
    adb4:	09000001 	stmdbeq	r0, {r0}
    adb8:	00000767 	andeq	r0, r0, r7, ror #14
    adbc:	00536d03 	subseq	r6, r3, r3, lsl #26
    adc0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    adc4:	00000015 	andeq	r0, r0, r5, lsl r0
    adc8:	00536e03 	subseq	r6, r3, r3, lsl #28
    adcc:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    add0:	00000311 	andeq	r0, r0, r1, lsl r3
    add4:	01376f03 	teqeq	r7, r3, lsl #30
    add8:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    addc:	00000148 	andeq	r0, r0, r8, asr #2
    ade0:	01377003 	teqeq	r7, r3
    ade4:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    ade8:	000004eb 	andeq	r0, r0, fp, ror #9
    adec:	01377103 	teqeq	r7, r3, lsl #2
    adf0:	09060000 	stmdbeq	r6, {}	; <UNPREDICTABLE>
    adf4:	000006ef 	andeq	r0, r0, pc, ror #13
    adf8:	00537303 	subseq	r7, r3, r3, lsl #6
    adfc:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    ae00:	00000808 	andeq	r0, r0, r8, lsl #16
    ae04:	00537403 	subseq	r7, r3, r3, lsl #8
    ae08:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    ae0c:	00000507 	andeq	r0, r0, r7, lsl #10
    ae10:	00537503 	subseq	r7, r3, r3, lsl #10
    ae14:	090a0000 	stmdbeq	sl, {}	; <UNPREDICTABLE>
    ae18:	0000054f 	andeq	r0, r0, pc, asr #10
    ae1c:	00537603 	subseq	r7, r3, r3, lsl #12
    ae20:	090b0000 	stmdbeq	fp, {}	; <UNPREDICTABLE>
    ae24:	000005d6 	ldrdeq	r0, [r0], -r6
    ae28:	00537703 	subseq	r7, r3, r3, lsl #14
    ae2c:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    ae30:	000007c8 	andeq	r0, r0, r8, asr #15
    ae34:	00ec7a03 	rsceq	r7, ip, r3, lsl #20
    ae38:	00100000 	andseq	r0, r0, r0
    ae3c:	00011507 	andeq	r1, r1, r7, lsl #10
    ae40:	427b0300 	rsbsmi	r0, fp, #0, 6
    ae44:	08000001 	stmdaeq	r0, {r0}
    ae48:	000003a9 	andeq	r0, r0, r9, lsr #7
    ae4c:	877d0334 			; <UNDEFINED> instruction: 0x877d0334
    ae50:	09000002 	stmdbeq	r0, {r1}
    ae54:	00000296 	muleq	r0, r6, r2
    ae58:	02887f03 	addeq	r7, r8, #3, 30
    ae5c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    ae60:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    ae64:	02888003 	addeq	r8, r8, #3
    ae68:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    ae6c:	00000937 	andeq	r0, r0, r7, lsr r9
    ae70:	02888303 	addeq	r8, r8, #201326592	; 0xc000000
    ae74:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    ae78:	00000778 	andeq	r0, r0, r8, ror r7
    ae7c:	02888403 	addeq	r8, r8, #50331648	; 0x3000000
    ae80:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    ae84:	000002c3 	andeq	r0, r0, r3, asr #5
    ae88:	029d9603 	addseq	r9, sp, #3145728	; 0x300000
    ae8c:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    ae90:	0000006d 	andeq	r0, r0, sp, rrx
    ae94:	029da103 	addseq	sl, sp, #-1073741824	; 0xc0000000
    ae98:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    ae9c:	000009c5 	andeq	r0, r0, r5, asr #19
    aea0:	02b7ab03 	adcseq	sl, r7, #3072	; 0xc00
    aea4:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    aea8:	000002d7 	ldrdeq	r0, [r0], -r7
    aeac:	00e6ad03 	rsceq	sl, r6, r3, lsl #26
    aeb0:	091c0000 	ldmdbeq	ip, {}	; <UNPREDICTABLE>
    aeb4:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    aeb8:	00e6ae03 	rsceq	sl, r6, r3, lsl #28
    aebc:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
    aec0:	000001c3 	andeq	r0, r0, r3, asr #3
    aec4:	00e6af03 	rsceq	sl, r6, r3, lsl #30
    aec8:	09240000 	stmdbeq	r4!, {}	; <UNPREDICTABLE>
    aecc:	00000342 	andeq	r0, r0, r2, asr #6
    aed0:	00e6b003 	rsceq	fp, r6, r3
    aed4:	09280000 	stmdbeq	r8!, {}	; <UNPREDICTABLE>
    aed8:	00000467 	andeq	r0, r0, r7, ror #8
    aedc:	0064b203 	rsbeq	fp, r4, r3, lsl #4
    aee0:	092c0000 	stmdbeq	ip!, {}	; <UNPREDICTABLE>
    aee4:	0000235d 	andeq	r2, r0, sp, asr r3
    aee8:	0053b303 	subseq	fp, r3, r3, lsl #6
    aeec:	00300000 	eorseq	r0, r0, r0
    aef0:	87040410 	smladhi	r4, r0, r4, r0
    aef4:	0a000002 	beq	af04 <__Stack_Size+0xa704>
    aef8:	0000008f 	andeq	r0, r0, pc, lsl #1
    aefc:	0000029d 	muleq	r0, sp, r2
    af00:	0000530b 	andeq	r5, r0, fp, lsl #6
    af04:	04040000 	streq	r0, [r4], #-0
    af08:	0000028e 	andeq	r0, r0, lr, lsl #5
    af0c:	00008f0a 	andeq	r8, r0, sl, lsl #30
    af10:	0002b700 	andeq	fp, r2, r0, lsl #14
    af14:	00530b00 	subseq	r0, r3, r0, lsl #22
    af18:	530b0000 	movwpl	r0, #45056	; 0xb000
    af1c:	00000000 	andeq	r0, r0, r0
    af20:	02a30404 	adceq	r0, r3, #4, 8	; 0x4000000
    af24:	aa070000 	bge	1caf2c <__Stack_Size+0x1ca72c>
    af28:	03000003 	movweq	r0, #3
    af2c:	0001deb5 			; <UNDEFINED> instruction: 0x0001deb5
    af30:	008a0800 	addeq	r0, sl, r0, lsl #16
    af34:	03240000 	teqeq	r4, #0
    af38:	000341b7 			; <UNDEFINED> instruction: 0x000341b7
    af3c:	05a00900 	streq	r0, [r0, #2304]!	; 0x900
    af40:	b9030000 	stmdblt	r3, {}	; <UNPREDICTABLE>
    af44:	00000288 	andeq	r0, r0, r8, lsl #5
    af48:	041d0900 	ldreq	r0, [sp], #-2304	; 0x900
    af4c:	ba030000 	blt	caf54 <__Stack_Size+0xca754>
    af50:	00000288 	andeq	r0, r0, r8, lsl #5
    af54:	029b0904 	addseq	r0, fp, #4, 18	; 0x10000
    af58:	bb030000 	bllt	caf60 <__Stack_Size+0xca760>
    af5c:	00000288 	andeq	r0, r0, r8, lsl #5
    af60:	04330908 	ldrteq	r0, [r3], #-2312	; 0x908
    af64:	bc030000 	stclt	0, cr0, [r3], {-0}
    af68:	00000288 	andeq	r0, r0, r8, lsl #5
    af6c:	00a2090c 	adceq	r0, r2, ip, lsl #18
    af70:	bd030000 	stclt	0, cr0, [r3, #-0]
    af74:	00000288 	andeq	r0, r0, r8, lsl #5
    af78:	07410910 	smlaldeq	r0, r1, r0, r9
    af7c:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
    af80:	00000288 	andeq	r0, r0, r8, lsl #5
    af84:	08f80914 	ldmeq	r8!, {r2, r4, r8, fp}^
    af88:	bf030000 	svclt	0x00030000
    af8c:	00000288 	andeq	r0, r0, r8, lsl #5
    af90:	01910918 	orrseq	r0, r1, r8, lsl r9
    af94:	c0030000 	andgt	r0, r3, r0
    af98:	00000288 	andeq	r0, r0, r8, lsl #5
    af9c:	02ad091c 	adceq	r0, sp, #28, 18	; 0x70000
    afa0:	c1030000 	mrsgt	r0, (UNDEF: 3)
    afa4:	00000288 	andeq	r0, r0, r8, lsl #5
    afa8:	8b070020 	blhi	1cb030 <__Stack_Size+0x1ca830>
    afac:	03000000 	movweq	r0, #0
    afb0:	0002c8c3 	andeq	ip, r2, r3, asr #17
    afb4:	02921100 	addseq	r1, r2, #0, 2
    afb8:	35010000 	strcc	r0, [r1, #-0]
    afbc:	08006418 	stmdaeq	r0, {r3, r4, sl, sp, lr}
    afc0:	00000038 	andeq	r0, r0, r8, lsr r0
    afc4:	eb129c01 	bl	4b1fd0 <__Stack_Size+0x4b17d0>
    afc8:	03000002 	movweq	r0, #2
    afcc:	0002bdec 	andeq	fp, r2, ip, ror #27
    afd0:	21a81200 			; <UNDEFINED> instruction: 0x21a81200
    afd4:	ed030000 	stc	0, cr0, [r3, #-0]
    afd8:	00000341 	andeq	r0, r0, r1, asr #6
    afdc:	0021bf13 	eoreq	fp, r1, r3, lsl pc
    afe0:	d3270100 	teqle	r7, #0, 2
    afe4:	05000001 	streq	r0, [r0, #-1]
    afe8:	00058803 	andeq	r8, r5, r3, lsl #16
    afec:	21821320 	orrcs	r1, r2, r0, lsr #6
    aff0:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    aff4:	00000053 	andeq	r0, r0, r3, asr r0
    aff8:	05840305 	streq	r0, [r4, #773]	; 0x305
    affc:	e8132000 	ldmda	r3, {sp}
    b000:	01000001 	tsteq	r0, r1
    b004:	0003a61d 	andeq	sl, r3, sp, lsl r6
    b008:	a8030500 	stmdage	r3, {r8, sl}
    b00c:	04200005 	strteq	r0, [r0], #-5
    b010:	0001d304 	andeq	sp, r1, r4, lsl #6
    b014:	013e1300 	teqeq	lr, r0, lsl #6
    b018:	20010000 	andcs	r0, r1, r0
    b01c:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    b020:	05800305 	streq	r0, [r0, #773]	; 0x305
    b024:	04042000 	streq	r2, [r4], #-0
    b028:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
    b02c:	0021a713 	eoreq	sl, r1, r3, lsl r7
    b030:	d4280100 	strtle	r0, [r8], #-256	; 0x100
    b034:	05000003 	streq	r0, [r0, #-3]
    b038:	0005a403 	andeq	sl, r5, r3, lsl #8
    b03c:	41040420 	tstmi	r4, r0, lsr #8
    b040:	13000003 	movwne	r0, #3
    b044:	0000218a 	andeq	r2, r0, sl, lsl #3
    b048:	00412501 	subeq	r2, r1, r1, lsl #10
    b04c:	03050000 	movweq	r0, #20480	; 0x5000
    b050:	2000057c 	andcs	r0, r0, ip, ror r5
    b054:	00051d13 	andeq	r1, r5, r3, lsl sp
    b058:	41260100 	teqmi	r6, r0, lsl #2
    b05c:	05000000 	streq	r0, [r0, #-0]
    b060:	0005ac03 	andeq	sl, r5, r3, lsl #24
    b064:	0de00020 	stcleq	0, cr0, [r0, #128]!	; 0x80
    b068:	00040000 	andeq	r0, r4, r0
    b06c:	0000285a 	andeq	r2, r0, sl, asr r8
    b070:	06390104 	ldrteq	r0, [r9], -r4, lsl #2
    b074:	cb010000 	blgt	4b07c <__Stack_Size+0x4a87c>
    b078:	93000021 	movwls	r0, #33	; 0x21
    b07c:	90000008 	andls	r0, r0, r8
    b080:	0000000e 	andeq	r0, r0, lr
    b084:	fc000000 	stc2	0, cr0, [r0], {-0}
    b088:	0200003b 	andeq	r0, r0, #59	; 0x3b
    b08c:	04da0504 	ldrbeq	r0, [sl], #1284	; 0x504
    b090:	02020000 	andeq	r0, r2, #0
    b094:	0006fc05 	andeq	pc, r6, r5, lsl #24
    b098:	06010200 	streq	r0, [r1], -r0, lsl #4
    b09c:	0000081a 	andeq	r0, r0, sl, lsl r8
    b0a0:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    b0a4:	45240200 	strmi	r0, [r4, #-512]!	; 0x200
    b0a8:	02000000 	andeq	r0, r0, #0
    b0ac:	02520704 	subseq	r0, r2, #4, 14	; 0x100000
    b0b0:	75030000 	strvc	r0, [r3, #-0]
    b0b4:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    b0b8:	00005725 	andeq	r5, r0, r5, lsr #14
    b0bc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    b0c0:	00000949 	andeq	r0, r0, r9, asr #18
    b0c4:	00387503 	eorseq	r7, r8, r3, lsl #10
    b0c8:	00682602 	rsbeq	r2, r8, r2, lsl #12
    b0cc:	01020000 	mrseq	r0, (UNDEF: 2)
    b0d0:	00081808 	andeq	r1, r8, r8, lsl #16
    b0d4:	035a0400 	cmpeq	sl, #0, 8
    b0d8:	2c020000 	stccs	0, cr0, [r2], {-0}
    b0dc:	0000007a 	andeq	r0, r0, sl, ror r0
    b0e0:	00004505 	andeq	r4, r0, r5, lsl #10
    b0e4:	02010600 	andeq	r0, r1, #0, 12
    b0e8:	00009436 	andeq	r9, r0, r6, lsr r4
    b0ec:	07530700 	ldrbeq	r0, [r3, -r0, lsl #14]
    b0f0:	07000000 	streq	r0, [r0, -r0]
    b0f4:	000001a7 	andeq	r0, r0, r7, lsr #3
    b0f8:	2d040001 	stccs	0, cr0, [r4, #-4]
    b0fc:	02000005 	andeq	r0, r0, #5
    b100:	00007f39 	andeq	r7, r0, r9, lsr pc
    b104:	023d0800 	eorseq	r0, sp, #0, 16
    b108:	03010000 	movweq	r0, #4096	; 0x1000
    b10c:	0000c416 	andeq	ip, r0, r6, lsl r4
    b110:	05320700 	ldreq	r0, [r2, #-1792]!	; 0x700
    b114:	07000000 	streq	r0, [r0, -r0]
    b118:	00000724 	andeq	r0, r0, r4, lsr #14
    b11c:	017e0701 	cmneq	lr, r1, lsl #14
    b120:	07020000 	streq	r0, [r2, -r0]
    b124:	00000920 	andeq	r0, r0, r0, lsr #18
    b128:	8f080003 	svchi	0x00080003
    b12c:	01000000 	mrseq	r0, (UNDEF: 0)
    b130:	01251f03 	teqeq	r5, r3, lsl #30
    b134:	3d070000 	stccc	0, cr0, [r7, #-0]
    b138:	00000023 	andeq	r0, r0, r3, lsr #32
    b13c:	00256c07 	eoreq	r6, r5, r7, lsl #24
    b140:	5e070100 	adfpls	f0, f7, f0
    b144:	02000011 	andeq	r0, r0, #17
    b148:	00234807 	eoreq	r4, r3, r7, lsl #16
    b14c:	68070300 	stmdavs	r7, {r8, r9}
    b150:	04000011 	streq	r0, [r0], #-17
    b154:	0024fb07 	eoreq	pc, r4, r7, lsl #22
    b158:	2b070500 	blcs	1cc560 <__Stack_Size+0x1cbd60>
    b15c:	06000025 	streq	r0, [r0], -r5, lsr #32
    b160:	0023b207 	eoreq	fp, r3, r7, lsl #4
    b164:	11070700 	tstne	r7, r0, lsl #14
    b168:	08000024 	stmdaeq	r0, {r2, r5}
    b16c:	00246207 	eoreq	r6, r4, r7, lsl #4
    b170:	13070900 	movwne	r0, #30976	; 0x7900
    b174:	0a000023 	beq	b208 <__Stack_Size+0xaa08>
    b178:	0023c107 	eoreq	ip, r3, r7, lsl #2
    b17c:	84070b00 	strhi	r0, [r7], #-2816	; 0xb00
    b180:	0c000024 	stceq	0, cr0, [r0], {36}	; 0x24
    b184:	00239007 	eoreq	r9, r3, r7
    b188:	08000c00 	stmdaeq	r0, {sl, fp}
    b18c:	00002432 	andeq	r2, r0, r2, lsr r4
    b190:	50320301 	eorspl	r0, r2, r1, lsl #6
    b194:	07000001 	streq	r0, [r0, -r1]
    b198:	0000227d 	andeq	r2, r0, sp, ror r2
    b19c:	24dc0701 	ldrbcs	r0, [ip], #1793	; 0x701
    b1a0:	07020000 	streq	r0, [r2, -r0]
    b1a4:	0000228f 	andeq	r2, r0, pc, lsl #5
    b1a8:	24930703 	ldrcs	r0, [r3], #1795	; 0x703
    b1ac:	07040000 	streq	r0, [r4, -r0]
    b1b0:	000024c8 	andeq	r2, r0, r8, asr #9
    b1b4:	cf080005 	svcgt	0x00080005
    b1b8:	01000023 	tsteq	r0, r3, lsr #32
    b1bc:	01693c03 	cmneq	r9, r3, lsl #24
    b1c0:	de070000 	cdple	0, 0, cr0, cr7, cr0, {0}
    b1c4:	00000021 	andeq	r0, r0, r1, lsr #32
    b1c8:	00223c07 	eoreq	r3, r2, r7, lsl #24
    b1cc:	08000100 	stmdaeq	r0, {r8}
    b1d0:	00002423 	andeq	r2, r0, r3, lsr #8
    b1d4:	b2160401 	andslt	r0, r6, #16777216	; 0x1000000
    b1d8:	07000001 	streq	r0, [r0, -r1]
    b1dc:	00002547 	andeq	r2, r0, r7, asr #10
    b1e0:	24430700 	strbcs	r0, [r3], #-1792	; 0x700
    b1e4:	07010000 	streq	r0, [r1, -r0]
    b1e8:	000022c7 	andeq	r2, r0, r7, asr #5
    b1ec:	257f0702 	ldrbcs	r0, [pc, #-1794]!	; aaf2 <__Stack_Size+0xa2f2>
    b1f0:	07030000 	streq	r0, [r3, -r0]
    b1f4:	000022c2 	andeq	r2, r0, r2, asr #5
    b1f8:	257a0704 	ldrbcs	r0, [sl, #-1796]!	; 0x704
    b1fc:	07050000 	streq	r0, [r5, -r0]
    b200:	0000255d 	andeq	r2, r0, sp, asr r5
    b204:	24740706 	ldrbtcs	r0, [r4], #-1798	; 0x706
    b208:	07070000 	streq	r0, [r7, -r0]
    b20c:	00002251 	andeq	r2, r0, r1, asr r2
    b210:	23030708 	movwcs	r0, #14088	; 0x3708
    b214:	00090000 	andeq	r0, r9, r0
    b218:	00003309 	andeq	r3, r0, r9, lsl #6
    b21c:	24040800 	strcs	r0, [r4], #-2048	; 0x800
    b220:	000001d7 	ldrdeq	r0, [r0], -r7
    b224:	0002e00a 	andeq	lr, r2, sl
    b228:	d7260400 	strle	r0, [r6, -r0, lsl #8]!
    b22c:	00000001 	andeq	r0, r0, r1
    b230:	0003f10a 	andeq	pc, r3, sl, lsl #2
    b234:	4c270400 	cfstrsmi	mvf0, [r7], #-0
    b238:	04000000 	streq	r0, [r0], #-0
    b23c:	5e040b00 	vmlapl.f64	d0, d4, d0
    b240:	04000000 	streq	r0, [r0], #-0
    b244:	00000572 	andeq	r0, r0, r2, ror r5
    b248:	01b22904 			; <UNDEFINED> instruction: 0x01b22904
    b24c:	c0080000 	andgt	r0, r8, r0
    b250:	01000007 	tsteq	r0, r7
    b254:	020d2d04 	andeq	r2, sp, #4, 26	; 0x100
    b258:	86070000 	strhi	r0, [r7], -r0
    b25c:	00000002 	andeq	r0, r0, r2
    b260:	0009a907 	andeq	sl, r9, r7, lsl #18
    b264:	30070100 	andcc	r0, r7, r0, lsl #2
    b268:	02000001 	andeq	r0, r0, #1
    b26c:	00062b07 	andeq	r2, r6, r7, lsl #22
    b270:	04000300 	streq	r0, [r0], #-768	; 0x300
    b274:	000007c1 	andeq	r0, r0, r1, asr #15
    b278:	01e83404 	mvneq	r3, r4, lsl #8
    b27c:	ff090000 			; <UNDEFINED> instruction: 0xff090000
    b280:	0c000005 	stceq	0, cr0, [r0], {5}
    b284:	02553804 	subseq	r3, r5, #4, 16	; 0x40000
    b288:	d70a0000 	strle	r0, [sl, -r0]
    b28c:	04000001 	streq	r0, [r0], #-1
    b290:	00004c50 	andeq	r4, r0, r0, asr ip
    b294:	6d0a0000 	stcvs	0, cr0, [sl, #-0]
    b298:	04000008 	streq	r0, [r0], #-8
    b29c:	00004c51 	andeq	r4, r0, r1, asr ip
    b2a0:	600a0200 	andvs	r0, sl, r0, lsl #4
    b2a4:	04000023 	streq	r0, [r0], #-35	; 0x23
    b2a8:	00004c52 	andeq	r4, r0, r2, asr ip
    b2ac:	380a0400 	stmdacc	sl, {sl}
    b2b0:	04000007 	streq	r0, [r0], #-7
    b2b4:	00026453 	andeq	r6, r2, r3, asr r4
    b2b8:	0c000800 	stceq	8, cr0, [r0], {-0}
    b2bc:	000001d7 	ldrdeq	r0, [r0], -r7
    b2c0:	00000264 	andeq	r0, r0, r4, ror #4
    b2c4:	00004c0d 	andeq	r4, r0, sp, lsl #24
    b2c8:	040b0000 	streq	r0, [fp], #-0
    b2cc:	00000255 	andeq	r0, r0, r5, asr r2
    b2d0:	00060004 	andeq	r0, r6, r4
    b2d4:	18540400 	ldmdane	r4, {sl}^
    b2d8:	09000002 	stmdbeq	r0, {r1}
    b2dc:	00000623 	andeq	r0, r0, r3, lsr #12
    b2e0:	9a580402 	bls	160c2f0 <__Stack_Size+0x160baf0>
    b2e4:	0a000002 	beq	b2f4 <__Stack_Size+0xaaf4>
    b2e8:	00000370 	andeq	r0, r0, r0, ror r3
    b2ec:	005e5a04 	subseq	r5, lr, r4, lsl #20
    b2f0:	0a000000 	beq	b2f8 <__Stack_Size+0xaaf8>
    b2f4:	0000058c 	andeq	r0, r0, ip, lsl #11
    b2f8:	005e5b04 	subseq	r5, lr, r4, lsl #22
    b2fc:	00010000 	andeq	r0, r1, r0
    b300:	00062404 	andeq	r2, r6, r4, lsl #8
    b304:	755d0400 	ldrbvc	r0, [sp, #-1024]	; 0x400
    b308:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    b30c:	02005742 	andeq	r5, r0, #17301504	; 0x1080000
    b310:	02c96204 	sbceq	r6, r9, #4, 4	; 0x40000000
    b314:	620f0000 	andvs	r0, pc, #0
    b318:	04003062 	streq	r3, [r0], #-98	; 0x62
    b31c:	00005e65 	andeq	r5, r0, r5, ror #28
    b320:	620f0000 	andvs	r0, pc, #0
    b324:	04003162 	streq	r3, [r0], #-354	; 0x162
    b328:	00005e66 	andeq	r5, r0, r6, ror #28
    b32c:	10000100 	andne	r0, r0, r0, lsl #2
    b330:	e55f0402 	ldrb	r0, [pc, #-1026]	; af36 <__Stack_Size+0xa736>
    b334:	11000002 	tstne	r0, r2
    b338:	61040077 	tstvs	r4, r7, ror r0
    b33c:	0000004c 	andeq	r0, r0, ip, asr #32
    b340:	00776211 	rsbseq	r6, r7, r1, lsl r2
    b344:	02a56804 	adceq	r6, r5, #4, 16	; 0x40000
    b348:	04000000 	streq	r0, [r0], #-0
    b34c:	00000930 	andeq	r0, r0, r0, lsr r9
    b350:	02c96904 	sbceq	r6, r9, #4, 18	; 0x10000
    b354:	14090000 	strne	r0, [r9], #-0
    b358:	1c000001 	stcne	0, cr0, [r0], {1}
    b35c:	03816b04 	orreq	r6, r1, #4, 22	; 0x1000
    b360:	670a0000 	strvs	r0, [sl, -r0]
    b364:	04000007 	streq	r0, [r0], #-7
    b368:	00005e6d 	andeq	r5, r0, sp, ror #28
    b36c:	150a0000 	strne	r0, [sl, #-0]
    b370:	04000000 	streq	r0, [r0], #-0
    b374:	00005e6e 	andeq	r5, r0, lr, ror #28
    b378:	110a0100 	mrsne	r0, (UNDEF: 26)
    b37c:	04000003 	streq	r0, [r0], #-3
    b380:	0002e56f 	andeq	lr, r2, pc, ror #10
    b384:	480a0200 	stmdami	sl, {r9}
    b388:	04000001 	streq	r0, [r0], #-1
    b38c:	0002e570 	andeq	lr, r2, r0, ror r5
    b390:	eb0a0400 	bl	28c398 <__Stack_Size+0x28bb98>
    b394:	04000004 	streq	r0, [r0], #-4
    b398:	0002e571 	andeq	lr, r2, r1, ror r5
    b39c:	ef0a0600 	svc	0x000a0600
    b3a0:	04000006 	streq	r0, [r0], #-6
    b3a4:	00005e73 	andeq	r5, r0, r3, ror lr
    b3a8:	080a0800 	stmdaeq	sl, {fp}
    b3ac:	04000008 	streq	r0, [r0], #-8
    b3b0:	00005e74 	andeq	r5, r0, r4, ror lr
    b3b4:	070a0900 	streq	r0, [sl, -r0, lsl #18]
    b3b8:	04000005 	streq	r0, [r0], #-5
    b3bc:	00005e75 	andeq	r5, r0, r5, ror lr
    b3c0:	4f0a0a00 	svcmi	0x000a0a00
    b3c4:	04000005 	streq	r0, [r0], #-5
    b3c8:	00005e76 	andeq	r5, r0, r6, ror lr
    b3cc:	d60a0b00 	strle	r0, [sl], -r0, lsl #22
    b3d0:	04000005 	streq	r0, [r0], #-5
    b3d4:	00005e77 	andeq	r5, r0, r7, ror lr
    b3d8:	c80a0c00 	stmdagt	sl, {sl, fp}
    b3dc:	04000007 	streq	r0, [r0], #-7
    b3e0:	00026a7a 	andeq	r6, r2, sl, ror sl
    b3e4:	04001000 	streq	r1, [r0], #-0
    b3e8:	00000115 	andeq	r0, r0, r5, lsl r1
    b3ec:	02f07b04 	rscseq	r7, r0, #4, 22	; 0x1000
    b3f0:	a9090000 	stmdbge	r9, {}	; <UNPREDICTABLE>
    b3f4:	34000003 	strcc	r0, [r0], #-3
    b3f8:	04357d04 	ldrteq	r7, [r5], #-3332	; 0xd04
    b3fc:	960a0000 	strls	r0, [sl], -r0
    b400:	04000002 	streq	r0, [r0], #-2
    b404:	0004367f 	andeq	r3, r4, pc, ror r6
    b408:	b80a0000 	stmdalt	sl, {}	; <UNPREDICTABLE>
    b40c:	04000004 	streq	r0, [r0], #-4
    b410:	00043680 	andeq	r3, r4, r0, lsl #13
    b414:	370a0400 	strcc	r0, [sl, -r0, lsl #8]
    b418:	04000009 	streq	r0, [r0], #-9
    b41c:	00043683 	andeq	r3, r4, r3, lsl #13
    b420:	780a0800 	stmdavc	sl, {fp}
    b424:	04000007 	streq	r0, [r0], #-7
    b428:	00043684 	andeq	r3, r4, r4, lsl #13
    b42c:	c30a0c00 	movwgt	r0, #44032	; 0xac00
    b430:	04000002 	streq	r0, [r0], #-2
    b434:	00044b96 	muleq	r4, r6, fp
    b438:	6d0a1000 	stcvs	0, cr1, [sl, #-0]
    b43c:	04000000 	streq	r0, [r0], #-0
    b440:	00044ba1 	andeq	r4, r4, r1, lsr #23
    b444:	c50a1400 	strgt	r1, [sl, #-1024]	; 0x400
    b448:	04000009 	streq	r0, [r0], #-9
    b44c:	000465ab 	andeq	r6, r4, fp, lsr #11
    b450:	d70a1800 	strle	r1, [sl, -r0, lsl #16]
    b454:	04000002 	streq	r0, [r0], #-2
    b458:	000264ad 	andeq	r6, r2, sp, lsr #9
    b45c:	b90a1c00 	stmdblt	sl, {sl, fp, ip}
    b460:	04000003 	streq	r0, [r0], #-3
    b464:	000264ae 	andeq	r6, r2, lr, lsr #9
    b468:	c30a2000 	movwgt	r2, #40960	; 0xa000
    b46c:	04000001 	streq	r0, [r0], #-1
    b470:	000264af 	andeq	r6, r2, pc, lsr #9
    b474:	420a2400 	andmi	r2, sl, #0, 8
    b478:	04000003 	streq	r0, [r0], #-3
    b47c:	000264b0 			; <UNDEFINED> instruction: 0x000264b0
    b480:	670a2800 	strvs	r2, [sl, -r0, lsl #16]
    b484:	04000004 	streq	r0, [r0], #-4
    b488:	0001d7b2 			; <UNDEFINED> instruction: 0x0001d7b2
    b48c:	5d0a2c00 	stcpl	12, cr2, [sl, #-0]
    b490:	04000023 	streq	r0, [r0], #-35	; 0x23
    b494:	00005eb3 			; <UNDEFINED> instruction: 0x00005eb3
    b498:	12003000 	andne	r3, r0, #0
    b49c:	0435040b 	ldrteq	r0, [r5], #-1035	; 0x40b
    b4a0:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    b4a4:	4b000002 	blmi	b4b4 <__Stack_Size+0xacb4>
    b4a8:	0d000004 	stceq	0, cr0, [r0, #-16]
    b4ac:	0000005e 	andeq	r0, r0, lr, asr r0
    b4b0:	3c040b00 	stccc	11, cr0, [r4], {-0}
    b4b4:	0c000004 	stceq	0, cr0, [r0], {4}
    b4b8:	0000020d 	andeq	r0, r0, sp, lsl #4
    b4bc:	00000465 	andeq	r0, r0, r5, ror #8
    b4c0:	00005e0d 	andeq	r5, r0, sp, lsl #28
    b4c4:	005e0d00 	subseq	r0, lr, r0, lsl #26
    b4c8:	0b000000 	bleq	b4d0 <__Stack_Size+0xacd0>
    b4cc:	00045104 	andeq	r5, r4, r4, lsl #2
    b4d0:	03aa0400 			; <UNDEFINED> instruction: 0x03aa0400
    b4d4:	b5040000 	strlt	r0, [r4, #-0]
    b4d8:	0000038c 	andeq	r0, r0, ip, lsl #7
    b4dc:	00008a09 	andeq	r8, r0, r9, lsl #20
    b4e0:	b7042400 	strlt	r2, [r4, -r0, lsl #8]
    b4e4:	000004ef 	andeq	r0, r0, pc, ror #9
    b4e8:	0005a00a 	andeq	sl, r5, sl
    b4ec:	36b90400 	ldrtcc	r0, [r9], r0, lsl #8
    b4f0:	00000004 	andeq	r0, r0, r4
    b4f4:	00041d0a 	andeq	r1, r4, sl, lsl #26
    b4f8:	36ba0400 	ldrtcc	r0, [sl], r0, lsl #8
    b4fc:	04000004 	streq	r0, [r0], #-4
    b500:	00029b0a 	andeq	r9, r2, sl, lsl #22
    b504:	36bb0400 	ldrtcc	r0, [fp], r0, lsl #8
    b508:	08000004 	stmdaeq	r0, {r2}
    b50c:	0004330a 	andeq	r3, r4, sl, lsl #6
    b510:	36bc0400 	ldrtcc	r0, [ip], r0, lsl #8
    b514:	0c000004 	stceq	0, cr0, [r0], {4}
    b518:	0000a20a 	andeq	sl, r0, sl, lsl #4
    b51c:	36bd0400 	ldrtcc	r0, [sp], r0, lsl #8
    b520:	10000004 	andne	r0, r0, r4
    b524:	0007410a 	andeq	r4, r7, sl, lsl #2
    b528:	36be0400 	ldrtcc	r0, [lr], r0, lsl #8
    b52c:	14000004 	strne	r0, [r0], #-4
    b530:	0008f80a 	andeq	pc, r8, sl, lsl #16
    b534:	36bf0400 	ldrtcc	r0, [pc], r0, lsl #8
    b538:	18000004 	stmdane	r0, {r2}
    b53c:	0001910a 	andeq	r9, r1, sl, lsl #2
    b540:	36c00400 	strbcc	r0, [r0], r0, lsl #8
    b544:	1c000004 	stcne	0, cr0, [r0], {4}
    b548:	0002ad0a 	andeq	sl, r2, sl, lsl #26
    b54c:	36c10400 	strbcc	r0, [r1], r0, lsl #8
    b550:	20000004 	andcs	r0, r0, r4
    b554:	008b0400 	addeq	r0, fp, r0, lsl #8
    b558:	c3040000 	movwgt	r0, #16384	; 0x4000
    b55c:	00000476 	andeq	r0, r0, r6, ror r4
    b560:	0023e113 	eoreq	lr, r3, r3, lsl r1
    b564:	d7350100 	ldrle	r0, [r5, -r0, lsl #2]!
    b568:	50000001 	andpl	r0, r0, r1
    b56c:	24080064 	strcs	r0, [r8], #-100	; 0x64
    b570:	01000000 	mrseq	r0, (UNDEF: 0)
    b574:	0005239c 	muleq	r5, ip, r3
    b578:	0de81400 	cfstrdeq	mvd1, [r8]
    b57c:	35010000 	strcc	r0, [r1, #-0]
    b580:	0000004c 	andeq	r0, r0, ip, asr #32
    b584:	00009862 	andeq	r9, r0, r2, ror #16
    b588:	239c1300 	orrscs	r1, ip, #0, 6
    b58c:	63010000 	movwvs	r0, #4096	; 0x1000
    b590:	000001d7 	ldrdeq	r0, [r0], -r7
    b594:	08006474 	stmdaeq	r0, {r2, r4, r5, r6, sl, sp, lr}
    b598:	00000024 	andeq	r0, r0, r4, lsr #32
    b59c:	054c9c01 	strbeq	r9, [ip, #-3073]	; 0xc01
    b5a0:	e8140000 	ldmda	r4, {}	; <UNPREDICTABLE>
    b5a4:	0100000d 	tsteq	r0, sp
    b5a8:	00004c63 	andeq	r4, r0, r3, ror #24
    b5ac:	00988300 	addseq	r8, r8, r0, lsl #6
    b5b0:	b5130000 	ldrlt	r0, [r3, #-0]
    b5b4:	01000024 	tsteq	r0, r4, lsr #32
    b5b8:	0001d79b 	muleq	r1, fp, r7
    b5bc:	00649800 	rsbeq	r9, r4, r0, lsl #16
    b5c0:	00009008 	andeq	r9, r0, r8
    b5c4:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
    b5c8:	14000005 	strne	r0, [r0], #-5
    b5cc:	00000de8 	andeq	r0, r0, r8, ror #27
    b5d0:	004c9b01 	subeq	r9, ip, r1, lsl #22
    b5d4:	98a40000 	stmials	r4!, {}	; <UNPREDICTABLE>
    b5d8:	b8150000 	ldmdalt	r5, {}	; <UNPREDICTABLE>
    b5dc:	1c080064 	stcne	0, cr0, [r8], {100}	; 0x64
    b5e0:	91000000 	mrsls	r0, (UNDEF: 0)
    b5e4:	16000005 	strne	r0, [r0], -r5
    b5e8:	00000810 	andeq	r0, r0, r0, lsl r8
    b5ec:	005ea901 	subseq	sl, lr, r1, lsl #18
    b5f0:	98c50000 	stmials	r5, {}^	; <UNPREDICTABLE>
    b5f4:	17000000 	strne	r0, [r0, -r0]
    b5f8:	080064dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, sp, lr}
    b5fc:	00000030 	andeq	r0, r0, r0, lsr r0
    b600:	00250716 	eoreq	r0, r5, r6, lsl r7
    b604:	5ec30100 	polpls	f0, f3, f0
    b608:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
    b60c:	18000098 	stmdane	r0, {r3, r4, r7}
    b610:	00002523 	andeq	r2, r0, r3, lsr #10
    b614:	005ec401 	subseq	ip, lr, r1, lsl #8
    b618:	00000000 	andeq	r0, r0, r0
    b61c:	00223019 	eoreq	r3, r2, r9, lsl r0
    b620:	01e00100 	mvneq	r0, r0, lsl #2
    b624:	08006528 	stmdaeq	r0, {r3, r5, r8, sl, sp, lr}
    b628:	000000a8 	andeq	r0, r0, r8, lsr #1
    b62c:	067b9c01 	ldrbteq	r9, [fp], -r1, lsl #24
    b630:	f31a0000 	vhadd.u16	d0, d10, d0
    b634:	01000024 	tsteq	r0, r4, lsr #32
    b638:	067b01e2 	ldrbteq	r0, [fp], -r2, ror #3
    b63c:	990a0000 	stmdbls	sl, {}	; <UNPREDICTABLE>
    b640:	a81a0000 	ldmdage	sl, {}	; <UNPREDICTABLE>
    b644:	01000024 	tsteq	r0, r4, lsr #32
    b648:	003a01e3 	eorseq	r0, sl, r3, ror #3
    b64c:	991f0000 	ldmdbls	pc, {}	; <UNPREDICTABLE>
    b650:	ef1a0000 	svc	0x001a0000
    b654:	01000006 	tsteq	r0, r6
    b658:	003a01e4 	eorseq	r0, sl, r4, ror #3
    b65c:	99630000 	stmdbls	r3!, {}^	; <UNPREDICTABLE>
    b660:	021a0000 	andseq	r0, sl, #0
    b664:	01000022 	tsteq	r0, r2, lsr #32
    b668:	01d701e6 	bicseq	r0, r7, r6, ror #3
    b66c:	99ae0000 	stmibls	lr!, {}	; <UNPREDICTABLE>
    b670:	e81a0000 	ldmda	sl, {}	; <UNPREDICTABLE>
    b674:	0100000d 	tsteq	r0, sp
    b678:	003a01e7 	eorseq	r0, sl, r7, ror #3
    b67c:	99cc0000 	stmibls	ip, {}^	; <UNPREDICTABLE>
    b680:	f11b0000 			; <UNDEFINED> instruction: 0xf11b0000
    b684:	01000022 	tsteq	r0, r2, lsr #32
    b688:	65ac0210 	strvs	r0, [ip, #528]!	; 0x210
    b68c:	7a1c0800 	bvc	70d694 <__Stack_Size+0x70ce94>
    b690:	38080065 	stmdacc	r8, {r0, r2, r5, r6}
    b694:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    b698:	75025001 	strvc	r5, [r2, #-1]
    b69c:	821e0000 	andshi	r0, lr, #0
    b6a0:	1c080065 	stcne	0, cr0, [r8], {101}	; 0x65
    b6a4:	4b00000d 	blmi	b6e0 <__Stack_Size+0xaee0>
    b6a8:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    b6ac:	30015001 	andcc	r5, r1, r1
    b6b0:	658c1e00 	strvs	r1, [ip, #3584]	; 0xe00
    b6b4:	0d320800 	ldceq	8, cr0, [r2, #-0]
    b6b8:	06650000 	strbteq	r0, [r5], -r0
    b6bc:	011d0000 	tsteq	sp, r0
    b6c0:	00750252 	rsbseq	r0, r5, r2, asr r2
    b6c4:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    b6c8:	1f000079 	svcne	0x00000079
    b6cc:	08006594 	stmdaeq	r0, {r2, r4, r7, r8, sl, sp, lr}
    b6d0:	00000d4d 	andeq	r0, r0, sp, asr #26
    b6d4:	0251011d 	subseq	r0, r1, #1073741831	; 0x40000007
    b6d8:	011d0075 	tsteq	sp, r5, ror r0
    b6dc:	00300150 	eorseq	r0, r0, r0, asr r1
    b6e0:	6a040b00 	bvs	10e2e8 <__Stack_Size+0x10dae8>
    b6e4:	20000002 	andcs	r0, r0, r2
    b6e8:	00002216 	andeq	r2, r0, r6, lsl r2
    b6ec:	020d4a01 	andeq	r4, sp, #4096	; 0x1000
    b6f0:	65d00000 	ldrbvs	r0, [r0]
    b6f4:	00380800 	eorseq	r0, r8, r0, lsl #16
    b6f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    b6fc:	0022db13 	eoreq	sp, r2, r3, lsl fp
    b700:	0d780100 	ldfeqe	f0, [r8, #-0]
    b704:	08000002 	stmdaeq	r0, {r1}
    b708:	48080066 	stmdami	r8, {r1, r2, r5, r6}
    b70c:	01000000 	mrseq	r0, (UNDEF: 0)
    b710:	0006be9c 	muleq	r6, ip, lr
    b714:	65522100 	ldrbvs	r2, [r2, #-256]	; 0x100
    b718:	0d7a0100 	ldfeqe	f0, [sl, #-0]
    b71c:	0a000002 	beq	b72c <__Stack_Size+0xaf2c>
    b720:	0000009a 	muleq	r0, sl, r0
    b724:	0023fb13 	eoreq	pc, r3, r3, lsl fp	; <UNPREDICTABLE>
    b728:	0de90100 	stfeqe	f0, [r9]
    b72c:	50000002 	andpl	r0, r0, r2
    b730:	d0080066 	andle	r0, r8, r6, rrx
    b734:	01000000 	mrseq	r0, (UNDEF: 0)
    b738:	0007969c 	muleq	r7, ip, r6
    b73c:	22591600 	subscs	r1, r9, #0, 12
    b740:	eb010000 	bl	4b748 <__Stack_Size+0x4af48>
    b744:	0000003a 	andeq	r0, r0, sl, lsr r0
    b748:	00009a28 	andeq	r9, r0, r8, lsr #20
    b74c:	0014d816 	andseq	sp, r4, r6, lsl r8
    b750:	3aec0100 	bcc	ffb0bb58 <BootRAM+0xea7c2f9>
    b754:	60000000 	andvs	r0, r0, r0
    b758:	1700009a 			; <UNDEFINED> instruction: 0x1700009a
    b75c:	0800666c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, sp, lr}
    b760:	0000009e 	muleq	r0, lr, r0
    b764:	00236b18 	eoreq	r6, r3, r8, lsl fp
    b768:	96f60100 	ldrbtls	r0, [r6], r0, lsl #2
    b76c:	16000007 	strne	r0, [r0], -r7
    b770:	00002507 	andeq	r2, r0, r7, lsl #10
    b774:	003af701 	eorseq	pc, sl, r1, lsl #14
    b778:	9a890000 	bls	fe24b780 <BootRAM+0xd1bbf21>
    b77c:	23160000 	tstcs	r6, #0
    b780:	01000025 	tsteq	r0, r5, lsr #32
    b784:	00003af8 	strdeq	r3, [r0], -r8
    b788:	009ab200 	addseq	fp, sl, r0, lsl #4
    b78c:	45722100 	ldrbmi	r2, [r2, #-256]!	; 0x100
    b790:	f9010050 			; <UNDEFINED> instruction: 0xf9010050
    b794:	0000003a 	andeq	r0, r0, sl, lsr r0
    b798:	00009a89 	andeq	r9, r0, r9, lsl #21
    b79c:	0066ec15 	rsbeq	lr, r6, r5, lsl ip
    b7a0:	00001208 	andeq	r1, r0, r8, lsl #4
    b7a4:	00075400 	andeq	r5, r7, r0, lsl #8
    b7a8:	075e1a00 	ldrbeq	r1, [lr, -r0, lsl #20]
    b7ac:	2f010000 	svccs	0x00010000
    b7b0:	00004c01 	andeq	r4, r0, r1, lsl #24
    b7b4:	009aca00 	addseq	ip, sl, r0, lsl #20
    b7b8:	c61e0000 	ldrgt	r0, [lr], -r0
    b7bc:	64080066 	strvs	r0, [r8], #-102	; 0x66
    b7c0:	6800000d 	stmdavs	r0, {r0, r2, r3}
    b7c4:	1d000007 	stcne	0, cr0, [r0, #-28]	; 0xffffffe4
    b7c8:	74025001 	strvc	r5, [r2], #-1
    b7cc:	ce1e0000 	cdpgt	0, 1, cr0, cr14, cr0, {0}
    b7d0:	76080066 	strvc	r0, [r8], -r6, rrx
    b7d4:	8200000d 	andhi	r0, r0, #13
    b7d8:	1d000007 	stcne	0, cr0, [r0, #-28]	; 0xffffffe4
    b7dc:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    b7e0:	50011d30 	andpl	r1, r1, r0, lsr sp
    b7e4:	00007402 	andeq	r7, r0, r2, lsl #8
    b7e8:	0066e622 	rsbeq	lr, r6, r2, lsr #12
    b7ec:	000d8d08 	andeq	r8, sp, r8, lsl #26
    b7f0:	66ec2200 	strbtvs	r2, [ip], r0, lsl #4
    b7f4:	0da40800 	stceq	8, cr0, [r4]
    b7f8:	00000000 	andeq	r0, r0, r0
    b7fc:	029a040b 	addseq	r0, sl, #184549376	; 0xb000000
    b800:	21230000 	teqcs	r3, r0
    b804:	01000023 	tsteq	r0, r3, lsr #32
    b808:	020d0142 	andeq	r0, sp, #-2147483632	; 0x80000010
    b80c:	67200000 	strvs	r0, [r0, -r0]!
    b810:	00840800 	addeq	r0, r4, r0, lsl #16
    b814:	9c010000 	stcls	0, cr0, [r1], {-0}
    b818:	0000082b 	andeq	r0, r0, fp, lsr #16
    b81c:	0025231a 	eoreq	r2, r5, sl, lsl r3
    b820:	01440100 	mrseq	r0, (UNDEF: 84)
    b824:	0000003a 	andeq	r0, r0, sl, lsr r0
    b828:	00009af8 	strdeq	r9, [r0], -r8
    b82c:	0025071a 	eoreq	r0, r5, sl, lsl r7
    b830:	01450100 	mrseq	r0, (UNDEF: 85)
    b834:	0000003a 	andeq	r0, r0, sl, lsr r0
    b838:	00009b20 	andeq	r9, r0, r0, lsr #22
    b83c:	50457224 	subpl	r7, r5, r4, lsr #4
    b840:	01460100 	mrseq	r0, (UNDEF: 86)
    b844:	0000003a 	andeq	r0, r0, sl, lsr r0
    b848:	00009b20 	andeq	r9, r0, r0, lsr #22
    b84c:	0014d81a 	andseq	sp, r4, sl, lsl r8
    b850:	01470100 	mrseq	r0, (UNDEF: 87)
    b854:	0000003a 	andeq	r0, r0, sl, lsr r0
    b858:	00009b55 	andeq	r9, r0, r5, asr fp
    b85c:	000e5825 	andeq	r5, lr, r5, lsr #16
    b860:	00081000 	andeq	r1, r8, r0
    b864:	075e1a00 	ldrbeq	r1, [lr, -r0, lsl #20]
    b868:	63010000 	movwvs	r0, #4096	; 0x1000
    b86c:	00004c01 	andeq	r4, r0, r1, lsl #24
    b870:	009b7300 	addseq	r7, fp, r0, lsl #6
    b874:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
    b878:	10080067 	andne	r0, r8, r7, rrx
    b87c:	1a000000 	bne	b884 <__Stack_Size+0xb084>
    b880:	0000075e 	andeq	r0, r0, lr, asr r7
    b884:	4c016901 	stcmi	9, cr6, [r1], {1}
    b888:	9b000000 	blls	b890 <__Stack_Size+0xb090>
    b88c:	0000009b 	muleq	r0, fp, r0
    b890:	23702600 	cmncs	r0, #0, 12
    b894:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    b898:	00020d01 	andeq	r0, r2, r1, lsl #26
    b89c:	0067a400 	rsbeq	sl, r7, r0, lsl #8
    b8a0:	00002408 	andeq	r2, r0, r8, lsl #8
    b8a4:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
    b8a8:	00000264 	andeq	r0, r0, r4, ror #4
    b8ac:	d7019201 	strle	r9, [r1, -r1, lsl #4]
    b8b0:	c8000001 	stmdagt	r0, {r0}
    b8b4:	1c080067 	stcne	0, cr0, [r8], {103}	; 0x67
    b8b8:	01000000 	mrseq	r0, (UNDEF: 0)
    b8bc:	00088c9c 	muleq	r8, ip, ip
    b8c0:	0de82800 	stcleq	8, cr2, [r8]
    b8c4:	92010000 	andls	r0, r1, #0
    b8c8:	00004c01 	andeq	r4, r0, r1, lsl #24
    b8cc:	009bb400 	addseq	fp, fp, r0, lsl #8
    b8d0:	238a2800 	orrcs	r2, sl, #0, 16
    b8d4:	92010000 	andls	r0, r1, #0
    b8d8:	00088c01 	andeq	r8, r8, r1, lsl #24
    b8dc:	009bd500 	addseq	sp, fp, r0, lsl #10
    b8e0:	08711a00 	ldmdaeq	r1!, {r9, fp, ip}^
    b8e4:	94010000 	strls	r0, [r1], #-0
    b8e8:	00003a01 	andeq	r3, r0, r1, lsl #20
    b8ec:	009c0100 	addseq	r0, ip, r0, lsl #2
    b8f0:	040b0000 	streq	r0, [fp], #-0
    b8f4:	000001dd 	ldrdeq	r0, [r0], -sp
    b8f8:	0021f427 	eoreq	pc, r1, r7, lsr #8
    b8fc:	03c90100 	biceq	r0, r9, #0, 2
    b900:	0000005e 	andeq	r0, r0, lr, asr r0
    b904:	080067e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, sp, lr}
    b908:	00000040 	andeq	r0, r0, r0, asr #32
    b90c:	08bc9c01 	ldmeq	ip!, {r0, sl, fp, ip, pc}
    b910:	f21f0000 	vhadd.s16	d0, d15, d0
    b914:	8d080067 	stchi	0, cr0, [r8, #-412]	; 0xfffffe64
    b918:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
    b91c:	30015001 	andcc	r5, r1, r1
    b920:	67290000 	strvs	r0, [r9, -r0]!
    b924:	01000022 	tsteq	r0, r2, lsr #32
    b928:	f601021b 			; <UNDEFINED> instruction: 0xf601021b
    b92c:	2a000008 	bcs	b954 <__Stack_Size+0xb154>
    b930:	000021ed 	andeq	r2, r0, sp, ror #3
    b934:	0d021d01 	stceq	13, cr1, [r2, #-4]
    b938:	2a000002 	bcs	b948 <__Stack_Size+0xb148>
    b93c:	00002309 	andeq	r2, r0, r9, lsl #6
    b940:	3a021e01 	bcc	9314c <__Stack_Size+0x9294c>
    b944:	2a000000 	bcs	b94c <__Stack_Size+0xb14c>
    b948:	000006ef 	andeq	r0, r0, pc, ror #13
    b94c:	3a021f01 	bcc	93558 <__Stack_Size+0x92d58>
    b950:	2b000000 	blcs	b958 <__Stack_Size+0xb158>
    b954:	00002262 	andeq	r2, r0, r2, ror #4
    b958:	00028b01 	andeq	r8, r2, r1, lsl #22
    b95c:	00226929 	eoreq	r6, r2, r9, lsr #18
    b960:	02970100 	addseq	r0, r7, #0, 2
    b964:	00097801 	andeq	r7, r9, r1, lsl #16
    b968:	060e2a00 	streq	r2, [lr], -r0, lsl #20
    b96c:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    b970:	00026402 	andeq	r6, r2, r2, lsl #8
    b974:	21ed2a00 	mvncs	r2, r0, lsl #20
    b978:	9a010000 	bls	4b980 <__Stack_Size+0x4b180>
    b97c:	00020d02 	andeq	r0, r2, r2, lsl #26
    b980:	25522a00 	ldrbcs	r2, [r2, #-2560]	; 0xa00
    b984:	9b010000 	blls	4b98c <__Stack_Size+0x4b18c>
    b988:	00003a02 	andeq	r3, r0, r2, lsl #20
    b98c:	25072a00 	strcs	r2, [r7, #-2560]	; 0xa00
    b990:	9d010000 	stcls	0, cr0, [r1, #-0]
    b994:	00003a02 	andeq	r3, r0, r2, lsl #20
    b998:	220d2a00 	andcs	r2, sp, #0, 20
    b99c:	9d010000 	stcls	0, cr0, [r1, #-0]
    b9a0:	00003a02 	andeq	r3, r0, r2, lsl #20
    b9a4:	08712a00 	ldmdaeq	r1!, {r9, fp, sp}^
    b9a8:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    b9ac:	00003a02 	andeq	r3, r0, r2, lsl #20
    b9b0:	14d82a00 	ldrbne	r2, [r8], #2560	; 0xa00
    b9b4:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    b9b8:	00003a02 	andeq	r3, r0, r2, lsl #20
    b9bc:	09692c00 	stmdbeq	r9!, {sl, fp, sp}^
    b9c0:	752a0000 	strvc	r0, [sl, #-0]!
    b9c4:	01000022 	tsteq	r0, r2, lsr #32
    b9c8:	005e02a9 	subseq	r0, lr, r9, lsr #5
    b9cc:	2d000000 	stccs	0, cr0, [r0, #-0]
    b9d0:	0001db2a 	andeq	sp, r1, sl, lsr #22
    b9d4:	03250100 	teqeq	r5, #0, 2
    b9d8:	0000006f 	andeq	r0, r0, pc, rrx
    b9dc:	2b230000 	blcs	8cb9e4 <__Stack_Size+0x8cb1e4>
    b9e0:	01000021 	tsteq	r0, r1, lsr #32
    b9e4:	005e034c 	subseq	r0, lr, ip, asr #6
    b9e8:	68240000 	stmdavs	r4!, {}	; <UNPREDICTABLE>
    b9ec:	02dc0800 	sbcseq	r0, ip, #0, 16
    b9f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    b9f4:	00000ae6 	andeq	r0, r0, r6, ror #21
    b9f8:	4f01042e 	svcmi	0x0001042e
    b9fc:	0009b003 	andeq	fp, r9, r3
    ba00:	00622f00 	rsbeq	r2, r2, r0, lsl #30
    ba04:	d7035101 	strle	r5, [r3, -r1, lsl #2]
    ba08:	2f000001 	svccs	0x00000001
    ba0c:	52010077 	andpl	r0, r1, #119	; 0x77
    ba10:	000ae603 	andeq	lr, sl, r3, lsl #12
    ba14:	ee1a0000 	cdp	0, 1, cr0, cr10, cr0, {0}
    ba18:	01000024 	tsteq	r0, r4, lsr #32
    ba1c:	09920353 	ldmibeq	r2, {r0, r1, r4, r6, r8, r9}
    ba20:	9c320000 	ldcls	0, cr0, [r2], #-0
    ba24:	bc300000 	ldclt	0, cr0, [r0], #-0
    ba28:	6a000008 	bvs	ba50 <__Stack_Size+0xb250>
    ba2c:	c4080068 	strgt	r0, [r8], #-104	; 0x68
    ba30:	01000000 	mrseq	r0, (UNDEF: 0)
    ba34:	0a400367 	beq	100c7d8 <__Stack_Size+0x100bfd8>
    ba38:	6a170000 	bvs	5cba40 <__Stack_Size+0x5cb240>
    ba3c:	c4080068 	strgt	r0, [r8], #-104	; 0x68
    ba40:	31000000 	mrscc	r0, (UNDEF: 0)
    ba44:	000008c9 	andeq	r0, r0, r9, asr #17
    ba48:	00009c55 	andeq	r9, r0, r5, asr ip
    ba4c:	0008d531 	andeq	sp, r8, r1, lsr r5
    ba50:	009cfe00 	addseq	pc, ip, r0, lsl #28
    ba54:	08e13100 	stmiaeq	r1!, {r8, ip, sp}^
    ba58:	9d110000 	ldcls	0, cr0, [r1, #-0]
    ba5c:	ed320000 	ldc	0, cr0, [r2, #-0]
    ba60:	28000008 	stmdacs	r0, {r3}
    ba64:	22080069 	andcs	r0, r8, #105	; 0x69
    ba68:	0800687a 	stmdaeq	r0, {r1, r3, r4, r5, r6, fp, sp, lr}
    ba6c:	00000681 	andeq	r0, r0, r1, lsl #13
    ba70:	0068b41c 	rsbeq	fp, r8, ip, lsl r4
    ba74:	000a1a08 	andeq	r1, sl, r8, lsl #20
    ba78:	50011d00 	andpl	r1, r1, r0, lsl #26
    ba7c:	00007402 	andeq	r7, r0, r2, lsl #8
    ba80:	0068ca22 	rsbeq	ip, r8, r2, lsr #20
    ba84:	00082b08 	andeq	r2, r8, r8, lsl #22
    ba88:	68e62200 	stmiavs	r6!, {r9, sp}^
    ba8c:	06be0800 	ldrteq	r0, [lr], r0, lsl #16
    ba90:	f4220000 	vld4.8	{d0-d3}, [r2], r0
    ba94:	96080068 	strls	r0, [r8], -r8, rrx
    ba98:	22000006 	andcs	r0, r0, #6
    ba9c:	08006906 	stmdaeq	r0, {r1, r2, r8, fp, sp, lr}
    baa0:	0000079c 	muleq	r0, ip, r7
    baa4:	f6330000 			; <UNDEFINED> instruction: 0xf6330000
    baa8:	2e000008 	cdpcs	0, 0, cr0, cr0, cr8, {0}
    baac:	78080069 	stmdavc	r8, {r0, r3, r5, r6}
    bab0:	0100000e 	tsteq	r0, lr
    bab4:	0adc036c 	beq	ff70c86c <BootRAM+0xe67d00d>
    bab8:	78340000 	ldmdavc	r4!, {}	; <UNPREDICTABLE>
    babc:	3100000e 	tstcc	r0, lr
    bac0:	00000903 	andeq	r0, r0, r3, lsl #18
    bac4:	00009d30 	andeq	r9, r0, r0, lsr sp
    bac8:	00090f31 	andeq	r0, r9, r1, lsr pc
    bacc:	009dc700 	addseq	ip, sp, r0, lsl #14
    bad0:	091b3100 	ldmdbeq	fp, {r8, ip, sp}
    bad4:	9e070000 	cdpls	0, 0, cr0, cr7, cr0, {0}
    bad8:	27310000 	ldrcs	r0, [r1, -r0]!
    badc:	30000009 	andcc	r0, r0, r9
    bae0:	3100009e 	swpcc	r0, lr, [r0]	; <UNPREDICTABLE>
    bae4:	00000933 	andeq	r0, r0, r3, lsr r9
    bae8:	00009e43 	andeq	r9, r0, r3, asr #28
    baec:	00093f31 	andeq	r3, r9, r1, lsr pc
    baf0:	009e5e00 	addseq	r5, lr, r0, lsl #28
    baf4:	094b3100 	stmdbeq	fp, {r8, ip, sp}^
    baf8:	9e7e0000 	cdpls	0, 7, cr0, cr14, cr0, {0}
    bafc:	38150000 	ldmdacc	r5, {}	; <UNPREDICTABLE>
    bb00:	2c080069 	stccs	0, cr0, [r8], {105}	; 0x69
    bb04:	af000000 	svcge	0x00000000
    bb08:	3100000a 	tstcc	r0, sl
    bb0c:	0000095c 	andeq	r0, r0, ip, asr r9
    bb10:	00009e91 	muleq	r0, r1, lr
    bb14:	6a6c1500 	bvs	1b10f1c <__Stack_Size+0x1b1071c>
    bb18:	00600800 	rsbeq	r0, r0, r0, lsl #16
    bb1c:	0ace0000 	beq	ff38bb24 <BootRAM+0xe2fc2c5>
    bb20:	6a350000 	bvs	d4bb28 <__Stack_Size+0xd4b328>
    bb24:	02000009 	andeq	r0, r0, #9
    bb28:	ca226c91 	bgt	8a6d74 <__Stack_Size+0x8a6574>
    bb2c:	b608006a 	strlt	r0, [r8], -sl, rrx
    bb30:	00000005 	andeq	r0, r0, r5
    bb34:	006a2e36 	rsbeq	r2, sl, r6, lsr lr
    bb38:	50011d08 	andpl	r1, r1, r8, lsl #26
    bb3c:	00007402 	andeq	r7, r0, r2, lsl #8
    bb40:	dc220000 	stcle	0, cr0, [r2], #-0
    bb44:	9208006a 	andls	r0, r8, #106	; 0x6a
    bb48:	00000008 	andeq	r0, r0, r8
    bb4c:	004c040b 	subeq	r0, ip, fp, lsl #8
    bb50:	3a290000 	bcc	a4bb58 <__Stack_Size+0xa4b358>
    bb54:	01000025 	tsteq	r0, r5, lsr #32
    bb58:	2c0101a7 	stfcss	f0, [r1], {167}	; 0xa7
    bb5c:	2a00000b 	bcs	bb90 <__Stack_Size+0xb390>
    bb60:	000024f3 	strdeq	r2, [r0], -r3
    bb64:	7b01a901 	blvc	75f70 <__Stack_Size+0x75770>
    bb68:	2a000006 	bcs	bb88 <__Stack_Size+0xb388>
    bb6c:	000022b5 			; <UNDEFINED> instruction: 0x000022b5
    bb70:	3a01aa01 	bcc	7637c <__Stack_Size+0x75b7c>
    bb74:	2d000000 	stccs	0, cr0, [r0, #-0]
    bb78:	0022062a 	eoreq	r0, r2, sl, lsr #12
    bb7c:	01b00100 	lslseq	r0, r0, #2
    bb80:	000001d7 	ldrdeq	r0, [r0], -r7
    bb84:	000de82a 	andeq	lr, sp, sl, lsr #16
    bb88:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    bb8c:	0000003a 	andeq	r0, r0, sl, lsr r0
    bb90:	75230000 	strvc	r0, [r3, #-0]!
    bb94:	01000021 	tsteq	r0, r1, lsr #32
    bb98:	005e03a0 	subseq	r0, lr, r0, lsr #7
    bb9c:	6b000000 	blvs	bba4 <__Stack_Size+0xb3a4>
    bba0:	00c80800 	sbceq	r0, r8, r0, lsl #16
    bba4:	9c010000 	stcls	0, cr0, [r1], {-0}
    bba8:	00000bfe 	strdeq	r0, [r0], -lr
    bbac:	0006ef1a 	andeq	lr, r6, sl, lsl pc
    bbb0:	03a20100 			; <UNDEFINED> instruction: 0x03a20100
    bbb4:	0000003a 	andeq	r0, r0, sl, lsr r0
    bbb8:	00009ebb 			; <UNDEFINED> instruction: 0x00009ebb
    bbbc:	000aec30 	andeq	lr, sl, r0, lsr ip
    bbc0:	006b1000 	rsbeq	r1, fp, r0
    bbc4:	00007e08 	andeq	r7, r0, r8, lsl #28
    bbc8:	03a60100 			; <UNDEFINED> instruction: 0x03a60100
    bbcc:	00000bf4 	strdeq	r0, [r0], -r4
    bbd0:	006b1017 	rsbeq	r1, fp, r7, lsl r0
    bbd4:	00007e08 	andeq	r7, r0, r8, lsl #28
    bbd8:	0af93100 	beq	ffe57fe0 <BootRAM+0xedc8781>
    bbdc:	9f080000 	svcls	0x00080000
    bbe0:	05310000 	ldreq	r0, [r1, #-0]!
    bbe4:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    bbe8:	1500009f 	strne	r0, [r0, #-159]	; 0x9f
    bbec:	08006b18 	stmdaeq	r0, {r3, r4, r8, r9, fp, sp, lr}
    bbf0:	0000002a 	andeq	r0, r0, sl, lsr #32
    bbf4:	00000bde 	ldrdeq	r0, [r0], -lr
    bbf8:	000b1231 	andeq	r1, fp, r1, lsr r2
    bbfc:	009f3000 	addseq	r3, pc, r0
    bc00:	0b1e3100 	bleq	798008 <__Stack_Size+0x797808>
    bc04:	9f4e0000 	svcls	0x004e0000
    bc08:	241c0000 	ldrcs	r0, [ip], #-0
    bc0c:	b408006b 	strlt	r0, [r8], #-107	; 0x6b
    bc10:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    bc14:	76025001 	strvc	r5, [r2], -r1
    bc18:	381e0000 	ldmdacc	lr, {}	; <UNPREDICTABLE>
    bc1c:	b608006b 	strlt	r0, [r8], -fp, rrx
    bc20:	c700000d 	strgt	r0, [r0, -sp]
    bc24:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    bc28:	30015001 	andcc	r5, r1, r1
    bc2c:	6b421f00 	blvs	1093834 <__Stack_Size+0x1093034>
    bc30:	0dcc0800 	stcleq	8, cr0, [ip]
    bc34:	011d0000 	tsteq	sp, r0
    bc38:	00760252 	rsbseq	r0, r6, r2, asr r2
    bc3c:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    bc40:	00000077 	andeq	r0, r0, r7, ror r0
    bc44:	006b561f 	rsbeq	r5, fp, pc, lsl r6
    bc48:	000d4d08 	andeq	r4, sp, r8, lsl #26
    bc4c:	51011d00 	tstpl	r1, r0, lsl #26
    bc50:	011d3001 	tsteq	sp, r1
    bc54:	00300150 	eorseq	r0, r0, r0, asr r1
    bc58:	ae370000 	cdpge	0, 3, cr0, cr7, cr0, {0}
    bc5c:	9208006b 	andls	r0, r8, #107	; 0x6b
    bc60:	00000008 	andeq	r0, r0, r8
    bc64:	0002b238 	andeq	fp, r2, r8, lsr r2
    bc68:	03dd0100 	bicseq	r0, sp, #0, 2
    bc6c:	08006bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, sp, lr}
    bc70:	00000038 	andeq	r0, r0, r8, lsr r0
    bc74:	0c439c01 	mcrreq	12, 0, r9, r3, cr1
    bc78:	56390000 	ldrtpl	r0, [r9], -r0
    bc7c:	01006c61 	tsteq	r0, r1, ror #24
    bc80:	005e03dd 	ldrsbeq	r0, [lr], #-61	; 0xffffffc3
    bc84:	9f810000 	svcls	0x00810000
    bc88:	69240000 	stmdbvs	r4!, {}	; <UNPREDICTABLE>
    bc8c:	03df0100 	bicseq	r0, pc, #0, 2
    bc90:	0000003a 	andeq	r0, r0, sl, lsr r0
    bc94:	00009fa2 	andeq	r9, r0, r2, lsr #31
    bc98:	50456e24 	subpl	r6, r5, r4, lsr #28
    bc9c:	03e00100 	mvneq	r0, #0, 2
    bca0:	0000003a 	andeq	r0, r0, sl, lsr r0
    bca4:	00009fc1 	andeq	r9, r0, r1, asr #31
    bca8:	21692300 	cmncs	r9, r0, lsl #6
    bcac:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    bcb0:	00005e03 	andeq	r5, r0, r3, lsl #28
    bcb4:	006c0000 	rsbeq	r0, ip, r0
    bcb8:	00005c08 	andeq	r5, r0, r8, lsl #24
    bcbc:	899c0100 	ldmibhi	ip, {r8}
    bcc0:	1a00000c 	bne	bcf8 <__Stack_Size+0xb4f8>
    bcc4:	000006ef 	andeq	r0, r0, pc, ror #13
    bcc8:	3a037a01 	bcc	ea4d4 <__Stack_Size+0xe9cd4>
    bccc:	d4000000 	strle	r0, [r0], #-0
    bcd0:	2200009f 	andcs	r0, r0, #159	; 0x9f
    bcd4:	08006c14 	stmdaeq	r0, {r2, r4, sl, fp, sp, lr}
    bcd8:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    bcdc:	006c3022 	rsbeq	r3, ip, r2, lsr #32
    bce0:	000bfe08 	andeq	pc, fp, r8, lsl #28
    bce4:	6c4e3700 	mcrrvs	7, 0, r3, lr, cr0
    bce8:	08920800 	ldmeq	r2, {fp}
    bcec:	3a000000 	bcc	bcf4 <__Stack_Size+0xb4f4>
    bcf0:	000022cf 	andeq	r2, r0, pc, asr #5
    bcf4:	0003f101 	andeq	pc, r3, r1, lsl #2
    bcf8:	02000000 	andeq	r0, r0, #0
    bcfc:	01000000 	mrseq	r0, (UNDEF: 0)
    bd00:	02eb3b9c 	rsceq	r3, fp, #156, 22	; 0x27000
    bd04:	ec040000 	stc	0, cr0, [r4], {-0}
    bd08:	0000046b 	andeq	r0, r0, fp, ror #8
    bd0c:	00021a3b 	andeq	r1, r2, fp, lsr sl
    bd10:	9aee0400 	bls	ffb8cd18 <BootRAM+0xeafd4b9>
    bd14:	3b000002 	blcc	bd24 <__Stack_Size+0xb524>
    bd18:	0000213a 	andeq	r2, r0, sl, lsr r1
    bd1c:	004cf204 	subeq	pc, ip, r4, lsl #4
    bd20:	453b0000 	ldrmi	r0, [fp, #-0]!
    bd24:	04000021 	streq	r0, [r0], #-33	; 0x21
    bd28:	00004cf3 	strdeq	r4, [r0], -r3
    bd2c:	01e83b00 	mvneq	r3, r0, lsl #22
    bd30:	22050000 	andcs	r0, r5, #0
    bd34:	00000cd2 	ldrdeq	r0, [r0], -r2
    bd38:	0381040b 	orreq	r0, r1, #184549376	; 0xb000000
    bd3c:	3e3b0000 	cdpcc	0, 3, cr0, cr11, cr0, {0}
    bd40:	05000001 	streq	r0, [r0, #-1]
    bd44:	000ce325 	andeq	lr, ip, r5, lsr #6
    bd48:	6b040b00 	blvs	10e950 <__Stack_Size+0x10e150>
    bd4c:	3b000004 	blcc	bd64 <__Stack_Size+0xb564>
    bd50:	000021a7 	andeq	r2, r0, r7, lsr #3
    bd54:	0cf42a05 	vldmiaeq	r4!, {s5-s9}
    bd58:	040b0000 	streq	r0, [fp], #-0
    bd5c:	000004ef 	andeq	r0, r0, pc, ror #9
    bd60:	0025183c 	eoreq	r1, r5, ip, lsr r8
    bd64:	e5240100 	str	r0, [r4, #-256]!	; 0x100
    bd68:	05000002 	streq	r0, [r0, #-2]
    bd6c:	0005ae03 	andeq	sl, r5, r3, lsl #28
    bd70:	23543c20 	cmpcs	r4, #32, 24	; 0x2000
    bd74:	25010000 	strcs	r0, [r1, #-0]
    bd78:	00000094 	muleq	r0, r4, r0
    bd7c:	0dcc0305 	stcleq	3, cr0, [ip, #20]
    bd80:	cc3d2000 	ldcgt	0, cr2, [sp], #-0
    bd84:	07000020 	streq	r0, [r0, -r0, lsr #32]
    bd88:	004c0253 	subeq	r0, ip, r3, asr r2
    bd8c:	0d320000 	ldceq	0, cr0, [r2, #-0]
    bd90:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    bd94:	00000000 	andeq	r0, r0, r0
    bd98:	0022a13e 	eoreq	sl, r2, lr, lsr r1
    bd9c:	4d190600 	ldcmi	6, cr0, [r9, #-0]
    bda0:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    bda4:	000001d7 	ldrdeq	r0, [r0], -r7
    bda8:	00004c0d 	andeq	r4, r0, sp, lsl #24
    bdac:	004c0d00 	subeq	r0, ip, r0, lsl #26
    bdb0:	3f000000 	svccc	0x00000000
    bdb4:	00001fa7 	andeq	r1, r0, r7, lsr #31
    bdb8:	64025607 	strvs	r5, [r2], #-1543	; 0x607
    bdbc:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    bdc0:	0000005e 	andeq	r0, r0, lr, asr r0
    bdc4:	00004c0d 	andeq	r4, r0, sp, lsl #24
    bdc8:	d83f0000 	ldmdale	pc!, {}	; <UNPREDICTABLE>
    bdcc:	07000020 	streq	r0, [r0, -r0, lsr #32]
    bdd0:	0d76024e 	lfmeq	f0, 2, [r6, #-312]!	; 0xfffffec8
    bdd4:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    bdd8:	00000000 	andeq	r0, r0, r0
    bddc:	0020e53f 	eoreq	lr, r0, pc, lsr r5
    bde0:	023a0700 	eorseq	r0, sl, #0, 14
    bde4:	00000d8d 	andeq	r0, r0, sp, lsl #27
    bde8:	00005e0d 	andeq	r5, r0, sp, lsl #28
    bdec:	004c0d00 	subeq	r0, ip, r0, lsl #26
    bdf0:	3f000000 	svccc	0x00000000
    bdf4:	0000099c 	muleq	r0, ip, r9
    bdf8:	a4025707 	strge	r5, [r2], #-1799	; 0x707
    bdfc:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    be00:	0000005e 	andeq	r0, r0, lr, asr r0
    be04:	00004c0d 	andeq	r4, r0, sp, lsl #24
    be08:	283f0000 	ldmdacs	pc!, {}	; <UNPREDICTABLE>
    be0c:	0700001e 	smladeq	r0, lr, r0, r0
    be10:	0db6024d 	lfmeq	f0, 4, [r6, #308]!	; 0x134
    be14:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    be18:	00000000 	andeq	r0, r0, r0
    be1c:	001eb83d 	andseq	fp, lr, sp, lsr r8
    be20:	02540700 	subseq	r0, r4, #0, 14
    be24:	0000004c 	andeq	r0, r0, ip, asr #32
    be28:	00000dcc 	andeq	r0, r0, ip, asr #27
    be2c:	00005e0d 	andeq	r5, r0, sp, lsl #28
    be30:	4e400000 	cdpmi	0, 4, cr0, cr0, cr0, {0}
    be34:	06000024 	streq	r0, [r0], -r4, lsr #32
    be38:	01d70d1a 	bicseq	r0, r7, sl, lsl sp
    be3c:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    be40:	0d000000 	stceq	0, cr0, [r0, #-0]
    be44:	0000004c 	andeq	r0, r0, ip, asr #32
    be48:	01700000 	cmneq	r0, r0
    be4c:	00040000 	andeq	r0, r4, r0
    be50:	00002bfb 	strdeq	r2, [r0], -fp
    be54:	06390104 	ldrteq	r0, [r9], -r4, lsl #2
    be58:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    be5c:	93000025 	movwls	r0, #37	; 0x25
    be60:	18000008 	stmdane	r0, {r3}
    be64:	0000000f 	andeq	r0, r0, pc
    be68:	50000000 	andpl	r0, r0, r0
    be6c:	0200003f 	andeq	r0, r0, #63	; 0x3f
    be70:	04da0504 	ldrbeq	r0, [sl], #1284	; 0x504
    be74:	02020000 	andeq	r0, r2, #0
    be78:	0006fc05 	andeq	pc, r6, r5, lsl #24
    be7c:	06010200 	streq	r0, [r1], -r0, lsl #4
    be80:	0000081a 	andeq	r0, r0, sl, lsl r8
    be84:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    be88:	45240200 	strmi	r0, [r4, #-512]!	; 0x200
    be8c:	02000000 	andeq	r0, r0, #0
    be90:	02520704 	subseq	r0, r2, #4, 14	; 0x100000
    be94:	75030000 	strvc	r0, [r3, #-0]
    be98:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    be9c:	00005725 	andeq	r5, r0, r5, lsr #14
    bea0:	07020200 	streq	r0, [r2, -r0, lsl #4]
    bea4:	00000949 	andeq	r0, r0, r9, asr #18
    bea8:	00387503 	eorseq	r7, r8, r3, lsl #10
    beac:	00682602 	rsbeq	r2, r8, r2, lsl #12
    beb0:	01020000 	mrseq	r0, (UNDEF: 2)
    beb4:	00081808 	andeq	r1, r8, r8, lsl #16
    beb8:	5e040400 	cfcpyspl	mvf0, mvf4
    bebc:	05000000 	streq	r0, [r0, #-0]
    bec0:	000022a1 	andeq	r2, r0, r1, lsr #5
    bec4:	6c5c2301 	mrrcvs	3, 0, r2, ip, cr1
    bec8:	00300800 	eorseq	r0, r0, r0, lsl #16
    becc:	9c010000 	stcls	0, cr0, [r1], {-0}
    bed0:	000000fd 	strdeq	r0, [r0], -sp
    bed4:	0025a206 	eoreq	sl, r5, r6, lsl #4
    bed8:	6f230100 	svcvs	0x00230100
    bedc:	1a000000 	bne	bee4 <__Stack_Size+0xb6e4>
    bee0:	060000a0 	streq	r0, [r0], -r0, lsr #1
    bee4:	000025ab 	andeq	r2, r0, fp, lsr #11
    bee8:	004c2301 	subeq	r2, ip, r1, lsl #6
    beec:	a05f0000 	subsge	r0, pc, r0
    bef0:	9a060000 	bls	18bef8 <__Stack_Size+0x18b6f8>
    bef4:	01000025 	tsteq	r0, r5, lsr #32
    bef8:	00004c23 	andeq	r4, r0, r3, lsr #24
    befc:	00a08000 	adceq	r8, r0, r0
    bf00:	006e0700 	rsbeq	r0, lr, r0, lsl #14
    bf04:	003a2501 	eorseq	r2, sl, r1, lsl #10
    bf08:	52010000 	andpl	r0, r1, #0
    bf0c:	01006908 	tsteq	r0, r8, lsl #18
    bf10:	00003a26 	andeq	r3, r0, r6, lsr #20
    bf14:	00a0a100 	adceq	sl, r0, r0, lsl #2
    bf18:	1b420900 	blne	108e320 <__Stack_Size+0x108db20>
    bf1c:	26010000 	strcs	r0, [r1], -r0
    bf20:	0000003a 	andeq	r0, r0, sl, lsr r0
    bf24:	0000a100 	andeq	sl, r0, r0, lsl #2
    bf28:	001b4809 	andseq	r4, fp, r9, lsl #16
    bf2c:	3a260100 	bcc	98c334 <__Stack_Size+0x98bb34>
    bf30:	37000000 	strcc	r0, [r0, -r0]
    bf34:	090000a1 	stmdbeq	r0, {r0, r5, r7}
    bf38:	000025b7 			; <UNDEFINED> instruction: 0x000025b7
    bf3c:	00fd2701 	rscseq	r2, sp, r1, lsl #14
    bf40:	a15b0000 	cmpge	fp, r0
    bf44:	04000000 	streq	r0, [r0], #-0
    bf48:	00004c04 	andeq	r4, r0, r4, lsl #24
    bf4c:	244e0500 	strbcs	r0, [lr], #-1280	; 0x500
    bf50:	3c010000 	stccc	0, cr0, [r1], {-0}
    bf54:	08006c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, sp, lr}
    bf58:	00000024 	andeq	r0, r0, r4, lsr #32
    bf5c:	016d9c01 	cmneq	sp, r1, lsl #24
    bf60:	a2060000 	andge	r0, r6, #0
    bf64:	01000025 	tsteq	r0, r5, lsr #32
    bf68:	00006f3c 	andeq	r6, r0, ip, lsr pc
    bf6c:	00a19600 	adceq	r9, r1, r0, lsl #12
    bf70:	25ab0600 	strcs	r0, [fp, #1536]!	; 0x600
    bf74:	3c010000 	stccc	0, cr0, [r1], {-0}
    bf78:	0000004c 	andeq	r0, r0, ip, asr #32
    bf7c:	0000a1d1 	ldrdeq	sl, [r0], -r1
    bf80:	00259a06 	eoreq	r9, r5, r6, lsl #20
    bf84:	4c3c0100 	ldfmis	f0, [ip], #-0
    bf88:	f2000000 	vhadd.s8	d0, d0, d0
    bf8c:	070000a1 	streq	r0, [r0, -r1, lsr #1]
    bf90:	3e01006e 	cdpcc	0, 0, cr0, cr1, cr14, {3}
    bf94:	0000003a 	andeq	r0, r0, sl, lsr r0
    bf98:	69085201 	stmdbvs	r8, {r0, r9, ip, lr}
    bf9c:	3a3f0100 	bcc	fcc3a4 <__Stack_Size+0xfcbba4>
    bfa0:	13000000 	movwne	r0, #0
    bfa4:	090000a2 	stmdbeq	r0, {r1, r5, r7}
    bfa8:	000025b7 			; <UNDEFINED> instruction: 0x000025b7
    bfac:	016d4001 	cmneq	sp, r1
    bfb0:	a2720000 	rsbsge	r0, r2, #0
    bfb4:	04000000 	streq	r0, [r0], #-0
    bfb8:	00003a04 	andeq	r3, r0, r4, lsl #20
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
       c:	00051308 	andeq	r1, r5, r8, lsl #6
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	11010000 	mrsne	r0, (UNDEF: 1)
      14:	11061000 	mrsne	r1, (UNDEF: 6)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	03011201 	movweq	r1, #4609	; 0x1201
      1c:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	00051308 	andeq	r1, r5, r8, lsl #6
      24:	11010000 	mrsne	r0, (UNDEF: 1)
      28:	130e2501 	movwne	r2, #58625	; 0xe501
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	1b0e030b 	blne	380c60 <__Stack_Size+0x380460>
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	1117550e 	tstne	r7, lr, lsl #10
      34:	00171001 	andseq	r1, r7, r1
      38:	00240200 	eoreq	r0, r4, r0, lsl #4

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	0b3e0b0b 	bleq	f82c70 <__Stack_Size+0xf82470>

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	00000e03 	andeq	r0, r0, r3, lsl #28
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	0b002403 	bleq	9058 <__Stack_Size+0x8858>
      48:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
      4c:	04000008 	streq	r0, [r0], #-8

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	0b0b000f 	bleq	2c0094 <__Stack_Size+0x2bf894>
      54:	00001349 	andeq	r1, r0, r9, asr #6
      58:	27001505 	strcs	r1, [r0, -r5, lsl #10]
      5c:	06000019 			; <UNDEFINED> instruction: 0x06000019
      60:	08030016 	stmdaeq	r3, {r1, r2, r4}
      64:	0b3b0b3a 	bleq	ec2d54 <__Stack_Size+0xec2554>
      68:	00001349 	andeq	r1, r0, r9, asr #6
      6c:	03001607 	movweq	r1, #1543	; 0x607
      70:	3b0b3a0e 	blcc	2ce8b0 <__Stack_Size+0x2ce0b0>
      74:	0013490b 	andseq	r4, r3, fp, lsl #18
      78:	00350800 	eorseq	r0, r5, r0, lsl #16
      7c:	00001349 	andeq	r1, r0, r9, asr #6
      80:	0b010409 	bleq	410ac <__Stack_Size+0x408ac>
      84:	3b0b3a0b 	blcc	2ce8b8 <__Stack_Size+0x2ce0b8>
      88:	0013010b 	andseq	r0, r3, fp, lsl #2
      8c:	00280a00 	eoreq	r0, r8, r0, lsl #20
      90:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
      94:	130b0000 	movwne	r0, #45056	; 0xb000
      98:	3a0b0b01 	bcc	2c2ca4 <__Stack_Size+0x2c24a4>
      9c:	010b3b0b 	tsteq	fp, fp, lsl #22
      a0:	0c000013 	stceq	0, cr0, [r0], {19}
      a4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      a8:	0b3b0b3a 	bleq	ec2d98 <__Stack_Size+0xec2598>
				{
					state_in->step = step_c;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ac:	0b381349 	bleq	e04dd8 <__Stack_Size+0xe045d8>
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      b0:	0d0d0000 	stceq	0, cr0, [sp, #-0]
      b4:	3a080300 	bcc	200cbc <__Stack_Size+0x2004bc>
			*plainchar    = (fragment & 0x003) << 6;
      b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      bc:	000b3813 	andeq	r3, fp, r3, lsl r8
	state_in->plainchar = 0;
}

int base64_decode_block(const char* code_in, const int length_in, char* plaintext_out, base64_decodestate* state_in)
{
	const char* codechar = code_in;
      c0:	01040e00 	tsteq	r4, r0, lsl #28
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
			*plainchar    = (fragment & 0x003) << 6;
	case step_d:
			do {
				if (codechar == code_in+length_in)
      c4:	0b0b0e03 	bleq	2c38d8 <__Stack_Size+0x2c30d8>
      c8:	0b3b0b3a 	bleq	ec2db8 <__Stack_Size+0xec25b8>
				{
					state_in->step = step_d;
      cc:	00001301 	andeq	r1, r0, r1, lsl #6
					state_in->plainchar = *plainchar;
      d0:	0301130f 	movweq	r1, #4879	; 0x130f
					return plainchar - plaintext_out;
      d4:	3a0b0b0e 	bcc	2c2d14 <__Stack_Size+0x2c2514>
      d8:	010b3b0b 	tsteq	fp, fp, lsl #22
				}
				fragment = (char)base64_decode_value(*codechar++);
      dc:	10000013 	andne	r0, r0, r3, lsl r0
      e0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      e4:	13011349 	movwne	r1, #4937	; 0x1349
      e8:	05110000 	ldreq	r0, [r1, #-0]
				{
					state_in->step = step_d;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ec:	00134900 	andseq	r4, r3, r0, lsl #18
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      f0:	01131200 	tsteq	r3, r0, lsl #4
      f4:	0b0b0803 	bleq	2c2108 <__Stack_Size+0x2c1908>
		}
      f8:	0b3b0b3a 	bleq	ec2de8 <__Stack_Size+0xec25e8>
	}
	/* control should not reach here */
	return plainchar - plaintext_out;
}
      fc:	00001301 	andeq	r1, r0, r1, lsl #6
	uint8_t x1z1[F25519_SIZE];
	uint8_t a[F25519_SIZE];

	f25519_mul__distinct(x1sq, x1, x1);
	f25519_mul__distinct(z1sq, z1, z1);
	f25519_mul__distinct(x1z1, x1, z1);
     100:	0b011713 	bleq	45d54 <__Stack_Size+0x45554>
     104:	3b0b3a0b 	blcc	2ce938 <__Stack_Size+0x2ce138>

	f25519_sub(a, x1sq, z1sq);
     108:	0013010b 	andseq	r0, r3, fp, lsl #2
     10c:	000d1400 	andeq	r1, sp, r0, lsl #8
	f25519_mul__distinct(x3, a, a);
     110:	0b3a0803 	bleq	e82124 <__Stack_Size+0xe81924>
     114:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     118:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}

	f25519_mul_c(a, x1z1, 486662);
     11c:	03193f01 	tsteq	r9, #1, 30
     120:	3b0b3a0e 	blcc	2ce960 <__Stack_Size+0x2ce160>
	f25519_add(a, x1sq, a);
     124:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     128:	010b2013 	tsteq	fp, r3, lsl r0
     12c:	16000013 			; <UNDEFINED> instruction: 0x16000013
	f25519_add(a, z1sq, a);
     130:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     134:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
	f25519_mul__distinct(x1sq, x1z1, a);
     138:	00001349 	andeq	r1, r0, r9, asr #6
     13c:	3f002e17 	svccc	0x00002e17
     140:	3a0e0319 	bcc	380dac <__Stack_Size+0x3805ac>
	f25519_mul_c(z3, x1sq, 4);
     144:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     148:	000b2019 	andeq	r2, fp, r9, lsl r0
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	002e1800 	eoreq	r1, lr, r0, lsl #16
     150:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     154:	0b3b0b3a 	bleq	ec2e44 <__Stack_Size+0xec2644>
	f25519_sub(b, x3, z3); /* D */
     158:	01111927 	tsteq	r1, r7, lsr #18
     15c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
	f25519_mul__distinct(da, a, b);
     160:	00194297 	mulseq	r9, r7, r2
     164:	002e1900 	eoreq	r1, lr, r0, lsl #18
     168:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}

	f25519_sub(b, x2, z2);
     16c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     170:	01111927 	tsteq	r1, r7, lsr #18
	f25519_add(a, x3, z3); /* C */
     174:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     178:	00194297 	mulseq	r9, r7, r2
     17c:	012e1a00 	teqeq	lr, r0, lsl #20
	f25519_mul__distinct(cb, a, b);
     180:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     184:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a

	f25519_add(a, da, cb);
     188:	13491927 	movtne	r1, #39207	; 0x9927
     18c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     190:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
	f25519_mul__distinct(b, a, a);
     194:	00130119 	andseq	r0, r3, r9, lsl r1
     198:	00051b00 	andeq	r1, r5, r0, lsl #22
	f25519_mul__distinct(x5, z1, b);
     19c:	0b3a0e03 	bleq	e839b0 <__Stack_Size+0xe831b0>
     1a0:	1349053b 	movtne	r0, #38203	; 0x953b
     1a4:	00001702 	andeq	r1, r0, r2, lsl #14

	f25519_sub(a, da, cb);
     1a8:	0300051c 	movweq	r0, #1308	; 0x51c
     1ac:	3b0b3a0e 	blcc	2ce9ec <__Stack_Size+0x2ce1ec>
	f25519_mul__distinct(b, a, a);
     1b0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     1b4:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
     1b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	0b3a0e03 	bleq	e839d0 <__Stack_Size+0xe831d0>
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     1c4:	06120111 			; <UNDEFINED> instruction: 0x06120111

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     1cc:	00130119 	andseq	r0, r3, r9, lsl r1
     1d0:	010b1e00 	tsteq	fp, r0, lsl #28
     1d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
		f25519_select(zm1, zm1, zm, bit);
     1d8:	00001301 	andeq	r1, r0, r1, lsl #6
     1dc:	0300341f 	movweq	r3, #1055	; 0x41f
     1e0:	3b0b3a0e 	blcc	2cea20 <__Stack_Size+0x2ce220>
		f25519_select(xm, xm, xms, bit);
     1e4:	02134905 	andseq	r4, r3, #81920	; 0x14000
     1e8:	20000017 	andcs	r0, r0, r7, lsl r0
     1ec:	00018289 	andeq	r8, r1, r9, lsl #5
		f25519_select(zm, zm, zms, bit);
     1f0:	13310111 	teqne	r1, #1073741828	; 0x40000004
     1f4:	89210000 	stmdbhi	r1!, {}	; <UNPREDICTABLE>
     1f8:	11010182 	smlabbne	r1, r2, r1, r0
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	01133101 	tsteq	r3, r1, lsl #2
     200:	22000013 	andcs	r0, r0, #19
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	0001828a 	andeq	r8, r1, sl, lsl #5
     208:	42911802 	addsmi	r1, r1, #131072	; 0x20000
	f25519_mul__distinct(result, zm1, xm);
     20c:	23000018 	movwcs	r0, #24
     210:	01018289 	smlabbeq	r1, r9, r2, r8
	f25519_normalize(result);
     214:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     218:	00133119 	andseq	r3, r3, r9, lsl r1
}
     21c:	82892400 	addhi	r2, r9, #0, 8
     220:	01110101 	tsteq	r1, r1, lsl #2
     224:	05250000 	streq	r0, [r5, #-0]!
     228:	3a080300 	bcc	200e30 <__Stack_Size+0x200630>
     22c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     230:	00170213 	andseq	r0, r7, r3, lsl r2
     234:	82892600 	addhi	r2, r9, #0, 12
     238:	01110001 	tsteq	r1, r1
     23c:	31194295 			; <UNDEFINED> instruction: 0x31194295
     240:	27000013 	smladcs	r0, r3, r0, r0
     244:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     248:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     24c:	00001349 	andeq	r1, r0, r9, asr #6
     250:	31012e28 	tstcc	r1, r8, lsr #28
     254:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     258:	97184006 	ldrls	r4, [r8, -r6]
     25c:	13011942 	movwne	r1, #6466	; 0x1942
     260:	05290000 	streq	r0, [r9, #-0]!
     264:	02133100 	andseq	r3, r3, #0, 2
     268:	2a000017 	bcs	2cc <_Minimum_Stack_Size+0x1cc>
     26c:	0111010b 	tsteq	r1, fp, lsl #2
     270:	00000612 	andeq	r0, r0, r2, lsl r6
     274:	3f012e2b 	svccc	0x00012e2b
     278:	3a0e0319 	bcc	380ee4 <__Stack_Size+0x3806e4>
     27c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     280:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     284:	97184006 	ldrls	r4, [r8, -r6]
     288:	13011942 	movwne	r1, #6466	; 0x1942
     28c:	342c0000 	strtcc	r0, [ip], #-0
     290:	3a0e0300 	bcc	380e98 <__Stack_Size+0x380698>
     294:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     298:	00180213 	andseq	r0, r8, r3, lsl r2
     29c:	011d2d00 	tsteq	sp, r0, lsl #26
     2a0:	01111331 	tsteq	r1, r1, lsr r3
     2a4:	0b580612 	bleq	1601af4 <__Stack_Size+0x16012f4>
     2a8:	13010b59 	movwne	r0, #7001	; 0x1b59
     2ac:	342e0000 	strtcc	r0, [lr], #-0
     2b0:	3a0e0300 	bcc	380eb8 <__Stack_Size+0x3806b8>
     2b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2b8:	00170213 	andseq	r0, r7, r3, lsl r2
     2bc:	00052f00 	andeq	r2, r5, r0, lsl #30
     2c0:	0b3a0e03 	bleq	e83ad4 <__Stack_Size+0xe832d4>
     2c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2c8:	00001702 	andeq	r1, r0, r2, lsl #14
     2cc:	3f012e30 	svccc	0x00012e30
     2d0:	3a0e0319 	bcc	380f3c <__Stack_Size+0x38073c>
     2d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     2d8:	11134919 	tstne	r3, r9, lsl r9
     2dc:	40061201 	andmi	r1, r6, r1, lsl #4
     2e0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     2e4:	00001301 	andeq	r1, r0, r1, lsl #6
     2e8:	01828931 	orreq	r8, r2, r1, lsr r9
     2ec:	31011101 	tstcc	r1, r1, lsl #2
     2f0:	32000013 	andcc	r0, r0, #19
     2f4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     2fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     300:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
     304:	03193f01 	tsteq	r9, #1, 30
     308:	3b0b3a0e 	blcc	2ceb48 <__Stack_Size+0x2ce348>
     30c:	11192705 	tstne	r9, r5, lsl #14
     310:	40061201 	andmi	r1, r6, r1, lsl #4
     314:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     318:	00001301 	andeq	r1, r0, r1, lsl #6
     31c:	3f002e34 	svccc	0x00002e34
     320:	3a0e0319 	bcc	380f8c <__Stack_Size+0x38078c>
     324:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     328:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     32c:	97184006 	ldrls	r4, [r8, -r6]
     330:	00001942 	andeq	r1, r0, r2, asr #18
     334:	03003435 	movweq	r3, #1077	; 0x435
     338:	3b0b3a0e 	blcc	2ceb78 <__Stack_Size+0x2ce378>
     33c:	1c13490b 	ldcne	9, cr4, [r3], {11}
     340:	36000006 	strcc	r0, [r0], -r6
     344:	13490026 	movtne	r0, #36902	; 0x9026
     348:	34370000 	ldrtcc	r0, [r7], #-0
     34c:	3a0e0300 	bcc	380f54 <__Stack_Size+0x380754>
     350:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     354:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     358:	38000018 	stmdacc	r0, {r3, r4}
     35c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     360:	0b3b0b3a 	bleq	ec3050 <__Stack_Size+0xec2850>
     364:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     368:	0000193c 	andeq	r1, r0, ip, lsr r9
     36c:	49010139 	stmdbmi	r1, {r0, r3, r4, r5, r8}
     370:	00130113 	andseq	r0, r3, r3, lsl r1
     374:	00213a00 	eoreq	r3, r1, r0, lsl #20
     378:	0b2f1349 	bleq	bc50a4 <__Stack_Size+0xbc48a4>
     37c:	213b0000 	teqcs	fp, r0
     380:	3c000000 	stccc	0, cr0, [r0], {-0}
     384:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     388:	0b3a0e03 	bleq	e83b9c <__Stack_Size+0xe8339c>
     38c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     390:	0000193c 	andeq	r1, r0, ip, lsr r9
     394:	3f012e3d 	svccc	0x00012e3d
     398:	3a0e0319 	bcc	381004 <__Stack_Size+0x380804>
     39c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     3a0:	01193c19 	tsteq	r9, r9, lsl ip
     3a4:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
     3a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     3ac:	0b3a0e03 	bleq	e83bc0 <__Stack_Size+0xe833c0>
     3b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     3b4:	1301193c 	movwne	r1, #6460	; 0x193c
     3b8:	2e3f0000 	cdpcs	0, 3, cr0, cr15, cr0, {0}
     3bc:	03193f00 	tsteq	r9, #0, 30
     3c0:	3b0b3a0e 	blcc	2cec00 <__Stack_Size+0x2ce400>
     3c4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     3c8:	00193c13 	andseq	r3, r9, r3, lsl ip
     3cc:	012e4000 	teqeq	lr, r0
     3d0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3d4:	0b3b0b3a 	bleq	ec30c4 <__Stack_Size+0xec28c4>
     3d8:	13491927 	movtne	r1, #39207	; 0x9927
     3dc:	1301193c 	movwne	r1, #6460	; 0x193c
     3e0:	2e410000 	cdpcs	0, 4, cr0, cr1, cr0, {0}
     3e4:	03193f01 	tsteq	r9, #1, 30
     3e8:	3b0b3a0e 	blcc	2cec28 <__Stack_Size+0x2ce428>
     3ec:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     3f0:	01193c13 	tsteq	r9, r3, lsl ip
     3f4:	42000013 	andmi	r0, r0, #19
     3f8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     3fc:	0b3a0e03 	bleq	e83c10 <__Stack_Size+0xe83410>
     400:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     404:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     408:	01000000 	mrseq	r0, (UNDEF: 0)
     40c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     410:	0e030b13 	vmoveq.32	d3[0], r0
     414:	17100e1b 			; <UNDEFINED> instruction: 0x17100e1b
     418:	24020000 	strcs	r0, [r2], #-0
     41c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     420:	0008030b 	andeq	r0, r8, fp, lsl #6
     424:	00240300 	eoreq	r0, r4, r0, lsl #6
     428:	0b3e0b0b 	bleq	f8305c <__Stack_Size+0xf8285c>
     42c:	00000e03 	andeq	r0, r0, r3, lsl #28
     430:	03001604 	movweq	r1, #1540	; 0x604
     434:	3b0b3a08 	blcc	2cec5c <__Stack_Size+0x2ce45c>
     438:	0013490b 	andseq	r4, r3, fp, lsl #18
     43c:	01130500 	tsteq	r3, r0, lsl #10
     440:	0b0b0e03 	bleq	2c3c54 <__Stack_Size+0x2c3454>
     444:	0b3b0b3a 	bleq	ec3134 <__Stack_Size+0xec2934>
     448:	00001301 	andeq	r1, r0, r1, lsl #6
     44c:	03000d06 	movweq	r0, #3334	; 0xd06
     450:	3b0b3a0e 	blcc	2cec90 <__Stack_Size+0x2ce490>
     454:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     458:	0700000b 	streq	r0, [r0, -fp]
     45c:	0b0b000f 	bleq	2c04a0 <__Stack_Size+0x2bfca0>
     460:	00001349 	andeq	r1, r0, r9, asr #6
     464:	03001608 	movweq	r1, #1544	; 0x608
     468:	3b0b3a0e 	blcc	2ceca8 <__Stack_Size+0x2ce4a8>
     46c:	0013490b 	andseq	r4, r3, fp, lsl #18
     470:	00340900 	eorseq	r0, r4, r0, lsl #18
     474:	0b3a0e03 	bleq	e83c88 <__Stack_Size+0xe83488>
     478:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     47c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     480:	010a0000 	mrseq	r0, (UNDEF: 10)
     484:	01134901 	tsteq	r3, r1, lsl #18
     488:	0b000013 	bleq	4dc <_Minimum_Stack_Size+0x3dc>
     48c:	13490021 	movtne	r0, #36897	; 0x9021
     490:	00000b2f 	andeq	r0, r0, pc, lsr #22
     494:	01110100 	tsteq	r1, r0, lsl #2
     498:	0b130e25 	bleq	4c3d34 <__Stack_Size+0x4c3534>
     49c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     4a0:	01111755 	tsteq	r1, r5, asr r7
     4a4:	00001710 	andeq	r1, r0, r0, lsl r7
     4a8:	03001602 	movweq	r1, #1538	; 0x602
     4ac:	3b0b3a0e 	blcc	2cecec <__Stack_Size+0x2ce4ec>
     4b0:	0013490b 	andseq	r4, r3, fp, lsl #18
     4b4:	00240300 	eoreq	r0, r4, r0, lsl #6
     4b8:	0b3e0b0b 	bleq	f830ec <__Stack_Size+0xf828ec>
     4bc:	00000e03 	andeq	r0, r0, r3, lsl #28
     4c0:	0b000f04 	bleq	40d8 <__Stack_Size+0x38d8>
     4c4:	0500000b 	streq	r0, [r0, #-11]
     4c8:	0b0b0024 	bleq	2c0560 <__Stack_Size+0x2bfd60>
     4cc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     4d0:	0f060000 	svceq	0x00060000
     4d4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     4d8:	07000013 	smladeq	r0, r3, r0, r0
     4dc:	13490026 	movtne	r0, #36902	; 0x9026
     4e0:	16080000 	strne	r0, [r8], -r0
     4e4:	3a080300 	bcc	2010ec <__Stack_Size+0x2008ec>
     4e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4ec:	09000013 	stmdbeq	r0, {r0, r1, r4}
     4f0:	13490035 	movtne	r0, #36917	; 0x9035
     4f4:	040a0000 	streq	r0, [sl], #-0
     4f8:	3a0b0b01 	bcc	2c3104 <__Stack_Size+0x2c2904>
     4fc:	010b3b0b 	tsteq	fp, fp, lsl #22
     500:	0b000013 	bleq	554 <_Minimum_Stack_Size+0x454>
     504:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     508:	00000d1c 	andeq	r0, r0, ip, lsl sp
     50c:	0301130c 	movweq	r1, #4876	; 0x130c
     510:	3a0b0b0e 	bcc	2c3150 <__Stack_Size+0x2c2950>
     514:	01053b0b 	tsteq	r5, fp, lsl #22
     518:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     51c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     520:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     524:	0b381349 	bleq	e05250 <__Stack_Size+0xe04a50>
     528:	130e0000 	movwne	r0, #57344	; 0xe000
     52c:	0b0e0301 	bleq	381138 <__Stack_Size+0x380938>
     530:	3b0b3a0b 	blcc	2ced64 <__Stack_Size+0x2ce564>
     534:	0013010b 	andseq	r0, r3, fp, lsl #2
     538:	000d0f00 	andeq	r0, sp, r0, lsl #30
     53c:	0b3a0e03 	bleq	e83d50 <__Stack_Size+0xe83550>
     540:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     544:	00000b38 	andeq	r0, r0, r8, lsr fp
     548:	49010110 	stmdbmi	r1, {r4, r8}
     54c:	00130113 	andseq	r0, r3, r3, lsl r1
     550:	00211100 	eoreq	r1, r1, r0, lsl #2
     554:	00001349 	andeq	r1, r0, r9, asr #6
     558:	0b011312 	bleq	451a8 <__Stack_Size+0x449a8>
     55c:	3b0b3a0b 	blcc	2ced90 <__Stack_Size+0x2ce590>
     560:	0013010b 	andseq	r0, r3, fp, lsl #2
     564:	00211300 	eoreq	r1, r1, r0, lsl #6
     568:	0b2f1349 	bleq	bc5294 <__Stack_Size+0xbc4a94>
     56c:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     570:	03193f01 	tsteq	r9, #1, 30
     574:	3b0b3a0e 	blcc	2cedb4 <__Stack_Size+0x2ce5b4>
     578:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     57c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     580:	97184006 	ldrls	r4, [r8, -r6]
     584:	13011942 	movwne	r1, #6466	; 0x1942
     588:	05150000 	ldreq	r0, [r5, #-0]
     58c:	3a0e0300 	bcc	381194 <__Stack_Size+0x380994>
     590:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     594:	00170213 	andseq	r0, r7, r3, lsl r2
     598:	00341600 	eorseq	r1, r4, r0, lsl #12
     59c:	0b3a0803 	bleq	e825b0 <__Stack_Size+0xe81db0>
     5a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     5a4:	00001802 	andeq	r1, r0, r2, lsl #16
     5a8:	01828917 	orreq	r8, r2, r7, lsl r9
     5ac:	31011101 	tstcc	r1, r1, lsl #2
     5b0:	00130113 	andseq	r0, r3, r3, lsl r1
     5b4:	828a1800 	addhi	r1, sl, #0, 16
     5b8:	18020001 	stmdane	r2, {r0}
     5bc:	00184291 	mulseq	r8, r1, r2
     5c0:	82891900 	addhi	r1, r9, #0, 18
     5c4:	01110101 	tsteq	r1, r1, lsl #2
     5c8:	00001331 	andeq	r1, r0, r1, lsr r3
     5cc:	0300341a 	movweq	r3, #1050	; 0x41a
     5d0:	3b0b3a08 	blcc	2cedf8 <__Stack_Size+0x2ce5f8>
     5d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     5d8:	1b000017 	blne	63c <_Minimum_Stack_Size+0x53c>
     5dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     5e0:	0b3a0e03 	bleq	e83df4 <__Stack_Size+0xe835f4>
     5e4:	01110b3b 	tsteq	r1, fp, lsr fp
     5e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     5ec:	01194297 			; <UNDEFINED> instruction: 0x01194297
     5f0:	1c000013 	stcne	0, cr0, [r0], {19}
     5f4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     5f8:	0b3b0b3a 	bleq	ec32e8 <__Stack_Size+0xec2ae8>
     5fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     600:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
     604:	03193f01 	tsteq	r9, #1, 30
     608:	3b0b3a0e 	blcc	2cee48 <__Stack_Size+0x2ce648>
     60c:	1113490b 	tstne	r3, fp, lsl #18
     610:	40061201 	andmi	r1, r6, r1, lsl #4
     614:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     618:	00001301 	andeq	r1, r0, r1, lsl #6
     61c:	0300341e 	movweq	r3, #1054	; 0x41e
     620:	3b0b3a0e 	blcc	2cee60 <__Stack_Size+0x2ce660>
     624:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     628:	1f000017 	svcne	0x00000017
     62c:	00018289 	andeq	r8, r1, r9, lsl #5
     630:	13310111 	teqne	r1, #1073741828	; 0x40000004
     634:	34200000 	strtcc	r0, [r0], #-0
     638:	3a0e0300 	bcc	381240 <__Stack_Size+0x380a40>
     63c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     640:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     644:	21000018 	tstcs	r0, r8, lsl r0
     648:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     64c:	0b3a0e03 	bleq	e83e60 <__Stack_Size+0xe83660>
     650:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     654:	1301193c 	movwne	r1, #6460	; 0x193c
     658:	05220000 	streq	r0, [r2, #-0]!
     65c:	00134900 	andseq	r4, r3, r0, lsl #18
     660:	012e2300 	teqeq	lr, r0, lsl #6
     664:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     668:	0b3b0b3a 	bleq	ec3358 <__Stack_Size+0xec2b58>
     66c:	13491927 	movtne	r1, #39207	; 0x9927
     670:	1301193c 	movwne	r1, #6460	; 0x193c
     674:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
     678:	03193f01 	tsteq	r9, #1, 30
     67c:	3b0b3a0e 	blcc	2ceebc <__Stack_Size+0x2ce6bc>
     680:	3c192705 	ldccc	7, cr2, [r9], {5}
     684:	00130119 	andseq	r0, r3, r9, lsl r1
     688:	00182500 	andseq	r2, r8, r0, lsl #10
     68c:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
     690:	03193f01 	tsteq	r9, #1, 30
     694:	4919270e 	ldmdbmi	r9, {r1, r2, r3, r8, r9, sl, sp}
     698:	3c193413 	cfldrscc	mvf3, [r9], {19}
     69c:	00130119 	andseq	r0, r3, r9, lsl r1
     6a0:	002e2700 	eoreq	r2, lr, r0, lsl #14
     6a4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     6a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     6ac:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     6b0:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
     6b4:	03193f00 	tsteq	r9, #0, 30
     6b8:	3b0b3a0e 	blcc	2ceef8 <__Stack_Size+0x2ce6f8>
     6bc:	3c19270b 	ldccc	7, cr2, [r9], {11}
     6c0:	29000019 	stmdbcs	r0, {r0, r3, r4}
     6c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     6c8:	0b3a0e03 	bleq	e83edc <__Stack_Size+0xe836dc>
     6cc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     6d0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     6d4:	00001301 	andeq	r1, r0, r1, lsl #6
     6d8:	3f012e2a 	svccc	0x00012e2a
     6dc:	3a0e0319 	bcc	381348 <__Stack_Size+0x380b48>
     6e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6e4:	01193c13 	tsteq	r9, r3, lsl ip
     6e8:	2b000013 	blcs	73c <_Minimum_Stack_Size+0x63c>
     6ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     6f0:	0b3a0e03 	bleq	e83f04 <__Stack_Size+0xe83704>
     6f4:	193c0b3b 	ldmdbne	ip!, {r0, r1, r3, r4, r5, r8, r9, fp}
     6f8:	00001301 	andeq	r1, r0, r1, lsl #6
     6fc:	3f012e2c 	svccc	0x00012e2c
     700:	3a0e0319 	bcc	38136c <__Stack_Size+0x380b6c>
     704:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     708:	00193c19 	andseq	r3, r9, r9, lsl ip
     70c:	11010000 	mrsne	r0, (UNDEF: 1)
     710:	130e2501 	movwne	r2, #58625	; 0xe501
     714:	1b0e030b 	blne	381348 <__Stack_Size+0x380b48>
     718:	1117550e 	tstne	r7, lr, lsl #10
     71c:	00171001 	andseq	r1, r7, r1
     720:	00160200 	andseq	r0, r6, r0, lsl #4
     724:	0b3a0e03 	bleq	e83f38 <__Stack_Size+0xe83738>
     728:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     72c:	24030000 	strcs	r0, [r3], #-0
     730:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     734:	000e030b 	andeq	r0, lr, fp, lsl #6
     738:	01130400 	tsteq	r3, r0, lsl #8
     73c:	0b0b0e03 	bleq	2c3f50 <__Stack_Size+0x2c3750>
     740:	0b3b0b3a 	bleq	ec3430 <__Stack_Size+0xec2c30>
     744:	00001301 	andeq	r1, r0, r1, lsl #6
     748:	03000d05 	movweq	r0, #3333	; 0xd05
     74c:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
     750:	0019340b 	andseq	r3, r9, fp, lsl #8
     754:	000f0600 	andeq	r0, pc, r0, lsl #12
     758:	00000b0b 	andeq	r0, r0, fp, lsl #22
     75c:	0b002407 	bleq	9780 <__Stack_Size+0x8f80>
     760:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     764:	08000008 	stmdaeq	r0, {r3}
     768:	0b0b000f 	bleq	2c07ac <__Stack_Size+0x2bffac>
     76c:	00001349 	andeq	r1, r0, r9, asr #6
     770:	27001509 	strcs	r1, [r0, -r9, lsl #10]
     774:	0a000019 	beq	7e0 <_Minimum_Stack_Size+0x6e0>
     778:	13490026 	movtne	r0, #36902	; 0x9026
     77c:	160b0000 	strne	r0, [fp], -r0
     780:	3a080300 	bcc	201388 <__Stack_Size+0x200b88>
     784:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     788:	0c000013 	stceq	0, cr0, [r0], {19}
     78c:	13490035 	movtne	r0, #36917	; 0x9035
     790:	040d0000 	streq	r0, [sp], #-0
     794:	3a0b0b01 	bcc	2c33a0 <__Stack_Size+0x2c2ba0>
     798:	010b3b0b 	tsteq	fp, fp, lsl #22
     79c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     7a0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     7a4:	00000d1c 	andeq	r0, r0, ip, lsl sp
     7a8:	0b01130f 	bleq	453ec <__Stack_Size+0x44bec>
     7ac:	3b0b3a0b 	blcc	2cefe0 <__Stack_Size+0x2ce7e0>
     7b0:	0013010b 	andseq	r0, r3, fp, lsl #2
     7b4:	000d1000 	andeq	r1, sp, r0
     7b8:	0b3a0803 	bleq	e827cc <__Stack_Size+0xe81fcc>
     7bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7c0:	00000b38 	andeq	r0, r0, r8, lsr fp
     7c4:	03000d11 	movweq	r0, #3345	; 0xd11
     7c8:	3b0b3a0e 	blcc	2cf008 <__Stack_Size+0x2ce808>
     7cc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     7d0:	1200000b 	andne	r0, r0, #11
     7d4:	050b0113 	streq	r0, [fp, #-275]	; 0x113
     7d8:	0b3b0b3a 	bleq	ec34c8 <__Stack_Size+0xec2cc8>
     7dc:	00001301 	andeq	r1, r0, r1, lsl #6
     7e0:	03000d13 	movweq	r0, #3347	; 0xd13
     7e4:	3b0b3a0e 	blcc	2cf024 <__Stack_Size+0x2ce824>
     7e8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     7ec:	14000005 	strne	r0, [r0], #-5
     7f0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     7f4:	0b3b0b3a 	bleq	ec34e4 <__Stack_Size+0xec2ce4>
     7f8:	05381349 	ldreq	r1, [r8, #-841]!	; 0x349
     7fc:	01150000 	tsteq	r5, r0
     800:	01134901 	tsteq	r3, r1, lsl #18
     804:	16000013 			; <UNDEFINED> instruction: 0x16000013
     808:	13490021 	movtne	r0, #36897	; 0x9021
     80c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     810:	03000d17 	movweq	r0, #3351	; 0xd17
     814:	3b0b3a08 	blcc	2cf03c <__Stack_Size+0x2ce83c>
     818:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     81c:	1800000b 	stmdane	r0, {r0, r1, r3}
     820:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     824:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     828:	0b381349 	bleq	e05554 <__Stack_Size+0xe04d54>
     82c:	13190000 	tstne	r9, #0
     830:	0b0e0301 	bleq	38143c <__Stack_Size+0x380c3c>
     834:	3b0b3a0b 	blcc	2cf068 <__Stack_Size+0x2ce868>
     838:	00130105 	andseq	r0, r3, r5, lsl #2
     83c:	012e1a00 	teqeq	lr, r0, lsl #20
     840:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     844:	0b3b0b3a 	bleq	ec3534 <__Stack_Size+0xec2d34>
     848:	01111927 	tsteq	r1, r7, lsr #18
     84c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     850:	01194297 			; <UNDEFINED> instruction: 0x01194297
     854:	1b000013 	blne	8a8 <__Stack_Size+0xa8>
     858:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     85c:	0b3b0b3a 	bleq	ec354c <__Stack_Size+0xec2d4c>
     860:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     864:	051c0000 	ldreq	r0, [ip, #-0]
     868:	3a080300 	bcc	201470 <__Stack_Size+0x200c70>
     86c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     870:	00170213 	andseq	r0, r7, r3, lsl r2
     874:	012e1d00 	teqeq	lr, r0, lsl #26
     878:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     87c:	0b3b0b3a 	bleq	ec356c <__Stack_Size+0xec2d6c>
     880:	13491927 	movtne	r1, #39207	; 0x9927
     884:	06120111 			; <UNDEFINED> instruction: 0x06120111
     888:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     88c:	00130119 	andseq	r0, r3, r9, lsl r1
     890:	00051e00 	andeq	r1, r5, r0, lsl #28
     894:	0b3a0e03 	bleq	e840a8 <__Stack_Size+0xe838a8>
     898:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     89c:	00001702 	andeq	r1, r0, r2, lsl #14
     8a0:	0300341f 	movweq	r3, #1055	; 0x41f
     8a4:	3b0b3a08 	blcc	2cf0cc <__Stack_Size+0x2ce8cc>
     8a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     8ac:	20000017 	andcs	r0, r0, r7, lsl r0
     8b0:	01018289 	smlabbeq	r1, r9, r2, r8
     8b4:	13310111 	teqne	r1, #1073741828	; 0x40000004
     8b8:	00001301 	andeq	r1, r0, r1, lsl #6
     8bc:	01828a21 	orreq	r8, r2, r1, lsr #20
     8c0:	91180200 	tstls	r8, r0, lsl #4
     8c4:	00001842 	andeq	r1, r0, r2, asr #16
     8c8:	01828922 	orreq	r8, r2, r2, lsr #18
     8cc:	31011101 	tstcc	r1, r1, lsl #2
     8d0:	23000013 	movwcs	r0, #19
     8d4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     8d8:	0b3a0e03 	bleq	e840ec <__Stack_Size+0xe838ec>
     8dc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     8e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     8e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     8e8:	00130119 	andseq	r0, r3, r9, lsl r1
     8ec:	00052400 	andeq	r2, r5, r0, lsl #8
     8f0:	0b3a0e03 	bleq	e84104 <__Stack_Size+0xe83904>
     8f4:	1349053b 	movtne	r0, #38203	; 0x953b
     8f8:	00001802 	andeq	r1, r0, r2, lsl #16
     8fc:	03000525 	movweq	r0, #1317	; 0x525
     900:	3b0b3a08 	blcc	2cf128 <__Stack_Size+0x2ce928>
     904:	02134905 	andseq	r4, r3, #81920	; 0x14000
     908:	26000018 			; <UNDEFINED> instruction: 0x26000018
     90c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     910:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     914:	17021349 	strne	r1, [r2, -r9, asr #6]
     918:	05270000 	streq	r0, [r7, #-0]!
     91c:	3a080300 	bcc	201524 <__Stack_Size+0x200d24>
     920:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     924:	00170213 	andseq	r0, r7, r3, lsl r2
     928:	00342800 	eorseq	r2, r4, r0, lsl #16
     92c:	0b3a0e03 	bleq	e84140 <__Stack_Size+0xe83940>
     930:	1349053b 	movtne	r0, #38203	; 0x953b
     934:	00001802 	andeq	r1, r0, r2, lsl #16
     938:	00001829 	andeq	r1, r0, r9, lsr #16
     93c:	00342a00 	eorseq	r2, r4, r0, lsl #20
     940:	0b3a0803 	bleq	e82954 <__Stack_Size+0xe82154>
     944:	1349053b 	movtne	r0, #38203	; 0x953b
     948:	00001702 	andeq	r1, r0, r2, lsl #14
     94c:	0300342b 	movweq	r3, #1067	; 0x42b
     950:	3b0b3a08 	blcc	2cf178 <__Stack_Size+0x2ce978>
     954:	02134905 	andseq	r4, r3, #81920	; 0x14000
     958:	2c000018 	stccs	0, cr0, [r0], {24}
     95c:	01018289 	smlabbeq	r1, r9, r2, r8
     960:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     964:	00133119 	andseq	r3, r3, r9, lsl r1
     968:	012e2d00 	teqeq	lr, r0, lsl #26
     96c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     970:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     974:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     978:	00001301 	andeq	r1, r0, r1, lsl #6
     97c:	3f002e2e 	svccc	0x00002e2e
     980:	3a0e0319 	bcc	3815ec <__Stack_Size+0x380dec>
     984:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     988:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     98c:	97184006 	ldrls	r4, [r8, -r6]
     990:	00001942 	andeq	r1, r0, r2, asr #18
     994:	0300342f 	movweq	r3, #1071	; 0x42f
     998:	3b0b3a0e 	blcc	2cf1d8 <__Stack_Size+0x2ce9d8>
     99c:	1c134905 	ldcne	9, cr4, [r3], {5}
     9a0:	3000000b 	andcc	r0, r0, fp
     9a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     9a8:	0b3a0e03 	bleq	e841bc <__Stack_Size+0xe839bc>
     9ac:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     9b0:	0b201349 	bleq	8056dc <__Stack_Size+0x804edc>
     9b4:	00001301 	andeq	r1, r0, r1, lsl #6
     9b8:	03000531 	movweq	r0, #1329	; 0x531
     9bc:	3b0b3a08 	blcc	2cf1e4 <__Stack_Size+0x2ce9e4>
     9c0:	00134905 	andseq	r4, r3, r5, lsl #18
     9c4:	00343200 	eorseq	r3, r4, r0, lsl #4
     9c8:	0b3a0e03 	bleq	e841dc <__Stack_Size+0xe839dc>
     9cc:	1349053b 	movtne	r0, #38203	; 0x953b
     9d0:	0b330000 	bleq	cc09d8 <__Stack_Size+0xcc01d8>
     9d4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     9d8:	34000006 	strcc	r0, [r0], #-6
     9dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     9e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     9e4:	17021349 	strne	r1, [r2, -r9, asr #6]
     9e8:	2e350000 	cdpcs	0, 3, cr0, cr5, cr0, {0}
     9ec:	03193f01 	tsteq	r9, #1, 30
     9f0:	3b0b3a0e 	blcc	2cf230 <__Stack_Size+0x2cea30>
     9f4:	11192705 	tstne	r9, r5, lsl #14
     9f8:	40061201 	andmi	r1, r6, r1, lsl #4
     9fc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     a00:	00001301 	andeq	r1, r0, r1, lsl #6
     a04:	03001636 	movweq	r1, #1590	; 0x636
     a08:	3b0b3a0e 	blcc	2cf248 <__Stack_Size+0x2cea48>
     a0c:	00134905 	andseq	r4, r3, r5, lsl #18
     a10:	012e3700 	teqeq	lr, r0, lsl #14
     a14:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     a18:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a1c:	01111349 	tsteq	r1, r9, asr #6
     a20:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a24:	01194297 			; <UNDEFINED> instruction: 0x01194297
     a28:	38000013 	stmdacc	r0, {r0, r1, r4}
     a2c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     a30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a34:	0d1c1349 	ldceq	3, cr1, [ip, #-292]	; 0xfffffedc
     a38:	89390000 	ldmdbhi	r9!, {}	; <UNPREDICTABLE>
     a3c:	11000182 	smlabbne	r0, r2, r1, r0
     a40:	00133101 	andseq	r3, r3, r1, lsl #2
     a44:	012e3a00 	teqeq	lr, r0, lsl #20
     a48:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     a4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a50:	13491927 	movtne	r1, #39207	; 0x9927
     a54:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a58:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     a5c:	00130119 	andseq	r0, r3, r9, lsl r1
     a60:	012e3b00 	teqeq	lr, r0, lsl #22
     a64:	01111331 	tsteq	r1, r1, lsr r3
     a68:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a6c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     a70:	3c000013 	stccc	0, cr0, [r0], {19}
     a74:	13310005 	teqne	r1, #5
     a78:	00001702 	andeq	r1, r0, r2, lsl #14
     a7c:	3100343d 	tstcc	r0, sp, lsr r4
     a80:	00170213 	andseq	r0, r7, r3, lsl r2
     a84:	00343e00 	eorseq	r3, r4, r0, lsl #28
     a88:	0b3a0e03 	bleq	e8429c <__Stack_Size+0xe83a9c>
     a8c:	1349053b 	movtne	r0, #38203	; 0x953b
     a90:	0000061c 	andeq	r0, r0, ip, lsl r6
     a94:	0300343f 	movweq	r3, #1087	; 0x43f
     a98:	3b0b3a0e 	blcc	2cf2d8 <__Stack_Size+0x2cead8>
     a9c:	3f13490b 	svccc	0x0013490b
     aa0:	00180219 	andseq	r0, r8, r9, lsl r2
     aa4:	012e4000 	teqeq	lr, r0
     aa8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     aac:	0b3b0b3a 	bleq	ec379c <__Stack_Size+0xec2f9c>
     ab0:	13491927 	movtne	r1, #39207	; 0x9927
     ab4:	1301193c 	movwne	r1, #6460	; 0x193c
     ab8:	05410000 	strbeq	r0, [r1, #-0]
     abc:	00134900 	andseq	r4, r3, r0, lsl #18
     ac0:	012e4200 	teqeq	lr, r0, lsl #4
     ac4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ac8:	13491927 	movtne	r1, #39207	; 0x9927
     acc:	193c1934 	ldmdbne	ip!, {r2, r4, r5, r8, fp, ip}
     ad0:	00001301 	andeq	r1, r0, r1, lsl #6
     ad4:	3f012e43 	svccc	0x00012e43
     ad8:	3a0e0319 	bcc	381744 <__Stack_Size+0x380f44>
     adc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     ae0:	01193c19 	tsteq	r9, r9, lsl ip
     ae4:	44000013 	strmi	r0, [r0], #-19
     ae8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     aec:	0b3a0e03 	bleq	e84300 <__Stack_Size+0xe83b00>
     af0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     af4:	0000193c 	andeq	r1, r0, ip, lsr r9
     af8:	01110100 	tsteq	r1, r0, lsl #2
     afc:	0b130e25 	bleq	4c4398 <__Stack_Size+0x4c3b98>
     b00:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     b04:	01111755 	tsteq	r1, r5, asr r7
     b08:	00001710 	andeq	r1, r0, r0, lsl r7
     b0c:	0b002402 	bleq	9b1c <__Stack_Size+0x931c>
     b10:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     b14:	0300000e 	movweq	r0, #14
     b18:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     b1c:	0b3b0b3a 	bleq	ec380c <__Stack_Size+0xec300c>
     b20:	00001349 	andeq	r1, r0, r9, asr #6
     b24:	0b002404 	bleq	9b3c <__Stack_Size+0x933c>
     b28:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     b2c:	05000008 	streq	r0, [r0, #-8]
     b30:	08030016 	stmdaeq	r3, {r1, r2, r4}
     b34:	0b3b0b3a 	bleq	ec3824 <__Stack_Size+0xec3024>
     b38:	00001349 	andeq	r1, r0, r9, asr #6
     b3c:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
     b40:	07000013 	smladeq	r0, r3, r0, r0
     b44:	0b0b0104 	bleq	2c0f5c <__Stack_Size+0x2c075c>
     b48:	0b3b0b3a 	bleq	ec3838 <__Stack_Size+0xec3038>
     b4c:	00001301 	andeq	r1, r0, r1, lsl #6
     b50:	03002808 	movweq	r2, #2056	; 0x808
     b54:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     b58:	000f0900 	andeq	r0, pc, r0, lsl #18
     b5c:	00000b0b 	andeq	r0, r0, fp, lsl #22
     b60:	0b000f0a 	bleq	4790 <__Stack_Size+0x3f90>
     b64:	0013490b 	andseq	r4, r3, fp, lsl #18
     b68:	00260b00 	eoreq	r0, r6, r0, lsl #22
     b6c:	00001349 	andeq	r1, r0, r9, asr #6
     b70:	0301130c 	movweq	r1, #4876	; 0x130c
     b74:	3a0b0b0e 	bcc	2c37b4 <__Stack_Size+0x2c2fb4>
     b78:	010b3b0b 	tsteq	fp, fp, lsl #22
     b7c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     b80:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     b84:	0b3b0b3a 	bleq	ec3874 <__Stack_Size+0xec3074>
     b88:	0b381349 	bleq	e058b4 <__Stack_Size+0xe050b4>
     b8c:	150e0000 	strne	r0, [lr, #-0]
     b90:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     b94:	00130113 	andseq	r0, r3, r3, lsl r1
     b98:	00050f00 	andeq	r0, r5, r0, lsl #30
     b9c:	00001349 	andeq	r1, r0, r9, asr #6
     ba0:	03011310 	movweq	r1, #4880	; 0x1310
     ba4:	3a0b0b08 	bcc	2c37cc <__Stack_Size+0x2c2fcc>
     ba8:	010b3b0b 	tsteq	fp, fp, lsl #22
     bac:	11000013 	tstne	r0, r3, lsl r0
     bb0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     bb4:	0b3b0b3a 	bleq	ec38a4 <__Stack_Size+0xec30a4>
     bb8:	0b381349 	bleq	e058e4 <__Stack_Size+0xe050e4>
     bbc:	17120000 	ldrne	r0, [r2, -r0]
     bc0:	3a0b0b01 	bcc	2c37cc <__Stack_Size+0x2c2fcc>
     bc4:	010b3b0b 	tsteq	fp, fp, lsl #22
     bc8:	13000013 	movwne	r0, #19
     bcc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     bd0:	0b3b0b3a 	bleq	ec38c0 <__Stack_Size+0xec30c0>
     bd4:	00001349 	andeq	r1, r0, r9, asr #6
     bd8:	03010414 	movweq	r0, #5140	; 0x1414
     bdc:	3a0b0b0e 	bcc	2c381c <__Stack_Size+0x2c301c>
     be0:	010b3b0b 	tsteq	fp, fp, lsl #22
     be4:	15000013 	strne	r0, [r0, #-19]
     be8:	08030028 	stmdaeq	r3, {r3, r5}
     bec:	00000d1c 	andeq	r0, r0, ip, lsl sp
     bf0:	0b011316 	bleq	45850 <__Stack_Size+0x45050>
     bf4:	3b0b3a0b 	blcc	2cf428 <__Stack_Size+0x2cec28>
     bf8:	0013010b 	andseq	r0, r3, fp, lsl #2
     bfc:	01011700 	tsteq	r1, r0, lsl #14
     c00:	13011349 	movwne	r1, #4937	; 0x1349
     c04:	21180000 	tstcs	r8, r0
     c08:	2f134900 	svccs	0x00134900
     c0c:	1900000b 	stmdbne	r0, {r0, r1, r3}
     c10:	13490021 	movtne	r0, #36897	; 0x9021
     c14:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
     c18:	03193f01 	tsteq	r9, #1, 30
     c1c:	3b0b3a0e 	blcc	2cf45c <__Stack_Size+0x2cec5c>
     c20:	1119270b 	tstne	r9, fp, lsl #14
     c24:	40061201 	andmi	r1, r6, r1, lsl #4
     c28:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     c2c:	00001301 	andeq	r1, r0, r1, lsl #6
     c30:	0182891b 	orreq	r8, r2, fp, lsl r9
     c34:	31011101 	tstcc	r1, r1, lsl #2
     c38:	00130113 	andseq	r0, r3, r3, lsl r1
     c3c:	828a1c00 	addhi	r1, sl, #0, 24
     c40:	18020001 	stmdane	r2, {r0}
     c44:	00184291 	mulseq	r8, r1, r2
     c48:	82891d00 	addhi	r1, r9, #0, 26
     c4c:	01110101 	tsteq	r1, r1, lsl #2
     c50:	31194295 			; <UNDEFINED> instruction: 0x31194295
     c54:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     c58:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c5c:	0b3a0e03 	bleq	e84470 <__Stack_Size+0xe83c70>
     c60:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     c64:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c68:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     c6c:	00130119 	andseq	r0, r3, r9, lsl r1
     c70:	00341f00 	eorseq	r1, r4, r0, lsl #30
     c74:	0b3a0e03 	bleq	e84488 <__Stack_Size+0xe83c88>
     c78:	1349053b 	movtne	r0, #38203	; 0x953b
     c7c:	00001702 	andeq	r1, r0, r2, lsl #14
     c80:	01828920 	orreq	r8, r2, r0, lsr #18
     c84:	31011100 	mrscc	r1, (UNDEF: 17)
     c88:	21000013 	tstcs	r0, r3, lsl r0
     c8c:	00018289 	andeq	r8, r1, r9, lsl #5
     c90:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     c94:	00133119 	andseq	r3, r3, r9, lsl r1
     c98:	002e2200 	eoreq	r2, lr, r0, lsl #4
     c9c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ca0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ca4:	01111927 	tsteq	r1, r7, lsr #18
     ca8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     cac:	00194297 	mulseq	r9, r7, r2
     cb0:	012e2300 	teqeq	lr, r0, lsl #6
     cb4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     cb8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     cbc:	13491927 	movtne	r1, #39207	; 0x9927
     cc0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     cc4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     cc8:	00130119 	andseq	r0, r3, r9, lsl r1
     ccc:	00052400 	andeq	r2, r5, r0, lsl #8
     cd0:	0b3a0e03 	bleq	e844e4 <__Stack_Size+0xe83ce4>
     cd4:	1349053b 	movtne	r0, #38203	; 0x953b
     cd8:	00001702 	andeq	r1, r0, r2, lsl #14
     cdc:	03003425 	movweq	r3, #1061	; 0x425
     ce0:	3b0b3a08 	blcc	2cf508 <__Stack_Size+0x2ced08>
     ce4:	02134905 	andseq	r4, r3, #81920	; 0x14000
     ce8:	26000017 			; <UNDEFINED> instruction: 0x26000017
     cec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     cf0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     cf4:	00001349 	andeq	r1, r0, r9, asr #6
     cf8:	01828927 	orreq	r8, r2, r7, lsr #18
     cfc:	31011101 	tstcc	r1, r1, lsl #2
     d00:	28000013 	stmdacs	r0, {r0, r1, r4}
     d04:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d08:	0b3a0e03 	bleq	e8451c <__Stack_Size+0xe83d1c>
     d0c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d10:	01111349 	tsteq	r1, r9, asr #6
     d14:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d18:	01194297 			; <UNDEFINED> instruction: 0x01194297
     d1c:	29000013 	stmdbcs	r0, {r0, r1, r4}
     d20:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     d24:	0b3b0b3a 	bleq	ec3a14 <__Stack_Size+0xec3214>
     d28:	17021349 	strne	r1, [r2, -r9, asr #6]
     d2c:	0b2a0000 	bleq	a80d34 <__Stack_Size+0xa80534>
     d30:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     d34:	00130106 	andseq	r0, r3, r6, lsl #2
     d38:	00342b00 	eorseq	r2, r4, r0, lsl #22
     d3c:	0b3a0e03 	bleq	e84550 <__Stack_Size+0xe83d50>
     d40:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d44:	00001802 	andeq	r1, r0, r2, lsl #16
     d48:	0300342c 	movweq	r3, #1068	; 0x42c
     d4c:	3b0b3a08 	blcc	2cf574 <__Stack_Size+0x2ced74>
     d50:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d54:	2d000017 	stccs	0, cr0, [r0, #-92]	; 0xffffffa4
     d58:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     d5c:	0b3a0e03 	bleq	e84570 <__Stack_Size+0xe83d70>
     d60:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     d64:	01111349 	tsteq	r1, r9, asr #6
     d68:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d6c:	00194297 	mulseq	r9, r7, r2
     d70:	00052e00 	andeq	r2, r5, r0, lsl #28
     d74:	0b3a0e03 	bleq	e84588 <__Stack_Size+0xe83d88>
     d78:	1349053b 	movtne	r0, #38203	; 0x953b
     d7c:	00001802 	andeq	r1, r0, r2, lsl #16
     d80:	3f002e2f 	svccc	0x00002e2f
     d84:	3a0e0319 	bcc	3819f0 <__Stack_Size+0x3811f0>
     d88:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d8c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d90:	97184006 	ldrls	r4, [r8, -r6]
     d94:	00001942 	andeq	r1, r0, r2, asr #18
     d98:	3f002e30 	svccc	0x00002e30
     d9c:	3a0e0319 	bcc	381a08 <__Stack_Size+0x381208>
     da0:	11053b0b 	tstne	r5, fp, lsl #22
     da4:	40061201 	andmi	r1, r6, r1, lsl #4
     da8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     dac:	21310000 	teqcs	r1, r0
     db0:	2f134900 	svccs	0x00134900
     db4:	32000005 	andcc	r0, r0, #5
     db8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     dbc:	0b3b0b3a 	bleq	ec3aac <__Stack_Size+0xec32ac>
     dc0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     dc4:	0000193c 	andeq	r1, r0, ip, lsr r9
     dc8:	03003433 	movweq	r3, #1075	; 0x433
     dcc:	3b0b3a0e 	blcc	2cf60c <__Stack_Size+0x2cee0c>
     dd0:	3f13490b 	svccc	0x0013490b
     dd4:	00180219 	andseq	r0, r8, r9, lsl r2
     dd8:	00343400 	eorseq	r3, r4, r0, lsl #8
     ddc:	0b3a0803 	bleq	e82df0 <__Stack_Size+0xe825f0>
     de0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     de4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     de8:	2e350000 	cdpcs	0, 3, cr0, cr5, cr0, {0}
     dec:	03193f01 	tsteq	r9, #1, 30
     df0:	3b0b3a0e 	blcc	2cf630 <__Stack_Size+0x2cee30>
     df4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     df8:	01193c13 	tsteq	r9, r3, lsl ip
     dfc:	36000013 			; <UNDEFINED> instruction: 0x36000013
     e00:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     e04:	0b3a0e03 	bleq	e84618 <__Stack_Size+0xe83e18>
     e08:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e0c:	1301193c 	movwne	r1, #6460	; 0x193c
     e10:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
     e14:	03193f00 	tsteq	r9, #0, 30
     e18:	3b0b3a0e 	blcc	2cf658 <__Stack_Size+0x2cee58>
     e1c:	3c192705 	ldccc	7, cr2, [r9], {5}
     e20:	38000019 	stmdacc	r0, {r0, r3, r4}
     e24:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     e28:	0b3a0e03 	bleq	e8463c <__Stack_Size+0xe83e3c>
     e2c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e30:	0000193c 	andeq	r1, r0, ip, lsr r9
     e34:	3f012e39 	svccc	0x00012e39
     e38:	3a0e0319 	bcc	381aa4 <__Stack_Size+0x3812a4>
     e3c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     e40:	3c134919 	ldccc	9, cr4, [r3], {25}
     e44:	00130119 	andseq	r0, r3, r9, lsl r1
     e48:	012e3a00 	teqeq	lr, r0, lsl #20
     e4c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e50:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e54:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     e58:	00001301 	andeq	r1, r0, r1, lsl #6
     e5c:	0000183b 	andeq	r1, r0, fp, lsr r8
     e60:	002e3c00 	eoreq	r3, lr, r0, lsl #24
     e64:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e6c:	13491927 	movtne	r1, #39207	; 0x9927
     e70:	0000193c 	andeq	r1, r0, ip, lsr r9
     e74:	01110100 	tsteq	r1, r0, lsl #2
     e78:	0b130e25 	bleq	4c4714 <__Stack_Size+0x4c3f14>
     e7c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     e80:	01111755 	tsteq	r1, r5, asr r7
     e84:	00001710 	andeq	r1, r0, r0, lsl r7
     e88:	0b002402 	bleq	9e98 <__Stack_Size+0x9698>
     e8c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     e90:	0300000e 	movweq	r0, #14
     e94:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     e98:	0b3b0b3a 	bleq	ec3b88 <__Stack_Size+0xec3388>
     e9c:	00001349 	andeq	r1, r0, r9, asr #6
     ea0:	0b002404 	bleq	9eb8 <__Stack_Size+0x96b8>
     ea4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ea8:	05000008 	streq	r0, [r0, #-8]
     eac:	0e03012e 	adfeqsp	f0, f3, #0.5
     eb0:	0b3b0b3a 	bleq	ec3ba0 <__Stack_Size+0xec33a0>
     eb4:	0b201927 	bleq	807358 <__Stack_Size+0x806b58>
     eb8:	00001301 	andeq	r1, r0, r1, lsl #6
     ebc:	03000506 	movweq	r0, #1286	; 0x506
     ec0:	3b0b3a08 	blcc	2cf6e8 <__Stack_Size+0x2ceee8>
     ec4:	0013490b 	andseq	r4, r3, fp, lsl #18
     ec8:	000f0700 	andeq	r0, pc, r0, lsl #14
     ecc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     ed0:	26080000 	strcs	r0, [r8], -r0
     ed4:	00134900 	andseq	r4, r3, r0, lsl #18
     ed8:	00340900 	eorseq	r0, r4, r0, lsl #18
     edc:	0b3a0803 	bleq	e82ef0 <__Stack_Size+0xe826f0>
     ee0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ee4:	010a0000 	mrseq	r0, (UNDEF: 10)
     ee8:	01134901 	tsteq	r3, r1, lsl #18
     eec:	0b000013 	bleq	f40 <__Stack_Size+0x740>
     ef0:	13490021 	movtne	r0, #36897	; 0x9021
     ef4:	00000b2f 	andeq	r0, r0, pc, lsr #22
     ef8:	0300340c 	movweq	r3, #1036	; 0x40c
     efc:	3b0b3a0e 	blcc	2cf73c <__Stack_Size+0x2cef3c>
     f00:	0013490b 	andseq	r4, r3, fp, lsl #18
     f04:	012e0d00 	teqeq	lr, r0, lsl #26
     f08:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     f0c:	0b3b0b3a 	bleq	ec3bfc <__Stack_Size+0xec33fc>
     f10:	01111927 	tsteq	r1, r7, lsr #18
     f14:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f18:	01194297 			; <UNDEFINED> instruction: 0x01194297
     f1c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     f20:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     f24:	0b3b0b3a 	bleq	ec3c14 <__Stack_Size+0xec3414>
     f28:	17021349 	strne	r1, [r2, -r9, asr #6]
     f2c:	050f0000 	streq	r0, [pc, #-0]	; f34 <__Stack_Size+0x734>
     f30:	3a080300 	bcc	201b38 <__Stack_Size+0x201338>
     f34:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f38:	00170213 	andseq	r0, r7, r3, lsl r2
     f3c:	00341000 	eorseq	r1, r4, r0
     f40:	0b3a0803 	bleq	e82f54 <__Stack_Size+0xe82754>
     f44:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f48:	00001802 	andeq	r1, r0, r2, lsl #16
     f4c:	03003411 	movweq	r3, #1041	; 0x411
     f50:	3b0b3a08 	blcc	2cf778 <__Stack_Size+0x2cef78>
     f54:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     f58:	12000017 	andne	r0, r0, #23
     f5c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     f60:	17550152 			; <UNDEFINED> instruction: 0x17550152
     f64:	0b590b58 	bleq	1643ccc <__Stack_Size+0x16434cc>
     f68:	00001301 	andeq	r1, r0, r1, lsl #6
     f6c:	31000513 	tstcc	r0, r3, lsl r5
     f70:	00170213 	andseq	r0, r7, r3, lsl r2
     f74:	010b1400 	tsteq	fp, r0, lsl #8
     f78:	13011755 	movwne	r1, #5973	; 0x1755
     f7c:	05150000 	ldreq	r0, [r5, #-0]
     f80:	00133100 	andseq	r3, r3, r0, lsl #2
     f84:	010b1600 	tsteq	fp, r0, lsl #12
     f88:	00001755 	andeq	r1, r0, r5, asr r7
     f8c:	31003417 	tstcc	r0, r7, lsl r4
     f90:	00180213 	andseq	r0, r8, r3, lsl r2
     f94:	82891800 	addhi	r1, r9, #0, 16
     f98:	01110101 	tsteq	r1, r1, lsl #2
     f9c:	13011331 	movwne	r1, #4913	; 0x1331
     fa0:	8a190000 	bhi	640fa8 <__Stack_Size+0x6407a8>
     fa4:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     fa8:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     fac:	891a0000 	ldmdbhi	sl, {}	; <UNPREDICTABLE>
     fb0:	11010182 	smlabbne	r1, r2, r1, r0
     fb4:	00133101 	andseq	r3, r3, r1, lsl #2
     fb8:	011d1b00 	tsteq	sp, r0, lsl #22
     fbc:	01111331 	tsteq	r1, r1, lsr r3
     fc0:	0b580612 	bleq	1602810 <__Stack_Size+0x1602010>
     fc4:	13010b59 	movwne	r0, #7001	; 0x1b59
     fc8:	0b1c0000 	bleq	700fd0 <__Stack_Size+0x7007d0>
     fcc:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     fd0:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
     fd4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     fd8:	0b3b0b3a 	bleq	ec3cc8 <__Stack_Size+0xec34c8>
     fdc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     fe0:	0000193c 	andeq	r1, r0, ip, lsr r9
     fe4:	0300341e 	movweq	r3, #1054	; 0x41e
     fe8:	3b0b3a0e 	blcc	2cf828 <__Stack_Size+0x2cf028>
     fec:	3f13490b 	svccc	0x0013490b
     ff0:	00180219 	andseq	r0, r8, r9, lsl r2
     ff4:	012e1f00 	teqeq	lr, r0, lsl #30
     ff8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ffc:	0b3b0b3a 	bleq	ec3cec <__Stack_Size+0xec34ec>
    1000:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    1004:	00001301 	andeq	r1, r0, r1, lsl #6
    1008:	49000520 	stmdbmi	r0, {r5, r8, sl}
    100c:	21000013 	tstcs	r0, r3, lsl r0
    1010:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1014:	0b3a0e03 	bleq	e84828 <__Stack_Size+0xe84028>
    1018:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    101c:	0000193c 	andeq	r1, r0, ip, lsr r9
    1020:	01110100 	tsteq	r1, r0, lsl #2
    1024:	0b130e25 	bleq	4c48c0 <__Stack_Size+0x4c40c0>
    1028:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    102c:	01111755 	tsteq	r1, r5, asr r7
    1030:	00001710 	andeq	r1, r0, r0, lsl r7
    1034:	0b002402 	bleq	a044 <__Stack_Size+0x9844>
    1038:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    103c:	0300000e 	movweq	r0, #14
    1040:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1044:	0b3b0b3a 	bleq	ec3d34 <__Stack_Size+0xec3534>
    1048:	00001349 	andeq	r1, r0, r9, asr #6
    104c:	0b002404 	bleq	a064 <__Stack_Size+0x9864>
    1050:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1054:	05000008 	streq	r0, [r0, #-8]
    1058:	0b0b000f 	bleq	2c109c <__Stack_Size+0x2c089c>
    105c:	13060000 	movwne	r0, #24576	; 0x6000
    1060:	0b0e0301 	bleq	381c6c <__Stack_Size+0x38146c>
    1064:	3b0b3a0b 	blcc	2cf898 <__Stack_Size+0x2cf098>
    1068:	0013010b 	andseq	r0, r3, fp, lsl #2
    106c:	000d0700 	andeq	r0, sp, r0, lsl #14
    1070:	0b3a0803 	bleq	e83084 <__Stack_Size+0xe82884>
    1074:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1078:	00000b38 	andeq	r0, r0, r8, lsr fp
    107c:	49010108 	stmdbmi	r1, {r3, r8}
    1080:	00130113 	andseq	r0, r3, r3, lsl r1
    1084:	00210900 	eoreq	r0, r1, r0, lsl #18
    1088:	0b2f1349 	bleq	bc5db4 <__Stack_Size+0xbc55b4>
    108c:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
    1090:	3a0e0301 	bcc	381c9c <__Stack_Size+0x38149c>
    1094:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1098:	010b2019 	tsteq	fp, r9, lsl r0
    109c:	0b000013 	bleq	10f0 <__Stack_Size+0x8f0>
    10a0:	08030005 	stmdaeq	r3, {r0, r2}
    10a4:	0b3b0b3a 	bleq	ec3d94 <__Stack_Size+0xec3594>
    10a8:	00001349 	andeq	r1, r0, r9, asr #6
    10ac:	0b000f0c 	bleq	4ce4 <__Stack_Size+0x44e4>
    10b0:	0013490b 	andseq	r4, r3, fp, lsl #18
    10b4:	00260d00 	eoreq	r0, r6, r0, lsl #26
    10b8:	00001349 	andeq	r1, r0, r9, asr #6
    10bc:	3f012e0e 	svccc	0x00012e0e
    10c0:	3a0e0319 	bcc	381d2c <__Stack_Size+0x38152c>
    10c4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    10c8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    10cc:	97184006 	ldrls	r4, [r8, -r6]
    10d0:	13011942 	movwne	r1, #6466	; 0x1942
    10d4:	050f0000 	streq	r0, [pc, #-0]	; 10dc <__Stack_Size+0x8dc>
    10d8:	3a080300 	bcc	201ce0 <__Stack_Size+0x2014e0>
    10dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10e0:	00170213 	andseq	r0, r7, r3, lsl r2
    10e4:	011d1000 	tsteq	sp, r0
    10e8:	01111331 	tsteq	r1, r1, lsr r3
    10ec:	0b580612 	bleq	160293c <__Stack_Size+0x160213c>
    10f0:	13010b59 	movwne	r0, #7001	; 0x1b59
    10f4:	05110000 	ldreq	r0, [r1, #-0]
    10f8:	02133100 	andseq	r3, r3, #0, 2
    10fc:	12000017 	andne	r0, r0, #23
    1100:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1104:	17550152 			; <UNDEFINED> instruction: 0x17550152
    1108:	0b590b58 	bleq	1643e70 <__Stack_Size+0x1643670>
    110c:	00001301 	andeq	r1, r0, r1, lsl #6
    1110:	31000513 	tstcc	r0, r3, lsl r5
    1114:	14000013 	strne	r0, [r0], #-19
    1118:	01018289 	smlabbeq	r1, r9, r2, r8
    111c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1120:	00001301 	andeq	r1, r0, r1, lsl #6
    1124:	01828a15 	orreq	r8, r2, r5, lsl sl
    1128:	91180200 	tstls	r8, r0, lsl #4
    112c:	00001842 	andeq	r1, r0, r2, asr #16
    1130:	01828916 	orreq	r8, r2, r6, lsl r9
    1134:	95011101 	strls	r1, [r1, #-257]	; 0x101
    1138:	13311942 	teqne	r1, #1081344	; 0x108000
    113c:	34170000 	ldrcc	r0, [r7], #-0
    1140:	3a080300 	bcc	201d48 <__Stack_Size+0x201548>
    1144:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1148:	00180213 	andseq	r0, r8, r3, lsl r2
    114c:	82891800 	addhi	r1, r9, #0, 16
    1150:	01110101 	tsteq	r1, r1, lsl #2
    1154:	00001331 	andeq	r1, r0, r1, lsr r3
    1158:	03003419 	movweq	r3, #1049	; 0x419
    115c:	3b0b3a0e 	blcc	2cf99c <__Stack_Size+0x2cf19c>
    1160:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1164:	1a000017 	bne	11c8 <__Stack_Size+0x9c8>
    1168:	13310005 	teqne	r1, #5
    116c:	00001802 	andeq	r1, r0, r2, lsl #16
    1170:	3f012e1b 	svccc	0x00012e1b
    1174:	3a0e0319 	bcc	381de0 <__Stack_Size+0x3815e0>
    1178:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    117c:	11134919 	tstne	r3, r9, lsl r9
    1180:	40061201 	andmi	r1, r6, r1, lsl #4
    1184:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1188:	00001301 	andeq	r1, r0, r1, lsl #6
    118c:	0300051c 	movweq	r0, #1308	; 0x51c
    1190:	3b0b3a0e 	blcc	2cf9d0 <__Stack_Size+0x2cf1d0>
    1194:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1198:	1d000017 	stcne	0, cr0, [r0, #-92]	; 0xffffffa4
    119c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    11a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    11a4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    11a8:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
    11ac:	03193f01 	tsteq	r9, #1, 30
    11b0:	3b0b3a0e 	blcc	2cf9f0 <__Stack_Size+0x2cf1f0>
    11b4:	11192705 	tstne	r9, r5, lsl #14
    11b8:	40061201 	andmi	r1, r6, r1, lsl #4
    11bc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    11c0:	00001301 	andeq	r1, r0, r1, lsl #6
    11c4:	0300051f 	movweq	r0, #1311	; 0x51f
    11c8:	3b0b3a0e 	blcc	2cfa08 <__Stack_Size+0x2cf208>
    11cc:	02134905 	andseq	r4, r3, #81920	; 0x14000
    11d0:	20000017 	andcs	r0, r0, r7, lsl r0
    11d4:	08030005 	stmdaeq	r3, {r0, r2}
    11d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    11dc:	17021349 	strne	r1, [r2, -r9, asr #6]
    11e0:	34210000 	strtcc	r0, [r1], #-0
    11e4:	3a080300 	bcc	201dec <__Stack_Size+0x2015ec>
    11e8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    11ec:	00170213 	andseq	r0, r7, r3, lsl r2
    11f0:	011d2200 	tsteq	sp, r0, lsl #4
    11f4:	01111331 	tsteq	r1, r1, lsr r3
    11f8:	0b580612 	bleq	1602a48 <__Stack_Size+0x1602248>
    11fc:	13010559 	movwne	r0, #5465	; 0x1559
    1200:	0b230000 	bleq	8c1208 <__Stack_Size+0x8c0a08>
    1204:	01175501 	tsteq	r7, r1, lsl #10
    1208:	24000013 	strcs	r0, [r0], #-19
    120c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1210:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1214:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    1218:	34250000 	strtcc	r0, [r5], #-0
    121c:	3a0e0300 	bcc	381e24 <__Stack_Size+0x381624>
    1220:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1224:	00180213 	andseq	r0, r8, r3, lsl r2
    1228:	00342600 	eorseq	r2, r4, r0, lsl #12
    122c:	0b3a0e03 	bleq	e84a40 <__Stack_Size+0xe84240>
    1230:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1234:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1238:	34270000 	strtcc	r0, [r7], #-0
    123c:	3a0e0300 	bcc	381e44 <__Stack_Size+0x381644>
    1240:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1244:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    1248:	28000018 	stmdacs	r0, {r3, r4}
    124c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1250:	0b3a0e03 	bleq	e84a64 <__Stack_Size+0xe84264>
    1254:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1258:	1301193c 	movwne	r1, #6460	; 0x193c
    125c:	05290000 	streq	r0, [r9, #-0]!
    1260:	00134900 	andseq	r4, r3, r0, lsl #18
    1264:	012e2a00 	teqeq	lr, r0, lsl #20
    1268:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    126c:	0b3b0b3a 	bleq	ec3f5c <__Stack_Size+0xec375c>
    1270:	13491927 	movtne	r1, #39207	; 0x9927
    1274:	1301193c 	movwne	r1, #6460	; 0x193c
    1278:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
    127c:	03193f01 	tsteq	r9, #1, 30
    1280:	4919270e 	ldmdbmi	r9, {r1, r2, r3, r8, r9, sl, sp}
    1284:	3c193413 	cfldrscc	mvf3, [r9], {19}
    1288:	00130119 	andseq	r0, r3, r9, lsl r1
    128c:	00262c00 	eoreq	r2, r6, r0, lsl #24
    1290:	01000000 	mrseq	r0, (UNDEF: 0)
    1294:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1298:	0e030b13 	vmoveq.32	d3[0], r0
    129c:	17550e1b 	smmlane	r5, fp, lr, r0
    12a0:	17100111 			; <UNDEFINED> instruction: 0x17100111
    12a4:	24020000 	strcs	r0, [r2], #-0
    12a8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    12ac:	000e030b 	andeq	r0, lr, fp, lsl #6
    12b0:	00160300 	andseq	r0, r6, r0, lsl #6
    12b4:	0b3a0e03 	bleq	e84ac8 <__Stack_Size+0xe842c8>
    12b8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    12bc:	24040000 	strcs	r0, [r4], #-0
    12c0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    12c4:	0008030b 	andeq	r0, r8, fp, lsl #6
    12c8:	000f0500 	andeq	r0, pc, r0, lsl #10
    12cc:	00000b0b 	andeq	r0, r0, fp, lsl #22
    12d0:	03011306 	movweq	r1, #4870	; 0x1306
    12d4:	3a0b0b0e 	bcc	2c3f14 <__Stack_Size+0x2c3714>
    12d8:	010b3b0b 	tsteq	fp, fp, lsl #22
    12dc:	07000013 	smladeq	r0, r3, r0, r0
    12e0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    12e4:	0b3b0b3a 	bleq	ec3fd4 <__Stack_Size+0xec37d4>
    12e8:	0b381349 	bleq	e06014 <__Stack_Size+0xe05814>
    12ec:	01080000 	mrseq	r0, (UNDEF: 8)
    12f0:	01134901 	tsteq	r3, r1, lsl #18
    12f4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    12f8:	13490021 	movtne	r0, #36897	; 0x9021
    12fc:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1300:	03012e0a 	movweq	r2, #7690	; 0x1e0a
    1304:	3b0b3a0e 	blcc	2cfb44 <__Stack_Size+0x2cf344>
    1308:	2019270b 	andscs	r2, r9, fp, lsl #14
    130c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1310:	00050b00 	andeq	r0, r5, r0, lsl #22
    1314:	0b3a0803 	bleq	e83328 <__Stack_Size+0xe82b28>
    1318:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    131c:	0f0c0000 	svceq	0x000c0000
    1320:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1324:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1328:	0e03012e 	adfeqsp	f0, f3, #0.5
    132c:	0b3b0b3a 	bleq	ec401c <__Stack_Size+0xec381c>
    1330:	01111927 	tsteq	r1, r7, lsr #18
    1334:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1338:	01194297 			; <UNDEFINED> instruction: 0x01194297
    133c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1340:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1344:	0b3b0b3a 	bleq	ec4034 <__Stack_Size+0xec3834>
    1348:	17021349 	strne	r1, [r2, -r9, asr #6]
    134c:	340f0000 	strcc	r0, [pc], #-0	; 1354 <__Stack_Size+0xb54>
    1350:	3a080300 	bcc	201f58 <__Stack_Size+0x201758>
    1354:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1358:	00180213 	andseq	r0, r8, r3, lsl r2
    135c:	011d1000 	tsteq	sp, r0
    1360:	01521331 	cmpeq	r2, r1, lsr r3
    1364:	0b581755 	bleq	16070c0 <__Stack_Size+0x16068c0>
    1368:	13010b59 	movwne	r0, #7001	; 0x1b59
    136c:	05110000 	ldreq	r0, [r1, #-0]
    1370:	02133100 	andseq	r3, r3, #0, 2
    1374:	12000017 	andne	r0, r0, #23
    1378:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    137c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1380:	0b590b58 	bleq	16440e8 <__Stack_Size+0x16438e8>
    1384:	00001301 	andeq	r1, r0, r1, lsl #6
    1388:	01828913 	orreq	r8, r2, r3, lsl r9
    138c:	31011101 	tstcc	r1, r1, lsl #2
    1390:	00130113 	andseq	r0, r3, r3, lsl r1
    1394:	828a1400 	addhi	r1, sl, #0, 8
    1398:	18020001 	stmdane	r2, {r0}
    139c:	00184291 	mulseq	r8, r1, r2
    13a0:	82891500 	addhi	r1, r9, #0, 10
    13a4:	01110101 	tsteq	r1, r1, lsl #2
    13a8:	00001331 	andeq	r1, r0, r1, lsr r3
    13ac:	49002616 	stmdbmi	r0, {r1, r2, r4, r9, sl, sp}
    13b0:	17000013 	smladne	r0, r3, r0, r0
    13b4:	08030005 	stmdaeq	r3, {r0, r2}
    13b8:	0b3b0b3a 	bleq	ec40a8 <__Stack_Size+0xec38a8>
    13bc:	17021349 	strne	r1, [r2, -r9, asr #6]
    13c0:	0b180000 	bleq	6013c8 <__Stack_Size+0x600bc8>
    13c4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    13c8:	00130106 	andseq	r0, r3, r6, lsl #2
    13cc:	00341900 	eorseq	r1, r4, r0, lsl #18
    13d0:	0b3a0803 	bleq	e833e4 <__Stack_Size+0xe82be4>
    13d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    13d8:	00001702 	andeq	r1, r0, r2, lsl #14
    13dc:	03012e1a 	movweq	r2, #7706	; 0x1e1a
    13e0:	3b0b3a08 	blcc	2cfc08 <__Stack_Size+0x2cf408>
    13e4:	2019270b 	andscs	r2, r9, fp, lsl #14
    13e8:	0013010b 	andseq	r0, r3, fp, lsl #2
    13ec:	00051b00 	andeq	r1, r5, r0, lsl #22
    13f0:	0b3a0e03 	bleq	e84c04 <__Stack_Size+0xe84404>
    13f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    13f8:	341c0000 	ldrcc	r0, [ip], #-0
    13fc:	3a080300 	bcc	202004 <__Stack_Size+0x201804>
    1400:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1404:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    1408:	0111010b 	tsteq	r1, fp, lsl #2
    140c:	00000612 	andeq	r0, r0, r2, lsl r6
    1410:	3100341e 	tstcc	r0, lr, lsl r4
    1414:	00180213 	andseq	r0, r8, r3, lsl r2
    1418:	012e1f00 	teqeq	lr, r0, lsl #30
    141c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1420:	0b3b0b3a 	bleq	ec4110 <__Stack_Size+0xec3910>
    1424:	01111927 	tsteq	r1, r7, lsr #18
    1428:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    142c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1430:	20000013 	andcs	r0, r0, r3, lsl r0
    1434:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1438:	0b3b0b3a 	bleq	ec4128 <__Stack_Size+0xec3928>
    143c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1440:	34210000 	strtcc	r0, [r1], #-0
    1444:	3a0e0300 	bcc	38204c <__Stack_Size+0x38184c>
    1448:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    144c:	22000013 	andcs	r0, r0, #19
    1450:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    1454:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    1458:	3a080301 	bcc	202064 <__Stack_Size+0x201864>
    145c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1460:	20134919 	andscs	r4, r3, r9, lsl r9
    1464:	0013010b 	andseq	r0, r3, fp, lsl #2
    1468:	012e2400 	teqeq	lr, r0, lsl #8
    146c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1470:	0b3b0b3a 	bleq	ec4160 <__Stack_Size+0xec3960>
    1474:	13491927 	movtne	r1, #39207	; 0x9927
    1478:	06120111 			; <UNDEFINED> instruction: 0x06120111
    147c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1480:	00130119 	andseq	r0, r3, r9, lsl r1
    1484:	00052500 	andeq	r2, r5, r0, lsl #10
    1488:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    148c:	34260000 	strtcc	r0, [r6], #-0
    1490:	02133100 	andseq	r3, r3, #0, 2
    1494:	27000017 	smladcs	r0, r7, r0, r0
    1498:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    149c:	0b3b0b3a 	bleq	ec418c <__Stack_Size+0xec398c>
    14a0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    14a4:	0000193c 	andeq	r1, r0, ip, lsr r9
    14a8:	3f012e28 	svccc	0x00012e28
    14ac:	3a0e0319 	bcc	382118 <__Stack_Size+0x381918>
    14b0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    14b4:	01193c19 	tsteq	r9, r9, lsl ip
    14b8:	29000013 	stmdbcs	r0, {r0, r1, r4}
    14bc:	13490005 	movtne	r0, #36869	; 0x9005
    14c0:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
    14c4:	03193f01 	tsteq	r9, #1, 30
    14c8:	4919270e 	ldmdbmi	r9, {r1, r2, r3, r8, r9, sl, sp}
    14cc:	3c193413 	cfldrscc	mvf3, [r9], {19}
    14d0:	00130119 	andseq	r0, r3, r9, lsl r1
    14d4:	00262b00 	eoreq	r2, r6, r0, lsl #22
    14d8:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
    14dc:	03193f01 	tsteq	r9, #1, 30
    14e0:	3b0b3a0e 	blcc	2cfd20 <__Stack_Size+0x2cf520>
    14e4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    14e8:	01193c13 	tsteq	r9, r3, lsl ip
    14ec:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
    14f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    14f4:	0b3a0e03 	bleq	e84d08 <__Stack_Size+0xe84508>
    14f8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    14fc:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    1500:	01000000 	mrseq	r0, (UNDEF: 0)
    1504:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1508:	0e030b13 	vmoveq.32	d3[0], r0
    150c:	17550e1b 	smmlane	r5, fp, lr, r0
    1510:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1514:	24020000 	strcs	r0, [r2], #-0
    1518:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    151c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1520:	00160300 	andseq	r0, r6, r0, lsl #6
    1524:	0b3a0e03 	bleq	e84d38 <__Stack_Size+0xe84538>
    1528:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    152c:	24040000 	strcs	r0, [r4], #-0
    1530:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1534:	0008030b 	andeq	r0, r8, fp, lsl #6
    1538:	000f0500 	andeq	r0, pc, r0, lsl #10
    153c:	00000b0b 	andeq	r0, r0, fp, lsl #22
    1540:	3f012e06 	svccc	0x00012e06
    1544:	3a0e0319 	bcc	3821b0 <__Stack_Size+0x3819b0>
    1548:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    154c:	010b2019 	tsteq	fp, r9, lsl r0
    1550:	07000013 	smladeq	r0, r3, r0, r0
    1554:	08030005 	stmdaeq	r3, {r0, r2}
    1558:	0b3b0b3a 	bleq	ec4248 <__Stack_Size+0xec3a48>
    155c:	00001349 	andeq	r1, r0, r9, asr #6
    1560:	03000508 	movweq	r0, #1288	; 0x508
    1564:	3b0b3a0e 	blcc	2cfda4 <__Stack_Size+0x2cf5a4>
    1568:	0013490b 	andseq	r4, r3, fp, lsl #18
    156c:	00340900 	eorseq	r0, r4, r0, lsl #18
    1570:	0b3a0e03 	bleq	e84d84 <__Stack_Size+0xe84584>
    1574:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1578:	340a0000 	strcc	r0, [sl], #-0
    157c:	3a080300 	bcc	202184 <__Stack_Size+0x201984>
    1580:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1584:	0b000013 	bleq	15d8 <__Stack_Size+0xdd8>
    1588:	0b0b000f 	bleq	2c15cc <__Stack_Size+0x2c0dcc>
    158c:	00001349 	andeq	r1, r0, r9, asr #6
    1590:	4900260c 	stmdbmi	r0, {r2, r3, r9, sl, sp}
    1594:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1598:	0e03012e 	adfeqsp	f0, f3, #0.5
    159c:	0b3b0b3a 	bleq	ec428c <__Stack_Size+0xec3a8c>
    15a0:	0b201927 	bleq	807a44 <__Stack_Size+0x807244>
    15a4:	00001301 	andeq	r1, r0, r1, lsl #6
    15a8:	31012e0e 	tstcc	r1, lr, lsl #28
    15ac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    15b0:	97184006 	ldrls	r4, [r8, -r6]
    15b4:	13011942 	movwne	r1, #6466	; 0x1942
    15b8:	050f0000 	streq	r0, [pc, #-0]	; 15c0 <__Stack_Size+0xdc0>
    15bc:	02133100 	andseq	r3, r3, #0, 2
    15c0:	10000017 	andne	r0, r0, r7, lsl r0
    15c4:	13310034 	teqne	r1, #52	; 0x34
    15c8:	00001702 	andeq	r1, r0, r2, lsl #14
    15cc:	01828911 	orreq	r8, r2, r1, lsl r9
    15d0:	95011101 	strls	r1, [r1, #-257]	; 0x101
    15d4:	13311942 	teqne	r1, #1081344	; 0x108000
    15d8:	8a120000 	bhi	4815e0 <__Stack_Size+0x480de0>
    15dc:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    15e0:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    15e4:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    15e8:	03193f01 	tsteq	r9, #1, 30
    15ec:	3b0b3a0e 	blcc	2cfe2c <__Stack_Size+0x2cf62c>
    15f0:	1119270b 	tstne	r9, fp, lsl #14
    15f4:	40061201 	andmi	r1, r6, r1, lsl #4
    15f8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    15fc:	00001301 	andeq	r1, r0, r1, lsl #6
    1600:	03000514 	movweq	r0, #1300	; 0x514
    1604:	3b0b3a08 	blcc	2cfe2c <__Stack_Size+0x2cf62c>
    1608:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    160c:	15000018 	strne	r0, [r0, #-24]
    1610:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1614:	0b3b0b3a 	bleq	ec4304 <__Stack_Size+0xec3b04>
    1618:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    161c:	34160000 	ldrcc	r0, [r6], #-0
    1620:	3a080300 	bcc	202228 <__Stack_Size+0x201a28>
    1624:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1628:	00170213 	andseq	r0, r7, r3, lsl r2
    162c:	011d1700 	tsteq	sp, r0, lsl #14
    1630:	01521331 	cmpeq	r2, r1, lsr r3
    1634:	0b581755 	bleq	1607390 <__Stack_Size+0x1606b90>
    1638:	00000b59 	andeq	r0, r0, r9, asr fp
    163c:	31000518 	tstcc	r0, r8, lsl r5
    1640:	00180213 	andseq	r0, r8, r3, lsl r2
    1644:	010b1900 	tsteq	fp, r0, lsl #18
    1648:	00001755 	andeq	r1, r0, r5, asr r7
    164c:	3100341a 	tstcc	r0, sl, lsl r4
    1650:	00180213 	andseq	r0, r8, r3, lsl r2
    1654:	01011b00 	tsteq	r1, r0, lsl #22
    1658:	13011349 	movwne	r1, #4937	; 0x1349
    165c:	211c0000 	tstcs	ip, r0
    1660:	2f134900 	svccs	0x00134900
    1664:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    1668:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    166c:	0b3a0e03 	bleq	e84e80 <__Stack_Size+0xe84680>
    1670:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1674:	01111349 	tsteq	r1, r9, asr #6
    1678:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    167c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1680:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    1684:	08030005 	stmdaeq	r3, {r0, r2}
    1688:	0b3b0b3a 	bleq	ec4378 <__Stack_Size+0xec3b78>
    168c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1690:	0b1f0000 	bleq	7c1698 <__Stack_Size+0x7c0e98>
    1694:	20000001 	andcs	r0, r0, r1
    1698:	0111010b 	tsteq	r1, fp, lsl #2
    169c:	00000612 	andeq	r0, r0, r2, lsl r6
    16a0:	03003421 	movweq	r3, #1057	; 0x421
    16a4:	3b0b3a08 	blcc	2cfecc <__Stack_Size+0x2cf6cc>
    16a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    16ac:	22000018 	andcs	r0, r0, #24
    16b0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    16b4:	17550152 			; <UNDEFINED> instruction: 0x17550152
    16b8:	0b590b58 	bleq	1644420 <__Stack_Size+0x1643c20>
    16bc:	00001301 	andeq	r1, r0, r1, lsl #6
    16c0:	31011d23 	tstcc	r1, r3, lsr #26
    16c4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    16c8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    16cc:	2400000b 	strcs	r0, [r0], #-11
    16d0:	13310005 	teqne	r1, #5
    16d4:	1d250000 	stcne	0, cr0, [r5, #-0]
    16d8:	11133101 	tstne	r3, r1, lsl #2
    16dc:	58061201 	stmdapl	r6, {r0, r9, ip}
    16e0:	010b590b 	tsteq	fp, fp, lsl #18
    16e4:	26000013 			; <UNDEFINED> instruction: 0x26000013
    16e8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    16ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
    16f0:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    16f4:	00001301 	andeq	r1, r0, r1, lsl #6
    16f8:	31011d27 	tstcc	r1, r7, lsr #26
    16fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1700:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1704:	28000005 	stmdacs	r0, {r0, r2}
    1708:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    170c:	0b3a0e03 	bleq	e84f20 <__Stack_Size+0xe84720>
    1710:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1714:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1718:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    171c:	00130119 	andseq	r0, r3, r9, lsl r1
    1720:	00052900 	andeq	r2, r5, r0, lsl #18
    1724:	0b3a0803 	bleq	e83738 <__Stack_Size+0xe82f38>
    1728:	1349053b 	movtne	r0, #38203	; 0x953b
    172c:	00001702 	andeq	r1, r0, r2, lsl #14
    1730:	0300342a 	movweq	r3, #1066	; 0x42a
    1734:	3b0b3a08 	blcc	2cff5c <__Stack_Size+0x2cf75c>
    1738:	02134905 	andseq	r4, r3, #81920	; 0x14000
    173c:	2b000018 	blcs	17a4 <__Stack_Size+0xfa4>
    1740:	01018289 	smlabbeq	r1, r9, r2, r8
    1744:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1748:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
    174c:	3a0e0301 	bcc	382358 <__Stack_Size+0x381b58>
    1750:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1754:	010b2019 	tsteq	fp, r9, lsl r0
    1758:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
    175c:	08030005 	stmdaeq	r3, {r0, r2}
    1760:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1764:	00001349 	andeq	r1, r0, r9, asr #6
    1768:	0300342e 	movweq	r3, #1070	; 0x42e
    176c:	3b0b3a08 	blcc	2cff94 <__Stack_Size+0x2cf794>
    1770:	00134905 	andseq	r4, r3, r5, lsl #18
    1774:	011d2f00 	tsteq	sp, r0, lsl #30
    1778:	01521331 	cmpeq	r2, r1, lsr r3
    177c:	0b581755 	bleq	16074d8 <__Stack_Size+0x1606cd8>
    1780:	13010559 	movwne	r0, #5465	; 0x1559
    1784:	05300000 	ldreq	r0, [r0, #-0]!
    1788:	1c133100 	ldfnes	f3, [r3], {-0}
    178c:	3100000b 	tstcc	r0, fp
    1790:	13310034 	teqne	r1, #52	; 0x34
    1794:	34320000 	ldrtcc	r0, [r2], #-0
    1798:	3a0e0300 	bcc	3823a0 <__Stack_Size+0x381ba0>
    179c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    17a0:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    17a4:	33000018 	movwcc	r0, #24
    17a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    17ac:	19270e03 	stmdbne	r7!, {r0, r1, r9, sl, fp}
    17b0:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
    17b4:	0000193c 	andeq	r1, r0, ip, lsr r9
    17b8:	49000534 	stmdbmi	r0, {r2, r4, r5, r8, sl}
    17bc:	00000013 	andeq	r0, r0, r3, lsl r0
    17c0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    17c4:	030b130e 	movweq	r1, #45838	; 0xb30e
    17c8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    17cc:	10011117 	andne	r1, r1, r7, lsl r1
    17d0:	02000017 	andeq	r0, r0, #23
    17d4:	0b0b0024 	bleq	2c186c <__Stack_Size+0x2c106c>
    17d8:	0e030b3e 	vmoveq.16	d3[0], r0
    17dc:	16030000 	strne	r0, [r3], -r0
    17e0:	3a0e0300 	bcc	3823e8 <__Stack_Size+0x381be8>
    17e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    17e8:	04000013 	streq	r0, [r0], #-19
    17ec:	0b0b0024 	bleq	2c1884 <__Stack_Size+0x2c1084>
    17f0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    17f4:	0f050000 	svceq	0x00050000
    17f8:	000b0b00 	andeq	r0, fp, r0, lsl #22
    17fc:	012e0600 	teqeq	lr, r0, lsl #12
    1800:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1804:	0b3b0b3a 	bleq	ec44f4 <__Stack_Size+0xec3cf4>
    1808:	0b201927 	bleq	807cac <__Stack_Size+0x8074ac>
    180c:	00001301 	andeq	r1, r0, r1, lsl #6
    1810:	03000507 	movweq	r0, #1287	; 0x507
    1814:	3b0b3a08 	blcc	2d003c <__Stack_Size+0x2cf83c>
    1818:	0013490b 	andseq	r4, r3, fp, lsl #18
    181c:	00050800 	andeq	r0, r5, r0, lsl #16
    1820:	0b3a0e03 	bleq	e85034 <__Stack_Size+0xe84834>
    1824:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1828:	34090000 	strcc	r0, [r9], #-0
    182c:	3a0e0300 	bcc	382434 <__Stack_Size+0x381c34>
    1830:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1834:	0a000013 	beq	1888 <__Stack_Size+0x1088>
    1838:	08030034 	stmdaeq	r3, {r2, r4, r5}
    183c:	0b3b0b3a 	bleq	ec452c <__Stack_Size+0xec3d2c>
    1840:	00001349 	andeq	r1, r0, r9, asr #6
    1844:	0b000f0b 	bleq	5478 <__Stack_Size+0x4c78>
    1848:	0013490b 	andseq	r4, r3, fp, lsl #18
    184c:	00260c00 	eoreq	r0, r6, r0, lsl #24
    1850:	00001349 	andeq	r1, r0, r9, asr #6
    1854:	03012e0d 	movweq	r2, #7693	; 0x1e0d
    1858:	3b0b3a0e 	blcc	2d0098 <__Stack_Size+0x2cf898>
    185c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1860:	010b2013 	tsteq	fp, r3, lsl r0
    1864:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1868:	0e03012e 	adfeqsp	f0, f3, #0.5
    186c:	0b3b0b3a 	bleq	ec455c <__Stack_Size+0xec3d5c>
    1870:	0b201927 	bleq	807d14 <__Stack_Size+0x807514>
    1874:	00001301 	andeq	r1, r0, r1, lsl #6
    1878:	31012e0f 	tstcc	r1, pc, lsl #28
    187c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1880:	97184006 	ldrls	r4, [r8, -r6]
    1884:	13011942 	movwne	r1, #6466	; 0x1942
    1888:	05100000 	ldreq	r0, [r0, #-0]
    188c:	02133100 	andseq	r3, r3, #0, 2
    1890:	11000017 	tstne	r0, r7, lsl r0
    1894:	13310034 	teqne	r1, #52	; 0x34
    1898:	00001702 	andeq	r1, r0, r2, lsl #14
    189c:	01828912 	orreq	r8, r2, r2, lsl r9
    18a0:	95011101 	strls	r1, [r1, #-257]	; 0x101
    18a4:	13311942 	teqne	r1, #1081344	; 0x108000
    18a8:	8a130000 	bhi	4c18b0 <__Stack_Size+0x4c10b0>
    18ac:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    18b0:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    18b4:	01140000 	tsteq	r4, r0
    18b8:	01134901 	tsteq	r3, r1, lsl #18
    18bc:	15000013 	strne	r0, [r0, #-19]
    18c0:	13490021 	movtne	r0, #36897	; 0x9021
    18c4:	00000b2f 	andeq	r0, r0, pc, lsr #22
    18c8:	3f012e16 	svccc	0x00012e16
    18cc:	3a0e0319 	bcc	382538 <__Stack_Size+0x381d38>
    18d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    18d4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    18d8:	97184006 	ldrls	r4, [r8, -r6]
    18dc:	13011942 	movwne	r1, #6466	; 0x1942
    18e0:	05170000 	ldreq	r0, [r7, #-0]
    18e4:	3a080300 	bcc	2024ec <__Stack_Size+0x201cec>
    18e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    18ec:	00170213 	andseq	r0, r7, r3, lsl r2
    18f0:	00051800 	andeq	r1, r5, r0, lsl #16
    18f4:	0b3a0e03 	bleq	e85108 <__Stack_Size+0xe84908>
    18f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    18fc:	00001702 	andeq	r1, r0, r2, lsl #14
    1900:	03003419 	movweq	r3, #1049	; 0x419
    1904:	3b0b3a0e 	blcc	2d0144 <__Stack_Size+0x2cf944>
    1908:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    190c:	1a000017 	bne	1970 <__Stack_Size+0x1170>
    1910:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1914:	0b3b0b3a 	bleq	ec4604 <__Stack_Size+0xec3e04>
    1918:	17021349 	strne	r1, [r2, -r9, asr #6]
    191c:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
    1920:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1924:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    1928:	010b590b 	tsteq	fp, fp, lsl #18
    192c:	1c000013 	stcne	0, cr0, [r0], {19}
    1930:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    1934:	1d1d0000 	ldcne	0, cr0, [sp, #-0]
    1938:	11133101 	tstne	r3, r1, lsl #2
    193c:	58061201 	stmdapl	r6, {r0, r9, ip}
    1940:	010b590b 	tsteq	fp, fp, lsl #18
    1944:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    1948:	13310005 	teqne	r1, #5
    194c:	0b1f0000 	bleq	7c1954 <__Stack_Size+0x7c1154>
    1950:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    1954:	20000006 	andcs	r0, r0, r6
    1958:	0111010b 	tsteq	r1, fp, lsl #2
    195c:	13010612 	movwne	r0, #5650	; 0x1612
    1960:	1d210000 	stcne	0, cr0, [r1, #-0]
    1964:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1968:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    196c:	000b590b 	andeq	r5, fp, fp, lsl #18
    1970:	00342200 	eorseq	r2, r4, r0, lsl #4
    1974:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    1978:	1d230000 	stcne	0, cr0, [r3, #-0]
    197c:	11133101 	tstne	r3, r1, lsl #2
    1980:	58061201 	stmdapl	r6, {r0, r9, ip}
    1984:	000b590b 	andeq	r5, fp, fp, lsl #18
    1988:	82892400 	addhi	r2, r9, #0, 8
    198c:	01110101 	tsteq	r1, r1, lsl #2
    1990:	00001331 	andeq	r1, r0, r1, lsr r3
    1994:	03003425 	movweq	r3, #1061	; 0x425
    1998:	3b0b3a08 	blcc	2d01c0 <__Stack_Size+0x2cf9c0>
    199c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    19a0:	26000018 			; <UNDEFINED> instruction: 0x26000018
    19a4:	13310005 	teqne	r1, #5
    19a8:	00001802 	andeq	r1, r0, r2, lsl #16
    19ac:	3f012e27 	svccc	0x00012e27
    19b0:	3a0e0319 	bcc	38261c <__Stack_Size+0x381e1c>
    19b4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    19b8:	11134919 	tstne	r3, r9, lsl r9
    19bc:	40061201 	andmi	r1, r6, r1, lsl #4
    19c0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    19c4:	00001301 	andeq	r1, r0, r1, lsl #6
    19c8:	03000528 	movweq	r0, #1320	; 0x528
    19cc:	3b0b3a08 	blcc	2d01f4 <__Stack_Size+0x2cf9f4>
    19d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    19d4:	29000018 	stmdbcs	r0, {r3, r4}
    19d8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    19dc:	0b3b0b3a 	bleq	ec46cc <__Stack_Size+0xec3ecc>
    19e0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    19e4:	0b2a0000 	bleq	a819ec <__Stack_Size+0xa811ec>
    19e8:	01175501 	tsteq	r7, r1, lsl #10
    19ec:	2b000013 	blcs	1a40 <__Stack_Size+0x1240>
    19f0:	01018289 	smlabbeq	r1, r9, r2, r8
    19f4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    19f8:	00001301 	andeq	r1, r0, r1, lsl #6
    19fc:	0300342c 	movweq	r3, #1068	; 0x42c
    1a00:	3b0b3a0e 	blcc	2d0240 <__Stack_Size+0x2cfa40>
    1a04:	3f13490b 	svccc	0x0013490b
    1a08:	00180219 	andseq	r0, r8, r9, lsl r2
    1a0c:	012e2d00 	teqeq	lr, r0, lsl #26
    1a10:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1a14:	13491927 	movtne	r1, #39207	; 0x9927
    1a18:	193c1934 	ldmdbne	ip!, {r2, r4, r5, r8, fp, ip}
    1a1c:	052e0000 	streq	r0, [lr, #-0]!
    1a20:	00134900 	andseq	r4, r3, r0, lsl #18
    1a24:	11010000 	mrsne	r0, (UNDEF: 1)
    1a28:	130e2501 	movwne	r2, #58625	; 0xe501
    1a2c:	1b0e030b 	blne	382660 <__Stack_Size+0x381e60>
    1a30:	1117550e 	tstne	r7, lr, lsl #10
    1a34:	00171001 	andseq	r1, r7, r1
    1a38:	00240200 	eoreq	r0, r4, r0, lsl #4
    1a3c:	0b3e0b0b 	bleq	f84670 <__Stack_Size+0xf83e70>
    1a40:	00000e03 	andeq	r0, r0, r3, lsl #28
    1a44:	03001603 	movweq	r1, #1539	; 0x603
    1a48:	3b0b3a0e 	blcc	2d0288 <__Stack_Size+0x2cfa88>
    1a4c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1a50:	00240400 	eoreq	r0, r4, r0, lsl #8
    1a54:	0b3e0b0b 	bleq	f84688 <__Stack_Size+0xf83e88>
    1a58:	00000803 	andeq	r0, r0, r3, lsl #16
    1a5c:	3f012e05 	svccc	0x00012e05
    1a60:	3a0e0319 	bcc	3826cc <__Stack_Size+0x381ecc>
    1a64:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1a68:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1a6c:	97184006 	ldrls	r4, [r8, -r6]
    1a70:	13011942 	movwne	r1, #6466	; 0x1942
    1a74:	05060000 	streq	r0, [r6, #-0]
    1a78:	3a0e0300 	bcc	382680 <__Stack_Size+0x381e80>
    1a7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a80:	00170213 	andseq	r0, r7, r3, lsl r2
    1a84:	00050700 	andeq	r0, r5, r0, lsl #14
    1a88:	0b3a0803 	bleq	e83a9c <__Stack_Size+0xe8329c>
    1a8c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1a90:	00001702 	andeq	r1, r0, r2, lsl #14
    1a94:	03003408 	movweq	r3, #1032	; 0x408
    1a98:	3b0b3a0e 	blcc	2d02d8 <__Stack_Size+0x2cfad8>
    1a9c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1aa0:	09000018 	stmdbeq	r0, {r3, r4}
    1aa4:	01018289 	smlabbeq	r1, r9, r2, r8
    1aa8:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1aac:	00001301 	andeq	r1, r0, r1, lsl #6
    1ab0:	01828a0a 	orreq	r8, r2, sl, lsl #20
    1ab4:	91180200 	tstls	r8, r0, lsl #4
    1ab8:	00001842 	andeq	r1, r0, r2, asr #16
    1abc:	0182890b 	orreq	r8, r2, fp, lsl #18
    1ac0:	31011101 	tstcc	r1, r1, lsl #2
    1ac4:	0c000013 	stceq	0, cr0, [r0], {19}
    1ac8:	0b0b000f 	bleq	2c1b0c <__Stack_Size+0x2c130c>
    1acc:	00001349 	andeq	r1, r0, r9, asr #6
    1ad0:	4900260d 	stmdbmi	r0, {r0, r2, r3, r9, sl, sp}
    1ad4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1ad8:	13490101 	movtne	r0, #37121	; 0x9101
    1adc:	00001301 	andeq	r1, r0, r1, lsl #6
    1ae0:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
    1ae4:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1ae8:	012e1000 	teqeq	lr, r0
    1aec:	0b3a0e03 	bleq	e85300 <__Stack_Size+0xe84b00>
    1af0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1af4:	13010b20 	movwne	r0, #6944	; 0x1b20
    1af8:	05110000 	ldreq	r0, [r1, #-0]
    1afc:	3a080300 	bcc	202704 <__Stack_Size+0x201f04>
    1b00:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b04:	12000013 	andne	r0, r0, #19
    1b08:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1b0c:	0b3b0b3a 	bleq	ec47fc <__Stack_Size+0xec3ffc>
    1b10:	00001349 	andeq	r1, r0, r9, asr #6
    1b14:	03012e13 	movweq	r2, #7699	; 0x1e13
    1b18:	3b0b3a0e 	blcc	2d0358 <__Stack_Size+0x2cfb58>
    1b1c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1b20:	010b2013 	tsteq	fp, r3, lsl r0
    1b24:	14000013 	strne	r0, [r0], #-19
    1b28:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1b2c:	0b3b0b3a 	bleq	ec481c <__Stack_Size+0xec401c>
    1b30:	00001349 	andeq	r1, r0, r9, asr #6
    1b34:	03003415 	movweq	r3, #1045	; 0x415
    1b38:	3b0b3a08 	blcc	2d0360 <__Stack_Size+0x2cfb60>
    1b3c:	1c13490b 	ldcne	9, cr4, [r3], {11}
    1b40:	1600000a 	strne	r0, [r0], -sl
    1b44:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1b48:	0b3a0e03 	bleq	e8535c <__Stack_Size+0xe84b5c>
    1b4c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1b50:	01111349 	tsteq	r1, r9, asr #6
    1b54:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1b58:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1b5c:	17000013 	smladne	r0, r3, r0, r0
    1b60:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1b64:	17550152 			; <UNDEFINED> instruction: 0x17550152
    1b68:	0b590b58 	bleq	16448d0 <__Stack_Size+0x16440d0>
    1b6c:	00001301 	andeq	r1, r0, r1, lsl #6
    1b70:	31000518 	tstcc	r0, r8, lsl r5
    1b74:	00170213 	andseq	r0, r7, r3, lsl r2
    1b78:	010b1900 	tsteq	fp, r0, lsl #18
    1b7c:	00001755 	andeq	r1, r0, r5, asr r7
    1b80:	3100341a 	tstcc	r0, sl, lsl r4
    1b84:	00180213 	andseq	r0, r8, r3, lsl r2
    1b88:	011d1b00 	tsteq	sp, r0, lsl #22
    1b8c:	01111331 	tsteq	r1, r1, lsr r3
    1b90:	0b580612 	bleq	16033e0 <__Stack_Size+0x1602be0>
    1b94:	13010b59 	movwne	r0, #7001	; 0x1b59
    1b98:	0b1c0000 	bleq	701ba0 <__Stack_Size+0x7013a0>
    1b9c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    1ba0:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    1ba4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1ba8:	0b3b0b3a 	bleq	ec4898 <__Stack_Size+0xec4098>
    1bac:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1bb0:	0000193c 	andeq	r1, r0, ip, lsr r9
    1bb4:	3f012e1e 	svccc	0x00012e1e
    1bb8:	3a0e0319 	bcc	382824 <__Stack_Size+0x382024>
    1bbc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1bc0:	01193c19 	tsteq	r9, r9, lsl ip
    1bc4:	1f000013 	svcne	0x00000013
    1bc8:	13490005 	movtne	r0, #36869	; 0x9005
    1bcc:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    1bd0:	03193f01 	tsteq	r9, #1, 30
    1bd4:	3b0b3a0e 	blcc	2d0414 <__Stack_Size+0x2cfc14>
    1bd8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1bdc:	00193c13 	andseq	r3, r9, r3, lsl ip
    1be0:	11010000 	mrsne	r0, (UNDEF: 1)
    1be4:	130e2501 	movwne	r2, #58625	; 0xe501
    1be8:	1b0e030b 	blne	38281c <__Stack_Size+0x38201c>
    1bec:	1117550e 	tstne	r7, lr, lsl #10
    1bf0:	00171001 	andseq	r1, r7, r1
    1bf4:	00240200 	eoreq	r0, r4, r0, lsl #4
    1bf8:	0b3e0b0b 	bleq	f8482c <__Stack_Size+0xf8402c>
    1bfc:	00000803 	andeq	r0, r0, r3, lsl #16
    1c00:	0b002403 	bleq	ac14 <__Stack_Size+0xa414>
    1c04:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1c08:	0400000e 	streq	r0, [r0], #-14
    1c0c:	0b0b000f 	bleq	2c1c50 <__Stack_Size+0x2c1450>
    1c10:	0f050000 	svceq	0x00050000
    1c14:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1c18:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1c1c:	0b0b0113 	bleq	2c2070 <__Stack_Size+0x2c1870>
    1c20:	0b3b0b3a 	bleq	ec4910 <__Stack_Size+0xec4110>
    1c24:	00001301 	andeq	r1, r0, r1, lsl #6
    1c28:	03000d07 	movweq	r0, #3335	; 0xd07
    1c2c:	3b0b3a0e 	blcc	2d046c <__Stack_Size+0x2cfc6c>
    1c30:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1c34:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1c38:	13490101 	movtne	r0, #37121	; 0x9101
    1c3c:	00001301 	andeq	r1, r0, r1, lsl #6
    1c40:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    1c44:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1c48:	00160a00 	andseq	r0, r6, r0, lsl #20
    1c4c:	0b3a0e03 	bleq	e85460 <__Stack_Size+0xe84c60>
    1c50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1c54:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
    1c58:	03193f01 	tsteq	r9, #1, 30
    1c5c:	3b0b3a0e 	blcc	2d049c <__Stack_Size+0x2cfc9c>
    1c60:	2019270b 	andscs	r2, r9, fp, lsl #14
    1c64:	0013010b 	andseq	r0, r3, fp, lsl #2
    1c68:	00050c00 	andeq	r0, r5, r0, lsl #24
    1c6c:	0b3a0803 	bleq	e83c80 <__Stack_Size+0xe83480>
    1c70:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1c74:	050d0000 	streq	r0, [sp, #-0]
    1c78:	3a0e0300 	bcc	382880 <__Stack_Size+0x382080>
    1c7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c80:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1c84:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1c88:	0b3b0b3a 	bleq	ec4978 <__Stack_Size+0xec4178>
    1c8c:	00001349 	andeq	r1, r0, r9, asr #6
    1c90:	3f012e0f 	svccc	0x00012e0f
    1c94:	3a0e0319 	bcc	382900 <__Stack_Size+0x382100>
    1c98:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1c9c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1ca0:	97184006 	ldrls	r4, [r8, -r6]
    1ca4:	13011942 	movwne	r1, #6466	; 0x1942
    1ca8:	05100000 	ldreq	r0, [r0, #-0]
    1cac:	3a080300 	bcc	2028b4 <__Stack_Size+0x2020b4>
    1cb0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1cb4:	00180213 	andseq	r0, r8, r3, lsl r2
    1cb8:	00051100 	andeq	r1, r5, r0, lsl #2
    1cbc:	0b3a0803 	bleq	e83cd0 <__Stack_Size+0xe834d0>
    1cc0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1cc4:	00001702 	andeq	r1, r0, r2, lsl #14
    1cc8:	03000512 	movweq	r0, #1298	; 0x512
    1ccc:	3b0b3a0e 	blcc	2d050c <__Stack_Size+0x2cfd0c>
    1cd0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1cd4:	13000017 	movwne	r0, #23
    1cd8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1cdc:	0b3b0b3a 	bleq	ec49cc <__Stack_Size+0xec41cc>
    1ce0:	17021349 	strne	r1, [r2, -r9, asr #6]
    1ce4:	34140000 	ldrcc	r0, [r4], #-0
    1ce8:	3a080300 	bcc	2028f0 <__Stack_Size+0x2020f0>
    1cec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1cf0:	00170213 	andseq	r0, r7, r3, lsl r2
    1cf4:	012e1500 	teqeq	lr, r0, lsl #10
    1cf8:	01111331 	tsteq	r1, r1, lsr r3
    1cfc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1d00:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1d04:	16000013 			; <UNDEFINED> instruction: 0x16000013
    1d08:	13310005 	teqne	r1, #5
    1d0c:	00001702 	andeq	r1, r0, r2, lsl #14
    1d10:	31003417 	tstcc	r0, r7, lsl r4
    1d14:	18000013 	stmdane	r0, {r0, r1, r4}
    1d18:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    1d1c:	34190000 	ldrcc	r0, [r9], #-0
    1d20:	02133100 	andseq	r3, r3, #0, 2
    1d24:	1a000017 	bne	1d88 <__Stack_Size+0x1588>
    1d28:	01018289 	smlabbeq	r1, r9, r2, r8
    1d2c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1d30:	00001301 	andeq	r1, r0, r1, lsl #6
    1d34:	01828a1b 	orreq	r8, r2, fp, lsl sl
    1d38:	91180200 	tstls	r8, r0, lsl #4
    1d3c:	00001842 	andeq	r1, r0, r2, asr #16
    1d40:	0182891c 	orreq	r8, r2, ip, lsl r9
    1d44:	95011100 	strls	r1, [r1, #-256]	; 0x100
    1d48:	13311942 	teqne	r1, #1081344	; 0x108000
    1d4c:	891d0000 	ldmdbhi	sp, {}	; <UNPREDICTABLE>
    1d50:	11010182 	smlabbne	r1, r2, r1, r0
    1d54:	00133101 	andseq	r3, r3, r1, lsl #2
    1d58:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1d5c:	0b3a0e03 	bleq	e85570 <__Stack_Size+0xe84d70>
    1d60:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1d64:	00001802 	andeq	r1, r0, r2, lsl #16
    1d68:	31011d1f 	tstcc	r1, pc, lsl sp
    1d6c:	55015213 	strpl	r5, [r1, #-531]	; 0x213
    1d70:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    1d74:	00130105 	andseq	r0, r3, r5, lsl #2
    1d78:	00052000 	andeq	r2, r5, r0
    1d7c:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    1d80:	1d210000 	stcne	0, cr0, [r1, #-0]
    1d84:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1d88:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    1d8c:	0005590b 	andeq	r5, r5, fp, lsl #18
    1d90:	00342200 	eorseq	r2, r4, r0, lsl #4
    1d94:	0b3a0803 	bleq	e83da8 <__Stack_Size+0xe835a8>
    1d98:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1d9c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1da0:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    1da4:	03193f01 	tsteq	r9, #1, 30
    1da8:	4919270e 	ldmdbmi	r9, {r1, r2, r3, r8, r9, sl, sp}
    1dac:	3c193413 	cfldrscc	mvf3, [r9], {19}
    1db0:	00130119 	andseq	r0, r3, r9, lsl r1
    1db4:	00052400 	andeq	r2, r5, r0, lsl #8
    1db8:	00001349 	andeq	r1, r0, r9, asr #6
    1dbc:	00002625 	andeq	r2, r0, r5, lsr #12
    1dc0:	11010000 	mrsne	r0, (UNDEF: 1)
    1dc4:	130e2501 	movwne	r2, #58625	; 0xe501
    1dc8:	1b0e030b 	blne	3829fc <__Stack_Size+0x3821fc>
    1dcc:	1117550e 	tstne	r7, lr, lsl #10
    1dd0:	00171001 	andseq	r1, r7, r1
    1dd4:	00240200 	eoreq	r0, r4, r0, lsl #4
    1dd8:	0b3e0b0b 	bleq	f84a0c <__Stack_Size+0xf8420c>
    1ddc:	00000e03 	andeq	r0, r0, r3, lsl #28
    1de0:	03001603 	movweq	r1, #1539	; 0x603
    1de4:	3b0b3a0e 	blcc	2d0624 <__Stack_Size+0x2cfe24>
    1de8:	0013490b 	andseq	r4, r3, fp, lsl #18
    1dec:	00240400 	eoreq	r0, r4, r0, lsl #8
    1df0:	0b3e0b0b 	bleq	f84a24 <__Stack_Size+0xf84224>
    1df4:	00000803 	andeq	r0, r0, r3, lsl #16
    1df8:	0b000f05 	bleq	5a14 <__Stack_Size+0x5214>
    1dfc:	0600000b 	streq	r0, [r0], -fp
    1e00:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1e04:	0b3a0b0b 	bleq	e84a38 <__Stack_Size+0xe84238>
    1e08:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1e0c:	0d070000 	stceq	0, cr0, [r7, #-0]
    1e10:	3a080300 	bcc	202a18 <__Stack_Size+0x202218>
    1e14:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e18:	000b3813 	andeq	r3, fp, r3, lsl r8
    1e1c:	01010800 	tsteq	r1, r0, lsl #16
    1e20:	13011349 	movwne	r1, #4937	; 0x1349
    1e24:	21090000 	mrscs	r0, (UNDEF: 9)
    1e28:	2f134900 	svccs	0x00134900
    1e2c:	0a00000b 	beq	1e60 <__Stack_Size+0x1660>
    1e30:	0e03012e 	adfeqsp	f0, f3, #0.5
    1e34:	0b3b0b3a 	bleq	ec4b24 <__Stack_Size+0xec4324>
    1e38:	13491927 	movtne	r1, #39207	; 0x9927
    1e3c:	13010b20 	movwne	r0, #6944	; 0x1b20
    1e40:	050b0000 	streq	r0, [fp, #-0]
    1e44:	3a080300 	bcc	202a4c <__Stack_Size+0x20224c>
    1e48:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e4c:	0c000013 	stceq	0, cr0, [r0], {19}
    1e50:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1e54:	0b3b0b3a 	bleq	ec4b44 <__Stack_Size+0xec4344>
    1e58:	00001349 	andeq	r1, r0, r9, asr #6
    1e5c:	03012e0d 	movweq	r2, #7693	; 0x1e0d
    1e60:	3b0b3a0e 	blcc	2d06a0 <__Stack_Size+0x2cfea0>
    1e64:	2019270b 	andscs	r2, r9, fp, lsl #14
    1e68:	0013010b 	andseq	r0, r3, fp, lsl #2
    1e6c:	000f0e00 	andeq	r0, pc, r0, lsl #28
    1e70:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1e74:	340f0000 	strcc	r0, [pc], #-0	; 1e7c <__Stack_Size+0x167c>
    1e78:	3a080300 	bcc	202a80 <__Stack_Size+0x202280>
    1e7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e80:	10000013 	andne	r0, r0, r3, lsl r0
    1e84:	13490026 	movtne	r0, #36902	; 0x9026
    1e88:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    1e8c:	03193f01 	tsteq	r9, #1, 30
    1e90:	3b0b3a0e 	blcc	2d06d0 <__Stack_Size+0x2cfed0>
    1e94:	1119270b 	tstne	r9, fp, lsl #14
    1e98:	40061201 	andmi	r1, r6, r1, lsl #4
    1e9c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1ea0:	00001301 	andeq	r1, r0, r1, lsl #6
    1ea4:	03000512 	movweq	r0, #1298	; 0x512
    1ea8:	3b0b3a08 	blcc	2d06d0 <__Stack_Size+0x2cfed0>
    1eac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1eb0:	13000017 	movwne	r0, #23
    1eb4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1eb8:	0b3b0b3a 	bleq	ec4ba8 <__Stack_Size+0xec43a8>
    1ebc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1ec0:	34140000 	ldrcc	r0, [r4], #-0
    1ec4:	3a080300 	bcc	202acc <__Stack_Size+0x2022cc>
    1ec8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ecc:	00170213 	andseq	r0, r7, r3, lsl r2
    1ed0:	011d1500 	tsteq	sp, r0, lsl #10
    1ed4:	01521331 	cmpeq	r2, r1, lsr r3
    1ed8:	0b581755 	bleq	1607c34 <__Stack_Size+0x1607434>
    1edc:	13010b59 	movwne	r0, #7001	; 0x1b59
    1ee0:	05160000 	ldreq	r0, [r6, #-0]
    1ee4:	02133100 	andseq	r3, r3, #0, 2
    1ee8:	17000017 	smladne	r0, r7, r0, r0
    1eec:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    1ef0:	34180000 	ldrcc	r0, [r8], #-0
    1ef4:	02133100 	andseq	r3, r3, #0, 2
    1ef8:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    1efc:	0111010b 	tsteq	r1, fp, lsl #2
    1f00:	00000612 	andeq	r0, r0, r2, lsl r6
    1f04:	0300341a 	movweq	r3, #1050	; 0x41a
    1f08:	3b0b3a0e 	blcc	2d0748 <__Stack_Size+0x2cff48>
    1f0c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1f10:	1b000017 	blne	1f74 <__Stack_Size+0x1774>
    1f14:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1f18:	17550152 			; <UNDEFINED> instruction: 0x17550152
    1f1c:	0b590b58 	bleq	1644c84 <__Stack_Size+0x1644484>
    1f20:	051c0000 	ldreq	r0, [ip, #-0]
    1f24:	3a0e0300 	bcc	382b2c <__Stack_Size+0x38232c>
    1f28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f2c:	00170213 	andseq	r0, r7, r3, lsl r2
    1f30:	00341d00 	eorseq	r1, r4, r0, lsl #26
    1f34:	0b3a0e03 	bleq	e85748 <__Stack_Size+0xe84f48>
    1f38:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1f3c:	00001802 	andeq	r1, r0, r2, lsl #16
    1f40:	0182891e 	orreq	r8, r2, lr, lsl r9
    1f44:	31011101 	tstcc	r1, r1, lsl #2
    1f48:	00130113 	andseq	r0, r3, r3, lsl r1
    1f4c:	828a1f00 	addhi	r1, sl, #0, 30
    1f50:	18020001 	stmdane	r2, {r0}
    1f54:	00184291 	mulseq	r8, r1, r2
    1f58:	82892000 	addhi	r2, r9, #0
    1f5c:	01110101 	tsteq	r1, r1, lsl #2
    1f60:	00001331 	andeq	r1, r0, r1, lsr r3
    1f64:	11010b21 	tstne	r1, r1, lsr #22
    1f68:	01061201 	tsteq	r6, r1, lsl #4
    1f6c:	22000013 	andcs	r0, r0, #19
    1f70:	13310005 	teqne	r1, #5
    1f74:	34230000 	strtcc	r0, [r3], #-0
    1f78:	3a0e0300 	bcc	382b80 <__Stack_Size+0x382380>
    1f7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f80:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    1f84:	24000018 	strcs	r0, [r0], #-24
    1f88:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1f8c:	19270e03 	stmdbne	r7!, {r0, r1, r9, sl, fp}
    1f90:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
    1f94:	1301193c 	movwne	r1, #6460	; 0x193c
    1f98:	05250000 	streq	r0, [r5, #-0]!
    1f9c:	00134900 	andseq	r4, r3, r0, lsl #18
    1fa0:	00262600 	eoreq	r2, r6, r0, lsl #12
    1fa4:	01000000 	mrseq	r0, (UNDEF: 0)
    1fa8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1fac:	0e030b13 	vmoveq.32	d3[0], r0
    1fb0:	17550e1b 	smmlane	r5, fp, lr, r0
    1fb4:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1fb8:	04020000 	streq	r0, [r2], #-0
    1fbc:	3a0b0b01 	bcc	2c4bc8 <__Stack_Size+0x2c43c8>
    1fc0:	010b3b0b 	tsteq	fp, fp, lsl #22
    1fc4:	03000013 	movweq	r0, #19
    1fc8:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1fcc:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1fd0:	03001604 	movweq	r1, #1540	; 0x604
    1fd4:	3b0b3a0e 	blcc	2d0814 <__Stack_Size+0x2d0014>
    1fd8:	0013490b 	andseq	r4, r3, fp, lsl #18
    1fdc:	01130500 	tsteq	r3, r0, lsl #10
    1fe0:	0b3a0b0b 	bleq	e84c14 <__Stack_Size+0xe84414>
    1fe4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1fe8:	0d060000 	stceq	0, cr0, [r6, #-0]
    1fec:	3a0e0300 	bcc	382bf4 <__Stack_Size+0x3823f4>
    1ff0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ff4:	000b3813 	andeq	r3, fp, r3, lsl r8
    1ff8:	00240700 	eoreq	r0, r4, r0, lsl #14
    1ffc:	0b3e0b0b 	bleq	f84c30 <__Stack_Size+0xf84430>
    2000:	00000e03 	andeq	r0, r0, r3, lsl #28
    2004:	3f012e08 	svccc	0x00012e08
    2008:	3a0e0319 	bcc	382c74 <__Stack_Size+0x382474>
    200c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2010:	11134919 	tstne	r3, r9, lsl r9
    2014:	40061201 	andmi	r1, r6, r1, lsl #4
    2018:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    201c:	00001301 	andeq	r1, r0, r1, lsl #6
    2020:	03000509 	movweq	r0, #1289	; 0x509
    2024:	3b0b3a0e 	blcc	2d0864 <__Stack_Size+0x2d0064>
    2028:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    202c:	0a000017 	beq	2090 <__Stack_Size+0x1890>
    2030:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2034:	0b3b0b3a 	bleq	ec4d24 <__Stack_Size+0xec4524>
    2038:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    203c:	340b0000 	strcc	r0, [fp], #-0
    2040:	3a0e0300 	bcc	382c48 <__Stack_Size+0x382448>
    2044:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2048:	000b1c13 	andeq	r1, fp, r3, lsl ip
    204c:	00240c00 	eoreq	r0, r4, r0, lsl #24
    2050:	0b3e0b0b 	bleq	f84c84 <__Stack_Size+0xf84484>
    2054:	00000803 	andeq	r0, r0, r3, lsl #16
    2058:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
    205c:	00130113 	andseq	r0, r3, r3, lsl r1
    2060:	00210e00 	eoreq	r0, r1, r0, lsl #28
    2064:	0b2f1349 	bleq	bc6d90 <__Stack_Size+0xbc6590>
    2068:	260f0000 	strcs	r0, [pc], -r0
    206c:	00134900 	andseq	r4, r3, r0, lsl #18
    2070:	012e1000 	teqeq	lr, r0
    2074:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2078:	0b3b0b3a 	bleq	ec4d68 <__Stack_Size+0xec4568>
    207c:	01111927 	tsteq	r1, r7, lsr #18
    2080:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2084:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2088:	11000013 	tstne	r0, r3, lsl r0
    208c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2090:	0b3b0b3a 	bleq	ec4d80 <__Stack_Size+0xec4580>
    2094:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2098:	0f120000 	svceq	0x00120000
    209c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    20a0:	13000013 	movwne	r0, #19
    20a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    20a8:	0b3b0b3a 	bleq	ec4d98 <__Stack_Size+0xec4598>
    20ac:	17021349 	strne	r1, [r2, -r9, asr #6]
    20b0:	34140000 	ldrcc	r0, [r4], #-0
    20b4:	3a0e0300 	bcc	382cbc <__Stack_Size+0x3824bc>
    20b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    20bc:	15000013 	strne	r0, [r0, #-19]
    20c0:	00018289 	andeq	r8, r1, r9, lsl #5
    20c4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    20c8:	01000000 	mrseq	r0, (UNDEF: 0)
    20cc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    20d0:	0e030b13 	vmoveq.32	d3[0], r0
    20d4:	17550e1b 	smmlane	r5, fp, lr, r0
    20d8:	17100111 			; <UNDEFINED> instruction: 0x17100111
    20dc:	04020000 	streq	r0, [r2], #-0
    20e0:	3a0b0b01 	bcc	2c4cec <__Stack_Size+0x2c44ec>
    20e4:	010b3b0b 	tsteq	fp, fp, lsl #22
    20e8:	03000013 	movweq	r0, #19
    20ec:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    20f0:	00000d1c 	andeq	r0, r0, ip, lsl sp
    20f4:	03001604 	movweq	r1, #1540	; 0x604
    20f8:	3b0b3a0e 	blcc	2d0938 <__Stack_Size+0x2d0138>
    20fc:	0013490b 	andseq	r4, r3, fp, lsl #18
    2100:	01130500 	tsteq	r3, r0, lsl #10
    2104:	0b3a0b0b 	bleq	e84d38 <__Stack_Size+0xe84538>
    2108:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    210c:	0d060000 	stceq	0, cr0, [r6, #-0]
    2110:	3a0e0300 	bcc	382d18 <__Stack_Size+0x382518>
    2114:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2118:	000b3813 	andeq	r3, fp, r3, lsl r8
    211c:	00240700 	eoreq	r0, r4, r0, lsl #14
    2120:	0b3e0b0b 	bleq	f84d54 <__Stack_Size+0xf84554>
    2124:	00000e03 	andeq	r0, r0, r3, lsl #28
    2128:	0b002408 	bleq	b150 <__Stack_Size+0xa950>
    212c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2130:	09000008 	stmdbeq	r0, {r3}
    2134:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2138:	0b3a0e03 	bleq	e8594c <__Stack_Size+0xe8514c>
    213c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2140:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2144:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2148:	00130119 	andseq	r0, r3, r9, lsl r1
    214c:	00050a00 	andeq	r0, r5, r0, lsl #20
    2150:	0b3a0e03 	bleq	e85964 <__Stack_Size+0xe85164>
    2154:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2158:	00001802 	andeq	r1, r0, r2, lsl #16
    215c:	0b000f0b 	bleq	5d90 <__Stack_Size+0x5590>
    2160:	0013490b 	andseq	r4, r3, fp, lsl #18
    2164:	012e0c00 	teqeq	lr, r0, lsl #24
    2168:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    216c:	0b3b0b3a 	bleq	ec4e5c <__Stack_Size+0xec465c>
    2170:	13491927 	movtne	r1, #39207	; 0x9927
    2174:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2178:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    217c:	00130119 	andseq	r0, r3, r9, lsl r1
    2180:	00050d00 	andeq	r0, r5, r0, lsl #26
    2184:	0b3a0e03 	bleq	e85998 <__Stack_Size+0xe85198>
    2188:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    218c:	00001702 	andeq	r1, r0, r2, lsl #14
    2190:	0300340e 	movweq	r3, #1038	; 0x40e
    2194:	3b0b3a0e 	blcc	2d09d4 <__Stack_Size+0x2d01d4>
    2198:	0013490b 	andseq	r4, r3, fp, lsl #18
    219c:	00260f00 	eoreq	r0, r6, r0, lsl #30
    21a0:	00001349 	andeq	r1, r0, r9, asr #6
    21a4:	03003410 	movweq	r3, #1040	; 0x410
    21a8:	3b0b3a0e 	blcc	2d09e8 <__Stack_Size+0x2d01e8>
    21ac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    21b0:	11000017 	tstne	r0, r7, lsl r0
    21b4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    21b8:	0b3b0b3a 	bleq	ec4ea8 <__Stack_Size+0xec46a8>
    21bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    21c0:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
    21c4:	11010182 	smlabbne	r1, r2, r1, r0
    21c8:	01133101 	tsteq	r3, r1, lsl #2
    21cc:	13000013 	movwne	r0, #19
    21d0:	0001828a 	andeq	r8, r1, sl, lsl #5
    21d4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    21d8:	14000018 	strne	r0, [r0], #-24
    21dc:	01018289 	smlabbeq	r1, r9, r2, r8
    21e0:	13310111 	teqne	r1, #1073741828	; 0x40000004
    21e4:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
    21e8:	11000182 	smlabbne	r0, r2, r1, r0
    21ec:	00133101 	andseq	r3, r3, r1, lsl #2
    21f0:	00341600 	eorseq	r1, r4, r0, lsl #12
    21f4:	0b3a0e03 	bleq	e85a08 <__Stack_Size+0xe85208>
    21f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    21fc:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    2200:	01000000 	mrseq	r0, (UNDEF: 0)
    2204:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2208:	0e030b13 	vmoveq.32	d3[0], r0
    220c:	17550e1b 	smmlane	r5, fp, lr, r0
    2210:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2214:	16020000 	strne	r0, [r2], -r0
    2218:	3a0e0300 	bcc	382e20 <__Stack_Size+0x382620>
    221c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2220:	03000013 	movweq	r0, #19
    2224:	0b0b0024 	bleq	2c22bc <__Stack_Size+0x2c1abc>
    2228:	0e030b3e 	vmoveq.16	d3[0], r0
    222c:	0f040000 	svceq	0x00040000
    2230:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2234:	00240500 	eoreq	r0, r4, r0, lsl #10
    2238:	0b3e0b0b 	bleq	f84e6c <__Stack_Size+0xf8466c>
    223c:	00000803 	andeq	r0, r0, r3, lsl #16
    2240:	0b000f06 	bleq	5e60 <__Stack_Size+0x5660>
    2244:	0013490b 	andseq	r4, r3, fp, lsl #18
    2248:	00260700 	eoreq	r0, r6, r0, lsl #14
    224c:	00001349 	andeq	r1, r0, r9, asr #6
    2250:	03001608 	movweq	r1, #1544	; 0x608
    2254:	3b0b3a08 	blcc	2d0a7c <__Stack_Size+0x2d027c>
    2258:	0013490b 	andseq	r4, r3, fp, lsl #18
    225c:	00350900 	eorseq	r0, r5, r0, lsl #18
    2260:	00001349 	andeq	r1, r0, r9, asr #6
    2264:	0b01040a 	bleq	43294 <__Stack_Size+0x42a94>
    2268:	3b0b3a0b 	blcc	2d0a9c <__Stack_Size+0x2d029c>
    226c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2270:	00280b00 	eoreq	r0, r8, r0, lsl #22
    2274:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    2278:	130c0000 	movwne	r0, #49152	; 0xc000
    227c:	0b0e0301 	bleq	382e88 <__Stack_Size+0x382688>
    2280:	3b0b3a0b 	blcc	2d0ab4 <__Stack_Size+0x2d02b4>
    2284:	00130105 	andseq	r0, r3, r5, lsl #2
    2288:	000d0d00 	andeq	r0, sp, r0, lsl #26
    228c:	0b3a0e03 	bleq	e85aa0 <__Stack_Size+0xe852a0>
    2290:	1349053b 	movtne	r0, #38203	; 0x953b
    2294:	00000b38 	andeq	r0, r0, r8, lsr fp
    2298:	0b01130e 	bleq	46ed8 <__Stack_Size+0x466d8>
    229c:	3b0b3a0b 	blcc	2d0ad0 <__Stack_Size+0x2d02d0>
    22a0:	0013010b 	andseq	r0, r3, fp, lsl #2
    22a4:	000d0f00 	andeq	r0, sp, r0, lsl #30
    22a8:	0b3a0e03 	bleq	e85abc <__Stack_Size+0xe852bc>
    22ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    22b0:	00000b38 	andeq	r0, r0, r8, lsr fp
    22b4:	49010110 	stmdbmi	r1, {r4, r8}
    22b8:	00130113 	andseq	r0, r3, r3, lsl r1
    22bc:	00211100 	eoreq	r1, r1, r0, lsl #2
    22c0:	0b2f1349 	bleq	bc6fec <__Stack_Size+0xbc67ec>
    22c4:	13120000 	tstne	r2, #0
    22c8:	0b0e0301 	bleq	382ed4 <__Stack_Size+0x3826d4>
    22cc:	3b0b3a0b 	blcc	2d0b00 <__Stack_Size+0x2d0300>
    22d0:	0013010b 	andseq	r0, r3, fp, lsl #2
    22d4:	00211300 	eoreq	r1, r1, r0, lsl #6
    22d8:	00001349 	andeq	r1, r0, r9, asr #6
    22dc:	3f012e14 	svccc	0x00012e14
    22e0:	3a0e0319 	bcc	382f4c <__Stack_Size+0x38274c>
    22e4:	110b3b0b 	tstne	fp, fp, lsl #22
    22e8:	40061201 	andmi	r1, r6, r1, lsl #4
    22ec:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    22f0:	00001301 	andeq	r1, r0, r1, lsl #6
    22f4:	01828915 	orreq	r8, r2, r5, lsl r9
    22f8:	31011101 	tstcc	r1, r1, lsl #2
    22fc:	00130113 	andseq	r0, r3, r3, lsl r1
    2300:	828a1600 	addhi	r1, sl, #0, 12
    2304:	18020001 	stmdane	r2, {r0}
    2308:	00184291 	mulseq	r8, r1, r2
    230c:	82891700 	addhi	r1, r9, #0, 14
    2310:	01110101 	tsteq	r1, r1, lsl #2
    2314:	31194295 			; <UNDEFINED> instruction: 0x31194295
    2318:	18000013 	stmdane	r0, {r0, r1, r4}
    231c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2320:	0b3a0e03 	bleq	e85b34 <__Stack_Size+0xe85334>
    2324:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2328:	01111349 	tsteq	r1, r9, asr #6
    232c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2330:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2334:	19000013 	stmdbne	r0, {r0, r1, r4}
    2338:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    233c:	0b3b0b3a 	bleq	ec502c <__Stack_Size+0xec482c>
    2340:	17021349 	strne	r1, [r2, -r9, asr #6]
    2344:	341a0000 	ldrcc	r0, [sl], #-0
    2348:	3a080300 	bcc	202f50 <__Stack_Size+0x202750>
    234c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2350:	00170213 	andseq	r0, r7, r3, lsl r2
    2354:	00341b00 	eorseq	r1, r4, r0, lsl #22
    2358:	0b3a0e03 	bleq	e85b6c <__Stack_Size+0xe8536c>
    235c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2360:	00001802 	andeq	r1, r0, r2, lsl #16
    2364:	0300341c 	movweq	r3, #1052	; 0x41c
    2368:	3b0b3a0e 	blcc	2d0ba8 <__Stack_Size+0x2d03a8>
    236c:	1c13490b 	ldcne	9, cr4, [r3], {11}
    2370:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    2374:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2378:	0b3b0b3a 	bleq	ec5068 <__Stack_Size+0xec4868>
    237c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2380:	341e0000 	ldrcc	r0, [lr], #-0
    2384:	3a080300 	bcc	202f8c <__Stack_Size+0x20278c>
    2388:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    238c:	00180213 	andseq	r0, r8, r3, lsl r2
    2390:	00341f00 	eorseq	r1, r4, r0, lsl #30
    2394:	13491934 	movtne	r1, #39220	; 0x9934
    2398:	00001702 	andeq	r1, r0, r2, lsl #14
    239c:	03003420 	movweq	r3, #1056	; 0x420
    23a0:	3b0b3a0e 	blcc	2d0be0 <__Stack_Size+0x2d03e0>
    23a4:	0013490b 	andseq	r4, r3, fp, lsl #18
    23a8:	012e2100 	teqeq	lr, r0, lsl #2
    23ac:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    23b0:	0b3b0b3a 	bleq	ec50a0 <__Stack_Size+0xec48a0>
    23b4:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    23b8:	00001301 	andeq	r1, r0, r1, lsl #6
    23bc:	00001822 	andeq	r1, r0, r2, lsr #16
    23c0:	010b2300 	mrseq	r2, (UNDEF: 59)
    23c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    23c8:	00001301 	andeq	r1, r0, r1, lsl #6
    23cc:	01828924 	orreq	r8, r2, r4, lsr #18
    23d0:	31011101 	tstcc	r1, r1, lsl #2
    23d4:	25000013 	strcs	r0, [r0, #-19]
    23d8:	00018289 	andeq	r8, r1, r9, lsl #5
    23dc:	13310111 	teqne	r1, #1073741828	; 0x40000004
    23e0:	21260000 	teqcs	r6, r0
    23e4:	2f134900 	svccs	0x00134900
    23e8:	27000018 	smladcs	r0, r8, r0, r0
    23ec:	13490021 	movtne	r0, #36897	; 0x9021
    23f0:	0000132f 	andeq	r1, r0, pc, lsr #6
    23f4:	03003428 	movweq	r3, #1064	; 0x428
    23f8:	3b0b3a0e 	blcc	2d0c38 <__Stack_Size+0x2d0438>
    23fc:	3f13490b 	svccc	0x0013490b
    2400:	00180219 	andseq	r0, r8, r9, lsl r2
    2404:	012e2900 	teqeq	lr, r0, lsl #18
    2408:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    240c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2410:	13491927 	movtne	r1, #39207	; 0x9927
    2414:	1301193c 	movwne	r1, #6460	; 0x193c
    2418:	052a0000 	streq	r0, [sl, #-0]!
    241c:	00134900 	andseq	r4, r3, r0, lsl #18
    2420:	012e2b00 	teqeq	lr, r0, lsl #22
    2424:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2428:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    242c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2430:	00001301 	andeq	r1, r0, r1, lsl #6
    2434:	3f012e2c 	svccc	0x00012e2c
    2438:	3a0e0319 	bcc	3830a4 <__Stack_Size+0x3828a4>
    243c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2440:	3c134919 	ldccc	9, cr4, [r3], {25}
    2444:	00130119 	andseq	r0, r3, r9, lsl r1
    2448:	012e2d00 	teqeq	lr, r0, lsl #26
    244c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2450:	0b3b0b3a 	bleq	ec5140 <__Stack_Size+0xec4940>
    2454:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2458:	00001301 	andeq	r1, r0, r1, lsl #6
    245c:	3f012e2e 	svccc	0x00012e2e
    2460:	270e0319 	smladcs	lr, r9, r3, r0
    2464:	34134919 	ldrcc	r4, [r3], #-2329	; 0x919
    2468:	01193c19 	tsteq	r9, r9, lsl ip
    246c:	2f000013 	svccs	0x00000013
    2470:	00000026 	andeq	r0, r0, r6, lsr #32
    2474:	3f012e30 	svccc	0x00012e30
    2478:	3a0e0319 	bcc	3830e4 <__Stack_Size+0x3828e4>
    247c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2480:	3c134919 	ldccc	9, cr4, [r3], {25}
    2484:	00000019 	andeq	r0, r0, r9, lsl r0
    2488:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    248c:	030b130e 	movweq	r1, #45838	; 0xb30e
    2490:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    2494:	10011117 	andne	r1, r1, r7, lsl r1
    2498:	02000017 	andeq	r0, r0, #23
    249c:	0b0b0024 	bleq	2c2534 <__Stack_Size+0x2c1d34>
    24a0:	0e030b3e 	vmoveq.16	d3[0], r0
    24a4:	16030000 	strne	r0, [r3], -r0
    24a8:	3a080300 	bcc	2030b0 <__Stack_Size+0x2028b0>
    24ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    24b0:	04000013 	streq	r0, [r0], #-19
    24b4:	0e030104 	adfeqs	f0, f3, f4
    24b8:	0b3a0b0b 	bleq	e850ec <__Stack_Size+0xe848ec>
    24bc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    24c0:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
    24c4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    24c8:	0600000d 	streq	r0, [r0], -sp
    24cc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    24d0:	0b3b0b3a 	bleq	ec51c0 <__Stack_Size+0xec49c0>
    24d4:	00001349 	andeq	r1, r0, r9, asr #6
    24d8:	3f012e07 	svccc	0x00012e07
    24dc:	3a0e0319 	bcc	383148 <__Stack_Size+0x382948>
    24e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    24e4:	20134919 	andscs	r4, r3, r9, lsl r9
    24e8:	0013010b 	andseq	r0, r3, fp, lsl #2
    24ec:	00050800 	andeq	r0, r5, r0, lsl #16
    24f0:	0b3a0e03 	bleq	e85d04 <__Stack_Size+0xe85504>
    24f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    24f8:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
    24fc:	03193f01 	tsteq	r9, #1, 30
    2500:	3b0b3a0e 	blcc	2d0d40 <__Stack_Size+0x2d0540>
    2504:	1119270b 	tstne	r9, fp, lsl #14
    2508:	40061201 	andmi	r1, r6, r1, lsl #4
    250c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2510:	00001301 	andeq	r1, r0, r1, lsl #6
    2514:	0300050a 	movweq	r0, #1290	; 0x50a
    2518:	3b0b3a0e 	blcc	2d0d58 <__Stack_Size+0x2d0558>
    251c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2520:	0b000018 	bleq	2588 <__Stack_Size+0x1d88>
    2524:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2528:	0b3a0e03 	bleq	e85d3c <__Stack_Size+0xe8553c>
    252c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2530:	01111349 	tsteq	r1, r9, asr #6
    2534:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2538:	00194297 	mulseq	r9, r7, r2
    253c:	00050c00 	andeq	r0, r5, r0, lsl #24
    2540:	0b3a0e03 	bleq	e85d54 <__Stack_Size+0xe85554>
    2544:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2548:	00001702 	andeq	r1, r0, r2, lsl #14
    254c:	31012e0d 	tstcc	r1, sp, lsl #28
    2550:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2554:	97184006 	ldrls	r4, [r8, -r6]
    2558:	13011942 	movwne	r1, #6466	; 0x1942
    255c:	050e0000 	streq	r0, [lr, #-0]
    2560:	02133100 	andseq	r3, r3, #0, 2
    2564:	0f000017 	svceq	0x00000017
    2568:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    256c:	0b3a0e03 	bleq	e85d80 <__Stack_Size+0xe85580>
    2570:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2574:	01111349 	tsteq	r1, r9, asr #6
    2578:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    257c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2580:	10000013 	andne	r0, r0, r3, lsl r0
    2584:	0111010b 	tsteq	r1, fp, lsl #2
    2588:	00000612 	andeq	r0, r0, r2, lsl r6
    258c:	03003411 	movweq	r3, #1041	; 0x411
    2590:	3b0b3a0e 	blcc	2d0dd0 <__Stack_Size+0x2d05d0>
    2594:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2598:	12000018 	andne	r0, r0, #24
    259c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    25a0:	0b3b0b3a 	bleq	ec5290 <__Stack_Size+0xec4a90>
    25a4:	00001349 	andeq	r1, r0, r9, asr #6
    25a8:	31011d13 	tstcc	r1, r3, lsl sp
    25ac:	55015213 	strpl	r5, [r1, #-531]	; 0x213
    25b0:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    25b4:	1400000b 	strne	r0, [r0], #-11
    25b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    25bc:	0b3a0e03 	bleq	e85dd0 <__Stack_Size+0xe855d0>
    25c0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    25c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    25c8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    25cc:	00130119 	andseq	r0, r3, r9, lsl r1
    25d0:	00051500 	andeq	r1, r5, r0, lsl #10
    25d4:	0b3a0e03 	bleq	e85de8 <__Stack_Size+0xe855e8>
    25d8:	1349053b 	movtne	r0, #38203	; 0x953b
    25dc:	00001702 	andeq	r1, r0, r2, lsl #14
    25e0:	03003416 	movweq	r3, #1046	; 0x416
    25e4:	3b0b3a0e 	blcc	2d0e24 <__Stack_Size+0x2d0624>
    25e8:	02134905 	andseq	r4, r3, #81920	; 0x14000
    25ec:	17000017 	smladne	r0, r7, r0, r0
    25f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    25f4:	0b3a0e03 	bleq	e85e08 <__Stack_Size+0xe85608>
    25f8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    25fc:	01111349 	tsteq	r1, r9, asr #6
    2600:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2604:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2608:	18000013 	stmdane	r0, {r0, r1, r4}
    260c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2610:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2614:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2618:	0f190000 	svceq	0x00190000
    261c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2620:	1a000013 	bne	2674 <__Stack_Size+0x1e74>
    2624:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2628:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    262c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2630:	0b1b0000 	bleq	6c2638 <__Stack_Size+0x6c1e38>
    2634:	00175501 	andseq	r5, r7, r1, lsl #10
    2638:	010b1c00 	tsteq	fp, r0, lsl #24
    263c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2640:	00001301 	andeq	r1, r0, r1, lsl #6
    2644:	0300051d 	movweq	r0, #1309	; 0x51d
    2648:	3b0b3a08 	blcc	2d0e70 <__Stack_Size+0x2d0670>
    264c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2650:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
    2654:	08030005 	stmdaeq	r3, {r0, r2}
    2658:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    265c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2660:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    2664:	03193f01 	tsteq	r9, #1, 30
    2668:	3b0b3a0e 	blcc	2d0ea8 <__Stack_Size+0x2d06a8>
    266c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2670:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2674:	97184006 	ldrls	r4, [r8, -r6]
    2678:	00001942 	andeq	r1, r0, r2, asr #18
    267c:	01110100 	tsteq	r1, r0, lsl #2
    2680:	0b130e25 	bleq	4c5f1c <__Stack_Size+0x4c571c>
    2684:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2688:	01111755 	tsteq	r1, r5, asr r7
    268c:	00001710 	andeq	r1, r0, r0, lsl r7
    2690:	0b002402 	bleq	b6a0 <__Stack_Size+0xaea0>
    2694:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2698:	0300000e 	movweq	r0, #14
    269c:	08030016 	stmdaeq	r3, {r1, r2, r4}
    26a0:	0b3b0b3a 	bleq	ec5390 <__Stack_Size+0xec4b90>
    26a4:	00001349 	andeq	r1, r0, r9, asr #6
    26a8:	27001504 	strcs	r1, [r0, -r4, lsl #10]
    26ac:	05000019 	streq	r0, [r0, #-25]
    26b0:	0b0b000f 	bleq	2c26f4 <__Stack_Size+0x2c1ef4>
    26b4:	00001349 	andeq	r1, r0, r9, asr #6
    26b8:	3f012e06 	svccc	0x00012e06
    26bc:	3a0e0319 	bcc	383328 <__Stack_Size+0x382b28>
    26c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    26c4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    26c8:	96184006 	ldrls	r4, [r8], -r6
    26cc:	13011942 	movwne	r1, #6466	; 0x1942
    26d0:	34070000 	strcc	r0, [r7], #-0
    26d4:	3a0e0300 	bcc	3832dc <__Stack_Size+0x382adc>
    26d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    26dc:	00170213 	andseq	r0, r7, r3, lsl r2
    26e0:	010b0800 	tsteq	fp, r0, lsl #16
    26e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    26e8:	00001301 	andeq	r1, r0, r1, lsl #6
    26ec:	01828909 	orreq	r8, r2, r9, lsl #18
    26f0:	31011100 	mrscc	r1, (UNDEF: 17)
    26f4:	0a000013 	beq	2748 <__Stack_Size+0x1f48>
    26f8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    26fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2700:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    2704:	0000193c 	andeq	r1, r0, ip, lsr r9
    2708:	4900350b 	stmdbmi	r0, {r0, r1, r3, r8, sl, ip, sp}
    270c:	0c000013 	stceq	0, cr0, [r0], {19}
    2710:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2714:	0b3b0b3a 	bleq	ec5404 <__Stack_Size+0xec4c04>
    2718:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    271c:	00001802 	andeq	r1, r0, r2, lsl #16
    2720:	0300340d 	movweq	r3, #1037	; 0x40d
    2724:	3b0b3a0e 	blcc	2d0f64 <__Stack_Size+0x2d0764>
    2728:	3f13490b 	svccc	0x0013490b
    272c:	00193c19 	andseq	r3, r9, r9, lsl ip
    2730:	01010e00 	tsteq	r1, r0, lsl #28
    2734:	13011349 	movwne	r1, #4937	; 0x1349
    2738:	210f0000 	mrscs	r0, CPSR
    273c:	2f134900 	svccs	0x00134900
    2740:	1000000b 	andne	r0, r0, fp
    2744:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2748:	0b3a0e03 	bleq	e85f5c <__Stack_Size+0xe8575c>
    274c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2750:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    2754:	01000000 	mrseq	r0, (UNDEF: 0)
    2758:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    275c:	0e030b13 	vmoveq.32	d3[0], r0
    2760:	17550e1b 	smmlane	r5, fp, lr, r0
    2764:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2768:	24020000 	strcs	r0, [r2], #-0
    276c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2770:	000e030b 	andeq	r0, lr, fp, lsl #6
    2774:	00160300 	andseq	r0, r6, r0, lsl #6
    2778:	0b3a0803 	bleq	e8478c <__Stack_Size+0xe83f8c>
    277c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2780:	0f040000 	svceq	0x00040000
    2784:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2788:	05000013 	streq	r0, [r0, #-19]
    278c:	0e030104 	adfeqs	f0, f3, f4
    2790:	0b3a0b0b 	bleq	e853c4 <__Stack_Size+0xe84bc4>
    2794:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2798:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
    279c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    27a0:	0700000d 	streq	r0, [r0, -sp]
    27a4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    27a8:	0b3b0b3a 	bleq	ec5498 <__Stack_Size+0xec4c98>
    27ac:	00001349 	andeq	r1, r0, r9, asr #6
    27b0:	03011308 	movweq	r1, #4872	; 0x1308
    27b4:	3a0b0b0e 	bcc	2c53f4 <__Stack_Size+0x2c4bf4>
    27b8:	010b3b0b 	tsteq	fp, fp, lsl #22
    27bc:	09000013 	stmdbeq	r0, {r0, r1, r4}
    27c0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    27c4:	0b3b0b3a 	bleq	ec54b4 <__Stack_Size+0xec4cb4>
    27c8:	0b381349 	bleq	e074f4 <__Stack_Size+0xe06cf4>
    27cc:	150a0000 	strne	r0, [sl, #-0]
    27d0:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    27d4:	00130113 	andseq	r0, r3, r3, lsl r1
    27d8:	00050b00 	andeq	r0, r5, r0, lsl #22
    27dc:	00001349 	andeq	r1, r0, r9, asr #6
    27e0:	0301130c 	movweq	r1, #4876	; 0x130c
    27e4:	3a0b0b08 	bcc	2c540c <__Stack_Size+0x2c4c0c>
    27e8:	010b3b0b 	tsteq	fp, fp, lsl #22
    27ec:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    27f0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    27f4:	0b3b0b3a 	bleq	ec54e4 <__Stack_Size+0xec4ce4>
    27f8:	0b381349 	bleq	e07524 <__Stack_Size+0xe06d24>
    27fc:	170e0000 	strne	r0, [lr, -r0]
    2800:	3a0b0b01 	bcc	2c540c <__Stack_Size+0x2c4c0c>
    2804:	010b3b0b 	tsteq	fp, fp, lsl #22
    2808:	0f000013 	svceq	0x00000013
    280c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    2810:	0b3b0b3a 	bleq	ec5500 <__Stack_Size+0xec4d00>
    2814:	00001349 	andeq	r1, r0, r9, asr #6
    2818:	27001510 	smladcs	r0, r0, r5, r1
    281c:	11000019 	tstne	r0, r9, lsl r0
    2820:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2824:	0b3a0e03 	bleq	e86038 <__Stack_Size+0xe85838>
    2828:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    282c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2830:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    2834:	12000019 	andne	r0, r0, #25
    2838:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    283c:	0b3b0b3a 	bleq	ec552c <__Stack_Size+0xec4d2c>
    2840:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    2844:	0000193c 	andeq	r1, r0, ip, lsr r9
    2848:	03003413 	movweq	r3, #1043	; 0x413
    284c:	3b0b3a0e 	blcc	2d108c <__Stack_Size+0x2d088c>
    2850:	3f13490b 	svccc	0x0013490b
    2854:	00180219 	andseq	r0, r8, r9, lsl r2
    2858:	11010000 	mrsne	r0, (UNDEF: 1)
    285c:	130e2501 	movwne	r2, #58625	; 0xe501
    2860:	1b0e030b 	blne	383494 <__Stack_Size+0x382c94>
    2864:	1117550e 	tstne	r7, lr, lsl #10
    2868:	00171001 	andseq	r1, r7, r1
    286c:	00240200 	eoreq	r0, r4, r0, lsl #4
    2870:	0b3e0b0b 	bleq	f854a4 <__Stack_Size+0xf84ca4>
    2874:	00000e03 	andeq	r0, r0, r3, lsl #28
    2878:	03001603 	movweq	r1, #1539	; 0x603
    287c:	3b0b3a08 	blcc	2d10a4 <__Stack_Size+0x2d08a4>
    2880:	0013490b 	andseq	r4, r3, fp, lsl #18
    2884:	00160400 	andseq	r0, r6, r0, lsl #8
    2888:	0b3a0e03 	bleq	e8609c <__Stack_Size+0xe8589c>
    288c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2890:	35050000 	strcc	r0, [r5, #-0]
    2894:	00134900 	andseq	r4, r3, r0, lsl #18
    2898:	01040600 	tsteq	r4, r0, lsl #12
    289c:	0b3a0b0b 	bleq	e854d0 <__Stack_Size+0xe84cd0>
    28a0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    28a4:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
    28a8:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    28ac:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    28b0:	0e030104 	adfeqs	f0, f3, f4
    28b4:	0b3a0b0b 	bleq	e854e8 <__Stack_Size+0xe84ce8>
    28b8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    28bc:	13090000 	movwne	r0, #36864	; 0x9000
    28c0:	0b0e0301 	bleq	3834cc <__Stack_Size+0x382ccc>
    28c4:	3b0b3a0b 	blcc	2d10f8 <__Stack_Size+0x2d08f8>
    28c8:	0013010b 	andseq	r0, r3, fp, lsl #2
    28cc:	000d0a00 	andeq	r0, sp, r0, lsl #20
    28d0:	0b3a0e03 	bleq	e860e4 <__Stack_Size+0xe858e4>
    28d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    28d8:	00000b38 	andeq	r0, r0, r8, lsr fp
    28dc:	0b000f0b 	bleq	6510 <__Stack_Size+0x5d10>
    28e0:	0013490b 	andseq	r4, r3, fp, lsl #18
    28e4:	01150c00 	tsteq	r5, r0, lsl #24
    28e8:	13491927 	movtne	r1, #39207	; 0x9927
    28ec:	00001301 	andeq	r1, r0, r1, lsl #6
    28f0:	4900050d 	stmdbmi	r0, {r0, r2, r3, r8, sl}
    28f4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    28f8:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
    28fc:	0b3a0b0b 	bleq	e85530 <__Stack_Size+0xe84d30>
    2900:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2904:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 290c <__Stack_Size+0x210c>
    2908:	3a080300 	bcc	203510 <__Stack_Size+0x202d10>
    290c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2910:	000b3813 	andeq	r3, fp, r3, lsl r8
    2914:	01171000 	tsteq	r7, r0
    2918:	0b3a0b0b 	bleq	e8554c <__Stack_Size+0xe84d4c>
    291c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2920:	0d110000 	ldceq	0, cr0, [r1, #-0]
    2924:	3a080300 	bcc	20352c <__Stack_Size+0x202d2c>
    2928:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    292c:	12000013 	andne	r0, r0, #19
    2930:	19270015 	stmdbne	r7!, {r0, r2, r4}
    2934:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    2938:	03193f01 	tsteq	r9, #1, 30
    293c:	3b0b3a0e 	blcc	2d117c <__Stack_Size+0x2d097c>
    2940:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2944:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2948:	96184006 	ldrls	r4, [r8], -r6
    294c:	13011942 	movwne	r1, #6466	; 0x1942
    2950:	05140000 	ldreq	r0, [r4, #-0]
    2954:	3a0e0300 	bcc	38355c <__Stack_Size+0x382d5c>
    2958:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    295c:	00170213 	andseq	r0, r7, r3, lsl r2
    2960:	010b1500 	tsteq	fp, r0, lsl #10
    2964:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2968:	00001301 	andeq	r1, r0, r1, lsl #6
    296c:	03003416 	movweq	r3, #1046	; 0x416
    2970:	3b0b3a0e 	blcc	2d11b0 <__Stack_Size+0x2d09b0>
    2974:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2978:	17000017 	smladne	r0, r7, r0, r0
    297c:	0111010b 	tsteq	r1, fp, lsl #2
    2980:	00000612 	andeq	r0, r0, r2, lsl r6
    2984:	03003418 	movweq	r3, #1048	; 0x418
    2988:	3b0b3a0e 	blcc	2d11c8 <__Stack_Size+0x2d09c8>
    298c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2990:	012e1900 	teqeq	lr, r0, lsl #18
    2994:	0b3a0e03 	bleq	e861a8 <__Stack_Size+0xe859a8>
    2998:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    299c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    29a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    29a4:	00130119 	andseq	r0, r3, r9, lsl r1
    29a8:	00341a00 	eorseq	r1, r4, r0, lsl #20
    29ac:	0b3a0e03 	bleq	e861c0 <__Stack_Size+0xe859c0>
    29b0:	1349053b 	movtne	r0, #38203	; 0x953b
    29b4:	00001702 	andeq	r1, r0, r2, lsl #14
    29b8:	03000a1b 	movweq	r0, #2587	; 0xa1b
    29bc:	3b0b3a0e 	blcc	2d11fc <__Stack_Size+0x2d09fc>
    29c0:	00011105 	andeq	r1, r1, r5, lsl #2
    29c4:	82891c00 	addhi	r1, r9, #0, 24
    29c8:	01110101 	tsteq	r1, r1, lsl #2
    29cc:	00001301 	andeq	r1, r0, r1, lsl #6
    29d0:	01828a1d 	orreq	r8, r2, sp, lsl sl
    29d4:	91180200 	tstls	r8, r0, lsl #4
    29d8:	00001842 	andeq	r1, r0, r2, asr #16
    29dc:	0182891e 	orreq	r8, r2, lr, lsl r9
    29e0:	31011101 	tstcc	r1, r1, lsl #2
    29e4:	00130113 	andseq	r0, r3, r3, lsl r1
    29e8:	82891f00 	addhi	r1, r9, #0, 30
    29ec:	01110101 	tsteq	r1, r1, lsl #2
    29f0:	00001331 	andeq	r1, r0, r1, lsr r3
    29f4:	3f002e20 	svccc	0x00002e20
    29f8:	3a0e0319 	bcc	383664 <__Stack_Size+0x382e64>
    29fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2a00:	11134919 	tstne	r3, r9, lsl r9
    2a04:	40061201 	andmi	r1, r6, r1, lsl #4
    2a08:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2a0c:	34210000 	strtcc	r0, [r1], #-0
    2a10:	3a080300 	bcc	203618 <__Stack_Size+0x202e18>
    2a14:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a18:	00170213 	andseq	r0, r7, r3, lsl r2
    2a1c:	82892200 	addhi	r2, r9, #0, 4
    2a20:	01110001 	tsteq	r1, r1
    2a24:	00001331 	andeq	r1, r0, r1, lsr r3
    2a28:	3f012e23 	svccc	0x00012e23
    2a2c:	3a0e0319 	bcc	383698 <__Stack_Size+0x382e98>
    2a30:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2a34:	11134919 	tstne	r3, r9, lsl r9
    2a38:	40061201 	andmi	r1, r6, r1, lsl #4
    2a3c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2a40:	00001301 	andeq	r1, r0, r1, lsl #6
    2a44:	03003424 	movweq	r3, #1060	; 0x424
    2a48:	3b0b3a08 	blcc	2d1270 <__Stack_Size+0x2d0a70>
    2a4c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2a50:	25000017 	strcs	r0, [r0, #-23]
    2a54:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    2a58:	00001301 	andeq	r1, r0, r1, lsl #6
    2a5c:	3f002e26 	svccc	0x00002e26
    2a60:	3a0e0319 	bcc	3836cc <__Stack_Size+0x382ecc>
    2a64:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2a68:	11134919 	tstne	r3, r9, lsl r9
    2a6c:	40061201 	andmi	r1, r6, r1, lsl #4
    2a70:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2a74:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
    2a78:	03193f01 	tsteq	r9, #1, 30
    2a7c:	3b0b3a0e 	blcc	2d12bc <__Stack_Size+0x2d0abc>
    2a80:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2a84:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2a88:	97184006 	ldrls	r4, [r8, -r6]
    2a8c:	13011942 	movwne	r1, #6466	; 0x1942
    2a90:	05280000 	streq	r0, [r8, #-0]!
    2a94:	3a0e0300 	bcc	38369c <__Stack_Size+0x382e9c>
    2a98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a9c:	00170213 	andseq	r0, r7, r3, lsl r2
    2aa0:	012e2900 	teqeq	lr, r0, lsl #18
    2aa4:	0b3a0e03 	bleq	e862b8 <__Stack_Size+0xe85ab8>
    2aa8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2aac:	13010b20 	movwne	r0, #6944	; 0x1b20
    2ab0:	342a0000 	strtcc	r0, [sl], #-0
    2ab4:	3a0e0300 	bcc	3836bc <__Stack_Size+0x382ebc>
    2ab8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2abc:	2b000013 	blcs	2b10 <__Stack_Size+0x2310>
    2ac0:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    2ac4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2ac8:	0b2c0000 	bleq	b02ad0 <__Stack_Size+0xb022d0>
    2acc:	00130101 	andseq	r0, r3, r1, lsl #2
    2ad0:	010b2d00 	tsteq	fp, r0, lsl #26
    2ad4:	172e0000 	strne	r0, [lr, -r0]!
    2ad8:	3a0b0b01 	bcc	2c56e4 <__Stack_Size+0x2c4ee4>
    2adc:	01053b0b 	tsteq	r5, fp, lsl #22
    2ae0:	2f000013 	svccs	0x00000013
    2ae4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    2ae8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2aec:	00001349 	andeq	r1, r0, r9, asr #6
    2af0:	31011d30 	tstcc	r1, r0, lsr sp
    2af4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2af8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2afc:	00130105 	andseq	r0, r3, r5, lsl #2
    2b00:	00343100 	eorseq	r3, r4, r0, lsl #2
    2b04:	17021331 	smladxne	r2, r1, r3, r1
    2b08:	0a320000 	beq	c82b10 <__Stack_Size+0xc82310>
    2b0c:	11133100 	tstne	r3, r0, lsl #2
    2b10:	33000001 	movwcc	r0, #1
    2b14:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2b18:	17550152 			; <UNDEFINED> instruction: 0x17550152
    2b1c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    2b20:	00001301 	andeq	r1, r0, r1, lsl #6
    2b24:	55010b34 	strpl	r0, [r1, #-2868]	; 0xb34
    2b28:	35000017 	strcc	r0, [r0, #-23]
    2b2c:	13310034 	teqne	r1, #52	; 0x34
    2b30:	00001802 	andeq	r1, r0, r2, lsl #16
    2b34:	01828936 	orreq	r8, r2, r6, lsr r9
    2b38:	00011101 	andeq	r1, r1, r1, lsl #2
    2b3c:	82893700 	addhi	r3, r9, #0, 14
    2b40:	01110001 	tsteq	r1, r1
    2b44:	31194295 			; <UNDEFINED> instruction: 0x31194295
    2b48:	38000013 	stmdacc	r0, {r0, r1, r4}
    2b4c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2b50:	0b3a0e03 	bleq	e86364 <__Stack_Size+0xe85b64>
    2b54:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2b58:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2b5c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2b60:	00130119 	andseq	r0, r3, r9, lsl r1
    2b64:	00053900 	andeq	r3, r5, r0, lsl #18
    2b68:	0b3a0803 	bleq	e84b7c <__Stack_Size+0xe8437c>
    2b6c:	1349053b 	movtne	r0, #38203	; 0x953b
    2b70:	00001702 	andeq	r1, r0, r2, lsl #14
    2b74:	3f002e3a 	svccc	0x00002e3a
    2b78:	3a0e0319 	bcc	3837e4 <__Stack_Size+0x382fe4>
    2b7c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2b80:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2b84:	97184006 	ldrls	r4, [r8, -r6]
    2b88:	00001942 	andeq	r1, r0, r2, asr #18
    2b8c:	0300343b 	movweq	r3, #1083	; 0x43b
    2b90:	3b0b3a0e 	blcc	2d13d0 <__Stack_Size+0x2d0bd0>
    2b94:	3f13490b 	svccc	0x0013490b
    2b98:	00193c19 	andseq	r3, r9, r9, lsl ip
    2b9c:	00343c00 	eorseq	r3, r4, r0, lsl #24
    2ba0:	0b3a0e03 	bleq	e863b4 <__Stack_Size+0xe85bb4>
    2ba4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ba8:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    2bac:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
    2bb0:	03193f01 	tsteq	r9, #1, 30
    2bb4:	3b0b3a0e 	blcc	2d13f4 <__Stack_Size+0x2d0bf4>
    2bb8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2bbc:	01193c13 	tsteq	r9, r3, lsl ip
    2bc0:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
    2bc4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2bc8:	0b3a0e03 	bleq	e863dc <__Stack_Size+0xe85bdc>
    2bcc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2bd0:	1301193c 	movwne	r1, #6460	; 0x193c
    2bd4:	2e3f0000 	cdpcs	0, 3, cr0, cr15, cr0, {0}
    2bd8:	03193f01 	tsteq	r9, #1, 30
    2bdc:	3b0b3a0e 	blcc	2d141c <__Stack_Size+0x2d0c1c>
    2be0:	3c192705 	ldccc	7, cr2, [r9], {5}
    2be4:	00130119 	andseq	r0, r3, r9, lsl r1
    2be8:	012e4000 	teqeq	lr, r0
    2bec:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2bf0:	0b3b0b3a 	bleq	ec58e0 <__Stack_Size+0xec50e0>
    2bf4:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2bf8:	01000000 	mrseq	r0, (UNDEF: 0)
    2bfc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2c00:	0e030b13 	vmoveq.32	d3[0], r0
    2c04:	17550e1b 	smmlane	r5, fp, lr, r0
    2c08:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2c0c:	24020000 	strcs	r0, [r2], #-0
    2c10:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2c14:	000e030b 	andeq	r0, lr, fp, lsl #6
    2c18:	00160300 	andseq	r0, r6, r0, lsl #6
    2c1c:	0b3a0803 	bleq	e84c30 <__Stack_Size+0xe84430>
    2c20:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2c24:	0f040000 	svceq	0x00040000
    2c28:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2c2c:	05000013 	streq	r0, [r0, #-19]
    2c30:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2c34:	0b3a0e03 	bleq	e86448 <__Stack_Size+0xe85c48>
    2c38:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2c3c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2c40:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2c44:	00130119 	andseq	r0, r3, r9, lsl r1
    2c48:	00050600 	andeq	r0, r5, r0, lsl #12
    2c4c:	0b3a0e03 	bleq	e86460 <__Stack_Size+0xe85c60>
    2c50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2c54:	00001702 	andeq	r1, r0, r2, lsl #14
    2c58:	03003407 	movweq	r3, #1031	; 0x407
    2c5c:	3b0b3a08 	blcc	2d1484 <__Stack_Size+0x2d0c84>
    2c60:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2c64:	08000018 	stmdaeq	r0, {r3, r4}
    2c68:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2c6c:	0b3b0b3a 	bleq	ec595c <__Stack_Size+0xec515c>
    2c70:	17021349 	strne	r1, [r2, -r9, asr #6]
    2c74:	34090000 	strcc	r0, [r9], #-0
    2c78:	3a0e0300 	bcc	383880 <__Stack_Size+0x383080>
    2c7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c80:	00170213 	andseq	r0, r7, r3, lsl r2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000071 	andeq	r0, r0, r1, ror r0
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00310002 	eorseq	r0, r1, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	73010000 	movwvc	r0, #4096	; 0x1000
      1c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
      24:	5f630000 	svcpl	0x00630000
      28:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	6174735f 	cmnvs	r4, pc, asr r3
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	70757472 	rsbsvc	r7, r5, r2, ror r4
      34:	0100732e 	tsteq	r0, lr, lsr #6
      38:	00000000 	andeq	r0, r0, r0

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	0b4c0205 	bleq	1300858 <__Stack_Size+0x1300058>

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	c1030800 	tstgt	r3, r0, lsl #16
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	31210100 	teqcc	r1, r0, lsl #2
      48:	23212121 	teqcs	r1, #1073741832	; 0x40000008
      4c:	21212121 	teqcs	r1, r1, lsr #2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	2131212f 	teqcs	r1, pc, lsr #2
      54:	30212131 	eorcc	r2, r1, r1, lsr r1
      58:	2068032f 	rsbcs	r0, r8, pc, lsr #6
      5c:	36322f34 	shasxcc	r2, r2, r4
      60:	01000202 	tsteq	r0, r2, lsl #4
      64:	02050001 	andeq	r0, r5, #1
      68:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
      6c:	0100eb03 	tsteq	r0, r3, lsl #22
      70:	01000202 	tsteq	r0, r2, lsl #4
      74:	0000a201 	andeq	sl, r0, r1, lsl #4
      78:	33000200 	movwcc	r0, #512	; 0x200
      7c:	02000000 	andeq	r0, r0, #0
      80:	0d0efb01 	vstreq	d15, [lr, #-4]
      84:	01010100 	mrseq	r0, (UNDEF: 17)
      88:	00000001 	andeq	r0, r0, r1
      8c:	01000001 	tsteq	r0, r1
      90:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
      94:	5f32336d 	svcpl	0x0032336d
      98:	0062696c 	rsbeq	r6, r2, ip, ror #18
      9c:	726f6300 	rsbvc	r6, pc, #0, 6
      a0:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
      a4:	616d5f33 	cmnvs	sp, r3, lsr pc
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      a8:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
				{
					state_in->step = step_c;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ac:	00010053 	andeq	r0, r1, r3, asr r0
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      b0:	05000000 	streq	r0, [r0, #-0]
      b4:	00000002 	andeq	r0, r0, r2
			*plainchar    = (fragment & 0x003) << 6;
      b8:	01370300 	teqeq	r7, r0, lsl #6
      bc:	200b0321 	andcs	r0, fp, r1, lsr #6
	state_in->plainchar = 0;
}

int base64_decode_block(const char* code_in, const int length_in, char* plaintext_out, base64_decodestate* state_in)
{
	const char* codechar = code_in;
      c0:	200b0321 	andcs	r0, fp, r1, lsr #6
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
			*plainchar    = (fragment & 0x003) << 6;
	case step_d:
			do {
				if (codechar == code_in+length_in)
      c4:	200b0321 	andcs	r0, fp, r1, lsr #6
      c8:	200b032f 	andcs	r0, fp, pc, lsr #6
				{
					state_in->step = step_d;
      cc:	200b032f 	andcs	r0, fp, pc, lsr #6
					state_in->plainchar = *plainchar;
      d0:	200b032f 	andcs	r0, fp, pc, lsr #6
					return plainchar - plaintext_out;
      d4:	200b0321 	andcs	r0, fp, r1, lsr #6
      d8:	200b032f 	andcs	r0, fp, pc, lsr #6
				}
				fragment = (char)base64_decode_value(*codechar++);
      dc:	0a032f2f 	beq	cbda0 <__Stack_Size+0xcb5a0>
      e0:	0b032f20 	bleq	cbd68 <__Stack_Size+0xcb568>
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      e4:	0b032f20 	bleq	cbd6c <__Stack_Size+0xcb56c>
      e8:	0b032f20 	bleq	cbd70 <__Stack_Size+0xcb570>
				{
					state_in->step = step_d;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ec:	0b032f20 	bleq	cbd74 <__Stack_Size+0xcb574>
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      f0:	0b032120 	bleq	c8578 <__Stack_Size+0xc7d78>
      f4:	0b032120 	bleq	c857c <__Stack_Size+0xc7d7c>
		}
      f8:	0b032f20 	bleq	cbd80 <__Stack_Size+0xcb580>
	}
	/* control should not reach here */
	return plainchar - plaintext_out;
}
      fc:	0b032120 	bleq	c8584 <__Stack_Size+0xc7d84>
	uint8_t x1z1[F25519_SIZE];
	uint8_t a[F25519_SIZE];

	f25519_mul__distinct(x1sq, x1, x1);
	f25519_mul__distinct(z1sq, z1, z1);
	f25519_mul__distinct(x1z1, x1, z1);
     100:	0b032120 	bleq	c8588 <__Stack_Size+0xc7d88>
     104:	0b032f20 	bleq	cbd8c <__Stack_Size+0xcb58c>

	f25519_sub(a, x1sq, z1sq);
     108:	0b032f20 	bleq	cbd90 <__Stack_Size+0xcb590>
     10c:	0a032f20 	beq	cbd94 <__Stack_Size+0xcb594>
	f25519_mul__distinct(x3, a, a);
     110:	0b032120 	bleq	c8598 <__Stack_Size+0xc7d98>
     114:	01022120 	tsteq	r2, r0, lsr #2
     118:	a7010100 	strge	r0, [r1, -r0, lsl #2]

	f25519_mul_c(a, x1z1, 486662);
     11c:	02000003 	andeq	r0, r0, #3
     120:	0000be00 	andeq	fp, r0, r0, lsl #28
	f25519_add(a, x1sq, a);
     124:	fb010200 	blx	4092e <__Stack_Size+0x4012e>
     128:	01000d0e 	tsteq	r0, lr, lsl #26
     12c:	00010101 	andeq	r0, r1, r1, lsl #2
	f25519_add(a, z1sq, a);
     130:	00010000 	andeq	r0, r1, r0
     134:	2f2e0100 	svccs	0x002e0100
	f25519_mul__distinct(x1sq, x1z1, a);
     138:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     13c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     140:	2f2e0062 	svccs	0x002e0062
	f25519_mul_c(z3, x1sq, 4);
     144:	5f627375 	svcpl	0x00627375
     148:	0062696c 	rsbeq	r6, r2, ip, ror #18
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	62737500 	rsbsvs	r7, r3, #0, 10
     150:	0000632e 	andeq	r6, r0, lr, lsr #6
     154:	74730000 	ldrbtvc	r0, [r3], #-0
	f25519_sub(b, x3, z3); /* D */
     158:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     15c:	5f783031 	svcpl	0x00783031
	f25519_mul__distinct(da, a, b);
     160:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     164:	0100682e 	tsteq	r0, lr, lsr #16
     168:	61680000 	cmnvs	r8, r0

	f25519_sub(b, x2, z2);
     16c:	61776472 	cmnvs	r7, r2, ror r4
     170:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
	f25519_add(a, x3, z3); /* C */
     174:	00000000 	andeq	r0, r0, r0
     178:	5f627375 	svcpl	0x00627375
     17c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
	f25519_mul__distinct(cb, a, b);
     180:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     184:	73750000 	cmnvc	r5, #0

	f25519_add(a, da, cb);
     188:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     18c:	00682e66 	rsbeq	r2, r8, r6, ror #28
     190:	75000002 	strvc	r0, [r0, #-2]
	f25519_mul__distinct(b, a, a);
     194:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     198:	00000000 	andeq	r0, r0, r0
	f25519_mul__distinct(x5, z1, b);
     19c:	5f627375 	svcpl	0x00627375
     1a0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     1a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000

	f25519_sub(a, da, cb);
     1a8:	73750000 	cmnvc	r5, #0
     1ac:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
	f25519_mul__distinct(b, a, a);
     1b0:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     1b4:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     1b8:	0000682e 	andeq	r6, r0, lr, lsr #16

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	66640000 	strbtvs	r0, [r4], -r0
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	00682e75 	rsbeq	r2, r8, r5, ror lr
     1c4:	75000000 	strvc	r0, [r0, #-0]

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
     1cc:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
     1d0:	00020068 	andeq	r0, r2, r8, rrx
     1d4:	62737500 	rsbsvs	r7, r3, #0, 10
		f25519_select(zm1, zm1, zm, bit);
     1d8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     1dc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1e0:	00000000 	andeq	r0, r0, r0
		f25519_select(xm, xm, xms, bit);
     1e4:	0b980205 	bleq	fe600a00 <BootRAM+0xd5711a1>
     1e8:	a7030800 	strge	r0, [r3, -r0, lsl #16]
     1ec:	01020101 	tsteq	r2, r1, lsl #2
		f25519_select(zm, zm, zms, bit);
     1f0:	00010100 	andeq	r0, r1, r0, lsl #2
     1f4:	0b9a0205 	bleq	fe680a10 <BootRAM+0xd5f11b1>
     1f8:	d7030800 	strle	r0, [r3, -r0, lsl #16]
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	01020102 	tsteq	r2, r2, lsl #2
     200:	00010100 	andeq	r0, r1, r0, lsl #2
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	0b9c0205 	bleq	fe700a20 <BootRAM+0xd6711c1>
     208:	dc030800 	stcle	8, cr0, [r3], {-0}
	f25519_mul__distinct(result, zm1, xm);
     20c:	01020102 	tsteq	r2, r2, lsl #2
     210:	00010100 	andeq	r0, r1, r0, lsl #2
	f25519_normalize(result);
     214:	0b9e0205 	bleq	fe780a30 <BootRAM+0xd6f11d1>
     218:	93030800 	movwls	r0, #14336	; 0x3800
}
     21c:	24150103 	ldrcs	r0, [r5], #-259	; 0x103
     220:	01000402 	tsteq	r0, r2, lsl #8
     224:	02050001 	andeq	r0, r5, #1
     228:	08000ba8 	stmdaeq	r0, {r3, r5, r7, r8, r9, fp}
     22c:	0103bf03 	tsteq	r3, r3, lsl #30
     230:	01000102 	tsteq	r0, r2, lsl #2
     234:	02050001 	andeq	r0, r5, #1
     238:	08000bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp}
     23c:	0103c403 	tsteq	r3, r3, lsl #8
     240:	08024b13 	stmdaeq	r2, {r0, r1, r4, r8, r9, fp, lr}
     244:	00010100 	andeq	r0, r1, r0, lsl #2
     248:	0bc40205 	bleq	ff100a64 <BootRAM+0xe071205>
     24c:	cb030800 	blgt	c2254 <__Stack_Size+0xc1a54>
     250:	01020103 	tsteq	r2, r3, lsl #2
     254:	00010100 	andeq	r0, r1, r0, lsl #2
     258:	0bc60205 	bleq	ff180a74 <BootRAM+0xe0f1215>
     25c:	d0030800 	andle	r0, r3, r0, lsl #16
     260:	01020103 	tsteq	r2, r3, lsl #2
     264:	00010100 	andeq	r0, r1, r0, lsl #2
     268:	0bc80205 	bleq	ff200a84 <BootRAM+0xe171225>
     26c:	d5030800 	strle	r0, [r3, #-2048]	; 0x800
     270:	01020103 	tsteq	r2, r3, lsl #2
     274:	00010100 	andeq	r0, r1, r0, lsl #2
     278:	0bca0205 	bleq	ff280a94 <BootRAM+0xe1f1235>
     27c:	da030800 	ble	c2284 <__Stack_Size+0xc1a84>
     280:	01020103 	tsteq	r2, r3, lsl #2
     284:	00010100 	andeq	r0, r1, r0, lsl #2
     288:	0bcc0205 	bleq	ff300aa4 <BootRAM+0xe271245>
     28c:	df030800 	svcle	0x00030800
     290:	01020103 	tsteq	r2, r3, lsl #2
     294:	00010100 	andeq	r0, r1, r0, lsl #2
     298:	0bce0205 	bleq	ff380ab4 <BootRAM+0xe2f1255>
     29c:	e4030800 	str	r0, [r3], #-2048	; 0x800
     2a0:	01020103 	tsteq	r2, r3, lsl #2
     2a4:	00010100 	andeq	r0, r1, r0, lsl #2
     2a8:	0bd00205 	bleq	ff400ac4 <BootRAM+0xe371265>
     2ac:	e9030800 	stmdb	r3, {fp}
     2b0:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     2b4:	01010006 	tsteq	r1, r6
     2b8:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
     2bc:	0308000b 	movweq	r0, #32779	; 0x800b
     2c0:	210102bd 			; <UNDEFINED> instruction: 0x210102bd
     2c4:	2f1f2130 	svccs	0x001f2130
     2c8:	0b03211f 	bleq	c874c <__Stack_Size+0xc7f4c>
     2cc:	20750320 	rsbscs	r0, r5, r0, lsr #6
     2d0:	231d2322 	tstcs	sp, #-2013265920	; 0x88000000
     2d4:	92759291 	rsbsls	r9, r5, #268435465	; 0x10000009
     2d8:	2f3e7630 	svccs	0x003e7630
     2dc:	08212c21 	stmdaeq	r1!, {r0, r5, sl, fp, sp}
     2e0:	00010100 	andeq	r0, r1, r0, lsl #2
     2e4:	0c840205 	sfmeq	f0, 4, [r4], {5}
     2e8:	e0030800 	and	r0, r3, r0, lsl #16
     2ec:	1b250102 	blne	9406fc <__Stack_Size+0x93fefc>
     2f0:	8a3e7525 	bhi	f9d78c <__Stack_Size+0xf9cf8c>
     2f4:	03212221 	teqeq	r1, #268435458	; 0x10000002
     2f8:	03312076 	teqeq	r1, #118	; 0x76
     2fc:	21212010 	teqcs	r1, r0, lsl r0
     300:	2221211e 	eorcs	r2, r1, #-2147483641	; 0x80000007
     304:	0b022131 	bleq	887d0 <__Stack_Size+0x87fd0>
     308:	00010100 	andeq	r0, r1, r0, lsl #2
     30c:	0ce40205 	sfmeq	f0, 2, [r4], #20
     310:	9d030800 	stcls	8, cr0, [r3, #-0]
     314:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     318:	01010006 	tsteq	r1, r6
     31c:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
     320:	0308000c 	movweq	r0, #32780	; 0x800c
     324:	130103a2 	movwne	r0, #5026	; 0x13a2
     328:	01000602 	tsteq	r0, r2, lsl #12
     32c:	02050001 	andeq	r0, r5, #1
     330:	08000cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp}
     334:	0103a703 	tsteq	r3, r3, lsl #14
     338:	5a313d13 	bpl	c4f78c <__Stack_Size+0xc4ef8c>
     33c:	01000602 	tsteq	r0, r2, lsl #12
     340:	02050001 	andeq	r0, r5, #1
     344:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
     348:	0103b103 	tsteq	r3, r3, lsl #2
     34c:	00060213 	andeq	r0, r6, r3, lsl r2
     350:	05000101 	streq	r0, [r0, #-257]	; 0x101
     354:	000d2802 	andeq	r2, sp, r2, lsl #16
     358:	03880308 	orreq	r0, r8, #8, 6	; 0x20000000
     35c:	3d762101 	ldfcce	f2, [r6, #-4]!
     360:	0402214d 	streq	r2, [r2], #-333	; 0x14d
     364:	00010100 	andeq	r0, r1, r0, lsl #2
     368:	0d500205 	lfmeq	f0, 2, [r0, #-20]	; 0xffffffec
     36c:	ec030800 	stc	8, cr0, [r3], {-0}
     370:	18030100 	stmdane	r3, {r8}
     374:	2f1f3d20 	svccs	0x001f3d20
     378:	0402008a 	streq	r0, [r2], #-138	; 0x8a
     37c:	062e0602 	strteq	r0, [lr], -r2, lsl #12
     380:	211f3d6d 	tstcs	pc, sp, ror #26
     384:	302f2d21 	eorcc	r2, pc, r1, lsr #26
     388:	2016032f 	andscs	r0, r6, pc, lsr #6
     38c:	022e6d03 	eoreq	r6, lr, #3, 26	; 0xc0
     390:	0101000c 	tsteq	r1, ip
     394:	00020500 	andeq	r0, r2, r0, lsl #10
     398:	03000000 	movweq	r0, #0
     39c:	140101ad 	strne	r0, [r1], #-429	; 0x1ad
     3a0:	01000202 	tsteq	r0, r2, lsl #4
     3a4:	02050001 	andeq	r0, r5, #1
     3a8:	08000db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp}
     3ac:	0101b303 	tsteq	r1, r3, lsl #6
     3b0:	023f3e14 	eorseq	r3, pc, #20, 28	; 0x140
     3b4:	01010008 	tsteq	r1, r8
     3b8:	d4020500 	strle	r0, [r2], #-1280	; 0x500
     3bc:	0308000d 	movweq	r0, #32781	; 0x800d
     3c0:	160101be 			; <UNDEFINED> instruction: 0x160101be
     3c4:	31222c22 	teqcc	r2, r2, lsr #24
     3c8:	01000602 	tsteq	r0, r2, lsl #12
     3cc:	02050001 	andeq	r0, r5, #1
     3d0:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
     3d4:	0101cb03 	tsteq	r1, r3, lsl #22
     3d8:	84302131 	ldrthi	r2, [r0], #-305	; 0x131
     3dc:	2f312f40 	svccs	0x00312f40
     3e0:	312f4b31 	teqcc	pc, r1, lsr fp	; <UNPREDICTABLE>
     3e4:	2f2f3d3e 	svccs	0x002f3d3e
     3e8:	222f4b22 	eorcs	r4, pc, #34816	; 0x8800
     3ec:	502f222c 	eorpl	r2, pc, ip, lsr #4
     3f0:	01000702 	tsteq	r0, r2, lsl #14
     3f4:	02050001 	andeq	r0, r5, #1
     3f8:	08000e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp}
     3fc:	0101fc03 	tsteq	r1, r3, lsl #24
     400:	24221e14 	strtcs	r1, [r2], #-3604	; 0xe14
     404:	1f4b3e1c 	svcne	0x004b3e1c
     408:	21211c24 	teqcs	r1, r4, lsr #24
     40c:	4f273d22 	svcmi	0x00273d22
     410:	01000b02 	tsteq	r0, r2, lsl #22
     414:	02050001 	andeq	r0, r5, #1
     418:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
     41c:	01029303 	tsteq	r2, r3, lsl #6
     420:	21212d13 	teqcs	r1, r3, lsl sp
     424:	2e0c033d 	mcrcs	3, 0, r0, cr12, cr13, {1}
     428:	4d1d235d 	ldcmi	3, cr2, [sp, #-372]	; 0xfffffe8c
     42c:	01000a02 	tsteq	r0, r2, lsl #20
     430:	02050001 	andeq	r0, r5, #1
     434:	08000ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp}
     438:	0101a003 	tsteq	r1, r3
     43c:	00020213 	andeq	r0, r2, r3, lsl r2
     440:	05000101 	streq	r0, [r0, #-257]	; 0x101
     444:	000ef802 	andeq	pc, lr, r2, lsl #16
     448:	03f00308 	mvnseq	r0, #8, 6	; 0x20000000
     44c:	3d3d2301 	ldccc	3, cr2, [sp, #-4]!
     450:	2f3d1f30 	svccs	0x003d1f30
     454:	01000302 	tsteq	r0, r2, lsl #6
     458:	02050001 	andeq	r0, r5, #1
     45c:	08000f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp}
     460:	0102ad03 	tsteq	r2, r3, lsl #26
     464:	304b3021 	subcc	r3, fp, r1, lsr #32
     468:	3d211f21 	stccc	15, cr1, [r1, #-132]!	; 0xffffff7c
     46c:	0d022f31 	stceq	15, cr2, [r2, #-196]	; 0xffffff3c
     470:	00010100 	andeq	r0, r1, r0, lsl #2
     474:	0f5c0205 	svceq	0x005c0205
     478:	fb030800 	blx	c2482 <__Stack_Size+0xc1c82>
     47c:	40220103 	eormi	r0, r2, r3, lsl #2
     480:	2f2f3d1d 	svccs	0x002f3d1d
     484:	0003022f 	andeq	r0, r3, pc, lsr #4
     488:	05000101 	streq	r0, [r0, #-257]	; 0x101
     48c:	000f8002 	andeq	r8, pc, r2
     490:	04850308 	streq	r0, [r5], #776	; 0x308
     494:	1b412101 	blne	10488a0 <__Stack_Size+0x10480a0>
     498:	59335b33 	ldmdbpl	r3!, {r0, r1, r4, r5, r8, r9, fp, ip, lr}
     49c:	3c0d033d 	stccc	3, cr0, [sp], {61}	; 0x3d
     4a0:	3d4b504b 	stclcc	0, cr5, [fp, #-300]	; 0xfffffed4
     4a4:	42345c42 	eorsmi	r5, r4, #16896	; 0x4200
     4a8:	4b5e3d59 	blmi	178fa14 <__Stack_Size+0x178f214>
     4ac:	022a243f 	eoreq	r2, sl, #1056964608	; 0x3f000000
     4b0:	0101000e 	tsteq	r1, lr
     4b4:	00020500 	andeq	r0, r2, r0, lsl #10
     4b8:	03000000 	movweq	r0, #0
     4bc:	130104d5 	movwne	r0, #5333	; 0x14d5
     4c0:	0004022f 	andeq	r0, r4, pc, lsr #4
     4c4:	006e0101 	rsbeq	r0, lr, r1, lsl #2
     4c8:	00020000 	andeq	r0, r2, r0
     4cc:	00000068 	andeq	r0, r0, r8, rrx
     4d0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     4d4:	0101000d 	tsteq	r1, sp
     4d8:	00000101 	andeq	r0, r0, r1, lsl #2
     4dc:	00000100 	andeq	r0, r0, r0, lsl #2
     4e0:	732f2e01 	teqvc	pc, #1, 28
     4e4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     4e8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     4ec:	752f2e00 	strvc	r2, [pc, #-3584]!	; fffff6f4 <BootRAM+0xef6fe95>
     4f0:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
     4f4:	00006269 	andeq	r6, r0, r9, ror #4
     4f8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     4fc:	30316632 	eorscc	r6, r1, r2, lsr r6
     500:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     504:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     508:	00000100 	andeq	r0, r0, r0, lsl #2
     50c:	5f627375 	svcpl	0x00627375
     510:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     514:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     518:	73750000 	cmnvc	r5, #0
     51c:	00682e62 	rsbeq	r2, r8, r2, ror #28
     520:	75000000 	strvc	r0, [r0, #-0]
     524:	645f6273 	ldrbvs	r6, [pc], #-627	; 52c <_Minimum_Stack_Size+0x42c>
     528:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     52c:	6f747069 	svcvs	0x00747069
     530:	00632e72 	rsbeq	r2, r3, r2, ror lr
     534:	00000000 	andeq	r0, r0, r0
     538:	000002a7 	andeq	r0, r0, r7, lsr #5
     53c:	01f10002 	mvnseq	r0, r2
     540:	01020000 	mrseq	r0, (UNDEF: 2)
     544:	000d0efb 	strdeq	r0, [sp], -fp
     548:	01010101 	tsteq	r1, r1, lsl #2
     54c:	01000000 	mrseq	r0, (UNDEF: 0)
     550:	63010000 	movwvs	r0, #4096	; 0x1000
     554:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
     558:	6172676f 	cmnvs	r2, pc, ror #14
     55c:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
     560:	2073656c 	rsbscs	r6, r3, ip, ror #10
     564:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
     568:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
     56c:	6f742075 	svcvs	0x00742075
     570:	20736c6f 	rsbscs	r6, r3, pc, ror #24
     574:	206d7261 	rsbcs	r7, sp, r1, ror #4
     578:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     57c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     580:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
     584:	31303220 	teqcc	r0, r0, lsr #4
     588:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
     58c:	5c62696c 	stclpl	9, cr6, [r2], #-432	; 0xfffffe50
     590:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
     594:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     598:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     59c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     5a0:	2e345c69 	cdpcs	12, 3, cr5, cr4, cr9, {3}
     5a4:	5c342e38 	ldcpl	14, cr2, [r4], #-224	; 0xffffff20
     5a8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     5ac:	00656475 	rsbeq	r6, r5, r5, ror r4
     5b0:	705c3a63 	subsvc	r3, ip, r3, ror #20
     5b4:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
     5b8:	66206d61 	strtvs	r6, [r0], -r1, ror #26
     5bc:	73656c69 	cmnvc	r5, #26880	; 0x6900
     5c0:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
     5c4:	675c2936 	smmlarvs	ip, r6, r9, r2
     5c8:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
     5cc:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     5d0:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
     5d4:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
     5d8:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     5dc:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
     5e0:	30322038 	eorscc	r2, r2, r8, lsr r0
     5e4:	33713431 	cmncc	r1, #822083584	; 0x31000000
     5e8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     5ec:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     5f0:	61652d65 	cmnvs	r5, r5, ror #26
     5f4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     5f8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     5fc:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     600:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     604:	6300656e 	movwvs	r6, #1390	; 0x56e
     608:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
     60c:	6172676f 	cmnvs	r2, pc, ror #14
     610:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
     614:	2073656c 	rsbscs	r6, r3, ip, ror #10
     618:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
     61c:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
     620:	6f742075 	svcvs	0x00742075
     624:	20736c6f 	rsbscs	r6, r3, pc, ror #24
     628:	206d7261 	rsbcs	r7, sp, r1, ror #4
     62c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     630:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     634:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
     638:	31303220 	teqcc	r0, r0, lsr #4
     63c:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
     640:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     644:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     648:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     64c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     650:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     654:	2f2e0065 	svccs	0x002e0065
     658:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     65c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     660:	2f2e0062 	svccs	0x002e0062
     664:	31353532 	teqcc	r5, r2, lsr r5
     668:	2f2e0039 	svccs	0x002e0039
     66c:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
     670:	00003436 	andeq	r3, r0, r6, lsr r4
     674:	6e69616d 	powvsez	f6, f1, #5.0
     678:	0000632e 	andeq	r6, r0, lr, lsr #6
     67c:	74730000 	ldrbtvc	r0, [r3], #-0
     680:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     684:	0100682e 	tsteq	r0, lr, lsr #16
     688:	645f0000 	ldrbvs	r0, [pc], #-0	; 690 <_Minimum_Stack_Size+0x590>
     68c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
     690:	745f746c 	ldrbvc	r7, [pc], #-1132	; 698 <_Minimum_Stack_Size+0x598>
     694:	73657079 	cmnvc	r5, #121	; 0x79
     698:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     69c:	74730000 	ldrbtvc	r0, [r3], #-0
     6a0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     6a4:	0300682e 	movweq	r6, #2094	; 0x82e
     6a8:	74730000 	ldrbtvc	r0, [r3], #-0
     6ac:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     6b0:	5f783031 	svcpl	0x00783031
     6b4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     6b8:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     6bc:	61680000 	cmnvs	r8, r0
     6c0:	61776472 	cmnvs	r7, r2, ror r4
     6c4:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     6c8:	00000000 	andeq	r0, r0, r0
     6cc:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     6d0:	00682e65 	rsbeq	r2, r8, r5, ror #28
     6d4:	73000000 	movwvc	r0, #0
     6d8:	35326168 	ldrcc	r6, [r2, #-360]!	; 0x168
     6dc:	00682e36 	rsbeq	r2, r8, r6, lsr lr
     6e0:	63000005 	movwvs	r0, #5
     6e4:	6f636e65 	svcvs	0x00636e65
     6e8:	682e6564 	stmdavs	lr!, {r2, r5, r6, r8, sl, sp, lr}
     6ec:	00000600 	andeq	r0, r0, r0, lsl #12
     6f0:	63656463 	cmnvs	r5, #1660944384	; 0x63000000
     6f4:	2e65646f 	cdpcs	4, 6, cr6, cr5, cr15, {3}
     6f8:	00060068 	andeq	r0, r6, r8, rrx
     6fc:	62737500 	rsbsvs	r7, r3, #0, 10
     700:	0000682e 	andeq	r6, r0, lr, lsr #16
     704:	74730000 	ldrbtvc	r0, [r3], #-0
     708:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     70c:	0300682e 	movweq	r6, #2094	; 0x82e
     710:	74730000 	ldrbtvc	r0, [r3], #-0
     714:	2e6f6964 	cdpcs	9, 6, cr6, cr15, cr4, {3}
     718:	00030068 	andeq	r0, r3, r8, rrx
     71c:	73646500 	cmnvc	r4, #0, 10
     720:	2e6e6769 	cdpcs	7, 6, cr6, cr14, cr9, {3}
     724:	00050068 	andeq	r0, r5, r8, rrx
     728:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     72c:	0000682e 	andeq	r6, r0, lr, lsr #16
     730:	00000000 	andeq	r0, r0, r0
     734:	00000205 	andeq	r0, r0, r5, lsl #4
     738:	32030000 	andcc	r0, r3, #0
     73c:	1c242001 	stcne	0, cr2, [r4], #-4
     740:	31912f24 	orrscc	r2, r1, r4, lsr #30
     744:	01000202 	tsteq	r0, r2, lsl #4
     748:	02050001 	andeq	r0, r5, #1
     74c:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
     750:	20013e03 	andcs	r3, r1, r3, lsl #28
     754:	2f241c24 	svccs	0x00241c24
     758:	3d211f91 	stccc	15, cr1, [r1, #-580]!	; 0xfffffdbc
     75c:	0223211f 	eoreq	r2, r3, #-1073741817	; 0xc0000007
     760:	01010002 	tsteq	r1, r2
     764:	68020500 	stmdavs	r2, {r8, sl}
     768:	03080010 	movweq	r0, #32784	; 0x8010
     76c:	030100ce 	movweq	r0, #4302	; 0x10ce
     770:	bd3d3c0a 	ldclt	12, cr3, [sp, #-40]!	; 0xffffffd8
     774:	4b4c593e 	blmi	1316c74 <__Stack_Size+0x1316474>
     778:	4c845a4c 	vstmiami	r4, {s10-s85}
     77c:	0d024b4b 	vstreq	d4, [r2, #-300]	; 0xfffffed4
     780:	00010100 	andeq	r0, r1, r0, lsl #2
     784:	11000205 	tstne	r0, r5, lsl #4
     788:	f2030800 	vadd.i8	d0, d3, d0
     78c:	2f320100 	svccs	0x00320100
     790:	2f2f2f2f 	svccs	0x002f2f2f
     794:	3e5e3d30 	mrccc	13, 2, r3, cr14, cr0, {1}
     798:	2f1f2f67 	svccs	0x001f2f67
     79c:	00667803 	rsbeq	r7, r6, r3, lsl #16
     7a0:	03010402 	movweq	r0, #5122	; 0x1402
     7a4:	0200580b 	andeq	r5, r0, #720896	; 0xb0000
     7a8:	003d0104 	eorseq	r0, sp, r4, lsl #2
     7ac:	21010402 	tstcs	r1, r2, lsl #8
     7b0:	02002f23 	andeq	r2, r0, #35, 30	; 0x8c
     7b4:	00330104 	eorseq	r0, r3, r4, lsl #2
     7b8:	33010402 	movwcc	r0, #5122	; 0x1402
     7bc:	01040200 	mrseq	r0, R12_usr
     7c0:	2391273d 	orrscs	r2, r1, #15990784	; 0xf40000
     7c4:	04020091 	streq	r0, [r2], #-145	; 0x91
     7c8:	02004c01 	andeq	r4, r0, #256	; 0x100
     7cc:	003d0104 	eorseq	r0, sp, r4, lsl #2
     7d0:	43010402 	movwmi	r0, #5122	; 0x1402
     7d4:	01040200 	mrseq	r0, R12_usr
     7d8:	0402003d 	streq	r0, [r2], #-61	; 0x3d
     7dc:	1d024001 	stcne	0, cr4, [r2, #-4]
     7e0:	3d010100 	stfccs	f0, [r1, #-0]
     7e4:	02000005 	andeq	r0, r0, #5
     7e8:	0001b700 	andeq	fp, r1, r0, lsl #14
     7ec:	fb010200 	blx	40ff6 <__Stack_Size+0x407f6>
     7f0:	01000d0e 	tsteq	r0, lr, lsl #26
     7f4:	00010101 	andeq	r0, r1, r1, lsl #2
     7f8:	00010000 	andeq	r0, r1, r0
     7fc:	3a630100 	bcc	18c0c04 <__Stack_Size+0x18c0404>
     800:	6f72705c 	svcvs	0x0072705c
     804:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
     808:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
     80c:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     810:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
     814:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
     818:	6f6f7420 	svcvs	0x006f7420
     81c:	6120736c 	teqvs	r0, ip, ror #6
     820:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
     824:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
     828:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
     82c:	20382e34 	eorscs	r2, r8, r4, lsr lr
     830:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
     834:	6c5c3371 	mrrcvs	3, 7, r3, ip, cr1
     838:	675c6269 	ldrbvs	r6, [ip, -r9, ror #4]
     83c:	615c6363 	cmpvs	ip, r3, ror #6
     840:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     844:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     848:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     84c:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
     850:	695c342e 	ldmdbvs	ip, {r1, r2, r3, r5, sl, ip, sp}^
     854:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     858:	63006564 	movwvs	r6, #1380	; 0x564
     85c:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
     860:	6172676f 	cmnvs	r2, pc, ror #14
     864:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
     868:	2073656c 	rsbscs	r6, r3, ip, ror #10
     86c:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
     870:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
     874:	6f742075 	svcvs	0x00742075
     878:	20736c6f 	rsbscs	r6, r3, pc, ror #24
     87c:	206d7261 	rsbcs	r7, sp, r1, ror #4
     880:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     884:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     888:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
     88c:	31303220 	teqcc	r0, r0, lsr #4
     890:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
     894:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     898:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     89c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     8a0:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     8a4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     8a8:	616d5c65 	cmnvs	sp, r5, ror #24
     8ac:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     8b0:	3a630065 	bcc	18c0a4c <__Stack_Size+0x18c024c>
     8b4:	6f72705c 	svcvs	0x0072705c
     8b8:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
     8bc:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
     8c0:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     8c4:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
     8c8:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
     8cc:	6f6f7420 	svcvs	0x006f7420
     8d0:	6120736c 	teqvs	r0, ip, ror #6
     8d4:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
     8d8:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
     8dc:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
     8e0:	20382e34 	eorscs	r2, r8, r4, lsr lr
     8e4:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
     8e8:	615c3371 	cmpvs	ip, r1, ror r3
     8ec:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     8f0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     8f4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     8f8:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     8fc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     900:	732f2e00 	teqvc	pc, #0, 28
     904:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     908:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     90c:	61680000 	cmnvs	r8, r0
     910:	61776472 	cmnvs	r7, r2, ror r4
     914:	632e6572 	teqvs	lr, #478150656	; 0x1c800000
     918:	00000000 	andeq	r0, r0, r0
     91c:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
     920:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
     924:	00000100 	andeq	r0, r0, r0, lsl #2
     928:	61647473 	smcvs	18243	; 0x4743
     92c:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
     930:	00000100 	andeq	r0, r0, r0, lsl #2
     934:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     938:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     93c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     940:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     944:	00000200 	andeq	r0, r0, r0, lsl #4
     948:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     94c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     950:	00000300 	andeq	r0, r0, r0, lsl #6
     954:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     958:	30316632 	eorscc	r6, r1, r2, lsr r6
     95c:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     960:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     964:	00000400 	andeq	r0, r0, r0, lsl #8
     968:	64726168 	ldrbtvs	r6, [r2], #-360	; 0x168
     96c:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     970:	0000682e 	andeq	r6, r0, lr, lsr #16
     974:	623c0000 	eorsvs	r0, ip, #0
     978:	746c6975 	strbtvc	r6, [ip], #-2421	; 0x975
     97c:	3e6e692d 	cdpcc	9, 6, cr6, cr14, cr13, {1}
     980:	00000000 	andeq	r0, r0, r0
     984:	2e627375 	mcrcs	3, 3, r7, cr2, cr5, {3}
     988:	00000068 	andeq	r0, r0, r8, rrx
     98c:	616d6900 	cmnvs	sp, r0, lsl #18
     990:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     994:	00000000 	andeq	r0, r0, r0
     998:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     99c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     9a0:	00000003 	andeq	r0, r0, r3
     9a4:	fc020500 	stc2	5, cr0, [r2], {-0}
     9a8:	03080011 	movweq	r0, #32785	; 0x8011
     9ac:	3b14013a 	blcc	500e9c <__Stack_Size+0x50069c>
     9b0:	0004024b 	andeq	r0, r4, fp, asr #4
     9b4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     9b8:	00121202 	andseq	r1, r2, r2, lsl #4
     9bc:	013f0308 	teqeq	pc, r8, lsl #6
     9c0:	04025d14 	streq	r5, [r2], #-3348	; 0xd14
     9c4:	00010100 	andeq	r0, r1, r0, lsl #2
     9c8:	12240205 	eorne	r0, r4, #1342177280	; 0x50000000
     9cc:	c9030800 	stmdbgt	r3, {fp}
     9d0:	3d2e0100 	stfccs	f0, [lr, #-0]
     9d4:	02003d49 	andeq	r3, r0, #4672	; 0x1240
     9d8:	06310104 	ldrteq	r0, [r1], -r4, lsl #2
     9dc:	04020020 	streq	r0, [r2], #-32
     9e0:	00220601 	eoreq	r0, r2, r1, lsl #12
     9e4:	22020402 	andcs	r0, r2, #33554432	; 0x2000000
     9e8:	02040200 	andeq	r0, r4, #0, 4
     9ec:	005a331e 	subseq	r3, sl, lr, lsl r3
     9f0:	06010402 	streq	r0, [r1], -r2, lsl #8
     9f4:	04020020 	streq	r0, [r2], #-32
     9f8:	00220602 	eoreq	r0, r2, r2, lsl #12
     9fc:	1e020402 	cdpne	4, 0, cr0, cr2, cr2, {0}
     a00:	000a0232 	andeq	r0, sl, r2, lsr r2
     a04:	05000101 	streq	r0, [r0, #-257]	; 0x101
     a08:	00127402 	andseq	r7, r2, r2, lsl #8
     a0c:	02a00308 	adceq	r0, r0, #8, 6	; 0x20000000
     a10:	04020001 	streq	r0, [r2], #-1
     a14:	023d1301 	eorseq	r1, sp, #67108864	; 0x4000000
     a18:	01010002 	tsteq	r1, r2
     a1c:	7e020500 	cfsh32vc	mvfx0, mvfx2, #0
     a20:	03080012 	movweq	r0, #32786	; 0x8012
     a24:	200102a6 	andcs	r0, r1, r6, lsr #5
     a28:	01040200 	mrseq	r0, R12_usr
     a2c:	024d3e2f 	subeq	r3, sp, #752	; 0x2f0
     a30:	01010001 	tsteq	r1, r1
     a34:	94020500 	strls	r0, [r2], #-1280	; 0x500
     a38:	03080012 	movweq	r0, #32786	; 0x8012
     a3c:	3c0102af 	sfmcc	f0, 4, [r1], {175}	; 0xaf
     a40:	024d6822 	subeq	r6, sp, #2228224	; 0x220000
     a44:	01010006 	tsteq	r1, r6
     a48:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
     a4c:	03080012 	movweq	r0, #32786	; 0x8012
     a50:	2e0102b9 	mcrcs	2, 0, r0, cr1, cr9, {5}
     a54:	0230213e 	eorseq	r2, r0, #-2147483633	; 0x8000000f
     a58:	01010005 	tsteq	r1, r5
     a5c:	d8020500 	stmdale	r2, {r8, sl}
     a60:	03080012 	movweq	r0, #32786	; 0x8012
     a64:	2e0102c1 	cdpcs	2, 0, cr0, cr1, cr1, {6}
     a68:	02005a31 	andeq	r5, r0, #200704	; 0x31000
     a6c:	20060104 	andcs	r0, r6, r4, lsl #2
     a70:	02004c06 	andeq	r4, r0, #1536	; 0x600
     a74:	20060104 	andcs	r0, r6, r4, lsl #2
     a78:	01040200 	mrseq	r0, R12_usr
     a7c:	02002206 	andeq	r2, r0, #1610612736	; 0x60000000
     a80:	004b0104 	subeq	r0, fp, r4, lsl #2
     a84:	68010402 	stmdavs	r1, {r1, sl}
     a88:	01040200 	mrseq	r0, R12_usr
     a8c:	0402003e 	streq	r0, [r2], #-62	; 0x3e
     a90:	02003e01 	andeq	r3, r0, #1, 28
     a94:	004b0104 	subeq	r0, fp, r4, lsl #2
     a98:	03010402 	movweq	r0, #5122	; 0x1402
     a9c:	02002074 	andeq	r2, r0, #116	; 0x74
     aa0:	0c030104 	stfeqs	f0, [r3], {4}
     aa4:	0b03a220 	bleq	e932c <__Stack_Size+0xe8b2c>
     aa8:	76034b20 	strvc	r4, [r3], -r0, lsr #22
     aac:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     ab0:	02003001 	andeq	r3, r0, #1
     ab4:	004c0104 	subeq	r0, ip, r4, lsl #2
     ab8:	30010402 	andcc	r0, r1, r2, lsl #8
     abc:	01000f02 	tsteq	r0, r2, lsl #30
     ac0:	02050001 	andeq	r0, r5, #1
     ac4:	08001374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip}
     ac8:	0102e503 	tsteq	r2, r3, lsl #10
     acc:	02002220 	andeq	r2, r0, #32, 4
     ad0:	00210104 	eoreq	r0, r1, r4, lsl #2
     ad4:	2d010402 	cfstrscs	mvf0, [r1, #-8]
     ad8:	01040200 	mrseq	r0, R12_usr
     adc:	04020021 	streq	r0, [r2], #-33	; 0x21
     ae0:	02002d01 	andeq	r2, r0, #1, 26	; 0x40
     ae4:	00300104 	eorseq	r0, r0, r4, lsl #2
     ae8:	2f010402 	svccs	0x00010402
     aec:	01040200 	mrseq	r0, R12_usr
     af0:	0006022d 	andeq	r0, r6, sp, lsr #4
     af4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     af8:	00139c02 	andseq	r9, r3, r2, lsl #24
     afc:	02ed0308 	rsceq	r0, sp, #8, 6	; 0x20000000
     b00:	79032701 	stmdbvc	r3, {r0, r8, r9, sl, sp}
     b04:	4e592620 	cdpmi	6, 5, cr2, cr9, cr0, {1}
     b08:	211f3e4b 	tstcs	pc, fp, asr #28
     b0c:	4b312f1f 	blmi	c4c790 <__Stack_Size+0xc4bf90>
     b10:	312f3b21 	teqcc	pc, r1, lsr #22
     b14:	2e7a0343 	cdpcs	3, 7, cr0, cr10, cr3, {2}
     b18:	312f2f3d 	teqcc	pc, sp, lsr pc	; <UNPREDICTABLE>
     b1c:	301e221e 	andscc	r2, lr, lr, lsl r2
     b20:	05024b31 	streq	r4, [r2, #-2865]	; 0xb31
     b24:	00010100 	andeq	r0, r1, r0, lsl #2
     b28:	14240205 	strtne	r0, [r4], #-517	; 0x205
     b2c:	90030800 	andls	r0, r3, r0, lsl #16
     b30:	21130103 	tstcs	r3, r3, lsl #2
     b34:	674b4b1f 	smlaldvs	r4, fp, pc, fp	; <UNPREDICTABLE>
     b38:	0c024c4b 	stceq	12, cr4, [r2], {75}	; 0x4b
     b3c:	00010100 	andeq	r0, r1, r0, lsl #2
     b40:	146c0205 	strbtne	r0, [ip], #-517	; 0x205
     b44:	9a030800 	bls	c2b4c <__Stack_Size+0xc234c>
     b48:	00150103 	andseq	r0, r5, r3, lsl #2
     b4c:	59010402 	stmdbpl	r1, {r1, sl}
     b50:	0085424d 	addeq	r4, r5, sp, asr #4
     b54:	51010402 	tstpl	r1, r2, lsl #8
     b58:	004a0b03 	subeq	r0, sl, r3, lsl #22
     b5c:	4b010402 	blmi	41b6c <__Stack_Size+0x4136c>
     b60:	09024b3e 	stmdbeq	r2, {r1, r2, r3, r4, r5, r8, r9, fp, lr}
     b64:	00010100 	andeq	r0, r1, r0, lsl #2
     b68:	14cc0205 	strbne	r0, [ip], #517	; 0x205
     b6c:	c4030800 	strgt	r0, [r3], #-2048	; 0x800
     b70:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     b74:	0101000a 	tsteq	r1, sl
     b78:	e0020500 	and	r0, r2, r0, lsl #10
     b7c:	03080014 	movweq	r0, #32788	; 0x8014
     b80:	140103c8 	strne	r0, [r1], #-968	; 0x3c8
     b84:	002f214b 	eoreq	r2, pc, fp, asr #2
     b88:	24010402 	strcs	r0, [r1], #-1026	; 0x402
     b8c:	0003023d 	andeq	r0, r3, sp, lsr r2
     b90:	05000101 	streq	r0, [r0, #-257]	; 0x101
     b94:	0014fc02 	andseq	pc, r4, r2, lsl #24
     b98:	03d60308 	bicseq	r0, r6, #8, 6	; 0x20000000
     b9c:	3d3d1701 	ldccc	7, cr1, [sp, #-4]!
     ba0:	000d023d 	andeq	r0, sp, sp, lsr r2
     ba4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ba8:	00152802 	andseq	r2, r5, r2, lsl #16
     bac:	03e20308 	mvneq	r0, #8, 6	; 0x20000000
     bb0:	01090301 	tsteq	r9, r1, lsl #6
     bb4:	25207703 	strcs	r7, [r0, #-1795]!	; 0x703
     bb8:	311f2324 	tstcc	pc, r4, lsr #6
     bbc:	01000502 	tsteq	r0, r2, lsl #10
     bc0:	02050001 	andeq	r0, r5, #1
     bc4:	00000000 	andeq	r0, r0, r0
     bc8:	01048903 	tsteq	r4, r3, lsl #18
     bcc:	31695b14 	cmncc	r9, r4, lsl fp
     bd0:	01000902 	tsteq	r0, r2, lsl #18
     bd4:	02050001 	andeq	r0, r5, #1
     bd8:	00000000 	andeq	r0, r0, r0
     bdc:	01049803 	tsteq	r4, r3, lsl #16
     be0:	5a2c2224 	bpl	b09478 <__Stack_Size+0xb08c78>
     be4:	2631368b 	ldrtcs	r3, [r1], -fp, lsl #13
     be8:	06024d3e 			; <UNDEFINED> instruction: 0x06024d3e
     bec:	00010100 	andeq	r0, r1, r0, lsl #2
     bf0:	15400205 	strbne	r0, [r0, #-517]	; 0x205
     bf4:	b1030800 	tstlt	r3, r0, lsl #16
     bf8:	0c030104 	stfeqs	f0, [r3], {4}
     bfc:	20740301 	rsbscs	r0, r4, r1, lsl #6
     c00:	24200c03 	strtcs	r0, [r0], #-3075	; 0xc03
     c04:	2c313d1c 	ldccs	13, cr3, [r1], #-112	; 0xffffff90
     c08:	311d2331 	tstcc	sp, r1, lsr r3
     c0c:	231d243b 	tstcs	sp, #989855744	; 0x3b000000
     c10:	212f3073 	teqcs	pc, r3, ror r0	; <UNPREDICTABLE>
     c14:	1f213122 	svcne	0x00213122
     c18:	09024921 	stmdbeq	r2, {r0, r5, r8, fp, lr}
     c1c:	00010100 	andeq	r0, r1, r0, lsl #2
     c20:	15ac0205 	strne	r0, [ip, #517]!	; 0x205
     c24:	d4030800 	strle	r0, [r3], #-2048	; 0x800
     c28:	59140104 	ldmdbpl	r4, {r2, r8}
     c2c:	02302f2f 	eorseq	r2, r0, #47, 30	; 0xbc
     c30:	01010007 	tsteq	r1, r7
     c34:	d0020500 	andle	r0, r2, r0, lsl #10
     c38:	03080015 	movweq	r0, #32789	; 0x8015
     c3c:	200103f4 	strdcs	r0, [r1], -r4
     c40:	32312f27 	eorscc	r2, r1, #39, 30	; 0x9c
     c44:	022d2130 	eoreq	r2, sp, #48, 2
     c48:	01010002 	tsteq	r1, r2
     c4c:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
     c50:	03080015 	movweq	r0, #32789	; 0x8015
     c54:	160104de 			; <UNDEFINED> instruction: 0x160104de
     c58:	01040200 	mrseq	r0, R12_usr
     c5c:	00070240 	andeq	r0, r7, r0, asr #4
     c60:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c64:	00160402 	andseq	r0, r6, r2, lsl #8
     c68:	04ea0308 	strbteq	r0, [sl], #776	; 0x308
     c6c:	211f1301 	tstcs	pc, r1, lsl #6
     c70:	04020022 	streq	r0, [r2], #-34	; 0x22
     c74:	21673001 	cmncs	r7, r1
     c78:	01040200 	mrseq	r0, R12_usr
     c7c:	02234f2f 	eoreq	r4, r3, #47, 30	; 0xbc
     c80:	01010007 	tsteq	r1, r7
     c84:	00020500 	andeq	r0, r2, r0, lsl #10
     c88:	03000000 	movweq	r0, #0
     c8c:	2e0104fb 	mcrcs	4, 0, r0, cr1, cr11, {7}
     c90:	01040200 	mrseq	r0, R12_usr
     c94:	21b14b2f 			; <UNDEFINED> instruction: 0x21b14b2f
     c98:	01000402 	tsteq	r0, r2, lsl #8
     c9c:	02050001 	andeq	r0, r5, #1
     ca0:	08001638 	stmdaeq	r0, {r3, r4, r5, r9, sl, ip}
     ca4:	01058503 	tsteq	r5, r3, lsl #10
     ca8:	21302f22 	teqcs	r0, r2, lsr #30
     cac:	0200211f 	andeq	r2, r0, #-1073741817	; 0xc0000007
     cb0:	4b240104 	blmi	9010c8 <__Stack_Size+0x9008c8>
     cb4:	01040200 	mrseq	r0, R12_usr
     cb8:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
     cbc:	3e3d0104 	rsfcce	f0, f5, f4
     cc0:	0225232f 	eoreq	r2, r5, #-1140850688	; 0xbc000000
     cc4:	01010009 	tsteq	r1, r9
     cc8:	84020500 	strhi	r0, [r2], #-1280	; 0x500
     ccc:	03080016 	movweq	r0, #32790	; 0x8016
     cd0:	160105a0 	strne	r0, [r1], -r0, lsr #11
     cd4:	01000602 	tsteq	r0, r2, lsl #12
     cd8:	02050001 	andeq	r0, r5, #1
     cdc:	08001690 	stmdaeq	r0, {r4, r7, r9, sl, ip}
     ce0:	0105a703 	tsteq	r5, r3, lsl #14
     ce4:	09023d14 	stmdbeq	r2, {r2, r4, r8, sl, fp, ip, sp}
     ce8:	00010100 	andeq	r0, r1, r0, lsl #2
     cec:	16a80205 	strtne	r0, [r8], r5, lsl #4
     cf0:	b0030800 	andlt	r0, r3, r0, lsl #16
     cf4:	22140105 	andscs	r0, r4, #1073741825	; 0x40000001
     cf8:	02024c30 	andeq	r4, r2, #48, 24	; 0x3000
     cfc:	00010100 	andeq	r0, r1, r0, lsl #2
     d00:	16bc0205 	ldrtne	r0, [ip], r5, lsl #4
     d04:	bc030800 	stclt	8, cr0, [r3], {-0}
     d08:	4b140105 	blmi	501124 <__Stack_Size+0x500924>
     d0c:	01000402 	tsteq	r0, r2, lsl #8
     d10:	02050001 	andeq	r0, r5, #1
     d14:	080016cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip}
     d18:	0105c203 	tsteq	r5, r3, lsl #4
     d1c:	02263015 	eoreq	r3, r6, #21
     d20:	01010009 	tsteq	r1, r9
     d24:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
     d28:	01dc0002 	bicseq	r0, ip, r2
     d2c:	01020000 	mrseq	r0, (UNDEF: 2)
     d30:	000d0efb 	strdeq	r0, [sp], -fp
     d34:	01010101 	tsteq	r1, r1, lsl #2
     d38:	01000000 	mrseq	r0, (UNDEF: 0)
     d3c:	63010000 	movwvs	r0, #4096	; 0x1000
     d40:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
     d44:	6172676f 	cmnvs	r2, pc, ror #14
     d48:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
     d4c:	2073656c 	rsbscs	r6, r3, ip, ror #10
     d50:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
     d54:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
     d58:	6f742075 	svcvs	0x00742075
     d5c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
     d60:	206d7261 	rsbcs	r7, sp, r1, ror #4
     d64:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     d68:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     d6c:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
     d70:	31303220 	teqcc	r0, r0, lsr #4
     d74:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
     d78:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     d7c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     d80:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     d84:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     d88:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     d8c:	616d5c65 	cmnvs	sp, r5, ror #24
     d90:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     d94:	3a630065 	bcc	18c0f30 <__Stack_Size+0x18c0730>
     d98:	6f72705c 	svcvs	0x0072705c
     d9c:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
     da0:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
     da4:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     da8:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
     dac:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
     db0:	6f6f7420 	svcvs	0x006f7420
     db4:	6120736c 	teqvs	r0, ip, ror #6
     db8:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
     dbc:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
     dc0:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
     dc4:	20382e34 	eorscs	r2, r8, r4, lsr lr
     dc8:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
     dcc:	615c3371 	cmpvs	ip, r1, ror r3
     dd0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     dd4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     dd8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     ddc:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     de0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     de4:	732f2e00 	teqvc	pc, #0, 28
     de8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     dec:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     df0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     df4:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
     df8:	206d6172 	rsbcs	r6, sp, r2, ror r1
     dfc:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
     e00:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
     e04:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
     e08:	20756e67 	rsbscs	r6, r5, r7, ror #28
     e0c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; c44 <__Stack_Size+0x444>
     e10:	72612073 	rsbvc	r2, r1, #115	; 0x73
     e14:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
     e18:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
     e1c:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
     e20:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
     e24:	71343130 	teqvc	r4, r0, lsr r1
     e28:	696c5c33 	stmdbvs	ip!, {r0, r1, r4, r5, sl, fp, ip, lr}^
     e2c:	63675c62 	cmnvs	r7, #25088	; 0x6200
     e30:	72615c63 	rsbvc	r5, r1, #25344	; 0x6300
     e34:	6f6e2d6d 	svcvs	0x006e2d6d
     e38:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     e3c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     e40:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     e44:	6e695c34 	mcrvs	12, 3, r5, cr9, cr4, {1}
     e48:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     e4c:	2f2e0065 	svccs	0x002e0065
     e50:	5f627375 	svcpl	0x00627375
     e54:	0062696c 	rsbeq	r6, r2, ip, ror #18
     e58:	35322f2e 	ldrcc	r2, [r2, #-3886]!	; 0xf2e
     e5c:	00393135 	eorseq	r3, r9, r5, lsr r1
     e60:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     e64:	0000632e 	andeq	r6, r0, lr, lsr #6
     e68:	645f0000 	ldrbvs	r0, [pc], #-0	; e70 <__Stack_Size+0x670>
     e6c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
     e70:	745f746c 	ldrbvc	r7, [pc], #-1132	; e78 <__Stack_Size+0x678>
     e74:	73657079 	cmnvc	r5, #121	; 0x79
     e78:	0100682e 	tsteq	r0, lr, lsr #16
     e7c:	74730000 	ldrbtvc	r0, [r3], #-0
     e80:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     e84:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     e88:	74730000 	ldrbtvc	r0, [r3], #-0
     e8c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     e90:	5f783031 	svcpl	0x00783031
     e94:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     e98:	0300682e 	movweq	r6, #2094	; 0x82e
     e9c:	74730000 	ldrbtvc	r0, [r3], #-0
     ea0:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     ea4:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     ea8:	73750000 	cmnvc	r5, #0
     eac:	6f635f62 	svcvs	0x00635f62
     eb0:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     eb4:	00000500 	andeq	r0, r0, r0, lsl #10
     eb8:	2e756664 	cdpcs	6, 7, cr6, cr5, cr4, {3}
     ebc:	00000068 	andeq	r0, r0, r8, rrx
     ec0:	61687300 	cmnvs	r8, r0, lsl #6
     ec4:	2e363532 	mrccs	5, 1, r3, cr6, cr2, {1}
     ec8:	00060068 	andeq	r0, r6, r8, rrx
     ecc:	616d6900 	cmnvs	sp, r0, lsl #18
     ed0:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     ed4:	00000000 	andeq	r0, r0, r0
     ed8:	5f627375 	svcpl	0x00627375
     edc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     ee0:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
     ee4:	73750000 	cmnvc	r5, #0
     ee8:	00682e62 	rsbeq	r2, r8, r2, ror #28
     eec:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     ef0:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
     ef4:	2e657261 	cdpcs	2, 6, cr7, cr5, cr1, {3}
     ef8:	00000068 	andeq	r0, r0, r8, rrx
     efc:	72747300 	rsbsvc	r7, r4, #0, 6
     f00:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
     f04:	00020068 	andeq	r0, r2, r8, rrx
     f08:	05000000 	streq	r0, [r0, #-0]
     f0c:	0016e402 	andseq	lr, r6, r2, lsl #8
     f10:	013c0308 	teqeq	ip, r8, lsl #6
     f14:	1c251f13 	stcne	15, cr1, [r5], #-76	; 0xffffffb4
     f18:	2121212f 	teqcs	r1, pc, lsr #2
     f1c:	1e222121 	sufnesp	f2, f2, f1
     f20:	7a032621 	bvc	ca7ac <__Stack_Size+0xc9fac>
     f24:	4b2f2120 	blmi	bc93ac <__Stack_Size+0xbc8bac>
     f28:	2f211f21 	svccs	0x00211f21
     f2c:	3d211f21 	stccc	15, cr1, [r1, #-132]!	; 0xffffff7c
     f30:	1c022d5b 	stcne	13, cr2, [r2], {91}	; 0x5b
     f34:	00010100 	andeq	r0, r1, r0, lsl #2
     f38:	176c0205 	strbne	r0, [ip, -r5, lsl #4]!
     f3c:	ea030800 	b	c2f44 <__Stack_Size+0xc2744>
     f40:	21210102 	teqcs	r1, r2, lsl #2
     f44:	231f211f 	tstcs	pc, #-1073741817	; 0xc0000007
     f48:	2f21221e 	svccs	0x0021221e
     f4c:	2e0d0322 	cdpcs	3, 0, cr0, cr13, cr2, {1}
     f50:	2f2e7403 	svccs	0x002e7403
     f54:	2c242f42 	stccs	15, cr2, [r4], #-264	; 0xfffffef8
     f58:	01000802 	tsteq	r0, r2, lsl #16
     f5c:	02050001 	andeq	r0, r5, #1
     f60:	00000000 	andeq	r0, r0, r0
     f64:	01038103 	tsteq	r3, r3, lsl #2
     f68:	01000102 	tsteq	r0, r2, lsl #2
     f6c:	02050001 	andeq	r0, r5, #1
     f70:	080017b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, ip}
     f74:	01038403 	tsteq	r3, r3, lsl #8
     f78:	224b2113 	subcs	r2, fp, #-1073741820	; 0xc0000004
     f7c:	00050222 	andeq	r0, r5, r2, lsr #4
     f80:	05000101 	streq	r0, [r0, #-257]	; 0x101
     f84:	0017c802 	andseq	ip, r7, r2, lsl #16
     f88:	038d0308 	orreq	r0, sp, #8, 6	; 0x20000000
     f8c:	4b211301 	blmi	845b98 <__Stack_Size+0x845398>
     f90:	05022222 	streq	r2, [r2, #-546]	; 0x222
     f94:	00010100 	andeq	r0, r1, r0, lsl #2
     f98:	17e00205 	strbne	r0, [r0, r5, lsl #4]!
     f9c:	97030800 	strls	r0, [r3, -r0, lsl #16]
     fa0:	1f220103 	svcne	0x00220103
     fa4:	222f4b21 	eorcs	r4, pc, #33792	; 0x8400
     fa8:	0007023e 	andeq	r0, r7, lr, lsr r2
     fac:	05000101 	streq	r0, [r0, #-257]	; 0x101
     fb0:	00180802 	andseq	r0, r8, r2, lsl #16
     fb4:	03a10308 			; <UNDEFINED> instruction: 0x03a10308
     fb8:	67212101 	strvs	r2, [r1, -r1, lsl #2]!
     fbc:	09028422 	stmdbeq	r2, {r1, r5, sl, pc}
     fc0:	00010100 	andeq	r0, r1, r0, lsl #2
     fc4:	183c0205 	ldmdane	ip!, {r0, r2, r9}
     fc8:	aa030800 	bge	c2fd0 <__Stack_Size+0xc27d0>
     fcc:	13030103 	movwne	r0, #12547	; 0x3103
     fd0:	3e694b20 	vmulcc.f64	d20, d9, d16
     fd4:	01040200 	mrseq	r0, R12_usr
     fd8:	02002006 	andeq	r2, r0, #6
     fdc:	5d060204 	sfmpl	f0, 4, [r6, #-16]
     fe0:	02040200 	andeq	r0, r4, #0, 4
     fe4:	02673653 	rsbeq	r3, r7, #87031808	; 0x5300000
     fe8:	0101000b 	tsteq	r1, fp
     fec:	94020500 	strls	r0, [r2], #-1280	; 0x500
     ff0:	03080018 	movweq	r0, #32792	; 0x8018
     ff4:	310100d0 	ldrdcc	r0, [r1, -r0]
     ff8:	21301e22 	teqcs	r0, r2, lsr #28
     ffc:	241c251f 	ldrcs	r2, [ip], #-1311	; 0x51f
    1000:	4b592222 	blmi	1649890 <__Stack_Size+0x1649090>
    1004:	1f211f30 	svcne	0x00211f30
    1008:	3c180321 	ldccc	3, cr0, [r8], {33}	; 0x21
    100c:	4a71033d 	bmi	1c41d08 <__Stack_Size+0x1c41508>
    1010:	3c11033d 	ldccc	3, cr0, [r1], {61}	; 0x3d
    1014:	0324302f 	teqeq	r4, #47	; 0x2f
    1018:	322f3c09 	eorcc	r3, pc, #2304	; 0x900
    101c:	03684d3d 	cmneq	r8, #3904	; 0xf40
    1020:	2529580d 	strcs	r5, [r9, #-2061]!	; 0x80d
    1024:	2f264b2f 	svccs	0x00264b2f
    1028:	35303131 	ldrcc	r3, [r0, #-305]!	; 0x131
    102c:	581d0330 	ldmdapl	sp, {r4, r5, r8, r9}
    1030:	30343f2f 	eorscc	r3, r4, pc, lsr #30
    1034:	21211f4d 	teqcs	r1, sp, asr #30
    1038:	2f593040 	svccs	0x00593040
    103c:	222c2231 	eorcs	r2, ip, #268435459	; 0x10000003
    1040:	2f1f2f3d 	svccs	0x001f2f3d
    1044:	3e423469 	cdpcc	4, 4, cr3, cr2, cr9, {3}
    1048:	30433030 	subcc	r3, r3, r0, lsr r0
    104c:	422f2f59 	eormi	r2, pc, #356	; 0x164
    1050:	59303434 	ldmdbpl	r0!, {r2, r4, r5, sl, ip, sp}
    1054:	3d1f3d30 	ldccc	13, cr3, [pc, #-192]	; f9c <__Stack_Size+0x79c>
    1058:	4fc9211f 	svcmi	0x00c9211f
    105c:	2f424b77 	svccs	0x00424b77
    1060:	302f2f30 	eorcc	r2, pc, r0, lsr pc	; <UNPREDICTABLE>
    1064:	5a30332f 	bpl	c0dd28 <__Stack_Size+0xc0d528>
    1068:	2f30302f 	svccs	0x0030302f
    106c:	21312f35 	teqcs	r1, r5, lsr pc
    1070:	01002502 	tsteq	r0, r2, lsl #10
    1074:	02050001 	andeq	r0, r5, #1
    1078:	00000000 	andeq	r0, r0, r0
    107c:	0103d003 	tsteq	r3, r3
    1080:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
    1084:	00010100 	andeq	r0, r1, r0, lsl #2
    1088:	00000205 	andeq	r0, r0, r5, lsl #4
    108c:	d5030000 	strle	r0, [r3, #-0]
    1090:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
    1094:	01010006 	tsteq	r1, r6
    1098:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    109c:	0308001a 	movweq	r0, #32794	; 0x801a
    10a0:	130103da 	movwne	r0, #5082	; 0x13da
    10a4:	0004022f 	andeq	r0, r4, pc, lsr #4
    10a8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    10ac:	00000002 	andeq	r0, r0, r2
    10b0:	03df0300 	bicseq	r0, pc, #0, 6
    10b4:	002f1301 	eoreq	r1, pc, r1, lsl #6
    10b8:	06010402 	streq	r0, [r1], -r2, lsl #8
    10bc:	2106662e 	tstcs	r6, lr, lsr #12
    10c0:	01000302 	tsteq	r0, r2, lsl #6
    10c4:	02050001 	andeq	r0, r5, #1
    10c8:	08001b00 	stmdaeq	r0, {r8, r9, fp, ip}
    10cc:	0103e403 	tsteq	r3, r3, lsl #8
    10d0:	01040200 	mrseq	r0, R12_usr
    10d4:	00010216 	andeq	r0, r1, r6, lsl r2
    10d8:	024f0101 	subeq	r0, pc, #1073741824	; 0x40000000
    10dc:	00020000 	andeq	r0, r2, r0
    10e0:	000000f7 	strdeq	r0, [r0], -r7
    10e4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    10e8:	0101000d 	tsteq	r1, sp
    10ec:	00000101 	andeq	r0, r0, r1, lsl #2
    10f0:	00000100 	andeq	r0, r0, r0, lsl #2
    10f4:	35353201 	ldrcc	r3, [r5, #-513]!	; 0x201
    10f8:	63003931 	movwvs	r3, #2353	; 0x931
    10fc:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    1100:	6172676f 	cmnvs	r2, pc, ror #14
    1104:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    1108:	2073656c 	rsbscs	r6, r3, ip, ror #10
    110c:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    1110:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    1114:	6f742075 	svcvs	0x00742075
    1118:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    111c:	206d7261 	rsbcs	r7, sp, r1, ror #4
    1120:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    1124:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    1128:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    112c:	31303220 	teqcc	r0, r0, lsr #4
    1130:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    1134:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1138:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    113c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1140:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    1144:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1148:	616d5c65 	cmnvs	sp, r5, ror #24
    114c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    1150:	3a630065 	bcc	18c12ec <__Stack_Size+0x18c0aec>
    1154:	6f72705c 	svcvs	0x0072705c
    1158:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    115c:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    1160:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1164:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    1168:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    116c:	6f6f7420 	svcvs	0x006f7420
    1170:	6120736c 	teqvs	r0, ip, ror #6
    1174:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    1178:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    117c:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    1180:	20382e34 	eorscs	r2, r8, r4, lsr lr
    1184:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    1188:	615c3371 	cmpvs	ip, r1, ror r3
    118c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1190:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1194:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1198:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    119c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    11a0:	32630000 	rsbcc	r0, r3, #0
    11a4:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    11a8:	0100632e 	tsteq	r0, lr, lsr #6
    11ac:	32660000 	rsbcc	r0, r6, #0
    11b0:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    11b4:	0100682e 	tsteq	r0, lr, lsr #16
    11b8:	645f0000 	ldrbvs	r0, [pc], #-0	; 11c0 <__Stack_Size+0x9c0>
    11bc:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    11c0:	745f746c 	ldrbvc	r7, [pc], #-1132	; 11c8 <__Stack_Size+0x9c8>
    11c4:	73657079 	cmnvc	r5, #121	; 0x79
    11c8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    11cc:	74730000 	ldrbtvc	r0, [r3], #-0
    11d0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    11d4:	0300682e 	movweq	r6, #2094	; 0x82e
    11d8:	00000000 	andeq	r0, r0, r0
    11dc:	00000205 	andeq	r0, r0, r5, lsl #4
    11e0:	d3030000 	movwle	r0, #12288	; 0x3000
    11e4:	02040100 	andeq	r0, r4, #0, 2
    11e8:	044a5003 	strbeq	r5, [sl], #-3
    11ec:	20300301 	eorscs	r0, r0, r1, lsl #6
    11f0:	50030204 	andpl	r0, r3, r4, lsl #4
    11f4:	0301042e 	movweq	r0, #5166	; 0x142e
    11f8:	02043c33 	andeq	r3, r4, #13056	; 0x3300
    11fc:	043c4d03 	ldrteq	r4, [ip], #-3331	; 0xd03
    1200:	20330301 	eorscs	r0, r3, r1, lsl #6
    1204:	75691d23 	strbvc	r1, [r9, #-3363]!	; 0xd23
    1208:	02043f7e 	andeq	r3, r4, #504	; 0x1f8
    120c:	042e4a03 	strteq	r4, [lr], #-2563	; 0xa03
    1210:	663e0301 	ldrtvs	r0, [lr], -r1, lsl #6
    1214:	42030204 	andmi	r0, r3, #4, 4	; 0x40000000
    1218:	00010420 	andeq	r0, r1, r0, lsr #8
    121c:	03020402 	movweq	r0, #9218	; 0x2402
    1220:	02002e3f 	andeq	r2, r0, #1008	; 0x3f0
    1224:	5f030204 	svcpl	0x00030204
    1228:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    122c:	20210302 	eorcs	r0, r1, r2, lsl #6
    1230:	02040200 	andeq	r0, r4, #0, 4
    1234:	002e5f03 	eoreq	r5, lr, r3, lsl #30
    1238:	03020402 	movweq	r0, #9218	; 0x2402
    123c:	02002e21 	andeq	r2, r0, #528	; 0x210
    1240:	5f030204 	svcpl	0x00030204
    1244:	04020020 	streq	r0, [r2], #-32
    1248:	02002f02 	andeq	r2, r0, #2, 30
    124c:	00590204 	subseq	r0, r9, r4, lsl #4
    1250:	5a020402 	bpl	82260 <__Stack_Size+0x81a60>
    1254:	02040200 	andeq	r0, r4, #0, 4
    1258:	04020059 	streq	r0, [r2], #-89	; 0x59
    125c:	02005902 	andeq	r5, r0, #32768	; 0x8000
    1260:	005a0204 	subseq	r0, sl, r4, lsl #4
    1264:	59020402 	stmdbpl	r2, {r1, sl}
    1268:	02040200 	andeq	r0, r4, #0, 4
    126c:	04020059 	streq	r0, [r2], #-89	; 0x59
    1270:	02005a02 	andeq	r5, r0, #8192	; 0x2000
    1274:	00590204 	subseq	r0, r9, r4, lsl #4
    1278:	59020402 	stmdbpl	r2, {r1, sl}
    127c:	02040200 	andeq	r0, r4, #0, 4
    1280:	00584b03 	subseq	r4, r8, r3, lsl #22
    1284:	59020402 	stmdbpl	r2, {r1, sl}
    1288:	02040200 	andeq	r0, r4, #0, 4
    128c:	04020059 	streq	r0, [r2], #-89	; 0x59
    1290:	02005a02 	andeq	r5, r0, #8192	; 0x2000
    1294:	00590204 	subseq	r0, r9, r4, lsl #4
    1298:	5a020402 	bpl	822a8 <__Stack_Size+0x81aa8>
    129c:	02040200 	andeq	r0, r4, #0, 4
    12a0:	04020059 	streq	r0, [r2], #-89	; 0x59
    12a4:	02005902 	andeq	r5, r0, #32768	; 0x8000
    12a8:	00590204 	subseq	r0, r9, r4, lsl #4
    12ac:	59020402 	stmdbpl	r2, {r1, sl}
    12b0:	02040200 	andeq	r0, r4, #0, 4
    12b4:	00581c03 	subseq	r1, r8, r3, lsl #24
    12b8:	59020402 	stmdbpl	r2, {r1, sl}
    12bc:	02040200 	andeq	r0, r4, #0, 4
    12c0:	04020059 	streq	r0, [r2], #-89	; 0x59
    12c4:	02005a02 	andeq	r5, r0, #8192	; 0x2000
    12c8:	00590204 	subseq	r0, r9, r4, lsl #4
    12cc:	59020402 	stmdbpl	r2, {r1, sl}
    12d0:	02040200 	andeq	r0, r4, #0, 4
    12d4:	0402005a 	streq	r0, [r2], #-90	; 0x5a
    12d8:	02005902 	andeq	r5, r0, #32768	; 0x8000
    12dc:	00590204 	subseq	r0, r9, r4, lsl #4
    12e0:	5a020402 	bpl	822f0 <__Stack_Size+0x81af0>
    12e4:	02040200 	andeq	r0, r4, #0, 4
    12e8:	04020059 	streq	r0, [r2], #-89	; 0x59
    12ec:	58140302 	ldmdapl	r4, {r1, r8, r9}
    12f0:	02040200 	andeq	r0, r4, #0, 4
    12f4:	002e6d03 	eoreq	r6, lr, r3, lsl #26
    12f8:	03020402 	movweq	r0, #9218	; 0x2402
    12fc:	02005822 	andeq	r5, r0, #2228224	; 0x220000
    1300:	00750204 	rsbseq	r0, r5, r4, lsl #4
    1304:	67020402 	strvs	r0, [r2, -r2, lsl #8]
    1308:	02040200 	andeq	r0, r4, #0, 4
    130c:	04020067 	streq	r0, [r2], #-103	; 0x67
    1310:	2e6d0302 	cdpcs	3, 6, cr0, cr13, cr2, {0}
    1314:	02040200 	andeq	r0, r4, #0, 4
    1318:	00201303 	eoreq	r1, r0, r3, lsl #6
    131c:	03020402 	movweq	r0, #9218	; 0x2402
    1320:	17034a6d 	strne	r4, [r3, -sp, ror #20]
    1324:	3d594b3c 	vldrcc	d20, [r9, #-240]	; 0xffffff10
    1328:	01000702 	tsteq	r0, r2, lsl #14
    132c:	00029e01 	andeq	r9, r2, r1, lsl #28
    1330:	05000200 	streq	r0, [r0, #-512]	; 0x200
    1334:	02000001 	andeq	r0, r0, #1
    1338:	0d0efb01 	vstreq	d15, [lr, #-4]
    133c:	01010100 	mrseq	r0, (UNDEF: 17)
    1340:	00000001 	andeq	r0, r0, r1
    1344:	01000001 	tsteq	r0, r1
    1348:	31353532 	teqcc	r5, r2, lsr r5
    134c:	3a630039 	bcc	18c1438 <__Stack_Size+0x18c0c38>
    1350:	6f72705c 	svcvs	0x0072705c
    1354:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    1358:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    135c:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1360:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    1364:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    1368:	6f6f7420 	svcvs	0x006f7420
    136c:	6120736c 	teqvs	r0, ip, ror #6
    1370:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    1374:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    1378:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    137c:	20382e34 	eorscs	r2, r8, r4, lsr lr
    1380:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    1384:	615c3371 	cmpvs	ip, r1, ror r3
    1388:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    138c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1390:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1394:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    1398:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    139c:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    13a0:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    13a4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    13a8:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
    13ac:	206d6172 	rsbcs	r6, sp, r2, ror r1
    13b0:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
    13b4:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
    13b8:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
    13bc:	20756e67 	rsbscs	r6, r5, r7, ror #28
    13c0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 11f8 <__Stack_Size+0x9f8>
    13c4:	72612073 	rsbvc	r2, r1, #115	; 0x73
    13c8:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
    13cc:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    13d0:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
    13d4:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
    13d8:	71343130 	teqvc	r4, r0, lsr r1
    13dc:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    13e0:	6f6e2d6d 	svcvs	0x006e2d6d
    13e4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    13e8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    13ec:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    13f0:	00656475 	rsbeq	r6, r5, r5, ror r4
    13f4:	32646500 	rsbcc	r6, r4, #0, 10
    13f8:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    13fc:	0100632e 	tsteq	r0, lr, lsr #6
    1400:	32660000 	rsbcc	r0, r6, #0
    1404:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1408:	0100682e 	tsteq	r0, lr, lsr #16
    140c:	64650000 	strbtvs	r0, [r5], #-0
    1410:	31353532 	teqcc	r5, r2, lsr r5
    1414:	00682e39 	rsbeq	r2, r8, r9, lsr lr
    1418:	5f000001 	svcpl	0x00000001
    141c:	61666564 	cmnvs	r6, r4, ror #10
    1420:	5f746c75 	svcpl	0x00746c75
    1424:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    1428:	00682e73 	rsbeq	r2, r8, r3, ror lr
    142c:	73000002 	movwvc	r0, #2
    1430:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1434:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1438:	00000003 	andeq	r0, r0, r3
    143c:	04020500 	streq	r0, [r2], #-1280	; 0x500
    1440:	0308001b 	movweq	r0, #32795	; 0x801b
    1444:	04200133 	strteq	r0, [r0], #-307	; 0x133
    1448:	20700302 	rsbscs	r0, r0, r2, lsl #6
    144c:	10030104 	andne	r0, r3, r4, lsl #2
    1450:	02047408 	andeq	r7, r4, #8, 8	; 0x8000000
    1454:	04207003 	strteq	r7, [r0], #-3
    1458:	ac100301 	ldcge	3, cr0, [r0], {1}
    145c:	70030204 	andvc	r0, r3, r4, lsl #4
    1460:	03010420 	movweq	r0, #5152	; 0x1420
    1464:	02042e13 	andeq	r2, r4, #304	; 0x130
    1468:	04206d03 	strteq	r6, [r0], #-3331	; 0xd03
    146c:	3c130301 	ldccc	3, cr0, [r3], {1}
    1470:	022d4b3d 	eoreq	r4, sp, #62464	; 0xf400
    1474:	01010002 	tsteq	r1, r2
    1478:	74020500 	strvc	r0, [r2], #-1280	; 0x500
    147c:	0308001b 	movweq	r0, #32795	; 0x801b
    1480:	3f2e013c 	svccc	0x002e013c
    1484:	3d685959 	stclcc	9, cr5, [r8, #-356]!	; 0xfffffe9c
    1488:	0002023d 	andeq	r0, r2, sp, lsr r2
    148c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1490:	001bb002 	andseq	fp, fp, r2
    1494:	00de0308 	sbcseq	r0, lr, r8, lsl #6
    1498:	03020401 	movweq	r0, #9217	; 0x2401
    149c:	01045845 	tsteq	r4, r5, asr #16
    14a0:	ac00c003 	stcge	0, cr12, [r0], {3}
    14a4:	40030204 	andmi	r0, r3, r4, lsl #4
    14a8:	0301043c 	movweq	r0, #5180	; 0x143c
    14ac:	1df200c4 	ldclne	0, cr0, [r2, #784]!	; 0x310
    14b0:	1c242b31 	stcne	11, cr2, [r4], #-196	; 0xffffff3c
    14b4:	02022f24 	andeq	r2, r2, #36, 30	; 0x90
    14b8:	00010100 	andeq	r0, r1, r0, lsl #2
    14bc:	1c100205 	lfmne	f0, 4, [r0], {5}
    14c0:	ec030800 	stc	8, cr0, [r3], {-0}
    14c4:	02040100 	andeq	r0, r4, #0, 2
    14c8:	2e7fb703 	cdpcs	7, 7, cr11, cr15, cr3, {0}
    14cc:	c9030104 	stmdbgt	r3, {r2, r8}
    14d0:	04215800 	strteq	r5, [r1], #-2048	; 0x800
    14d4:	7fb60302 	svcvc	0x00b60302
    14d8:	0301042e 	movweq	r0, #5166	; 0x142e
    14dc:	289e00c9 	ldmcs	lr, {r0, r3, r6, r7}
    14e0:	af030204 	svcge	0x00030204
    14e4:	01042e7f 	tsteq	r4, pc, ror lr
    14e8:	2e00c903 	cdpcs	9, 0, cr12, cr0, cr3, {0}
    14ec:	20780328 	rsbscs	r0, r8, r8, lsr #6
    14f0:	b7030204 	strlt	r0, [r3, -r4, lsl #4]
    14f4:	0104207f 	tsteq	r4, pc, ror r0
    14f8:	3c00d403 	cfstrscc	mvf13, [r0], {3}
    14fc:	59311c24 	ldmdbpl	r1!, {r2, r5, sl, fp, ip}
    1500:	5b5b4d59 	blpl	16d4a6c <__Stack_Size+0x16d426c>
    1504:	59af4d4b 	stmibpl	pc!, {r0, r1, r3, r6, r8, sl, fp, lr}	; <UNPREDICTABLE>
    1508:	024b3e3d 	subeq	r3, fp, #976	; 0x3d0
    150c:	01010007 	tsteq	r1, r7
    1510:	d8020500 	stmdale	r2, {r8, sl}
    1514:	0308001c 	movweq	r0, #32796	; 0x801c
    1518:	4a01019d 	bmi	41b94 <__Stack_Size+0x41394>
    151c:	03201f03 	teqeq	r0, #3, 30
    1520:	1f032e61 	svcne	0x00032e61
    1524:	2f2d3d20 	svccs	0x002d3d20
    1528:	59595b59 	ldmdbpl	r9, {r0, r3, r4, r6, r8, r9, fp, ip, lr}^
    152c:	755b755b 	ldrbvc	r7, [fp, #-1371]	; 0x55b
    1530:	5b5b5b5b 	blpl	16d82a4 <__Stack_Size+0x16d7aa4>
    1534:	69695b5b 	stmdbvs	r9!, {r0, r1, r3, r4, r6, r8, r9, fp, ip, lr}^
    1538:	00050267 	andeq	r0, r5, r7, ror #4
    153c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1540:	001db802 	andseq	fp, sp, r2, lsl #16
    1544:	01e70308 	mvneq	r0, r8, lsl #6
    1548:	1e032e01 	cdpne	14, 0, cr2, cr3, cr1, {0}
    154c:	65032b20 	strvs	r2, [r3, #-2848]	; 0xb20
    1550:	201b032e 	andscs	r0, fp, lr, lsr #6
    1554:	5c675b31 	stclpl	11, cr5, [r7], #-196	; 0xffffff3c
    1558:	5b595959 	blpl	1657ac4 <__Stack_Size+0x16572c4>
    155c:	5b4b5b5b 	blpl	12d82d0 <__Stack_Size+0x12d7ad0>
    1560:	6769695b 			; <UNDEFINED> instruction: 0x6769695b
    1564:	01000202 	tsteq	r0, r2, lsl #4
    1568:	02050001 	andeq	r0, r5, #1
    156c:	08001e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip}
    1570:	0102ab03 	tsteq	r2, r3, lsl #22
    1574:	0303043c 	movweq	r0, #13372	; 0x343c
    1578:	043c7e9d 	ldrteq	r7, [ip], #-3741	; 0xe9d
    157c:	01e90301 	mvneq	r0, r1, lsl #6
    1580:	04020058 	streq	r0, [r2], #-88	; 0x58
    1584:	02002102 	andeq	r2, r0, #-2147483648	; 0x80000000
    1588:	005b0204 	subseq	r0, fp, r4, lsl #4
    158c:	47020402 	strmi	r0, [r2, -r2, lsl #8]
    1590:	02040200 	andeq	r0, r4, #0, 4
    1594:	04020032 	streq	r0, [r2], #-50	; 0x32
    1598:	02005a02 	andeq	r5, r0, #8192	; 0x2000
    159c:	00670204 	rsbeq	r0, r7, r4, lsl #4
    15a0:	67020402 	strvs	r0, [r2, -r2, lsl #8]
    15a4:	02040200 	andeq	r0, r4, #0, 4
    15a8:	04020067 	streq	r0, [r2], #-103	; 0x67
    15ac:	2e760302 	cdpcs	3, 7, cr0, cr6, cr2, {0}
    15b0:	02040200 	andeq	r0, r4, #0, 4
    15b4:	00200a03 	eoreq	r0, r0, r3, lsl #20
    15b8:	03020402 	movweq	r0, #9218	; 0x2402
    15bc:	03044a76 	movweq	r4, #19062	; 0x4a76
    15c0:	2e7e9703 	cdpcs	7, 7, cr9, cr14, cr3, {0}
    15c4:	f7030104 			; <UNDEFINED> instruction: 0xf7030104
    15c8:	06025801 	streq	r5, [r2], -r1, lsl #16
    15cc:	9e010100 	adflss	f0, f1, f0
    15d0:	02000002 	andeq	r0, r0, #2
    15d4:	00018500 	andeq	r8, r1, r0, lsl #10
    15d8:	fb010200 	blx	41de2 <__Stack_Size+0x415e2>
    15dc:	01000d0e 	tsteq	r0, lr, lsl #26
    15e0:	00010101 	andeq	r0, r1, r1, lsl #2
    15e4:	00010000 	andeq	r0, r1, r0
    15e8:	35320100 	ldrcc	r0, [r2, #-256]!	; 0x100
    15ec:	00393135 	eorseq	r3, r9, r5, lsr r1
    15f0:	705c3a63 	subsvc	r3, ip, r3, ror #20
    15f4:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    15f8:	66206d61 	strtvs	r6, [r0], -r1, ror #26
    15fc:	73656c69 	cmnvc	r5, #26880	; 0x6900
    1600:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
    1604:	675c2936 	smmlarvs	ip, r6, r9, r2
    1608:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
    160c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    1610:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
    1614:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
    1618:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    161c:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
    1620:	30322038 	eorscc	r2, r2, r8, lsr r0
    1624:	33713431 	cmncc	r1, #822083584	; 0x31000000
    1628:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    162c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1630:	61652d65 	cmnvs	r5, r5, ror #26
    1634:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    1638:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    163c:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    1640:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    1644:	6300656e 	movwvs	r6, #1390	; 0x56e
    1648:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    164c:	6172676f 	cmnvs	r2, pc, ror #14
    1650:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    1654:	2073656c 	rsbscs	r6, r3, ip, ror #10
    1658:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    165c:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    1660:	6f742075 	svcvs	0x00742075
    1664:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    1668:	206d7261 	rsbcs	r7, sp, r1, ror #4
    166c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    1670:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    1674:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    1678:	31303220 	teqcc	r0, r0, lsr #4
    167c:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    1680:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1684:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    1688:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    168c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    1690:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1694:	3a630065 	bcc	18c1830 <__Stack_Size+0x18c1030>
    1698:	6f72705c 	svcvs	0x0072705c
    169c:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    16a0:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    16a4:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    16a8:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    16ac:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    16b0:	6f6f7420 	svcvs	0x006f7420
    16b4:	6120736c 	teqvs	r0, ip, ror #6
    16b8:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    16bc:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    16c0:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    16c4:	20382e34 	eorscs	r2, r8, r4, lsr lr
    16c8:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    16cc:	6c5c3371 	mrrcvs	3, 7, r3, ip, cr1
    16d0:	675c6269 	ldrbvs	r6, [ip, -r9, ror #4]
    16d4:	615c6363 	cmpvs	ip, r3, ror #6
    16d8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    16dc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    16e0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    16e4:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    16e8:	695c342e 	ldmdbvs	ip, {r1, r2, r3, r5, sl, ip, sp}^
    16ec:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    16f0:	00006564 	andeq	r6, r0, r4, ror #10
    16f4:	69736465 	ldmdbvs	r3!, {r0, r2, r5, r6, sl, sp, lr}^
    16f8:	632e6e67 	teqvs	lr, #1648	; 0x670
    16fc:	00000100 	andeq	r0, r0, r0, lsl #2
    1700:	35616873 	strbcc	r6, [r1, #-2163]!	; 0x873
    1704:	682e3231 	stmdavs	lr!, {r0, r4, r5, r9, ip, sp}
    1708:	00000100 	andeq	r0, r0, r0, lsl #2
    170c:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    1710:	2e393135 	mrccs	1, 1, r3, cr9, cr5, {1}
    1714:	00010068 	andeq	r0, r1, r8, rrx
    1718:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    171c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1720:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1724:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    1728:	00020068 	andeq	r0, r2, r8, rrx
    172c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    1730:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1734:	00030068 	andeq	r0, r3, r8, rrx
    1738:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    173c:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    1740:	00040068 	andeq	r0, r4, r8, rrx
    1744:	72706600 	rsbsvc	r6, r0, #0, 12
    1748:	2e656d69 	cdpcs	13, 6, cr6, cr5, cr9, {3}
    174c:	00010068 	andeq	r0, r1, r8, rrx
    1750:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    1754:	2e393135 	mrccs	1, 1, r3, cr9, cr5, {1}
    1758:	00010068 	andeq	r0, r1, r8, rrx
    175c:	05000000 	streq	r0, [r0, #-0]
    1760:	001ef002 	andseq	pc, lr, r2
    1764:	01150308 	tsteq	r5, r8, lsl #6
    1768:	04280204 	strteq	r0, [r8], #-516	; 0x204
    176c:	20780301 	rsbscs	r0, r8, r1, lsl #6
    1770:	04280204 	strteq	r0, [r8], #-516	; 0x204
    1774:	20780301 	rsbscs	r0, r8, r1, lsl #6
    1778:	04360204 	ldrteq	r0, [r6], #-516	; 0x204
    177c:	04599a01 	ldrbeq	r9, [r9], #-2561	; 0xa01
    1780:	66250303 	strtvs	r0, [r5], -r3, lsl #6
    1784:	01043d4b 	tsteq	r4, fp, asr #26
    1788:	023c5b03 	eorseq	r5, ip, #3072	; 0xc00
    178c:	01010005 	tsteq	r1, r5
    1790:	44020500 	strmi	r0, [r2], #-1280	; 0x500
    1794:	0308001f 	movweq	r0, #32799	; 0x801f
    1798:	040100c4 	streq	r0, [r1], #-196	; 0xc4
    179c:	2e590302 	cdpcs	3, 5, cr0, cr9, cr2, {0}
    17a0:	27030104 	strcs	r0, [r3, -r4, lsl #2]
    17a4:	03020420 	movweq	r0, #9248	; 0x2420
    17a8:	01042059 	qaddeq	r2, r9, r4
    17ac:	04202703 	strteq	r2, [r0], #-1795	; 0x703
    17b0:	4a590302 	bmi	16423c0 <__Stack_Size+0x1641bc0>
    17b4:	27030104 	strcs	r0, [r3, -r4, lsl #2]
    17b8:	03020482 	movweq	r0, #9346	; 0x2482
    17bc:	01042059 	qaddeq	r2, r9, r4
    17c0:	3d2e2c03 	stccc	12, cr2, [lr, #-12]!
    17c4:	403d213b 	eorsmi	r2, sp, fp, lsr r1
    17c8:	0402003e 	streq	r0, [r2], #-62	; 0x3e
    17cc:	02004d01 	andeq	r4, r0, #1, 26	; 0x40
    17d0:	4d2d0104 	stfmis	f0, [sp, #-16]!
    17d4:	67677768 	strbvs	r7, [r7, -r8, ror #14]!
    17d8:	01000702 	tsteq	r0, r2, lsl #14
    17dc:	02050001 	andeq	r0, r5, #1
    17e0:	08001fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip}
    17e4:	2e013203 	cdpcs	2, 0, cr3, cr1, cr3, {0}
    17e8:	4a780331 	bmi	1e024b4 <__Stack_Size+0x1e01cb4>
    17ec:	58090359 	stmdapl	r9, {r0, r3, r4, r6, r8, r9}
    17f0:	01000402 	tsteq	r0, r2, lsl #8
    17f4:	02050001 	andeq	r0, r5, #1
    17f8:	0800200c 	stmdaeq	r0, {r2, r3, sp}
    17fc:	2e013a03 	vmlacs.f32	s6, s2, s6
    1800:	024b3d23 	subeq	r3, fp, #2240	; 0x8c0
    1804:	01010002 	tsteq	r1, r2
    1808:	24020500 	strcs	r0, [r2], #-1280	; 0x500
    180c:	03080020 	movweq	r0, #32800	; 0x8020
    1810:	3c0100f5 	stccc	0, cr0, [r1], {245}	; 0xf5
    1814:	2e680335 	mcrcs	3, 3, r0, cr8, cr5, {1}
    1818:	352e1103 	strcc	r1, [lr, #-259]!	; 0x103
    181c:	672e6803 	strvs	r6, [lr, -r3, lsl #16]!
    1820:	03741a03 	cmneq	r4, #12288	; 0x3000
    1824:	c9bb4a6e 	ldmibgt	fp!, {r1, r2, r3, r5, r6, r9, fp, lr}
    1828:	68741403 	ldmdavs	r4!, {r0, r1, sl, ip}^
    182c:	02ad5967 	adceq	r5, sp, #1687552	; 0x19c000
    1830:	01010006 	tsteq	r1, r6
    1834:	e4020500 	str	r0, [r2], #-1280	; 0x500
    1838:	03080020 	movweq	r0, #32800	; 0x8020
    183c:	3c01018b 	stfccs	f0, [r1], {139}	; 0x8b
    1840:	c93c6203 	ldmdbgt	ip!, {r0, r1, r9, sp, lr}
    1844:	742803c9 	strtvc	r0, [r8], #-969	; 0x3c9
    1848:	4a7f8b03 	bmi	1fe445c <__Stack_Size+0x1fe3c5c>
    184c:	03221e5a 	teqeq	r2, #1440	; 0x5a0
    1850:	034a00f7 	movteq	r0, #41207	; 0xa0f7
    1854:	5a587f87 	bpl	1621678 <__Stack_Size+0x1620e78>
    1858:	f903221e 			; <UNDEFINED> instruction: 0xf903221e
    185c:	90034a00 	andls	r4, r3, r0, lsl #20
    1860:	0359587f 	cmpeq	r9, #8323072	; 0x7f0000
    1864:	035800f3 	cmpeq	r8, #243	; 0xf3
    1868:	34224a79 	strtcc	r4, [r2], #-2681	; 0xa79
    186c:	01000402 	tsteq	r0, r2, lsl #8
    1870:	00070201 	andeq	r0, r7, r1, lsl #4
    1874:	f7000200 			; <UNDEFINED> instruction: 0xf7000200
    1878:	02000000 	andeq	r0, r0, #0
    187c:	0d0efb01 	vstreq	d15, [lr, #-4]
    1880:	01010100 	mrseq	r0, (UNDEF: 17)
    1884:	00000001 	andeq	r0, r0, r1
    1888:	01000001 	tsteq	r0, r1
    188c:	31353532 	teqcc	r5, r2, lsr r5
    1890:	3a630039 	bcc	18c197c <__Stack_Size+0x18c117c>
    1894:	6f72705c 	svcvs	0x0072705c
    1898:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    189c:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    18a0:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    18a4:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    18a8:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    18ac:	6f6f7420 	svcvs	0x006f7420
    18b0:	6120736c 	teqvs	r0, ip, ror #6
    18b4:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    18b8:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    18bc:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    18c0:	20382e34 	eorscs	r2, r8, r4, lsr lr
    18c4:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    18c8:	615c3371 	cmpvs	ip, r1, ror r3
    18cc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    18d0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    18d4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    18d8:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    18dc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    18e0:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    18e4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    18e8:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    18ec:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
    18f0:	206d6172 	rsbcs	r6, sp, r2, ror r1
    18f4:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
    18f8:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
    18fc:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
    1900:	20756e67 	rsbscs	r6, r5, r7, ror #28
    1904:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 173c <__Stack_Size+0xf3c>
    1908:	72612073 	rsbvc	r2, r1, #115	; 0x73
    190c:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
    1910:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    1914:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
    1918:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
    191c:	71343130 	teqvc	r4, r0, lsr r1
    1920:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    1924:	6f6e2d6d 	svcvs	0x006e2d6d
    1928:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    192c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    1930:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1934:	00656475 	rsbeq	r6, r5, r5, ror r4
    1938:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    193c:	2e393135 	mrccs	1, 1, r3, cr9, cr5, {1}
    1940:	00010063 	andeq	r0, r1, r3, rrx
    1944:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    1948:	2e393135 	mrccs	1, 1, r3, cr9, cr5, {1}
    194c:	00010068 	andeq	r0, r1, r8, rrx
    1950:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    1954:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1958:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    195c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    1960:	00020068 	andeq	r0, r2, r8, rrx
    1964:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    1968:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    196c:	00030068 	andeq	r0, r3, r8, rrx
    1970:	05000000 	streq	r0, [r0, #-0]
    1974:	0021a402 	eoreq	sl, r1, r2, lsl #8
    1978:	010c0308 	tsteq	ip, r8, lsl #6
    197c:	027a3b25 	rsbseq	r3, sl, #37888	; 0x9400
    1980:	01010004 	tsteq	r1, r4
    1984:	c4020500 	strgt	r0, [r2], #-1280	; 0x500
    1988:	03080021 	movweq	r0, #32801	; 0x8021
    198c:	03260119 	teqeq	r6, #1073741830	; 0x40000006
    1990:	2f26207a 	svccs	0x0026207a
    1994:	1f1e232d 	svcne	0x001e232d
    1998:	02040200 	andeq	r0, r4, #0, 4
    199c:	04020032 	streq	r0, [r2], #-50	; 0x32
    19a0:	02002f02 	andeq	r2, r0, #2, 30
    19a4:	001e0204 	andseq	r0, lr, r4, lsl #4
    19a8:	31020402 	tstcc	r2, r2, lsl #8
    19ac:	02040200 	andeq	r0, r4, #0, 4
    19b0:	0020062b 	eoreq	r0, r0, fp, lsr #12
    19b4:	06020402 	streq	r0, [r2], -r2, lsl #8
    19b8:	002e0d03 	eoreq	r0, lr, r3, lsl #26
    19bc:	2f020402 	svccs	0x00020402
    19c0:	02040200 	andeq	r0, r4, #0, 4
    19c4:	0402002c 	streq	r0, [r2], #-44	; 0x2c
    19c8:	02003102 	andeq	r3, r0, #-2147483648	; 0x80000000
    19cc:	262b0204 	strtcs	r0, [fp], -r4, lsl #4
    19d0:	03201d03 	teqeq	r0, #3, 26	; 0xc0
    19d4:	1a032063 	bne	c9b68 <__Stack_Size+0xc9368>
    19d8:	2e67033c 	mcrcs	3, 3, r0, cr7, cr12, {1}
    19dc:	242e1903 	strtcs	r1, [lr], #-2307	; 0x903
    19e0:	3c680373 	stclcc	3, cr0, [r8], #-460	; 0xfffffe34
    19e4:	01000402 	tsteq	r0, r2, lsl #8
    19e8:	02050001 	andeq	r0, r5, #1
    19ec:	08002234 	stmdaeq	r0, {r2, r4, r5, r9, sp}
    19f0:	5d013c03 	stcpl	12, cr3, [r1, #-12]
    19f4:	2f143102 	svccs	0x00143102
    19f8:	032f302f 	teqeq	pc, #47	; 0x2f
    19fc:	241d4a78 	ldrcs	r4, [sp], #-2680	; 0xa78
    1a00:	211f212d 	tstcs	pc, sp, lsr #2
    1a04:	0002022d 	andeq	r0, r2, sp, lsr #4
    1a08:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1a0c:	0022d002 	eoreq	sp, r2, r2
    1a10:	00cd0308 	sbceq	r0, sp, r8, lsl #6
    1a14:	be130801 	cdplt	8, 1, cr0, cr3, cr1, {0}
    1a18:	1f133202 	svcne	0x00133202
    1a1c:	65211e4b 	strvs	r1, [r1, #-3659]!	; 0xe4b
    1a20:	0002023e 	andeq	r0, r2, lr, lsr r2
    1a24:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1a28:	00239402 	eoreq	r9, r3, r2, lsl #8
    1a2c:	00d60308 	sbcseq	r0, r6, r8, lsl #6
    1a30:	211b1701 	tstcs	fp, r1, lsl #14
    1a34:	02040200 	andeq	r0, r4, #0, 4
    1a38:	04020026 	streq	r0, [r2], #-38	; 0x26
    1a3c:	02005902 	andeq	r5, r0, #32768	; 0x8000
    1a40:	441d0204 	ldrmi	r0, [sp], #-516	; 0x204
    1a44:	2f2d212d 	svccs	0x002d212d
    1a48:	0022212d 	eoreq	r2, r2, sp, lsr #2
    1a4c:	21020402 	tstcs	r2, r2, lsl #8
    1a50:	02040200 	andeq	r0, r4, #0, 4
    1a54:	0402003d 	streq	r0, [r2], #-61	; 0x3d
    1a58:	02001e02 	andeq	r1, r0, #2, 28
    1a5c:	00310204 	eorseq	r0, r1, r4, lsl #4
    1a60:	2b020402 	blcs	82a70 <__Stack_Size+0x82270>
    1a64:	00020225 	andeq	r0, r2, r5, lsr #4
    1a68:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1a6c:	0023dc02 	eoreq	sp, r3, r2, lsl #24
    1a70:	00ed0308 	rsceq	r0, sp, r8, lsl #6
    1a74:	001f2601 	andseq	r2, pc, r1, lsl #12
    1a78:	22020402 	andcs	r0, r2, #33554432	; 0x2000000
    1a7c:	02040200 	andeq	r0, r4, #0, 4
    1a80:	04020067 	streq	r0, [r2], #-103	; 0x67
    1a84:	02001e02 	andeq	r1, r0, #2, 28
    1a88:	00310204 	eorseq	r0, r1, r4, lsl #4
    1a8c:	2b020402 	blcs	82a9c <__Stack_Size+0x8229c>
    1a90:	301c3226 	andscc	r3, ip, r6, lsr #4
    1a94:	02003d3b 	andeq	r3, r0, #3776	; 0xec0
    1a98:	00310204 	eorseq	r0, r1, r4, lsl #4
    1a9c:	2f020402 	svccs	0x00020402
    1aa0:	02040200 	andeq	r0, r4, #0, 4
    1aa4:	0402001e 	streq	r0, [r2], #-30
    1aa8:	02003102 	andeq	r3, r0, #-2147483648	; 0x80000000
    1aac:	252b0204 	strcs	r0, [fp, #-516]!	; 0x204
    1ab0:	01000202 	tsteq	r0, r2, lsl #4
    1ab4:	02050001 	andeq	r0, r5, #1
    1ab8:	08002428 	stmdaeq	r0, {r3, r5, sl, sp}
    1abc:	01018503 	tsteq	r1, r3, lsl #10
    1ac0:	02001f26 	andeq	r1, r0, #38, 30	; 0x98
    1ac4:	00220204 	eoreq	r0, r2, r4, lsl #4
    1ac8:	4b020402 	blmi	82ad8 <__Stack_Size+0x822d8>
    1acc:	02040200 	andeq	r0, r4, #0, 4
    1ad0:	0402001e 	streq	r0, [r2], #-30
    1ad4:	02003102 	andeq	r3, r0, #-2147483648	; 0x80000000
    1ad8:	262b0204 	strtcs	r0, [fp], -r4, lsl #4
    1adc:	1f221c24 	svcne	0x00221c24
    1ae0:	00212d2f 	eoreq	r2, r1, pc, lsr #26
    1ae4:	31020402 	tstcc	r2, r2, lsl #8
    1ae8:	02040200 	andeq	r0, r4, #0, 4
    1aec:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    1af0:	02001e02 	andeq	r1, r0, #2, 28
    1af4:	00310204 	eorseq	r0, r1, r4, lsl #4
    1af8:	2b020402 	blcs	82b08 <__Stack_Size+0x82308>
    1afc:	00030225 	andeq	r0, r3, r5, lsr #4
    1b00:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1b04:	00247002 	eoreq	r7, r4, r2
    1b08:	019d0308 	orrseq	r0, sp, r8, lsl #6
    1b0c:	032b3201 	teqeq	fp, #268435456	; 0x10000000
    1b10:	3d29200b 	stccc	0, cr2, [r9, #-44]!	; 0xffffffd4
    1b14:	02040200 	andeq	r0, r4, #0, 4
    1b18:	04020021 	streq	r0, [r2], #-33	; 0x21
    1b1c:	02003b02 	andeq	r3, r0, #2048	; 0x800
    1b20:	002f0204 	eoreq	r0, pc, r4, lsl #4
    1b24:	2d020402 	cfstrscs	mvf0, [r2, #-8]
    1b28:	01040200 	mrseq	r0, R12_usr
    1b2c:	0402004d 	streq	r0, [r2], #-77	; 0x4d
    1b30:	02007602 	andeq	r7, r0, #2097152	; 0x200000
    1b34:	002d0204 	eoreq	r0, sp, r4, lsl #4
    1b38:	49020402 	stmdbmi	r2, {r1, sl}
    1b3c:	02040200 	andeq	r0, r4, #0, 4
    1b40:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    1b44:	03242d02 	teqeq	r4, #2, 26	; 0x80
    1b48:	0e032e75 	mcreq	14, 0, r2, cr3, cr5, {3}
    1b4c:	2f3b2158 	svccs	0x003b2158
    1b50:	0200232d 	andeq	r2, r0, #-1275068416	; 0xb4000000
    1b54:	00210204 	eoreq	r0, r1, r4, lsl #4
    1b58:	2f020402 	svccs	0x00020402
    1b5c:	02040200 	andeq	r0, r4, #0, 4
    1b60:	0402001e 	streq	r0, [r2], #-30
    1b64:	02003102 	andeq	r3, r0, #-2147483648	; 0x80000000
    1b68:	252b0204 	strcs	r0, [fp, #-516]!	; 0x204
    1b6c:	01000302 	tsteq	r0, r2, lsl #6
    1b70:	02050001 	andeq	r0, r5, #1
    1b74:	00000000 	andeq	r0, r0, r0
    1b78:	0101ba03 	tsteq	r1, r3, lsl #20
    1b7c:	032e6703 	teqeq	lr, #786432	; 0xc0000
    1b80:	64032e19 	strvs	r2, [r3], #-3609	; 0xe19
    1b84:	200b032e 	andcs	r0, fp, lr, lsr #6
    1b88:	3b213d1b 	blcc	850ffc <__Stack_Size+0x8507fc>
    1b8c:	764d2d2f 	strbvc	r2, [sp], -pc, lsr #26
    1b90:	2d2f492d 	stccs	9, cr4, [pc, #-180]!	; 1ae4 <__Stack_Size+0x12e4>
    1b94:	2e750324 	cdpcs	3, 7, cr0, cr5, cr4, {1}
    1b98:	2f580e03 	svccs	0x00580e03
    1b9c:	4e2d2f3b 	mcrmi	15, 1, r2, cr13, cr11, {1}
    1ba0:	2b232c2f 	blcs	8ccc64 <__Stack_Size+0x8cc464>
    1ba4:	f1030204 			; <UNDEFINED> instruction: 0xf1030204
    1ba8:	0104207e 	tsteq	r4, lr, ror r0
    1bac:	08019c03 	stmdaeq	r1, {r0, r1, sl, fp, ip, pc}
    1bb0:	0004022e 	andeq	r0, r4, lr, lsr #4
    1bb4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1bb8:	00000002 	andeq	r0, r0, r2
    1bbc:	01c20300 	biceq	r0, r2, r0, lsl #6
    1bc0:	211c1601 	tstcs	ip, r1, lsl #12
    1bc4:	02040200 	andeq	r0, r4, #0, 4
    1bc8:	04020025 	streq	r0, [r2], #-37	; 0x25
    1bcc:	02005902 	andeq	r5, r0, #32768	; 0x8000
    1bd0:	421d0204 	andsmi	r0, sp, #4, 4	; 0x40000000
    1bd4:	2c301f21 	ldccs	15, cr1, [r0], #-132	; 0xffffff7c
    1bd8:	02003022 	andeq	r3, r0, #34	; 0x22
    1bdc:	00210204 	eoreq	r0, r1, r4, lsl #4
    1be0:	2f020402 	svccs	0x00020402
    1be4:	02040200 	andeq	r0, r4, #0, 4
    1be8:	0402001e 	streq	r0, [r2], #-30
    1bec:	02003102 	andeq	r3, r0, #-2147483648	; 0x80000000
    1bf0:	252b0204 	strcs	r0, [fp, #-516]!	; 0x204
    1bf4:	01000202 	tsteq	r0, r2, lsl #4
    1bf8:	02050001 	andeq	r0, r5, #1
    1bfc:	080024f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, sp}
    1c00:	0101d803 	tsteq	r1, r3, lsl #16
    1c04:	032e4903 	teqeq	lr, #49152	; 0xc000
    1c08:	46032037 			; <UNDEFINED> instruction: 0x46032037
    1c0c:	200b0320 	andcs	r0, fp, r0, lsr #6
    1c10:	3b212f29 	blcc	84d8bc <__Stack_Size+0x84d0bc>
    1c14:	684d2d2f 	stmdavs	sp, {r0, r1, r2, r3, r5, r8, sl, fp, sp}^
    1c18:	2d2f492d 	stccs	9, cr4, [pc, #-180]!	; 1b6c <__Stack_Size+0x136c>
    1c1c:	2e750324 	cdpcs	3, 7, cr0, cr5, cr4, {1}
    1c20:	2f3c0e03 	svccs	0x003c0e03
    1c24:	3d2d2f3b 	stccc	15, cr2, [sp, #-236]!	; 0xffffff14
    1c28:	232c2f23 	teqcs	ip, #35, 30	; 0x8c
    1c2c:	7477032b 	ldrbtvc	r0, [r7], #-811	; 0x32b
    1c30:	49212f29 	stmdbmi	r1!, {r0, r3, r5, r8, r9, sl, fp, sp}
    1c34:	763f2d2f 	ldrtvc	r2, [pc], -pc, lsr #26
    1c38:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    1c3c:	20750324 	rsbscs	r0, r5, r4, lsr #6
    1c40:	213c0e03 	teqcs	ip, r3, lsl #28
    1c44:	232d2f3b 	teqcs	sp, #59, 30	; 0xec
    1c48:	311e2f21 	tstcc	lr, r1, lsr #30
    1c4c:	3c77032b 	ldclcc	3, cr0, [r7], #-172	; 0xffffff54
    1c50:	033c0903 	teqeq	ip, #49152	; 0xc000
    1c54:	213d3c72 	teqcs	sp, r2, ror ip
    1c58:	4d2d2f49 	stcmi	15, cr2, [sp, #-292]!	; 0xfffffedc
    1c5c:	2f492d84 	svccs	0x00492d84
    1c60:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1c64:	580e032e 	stmdapl	lr, {r1, r2, r3, r5, r8, r9}
    1c68:	2d2f3b2f 	fstmdbxcs	pc!, {d3-d25}	;@ Deprecated
    1c6c:	2c2f232f 	stccs	3, cr2, [pc], #-188	; 1bb8 <__Stack_Size+0x13b8>
    1c70:	72032b23 	andvc	r2, r3, #35840	; 0x8c00
    1c74:	49213d4a 	stmdbmi	r1!, {r1, r3, r6, r8, sl, fp, ip, sp}
    1c78:	923f2d2f 	eorsls	r2, pc, #3008	; 0xbc0
    1c7c:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    1c80:	2e750324 	cdpcs	3, 7, cr0, cr5, cr4, {1}
    1c84:	21580e03 	cmpcs	r8, r3, lsl #28
    1c88:	232d2f3b 	teqcs	sp, #59, 30	; 0xec
    1c8c:	311e2f21 	tstcc	lr, r1, lsr #30
    1c90:	0402002b 	streq	r0, [r2], #-43	; 0x2b
    1c94:	203f0302 	eorscs	r0, pc, r2, lsl #6
    1c98:	03064a06 	movweq	r4, #27142	; 0x6a06
    1c9c:	29207fb8 	stmdbcs	r0!, {r3, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    1ca0:	2f3b213d 	svccs	0x003b213d
    1ca4:	2d764d2d 	ldclcs	13, cr4, [r6, #-180]!	; 0xffffff4c
    1ca8:	242d2f49 	strtcs	r2, [sp], #-3913	; 0xf49
    1cac:	032e7503 	teqeq	lr, #12582912	; 0xc00000
    1cb0:	3b2f580e 	blcc	bd7cf0 <__Stack_Size+0xbd74f0>
    1cb4:	232f2d2f 	teqcs	pc, #3008	; 0xbc0
    1cb8:	2b232c2f 	blcs	8ccd7c <__Stack_Size+0x8cc57c>
    1cbc:	37747703 	ldrbcc	r7, [r4, -r3, lsl #14]!
    1cc0:	2f49212f 	svccs	0x0049212f
    1cc4:	2d763f2d 	ldclcs	15, cr3, [r6, #-180]!	; 0xffffff4c
    1cc8:	242d2149 	strtcs	r2, [sp], #-329	; 0x149
    1ccc:	03207503 	teqeq	r0, #12582912	; 0xc00000
    1cd0:	3b213c0e 	blcc	850d10 <__Stack_Size+0x850510>
    1cd4:	21232d2f 	teqcs	r3, pc, lsr #26
    1cd8:	2b311e2f 	blcs	c4959c <__Stack_Size+0xc48d9c>
    1cdc:	293c7703 	ldmdbcs	ip!, {r0, r1, r8, r9, sl, ip, sp, lr}
    1ce0:	2f49212f 	svccs	0x0049212f
    1ce4:	2d684d2d 	stclcs	13, cr4, [r8, #-180]!	; 0xffffff4c
    1ce8:	242d2f49 	strtcs	r2, [sp], #-3913	; 0xf49
    1cec:	032e7503 	teqeq	lr, #12582912	; 0xc00000
    1cf0:	3b2f3c0e 	blcc	bd0d30 <__Stack_Size+0xbd0530>
    1cf4:	232f2d2f 	teqcs	pc, #3008	; 0xbc0
    1cf8:	2b232c2f 	blcs	8ccdbc <__Stack_Size+0x8cc5bc>
    1cfc:	37747703 	ldrbcc	r7, [r4, -r3, lsl #14]!
    1d00:	2f49212f 	svccs	0x0049212f
    1d04:	2d763f2d 	ldclcs	15, cr3, [r6, #-180]!	; 0xffffff4c
    1d08:	242d2149 	strtcs	r2, [sp], #-329	; 0x149
    1d0c:	03207503 	teqeq	r0, #12582912	; 0xc00000
    1d10:	3b213c0e 	blcc	850d50 <__Stack_Size+0x850550>
    1d14:	21232d2f 	teqcs	r3, pc, lsr #26
    1d18:	2b311e2f 	blcs	c495dc <__Stack_Size+0xc48ddc>
    1d1c:	293c7703 	ldmdbcs	ip!, {r0, r1, r8, r9, sl, ip, sp, lr}
    1d20:	2f49212f 	svccs	0x0049212f
    1d24:	2d684d2d 	stclcs	13, cr4, [r8, #-180]!	; 0xffffff4c
    1d28:	242d2f49 	strtcs	r2, [sp], #-3913	; 0xf49
    1d2c:	032e7503 	teqeq	lr, #12582912	; 0xc00000
    1d30:	3b2f3c0e 	blcc	bd0d70 <__Stack_Size+0xbd0570>
    1d34:	232f2d2f 	teqcs	pc, #3008	; 0xbc0
    1d38:	2b232c2f 	blcs	8ccdfc <__Stack_Size+0x8cc5fc>
    1d3c:	29747703 	ldmdbcs	r4!, {r0, r1, r8, r9, sl, ip, sp, lr}^
    1d40:	2f49212f 	svccs	0x0049212f
    1d44:	2d763f2d 	ldclcs	15, cr3, [r6, #-180]!	; 0xffffff4c
    1d48:	242d2149 	strtcs	r2, [sp], #-329	; 0x149
    1d4c:	03207503 	teqeq	r0, #12582912	; 0xc00000
    1d50:	3b213c0e 	blcc	850d90 <__Stack_Size+0x850590>
    1d54:	21232d2f 	teqcs	r3, pc, lsr #26
    1d58:	2b311e2f 	blcs	c4961c <__Stack_Size+0xc48e1c>
    1d5c:	293c7703 	ldmdbcs	ip!, {r0, r1, r8, r9, sl, ip, sp, lr}
    1d60:	2f49212f 	svccs	0x0049212f
    1d64:	2d684d2d 	stclcs	13, cr4, [r8, #-180]!	; 0xffffff4c
    1d68:	242d2f49 	strtcs	r2, [sp], #-3913	; 0xf49
    1d6c:	032e7503 	teqeq	lr, #12582912	; 0xc00000
    1d70:	3b2f3c0e 	blcc	bd0db0 <__Stack_Size+0xbd05b0>
    1d74:	232f2d2f 	teqcs	pc, #3008	; 0xbc0
    1d78:	2b232c2f 	blcs	8cce3c <__Stack_Size+0x8cc63c>
    1d7c:	29747703 	ldmdbcs	r4!, {r0, r1, r8, r9, sl, ip, sp, lr}^
    1d80:	2f49212f 	svccs	0x0049212f
    1d84:	2d763f2d 	ldclcs	15, cr3, [r6, #-180]!	; 0xffffff4c
    1d88:	242d2149 	strtcs	r2, [sp], #-329	; 0x149
    1d8c:	03207503 	teqeq	r0, #12582912	; 0xc00000
    1d90:	3b213c0e 	blcc	850dd0 <__Stack_Size+0x8505d0>
    1d94:	21232d2f 	teqcs	r3, pc, lsr #26
    1d98:	2b311e2f 	blcs	c4965c <__Stack_Size+0xc48e5c>
    1d9c:	2000d503 	andcs	sp, r0, r3, lsl #10
    1da0:	01000402 	tsteq	r0, r2, lsl #8
    1da4:	02050001 	andeq	r0, r5, #1
    1da8:	00000000 	andeq	r0, r0, r0
    1dac:	01028a03 	tsteq	r2, r3, lsl #20
    1db0:	0204232e 	andeq	r2, r4, #-1207959552	; 0xb8000000
    1db4:	3c7e9603 	ldclcc	6, cr9, [lr], #-12
    1db8:	ec030104 	stfs	f0, [r3], {4}
    1dbc:	0202ac01 	andeq	sl, r2, #256	; 0x100
    1dc0:	00010100 	andeq	r0, r1, r0, lsl #2
    1dc4:	2ae40205 	bcs	ff9025e0 <BootRAM+0xe872d81>
    1dc8:	b0030800 	andlt	r0, r3, r0, lsl #16
    1dcc:	96030102 	strls	r0, [r3], -r2, lsl #2
    1dd0:	ea032e7f 	b	cd7d4 <__Stack_Size+0xccfd4>
    1dd4:	03202000 	teqeq	r0, #0
    1dd8:	412e7f93 			; <UNDEFINED> instruction: 0x412e7f93
    1ddc:	2f421d4b 	svccs	0x00421d4b
    1de0:	302c301f 	eorcc	r3, ip, pc, lsl r0
    1de4:	232c2f4d 	teqcs	ip, #308	; 0x134
    1de8:	5859032b 	ldmdapl	r9, {r0, r1, r3, r5, r8, r9}^
    1dec:	49212f1b 	stmdbmi	r1!, {r0, r1, r3, r4, r8, r9, sl, fp, sp}
    1df0:	683f2d2f 	ldmdavs	pc!, {r0, r1, r2, r3, r5, r8, sl, fp, sp}	; <UNPREDICTABLE>
    1df4:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    1df8:	2e750324 	cdpcs	3, 7, cr0, cr5, cr4, {1}
    1dfc:	2f3c0e03 	svccs	0x003c0e03
    1e00:	3d2d2f3b 	stccc	15, cr2, [sp, #-236]!	; 0xffffff14
    1e04:	232c2f23 	teqcs	ip, #35, 30	; 0x8c
    1e08:	5877032b 	ldmdapl	r7!, {r0, r1, r3, r5, r8, r9}^
    1e0c:	65212f1b 	strvs	r2, [r1, #-3867]!	; 0xf1b
    1e10:	683f2d2f 	ldmdavs	pc!, {r0, r1, r2, r3, r5, r8, sl, fp, sp}	; <UNPREDICTABLE>
    1e14:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    1e18:	20750324 	rsbscs	r0, r5, r4, lsr #6
    1e1c:	2f3c0e03 	svccs	0x003c0e03
    1e20:	4b2d2f57 	blmi	b4db84 <__Stack_Size+0xb4d384>
    1e24:	232c2f31 	teqcs	ip, #49, 30	; 0xc4
    1e28:	5877032b 	ldmdapl	r7!, {r0, r1, r3, r5, r8, r9}^
    1e2c:	3c740343 	ldclcc	3, cr0, [r4], #-268	; 0xfffffef4
    1e30:	2f49213d 	svccs	0x0049213d
    1e34:	2d843f2d 	stccs	15, cr3, [r4, #180]	; 0xb4
    1e38:	242d2149 	strtcs	r2, [sp], #-329	; 0x149
    1e3c:	034a7503 	movteq	r7, #42243	; 0xa503
    1e40:	3b2f580e 	blcc	bd7e80 <__Stack_Size+0xbd7680>
    1e44:	232f2d2f 	teqcs	pc, #3008	; 0xbc0
    1e48:	2b232c3d 	blcs	8ccf44 <__Stack_Size+0x8cc744>
    1e4c:	3d4a7203 	sfmcc	f7, 2, [sl, #-12]
    1e50:	2d2f6521 	cfstr32cs	mvfx6, [pc, #-132]!	; 1dd4 <__Stack_Size+0x15d4>
    1e54:	492d843f 	pushmi	{r0, r1, r2, r3, r4, r5, sl, pc}
    1e58:	03242d21 	teqeq	r4, #2112	; 0x840
    1e5c:	0e032e75 	mcreq	14, 0, r2, cr3, cr5, {3}
    1e60:	2f3b2f58 	svccs	0x003b2f58
    1e64:	3b232f2d 	blcc	8cdb20 <__Stack_Size+0x8cd320>
    1e68:	2b232c30 	blcs	8ccf30 <__Stack_Size+0x8cc730>
    1e6c:	2000f003 	andcs	pc, r0, r3
    1e70:	907f8703 	rsbsls	r8, pc, r3, lsl #14
    1e74:	49212f1b 	stmdbmi	r1!, {r0, r1, r3, r4, r8, r9, sl, fp, sp}
    1e78:	683f2d2f 	ldmdavs	pc!, {r0, r1, r2, r3, r5, r8, sl, fp, sp}	; <UNPREDICTABLE>
    1e7c:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    1e80:	4a750324 	bmi	1d42b18 <__Stack_Size+0x1d42318>
    1e84:	2f3c0e03 	svccs	0x003c0e03
    1e88:	2f2d2f3b 	svccs	0x002d2f3b
    1e8c:	232c2f23 	teqcs	ip, #35, 30	; 0x8c
    1e90:	5877032b 	ldmdapl	r7!, {r0, r1, r3, r5, r8, r9}^
    1e94:	65212f29 	strvs	r2, [r1, #-3881]!	; 0xf29
    1e98:	683f2d2f 	ldmdavs	pc!, {r0, r1, r2, r3, r5, r8, sl, fp, sp}	; <UNPREDICTABLE>
    1e9c:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    1ea0:	20750324 	rsbscs	r0, r5, r4, lsr #6
    1ea4:	2f3c0e03 	svccs	0x003c0e03
    1ea8:	2f2d2f3b 	svccs	0x002d2f3b
    1eac:	2c222d23 	stccs	13, cr2, [r2], #-140	; 0xffffff74
    1eb0:	77032b23 	strvc	r2, [r3, -r3, lsr #22]
    1eb4:	212f1b58 	teqcs	pc, r8, asr fp	; <UNPREDICTABLE>
    1eb8:	3f2d2f49 	svccc	0x002d2f49
    1ebc:	21492d68 	cmpcs	r9, r8, ror #26
    1ec0:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1ec4:	3c0e032e 	stccc	3, cr0, [lr], {46}	; 0x2e
    1ec8:	2d2f3b2f 	fstmdbxcs	pc!, {d3-d25}	;@ Deprecated
    1ecc:	2c2f232f 	stccs	3, cr2, [pc], #-188	; 1e18 <__Stack_Size+0x1618>
    1ed0:	77032b23 	strvc	r2, [r3, -r3, lsr #22]
    1ed4:	212f2958 	teqcs	pc, r8, asr r9	; <UNPREDICTABLE>
    1ed8:	3f2d2f65 	svccc	0x002d2f65
    1edc:	21492d68 	cmpcs	r9, r8, ror #26
    1ee0:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1ee4:	3c0e0320 	stccc	3, cr0, [lr], {32}
    1ee8:	2d4b3b2f 	vstrcs	d19, [fp, #-188]	; 0xffffff44
    1eec:	2c2f232f 	stccs	3, cr2, [pc], #-188	; 1e38 <__Stack_Size+0x1638>
    1ef0:	77032b23 	strvc	r2, [r3, -r3, lsr #22]
    1ef4:	212f1b58 	teqcs	pc, r8, asr fp	; <UNPREDICTABLE>
    1ef8:	3f2d2f49 	svccc	0x002d2f49
    1efc:	21492d68 	cmpcs	r9, r8, ror #26
    1f00:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1f04:	3c0e0320 	stccc	3, cr0, [lr], {32}
    1f08:	2d2f3b2f 	fstmdbxcs	pc!, {d3-d25}	;@ Deprecated
    1f0c:	2c2f232f 	stccs	3, cr2, [pc], #-188	; 1e58 <__Stack_Size+0x1658>
    1f10:	de032b23 	vmlale.f64	d2, d3, d19
    1f14:	e4032e7e 	str	r2, [r3], #-3710	; 0xe7e
    1f18:	1e679e00 	cdpne	14, 6, cr9, cr7, cr0, {0}
    1f1c:	4c262b31 	stcmi	11, cr2, [r6], #-196	; 0xffffff3c
    1f20:	4b3b301e 	blmi	ecdfa0 <__Stack_Size+0xecd7a0>
    1f24:	232c2f31 	teqcs	ip, #49, 30	; 0xc4
    1f28:	2e2c032b 	cdpcs	3, 2, cr0, cr12, cr11, {1}
    1f2c:	032e5403 	teqeq	lr, #50331648	; 0x3000000
    1f30:	3d1b3c2c 	ldccc	12, cr3, [fp, #-176]	; 0xffffff50
    1f34:	2d2f6521 	cfstr32cs	mvfx6, [pc, #-132]!	; 1eb8 <__Stack_Size+0x16b8>
    1f38:	492d683f 	pushmi	{r0, r1, r2, r3, r4, r5, fp, sp, lr}
    1f3c:	03242d21 	teqeq	r4, #2112	; 0x840
    1f40:	0e032075 	mcreq	0, 0, r2, cr3, cr5, {3}
    1f44:	2f3b2f3c 	svccs	0x003b2f3c
    1f48:	2f232f2d 	svccs	0x00232f2d
    1f4c:	032b232c 	teqeq	fp, #44, 6	; 0xb0000000
    1f50:	2f295877 	svccs	0x00295877
    1f54:	2d2f3b21 	fstmdbxcs	pc!, {d3-d18}	;@ Deprecated
    1f58:	492d683f 	pushmi	{r0, r1, r2, r3, r4, r5, fp, sp, lr}
    1f5c:	03242d21 	teqeq	r4, #2112	; 0x840
    1f60:	0f032e75 	svceq	0x00032e75
    1f64:	49211f3c 	stmdbmi	r1!, {r2, r3, r4, r5, r8, r9, sl, fp, ip}
    1f68:	1e2f2f4d 	cdpne	15, 2, cr2, cr15, cr13, {2}
    1f6c:	91032b31 	tstls	r3, r1, lsr fp
    1f70:	04022001 	streq	r2, [r2], #-1
    1f74:	fa010100 	blx	4237c <__Stack_Size+0x41b7c>
    1f78:	02000003 	andeq	r0, r0, #3
    1f7c:	00016000 	andeq	r6, r1, r0
    1f80:	fb010200 	blx	4278a <__Stack_Size+0x41f8a>
    1f84:	01000d0e 	tsteq	r0, lr, lsl #26
    1f88:	00010101 	andeq	r0, r1, r1, lsl #2
    1f8c:	00010000 	andeq	r0, r1, r0
    1f90:	35320100 	ldrcc	r0, [r2, #-256]!	; 0x100
    1f94:	00393135 	eorseq	r3, r9, r5, lsr r1
    1f98:	705c3a63 	subsvc	r3, ip, r3, ror #20
    1f9c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    1fa0:	66206d61 	strtvs	r6, [r0], -r1, ror #26
    1fa4:	73656c69 	cmnvc	r5, #26880	; 0x6900
    1fa8:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
    1fac:	675c2936 	smmlarvs	ip, r6, r9, r2
    1fb0:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
    1fb4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    1fb8:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
    1fbc:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
    1fc0:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    1fc4:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
    1fc8:	30322038 	eorscc	r2, r2, r8, lsr r0
    1fcc:	33713431 	cmncc	r1, #822083584	; 0x31000000
    1fd0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    1fd4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1fd8:	61652d65 	cmnvs	r5, r5, ror #26
    1fdc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    1fe0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    1fe4:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    1fe8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    1fec:	6300656e 	movwvs	r6, #1390	; 0x56e
    1ff0:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    1ff4:	6172676f 	cmnvs	r2, pc, ror #14
    1ff8:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    1ffc:	2073656c 	rsbscs	r6, r3, ip, ror #10
    2000:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    2004:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    2008:	6f742075 	svcvs	0x00742075
    200c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    2010:	206d7261 	rsbcs	r7, sp, r1, ror #4
    2014:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    2018:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    201c:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    2020:	31303220 	teqcc	r0, r0, lsr #4
    2024:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    2028:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    202c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    2030:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    2034:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    2038:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    203c:	3a630065 	bcc	18c21d8 <__Stack_Size+0x18c19d8>
    2040:	6f72705c 	svcvs	0x0072705c
    2044:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    2048:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    204c:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    2050:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    2054:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    2058:	6f6f7420 	svcvs	0x006f7420
    205c:	6120736c 	teqvs	r0, ip, ror #6
    2060:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    2064:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    2068:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    206c:	20382e34 	eorscs	r2, r8, r4, lsr lr
    2070:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    2074:	6c5c3371 	mrrcvs	3, 7, r3, ip, cr1
    2078:	675c6269 	ldrbvs	r6, [ip, -r9, ror #4]
    207c:	615c6363 	cmpvs	ip, r3, ror #6
    2080:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    2084:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    2088:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    208c:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    2090:	695c342e 	ldmdbvs	ip, {r1, r2, r3, r5, sl, ip, sp}^
    2094:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2098:	00006564 	andeq	r6, r0, r4, ror #10
    209c:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    20a0:	632e656d 	teqvs	lr, #457179136	; 0x1b400000
    20a4:	00000100 	andeq	r0, r0, r0, lsl #2
    20a8:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    20ac:	682e656d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    20b0:	00000100 	andeq	r0, r0, r0, lsl #2
    20b4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    20b8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    20bc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    20c0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    20c4:	00000200 	andeq	r0, r0, r0, lsl #4
    20c8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    20cc:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    20d0:	00000300 	andeq	r0, r0, r0, lsl #6
    20d4:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
    20d8:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    20dc:	00000400 	andeq	r0, r0, r0, lsl #8
    20e0:	02050000 	andeq	r0, r5, #0
    20e4:	00000000 	andeq	r0, r0, r0
    20e8:	0100c903 	tsteq	r0, r3, lsl #18
    20ec:	027a3b25 	rsbseq	r3, sl, #37888	; 0x9400
    20f0:	01010004 	tsteq	r1, r4
    20f4:	18020500 	stmdane	r2, {r8, sl}
    20f8:	03080031 	movweq	r0, #32817	; 0x8031
    20fc:	4a0100dd 	bmi	42478 <__Stack_Size+0x41c78>
    2100:	673c4f03 	ldrvs	r4, [ip, -r3, lsl #30]!
    2104:	2c222240 	sfmcs	f2, 4, [r2], #-256	; 0xffffff00
    2108:	032e2b03 	teqeq	lr, #3072	; 0xc00
    210c:	33522e79 	cmpcc	r2, #1936	; 0x790
    2110:	342d295a 	strtcc	r2, [sp], #-2394	; 0x95a
    2114:	02040200 	andeq	r0, r4, #0, 4
    2118:	06132202 	ldreq	r2, [r3], -r2, lsl #4
    211c:	3d49069e 	stclcc	6, cr0, [r9, #-632]	; 0xfffffd88
    2120:	3d3b212d 	ldfccs	f2, [fp, #-180]!	; 0xffffff4c
    2124:	0368211f 	cmneq	r8, #-1073741817	; 0xc0000007
    2128:	1e4b3c59 	mcrne	12, 2, r3, cr11, cr9, {2}
    212c:	2a032b31 	bcs	ccdf8 <__Stack_Size+0xcc5f8>
    2130:	0200bd20 	andeq	fp, r0, #32, 26	; 0x800
    2134:	003d0204 	eorseq	r0, sp, r4, lsl #4
    2138:	03020402 	movweq	r0, #9218	; 0x2402
    213c:	0200664f 	andeq	r6, r0, #82837504	; 0x4f00000
    2140:	31030204 	tstcc	r3, r4, lsl #4
    2144:	04020020 	streq	r0, [r2], #-32
    2148:	2e520302 	cdpcs	3, 5, cr0, cr2, cr2, {0}
    214c:	311e3d21 	tstcc	lr, r1, lsr #26
    2150:	0402002b 	streq	r0, [r2], #-43	; 0x2b
    2154:	20310302 	eorscs	r0, r1, r2, lsl #6
    2158:	02040200 	andeq	r0, r4, #0, 4
    215c:	207fa803 	rsbscs	sl, pc, r3, lsl #16
    2160:	02040200 	andeq	r0, r4, #0, 4
    2164:	2000d803 	andcs	sp, r0, r3, lsl #16
    2168:	02040200 	andeq	r0, r4, #0, 4
    216c:	2e7fab03 	vaddcs.f64	d26, d15, d3
    2170:	312c5921 	teqcc	ip, r1, lsr #18
    2174:	00f5032b 	rscseq	r0, r5, fp, lsr #6
    2178:	73213120 	teqvc	r1, #32, 2
    217c:	433c5903 	teqmi	ip, #49152	; 0xc000
    2180:	3c7fbb03 	ldclcc	11, cr11, [pc], #-12	; 217c <__Stack_Size+0x197c>
    2184:	35031e31 	strcc	r1, [r3, #-3633]	; 0xe31
    2188:	032d213c 	teqeq	sp, #60, 2
    218c:	03024a4d 	movweq	r4, #10829	; 0x2a4d
    2190:	00010100 	andeq	r0, r1, r0, lsl #2
    2194:	00000205 	andeq	r0, r0, r5, lsl #4
    2198:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    219c:	312e0100 	teqcc	lr, r0, lsl #2
    21a0:	ac030204 	sfmge	f0, 4, [r3], {4}
    21a4:	0104587f 	tsteq	r4, pc, ror r8
    21a8:	ac00d603 	stcge	6, cr13, [r0], {3}
    21ac:	01000202 	tsteq	r0, r2, lsl #4
    21b0:	02050001 	andeq	r0, r5, #1
    21b4:	00000000 	andeq	r0, r0, r0
    21b8:	01018003 	tsteq	r1, r3
    21bc:	1431025d 	ldrtne	r0, [r1], #-605	; 0x25d
    21c0:	2f302f2f 	svccs	0x00302f2f
    21c4:	1d4a7803 	stclne	8, cr7, [sl, #-12]
    21c8:	1f212d24 	svcne	0x00212d24
    21cc:	02022d21 	andeq	r2, r2, #2112	; 0x840
    21d0:	00010100 	andeq	r0, r1, r0, lsl #2
    21d4:	00000205 	andeq	r0, r0, r5, lsl #4
    21d8:	91030000 	mrsls	r0, (UNDEF: 3)
    21dc:	13080101 	movwne	r0, #33025	; 0x8101
    21e0:	133202be 	teqne	r2, #-536870901	; 0xe000000b
    21e4:	211e4b1f 	tstcs	lr, pc, lsl fp
    21e8:	02023e65 	andeq	r3, r2, #1616	; 0x650
    21ec:	00010100 	andeq	r0, r1, r0, lsl #2
    21f0:	32b80205 	adcscc	r0, r8, #1342177280	; 0x50000000
    21f4:	9a030800 	bls	c41fc <__Stack_Size+0xc39fc>
    21f8:	f3030101 	vrhadd.u8	d0, d3, d1
    21fc:	8d03207e 	stchi	0, cr2, [r3, #-504]	; 0xfffffe08
    2200:	f6032001 			; <UNDEFINED> instruction: 0xf6032001
    2204:	4b21207e 	blmi	84a404 <__Stack_Size+0x849c04>
    2208:	032b311e 	teqeq	fp, #-2147483641	; 0x80000007
    220c:	2c593c0e 	mrrccs	12, 0, r3, r9, cr14
    2210:	f5032b31 			; <UNDEFINED> instruction: 0xf5032b31
    2214:	21312000 	teqcs	r1, r0
    2218:	03024473 	movweq	r4, #9331	; 0x2473
    221c:	00010100 	andeq	r0, r1, r0, lsl #2
    2220:	00000205 	andeq	r0, r0, r5, lsl #4
    2224:	a0030000 	andge	r0, r3, r0
    2228:	ed030101 	stfs	f0, [r3, #-4]
    222c:	9303207e 	movwls	r2, #12414	; 0x307e
    2230:	f0032001 			; <UNDEFINED> instruction: 0xf0032001
    2234:	4b21207e 	blmi	84a434 <__Stack_Size+0x849c34>
    2238:	032b311e 	teqeq	fp, #-2147483641	; 0x80000007
    223c:	2c593c0e 	mrrccs	12, 0, r3, r9, cr14
    2240:	f5032b31 			; <UNDEFINED> instruction: 0xf5032b31
    2244:	21312000 	teqcs	r1, r0
    2248:	7f850373 	svcvc	0x00850373
    224c:	5921233c 	stmdbpl	r1!, {r2, r3, r4, r5, r8, r9, sp}
    2250:	032b312c 	teqeq	fp, #44, 2
    2254:	312000f5 	strdcc	r0, [r0, -r5]!
    2258:	0f037321 	svceq	0x00037321
    225c:	0003023c 	andeq	r0, r3, ip, lsr r2
    2260:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2264:	00331002 	eorseq	r1, r3, r2
    2268:	01a80308 			; <UNDEFINED> instruction: 0x01a80308
    226c:	2b234a01 	blcs	8d4a78 <__Stack_Size+0x8d4278>
    2270:	7f810331 	svcvc	0x00810331
    2274:	2240672e 	subcs	r6, r0, #12058624	; 0xb80000
    2278:	fa032c22 	blx	cd308 <__Stack_Size+0xccb08>
    227c:	02002000 	andeq	r2, r0, #0
    2280:	004b0204 	subeq	r0, fp, r4, lsl #4
    2284:	03020402 	movweq	r0, #9218	; 0x2402
    2288:	00827f90 	umulleq	r7, r2, r0, pc	; <UNPREDICTABLE>
    228c:	03020402 	movweq	r0, #9218	; 0x2402
    2290:	002000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2294:	03020402 	movweq	r0, #9218	; 0x2402
    2298:	212e7f93 			; <UNDEFINED> instruction: 0x212e7f93
    229c:	2b311e3d 	blcs	c49b98 <__Stack_Size+0xc49398>
    22a0:	593c5d03 	ldmdbpl	ip!, {r0, r1, r8, sl, fp, ip, lr}
    22a4:	032b311e 	teqeq	fp, #-2147483641	; 0x80000007
    22a8:	312000f5 	strdcc	r0, [r0, -r5]!
    22ac:	02046521 	andeq	r6, r4, #138412032	; 0x8400000
    22b0:	3c7f9203 	lfmcc	f1, 3, [pc], #-12	; 22ac <__Stack_Size+0x1aac>
    22b4:	66030104 	strvs	r0, [r3], -r4, lsl #2
    22b8:	0302049e 	movweq	r0, #9374	; 0x249e
    22bc:	01042e1a 	tsteq	r4, sl, lsl lr
    22c0:	21206903 	teqcs	r0, r3, lsl #18
    22c4:	2b312c67 	blcs	c4d468 <__Stack_Size+0xc4cc68>
    22c8:	673c0e03 	ldrvs	r0, [ip, -r3, lsl #28]!
    22cc:	032b311e 	teqeq	fp, #-2147483641	; 0x80000007
    22d0:	312000f5 	strdcc	r0, [r0, -r5]!
    22d4:	4d398121 	ldfmid	f0, [r9, #-132]!	; 0xffffff7c
    22d8:	02008121 	andeq	r8, r0, #1073741832	; 0x40000008
    22dc:	18030204 	stmdane	r3, {r2, r9}
    22e0:	3c0c033c 	stccc	3, cr0, [ip], {60}	; 0x3c
    22e4:	3c7ef703 	ldclcc	7, cr15, [lr], #-12
    22e8:	03022c31 	movweq	r2, #11313	; 0x2c31
    22ec:	00010100 	andeq	r0, r1, r0, lsl #2
    22f0:	00000205 	andeq	r0, r0, r5, lsl #4
    22f4:	bc030000 	stclt	0, cr0, [r3], {-0}
    22f8:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    22fc:	3c7eeb03 	ldclcc	11, cr14, [lr], #-12
    2300:	95030104 	strls	r0, [r3, #-260]	; 0x104
    2304:	04202001 	strteq	r2, [r0], #-1
    2308:	7eeb0302 	cdpvc	3, 14, cr0, cr11, cr2, {0}
    230c:	0301042e 	movweq	r0, #5166	; 0x142e
    2310:	0490019c 	ldreq	r0, [r0], #412	; 0x19c
    2314:	7ee40302 	cdpvc	3, 14, cr0, cr4, cr2, {0}
    2318:	03010420 	movweq	r0, #5152	; 0x1420
    231c:	00200197 	mlaeq	r0, r7, r1, r0
    2320:	26020402 	strcs	r0, [r2], -r2, lsl #8
    2324:	02040200 	andeq	r0, r4, #0, 4
    2328:	0402003d 	streq	r0, [r2], #-61	; 0x3d
    232c:	02002c02 	andeq	r2, r0, #512	; 0x200
    2330:	00310204 	eorseq	r0, r1, r4, lsl #4
    2334:	2b020402 	blcs	83344 <__Stack_Size+0x82b44>
    2338:	207f8a03 	rsbscs	r8, pc, r3, lsl #20
    233c:	2e5a03a3 	cdpcs	3, 5, cr0, cr10, cr3, {5}
    2340:	2222403d 	eorcs	r4, r2, #61	; 0x3d
    2344:	0199032c 	orrseq	r0, r9, ip, lsr #6
    2348:	03020420 	movweq	r0, #9248	; 0x2420
    234c:	043c7edb 	ldrteq	r7, [ip], #-3803	; 0xedb
    2350:	01a50301 			; <UNDEFINED> instruction: 0x01a50301
    2354:	03020420 	movweq	r0, #9248	; 0x2420
    2358:	042e7edb 	strteq	r7, [lr], #-3803	; 0xedb
    235c:	01a50301 			; <UNDEFINED> instruction: 0x01a50301
    2360:	ad68239e 	stclge	3, cr2, [r8, #-632]!	; 0xfffffd88
    2364:	03667a03 	cmneq	r6, #12288	; 0x3000
    2368:	da033c0a 	ble	d1398 <__Stack_Size+0xd0b98>
    236c:	2c313c7e 	ldccs	12, cr3, [r1], #-504	; 0xfffffe08
    2370:	01000302 	tsteq	r0, r2, lsl #6
    2374:	00015201 	andeq	r5, r1, r1, lsl #4
    2378:	fb000200 	blx	2b82 <__Stack_Size+0x2382>
    237c:	02000000 	andeq	r0, r0, #0
    2380:	0d0efb01 	vstreq	d15, [lr, #-4]
    2384:	01010100 	mrseq	r0, (UNDEF: 17)
    2388:	00000001 	andeq	r0, r0, r1
    238c:	01000001 	tsteq	r0, r1
    2390:	31353532 	teqcc	r5, r2, lsr r5
    2394:	3a630039 	bcc	18c2480 <__Stack_Size+0x18c1c80>
    2398:	6f72705c 	svcvs	0x0072705c
    239c:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    23a0:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    23a4:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    23a8:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    23ac:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    23b0:	6f6f7420 	svcvs	0x006f7420
    23b4:	6120736c 	teqvs	r0, ip, ror #6
    23b8:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    23bc:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    23c0:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    23c4:	20382e34 	eorscs	r2, r8, r4, lsr lr
    23c8:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    23cc:	615c3371 	cmpvs	ip, r1, ror r3
    23d0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    23d4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    23d8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    23dc:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    23e0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    23e4:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    23e8:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    23ec:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    23f0:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
    23f4:	206d6172 	rsbcs	r6, sp, r2, ror r1
    23f8:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
    23fc:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
    2400:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
    2404:	20756e67 	rsbscs	r6, r5, r7, ror #28
    2408:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 2240 <__Stack_Size+0x1a40>
    240c:	72612073 	rsbvc	r2, r1, #115	; 0x73
    2410:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
    2414:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    2418:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
    241c:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
    2420:	71343130 	teqvc	r4, r0, lsr r1
    2424:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    2428:	6f6e2d6d 	svcvs	0x006e2d6d
    242c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    2430:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    2434:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2438:	00656475 	rsbeq	r6, r5, r5, ror r4
    243c:	726f6d00 	rsbvc	r6, pc, #0, 26
    2440:	35326870 	ldrcc	r6, [r2, #-2160]!	; 0x870
    2444:	2e393135 	mrccs	1, 1, r3, cr9, cr5, {1}
    2448:	00010063 	andeq	r0, r1, r3, rrx
    244c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    2450:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    2454:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2458:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    245c:	00020068 	andeq	r0, r2, r8, rrx
    2460:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    2464:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    2468:	00030068 	andeq	r0, r3, r8, rrx
    246c:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    2470:	2e393135 	mrccs	1, 1, r3, cr9, cr5, {1}
    2474:	00010068 	andeq	r0, r1, r8, rrx
    2478:	05000000 	streq	r0, [r0, #-0]
    247c:	00000002 	andeq	r0, r0, r2
    2480:	010a0300 	mrseq	r0, (UNDEF: 58)
    2484:	24201c24 	strtcs	r1, [r0], #-3108	; 0xc24
    2488:	4b4b241c 	blmi	12cb500 <__Stack_Size+0x12cad00>
    248c:	023d5959 	eorseq	r5, sp, #1458176	; 0x164000
    2490:	01010005 	tsteq	r1, r5
    2494:	00020500 	andeq	r0, r2, r0, lsl #10
    2498:	03000000 	movweq	r0, #0
    249c:	030100cc 	movweq	r0, #4300	; 0x10cc
    24a0:	32032e4e 	andcc	r2, r3, #1248	; 0x4e0
    24a4:	4e032020 	cdpmi	0, 0, cr2, cr3, cr0, {1}
    24a8:	3c32033c 	ldccc	3, cr0, [r2], #-240	; 0xffffff10
    24ac:	2f204e03 	svccs	0x00204e03
    24b0:	1103594b 	tstne	r3, fp, asr #18
    24b4:	59595b58 	ldmdbpl	r9, {r3, r4, r6, r8, r9, fp, ip, lr}^
    24b8:	4b5b5b4d 	blmi	16d91f4 <__Stack_Size+0x16d89f4>
    24bc:	3d59af4d 	ldclcc	15, cr10, [r9, #-308]	; 0xfffffecc
    24c0:	580b033e 	stmdapl	fp, {r1, r2, r3, r4, r5, r8, r9}
    24c4:	09023f3d 	stmdbeq	r2, {r0, r2, r3, r4, r5, r8, r9, sl, fp, ip, sp}
    24c8:	05010100 	streq	r0, [r1, #-256]	; 0x100
    24cc:	02000008 	andeq	r0, r0, #8
    24d0:	00003100 	andeq	r3, r0, r0, lsl #2
    24d4:	fb010200 	blx	42cde <__Stack_Size+0x424de>
    24d8:	01000d0e 	tsteq	r0, lr, lsl #26
    24dc:	00010101 	andeq	r0, r1, r1, lsl #2
    24e0:	00010000 	andeq	r0, r1, r0
    24e4:	35320100 	ldrcc	r0, [r2, #-256]!	; 0x100
    24e8:	00393135 	eorseq	r3, r9, r5, lsr r1
    24ec:	61687300 	cmnvs	r8, r0, lsl #6
    24f0:	2e363532 	mrccs	5, 1, r3, cr6, cr2, {1}
    24f4:	00010063 	andeq	r0, r1, r3, rrx
    24f8:	61687300 	cmnvs	r8, r0, lsl #6
    24fc:	2e363532 	mrccs	5, 1, r3, cr6, cr2, {1}
    2500:	00010068 	andeq	r0, r1, r8, rrx
    2504:	05000000 	streq	r0, [r0, #-0]
    2508:	00345002 	eorseq	r5, r4, r2
    250c:	012f0308 	teqeq	pc, r8, lsl #6
    2510:	21302d33 	teqcs	r0, r3, lsr sp
    2514:	21212121 	teqcs	r1, r1, lsr #2
    2518:	23207603 	teqcs	r0, #3145728	; 0x300000
    251c:	21212130 	teqcs	r1, r0, lsr r1
    2520:	0321331c 	teqeq	r1, #28, 6	; 0x70000000
    2524:	03212076 	teqeq	r1, #118	; 0x76
    2528:	1302200a 	movwne	r2, #8202	; 0x200a
    252c:	00010100 	andeq	r0, r1, r0, lsl #2
    2530:	34a80205 	strtcc	r0, [r8], #517	; 0x205
    2534:	3e030800 	cdpcc	8, 0, cr0, cr3, cr0, {0}
    2538:	34033c01 	strcc	r3, [r3], #-3073	; 0xc01
    253c:	22211e20 	eorcs	r1, r1, #32, 28	; 0x200
    2540:	24207903 	strtcs	r7, [r0], #-2307	; 0x903
    2544:	03241f22 	teqeq	r4, #34, 30	; 0x88
    2548:	03262e78 	teqeq	r6, #120, 28	; 0x780
    254c:	1f262079 	svcne	0x00262079
    2550:	22271f1c 	eorcs	r1, r7, #28, 30	; 0x70
    2554:	213c7803 	teqcs	ip, r3, lsl #16
    2558:	74790327 	ldrbtvc	r0, [r9], #-807	; 0x327
    255c:	03205403 	teqeq	r0, #50331648	; 0x3000000
    2560:	4d032033 	stcmi	0, cr2, [r3, #-204]	; 0xffffff34
    2564:	2e2c0366 	cdpcs	3, 2, cr0, cr12, cr6, {3}
    2568:	03205403 	teqeq	r0, #50331648	; 0x3000000
    256c:	4d032e33 	stcmi	14, cr2, [r3, #-204]	; 0xffffff34
    2570:	74330366 	ldrtvc	r0, [r3], #-870	; 0x366
    2574:	034a4d03 	movteq	r4, #44291	; 0xad03
    2578:	4e032e33 	mcrmi	14, 0, r2, cr3, cr3, {1}
    257c:	2e32034a 	cdpcs	3, 3, cr0, cr2, cr10, {2}
    2580:	1f2e4e03 	svcne	0x002e4e03
    2584:	262e2d03 	strtcs	r2, [lr], -r3, lsl #26
    2588:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
    258c:	03204e03 	teqeq	r0, #3, 28	; 0x30
    2590:	4e033c32 	mcrmi	12, 0, r3, cr3, cr2, {1}
    2594:	3c2c032e 	stccc	3, cr0, [ip], #-184	; 0xffffff48
    2598:	204e0326 	subcs	r0, lr, r6, lsr #6
    259c:	1f2e3303 	svcne	0x002e3303
    25a0:	4e031f2f 	cdpmi	15, 0, cr1, cr3, cr15, {1}
    25a4:	2e320320 	cdpcs	3, 3, cr0, cr2, cr0, {1}
    25a8:	033c4e03 	teqeq	ip, #3, 28	; 0x30
    25ac:	4e032033 	mcrmi	0, 0, r2, cr3, cr3, {1}
    25b0:	32039e08 	andcc	r9, r3, #8, 28	; 0x80
    25b4:	664e0320 	strbvs	r0, [lr], -r0, lsr #6
    25b8:	03203203 	teqeq	r0, #805306368	; 0x30000000
    25bc:	32032e4e 	andcc	r2, r3, #1248	; 0x4e0
    25c0:	204e0320 	subcs	r0, lr, r0, lsr #6
    25c4:	2f203203 	svccs	0x00203203
    25c8:	03204d03 	teqeq	r0, #3, 26	; 0xc0
    25cc:	03214a32 	teqeq	r1, #204800	; 0x32000
    25d0:	33032e4d 	movwcc	r2, #15949	; 0x3e4d
    25d4:	084e033c 	stmdaeq	lr, {r2, r3, r4, r5, r8, r9}^
    25d8:	2032032e 	eorscs	r0, r2, lr, lsr #6
    25dc:	03664e03 	cmneq	r6, #3, 28	; 0x30
    25e0:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    25e4:	2e320366 	cdpcs	3, 3, cr0, cr2, cr6, {3}
    25e8:	034a4e03 	movteq	r4, #44547	; 0xae03
    25ec:	4e033c32 	mcrmi	12, 0, r3, cr3, cr2, {1}
    25f0:	20320320 	eorscs	r0, r2, r0, lsr #6
    25f4:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    25f8:	4f032e32 	svcmi	0x00032e32
    25fc:	2032033c 	eorscs	r0, r2, ip, lsr r3
    2600:	03204d03 	teqeq	r0, #3, 26	; 0xc0
    2604:	4e032033 	mcrmi	0, 0, r2, cr3, cr3, {1}
    2608:	20320320 	eorscs	r0, r2, r0, lsr #6
    260c:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    2610:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    2614:	2e320358 	mrccs	3, 1, r0, cr2, cr8, {2}
    2618:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    261c:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    2620:	2e3203ba 	mrccs	3, 1, r0, cr2, cr10, {5}
    2624:	03904e03 	orrseq	r4, r0, #3, 28	; 0x30
    2628:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    262c:	4a32032e 	bmi	c832ec <__Stack_Size+0xc82aec>
    2630:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    2634:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    2638:	2e32033c 	mrccs	3, 1, r0, cr2, cr12, {1}
    263c:	03204f03 	teqeq	r0, #3, 30
    2640:	032d2032 	teqeq	sp, #50	; 0x32
    2644:	031f2e4f 	tsteq	pc, #1264	; 0x4f0
    2648:	4e032e33 	mcrmi	14, 0, r2, cr3, cr3, {1}
    264c:	20310358 	eorscs	r0, r1, r8, asr r3
    2650:	03204f03 	teqeq	r0, #3, 30
    2654:	212d2032 	teqcs	sp, r2, lsr r0
    2658:	03e44e03 	mvneq	r4, #3, 28	; 0x30
    265c:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    2660:	20320358 	eorscs	r0, r2, r8, asr r3
    2664:	034a4e03 	movteq	r4, #44547	; 0xae03
    2668:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    266c:	4a32034a 	bmi	c8339c <__Stack_Size+0xc82b9c>
    2670:	03204e03 	teqeq	r0, #3, 28	; 0x30
    2674:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    2678:	2e33032e 	cdpcs	3, 3, cr0, cr3, cr14, {1}
    267c:	2e4e031f 	mcrcs	3, 2, r0, cr14, cr15, {0}
    2680:	2032032f 	eorscs	r0, r2, pc, lsr #6
    2684:	03204e03 	teqeq	r0, #3, 28	; 0x30
    2688:	2fab2032 	svccs	0x00ab2032
    268c:	03584e03 	cmpeq	r8, #3, 28	; 0x30
    2690:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    2694:	2e320366 	cdpcs	3, 3, cr0, cr2, cr6, {3}
    2698:	03204e03 	teqeq	r0, #3, 28	; 0x30
    269c:	4e036632 	mcrmi	6, 0, r6, cr3, cr2, {1}
    26a0:	4a32034a 	bmi	c833d0 <__Stack_Size+0xc82bd0>
    26a4:	1f3d3b75 	svcne	0x003d3b75
    26a8:	4f032d21 	svcmi	0x00032d21
    26ac:	2e310320 	cdpcs	3, 3, cr0, cr1, cr0, {1}
    26b0:	744e032f 	strbvc	r0, [lr], #-815	; 0x32f
    26b4:	212e3103 	teqcs	lr, r3, lsl #2
    26b8:	03584e03 	cmpeq	r8, #3, 28	; 0x30
    26bc:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    26c0:	2e320366 	cdpcs	3, 3, cr0, cr2, cr6, {3}
    26c4:	03204e03 	teqeq	r0, #3, 28	; 0x30
    26c8:	4e035832 	mcrmi	8, 0, r5, cr3, cr2, {1}
    26cc:	2e320366 	cdpcs	3, 3, cr0, cr2, cr6, {3}
    26d0:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    26d4:	67200832 			; <UNDEFINED> instruction: 0x67200832
    26d8:	211f213b 	tstcs	pc, fp, lsr r1	; <UNPREDICTABLE>
    26dc:	3c4f032d 	mcrrcc	3, 2, r0, pc, cr13
    26e0:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    26e4:	3203824e 	andcc	r8, r3, #-536870908	; 0xe0000004
    26e8:	664e032e 	strbvs	r0, [lr], -lr, lsr #6
    26ec:	033c3203 	teqeq	ip, #805306368	; 0x30000000
    26f0:	3203ba4e 	andcc	fp, r3, #319488	; 0x4e000
    26f4:	4a4e033c 	bmi	13833ec <__Stack_Size+0x1382bec>
    26f8:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    26fc:	32032e4e 	andcc	r2, r3, #1248	; 0x4e0
    2700:	2e4e0320 	cdpcs	3, 4, cr0, cr14, cr0, {1}
    2704:	4b2e3203 	blmi	b8ef18 <__Stack_Size+0xb8e718>
    2708:	033c4e03 	teqeq	ip, #3, 28	; 0x30
    270c:	4d032e32 	stcmi	14, cr2, [r3, #-200]	; 0xffffff38
    2710:	032d2f20 	teqeq	sp, #32, 30	; 0x80
    2714:	4e032e33 	mcrmi	14, 0, r2, cr3, cr3, {1}
    2718:	32032008 	andcc	r2, r3, #8
    271c:	904e033c 	subls	r0, lr, ip, lsr r3
    2720:	033c3203 	teqeq	ip, #805306368	; 0x30000000
    2724:	32034a4e 	andcc	r4, r3, #319488	; 0x4e000
    2728:	2e4e032e 	cdpcs	3, 4, cr0, cr14, cr14, {1}
    272c:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    2730:	3203204e 	andcc	r2, r3, #78	; 0x4e
    2734:	031f2120 	tsteq	pc, #32, 2
    2738:	32032e4e 	andcc	r2, r3, #1248	; 0x4e0
    273c:	211f3d2e 	tstcs	pc, lr, lsr #26
    2740:	2d3c4e03 	ldccs	14, cr4, [ip, #-12]!
    2744:	03203303 	teqeq	r0, #201326592	; 0xc000000
    2748:	3203584e 	andcc	r5, r3, #5111808	; 0x4e0000
    274c:	584e032e 	stmdapl	lr, {r1, r2, r3, r5, r8, r9}^
    2750:	03203203 	teqeq	r0, #805306368	; 0x30000000
    2754:	3203824e 	andcc	r8, r3, #-536870908	; 0xe0000004
    2758:	744e032e 	strbvc	r0, [lr], #-814	; 0x32e
    275c:	033c3203 	teqeq	ip, #805306368	; 0x30000000
    2760:	3203584e 	andcc	r5, r3, #5111808	; 0x4e0000
    2764:	204e032e 	subcs	r0, lr, lr, lsr #6
    2768:	213c3203 	teqcs	ip, r3, lsl #4
    276c:	031f211f 	tsteq	pc, #-1073741817	; 0xc0000007
    2770:	3303204e 	movwcc	r2, #12366	; 0x304e
    2774:	1f2f3b2e 	svcne	0x002f3b2e
    2778:	584e0321 	stmdapl	lr, {r0, r5, r8, r9}^
    277c:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    2780:	3203664e 	andcc	r6, r3, #81788928	; 0x4e00000
    2784:	4a4d034a 	bmi	13434b4 <__Stack_Size+0x1342cb4>
    2788:	032e3303 	teqeq	lr, #201326592	; 0xc000000
    278c:	3203744e 	andcc	r7, r3, #1308622848	; 0x4e000000
    2790:	4a4e032e 	bmi	1383450 <__Stack_Size+0x1382c50>
    2794:	033c3203 	teqeq	ip, #805306368	; 0x30000000
    2798:	32034a4e 	andcc	r4, r3, #319488	; 0x4e000
    279c:	2e4e032e 	cdpcs	3, 4, cr0, cr14, cr14, {1}
    27a0:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    27a4:	33032e4e 	movwcc	r2, #15950	; 0x3e4e
    27a8:	4e031f20 	cdpmi	15, 0, cr1, cr3, cr0, {1}
    27ac:	2e33033c 	mrccs	3, 1, r0, cr3, cr12, {1}
    27b0:	03584d03 	cmpeq	r8, #3, 26	; 0xc0
    27b4:	4e032e33 	mcrmi	14, 0, r2, cr3, cr3, {1}
    27b8:	2e320366 	cdpcs	3, 3, cr0, cr2, cr6, {3}
    27bc:	03584e03 	cmpeq	r8, #3, 28	; 0x30
    27c0:	4e033c32 	mcrmi	12, 0, r3, cr3, cr2, {1}
    27c4:	4a32039e 	bmi	c83644 <__Stack_Size+0xc82e44>
    27c8:	034a4e03 	movteq	r4, #44547	; 0xae03
    27cc:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    27d0:	4a32034a 	bmi	c83500 <__Stack_Size+0xc82d00>
    27d4:	03204e03 	teqeq	r0, #3, 28	; 0x30
    27d8:	1f212032 	svcne	0x00212032
    27dc:	03204e03 	teqeq	r0, #3, 28	; 0x30
    27e0:	1f2f2e32 	svcne	0x002f2e32
    27e4:	584e0321 	stmdapl	lr, {r0, r5, r8, r9}^
    27e8:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    27ec:	33033c4d 	movwcc	r3, #15437	; 0x3c4d
    27f0:	4a4e032e 	bmi	13834b0 <__Stack_Size+0x1382cb0>
    27f4:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    27f8:	32034a4e 	andcc	r4, r3, #319488	; 0x4e000
    27fc:	2e4e0320 	cdpcs	3, 4, cr0, cr14, cr0, {1}
    2800:	034a3203 	movteq	r3, #41475	; 0xa203
    2804:	3203584e 	andcc	r5, r3, #5111808	; 0x4e0000
    2808:	744e034a 	strbvc	r0, [lr], #-842	; 0x34a
    280c:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    2810:	32032e4e 	andcc	r2, r3, #1248	; 0x4e0
    2814:	4e033d20 	cdpmi	13, 0, cr3, cr3, cr0, {1}
    2818:	2e320374 	mrccs	3, 1, r0, cr2, cr4, {3}
    281c:	03584e03 	cmpeq	r8, #3, 28	; 0x30
    2820:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    2824:	2032032e 	eorscs	r0, r2, lr, lsr #6
    2828:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    282c:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    2830:	4a32033c 	bmi	c83528 <__Stack_Size+0xc82d28>
    2834:	034a4e03 	movteq	r4, #44547	; 0xae03
    2838:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    283c:	2e320374 	mrccs	3, 1, r0, cr2, cr4, {3}
    2840:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    2844:	1f3d2032 	svcne	0x003d2032
    2848:	e44e0321 	strb	r0, [lr], #-801	; 0x321
    284c:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    2850:	3203584e 	andcc	r5, r3, #5111808	; 0x4e0000
    2854:	2e4e032e 	cdpcs	3, 4, cr0, cr14, cr14, {1}
    2858:	03203203 	teqeq	r0, #805306368	; 0x30000000
    285c:	32032e4e 	andcc	r2, r3, #1248	; 0x4e0
    2860:	3c4e034a 	mcrrcc	3, 4, r0, lr, cr10
    2864:	2f3c3203 	svccs	0x003c3203
    2868:	03204d03 	teqeq	r0, #3, 26	; 0xc0
    286c:	67082e32 	smladxvs	r8, r2, lr, r2
    2870:	03204d03 	teqeq	r0, #3, 26	; 0xc0
    2874:	213d2e32 	teqcs	sp, r2, lsr lr
    2878:	2f1f2f3b 	svccs	0x001f2f3b
    287c:	4b2d751f 	blmi	b5fd00 <__Stack_Size+0xb5f500>
    2880:	2f1f592d 	svccs	0x001f592d
    2884:	2165672d 	cmncs	r5, sp, lsr #14
    2888:	211f212d 	tstcs	pc, sp, lsr #2
    288c:	2d592d59 	ldclcs	13, cr2, [r9, #-356]	; 0xfffffe9c
    2890:	2d2f1f4b 	stccs	15, cr1, [pc, #-300]!	; 276c <__Stack_Size+0x1f6c>
    2894:	2d2f2d9f 	stccs	13, cr2, [pc, #-636]!	; 2620 <__Stack_Size+0x1e20>
    2898:	492f1f2f 	stmdbmi	pc!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, ip}	; <UNPREDICTABLE>
    289c:	3b219d21 	blcc	869d28 <__Stack_Size+0x869528>
    28a0:	3d2d9121 	stfccd	f1, [sp, #-132]!	; 0xffffff7c
    28a4:	2f1f831f 	svccs	0x001f831f
    28a8:	212d831f 	teqcs	sp, pc, lsl r3
    28ac:	211f21ff 			; <UNDEFINED> instruction: 0x211f21ff
    28b0:	2d4b2d59 	stclcs	13, cr2, [fp, #-356]	; 0xfffffe9c
    28b4:	2d2f1f2f 	stccs	15, cr1, [pc, #-188]!	; 2800 <__Stack_Size+0x2000>
    28b8:	2d2f2d91 	stccs	13, cr2, [pc, #-580]!	; 267c <__Stack_Size+0x1e7c>
    28bc:	492f1f21 	stmdbmi	pc!, {r0, r5, r8, r9, sl, fp, ip}	; <UNPREDICTABLE>
    28c0:	81219d21 	teqhi	r1, r1, lsr #26
    28c4:	2f1f2121 	svccs	0x001f2121
    28c8:	2f1fad1f 	svccs	0x001fad1f
    28cc:	211f831f 	tstcs	pc, pc, lsl r3	; <UNPREDICTABLE>
    28d0:	2d224908 	stccs	9, cr4, [r2, #-32]!	; 0xffffffe0
    28d4:	213b1f3d 	teqcs	fp, sp, lsr pc
    28d8:	1f2f1f21 	svcne	0x002f1f21
    28dc:	2dbb1f2f 	ldccs	15, cr1, [fp, #188]!	; 0xbc
    28e0:	492f2d2f 	stmdbmi	pc!, {r0, r1, r2, r3, r5, r8, sl, fp, sp}	; <UNPREDICTABLE>
    28e4:	1f218f21 	svcne	0x00218f21
    28e8:	592d7521 	pushpl	{r0, r5, r8, sl, ip, sp, lr}
    28ec:	2f1f4b2d 	svccs	0x001f4b2d
    28f0:	2f2d752d 	svccs	0x002d752d
    28f4:	2f1f212d 	svccs	0x001f212d
    28f8:	2fe32149 	svccs	0x00e32149
    28fc:	2d591f2f 	ldclcs	15, cr1, [r9, #-188]	; 0xffffff44
    2900:	2d3d2d3d 	ldccs	13, cr2, [sp, #-244]!	; 0xffffff0c
    2904:	3b4b2d4b 	blcc	12cde38 <__Stack_Size+0x12cd638>
    2908:	212f8f91 			; <UNDEFINED> instruction: 0x212f8f91
    290c:	2f49831f 	svccs	0x0049831f
    2910:	833b212d 	teqhi	fp, #1073741835	; 0x4000000b
    2914:	671f831f 			; <UNDEFINED> instruction: 0x671f831f
    2918:	2f2fe308 	svccs	0x002fe308
    291c:	212d4b2d 	teqcs	sp, sp, lsr #22
    2920:	2f1f3d2d 	svccs	0x001f3d2d
    2924:	591f4b2d 	ldmdbpl	pc, {r0, r2, r3, r5, r8, r9, fp, lr}	; <UNPREDICTABLE>
    2928:	2cd7832d 	ldclcs	3, cr8, [r7], {45}	; 0x2d
    292c:	21213b21 	teqcs	r1, r1, lsr #22
    2930:	2149213b 	cmpcs	r9, fp, lsr r1
    2934:	831f912d 	tsthi	pc, #1073741835	; 0x4000000b
    2938:	2fb9671f 	svccs	0x00b9671f
    293c:	2d3d1f21 	ldccs	15, cr1, [sp, #-132]!	; 0xffffff7c
    2940:	2d2f3b3d 	fstmdbxcs	pc!, {d3-d32}	;@ Deprecated
    2944:	1f911f75 	svcne	0x00911f75
    2948:	212f5767 	teqcs	pc, r7, ror #14
    294c:	212d832d 	teqcs	sp, sp, lsr #6
    2950:	212d212d 	teqcs	sp, sp, lsr #2
    2954:	752d211f 	strvc	r2, [sp, #-287]!	; 0x11f
    2958:	671f9f1f 			; <UNDEFINED> instruction: 0x671f9f1f
    295c:	213b2fab 	teqcs	fp, fp, lsr #31
    2960:	2d591f2f 	ldclcs	15, cr1, [r9, #-188]	; 0xffffff44
    2964:	2d213b21 	fstmdbxcs	r1!, {d3-d18}	;@ Deprecated
    2968:	1f672d2f 	svcne	0x00672d2f
    296c:	9d671f83 	stclls	15, cr1, [r7, #-524]!	; 0xfffffdf4
    2970:	671f213d 			; <UNDEFINED> instruction: 0x671f213d
    2974:	212d212d 	teqcs	sp, sp, lsr #2
    2978:	831f913b 	tsthi	pc, #-1073741810	; 0xc000000e
    297c:	308f672d 	addcc	r6, pc, sp, lsr #14
    2980:	2149911f 	cmpcs	r9, pc, lsl r1
    2984:	833b212d 	teqhi	fp, #1073741835	; 0x4000000b
    2988:	672d831f 			; <UNDEFINED> instruction: 0x672d831f
    298c:	1f212f8f 	svcne	0x00212f8f
    2990:	1f2f2d3d 	svcne	0x002f2d3d
    2994:	2d4b3b3d 	vstrcs	d19, [fp, #-244]	; 0xffffff0c
    2998:	1f751f75 	svcne	0x00751f75
    299c:	1f30b94b 	svcne	0x0030b94b
    29a0:	2f3b0859 	svccs	0x003b0859
    29a4:	212d212d 	teqcs	sp, sp, lsr #2
    29a8:	831f833b 	tsthi	pc, #-335544320	; 0xec000000
    29ac:	1fbb672d 	svcne	0x00bb672d
    29b0:	212d211f 	teqcs	sp, pc, lsl r1
    29b4:	2d4b2d21 	stclcs	13, cr2, [fp, #-132]	; 0xffffff7c
    29b8:	1f914921 	svcne	0x00914921
    29bc:	ab672d83 	blge	19cdfd0 <__Stack_Size+0x19cd7d0>
    29c0:	3d2d2f2f 	stccc	15, cr2, [sp, #-188]!	; 0xffffff44
    29c4:	2f2d3d2d 	svccs	0x002d3d2d
    29c8:	831f9149 	tsthi	pc, #1073741842	; 0x40000012
    29cc:	2f57672d 	svccs	0x0057672d
    29d0:	2d751f21 	ldclcs	15, cr1, [r5, #-132]!	; 0xffffff7c
    29d4:	3b212d4b 	blcc	84df08 <__Stack_Size+0x84d708>
    29d8:	2d9f1f91 	ldccs	15, cr1, [pc, #580]	; 2c24 <__Stack_Size+0x2424>
    29dc:	2f2fd567 	svccs	0x002fd567
    29e0:	212d592d 	teqcs	sp, sp, lsr #18
    29e4:	2f2d213b 	svccs	0x002d213b
    29e8:	831f672d 	tsthi	pc, #11796480	; 0xb40000
    29ec:	2cbb672d 	ldccs	7, cr6, [fp], #180	; 0xb4
    29f0:	2f212d21 	svccs	0x00212d21
    29f4:	3d2d752d 	cfstr32cc	mvfx7, [sp, #-180]!	; 0xffffff4c
    29f8:	832d2f1f 	teqhi	sp, #31, 30	; 0x7c
    29fc:	30f1913b 	rscscc	r9, r1, fp, lsr r1
    2a00:	212d752d 	teqcs	sp, sp, lsr #10
    2a04:	2f49211f 	svccs	0x0049211f
    2a08:	831f672d 	tsthi	pc, #11796480	; 0xb40000
    2a0c:	2dbb672d 	ldccs	7, cr6, [fp, #180]!	; 0xb4
    2a10:	212d2149 	teqcs	sp, r9, asr #2
    2a14:	2d4b2d21 	stclcs	13, cr2, [fp, #-132]	; 0xffffff7c
    2a18:	2d212d21 	stccs	13, cr2, [r1, #-132]!	; 0xffffff7c
    2a1c:	2d9f1f67 	ldccs	15, cr1, [pc, #412]	; 2bc0 <__Stack_Size+0x23c0>
    2a20:	2f2f9d67 	svccs	0x002f9d67
    2a24:	212d592d 	teqcs	sp, sp, lsr #18
    2a28:	7549592d 	strbvc	r5, [r9, #-2349]	; 0x92d
    2a2c:	592d671f 	pushpl	{r0, r1, r2, r3, r4, r8, r9, sl, sp, lr}
    2a30:	2f2d2f2d 	svccs	0x002d2f2d
    2a34:	2d213d3b 	stccs	13, cr3, [r1, #-236]!	; 0xffffff14
    2a38:	21499108 	cmpcs	r9, r8, lsl #2
    2a3c:	211f212d 	tstcs	pc, sp, lsr #2
    2a40:	9f1f752d 	svcls	0x001f752d
    2a44:	30ab672d 	adccc	r6, fp, sp, lsr #14
    2a48:	3d2d2f2d 	stccc	15, cr2, [sp, #-180]!	; 0xffffff4c
    2a4c:	671f3d2d 	ldrvs	r3, [pc, -sp, lsr #26]
    2a50:	752d2f2d 	strvc	r2, [sp, #-3885]!	; 0xf2d
    2a54:	4b2d671f 	blmi	b5c6d8 <__Stack_Size+0xb5bed8>
    2a58:	2d3d2f9d 	ldccs	15, cr2, [sp, #-628]!	; 0xfffffd8c
    2a5c:	2d214959 	stccs	9, cr4, [r1, #-356]!	; 0xfffffe9c
    2a60:	1f833b21 	svcne	0x00833b21
    2a64:	ab672d83 	blge	19ce078 <__Stack_Size+0x19cd878>
    2a68:	3d1f212f 	ldfccs	f2, [pc, #-188]	; 29b4 <__Stack_Size+0x21b4>
    2a6c:	212d4b2d 	teqcs	sp, sp, lsr #22
    2a70:	9f1f753b 	svcls	0x001f753b
    2a74:	2fab672d 	svccs	0x00ab672d
    2a78:	2d3d2d2f 	ldccs	13, cr2, [sp, #-188]!	; 0xffffff44
    2a7c:	2d2f2d3d 	stccs	13, cr2, [pc, #-244]!	; 2990 <__Stack_Size+0x2190>
    2a80:	1f752d4b 	svcne	0x00752d4b
    2a84:	654b2d83 	strbvs	r2, [fp, #-3459]	; 0xd83
    2a88:	751f212f 	ldrvc	r2, [pc, #-303]	; 2961 <__Stack_Size+0x2161>
    2a8c:	212d4b2d 	teqcs	sp, sp, lsr #22
    2a90:	9f1f913b 	svcls	0x001f913b
    2a94:	2fab672d 	svccs	0x00ab672d
    2a98:	2d3d2d2f 	ldccs	13, cr2, [sp, #-188]!	; 0xffffff44
    2a9c:	2d2f2d21 	stccs	13, cr2, [pc, #-132]!	; 2a20 <__Stack_Size+0x2220>
    2aa0:	1f91492f 	svcne	0x0091492f
    2aa4:	ad672d83 	stclge	13, cr2, [r7, #-524]!	; 0xfffffdf4
    2aa8:	2d4b2f2c 	stclcs	15, cr2, [fp, #-176]	; 0xffffff50
    2aac:	2d2f2d3d 	stccs	13, cr2, [pc, #-244]!	; 29c0 <__Stack_Size+0x21c0>
    2ab0:	2d212d21 	stccs	13, cr2, [r1, #-132]!	; 0xffffff7c
    2ab4:	2d9f1f67 	ldccs	15, cr1, [pc, #412]	; 2c58 <__Stack_Size+0x2458>
    2ab8:	212f9d67 	teqcs	pc, r7, ror #26
    2abc:	212d212d 	teqcs	sp, sp, lsr #2
    2ac0:	2f492f1f 	svccs	0x00492f1f
    2ac4:	2f1f751f 	svccs	0x001f751f
    2ac8:	ad1f2f2d 	ldcge	15, cr2, [pc, #-180]	; 2a1c <__Stack_Size+0x221c>
    2acc:	212d2f2d 	teqcs	sp, sp, lsr #30
    2ad0:	2d4b2157 	stfcse	f2, [fp, #-348]	; 0xfffffea4
    2ad4:	57082d21 	strpl	r2, [r8, -r1, lsr #26]
    2ad8:	212d2121 	teqcs	sp, r1, lsr #2
    2adc:	4b2d2f1f 	blmi	b4e760 <__Stack_Size+0xb4df60>
    2ae0:	f31f753b 	vqrshl.u16	d7, d27, d15
    2ae4:	2d212dad 	stccs	13, cr2, [r1, #-692]!	; 0xfffffd4c
    2ae8:	2d4b2f2d 	stclcs	15, cr2, [fp, #-180]	; 0xffffff4c
    2aec:	3b3d3b2f 	blcc	f517b0 <__Stack_Size+0xf50fb0>
    2af0:	2dad4967 	stccs	9, cr4, [sp, #412]!	; 0x19c
    2af4:	57212d2f 	strpl	r2, [r1, -pc, lsr #26]!
    2af8:	212d4b21 	teqcs	sp, r1, lsr #22
    2afc:	21212d2d 	teqcs	r1, sp, lsr #26
    2b00:	2f1f212d 	svccs	0x001f212d
    2b04:	751f2149 	ldrvc	r2, [pc, #-329]	; 29c3 <__Stack_Size+0x21c3>
    2b08:	2f2d211f 	svccs	0x002d211f
    2b0c:	2f2d9f1f 	svccs	0x002d9f1f
    2b10:	2157212d 	cmpcs	r7, sp, lsr #2
    2b14:	2d212d4b 	stccs	13, cr2, [r1, #-300]!	; 0xfffffed4
    2b18:	2d59212d 	ldfcse	f2, [r9, #-180]	; 0xffffff4c
    2b1c:	3b3d3b2f 	blcc	f517e0 <__Stack_Size+0xf50fe0>
    2b20:	2dad4967 	stccs	9, cr4, [sp, #412]!	; 0x19c
    2b24:	57212d2f 	strpl	r2, [r1, -pc, lsr #26]!
    2b28:	1f224921 	svcne	0x00224921
    2b2c:	1f4b2d21 	svcne	0x004b2d21
    2b30:	2d4b3b21 	vstrcs	d19, [fp, #-132]	; 0xffffff7c
    2b34:	1f2f1f4b 	svcne	0x002f1f4b
    2b38:	1f2f2d21 	svcne	0x002f2d21
    2b3c:	2d2f2dad 	stccs	13, cr2, [pc, #-692]!	; 2890 <__Stack_Size+0x2090>
    2b40:	2d215721 	stccs	7, cr5, [r1, #-132]!	; 0xffffff7c
    2b44:	212c212f 	teqcs	ip, pc, lsr #2
    2b48:	2d212d2f 	stccs	13, cr2, [r1, #-188]!	; 0xffffff44
    2b4c:	2d212d3d 	stccs	13, cr2, [r1, #-244]!	; 0xffffff0c
    2b50:	21081f4b 	tstcs	r8, fp, asr #30
    2b54:	21493d1f 	cmpcs	r9, pc, lsl sp
    2b58:	3d3b211f 	ldfccs	f2, [fp, #-124]!	; 0xffffff84
    2b5c:	3b832d75 	blcc	fe0ce138 <BootRAM+0xd03e8d9>
    2b60:	2d917367 	ldccs	3, cr7, [r1, #412]	; 0x19c
    2b64:	2d223b67 	fstmdbxcs	r2!, {d3-d53}	;@ Deprecated
    2b68:	2d91212d 	ldfcss	f2, [r1, #180]	; 0xb4
    2b6c:	2d912d2f 	ldccs	13, cr2, [r1, #188]	; 0xbc
    2b70:	2d672d75 	stclcs	13, cr2, [r7, #-468]!	; 0xfffffe2c
    2b74:	492f2d83 	stmdbmi	pc!, {r0, r1, r7, r8, sl, fp, sp}	; <UNPREDICTABLE>
    2b78:	57212d3d 			; <UNDEFINED> instruction: 0x57212d3d
    2b7c:	212f1f21 	teqcs	pc, r1, lsr #30
    2b80:	2d2f211e 	stfcss	f2, [pc, #-120]!	; 2b10 <__Stack_Size+0x2310>
    2b84:	2d212d4b 	stccs	13, cr2, [r1, #-300]!	; 0xfffffed4
    2b88:	2f2d7508 	svccs	0x002d7508
    2b8c:	ad3bc93b 	ldcge	9, cr12, [fp, #-236]!	; 0xffffff14
    2b90:	2f2d2f3b 	svccs	0x002d2f3b
    2b94:	2d1f2249 	lfmcs	f2, 4, [pc, #-292]	; 2a78 <__Stack_Size+0x2278>
    2b98:	2d3e1f2f 	ldccs	15, cr1, [lr, #-188]!	; 0xffffff44
    2b9c:	2d2f2dbb 	stccs	13, cr2, [pc, #-748]!	; 28b8 <__Stack_Size+0x20b8>
    2ba0:	2d2f1f67 	stccs	15, cr1, [pc, #-412]!	; 2a0c <__Stack_Size+0x220c>
    2ba4:	2d2f1fd7 	stccs	15, cr1, [pc, #-860]!	; 2850 <__Stack_Size+0x2050>
    2ba8:	49211f3d 	stmdbmi	r1!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, ip}
    2bac:	2f2f3b21 	svccs	0x002f3b21
    2bb0:	4b2d3d2d 	blmi	b5206c <__Stack_Size+0xb5186c>
    2bb4:	1f2d221e 	svcne	0x002d221e
    2bb8:	3d1fbb21 	vldrcc	d11, [pc, #-132]	; 2b3c <__Stack_Size+0x233c>
    2bbc:	67572f2d 	ldrbvs	r2, [r7, -sp, lsr #30]
    2bc0:	2f3b4b3b 	svccs	0x003b4b3b
    2bc4:	301f211f 	andscc	r2, pc, pc, lsl r1	; <UNPREDICTABLE>
    2bc8:	d72d211f 			; <UNDEFINED> instruction: 0xd72d211f
    2bcc:	4b2d4b1f 	blmi	b55850 <__Stack_Size+0xb55050>
    2bd0:	2f1f2f2d 	svccs	0x001f2f2d
    2bd4:	2f1f593b 	svccs	0x001f593b
    2bd8:	212d211f 	teqcs	sp, pc, lsl r1
    2bdc:	1fc92f2d 	svcne	0x00c92f2d
    2be0:	1f672d9f 	svcne	0x00672d9f
    2be4:	e32f499f 	teq	pc, #2605056	; 0x27c000
    2be8:	2d213b2f 	fstmdbxcs	r1!, {d3-d25}	;@ Deprecated
    2bec:	08090321 	stmdaeq	r9, {r0, r5, r8, r9}
    2bf0:	207703c8 	rsbscs	r0, r7, r8, asr #7
    2bf4:	1c2e0903 	stcne	9, cr0, [lr], #-12
    2bf8:	0323331b 	teqeq	r3, #1811939328	; 0x6c000000
    2bfc:	1c362078 	ldcne	0, cr2, [r6], #-480	; 0xfffffe20
    2c00:	1f1f241c 	svcne	0x001f241c
    2c04:	251b242f 	ldrcs	r2, [fp, #-1071]	; 0x42f
    2c08:	2f311c1f 	svccs	0x00311c1f
    2c0c:	322b322b 	eorcc	r3, fp, #-1342177278	; 0xb0000002
    2c10:	0f022f2f 	svceq	0x00022f2f
    2c14:	00010100 	andeq	r0, r1, r0, lsl #2
    2c18:	540c0205 	strpl	r0, [ip], #-517	; 0x205
    2c1c:	c1030800 	tstgt	r3, r0, lsl #16
    2c20:	1d310101 	ldfnes	f0, [r1, #-4]!
    2c24:	23232231 	teqcs	r3, #268435459	; 0x10000003
    2c28:	21341d1d 	teqcs	r4, sp, lsl sp
    2c2c:	200a033e 	andcs	r0, sl, lr, lsr r3
    2c30:	3a1f214c 	bcc	7cb168 <__Stack_Size+0x7ca968>
    2c34:	03972a24 	orrseq	r2, r7, #36, 20	; 0x24000
    2c38:	03363c67 	teqeq	r6, #26368	; 0x6700
    2c3c:	2b5b2e13 	blcs	16ce490 <__Stack_Size+0x16cdc90>
    2c40:	762e6f03 	strtvc	r6, [lr], -r3, lsl #30
    2c44:	0b032159 	bleq	cb1b0 <__Stack_Size+0xca9b0>
    2c48:	0002022e 	andeq	r0, r2, lr, lsr #4
    2c4c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2c50:	00549c02 	subseq	r9, r4, r2, lsl #24
    2c54:	01f00308 	mvnseq	r0, r8, lsl #6
    2c58:	252f3401 	strcs	r3, [pc, #-1025]!	; 285f <__Stack_Size+0x205f>
    2c5c:	032e7403 	teqeq	lr, #50331648	; 0x3000000
    2c60:	1d31200a 	ldcne	0, cr2, [r1, #-40]!	; 0xffffffd8
    2c64:	58730331 	ldmdapl	r3!, {r0, r4, r5, r8, r9}^
    2c68:	20540325 	subscs	r0, r4, r5, lsr #6
    2c6c:	03202c03 	teqeq	r0, #768	; 0x300
    2c70:	2d032e57 	stccs	14, cr2, [r3, #-348]	; 0xfffffea4
    2c74:	53036720 	movwpl	r6, #14112	; 0x3720
    2c78:	2e23034a 	cdpcs	3, 2, cr0, cr3, cr10, {2}
    2c7c:	83200903 	teqhi	r0, #49152	; 0xc000
    2c80:	24664f03 	strbtcs	r4, [r6], #-3843	; 0xf03
    2c84:	3c780330 	ldclcc	3, cr0, [r8], #-192	; 0xffffff40
    2c88:	58110336 	ldmdapl	r1, {r1, r2, r4, r5, r8, r9}
    2c8c:	66640322 	strbtvs	r0, [r4], -r2, lsr #6
    2c90:	1d1d3123 	ldfnes	f3, [sp, #-140]	; 0xffffff74
    2c94:	033e2134 	teqeq	lr, #52, 2
    2c98:	51363c78 	teqpl	r6, r8, ror ip
    2c9c:	032e0c03 	teqeq	lr, #768	; 0x300
    2ca0:	91917420 	orrsls	r7, r1, r0, lsr #8
    2ca4:	91919191 			; <UNDEFINED> instruction: 0x91919191
    2ca8:	47039f9f 			; <UNDEFINED> instruction: 0x47039f9f
    2cac:	2f3d923c 	svccs	0x003d923c
    2cb0:	215a341e 	cmpcs	sl, lr, lsl r4
    2cb4:	2a243a1f 	bcs	911538 <__Stack_Size+0x910d38>
    2cb8:	3eac7603 	cdpcc	6, 10, cr7, cr12, cr3, {0}
    2cbc:	3e1e2f77 	mrccc	15, 0, r2, cr14, cr7, {3}
    2cc0:	262a341e 			; <UNDEFINED> instruction: 0x262a341e
    2cc4:	243a1f21 	ldrtcs	r1, [sl], #-3873	; 0xf21
    2cc8:	433f552a 	teqmi	pc, #176160768	; 0xa800000
    2ccc:	023c7603 	eorseq	r7, ip, #3145728	; 0x300000
    2cd0:	01010006 	tsteq	r1, r6
    2cd4:	00000530 	andeq	r0, r0, r0, lsr r5
    2cd8:	01600002 	cmneq	r0, r2
    2cdc:	01020000 	mrseq	r0, (UNDEF: 2)
    2ce0:	000d0efb 	strdeq	r0, [sp], -fp
    2ce4:	01010101 	tsteq	r1, r1, lsl #2
    2ce8:	01000000 	mrseq	r0, (UNDEF: 0)
    2cec:	32010000 	andcc	r0, r1, #0
    2cf0:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    2cf4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    2cf8:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
    2cfc:	206d6172 	rsbcs	r6, sp, r2, ror r1
    2d00:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
    2d04:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
    2d08:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
    2d0c:	20756e67 	rsbscs	r6, r5, r7, ror #28
    2d10:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 2b48 <__Stack_Size+0x2348>
    2d14:	72612073 	rsbvc	r2, r1, #115	; 0x73
    2d18:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
    2d1c:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    2d20:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
    2d24:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
    2d28:	71343130 	teqvc	r4, r0, lsr r1
    2d2c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    2d30:	6f6e2d6d 	svcvs	0x006e2d6d
    2d34:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    2d38:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    2d3c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2d40:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    2d44:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    2d48:	00656e69 	rsbeq	r6, r5, r9, ror #28
    2d4c:	705c3a63 	subsvc	r3, ip, r3, ror #20
    2d50:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    2d54:	66206d61 	strtvs	r6, [r0], -r1, ror #26
    2d58:	73656c69 	cmnvc	r5, #26880	; 0x6900
    2d5c:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
    2d60:	675c2936 	smmlarvs	ip, r6, r9, r2
    2d64:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
    2d68:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    2d6c:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
    2d70:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
    2d74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    2d78:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
    2d7c:	30322038 	eorscc	r2, r2, r8, lsr r0
    2d80:	33713431 	cmncc	r1, #822083584	; 0x31000000
    2d84:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    2d88:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    2d8c:	61652d65 	cmnvs	r5, r5, ror #26
    2d90:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    2d94:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2d98:	63006564 	movwvs	r6, #1380	; 0x564
    2d9c:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    2da0:	6172676f 	cmnvs	r2, pc, ror #14
    2da4:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    2da8:	2073656c 	rsbscs	r6, r3, ip, ror #10
    2dac:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    2db0:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    2db4:	6f742075 	svcvs	0x00742075
    2db8:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    2dbc:	206d7261 	rsbcs	r7, sp, r1, ror #4
    2dc0:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    2dc4:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    2dc8:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    2dcc:	31303220 	teqcc	r0, r0, lsr #4
    2dd0:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    2dd4:	5c62696c 	stclpl	9, cr6, [r2], #-432	; 0xfffffe50
    2dd8:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
    2ddc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    2de0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    2de4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    2de8:	2e345c69 	cdpcs	12, 3, cr5, cr4, cr9, {3}
    2dec:	5c342e38 	ldcpl	14, cr2, [r4], #-224	; 0xffffff20
    2df0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2df4:	00656475 	rsbeq	r6, r5, r5, ror r4
    2df8:	61687300 	cmnvs	r8, r0, lsl #6
    2dfc:	2e323135 	mrccs	1, 1, r3, cr2, cr5, {1}
    2e00:	00010063 	andeq	r0, r1, r3, rrx
    2e04:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    2e08:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    2e0c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2e10:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    2e14:	00020068 	andeq	r0, r2, r8, rrx
    2e18:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    2e1c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    2e20:	00030068 	andeq	r0, r3, r8, rrx
    2e24:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    2e28:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    2e2c:	00040068 	andeq	r0, r4, r8, rrx
    2e30:	61687300 	cmnvs	r8, r0, lsl #6
    2e34:	2e323135 	mrccs	1, 1, r3, cr2, cr5, {1}
    2e38:	00010068 	andeq	r0, r1, r8, rrx
    2e3c:	05000000 	streq	r0, [r0, #-0]
    2e40:	0056b402 	subseq	fp, r6, r2, lsl #8
    2e44:	00e40308 	rsceq	r0, r4, r8, lsl #6
    2e48:	5a033c01 	bpl	d1e54 <__Stack_Size+0xd1654>
    2e4c:	839f2158 	orrshi	r2, pc, #88, 2
    2e50:	bb1308f3 	bllt	4c5224 <__Stack_Size+0x4c4a24>
    2e54:	662603bb 			; <UNDEFINED> instruction: 0x662603bb
    2e58:	03205a03 	teqeq	r0, #12288	; 0x3000
    2e5c:	2d212e24 	stccs	14, cr2, [r1, #-144]!	; 0xffffff70
    2e60:	2d1f2127 	ldfcss	f2, [pc, #-156]	; 2dcc <__Stack_Size+0x25cc>
    2e64:	2f2c2f21 	svccs	0x002c2f21
    2e68:	46321c33 			; <UNDEFINED> instruction: 0x46321c33
    2e6c:	7a03232f 	bvc	cbb30 <__Stack_Size+0xcb330>
    2e70:	2b2b2620 	blcs	acc6f8 <__Stack_Size+0xacbef8>
    2e74:	1c222f32 	stcne	15, cr2, [r2], #-200	; 0xffffff38
    2e78:	3246312f 	subcc	r3, r6, #-1073741813	; 0xc000000b
    2e7c:	03207903 	teqeq	r0, #49152	; 0xc000
    2e80:	2f2a2009 	svccs	0x002a2009
    2e84:	21494c1f 	cmpcs	r9, pc, lsl ip
    2e88:	2f3b4d2b 	svccs	0x003b4d2b
    2e8c:	08581903 	ldmdaeq	r8, {r0, r1, r8, fp, ip}^
    2e90:	0402006a 	streq	r0, [r2], #-106	; 0x6a
    2e94:	2e670302 	cdpcs	3, 6, cr0, cr7, cr2, {0}
    2e98:	02040200 	andeq	r0, r4, #0, 4
    2e9c:	003c6603 	eorseq	r6, ip, r3, lsl #12
    2ea0:	03020402 	movweq	r0, #9218	; 0x2402
    2ea4:	0200ba1b 	andeq	fp, r0, #110592	; 0x1b000
    2ea8:	65030204 	strvs	r0, [r3, #-516]	; 0x204
    2eac:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    2eb0:	2e1b0302 	cdpcs	3, 1, cr0, cr11, cr2, {0}
    2eb4:	02040200 	andeq	r0, r4, #0, 4
    2eb8:	002e6503 	eoreq	r6, lr, r3, lsl #10
    2ebc:	03020402 	movweq	r0, #9218	; 0x2402
    2ec0:	02003c1b 	andeq	r3, r0, #6912	; 0x1b00
    2ec4:	65030204 	strvs	r0, [r3, #-516]	; 0x204
    2ec8:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    2ecc:	2e1b0302 	cdpcs	3, 1, cr0, cr11, cr2, {0}
    2ed0:	02040200 	andeq	r0, r4, #0, 4
    2ed4:	002e6503 	eoreq	r6, lr, r3, lsl #10
    2ed8:	03020402 	movweq	r0, #9218	; 0x2402
    2edc:	0200201f 	andeq	r2, r0, #31
    2ee0:	001c0204 	andseq	r0, ip, r4, lsl #4
    2ee4:	03020402 	movweq	r0, #9218	; 0x2402
    2ee8:	02002065 	andeq	r2, r0, #101	; 0x65
    2eec:	1f030204 	svcne	0x00030204
    2ef0:	0402003c 	streq	r0, [r2], #-60	; 0x3c
    2ef4:	2e610302 	cdpcs	3, 6, cr0, cr1, cr2, {0}
    2ef8:	02040200 	andeq	r0, r4, #0, 4
    2efc:	00661f03 	rsbeq	r1, r6, r3, lsl #30
    2f00:	03020402 	movweq	r0, #9218	; 0x2402
    2f04:	02002061 	andeq	r2, r0, #97	; 0x61
    2f08:	1c030204 	sfmne	f0, 4, [r3], {4}
    2f0c:	0402003c 	streq	r0, [r2], #-60	; 0x3c
    2f10:	3c640302 	stclcc	3, cr0, [r4], #-8
    2f14:	02040200 	andeq	r0, r4, #0, 4
    2f18:	00581c03 	subseq	r1, r8, r3, lsl #24
    2f1c:	03020402 	movweq	r0, #9218	; 0x2402
    2f20:	02002e64 	andeq	r2, r0, #100, 28	; 0x640
    2f24:	1f030204 	svcne	0x00030204
    2f28:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    2f2c:	20610302 	rsbcs	r0, r1, r2, lsl #6
    2f30:	02040200 	andeq	r0, r4, #0, 4
    2f34:	00581c03 	subseq	r1, r8, r3, lsl #24
    2f38:	33020402 	movwcc	r0, #9218	; 0x2402
    2f3c:	02040200 	andeq	r0, r4, #0, 4
    2f40:	0402002c 	streq	r0, [r2], #-44	; 0x2c
    2f44:	20610302 	rsbcs	r0, r1, r2, lsl #6
    2f48:	02040200 	andeq	r0, r4, #0, 4
    2f4c:	004a1f03 	subeq	r1, sl, r3, lsl #30
    2f50:	5a020402 	bpl	83f60 <__Stack_Size+0x83760>
    2f54:	02040200 	andeq	r0, r4, #0, 4
    2f58:	0402001e 	streq	r0, [r2], #-30
    2f5c:	02002202 	andeq	r2, r0, #536870912	; 0x20000000
    2f60:	5f030204 	svcpl	0x00030204
    2f64:	0402003c 	streq	r0, [r2], #-60	; 0x3c
    2f68:	d61e0302 	ldrle	r0, [lr], -r2, lsl #6
    2f6c:	02040200 	andeq	r0, r4, #0, 4
    2f70:	0402006d 	streq	r0, [r2], #-109	; 0x6d
    2f74:	02002a02 	andeq	r2, r0, #8192	; 0x2000
    2f78:	00320204 	eorseq	r0, r2, r4, lsl #4
    2f7c:	03020402 	movweq	r0, #9218	; 0x2402
    2f80:	0200ba11 	andeq	fp, r0, #69632	; 0x11000
    2f84:	67030204 	strvs	r0, [r3, -r4, lsl #4]
    2f88:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    2f8c:	58190302 	ldmdapl	r9, {r1, r8, r9}
    2f90:	02040200 	andeq	r0, r4, #0, 4
    2f94:	00ac4a03 	adceq	r4, ip, r3, lsl #20
    2f98:	03020402 	movweq	r0, #9218	; 0x2402
    2f9c:	02008236 	andeq	r8, r0, #1610612739	; 0x60000003
    2fa0:	4a030204 	bmi	c37b8 <__Stack_Size+0xc2fb8>
    2fa4:	04020020 	streq	r0, [r2], #-32
    2fa8:	2e360302 	cdpcs	3, 3, cr0, cr6, cr2, {0}
    2fac:	02040200 	andeq	r0, r4, #0, 4
    2fb0:	002e4a03 	eoreq	r4, lr, r3, lsl #20
    2fb4:	03020402 	movweq	r0, #9218	; 0x2402
    2fb8:	02002e21 	andeq	r2, r0, #528	; 0x210
    2fbc:	00650204 	rsbeq	r0, r5, r4, lsl #4
    2fc0:	03020402 	movweq	r0, #9218	; 0x2402
    2fc4:	02003c16 	andeq	r3, r0, #5632	; 0x1600
    2fc8:	6a030204 	bvs	c37e0 <__Stack_Size+0xc2fe0>
    2fcc:	04020020 	streq	r0, [r2], #-32
    2fd0:	2e160302 	cdpcs	3, 1, cr0, cr6, cr2, {0}
    2fd4:	02040200 	andeq	r0, r4, #0, 4
    2fd8:	004a7003 	subeq	r7, sl, r3
    2fdc:	03020402 	movweq	r0, #9218	; 0x2402
    2fe0:	0200d65a 	andeq	sp, r0, #94371840	; 0x5a00000
    2fe4:	27030204 	strcs	r0, [r3, -r4, lsl #4]
    2fe8:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    2fec:	2e590302 	cdpcs	3, 5, cr0, cr9, cr2, {0}
    2ff0:	02040200 	andeq	r0, r4, #0, 4
    2ff4:	002e2703 	eoreq	r2, lr, r3, lsl #14
    2ff8:	03020402 	movweq	r0, #9218	; 0x2402
    2ffc:	02003c59 	andeq	r3, r0, #22784	; 0x5900
    3000:	27030204 	strcs	r0, [r3, -r4, lsl #4]
    3004:	04020020 	streq	r0, [r2], #-32
    3008:	2e590302 	cdpcs	3, 5, cr0, cr9, cr2, {0}
    300c:	02040200 	andeq	r0, r4, #0, 4
    3010:	002e2703 	eoreq	r2, lr, r3, lsl #14
    3014:	03020402 	movweq	r0, #9218	; 0x2402
    3018:	02003c59 	andeq	r3, r0, #22784	; 0x5900
    301c:	28030204 	stmdacs	r3, {r2, r9}
    3020:	0402004a 	streq	r0, [r2], #-74	; 0x4a
    3024:	2e580302 	cdpcs	3, 5, cr0, cr8, cr2, {0}
    3028:	02040200 	andeq	r0, r4, #0, 4
    302c:	003c2703 	eorseq	r2, ip, r3, lsl #14
    3030:	2f020402 	svccs	0x00020402
    3034:	02040200 	andeq	r0, r4, #0, 4
    3038:	002e5803 	eoreq	r5, lr, r3, lsl #16
    303c:	03020402 	movweq	r0, #9218	; 0x2402
    3040:	02002e28 	andeq	r2, r0, #40, 28	; 0x280
    3044:	58030204 	stmdapl	r3, {r2, r9}
    3048:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    304c:	3c280302 	stccc	3, cr0, [r8], #-8
    3050:	02040200 	andeq	r0, r4, #0, 4
    3054:	00205803 	eoreq	r5, r0, r3, lsl #16
    3058:	03020402 	movweq	r0, #9218	; 0x2402
    305c:	02003c24 	andeq	r3, r0, #36, 24	; 0x2400
    3060:	12030204 	andne	r0, r3, #4, 4	; 0x40000000
    3064:	040200ba 	streq	r0, [r2], #-186	; 0xba
    3068:	2e710302 	cdpcs	3, 7, cr0, cr1, cr2, {0}
    306c:	02040200 	andeq	r0, r4, #0, 4
    3070:	002e0f03 	eoreq	r0, lr, r3, lsl #30
    3074:	03020402 	movweq	r0, #9218	; 0x2402
    3078:	02002e71 	andeq	r2, r0, #1808	; 0x710
    307c:	004b0204 	subeq	r0, fp, r4, lsl #4
    3080:	2d020402 	cfstrscs	mvf0, [r2, #-8]
    3084:	02040200 	andeq	r0, r4, #0, 4
    3088:	0402003d 	streq	r0, [r2], #-61	; 0x3d
    308c:	02009d02 	andeq	r9, r0, #2, 26	; 0x80
    3090:	005a0204 	subseq	r0, sl, r4, lsl #4
    3094:	5e020402 	cdppl	4, 0, cr0, cr2, cr2, {0}
    3098:	02040200 	andeq	r0, r4, #0, 4
    309c:	0402005c 	streq	r0, [r2], #-92	; 0x5c
    30a0:	3c650302 	stclcc	3, cr0, [r5], #-8
    30a4:	59f22203 	ldmibpl	r2!, {r0, r1, r9, sp}^
    30a8:	2f318067 	svccs	0x00318067
    30ac:	3e59302b 	cdpcc	0, 5, cr3, cr9, cr11, {1}
    30b0:	312b671f 	teqcc	fp, pc, lsl r7
    30b4:	7a032d2f 	bvc	ce578 <__Stack_Size+0xcdd78>
    30b8:	7d2f3420 	cfstrsvc	mvf3, [pc, #-128]!	; 3040 <__Stack_Size+0x2840>
    30bc:	2f2b312c 	svccs	0x002b312c
    30c0:	2f312c30 	svccs	0x00312c30
    30c4:	022f2f2f 	eoreq	r2, pc, #47, 30	; 0xbc
    30c8:	01010006 	tsteq	r1, r6
    30cc:	48020500 	stmdami	r2, {r8, sl}
    30d0:	0308005b 	movweq	r0, #32859	; 0x805b
    30d4:	2f0101a6 	svccs	0x000101a6
    30d8:	5b3d201f 	blpl	f4b15c <__Stack_Size+0xf4a95c>
    30dc:	9a03363e 	bls	d09dc <__Stack_Size+0xd01dc>
    30e0:	1e22207f 	mcrne	0, 1, r2, cr2, cr15, {3}
    30e4:	00e30324 	rsceq	r0, r3, r4, lsr #6
    30e8:	7f98032e 	svcvc	0x0098032e
    30ec:	3030302e 	eorscc	r3, r0, lr, lsr #32
    30f0:	30303030 	eorscc	r3, r0, r0, lsr r0
    30f4:	2e00da03 	vmlacs.f32	s26, s0, s6
    30f8:	3c75032f 	ldclcc	3, cr0, [r5], #-188	; 0xffffff44
    30fc:	301e3e59 	andscc	r3, lr, r9, asr lr
    3100:	06024b21 	streq	r4, [r2], -r1, lsr #22
    3104:	00010100 	andeq	r0, r1, r0, lsl #2
    3108:	5bd00205 	blpl	ff403924 <BootRAM+0xe3740c5>
    310c:	ba030800 	blt	c5114 <__Stack_Size+0xc4914>
    3110:	1d310101 	ldfnes	f0, [r1, #-4]!
    3114:	5c233120 	stfpls	f3, [r3], #-128	; 0xffffff80
    3118:	00243824 	eoreq	r3, r4, r4, lsr #16
    311c:	03010402 	movweq	r0, #5122	; 0x1402
    3120:	08062e0e 	stmdaeq	r6, {r1, r2, r3, r9, sl, fp, sp}
    3124:	034b0612 	movteq	r0, #46610	; 0xb612
    3128:	84587ef7 	ldrbhi	r7, [r8], #-3831	; 0xef7
    312c:	20018703 	andcs	r8, r1, r3, lsl #14
    3130:	207ef903 	rsbscs	pc, lr, r3, lsl #18
    3134:	3022483e 	eorcc	r4, r2, lr, lsr r8
    3138:	301e2646 	andscc	r2, lr, r6, asr #12
    313c:	7703683e 	smladxvc	r3, lr, r8, r6
    3140:	2e090374 	mcrcs	3, 0, r0, cr9, cr4, {3}
    3144:	032e7703 	teqeq	lr, #786432	; 0xc0000
    3148:	7203200a 	andvc	r2, r3, #10
    314c:	2e0c032e 	cdpcs	3, 0, cr0, cr12, cr14, {1}
    3150:	032e7403 	teqeq	lr, #50331648	; 0x3000000
    3154:	1e1e200a 	cdpne	0, 1, cr2, cr14, cr10, {0}
    3158:	0187032a 	orreq	r0, r7, sl, lsr #6
    315c:	7f850320 	svcvc	0x00850320
    3160:	00fb0320 	rscseq	r0, fp, r0, lsr #6
    3164:	4235082e 	eorsmi	r0, r5, #3014656	; 0x2e0000
    3168:	033c6c03 	teqeq	ip, #768	; 0x300
    316c:	4c587eff 	mrrcmi	14, 15, r7, r8, cr15
    3170:	2c302c5a 	ldccs	12, cr2, [r0], #-360	; 0xfffffe98
    3174:	2c4c2c32 	mcrrcs	12, 3, r2, ip, cr2
    3178:	03302c32 	teqeq	r0, #12800	; 0x3200
    317c:	0b034a77 	bleq	d5b60 <__Stack_Size+0xd5360>
    3180:	0334462e 	teqeq	r4, #48234496	; 0x2e00000
    3184:	2c343c75 	ldccs	12, cr3, [r4], #-468	; 0xfffffe2c
    3188:	2e7a0335 	mrccs	3, 3, r0, cr10, cr5, {1}
    318c:	2e00f603 	cfmadd32cs	mvax0, mvfx15, mvfx0, mvfx3
    3190:	2e7f8703 	cdpcs	7, 7, cr8, cr15, cr3, {0}
    3194:	03423030 	movteq	r3, #8240	; 0x2030
    3198:	31342e76 	teqcc	r4, r6, ror lr
    319c:	00f6032d 	rscseq	r0, r6, sp, lsr #6
    31a0:	8b03212e 	blhi	cb660 <__Stack_Size+0xcae60>
    31a4:	ef03207f 	svc	0x0003207f
    31a8:	91032000 	mrsls	r2, (UNDEF: 3)
    31ac:	f403587f 	vst2.16	{d5-d6}, [r3 :256]
    31b0:	1f302e00 	svcne	0x00302e00
    31b4:	8a031f3d 	bhi	caeb0 <__Stack_Size+0xca6b0>
    31b8:	f6033c7f 			; <UNDEFINED> instruction: 0xf6033c7f
    31bc:	2b302e00 	blcs	c0e9c4 <__Stack_Size+0xc0e1c4>
    31c0:	11032b31 	tstne	r3, r1, lsr fp
    31c4:	7eee033c 	mcrvc	3, 7, r0, cr14, cr12, {1}
    31c8:	302c5a82 	eorcc	r5, ip, r2, lsl #21
    31cc:	4c4c684c 	mcrrmi	8, 4, r6, ip, cr12
    31d0:	2e73035a 	mrccs	3, 3, r0, cr3, cr10, {2}
    31d4:	302e0b03 	eorcc	r0, lr, r3, lsl #22
    31d8:	034a7303 	movteq	r7, #41731	; 0xa303
    31dc:	2c322e0a 	ldccs	14, cr2, [r2], #-40	; 0xffffffd8
    31e0:	032d1e30 	teqeq	sp, #48, 28	; 0x300
    31e4:	0b032e77 	bleq	cebc8 <__Stack_Size+0xce3c8>
    31e8:	2e77032e 	cdpcs	3, 7, cr0, cr7, cr14, {1}
    31ec:	8c033030 	stchi	0, cr3, [r3], {48}	; 0x30
    31f0:	fa032e01 	blx	ce9fc <__Stack_Size+0xce1fc>
    31f4:	8603207e 			; <UNDEFINED> instruction: 0x8603207e
    31f8:	f9032e01 			; <UNDEFINED> instruction: 0xf9032e01
    31fc:	8703207e 	smlsdxhi	r3, lr, r0, r2
    3200:	02302e01 	eorseq	r2, r0, #1, 28
    3204:	01010003 	tsteq	r1, r3
    3208:	000000c0 	andeq	r0, r0, r0, asr #1
    320c:	00340002 	eorseq	r0, r4, r2
    3210:	01020000 	mrseq	r0, (UNDEF: 2)
    3214:	000d0efb 	strdeq	r0, [sp], -fp
    3218:	01010101 	tsteq	r1, r1, lsl #2
    321c:	01000000 	mrseq	r0, (UNDEF: 0)
    3220:	62010000 	andvs	r0, r1, #0
    3224:	36657361 	strbtcc	r7, [r5], -r1, ror #6
    3228:	63000034 	movwvs	r0, #52	; 0x34
    322c:	6f636564 	svcvs	0x00636564
    3230:	632e6564 	teqvs	lr, #100, 10	; 0x19000000
    3234:	00000100 	andeq	r0, r0, r0, lsl #2
    3238:	63656463 	cmnvs	r5, #1660944384	; 0x63000000
    323c:	2e65646f 	cdpcs	4, 6, cr6, cr5, cr15, {3}
    3240:	00010068 	andeq	r0, r1, r8, rrx
    3244:	05000000 	streq	r0, [r0, #-0]
    3248:	00000002 	andeq	r0, r0, r2
    324c:	010a0300 	mrseq	r0, (UNDEF: 58)
    3250:	3b212f15 	blcc	84eeac <__Stack_Size+0x84e6ac>
    3254:	00040230 	andeq	r0, r4, r0, lsr r2
    3258:	05000101 	streq	r0, [r0, #-257]	; 0x101
    325c:	00000002 	andeq	r0, r0, r2
    3260:	01130300 	tsteq	r3, r0, lsl #6
    3264:	02022f13 	andeq	r2, r2, #19, 30	; 0x4c
    3268:	00010100 	andeq	r0, r1, r0, lsl #2
    326c:	00000205 	andeq	r0, r0, r5, lsl #4
    3270:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
    3274:	1b252e01 	blne	94ea80 <__Stack_Size+0x94e280>
    3278:	79032225 	stmdbvc	r3, {r0, r2, r5, r9, sp}
    327c:	7a033520 	bvc	d0704 <__Stack_Size+0xcff04>
    3280:	200c0374 	andcs	r0, ip, r4, ror r3
    3284:	4c262c3e 	stcmi	12, cr2, [r6], #-248	; 0xffffff08
    3288:	7203301e 	andvc	r3, r3, #30
    328c:	207a032e 	rsbscs	r0, sl, lr, lsr #6
    3290:	4c201703 	stcmi	7, cr1, [r0], #-12
    3294:	211f212f 	tstcs	pc, pc, lsr #2
    3298:	1d4b4c30 	stclne	12, cr4, [fp, #-192]	; 0xffffff40
    329c:	66033d30 			; <UNDEFINED> instruction: 0x66033d30
    32a0:	207a032e 	rsbscs	r0, sl, lr, lsr #6
    32a4:	4c202303 	stcmi	3, cr2, [r0], #-12
    32a8:	212d2f2f 	teqcs	sp, pc, lsr #30
    32ac:	1d594c30 	ldclne	12, cr4, [r9, #-192]	; 0xffffff40
    32b0:	5a034b30 	bpl	d5f78 <__Stack_Size+0xd5778>
    32b4:	207a033c 	rsbscs	r0, sl, ip, lsr r3
    32b8:	4c202f03 	stcmi	15, cr2, [r0], #-12
    32bc:	212d2f2f 	teqcs	sp, pc, lsr #30
    32c0:	30563e30 	subscc	r3, r6, r0, lsr lr
    32c4:	0221234b 	eoreq	r2, r1, #738197505	; 0x2c000001
    32c8:	01010002 	tsteq	r1, r2
    32cc:	000000db 	ldrdeq	r0, [r0], -fp
    32d0:	00340002 	eorseq	r0, r4, r2
    32d4:	01020000 	mrseq	r0, (UNDEF: 2)
    32d8:	000d0efb 	strdeq	r0, [sp], -fp
    32dc:	01010101 	tsteq	r1, r1, lsl #2
    32e0:	01000000 	mrseq	r0, (UNDEF: 0)
    32e4:	62010000 	andvs	r0, r1, #0
    32e8:	36657361 	strbtcc	r7, [r5], -r1, ror #6
    32ec:	63000034 	movwvs	r0, #52	; 0x34
    32f0:	6f636e65 	svcvs	0x00636e65
    32f4:	632e6564 	teqvs	lr, #100, 10	; 0x19000000
    32f8:	00000100 	andeq	r0, r0, r0, lsl #2
    32fc:	636e6563 	cmnvs	lr, #415236096	; 0x18c00000
    3300:	2e65646f 	cdpcs	4, 6, cr6, cr5, cr15, {3}
    3304:	00010068 	andeq	r0, r1, r8, rrx
    3308:	05000000 	streq	r0, [r0, #-0]
    330c:	005e6802 	subseq	r6, lr, r2, lsl #16
    3310:	010c0308 	tsteq	ip, r8, lsl #6
    3314:	02212f13 	eoreq	r2, r1, #19, 30	; 0x4c
    3318:	01010002 	tsteq	r1, r2
    331c:	74020500 	strvc	r0, [r2], #-1280	; 0x500
    3320:	0308005e 	movweq	r0, #32862	; 0x805e
    3324:	21140113 	tstcs	r4, r3, lsl r1
    3328:	0302223b 	movweq	r2, #8763	; 0x223b
    332c:	00010100 	andeq	r0, r1, r0, lsl #2
    3330:	5e840205 	cdppl	2, 8, cr0, cr4, cr5, {0}
    3334:	1a030800 	bne	c533c <__Stack_Size+0xc4b3c>
    3338:	22272e01 	eorcs	r2, r7, #1, 28
    333c:	03207703 	teqeq	r0, #786432	; 0xc0000
    3340:	77032009 	strvc	r2, [r3, -r9]
    3344:	03352220 	teqeq	r5, #32, 4
    3348:	301e4a7a 	andscc	r4, lr, sl, ror sl
    334c:	31200b03 	teqcc	r0, r3, lsl #22
    3350:	3e21211f 	mcrcc	1, 1, r2, cr1, cr15, {0}
    3354:	2f226422 	svccs	0x00226422
    3358:	3c6f0339 	stclcc	3, cr0, [pc], #-228	; 327c <__Stack_Size+0x2a7c>
    335c:	31201603 	teqcc	r0, r3, lsl #12
    3360:	3e21211f 	mcrcc	1, 1, r2, cr1, cr15, {0}
    3364:	212d753e 	teqcs	sp, lr, lsr r5
    3368:	211f3122 	tstcs	pc, r2, lsr #2
    336c:	4b4c3e21 	blmi	1312bf8 <__Stack_Size+0x13123f8>
    3370:	2f4c222d 	svccs	0x004c222d
    3374:	411d211f 	tstmi	sp, pc, lsl r1
    3378:	332f1f2f 	teqcc	pc, #47, 30	; 0xbc
    337c:	00030221 	andeq	r0, r3, r1, lsr #4
    3380:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3384:	005f5a02 	subseq	r5, pc, r2, lsl #20
    3388:	00d70308 	sbcseq	r0, r7, r8, lsl #6
    338c:	231d1501 	tstcs	sp, #4194304	; 0x400000
    3390:	4b44231d 	blmi	110c00c <__Stack_Size+0x110b80c>
    3394:	03212f1f 	teqeq	r1, #31, 30	; 0x7c
    3398:	1f3d2079 	svcne	0x003d2079
    339c:	032f2121 	teqeq	pc, #1073741832	; 0x40000008
    33a0:	0e03207a 	mcreq	0, 0, r2, cr3, cr10, {3}
    33a4:	02024d20 	andeq	r4, r2, #32, 26	; 0x800
    33a8:	63010100 	movwvs	r0, #4352	; 0x1100
    33ac:	02000002 	andeq	r0, r0, #2
    33b0:	0001c600 	andeq	ip, r1, r0, lsl #12
    33b4:	fb010200 	blx	43bbe <__Stack_Size+0x433be>
    33b8:	01000d0e 	tsteq	r0, lr, lsl #26
    33bc:	00010101 	andeq	r0, r1, r1, lsl #2
    33c0:	00010000 	andeq	r0, r1, r0
    33c4:	3a630100 	bcc	18c37cc <__Stack_Size+0x18c2fcc>
    33c8:	6f72705c 	svcvs	0x0072705c
    33cc:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    33d0:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    33d4:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    33d8:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    33dc:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    33e0:	6f6f7420 	svcvs	0x006f7420
    33e4:	6120736c 	teqvs	r0, ip, ror #6
    33e8:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    33ec:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    33f0:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    33f4:	20382e34 	eorscs	r2, r8, r4, lsr lr
    33f8:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    33fc:	6c5c3371 	mrrcvs	3, 7, r3, ip, cr1
    3400:	675c6269 	ldrbvs	r6, [ip, -r9, ror #4]
    3404:	615c6363 	cmpvs	ip, r3, ror #6
    3408:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    340c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3410:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3414:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    3418:	695c342e 	ldmdbvs	ip, {r1, r2, r3, r5, sl, ip, sp}^
    341c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    3420:	63006564 	movwvs	r6, #1380	; 0x564
    3424:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    3428:	6172676f 	cmnvs	r2, pc, ror #14
    342c:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    3430:	2073656c 	rsbscs	r6, r3, ip, ror #10
    3434:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    3438:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    343c:	6f742075 	svcvs	0x00742075
    3440:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    3444:	206d7261 	rsbcs	r7, sp, r1, ror #4
    3448:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    344c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    3450:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    3454:	31303220 	teqcc	r0, r0, lsr #4
    3458:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    345c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    3460:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    3464:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    3468:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    346c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    3470:	616d5c65 	cmnvs	sp, r5, ror #24
    3474:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    3478:	3a630065 	bcc	18c3614 <__Stack_Size+0x18c2e14>
    347c:	6f72705c 	svcvs	0x0072705c
    3480:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    3484:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    3488:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    348c:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    3490:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    3494:	6f6f7420 	svcvs	0x006f7420
    3498:	6120736c 	teqvs	r0, ip, ror #6
    349c:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    34a0:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    34a4:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    34a8:	20382e34 	eorscs	r2, r8, r4, lsr lr
    34ac:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    34b0:	615c3371 	cmpvs	ip, r1, ror r3
    34b4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    34b8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    34bc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    34c0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    34c4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    34c8:	732f2e00 	teqvc	pc, #0, 28
    34cc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    34d0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    34d4:	322f2e00 	eorcc	r2, pc, #0, 28
    34d8:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    34dc:	6d690000 	stclvs	0, cr0, [r9, #-0]
    34e0:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
    34e4:	00000063 	andeq	r0, r0, r3, rrx
    34e8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    34ec:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    34f0:	00010068 	andeq	r0, r1, r8, rrx
    34f4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    34f8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    34fc:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3500:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    3504:	00020068 	andeq	r0, r2, r8, rrx
    3508:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    350c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3510:	00030068 	andeq	r0, r3, r8, rrx
    3514:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3518:	31663233 	cmncc	r6, r3, lsr r2
    351c:	745f7830 	ldrbvc	r7, [pc], #-2096	; 3524 <__Stack_Size+0x2d24>
    3520:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    3524:	00040068 	andeq	r0, r4, r8, rrx
    3528:	72616800 	rsbvc	r6, r1, #0, 16
    352c:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
    3530:	00682e65 	rsbeq	r2, r8, r5, ror #28
    3534:	73000000 	movwvc	r0, #0
    3538:	35326168 	ldrcc	r6, [r2, #-360]!	; 0x168
    353c:	00682e36 	rsbeq	r2, r8, r6, lsr lr
    3540:	69000005 	stmdbvs	r0, {r0, r2}
    3544:	6567616d 	strbvs	r6, [r7, #-365]!	; 0x16d
    3548:	0000682e 	andeq	r6, r0, lr, lsr #16
    354c:	73750000 	cmnvc	r5, #0
    3550:	00682e62 	rsbeq	r2, r8, r2, ror #28
    3554:	73000000 	movwvc	r0, #0
    3558:	6f696474 	svcvs	0x00696474
    355c:	0300682e 	movweq	r6, #2094	; 0x82e
    3560:	64650000 	strbtvs	r0, [r5], #-0
    3564:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    3568:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    356c:	74730000 	ldrbtvc	r0, [r3], #-0
    3570:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    3574:	0300682e 	movweq	r6, #2094	; 0x82e
    3578:	00000000 	andeq	r0, r0, r0
    357c:	5f9c0205 	svcpl	0x009c0205
    3580:	25030800 	strcs	r0, [r3, #-2048]	; 0x800
    3584:	3d3d2201 	lfmcc	f2, 4, [sp, #-4]!
    3588:	2d3e3d3d 	ldccs	13, cr3, [lr, #-244]!	; 0xffffff0c
    358c:	01001002 	tsteq	r0, r2
    3590:	02050001 	andeq	r0, r5, #1
    3594:	08005fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3598:	3c013003 	stccc	0, cr3, [r1], {3}
    359c:	4c251b33 	stcmi	11, cr1, [r5], #-204	; 0xffffff34
    35a0:	0b03591f 	bleq	d9a24 <__Stack_Size+0xd9224>
    35a4:	04020058 	streq	r0, [r2], #-88	; 0x58
    35a8:	09034b01 	stmdbeq	r3, {r0, r8, r9, fp, lr}
    35ac:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    35b0:	02004c01 	andeq	r4, r0, #256	; 0x100
    35b4:	003d0104 	eorseq	r0, sp, r4, lsl #2
    35b8:	2f010402 	svccs	0x00010402
    35bc:	3021303e 	eorcc	r3, r1, lr, lsr r0
    35c0:	29254c30 	stmdbcs	r5!, {r4, r5, sl, fp, lr}
    35c4:	31401c25 	cmpcc	r0, r5, lsr #24
    35c8:	2d215a42 	vstmdbcs	r1!, {s10-s75}
    35cc:	02005421 	andeq	r5, r0, #553648128	; 0x21000000
    35d0:	31250104 	teqcc	r5, r4, lsl #2
    35d4:	02006721 	andeq	r6, r0, #8650752	; 0x840000
    35d8:	00300104 	eorseq	r0, r0, r4, lsl #2
    35dc:	59010402 	stmdbpl	r1, {r1, sl}
    35e0:	01040200 	mrseq	r0, R12_usr
    35e4:	04020059 	streq	r0, [r2], #-89	; 0x59
    35e8:	02006801 	andeq	r6, r0, #65536	; 0x10000
    35ec:	003e0104 	eorseq	r0, lr, r4, lsl #2
    35f0:	21010402 	tstcs	r1, r2, lsl #8
    35f4:	3d2e0d03 	stccc	13, cr0, [lr, #-12]!
    35f8:	4c593ebd 	mrrcmi	14, 11, r3, r9, cr13
    35fc:	4e5d504b 	cdpmi	0, 5, cr5, cr13, cr11, {2}
    3600:	311d231d 	tstcc	sp, sp, lsl r3
    3604:	3e2f75a0 	cfsh64cc	mvdx7, mvdx15, #-48
    3608:	21312130 	teqcs	r1, r0, lsr r1
    360c:	00180224 	andseq	r0, r8, r4, lsr #4
    3610:	04c70101 	strbeq	r0, [r7], #257	; 0x101
    3614:	00020000 	andeq	r0, r2, r0
    3618:	00000045 	andeq	r0, r0, r5, asr #32
    361c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3620:	0101000d 	tsteq	r1, sp
    3624:	00000101 	andeq	r0, r0, r1, lsl #2
    3628:	00000100 	andeq	r0, r0, r0, lsl #2
    362c:	62737501 	rsbsvs	r7, r3, #4194304	; 0x400000
    3630:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    3634:	73750000 	cmnvc	r5, #0
    3638:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xf62
    363c:	632e7367 	teqvs	lr, #-1677721599	; 0x9c000001
    3640:	00000100 	andeq	r0, r0, r0, lsl #2
    3644:	5f627375 	svcpl	0x00627375
    3648:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    364c:	0100682e 	tsteq	r0, lr, lsr #16
    3650:	73750000 	cmnvc	r5, #0
    3654:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xf62
    3658:	682e7367 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
    365c:	00000100 	andeq	r0, r0, r0, lsl #2
    3660:	02050000 	andeq	r0, r5, #0
    3664:	00000000 	andeq	r0, r0, r0
    3668:	13012203 	movwne	r2, #4611	; 0x1203
    366c:	01000602 	tsteq	r0, r2, lsl #12
    3670:	02050001 	andeq	r0, r5, #1
    3674:	00000000 	andeq	r0, r0, r0
    3678:	13012e03 	movwne	r2, #7683	; 0x1e03
    367c:	0004022f 	andeq	r0, r4, pc, lsr #4
    3680:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3684:	00000002 	andeq	r0, r0, r2
    3688:	013a0300 	teqeq	sl, r0, lsl #6
    368c:	00060213 	andeq	r0, r6, r3, lsl r2
    3690:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3694:	00000002 	andeq	r0, r0, r2
    3698:	00c60300 	sbceq	r0, r6, r0, lsl #6
    369c:	022f1301 	eoreq	r1, pc, #67108864	; 0x4000000
    36a0:	01010004 	tsteq	r1, r4
    36a4:	00020500 	andeq	r0, r2, r0, lsl #10
    36a8:	03000000 	movweq	r0, #0
    36ac:	130100d2 	movwne	r0, #4306	; 0x10d2
    36b0:	0004022f 	andeq	r0, r4, pc, lsr #4
    36b4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    36b8:	00000002 	andeq	r0, r0, r2
    36bc:	00de0300 	sbcseq	r0, lr, r0, lsl #6
    36c0:	06021301 	streq	r1, [r2], -r1, lsl #6
    36c4:	00010100 	andeq	r0, r1, r0, lsl #2
    36c8:	00000205 	andeq	r0, r0, r5, lsl #4
    36cc:	ea030000 	b	c36d4 <__Stack_Size+0xc2ed4>
    36d0:	2f130100 	svccs	0x00130100
    36d4:	01000402 	tsteq	r0, r2, lsl #8
    36d8:	02050001 	andeq	r0, r5, #1
    36dc:	00000000 	andeq	r0, r0, r0
    36e0:	0100f603 	tsteq	r0, r3, lsl #12
    36e4:	00080213 	andeq	r0, r8, r3, lsl r2
    36e8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    36ec:	00000002 	andeq	r0, r0, r2
    36f0:	01820300 	orreq	r0, r2, r0, lsl #6
    36f4:	022f1301 	eoreq	r1, pc, #67108864	; 0x4000000
    36f8:	01010004 	tsteq	r1, r4
    36fc:	00020500 	andeq	r0, r2, r0, lsl #10
    3700:	03000000 	movweq	r0, #0
    3704:	1301018f 	movwne	r0, #4495	; 0x118f
    3708:	01000702 	tsteq	r0, r2, lsl #14
    370c:	02050001 	andeq	r0, r5, #1
    3710:	00000000 	andeq	r0, r0, r0
    3714:	01019b03 	tsteq	r1, r3, lsl #22
    3718:	02026713 	andeq	r6, r2, #4980736	; 0x4c0000
    371c:	00010100 	andeq	r0, r1, r0, lsl #2
    3720:	00000205 	andeq	r0, r0, r5, lsl #4
    3724:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
    3728:	02130101 	andseq	r0, r3, #1073741824	; 0x40000000
    372c:	0101000e 	tsteq	r1, lr
    3730:	00020500 	andeq	r0, r2, r0, lsl #10
    3734:	03000000 	movweq	r0, #0
    3738:	130101b4 	movwne	r0, #4532	; 0x11b4
    373c:	00030267 	andeq	r0, r3, r7, ror #4
    3740:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3744:	00618c02 	rsbeq	r8, r1, r2, lsl #24
    3748:	01c10308 	biceq	r0, r1, r8, lsl #6
    374c:	15021301 	strne	r1, [r2, #-769]	; 0x301
    3750:	00010100 	andeq	r0, r1, r0, lsl #2
    3754:	00000205 	andeq	r0, r0, r5, lsl #4
    3758:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    375c:	02130101 	andseq	r0, r3, #1073741824	; 0x40000000
    3760:	01010015 	tsteq	r1, r5, lsl r0
    3764:	00020500 	andeq	r0, r2, r0, lsl #10
    3768:	03000000 	movweq	r0, #0
    376c:	030101db 	movweq	r0, #4571	; 0x11db
    3770:	c2030141 	andgt	r0, r3, #1073741840	; 0x40000010
    3774:	be035800 	cdplt	8, 0, cr5, cr3, cr0, {0}
    3778:	c203207f 	andgt	r2, r3, #127	; 0x7f
    377c:	3e222000 	cdpcc	0, 2, cr2, cr2, cr0, {0}
    3780:	00050230 	andeq	r0, r5, r0, lsr r2
    3784:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3788:	00000002 	andeq	r0, r0, r2
    378c:	01f00300 	mvnseq	r0, r0, lsl #6
    3790:	02671301 	rsbeq	r1, r7, #67108864	; 0x4000000
    3794:	01010003 	tsteq	r1, r3
    3798:	00020500 	andeq	r0, r2, r0, lsl #10
    379c:	03000000 	movweq	r0, #0
    37a0:	130101fc 	movwne	r0, #4604	; 0x11fc
    37a4:	00030267 	andeq	r0, r3, r7, ror #4
    37a8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    37ac:	00000002 	andeq	r0, r0, r2
    37b0:	02880300 	addeq	r0, r8, #0, 6
    37b4:	0f021301 	svceq	0x00021301
    37b8:	00010100 	andeq	r0, r1, r0, lsl #2
    37bc:	61b60205 			; <UNDEFINED> instruction: 0x61b60205
    37c0:	94030800 	strls	r0, [r3], #-2048	; 0x800
    37c4:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
    37c8:	0101000f 	tsteq	r1, pc
    37cc:	00020500 	andeq	r0, r2, r0, lsl #10
    37d0:	03000000 	movweq	r0, #0
    37d4:	130102a0 	movwne	r0, #4768	; 0x12a0
    37d8:	01000f02 	tsteq	r0, r2, lsl #30
    37dc:	02050001 	andeq	r0, r5, #1
    37e0:	00000000 	andeq	r0, r0, r0
    37e4:	0102ac03 	tsteq	r2, r3, lsl #24
    37e8:	000e0213 	andeq	r0, lr, r3, lsl r2
    37ec:	05000101 	streq	r0, [r0, #-257]	; 0x101
    37f0:	0061d402 	rsbeq	sp, r1, r2, lsl #8
    37f4:	02b70308 	adcseq	r0, r7, #8, 6	; 0x20000000
    37f8:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
    37fc:	00010100 	andeq	r0, r1, r0, lsl #2
    3800:	00000205 	andeq	r0, r0, r5, lsl #4
    3804:	c2030000 	andgt	r0, r3, #0
    3808:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
    380c:	0101000f 	tsteq	r1, pc
    3810:	00020500 	andeq	r0, r2, r0, lsl #10
    3814:	03000000 	movweq	r0, #0
    3818:	130102cd 	movwne	r0, #4813	; 0x12cd
    381c:	01000f02 	tsteq	r0, r2, lsl #30
    3820:	02050001 	andeq	r0, r5, #1
    3824:	00000000 	andeq	r0, r0, r0
    3828:	0102d803 	tsteq	r2, r3, lsl #16
    382c:	000e0213 	andeq	r0, lr, r3, lsl r2
    3830:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3834:	00000002 	andeq	r0, r0, r2
    3838:	02e30300 	rsceq	r0, r3, #0, 6
    383c:	02831301 	addeq	r1, r3, #67108864	; 0x4000000
    3840:	01010005 	tsteq	r1, r5
    3844:	00020500 	andeq	r0, r2, r0, lsl #10
    3848:	03000000 	movweq	r0, #0
    384c:	130102ee 	movwne	r0, #4846	; 0x12ee
    3850:	00050283 	andeq	r0, r5, r3, lsl #5
    3854:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3858:	00000002 	andeq	r0, r0, r2
    385c:	02f90300 	rscseq	r0, r9, #0, 6
    3860:	0c021301 	stceq	3, cr1, [r2], {1}
    3864:	00010100 	andeq	r0, r1, r0, lsl #2
    3868:	00000205 	andeq	r0, r0, r5, lsl #4
    386c:	84030000 	strhi	r0, [r3], #-0
    3870:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
    3874:	0101000e 	tsteq	r1, lr
    3878:	00020500 	andeq	r0, r2, r0, lsl #10
    387c:	03000000 	movweq	r0, #0
    3880:	1301038f 	movwne	r0, #5007	; 0x138f
    3884:	01001002 	tsteq	r0, r2
    3888:	02050001 	andeq	r0, r5, #1
    388c:	00000000 	andeq	r0, r0, r0
    3890:	01039a03 	tsteq	r3, r3, lsl #20
    3894:	00100213 	andseq	r0, r0, r3, lsl r2
    3898:	05000101 	streq	r0, [r0, #-257]	; 0x101
    389c:	0061f002 	rsbeq	pc, r1, r2
    38a0:	03a50308 			; <UNDEFINED> instruction: 0x03a50308
    38a4:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
    38a8:	82060104 	andhi	r0, r6, #4, 2
    38ac:	01000802 	tsteq	r0, r2, lsl #16
    38b0:	02050001 	andeq	r0, r5, #1
    38b4:	08006210 	stmdaeq	r0, {r4, r9, sp, lr}
    38b8:	0103b003 	tsteq	r3, r3
    38bc:	04020013 	streq	r0, [r2], #-19
    38c0:	02820601 	addeq	r0, r2, #1048576	; 0x100000
    38c4:	01010008 	tsteq	r1, r8
    38c8:	00020500 	andeq	r0, r2, r0, lsl #10
    38cc:	03000000 	movweq	r0, #0
    38d0:	130103bc 	movwne	r0, #5052	; 0x13bc
    38d4:	01000f02 	tsteq	r0, r2, lsl #30
    38d8:	02050001 	andeq	r0, r5, #1
    38dc:	00000000 	andeq	r0, r0, r0
    38e0:	0103c703 	tsteq	r3, r3, lsl #14
    38e4:	03026713 	movweq	r6, #10003	; 0x2713
    38e8:	00010100 	andeq	r0, r1, r0, lsl #2
    38ec:	00000205 	andeq	r0, r0, r5, lsl #4
    38f0:	d3030000 	movwle	r0, #12288	; 0x3000
    38f4:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
    38f8:	01010010 	tsteq	r1, r0, lsl r0
    38fc:	00020500 	andeq	r0, r2, r0, lsl #10
    3900:	03000000 	movweq	r0, #0
    3904:	130103df 	movwne	r0, #5087	; 0x13df
    3908:	01001002 	tsteq	r0, r2
    390c:	02050001 	andeq	r0, r5, #1
    3910:	08006230 	stmdaeq	r0, {r4, r5, r9, sp, lr}
    3914:	0103ea03 	tsteq	r3, r3, lsl #20
    3918:	04029f13 	streq	r9, [r2], #-3859	; 0xf13
    391c:	00010100 	andeq	r0, r1, r0, lsl #2
    3920:	624c0205 	subvs	r0, ip, #1342177280	; 0x50000000
    3924:	f5030800 			; <UNDEFINED> instruction: 0xf5030800
    3928:	83130103 	tsthi	r3, #-1073741824	; 0xc0000000
    392c:	01000602 	tsteq	r0, r2, lsl #12
    3930:	02050001 	andeq	r0, r5, #1
    3934:	08006268 	stmdaeq	r0, {r3, r5, r6, r9, sp, lr}
    3938:	01048103 	tsteq	r4, r3, lsl #2
    393c:	000e0213 	andeq	r0, lr, r3, lsl r2
    3940:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3944:	00000002 	andeq	r0, r0, r2
    3948:	048d0300 	streq	r0, [sp], #768	; 0x300
    394c:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
    3950:	2e060104 	adfcss	f0, f6, f4
    3954:	02040200 	andeq	r0, r4, #0, 4
    3958:	0007029e 	muleq	r7, lr, r2
    395c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3960:	00628402 	rsbeq	r8, r2, r2, lsl #8
    3964:	04990308 	ldreq	r0, [r9], #776	; 0x308
    3968:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
    396c:	ac060104 	stfges	f0, [r6], {4}
    3970:	02040200 	andeq	r0, r4, #0, 4
    3974:	000b029e 	muleq	fp, lr, r2
    3978:	05000101 	streq	r0, [r0, #-257]	; 0x101
    397c:	00000002 	andeq	r0, r0, r2
    3980:	04a40300 	strteq	r0, [r4], #768	; 0x300
    3984:	02911301 	addseq	r1, r1, #67108864	; 0x4000000
    3988:	01010007 	tsteq	r1, r7
    398c:	00020500 	andeq	r0, r2, r0, lsl #10
    3990:	03000000 	movweq	r0, #0
    3994:	130104af 	movwne	r0, #5295	; 0x14af
    3998:	00070291 	muleq	r7, r1, r2
    399c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    39a0:	00000002 	andeq	r0, r0, r2
    39a4:	04bc0300 	ldrteq	r0, [ip], #768	; 0x300
    39a8:	1b022101 	blne	8bdb4 <__Stack_Size+0x8b5b4>
    39ac:	00010100 	andeq	r0, r1, r0, lsl #2
    39b0:	00000205 	andeq	r0, r0, r5, lsl #4
    39b4:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    39b8:	02130104 	andseq	r0, r3, #4, 2
    39bc:	01010010 	tsteq	r1, r0, lsl r0
    39c0:	00020500 	andeq	r0, r2, r0, lsl #10
    39c4:	03000000 	movweq	r0, #0
    39c8:	130104d4 	movwne	r0, #5332	; 0x14d4
    39cc:	01001002 	tsteq	r0, r2
    39d0:	02050001 	andeq	r0, r5, #1
    39d4:	00000000 	andeq	r0, r0, r0
    39d8:	0104df03 	tsteq	r4, r3, lsl #30
    39dc:	04029f13 	streq	r9, [r2], #-3859	; 0xf13
    39e0:	00010100 	andeq	r0, r1, r0, lsl #2
    39e4:	00000205 	andeq	r0, r0, r5, lsl #4
    39e8:	ea030000 	b	c39f0 <__Stack_Size+0xc31f0>
    39ec:	83130104 	tsthi	r3, #4, 2
    39f0:	01000602 	tsteq	r0, r2, lsl #12
    39f4:	02050001 	andeq	r0, r5, #1
    39f8:	00000000 	andeq	r0, r0, r0
    39fc:	0104f603 	tsteq	r4, r3, lsl #12
    3a00:	00211f13 	eoreq	r1, r1, r3, lsl pc
    3a04:	06010402 	streq	r0, [r1], -r2, lsl #8
    3a08:	04020020 	streq	r0, [r2], #-32
    3a0c:	00580802 	subseq	r0, r8, r2, lsl #16
    3a10:	f2010402 	vshl.s8	d0, d2, d1
    3a14:	02040200 	andeq	r0, r4, #0, 4
    3a18:	0402009e 	streq	r0, [r2], #-158	; 0x9e
    3a1c:	02002e01 	andeq	r2, r0, #1, 28
    3a20:	12080204 	andne	r0, r8, #4, 4	; 0x40000000
    3a24:	01000e02 	tsteq	r0, r2, lsl #28
    3a28:	02050001 	andeq	r0, r5, #1
    3a2c:	00000000 	andeq	r0, r0, r0
    3a30:	01058203 	tsteq	r5, r3, lsl #4
    3a34:	04020013 	streq	r0, [r2], #-19
    3a38:	002e0601 	eoreq	r0, lr, r1, lsl #12
    3a3c:	08020402 	stmdaeq	r2, {r1, sl}
    3a40:	0402004a 	streq	r0, [r2], #-74	; 0x4a
    3a44:	0e029001 	cdpeq	0, 0, cr9, cr2, cr1, {0}
    3a48:	00010100 	andeq	r0, r1, r0, lsl #2
    3a4c:	00000205 	andeq	r0, r0, r5, lsl #4
    3a50:	8e030000 	cdphi	0, 0, cr0, cr3, cr0, {0}
    3a54:	00130105 	andseq	r0, r3, r5, lsl #2
    3a58:	06010402 	streq	r0, [r1], -r2, lsl #8
    3a5c:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    3a60:	004a0802 	subeq	r0, sl, r2, lsl #16
    3a64:	90010402 	andls	r0, r1, r2, lsl #8
    3a68:	01000e02 	tsteq	r0, r2, lsl #28
    3a6c:	02050001 	andeq	r0, r5, #1
    3a70:	00000000 	andeq	r0, r0, r0
    3a74:	01059a03 	tsteq	r5, r3, lsl #20
    3a78:	07029113 	smladeq	r2, r3, r1, r9
    3a7c:	00010100 	andeq	r0, r1, r0, lsl #2
    3a80:	00000205 	andeq	r0, r0, r5, lsl #4
    3a84:	a6030000 	strge	r0, [r3], -r0
    3a88:	91130105 	tstls	r3, r5, lsl #2
    3a8c:	01000702 	tsteq	r0, r2, lsl #14
    3a90:	02050001 	andeq	r0, r5, #1
    3a94:	00000000 	andeq	r0, r0, r0
    3a98:	0105b203 	tsteq	r5, r3, lsl #4
    3a9c:	489fbc13 	ldmmi	pc, {r0, r1, r4, sl, fp, ip, sp, pc}	; <UNPREDICTABLE>
    3aa0:	00070225 	andeq	r0, r7, r5, lsr #4
    3aa4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3aa8:	00000002 	andeq	r0, r0, r2
    3aac:	05c30300 	strbeq	r0, [r3, #768]	; 0x300
    3ab0:	bc301301 	ldclt	3, cr1, [r0], #-4
    3ab4:	000d0230 	andeq	r0, sp, r0, lsr r2
    3ab8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3abc:	00000002 	andeq	r0, r0, r2
    3ac0:	05d60300 	ldrbeq	r0, [r6, #768]	; 0x300
    3ac4:	03021601 	movweq	r1, #9729	; 0x2601
    3ac8:	00010100 	andeq	r0, r1, r0, lsl #2
    3acc:	00000205 	andeq	r0, r0, r5, lsl #4
    3ad0:	e3030000 	movw	r0, #12288	; 0x3000
    3ad4:	30160105 	andscc	r0, r6, r5, lsl #2
    3ad8:	01000302 	tsteq	r0, r2, lsl #6
    3adc:	0000b401 	andeq	fp, r0, r1, lsl #8
    3ae0:	60000200 	andvs	r0, r0, r0, lsl #4
    3ae4:	02000000 	andeq	r0, r0, #0
    3ae8:	0d0efb01 	vstreq	d15, [lr, #-4]
    3aec:	01010100 	mrseq	r0, (UNDEF: 17)
    3af0:	00000001 	andeq	r0, r0, r1
    3af4:	01000001 	tsteq	r0, r1
    3af8:	5f627375 	svcpl	0x00627375
    3afc:	0062696c 	rsbeq	r6, r2, ip, ror #18
    3b00:	62737500 	rsbsvs	r7, r3, #0, 10
    3b04:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    3b08:	0100632e 	tsteq	r0, lr, lsr #6
    3b0c:	73750000 	cmnvc	r5, #0
    3b10:	79745f62 	ldmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    3b14:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    3b18:	00000100 	andeq	r0, r0, r0, lsl #2
    3b1c:	5f627375 	svcpl	0x00627375
    3b20:	73676572 	cmnvc	r7, #478150656	; 0x1c800000
    3b24:	0100682e 	tsteq	r0, lr, lsr #16
    3b28:	73750000 	cmnvc	r5, #0
    3b2c:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
    3b30:	682e7469 	stmdavs	lr!, {r0, r3, r5, r6, sl, ip, sp, lr}
    3b34:	00000100 	andeq	r0, r0, r0, lsl #2
    3b38:	5f627375 	svcpl	0x00627375
    3b3c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    3b40:	0100682e 	tsteq	r0, lr, lsr #16
    3b44:	00000000 	andeq	r0, r0, r0
    3b48:	62c40205 	sbcvs	r0, r4, #1342177280	; 0x50000000
    3b4c:	29030800 	stmdbcs	r3, {fp}
    3b50:	3e842301 	cdpcc	3, 8, cr2, cr4, cr1, {0}
    3b54:	1f3d3659 	svcne	0x003d3659
    3b58:	95914b3d 	ldrls	r4, [r1, #2877]	; 0xb3d
    3b5c:	213c1703 	teqcs	ip, r3, lsl #14
    3b60:	30425930 	subcc	r5, r2, r0, lsr r9
    3b64:	59304359 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, r9, lr}
    3b68:	f3130830 	vceq.i16	d0, d3, d16
    3b6c:	67200903 	strvs	r0, [r0, -r3, lsl #18]!
    3b70:	3f5c5b31 	svccc	0x005c5b31
    3b74:	02311d93 	eorseq	r1, r1, #9408	; 0x24c0
    3b78:	01010016 	tsteq	r1, r6, lsl r0
    3b7c:	00020500 	andeq	r0, r2, r0, lsl #10
    3b80:	03000000 	movweq	r0, #0
    3b84:	2301019e 	movwcs	r0, #4510	; 0x119e
    3b88:	675a3e76 			; <UNDEFINED> instruction: 0x675a3e76
    3b8c:	313f5b31 	teqcc	pc, r1, lsr fp	; <UNPREDICTABLE>
    3b90:	0100085b 	tsteq	r0, fp, asr r8
    3b94:	00006301 	andeq	r6, r0, r1, lsl #6
    3b98:	45000200 	strmi	r0, [r0, #-512]	; 0x200
    3b9c:	02000000 	andeq	r0, r0, #0
    3ba0:	0d0efb01 	vstreq	d15, [lr, #-4]
    3ba4:	01010100 	mrseq	r0, (UNDEF: 17)
    3ba8:	00000001 	andeq	r0, r0, r1
    3bac:	01000001 	tsteq	r0, r1
    3bb0:	5f627375 	svcpl	0x00627375
    3bb4:	0062696c 	rsbeq	r6, r2, ip, ror #18
    3bb8:	62737500 	rsbsvs	r7, r3, #0, 10
    3bbc:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    3bc0:	00632e74 	rsbeq	r2, r3, r4, ror lr
    3bc4:	75000001 	strvc	r0, [r0, #-1]
    3bc8:	745f6273 	ldrbvc	r6, [pc], #-627	; 3bd0 <__Stack_Size+0x33d0>
    3bcc:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    3bd0:	00010068 	andeq	r0, r1, r8, rrx
    3bd4:	62737500 	rsbsvs	r7, r3, #0, 10
    3bd8:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3bdc:	00682e65 	rsbeq	r2, r8, r5, ror #28
    3be0:	00000001 	andeq	r0, r0, r1
    3be4:	18020500 	stmdane	r2, {r8, sl}
    3be8:	03080064 	movweq	r0, #32868	; 0x8064
    3bec:	31210135 	teqcc	r1, r5, lsr r1
    3bf0:	3d2f211d 	stfccs	f2, [pc, #-116]!	; 3b84 <__Stack_Size+0x3384>
    3bf4:	02231d23 	eoreq	r1, r3, #2240	; 0x8c0
    3bf8:	0101000f 	tsteq	r1, pc
    3bfc:	00000350 	andeq	r0, r0, r0, asr r3
    3c00:	007b0002 	rsbseq	r0, fp, r2
    3c04:	01020000 	mrseq	r0, (UNDEF: 2)
    3c08:	000d0efb 	strdeq	r0, [sp], -fp
    3c0c:	01010101 	tsteq	r1, r1, lsl #2
    3c10:	01000000 	mrseq	r0, (UNDEF: 0)
    3c14:	75010000 	strvc	r0, [r1, #-0]
    3c18:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    3c1c:	00006269 	andeq	r6, r0, r9, ror #4
    3c20:	5f627375 	svcpl	0x00627375
    3c24:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    3c28:	0100632e 	tsteq	r0, lr, lsr #6
    3c2c:	73750000 	cmnvc	r5, #0
    3c30:	79745f62 	ldmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    3c34:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    3c38:	00000100 	andeq	r0, r0, r0, lsl #2
    3c3c:	5f627375 	svcpl	0x00627375
    3c40:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    3c44:	00010068 	andeq	r0, r1, r8, rrx
    3c48:	62737500 	rsbsvs	r7, r3, #0, 10
    3c4c:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    3c50:	00682e65 	rsbeq	r2, r8, r5, ror #28
    3c54:	75000001 	strvc	r0, [r0, #-1]
    3c58:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    3c5c:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
    3c60:	00010068 	andeq	r0, r1, r8, rrx
    3c64:	62737500 	rsbsvs	r7, r3, #0, 10
    3c68:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
    3c6c:	0100682e 	tsteq	r0, lr, lsr #16
    3c70:	73750000 	cmnvc	r5, #0
    3c74:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xf62
    3c78:	682e7367 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
    3c7c:	00000100 	andeq	r0, r0, r0, lsl #2
    3c80:	02050000 	andeq	r0, r5, #0
    3c84:	08006450 	stmdaeq	r0, {r4, r6, sl, sp, lr}
    3c88:	2f013503 	svccs	0x00013503
    3c8c:	4b223e22 	blmi	89351c <__Stack_Size+0x892d1c>
    3c90:	0005022f 	andeq	r0, r5, pc, lsr #4
    3c94:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3c98:	00647402 	rsbeq	r7, r4, r2, lsl #8
    3c9c:	00e30308 	rsceq	r0, r3, r8, lsl #6
    3ca0:	3e222f01 	cdpcc	15, 2, cr2, cr2, cr1, {0}
    3ca4:	022f4b22 	eoreq	r4, pc, #34816	; 0x8800
    3ca8:	01010005 	tsteq	r1, r5
    3cac:	98020500 	stmdals	r2, {r8, sl}
    3cb0:	03080064 	movweq	r0, #32868	; 0x8064
    3cb4:	2f01019b 	svccs	0x0001019b
    3cb8:	23233d22 	teqcs	r3, #2176	; 0x880
    3cbc:	235b311d 	cmpcs	fp, #1073741831	; 0x40000007
    3cc0:	4e304022 	cdpmi	0, 3, cr4, cr0, cr2, {1}
    3cc4:	22313340 	eorscs	r3, r1, #64, 6
    3cc8:	1d314740 	ldcne	7, cr4, [r1, #-256]!	; 0xffffff00
    3ccc:	03424c23 	movteq	r4, #11299	; 0x2c23
    3cd0:	034b580b 	movteq	r5, #47115	; 0xb80b
    3cd4:	21032e60 	tstcs	r3, r0, ror #28
    3cd8:	00070220 	andeq	r0, r7, r0, lsr #4
    3cdc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3ce0:	00652802 	rsbeq	r2, r5, r2, lsl #16
    3ce4:	03e00308 	mvneq	r0, #8, 6	; 0x20000000
    3ce8:	2f1f1301 	svccs	0x001f1301
    3cec:	0033212f 	eorseq	r2, r3, pc, lsr #2
    3cf0:	06010402 	streq	r0, [r1], -r2, lsl #8
    3cf4:	4d300620 	ldcmi	6, cr0, [r0, #-128]!	; 0xffffff80
    3cf8:	352d3492 	strcc	r3, [sp, #-1170]!	; 0x492
    3cfc:	84765121 	ldrbthi	r5, [r6], #-289	; 0x121
    3d00:	2f2a244c 	svccs	0x002a244c
    3d04:	231d302f 	tstcs	sp, #47	; 0x2f
    3d08:	00120223 	andseq	r0, r2, r3, lsr #4
    3d0c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3d10:	0065d002 	rsbeq	sp, r5, r2
    3d14:	00ca0308 	sbceq	r0, sl, r8, lsl #6
    3d18:	1f212201 	svcne	0x00212201
    3d1c:	21302f59 	teqcs	r0, r9, asr pc
    3d20:	0222324b 	eoreq	r3, r2, #-1342177276	; 0xb0000004
    3d24:	01010008 	tsteq	r1, r8
    3d28:	08020500 	stmdaeq	r2, {r8, sl}
    3d2c:	03080066 	movweq	r0, #32870	; 0x8066
    3d30:	240100f8 	strcs	r0, [r1], #-248	; 0xf8
    3d34:	02003e84 	andeq	r3, r0, #132, 28	; 0x840
    3d38:	20060104 	andcs	r0, r6, r4, lsl #2
    3d3c:	4b342f06 	blmi	d0f95c <__Stack_Size+0xd0f15c>
    3d40:	2f2f1e22 	svccs	0x002f1e22
    3d44:	07022125 	streq	r2, [r2, -r5, lsr #2]
    3d48:	00010100 	andeq	r0, r1, r0, lsl #2
    3d4c:	66500205 	ldrbvs	r0, [r0], -r5, lsl #4
    3d50:	e9030800 	stmdb	r3, {fp}
    3d54:	40210101 	eormi	r0, r1, r1, lsl #2
    3d58:	35224b3e 	strcc	r4, [r2, #-2878]!	; 0xb3e
    3d5c:	0f03423d 	svceq	0x0003423d
    3d60:	20720320 	rsbscs	r0, r2, r0, lsr #6
    3d64:	75035f43 	strvc	r5, [r3, #-3907]	; 0xf43
    3d68:	31403220 	cmpcc	r0, r0, lsr #4
    3d6c:	01040200 	mrseq	r0, R12_usr
    3d70:	2f062e06 	svccs	0x00062e06
    3d74:	472e0903 	strmi	r0, [lr, -r3, lsl #18]!
    3d78:	4c231d23 	stcmi	13, cr1, [r3], #-140	; 0xffffff74
    3d7c:	235a5e4b 	cmpcs	sl, #1200	; 0x4b0
    3d80:	4b942f6b 	blmi	fe50fb34 <BootRAM+0xd4802d5>
    3d84:	0a022131 	beq	8c250 <__Stack_Size+0x8ba50>
    3d88:	00010100 	andeq	r0, r1, r0, lsl #2
    3d8c:	67200205 	strvs	r0, [r0, -r5, lsl #4]!
    3d90:	c2030800 	andgt	r0, r3, #0, 16
    3d94:	03260102 	teqeq	r6, #-2147483648	; 0x80000000
    3d98:	7103200f 	tstvc	r3, pc
    3d9c:	200f0320 	andcs	r0, pc, r0, lsr #6
    3da0:	21207103 	teqcs	r0, r3, lsl #2
    3da4:	40325443 	eorsmi	r5, r2, r3, asr #8
    3da8:	02002f31 	andeq	r2, r0, #49, 30	; 0xc4
    3dac:	2e060104 	adfcss	f0, f6, f4
    3db0:	09032106 	stmdbeq	r3, {r1, r2, r8, sp}
    3db4:	1d31472e 	ldcne	7, cr4, [r1, #-184]!	; 0xffffff48
    3db8:	4b858823 	blmi	fe165e4c <BootRAM+0xd0d65ed>
    3dbc:	032e6f03 	teqeq	lr, #3, 30
    3dc0:	07022012 	smladeq	r2, r2, r0, r2
    3dc4:	00010100 	andeq	r0, r1, r0, lsl #2
    3dc8:	67a40205 	strvs	r0, [r4, r5, lsl #4]!
    3dcc:	f8030800 			; <UNDEFINED> instruction: 0xf8030800
    3dd0:	67210102 	strvs	r0, [r1, -r2, lsl #2]!
    3dd4:	0007024c 	andeq	r0, r7, ip, asr #4
    3dd8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3ddc:	0067c802 	rsbeq	ip, r7, r2, lsl #16
    3de0:	03920308 	orrseq	r0, r2, #8, 6	; 0x20000000
    3de4:	223d1501 	eorscs	r1, sp, #4194304	; 0x400000
    3de8:	022f233d 	eoreq	r2, pc, #-201326592	; 0xf4000000
    3dec:	01010004 	tsteq	r1, r4
    3df0:	e4020500 	str	r0, [r2], #-1280	; 0x500
    3df4:	03080067 	movweq	r0, #32871	; 0x8067
    3df8:	210107c9 	smlabtcs	r1, r9, r7, r0
    3dfc:	404b5a68 	submi	r5, fp, r8, ror #20
    3e00:	01000d02 	tsteq	r0, r2, lsl #26
    3e04:	02050001 	andeq	r0, r5, #1
    3e08:	08006824 	stmdaeq	r0, {r2, r5, fp, sp, lr}
    3e0c:	0106cc03 	tsteq	r6, r3, lsl #24
    3e10:	3e2c3e28 	cdpcc	14, 2, cr3, cr12, cr8, {1}
    3e14:	302f5c56 	eorcc	r5, pc, r6, asr ip	; <UNPREDICTABLE>
    3e18:	2f313030 	svccs	0x00313030
    3e1c:	4a7dbd03 	bmi	1f73230 <__Stack_Size+0x1f72a30>
    3e20:	3040304e 	subcc	r3, r0, lr, asr #32
    3e24:	3d3d294f 	ldccc	9, cr2, [sp, #-316]!	; 0xfffffec4
    3e28:	304a0c03 	subcc	r0, sl, r3, lsl #24
    3e2c:	593c3c03 	ldmdbpl	ip!, {r0, r1, sl, fp, ip, sp}
    3e30:	3d3c4403 	cfldrscc	mvf4, [ip, #-12]!
    3e34:	3d30443e 	cfldrscc	mvf4, [r0, #-248]!	; 0xffffff08
    3e38:	0b033e3d 	bleq	d3734 <__Stack_Size+0xd2f34>
    3e3c:	4130313c 	teqmi	r0, ip, lsr r1
    3e40:	03303331 	teqeq	r0, #-1006632960	; 0xc4000000
    3e44:	0a032e09 	beq	cf670 <__Stack_Size+0xcee70>
    3e48:	039c362e 	orrseq	r3, ip, #48234496	; 0x2e00000
    3e4c:	10032e75 	andne	r2, r3, r5, ror lr
    3e50:	3c190320 	ldccc	3, cr0, [r9], {32}
    3e54:	302f3e30 	eorcc	r3, pc, r0, lsr lr	; <UNPREDICTABLE>
    3e58:	303e303e 	eorscc	r3, lr, lr, lsr r0
    3e5c:	5a42303d 	bpl	108ff58 <__Stack_Size+0x108f758>
    3e60:	305e4b69 	subscc	r4, lr, r9, ror #22
    3e64:	03306d75 	teqeq	r0, #7488	; 0x1d40
    3e68:	7203200e 	andvc	r2, r3, #14
    3e6c:	035f4320 	cmpeq	pc, #32, 6	; 0x80000000
    3e70:	40322075 	eorsmi	r2, r2, r5, ror r0
    3e74:	09035931 	stmdbeq	r3, {r0, r4, r5, r8, fp, ip, lr}
    3e78:	3050303c 	subscc	r3, r0, ip, lsr r0
    3e7c:	89674b59 	stmdbhi	r7!, {r0, r3, r4, r6, r8, r9, fp, lr}^
    3e80:	2f233d22 	svccs	0x00233d22
    3e84:	41306732 	teqmi	r0, r2, lsr r7
    3e88:	413f3169 	teqmi	pc, r9, ror #2
    3e8c:	084c314d 	stmdaeq	ip, {r0, r2, r3, r6, r8, ip, sp}^
    3e90:	305a3023 	subscc	r3, sl, r3, lsr #32
    3e94:	404b405a 	submi	r4, fp, sl, asr r0
    3e98:	4a2f032f 	bmi	bc4b5c <__Stack_Size+0xbc435c>
    3e9c:	7ed6032f 	cdpvc	3, 13, cr0, cr6, cr15, {1}
    3ea0:	2e2c032e 	cdpcs	3, 2, cr0, cr12, cr14, {1}
    3ea4:	022e0b03 	eoreq	r0, lr, #3072	; 0xc00
    3ea8:	0101000c 	tsteq	r1, ip
    3eac:	00020500 	andeq	r0, r2, r0, lsl #10
    3eb0:	0308006b 	movweq	r0, #32875	; 0x806b
    3eb4:	210107a0 	smlatbcs	r1, r0, r7, r0
    3eb8:	0402003e 	streq	r0, [r2], #-62	; 0x3e
    3ebc:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    3ec0:	2e7c8a03 	vaddcs.f32	s17, s24, s6
    3ec4:	2633221e 			; <UNDEFINED> instruction: 0x2633221e
    3ec8:	2f211f59 	svccs	0x00211f59
    3ecc:	77301e22 	ldrvc	r1, [r0, -r2, lsr #28]!
    3ed0:	2f1f2130 	svccs	0x001f2130
    3ed4:	3f2f211f 	svccc	0x002f211f
    3ed8:	4e22404c 	cdpmi	0, 2, cr4, cr2, cr12, {2}
    3edc:	03d3033d 	bicseq	r0, r3, #-201326592	; 0xf4000000
    3ee0:	51303f9e 			; <UNDEFINED> instruction: 0x51303f9e
    3ee4:	31200903 	teqcc	r0, r3, lsl #18
    3ee8:	000f022d 	andeq	r0, pc, sp, lsr #4
    3eec:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3ef0:	006bc802 	rsbeq	ip, fp, r2, lsl #16
    3ef4:	07dd0308 	ldrbeq	r0, [sp, r8, lsl #6]
    3ef8:	00312201 	eorseq	r2, r1, r1, lsl #4
    3efc:	06010402 	streq	r0, [r1], -r2, lsl #8
    3f00:	04020020 	streq	r0, [r2], #-32
    3f04:	00760602 	rsbseq	r0, r6, r2, lsl #12
    3f08:	64020402 	strvs	r0, [r2], #-1026	; 0x402
    3f0c:	00090232 	andeq	r0, r9, r2, lsr r2
    3f10:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3f14:	006c0002 	rsbeq	r0, ip, r2
    3f18:	06f80308 	ldrbteq	r0, [r8], r8, lsl #6
    3f1c:	003e2101 	eorseq	r2, lr, r1, lsl #2
    3f20:	06010402 	streq	r0, [r1], -r2, lsl #8
    3f24:	3030062e 	eorscc	r0, r0, lr, lsr #12
    3f28:	0200303f 	andeq	r3, r0, #63	; 0x3f
    3f2c:	003d0104 	eorseq	r0, sp, r4, lsl #2
    3f30:	1f010402 	svcne	0x00010402
    3f34:	504c3d31 	subpl	r3, ip, r1, lsr sp
    3f38:	022d3123 	eoreq	r3, sp, #-1073741816	; 0xc0000008
    3f3c:	01010009 	tsteq	r1, r9
    3f40:	00020500 	andeq	r0, r2, r0, lsl #10
    3f44:	03000000 	movweq	r0, #0
    3f48:	020107f1 	andeq	r0, r1, #63176704	; 0x3c40000
    3f4c:	01010001 	tsteq	r1, r1
    3f50:	0000008f 	andeq	r0, r0, pc, lsl #1
    3f54:	00360002 	eorseq	r0, r6, r2
    3f58:	01020000 	mrseq	r0, (UNDEF: 2)
    3f5c:	000d0efb 	strdeq	r0, [sp], -fp
    3f60:	01010101 	tsteq	r1, r1, lsl #2
    3f64:	01000000 	mrseq	r0, (UNDEF: 0)
    3f68:	75010000 	strvc	r0, [r1, #-0]
    3f6c:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    3f70:	00006269 	andeq	r6, r0, r9, ror #4
    3f74:	5f627375 	svcpl	0x00627375
    3f78:	2e6d656d 	cdpcs	5, 6, cr6, cr13, cr13, {3}
    3f7c:	00010063 	andeq	r0, r1, r3, rrx
    3f80:	62737500 	rsbsvs	r7, r3, #0, 10
    3f84:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    3f88:	00682e65 	rsbeq	r2, r8, r5, ror #28
    3f8c:	00000001 	andeq	r0, r0, r1
    3f90:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    3f94:	0308006c 	movweq	r0, #32876	; 0x806c
    3f98:	2b240123 	blcs	90442c <__Stack_Size+0x903c2c>
    3f9c:	21232b23 	teqcs	r3, r3, lsr #22
    3fa0:	01040200 	mrseq	r0, R12_usr
    3fa4:	02002006 	andeq	r2, r0, #6
    3fa8:	4e060204 	cdpmi	2, 0, cr0, cr6, cr4, {0}
    3fac:	02040200 	andeq	r0, r4, #0, 4
    3fb0:	0402002c 	streq	r0, [r2], #-44	; 0x2c
    3fb4:	02003002 	andeq	r3, r0, #2
    3fb8:	4e2f0204 	cdpmi	2, 2, cr0, cr15, cr4, {0}
    3fbc:	01000102 	tsteq	r0, r2, lsl #2
    3fc0:	02050001 	andeq	r0, r5, #1
    3fc4:	08006c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, sp, lr}
    3fc8:	24013c03 	strcs	r3, [r1], #-3075	; 0xc03
    3fcc:	232b232b 	teqcs	fp, #-1409286144	; 0xac000000
    3fd0:	04020021 	streq	r0, [r2], #-33	; 0x21
    3fd4:	00200601 	eoreq	r0, r0, r1, lsl #12
    3fd8:	06020402 	streq	r0, [r2], -r2, lsl #8
    3fdc:	01026930 	tsteq	r2, r0, lsr r9
    3fe0:	Address 0x00003fe0 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	0000000c 	andeq	r0, r0, ip
      14:	00000000 	andeq	r0, r0, r0
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	08000b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp}
      1c:	00000002 	andeq	r0, r0, r2
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	0000000c 	andeq	r0, r0, ip
      24:	00000000 	andeq	r0, r0, r0
      28:	08000b9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, fp}
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	00000002 	andeq	r0, r0, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	0000000c 	andeq	r0, r0, ip
      34:	00000000 	andeq	r0, r0, r0
      38:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	00000002 	andeq	r0, r0, r2

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	0000000c 	andeq	r0, r0, ip
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	00000000 	andeq	r0, r0, r0
      48:	08000b9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp}
      4c:	0000000a 	andeq	r0, r0, sl

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	0000000c 	andeq	r0, r0, ip
      54:	00000000 	andeq	r0, r0, r0
      58:	08000ba8 	stmdaeq	r0, {r3, r5, r7, r8, r9, fp}
      5c:	00000002 	andeq	r0, r0, r2
      60:	0000000c 	andeq	r0, r0, ip
      64:	00000000 	andeq	r0, r0, r0
      68:	08000bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp}
      6c:	00000018 	andeq	r0, r0, r8, lsl r0
      70:	0000000c 	andeq	r0, r0, ip
      74:	00000000 	andeq	r0, r0, r0
      78:	08000bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp}
      7c:	00000002 	andeq	r0, r0, r2
      80:	0000000c 	andeq	r0, r0, ip
      84:	00000000 	andeq	r0, r0, r0
      88:	08000bc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, fp}
      8c:	00000002 	andeq	r0, r0, r2
      90:	0000000c 	andeq	r0, r0, ip
      94:	00000000 	andeq	r0, r0, r0
      98:	08000bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp}
      9c:	00000002 	andeq	r0, r0, r2
      a0:	0000000c 	andeq	r0, r0, ip
      a4:	00000000 	andeq	r0, r0, r0
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      a8:	08000bca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, fp}
				{
					state_in->step = step_c;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ac:	00000002 	andeq	r0, r0, r2
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      b0:	0000000c 	andeq	r0, r0, ip
      b4:	00000000 	andeq	r0, r0, r0
			*plainchar    = (fragment & 0x003) << 6;
      b8:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
      bc:	00000002 	andeq	r0, r0, r2
	state_in->plainchar = 0;
}

int base64_decode_block(const char* code_in, const int length_in, char* plaintext_out, base64_decodestate* state_in)
{
	const char* codechar = code_in;
      c0:	0000000c 	andeq	r0, r0, ip
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
			*plainchar    = (fragment & 0x003) << 6;
	case step_d:
			do {
				if (codechar == code_in+length_in)
      c4:	00000000 	andeq	r0, r0, r0
      c8:	08000bce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, fp}
				{
					state_in->step = step_d;
      cc:	00000002 	andeq	r0, r0, r2
					state_in->plainchar = *plainchar;
      d0:	0000000c 	andeq	r0, r0, ip
					return plainchar - plaintext_out;
      d4:	00000000 	andeq	r0, r0, r0
      d8:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
				}
				fragment = (char)base64_decode_value(*codechar++);
      dc:	0000000c 	andeq	r0, r0, ip
      e0:	00000018 	andeq	r0, r0, r8, lsl r0
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      e4:	00000000 	andeq	r0, r0, r0
      e8:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
				{
					state_in->step = step_d;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ec:	000000a8 	andeq	r0, r0, r8, lsr #1
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      f0:	40080e41 	andmi	r0, r8, r1, asr #28
      f4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
		}
      f8:	00000001 	andeq	r0, r0, r1
	}
	/* control should not reach here */
	return plainchar - plaintext_out;
}
      fc:	0000001c 	andeq	r0, r0, ip, lsl r0
	uint8_t x1z1[F25519_SIZE];
	uint8_t a[F25519_SIZE];

	f25519_mul__distinct(x1sq, x1, x1);
	f25519_mul__distinct(z1sq, z1, z1);
	f25519_mul__distinct(x1z1, x1, z1);
     100:	00000000 	andeq	r0, r0, r0
     104:	08000c84 	stmdaeq	r0, {r2, r7, sl, fp}

	f25519_sub(a, x1sq, z1sq);
     108:	00000060 	andeq	r0, r0, r0, rrx
     10c:	40100e41 	andsmi	r0, r0, r1, asr #28
	f25519_mul__distinct(x3, a, a);
     110:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
     114:	02854003 	addeq	r4, r5, #3
     118:	00018e40 	andeq	r8, r1, r0, asr #28

	f25519_mul_c(a, x1z1, 486662);
     11c:	0000000c 	andeq	r0, r0, ip
     120:	00000000 	andeq	r0, r0, r0
	f25519_add(a, x1sq, a);
     124:	08000ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp}
     128:	0000000c 	andeq	r0, r0, ip
     12c:	0000000c 	andeq	r0, r0, ip
	f25519_add(a, z1sq, a);
     130:	00000000 	andeq	r0, r0, r0
     134:	08000cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp}
	f25519_mul__distinct(x1sq, x1z1, a);
     138:	0000000c 	andeq	r0, r0, ip
     13c:	0000000c 	andeq	r0, r0, ip
     140:	00000000 	andeq	r0, r0, r0
	f25519_mul_c(z3, x1sq, 4);
     144:	08000cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp}
     148:	00000020 	andeq	r0, r0, r0, lsr #32
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	0000000c 	andeq	r0, r0, ip
     150:	00000000 	andeq	r0, r0, r0
     154:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
	f25519_sub(b, x3, z3); /* D */
     158:	0000000c 	andeq	r0, r0, ip
     15c:	00000018 	andeq	r0, r0, r8, lsl r0
	f25519_mul__distinct(da, a, b);
     160:	00000000 	andeq	r0, r0, r0
     164:	08000d28 	stmdaeq	r0, {r3, r5, r8, sl, fp}
     168:	00000028 	andeq	r0, r0, r8, lsr #32

	f25519_sub(b, x2, z2);
     16c:	40080e41 	andmi	r0, r8, r1, asr #28
     170:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
	f25519_add(a, x3, z3); /* C */
     174:	00000001 	andeq	r0, r0, r1
     178:	00000024 	andeq	r0, r0, r4, lsr #32
     17c:	00000000 	andeq	r0, r0, r0
	f25519_mul__distinct(cb, a, b);
     180:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
     184:	00000068 	andeq	r0, r0, r8, rrx

	f25519_add(a, da, cb);
     188:	40180e41 	andsmi	r0, r8, r1, asr #28
     18c:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
     190:	04824005 	streq	r4, [r2], #5
	f25519_mul__distinct(b, a, a);
     194:	40038440 	andmi	r8, r3, r0, asr #8
     198:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
	f25519_mul__distinct(x5, z1, b);
     19c:	00000001 	andeq	r0, r0, r1
     1a0:	0000000c 	andeq	r0, r0, ip
	...

	f25519_sub(a, da, cb);
     1ac:	00000004 	andeq	r0, r0, r4
	f25519_mul__distinct(b, a, a);
     1b0:	0000000c 	andeq	r0, r0, ip
     1b4:	00000000 	andeq	r0, r0, r0
     1b8:	08000db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp}

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	0000000c 	andeq	r0, r0, ip
     1c4:	00000000 	andeq	r0, r0, r0

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	08000dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp}
     1cc:	00000018 	andeq	r0, r0, r8, lsl r0
     1d0:	00000018 	andeq	r0, r0, r8, lsl r0
     1d4:	00000000 	andeq	r0, r0, r0
		f25519_select(zm1, zm1, zm, bit);
     1d8:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
     1dc:	00000084 	andeq	r0, r0, r4, lsl #1
     1e0:	40080e41 	andmi	r0, r8, r1, asr #28
		f25519_select(xm, xm, xms, bit);
     1e4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     1e8:	00000001 	andeq	r0, r0, r1
     1ec:	00000018 	andeq	r0, r0, r8, lsl r0
		f25519_select(zm, zm, zms, bit);
     1f0:	00000000 	andeq	r0, r0, r0
     1f4:	08000e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp}
     1f8:	00000048 	andeq	r0, r0, r8, asr #32
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	40080e42 	andmi	r0, r8, r2, asr #28
     200:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	00000001 	andeq	r0, r0, r1
     208:	00000018 	andeq	r0, r0, r8, lsl r0
	f25519_mul__distinct(result, zm1, xm);
     20c:	00000000 	andeq	r0, r0, r0
     210:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
	f25519_normalize(result);
     214:	0000003c 	andeq	r0, r0, ip, lsr r0
     218:	40080e43 	andmi	r0, r8, r3, asr #28
}
     21c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     220:	00000001 	andeq	r0, r0, r1
     224:	0000000c 	andeq	r0, r0, ip
     228:	00000000 	andeq	r0, r0, r0
     22c:	08000ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp}
     230:	00000004 	andeq	r0, r0, r4
     234:	0000001c 	andeq	r0, r0, ip, lsl r0
     238:	00000000 	andeq	r0, r0, r0
     23c:	08000ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp}
     240:	00000024 	andeq	r0, r0, r4, lsr #32
     244:	40100e41 	andsmi	r0, r0, r1, asr #28
     248:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
     24c:	02824003 	addeq	r4, r2, #3
     250:	00018e40 	andeq	r8, r1, r0, asr #28
     254:	00000018 	andeq	r0, r0, r8, lsl r0
     258:	00000000 	andeq	r0, r0, r0
     25c:	08000f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp}
     260:	00000040 	andeq	r0, r0, r0, asr #32
     264:	40080e41 	andmi	r0, r8, r1, asr #28
     268:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     26c:	00000001 	andeq	r0, r0, r1
     270:	0000001c 	andeq	r0, r0, ip, lsl r0
     274:	00000000 	andeq	r0, r0, r0
     278:	08000f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp}
     27c:	00000022 	andeq	r0, r0, r2, lsr #32
     280:	40100e41 	andsmi	r0, r0, r1, asr #28
     284:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
     288:	02824003 	addeq	r4, r2, #3
     28c:	00018e40 	andeq	r8, r1, r0, asr #28
     290:	0000001c 	andeq	r0, r0, ip, lsl r0
     294:	00000000 	andeq	r0, r0, r0
     298:	08000f80 	stmdaeq	r0, {r7, r8, r9, sl, fp}
     29c:	000000b4 	strheq	r0, [r0], -r4
     2a0:	40100e41 	andsmi	r0, r0, r1, asr #28
     2a4:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     2a8:	02864003 	addeq	r4, r6, #3
     2ac:	00018e40 	andeq	r8, r1, r0, asr #28
     2b0:	0000000c 	andeq	r0, r0, ip
	...
     2bc:	0000000c 	andeq	r0, r0, ip
     2c0:	0000000c 	andeq	r0, r0, ip
     2c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     2c8:	7c020001 	stcvc	0, cr0, [r2], {1}
     2cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     2d0:	00000024 	andeq	r0, r0, r4, lsr #32
     2d4:	000002c0 	andeq	r0, r0, r0, asr #5
     2d8:	00000000 	andeq	r0, r0, r0
     2dc:	00000026 	andeq	r0, r0, r6, lsr #32
     2e0:	40180e41 	andsmi	r0, r8, r1, asr #28
     2e4:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
     2e8:	04824005 	streq	r4, [r2], #5
     2ec:	40038440 	andmi	r8, r3, r0, asr #8
     2f0:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
     2f4:	00000001 	andeq	r0, r0, r1
     2f8:	00000024 	andeq	r0, r0, r4, lsr #32
     2fc:	000002c0 	andeq	r0, r0, r0, asr #5
     300:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
     304:	00000032 	andeq	r0, r0, r2, lsr r0
     308:	40180e41 	andsmi	r0, r8, r1, asr #28
     30c:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
     310:	04824005 	streq	r4, [r2], #5
     314:	40038440 	andmi	r8, r3, r0, asr #8
     318:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
     31c:	00000001 	andeq	r0, r0, r1
     320:	00000018 	andeq	r0, r0, r8, lsl r0
     324:	000002c0 	andeq	r0, r0, r0, asr #5
     328:	08001068 	stmdaeq	r0, {r3, r5, r6, ip}
     32c:	00000098 	muleq	r0, r8, r0
     330:	40040e41 	andmi	r0, r4, r1, asr #28
     334:	0e42018e 	dvfeqd	f0, f2, #0.5
     338:	000006a0 	andeq	r0, r0, r0, lsr #13
     33c:	0000001c 	andeq	r0, r0, ip, lsl r0
     340:	000002c0 	andeq	r0, r0, r0, asr #5
     344:	08001100 	stmdaeq	r0, {r8, ip}
     348:	000000fc 	strdeq	r0, [r0], -ip
     34c:	400c0e41 	andmi	r0, ip, r1, asr #28
     350:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     354:	018e4002 	orreq	r4, lr, r2
     358:	00200e41 	eoreq	r0, r0, r1, asr #28
     35c:	0000000c 	andeq	r0, r0, ip
     360:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     364:	7c020001 	stcvc	0, cr0, [r2], {1}
     368:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     36c:	0000000c 	andeq	r0, r0, ip
     370:	0000035c 	andeq	r0, r0, ip, asr r3
     374:	080011fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, ip}
     378:	00000016 	andeq	r0, r0, r6, lsl r0
     37c:	0000000c 	andeq	r0, r0, ip
     380:	0000035c 	andeq	r0, r0, ip, asr r3
     384:	08001212 	stmdaeq	r0, {r1, r4, r9, ip}
     388:	00000012 	andeq	r0, r0, r2, lsl r0
     38c:	00000028 	andeq	r0, r0, r8, lsr #32
     390:	0000035c 	andeq	r0, r0, ip, asr r3
     394:	08001224 	stmdaeq	r0, {r2, r5, r9, ip}
     398:	00000050 	andeq	r0, r0, r0, asr r0
     39c:	40200e42 	eormi	r0, r0, r2, asr #28
     3a0:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     3a4:	06864007 	streq	r4, [r6], r7
     3a8:	40058740 	andmi	r8, r5, r0, asr #14
     3ac:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     3b0:	028a4003 	addeq	r4, sl, #3
     3b4:	00018e40 	andeq	r8, r1, r0, asr #28
     3b8:	0000000c 	andeq	r0, r0, ip
     3bc:	0000035c 	andeq	r0, r0, ip, asr r3
     3c0:	08001274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip}
     3c4:	0000000a 	andeq	r0, r0, sl
     3c8:	0000001c 	andeq	r0, r0, ip, lsl r0
     3cc:	0000035c 	andeq	r0, r0, ip, asr r3
     3d0:	0800127e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, ip}
     3d4:	00000016 	andeq	r0, r0, r6, lsl r0
     3d8:	40100e41 	andsmi	r0, r0, r1, asr #28
     3dc:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
     3e0:	02854003 	addeq	r4, r5, #3
     3e4:	00018e40 	andeq	r8, r1, r0, asr #28
     3e8:	00000018 	andeq	r0, r0, r8, lsl r0
     3ec:	0000035c 	andeq	r0, r0, ip, asr r3
     3f0:	08001294 	stmdaeq	r0, {r2, r4, r7, r9, ip}
     3f4:	00000028 	andeq	r0, r0, r8, lsr #32
     3f8:	40040e41 	andmi	r0, r4, r1, asr #28
     3fc:	0e42018e 	dvfeqd	f0, f2, #0.5
     400:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     404:	0000002c 	andeq	r0, r0, ip, lsr #32
     408:	0000035c 	andeq	r0, r0, ip, asr r3
     40c:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
     410:	0000001a 	andeq	r0, r0, sl, lsl r0
     414:	40100e41 	andsmi	r0, r0, r1, asr #28
     418:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
     41c:	02824003 	addeq	r4, r2, #3
     420:	41018340 	tstmi	r1, r0, asr #6
     424:	8040200e 	subhi	r2, r0, lr
     428:	07814008 	streq	r4, [r1, r8]
     42c:	40068240 	andmi	r8, r6, r0, asr #4
     430:	0000058e 	andeq	r0, r0, lr, lsl #11
     434:	00000024 	andeq	r0, r0, r4, lsr #32
     438:	0000035c 	andeq	r0, r0, ip, asr r3
     43c:	080012d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip}
     440:	0000009c 	muleq	r0, ip, r0
     444:	40140e41 	andsmi	r0, r4, r1, asr #28
     448:	85400584 	strbhi	r0, [r0, #-1412]	; 0x584
     44c:	03864004 	orreq	r4, r6, #4
     450:	40028740 	andmi	r8, r2, r0, asr #14
     454:	0e41018e 	dvfeqd	f0, f1, #0.5
     458:	00000030 	andeq	r0, r0, r0, lsr r0
     45c:	0000001c 	andeq	r0, r0, ip, lsl r0
     460:	0000035c 	andeq	r0, r0, ip, asr r3
     464:	08001374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip}
     468:	00000028 	andeq	r0, r0, r8, lsr #32
     46c:	40100e41 	andsmi	r0, r0, r1, asr #28
     470:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
     474:	02854003 	addeq	r4, r5, #3
     478:	00018e40 	andeq	r8, r1, r0, asr #28
     47c:	00000018 	andeq	r0, r0, r8, lsl r0
     480:	0000035c 	andeq	r0, r0, ip, asr r3
     484:	0800139c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, ip}
     488:	00000088 	andeq	r0, r0, r8, lsl #1
     48c:	40080e41 	andmi	r0, r8, r1, asr #28
     490:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     494:	200e4201 	andcs	r4, lr, r1, lsl #4
     498:	0000000c 	andeq	r0, r0, ip
     49c:	0000035c 	andeq	r0, r0, ip, asr r3
     4a0:	08001424 	stmdaeq	r0, {r2, r5, sl, ip}
     4a4:	00000048 	andeq	r0, r0, r8, asr #32
     4a8:	0000000c 	andeq	r0, r0, ip
     4ac:	0000035c 	andeq	r0, r0, ip, asr r3
     4b0:	0800146c 	stmdaeq	r0, {r2, r3, r5, r6, sl, ip}
     4b4:	00000060 	andeq	r0, r0, r0, rrx
     4b8:	0000000c 	andeq	r0, r0, ip
     4bc:	0000035c 	andeq	r0, r0, ip, asr r3
     4c0:	080014cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, ip}
     4c4:	00000014 	andeq	r0, r0, r4, lsl r0
     4c8:	0000000c 	andeq	r0, r0, ip
     4cc:	0000035c 	andeq	r0, r0, ip, asr r3
     4d0:	080014e0 	stmdaeq	r0, {r5, r6, r7, sl, ip}
     4d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     4d8:	0000000c 	andeq	r0, r0, ip
     4dc:	0000035c 	andeq	r0, r0, ip, asr r3
     4e0:	080014fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip}
     4e4:	0000002c 	andeq	r0, r0, ip, lsr #32
     4e8:	00000018 	andeq	r0, r0, r8, lsl r0
     4ec:	0000035c 	andeq	r0, r0, ip, asr r3
     4f0:	08001528 	stmdaeq	r0, {r3, r5, r8, sl, ip}
     4f4:	00000018 	andeq	r0, r0, r8, lsl r0
     4f8:	40080e42 	andmi	r0, r8, r2, asr #28
     4fc:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
     500:	00000001 	andeq	r0, r0, r1
     504:	0000000c 	andeq	r0, r0, ip
     508:	0000035c 	andeq	r0, r0, ip, asr r3
     50c:	00000000 	andeq	r0, r0, r0
     510:	0000002c 	andeq	r0, r0, ip, lsr #32
     514:	0000001c 	andeq	r0, r0, ip, lsl r0
     518:	0000035c 	andeq	r0, r0, ip, asr r3
     51c:	00000000 	andeq	r0, r0, r0
     520:	00000048 	andeq	r0, r0, r8, asr #32
     524:	40100e41 	andsmi	r0, r0, r1, asr #28
     528:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
     52c:	02854003 	addeq	r4, r5, #3
     530:	00018e40 	andeq	r8, r1, r0, asr #28
     534:	00000018 	andeq	r0, r0, r8, lsl r0
     538:	0000035c 	andeq	r0, r0, ip, asr r3
     53c:	08001540 	stmdaeq	r0, {r6, r8, sl, ip}
     540:	0000006c 	andeq	r0, r0, ip, rrx
     544:	400c0e42 	andmi	r0, ip, r2, asr #28
     548:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     54c:	018e4002 	orreq	r4, lr, r2
     550:	0000000c 	andeq	r0, r0, ip
     554:	0000035c 	andeq	r0, r0, ip, asr r3
     558:	080015ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, ip}
     55c:	00000024 	andeq	r0, r0, r4, lsr #32
     560:	00000018 	andeq	r0, r0, r8, lsl r0
     564:	0000035c 	andeq	r0, r0, ip, asr r3
     568:	080015d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, ip}
     56c:	0000001e 	andeq	r0, r0, lr, lsl r0
     570:	40080e41 	andmi	r0, r8, r1, asr #28
     574:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     578:	00000001 	andeq	r0, r0, r1
     57c:	0000000c 	andeq	r0, r0, ip
     580:	0000035c 	andeq	r0, r0, ip, asr r3
     584:	080015f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip}
     588:	00000014 	andeq	r0, r0, r4, lsl r0
     58c:	00000018 	andeq	r0, r0, r8, lsl r0
     590:	0000035c 	andeq	r0, r0, ip, asr r3
     594:	08001604 	stmdaeq	r0, {r2, r9, sl, ip}
     598:	00000034 	andeq	r0, r0, r4, lsr r0
     59c:	40080e42 	andmi	r0, r8, r2, asr #28
     5a0:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     5a4:	00000001 	andeq	r0, r0, r1
     5a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5ac:	0000035c 	andeq	r0, r0, ip, asr r3
     5b0:	00000000 	andeq	r0, r0, r0
     5b4:	00000030 	andeq	r0, r0, r0, lsr r0
     5b8:	40100e42 	andsmi	r0, r0, r2, asr #28
     5bc:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
     5c0:	02854003 	addeq	r4, r5, #3
     5c4:	00018e40 	andeq	r8, r1, r0, asr #28
     5c8:	00000024 	andeq	r0, r0, r4, lsr #32
     5cc:	0000035c 	andeq	r0, r0, ip, asr r3
     5d0:	08001638 	stmdaeq	r0, {r3, r4, r5, r9, sl, ip}
     5d4:	0000004c 	andeq	r0, r0, ip, asr #32
     5d8:	40180e41 	andsmi	r0, r8, r1, asr #28
     5dc:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
     5e0:	04824005 	streq	r4, [r2], #5
     5e4:	40038440 	andmi	r8, r3, r0, asr #8
     5e8:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
     5ec:	00000001 	andeq	r0, r0, r1
     5f0:	0000000c 	andeq	r0, r0, ip
     5f4:	0000035c 	andeq	r0, r0, ip, asr r3
     5f8:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
     5fc:	0000000c 	andeq	r0, r0, ip
     600:	0000000c 	andeq	r0, r0, ip
     604:	0000035c 	andeq	r0, r0, ip, asr r3
     608:	08001690 	stmdaeq	r0, {r4, r7, r9, sl, ip}
     60c:	00000018 	andeq	r0, r0, r8, lsl r0
     610:	0000000c 	andeq	r0, r0, ip
     614:	0000035c 	andeq	r0, r0, ip, asr r3
     618:	080016a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip}
     61c:	00000012 	andeq	r0, r0, r2, lsl r0
     620:	0000000c 	andeq	r0, r0, ip
     624:	0000035c 	andeq	r0, r0, ip, asr r3
     628:	080016bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, ip}
     62c:	00000010 	andeq	r0, r0, r0, lsl r0
     630:	0000000c 	andeq	r0, r0, ip
     634:	0000035c 	andeq	r0, r0, ip, asr r3
     638:	080016cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip}
     63c:	00000018 	andeq	r0, r0, r8, lsl r0
     640:	0000000c 	andeq	r0, r0, ip
     644:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     648:	7c020001 	stcvc	0, cr0, [r2], {1}
     64c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     650:	00000018 	andeq	r0, r0, r8, lsl r0
     654:	00000640 	andeq	r0, r0, r0, asr #12
     658:	080016e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, ip}
     65c:	00000088 	andeq	r0, r0, r8, lsl #1
     660:	40080e42 	andmi	r0, r8, r2, asr #28
     664:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
     668:	00000001 	andeq	r0, r0, r1
     66c:	00000018 	andeq	r0, r0, r8, lsl r0
     670:	00000640 	andeq	r0, r0, r0, asr #12
     674:	0800176c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, ip}
     678:	00000044 	andeq	r0, r0, r4, asr #32
     67c:	40080e41 	andmi	r0, r8, r1, asr #28
     680:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
     684:	00000001 	andeq	r0, r0, r1
     688:	0000000c 	andeq	r0, r0, ip
     68c:	00000640 	andeq	r0, r0, r0, asr #12
     690:	00000000 	andeq	r0, r0, r0
     694:	00000002 	andeq	r0, r0, r2
     698:	0000000c 	andeq	r0, r0, ip
     69c:	00000640 	andeq	r0, r0, r0, asr #12
     6a0:	080017b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, ip}
     6a4:	00000018 	andeq	r0, r0, r8, lsl r0
     6a8:	0000000c 	andeq	r0, r0, ip
     6ac:	00000640 	andeq	r0, r0, r0, asr #12
     6b0:	080017c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip}
     6b4:	00000018 	andeq	r0, r0, r8, lsl r0
     6b8:	0000000c 	andeq	r0, r0, ip
     6bc:	00000640 	andeq	r0, r0, r0, asr #12
     6c0:	080017e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip}
     6c4:	00000028 	andeq	r0, r0, r8, lsr #32
     6c8:	0000000c 	andeq	r0, r0, ip
     6cc:	00000640 	andeq	r0, r0, r0, asr #12
     6d0:	08001808 	stmdaeq	r0, {r3, fp, ip}
     6d4:	00000034 	andeq	r0, r0, r4, lsr r0
     6d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     6dc:	00000640 	andeq	r0, r0, r0, asr #12
     6e0:	0800183c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip}
     6e4:	00000058 	andeq	r0, r0, r8, asr r0
     6e8:	40100e41 	andsmi	r0, r0, r1, asr #28
     6ec:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
     6f0:	02854003 	addeq	r4, r5, #3
     6f4:	00018e40 	andeq	r8, r1, r0, asr #28
     6f8:	00000028 	andeq	r0, r0, r8, lsr #32
     6fc:	00000640 	andeq	r0, r0, r0, asr #12
     700:	08001894 	stmdaeq	r0, {r2, r4, r7, fp, ip}
     704:	00000260 	andeq	r0, r0, r0, ror #4
     708:	40200e42 	eormi	r0, r0, r2, asr #28
     70c:	81400880 	smlalbbhi	r0, r0, r0, r8	; <UNPREDICTABLE>
     710:	06844007 	streq	r4, [r4], r7
     714:	40058540 	andmi	r8, r5, r0, asr #10
     718:	87400486 	strbhi	r0, [r0, -r6, lsl #9]
     71c:	02884003 	addeq	r4, r8, #3
     720:	00018e40 	andeq	r8, r1, r0, asr #28
     724:	0000000c 	andeq	r0, r0, ip
     728:	00000640 	andeq	r0, r0, r0, asr #12
     72c:	00000000 	andeq	r0, r0, r0
     730:	0000000c 	andeq	r0, r0, ip
     734:	0000000c 	andeq	r0, r0, ip
     738:	00000640 	andeq	r0, r0, r0, asr #12
     73c:	00000000 	andeq	r0, r0, r0
     740:	0000000c 	andeq	r0, r0, ip
     744:	0000000c 	andeq	r0, r0, ip
     748:	00000640 	andeq	r0, r0, r0, asr #12
     74c:	08001af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip}
     750:	0000000c 	andeq	r0, r0, ip
     754:	0000000c 	andeq	r0, r0, ip
     758:	00000640 	andeq	r0, r0, r0, asr #12
     75c:	00000000 	andeq	r0, r0, r0
     760:	0000001c 	andeq	r0, r0, ip, lsl r0
     764:	0000000c 	andeq	r0, r0, ip
     768:	00000640 	andeq	r0, r0, r0, asr #12
     76c:	08001b00 	stmdaeq	r0, {r8, r9, fp, ip}
     770:	00000002 	andeq	r0, r0, r2
     774:	0000000c 	andeq	r0, r0, ip
     778:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     77c:	7c020001 	stcvc	0, cr0, [r2], {1}
     780:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     784:	00000028 	andeq	r0, r0, r8, lsr #32
     788:	00000774 	andeq	r0, r0, r4, ror r7
     78c:	00000000 	andeq	r0, r0, r0
     790:	00000228 	andeq	r0, r0, r8, lsr #4
     794:	40180e42 	andsmi	r0, r8, r2, asr #28
     798:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     79c:	04864005 	streq	r4, [r6], #5
     7a0:	40038740 	andmi	r8, r3, r0, asr #14
     7a4:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     7a8:	d80e4201 	stmdale	lr, {r0, r9, lr}
     7ac:	00000002 	andeq	r0, r0, r2
     7b0:	0000000c 	andeq	r0, r0, ip
     7b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     7b8:	7c020001 	stcvc	0, cr0, [r2], {1}
     7bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     7c0:	00000024 	andeq	r0, r0, r4, lsr #32
     7c4:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
     7c8:	08001b04 	stmdaeq	r0, {r2, r8, r9, fp, ip}
     7cc:	00000070 	andeq	r0, r0, r0, ror r0
     7d0:	40180e41 	andsmi	r0, r8, r1, asr #28
     7d4:	84400683 	strbhi	r0, [r0], #-1667	; 0x683
     7d8:	04854005 	streq	r4, [r5], #5
     7dc:	40038640 	andmi	r8, r3, r0, asr #12
     7e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7e4:	00000001 	andeq	r0, r0, r1
     7e8:	00000020 	andeq	r0, r0, r0, lsr #32
     7ec:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
     7f0:	08001b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, ip}
     7f4:	0000003a 	andeq	r0, r0, sl, lsr r0
     7f8:	40100e41 	andsmi	r0, r0, r1, asr #28
     7fc:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     800:	02864003 	addeq	r4, r6, #3
     804:	41018e40 	tstmi	r1, r0, asr #28
     808:	0000300e 	andeq	r3, r0, lr
     80c:	00000024 	andeq	r0, r0, r4, lsr #32
     810:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
     814:	08001bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp, ip}
     818:	0000005e 	andeq	r0, r0, lr, asr r0
     81c:	40140e41 	andsmi	r0, r4, r1, asr #28
     820:	85400584 	strbhi	r0, [r0, #-1412]	; 0x584
     824:	03864004 	orreq	r4, r6, #4
     828:	40028740 	andmi	r8, r2, r0, asr #14
     82c:	0e44018e 	dvfeqd	f0, f4, #0.5
     830:	00000038 	andeq	r0, r0, r8, lsr r0
     834:	00000024 	andeq	r0, r0, r4, lsr #32
     838:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
     83c:	08001c10 	stmdaeq	r0, {r4, sl, fp, ip}
     840:	000000c8 	andeq	r0, r0, r8, asr #1
     844:	40180e42 	andsmi	r0, r8, r2, asr #28
     848:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     84c:	04864005 	streq	r4, [r6], #5
     850:	40038740 	andmi	r8, r3, r0, asr #14
     854:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     858:	780e5301 	stmdavc	lr, {r0, r8, r9, ip, lr}
     85c:	00000028 	andeq	r0, r0, r8, lsr #32
     860:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
     864:	08001cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, ip}
     868:	000000e0 	andeq	r0, r0, r0, ror #1
     86c:	40180e42 	andsmi	r0, r8, r2, asr #28
     870:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     874:	04864005 	streq	r4, [r6], #5
     878:	40038740 	andmi	r8, r3, r0, asr #14
     87c:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     880:	980e4201 	stmdals	lr, {r0, r9, lr}
     884:	00000002 	andeq	r0, r0, r2
     888:	00000020 	andeq	r0, r0, r0, lsr #32
     88c:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
     890:	08001db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, ip}
     894:	000000b4 	strheq	r0, [r0], -r4
     898:	40100e41 	andsmi	r0, r0, r1, asr #28
     89c:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     8a0:	02864003 	addeq	r4, r6, #3
     8a4:	41018e40 	tstmi	r1, r0, asr #28
     8a8:	0001f00e 	andeq	pc, r1, lr
     8ac:	00000028 	andeq	r0, r0, r8, lsr #32
     8b0:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
     8b4:	08001e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip}
     8b8:	00000084 	andeq	r0, r0, r4, lsl #1
     8bc:	40180e42 	andsmi	r0, r8, r2, asr #28
     8c0:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     8c4:	04864005 	streq	r4, [r6], #5
     8c8:	40038740 	andmi	r8, r3, r0, asr #14
     8cc:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     8d0:	980e4101 	stmdals	lr, {r0, r8, lr}
     8d4:	00000002 	andeq	r0, r0, r2
     8d8:	0000000c 	andeq	r0, r0, ip
     8dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     8e0:	7c020001 	stcvc	0, cr0, [r2], {1}
     8e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     8e8:	00000024 	andeq	r0, r0, r4, lsr #32
     8ec:	000008d8 	ldrdeq	r0, [r0], -r8
     8f0:	08001ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, ip}
     8f4:	00000054 	andeq	r0, r0, r4, asr r0
     8f8:	40140e41 	andsmi	r0, r4, r1, asr #28
     8fc:	85400584 	strbhi	r0, [r0, #-1412]	; 0x584
     900:	03864004 	orreq	r4, r6, #4
     904:	40028740 	andmi	r8, r2, r0, asr #14
     908:	0e42018e 	dvfeqd	f0, f2, #0.5
     90c:	00000058 	andeq	r0, r0, r8, asr r0
     910:	0000002c 	andeq	r0, r0, ip, lsr #32
     914:	000008d8 	ldrdeq	r0, [r0], -r8
     918:	08001f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, ip}
     91c:	0000009c 	muleq	r0, ip, r0
     920:	40200e42 	eormi	r0, r0, r2, asr #28
     924:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     928:	06864007 	streq	r4, [r6], r7
     92c:	40058740 	andmi	r8, r5, r0, asr #14
     930:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     934:	028a4003 	addeq	r4, sl, #3
     938:	42018e40 	andmi	r8, r1, #64, 28	; 0x400
     93c:	0000600e 	andeq	r6, r0, lr
     940:	0000001c 	andeq	r0, r0, ip, lsl r0
     944:	000008d8 	ldrdeq	r0, [r0], -r8
     948:	08001fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip}
     94c:	0000002c 	andeq	r0, r0, ip, lsr #32
     950:	40080e41 	andmi	r0, r8, r1, asr #28
     954:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     958:	c80e4101 	stmdagt	lr, {r0, r8, lr}
     95c:	00000001 	andeq	r0, r0, r1
     960:	00000018 	andeq	r0, r0, r8, lsl r0
     964:	000008d8 	ldrdeq	r0, [r0], -r8
     968:	0800200c 	stmdaeq	r0, {r2, r3, sp}
     96c:	00000018 	andeq	r0, r0, r8, lsl r0
     970:	40080e41 	andmi	r0, r8, r1, asr #28
     974:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     978:	480e4101 	stmdami	lr, {r0, r8, lr}
     97c:	00000028 	andeq	r0, r0, r8, lsr #32
     980:	000008d8 	ldrdeq	r0, [r0], -r8
     984:	08002024 	stmdaeq	r0, {r2, r5, sp}
     988:	000000c0 	andeq	r0, r0, r0, asr #1
     98c:	401c0e42 	andsmi	r0, ip, r2, asr #28
     990:	85400784 	strbhi	r0, [r0, #-1924]	; 0x784
     994:	05864006 	streq	r4, [r6, #6]
     998:	40048740 	andmi	r8, r4, r0, asr #14
     99c:	89400388 	stmdbhi	r0, {r3, r7, r8, r9}^
     9a0:	018e4002 	orreq	r4, lr, r2
     9a4:	02c80e41 	sbceq	r0, r8, #1040	; 0x410
     9a8:	00000028 	andeq	r0, r0, r8, lsr #32
     9ac:	000008d8 	ldrdeq	r0, [r0], -r8
     9b0:	080020e4 	stmdaeq	r0, {r2, r5, r6, r7, sp}
     9b4:	000000c0 	andeq	r0, r0, r0, asr #1
     9b8:	40180e42 	andsmi	r0, r8, r2, asr #28
     9bc:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     9c0:	04864005 	streq	r4, [r6], #5
     9c4:	40038740 	andmi	r8, r3, r0, asr #14
     9c8:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     9cc:	c00e4101 	andgt	r4, lr, r1, lsl #2
     9d0:	00000003 	andeq	r0, r0, r3
     9d4:	0000000c 	andeq	r0, r0, ip
     9d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     9dc:	7c020001 	stcvc	0, cr0, [r2], {1}
     9e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     9e4:	00000014 	andeq	r0, r0, r4, lsl r0
     9e8:	000009d4 	ldrdeq	r0, [r0], -r4
     9ec:	080021a4 	stmdaeq	r0, {r2, r5, r7, r8, sp}
     9f0:	0000001e 	andeq	r0, r0, lr, lsl r0
     9f4:	40040e41 	andmi	r0, r4, r1, asr #28
     9f8:	00000184 	andeq	r0, r0, r4, lsl #3
     9fc:	00000018 	andeq	r0, r0, r8, lsl r0
     a00:	000009d4 	ldrdeq	r0, [r0], -r4
     a04:	080021c4 	stmdaeq	r0, {r2, r6, r7, r8, sp}
     a08:	0000006e 	andeq	r0, r0, lr, rrx
     a0c:	40040e41 	andmi	r0, r4, r1, asr #28
     a10:	0e420184 	dvfeqd	f0, f2, f4
     a14:	00000028 	andeq	r0, r0, r8, lsr #32
     a18:	0000001c 	andeq	r0, r0, ip, lsl r0
     a1c:	000009d4 	ldrdeq	r0, [r0], -r4
     a20:	08002234 	stmdaeq	r0, {r2, r4, r5, r9, sp}
     a24:	0000009a 	muleq	r0, sl, r0
     a28:	40100e44 	andsmi	r0, r0, r4, asr #28
     a2c:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     a30:	02864003 	addeq	r4, r6, #3
     a34:	00018740 	andeq	r8, r1, r0, asr #14
     a38:	0000001c 	andeq	r0, r0, ip, lsl r0
     a3c:	000009d4 	ldrdeq	r0, [r0], -r4
     a40:	080022d0 	stmdaeq	r0, {r4, r6, r7, r9, sp}
     a44:	000000c2 	andeq	r0, r0, r2, asr #1
     a48:	40100e41 	andsmi	r0, r0, r1, asr #28
     a4c:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     a50:	02864003 	addeq	r4, r6, #3
     a54:	00018740 	andeq	r8, r1, r0, asr #14
     a58:	00000018 	andeq	r0, r0, r8, lsl r0
     a5c:	000009d4 	ldrdeq	r0, [r0], -r4
     a60:	08002394 	stmdaeq	r0, {r2, r4, r7, r8, r9, sp}
     a64:	00000046 	andeq	r0, r0, r6, asr #32
     a68:	400c0e42 	andmi	r0, ip, r2, asr #28
     a6c:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     a70:	01864002 	orreq	r4, r6, r2
     a74:	00000018 	andeq	r0, r0, r8, lsl r0
     a78:	000009d4 	ldrdeq	r0, [r0], -r4
     a7c:	080023dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sp}
     a80:	0000004c 	andeq	r0, r0, ip, asr #32
     a84:	400c0e41 	andmi	r0, ip, r1, asr #28
     a88:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     a8c:	01864002 	orreq	r4, r6, r2
     a90:	00000014 	andeq	r0, r0, r4, lsl r0
     a94:	000009d4 	ldrdeq	r0, [r0], -r4
     a98:	08002428 	stmdaeq	r0, {r3, r5, sl, sp}
     a9c:	00000046 	andeq	r0, r0, r6, asr #32
     aa0:	40040e41 	andmi	r0, r4, r1, asr #28
     aa4:	00000184 	andeq	r0, r0, r4, lsl #3
     aa8:	00000024 	andeq	r0, r0, r4, lsr #32
     aac:	000009d4 	ldrdeq	r0, [r0], -r4
     ab0:	08002470 	stmdaeq	r0, {r4, r5, r6, sl, sp}
     ab4:	00000088 	andeq	r0, r0, r8, lsl #1
     ab8:	40180e42 	andsmi	r0, r8, r2, asr #28
     abc:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     ac0:	04864005 	streq	r4, [r6], #5
     ac4:	40038740 	andmi	r8, r3, r0, asr #14
     ac8:	89400288 	stmdbhi	r0, {r3, r7, r9}^
     acc:	00000001 	andeq	r0, r0, r1
     ad0:	00000024 	andeq	r0, r0, r4, lsr #32
     ad4:	000009d4 	ldrdeq	r0, [r0], -r4
     ad8:	00000000 	andeq	r0, r0, r0
     adc:	000000b8 	strheq	r0, [r0], -r8
     ae0:	40180e42 	andsmi	r0, r8, r2, asr #28
     ae4:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     ae8:	04864005 	streq	r4, [r6], #5
     aec:	40038740 	andmi	r8, r3, r0, asr #14
     af0:	89400288 	stmdbhi	r0, {r3, r7, r9}^
     af4:	380e4401 	stmdacc	lr, {r0, sl, lr}
     af8:	00000018 	andeq	r0, r0, r8, lsl r0
     afc:	000009d4 	ldrdeq	r0, [r0], -r4
     b00:	00000000 	andeq	r0, r0, r0
     b04:	00000040 	andeq	r0, r0, r0, asr #32
     b08:	40080e42 	andmi	r0, r8, r2, asr #28
     b0c:	85400284 	strbhi	r0, [r0, #-644]	; 0x284
     b10:	00000001 	andeq	r0, r0, r1
     b14:	0000002c 	andeq	r0, r0, ip, lsr #32
     b18:	000009d4 	ldrdeq	r0, [r0], -r4
     b1c:	080024f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, sp}
     b20:	000005ea 	andeq	r0, r0, sl, ror #11
     b24:	40200e42 	eormi	r0, r0, r2, asr #28
     b28:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     b2c:	06864007 	streq	r4, [r6], r7
     b30:	40058740 	andmi	r8, r5, r0, asr #14
     b34:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     b38:	028a4003 	addeq	r4, sl, #3
     b3c:	42018b40 	andmi	r8, r1, #64, 22	; 0x10000
     b40:	0000400e 	andeq	r4, r0, lr
     b44:	0000001c 	andeq	r0, r0, ip, lsl r0
     b48:	000009d4 	ldrdeq	r0, [r0], -r4
     b4c:	00000000 	andeq	r0, r0, r0
     b50:	00000026 	andeq	r0, r0, r6, lsr #32
     b54:	400c0e41 	andmi	r0, ip, r1, asr #28
     b58:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     b5c:	018e4002 	orreq	r4, lr, r2
     b60:	00300e41 	eorseq	r0, r0, r1, asr #28
     b64:	0000002c 	andeq	r0, r0, ip, lsr #32
     b68:	000009d4 	ldrdeq	r0, [r0], -r4
     b6c:	08002ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, sp}
     b70:	00000634 	andeq	r0, r0, r4, lsr r6
     b74:	40200e42 	eormi	r0, r0, r2, asr #28
     b78:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     b7c:	06864007 	streq	r4, [r6], r7
     b80:	40058740 	andmi	r8, r5, r0, asr #14
     b84:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     b88:	028a4003 	addeq	r4, sl, #3
     b8c:	42018b40 	andmi	r8, r1, #64, 22	; 0x10000
     b90:	0001b00e 	andeq	fp, r1, lr
     b94:	0000000c 	andeq	r0, r0, ip
     b98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b9c:	7c020001 	stcvc	0, cr0, [r2], {1}
     ba0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ba4:	00000014 	andeq	r0, r0, r4, lsl r0
     ba8:	00000b94 	muleq	r0, r4, fp
     bac:	00000000 	andeq	r0, r0, r0
     bb0:	0000001e 	andeq	r0, r0, lr, lsl r0
     bb4:	40040e41 	andmi	r0, r4, r1, asr #28
     bb8:	00000184 	andeq	r0, r0, r4, lsl #3
     bbc:	00000030 	andeq	r0, r0, r0, lsr r0
     bc0:	00000b94 	muleq	r0, r4, fp
     bc4:	08003118 	stmdaeq	r0, {r3, r4, r8, ip, sp}
     bc8:	000001a0 	andeq	r0, r0, r0, lsr #3
     bcc:	40240e42 	eormi	r0, r4, r2, asr #28
     bd0:	85400984 	strbhi	r0, [r0, #-2436]	; 0x984
     bd4:	07864008 	streq	r4, [r6, r8]
     bd8:	40068740 	andmi	r8, r6, r0, asr #14
     bdc:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
     be0:	038a4004 	orreq	r4, sl, #4
     be4:	40028b40 	andmi	r8, r2, r0, asr #22
     be8:	0e42018e 	dvfeqd	f0, f2, #0.5
     bec:	00000050 	andeq	r0, r0, r0, asr r0
     bf0:	0000001c 	andeq	r0, r0, ip, lsl r0
     bf4:	00000b94 	muleq	r0, r4, fp
     bf8:	00000000 	andeq	r0, r0, r0
     bfc:	0000002c 	andeq	r0, r0, ip, lsr #32
     c00:	400c0e41 	andmi	r0, ip, r1, asr #28
     c04:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     c08:	018e4002 	orreq	r4, lr, r2
     c0c:	00300e41 	eorseq	r0, r0, r1, asr #28
     c10:	0000001c 	andeq	r0, r0, ip, lsl r0
     c14:	00000b94 	muleq	r0, r4, fp
     c18:	00000000 	andeq	r0, r0, r0
     c1c:	0000009a 	muleq	r0, sl, r0
     c20:	40100e44 	andsmi	r0, r0, r4, asr #28
     c24:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     c28:	02864003 	addeq	r4, r6, #3
     c2c:	00018740 	andeq	r8, r1, r0, asr #14
     c30:	0000001c 	andeq	r0, r0, ip, lsl r0
     c34:	00000b94 	muleq	r0, r4, fp
     c38:	00000000 	andeq	r0, r0, r0
     c3c:	000000c2 	andeq	r0, r0, r2, asr #1
     c40:	40100e41 	andsmi	r0, r0, r1, asr #28
     c44:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     c48:	02864003 	addeq	r4, r6, #3
     c4c:	00018740 	andeq	r8, r1, r0, asr #14
     c50:	0000001c 	andeq	r0, r0, ip, lsl r0
     c54:	00000b94 	muleq	r0, r4, fp
     c58:	080032b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, ip, sp}
     c5c:	00000058 	andeq	r0, r0, r8, asr r0
     c60:	400c0e41 	andmi	r0, ip, r1, asr #28
     c64:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     c68:	01864002 	orreq	r4, r6, r2
     c6c:	00300e42 	eorseq	r0, r0, r2, asr #28
     c70:	0000001c 	andeq	r0, r0, ip, lsl r0
     c74:	00000b94 	muleq	r0, r4, fp
     c78:	00000000 	andeq	r0, r0, r0
     c7c:	0000008e 	andeq	r0, r0, lr, lsl #1
     c80:	400c0e41 	andmi	r0, ip, r1, asr #28
     c84:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     c88:	01864002 	orreq	r4, r6, r2
     c8c:	00300e42 	eorseq	r0, r0, r2, asr #28
     c90:	00000030 	andeq	r0, r0, r0, lsr r0
     c94:	00000b94 	muleq	r0, r4, fp
     c98:	08003310 	stmdaeq	r0, {r4, r8, r9, ip, sp}
     c9c:	0000013e 	andeq	r0, r0, lr, lsr r1
     ca0:	40240e42 	eormi	r0, r4, r2, asr #28
     ca4:	85400984 	strbhi	r0, [r0, #-2436]	; 0x984
     ca8:	07864008 	streq	r4, [r6, r8]
     cac:	40068740 	andmi	r8, r6, r0, asr #14
     cb0:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
     cb4:	038a4004 	orreq	r4, sl, #4
     cb8:	40028b40 	andmi	r8, r2, r0, asr #22
     cbc:	0e42018e 	dvfeqd	f0, f2, #0.5
     cc0:	00000068 	andeq	r0, r0, r8, rrx
     cc4:	00000024 	andeq	r0, r0, r4, lsr #32
     cc8:	00000b94 	muleq	r0, r4, fp
     ccc:	00000000 	andeq	r0, r0, r0
     cd0:	000000d2 	ldrdeq	r0, [r0], -r2
     cd4:	40180e42 	andsmi	r0, r8, r2, asr #28
     cd8:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     cdc:	04864005 	streq	r4, [r6], #5
     ce0:	40038740 	andmi	r8, r3, r0, asr #14
     ce4:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     ce8:	580e4301 	stmdapl	lr, {r0, r8, r9, lr}
     cec:	0000000c 	andeq	r0, r0, ip
     cf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     cf4:	7c020001 	stcvc	0, cr0, [r2], {1}
     cf8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     cfc:	00000020 	andeq	r0, r0, r0, lsr #32
     d00:	00000cec 	andeq	r0, r0, ip, ror #25
     d04:	00000000 	andeq	r0, r0, r0
     d08:	00000040 	andeq	r0, r0, r0, asr #32
     d0c:	40100e41 	andsmi	r0, r0, r1, asr #28
     d10:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     d14:	02864003 	addeq	r4, r6, #3
     d18:	42018e40 	andmi	r8, r1, #64, 28	; 0x400
     d1c:	0000500e 	andeq	r5, r0, lr
     d20:	00000024 	andeq	r0, r0, r4, lsr #32
     d24:	00000cec 	andeq	r0, r0, ip, ror #25
     d28:	00000000 	andeq	r0, r0, r0
     d2c:	000000d4 	ldrdeq	r0, [r0], -r4
     d30:	40180e42 	andsmi	r0, r8, r2, asr #28
     d34:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     d38:	04864005 	streq	r4, [r6], #5
     d3c:	40038740 	andmi	r8, r3, r0, asr #14
     d40:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     d44:	780e4201 	stmdavc	lr, {r0, r9, lr}
     d48:	0000000c 	andeq	r0, r0, ip
     d4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d50:	7c020001 	stcvc	0, cr0, [r2], {1}
     d54:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d58:	00000020 	andeq	r0, r0, r0, lsr #32
     d5c:	00000d48 	andeq	r0, r0, r8, asr #26
     d60:	08003450 	stmdaeq	r0, {r4, r6, sl, ip, sp}
     d64:	00000058 	andeq	r0, r0, r8, asr r0
     d68:	40140e42 	andsmi	r0, r4, r2, asr #28
     d6c:	85400584 	strbhi	r0, [r0, #-1412]	; 0x584
     d70:	03864004 	orreq	r4, r6, #4
     d74:	40028740 	andmi	r8, r2, r0, asr #14
     d78:	00000188 	andeq	r0, r0, r8, lsl #3
     d7c:	0000002c 	andeq	r0, r0, ip, lsr #32
     d80:	00000d48 	andeq	r0, r0, r8, asr #26
     d84:	080034a8 	stmdaeq	r0, {r3, r5, r7, sl, ip, sp}
     d88:	00001f64 	andeq	r1, r0, r4, ror #30
     d8c:	40200e42 	eormi	r0, r0, r2, asr #28
     d90:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     d94:	06864007 	streq	r4, [r6], r7
     d98:	40058740 	andmi	r8, r5, r0, asr #14
     d9c:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     da0:	028a4003 	addeq	r4, sl, #3
     da4:	41018b40 	tstmi	r1, r0, asr #22
     da8:	0001900e 	andeq	r9, r1, lr
     dac:	00000024 	andeq	r0, r0, r4, lsr #32
     db0:	00000d48 	andeq	r0, r0, r8, asr #26
     db4:	0800540c 	stmdaeq	r0, {r2, r3, sl, ip, lr}
     db8:	0000008e 	andeq	r0, r0, lr, lsl #1
     dbc:	40180e42 	andsmi	r0, r8, r2, asr #28
     dc0:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     dc4:	04864005 	streq	r4, [r6], #5
     dc8:	40038740 	andmi	r8, r3, r0, asr #14
     dcc:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     dd0:	00000001 	andeq	r0, r0, r1
     dd4:	00000030 	andeq	r0, r0, r0, lsr r0
     dd8:	00000d48 	andeq	r0, r0, r8, asr #26
     ddc:	0800549c 	stmdaeq	r0, {r2, r3, r4, r7, sl, ip, lr}
     de0:	00000218 	andeq	r0, r0, r8, lsl r2
     de4:	40240e42 	eormi	r0, r4, r2, asr #28
     de8:	85400984 	strbhi	r0, [r0, #-2436]	; 0x984
     dec:	07864008 	streq	r4, [r6, r8]
     df0:	40068740 	andmi	r8, r6, r0, asr #14
     df4:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
     df8:	038a4004 	orreq	r4, sl, #4
     dfc:	40028b40 	andmi	r8, r2, r0, asr #22
     e00:	0e46018e 	dvfeqd	f0, f6, #0.5
     e04:	00000030 	andeq	r0, r0, r0, lsr r0
     e08:	0000000c 	andeq	r0, r0, ip
     e0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e10:	7c020001 	stcvc	0, cr0, [r2], {1}
     e14:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e18:	0000002c 	andeq	r0, r0, ip, lsr #32
     e1c:	00000e08 	andeq	r0, r0, r8, lsl #28
     e20:	080056b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, ip, lr}
     e24:	00000494 	muleq	r0, r4, r4
     e28:	40200e42 	eormi	r0, r0, r2, asr #28
     e2c:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     e30:	06864007 	streq	r4, [r6], r7
     e34:	40058740 	andmi	r8, r5, r0, asr #14
     e38:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     e3c:	028a4003 	addeq	r4, sl, #3
     e40:	41018b40 	tstmi	r1, r0, asr #22
     e44:	0003b00e 	andeq	fp, r3, lr
     e48:	0000002c 	andeq	r0, r0, ip, lsr #32
     e4c:	00000e08 	andeq	r0, r0, r8, lsl #28
     e50:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
     e54:	00000088 	andeq	r0, r0, r8, lsl #1
     e58:	40200e42 	eormi	r0, r0, r2, asr #28
     e5c:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     e60:	06864007 	streq	r4, [r6], r7
     e64:	40058740 	andmi	r8, r5, r0, asr #14
     e68:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     e6c:	028a4003 	addeq	r4, sl, #3
     e70:	42018e40 	andmi	r8, r1, #64, 28	; 0x400
     e74:	0001a00e 	andeq	sl, r1, lr
     e78:	00000030 	andeq	r0, r0, r0, lsr r0
     e7c:	00000e08 	andeq	r0, r0, r8, lsl #28
     e80:	08005bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, ip, lr}
     e84:	00000296 	muleq	r0, r6, r2
     e88:	40240e42 	eormi	r0, r4, r2, asr #28
     e8c:	85400984 	strbhi	r0, [r0, #-2436]	; 0x984
     e90:	07864008 	streq	r4, [r6, r8]
     e94:	40068740 	andmi	r8, r6, r0, asr #14
     e98:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
     e9c:	038a4004 	orreq	r4, sl, #4
     ea0:	40028b40 	andmi	r8, r2, r0, asr #22
     ea4:	0e42018e 	dvfeqd	f0, f2, #0.5
     ea8:	00000190 	muleq	r0, r0, r1
     eac:	0000000c 	andeq	r0, r0, ip
     eb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     eb4:	7c020001 	stcvc	0, cr0, [r2], {1}
     eb8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ebc:	0000000c 	andeq	r0, r0, ip
     ec0:	00000eac 	andeq	r0, r0, ip, lsr #29
     ec4:	00000000 	andeq	r0, r0, r0
     ec8:	00000018 	andeq	r0, r0, r8, lsl r0
     ecc:	0000000c 	andeq	r0, r0, ip
     ed0:	00000eac 	andeq	r0, r0, ip, lsr #29
     ed4:	00000000 	andeq	r0, r0, r0
     ed8:	00000008 	andeq	r0, r0, r8
     edc:	00000030 	andeq	r0, r0, r0, lsr r0
     ee0:	00000eac 	andeq	r0, r0, ip, lsr #29
     ee4:	00000000 	andeq	r0, r0, r0
     ee8:	00000100 	andeq	r0, r0, r0, lsl #2
     eec:	40280e42 	eormi	r0, r8, r2, asr #28
     ef0:	84400a83 	strbhi	r0, [r0], #-2691	; 0xa83
     ef4:	08854009 	stmeq	r5, {r0, r3, lr}
     ef8:	40078640 	andmi	r8, r7, r0, asr #12
     efc:	88400687 	stmdahi	r0, {r0, r1, r2, r7, r9, sl}^
     f00:	04894005 	streq	r4, [r9], #5
     f04:	40038a40 	andmi	r8, r3, r0, asr #20
     f08:	8e40028b 	cdphi	2, 4, cr0, cr0, cr11, {4}
     f0c:	00000001 	andeq	r0, r0, r1
     f10:	0000000c 	andeq	r0, r0, ip
     f14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f18:	7c020001 	stcvc	0, cr0, [r2], {1}
     f1c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f20:	0000000c 	andeq	r0, r0, ip
     f24:	00000f10 	andeq	r0, r0, r0, lsl pc
     f28:	08005e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, ip, lr}
     f2c:	0000000a 	andeq	r0, r0, sl
     f30:	0000000c 	andeq	r0, r0, ip
     f34:	00000f10 	andeq	r0, r0, r0, lsl pc
     f38:	08005e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp, ip, lr}
     f3c:	00000010 	andeq	r0, r0, r0, lsl r0
     f40:	00000034 	andeq	r0, r0, r4, lsr r0
     f44:	00000f10 	andeq	r0, r0, r0, lsl pc
     f48:	08005e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, lr}
     f4c:	000000d6 	ldrdeq	r0, [r0], -r6
     f50:	40300e42 	eorsmi	r0, r0, r2, asr #28
     f54:	81400c80 	smlalbbhi	r0, r0, r0, ip	; <UNPREDICTABLE>
     f58:	0a82400b 	beq	fe090f8c <BootRAM+0xd00172d>
     f5c:	40098440 	andmi	r8, r9, r0, asr #8
     f60:	86400885 	strbhi	r0, [r0], -r5, lsl #17
     f64:	06874007 	streq	r4, [r7], r7
     f68:	40058840 	andmi	r8, r5, r0, asr #16
     f6c:	8a400489 	bhi	1002198 <__Stack_Size+0x1001998>
     f70:	028b4003 	addeq	r4, fp, #3
     f74:	00018e40 	andeq	r8, r1, r0, asr #28
     f78:	00000018 	andeq	r0, r0, r8, lsl r0
     f7c:	00000f10 	andeq	r0, r0, r0, lsl pc
     f80:	08005f5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sl, fp, ip, lr}
     f84:	00000040 	andeq	r0, r0, r0, asr #32
     f88:	40080e42 	andmi	r0, r8, r2, asr #28
     f8c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     f90:	00000001 	andeq	r0, r0, r1
     f94:	0000000c 	andeq	r0, r0, ip
     f98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f9c:	7c020001 	stcvc	0, cr0, [r2], {1}
     fa0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fa4:	00000018 	andeq	r0, r0, r8, lsl r0
     fa8:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
     fac:	08005f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip, lr}
     fb0:	00000044 	andeq	r0, r0, r4, asr #32
     fb4:	40080e41 	andmi	r0, r8, r1, asr #28
     fb8:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
     fbc:	00000001 	andeq	r0, r0, r1
     fc0:	00000028 	andeq	r0, r0, r8, lsr #32
     fc4:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
     fc8:	08005fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
     fcc:	000001ac 	andeq	r0, r0, ip, lsr #3
     fd0:	40180e42 	andsmi	r0, r8, r2, asr #28
     fd4:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     fd8:	04864005 	streq	r4, [r6], #5
     fdc:	40038740 	andmi	r8, r3, r0, asr #14
     fe0:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     fe4:	f80e4101 			; <UNDEFINED> instruction: 0xf80e4101
     fe8:	00000003 	andeq	r0, r0, r3
     fec:	0000000c 	andeq	r0, r0, ip
     ff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ff4:	7c020001 	stcvc	0, cr0, [r2], {1}
     ff8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ffc:	0000000c 	andeq	r0, r0, ip
    1000:	00000fec 	andeq	r0, r0, ip, ror #31
    1004:	00000000 	andeq	r0, r0, r0
    1008:	0000000c 	andeq	r0, r0, ip
    100c:	0000000c 	andeq	r0, r0, ip
    1010:	00000fec 	andeq	r0, r0, ip, ror #31
    1014:	00000000 	andeq	r0, r0, r0
    1018:	0000000c 	andeq	r0, r0, ip
    101c:	0000000c 	andeq	r0, r0, ip
    1020:	00000fec 	andeq	r0, r0, ip, ror #31
    1024:	00000000 	andeq	r0, r0, r0
    1028:	0000000c 	andeq	r0, r0, ip
    102c:	0000000c 	andeq	r0, r0, ip
    1030:	00000fec 	andeq	r0, r0, ip, ror #31
    1034:	00000000 	andeq	r0, r0, r0
    1038:	0000000c 	andeq	r0, r0, ip
    103c:	0000000c 	andeq	r0, r0, ip
    1040:	00000fec 	andeq	r0, r0, ip, ror #31
    1044:	00000000 	andeq	r0, r0, r0
    1048:	0000000c 	andeq	r0, r0, ip
    104c:	0000000c 	andeq	r0, r0, ip
    1050:	00000fec 	andeq	r0, r0, ip, ror #31
    1054:	00000000 	andeq	r0, r0, r0
    1058:	0000000c 	andeq	r0, r0, ip
    105c:	0000000c 	andeq	r0, r0, ip
    1060:	00000fec 	andeq	r0, r0, ip, ror #31
    1064:	00000000 	andeq	r0, r0, r0
    1068:	0000000c 	andeq	r0, r0, ip
    106c:	0000000c 	andeq	r0, r0, ip
    1070:	00000fec 	andeq	r0, r0, ip, ror #31
    1074:	00000000 	andeq	r0, r0, r0
    1078:	00000010 	andeq	r0, r0, r0, lsl r0
    107c:	0000000c 	andeq	r0, r0, ip
    1080:	00000fec 	andeq	r0, r0, ip, ror #31
    1084:	00000000 	andeq	r0, r0, r0
    1088:	0000000c 	andeq	r0, r0, ip
    108c:	0000000c 	andeq	r0, r0, ip
    1090:	00000fec 	andeq	r0, r0, ip, ror #31
    1094:	00000000 	andeq	r0, r0, r0
    1098:	0000000e 	andeq	r0, r0, lr
    109c:	0000000c 	andeq	r0, r0, ip
    10a0:	00000fec 	andeq	r0, r0, ip, ror #31
    10a4:	00000000 	andeq	r0, r0, r0
    10a8:	00000010 	andeq	r0, r0, r0, lsl r0
    10ac:	0000000c 	andeq	r0, r0, ip
    10b0:	00000fec 	andeq	r0, r0, ip, ror #31
    10b4:	00000000 	andeq	r0, r0, r0
    10b8:	0000001c 	andeq	r0, r0, ip, lsl r0
    10bc:	0000000c 	andeq	r0, r0, ip
    10c0:	00000fec 	andeq	r0, r0, ip, ror #31
    10c4:	00000000 	andeq	r0, r0, r0
    10c8:	00000012 	andeq	r0, r0, r2, lsl r0
    10cc:	0000000c 	andeq	r0, r0, ip
    10d0:	00000fec 	andeq	r0, r0, ip, ror #31
    10d4:	0800618c 	stmdaeq	r0, {r2, r3, r7, r8, sp, lr}
    10d8:	0000002a 	andeq	r0, r0, sl, lsr #32
    10dc:	0000000c 	andeq	r0, r0, ip
    10e0:	00000fec 	andeq	r0, r0, ip, ror #31
    10e4:	00000000 	andeq	r0, r0, r0
    10e8:	0000002a 	andeq	r0, r0, sl, lsr #32
    10ec:	0000000c 	andeq	r0, r0, ip
    10f0:	00000fec 	andeq	r0, r0, ip, ror #31
    10f4:	00000000 	andeq	r0, r0, r0
    10f8:	00000024 	andeq	r0, r0, r4, lsr #32
    10fc:	0000000c 	andeq	r0, r0, ip
    1100:	00000fec 	andeq	r0, r0, ip, ror #31
    1104:	00000000 	andeq	r0, r0, r0
    1108:	00000012 	andeq	r0, r0, r2, lsl r0
    110c:	0000000c 	andeq	r0, r0, ip
    1110:	00000fec 	andeq	r0, r0, ip, ror #31
    1114:	00000000 	andeq	r0, r0, r0
    1118:	00000012 	andeq	r0, r0, r2, lsl r0
    111c:	0000000c 	andeq	r0, r0, ip
    1120:	00000fec 	andeq	r0, r0, ip, ror #31
    1124:	00000000 	andeq	r0, r0, r0
    1128:	0000001e 	andeq	r0, r0, lr, lsl r0
    112c:	0000000c 	andeq	r0, r0, ip
    1130:	00000fec 	andeq	r0, r0, ip, ror #31
    1134:	080061b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sp, lr}
    1138:	0000001e 	andeq	r0, r0, lr, lsl r0
    113c:	0000000c 	andeq	r0, r0, ip
    1140:	00000fec 	andeq	r0, r0, ip, ror #31
    1144:	00000000 	andeq	r0, r0, r0
    1148:	0000001e 	andeq	r0, r0, lr, lsl r0
    114c:	0000000c 	andeq	r0, r0, ip
    1150:	00000fec 	andeq	r0, r0, ip, ror #31
    1154:	00000000 	andeq	r0, r0, r0
    1158:	0000001c 	andeq	r0, r0, ip, lsl r0
    115c:	0000000c 	andeq	r0, r0, ip
    1160:	00000fec 	andeq	r0, r0, ip, ror #31
    1164:	080061d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sp, lr}
    1168:	0000001c 	andeq	r0, r0, ip, lsl r0
    116c:	0000000c 	andeq	r0, r0, ip
    1170:	00000fec 	andeq	r0, r0, ip, ror #31
    1174:	00000000 	andeq	r0, r0, r0
    1178:	0000001e 	andeq	r0, r0, lr, lsl r0
    117c:	0000000c 	andeq	r0, r0, ip
    1180:	00000fec 	andeq	r0, r0, ip, ror #31
    1184:	00000000 	andeq	r0, r0, r0
    1188:	0000001e 	andeq	r0, r0, lr, lsl r0
    118c:	0000000c 	andeq	r0, r0, ip
    1190:	00000fec 	andeq	r0, r0, ip, ror #31
    1194:	00000000 	andeq	r0, r0, r0
    1198:	0000001c 	andeq	r0, r0, ip, lsl r0
    119c:	0000000c 	andeq	r0, r0, ip
    11a0:	00000fec 	andeq	r0, r0, ip, ror #31
    11a4:	00000000 	andeq	r0, r0, r0
    11a8:	0000001a 	andeq	r0, r0, sl, lsl r0
    11ac:	0000000c 	andeq	r0, r0, ip
    11b0:	00000fec 	andeq	r0, r0, ip, ror #31
    11b4:	00000000 	andeq	r0, r0, r0
    11b8:	0000001a 	andeq	r0, r0, sl, lsl r0
    11bc:	0000000c 	andeq	r0, r0, ip
    11c0:	00000fec 	andeq	r0, r0, ip, ror #31
    11c4:	00000000 	andeq	r0, r0, r0
    11c8:	00000018 	andeq	r0, r0, r8, lsl r0
    11cc:	0000000c 	andeq	r0, r0, ip
    11d0:	00000fec 	andeq	r0, r0, ip, ror #31
    11d4:	00000000 	andeq	r0, r0, r0
    11d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    11dc:	0000000c 	andeq	r0, r0, ip
    11e0:	00000fec 	andeq	r0, r0, ip, ror #31
    11e4:	00000000 	andeq	r0, r0, r0
    11e8:	00000020 	andeq	r0, r0, r0, lsr #32
    11ec:	0000000c 	andeq	r0, r0, ip
    11f0:	00000fec 	andeq	r0, r0, ip, ror #31
    11f4:	00000000 	andeq	r0, r0, r0
    11f8:	00000020 	andeq	r0, r0, r0, lsr #32
    11fc:	0000000c 	andeq	r0, r0, ip
    1200:	00000fec 	andeq	r0, r0, ip, ror #31
    1204:	080061f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sp, lr}
    1208:	00000020 	andeq	r0, r0, r0, lsr #32
    120c:	0000000c 	andeq	r0, r0, ip
    1210:	00000fec 	andeq	r0, r0, ip, ror #31
    1214:	08006210 	stmdaeq	r0, {r4, r9, sp, lr}
    1218:	00000020 	andeq	r0, r0, r0, lsr #32
    121c:	0000000c 	andeq	r0, r0, ip
    1220:	00000fec 	andeq	r0, r0, ip, ror #31
    1224:	00000000 	andeq	r0, r0, r0
    1228:	0000001e 	andeq	r0, r0, lr, lsl r0
    122c:	0000000c 	andeq	r0, r0, ip
    1230:	00000fec 	andeq	r0, r0, ip, ror #31
    1234:	00000000 	andeq	r0, r0, r0
    1238:	00000012 	andeq	r0, r0, r2, lsl r0
    123c:	0000000c 	andeq	r0, r0, ip
    1240:	00000fec 	andeq	r0, r0, ip, ror #31
    1244:	00000000 	andeq	r0, r0, r0
    1248:	00000020 	andeq	r0, r0, r0, lsr #32
    124c:	0000000c 	andeq	r0, r0, ip
    1250:	00000fec 	andeq	r0, r0, ip, ror #31
    1254:	00000000 	andeq	r0, r0, r0
    1258:	00000020 	andeq	r0, r0, r0, lsr #32
    125c:	0000000c 	andeq	r0, r0, ip
    1260:	00000fec 	andeq	r0, r0, ip, ror #31
    1264:	08006230 	stmdaeq	r0, {r4, r5, r9, sp, lr}
    1268:	0000001c 	andeq	r0, r0, ip, lsl r0
    126c:	0000000c 	andeq	r0, r0, ip
    1270:	00000fec 	andeq	r0, r0, ip, ror #31
    1274:	0800624c 	stmdaeq	r0, {r2, r3, r6, r9, sp, lr}
    1278:	0000001c 	andeq	r0, r0, ip, lsl r0
    127c:	0000000c 	andeq	r0, r0, ip
    1280:	00000fec 	andeq	r0, r0, ip, ror #31
    1284:	08006268 	stmdaeq	r0, {r3, r5, r6, r9, sp, lr}
    1288:	0000001c 	andeq	r0, r0, ip, lsl r0
    128c:	0000000c 	andeq	r0, r0, ip
    1290:	00000fec 	andeq	r0, r0, ip, ror #31
    1294:	00000000 	andeq	r0, r0, r0
    1298:	00000026 	andeq	r0, r0, r6, lsr #32
    129c:	0000000c 	andeq	r0, r0, ip
    12a0:	00000fec 	andeq	r0, r0, ip, ror #31
    12a4:	08006284 	stmdaeq	r0, {r2, r7, r9, sp, lr}
    12a8:	00000040 	andeq	r0, r0, r0, asr #32
    12ac:	0000000c 	andeq	r0, r0, ip
    12b0:	00000fec 	andeq	r0, r0, ip, ror #31
    12b4:	00000000 	andeq	r0, r0, r0
    12b8:	00000020 	andeq	r0, r0, r0, lsr #32
    12bc:	0000000c 	andeq	r0, r0, ip
    12c0:	00000fec 	andeq	r0, r0, ip, ror #31
    12c4:	00000000 	andeq	r0, r0, r0
    12c8:	00000020 	andeq	r0, r0, r0, lsr #32
    12cc:	00000018 	andeq	r0, r0, r8, lsl r0
    12d0:	00000fec 	andeq	r0, r0, ip, ror #31
    12d4:	00000000 	andeq	r0, r0, r0
    12d8:	00000038 	andeq	r0, r0, r8, lsr r0
    12dc:	40080e41 	andmi	r0, r8, r1, asr #28
    12e0:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    12e4:	00000001 	andeq	r0, r0, r1
    12e8:	0000000c 	andeq	r0, r0, ip
    12ec:	00000fec 	andeq	r0, r0, ip, ror #31
    12f0:	00000000 	andeq	r0, r0, r0
    12f4:	00000020 	andeq	r0, r0, r0, lsr #32
    12f8:	0000000c 	andeq	r0, r0, ip
    12fc:	00000fec 	andeq	r0, r0, ip, ror #31
    1300:	00000000 	andeq	r0, r0, r0
    1304:	00000020 	andeq	r0, r0, r0, lsr #32
    1308:	0000000c 	andeq	r0, r0, ip
    130c:	00000fec 	andeq	r0, r0, ip, ror #31
    1310:	00000000 	andeq	r0, r0, r0
    1314:	0000001c 	andeq	r0, r0, ip, lsl r0
    1318:	0000000c 	andeq	r0, r0, ip
    131c:	00000fec 	andeq	r0, r0, ip, ror #31
    1320:	00000000 	andeq	r0, r0, r0
    1324:	0000001c 	andeq	r0, r0, ip, lsl r0
    1328:	00000018 	andeq	r0, r0, r8, lsl r0
    132c:	00000fec 	andeq	r0, r0, ip, ror #31
    1330:	00000000 	andeq	r0, r0, r0
    1334:	000000a8 	andeq	r0, r0, r8, lsr #1
    1338:	40080e42 	andmi	r0, r8, r2, asr #28
    133c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    1340:	00000001 	andeq	r0, r0, r1
    1344:	0000000c 	andeq	r0, r0, ip
    1348:	00000fec 	andeq	r0, r0, ip, ror #31
    134c:	00000000 	andeq	r0, r0, r0
    1350:	0000005c 	andeq	r0, r0, ip, asr r0
    1354:	0000000c 	andeq	r0, r0, ip
    1358:	00000fec 	andeq	r0, r0, ip, ror #31
    135c:	00000000 	andeq	r0, r0, r0
    1360:	0000005c 	andeq	r0, r0, ip, asr r0
    1364:	0000000c 	andeq	r0, r0, ip
    1368:	00000fec 	andeq	r0, r0, ip, ror #31
    136c:	00000000 	andeq	r0, r0, r0
    1370:	00000020 	andeq	r0, r0, r0, lsr #32
    1374:	0000000c 	andeq	r0, r0, ip
    1378:	00000fec 	andeq	r0, r0, ip, ror #31
    137c:	00000000 	andeq	r0, r0, r0
    1380:	00000020 	andeq	r0, r0, r0, lsr #32
    1384:	0000000c 	andeq	r0, r0, ip
    1388:	00000fec 	andeq	r0, r0, ip, ror #31
    138c:	00000000 	andeq	r0, r0, r0
    1390:	00000044 	andeq	r0, r0, r4, asr #32
    1394:	0000000c 	andeq	r0, r0, ip
    1398:	00000fec 	andeq	r0, r0, ip, ror #31
    139c:	00000000 	andeq	r0, r0, r0
    13a0:	0000003a 	andeq	r0, r0, sl, lsr r0
    13a4:	0000000c 	andeq	r0, r0, ip
    13a8:	00000fec 	andeq	r0, r0, ip, ror #31
    13ac:	00000000 	andeq	r0, r0, r0
    13b0:	00000006 	andeq	r0, r0, r6
    13b4:	0000000c 	andeq	r0, r0, ip
    13b8:	00000fec 	andeq	r0, r0, ip, ror #31
    13bc:	00000000 	andeq	r0, r0, r0
    13c0:	0000000a 	andeq	r0, r0, sl
    13c4:	0000000c 	andeq	r0, r0, ip
    13c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    13cc:	7c020001 	stcvc	0, cr0, [r2], {1}
    13d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13d4:	0000001c 	andeq	r0, r0, ip, lsl r0
    13d8:	000013c4 	andeq	r1, r0, r4, asr #7
    13dc:	080062c4 	stmdaeq	r0, {r2, r6, r7, r9, sp, lr}
    13e0:	00000154 	andeq	r0, r0, r4, asr r1
    13e4:	40100e41 	andsmi	r0, r0, r1, asr #28
    13e8:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
    13ec:	02864003 	addeq	r4, r6, #3
    13f0:	00018e40 	andeq	r8, r1, r0, asr #28
    13f4:	00000018 	andeq	r0, r0, r8, lsl r0
    13f8:	000013c4 	andeq	r1, r0, r4, asr #7
    13fc:	00000000 	andeq	r0, r0, r0
    1400:	00000070 	andeq	r0, r0, r0, ror r0
    1404:	40080e41 	andmi	r0, r8, r1, asr #28
    1408:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
    140c:	00000001 	andeq	r0, r0, r1
    1410:	0000000c 	andeq	r0, r0, ip
    1414:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1418:	7c020001 	stcvc	0, cr0, [r2], {1}
    141c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1420:	00000018 	andeq	r0, r0, r8, lsl r0
    1424:	00001410 	andeq	r1, r0, r0, lsl r4
    1428:	08006418 	stmdaeq	r0, {r3, r4, sl, sp, lr}
    142c:	00000038 	andeq	r0, r0, r8, lsr r0
    1430:	40080e41 	andmi	r0, r8, r1, asr #28
    1434:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
    1438:	00000001 	andeq	r0, r0, r1
    143c:	0000000c 	andeq	r0, r0, ip
    1440:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1444:	7c020001 	stcvc	0, cr0, [r2], {1}
    1448:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    144c:	00000018 	andeq	r0, r0, r8, lsl r0
    1450:	0000143c 	andeq	r1, r0, ip, lsr r4
    1454:	08006450 	stmdaeq	r0, {r4, r6, sl, sp, lr}
    1458:	00000024 	andeq	r0, r0, r4, lsr #32
    145c:	40080e41 	andmi	r0, r8, r1, asr #28
    1460:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    1464:	00000001 	andeq	r0, r0, r1
    1468:	00000018 	andeq	r0, r0, r8, lsl r0
    146c:	0000143c 	andeq	r1, r0, ip, lsr r4
    1470:	08006474 	stmdaeq	r0, {r2, r4, r5, r6, sl, sp, lr}
    1474:	00000024 	andeq	r0, r0, r4, lsr #32
    1478:	40080e41 	andmi	r0, r8, r1, asr #28
    147c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    1480:	00000001 	andeq	r0, r0, r1
    1484:	00000018 	andeq	r0, r0, r8, lsl r0
    1488:	0000143c 	andeq	r1, r0, ip, lsr r4
    148c:	08006498 	stmdaeq	r0, {r3, r4, r7, sl, sp, lr}
    1490:	00000090 	muleq	r0, r0, r0
    1494:	40080e41 	andmi	r0, r8, r1, asr #28
    1498:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    149c:	00000001 	andeq	r0, r0, r1
    14a0:	00000028 	andeq	r0, r0, r8, lsr #32
    14a4:	0000143c 	andeq	r1, r0, ip, lsr r4
    14a8:	08006528 	stmdaeq	r0, {r3, r5, r8, sl, sp, lr}
    14ac:	000000a8 	andeq	r0, r0, r8, lsr #1
    14b0:	40200e43 	eormi	r0, r0, r3, asr #28
    14b4:	84400883 	strbhi	r0, [r0], #-2179	; 0x883
    14b8:	06854007 	streq	r4, [r5], r7
    14bc:	40058640 	andmi	r8, r5, r0, asr #12
    14c0:	88400487 	stmdahi	r0, {r0, r1, r2, r7, sl}^
    14c4:	02894003 	addeq	r4, r9, #3
    14c8:	00018e40 	andeq	r8, r1, r0, asr #28
    14cc:	00000018 	andeq	r0, r0, r8, lsl r0
    14d0:	0000143c 	andeq	r1, r0, ip, lsr r4
    14d4:	080065d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, sp, lr}
    14d8:	00000038 	andeq	r0, r0, r8, lsr r0
    14dc:	40080e41 	andmi	r0, r8, r1, asr #28
    14e0:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    14e4:	00000001 	andeq	r0, r0, r1
    14e8:	0000001c 	andeq	r0, r0, ip, lsl r0
    14ec:	0000143c 	andeq	r1, r0, ip, lsr r4
    14f0:	08006608 	stmdaeq	r0, {r3, r9, sl, sp, lr}
    14f4:	00000048 	andeq	r0, r0, r8, asr #32
    14f8:	40100e41 	andsmi	r0, r0, r1, asr #28
    14fc:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
    1500:	02854003 	addeq	r4, r5, #3
    1504:	00018e40 	andeq	r8, r1, r0, asr #28
    1508:	0000001c 	andeq	r0, r0, ip, lsl r0
    150c:	0000143c 	andeq	r1, r0, ip, lsr r4
    1510:	08006650 	stmdaeq	r0, {r4, r6, r9, sl, sp, lr}
    1514:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1518:	40100e41 	andsmi	r0, r0, r1, asr #28
    151c:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
    1520:	02854003 	addeq	r4, r5, #3
    1524:	00018e40 	andeq	r8, r1, r0, asr #28
    1528:	0000001c 	andeq	r0, r0, ip, lsl r0
    152c:	0000143c 	andeq	r1, r0, ip, lsr r4
    1530:	08006720 	stmdaeq	r0, {r5, r8, r9, sl, sp, lr}
    1534:	00000084 	andeq	r0, r0, r4, lsl #1
    1538:	40100e41 	andsmi	r0, r0, r1, asr #28
    153c:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
    1540:	02854003 	addeq	r4, r5, #3
    1544:	00018e40 	andeq	r8, r1, r0, asr #28
    1548:	00000018 	andeq	r0, r0, r8, lsl r0
    154c:	0000143c 	andeq	r1, r0, ip, lsr r4
    1550:	080067a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, sp, lr}
    1554:	00000024 	andeq	r0, r0, r4, lsr #32
    1558:	40080e41 	andmi	r0, r8, r1, asr #28
    155c:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
    1560:	00000001 	andeq	r0, r0, r1
    1564:	0000000c 	andeq	r0, r0, ip
    1568:	0000143c 	andeq	r1, r0, ip, lsr r4
    156c:	080067c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, sp, lr}
    1570:	0000001c 	andeq	r0, r0, ip, lsl r0
    1574:	00000018 	andeq	r0, r0, r8, lsl r0
    1578:	0000143c 	andeq	r1, r0, ip, lsr r4
    157c:	080067e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, sp, lr}
    1580:	00000040 	andeq	r0, r0, r0, asr #32
    1584:	40080e41 	andmi	r0, r8, r1, asr #28
    1588:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
    158c:	00000001 	andeq	r0, r0, r1
    1590:	00000024 	andeq	r0, r0, r4, lsr #32
    1594:	0000143c 	andeq	r1, r0, ip, lsr r4
    1598:	08006824 	stmdaeq	r0, {r2, r5, fp, sp, lr}
    159c:	000002dc 	ldrdeq	r0, [r0], -ip
    15a0:	40180e41 	andsmi	r0, r8, r1, asr #28
    15a4:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
    15a8:	04844005 	streq	r4, [r4], #5
    15ac:	40038540 	andmi	r8, r3, r0, asr #10
    15b0:	8e400286 	cdphi	2, 4, cr0, cr0, cr6, {4}
    15b4:	00000001 	andeq	r0, r0, r1
    15b8:	00000024 	andeq	r0, r0, r4, lsr #32
    15bc:	0000143c 	andeq	r1, r0, ip, lsr r4
    15c0:	08006b00 	stmdaeq	r0, {r8, r9, fp, sp, lr}
    15c4:	000000c8 	andeq	r0, r0, r8, asr #1
    15c8:	40180e41 	andsmi	r0, r8, r1, asr #28
    15cc:	84400683 	strbhi	r0, [r0], #-1667	; 0x683
    15d0:	04854005 	streq	r4, [r5], #5
    15d4:	40038640 	andmi	r8, r3, r0, asr #12
    15d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    15dc:	00000001 	andeq	r0, r0, r1
    15e0:	00000018 	andeq	r0, r0, r8, lsl r0
    15e4:	0000143c 	andeq	r1, r0, ip, lsr r4
    15e8:	08006bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, sp, lr}
    15ec:	00000038 	andeq	r0, r0, r8, lsr r0
    15f0:	400c0e41 	andmi	r0, ip, r1, asr #28
    15f4:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
    15f8:	018e4002 	orreq	r4, lr, r2
    15fc:	00000018 	andeq	r0, r0, r8, lsl r0
    1600:	0000143c 	andeq	r1, r0, ip, lsr r4
    1604:	08006c00 	stmdaeq	r0, {sl, fp, sp, lr}
    1608:	0000005c 	andeq	r0, r0, ip, asr r0
    160c:	40080e41 	andmi	r0, r8, r1, asr #28
    1610:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    1614:	00000001 	andeq	r0, r0, r1
    1618:	0000000c 	andeq	r0, r0, ip
    161c:	0000143c 	andeq	r1, r0, ip, lsr r4
    1620:	00000000 	andeq	r0, r0, r0
    1624:	00000002 	andeq	r0, r0, r2
    1628:	0000000c 	andeq	r0, r0, ip
    162c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1630:	7c020001 	stcvc	0, cr0, [r2], {1}
    1634:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1638:	00000018 	andeq	r0, r0, r8, lsl r0
    163c:	00001628 	andeq	r1, r0, r8, lsr #12
    1640:	08006c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, sp, lr}
    1644:	00000030 	andeq	r0, r0, r0, lsr r0
    1648:	400c0e41 	andmi	r0, ip, r1, asr #28
    164c:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
    1650:	018e4002 	orreq	r4, lr, r2
    1654:	00000018 	andeq	r0, r0, r8, lsl r0
    1658:	00001628 	andeq	r1, r0, r8, lsr #12
    165c:	08006c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, sp, lr}
    1660:	00000024 	andeq	r0, r0, r4, lsr #32
    1664:	40080e41 	andmi	r0, r8, r1, asr #28
    1668:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    166c:	00000001 	andeq	r0, r0, r1
    1670:	0000000c 	andeq	r0, r0, ip
    1674:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1678:	7c020001 	stcvc	0, cr0, [r2], {1}
    167c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1680:	00000014 	andeq	r0, r0, r4, lsl r0
    1684:	00001670 	andeq	r1, r0, r0, ror r6
    1688:	08006cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, sp, lr}
    168c:	00000012 	andeq	r0, r0, r2, lsl r0
    1690:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1694:	00018e02 	andeq	r8, r1, r2, lsl #28
    1698:	0000000c 	andeq	r0, r0, ip
    169c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    16a0:	7c020001 	stcvc	0, cr0, [r2], {1}
    16a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16a8:	0000000c 	andeq	r0, r0, ip
    16ac:	00001698 	muleq	r0, r8, r6
    16b0:	08006cc2 	stmdaeq	r0, {r1, r6, r7, sl, fp, sp, lr}
    16b4:	00000010 	andeq	r0, r0, r0, lsl r0
    16b8:	0000000c 	andeq	r0, r0, ip
    16bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    16c0:	7c020001 	stcvc	0, cr0, [r2], {1}
    16c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16c8:	00000020 	andeq	r0, r0, r0, lsr #32
    16cc:	000016b8 			; <UNDEFINED> instruction: 0x000016b8
    16d0:	00000000 	andeq	r0, r0, r0
    16d4:	00000040 	andeq	r0, r0, r0, asr #32
    16d8:	82080e41 	andhi	r0, r8, #1040	; 0x410
    16dc:	41018302 	tstmi	r1, r2, lsl #6
    16e0:	0484100e 	streq	r1, [r4], #14
    16e4:	0e41038e 	cdpeq	3, 4, cr0, cr1, cr14, {4}
    16e8:	00000180 	andeq	r0, r0, r0, lsl #3
    16ec:	00000020 	andeq	r0, r0, r0, lsr #32
    16f0:	000016b8 			; <UNDEFINED> instruction: 0x000016b8
    16f4:	08006cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, sp, lr}
    16f8:	00000048 	andeq	r0, r0, r8, asr #32
    16fc:	810c0e41 	tsthi	ip, r1, asr #28
    1700:	83028203 	movwhi	r8, #8707	; 0x2203
    1704:	100e4101 	andne	r4, lr, r1, lsl #2
    1708:	0e43048e 	cdpeq	4, 4, cr0, cr3, cr14, {4}
    170c:	00000180 	andeq	r0, r0, r0, lsl #3
    1710:	0000000c 	andeq	r0, r0, ip
    1714:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1718:	7c020001 	stcvc	0, cr0, [r2], {1}
    171c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1720:	0000000c 	andeq	r0, r0, ip
    1724:	00001710 	andeq	r1, r0, r0, lsl r7
    1728:	08006d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp, sp, lr}
    172c:	00000010 	andeq	r0, r0, r0, lsl r0
    1730:	0000000c 	andeq	r0, r0, ip
    1734:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1738:	7c020001 	stcvc	0, cr0, [r2], {1}
    173c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1740:	00000020 	andeq	r0, r0, r0, lsr #32
    1744:	00001730 	andeq	r1, r0, r0, lsr r7
    1748:	08006d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, sp, lr}
    174c:	000000b8 	strheq	r0, [r0], -r8
    1750:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
    1754:	86078508 	strhi	r8, [r7], -r8, lsl #10
    1758:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    175c:	8a038904 	bhi	e3b74 <__Stack_Size+0xe3374>
    1760:	00018e02 	andeq	r8, r1, r2, lsl #28
    1764:	00000028 	andeq	r0, r0, r8, lsr #32
    1768:	00001730 	andeq	r1, r0, r0, lsr r7
    176c:	00000000 	andeq	r0, r0, r0
    1770:	000000f2 	strdeq	r0, [r0], -r2
    1774:	80300e42 	eorshi	r0, r0, r2, asr #28
    1778:	820b810c 	andhi	r8, fp, #12, 2
    177c:	8509840a 	strhi	r8, [r9, #-1034]	; 0x40a
    1780:	87078608 	strhi	r8, [r7, -r8, lsl #12]
    1784:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
    1788:	8b038a04 	blhi	e3fa0 <__Stack_Size+0xe37a0>
    178c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1790:	00000024 	andeq	r0, r0, r4, lsr #32
    1794:	00001730 	andeq	r1, r0, r0, lsr r7
    1798:	08006de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, sp, lr}
    179c:	000001d8 	ldrdeq	r0, [r0], -r8
    17a0:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
    17a4:	86068507 	strhi	r8, [r6], -r7, lsl #10
    17a8:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    17ac:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    17b0:	900e4101 	andls	r4, lr, r1, lsl #2
    17b4:	00000001 	andeq	r0, r0, r1
    17b8:	0000000c 	andeq	r0, r0, ip
    17bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    17c0:	7c020001 	stcvc	0, cr0, [r2], {1}
    17c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    17c8:	00000020 	andeq	r0, r0, r0, lsr #32
    17cc:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
    17d0:	08006fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, sp, lr}
    17d4:	000000e4 	andeq	r0, r0, r4, ror #1
    17d8:	83200e42 	teqhi	r0, #1056	; 0x420
    17dc:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
    17e0:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    17e4:	89038804 	stmdbhi	r3, {r2, fp, pc}
    17e8:	00018e02 	andeq	r8, r1, r2, lsl #28
    17ec:	00000028 	andeq	r0, r0, r8, lsr #32
    17f0:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
    17f4:	080070a0 	stmdaeq	r0, {r5, r7, ip, sp, lr}
    17f8:	00000228 	andeq	r0, r0, r8, lsr #4
    17fc:	80300e42 	eorshi	r0, r0, r2, asr #28
    1800:	820b810c 	andhi	r8, fp, #12, 2
    1804:	8409830a 	strhi	r8, [r9], #-778	; 0x30a
    1808:	86078508 	strhi	r8, [r7], -r8, lsl #10
    180c:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    1810:	8a038904 	bhi	e3c28 <__Stack_Size+0xe3428>
    1814:	00018e02 	andeq	r8, r1, r2, lsl #28
    1818:	0000000c 	andeq	r0, r0, ip
    181c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1820:	7c020001 	stcvc	0, cr0, [r2], {1}
    1824:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1828:	00000018 	andeq	r0, r0, r8, lsl r0
    182c:	00001818 	andeq	r1, r0, r8, lsl r8
    1830:	080072c8 	stmdaeq	r0, {r3, r6, r7, r9, ip, sp, lr}
    1834:	00000030 	andeq	r0, r0, r0, lsr r0
    1838:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    183c:	41018e02 	tstmi	r1, r2, lsl #28
    1840:	0000700e 	andeq	r7, r0, lr
    1844:	00000018 	andeq	r0, r0, r8, lsl r0
    1848:	00001818 	andeq	r1, r0, r8, lsl r8
    184c:	080072f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, ip, sp, lr}
    1850:	0000001c 	andeq	r0, r0, ip, lsl r0
    1854:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    1858:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    185c:	00000001 	andeq	r0, r0, r1
    1860:	0000000c 	andeq	r0, r0, ip
    1864:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1868:	7c020001 	stcvc	0, cr0, [r2], {1}
    186c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1870:	00000014 	andeq	r0, r0, r4, lsl r0
    1874:	00001860 	andeq	r1, r0, r0, ror #16
    1878:	08007314 	stmdaeq	r0, {r2, r4, r8, r9, ip, sp, lr}
    187c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1880:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1884:	00018e02 	andeq	r8, r1, r2, lsl #28
    1888:	0000000c 	andeq	r0, r0, ip
    188c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1890:	7c020001 	stcvc	0, cr0, [r2], {1}
    1894:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1898:	00000018 	andeq	r0, r0, r8, lsl r0
    189c:	00001888 	andeq	r1, r0, r8, lsl #17
    18a0:	08007330 	stmdaeq	r0, {r4, r5, r8, r9, ip, sp, lr}
    18a4:	00000036 	andeq	r0, r0, r6, lsr r0
    18a8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    18ac:	86038504 	strhi	r8, [r3], -r4, lsl #10
    18b0:	00018e02 	andeq	r8, r1, r2, lsl #28
    18b4:	0000000c 	andeq	r0, r0, ip
    18b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    18bc:	7c020001 	stcvc	0, cr0, [r2], {1}
    18c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    18c4:	00000018 	andeq	r0, r0, r8, lsl r0
    18c8:	000018b4 			; <UNDEFINED> instruction: 0x000018b4
    18cc:	08007368 	stmdaeq	r0, {r3, r5, r6, r8, r9, ip, sp, lr}
    18d0:	00000088 	andeq	r0, r0, r8, lsl #1
    18d4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    18d8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    18dc:	00000001 	andeq	r0, r0, r1
    18e0:	0000000c 	andeq	r0, r0, ip
    18e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    18e8:	7c020001 	stcvc	0, cr0, [r2], {1}
    18ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    18f0:	00000018 	andeq	r0, r0, r8, lsl r0
    18f4:	000018e0 	andeq	r1, r0, r0, ror #17
    18f8:	080073f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip, sp, lr}
    18fc:	000000a8 	andeq	r0, r0, r8, lsr #1
    1900:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
    1904:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1908:	00018e02 	andeq	r8, r1, r2, lsl #28
    190c:	0000000c 	andeq	r0, r0, ip
    1910:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1914:	7c020001 	stcvc	0, cr0, [r2], {1}
    1918:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    191c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1920:	0000190c 	andeq	r1, r0, ip, lsl #18
    1924:	08007498 	stmdaeq	r0, {r3, r4, r7, sl, ip, sp, lr}
    1928:	0000004c 	andeq	r0, r0, ip, asr #32
    192c:	83180e41 	tsthi	r8, #1040	; 0x410
    1930:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
    1934:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    1938:	00018e02 	andeq	r8, r1, r2, lsl #28
    193c:	0000000c 	andeq	r0, r0, ip
    1940:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1944:	7c020001 	stcvc	0, cr0, [r2], {1}
    1948:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    194c:	00000018 	andeq	r0, r0, r8, lsl r0
    1950:	0000193c 	andeq	r1, r0, ip, lsr r9
    1954:	080074e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip, sp, lr}
    1958:	00000020 	andeq	r0, r0, r0, lsr #32
    195c:	83100e41 	tsthi	r0, #1040	; 0x410
    1960:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
    1964:	00018e02 	andeq	r8, r1, r2, lsl #28
    1968:	0000000c 	andeq	r0, r0, ip
    196c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1970:	7c020001 	stcvc	0, cr0, [r2], {1}
    1974:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1978:	0000000c 	andeq	r0, r0, ip
    197c:	00001968 	andeq	r1, r0, r8, ror #18
    1980:	08007504 	stmdaeq	r0, {r2, r8, sl, ip, sp, lr}
    1984:	00000012 	andeq	r0, r0, r2, lsl r0
    1988:	0000000c 	andeq	r0, r0, ip
    198c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1990:	7c020001 	stcvc	0, cr0, [r2], {1}
    1994:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1998:	00000018 	andeq	r0, r0, r8, lsl r0
    199c:	00001988 	andeq	r1, r0, r8, lsl #19
    19a0:	00000000 	andeq	r0, r0, r0
    19a4:	0000001a 	andeq	r0, r0, sl, lsl r0
    19a8:	83100e41 	tsthi	r0, #1040	; 0x410
    19ac:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
    19b0:	00018e02 	andeq	r8, r1, r2, lsl #28
    19b4:	00000018 	andeq	r0, r0, r8, lsl r0
    19b8:	00001988 	andeq	r1, r0, r8, lsl #19
    19bc:	00000000 	andeq	r0, r0, r0
    19c0:	000000bc 	strheq	r0, [r0], -ip
    19c4:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    19c8:	86038504 	strhi	r8, [r3], -r4, lsl #10
    19cc:	00018e02 	andeq	r8, r1, r2, lsl #28
    19d0:	0000000c 	andeq	r0, r0, ip
    19d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    19d8:	7c020001 	stcvc	0, cr0, [r2], {1}
    19dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    19e0:	0000000c 	andeq	r0, r0, ip
    19e4:	000019d0 	ldrdeq	r1, [r0], -r0
    19e8:	08007518 	stmdaeq	r0, {r3, r4, r8, sl, ip, sp, lr}
    19ec:	00000034 	andeq	r0, r0, r4, lsr r0

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	31425041 	cmpcc	r2, r1, asr #32
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00524e45 	subseq	r4, r2, r5, asr #28
       8:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
       c:	4c5f454d 	cfldr64mi	mvdx4, [pc], {77}	; 0x4d
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	52455441 	subpl	r5, r5, #1090519040	; 0x41000000
      14:	42535500 	subsmi	r5, r3, #0, 10
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	71655262 	cmnvc	r5, r2, ror #4
      1c:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	72747300 	rsbsvc	r7, r4, #0, 6
      24:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xe49
      28:	50410078 	subpl	r0, r1, r8, ror r0
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	53523242 	cmppl	r2, #536870916	; 0x20000004
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	4f005254 	svcmi	0x00005254
      34:	6544656e 	strbvs	r6, [r4, #-1390]	; 0x56e
      38:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	5f387500 	svcpl	0x00387500
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	43627375 	cmnmi	r2, #-738197503	; 0xd4000001
      48:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      4c:	73654467 	cmnvc	r5, #1728053248	; 0x67000000

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	70697263 	rsbvc	r7, r9, r3, ror #4
      54:	44726f74 	ldrbtmi	r6, [r2], #-3956	; 0xf74
      58:	75005546 	strvc	r5, [r0, #-1350]	; 0x546
      5c:	6e496273 	mcrvs	2, 2, r6, cr9, cr3, {3}
      60:	69007469 	stmdbvs	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
      64:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      68:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
      6c:	616c4300 	cmnvs	ip, r0, lsl #6
      70:	4e5f7373 	mrcmi	3, 2, r7, cr15, cr3, {3}
      74:	7461446f 	strbtvc	r4, [r1], #-1135	; 0x46f
      78:	65535f61 	ldrbvs	r5, [r3, #-3937]	; 0xf61
      7c:	00707574 	rsbseq	r7, r0, r4, ror r5
      80:	44627375 	strbtmi	r7, [r2], #-885	; 0x375
      84:	53496273 	movtpl	r6, #37491	; 0x9273
      88:	555f0052 	ldrbpl	r0, [pc, #-82]	; 3e <_Minimum_Stack_Size-0xc2>
      8c:	5f524553 	svcpl	0x00524553
      90:	4e415453 	mcrmi	4, 2, r5, cr1, cr3, {2}
      94:	44524144 	ldrbmi	r4, [r2], #-324	; 0x144
      98:	5145525f 	cmppl	r5, pc, asr r2
      9c:	54534555 	ldrbpl	r4, [r3], #-1365	; 0x555
      a0:	73550053 	cmpvc	r5, #83	; 0x53
      a4:	475f7265 	ldrbmi	r7, [pc, -r5, ror #4]
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      a8:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465
				{
					state_in->step = step_c;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ac:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      b0:	72547700 	subsvc	r7, r4, #0, 14
      b4:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
			*plainchar    = (fragment & 0x003) << 6;
      b8:	69537265 	ldmdbvs	r3, {r0, r2, r5, r6, r9, ip, sp, lr}^
      bc:	5500657a 	strpl	r6, [r0, #-1402]	; 0x57a
	state_in->plainchar = 0;
}

int base64_decode_block(const char* code_in, const int length_in, char* plaintext_out, base64_decodestate* state_in)
{
	const char* codechar = code_in;
      c0:	4c5f4253 	lfmmi	f4, 2, [pc], {83}	; 0x53
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
			*plainchar    = (fragment & 0x003) << 6;
	case step_d:
			do {
				if (codechar == code_in+length_in)
      c4:	41435f50 	cmpmi	r3, r0, asr pc
      c8:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
				{
					state_in->step = step_d;
      cc:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
					state_in->plainchar = *plainchar;
      d0:	61485152 	cmpvs	r8, r2, asr r1
					return plainchar - plaintext_out;
      d4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
      d8:	73750072 	cmnvc	r5, #114	; 0x72
				}
				fragment = (char)base64_decode_value(*codechar++);
      dc:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
      e0:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      e4:	63616672 	cmnvs	r1, #119537664	; 0x7200000
      e8:	74655365 	strbtvc	r5, [r5], #-869	; 0x365
				{
					state_in->step = step_d;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ec:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      f0:	50424100 	subpl	r4, r2, r0, lsl #2
      f4:	54535231 	ldrbpl	r5, [r3], #-561	; 0x231
		}
      f8:	525f0052 	subspl	r0, pc, #82	; 0x52
	}
	/* control should not reach here */
	return plainchar - plaintext_out;
}
      fc:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
	uint8_t x1z1[F25519_SIZE];
	uint8_t a[F25519_SIZE];

	f25519_mul__distinct(x1sq, x1, x1);
	f25519_mul__distinct(z1sq, z1, z1);
	f25519_mul__distinct(x1z1, x1, z1);
     100:	54535f45 	ldrbpl	r5, [r3], #-3909	; 0xf45
     104:	00455441 	subeq	r5, r5, r1, asr #8

	f25519_sub(a, x1sq, z1sq);
     108:	68746f6e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     10c:	50676e69 	rsbpl	r6, r7, r9, ror #28
	f25519_mul__distinct(x3, a, a);
     110:	00636f72 	rsbeq	r6, r3, r2, ror pc
     114:	5645445f 			; <UNDEFINED> instruction: 0x5645445f
     118:	5f454349 	svcpl	0x00454349

	f25519_mul_c(a, x1z1, 486662);
     11c:	4f464e49 	svcmi	0x00464e49
     120:	62737500 	rsbsvs	r7, r3, #0, 10
	f25519_add(a, x1sq, a);
     124:	61446f4e 	cmpvs	r4, lr, asr #30
     128:	65536174 	ldrbvs	r6, [r3, #-372]	; 0x174
     12c:	00707574 	rsbseq	r7, r0, r4, ror r5
	f25519_add(a, z1sq, a);
     130:	5f425355 	svcpl	0x00425355
     134:	55534e55 	ldrbpl	r4, [r3, #-3669]	; 0xe55
	f25519_mul__distinct(x1sq, x1z1, a);
     138:	524f5050 	subpl	r5, pc, #80	; 0x50
     13c:	50700054 	rsbspl	r0, r0, r4, asr r0
     140:	65706f72 	ldrbvs	r6, [r0, #-3954]!	; 0xf72
	f25519_mul_c(z3, x1sq, 4);
     144:	00797472 	rsbseq	r7, r9, r2, ror r4
     148:	77425355 	smlsldvc	r5, r2, r5, r3
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xe49
     150:	75007378 	strvc	r7, [r0, #-888]	; 0x378
     154:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
	f25519_sub(b, x3, z3); /* D */
     158:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     15c:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
	f25519_mul__distinct(da, a, b);
     160:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     164:	52006e6f 	andpl	r6, r0, #1776	; 0x6f0
     168:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec

	f25519_sub(b, x2, z2);
     16c:	41575f45 	cmpmi	r7, r5, asr #30
     170:	61005449 	tstvs	r0, r9, asr #8
	f25519_add(a, x3, z3); /* C */
     174:	6553746c 	ldrbvs	r7, [r3, #-1132]	; 0x46c
     178:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
     17c:	4e450067 	cdpmi	0, 4, cr0, cr5, cr7, {3}
	f25519_mul__distinct(cb, a, b);
     180:	494f5044 	stmdbmi	pc, {r2, r6, ip, lr}^	; <UNPREDICTABLE>
     184:	525f544e 	subspl	r5, pc, #1308622848	; 0x4e000000

	f25519_add(a, da, cb);
     188:	50494345 	subpl	r4, r9, r5, asr #6
     18c:	544e4549 	strbpl	r4, [lr], #-1353	; 0x549
     190:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
	f25519_mul__distinct(b, a, a);
     194:	65535f72 	ldrbvs	r5, [r3, #-3954]	; 0xf72
     198:	76654474 			; <UNDEFINED> instruction: 0x76654474
	f25519_mul__distinct(x5, z1, b);
     19c:	46656369 	strbtmi	r6, [r5], -r9, ror #6
     1a0:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
     1a4:	54006572 	strpl	r6, [r0], #-1394	; 0x572

	f25519_sub(a, da, cb);
     1a8:	00455552 	subeq	r5, r5, r2, asr r5
     1ac:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
	f25519_mul__distinct(b, a, a);
     1b0:	65447465 	strbvs	r7, [r4, #-1125]	; 0x465
     1b4:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     1b8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	00737365 	rsbseq	r7, r3, r5, ror #6
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	47627375 			; <UNDEFINED> instruction: 0x47627375
     1c4:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     1cc:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     1d0:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     1d4:	5500726f 	strpl	r7, [r0, #-623]	; 0x26f
		f25519_select(zm1, zm1, zm, bit);
     1d8:	775f6273 			; <UNDEFINED> instruction: 0x775f6273
     1dc:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     1e0:	76006874 			; <UNDEFINED> instruction: 0x76006874
		f25519_select(xm, xm, xms, bit);
     1e4:	00363175 	eorseq	r3, r6, r5, ror r1
     1e8:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
     1ec:	616d726f 	cmnvs	sp, pc, ror #4
		f25519_select(zm, zm, zms, bit);
     1f0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1f4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     1f8:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     200:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	73750066 	cmnvc	r5, #102	; 0x66
     208:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
	f25519_mul__distinct(result, zm1, xm);
     20c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     210:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
	f25519_normalize(result);
     214:	6f697461 	svcvs	0x00697461
     218:	6544006e 	strbvs	r0, [r4, #-110]	; 0x6e
}
     21c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     220:	6261545f 	rsbvs	r5, r1, #1593835520	; 0x5f000000
     224:	7500656c 	strvc	r6, [r0, #-1388]	; 0x56c
     228:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
     22c:	646e4574 	strbtvs	r4, [lr], #-1396	; 0x574
     230:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     234:	61654674 	smcvs	21604	; 0x5464
     238:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     23c:	45525f00 	ldrbmi	r5, [r2, #-3840]	; 0xf00
     240:	49504943 	ldmdbmi	r0, {r0, r1, r6, r8, fp, lr}^
     244:	5f544e45 	svcpl	0x00544e45
     248:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0x954
     24c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     250:	6f6c2067 	svcvs	0x006c2067
     254:	7520676e 	strvc	r6, [r0, #-1902]!	; 0x76e
     258:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     25c:	2064656e 	rsbcs	r6, r4, lr, ror #10
     260:	00746e69 	rsbseq	r6, r4, r9, ror #28
     264:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
     268:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
     26c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     270:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     274:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     278:	6144726f 	cmpvs	r4, pc, ror #4
     27c:	63006174 	movwvs	r6, #372	; 0x174
     280:	73614d72 	cmnvc	r1, #7296	; 0x1c80
     284:	5355006b 	cmppl	r5, #107	; 0x6b
     288:	55535f42 	ldrbpl	r5, [r3, #-3906]	; 0xf42
     28c:	53454343 	movtpl	r4, #21315	; 0x5343
     290:	53550053 	cmppl	r5, #83	; 0x53
     294:	6e495f42 	cdpvs	15, 4, cr5, cr9, cr2, {2}
     298:	55007469 	strpl	r7, [r0, #-1129]	; 0x469
     29c:	5f726573 	svcpl	0x00726573
     2a0:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
     2a4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     2a8:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     2ac:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     2b0:	65535f72 	ldrbvs	r5, [r3, #-3954]	; 0xf72
     2b4:	76654474 			; <UNDEFINED> instruction: 0x76654474
     2b8:	41656369 	cmnmi	r5, r9, ror #6
     2bc:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
     2c0:	43007373 	movwmi	r7, #883	; 0x373
     2c4:	7373616c 	cmnvc	r3, #108, 2
     2c8:	7461445f 	strbtvc	r4, [r1], #-1119	; 0x45f
     2cc:	65535f61 	ldrbvs	r5, [r3, #-3937]	; 0xf61
     2d0:	00707574 	rsbseq	r7, r0, r4, ror r5
     2d4:	47627375 			; <UNDEFINED> instruction: 0x47627375
     2d8:	65447465 	strbvs	r7, [r4, #-1125]	; 0x465
     2dc:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     2e0:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     2e4:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     2e8:	4400726f 	strmi	r7, [r0], #-623	; 0x26f
     2ec:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     2f0:	72505f65 	subsvc	r5, r0, #404	; 0x194
     2f4:	7265706f 	rsbvc	r7, r5, #111	; 0x6f
     2f8:	62007974 	andvs	r7, r0, #116, 18	; 0x1d0000
     2fc:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     300:	74536563 	ldrbvc	r6, [r3], #-1379	; 0x563
     304:	00657461 	rsbeq	r7, r5, r1, ror #8
     308:	4f534562 	svcmi	0x00534562
     30c:	746e6346 	strbtvc	r6, [lr], #-838	; 0x346
     310:	42535500 	subsmi	r5, r3, #0, 10
     314:	6c615677 	stclvs	6, cr5, [r1], #-476	; 0xfffffe24
     318:	00736575 	rsbseq	r6, r3, r5, ror r5
     31c:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     320:	455f454d 	ldrbmi	r4, [pc, #-1357]	; fffffddb <BootRAM+0xef7057c>
     324:	00464f53 	subeq	r4, r6, r3, asr pc
     328:	41627375 	smcmi	10037	; 0x2735
     32c:	6e497070 	mcrvs	0, 2, r7, cr9, cr0, {3}
     330:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
     334:	545f4343 	ldrbpl	r4, [pc], #-835	; 33c <_Minimum_Stack_Size+0x23c>
     338:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     33c:	75006665 	strvc	r6, [r0, #-1637]	; 0x665
     340:	65476273 	strbvs	r6, [r7, #-627]	; 0x273
     344:	6e754674 	mrcvs	6, 3, r4, cr5, cr4, {3}
     348:	6f697463 	svcvs	0x00697463
     34c:	446c616e 	strbtmi	r6, [ip], #-366	; 0x16e
     350:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     354:	6f747069 	svcvs	0x00747069
     358:	75760072 	ldrbvc	r0, [r6, #-114]!	; 0x72
     35c:	67003233 	smladxvs	r0, r3, r2, r3
     360:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
     364:	50687361 	rsbpl	r7, r8, r1, ror #6
     368:	53656761 	cmnpl	r5, #25427968	; 0x1840000
     36c:	00657a69 	rsbeq	r7, r5, r9, ror #20
     370:	61746f54 	cmnvs	r4, r4, asr pc
     374:	6e455f6c 	cdpvs	15, 4, cr5, cr5, cr12, {3}
     378:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
     37c:	5300746e 	movwpl	r7, #1134	; 0x46e
     380:	50457465 	subpl	r7, r5, r5, ror #8
     384:	61567852 	cmpvs	r6, r2, asr r8
     388:	0064696c 	rsbeq	r6, r4, ip, ror #18
     38c:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     390:	4f5f454d 	svcmi	0x005f454d
     394:	564e004e 	strbpl	r0, [lr], -lr, asr #32
     398:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     39c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     3a0:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     3a4:	646d436c 	strbtvs	r4, [sp], #-876	; 0x36c
     3a8:	45445f00 	strbmi	r5, [r4, #-3840]	; 0xf00
     3ac:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     3b0:	4f52505f 	svcmi	0x0052505f
     3b4:	73750050 	cmnvc	r5, #80	; 0x50
     3b8:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
     3bc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     3c0:	65446769 	strbvs	r6, [r4, #-1897]	; 0x769
     3c4:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     3c8:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     3cc:	44444100 	strbmi	r4, [r4], #-256	; 0x100
     3d0:	53534552 	cmppl	r3, #343932928	; 0x14800000
     3d4:	75004445 	strvc	r4, [r0, #-1093]	; 0x445
     3d8:	74536273 	ldrbvc	r6, [r3], #-627	; 0x273
     3dc:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     3e0:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     3e4:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     3e8:	7500726f 	strvc	r7, [r0, #-623]	; 0x26f
     3ec:	632e6273 	teqvs	lr, #805306375	; 0x30000007
     3f0:	73654400 	cmnvc	r5, #0, 8
     3f4:	70697263 	rsbvc	r7, r9, r3, ror #4
     3f8:	5f726f74 	svcpl	0x00726f74
     3fc:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
     400:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     404:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     408:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     40c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     410:	00657275 	rsbeq	r7, r5, r5, ror r2
     414:	5f434352 	svcpl	0x00434352
     418:	746f6c42 	strbtvc	r6, [pc], #-3138	; 420 <_Minimum_Stack_Size+0x320>
     41c:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     420:	65535f72 	ldrbvs	r5, [r3, #-3954]	; 0xf72
     424:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     428:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     42c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     430:	55006e6f 	strpl	r6, [r0, #-3695]	; 0xe6f
     434:	5f726573 	svcpl	0x00726573
     438:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
     43c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     440:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     444:	42484100 	submi	r4, r8, #0, 2
     448:	00524e45 	subseq	r4, r2, r5, asr #28
     44c:	50627375 	rsbpl	r7, r2, r5, ror r3
     450:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
     454:	52006e4f 	andpl	r6, r0, #1264	; 0x4f0
     458:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     45c:	4e495f45 	cdpmi	15, 4, cr5, cr9, cr5, {2}
     460:	4e524554 	mrcmi	5, 2, r4, cr2, cr4, {2}
     464:	52004c41 	andpl	r4, r0, #16640	; 0x4100
     468:	5f504578 	svcpl	0x00504578
     46c:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     470:	75007265 	strvc	r7, [r0, #-613]	; 0x265
     474:	6e456273 	mcrvs	2, 2, r6, cr5, cr3, {3}
     478:	52534962 	subspl	r4, r3, #1605632	; 0x188000
     47c:	62737500 	rsbsvs	r7, r3, #0, 10
     480:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0x552
     484:	6400656d 	strvs	r6, [r0], #-1389	; 0x56d
     488:	70557566 	subsvc	r7, r5, r6, ror #10
     48c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
     490:	65527942 	ldrbvs	r7, [r2, #-2370]	; 0x942
     494:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     498:	73750074 	cmnvc	r5, #116	; 0x74
     49c:	61745362 	cmnvs	r4, r2, ror #6
     4a0:	4f737574 	svcmi	0x00737574
     4a4:	75007475 	strvc	r7, [r0, #-1141]	; 0x475
     4a8:	65526273 	ldrbvs	r6, [r2, #-627]	; 0x273
     4ac:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0x573
     4b0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     4b4:	62737500 	rsbsvs	r7, r3, #0, 10
     4b8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     4bc:	73750074 	cmnvc	r5, #116	; 0x74
     4c0:	61745362 	cmnvs	r4, r2, ror #6
     4c4:	49737574 	ldmdbmi	r3!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
     4c8:	4552006e 	ldrbmi	r0, [r2, #-110]	; 0x6e
     4cc:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
     4d0:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
     4d4:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     4d8:	6f6c2067 	svcvs	0x006c2067
     4dc:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     4e0:	5000746e 	andpl	r7, r0, lr, ror #8
     4e4:	5245574f 	subpl	r5, r5, #20709376	; 0x13c0000
     4e8:	55004445 	strpl	r4, [r0, #-1093]	; 0x445
     4ec:	4c774253 	lfmmi	f4, 2, [r7], #-332	; 0xfffffeb4
     4f0:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
     4f4:	75007368 	strvc	r7, [r0, #-872]	; 0x368
     4f8:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
     4fc:	746e4974 	strbtvc	r4, [lr], #-2420	; 0x974
     500:	61667265 	cmnvs	r6, r5, ror #4
     504:	43006563 	movwmi	r6, #1379	; 0x563
     508:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
     50c:	435f746e 	cmpmi	pc, #1845493760	; 0x6e000000
     510:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     514:	61727567 	cmnvs	r2, r7, ror #10
     518:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     51c:	6e497700 	cdpvs	7, 4, cr7, cr9, cr0, {0}
     520:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
     524:	5f747075 	svcpl	0x00747075
     528:	6b73614d 	blvs	1cd8a64 <__Stack_Size+0x1cd8264>
     52c:	6f6f6200 	svcvs	0x006f6200
     530:	4544006c 	strbmi	r0, [r4, #-108]	; 0x6c
     534:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     538:	4345525f 	movtmi	r5, #21087	; 0x525f
     53c:	45495049 	strbmi	r5, [r9, #-73]	; 0x49
     540:	7500544e 	strvc	r5, [r0, #-1102]	; 0x44e
     544:	65476273 	strbvs	r6, [r7, #-627]	; 0x273
     548:	61745374 	cmnvs	r4, r4, ror r3
     54c:	43006574 	movwmi	r6, #1396	; 0x574
     550:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
     554:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     558:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     55c:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     560:	4e437700 	cdpmi	7, 4, cr7, cr3, cr0, {0}
     564:	75005254 	strvc	r5, [r0, #-596]	; 0x254
     568:	73446273 	movtvc	r6, #17011	; 0x4273
     56c:	73754262 	cmnvc	r5, #536870918	; 0x20000006
     570:	4e4f5000 	cdpmi	0, 4, cr5, cr15, cr0, {0}
     574:	45445f45 	strbmi	r5, [r4, #-3909]	; 0xf45
     578:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
     57c:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
     580:	62737500 	rsbsvs	r7, r3, #0, 10
     584:	70737553 	rsbsvc	r7, r3, r3, asr r5
     588:	00646e65 	rsbeq	r6, r4, r5, ror #28
     58c:	61746f54 	cmnvs	r4, r4, asr pc
     590:	6f435f6c 	svcvs	0x00435f6c
     594:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     598:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     59c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     5a0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     5a4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     5a8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     5ac:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     5b0:	6f697461 	svcvs	0x00697461
     5b4:	564e006e 	strbpl	r0, [lr], -lr, rrx
     5b8:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     5bc:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     5c0:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     5c4:	4552006c 	ldrbmi	r0, [r2, #-108]	; 0x6c
     5c8:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
     5cc:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0x55f
     5d0:	414e5245 	cmpmi	lr, r5, asr #4
     5d4:	7543004c 	strbvc	r0, [r3, #-76]	; 0x4c
     5d8:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     5dc:	6c415f74 	mcrrvs	15, 7, r5, r1, cr4
     5e0:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
     5e4:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
     5e8:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     5ec:	4100676e 	tstmi	r0, lr, ror #14
     5f0:	45324250 	ldrmi	r4, [r2, #-592]!	; 0x250
     5f4:	7200524e 	andvc	r5, r0, #-536870908	; 0xe0000004
     5f8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
     5fc:	5f007473 	svcpl	0x00007473
     600:	50444e45 	subpl	r4, r4, r5, asr #28
     604:	544e494f 	strbpl	r4, [lr], #-2383	; 0x94f
     608:	464e495f 			; <UNDEFINED> instruction: 0x464e495f
     60c:	6f43004f 	svcvs	0x0043004f
     610:	6f527970 	svcvs	0x00527970
     614:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     618:	43520065 	cmpmi	r2, #101	; 0x65
     61c:	44425f43 	strbmi	r5, [r2], #-3907	; 0xf43
     620:	5f005243 	svcpl	0x00005243
     624:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
     628:	55004543 	strpl	r4, [r0, #-1347]	; 0x543
     62c:	4e5f4253 	mrcmi	2, 2, r4, cr15, cr3, {2}
     630:	525f544f 	subspl	r5, pc, #1325400064	; 0x4f000000
     634:	59444145 	stmdbpl	r4, {r0, r2, r6, r8, lr}^
     638:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
     63c:	34204320 	strtcc	r4, [r0], #-800	; 0x320
     640:	342e382e 	strtcc	r3, [lr], #-2094	; 0x82e
     644:	31303220 	teqcc	r0, r0, lsr #4
     648:	32373034 	eorscc	r3, r7, #52	; 0x34
     64c:	72282035 	eorvc	r2, r8, #53	; 0x35
     650:	61656c65 	cmnvs	r5, r5, ror #24
     654:	20296573 	eorcs	r6, r9, r3, ror r5
     658:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
     65c:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
     660:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     664:	5f342d64 	svcpl	0x00342d64
     668:	72622d38 	rsbvc	r2, r2, #56, 26	; 0xe00
     66c:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     670:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
     674:	6f697369 	svcvs	0x00697369
     678:	3132206e 	teqcc	r2, lr, rrx
     67c:	37343133 			; <UNDEFINED> instruction: 0x37343133
     680:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
     684:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     688:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
     68c:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
     690:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
     694:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
     698:	6d2d2033 	stcvs	0, cr2, [sp, #-204]!	; 0xffffff34
     69c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     6a0:	6e692d62 	cdpvs	13, 6, cr2, cr9, cr2, {3}
     6a4:	77726574 			; <UNDEFINED> instruction: 0x77726574
     6a8:	206b726f 	rsbcs	r7, fp, pc, ror #4
     6ac:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     6b0:	2d20734f 	stccs	3, cr7, [r0, #-316]!	; 0xfffffec4
     6b4:	6e756666 	cdpvs	6, 7, cr6, cr5, cr6, {3}
     6b8:	6f697463 	svcvs	0x00697463
     6bc:	65732d6e 	ldrbvs	r2, [r3, #-3438]!	; 0xd6e
     6c0:	6f697463 	svcvs	0x00697463
     6c4:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
     6c8:	74616466 	strbtvc	r6, [r1], #-1126	; 0x466
     6cc:	65732d61 	ldrbvs	r2, [r3, #-3425]!	; 0xd61
     6d0:	6f697463 	svcvs	0x00697463
     6d4:	6200736e 	andvs	r7, r0, #-1207959551	; 0xb8000001
     6d8:	50746e49 	rsbspl	r6, r4, r9, asr #28
     6dc:	536b6361 	cmnpl	fp, #-2080374783	; 0x84000001
     6e0:	7500464f 	strvc	r4, [r0, #-1615]	; 0x64f
     6e4:	6f506273 	svcvs	0x00506273
     6e8:	4f726577 	svcmi	0x00726577
     6ec:	43006666 	movwmi	r6, #1638	; 0x666
     6f0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     6f4:	74536c6f 	ldrbvc	r6, [r3], #-3183	; 0xc6f
     6f8:	00657461 	rsbeq	r7, r5, r1, ror #8
     6fc:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     700:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     704:	73750074 	cmnvc	r5, #116	; 0x74
     708:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
     70c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
     710:	63616672 	cmnvs	r1, #119537664	; 0x7200000
     714:	65520065 	ldrbvs	r0, [r2, #-101]	; 0x65
     718:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0x573
     71c:	65640053 	strbvs	r0, [r4, #-83]!	; 0x53
     720:	0079616c 	rsbseq	r6, r9, ip, ror #2
     724:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xe49
     728:	43414652 	movtmi	r4, #5714	; 0x1652
     72c:	45525f45 	ldrbmi	r5, [r2, #-3909]	; 0xf45
     730:	49504943 	ldmdbmi	r0, {r0, r1, r6, r8, fp, lr}^
     734:	00544e45 	subseq	r4, r4, r5, asr #28
     738:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
     73c:	61746144 	cmnvs	r4, r4, asr #2
     740:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     744:	6c435f72 	mcrrvs	15, 7, r5, r3, cr2
     748:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
     74c:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
     750:	46006572 			; <UNDEFINED> instruction: 0x46006572
     754:	45534c41 	ldrbmi	r4, [r3, #-3137]	; 0xc41
     758:	47464300 	strbmi	r4, [r6, -r0, lsl #6]
     75c:	775f0052 			; <UNDEFINED> instruction: 0x775f0052
     760:	56676552 			; <UNDEFINED> instruction: 0x56676552
     764:	55006c61 	strpl	r6, [r0, #-3169]	; 0xc61
     768:	6d624253 	sfmvs	f4, 2, [r2, #-332]!	; 0xfffffeb4
     76c:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
     770:	54747365 	ldrbtpl	r7, [r4], #-869	; 0x365
     774:	00657079 	rsbeq	r7, r5, r9, ror r0
     778:	636f7250 	cmnvs	pc, #80, 4
     77c:	5f737365 	svcpl	0x00737365
     780:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     784:	4f5f7375 	svcmi	0x005f7375
     788:	73005455 	movwvc	r5, #1109	; 0x455
     78c:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xa69
     790:	00657079 	rsbeq	r7, r5, r9, ror r0
     794:	61656c43 	cmnvs	r5, r3, asr #24
     798:	74535f72 	ldrbvc	r5, [r3], #-3954	; 0xf72
     79c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     7a0:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xf5f
     7a4:	5f387500 	svcpl	0x00387500
     7a8:	46627375 			; <UNDEFINED> instruction: 0x46627375
     7ac:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
     7b0:	616e6f69 	cmnvs	lr, r9, ror #30
     7b4:	7365446c 	cmnvc	r5, #108, 8	; 0x6c000000
     7b8:	70697263 	rsbvc	r7, r9, r3, ror #4
     7bc:	00726f74 	rsbseq	r6, r2, r4, ror pc
     7c0:	5345525f 	movtpl	r5, #21087	; 0x525f
     7c4:	00544c55 	subseq	r4, r4, r5, asr ip
     7c8:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
     7cc:	666e495f 			; <UNDEFINED> instruction: 0x666e495f
     7d0:	6573006f 	ldrbvs	r0, [r3, #-111]!	; 0x6f
     7d4:	55707574 	ldrbpl	r7, [r0, #-1396]!	; 0x574
     7d8:	67004253 	smlsdvs	r0, r3, r2, r4
     7dc:	5f6f6970 	svcpl	0x006f6970
     7e0:	74697277 	strbtvc	r7, [r9], #-631	; 0x277
     7e4:	69625f65 	stmdbvs	r2!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     7e8:	73750074 	cmnvc	r5, #116	; 0x74
     7ec:	74614462 	strbtvc	r4, [r1], #-1122	; 0x462
     7f0:	74655361 	strbtvc	r5, [r5], #-865	; 0x361
     7f4:	43007075 	movwmi	r7, #117	; 0x75
     7f8:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
     7fc:	45525547 	ldrbmi	r5, [r2, #-1351]	; 0x547
     800:	49770044 	ldmdbmi	r7!, {r2, r6}^
     804:	00727473 	rsbseq	r7, r2, r3, ror r4
     808:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     80c:	5f746e65 	svcpl	0x00746e65
     810:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     814:	00657275 	rsbeq	r7, r5, r5, ror r2
     818:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     81c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
     820:	61686320 	cmnvs	r8, r0, lsr #6
     824:	52650072 	rsbpl	r0, r5, #114	; 0x72
     828:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
     82c:	74655365 	strbtvc	r5, [r5], #-869	; 0x365
     830:	006c6156 	rsbeq	r6, ip, r6, asr r1
     834:	5f525443 	svcpl	0x00525443
     838:	6400504c 	strvs	r5, [r0], #-76	; 0x4c
     83c:	70557566 	subsvc	r7, r5, r6, ror #10
     840:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
     844:	65527942 	ldrbvs	r7, [r2, #-2370]	; 0x942
     848:	00746573 	rsbseq	r6, r4, r3, ror r5
     84c:	47627375 			; <UNDEFINED> instruction: 0x47627375
     850:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465
     854:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     858:	62737500 	rsbsvs	r7, r3, #0, 10
     85c:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
     860:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     864:	61654665 	cmnvs	r5, r5, ror #12
     868:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     86c:	62735500 	rsbsvs	r5, r3, #0, 10
     870:	664f775f 			; <UNDEFINED> instruction: 0x664f775f
     874:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
     878:	45445f00 	strbmi	r5, [r4, #-3840]	; 0xf00
     87c:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     880:	4154535f 	cmpmi	r4, pc, asr r3
     884:	55004554 	strpl	r4, [r0, #-1364]	; 0x554
     888:	4e4f434e 	cdpmi	3, 4, cr4, cr15, cr14, {2}
     88c:	5443454e 	strbpl	r4, [r3], #-1358	; 0x54e
     890:	43004445 	movwmi	r4, #1093	; 0x445
     894:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
     898:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
     89c:	66696168 	strbtvs	r6, [r9], -r8, ror #2
     8a0:	68637369 	stmdavs	r3!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     8a4:	7365445c 	cmnvc	r5, #92, 8	; 0x5c000000
     8a8:	706f746b 	rsbvc	r7, pc, fp, ror #8
     8ac:	636e655c 	cmnvs	lr, #92, 10	; 0x17000000
     8b0:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0x16c
     8b4:	6f72705f 	svcvs	0x0072705f
     8b8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
     8bc:	6f6f625c 	svcvs	0x006f625c
     8c0:	616f6c74 	smcvs	63172	; 0xf6c4
     8c4:	5c726564 	cfldr64pl	mvdx6, [r2], #-400	; 0xfffffe70
     8c8:	334d5453 	movtcc	r5, #54355	; 0xd453
     8cc:	00314632 	eorseq	r4, r1, r2, lsr r6
     8d0:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     8d4:	535f454d 	cmppl	pc, #322961408	; 0x13400000
     8d8:	54524154 	ldrbpl	r4, [r2], #-340	; 0x154
     8dc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     8e0:	52495f43 	subpl	r5, r9, #268	; 0x10c
     8e4:	61684351 	cmnvs	r8, r1, asr r3
     8e8:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     8ec:	50627553 	rsbpl	r7, r2, r3, asr r5
     8f0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     8f4:	00797469 	rsbseq	r7, r9, r9, ror #8
     8f8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     8fc:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     900:	50646e45 	rsbpl	r6, r4, r5, asr #28
     904:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
     908:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     90c:	00657275 	rsbeq	r7, r5, r5, ror r2
     910:	43627375 	cmnmi	r2, #-738197503	; 0xd4000001
     914:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     918:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     91c:	00657275 	rsbeq	r7, r5, r5, ror r2
     920:	4548544f 	strbmi	r5, [r8, #-1103]	; 0x44f
     924:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
     928:	49504943 	ldmdbmi	r0, {r0, r1, r6, r8, fp, lr}^
     92c:	00544e45 	subseq	r4, r4, r5, asr #28
     930:	5f363175 	svcpl	0x00363175
     934:	50003875 	andpl	r3, r0, r5, ror r8
     938:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
     93c:	535f7373 	cmppl	pc, #-872415231	; 0xcc000001
     940:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     944:	4e495f73 	mcrmi	15, 2, r5, cr9, cr3, {3}
     948:	6f687300 	svcvs	0x00687300
     94c:	75207472 	strvc	r7, [r0, #-1138]!	; 0x472
     950:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     954:	2064656e 	rsbcs	r6, r4, lr, ror #10
     958:	00746e69 	rsbseq	r6, r4, r9, ror #28
     95c:	41545441 	cmpmi	r4, r1, asr #8
     960:	44454843 	strbmi	r4, [r5], #-2115	; 0x843
     964:	70457000 	subvc	r7, r5, r0
     968:	5f746e49 	svcpl	0x00746e49
     96c:	0054554f 	subseq	r5, r4, pc, asr #10
     970:	4349564e 	movtmi	r5, #38478	; 0x964e
     974:	5152495f 	cmppl	r2, pc, asr r9
     978:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     97c:	506c656e 	rsbpl	r6, ip, lr, ror #10
     980:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
     984:	6f697470 	svcvs	0x00697470
     988:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
     98c:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     990:	55530079 	ldrbpl	r0, [r3, #-121]	; 0x79
     994:	4e455053 	mcrmi	0, 2, r5, cr5, cr3, {2}
     998:	00444544 	subeq	r4, r4, r4, asr #10
     99c:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
     9a0:	43785250 	cmnmi	r8, #80, 4
     9a4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     9a8:	42535500 	subsmi	r5, r3, #0, 10
     9ac:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
     9b0:	7000524f 	andvc	r5, r0, pc, asr #4
     9b4:	6e497045 	cdpvs	0, 4, cr7, cr9, cr5, {2}
     9b8:	4e495f74 	mcrmi	15, 2, r5, cr9, cr4, {3}
     9bc:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     9c0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     9c4:	616c4300 	cmnvs	ip, r0, lsl #6
     9c8:	475f7373 			; <UNDEFINED> instruction: 0x475f7373
     9cc:	495f7465 	ldmdbmi	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     9d0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     9d4:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     9d8:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     9dc:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     9e0:	69766e00 	ldmdbvs	r6!, {r9, sl, fp, sp, lr}^
     9e4:	696e4963 	stmdbvs	lr!, {r0, r1, r5, r6, r8, fp, lr}^
     9e8:	38750074 	ldmdacc	r5!, {r2, r4, r5, r6}^
     9ec:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     9f0:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     9f4:	6556676e 	ldrbvs	r6, [r6, #-1902]	; 0x76e
     9f8:	726f646e 	rsbvc	r6, pc, #1845493760	; 0x6e000000
     9fc:	5f387500 	svcpl	0x00387500
     a00:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     a04:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     a08:	746e4967 	strbtvc	r4, [lr], #-2407	; 0x967
     a0c:	61667265 	cmnvs	r6, r5, ror #4
     a10:	75006563 	strvc	r6, [r0, #-1379]	; 0x563
     a14:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a18:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a1c:	41676e69 	cmnmi	r7, r9, ror #28
     a20:	0031746c 	eorseq	r7, r1, ip, ror #8
     a24:	755f3875 	ldrbvc	r3, [pc, #-2165]	; 1b7 <_Minimum_Stack_Size+0xb7>
     a28:	65446273 	strbvs	r6, [r4, #-627]	; 0x273
     a2c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     a30:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     a34:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     a38:	4644726f 	strbmi	r7, [r4], -pc, ror #4
     a3c:	38750055 	ldmdacc	r5!, {r0, r2, r4, r6}^
     a40:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     a44:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     a48:	6c41676e 	mcrrvs	7, 6, r6, r1, cr14
     a4c:	75003274 	strvc	r3, [r0, #-628]	; 0x274
     a50:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a54:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a58:	53676e69 	cmnpl	r7, #1680	; 0x690
     a5c:	61697265 	cmnvs	r9, r5, ror #4
     a60:	3875006c 	ldmdacc	r5!, {r2, r3, r5, r6}^
     a64:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     a68:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     a6c:	6c41676e 	mcrrvs	7, 6, r6, r1, cr14
     a70:	75003074 	strvc	r3, [r0, #-116]	; 0x74
     a74:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a78:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a7c:	50676e69 	rsbpl	r6, r7, r9, ror #28
     a80:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xf72
     a84:	75007463 	strvc	r7, [r0, #-1123]	; 0x463
     a88:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a8c:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a90:	4c676e69 	stclmi	14, cr6, [r7], #-420	; 0xfffffe5c
     a94:	49676e61 	stmdbmi	r7!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     a98:	73750064 	cmnvc	r5, #100	; 0x64
     a9c:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     aa0:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     aa4:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     aa8:	6200632e 	andvs	r6, r0, #-1207959552	; 0xb8000000
     aac:	36657361 	strbtcc	r7, [r5], -r1, ror #6
     ab0:	6e695f34 	mcrvs	15, 3, r5, cr9, cr4, {1}
     ab4:	655f7469 	ldrbvs	r7, [pc, #-1129]	; 653 <_Minimum_Stack_Size+0x553>
     ab8:	646f636e 	strbtvs	r6, [pc], #-878	; ac0 <__Stack_Size+0x2c0>
     abc:	61747365 	cmnvs	r4, r5, ror #6
     ac0:	72006574 	andvc	r6, r0, #116, 10	; 0x1d000000
     ac4:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
     ac8:	74730074 	ldrbtvc	r0, [r3], #-116	; 0x74
     acc:	415f7065 	cmpmi	pc, r5, rrx
     ad0:	73616200 	cmnvc	r1, #0, 4
     ad4:	5f343665 	svcpl	0x00343665
     ad8:	00627570 	rsbeq	r7, r2, r0, ror r5
     adc:	70657473 	rsbvc	r7, r5, r3, ror r4
     ae0:	6f00435f 	svcvs	0x0000435f
     ae4:	00326666 	eorseq	r6, r2, r6, ror #12
     ae8:	616d495f 	cmnvs	sp, pc, asr r9
     aec:	624f6567 	subvs	r6, pc, #432013312	; 0x19c00000
     af0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
     af4:	64616548 	strbtvs	r6, [r1], #-1352	; 0x548
     af8:	6f007265 	svcvs	0x00007265
     afc:	00346666 	eorseq	r6, r4, r6, ror #12
     b00:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
     b04:	735f3436 	cmpvc	pc, #905969664	; 0x36000000
     b08:	616e6769 	cmnvs	lr, r9, ror #14
     b0c:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     b10:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
     b14:	65730038 	ldrbvs	r0, [r3, #-56]!	; 0x38
     b18:	43707574 	cmnmi	r0, #116, 10	; 0x1d000000
     b1c:	73004b4c 	movwvc	r4, #2892	; 0xb4c
     b20:	5f657a69 	svcpl	0x00657a69
     b24:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
     b28:	00747570 	rsbseq	r7, r4, r0, ror r5
     b2c:	5f646975 	svcpl	0x00646975
     b30:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
     b34:	61687300 	cmnvs	r8, r0, lsl #6
     b38:	5f363532 	svcpl	0x00363532
     b3c:	61647075 	smcvs	18181	; 0x4705
     b40:	65006574 	strvs	r6, [r0, #-1396]	; 0x574
     b44:	646f636e 	strbtvs	r6, [pc], #-878	; b4c <__Stack_Size+0x34c>
     b48:	36625f65 	strbtcc	r5, [r2], -r5, ror #30
     b4c:	5f5f0034 	svcpl	0x005f0034
     b50:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
     b54:	745f3233 	ldrbvc	r3, [pc], #-563	; b5c <__Stack_Size+0x35c>
     b58:	65747300 	ldrbvs	r7, [r4, #-768]!	; 0x300
     b5c:	00615f70 	rsbeq	r5, r1, r0, ror pc
     b60:	70657473 	rsbvc	r7, r5, r3, ror r4
     b64:	5f00625f 	svcpl	0x0000625f
     b68:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     b6c:	5f363174 	svcpl	0x00363174
     b70:	74730074 	ldrbtvc	r0, [r3], #-116	; 0x74
     b74:	645f7065 	ldrbvs	r7, [pc], #-101	; b7c <__Stack_Size+0x37c>
     b78:	61687300 	cmnvs	r8, r0, lsl #6
     b7c:	5f363532 	svcpl	0x00363532
     b80:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
     b84:	70006873 	andvc	r6, r0, r3, ror r8
     b88:	6e69616c 	powvsez	f6, f1, #4.0
     b8c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     b90:	61687300 	cmnvs	r8, r0, lsl #6
     b94:	73363532 	teqvc	r6, #209715200	; 0xc800000
     b98:	73006d75 	movwvc	r6, #3445	; 0xd75
     b9c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     ba0:	7365526d 	cmnvc	r5, #-805306362	; 0xd0000006
     ba4:	62007465 	andvs	r7, r0, #1694498816	; 0x65000000
     ba8:	36657361 	strbtcc	r7, [r5], -r1, ror #6
     bac:	65645f34 	strbvs	r5, [r4, #-3892]!	; 0xf34
     bb0:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
     bb4:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
     bb8:	61620065 	cmnvs	r2, r5, rrx
     bbc:	34366573 	ldrtcc	r6, [r6], #-1395	; 0x573
     bc0:	636e655f 	cmnvs	lr, #398458880	; 0x17c00000
     bc4:	7365646f 	cmnvc	r5, #1862270976	; 0x6f000000
     bc8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     bcc:	73616200 	cmnvc	r1, #0, 4
     bd0:	5f343665 	svcpl	0x00343665
     bd4:	6f636564 	svcvs	0x00636564
     bd8:	625f6564 	subsvs	r6, pc, #100, 10	; 0x19000000
     bdc:	6b636f6c 	blvs	18dc994 <__Stack_Size+0x18dc194>
     be0:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
     be4:	4c467075 	mcrrmi	0, 7, r7, r6, cr5
     be8:	00485341 	subeq	r5, r8, r1, asr #6
     bec:	75426869 	strbvc	r6, [r2, #-2153]	; 0x869
     bf0:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     bf4:	61657200 	cmnvs	r5, r0, lsl #4
     bf8:	6e695064 	cdpvs	0, 6, cr5, cr9, cr4, {3}
     bfc:	616d4900 	cmnvs	sp, r0, lsl #18
     c00:	624f6567 	subvs	r6, pc, #432013312	; 0x19c00000
     c04:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
     c08:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     c0c:	7300656c 	movwvc	r6, #1388	; 0x56c
     c10:	5f706574 	svcpl	0x00706574
     c14:	656d0042 	strbvs	r0, [sp, #-66]!	; 0x42
     c18:	7465736d 	strbtvc	r7, [r5], #-877	; 0x36d
     c1c:	61687300 	cmnvs	r8, r0, lsl #6
     c20:	5f363532 	svcpl	0x00363532
     c24:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     c28:	64007374 	strvs	r7, [r0], #-884	; 0x374
     c2c:	69467566 	stmdbvs	r6, {r1, r2, r5, r6, r8, sl, ip, sp, lr}^
     c30:	6873696e 	ldmdavs	r3!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     c34:	6f6c7055 	svcvs	0x006c7055
     c38:	6f006461 	svcvs	0x00006461
     c3c:	00306666 	eorseq	r6, r0, r6, ror #12
     c40:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     c44:	5f38746e 	svcpl	0x0038746e
     c48:	65640074 	strbvs	r0, [r4, #-116]!	; 0x74
     c4c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
     c50:	3436625f 	ldrtcc	r6, [r6], #-607	; 0x25f
     c54:	4d686900 	stclmi	9, cr6, [r8, #-0]
     c58:	63696761 	cmnvs	r9, #25427968	; 0x1840000
     c5c:	62757000 	rsbsvs	r7, r5, #0
     c60:	6b63696c 	blvs	18db218 <__Stack_Size+0x18daa18>
     c64:	5f007965 	svcpl	0x00007965
     c68:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     c6c:	746e4965 	strbtvc	r4, [lr], #-2405	; 0x965
     c70:	616e7265 	cmnvs	lr, r5, ror #4
     c74:	6174536c 	cmnvs	r4, ip, ror #6
     c78:	72006574 	andvc	r6, r0, #116, 10	; 0x1d000000
     c7c:	43746f6f 	cmnmi	r4, #444	; 0x1bc
     c80:	64650041 	strbtvs	r0, [r5], #-65	; 0x41
     c84:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     c88:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
     c8c:	5f6f745f 	svcpl	0x006f745f
     c90:	00627570 	rsbeq	r7, r2, r0, ror r5
     c94:	73727563 	cmnvc	r2, #415236096	; 0x18c00000
     c98:	6900726f 	stmdbvs	r0, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
     c9c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0x16d
     ca0:	63656843 	cmnvs	r5, #4390912	; 0x430000
     ca4:	6f72466b 	svcvs	0x0072466b
     ca8:	6464416d 	strbtvs	r4, [r4], #-365	; 0x16d
     cac:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     cb0:	72747300 	rsbsvc	r7, r4, #0, 6
     cb4:	5065626f 	rsbpl	r6, r5, pc, ror #4
     cb8:	6e006e69 	cdpvs	14, 0, cr6, cr0, cr9, {3}
     cbc:	73755f6f 	cmnvc	r5, #444	; 0x1bc
     cc0:	6a5f7265 	bvs	17dd65c <__Stack_Size+0x17dce5c>
     cc4:	00706d75 	rsbseq	r6, r0, r5, ror sp
     cc8:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     ccc:	65730073 	ldrbvs	r0, [r3, #-115]!	; 0x73
     cd0:	4c707574 	cfldr64mi	mvdx7, [r0], #-464	; 0xfffffe30
     cd4:	6e414445 	cdpvs	4, 4, cr4, cr1, cr5, {2}
     cd8:	74754264 	ldrbtvc	r4, [r5], #-612	; 0x264
     cdc:	006e6f74 	rsbeq	r6, lr, r4, ror pc
     ce0:	75426869 	strbvc	r6, [r2, #-2153]	; 0x869
     ce4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     ce8:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     cec:	73006874 	movwvc	r6, #2164	; 0x874
     cf0:	35326168 	ldrcc	r6, [r2, #-360]!	; 0x168
     cf4:	6f635f36 	svcvs	0x00635f36
     cf8:	7865746e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     cfc:	61750074 	cmnvs	r5, r4, ror r0
     d00:	6e497472 	mcrvs	4, 2, r7, cr9, cr2, {3}
     d04:	61007469 	tstvs	r0, r9, ror #8
     d08:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     d0c:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
     d10:	65747300 	ldrbvs	r7, [r4, #-768]!	; 0x300
     d14:	00635f70 	rsbeq	r5, r3, r0, ror pc
     d18:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
     d1c:	655f3436 	ldrbvs	r3, [pc, #-1078]	; 8ee <__Stack_Size+0xee>
     d20:	646f636e 	strbtvs	r6, [pc], #-878	; d28 <__Stack_Size+0x528>
     d24:	65747365 	ldrbvs	r7, [r4, #-869]!	; 0x365
     d28:	68690070 	stmdavs	r9!, {r4, r5, r6}^
     d2c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     d30:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     d34:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0x6e
     d38:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
     d3c:	6d756a00 	vldmdbvs	r5!, {s13-s12}
     d40:	556f5470 	strbpl	r5, [pc, #-1136]!	; 8d8 <__Stack_Size+0xd8>
     d44:	00726573 	rsbseq	r6, r2, r3, ror r5
     d48:	6e69616d 	powvsez	f6, f1, #5.0
     d4c:	7500632e 	strvc	r6, [r0, #-814]	; 0x32e
     d50:	0064695f 	rsbeq	r6, r4, pc, asr r9
     d54:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     d58:	64650065 	strbtvs	r0, [r5], #-101	; 0x65
     d5c:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     d60:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
     d64:	6664006e 	strbtvs	r0, [r4], -lr, rrx
     d68:	6c705575 	cfldr64vs	mvdx5, [r0], #-468	; 0xfffffe2c
     d6c:	5364616f 	cmnpl	r4, #-1073741797	; 0xc000001b
     d70:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     d74:	74006465 	strvc	r6, [r0], #-1125	; 0x465
     d78:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
     d7c:	5f74696d 	svcpl	0x0074696d
     d80:	6c627570 	cfstr64vs	mvdx7, [r2], #-448	; 0xfffffe40
     d84:	656b6369 	strbvs	r6, [fp, #-873]!	; 0x369
     d88:	61645f79 	smcvs	17913	; 0x45f9
     d8c:	69006174 	stmdbvs	r0, {r2, r4, r5, r6, r8, sp, lr}
     d90:	6567616d 	strbvs	r6, [r7, #-365]!	; 0x16d
     d94:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     d98:	7500656c 	strvc	r6, [r0, #-1388]	; 0x56c
     d9c:	7571696e 	ldrbvc	r6, [r1, #-2414]!	; 0x96e
     da0:	00444965 	subeq	r4, r4, r5, ror #18
     da4:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
     da8:	655f3436 	ldrbvs	r3, [pc, #-1078]	; 97a <__Stack_Size+0x17a>
     dac:	646f636e 	strbtvs	r6, [pc], #-878	; db4 <__Stack_Size+0x5b4>
     db0:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
     db4:	656b636f 	strbvs	r6, [fp, #-879]!	; 0x36f
     db8:	7500646e 	strvc	r6, [r0, #-1134]	; 0x46e
     dbc:	5f747261 	svcpl	0x00747261
     dc0:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     dc4:	6f006674 	svcvs	0x00006674
     dc8:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
     dcc:	61620074 	smcvs	8196	; 0x2004
     dd0:	34366573 	ldrtcc	r6, [r6], #-1395	; 0x573
     dd4:	6365645f 	cmnvs	r5, #1593835520	; 0x5f000000
     dd8:	7365646f 	cmnvc	r5, #1862270976	; 0x6f000000
     ddc:	00706574 	rsbseq	r6, r0, r4, ror r5
     de0:	69536869 	ldmdbvs	r3, {r0, r3, r5, r6, fp, sp, lr}^
     de4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
     de8:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     dec:	6c006874 	stcvs	8, cr6, [r0], {116}	; 0x74
     df0:	54747361 	ldrbtpl	r7, [r4], #-865	; 0x361
     df4:	69006761 	stmdbvs	r0, {r0, r5, r6, r8, r9, sl, sp, lr}
     df8:	696b5368 	stmdbvs	fp!, {r3, r5, r6, r8, r9, ip, lr}^
     dfc:	73694470 	cmnvc	r9, #112, 8	; 0x70000000
     e00:	636e6174 	cmnvs	lr, #116, 2
     e04:	74730065 	ldrbtvc	r0, [r3], #-101	; 0x65
     e08:	6f637065 	svcvs	0x00637065
     e0c:	00746e75 	rsbseq	r6, r4, r5, ror lr
     e10:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
     e14:	655f3436 	ldrbvs	r3, [pc, #-1078]	; 9e6 <__Stack_Size+0x1e6>
     e18:	646f636e 	strbtvs	r6, [pc], #-878	; e20 <__Stack_Size+0x620>
     e1c:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
     e20:	006b636f 	rsbeq	r6, fp, pc, ror #6
     e24:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
     e28:	695f3436 	ldmdbvs	pc, {r1, r2, r4, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     e2c:	5f74696e 	svcpl	0x0074696e
     e30:	6f636564 	svcvs	0x00636564
     e34:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0x564
     e38:	00657461 	rsbeq	r7, r5, r1, ror #8
     e3c:	73616c66 	cmnvc	r1, #26112	; 0x6600
     e40:	61724568 	cmnvs	r2, r8, ror #10
     e44:	61506573 	cmpvs	r0, r3, ror r5
     e48:	42006567 	andmi	r6, r0, #432013312	; 0x19c00000
     e4c:	00525253 	subseq	r5, r2, r3, asr r2
     e50:	4f495047 	svcmi	0x00495047
     e54:	646f4d5f 	strbtvs	r4, [pc], #-3423	; e5c <__Stack_Size+0x65c>
     e58:	50470065 	subpl	r0, r7, r5, rrx
     e5c:	505f4f49 	subspl	r4, pc, r9, asr #30
     e60:	73006e69 	movwvc	r6, #3689	; 0xe69
     e64:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     e68:	7261486d 	rsbvc	r4, r1, #7143424	; 0x6d0000
     e6c:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
     e70:	62007465 	andvs	r7, r0, #1694498816	; 0x65000000
     e74:	3031706b 	eorscc	r7, r1, fp, rrx
     e78:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
     e7c:	4e720065 	cdpmi	0, 7, cr0, cr2, cr5, {3}
     e80:	00434956 	subeq	r4, r3, r6, asr r9
     e84:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
     e88:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     e8c:	74536c61 	ldrbvc	r6, [r3], #-3169	; 0xc61
     e90:	00657461 	rsbeq	r7, r5, r1, ror #8
     e94:	63656863 	cmnvs	r5, #6488064	; 0x630000
     e98:	646e416b 	strbtvs	r4, [lr], #-363	; 0x16b
     e9c:	61656c43 	cmnvs	r5, r3, asr #24
     ea0:	6f6f4272 	svcvs	0x006f4272
     ea4:	616f6c74 	smcvs	63172	; 0xf6c4
     ea8:	46726564 	ldrbtmi	r6, [r2], -r4, ror #10
     eac:	0067616c 	rsbeq	r6, r7, ip, ror #2
     eb0:	52534644 	subspl	r4, r3, #68, 12	; 0x4400000
     eb4:	69766e00 	ldmdbvs	r6!, {r9, sl, fp, sp, lr}^
     eb8:	73694463 	cmnvc	r9, #1660944384	; 0x63000000
     ebc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     ec0:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
     ec4:	70757272 	rsbsvc	r7, r5, r2, ror r2
     ec8:	55007374 	strpl	r7, [r0, #-884]	; 0x374
     ecc:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     ed0:	726f575f 	rsbvc	r5, pc, #24903680	; 0x17c0000
     ed4:	6e654c64 	cdpvs	12, 6, cr4, cr5, cr4, {3}
     ed8:	00687467 	rsbeq	r7, r8, r7, ror #8
     edc:	64726168 	ldrbtvs	r6, [r2], #-360	; 0x168
     ee0:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     ee4:	5500632e 	strpl	r6, [r0, #-814]	; 0x32e
     ee8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     eec:	6f74535f 	svcvs	0x0074535f
     ef0:	74694270 	strbtvc	r4, [r9], #-624	; 0x270
     ef4:	77700073 			; <UNDEFINED> instruction: 0x77700073
     ef8:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xf72
     efc:	616d5f67 	cmnvs	sp, r7, ror #30
     f00:	73760070 	cmnvc	r6, #112	; 0x70
     f04:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     f08:	47006674 	smlsdxmi	r0, r4, r6, r6
     f0c:	5f4f4950 	svcpl	0x004f4950
     f10:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     f14:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     f18:	6b73616d 	blvs	1cd94d4 <__Stack_Size+0x1cd8cd4>
     f1c:	78656800 	stmdavc	r5!, {fp, sp, lr}^
     f20:	706d7564 	rsbvc	r7, sp, r4, ror #10
     f24:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     f28:	70535f4f 	subsvc	r5, r3, pc, asr #30
     f2c:	5f646565 	svcpl	0x00646565
     f30:	7a484d32 	bvc	1214400 <__Stack_Size+0x1213c00>
     f34:	50544700 	subspl	r4, r4, r0, lsl #14
     f38:	6e6f0052 	mcrvs	0, 3, r0, cr15, cr2, {2}
     f3c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     f40:	53550065 	cmppl	r5, #101	; 0x65
     f44:	5f545241 	svcpl	0x00545241
     f48:	64756142 	ldrbtvs	r6, [r5], #-322	; 0x142
     f4c:	65746152 	ldrbvs	r6, [r4, #-338]!	; 0x152
     f50:	45534900 	ldrbmi	r4, [r3, #-2304]	; 0x900
     f54:	53520052 	cmppl	r2, #82	; 0x52
     f58:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     f5c:	47003144 	strmi	r3, [r0, -r4, asr #2]
     f60:	5f4f4950 	svcpl	0x004f4950
     f64:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     f68:	30315f64 	eorscc	r5, r1, r4, ror #30
     f6c:	007a484d 	rsbseq	r4, sl, sp, asr #16
     f70:	5f706b62 	svcpl	0x00706b62
     f74:	5f676572 	svcpl	0x00676572
     f78:	0070616d 	rsbseq	r6, r0, sp, ror #2
     f7c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     f80:	61685f74 	smcvs	34292	; 0x85f4
     f84:	55006873 	strpl	r6, [r0, #-2163]	; 0x873
     f88:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     f8c:	7261505f 	rsbvc	r5, r1, #95	; 0x5f
     f90:	00797469 	rsbseq	r7, r9, r9, ror #8
     f94:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     f98:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
     f9c:	47007469 	strmi	r7, [r0, -r9, ror #8]
     fa0:	5f4f4950 	svcpl	0x004f4950
     fa4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     fa8:	4450495f 	ldrbmi	r4, [r0], #-2399	; 0x95f
     fac:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     fb0:	6f4d5f4f 	svcvs	0x004d5f4f
     fb4:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     fb8:	5f005550 	svcpl	0x00005550
     fbc:	756e675f 	strbvc	r6, [lr, #-1887]!	; 0x75f
     fc0:	61765f63 	cmnvs	r6, r3, ror #30
     fc4:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     fc8:	50430074 	subpl	r0, r3, r4, ror r0
     fcc:	00444955 	subeq	r4, r4, r5, asr r9
     fd0:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
     fd4:	53006765 	movwpl	r6, #1893	; 0x765
     fd8:	00525048 	subseq	r5, r2, r8, asr #32
     fdc:	52534641 	subspl	r4, r3, #68157440	; 0x4100000
     fe0:	41535500 	cmpmi	r3, r0, lsl #10
     fe4:	545f5452 	ldrbpl	r5, [pc], #-1106	; fec <__Stack_Size+0x7ec>
     fe8:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     fec:	41006665 	tstmi	r0, r5, ror #12
     ff0:	52314250 	eorspl	r4, r1, #80, 4
     ff4:	00525453 	subseq	r5, r2, r3, asr r4
     ff8:	52534648 	subspl	r4, r3, #72, 12	; 0x4800000
     ffc:	616c6600 	cmnvs	ip, r0, lsl #12
    1000:	72576873 	subsvc	r6, r7, #7536640	; 0x730000
    1004:	57657469 	strbpl	r7, [r5, -r9, ror #8]!
    1008:	0064726f 	rsbeq	r7, r4, pc, ror #4
    100c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1010:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    1014:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    1018:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    101c:	00657275 	rsbeq	r7, r5, r5, ror r2
    1020:	4f495047 	svcmi	0x00495047
    1024:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 102c <__Stack_Size+0x82c>
    1028:	754f5f65 	strbvc	r5, [pc, #-3941]	; cb <_Minimum_Stack_Size-0x35>
    102c:	50505f74 	subspl	r5, r0, r4, ror pc
    1030:	74617200 	strbtvc	r7, [r1], #-512	; 0x200
    1034:	49440065 	stmdbmi	r4, {r0, r2, r5, r6}^
    1038:	4c424153 	stfmie	f4, [r2], {83}	; 0x53
    103c:	49410045 	stmdbmi	r1, {r0, r2, r6}^
    1040:	00524352 	subseq	r4, r2, r2, asr r3
    1044:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    1048:	00727450 	rsbseq	r7, r2, r0, asr r4
    104c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1050:	6600676e 	strvs	r6, [r0], -lr, ror #14
    1054:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
    1058:	6f6c6e55 	svcvs	0x006c6e55
    105c:	74006b63 	strvc	r6, [r0], #-2915	; 0xb63
    1060:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
    1064:	53550065 	cmppl	r5, #101	; 0x65
    1068:	5f545241 	svcpl	0x00545241
    106c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    1070:	6d777200 	lfmvs	f7, 2, [r7, #-0]
    1074:	006c6156 	rsbeq	r6, ip, r6, asr r1
    1078:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    107c:	00746553 	rsbseq	r6, r4, r3, asr r5
    1080:	41727375 	cmnmi	r2, r5, ror r3
    1084:	00726464 	rsbseq	r6, r2, r4, ror #8
    1088:	53434853 	movtpl	r4, #14419	; 0x3853
    108c:	53550052 	cmppl	r5, #82	; 0x52
    1090:	5f545241 	svcpl	0x00545241
    1094:	64726148 	ldrbtvs	r6, [r2], #-328	; 0x148
    1098:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
    109c:	776f6c46 	strbvc	r6, [pc, -r6, asr #24]!
    10a0:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
    10a4:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    10a8:	52534643 	subspl	r4, r3, #70254592	; 0x4300000
    10ac:	5f555500 	svcpl	0x00555500
    10b0:	53747550 	cmnpl	r4, #80, 10	; 0x14000000
    10b4:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    10b8:	5f5f0067 	svcpl	0x005f0067
    10bc:	75007061 	strvc	r7, [r0, #-97]	; 0x61
    10c0:	614d7273 	hvcvs	55075	; 0xd723
    10c4:	67006e69 	strvs	r6, [r0, -r9, ror #28]
    10c8:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    10cc:	45687361 	strbmi	r7, [r8, #-865]!	; 0x361
    10d0:	6600646e 	strvs	r6, [r0], -lr, ror #8
    10d4:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
    10d8:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    10dc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    10e0:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
    10e4:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    10e8:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    10ec:	00657275 	rsbeq	r7, r5, r5, ror r2
    10f0:	30315244 	eorscc	r5, r1, r4, asr #4
    10f4:	50434900 	subpl	r4, r3, r0, lsl #18
    10f8:	43520052 	cmpmi	r2, #82	; 0x52
    10fc:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xf43
    1100:	72745367 	rsbsvc	r5, r4, #-1677721599	; 0x9c000001
    1104:	00746375 	rsbseq	r6, r4, r5, ror r3
    1108:	4f495047 	svcmi	0x00495047
    110c:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 1114 <__Stack_Size+0x914>
    1110:	46415f65 	strbmi	r5, [r1], -r5, ror #30
    1114:	00444f5f 	subeq	r4, r4, pc, asr pc
    1118:	42435372 	submi	r5, r3, #-939524095	; 0xc8000001
    111c:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
    1120:	6c660070 	stclvs	0, cr0, [r6], #-448	; 0xfffffe40
    1124:	45687361 	strbmi	r7, [r8, #-865]!	; 0x361
    1128:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0x172
    112c:	65676150 	strbvs	r6, [r7, #-336]!	; 0x150
    1130:	70760073 	rsbsvc	r0, r6, r3, ror r0
    1134:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    1138:	41535500 	cmpmi	r3, r0, lsl #10
    113c:	00785452 	rsbseq	r5, r8, r2, asr r4
    1140:	41464d4d 	cmpmi	r6, sp, asr #26
    1144:	50470052 	subpl	r0, r7, r2, asr r0
    1148:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 102c <__Stack_Size+0x82c>
    114c:	5f65646f 	svcpl	0x0065646f
    1150:	004e4941 	subeq	r4, lr, r1, asr #18
    1154:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    1158:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
    115c:	45520030 	ldrbmi	r0, [r2, #-48]	; 0x30
    1160:	56524553 			; <UNDEFINED> instruction: 0x56524553
    1164:	00314445 	eorseq	r4, r1, r5, asr #8
    1168:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    116c:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
    1170:	45520032 	ldrbmi	r0, [r2, #-50]	; 0x32
    1174:	56524553 			; <UNDEFINED> instruction: 0x56524553
    1178:	00334445 	eorseq	r4, r3, r5, asr #8
    117c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    1180:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
    1184:	45520034 	ldrbmi	r0, [r2, #-52]	; 0x34
    1188:	56524553 			; <UNDEFINED> instruction: 0x56524553
    118c:	00354445 	eorseq	r4, r5, r5, asr #8
    1190:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    1194:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
    1198:	45520036 	ldrbmi	r0, [r2, #-54]	; 0x36
    119c:	56524553 			; <UNDEFINED> instruction: 0x56524553
    11a0:	00384445 	eorseq	r4, r8, r5, asr #8
    11a4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    11a8:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
    11ac:	50470039 	subpl	r0, r7, r9, lsr r0
    11b0:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 1094 <__Stack_Size+0x894>
    11b4:	5f65646f 	svcpl	0x0065646f
    11b8:	505f4641 	subspl	r4, pc, r1, asr #12
    11bc:	50470050 	subpl	r0, r7, r0, asr r0
    11c0:	535f4f49 	cmppl	pc, #292	; 0x124
    11c4:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
    11c8:	5f555500 	svcpl	0x00555500
    11cc:	43747550 	cmnmi	r4, #80, 10	; 0x14000000
    11d0:	00726168 	rsbseq	r6, r2, r8, ror #2
    11d4:	73616c66 	cmnvc	r1, #26112	; 0x6600
    11d8:	636f4c68 	cmnvs	pc, #104, 24	; 0x6800
    11dc:	6f77006b 	svcvs	0x0077006b
    11e0:	73006472 	movwvc	r6, #1138	; 0x472
    11e4:	734d7465 	movtvc	r7, #54373	; 0xd465
    11e8:	646e4170 	strbtvs	r4, [lr], #-368	; 0x170
    11ec:	706d754a 	rsbvc	r7, sp, sl, asr #10
    11f0:	41464200 	mrsmi	r4, (UNDEF: 102)
    11f4:	50470052 	subpl	r0, r7, r2, asr r0
    11f8:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 1200 <__Stack_Size+0xa00>
    11fc:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    1200:	56006665 	strpl	r6, [r0], -r5, ror #12
    1204:	00524f54 	subseq	r4, r2, r4, asr pc
    1208:	4f495047 	svcmi	0x00495047
    120c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    1210:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1214:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1218:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    121c:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1220:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1224:	6d740066 	ldclvs	0, cr0, [r4, #-408]!	; 0xfffffe68
    1228:	62757370 	rsbsvs	r7, r5, #112, 6	; 0xc0000001
    122c:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
    1230:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    1234:	45007473 	strmi	r7, [r0, #-1139]	; 0x473
    1238:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
    123c:	43490045 	movtmi	r0, #36933	; 0x9045
    1240:	53005253 	movwpl	r5, #595	; 0x253
    1244:	545f4243 	ldrbpl	r4, [pc], #-579	; 124c <__Stack_Size+0xa4c>
    1248:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    124c:	47006665 	strmi	r6, [r0, -r5, ror #12]
    1250:	5f4f4950 	svcpl	0x004f4950
    1254:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1258:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    125c:	00666544 	rsbeq	r6, r6, r4, asr #10
    1260:	73616c66 	cmnvc	r1, #26112	; 0x6600
    1264:	64644168 	strbtvs	r4, [r4], #-360	; 0x168
    1268:	564e0072 			; <UNDEFINED> instruction: 0x564e0072
    126c:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1270:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1274:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1278:	50470074 	subpl	r0, r7, r4, ror r0
    127c:	535f4f49 	cmppl	pc, #292	; 0x124
    1280:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
    1284:	4d30355f 	cfldr32mi	mvfx3, [r0, #-380]!	; 0xfffffe84
    1288:	55007a48 	strpl	r7, [r0, #-2632]	; 0xa48
    128c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1290:	646d435f 	strbtvs	r4, [sp], #-863	; 0x35f
    1294:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1298:	6f4d5f4f 	svcvs	0x004d5f4f
    129c:	4f5f6564 	svcmi	0x005f6564
    12a0:	4f5f7475 	svcmi	0x005f7475
    12a4:	45520044 	ldrbmi	r0, [r2, #-68]	; 0x44
    12a8:	56524553 			; <UNDEFINED> instruction: 0x56524553
    12ac:	30314445 	eorscc	r4, r1, r5, asr #8
    12b0:	53455200 	movtpl	r5, #20992	; 0x5200
    12b4:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    12b8:	00313144 	eorseq	r3, r1, r4, asr #2
    12bc:	52454349 	subpl	r4, r5, #603979777	; 0x24000001
    12c0:	64646100 	strbtvs	r6, [r4], #-256	; 0x100
    12c4:	53550072 	cmppl	r5, #114	; 0x72
    12c8:	5f545241 	svcpl	0x00545241
    12cc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    12d0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    12d4:	00666544 	rsbeq	r6, r6, r4, asr #10
    12d8:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
    12dc:	63757600 	cmnvs	r5, #0, 12
    12e0:	52003233 	andpl	r3, r0, #805306371	; 0x30000003
    12e4:	415f4343 	cmpmi	pc, r3, asr #6
    12e8:	50324250 	eorspl	r4, r2, r0, asr r2
    12ec:	70697265 	rsbvc	r7, r9, r5, ror #4
    12f0:	6f6c4368 	svcvs	0x006c4368
    12f4:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    12f8:	54520064 	ldrbpl	r0, [r2], #-100	; 0x64
    12fc:	00524343 	subseq	r4, r2, r3, asr #6
    1300:	4f495047 	svcmi	0x00495047
    1304:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
    1308:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    130c:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1310:	61620066 	cmnvs	r2, r6, rrx
    1314:	70006b6e 	andvc	r6, r0, lr, ror #22
    1318:	41656761 	cmnmi	r5, r1, ror #14
    131c:	00726464 	rsbseq	r6, r2, r4, ror #8
    1320:	6f57686c 	svcvs	0x0057686c
    1324:	49006472 	stmdbmi	r0, {r1, r4, r5, r6, sl, sp, lr}
    1328:	00525053 	subseq	r5, r2, r3, asr r0
    132c:	706d756a 	rsbvc	r7, sp, sl, ror #10
    1330:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1334:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1338:	6f4d5f4f 	svcvs	0x004d5f4f
    133c:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    1340:	4c465f4e 	mcrrmi	15, 4, r5, r6, cr14
    1344:	4954414f 	ldmdbmi	r4, {r0, r1, r2, r3, r6, r8, lr}^
    1348:	5200474e 	andpl	r4, r0, #20447232	; 0x1380000
    134c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    1350:	37444556 	smlsldcc	r4, r4, r6, r5	; <UNPREDICTABLE>
    1354:	57686800 	strbpl	r6, [r8, -r0, lsl #16]!
    1358:	0064726f 	rsbeq	r7, r4, pc, ror #4
    135c:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    1360:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1364:	00797469 	rsbseq	r7, r9, r9, ror #8
    1368:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    136c:	43705574 	cmnmi	r0, #116, 10	; 0x1d000000
    1370:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1374:	4c007265 	sfmmi	f7, 4, [r0], {101}	; 0x65
    1378:	00524b43 	subseq	r4, r2, r3, asr #22
    137c:	5f554644 	svcpl	0x00554644
    1380:	4f4c5055 	svcmi	0x004c5055
    1384:	465f4441 	ldrbmi	r4, [pc], -r1, asr #8
    1388:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    138c:	3858305f 	ldmdacc	r8, {r0, r1, r2, r3, r4, r6, ip, sp}^
    1390:	30373030 	eorscc	r3, r7, r0, lsr r0
    1394:	73003030 	movwvc	r3, #48	; 0x30
    1398:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    139c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    13a0:	73750065 	cmnvc	r5, #101	; 0x65
    13a4:	70417265 	subvc	r7, r1, r5, ror #4
    13a8:	64644170 	strbtvs	r4, [r4], #-368	; 0x170
    13ac:	46440072 			; <UNDEFINED> instruction: 0x46440072
    13b0:	50555f55 	subspl	r5, r5, r5, asr pc
    13b4:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
    13b8:	414c465f 	cmpmi	ip, pc, asr r6
    13bc:	305f4853 	subscc	r4, pc, r3, asr r8	; <UNPREDICTABLE>
    13c0:	30303858 	eorscc	r3, r0, r8, asr r8
    13c4:	30303032 	eorscc	r3, r0, r2, lsr r0
    13c8:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
    13cc:	53746553 	cmnpl	r4, #348127232	; 0x14c00000
    13d0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    13d4:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
    13d8:	6f6c7055 	svcvs	0x006c7055
    13dc:	79546461 	ldmdbvc	r4, {r0, r5, r6, sl, sp, lr}^
    13e0:	5f736570 	svcpl	0x00736570
    13e4:	66640074 			; <UNDEFINED> instruction: 0x66640074
    13e8:	6c705575 	cfldr64vs	mvdx5, [r0], #-468	; 0xfffffe2c
    13ec:	4464616f 	strbtmi	r6, [r4], #-367	; 0x16f
    13f0:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    13f4:	5f554644 	svcpl	0x00554644
    13f8:	4f4c5055 	svcmi	0x004c5055
    13fc:	525f4441 	subspl	r4, pc, #1090519040	; 0x41000000
    1400:	72004d41 	andvc	r4, r0, #4160	; 0x1040
    1404:	42766365 	rsbsmi	r6, r6, #-1811939327	; 0x94000001
    1408:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    140c:	66640072 			; <UNDEFINED> instruction: 0x66640072
    1410:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
    1414:	4c505579 	cfldr64mi	mvdx5, [r0], {121}	; 0x79
    1418:	0044414f 	subeq	r4, r4, pc, asr #2
    141c:	73696874 	cmnvc	r9, #116, 16	; 0x740000
    1420:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1424:	6e654c6b 	cdpvs	12, 6, cr4, cr5, cr11, {3}
    1428:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
    142c:	61647055 	qdsubvs	r7, r5, r4
    1430:	79426574 	stmdbvc	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1434:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1438:	0074756f 	rsbseq	r7, r4, pc, ror #10
    143c:	42756664 	rsbsmi	r6, r5, #100, 12	; 0x6400000
    1440:	00797375 	rsbseq	r7, r9, r5, ror r3
    1444:	4f4c505f 	svcmi	0x004c505f
    1448:	46440054 			; <UNDEFINED> instruction: 0x46440054
    144c:	50555f55 	subspl	r5, r5, r5, asr pc
    1450:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
    1454:	414c465f 	cmpmi	ip, pc, asr r6
    1458:	305f4853 	subscc	r4, pc, r3, asr r8	; <UNPREDICTABLE>
    145c:	30303858 	eorscc	r3, r0, r8, asr r8
    1460:	30303036 	eorscc	r3, r0, r6, lsr r0
    1464:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
    1468:	7500632e 	strvc	r6, [r0, #-814]	; 0x32e
    146c:	53726573 	cmnpl	r2, #482344960	; 0x1cc00000
    1470:	65636170 	strbvs	r6, [r3, #-368]!	; 0x170
    1474:	74536900 	ldrbvc	r6, [r3], #-2304	; 0x900
    1478:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    147c:	6c707500 	cfldr64vs	mvdx7, [r0], #-0
    1480:	4264616f 	rsbmi	r6, r4, #-1073741797	; 0xc000001b
    1484:	6b636f6c 	blvs	18dd23c <__Stack_Size+0x18dca3c>
    1488:	006e654c 	rsbeq	r6, lr, ip, asr #10
    148c:	5f554644 	svcpl	0x00554644
    1490:	4f4c5055 	svcmi	0x004c5055
    1494:	465f4441 	ldrbmi	r4, [pc], -r1, asr #8
    1498:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    149c:	3858305f 	ldmdacc	r8, {r0, r1, r2, r3, r4, r6, ip, sp}^
    14a0:	30383030 	eorscc	r3, r8, r0, lsr r0
    14a4:	44003030 	strmi	r3, [r0], #-48	; 0x30
    14a8:	555f5546 	ldrbpl	r5, [pc, #-1350]	; f6a <__Stack_Size+0x76a>
    14ac:	414f4c50 	cmpmi	pc, r0, asr ip	; <UNPREDICTABLE>
    14b0:	4f4e5f44 	svcmi	0x004e5f44
    14b4:	7500454e 	strvc	r4, [r0, #-1358]	; 0x54e
    14b8:	46726573 			; <UNDEFINED> instruction: 0x46726573
    14bc:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
    14c0:	4c657261 	sfmmi	f7, 2, [r5], #-388	; 0xfffffe7c
    14c4:	64006e65 	strvs	r6, [r0], #-3685	; 0xe65
    14c8:	70417566 	subvc	r7, r1, r6, ror #10
    14cc:	61745370 	cmnvs	r4, r0, ror r3
    14d0:	00737574 	rsbseq	r7, r3, r4, ror r5
    14d4:	5546445f 	strbpl	r4, [r6, #-1119]	; 0x45f
    14d8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    14dc:	6c007375 	stcvs	3, cr7, [r0], {117}	; 0x75
    14e0:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    14e4:	66640068 	strbtvs	r0, [r4], -r8, rrx
    14e8:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
    14ec:	61745379 	cmnvs	r4, r9, ror r3
    14f0:	62006574 	andvs	r6, r0, #116, 10	; 0x1d000000
    14f4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    14f8:	64007375 	strvs	r7, [r0], #-885	; 0x375
    14fc:	6f437566 	svcvs	0x00437566
    1500:	4e447970 	mcrmi	9, 2, r7, cr4, cr0, {3}
    1504:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
    1508:	50776200 	rsbspl	r6, r7, r0, lsl #4
    150c:	546c6c6f 	strbtpl	r6, [ip], #-3183	; 0xc6f
    1510:	6f656d69 	svcvs	0x00656d69
    1514:	00307475 	eorseq	r7, r0, r5, ror r4
    1518:	6f507762 	svcvs	0x00507762
    151c:	69546c6c 	ldmdbvs	r4, {r2, r3, r5, r6, sl, fp, sp, lr}^
    1520:	756f656d 	strbvc	r6, [pc, #-1389]!	; fbb <__Stack_Size+0x7bb>
    1524:	62003174 	andvs	r3, r0, #116, 2
    1528:	6c6f5077 	stclvs	0, cr5, [pc], #-476	; 1354 <__Stack_Size+0xb54>
    152c:	6d69546c 	cfstrdvs	mvd5, [r9, #-432]!	; 0xfffffe50
    1530:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    1534:	45420032 	strbmi	r0, [r2, #-50]	; 0x32
    1538:	4e4e4947 	cdpmi	9, 4, cr4, cr14, cr7, {2}
    153c:	00474e49 	subeq	r4, r7, r9, asr #28
    1540:	43756664 	cmnmi	r5, #100, 12	; 0x6400000
    1544:	5379706f 	cmnpl	r9, #111	; 0x6f
    1548:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    154c:	6f630073 	svcvs	0x00630073
    1550:	635f6564 	cmpvs	pc, #100, 10	; 0x19000000
    1554:	5f79706f 	svcpl	0x0079706f
    1558:	6b636f6c 	blvs	18dd310 <__Stack_Size+0x18dcb10>
    155c:	55464400 	strbpl	r4, [r6, #-1024]	; 0x400
    1560:	4c50555f 	cfldr64mi	mvdx5, [r0], {95}	; 0x5f
    1564:	5f44414f 	svcpl	0x0044414f
    1568:	53414c46 	movtpl	r4, #7238	; 0x1c46
    156c:	58305f48 	ldmdapl	r0!, {r3, r6, r8, r9, sl, fp, ip, lr}
    1570:	35303038 	ldrcc	r3, [r0, #-56]!	; 0x38
    1574:	00303030 	eorseq	r3, r0, r0, lsr r0
    1578:	47756664 	ldrbmi	r6, [r5, -r4, ror #12]!
    157c:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465
    1580:	00657461 	rsbeq	r7, r5, r1, ror #8
    1584:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
    1588:	45707041 	ldrbmi	r7, [r0, #-65]!	; 0x41
    158c:	4d00646e 	cfstrsmi	mvf6, [r0, #-440]	; 0xfffffe48
    1590:	4c444449 	cfstrdmi	mvd4, [r4], {73}	; 0x49
    1594:	73750045 	cmnvc	r5, #69	; 0x45
    1598:	70557265 	subsvc	r7, r5, r5, ror #4
    159c:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
    15a0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    15a4:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
    15a8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    15ac:	66640065 	strbtvs	r0, [r4], -r5, rrx
    15b0:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
    15b4:	66754279 			; <UNDEFINED> instruction: 0x66754279
    15b8:	54726566 	ldrbtpl	r6, [r2], #-1382	; 0x566
    15bc:	6578456f 	ldrbvs	r4, [r8, #-1391]!	; 0x56f
    15c0:	53620063 	cmnpl	r2, #99	; 0x63
    15c4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    15c8:	35353200 	ldrcc	r3, [r5, #-512]!	; 0x200
    15cc:	632f3931 	teqvs	pc, #802816	; 0xc4000
    15d0:	31353532 	teqcc	r5, r2, lsr r5
    15d4:	00632e39 	rsbeq	r2, r3, r9, lsr lr
    15d8:	645f6378 	ldrbvs	r6, [pc], #-888	; 15e0 <__Stack_Size+0xde0>
    15dc:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    15e0:	32660065 	rsbcc	r0, r6, #101	; 0x65
    15e4:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    15e8:	706f635f 	rsbvc	r6, pc, pc, asr r3	; <UNPREDICTABLE>
    15ec:	32630079 	rsbcc	r0, r3, #121	; 0x79
    15f0:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    15f4:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
    15f8:	00785f65 	rsbseq	r5, r8, r5, ror #30
    15fc:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    1600:	615f3931 	cmpvs	pc, r1, lsr r9	; <UNPREDICTABLE>
    1604:	66006464 	strvs	r6, [r0], -r4, ror #8
    1608:	31353532 	teqcc	r5, r2, lsr r5
    160c:	756d5f39 	strbvc	r5, [sp, #-3897]!	; 0xf39
    1610:	00635f6c 	rsbeq	r5, r3, ip, ror #30
    1614:	71733178 	cmnvc	r3, r8, ror r1
    1618:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    161c:	5f393135 	svcpl	0x00393135
    1620:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    1624:	7173317a 	cmnvc	r3, sl, ror r1
    1628:	35326300 	ldrcc	r6, [r2, #-768]!	; 0x300
    162c:	5f393135 	svcpl	0x00393135
    1630:	6c756d73 	ldclvs	13, cr6, [r5], #-460	; 0xfffffe34
    1634:	4e470074 	mcrmi	0, 2, r0, cr7, cr4, {3}
    1638:	20432055 	subcs	r2, r3, r5, asr r0
    163c:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
    1640:	30322034 	eorscc	r2, r2, r4, lsr r0
    1644:	37303431 			; <UNDEFINED> instruction: 0x37303431
    1648:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
    164c:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0x572
    1650:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1654:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
    1658:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
    165c:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    1660:	342d6465 	strtcc	r6, [sp], #-1125	; 0x465
    1664:	622d385f 	eorvs	r3, sp, #6225920	; 0x5f0000
    1668:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
    166c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0x68
    1670:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    1674:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
    1678:	34313331 	ldrtcc	r3, [r1], #-817	; 0x331
    167c:	2d205d37 	stccs	13, cr5, [r0, #-220]!	; 0xffffff24
    1680:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0x46d
    1684:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
    1688:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0x36d
    168c:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
    1690:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
    1694:	2d20336d 	stccs	3, cr3, [r0, #-436]!	; 0xfffffe4c
    1698:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0x46d
    169c:	692d626d 	pushvs	{r0, r2, r3, r5, r6, r9, sp, lr}
    16a0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    16a4:	6b726f77 	blvs	1c9d488 <__Stack_Size+0x1c9cc88>
    16a8:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    16ac:	20334f2d 	eorscs	r4, r3, sp, lsr #30
    16b0:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0x62d
    16b4:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    16b8:	732d6e6f 	teqvc	sp, #1776	; 0x6f0
    16bc:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    16c0:	20736e6f 	rsbscs	r6, r3, pc, ror #28
    16c4:	6164662d 	cmnvs	r4, sp, lsr #12
    16c8:	732d6174 	teqvc	sp, #116, 2
    16cc:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    16d0:	00736e6f 	rsbseq	r6, r3, pc, ror #28
    16d4:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    16d8:	735f3931 	cmpvc	pc, #802816	; 0xc4000
    16dc:	78006275 	stmdavc	r0, {r0, r2, r4, r5, r6, r9, sp, lr}
    16e0:	00317a31 	eorseq	r7, r1, r1, lsr sl
    16e4:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    16e8:	6e5f3931 	mrcvs	9, 2, r3, cr15, cr1, {1}
    16ec:	616d726f 	cmnvs	sp, pc, ror #4
    16f0:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0x96c
    16f4:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    16f8:	5f393135 	svcpl	0x00393135
    16fc:	5f6c756d 	svcpl	0x006c756d
    1700:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    1704:	636e6974 	cmnvs	lr, #116, 18	; 0x1d0000
    1708:	32660074 	rsbcc	r0, r6, #116	; 0x74
    170c:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1710:	766e695f 			; <UNDEFINED> instruction: 0x766e695f
    1714:	69645f5f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1718:	6e697473 	mcrvs	4, 3, r7, cr9, cr3, {3}
    171c:	66007463 	strvs	r7, [r0], -r3, ror #8
    1720:	31353532 	teqcc	r5, r2, lsr r5
    1724:	65735f39 	ldrbvs	r5, [r3, #-3897]!	; 0xf39
    1728:	7463656c 	strbtvc	r6, [r3], #-1388	; 0x56c
    172c:	5f637800 	svcpl	0x00637800
    1730:	66666964 	strbtvs	r6, [r6], -r4, ror #18
    1734:	00646461 	rsbeq	r6, r4, r1, ror #8
    1738:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    173c:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    1740:	5f393135 	svcpl	0x00393135
    1744:	72007165 	andvc	r7, r0, #1073741849	; 0x40000019
    1748:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xf5f
    174c:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    1750:	00797063 	rsbseq	r7, r9, r3, rrx
    1754:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    1758:	5f393135 	svcpl	0x00393135
    175c:	6b636170 	blvs	18d9d24 <__Stack_Size+0x18d9524>
    1760:	72617000 	rsbvc	r7, r1, #0
    1764:	00797469 	rsbseq	r7, r9, r9, ror #8
    1768:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    176c:	5f393135 	svcpl	0x00393135
    1770:	00646461 	rsbeq	r6, r4, r1, ror #8
    1774:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    1778:	5f393135 	svcpl	0x00393135
    177c:	5f797274 	svcpl	0x00797274
    1780:	61706e75 	cmnvs	r0, r5, ror lr
    1784:	65006b63 	strvs	r6, [r0, #-2915]	; 0xb63
    1788:	35353264 	ldrcc	r3, [r5, #-612]!	; 0x264
    178c:	705f3931 	subsvc	r3, pc, r1, lsr r9	; <UNPREDICTABLE>
    1790:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    1794:	32007463 	andcc	r7, r0, #1660944384	; 0x63000000
    1798:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    179c:	3264652f 	rsbcc	r6, r4, #197132288	; 0xbc00000
    17a0:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    17a4:	6500632e 	strvs	r6, [r0, #-814]	; 0x32e
    17a8:	35353264 	ldrcc	r3, [r5, #-612]!	; 0x264
    17ac:	735f3931 	cmpvc	pc, #802816	; 0xc4000
    17b0:	746c756d 	strbtvc	r7, [ip], #-1389	; 0x56d
    17b4:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    17b8:	5f393135 	svcpl	0x00393135
    17bc:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
    17c0:	32646500 	rsbcc	r6, r4, #0, 10
    17c4:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    17c8:	706e755f 	rsbvc	r7, lr, pc, asr r5
    17cc:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    17d0:	65007463 	strvs	r7, [r0, #-1123]	; 0x463
    17d4:	35353264 	ldrcc	r3, [r5, #-612]!	; 0x264
    17d8:	6e5f3931 	mrcvs	9, 2, r3, cr15, cr1, {1}
    17dc:	72747565 	rsbsvc	r7, r4, #423624704	; 0x19400000
    17e0:	66006c61 	strvs	r6, [r0], -r1, ror #24
    17e4:	31353532 	teqcc	r5, r2, lsr r5
    17e8:	71735f39 	cmnvc	r3, r9, lsr pc
    17ec:	66007472 			; <UNDEFINED> instruction: 0x66007472
    17f0:	31353532 	teqcc	r5, r2, lsr r5
    17f4:	656e5f39 	strbvs	r5, [lr, #-3897]!	; 0xf39
    17f8:	64650067 	strbtvs	r0, [r5], #-103	; 0x67
    17fc:	31353532 	teqcc	r5, r2, lsr r5
    1800:	6f645f39 	svcvs	0x00645f39
    1804:	656c6275 	strbvs	r6, [ip, #-629]!	; 0x275
    1808:	32646500 	rsbcc	r6, r4, #0, 10
    180c:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1810:	0074705f 	rsbseq	r7, r4, pc, asr r0
    1814:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    1818:	5f393135 	svcpl	0x00393135
    181c:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
    1820:	32646500 	rsbcc	r6, r4, #0, 10
    1824:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1828:	706f635f 	rsbvc	r6, pc, pc, asr r3	; <UNPREDICTABLE>
    182c:	64650079 	strbtvs	r0, [r5], #-121	; 0x79
    1830:	31353532 	teqcc	r5, r2, lsr r5
    1834:	00645f39 	rsbeq	r5, r4, r9, lsr pc
    1838:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    183c:	5f393135 	svcpl	0x00393135
    1840:	6873006b 	ldmdavs	r3!, {r0, r1, r3, r5, r6}^
    1844:	32313561 	eorscc	r3, r1, #406847488	; 0x18400000
    1848:	6e69665f 	mcrvs	6, 3, r6, cr9, cr15, {2}
    184c:	69006c61 	stmdbvs	r0, {r0, r5, r6, sl, fp, sp, lr}
    1850:	5f74696e 	svcpl	0x0074696e
    1854:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    1858:	3532006b 	ldrcc	r0, [r2, #-107]!	; 0x6b
    185c:	2f393135 	svccs	0x00393135
    1860:	69736465 	ldmdbvs	r3!, {r0, r2, r5, r6, sl, sp, lr}^
    1864:	632e6e67 	teqvs	lr, #1648	; 0x670
    1868:	32646500 	rsbcc	r6, r4, #0, 10
    186c:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1870:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0x5f
    1874:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0x170
    1878:	72706600 	rsbsvc	r6, r0, #0, 12
    187c:	5f656d69 	svcpl	0x00656d69
    1880:	00646461 	rsbeq	r6, r4, r1, ror #8
    1884:	35616873 	strbcc	r6, [r1, #-2163]!	; 0x873
    1888:	695f3231 	ldmdbvs	pc, {r0, r4, r5, r9, ip, sp}^	; <UNPREDICTABLE>
    188c:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    1890:	735f6c61 	cmpvc	pc, #24832	; 0x6100
    1894:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    1898:	61687300 	cmnvs	r8, r0, lsl #6
    189c:	5f323135 	svcpl	0x00323135
    18a0:	00746567 	rsbseq	r6, r4, r7, ror #10
    18a4:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    18a8:	6d5f656d 	cfldr64vs	mvdx6, [pc, #-436]	; 16fc <__Stack_Size+0xefc>
    18ac:	65006c75 	strvs	r6, [r0, #-3189]	; 0xc75
    18b0:	6e617078 	mcrvs	0, 3, r7, cr1, cr8, {3}
    18b4:	656b5f64 	strbvs	r5, [fp, #-3940]!	; 0xf64
    18b8:	78650079 	stmdavc	r5!, {r0, r3, r4, r5, r6}^
    18bc:	646e6170 	strbtvs	r6, [lr], #-368	; 0x170
    18c0:	6f006465 	svcvs	0x00006465
    18c4:	665f7475 			; <UNDEFINED> instruction: 0x665f7475
    18c8:	65730070 	ldrbvs	r0, [r3, #-112]!	; 0x70
    18cc:	74657263 	strbtvc	r7, [r5], #-611	; 0x263
    18d0:	63617000 	cmnvs	r1, #0
    18d4:	0064656b 	rsbeq	r6, r4, fp, ror #10
    18d8:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    18dc:	3436746e 	ldrtcc	r7, [r6], #-1134	; 0x46e
    18e0:	6b00745f 	blvs	1ea64 <__Stack_Size+0x1e264>
    18e4:	5f6e6567 	svcpl	0x006e6567
    18e8:	0079656b 	rsbseq	r6, r9, fp, ror #10
    18ec:	66657270 			; <UNDEFINED> instruction: 0x66657270
    18f0:	735f7869 	cmpvc	pc, #6881280	; 0x690000
    18f4:	00657a69 	rsbeq	r7, r5, r9, ror #20
    18f8:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    18fc:	5f393135 	svcpl	0x00393135
    1900:	6564726f 	strbvs	r7, [r4, #-623]!	; 0x26f
    1904:	70660072 	rsbvc	r0, r6, r2, ror r0
    1908:	656d6972 	strbvs	r6, [sp, #-2418]!	; 0x972
    190c:	6f72665f 	svcvs	0x0072665f
    1910:	79625f6d 	stmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1914:	00736574 	rsbseq	r6, r3, r4, ror r5
    1918:	68736168 	ldmdavs	r3!, {r3, r5, r6, r8, sp, lr}^
    191c:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
    1920:	65676173 	strbvs	r6, [r7, #-371]!	; 0x173
    1924:	73616800 	cmnvc	r1, #0, 16
    1928:	69775f68 	ldmdbvs	r7!, {r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    192c:	705f6874 	subsvc	r6, pc, r4, ror r8	; <UNPREDICTABLE>
    1930:	69666572 	stmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    1934:	6d730078 	ldclvs	0, cr0, [r3, #-480]!	; 0xfffffe20
    1938:	6361705f 	cmnvs	r1, #95	; 0x5f
    193c:	6567006b 	strbvs	r0, [r7, #-107]!	; 0x6b
    1940:	6172656e 	cmnvs	r2, lr, ror #10
    1944:	6b5f6574 	blvs	17daf1c <__Stack_Size+0x17da71c>
    1948:	61687300 	cmnvs	r8, r0, lsl #6
    194c:	5f323135 	svcpl	0x00323135
    1950:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    1954:	64650065 	strbtvs	r0, [r5], #-101	; 0x65
    1958:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    195c:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
    1960:	00796669 	rsbseq	r6, r9, r9, ror #12
    1964:	35616873 	strbcc	r6, [r1, #-2163]!	; 0x873
    1968:	695f3231 	ldmdbvs	pc, {r0, r4, r5, r9, ip, sp}^	; <UNPREDICTABLE>
    196c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1970:	35616873 	strbcc	r6, [r1, #-2163]!	; 0x873
    1974:	625f3231 	subsvs	r3, pc, #268435459	; 0x10000003
    1978:	6b636f6c 	blvs	18dd730 <__Stack_Size+0x18dcf30>
    197c:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    1980:	5f393135 	svcpl	0x00393135
    1984:	6f72657a 	svcvs	0x0072657a
    1988:	70786500 	rsbsvc	r6, r8, r0, lsl #10
    198c:	33323532 	teqcc	r2, #209715200	; 0xc800000
    1990:	35353200 	ldrcc	r3, [r5, #-512]!	; 0x200
    1994:	662f3931 			; <UNDEFINED> instruction: 0x662f3931
    1998:	31353532 	teqcc	r5, r2, lsr r5
    199c:	00632e39 	rsbeq	r2, r3, r9, lsr lr
    19a0:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    19a4:	695f3931 	ldmdbvs	pc, {r0, r4, r5, r8, fp, ip, sp}^	; <UNPREDICTABLE>
    19a8:	6600766e 	strvs	r7, [r0], -lr, ror #12
    19ac:	31353532 	teqcc	r5, r2, lsr r5
    19b0:	756d5f39 	strbvc	r5, [sp, #-3897]!	; 0xf39
    19b4:	6f63006c 	svcvs	0x0063006c
    19b8:	7469646e 	strbtvc	r6, [r9], #-1134	; 0x46e
    19bc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    19c0:	756e696d 	strbvc	r6, [lr, #-2413]!	; 0x96d
    19c4:	70007073 	andvc	r7, r0, r3, ror r0
    19c8:	6f6c6572 	svcvs	0x006c6572
    19cc:	625f6461 	subsvs	r6, pc, #1627389952	; 0x61000000
    19d0:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    19d4:	65727000 	ldrbvs	r7, [r2, #-0]!
    19d8:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
    19dc:	7469625f 	strbtvc	r6, [r9], #-607	; 0x25f
    19e0:	70660073 	rsbvc	r0, r6, r3, ror r0
    19e4:	656d6972 	strbvs	r6, [sp, #-2418]!	; 0x972
    19e8:	766e695f 			; <UNDEFINED> instruction: 0x766e695f
    19ec:	69627200 	stmdbvs	r2!, {r9, ip, sp, lr}^
    19f0:	70007374 	andvc	r7, r0, r4, ror r3
    19f4:	6173756c 	cmnvs	r3, ip, ror #10
    19f8:	69687300 	stmdbvs	r8!, {r8, r9, ip, sp, lr}^
    19fc:	6e5f7466 	cdpvs	4, 5, cr7, cr15, cr6, {3}
    1a00:	7469625f 	strbtvc	r6, [r9], #-607	; 0x25f
    1a04:	70660073 	rsbvc	r0, r6, r3, ror r0
    1a08:	656d6972 	strbvs	r6, [sp, #-2418]!	; 0x972
    1a0c:	6c65735f 	stclvs	3, cr7, [r5], #-380	; 0xfffffe84
    1a10:	00746365 	rsbseq	r6, r4, r5, ror #6
    1a14:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    1a18:	735f656d 	cmpvc	pc, #457179136	; 0x1b400000
    1a1c:	6d006275 	sfmvs	f6, 4, [r0, #-468]	; 0xfffffe2c
    1a20:	695f6e69 	ldmdbvs	pc, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    1a24:	6d00746e 	cfstrsvs	mvf7, [r0, #-440]	; 0xfffffe48
    1a28:	6c75646f 	cfldrdvs	mvd6, [r5], #-444	; 0xfffffe44
    1a2c:	66007375 			; <UNDEFINED> instruction: 0x66007375
    1a30:	6d697270 	sfmvs	f7, 2, [r9, #-448]!	; 0xfffffe40
    1a34:	657a5f65 	ldrbvs	r5, [sl, #-3941]!	; 0xf65
    1a38:	72006f72 	andvc	r6, r0, #456	; 0x1c8
    1a3c:	745f7761 	ldrbvc	r7, [pc], #-1889	; 1a44 <__Stack_Size+0x1244>
    1a40:	735f7972 	cmpvc	pc, #1867776	; 0x1c8000
    1a44:	70006275 	andvc	r6, r0, r5, ror r2
    1a48:	656d6972 	strbvs	r6, [sp, #-2418]!	; 0x972
    1a4c:	62736d5f 	rsbsvs	r6, r3, #6080	; 0x17c0
    1a50:	72706600 	rsbsvc	r6, r0, #0, 12
    1a54:	5f656d69 	svcpl	0x00656d69
    1a58:	66007165 	strvs	r7, [r0], -r5, ror #2
    1a5c:	6d697270 	sfmvs	f7, 2, [r9, #-448]!	; 0xfffffe40
    1a60:	6f6c5f65 	svcvs	0x006c5f65
    1a64:	66006461 	strvs	r6, [r0], -r1, ror #8
    1a68:	6d697270 	sfmvs	f7, 2, [r9, #-448]!	; 0xfffffe40
    1a6c:	6f635f65 	svcvs	0x00635f65
    1a70:	32007970 	andcc	r7, r0, #112, 18	; 0x1c0000
    1a74:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1a78:	7270662f 	rsbsvc	r6, r0, #49283072	; 0x2f00000
    1a7c:	2e656d69 	cdpcs	13, 6, cr6, cr5, cr9, {3}
    1a80:	72700063 	rsbsvc	r0, r0, #99	; 0x63
    1a84:	616f6c65 	cmnvs	pc, r5, ror #24
    1a88:	6f745f64 	svcvs	0x00745f64
    1a8c:	006c6174 	rsbeq	r6, ip, r4, ror r1
    1a90:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    1a94:	6e5f656d 	cdpvs	5, 5, cr6, cr15, cr13, {3}
    1a98:	616d726f 	cmnvs	sp, pc, ror #4
    1a9c:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0x96c
    1aa0:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1aa4:	6464615f 	strbtvs	r6, [r4], #-351	; 0x15f
    1aa8:	72706600 	rsbsvc	r6, r0, #0, 12
    1aac:	5f656d69 	svcpl	0x00656d69
    1ab0:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    1ab4:	31353532 	teqcc	r5, r2, lsr r5
    1ab8:	6f6d2f39 	svcvs	0x006d2f39
    1abc:	32687072 	rsbcc	r7, r8, #114	; 0x72
    1ac0:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1ac4:	7900632e 	stmdbvc	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
    1ac8:	73756c70 	cmnvc	r5, #112, 24	; 0x7000
    1acc:	726f6d00 	rsbvc	r6, pc, #0, 26
    1ad0:	35326870 	ldrcc	r6, [r2, #-2160]!	; 0x870
    1ad4:	5f393135 	svcpl	0x00393135
    1ad8:	006d3265 	rsbeq	r3, sp, r5, ror #4
    1adc:	6532786d 	ldrvs	r7, [r2, #-2157]!	; 0x86d
    1ae0:	6f6d0079 	svcvs	0x006d0079
    1ae4:	6f67746e 	svcvs	0x0067746e
    1ae8:	7972656d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
    1aec:	32796500 	rsbscc	r6, r9, #0, 10
    1af0:	6d007865 	stcvs	8, cr7, [r0, #-404]	; 0xfffffe6c
    1af4:	6870726f 	ldmdavs	r0!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    1af8:	31353532 	teqcc	r5, r2, lsr r5
    1afc:	326d5f39 	rsbcc	r5, sp, #57, 30	; 0xe4
    1b00:	6d790065 	ldclvs	0, cr0, [r9, #-404]!	; 0xfffffe6c
    1b04:	73756e69 	cmnvc	r5, #1680	; 0x690
    1b08:	67736d00 	ldrbvs	r6, [r3, -r0, lsl #26]!
    1b0c:	006e656c 	rsbeq	r6, lr, ip, ror #10
    1b10:	7466656c 	strbtvc	r6, [r6], #-1388	; 0x56c
    1b14:	6c696600 	stclvs	6, cr6, [r9], #-0
    1b18:	6170006c 	cmnvs	r0, ip, rrx
    1b1c:	68006e64 	stmdavs	r0, {r2, r5, r6, r9, sl, fp, sp, lr}
    1b20:	00686769 	rsbeq	r6, r8, r9, ror #14
    1b24:	31353532 	teqcc	r5, r2, lsr r5
    1b28:	68732f39 	ldmdavs	r3!, {r0, r3, r4, r5, r8, r9, sl, fp, sp}^
    1b2c:	36353261 	ldrtcc	r3, [r5], -r1, ror #4
    1b30:	7300632e 	movwvc	r6, #814	; 0x32e
    1b34:	35326168 	ldrcc	r6, [r2, #-360]!	; 0x168
    1b38:	72705f36 	rsbsvc	r5, r0, #54, 30	; 0xd8
    1b3c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    1b40:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0x73
    1b44:	0031706d 	eorseq	r7, r1, sp, rrx
    1b48:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1b4c:	68730032 	ldmdavs	r3!, {r1, r4, r5}^
    1b50:	36353261 	ldrtcc	r3, [r5], -r1, ror #4
    1b54:	6461705f 	strbtvs	r7, [r1], #-95	; 0x5f
    1b58:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1b5c:	67696400 	strbvs	r6, [r9, -r0, lsl #8]!
    1b60:	00747365 	rsbseq	r7, r4, r5, ror #6
    1b64:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0x16c
    1b68:	746f7400 	strbtvc	r7, [pc], #-1024	; 1b70 <__Stack_Size+0x1370>
    1b6c:	735f6c61 	cmpvc	pc, #24832	; 0x6100
    1b70:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1b74:	35316977 	ldrcc	r6, [r1, #-2423]!	; 0x977
    1b78:	73616c00 	cmnvc	r1, #0, 24
    1b7c:	69735f74 	ldmdbvs	r3!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1b80:	6f00657a 	svcvs	0x0000657a
    1b84:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0x666
    1b88:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0x74
    1b8c:	7200706d 	andvc	r7, r0, #109	; 0x6d
    1b90:	3436746f 	ldrtcc	r7, [r6], #-1135	; 0x46f
    1b94:	6f747300 	svcvs	0x00747300
    1b98:	34366572 	ldrtcc	r6, [r6], #-1394	; 0x572
    1b9c:	35353200 	ldrcc	r3, [r5, #-512]!	; 0x200
    1ba0:	732f3931 	teqvc	pc, #802816	; 0xc4000
    1ba4:	31356168 	teqcc	r5, r8, ror #2
    1ba8:	00632e32 	rsbeq	r2, r3, r2, lsr lr
    1bac:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
    1bb0:	72003436 	andvc	r3, r0, #905969664	; 0x36000000
    1bb4:	646e756f 	strbtvs	r7, [lr], #-1391	; 0x56f
    1bb8:	76006b5f 			; <UNDEFINED> instruction: 0x76006b5f
    1bbc:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    1bc0:	006e695f 	rsbeq	r6, lr, pc, asr r9
    1bc4:	6f636564 	svcvs	0x00636564
    1bc8:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1bcc:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
    1bd0:	5f687467 	svcpl	0x00687467
    1bd4:	66006e69 	strvs	r6, [r0], -r9, ror #28
    1bd8:	6d676172 	stfvse	f6, [r7, #-456]!	; 0xfffffe38
    1bdc:	00746e65 	rsbseq	r6, r4, r5, ror #28
    1be0:	6f636564 	svcvs	0x00636564
    1be4:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1be8:	7a69735f 	bvc	1a5e96c <__Stack_Size+0x1a5e16c>
    1bec:	6f630065 	svcvs	0x00630065
    1bf0:	68636564 	stmdavs	r3!, {r2, r5, r6, r8, sl, sp, lr}^
    1bf4:	62007261 	andvs	r7, r0, #268435462	; 0x10000006
    1bf8:	36657361 	strbtcc	r7, [r5], -r1, ror #6
    1bfc:	65645f34 	strbvs	r5, [r4, #-3892]!	; 0xf34
    1c00:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
    1c04:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
    1c08:	63006575 	movwvs	r6, #1397	; 0x575
    1c0c:	5f65646f 	svcpl	0x0065646f
    1c10:	73006e69 	movwvc	r6, #3689	; 0xe69
    1c14:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    1c18:	006e695f 	rsbeq	r6, lr, pc, asr r9
    1c1c:	69616c70 	stmdbvs	r1!, {r4, r5, r6, sl, fp, sp, lr}^
    1c20:	7865746e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1c24:	756f5f74 	strbvc	r5, [pc, #-3956]!	; cb8 <__Stack_Size+0x4b8>
    1c28:	61620074 	smcvs	8196	; 0x2004
    1c2c:	34366573 	ldrtcc	r6, [r6], #-1395	; 0x573
    1c30:	6564632f 	strbvs	r6, [r4, #-815]!	; 0x32f
    1c34:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
    1c38:	6200632e 	andvs	r6, r0, #-1207959552	; 0xb8000000
    1c3c:	36657361 	strbtcc	r7, [r5], -r1, ror #6
    1c40:	6e655f34 	mcrvs	15, 3, r5, cr5, cr4, {1}
    1c44:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
    1c48:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
    1c4c:	70006575 	andvc	r6, r0, r5, ror r5
    1c50:	6e69616c 	powvsez	f6, f1, #4.0
    1c54:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0x574
    1c58:	00646e65 	rsbeq	r6, r4, r5, ror #28
    1c5c:	69616c70 	stmdbvs	r1!, {r4, r5, r6, sl, fp, sp, lr}^
    1c60:	7865746e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1c64:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    1c68:	636e6500 	cmnvs	lr, #0, 10
    1c6c:	6e69646f 	cdpvs	4, 6, cr6, cr9, cr15, {3}
    1c70:	48430067 	stmdami	r3, {r0, r1, r2, r5, r6}^
    1c74:	5f535241 	svcpl	0x00535241
    1c78:	5f524550 	svcpl	0x00524550
    1c7c:	454e494c 	strbmi	r4, [lr, #-2380]	; 0x94c
    1c80:	646f6300 	strbtvs	r6, [pc], #-768	; 1c88 <__Stack_Size+0x1488>
    1c84:	756f5f65 	strbvc	r5, [pc, #-3941]!	; d27 <__Stack_Size+0x527>
    1c88:	61620074 	smcvs	8196	; 0x2004
    1c8c:	34366573 	ldrtcc	r6, [r6], #-1395	; 0x573
    1c90:	6e65632f 	cdpvs	3, 6, cr6, cr5, cr15, {1}
    1c94:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
    1c98:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
    1c9c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0x16d
    1ca0:	6800632e 	stmdavs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
    1ca4:	65646165 	strbvs	r6, [r4, #-357]!	; 0x165
    1ca8:	656e0072 	strbvs	r0, [lr, #-114]!	; 0x72
    1cac:	6e614877 	mcrvs	8, 3, r4, cr1, cr7, {3}
    1cb0:	00656c64 	rsbeq	r6, r5, r4, ror #24
    1cb4:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1cb8:	6f6f5265 	svcvs	0x006f5265
    1cbc:	61654874 	smcvs	21636	; 0x5484
    1cc0:	00726564 	rsbseq	r6, r2, r4, ror #10
    1cc4:	6967616d 	stmdbvs	r7!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1cc8:	61640063 	cmnvs	r4, r3, rrx
    1ccc:	69536174 	ldmdbvs	r3, {r2, r4, r5, r6, r8, sp, lr}^
    1cd0:	6200657a 	andvs	r6, r0, #511705088	; 0x1e800000
    1cd4:	53666675 	cmnpl	r6, #122683392	; 0x7500000
    1cd8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1cdc:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
    1ce0:	70795465 	rsbsvc	r5, r9, r5, ror #8
    1ce4:	6c660065 	stclvs	0, cr0, [r6], #-404	; 0xfffffe6c
    1ce8:	41687361 	cmnmi	r8, r1, ror #6
    1cec:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    1cf0:	73007373 	movwvc	r7, #883	; 0x373
    1cf4:	696e6769 	stmdbvs	lr!, {r0, r3, r5, r6, r8, r9, sl, sp, lr}^
    1cf8:	4900676e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    1cfc:	6567616d 	strbvs	r6, [r7, #-365]!	; 0x16d
    1d00:	6e676953 	mcrvs	9, 3, r6, cr7, cr3, {2}
    1d04:	45676e69 	strbmi	r6, [r7, #-3689]!	; 0xe69
    1d08:	6e657478 	mcrvs	4, 3, r7, cr5, cr8, {3}
    1d0c:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
    1d10:	616d6900 	cmnvs	sp, r0, lsl #18
    1d14:	75426567 	strbvc	r6, [r2, #-1383]	; 0x567
    1d18:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1d1c:	6f687300 	svcvs	0x00687300
    1d20:	45646c75 	strbmi	r6, [r4, #-3189]!	; 0xc75
    1d24:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0x172
    1d28:	73616c46 	cmnvc	r1, #17920	; 0x4600
    1d2c:	466e4f68 	strbtmi	r4, [lr], -r8, ror #30
    1d30:	006c6961 	rsbeq	r6, ip, r1, ror #18
    1d34:	71696e75 	smcvc	38629	; 0x96e5
    1d38:	44496575 	strbmi	r6, [r9], #-1397	; 0x575
    1d3c:	68736148 	ldmdavs	r3!, {r3, r6, r8, sp, lr}^
    1d40:	67697300 	strbvs	r7, [r9, -r0, lsl #6]!
    1d44:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1d48:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    1d4c:	53726566 	cmnpl	r2, #427819008	; 0x19800000
    1d50:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1d54:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
    1d58:	67695365 	strbvs	r5, [r9, -r5, ror #6]!
    1d5c:	7574616e 	ldrbvc	r6, [r4, #-366]!	; 0x16e
    1d60:	66006572 			; <UNDEFINED> instruction: 0x66006572
    1d64:	456c6961 	strbmi	r6, [ip, #-2401]!	; 0x961
    1d68:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0x172
    1d6c:	616d4900 	cmnvs	sp, r0, lsl #18
    1d70:	65486567 	strbvs	r6, [r8, #-1383]	; 0x567
    1d74:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
    1d78:	65724600 	ldrbvs	r4, [r2, #-1536]!	; 0x600
    1d7c:	65735565 	ldrbvs	r5, [r3, #-1381]!	; 0x565
    1d80:	66754272 			; <UNDEFINED> instruction: 0x66754272
    1d84:	00726566 	rsbseq	r6, r2, r6, ror #10
    1d88:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0x547
    1d8c:	61745378 	cmnvs	r4, r8, ror r3
    1d90:	74536c6c 	ldrbvc	r6, [r3], #-3180	; 0xc6c
    1d94:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1d98:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1d9c:	62445045 	subvs	r5, r4, #69	; 0x45
    1da0:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    1da4:	64644131 	strbtvs	r4, [r4], #-305	; 0x131
    1da8:	65530072 	ldrbvs	r0, [r3, #-114]	; 0x72
    1dac:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    1db0:	6c615678 	stclvs	6, cr5, [r1], #-480	; 0xfffffe20
    1db4:	53006469 	movwpl	r6, #1129	; 0x469
    1db8:	6f447465 	svcvs	0x00447465
    1dbc:	656c4275 	strbvs	r4, [ip, #-629]!	; 0x275
    1dc0:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1dc4:	74535045 	ldrbvc	r5, [r3], #-69	; 0x45
    1dc8:	006c6c61 	rsbeq	r6, ip, r1, ror #24
    1dcc:	445f5045 	ldrbmi	r5, [pc], #-69	; 1dd4 <__Stack_Size+0x15d4>
    1dd0:	5f465542 	svcpl	0x00465542
    1dd4:	0054554f 	subseq	r5, r4, pc, asr #10
    1dd8:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1ddc:	53785250 	cmnpl	r8, #80, 4
    1de0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1de4:	6f540073 	svcvs	0x00540073
    1de8:	656c6767 	strbvs	r6, [ip, #-1895]!	; 0x767
    1dec:	474f5444 	strbmi	r5, [pc, -r4, asr #8]
    1df0:	0058545f 	subseq	r5, r8, pc, asr r4
    1df4:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1df8:	64644150 	strbtvs	r4, [r4], #-336	; 0x150
    1dfc:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1e00:	50455f00 	subpl	r5, r5, r0, lsl #30
    1e04:	5542445f 	strbpl	r4, [r2, #-1119]	; 0x45f
    1e08:	49445f46 	stmdbmi	r4, {r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    1e0c:	65530052 	ldrbvs	r0, [r3, #-82]	; 0x52
    1e10:	54534974 	ldrbpl	r4, [r3], #-2420	; 0x974
    1e14:	79420052 	stmdbvc	r2, {r1, r4, r6}^
    1e18:	77536574 			; <UNDEFINED> instruction: 0x77536574
    1e1c:	77007061 	strvc	r7, [r0, -r1, rrx]
    1e20:	6f6c424e 	svcvs	0x006c424e
    1e24:	00736b63 	rsbseq	r6, r3, r3, ror #22
    1e28:	61656c43 	cmnvs	r5, r3, asr #24
    1e2c:	4f544472 	svcmi	0x00544472
    1e30:	58525f47 	ldmdapl	r2, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    1e34:	64416200 	strbvs	r6, [r1], #-512	; 0x200
    1e38:	47007264 	strmi	r7, [r0, -r4, ror #4]
    1e3c:	4e437465 	cdpmi	4, 4, cr7, cr3, cr5, {3}
    1e40:	47005254 	smlsdmi	r0, r4, r2, r5
    1e44:	78527465 	ldmdavc	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1e48:	6c617453 	cfstrdvs	mvd7, [r1], #-332	; 0xfffffeb4
    1e4c:	6174536c 	cmnvs	r4, ip, ror #6
    1e50:	00737574 	rsbseq	r7, r3, r4, ror r5
    1e54:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0x547
    1e58:	52444441 	subpl	r4, r4, #1090519040	; 0x41000000
    1e5c:	6f437700 	svcvs	0x00437700
    1e60:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1e64:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1e68:	64644150 	strbtvs	r4, [r4], #-336	; 0x150
    1e6c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1e70:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1e74:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
    1e78:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1e7c:	54007375 	strpl	r7, [r0], #-885	; 0x375
    1e80:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
    1e84:	4f544465 	svcmi	0x00544465
    1e88:	58525f47 	ldmdapl	r2, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    1e8c:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1e90:	62445045 	subvs	r5, r4, #69	; 0x45
    1e94:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    1e98:	64644166 	strbtvs	r4, [r4], #-358	; 0x166
    1e9c:	65530072 	ldrbvs	r0, [r3, #-114]	; 0x72
    1ea0:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    1ea4:	00657079 	rsbeq	r7, r5, r9, ror r0
    1ea8:	445f5045 	ldrbmi	r5, [pc], #-69	; 1eb0 <__Stack_Size+0x16b0>
    1eac:	5f465542 	svcpl	0x00465542
    1eb0:	77004e49 	strvc	r4, [r0, -r9, asr #28]
    1eb4:	00746552 	rsbseq	r6, r4, r2, asr r5
    1eb8:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1ebc:	41785250 	cmnmi	r8, r0, asr r2
    1ec0:	00726464 	rsbseq	r6, r2, r4, ror #8
    1ec4:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1ec8:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    1ecc:	30667542 	rsbcc	r7, r6, r2, asr #10
    1ed0:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1ed4:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1ed8:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    1edc:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1ee0:	62007375 	andvs	r7, r0, #-738197503	; 0xd4000001
    1ee4:	00726944 	rsbseq	r6, r2, r4, asr #18
    1ee8:	70795477 	rsbsvc	r5, r9, r7, ror r4
    1eec:	73750065 	cmnvc	r5, #101	; 0x65
    1ef0:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1ef4:	73752f62 	cmnvc	r5, #392	; 0x188
    1ef8:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xf62
    1efc:	632e7367 	teqvs	lr, #-1677721599	; 0x9c000001
    1f00:	5f504500 	svcpl	0x00504500
    1f04:	46554244 	ldrbmi	r4, [r5], -r4, asr #4
    1f08:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
    1f0c:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1f10:	62445045 	subvs	r5, r4, #69	; 0x45
    1f14:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    1f18:	00726944 	rsbseq	r6, r2, r4, asr #18
    1f1c:	66754277 			; <UNDEFINED> instruction: 0x66754277
    1f20:	64644131 	strbtvs	r4, [r4], #-305	; 0x131
    1f24:	53770072 	cmnpl	r7, #114	; 0x72
    1f28:	53005777 	movwpl	r5, #1911	; 0x777
    1f2c:	50457465 	subpl	r7, r5, r5, ror #8
    1f30:	62756f44 	rsbsvs	r6, r5, #68, 30	; 0x110
    1f34:	7542656c 	strbvc	r6, [r2, #-1388]	; 0x56c
    1f38:	54006666 	strpl	r6, [r0], #-1638	; 0x666
    1f3c:	726f576f 	rsbvc	r5, pc, #29097984	; 0x1bc0000
    1f40:	65530064 	ldrbvs	r0, [r3, #-100]	; 0x64
    1f44:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    1f48:	64644178 	strbtvs	r4, [r4], #-376	; 0x178
    1f4c:	6c430072 	mcrrvs	0, 7, r0, r3, cr2
    1f50:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0x165
    1f54:	756f4450 	strbvc	r4, [pc, #-1104]!	; 1b0c <__Stack_Size+0x130c>
    1f58:	42656c62 	rsbmi	r6, r5, #25088	; 0x6200
    1f5c:	00666675 	rsbeq	r6, r6, r5, ror r6
    1f60:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1f64:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    1f68:	31667542 	cmncc	r6, r2, asr #10
    1f6c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1f70:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1f74:	79545045 	ldmdbvc	r4, {r0, r2, r6, ip, lr}^
    1f78:	43006570 	movwmi	r6, #1392	; 0x570
    1f7c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1f80:	435f5045 	cmpmi	pc, #69	; 0x45
    1f84:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    1f88:	65530058 	ldrbvs	r0, [r3, #-88]	; 0x58
    1f8c:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    1f90:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    1f94:	6f436666 	svcvs	0x00436666
    1f98:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1f9c:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1fa0:	494b5f50 	stmdbmi	fp, {r4, r6, r8, r9, sl, fp, ip, lr}^
    1fa4:	5300444e 	movwpl	r4, #1102	; 0x44e
    1fa8:	50457465 	subpl	r7, r5, r5, ror #8
    1fac:	6f437854 	svcvs	0x00437854
    1fb0:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1fb4:	61656c43 	cmnvs	r5, r3, asr #24
    1fb8:	5f504572 	svcpl	0x00504572
    1fbc:	444e494b 	strbmi	r4, [lr], #-2379	; 0x94b
    1fc0:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1fc4:	42415442 	submi	r5, r1, #1107296256	; 0x42000000
    1fc8:	4700454c 	strmi	r4, [r0, -ip, asr #10]
    1fcc:	53497465 	movtpl	r7, #37989	; 0x9465
    1fd0:	77005254 	smlsdvc	r0, r4, r2, r5
    1fd4:	56676552 			; <UNDEFINED> instruction: 0x56676552
    1fd8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    1fdc:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1fe0:	50444e45 	subpl	r4, r4, r5, asr #28
    1fe4:	544e494f 	strbpl	r4, [lr], #-2383	; 0x94f
    1fe8:	64417700 	strbvs	r7, [r1], #-1792	; 0x700
    1fec:	47007264 	strmi	r7, [r0, -r4, ror #4]
    1ff0:	50457465 	subpl	r7, r5, r5, ror #8
    1ff4:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    1ff8:	43306675 	teqmi	r0, #122683392	; 0x7500000
    1ffc:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    2000:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    2004:	44444144 	strbmi	r4, [r4], #-324	; 0x144
    2008:	64700052 	ldrbtvs	r0, [r0], #-82	; 0x52
    200c:	67655277 			; <UNDEFINED> instruction: 0x67655277
    2010:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    2014:	6f435045 	svcvs	0x00435045
    2018:	52746e75 	rsbspl	r6, r4, #1872	; 0x750
    201c:	67655278 			; <UNDEFINED> instruction: 0x67655278
    2020:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    2024:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
    2028:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    202c:	54620074 	strbtpl	r0, [r2], #-116	; 0x74
    2030:	00706d65 	rsbseq	r6, r0, r5, ror #26
    2034:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    2038:	0052544e 	subseq	r5, r2, lr, asr #8
    203c:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
    2040:	4c424154 	stfmie	f4, [r2], {84}	; 0x54
    2044:	65470045 	strbvs	r0, [r7, #-69]	; 0x45
    2048:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    204c:	756f4378 	strbvc	r4, [pc, #-888]!	; 1cdc <__Stack_Size+0x14dc>
    2050:	4300746e 	movwmi	r7, #1134	; 0x46e
    2054:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2058:	435f5045 	cmpmi	pc, #69	; 0x45
    205c:	545f5254 	ldrbpl	r5, [pc], #-596	; 2064 <__Stack_Size+0x1864>
    2060:	65470058 	strbvs	r0, [r7, #-88]	; 0x58
    2064:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    2068:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    206c:	6f433166 	svcvs	0x00433166
    2070:	00746e75 	rsbseq	r6, r4, r5, ror lr
    2074:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    2078:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    207c:	30667542 	rsbcc	r7, r6, r2, asr #10
    2080:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    2084:	42770074 	rsbsmi	r0, r7, #116	; 0x74
    2088:	41306675 	teqmi	r0, r5, ror r6
    208c:	00726464 	rsbseq	r6, r2, r4, ror #8
    2090:	5f746553 	svcpl	0x00746553
    2094:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    2098:	4f5f7375 	svcmi	0x005f7375
    209c:	47007475 	smlsdxmi	r0, r5, r4, r7
    20a0:	4e467465 	cdpmi	4, 4, cr7, cr6, cr5, {3}
    20a4:	65470052 	strbvs	r0, [r7, #-82]	; 0x52
    20a8:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    20ac:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    20b0:	64413066 	strbvs	r3, [r1], #-102	; 0x66
    20b4:	45007264 	strmi	r7, [r0, #-612]	; 0x264
    20b8:	6f70646e 	svcvs	0x0070646e
    20bc:	5f746e69 	svcpl	0x00746e69
    20c0:	474f5444 	strbmi	r5, [pc, -r4, asr #8]
    20c4:	6174535f 	cmnvs	r4, pc, asr r3
    20c8:	00737574 	rsbseq	r7, r3, r4, ror r5
    20cc:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    20d0:	41785450 	cmnmi	r8, r0, asr r4
    20d4:	00726464 	rsbseq	r6, r2, r4, ror #8
    20d8:	61656c43 	cmnvs	r5, r3, asr #24
    20dc:	4f544472 	svcmi	0x00544472
    20e0:	58545f47 	ldmdapl	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    20e4:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    20e8:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    20ec:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    20f0:	62007375 	andvs	r7, r0, #-738197503	; 0xd4000001
    20f4:	754e7045 	strbvc	r7, [lr, #-69]	; 0x45
    20f8:	6553006d 	ldrbvs	r0, [r3, #-109]	; 0x6d
    20fc:	444e4574 	strbmi	r4, [lr], #-1396	; 0x574
    2100:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
    2104:	65530054 	ldrbvs	r0, [r3, #-84]	; 0x54
    2108:	52504574 	subspl	r4, r0, #116, 10	; 0x1d000000
    210c:	64644178 	strbtvs	r4, [r4], #-376	; 0x178
    2110:	65530072 	ldrbvs	r0, [r3, #-114]	; 0x72
    2114:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    2118:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    211c:	6f433166 	svcvs	0x00433166
    2120:	00746e75 	rsbseq	r6, r4, r5, ror lr
    2124:	5f525443 	svcpl	0x00525443
    2128:	53005048 	movwpl	r5, #72	; 0x48
    212c:	70757465 	rsbsvc	r7, r5, r5, ror #8
    2130:	72505f30 	subsvc	r5, r0, #48, 30	; 0xc0
    2134:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    2138:	61530073 	cmpvs	r3, r3, ror r0
    213c:	53526576 	cmppl	r2, #494927872	; 0x1d800000
    2140:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    2144:	76615300 	strbtvc	r5, [r1], -r0, lsl #6
    2148:	74535465 	ldrbvc	r5, [r3], #-1125	; 0x465
    214c:	00657461 	rsbeq	r7, r5, r1, ror #8
    2150:	56504577 			; <UNDEFINED> instruction: 0x56504577
    2154:	75006c61 	strvc	r6, [r0, #-3169]	; 0xc61
    2158:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    215c:	752f6269 	strvc	r6, [pc, #-617]!	; 1efb <__Stack_Size+0x16fb>
    2160:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    2164:	632e746e 	teqvs	lr, #1845493760	; 0x6e000000
    2168:	306e4900 	rsbcc	r4, lr, r0, lsl #18
    216c:	6f72505f 	svcvs	0x0072505f
    2170:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    2174:	74754f00 	ldrbtvc	r4, [r5], #-3840	; 0xf00
    2178:	72505f30 	subsvc	r5, r0, #48, 30	; 0xc0
    217c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    2180:	50450073 	subpl	r0, r5, r3, ror r0
    2184:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xe69
    2188:	61530078 	cmpvs	r3, r8, ror r0
    218c:	74536576 	ldrbvc	r6, [r3], #-1398	; 0x576
    2190:	00657461 	rsbeq	r7, r5, r1, ror #8
    2194:	5f627375 	svcpl	0x00627375
    2198:	2f62696c 	svccs	0x0062696c
    219c:	5f627375 	svcpl	0x00627375
    21a0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    21a4:	7000632e 	andvc	r6, r0, lr, lsr #6
    21a8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    21ac:	6174535f 	cmnvs	r4, pc, asr r3
    21b0:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    21b4:	65525f64 	ldrbvs	r5, [r2, #-3940]	; 0xf64
    21b8:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    21bc:	44007374 	strmi	r7, [r0], #-884	; 0x374
    21c0:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    21c4:	6e495f65 	cdpvs	15, 4, cr5, cr9, cr5, {3}
    21c8:	75006f66 	strvc	r6, [r0, #-3942]	; 0xf66
    21cc:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    21d0:	752f6269 	strvc	r6, [pc, #-617]!	; 1f6f <__Stack_Size+0x176f>
    21d4:	635f6273 	cmpvs	pc, #805306375	; 0x30000007
    21d8:	2e65726f 	cdpcs	2, 6, cr7, cr5, cr15, {3}
    21dc:	4e450063 	cdpmi	0, 4, cr0, cr5, cr3, {3}
    21e0:	494f5044 	stmdbmi	pc, {r2, r6, ip, lr}^	; <UNPREDICTABLE>
    21e4:	535f544e 	cmppl	pc, #1308622848	; 0x4e000000
    21e8:	4c4c4154 	stfmie	f4, [ip], {84}	; 0x54
    21ec:	73655200 	cmnvc	r5, #0, 4
    21f0:	00746c75 	rsbseq	r6, r4, r5, ror ip
    21f4:	74736f50 	ldrbtvc	r6, [r3], #-3920	; 0xf50
    21f8:	72505f30 	subsvc	r5, r0, #48, 30	; 0xc0
    21fc:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    2200:	61440073 	hvcvs	16387	; 0x4003
    2204:	75426174 	strbvc	r6, [r2, #-372]	; 0x174
    2208:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    220c:	73655200 	cmnvc	r5, #0, 4
    2210:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0x265
    2214:	74530064 	ldrbvc	r0, [r3], #-100	; 0x64
    2218:	61646e61 	cmnvs	r4, r1, ror #28
    221c:	535f6472 	cmppl	pc, #1912602624	; 0x72000000
    2220:	6f437465 	svcvs	0x00437465
    2224:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2228:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
    222c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2230:	61746144 	cmnvs	r4, r4, asr #2
    2234:	67617453 			; <UNDEFINED> instruction: 0x67617453
    2238:	006e4965 	rsbeq	r4, lr, r5, ror #18
    223c:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
    2240:	525f4543 	subspl	r4, pc, #281018368	; 0x10c00000
    2244:	544f4d45 	strbpl	r4, [pc], #-3397	; 224c <__Stack_Size+0x1a4c>
    2248:	41575f45 	cmpmi	r7, r5, asr #30
    224c:	5055454b 	subspl	r4, r5, fp, asr #10
    2250:	41545300 	cmpmi	r4, r0, lsl #6
    2254:	44454c4c 	strbmi	r4, [r5], #-3148	; 0xc4c
    2258:	70795400 	rsbsvc	r5, r9, r0, lsl #8
    225c:	65525f65 	ldrbvs	r5, [r2, #-3941]	; 0xf65
    2260:	78650063 	stmdavc	r5!, {r0, r1, r5, r6}^
    2264:	4e5f7469 	cdpmi	4, 5, cr7, cr15, cr9, {3}
    2268:	7461446f 	strbtvc	r4, [r1], #-1135	; 0x46f
    226c:	65535f61 	ldrbvs	r5, [r3, #-3937]	; 0xf61
    2270:	30707574 	rsbscc	r7, r0, r4, ror r5
    2274:	61567700 	cmpvs	r6, r0, lsl #14
    2278:	3165756c 	cmncc	r5, ip, ror #10
    227c:	56454400 	strbpl	r4, [r5], -r0, lsl #8
    2280:	5f454349 	svcpl	0x00454349
    2284:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    2288:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    228c:	5300524f 	movwpl	r5, #591	; 0x24f
    2290:	4e495254 	mcrmi	2, 2, r5, cr9, cr4, {2}
    2294:	45445f47 	strbmi	r5, [r4, #-3911]	; 0xf47
    2298:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    229c:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    22a0:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
    22a4:	506f5472 	rsbpl	r5, pc, r2, ror r4	; <UNPREDICTABLE>
    22a8:	7542414d 	strbvc	r4, [r2, #-333]	; 0x14d
    22ac:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    22b0:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
    22b4:	76617300 	strbtvc	r7, [r1], -r0, lsl #6
    22b8:	4c725f65 	ldclmi	15, cr5, [r2], #-404	; 0xfffffe6c
    22bc:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    22c0:	414c0068 	cmpmi	ip, r8, rrx
    22c4:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    22c8:	41445f4e 	cmpmi	r4, lr, asr #30
    22cc:	4e004154 	mcrmi	1, 0, r4, cr0, cr4, {2}
    22d0:	505f504f 	subspl	r5, pc, pc, asr #32
    22d4:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    22d8:	53007373 	movwpl	r7, #883	; 0x373
    22dc:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    22e0:	5f647261 	svcpl	0x00647261
    22e4:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    22e8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    22ec:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
    22f0:	70784500 	rsbsvc	r4, r8, r0, lsl #10
    22f4:	5f746365 	svcpl	0x00746365
    22f8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    22fc:	4f5f7375 	svcmi	0x005f7375
    2300:	50007475 	andpl	r7, r0, r5, ror r4
    2304:	45535541 	ldrbmi	r5, [r3, #-1345]	; 0x541
    2308:	71655200 	cmnvc	r5, r0, lsl #4
    230c:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
    2310:	47006f4e 	strmi	r6, [r0, -lr, asr #30]
    2314:	495f5445 	ldmdbmi	pc, {r0, r2, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2318:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    231c:	45434146 	strbmi	r4, [r3, #-326]	; 0x146
    2320:	61745300 	cmnvs	r4, r0, lsl #6
    2324:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    2328:	65535f64 	ldrbvs	r5, [r3, #-3940]	; 0xf64
    232c:	646e4574 	strbtvs	r4, [lr], #-1396	; 0x574
    2330:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
    2334:	61654674 	smcvs	21604	; 0x5464
    2338:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    233c:	54454700 	strbpl	r4, [r5], #-1792	; 0x700
    2340:	4154535f 	cmpmi	r4, pc, asr r3
    2344:	00535554 	subseq	r5, r3, r4, asr r5
    2348:	5f544553 	svcpl	0x00544553
    234c:	54414546 	strbpl	r4, [r1], #-1350	; 0x546
    2350:	00455255 	subeq	r5, r5, r5, asr r2
    2354:	61746144 	cmnvs	r4, r4, asr #2
    2358:	6c754d5f 	ldclvs	13, cr4, [r5], #-380	; 0xfffffe84
    235c:	78614d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
    2360:	6b636150 	blvs	18da8a8 <__Stack_Size+0x18da0a8>
    2364:	69537465 	ldmdbvs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2368:	7000657a 	andvc	r6, r0, sl, ror r5
    236c:	00766544 	rsbseq	r6, r6, r4, asr #10
    2370:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    2374:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    2378:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    237c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2380:	65466563 	strbvs	r6, [r6, #-1379]	; 0x563
    2384:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    2388:	44700065 	ldrbtmi	r0, [r0], #-101	; 0x65
    238c:	00637365 	rsbeq	r7, r3, r5, ror #6
    2390:	434e5953 	movtmi	r5, #59731	; 0xe953
    2394:	52465f48 	subpl	r5, r6, #72, 30	; 0x120
    2398:	00454d41 	subeq	r4, r5, r1, asr #26
    239c:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    23a0:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    23a4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    23a8:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    23ac:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    23b0:	45530065 	ldrbmi	r0, [r3, #-101]	; 0x65
    23b4:	45445f54 	strbmi	r5, [r4, #-3924]	; 0xf54
    23b8:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    23bc:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    23c0:	54455300 	strbpl	r5, [r5], #-768	; 0x300
    23c4:	544e495f 	strbpl	r4, [lr], #-2399	; 0x95f
    23c8:	41465245 	cmpmi	r6, r5, asr #4
    23cc:	5f004543 	svcpl	0x00004543
    23d0:	54414546 	strbpl	r4, [r1], #-1350	; 0x546
    23d4:	5f455255 	svcpl	0x00455255
    23d8:	454c4553 	strbmi	r4, [ip, #-1363]	; 0x553
    23dc:	524f5443 	subpl	r5, pc, #1124073472	; 0x43000000
    23e0:	61745300 	cmnvs	r4, r0, lsl #6
    23e4:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    23e8:	65475f64 	strbvs	r5, [r7, #-3940]	; 0xf64
    23ec:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    23f0:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
    23f4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    23f8:	53006e6f 	movwpl	r6, #3695	; 0xe6f
    23fc:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    2400:	5f647261 	svcpl	0x00647261
    2404:	61656c43 	cmnvs	r5, r3, asr #24
    2408:	61654672 	smcvs	21602	; 0x5462
    240c:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    2410:	54454700 	strbpl	r4, [r5], #-1792	; 0x700
    2414:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    2418:	55474946 	strbpl	r4, [r7, #-2374]	; 0x946
    241c:	49544152 	ldmdbmi	r4, {r1, r4, r6, r8, lr}^
    2420:	5f004e4f 	svcpl	0x00004e4f
    2424:	544e4f43 	strbpl	r4, [lr], #-3907	; 0xf43
    2428:	5f4c4f52 	svcpl	0x004c4f52
    242c:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
    2430:	445f0045 	ldrbmi	r0, [pc], #-69	; 2438 <__Stack_Size+0x1c38>
    2434:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    2438:	4f545049 	svcmi	0x00545049
    243c:	59545f52 	ldmdbpl	r4, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    2440:	53004550 	movwpl	r4, #1360	; 0x550
    2444:	49545445 	ldmdbmi	r4, {r0, r2, r6, sl, ip, lr}^
    2448:	555f474e 	ldrbpl	r4, [pc, #-1870]	; 1d02 <__Stack_Size+0x1502>
    244c:	4d500050 	ldclmi	0, cr0, [r0, #-320]	; 0xfffffec0
    2450:	556f5441 	strbpl	r5, [pc, #-1089]!	; 2017 <__Stack_Size+0x1817>
    2454:	42726573 	rsbsmi	r6, r2, #482344960	; 0x1cc00000
    2458:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    245c:	706f4372 	rsbvc	r4, pc, r2, ror r3	; <UNPREDICTABLE>
    2460:	45530079 	ldrbmi	r0, [r3, #-121]	; 0x79
    2464:	4f435f54 	svcmi	0x00435f54
    2468:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
    246c:	54415255 	strbpl	r5, [r1], #-597	; 0x255
    2470:	004e4f49 	subeq	r4, lr, r9, asr #30
    2474:	54494157 	strbpl	r4, [r9], #-343	; 0x157
    2478:	4154535f 	cmpmi	r4, pc, asr r3
    247c:	5f535554 	svcpl	0x00535554
    2480:	0054554f 	subseq	r5, r4, pc, asr #10
    2484:	41544f54 	cmpmi	r4, r4, asr pc
    2488:	52735f4c 	rsbspl	r5, r3, #76, 30	; 0x130
    248c:	45555145 	ldrbmi	r5, [r5, #-325]	; 0x145
    2490:	49005453 	stmdbmi	r0, {r0, r1, r4, r6, sl, ip, lr}
    2494:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    2498:	45434146 	strbmi	r4, [r3, #-326]	; 0x146
    249c:	5345445f 	movtpl	r4, #21599	; 0x545f
    24a0:	50495243 	subpl	r5, r9, r3, asr #4
    24a4:	00524f54 	subseq	r4, r2, r4, asr pc
    24a8:	65766173 	ldrbvs	r6, [r6, #-371]!	; 0x173
    24ac:	654c775f 	strbvs	r7, [ip, #-1887]	; 0x75f
    24b0:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    24b4:	61745300 	cmnvs	r4, r0, lsl #6
    24b8:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    24bc:	65475f64 	strbvs	r5, [r7, #-3940]	; 0xf64
    24c0:	61745374 	cmnvs	r4, r4, ror r3
    24c4:	00737574 	rsbseq	r7, r3, r4, ror r5
    24c8:	50444e45 	subpl	r4, r4, r5, asr #28
    24cc:	544e494f 	strbpl	r4, [lr], #-2383	; 0x94f
    24d0:	5345445f 	movtpl	r4, #21599	; 0x545f
    24d4:	50495243 	subpl	r5, r9, r3, asr #4
    24d8:	00524f54 	subseq	r4, r2, r4, asr pc
    24dc:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    24e0:	445f4749 	ldrbmi	r4, [pc], #-1865	; 24e8 <__Stack_Size+0x1ce8>
    24e4:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    24e8:	4f545049 	svcmi	0x00545049
    24ec:	42700052 	rsbsmi	r0, r0, #82	; 0x52
    24f0:	70006675 	andvc	r6, r0, r5, ror r6
    24f4:	6e695045 	cdpvs	0, 6, cr5, cr9, cr5, {2}
    24f8:	53006f66 	movwpl	r6, #3942	; 0xf66
    24fc:	415f5445 	cmpmi	pc, r5, asr #8
    2500:	45524444 	ldrbmi	r4, [r2, #-1092]	; 0x444
    2504:	52005353 	andpl	r5, r0, #1275068417	; 0x4c000001
    2508:	74616c65 	strbtvc	r6, [r1], #-3173	; 0xc65
    250c:	455f6465 	ldrbmi	r6, [pc, #-1125]	; 20af <__Stack_Size+0x18af>
    2510:	6f70646e 	svcvs	0x0070646e
    2514:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2518:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    251c:	6e497375 	mcrvs	3, 2, r7, cr9, cr5, {3}
    2520:	77006f66 	strvc	r6, [r0, -r6, ror #30]
    2524:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xe49
    2528:	47003078 	smlsdxmi	r0, r8, r0, r3
    252c:	445f5445 	ldrbmi	r5, [pc], #-1093	; 2534 <__Stack_Size+0x1d34>
    2530:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    2534:	4f545049 	svcmi	0x00545049
    2538:	61440052 	qdaddvs	r0, r2, r4
    253c:	74536174 	ldrbvc	r6, [r3], #-372	; 0x174
    2540:	4f656761 	svcmi	0x00656761
    2544:	57007475 	smlsdxpl	r0, r5, r4, r7
    2548:	5f544941 	svcpl	0x00544941
    254c:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0x553
    2550:	65520050 	ldrbvs	r0, [r2, #-80]	; 0x50
    2554:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    2558:	6f4e5f74 	svcvs	0x004e5f74
    255c:	49415700 	stmdbmi	r1, {r8, r9, sl, ip, lr}^
    2560:	54535f54 	ldrbpl	r5, [r3], #-3924	; 0xf54
    2564:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    2568:	004e495f 	subeq	r4, lr, pc, asr r9
    256c:	41454c43 	cmpmi	r5, r3, asr #24
    2570:	45465f52 	strbmi	r5, [r6, #-3922]	; 0xf52
    2574:	52555441 	subspl	r5, r5, #1090519040	; 0x41000000
    2578:	414c0045 	cmpmi	ip, r5, asr #32
    257c:	4f5f5453 	svcmi	0x005f5453
    2580:	445f5455 	ldrbmi	r5, [pc], #-1109	; 2588 <__Stack_Size+0x1d88>
    2584:	00415441 	subeq	r5, r1, r1, asr #8
    2588:	5f627375 	svcpl	0x00627375
    258c:	2f62696c 	svccs	0x0062696c
    2590:	5f627375 	svcpl	0x00627375
    2594:	2e6d656d 	cdpcs	5, 6, cr6, cr13, cr13, {3}
    2598:	4e770063 	cdpmi	0, 7, cr0, cr7, cr3, {3}
    259c:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0x942
    25a0:	62700073 	rsbsvs	r0, r0, #115	; 0x73
    25a4:	42727355 	rsbsmi	r7, r2, #1409286145	; 0x54000001
    25a8:	77006675 	smlsdxvc	r0, r5, r6, r6
    25ac:	42414d50 	submi	r4, r1, #80, 26	; 0x1400
    25b0:	64416675 	strbvs	r6, [r1], #-1653	; 0x675
    25b4:	70007264 	andvc	r7, r0, r4, ror #4
    25b8:	61567764 	cmpvs	r6, r4, ror #14
    25bc:	Address 0x000025bc is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	08000b9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp}
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	08000ba6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, fp}
       8:	a6500001 	ldrbge	r0, [r0], -r1
       c:	a808000b 	stmdage	r8, {r0, r1, r3}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	0408000b 	streq	r0, [r8], #-11
      14:	5001f300 	andpl	pc, r1, r0, lsl #6
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      1c:	00000000 	andeq	r0, r0, r0
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	000c1800 	andeq	r1, ip, r0, lsl #16
      24:	000c1c08 	andeq	r1, ip, r8, lsl #24
      28:	71000508 	tstvc	r0, r8, lsl #10
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	9f274000 	svcls	0x00274000
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	08000c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp}
      34:	08000c20 	stmdaeq	r0, {r5, sl, fp}
      38:	00710007 	rsbseq	r0, r1, r7

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	27402740 	strbcs	r2, [r0, -r0, asr #14]

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	000c209f 	muleq	ip, pc, r0	; <UNPREDICTABLE>
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	000c2208 	andeq	r2, ip, r8, lsl #4
      48:	73000808 	movwvc	r0, #2056	; 0x808
      4c:	27400600 	strbcs	r0, [r0, -r0, lsl #12]

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	229f2740 	addscs	r2, pc, #64, 14	; 0x1000000
      54:	4108000c 	tstmi	r8, ip
      58:	0b08000c 	bleq	200090 <__Stack_Size+0x1ff890>
      5c:	5c000c00 	stcpl	12, cr0, [r0], {-0}
      60:	40064000 	andmi	r4, r6, r0
      64:	9f274027 	svcls	0x00274027
	...
      70:	08000c84 	stmdaeq	r0, {r2, r7, sl, fp}
      74:	08000c9b 	stmdaeq	r0, {r0, r1, r3, r4, r7, sl, fp}
      78:	9b500001 	blls	1400084 <__Stack_Size+0x13ff884>
      7c:	e408000c 	str	r0, [r8], #-12
      80:	0408000c 	streq	r0, [r8], #-12
      84:	5001f300 	andpl	pc, r1, r0, lsl #6
      88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      8c:	00000000 	andeq	r0, r0, r0
      90:	000c8400 	andeq	r8, ip, r0, lsl #8
      94:	000cae08 	andeq	sl, ip, r8, lsl #28
      98:	30000208 	andcc	r0, r0, r8, lsl #4
      9c:	000cb69f 	muleq	ip, pc, r6	; <UNPREDICTABLE>
      a0:	000cbc08 	andeq	fp, ip, r8, lsl #24
      a4:	30000208 	andcc	r0, r0, r8, lsl #4
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      a8:	000cbc9f 	muleq	ip, pc, ip	; <UNPREDICTABLE>
				{
					state_in->step = step_c;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ac:	000cc708 	andeq	ip, ip, r8, lsl #14
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      b0:	53000108 	movwpl	r0, #264	; 0x108
      b4:	08000ccc 	stmdaeq	r0, {r2, r3, r6, r7, sl, fp}
			*plainchar    = (fragment & 0x003) << 6;
      b8:	08000ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp}
      bc:	9f300002 	svcls	0x00300002
	...
	case step_d:
			do {
				if (codechar == code_in+length_in)
      c8:	08000ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp}
				{
					state_in->step = step_d;
      cc:	08000ce9 	stmdaeq	r0, {r0, r3, r5, r6, r7, sl, fp}
					state_in->plainchar = *plainchar;
      d0:	e9500001 	ldmdb	r0, {r0}^
					return plainchar - plaintext_out;
      d4:	f008000c 			; <UNDEFINED> instruction: 0xf008000c
      d8:	0408000c 	streq	r0, [r8], #-12
				}
				fragment = (char)base64_decode_value(*codechar++);
      dc:	5001f300 	andpl	pc, r1, r0, lsl #6
      e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      e4:	00000000 	andeq	r0, r0, r0
      e8:	000cf000 	andeq	pc, ip, r0
				{
					state_in->step = step_d;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ec:	000cf508 	andeq	pc, ip, r8, lsl #10
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      f0:	50000108 	andpl	r0, r0, r8, lsl #2
      f4:	08000cf5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sl, fp}
		}
      f8:	08000cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp}
	}
	/* control should not reach here */
	return plainchar - plaintext_out;
}
      fc:	01f30004 	mvnseq	r0, r4
	uint8_t x1z1[F25519_SIZE];
	uint8_t a[F25519_SIZE];

	f25519_mul__distinct(x1sq, x1, x1);
	f25519_mul__distinct(z1sq, z1, z1);
	f25519_mul__distinct(x1z1, x1, z1);
     100:	00009f50 	andeq	r9, r0, r0, asr pc
     104:	00000000 	andeq	r0, r0, r0

	f25519_sub(a, x1sq, z1sq);
     108:	0cfc0000 	ldcleq	0, cr0, [ip]
     10c:	0d0f0800 	stceq	8, cr0, [pc, #-0]	; 114 <_Minimum_Stack_Size+0x14>
	f25519_mul__distinct(x3, a, a);
     110:	00010800 	andeq	r0, r1, r0, lsl #16
     114:	000d0f50 	andeq	r0, sp, r0, asr pc
     118:	000d1008 	andeq	r1, sp, r8

	f25519_mul_c(a, x1z1, 486662);
     11c:	f3000408 	vshl.u8	d0, d8, d0
     120:	109f5001 	addsne	r5, pc, r1
	f25519_add(a, x1sq, a);
     124:	1208000d 	andne	r0, r8, #13
     128:	0108000d 	tsteq	r8, sp
     12c:	0d125000 	ldceq	0, cr5, [r2, #-0]
	f25519_add(a, z1sq, a);
     130:	0d1c0800 	ldceq	8, cr0, [ip, #-0]
     134:	00040800 	andeq	r0, r4, r0, lsl #16
	f25519_mul__distinct(x1sq, x1z1, a);
     138:	9f5001f3 	svcls	0x005001f3
	...
	f25519_mul_c(z3, x1sq, 4);
     144:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
     148:	08000d21 	stmdaeq	r0, {r0, r5, r8, sl, fp}
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	21500001 	cmpcs	r0, r1
     150:	2808000d 	stmdacs	r8, {r0, r2, r3}
     154:	0408000d 	streq	r0, [r8], #-13
	f25519_sub(b, x3, z3); /* D */
     158:	5001f300 	andpl	pc, r1, r0, lsl #6
     15c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	f25519_mul__distinct(da, a, b);
     160:	00000000 	andeq	r0, r0, r0
     164:	000d2800 	andeq	r2, sp, r0, lsl #16
     168:	000d3b08 	andeq	r3, sp, r8, lsl #22

	f25519_sub(b, x2, z2);
     16c:	50000108 	andpl	r0, r0, r8, lsl #2
     170:	08000d3b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r8, sl, fp}
	f25519_add(a, x3, z3); /* C */
     174:	08000d46 	stmdaeq	r0, {r1, r2, r6, r8, sl, fp}
     178:	01f30004 	mvnseq	r0, r4
     17c:	0d469f50 	stcleq	15, cr9, [r6, #-320]	; 0xfffffec0
	f25519_mul__distinct(cb, a, b);
     180:	0d480800 	stcleq	8, cr0, [r8, #-0]
     184:	00010800 	andeq	r0, r1, r0, lsl #16

	f25519_add(a, da, cb);
     188:	000d4850 	andeq	r4, sp, r0, asr r8
     18c:	000d5008 	andeq	r5, sp, r8
     190:	f3000408 	vshl.u8	d0, d8, d0
	f25519_mul__distinct(b, a, a);
     194:	009f5001 	addseq	r5, pc, r1
     198:	00000000 	andeq	r0, r0, r0
	f25519_mul__distinct(x5, z1, b);
     19c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     1a0:	4608000d 	strmi	r0, [r8], -sp
     1a4:	0408000d 	streq	r0, [r8], #-13

	f25519_sub(a, da, cb);
     1a8:	5001f300 	andpl	pc, r1, r0, lsl #6
     1ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	f25519_mul__distinct(b, a, a);
     1b0:	00000000 	andeq	r0, r0, r0
     1b4:	000dbe00 	andeq	fp, sp, r0, lsl #28
     1b8:	000dc208 	andeq	ip, sp, r8, lsl #4

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	72000508 	andvc	r0, r0, #8, 10	; 0x2000000
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	9f213c00 	svcls	0x00213c00
	...

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1cc:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
     1d0:	08000e09 	stmdaeq	r0, {r0, r3, r9, sl, fp}
     1d4:	09500001 	ldmdbeq	r0, {r0}^
		f25519_select(zm1, zm1, zm, bit);
     1d8:	0c08000e 	stceq	0, cr0, [r8], {14}
     1dc:	0408000e 	streq	r0, [r8], #-14
     1e0:	5001f300 	andpl	pc, r1, r0, lsl #6
		f25519_select(xm, xm, xms, bit);
     1e4:	000e0c9f 	muleq	lr, pc, ip	; <UNPREDICTABLE>
     1e8:	000e0f08 	andeq	r0, lr, r8, lsl #30
     1ec:	50000108 	andpl	r0, r0, r8, lsl #2
		f25519_select(zm, zm, zms, bit);
     1f0:	08000e0f 	stmdaeq	r0, {r0, r1, r2, r3, r9, sl, fp}
     1f4:	08000e14 	stmdaeq	r0, {r2, r4, r9, sl, fp}
     1f8:	01f30004 	mvnseq	r0, r4
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	0e149f50 	mrceq	15, 0, r9, cr4, cr0, {2}
     200:	0e620800 	cdpeq	8, 6, cr0, cr2, cr0, {0}
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	00010800 	andeq	r0, r1, r0, lsl #16
     208:	000e6250 	andeq	r6, lr, r0, asr r2
	f25519_mul__distinct(result, zm1, xm);
     20c:	000e7008 	andeq	r7, lr, r8
     210:	f3000408 	vshl.u8	d0, d8, d0
	f25519_normalize(result);
     214:	009f5001 	addseq	r5, pc, r1
     218:	00000000 	andeq	r0, r0, r0
}
     21c:	32000000 	andcc	r0, r0, #0
     220:	3608000e 	strcc	r0, [r8], -lr
     224:	0508000e 	streq	r0, [r8, #-14]
     228:	40007200 	andmi	r7, r0, r0, lsl #4
     22c:	0e569f21 	cdpeq	15, 5, cr9, cr6, cr1, {1}
     230:	0e5c0800 	cdpeq	8, 5, cr0, cr12, cr0, {0}
     234:	00060800 	andeq	r0, r6, r0, lsl #16
     238:	ef090071 	svc	0x00090071
     23c:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
     24c:	00010000 	andeq	r0, r1, r0
     250:	00000050 	andeq	r0, r0, r0, asr r0
     254:	00000000 	andeq	r0, r0, r0
     258:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     26c:	00510001 	subseq	r0, r1, r1
     270:	00000000 	andeq	r0, r0, r0
     274:	01000000 	mrseq	r0, (UNDEF: 0)
     278:	00005400 	andeq	r5, r0, r0, lsl #8
     27c:	00000000 	andeq	r0, r0, r0
     280:	10340000 	eorsne	r0, r4, r0
     284:	103a0800 	eorsne	r0, sl, r0, lsl #16
     288:	00010800 	andeq	r0, r1, r0, lsl #16
     28c:	00103a50 	andseq	r3, r0, r0, asr sl
     290:	00105608 	andseq	r5, r0, r8, lsl #12
     294:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     298:	08001056 	stmdaeq	r0, {r1, r2, r4, r6, ip}
     29c:	08001066 	stmdaeq	r0, {r1, r2, r5, r6, ip}
     2a0:	01f30004 	mvnseq	r0, r4
     2a4:	00009f50 	andeq	r9, r0, r0, asr pc
     2a8:	00000000 	andeq	r0, r0, r0
     2ac:	10340000 	eorsne	r0, r4, r0
     2b0:	103f0800 	eorsne	r0, pc, r0, lsl #16
     2b4:	00010800 	andeq	r0, r1, r0, lsl #16
     2b8:	00103f51 	andseq	r3, r0, r1, asr pc
     2bc:	00106608 	andseq	r6, r0, r8, lsl #12
     2c0:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
     2cc:	08001056 	stmdaeq	r0, {r1, r2, r4, r6, ip}
     2d0:	08001058 	stmdaeq	r0, {r3, r4, r6, ip}
     2d4:	58500001 	ldmdapl	r0, {r0}^
     2d8:	60080010 	andvs	r0, r8, r0, lsl r0
     2dc:	01080010 	tsteq	r8, r0, lsl r0
     2e0:	10605500 	rsbne	r5, r0, r0, lsl #10
     2e4:	10660800 	rsbne	r0, r6, r0, lsl #16
     2e8:	00010800 	andeq	r0, r1, r0, lsl #16
     2ec:	00000050 	andeq	r0, r0, r0, asr r0
     2f0:	00000000 	andeq	r0, r0, r0
     2f4:	00110000 	andseq	r0, r1, r0
     2f8:	00112c08 	andseq	r2, r1, r8, lsl #24
     2fc:	30000208 	andcc	r0, r0, r8, lsl #4
     300:	00112c9f 	mulseq	r1, pc, ip	; <UNPREDICTABLE>
     304:	00112e08 	andseq	r2, r1, r8, lsl #28
     308:	70000708 	andvc	r0, r0, r8, lsl #14
     30c:	30244800 	eorcc	r4, r4, r0, lsl #16
     310:	112e9f29 	teqne	lr, r9, lsr #30
     314:	11580800 	cmpne	r8, r0, lsl #16
     318:	00070800 	andeq	r0, r7, r0, lsl #16
     31c:	24480074 	strbcs	r0, [r8], #-116	; 0x74
     320:	5e9f2930 	mrcpl	9, 4, r2, cr15, cr0, {1}
     324:	64080011 	strvs	r0, [r8], #-17
     328:	07080011 	smladeq	r8, r1, r0, r0
     32c:	48007400 	stmdami	r0, {sl, ip, sp, lr}
     330:	9f293024 	svcls	0x00293024
     334:	08001164 	stmdaeq	r0, {r2, r5, r6, r8, ip}
     338:	08001168 	stmdaeq	r0, {r3, r5, r6, r8, ip}
     33c:	9f300002 	svcls	0x00300002
     340:	08001168 	stmdaeq	r0, {r3, r5, r6, r8, ip}
     344:	0800117a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, ip}
     348:	00740007 	rsbseq	r0, r4, r7
     34c:	29302448 	ldmdbcs	r0!, {r3, r6, sl, sp}
     350:	00117a9f 	mulseq	r1, pc, sl	; <UNPREDICTABLE>
     354:	00117c08 	andseq	r7, r1, r8, lsl #24
     358:	31000208 	tstcc	r0, r8, lsl #4
     35c:	00117c9f 	mulseq	r1, pc, ip	; <UNPREDICTABLE>
     360:	0011c808 	andseq	ip, r1, r8, lsl #16
     364:	54000108 	strpl	r0, [r0], #-264	; 0x108
     368:	080011c8 	stmdaeq	r0, {r3, r6, r7, r8, ip}
     36c:	080011fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, ip}
     370:	00500001 	subseq	r0, r0, r1
     374:	00000000 	andeq	r0, r0, r0
     378:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
     37c:	42080011 	andmi	r0, r8, #17
     380:	01080011 	tsteq	r8, r1, lsl r0
     384:	11425000 	mrsne	r5, (UNDEF: 66)
     388:	11470800 	cmpne	r7, r0, lsl #16
     38c:	00010800 	andeq	r0, r1, r0, lsl #16
     390:	00114751 	andseq	r4, r1, r1, asr r7
     394:	0011c808 	andseq	ip, r1, r8, lsl #16
     398:	75000308 	strvc	r0, [r0, #-776]	; 0x308
     39c:	00009f02 	andeq	r9, r0, r2, lsl #30
     3a0:	00000000 	andeq	r0, r0, r0
     3a4:	11fc0000 	mvnsne	r0, r0
     3a8:	12020800 	andne	r0, r2, #0, 16
     3ac:	00010800 	andeq	r0, r1, r0, lsl #16
     3b0:	00120251 	andseq	r0, r2, r1, asr r2
     3b4:	00121208 	andseq	r1, r2, r8, lsl #4
     3b8:	f3000408 	vshl.u8	d0, d8, d0
     3bc:	009f5101 	addseq	r5, pc, r1, lsl #2
     3c0:	00000000 	andeq	r0, r0, r0
     3c4:	fc000000 	stc2	0, cr0, [r0], {-0}
     3c8:	fc080011 	stc2	0, cr0, [r8], {17}
     3cc:	01080011 	tsteq	r8, r1, lsl r0
     3d0:	11fc5200 	mvnsne	r5, r0, lsl #4
     3d4:	12060800 	andne	r0, r6, #0, 16
     3d8:	00070800 	andeq	r0, r7, r0, lsl #16
     3dc:	24480072 	strbcs	r0, [r8], #-114	; 0x72
     3e0:	069f2930 			; <UNDEFINED> instruction: 0x069f2930
     3e4:	12080012 	andne	r0, r8, #18
     3e8:	08080012 	stmdaeq	r8, {r1, r4}
     3ec:	5201f300 	andpl	pc, r1, #0, 6
     3f0:	29302448 	ldmdbcs	r0!, {r3, r6, sl, sp}
     3f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     3f8:	00000000 	andeq	r0, r0, r0
     3fc:	00121200 	andseq	r1, r2, r0, lsl #4
     400:	00122208 	andseq	r2, r2, r8, lsl #4
     404:	50000108 	andpl	r0, r0, r8, lsl #2
     408:	08001222 	stmdaeq	r0, {r1, r5, r9, ip}
     40c:	08001224 	stmdaeq	r0, {r2, r5, r9, ip}
     410:	01f30004 	mvnseq	r0, r4
     414:	00009f50 	andeq	r9, r0, r0, asr pc
     418:	00000000 	andeq	r0, r0, r0
     41c:	12120000 	andsne	r0, r2, #0
     420:	12180800 	andsne	r0, r8, #0, 16
     424:	00010800 	andeq	r0, r1, r0, lsl #16
     428:	00121851 	andseq	r1, r2, r1, asr r8
     42c:	00122408 	andseq	r2, r2, r8, lsl #8
     430:	f3000408 	vshl.u8	d0, d8, d0
     434:	009f5101 	addseq	r5, pc, r1, lsl #2
     438:	00000000 	andeq	r0, r0, r0
     43c:	24000000 	strcs	r0, [r0], #-0
     440:	3f080012 	svccc	0x00080012
     444:	01080012 	tsteq	r8, r2, lsl r0
     448:	123f5000 	eorsne	r5, pc, #0
     44c:	12740800 	rsbsne	r0, r4, #0, 16
     450:	00010800 	andeq	r0, r1, r0, lsl #16
     454:	00000058 	andeq	r0, r0, r8, asr r0
     458:	00000000 	andeq	r0, r0, r0
     45c:	00122400 	andseq	r2, r2, r0, lsl #8
     460:	00123f08 	andseq	r3, r2, r8, lsl #30
     464:	51000108 	tstpl	r0, r8, lsl #2
     468:	0800123f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r9, ip}
     46c:	08001274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip}
     470:	01f30004 	mvnseq	r0, r4
     474:	00009f51 	andeq	r9, r0, r1, asr pc
     478:	00000000 	andeq	r0, r0, r0
     47c:	12240000 	eorne	r0, r4, #0
     480:	12360800 	eorsne	r0, r6, #0, 16
     484:	00010800 	andeq	r0, r1, r0, lsl #16
     488:	00123652 	andseq	r3, r2, r2, asr r6
     48c:	00124008 	andseq	r4, r2, r8
     490:	f3000408 	vshl.u8	d0, d8, d0
     494:	409f5201 	addsmi	r5, pc, r1, lsl #4
     498:	68080012 	stmdavs	r8, {r1, r4}
     49c:	03080012 	movweq	r0, #32786	; 0x8012
     4a0:	9f7f7400 	svcls	0x007f7400
     4a4:	08001268 	stmdaeq	r0, {r3, r5, r6, r9, ip}
     4a8:	0800126e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, ip}
     4ac:	00740003 	rsbseq	r0, r4, r3
     4b0:	0012709f 	mulseq	r2, pc, r0	; <UNPREDICTABLE>
     4b4:	00127408 	andseq	r7, r2, r8, lsl #8
     4b8:	74000308 	strvc	r0, [r0], #-776	; 0x308
     4bc:	00009f7f 	andeq	r9, r0, pc, ror pc
     4c0:	00000000 	andeq	r0, r0, r0
     4c4:	12240000 	eorne	r0, r4, #0
     4c8:	123f0800 	eorsne	r0, pc, #0, 16
     4cc:	00010800 	andeq	r0, r1, r0, lsl #16
     4d0:	00123f53 	andseq	r3, r2, r3, asr pc
     4d4:	00127408 	andseq	r7, r2, r8, lsl #8
     4d8:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
     4e4:	08001244 	stmdaeq	r0, {r2, r6, r9, ip}
     4e8:	08001256 	stmdaeq	r0, {r1, r2, r4, r6, r9, ip}
     4ec:	56550001 	ldrbpl	r0, [r5], -r1
     4f0:	58080012 	stmdapl	r8, {r1, r4}
     4f4:	01080012 	tsteq	r8, r2, lsl r0
     4f8:	12585600 	subsne	r5, r8, #0, 12
     4fc:	12700800 	rsbsne	r0, r0, #0, 16
     500:	00010800 	andeq	r0, r1, r0, lsl #16
     504:	00000055 	andeq	r0, r0, r5, asr r0
     508:	00000000 	andeq	r0, r0, r0
     50c:	00127e00 	andseq	r7, r2, r0, lsl #28
     510:	00128408 	andseq	r8, r2, r8, lsl #8
     514:	50000108 	andpl	r0, r0, r8, lsl #2
     518:	08001284 	stmdaeq	r0, {r2, r7, r9, ip}
     51c:	08001294 	stmdaeq	r0, {r2, r4, r7, r9, ip}
     520:	00550001 	subseq	r0, r5, r1
     524:	00000000 	andeq	r0, r0, r0
     528:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
     52c:	84080012 	strhi	r0, [r8], #-18
     530:	01080012 	tsteq	r8, r2, lsl r0
     534:	12845100 	addne	r5, r4, #0, 2
     538:	12880800 	addne	r0, r8, #0, 16
     53c:	00030800 	andeq	r0, r3, r0, lsl #16
     540:	889f0174 	ldmhi	pc, {r2, r4, r5, r6, r8}	; <UNPREDICTABLE>
     544:	90080012 	andls	r0, r8, r2, lsl r0
     548:	01080012 	tsteq	r8, r2, lsl r0
     54c:	12905400 	addsne	r5, r0, #0, 8
     550:	12920800 	addsne	r0, r2, #0, 16
     554:	00030800 	andeq	r0, r3, r0, lsl #16
     558:	929f0174 	addsls	r0, pc, #116, 2
     55c:	94080012 	strls	r0, [r8], #-18
     560:	01080012 	tsteq	r8, r2, lsl r0
     564:	00005400 	andeq	r5, r0, r0, lsl #8
     568:	00000000 	andeq	r0, r0, r0
     56c:	12940000 	addsne	r0, r4, #0
     570:	129e0800 	addsne	r0, lr, #0, 16
     574:	00010800 	andeq	r0, r1, r0, lsl #16
     578:	00129e50 	andseq	r9, r2, r0, asr lr
     57c:	0012a308 	andseq	sl, r2, r8, lsl #6
     580:	53000108 	movwpl	r0, #264	; 0x108
     584:	080012a3 	stmdaeq	r0, {r0, r1, r5, r7, r9, ip}
     588:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
     58c:	01f30004 	mvnseq	r0, r4
     590:	00009f50 	andeq	r9, r0, r0, asr pc
     594:	00000000 	andeq	r0, r0, r0
     598:	12940000 	addsne	r0, r4, #0
     59c:	12a00800 	adcne	r0, r0, #0, 16
     5a0:	00010800 	andeq	r0, r1, r0, lsl #16
     5a4:	00000051 	andeq	r0, r0, r1, asr r0
     5a8:	00000000 	andeq	r0, r0, r0
     5ac:	0012d800 	andseq	sp, r2, r0, lsl #16
     5b0:	0012e208 	andseq	lr, r2, r8, lsl #4
     5b4:	50000108 	andpl	r0, r0, r8, lsl #2
     5b8:	080012e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, ip}
     5bc:	08001374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip}
     5c0:	00560001 	subseq	r0, r6, r1
     5c4:	00000000 	andeq	r0, r0, r0
     5c8:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     5cc:	e4080012 	str	r0, [r8], #-18
     5d0:	01080012 	tsteq	r8, r2, lsl r0
     5d4:	12e45100 	rscne	r5, r4, #0, 2
     5d8:	13740800 	cmnne	r4, #0, 16
     5dc:	00010800 	andeq	r0, r1, r0, lsl #16
     5e0:	00000057 	andeq	r0, r0, r7, asr r0
     5e4:	00000000 	andeq	r0, r0, r0
     5e8:	0012ea00 	andseq	lr, r2, r0, lsl #20
     5ec:	0012ec08 	andseq	lr, r2, r8, lsl #24
     5f0:	30000208 	andcc	r0, r0, r8, lsl #4
     5f4:	0012ec9f 	mulseq	r2, pc, ip	; <UNPREDICTABLE>
     5f8:	00133808 	andseq	r3, r3, r8, lsl #16
     5fc:	54000108 	strpl	r0, [r0], #-264	; 0x108
     600:	08001338 	stmdaeq	r0, {r3, r4, r5, r8, r9, ip}
     604:	0800133a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, ip}
     608:	46550001 	ldrbmi	r0, [r5], -r1
     60c:	52080013 	andpl	r0, r8, #19
     610:	01080013 	tsteq	r8, r3, lsl r0
     614:	13525500 	cmpne	r2, #0, 10
     618:	13600800 	cmnne	r0, #0, 16
     61c:	00030800 	andeq	r0, r3, r0, lsl #16
     620:	609f0175 	addsvs	r0, pc, r5, ror r1	; <UNPREDICTABLE>
     624:	74080013 	strvc	r0, [r8], #-19
     628:	01080013 	tsteq	r8, r3, lsl r0
     62c:	00005500 	andeq	r5, r0, r0, lsl #10
     630:	00000000 	andeq	r0, r0, r0
     634:	13740000 	cmnne	r4, #0
     638:	137a0800 	cmnne	sl, #0, 16
     63c:	00010800 	andeq	r0, r1, r0, lsl #16
     640:	00137a50 	andseq	r7, r3, r0, asr sl
     644:	00139008 	andseq	r9, r3, r8
     648:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     64c:	08001390 	stmdaeq	r0, {r4, r7, r8, r9, ip}
     650:	0800139c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, ip}
     654:	01f30004 	mvnseq	r0, r4
     658:	00009f50 	andeq	r9, r0, r0, asr pc
     65c:	00000000 	andeq	r0, r0, r0
     660:	13740000 	cmnne	r4, #0
     664:	137a0800 	cmnne	sl, #0, 16
     668:	00020800 	andeq	r0, r2, r0, lsl #16
     66c:	137a9f30 	cmnne	sl, #48, 30	; 0xc0
     670:	13800800 	orrne	r0, r0, #0, 16
     674:	00010800 	andeq	r0, r1, r0, lsl #16
     678:	00138054 	andseq	r8, r3, r4, asr r0
     67c:	00138408 	andseq	r8, r3, r8, lsl #8
     680:	74000308 	strvc	r0, [r0], #-776	; 0x308
     684:	13849f7f 	orrne	r9, r4, #508	; 0x1fc
     688:	13900800 	orrsne	r0, r0, #0, 16
     68c:	00010800 	andeq	r0, r1, r0, lsl #16
     690:	00000054 	andeq	r0, r0, r4, asr r0
     694:	00000000 	andeq	r0, r0, r0
     698:	0014ea00 	andseq	lr, r4, r0, lsl #20
     69c:	0014f008 	andseq	pc, r4, r8
     6a0:	52000108 	andpl	r0, r0, #8, 2
	...
     6ac:	08001528 	stmdaeq	r0, {r3, r5, r8, sl, ip}
     6b0:	08001537 	stmdaeq	r0, {r0, r1, r2, r4, r5, r8, sl, ip}
     6b4:	37500001 	ldrbcc	r0, [r0, -r1]
     6b8:	40080015 	andmi	r0, r8, r5, lsl r0
     6bc:	04080015 	streq	r0, [r8], #-21
     6c0:	5001f300 	andpl	pc, r1, r0, lsl #6
     6c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     6c8:	00000000 	andeq	r0, r0, r0
     6cc:	00152e00 	andseq	r2, r5, r0, lsl #28
     6d0:	00153708 	andseq	r3, r5, r8, lsl #14
     6d4:	53000108 	movwpl	r0, #264	; 0x108
	...
     6e8:	9f300002 	svcls	0x00300002
	...
     6f4:	00540001 	subseq	r0, r4, r1
     6f8:	00000000 	andeq	r0, r0, r0
     6fc:	40000000 	andmi	r0, r0, r0
     700:	4e080015 	mcrmi	0, 0, r0, cr8, cr5, {0}
     704:	02080015 	andeq	r0, r8, #21
     708:	4e9f3000 	cdpmi	0, 9, cr3, cr15, cr0, {0}
     70c:	56080015 			; <UNDEFINED> instruction: 0x56080015
     710:	01080015 	tsteq	r8, r5, lsl r0
     714:	15565300 	ldrbne	r5, [r6, #-768]	; 0x300
     718:	15620800 	strbne	r0, [r2, #-2048]!	; 0x800
     71c:	00010800 	andeq	r0, r1, r0, lsl #16
     720:	00156252 	andseq	r6, r5, r2, asr r2
     724:	00158408 	andseq	r8, r5, r8, lsl #8
     728:	54000108 	strpl	r0, [r0], #-264	; 0x108
     72c:	08001584 	stmdaeq	r0, {r2, r7, r8, sl, ip}
     730:	08001586 	stmdaeq	r0, {r1, r2, r7, r8, sl, ip}
     734:	00740006 	rsbseq	r0, r4, r6
     738:	9f1a0072 	svcls	0x001a0072
     73c:	08001586 	stmdaeq	r0, {r1, r2, r7, r8, sl, ip}
     740:	08001588 	stmdaeq	r0, {r3, r7, r8, sl, ip}
     744:	88520001 	ldmdahi	r2, {r0}^
     748:	8c080015 	stchi	0, cr0, [r8], {21}
     74c:	12080015 	andne	r0, r8, #21
     750:	70ff0800 	rscsvc	r0, pc, r0, lsl #16
     754:	33019400 	movwcc	r9, #5120	; 0x1400
     758:	1aff081a 	bne	fffc27c8 <BootRAM+0xef32f69>
     75c:	74242433 	strtvc	r2, [r4], #-1075	; 0x433
     760:	009f1a00 	addseq	r1, pc, r0, lsl #20
     764:	00000000 	andeq	r0, r0, r0
     768:	40000000 	andmi	r0, r0, r0
     76c:	80080015 	andhi	r0, r8, r5, lsl r0
     770:	02080015 	andeq	r0, r8, #21
     774:	809f3000 	addshi	r3, pc, r0
     778:	84080015 	strhi	r0, [r8], #-21
     77c:	01080015 	tsteq	r8, r5, lsl r0
     780:	15845500 	strne	r5, [r4, #1280]	; 0x500
     784:	15880800 	strne	r0, [r8, #2048]	; 0x800
     788:	00010800 	andeq	r0, r1, r0, lsl #16
     78c:	00158851 	andseq	r8, r5, r1, asr r8
     790:	00159008 	andseq	r9, r5, r8
     794:	52000108 	andpl	r0, r0, #8, 2
	...
     7a0:	08001540 	stmdaeq	r0, {r6, r8, sl, ip}
     7a4:	08001580 	stmdaeq	r0, {r7, r8, sl, ip}
     7a8:	9f300002 	svcls	0x00300002
     7ac:	08001580 	stmdaeq	r0, {r7, r8, sl, ip}
     7b0:	08001586 	stmdaeq	r0, {r1, r2, r7, r8, sl, ip}
     7b4:	86520001 	ldrbhi	r0, [r2], -r1
     7b8:	8c080015 	stchi	0, cr0, [r8], {21}
     7bc:	0f080015 	svceq	0x00080015
     7c0:	70ff0800 	rscsvc	r0, pc, r0, lsl #16
     7c4:	33019400 	movwcc	r9, #5120	; 0x1400
     7c8:	1aff081a 	bne	fffc2838 <BootRAM+0xef32fd9>
     7cc:	9f242433 	svcls	0x00242433
	...
     7d8:	08001540 	stmdaeq	r0, {r6, r8, sl, ip}
     7dc:	0800154e 	stmdaeq	r0, {r1, r2, r3, r6, r8, sl, ip}
     7e0:	9f300002 	svcls	0x00300002
     7e4:	0800154e 	stmdaeq	r0, {r1, r2, r3, r6, r8, sl, ip}
     7e8:	08001552 	stmdaeq	r0, {r1, r4, r6, r8, sl, ip}
     7ec:	73340005 	teqvc	r4, #5
     7f0:	529f1c00 	addspl	r1, pc, #0, 24
     7f4:	56080015 			; <UNDEFINED> instruction: 0x56080015
     7f8:	01080015 	tsteq	r8, r5, lsl r0
     7fc:	15565200 	ldrbne	r5, [r6, #-512]	; 0x200
     800:	155e0800 	ldrbne	r0, [lr, #-2048]	; 0x800
     804:	00050800 	andeq	r0, r5, r0, lsl #16
     808:	1c007334 	stcne	3, cr7, [r0], {52}	; 0x34
     80c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     810:	00000000 	andeq	r0, r0, r0
     814:	00154000 	andseq	r4, r5, r0
     818:	00154e08 	andseq	r4, r5, r8, lsl #28
     81c:	3f000208 	svccc	0x00000208
     820:	00154e9f 	mulseq	r5, pc, lr	; <UNPREDICTABLE>
     824:	00155a08 	andseq	r5, r5, r8, lsl #20
     828:	3f000508 	svccc	0x00000508
     82c:	9f250073 	svcls	0x00250073
     830:	0800155a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, ip}
     834:	08001560 	stmdaeq	r0, {r5, r6, r8, sl, ip}
     838:	00540001 	subseq	r0, r4, r1
     83c:	00000000 	andeq	r0, r0, r0
     840:	d0000000 	andle	r0, r0, r0
     844:	d7080015 	smladle	r8, r5, r0, r0
     848:	01080015 	tsteq	r8, r5, lsl r0
     84c:	15d75000 	ldrbne	r5, [r7]
     850:	15ea0800 	strbne	r0, [sl, #2048]!	; 0x800
     854:	00010800 	andeq	r0, r1, r0, lsl #16
     858:	0015ea54 	andseq	lr, r5, r4, asr sl
     85c:	0015ed08 	andseq	lr, r5, r8, lsl #26
     860:	50000108 	andpl	r0, r0, r8, lsl #2
     864:	080015ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, sl, ip}
     868:	080015ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl, ip}
     86c:	01f30004 	mvnseq	r0, r4
     870:	00009f50 	andeq	r9, r0, r0, asr pc
     874:	00000000 	andeq	r0, r0, r0
     878:	16040000 	strne	r0, [r4], -r0
     87c:	162c0800 	strtne	r0, [ip], -r0, lsl #16
     880:	00010800 	andeq	r0, r1, r0, lsl #16
     884:	00162c50 	andseq	r2, r6, r0, asr ip
     888:	00163808 	andseq	r3, r6, r8, lsl #16
     88c:	f3000408 	vshl.u8	d0, d8, d0
     890:	009f5001 	addseq	r5, pc, r1
     894:	00000000 	andeq	r0, r0, r0
     898:	0a000000 	beq	8a0 <__Stack_Size+0xa0>
     89c:	28080016 	stmdacs	r8, {r1, r2, r4}
     8a0:	02080016 	andeq	r0, r8, #22
     8a4:	289f3200 	ldmcs	pc, {r9, ip, sp}	; <UNPREDICTABLE>
     8a8:	38080016 	stmdacc	r8, {r1, r2, r4}
     8ac:	02080016 	andeq	r0, r8, #22
     8b0:	009f3000 	addseq	r3, pc, r0
	...
     8c0:	01000000 	mrseq	r0, (UNDEF: 0)
     8c4:	00005000 	andeq	r5, r0, r0
     8c8:	00000000 	andeq	r0, r0, r0
     8cc:	00010000 	andeq	r0, r1, r0
     8d0:	00000055 	andeq	r0, r0, r5, asr r0
     8d4:	00000000 	andeq	r0, r0, r0
     8d8:	f3000400 	vshl.u8	d0, d0, d0
     8dc:	009f5001 	addseq	r5, pc, r1
	...
     8ec:	01000000 	mrseq	r0, (UNDEF: 0)
     8f0:	00005100 	andeq	r5, r0, r0, lsl #2
     8f4:	00000000 	andeq	r0, r0, r0
     8f8:	00040000 	andeq	r0, r4, r0
     8fc:	9f5101f3 	svcls	0x005101f3
	...
     908:	00540001 	subseq	r0, r4, r1
     90c:	00000000 	andeq	r0, r0, r0
     910:	03000000 	movweq	r0, #0
     914:	9f017400 	svcls	0x00017400
	...
     920:	00540001 	subseq	r0, r4, r1
     924:	00000000 	andeq	r0, r0, r0
     928:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     92c:	72080016 	andvc	r0, r8, #22
     930:	01080016 	tsteq	r8, r6, lsl r0
     934:	16725000 	ldrbtne	r5, [r2], -r0
     938:	16840800 	strne	r0, [r4], r0, lsl #16
     93c:	00040800 	andeq	r0, r4, r0, lsl #16
     940:	9f5001f3 	svcls	0x005001f3
	...
     94c:	08001648 	stmdaeq	r0, {r3, r6, r9, sl, ip}
     950:	0800166e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl, ip}
     954:	6e540001 	cdpvs	0, 5, cr0, cr4, cr1, {0}
     958:	84080016 	strhi	r0, [r8], #-22
     95c:	01080016 	tsteq	r8, r6, lsl r0
     960:	00005200 	andeq	r5, r0, r0, lsl #4
     964:	00000000 	andeq	r0, r0, r0
     968:	16a80000 	strtne	r0, [r8], r0
     96c:	16ae0800 	strtne	r0, [lr], r0, lsl #16
     970:	00010800 	andeq	r0, r1, r0, lsl #16
     974:	0016ae50 	andseq	sl, r6, r0, asr lr
     978:	0016b208 	andseq	fp, r6, r8, lsl #4
     97c:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     988:	080016ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, ip}
     98c:	080016b2 	stmdaeq	r0, {r1, r4, r5, r7, r9, sl, ip}
     990:	703f0007 	eorsvc	r0, pc, r7
     994:	24243200 	strtcs	r3, [r4], #-512	; 0x200
     998:	0016b69f 	mulseq	r6, pc, r6	; <UNPREDICTABLE>
     99c:	0016b808 	andseq	fp, r6, r8, lsl #16
     9a0:	50000108 	andpl	r0, r0, r8, lsl #2
     9a4:	080016b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, ip}
     9a8:	080016ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, ip}
     9ac:	00700004 	rsbseq	r0, r0, r4
     9b0:	00009f20 	andeq	r9, r0, r0, lsr #30
     9b4:	00000000 	andeq	r0, r0, r0
     9b8:	17780000 	ldrbne	r0, [r8, -r0]!
     9bc:	17800800 	strne	r0, [r0, r0, lsl #16]
     9c0:	00010800 	andeq	r0, r1, r0, lsl #16
     9c4:	00179051 	andseq	r9, r7, r1, asr r0
     9c8:	00179808 	andseq	r9, r7, r8, lsl #16
     9cc:	51000108 	tstpl	r0, r8, lsl #2
     9d0:	080017a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, ip}
     9d4:	080017b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, ip}
     9d8:	00510001 	subseq	r0, r1, r1
     9dc:	00000000 	andeq	r0, r0, r0
     9e0:	b0000000 	andlt	r0, r0, r0
     9e4:	be080017 	mcrlt	0, 0, r0, cr8, cr7, {0}
     9e8:	01080017 	tsteq	r8, r7, lsl r0
     9ec:	17be5000 	ldrne	r5, [lr, r0]!
     9f0:	17c80800 	strbne	r0, [r8, r0, lsl #16]
     9f4:	00040800 	andeq	r0, r4, r0, lsl #16
     9f8:	9f5001f3 	svcls	0x005001f3
	...
     a04:	080017c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip}
     a08:	080017d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, sl, ip}
     a0c:	d6500001 	ldrble	r0, [r0], -r1
     a10:	e0080017 	and	r0, r8, r7, lsl r0
     a14:	04080017 	streq	r0, [r8], #-23
     a18:	5001f300 	andpl	pc, r1, r0, lsl #6
     a1c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a20:	00000000 	andeq	r0, r0, r0
     a24:	0017e000 	andseq	lr, r7, r0
     a28:	0017f808 	andseq	pc, r7, r8, lsl #16
     a2c:	50000108 	andpl	r0, r0, r8, lsl #2
     a30:	080017f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, ip}
     a34:	08001808 	stmdaeq	r0, {r3, fp, ip}
     a38:	01f30004 	mvnseq	r0, r4
     a3c:	00009f50 	andeq	r9, r0, r0, asr pc
     a40:	00000000 	andeq	r0, r0, r0
     a44:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
     a48:	18240800 	stmdane	r4!, {fp}
     a4c:	00010800 	andeq	r0, r1, r0, lsl #16
     a50:	00182450 	andseq	r2, r8, r0, asr r4
     a54:	00183c08 	andseq	r3, r8, r8, lsl #24
     a58:	f3000408 	vshl.u8	d0, d8, d0
     a5c:	009f5001 	addseq	r5, pc, r1
     a60:	00000000 	andeq	r0, r0, r0
     a64:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     a68:	5a080018 	bpl	200ad0 <__Stack_Size+0x2002d0>
     a6c:	02080018 	andeq	r0, r8, #24
     a70:	5a9f3000 	bpl	fe7cca78 <BootRAM+0xd73d219>
     a74:	84080018 	strhi	r0, [r8], #-24
     a78:	01080018 	tsteq	r8, r8, lsl r0
     a7c:	00005400 	andeq	r5, r0, r0, lsl #8
     a80:	00000000 	andeq	r0, r0, r0
     a84:	18a60000 	stmiane	r6!, {}	; <UNPREDICTABLE>
     a88:	18ba0800 	ldmne	sl!, {fp}
     a8c:	00010800 	andeq	r0, r1, r0, lsl #16
     a90:	0018fc53 	andseq	pc, r8, r3, asr ip	; <UNPREDICTABLE>
     a94:	00190208 	andseq	r0, r9, r8, lsl #4
     a98:	53000108 	movwpl	r0, #264	; 0x108
     a9c:	08001944 	stmdaeq	r0, {r2, r6, r8, fp, ip}
     aa0:	08001960 	stmdaeq	r0, {r5, r6, r8, fp, ip}
     aa4:	68530001 	ldmdavs	r3, {r0}^
     aa8:	7a080019 	bvc	200b14 <__Stack_Size+0x200314>
     aac:	01080019 	tsteq	r8, r9, lsl r0
     ab0:	19845300 	stmibne	r4, {r8, r9, ip, lr}
     ab4:	198a0800 	stmibne	sl, {fp}
     ab8:	00010800 	andeq	r0, r1, r0, lsl #16
     abc:	0019dc53 	andseq	sp, r9, r3, asr ip
     ac0:	0019ec08 	andseq	lr, r9, r8, lsl #24
     ac4:	53000108 	movwpl	r0, #264	; 0x108
     ac8:	080019f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, fp, ip}
     acc:	08001a06 	stmdaeq	r0, {r1, r2, r9, fp, ip}
     ad0:	7e530001 	cdpvc	0, 5, cr0, cr3, cr1, {0}
     ad4:	8408001a 	strhi	r0, [r8], #-26
     ad8:	0108001a 	tsteq	r8, sl, lsl r0
     adc:	00005300 	andeq	r5, r0, r0, lsl #6
     ae0:	00000000 	andeq	r0, r0, r0
     ae4:	19a80000 	stmibne	r8!, {}	; <UNPREDICTABLE>
     ae8:	19ac0800 	stmibne	ip!, {fp}
     aec:	00010800 	andeq	r0, r1, r0, lsl #16
     af0:	0019ac50 	andseq	sl, r9, r0, asr ip
     af4:	0019b108 	andseq	fp, r9, r8, lsl #2
     af8:	51000108 	tstpl	r0, r8, lsl #2
     afc:	080019b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, fp, ip}
     b00:	080019ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, fp, ip}
     b04:	02750003 	rsbseq	r0, r5, #3
     b08:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     b18:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     b24:	00580001 	subseq	r0, r8, r1
     b28:	00000000 	andeq	r0, r0, r0
     b2c:	04000000 	streq	r0, [r0], #-0
     b30:	5001f300 	andpl	pc, r1, r0, lsl #6
     b34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     b44:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     b50:	00560001 	subseq	r0, r6, r1
     b54:	00000000 	andeq	r0, r0, r0
     b58:	04000000 	streq	r0, [r0], #-0
     b5c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     b60:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     b70:	52000100 	andpl	r0, r0, #0, 2
	...
     b7c:	00570001 	subseq	r0, r7, r1
     b80:	00000000 	andeq	r0, r0, r0
     b84:	04000000 	streq	r0, [r0], #-0
     b88:	5201f300 	andpl	pc, r1, #0, 6
     b8c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     b9c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     ba8:	01740003 	cmneq	r4, r3
     bac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     bb0:	00000000 	andeq	r0, r0, r0
     bb4:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     bc8:	00560001 	subseq	r0, r6, r1
     bcc:	00000000 	andeq	r0, r0, r0
     bd0:	04000000 	streq	r0, [r0], #-0
     bd4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     bd8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     be8:	5d000100 	stfpls	f0, [r0, #-0]
	...
     bf4:	a8910004 	ldmge	r1, {r2}
     bf8:	00009f7d 	andeq	r9, r0, sp, ror pc
     bfc:	00000000 	andeq	r0, r0, r0
     c00:	00040000 	andeq	r0, r4, r0
     c04:	9f7da87d 	svcls	0x007da87d
	...
     c18:	00550001 	subseq	r0, r5, r1
	...
     c28:	04000000 	streq	r0, [r0], #-0
     c2c:	7e889100 	sinvce	f1, f0
     c30:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c34:	00000000 	andeq	r0, r0, r0
     c38:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     c44:	88910004 	ldmhi	r1, {r2}
     c48:	00009f7e 	andeq	r9, r0, lr, ror pc
     c4c:	00000000 	andeq	r0, r0, r0
     c50:	00010000 	andeq	r0, r1, r0
     c54:	00000050 	andeq	r0, r0, r0, asr r0
     c58:	00000000 	andeq	r0, r0, r0
     c5c:	91000400 	tstls	r0, r0, lsl #8
     c60:	009f7e88 	addseq	r7, pc, r8, lsl #29
     c64:	00000000 	andeq	r0, r0, r0
     c68:	01000000 	mrseq	r0, (UNDEF: 0)
     c6c:	00005100 	andeq	r5, r0, r0, lsl #2
     c70:	00000000 	andeq	r0, r0, r0
     c74:	00040000 	andeq	r0, r4, r0
     c78:	9f7e8891 	svcls	0x007e8891
	...
     c84:	887d0004 	ldmdahi	sp!, {r2}^
     c88:	00009f7e 	andeq	r9, r0, lr, ror pc
	...
     c98:	00040000 	andeq	r0, r4, r0
     c9c:	9f7de891 	svcls	0x007de891
	...
     ca8:	00510001 	subseq	r0, r1, r1
     cac:	00000000 	andeq	r0, r0, r0
     cb0:	04000000 	streq	r0, [r0], #-0
     cb4:	7de89100 	stfvcp	f1, [r8]
     cb8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     cbc:	00000000 	andeq	r0, r0, r0
     cc0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     ccc:	e8910004 	ldm	r1, {r2}
     cd0:	00009f7d 	andeq	r9, r0, sp, ror pc
     cd4:	00000000 	andeq	r0, r0, r0
     cd8:	00040000 	andeq	r0, r4, r0
     cdc:	9f7de87d 	svcls	0x007de87d
	...
     cf0:	c8910004 	ldmgt	r1, {r2}
     cf4:	00009f7d 	andeq	r9, r0, sp, ror pc
     cf8:	00000000 	andeq	r0, r0, r0
     cfc:	00010000 	andeq	r0, r1, r0
     d00:	00000052 	andeq	r0, r0, r2, asr r0
     d04:	00000000 	andeq	r0, r0, r0
     d08:	91000400 	tstls	r0, r0, lsl #8
     d0c:	009f7dc8 	addseq	r7, pc, r8, asr #27
     d10:	00000000 	andeq	r0, r0, r0
     d14:	01000000 	mrseq	r0, (UNDEF: 0)
     d18:	00005000 	andeq	r5, r0, r0
     d1c:	00000000 	andeq	r0, r0, r0
     d20:	00040000 	andeq	r0, r4, r0
     d24:	9f7dc891 	svcls	0x007dc891
	...
     d30:	00510001 	subseq	r0, r1, r1
     d34:	00000000 	andeq	r0, r0, r0
     d38:	04000000 	streq	r0, [r0], #-0
     d3c:	7dc89100 	stfvcp	f1, [r8]
     d40:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     d44:	00000000 	andeq	r0, r0, r0
     d48:	7d000400 	cfstrsvc	mvf0, [r0, #-0]
     d4c:	009f7dc8 	addseq	r7, pc, r8, asr #27
	...
     d5c:	01000000 	mrseq	r0, (UNDEF: 0)
     d60:	00005d00 	andeq	r5, r0, r0, lsl #26
     d64:	00000000 	andeq	r0, r0, r0
     d68:	00040000 	andeq	r0, r4, r0
     d6c:	9f7da891 	svcls	0x007da891
	...
     d78:	a87d0004 	ldmdage	sp!, {r2}^
     d7c:	00009f7d 	andeq	r9, r0, sp, ror pc
	...
     d8c:	00010000 	andeq	r0, r1, r0
     d90:	00000056 	andeq	r0, r0, r6, asr r0
     d94:	00000000 	andeq	r0, r0, r0
     d98:	f3000400 	vshl.u8	d0, d0, d0
     d9c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     dac:	04000000 	streq	r0, [r0], #-0
     db0:	7ec89100 	acsvce	f1, f0
     db4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     db8:	00000000 	andeq	r0, r0, r0
     dbc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     dc8:	c8910004 	ldmgt	r1, {r2}
     dcc:	00009f7e 	andeq	r9, r0, lr, ror pc
     dd0:	00000000 	andeq	r0, r0, r0
     dd4:	00010000 	andeq	r0, r1, r0
     dd8:	00000052 	andeq	r0, r0, r2, asr r0
     ddc:	00000000 	andeq	r0, r0, r0
     de0:	91000400 	tstls	r0, r0, lsl #8
     de4:	009f7ec8 	addseq	r7, pc, r8, asr #29
     de8:	00000000 	andeq	r0, r0, r0
     dec:	04000000 	streq	r0, [r0], #-0
     df0:	7ec87d00 	cdpvc	13, 12, cr7, cr8, cr0, {0}
     df4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     e04:	91000400 	tstls	r0, r0, lsl #8
     e08:	009f7ea8 	addseq	r7, pc, r8, lsr #29
     e0c:	00000000 	andeq	r0, r0, r0
     e10:	01000000 	mrseq	r0, (UNDEF: 0)
     e14:	00005200 	andeq	r5, r0, r0, lsl #4
     e18:	00000000 	andeq	r0, r0, r0
     e1c:	00040000 	andeq	r0, r4, r0
     e20:	9f7ea891 	svcls	0x007ea891
	...
     e2c:	a87d0004 	ldmdage	sp!, {r2}^
     e30:	00009f7e 	andeq	r9, r0, lr, ror pc
     e34:	00000000 	andeq	r0, r0, r0
     e38:	1b040000 	blne	100e40 <__Stack_Size+0x100640>
     e3c:	1b580800 	blne	1602e44 <__Stack_Size+0x1602644>
     e40:	00010800 	andeq	r0, r1, r0, lsl #16
     e44:	001b5850 	andseq	r5, fp, r0, asr r8
     e48:	001b7008 	andseq	r7, fp, r8
     e4c:	54000108 	strpl	r0, [r0], #-264	; 0x108
     e50:	08001b70 	stmdaeq	r0, {r4, r5, r6, r8, r9, fp, ip}
     e54:	08001b73 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, r9, fp, ip}
     e58:	40700003 	rsbsmi	r0, r0, r3
     e5c:	001b739f 	mulseq	fp, pc, r3	; <UNPREDICTABLE>
     e60:	001b7408 	andseq	r7, fp, r8, lsl #8
     e64:	f3000408 	vshl.u8	d0, d8, d0
     e68:	009f5001 	addseq	r5, pc, r1
     e6c:	00000000 	andeq	r0, r0, r0
     e70:	04000000 	streq	r0, [r0], #-0
     e74:	1208001b 	andne	r0, r8, #27
     e78:	0108001b 	tsteq	r8, fp, lsl r0
     e7c:	1b125100 	blne	495284 <__Stack_Size+0x494a84>
     e80:	1b700800 	blne	1c02e88 <__Stack_Size+0x1c02688>
     e84:	00010800 	andeq	r0, r1, r0, lsl #16
     e88:	001b7055 	andseq	r7, fp, r5, asr r0
     e8c:	001b7308 	andseq	r7, fp, r8, lsl #6
     e90:	51000108 	tstpl	r0, r8, lsl #2
     e94:	08001b73 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, r9, fp, ip}
     e98:	08001b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, ip}
     e9c:	01f30004 	mvnseq	r0, r4
     ea0:	00009f51 	andeq	r9, r0, r1, asr pc
     ea4:	00000000 	andeq	r0, r0, r0
     ea8:	1b040000 	blne	100eb0 <__Stack_Size+0x1006b0>
     eac:	1b3c0800 	blne	f02eb4 <__Stack_Size+0xf026b4>
     eb0:	00010800 	andeq	r0, r1, r0, lsl #16
     eb4:	001b3c52 	andseq	r3, fp, r2, asr ip
     eb8:	001b7008 	andseq	r7, fp, r8
     ebc:	56000108 	strpl	r0, [r0], -r8, lsl #2
     ec0:	08001b70 	stmdaeq	r0, {r4, r5, r6, r8, r9, fp, ip}
     ec4:	08001b73 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, r9, fp, ip}
     ec8:	73520001 	cmpvc	r2, #1
     ecc:	7408001b 	strvc	r0, [r8], #-27
     ed0:	0408001b 	streq	r0, [r8], #-27
     ed4:	5201f300 	andpl	pc, r1, #0, 6
     ed8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     edc:	00000000 	andeq	r0, r0, r0
     ee0:	001b5200 	andseq	r5, fp, r0, lsl #4
     ee4:	001b7008 	andseq	r7, fp, r8
     ee8:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     eec:	08001b70 	stmdaeq	r0, {r4, r5, r6, r8, r9, fp, ip}
     ef0:	08001b73 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, r9, fp, ip}
     ef4:	73510001 	cmpvc	r1, #1
     ef8:	7408001b 	strvc	r0, [r8], #-27
     efc:	0408001b 	streq	r0, [r8], #-27
     f00:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     f04:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     f08:	00000000 	andeq	r0, r0, r0
     f0c:	001b5200 	andseq	r5, fp, r0, lsl #4
     f10:	001b5808 	andseq	r5, fp, r8, lsl #16
     f14:	50000108 	andpl	r0, r0, r8, lsl #2
     f18:	08001b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip}
     f1c:	08001b70 	stmdaeq	r0, {r4, r5, r6, r8, r9, fp, ip}
     f20:	70540001 	subsvc	r0, r4, r1
     f24:	7308001b 	movwvc	r0, #32795	; 0x801b
     f28:	0308001b 	movweq	r0, #32795	; 0x801b
     f2c:	9f407000 	svcls	0x00407000
     f30:	08001b73 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, r9, fp, ip}
     f34:	08001b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, ip}
     f38:	01f30004 	mvnseq	r0, r4
     f3c:	00009f50 	andeq	r9, r0, r0, asr pc
     f40:	00000000 	andeq	r0, r0, r0
     f44:	1b520000 	blne	1480f4c <__Stack_Size+0x148074c>
     f48:	1b580800 	blne	1602f50 <__Stack_Size+0x1602750>
     f4c:	00030800 	andeq	r0, r3, r0, lsl #16
     f50:	589f2070 	ldmpl	pc, {r4, r5, r6, sp}	; <UNPREDICTABLE>
     f54:	7008001b 	andvc	r0, r8, fp, lsl r0
     f58:	0308001b 	movweq	r0, #32795	; 0x801b
     f5c:	9f207400 	svcls	0x00207400
     f60:	08001b70 	stmdaeq	r0, {r4, r5, r6, r8, r9, fp, ip}
     f64:	08001b73 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, r9, fp, ip}
     f68:	60700003 	rsbsvs	r0, r0, r3
     f6c:	001b739f 	mulseq	fp, pc, r3	; <UNPREDICTABLE>
     f70:	001b7408 	andseq	r7, fp, r8, lsl #8
     f74:	f3000608 	vmax.u8	d0, d0, d8
     f78:	20235001 	eorcs	r5, r3, r1
     f7c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     f80:	00000000 	andeq	r0, r0, r0
     f84:	001b7400 	andseq	r7, fp, r0, lsl #8
     f88:	001b8008 	andseq	r8, fp, r8
     f8c:	50000108 	andpl	r0, r0, r8, lsl #2
     f90:	08001b80 	stmdaeq	r0, {r7, r8, r9, fp, ip}
     f94:	08001bae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, fp, ip}
     f98:	00560001 	subseq	r0, r6, r1
     f9c:	00000000 	andeq	r0, r0, r0
     fa0:	74000000 	strvc	r0, [r0], #-0
     fa4:	8408001b 	strhi	r0, [r8], #-27
     fa8:	0108001b 	tsteq	r8, fp, lsl r0
     fac:	1b845100 	blne	fe1153b4 <BootRAM+0xd085b55>
     fb0:	1bae0800 	blne	feb82fb8 <BootRAM+0xdaf3759>
     fb4:	00010800 	andeq	r0, r1, r0, lsl #16
     fb8:	00000055 	andeq	r0, r0, r5, asr r0
     fbc:	00000000 	andeq	r0, r0, r0
     fc0:	001b7400 	andseq	r7, fp, r0, lsl #8
     fc4:	001b8708 	andseq	r8, fp, r8, lsl #14
     fc8:	52000108 	andpl	r0, r0, #8, 2
     fcc:	08001b87 	stmdaeq	r0, {r0, r1, r2, r7, r8, r9, fp, ip}
     fd0:	08001bae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, fp, ip}
     fd4:	00540001 	subseq	r0, r4, r1
     fd8:	00000000 	andeq	r0, r0, r0
     fdc:	b0000000 	andlt	r0, r0, r0
     fe0:	bc08001b 	stclt	0, cr0, [r8], {27}
     fe4:	0108001b 	tsteq	r8, fp, lsl r0
     fe8:	1bbc5000 	blne	fef14ff0 <BootRAM+0xde85791>
     fec:	1c0e0800 	stcne	8, cr0, [lr], {-0}
     ff0:	00010800 	andeq	r0, r1, r0, lsl #16
     ff4:	00000055 	andeq	r0, r0, r5, asr r0
     ff8:	00000000 	andeq	r0, r0, r0
     ffc:	001bb000 	andseq	fp, fp, r0
    1000:	001bc208 	andseq	ip, fp, r8, lsl #4
    1004:	51000108 	tstpl	r0, r8, lsl #2
    1008:	08001bc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, fp, ip}
    100c:	08001c0e 	stmdaeq	r0, {r1, r2, r3, sl, fp, ip}
    1010:	00570001 	subseq	r0, r7, r1
    1014:	00000000 	andeq	r0, r0, r0
    1018:	b0000000 	andlt	r0, r0, r0
    101c:	be08001b 	mcrlt	0, 0, r0, cr8, cr11, {0}
    1020:	0108001b 	tsteq	r8, fp, lsl r0
    1024:	1bbe5200 	blne	fef9582c <BootRAM+0xdf05fcd>
    1028:	1c0e0800 	stcne	8, cr0, [lr], {-0}
    102c:	00010800 	andeq	r0, r1, r0, lsl #16
    1030:	00000056 	andeq	r0, r0, r6, asr r0
    1034:	00000000 	andeq	r0, r0, r0
    1038:	001c0600 	andseq	r0, ip, r0, lsl #12
    103c:	001c0808 	andseq	r0, ip, r8, lsl #16
    1040:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    104c:	08001bba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, fp, ip}
    1050:	08001bc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, fp, ip}
    1054:	c2510001 	subsgt	r0, r1, #1
    1058:	0e08001b 	mcreq	0, 0, r0, cr8, cr11, {0}
    105c:	0108001c 	tsteq	r8, ip, lsl r0
    1060:	00005700 	andeq	r5, r0, r0, lsl #14
    1064:	00000000 	andeq	r0, r0, r0
    1068:	1bba0000 	blne	fee81070 <BootRAM+0xddf1811>
    106c:	1c0c0800 	stcne	8, cr0, [ip], {-0}
    1070:	00010800 	andeq	r0, r1, r0, lsl #16
    1074:	001c0c5d 	andseq	r0, ip, sp, asr ip
    1078:	001c0e08 	andseq	r0, ip, r8, lsl #28
    107c:	91000308 	tstls	r0, r8, lsl #6
    1080:	00009f48 	andeq	r9, r0, r8, asr #30
    1084:	00000000 	andeq	r0, r0, r0
    1088:	1c100000 	ldcne	0, cr0, [r0], {-0}
    108c:	1c500800 	mrrcne	8, 0, r0, r0, cr0	; <UNPREDICTABLE>
    1090:	00010800 	andeq	r0, r1, r0, lsl #16
    1094:	001c5050 	andseq	r5, ip, r0, asr r0
    1098:	001cd008 	andseq	sp, ip, r8
    109c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    10a0:	08001cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip}
    10a4:	08001cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, ip}
    10a8:	01f30004 	mvnseq	r0, r4
    10ac:	00009f50 	andeq	r9, r0, r0, asr pc
    10b0:	00000000 	andeq	r0, r0, r0
    10b4:	1c100000 	ldcne	0, cr0, [r0], {-0}
    10b8:	1c550800 	mrrcne	8, 0, r0, r5, cr0
    10bc:	00010800 	andeq	r0, r1, r0, lsl #16
    10c0:	001c5551 	andseq	r5, ip, r1, asr r5
    10c4:	001cd808 	andseq	sp, ip, r8, lsl #16
    10c8:	f3000408 	vshl.u8	d0, d8, d0
    10cc:	009f5101 	addseq	r5, pc, r1, lsl #2
    10d0:	00000000 	andeq	r0, r0, r0
    10d4:	10000000 	andne	r0, r0, r0
    10d8:	4808001c 	stmdami	r8, {r2, r3, r4}
    10dc:	0108001c 	tsteq	r8, ip, lsl r0
    10e0:	1c485200 	sfmne	f5, 2, [r8], {-0}
    10e4:	1cd80800 	ldclne	8, cr0, [r8], {0}
    10e8:	00040800 	andeq	r0, r4, r0, lsl #16
    10ec:	9f5201f3 	svcls	0x005201f3
	...
    10f8:	08001c24 	stmdaeq	r0, {r2, r5, sl, fp, ip}
    10fc:	08001cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip}
    1100:	00780008 	rsbseq	r0, r8, r8
    1104:	ff082537 			; <UNDEFINED> instruction: 0xff082537
    1108:	00009f1a 	andeq	r9, r0, sl, lsl pc
    110c:	00000000 	andeq	r0, r0, r0
    1110:	1c240000 	stcne	0, cr0, [r4], #-0
    1114:	1c480800 	mcrrne	8, 0, r0, r8, cr0
    1118:	00010800 	andeq	r0, r1, r0, lsl #16
    111c:	001c4852 	andseq	r4, ip, r2, asr r8
    1120:	001cd808 	andseq	sp, ip, r8, lsl #16
    1124:	f3000408 	vshl.u8	d0, d8, d0
    1128:	009f5201 	addseq	r5, pc, r1, lsl #4
    112c:	00000000 	andeq	r0, r0, r0
    1130:	24000000 	strcs	r0, [r0], #-0
    1134:	5508001c 	strpl	r0, [r8, #-28]
    1138:	0108001c 	tsteq	r8, ip, lsl r0
    113c:	1c555100 	ldfnee	f5, [r5], {-0}
    1140:	1cd80800 	ldclne	8, cr0, [r8], {0}
    1144:	00040800 	andeq	r0, r4, r0, lsl #16
    1148:	9f5101f3 	svcls	0x005101f3
	...
    1154:	08001cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, ip}
    1158:	08001cee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, fp, ip}
    115c:	ee500001 	cdp	0, 5, cr0, cr0, cr1, {0}
    1160:	b408001c 	strlt	r0, [r8], #-28
    1164:	0108001d 	tsteq	r8, sp, lsl r0
    1168:	1db45600 	ldcne	6, cr5, [r4]
    116c:	1db80800 	ldcne	8, cr0, [r8]
    1170:	00040800 	andeq	r0, r4, r0, lsl #16
    1174:	9f5001f3 	svcls	0x005001f3
	...
    1180:	08001cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, ip}
    1184:	08001cea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, fp, ip}
    1188:	ea510001 	b	1441194 <__Stack_Size+0x1440994>
    118c:	b408001c 	strlt	r0, [r8], #-28
    1190:	0108001d 	tsteq	r8, sp, lsl r0
    1194:	1db45500 	cfldr32ne	mvfx5, [r4]
    1198:	1db80800 	ldcne	8, cr0, [r8]
    119c:	00040800 	andeq	r0, r4, r0, lsl #16
    11a0:	9f5101f3 	svcls	0x005101f3
	...
    11ac:	08001cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, ip}
    11b0:	08001cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, ip}
    11b4:	ec520001 	mrrc	0, 0, r0, r2, cr1
    11b8:	b408001c 	strlt	r0, [r8], #-28
    11bc:	0108001d 	tsteq	r8, sp, lsl r0
    11c0:	1db45400 	cfldrsne	mvf5, [r4]
    11c4:	1db80800 	ldcne	8, cr0, [r8]
    11c8:	00040800 	andeq	r0, r4, r0, lsl #16
    11cc:	9f5201f3 	svcls	0x005201f3
	...
    11d8:	08001db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, ip}
    11dc:	08001dc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sl, fp, ip}
    11e0:	c6500001 	ldrbgt	r0, [r0], -r1
    11e4:	6c08001d 	stcvs	0, cr0, [r8], {29}
    11e8:	0108001e 	tsteq	r8, lr, lsl r0
    11ec:	00005400 	andeq	r5, r0, r0, lsl #8
    11f0:	00000000 	andeq	r0, r0, r0
    11f4:	1db80000 	ldcne	0, cr0, [r8]
    11f8:	1dcb0800 	stclne	8, cr0, [fp]
    11fc:	00010800 	andeq	r0, r1, r0, lsl #16
    1200:	001dcb51 	andseq	ip, sp, r1, asr fp
    1204:	001e6c08 	andseq	r6, lr, r8, lsl #24
    1208:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    1214:	08001e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip}
    1218:	08001e7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, sl, fp, ip}
    121c:	7a500001 	bvc	1401228 <__Stack_Size+0x1400a28>
    1220:	ea08001e 	b	2012a0 <__Stack_Size+0x200aa0>
    1224:	0108001e 	tsteq	r8, lr, lsl r0
    1228:	1eea5800 	cdpne	8, 14, cr5, cr10, cr0, {0}
    122c:	1ef00800 	cdpne	8, 15, cr0, cr0, cr0, {0}
    1230:	00040800 	andeq	r0, r4, r0, lsl #16
    1234:	9f5001f3 	svcls	0x005001f3
	...
    1240:	08001e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip}
    1244:	08001e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, ip}
    1248:	7c510001 	mrrcvc	0, 0, r0, r1, cr1
    124c:	ea08001e 	b	2012cc <__Stack_Size+0x200acc>
    1250:	0108001e 	tsteq	r8, lr, lsl r0
    1254:	1eea5700 	cdpne	7, 14, cr5, cr10, cr0, {0}
    1258:	1ef00800 	cdpne	8, 15, cr0, cr0, cr0, {0}
    125c:	00040800 	andeq	r0, r4, r0, lsl #16
    1260:	9f5101f3 	svcls	0x005101f3
	...
    126c:	08001e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip}
    1270:	08001e7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, fp, ip}
    1274:	7e520001 	cdpvc	0, 5, cr0, cr2, cr1, {0}
    1278:	ea08001e 	b	2012f8 <__Stack_Size+0x200af8>
    127c:	0108001e 	tsteq	r8, lr, lsl r0
    1280:	1eea5600 	cdpne	6, 14, cr5, cr10, cr0, {0}
    1284:	1ef00800 	cdpne	8, 15, cr0, cr0, cr0, {0}
    1288:	00040800 	andeq	r0, r4, r0, lsl #16
    128c:	9f5201f3 	svcls	0x005201f3
	...
    1298:	08001e82 	stmdaeq	r0, {r1, r7, r9, sl, fp, ip}
    129c:	08001e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip}
    12a0:	ff080003 			; <UNDEFINED> instruction: 0xff080003
    12a4:	001e849f 	mulseq	lr, pc, r4	; <UNPREDICTABLE>
    12a8:	001ece08 	andseq	ip, lr, r8, lsl #28
    12ac:	54000108 	strpl	r0, [r0], #-264	; 0x108
    12b0:	08001ece 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, fp, ip}
    12b4:	08001ed6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, fp, ip}
    12b8:	01740003 	cmneq	r4, r3
    12bc:	001ed69f 	mulseq	lr, pc, r6	; <UNPREDICTABLE>
    12c0:	001eea08 	andseq	lr, lr, r8, lsl #20
    12c4:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    12d0:	08001e72 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, fp, ip}
    12d4:	08001ee6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, fp, ip}
    12d8:	e65d0001 	ldrb	r0, [sp], -r1
    12dc:	ea08001e 	b	20135c <__Stack_Size+0x200b5c>
    12e0:	0408001e 	streq	r0, [r8], #-30
    12e4:	7de89100 	stfvcp	f1, [r8]
    12e8:	001eea9f 	mulseq	lr, pc, sl	; <UNPREDICTABLE>
    12ec:	001ef008 	andseq	pc, lr, r8
    12f0:	7d000408 	cfstrsvc	mvf0, [r0, #-32]	; 0xffffffe0
    12f4:	009f7de8 	addseq	r7, pc, r8, ror #27
    12f8:	00000000 	andeq	r0, r0, r0
    12fc:	9a000000 	bls	1304 <__Stack_Size+0xb04>
    1300:	ea08001e 	b	201380 <__Stack_Size+0x200b80>
    1304:	0108001e 	tsteq	r8, lr, lsl r0
    1308:	00005500 	andeq	r5, r0, r0, lsl #10
    130c:	00000000 	andeq	r0, r0, r0
    1310:	1eda0000 	cdpne	0, 13, cr0, cr10, cr0, {0}
    1314:	1ee60800 	cdpne	8, 14, cr0, cr6, cr0, {0}
    1318:	00010800 	andeq	r0, r1, r0, lsl #16
    131c:	001ee65d 	andseq	lr, lr, sp, asr r6
    1320:	001eea08 	andseq	lr, lr, r8, lsl #20
    1324:	91000408 	tstls	r0, r8, lsl #8
    1328:	ea9f7de8 	b	fe7e0ad0 <BootRAM+0xd751271>
    132c:	f008001e 			; <UNDEFINED> instruction: 0xf008001e
    1330:	0408001e 	streq	r0, [r8], #-30
    1334:	7de87d00 	stclvc	13, cr7, [r8]
    1338:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    133c:	00000000 	andeq	r0, r0, r0
    1340:	001eda00 	andseq	sp, lr, r0, lsl #20
    1344:	001eea08 	andseq	lr, lr, r8, lsl #20
    1348:	58000108 	stmdapl	r0, {r3, r8}
    134c:	08001eea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, fp, ip}
    1350:	08001ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, ip}
    1354:	01f30004 	mvnseq	r0, r4
    1358:	00009f50 	andeq	r9, r0, r0, asr pc
    135c:	00000000 	andeq	r0, r0, r0
    1360:	1ef00000 	cdpne	0, 15, cr0, cr0, cr0, {0}
    1364:	1efe0800 	cdpne	8, 15, cr0, cr14, cr0, {0}
    1368:	00010800 	andeq	r0, r1, r0, lsl #16
    136c:	001efe50 	andseq	pc, lr, r0, asr lr	; <UNPREDICTABLE>
    1370:	001f3e08 	andseq	r3, pc, r8, lsl #28
    1374:	56000108 	strpl	r0, [r0], -r8, lsl #2
    1378:	08001f3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sl, fp, ip}
    137c:	08001f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, ip}
    1380:	01f30004 	mvnseq	r0, r4
    1384:	00009f50 	andeq	r9, r0, r0, asr pc
    1388:	00000000 	andeq	r0, r0, r0
    138c:	1ef00000 	cdpne	0, 15, cr0, cr0, cr0, {0}
    1390:	1efe0800 	cdpne	8, 15, cr0, cr14, cr0, {0}
    1394:	00010800 	andeq	r0, r1, r0, lsl #16
    1398:	001efe51 	andseq	pc, lr, r1, asr lr	; <UNPREDICTABLE>
    139c:	001f3e08 	andseq	r3, pc, r8, lsl #28
    13a0:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    13a4:	08001f3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sl, fp, ip}
    13a8:	08001f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, ip}
    13ac:	01f30004 	mvnseq	r0, r4
    13b0:	00009f51 	andeq	r9, r0, r1, asr pc
    13b4:	00000000 	andeq	r0, r0, r0
    13b8:	1ef60000 	cdpne	0, 15, cr0, cr6, cr0, {0}
    13bc:	1f3c0800 	svcne	0x003c0800
    13c0:	00010800 	andeq	r0, r1, r0, lsl #16
    13c4:	001f3c5d 	andseq	r3, pc, sp, asr ip	; <UNPREDICTABLE>
    13c8:	001f3e08 	andseq	r3, pc, r8, lsl #28
    13cc:	74000308 	strvc	r0, [r0], #-776	; 0x308
    13d0:	1f3e9f50 	svcne	0x003e9f50
    13d4:	1f440800 	svcne	0x00440800
    13d8:	00040800 	andeq	r0, r4, r0, lsl #16
    13dc:	9f7fa87d 	svcls	0x007fa87d
	...
    13e8:	08001f26 	stmdaeq	r0, {r1, r2, r5, r8, r9, sl, fp, ip}
    13ec:	08001f3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sl, fp, ip}
    13f0:	3e560001 	cdpcc	0, 5, cr0, cr6, cr1, {0}
    13f4:	4408001f 	strmi	r0, [r8], #-31
    13f8:	0408001f 	streq	r0, [r8], #-31
    13fc:	5001f300 	andpl	pc, r1, r0, lsl #6
    1400:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1404:	00000000 	andeq	r0, r0, r0
    1408:	001f4400 	andseq	r4, pc, r0, lsl #8
    140c:	001f5808 	andseq	r5, pc, r8, lsl #16
    1410:	50000108 	andpl	r0, r0, r8, lsl #2
    1414:	08001f58 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, fp, ip}
    1418:	08001fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp, ip}
    141c:	d85a0001 	ldmdale	sl, {r0}^
    1420:	e008001f 	and	r0, r8, pc, lsl r0
    1424:	0408001f 	streq	r0, [r8], #-31
    1428:	5001f300 	andpl	pc, r1, r0, lsl #6
    142c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1430:	00000000 	andeq	r0, r0, r0
    1434:	001f4400 	andseq	r4, pc, r0, lsl #8
    1438:	001f5808 	andseq	r5, pc, r8, lsl #16
    143c:	51000108 	tstpl	r0, r8, lsl #2
    1440:	08001f58 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, fp, ip}
    1444:	08001fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp, ip}
    1448:	d8560001 	ldmdale	r6, {r0}^
    144c:	e008001f 	and	r0, r8, pc, lsl r0
    1450:	0408001f 	streq	r0, [r8], #-31
    1454:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1458:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    145c:	00000000 	andeq	r0, r0, r0
    1460:	001f4400 	andseq	r4, pc, r0, lsl #8
    1464:	001f5808 	andseq	r5, pc, r8, lsl #16
    1468:	52000108 	andpl	r0, r0, #8, 2
    146c:	08001f58 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, fp, ip}
    1470:	08001fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp, ip}
    1474:	d8580001 	ldmdale	r8, {r0}^
    1478:	e008001f 	and	r0, r8, pc, lsl r0
    147c:	0408001f 	streq	r0, [r8], #-31
    1480:	5201f300 	andpl	pc, r1, #0, 6
    1484:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1488:	00000000 	andeq	r0, r0, r0
    148c:	001f4400 	andseq	r4, pc, r0, lsl #8
    1490:	001f5808 	andseq	r5, pc, r8, lsl #16
    1494:	53000108 	movwpl	r0, #264	; 0x108
    1498:	08001f58 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, fp, ip}
    149c:	08001f86 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, fp, ip}
    14a0:	86590001 	ldrbhi	r0, [r9], -r1
    14a4:	8b08001f 	blhi	201528 <__Stack_Size+0x200d28>
    14a8:	0108001f 	tsteq	r8, pc, lsl r0
    14ac:	1f8b5100 	svcne	0x008b5100
    14b0:	1fd80800 	svcne	0x00d80800
    14b4:	00010800 	andeq	r0, r1, r0, lsl #16
    14b8:	001fd859 	andseq	sp, pc, r9, asr r8	; <UNPREDICTABLE>
    14bc:	001fe008 	andseq	lr, pc, r8
    14c0:	f3000408 	vshl.u8	d0, d8, d0
    14c4:	009f5301 	addseq	r5, pc, r1, lsl #6
    14c8:	00000000 	andeq	r0, r0, r0
    14cc:	44000000 	strmi	r0, [r0], #-0
    14d0:	d808001f 	stmdale	r8, {r0, r1, r2, r3, r4}
    14d4:	0208001f 	andeq	r0, r8, #31
    14d8:	d8009100 	stmdale	r0, {r8, ip, pc}
    14dc:	e008001f 	and	r0, r8, pc, lsl r0
    14e0:	0208001f 	andeq	r0, r8, #31
    14e4:	00007d00 	andeq	r7, r0, r0, lsl #26
    14e8:	00000000 	andeq	r0, r0, r0
    14ec:	4c000000 	stcmi	0, cr0, [r0], {-0}
    14f0:	d408001f 	strle	r0, [r8], #-31
    14f4:	0108001f 	tsteq	r8, pc, lsl r0
    14f8:	1fd45d00 	svcne	0x00d45d00
    14fc:	1fd80800 	svcne	0x00d80800
    1500:	00040800 	andeq	r0, r4, r0, lsl #16
    1504:	9f7fa091 	svcls	0x007fa091
    1508:	08001fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp, ip}
    150c:	08001fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip}
    1510:	a07d0004 	rsbsge	r0, sp, r4
    1514:	00009f7f 	andeq	r9, r0, pc, ror pc
    1518:	00000000 	andeq	r0, r0, r0
    151c:	1f940000 	svcne	0x00940000
    1520:	1fa80800 	svcne	0x00a80800
    1524:	00010800 	andeq	r0, r1, r0, lsl #16
    1528:	001fa854 	andseq	sl, pc, r4, asr r8	; <UNPREDICTABLE>
    152c:	001fac08 	andseq	sl, pc, r8, lsl #24
    1530:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1534:	08001fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, ip}
    1538:	08001fb2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, sl, fp, ip}
    153c:	00540001 	subseq	r0, r4, r1
    1540:	00000000 	andeq	r0, r0, r0
    1544:	e0000000 	and	r0, r0, r0
    1548:	ea08001f 	b	2015cc <__Stack_Size+0x200dcc>
    154c:	0108001f 	tsteq	r8, pc, lsl r0
    1550:	1fea5000 	svcne	0x00ea5000
    1554:	20080800 	andcs	r0, r8, r0, lsl #16
    1558:	00010800 	andeq	r0, r1, r0, lsl #16
    155c:	00200854 	eoreq	r0, r0, r4, asr r8
    1560:	00200c08 	eoreq	r0, r0, r8, lsl #24
    1564:	f3000408 	vshl.u8	d0, d8, d0
    1568:	009f5001 	addseq	r5, pc, r1
    156c:	00000000 	andeq	r0, r0, r0
    1570:	e0000000 	and	r0, r0, r0
    1574:	ec08001f 	stc	0, cr0, [r8], {31}
    1578:	0108001f 	tsteq	r8, pc, lsl r0
    157c:	1fec5100 	svcne	0x00ec5100
    1580:	1fef0800 	svcne	0x00ef0800
    1584:	00010800 	andeq	r0, r1, r0, lsl #16
    1588:	001fef52 	andseq	lr, pc, r2, asr pc	; <UNPREDICTABLE>
    158c:	00200c08 	eoreq	r0, r0, r8, lsl #24
    1590:	f3000408 	vshl.u8	d0, d8, d0
    1594:	009f5101 	addseq	r5, pc, r1, lsl #2
    1598:	00000000 	andeq	r0, r0, r0
    159c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    15a0:	f608001f 			; <UNDEFINED> instruction: 0xf608001f
    15a4:	0408001f 	streq	r0, [r8], #-31
    15a8:	7ef89100 	nrmvce	f1, f0
    15ac:	001ff69f 	mulseq	pc, pc, r6	; <UNPREDICTABLE>
    15b0:	001ff908 	andseq	pc, pc, r8, lsl #18
    15b4:	52000108 	andpl	r0, r0, #8, 2
    15b8:	08001ff9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    15bc:	08002008 	stmdaeq	r0, {r3, sp}
    15c0:	f8910004 			; <UNDEFINED> instruction: 0xf8910004
    15c4:	20089f7e 	andcs	r9, r8, lr, ror pc
    15c8:	200c0800 	andcs	r0, ip, r0, lsl #16
    15cc:	00040800 	andeq	r0, r4, r0, lsl #16
    15d0:	9f7ef87d 	svcls	0x007ef87d
	...
    15dc:	08001ff0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    15e0:	08002008 	stmdaeq	r0, {r3, sp}
    15e4:	08540001 	ldmdaeq	r4, {r0}^
    15e8:	0c080020 	stceq	0, cr0, [r8], {32}
    15ec:	04080020 	streq	r0, [r8], #-32
    15f0:	5001f300 	andpl	pc, r1, r0, lsl #6
    15f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    15f8:	00000000 	andeq	r0, r0, r0
    15fc:	00200c00 	eoreq	r0, r0, r0, lsl #24
    1600:	00201408 	eoreq	r1, r0, r8, lsl #8
    1604:	50000108 	andpl	r0, r0, r8, lsl #2
    1608:	08002014 	stmdaeq	r0, {r2, r4, sp}
    160c:	08002024 	stmdaeq	r0, {r2, r5, sp}
    1610:	00540001 	subseq	r0, r4, r1
    1614:	00000000 	andeq	r0, r0, r0
    1618:	0c000000 	stceq	0, cr0, [r0], {-0}
    161c:	17080020 	strne	r0, [r8, -r0, lsr #32]
    1620:	01080020 	tsteq	r8, r0, lsr #32
    1624:	20175100 	andscs	r5, r7, r0, lsl #2
    1628:	20240800 	eorcs	r0, r4, r0, lsl #16
    162c:	00040800 	andeq	r0, r4, r0, lsl #16
    1630:	9f5101f3 	svcls	0x005101f3
	...
    163c:	08002024 	stmdaeq	r0, {r2, r5, sp}
    1640:	08002030 	stmdaeq	r0, {r4, r5, sp}
    1644:	30500001 	subscc	r0, r0, r1
    1648:	68080020 	stmdavs	r8, {r5}
    164c:	01080020 	tsteq	r8, r0, lsr #32
    1650:	20685800 	rsbcs	r5, r8, r0, lsl #16
    1654:	20de0800 	sbcscs	r0, lr, r0, lsl #16
    1658:	00030800 	andeq	r0, r3, r0, lsl #16
    165c:	de9f6078 	mrcle	0, 4, r6, cr15, cr8, {3}
    1660:	e4080020 	str	r0, [r8], #-32
    1664:	04080020 	streq	r0, [r8], #-32
    1668:	5001f300 	andpl	pc, r1, r0, lsl #6
    166c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1670:	00000000 	andeq	r0, r0, r0
    1674:	00202400 	eoreq	r2, r0, r0, lsl #8
    1678:	00203208 	eoreq	r3, r0, r8, lsl #4
    167c:	51000108 	tstpl	r0, r8, lsl #2
    1680:	08002032 	stmdaeq	r0, {r1, r4, r5, sp}
    1684:	080020de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sp}
    1688:	de590001 	cdple	0, 5, cr0, cr9, cr1, {0}
    168c:	e4080020 	str	r0, [r8], #-32
    1690:	04080020 	streq	r0, [r8], #-32
    1694:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1698:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    169c:	00000000 	andeq	r0, r0, r0
    16a0:	00202400 	eoreq	r2, r0, r0, lsl #8
    16a4:	00203d08 	eoreq	r3, r0, r8, lsl #26
    16a8:	52000108 	andpl	r0, r0, #8, 2
    16ac:	0800203d 	stmdaeq	r0, {r0, r2, r3, r4, r5, sp}
    16b0:	080020e4 	stmdaeq	r0, {r2, r5, r6, r7, sp}
    16b4:	01f30004 	mvnseq	r0, r4
    16b8:	00009f52 	andeq	r9, r0, r2, asr pc
    16bc:	00000000 	andeq	r0, r0, r0
    16c0:	20240000 	eorcs	r0, r4, r0
    16c4:	203d0800 	eorscs	r0, sp, r0, lsl #16
    16c8:	00010800 	andeq	r0, r1, r0, lsl #16
    16cc:	00203d53 	eoreq	r3, r0, r3, asr sp
    16d0:	0020de08 	eoreq	sp, r0, r8, lsl #28
    16d4:	56000108 	strpl	r0, [r0], -r8, lsl #2
    16d8:	080020de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sp}
    16dc:	080020e4 	stmdaeq	r0, {r2, r5, r6, r7, sp}
    16e0:	01f30004 	mvnseq	r0, r4
    16e4:	00009f53 	andeq	r9, r0, r3, asr pc
    16e8:	00000000 	andeq	r0, r0, r0
    16ec:	20240000 	eorcs	r0, r4, r0
    16f0:	20de0800 	sbcscs	r0, lr, r0, lsl #16
    16f4:	00020800 	andeq	r0, r2, r0, lsl #16
    16f8:	20de0091 	smullscs	r0, lr, r1, r0
    16fc:	20e40800 	rsccs	r0, r4, r0, lsl #16
    1700:	00020800 	andeq	r0, r2, r0, lsl #16
    1704:	0000007d 	andeq	r0, r0, sp, ror r0
    1708:	00000000 	andeq	r0, r0, r0
    170c:	203e0000 	eorscs	r0, lr, r0
    1710:	20de0800 	sbcscs	r0, lr, r0, lsl #16
    1714:	00010800 	andeq	r0, r1, r0, lsl #16
    1718:	00000057 	andeq	r0, r0, r7, asr r0
    171c:	00000000 	andeq	r0, r0, r0
    1720:	00203e00 	eoreq	r3, r0, r0, lsl #28
    1724:	0020de08 	eoreq	sp, r0, r8, lsl #28
    1728:	56000108 	strpl	r0, [r0], -r8, lsl #2
    172c:	080020de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sp}
    1730:	080020e4 	stmdaeq	r0, {r2, r5, r6, r7, sp}
    1734:	01f30004 	mvnseq	r0, r4
    1738:	00009f53 	andeq	r9, r0, r3, asr pc
    173c:	00000000 	andeq	r0, r0, r0
    1740:	203e0000 	eorscs	r0, lr, r0
    1744:	20400800 	subcs	r0, r0, r0, lsl #16
    1748:	00010800 	andeq	r0, r1, r0, lsl #16
    174c:	00204055 	eoreq	r4, r0, r5, asr r0
    1750:	00206808 	eoreq	r6, r0, r8, lsl #16
    1754:	75000308 	strvc	r0, [r0, #-776]	; 0x308
    1758:	20689f70 	rsbcs	r9, r8, r0, ror pc
    175c:	20de0800 	sbcscs	r0, lr, r0, lsl #16
    1760:	00040800 	andeq	r0, r4, r0, lsl #16
    1764:	9f7ec091 	svcls	0x007ec091
    1768:	080020de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sp}
    176c:	080020e4 	stmdaeq	r0, {r2, r5, r6, r7, sp}
    1770:	c07d0004 	rsbsgt	r0, sp, r4
    1774:	00009f7e 	andeq	r9, r0, lr, ror pc
    1778:	00000000 	andeq	r0, r0, r0
    177c:	203e0000 	eorscs	r0, lr, r0
    1780:	204e0800 	subcs	r0, lr, r0, lsl #16
    1784:	00040800 	andeq	r0, r4, r0, lsl #16
    1788:	9f7de091 	svcls	0x007de091
    178c:	0800204e 	stmdaeq	r0, {r1, r2, r3, r6, sp}
    1790:	08002057 	stmdaeq	r0, {r0, r1, r2, r4, r6, sp}
    1794:	57500001 	ldrbpl	r0, [r0, -r1]
    1798:	5c080020 	stcpl	0, cr0, [r8], {32}
    179c:	04080020 	streq	r0, [r8], #-32
    17a0:	7de09100 	stfvcp	f1, [r0]
    17a4:	00205c9f 	mlaeq	r0, pc, ip, r5	; <UNPREDICTABLE>
    17a8:	00205f08 	eoreq	r5, r0, r8, lsl #30
    17ac:	51000108 	tstpl	r0, r8, lsl #2
    17b0:	0800205f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, sp}
    17b4:	080020be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sp}
    17b8:	e0910004 	adds	r0, r1, r4
    17bc:	20be9f7d 	adcscs	r9, lr, sp, ror pc
    17c0:	20c10800 	sbccs	r0, r1, r0, lsl #16
    17c4:	00010800 	andeq	r0, r1, r0, lsl #16
    17c8:	0020c151 	eoreq	ip, r0, r1, asr r1
    17cc:	0020de08 	eoreq	sp, r0, r8, lsl #28
    17d0:	91000408 	tstls	r0, r8, lsl #8
    17d4:	de9f7de0 	cdple	13, 9, cr7, cr15, cr0, {7}
    17d8:	e4080020 	str	r0, [r8], #-32
    17dc:	04080020 	streq	r0, [r8], #-32
    17e0:	7de07d00 	stclvc	13, cr7, [r0]
    17e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    17e8:	00000000 	andeq	r0, r0, r0
    17ec:	00206000 	eoreq	r6, r0, r0
    17f0:	0020de08 	eoreq	sp, r0, r8, lsl #28
    17f4:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    1800:	08002060 	stmdaeq	r0, {r5, r6, sp}
    1804:	080020de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sp}
    1808:	de560001 	cdple	0, 5, cr0, cr6, cr1, {0}
    180c:	e4080020 	str	r0, [r8], #-32
    1810:	04080020 	streq	r0, [r8], #-32
    1814:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    1818:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    181c:	00000000 	andeq	r0, r0, r0
    1820:	00206000 	eoreq	r6, r0, r0
    1824:	0020de08 	eoreq	sp, r0, r8, lsl #28
    1828:	59000108 	stmdbpl	r0, {r3, r8}
    182c:	080020de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sp}
    1830:	080020e4 	stmdaeq	r0, {r2, r5, r6, r7, sp}
    1834:	01f30004 	mvnseq	r0, r4
    1838:	00009f51 	andeq	r9, r0, r1, asr pc
    183c:	00000000 	andeq	r0, r0, r0
    1840:	20600000 	rsbcs	r0, r0, r0
    1844:	20680800 	rsbcs	r0, r8, r0, lsl #16
    1848:	00010800 	andeq	r0, r1, r0, lsl #16
    184c:	00206858 	eoreq	r6, r0, r8, asr r8
    1850:	0020de08 	eoreq	sp, r0, r8, lsl #28
    1854:	78000308 	stmdavc	r0, {r3, r8, r9}
    1858:	20de9f60 	sbcscs	r9, lr, r0, ror #30
    185c:	20e40800 	rsccs	r0, r4, r0, lsl #16
    1860:	00040800 	andeq	r0, r4, r0, lsl #16
    1864:	9f5001f3 	svcls	0x005001f3
	...
    1870:	08002060 	stmdaeq	r0, {r5, r6, sp}
    1874:	08002094 	stmdaeq	r0, {r2, r4, r7, sp}
    1878:	80910004 	addshi	r0, r1, r4
    187c:	20949f7e 	addscs	r9, r4, lr, ror pc
    1880:	209f0800 	addscs	r0, pc, r0, lsl #16
    1884:	00010800 	andeq	r0, r1, r0, lsl #16
    1888:	00209f50 	eoreq	r9, r0, r0, asr pc
    188c:	0020b008 	eoreq	fp, r0, r8
    1890:	91000408 	tstls	r0, r8, lsl #8
    1894:	b09f7e80 	addslt	r7, pc, r0, lsl #29
    1898:	b7080020 	strlt	r0, [r8, -r0, lsr #32]
    189c:	01080020 	tsteq	r8, r0, lsr #32
    18a0:	20b75100 	adcscs	r5, r7, r0, lsl #2
    18a4:	20de0800 	sbcscs	r0, lr, r0, lsl #16
    18a8:	00040800 	andeq	r0, r4, r0, lsl #16
    18ac:	9f7e8091 	svcls	0x007e8091
    18b0:	080020de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sp}
    18b4:	080020e4 	stmdaeq	r0, {r2, r5, r6, r7, sp}
    18b8:	807d0004 	rsbshi	r0, sp, r4
    18bc:	00009f7e 	andeq	r9, r0, lr, ror pc
    18c0:	00000000 	andeq	r0, r0, r0
    18c4:	20e40000 	rsccs	r0, r4, r0
    18c8:	20fa0800 	rscscs	r0, sl, r0, lsl #16
    18cc:	00010800 	andeq	r0, r1, r0, lsl #16
    18d0:	0020fa50 	eoreq	pc, r0, r0, asr sl	; <UNPREDICTABLE>
    18d4:	0021a408 	eoreq	sl, r1, r8, lsl #8
    18d8:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    18e4:	080020e4 	stmdaeq	r0, {r2, r5, r6, r7, sp}
    18e8:	080020fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sp}
    18ec:	fa510001 	blx	14418f8 <__Stack_Size+0x14410f8>
    18f0:	a4080020 	strge	r0, [r8], #-32
    18f4:	01080021 	tsteq	r8, r1, lsr #32
    18f8:	00005700 	andeq	r5, r0, r0, lsl #14
    18fc:	00000000 	andeq	r0, r0, r0
    1900:	20e40000 	rsccs	r0, r4, r0
    1904:	21140800 	tstcs	r4, r0, lsl #16
    1908:	00010800 	andeq	r0, r1, r0, lsl #16
    190c:	00211452 	eoreq	r1, r1, r2, asr r4
    1910:	00213108 	eoreq	r3, r1, r8, lsl #2
    1914:	5c000108 	stfpls	f0, [r0], {8}
    1918:	08002131 	stmdaeq	r0, {r0, r4, r5, r8, sp}
    191c:	080021a4 	stmdaeq	r0, {r2, r5, r7, r8, sp}
    1920:	01f30004 	mvnseq	r0, r4
    1924:	00009f52 	andeq	r9, r0, r2, asr pc
    1928:	00000000 	andeq	r0, r0, r0
    192c:	20e40000 	rsccs	r0, r4, r0
    1930:	212a0800 	teqcs	sl, r0, lsl #16
    1934:	00010800 	andeq	r0, r1, r0, lsl #16
    1938:	00212a53 	eoreq	r2, r1, r3, asr sl
    193c:	00213108 	eoreq	r3, r1, r8, lsl #2
    1940:	7d000208 	sfmvc	f0, 4, [r0, #-32]	; 0xffffffe0
    1944:	00213100 	eoreq	r3, r1, r0, lsl #2
    1948:	0021a408 	eoreq	sl, r1, r8, lsl #8
    194c:	f3000408 	vshl.u8	d0, d8, d0
    1950:	009f5301 	addseq	r5, pc, r1, lsl #6
    1954:	00000000 	andeq	r0, r0, r0
    1958:	e4000000 	str	r0, [r0], #-0
    195c:	50080020 	andpl	r0, r8, r0, lsr #32
    1960:	02080021 	andeq	r0, r8, #33	; 0x21
    1964:	509f3100 	addspl	r3, pc, r0, lsl #2
    1968:	70080021 	andvc	r0, r8, r1, lsr #32
    196c:	05080021 	streq	r0, [r8, #-33]	; 0x21
    1970:	31007500 	tstcc	r0, r0, lsl #10
    1974:	21709f1a 	cmncs	r0, sl, lsl pc
    1978:	21a40800 			; <UNDEFINED> instruction: 0x21a40800
    197c:	00080800 	andeq	r0, r8, r0, lsl #16
    1980:	00740075 	rsbseq	r0, r4, r5, ror r0
    1984:	9f1a311a 	svcls	0x001a311a
	...
    1990:	080020f0 	stmdaeq	r0, {r4, r5, r6, r7, sp}
    1994:	0800212a 	stmdaeq	r0, {r1, r3, r5, r8, sp}
    1998:	2a530001 	bcs	14c19a4 <__Stack_Size+0x14c11a4>
    199c:	31080021 	tstcc	r8, r1, lsr #32
    19a0:	02080021 	andeq	r0, r8, #33	; 0x21
    19a4:	31007d00 	tstcc	r0, r0, lsl #26
    19a8:	a4080021 	strge	r0, [r8], #-33	; 0x21
    19ac:	04080021 	streq	r0, [r8], #-33	; 0x21
    19b0:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    19b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    19b8:	00000000 	andeq	r0, r0, r0
    19bc:	0020f000 	eoreq	pc, r0, r0
    19c0:	00211408 	eoreq	r1, r1, r8, lsl #8
    19c4:	52000108 	andpl	r0, r0, #8, 2
    19c8:	08002114 	stmdaeq	r0, {r2, r4, r8, sp}
    19cc:	08002131 	stmdaeq	r0, {r0, r4, r5, r8, sp}
    19d0:	315c0001 	cmpcc	ip, r1
    19d4:	a4080021 	strge	r0, [r8], #-33	; 0x21
    19d8:	04080021 	streq	r0, [r8], #-33	; 0x21
    19dc:	5201f300 	andpl	pc, r1, #0, 6
    19e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    19e4:	00000000 	andeq	r0, r0, r0
    19e8:	0020ee00 	eoreq	lr, r0, r0, lsl #28
    19ec:	0020fa08 	eoreq	pc, r0, r8, lsl #20
    19f0:	51000108 	tstpl	r0, r8, lsl #2
    19f4:	080020fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sp}
    19f8:	080021a4 	stmdaeq	r0, {r2, r5, r7, r8, sp}
    19fc:	00570001 	subseq	r0, r7, r1
    1a00:	00000000 	andeq	r0, r0, r0
    1a04:	ea000000 	b	1a0c <__Stack_Size+0x120c>
    1a08:	fa080020 	blx	201a90 <__Stack_Size+0x201290>
    1a0c:	01080020 	tsteq	r8, r0, lsr #32
    1a10:	20fa5000 	rscscs	r5, sl, r0
    1a14:	21a40800 			; <UNDEFINED> instruction: 0x21a40800
    1a18:	00010800 	andeq	r0, r1, r0, lsl #16
    1a1c:	00000056 	andeq	r0, r0, r6, asr r0
    1a20:	00000000 	andeq	r0, r0, r0
    1a24:	0020ea00 	eoreq	lr, r0, r0, lsl #20
    1a28:	00212808 	eoreq	r2, r1, r8, lsl #16
    1a2c:	91000408 	tstls	r0, r8, lsl #8
    1a30:	289f7d88 	ldmcs	pc, {r3, r7, r8, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    1a34:	31080021 	tstcc	r8, r1, lsr #32
    1a38:	01080021 	tsteq	r8, r1, lsr #32
    1a3c:	21315000 	teqcs	r1, r0
    1a40:	21560800 	cmpcs	r6, r0, lsl #16
    1a44:	00040800 	andeq	r0, r4, r0, lsl #16
    1a48:	9f7d8891 	svcls	0x007d8891
    1a4c:	08002156 	stmdaeq	r0, {r1, r2, r4, r6, r8, sp}
    1a50:	08002159 	stmdaeq	r0, {r0, r3, r4, r6, r8, sp}
    1a54:	59520001 	ldmdbpl	r2, {r0}^
    1a58:	a4080021 	strge	r0, [r8], #-33	; 0x21
    1a5c:	04080021 	streq	r0, [r8], #-33	; 0x21
    1a60:	7d889100 	stfvcd	f1, [r8]
    1a64:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1a68:	00000000 	andeq	r0, r0, r0
    1a6c:	00213a00 	eoreq	r3, r1, r0, lsl #20
    1a70:	00214c08 	eoreq	r4, r1, r8, lsl #24
    1a74:	91000408 	tstls	r0, r8, lsl #8
    1a78:	4c9f7de8 	ldcmi	13, cr7, [pc], {232}	; 0xe8
    1a7c:	4f080021 	svcmi	0x00080021
    1a80:	01080021 	tsteq	r8, r1, lsr #32
    1a84:	214f5000 	mrscs	r5, SPSR
    1a88:	21520800 	cmpcs	r2, r0, lsl #16
    1a8c:	00040800 	andeq	r0, r4, r0, lsl #16
    1a90:	9f7de891 	svcls	0x007de891
    1a94:	08002152 	stmdaeq	r0, {r1, r4, r6, r8, sp}
    1a98:	08002159 	stmdaeq	r0, {r0, r3, r4, r6, r8, sp}
    1a9c:	59500001 	ldmdbpl	r0, {r0}^
    1aa0:	72080021 	andvc	r0, r8, #33	; 0x21
    1aa4:	04080021 	streq	r0, [r8], #-33	; 0x21
    1aa8:	7de89100 	stfvcp	f1, [r8]
    1aac:	0021729f 	mlaeq	r1, pc, r2, r7	; <UNPREDICTABLE>
    1ab0:	00217908 	eoreq	r7, r1, r8, lsl #18
    1ab4:	50000108 	andpl	r0, r0, r8, lsl #2
    1ab8:	08002179 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sp}
    1abc:	08002180 	stmdaeq	r0, {r7, r8, sp}
    1ac0:	e8910004 	ldm	r1, {r2}
    1ac4:	21809f7d 	orrcs	r9, r0, sp, ror pc
    1ac8:	21830800 	orrcs	r0, r3, r0, lsl #16
    1acc:	00010800 	andeq	r0, r1, r0, lsl #16
    1ad0:	00218352 	eoreq	r8, r1, r2, asr r3
    1ad4:	0021a408 	eoreq	sl, r1, r8, lsl #8
    1ad8:	91000408 	tstls	r0, r8, lsl #8
    1adc:	009f7de8 	addseq	r7, pc, r8, ror #27
    1ae0:	00000000 	andeq	r0, r0, r0
    1ae4:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    1ae8:	4c080021 	stcmi	0, cr0, [r8], {33}	; 0x21
    1aec:	01080021 	tsteq	r8, r1, lsr #32
    1af0:	214c5000 	mrscs	r5, (UNDEF: 76)
    1af4:	21a40800 			; <UNDEFINED> instruction: 0x21a40800
    1af8:	00010800 	andeq	r0, r1, r0, lsl #16
    1afc:	00000055 	andeq	r0, r0, r5, asr r0
    1b00:	00000000 	andeq	r0, r0, r0
    1b04:	00215a00 	eoreq	r5, r1, r0, lsl #20
    1b08:	00216c08 	eoreq	r6, r1, r8, lsl #24
    1b0c:	91000408 	tstls	r0, r8, lsl #8
    1b10:	6c9f7ee8 	ldcvs	14, cr7, [pc], {232}	; 0xe8
    1b14:	6f080021 	svcvs	0x00080021
    1b18:	01080021 	tsteq	r8, r1, lsr #32
    1b1c:	216f5000 	cmncs	pc, r0
    1b20:	21760800 	cmncs	r6, r0, lsl #16
    1b24:	00040800 	andeq	r0, r4, r0, lsl #16
    1b28:	9f7ee891 	svcls	0x007ee891
    1b2c:	08002176 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sp}
    1b30:	08002179 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sp}
    1b34:	79520001 	ldmdbvc	r2, {r0}^
    1b38:	a4080021 	strge	r0, [r8], #-33	; 0x21
    1b3c:	04080021 	streq	r0, [r8], #-33	; 0x21
    1b40:	7ee89100 	urdvce	f1, f0
    1b44:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1b48:	00000000 	andeq	r0, r0, r0
    1b4c:	00216800 	eoreq	r6, r1, r0, lsl #16
    1b50:	00216c08 	eoreq	r6, r1, r8, lsl #24
    1b54:	50000108 	andpl	r0, r0, r8, lsl #2
    1b58:	0800216c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sp}
    1b5c:	080021a4 	stmdaeq	r0, {r2, r5, r7, r8, sp}
    1b60:	00540001 	subseq	r0, r4, r1
    1b64:	00000000 	andeq	r0, r0, r0
    1b68:	7a000000 	bvc	1b70 <__Stack_Size+0x1370>
    1b6c:	80080021 	andhi	r0, r8, r1, lsr #32
    1b70:	04080021 	streq	r0, [r8], #-33	; 0x21
    1b74:	7de89100 	stfvcp	f1, [r8]
    1b78:	0021809f 	mlaeq	r1, pc, r0, r8	; <UNPREDICTABLE>
    1b7c:	00218308 	eoreq	r8, r1, r8, lsl #6
    1b80:	52000108 	andpl	r0, r0, #8, 2
    1b84:	08002183 	stmdaeq	r0, {r0, r1, r7, r8, sp}
    1b88:	080021a4 	stmdaeq	r0, {r2, r5, r7, r8, sp}
    1b8c:	e8910004 	ldm	r1, {r2}
    1b90:	00009f7d 	andeq	r9, r0, sp, ror pc
    1b94:	00000000 	andeq	r0, r0, r0
    1b98:	217a0000 	cmncs	sl, r0
    1b9c:	21860800 	orrcs	r0, r6, r0, lsl #16
    1ba0:	00040800 	andeq	r0, r4, r0, lsl #16
    1ba4:	9f7ce891 	svcls	0x007ce891
    1ba8:	08002186 	stmdaeq	r0, {r1, r2, r7, r8, sp}
    1bac:	0800218d 	stmdaeq	r0, {r0, r2, r3, r7, r8, sp}
    1bb0:	8d500001 	ldclhi	0, cr0, [r0, #-4]
    1bb4:	92080021 	andls	r0, r8, #33	; 0x21
    1bb8:	04080021 	streq	r0, [r8], #-33	; 0x21
    1bbc:	7ce89100 	stfvcp	f1, [r8]
    1bc0:	0021929f 	mlaeq	r1, pc, r2, r9	; <UNPREDICTABLE>
    1bc4:	00219508 	eoreq	r9, r1, r8, lsl #10
    1bc8:	51000108 	tstpl	r0, r8, lsl #2
    1bcc:	08002195 	stmdaeq	r0, {r0, r2, r4, r7, r8, sp}
    1bd0:	080021a4 	stmdaeq	r0, {r2, r5, r7, r8, sp}
    1bd4:	e8910004 	ldm	r1, {r2}
    1bd8:	00009f7c 	andeq	r9, r0, ip, ror pc
    1bdc:	00000000 	andeq	r0, r0, r0
    1be0:	21a40000 			; <UNDEFINED> instruction: 0x21a40000
    1be4:	21b80800 			; <UNDEFINED> instruction: 0x21b80800
    1be8:	00010800 	andeq	r0, r1, r0, lsl #16
    1bec:	0021b850 	eoreq	fp, r1, r0, asr r8
    1bf0:	0021c108 	eoreq	ip, r1, r8, lsl #2
    1bf4:	70000308 	andvc	r0, r0, r8, lsl #6
    1bf8:	21c19f7c 	biccs	r9, r1, ip, ror pc
    1bfc:	21c20800 	biccs	r0, r2, r0, lsl #16
    1c00:	00040800 	andeq	r0, r4, r0, lsl #16
    1c04:	9f5001f3 	svcls	0x005001f3
	...
    1c10:	080021a4 	stmdaeq	r0, {r2, r5, r7, r8, sp}
    1c14:	080021aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, sp}
    1c18:	aa510001 	bge	1441c24 <__Stack_Size+0x1441424>
    1c1c:	b0080021 	andlt	r0, r8, r1, lsr #32
    1c20:	01080021 	tsteq	r8, r1, lsr #32
    1c24:	21b05200 	lslscs	r5, r0, #4
    1c28:	21b40800 			; <UNDEFINED> instruction: 0x21b40800
    1c2c:	00050800 	andeq	r0, r5, r0, lsl #16
    1c30:	25380072 	ldrcs	r0, [r8, #-114]!	; 0x72
    1c34:	0021b49f 	mlaeq	r1, pc, r4, fp	; <UNPREDICTABLE>
    1c38:	0021ba08 	eoreq	fp, r1, r8, lsl #20
    1c3c:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
    1c40:	38253800 	stmdacc	r5!, {fp, ip, sp}
    1c44:	21ba9f25 			; <UNDEFINED> instruction: 0x21ba9f25
    1c48:	21c20800 	biccs	r0, r2, r0, lsl #16
    1c4c:	000a0800 	andeq	r0, sl, r0, lsl #16
    1c50:	405101f3 	ldrshmi	r0, [r1], #-19	; 0xffffffed
    1c54:	38253825 	stmdacc	r5!, {r0, r2, r5, fp, ip, sp}
    1c58:	00009f25 	andeq	r9, r0, r5, lsr #30
    1c5c:	00000000 	andeq	r0, r0, r0
    1c60:	21a40000 			; <UNDEFINED> instruction: 0x21a40000
    1c64:	21aa0800 			; <UNDEFINED> instruction: 0x21aa0800
    1c68:	00020800 	andeq	r0, r2, r0, lsl #16
    1c6c:	21aa9f30 			; <UNDEFINED> instruction: 0x21aa9f30
    1c70:	21b00800 	lslscs	r0, r0, #16
    1c74:	00020800 	andeq	r0, r2, r0, lsl #16
    1c78:	21b09f32 	lsrscs	r9, r2, pc
    1c7c:	21b40800 			; <UNDEFINED> instruction: 0x21b40800
    1c80:	00020800 	andeq	r0, r2, r0, lsl #16
    1c84:	21b49f33 			; <UNDEFINED> instruction: 0x21b49f33
    1c88:	21c20800 	biccs	r0, r2, r0, lsl #16
    1c8c:	00020800 	andeq	r0, r2, r0, lsl #16
    1c90:	00009f34 	andeq	r9, r0, r4, lsr pc
    1c94:	00000000 	andeq	r0, r0, r0
    1c98:	21dc0000 	bicscs	r0, ip, r0
    1c9c:	220a0800 	andcs	r0, sl, #0, 16
    1ca0:	00010800 	andeq	r0, r1, r0, lsl #16
    1ca4:	00220c52 	eoreq	r0, r2, r2, asr ip
    1ca8:	00221608 	eoreq	r1, r2, r8, lsl #12
    1cac:	52000108 	andpl	r0, r0, #8, 2
	...
    1cb8:	080021dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sp}
    1cbc:	080021e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sp}
    1cc0:	e4530001 	ldrb	r0, [r3], #-1
    1cc4:	ea080021 	b	201d50 <__Stack_Size+0x201550>
    1cc8:	03080021 	movweq	r0, #32801	; 0x8021
    1ccc:	9f7f7300 	svcls	0x007f7300
    1cd0:	080021ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, sp}
    1cd4:	080021ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sp}
    1cd8:	f0530001 			; <UNDEFINED> instruction: 0xf0530001
    1cdc:	fa080021 	blx	201d68 <__Stack_Size+0x201568>
    1ce0:	01080021 	tsteq	r8, r1, lsr #32
    1ce4:	21fa5300 	mvnscs	r5, r0, lsl #6
    1ce8:	22000800 	andcs	r0, r0, #0, 16
    1cec:	00030800 	andeq	r0, r3, r0, lsl #16
    1cf0:	009f7f73 	addseq	r7, pc, r3, ror pc	; <UNPREDICTABLE>
    1cf4:	06080022 	streq	r0, [r8], -r2, lsr #32
    1cf8:	01080022 	tsteq	r8, r2, lsr #32
    1cfc:	00005300 	andeq	r5, r0, r0, lsl #6
    1d00:	00000000 	andeq	r0, r0, r0
    1d04:	22140000 	andscs	r0, r4, #0
    1d08:	22160800 	andscs	r0, r6, #0, 16
    1d0c:	00050800 	andeq	r0, r5, r0, lsl #16
    1d10:	253f0072 	ldrcs	r0, [pc, #-114]!	; 1ca6 <__Stack_Size+0x14a6>
    1d14:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1d18:	00000000 	andeq	r0, r0, r0
    1d1c:	00221400 	eoreq	r1, r2, r0, lsl #8
    1d20:	00222c08 	eoreq	r2, r2, r8, lsl #24
    1d24:	5d000108 	stfpls	f0, [r0, #-32]	; 0xffffffe0
    1d28:	0800222c 	stmdaeq	r0, {r2, r3, r5, r9, sp}
    1d2c:	08002232 	stmdaeq	r0, {r1, r4, r5, r9, sp}
    1d30:	58910003 	ldmpl	r1, {r0, r1}
    1d34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1d38:	00000000 	andeq	r0, r0, r0
    1d3c:	00221600 	eoreq	r1, r2, r0, lsl #12
    1d40:	00223008 	eoreq	r3, r2, r8
    1d44:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    1d50:	08002234 	stmdaeq	r0, {r2, r4, r5, r9, sp}
    1d54:	0800227e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sp}
    1d58:	7e500001 	cdpvc	0, 5, cr0, cr0, cr1, {0}
    1d5c:	b8080022 	stmdalt	r8, {r1, r5}
    1d60:	04080022 	streq	r0, [r8], #-34	; 0x22
    1d64:	5001f300 	andpl	pc, r1, r0, lsl #6
    1d68:	0022b89f 	mlaeq	r2, pc, r8, fp	; <UNPREDICTABLE>
    1d6c:	0022ce08 	eoreq	ip, r2, r8, lsl #28
    1d70:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    1d7c:	08002234 	stmdaeq	r0, {r2, r4, r5, r9, sp}
    1d80:	08002280 	stmdaeq	r0, {r7, r9, sp}
    1d84:	80510001 	subshi	r0, r1, r1
    1d88:	b8080022 	stmdalt	r8, {r1, r5}
    1d8c:	04080022 	streq	r0, [r8], #-34	; 0x22
    1d90:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1d94:	0022b89f 	mlaeq	r2, pc, r8, fp	; <UNPREDICTABLE>
    1d98:	0022ce08 	eoreq	ip, r2, r8, lsl #28
    1d9c:	51000108 	tstpl	r0, r8, lsl #2
	...
    1da8:	08002234 	stmdaeq	r0, {r2, r4, r5, r9, sp}
    1dac:	0800223e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sp}
    1db0:	9f300002 	svcls	0x00300002
    1db4:	080022a4 	stmdaeq	r0, {r2, r5, r7, r9, sp}
    1db8:	080022a8 	stmdaeq	r0, {r3, r5, r7, r9, sp}
    1dbc:	a8520001 	ldmdage	r2, {r0}^
    1dc0:	ac080022 	stcge	0, cr0, [r8], {34}	; 0x22
    1dc4:	08080022 	stmdaeq	r8, {r1, r5}
    1dc8:	31007200 	mrscc	r7, R8_usr
    1dcc:	21007225 	tstcs	r0, r5, lsr #4
    1dd0:	0022b89f 	mlaeq	r2, pc, r8, fp	; <UNPREDICTABLE>
    1dd4:	0022bc08 	eoreq	fp, r2, r8, lsl #24
    1dd8:	30000208 	andcc	r0, r0, r8, lsl #4
    1ddc:	0022bc9f 	mlaeq	r2, pc, ip, fp	; <UNPREDICTABLE>
    1de0:	0022ce08 	eoreq	ip, r2, r8, lsl #28
    1de4:	52000108 	andpl	r0, r0, #8, 2
	...
    1df0:	08002234 	stmdaeq	r0, {r2, r4, r5, r9, sp}
    1df4:	0800223e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sp}
    1df8:	9f300002 	svcls	0x00300002
    1dfc:	080022b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sp}
    1e00:	080022bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sp}
    1e04:	9f300002 	svcls	0x00300002
    1e08:	080022bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sp}
    1e0c:	080022c2 	stmdaeq	r0, {r1, r6, r7, r9, sp}
    1e10:	c2530001 	subsgt	r0, r3, #1
    1e14:	ca080022 	bgt	201ea4 <__Stack_Size+0x2016a4>
    1e18:	03080022 	movweq	r0, #32802	; 0x8022
    1e1c:	9f7f7300 	svcls	0x007f7300
    1e20:	080022ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sp}
    1e24:	080022ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sp}
    1e28:	00530001 	subseq	r0, r3, r1
    1e2c:	00000000 	andeq	r0, r0, r0
    1e30:	d0000000 	andle	r0, r0, r0
    1e34:	6c080022 	stcvs	0, cr0, [r8], {34}	; 0x22
    1e38:	01080023 	tsteq	r8, r3, lsr #32
    1e3c:	236c5100 	cmncs	ip, #0, 2
    1e40:	237a0800 	cmncs	sl, #0, 16
    1e44:	00040800 	andeq	r0, r4, r0, lsl #16
    1e48:	9f5101f3 	svcls	0x005101f3
    1e4c:	0800237a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sp}
    1e50:	08002392 	stmdaeq	r0, {r1, r4, r7, r8, r9, sp}
    1e54:	00510001 	subseq	r0, r1, r1
    1e58:	00000000 	andeq	r0, r0, r0
    1e5c:	d0000000 	andle	r0, r0, r0
    1e60:	6e080022 	cdpvs	0, 0, cr0, cr8, cr2, {1}
    1e64:	01080023 	tsteq	r8, r3, lsr #32
    1e68:	236e5200 	cmncs	lr, #0, 4
    1e6c:	237a0800 	cmncs	sl, #0, 16
    1e70:	00040800 	andeq	r0, r4, r0, lsl #16
    1e74:	9f5201f3 	svcls	0x005201f3
    1e78:	0800237a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sp}
    1e7c:	08002392 	stmdaeq	r0, {r1, r4, r7, r8, r9, sp}
    1e80:	00520001 	subseq	r0, r2, r1
    1e84:	00000000 	andeq	r0, r0, r0
    1e88:	d0000000 	andle	r0, r0, r0
    1e8c:	f4080022 	vst4.8	{d0-d3}, [r8 :128], r2
    1e90:	01080022 	tsteq	r8, r2, lsr #32
    1e94:	22f45300 	rscscs	r5, r4, #0, 6
    1e98:	23920800 	orrscs	r0, r2, #0, 16
    1e9c:	00040800 	andeq	r0, r4, r0, lsl #16
    1ea0:	9f5301f3 	svcls	0x005301f3
	...
    1eac:	080022f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sp}
    1eb0:	080022fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sp}
    1eb4:	fe530001 	cdp2	0, 5, cr0, cr3, cr1, {0}
    1eb8:	70080022 	andvc	r0, r8, r2, lsr #32
    1ebc:	01080023 	tsteq	r8, r3, lsr #32
    1ec0:	237a5600 	cmncs	sl, #0, 12
    1ec4:	23900800 	orrscs	r0, r0, #0, 16
    1ec8:	00010800 	andeq	r0, r1, r0, lsl #16
    1ecc:	00000056 	andeq	r0, r0, r6, asr r0
    1ed0:	00000000 	andeq	r0, r0, r0
    1ed4:	0022f800 	eoreq	pc, r2, r0, lsl #16
    1ed8:	00231a08 	eoreq	r1, r3, r8, lsl #20
    1edc:	30000208 	andcc	r0, r0, r8, lsl #4
    1ee0:	00237a9f 	mlaeq	r3, pc, sl, r7	; <UNPREDICTABLE>
    1ee4:	00237c08 	eoreq	r7, r3, r8, lsl #24
    1ee8:	30000208 	andcc	r0, r0, r8, lsl #4
    1eec:	00237c9f 	mlaeq	r3, pc, ip, r7	; <UNPREDICTABLE>
    1ef0:	00239208 	eoreq	r9, r3, r8, lsl #4
    1ef4:	53000108 	movwpl	r0, #264	; 0x108
	...
    1f00:	08002394 	stmdaeq	r0, {r2, r4, r7, r8, r9, sp}
    1f04:	080023c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sp}
    1f08:	c4510001 	ldrbgt	r0, [r1], #-1
    1f0c:	da080023 	ble	201fa0 <__Stack_Size+0x2017a0>
    1f10:	04080023 	streq	r0, [r8], #-35	; 0x23
    1f14:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1f18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f1c:	00000000 	andeq	r0, r0, r0
    1f20:	00239400 	eoreq	r9, r3, r0, lsl #8
    1f24:	0023b608 	eoreq	fp, r3, r8, lsl #12
    1f28:	52000108 	andpl	r0, r0, #8, 2
    1f2c:	080023b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sp}
    1f30:	080023da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sp}
    1f34:	01f30004 	mvnseq	r0, r4
    1f38:	00009f52 	andeq	r9, r0, r2, asr pc
    1f3c:	00000000 	andeq	r0, r0, r0
    1f40:	23940000 	orrscs	r0, r4, #0
    1f44:	239a0800 	orrscs	r0, sl, #0, 16
    1f48:	00020800 	andeq	r0, r2, r0, lsl #16
    1f4c:	239a9f30 	orrscs	r9, sl, #48, 30	; 0xc0
    1f50:	23a40800 			; <UNDEFINED> instruction: 0x23a40800
    1f54:	00050800 	andeq	r0, r5, r0, lsl #16
    1f58:	25380074 	ldrcs	r0, [r8, #-116]!	; 0x74
    1f5c:	0023a49f 	mlaeq	r3, pc, r4, sl	; <UNPREDICTABLE>
    1f60:	0023b008 	eoreq	fp, r3, r8
    1f64:	54000108 	strpl	r0, [r0], #-264	; 0x108
    1f68:	080023c2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sp}
    1f6c:	080023c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sp}
    1f70:	ca520001 	bgt	1481f7c <__Stack_Size+0x148177c>
    1f74:	da080023 	ble	202008 <__Stack_Size+0x201808>
    1f78:	01080023 	tsteq	r8, r3, lsr #32
    1f7c:	00005200 	andeq	r5, r0, r0, lsl #4
    1f80:	00000000 	andeq	r0, r0, r0
    1f84:	23940000 	orrscs	r0, r4, #0
    1f88:	239a0800 	orrscs	r0, sl, #0, 16
    1f8c:	00020800 	andeq	r0, r2, r0, lsl #16
    1f90:	239a9f30 	orrscs	r9, sl, #48, 30	; 0xc0
    1f94:	23b20800 			; <UNDEFINED> instruction: 0x23b20800
    1f98:	00010800 	andeq	r0, r1, r0, lsl #16
    1f9c:	0023c253 	eoreq	ip, r3, r3, asr r2
    1fa0:	0023c408 	eoreq	ip, r3, r8, lsl #8
    1fa4:	30000208 	andcc	r0, r0, r8, lsl #4
    1fa8:	0023c49f 	mlaeq	r3, pc, r4, ip	; <UNPREDICTABLE>
    1fac:	0023ce08 	eoreq	ip, r3, r8, lsl #28
    1fb0:	53000108 	movwpl	r0, #264	; 0x108
    1fb4:	080023ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, sp}
    1fb8:	080023d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sp}
    1fbc:	7f730003 	svcvc	0x00730003
    1fc0:	0023d49f 	mlaeq	r3, pc, r4, sp	; <UNPREDICTABLE>
    1fc4:	0023da08 	eoreq	sp, r3, r8, lsl #20
    1fc8:	53000108 	movwpl	r0, #264	; 0x108
	...
    1fd4:	080023dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sp}
    1fd8:	080023fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sp}
    1fdc:	fc510001 	mrrc2	0, 0, r0, r1, cr1
    1fe0:	28080023 	stmdacs	r8, {r0, r1, r5}
    1fe4:	04080024 	streq	r0, [r8], #-36	; 0x24
    1fe8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1fec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1ff0:	00000000 	andeq	r0, r0, r0
    1ff4:	0023dc00 	eoreq	sp, r3, r0, lsl #24
    1ff8:	0023fe08 	eoreq	pc, r3, r8, lsl #28
    1ffc:	52000108 	andpl	r0, r0, #8, 2
    2000:	080023fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sp}
    2004:	08002428 	stmdaeq	r0, {r3, r5, sl, sp}
    2008:	01f30004 	mvnseq	r0, r4
    200c:	00009f52 	andeq	r9, r0, r2, asr pc
    2010:	00000000 	andeq	r0, r0, r0
    2014:	23dc0000 	bicscs	r0, ip, #0
    2018:	23e20800 	mvncs	r0, #0, 16
    201c:	00030800 	andeq	r0, r3, r0, lsl #16
    2020:	e29fda08 	adds	sp, pc, #8, 20	; 0x8000
    2024:	0e080023 	cdpeq	0, 0, cr0, cr8, cr3, {1}
    2028:	01080024 	tsteq	r8, r4, lsr #32
    202c:	24145400 	ldrcs	r5, [r4], #-1024	; 0x400
    2030:	24280800 	strtcs	r0, [r8], #-2048	; 0x800
    2034:	00010800 	andeq	r0, r1, r0, lsl #16
    2038:	00000052 	andeq	r0, r0, r2, asr r0
    203c:	00000000 	andeq	r0, r0, r0
    2040:	0023dc00 	eoreq	sp, r3, r0, lsl #24
    2044:	0023e208 	eoreq	lr, r3, r8, lsl #4
    2048:	30000208 	andcc	r0, r0, r8, lsl #4
    204c:	0023e29f 	mlaeq	r3, pc, r2, lr	; <UNPREDICTABLE>
    2050:	0023f208 	eoreq	pc, r3, r8, lsl #4
    2054:	53000108 	movwpl	r0, #264	; 0x108
    2058:	080023f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sp}
    205c:	080023f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sp}
    2060:	7f730003 	svcvc	0x00730003
    2064:	0023f89f 	mlaeq	r3, pc, r8, pc	; <UNPREDICTABLE>
    2068:	00240008 	eoreq	r0, r4, r8
    206c:	53000108 	movwpl	r0, #264	; 0x108
    2070:	08002414 	stmdaeq	r0, {r2, r4, sl, sp}
    2074:	0800241c 	stmdaeq	r0, {r2, r3, r4, sl, sp}
    2078:	1c530001 	mrrcne	0, 0, r0, r3, cr1
    207c:	22080024 	andcs	r0, r8, #36	; 0x24
    2080:	03080024 	movweq	r0, #32804	; 0x8024
    2084:	9f7f7300 	svcls	0x007f7300
    2088:	08002422 	stmdaeq	r0, {r1, r5, sl, sp}
    208c:	08002428 	stmdaeq	r0, {r3, r5, sl, sp}
    2090:	00530001 	subseq	r0, r3, r1
    2094:	00000000 	andeq	r0, r0, r0
    2098:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    209c:	44080024 	strmi	r0, [r8], #-36	; 0x24
    20a0:	01080024 	tsteq	r8, r4, lsr #32
    20a4:	24445100 	strbcs	r5, [r4], #-256	; 0x100
    20a8:	246e0800 	strbtcs	r0, [lr], #-2048	; 0x800
    20ac:	00040800 	andeq	r0, r4, r0, lsl #16
    20b0:	9f5101f3 	svcls	0x005101f3
	...
    20bc:	08002428 	stmdaeq	r0, {r3, r5, sl, sp}
    20c0:	0800242e 	stmdaeq	r0, {r1, r2, r3, r5, sl, sp}
    20c4:	da080003 	ble	2020d8 <__Stack_Size+0x2018d8>
    20c8:	00242e9f 	mlaeq	r4, pc, lr, r2	; <UNPREDICTABLE>
    20cc:	00245208 	eoreq	r5, r4, r8, lsl #4
    20d0:	52000108 	andpl	r0, r0, #8, 2
    20d4:	08002458 	stmdaeq	r0, {r3, r4, r6, sl, sp}
    20d8:	0800246e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, sp}
    20dc:	00520001 	subseq	r0, r2, r1
    20e0:	00000000 	andeq	r0, r0, r0
    20e4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    20e8:	2e080024 	cdpcs	0, 0, cr0, cr8, cr4, {1}
    20ec:	02080024 	andeq	r0, r8, #36	; 0x24
    20f0:	2e9f3000 	cdpcs	0, 9, cr3, cr15, cr0, {0}
    20f4:	3a080024 	bcc	20218c <__Stack_Size+0x20198c>
    20f8:	01080024 	tsteq	r8, r4, lsr #32
    20fc:	243a5300 	ldrtcs	r5, [sl], #-768	; 0x300
    2100:	24400800 	strbcs	r0, [r0], #-2048	; 0x800
    2104:	00030800 	andeq	r0, r3, r0, lsl #16
    2108:	409f7f73 	addsmi	r7, pc, r3, ror pc	; <UNPREDICTABLE>
    210c:	46080024 	strmi	r0, [r8], -r4, lsr #32
    2110:	01080024 	tsteq	r8, r4, lsr #32
    2114:	24585300 	ldrbcs	r5, [r8], #-768	; 0x300
    2118:	24600800 	strbtcs	r0, [r0], #-2048	; 0x800
    211c:	00010800 	andeq	r0, r1, r0, lsl #16
    2120:	00246053 	eoreq	r6, r4, r3, asr r0
    2124:	00246608 	eoreq	r6, r4, r8, lsl #12
    2128:	73000308 	movwvc	r0, #776	; 0x308
    212c:	24669f7f 	strbtcs	r9, [r6], #-3967	; 0xf7f
    2130:	246e0800 	strbtcs	r0, [lr], #-2048	; 0x800
    2134:	00010800 	andeq	r0, r1, r0, lsl #16
    2138:	00000053 	andeq	r0, r0, r3, asr r0
    213c:	00000000 	andeq	r0, r0, r0
    2140:	00247000 	eoreq	r7, r4, r0
    2144:	0024d008 	eoreq	sp, r4, r8
    2148:	51000108 	tstpl	r0, r8, lsl #2
    214c:	080024d0 	stmdaeq	r0, {r4, r6, r7, sl, sp}
    2150:	080024f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, sp}
    2154:	01f30004 	mvnseq	r0, r4
    2158:	00009f51 	andeq	r9, r0, r1, asr pc
    215c:	00000000 	andeq	r0, r0, r0
    2160:	24700000 	ldrbtcs	r0, [r0], #-0
    2164:	24d60800 	ldrbcs	r0, [r6], #2048	; 0x800
    2168:	00010800 	andeq	r0, r1, r0, lsl #16
    216c:	0024d652 	eoreq	sp, r4, r2, asr r6
    2170:	0024f808 	eoreq	pc, r4, r8, lsl #16
    2174:	f3000408 	vshl.u8	d0, d8, d0
    2178:	009f5201 	addseq	r5, pc, r1, lsl #4
    217c:	00000000 	andeq	r0, r0, r0
    2180:	70000000 	andvc	r0, r0, r0
    2184:	7e080024 	cdpvc	0, 0, cr0, cr8, cr4, {1}
    2188:	02080024 	andeq	r0, r8, #36	; 0x24
    218c:	7e9f3000 	cdpvc	0, 9, cr3, cr15, cr0, {0}
    2190:	d2080024 	andle	r0, r8, #36	; 0x24
    2194:	01080024 	tsteq	r8, r4, lsr #32
    2198:	24de5300 	ldrbcs	r5, [lr], #768	; 0x300
    219c:	24f80800 	ldrbtcs	r0, [r8], #2048	; 0x800
    21a0:	00010800 	andeq	r0, r1, r0, lsl #16
    21a4:	00000052 	andeq	r0, r0, r2, asr r0
    21a8:	00000000 	andeq	r0, r0, r0
    21ac:	00247000 	eoreq	r7, r4, r0
    21b0:	00247e08 	eoreq	r7, r4, r8, lsl #28
    21b4:	30000208 	andcc	r0, r0, r8, lsl #4
    21b8:	00247e9f 	mlaeq	r4, pc, lr, r7	; <UNPREDICTABLE>
    21bc:	0024de08 	eoreq	sp, r4, r8, lsl #28
    21c0:	58000108 	stmdapl	r0, {r3, r8}
    21c4:	080024de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, sp}
    21c8:	080024e2 	stmdaeq	r0, {r1, r5, r6, r7, sl, sp}
    21cc:	9f300002 	svcls	0x00300002
    21d0:	080024e2 	stmdaeq	r0, {r1, r5, r6, r7, sl, sp}
    21d4:	080024ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, sp}
    21d8:	ea530001 	b	14c21e4 <__Stack_Size+0x14c19e4>
    21dc:	f0080024 			; <UNDEFINED> instruction: 0xf0080024
    21e0:	03080024 	movweq	r0, #32804	; 0x8024
    21e4:	9f7f7300 	svcls	0x007f7300
    21e8:	080024f0 	stmdaeq	r0, {r4, r5, r6, r7, sl, sp}
    21ec:	080024f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, sp}
    21f0:	00530001 	subseq	r0, r3, r1
    21f4:	00000000 	andeq	r0, r0, r0
    21f8:	80000000 	andhi	r0, r0, r0
    21fc:	86080024 	strhi	r0, [r8], -r4, lsr #32
    2200:	02080024 	andeq	r0, r8, #36	; 0x24
    2204:	869f3000 	ldrhi	r3, [pc], r0
    2208:	8e080024 	cdphi	0, 0, cr0, cr8, cr4, {1}
    220c:	01080024 	tsteq	r8, r4, lsr #32
    2210:	248e5400 	strcs	r5, [lr], #1024	; 0x400
    2214:	24940800 	ldrcs	r0, [r4], #2048	; 0x800
    2218:	00030800 	andeq	r0, r3, r0, lsl #16
    221c:	949f7f74 	ldrls	r7, [pc], #3956	; 2224 <__Stack_Size+0x1a24>
    2220:	b8080024 	stmdalt	r8, {r2, r5}
    2224:	01080024 	tsteq	r8, r4, lsr #32
    2228:	24b85400 	ldrtcs	r5, [r8], #1024	; 0x400
    222c:	24be0800 	ldrtcs	r0, [lr], #2048	; 0x800
    2230:	00030800 	andeq	r0, r3, r0, lsl #16
    2234:	be9f7f74 	mrclt	15, 4, r7, cr15, cr4, {3}
    2238:	f6080024 			; <UNDEFINED> instruction: 0xf6080024
    223c:	01080024 	tsteq	r8, r4, lsr #32
    2240:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    2250:	00010000 	andeq	r0, r1, r0
    2254:	00000050 	andeq	r0, r0, r0, asr r0
    2258:	00000000 	andeq	r0, r0, r0
    225c:	58000100 	stmdapl	r0, {r8}
	...
    2268:	01f30004 	mvnseq	r0, r4
    226c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    227c:	00010000 	andeq	r0, r1, r0
    2280:	00000051 	andeq	r0, r0, r1, asr r0
    2284:	00000000 	andeq	r0, r0, r0
    2288:	f3000400 	vshl.u8	d0, d0, d0
    228c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    229c:	01000000 	mrseq	r0, (UNDEF: 0)
    22a0:	00005200 	andeq	r5, r0, r0, lsl #4
    22a4:	00000000 	andeq	r0, r0, r0
    22a8:	00040000 	andeq	r0, r4, r0
    22ac:	9f5201f3 	svcls	0x005201f3
	...
    22c0:	00520001 	subseq	r0, r2, r1
    22c4:	00000000 	andeq	r0, r0, r0
    22c8:	04000000 	streq	r0, [r0], #-0
    22cc:	5201f300 	andpl	pc, r1, #0, 6
    22d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    22e0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    22ec:	01f30004 	mvnseq	r0, r4
    22f0:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    2300:	00010000 	andeq	r0, r1, r0
    2304:	0000005d 	andeq	r0, r0, sp, asr r0
    2308:	00000000 	andeq	r0, r0, r0
    230c:	74000300 	strvc	r0, [r0], #-768	; 0x300
    2310:	00009f60 	andeq	r9, r0, r0, ror #30
    2314:	00000000 	andeq	r0, r0, r0
    2318:	00030000 	andeq	r0, r3, r0
    231c:	009f487d 	addseq	r4, pc, sp, ror r8	; <UNPREDICTABLE>
	...
    232c:	02000000 	andeq	r0, r0, #0
    2330:	009f3000 	addseq	r3, pc, r0
    2334:	00000000 	andeq	r0, r0, r0
    2338:	01000000 	mrseq	r0, (UNDEF: 0)
    233c:	00005300 	andeq	r5, r0, r0, lsl #6
    2340:	00000000 	andeq	r0, r0, r0
    2344:	00010000 	andeq	r0, r1, r0
    2348:	00000052 	andeq	r0, r0, r2, asr r0
	...
    2358:	30000200 	andcc	r0, r0, r0, lsl #4
    235c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2360:	00000000 	andeq	r0, r0, r0
    2364:	59000100 	stmdbpl	r0, {r8}
	...
    2370:	9f300002 	svcls	0x00300002
	...
    237c:	00730008 	rsbseq	r0, r3, r8
    2380:	231c0091 	tstcs	ip, #145	; 0x91
    2384:	00009f38 	andeq	r9, r0, r8, lsr pc
    2388:	00000000 	andeq	r0, r0, r0
    238c:	00080000 	andeq	r0, r8, r0
    2390:	00910073 	addseq	r0, r1, r3, ror r0
    2394:	9f37231c 	svcls	0x0037231c
	...
    23a0:	00730008 	rsbseq	r0, r3, r8
    23a4:	231c0091 	tstcs	ip, #145	; 0x91
    23a8:	00009f38 	andeq	r9, r0, r8, lsr pc
	...
    23b8:	00020000 	andeq	r0, r2, r0
    23bc:	00009f30 	andeq	r9, r0, r0, lsr pc
    23c0:	00000000 	andeq	r0, r0, r0
    23c4:	00010000 	andeq	r0, r1, r0
    23c8:	00000054 	andeq	r0, r0, r4, asr r0
    23cc:	00000000 	andeq	r0, r0, r0
    23d0:	74000300 	strvc	r0, [r0], #-768	; 0x300
    23d4:	00009f7f 	andeq	r9, r0, pc, ror pc
    23d8:	00000000 	andeq	r0, r0, r0
    23dc:	00010000 	andeq	r0, r1, r0
    23e0:	00000054 	andeq	r0, r0, r4, asr r0
    23e4:	00000000 	andeq	r0, r0, r0
    23e8:	74000300 	strvc	r0, [r0], #-768	; 0x300
    23ec:	00009f7f 	andeq	r9, r0, pc, ror pc
    23f0:	00000000 	andeq	r0, r0, r0
    23f4:	00010000 	andeq	r0, r1, r0
    23f8:	00000054 	andeq	r0, r0, r4, asr r0
	...
    2408:	5d000100 	stfpls	f0, [r0, #-0]
	...
    2414:	60740003 	rsbsvs	r0, r4, r3
    2418:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    241c:	00000000 	andeq	r0, r0, r0
    2420:	7d000300 	stcvc	3, cr0, [r0, #-0]
    2424:	00009f48 	andeq	r9, r0, r8, asr #30
	...
    2434:	00010000 	andeq	r0, r1, r0
    2438:	00000058 	andeq	r0, r0, r8, asr r0
    243c:	00000000 	andeq	r0, r0, r0
    2440:	f3000400 	vshl.u8	d0, d0, d0
    2444:	009f5001 	addseq	r5, pc, r1
	...
    2454:	01000000 	mrseq	r0, (UNDEF: 0)
    2458:	00005200 	andeq	r5, r0, r0, lsl #4
    245c:	00000000 	andeq	r0, r0, r0
    2460:	00040000 	andeq	r0, r4, r0
    2464:	9f5201f3 	svcls	0x005201f3
	...
    2478:	9f300002 	svcls	0x00300002
	...
    2484:	00740005 	rsbseq	r0, r4, r5
    2488:	009f2538 	addseq	r2, pc, r8, lsr r5	; <UNPREDICTABLE>
    248c:	00000000 	andeq	r0, r0, r0
    2490:	01000000 	mrseq	r0, (UNDEF: 0)
    2494:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    24a4:	00020000 	andeq	r0, r2, r0
    24a8:	00009f30 	andeq	r9, r0, r0, lsr pc
    24ac:	00000000 	andeq	r0, r0, r0
    24b0:	00010000 	andeq	r0, r1, r0
    24b4:	00000053 	andeq	r0, r0, r3, asr r0
    24b8:	00000000 	andeq	r0, r0, r0
    24bc:	30000200 	andcc	r0, r0, r0, lsl #4
    24c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    24c4:	00000000 	andeq	r0, r0, r0
    24c8:	53000100 	movwpl	r0, #256	; 0x100
	...
    24d4:	7f730003 	svcvc	0x00730003
    24d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    24dc:	00000000 	andeq	r0, r0, r0
    24e0:	53000100 	movwpl	r0, #256	; 0x100
	...
    24ec:	080024f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, sp}
    24f0:	08002ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp, sp}
    24f4:	b8510001 	ldmdalt	r1, {r0}^
    24f8:	e208002a 	and	r0, r8, #42	; 0x2a
    24fc:	0408002a 	streq	r0, [r8], #-42	; 0x2a
    2500:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2504:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2508:	00000000 	andeq	r0, r0, r0
    250c:	00250000 	eoreq	r0, r5, r0
    2510:	002ab808 	eoreq	fp, sl, r8, lsl #16
    2514:	51000108 	tstpl	r0, r8, lsl #2
    2518:	08002ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp, sp}
    251c:	08002ae2 	stmdaeq	r0, {r1, r5, r6, r7, r9, fp, sp}
    2520:	01f30004 	mvnseq	r0, r4
    2524:	00009f51 	andeq	r9, r0, r1, asr pc
    2528:	00000000 	andeq	r0, r0, r0
    252c:	25000000 	strcs	r0, [r0, #-0]
    2530:	2adc0800 	bcs	ff704538 <BootRAM+0xe674cd9>
    2534:	00010800 	andeq	r0, r1, r0, lsl #16
    2538:	002adc5d 	eoreq	sp, sl, sp, asr ip
    253c:	002ae008 	eoreq	lr, sl, r8
    2540:	91000308 	tstls	r0, r8, lsl #6
    2544:	2ae09f40 	bcs	ff82a24c <BootRAM+0xe79a9ed>
    2548:	2ae20800 	bcs	ff884550 <BootRAM+0xe7f4cf1>
    254c:	00030800 	andeq	r0, r3, r0, lsl #16
    2550:	009f407d 	addseq	r4, pc, sp, ror r0	; <UNPREDICTABLE>
	...
    255c:	06080025 	streq	r0, [r8], -r5, lsr #32
    2560:	02080025 	andeq	r0, r8, #37	; 0x25
    2564:	069f3000 	ldreq	r3, [pc], r0
    2568:	54080025 	strpl	r0, [r8], #-37	; 0x25
    256c:	01080025 	tsteq	r8, r5, lsr #32
    2570:	25605300 	strbcs	r5, [r0, #-768]!	; 0x300
    2574:	257e0800 	ldrbcs	r0, [lr, #-2048]!	; 0x800
    2578:	00010800 	andeq	r0, r1, r0, lsl #16
    257c:	00000052 	andeq	r0, r0, r2, asr r0
    2580:	00000000 	andeq	r0, r0, r0
    2584:	00250000 	eoreq	r0, r5, r0
    2588:	00250608 	eoreq	r0, r5, r8, lsl #12
    258c:	30000208 	andcc	r0, r0, r8, lsl #4
    2590:	0025069f 	mlaeq	r5, pc, r6, r0	; <UNPREDICTABLE>
    2594:	00256008 	eoreq	r6, r5, r8
    2598:	56000108 	strpl	r0, [r0], -r8, lsl #2
    259c:	08002560 	stmdaeq	r0, {r5, r6, r8, sl, sp}
    25a0:	08002568 	stmdaeq	r0, {r3, r5, r6, r8, sl, sp}
    25a4:	9f300002 	svcls	0x00300002
    25a8:	08002568 	stmdaeq	r0, {r3, r5, r6, r8, sl, sp}
    25ac:	08002570 	stmdaeq	r0, {r4, r5, r6, r8, sl, sp}
    25b0:	00730008 	rsbseq	r0, r3, r8
    25b4:	231c0091 	tstcs	ip, #145	; 0x91
    25b8:	25709f40 	ldrbcs	r9, [r0, #-3904]!	; 0xf40
    25bc:	25760800 	ldrbcs	r0, [r6, #-2048]!	; 0x800
    25c0:	00080800 	andeq	r0, r8, r0, lsl #16
    25c4:	00910073 	addseq	r0, r1, r3, ror r0
    25c8:	9f3f231c 	svcls	0x003f231c
    25cc:	08002576 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, sp}
    25d0:	08002580 	stmdaeq	r0, {r7, r8, sl, sp}
    25d4:	00730008 	rsbseq	r0, r3, r8
    25d8:	231c0091 	tstcs	ip, #145	; 0x91
    25dc:	00009f40 	andeq	r9, r0, r0, asr #30
    25e0:	00000000 	andeq	r0, r0, r0
    25e4:	25080000 	strcs	r0, [r8, #-0]
    25e8:	250c0800 	strcs	r0, [ip, #-2048]	; 0x800
    25ec:	00020800 	andeq	r0, r2, r0, lsl #16
    25f0:	250c9f30 	strcs	r9, [ip, #-3888]	; 0xf30
    25f4:	25140800 	ldrcs	r0, [r4, #-2048]	; 0x800
    25f8:	00010800 	andeq	r0, r1, r0, lsl #16
    25fc:	00251452 	eoreq	r1, r5, r2, asr r4
    2600:	00251a08 	eoreq	r1, r5, r8, lsl #20
    2604:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    2608:	251a9f7f 	ldrcs	r9, [sl, #-3967]	; 0xf7f
    260c:	253c0800 	ldrcs	r0, [ip, #-2048]!	; 0x800
    2610:	00010800 	andeq	r0, r1, r0, lsl #16
    2614:	00253c52 	eoreq	r3, r5, r2, asr ip
    2618:	00254208 	eoreq	r4, r5, r8, lsl #4
    261c:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    2620:	25429f7f 	strbcs	r9, [r2, #-3967]	; 0xf7f
    2624:	25580800 	ldrbcs	r0, [r8, #-2048]	; 0x800
    2628:	00010800 	andeq	r0, r1, r0, lsl #16
    262c:	00000052 	andeq	r0, r0, r2, asr r0
    2630:	00000000 	andeq	r0, r0, r0
    2634:	00258800 	eoreq	r8, r5, r0, lsl #16
    2638:	0025d208 	eoreq	sp, r5, r8, lsl #4
    263c:	53000108 	movwpl	r0, #264	; 0x108
    2640:	080025de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sl, sp}
    2644:	080025fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, sp}
    2648:	00520001 	subseq	r0, r2, r1
    264c:	00000000 	andeq	r0, r0, r0
    2650:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    2654:	de080025 	cdple	0, 0, cr0, cr8, cr5, {1}
    2658:	01080025 	tsteq	r8, r5, lsr #32
    265c:	25de5500 	ldrbcs	r5, [lr, #1280]	; 0x500
    2660:	25e20800 	strbcs	r0, [r2, #2048]!	; 0x800
    2664:	00020800 	andeq	r0, r2, r0, lsl #16
    2668:	25e29f30 	strbcs	r9, [r2, #3888]!	; 0xf30
    266c:	25ea0800 	strbcs	r0, [sl, #2048]!	; 0x800
    2670:	00010800 	andeq	r0, r1, r0, lsl #16
    2674:	0025ea53 	eoreq	lr, r5, r3, asr sl
    2678:	0025f008 	eoreq	pc, r5, r8
    267c:	73000308 	movwvc	r0, #776	; 0x308
    2680:	25f09f7f 	ldrbcs	r9, [r0, #3967]!	; 0xf7f
    2684:	25fc0800 	ldrbcs	r0, [ip, #2048]!	; 0x800
    2688:	00010800 	andeq	r0, r1, r0, lsl #16
    268c:	00000053 	andeq	r0, r0, r3, asr r0
    2690:	00000000 	andeq	r0, r0, r0
    2694:	00258a00 	eoreq	r8, r5, r0, lsl #20
    2698:	00258e08 	eoreq	r8, r5, r8, lsl #28
    269c:	30000208 	andcc	r0, r0, r8, lsl #4
    26a0:	00258e9f 	mlaeq	r5, pc, lr, r8	; <UNPREDICTABLE>
    26a4:	00259808 	eoreq	r9, r5, r8, lsl #16
    26a8:	52000108 	andpl	r0, r0, #8, 2
    26ac:	08002598 	stmdaeq	r0, {r3, r4, r7, r8, sl, sp}
    26b0:	0800259e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, sl, sp}
    26b4:	7f720003 	svcvc	0x00720003
    26b8:	00259e9f 	mlaeq	r5, pc, lr, r9	; <UNPREDICTABLE>
    26bc:	0025a408 	eoreq	sl, r5, r8, lsl #8
    26c0:	52000108 	andpl	r0, r0, #8, 2
    26c4:	080025a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, sp}
    26c8:	080025b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, sl, sp}
    26cc:	01720003 	cmneq	r2, r3
    26d0:	0025b29f 	mlaeq	r5, pc, r2, fp	; <UNPREDICTABLE>
    26d4:	0025ba08 	eoreq	fp, r5, r8, lsl #20
    26d8:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    26dc:	1c009100 	stfned	f1, [r0], {-0}
    26e0:	ba9f4123 	blt	fe7d2b74 <BootRAM+0xd743315>
    26e4:	c4080025 	strgt	r0, [r8], #-37	; 0x25
    26e8:	08080025 	stmdaeq	r8, {r0, r2, r5}
    26ec:	91007200 	mrsls	r7, R8_usr
    26f0:	40231c00 	eormi	r1, r3, r0, lsl #24
    26f4:	0025c49f 	mlaeq	r5, pc, r4, ip	; <UNPREDICTABLE>
    26f8:	0025c608 	eoreq	ip, r5, r8, lsl #12
    26fc:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2700:	1c009100 	stfned	f1, [r0], {-0}
    2704:	009f4123 	addseq	r4, pc, r3, lsr #2
    2708:	00000000 	andeq	r0, r0, r0
    270c:	fc000000 	stc2	0, cr0, [r0], {-0}
    2710:	02080025 	andeq	r0, r8, #37	; 0x25
    2714:	02080026 	andeq	r0, r8, #38	; 0x26
    2718:	029f3000 	addseq	r3, pc, #0
    271c:	5c080026 	stcpl	0, cr0, [r8], {38}	; 0x26
    2720:	01080026 	tsteq	r8, r6, lsr #32
    2724:	26685300 	strbtcs	r5, [r8], -r0, lsl #6
    2728:	26840800 	strcs	r0, [r4], r0, lsl #16
    272c:	00010800 	andeq	r0, r1, r0, lsl #16
    2730:	00000052 	andeq	r0, r0, r2, asr r0
    2734:	00000000 	andeq	r0, r0, r0
    2738:	0025fc00 	eoreq	pc, r5, r0, lsl #24
    273c:	00260208 	eoreq	r0, r6, r8, lsl #4
    2740:	30000208 	andcc	r0, r0, r8, lsl #4
    2744:	0026029f 	mlaeq	r6, pc, r2, r0	; <UNPREDICTABLE>
    2748:	00266808 	eoreq	r6, r6, r8, lsl #16
    274c:	59000108 	stmdbpl	r0, {r3, r8}
    2750:	08002668 	stmdaeq	r0, {r3, r5, r6, r9, sl, sp}
    2754:	0800266e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl, sp}
    2758:	9f300002 	svcls	0x00300002
    275c:	0800266e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl, sp}
    2760:	08002676 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, sl, sp}
    2764:	00730008 	rsbseq	r0, r3, r8
    2768:	231c0091 	tstcs	ip, #145	; 0x91
    276c:	26769f40 	ldrbtcs	r9, [r6], -r0, asr #30
    2770:	267c0800 	ldrbtcs	r0, [ip], -r0, lsl #16
    2774:	00080800 	andeq	r0, r8, r0, lsl #16
    2778:	00910073 	addseq	r0, r1, r3, ror r0
    277c:	9f3f231c 	svcls	0x003f231c
    2780:	0800267c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, sp}
    2784:	08002684 	stmdaeq	r0, {r2, r7, r9, sl, sp}
    2788:	00730008 	rsbseq	r0, r3, r8
    278c:	231c0091 	tstcs	ip, #145	; 0x91
    2790:	00009f40 	andeq	r9, r0, r0, asr #30
    2794:	00000000 	andeq	r0, r0, r0
    2798:	26040000 	strcs	r0, [r4], -r0
    279c:	260a0800 	strcs	r0, [sl], -r0, lsl #16
    27a0:	00020800 	andeq	r0, r2, r0, lsl #16
    27a4:	260a9f30 			; <UNDEFINED> instruction: 0x260a9f30
    27a8:	26140800 	ldrcs	r0, [r4], -r0, lsl #16
    27ac:	00010800 	andeq	r0, r1, r0, lsl #16
    27b0:	00261452 	eoreq	r1, r6, r2, asr r4
    27b4:	00261a08 	eoreq	r1, r6, r8, lsl #20
    27b8:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    27bc:	261a9f7f 	ssub16cs	r9, sl, pc	; <UNPREDICTABLE>
    27c0:	26400800 	strbcs	r0, [r0], -r0, lsl #16
    27c4:	00010800 	andeq	r0, r1, r0, lsl #16
    27c8:	00264052 	eoreq	r4, r6, r2, asr r0
    27cc:	00264608 	eoreq	r4, r6, r8, lsl #12
    27d0:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    27d4:	26469f7f 			; <UNDEFINED> instruction: 0x26469f7f
    27d8:	26600800 	strbtcs	r0, [r0], -r0, lsl #16
    27dc:	00010800 	andeq	r0, r1, r0, lsl #16
    27e0:	00000052 	andeq	r0, r0, r2, asr r0
    27e4:	00000000 	andeq	r0, r0, r0
    27e8:	00268400 	eoreq	r8, r6, r0, lsl #8
    27ec:	0026da08 	eoreq	sp, r6, r8, lsl #20
    27f0:	53000108 	movwpl	r0, #264	; 0x108
    27f4:	080026e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, sp}
    27f8:	08002708 	stmdaeq	r0, {r3, r8, r9, sl, sp}
    27fc:	00520001 	subseq	r0, r2, r1
    2800:	00000000 	andeq	r0, r0, r0
    2804:	84000000 	strhi	r0, [r0], #-0
    2808:	e6080026 	str	r0, [r8], -r6, lsr #32
    280c:	01080026 	tsteq	r8, r6, lsr #32
    2810:	26e65900 	strbtcs	r5, [r6], r0, lsl #18
    2814:	26ea0800 	strbtcs	r0, [sl], r0, lsl #16
    2818:	00020800 	andeq	r0, r2, r0, lsl #16
    281c:	26ea9f30 	usat16cs	r9, #10, r0
    2820:	26f20800 	ldrbtcs	r0, [r2], r0, lsl #16
    2824:	00010800 	andeq	r0, r1, r0, lsl #16
    2828:	0026f253 	eoreq	pc, r6, r3, asr r2	; <UNPREDICTABLE>
    282c:	0026f808 	eoreq	pc, r6, r8, lsl #16
    2830:	73000308 	movwvc	r0, #776	; 0x308
    2834:	26f89f7f 			; <UNDEFINED> instruction: 0x26f89f7f
    2838:	27040800 	strcs	r0, [r4, -r0, lsl #16]
    283c:	00010800 	andeq	r0, r1, r0, lsl #16
    2840:	00000053 	andeq	r0, r0, r3, asr r0
    2844:	00000000 	andeq	r0, r0, r0
    2848:	00268600 	eoreq	r8, r6, r0, lsl #12
    284c:	00268c08 	eoreq	r8, r6, r8, lsl #24
    2850:	30000208 	andcc	r0, r0, r8, lsl #4
    2854:	00268c9f 	mlaeq	r6, pc, ip, r8	; <UNPREDICTABLE>
    2858:	00269608 	eoreq	r9, r6, r8, lsl #12
    285c:	52000108 	andpl	r0, r0, #8, 2
    2860:	08002696 	stmdaeq	r0, {r1, r2, r4, r7, r9, sl, sp}
    2864:	0800269c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, sp}
    2868:	7f720003 	svcvc	0x00720003
    286c:	00269c9f 	mlaeq	r6, pc, ip, r9	; <UNPREDICTABLE>
    2870:	0026a208 	eoreq	sl, r6, r8, lsl #4
    2874:	52000108 	andpl	r0, r0, #8, 2
    2878:	080026a2 	stmdaeq	r0, {r1, r5, r7, r9, sl, sp}
    287c:	080026b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, sp}
    2880:	01720003 	cmneq	r2, r3
    2884:	0026b49f 	mlaeq	r6, pc, r4, fp	; <UNPREDICTABLE>
    2888:	0026bc08 	eoreq	fp, r6, r8, lsl #24
    288c:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2890:	1c009100 	stfned	f1, [r0], {-0}
    2894:	bc9f4123 	ldflts	f4, [pc], {35}	; 0x23
    2898:	c6080026 	strgt	r0, [r8], -r6, lsr #32
    289c:	08080026 	stmdaeq	r8, {r1, r2, r5}
    28a0:	91007200 	mrsls	r7, R8_usr
    28a4:	40231c00 	eormi	r1, r3, r0, lsl #24
    28a8:	0026c69f 	mlaeq	r6, pc, r6, ip	; <UNPREDICTABLE>
    28ac:	0026c808 	eoreq	ip, r6, r8, lsl #16
    28b0:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    28b4:	1c009100 	stfned	f1, [r0], {-0}
    28b8:	009f4123 	addseq	r4, pc, r3, lsr #2
    28bc:	00000000 	andeq	r0, r0, r0
    28c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    28c4:	5e080027 	cdppl	0, 0, cr0, cr8, cr7, {1}
    28c8:	01080027 	tsteq	r8, r7, lsr #32
    28cc:	276a5300 	strbcs	r5, [sl, -r0, lsl #6]!
    28d0:	27860800 	strcs	r0, [r6, r0, lsl #16]
    28d4:	00010800 	andeq	r0, r1, r0, lsl #16
    28d8:	00000052 	andeq	r0, r0, r2, asr r0
    28dc:	00000000 	andeq	r0, r0, r0
    28e0:	00270800 	eoreq	r0, r7, r0, lsl #16
    28e4:	00276a08 	eoreq	r6, r7, r8, lsl #20
    28e8:	5c000108 	stfpls	f0, [r0], {8}
    28ec:	0800276a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, sp}
    28f0:	08002770 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, sp}
    28f4:	9f300002 	svcls	0x00300002
    28f8:	08002770 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, sp}
    28fc:	08002778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, sp}
    2900:	00730008 	rsbseq	r0, r3, r8
    2904:	231c0091 	tstcs	ip, #145	; 0x91
    2908:	27789f40 	ldrbcs	r9, [r8, -r0, asr #30]!
    290c:	277e0800 	ldrbcs	r0, [lr, -r0, lsl #16]!
    2910:	00080800 	andeq	r0, r8, r0, lsl #16
    2914:	00910073 	addseq	r0, r1, r3, ror r0
    2918:	9f3f231c 	svcls	0x003f231c
    291c:	0800277e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, sl, sp}
    2920:	08002788 	stmdaeq	r0, {r3, r7, r8, r9, sl, sp}
    2924:	00730008 	rsbseq	r0, r3, r8
    2928:	231c0091 	tstcs	ip, #145	; 0x91
    292c:	00009f40 	andeq	r9, r0, r0, asr #30
    2930:	00000000 	andeq	r0, r0, r0
    2934:	270a0000 	strcs	r0, [sl, -r0]
    2938:	27100800 	ldrcs	r0, [r0, -r0, lsl #16]
    293c:	00020800 	andeq	r0, r2, r0, lsl #16
    2940:	27109f30 			; <UNDEFINED> instruction: 0x27109f30
    2944:	27180800 	ldrcs	r0, [r8, -r0, lsl #16]
    2948:	00010800 	andeq	r0, r1, r0, lsl #16
    294c:	00271852 	eoreq	r1, r7, r2, asr r8
    2950:	00271e08 	eoreq	r1, r7, r8, lsl #28
    2954:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    2958:	271e9f7f 			; <UNDEFINED> instruction: 0x271e9f7f
    295c:	27420800 	strbcs	r0, [r2, -r0, lsl #16]
    2960:	00010800 	andeq	r0, r1, r0, lsl #16
    2964:	00274252 	eoreq	r4, r7, r2, asr r2
    2968:	00274808 	eoreq	r4, r7, r8, lsl #16
    296c:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    2970:	27489f7f 	smlsldxcs	r9, r8, pc, pc	; <UNPREDICTABLE>
    2974:	27620800 	strbcs	r0, [r2, -r0, lsl #16]!
    2978:	00010800 	andeq	r0, r1, r0, lsl #16
    297c:	00000052 	andeq	r0, r0, r2, asr r0
    2980:	00000000 	andeq	r0, r0, r0
    2984:	00279000 	eoreq	r9, r7, r0
    2988:	0027dc08 	eoreq	sp, r7, r8, lsl #24
    298c:	53000108 	movwpl	r0, #264	; 0x108
    2990:	080027e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, sp}
    2994:	08002804 	stmdaeq	r0, {r2, fp, sp}
    2998:	00520001 	subseq	r0, r2, r1
    299c:	00000000 	andeq	r0, r0, r0
    29a0:	90000000 	andls	r0, r0, r0
    29a4:	e8080027 	stmda	r8, {r0, r1, r2, r5}
    29a8:	01080027 	tsteq	r8, r7, lsr #32
    29ac:	27e85500 	strbcs	r5, [r8, r0, lsl #10]!
    29b0:	27ec0800 	strbcs	r0, [ip, r0, lsl #16]!
    29b4:	00020800 	andeq	r0, r2, r0, lsl #16
    29b8:	27ec9f30 			; <UNDEFINED> instruction: 0x27ec9f30
    29bc:	27f40800 	ldrbcs	r0, [r4, r0, lsl #16]!
    29c0:	00010800 	andeq	r0, r1, r0, lsl #16
    29c4:	0027f453 	eoreq	pc, r7, r3, asr r4	; <UNPREDICTABLE>
    29c8:	0027fa08 	eoreq	pc, r7, r8, lsl #20
    29cc:	73000308 	movwvc	r0, #776	; 0x308
    29d0:	27fa9f7f 			; <UNDEFINED> instruction: 0x27fa9f7f
    29d4:	28000800 	stmdacs	r0, {fp}
    29d8:	00010800 	andeq	r0, r1, r0, lsl #16
    29dc:	00000053 	andeq	r0, r0, r3, asr r0
    29e0:	00000000 	andeq	r0, r0, r0
    29e4:	00279400 	eoreq	r9, r7, r0, lsl #8
    29e8:	00279808 	eoreq	r9, r7, r8, lsl #16
    29ec:	30000208 	andcc	r0, r0, r8, lsl #4
    29f0:	0027989f 	mlaeq	r7, pc, r8, r9	; <UNPREDICTABLE>
    29f4:	0027a208 	eoreq	sl, r7, r8, lsl #4
    29f8:	52000108 	andpl	r0, r0, #8, 2
    29fc:	080027a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, sp}
    2a00:	080027a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, sp}
    2a04:	7f720003 	svcvc	0x00720003
    2a08:	0027a89f 	mlaeq	r7, pc, r8, sl	; <UNPREDICTABLE>
    2a0c:	0027ae08 	eoreq	sl, r7, r8, lsl #28
    2a10:	52000108 	andpl	r0, r0, #8, 2
    2a14:	080027ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl, sp}
    2a18:	080027bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, sp}
    2a1c:	01720003 	cmneq	r2, r3
    2a20:	0027bc9f 	mlaeq	r7, pc, ip, fp	; <UNPREDICTABLE>
    2a24:	0027c408 	eoreq	ip, r7, r8, lsl #8
    2a28:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2a2c:	1c009100 	stfned	f1, [r0], {-0}
    2a30:	c49f4123 	ldrgt	r4, [pc], #291	; 2a38 <__Stack_Size+0x2238>
    2a34:	ce080027 	cdpgt	0, 0, cr0, cr8, cr7, {1}
    2a38:	08080027 	stmdaeq	r8, {r0, r1, r2, r5}
    2a3c:	91007200 	mrsls	r7, R8_usr
    2a40:	40231c00 	eormi	r1, r3, r0, lsl #24
    2a44:	0027ce9f 	mlaeq	r7, pc, lr, ip	; <UNPREDICTABLE>
    2a48:	0027d008 	eoreq	sp, r7, r8
    2a4c:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2a50:	1c009100 	stfned	f1, [r0], {-0}
    2a54:	009f4123 	addseq	r4, pc, r3, lsr #2
    2a58:	00000000 	andeq	r0, r0, r0
    2a5c:	04000000 	streq	r0, [r0], #-0
    2a60:	54080028 	strpl	r0, [r8], #-40	; 0x28
    2a64:	01080028 	tsteq	r8, r8, lsr #32
    2a68:	28605300 	stmdacs	r0!, {r8, r9, ip, lr}^
    2a6c:	28860800 	stmcs	r6, {fp}
    2a70:	00010800 	andeq	r0, r1, r0, lsl #16
    2a74:	00000052 	andeq	r0, r0, r2, asr r0
    2a78:	00000000 	andeq	r0, r0, r0
    2a7c:	00280400 	eoreq	r0, r8, r0, lsl #8
    2a80:	00286008 	eoreq	r6, r8, r8
    2a84:	56000108 	strpl	r0, [r0], -r8, lsl #2
    2a88:	08002860 	stmdaeq	r0, {r5, r6, fp, sp}
    2a8c:	08002866 	stmdaeq	r0, {r1, r2, r5, r6, fp, sp}
    2a90:	9f300002 	svcls	0x00300002
    2a94:	08002866 	stmdaeq	r0, {r1, r2, r5, r6, fp, sp}
    2a98:	0800286e 	stmdaeq	r0, {r1, r2, r3, r5, r6, fp, sp}
    2a9c:	00730008 	rsbseq	r0, r3, r8
    2aa0:	231c0091 	tstcs	ip, #145	; 0x91
    2aa4:	286e9f40 	stmdacs	lr!, {r6, r8, r9, sl, fp, ip, pc}^
    2aa8:	28740800 	ldmdacs	r4!, {fp}^
    2aac:	00080800 	andeq	r0, r8, r0, lsl #16
    2ab0:	00910073 	addseq	r0, r1, r3, ror r0
    2ab4:	9f3f231c 	svcls	0x003f231c
    2ab8:	08002874 	stmdaeq	r0, {r2, r4, r5, r6, fp, sp}
    2abc:	08002882 	stmdaeq	r0, {r1, r7, fp, sp}
    2ac0:	00730008 	rsbseq	r0, r3, r8
    2ac4:	231c0091 	tstcs	ip, #145	; 0x91
    2ac8:	00009f40 	andeq	r9, r0, r0, asr #30
    2acc:	00000000 	andeq	r0, r0, r0
    2ad0:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
    2ad4:	280a0800 	stmdacs	sl, {fp}
    2ad8:	00020800 	andeq	r0, r2, r0, lsl #16
    2adc:	280a9f30 	stmdacs	sl, {r4, r5, r8, r9, sl, fp, ip, pc}
    2ae0:	28140800 	ldmdacs	r4, {fp}
    2ae4:	00010800 	andeq	r0, r1, r0, lsl #16
    2ae8:	00281452 	eoreq	r1, r8, r2, asr r4
    2aec:	00281a08 	eoreq	r1, r8, r8, lsl #20
    2af0:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    2af4:	281a9f7f 	ldmdacs	sl, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}
    2af8:	283c0800 	ldmdacs	ip!, {fp}
    2afc:	00010800 	andeq	r0, r1, r0, lsl #16
    2b00:	00283c52 	eoreq	r3, r8, r2, asr ip
    2b04:	00284208 	eoreq	r4, r8, r8, lsl #4
    2b08:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    2b0c:	28429f7f 	stmdacs	r2, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}^
    2b10:	28580800 	ldmdacs	r8, {fp}^
    2b14:	00010800 	andeq	r0, r1, r0, lsl #16
    2b18:	00000052 	andeq	r0, r0, r2, asr r0
    2b1c:	00000000 	andeq	r0, r0, r0
    2b20:	00288600 	eoreq	r8, r8, r0, lsl #12
    2b24:	0028d208 	eoreq	sp, r8, r8, lsl #4
    2b28:	53000108 	movwpl	r0, #264	; 0x108
    2b2c:	080028de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, fp, sp}
    2b30:	080028fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, fp, sp}
    2b34:	00520001 	subseq	r0, r2, r1
    2b38:	00000000 	andeq	r0, r0, r0
    2b3c:	86000000 	strhi	r0, [r0], -r0
    2b40:	de080028 	cdple	0, 0, cr0, cr8, cr8, {1}
    2b44:	01080028 	tsteq	r8, r8, lsr #32
    2b48:	28de5500 	ldmcs	lr, {r8, sl, ip, lr}^
    2b4c:	28e20800 	stmiacs	r2!, {fp}^
    2b50:	00020800 	andeq	r0, r2, r0, lsl #16
    2b54:	28e29f30 	stmiacs	r2!, {r4, r5, r8, r9, sl, fp, ip, pc}^
    2b58:	28ea0800 	stmiacs	sl!, {fp}^
    2b5c:	00010800 	andeq	r0, r1, r0, lsl #16
    2b60:	0028ea53 	eoreq	lr, r8, r3, asr sl
    2b64:	0028f008 	eoreq	pc, r8, r8
    2b68:	73000308 	movwvc	r0, #776	; 0x308
    2b6c:	28f09f7f 	ldmcs	r0!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}^
    2b70:	28f60800 	ldmcs	r6!, {fp}^
    2b74:	00010800 	andeq	r0, r1, r0, lsl #16
    2b78:	00000053 	andeq	r0, r0, r3, asr r0
    2b7c:	00000000 	andeq	r0, r0, r0
    2b80:	00288a00 	eoreq	r8, r8, r0, lsl #20
    2b84:	00288e08 	eoreq	r8, r8, r8, lsl #28
    2b88:	30000208 	andcc	r0, r0, r8, lsl #4
    2b8c:	00288e9f 	mlaeq	r8, pc, lr, r8	; <UNPREDICTABLE>
    2b90:	00289808 	eoreq	r9, r8, r8, lsl #16
    2b94:	52000108 	andpl	r0, r0, #8, 2
    2b98:	08002898 	stmdaeq	r0, {r3, r4, r7, fp, sp}
    2b9c:	0800289e 	stmdaeq	r0, {r1, r2, r3, r4, r7, fp, sp}
    2ba0:	7f720003 	svcvc	0x00720003
    2ba4:	00289e9f 	mlaeq	r8, pc, lr, r9	; <UNPREDICTABLE>
    2ba8:	0028a408 	eoreq	sl, r8, r8, lsl #8
    2bac:	52000108 	andpl	r0, r0, #8, 2
    2bb0:	080028a4 	stmdaeq	r0, {r2, r5, r7, fp, sp}
    2bb4:	080028b2 	stmdaeq	r0, {r1, r4, r5, r7, fp, sp}
    2bb8:	01720003 	cmneq	r2, r3
    2bbc:	0028b29f 	mlaeq	r8, pc, r2, fp	; <UNPREDICTABLE>
    2bc0:	0028ba08 	eoreq	fp, r8, r8, lsl #20
    2bc4:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2bc8:	1c009100 	stfned	f1, [r0], {-0}
    2bcc:	ba9f4123 	blt	fe7d3060 <BootRAM+0xd743801>
    2bd0:	c4080028 	strgt	r0, [r8], #-40	; 0x28
    2bd4:	08080028 	stmdaeq	r8, {r3, r5}
    2bd8:	91007200 	mrsls	r7, R8_usr
    2bdc:	40231c00 	eormi	r1, r3, r0, lsl #24
    2be0:	0028c49f 	mlaeq	r8, pc, r4, ip	; <UNPREDICTABLE>
    2be4:	0028c608 	eoreq	ip, r8, r8, lsl #12
    2be8:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2bec:	1c009100 	stfned	f1, [r0], {-0}
    2bf0:	009f4123 	addseq	r4, pc, r3, lsr #2
    2bf4:	00000000 	andeq	r0, r0, r0
    2bf8:	fa000000 	blx	2c00 <__Stack_Size+0x2400>
    2bfc:	4a080028 	bmi	202ca4 <__Stack_Size+0x2024a4>
    2c00:	01080029 	tsteq	r8, r9, lsr #32
    2c04:	29565300 	ldmdbcs	r6, {r8, r9, ip, lr}^
    2c08:	297c0800 	ldmdbcs	ip!, {fp}^
    2c0c:	00010800 	andeq	r0, r1, r0, lsl #16
    2c10:	00000052 	andeq	r0, r0, r2, asr r0
    2c14:	00000000 	andeq	r0, r0, r0
    2c18:	0028fa00 	eoreq	pc, r8, r0, lsl #20
    2c1c:	00295608 	eoreq	r5, r9, r8, lsl #12
    2c20:	56000108 	strpl	r0, [r0], -r8, lsl #2
    2c24:	08002956 	stmdaeq	r0, {r1, r2, r4, r6, r8, fp, sp}
    2c28:	0800295c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp, sp}
    2c2c:	9f300002 	svcls	0x00300002
    2c30:	0800295c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp, sp}
    2c34:	08002964 	stmdaeq	r0, {r2, r5, r6, r8, fp, sp}
    2c38:	00730008 	rsbseq	r0, r3, r8
    2c3c:	231c0091 	tstcs	ip, #145	; 0x91
    2c40:	29649f40 	stmdbcs	r4!, {r6, r8, r9, sl, fp, ip, pc}^
    2c44:	296a0800 	stmdbcs	sl!, {fp}^
    2c48:	00080800 	andeq	r0, r8, r0, lsl #16
    2c4c:	00910073 	addseq	r0, r1, r3, ror r0
    2c50:	9f3f231c 	svcls	0x003f231c
    2c54:	0800296a 	stmdaeq	r0, {r1, r3, r5, r6, r8, fp, sp}
    2c58:	08002978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, sp}
    2c5c:	00730008 	rsbseq	r0, r3, r8
    2c60:	231c0091 	tstcs	ip, #145	; 0x91
    2c64:	00009f40 	andeq	r9, r0, r0, asr #30
    2c68:	00000000 	andeq	r0, r0, r0
    2c6c:	28fc0000 	ldmcs	ip!, {}^	; <UNPREDICTABLE>
    2c70:	29000800 	stmdbcs	r0, {fp}
    2c74:	00020800 	andeq	r0, r2, r0, lsl #16
    2c78:	29009f30 	stmdbcs	r0, {r4, r5, r8, r9, sl, fp, ip, pc}
    2c7c:	290a0800 	stmdbcs	sl, {fp}
    2c80:	00010800 	andeq	r0, r1, r0, lsl #16
    2c84:	00290a52 	eoreq	r0, r9, r2, asr sl
    2c88:	00291008 	eoreq	r1, r9, r8
    2c8c:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    2c90:	29109f7f 	ldmdbcs	r0, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}
    2c94:	29320800 	ldmdbcs	r2!, {fp}
    2c98:	00010800 	andeq	r0, r1, r0, lsl #16
    2c9c:	00293252 	eoreq	r3, r9, r2, asr r2
    2ca0:	00293808 	eoreq	r3, r9, r8, lsl #16
    2ca4:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    2ca8:	29389f7f 	ldmdbcs	r8!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}
    2cac:	294e0800 	stmdbcs	lr, {fp}^
    2cb0:	00010800 	andeq	r0, r1, r0, lsl #16
    2cb4:	00000052 	andeq	r0, r0, r2, asr r0
    2cb8:	00000000 	andeq	r0, r0, r0
    2cbc:	00297c00 	eoreq	r7, r9, r0, lsl #24
    2cc0:	0029c608 	eoreq	ip, r9, r8, lsl #12
    2cc4:	53000108 	movwpl	r0, #264	; 0x108
    2cc8:	080029d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, fp, sp}
    2ccc:	080029ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, fp, sp}
    2cd0:	00520001 	subseq	r0, r2, r1
    2cd4:	00000000 	andeq	r0, r0, r0
    2cd8:	7c000000 	stcvc	0, cr0, [r0], {-0}
    2cdc:	d2080029 	andle	r0, r8, #41	; 0x29
    2ce0:	01080029 	tsteq	r8, r9, lsr #32
    2ce4:	29d25500 	ldmibcs	r2, {r8, sl, ip, lr}^
    2ce8:	29d60800 	ldmibcs	r6, {fp}^
    2cec:	00020800 	andeq	r0, r2, r0, lsl #16
    2cf0:	29d69f30 	ldmibcs	r6, {r4, r5, r8, r9, sl, fp, ip, pc}^
    2cf4:	29de0800 	ldmibcs	lr, {fp}^
    2cf8:	00010800 	andeq	r0, r1, r0, lsl #16
    2cfc:	0029de53 	eoreq	sp, r9, r3, asr lr
    2d00:	0029e408 	eoreq	lr, r9, r8, lsl #8
    2d04:	73000308 	movwvc	r0, #776	; 0x308
    2d08:	29e49f7f 	stmibcs	r4!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}^
    2d0c:	29ea0800 	stmibcs	sl!, {fp}^
    2d10:	00010800 	andeq	r0, r1, r0, lsl #16
    2d14:	00000053 	andeq	r0, r0, r3, asr r0
    2d18:	00000000 	andeq	r0, r0, r0
    2d1c:	00297e00 	eoreq	r7, r9, r0, lsl #28
    2d20:	00298208 	eoreq	r8, r9, r8, lsl #4
    2d24:	30000208 	andcc	r0, r0, r8, lsl #4
    2d28:	0029829f 	mlaeq	r9, pc, r2, r8	; <UNPREDICTABLE>
    2d2c:	00298c08 	eoreq	r8, r9, r8, lsl #24
    2d30:	52000108 	andpl	r0, r0, #8, 2
    2d34:	0800298c 	stmdaeq	r0, {r2, r3, r7, r8, fp, sp}
    2d38:	08002992 	stmdaeq	r0, {r1, r4, r7, r8, fp, sp}
    2d3c:	7f720003 	svcvc	0x00720003
    2d40:	0029929f 	mlaeq	r9, pc, r2, r9	; <UNPREDICTABLE>
    2d44:	00299808 	eoreq	r9, r9, r8, lsl #16
    2d48:	52000108 	andpl	r0, r0, #8, 2
    2d4c:	08002998 	stmdaeq	r0, {r3, r4, r7, r8, fp, sp}
    2d50:	080029a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, fp, sp}
    2d54:	01720003 	cmneq	r2, r3
    2d58:	0029a69f 	mlaeq	r9, pc, r6, sl	; <UNPREDICTABLE>
    2d5c:	0029ae08 	eoreq	sl, r9, r8, lsl #28
    2d60:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2d64:	1c009100 	stfned	f1, [r0], {-0}
    2d68:	ae9f4123 	fmlgeep	f4, f7, f3
    2d6c:	b8080029 	stmdalt	r8, {r0, r3, r5}
    2d70:	08080029 	stmdaeq	r8, {r0, r3, r5}
    2d74:	91007200 	mrsls	r7, R8_usr
    2d78:	40231c00 	eormi	r1, r3, r0, lsl #24
    2d7c:	0029b89f 	mlaeq	r9, pc, r8, fp	; <UNPREDICTABLE>
    2d80:	0029ba08 	eoreq	fp, r9, r8, lsl #20
    2d84:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2d88:	1c009100 	stfned	f1, [r0], {-0}
    2d8c:	009f4123 	addseq	r4, pc, r3, lsr #2
    2d90:	00000000 	andeq	r0, r0, r0
    2d94:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    2d98:	3e080029 	cdpcc	0, 0, cr0, cr8, cr9, {1}
    2d9c:	0108002a 	tsteq	r8, sl, lsr #32
    2da0:	2a4a5300 	bcs	12979a8 <__Stack_Size+0x12971a8>
    2da4:	2a660800 	bcs	1984dac <__Stack_Size+0x19845ac>
    2da8:	00010800 	andeq	r0, r1, r0, lsl #16
    2dac:	00000052 	andeq	r0, r0, r2, asr r0
    2db0:	00000000 	andeq	r0, r0, r0
    2db4:	0029ee00 	eoreq	lr, r9, r0, lsl #28
    2db8:	002a4a08 	eoreq	r4, sl, r8, lsl #20
    2dbc:	56000108 	strpl	r0, [r0], -r8, lsl #2
    2dc0:	08002a4a 	stmdaeq	r0, {r1, r3, r6, r9, fp, sp}
    2dc4:	08002a50 	stmdaeq	r0, {r4, r6, r9, fp, sp}
    2dc8:	9f300002 	svcls	0x00300002
    2dcc:	08002a50 	stmdaeq	r0, {r4, r6, r9, fp, sp}
    2dd0:	08002a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, sp}
    2dd4:	00730008 	rsbseq	r0, r3, r8
    2dd8:	231c0091 	tstcs	ip, #145	; 0x91
    2ddc:	2a589f40 	bcs	162aae4 <__Stack_Size+0x162a2e4>
    2de0:	2a5e0800 	bcs	1784de8 <__Stack_Size+0x17845e8>
    2de4:	00080800 	andeq	r0, r8, r0, lsl #16
    2de8:	00910073 	addseq	r0, r1, r3, ror r0
    2dec:	9f3f231c 	svcls	0x003f231c
    2df0:	08002a5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, fp, sp}
    2df4:	08002a68 	stmdaeq	r0, {r3, r5, r6, r9, fp, sp}
    2df8:	00730008 	rsbseq	r0, r3, r8
    2dfc:	231c0091 	tstcs	ip, #145	; 0x91
    2e00:	00009f40 	andeq	r9, r0, r0, asr #30
    2e04:	00000000 	andeq	r0, r0, r0
    2e08:	29f00000 	ldmibcs	r0!, {}^	; <UNPREDICTABLE>
    2e0c:	29f40800 	ldmibcs	r4!, {fp}^
    2e10:	00020800 	andeq	r0, r2, r0, lsl #16
    2e14:	29f49f30 	ldmibcs	r4!, {r4, r5, r8, r9, sl, fp, ip, pc}^
    2e18:	29fe0800 	ldmibcs	lr!, {fp}^
    2e1c:	00010800 	andeq	r0, r1, r0, lsl #16
    2e20:	0029fe52 	eoreq	pc, r9, r2, asr lr	; <UNPREDICTABLE>
    2e24:	002a0408 	eoreq	r0, sl, r8, lsl #8
    2e28:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    2e2c:	2a049f7f 	bcs	12ac30 <__Stack_Size+0x12a430>
    2e30:	2a260800 	bcs	984e38 <__Stack_Size+0x984638>
    2e34:	00010800 	andeq	r0, r1, r0, lsl #16
    2e38:	002a2652 	eoreq	r2, sl, r2, asr r6
    2e3c:	002a2c08 	eoreq	r2, sl, r8, lsl #24
    2e40:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    2e44:	2a2c9f7f 	bcs	b2ac48 <__Stack_Size+0xb2a448>
    2e48:	2a420800 	bcs	1084e50 <__Stack_Size+0x1084650>
    2e4c:	00010800 	andeq	r0, r1, r0, lsl #16
    2e50:	00000052 	andeq	r0, r0, r2, asr r0
    2e54:	00000000 	andeq	r0, r0, r0
    2e58:	002a7000 	eoreq	r7, sl, r0
    2e5c:	002aba08 	eoreq	fp, sl, r8, lsl #20
    2e60:	53000108 	movwpl	r0, #264	; 0x108
    2e64:	08002ac6 	stmdaeq	r0, {r1, r2, r6, r7, r9, fp, sp}
    2e68:	08002ae2 	stmdaeq	r0, {r1, r5, r6, r7, r9, fp, sp}
    2e6c:	00520001 	subseq	r0, r2, r1
    2e70:	00000000 	andeq	r0, r0, r0
    2e74:	70000000 	andvc	r0, r0, r0
    2e78:	c608002a 	strgt	r0, [r8], -sl, lsr #32
    2e7c:	0108002a 	tsteq	r8, sl, lsr #32
    2e80:	2ac65500 	bcs	ff198288 <BootRAM+0xe108a29>
    2e84:	2aca0800 	bcs	ff284e8c <BootRAM+0xe1f562d>
    2e88:	00020800 	andeq	r0, r2, r0, lsl #16
    2e8c:	2aca9f30 	bcs	ff2aab54 <BootRAM+0xe21b2f5>
    2e90:	2ad20800 	bcs	ff484e98 <BootRAM+0xe3f5639>
    2e94:	00010800 	andeq	r0, r1, r0, lsl #16
    2e98:	002ad253 	eoreq	sp, sl, r3, asr r2
    2e9c:	002ad808 	eoreq	sp, sl, r8, lsl #16
    2ea0:	73000308 	movwvc	r0, #776	; 0x308
    2ea4:	2ad89f7f 	bcs	ff62aca8 <BootRAM+0xe59b449>
    2ea8:	2ae20800 	bcs	ff884eb0 <BootRAM+0xe7f5651>
    2eac:	00010800 	andeq	r0, r1, r0, lsl #16
    2eb0:	00000053 	andeq	r0, r0, r3, asr r0
    2eb4:	00000000 	andeq	r0, r0, r0
    2eb8:	002a7200 	eoreq	r7, sl, r0, lsl #4
    2ebc:	002a7608 	eoreq	r7, sl, r8, lsl #12
    2ec0:	30000208 	andcc	r0, r0, r8, lsl #4
    2ec4:	002a769f 	mlaeq	sl, pc, r6, r7	; <UNPREDICTABLE>
    2ec8:	002a8008 	eoreq	r8, sl, r8
    2ecc:	52000108 	andpl	r0, r0, #8, 2
    2ed0:	08002a80 	stmdaeq	r0, {r7, r9, fp, sp}
    2ed4:	08002a86 	stmdaeq	r0, {r1, r2, r7, r9, fp, sp}
    2ed8:	7f720003 	svcvc	0x00720003
    2edc:	002a869f 	mlaeq	sl, pc, r6, r8	; <UNPREDICTABLE>
    2ee0:	002a8c08 	eoreq	r8, sl, r8, lsl #24
    2ee4:	52000108 	andpl	r0, r0, #8, 2
    2ee8:	08002a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, sp}
    2eec:	08002a9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, fp, sp}
    2ef0:	01720003 	cmneq	r2, r3
    2ef4:	002a9a9f 	mlaeq	sl, pc, sl, r9	; <UNPREDICTABLE>
    2ef8:	002aa208 	eoreq	sl, sl, r8, lsl #4
    2efc:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2f00:	1c009100 	stfned	f1, [r0], {-0}
    2f04:	a29f4123 	addsge	r4, pc, #-1073741816	; 0xc0000008
    2f08:	ac08002a 	stcge	0, cr0, [r8], {42}	; 0x2a
    2f0c:	0808002a 	stmdaeq	r8, {r1, r3, r5}
    2f10:	91007200 	mrsls	r7, R8_usr
    2f14:	40231c00 	eormi	r1, r3, r0, lsl #24
    2f18:	002aac9f 	mlaeq	sl, pc, ip, sl	; <UNPREDICTABLE>
    2f1c:	002aae08 	eoreq	sl, sl, r8, lsl #28
    2f20:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2f24:	1c009100 	stfned	f1, [r0], {-0}
    2f28:	009f4123 	addseq	r4, pc, r3, lsr #2
	...
    2f38:	01000000 	mrseq	r0, (UNDEF: 0)
    2f3c:	00005000 	andeq	r5, r0, r0
    2f40:	00000000 	andeq	r0, r0, r0
    2f44:	00010000 	andeq	r0, r1, r0
    2f48:	00000055 	andeq	r0, r0, r5, asr r0
	...
    2f58:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2f64:	01f30004 	mvnseq	r0, r4
    2f68:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    2f78:	00010000 	andeq	r0, r1, r0
    2f7c:	0000005d 	andeq	r0, r0, sp, asr r0
    2f80:	00000000 	andeq	r0, r0, r0
    2f84:	74000300 	strvc	r0, [r0], #-768	; 0x300
    2f88:	00009f60 	andeq	r9, r0, r0, ror #30
    2f8c:	00000000 	andeq	r0, r0, r0
    2f90:	2ae40000 	bcs	ff902f98 <BootRAM+0xe873739>
    2f94:	2af60800 	bcs	ffd84f9c <BootRAM+0xecf573d>
    2f98:	00010800 	andeq	r0, r1, r0, lsl #16
    2f9c:	002af650 	eoreq	pc, sl, r0, asr r6	; <UNPREDICTABLE>
    2fa0:	00311608 	eorseq	r1, r1, r8, lsl #12
    2fa4:	91000308 	tstls	r0, r8, lsl #6
    2fa8:	31167ed8 			; <UNDEFINED> instruction: 0x31167ed8
    2fac:	31180800 	tstcc	r8, r0, lsl #16
    2fb0:	00030800 	andeq	r0, r3, r0, lsl #16
    2fb4:	007ed87d 	rsbseq	sp, lr, sp, ror r8
    2fb8:	00000000 	andeq	r0, r0, r0
    2fbc:	e4000000 	str	r0, [r0], #-0
    2fc0:	f608002a 			; <UNDEFINED> instruction: 0xf608002a
    2fc4:	0108002a 	tsteq	r8, sl, lsr #32
    2fc8:	2af65100 	bcs	ffd973d0 <BootRAM+0xed07b71>
    2fcc:	2b1e0800 	blcs	784fd4 <__Stack_Size+0x7847d4>
    2fd0:	00010800 	andeq	r0, r1, r0, lsl #16
    2fd4:	002b1e50 	eoreq	r1, fp, r0, asr lr
    2fd8:	00311608 	eorseq	r1, r1, r8, lsl #12
    2fdc:	91000308 	tstls	r0, r8, lsl #6
    2fe0:	31167edc 			; <UNDEFINED> instruction: 0x31167edc
    2fe4:	31180800 	tstcc	r8, r0, lsl #16
    2fe8:	00030800 	andeq	r0, r3, r0, lsl #16
    2fec:	007edc7d 	rsbseq	sp, lr, sp, ror ip
    2ff0:	00000000 	andeq	r0, r0, r0
    2ff4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    2ff8:	f608002a 			; <UNDEFINED> instruction: 0xf608002a
    2ffc:	0108002a 	tsteq	r8, sl, lsr #32
    3000:	2af65100 	bcs	ffd97408 <BootRAM+0xed07ba9>
    3004:	2b1e0800 	blcs	78500c <__Stack_Size+0x78480c>
    3008:	00010800 	andeq	r0, r1, r0, lsl #16
    300c:	002b1e50 	eoreq	r1, fp, r0, asr lr
    3010:	00311608 	eorseq	r1, r1, r8, lsl #12
    3014:	91000308 	tstls	r0, r8, lsl #6
    3018:	31167edc 			; <UNDEFINED> instruction: 0x31167edc
    301c:	31180800 	tstcc	r8, r0, lsl #16
    3020:	00030800 	andeq	r0, r3, r0, lsl #16
    3024:	007edc7d 	rsbseq	sp, lr, sp, ror ip
    3028:	00000000 	andeq	r0, r0, r0
    302c:	ec000000 	stc	0, cr0, [r0], {-0}
    3030:	f408002a 	vst4.8	{d0-d3}, [r8 :128], sl
    3034:	0408002a 	streq	r0, [r8], #-42	; 0x2a
    3038:	7fa09100 	svcvc	0x00a09100
    303c:	002af49f 	mlaeq	sl, pc, r4, pc	; <UNPREDICTABLE>
    3040:	00311608 	eorseq	r1, r1, r8, lsl #12
    3044:	56000108 	strpl	r0, [r0], -r8, lsl #2
    3048:	08003116 	stmdaeq	r0, {r1, r2, r4, r8, ip, sp}
    304c:	08003118 	stmdaeq	r0, {r3, r4, r8, ip, sp}
    3050:	a07d0004 	rsbsge	r0, sp, r4
    3054:	00009f7f 	andeq	r9, r0, pc, ror pc
    3058:	00000000 	andeq	r0, r0, r0
    305c:	2af00000 	bcs	ffc03064 <BootRAM+0xeb73805>
    3060:	2af60800 	bcs	ffd85068 <BootRAM+0xecf5809>
    3064:	00020800 	andeq	r0, r2, r0, lsl #16
    3068:	2af69f30 	bcs	ffdaad30 <BootRAM+0xed1b4d1>
    306c:	2afe0800 	bcs	fff85074 <BootRAM+0xeef5815>
    3070:	00050800 	andeq	r0, r5, r0, lsl #16
    3074:	25380072 	ldrcs	r0, [r8, #-114]!	; 0x72
    3078:	002afe9f 	mlaeq	sl, pc, lr, pc	; <UNPREDICTABLE>
    307c:	002b3a08 	eoreq	r3, fp, r8, lsl #20
    3080:	52000108 	andpl	r0, r0, #8, 2
	...
    308c:	08002af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, sp}
    3090:	08002af6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, fp, sp}
    3094:	9f300002 	svcls	0x00300002
    3098:	08002af6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, fp, sp}
    309c:	08002b0a 	stmdaeq	r0, {r1, r3, r8, r9, fp, sp}
    30a0:	1c530001 	mrrcne	0, 0, r0, r3, cr1
    30a4:	2008002b 	andcs	r0, r8, fp, lsr #32
    30a8:	0208002b 	andeq	r0, r8, #43	; 0x2b
    30ac:	209f3000 	addscs	r3, pc, r0
    30b0:	2808002b 	stmdacs	r8, {r0, r1, r3, r5}
    30b4:	0808002b 	stmdaeq	r8, {r0, r1, r3, r5}
    30b8:	91007300 	mrsls	r7, LR_irq
    30bc:	60231c00 	eorvs	r1, r3, r0, lsl #24
    30c0:	002b289f 	mlaeq	fp, pc, r8, r2	; <UNPREDICTABLE>
    30c4:	002b2e08 	eoreq	r2, fp, r8, lsl #28
    30c8:	73000808 	movwvc	r0, #2056	; 0x808
    30cc:	1c009100 	stfned	f1, [r0], {-0}
    30d0:	2e9f5f23 	cdpcs	15, 9, cr5, cr15, cr3, {1}
    30d4:	3408002b 	strcc	r0, [r8], #-43	; 0x2b
    30d8:	0808002b 	stmdaeq	r8, {r0, r1, r3, r5}
    30dc:	91007300 	mrsls	r7, LR_irq
    30e0:	60231c00 	eorvs	r1, r3, r0, lsl #24
    30e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    30e8:	00000000 	andeq	r0, r0, r0
    30ec:	002b3a00 	eoreq	r3, fp, r0, lsl #20
    30f0:	002b8608 	eoreq	r8, fp, r8, lsl #12
    30f4:	53000108 	movwpl	r0, #264	; 0x108
    30f8:	08002b92 	stmdaeq	r0, {r1, r4, r7, r8, r9, fp, sp}
    30fc:	08002bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, sp}
    3100:	00520001 	subseq	r0, r2, r1
    3104:	00000000 	andeq	r0, r0, r0
    3108:	3a000000 	bcc	3110 <__Stack_Size+0x2910>
    310c:	9208002b 	andls	r0, r8, #43	; 0x2b
    3110:	0108002b 	tsteq	r8, fp, lsr #32
    3114:	2b925400 	blcs	fe49811c <BootRAM+0xd4088bd>
    3118:	2b9a0800 	blcs	fe685120 <BootRAM+0xd5f58c1>
    311c:	00020800 	andeq	r0, r2, r0, lsl #16
    3120:	2b9a9f30 	blcs	fe6aade8 <BootRAM+0xd61b589>
    3124:	2ba20800 	blcs	fe88512c <BootRAM+0xd7f58cd>
    3128:	00090800 	andeq	r0, r9, r0, lsl #16
    312c:	00910073 	addseq	r0, r1, r3, ror r0
    3130:	01a0231c 	lsleq	r2, ip, r3
    3134:	002ba29f 	mlaeq	fp, pc, r2, sl	; <UNPREDICTABLE>
    3138:	002ba808 	eoreq	sl, fp, r8, lsl #16
    313c:	73000908 	movwvc	r0, #2312	; 0x908
    3140:	1c009100 	stfned	f1, [r0], {-0}
    3144:	9f019f23 	svcls	0x00019f23
    3148:	08002ba8 	stmdaeq	r0, {r3, r5, r7, r8, r9, fp, sp}
    314c:	08002bae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, fp, sp}
    3150:	00730009 	rsbseq	r0, r3, r9
    3154:	231c0091 	tstcs	ip, #145	; 0x91
    3158:	009f01a0 	addseq	r0, pc, r0, lsr #3
    315c:	00000000 	andeq	r0, r0, r0
    3160:	3c000000 	stccc	0, cr0, [r0], {-0}
    3164:	4008002b 	andmi	r0, r8, fp, lsr #32
    3168:	0208002b 	andeq	r0, r8, #43	; 0x2b
    316c:	409f3000 	addsmi	r3, pc, r0
    3170:	4a08002b 	bmi	203224 <__Stack_Size+0x202a24>
    3174:	0108002b 	tsteq	r8, fp, lsr #32
    3178:	2b4a5200 	blcs	1297980 <__Stack_Size+0x1297180>
    317c:	2b500800 	blcs	1405184 <__Stack_Size+0x1404984>
    3180:	00030800 	andeq	r0, r3, r0, lsl #16
    3184:	509f7f72 	addspl	r7, pc, r2, ror pc	; <UNPREDICTABLE>
    3188:	5608002b 	strpl	r0, [r8], -fp, lsr #32
    318c:	0108002b 	tsteq	r8, fp, lsr #32
    3190:	2b565200 	blcs	1597998 <__Stack_Size+0x1597198>
    3194:	2b620800 	blcs	188519c <__Stack_Size+0x188499c>
    3198:	00030800 	andeq	r0, r3, r0, lsl #16
    319c:	629f0172 	addsvs	r0, pc, #-2147483620	; 0x8000001c
    31a0:	6a08002b 	bvs	203254 <__Stack_Size+0x202a54>
    31a4:	0808002b 	stmdaeq	r8, {r0, r1, r3, r5}
    31a8:	91007200 	mrsls	r7, R8_usr
    31ac:	61231c00 	teqvs	r3, r0, lsl #24
    31b0:	002b6a9f 	mlaeq	fp, pc, sl, r6	; <UNPREDICTABLE>
    31b4:	002b7408 	eoreq	r7, fp, r8, lsl #8
    31b8:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    31bc:	1c009100 	stfned	f1, [r0], {-0}
    31c0:	749f6023 	ldrvc	r6, [pc], #35	; 31c8 <__Stack_Size+0x29c8>
    31c4:	7608002b 	strvc	r0, [r8], -fp, lsr #32
    31c8:	0808002b 	stmdaeq	r8, {r0, r1, r3, r5}
    31cc:	91007200 	mrsls	r7, R8_usr
    31d0:	61231c00 	teqvs	r3, r0, lsl #24
    31d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    31d8:	00000000 	andeq	r0, r0, r0
    31dc:	002bb400 	eoreq	fp, fp, r0, lsl #8
    31e0:	002c0208 	eoreq	r0, ip, r8, lsl #4
    31e4:	53000108 	movwpl	r0, #264	; 0x108
    31e8:	08002c12 	stmdaeq	r0, {r1, r4, sl, fp, sp}
    31ec:	08002c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp}
    31f0:	00520001 	subseq	r0, r2, r1
    31f4:	00000000 	andeq	r0, r0, r0
    31f8:	b4000000 	strlt	r0, [r0], #-0
    31fc:	1208002b 	andne	r0, r8, #43	; 0x2b
    3200:	0108002c 	tsteq	r8, ip, lsr #32
    3204:	2c125400 	cfldrscs	mvf5, [r2], {-0}
    3208:	2c1e0800 	ldccs	8, cr0, [lr], {-0}
    320c:	00020800 	andeq	r0, r2, r0, lsl #16
    3210:	2c1e9f30 	ldccs	15, cr9, [lr], {48}	; 0x30
    3214:	2c260800 	stccs	8, cr0, [r6], #-0
    3218:	00080800 	andeq	r0, r8, r0, lsl #16
    321c:	00910073 	addseq	r0, r1, r3, ror r0
    3220:	9f40231c 	svcls	0x0040231c
    3224:	08002c26 	stmdaeq	r0, {r1, r2, r5, sl, fp, sp}
    3228:	08002c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, sp}
    322c:	00730008 	rsbseq	r0, r3, r8
    3230:	231c0091 	tstcs	ip, #145	; 0x91
    3234:	2c2c9f3f 	stccs	15, cr9, [ip], #-252	; 0xffffff04
    3238:	2c3c0800 	ldccs	8, cr0, [ip], #-0
    323c:	00080800 	andeq	r0, r8, r0, lsl #16
    3240:	00910073 	addseq	r0, r1, r3, ror r0
    3244:	9f40231c 	svcls	0x0040231c
	...
    3250:	08002bb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, fp, sp}
    3254:	08002bba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, fp, sp}
    3258:	9f300002 	svcls	0x00300002
    325c:	08002bba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, fp, sp}
    3260:	08002bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, sp}
    3264:	c8520001 	ldmdagt	r2, {r0}^
    3268:	ce08002b 	cdpgt	0, 0, cr0, cr8, cr11, {1}
    326c:	0308002b 	movweq	r0, #32811	; 0x802b
    3270:	9f7f7200 	svcls	0x007f7200
    3274:	08002bce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, fp, sp}
    3278:	08002bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp, sp}
    327c:	d4520001 	ldrble	r0, [r2], #-1
    3280:	e008002b 	and	r0, r8, fp, lsr #32
    3284:	0308002b 	movweq	r0, #32811	; 0x802b
    3288:	9f017200 	svcls	0x00017200
    328c:	08002be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp, sp}
    3290:	08002be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, sp}
    3294:	00720009 	rsbseq	r0, r2, r9
    3298:	231c0091 	tstcs	ip, #145	; 0x91
    329c:	e89f01a1 	ldm	pc, {r0, r5, r7, r8}	; <UNPREDICTABLE>
    32a0:	f208002b 	vhadd.s8	d0, d8, d27
    32a4:	0908002b 	stmdbeq	r8, {r0, r1, r3, r5}
    32a8:	91007200 	mrsls	r7, R8_usr
    32ac:	a0231c00 	eorge	r1, r3, r0, lsl #24
    32b0:	2bf29f01 	blcs	ffcaaebc <BootRAM+0xec1b65d>
    32b4:	2bf40800 	blcs	ffd052bc <BootRAM+0xec75a5d>
    32b8:	00090800 	andeq	r0, r9, r0, lsl #16
    32bc:	00910072 	addseq	r0, r1, r2, ror r0
    32c0:	01a1231c 			; <UNDEFINED> instruction: 0x01a1231c
    32c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    32c8:	00000000 	andeq	r0, r0, r0
    32cc:	002c3c00 	eoreq	r3, ip, r0, lsl #24
    32d0:	002c4208 	eoreq	r4, ip, r8, lsl #4
    32d4:	30000208 	andcc	r0, r0, r8, lsl #4
    32d8:	002c429f 	mlaeq	ip, pc, r2, r4	; <UNPREDICTABLE>
    32dc:	002c9c08 	eoreq	r9, ip, r8, lsl #24
    32e0:	53000108 	movwpl	r0, #264	; 0x108
    32e4:	08002ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, sp}
    32e8:	08002cc6 	stmdaeq	r0, {r1, r2, r6, r7, sl, fp, sp}
    32ec:	00520001 	subseq	r0, r2, r1
    32f0:	00000000 	andeq	r0, r0, r0
    32f4:	3c000000 	stccc	0, cr0, [r0], {-0}
    32f8:	4208002c 	andmi	r0, r8, #44	; 0x2c
    32fc:	0208002c 	andeq	r0, r8, #44	; 0x2c
    3300:	429f3000 	addsmi	r3, pc, #0
    3304:	a808002c 	stmdage	r8, {r2, r3, r5}
    3308:	0108002c 	tsteq	r8, ip, lsr #32
    330c:	2ca85900 	stccs	9, cr5, [r8]
    3310:	2cae0800 	stccs	8, cr0, [lr]
    3314:	00020800 	andeq	r0, r2, r0, lsl #16
    3318:	2cae9f30 	stccs	15, cr9, [lr], #192	; 0xc0
    331c:	2cb80800 	ldccs	8, cr0, [r8]
    3320:	00090800 	andeq	r0, r9, r0, lsl #16
    3324:	00910073 	addseq	r0, r1, r3, ror r0
    3328:	01a0231c 	lsleq	r2, ip, r3
    332c:	002cb89f 	mlaeq	ip, pc, r8, fp	; <UNPREDICTABLE>
    3330:	002cbe08 	eoreq	fp, ip, r8, lsl #28
    3334:	73000908 	movwvc	r0, #2312	; 0x908
    3338:	1c009100 	stfned	f1, [r0], {-0}
    333c:	9f019f23 	svcls	0x00019f23
    3340:	08002cbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sl, fp, sp}
    3344:	08002cc6 	stmdaeq	r0, {r1, r2, r6, r7, sl, fp, sp}
    3348:	00730009 	rsbseq	r0, r3, r9
    334c:	231c0091 	tstcs	ip, #145	; 0x91
    3350:	009f01a0 	addseq	r0, pc, r0, lsr #3
    3354:	00000000 	andeq	r0, r0, r0
    3358:	44000000 	strmi	r0, [r0], #-0
    335c:	4a08002c 	bmi	203414 <__Stack_Size+0x202c14>
    3360:	0208002c 	andeq	r0, r8, #44	; 0x2c
    3364:	4a9f3000 	bmi	fe7cf36c <BootRAM+0xd73fb0d>
    3368:	5408002c 	strpl	r0, [r8], #-44	; 0x2c
    336c:	0108002c 	tsteq	r8, ip, lsr #32
    3370:	2c545200 	lfmcs	f5, 2, [r4], {-0}
    3374:	2c5a0800 	mrrccs	8, 0, r0, sl, cr0
    3378:	00030800 	andeq	r0, r3, r0, lsl #16
    337c:	5a9f7f72 	bpl	fe7e314c <BootRAM+0xd7538ed>
    3380:	6008002c 	andvs	r0, r8, ip, lsr #32
    3384:	0108002c 	tsteq	r8, ip, lsr #32
    3388:	2c605200 	sfmcs	f5, 2, [r0], #-0
    338c:	2c700800 	ldclcs	8, cr0, [r0], #-0
    3390:	00030800 	andeq	r0, r3, r0, lsl #16
    3394:	709f0172 	addsvc	r0, pc, r2, ror r1	; <UNPREDICTABLE>
    3398:	7808002c 	stmdavc	r8, {r2, r3, r5}
    339c:	0808002c 	stmdaeq	r8, {r2, r3, r5}
    33a0:	91007200 	mrsls	r7, R8_usr
    33a4:	41231c00 	teqmi	r3, r0, lsl #24
    33a8:	002c789f 	mlaeq	ip, pc, r8, r7	; <UNPREDICTABLE>
    33ac:	002c8208 	eoreq	r8, ip, r8, lsl #4
    33b0:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    33b4:	1c009100 	stfned	f1, [r0], {-0}
    33b8:	829f4023 	addshi	r4, pc, #35	; 0x23
    33bc:	8408002c 	strhi	r0, [r8], #-44	; 0x2c
    33c0:	0808002c 	stmdaeq	r8, {r2, r3, r5}
    33c4:	91007200 	mrsls	r7, R8_usr
    33c8:	41231c00 	teqmi	r3, r0, lsl #24
    33cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    33d0:	00000000 	andeq	r0, r0, r0
    33d4:	002cc600 	eoreq	ip, ip, r0, lsl #12
    33d8:	002d2008 	eoreq	r2, sp, r8
    33dc:	53000108 	movwpl	r0, #264	; 0x108
    33e0:	08002d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, sp}
    33e4:	08002d4a 	stmdaeq	r0, {r1, r3, r6, r8, sl, fp, sp}
    33e8:	00520001 	subseq	r0, r2, r1
    33ec:	00000000 	andeq	r0, r0, r0
    33f0:	c6000000 	strgt	r0, [r0], -r0
    33f4:	2c08002c 	stccs	0, cr0, [r8], {44}	; 0x2c
    33f8:	0108002d 	tsteq	r8, sp, lsr #32
    33fc:	2d2c5900 	stccs	9, cr5, [ip, #-0]
    3400:	2d320800 	ldccs	8, cr0, [r2, #-0]
    3404:	00020800 	andeq	r0, r2, r0, lsl #16
    3408:	2d329f30 	ldccs	15, cr9, [r2, #-192]!	; 0xffffff40
    340c:	2d400800 	stclcs	8, cr0, [r0, #-0]
    3410:	00080800 	andeq	r0, r8, r0, lsl #16
    3414:	00910073 	addseq	r0, r1, r3, ror r0
    3418:	9f40231c 	svcls	0x0040231c
    341c:	08002d40 	stmdaeq	r0, {r6, r8, sl, fp, sp}
    3420:	08002d46 	stmdaeq	r0, {r1, r2, r6, r8, sl, fp, sp}
    3424:	00730008 	rsbseq	r0, r3, r8
    3428:	231c0091 	tstcs	ip, #145	; 0x91
    342c:	2d469f3f 	stclcs	15, cr9, [r6, #-252]	; 0xffffff04
    3430:	2d560800 	ldclcs	8, cr0, [r6, #-0]
    3434:	00080800 	andeq	r0, r8, r0, lsl #16
    3438:	00910073 	addseq	r0, r1, r3, ror r0
    343c:	9f40231c 	svcls	0x0040231c
	...
    3448:	08002cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, sp}
    344c:	08002cce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, fp, sp}
    3450:	9f300002 	svcls	0x00300002
    3454:	08002cce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, fp, sp}
    3458:	08002cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp, sp}
    345c:	dc520001 	mrrcle	0, 0, r0, r2, cr1
    3460:	e208002c 	and	r0, r8, #44	; 0x2c
    3464:	0308002c 	movweq	r0, #32812	; 0x802c
    3468:	9f7f7200 	svcls	0x007f7200
    346c:	08002ce2 	stmdaeq	r0, {r1, r5, r6, r7, sl, fp, sp}
    3470:	08002ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp, sp}
    3474:	e8520001 	ldmda	r2, {r0}^
    3478:	f808002c 			; <UNDEFINED> instruction: 0xf808002c
    347c:	0308002c 	movweq	r0, #32812	; 0x802c
    3480:	9f017200 	svcls	0x00017200
    3484:	08002cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, sp}
    3488:	08002d00 	stmdaeq	r0, {r8, sl, fp, sp}
    348c:	00720009 	rsbseq	r0, r2, r9
    3490:	231c0091 	tstcs	ip, #145	; 0x91
    3494:	009f01a1 	addseq	r0, pc, r1, lsr #3
    3498:	0a08002d 	beq	203554 <__Stack_Size+0x202d54>
    349c:	0908002d 	stmdbeq	r8, {r0, r2, r3, r5}
    34a0:	91007200 	mrsls	r7, R8_usr
    34a4:	a0231c00 	eorge	r1, r3, r0, lsl #24
    34a8:	2d0a9f01 	stccs	15, cr9, [sl, #-4]
    34ac:	2d0c0800 	stccs	8, cr0, [ip, #-0]
    34b0:	00090800 	andeq	r0, r9, r0, lsl #16
    34b4:	00910072 	addseq	r0, r1, r2, ror r0
    34b8:	01a1231c 			; <UNDEFINED> instruction: 0x01a1231c
    34bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    34c0:	00000000 	andeq	r0, r0, r0
    34c4:	002d5c00 	eoreq	r5, sp, r0, lsl #24
    34c8:	002dac08 	eoreq	sl, sp, r8, lsl #24
    34cc:	53000108 	movwpl	r0, #264	; 0x108
    34d0:	08002db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, sp}
    34d4:	08002dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, sp}
    34d8:	00520001 	subseq	r0, r2, r1
    34dc:	00000000 	andeq	r0, r0, r0
    34e0:	5c000000 	stcpl	0, cr0, [r0], {-0}
    34e4:	b808002d 	stmdalt	r8, {r0, r2, r3, r5}
    34e8:	0108002d 	tsteq	r8, sp, lsr #32
    34ec:	2db85400 	cfldrscs	mvf5, [r8]
    34f0:	2dbe0800 	ldccs	8, cr0, [lr]
    34f4:	00020800 	andeq	r0, r2, r0, lsl #16
    34f8:	2dbe9f30 	ldccs	15, cr9, [lr, #192]!	; 0xc0
    34fc:	2dc60800 	stclcs	8, cr0, [r6]
    3500:	00090800 	andeq	r0, r9, r0, lsl #16
    3504:	00910073 	addseq	r0, r1, r3, ror r0
    3508:	01a0231c 	lsleq	r2, ip, r3
    350c:	002dc69f 	mlaeq	sp, pc, r6, ip	; <UNPREDICTABLE>
    3510:	002dcc08 	eoreq	ip, sp, r8, lsl #24
    3514:	73000908 	movwvc	r0, #2312	; 0x908
    3518:	1c009100 	stfned	f1, [r0], {-0}
    351c:	9f019f23 	svcls	0x00019f23
    3520:	08002dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, sp}
    3524:	08002dd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, sl, fp, sp}
    3528:	00730009 	rsbseq	r0, r3, r9
    352c:	231c0091 	tstcs	ip, #145	; 0x91
    3530:	009f01a0 	addseq	r0, pc, r0, lsr #3
    3534:	00000000 	andeq	r0, r0, r0
    3538:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    353c:	6208002d 	andvs	r0, r8, #45	; 0x2d
    3540:	0208002d 	andeq	r0, r8, #45	; 0x2d
    3544:	629f3000 	addsvs	r3, pc, #0
    3548:	6c08002d 	stcvs	0, cr0, [r8], {45}	; 0x2d
    354c:	0108002d 	tsteq	r8, sp, lsr #32
    3550:	2d6c5200 	sfmcs	f5, 2, [ip, #-0]
    3554:	2d720800 	ldclcs	8, cr0, [r2, #-0]
    3558:	00030800 	andeq	r0, r3, r0, lsl #16
    355c:	729f7f72 	addsvc	r7, pc, #456	; 0x1c8
    3560:	7808002d 	stmdavc	r8, {r0, r2, r3, r5}
    3564:	0108002d 	tsteq	r8, sp, lsr #32
    3568:	2d785200 	lfmcs	f5, 2, [r8, #-0]
    356c:	2d840800 	stccs	8, cr0, [r4]
    3570:	00030800 	andeq	r0, r3, r0, lsl #16
    3574:	849f0172 	ldrhi	r0, [pc], #370	; 357c <__Stack_Size+0x2d7c>
    3578:	8c08002d 	stchi	0, cr0, [r8], {45}	; 0x2d
    357c:	0808002d 	stmdaeq	r8, {r0, r2, r3, r5}
    3580:	91007200 	mrsls	r7, R8_usr
    3584:	41231c00 	teqmi	r3, r0, lsl #24
    3588:	002d8c9f 	mlaeq	sp, pc, ip, r8	; <UNPREDICTABLE>
    358c:	002d9608 	eoreq	r9, sp, r8, lsl #12
    3590:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    3594:	1c009100 	stfned	f1, [r0], {-0}
    3598:	969f4023 	ldrls	r4, [pc], r3, lsr #32
    359c:	9808002d 	stmdals	r8, {r0, r2, r3, r5}
    35a0:	0808002d 	stmdaeq	r8, {r0, r2, r3, r5}
    35a4:	91007200 	mrsls	r7, R8_usr
    35a8:	41231c00 	teqmi	r3, r0, lsl #24
    35ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    35b0:	00000000 	andeq	r0, r0, r0
    35b4:	002dd800 	eoreq	sp, sp, r0, lsl #16
    35b8:	002e2808 	eoreq	r2, lr, r8, lsl #16
    35bc:	53000108 	movwpl	r0, #264	; 0x108
    35c0:	08002e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, sp}
    35c4:	08002e56 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, fp, sp}
    35c8:	00520001 	subseq	r0, r2, r1
    35cc:	00000000 	andeq	r0, r0, r0
    35d0:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    35d4:	3408002d 	strcc	r0, [r8], #-45	; 0x2d
    35d8:	0108002e 	tsteq	r8, lr, lsr #32
    35dc:	2e345400 	cfabsscs	mvf5, mvf4
    35e0:	2e3a0800 	cdpcs	8, 3, cr0, cr10, cr0, {0}
    35e4:	00020800 	andeq	r0, r2, r0, lsl #16
    35e8:	2e3a9f30 	mrccs	15, 1, r9, cr10, cr0, {1}
    35ec:	2e440800 	cdpcs	8, 4, cr0, cr4, cr0, {0}
    35f0:	00080800 	andeq	r0, r8, r0, lsl #16
    35f4:	00910073 	addseq	r0, r1, r3, ror r0
    35f8:	9f40231c 	svcls	0x0040231c
    35fc:	08002e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, sp}
    3600:	08002e4a 	stmdaeq	r0, {r1, r3, r6, r9, sl, fp, sp}
    3604:	00730008 	rsbseq	r0, r3, r8
    3608:	231c0091 	tstcs	ip, #145	; 0x91
    360c:	2e4a9f3f 	mcrcs	15, 2, r9, cr10, cr15, {1}
    3610:	2e500800 	cdpcs	8, 5, cr0, cr0, cr0, {0}
    3614:	00080800 	andeq	r0, r8, r0, lsl #16
    3618:	00910073 	addseq	r0, r1, r3, ror r0
    361c:	9f40231c 	svcls	0x0040231c
	...
    3628:	08002ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, sp}
    362c:	08002de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, sp}
    3630:	9f300002 	svcls	0x00300002
    3634:	08002de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, sp}
    3638:	08002dee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl, fp, sp}
    363c:	ee520001 	cdp	0, 5, cr0, cr2, cr1, {0}
    3640:	f408002d 	vst4.8	{d0-d3}, [r8 :128]!
    3644:	0308002d 	movweq	r0, #32813	; 0x802d
    3648:	9f7f7200 	svcls	0x007f7200
    364c:	08002df4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, fp, sp}
    3650:	08002dfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, fp, sp}
    3654:	fa520001 	blx	1483660 <__Stack_Size+0x1482e60>
    3658:	0608002d 	streq	r0, [r8], -sp, lsr #32
    365c:	0308002e 	movweq	r0, #32814	; 0x802e
    3660:	9f017200 	svcls	0x00017200
    3664:	08002e06 	stmdaeq	r0, {r1, r2, r9, sl, fp, sp}
    3668:	08002e0e 	stmdaeq	r0, {r1, r2, r3, r9, sl, fp, sp}
    366c:	00720009 	rsbseq	r0, r2, r9
    3670:	231c0091 	tstcs	ip, #145	; 0x91
    3674:	0e9f01a1 	fmleq<illegal precision>p	f0, f7, f1
    3678:	1808002e 	stmdane	r8, {r1, r2, r3, r5}
    367c:	0908002e 	stmdbeq	r8, {r1, r2, r3, r5}
    3680:	91007200 	mrsls	r7, R8_usr
    3684:	a0231c00 	eorge	r1, r3, r0, lsl #24
    3688:	2e189f01 	cdpcs	15, 1, cr9, cr8, cr1, {0}
    368c:	2e1a0800 	cdpcs	8, 1, cr0, cr10, cr0, {0}
    3690:	00090800 	andeq	r0, r9, r0, lsl #16
    3694:	00910072 	addseq	r0, r1, r2, ror r0
    3698:	01a1231c 			; <UNDEFINED> instruction: 0x01a1231c
    369c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    36a0:	00000000 	andeq	r0, r0, r0
    36a4:	002e5600 	eoreq	r5, lr, r0, lsl #12
    36a8:	002ea208 	eoreq	sl, lr, r8, lsl #4
    36ac:	53000108 	movwpl	r0, #264	; 0x108
    36b0:	08002eae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, fp, sp}
    36b4:	08002ece 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, fp, sp}
    36b8:	00520001 	subseq	r0, r2, r1
    36bc:	00000000 	andeq	r0, r0, r0
    36c0:	56000000 	strpl	r0, [r0], -r0
    36c4:	ae08002e 	cdpge	0, 0, cr0, cr8, cr14, {1}
    36c8:	0108002e 	tsteq	r8, lr, lsr #32
    36cc:	2eae5400 	cdpcs	4, 10, cr5, cr14, cr0, {0}
    36d0:	2eb40800 	cdpcs	8, 11, cr0, cr4, cr0, {0}
    36d4:	00020800 	andeq	r0, r2, r0, lsl #16
    36d8:	2eb49f30 	mrccs	15, 5, r9, cr4, cr0, {1}
    36dc:	2ebc0800 	cdpcs	8, 11, cr0, cr12, cr0, {0}
    36e0:	00090800 	andeq	r0, r9, r0, lsl #16
    36e4:	00910073 	addseq	r0, r1, r3, ror r0
    36e8:	01a0231c 	lsleq	r2, ip, r3
    36ec:	002ebc9f 	mlaeq	lr, pc, ip, fp	; <UNPREDICTABLE>
    36f0:	002ec208 	eoreq	ip, lr, r8, lsl #4
    36f4:	73000908 	movwvc	r0, #2312	; 0x908
    36f8:	1c009100 	stfned	f1, [r0], {-0}
    36fc:	9f019f23 	svcls	0x00019f23
    3700:	08002ec2 	stmdaeq	r0, {r1, r6, r7, r9, sl, fp, sp}
    3704:	08002ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, sp}
    3708:	00730009 	rsbseq	r0, r3, r9
    370c:	231c0091 	tstcs	ip, #145	; 0x91
    3710:	009f01a0 	addseq	r0, pc, r0, lsr #3
    3714:	00000000 	andeq	r0, r0, r0
    3718:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    371c:	5c08002e 	stcpl	0, cr0, [r8], {46}	; 0x2e
    3720:	0208002e 	andeq	r0, r8, #46	; 0x2e
    3724:	5c9f3000 	ldcpl	0, cr3, [pc], {0}
    3728:	6608002e 	strvs	r0, [r8], -lr, lsr #32
    372c:	0108002e 	tsteq	r8, lr, lsr #32
    3730:	2e665200 	cdpcs	2, 6, cr5, cr6, cr0, {0}
    3734:	2e6c0800 	cdpcs	8, 6, cr0, cr12, cr0, {0}
    3738:	00030800 	andeq	r0, r3, r0, lsl #16
    373c:	6c9f7f72 	ldcvs	15, cr7, [pc], {114}	; 0x72
    3740:	7208002e 	andvc	r0, r8, #46	; 0x2e
    3744:	0108002e 	tsteq	r8, lr, lsr #32
    3748:	2e725200 	cdpcs	2, 7, cr5, cr2, cr0, {0}
    374c:	2e7e0800 	cdpcs	8, 7, cr0, cr14, cr0, {0}
    3750:	00030800 	andeq	r0, r3, r0, lsl #16
    3754:	7e9f0172 	mrcvc	1, 4, r0, cr15, cr2, {3}
    3758:	8608002e 	strhi	r0, [r8], -lr, lsr #32
    375c:	0808002e 	stmdaeq	r8, {r1, r2, r3, r5}
    3760:	91007200 	mrsls	r7, R8_usr
    3764:	41231c00 	teqmi	r3, r0, lsl #24
    3768:	002e869f 	mlaeq	lr, pc, r6, r8	; <UNPREDICTABLE>
    376c:	002e9008 	eoreq	r9, lr, r8
    3770:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    3774:	1c009100 	stfned	f1, [r0], {-0}
    3778:	909f4023 	addsls	r4, pc, r3, lsr #32
    377c:	9208002e 	andls	r0, r8, #46	; 0x2e
    3780:	0808002e 	stmdaeq	r8, {r1, r2, r3, r5}
    3784:	91007200 	mrsls	r7, R8_usr
    3788:	41231c00 	teqmi	r3, r0, lsl #24
    378c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3790:	00000000 	andeq	r0, r0, r0
    3794:	002ece00 	eoreq	ip, lr, r0, lsl #28
    3798:	002f1e08 	eoreq	r1, pc, r8, lsl #28
    379c:	53000108 	movwpl	r0, #264	; 0x108
    37a0:	08002f2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, sl, fp, sp}
    37a4:	08002f4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sl, fp, sp}
    37a8:	00520001 	subseq	r0, r2, r1
    37ac:	00000000 	andeq	r0, r0, r0
    37b0:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    37b4:	2e08002e 	cdpcs	0, 0, cr0, cr8, cr14, {1}
    37b8:	0108002f 	tsteq	r8, pc, lsr #32
    37bc:	2f2e5400 	svccs	0x002e5400
    37c0:	2f340800 	svccs	0x00340800
    37c4:	00020800 	andeq	r0, r2, r0, lsl #16
    37c8:	2f349f30 	svccs	0x00349f30
    37cc:	2f3c0800 	svccs	0x003c0800
    37d0:	00080800 	andeq	r0, r8, r0, lsl #16
    37d4:	00910073 	addseq	r0, r1, r3, ror r0
    37d8:	9f40231c 	svcls	0x0040231c
    37dc:	08002f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, sp}
    37e0:	08002f42 	stmdaeq	r0, {r1, r6, r8, r9, sl, fp, sp}
    37e4:	00730008 	rsbseq	r0, r3, r8
    37e8:	231c0091 	tstcs	ip, #145	; 0x91
    37ec:	2f429f3f 	svccs	0x00429f3f
    37f0:	2f480800 	svccs	0x00480800
    37f4:	00080800 	andeq	r0, r8, r0, lsl #16
    37f8:	00910073 	addseq	r0, r1, r3, ror r0
    37fc:	9f40231c 	svcls	0x0040231c
	...
    3808:	08002ed2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, fp, sp}
    380c:	08002ed6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, fp, sp}
    3810:	9f300002 	svcls	0x00300002
    3814:	08002ed6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, fp, sp}
    3818:	08002ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, sp}
    381c:	e4520001 	ldrb	r0, [r2], #-1
    3820:	ea08002e 	b	2038e0 <__Stack_Size+0x2030e0>
    3824:	0308002e 	movweq	r0, #32814	; 0x802e
    3828:	9f7f7200 	svcls	0x007f7200
    382c:	08002eea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, fp, sp}
    3830:	08002ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, sp}
    3834:	f0520001 			; <UNDEFINED> instruction: 0xf0520001
    3838:	fc08002e 	stc2	0, cr0, [r8], {46}	; 0x2e
    383c:	0308002e 	movweq	r0, #32814	; 0x802e
    3840:	9f017200 	svcls	0x00017200
    3844:	08002efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, sp}
    3848:	08002f04 	stmdaeq	r0, {r2, r8, r9, sl, fp, sp}
    384c:	00720009 	rsbseq	r0, r2, r9
    3850:	231c0091 	tstcs	ip, #145	; 0x91
    3854:	049f01a1 	ldreq	r0, [pc], #417	; 385c <__Stack_Size+0x305c>
    3858:	0e08002f 	cdpeq	0, 0, cr0, cr8, cr15, {1}
    385c:	0908002f 	stmdbeq	r8, {r0, r1, r2, r3, r5}
    3860:	91007200 	mrsls	r7, R8_usr
    3864:	a0231c00 	eorge	r1, r3, r0, lsl #24
    3868:	2f0e9f01 	svccs	0x000e9f01
    386c:	2f100800 	svccs	0x00100800
    3870:	00090800 	andeq	r0, r9, r0, lsl #16
    3874:	00910072 	addseq	r0, r1, r2, ror r0
    3878:	01a1231c 			; <UNDEFINED> instruction: 0x01a1231c
    387c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3880:	00000000 	andeq	r0, r0, r0
    3884:	002f4e00 	eoreq	r4, pc, r0, lsl #28
    3888:	002f9808 	eoreq	r9, pc, r8, lsl #16
    388c:	53000108 	movwpl	r0, #264	; 0x108
    3890:	08002fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, sp}
    3894:	08002fbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, sl, fp, sp}
    3898:	00520001 	subseq	r0, r2, r1
    389c:	00000000 	andeq	r0, r0, r0
    38a0:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    38a4:	a408002f 	strge	r0, [r8], #-47	; 0x2f
    38a8:	0108002f 	tsteq	r8, pc, lsr #32
    38ac:	2fa45400 	svccs	0x00a45400
    38b0:	2faa0800 	svccs	0x00aa0800
    38b4:	00020800 	andeq	r0, r2, r0, lsl #16
    38b8:	2faa9f30 	svccs	0x00aa9f30
    38bc:	2fb20800 	svccs	0x00b20800
    38c0:	00090800 	andeq	r0, r9, r0, lsl #16
    38c4:	00910073 	addseq	r0, r1, r3, ror r0
    38c8:	0180231c 	orreq	r2, r0, ip, lsl r3
    38cc:	002fb29f 	mlaeq	pc, pc, r2, fp	; <UNPREDICTABLE>
    38d0:	002fb808 	eoreq	fp, pc, r8, lsl #16
    38d4:	73000808 	movwvc	r0, #2056	; 0x808
    38d8:	1c009100 	stfned	f1, [r0], {-0}
    38dc:	b89f7f23 	ldmlt	pc, {r0, r1, r5, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    38e0:	bc08002f 	stclt	0, cr0, [r8], {47}	; 0x2f
    38e4:	0908002f 	stmdbeq	r8, {r0, r1, r2, r3, r5}
    38e8:	91007300 	mrsls	r7, LR_irq
    38ec:	80231c00 	eorhi	r1, r3, r0, lsl #24
    38f0:	00009f01 	andeq	r9, r0, r1, lsl #30
    38f4:	00000000 	andeq	r0, r0, r0
    38f8:	2f500000 	svccs	0x00500000
    38fc:	2f540800 	svccs	0x00540800
    3900:	00020800 	andeq	r0, r2, r0, lsl #16
    3904:	2f549f30 	svccs	0x00549f30
    3908:	2f5e0800 	svccs	0x005e0800
    390c:	00010800 	andeq	r0, r1, r0, lsl #16
    3910:	002f5e52 	eoreq	r5, pc, r2, asr lr	; <UNPREDICTABLE>
    3914:	002f6408 	eoreq	r6, pc, r8, lsl #8
    3918:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    391c:	2f649f7f 	svccs	0x00649f7f
    3920:	2f6a0800 	svccs	0x006a0800
    3924:	00010800 	andeq	r0, r1, r0, lsl #16
    3928:	002f6a52 	eoreq	r6, pc, r2, asr sl	; <UNPREDICTABLE>
    392c:	002f7608 	eoreq	r7, pc, r8, lsl #12
    3930:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    3934:	2f769f01 	svccs	0x00769f01
    3938:	2f7e0800 	svccs	0x007e0800
    393c:	00080800 	andeq	r0, r8, r0, lsl #16
    3940:	00910072 	addseq	r0, r1, r2, ror r0
    3944:	9f61231c 	svcls	0x0061231c
    3948:	08002f7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, sp}
    394c:	08002f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, sp}
    3950:	00720008 	rsbseq	r0, r2, r8
    3954:	231c0091 	tstcs	ip, #145	; 0x91
    3958:	2f889f60 	svccs	0x00889f60
    395c:	2f8a0800 	svccs	0x008a0800
    3960:	00080800 	andeq	r0, r8, r0, lsl #16
    3964:	00910072 	addseq	r0, r1, r2, ror r0
    3968:	9f61231c 	svcls	0x0061231c
	...
    3974:	08002fba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl, fp, sp}
    3978:	08002fc0 	stmdaeq	r0, {r6, r7, r8, r9, sl, fp, sp}
    397c:	9f330002 	svcls	0x00330002
    3980:	08002fc0 	stmdaeq	r0, {r6, r7, r8, r9, sl, fp, sp}
    3984:	08003118 	stmdaeq	r0, {r3, r4, r8, ip, sp}
    3988:	9f340002 	svcls	0x00340002
	...
    3994:	08002fd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, fp, sp}
    3998:	08002ff6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp}
    399c:	f6520001 			; <UNDEFINED> instruction: 0xf6520001
    39a0:	0008002f 	andeq	r0, r8, pc, lsr #32
    39a4:	01080030 	tsteq	r8, r0, lsr r0
    39a8:	30085100 	andcc	r5, r8, r0, lsl #2
    39ac:	30260800 	eorcc	r0, r6, r0, lsl #16
    39b0:	00010800 	andeq	r0, r1, r0, lsl #16
    39b4:	00000052 	andeq	r0, r0, r2, asr r0
    39b8:	00000000 	andeq	r0, r0, r0
    39bc:	002fd000 	eoreq	sp, pc, r0
    39c0:	002fe008 	eoreq	lr, pc, r8
    39c4:	53000108 	movwpl	r0, #264	; 0x108
    39c8:	08002fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, sp}
    39cc:	08002fe6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, fp, sp}
    39d0:	7f730003 	svcvc	0x00730003
    39d4:	002fe69f 	mlaeq	pc, pc, r6, lr	; <UNPREDICTABLE>
    39d8:	002ff208 	eoreq	pc, pc, r8, lsl #4
    39dc:	53000108 	movwpl	r0, #264	; 0x108
    39e0:	08003008 	stmdaeq	r0, {r3, ip, sp}
    39e4:	08003010 	stmdaeq	r0, {r4, ip, sp}
    39e8:	00730009 	rsbseq	r0, r3, r9
    39ec:	231c0091 	tstcs	ip, #145	; 0x91
    39f0:	109f0180 	addsne	r0, pc, r0, lsl #3
    39f4:	16080030 			; <UNDEFINED> instruction: 0x16080030
    39f8:	08080030 	stmdaeq	r8, {r4, r5}
    39fc:	91007300 	mrsls	r7, LR_irq
    3a00:	7f231c00 	svcvc	0x00231c00
    3a04:	0030169f 	mlaseq	r0, pc, r6, r1	; <UNPREDICTABLE>
    3a08:	00302008 	eorseq	r2, r0, r8
    3a0c:	73000908 	movwvc	r0, #2312	; 0x908
    3a10:	1c009100 	stfned	f1, [r0], {-0}
    3a14:	9f018023 	svcls	0x00018023
	...
    3a20:	08003026 	stmdaeq	r0, {r1, r2, r5, ip, sp}
    3a24:	08003076 	stmdaeq	r0, {r1, r2, r4, r5, r6, ip, sp}
    3a28:	82530001 	subshi	r0, r3, #1
    3a2c:	a4080030 	strge	r0, [r8], #-48	; 0x30
    3a30:	01080030 	tsteq	r8, r0, lsr r0
    3a34:	00005200 	andeq	r5, r0, r0, lsl #4
    3a38:	00000000 	andeq	r0, r0, r0
    3a3c:	30260000 	eorcc	r0, r6, r0
    3a40:	30820800 	addcc	r0, r2, r0, lsl #16
    3a44:	00010800 	andeq	r0, r1, r0, lsl #16
    3a48:	00308254 	eorseq	r8, r0, r4, asr r2
    3a4c:	00308808 	eorseq	r8, r0, r8, lsl #16
    3a50:	30000208 	andcc	r0, r0, r8, lsl #4
    3a54:	0030889f 	mlaseq	r0, pc, r8, r8	; <UNPREDICTABLE>
    3a58:	00309008 	eorseq	r9, r0, r8
    3a5c:	73000808 	movwvc	r0, #2056	; 0x808
    3a60:	1c009100 	stfned	f1, [r0], {-0}
    3a64:	909f6023 	addsls	r6, pc, r3, lsr #32
    3a68:	96080030 			; <UNDEFINED> instruction: 0x96080030
    3a6c:	08080030 	stmdaeq	r8, {r4, r5}
    3a70:	91007300 	mrsls	r7, LR_irq
    3a74:	5f231c00 	svcpl	0x00231c00
    3a78:	0030969f 	mlaseq	r0, pc, r6, r9	; <UNPREDICTABLE>
    3a7c:	00309c08 	eorseq	r9, r0, r8, lsl #24
    3a80:	73000808 	movwvc	r0, #2056	; 0x808
    3a84:	1c009100 	stfned	f1, [r0], {-0}
    3a88:	009f6023 	addseq	r6, pc, r3, lsr #32
    3a8c:	00000000 	andeq	r0, r0, r0
    3a90:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    3a94:	2e080030 	mcrcs	0, 0, r0, cr8, cr0, {1}
    3a98:	02080030 	andeq	r0, r8, #48	; 0x30
    3a9c:	2e9f3000 	cdpcs	0, 9, cr3, cr15, cr0, {0}
    3aa0:	3c080030 	stccc	0, cr0, [r8], {48}	; 0x30
    3aa4:	01080030 	tsteq	r8, r0, lsr r0
    3aa8:	303c5200 	eorscc	r5, ip, r0, lsl #4
    3aac:	30420800 	subcc	r0, r2, r0, lsl #16
    3ab0:	00030800 	andeq	r0, r3, r0, lsl #16
    3ab4:	429f7f72 	addsmi	r7, pc, #456	; 0x1c8
    3ab8:	48080030 	stmdami	r8, {r4, r5}
    3abc:	01080030 	tsteq	r8, r0, lsr r0
    3ac0:	30485200 	subcc	r5, r8, r0, lsl #4
    3ac4:	30540800 	subscc	r0, r4, r0, lsl #16
    3ac8:	00030800 	andeq	r0, r3, r0, lsl #16
    3acc:	549f0172 	ldrpl	r0, [pc], #370	; 3ad4 <__Stack_Size+0x32d4>
    3ad0:	5c080030 	stcpl	0, cr0, [r8], {48}	; 0x30
    3ad4:	09080030 	stmdbeq	r8, {r4, r5}
    3ad8:	91007200 	mrsls	r7, R8_usr
    3adc:	a1231c00 	teqge	r3, r0, lsl #24
    3ae0:	305c9f01 	subscc	r9, ip, r1, lsl #30
    3ae4:	30660800 	rsbcc	r0, r6, r0, lsl #16
    3ae8:	00090800 	andeq	r0, r9, r0, lsl #16
    3aec:	00910072 	addseq	r0, r1, r2, ror r0
    3af0:	01a0231c 	lsleq	r2, ip, r3
    3af4:	0030669f 	mlaseq	r0, pc, r6, r6	; <UNPREDICTABLE>
    3af8:	00306808 	eorseq	r6, r0, r8, lsl #16
    3afc:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    3b00:	1c009100 	stfned	f1, [r0], {-0}
    3b04:	9f01a123 	svcls	0x0001a123
	...
    3b10:	080030a4 	stmdaeq	r0, {r2, r5, r7, ip, sp}
    3b14:	080030ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, ip, sp}
    3b18:	f4530001 			; <UNDEFINED> instruction: 0xf4530001
    3b1c:	18080030 	stmdane	r8, {r4, r5}
    3b20:	01080031 	tsteq	r8, r1, lsr r0
    3b24:	00005200 	andeq	r5, r0, r0, lsl #4
    3b28:	00000000 	andeq	r0, r0, r0
    3b2c:	30a40000 	adccc	r0, r4, r0
    3b30:	30f40800 	rscscc	r0, r4, r0, lsl #16
    3b34:	00010800 	andeq	r0, r1, r0, lsl #16
    3b38:	0030f450 	eorseq	pc, r0, r0, asr r4	; <UNPREDICTABLE>
    3b3c:	00310008 	eorseq	r0, r1, r8
    3b40:	30000208 	andcc	r0, r0, r8, lsl #4
    3b44:	0031009f 	mlaseq	r1, pc, r0, r0	; <UNPREDICTABLE>
    3b48:	00310808 	eorseq	r0, r1, r8, lsl #16
    3b4c:	53000108 	movwpl	r0, #264	; 0x108
    3b50:	08003108 	stmdaeq	r0, {r3, r8, ip, sp}
    3b54:	0800310e 	stmdaeq	r0, {r1, r2, r3, r8, ip, sp}
    3b58:	7f730003 	svcvc	0x00730003
    3b5c:	00310e9f 	mlaseq	r1, pc, lr, r0	; <UNPREDICTABLE>
    3b60:	00311808 	eorseq	r1, r1, r8, lsl #16
    3b64:	53000108 	movwpl	r0, #264	; 0x108
	...
    3b70:	080030a6 	stmdaeq	r0, {r1, r2, r5, r7, ip, sp}
    3b74:	080030aa 	stmdaeq	r0, {r1, r3, r5, r7, ip, sp}
    3b78:	9f300002 	svcls	0x00300002
    3b7c:	080030aa 	stmdaeq	r0, {r1, r3, r5, r7, ip, sp}
    3b80:	080030b2 	stmdaeq	r0, {r1, r4, r5, r7, ip, sp}
    3b84:	b2520001 	subslt	r0, r2, #1
    3b88:	b8080030 	stmdalt	r8, {r4, r5}
    3b8c:	03080030 	movweq	r0, #32816	; 0x8030
    3b90:	9f7f7200 	svcls	0x007f7200
    3b94:	080030b8 	stmdaeq	r0, {r3, r4, r5, r7, ip, sp}
    3b98:	080030be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, ip, sp}
    3b9c:	be520001 	cdplt	0, 5, cr0, cr2, cr1, {0}
    3ba0:	ca080030 	bgt	203c68 <__Stack_Size+0x203468>
    3ba4:	03080030 	movweq	r0, #32816	; 0x8030
    3ba8:	9f017200 	svcls	0x00017200
    3bac:	080030ca 	stmdaeq	r0, {r1, r3, r6, r7, ip, sp}
    3bb0:	080030d2 	stmdaeq	r0, {r1, r4, r6, r7, ip, sp}
    3bb4:	00720008 	rsbseq	r0, r2, r8
    3bb8:	231c0091 	tstcs	ip, #145	; 0x91
    3bbc:	30d29f61 	sbcscc	r9, r2, r1, ror #30
    3bc0:	30dc0800 	sbcscc	r0, ip, r0, lsl #16
    3bc4:	00080800 	andeq	r0, r8, r0, lsl #16
    3bc8:	00910072 	addseq	r0, r1, r2, ror r0
    3bcc:	9f60231c 	svcls	0x0060231c
    3bd0:	080030dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip, sp}
    3bd4:	080030de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, ip, sp}
    3bd8:	00720008 	rsbseq	r0, r2, r8
    3bdc:	231c0091 	tstcs	ip, #145	; 0x91
    3be0:	00009f61 	andeq	r9, r0, r1, ror #30
	...
    3bf0:	00010000 	andeq	r0, r1, r0
    3bf4:	00000050 	andeq	r0, r0, r0, asr r0
    3bf8:	00000000 	andeq	r0, r0, r0
    3bfc:	70000300 	andvc	r0, r0, r0, lsl #6
    3c00:	00009f7c 	andeq	r9, r0, ip, ror pc
    3c04:	00000000 	andeq	r0, r0, r0
    3c08:	00040000 	andeq	r0, r4, r0
    3c0c:	9f5001f3 	svcls	0x005001f3
	...
    3c20:	00510001 	subseq	r0, r1, r1
    3c24:	00000000 	andeq	r0, r0, r0
    3c28:	01000000 	mrseq	r0, (UNDEF: 0)
    3c2c:	00005200 	andeq	r5, r0, r0, lsl #4
    3c30:	00000000 	andeq	r0, r0, r0
    3c34:	00050000 	andeq	r0, r5, r0
    3c38:	25380072 	ldrcs	r0, [r8, #-114]!	; 0x72
    3c3c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c40:	00000000 	andeq	r0, r0, r0
    3c44:	72000700 	andvc	r0, r0, #0, 14
    3c48:	38253800 	stmdacc	r5!, {fp, ip, sp}
    3c4c:	00009f25 	andeq	r9, r0, r5, lsr #30
    3c50:	00000000 	andeq	r0, r0, r0
    3c54:	000a0000 	andeq	r0, sl, r0
    3c58:	405101f3 	ldrshmi	r0, [r1], #-19	; 0xffffffed
    3c5c:	38253825 	stmdacc	r5!, {r0, r2, r5, fp, ip, sp}
    3c60:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    3c70:	00020000 	andeq	r0, r2, r0
    3c74:	00009f30 	andeq	r9, r0, r0, lsr pc
    3c78:	00000000 	andeq	r0, r0, r0
    3c7c:	00020000 	andeq	r0, r2, r0
    3c80:	00009f32 	andeq	r9, r0, r2, lsr pc
    3c84:	00000000 	andeq	r0, r0, r0
    3c88:	00020000 	andeq	r0, r2, r0
    3c8c:	00009f33 	andeq	r9, r0, r3, lsr pc
    3c90:	00000000 	andeq	r0, r0, r0
    3c94:	00020000 	andeq	r0, r2, r0
    3c98:	00009f34 	andeq	r9, r0, r4, lsr pc
    3c9c:	00000000 	andeq	r0, r0, r0
    3ca0:	31180000 	tstcc	r8, r0
    3ca4:	31560800 	cmpcc	r6, r0, lsl #16
    3ca8:	00010800 	andeq	r0, r1, r0, lsl #16
    3cac:	00315650 	eorseq	r5, r1, r0, asr r6
    3cb0:	00329808 	eorseq	r9, r2, r8, lsl #16
    3cb4:	54000108 	strpl	r0, [r0], #-264	; 0x108
    3cb8:	08003298 	stmdaeq	r0, {r3, r4, r7, r9, ip, sp}
    3cbc:	080032a4 	stmdaeq	r0, {r2, r5, r7, r9, ip, sp}
    3cc0:	a4500001 	ldrbge	r0, [r0], #-1
    3cc4:	b2080032 	andlt	r0, r8, #50	; 0x32
    3cc8:	01080032 	tsteq	r8, r2, lsr r0
    3ccc:	32b25400 	adcscc	r5, r2, #0, 8
    3cd0:	32b80800 	adcscc	r0, r8, #0, 16
    3cd4:	00010800 	andeq	r0, r1, r0, lsl #16
    3cd8:	00000050 	andeq	r0, r0, r0, asr r0
    3cdc:	00000000 	andeq	r0, r0, r0
    3ce0:	00311800 	eorseq	r1, r1, r0, lsl #16
    3ce4:	00315808 	eorseq	r5, r1, r8, lsl #16
    3ce8:	51000108 	tstpl	r0, r8, lsl #2
    3cec:	08003158 	stmdaeq	r0, {r3, r4, r6, r8, ip, sp}
    3cf0:	08003298 	stmdaeq	r0, {r3, r4, r7, r9, ip, sp}
    3cf4:	98570001 	ldmdals	r7, {r0}^
    3cf8:	a4080032 	strge	r0, [r8], #-50	; 0x32
    3cfc:	01080032 	tsteq	r8, r2, lsr r0
    3d00:	32a45100 	adccc	r5, r4, #0, 2
    3d04:	32b20800 	adcscc	r0, r2, #0, 16
    3d08:	00010800 	andeq	r0, r1, r0, lsl #16
    3d0c:	0032b257 	eorseq	fp, r2, r7, asr r2
    3d10:	0032b808 	eorseq	fp, r2, r8, lsl #16
    3d14:	51000108 	tstpl	r0, r8, lsl #2
	...
    3d20:	08003118 	stmdaeq	r0, {r3, r4, r8, ip, sp}
    3d24:	08003128 	stmdaeq	r0, {r3, r5, r8, ip, sp}
    3d28:	28520001 	ldmdacs	r2, {r0}^
    3d2c:	10080031 	andne	r0, r8, r1, lsr r0
    3d30:	01080032 	tsteq	r8, r2, lsr r0
    3d34:	32105900 	andscc	r5, r0, #0, 18
    3d38:	32240800 	eorcc	r0, r4, #0, 16
    3d3c:	00030800 	andeq	r0, r3, r0, lsl #16
    3d40:	249f0179 	ldrcs	r0, [pc], #377	; 3d48 <__Stack_Size+0x3548>
    3d44:	98080032 	stmdals	r8, {r1, r4, r5}
    3d48:	04080032 	streq	r0, [r8], #-50	; 0x32
    3d4c:	5201f300 	andpl	pc, r1, #0, 6
    3d50:	0032989f 	mlaseq	r2, pc, r8, r9	; <UNPREDICTABLE>
    3d54:	0032b808 	eorseq	fp, r2, r8, lsl #16
    3d58:	59000108 	stmdbpl	r0, {r3, r8}
	...
    3d64:	08003118 	stmdaeq	r0, {r3, r4, r8, ip, sp}
    3d68:	0800312a 	stmdaeq	r0, {r1, r3, r5, r8, ip, sp}
    3d6c:	2a530001 	bcs	14c3d78 <__Stack_Size+0x14c3578>
    3d70:	ae080031 	mcrge	0, 0, r0, cr8, cr1, {1}
    3d74:	01080031 	tsteq	r8, r1, lsr r0
    3d78:	31ae5500 			; <UNDEFINED> instruction: 0x31ae5500
    3d7c:	31f20800 	mvnscc	r0, r0, lsl #16
    3d80:	00030800 	andeq	r0, r3, r0, lsl #16
    3d84:	f27fb491 	vqshl.s64	d27, d1, d31
    3d88:	98080031 	stmdals	r8, {r0, r4, r5}
    3d8c:	04080032 	streq	r0, [r8], #-50	; 0x32
    3d90:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    3d94:	0032989f 	mlaseq	r2, pc, r8, r9	; <UNPREDICTABLE>
    3d98:	0032b808 	eorseq	fp, r2, r8, lsl #16
    3d9c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    3da8:	08003154 	stmdaeq	r0, {r2, r4, r6, r8, ip, sp}
    3dac:	08003214 	stmdaeq	r0, {r2, r4, r9, ip, sp}
    3db0:	a4580001 	ldrbge	r0, [r8], #-1
    3db4:	b2080032 	andlt	r0, r8, #50	; 0x32
    3db8:	01080032 	tsteq	r8, r2, lsr r0
    3dbc:	00005800 	andeq	r5, r0, r0, lsl #16
    3dc0:	00000000 	andeq	r0, r0, r0
    3dc4:	316a0000 	cmncc	sl, r0
    3dc8:	321c0800 	andscc	r0, ip, #0, 16
    3dcc:	00010800 	andeq	r0, r1, r0, lsl #16
    3dd0:	0032a456 	eorseq	sl, r2, r6, asr r4
    3dd4:	0032b208 	eorseq	fp, r2, r8, lsl #4
    3dd8:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    3de4:	0800316a 	stmdaeq	r0, {r1, r3, r5, r6, r8, ip, sp}
    3de8:	08003228 	stmdaeq	r0, {r3, r5, r9, ip, sp}
    3dec:	285a0001 	ldmdacs	sl, {r0}^
    3df0:	2a080032 	bcs	203ec0 <__Stack_Size+0x2036c0>
    3df4:	03080032 	movweq	r0, #32818	; 0x8032
    3df8:	9f017a00 	svcls	0x00017a00
    3dfc:	080032a4 	stmdaeq	r0, {r2, r5, r7, r9, ip, sp}
    3e00:	080032b2 	stmdaeq	r0, {r1, r4, r5, r7, r9, ip, sp}
    3e04:	005a0001 	subseq	r0, sl, r1
    3e08:	00000000 	andeq	r0, r0, r0
    3e0c:	6a000000 	bvs	3e14 <__Stack_Size+0x3614>
    3e10:	ae080031 	mcrge	0, 0, r0, cr8, cr1, {1}
    3e14:	02080031 	andeq	r0, r8, #49	; 0x31
    3e18:	c29f3000 	addsgt	r3, pc, #0
    3e1c:	ce080031 	mcrgt	0, 0, r0, cr8, cr1, {1}
    3e20:	01080031 	tsteq	r8, r1, lsr r0
    3e24:	31ce5b00 	biccc	r5, lr, r0, lsl #22
    3e28:	31e40800 	mvncc	r0, r0, lsl #16
    3e2c:	00010800 	andeq	r0, r1, r0, lsl #16
    3e30:	0031e453 	eorseq	lr, r1, r3, asr r4
    3e34:	0031f208 	eorseq	pc, r1, r8, lsl #4
    3e38:	78000908 	stmdavc	r0, {r3, r8, fp}
    3e3c:	32253200 	eorcc	r3, r5, #0, 4
    3e40:	9f022324 	svcls	0x00022324
    3e44:	08003224 	stmdaeq	r0, {r2, r5, r9, ip, sp}
    3e48:	08003228 	stmdaeq	r0, {r3, r5, r9, ip, sp}
    3e4c:	7f7a0003 	svcvc	0x007a0003
    3e50:	0032289f 	mlaseq	r2, pc, r8, r2	; <UNPREDICTABLE>
    3e54:	00329008 	eorseq	r9, r2, r8
    3e58:	5a000108 	bpl	4280 <__Stack_Size+0x3a80>
    3e5c:	08003290 	stmdaeq	r0, {r4, r7, r9, ip, sp}
    3e60:	08003292 	stmdaeq	r0, {r1, r4, r7, r9, ip, sp}
    3e64:	017a0003 	cmneq	sl, r3
    3e68:	0032a49f 	mlaseq	r2, pc, r4, sl	; <UNPREDICTABLE>
    3e6c:	0032a608 	eorseq	sl, r2, r8, lsl #12
    3e70:	30000208 	andcc	r0, r0, r8, lsl #4
    3e74:	0032a69f 	mlaseq	r2, pc, r6, sl	; <UNPREDICTABLE>
    3e78:	0032b208 	eorseq	fp, r2, r8, lsl #4
    3e7c:	52000108 	andpl	r0, r0, #8, 2
	...
    3e88:	08003126 	stmdaeq	r0, {r1, r2, r5, r8, ip, sp}
    3e8c:	0800312a 	stmdaeq	r0, {r1, r3, r5, r8, ip, sp}
    3e90:	2a530001 	bcs	14c3e9c <__Stack_Size+0x14c369c>
    3e94:	ae080031 	mcrge	0, 0, r0, cr8, cr1, {1}
    3e98:	01080031 	tsteq	r8, r1, lsr r0
    3e9c:	31ae5500 			; <UNDEFINED> instruction: 0x31ae5500
    3ea0:	31f20800 	mvnscc	r0, r0, lsl #16
    3ea4:	00030800 	andeq	r0, r3, r0, lsl #16
    3ea8:	f27fb491 	vqshl.s64	d27, d1, d31
    3eac:	98080031 	stmdals	r8, {r0, r4, r5}
    3eb0:	04080032 	streq	r0, [r8], #-50	; 0x32
    3eb4:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    3eb8:	0032989f 	mlaseq	r2, pc, r8, r9	; <UNPREDICTABLE>
    3ebc:	0032b808 	eorseq	fp, r2, r8, lsl #16
    3ec0:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    3ecc:	08003126 	stmdaeq	r0, {r1, r2, r5, r8, ip, sp}
    3ed0:	0800312a 	stmdaeq	r0, {r1, r3, r5, r8, ip, sp}
    3ed4:	9f4f0002 	svcls	0x004f0002
    3ed8:	0800312a 	stmdaeq	r0, {r1, r3, r5, r8, ip, sp}
    3edc:	0800312e 	stmdaeq	r0, {r1, r2, r3, r5, r8, ip, sp}
    3ee0:	2e520001 	cdpcs	0, 5, cr0, cr2, cr1, {0}
    3ee4:	32080031 	andcc	r0, r8, #49	; 0x31
    3ee8:	03080031 	movweq	r0, #32817	; 0x8031
    3eec:	9f017200 	svcls	0x00017200
    3ef0:	08003132 	stmdaeq	r0, {r1, r4, r5, r8, ip, sp}
    3ef4:	08003144 	stmdaeq	r0, {r2, r6, r8, ip, sp}
    3ef8:	98520001 	ldmdals	r2, {r0}^
    3efc:	9c080032 	stcls	0, cr0, [r8], {50}	; 0x32
    3f00:	03080032 	movweq	r0, #32818	; 0x8032
    3f04:	9f017200 	svcls	0x00017200
    3f08:	0800329c 	stmdaeq	r0, {r2, r3, r4, r7, r9, ip, sp}
    3f0c:	080032a4 	stmdaeq	r0, {r2, r5, r7, r9, ip, sp}
    3f10:	f8090003 			; <UNDEFINED> instruction: 0xf8090003
    3f14:	0032b29f 	mlaseq	r2, pc, r2, fp	; <UNPREDICTABLE>
    3f18:	0032b808 	eorseq	fp, r2, r8, lsl #16
    3f1c:	09000308 	stmdbeq	r0, {r3, r8, r9}
    3f20:	00009ff8 	strdeq	r9, [r0], -r8
    3f24:	00000000 	andeq	r0, r0, r0
    3f28:	31380000 	teqcc	r8, r0
    3f2c:	313a0800 	teqcc	sl, r0, lsl #16
    3f30:	00050800 	andeq	r0, r5, r0, lsl #16
    3f34:	00720075 	rsbseq	r0, r2, r5, ror r0
    3f38:	00313a22 	eorseq	r3, r1, r2, lsr #20
    3f3c:	00313c08 	eorseq	r3, r1, r8, lsl #24
    3f40:	73000508 	movwvc	r0, #1288	; 0x508
    3f44:	9f253100 	svcls	0x00253100
    3f48:	0800329c 	stmdaeq	r0, {r2, r3, r4, r7, r9, ip, sp}
    3f4c:	080032a4 	stmdaeq	r0, {r2, r5, r7, r9, ip, sp}
    3f50:	7f750002 	svcvc	0x00750002
    3f54:	080032b2 	stmdaeq	r0, {r1, r4, r5, r7, r9, ip, sp}
    3f58:	080032b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, ip, sp}
    3f5c:	7f750002 	svcvc	0x00750002
	...
    3f68:	08003148 	stmdaeq	r0, {r3, r6, r8, ip, sp}
    3f6c:	08003166 	stmdaeq	r0, {r1, r2, r5, r6, r8, ip, sp}
    3f70:	665a0001 	ldrbvs	r0, [sl], -r1
    3f74:	10080031 	andne	r0, r8, r1, lsr r0
    3f78:	05080032 	streq	r0, [r8, #-50]	; 0x32
    3f7c:	33007900 	movwcc	r7, #2304	; 0x900
    3f80:	32109f24 	andscc	r9, r0, #36, 30	; 0x90
    3f84:	32240800 	eorcc	r0, r4, #0, 16
    3f88:	00050800 	andeq	r0, r5, r0, lsl #16
    3f8c:	24330179 	ldrtcs	r0, [r3], #-377	; 0x179
    3f90:	0032249f 	mlaseq	r2, pc, r4, r2	; <UNPREDICTABLE>
    3f94:	00329808 	eorseq	r9, r2, r8, lsl #16
    3f98:	f3000608 	vmax.u8	d0, d0, d8
    3f9c:	24335201 	ldrtcs	r5, [r3], #-513	; 0x201
    3fa0:	0032a49f 	mlaseq	r2, pc, r4, sl	; <UNPREDICTABLE>
    3fa4:	0032b208 	eorseq	fp, r2, r8, lsl #4
    3fa8:	79000508 	stmdbvc	r0, {r3, r8, sl}
    3fac:	9f243300 	svcls	0x00243300
	...
    3fb8:	08003148 	stmdaeq	r0, {r3, r6, r8, ip, sp}
    3fbc:	0800315a 	stmdaeq	r0, {r1, r3, r4, r6, r8, ip, sp}
    3fc0:	00520001 	subseq	r0, r2, r1
    3fc4:	00000000 	andeq	r0, r0, r0
    3fc8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    3fcc:	fe080031 	mcr2	0, 0, r0, cr8, cr1, {1}
    3fd0:	01080031 	tsteq	r8, r1, lsr r0
    3fd4:	32005200 	andcc	r5, r0, #0, 4
    3fd8:	32180800 	andscc	r0, r8, #0, 16
    3fdc:	00010800 	andeq	r0, r1, r0, lsl #16
    3fe0:	00000052 	andeq	r0, r0, r2, asr r0
    3fe4:	00000000 	andeq	r0, r0, r0
    3fe8:	0031f800 	eorseq	pc, r1, r0, lsl #16
    3fec:	00320408 	eorseq	r0, r2, r8, lsl #8
    3ff0:	53000108 	movwpl	r0, #264	; 0x108
    3ff4:	08003204 	stmdaeq	r0, {r2, r9, ip, sp}
    3ff8:	0800320a 	stmdaeq	r0, {r1, r3, r9, ip, sp}
    3ffc:	7f730003 	svcvc	0x00730003
    4000:	00320a9f 	mlaseq	r2, pc, sl, r0	; <UNPREDICTABLE>
    4004:	00322008 	eorseq	r2, r2, r8
    4008:	53000108 	movwpl	r0, #264	; 0x108
	...
    4014:	0800323c 	stmdaeq	r0, {r2, r3, r4, r5, r9, ip, sp}
    4018:	0800325a 	stmdaeq	r0, {r1, r3, r4, r6, r9, ip, sp}
    401c:	00500001 	subseq	r0, r0, r1
    4020:	00000000 	andeq	r0, r0, r0
    4024:	3c000000 	stccc	0, cr0, [r0], {-0}
    4028:	92080032 	andls	r0, r8, #50	; 0x32
    402c:	02080032 	andeq	r0, r8, #50	; 0x32
    4030:	009f3100 	addseq	r3, pc, r0, lsl #2
    4034:	00000000 	andeq	r0, r0, r0
    4038:	3c000000 	stccc	0, cr0, [r0], {-0}
    403c:	3e080032 	mcrcc	0, 0, r0, cr8, cr2, {1}
    4040:	02080032 	andeq	r0, r8, #50	; 0x32
    4044:	3e9f3000 	cdpcc	0, 9, cr3, cr15, cr0, {0}
    4048:	54080032 	strpl	r0, [r8], #-50	; 0x32
    404c:	01080032 	tsteq	r8, r2, lsr r0
    4050:	00005200 	andeq	r5, r0, r0, lsl #4
    4054:	00000000 	andeq	r0, r0, r0
    4058:	323c0000 	eorscc	r0, ip, #0
    405c:	323e0800 	eorscc	r0, lr, #0, 16
    4060:	00020800 	andeq	r0, r2, r0, lsl #16
    4064:	323e9f30 	eorscc	r9, lr, #48, 30	; 0xc0
    4068:	32480800 	subcc	r0, r8, #0, 16
    406c:	00010800 	andeq	r0, r1, r0, lsl #16
    4070:	00324853 	eorseq	r4, r2, r3, asr r8
    4074:	00324e08 	eorseq	r4, r2, r8, lsl #28
    4078:	73000308 	movwvc	r0, #776	; 0x308
    407c:	324e9f7f 	subcc	r9, lr, #508	; 0x1fc
    4080:	32520800 	subscc	r0, r2, #0, 16
    4084:	00010800 	andeq	r0, r1, r0, lsl #16
    4088:	00000053 	andeq	r0, r0, r3, asr r0
    408c:	00000000 	andeq	r0, r0, r0
    4090:	00325800 	eorseq	r5, r2, r0, lsl #16
    4094:	00329208 	eorseq	r9, r2, r8, lsl #4
    4098:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    40a4:	08003258 	stmdaeq	r0, {r3, r4, r6, r9, ip, sp}
    40a8:	0800325a 	stmdaeq	r0, {r1, r3, r4, r6, r9, ip, sp}
    40ac:	9f300002 	svcls	0x00300002
    40b0:	0800325a 	stmdaeq	r0, {r1, r3, r4, r6, r9, ip, sp}
    40b4:	08003262 	stmdaeq	r0, {r1, r5, r6, r9, ip, sp}
    40b8:	64520001 	ldrbvs	r0, [r2], #-1
    40bc:	74080032 	strvc	r0, [r8], #-50	; 0x32
    40c0:	01080032 	tsteq	r8, r2, lsr r0
    40c4:	32745200 	rsbscc	r5, r4, #0, 4
    40c8:	32760800 	rsbscc	r0, r6, #0, 16
    40cc:	00040800 	andeq	r0, r4, r0, lsl #16
    40d0:	9f1f0072 	svcls	0x001f0072
	...
    40dc:	08003258 	stmdaeq	r0, {r3, r4, r6, r9, ip, sp}
    40e0:	0800325a 	stmdaeq	r0, {r1, r3, r4, r6, r9, ip, sp}
    40e4:	9f300002 	svcls	0x00300002
    40e8:	0800325a 	stmdaeq	r0, {r1, r3, r4, r6, r9, ip, sp}
    40ec:	0800326a 	stmdaeq	r0, {r1, r3, r5, r6, r9, ip, sp}
    40f0:	6a530001 	bvs	14c40fc <__Stack_Size+0x14c38fc>
    40f4:	70080032 	andvc	r0, r8, r2, lsr r0
    40f8:	03080032 	movweq	r0, #32818	; 0x8032
    40fc:	9f7f7300 	svcls	0x007f7300
    4100:	08003270 	stmdaeq	r0, {r4, r5, r6, r9, ip, sp}
    4104:	08003278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, sp}
    4108:	00530001 	subseq	r0, r3, r1
    410c:	00000000 	andeq	r0, r0, r0
    4110:	72000000 	andvc	r0, r0, #0
    4114:	74080032 	strvc	r0, [r8], #-50	; 0x32
    4118:	01080032 	tsteq	r8, r2, lsr r0
    411c:	32745200 	rsbscc	r5, r4, #0, 4
    4120:	32760800 	rsbscc	r0, r6, #0, 16
    4124:	00040800 	andeq	r0, r4, r0, lsl #16
    4128:	9f1f0072 	svcls	0x001f0072
	...
    4134:	08003272 	stmdaeq	r0, {r1, r4, r5, r6, r9, ip, sp}
    4138:	08003292 	stmdaeq	r0, {r1, r4, r7, r9, ip, sp}
    413c:	005d0001 	subseq	r0, sp, r1
    4140:	00000000 	andeq	r0, r0, r0
    4144:	76000000 	strvc	r0, [r0], -r0
    4148:	92080032 	andls	r0, r8, #50	; 0x32
    414c:	01080032 	tsteq	r8, r2, lsr r0
    4150:	00005200 	andeq	r5, r0, r0, lsl #4
    4154:	00000000 	andeq	r0, r0, r0
    4158:	32760000 	rsbscc	r0, r6, #0
    415c:	32780800 	rsbscc	r0, r8, #0, 16
    4160:	00020800 	andeq	r0, r2, r0, lsl #16
    4164:	32789f30 	rsbscc	r9, r8, #48, 30	; 0xc0
    4168:	32920800 	addscc	r0, r2, #0, 16
    416c:	00010800 	andeq	r0, r1, r0, lsl #16
    4170:	00000053 	andeq	r0, r0, r3, asr r0
	...
    4180:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    418c:	00510001 	subseq	r0, r1, r1
    4190:	00000000 	andeq	r0, r0, r0
    4194:	01000000 	mrseq	r0, (UNDEF: 0)
    4198:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    41a8:	00010000 	andeq	r0, r1, r0
    41ac:	00000051 	andeq	r0, r0, r1, asr r0
    41b0:	00000000 	andeq	r0, r0, r0
    41b4:	53000100 	movwpl	r0, #256	; 0x100
	...
    41c0:	01f30004 	mvnseq	r0, r4
    41c4:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    41d4:	00010000 	andeq	r0, r1, r0
    41d8:	0000005d 	andeq	r0, r0, sp, asr r0
    41dc:	00000000 	andeq	r0, r0, r0
    41e0:	74000300 	strvc	r0, [r0], #-768	; 0x300
    41e4:	00009f60 	andeq	r9, r0, r0, ror #30
	...
    41f4:	00010000 	andeq	r0, r1, r0
    41f8:	00000050 	andeq	r0, r0, r0, asr r0
    41fc:	00000000 	andeq	r0, r0, r0
    4200:	f3000400 	vshl.u8	d0, d0, d0
    4204:	009f5001 	addseq	r5, pc, r1
    4208:	00000000 	andeq	r0, r0, r0
    420c:	01000000 	mrseq	r0, (UNDEF: 0)
    4210:	00005000 	andeq	r5, r0, r0
	...
    4220:	00010000 	andeq	r0, r1, r0
    4224:	00000051 	andeq	r0, r0, r1, asr r0
    4228:	00000000 	andeq	r0, r0, r0
    422c:	f3000400 	vshl.u8	d0, d0, d0
    4230:	009f5101 	addseq	r5, pc, r1, lsl #2
    4234:	00000000 	andeq	r0, r0, r0
    4238:	01000000 	mrseq	r0, (UNDEF: 0)
    423c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    424c:	00020000 	andeq	r0, r2, r0
    4250:	00009f30 	andeq	r9, r0, r0, lsr pc
    4254:	00000000 	andeq	r0, r0, r0
    4258:	00010000 	andeq	r0, r1, r0
    425c:	00000052 	andeq	r0, r0, r2, asr r0
    4260:	00000000 	andeq	r0, r0, r0
    4264:	72000800 	andvc	r0, r0, #0, 16
    4268:	72253100 	eorvc	r3, r5, #0, 2
    426c:	009f2100 	addseq	r2, pc, r0, lsl #2
    4270:	00000000 	andeq	r0, r0, r0
    4274:	02000000 	andeq	r0, r0, #0
    4278:	009f3000 	addseq	r3, pc, r0
    427c:	00000000 	andeq	r0, r0, r0
    4280:	01000000 	mrseq	r0, (UNDEF: 0)
    4284:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    4294:	00020000 	andeq	r0, r2, r0
    4298:	00009f30 	andeq	r9, r0, r0, lsr pc
    429c:	00000000 	andeq	r0, r0, r0
    42a0:	00020000 	andeq	r0, r2, r0
    42a4:	00009f30 	andeq	r9, r0, r0, lsr pc
    42a8:	00000000 	andeq	r0, r0, r0
    42ac:	00010000 	andeq	r0, r1, r0
    42b0:	00000053 	andeq	r0, r0, r3, asr r0
    42b4:	00000000 	andeq	r0, r0, r0
    42b8:	73000300 	movwvc	r0, #768	; 0x300
    42bc:	00009f7f 	andeq	r9, r0, pc, ror pc
    42c0:	00000000 	andeq	r0, r0, r0
    42c4:	00010000 	andeq	r0, r1, r0
    42c8:	00000053 	andeq	r0, r0, r3, asr r0
	...
    42d8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    42e4:	01f30004 	mvnseq	r0, r4
    42e8:	00009f51 	andeq	r9, r0, r1, asr pc
    42ec:	00000000 	andeq	r0, r0, r0
    42f0:	00010000 	andeq	r0, r1, r0
    42f4:	00000051 	andeq	r0, r0, r1, asr r0
	...
    4304:	52000100 	andpl	r0, r0, #0, 2
	...
    4310:	01f30004 	mvnseq	r0, r4
    4314:	00009f52 	andeq	r9, r0, r2, asr pc
    4318:	00000000 	andeq	r0, r0, r0
    431c:	00010000 	andeq	r0, r1, r0
    4320:	00000052 	andeq	r0, r0, r2, asr r0
	...
    4330:	53000100 	movwpl	r0, #256	; 0x100
	...
    433c:	01f30004 	mvnseq	r0, r4
    4340:	00009f53 	andeq	r9, r0, r3, asr pc
	...
    4350:	00010000 	andeq	r0, r1, r0
    4354:	00000053 	andeq	r0, r0, r3, asr r0
    4358:	00000000 	andeq	r0, r0, r0
    435c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    4368:	00560001 	subseq	r0, r6, r1
	...
    4378:	02000000 	andeq	r0, r0, #0
    437c:	009f3000 	addseq	r3, pc, r0
    4380:	00000000 	andeq	r0, r0, r0
    4384:	02000000 	andeq	r0, r0, #0
    4388:	009f3000 	addseq	r3, pc, r0
    438c:	00000000 	andeq	r0, r0, r0
    4390:	01000000 	mrseq	r0, (UNDEF: 0)
    4394:	00005300 	andeq	r5, r0, r0, lsl #6
    4398:	00000000 	andeq	r0, r0, r0
    439c:	32b80000 	adcscc	r0, r8, #0
    43a0:	32d60800 	sbcscc	r0, r6, #0, 16
    43a4:	00010800 	andeq	r0, r1, r0, lsl #16
    43a8:	0032d651 	eorseq	sp, r2, r1, asr r6
    43ac:	00331008 	eorseq	r1, r3, r8
    43b0:	f3000408 	vshl.u8	d0, d8, d0
    43b4:	009f5101 	addseq	r5, pc, r1, lsl #2
    43b8:	00000000 	andeq	r0, r0, r0
    43bc:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    43c0:	f6080032 			; <UNDEFINED> instruction: 0xf6080032
    43c4:	01080032 	tsteq	r8, r2, lsr r0
    43c8:	32f65200 	rscscc	r5, r6, #0, 4
    43cc:	33100800 	tstcc	r0, #0, 16
    43d0:	00040800 	andeq	r0, r4, r0, lsl #16
    43d4:	9f5201f3 	svcls	0x005201f3
	...
    43e0:	080032bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip, sp}
    43e4:	080032d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, ip, sp}
    43e8:	d6510001 	ldrble	r0, [r1], -r1
    43ec:	10080032 	andne	r0, r8, r2, lsr r0
    43f0:	04080033 	streq	r0, [r8], #-51	; 0x33
    43f4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    43f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    43fc:	00000000 	andeq	r0, r0, r0
    4400:	0032bc00 	eorseq	fp, r2, r0, lsl #24
    4404:	0032c008 	eorseq	ip, r2, r8
    4408:	30000208 	andcc	r0, r0, r8, lsl #4
    440c:	0032c09f 	mlaseq	r2, pc, r0, ip	; <UNPREDICTABLE>
    4410:	0032d808 	eorseq	sp, r2, r8, lsl #16
    4414:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    4420:	080032bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip, sp}
    4424:	080032c0 	stmdaeq	r0, {r6, r7, r9, ip, sp}
    4428:	9f300002 	svcls	0x00300002
    442c:	080032c0 	stmdaeq	r0, {r6, r7, r9, ip, sp}
    4430:	080032cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, ip, sp}
    4434:	cc530001 	mrrcgt	0, 0, r0, r3, cr1
    4438:	d2080032 	andle	r0, r8, #50	; 0x32
    443c:	03080032 	movweq	r0, #32818	; 0x8032
    4440:	9f7f7300 	svcls	0x007f7300
    4444:	080032d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, ip, sp}
    4448:	080032d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip, sp}
    444c:	00530001 	subseq	r0, r3, r1
    4450:	00000000 	andeq	r0, r0, r0
    4454:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    4458:	e0080032 	and	r0, r8, r2, lsr r0
    445c:	01080032 	tsteq	r8, r2, lsr r0
    4460:	32e25100 	rsccc	r5, r2, #0, 2
    4464:	32f20800 	rscscc	r0, r2, #0, 16
    4468:	00010800 	andeq	r0, r1, r0, lsl #16
    446c:	0032f251 	eorseq	pc, r2, r1, asr r2	; <UNPREDICTABLE>
    4470:	0032f408 	eorseq	pc, r2, r8, lsl #8
    4474:	71000408 	tstvc	r0, r8, lsl #8
    4478:	009f1f00 	addseq	r1, pc, r0, lsl #30
    447c:	00000000 	andeq	r0, r0, r0
    4480:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    4484:	e8080032 	stmda	r8, {r1, r4, r5}
    4488:	01080032 	tsteq	r8, r2, lsr r0
    448c:	32e85300 	rsccc	r5, r8, #0, 6
    4490:	32ee0800 	rsccc	r0, lr, #0, 16
    4494:	00030800 	andeq	r0, r3, r0, lsl #16
    4498:	ee9f7f73 	mrc	15, 4, r7, cr15, cr3, {3}
    449c:	f6080032 			; <UNDEFINED> instruction: 0xf6080032
    44a0:	01080032 	tsteq	r8, r2, lsr r0
    44a4:	00005300 	andeq	r5, r0, r0, lsl #6
    44a8:	00000000 	andeq	r0, r0, r0
    44ac:	32f00000 	rscscc	r0, r0, #0
    44b0:	32f20800 	rscscc	r0, r2, #0, 16
    44b4:	00010800 	andeq	r0, r1, r0, lsl #16
    44b8:	0032f251 	eorseq	pc, r2, r1, asr r2	; <UNPREDICTABLE>
    44bc:	0032f408 	eorseq	pc, r2, r8, lsl #8
    44c0:	71000408 	tstvc	r0, r8, lsl #8
    44c4:	009f1f00 	addseq	r1, pc, r0, lsl #30
    44c8:	00000000 	andeq	r0, r0, r0
    44cc:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    44d0:	0c080032 	stceq	0, cr0, [r8], {50}	; 0x32
    44d4:	01080033 	tsteq	r8, r3, lsr r0
    44d8:	330c5d00 	movwcc	r5, #52480	; 0xcd00
    44dc:	330e0800 	movwcc	r0, #59392	; 0xe800
    44e0:	00030800 	andeq	r0, r3, r0, lsl #16
    44e4:	0e9f5091 	mrceq	0, 4, r5, cr15, cr1, {4}
    44e8:	10080033 	andne	r0, r8, r3, lsr r0
    44ec:	03080033 	movweq	r0, #32819	; 0x8033
    44f0:	9f507d00 	svcls	0x00507d00
	...
    44fc:	080032f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip, sp}
    4500:	080032f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, ip, sp}
    4504:	9f300002 	svcls	0x00300002
    4508:	080032f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, ip, sp}
    450c:	08003310 	stmdaeq	r0, {r4, r8, r9, ip, sp}
    4510:	00530001 	subseq	r0, r3, r1
	...
    4520:	01000000 	mrseq	r0, (UNDEF: 0)
    4524:	00005100 	andeq	r5, r0, r0, lsl #2
    4528:	00000000 	andeq	r0, r0, r0
    452c:	00040000 	andeq	r0, r4, r0
    4530:	9f5101f3 	svcls	0x005101f3
	...
    4544:	00520001 	subseq	r0, r2, r1
    4548:	00000000 	andeq	r0, r0, r0
    454c:	04000000 	streq	r0, [r0], #-0
    4550:	5201f300 	andpl	pc, r1, #0, 6
    4554:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4564:	52000100 	andpl	r0, r0, #0, 2
	...
    4570:	01f30004 	mvnseq	r0, r4
    4574:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    4584:	00020000 	andeq	r0, r2, r0
    4588:	00009f30 	andeq	r9, r0, r0, lsr pc
    458c:	00000000 	andeq	r0, r0, r0
    4590:	00010000 	andeq	r0, r1, r0
    4594:	00000054 	andeq	r0, r0, r4, asr r0
	...
    45a4:	30000200 	andcc	r0, r0, r0, lsl #4
    45a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    45ac:	00000000 	andeq	r0, r0, r0
    45b0:	53000100 	movwpl	r0, #256	; 0x100
	...
    45bc:	7f730003 	svcvc	0x00730003
    45c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    45c4:	00000000 	andeq	r0, r0, r0
    45c8:	53000100 	movwpl	r0, #256	; 0x100
	...
    45dc:	00540001 	subseq	r0, r4, r1
    45e0:	00000000 	andeq	r0, r0, r0
    45e4:	01000000 	mrseq	r0, (UNDEF: 0)
    45e8:	00005400 	andeq	r5, r0, r0, lsl #8
    45ec:	00000000 	andeq	r0, r0, r0
    45f0:	00040000 	andeq	r0, r4, r0
    45f4:	9f1f0074 	svcls	0x001f0074
	...
    4608:	00530001 	subseq	r0, r3, r1
    460c:	00000000 	andeq	r0, r0, r0
    4610:	03000000 	movweq	r0, #0
    4614:	9f7f7300 	svcls	0x007f7300
	...
    4620:	00530001 	subseq	r0, r3, r1
	...
    4630:	01000000 	mrseq	r0, (UNDEF: 0)
    4634:	00005400 	andeq	r5, r0, r0, lsl #8
    4638:	00000000 	andeq	r0, r0, r0
    463c:	00040000 	andeq	r0, r4, r0
    4640:	9f1f0074 	svcls	0x001f0074
	...
    4654:	005d0001 	subseq	r0, sp, r1
    4658:	00000000 	andeq	r0, r0, r0
    465c:	03000000 	movweq	r0, #0
    4660:	9f509100 	svcls	0x00509100
	...
    466c:	507d0003 	rsbspl	r0, sp, r3
    4670:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4680:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    4694:	9f300002 	svcls	0x00300002
	...
    46a0:	00530001 	subseq	r0, r3, r1
	...
    46b0:	01000000 	mrseq	r0, (UNDEF: 0)
    46b4:	00005200 	andeq	r5, r0, r0, lsl #4
    46b8:	00000000 	andeq	r0, r0, r0
    46bc:	00040000 	andeq	r0, r4, r0
    46c0:	9f5201f3 	svcls	0x005201f3
	...
    46d4:	9f300002 	svcls	0x00300002
	...
    46e0:	00510001 	subseq	r0, r1, r1
    46e4:	00000000 	andeq	r0, r0, r0
    46e8:	01000000 	mrseq	r0, (UNDEF: 0)
    46ec:	00005100 	andeq	r5, r0, r0, lsl #2
    46f0:	00000000 	andeq	r0, r0, r0
    46f4:	00040000 	andeq	r0, r4, r0
    46f8:	9f1f0071 	svcls	0x001f0071
	...
    470c:	9f300002 	svcls	0x00300002
	...
    4718:	00530001 	subseq	r0, r3, r1
    471c:	00000000 	andeq	r0, r0, r0
    4720:	03000000 	movweq	r0, #0
    4724:	9f7f7300 	svcls	0x007f7300
	...
    4730:	00530001 	subseq	r0, r3, r1
	...
    4740:	01000000 	mrseq	r0, (UNDEF: 0)
    4744:	00005100 	andeq	r5, r0, r0, lsl #2
    4748:	00000000 	andeq	r0, r0, r0
    474c:	00040000 	andeq	r0, r4, r0
    4750:	9f1f0071 	svcls	0x001f0071
	...
    4764:	005d0001 	subseq	r0, sp, r1
    4768:	00000000 	andeq	r0, r0, r0
    476c:	03000000 	movweq	r0, #0
    4770:	9f509100 	svcls	0x00509100
	...
    477c:	507d0003 	rsbspl	r0, sp, r3
    4780:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4790:	30000200 	andcc	r0, r0, r0, lsl #4
    4794:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4798:	00000000 	andeq	r0, r0, r0
    479c:	53000100 	movwpl	r0, #256	; 0x100
	...
    47a8:	08003310 	stmdaeq	r0, {r4, r8, r9, ip, sp}
    47ac:	08003325 	stmdaeq	r0, {r0, r2, r5, r8, r9, ip, sp}
    47b0:	25500001 	ldrbcs	r0, [r0, #-1]
    47b4:	4e080033 	mcrmi	0, 0, r0, cr8, cr3, {1}
    47b8:	01080034 	tsteq	r8, r4, lsr r0
    47bc:	00005500 	andeq	r5, r0, r0, lsl #10
    47c0:	00000000 	andeq	r0, r0, r0
    47c4:	33100000 	tstcc	r0, #0
    47c8:	331c0800 	tstcc	ip, #0, 16
    47cc:	00010800 	andeq	r0, r1, r0, lsl #16
    47d0:	00331c51 	eorseq	r1, r3, r1, asr ip
    47d4:	00344e08 	eorseq	r4, r4, r8, lsl #28
    47d8:	58000108 	stmdapl	r0, {r3, r8}
	...
    47e4:	08003310 	stmdaeq	r0, {r4, r8, r9, ip, sp}
    47e8:	0800331e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, ip, sp}
    47ec:	1e520001 	cdpne	0, 5, cr0, cr2, cr1, {0}
    47f0:	4e080033 	mcrmi	0, 0, r0, cr8, cr3, {1}
    47f4:	01080034 	tsteq	r8, r4, lsr r0
    47f8:	00005a00 	andeq	r5, r0, r0, lsl #20
    47fc:	00000000 	andeq	r0, r0, r0
    4800:	33100000 	tstcc	r0, #0
    4804:	33250800 	teqcc	r5, #0, 16
    4808:	00010800 	andeq	r0, r1, r0, lsl #16
    480c:	00332553 	eorseq	r2, r3, r3, asr r5
    4810:	00344e08 	eorseq	r4, r4, r8, lsl #28
    4814:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    4820:	08003342 	stmdaeq	r0, {r1, r6, r8, r9, ip, sp}
    4824:	08003346 	stmdaeq	r0, {r1, r2, r6, r8, r9, ip, sp}
    4828:	7f720003 	svcvc	0x00720003
    482c:	0033469f 	mlaseq	r3, pc, r6, r4	; <UNPREDICTABLE>
    4830:	00343808 	eorseq	r3, r4, r8, lsl #16
    4834:	5c000108 	stfpls	f0, [r0], {8}
    4838:	08003438 	stmdaeq	r0, {r3, r4, r5, sl, ip, sp}
    483c:	0800343a 	stmdaeq	r0, {r1, r3, r4, r5, sl, ip, sp}
    4840:	017c0003 	cmneq	ip, r3
    4844:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4848:	00000000 	andeq	r0, r0, r0
    484c:	00332600 	eorseq	r2, r3, r0, lsl #12
    4850:	00332a08 	eorseq	r2, r3, r8, lsl #20
    4854:	4f000208 	svcmi	0x00000208
    4858:	00332a9f 	mlaseq	r3, pc, sl, r2	; <UNPREDICTABLE>
    485c:	00332e08 	eorseq	r2, r3, r8, lsl #28
    4860:	52000108 	andpl	r0, r0, #8, 2
    4864:	0800332e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, ip, sp}
    4868:	08003332 	stmdaeq	r0, {r1, r4, r5, r8, r9, ip, sp}
    486c:	01720003 	cmneq	r2, r3
    4870:	0033329f 	mlaseq	r3, pc, r2, r3	; <UNPREDICTABLE>
    4874:	00334a08 	eorseq	r4, r3, r8, lsl #20
    4878:	52000108 	andpl	r0, r0, #8, 2
    487c:	08003440 	stmdaeq	r0, {r6, sl, ip, sp}
    4880:	08003444 	stmdaeq	r0, {r2, r6, sl, ip, sp}
    4884:	01720003 	cmneq	r2, r3
    4888:	0034449f 	mlaseq	r4, pc, r4, r4	; <UNPREDICTABLE>
    488c:	00344e08 	eorseq	r4, r4, r8, lsl #28
    4890:	09000308 	stmdbeq	r0, {r3, r8, r9}
    4894:	00009ff8 	strdeq	r9, [r0], -r8
    4898:	00000000 	andeq	r0, r0, r0
    489c:	33380000 	teqcc	r8, #0
    48a0:	333a0800 	teqcc	sl, #0, 16
    48a4:	00050800 	andeq	r0, r5, r0, lsl #16
    48a8:	00720077 	rsbseq	r0, r2, r7, ror r0
    48ac:	00333a22 	eorseq	r3, r3, r2, lsr #20
    48b0:	00333c08 	eorseq	r3, r3, r8, lsl #24
    48b4:	73000508 	movwvc	r0, #1288	; 0x508
    48b8:	9f253100 	svcls	0x00253100
    48bc:	08003444 	stmdaeq	r0, {r2, r6, sl, ip, sp}
    48c0:	0800344e 	stmdaeq	r0, {r1, r2, r3, r6, sl, ip, sp}
    48c4:	7f770002 	svcvc	0x00770002
	...
    48d0:	08003360 	stmdaeq	r0, {r5, r6, r8, r9, ip, sp}
    48d4:	08003418 	stmdaeq	r0, {r3, r4, sl, ip, sp}
    48d8:	18590001 	ldmdane	r9, {r0}^
    48dc:	1c080034 	stcne	0, cr0, [r8], {52}	; 0x34
    48e0:	04080034 	streq	r0, [r8], #-52	; 0x34
    48e4:	1f007900 	svcne	0x00007900
    48e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    48ec:	00000000 	andeq	r0, r0, r0
    48f0:	00336000 	eorseq	r6, r3, r0
    48f4:	00343a08 	eorseq	r3, r4, r8, lsl #20
    48f8:	31000208 	tstcc	r0, r8, lsl #4
    48fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4900:	00000000 	andeq	r0, r0, r0
    4904:	00336000 	eorseq	r6, r3, r0
    4908:	00336208 	eorseq	r6, r3, r8, lsl #4
    490c:	30000208 	andcc	r0, r0, r8, lsl #4
    4910:	0033629f 	mlaseq	r3, pc, r2, r6	; <UNPREDICTABLE>
    4914:	00337608 	eorseq	r7, r3, r8, lsl #12
    4918:	52000108 	andpl	r0, r0, #8, 2
	...
    4924:	08003360 	stmdaeq	r0, {r5, r6, r8, r9, ip, sp}
    4928:	08003362 	stmdaeq	r0, {r1, r5, r6, r8, r9, ip, sp}
    492c:	9f300002 	svcls	0x00300002
    4930:	08003362 	stmdaeq	r0, {r1, r5, r6, r8, r9, ip, sp}
    4934:	0800336c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, ip, sp}
    4938:	6c530001 	mrrcvs	0, 0, r0, r3, cr1
    493c:	72080033 	andvc	r0, r8, #51	; 0x33
    4940:	03080033 	movweq	r0, #32819	; 0x8033
    4944:	9f7f7300 	svcls	0x007f7300
    4948:	08003372 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, ip, sp}
    494c:	08003378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, ip, sp}
    4950:	00530001 	subseq	r0, r3, r1
    4954:	00000000 	andeq	r0, r0, r0
    4958:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    495c:	80080033 	andhi	r0, r8, r3, lsr r0
    4960:	01080033 	tsteq	r8, r3, lsr r0
    4964:	33825200 	orrcc	r5, r2, #0, 4
    4968:	33900800 	orrscc	r0, r0, #0, 16
    496c:	00010800 	andeq	r0, r1, r0, lsl #16
    4970:	00339052 	eorseq	r9, r3, r2, asr r0
    4974:	00339208 	eorseq	r9, r3, r8, lsl #4
    4978:	72000408 	andvc	r0, r0, #8, 8	; 0x8000000
    497c:	009f1f00 	addseq	r1, pc, r0, lsl #30
    4980:	00000000 	andeq	r0, r0, r0
    4984:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    4988:	86080033 			; <UNDEFINED> instruction: 0x86080033
    498c:	01080033 	tsteq	r8, r3, lsr r0
    4990:	33865300 	orrcc	r5, r6, #0, 6
    4994:	338c0800 	orrcc	r0, ip, #0, 16
    4998:	00030800 	andeq	r0, r3, r0, lsl #16
    499c:	8c9f7f73 	ldchi	15, cr7, [pc], {115}	; 0x73
    49a0:	94080033 	strls	r0, [r8], #-51	; 0x33
    49a4:	01080033 	tsteq	r8, r3, lsr r0
    49a8:	00005300 	andeq	r5, r0, r0, lsl #6
    49ac:	00000000 	andeq	r0, r0, r0
    49b0:	338e0000 	orrcc	r0, lr, #0
    49b4:	33900800 	orrscc	r0, r0, #0, 16
    49b8:	00010800 	andeq	r0, r1, r0, lsl #16
    49bc:	00339052 	eorseq	r9, r3, r2, asr r0
    49c0:	00339208 	eorseq	r9, r3, r8, lsl #4
    49c4:	72000408 	andvc	r0, r0, #8, 8	; 0x8000000
    49c8:	009f1f00 	addseq	r1, pc, r0, lsl #30
    49cc:	00000000 	andeq	r0, r0, r0
    49d0:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    49d4:	3a080033 	bcc	204aa8 <__Stack_Size+0x2042a8>
    49d8:	01080034 	tsteq	r8, r4, lsr r0
    49dc:	00005600 	andeq	r5, r0, r0, lsl #12
    49e0:	00000000 	andeq	r0, r0, r0
    49e4:	33920000 	orrscc	r0, r2, #0
    49e8:	33ac0800 			; <UNDEFINED> instruction: 0x33ac0800
    49ec:	00010800 	andeq	r0, r1, r0, lsl #16
    49f0:	00000052 	andeq	r0, r0, r2, asr r0
    49f4:	00000000 	andeq	r0, r0, r0
    49f8:	00339200 	eorseq	r9, r3, r0, lsl #4
    49fc:	00339408 	eorseq	r9, r3, r8, lsl #8
    4a00:	30000208 	andcc	r0, r0, r8, lsl #4
    4a04:	0033949f 	mlaseq	r3, pc, r4, r9	; <UNPREDICTABLE>
    4a08:	0033ae08 	eorseq	sl, r3, r8, lsl #28
    4a0c:	53000108 	movwpl	r0, #264	; 0x108
	...
    4a18:	080033a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, ip, sp}
    4a1c:	0800343a 	stmdaeq	r0, {r1, r3, r4, r5, sl, ip, sp}
    4a20:	00550001 	subseq	r0, r5, r1
    4a24:	00000000 	andeq	r0, r0, r0
    4a28:	a6000000 	strge	r0, [r0], -r0
    4a2c:	3a080033 	bcc	204b00 <__Stack_Size+0x204300>
    4a30:	01080034 	tsteq	r8, r4, lsr r0
    4a34:	00005d00 	andeq	r5, r0, r0, lsl #26
    4a38:	00000000 	andeq	r0, r0, r0
    4a3c:	33c00000 	biccc	r0, r0, #0
    4a40:	343a0800 	ldrtcc	r0, [sl], #-2048	; 0x800
    4a44:	00010800 	andeq	r0, r1, r0, lsl #16
    4a48:	0000005d 	andeq	r0, r0, sp, asr r0
    4a4c:	00000000 	andeq	r0, r0, r0
    4a50:	0033c000 	eorseq	ip, r3, r0
    4a54:	0033c208 	eorseq	ip, r3, r8, lsl #4
    4a58:	30000208 	andcc	r0, r0, r8, lsl #4
    4a5c:	0033c29f 	mlaseq	r3, pc, r2, ip	; <UNPREDICTABLE>
    4a60:	0033ce08 	eorseq	ip, r3, r8, lsl #28
    4a64:	5b000108 	blpl	4e8c <__Stack_Size+0x468c>
    4a68:	080033ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, ip, sp}
    4a6c:	080033da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, ip, sp}
    4a70:	da530001 	ble	14c4a7c <__Stack_Size+0x14c427c>
    4a74:	3a080033 	bcc	204b48 <__Stack_Size+0x204348>
    4a78:	01080034 	tsteq	r8, r4, lsr r0
    4a7c:	00005b00 	andeq	r5, r0, r0, lsl #22
    4a80:	00000000 	andeq	r0, r0, r0
    4a84:	33c00000 	biccc	r0, r0, #0
    4a88:	33c20800 	biccc	r0, r2, #0, 16
    4a8c:	00020800 	andeq	r0, r2, r0, lsl #16
    4a90:	33c29f30 	biccc	r9, r2, #48, 30	; 0xc0
    4a94:	33d40800 	bicscc	r0, r4, #0, 16
    4a98:	00010800 	andeq	r0, r1, r0, lsl #16
    4a9c:	0033d454 	eorseq	sp, r3, r4, asr r4
    4aa0:	0033da08 	eorseq	sp, r3, r8, lsl #20
    4aa4:	74000308 	strvc	r0, [r0], #-776	; 0x308
    4aa8:	33da9f7f 	bicscc	r9, sl, #508	; 0x1fc
    4aac:	33e00800 	mvncc	r0, #0, 16
    4ab0:	00010800 	andeq	r0, r1, r0, lsl #16
    4ab4:	00000054 	andeq	r0, r0, r4, asr r0
    4ab8:	00000000 	andeq	r0, r0, r0
    4abc:	0033e000 	eorseq	lr, r3, r0
    4ac0:	0033ea08 	eorseq	lr, r3, r8, lsl #20
    4ac4:	53000108 	movwpl	r0, #264	; 0x108
    4ac8:	080033ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, ip, sp}
    4acc:	080033fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, ip, sp}
    4ad0:	fa530001 	blx	14c4adc <__Stack_Size+0x14c42dc>
    4ad4:	fc080033 	stc2	0, cr0, [r8], {51}	; 0x33
    4ad8:	04080033 	streq	r0, [r8], #-51	; 0x33
    4adc:	1f007300 	svcne	0x00007300
    4ae0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ae4:	00000000 	andeq	r0, r0, r0
    4ae8:	0033e000 	eorseq	lr, r3, r0
    4aec:	0033f008 	eorseq	pc, r3, r8
    4af0:	54000108 	strpl	r0, [r0], #-264	; 0x108
    4af4:	080033f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip, sp}
    4af8:	080033f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, ip, sp}
    4afc:	7f740003 	svcvc	0x00740003
    4b00:	0033f69f 	mlaseq	r3, pc, r6, pc	; <UNPREDICTABLE>
    4b04:	00343a08 	eorseq	r3, r4, r8, lsl #20
    4b08:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    4b14:	080033f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip, sp}
    4b18:	080033fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, ip, sp}
    4b1c:	fa530001 	blx	14c4b28 <__Stack_Size+0x14c4328>
    4b20:	fc080033 	stc2	0, cr0, [r8], {51}	; 0x33
    4b24:	04080033 	streq	r0, [r8], #-51	; 0x33
    4b28:	1f007300 	svcne	0x00007300
    4b2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4b30:	00000000 	andeq	r0, r0, r0
    4b34:	0033f800 	eorseq	pc, r3, r0, lsl #16
    4b38:	00343a08 	eorseq	r3, r4, r8, lsl #20
    4b3c:	5d000108 	stfpls	f0, [r0, #-32]	; 0xffffffe0
	...
    4b48:	080033f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip, sp}
    4b4c:	0800343a 	stmdaeq	r0, {r1, r3, r4, r5, sl, ip, sp}
    4b50:	00560001 	subseq	r0, r6, r1
    4b54:	00000000 	andeq	r0, r0, r0
    4b58:	fc000000 	stc2	0, cr0, [r0], {-0}
    4b5c:	1e080033 	mcrne	0, 0, r0, cr8, cr3, {1}
    4b60:	01080034 	tsteq	r8, r4, lsr r0
    4b64:	00005300 	andeq	r5, r0, r0, lsl #6
    4b68:	00000000 	andeq	r0, r0, r0
    4b6c:	33fc0000 	mvnscc	r0, #0
    4b70:	33fe0800 	mvnscc	r0, #0, 16
    4b74:	00020800 	andeq	r0, r2, r0, lsl #16
    4b78:	33fe9f30 	mvnscc	r9, #48, 30	; 0xc0
    4b7c:	341e0800 	ldrcc	r0, [lr], #-2048	; 0x800
    4b80:	00010800 	andeq	r0, r1, r0, lsl #16
    4b84:	00000052 	andeq	r0, r0, r2, asr r0
    4b88:	00000000 	andeq	r0, r0, r0
    4b8c:	00341400 	eorseq	r1, r4, r0, lsl #8
    4b90:	00341808 	eorseq	r1, r4, r8, lsl #16
    4b94:	59000108 	stmdbpl	r0, {r3, r8}
    4b98:	08003418 	stmdaeq	r0, {r3, r4, sl, ip, sp}
    4b9c:	0800341c 	stmdaeq	r0, {r2, r3, r4, sl, ip, sp}
    4ba0:	00790004 	rsbseq	r0, r9, r4
    4ba4:	00009f1f 	andeq	r9, r0, pc, lsl pc
    4ba8:	00000000 	andeq	r0, r0, r0
    4bac:	34140000 	ldrcc	r0, [r4], #-0
    4bb0:	343a0800 	ldrtcc	r0, [sl], #-2048	; 0x800
    4bb4:	00010800 	andeq	r0, r1, r0, lsl #16
    4bb8:	0000005d 	andeq	r0, r0, sp, asr r0
    4bbc:	00000000 	andeq	r0, r0, r0
    4bc0:	00341c00 	eorseq	r1, r4, r0, lsl #24
    4bc4:	00343a08 	eorseq	r3, r4, r8, lsl #20
    4bc8:	59000108 	stmdbpl	r0, {r3, r8}
	...
    4bd4:	0800341c 	stmdaeq	r0, {r2, r3, r4, sl, ip, sp}
    4bd8:	0800341e 	stmdaeq	r0, {r1, r2, r3, r4, sl, ip, sp}
    4bdc:	9f300002 	svcls	0x00300002
    4be0:	0800341e 	stmdaeq	r0, {r1, r2, r3, r4, sl, ip, sp}
    4be4:	0800343a 	stmdaeq	r0, {r1, r3, r4, r5, sl, ip, sp}
    4be8:	00530001 	subseq	r0, r3, r1
	...
    4bf8:	01000000 	mrseq	r0, (UNDEF: 0)
    4bfc:	00005000 	andeq	r5, r0, r0
    4c00:	00000000 	andeq	r0, r0, r0
    4c04:	00010000 	andeq	r0, r1, r0
    4c08:	00000056 	andeq	r0, r0, r6, asr r0
	...
    4c18:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4c24:	00580001 	subseq	r0, r8, r1
	...
    4c34:	01000000 	mrseq	r0, (UNDEF: 0)
    4c38:	00005200 	andeq	r5, r0, r0, lsl #4
    4c3c:	00000000 	andeq	r0, r0, r0
    4c40:	00010000 	andeq	r0, r1, r0
    4c44:	00000057 	andeq	r0, r0, r7, asr r0
	...
    4c54:	32000200 	andcc	r0, r0, #0, 4
    4c58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4c5c:	00000000 	andeq	r0, r0, r0
    4c60:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    4c6c:	00550001 	subseq	r0, r5, r1
    4c70:	00000000 	andeq	r0, r0, r0
    4c74:	01000000 	mrseq	r0, (UNDEF: 0)
    4c78:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    4c88:	00020000 	andeq	r0, r2, r0
    4c8c:	00009f30 	andeq	r9, r0, r0, lsr pc
    4c90:	00000000 	andeq	r0, r0, r0
    4c94:	00010000 	andeq	r0, r1, r0
    4c98:	00000054 	andeq	r0, r0, r4, asr r0
    4c9c:	00000000 	andeq	r0, r0, r0
    4ca0:	74000300 	strvc	r0, [r0], #-768	; 0x300
    4ca4:	00009f7f 	andeq	r9, r0, pc, ror pc
    4ca8:	00000000 	andeq	r0, r0, r0
    4cac:	00010000 	andeq	r0, r1, r0
    4cb0:	00000054 	andeq	r0, r0, r4, asr r0
    4cb4:	00000000 	andeq	r0, r0, r0
    4cb8:	75000300 	strvc	r0, [r0, #-768]	; 0x300
    4cbc:	00009f7f 	andeq	r9, r0, pc, ror pc
    4cc0:	00000000 	andeq	r0, r0, r0
    4cc4:	00010000 	andeq	r0, r1, r0
    4cc8:	00000055 	andeq	r0, r0, r5, asr r0
    4ccc:	00000000 	andeq	r0, r0, r0
    4cd0:	75000300 	strvc	r0, [r0, #-768]	; 0x300
    4cd4:	00009f01 	andeq	r9, r0, r1, lsl #30
    4cd8:	00000000 	andeq	r0, r0, r0
    4cdc:	00010000 	andeq	r0, r1, r0
    4ce0:	00000055 	andeq	r0, r0, r5, asr r0
    4ce4:	00000000 	andeq	r0, r0, r0
    4ce8:	75000300 	strvc	r0, [r0, #-768]	; 0x300
    4cec:	00009f01 	andeq	r9, r0, r1, lsl #30
    4cf0:	00000000 	andeq	r0, r0, r0
    4cf4:	00010000 	andeq	r0, r1, r0
    4cf8:	00000054 	andeq	r0, r0, r4, asr r0
	...
    4d08:	52000100 	andpl	r0, r0, #0, 2
	...
    4d14:	00570001 	subseq	r0, r7, r1
	...
    4d24:	01000000 	mrseq	r0, (UNDEF: 0)
    4d28:	00005d00 	andeq	r5, r0, r0, lsl #26
    4d2c:	00000000 	andeq	r0, r0, r0
    4d30:	00040000 	andeq	r0, r4, r0
    4d34:	9f7fa891 	svcls	0x007fa891
	...
    4d40:	005d0001 	subseq	r0, sp, r1
	...
    4d50:	02000000 	andeq	r0, r0, #0
    4d54:	009f3100 	addseq	r3, pc, r0, lsl #2
    4d58:	00000000 	andeq	r0, r0, r0
    4d5c:	02000000 	andeq	r0, r0, #0
    4d60:	009f3000 	addseq	r3, pc, r0
	...
    4d70:	02000000 	andeq	r0, r0, #0
    4d74:	009f3000 	addseq	r3, pc, r0
    4d78:	00000000 	andeq	r0, r0, r0
    4d7c:	02000000 	andeq	r0, r0, #0
    4d80:	009f3100 	addseq	r3, pc, r0, lsl #2
    4d84:	00000000 	andeq	r0, r0, r0
    4d88:	02000000 	andeq	r0, r0, #0
    4d8c:	009f3200 	addseq	r3, pc, r0, lsl #4
    4d90:	00000000 	andeq	r0, r0, r0
    4d94:	02000000 	andeq	r0, r0, #0
    4d98:	009f3300 	addseq	r3, pc, r0, lsl #6
    4d9c:	00000000 	andeq	r0, r0, r0
    4da0:	02000000 	andeq	r0, r0, #0
    4da4:	009f3400 	addseq	r3, pc, r0, lsl #8
	...
    4db4:	01000000 	mrseq	r0, (UNDEF: 0)
    4db8:	00005200 	andeq	r5, r0, r0, lsl #4
    4dbc:	00000000 	andeq	r0, r0, r0
    4dc0:	00030000 	andeq	r0, r3, r0
    4dc4:	009f0172 	addseq	r0, pc, r2, ror r1	; <UNPREDICTABLE>
    4dc8:	00000000 	andeq	r0, r0, r0
    4dcc:	01000000 	mrseq	r0, (UNDEF: 0)
    4dd0:	00005200 	andeq	r5, r0, r0, lsl #4
    4dd4:	00000000 	andeq	r0, r0, r0
    4dd8:	00010000 	andeq	r0, r1, r0
    4ddc:	00000055 	andeq	r0, r0, r5, asr r0
    4de0:	00000000 	andeq	r0, r0, r0
    4de4:	75000300 	strvc	r0, [r0, #-768]	; 0x300
    4de8:	00009f01 	andeq	r9, r0, r1, lsl #30
    4dec:	00000000 	andeq	r0, r0, r0
    4df0:	00030000 	andeq	r0, r3, r0
    4df4:	009f0172 	addseq	r0, pc, r2, ror r1	; <UNPREDICTABLE>
    4df8:	00000000 	andeq	r0, r0, r0
    4dfc:	03000000 	movweq	r0, #0
    4e00:	9ff80900 	svcls	0x00f80900
	...
    4e14:	00770005 	rsbseq	r0, r7, r5
    4e18:	00220072 	eoreq	r0, r2, r2, ror r0
    4e1c:	00000000 	andeq	r0, r0, r0
    4e20:	05000000 	streq	r0, [r0, #-0]
    4e24:	31007300 	mrscc	r7, LR_irq
    4e28:	00009f25 	andeq	r9, r0, r5, lsr #30
    4e2c:	00000000 	andeq	r0, r0, r0
    4e30:	00020000 	andeq	r0, r2, r0
    4e34:	00007f77 	andeq	r7, r0, r7, ror pc
	...
    4e44:	00030000 	andeq	r0, r3, r0
    4e48:	009f4891 	umullseq	r4, pc, r1, r8	; <UNPREDICTABLE>
    4e4c:	00000000 	andeq	r0, r0, r0
    4e50:	01000000 	mrseq	r0, (UNDEF: 0)
    4e54:	00005400 	andeq	r5, r0, r0, lsl #8
    4e58:	00000000 	andeq	r0, r0, r0
    4e5c:	00030000 	andeq	r0, r3, r0
    4e60:	009f7074 	addseq	r7, pc, r4, ror r0	; <UNPREDICTABLE>
    4e64:	00000000 	andeq	r0, r0, r0
    4e68:	03000000 	movweq	r0, #0
    4e6c:	9f607400 	svcls	0x00607400
	...
    4e78:	48910003 	ldmmi	r1, {r0, r1}
    4e7c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4e80:	00000000 	andeq	r0, r0, r0
    4e84:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4e90:	48910003 	ldmmi	r1, {r0, r1}
    4e94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4ea4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    4eb0:	00560001 	subseq	r0, r6, r1
	...
    4ec0:	01000000 	mrseq	r0, (UNDEF: 0)
    4ec4:	00005000 	andeq	r5, r0, r0
    4ec8:	00000000 	andeq	r0, r0, r0
    4ecc:	00010000 	andeq	r0, r1, r0
    4ed0:	00000054 	andeq	r0, r0, r4, asr r0
    4ed4:	00000000 	andeq	r0, r0, r0
    4ed8:	f3000400 	vshl.u8	d0, d0, d0
    4edc:	009f5001 	addseq	r5, pc, r1
	...
    4eec:	01000000 	mrseq	r0, (UNDEF: 0)
    4ef0:	00005100 	andeq	r5, r0, r0, lsl #2
    4ef4:	00000000 	andeq	r0, r0, r0
    4ef8:	00010000 	andeq	r0, r1, r0
    4efc:	00000052 	andeq	r0, r0, r2, asr r0
    4f00:	00000000 	andeq	r0, r0, r0
    4f04:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    4f10:	01f30004 	mvnseq	r0, r4
    4f14:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    4f24:	00010000 	andeq	r0, r1, r0
    4f28:	00000050 	andeq	r0, r0, r0, asr r0
    4f2c:	00000000 	andeq	r0, r0, r0
    4f30:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    4f3c:	01f30004 	mvnseq	r0, r4
    4f40:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    4f50:	00010000 	andeq	r0, r1, r0
    4f54:	00000051 	andeq	r0, r0, r1, asr r0
    4f58:	00000000 	andeq	r0, r0, r0
    4f5c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    4f68:	01f30004 	mvnseq	r0, r4
    4f6c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    4f7c:	00010000 	andeq	r0, r1, r0
    4f80:	00000052 	andeq	r0, r0, r2, asr r0
    4f84:	00000000 	andeq	r0, r0, r0
    4f88:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    4f94:	01f30004 	mvnseq	r0, r4
    4f98:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    4fa8:	00010000 	andeq	r0, r1, r0
    4fac:	00000053 	andeq	r0, r0, r3, asr r0
    4fb0:	00000000 	andeq	r0, r0, r0
    4fb4:	58000100 	stmdapl	r0, {r8}
	...
    4fc0:	01f30004 	mvnseq	r0, r4
    4fc4:	00009f53 	andeq	r9, r0, r3, asr pc
	...
    4fd4:	00010000 	andeq	r0, r1, r0
    4fd8:	00000052 	andeq	r0, r0, r2, asr r0
    4fdc:	00000000 	andeq	r0, r0, r0
    4fe0:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    4fec:	01f30004 	mvnseq	r0, r4
    4ff0:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    5000:	00010000 	andeq	r0, r1, r0
    5004:	00000051 	andeq	r0, r0, r1, asr r0
    5008:	00000000 	andeq	r0, r0, r0
    500c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    5018:	01f30004 	mvnseq	r0, r4
    501c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    502c:	00010000 	andeq	r0, r1, r0
    5030:	00000058 	andeq	r0, r0, r8, asr r0
    5034:	00000000 	andeq	r0, r0, r0
    5038:	f3000400 	vshl.u8	d0, d0, d0
    503c:	009f5301 	addseq	r5, pc, r1, lsl #6
	...
    504c:	01000000 	mrseq	r0, (UNDEF: 0)
    5050:	00005400 	andeq	r5, r0, r0, lsl #8
    5054:	00000000 	andeq	r0, r0, r0
    5058:	00040000 	andeq	r0, r4, r0
    505c:	9f5101f3 	svcls	0x005101f3
	...
    5070:	00550001 	subseq	r0, r5, r1
    5074:	00000000 	andeq	r0, r0, r0
    5078:	04000000 	streq	r0, [r0], #-0
    507c:	5001f300 	andpl	pc, r1, r0, lsl #6
    5080:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5084:	00000000 	andeq	r0, r0, r0
    5088:	0034a800 	eorseq	sl, r4, r0, lsl #16
    508c:	0034b408 	eorseq	fp, r4, r8, lsl #8
    5090:	50000108 	andpl	r0, r0, r8, lsl #2
    5094:	080034b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, ip, sp}
    5098:	080034be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sl, ip, sp}
    509c:	be520001 	cdplt	0, 5, cr0, cr2, cr1, {0}
    50a0:	c0080034 	andgt	r0, r8, r4, lsr r0
    50a4:	01080034 	tsteq	r8, r4, lsr r0
    50a8:	34c05300 	strbcc	r5, [r0], #768	; 0x300
    50ac:	34c80800 	strbcc	r0, [r8], #2048	; 0x800
    50b0:	00010800 	andeq	r0, r1, r0, lsl #16
    50b4:	0034c854 	eorseq	ip, r4, r4, asr r8
    50b8:	0034d008 	eorseq	sp, r4, r8
    50bc:	50000108 	andpl	r0, r0, r8, lsl #2
    50c0:	080034d0 	stmdaeq	r0, {r4, r6, r7, sl, ip, sp}
    50c4:	080053f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, ip, lr}
    50c8:	54910002 	ldrpl	r0, [r1], #2
    50cc:	080053f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, ip, lr}
    50d0:	0800540c 	stmdaeq	r0, {r2, r3, sl, ip, lr}
    50d4:	547d0002 	ldrbtpl	r0, [sp], #-2
	...
    50e0:	080034a8 	stmdaeq	r0, {r3, r5, r7, sl, ip, sp}
    50e4:	08003be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, ip, sp}
    50e8:	e8510001 	ldmda	r1, {r0}^
    50ec:	0c08003b 	stceq	0, cr0, [r8], {59}	; 0x3b
    50f0:	04080054 	streq	r0, [r8], #-84	; 0x54
    50f4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    50f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    50fc:	00000000 	andeq	r0, r0, r0
    5100:	003c2400 	eorseq	r2, ip, r0, lsl #8
    5104:	003c2c08 	eorseq	r2, ip, r8, lsl #24
    5108:	5a000108 	bpl	5530 <__Stack_Size+0x4d30>
    510c:	08003c5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, fp, ip, sp}
    5110:	08003c96 	stmdaeq	r0, {r1, r2, r4, r7, sl, fp, ip, sp}
    5114:	c65c0001 	ldrbgt	r0, [ip], -r1
    5118:	1608003c 			; <UNDEFINED> instruction: 0x1608003c
    511c:	0108003d 	tsteq	r8, sp, lsr r0
    5120:	3d3e5000 	ldccc	0, cr5, [lr, #-0]
    5124:	3d8a0800 	stccc	8, cr0, [sl]
    5128:	00010800 	andeq	r0, r1, r0, lsl #16
    512c:	003db452 	eorseq	fp, sp, r2, asr r4
    5130:	003e0808 	eorseq	r0, lr, r8, lsl #16
    5134:	53000108 	movwpl	r0, #264	; 0x108
    5138:	08003e24 	stmdaeq	r0, {r2, r5, r9, sl, fp, ip, sp}
    513c:	08003e8e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sl, fp, ip, sp}
    5140:	98500001 	ldmdals	r0, {r0}^
    5144:	e208003e 	and	r0, r8, #62	; 0x3e
    5148:	0108003e 	tsteq	r8, lr, lsr r0
    514c:	3f105c00 	svccc	0x00105c00
    5150:	3f600800 	svccc	0x00600800
    5154:	00010800 	andeq	r0, r1, r0, lsl #16
    5158:	003f9456 	eorseq	r9, pc, r6, asr r4	; <UNPREDICTABLE>
    515c:	003fc808 	eorseq	ip, pc, r8, lsl #16
    5160:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    5164:	0800401e 	stmdaeq	r0, {r1, r2, r3, r4, lr}
    5168:	0800406c 	stmdaeq	r0, {r2, r3, r5, r6, lr}
    516c:	9e590001 	cdpls	0, 5, cr0, cr9, cr1, {0}
    5170:	e6080040 	str	r0, [r8], -r0, asr #32
    5174:	01080040 	tsteq	r8, r0, asr #32
    5178:	41285800 	teqmi	r8, r0, lsl #16
    517c:	414a0800 	cmpmi	sl, r0, lsl #16
    5180:	00010800 	andeq	r0, r1, r0, lsl #16
    5184:	00419657 	subeq	r9, r1, r7, asr r6
    5188:	0041ac08 	subeq	sl, r1, r8, lsl #24
    518c:	58000108 	stmdapl	r0, {r3, r8}
    5190:	08004206 	stmdaeq	r0, {r1, r2, r9, lr}
    5194:	08004230 	stmdaeq	r0, {r4, r5, r9, lr}
    5198:	7e570001 	cdpvc	0, 5, cr0, cr7, cr1, {0}
    519c:	9e080042 	cdpls	0, 0, cr0, cr8, cr2, {2}
    51a0:	01080042 	tsteq	r8, r2, asr #32
    51a4:	42ee5000 	rscmi	r5, lr, #0
    51a8:	430e0800 	movwmi	r0, #59392	; 0xe800
    51ac:	00010800 	andeq	r0, r1, r0, lsl #16
    51b0:	00436052 	subeq	r6, r3, r2, asr r0
    51b4:	00437c08 	subeq	r7, r3, r8, lsl #24
    51b8:	53000108 	movwpl	r0, #264	; 0x108
    51bc:	080043ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, lr}
    51c0:	080043ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, lr}
    51c4:	62520001 	subsvs	r0, r2, #1
    51c8:	8e080044 	cdphi	0, 0, cr0, cr8, cr4, {2}
    51cc:	01080044 	tsteq	r8, r4, asr #32
    51d0:	44d65300 	ldrbmi	r5, [r6], #768	; 0x300
    51d4:	44f60800 	ldrbtmi	r0, [r6], #2048	; 0x800
    51d8:	00010800 	andeq	r0, r1, r0, lsl #16
    51dc:	00454c52 	subeq	r4, r5, r2, asr ip
    51e0:	00456008 	subeq	r6, r5, r8
    51e4:	53000108 	movwpl	r0, #264	; 0x108
    51e8:	080045bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, lr}
    51ec:	080045e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sl, lr}
    51f0:	36590001 	ldrbcc	r0, [r9], -r1
    51f4:	64080046 	strvs	r0, [r8], #-70	; 0x46
    51f8:	01080046 	tsteq	r8, r6, asr #32
    51fc:	46925c00 	ldrmi	r5, [r2], r0, lsl #24
    5200:	46da0800 	ldrbmi	r0, [sl], r0, lsl #16
    5204:	00010800 	andeq	r0, r1, r0, lsl #16
    5208:	00472a58 	subeq	r2, r7, r8, asr sl
    520c:	00475e08 	subeq	r5, r7, r8, lsl #28
    5210:	5a000108 	bpl	5638 <__Stack_Size+0x4e38>
    5214:	080047a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, lr}
    5218:	080047c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, lr}
    521c:	145c0001 	ldrbne	r0, [ip], #-1
    5220:	3a080048 	bcc	205348 <__Stack_Size+0x204b48>
    5224:	01080048 	tsteq	r8, r8, asr #32
    5228:	48b85a00 	ldmmi	r8!, {r9, fp, ip, lr}
    522c:	48da0800 	ldmmi	sl, {fp}^
    5230:	00010800 	andeq	r0, r1, r0, lsl #16
    5234:	00493054 	subeq	r3, r9, r4, asr r0
    5238:	00495008 	subeq	r5, r9, r8
    523c:	51000108 	tstpl	r0, r8, lsl #2
    5240:	080049a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, lr}
    5244:	080049c4 	stmdaeq	r0, {r2, r6, r7, r8, fp, lr}
    5248:	14570001 	ldrbne	r0, [r7], #-1
    524c:	3408004a 	strcc	r0, [r8], #-74	; 0x4a
    5250:	0108004a 	tsteq	r8, sl, asr #32
    5254:	4a8a5300 	bmi	fe299e5c <BootRAM+0xd20a5fd>
    5258:	4aa00800 	bmi	fe807260 <BootRAM+0xd777a01>
    525c:	00010800 	andeq	r0, r1, r0, lsl #16
    5260:	004afc57 	subeq	pc, sl, r7, asr ip	; <UNPREDICTABLE>
    5264:	004b1c08 	subeq	r1, fp, r8, lsl #24
    5268:	56000108 	strpl	r0, [r0], -r8, lsl #2
    526c:	08004b76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, fp, lr}
    5270:	08004b9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, fp, lr}
    5274:	f0590001 			; <UNDEFINED> instruction: 0xf0590001
    5278:	1008004b 	andne	r0, r8, fp, asr #32
    527c:	0108004c 	tsteq	r8, ip, asr #32
    5280:	4c4c5800 	mcrrmi	8, 0, r5, ip, cr0
    5284:	4cc80800 	stclmi	8, cr0, [r8], {0}
    5288:	00010800 	andeq	r0, r1, r0, lsl #16
    528c:	004cf458 	subeq	pc, ip, r8, asr r4	; <UNPREDICTABLE>
    5290:	004d3608 	subeq	r3, sp, r8, lsl #12
    5294:	54000108 	strpl	r0, [r0], #-264	; 0x108
    5298:	08004d6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, sl, fp, lr}
    529c:	08004dbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, sl, fp, lr}
    52a0:	e8570001 	ldmda	r7, {r0}^
    52a4:	3008004d 	andcc	r0, r8, sp, asr #32
    52a8:	0108004e 	tsteq	r8, lr, asr #32
    52ac:	4e665700 	cdpmi	7, 6, cr5, cr6, cr0, {0}
    52b0:	4ea00800 	cdpmi	8, 10, cr0, cr0, cr0, {0}
    52b4:	00010800 	andeq	r0, r1, r0, lsl #16
    52b8:	004ee253 	subeq	lr, lr, r3, asr r2
    52bc:	004f2408 	subeq	r2, pc, r8, lsl #8
    52c0:	50000108 	andpl	r0, r0, r8, lsl #2
    52c4:	08004f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, lr}
    52c8:	08004f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, lr}
    52cc:	ee560001 	cdp	0, 5, cr0, cr6, cr1, {0}
    52d0:	0c08004f 	stceq	0, cr0, [r8], {79}	; 0x4f
    52d4:	01080050 	qaddeq	r0, r0, r8
    52d8:	50865c00 	addpl	r5, r6, r0, lsl #24
    52dc:	50a60800 	adcpl	r0, r6, r0, lsl #16
    52e0:	00010800 	andeq	r0, r1, r0, lsl #16
    52e4:	00513e50 	subseq	r3, r1, r0, asr lr
    52e8:	00516208 	subseq	r6, r1, r8, lsl #4
    52ec:	58000108 	stmdapl	r0, {r3, r8}
    52f0:	08005162 	stmdaeq	r0, {r1, r5, r6, r8, ip, lr}
    52f4:	08005172 	stmdaeq	r0, {r1, r4, r5, r6, r8, ip, lr}
    52f8:	007a0006 	rsbseq	r0, sl, r6
    52fc:	9f220079 	svcls	0x00220079
    5300:	08005172 	stmdaeq	r0, {r1, r4, r5, r6, r8, ip, lr}
    5304:	080051a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, ip, lr}
    5308:	0074002a 	rsbseq	r0, r4, sl, lsr #32
    530c:	24141445 	ldrcs	r1, [r4], #-1093	; 0x445
    5310:	20231f17 	eorcs	r1, r3, r7, lsl pc
    5314:	00742125 	rsbseq	r2, r4, r5, lsr #2
    5318:	1f141436 	svcne	0x00141436
    531c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5320:	74272125 	strtvc	r2, [r7], #-293	; 0x125
    5324:	14143700 	ldrne	r3, [r4], #-1792	; 0x700
    5328:	231f1724 	tstcs	pc, #36, 14	; 0x900000
    532c:	27212520 	strcs	r2, [r1, -r0, lsr #10]!
    5330:	9f22007a 	svcls	0x0022007a
    5334:	080051c8 	stmdaeq	r0, {r3, r6, r7, r8, ip, lr}
    5338:	0800522a 	stmdaeq	r0, {r1, r3, r5, r9, ip, lr}
    533c:	585a0001 	ldmdapl	sl, {r0}^
    5340:	64080052 	strvs	r0, [r8], #-82	; 0x52
    5344:	01080052 	qaddeq	r0, r2, r8
    5348:	52c05100 	sbcpl	r5, r0, #0, 2
    534c:	52d40800 	sbcspl	r0, r4, #0, 16
    5350:	00010800 	andeq	r0, r1, r0, lsl #16
    5354:	00533454 	subseq	r3, r3, r4, asr r4
    5358:	00536408 	subseq	r6, r3, r8, lsl #8
    535c:	56000108 	strpl	r0, [r0], -r8, lsl #2
    5360:	080053bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip, lr}
    5364:	080053ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, ip, lr}
    5368:	00570001 	subseq	r0, r7, r1
    536c:	00000000 	andeq	r0, r0, r0
    5370:	24000000 	strcs	r0, [r0], #-0
    5374:	5e08003c 	mcrpl	0, 0, r0, cr8, cr12, {1}
    5378:	3808003c 	stmdacc	r8, {r2, r3, r4, r5}
    537c:	7b007600 	blvc	22b84 <__Stack_Size+0x22384>
    5380:	94912100 	ldrls	r2, [r1], #256	; 0x100
    5384:	761a067f 			; <UNDEFINED> instruction: 0x761a067f
    5388:	1a007b00 	bne	23f90 <__Stack_Size+0x23790>
    538c:	3d007621 	stccc	6, cr7, [r0, #-132]	; 0xffffff7c
    5390:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5394:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5398:	32007621 	andcc	r7, r0, #34603008	; 0x2100000
    539c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    53a0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    53a4:	00762721 	rsbseq	r2, r6, r1, lsr #14
    53a8:	1f141446 	svcne	0x00141446
    53ac:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    53b0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    53b4:	003c5e9f 	mlaseq	ip, pc, lr, r5	; <UNPREDICTABLE>
    53b8:	003cc608 	eorseq	ip, ip, r8, lsl #12
    53bc:	77003608 	strvc	r3, [r0, -r8, lsl #12]
    53c0:	21007600 	tstcs	r0, r0, lsl #12
    53c4:	771a007b 			; <UNDEFINED> instruction: 0x771a007b
    53c8:	1a007600 	bne	22bd0 <__Stack_Size+0x223d0>
    53cc:	3d007721 	stccc	7, cr7, [r0, #-132]	; 0xffffff7c
    53d0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    53d4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    53d8:	32007721 	andcc	r7, r0, #8650752	; 0x840000
    53dc:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    53e0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    53e4:	00772721 	rsbseq	r2, r7, r1, lsr #14
    53e8:	1f141446 	svcne	0x00141446
    53ec:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    53f0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    53f4:	003cc69f 	mlaseq	ip, pc, r6, ip	; <UNPREDICTABLE>
    53f8:	003d3e08 	eorseq	r3, sp, r8, lsl #28
    53fc:	75003608 	strvc	r3, [r0, #-1544]	; 0x608
    5400:	21007700 	tstcs	r0, r0, lsl #14
    5404:	751a0076 	ldrvc	r0, [sl, #-118]	; 0x76
    5408:	1a007700 	bne	23010 <__Stack_Size+0x22810>
    540c:	3d007521 	cfstr32cc	mvfx7, [r0, #-132]	; 0xffffff7c
    5410:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5414:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5418:	32007521 	andcc	r7, r0, #138412032	; 0x8400000
    541c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5420:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5424:	00752721 	rsbseq	r2, r5, r1, lsr #14
    5428:	1f141446 	svcne	0x00141446
    542c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5430:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5434:	003d3e9f 	mlaseq	sp, pc, lr, r3	; <UNPREDICTABLE>
    5438:	003db408 	eorseq	fp, sp, r8, lsl #8
    543c:	78003608 	stmdavc	r0, {r3, r9, sl, ip, sp}
    5440:	21007500 	tstcs	r0, r0, lsl #10
    5444:	781a0077 	ldmdavc	sl, {r0, r1, r2, r4, r5, r6}
    5448:	1a007500 	bne	22850 <__Stack_Size+0x22050>
    544c:	3d007821 	stccc	8, cr7, [r0, #-132]	; 0xffffff7c
    5450:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5454:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5458:	32007821 	andcc	r7, r0, #2162688	; 0x210000
    545c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5460:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5464:	00782721 	rsbseq	r2, r8, r1, lsr #14
    5468:	1f141446 	svcne	0x00141446
    546c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5470:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5474:	003db49f 	mlaseq	sp, pc, r4, fp	; <UNPREDICTABLE>
    5478:	003e2408 	eorseq	r2, lr, r8, lsl #8
    547c:	7a003608 	bvc	12ca4 <__Stack_Size+0x124a4>
    5480:	21007800 	tstcs	r0, r0, lsl #16
    5484:	7a1a0075 	bvc	685660 <__Stack_Size+0x684e60>
    5488:	1a007800 	bne	23490 <__Stack_Size+0x22c90>
    548c:	3d007a21 	vstrcc	s14, [r0, #-132]	; 0xffffff7c
    5490:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5494:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5498:	32007a21 	andcc	r7, r0, #135168	; 0x21000
    549c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    54a0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    54a4:	007a2721 	rsbseq	r2, sl, r1, lsr #14
    54a8:	1f141446 	svcne	0x00141446
    54ac:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    54b0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    54b4:	003e249f 	mlaseq	lr, pc, r4, r2	; <UNPREDICTABLE>
    54b8:	003e9808 	eorseq	r9, lr, r8, lsl #16
    54bc:	71003608 	tstvc	r0, r8, lsl #12
    54c0:	21007a00 	tstcs	r0, r0, lsl #20
    54c4:	711a0078 	tstvc	sl, r8, ror r0
    54c8:	1a007a00 	bne	23cd0 <__Stack_Size+0x234d0>
    54cc:	3d007121 	stfccs	f7, [r0, #-132]	; 0xffffff7c
    54d0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    54d4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    54d8:	32007121 	andcc	r7, r0, #1073741832	; 0x40000008
    54dc:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    54e0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    54e4:	00712721 	rsbseq	r2, r1, r1, lsr #14
    54e8:	1f141446 	svcne	0x00141446
    54ec:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    54f0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    54f4:	003e989f 	mlaseq	lr, pc, r8, r9	; <UNPREDICTABLE>
    54f8:	003f1008 	eorseq	r1, pc, r8
    54fc:	74003608 	strvc	r3, [r0], #-1544	; 0x608
    5500:	21007100 	mrscs	r7, (UNDEF: 16)
    5504:	741a007a 	ldrvc	r0, [sl], #-122	; 0x7a
    5508:	1a007100 	bne	21910 <__Stack_Size+0x21110>
    550c:	3d007421 	cfstrscc	mvf7, [r0, #-132]	; 0xffffff7c
    5510:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5514:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5518:	32007421 	andcc	r7, r0, #553648128	; 0x21000000
    551c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5520:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5524:	00742721 	rsbseq	r2, r4, r1, lsr #14
    5528:	1f141446 	svcne	0x00141446
    552c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5530:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5534:	003f109f 	mlaseq	pc, pc, r0, r1	; <UNPREDICTABLE>
    5538:	003f9408 	eorseq	r9, pc, r8, lsl #8
    553c:	70003608 	andvc	r3, r0, r8, lsl #12
    5540:	21007400 	tstcs	r0, r0, lsl #8
    5544:	701a0071 	andsvc	r0, sl, r1, ror r0
    5548:	1a007400 	bne	22550 <__Stack_Size+0x21d50>
    554c:	3d007021 	stccc	0, cr7, [r0, #-132]	; 0xffffff7c
    5550:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5554:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5558:	32007021 	andcc	r7, r0, #33	; 0x21
    555c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5560:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5564:	00702721 	rsbseq	r2, r0, r1, lsr #14
    5568:	1f141446 	svcne	0x00141446
    556c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5570:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5574:	003f949f 	mlaseq	pc, pc, r4, r9	; <UNPREDICTABLE>
    5578:	00401e08 	subeq	r1, r0, r8, lsl #28
    557c:	72003608 	andvc	r3, r0, #8, 12	; 0x800000
    5580:	21007000 	mrscs	r7, (UNDEF: 0)
    5584:	721a0074 	andsvc	r0, sl, #116	; 0x74
    5588:	1a007000 	bne	21590 <__Stack_Size+0x20d90>
    558c:	3d007221 	sfmcc	f7, 4, [r0, #-132]	; 0xffffff7c
    5590:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5594:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5598:	32007221 	andcc	r7, r0, #268435458	; 0x10000002
    559c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    55a0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    55a4:	00722721 	rsbseq	r2, r2, r1, lsr #14
    55a8:	1f141446 	svcne	0x00141446
    55ac:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    55b0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    55b4:	00401e9f 	umaaleq	r1, r0, pc, lr	; <UNPREDICTABLE>
    55b8:	00409e08 	subeq	r9, r0, r8, lsl #28
    55bc:	73003608 	movwvc	r3, #1544	; 0x608
    55c0:	21007200 	mrscs	r7, R8_usr
    55c4:	731a0070 	tstvc	sl, #112	; 0x70
    55c8:	1a007200 	bne	21dd0 <__Stack_Size+0x215d0>
    55cc:	3d007321 	stccc	3, cr7, [r0, #-132]	; 0xffffff7c
    55d0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    55d4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    55d8:	32007321 	andcc	r7, r0, #-2080374784	; 0x84000000
    55dc:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    55e0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    55e4:	00732721 	rsbseq	r2, r3, r1, lsr #14
    55e8:	1f141446 	svcne	0x00141446
    55ec:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    55f0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    55f4:	00409e9f 	umaaleq	r9, r0, pc, lr	; <UNPREDICTABLE>
    55f8:	00412808 	subeq	r2, r1, r8, lsl #16
    55fc:	7c003608 	stcvc	6, cr3, [r0], {8}
    5600:	21007300 	mrscs	r7, LR_irq
    5604:	7c1a0072 	ldcvc	0, cr0, [sl], {114}	; 0x72
    5608:	1a007300 	bne	22210 <__Stack_Size+0x21a10>
    560c:	3d007c21 	stccc	12, cr7, [r0, #-132]	; 0xffffff7c
    5610:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5614:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5618:	32007c21 	andcc	r7, r0, #8448	; 0x2100
    561c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5620:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5624:	007c2721 	rsbseq	r2, ip, r1, lsr #14
    5628:	1f141446 	svcne	0x00141446
    562c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5630:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5634:	0041289f 	umaaleq	r2, r1, pc, r8	; <UNPREDICTABLE>
    5638:	00419608 	subeq	r9, r1, r8, lsl #12
    563c:	76003608 	strvc	r3, [r0], -r8, lsl #12
    5640:	21007c00 	tstcs	r0, r0, lsl #24
    5644:	761a0073 			; <UNDEFINED> instruction: 0x761a0073
    5648:	1a007c00 	bne	24650 <__Stack_Size+0x23e50>
    564c:	3d007621 	stccc	6, cr7, [r0, #-132]	; 0xffffff7c
    5650:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5654:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5658:	32007621 	andcc	r7, r0, #34603008	; 0x2100000
    565c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5660:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5664:	00762721 	rsbseq	r2, r6, r1, lsr #14
    5668:	1f141446 	svcne	0x00141446
    566c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5670:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5674:	0041969f 	umaaleq	r9, r1, pc, r6	; <UNPREDICTABLE>
    5678:	00420608 	subeq	r0, r2, r8, lsl #12
    567c:	7a003608 	bvc	12ea4 <__Stack_Size+0x126a4>
    5680:	21007600 	tstcs	r0, r0, lsl #12
    5684:	7a1a007c 	bvc	68587c <__Stack_Size+0x68507c>
    5688:	1a007600 	bne	22e90 <__Stack_Size+0x22690>
    568c:	3d007a21 	vstrcc	s14, [r0, #-132]	; 0xffffff7c
    5690:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5694:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5698:	32007a21 	andcc	r7, r0, #135168	; 0x21000
    569c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    56a0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    56a4:	007a2721 	rsbseq	r2, sl, r1, lsr #14
    56a8:	1f141446 	svcne	0x00141446
    56ac:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    56b0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    56b4:	0042069f 	umaaleq	r0, r2, pc, r6	; <UNPREDICTABLE>
    56b8:	00427e08 	subeq	r7, r2, r8, lsl #28
    56bc:	71003608 	tstvc	r0, r8, lsl #12
    56c0:	21007a00 	tstcs	r0, r0, lsl #20
    56c4:	711a0076 	tstvc	sl, r6, ror r0
    56c8:	1a007a00 	bne	23ed0 <__Stack_Size+0x236d0>
    56cc:	3d007121 	stfccs	f7, [r0, #-132]	; 0xffffff7c
    56d0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    56d4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    56d8:	32007121 	andcc	r7, r0, #1073741832	; 0x40000008
    56dc:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    56e0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    56e4:	00712721 	rsbseq	r2, r1, r1, lsr #14
    56e8:	1f141446 	svcne	0x00141446
    56ec:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    56f0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    56f4:	00427e9f 	umaaleq	r7, r2, pc, lr	; <UNPREDICTABLE>
    56f8:	0042ee08 	subeq	lr, r2, r8, lsl #28
    56fc:	79003608 	stmdbvc	r0, {r3, r9, sl, ip, sp}
    5700:	21007100 	mrscs	r7, (UNDEF: 16)
    5704:	791a007a 	ldmdbvc	sl, {r1, r3, r4, r5, r6}
    5708:	1a007100 	bne	21b10 <__Stack_Size+0x21310>
    570c:	3d007921 	stccc	9, cr7, [r0, #-132]	; 0xffffff7c
    5710:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5714:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5718:	32007921 	andcc	r7, r0, #540672	; 0x84000
    571c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5720:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5724:	00792721 	rsbseq	r2, r9, r1, lsr #14
    5728:	1f141446 	svcne	0x00141446
    572c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5730:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5734:	0042ee9f 	umaaleq	lr, r2, pc, lr	; <UNPREDICTABLE>
    5738:	00436008 	subeq	r6, r3, r8
    573c:	7c003608 	stcvc	6, cr3, [r0], {8}
    5740:	21007900 	tstcs	r0, r0, lsl #18
    5744:	7c1a0071 	ldcvc	0, cr0, [sl], {113}	; 0x71
    5748:	1a007900 	bne	23b50 <__Stack_Size+0x23350>
    574c:	3d007c21 	stccc	12, cr7, [r0, #-132]	; 0xffffff7c
    5750:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5754:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5758:	32007c21 	andcc	r7, r0, #8448	; 0x2100
    575c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5760:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5764:	007c2721 	rsbseq	r2, ip, r1, lsr #14
    5768:	1f141446 	svcne	0x00141446
    576c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5770:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5774:	0043609f 	umaaleq	r6, r3, pc, r0	; <UNPREDICTABLE>
    5778:	0043ca08 	subeq	ip, r3, r8, lsl #20
    577c:	70003608 	andvc	r3, r0, r8, lsl #12
    5780:	21007c00 	tstcs	r0, r0, lsl #24
    5784:	701a0079 	andsvc	r0, sl, r9, ror r0
    5788:	1a007c00 	bne	24790 <__Stack_Size+0x23f90>
    578c:	3d007021 	stccc	0, cr7, [r0, #-132]	; 0xffffff7c
    5790:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5794:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5798:	32007021 	andcc	r7, r0, #33	; 0x21
    579c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    57a0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    57a4:	00702721 	rsbseq	r2, r0, r1, lsr #14
    57a8:	1f141446 	svcne	0x00141446
    57ac:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    57b0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    57b4:	0043ca9f 	umaaleq	ip, r3, pc, sl	; <UNPREDICTABLE>
    57b8:	00446208 	subeq	r6, r4, r8, lsl #4
    57bc:	76003608 	strvc	r3, [r0], -r8, lsl #12
    57c0:	21007000 	mrscs	r7, (UNDEF: 0)
    57c4:	761a007c 			; <UNDEFINED> instruction: 0x761a007c
    57c8:	1a007000 	bne	217d0 <__Stack_Size+0x20fd0>
    57cc:	3d007621 	stccc	6, cr7, [r0, #-132]	; 0xffffff7c
    57d0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    57d4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    57d8:	32007621 	andcc	r7, r0, #34603008	; 0x2100000
    57dc:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    57e0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    57e4:	00762721 	rsbseq	r2, r6, r1, lsr #14
    57e8:	1f141446 	svcne	0x00141446
    57ec:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    57f0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    57f4:	0044629f 	umaaleq	r6, r4, pc, r2	; <UNPREDICTABLE>
    57f8:	0044d608 	subeq	sp, r4, r8, lsl #12
    57fc:	77003608 	strvc	r3, [r0, -r8, lsl #12]
    5800:	21007600 	tstcs	r0, r0, lsl #12
    5804:	771a0070 			; <UNDEFINED> instruction: 0x771a0070
    5808:	1a007600 	bne	23010 <__Stack_Size+0x22810>
    580c:	3d007721 	stccc	7, cr7, [r0, #-132]	; 0xffffff7c
    5810:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5814:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5818:	32007721 	andcc	r7, r0, #8650752	; 0x840000
    581c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5820:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5824:	00772721 	rsbseq	r2, r7, r1, lsr #14
    5828:	1f141446 	svcne	0x00141446
    582c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5830:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5834:	0044d69f 	umaaleq	sp, r4, pc, r6	; <UNPREDICTABLE>
    5838:	00454c08 	subeq	r4, r5, r8, lsl #24
    583c:	75003608 	strvc	r3, [r0, #-1544]	; 0x608
    5840:	21007700 	tstcs	r0, r0, lsl #14
    5844:	751a0076 	ldrvc	r0, [sl, #-118]	; 0x76
    5848:	1a007700 	bne	23450 <__Stack_Size+0x22c50>
    584c:	3d007521 	cfstr32cc	mvfx7, [r0, #-132]	; 0xffffff7c
    5850:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5854:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5858:	32007521 	andcc	r7, r0, #138412032	; 0x8400000
    585c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5860:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5864:	00752721 	rsbseq	r2, r5, r1, lsr #14
    5868:	1f141446 	svcne	0x00141446
    586c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5870:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5874:	00454c9f 	umaaleq	r4, r5, pc, ip	; <UNPREDICTABLE>
    5878:	0045bc08 	subeq	fp, r5, r8, lsl #24
    587c:	74003608 	strvc	r3, [r0], #-1544	; 0x608
    5880:	21007500 	tstcs	r0, r0, lsl #10
    5884:	741a0077 	ldrvc	r0, [sl], #-119	; 0x77
    5888:	1a007500 	bne	22c90 <__Stack_Size+0x22490>
    588c:	3d007421 	cfstrscc	mvf7, [r0, #-132]	; 0xffffff7c
    5890:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5894:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5898:	32007421 	andcc	r7, r0, #553648128	; 0x21000000
    589c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    58a0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    58a4:	00742721 	rsbseq	r2, r4, r1, lsr #14
    58a8:	1f141446 	svcne	0x00141446
    58ac:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    58b0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    58b4:	0045bc9f 	umaaleq	fp, r5, pc, ip	; <UNPREDICTABLE>
    58b8:	00463608 	subeq	r3, r6, r8, lsl #12
    58bc:	71003608 	tstvc	r0, r8, lsl #12
    58c0:	21007400 	tstcs	r0, r0, lsl #8
    58c4:	711a0075 	tstvc	sl, r5, ror r0
    58c8:	1a007400 	bne	228d0 <__Stack_Size+0x220d0>
    58cc:	3d007121 	stfccs	f7, [r0, #-132]	; 0xffffff7c
    58d0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    58d4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    58d8:	32007121 	andcc	r7, r0, #1073741832	; 0x40000008
    58dc:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    58e0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    58e4:	00712721 	rsbseq	r2, r1, r1, lsr #14
    58e8:	1f141446 	svcne	0x00141446
    58ec:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    58f0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    58f4:	0046369f 	umaaleq	r3, r6, pc, r6	; <UNPREDICTABLE>
    58f8:	00469208 	subeq	r9, r6, r8, lsl #4
    58fc:	72003608 	andvc	r3, r0, #8, 12	; 0x800000
    5900:	21007100 	mrscs	r7, (UNDEF: 16)
    5904:	721a0074 	andsvc	r0, sl, #116	; 0x74
    5908:	1a007100 	bne	21d10 <__Stack_Size+0x21510>
    590c:	3d007221 	sfmcc	f7, 4, [r0, #-132]	; 0xffffff7c
    5910:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5914:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5918:	32007221 	andcc	r7, r0, #268435458	; 0x10000002
    591c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5920:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5924:	00722721 	rsbseq	r2, r2, r1, lsr #14
    5928:	1f141446 	svcne	0x00141446
    592c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5930:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5934:	0046929f 	umaaleq	r9, r6, pc, r2	; <UNPREDICTABLE>
    5938:	00472a08 	subeq	r2, r7, r8, lsl #20
    593c:	73003608 	movwvc	r3, #1544	; 0x608
    5940:	21007200 	mrscs	r7, R8_usr
    5944:	731a0071 	tstvc	sl, #113	; 0x71
    5948:	1a007200 	bne	22150 <__Stack_Size+0x21950>
    594c:	3d007321 	stccc	3, cr7, [r0, #-132]	; 0xffffff7c
    5950:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5954:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5958:	32007321 	andcc	r7, r0, #-2080374784	; 0x84000000
    595c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5960:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5964:	00732721 	rsbseq	r2, r3, r1, lsr #14
    5968:	1f141446 	svcne	0x00141446
    596c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5970:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5974:	00472a9f 	umaaleq	r2, r7, pc, sl	; <UNPREDICTABLE>
    5978:	0047a608 	subeq	sl, r7, r8, lsl #12
    597c:	70003608 	andvc	r3, r0, r8, lsl #12
    5980:	21007300 	mrscs	r7, LR_irq
    5984:	701a0072 	andsvc	r0, sl, r2, ror r0
    5988:	1a007300 	bne	22590 <__Stack_Size+0x21d90>
    598c:	3d007021 	stccc	0, cr7, [r0, #-132]	; 0xffffff7c
    5990:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5994:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5998:	32007021 	andcc	r7, r0, #33	; 0x21
    599c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    59a0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    59a4:	00702721 	rsbseq	r2, r0, r1, lsr #14
    59a8:	1f141446 	svcne	0x00141446
    59ac:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    59b0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    59b4:	0047a69f 	umaaleq	sl, r7, pc, r6	; <UNPREDICTABLE>
    59b8:	00481408 	subeq	r1, r8, r8, lsl #8
    59bc:	76003608 	strvc	r3, [r0], -r8, lsl #12
    59c0:	21007000 	mrscs	r7, (UNDEF: 0)
    59c4:	761a0073 			; <UNDEFINED> instruction: 0x761a0073
    59c8:	1a007000 	bne	219d0 <__Stack_Size+0x211d0>
    59cc:	3d007621 	stccc	6, cr7, [r0, #-132]	; 0xffffff7c
    59d0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    59d4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    59d8:	32007621 	andcc	r7, r0, #34603008	; 0x2100000
    59dc:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    59e0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    59e4:	00762721 	rsbseq	r2, r6, r1, lsr #14
    59e8:	1f141446 	svcne	0x00141446
    59ec:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    59f0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    59f4:	0048149f 	umaaleq	r1, r8, pc, r4	; <UNPREDICTABLE>
    59f8:	0048b808 	subeq	fp, r8, r8, lsl #16
    59fc:	78003608 	stmdavc	r0, {r3, r9, sl, ip, sp}
    5a00:	21007600 	tstcs	r0, r0, lsl #12
    5a04:	781a0070 	ldmdavc	sl, {r4, r5, r6}
    5a08:	1a007600 	bne	23210 <__Stack_Size+0x22a10>
    5a0c:	3d007821 	stccc	8, cr7, [r0, #-132]	; 0xffffff7c
    5a10:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5a14:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5a18:	32007821 	andcc	r7, r0, #2162688	; 0x210000
    5a1c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5a20:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5a24:	00782721 	rsbseq	r2, r8, r1, lsr #14
    5a28:	1f141446 	svcne	0x00141446
    5a2c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5a30:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5a34:	0048b89f 	umaaleq	fp, r8, pc, r8	; <UNPREDICTABLE>
    5a38:	00493008 	subeq	r3, r9, r8
    5a3c:	7c003608 	stcvc	6, cr3, [r0], {8}
    5a40:	21007800 	tstcs	r0, r0, lsl #16
    5a44:	7c1a0076 	ldcvc	0, cr0, [sl], {118}	; 0x76
    5a48:	1a007800 	bne	23a50 <__Stack_Size+0x23250>
    5a4c:	3d007c21 	stccc	12, cr7, [r0, #-132]	; 0xffffff7c
    5a50:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5a54:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5a58:	32007c21 	andcc	r7, r0, #8448	; 0x2100
    5a5c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5a60:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5a64:	007c2721 	rsbseq	r2, ip, r1, lsr #14
    5a68:	1f141446 	svcne	0x00141446
    5a6c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5a70:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5a74:	0049309f 	umaaleq	r3, r9, pc, r0	; <UNPREDICTABLE>
    5a78:	0049a408 	subeq	sl, r9, r8, lsl #8
    5a7c:	75003608 	strvc	r3, [r0, #-1544]	; 0x608
    5a80:	21007c00 	tstcs	r0, r0, lsl #24
    5a84:	751a0078 	ldrvc	r0, [sl, #-120]	; 0x78
    5a88:	1a007c00 	bne	24a90 <__Stack_Size+0x24290>
    5a8c:	3d007521 	cfstr32cc	mvfx7, [r0, #-132]	; 0xffffff7c
    5a90:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5a94:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5a98:	32007521 	andcc	r7, r0, #138412032	; 0x8400000
    5a9c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5aa0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5aa4:	00752721 	rsbseq	r2, r5, r1, lsr #14
    5aa8:	1f141446 	svcne	0x00141446
    5aac:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5ab0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5ab4:	0049a49f 	umaaleq	sl, r9, pc, r4	; <UNPREDICTABLE>
    5ab8:	004a1408 	subeq	r1, sl, r8, lsl #8
    5abc:	74003608 	strvc	r3, [r0], #-1544	; 0x608
    5ac0:	21007500 	tstcs	r0, r0, lsl #10
    5ac4:	741a007c 	ldrvc	r0, [sl], #-124	; 0x7c
    5ac8:	1a007500 	bne	22ed0 <__Stack_Size+0x226d0>
    5acc:	3d007421 	cfstrscc	mvf7, [r0, #-132]	; 0xffffff7c
    5ad0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5ad4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5ad8:	32007421 	andcc	r7, r0, #553648128	; 0x21000000
    5adc:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5ae0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5ae4:	00742721 	rsbseq	r2, r4, r1, lsr #14
    5ae8:	1f141446 	svcne	0x00141446
    5aec:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5af0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5af4:	004a149f 	umaaleq	r1, sl, pc, r4	; <UNPREDICTABLE>
    5af8:	004a8a08 	subeq	r8, sl, r8, lsl #20
    5afc:	72003608 	andvc	r3, r0, #8, 12	; 0x800000
    5b00:	21007400 	tstcs	r0, r0, lsl #8
    5b04:	721a0075 	andsvc	r0, sl, #117	; 0x75
    5b08:	1a007400 	bne	22b10 <__Stack_Size+0x22310>
    5b0c:	3d007221 	sfmcc	f7, 4, [r0, #-132]	; 0xffffff7c
    5b10:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5b14:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5b18:	32007221 	andcc	r7, r0, #268435458	; 0x10000002
    5b1c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5b20:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5b24:	00722721 	rsbseq	r2, r2, r1, lsr #14
    5b28:	1f141446 	svcne	0x00141446
    5b2c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5b30:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5b34:	004a8a9f 	umaaleq	r8, sl, pc, sl	; <UNPREDICTABLE>
    5b38:	004afc08 	subeq	pc, sl, r8, lsl #24
    5b3c:	71003608 	tstvc	r0, r8, lsl #12
    5b40:	21007200 	mrscs	r7, R8_usr
    5b44:	711a0074 	tstvc	sl, r4, ror r0
    5b48:	1a007200 	bne	22350 <__Stack_Size+0x21b50>
    5b4c:	3d007121 	stfccs	f7, [r0, #-132]	; 0xffffff7c
    5b50:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5b54:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5b58:	32007121 	andcc	r7, r0, #1073741832	; 0x40000008
    5b5c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5b60:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5b64:	00712721 	rsbseq	r2, r1, r1, lsr #14
    5b68:	1f141446 	svcne	0x00141446
    5b6c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5b70:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5b74:	004afc9f 	umaaleq	pc, sl, pc, ip	; <UNPREDICTABLE>
    5b78:	004b7608 	subeq	r7, fp, r8, lsl #12
    5b7c:	73003608 	movwvc	r3, #1544	; 0x608
    5b80:	21007100 	mrscs	r7, (UNDEF: 16)
    5b84:	731a0072 	tstvc	sl, #114	; 0x72
    5b88:	1a007100 	bne	21f90 <__Stack_Size+0x21790>
    5b8c:	3d007321 	stccc	3, cr7, [r0, #-132]	; 0xffffff7c
    5b90:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5b94:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5b98:	32007321 	andcc	r7, r0, #-2080374784	; 0x84000000
    5b9c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5ba0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5ba4:	00732721 	rsbseq	r2, r3, r1, lsr #14
    5ba8:	1f141446 	svcne	0x00141446
    5bac:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5bb0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5bb4:	004b769f 	umaaleq	r7, fp, pc, r6	; <UNPREDICTABLE>
    5bb8:	004bf008 	subeq	pc, fp, r8
    5bbc:	70003608 	andvc	r3, r0, r8, lsl #12
    5bc0:	21007300 	mrscs	r7, LR_irq
    5bc4:	701a0071 	andsvc	r0, sl, r1, ror r0
    5bc8:	1a007300 	bne	227d0 <__Stack_Size+0x21fd0>
    5bcc:	3d007021 	stccc	0, cr7, [r0, #-132]	; 0xffffff7c
    5bd0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5bd4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5bd8:	32007021 	andcc	r7, r0, #33	; 0x21
    5bdc:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5be0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5be4:	00702721 	rsbseq	r2, r0, r1, lsr #14
    5be8:	1f141446 	svcne	0x00141446
    5bec:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5bf0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5bf4:	004bf09f 	umaaleq	pc, fp, pc, r0	; <UNPREDICTABLE>
    5bf8:	004c4c08 	subeq	r4, ip, r8, lsl #24
    5bfc:	76003608 	strvc	r3, [r0], -r8, lsl #12
    5c00:	21007000 	mrscs	r7, (UNDEF: 0)
    5c04:	761a0073 			; <UNDEFINED> instruction: 0x761a0073
    5c08:	1a007000 	bne	21c10 <__Stack_Size+0x21410>
    5c0c:	3d007621 	stccc	6, cr7, [r0, #-132]	; 0xffffff7c
    5c10:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5c14:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5c18:	32007621 	andcc	r7, r0, #34603008	; 0x2100000
    5c1c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5c20:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5c24:	00762721 	rsbseq	r2, r6, r1, lsr #14
    5c28:	1f141446 	svcne	0x00141446
    5c2c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5c30:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5c34:	004c4c9f 	umaaleq	r4, ip, pc, ip	; <UNPREDICTABLE>
    5c38:	004cf408 	subeq	pc, ip, r8, lsl #8
    5c3c:	7c003608 	stcvc	6, cr3, [r0], {8}
    5c40:	21007600 	tstcs	r0, r0, lsl #12
    5c44:	7c1a0070 	ldcvc	0, cr0, [sl], {112}	; 0x70
    5c48:	1a007600 	bne	23450 <__Stack_Size+0x22c50>
    5c4c:	3d007c21 	stccc	12, cr7, [r0, #-132]	; 0xffffff7c
    5c50:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5c54:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5c58:	32007c21 	andcc	r7, r0, #8448	; 0x2100
    5c5c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5c60:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5c64:	007c2721 	rsbseq	r2, ip, r1, lsr #14
    5c68:	1f141446 	svcne	0x00141446
    5c6c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5c70:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5c74:	004cf49f 	umaaleq	pc, ip, pc, r4	; <UNPREDICTABLE>
    5c78:	004d6a08 	subeq	r6, sp, r8, lsl #20
    5c7c:	75003608 	strvc	r3, [r0, #-1544]	; 0x608
    5c80:	21007c00 	tstcs	r0, r0, lsl #24
    5c84:	751a0076 	ldrvc	r0, [sl, #-118]	; 0x76
    5c88:	1a007c00 	bne	24c90 <__Stack_Size+0x24490>
    5c8c:	3d007521 	cfstr32cc	mvfx7, [r0, #-132]	; 0xffffff7c
    5c90:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5c94:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5c98:	32007521 	andcc	r7, r0, #138412032	; 0x8400000
    5c9c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5ca0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5ca4:	00752721 	rsbseq	r2, r5, r1, lsr #14
    5ca8:	1f141446 	svcne	0x00141446
    5cac:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5cb0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5cb4:	004d6a9f 	umaaleq	r6, sp, pc, sl	; <UNPREDICTABLE>
    5cb8:	004de808 	subeq	lr, sp, r8, lsl #16
    5cbc:	78003608 	stmdavc	r0, {r3, r9, sl, ip, sp}
    5cc0:	21007500 	tstcs	r0, r0, lsl #10
    5cc4:	781a007c 	ldmdavc	sl, {r2, r3, r4, r5, r6}
    5cc8:	1a007500 	bne	230d0 <__Stack_Size+0x228d0>
    5ccc:	3d007821 	stccc	8, cr7, [r0, #-132]	; 0xffffff7c
    5cd0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5cd4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5cd8:	32007821 	andcc	r7, r0, #2162688	; 0x210000
    5cdc:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5ce0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5ce4:	00782721 	rsbseq	r2, r8, r1, lsr #14
    5ce8:	1f141446 	svcne	0x00141446
    5cec:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5cf0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5cf4:	004de89f 	umaaleq	lr, sp, pc, r8	; <UNPREDICTABLE>
    5cf8:	004e6608 	subeq	r6, lr, r8, lsl #12
    5cfc:	72003608 	andvc	r3, r0, #8, 12	; 0x800000
    5d00:	21007800 	tstcs	r0, r0, lsl #16
    5d04:	721a0075 	andsvc	r0, sl, #117	; 0x75
    5d08:	1a007800 	bne	23d10 <__Stack_Size+0x23510>
    5d0c:	3d007221 	sfmcc	f7, 4, [r0, #-132]	; 0xffffff7c
    5d10:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5d14:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5d18:	32007221 	andcc	r7, r0, #268435458	; 0x10000002
    5d1c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5d20:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5d24:	00722721 	rsbseq	r2, r2, r1, lsr #14
    5d28:	1f141446 	svcne	0x00141446
    5d2c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5d30:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5d34:	004e669f 	umaaleq	r6, lr, pc, r6	; <UNPREDICTABLE>
    5d38:	004ee208 	subeq	lr, lr, r8, lsl #4
    5d3c:	71003608 	tstvc	r0, r8, lsl #12
    5d40:	21007200 	mrscs	r7, R8_usr
    5d44:	711a0078 	tstvc	sl, r8, ror r0
    5d48:	1a007200 	bne	22550 <__Stack_Size+0x21d50>
    5d4c:	3d007121 	stfccs	f7, [r0, #-132]	; 0xffffff7c
    5d50:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5d54:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5d58:	32007121 	andcc	r7, r0, #1073741832	; 0x40000008
    5d5c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5d60:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5d64:	00712721 	rsbseq	r2, r1, r1, lsr #14
    5d68:	1f141446 	svcne	0x00141446
    5d6c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5d70:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5d74:	004ee29f 	umaaleq	lr, lr, pc, r2	; <UNPREDICTABLE>
    5d78:	004f7408 	subeq	r7, pc, r8, lsl #8
    5d7c:	74003608 	strvc	r3, [r0], #-1544	; 0x608
    5d80:	21007100 	mrscs	r7, (UNDEF: 16)
    5d84:	741a0072 	ldrvc	r0, [sl], #-114	; 0x72
    5d88:	1a007100 	bne	22190 <__Stack_Size+0x21990>
    5d8c:	3d007421 	cfstrscc	mvf7, [r0, #-132]	; 0xffffff7c
    5d90:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5d94:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5d98:	32007421 	andcc	r7, r0, #553648128	; 0x21000000
    5d9c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5da0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5da4:	00742721 	rsbseq	r2, r4, r1, lsr #14
    5da8:	1f141446 	svcne	0x00141446
    5dac:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5db0:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5db4:	004f749f 	umaaleq	r7, pc, pc, r4	; <UNPREDICTABLE>
    5db8:	004fee08 	subeq	lr, pc, r8, lsl #28
    5dbc:	91004008 	tstls	r0, r8
    5dc0:	74067f94 	strvc	r7, [r6], #-3988	; 0xf94
    5dc4:	00712100 	rsbseq	r2, r1, r0, lsl #2
    5dc8:	7f94911a 	svcvc	0x0094911a
    5dcc:	1a007406 	bne	22dec <__Stack_Size+0x225ec>
    5dd0:	7f949121 	svcvc	0x00949121
    5dd4:	14143d06 	ldrne	r3, [r4], #-3334	; 0xd06
    5dd8:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5ddc:	91212517 	teqls	r1, r7, lsl r5
    5de0:	32067f94 	andcc	r7, r6, #148, 30	; 0x250
    5de4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5de8:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5dec:	94912721 	ldrls	r2, [r1], #1825	; 0x721
    5df0:	1446067f 	strbne	r0, [r6], #-1663	; 0x67f
    5df4:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5df8:	21251724 	teqcs	r5, r4, lsr #14
    5dfc:	ee9f2227 	cdp	2, 9, cr2, cr15, cr7, {1}
    5e00:	8608004f 	strhi	r0, [r8], -pc, asr #32
    5e04:	44080050 	strmi	r0, [r8], #-80	; 0x50
    5e08:	7f989100 	svcvc	0x00989100
    5e0c:	7f949106 	svcvc	0x00949106
    5e10:	00742106 	rsbseq	r2, r4, r6, lsl #2
    5e14:	7f98911a 	svcvc	0x0098911a
    5e18:	7f949106 	svcvc	0x00949106
    5e1c:	91211a06 	teqls	r1, r6, lsl #20
    5e20:	3d067f98 	stccc	15, cr7, [r6, #-608]	; 0xfffffda0
    5e24:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5e28:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5e2c:	7f989121 	svcvc	0x00989121
    5e30:	14143206 	ldrne	r3, [r4], #-518	; 0x206
    5e34:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5e38:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5e3c:	067f9891 			; <UNDEFINED> instruction: 0x067f9891
    5e40:	1f141446 	svcne	0x00141446
    5e44:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5e48:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5e4c:	0050869f 			; <UNDEFINED> instruction: 0x0050869f
    5e50:	00513e08 	subseq	r3, r1, r8, lsl #28
    5e54:	91004608 	tstls	r0, r8, lsl #12
    5e58:	91067fa4 	smlatbls	r6, r4, pc, r7	; <UNPREDICTABLE>
    5e5c:	21067f98 			; <UNDEFINED> instruction: 0x21067f98
    5e60:	067f9491 			; <UNDEFINED> instruction: 0x067f9491
    5e64:	7fa4911a 	svcvc	0x00a4911a
    5e68:	7f989106 	svcvc	0x00989106
    5e6c:	91211a06 	teqls	r1, r6, lsl #20
    5e70:	3d067fa4 	stccc	15, cr7, [r6, #-656]	; 0xfffffd70
    5e74:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5e78:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5e7c:	7fa49121 	svcvc	0x00a49121
    5e80:	14143206 	ldrne	r3, [r4], #-518	; 0x206
    5e84:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5e88:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5e8c:	067fa491 			; <UNDEFINED> instruction: 0x067fa491
    5e90:	1f141446 	svcne	0x00141446
    5e94:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5e98:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5e9c:	00513e9f 			; <UNDEFINED> instruction: 0x00513e9f
    5ea0:	0051c808 	subseq	ip, r1, r8, lsl #16
    5ea4:	91004608 	tstls	r0, r8, lsl #12
    5ea8:	91067fa8 	smlatbls	r6, r8, pc, r7	; <UNPREDICTABLE>
    5eac:	21067fa4 	smlatbcs	r6, r4, pc, r7	; <UNPREDICTABLE>
    5eb0:	067f9891 			; <UNDEFINED> instruction: 0x067f9891
    5eb4:	7fa8911a 	svcvc	0x00a8911a
    5eb8:	7fa49106 	svcvc	0x00a49106
    5ebc:	91211a06 	teqls	r1, r6, lsl #20
    5ec0:	3d067fa8 	stccc	15, cr7, [r6, #-672]	; 0xfffffd60
    5ec4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5ec8:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5ecc:	7fa89121 	svcvc	0x00a89121
    5ed0:	14143206 	ldrne	r3, [r4], #-518	; 0x206
    5ed4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5ed8:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5edc:	067fa891 			; <UNDEFINED> instruction: 0x067fa891
    5ee0:	1f141446 	svcne	0x00141446
    5ee4:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5ee8:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5eec:	0051c89f 			; <UNDEFINED> instruction: 0x0051c89f
    5ef0:	00525808 	subseq	r5, r2, r8, lsl #16
    5ef4:	91004608 	tstls	r0, r8, lsl #12
    5ef8:	91067f94 			; <UNDEFINED> instruction: 0x91067f94
    5efc:	21067fa8 	smlatbcs	r6, r8, pc, r7	; <UNPREDICTABLE>
    5f00:	067fa491 			; <UNDEFINED> instruction: 0x067fa491
    5f04:	7f94911a 	svcvc	0x0094911a
    5f08:	7fa89106 	svcvc	0x00a89106
    5f0c:	91211a06 	teqls	r1, r6, lsl #20
    5f10:	3d067f94 	stccc	15, cr7, [r6, #-592]	; 0xfffffdb0
    5f14:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5f18:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5f1c:	7f949121 	svcvc	0x00949121
    5f20:	14143206 	ldrne	r3, [r4], #-518	; 0x206
    5f24:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5f28:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5f2c:	067f9491 			; <UNDEFINED> instruction: 0x067f9491
    5f30:	1f141446 	svcne	0x00141446
    5f34:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5f38:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5f3c:	0052589f 			; <UNDEFINED> instruction: 0x0052589f
    5f40:	0052c008 	subseq	ip, r2, r8
    5f44:	91004608 	tstls	r0, r8, lsl #12
    5f48:	91067fb0 			; <UNDEFINED> instruction: 0x91067fb0
    5f4c:	21067f94 			; <UNDEFINED> instruction: 0x21067f94
    5f50:	067fa891 			; <UNDEFINED> instruction: 0x067fa891
    5f54:	7fb0911a 	svcvc	0x00b0911a
    5f58:	7f949106 	svcvc	0x00949106
    5f5c:	91211a06 	teqls	r1, r6, lsl #20
    5f60:	3d067fb0 	stccc	15, cr7, [r6, #-704]	; 0xfffffd40
    5f64:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5f68:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5f6c:	7fb09121 	svcvc	0x00b09121
    5f70:	14143206 	ldrne	r3, [r4], #-518	; 0x206
    5f74:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5f78:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5f7c:	067fb091 			; <UNDEFINED> instruction: 0x067fb091
    5f80:	1f141446 	svcne	0x00141446
    5f84:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5f88:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5f8c:	0052c09f 			; <UNDEFINED> instruction: 0x0052c09f
    5f90:	00533408 	subseq	r3, r3, r8, lsl #8
    5f94:	73003c08 	movwvc	r3, #3080	; 0xc08
    5f98:	7fb09100 	svcvc	0x00b09100
    5f9c:	94912106 	ldrls	r2, [r1], #262	; 0x106
    5fa0:	731a067f 	tstvc	sl, #133169152	; 0x7f00000
    5fa4:	7fb09100 	svcvc	0x00b09100
    5fa8:	73211a06 	teqvc	r1, #24576	; 0x6000
    5fac:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5fb0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5fb4:	73212517 	teqvc	r1, #96468992	; 0x5c00000
    5fb8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5fbc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5fc0:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5fc4:	14460073 	strbne	r0, [r6], #-115	; 0x73
    5fc8:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5fcc:	21251724 	teqcs	r5, r4, lsr #14
    5fd0:	349f2227 	ldrcc	r2, [pc], #551	; 5fd8 <__Stack_Size+0x57d8>
    5fd4:	b0080053 	andlt	r0, r8, r3, asr r0
    5fd8:	38080053 	stmdacc	r8, {r0, r1, r4, r6}
    5fdc:	73007100 	movwvc	r7, #256	; 0x100
    5fe0:	b0912100 	addslt	r2, r1, r0, lsl #2
    5fe4:	711a067f 	tstvc	sl, pc, ror r6
    5fe8:	1a007300 	bne	22bf0 <__Stack_Size+0x223f0>
    5fec:	3d007121 	stfccs	f7, [r0, #-132]	; 0xffffff7c
    5ff0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5ff4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5ff8:	32007121 	andcc	r7, r0, #1073741832	; 0x40000008
    5ffc:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    6000:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    6004:	00712721 	rsbseq	r2, r1, r1, lsr #14
    6008:	1f141446 	svcne	0x00141446
    600c:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    6010:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    6014:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6018:	00000000 	andeq	r0, r0, r0
    601c:	00354200 	eorseq	r4, r5, r0, lsl #4
    6020:	00357808 	eorseq	r7, r5, r8, lsl #16
    6024:	59000608 	stmdbpl	r0, {r3, r9, sl}
    6028:	fc930493 	ldc2	4, cr0, [r3], {147}	; 0x93
    602c:	00357801 	eorseq	r7, r5, r1, lsl #16
    6030:	00357c08 	eorseq	r7, r5, r8, lsl #24
    6034:	59000908 	stmdbpl	r0, {r3, r8, fp}
    6038:	93540493 	cmpls	r4, #-1828716544	; 0x93000000
    603c:	01f89304 	mvnseq	r9, r4, lsl #6
    6040:	0800357c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, ip, sp}
    6044:	0800358c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip, sp}
    6048:	9359000b 	cmpls	r9, #11
    604c:	7fa49104 	svcvc	0x00a49104
    6050:	f8930493 			; <UNDEFINED> instruction: 0xf8930493
    6054:	00358c01 	eorseq	r8, r5, r1, lsl #24
    6058:	0035e208 	eorseq	lr, r5, r8, lsl #4
    605c:	91000c08 	tstls	r0, r8, lsl #24
    6060:	9104935c 	tstls	r4, ip, asr r3
    6064:	04937fa4 	ldreq	r7, [r3], #4004	; 0xfa4
    6068:	e201f893 	and	pc, r1, #9633792	; 0x930000
    606c:	00080035 	andeq	r0, r8, r5, lsr r0
    6070:	0f080036 	svceq	0x00080036
    6074:	935c9100 	cmpls	ip, #0, 2
    6078:	7fa49104 	svcvc	0x00a49104
    607c:	93540493 	cmpls	r4, #-1828716544	; 0x93000000
    6080:	01f49304 	mvnseq	r9, r4, lsl #6
    6084:	08003600 	stmdaeq	r0, {r9, sl, ip, sp}
    6088:	08003606 	stmdaeq	r0, {r1, r2, r9, sl, ip, sp}
    608c:	5c91000f 	ldcpl	0, cr0, [r1], {15}
    6090:	a4910493 	ldrge	r0, [r1], #1171	; 0x493
    6094:	5704937f 	smlsdxpl	r4, pc, r3, r9	; <UNPREDICTABLE>
    6098:	f4930493 			; <UNDEFINED> instruction: 0xf4930493
    609c:	00360601 	eorseq	r0, r6, r1, lsl #12
    60a0:	00364e08 	eorseq	r4, r6, r8, lsl #28
    60a4:	91001108 	tstls	r0, r8, lsl #2
    60a8:	9104935c 	tstls	r4, ip, asr r3
    60ac:	04937fa4 	ldreq	r7, [r3], #4004	; 0xfa4
    60b0:	937fa891 	cmnls	pc, #9502720	; 0x910000
    60b4:	01f49304 	mvnseq	r9, r4, lsl #6
    60b8:	0800364e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sl, ip, sp}
    60bc:	0800365e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sl, ip, sp}
    60c0:	5c910014 	ldcpl	0, cr0, [r1], {20}
    60c4:	a4910493 	ldrge	r0, [r1], #1171	; 0x493
    60c8:	9104937f 	tstls	r4, pc, ror r3
    60cc:	04937fa8 	ldreq	r7, [r3], #4008	; 0xfa8
    60d0:	93049354 	movwls	r9, #17236	; 0x4354
    60d4:	365e01f0 			; <UNDEFINED> instruction: 0x365e01f0
    60d8:	36680800 	strbtcc	r0, [r8], -r0, lsl #16
    60dc:	00140800 	andseq	r0, r4, r0, lsl #16
    60e0:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    60e4:	937fa491 	cmnls	pc, #-1862270976	; 0x91000000
    60e8:	7fa89104 	svcvc	0x00a89104
    60ec:	93530493 	cmpls	r3, #-1828716544	; 0x93000000
    60f0:	01f09304 	mvnseq	r9, r4, lsl #6
    60f4:	08003668 	stmdaeq	r0, {r3, r5, r6, r9, sl, ip, sp}
    60f8:	080036ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, ip, sp}
    60fc:	5c910016 	ldcpl	0, cr0, [r1], {22}
    6100:	a4910493 	ldrge	r0, [r1], #1171	; 0x493
    6104:	9104937f 	tstls	r4, pc, ror r3
    6108:	04937fa8 	ldreq	r7, [r3], #4008	; 0xfa8
    610c:	937fac91 	cmnls	pc, #37120	; 0x9100
    6110:	01f09304 	mvnseq	r9, r4, lsl #6
    6114:	080036ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, ip, sp}
    6118:	080036d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip, sp}
    611c:	5c910019 	ldcpl	0, cr0, [r1], {25}
    6120:	a4910493 	ldrge	r0, [r1], #1171	; 0x493
    6124:	9104937f 	tstls	r4, pc, ror r3
    6128:	04937fa8 	ldreq	r7, [r3], #4008	; 0xfa8
    612c:	937fac91 	cmnls	pc, #37120	; 0x9100
    6130:	04935804 	ldreq	r5, [r3], #2052	; 0x804
    6134:	d801ec93 	stmdale	r1, {r0, r1, r4, r7, sl, fp, sp, lr, pc}
    6138:	62080036 	andvs	r0, r8, #54	; 0x36
    613c:	1b080037 	blne	206220 <__Stack_Size+0x205a20>
    6140:	935c9100 	cmpls	ip, #0, 2
    6144:	7fa49104 	svcvc	0x00a49104
    6148:	a8910493 	ldmge	r1, {r0, r1, r4, r7, sl}
    614c:	9104937f 	tstls	r4, pc, ror r3
    6150:	04937fac 	ldreq	r7, [r3], #4012	; 0xfac
    6154:	937fb091 	cmnls	pc, #145	; 0x91
    6158:	01ec9304 	mvneq	r9, r4, lsl #6
    615c:	08003762 	stmdaeq	r0, {r1, r5, r6, r8, r9, sl, ip, sp}
    6160:	080037de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, ip, sp}
    6164:	5c910020 	ldcpl	0, cr0, [r1], {32}
    6168:	a4910493 	ldrge	r0, [r1], #1171	; 0x493
    616c:	9104937f 	tstls	r4, pc, ror r3
    6170:	04937fa8 	ldreq	r7, [r3], #4008	; 0xfa8
    6174:	937fac91 	cmnls	pc, #37120	; 0x9100
    6178:	7fb09104 	svcvc	0x00b09104
    617c:	b4910493 	ldrlt	r0, [r1], #1171	; 0x493
    6180:	9304937f 	movwls	r9, #17279	; 0x437f
    6184:	37de01e8 	ldrbcc	r0, [lr, r8, ror #3]
    6188:	37e20800 	strbcc	r0, [r2, r0, lsl #16]!
    618c:	00230800 	eoreq	r0, r3, r0, lsl #16
    6190:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    6194:	937fa491 	cmnls	pc, #-1862270976	; 0x91000000
    6198:	7fa89104 	svcvc	0x00a89104
    619c:	ac910493 	cfldrsge	mvf0, [r1], {147}	; 0x93
    61a0:	9104937f 	tstls	r4, pc, ror r3
    61a4:	04937fb0 	ldreq	r7, [r3], #4016	; 0xfb0
    61a8:	937fb491 	cmnls	pc, #-1862270976	; 0x91000000
    61ac:	04935b04 	ldreq	r5, [r3], #2820	; 0xb04
    61b0:	e201e493 	and	lr, r1, #-1828716544	; 0x93000000
    61b4:	5e080037 	mcrpl	0, 0, r0, cr8, cr7, {1}
    61b8:	25080038 	strcs	r0, [r8, #-56]	; 0x38
    61bc:	935c9100 	cmpls	ip, #0, 2
    61c0:	7fa49104 	svcvc	0x00a49104
    61c4:	a8910493 	ldmge	r1, {r0, r1, r4, r7, sl}
    61c8:	9104937f 	tstls	r4, pc, ror r3
    61cc:	04937fac 	ldreq	r7, [r3], #4012	; 0xfac
    61d0:	937fb091 	cmnls	pc, #145	; 0x91
    61d4:	7fb49104 	svcvc	0x00b49104
    61d8:	b8910493 	ldmlt	r1, {r0, r1, r4, r7, sl}
    61dc:	9304937f 	movwls	r9, #17279	; 0x437f
    61e0:	385e01e4 	ldmdacc	lr, {r2, r5, r6, r7, r8}^
    61e4:	387e0800 	ldmdacc	lr!, {fp}^
    61e8:	00280800 	eoreq	r0, r8, r0, lsl #16
    61ec:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    61f0:	937fa491 	cmnls	pc, #-1862270976	; 0x91000000
    61f4:	7fa89104 	svcvc	0x00a89104
    61f8:	ac910493 	cfldrsge	mvf0, [r1], {147}	; 0x93
    61fc:	9104937f 	tstls	r4, pc, ror r3
    6200:	04937fb0 	ldreq	r7, [r3], #4016	; 0xfb0
    6204:	937fb491 	cmnls	pc, #-1862270976	; 0x91000000
    6208:	7fb89104 	svcvc	0x00b89104
    620c:	935b0493 	cmpls	fp, #-1828716544	; 0x93000000
    6210:	01e09304 	mvneq	r9, r4, lsl #6
    6214:	0800387e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, fp, ip, sp}
    6218:	08003d5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, fp, ip, sp}
    621c:	5c91002a 	ldcpl	0, cr0, [r1], {42}	; 0x2a
    6220:	a4910493 	ldrge	r0, [r1], #1171	; 0x493
    6224:	9104937f 	tstls	r4, pc, ror r3
    6228:	04937fa8 	ldreq	r7, [r3], #4008	; 0xfa8
    622c:	937fac91 	cmnls	pc, #37120	; 0x9100
    6230:	7fb09104 	svcvc	0x00b09104
    6234:	b4910493 	ldrlt	r0, [r1], #1171	; 0x493
    6238:	9104937f 	tstls	r4, pc, ror r3
    623c:	04937fb8 	ldreq	r7, [r3], #4024	; 0xfb8
    6240:	937fbc91 	cmnls	pc, #37120	; 0x9100
    6244:	01e09304 	mvneq	r9, r4, lsl #6
    6248:	08003d5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, fp, ip, sp}
    624c:	08003dc2 	stmdaeq	r0, {r1, r6, r7, r8, sl, fp, ip, sp}
    6250:	5c910059 	ldcpl	0, cr0, [r1], {89}	; 0x59
    6254:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    6258:	94042351 	strls	r2, [r4], #-849	; 0x351
    625c:	1aff0801 	bne	fffc8268 <BootRAM+0xef38a09>
    6260:	01f32448 	mvnseq	r2, r8, asr #8
    6264:	94052351 	strls	r2, [r5], #-849	; 0x351
    6268:	1aff0801 	bne	fffc8274 <BootRAM+0xef38a15>
    626c:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    6270:	06235101 	strteq	r5, [r3], -r1, lsl #2
    6274:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6278:	2124381a 	teqcs	r4, sl, lsl r8
    627c:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6280:	08019407 	stmdaeq	r1, {r0, r1, r2, sl, ip, pc}
    6284:	9f211aff 	svcls	0x00211aff
    6288:	a8910493 	ldmge	r1, {r0, r1, r4, r7, sl}
    628c:	9104937f 	tstls	r4, pc, ror r3
    6290:	04937fac 	ldreq	r7, [r3], #4012	; 0xfac
    6294:	937fb091 	cmnls	pc, #145	; 0x91
    6298:	7fb49104 	svcvc	0x00b49104
    629c:	b8910493 	ldmlt	r1, {r0, r1, r4, r7, sl}
    62a0:	9104937f 	tstls	r4, pc, ror r3
    62a4:	04937fbc 	ldreq	r7, [r3], #4028	; 0xfbc
    62a8:	c201e093 	andgt	lr, r1, #147	; 0x93
    62ac:	3e08003d 	mcrcc	0, 0, r0, cr8, cr13, {1}
    62b0:	8808003e 	stmdahi	r8, {r1, r2, r3, r4, r5}
    62b4:	935c9100 	cmpls	ip, #0, 2
    62b8:	5101f304 	tstpl	r1, r4, lsl #6
    62bc:	01940423 	orrseq	r0, r4, r3, lsr #8
    62c0:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    62c4:	5101f324 	tstpl	r1, r4, lsr #6
    62c8:	01940523 	orrseq	r0, r4, r3, lsr #10
    62cc:	401aff08 	andsmi	pc, sl, r8, lsl #30
    62d0:	01f32124 	mvnseq	r2, r4, lsr #2
    62d4:	94062351 	strls	r2, [r6], #-849	; 0x351
    62d8:	1aff0801 	bne	fffc82e4 <BootRAM+0xef38a85>
    62dc:	f3212438 	vqshl.u32	d2, d24, d1
    62e0:	07235101 	streq	r5, [r3, -r1, lsl #2]!
    62e4:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    62e8:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    62ec:	5101f304 	tstpl	r1, r4, lsl #6
    62f0:	01940823 	orrseq	r0, r4, r3, lsr #16
    62f4:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    62f8:	5101f324 	tstpl	r1, r4, lsr #6
    62fc:	01940923 	orrseq	r0, r4, r3, lsr #18
    6300:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6304:	01f32124 	mvnseq	r2, r4, lsr #2
    6308:	940a2351 	strls	r2, [sl], #-849	; 0x351
    630c:	1aff0801 	bne	fffc8318 <BootRAM+0xef38ab9>
    6310:	f3212438 	vqshl.u32	d2, d24, d1
    6314:	0b235101 	bleq	8da720 <__Stack_Size+0x8d9f20>
    6318:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    631c:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6320:	7fac9104 	svcvc	0x00ac9104
    6324:	b0910493 	umullslt	r0, r1, r3, r4
    6328:	9104937f 	tstls	r4, pc, ror r3
    632c:	04937fb4 	ldreq	r7, [r3], #4020	; 0xfb4
    6330:	937fb891 	cmnls	pc, #9502720	; 0x910000
    6334:	7fbc9104 	svcvc	0x00bc9104
    6338:	e0930493 	umulls	r0, r3, r3, r4
    633c:	003e3e01 	eorseq	r3, lr, r1, lsl #28
    6340:	003e8a08 	eorseq	r8, lr, r8, lsl #20
    6344:	9100b708 	tstls	r0, r8, lsl #14
    6348:	f304935c 	vcge.u8	<illegal reg q4.5>, q2, q6
    634c:	04235101 	strteq	r5, [r3], #-257	; 0x101
    6350:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6354:	f324481a 	vceq.i32	d4, d4, d10
    6358:	05235101 	streq	r5, [r3, #-257]!	; 0x101
    635c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6360:	2124401a 	teqcs	r4, sl, lsl r0
    6364:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6368:	08019406 	stmdaeq	r1, {r1, r2, sl, ip, pc}
    636c:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6370:	5101f321 	tstpl	r1, r1, lsr #6
    6374:	01940723 	orrseq	r0, r4, r3, lsr #14
    6378:	211aff08 	tstcs	sl, r8, lsl #30
    637c:	f304939f 	vcge.u8	d9, d20, d15
    6380:	08235101 	stmdaeq	r3!, {r0, r8, ip, lr}
    6384:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6388:	f324481a 	vceq.i32	d4, d4, d10
    638c:	09235101 	stmdbeq	r3!, {r0, r8, ip, lr}
    6390:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6394:	2124401a 	teqcs	r4, sl, lsl r0
    6398:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    639c:	0801940a 	stmdaeq	r1, {r1, r3, sl, ip, pc}
    63a0:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    63a4:	5101f321 	tstpl	r1, r1, lsr #6
    63a8:	01940b23 	orrseq	r0, r4, r3, lsr #22
    63ac:	211aff08 	tstcs	sl, r8, lsl #30
    63b0:	f304939f 	vcge.u8	d9, d20, d15
    63b4:	0c235101 	stfeqs	f5, [r3], #-4
    63b8:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    63bc:	f324481a 	vceq.i32	d4, d4, d10
    63c0:	0d235101 	stfeqs	f5, [r3, #-4]!
    63c4:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    63c8:	2124401a 	teqcs	r4, sl, lsl r0
    63cc:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    63d0:	0801940e 	stmdaeq	r1, {r1, r2, r3, sl, ip, pc}
    63d4:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    63d8:	5101f321 	tstpl	r1, r1, lsr #6
    63dc:	01940f23 	orrseq	r0, r4, r3, lsr #30
    63e0:	211aff08 	tstcs	sl, r8, lsl #30
    63e4:	9104939f 			; <UNDEFINED> instruction: 0x9104939f
    63e8:	04937fb0 	ldreq	r7, [r3], #4016	; 0xfb0
    63ec:	937fb491 	cmnls	pc, #-1862270976	; 0x91000000
    63f0:	7fb89104 	svcvc	0x00b89104
    63f4:	bc910493 	cfldrslt	mvf0, [r1], {147}	; 0x93
    63f8:	9304937f 	movwls	r9, #17279	; 0x437f
    63fc:	3e8a01e0 	rmfcc<illegal precision>z	f0, f2, f0
    6400:	3f1e0800 	svccc	0x001e0800
    6404:	00e60800 	rsceq	r0, r6, r0, lsl #16
    6408:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    640c:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6410:	08019404 	stmdaeq	r1, {r2, sl, ip, pc}
    6414:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    6418:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    641c:	08019405 	stmdaeq	r1, {r0, r2, sl, ip, pc}
    6420:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    6424:	5101f321 	tstpl	r1, r1, lsr #6
    6428:	01940623 	orrseq	r0, r4, r3, lsr #12
    642c:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6430:	01f32124 	mvnseq	r2, r4, lsr #2
    6434:	94072351 	strls	r2, [r7], #-849	; 0x351
    6438:	1aff0801 	bne	fffc8444 <BootRAM+0xef38be5>
    643c:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    6440:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6444:	08019408 	stmdaeq	r1, {r3, sl, ip, pc}
    6448:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    644c:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6450:	08019409 	stmdaeq	r1, {r0, r3, sl, ip, pc}
    6454:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    6458:	5101f321 	tstpl	r1, r1, lsr #6
    645c:	01940a23 	orrseq	r0, r4, r3, lsr #20
    6460:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6464:	01f32124 	mvnseq	r2, r4, lsr #2
    6468:	940b2351 	strls	r2, [fp], #-849	; 0x351
    646c:	1aff0801 	bne	fffc8478 <BootRAM+0xef38c19>
    6470:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    6474:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6478:	0801940c 	stmdaeq	r1, {r2, r3, sl, ip, pc}
    647c:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    6480:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6484:	0801940d 	stmdaeq	r1, {r0, r2, r3, sl, ip, pc}
    6488:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    648c:	5101f321 	tstpl	r1, r1, lsr #6
    6490:	01940e23 	orrseq	r0, r4, r3, lsr #28
    6494:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6498:	01f32124 	mvnseq	r2, r4, lsr #2
    649c:	940f2351 	strls	r2, [pc], #-849	; 64a4 <__Stack_Size+0x5ca4>
    64a0:	1aff0801 	bne	fffc84ac <BootRAM+0xef38c4d>
    64a4:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    64a8:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    64ac:	08019410 	stmdaeq	r1, {r4, sl, ip, pc}
    64b0:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    64b4:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    64b8:	08019411 	stmdaeq	r1, {r0, r4, sl, ip, pc}
    64bc:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    64c0:	5101f321 	tstpl	r1, r1, lsr #6
    64c4:	01941223 	orrseq	r1, r4, r3, lsr #4
    64c8:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    64cc:	01f32124 	mvnseq	r2, r4, lsr #2
    64d0:	94132351 	ldrls	r2, [r3], #-849	; 0x351
    64d4:	1aff0801 	bne	fffc84e0 <BootRAM+0xef38c81>
    64d8:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    64dc:	937fb491 	cmnls	pc, #-1862270976	; 0x91000000
    64e0:	7fb89104 	svcvc	0x00b89104
    64e4:	bc910493 	cfldrslt	mvf0, [r1], {147}	; 0x93
    64e8:	9304937f 	movwls	r9, #17279	; 0x437f
    64ec:	3f1e01e0 	svccc	0x001e01e0
    64f0:	3fd60800 	svccc	0x00d60800
    64f4:	01150800 	tsteq	r5, r0, lsl #16
    64f8:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    64fc:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6500:	08019404 	stmdaeq	r1, {r2, sl, ip, pc}
    6504:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    6508:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    650c:	08019405 	stmdaeq	r1, {r0, r2, sl, ip, pc}
    6510:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    6514:	5101f321 	tstpl	r1, r1, lsr #6
    6518:	01940623 	orrseq	r0, r4, r3, lsr #12
    651c:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6520:	01f32124 	mvnseq	r2, r4, lsr #2
    6524:	94072351 	strls	r2, [r7], #-849	; 0x351
    6528:	1aff0801 	bne	fffc8534 <BootRAM+0xef38cd5>
    652c:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    6530:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6534:	08019408 	stmdaeq	r1, {r3, sl, ip, pc}
    6538:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    653c:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6540:	08019409 	stmdaeq	r1, {r0, r3, sl, ip, pc}
    6544:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    6548:	5101f321 	tstpl	r1, r1, lsr #6
    654c:	01940a23 	orrseq	r0, r4, r3, lsr #20
    6550:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6554:	01f32124 	mvnseq	r2, r4, lsr #2
    6558:	940b2351 	strls	r2, [fp], #-849	; 0x351
    655c:	1aff0801 	bne	fffc8568 <BootRAM+0xef38d09>
    6560:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    6564:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6568:	0801940c 	stmdaeq	r1, {r2, r3, sl, ip, pc}
    656c:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    6570:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6574:	0801940d 	stmdaeq	r1, {r0, r2, r3, sl, ip, pc}
    6578:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    657c:	5101f321 	tstpl	r1, r1, lsr #6
    6580:	01940e23 	orrseq	r0, r4, r3, lsr #28
    6584:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6588:	01f32124 	mvnseq	r2, r4, lsr #2
    658c:	940f2351 	strls	r2, [pc], #-849	; 6594 <__Stack_Size+0x5d94>
    6590:	1aff0801 	bne	fffc859c <BootRAM+0xef38d3d>
    6594:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    6598:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    659c:	08019410 	stmdaeq	r1, {r4, sl, ip, pc}
    65a0:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    65a4:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    65a8:	08019411 	stmdaeq	r1, {r0, r4, sl, ip, pc}
    65ac:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    65b0:	5101f321 	tstpl	r1, r1, lsr #6
    65b4:	01941223 	orrseq	r1, r4, r3, lsr #4
    65b8:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    65bc:	01f32124 	mvnseq	r2, r4, lsr #2
    65c0:	94132351 	ldrls	r2, [r3], #-849	; 0x351
    65c4:	1aff0801 	bne	fffc85d0 <BootRAM+0xef38d71>
    65c8:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    65cc:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    65d0:	08019414 	stmdaeq	r1, {r2, r4, sl, ip, pc}
    65d4:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    65d8:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    65dc:	08019415 	stmdaeq	r1, {r0, r2, r4, sl, ip, pc}
    65e0:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    65e4:	5101f321 	tstpl	r1, r1, lsr #6
    65e8:	01941623 	orrseq	r1, r4, r3, lsr #12
    65ec:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    65f0:	01f32124 	mvnseq	r2, r4, lsr #2
    65f4:	94172351 	ldrls	r2, [r7], #-849	; 0x351
    65f8:	1aff0801 	bne	fffc8604 <BootRAM+0xef38da5>
    65fc:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    6600:	937fb891 	cmnls	pc, #9502720	; 0x910000
    6604:	7fbc9104 	svcvc	0x00bc9104
    6608:	e0930493 	umulls	r0, r3, r3, r4
    660c:	003fd601 	eorseq	sp, pc, r1, lsl #12
    6610:	00405a08 	subeq	r5, r0, r8, lsl #20
    6614:	91014408 	tstls	r1, r8, lsl #8
    6618:	f304935c 	vcge.u8	<illegal reg q4.5>, q2, q6
    661c:	04235101 	strteq	r5, [r3], #-257	; 0x101
    6620:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6624:	f324481a 	vceq.i32	d4, d4, d10
    6628:	05235101 	streq	r5, [r3, #-257]!	; 0x101
    662c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6630:	2124401a 	teqcs	r4, sl, lsl r0
    6634:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6638:	08019406 	stmdaeq	r1, {r1, r2, sl, ip, pc}
    663c:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6640:	5101f321 	tstpl	r1, r1, lsr #6
    6644:	01940723 	orrseq	r0, r4, r3, lsr #14
    6648:	211aff08 	tstcs	sl, r8, lsl #30
    664c:	f304939f 	vcge.u8	d9, d20, d15
    6650:	08235101 	stmdaeq	r3!, {r0, r8, ip, lr}
    6654:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6658:	f324481a 	vceq.i32	d4, d4, d10
    665c:	09235101 	stmdbeq	r3!, {r0, r8, ip, lr}
    6660:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6664:	2124401a 	teqcs	r4, sl, lsl r0
    6668:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    666c:	0801940a 	stmdaeq	r1, {r1, r3, sl, ip, pc}
    6670:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6674:	5101f321 	tstpl	r1, r1, lsr #6
    6678:	01940b23 	orrseq	r0, r4, r3, lsr #22
    667c:	211aff08 	tstcs	sl, r8, lsl #30
    6680:	f304939f 	vcge.u8	d9, d20, d15
    6684:	0c235101 	stfeqs	f5, [r3], #-4
    6688:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    668c:	f324481a 	vceq.i32	d4, d4, d10
    6690:	0d235101 	stfeqs	f5, [r3, #-4]!
    6694:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6698:	2124401a 	teqcs	r4, sl, lsl r0
    669c:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    66a0:	0801940e 	stmdaeq	r1, {r1, r2, r3, sl, ip, pc}
    66a4:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    66a8:	5101f321 	tstpl	r1, r1, lsr #6
    66ac:	01940f23 	orrseq	r0, r4, r3, lsr #30
    66b0:	211aff08 	tstcs	sl, r8, lsl #30
    66b4:	f304939f 	vcge.u8	d9, d20, d15
    66b8:	10235101 	eorne	r5, r3, r1, lsl #2
    66bc:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    66c0:	f324481a 	vceq.i32	d4, d4, d10
    66c4:	11235101 	teqne	r3, r1, lsl #2
    66c8:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    66cc:	2124401a 	teqcs	r4, sl, lsl r0
    66d0:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    66d4:	08019412 	stmdaeq	r1, {r1, r4, sl, ip, pc}
    66d8:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    66dc:	5101f321 	tstpl	r1, r1, lsr #6
    66e0:	01941323 	orrseq	r1, r4, r3, lsr #6
    66e4:	211aff08 	tstcs	sl, r8, lsl #30
    66e8:	f304939f 	vcge.u8	d9, d20, d15
    66ec:	14235101 	strtne	r5, [r3], #-257	; 0x101
    66f0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    66f4:	f324481a 	vceq.i32	d4, d4, d10
    66f8:	15235101 	strne	r5, [r3, #-257]!	; 0x101
    66fc:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6700:	2124401a 	teqcs	r4, sl, lsl r0
    6704:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6708:	08019416 	stmdaeq	r1, {r1, r2, r4, sl, ip, pc}
    670c:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6710:	5101f321 	tstpl	r1, r1, lsr #6
    6714:	01941723 	orrseq	r1, r4, r3, lsr #14
    6718:	211aff08 	tstcs	sl, r8, lsl #30
    671c:	f304939f 	vcge.u8	d9, d20, d15
    6720:	18235101 	stmdane	r3!, {r0, r8, ip, lr}
    6724:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6728:	f324481a 	vceq.i32	d4, d4, d10
    672c:	19235101 	stmdbne	r3!, {r0, r8, ip, lr}
    6730:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6734:	2124401a 	teqcs	r4, sl, lsl r0
    6738:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    673c:	0801941a 	stmdaeq	r1, {r1, r3, r4, sl, ip, pc}
    6740:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6744:	5101f321 	tstpl	r1, r1, lsr #6
    6748:	01941b23 	orrseq	r1, r4, r3, lsr #22
    674c:	211aff08 	tstcs	sl, r8, lsl #30
    6750:	9104939f 			; <UNDEFINED> instruction: 0x9104939f
    6754:	04937fbc 	ldreq	r7, [r3], #4028	; 0xfbc
    6758:	5a01e093 	bpl	7e9ac <__Stack_Size+0x7e1ac>
    675c:	d2080040 	andle	r0, r8, #64	; 0x40
    6760:	73080053 	movwvc	r0, #32851	; 0x8053
    6764:	935c9101 	cmpls	ip, #1073741824	; 0x40000000
    6768:	5101f304 	tstpl	r1, r4, lsl #6
    676c:	01940423 	orrseq	r0, r4, r3, lsr #8
    6770:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6774:	5101f324 	tstpl	r1, r4, lsr #6
    6778:	01940523 	orrseq	r0, r4, r3, lsr #10
    677c:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6780:	01f32124 	mvnseq	r2, r4, lsr #2
    6784:	94062351 	strls	r2, [r6], #-849	; 0x351
    6788:	1aff0801 	bne	fffc8794 <BootRAM+0xef38f35>
    678c:	f3212438 	vqshl.u32	d2, d24, d1
    6790:	07235101 	streq	r5, [r3, -r1, lsl #2]!
    6794:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6798:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    679c:	5101f304 	tstpl	r1, r4, lsl #6
    67a0:	01940823 	orrseq	r0, r4, r3, lsr #16
    67a4:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    67a8:	5101f324 	tstpl	r1, r4, lsr #6
    67ac:	01940923 	orrseq	r0, r4, r3, lsr #18
    67b0:	401aff08 	andsmi	pc, sl, r8, lsl #30
    67b4:	01f32124 	mvnseq	r2, r4, lsr #2
    67b8:	940a2351 	strls	r2, [sl], #-849	; 0x351
    67bc:	1aff0801 	bne	fffc87c8 <BootRAM+0xef38f69>
    67c0:	f3212438 	vqshl.u32	d2, d24, d1
    67c4:	0b235101 	bleq	8dabd0 <__Stack_Size+0x8da3d0>
    67c8:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    67cc:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    67d0:	5101f304 	tstpl	r1, r4, lsl #6
    67d4:	01940c23 	orrseq	r0, r4, r3, lsr #24
    67d8:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    67dc:	5101f324 	tstpl	r1, r4, lsr #6
    67e0:	01940d23 	orrseq	r0, r4, r3, lsr #26
    67e4:	401aff08 	andsmi	pc, sl, r8, lsl #30
    67e8:	01f32124 	mvnseq	r2, r4, lsr #2
    67ec:	940e2351 	strls	r2, [lr], #-849	; 0x351
    67f0:	1aff0801 	bne	fffc87fc <BootRAM+0xef38f9d>
    67f4:	f3212438 	vqshl.u32	d2, d24, d1
    67f8:	0f235101 	svceq	0x00235101
    67fc:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6800:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6804:	5101f304 	tstpl	r1, r4, lsl #6
    6808:	01941023 	orrseq	r1, r4, r3, lsr #32
    680c:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6810:	5101f324 	tstpl	r1, r4, lsr #6
    6814:	01941123 	orrseq	r1, r4, r3, lsr #2
    6818:	401aff08 	andsmi	pc, sl, r8, lsl #30
    681c:	01f32124 	mvnseq	r2, r4, lsr #2
    6820:	94122351 	ldrls	r2, [r2], #-849	; 0x351
    6824:	1aff0801 	bne	fffc8830 <BootRAM+0xef38fd1>
    6828:	f3212438 	vqshl.u32	d2, d24, d1
    682c:	13235101 	teqne	r3, #1073741824	; 0x40000000
    6830:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6834:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6838:	5101f304 	tstpl	r1, r4, lsl #6
    683c:	01941423 	orrseq	r1, r4, r3, lsr #8
    6840:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6844:	5101f324 	tstpl	r1, r4, lsr #6
    6848:	01941523 	orrseq	r1, r4, r3, lsr #10
    684c:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6850:	01f32124 	mvnseq	r2, r4, lsr #2
    6854:	94162351 	ldrls	r2, [r6], #-849	; 0x351
    6858:	1aff0801 	bne	fffc8864 <BootRAM+0xef39005>
    685c:	f3212438 	vqshl.u32	d2, d24, d1
    6860:	17235101 	strne	r5, [r3, -r1, lsl #2]!
    6864:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6868:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    686c:	5101f304 	tstpl	r1, r4, lsl #6
    6870:	01941823 	orrseq	r1, r4, r3, lsr #16
    6874:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6878:	5101f324 	tstpl	r1, r4, lsr #6
    687c:	01941923 	orrseq	r1, r4, r3, lsr #18
    6880:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6884:	01f32124 	mvnseq	r2, r4, lsr #2
    6888:	941a2351 	ldrls	r2, [sl], #-849	; 0x351
    688c:	1aff0801 	bne	fffc8898 <BootRAM+0xef39039>
    6890:	f3212438 	vqshl.u32	d2, d24, d1
    6894:	1b235101 	blne	8daca0 <__Stack_Size+0x8da4a0>
    6898:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    689c:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    68a0:	5101f304 	tstpl	r1, r4, lsl #6
    68a4:	01941c23 	orrseq	r1, r4, r3, lsr #24
    68a8:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    68ac:	5101f324 	tstpl	r1, r4, lsr #6
    68b0:	01941d23 	orrseq	r1, r4, r3, lsr #26
    68b4:	401aff08 	andsmi	pc, sl, r8, lsl #30
    68b8:	01f32124 	mvnseq	r2, r4, lsr #2
    68bc:	941e2351 	ldrls	r2, [lr], #-849	; 0x351
    68c0:	1aff0801 	bne	fffc88cc <BootRAM+0xef3906d>
    68c4:	f3212438 	vqshl.u32	d2, d24, d1
    68c8:	1f235101 	svcne	0x00235101
    68cc:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    68d0:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    68d4:	01e09304 	mvneq	r9, r4, lsl #6
    68d8:	080053d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, ip, lr}
    68dc:	080053f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, ip, lr}
    68e0:	5c910007 	ldcpl	0, cr0, [r1], {7}
    68e4:	fc930493 	ldc2	4, cr0, [r3], {147}	; 0x93
    68e8:	0053f401 	subseq	pc, r3, r1, lsl #8
    68ec:	00540c08 	subseq	r0, r4, r8, lsl #24
    68f0:	7d000708 	stcvc	7, cr0, [r0, #-32]	; 0xffffffe0
    68f4:	9304935c 	movwls	r9, #17244	; 0x435c
    68f8:	000001fc 	strdeq	r0, [r0], -ip
    68fc:	00000000 	andeq	r0, r0, r0
    6900:	3c240000 	stccc	0, cr0, [r4], #-0
    6904:	3c280800 	stccc	8, cr0, [r8], #-0
    6908:	00010800 	andeq	r0, r1, r0, lsl #16
    690c:	003c9054 	eorseq	r9, ip, r4, asr r0
    6910:	003fd808 	eorseq	sp, pc, r8, lsl #16
    6914:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    6918:	08004064 	stmdaeq	r0, {r2, r5, r6, lr}
    691c:	08004222 	stmdaeq	r0, {r1, r5, r9, lr}
    6920:	225c0001 	subscs	r0, ip, #1
    6924:	8c080042 	stchi	0, cr0, [r8], {66}	; 0x42
    6928:	01080043 	tsteq	r8, r3, asr #32
    692c:	43e85400 	mvnmi	r5, #0, 8
    6930:	476c0800 	strbmi	r0, [ip, -r0, lsl #16]!
    6934:	00010800 	andeq	r0, r1, r0, lsl #16
    6938:	0047c057 	subeq	ip, r7, r7, asr r0
    693c:	004b3008 	subeq	r3, fp, r8
    6940:	58000108 	stmdapl	r0, {r3, r8}
    6944:	08004b96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, fp, lr}
    6948:	08004f34 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, fp, lr}
    694c:	8e560001 	cdphi	0, 5, cr0, cr6, cr1, {0}
    6950:	a008004f 	andge	r0, r8, pc, asr #32
    6954:	0108004f 	tsteq	r8, pc, asr #32
    6958:	4fa05900 	svcmi	0x00a05900
    695c:	4fca0800 	svcmi	0x00ca0800
    6960:	00010800 	andeq	r0, r1, r0, lsl #16
    6964:	004fca5a 	subeq	ip, pc, sl, asr sl	; <UNPREDICTABLE>
    6968:	00520208 	subseq	r0, r2, r8, lsl #4
    696c:	91000308 	tstls	r0, r8, lsl #6
    6970:	52027f98 	andpl	r7, r2, #152, 30	; 0x260
    6974:	537a0800 	cmnpl	sl, #0, 16
    6978:	00010800 	andeq	r0, r1, r0, lsl #16
    697c:	00000052 	andeq	r0, r0, r2, asr r0
    6980:	00000000 	andeq	r0, r0, r0
    6984:	003c2600 	eorseq	r2, ip, r0, lsl #12
    6988:	003f7008 	eorseq	r7, pc, r8
    698c:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    6990:	08003fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, ip, sp}
    6994:	08004324 	stmdaeq	r0, {r2, r5, r8, r9, lr}
    6998:	78530001 	ldmdavc	r3, {r0}^
    699c:	ec080043 	stc	0, cr0, [r8], {67}	; 0x43
    69a0:	01080046 	tsteq	r8, r6, asr #32
    69a4:	47585600 	ldrbmi	r5, [r8, -r0, lsl #12]
    69a8:	4ac00800 	bmi	ff0089b0 <BootRAM+0xdf79151>
    69ac:	00010800 	andeq	r0, r1, r0, lsl #16
    69b0:	004b1856 	subeq	r1, fp, r6, asr r8
    69b4:	004eb208 	subeq	fp, lr, r8, lsl #4
    69b8:	50000108 	andpl	r0, r0, r8, lsl #2
    69bc:	08004f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, lr}
    69c0:	08005158 	stmdaeq	r0, {r3, r4, r6, r8, ip, lr}
    69c4:	94910003 	ldrls	r0, [r1], #3
    69c8:	0051587f 	subseq	r5, r1, pc, ror r8
    69cc:	00530608 	subseq	r0, r3, r8, lsl #12
    69d0:	5c000108 	stfpls	f0, [r0], {8}
    69d4:	08005364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip, lr}
    69d8:	080053c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, ip, lr}
    69dc:	00540001 	subseq	r0, r4, r1
    69e0:	00000000 	andeq	r0, r0, r0
    69e4:	24000000 	strcs	r0, [r0], #-0
    69e8:	f208003c 	vqadd.s8	d0, d8, d28
    69ec:	0108003e 	tsteq	r8, lr, lsr r0
    69f0:	3f5a5600 	svccc	0x005a5600
    69f4:	42b00800 	adcsmi	r0, r0, #0, 16
    69f8:	00010800 	andeq	r0, r1, r0, lsl #16
    69fc:	00430652 	subeq	r0, r3, r2, asr r6
    6a00:	00467e08 	subeq	r7, r6, r8, lsl #28
    6a04:	50000108 	andpl	r0, r0, r8, lsl #2
    6a08:	080046d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, lr}
    6a0c:	08004a4a 	stmdaeq	r0, {r1, r3, r6, r9, fp, lr}
    6a10:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    6a14:	3e08004a 	cdpcc	0, 0, cr0, cr8, cr10, {2}
    6a18:	0108004e 	tsteq	r8, lr, asr #32
    6a1c:	4e9e5300 	cdpmi	3, 9, cr5, cr14, cr0, {0}
    6a20:	52740800 	rsbspl	r0, r4, #0, 16
    6a24:	00010800 	andeq	r0, r1, r0, lsl #16
    6a28:	0052d254 	subseq	sp, r2, r4, asr r2
    6a2c:	0053be08 	subseq	fp, r3, r8, lsl #28
    6a30:	51000108 	tstpl	r0, r8, lsl #2
	...
    6a3c:	08003c24 	stmdaeq	r0, {r2, r5, sl, fp, ip, sp}
    6a40:	08003e76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, sl, fp, ip, sp}
    6a44:	da5b0001 	ble	16c6a50 <__Stack_Size+0x16c6250>
    6a48:	4008003e 	andmi	r0, r8, lr, lsr r0
    6a4c:	01080042 	tsteq	r8, r2, asr #32
    6a50:	429a5000 	addsmi	r5, sl, #0
    6a54:	45f60800 	ldrbmi	r0, [r6, #2048]!	; 0x800
    6a58:	00010800 	andeq	r0, r1, r0, lsl #16
    6a5c:	00465c5c 	subeq	r5, r6, ip, asr ip
    6a60:	0049dc08 	subeq	sp, r9, r8, lsl #24
    6a64:	53000108 	movwpl	r0, #264	; 0x108
    6a68:	08004a30 	stmdaeq	r0, {r4, r5, r9, fp, lr}
    6a6c:	08004db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, lr}
    6a70:	2c510001 	mrrccs	0, 0, r0, r1, cr1
    6a74:	0c08004e 	stceq	0, cr0, [r8], {78}	; 0x4e
    6a78:	01080052 	qaddeq	r0, r2, r8
    6a7c:	52625100 	rsbpl	r5, r2, #0, 2
    6a80:	53b00800 	movspl	r0, #0, 16
    6a84:	00010800 	andeq	r0, r1, r0, lsl #16
    6a88:	00000053 	andeq	r0, r0, r3, asr r0
    6a8c:	00000000 	andeq	r0, r0, r0
    6a90:	003c2400 	eorseq	r2, ip, r0, lsl #8
    6a94:	003c8c08 	eorseq	r8, ip, r8, lsl #24
    6a98:	91000308 	tstls	r0, r8, lsl #6
    6a9c:	3c8c7f94 	stccc	15, cr7, [ip], {148}	; 0x94
    6aa0:	3e180800 	cdpcc	8, 1, cr0, cr8, cr0, {0}
    6aa4:	00010800 	andeq	r0, r1, r0, lsl #16
    6aa8:	003e8054 	eorseq	r8, lr, r4, asr r0
    6aac:	0041d008 	subeq	sp, r1, r8
    6ab0:	54000108 	strpl	r0, [r0], #-264	; 0x108
    6ab4:	0800422a 	stmdaeq	r0, {r1, r3, r5, r9, lr}
    6ab8:	08004580 	stmdaeq	r0, {r7, r8, sl, lr}
    6abc:	de590001 	cdple	0, 5, cr0, cr9, cr1, {0}
    6ac0:	80080045 	andhi	r0, r8, r5, asr #32
    6ac4:	01080049 	tsteq	r8, r9, asr #32
    6ac8:	49c05200 	stmibmi	r0, {r9, ip, lr}^
    6acc:	4d440800 	stclmi	8, cr0, [r4, #-0]
    6ad0:	00010800 	andeq	r0, r1, r0, lsl #16
    6ad4:	004db052 	subeq	fp, sp, r2, asr r0
    6ad8:	00516c08 	subseq	r6, r1, r8, lsl #24
    6adc:	52000108 	andpl	r0, r0, #8, 2
    6ae0:	08005202 	stmdaeq	r0, {r1, r9, ip, lr}
    6ae4:	0800521c 	stmdaeq	r0, {r2, r3, r4, r9, ip, lr}
    6ae8:	1c530001 	mrrcne	0, 0, r0, r3, cr1
    6aec:	bc080052 	stclt	0, cr0, [r8], {82}	; 0x52
    6af0:	03080053 	movweq	r0, #32851	; 0x8053
    6af4:	7fb09100 	svcvc	0x00b09100
    6af8:	080053bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip, lr}
    6afc:	080053ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, ip, lr}
    6b00:	b0910008 	addslt	r0, r1, r8
    6b04:	0077067f 	rsbseq	r0, r7, pc, ror r6
    6b08:	00009f22 	andeq	r9, r0, r2, lsr #30
    6b0c:	00000000 	andeq	r0, r0, r0
    6b10:	3c240000 	stccc	0, cr0, [r4], #-0
    6b14:	3d960800 	ldccc	8, cr0, [r6]
    6b18:	00010800 	andeq	r0, r1, r0, lsl #16
    6b1c:	003e0453 	eorseq	r0, lr, r3, asr r4
    6b20:	00415a08 	subeq	r5, r1, r8, lsl #20
    6b24:	51000108 	tstpl	r0, r8, lsl #2
    6b28:	080041a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, lr}
    6b2c:	0800450c 	stmdaeq	r0, {r2, r3, r8, sl, lr}
    6b30:	5c510001 	mrrcpl	0, 0, r0, r1, cr1
    6b34:	ec080045 	stc	0, cr0, [r8], {69}	; 0x45
    6b38:	01080048 	tsteq	r8, r8, asr #32
    6b3c:	494a5100 	stmdbmi	sl, {r8, ip, lr}^
    6b40:	4cc20800 	stclmi	8, cr0, [r2], {0}
    6b44:	00010800 	andeq	r0, r1, r0, lsl #16
    6b48:	004d3254 	subeq	r3, sp, r4, asr r2
    6b4c:	0050f008 	subseq	pc, r0, r8
    6b50:	58000108 	stmdapl	r0, {r3, r8}
    6b54:	0800515a 	stmdaeq	r0, {r1, r3, r4, r6, r8, ip, lr}
    6b58:	0800517e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, ip, lr}
    6b5c:	7e5b0001 	cdpvc	0, 5, cr0, cr11, cr1, {0}
    6b60:	88080051 	stmdahi	r8, {r0, r4, r6}
    6b64:	01080051 	qaddeq	r0, r1, r8
    6b68:	51885200 	orrpl	r5, r8, r0, lsl #4
    6b6c:	53640800 	cmnpl	r4, #0, 16
    6b70:	00030800 	andeq	r0, r3, r0, lsl #16
    6b74:	647f9491 	ldrbtvs	r9, [pc], #-1169	; 6b7c <__Stack_Size+0x637c>
    6b78:	cc080053 	stcgt	0, cr0, [r8], {83}	; 0x53
    6b7c:	01080053 	qaddeq	r0, r3, r8
    6b80:	00005600 	andeq	r5, r0, r0, lsl #12
    6b84:	00000000 	andeq	r0, r0, r0
    6b88:	3c240000 	stccc	0, cr0, [r4], #-0
    6b8c:	3d280800 	stccc	8, cr0, [r8, #-0]
    6b90:	00010800 	andeq	r0, r1, r0, lsl #16
    6b94:	003d8452 	eorseq	r8, sp, r2, asr r4
    6b98:	0040e208 	subeq	lr, r0, r8, lsl #4
    6b9c:	5a000108 	bpl	6fc4 <__Stack_Size+0x67c4>
    6ba0:	08004146 	stmdaeq	r0, {r1, r2, r6, r8, lr}
    6ba4:	080044a0 	stmdaeq	r0, {r5, r7, sl, lr}
    6ba8:	f25a0001 	vhadd.s16	d16, d10, d1
    6bac:	7e080044 	cdpvc	0, 0, cr0, cr8, cr4, {2}
    6bb0:	01080048 	tsteq	r8, r8, asr #32
    6bb4:	48d45400 	ldmmi	r4, {sl, ip, lr}^
    6bb8:	4c180800 	ldcmi	8, cr0, [r8], {-0}
    6bbc:	00010800 	andeq	r0, r1, r0, lsl #16
    6bc0:	004cba55 	subeq	fp, ip, r5, asr sl
    6bc4:	00503e08 	subseq	r3, r0, r8, lsl #28
    6bc8:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    6bcc:	0800509e 	stmdaeq	r0, {r1, r2, r3, r4, r7, ip, lr}
    6bd0:	08005104 	stmdaeq	r0, {r2, r8, ip, lr}
    6bd4:	045a0001 	ldrbeq	r0, [sl], #-1
    6bd8:	16080051 			; <UNDEFINED> instruction: 0x16080051
    6bdc:	01080051 	qaddeq	r0, r1, r8
    6be0:	51165000 	tstpl	r6, r0
    6be4:	52ca0800 	sbcpl	r0, sl, #0, 16
    6be8:	00030800 	andeq	r0, r3, r0, lsl #16
    6bec:	ca7fa891 	bgt	1ff0e38 <__Stack_Size+0x1ff0638>
    6bf0:	b8080052 	stmdalt	r8, {r1, r4, r6}
    6bf4:	01080053 	qaddeq	r0, r3, r8
    6bf8:	00005500 	andeq	r5, r0, r0, lsl #10
    6bfc:	00000000 	andeq	r0, r0, r0
    6c00:	3c240000 	stccc	0, cr0, [r4], #-0
    6c04:	3ca40800 	stccc	8, cr0, [r4]
    6c08:	00010800 	andeq	r0, r1, r0, lsl #16
    6c0c:	003d1050 	eorseq	r1, sp, r0, asr r0
    6c10:	00407a08 	subeq	r7, r0, r8, lsl #20
    6c14:	58000108 	stmdapl	r0, {r3, r8}
    6c18:	080040e0 	stmdaeq	r0, {r5, r6, r7, lr}
    6c1c:	08004298 	stmdaeq	r0, {r3, r4, r7, r9, lr}
    6c20:	98560001 	ldmdals	r6, {r0}^
    6c24:	32080042 	andcc	r0, r8, #66	; 0x42
    6c28:	01080044 	tsteq	r8, r4, asr #32
    6c2c:	44885b00 	strmi	r5, [r8], #2816	; 0xb00
    6c30:	47e60800 	strbmi	r0, [r6, r0, lsl #16]!
    6c34:	00010800 	andeq	r0, r1, r0, lsl #16
    6c38:	00483455 	subeq	r3, r8, r5, asr r4
    6c3c:	004bba08 	subeq	fp, fp, r8, lsl #20
    6c40:	5c000108 	stfpls	f0, [r0], {8}
    6c44:	08004c0a 	stmdaeq	r0, {r1, r3, sl, fp, lr}
    6c48:	08004fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, lr}
    6c4c:	045c0001 	ldrbeq	r0, [ip], #-1
    6c50:	62080050 	andvs	r0, r8, #80	; 0x50
    6c54:	01080050 	qaddeq	r0, r0, r8
    6c58:	50625000 	rsbpl	r5, r2, r0
    6c5c:	506e0800 	rsbpl	r0, lr, r0, lsl #16
    6c60:	00010800 	andeq	r0, r1, r0, lsl #16
    6c64:	00506e5b 	subseq	r6, r0, fp, asr lr
    6c68:	00525e08 	subseq	r5, r2, r8, lsl #28
    6c6c:	91000308 	tstls	r0, r8, lsl #6
    6c70:	525e7fa4 	subspl	r7, lr, #164, 30	; 0x290
    6c74:	53a80800 			; <UNDEFINED> instruction: 0x53a80800
    6c78:	00010800 	andeq	r0, r1, r0, lsl #16
    6c7c:	00000050 	andeq	r0, r0, r0, asr r0
    6c80:	00000000 	andeq	r0, r0, r0
    6c84:	00540c00 	subseq	r0, r4, r0, lsl #24
    6c88:	00542e08 	subseq	r2, r4, r8, lsl #28
    6c8c:	50000108 	andpl	r0, r0, r8, lsl #2
    6c90:	0800542e 	stmdaeq	r0, {r1, r2, r3, r5, sl, ip, lr}
    6c94:	0800545e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, ip, lr}
    6c98:	5e560001 	cdppl	0, 5, cr0, cr6, cr1, {0}
    6c9c:	66080054 			; <UNDEFINED> instruction: 0x66080054
    6ca0:	01080054 	qaddeq	r0, r4, r8
    6ca4:	54665000 	strbtpl	r5, [r6], #-0
    6ca8:	54740800 	ldrbtpl	r0, [r4], #-2048	; 0x800
    6cac:	00010800 	andeq	r0, r1, r0, lsl #16
    6cb0:	00547456 	subseq	r7, r4, r6, asr r4
    6cb4:	00547808 	subseq	r7, r4, r8, lsl #16
    6cb8:	f3000408 	vshl.u8	d0, d8, d0
    6cbc:	789f5001 	ldmvc	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    6cc0:	7c080054 	stcvc	0, cr0, [r8], {84}	; 0x54
    6cc4:	01080054 	qaddeq	r0, r4, r8
    6cc8:	547c5000 	ldrbtpl	r5, [ip], #-0
    6ccc:	549a0800 	ldrpl	r0, [sl], #2048	; 0x800
    6cd0:	00010800 	andeq	r0, r1, r0, lsl #16
    6cd4:	00000056 	andeq	r0, r0, r6, asr r0
    6cd8:	00000000 	andeq	r0, r0, r0
    6cdc:	00540c00 	subseq	r0, r4, r0, lsl #24
    6ce0:	00542e08 	subseq	r2, r4, r8, lsl #28
    6ce4:	51000108 	tstpl	r0, r8, lsl #2
    6ce8:	0800542e 	stmdaeq	r0, {r1, r2, r3, r5, sl, ip, lr}
    6cec:	0800545e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, ip, lr}
    6cf0:	01f30004 	mvnseq	r0, r4
    6cf4:	545e9f51 	ldrbpl	r9, [lr], #-3921	; 0xf51
    6cf8:	54660800 	strbtpl	r0, [r6], #-2048	; 0x800
    6cfc:	00010800 	andeq	r0, r1, r0, lsl #16
    6d00:	00546651 	subseq	r6, r4, r1, asr r6
    6d04:	00547808 	subseq	r7, r4, r8, lsl #16
    6d08:	f3000408 	vshl.u8	d0, d8, d0
    6d0c:	789f5101 	ldmvc	pc, {r0, r8, ip, lr}	; <UNPREDICTABLE>
    6d10:	7e080054 	mcrvc	0, 0, r0, cr8, cr4, {2}
    6d14:	01080054 	qaddeq	r0, r4, r8
    6d18:	547e5100 	ldrbtpl	r5, [lr], #-256	; 0x100
    6d1c:	54940800 	ldrpl	r0, [r4], #2048	; 0x800
    6d20:	00010800 	andeq	r0, r1, r0, lsl #16
    6d24:	00549458 	subseq	r9, r4, r8, asr r4
    6d28:	00549a08 	subseq	r9, r4, r8, lsl #20
    6d2c:	f3000408 	vshl.u8	d0, d8, d0
    6d30:	009f5101 	addseq	r5, pc, r1, lsl #2
    6d34:	00000000 	andeq	r0, r0, r0
    6d38:	0c000000 	stceq	0, cr0, [r0], {-0}
    6d3c:	1c080054 	stcne	0, cr0, [r8], {84}	; 0x54
    6d40:	01080054 	qaddeq	r0, r4, r8
    6d44:	541c5200 	ldrpl	r5, [ip], #-512	; 0x200
    6d48:	542e0800 	strtpl	r0, [lr], #-2048	; 0x800
    6d4c:	00010800 	andeq	r0, r1, r0, lsl #16
    6d50:	00542e57 	subseq	r2, r4, r7, asr lr
    6d54:	00545e08 	subseq	r5, r4, r8, lsl #28
    6d58:	f3000408 	vshl.u8	d0, d8, d0
    6d5c:	5e9f5201 	cdppl	2, 9, cr5, cr15, cr1, {0}
    6d60:	66080054 			; <UNDEFINED> instruction: 0x66080054
    6d64:	01080054 	qaddeq	r0, r4, r8
    6d68:	54665700 	strbtpl	r5, [r6], #-1792	; 0x700
    6d6c:	54780800 	ldrbtpl	r0, [r8], #-2048	; 0x800
    6d70:	00040800 	andeq	r0, r4, r0, lsl #16
    6d74:	9f5201f3 	svcls	0x005201f3
    6d78:	08005478 	stmdaeq	r0, {r3, r4, r5, r6, sl, ip, lr}
    6d7c:	08005492 	stmdaeq	r0, {r1, r4, r7, sl, ip, lr}
    6d80:	92570001 	subsls	r0, r7, #1
    6d84:	9a080054 	bls	206edc <__Stack_Size+0x2066dc>
    6d88:	04080054 	streq	r0, [r8], #-84	; 0x54
    6d8c:	5201f300 	andpl	pc, r1, #0, 6
    6d90:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6d94:	00000000 	andeq	r0, r0, r0
    6d98:	00541800 	subseq	r1, r4, r0, lsl #16
    6d9c:	00541c08 	subseq	r1, r4, r8, lsl #24
    6da0:	52000108 	andpl	r0, r0, #8, 2
    6da4:	0800541c 	stmdaeq	r0, {r2, r3, r4, sl, ip, lr}
    6da8:	08005436 	stmdaeq	r0, {r1, r2, r4, r5, sl, ip, lr}
    6dac:	36570001 	ldrbcc	r0, [r7], -r1
    6db0:	3a080054 	bcc	206f08 <__Stack_Size+0x206708>
    6db4:	01080054 	qaddeq	r0, r4, r8
    6db8:	543a5500 	ldrtpl	r5, [sl], #-1280	; 0x500
    6dbc:	54400800 	strbpl	r0, [r0], #-2048	; 0x800
    6dc0:	00040800 	andeq	r0, r4, r0, lsl #16
    6dc4:	9f00c075 	svcls	0x0000c075
    6dc8:	08005440 	stmdaeq	r0, {r6, sl, ip, lr}
    6dcc:	08005458 	stmdaeq	r0, {r3, r4, r6, sl, ip, lr}
    6dd0:	5e550001 	cdppl	0, 5, cr0, cr5, cr1, {0}
    6dd4:	66080054 			; <UNDEFINED> instruction: 0x66080054
    6dd8:	01080054 	qaddeq	r0, r4, r8
    6ddc:	54785700 	ldrbtpl	r5, [r8], #-1792	; 0x700
    6de0:	54960800 	ldrpl	r0, [r6], #2048	; 0x800
    6de4:	00010800 	andeq	r0, r1, r0, lsl #16
    6de8:	00000057 	andeq	r0, r0, r7, asr r0
    6dec:	00000000 	andeq	r0, r0, r0
    6df0:	00541800 	subseq	r1, r4, r0, lsl #16
    6df4:	00542e08 	subseq	r2, r4, r8, lsl #28
    6df8:	51000108 	tstpl	r0, r8, lsl #2
    6dfc:	0800542e 	stmdaeq	r0, {r1, r2, r3, r5, sl, ip, lr}
    6e00:	08005436 	stmdaeq	r0, {r1, r2, r4, r5, sl, ip, lr}
    6e04:	36580001 	ldrbcc	r0, [r8], -r1
    6e08:	58080054 	stmdapl	r8, {r2, r4, r6}
    6e0c:	01080054 	qaddeq	r0, r4, r8
    6e10:	545e5400 	ldrbpl	r5, [lr], #-1024	; 0x400
    6e14:	54660800 	strbtpl	r0, [r6], #-2048	; 0x800
    6e18:	00010800 	andeq	r0, r1, r0, lsl #16
    6e1c:	00547851 	subseq	r7, r4, r1, asr r8
    6e20:	00547e08 	subseq	r7, r4, r8, lsl #28
    6e24:	51000108 	tstpl	r0, r8, lsl #2
    6e28:	0800547e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, ip, lr}
    6e2c:	08005496 	stmdaeq	r0, {r1, r2, r4, r7, sl, ip, lr}
    6e30:	00580001 	subseq	r0, r8, r1
    6e34:	00000000 	andeq	r0, r0, r0
    6e38:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6e3c:	2e080054 	mcrcs	0, 0, r0, cr8, cr4, {2}
    6e40:	01080054 	qaddeq	r0, r4, r8
    6e44:	542e5000 	strtpl	r5, [lr], #-0
    6e48:	545a0800 	ldrbpl	r0, [sl], #-2048	; 0x800
    6e4c:	00010800 	andeq	r0, r1, r0, lsl #16
    6e50:	00545e56 	subseq	r5, r4, r6, asr lr
    6e54:	00546608 	subseq	r6, r4, r8, lsl #12
    6e58:	50000108 	andpl	r0, r0, r8, lsl #2
    6e5c:	08005466 	stmdaeq	r0, {r1, r2, r5, r6, sl, ip, lr}
    6e60:	08005474 	stmdaeq	r0, {r2, r4, r5, r6, sl, ip, lr}
    6e64:	74560001 	ldrbvc	r0, [r6], #-1
    6e68:	78080054 	stmdavc	r8, {r2, r4, r6}
    6e6c:	04080054 	streq	r0, [r8], #-84	; 0x54
    6e70:	5001f300 	andpl	pc, r1, r0, lsl #6
    6e74:	0054789f 			; <UNDEFINED> instruction: 0x0054789f
    6e78:	00547c08 	subseq	r7, r4, r8, lsl #24
    6e7c:	50000108 	andpl	r0, r0, r8, lsl #2
    6e80:	0800547c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, ip, lr}
    6e84:	0800549a 	stmdaeq	r0, {r1, r3, r4, r7, sl, ip, lr}
    6e88:	00560001 	subseq	r0, r6, r1
    6e8c:	00000000 	andeq	r0, r0, r0
    6e90:	24000000 	strcs	r0, [r0], #-0
    6e94:	2e080054 	mcrcs	0, 0, r0, cr8, cr4, {2}
    6e98:	01080054 	qaddeq	r0, r4, r8
    6e9c:	542e5300 	strtpl	r5, [lr], #-768	; 0x300
    6ea0:	545a0800 	ldrbpl	r0, [sl], #-2048	; 0x800
    6ea4:	00020800 	andeq	r0, r2, r0, lsl #16
    6ea8:	545e9f30 	ldrbpl	r9, [lr], #-3888	; 0xf30
    6eac:	54660800 	strbtpl	r0, [r6], #-2048	; 0x800
    6eb0:	00010800 	andeq	r0, r1, r0, lsl #16
    6eb4:	00547853 	subseq	r7, r4, r3, asr r8
    6eb8:	00548508 	subseq	r8, r4, r8, lsl #10
    6ebc:	53000108 	movwpl	r0, #264	; 0x108
    6ec0:	08005494 	stmdaeq	r0, {r2, r4, r7, sl, ip, lr}
    6ec4:	0800549a 	stmdaeq	r0, {r1, r3, r4, r7, sl, ip, lr}
    6ec8:	9f300002 	svcls	0x00300002
	...
    6ed4:	08005424 	stmdaeq	r0, {r2, r5, sl, ip, lr}
    6ed8:	0800542e 	stmdaeq	r0, {r1, r2, r3, r5, sl, ip, lr}
    6edc:	40080006 	andmi	r0, r8, r6
    6ee0:	9f1c0073 	svcls	0x001c0073
    6ee4:	0800545e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, ip, lr}
    6ee8:	08005466 	stmdaeq	r0, {r1, r2, r5, r6, sl, ip, lr}
    6eec:	40080006 	andmi	r0, r8, r6
    6ef0:	9f1c0073 	svcls	0x001c0073
    6ef4:	08005478 	stmdaeq	r0, {r3, r4, r5, r6, sl, ip, lr}
    6ef8:	08005485 	stmdaeq	r0, {r0, r2, r7, sl, ip, lr}
    6efc:	40080006 	andmi	r0, r8, r6
    6f00:	9f1c0073 	svcls	0x001c0073
	...
    6f0c:	0800549c 	stmdaeq	r0, {r2, r3, r4, r7, sl, ip, lr}
    6f10:	080054c4 	stmdaeq	r0, {r2, r6, r7, sl, ip, lr}
    6f14:	c4500001 	ldrbgt	r0, [r0], #-1
    6f18:	b4080054 	strlt	r0, [r8], #-84	; 0x54
    6f1c:	01080056 	qaddeq	r0, r6, r8
    6f20:	00005400 	andeq	r5, r0, r0, lsl #8
    6f24:	00000000 	andeq	r0, r0, r0
    6f28:	549c0000 	ldrpl	r0, [ip], #0
    6f2c:	551c0800 	ldrpl	r0, [ip, #-2048]	; 0x800
    6f30:	00010800 	andeq	r0, r1, r0, lsl #16
    6f34:	00551c51 	subseq	r1, r5, r1, asr ip
    6f38:	0055fe08 	subseq	pc, r5, r8, lsl #28
    6f3c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    6f40:	080055fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, ip, lr}
    6f44:	08005608 	stmdaeq	r0, {r3, r9, sl, ip, lr}
    6f48:	08510001 	ldmdaeq	r1, {r0}^
    6f4c:	50080056 	andpl	r0, r8, r6, asr r0
    6f50:	01080056 	qaddeq	r0, r6, r8
    6f54:	56505500 	ldrbpl	r5, [r0], -r0, lsl #10
    6f58:	56560800 	ldrbpl	r0, [r6], -r0, lsl #16
    6f5c:	00010800 	andeq	r0, r1, r0, lsl #16
    6f60:	00565651 	subseq	r5, r6, r1, asr r6
    6f64:	0056b408 	subseq	fp, r6, r8, lsl #8
    6f68:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    6f74:	080054ca 	stmdaeq	r0, {r1, r3, r6, r7, sl, ip, lr}
    6f78:	0800551c 	stmdaeq	r0, {r2, r3, r4, r8, sl, ip, lr}
    6f7c:	fe560001 	cdp2	0, 5, cr0, cr6, cr1, {0}
    6f80:	2a080055 	bcs	2070dc <__Stack_Size+0x2068dc>
    6f84:	01080056 	qaddeq	r0, r6, r8
    6f88:	56505600 	ldrbpl	r5, [r0], -r0, lsl #12
    6f8c:	56560800 	ldrbpl	r0, [r6], -r0, lsl #16
    6f90:	00010800 	andeq	r0, r1, r0, lsl #16
    6f94:	00569c56 	subseq	r9, r6, r6, asr ip
    6f98:	0056a008 	subseq	sl, r6, r8
    6f9c:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    6fa8:	080054ca 	stmdaeq	r0, {r1, r3, r6, r7, sl, ip, lr}
    6fac:	0800551c 	stmdaeq	r0, {r2, r3, r4, r8, sl, ip, lr}
    6fb0:	fe580001 	cdp2	0, 5, cr0, cr8, cr1, {0}
    6fb4:	1a080055 	bne	207110 <__Stack_Size+0x206910>
    6fb8:	01080056 	qaddeq	r0, r6, r8
    6fbc:	56505800 	ldrbpl	r5, [r0], -r0, lsl #16
    6fc0:	56560800 	ldrbpl	r0, [r6], -r0, lsl #16
    6fc4:	00010800 	andeq	r0, r1, r0, lsl #16
    6fc8:	00000058 	andeq	r0, r0, r8, asr r0
    6fcc:	00000000 	andeq	r0, r0, r0
    6fd0:	0054ca00 	subseq	ip, r4, r0, lsl #20
    6fd4:	00551c08 	subseq	r1, r5, r8, lsl #24
    6fd8:	50000108 	andpl	r0, r0, r8, lsl #2
    6fdc:	080055fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, ip, lr}
    6fe0:	08005606 	stmdaeq	r0, {r1, r2, r9, sl, ip, lr}
    6fe4:	50500001 	subspl	r0, r0, r1
    6fe8:	56080056 			; <UNDEFINED> instruction: 0x56080056
    6fec:	01080056 	qaddeq	r0, r6, r8
    6ff0:	00005000 	andeq	r5, r0, r0
    6ff4:	00000000 	andeq	r0, r0, r0
    6ff8:	54ca0000 	strbpl	r0, [sl], #0
    6ffc:	551c0800 	ldrpl	r0, [ip, #-2048]	; 0x800
    7000:	00010800 	andeq	r0, r1, r0, lsl #16
    7004:	0055fe52 	subseq	pc, r5, r2, asr lr	; <UNPREDICTABLE>
    7008:	00560c08 	subseq	r0, r6, r8, lsl #24
    700c:	52000108 	andpl	r0, r0, #8, 2
    7010:	08005650 	stmdaeq	r0, {r4, r6, r9, sl, ip, lr}
    7014:	08005656 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, ip, lr}
    7018:	00520001 	subseq	r0, r2, r1
    701c:	00000000 	andeq	r0, r0, r0
    7020:	ca000000 	bgt	7028 <__Stack_Size+0x6828>
    7024:	1c080054 	stcne	0, cr0, [r8], {84}	; 0x54
    7028:	01080055 	qaddeq	r0, r5, r8
    702c:	55fe5800 	ldrbpl	r5, [lr, #2048]!	; 0x800
    7030:	561a0800 	ldrpl	r0, [sl], -r0, lsl #16
    7034:	00010800 	andeq	r0, r1, r0, lsl #16
    7038:	00562058 	subseq	r2, r6, r8, asr r0
    703c:	00562a08 	subseq	r2, r6, r8, lsl #20
    7040:	58000108 	stmdapl	r0, {r3, r8}
    7044:	0800562a 	stmdaeq	r0, {r1, r3, r5, r9, sl, ip, lr}
    7048:	0800562e 	stmdaeq	r0, {r1, r2, r3, r5, r9, sl, ip, lr}
    704c:	2e570001 	cdpcs	0, 5, cr0, cr7, cr1, {0}
    7050:	34080056 	strcc	r0, [r8], #-86	; 0x56
    7054:	04080056 	streq	r0, [r8], #-86	; 0x56
    7058:	00c07700 	sbceq	r7, r0, r0, lsl #14
    705c:	0056349f 			; <UNDEFINED> instruction: 0x0056349f
    7060:	00565008 	subseq	r5, r6, r8
    7064:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    7068:	08005650 	stmdaeq	r0, {r4, r6, r9, sl, ip, lr}
    706c:	08005656 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, ip, lr}
    7070:	9c580001 	mrrcls	0, 0, r0, r8, cr1
    7074:	a2080056 	andge	r0, r8, #86	; 0x56
    7078:	01080056 	qaddeq	r0, r6, r8
    707c:	00005800 	andeq	r5, r0, r0, lsl #16
    7080:	00000000 	andeq	r0, r0, r0
    7084:	54ca0000 	strbpl	r0, [sl], #0
    7088:	551c0800 	ldrpl	r0, [ip, #-2048]	; 0x800
    708c:	00060800 	andeq	r0, r6, r0, lsl #16
    7090:	0002c403 	andeq	ip, r2, r3, lsl #8
    7094:	55fe9f20 	ldrbpl	r9, [lr, #3872]!	; 0xf20
    7098:	56200800 	strtpl	r0, [r0], -r0, lsl #16
    709c:	00060800 	andeq	r0, r6, r0, lsl #16
    70a0:	0002c403 	andeq	ip, r2, r3, lsl #8
    70a4:	56209f20 	strtpl	r9, [r0], -r0, lsr #30
    70a8:	562a0800 	strtpl	r0, [sl], -r0, lsl #16
    70ac:	00010800 	andeq	r0, r1, r0, lsl #16
    70b0:	00562a59 	subseq	r2, r6, r9, asr sl
    70b4:	00564e08 	subseq	r4, r6, r8, lsl #28
    70b8:	56000108 	strpl	r0, [r0], -r8, lsl #2
    70bc:	08005650 	stmdaeq	r0, {r4, r6, r9, sl, ip, lr}
    70c0:	08005656 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, ip, lr}
    70c4:	c4030006 	strgt	r0, [r3], #-6
    70c8:	9f200002 	svcls	0x00200002
    70cc:	0800569c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, lr}
    70d0:	080056a2 	stmdaeq	r0, {r1, r5, r7, r9, sl, ip, lr}
    70d4:	00590001 	subseq	r0, r9, r1
    70d8:	00000000 	andeq	r0, r0, r0
    70dc:	ca000000 	bgt	70e4 <__Stack_Size+0x68e4>
    70e0:	1c080054 	stcne	0, cr0, [r8], {84}	; 0x54
    70e4:	01080055 	qaddeq	r0, r5, r8
    70e8:	55fe5600 	ldrbpl	r5, [lr, #1536]!	; 0x600
    70ec:	56200800 	strtpl	r0, [r0], -r0, lsl #16
    70f0:	00010800 	andeq	r0, r1, r0, lsl #16
    70f4:	00562056 	subseq	r2, r6, r6, asr r0
    70f8:	00565008 	subseq	r5, r6, r8
    70fc:	30000208 	andcc	r0, r0, r8, lsl #4
    7100:	0056509f 			; <UNDEFINED> instruction: 0x0056509f
    7104:	00565608 	subseq	r5, r6, r8, lsl #12
    7108:	56000108 	strpl	r0, [r0], -r8, lsl #2
    710c:	0800569c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, lr}
    7110:	080056a2 	stmdaeq	r0, {r1, r5, r7, r9, sl, ip, lr}
    7114:	9f300002 	svcls	0x00300002
	...
    7120:	080054ca 	stmdaeq	r0, {r1, r3, r6, r7, sl, ip, lr}
    7124:	08005512 	stmdaeq	r0, {r1, r4, r8, sl, ip, lr}
    7128:	40080006 	andmi	r0, r8, r6
    712c:	9f1c0076 	svcls	0x001c0076
    7130:	08005512 	stmdaeq	r0, {r1, r4, r8, sl, ip, lr}
    7134:	0800551c 	stmdaeq	r0, {r2, r3, r4, r8, sl, ip, lr}
    7138:	fe570001 	cdp2	0, 5, cr0, cr7, cr1, {0}
    713c:	20080055 	andcs	r0, r8, r5, asr r0
    7140:	01080056 	qaddeq	r0, r6, r8
    7144:	56205700 	strtpl	r5, [r0], -r0, lsl #14
    7148:	562a0800 	strtpl	r0, [sl], -r0, lsl #16
    714c:	00060800 	andeq	r0, r6, r0, lsl #16
    7150:	00764008 	rsbseq	r4, r6, r8
    7154:	56509f1c 	uadd16pl	r9, r0, ip
    7158:	56560800 	ldrbpl	r0, [r6], -r0, lsl #16
    715c:	00060800 	andeq	r0, r6, r0, lsl #16
    7160:	00764008 	rsbseq	r4, r6, r8
    7164:	569c9f1c 			; <UNDEFINED> instruction: 0x569c9f1c
    7168:	56a00800 	strtpl	r0, [r0], r0, lsl #16
    716c:	00060800 	andeq	r0, r6, r0, lsl #16
    7170:	00764008 	rsbseq	r4, r6, r8
    7174:	00009f1c 	andeq	r9, r0, ip, lsl pc
    7178:	00000000 	andeq	r0, r0, r0
    717c:	552a0000 	strpl	r0, [sl, #-0]!
    7180:	55fe0800 	ldrbpl	r0, [lr, #2048]!	; 0x800
    7184:	00020800 	andeq	r0, r2, r0, lsl #16
    7188:	56569f38 	uasxpl	r9, r6, r8
    718c:	569c0800 	ldrpl	r0, [ip], r0, lsl #16
    7190:	00020800 	andeq	r0, r2, r0, lsl #16
    7194:	56a29f38 	ssat16pl	r9, #3, r8
    7198:	56b40800 	ldrtpl	r0, [r4], r0, lsl #16
    719c:	00020800 	andeq	r0, r2, r0, lsl #16
    71a0:	00009f38 	andeq	r9, r0, r8, lsr pc
    71a4:	00000000 	andeq	r0, r0, r0
    71a8:	552a0000 	strpl	r0, [sl, #-0]!
    71ac:	55fa0800 	ldrbpl	r0, [sl, #2048]!	; 0x800
    71b0:	00010800 	andeq	r0, r1, r0, lsl #16
    71b4:	0055fa5d 	subseq	pc, r5, sp, asr sl	; <UNPREDICTABLE>
    71b8:	0055fe08 	subseq	pc, r5, r8, lsl #28
    71bc:	91000308 	tstls	r0, r8, lsl #6
    71c0:	56569f50 	usaxpl	r9, r6, r0
    71c4:	569c0800 	ldrpl	r0, [ip], r0, lsl #16
    71c8:	00010800 	andeq	r0, r1, r0, lsl #16
    71cc:	0056a25d 	subseq	sl, r6, sp, asr r2
    71d0:	0056b408 	subseq	fp, r6, r8, lsl #8
    71d4:	5d000108 	stfpls	f0, [r0, #-32]	; 0xffffffe0
	...
    71e0:	0800552a 	stmdaeq	r0, {r1, r3, r5, r8, sl, ip, lr}
    71e4:	080055fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, ip, lr}
    71e8:	56540001 	ldrbpl	r0, [r4], -r1
    71ec:	9c080056 	stcls	0, cr0, [r8], {86}	; 0x56
    71f0:	01080056 	qaddeq	r0, r6, r8
    71f4:	56a25400 	strtpl	r5, [r2], r0, lsl #8
    71f8:	56b40800 	ldrtpl	r0, [r4], r0, lsl #16
    71fc:	00010800 	andeq	r0, r1, r0, lsl #16
    7200:	00000054 	andeq	r0, r0, r4, asr r0
    7204:	00000000 	andeq	r0, r0, r0
    7208:	00552a00 	subseq	r2, r5, r0, lsl #20
    720c:	00555608 	subseq	r5, r5, r8, lsl #12
    7210:	38000208 	stmdacc	r0, {r3, r9}
    7214:	0056569f 			; <UNDEFINED> instruction: 0x0056569f
    7218:	00567608 	subseq	r7, r6, r8, lsl #12
    721c:	38000208 	stmdacc	r0, {r3, r9}
    7220:	0056769f 			; <UNDEFINED> instruction: 0x0056769f
    7224:	00568008 	subseq	r8, r6, r8
    7228:	56000108 	strpl	r0, [r0], -r8, lsl #2
    722c:	08005680 	stmdaeq	r0, {r7, r9, sl, ip, lr}
    7230:	08005686 	stmdaeq	r0, {r1, r2, r7, r9, sl, ip, lr}
    7234:	c0760004 	rsbsgt	r0, r6, r4
    7238:	56869f00 	strpl	r9, [r6], r0, lsl #30
    723c:	56920800 	ldrpl	r0, [r2], r0, lsl #16
    7240:	00010800 	andeq	r0, r1, r0, lsl #16
    7244:	0056a256 	subseq	sl, r6, r6, asr r2
    7248:	0056b408 	subseq	fp, r6, r8, lsl #8
    724c:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    7258:	0800552a 	stmdaeq	r0, {r1, r3, r5, r8, sl, ip, lr}
    725c:	08005556 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl, ip, lr}
    7260:	565d0001 	ldrbpl	r0, [sp], -r1
    7264:	76080056 			; <UNDEFINED> instruction: 0x76080056
    7268:	01080056 	qaddeq	r0, r6, r8
    726c:	56765d00 	ldrbtpl	r5, [r6], -r0, lsl #26
    7270:	567c0800 	ldrbtpl	r0, [ip], -r0, lsl #16
    7274:	00010800 	andeq	r0, r1, r0, lsl #16
    7278:	00567c59 	subseq	r7, r6, r9, asr ip
    727c:	00569c08 	subseq	r9, r6, r8, lsl #24
    7280:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    7284:	080056a2 	stmdaeq	r0, {r1, r5, r7, r9, sl, ip, lr}
    7288:	080056b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, ip, lr}
    728c:	00590001 	subseq	r0, r9, r1
    7290:	00000000 	andeq	r0, r0, r0
    7294:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    7298:	56080055 			; <UNDEFINED> instruction: 0x56080055
    729c:	01080055 	qaddeq	r0, r5, r8
    72a0:	56565800 	ldrbpl	r5, [r6], -r0, lsl #16
    72a4:	56760800 	ldrbtpl	r0, [r6], -r0, lsl #16
    72a8:	00010800 	andeq	r0, r1, r0, lsl #16
    72ac:	00567658 	subseq	r7, r6, r8, asr r6
    72b0:	00569c08 	subseq	r9, r6, r8, lsl #24
    72b4:	30000208 	andcc	r0, r0, r8, lsl #4
    72b8:	0056a29f 			; <UNDEFINED> instruction: 0x0056a29f
    72bc:	0056b408 	subseq	fp, r6, r8, lsl #8
    72c0:	30000208 	andcc	r0, r0, r8, lsl #4
    72c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    72c8:	00000000 	andeq	r0, r0, r0
    72cc:	00553800 	subseq	r3, r5, r0, lsl #16
    72d0:	00555608 	subseq	r5, r5, r8, lsl #12
    72d4:	08000608 	stmdaeq	r0, {r3, r9, sl}
    72d8:	1c007840 	stcne	8, cr7, [r0], {64}	; 0x40
    72dc:	0056569f 			; <UNDEFINED> instruction: 0x0056569f
    72e0:	00569a08 	subseq	r9, r6, r8, lsl #20
    72e4:	08000608 	stmdaeq	r0, {r3, r9, sl}
    72e8:	1c007840 	stcne	8, cr7, [r0], {64}	; 0x40
    72ec:	00569a9f 			; <UNDEFINED> instruction: 0x00569a9f
    72f0:	00569c08 	subseq	r9, r6, r8, lsl #24
    72f4:	08000608 	stmdaeq	r0, {r3, r9, sl}
    72f8:	1c007648 	stcne	6, cr7, [r0], {72}	; 0x48
    72fc:	0056a29f 			; <UNDEFINED> instruction: 0x0056a29f
    7300:	0056ac08 	subseq	sl, r6, r8, lsl #24
    7304:	08000608 	stmdaeq	r0, {r3, r9, sl}
    7308:	1c007840 	stcne	8, cr7, [r0], {64}	; 0x40
    730c:	0056ac9f 			; <UNDEFINED> instruction: 0x0056ac9f
    7310:	0056b408 	subseq	fp, r6, r8, lsl #8
    7314:	38000508 	stmdacc	r0, {r3, r8, sl}
    7318:	9f1c0076 	svcls	0x001c0076
	...
    7324:	080056b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, ip, lr}
    7328:	080056c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip, lr}
    732c:	c4500001 	ldrbgt	r0, [r0], #-1
    7330:	42080056 	andmi	r0, r8, #86	; 0x56
    7334:	0308005b 	movweq	r0, #32859	; 0x805b
    7338:	7e9c9100 	cosvce	f1, f0
    733c:	08005b42 	stmdaeq	r0, {r1, r6, r8, r9, fp, ip, lr}
    7340:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
    7344:	9c7d0003 	ldclls	0, cr0, [sp], #-12
    7348:	0000007e 	andeq	r0, r0, lr, ror r0
    734c:	00000000 	andeq	r0, r0, r0
    7350:	0056b400 	subseq	fp, r6, r0, lsl #8
    7354:	0056c408 	subseq	ip, r6, r8, lsl #8
    7358:	51000108 	tstpl	r0, r8, lsl #2
    735c:	080056c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip, lr}
    7360:	08005788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip, lr}
    7364:	00540001 	subseq	r0, r4, r1
    7368:	00000000 	andeq	r0, r0, r0
    736c:	b4000000 	strlt	r0, [r0], #-0
    7370:	dc080057 	stcle	0, cr0, [r8], {87}	; 0x57
    7374:	06080057 			; <UNDEFINED> instruction: 0x06080057
    7378:	04935000 	ldreq	r5, [r3], #0
    737c:	dc049351 	stcle	3, cr9, [r4], {81}	; 0x51
    7380:	f2080057 	vqadd.s8	q0, q4, <illegal reg q3.5>
    7384:	02080057 	andeq	r0, r8, #87	; 0x57
    7388:	f2007100 	vrhadd.s8	d7, d0, d0
    738c:	10080057 	andne	r0, r8, r7, asr r0
    7390:	02080058 	andeq	r0, r8, #88	; 0x58
    7394:	10007500 	andne	r7, r0, r0, lsl #10
    7398:	42080058 	andmi	r0, r8, #88	; 0x58
    739c:	06080058 			; <UNDEFINED> instruction: 0x06080058
    73a0:	04935000 	ldreq	r5, [r3], #0
    73a4:	42049351 	andmi	r9, r4, #1140850689	; 0x44000001
    73a8:	72080058 	andvc	r0, r8, #88	; 0x58
    73ac:	0608005a 			; <UNDEFINED> instruction: 0x0608005a
    73b0:	04935a00 	ldreq	r5, [r3], #2560	; 0xa00
    73b4:	7204935b 	andvc	r9, r4, #1811939329	; 0x6c000001
    73b8:	8408005a 	strhi	r0, [r8], #-90	; 0x5a
    73bc:	0608005a 			; <UNDEFINED> instruction: 0x0608005a
    73c0:	04935000 	ldreq	r5, [r3], #0
    73c4:	00049351 	andeq	r9, r4, r1, asr r3
    73c8:	00000000 	andeq	r0, r0, r0
    73cc:	b4000000 	strlt	r0, [r0], #-0
    73d0:	10080057 	andne	r0, r8, r7, asr r0
    73d4:	03080058 	movweq	r0, #32856	; 0x8058
    73d8:	7d809100 	stfvcd	f1, [r0]
    73dc:	08005810 	stmdaeq	r0, {r4, fp, ip, lr}
    73e0:	08005840 	stmdaeq	r0, {r6, fp, ip, lr}
    73e4:	935a0006 	cmpls	sl, #6
    73e8:	04935b04 	ldreq	r5, [r3], #2820	; 0xb04
    73ec:	08005840 	stmdaeq	r0, {r6, fp, ip, lr}
    73f0:	08005a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, ip, lr}
    73f4:	80910003 	addshi	r0, r1, r3
    73f8:	005a6c7d 	subseq	r6, sl, sp, ror ip
    73fc:	005a8c08 	subseq	r8, sl, r8, lsl #24
    7400:	5a000608 	bpl	8c28 <__Stack_Size+0x8428>
    7404:	935b0493 	cmpls	fp, #-1828716544	; 0x93000000
    7408:	00000004 	andeq	r0, r0, r4
    740c:	00000000 	andeq	r0, r0, r0
    7410:	0057b400 	subseq	fp, r7, r0, lsl #8
    7414:	00581008 	subseq	r1, r8, r8
    7418:	91000308 	tstls	r0, r8, lsl #6
    741c:	58107d88 	ldmdapl	r0, {r3, r7, r8, sl, fp, ip, sp, lr}
    7420:	583c0800 	ldmdapl	ip!, {fp}
    7424:	00030800 	andeq	r0, r3, r0, lsl #16
    7428:	427d8091 	rsbsmi	r8, sp, #145	; 0x91
    742c:	6c080058 	stcvs	0, cr0, [r8], {88}	; 0x58
    7430:	0308005a 	movweq	r0, #32858	; 0x805a
    7434:	7d889100 	stfvcd	f1, [r8]
    7438:	08005a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, ip, lr}
    743c:	08005b42 	stmdaeq	r0, {r1, r6, r8, r9, fp, ip, lr}
    7440:	80910003 	addshi	r0, r1, r3
    7444:	005b427d 	subseq	r4, fp, sp, ror r2
    7448:	005b4808 	subseq	r4, fp, r8, lsl #16
    744c:	7d000308 	stcvc	3, cr0, [r0, #-32]	; 0xffffffe0
    7450:	00007d80 	andeq	r7, r0, r0, lsl #27
    7454:	00000000 	andeq	r0, r0, r0
    7458:	57c00000 	strbpl	r0, [r0, r0]
    745c:	57d20800 	ldrbpl	r0, [r2, r0, lsl #16]
    7460:	00060800 	andeq	r0, r6, r0, lsl #16
    7464:	57049356 	smlsdpl	r4, r6, r3, r9
    7468:	57d20493 	bfipl	r0, r3, #9, #10
    746c:	57f20800 	ldrbpl	r0, [r2, r0, lsl #16]!
    7470:	00020800 	andeq	r0, r2, r0, lsl #16
    7474:	57f21871 			; <UNDEFINED> instruction: 0x57f21871
    7478:	58100800 	ldmdapl	r0, {fp}
    747c:	00020800 	andeq	r0, r2, r0, lsl #16
    7480:	58101875 	ldmdapl	r0, {r0, r2, r4, r5, r6, fp, ip}
    7484:	58300800 	ldmdapl	r0!, {fp}
    7488:	00030800 	andeq	r0, r3, r0, lsl #16
    748c:	427d8891 	rsbsmi	r8, sp, #9502720	; 0x910000
    7490:	6c080058 	stcvs	0, cr0, [r8], {88}	; 0x58
    7494:	0308005a 	movweq	r0, #32858	; 0x805a
    7498:	7df89100 	ldfvcp	f1, [r8]
    749c:	08005a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, ip, lr}
    74a0:	08005b42 	stmdaeq	r0, {r1, r6, r8, r9, fp, ip, lr}
    74a4:	88910003 	ldmhi	r1, {r0, r1}
    74a8:	005b427d 	subseq	r4, fp, sp, ror r2
    74ac:	005b4808 	subseq	r4, fp, r8, lsl #16
    74b0:	7d000308 	stcvc	3, cr0, [r0, #-32]	; 0xffffffe0
    74b4:	00007d88 	andeq	r7, r0, r8, lsl #27
    74b8:	00000000 	andeq	r0, r0, r0
    74bc:	57f80000 	ldrbpl	r0, [r8, r0]!
    74c0:	57fe0800 	ldrbpl	r0, [lr, r0, lsl #16]!
    74c4:	00060800 	andeq	r0, r6, r0, lsl #16
    74c8:	5b04935a 	blpl	12c238 <__Stack_Size+0x12ba38>
    74cc:	57fe0493 			; <UNDEFINED> instruction: 0x57fe0493
    74d0:	58100800 	ldmdapl	r0, {fp}
    74d4:	00020800 	andeq	r0, r2, r0, lsl #16
    74d8:	58102075 	ldmdapl	r0, {r0, r2, r4, r5, r6, sp}
    74dc:	58380800 	ldmdapl	r8!, {fp}
    74e0:	00060800 	andeq	r0, r6, r0, lsl #16
    74e4:	53049352 	movwpl	r9, #17234	; 0x4352
    74e8:	58420493 	stmdapl	r2, {r0, r1, r4, r7, sl}^
    74ec:	5a6c0800 	bpl	1b094f4 <__Stack_Size+0x1b08cf4>
    74f0:	00060800 	andeq	r0, r6, r0, lsl #16
    74f4:	59049358 	stmdbpl	r4, {r3, r4, r6, r8, r9, ip, pc}
    74f8:	5a6c0493 	bpl	1b0874c <__Stack_Size+0x1b07f4c>
    74fc:	5a800800 	bpl	fe009504 <BootRAM+0xcf79ca5>
    7500:	00060800 	andeq	r0, r6, r0, lsl #16
    7504:	53049352 	movwpl	r9, #17234	; 0x4352
    7508:	00000493 	muleq	r0, r3, r4
    750c:	00000000 	andeq	r0, r0, r0
    7510:	57f80000 	ldrbpl	r0, [r8, r0]!
    7514:	58100800 	ldmdapl	r0, {fp}
    7518:	00020800 	andeq	r0, r2, r0, lsl #16
    751c:	58102875 	ldmdapl	r0, {r0, r2, r4, r5, r6, fp, sp}
    7520:	58360800 	ldmdapl	r6!, {fp}
    7524:	00060800 	andeq	r0, r6, r0, lsl #16
    7528:	59049358 	stmdbpl	r4, {r3, r4, r6, r8, r9, ip, pc}
    752c:	58360493 	ldmdapl	r6!, {r0, r1, r4, r7, sl}
    7530:	5a620800 	bpl	1889538 <__Stack_Size+0x1888d38>
    7534:	00030800 	andeq	r0, r3, r0, lsl #16
    7538:	627da091 	rsbsvs	sl, sp, #145	; 0x91
    753c:	8808005a 	stmdahi	r8, {r1, r3, r4, r6}
    7540:	0608005a 			; <UNDEFINED> instruction: 0x0608005a
    7544:	04935800 	ldreq	r5, [r3], #2048	; 0x800
    7548:	00049359 	andeq	r9, r4, r9, asr r3
    754c:	00000000 	andeq	r0, r0, r0
    7550:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    7554:	10080057 	andne	r0, r8, r7, asr r0
    7558:	02080058 	andeq	r0, r8, #88	; 0x58
    755c:	10307500 	eorsne	r7, r0, r0, lsl #10
    7560:	34080058 	strcc	r0, [r8], #-88	; 0x58
    7564:	03080058 	movweq	r0, #32856	; 0x8058
    7568:	7da09100 	stfvcd	f1, [r0]
    756c:	08005842 	stmdaeq	r0, {r1, r6, fp, ip, lr}
    7570:	08005a62 	stmdaeq	r0, {r1, r5, r6, r9, fp, ip, lr}
    7574:	98910003 	ldmls	r1, {r0, r1}
    7578:	005a627d 	subseq	r6, sl, sp, ror r2
    757c:	005b4208 	subseq	r4, fp, r8, lsl #4
    7580:	91000308 	tstls	r0, r8, lsl #6
    7584:	5b427da0 	blpl	10a6c0c <__Stack_Size+0x10a640c>
    7588:	5b480800 	blpl	1209590 <__Stack_Size+0x1208d90>
    758c:	00030800 	andeq	r0, r3, r0, lsl #16
    7590:	007da07d 	rsbseq	sl, sp, sp, ror r0
    7594:	00000000 	andeq	r0, r0, r0
    7598:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    759c:	10080057 	andne	r0, r8, r7, asr r0
    75a0:	06080058 			; <UNDEFINED> instruction: 0x06080058
    75a4:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    75a8:	10049355 	andne	r9, r4, r5, asr r3
    75ac:	2c080058 	stccs	0, cr0, [r8], {88}	; 0x58
    75b0:	03080058 	movweq	r0, #32856	; 0x8058
    75b4:	7d989100 	ldfvcd	f1, [r8]
    75b8:	08005842 	stmdaeq	r0, {r1, r6, fp, ip, lr}
    75bc:	08005a62 	stmdaeq	r0, {r1, r5, r6, r9, fp, ip, lr}
    75c0:	80910003 	addshi	r0, r1, r3
    75c4:	005a627e 	subseq	r6, sl, lr, ror r2
    75c8:	005b4208 	subseq	r4, fp, r8, lsl #4
    75cc:	91000308 	tstls	r0, r8, lsl #6
    75d0:	5b427d98 	blpl	10a6c38 <__Stack_Size+0x10a6438>
    75d4:	5b480800 	blpl	12095dc <__Stack_Size+0x1208ddc>
    75d8:	00030800 	andeq	r0, r3, r0, lsl #16
    75dc:	007d987d 	rsbseq	r9, sp, sp, ror r8
    75e0:	00000000 	andeq	r0, r0, r0
    75e4:	b4000000 	strlt	r0, [r0], #-0
    75e8:	c4080056 	strgt	r0, [r8], #-86	; 0x56
    75ec:	02080056 	andeq	r0, r8, #86	; 0x56
    75f0:	f89f3000 			; <UNDEFINED> instruction: 0xf89f3000
    75f4:	10080057 	andne	r0, r8, r7, asr r0
    75f8:	02080058 	andeq	r0, r8, #88	; 0x58
    75fc:	109f3000 	addsne	r3, pc, r0
    7600:	64080058 	strvs	r0, [r8], #-88	; 0x58
    7604:	01080058 	qaddeq	r0, r8, r8
    7608:	58645c00 	stmdapl	r4!, {sl, fp, ip, lr}^
    760c:	5a720800 	bpl	1c89614 <__Stack_Size+0x1c88e14>
    7610:	00030800 	andeq	r0, r3, r0, lsl #16
    7614:	729f7f7c 	addsvc	r7, pc, #124, 30	; 0x1f0
    7618:	fc08005a 	stc2	0, cr0, [r8], {90}	; 0x5a
    761c:	0108005a 	qaddeq	r0, sl, r8
    7620:	00005c00 	andeq	r5, r0, r0, lsl #24
    7624:	00000000 	andeq	r0, r0, r0
    7628:	56c40000 	strbpl	r0, [r4], r0
    762c:	56d20800 	ldrbpl	r0, [r2], r0, lsl #16
    7630:	00030800 	andeq	r0, r3, r0, lsl #16
    7634:	d29f0174 	addsle	r0, pc, #116, 2
    7638:	e2080056 	and	r0, r8, #86	; 0x56
    763c:	03080056 	movweq	r0, #32854	; 0x8056
    7640:	9f027400 	svcls	0x00027400
    7644:	080056e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, ip, lr}
    7648:	08005700 	stmdaeq	r0, {r8, r9, sl, ip, lr}
    764c:	03740003 	cmneq	r4, #3
    7650:	0057009f 			; <UNDEFINED> instruction: 0x0057009f
    7654:	00571e08 	subseq	r1, r7, r8, lsl #28
    7658:	74000308 	strvc	r0, [r0], #-776	; 0x308
    765c:	571e9f04 	ldrpl	r9, [lr, -r4, lsl #30]
    7660:	57380800 	ldrpl	r0, [r8, -r0, lsl #16]!
    7664:	00030800 	andeq	r0, r3, r0, lsl #16
    7668:	389f0574 	ldmcc	pc, {r2, r4, r5, r6, r8, sl}	; <UNPREDICTABLE>
    766c:	50080057 	andpl	r0, r8, r7, asr r0
    7670:	03080057 	movweq	r0, #32855	; 0x8057
    7674:	9f067400 	svcls	0x00067400
    7678:	08005750 	stmdaeq	r0, {r4, r6, r8, r9, sl, ip, lr}
    767c:	08005764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip, lr}
    7680:	07740003 	ldrbeq	r0, [r4, -r3]!
    7684:	0057649f 			; <UNDEFINED> instruction: 0x0057649f
    7688:	00576a08 	subseq	r6, r7, r8, lsl #20
    768c:	74000308 	strvc	r0, [r0], #-776	; 0x308
    7690:	576a9f08 	strbpl	r9, [sl, -r8, lsl #30]!
    7694:	57880800 	strpl	r0, [r8, r0, lsl #16]
    7698:	00010800 	andeq	r0, r1, r0, lsl #16
    769c:	00000054 	andeq	r0, r0, r4, asr r0
    76a0:	00000000 	andeq	r0, r0, r0
    76a4:	0056c400 	subseq	ip, r6, r0, lsl #8
    76a8:	0056d208 	subseq	sp, r6, r8, lsl #4
    76ac:	74000908 	strvc	r0, [r0], #-2312	; 0x908
    76b0:	f7019400 			; <UNDEFINED> instruction: 0xf7019400
    76b4:	9f25f72c 	svcls	0x0025f72c
    76b8:	080056d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, ip, lr}
    76bc:	080056e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, ip, lr}
    76c0:	01740010 	cmneq	r4, r0, lsl r0
    76c4:	2cf70194 	ldfcse	f0, [r7], #592	; 0x250
    76c8:	909125f7 			; <UNDEFINED> instruction: 0x909125f7
    76cc:	2508f67d 	strcs	pc, [r8, #-1661]	; 0x67d
    76d0:	56e29f21 	strbtpl	r9, [r2], r1, lsr #30
    76d4:	57000800 	strpl	r0, [r0, -r0, lsl #16]
    76d8:	000d0800 	andeq	r0, sp, r0, lsl #16
    76dc:	01940274 	orrseq	r0, r4, r4, ror r2
    76e0:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    76e4:	212506f5 	strdcs	r0, [r5, -r5]!
    76e8:	0057009f 			; <UNDEFINED> instruction: 0x0057009f
    76ec:	00571e08 	subseq	r1, r7, r8, lsl #28
    76f0:	74001008 	strvc	r1, [r0], #-8
    76f4:	f7019403 			; <UNDEFINED> instruction: 0xf7019403
    76f8:	9125f72c 	msrls	SP_abt, ip
    76fc:	08f67d80 	ldmeq	r6!, {r7, r8, sl, fp, ip, sp, lr}^
    7700:	1e9f2125 	fmlneep	f2, f7, f5
    7704:	38080057 	stmdacc	r8, {r0, r1, r2, r4, r6}
    7708:	10080057 	andne	r0, r8, r7, asr r0
    770c:	94047400 	strls	r7, [r4], #-1024	; 0x400
    7710:	f72cf701 			; <UNDEFINED> instruction: 0xf72cf701
    7714:	7d889125 	stfvcd	f1, [r8, #148]	; 0x94
    7718:	212508f6 	strdcs	r0, [r5, -r6]!
    771c:	0057389f 			; <UNDEFINED> instruction: 0x0057389f
    7720:	00575008 	subseq	r5, r7, r8
    7724:	74000d08 	strvc	r0, [r0], #-3336	; 0xd08
    7728:	f7019405 			; <UNDEFINED> instruction: 0xf7019405
    772c:	f525f72c 			; <UNDEFINED> instruction: 0xf525f72c
    7730:	9f21250a 	svcls	0x0021250a
    7734:	08005750 	stmdaeq	r0, {r4, r6, r8, r9, sl, ip, lr}
    7738:	08005764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, ip, lr}
    773c:	0674000d 	ldrbteq	r0, [r4], -sp
    7740:	2cf70194 	ldfcse	f0, [r7], #592	; 0x250
    7744:	08f525f7 	ldmeq	r5!, {r0, r1, r2, r4, r5, r6, r7, r8, sl, sp}^
    7748:	649f2125 	ldrvs	r2, [pc], #293	; 7750 <__Stack_Size+0x6f50>
    774c:	6a080057 	bvs	2078b0 <__Stack_Size+0x2070b0>
    7750:	0d080057 	stceq	0, cr0, [r8, #-348]	; 0xfffffea4
    7754:	94077400 	strls	r7, [r7], #-1024	; 0x400
    7758:	f72cf701 			; <UNDEFINED> instruction: 0xf72cf701
    775c:	2502f525 	strcs	pc, [r2, #-1317]	; 0x525
    7760:	576a9f21 	strbpl	r9, [sl, -r1, lsr #30]!
    7764:	577e0800 	ldrbpl	r0, [lr, -r0, lsl #16]!
    7768:	000d0800 	andeq	r0, sp, r0, lsl #16
    776c:	01947f74 	orrseq	r7, r4, r4, ror pc
    7770:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    7774:	212502f5 	strdcs	r0, [r5, -r5]!
    7778:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    777c:	00000000 	andeq	r0, r0, r0
    7780:	0058ce00 	subseq	ip, r8, r0, lsl #28
    7784:	005a2808 	subseq	r2, sl, r8, lsl #16
    7788:	75000308 	strvc	r0, [r0, #-776]	; 0x308
    778c:	00007f80 	andeq	r7, r0, r0, lsl #31
    7790:	00000000 	andeq	r0, r0, r0
    7794:	58ce0000 	stmiapl	lr, {}^	; <UNPREDICTABLE>
    7798:	58e00800 	stmiapl	r0!, {fp}^
    779c:	00060800 	andeq	r0, r6, r0, lsl #16
    77a0:	51049350 	tstpl	r4, r0, asr r3
    77a4:	58e00493 	stmiapl	r0!, {r0, r1, r4, r7, sl}^
    77a8:	593a0800 	ldmdbpl	sl!, {fp}
    77ac:	000c0800 	andeq	r0, ip, r0, lsl #16
    77b0:	067d9091 			; <UNDEFINED> instruction: 0x067d9091
    77b4:	00912433 	addseq	r2, r1, r3, lsr r4
    77b8:	1ca00822 	stcne	8, cr0, [r0], #136	; 0x88
    77bc:	0800593a 	stmdaeq	r0, {r1, r3, r4, r5, r8, fp, ip, lr}
    77c0:	08005982 	stmdaeq	r0, {r1, r7, r8, fp, ip, lr}
    77c4:	9091000c 	addsls	r0, r1, ip
    77c8:	2433067d 	ldrtcs	r0, [r3], #-1661	; 0x67d
    77cc:	08220077 	stmdaeq	r2!, {r0, r1, r2, r4, r5, r6}
    77d0:	59821c80 	stmibpl	r2, {r7, sl, fp, ip}
    77d4:	5a280800 	bpl	a097dc <__Stack_Size+0xa08fdc>
    77d8:	000c0800 	andeq	r0, ip, r0, lsl #16
    77dc:	067d9091 			; <UNDEFINED> instruction: 0x067d9091
    77e0:	00912433 	addseq	r2, r1, r3, lsr r4
    77e4:	1ca00822 	stcne	8, cr0, [r0], #136	; 0x88
	...
    77f0:	080058ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip, lr}
    77f4:	0800597e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, fp, ip, lr}
    77f8:	93520006 	cmpls	r2, #6
    77fc:	04935304 	ldreq	r5, [r3], #772	; 0x304
    7800:	0800597e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, fp, ip, lr}
    7804:	08005982 	stmdaeq	r0, {r1, r7, r8, fp, ip, lr}
    7808:	0d7c000c 	ldcleq	0, cr0, [ip, #-48]!	; 0xffffffd0
    780c:	24331a3f 	ldrtcs	r1, [r3], #-2623	; 0xa3f
    7810:	08220077 	stmdaeq	r2!, {r0, r1, r2, r4, r5, r6}
    7814:	59821c80 	stmibpl	r2, {r7, sl, fp, ip}
    7818:	5a280800 	bpl	a09820 <__Stack_Size+0xa09020>
    781c:	000c0800 	andeq	r0, ip, r0, lsl #16
    7820:	1a3f0d7c 	bne	fcae18 <__Stack_Size+0xfca618>
    7824:	00912433 	addseq	r2, r1, r3, lsr r4
    7828:	1ca00822 	stcne	8, cr0, [r0], #136	; 0x88
	...
    7834:	080058ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip, lr}
    7838:	0800593e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
    783c:	087c000c 	ldmdaeq	ip!, {r2, r3}^
    7840:	24331a3f 	ldrtcs	r1, [r3], #-2623	; 0xa3f
    7844:	08220091 	stmdaeq	r2!, {r0, r4, r7}
    7848:	593e1ca8 	ldmdbpl	lr!, {r3, r5, r7, sl, fp, ip}
    784c:	59420800 	stmdbpl	r2, {fp}^
    7850:	000a0800 	andeq	r0, sl, r0, lsl #16
    7854:	24330074 	ldrtcs	r0, [r3], #-116	; 0x74
    7858:	08220091 	stmdaeq	r2!, {r0, r4, r7}
    785c:	59421ca8 	stmdbpl	r2, {r3, r5, r7, sl, fp, ip}^
    7860:	5a280800 	bpl	a09868 <__Stack_Size+0xa09068>
    7864:	000c0800 	andeq	r0, ip, r0, lsl #16
    7868:	1a3f087c 	bne	fc9a60 <__Stack_Size+0xfc9260>
    786c:	00912433 	addseq	r2, r1, r3, lsr r4
    7870:	1ca80822 	stcne	8, cr0, [r8], #136	; 0x88
	...
    787c:	080058ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip, lr}
    7880:	080058e0 	stmdaeq	r0, {r5, r6, r7, fp, ip, lr}
    7884:	00f50028 	rscseq	r0, r5, r8, lsr #32
    7888:	25f73125 	ldrbcs	r3, [r7, #293]!	; 0x125
    788c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7890:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7894:	2500f521 	strcs	pc, [r0, #-1313]	; 0x521
    7898:	2525f737 	strcs	pc, [r5, #-1847]!	; 0x737
    789c:	2500f527 	strcs	pc, [r0, #-1319]	; 0x527
    78a0:	1425f738 	strtne	pc, [r5], #-1848	; 0x738
    78a4:	40231f14 	eormi	r1, r3, r4, lsl pc
    78a8:	21251724 	teqcs	r5, r4, lsr #14
    78ac:	58e09f27 	stmiapl	r0!, {r0, r1, r2, r5, r8, r9, sl, fp, ip, pc}^
    78b0:	593a0800 	ldmdbpl	sl!, {fp}
    78b4:	004c0800 	subeq	r0, ip, r0, lsl #16
    78b8:	067d9091 			; <UNDEFINED> instruction: 0x067d9091
    78bc:	00912433 	addseq	r2, r1, r3, lsr r4
    78c0:	1ca00822 	stcne	8, cr0, [r0], #136	; 0x88
    78c4:	312508f6 	strdcc	r0, [r5, -r6]!
    78c8:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    78cc:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    78d0:	91212517 	teqls	r1, r7, lsl r5
    78d4:	33067d90 	movwcc	r7, #28048	; 0x6d90
    78d8:	22009124 	andcs	r9, r0, #36, 2
    78dc:	f61ca008 			; <UNDEFINED> instruction: 0xf61ca008
    78e0:	f7372508 			; <UNDEFINED> instruction: 0xf7372508
    78e4:	91272525 	teqls	r7, r5, lsr #10
    78e8:	33067d90 	movwcc	r7, #28048	; 0x6d90
    78ec:	22009124 	andcs	r9, r0, #36, 2
    78f0:	f61ca008 			; <UNDEFINED> instruction: 0xf61ca008
    78f4:	f7382508 			; <UNDEFINED> instruction: 0xf7382508
    78f8:	1f141425 	svcne	0x00141425
    78fc:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7900:	9f272125 	svcls	0x00272125
    7904:	0800593a 	stmdaeq	r0, {r1, r3, r4, r5, r8, fp, ip, lr}
    7908:	08005982 	stmdaeq	r0, {r1, r7, r8, fp, ip, lr}
    790c:	9091004c 	addsls	r0, r1, ip, asr #32
    7910:	2433067d 	ldrtcs	r0, [r3], #-1661	; 0x67d
    7914:	08220077 	stmdaeq	r2!, {r0, r1, r2, r4, r5, r6}
    7918:	08f61c80 	ldmeq	r6!, {r7, sl, fp, ip}^
    791c:	25f73125 	ldrbcs	r3, [r7, #293]!	; 0x125
    7920:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7924:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7928:	7d909121 	ldfvcd	f1, [r0, #132]	; 0x84
    792c:	77243306 	strvc	r3, [r4, -r6, lsl #6]!
    7930:	80082200 	andhi	r2, r8, r0, lsl #4
    7934:	2508f61c 	strcs	pc, [r8, #-1564]	; 0x61c
    7938:	2525f737 	strcs	pc, [r5, #-1847]!	; 0x737
    793c:	7d909127 	ldfvcd	f1, [r0, #156]	; 0x9c
    7940:	77243306 	strvc	r3, [r4, -r6, lsl #6]!
    7944:	80082200 	andhi	r2, r8, r0, lsl #4
    7948:	2508f61c 	strcs	pc, [r8, #-1564]	; 0x61c
    794c:	1425f738 	strtne	pc, [r5], #-1848	; 0x738
    7950:	40231f14 	eormi	r1, r3, r4, lsl pc
    7954:	21251724 	teqcs	r5, r4, lsr #14
    7958:	59829f27 	stmibpl	r2, {r0, r1, r2, r5, r8, r9, sl, fp, ip, pc}
    795c:	5a280800 	bpl	a09964 <__Stack_Size+0xa09164>
    7960:	004c0800 	subeq	r0, ip, r0, lsl #16
    7964:	067d9091 			; <UNDEFINED> instruction: 0x067d9091
    7968:	00912433 	addseq	r2, r1, r3, lsr r4
    796c:	1ca00822 	stcne	8, cr0, [r0], #136	; 0x88
    7970:	312508f6 	strdcc	r0, [r5, -r6]!
    7974:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7978:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    797c:	91212517 	teqls	r1, r7, lsl r5
    7980:	33067d90 	movwcc	r7, #28048	; 0x6d90
    7984:	22009124 	andcs	r9, r0, #36, 2
    7988:	f61ca008 			; <UNDEFINED> instruction: 0xf61ca008
    798c:	f7372508 			; <UNDEFINED> instruction: 0xf7372508
    7990:	91272525 	teqls	r7, r5, lsr #10
    7994:	33067d90 	movwcc	r7, #28048	; 0x6d90
    7998:	22009124 	andcs	r9, r0, #36, 2
    799c:	f61ca008 			; <UNDEFINED> instruction: 0xf61ca008
    79a0:	f7382508 			; <UNDEFINED> instruction: 0xf7382508
    79a4:	1f141425 	svcne	0x00141425
    79a8:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    79ac:	9f272125 	svcls	0x00272125
	...
    79b8:	080058ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip, lr}
    79bc:	0800597e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, fp, ip, lr}
    79c0:	02f50029 	rscseq	r0, r5, #41	; 0x29
    79c4:	25f74325 	ldrbcs	r4, [r7, #805]!	; 0x325
    79c8:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    79cc:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    79d0:	2502f521 	strcs	pc, [r2, #-1313]	; 0x521
    79d4:	2525f736 	strcs	pc, [r5, #-1846]!	; 0x736
    79d8:	2502f527 	strcs	pc, [r2, #-1319]	; 0x527
    79dc:	25f73d08 	ldrbcs	r3, [r7, #3336]!	; 0xd08
    79e0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    79e4:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    79e8:	7e9f2721 	cdpvc	7, 9, cr2, cr15, cr1, {1}
    79ec:	82080059 	andhi	r0, r8, #89	; 0x59
    79f0:	4d080059 	stcmi	0, cr0, [r8, #-356]	; 0xfffffe9c
    79f4:	3f0d7c00 	svccc	0x000d7c00
    79f8:	7724331a 			; <UNDEFINED> instruction: 0x7724331a
    79fc:	80082200 	andhi	r2, r8, r0, lsl #4
    7a00:	2508f61c 	strcs	pc, [r8, #-1564]	; 0x61c
    7a04:	1425f743 	strtne	pc, [r5], #-1859	; 0x743
    7a08:	40231f14 	eormi	r1, r3, r4, lsl pc
    7a0c:	21251724 	teqcs	r5, r4, lsr #14
    7a10:	1a3f0d7c 	bne	fcb008 <__Stack_Size+0xfca808>
    7a14:	00772433 	rsbseq	r2, r7, r3, lsr r4
    7a18:	1c800822 	stcne	8, cr0, [r0], {34}	; 0x22
    7a1c:	362508f6 			; <UNDEFINED> instruction: 0x362508f6
    7a20:	272525f7 			; <UNDEFINED> instruction: 0x272525f7
    7a24:	1a3f0d7c 	bne	fcb01c <__Stack_Size+0xfca81c>
    7a28:	00772433 	rsbseq	r2, r7, r3, lsr r4
    7a2c:	1c800822 	stcne	8, cr0, [r0], {34}	; 0x22
    7a30:	082508f6 	stmdaeq	r5!, {r1, r2, r4, r5, r6, r7, fp}
    7a34:	1425f73d 	strtne	pc, [r5], #-1853	; 0x73d
    7a38:	40231f14 	eormi	r1, r3, r4, lsl pc
    7a3c:	21251724 	teqcs	r5, r4, lsr #14
    7a40:	59829f27 	stmibpl	r2, {r0, r1, r2, r5, r8, r9, sl, fp, ip, pc}
    7a44:	5a280800 	bpl	a09a4c <__Stack_Size+0xa0924c>
    7a48:	004d0800 	subeq	r0, sp, r0, lsl #16
    7a4c:	1a3f0d7c 	bne	fcb044 <__Stack_Size+0xfca844>
    7a50:	00912433 	addseq	r2, r1, r3, lsr r4
    7a54:	1ca00822 	stcne	8, cr0, [r0], #136	; 0x88
    7a58:	432508f6 	teqmi	r5, #16121856	; 0xf60000
    7a5c:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7a60:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7a64:	7c212517 	cfstr32vc	mvfx2, [r1], #-92	; 0xffffffa4
    7a68:	331a3f0d 	tstcc	sl, #13, 30	; 0x34
    7a6c:	22009124 	andcs	r9, r0, #36, 2
    7a70:	f61ca008 			; <UNDEFINED> instruction: 0xf61ca008
    7a74:	f7362508 			; <UNDEFINED> instruction: 0xf7362508
    7a78:	7c272525 	cfstr32vc	mvfx2, [r7], #-148	; 0xffffff6c
    7a7c:	331a3f0d 	tstcc	sl, #13, 30	; 0x34
    7a80:	22009124 	andcs	r9, r0, #36, 2
    7a84:	f61ca008 			; <UNDEFINED> instruction: 0xf61ca008
    7a88:	3d082508 	cfstr32cc	mvfx2, [r8, #-32]	; 0xffffffe0
    7a8c:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7a90:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7a94:	27212517 			; <UNDEFINED> instruction: 0x27212517
    7a98:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7a9c:	00000000 	andeq	r0, r0, r0
    7aa0:	00581000 	subseq	r1, r8, r0
    7aa4:	00584008 	subseq	r4, r8, r8
    7aa8:	f5003208 			; <UNDEFINED> instruction: 0xf5003208
    7aac:	2208250a 	andcs	r2, r8, #41943040	; 0x2800000
    7ab0:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7ab4:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7ab8:	f5212517 			; <UNDEFINED> instruction: 0xf5212517
    7abc:	f74c250a 			; <UNDEFINED> instruction: 0xf74c250a
    7ac0:	1f141425 	svcne	0x00141425
    7ac4:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7ac8:	f5272125 			; <UNDEFINED> instruction: 0xf5272125
    7acc:	2708250a 	strcs	r2, [r8, -sl, lsl #10]
    7ad0:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7ad4:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7ad8:	27212517 			; <UNDEFINED> instruction: 0x27212517
    7adc:	0058409f 			; <UNDEFINED> instruction: 0x0058409f
    7ae0:	00584208 	subseq	r4, r8, r8, lsl #4
    7ae4:	91003b08 	tstls	r0, r8, lsl #22
    7ae8:	08f67d80 	ldmeq	r6!, {r7, r8, sl, fp, ip, sp, lr}^
    7aec:	f7220825 			; <UNDEFINED> instruction: 0xf7220825
    7af0:	1f141425 	svcne	0x00141425
    7af4:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7af8:	80912125 	addshi	r2, r1, r5, lsr #2
    7afc:	2508f67d 	strcs	pc, [r8, #-1661]	; 0x67d
    7b00:	1425f74c 	strtne	pc, [r5], #-1868	; 0x74c
    7b04:	40231f14 	eormi	r1, r3, r4, lsl pc
    7b08:	21251724 	teqcs	r5, r4, lsr #14
    7b0c:	7d809127 	stfvcd	f1, [r0, #156]	; 0x9c
    7b10:	082508f6 	stmdaeq	r5!, {r1, r2, r4, r5, r6, r7, fp}
    7b14:	1425f727 	strtne	pc, [r5], #-1831	; 0x727
    7b18:	40231f14 	eormi	r1, r3, r4, lsl pc
    7b1c:	21251724 	teqcs	r5, r4, lsr #14
    7b20:	58ce9f27 	stmiapl	lr, {r0, r1, r2, r5, r8, r9, sl, fp, ip, pc}^
    7b24:	5a8c0800 	bpl	fe309b2c <BootRAM+0xd27a2cd>
    7b28:	00320800 	eorseq	r0, r2, r0, lsl #16
    7b2c:	08250af5 	stmdaeq	r5!, {r0, r2, r4, r5, r6, r7, r9, fp}
    7b30:	1425f722 	strtne	pc, [r5], #-1826	; 0x722
    7b34:	40231f14 	eormi	r1, r3, r4, lsl pc
    7b38:	21251724 	teqcs	r5, r4, lsr #14
    7b3c:	4c250af5 	stcmi	10, cr0, [r5], #-980	; 0xfffffc2c
    7b40:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7b44:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7b48:	27212517 			; <UNDEFINED> instruction: 0x27212517
    7b4c:	08250af5 	stmdaeq	r5!, {r0, r2, r4, r5, r6, r7, r9, fp}
    7b50:	1425f727 	strtne	pc, [r5], #-1831	; 0x727
    7b54:	40231f14 	eormi	r1, r3, r4, lsl pc
    7b58:	21251724 	teqcs	r5, r4, lsr #14
    7b5c:	00009f27 	andeq	r9, r0, r7, lsr #30
    7b60:	00000000 	andeq	r0, r0, r0
    7b64:	58100000 	ldmdapl	r0, {}	; <UNPREDICTABLE>
    7b68:	58360800 	ldmdapl	r6!, {fp}
    7b6c:	00310800 	eorseq	r0, r1, r0, lsl #16
    7b70:	422508f5 	eormi	r0, r5, #16056320	; 0xf50000
    7b74:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7b78:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7b7c:	f5212517 			; <UNDEFINED> instruction: 0xf5212517
    7b80:	f73e2508 			; <UNDEFINED> instruction: 0xf73e2508
    7b84:	1f141425 	svcne	0x00141425
    7b88:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7b8c:	f5272125 			; <UNDEFINED> instruction: 0xf5272125
    7b90:	29082508 	stmdbcs	r8, {r3, r8, sl, sp}
    7b94:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7b98:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7b9c:	27212517 			; <UNDEFINED> instruction: 0x27212517
    7ba0:	0058369f 			; <UNDEFINED> instruction: 0x0058369f
    7ba4:	00584208 	subseq	r4, r8, r8, lsl #4
    7ba8:	91003a08 	tstls	r0, r8, lsl #20
    7bac:	08f67da0 	ldmeq	r6!, {r5, r7, r8, sl, fp, ip, sp, lr}^
    7bb0:	25f74225 	ldrbcs	r4, [r7, #549]!	; 0x225
    7bb4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7bb8:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7bbc:	7da09121 	stfvcd	f1, [r0, #132]!	; 0x84
    7bc0:	3e2508f6 	mcrcc	8, 1, r0, cr5, cr6, {7}
    7bc4:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7bc8:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7bcc:	27212517 			; <UNDEFINED> instruction: 0x27212517
    7bd0:	f67da091 			; <UNDEFINED> instruction: 0xf67da091
    7bd4:	29082508 	stmdbcs	r8, {r3, r8, sl, sp}
    7bd8:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7bdc:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7be0:	27212517 			; <UNDEFINED> instruction: 0x27212517
    7be4:	0058ce9f 			; <UNDEFINED> instruction: 0x0058ce9f
    7be8:	005a8808 	subseq	r8, sl, r8, lsl #16
    7bec:	f5003108 			; <UNDEFINED> instruction: 0xf5003108
    7bf0:	f7422508 			; <UNDEFINED> instruction: 0xf7422508
    7bf4:	1f141425 	svcne	0x00141425
    7bf8:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7bfc:	08f52125 	ldmeq	r5!, {r0, r2, r5, r8, sp}^
    7c00:	25f73e25 	ldrbcs	r3, [r7, #3621]!	; 0xe25
    7c04:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7c08:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7c0c:	08f52721 	ldmeq	r5!, {r0, r5, r8, r9, sl, sp}^
    7c10:	f7290825 			; <UNDEFINED> instruction: 0xf7290825
    7c14:	1f141425 	svcne	0x00141425
    7c18:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7c1c:	9f272125 	svcls	0x00272125
	...
    7c28:	08005810 	stmdaeq	r0, {r4, fp, ip, lr}
    7c2c:	0800582c 	stmdaeq	r0, {r2, r3, r5, fp, ip, lr}
    7c30:	08f50017 	ldmeq	r5!, {r0, r1, r2, r4}^
    7c34:	98912025 	ldmls	r1, {r0, r2, r5, sp}
    7c38:	2508f67d 	strcs	pc, [r8, #-1661]	; 0x67d
    7c3c:	7da0911a 	stfvcd	f1, [r0, #104]!	; 0x68
    7c40:	f52508f6 			; <UNDEFINED> instruction: 0xf52508f6
    7c44:	271a2508 	ldrcs	r2, [sl, -r8, lsl #10]
    7c48:	0058ce9f 			; <UNDEFINED> instruction: 0x0058ce9f
    7c4c:	005a8808 	subseq	r8, sl, r8, lsl #16
    7c50:	f5001708 			; <UNDEFINED> instruction: 0xf5001708
    7c54:	91202508 	teqls	r0, r8, lsl #10
    7c58:	08f67d98 	ldmeq	r6!, {r3, r4, r7, r8, sl, fp, ip, sp, lr}^
    7c5c:	a0911a25 	addsge	r1, r1, r5, lsr #20
    7c60:	2508f67d 	strcs	pc, [r8, #-1661]	; 0x67d
    7c64:	1a2508f5 	bne	94a040 <__Stack_Size+0x949840>
    7c68:	00009f27 	andeq	r9, r0, r7, lsr #30
    7c6c:	00000000 	andeq	r0, r0, r0
    7c70:	5a580000 	bpl	1607c78 <__Stack_Size+0x1607478>
    7c74:	5a6e0800 	bpl	1b89c7c <__Stack_Size+0x1b8947c>
    7c78:	00060800 	andeq	r0, r6, r0, lsl #16
    7c7c:	51049350 	tstpl	r4, r0, asr r3
    7c80:	00000493 	muleq	r0, r3, r4
    7c84:	00000000 	andeq	r0, r0, r0
    7c88:	58100000 	ldmdapl	r0, {}	; <UNPREDICTABLE>
    7c8c:	58300800 	ldmdapl	r0!, {fp}
    7c90:	00200800 	eoreq	r0, r0, r0, lsl #16
    7c94:	f67d8891 			; <UNDEFINED> instruction: 0xf67d8891
    7c98:	80912508 	addshi	r2, r1, r8, lsl #10
    7c9c:	2508f67d 	strcs	pc, [r8, #-1661]	; 0x67d
    7ca0:	250af527 	strcs	pc, [sl, #-1319]	; 0x527
    7ca4:	7d88911a 	stfvcd	f1, [r8, #104]	; 0x68
    7ca8:	912508f6 	strdls	r0, [r5, -r6]!
    7cac:	08f67d80 	ldmeq	r6!, {r7, r8, sl, fp, ip, sp, lr}^
    7cb0:	9f271a25 	svcls	0x00271a25
    7cb4:	08005a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, ip, lr}
    7cb8:	08005a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, lr}
    7cbc:	88910020 	ldmhi	r1, {r5}
    7cc0:	2508f67d 	strcs	pc, [r8, #-1661]	; 0x67d
    7cc4:	f67d8091 			; <UNDEFINED> instruction: 0xf67d8091
    7cc8:	f5272508 			; <UNDEFINED> instruction: 0xf5272508
    7ccc:	911a250a 	tstls	sl, sl, lsl #10
    7cd0:	08f67d88 	ldmeq	r6!, {r3, r7, r8, sl, fp, ip, sp, lr}^
    7cd4:	7d809125 	stfvcd	f1, [r0, #148]	; 0x94
    7cd8:	1a2508f6 	bne	94a0b8 <__Stack_Size+0x9498b8>
    7cdc:	00009f27 	andeq	r9, r0, r7, lsr #30
    7ce0:	00000000 	andeq	r0, r0, r0
    7ce4:	58100000 	ldmdapl	r0, {}	; <UNPREDICTABLE>
    7ce8:	58140800 	ldmdapl	r4, {fp}
    7cec:	00060800 	andeq	r0, r6, r0, lsl #16
    7cf0:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    7cf4:	5a620493 	bpl	1888f48 <__Stack_Size+0x1888748>
    7cf8:	5a7c0800 	bpl	1f09d00 <__Stack_Size+0x1f09500>
    7cfc:	00060800 	andeq	r0, r6, r0, lsl #16
    7d00:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    7d04:	00000493 	muleq	r0, r3, r4
    7d08:	00000000 	andeq	r0, r0, r0
    7d0c:	58100000 	ldmdapl	r0, {}	; <UNPREDICTABLE>
    7d10:	58420800 	stmdapl	r2, {fp}^
    7d14:	00020800 	andeq	r0, r2, r0, lsl #16
    7d18:	58ce9f42 	stmiapl	lr, {r1, r6, r8, r9, sl, fp, ip, pc}^
    7d1c:	5b480800 	blpl	1209d24 <__Stack_Size+0x1209524>
    7d20:	00020800 	andeq	r0, r2, r0, lsl #16
    7d24:	00009f42 	andeq	r9, r0, r2, asr #30
    7d28:	00000000 	andeq	r0, r0, r0
    7d2c:	58100000 	ldmdapl	r0, {}	; <UNPREDICTABLE>
    7d30:	58360800 	ldmdapl	r6!, {fp}
    7d34:	00060800 	andeq	r0, r6, r0, lsl #16
    7d38:	59049358 	stmdbpl	r4, {r3, r4, r6, r8, r9, ip, pc}
    7d3c:	58360493 	ldmdapl	r6!, {r0, r1, r4, r7, sl}
    7d40:	58420800 	stmdapl	r2, {fp}^
    7d44:	00030800 	andeq	r0, r3, r0, lsl #16
    7d48:	ce7da091 	mrcgt	0, 3, sl, cr13, cr1, {4}
    7d4c:	88080058 	stmdahi	r8, {r3, r4, r6}
    7d50:	0608005a 			; <UNDEFINED> instruction: 0x0608005a
    7d54:	04935800 	ldreq	r5, [r3], #2048	; 0x800
    7d58:	00049359 	andeq	r9, r4, r9, asr r3
    7d5c:	00000000 	andeq	r0, r0, r0
    7d60:	10000000 	andne	r0, r0, r0
    7d64:	42080058 	andmi	r0, r8, #88	; 0x58
    7d68:	02080058 	andeq	r0, r8, #88	; 0x58
    7d6c:	ce9f3e00 	cdpgt	14, 9, cr3, cr15, cr0, {0}
    7d70:	48080058 	stmdami	r8, {r3, r4, r6}
    7d74:	0208005b 	andeq	r0, r8, #91	; 0x5b
    7d78:	009f3e00 	addseq	r3, pc, r0, lsl #28
    7d7c:	00000000 	andeq	r0, r0, r0
    7d80:	10000000 	andne	r0, r0, r0
    7d84:	42080058 	andmi	r0, r8, #88	; 0x58
    7d88:	03080058 	movweq	r0, #32856	; 0x8058
    7d8c:	9f290800 	svcls	0x00290800
    7d90:	080058ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip, lr}
    7d94:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
    7d98:	29080003 	stmdbcs	r8, {r0, r1}
    7d9c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7da0:	00000000 	andeq	r0, r0, r0
    7da4:	00581000 	subseq	r1, r8, r0
    7da8:	00584208 	subseq	r4, r8, r8, lsl #4
    7dac:	31000208 	tstcc	r0, r8, lsl #4
    7db0:	0058ce9f 			; <UNDEFINED> instruction: 0x0058ce9f
    7db4:	005b4808 	subseq	r4, fp, r8, lsl #16
    7db8:	31000208 	tstcc	r0, r8, lsl #4
    7dbc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7dc0:	00000000 	andeq	r0, r0, r0
    7dc4:	00581000 	subseq	r1, r8, r0
    7dc8:	00584208 	subseq	r4, r8, r8, lsl #4
    7dcc:	38000208 	stmdacc	r0, {r3, r9}
    7dd0:	0058ce9f 			; <UNDEFINED> instruction: 0x0058ce9f
    7dd4:	005b4808 	subseq	r4, fp, r8, lsl #16
    7dd8:	38000208 	stmdacc	r0, {r3, r9}
    7ddc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7de0:	00000000 	andeq	r0, r0, r0
    7de4:	00581000 	subseq	r1, r8, r0
    7de8:	00584208 	subseq	r4, r8, r8, lsl #4
    7dec:	43000208 	movwmi	r0, #520	; 0x208
    7df0:	0058ce9f 			; <UNDEFINED> instruction: 0x0058ce9f
    7df4:	005b4808 	subseq	r4, fp, r8, lsl #16
    7df8:	43000208 	movwmi	r0, #520	; 0x208
    7dfc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7e00:	00000000 	andeq	r0, r0, r0
    7e04:	00581000 	subseq	r1, r8, r0
    7e08:	00584208 	subseq	r4, r8, r8, lsl #4
    7e0c:	08000308 	stmdaeq	r0, {r3, r8, r9}
    7e10:	58ce9f22 	stmiapl	lr, {r1, r5, r8, r9, sl, fp, ip, pc}^
    7e14:	5b480800 	blpl	1209e1c <__Stack_Size+0x120961c>
    7e18:	00030800 	andeq	r0, r3, r0, lsl #16
    7e1c:	009f2208 	addseq	r2, pc, r8, lsl #4
    7e20:	00000000 	andeq	r0, r0, r0
    7e24:	10000000 	andne	r0, r0, r0
    7e28:	40080058 	andmi	r0, r8, r8, asr r0
    7e2c:	06080058 			; <UNDEFINED> instruction: 0x06080058
    7e30:	04935a00 	ldreq	r5, [r3], #2560	; 0xa00
    7e34:	4004935b 	andmi	r9, r4, fp, asr r3
    7e38:	42080058 	andmi	r0, r8, #88	; 0x58
    7e3c:	03080058 	movweq	r0, #32856	; 0x8058
    7e40:	7d809100 	stfvcd	f1, [r0]
    7e44:	080058ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip, lr}
    7e48:	08005a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, lr}
    7e4c:	935a0006 	cmpls	sl, #6
    7e50:	04935b04 	ldreq	r5, [r3], #2820	; 0xb04
	...
    7e5c:	08005810 	stmdaeq	r0, {r4, fp, ip, lr}
    7e60:	08005842 	stmdaeq	r0, {r1, r6, fp, ip, lr}
    7e64:	9f4c0002 	svcls	0x004c0002
    7e68:	080058ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip, lr}
    7e6c:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
    7e70:	9f4c0002 	svcls	0x004c0002
	...
    7e7c:	08005810 	stmdaeq	r0, {r4, fp, ip, lr}
    7e80:	08005842 	stmdaeq	r0, {r1, r6, fp, ip, lr}
    7e84:	3d080003 	stccc	0, cr0, [r8, #-12]
    7e88:	0058ce9f 			; <UNDEFINED> instruction: 0x0058ce9f
    7e8c:	005b4808 	subseq	r4, fp, r8, lsl #16
    7e90:	08000308 	stmdaeq	r0, {r3, r8, r9}
    7e94:	00009f3d 	andeq	r9, r0, sp, lsr pc
    7e98:	00000000 	andeq	r0, r0, r0
    7e9c:	58100000 	ldmdapl	r0, {}	; <UNPREDICTABLE>
    7ea0:	58420800 	stmdapl	r2, {fp}^
    7ea4:	00030800 	andeq	r0, r3, r0, lsl #16
    7ea8:	ce9f2708 	cdpgt	7, 9, cr2, cr15, cr8, {0}
    7eac:	48080058 	stmdami	r8, {r3, r4, r6}
    7eb0:	0308005b 	movweq	r0, #32859	; 0x805b
    7eb4:	9f270800 	svcls	0x00270800
	...
    7ec0:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
    7ec4:	08005b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip, lr}
    7ec8:	58500001 	ldmdapl	r0, {r0}^
    7ecc:	d008005b 	andle	r0, r8, fp, asr r0
    7ed0:	0108005b 	qaddeq	r0, fp, r8
    7ed4:	00005a00 	andeq	r5, r0, r0, lsl #20
    7ed8:	00000000 	andeq	r0, r0, r0
    7edc:	5b480000 	blpl	1207ee4 <__Stack_Size+0x12076e4>
    7ee0:	5b5c0800 	blpl	1709ee8 <__Stack_Size+0x17096e8>
    7ee4:	00010800 	andeq	r0, r1, r0, lsl #16
    7ee8:	005b5c51 	subseq	r5, fp, r1, asr ip
    7eec:	005bd008 	subseq	sp, fp, r8
    7ef0:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    7efc:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
    7f00:	08005b5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, fp, ip, lr}
    7f04:	5a520001 	bpl	1487f10 <__Stack_Size+0x1487710>
    7f08:	6e08005b 	mcrvs	0, 0, r0, cr8, cr11, {2}
    7f0c:	0108005b 	qaddeq	r0, fp, r8
    7f10:	5b6e5400 	blpl	1b9cf18 <__Stack_Size+0x1b9c718>
    7f14:	5ba40800 	blpl	fe909f1c <BootRAM+0xd87a6bd>
    7f18:	00040800 	andeq	r0, r4, r0, lsl #16
    7f1c:	9f5201f3 	svcls	0x005201f3
    7f20:	08005ba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, ip, lr}
    7f24:	08005bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, ip, lr}
    7f28:	00540001 	subseq	r0, r4, r1
    7f2c:	00000000 	andeq	r0, r0, r0
    7f30:	60000000 	andvs	r0, r0, r0
    7f34:	6408005b 	strvs	r0, [r8], #-91	; 0x5b
    7f38:	0608005b 			; <UNDEFINED> instruction: 0x0608005b
    7f3c:	08007400 	stmdaeq	r0, {sl, ip, sp, lr}
    7f40:	649f1a7f 	ldrvs	r1, [pc], #2687	; 7f48 <__Stack_Size+0x7748>
    7f44:	7008005b 	andvc	r0, r8, fp, asr r0
    7f48:	0108005b 	qaddeq	r0, fp, r8
    7f4c:	5b705600 	blpl	1c1d754 <__Stack_Size+0x1c1cf54>
    7f50:	5ba40800 	blpl	fe909f58 <BootRAM+0xd87a6f9>
    7f54:	00070800 	andeq	r0, r7, r0, lsl #16
    7f58:	085201f3 	ldmdaeq	r2, {r0, r1, r4, r5, r6, r7, r8}^
    7f5c:	a49f1a7f 	ldrge	r1, [pc], #2687	; 7f64 <__Stack_Size+0x7764>
    7f60:	d008005b 	andle	r0, r8, fp, asr r0
    7f64:	0108005b 	qaddeq	r0, fp, r8
    7f68:	00005600 	andeq	r5, r0, r0, lsl #12
    7f6c:	00000000 	andeq	r0, r0, r0
    7f70:	5b6c0000 	blpl	1b07f78 <__Stack_Size+0x1b07778>
    7f74:	5b720800 	blpl	1c89f7c <__Stack_Size+0x1c8977c>
    7f78:	00070800 	andeq	r0, r7, r0, lsl #16
    7f7c:	33f70072 	mvnscc	r0, #114	; 0x72
    7f80:	8a9f25f7 	bhi	fe7d1764 <BootRAM+0xd741f05>
    7f84:	a408005b 	strge	r0, [r8], #-91	; 0x5b
    7f88:	0a08005b 	beq	2080fc <__Stack_Size+0x2078fc>
    7f8c:	00089e00 	andeq	r9, r8, r0, lsl #28
	...
    7f9c:	6c000000 	stcvs	0, cr0, [r0], {-0}
    7fa0:	7208005b 	andvc	r0, r8, #91	; 0x5b
    7fa4:	0308005b 	movweq	r0, #32859	; 0x805b
    7fa8:	9f5e9100 	svcls	0x005e9100
    7fac:	08005b72 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, fp, ip, lr}
    7fb0:	08005b86 	stmdaeq	r0, {r1, r2, r7, r8, r9, fp, ip, lr}
    7fb4:	5c910003 	ldcpl	0, cr0, [r1], {3}
    7fb8:	005b869f 			; <UNDEFINED> instruction: 0x005b869f
    7fbc:	005b8a08 	subseq	r8, fp, r8, lsl #20
    7fc0:	91000308 	tstls	r0, r8, lsl #6
    7fc4:	5b8a9f5b 	blpl	fe2afd38 <BootRAM+0xd2204d9>
    7fc8:	5b8e0800 	blpl	fe389fd0 <BootRAM+0xd2fa771>
    7fcc:	00030800 	andeq	r0, r3, r0, lsl #16
    7fd0:	8e9f5a91 	mrchi	10, 4, r5, cr15, cr1, {4}
    7fd4:	9208005b 	andls	r0, r8, #91	; 0x5b
    7fd8:	0308005b 	movweq	r0, #32859	; 0x805b
    7fdc:	9f599100 	svcls	0x00599100
    7fe0:	08005b92 	stmdaeq	r0, {r1, r4, r7, r8, r9, fp, ip, lr}
    7fe4:	08005b96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, fp, ip, lr}
    7fe8:	58910003 	ldmpl	r1, {r0, r1}
    7fec:	005b969f 			; <UNDEFINED> instruction: 0x005b969f
    7ff0:	005ba408 	subseq	sl, fp, r8, lsl #8
    7ff4:	91000308 	tstls	r0, r8, lsl #6
    7ff8:	00009f57 	andeq	r9, r0, r7, asr pc
    7ffc:	00000000 	andeq	r0, r0, r0
    8000:	5bd00000 	blpl	ff408008 <BootRAM+0xe3787a9>
    8004:	5bea0800 	blpl	ffa8a00c <BootRAM+0xe9fa7ad>
    8008:	00010800 	andeq	r0, r1, r0, lsl #16
    800c:	005bea50 	subseq	lr, fp, r0, asr sl
    8010:	005e6608 	subseq	r6, lr, r8, lsl #12
    8014:	91000208 	tstls	r0, r8, lsl #4
    8018:	00000040 	andeq	r0, r0, r0, asr #32
    801c:	00000000 	andeq	r0, r0, r0
    8020:	005bd000 	subseq	sp, fp, r0
    8024:	005be208 	subseq	lr, fp, r8, lsl #4
    8028:	51000108 	tstpl	r0, r8, lsl #2
    802c:	08005be2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, fp, ip, lr}
    8030:	08005c20 	stmdaeq	r0, {r5, sl, fp, ip, lr}
    8034:	ac910003 	ldcge	0, cr0, [r1], {3}
    8038:	005c207f 	subseq	r2, ip, pc, ror r0
    803c:	005cb608 	subseq	fp, ip, r8, lsl #12
    8040:	51000108 	tstpl	r0, r8, lsl #2
    8044:	08005cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp, ip, lr}
    8048:	08005db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, ip, lr}
    804c:	ac910003 	ldcge	0, cr0, [r1], {3}
    8050:	005db87f 	subseq	fp, sp, pc, ror r8
    8054:	005dbe08 	subseq	fp, sp, r8, lsl #28
    8058:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    8064:	08005bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, ip, lr}
    8068:	08005bee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
    806c:	ee520001 	cdp	0, 5, cr0, cr2, cr1, {0}
    8070:	f208005b 	vqadd.s8	q0, q4, <illegal reg q5.5>
    8074:	0408005b 	streq	r0, [r8], #-91	; 0x5b
    8078:	5201f300 	andpl	pc, r1, #0, 6
    807c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8080:	00000000 	andeq	r0, r0, r0
    8084:	005bd000 	subseq	sp, fp, r0
    8088:	005bf008 	subseq	pc, fp, r8
    808c:	53000108 	movwpl	r0, #264	; 0x108
    8090:	08005bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp, ip, lr}
    8094:	08005bf6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, fp, ip, lr}
    8098:	f6510001 			; <UNDEFINED> instruction: 0xf6510001
    809c:	2008005b 	andcs	r0, r8, fp, asr r0
    80a0:	0308005c 	movweq	r0, #32860	; 0x805c
    80a4:	7fa49100 	svcvc	0x00a49100
    80a8:	08005cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp, ip, lr}
    80ac:	08005cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, ip, lr}
    80b0:	f0510001 			; <UNDEFINED> instruction: 0xf0510001
    80b4:	9e08005c 	mcrls	0, 0, r0, cr8, cr12, {2}
    80b8:	0308005d 	movweq	r0, #32861	; 0x805d
    80bc:	7fa49100 	svcvc	0x00a49100
    80c0:	08005d9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, sl, fp, ip, lr}
    80c4:	08005dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp, ip, lr}
    80c8:	8008001b 	andhi	r0, r8, fp, lsl r0
    80cc:	1c5201f3 	ldfnee	f0, [r2], {243}	; 0xf3
    80d0:	244b4012 	strbcs	r4, [fp], #-18
    80d4:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    80d8:	4b401416 	blmi	100d138 <__Stack_Size+0x100c938>
    80dc:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    80e0:	13160001 	tstne	r6, #1
    80e4:	005dac9f 			; <UNDEFINED> instruction: 0x005dac9f
    80e8:	005dbe08 	subseq	fp, sp, r8, lsl #28
    80ec:	91000308 	tstls	r0, r8, lsl #6
    80f0:	00007fa4 	andeq	r7, r0, r4, lsr #31
    80f4:	00000000 	andeq	r0, r0, r0
    80f8:	5da80000 	stcpl	0, cr0, [r8]
    80fc:	5dab0800 	stcpl	8, cr0, [fp]
    8100:	00010800 	andeq	r0, r1, r0, lsl #16
    8104:	005dab5c 	subseq	sl, sp, ip, asr fp
    8108:	005dbc08 	subseq	fp, sp, r8, lsl #24
    810c:	91000708 	tstls	r0, r8, lsl #14
    8110:	23067fa8 	movwcs	r7, #28584	; 0x6fa8
    8114:	00009f01 	andeq	r9, r0, r1, lsl #30
    8118:	00000000 	andeq	r0, r0, r0
    811c:	5c2a0000 	stcpl	0, cr0, [sl], #-0
    8120:	5c320800 	ldcpl	8, cr0, [r2], #-0
    8124:	00060800 	andeq	r0, r6, r0, lsl #16
    8128:	53049352 	movwpl	r9, #17234	; 0x4352
    812c:	5c320493 	cfldrspl	mvf0, [r2], #-588	; 0xfffffdb4
    8130:	5c3a0800 	ldcpl	8, cr0, [sl], #-0
    8134:	00040800 	andeq	r0, r4, r0, lsl #16
    8138:	067fb891 			; <UNDEFINED> instruction: 0x067fb891
    813c:	08005c3a 	stmdaeq	r0, {r1, r3, r4, r5, sl, fp, ip, lr}
    8140:	08005c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, ip, lr}
    8144:	93520006 	cmpls	r2, #6
    8148:	04935304 	ldreq	r5, [r3], #772	; 0x304
    814c:	08005c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, ip, lr}
    8150:	08005c62 	stmdaeq	r0, {r1, r5, r6, sl, fp, ip, lr}
    8154:	935a0006 	cmpls	sl, #6
    8158:	04935b04 	ldreq	r5, [r3], #2820	; 0xb04
    815c:	08005c62 	stmdaeq	r0, {r1, r5, r6, sl, fp, ip, lr}
    8160:	08005c68 	stmdaeq	r0, {r3, r5, r6, sl, fp, ip, lr}
    8164:	93540006 	cmpls	r4, #6
    8168:	04935504 	ldreq	r5, [r3], #1284	; 0x504
    816c:	08005c68 	stmdaeq	r0, {r3, r5, r6, sl, fp, ip, lr}
    8170:	08005c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip, lr}
    8174:	93560006 	cmpls	r6, #6
    8178:	04935704 	ldreq	r5, [r3], #1796	; 0x704
    817c:	08005c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip, lr}
    8180:	08005c98 	stmdaeq	r0, {r3, r4, r7, sl, fp, ip, lr}
    8184:	93580006 	cmpls	r8, #6
    8188:	04935904 	ldreq	r5, [r3], #2308	; 0x904
	...
    8194:	08005c2a 	stmdaeq	r0, {r1, r3, r5, sl, fp, ip, lr}
    8198:	08005c3a 	stmdaeq	r0, {r1, r3, r4, r5, sl, fp, ip, lr}
    819c:	06710003 	ldrbteq	r0, [r1], -r3
    81a0:	005c3a9f 			; <UNDEFINED> instruction: 0x005c3a9f
    81a4:	005c5c08 	subseq	r5, ip, r8, lsl #24
    81a8:	71000308 	tstvc	r0, r8, lsl #6
    81ac:	5c5c9f05 	mrrcpl	15, 0, r9, ip, cr5
    81b0:	5c620800 	stclpl	8, cr0, [r2], #-0
    81b4:	00030800 	andeq	r0, r3, r0, lsl #16
    81b8:	629f0371 	addsvs	r0, pc, #-1006632959	; 0xc4000001
    81bc:	6808005c 	stmdavs	r8, {r2, r3, r4, r6}
    81c0:	0308005c 	movweq	r0, #32860	; 0x805c
    81c4:	9f027100 	svcls	0x00027100
    81c8:	08005c68 	stmdaeq	r0, {r3, r5, r6, sl, fp, ip, lr}
    81cc:	08005c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip, lr}
    81d0:	01710003 	cmneq	r1, r3
    81d4:	005c749f 			; <UNDEFINED> instruction: 0x005c749f
    81d8:	005c9808 	subseq	r9, ip, r8, lsl #16
    81dc:	51000108 	tstpl	r0, r8, lsl #2
    81e0:	08005c98 	stmdaeq	r0, {r3, r4, r7, sl, fp, ip, lr}
    81e4:	08005caa 	stmdaeq	r0, {r1, r3, r5, r7, sl, fp, ip, lr}
    81e8:	7f710003 	svcvc	0x00710003
    81ec:	005caa9f 			; <UNDEFINED> instruction: 0x005caa9f
    81f0:	005cb608 	subseq	fp, ip, r8, lsl #12
    81f4:	71000308 	tstvc	r0, r8, lsl #6
    81f8:	00009f77 	andeq	r9, r0, r7, ror pc
    81fc:	00000000 	andeq	r0, r0, r0
    8200:	5da80000 	stcpl	0, cr0, [r8]
    8204:	5dab0800 	stcpl	8, cr0, [fp]
    8208:	00010800 	andeq	r0, r1, r0, lsl #16
    820c:	00000052 	andeq	r0, r0, r2, asr r0
    8210:	00000000 	andeq	r0, r0, r0
    8214:	005da800 	subseq	sl, sp, r0, lsl #16
    8218:	005dbe08 	subseq	fp, sp, r8, lsl #28
    821c:	91000308 	tstls	r0, r8, lsl #6
    8220:	00009f47 	andeq	r9, r0, r7, asr #30
    8224:	00000000 	andeq	r0, r0, r0
    8228:	5dce0000 	stclpl	0, cr0, [lr]
    822c:	5de00800 	stclpl	8, cr0, [r0]
    8230:	00060800 	andeq	r0, r6, r0, lsl #16
    8234:	51049350 	tstpl	r4, r0, asr r3
    8238:	5de00493 	cfstrdpl	mvd0, [r0, #588]!	; 0x24c
    823c:	5de80800 	stclpl	8, cr0, [r8]
    8240:	00060800 	andeq	r0, r6, r0, lsl #16
    8244:	5b04935a 	blpl	12cfb4 <__Stack_Size+0x12c7b4>
    8248:	5de80493 	cfstrdpl	mvd0, [r8, #588]!	; 0x24c
    824c:	5df40800 	ldclpl	8, cr0, [r4]
    8250:	00060800 	andeq	r0, r6, r0, lsl #16
    8254:	59049358 	stmdbpl	r4, {r3, r4, r6, r8, r9, ip, pc}
    8258:	5df40493 	cfldrdpl	mvd0, [r4, #588]!	; 0x24c
    825c:	5dfc0800 	ldclpl	8, cr0, [ip]
    8260:	00060800 	andeq	r0, r6, r0, lsl #16
    8264:	57049356 	smlsdpl	r4, r6, r3, r9
    8268:	5dfc0493 	cfldrdpl	mvd0, [ip, #588]!	; 0x24c
    826c:	5e040800 	cdppl	8, 0, cr0, cr4, cr0, {0}
    8270:	00060800 	andeq	r0, r6, r0, lsl #16
    8274:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    8278:	5e040493 	mcrpl	4, 0, r0, cr4, cr3, {4}
    827c:	5e320800 	cdppl	8, 3, cr0, cr2, cr0, {0}
    8280:	00060800 	andeq	r0, r6, r0, lsl #16
    8284:	51049350 	tstpl	r4, r0, asr r3
    8288:	5e3c0493 	mrcpl	4, 1, r0, cr12, cr3, {4}
    828c:	5e660800 	cdppl	8, 6, cr0, cr6, cr0, {0}
    8290:	000b0800 	andeq	r0, fp, r0, lsl #16
    8294:	f67f8891 			; <UNDEFINED> instruction: 0xf67f8891
    8298:	f7382508 			; <UNDEFINED> instruction: 0xf7382508
    829c:	009f2525 	addseq	r2, pc, r5, lsr #10
    82a0:	00000000 	andeq	r0, r0, r0
    82a4:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    82a8:	e008005d 	and	r0, r8, sp, asr r0
    82ac:	0308005d 	movweq	r0, #32861	; 0x805d
    82b0:	9f4e9100 	svcls	0x004e9100
    82b4:	08005de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, ip, lr}
    82b8:	08005de8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp, ip, lr}
    82bc:	4d910003 	ldcmi	0, cr0, [r1, #12]
    82c0:	005de89f 			; <UNDEFINED> instruction: 0x005de89f
    82c4:	005df408 	subseq	pc, sp, r8, lsl #8
    82c8:	91000308 	tstls	r0, r8, lsl #6
    82cc:	5df49f4c 	ldclpl	15, cr9, [r4, #304]!	; 0x130
    82d0:	5dfc0800 	ldclpl	8, cr0, [ip]
    82d4:	00030800 	andeq	r0, r3, r0, lsl #16
    82d8:	fc9f4b91 	ldc2	11, cr4, [pc], {145}	; 0x91
    82dc:	0408005d 	streq	r0, [r8], #-93	; 0x5d
    82e0:	0308005e 	movweq	r0, #32862	; 0x805e
    82e4:	9f4a9100 	svcls	0x004a9100
    82e8:	08005e04 	stmdaeq	r0, {r2, r9, sl, fp, ip, lr}
    82ec:	08005e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, ip, lr}
    82f0:	49910003 	ldmibmi	r1, {r0, r1}
    82f4:	005e3c9f 			; <UNDEFINED> instruction: 0x005e3c9f
    82f8:	005e6608 	subseq	r6, lr, r8, lsl #12
    82fc:	91000308 	tstls	r0, r8, lsl #6
    8300:	00009f47 	andeq	r9, r0, r7, asr #30
	...
    8310:	00010000 	andeq	r0, r1, r0
    8314:	00000050 	andeq	r0, r0, r0, asr r0
    8318:	00000000 	andeq	r0, r0, r0
    831c:	f3000400 	vshl.u8	d0, d0, d0
    8320:	009f5001 	addseq	r5, pc, r1
    8324:	00000000 	andeq	r0, r0, r0
    8328:	01000000 	mrseq	r0, (UNDEF: 0)
    832c:	00005000 	andeq	r5, r0, r0
	...
    833c:	00010000 	andeq	r0, r1, r0
    8340:	00000050 	andeq	r0, r0, r0, asr r0
    8344:	00000000 	andeq	r0, r0, r0
    8348:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    8354:	00500001 	subseq	r0, r0, r1
    8358:	00000000 	andeq	r0, r0, r0
    835c:	01000000 	mrseq	r0, (UNDEF: 0)
    8360:	00005700 	andeq	r5, r0, r0, lsl #14
    8364:	00000000 	andeq	r0, r0, r0
    8368:	00010000 	andeq	r0, r1, r0
    836c:	00000050 	andeq	r0, r0, r0, asr r0
    8370:	00000000 	andeq	r0, r0, r0
    8374:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    8380:	00500001 	subseq	r0, r0, r1
    8384:	00000000 	andeq	r0, r0, r0
    8388:	01000000 	mrseq	r0, (UNDEF: 0)
    838c:	00005700 	andeq	r5, r0, r0, lsl #14
    8390:	00000000 	andeq	r0, r0, r0
    8394:	00010000 	andeq	r0, r1, r0
    8398:	00000050 	andeq	r0, r0, r0, asr r0
    839c:	00000000 	andeq	r0, r0, r0
    83a0:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    83b4:	00510001 	subseq	r0, r1, r1
    83b8:	00000000 	andeq	r0, r0, r0
    83bc:	01000000 	mrseq	r0, (UNDEF: 0)
    83c0:	00005a00 	andeq	r5, r0, r0, lsl #20
    83c4:	00000000 	andeq	r0, r0, r0
    83c8:	00010000 	andeq	r0, r1, r0
    83cc:	00000051 	andeq	r0, r0, r1, asr r0
    83d0:	00000000 	andeq	r0, r0, r0
    83d4:	5a000100 	bpl	87dc <__Stack_Size+0x7fdc>
	...
    83e0:	00510001 	subseq	r0, r1, r1
    83e4:	00000000 	andeq	r0, r0, r0
    83e8:	01000000 	mrseq	r0, (UNDEF: 0)
    83ec:	00005a00 	andeq	r5, r0, r0, lsl #20
    83f0:	00000000 	andeq	r0, r0, r0
    83f4:	00010000 	andeq	r0, r1, r0
    83f8:	00000051 	andeq	r0, r0, r1, asr r0
    83fc:	00000000 	andeq	r0, r0, r0
    8400:	5a000100 	bpl	8808 <__Stack_Size+0x8008>
	...
    840c:	00510001 	subseq	r0, r1, r1
	...
    841c:	01000000 	mrseq	r0, (UNDEF: 0)
    8420:	00005200 	andeq	r5, r0, r0, lsl #4
    8424:	00000000 	andeq	r0, r0, r0
    8428:	00010000 	andeq	r0, r1, r0
    842c:	00000056 	andeq	r0, r0, r6, asr r0
	...
    843c:	53000100 	movwpl	r0, #256	; 0x100
	...
    8448:	00550001 	subseq	r0, r5, r1
	...
    8458:	01000000 	mrseq	r0, (UNDEF: 0)
    845c:	00005000 	andeq	r5, r0, r0
    8460:	00000000 	andeq	r0, r0, r0
    8464:	00010000 	andeq	r0, r1, r0
    8468:	00000058 	andeq	r0, r0, r8, asr r0
    846c:	00000000 	andeq	r0, r0, r0
    8470:	5b000100 	blpl	8878 <__Stack_Size+0x8078>
	...
    847c:	00500001 	subseq	r0, r0, r1
    8480:	00000000 	andeq	r0, r0, r0
    8484:	01000000 	mrseq	r0, (UNDEF: 0)
    8488:	00005b00 	andeq	r5, r0, r0, lsl #22
    848c:	00000000 	andeq	r0, r0, r0
    8490:	00010000 	andeq	r0, r1, r0
    8494:	0000005b 	andeq	r0, r0, fp, asr r0
    8498:	00000000 	andeq	r0, r0, r0
    849c:	59000100 	stmdbpl	r0, {r8}
	...
    84a8:	00500001 	subseq	r0, r0, r1
    84ac:	00000000 	andeq	r0, r0, r0
    84b0:	01000000 	mrseq	r0, (UNDEF: 0)
    84b4:	00005900 	andeq	r5, r0, r0, lsl #18
    84b8:	00000000 	andeq	r0, r0, r0
    84bc:	00010000 	andeq	r0, r1, r0
    84c0:	00000054 	andeq	r0, r0, r4, asr r0
    84c4:	00000000 	andeq	r0, r0, r0
    84c8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    84d4:	00540001 	subseq	r0, r4, r1
    84d8:	00000000 	andeq	r0, r0, r0
    84dc:	01000000 	mrseq	r0, (UNDEF: 0)
    84e0:	00005800 	andeq	r5, r0, r0, lsl #16
    84e4:	00000000 	andeq	r0, r0, r0
    84e8:	00010000 	andeq	r0, r1, r0
    84ec:	00000050 	andeq	r0, r0, r0, asr r0
    84f0:	00000000 	andeq	r0, r0, r0
    84f4:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    8508:	00520001 	subseq	r0, r2, r1
    850c:	00000000 	andeq	r0, r0, r0
    8510:	01000000 	mrseq	r0, (UNDEF: 0)
    8514:	00005600 	andeq	r5, r0, r0, lsl #12
    8518:	00000000 	andeq	r0, r0, r0
    851c:	00010000 	andeq	r0, r1, r0
    8520:	00000054 	andeq	r0, r0, r4, asr r0
    8524:	00000000 	andeq	r0, r0, r0
    8528:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    8534:	00540001 	subseq	r0, r4, r1
    8538:	00000000 	andeq	r0, r0, r0
    853c:	01000000 	mrseq	r0, (UNDEF: 0)
    8540:	00005800 	andeq	r5, r0, r0, lsl #16
    8544:	00000000 	andeq	r0, r0, r0
    8548:	00010000 	andeq	r0, r1, r0
    854c:	00000056 	andeq	r0, r0, r6, asr r0
    8550:	00000000 	andeq	r0, r0, r0
    8554:	58000100 	stmdapl	r0, {r8}
	...
    8560:	00590001 	subseq	r0, r9, r1
    8564:	00000000 	andeq	r0, r0, r0
    8568:	01000000 	mrseq	r0, (UNDEF: 0)
    856c:	00005600 	andeq	r5, r0, r0, lsl #12
    8570:	00000000 	andeq	r0, r0, r0
    8574:	00010000 	andeq	r0, r1, r0
    8578:	00000059 	andeq	r0, r0, r9, asr r0
    857c:	00000000 	andeq	r0, r0, r0
    8580:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    858c:	00560001 	subseq	r0, r6, r1
    8590:	00000000 	andeq	r0, r0, r0
    8594:	74000000 	strvc	r0, [r0], #-0
    8598:	7c08005e 	stcvc	0, cr0, [r8], {94}	; 0x5e
    859c:	0108005e 	qaddeq	r0, lr, r8
    85a0:	5e7c5000 	cdppl	0, 7, cr5, cr12, cr0, {0}
    85a4:	5e840800 	cdppl	8, 8, cr0, cr4, cr0, {0}
    85a8:	00040800 	andeq	r0, r4, r0, lsl #16
    85ac:	9f5001f3 	svcls	0x005001f3
	...
    85b8:	08005e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, lr}
    85bc:	08005ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, ip, lr}
    85c0:	a8500001 	ldmdage	r0, {r0}^
    85c4:	d808005e 	stmdale	r8, {r1, r2, r3, r4, r6}
    85c8:	0408005e 	streq	r0, [r8], #-94	; 0x5e
    85cc:	5001f300 	andpl	pc, r1, r0, lsl #6
    85d0:	005ed89f 			; <UNDEFINED> instruction: 0x005ed89f
    85d4:	005eda08 	subseq	sp, lr, r8, lsl #20
    85d8:	50000108 	andpl	r0, r0, r8, lsl #2
    85dc:	08005eda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl, fp, ip, lr}
    85e0:	08005f52 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl, fp, ip, lr}
    85e4:	01f30004 	mvnseq	r0, r4
    85e8:	5f529f50 	svcpl	0x00529f50
    85ec:	5f540800 	svcpl	0x00540800
    85f0:	00010800 	andeq	r0, r1, r0, lsl #16
    85f4:	005f5450 	subseq	r5, pc, r0, asr r4	; <UNPREDICTABLE>
    85f8:	005f5a08 	subseq	r5, pc, r8, lsl #20
    85fc:	f3000408 	vshl.u8	d0, d8, d0
    8600:	009f5001 	addseq	r5, pc, r1
    8604:	00000000 	andeq	r0, r0, r0
    8608:	84000000 	strhi	r0, [r0], #-0
    860c:	a808005e 	stmdage	r8, {r1, r2, r3, r4, r6}
    8610:	0108005e 	qaddeq	r0, lr, r8
    8614:	5ea85100 	fdvple	f5, f0, f0
    8618:	5ed80800 	cdppl	8, 13, cr0, cr8, cr0, {0}
    861c:	00040800 	andeq	r0, r4, r0, lsl #16
    8620:	9f5101f3 	svcls	0x005101f3
    8624:	08005ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, lr}
    8628:	08005eda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl, fp, ip, lr}
    862c:	da510001 	ble	1448638 <__Stack_Size+0x1447e38>
    8630:	5208005e 	andpl	r0, r8, #94	; 0x5e
    8634:	0408005f 	streq	r0, [r8], #-95	; 0x5f
    8638:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    863c:	005f529f 			; <UNDEFINED> instruction: 0x005f529f
    8640:	005f5408 	subseq	r5, pc, r8, lsl #8
    8644:	51000108 	tstpl	r0, r8, lsl #2
    8648:	08005f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, ip, lr}
    864c:	08005f5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sl, fp, ip, lr}
    8650:	01f30004 	mvnseq	r0, r4
    8654:	00009f51 	andeq	r9, r0, r1, asr pc
    8658:	00000000 	andeq	r0, r0, r0
    865c:	5e840000 	cdppl	0, 8, cr0, cr4, cr0, {0}
    8660:	5ea80800 	cdppl	8, 10, cr0, cr8, cr0, {0}
    8664:	00010800 	andeq	r0, r1, r0, lsl #16
    8668:	005ea852 	subseq	sl, lr, r2, asr r8
    866c:	005ed808 	subseq	sp, lr, r8, lsl #16
    8670:	58000108 	stmdapl	r0, {r3, r8}
    8674:	08005ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, lr}
    8678:	08005eda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl, fp, ip, lr}
    867c:	da520001 	ble	1488688 <__Stack_Size+0x1487e88>
    8680:	5208005e 	andpl	r0, r8, #94	; 0x5e
    8684:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    8688:	5f525800 	svcpl	0x00525800
    868c:	5f540800 	svcpl	0x00540800
    8690:	00010800 	andeq	r0, r1, r0, lsl #16
    8694:	005f5452 	subseq	r5, pc, r2, asr r4	; <UNPREDICTABLE>
    8698:	005f5a08 	subseq	r5, pc, r8, lsl #20
    869c:	58000108 	stmdapl	r0, {r3, r8}
	...
    86a8:	08005e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, lr}
    86ac:	08005e8e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sl, fp, ip, lr}
    86b0:	8e530001 	cdphi	0, 5, cr0, cr3, cr1, {0}
    86b4:	5a08005e 	bpl	208834 <__Stack_Size+0x208034>
    86b8:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    86bc:	00005400 	andeq	r5, r0, r0, lsl #8
    86c0:	00000000 	andeq	r0, r0, r0
    86c4:	5e840000 	cdppl	0, 8, cr0, cr4, cr0, {0}
    86c8:	5ea80800 	cdppl	8, 10, cr0, cr8, cr0, {0}
    86cc:	00010800 	andeq	r0, r1, r0, lsl #16
    86d0:	005ea850 	subseq	sl, lr, r0, asr r8
    86d4:	005ec808 	subseq	ip, lr, r8, lsl #16
    86d8:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    86dc:	08005ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, ip, lr}
    86e0:	08005ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, lr}
    86e4:	d8570001 	ldmdale	r7, {r0}^
    86e8:	da08005e 	ble	208868 <__Stack_Size+0x208068>
    86ec:	0108005e 	qaddeq	r0, lr, r8
    86f0:	5eda5000 	cdppl	0, 13, cr5, cr10, cr0, {0}
    86f4:	5eee0800 	cdppl	8, 14, cr0, cr14, cr0, {0}
    86f8:	00010800 	andeq	r0, r1, r0, lsl #16
    86fc:	005eee55 	subseq	lr, lr, r5, asr lr
    8700:	005f1e08 	subseq	r1, pc, r8, lsl #28
    8704:	5a000108 	bpl	8b2c <__Stack_Size+0x832c>
    8708:	08005f1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, fp, ip, lr}
    870c:	08005f52 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl, fp, ip, lr}
    8710:	52550001 	subspl	r0, r5, #1
    8714:	5408005f 	strpl	r0, [r8], #-95	; 0x5f
    8718:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    871c:	00005000 	andeq	r5, r0, r0
    8720:	00000000 	andeq	r0, r0, r0
    8724:	5e980000 	cdppl	0, 9, cr0, cr8, cr0, {0}
    8728:	5ea80800 	cdppl	8, 10, cr0, cr8, cr0, {0}
    872c:	00010800 	andeq	r0, r1, r0, lsl #16
    8730:	005ea852 	subseq	sl, lr, r2, asr r8
    8734:	005ec808 	subseq	ip, lr, r8, lsl #16
    8738:	59000108 	stmdbpl	r0, {r3, r8}
    873c:	08005ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, lr}
    8740:	08005eda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl, fp, ip, lr}
    8744:	da520001 	ble	1488750 <__Stack_Size+0x1487f50>
    8748:	f208005e 	vqadd.s8	q0, q4, q7
    874c:	0108005e 	qaddeq	r0, lr, r8
    8750:	5ef25300 	cdppl	3, 15, cr5, cr2, cr0, {0}
    8754:	5f1e0800 	svcpl	0x001e0800
    8758:	00010800 	andeq	r0, r1, r0, lsl #16
    875c:	005f1e57 	subseq	r1, pc, r7, asr lr	; <UNPREDICTABLE>
    8760:	005f2a08 	subseq	r2, pc, r8, lsl #20
    8764:	77000308 	strvc	r0, [r0, -r8, lsl #6]
    8768:	5f2a9f01 	svcpl	0x002a9f01
    876c:	5f420800 	svcpl	0x00420800
    8770:	00030800 	andeq	r0, r3, r0, lsl #16
    8774:	429f0277 	addsmi	r0, pc, #1879048199	; 0x70000007
    8778:	4408005f 	strmi	r0, [r8], #-95	; 0x5f
    877c:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    8780:	5f445900 	svcpl	0x00445900
    8784:	5f4e0800 	svcpl	0x004e0800
    8788:	00030800 	andeq	r0, r3, r0, lsl #16
    878c:	4e9f0277 	mrcmi	2, 4, r0, cr15, cr7, {3}
    8790:	5208005f 	andpl	r0, r8, #95	; 0x5f
    8794:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    8798:	5f525900 	svcpl	0x00525900
    879c:	5f540800 	svcpl	0x00540800
    87a0:	00010800 	andeq	r0, r1, r0, lsl #16
    87a4:	00000052 	andeq	r0, r0, r2, asr r0
    87a8:	00000000 	andeq	r0, r0, r0
    87ac:	005e9800 	subseq	r9, lr, r0, lsl #16
    87b0:	005ea808 	subseq	sl, lr, r8, lsl #16
    87b4:	74000208 	strvc	r0, [r0], #-520	; 0x208
    87b8:	005ea801 	subseq	sl, lr, r1, lsl #16
    87bc:	005eba08 	subseq	fp, lr, r8, lsl #20
    87c0:	56000108 	strpl	r0, [r0], -r8, lsl #2
    87c4:	08005ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, ip, lr}
    87c8:	08005ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip, lr}
    87cc:	00760005 	rsbseq	r0, r6, r5
    87d0:	d29f2532 	addsle	r2, pc, #209715200	; 0xc800000
    87d4:	d808005e 	stmdale	r8, {r1, r2, r3, r4, r6}
    87d8:	0108005e 	qaddeq	r0, lr, r8
    87dc:	5ed85600 	cdppl	6, 13, cr5, cr8, cr0, {0}
    87e0:	5eda0800 	cdppl	8, 13, cr0, cr10, cr0, {0}
    87e4:	00020800 	andeq	r0, r2, r0, lsl #16
    87e8:	5eda0174 	mrcpl	1, 6, r0, cr10, cr4, {3}
    87ec:	5ef00800 	cdppl	8, 15, cr0, cr0, cr0, {0}
    87f0:	00010800 	andeq	r0, r1, r0, lsl #16
    87f4:	005ef056 	subseq	pc, lr, r6, asr r0	; <UNPREDICTABLE>
    87f8:	005f0208 	subseq	r0, pc, r8, lsl #4
    87fc:	75000808 	strvc	r0, [r0, #-2056]	; 0x808
    8800:	76253400 	strtvc	r3, [r5], -r0, lsl #8
    8804:	069f2100 	ldreq	r2, [pc], r0, lsl #2
    8808:	1e08005f 	mcrne	0, 0, r0, cr8, cr15, {2}
    880c:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    8810:	5f1e5600 	svcpl	0x001e5600
    8814:	5f2a0800 	svcpl	0x002a0800
    8818:	00080800 	andeq	r0, r8, r0, lsl #16
    881c:	25360079 	ldrcs	r0, [r6, #-121]!	; 0x79
    8820:	9f210076 	svcls	0x00210076
    8824:	08005f2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, sl, fp, ip, lr}
    8828:	08005f52 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl, fp, ip, lr}
    882c:	52560001 	subspl	r0, r6, #1
    8830:	5408005f 	strpl	r0, [r8], #-95	; 0x5f
    8834:	0208005f 	andeq	r0, r8, #95	; 0x5f
    8838:	00017400 	andeq	r7, r1, r0, lsl #8
    883c:	00000000 	andeq	r0, r0, r0
    8840:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    8844:	d008005e 	andle	r0, r8, lr, asr r0
    8848:	0108005e 	qaddeq	r0, lr, r8
    884c:	5ef05600 	cdppl	6, 15, cr5, cr0, cr0, {0}
    8850:	5ef80800 	cdppl	8, 15, cr0, cr8, cr0, {0}
    8854:	00020800 	andeq	r0, r2, r0, lsl #16
    8858:	5ef87f7a 	mrcpl	15, 7, r7, cr8, cr10, {3}
    885c:	5f060800 	svcpl	0x00060800
    8860:	00010800 	andeq	r0, r1, r0, lsl #16
    8864:	005f1e55 	subseq	r1, pc, r5, asr lr	; <UNPREDICTABLE>
    8868:	005f2508 	subseq	r2, pc, r8, lsl #10
    886c:	7a000208 	bvc	9094 <__Stack_Size+0x8894>
    8870:	005f2500 	subseq	r2, pc, r0, lsl #10
    8874:	005f4208 	subseq	r4, pc, r8, lsl #4
    8878:	59000108 	stmdbpl	r0, {r3, r8}
    887c:	08005f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, ip, lr}
    8880:	08005f4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}
    8884:	00590001 	subseq	r0, r9, r1
    8888:	00000000 	andeq	r0, r0, r0
    888c:	5a000000 	bpl	8894 <__Stack_Size+0x8094>
    8890:	6a08005f 	bvs	208a14 <__Stack_Size+0x208214>
    8894:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    8898:	5f6a5000 	svcpl	0x006a5000
    889c:	5f7a0800 	svcpl	0x007a0800
    88a0:	00010800 	andeq	r0, r1, r0, lsl #16
    88a4:	005f7a54 	subseq	r7, pc, r4, asr sl	; <UNPREDICTABLE>
    88a8:	005f7c08 	subseq	r7, pc, r8, lsl #24
    88ac:	50000108 	andpl	r0, r0, r8, lsl #2
    88b0:	08005f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}
    88b4:	08005f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip, lr}
    88b8:	8c540001 	mrrchi	0, 0, r0, r4, cr1
    88bc:	8e08005f 	mcrhi	0, 0, r0, cr8, cr15, {2}
    88c0:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    88c4:	5f8e5000 	svcpl	0x008e5000
    88c8:	5f9a0800 	svcpl	0x009a0800
    88cc:	00010800 	andeq	r0, r1, r0, lsl #16
    88d0:	00000054 	andeq	r0, r0, r4, asr r0
    88d4:	00000000 	andeq	r0, r0, r0
    88d8:	005f5a00 	subseq	r5, pc, r0, lsl #20
    88dc:	005f6d08 	subseq	r6, pc, r8, lsl #26
    88e0:	51000108 	tstpl	r0, r8, lsl #2
    88e4:	08005f6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}
    88e8:	08005f7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}
    88ec:	01f30004 	mvnseq	r0, r4
    88f0:	5f7a9f51 	svcpl	0x007a9f51
    88f4:	5f7f0800 	svcpl	0x007f0800
    88f8:	00010800 	andeq	r0, r1, r0, lsl #16
    88fc:	005f7f51 	subseq	r7, pc, r1, asr pc	; <UNPREDICTABLE>
    8900:	005f8c08 	subseq	r8, pc, r8, lsl #24
    8904:	f3000408 	vshl.u8	d0, d8, d0
    8908:	8c9f5101 	ldfhis	f5, [pc], {1}
    890c:	8e08005f 	mcrhi	0, 0, r0, cr8, cr15, {2}
    8910:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    8914:	5f8e5100 	svcpl	0x008e5100
    8918:	5f9a0800 	svcpl	0x009a0800
    891c:	00040800 	andeq	r0, r4, r0, lsl #16
    8920:	9f5101f3 	svcls	0x005101f3
	...
    892c:	08005f5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sl, fp, ip, lr}
    8930:	08005f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, ip, lr}
    8934:	68500001 	ldmdavs	r0, {r0}^
    8938:	6a08005f 	bvs	208abc <__Stack_Size+0x2082bc>
    893c:	0308005f 	movweq	r0, #32863	; 0x805f
    8940:	9f017000 	svcls	0x00017000
    8944:	08005f6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}
    8948:	08005f76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}
    894c:	01740003 	cmneq	r4, r3
    8950:	005f769f 			; <UNDEFINED> instruction: 0x005f769f
    8954:	005f7a08 	subseq	r7, pc, r8, lsl #20
    8958:	53000108 	movwpl	r0, #264	; 0x108
    895c:	08005f7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}
    8960:	08005f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}
    8964:	01700003 	cmneq	r0, r3
    8968:	005f7c9f 			; <UNDEFINED> instruction: 0x005f7c9f
    896c:	005f8408 	subseq	r8, pc, r8, lsl #8
    8970:	74000308 	strvc	r0, [r0], #-776	; 0x308
    8974:	5f849f01 	svcpl	0x00849f01
    8978:	5f880800 	svcpl	0x00880800
    897c:	00030800 	andeq	r0, r3, r0, lsl #16
    8980:	889f0274 	ldmhi	pc, {r2, r4, r5, r6, r9}	; <UNPREDICTABLE>
    8984:	8c08005f 	stchi	0, cr0, [r8], {95}	; 0x5f
    8988:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    898c:	5f8c5300 	svcpl	0x008c5300
    8990:	5f8e0800 	svcpl	0x008e0800
    8994:	00010800 	andeq	r0, r1, r0, lsl #16
    8998:	005f8e50 	subseq	r8, pc, r0, asr lr	; <UNPREDICTABLE>
    899c:	005f9608 	subseq	r9, pc, r8, lsl #12
    89a0:	73000308 	movwvc	r0, #776	; 0x308
    89a4:	5f969f01 	svcpl	0x00969f01
    89a8:	5f980800 	svcpl	0x00980800
    89ac:	00010800 	andeq	r0, r1, r0, lsl #16
    89b0:	005f9850 	subseq	r9, pc, r0, asr r8	; <UNPREDICTABLE>
    89b4:	005f9a08 	subseq	r9, pc, r8, lsl #20
    89b8:	73000308 	movwvc	r0, #776	; 0x308
    89bc:	00009f01 	andeq	r9, r0, r1, lsl #30
    89c0:	00000000 	andeq	r0, r0, r0
    89c4:	5fe00000 	svcpl	0x00e00000
    89c8:	5ff00800 	svcpl	0x00f00800
    89cc:	00010800 	andeq	r0, r1, r0, lsl #16
    89d0:	005ff050 	subseq	pc, pc, r0, asr r0	; <UNPREDICTABLE>
    89d4:	00616208 	rsbeq	r6, r1, r8, lsl #4
    89d8:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    89dc:	08006162 	stmdaeq	r0, {r1, r5, r6, r8, sp, lr}
    89e0:	0800618c 	stmdaeq	r0, {r2, r3, r7, r8, sp, lr}
    89e4:	01f30004 	mvnseq	r0, r4
    89e8:	00009f50 	andeq	r9, r0, r0, asr pc
    89ec:	00000000 	andeq	r0, r0, r0
    89f0:	5fe00000 	svcpl	0x00e00000
    89f4:	5fec0800 	svcpl	0x00ec0800
    89f8:	00010800 	andeq	r0, r1, r0, lsl #16
    89fc:	005fec51 	subseq	lr, pc, r1, asr ip	; <UNPREDICTABLE>
    8a00:	00616208 	rsbeq	r6, r1, r8, lsl #4
    8a04:	91000308 	tstls	r0, r8, lsl #6
    8a08:	61627c94 			; <UNDEFINED> instruction: 0x61627c94
    8a0c:	618c0800 	orrvs	r0, ip, r0, lsl #16
    8a10:	00030800 	andeq	r0, r3, r0, lsl #16
    8a14:	007c947d 	rsbseq	r9, ip, sp, ror r4
    8a18:	00000000 	andeq	r0, r0, r0
    8a1c:	e0000000 	and	r0, r0, r0
    8a20:	f208005f 	vqadd.s8	q0, q4, <illegal reg q7.5>
    8a24:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    8a28:	5ff25200 	svcpl	0x00f25200
    8a2c:	618c0800 	orrvs	r0, ip, r0, lsl #16
    8a30:	00040800 	andeq	r0, r4, r0, lsl #16
    8a34:	9f5201f3 	svcls	0x005201f3
	...
    8a40:	0800600c 	stmdaeq	r0, {r2, r3, sp, lr}
    8a44:	08006162 	stmdaeq	r0, {r1, r5, r6, r8, sp, lr}
    8a48:	80910004 	addshi	r0, r1, r4
    8a4c:	61629f7f 	smcvs	10751	; 0x29ff
    8a50:	618c0800 	orrvs	r0, ip, r0, lsl #16
    8a54:	00040800 	andeq	r0, r4, r0, lsl #16
    8a58:	9f7f807d 	svcls	0x007f807d
	...
    8a64:	08005fe6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8a68:	08005ff0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8a6c:	80910003 	addshi	r0, r1, r3
    8a70:	005ff07f 	subseq	pc, pc, pc, ror r0	; <UNPREDICTABLE>
    8a74:	005ff508 	subseq	pc, pc, r8, lsl #10
    8a78:	70000208 	andvc	r0, r0, r8, lsl #4
    8a7c:	005ff500 	subseq	pc, pc, r0, lsl #10
    8a80:	005ffe08 	subseq	pc, pc, r8, lsl #28
    8a84:	91000308 	tstls	r0, r8, lsl #6
    8a88:	5ffe7f80 	svcpl	0x00fe7f80
    8a8c:	60010800 	andvs	r0, r1, r0, lsl #16
    8a90:	00020800 	andeq	r0, r2, r0, lsl #16
    8a94:	60010070 	andvs	r0, r1, r0, ror r0
    8a98:	61620800 	cmnvs	r2, r0, lsl #16
    8a9c:	00030800 	andeq	r0, r3, r0, lsl #16
    8aa0:	627f8091 	rsbsvs	r8, pc, #145	; 0x91
    8aa4:	8c080061 	stchi	0, cr0, [r8], {97}	; 0x61
    8aa8:	03080061 	movweq	r0, #32865	; 0x8061
    8aac:	7f807d00 	svcvc	0x00807d00
	...
    8ab8:	08006060 	stmdaeq	r0, {r5, r6, sp, lr}
    8abc:	0800615c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sp, lr}
    8ac0:	9f310002 	svcls	0x00310002
	...
    8acc:	08006060 	stmdaeq	r0, {r5, r6, sp, lr}
    8ad0:	0800615c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sp, lr}
    8ad4:	9f300002 	svcls	0x00300002
	...
    8ae0:	08006060 	stmdaeq	r0, {r5, r6, sp, lr}
    8ae4:	0800607e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sp, lr}
    8ae8:	84080003 	strhi	r0, [r8], #-3
    8aec:	00607e9f 	mlseq	r0, pc, lr, r7	; <UNPREDICTABLE>
    8af0:	0060ae08 	rsbeq	sl, r0, r8, lsl #28
    8af4:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    8b00:	08006072 	stmdaeq	r0, {r1, r4, r5, r6, sp, lr}
    8b04:	080060b0 	stmdaeq	r0, {r4, r5, r7, sp, lr}
    8b08:	00550001 	subseq	r0, r5, r1
	...
    8b18:	01000000 	mrseq	r0, (UNDEF: 0)
    8b1c:	00005000 	andeq	r5, r0, r0
    8b20:	00000000 	andeq	r0, r0, r0
    8b24:	00040000 	andeq	r0, r4, r0
    8b28:	9f5001f3 	svcls	0x005001f3
	...
    8b3c:	00500001 	subseq	r0, r0, r1
    8b40:	00000000 	andeq	r0, r0, r0
    8b44:	04000000 	streq	r0, [r0], #-0
    8b48:	5001f300 	andpl	pc, r1, r0, lsl #6
    8b4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8b5c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8b68:	01f30004 	mvnseq	r0, r4
    8b6c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8b7c:	00010000 	andeq	r0, r1, r0
    8b80:	00000051 	andeq	r0, r0, r1, asr r0
    8b84:	00000000 	andeq	r0, r0, r0
    8b88:	f3000400 	vshl.u8	d0, d0, d0
    8b8c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    8b9c:	01000000 	mrseq	r0, (UNDEF: 0)
    8ba0:	00005000 	andeq	r5, r0, r0
    8ba4:	00000000 	andeq	r0, r0, r0
    8ba8:	00040000 	andeq	r0, r4, r0
    8bac:	9f5001f3 	svcls	0x005001f3
	...
    8bb8:	0800618c 	stmdaeq	r0, {r2, r3, r7, r8, sp, lr}
    8bbc:	0800618e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sp, lr}
    8bc0:	8e500001 	cdphi	0, 5, cr0, cr0, cr1, {0}
    8bc4:	b6080061 	strlt	r0, [r8], -r1, rrx
    8bc8:	04080061 	streq	r0, [r8], #-97	; 0x61
    8bcc:	5001f300 	andpl	pc, r1, r0, lsl #6
    8bd0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8be0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8bec:	01f30004 	mvnseq	r0, r4
    8bf0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8c00:	00010000 	andeq	r0, r1, r0
    8c04:	00000050 	andeq	r0, r0, r0, asr r0
    8c08:	00000000 	andeq	r0, r0, r0
    8c0c:	f3000400 	vshl.u8	d0, d0, d0
    8c10:	009f5001 	addseq	r5, pc, r1
	...
    8c20:	01000000 	mrseq	r0, (UNDEF: 0)
    8c24:	00005000 	andeq	r5, r0, r0
    8c28:	00000000 	andeq	r0, r0, r0
    8c2c:	00040000 	andeq	r0, r4, r0
    8c30:	9f5001f3 	svcls	0x005001f3
	...
    8c44:	00500001 	subseq	r0, r0, r1
    8c48:	00000000 	andeq	r0, r0, r0
    8c4c:	04000000 	streq	r0, [r0], #-0
    8c50:	5001f300 	andpl	pc, r1, r0, lsl #6
    8c54:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8c64:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8c70:	01f30004 	mvnseq	r0, r4
    8c74:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8c84:	00060000 	andeq	r0, r6, r0
    8c88:	30080073 	andcc	r0, r8, r3, ror r0
    8c8c:	00009f27 	andeq	r9, r0, r7, lsr #30
    8c90:	00000000 	andeq	r0, r0, r0
    8c94:	00090000 	andeq	r0, r9, r0
    8c98:	30080073 	andcc	r0, r8, r3, ror r0
    8c9c:	27300827 	ldrcs	r0, [r0, -r7, lsr #16]!
    8ca0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8ca4:	00000000 	andeq	r0, r0, r0
    8ca8:	0061b600 	rsbeq	fp, r1, r0, lsl #12
    8cac:	0061b808 	rsbeq	fp, r1, r8, lsl #16
    8cb0:	50000108 	andpl	r0, r0, r8, lsl #2
    8cb4:	080061b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sp, lr}
    8cb8:	080061d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sp, lr}
    8cbc:	01f30004 	mvnseq	r0, r4
    8cc0:	00009f50 	andeq	r9, r0, r0, asr pc
    8cc4:	00000000 	andeq	r0, r0, r0
    8cc8:	61cc0000 	bicvs	r0, ip, r0
    8ccc:	61d00800 	bicsvs	r0, r0, r0, lsl #16
    8cd0:	00070800 	andeq	r0, r7, r0, lsl #16
    8cd4:	000a0073 	andeq	r0, sl, r3, ror r0
    8cd8:	d09f2730 	addsle	r2, pc, r0, lsr r7	; <UNPREDICTABLE>
    8cdc:	d4080061 	strle	r0, [r8], #-97	; 0x61
    8ce0:	0b080061 	bleq	208e6c <__Stack_Size+0x20866c>
    8ce4:	0a007300 	beq	258ec <__Stack_Size+0x250ec>
    8ce8:	0a273000 	beq	9d4cf0 <__Stack_Size+0x9d44f0>
    8cec:	9f273000 	svcls	0x00273000
	...
    8d00:	00500001 	subseq	r0, r0, r1
    8d04:	00000000 	andeq	r0, r0, r0
    8d08:	04000000 	streq	r0, [r0], #-0
    8d0c:	5001f300 	andpl	pc, r1, r0, lsl #6
    8d10:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8d20:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8d2c:	01f30004 	mvnseq	r0, r4
    8d30:	00009f50 	andeq	r9, r0, r0, asr pc
    8d34:	00000000 	andeq	r0, r0, r0
    8d38:	61d40000 	bicsvs	r0, r4, r0
    8d3c:	61d60800 	bicsvs	r0, r6, r0, lsl #16
    8d40:	00010800 	andeq	r0, r1, r0, lsl #16
    8d44:	0061d650 	rsbeq	sp, r1, r0, asr r6
    8d48:	0061f008 	rsbeq	pc, r1, r8
    8d4c:	f3000408 	vshl.u8	d0, d8, d0
    8d50:	009f5001 	addseq	r5, pc, r1
	...
    8d60:	01000000 	mrseq	r0, (UNDEF: 0)
    8d64:	00005000 	andeq	r5, r0, r0
    8d68:	00000000 	andeq	r0, r0, r0
    8d6c:	00040000 	andeq	r0, r4, r0
    8d70:	9f5001f3 	svcls	0x005001f3
	...
    8d84:	00500001 	subseq	r0, r0, r1
    8d88:	00000000 	andeq	r0, r0, r0
    8d8c:	04000000 	streq	r0, [r0], #-0
    8d90:	5001f300 	andpl	pc, r1, r0, lsl #6
    8d94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8da4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8db0:	01f30004 	mvnseq	r0, r4
    8db4:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8dc4:	00010000 	andeq	r0, r1, r0
    8dc8:	00000050 	andeq	r0, r0, r0, asr r0
    8dcc:	00000000 	andeq	r0, r0, r0
    8dd0:	f3000400 	vshl.u8	d0, d0, d0
    8dd4:	009f5001 	addseq	r5, pc, r1
	...
    8de4:	01000000 	mrseq	r0, (UNDEF: 0)
    8de8:	00005000 	andeq	r5, r0, r0
    8dec:	00000000 	andeq	r0, r0, r0
    8df0:	00040000 	andeq	r0, r4, r0
    8df4:	9f5001f3 	svcls	0x005001f3
	...
    8e08:	00500001 	subseq	r0, r0, r1
    8e0c:	00000000 	andeq	r0, r0, r0
    8e10:	04000000 	streq	r0, [r0], #-0
    8e14:	5001f300 	andpl	pc, r1, r0, lsl #6
    8e18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8e28:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8e34:	01f30004 	mvnseq	r0, r4
    8e38:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8e48:	00010000 	andeq	r0, r1, r0
    8e4c:	00000050 	andeq	r0, r0, r0, asr r0
    8e50:	00000000 	andeq	r0, r0, r0
    8e54:	f3000400 	vshl.u8	d0, d0, d0
    8e58:	009f5001 	addseq	r5, pc, r1
	...
    8e68:	01000000 	mrseq	r0, (UNDEF: 0)
    8e6c:	00005000 	andeq	r5, r0, r0
    8e70:	00000000 	andeq	r0, r0, r0
    8e74:	00040000 	andeq	r0, r4, r0
    8e78:	9f5001f3 	svcls	0x005001f3
	...
    8e84:	080061f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sp, lr}
    8e88:	080061f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, sp, lr}
    8e8c:	f2500001 	vhadd.s16	d16, d0, d1
    8e90:	10080061 	andne	r0, r8, r1, rrx
    8e94:	04080062 	streq	r0, [r8], #-98	; 0x62
    8e98:	5001f300 	andpl	pc, r1, r0, lsl #6
    8e9c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8ea0:	00000000 	andeq	r0, r0, r0
    8ea4:	00621000 	rsbeq	r1, r2, r0
    8ea8:	00621208 	rsbeq	r1, r2, r8, lsl #4
    8eac:	50000108 	andpl	r0, r0, r8, lsl #2
    8eb0:	08006212 	stmdaeq	r0, {r1, r4, r9, sp, lr}
    8eb4:	08006230 	stmdaeq	r0, {r4, r5, r9, sp, lr}
    8eb8:	01f30004 	mvnseq	r0, r4
    8ebc:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8ecc:	00010000 	andeq	r0, r1, r0
    8ed0:	00000050 	andeq	r0, r0, r0, asr r0
    8ed4:	00000000 	andeq	r0, r0, r0
    8ed8:	f3000400 	vshl.u8	d0, d0, d0
    8edc:	009f5001 	addseq	r5, pc, r1
	...
    8eec:	01000000 	mrseq	r0, (UNDEF: 0)
    8ef0:	00005100 	andeq	r5, r0, r0, lsl #2
    8ef4:	00000000 	andeq	r0, r0, r0
    8ef8:	00040000 	andeq	r0, r4, r0
    8efc:	9f5101f3 	svcls	0x005101f3
	...
    8f10:	00500001 	subseq	r0, r0, r1
    8f14:	00000000 	andeq	r0, r0, r0
    8f18:	04000000 	streq	r0, [r0], #-0
    8f1c:	5001f300 	andpl	pc, r1, r0, lsl #6
    8f20:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8f30:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8f3c:	01f30004 	mvnseq	r0, r4
    8f40:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8f50:	00010000 	andeq	r0, r1, r0
    8f54:	00000051 	andeq	r0, r0, r1, asr r0
    8f58:	00000000 	andeq	r0, r0, r0
    8f5c:	f3000400 	vshl.u8	d0, d0, d0
    8f60:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    8f70:	01000000 	mrseq	r0, (UNDEF: 0)
    8f74:	00005000 	andeq	r5, r0, r0
    8f78:	00000000 	andeq	r0, r0, r0
    8f7c:	00040000 	andeq	r0, r4, r0
    8f80:	9f5001f3 	svcls	0x005001f3
	...
    8f94:	00510001 	subseq	r0, r1, r1
    8f98:	00000000 	andeq	r0, r0, r0
    8f9c:	04000000 	streq	r0, [r0], #-0
    8fa0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    8fa4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8fa8:	00000000 	andeq	r0, r0, r0
    8fac:	00623000 	rsbeq	r3, r2, r0
    8fb0:	00623a08 	rsbeq	r3, r2, r8, lsl #20
    8fb4:	50000108 	andpl	r0, r0, r8, lsl #2
    8fb8:	0800623a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sp, lr}
    8fbc:	0800624c 	stmdaeq	r0, {r2, r3, r6, r9, sp, lr}
    8fc0:	01f30004 	mvnseq	r0, r4
    8fc4:	00009f50 	andeq	r9, r0, r0, asr pc
    8fc8:	00000000 	andeq	r0, r0, r0
    8fcc:	624c0000 	subvs	r0, ip, #0
    8fd0:	62560800 	subsvs	r0, r6, #0, 16
    8fd4:	00010800 	andeq	r0, r1, r0, lsl #16
    8fd8:	00625650 	rsbeq	r5, r2, r0, asr r6
    8fdc:	00626808 	rsbeq	r6, r2, r8, lsl #16
    8fe0:	f3000408 	vshl.u8	d0, d8, d0
    8fe4:	009f5001 	addseq	r5, pc, r1
    8fe8:	00000000 	andeq	r0, r0, r0
    8fec:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    8ff0:	72080062 	andvc	r0, r8, #98	; 0x62
    8ff4:	01080062 	tsteq	r8, r2, rrx
    8ff8:	62725000 	rsbsvs	r5, r2, #0
    8ffc:	62840800 	addvs	r0, r4, #0, 16
    9000:	00040800 	andeq	r0, r4, r0, lsl #16
    9004:	9f5001f3 	svcls	0x005001f3
	...
    9018:	00510001 	subseq	r0, r1, r1
    901c:	00000000 	andeq	r0, r0, r0
    9020:	04000000 	streq	r0, [r0], #-0
    9024:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    9028:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    902c:	00000000 	andeq	r0, r0, r0
    9030:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    903c:	01f30004 	mvnseq	r0, r4
    9040:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    9050:	00010000 	andeq	r0, r1, r0
    9054:	00000053 	andeq	r0, r0, r3, asr r0
    9058:	00000000 	andeq	r0, r0, r0
    905c:	53000100 	movwpl	r0, #256	; 0x100
	...
    9068:	00530001 	subseq	r0, r3, r1
    906c:	00000000 	andeq	r0, r0, r0
    9070:	84000000 	strhi	r0, [r0], #-0
    9074:	90080062 	andls	r0, r8, r2, rrx
    9078:	01080062 	tsteq	r8, r2, rrx
    907c:	62905000 	addsvs	r5, r0, #0
    9080:	62c40800 	sbcvs	r0, r4, #0, 16
    9084:	00040800 	andeq	r0, r4, r0, lsl #16
    9088:	9f5001f3 	svcls	0x005001f3
	...
    9094:	08006284 	stmdaeq	r0, {r2, r7, r9, sp, lr}
    9098:	080062b2 	stmdaeq	r0, {r1, r4, r5, r7, r9, sp, lr}
    909c:	b2510001 	subslt	r0, r1, #1
    90a0:	c4080062 	strgt	r0, [r8], #-98	; 0x62
    90a4:	04080062 	streq	r0, [r8], #-98	; 0x62
    90a8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    90ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    90b0:	00000000 	andeq	r0, r0, r0
    90b4:	00629c00 	rsbeq	r9, r2, r0, lsl #24
    90b8:	0062a408 	rsbeq	sl, r2, r8, lsl #8
    90bc:	53000108 	movwpl	r0, #264	; 0x108
    90c0:	080062a4 	stmdaeq	r0, {r2, r5, r7, r9, sp, lr}
    90c4:	080062a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sp, lr}
    90c8:	00710005 	rsbseq	r0, r1, r5
    90cc:	a69f2535 			; <UNDEFINED> instruction: 0xa69f2535
    90d0:	a8080062 	stmdage	r8, {r1, r5, r6}
    90d4:	01080062 	tsteq	r8, r2, rrx
    90d8:	62b05300 	adcsvs	r5, r0, #0, 6
    90dc:	62b80800 	adcsvs	r0, r8, #0, 16
    90e0:	00010800 	andeq	r0, r1, r0, lsl #16
    90e4:	00000053 	andeq	r0, r0, r3, asr r0
	...
    90f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    9100:	01f30004 	mvnseq	r0, r4
    9104:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    9114:	00010000 	andeq	r0, r1, r0
    9118:	00000050 	andeq	r0, r0, r0, asr r0
    911c:	00000000 	andeq	r0, r0, r0
    9120:	f3000400 	vshl.u8	d0, d0, d0
    9124:	009f5001 	addseq	r5, pc, r1
	...
    9134:	01000000 	mrseq	r0, (UNDEF: 0)
    9138:	00005000 	andeq	r5, r0, r0
    913c:	00000000 	andeq	r0, r0, r0
    9140:	00040000 	andeq	r0, r4, r0
    9144:	9f5001f3 	svcls	0x005001f3
	...
    9158:	00510001 	subseq	r0, r1, r1
    915c:	00000000 	andeq	r0, r0, r0
    9160:	04000000 	streq	r0, [r0], #-0
    9164:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    9168:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    9178:	52000100 	andpl	r0, r0, #0, 2
	...
    9184:	01f30004 	mvnseq	r0, r4
    9188:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    9198:	00010000 	andeq	r0, r1, r0
    919c:	00000050 	andeq	r0, r0, r0, asr r0
    91a0:	00000000 	andeq	r0, r0, r0
    91a4:	f3000400 	vshl.u8	d0, d0, d0
    91a8:	009f5001 	addseq	r5, pc, r1
	...
    91b8:	01000000 	mrseq	r0, (UNDEF: 0)
    91bc:	00005100 	andeq	r5, r0, r0, lsl #2
    91c0:	00000000 	andeq	r0, r0, r0
    91c4:	00040000 	andeq	r0, r4, r0
    91c8:	9f5101f3 	svcls	0x005101f3
	...
    91dc:	00500001 	subseq	r0, r0, r1
    91e0:	00000000 	andeq	r0, r0, r0
    91e4:	04000000 	streq	r0, [r0], #-0
    91e8:	5001f300 	andpl	pc, r1, r0, lsl #6
    91ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    91fc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    9208:	01f30004 	mvnseq	r0, r4
    920c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    921c:	00010000 	andeq	r0, r1, r0
    9220:	00000050 	andeq	r0, r0, r0, asr r0
    9224:	00000000 	andeq	r0, r0, r0
    9228:	f3000400 	vshl.u8	d0, d0, d0
    922c:	009f5001 	addseq	r5, pc, r1
	...
    923c:	01000000 	mrseq	r0, (UNDEF: 0)
    9240:	00005000 	andeq	r5, r0, r0
    9244:	00000000 	andeq	r0, r0, r0
    9248:	00040000 	andeq	r0, r4, r0
    924c:	9f5001f3 	svcls	0x005001f3
	...
    9260:	00500001 	subseq	r0, r0, r1
    9264:	00000000 	andeq	r0, r0, r0
    9268:	04000000 	streq	r0, [r0], #-0
    926c:	5001f300 	andpl	pc, r1, r0, lsl #6
    9270:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9274:	00000000 	andeq	r0, r0, r0
    9278:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    9284:	01f30004 	mvnseq	r0, r4
    9288:	00009f50 	andeq	r9, r0, r0, asr pc
    928c:	00000000 	andeq	r0, r0, r0
    9290:	00010000 	andeq	r0, r1, r0
    9294:	00000050 	andeq	r0, r0, r0, asr r0
	...
    92a4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    92b0:	01f30004 	mvnseq	r0, r4
    92b4:	00009f51 	andeq	r9, r0, r1, asr pc
    92b8:	00000000 	andeq	r0, r0, r0
    92bc:	00010000 	andeq	r0, r1, r0
    92c0:	00000051 	andeq	r0, r0, r1, asr r0
    92c4:	00000000 	andeq	r0, r0, r0
    92c8:	f3000400 	vshl.u8	d0, d0, d0
    92cc:	009f5101 	addseq	r5, pc, r1, lsl #2
    92d0:	00000000 	andeq	r0, r0, r0
    92d4:	01000000 	mrseq	r0, (UNDEF: 0)
    92d8:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    92e8:	00010000 	andeq	r0, r1, r0
    92ec:	00000052 	andeq	r0, r0, r2, asr r0
    92f0:	00000000 	andeq	r0, r0, r0
    92f4:	f3000400 	vshl.u8	d0, d0, d0
    92f8:	009f5201 	addseq	r5, pc, r1, lsl #4
    92fc:	00000000 	andeq	r0, r0, r0
    9300:	01000000 	mrseq	r0, (UNDEF: 0)
    9304:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    9314:	00010000 	andeq	r0, r1, r0
    9318:	00000051 	andeq	r0, r0, r1, asr r0
    931c:	00000000 	andeq	r0, r0, r0
    9320:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    9334:	00530001 	subseq	r0, r3, r1
    9338:	00000000 	andeq	r0, r0, r0
    933c:	05000000 	streq	r0, [r0, #-0]
    9340:	35007200 	strcc	r7, [r0, #-512]	; 0x200
    9344:	00009f25 	andeq	r9, r0, r5, lsr #30
    9348:	00000000 	andeq	r0, r0, r0
    934c:	00010000 	andeq	r0, r1, r0
    9350:	00000053 	andeq	r0, r0, r3, asr r0
    9354:	00000000 	andeq	r0, r0, r0
    9358:	53000100 	movwpl	r0, #256	; 0x100
	...
    936c:	00530001 	subseq	r0, r3, r1
    9370:	00000000 	andeq	r0, r0, r0
    9374:	01000000 	mrseq	r0, (UNDEF: 0)
    9378:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    9388:	00010000 	andeq	r0, r1, r0
    938c:	00000051 	andeq	r0, r0, r1, asr r0
    9390:	00000000 	andeq	r0, r0, r0
    9394:	72000500 	andvc	r0, r0, #0, 10
    9398:	9f253500 	svcls	0x00253500
	...
    93a4:	00510001 	subseq	r0, r1, r1
    93a8:	00000000 	andeq	r0, r0, r0
    93ac:	01000000 	mrseq	r0, (UNDEF: 0)
    93b0:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    93c0:	00010000 	andeq	r0, r1, r0
    93c4:	00000050 	andeq	r0, r0, r0, asr r0
    93c8:	00000000 	andeq	r0, r0, r0
    93cc:	f3000400 	vshl.u8	d0, d0, d0
    93d0:	009f5001 	addseq	r5, pc, r1
    93d4:	00000000 	andeq	r0, r0, r0
    93d8:	01000000 	mrseq	r0, (UNDEF: 0)
    93dc:	00005000 	andeq	r5, r0, r0
    93e0:	00000000 	andeq	r0, r0, r0
    93e4:	00040000 	andeq	r0, r4, r0
    93e8:	9f5001f3 	svcls	0x005001f3
	...
    93fc:	00510001 	subseq	r0, r1, r1
    9400:	00000000 	andeq	r0, r0, r0
    9404:	04000000 	streq	r0, [r0], #-0
    9408:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    940c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9410:	00000000 	andeq	r0, r0, r0
    9414:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    9428:	00520001 	subseq	r0, r2, r1
    942c:	00000000 	andeq	r0, r0, r0
    9430:	04000000 	streq	r0, [r0], #-0
    9434:	5201f300 	andpl	pc, r1, #0, 6
    9438:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    943c:	00000000 	andeq	r0, r0, r0
    9440:	52000100 	andpl	r0, r0, #0, 2
	...
    9454:	00510001 	subseq	r0, r1, r1
	...
    9464:	01000000 	mrseq	r0, (UNDEF: 0)
    9468:	00005300 	andeq	r5, r0, r0, lsl #6
    946c:	00000000 	andeq	r0, r0, r0
    9470:	00050000 	andeq	r0, r5, r0
    9474:	25350072 	ldrcs	r0, [r5, #-114]!	; 0x72
    9478:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    947c:	00000000 	andeq	r0, r0, r0
    9480:	53000100 	movwpl	r0, #256	; 0x100
	...
    948c:	00530001 	subseq	r0, r3, r1
	...
    949c:	01000000 	mrseq	r0, (UNDEF: 0)
    94a0:	00005000 	andeq	r5, r0, r0
    94a4:	00000000 	andeq	r0, r0, r0
    94a8:	00040000 	andeq	r0, r4, r0
    94ac:	9f5001f3 	svcls	0x005001f3
	...
    94b8:	00500001 	subseq	r0, r0, r1
    94bc:	00000000 	andeq	r0, r0, r0
    94c0:	04000000 	streq	r0, [r0], #-0
    94c4:	5001f300 	andpl	pc, r1, r0, lsl #6
    94c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    94d8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    94e4:	01f30004 	mvnseq	r0, r4
    94e8:	00009f51 	andeq	r9, r0, r1, asr pc
    94ec:	00000000 	andeq	r0, r0, r0
    94f0:	00010000 	andeq	r0, r1, r0
    94f4:	00000051 	andeq	r0, r0, r1, asr r0
	...
    9504:	52000100 	andpl	r0, r0, #0, 2
	...
    9510:	01f30004 	mvnseq	r0, r4
    9514:	00009f52 	andeq	r9, r0, r2, asr pc
    9518:	00000000 	andeq	r0, r0, r0
    951c:	00010000 	andeq	r0, r1, r0
    9520:	00000052 	andeq	r0, r0, r2, asr r0
	...
    9530:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    9544:	00530001 	subseq	r0, r3, r1
    9548:	00000000 	andeq	r0, r0, r0
    954c:	05000000 	streq	r0, [r0, #-0]
    9550:	35007200 	strcc	r7, [r0, #-512]	; 0x200
    9554:	00009f25 	andeq	r9, r0, r5, lsr #30
    9558:	00000000 	andeq	r0, r0, r0
    955c:	00010000 	andeq	r0, r1, r0
    9560:	00000053 	andeq	r0, r0, r3, asr r0
    9564:	00000000 	andeq	r0, r0, r0
    9568:	53000100 	movwpl	r0, #256	; 0x100
	...
    957c:	00500001 	subseq	r0, r0, r1
    9580:	00000000 	andeq	r0, r0, r0
    9584:	04000000 	streq	r0, [r0], #-0
    9588:	5001f300 	andpl	pc, r1, r0, lsl #6
    958c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    959c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    95a8:	01f30004 	mvnseq	r0, r4
    95ac:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    95bc:	00010000 	andeq	r0, r1, r0
    95c0:	00000050 	andeq	r0, r0, r0, asr r0
    95c4:	00000000 	andeq	r0, r0, r0
    95c8:	f3000400 	vshl.u8	d0, d0, d0
    95cc:	009f5001 	addseq	r5, pc, r1
	...
    95dc:	01000000 	mrseq	r0, (UNDEF: 0)
    95e0:	00005000 	andeq	r5, r0, r0
    95e4:	00000000 	andeq	r0, r0, r0
    95e8:	00040000 	andeq	r0, r4, r0
    95ec:	9f5001f3 	svcls	0x005001f3
	...
    95f8:	00500001 	subseq	r0, r0, r1
    95fc:	00000000 	andeq	r0, r0, r0
    9600:	04000000 	streq	r0, [r0], #-0
    9604:	5001f300 	andpl	pc, r1, r0, lsl #6
    9608:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    9618:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    9624:	01f30004 	mvnseq	r0, r4
    9628:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    9638:	000e0000 	andeq	r0, lr, r0
    963c:	ff080070 			; <UNDEFINED> instruction: 0xff080070
    9640:	7124381a 	teqvc	r4, sl, lsl r8
    9644:	1aff0800 	bne	fffcb64c <BootRAM+0xef3bded>
    9648:	00009f21 	andeq	r9, r0, r1, lsr #30
    964c:	00000000 	andeq	r0, r0, r0
    9650:	000f0000 	andeq	r0, pc, r0
    9654:	085001f3 	ldmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
    9658:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    965c:	ff080071 			; <UNDEFINED> instruction: 0xff080071
    9660:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
	...
    9670:	01000000 	mrseq	r0, (UNDEF: 0)
    9674:	00005000 	andeq	r5, r0, r0
    9678:	00000000 	andeq	r0, r0, r0
    967c:	00040000 	andeq	r0, r4, r0
    9680:	9f5001f3 	svcls	0x005001f3
	...
    9694:	00500001 	subseq	r0, r0, r1
	...
    96a4:	0d000000 	stceq	0, cr0, [r0, #-0]
    96a8:	38007000 	stmdacc	r0, {ip, sp, lr}
    96ac:	08007025 	stmdaeq	r0, {r0, r2, r5, ip, sp, lr}
    96b0:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    96b4:	00009f21 	andeq	r9, r0, r1, lsr #30
    96b8:	00000000 	andeq	r0, r0, r0
    96bc:	62c60000 	sbcvs	r0, r6, #0
    96c0:	632c0800 	teqvs	ip, #0, 16
    96c4:	00020800 	andeq	r0, r2, r0, lsl #16
    96c8:	632c9f30 	teqvs	ip, #48, 30	; 0xc0
    96cc:	63300800 	teqvs	r0, #0, 16
    96d0:	00070800 	andeq	r0, r7, r0, lsl #16
    96d4:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    96d8:	409f1aff 			; <UNDEFINED> instruction: 0x409f1aff
    96dc:	4a080063 	bmi	209870 <__Stack_Size+0x209070>
    96e0:	07080063 	streq	r0, [r8, -r3, rrx]
    96e4:	0a007300 	beq	262ec <__Stack_Size+0x25aec>
    96e8:	9f1affff 	svcls	0x001affff
    96ec:	08006354 	stmdaeq	r0, {r2, r4, r6, r8, r9, sp, lr}
    96f0:	0800635e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, sp, lr}
    96f4:	00730007 	rsbseq	r0, r3, r7
    96f8:	1affff0a 	bne	9328 <__Stack_Size+0x8b28>
    96fc:	0063aa9f 	mlseq	r3, pc, sl, sl	; <UNPREDICTABLE>
    9700:	0063b608 	rsbeq	fp, r3, r8, lsl #12
    9704:	30000208 	andcc	r0, r0, r8, lsl #4
    9708:	0063b69f 	mlseq	r3, pc, r6, fp	; <UNPREDICTABLE>
    970c:	0063f608 	rsbeq	pc, r3, r8, lsl #12
    9710:	75000708 	strvc	r0, [r0, #-1800]	; 0x708
    9714:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    9718:	63f69f1a 	mvnsvs	r9, #26, 30	; 0x68
    971c:	64180800 	ldrvs	r0, [r8], #-2048	; 0x800
    9720:	00020800 	andeq	r0, r2, r0, lsl #16
    9724:	00009f30 	andeq	r9, r0, r0, lsr pc
    9728:	00000000 	andeq	r0, r0, r0
    972c:	630c0000 	movwvs	r0, #49152	; 0xc000
    9730:	63100800 	tstvs	r0, #0, 16
    9734:	00070800 	andeq	r0, r7, r0, lsl #16
    9738:	000a0072 	andeq	r0, sl, r2, ror r0
    973c:	109f2720 	addsne	r2, pc, r0, lsr #14
    9740:	14080063 	strne	r0, [r8], #-99	; 0x63
    9744:	0b080063 	bleq	2098d8 <__Stack_Size+0x2090d8>
    9748:	0a007200 	beq	25f50 <__Stack_Size+0x25750>
    974c:	0a272000 	beq	9d1754 <__Stack_Size+0x9d0f54>
    9750:	9f272000 	svcls	0x00272000
    9754:	08006314 	stmdaeq	r0, {r2, r4, r8, r9, sp, lr}
    9758:	08006324 	stmdaeq	r0, {r2, r5, r8, r9, sp, lr}
    975c:	0074000c 	rsbseq	r0, r4, ip
    9760:	20000a06 	andcs	r0, r0, r6, lsl #20
    9764:	20000a27 	andcs	r0, r0, r7, lsr #20
    9768:	00009f27 	andeq	r9, r0, r7, lsr #30
    976c:	00000000 	andeq	r0, r0, r0
    9770:	631e0000 	tstvs	lr, #0
    9774:	63220800 	teqvs	r2, #0, 16
    9778:	00060800 	andeq	r0, r6, r0, lsl #16
    977c:	20080072 	andcs	r0, r8, r2, ror r0
    9780:	63229f27 	teqvs	r2, #39, 30	; 0x9c
    9784:	63320800 	teqvs	r2, #0, 16
    9788:	00090800 	andeq	r0, r9, r0, lsl #16
    978c:	20080072 	andcs	r0, r8, r2, ror r0
    9790:	27200827 	strcs	r0, [r0, -r7, lsr #16]!
    9794:	0063329f 	mlseq	r3, pc, r2, r3	; <UNPREDICTABLE>
    9798:	00633a08 	rsbeq	r3, r3, r8, lsl #20
    979c:	74000a08 	strvc	r0, [r0], #-2568	; 0xa08
    97a0:	20080600 	andcs	r0, r8, r0, lsl #12
    97a4:	27200827 	strcs	r0, [r0, -r7, lsr #16]!
    97a8:	0063409f 	mlseq	r3, pc, r0, r4	; <UNPREDICTABLE>
    97ac:	00634208 	rsbeq	r4, r3, r8, lsl #4
    97b0:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    97b4:	27200800 	strcs	r0, [r0, -r0, lsl #16]!
    97b8:	9f272008 	svcls	0x00272008
    97bc:	08006342 	stmdaeq	r0, {r1, r6, r8, r9, sp, lr}
    97c0:	0800634e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sp, lr}
    97c4:	0074000a 	rsbseq	r0, r4, sl
    97c8:	27200806 	strcs	r0, [r0, -r6, lsl #16]!
    97cc:	9f272008 	svcls	0x00272008
    97d0:	08006354 	stmdaeq	r0, {r2, r4, r6, r8, r9, sp, lr}
    97d4:	08006362 	stmdaeq	r0, {r1, r5, r6, r8, r9, sp, lr}
    97d8:	0074000a 	rsbseq	r0, r4, sl
    97dc:	27200806 	strcs	r0, [r0, -r6, lsl #16]!
    97e0:	9f272008 	svcls	0x00272008
	...
    97ec:	08006374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sp, lr}
    97f0:	0800638a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sp, lr}
    97f4:	8a530001 	bhi	14c9800 <__Stack_Size+0x14c9000>
    97f8:	a8080063 	stmdage	r8, {r0, r1, r5, r6}
    97fc:	04080063 	streq	r0, [r8], #-99	; 0x63
    9800:	06007200 	streq	r7, [r0], -r0, lsl #4
    9804:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9808:	00000000 	andeq	r0, r0, r0
    980c:	00639600 	rsbeq	r9, r3, r0, lsl #12
    9810:	0063aa08 	rsbeq	sl, r3, r8, lsl #20
    9814:	53000108 	movwpl	r0, #264	; 0x108
	...
    9828:	9f300002 	svcls	0x00300002
	...
    9834:	00710007 	rsbseq	r0, r1, r7
    9838:	1affff0a 	bne	9468 <__Stack_Size+0x8c68>
    983c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9840:	00000000 	andeq	r0, r0, r0
    9844:	71000700 	tstvc	r0, r0, lsl #14
    9848:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    984c:	00009f1a 	andeq	r9, r0, sl, lsl pc
    9850:	00000000 	andeq	r0, r0, r0
    9854:	00020000 	andeq	r0, r2, r0
    9858:	00009f30 	andeq	r9, r0, r0, lsr pc
    985c:	00000000 	andeq	r0, r0, r0
    9860:	64500000 	ldrbvs	r0, [r0], #-0
    9864:	64650800 	strbtvs	r0, [r5], #-2048	; 0x800
    9868:	00010800 	andeq	r0, r1, r0, lsl #16
    986c:	00646550 	rsbeq	r6, r4, r0, asr r5
    9870:	00647408 	rsbeq	r7, r4, r8, lsl #8
    9874:	f3000408 	vshl.u8	d0, d8, d0
    9878:	009f5001 	addseq	r5, pc, r1
    987c:	00000000 	andeq	r0, r0, r0
    9880:	74000000 	strvc	r0, [r0], #-0
    9884:	89080064 	stmdbhi	r8, {r2, r5, r6}
    9888:	01080064 	tsteq	r8, r4, rrx
    988c:	64895000 	strvs	r5, [r9], #0
    9890:	64980800 	ldrvs	r0, [r8], #2048	; 0x800
    9894:	00040800 	andeq	r0, r4, r0, lsl #16
    9898:	9f5001f3 	svcls	0x005001f3
	...
    98a4:	08006498 	stmdaeq	r0, {r3, r4, r7, sl, sp, lr}
    98a8:	080064ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, sp, lr}
    98ac:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    98b0:	28080064 	stmdacs	r8, {r2, r5, r6}
    98b4:	04080065 	streq	r0, [r8], #-101	; 0x65
    98b8:	5001f300 	andpl	pc, r1, r0, lsl #6
    98bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    98c0:	00000000 	andeq	r0, r0, r0
    98c4:	0064ba00 	rsbeq	fp, r4, r0, lsl #20
    98c8:	0064bc08 	rsbeq	fp, r4, r8, lsl #24
    98cc:	71000208 	tstvc	r0, r8, lsl #4
    98d0:	00000009 	andeq	r0, r0, r9
    98d4:	00000000 	andeq	r0, r0, r0
    98d8:	0064e200 	rsbeq	lr, r4, r0, lsl #4
    98dc:	0064e408 	rsbeq	lr, r4, r8, lsl #8
    98e0:	52000108 	andpl	r0, r0, #8, 2
    98e4:	080064e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, sp, lr}
    98e8:	080064fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, sl, sp, lr}
    98ec:	00710005 	rsbseq	r0, r1, r5
    98f0:	029f1a3f 	addseq	r1, pc, #258048	; 0x3f000
    98f4:	0c080065 	stceq	0, cr0, [r8], {101}	; 0x65
    98f8:	05080065 	streq	r0, [r8, #-101]	; 0x65
    98fc:	3f007100 	svccc	0x00007100
    9900:	00009f1a 	andeq	r9, r0, sl, lsl pc
    9904:	00000000 	andeq	r0, r0, r0
    9908:	65300000 	ldrvs	r0, [r0, #-0]!
    990c:	65b60800 	ldrvs	r0, [r6, #2048]!	; 0x800
    9910:	00030800 	andeq	r0, r3, r0, lsl #16
    9914:	009f1074 	addseq	r1, pc, r4, ror r0	; <UNPREDICTABLE>
    9918:	00000000 	andeq	r0, r0, r0
    991c:	34000000 	strcc	r0, [r0], #-0
    9920:	5e080065 	cdppl	0, 0, cr0, cr8, cr5, {3}
    9924:	01080065 	tsteq	r8, r5, rrx
    9928:	655e5300 	ldrbvs	r5, [lr, #-768]	; 0x300
    992c:	65640800 	strbvs	r0, [r4, #-2048]!	; 0x800
    9930:	00090800 	andeq	r0, r9, r0, lsl #16
    9934:	02941074 	addseq	r1, r4, #116	; 0x74
    9938:	1affff0a 	bne	9568 <__Stack_Size+0x8d68>
    993c:	0065649f 	mlseq	r5, pc, r4, r6	; <UNPREDICTABLE>
    9940:	00657808 	rsbeq	r7, r5, r8, lsl #16
    9944:	53000108 	movwpl	r0, #264	; 0x108
    9948:	08006578 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, sp, lr}
    994c:	08006579 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sl, sp, lr}
    9950:	10740009 	rsbsne	r0, r4, r9
    9954:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    9958:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    995c:	00000000 	andeq	r0, r0, r0
    9960:	36000000 	strcc	r0, [r0], -r0
    9964:	58080065 	stmdapl	r8, {r0, r2, r5, r6}
    9968:	06080065 	streq	r0, [r8], -r5, rrx
    996c:	08007600 	stmdaeq	r0, {r9, sl, ip, sp, lr}
    9970:	589f1aff 	ldmpl	pc, {r0, r1, r2, r3, r4, r5, r6, r7, r9, fp, ip}	; <UNPREDICTABLE>
    9974:	5c080065 	stcpl	0, cr0, [r8], {101}	; 0x65
    9978:	02080065 	andeq	r0, r8, #101	; 0x65
    997c:	5c9f3400 	cfldrspl	mvf3, [pc], {0}
    9980:	64080065 	strvs	r0, [r8], #-101	; 0x65
    9984:	02080065 	andeq	r0, r8, #101	; 0x65
    9988:	649f3700 	ldrvs	r3, [pc], #1792	; 9990 <__Stack_Size+0x9190>
    998c:	6e080065 	cdpvs	0, 0, cr0, cr8, cr5, {3}
    9990:	06080065 	streq	r0, [r8], -r5, rrx
    9994:	08007600 	stmdaeq	r0, {r9, sl, ip, sp, lr}
    9998:	6e9f1aff 	mrcvs	10, 4, r1, cr15, cr15, {7}
    999c:	b6080065 	strlt	r0, [r8], -r5, rrx
    99a0:	01080065 	tsteq	r8, r5, rrx
    99a4:	00005600 	andeq	r5, r0, r0, lsl #12
    99a8:	00000000 	andeq	r0, r0, r0
    99ac:	657c0000 	ldrbvs	r0, [ip, #-0]!
    99b0:	657e0800 	ldrbvs	r0, [lr, #-2048]!	; 0x800
    99b4:	00010800 	andeq	r0, r1, r0, lsl #16
    99b8:	00657e50 	rsbeq	r7, r5, r0, asr lr
    99bc:	0065ac08 	rsbeq	sl, r5, r8, lsl #24
    99c0:	59000108 	stmdbpl	r0, {r3, r8}
	...
    99cc:	08006566 	stmdaeq	r0, {r1, r2, r5, r6, r8, sl, sp, lr}
    99d0:	0800656e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sl, sp, lr}
    99d4:	6e550001 	cdpvs	0, 5, cr0, cr5, cr1, {0}
    99d8:	74080065 	strvc	r0, [r8], #-101	; 0x65
    99dc:	16080065 	strne	r0, [r8], -r5, rrx
    99e0:	12007500 	andne	r7, r0, #0, 10
    99e4:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    99e8:	14160073 	ldrne	r0, [r6], #-115	; 0x73
    99ec:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    99f0:	0001282d 	andeq	r2, r1, sp, lsr #16
    99f4:	749f1316 	ldrvc	r1, [pc], #790	; 99fc <__Stack_Size+0x91fc>
    99f8:	a2080065 	andge	r0, r8, #101	; 0x65
    99fc:	01080065 	tsteq	r8, r5, rrx
    9a00:	00005500 	andeq	r5, r0, r0, lsl #10
    9a04:	00000000 	andeq	r0, r0, r0
    9a08:	661a0000 	ldrvs	r0, [sl], -r0
    9a0c:	66310800 	ldrtvs	r0, [r1], -r0, lsl #16
    9a10:	00010800 	andeq	r0, r1, r0, lsl #16
    9a14:	00664050 	rsbeq	r4, r6, r0, asr r0
    9a18:	00664208 	rsbeq	r4, r6, r8, lsl #4
    9a1c:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    9a28:	08006658 	stmdaeq	r0, {r3, r4, r6, r9, sl, sp, lr}
    9a2c:	0800665c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, sp, lr}
    9a30:	00700006 	rsbseq	r0, r0, r6
    9a34:	9f1a7f08 	svcls	0x001a7f08
    9a38:	0800665c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, sp, lr}
    9a3c:	08006680 	stmdaeq	r0, {r7, r9, sl, sp, lr}
    9a40:	80500001 	subshi	r0, r0, r1
    9a44:	a6080066 	strge	r0, [r8], -r6, rrx
    9a48:	0b080066 	bleq	209be8 <__Stack_Size+0x2093e8>
    9a4c:	94007300 	strls	r7, [r0], #-768	; 0x300
    9a50:	1a7f0801 	bne	1fcba5c <__Stack_Size+0x1fcb25c>
    9a54:	9f1aff08 	svcls	0x001aff08
	...
    9a60:	08006698 	stmdaeq	r0, {r3, r4, r7, r9, sl, sp, lr}
    9a64:	080066c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sl, sp, lr}
    9a68:	d0510001 	subsle	r0, r1, r1
    9a6c:	e2080066 	and	r0, r8, #102	; 0x66
    9a70:	01080066 	tsteq	r8, r6, rrx
    9a74:	66e85100 	strbtvs	r5, [r8], r0, lsl #2
    9a78:	66eb0800 	strbtvs	r0, [fp], r0, lsl #16
    9a7c:	00010800 	andeq	r0, r1, r0, lsl #16
    9a80:	00000051 	andeq	r0, r0, r1, asr r0
    9a84:	00000000 	andeq	r0, r0, r0
    9a88:	00668000 	rsbeq	r8, r6, r0
    9a8c:	0066c208 	rsbeq	ip, r6, r8, lsl #4
    9a90:	50000108 	andpl	r0, r0, r8, lsl #2
    9a94:	080066d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, sp, lr}
    9a98:	080066e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, sl, sp, lr}
    9a9c:	e8500001 	ldmda	r0, {r0}^
    9aa0:	eb080066 	bl	209c40 <__Stack_Size+0x209440>
    9aa4:	01080066 	tsteq	r8, r6, rrx
    9aa8:	00005000 	andeq	r5, r0, r0
    9aac:	00000000 	andeq	r0, r0, r0
    9ab0:	667a0000 	ldrbtvs	r0, [sl], -r0
    9ab4:	66b20800 	ldrtvs	r0, [r2], r0, lsl #16
    9ab8:	00060800 	andeq	r0, r6, r0, lsl #16
    9abc:	ff080072 			; <UNDEFINED> instruction: 0xff080072
    9ac0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    9ac4:	00000000 	andeq	r0, r0, r0
    9ac8:	66f80000 	ldrbtvs	r0, [r8], r0
    9acc:	66fc0800 	ldrbtvs	r0, [ip], r0, lsl #16
    9ad0:	00070800 	andeq	r0, r7, r0, lsl #16
    9ad4:	000a0073 	andeq	r0, sl, r3, ror r0
    9ad8:	fc9f2730 	ldc2	7, cr2, [pc], {48}	; 0x30
    9adc:	fe080066 	cdp2	0, 0, cr0, cr8, cr6, {3}
    9ae0:	0b080066 	bleq	209c80 <__Stack_Size+0x209480>
    9ae4:	0a007300 	beq	266ec <__Stack_Size+0x25eec>
    9ae8:	0a273000 	beq	9d5af0 <__Stack_Size+0x9d52f0>
    9aec:	9f273000 	svcls	0x00273000
	...
    9af8:	0800672c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, sp, lr}
    9afc:	08006766 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, sp, lr}
    9b00:	00720006 	rsbseq	r0, r2, r6
    9b04:	9f1aff08 	svcls	0x001aff08
    9b08:	08006794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp, lr}
    9b0c:	080067a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, sp, lr}
    9b10:	00720006 	rsbseq	r0, r2, r6
    9b14:	9f1aff08 	svcls	0x001aff08
	...
    9b20:	08006730 	stmdaeq	r0, {r4, r5, r8, r9, sl, sp, lr}
    9b24:	08006750 	stmdaeq	r0, {r4, r6, r8, r9, sl, sp, lr}
    9b28:	50540001 	subspl	r0, r4, r1
    9b2c:	66080067 	strvs	r0, [r8], -r7, rrx
    9b30:	07080067 	streq	r0, [r8, -r7, rrx]
    9b34:	0b007200 	bleq	2633c <__Stack_Size+0x25b3c>
    9b38:	9f1aff7f 	svcls	0x001aff7f
    9b3c:	08006794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp, lr}
    9b40:	080067a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, sp, lr}
    9b44:	00720007 	rsbseq	r0, r2, r7
    9b48:	1aff7f0b 	bne	fffe977c <BootRAM+0xef59f1d>
    9b4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9b50:	00000000 	andeq	r0, r0, r0
    9b54:	00674600 	rsbeq	r4, r7, r0, lsl #12
    9b58:	00678f08 	rsbeq	r8, r7, r8, lsl #30
    9b5c:	50000108 	andpl	r0, r0, r8, lsl #2
    9b60:	08006794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp, lr}
    9b64:	08006796 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, sp, lr}
    9b68:	00500001 	subseq	r0, r0, r1
    9b6c:	00000000 	andeq	r0, r0, r0
    9b70:	72000000 	andvc	r0, r0, #0
    9b74:	76080067 	strvc	r0, [r8], -r7, rrx
    9b78:	05080067 	streq	r0, [r8, #-103]	; 0x67
    9b7c:	40007200 	andmi	r7, r0, r0, lsl #4
    9b80:	67769f27 	ldrbvs	r9, [r6, -r7, lsr #30]!
    9b84:	67780800 	ldrbvs	r0, [r8, -r0, lsl #16]!
    9b88:	00070800 	andeq	r0, r7, r0, lsl #16
    9b8c:	27400072 	smlsldxcs	r0, r0, r2, r0	; <UNPREDICTABLE>
    9b90:	009f2740 	addseq	r2, pc, r0, asr #14
    9b94:	00000000 	andeq	r0, r0, r0
    9b98:	82000000 	andhi	r0, r0, #0
    9b9c:	86080067 	strhi	r0, [r8], -r7, rrx
    9ba0:	07080067 	streq	r0, [r8, -r7, rrx]
    9ba4:	0a007200 	beq	263ac <__Stack_Size+0x25bac>
    9ba8:	9f271000 	svcls	0x00271000
	...
    9bb4:	080067c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, sp, lr}
    9bb8:	080067da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, sp, lr}
    9bbc:	da500001 	ble	1409bc8 <__Stack_Size+0x14093c8>
    9bc0:	e4080067 	str	r0, [r8], #-103	; 0x67
    9bc4:	04080067 	streq	r0, [r8], #-103	; 0x67
    9bc8:	5001f300 	andpl	pc, r1, r0, lsl #6
    9bcc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9bd0:	00000000 	andeq	r0, r0, r0
    9bd4:	0067c800 	rsbeq	ip, r7, r0, lsl #16
    9bd8:	0067d208 	rsbeq	sp, r7, r8, lsl #4
    9bdc:	51000108 	tstpl	r0, r8, lsl #2
    9be0:	080067d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, sp, lr}
    9be4:	080067d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, sp, lr}
    9be8:	01f30004 	mvnseq	r0, r4
    9bec:	67d89f51 			; <UNDEFINED> instruction: 0x67d89f51
    9bf0:	67e40800 	strbvs	r0, [r4, r0, lsl #16]!
    9bf4:	00010800 	andeq	r0, r1, r0, lsl #16
    9bf8:	00000051 	andeq	r0, r0, r1, asr r0
    9bfc:	00000000 	andeq	r0, r0, r0
    9c00:	0067ce00 	rsbeq	ip, r7, r0, lsl #28
    9c04:	0067d408 	rsbeq	sp, r7, r8, lsl #8
    9c08:	53000108 	movwpl	r0, #264	; 0x108
    9c0c:	080067d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, sp, lr}
    9c10:	080067d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, sp, lr}
    9c14:	12720009 	rsbsne	r0, r2, #9
    9c18:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    9c1c:	d89f1aff 	ldmle	pc, {r0, r1, r2, r3, r4, r5, r6, r7, r9, fp, ip}	; <UNPREDICTABLE>
    9c20:	e4080067 	str	r0, [r8], #-103	; 0x67
    9c24:	01080067 	tsteq	r8, r7, rrx
    9c28:	00005300 	andeq	r5, r0, r0, lsl #6
    9c2c:	00000000 	andeq	r0, r0, r0
    9c30:	68360000 	ldmdavs	r6!, {}	; <UNPREDICTABLE>
    9c34:	68400800 	stmdavs	r0, {fp}^
    9c38:	00110800 	andseq	r0, r1, r0, lsl #16
    9c3c:	ff0a0072 			; <UNDEFINED> instruction: 0xff0a0072
    9c40:	24311aff 	ldrtcs	r1, [r1], #-2815	; 0xaff
    9c44:	81c08023 	bichi	r8, r0, r3, lsr #32
    9c48:	939f0480 	orrsls	r0, pc, #128, 8	; 0x80000000
    9c4c:	00000004 	andeq	r0, r0, r4
    9c50:	00000000 	andeq	r0, r0, r0
    9c54:	00686a00 	rsbeq	r6, r8, r0, lsl #20
    9c58:	00687a08 	rsbeq	r7, r8, r8, lsl #20
    9c5c:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    9c60:	00687a9f 	mlseq	r8, pc, sl, r7	; <UNPREDICTABLE>
    9c64:	00687c08 	rsbeq	r7, r8, r8, lsl #24
    9c68:	50000108 	andpl	r0, r0, r8, lsl #2
    9c6c:	0800687c 	stmdaeq	r0, {r2, r3, r4, r5, r6, fp, sp, lr}
    9c70:	08006888 	stmdaeq	r0, {r3, r7, fp, sp, lr}
    9c74:	9f320002 	svcls	0x00320002
    9c78:	0800688c 	stmdaeq	r0, {r2, r3, r7, fp, sp, lr}
    9c7c:	080068aa 	stmdaeq	r0, {r1, r3, r5, r7, fp, sp, lr}
    9c80:	9f320002 	svcls	0x00320002
    9c84:	080068b4 	stmdaeq	r0, {r2, r4, r5, r7, fp, sp, lr}
    9c88:	080068ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, fp, sp, lr}
    9c8c:	ba500001 	blt	1409c98 <__Stack_Size+0x1409498>
    9c90:	ca080068 	bgt	209e38 <__Stack_Size+0x209638>
    9c94:	02080068 	andeq	r0, r8, #104	; 0x68
    9c98:	ca9f3200 	bgt	fe7d64a0 <BootRAM+0xd746c41>
    9c9c:	cc080068 	stcgt	0, cr0, [r8], {104}	; 0x68
    9ca0:	01080068 	tsteq	r8, r8, rrx
    9ca4:	68cc5000 	stmiavs	ip, {ip, lr}^
    9ca8:	68e60800 	stmiavs	r6!, {fp}^
    9cac:	00020800 	andeq	r0, r2, r0, lsl #16
    9cb0:	68e69f32 	stmiavs	r6!, {r1, r4, r5, r8, r9, sl, fp, ip, pc}^
    9cb4:	68e80800 	stmiavs	r8!, {fp}^
    9cb8:	00010800 	andeq	r0, r1, r0, lsl #16
    9cbc:	0068e850 	rsbeq	lr, r8, r0, asr r8
    9cc0:	0068f408 	rsbeq	pc, r8, r8, lsl #8
    9cc4:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    9cc8:	0068f49f 	mlseq	r8, pc, r4, pc	; <UNPREDICTABLE>
    9ccc:	0068f608 	rsbeq	pc, r8, r8, lsl #12
    9cd0:	50000108 	andpl	r0, r0, r8, lsl #2
    9cd4:	080068f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, fp, sp, lr}
    9cd8:	08006906 	stmdaeq	r0, {r1, r2, r8, fp, sp, lr}
    9cdc:	9f320002 	svcls	0x00320002
    9ce0:	08006906 	stmdaeq	r0, {r1, r2, r8, fp, sp, lr}
    9ce4:	0800690e 	stmdaeq	r0, {r1, r2, r3, r8, fp, sp, lr}
    9ce8:	26500001 	ldrbcs	r0, [r0], -r1
    9cec:	28080069 	stmdacs	r8, {r0, r3, r5, r6}
    9cf0:	01080069 	tsteq	r8, r9, rrx
    9cf4:	00005000 	andeq	r5, r0, r0
    9cf8:	00000000 	andeq	r0, r0, r0
    9cfc:	686a0000 	stmdavs	sl!, {}^	; <UNPREDICTABLE>
    9d00:	692e0800 	stmdbvs	lr!, {fp}
    9d04:	00010800 	andeq	r0, r1, r0, lsl #16
    9d08:	00000054 	andeq	r0, r0, r4, asr r0
    9d0c:	00000000 	andeq	r0, r0, r0
    9d10:	00690e00 	rsbeq	r0, r9, r0, lsl #28
    9d14:	00692608 	rsbeq	r2, r9, r8, lsl #12
    9d18:	36000208 	strcc	r0, [r0], -r8, lsl #4
    9d1c:	0069289f 	mlseq	r9, pc, r8, r2	; <UNPREDICTABLE>
    9d20:	00692e08 	rsbeq	r2, r9, r8, lsl #28
    9d24:	53000108 	movwpl	r0, #264	; 0x108
	...
    9d30:	0800692e 	stmdaeq	r0, {r1, r2, r3, r5, r8, fp, sp, lr}
    9d34:	08006944 	stmdaeq	r0, {r2, r6, r8, fp, sp, lr}
    9d38:	9f300002 	svcls	0x00300002
    9d3c:	08006944 	stmdaeq	r0, {r2, r6, r8, fp, sp, lr}
    9d40:	08006946 	stmdaeq	r0, {r1, r2, r6, r8, fp, sp, lr}
    9d44:	46530001 	ldrbmi	r0, [r3], -r1
    9d48:	4e080069 	cdpmi	0, 0, cr0, cr8, cr9, {3}
    9d4c:	02080069 	andeq	r0, r8, #105	; 0x69
    9d50:	4e9f3000 	cdpmi	0, 9, cr3, cr15, cr0, {0}
    9d54:	50080069 	andpl	r0, r8, r9, rrx
    9d58:	01080069 	tsteq	r8, r9, rrx
    9d5c:	69505300 	ldmdbvs	r0, {r8, r9, ip, lr}^
    9d60:	69580800 	ldmdbvs	r8, {fp}^
    9d64:	00020800 	andeq	r0, r2, r0, lsl #16
    9d68:	69589f30 	ldmdbvs	r8, {r4, r5, r8, r9, sl, fp, ip, pc}^
    9d6c:	695a0800 	ldmdbvs	sl, {fp}^
    9d70:	00010800 	andeq	r0, r1, r0, lsl #16
    9d74:	00695a53 	rsbeq	r5, r9, r3, asr sl
    9d78:	00696208 	rsbeq	r6, r9, r8, lsl #4
    9d7c:	30000208 	andcc	r0, r0, r8, lsl #4
    9d80:	0069629f 	mlseq	r9, pc, r2, r6	; <UNPREDICTABLE>
    9d84:	00696408 	rsbeq	r6, r9, r8, lsl #8
    9d88:	53000108 	movwpl	r0, #264	; 0x108
    9d8c:	08006964 	stmdaeq	r0, {r2, r5, r6, r8, fp, sp, lr}
    9d90:	08006a20 	stmdaeq	r0, {r5, r9, fp, sp, lr}
    9d94:	9f300002 	svcls	0x00300002
    9d98:	08006a20 	stmdaeq	r0, {r5, r9, fp, sp, lr}
    9d9c:	08006a2d 	stmdaeq	r0, {r0, r2, r3, r5, r9, fp, sp, lr}
    9da0:	e0530001 	subs	r0, r3, r1
    9da4:	ea08006a 	b	209f54 <__Stack_Size+0x209754>
    9da8:	0208006a 	andeq	r0, r8, #106	; 0x6a
    9dac:	ea9f3000 	b	fe7d5db4 <BootRAM+0xd746555>
    9db0:	0008006a 	andeq	r0, r8, sl, rrx
    9db4:	0608006b 	streq	r0, [r8], -fp, rrx
    9db8:	64750300 	ldrbtvs	r0, [r5], #-768	; 0x300
    9dbc:	009f0800 	addseq	r0, pc, r0, lsl #16
    9dc0:	00000000 	andeq	r0, r0, r0
    9dc4:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    9dc8:	3208006a 	andcc	r0, r8, #106	; 0x6a
    9dcc:	0208006a 	andeq	r0, r8, #106	; 0x6a
    9dd0:	3e9f3000 	cdpcc	0, 9, cr3, cr15, cr0, {0}
    9dd4:	5408006a 	strpl	r0, [r8], #-106	; 0x6a
    9dd8:	0108006a 	tsteq	r8, sl, rrx
    9ddc:	6a585000 	bvs	161dde4 <__Stack_Size+0x161d5e4>
    9de0:	6a600800 	bvs	180bde8 <__Stack_Size+0x180b5e8>
    9de4:	00010800 	andeq	r0, r1, r0, lsl #16
    9de8:	006a6450 	rsbeq	r6, sl, r0, asr r4
    9dec:	006a7208 	rsbeq	r7, sl, r8, lsl #4
    9df0:	50000108 	andpl	r0, r0, r8, lsl #2
    9df4:	08006acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, sp, lr}
    9df8:	08006ad8 	stmdaeq	r0, {r3, r4, r6, r7, r9, fp, sp, lr}
    9dfc:	00500001 	subseq	r0, r0, r1
    9e00:	00000000 	andeq	r0, r0, r0
    9e04:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    9e08:	26080069 	strcs	r0, [r8], -r9, rrx
    9e0c:	0108006a 	tsteq	r8, sl, rrx
    9e10:	6a325400 	bvs	c9ee18 <__Stack_Size+0xc9e618>
    9e14:	6a480800 	bvs	120be1c <__Stack_Size+0x120b61c>
    9e18:	00010800 	andeq	r0, r1, r0, lsl #16
    9e1c:	006ae054 	rsbeq	lr, sl, r4, asr r0
    9e20:	006b0008 	rsbeq	r0, fp, r8
    9e24:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    9e30:	080069b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, fp, sp, lr}
    9e34:	080069e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp, sp, lr}
    9e38:	00510001 	subseq	r0, r1, r1
    9e3c:	00000000 	andeq	r0, r0, r0
    9e40:	b6000000 	strlt	r0, [r0], -r0
    9e44:	e2080069 	and	r0, r8, #105	; 0x69
    9e48:	09080069 	stmdbeq	r8, {r0, r3, r5, r6}
    9e4c:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
    9e50:	ff081a70 			; <UNDEFINED> instruction: 0xff081a70
    9e54:	00009f1a 	andeq	r9, r0, sl, lsl pc
    9e58:	00000000 	andeq	r0, r0, r0
    9e5c:	692e0000 	stmdbvs	lr!, {}	; <UNPREDICTABLE>
    9e60:	6ad80800 	bvs	ff60be68 <BootRAM+0xe57c609>
    9e64:	00020800 	andeq	r0, r2, r0, lsl #16
    9e68:	6ae09f30 	bvs	ff831b30 <BootRAM+0xe7a22d1>
    9e6c:	6b000800 	blvs	be74 <__Stack_Size+0xb674>
    9e70:	00020800 	andeq	r0, r2, r0, lsl #16
    9e74:	00009f30 	andeq	r9, r0, r0, lsr pc
    9e78:	00000000 	andeq	r0, r0, r0
    9e7c:	69ce0000 	stmibvs	lr, {}^	; <UNPREDICTABLE>
    9e80:	69e20800 	stmibvs	r2!, {fp}^
    9e84:	00010800 	andeq	r0, r1, r0, lsl #16
    9e88:	00000052 	andeq	r0, r0, r2, asr r0
    9e8c:	00000000 	andeq	r0, r0, r0
    9e90:	00693a00 	rsbeq	r3, r9, r0, lsl #20
    9e94:	00693c08 	rsbeq	r3, r9, r8, lsl #24
    9e98:	73000208 	movwvc	r0, #520	; 0x208
    9e9c:	00693c03 	rsbeq	r3, r9, r3, lsl #24
    9ea0:	00696408 	rsbeq	r6, r9, r8, lsl #8
    9ea4:	52000108 	andpl	r0, r0, #8, 2
    9ea8:	08006a20 	stmdaeq	r0, {r5, r9, fp, sp, lr}
    9eac:	08006a22 	stmdaeq	r0, {r1, r5, r9, fp, sp, lr}
    9eb0:	00520001 	subseq	r0, r2, r1
    9eb4:	00000000 	andeq	r0, r0, r0
    9eb8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9ebc:	1208006b 	andne	r0, r8, #107	; 0x6b
    9ec0:	0108006b 	tsteq	r8, fp, rrx
    9ec4:	6b125300 	blvs	49eacc <__Stack_Size+0x49e2cc>
    9ec8:	6b230800 	blvs	8cbed0 <__Stack_Size+0x8cb6d0>
    9ecc:	00080800 	andeq	r0, r8, r0, lsl #16
    9ed0:	01940874 	orrseq	r0, r4, r4, ror r8
    9ed4:	9f1aff08 	svcls	0x001aff08
    9ed8:	08006b92 	stmdaeq	r0, {r1, r4, r7, r8, r9, fp, sp, lr}
    9edc:	08006b9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, fp, sp, lr}
    9ee0:	9a530001 	bls	14c9eec <__Stack_Size+0x14c96ec>
    9ee4:	9f08006b 	svcls	0x0008006b
    9ee8:	0808006b 	stmdaeq	r8, {r0, r1, r3, r5, r6}
    9eec:	94087400 	strls	r7, [r8], #-1024	; 0x400
    9ef0:	1aff0801 	bne	fffcbefc <BootRAM+0xef3c69d>
    9ef4:	006ba29f 	mlseq	fp, pc, r2, sl	; <UNPREDICTABLE>
    9ef8:	006baa08 	rsbeq	sl, fp, r8, lsl #20
    9efc:	53000108 	movwpl	r0, #264	; 0x108
	...
    9f08:	08006b10 	stmdaeq	r0, {r4, r8, r9, fp, sp, lr}
    9f0c:	08006b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, sp, lr}
    9f10:	10740003 	rsbsne	r0, r4, r3
    9f14:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9f18:	00000000 	andeq	r0, r0, r0
    9f1c:	006b1400 	rsbeq	r1, fp, r0, lsl #8
    9f20:	006b2308 	rsbeq	r2, fp, r8, lsl #6
    9f24:	52000108 	andpl	r0, r0, #8, 2
	...
    9f30:	08006b28 	stmdaeq	r0, {r3, r5, r8, r9, fp, sp, lr}
    9f34:	08006b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, sp, lr}
    9f38:	30500001 	subscc	r0, r0, r1
    9f3c:	4208006b 	andmi	r0, r8, #107	; 0x6b
    9f40:	0108006b 	tsteq	r8, fp, rrx
    9f44:	00005700 	andeq	r5, r0, r0, lsl #14
    9f48:	00000000 	andeq	r0, r0, r0
    9f4c:	6b1a0000 	blvs	689f54 <__Stack_Size+0x689754>
    9f50:	6b200800 	blvs	80bf58 <__Stack_Size+0x80b758>
    9f54:	00160800 	andseq	r0, r6, r0, lsl #16
    9f58:	40120076 	andsmi	r0, r2, r6, ror r0
    9f5c:	7222244b 	eorvc	r2, r2, #1258291200	; 0x4b000000
    9f60:	40141600 	andsmi	r1, r4, r0, lsl #12
    9f64:	2d22244b 	cfstrscs	mvf2, [r2, #-300]!	; 0xfffffed4
    9f68:	16000128 	strne	r0, [r0], -r8, lsr #2
    9f6c:	6b209f13 	blvs	831bc0 <__Stack_Size+0x8313c0>
    9f70:	6b420800 	blvs	108bf78 <__Stack_Size+0x108b778>
    9f74:	00010800 	andeq	r0, r1, r0, lsl #16
    9f78:	00000056 	andeq	r0, r0, r6, asr r0
    9f7c:	00000000 	andeq	r0, r0, r0
    9f80:	006bc800 	rsbeq	ip, fp, r0, lsl #16
    9f84:	006bf408 	rsbeq	pc, fp, r8, lsl #8
    9f88:	50000108 	andpl	r0, r0, r8, lsl #2
    9f8c:	08006bf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, fp, sp, lr}
    9f90:	08006c00 	stmdaeq	r0, {sl, fp, sp, lr}
    9f94:	01f30004 	mvnseq	r0, r4
    9f98:	00009f50 	andeq	r9, r0, r0, asr pc
    9f9c:	00000000 	andeq	r0, r0, r0
    9fa0:	6bce0000 	blvs	ff389fa8 <BootRAM+0xe2fa749>
    9fa4:	6bd00800 	blvs	ff40bfac <BootRAM+0xe37c74d>
    9fa8:	00020800 	andeq	r0, r2, r0, lsl #16
    9fac:	6bd09f30 	blvs	ff431c74 <BootRAM+0xe3a2415>
    9fb0:	6bf00800 	blvs	ffc0bfb8 <BootRAM+0xeb7c759>
    9fb4:	00010800 	andeq	r0, r1, r0, lsl #16
    9fb8:	00000053 	andeq	r0, r0, r3, asr r0
    9fbc:	00000000 	andeq	r0, r0, r0
    9fc0:	006bce00 	rsbeq	ip, fp, r0, lsl #28
    9fc4:	006bf808 	rsbeq	pc, fp, r8, lsl #16
    9fc8:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    9fd4:	08006c08 	stmdaeq	r0, {r3, sl, fp, sp, lr}
    9fd8:	08006c13 	stmdaeq	r0, {r0, r1, r4, sl, fp, sp, lr}
    9fdc:	18520001 	ldmdane	r2, {r0}^
    9fe0:	1a08006c 	bne	20a198 <__Stack_Size+0x209998>
    9fe4:	0108006c 	tsteq	r8, ip, rrx
    9fe8:	6c1a5300 	ldcvs	3, cr5, [sl], {-0}
    9fec:	6c200800 	stcvs	8, cr0, [r0], #-0
    9ff0:	00010800 	andeq	r0, r1, r0, lsl #16
    9ff4:	006c2052 	rsbeq	r2, ip, r2, asr r0
    9ff8:	006c2f08 	rsbeq	r2, ip, r8, lsl #30
    9ffc:	73000808 	movwvc	r0, #2056	; 0x808
    a000:	08019408 	stmdaeq	r1, {r3, sl, ip, pc}
    a004:	429f1aff 	addsmi	r1, pc, #1044480	; 0xff000
    a008:	4d08006c 	stcmi	0, cr0, [r8, #-432]	; 0xfffffe50
    a00c:	0108006c 	tsteq	r8, ip, rrx
    a010:	00005300 	andeq	r5, r0, r0, lsl #6
    a014:	00000000 	andeq	r0, r0, r0
    a018:	6c5c0000 	mravs	r0, ip, acc0
    a01c:	6c740800 	ldclvs	8, cr0, [r4], #-0
    a020:	00010800 	andeq	r0, r1, r0, lsl #16
    a024:	006c7450 	rsbeq	r7, ip, r0, asr r4
    a028:	006c7608 	rsbeq	r7, ip, r8, lsl #12
    a02c:	70000308 	andvc	r0, r0, r8, lsl #6
    a030:	6c769f7e 	ldclvs	15, cr9, [r6], #-504	; 0xfffffe08
    a034:	6c860800 	stcvs	8, cr0, [r6], {0}
    a038:	00030800 	andeq	r0, r3, r0, lsl #16
    a03c:	869f7f70 			; <UNDEFINED> instruction: 0x869f7f70
    a040:	8a08006c 	bhi	20a1f8 <__Stack_Size+0x2099f8>
    a044:	0108006c 	tsteq	r8, ip, rrx
    a048:	6c8a5000 	stcvs	0, cr5, [sl], {0}
    a04c:	6c8c0800 	stcvs	8, cr0, [ip], {0}
    a050:	00030800 	andeq	r0, r3, r0, lsl #16
    a054:	009f7e70 	addseq	r7, pc, r0, ror lr	; <UNPREDICTABLE>
    a058:	00000000 	andeq	r0, r0, r0
    a05c:	5c000000 	stcpl	0, cr0, [r0], {-0}
    a060:	6208006c 	andvs	r0, r8, #108	; 0x6c
    a064:	0108006c 	tsteq	r8, ip, rrx
    a068:	6c625100 	stfvse	f5, [r2], #-0
    a06c:	6c8c0800 	stcvs	8, cr0, [ip], {0}
    a070:	00040800 	andeq	r0, r4, r0, lsl #16
    a074:	9f5101f3 	svcls	0x005101f3
	...
    a080:	08006c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, sp, lr}
    a084:	08006c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, sp, lr}
    a088:	64520001 	ldrbvs	r0, [r2], #-1
    a08c:	8c08006c 	stchi	0, cr0, [r8], {108}	; 0x6c
    a090:	0408006c 	streq	r0, [r8], #-108	; 0x6c
    a094:	5201f300 	andpl	pc, r1, #0, 6
    a098:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    a09c:	00000000 	andeq	r0, r0, r0
    a0a0:	006c6c00 	rsbeq	r6, ip, r0, lsl #24
    a0a4:	006c6e08 	rsbeq	r6, ip, r8, lsl #28
    a0a8:	52000108 	andpl	r0, r0, #8, 2
    a0ac:	08006c6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, fp, sp, lr}
    a0b0:	08006c86 	stmdaeq	r0, {r1, r2, r7, sl, fp, sp, lr}
    a0b4:	01f3000f 	mvnseq	r0, pc
    a0b8:	ffff0a52 			; <UNDEFINED> instruction: 0xffff0a52
    a0bc:	3101231a 	tstcc	r1, sl, lsl r3
    a0c0:	1c007326 	stcne	3, cr7, [r0], {38}	; 0x26
    a0c4:	006c869f 	mlseq	ip, pc, r6, r8	; <UNPREDICTABLE>
    a0c8:	006c8808 	rsbeq	r8, ip, r8, lsl #16
    a0cc:	f3001008 	vhadd.u8	d1, d0, d8
    a0d0:	ff0a5201 			; <UNDEFINED> instruction: 0xff0a5201
    a0d4:	01231aff 	strdeq	r1, [r3, -pc]!
    a0d8:	00732631 	rsbseq	r2, r3, r1, lsr r6
    a0dc:	889f2220 	ldmhi	pc, {r5, r9, sp}	; <UNPREDICTABLE>
    a0e0:	8c08006c 	stchi	0, cr0, [r8], {108}	; 0x6c
    a0e4:	0f08006c 	svceq	0x0008006c
    a0e8:	5201f300 	andpl	pc, r1, #0, 6
    a0ec:	1affff0a 	bne	9d1c <__Stack_Size+0x951c>
    a0f0:	26310123 	ldrtcs	r0, [r1], -r3, lsr #2
    a0f4:	9f1c0073 	svcls	0x001c0073
	...
    a100:	08006c76 	stmdaeq	r0, {r1, r2, r4, r5, r6, sl, fp, sp, lr}
    a104:	08006c7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, fp, sp, lr}
    a108:	7e700008 	cdpvc	0, 7, cr0, cr0, cr8, {0}
    a10c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    a110:	6c7e9f1a 	ldclvs	15, cr9, [lr], #-104	; 0xffffff98
    a114:	6c820800 	stcvs	8, cr0, [r2], {0}
    a118:	00010800 	andeq	r0, r1, r0, lsl #16
    a11c:	006c8254 	rsbeq	r8, ip, r4, asr r2
    a120:	006c8608 	rsbeq	r8, ip, r8, lsl #12
    a124:	70000808 	andvc	r0, r0, r8, lsl #16
    a128:	0801947e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, ip, pc}
    a12c:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    a130:	00000000 	andeq	r0, r0, r0
    a134:	76000000 	strvc	r0, [r0], -r0
    a138:	8608006c 	strhi	r0, [r8], -ip, rrx
    a13c:	1208006c 	andne	r0, r8, #108	; 0x6c
    a140:	947f7000 	ldrbtls	r7, [pc], #-0	; a148 <__Stack_Size+0x9948>
    a144:	1aff0801 	bne	fffcc150 <BootRAM+0xef3c8f1>
    a148:	7e702438 	mrcvc	4, 3, r2, cr0, cr8, {1}
    a14c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    a150:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    a154:	00000000 	andeq	r0, r0, r0
    a158:	6c000000 	stcvs	0, cr0, [r0], {-0}
    a15c:	6e08006c 	cdpvs	0, 0, cr0, cr8, cr12, {3}
    a160:	0108006c 	tsteq	r8, ip, rrx
    a164:	6c865100 	stfvss	f5, [r6], {0}
    a168:	6c880800 	stcvs	8, cr0, [r8], {0}
    a16c:	000a0800 	andeq	r0, sl, r0, lsl #16
    a170:	24320073 	ldrtcs	r0, [r2], #-115	; 0x73
    a174:	23220071 	teqcs	r2, #113	; 0x71
    a178:	6c889f04 	stcvs	15, cr9, [r8], {4}
    a17c:	6c8a0800 	stcvs	8, cr0, [sl], {0}
    a180:	000a0800 	andeq	r0, sl, r0, lsl #16
    a184:	24327f73 	ldrtcs	r7, [r2], #-3955	; 0xf73
    a188:	23220071 	teqcs	r2, #113	; 0x71
    a18c:	00009f04 	andeq	r9, r0, r4, lsl #30
    a190:	00000000 	andeq	r0, r0, r0
    a194:	6c8c0000 	stcvs	0, cr0, [ip], {0}
    a198:	6c9e0800 	ldcvs	8, cr0, [lr], {0}
    a19c:	00010800 	andeq	r0, r1, r0, lsl #16
    a1a0:	006caa50 	rsbeq	sl, ip, r0, asr sl
    a1a4:	006cac08 	rsbeq	sl, ip, r8, lsl #24
    a1a8:	73000a08 	movwvc	r0, #2568	; 0xa08
    a1ac:	70243100 	eorvc	r3, r4, r0, lsl #2
    a1b0:	02232200 	eoreq	r2, r3, #0, 4
    a1b4:	006cac9f 	mlseq	ip, pc, ip, sl	; <UNPREDICTABLE>
    a1b8:	006cae08 	rsbeq	sl, ip, r8, lsl #28
    a1bc:	73000a08 	movwvc	r0, #2568	; 0xa08
    a1c0:	7024317f 	eorvc	r3, r4, pc, ror r1
    a1c4:	02232200 	eoreq	r2, r3, #0, 4
    a1c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    a1cc:	00000000 	andeq	r0, r0, r0
    a1d0:	006c8c00 	rsbeq	r8, ip, r0, lsl #24
    a1d4:	006c9208 	rsbeq	r9, ip, r8, lsl #4
    a1d8:	51000108 	tstpl	r0, r8, lsl #2
    a1dc:	08006c92 	stmdaeq	r0, {r1, r4, r7, sl, fp, sp, lr}
    a1e0:	08006cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, sp, lr}
    a1e4:	01f30004 	mvnseq	r0, r4
    a1e8:	00009f51 	andeq	r9, r0, r1, asr pc
    a1ec:	00000000 	andeq	r0, r0, r0
    a1f0:	6c8c0000 	stcvs	0, cr0, [ip], {0}
    a1f4:	6c940800 	ldcvs	8, cr0, [r4], {0}
    a1f8:	00010800 	andeq	r0, r1, r0, lsl #16
    a1fc:	006c9452 	rsbeq	r9, ip, r2, asr r4
    a200:	006cb008 	rsbeq	fp, ip, r8
    a204:	f3000408 	vshl.u8	d0, d8, d0
    a208:	009f5201 	addseq	r5, pc, r1, lsl #4
    a20c:	00000000 	andeq	r0, r0, r0
    a210:	9c000000 	stcls	0, cr0, [r0], {-0}
    a214:	9e08006c 	cdpls	0, 0, cr0, cr8, cr12, {3}
    a218:	0108006c 	tsteq	r8, ip, rrx
    a21c:	6c9e5200 	lfmvs	f5, 4, [lr], {0}
    a220:	6caa0800 	stcvs	8, cr0, [sl]
    a224:	000f0800 	andeq	r0, pc, r0, lsl #16
    a228:	0a5201f3 	beq	148a9fc <__Stack_Size+0x148a1fc>
    a22c:	231affff 	tstcs	sl, #1020	; 0x3fc
    a230:	73263101 	teqvc	r6, #1073741824	; 0x40000000
    a234:	aa9f1c00 	bge	fe7d123c <BootRAM+0xd7419dd>
    a238:	ac08006c 	stcge	0, cr0, [r8], {108}	; 0x6c
    a23c:	1008006c 	andne	r0, r8, ip, rrx
    a240:	5201f300 	andpl	pc, r1, #0, 6
    a244:	1affff0a 	bne	9e74 <__Stack_Size+0x9674>
    a248:	26310123 	ldrtcs	r0, [r1], -r3, lsr #2
    a24c:	22200073 	eorcs	r0, r0, #115	; 0x73
    a250:	006cac9f 	mlseq	ip, pc, ip, sl	; <UNPREDICTABLE>
    a254:	006cb008 	rsbeq	fp, ip, r8
    a258:	f3000f08 	vpmax.f32	d0, d0, d8
    a25c:	ff0a5201 			; <UNDEFINED> instruction: 0xff0a5201
    a260:	01231aff 	strdeq	r1, [r3, -pc]!
    a264:	00732631 	rsbseq	r2, r3, r1, lsr r6
    a268:	00009f1c 	andeq	r9, r0, ip, lsl pc
    a26c:	00000000 	andeq	r0, r0, r0
    a270:	6c9c0000 	ldcvs	0, cr0, [ip], {0}
    a274:	6c9e0800 	ldcvs	8, cr0, [lr], {0}
    a278:	00010800 	andeq	r0, r1, r0, lsl #16
    a27c:	006ca251 	rsbeq	sl, ip, r1, asr r2
    a280:	006cac08 	rsbeq	sl, ip, r8, lsl #24
    a284:	73000a08 	movwvc	r0, #2568	; 0xa08
    a288:	71243200 	teqvc	r4, r0, lsl #4
    a28c:	04232200 	strteq	r2, [r3], #-512	; 0x200
    a290:	006cac9f 	mlseq	ip, pc, ip, sl	; <UNPREDICTABLE>
    a294:	006cae08 	rsbeq	sl, ip, r8, lsl #28
    a298:	73000a08 	movwvc	r0, #2568	; 0xa08
    a29c:	7124327f 	teqvc	r4, pc, ror r2
    a2a0:	04232200 	strteq	r2, [r3], #-512	; 0x200
    a2a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    a2a8:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000000 	andeq	r0, r0, r0
   8:	08000b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp}
   c:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
  14:	08000b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp}
	...
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	08000b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp}
  24:	08000b9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, fp}
  28:	08000b9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, fp}
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
  34:	08000b9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp}
  38:	08000b9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	08000ba8 	stmdaeq	r0, {r3, r5, r7, r8, r9, fp}

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	08000ba8 	stmdaeq	r0, {r3, r5, r7, r8, r9, fp}
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	08000baa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, fp}
  48:	08000bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp}
  4c:	08000bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp}

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	08000bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp}
  54:	08000bc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, fp}
  58:	08000bc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, fp}
  5c:	08000bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp}
  60:	08000bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp}
  64:	08000bca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, fp}
  68:	08000bca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, fp}
  6c:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
  70:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
  74:	08000bce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, fp}
  78:	08000bce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, fp}
  7c:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
  80:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
  84:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
  88:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
  8c:	08000c84 	stmdaeq	r0, {r2, r7, sl, fp}
  90:	08000c84 	stmdaeq	r0, {r2, r7, sl, fp}
  94:	08000ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp}
  98:	08000ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp}
  9c:	08000cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp}
  a0:	08000cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp}
  a4:	08000cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp}
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
  a8:	08000cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp}
				{
					state_in->step = step_c;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
  ac:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
  b0:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
  b4:	08000d28 	stmdaeq	r0, {r3, r5, r8, sl, fp}
			*plainchar    = (fragment & 0x003) << 6;
  b8:	08000d28 	stmdaeq	r0, {r3, r5, r8, sl, fp}
  bc:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
	state_in->plainchar = 0;
}

int base64_decode_block(const char* code_in, const int length_in, char* plaintext_out, base64_decodestate* state_in)
{
	const char* codechar = code_in;
  c0:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
			*plainchar    = (fragment & 0x003) << 6;
	case step_d:
			do {
				if (codechar == code_in+length_in)
  c4:	08000db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp}
  c8:	00000001 	andeq	r0, r0, r1
				{
					state_in->step = step_d;
  cc:	00000001 	andeq	r0, r0, r1
					state_in->plainchar = *plainchar;
  d0:	08000db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp}
					return plainchar - plaintext_out;
  d4:	08000dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp}
  d8:	08000dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp}
				}
				fragment = (char)base64_decode_value(*codechar++);
  dc:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
  e0:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
  e4:	08000e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp}
  e8:	08000e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp}
				{
					state_in->step = step_d;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
  ec:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
  f0:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
  f4:	08000ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp}
		}
  f8:	08000ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp}
	}
	/* control should not reach here */
	return plainchar - plaintext_out;
}
  fc:	08000ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp}
	uint8_t x1z1[F25519_SIZE];
	uint8_t a[F25519_SIZE];

	f25519_mul__distinct(x1sq, x1, x1);
	f25519_mul__distinct(z1sq, z1, z1);
	f25519_mul__distinct(x1z1, x1, z1);
 100:	08000ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp}
 104:	08000f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp}

	f25519_sub(a, x1sq, z1sq);
 108:	08000f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp}
 10c:	08000f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp}
	f25519_mul__distinct(x3, a, a);
 110:	08000f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp}
 114:	08000f7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, sl, fp}
 118:	08000f80 	stmdaeq	r0, {r7, r8, r9, sl, fp}

	f25519_mul_c(a, x1z1, 486662);
 11c:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
 120:	00000001 	andeq	r0, r0, r1
	f25519_add(a, x1sq, a);
 124:	00000001 	andeq	r0, r0, r1
	...
	f25519_add(a, z1sq, a);
 130:	00000001 	andeq	r0, r0, r1
 134:	00000001 	andeq	r0, r0, r1
	f25519_mul__distinct(x1sq, x1z1, a);
 138:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
 13c:	08001066 	stmdaeq	r0, {r1, r2, r5, r6, ip}
 140:	08001068 	stmdaeq	r0, {r3, r5, r6, ip}
	f25519_mul_c(z3, x1sq, 4);
 144:	08001100 	stmdaeq	r0, {r8, ip}
 148:	08001100 	stmdaeq	r0, {r8, ip}
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
 14c:	080011fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, ip}
	...
	f25519_sub(b, x3, z3); /* D */
 158:	080011fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, ip}
 15c:	08001212 	stmdaeq	r0, {r1, r4, r9, ip}
	f25519_mul__distinct(da, a, b);
 160:	08001212 	stmdaeq	r0, {r1, r4, r9, ip}
 164:	08001224 	stmdaeq	r0, {r2, r5, r9, ip}
 168:	08001224 	stmdaeq	r0, {r2, r5, r9, ip}

	f25519_sub(b, x2, z2);
 16c:	08001274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip}
 170:	08001274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip}
	f25519_add(a, x3, z3); /* C */
 174:	0800127e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, ip}
 178:	0800127e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, ip}
 17c:	08001294 	stmdaeq	r0, {r2, r4, r7, r9, ip}
	f25519_mul__distinct(cb, a, b);
 180:	08001294 	stmdaeq	r0, {r2, r4, r7, r9, ip}
 184:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}

	f25519_add(a, da, cb);
 188:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
 18c:	080012d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, ip}
 190:	080012d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip}
	f25519_mul__distinct(b, a, a);
 194:	08001374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip}
 198:	08001374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip}
	f25519_mul__distinct(x5, z1, b);
 19c:	0800139c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, ip}
 1a0:	0800139c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, ip}
 1a4:	08001424 	stmdaeq	r0, {r2, r5, sl, ip}

	f25519_sub(a, da, cb);
 1a8:	08001424 	stmdaeq	r0, {r2, r5, sl, ip}
 1ac:	0800146c 	stmdaeq	r0, {r2, r3, r5, r6, sl, ip}
	f25519_mul__distinct(b, a, a);
 1b0:	0800146c 	stmdaeq	r0, {r2, r3, r5, r6, sl, ip}
 1b4:	080014cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, ip}
 1b8:	080014cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, ip}

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
 1bc:	080014e0 	stmdaeq	r0, {r5, r6, r7, sl, ip}
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
 1c0:	080014e0 	stmdaeq	r0, {r5, r6, r7, sl, ip}
 1c4:	080014fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip}

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
 1c8:	080014fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip}
 1cc:	08001528 	stmdaeq	r0, {r3, r5, r8, sl, ip}
 1d0:	08001528 	stmdaeq	r0, {r3, r5, r8, sl, ip}
 1d4:	08001540 	stmdaeq	r0, {r6, r8, sl, ip}
		f25519_select(zm1, zm1, zm, bit);
 1d8:	00000001 	andeq	r0, r0, r1
 1dc:	00000001 	andeq	r0, r0, r1
 1e0:	00000001 	andeq	r0, r0, r1
		f25519_select(xm, xm, xms, bit);
 1e4:	00000001 	andeq	r0, r0, r1
 1e8:	08001540 	stmdaeq	r0, {r6, r8, sl, ip}
 1ec:	080015ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, ip}
		f25519_select(zm, zm, zms, bit);
 1f0:	080015ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, ip}
 1f4:	080015d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, ip}
 1f8:	080015d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, ip}
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
 1fc:	080015ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl, ip}
 200:	080015f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip}
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
 204:	08001604 	stmdaeq	r0, {r2, r9, sl, ip}
 208:	08001604 	stmdaeq	r0, {r2, r9, sl, ip}
	f25519_mul__distinct(result, zm1, xm);
 20c:	08001638 	stmdaeq	r0, {r3, r4, r5, r9, sl, ip}
 210:	00000001 	andeq	r0, r0, r1
	f25519_normalize(result);
 214:	00000001 	andeq	r0, r0, r1
 218:	08001638 	stmdaeq	r0, {r3, r4, r5, r9, sl, ip}
}
 21c:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
 220:	08001684 	stmdaeq	r0, {r2, r7, r9, sl, ip}
 224:	08001690 	stmdaeq	r0, {r4, r7, r9, sl, ip}
 228:	08001690 	stmdaeq	r0, {r4, r7, r9, sl, ip}
 22c:	080016a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip}
 230:	080016a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip}
 234:	080016ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, ip}
 238:	080016bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, ip}
 23c:	080016cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip}
 240:	080016cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip}
 244:	080016e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, ip}
	...
 250:	080016e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, ip}
 254:	0800176c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, ip}
 258:	0800176c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, ip}
 25c:	080017b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, ip}
 260:	00000001 	andeq	r0, r0, r1
 264:	00000001 	andeq	r0, r0, r1
 268:	080017b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, ip}
 26c:	080017c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip}
 270:	080017c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip}
 274:	080017e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip}
 278:	080017e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip}
 27c:	08001808 	stmdaeq	r0, {r3, fp, ip}
 280:	08001808 	stmdaeq	r0, {r3, fp, ip}
 284:	0800183c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip}
 288:	0800183c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip}
 28c:	08001894 	stmdaeq	r0, {r2, r4, r7, fp, ip}
 290:	08001894 	stmdaeq	r0, {r2, r4, r7, fp, ip}
 294:	08001af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip}
 298:	00000001 	andeq	r0, r0, r1
 29c:	00000001 	andeq	r0, r0, r1
 2a0:	00000001 	andeq	r0, r0, r1
 2a4:	00000001 	andeq	r0, r0, r1
 2a8:	08001af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip}
 2ac:	08001b00 	stmdaeq	r0, {r8, r9, fp, ip}
 2b0:	00000001 	andeq	r0, r0, r1
 2b4:	00000001 	andeq	r0, r0, r1
 2b8:	08001b00 	stmdaeq	r0, {r8, r9, fp, ip}
 2bc:	08001b02 	stmdaeq	r0, {r1, r8, r9, fp, ip}
	...
 2c8:	00000001 	andeq	r0, r0, r1
 2cc:	00000001 	andeq	r0, r0, r1
 2d0:	00000001 	andeq	r0, r0, r1
 2d4:	00000001 	andeq	r0, r0, r1
 2d8:	00000001 	andeq	r0, r0, r1
 2dc:	00000001 	andeq	r0, r0, r1
 2e0:	00000001 	andeq	r0, r0, r1
 2e4:	00000001 	andeq	r0, r0, r1
 2e8:	00000001 	andeq	r0, r0, r1
 2ec:	00000001 	andeq	r0, r0, r1
	...
 2f8:	00000001 	andeq	r0, r0, r1
 2fc:	00000001 	andeq	r0, r0, r1
 300:	00000001 	andeq	r0, r0, r1
 304:	00000001 	andeq	r0, r0, r1
	...
 310:	00000001 	andeq	r0, r0, r1
 314:	00000001 	andeq	r0, r0, r1
 318:	00000001 	andeq	r0, r0, r1
 31c:	00000001 	andeq	r0, r0, r1
 320:	00000001 	andeq	r0, r0, r1
 324:	00000001 	andeq	r0, r0, r1
	...
 330:	00000001 	andeq	r0, r0, r1
 334:	00000001 	andeq	r0, r0, r1
 338:	00000001 	andeq	r0, r0, r1
 33c:	00000001 	andeq	r0, r0, r1
	...
 348:	00000001 	andeq	r0, r0, r1
 34c:	00000001 	andeq	r0, r0, r1
	...
 358:	08001b30 	stmdaeq	r0, {r4, r5, r8, r9, fp, ip}
 35c:	08001b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, ip}
 360:	08001b3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, fp, ip}
 364:	08001b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, ip}
 368:	08001b52 	stmdaeq	r0, {r1, r4, r6, r8, r9, fp, ip}
 36c:	08001b56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, fp, ip}
 370:	08001b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip}
 374:	08001b5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, fp, ip}
	...
 380:	08001c14 	stmdaeq	r0, {r2, r4, sl, fp, ip}
 384:	08001c1e 	stmdaeq	r0, {r1, r2, r3, r4, sl, fp, ip}
 388:	08001c24 	stmdaeq	r0, {r2, r5, sl, fp, ip}
 38c:	08001c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, ip}
 390:	08001c3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, sl, fp, ip}
 394:	08001c42 	stmdaeq	r0, {r1, r6, sl, fp, ip}
 398:	08001c48 	stmdaeq	r0, {r3, r6, sl, fp, ip}
 39c:	08001c4e 	stmdaeq	r0, {r1, r2, r3, r6, sl, fp, ip}
	...
 3a8:	08001e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip}
 3ac:	08001ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, ip}
 3b0:	08001ece 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, fp, ip}
 3b4:	08001ed6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, fp, ip}
	...
 3c0:	08001b04 	stmdaeq	r0, {r2, r8, r9, fp, ip}
 3c4:	08001b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, ip}
 3c8:	08001b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, ip}
 3cc:	08001bae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, fp, ip}
 3d0:	08001bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp, ip}
 3d4:	08001c0e 	stmdaeq	r0, {r1, r2, r3, sl, fp, ip}
 3d8:	08001c10 	stmdaeq	r0, {r4, sl, fp, ip}
 3dc:	08001cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, ip}
 3e0:	08001cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, ip}
 3e4:	08001db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, ip}
 3e8:	08001db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, ip}
 3ec:	08001e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip}
 3f0:	08001e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip}
 3f4:	08001ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, ip}
	...
 400:	08001ef2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl, fp, ip}
 404:	08001ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, ip}
 408:	08001ef6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, fp, ip}
 40c:	08001ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp, ip}
 410:	08001efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 414:	08001f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, ip}
	...
 420:	08001f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, ip}
 424:	08001f4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, fp, ip}
 428:	08001f4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, fp, ip}
 42c:	08001f4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sl, fp, ip}
 430:	08001f56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, fp, ip}
 434:	08001f66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, fp, ip}
 438:	08001f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, ip}
 43c:	08001f6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, fp, ip}
	...
 448:	08002032 	stmdaeq	r0, {r1, r4, r5, sp}
 44c:	08002036 	stmdaeq	r0, {r1, r2, r4, r5, sp}
 450:	0800203e 	stmdaeq	r0, {r1, r2, r3, r4, r5, sp}
 454:	08002058 	stmdaeq	r0, {r3, r4, r6, sp}
	...
 460:	08001ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, ip}
 464:	08001f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, ip}
 468:	08001f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, ip}
 46c:	08001fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip}
 470:	08001fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip}
 474:	0800200c 	stmdaeq	r0, {r2, r3, sp}
 478:	0800200c 	stmdaeq	r0, {r2, r3, sp}
 47c:	08002024 	stmdaeq	r0, {r2, r5, sp}
 480:	08002024 	stmdaeq	r0, {r2, r5, sp}
 484:	080020e4 	stmdaeq	r0, {r2, r5, r6, r7, sp}
 488:	080020e4 	stmdaeq	r0, {r2, r5, r6, r7, sp}
 48c:	080021a4 	stmdaeq	r0, {r2, r5, r7, r8, sp}
	...
 498:	08002204 	stmdaeq	r0, {r2, r9, sp}
 49c:	08002206 	stmdaeq	r0, {r1, r2, r9, sp}
 4a0:	0800220c 	stmdaeq	r0, {r2, r3, r9, sp}
 4a4:	08002210 	stmdaeq	r0, {r4, r9, sp}
 4a8:	08002214 	stmdaeq	r0, {r2, r4, r9, sp}
 4ac:	0800222a 	stmdaeq	r0, {r1, r3, r5, r9, sp}
	...
 4b8:	00000001 	andeq	r0, r0, r1
 4bc:	00000001 	andeq	r0, r0, r1
 4c0:	00000001 	andeq	r0, r0, r1
 4c4:	00000001 	andeq	r0, r0, r1
	...
 4d0:	080024fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, sp}
 4d4:	080024fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, sl, sp}
 4d8:	08002500 	stmdaeq	r0, {r8, sl, sp}
 4dc:	08002584 	stmdaeq	r0, {r2, r7, r8, sl, sp}
	...
 4e8:	08002584 	stmdaeq	r0, {r2, r7, r8, sl, sp}
 4ec:	080025f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sl, sp}
 4f0:	080025fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, sp}
 4f4:	08002602 	stmdaeq	r0, {r1, r9, sl, sp}
	...
 500:	080025f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sl, sp}
 504:	080025fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, sp}
 508:	08002602 	stmdaeq	r0, {r1, r9, sl, sp}
 50c:	08002684 	stmdaeq	r0, {r2, r7, r9, sl, sp}
	...
 518:	080025f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sl, sp}
 51c:	080025fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, sp}
 520:	08002602 	stmdaeq	r0, {r1, r9, sl, sp}
 524:	0800264c 	stmdaeq	r0, {r2, r3, r6, r9, sl, sp}
	...
 530:	08002ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, sp}
 534:	08002aea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, fp, sp}
 538:	08002af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, sp}
 53c:	08002b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, sp}
	...
 548:	08002bb2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, fp, sp}
 54c:	08002c36 	stmdaeq	r0, {r1, r2, r4, r5, sl, fp, sp}
 550:	08002c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp}
 554:	08002c42 	stmdaeq	r0, {r1, r6, sl, fp, sp}
	...
 560:	08002c36 	stmdaeq	r0, {r1, r2, r4, r5, sl, fp, sp}
 564:	08002c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp}
 568:	08002c42 	stmdaeq	r0, {r1, r6, sl, fp, sp}
 56c:	08002cc6 	stmdaeq	r0, {r1, r2, r6, r7, sl, fp, sp}
	...
 578:	08002c36 	stmdaeq	r0, {r1, r2, r4, r5, sl, fp, sp}
 57c:	08002c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp}
 580:	08002c42 	stmdaeq	r0, {r1, r6, sl, fp, sp}
 584:	08002c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, sp}
	...
 590:	08002fd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, fp, sp}
 594:	0800301a 	stmdaeq	r0, {r1, r3, r4, ip, sp}
 598:	0800301e 	stmdaeq	r0, {r1, r2, r3, r4, ip, sp}
 59c:	08003024 	stmdaeq	r0, {r2, r5, ip, sp}
	...
 5a8:	0800301a 	stmdaeq	r0, {r1, r3, r4, ip, sp}
 5ac:	0800301e 	stmdaeq	r0, {r1, r2, r3, r4, ip, sp}
 5b0:	08003024 	stmdaeq	r0, {r2, r5, ip, sp}
 5b4:	080030a0 	stmdaeq	r0, {r5, r7, ip, sp}
	...
 5c0:	0800301a 	stmdaeq	r0, {r1, r3, r4, ip, sp}
 5c4:	0800301e 	stmdaeq	r0, {r1, r2, r3, r4, ip, sp}
 5c8:	08003024 	stmdaeq	r0, {r2, r5, ip, sp}
 5cc:	0800306a 	stmdaeq	r0, {r1, r3, r5, r6, ip, sp}
	...
 5d8:	080021a4 	stmdaeq	r0, {r2, r5, r7, r8, sp}
 5dc:	080021c2 	stmdaeq	r0, {r1, r6, r7, r8, sp}
 5e0:	080021c4 	stmdaeq	r0, {r2, r6, r7, r8, sp}
 5e4:	08002232 	stmdaeq	r0, {r1, r4, r5, r9, sp}
 5e8:	08002234 	stmdaeq	r0, {r2, r4, r5, r9, sp}
 5ec:	080022ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sp}
 5f0:	080022d0 	stmdaeq	r0, {r4, r6, r7, r9, sp}
 5f4:	08002392 	stmdaeq	r0, {r1, r4, r7, r8, r9, sp}
 5f8:	08002394 	stmdaeq	r0, {r2, r4, r7, r8, r9, sp}
 5fc:	080023da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sp}
 600:	080023dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sp}
 604:	08002428 	stmdaeq	r0, {r3, r5, sl, sp}
 608:	08002428 	stmdaeq	r0, {r3, r5, sl, sp}
 60c:	0800246e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, sp}
 610:	08002470 	stmdaeq	r0, {r4, r5, r6, sl, sp}
 614:	080024f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, sp}
 618:	00000001 	andeq	r0, r0, r1
 61c:	00000001 	andeq	r0, r0, r1
 620:	00000001 	andeq	r0, r0, r1
 624:	00000001 	andeq	r0, r0, r1
 628:	080024f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, sp}
 62c:	08002ae2 	stmdaeq	r0, {r1, r5, r6, r7, r9, fp, sp}
 630:	00000001 	andeq	r0, r0, r1
 634:	00000001 	andeq	r0, r0, r1
 638:	08002ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, sp}
 63c:	08003118 	stmdaeq	r0, {r3, r4, r8, ip, sp}
	...
 648:	08003126 	stmdaeq	r0, {r1, r2, r5, r8, ip, sp}
 64c:	08003144 	stmdaeq	r0, {r2, r6, r8, ip, sp}
 650:	08003298 	stmdaeq	r0, {r3, r4, r7, r9, ip, sp}
 654:	080032a4 	stmdaeq	r0, {r2, r5, r7, r9, ip, sp}
 658:	080032b2 	stmdaeq	r0, {r1, r4, r5, r7, r9, ip, sp}
 65c:	080032b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, ip, sp}
	...
 668:	08003236 	stmdaeq	r0, {r1, r2, r4, r5, r9, ip, sp}
 66c:	08003238 	stmdaeq	r0, {r3, r4, r5, r9, ip, sp}
 670:	0800323c 	stmdaeq	r0, {r2, r3, r4, r5, r9, ip, sp}
 674:	08003250 	stmdaeq	r0, {r4, r6, r9, ip, sp}
	...
 680:	08003252 	stmdaeq	r0, {r1, r4, r6, r9, ip, sp}
 684:	08003254 	stmdaeq	r0, {r2, r4, r6, r9, ip, sp}
 688:	08003258 	stmdaeq	r0, {r3, r4, r6, r9, ip, sp}
 68c:	0800328c 	stmdaeq	r0, {r2, r3, r7, r9, ip, sp}
	...
 698:	080032ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, ip, sp}
 69c:	080032bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip, sp}
 6a0:	080032be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, ip, sp}
 6a4:	080032d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip, sp}
	...
 6b0:	00000001 	andeq	r0, r0, r1
 6b4:	00000001 	andeq	r0, r0, r1
 6b8:	00000001 	andeq	r0, r0, r1
 6bc:	00000001 	andeq	r0, r0, r1
	...
 6c8:	08003326 	stmdaeq	r0, {r1, r2, r5, r8, r9, ip, sp}
 6cc:	08003342 	stmdaeq	r0, {r1, r6, r8, r9, ip, sp}
 6d0:	08003440 	stmdaeq	r0, {r6, sl, ip, sp}
 6d4:	0800344e 	stmdaeq	r0, {r1, r2, r3, r6, sl, ip, sp}
	...
 6e0:	0800335a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, ip, sp}
 6e4:	0800335c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, ip, sp}
 6e8:	08003360 	stmdaeq	r0, {r5, r6, r8, r9, ip, sp}
 6ec:	08003378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, ip, sp}
	...
 6f8:	080033a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, ip, sp}
 6fc:	080033ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, ip, sp}
 700:	080033be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, ip, sp}
 704:	080033c0 	stmdaeq	r0, {r6, r7, r8, r9, ip, sp}
	...
 710:	080033ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, ip, sp}
 714:	080033be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, ip, sp}
 718:	080033c0 	stmdaeq	r0, {r6, r7, r8, r9, ip, sp}
 71c:	08003414 	stmdaeq	r0, {r2, r4, sl, ip, sp}
	...
 728:	080033ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, ip, sp}
 72c:	080033be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, ip, sp}
 730:	080033c0 	stmdaeq	r0, {r6, r7, r8, r9, ip, sp}
 734:	080033e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, ip, sp}
	...
 740:	00000001 	andeq	r0, r0, r1
 744:	00000001 	andeq	r0, r0, r1
 748:	00000001 	andeq	r0, r0, r1
 74c:	00000001 	andeq	r0, r0, r1
 750:	00000001 	andeq	r0, r0, r1
 754:	00000001 	andeq	r0, r0, r1
	...
 760:	00000001 	andeq	r0, r0, r1
 764:	00000001 	andeq	r0, r0, r1
 768:	00000001 	andeq	r0, r0, r1
 76c:	00000001 	andeq	r0, r0, r1
	...
 778:	00000001 	andeq	r0, r0, r1
 77c:	00000001 	andeq	r0, r0, r1
 780:	00000001 	andeq	r0, r0, r1
 784:	00000001 	andeq	r0, r0, r1
 788:	00000001 	andeq	r0, r0, r1
 78c:	00000001 	andeq	r0, r0, r1
	...
 798:	00000001 	andeq	r0, r0, r1
 79c:	00000001 	andeq	r0, r0, r1
 7a0:	00000001 	andeq	r0, r0, r1
 7a4:	00000001 	andeq	r0, r0, r1
	...
 7b0:	00000001 	andeq	r0, r0, r1
 7b4:	00000001 	andeq	r0, r0, r1
 7b8:	08003118 	stmdaeq	r0, {r3, r4, r8, ip, sp}
 7bc:	080032b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, ip, sp}
 7c0:	00000001 	andeq	r0, r0, r1
 7c4:	00000001 	andeq	r0, r0, r1
 7c8:	00000001 	andeq	r0, r0, r1
 7cc:	00000001 	andeq	r0, r0, r1
 7d0:	00000001 	andeq	r0, r0, r1
 7d4:	00000001 	andeq	r0, r0, r1
 7d8:	080032b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, ip, sp}
 7dc:	08003310 	stmdaeq	r0, {r4, r8, r9, ip, sp}
 7e0:	00000001 	andeq	r0, r0, r1
 7e4:	00000001 	andeq	r0, r0, r1
 7e8:	08003310 	stmdaeq	r0, {r4, r8, r9, ip, sp}
 7ec:	0800344e 	stmdaeq	r0, {r1, r2, r3, r6, sl, ip, sp}
 7f0:	00000001 	andeq	r0, r0, r1
 7f4:	00000001 	andeq	r0, r0, r1
	...
 800:	00000001 	andeq	r0, r0, r1
 804:	00000001 	andeq	r0, r0, r1
 808:	00000001 	andeq	r0, r0, r1
 80c:	00000001 	andeq	r0, r0, r1
 810:	00000001 	andeq	r0, r0, r1
 814:	00000001 	andeq	r0, r0, r1
	...
 820:	00000001 	andeq	r0, r0, r1
 824:	00000001 	andeq	r0, r0, r1
 828:	00000001 	andeq	r0, r0, r1
 82c:	00000001 	andeq	r0, r0, r1
	...
 838:	08005418 	stmdaeq	r0, {r3, r4, sl, ip, lr}
 83c:	08005470 	stmdaeq	r0, {r4, r5, r6, sl, ip, lr}
 840:	08005474 	stmdaeq	r0, {r2, r4, r5, r6, sl, ip, lr}
 844:	0800549a 	stmdaeq	r0, {r1, r3, r4, r7, sl, ip, lr}
	...
 850:	080054c4 	stmdaeq	r0, {r2, r6, r7, sl, ip, lr}
 854:	080054c6 	stmdaeq	r0, {r1, r2, r6, r7, sl, ip, lr}
 858:	080054ca 	stmdaeq	r0, {r1, r3, r6, r7, sl, ip, lr}
 85c:	080054cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, ip, lr}
 860:	080054e0 	stmdaeq	r0, {r5, r6, r7, sl, ip, lr}
 864:	080054e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip, lr}
 868:	08005502 	stmdaeq	r0, {r1, r8, sl, ip, lr}
 86c:	0800552a 	stmdaeq	r0, {r1, r3, r5, r8, sl, ip, lr}
 870:	080055fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, ip, lr}
 874:	08005656 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, ip, lr}
 878:	0800569c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, lr}
 87c:	080056a2 	stmdaeq	r0, {r1, r5, r7, r9, sl, ip, lr}
	...
 888:	0800552a 	stmdaeq	r0, {r1, r3, r5, r8, sl, ip, lr}
 88c:	08005564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip, lr}
 890:	08005656 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, ip, lr}
 894:	0800569c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, ip, lr}
 898:	080056a2 	stmdaeq	r0, {r1, r5, r7, r9, sl, ip, lr}
 89c:	080056b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, ip, lr}
	...
 8a8:	08003450 	stmdaeq	r0, {r4, r6, sl, ip, sp}
 8ac:	080034a8 	stmdaeq	r0, {r3, r5, r7, sl, ip, sp}
 8b0:	080034a8 	stmdaeq	r0, {r3, r5, r7, sl, ip, sp}
 8b4:	0800540c 	stmdaeq	r0, {r2, r3, sl, ip, lr}
 8b8:	0800540c 	stmdaeq	r0, {r2, r3, sl, ip, lr}
 8bc:	0800549a 	stmdaeq	r0, {r1, r3, r4, r7, sl, ip, lr}
 8c0:	0800549c 	stmdaeq	r0, {r2, r3, r4, r7, sl, ip, lr}
 8c4:	080056b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, ip, lr}
	...
 8d0:	080056c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip, lr}
 8d4:	08005768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip, lr}
 8d8:	0800576a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, ip, lr}
 8dc:	0800576e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, ip, lr}
	...
 8e8:	08005848 	stmdaeq	r0, {r3, r6, fp, ip, lr}
 8ec:	08005852 	stmdaeq	r0, {r1, r4, r6, fp, ip, lr}
 8f0:	0800585c 	stmdaeq	r0, {r2, r3, r4, r6, fp, ip, lr}
 8f4:	08005860 	stmdaeq	r0, {r5, r6, fp, ip, lr}
 8f8:	08005864 	stmdaeq	r0, {r2, r5, r6, fp, ip, lr}
 8fc:	08005868 	stmdaeq	r0, {r3, r5, r6, fp, ip, lr}
 900:	0800586c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, lr}
 904:	0800586e 	stmdaeq	r0, {r1, r2, r3, r5, r6, fp, ip, lr}
	...
 910:	08005852 	stmdaeq	r0, {r1, r4, r6, fp, ip, lr}
 914:	0800585c 	stmdaeq	r0, {r2, r3, r4, r6, fp, ip, lr}
 918:	0800586e 	stmdaeq	r0, {r1, r2, r3, r5, r6, fp, ip, lr}
 91c:	08005872 	stmdaeq	r0, {r1, r4, r5, r6, fp, ip, lr}
 920:	08005876 	stmdaeq	r0, {r1, r2, r4, r5, r6, fp, ip, lr}
 924:	0800587a 	stmdaeq	r0, {r1, r3, r4, r5, r6, fp, ip, lr}
 928:	0800587e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, fp, ip, lr}
 92c:	08005880 	stmdaeq	r0, {r7, fp, ip, lr}
	...
 938:	08005884 	stmdaeq	r0, {r2, r7, fp, ip, lr}
 93c:	08005888 	stmdaeq	r0, {r3, r7, fp, ip, lr}
 940:	08005892 	stmdaeq	r0, {r1, r4, r7, fp, ip, lr}
 944:	0800589a 	stmdaeq	r0, {r1, r3, r4, r7, fp, ip, lr}
 948:	0800589e 	stmdaeq	r0, {r1, r2, r3, r4, r7, fp, ip, lr}
 94c:	080058a0 	stmdaeq	r0, {r5, r7, fp, ip, lr}
 950:	080058a8 	stmdaeq	r0, {r3, r5, r7, fp, ip, lr}
 954:	080058ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip, lr}
 958:	080058b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, fp, ip, lr}
 95c:	080058ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, fp, ip, lr}
 960:	080058c2 	stmdaeq	r0, {r1, r6, r7, fp, ip, lr}
 964:	080058c4 	stmdaeq	r0, {r2, r6, r7, fp, ip, lr}
	...
 970:	08005888 	stmdaeq	r0, {r3, r7, fp, ip, lr}
 974:	0800588a 	stmdaeq	r0, {r1, r3, r7, fp, ip, lr}
 978:	0800588e 	stmdaeq	r0, {r1, r2, r3, r7, fp, ip, lr}
 97c:	08005892 	stmdaeq	r0, {r1, r4, r7, fp, ip, lr}
 980:	0800589c 	stmdaeq	r0, {r2, r3, r4, r7, fp, ip, lr}
 984:	0800589e 	stmdaeq	r0, {r1, r2, r3, r4, r7, fp, ip, lr}
 988:	080058b0 	stmdaeq	r0, {r4, r5, r7, fp, ip, lr}
 98c:	080058b2 	stmdaeq	r0, {r1, r4, r5, r7, fp, ip, lr}
 990:	080058bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp, ip, lr}
 994:	080058c0 	stmdaeq	r0, {r6, r7, fp, ip, lr}
 998:	080058d0 	stmdaeq	r0, {r4, r6, r7, fp, ip, lr}
 99c:	080058d2 	stmdaeq	r0, {r1, r4, r6, r7, fp, ip, lr}
	...
 9a8:	080058a0 	stmdaeq	r0, {r5, r7, fp, ip, lr}
 9ac:	080058a2 	stmdaeq	r0, {r1, r5, r7, fp, ip, lr}
 9b0:	080058ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip, lr}
 9b4:	080058b0 	stmdaeq	r0, {r4, r5, r7, fp, ip, lr}
 9b8:	080058c0 	stmdaeq	r0, {r6, r7, fp, ip, lr}
 9bc:	080058c2 	stmdaeq	r0, {r1, r6, r7, fp, ip, lr}
 9c0:	080058c4 	stmdaeq	r0, {r2, r6, r7, fp, ip, lr}
 9c4:	080058c6 	stmdaeq	r0, {r1, r2, r6, r7, fp, ip, lr}
 9c8:	080058d2 	stmdaeq	r0, {r1, r4, r6, r7, fp, ip, lr}
 9cc:	080058d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, ip, lr}
	...
 9d8:	080058ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, ip, lr}
 9dc:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
 9e0:	08005958 	stmdaeq	r0, {r3, r4, r6, r8, fp, ip, lr}
 9e4:	08005960 	stmdaeq	r0, {r5, r6, r8, fp, ip, lr}
	...
 9f0:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
 9f4:	080058fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, fp, ip, lr}
 9f8:	080059b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, fp, ip, lr}
 9fc:	080059b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, fp, ip, lr}
 a00:	080059ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, fp, ip, lr}
 a04:	080059be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, fp, ip, lr}
 a08:	080059c4 	stmdaeq	r0, {r2, r6, r7, r8, fp, ip, lr}
 a0c:	080059c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, fp, ip, lr}
	...
 a18:	080058fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, fp, ip, lr}
 a1c:	08005908 	stmdaeq	r0, {r3, r8, fp, ip, lr}
 a20:	080059d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, ip, lr}
 a24:	080059dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, ip, lr}
 a28:	080059e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, ip, lr}
 a2c:	080059e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp, ip, lr}
 a30:	080059f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, fp, ip, lr}
 a34:	080059f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp, ip, lr}
	...
 a40:	08005960 	stmdaeq	r0, {r5, r6, r8, fp, ip, lr}
 a44:	08005968 	stmdaeq	r0, {r3, r5, r6, r8, fp, ip, lr}
 a48:	0800596a 	stmdaeq	r0, {r1, r3, r5, r6, r8, fp, ip, lr}
 a4c:	0800596e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, fp, ip, lr}
 a50:	08005972 	stmdaeq	r0, {r1, r4, r5, r6, r8, fp, ip, lr}
 a54:	08005976 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, fp, ip, lr}
	...
 a60:	080059ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, fp, ip, lr}
 a64:	080059ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, fp, ip, lr}
 a68:	080059d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, lr}
 a6c:	080059d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, ip, lr}
 a70:	080059e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp, ip, lr}
 a74:	080059e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, fp, ip, lr}
 a78:	080059ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, fp, ip, lr}
 a7c:	080059f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, fp, ip, lr}
 a80:	080059f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp, ip, lr}
 a84:	080059fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip, lr}
 a88:	080059fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, fp, ip, lr}
 a8c:	08005a04 	stmdaeq	r0, {r2, r9, fp, ip, lr}
	...
 a98:	08005b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, ip, lr}
 a9c:	08005b76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, fp, ip, lr}
 aa0:	08005b7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, fp, ip, lr}
 aa4:	08005b9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, fp, ip, lr}
	...
 ab0:	08005c2a 	stmdaeq	r0, {r1, r3, r5, sl, fp, ip, lr}
 ab4:	08005c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, ip, lr}
 ab8:	08005c3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, sl, fp, ip, lr}
 abc:	08005ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, ip, lr}
 ac0:	08005ca6 	stmdaeq	r0, {r1, r2, r5, r7, sl, fp, ip, lr}
 ac4:	08005caa 	stmdaeq	r0, {r1, r3, r5, r7, sl, fp, ip, lr}
	...
 ad0:	08005ce6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, fp, ip, lr}
 ad4:	08005d56 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl, fp, ip, lr}
 ad8:	08005d5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, fp, ip, lr}
 adc:	08005d7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, fp, ip, lr}
 ae0:	08005d80 	stmdaeq	r0, {r7, r8, sl, fp, ip, lr}
 ae4:	08005d82 	stmdaeq	r0, {r1, r7, r8, sl, fp, ip, lr}
 ae8:	08005d8c 	stmdaeq	r0, {r2, r3, r7, r8, sl, fp, ip, lr}
 aec:	08005d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, ip, lr}
 af0:	08005da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp, ip, lr}
 af4:	08005da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, ip, lr}
	...
 b00:	08005dce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, fp, ip, lr}
 b04:	08005e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip, lr}
 b08:	08005e52 	stmdaeq	r0, {r1, r4, r6, r9, sl, fp, ip, lr}
 b0c:	08005e56 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, fp, ip, lr}
 b10:	08005e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip, lr}
 b14:	08005e5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, fp, ip, lr}
	...
 b20:	080056b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, ip, lr}
 b24:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
 b28:	08005b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, lr}
 b2c:	08005bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, ip, lr}
 b30:	08005bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, ip, lr}
 b34:	08005e66 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, fp, ip, lr}
	...
 b40:	00000001 	andeq	r0, r0, r1
 b44:	00000001 	andeq	r0, r0, r1
 b48:	00000001 	andeq	r0, r0, r1
 b4c:	00000001 	andeq	r0, r0, r1
 b50:	00000001 	andeq	r0, r0, r1
 b54:	00000001 	andeq	r0, r0, r1
	...
 b60:	08005e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, ip, lr}
 b64:	08005e72 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, fp, ip, lr}
 b68:	08005e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp, ip, lr}
 b6c:	08005e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, lr}
 b70:	08005e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, lr}
 b74:	08005f5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sl, fp, ip, lr}
 b78:	08005f5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sl, fp, ip, lr}
 b7c:	08005f9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sl, fp, ip, lr}
	...
 b88:	08005f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip, lr}
 b8c:	08005fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
 b90:	08005fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
 b94:	0800618c 	stmdaeq	r0, {r2, r3, r7, r8, sp, lr}
	...
 ba0:	00000001 	andeq	r0, r0, r1
 ba4:	00000001 	andeq	r0, r0, r1
 ba8:	00000001 	andeq	r0, r0, r1
 bac:	00000001 	andeq	r0, r0, r1
	...
 bb8:	08006286 	stmdaeq	r0, {r1, r2, r7, r9, sp, lr}
 bbc:	08006288 	stmdaeq	r0, {r3, r7, r9, sp, lr}
 bc0:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
 bc4:	080062c4 	stmdaeq	r0, {r2, r6, r7, r9, sp, lr}
	...
 bd0:	00000001 	andeq	r0, r0, r1
 bd4:	00000001 	andeq	r0, r0, r1
 bd8:	00000001 	andeq	r0, r0, r1
 bdc:	00000001 	andeq	r0, r0, r1
	...
 be8:	00000001 	andeq	r0, r0, r1
 bec:	00000001 	andeq	r0, r0, r1
 bf0:	00000001 	andeq	r0, r0, r1
 bf4:	00000001 	andeq	r0, r0, r1
	...
 c00:	00000001 	andeq	r0, r0, r1
 c04:	00000001 	andeq	r0, r0, r1
 c08:	00000001 	andeq	r0, r0, r1
 c0c:	00000001 	andeq	r0, r0, r1
 c10:	00000001 	andeq	r0, r0, r1
 c14:	00000001 	andeq	r0, r0, r1
	...
 c20:	00000001 	andeq	r0, r0, r1
 c24:	00000001 	andeq	r0, r0, r1
 c28:	00000001 	andeq	r0, r0, r1
 c2c:	00000001 	andeq	r0, r0, r1
	...
 c38:	00000001 	andeq	r0, r0, r1
 c3c:	00000001 	andeq	r0, r0, r1
 c40:	00000001 	andeq	r0, r0, r1
 c44:	00000001 	andeq	r0, r0, r1
	...
 c50:	00000001 	andeq	r0, r0, r1
 c54:	00000001 	andeq	r0, r0, r1
 c58:	00000001 	andeq	r0, r0, r1
 c5c:	00000001 	andeq	r0, r0, r1
 c60:	00000001 	andeq	r0, r0, r1
 c64:	00000001 	andeq	r0, r0, r1
 c68:	00000001 	andeq	r0, r0, r1
 c6c:	00000001 	andeq	r0, r0, r1
 c70:	00000001 	andeq	r0, r0, r1
 c74:	00000001 	andeq	r0, r0, r1
 c78:	00000001 	andeq	r0, r0, r1
 c7c:	00000001 	andeq	r0, r0, r1
 c80:	00000001 	andeq	r0, r0, r1
 c84:	00000001 	andeq	r0, r0, r1
 c88:	00000001 	andeq	r0, r0, r1
 c8c:	00000001 	andeq	r0, r0, r1
 c90:	00000001 	andeq	r0, r0, r1
 c94:	00000001 	andeq	r0, r0, r1
 c98:	00000001 	andeq	r0, r0, r1
 c9c:	00000001 	andeq	r0, r0, r1
 ca0:	00000001 	andeq	r0, r0, r1
 ca4:	00000001 	andeq	r0, r0, r1
 ca8:	00000001 	andeq	r0, r0, r1
 cac:	00000001 	andeq	r0, r0, r1
 cb0:	00000001 	andeq	r0, r0, r1
 cb4:	00000001 	andeq	r0, r0, r1
 cb8:	0800618c 	stmdaeq	r0, {r2, r3, r7, r8, sp, lr}
 cbc:	080061b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sp, lr}
 cc0:	00000001 	andeq	r0, r0, r1
 cc4:	00000001 	andeq	r0, r0, r1
 cc8:	00000001 	andeq	r0, r0, r1
 ccc:	00000001 	andeq	r0, r0, r1
 cd0:	00000001 	andeq	r0, r0, r1
 cd4:	00000001 	andeq	r0, r0, r1
 cd8:	00000001 	andeq	r0, r0, r1
 cdc:	00000001 	andeq	r0, r0, r1
 ce0:	00000001 	andeq	r0, r0, r1
 ce4:	00000001 	andeq	r0, r0, r1
 ce8:	080061b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sp, lr}
 cec:	080061d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sp, lr}
 cf0:	00000001 	andeq	r0, r0, r1
 cf4:	00000001 	andeq	r0, r0, r1
 cf8:	00000001 	andeq	r0, r0, r1
 cfc:	00000001 	andeq	r0, r0, r1
 d00:	080061d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sp, lr}
 d04:	080061f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sp, lr}
 d08:	00000001 	andeq	r0, r0, r1
 d0c:	00000001 	andeq	r0, r0, r1
 d10:	00000001 	andeq	r0, r0, r1
 d14:	00000001 	andeq	r0, r0, r1
 d18:	00000001 	andeq	r0, r0, r1
 d1c:	00000001 	andeq	r0, r0, r1
 d20:	00000001 	andeq	r0, r0, r1
 d24:	00000001 	andeq	r0, r0, r1
 d28:	00000001 	andeq	r0, r0, r1
 d2c:	00000001 	andeq	r0, r0, r1
 d30:	00000001 	andeq	r0, r0, r1
 d34:	00000001 	andeq	r0, r0, r1
 d38:	00000001 	andeq	r0, r0, r1
 d3c:	00000001 	andeq	r0, r0, r1
 d40:	00000001 	andeq	r0, r0, r1
 d44:	00000001 	andeq	r0, r0, r1
 d48:	00000001 	andeq	r0, r0, r1
 d4c:	00000001 	andeq	r0, r0, r1
 d50:	080061f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sp, lr}
 d54:	08006210 	stmdaeq	r0, {r4, r9, sp, lr}
 d58:	08006210 	stmdaeq	r0, {r4, r9, sp, lr}
 d5c:	08006230 	stmdaeq	r0, {r4, r5, r9, sp, lr}
 d60:	00000001 	andeq	r0, r0, r1
 d64:	00000001 	andeq	r0, r0, r1
 d68:	00000001 	andeq	r0, r0, r1
 d6c:	00000001 	andeq	r0, r0, r1
 d70:	00000001 	andeq	r0, r0, r1
 d74:	00000001 	andeq	r0, r0, r1
 d78:	00000001 	andeq	r0, r0, r1
 d7c:	00000001 	andeq	r0, r0, r1
 d80:	08006230 	stmdaeq	r0, {r4, r5, r9, sp, lr}
 d84:	0800624c 	stmdaeq	r0, {r2, r3, r6, r9, sp, lr}
 d88:	0800624c 	stmdaeq	r0, {r2, r3, r6, r9, sp, lr}
 d8c:	08006268 	stmdaeq	r0, {r3, r5, r6, r9, sp, lr}
 d90:	08006268 	stmdaeq	r0, {r3, r5, r6, r9, sp, lr}
 d94:	08006284 	stmdaeq	r0, {r2, r7, r9, sp, lr}
 d98:	00000001 	andeq	r0, r0, r1
 d9c:	00000001 	andeq	r0, r0, r1
 da0:	08006284 	stmdaeq	r0, {r2, r7, r9, sp, lr}
 da4:	080062c4 	stmdaeq	r0, {r2, r6, r7, r9, sp, lr}
 da8:	00000001 	andeq	r0, r0, r1
 dac:	00000001 	andeq	r0, r0, r1
 db0:	00000001 	andeq	r0, r0, r1
 db4:	00000001 	andeq	r0, r0, r1
 db8:	00000001 	andeq	r0, r0, r1
 dbc:	00000001 	andeq	r0, r0, r1
 dc0:	00000001 	andeq	r0, r0, r1
 dc4:	00000001 	andeq	r0, r0, r1
 dc8:	00000001 	andeq	r0, r0, r1
 dcc:	00000001 	andeq	r0, r0, r1
 dd0:	00000001 	andeq	r0, r0, r1
 dd4:	00000001 	andeq	r0, r0, r1
 dd8:	00000001 	andeq	r0, r0, r1
 ddc:	00000001 	andeq	r0, r0, r1
 de0:	00000001 	andeq	r0, r0, r1
 de4:	00000001 	andeq	r0, r0, r1
 de8:	00000001 	andeq	r0, r0, r1
 dec:	00000001 	andeq	r0, r0, r1
 df0:	00000001 	andeq	r0, r0, r1
 df4:	00000001 	andeq	r0, r0, r1
 df8:	00000001 	andeq	r0, r0, r1
 dfc:	00000001 	andeq	r0, r0, r1
 e00:	00000001 	andeq	r0, r0, r1
 e04:	00000001 	andeq	r0, r0, r1
 e08:	00000001 	andeq	r0, r0, r1
 e0c:	00000001 	andeq	r0, r0, r1
 e10:	00000001 	andeq	r0, r0, r1
 e14:	00000001 	andeq	r0, r0, r1
 e18:	00000001 	andeq	r0, r0, r1
 e1c:	00000001 	andeq	r0, r0, r1
 e20:	00000001 	andeq	r0, r0, r1
 e24:	00000001 	andeq	r0, r0, r1
	...
 e30:	080062c4 	stmdaeq	r0, {r2, r6, r7, r9, sp, lr}
 e34:	08006418 	stmdaeq	r0, {r3, r4, sl, sp, lr}
 e38:	00000001 	andeq	r0, r0, r1
 e3c:	00000001 	andeq	r0, r0, r1
	...
 e48:	08006418 	stmdaeq	r0, {r3, r4, sl, sp, lr}
 e4c:	08006450 	stmdaeq	r0, {r4, r6, sl, sp, lr}
	...
 e58:	08006758 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, sp, lr}
 e5c:	08006760 	stmdaeq	r0, {r5, r6, r8, r9, sl, sp, lr}
 e60:	08006764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, sp, lr}
 e64:	08006766 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, sp, lr}
 e68:	08006768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, sp, lr}
 e6c:	08006778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, sp, lr}
	...
 e78:	0800692e 	stmdaeq	r0, {r1, r2, r3, r5, r8, fp, sp, lr}
 e7c:	08006ad8 	stmdaeq	r0, {r3, r4, r6, r7, r9, fp, sp, lr}
 e80:	08006ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp, sp, lr}
 e84:	08006b00 	stmdaeq	r0, {r8, r9, fp, sp, lr}
	...
 e90:	08006450 	stmdaeq	r0, {r4, r6, sl, sp, lr}
 e94:	08006474 	stmdaeq	r0, {r2, r4, r5, r6, sl, sp, lr}
 e98:	08006474 	stmdaeq	r0, {r2, r4, r5, r6, sl, sp, lr}
 e9c:	08006498 	stmdaeq	r0, {r3, r4, r7, sl, sp, lr}
 ea0:	08006498 	stmdaeq	r0, {r3, r4, r7, sl, sp, lr}
 ea4:	08006528 	stmdaeq	r0, {r3, r5, r8, sl, sp, lr}
 ea8:	08006528 	stmdaeq	r0, {r3, r5, r8, sl, sp, lr}
 eac:	080065d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, sp, lr}
 eb0:	080065d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, sp, lr}
 eb4:	08006608 	stmdaeq	r0, {r3, r9, sl, sp, lr}
 eb8:	08006608 	stmdaeq	r0, {r3, r9, sl, sp, lr}
 ebc:	08006650 	stmdaeq	r0, {r4, r6, r9, sl, sp, lr}
 ec0:	08006650 	stmdaeq	r0, {r4, r6, r9, sl, sp, lr}
 ec4:	08006720 	stmdaeq	r0, {r5, r8, r9, sl, sp, lr}
 ec8:	08006720 	stmdaeq	r0, {r5, r8, r9, sl, sp, lr}
 ecc:	080067a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, sp, lr}
 ed0:	080067a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, sp, lr}
 ed4:	080067c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, sp, lr}
 ed8:	080067c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, sp, lr}
 edc:	080067e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, sp, lr}
 ee0:	080067e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, sp, lr}
 ee4:	08006824 	stmdaeq	r0, {r2, r5, fp, sp, lr}
 ee8:	08006824 	stmdaeq	r0, {r2, r5, fp, sp, lr}
 eec:	08006b00 	stmdaeq	r0, {r8, r9, fp, sp, lr}
 ef0:	08006b00 	stmdaeq	r0, {r8, r9, fp, sp, lr}
 ef4:	08006bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, sp, lr}
 ef8:	08006bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, sp, lr}
 efc:	08006c00 	stmdaeq	r0, {sl, fp, sp, lr}
 f00:	08006c00 	stmdaeq	r0, {sl, fp, sp, lr}
 f04:	08006c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, sp, lr}
 f08:	00000001 	andeq	r0, r0, r1
 f0c:	00000001 	andeq	r0, r0, r1
	...
 f18:	08006c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, sp, lr}
 f1c:	08006c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, sp, lr}
 f20:	08006c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, sp, lr}
 f24:	08006cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, sp, lr}
	...
